# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities

__all__ = [
    'AllowUrlListPolicyObjectEntryArgs',
    'AllowUrlListPolicyObjectEntryArgsDict',
    'AppProbeClassPolicyObjectMappingArgs',
    'AppProbeClassPolicyObjectMappingArgsDict',
    'ApplicationAwareRoutingPolicyDefinitionSequenceArgs',
    'ApplicationAwareRoutingPolicyDefinitionSequenceArgsDict',
    'ApplicationAwareRoutingPolicyDefinitionSequenceActionEntryArgs',
    'ApplicationAwareRoutingPolicyDefinitionSequenceActionEntryArgsDict',
    'ApplicationAwareRoutingPolicyDefinitionSequenceActionEntrySlaClassParameterArgs',
    'ApplicationAwareRoutingPolicyDefinitionSequenceActionEntrySlaClassParameterArgsDict',
    'ApplicationAwareRoutingPolicyDefinitionSequenceMatchEntryArgs',
    'ApplicationAwareRoutingPolicyDefinitionSequenceMatchEntryArgsDict',
    'ApplicationListPolicyObjectEntryArgs',
    'ApplicationListPolicyObjectEntryArgsDict',
    'ApplicationPriorityQosPolicyQosSchedulerArgs',
    'ApplicationPriorityQosPolicyQosSchedulerArgsDict',
    'ApplicationPriorityTrafficPolicyPolicySequenceArgs',
    'ApplicationPriorityTrafficPolicyPolicySequenceArgsDict',
    'ApplicationPriorityTrafficPolicyPolicySequenceActionArgs',
    'ApplicationPriorityTrafficPolicyPolicySequenceActionArgsDict',
    'ApplicationPriorityTrafficPolicyPolicySequenceActionSetParameterArgs',
    'ApplicationPriorityTrafficPolicyPolicySequenceActionSetParameterArgsDict',
    'ApplicationPriorityTrafficPolicyPolicySequenceActionSlaClassArgs',
    'ApplicationPriorityTrafficPolicyPolicySequenceActionSlaClassArgsDict',
    'ApplicationPriorityTrafficPolicyPolicySequenceMatchEntryArgs',
    'ApplicationPriorityTrafficPolicyPolicySequenceMatchEntryArgsDict',
    'AsPathListPolicyObjectEntryArgs',
    'AsPathListPolicyObjectEntryArgsDict',
    'AttachFeatureDeviceTemplateDeviceArgs',
    'AttachFeatureDeviceTemplateDeviceArgsDict',
    'BlockUrlListPolicyObjectEntryArgs',
    'BlockUrlListPolicyObjectEntryArgsDict',
    'CedgeAaaFeatureTemplateAccountingRuleArgs',
    'CedgeAaaFeatureTemplateAccountingRuleArgsDict',
    'CedgeAaaFeatureTemplateAuthorizationRuleArgs',
    'CedgeAaaFeatureTemplateAuthorizationRuleArgsDict',
    'CedgeAaaFeatureTemplateRadiusClientArgs',
    'CedgeAaaFeatureTemplateRadiusClientArgsDict',
    'CedgeAaaFeatureTemplateRadiusClientVpnConfigurationArgs',
    'CedgeAaaFeatureTemplateRadiusClientVpnConfigurationArgsDict',
    'CedgeAaaFeatureTemplateRadiusServerGroupArgs',
    'CedgeAaaFeatureTemplateRadiusServerGroupArgsDict',
    'CedgeAaaFeatureTemplateRadiusServerGroupServerArgs',
    'CedgeAaaFeatureTemplateRadiusServerGroupServerArgsDict',
    'CedgeAaaFeatureTemplateTacacsServerGroupArgs',
    'CedgeAaaFeatureTemplateTacacsServerGroupArgsDict',
    'CedgeAaaFeatureTemplateTacacsServerGroupServerArgs',
    'CedgeAaaFeatureTemplateTacacsServerGroupServerArgsDict',
    'CedgeAaaFeatureTemplateUserArgs',
    'CedgeAaaFeatureTemplateUserArgsDict',
    'CedgeAaaFeatureTemplateUserSshPubkeyArgs',
    'CedgeAaaFeatureTemplateUserSshPubkeyArgsDict',
    'CedgeIgmpFeatureTemplateInterfaceArgs',
    'CedgeIgmpFeatureTemplateInterfaceArgsDict',
    'CedgeIgmpFeatureTemplateInterfaceJoinGroupArgs',
    'CedgeIgmpFeatureTemplateInterfaceJoinGroupArgsDict',
    'CedgePimFeatureTemplateInterfaceArgs',
    'CedgePimFeatureTemplateInterfaceArgsDict',
    'CedgePimFeatureTemplateRpAddressArgs',
    'CedgePimFeatureTemplateRpAddressArgsDict',
    'CedgePimFeatureTemplateRpAnnounceFieldArgs',
    'CedgePimFeatureTemplateRpAnnounceFieldArgsDict',
    'CedgePimFeatureTemplateRpCandidateArgs',
    'CedgePimFeatureTemplateRpCandidateArgsDict',
    'CellularControllerFeatureTemplateDataProfileArgs',
    'CellularControllerFeatureTemplateDataProfileArgsDict',
    'CentralizedPolicyDefinitionArgs',
    'CentralizedPolicyDefinitionArgsDict',
    'CentralizedPolicyDefinitionEntryArgs',
    'CentralizedPolicyDefinitionEntryArgsDict',
    'CflowdPolicyDefinitionCollectorArgs',
    'CflowdPolicyDefinitionCollectorArgsDict',
    'CiscoBfdFeatureTemplateColorArgs',
    'CiscoBfdFeatureTemplateColorArgsDict',
    'CiscoBgpFeatureTemplateAddressFamilyArgs',
    'CiscoBgpFeatureTemplateAddressFamilyArgsDict',
    'CiscoBgpFeatureTemplateAddressFamilyIpv4AggregateAddressArgs',
    'CiscoBgpFeatureTemplateAddressFamilyIpv4AggregateAddressArgsDict',
    'CiscoBgpFeatureTemplateAddressFamilyIpv4NetworkArgs',
    'CiscoBgpFeatureTemplateAddressFamilyIpv4NetworkArgsDict',
    'CiscoBgpFeatureTemplateAddressFamilyIpv6AggregateAddressArgs',
    'CiscoBgpFeatureTemplateAddressFamilyIpv6AggregateAddressArgsDict',
    'CiscoBgpFeatureTemplateAddressFamilyIpv6NetworkArgs',
    'CiscoBgpFeatureTemplateAddressFamilyIpv6NetworkArgsDict',
    'CiscoBgpFeatureTemplateAddressFamilyRedistributeRouteArgs',
    'CiscoBgpFeatureTemplateAddressFamilyRedistributeRouteArgsDict',
    'CiscoBgpFeatureTemplateIpv4NeighborArgs',
    'CiscoBgpFeatureTemplateIpv4NeighborArgsDict',
    'CiscoBgpFeatureTemplateIpv4NeighborAddressFamilyArgs',
    'CiscoBgpFeatureTemplateIpv4NeighborAddressFamilyArgsDict',
    'CiscoBgpFeatureTemplateIpv4NeighborAddressFamilyRoutePolicyArgs',
    'CiscoBgpFeatureTemplateIpv4NeighborAddressFamilyRoutePolicyArgsDict',
    'CiscoBgpFeatureTemplateIpv4RouteTargetArgs',
    'CiscoBgpFeatureTemplateIpv4RouteTargetArgsDict',
    'CiscoBgpFeatureTemplateIpv4RouteTargetExportArgs',
    'CiscoBgpFeatureTemplateIpv4RouteTargetExportArgsDict',
    'CiscoBgpFeatureTemplateIpv4RouteTargetImportArgs',
    'CiscoBgpFeatureTemplateIpv4RouteTargetImportArgsDict',
    'CiscoBgpFeatureTemplateIpv6NeighborArgs',
    'CiscoBgpFeatureTemplateIpv6NeighborArgsDict',
    'CiscoBgpFeatureTemplateIpv6NeighborAddressFamilyArgs',
    'CiscoBgpFeatureTemplateIpv6NeighborAddressFamilyArgsDict',
    'CiscoBgpFeatureTemplateIpv6NeighborAddressFamilyRoutePolicyArgs',
    'CiscoBgpFeatureTemplateIpv6NeighborAddressFamilyRoutePolicyArgsDict',
    'CiscoBgpFeatureTemplateIpv6RouteTargetArgs',
    'CiscoBgpFeatureTemplateIpv6RouteTargetArgsDict',
    'CiscoBgpFeatureTemplateIpv6RouteTargetExportArgs',
    'CiscoBgpFeatureTemplateIpv6RouteTargetExportArgsDict',
    'CiscoBgpFeatureTemplateIpv6RouteTargetImportArgs',
    'CiscoBgpFeatureTemplateIpv6RouteTargetImportArgsDict',
    'CiscoBgpFeatureTemplateMplsInterfaceArgs',
    'CiscoBgpFeatureTemplateMplsInterfaceArgsDict',
    'CiscoDhcpServerFeatureTemplateOptionArgs',
    'CiscoDhcpServerFeatureTemplateOptionArgsDict',
    'CiscoDhcpServerFeatureTemplateStaticLeaseArgs',
    'CiscoDhcpServerFeatureTemplateStaticLeaseArgsDict',
    'CiscoLoggingFeatureTemplateIpv4ServerArgs',
    'CiscoLoggingFeatureTemplateIpv4ServerArgsDict',
    'CiscoLoggingFeatureTemplateIpv6ServerArgs',
    'CiscoLoggingFeatureTemplateIpv6ServerArgsDict',
    'CiscoLoggingFeatureTemplateTlsProfileArgs',
    'CiscoLoggingFeatureTemplateTlsProfileArgsDict',
    'CiscoNtpFeatureTemplateAuthenticationKeyArgs',
    'CiscoNtpFeatureTemplateAuthenticationKeyArgsDict',
    'CiscoNtpFeatureTemplateServerArgs',
    'CiscoNtpFeatureTemplateServerArgsDict',
    'CiscoOmpFeatureTemplateAdvertiseIpv4RouteArgs',
    'CiscoOmpFeatureTemplateAdvertiseIpv4RouteArgsDict',
    'CiscoOmpFeatureTemplateAdvertiseIpv6RouteArgs',
    'CiscoOmpFeatureTemplateAdvertiseIpv6RouteArgsDict',
    'CiscoOspfFeatureTemplateAreaArgs',
    'CiscoOspfFeatureTemplateAreaArgsDict',
    'CiscoOspfFeatureTemplateAreaInterfaceArgs',
    'CiscoOspfFeatureTemplateAreaInterfaceArgsDict',
    'CiscoOspfFeatureTemplateAreaRangeArgs',
    'CiscoOspfFeatureTemplateAreaRangeArgsDict',
    'CiscoOspfFeatureTemplateMaxMetricRouterLsaArgs',
    'CiscoOspfFeatureTemplateMaxMetricRouterLsaArgsDict',
    'CiscoOspfFeatureTemplateRedistributeArgs',
    'CiscoOspfFeatureTemplateRedistributeArgsDict',
    'CiscoOspfFeatureTemplateRoutePolicyArgs',
    'CiscoOspfFeatureTemplateRoutePolicyArgsDict',
    'CiscoOspfv3FeatureTemplateIpv4AreaArgs',
    'CiscoOspfv3FeatureTemplateIpv4AreaArgsDict',
    'CiscoOspfv3FeatureTemplateIpv4AreaInterfaceArgs',
    'CiscoOspfv3FeatureTemplateIpv4AreaInterfaceArgsDict',
    'CiscoOspfv3FeatureTemplateIpv4AreaRangeArgs',
    'CiscoOspfv3FeatureTemplateIpv4AreaRangeArgsDict',
    'CiscoOspfv3FeatureTemplateIpv4MaxMetricRouterLsaArgs',
    'CiscoOspfv3FeatureTemplateIpv4MaxMetricRouterLsaArgsDict',
    'CiscoOspfv3FeatureTemplateIpv4RedistributeArgs',
    'CiscoOspfv3FeatureTemplateIpv4RedistributeArgsDict',
    'CiscoOspfv3FeatureTemplateIpv6AreaArgs',
    'CiscoOspfv3FeatureTemplateIpv6AreaArgsDict',
    'CiscoOspfv3FeatureTemplateIpv6AreaInterfaceArgs',
    'CiscoOspfv3FeatureTemplateIpv6AreaInterfaceArgsDict',
    'CiscoOspfv3FeatureTemplateIpv6AreaRangeArgs',
    'CiscoOspfv3FeatureTemplateIpv6AreaRangeArgsDict',
    'CiscoOspfv3FeatureTemplateIpv6MaxMetricRouterLsaArgs',
    'CiscoOspfv3FeatureTemplateIpv6MaxMetricRouterLsaArgsDict',
    'CiscoOspfv3FeatureTemplateIpv6RedistributeArgs',
    'CiscoOspfv3FeatureTemplateIpv6RedistributeArgsDict',
    'CiscoSecureInternetGatewayFeatureTemplateInterfaceArgs',
    'CiscoSecureInternetGatewayFeatureTemplateInterfaceArgsDict',
    'CiscoSecureInternetGatewayFeatureTemplateServiceArgs',
    'CiscoSecureInternetGatewayFeatureTemplateServiceArgsDict',
    'CiscoSecureInternetGatewayFeatureTemplateServiceInterfacePairArgs',
    'CiscoSecureInternetGatewayFeatureTemplateServiceInterfacePairArgsDict',
    'CiscoSecureInternetGatewayFeatureTemplateTrackerArgs',
    'CiscoSecureInternetGatewayFeatureTemplateTrackerArgsDict',
    'CiscoSecurityFeatureTemplateKeyArgs',
    'CiscoSecurityFeatureTemplateKeyArgsDict',
    'CiscoSecurityFeatureTemplateKeychainArgs',
    'CiscoSecurityFeatureTemplateKeychainArgsDict',
    'CiscoSnmpFeatureTemplateCommunityArgs',
    'CiscoSnmpFeatureTemplateCommunityArgsDict',
    'CiscoSnmpFeatureTemplateGroupArgs',
    'CiscoSnmpFeatureTemplateGroupArgsDict',
    'CiscoSnmpFeatureTemplateTrapTargetArgs',
    'CiscoSnmpFeatureTemplateTrapTargetArgsDict',
    'CiscoSnmpFeatureTemplateUserArgs',
    'CiscoSnmpFeatureTemplateUserArgsDict',
    'CiscoSnmpFeatureTemplateViewArgs',
    'CiscoSnmpFeatureTemplateViewArgsDict',
    'CiscoSnmpFeatureTemplateViewObjectIdentifierArgs',
    'CiscoSnmpFeatureTemplateViewObjectIdentifierArgsDict',
    'CiscoSystemFeatureTemplateGeoFencingSmsPhoneNumberArgs',
    'CiscoSystemFeatureTemplateGeoFencingSmsPhoneNumberArgsDict',
    'CiscoSystemFeatureTemplateObjectTrackerArgs',
    'CiscoSystemFeatureTemplateObjectTrackerArgsDict',
    'CiscoSystemFeatureTemplateObjectTrackerGroupTracksIdArgs',
    'CiscoSystemFeatureTemplateObjectTrackerGroupTracksIdArgsDict',
    'CiscoSystemFeatureTemplateTrackerArgs',
    'CiscoSystemFeatureTemplateTrackerArgsDict',
    'CiscoThousandeyesFeatureTemplateVirtualApplicationArgs',
    'CiscoThousandeyesFeatureTemplateVirtualApplicationArgsDict',
    'CiscoTrustsecFeatureTemplateSxpConnectionArgs',
    'CiscoTrustsecFeatureTemplateSxpConnectionArgsDict',
    'CiscoVpnFeatureTemplateDnsHostArgs',
    'CiscoVpnFeatureTemplateDnsHostArgsDict',
    'CiscoVpnFeatureTemplateDnsIpv4ServerArgs',
    'CiscoVpnFeatureTemplateDnsIpv4ServerArgsDict',
    'CiscoVpnFeatureTemplateDnsIpv6ServerArgs',
    'CiscoVpnFeatureTemplateDnsIpv6ServerArgsDict',
    'CiscoVpnFeatureTemplateIpv4StaticGreRouteArgs',
    'CiscoVpnFeatureTemplateIpv4StaticGreRouteArgsDict',
    'CiscoVpnFeatureTemplateIpv4StaticIpsecRouteArgs',
    'CiscoVpnFeatureTemplateIpv4StaticIpsecRouteArgsDict',
    'CiscoVpnFeatureTemplateIpv4StaticRouteArgs',
    'CiscoVpnFeatureTemplateIpv4StaticRouteArgsDict',
    'CiscoVpnFeatureTemplateIpv4StaticRouteNextHopArgs',
    'CiscoVpnFeatureTemplateIpv4StaticRouteNextHopArgsDict',
    'CiscoVpnFeatureTemplateIpv4StaticRouteTrackNextHopArgs',
    'CiscoVpnFeatureTemplateIpv4StaticRouteTrackNextHopArgsDict',
    'CiscoVpnFeatureTemplateIpv4StaticServiceRouteArgs',
    'CiscoVpnFeatureTemplateIpv4StaticServiceRouteArgsDict',
    'CiscoVpnFeatureTemplateIpv6StaticRouteArgs',
    'CiscoVpnFeatureTemplateIpv6StaticRouteArgsDict',
    'CiscoVpnFeatureTemplateIpv6StaticRouteNextHopArgs',
    'CiscoVpnFeatureTemplateIpv6StaticRouteNextHopArgsDict',
    'CiscoVpnFeatureTemplateNat64PoolArgs',
    'CiscoVpnFeatureTemplateNat64PoolArgsDict',
    'CiscoVpnFeatureTemplateNatPoolArgs',
    'CiscoVpnFeatureTemplateNatPoolArgsDict',
    'CiscoVpnFeatureTemplateOmpAdvertiseIpv4RouteArgs',
    'CiscoVpnFeatureTemplateOmpAdvertiseIpv4RouteArgsDict',
    'CiscoVpnFeatureTemplateOmpAdvertiseIpv4RoutePrefixArgs',
    'CiscoVpnFeatureTemplateOmpAdvertiseIpv4RoutePrefixArgsDict',
    'CiscoVpnFeatureTemplateOmpAdvertiseIpv6RouteArgs',
    'CiscoVpnFeatureTemplateOmpAdvertiseIpv6RouteArgsDict',
    'CiscoVpnFeatureTemplateOmpAdvertiseIpv6RoutePrefixArgs',
    'CiscoVpnFeatureTemplateOmpAdvertiseIpv6RoutePrefixArgsDict',
    'CiscoVpnFeatureTemplatePortForwardRuleArgs',
    'CiscoVpnFeatureTemplatePortForwardRuleArgsDict',
    'CiscoVpnFeatureTemplateRouteGlobalExportArgs',
    'CiscoVpnFeatureTemplateRouteGlobalExportArgsDict',
    'CiscoVpnFeatureTemplateRouteGlobalExportRedistributeArgs',
    'CiscoVpnFeatureTemplateRouteGlobalExportRedistributeArgsDict',
    'CiscoVpnFeatureTemplateRouteGlobalImportArgs',
    'CiscoVpnFeatureTemplateRouteGlobalImportArgsDict',
    'CiscoVpnFeatureTemplateRouteGlobalImportRedistributeArgs',
    'CiscoVpnFeatureTemplateRouteGlobalImportRedistributeArgsDict',
    'CiscoVpnFeatureTemplateRouteVpnImportArgs',
    'CiscoVpnFeatureTemplateRouteVpnImportArgsDict',
    'CiscoVpnFeatureTemplateRouteVpnImportRedistributeArgs',
    'CiscoVpnFeatureTemplateRouteVpnImportRedistributeArgsDict',
    'CiscoVpnFeatureTemplateServiceArgs',
    'CiscoVpnFeatureTemplateServiceArgsDict',
    'CiscoVpnFeatureTemplateStaticNatRuleArgs',
    'CiscoVpnFeatureTemplateStaticNatRuleArgsDict',
    'CiscoVpnFeatureTemplateStaticNatSubnetRuleArgs',
    'CiscoVpnFeatureTemplateStaticNatSubnetRuleArgsDict',
    'CiscoVpnInterfaceFeatureTemplateAccessListArgs',
    'CiscoVpnInterfaceFeatureTemplateAccessListArgsDict',
    'CiscoVpnInterfaceFeatureTemplateIpv4SecondaryAddressArgs',
    'CiscoVpnInterfaceFeatureTemplateIpv4SecondaryAddressArgsDict',
    'CiscoVpnInterfaceFeatureTemplateIpv4VrrpArgs',
    'CiscoVpnInterfaceFeatureTemplateIpv4VrrpArgsDict',
    'CiscoVpnInterfaceFeatureTemplateIpv4VrrpIpv4SecondaryAddressArgs',
    'CiscoVpnInterfaceFeatureTemplateIpv4VrrpIpv4SecondaryAddressArgsDict',
    'CiscoVpnInterfaceFeatureTemplateIpv4VrrpTrackingObjectArgs',
    'CiscoVpnInterfaceFeatureTemplateIpv4VrrpTrackingObjectArgsDict',
    'CiscoVpnInterfaceFeatureTemplateIpv6AccessListArgs',
    'CiscoVpnInterfaceFeatureTemplateIpv6AccessListArgsDict',
    'CiscoVpnInterfaceFeatureTemplateIpv6DhcpHelperArgs',
    'CiscoVpnInterfaceFeatureTemplateIpv6DhcpHelperArgsDict',
    'CiscoVpnInterfaceFeatureTemplateIpv6SecondaryAddressArgs',
    'CiscoVpnInterfaceFeatureTemplateIpv6SecondaryAddressArgsDict',
    'CiscoVpnInterfaceFeatureTemplateIpv6VrrpArgs',
    'CiscoVpnInterfaceFeatureTemplateIpv6VrrpArgsDict',
    'CiscoVpnInterfaceFeatureTemplateIpv6VrrpIpv6AddressArgs',
    'CiscoVpnInterfaceFeatureTemplateIpv6VrrpIpv6AddressArgsDict',
    'CiscoVpnInterfaceFeatureTemplateStaticArpArgs',
    'CiscoVpnInterfaceFeatureTemplateStaticArpArgsDict',
    'CiscoVpnInterfaceFeatureTemplateStaticNat66EntryArgs',
    'CiscoVpnInterfaceFeatureTemplateStaticNat66EntryArgsDict',
    'CiscoVpnInterfaceFeatureTemplateStaticNatEntryArgs',
    'CiscoVpnInterfaceFeatureTemplateStaticNatEntryArgsDict',
    'CiscoVpnInterfaceFeatureTemplateStaticPortForwardEntryArgs',
    'CiscoVpnInterfaceFeatureTemplateStaticPortForwardEntryArgsDict',
    'CiscoVpnInterfaceFeatureTemplateTunnelInterfaceEncapsulationArgs',
    'CiscoVpnInterfaceFeatureTemplateTunnelInterfaceEncapsulationArgsDict',
    'CiscoVpnInterfaceGreFeatureTemplateAccessListArgs',
    'CiscoVpnInterfaceGreFeatureTemplateAccessListArgsDict',
    'CiscoWirelessLanFeatureTemplateSsidArgs',
    'CiscoWirelessLanFeatureTemplateSsidArgsDict',
    'ColorListPolicyObjectEntryArgs',
    'ColorListPolicyObjectEntryArgsDict',
    'ConfigurationGroupDeviceArgs',
    'ConfigurationGroupDeviceArgsDict',
    'ConfigurationGroupDeviceVariableArgs',
    'ConfigurationGroupDeviceVariableArgsDict',
    'ConfigurationGroupTopologyDeviceArgs',
    'ConfigurationGroupTopologyDeviceArgsDict',
    'ConfigurationGroupTopologyDeviceUnsupportedFeatureArgs',
    'ConfigurationGroupTopologyDeviceUnsupportedFeatureArgsDict',
    'CustomControlTopologyPolicyDefinitionSequenceArgs',
    'CustomControlTopologyPolicyDefinitionSequenceArgsDict',
    'CustomControlTopologyPolicyDefinitionSequenceActionEntryArgs',
    'CustomControlTopologyPolicyDefinitionSequenceActionEntryArgsDict',
    'CustomControlTopologyPolicyDefinitionSequenceActionEntrySetParameterArgs',
    'CustomControlTopologyPolicyDefinitionSequenceActionEntrySetParameterArgsDict',
    'CustomControlTopologyPolicyDefinitionSequenceMatchEntryArgs',
    'CustomControlTopologyPolicyDefinitionSequenceMatchEntryArgsDict',
    'DataFqdnPrefixListPolicyObjectEntryArgs',
    'DataFqdnPrefixListPolicyObjectEntryArgsDict',
    'DataIpv4PrefixListPolicyObjectEntryArgs',
    'DataIpv4PrefixListPolicyObjectEntryArgsDict',
    'DataIpv6PrefixListPolicyObjectEntryArgs',
    'DataIpv6PrefixListPolicyObjectEntryArgsDict',
    'DnsSecurityPolicyDefinitionTargetVpnArgs',
    'DnsSecurityPolicyDefinitionTargetVpnArgsDict',
    'DnsSecurityPolicyTargetVpnArgs',
    'DnsSecurityPolicyTargetVpnArgsDict',
    'DomainListPolicyObjectEntryArgs',
    'DomainListPolicyObjectEntryArgsDict',
    'EigrpFeatureTemplateAddressFamilyArgs',
    'EigrpFeatureTemplateAddressFamilyArgsDict',
    'EigrpFeatureTemplateAddressFamilyNetworkArgs',
    'EigrpFeatureTemplateAddressFamilyNetworkArgsDict',
    'EigrpFeatureTemplateAddressFamilyRedistributeArgs',
    'EigrpFeatureTemplateAddressFamilyRedistributeArgsDict',
    'EigrpFeatureTemplateInterfaceArgs',
    'EigrpFeatureTemplateInterfaceArgsDict',
    'EigrpFeatureTemplateInterfaceSummaryAddressArgs',
    'EigrpFeatureTemplateInterfaceSummaryAddressArgsDict',
    'EigrpFeatureTemplateKeyArgs',
    'EigrpFeatureTemplateKeyArgsDict',
    'ExpandedCommunityListPolicyObjectEntryArgs',
    'ExpandedCommunityListPolicyObjectEntryArgsDict',
    'ExtendedCommunityListPolicyObjectEntryArgs',
    'ExtendedCommunityListPolicyObjectEntryArgsDict',
    'FeatureDeviceTemplateGeneralTemplateArgs',
    'FeatureDeviceTemplateGeneralTemplateArgsDict',
    'FeatureDeviceTemplateGeneralTemplateSubTemplateArgs',
    'FeatureDeviceTemplateGeneralTemplateSubTemplateArgsDict',
    'FeatureDeviceTemplateGeneralTemplateSubTemplateSubTemplateArgs',
    'FeatureDeviceTemplateGeneralTemplateSubTemplateSubTemplateArgsDict',
    'GeoLocationListPolicyObjectEntryArgs',
    'GeoLocationListPolicyObjectEntryArgsDict',
    'HubAndSpokeTopologyPolicyDefinitionTopologyArgs',
    'HubAndSpokeTopologyPolicyDefinitionTopologyArgsDict',
    'HubAndSpokeTopologyPolicyDefinitionTopologySpokeArgs',
    'HubAndSpokeTopologyPolicyDefinitionTopologySpokeArgsDict',
    'HubAndSpokeTopologyPolicyDefinitionTopologySpokeHubArgs',
    'HubAndSpokeTopologyPolicyDefinitionTopologySpokeHubArgsDict',
    'IntrusionPreventionPolicyDefinitionLoggingArgs',
    'IntrusionPreventionPolicyDefinitionLoggingArgsDict',
    'IpsSignatureListPolicyObjectEntryArgs',
    'IpsSignatureListPolicyObjectEntryArgsDict',
    'Ipv4AclPolicyDefinitionSequenceArgs',
    'Ipv4AclPolicyDefinitionSequenceArgsDict',
    'Ipv4AclPolicyDefinitionSequenceActionEntryArgs',
    'Ipv4AclPolicyDefinitionSequenceActionEntryArgsDict',
    'Ipv4AclPolicyDefinitionSequenceActionEntrySetParameterArgs',
    'Ipv4AclPolicyDefinitionSequenceActionEntrySetParameterArgsDict',
    'Ipv4AclPolicyDefinitionSequenceMatchEntryArgs',
    'Ipv4AclPolicyDefinitionSequenceMatchEntryArgsDict',
    'Ipv4DeviceAclPolicyDefinitionSequenceArgs',
    'Ipv4DeviceAclPolicyDefinitionSequenceArgsDict',
    'Ipv4DeviceAclPolicyDefinitionSequenceActionEntryArgs',
    'Ipv4DeviceAclPolicyDefinitionSequenceActionEntryArgsDict',
    'Ipv4DeviceAclPolicyDefinitionSequenceMatchEntryArgs',
    'Ipv4DeviceAclPolicyDefinitionSequenceMatchEntryArgsDict',
    'Ipv4PrefixListPolicyObjectEntryArgs',
    'Ipv4PrefixListPolicyObjectEntryArgsDict',
    'Ipv6AclPolicyDefinitionSequenceArgs',
    'Ipv6AclPolicyDefinitionSequenceArgsDict',
    'Ipv6AclPolicyDefinitionSequenceActionEntryArgs',
    'Ipv6AclPolicyDefinitionSequenceActionEntryArgsDict',
    'Ipv6AclPolicyDefinitionSequenceActionEntrySetParameterArgs',
    'Ipv6AclPolicyDefinitionSequenceActionEntrySetParameterArgsDict',
    'Ipv6AclPolicyDefinitionSequenceMatchEntryArgs',
    'Ipv6AclPolicyDefinitionSequenceMatchEntryArgsDict',
    'Ipv6DeviceAclPolicyDefinitionSequenceArgs',
    'Ipv6DeviceAclPolicyDefinitionSequenceArgsDict',
    'Ipv6DeviceAclPolicyDefinitionSequenceActionEntryArgs',
    'Ipv6DeviceAclPolicyDefinitionSequenceActionEntryArgsDict',
    'Ipv6DeviceAclPolicyDefinitionSequenceMatchEntryArgs',
    'Ipv6DeviceAclPolicyDefinitionSequenceMatchEntryArgsDict',
    'Ipv6PrefixListPolicyObjectEntryArgs',
    'Ipv6PrefixListPolicyObjectEntryArgsDict',
    'LocalApplicationListPolicyObjectEntryArgs',
    'LocalApplicationListPolicyObjectEntryArgsDict',
    'LocalizedPolicyDefinitionArgs',
    'LocalizedPolicyDefinitionArgsDict',
    'MeshTopologyPolicyDefinitionRegionArgs',
    'MeshTopologyPolicyDefinitionRegionArgsDict',
    'OtherThousandeyesFeatureVirtualApplicationArgs',
    'OtherThousandeyesFeatureVirtualApplicationArgsDict',
    'OtherUcseFeatureInterfaceArgs',
    'OtherUcseFeatureInterfaceArgsDict',
    'PolicyGroupDeviceArgs',
    'PolicyGroupDeviceArgsDict',
    'PolicyGroupDeviceVariableArgs',
    'PolicyGroupDeviceVariableArgsDict',
    'PolicyObjectAppProbeClassEntryArgs',
    'PolicyObjectAppProbeClassEntryArgsDict',
    'PolicyObjectAppProbeClassEntryMapArgs',
    'PolicyObjectAppProbeClassEntryMapArgsDict',
    'PolicyObjectApplicationListEntryArgs',
    'PolicyObjectApplicationListEntryArgsDict',
    'PolicyObjectAsPathListEntryArgs',
    'PolicyObjectAsPathListEntryArgsDict',
    'PolicyObjectClassMapEntryArgs',
    'PolicyObjectClassMapEntryArgsDict',
    'PolicyObjectColorListEntryArgs',
    'PolicyObjectColorListEntryArgsDict',
    'PolicyObjectDataIpv4PrefixListEntryArgs',
    'PolicyObjectDataIpv4PrefixListEntryArgsDict',
    'PolicyObjectDataIpv6PrefixListEntryArgs',
    'PolicyObjectDataIpv6PrefixListEntryArgsDict',
    'PolicyObjectExtendedCommunityListEntryArgs',
    'PolicyObjectExtendedCommunityListEntryArgsDict',
    'PolicyObjectIpv4PrefixListEntryArgs',
    'PolicyObjectIpv4PrefixListEntryArgsDict',
    'PolicyObjectIpv6PrefixListEntryArgs',
    'PolicyObjectIpv6PrefixListEntryArgsDict',
    'PolicyObjectMirrorEntryArgs',
    'PolicyObjectMirrorEntryArgsDict',
    'PolicyObjectPolicerEntryArgs',
    'PolicyObjectPolicerEntryArgsDict',
    'PolicyObjectPreferredColorGroupEntryArgs',
    'PolicyObjectPreferredColorGroupEntryArgsDict',
    'PolicyObjectSecurityDataIpv4PrefixListEntryArgs',
    'PolicyObjectSecurityDataIpv4PrefixListEntryArgsDict',
    'PolicyObjectSecurityFqdnListEntryArgs',
    'PolicyObjectSecurityFqdnListEntryArgsDict',
    'PolicyObjectSecurityGeolocationListEntryArgs',
    'PolicyObjectSecurityGeolocationListEntryArgsDict',
    'PolicyObjectSecurityIdentityListEntryArgs',
    'PolicyObjectSecurityIdentityListEntryArgsDict',
    'PolicyObjectSecurityIpsSignatureEntryArgs',
    'PolicyObjectSecurityIpsSignatureEntryArgsDict',
    'PolicyObjectSecurityLocalApplicationListEntryArgs',
    'PolicyObjectSecurityLocalApplicationListEntryArgsDict',
    'PolicyObjectSecurityLocalDomainListEntryArgs',
    'PolicyObjectSecurityLocalDomainListEntryArgsDict',
    'PolicyObjectSecurityPortListEntryArgs',
    'PolicyObjectSecurityPortListEntryArgsDict',
    'PolicyObjectSecurityScalableGroupTagListEntryArgs',
    'PolicyObjectSecurityScalableGroupTagListEntryArgsDict',
    'PolicyObjectSecurityUrlAllowListEntryArgs',
    'PolicyObjectSecurityUrlAllowListEntryArgsDict',
    'PolicyObjectSecurityUrlBlockListEntryArgs',
    'PolicyObjectSecurityUrlBlockListEntryArgsDict',
    'PolicyObjectSlaClassListEntryArgs',
    'PolicyObjectSlaClassListEntryArgsDict',
    'PolicyObjectStandardCommunityListEntryArgs',
    'PolicyObjectStandardCommunityListEntryArgsDict',
    'PolicyObjectTlocListEntryArgs',
    'PolicyObjectTlocListEntryArgsDict',
    'PolicyObjectVpnGroupEntryArgs',
    'PolicyObjectVpnGroupEntryArgsDict',
    'PortListPolicyObjectEntryArgs',
    'PortListPolicyObjectEntryArgsDict',
    'ProtocolListPolicyObjectEntryArgs',
    'ProtocolListPolicyObjectEntryArgsDict',
    'QosMapPolicyDefinitionQosSchedulerArgs',
    'QosMapPolicyDefinitionQosSchedulerArgsDict',
    'RegionListPolicyObjectEntryArgs',
    'RegionListPolicyObjectEntryArgsDict',
    'RewriteRulePolicyDefinitionRuleArgs',
    'RewriteRulePolicyDefinitionRuleArgsDict',
    'RoutePolicyDefinitionSequenceArgs',
    'RoutePolicyDefinitionSequenceArgsDict',
    'RoutePolicyDefinitionSequenceActionEntryArgs',
    'RoutePolicyDefinitionSequenceActionEntryArgsDict',
    'RoutePolicyDefinitionSequenceMatchEntryArgs',
    'RoutePolicyDefinitionSequenceMatchEntryArgsDict',
    'RuleSetPolicyDefinitionRuleArgs',
    'RuleSetPolicyDefinitionRuleArgsDict',
    'SecurityAppHostingFeatureTemplateVirtualApplicationArgs',
    'SecurityAppHostingFeatureTemplateVirtualApplicationArgsDict',
    'SecurityPolicyDefinitionArgs',
    'SecurityPolicyDefinitionArgsDict',
    'SecurityPolicyDefinitionEntryArgs',
    'SecurityPolicyDefinitionEntryArgsDict',
    'SecurityPolicyLoggingArgs',
    'SecurityPolicyLoggingArgsDict',
    'ServiceDhcpServerFeatureOptionCodeArgs',
    'ServiceDhcpServerFeatureOptionCodeArgsDict',
    'ServiceDhcpServerFeatureStaticLeaseArgs',
    'ServiceDhcpServerFeatureStaticLeaseArgsDict',
    'ServiceIpv4AclFeatureSequenceArgs',
    'ServiceIpv4AclFeatureSequenceArgsDict',
    'ServiceIpv4AclFeatureSequenceActionArgs',
    'ServiceIpv4AclFeatureSequenceActionArgsDict',
    'ServiceIpv4AclFeatureSequenceMatchEntryArgs',
    'ServiceIpv4AclFeatureSequenceMatchEntryArgsDict',
    'ServiceIpv4AclFeatureSequenceMatchEntryDestinationPortArgs',
    'ServiceIpv4AclFeatureSequenceMatchEntryDestinationPortArgsDict',
    'ServiceIpv4AclFeatureSequenceMatchEntrySourcePortArgs',
    'ServiceIpv4AclFeatureSequenceMatchEntrySourcePortArgsDict',
    'ServiceIpv6AclFeatureSequenceArgs',
    'ServiceIpv6AclFeatureSequenceArgsDict',
    'ServiceIpv6AclFeatureSequenceActionArgs',
    'ServiceIpv6AclFeatureSequenceActionArgsDict',
    'ServiceIpv6AclFeatureSequenceMatchEntryArgs',
    'ServiceIpv6AclFeatureSequenceMatchEntryArgsDict',
    'ServiceIpv6AclFeatureSequenceMatchEntryDestinationPortArgs',
    'ServiceIpv6AclFeatureSequenceMatchEntryDestinationPortArgsDict',
    'ServiceIpv6AclFeatureSequenceMatchEntrySourcePortArgs',
    'ServiceIpv6AclFeatureSequenceMatchEntrySourcePortArgsDict',
    'ServiceLanVpnFeatureAdvertiseOmpIpv4Args',
    'ServiceLanVpnFeatureAdvertiseOmpIpv4ArgsDict',
    'ServiceLanVpnFeatureAdvertiseOmpIpv4PrefixArgs',
    'ServiceLanVpnFeatureAdvertiseOmpIpv4PrefixArgsDict',
    'ServiceLanVpnFeatureAdvertiseOmpIpv6Args',
    'ServiceLanVpnFeatureAdvertiseOmpIpv6ArgsDict',
    'ServiceLanVpnFeatureAdvertiseOmpIpv6PrefixArgs',
    'ServiceLanVpnFeatureAdvertiseOmpIpv6PrefixArgsDict',
    'ServiceLanVpnFeatureGreRouteArgs',
    'ServiceLanVpnFeatureGreRouteArgsDict',
    'ServiceLanVpnFeatureHostMappingArgs',
    'ServiceLanVpnFeatureHostMappingArgsDict',
    'ServiceLanVpnFeatureIpsecRouteArgs',
    'ServiceLanVpnFeatureIpsecRouteArgsDict',
    'ServiceLanVpnFeatureIpv4ExportRouteTargetArgs',
    'ServiceLanVpnFeatureIpv4ExportRouteTargetArgsDict',
    'ServiceLanVpnFeatureIpv4ImportRouteTargetArgs',
    'ServiceLanVpnFeatureIpv4ImportRouteTargetArgsDict',
    'ServiceLanVpnFeatureIpv4StaticRouteArgs',
    'ServiceLanVpnFeatureIpv4StaticRouteArgsDict',
    'ServiceLanVpnFeatureIpv4StaticRouteNextHopArgs',
    'ServiceLanVpnFeatureIpv4StaticRouteNextHopArgsDict',
    'ServiceLanVpnFeatureIpv4StaticRouteNextHopWithTrackerArgs',
    'ServiceLanVpnFeatureIpv4StaticRouteNextHopWithTrackerArgsDict',
    'ServiceLanVpnFeatureIpv6ExportRouteTargetArgs',
    'ServiceLanVpnFeatureIpv6ExportRouteTargetArgsDict',
    'ServiceLanVpnFeatureIpv6ImportRouteTargetArgs',
    'ServiceLanVpnFeatureIpv6ImportRouteTargetArgsDict',
    'ServiceLanVpnFeatureIpv6StaticRouteArgs',
    'ServiceLanVpnFeatureIpv6StaticRouteArgsDict',
    'ServiceLanVpnFeatureIpv6StaticRouteNextHopArgs',
    'ServiceLanVpnFeatureIpv6StaticRouteNextHopArgsDict',
    'ServiceLanVpnFeatureNat64V4PoolArgs',
    'ServiceLanVpnFeatureNat64V4PoolArgsDict',
    'ServiceLanVpnFeatureNatPoolArgs',
    'ServiceLanVpnFeatureNatPoolArgsDict',
    'ServiceLanVpnFeatureNatPortForwardArgs',
    'ServiceLanVpnFeatureNatPortForwardArgsDict',
    'ServiceLanVpnFeatureRouteLeakFromGlobalVpnArgs',
    'ServiceLanVpnFeatureRouteLeakFromGlobalVpnArgsDict',
    'ServiceLanVpnFeatureRouteLeakFromGlobalVpnRedistributionArgs',
    'ServiceLanVpnFeatureRouteLeakFromGlobalVpnRedistributionArgsDict',
    'ServiceLanVpnFeatureRouteLeakFromOtherServiceArgs',
    'ServiceLanVpnFeatureRouteLeakFromOtherServiceArgsDict',
    'ServiceLanVpnFeatureRouteLeakFromOtherServiceRedistributionArgs',
    'ServiceLanVpnFeatureRouteLeakFromOtherServiceRedistributionArgsDict',
    'ServiceLanVpnFeatureRouteLeakToGlobalVpnArgs',
    'ServiceLanVpnFeatureRouteLeakToGlobalVpnArgsDict',
    'ServiceLanVpnFeatureRouteLeakToGlobalVpnRedistributionArgs',
    'ServiceLanVpnFeatureRouteLeakToGlobalVpnRedistributionArgsDict',
    'ServiceLanVpnFeatureServiceArgs',
    'ServiceLanVpnFeatureServiceArgsDict',
    'ServiceLanVpnFeatureServiceRouteArgs',
    'ServiceLanVpnFeatureServiceRouteArgsDict',
    'ServiceLanVpnFeatureStaticNatArgs',
    'ServiceLanVpnFeatureStaticNatArgsDict',
    'ServiceLanVpnInterfaceEthernetFeatureArpArgs',
    'ServiceLanVpnInterfaceEthernetFeatureArpArgsDict',
    'ServiceLanVpnInterfaceEthernetFeatureIpv4SecondaryAddressArgs',
    'ServiceLanVpnInterfaceEthernetFeatureIpv4SecondaryAddressArgsDict',
    'ServiceLanVpnInterfaceEthernetFeatureIpv4VrrpArgs',
    'ServiceLanVpnInterfaceEthernetFeatureIpv4VrrpArgsDict',
    'ServiceLanVpnInterfaceEthernetFeatureIpv4VrrpSecondaryAddressArgs',
    'ServiceLanVpnInterfaceEthernetFeatureIpv4VrrpSecondaryAddressArgsDict',
    'ServiceLanVpnInterfaceEthernetFeatureIpv4VrrpTrackingObjectArgs',
    'ServiceLanVpnInterfaceEthernetFeatureIpv4VrrpTrackingObjectArgsDict',
    'ServiceLanVpnInterfaceEthernetFeatureIpv6DhcpHelperArgs',
    'ServiceLanVpnInterfaceEthernetFeatureIpv6DhcpHelperArgsDict',
    'ServiceLanVpnInterfaceEthernetFeatureIpv6DhcpSecondaryAddressArgs',
    'ServiceLanVpnInterfaceEthernetFeatureIpv6DhcpSecondaryAddressArgsDict',
    'ServiceLanVpnInterfaceEthernetFeatureIpv6SecondaryAddressArgs',
    'ServiceLanVpnInterfaceEthernetFeatureIpv6SecondaryAddressArgsDict',
    'ServiceLanVpnInterfaceEthernetFeatureIpv6VrrpArgs',
    'ServiceLanVpnInterfaceEthernetFeatureIpv6VrrpArgsDict',
    'ServiceLanVpnInterfaceEthernetFeatureIpv6VrrpIpv6AddressArgs',
    'ServiceLanVpnInterfaceEthernetFeatureIpv6VrrpIpv6AddressArgsDict',
    'ServiceLanVpnInterfaceEthernetFeatureStaticNatArgs',
    'ServiceLanVpnInterfaceEthernetFeatureStaticNatArgsDict',
    'ServiceLanVpnInterfaceSviFeatureArpArgs',
    'ServiceLanVpnInterfaceSviFeatureArpArgsDict',
    'ServiceLanVpnInterfaceSviFeatureIpv4SecondaryAddressArgs',
    'ServiceLanVpnInterfaceSviFeatureIpv4SecondaryAddressArgsDict',
    'ServiceLanVpnInterfaceSviFeatureIpv4VrrpArgs',
    'ServiceLanVpnInterfaceSviFeatureIpv4VrrpArgsDict',
    'ServiceLanVpnInterfaceSviFeatureIpv4VrrpSecondaryAddressArgs',
    'ServiceLanVpnInterfaceSviFeatureIpv4VrrpSecondaryAddressArgsDict',
    'ServiceLanVpnInterfaceSviFeatureIpv4VrrpTrackingObjectArgs',
    'ServiceLanVpnInterfaceSviFeatureIpv4VrrpTrackingObjectArgsDict',
    'ServiceLanVpnInterfaceSviFeatureIpv6DhcpHelperArgs',
    'ServiceLanVpnInterfaceSviFeatureIpv6DhcpHelperArgsDict',
    'ServiceLanVpnInterfaceSviFeatureIpv6SecondaryAddressArgs',
    'ServiceLanVpnInterfaceSviFeatureIpv6SecondaryAddressArgsDict',
    'ServiceLanVpnInterfaceSviFeatureIpv6VrrpArgs',
    'ServiceLanVpnInterfaceSviFeatureIpv6VrrpArgsDict',
    'ServiceLanVpnInterfaceSviFeatureIpv6VrrpAddressArgs',
    'ServiceLanVpnInterfaceSviFeatureIpv6VrrpAddressArgsDict',
    'ServiceLanVpnInterfaceSviFeatureIpv6VrrpSecondaryAddressArgs',
    'ServiceLanVpnInterfaceSviFeatureIpv6VrrpSecondaryAddressArgsDict',
    'ServiceMulticastFeatureAutoRpAnnounceArgs',
    'ServiceMulticastFeatureAutoRpAnnounceArgsDict',
    'ServiceMulticastFeatureAutoRpDiscoveryArgs',
    'ServiceMulticastFeatureAutoRpDiscoveryArgsDict',
    'ServiceMulticastFeatureIgmpInterfaceArgs',
    'ServiceMulticastFeatureIgmpInterfaceArgsDict',
    'ServiceMulticastFeatureIgmpInterfaceJoinGroupArgs',
    'ServiceMulticastFeatureIgmpInterfaceJoinGroupArgsDict',
    'ServiceMulticastFeatureMsdpGroupArgs',
    'ServiceMulticastFeatureMsdpGroupArgsDict',
    'ServiceMulticastFeatureMsdpGroupPeerArgs',
    'ServiceMulticastFeatureMsdpGroupPeerArgsDict',
    'ServiceMulticastFeaturePimBsrCandidateArgs',
    'ServiceMulticastFeaturePimBsrCandidateArgsDict',
    'ServiceMulticastFeaturePimBsrRpCandidateArgs',
    'ServiceMulticastFeaturePimBsrRpCandidateArgsDict',
    'ServiceMulticastFeaturePimInterfaceArgs',
    'ServiceMulticastFeaturePimInterfaceArgsDict',
    'ServiceMulticastFeatureStaticRpAddressArgs',
    'ServiceMulticastFeatureStaticRpAddressArgsDict',
    'ServiceObjectTrackerGroupFeatureTrackerElementArgs',
    'ServiceObjectTrackerGroupFeatureTrackerElementArgsDict',
    'ServiceRoutePolicyFeatureSequenceArgs',
    'ServiceRoutePolicyFeatureSequenceArgsDict',
    'ServiceRoutePolicyFeatureSequenceActionArgs',
    'ServiceRoutePolicyFeatureSequenceActionArgsDict',
    'ServiceRoutePolicyFeatureSequenceMatchEntryArgs',
    'ServiceRoutePolicyFeatureSequenceMatchEntryArgsDict',
    'ServiceRoutePolicyFeatureSequenceMatchEntryStandardCommunityListArgs',
    'ServiceRoutePolicyFeatureSequenceMatchEntryStandardCommunityListArgsDict',
    'ServiceRoutingBgpFeatureIpv4AggregateAddressArgs',
    'ServiceRoutingBgpFeatureIpv4AggregateAddressArgsDict',
    'ServiceRoutingBgpFeatureIpv4NeighborArgs',
    'ServiceRoutingBgpFeatureIpv4NeighborArgsDict',
    'ServiceRoutingBgpFeatureIpv4NeighborAddressFamilyArgs',
    'ServiceRoutingBgpFeatureIpv4NeighborAddressFamilyArgsDict',
    'ServiceRoutingBgpFeatureIpv4NetworkArgs',
    'ServiceRoutingBgpFeatureIpv4NetworkArgsDict',
    'ServiceRoutingBgpFeatureIpv4RedistributeArgs',
    'ServiceRoutingBgpFeatureIpv4RedistributeArgsDict',
    'ServiceRoutingBgpFeatureIpv6AggregateAddressArgs',
    'ServiceRoutingBgpFeatureIpv6AggregateAddressArgsDict',
    'ServiceRoutingBgpFeatureIpv6NeighborArgs',
    'ServiceRoutingBgpFeatureIpv6NeighborArgsDict',
    'ServiceRoutingBgpFeatureIpv6NeighborAddressFamilyArgs',
    'ServiceRoutingBgpFeatureIpv6NeighborAddressFamilyArgsDict',
    'ServiceRoutingBgpFeatureIpv6NetworkArgs',
    'ServiceRoutingBgpFeatureIpv6NetworkArgsDict',
    'ServiceRoutingBgpFeatureIpv6RedistributeArgs',
    'ServiceRoutingBgpFeatureIpv6RedistributeArgsDict',
    'ServiceRoutingEigrpFeatureInterfaceArgs',
    'ServiceRoutingEigrpFeatureInterfaceArgsDict',
    'ServiceRoutingEigrpFeatureInterfaceSummaryAddressArgs',
    'ServiceRoutingEigrpFeatureInterfaceSummaryAddressArgsDict',
    'ServiceRoutingEigrpFeatureMd5KeyArgs',
    'ServiceRoutingEigrpFeatureMd5KeyArgsDict',
    'ServiceRoutingEigrpFeatureNetworkArgs',
    'ServiceRoutingEigrpFeatureNetworkArgsDict',
    'ServiceRoutingEigrpFeatureRedistributeArgs',
    'ServiceRoutingEigrpFeatureRedistributeArgsDict',
    'ServiceRoutingOspfFeatureAreaArgs',
    'ServiceRoutingOspfFeatureAreaArgsDict',
    'ServiceRoutingOspfFeatureAreaInterfaceArgs',
    'ServiceRoutingOspfFeatureAreaInterfaceArgsDict',
    'ServiceRoutingOspfFeatureAreaRangeArgs',
    'ServiceRoutingOspfFeatureAreaRangeArgsDict',
    'ServiceRoutingOspfFeatureRedistributeArgs',
    'ServiceRoutingOspfFeatureRedistributeArgsDict',
    'ServiceRoutingOspfFeatureRouterLsaArgs',
    'ServiceRoutingOspfFeatureRouterLsaArgsDict',
    'ServiceRoutingOspfv3Ipv4FeatureAreaArgs',
    'ServiceRoutingOspfv3Ipv4FeatureAreaArgsDict',
    'ServiceRoutingOspfv3Ipv4FeatureAreaInterfaceArgs',
    'ServiceRoutingOspfv3Ipv4FeatureAreaInterfaceArgsDict',
    'ServiceRoutingOspfv3Ipv4FeatureAreaRangeArgs',
    'ServiceRoutingOspfv3Ipv4FeatureAreaRangeArgsDict',
    'ServiceRoutingOspfv3Ipv4FeatureRedistributeArgs',
    'ServiceRoutingOspfv3Ipv4FeatureRedistributeArgsDict',
    'ServiceRoutingOspfv3Ipv6FeatureAreaArgs',
    'ServiceRoutingOspfv3Ipv6FeatureAreaArgsDict',
    'ServiceRoutingOspfv3Ipv6FeatureAreaInterfaceArgs',
    'ServiceRoutingOspfv3Ipv6FeatureAreaInterfaceArgsDict',
    'ServiceRoutingOspfv3Ipv6FeatureAreaRangeArgs',
    'ServiceRoutingOspfv3Ipv6FeatureAreaRangeArgsDict',
    'ServiceRoutingOspfv3Ipv6FeatureRedistributeArgs',
    'ServiceRoutingOspfv3Ipv6FeatureRedistributeArgsDict',
    'ServiceSwitchportFeatureInterfaceArgs',
    'ServiceSwitchportFeatureInterfaceArgsDict',
    'ServiceSwitchportFeatureStaticMacAddressArgs',
    'ServiceSwitchportFeatureStaticMacAddressArgsDict',
    'ServiceTrackerGroupFeatureTrackerElementArgs',
    'ServiceTrackerGroupFeatureTrackerElementArgsDict',
    'ServiceWirelessLanFeatureSsidArgs',
    'ServiceWirelessLanFeatureSsidArgsDict',
    'SiteListPolicyObjectEntryArgs',
    'SiteListPolicyObjectEntryArgsDict',
    'StandardCommunityListPolicyObjectEntryArgs',
    'StandardCommunityListPolicyObjectEntryArgsDict',
    'SwitchportFeatureTemplateInterfaceArgs',
    'SwitchportFeatureTemplateInterfaceArgsDict',
    'SwitchportFeatureTemplateStaticMacAddressArgs',
    'SwitchportFeatureTemplateStaticMacAddressArgsDict',
    'SystemAaaFeatureAccountingRuleArgs',
    'SystemAaaFeatureAccountingRuleArgsDict',
    'SystemAaaFeatureAuthorizationRuleArgs',
    'SystemAaaFeatureAuthorizationRuleArgsDict',
    'SystemAaaFeatureRadiusGroupArgs',
    'SystemAaaFeatureRadiusGroupArgsDict',
    'SystemAaaFeatureRadiusGroupServerArgs',
    'SystemAaaFeatureRadiusGroupServerArgsDict',
    'SystemAaaFeatureTacacsGroupArgs',
    'SystemAaaFeatureTacacsGroupArgsDict',
    'SystemAaaFeatureTacacsGroupServerArgs',
    'SystemAaaFeatureTacacsGroupServerArgsDict',
    'SystemAaaFeatureUserArgs',
    'SystemAaaFeatureUserArgsDict',
    'SystemAaaFeatureUserPublicKeyArgs',
    'SystemAaaFeatureUserPublicKeyArgsDict',
    'SystemBasicFeatureAffinityPerVrfArgs',
    'SystemBasicFeatureAffinityPerVrfArgsDict',
    'SystemBasicFeatureGpsSmsMobileNumberArgs',
    'SystemBasicFeatureGpsSmsMobileNumberArgsDict',
    'SystemBfdFeatureColorArgs',
    'SystemBfdFeatureColorArgsDict',
    'SystemIpv4DeviceAccessFeatureSequenceArgs',
    'SystemIpv4DeviceAccessFeatureSequenceArgsDict',
    'SystemIpv6DeviceAccessFeatureSequenceArgs',
    'SystemIpv6DeviceAccessFeatureSequenceArgsDict',
    'SystemLoggingFeatureIpv4ServerArgs',
    'SystemLoggingFeatureIpv4ServerArgsDict',
    'SystemLoggingFeatureIpv6ServerArgs',
    'SystemLoggingFeatureIpv6ServerArgsDict',
    'SystemLoggingFeatureTlsProfileArgs',
    'SystemLoggingFeatureTlsProfileArgsDict',
    'SystemNtpFeatureAuthenticationKeyArgs',
    'SystemNtpFeatureAuthenticationKeyArgsDict',
    'SystemNtpFeatureServerArgs',
    'SystemNtpFeatureServerArgsDict',
    'SystemSecurityFeatureKeyArgs',
    'SystemSecurityFeatureKeyArgsDict',
    'SystemSecurityFeatureKeychainArgs',
    'SystemSecurityFeatureKeychainArgsDict',
    'SystemSnmpFeatureCommunityArgs',
    'SystemSnmpFeatureCommunityArgsDict',
    'SystemSnmpFeatureGroupArgs',
    'SystemSnmpFeatureGroupArgsDict',
    'SystemSnmpFeatureTrapTargetServerArgs',
    'SystemSnmpFeatureTrapTargetServerArgsDict',
    'SystemSnmpFeatureUserArgs',
    'SystemSnmpFeatureUserArgsDict',
    'SystemSnmpFeatureViewArgs',
    'SystemSnmpFeatureViewArgsDict',
    'SystemSnmpFeatureViewOidArgs',
    'SystemSnmpFeatureViewOidArgsDict',
    'TlocListPolicyObjectEntryArgs',
    'TlocListPolicyObjectEntryArgsDict',
    'TlsSslDecryptionPolicyDefinitionNetworkRuleArgs',
    'TlsSslDecryptionPolicyDefinitionNetworkRuleArgsDict',
    'TlsSslDecryptionPolicyDefinitionNetworkRuleSourceAndDestinationConfigurationArgs',
    'TlsSslDecryptionPolicyDefinitionNetworkRuleSourceAndDestinationConfigurationArgsDict',
    'TlsSslDecryptionPolicyDefinitionUrlRuleArgs',
    'TlsSslDecryptionPolicyDefinitionUrlRuleArgsDict',
    'TrafficDataPolicyDefinitionSequenceArgs',
    'TrafficDataPolicyDefinitionSequenceArgsDict',
    'TrafficDataPolicyDefinitionSequenceActionEntryArgs',
    'TrafficDataPolicyDefinitionSequenceActionEntryArgsDict',
    'TrafficDataPolicyDefinitionSequenceActionEntryNatParameterArgs',
    'TrafficDataPolicyDefinitionSequenceActionEntryNatParameterArgsDict',
    'TrafficDataPolicyDefinitionSequenceActionEntrySetParameterArgs',
    'TrafficDataPolicyDefinitionSequenceActionEntrySetParameterArgsDict',
    'TrafficDataPolicyDefinitionSequenceMatchEntryArgs',
    'TrafficDataPolicyDefinitionSequenceMatchEntryArgsDict',
    'TransportIpv4AclFeatureSequenceArgs',
    'TransportIpv4AclFeatureSequenceArgsDict',
    'TransportIpv4AclFeatureSequenceActionArgs',
    'TransportIpv4AclFeatureSequenceActionArgsDict',
    'TransportIpv4AclFeatureSequenceMatchEntryArgs',
    'TransportIpv4AclFeatureSequenceMatchEntryArgsDict',
    'TransportIpv4AclFeatureSequenceMatchEntryDestinationPortArgs',
    'TransportIpv4AclFeatureSequenceMatchEntryDestinationPortArgsDict',
    'TransportIpv4AclFeatureSequenceMatchEntrySourcePortArgs',
    'TransportIpv4AclFeatureSequenceMatchEntrySourcePortArgsDict',
    'TransportIpv6AclFeatureSequenceArgs',
    'TransportIpv6AclFeatureSequenceArgsDict',
    'TransportIpv6AclFeatureSequenceActionArgs',
    'TransportIpv6AclFeatureSequenceActionArgsDict',
    'TransportIpv6AclFeatureSequenceMatchEntryArgs',
    'TransportIpv6AclFeatureSequenceMatchEntryArgsDict',
    'TransportIpv6AclFeatureSequenceMatchEntryDestinationPortArgs',
    'TransportIpv6AclFeatureSequenceMatchEntryDestinationPortArgsDict',
    'TransportIpv6AclFeatureSequenceMatchEntrySourcePortArgs',
    'TransportIpv6AclFeatureSequenceMatchEntrySourcePortArgsDict',
    'TransportIpv6TrackerGroupFeatureTrackerElementArgs',
    'TransportIpv6TrackerGroupFeatureTrackerElementArgsDict',
    'TransportManagementVpnFeatureIpv4StaticRouteArgs',
    'TransportManagementVpnFeatureIpv4StaticRouteArgsDict',
    'TransportManagementVpnFeatureIpv4StaticRouteNextHopArgs',
    'TransportManagementVpnFeatureIpv4StaticRouteNextHopArgsDict',
    'TransportManagementVpnFeatureIpv6StaticRouteArgs',
    'TransportManagementVpnFeatureIpv6StaticRouteArgsDict',
    'TransportManagementVpnFeatureIpv6StaticRouteNextHopArgs',
    'TransportManagementVpnFeatureIpv6StaticRouteNextHopArgsDict',
    'TransportManagementVpnFeatureNewHostMappingArgs',
    'TransportManagementVpnFeatureNewHostMappingArgsDict',
    'TransportManagementVpnInterfaceEthernetFeatureArpEntryArgs',
    'TransportManagementVpnInterfaceEthernetFeatureArpEntryArgsDict',
    'TransportManagementVpnInterfaceEthernetFeatureIpv4SecondaryAddressArgs',
    'TransportManagementVpnInterfaceEthernetFeatureIpv4SecondaryAddressArgsDict',
    'TransportRoutePolicyFeatureSequenceArgs',
    'TransportRoutePolicyFeatureSequenceArgsDict',
    'TransportRoutePolicyFeatureSequenceActionArgs',
    'TransportRoutePolicyFeatureSequenceActionArgsDict',
    'TransportRoutePolicyFeatureSequenceMatchEntryArgs',
    'TransportRoutePolicyFeatureSequenceMatchEntryArgsDict',
    'TransportRoutePolicyFeatureSequenceMatchEntryStandardCommunityListArgs',
    'TransportRoutePolicyFeatureSequenceMatchEntryStandardCommunityListArgsDict',
    'TransportRoutingBgpFeatureIpv4AggregateAddressArgs',
    'TransportRoutingBgpFeatureIpv4AggregateAddressArgsDict',
    'TransportRoutingBgpFeatureIpv4NeighborArgs',
    'TransportRoutingBgpFeatureIpv4NeighborArgsDict',
    'TransportRoutingBgpFeatureIpv4NeighborAddressFamilyArgs',
    'TransportRoutingBgpFeatureIpv4NeighborAddressFamilyArgsDict',
    'TransportRoutingBgpFeatureIpv4NetworkArgs',
    'TransportRoutingBgpFeatureIpv4NetworkArgsDict',
    'TransportRoutingBgpFeatureIpv4RedistributeArgs',
    'TransportRoutingBgpFeatureIpv4RedistributeArgsDict',
    'TransportRoutingBgpFeatureIpv6AggregateAddressArgs',
    'TransportRoutingBgpFeatureIpv6AggregateAddressArgsDict',
    'TransportRoutingBgpFeatureIpv6NeighborArgs',
    'TransportRoutingBgpFeatureIpv6NeighborArgsDict',
    'TransportRoutingBgpFeatureIpv6NeighborAddressFamilyArgs',
    'TransportRoutingBgpFeatureIpv6NeighborAddressFamilyArgsDict',
    'TransportRoutingBgpFeatureIpv6NetworkArgs',
    'TransportRoutingBgpFeatureIpv6NetworkArgsDict',
    'TransportRoutingBgpFeatureIpv6RedistributeArgs',
    'TransportRoutingBgpFeatureIpv6RedistributeArgsDict',
    'TransportRoutingBgpFeatureMplsInterfaceArgs',
    'TransportRoutingBgpFeatureMplsInterfaceArgsDict',
    'TransportRoutingOspfFeatureAreaArgs',
    'TransportRoutingOspfFeatureAreaArgsDict',
    'TransportRoutingOspfFeatureAreaInterfaceArgs',
    'TransportRoutingOspfFeatureAreaInterfaceArgsDict',
    'TransportRoutingOspfFeatureAreaRangeArgs',
    'TransportRoutingOspfFeatureAreaRangeArgsDict',
    'TransportRoutingOspfFeatureRedistributeArgs',
    'TransportRoutingOspfFeatureRedistributeArgsDict',
    'TransportRoutingOspfFeatureRouterLsaArgs',
    'TransportRoutingOspfFeatureRouterLsaArgsDict',
    'TransportRoutingOspfv3Ipv4FeatureAreaArgs',
    'TransportRoutingOspfv3Ipv4FeatureAreaArgsDict',
    'TransportRoutingOspfv3Ipv4FeatureAreaInterfaceArgs',
    'TransportRoutingOspfv3Ipv4FeatureAreaInterfaceArgsDict',
    'TransportRoutingOspfv3Ipv4FeatureAreaRangeArgs',
    'TransportRoutingOspfv3Ipv4FeatureAreaRangeArgsDict',
    'TransportRoutingOspfv3Ipv4FeatureRedistributeArgs',
    'TransportRoutingOspfv3Ipv4FeatureRedistributeArgsDict',
    'TransportRoutingOspfv3Ipv6FeatureAreaArgs',
    'TransportRoutingOspfv3Ipv6FeatureAreaArgsDict',
    'TransportRoutingOspfv3Ipv6FeatureAreaInterfaceArgs',
    'TransportRoutingOspfv3Ipv6FeatureAreaInterfaceArgsDict',
    'TransportRoutingOspfv3Ipv6FeatureAreaRangeArgs',
    'TransportRoutingOspfv3Ipv6FeatureAreaRangeArgsDict',
    'TransportRoutingOspfv3Ipv6FeatureRedistributeArgs',
    'TransportRoutingOspfv3Ipv6FeatureRedistributeArgsDict',
    'TransportT1E1ControllerFeatureEntryArgs',
    'TransportT1E1ControllerFeatureEntryArgsDict',
    'TransportT1E1ControllerFeatureEntryChannelGroupArgs',
    'TransportT1E1ControllerFeatureEntryChannelGroupArgsDict',
    'TransportTrackerGroupFeatureTrackerElementArgs',
    'TransportTrackerGroupFeatureTrackerElementArgsDict',
    'TransportWanVpnFeatureIpv4StaticRouteArgs',
    'TransportWanVpnFeatureIpv4StaticRouteArgsDict',
    'TransportWanVpnFeatureIpv4StaticRouteNextHopArgs',
    'TransportWanVpnFeatureIpv4StaticRouteNextHopArgsDict',
    'TransportWanVpnFeatureIpv6StaticRouteArgs',
    'TransportWanVpnFeatureIpv6StaticRouteArgsDict',
    'TransportWanVpnFeatureIpv6StaticRouteNextHopArgs',
    'TransportWanVpnFeatureIpv6StaticRouteNextHopArgsDict',
    'TransportWanVpnFeatureNat64V4PoolArgs',
    'TransportWanVpnFeatureNat64V4PoolArgsDict',
    'TransportWanVpnFeatureNewHostMappingArgs',
    'TransportWanVpnFeatureNewHostMappingArgsDict',
    'TransportWanVpnFeatureServiceArgs',
    'TransportWanVpnFeatureServiceArgsDict',
    'TransportWanVpnInterfaceCellularFeatureArpArgs',
    'TransportWanVpnInterfaceCellularFeatureArpArgsDict',
    'TransportWanVpnInterfaceCellularFeatureTunnelInterfaceEncapsulationArgs',
    'TransportWanVpnInterfaceCellularFeatureTunnelInterfaceEncapsulationArgsDict',
    'TransportWanVpnInterfaceEthernetFeatureArpArgs',
    'TransportWanVpnInterfaceEthernetFeatureArpArgsDict',
    'TransportWanVpnInterfaceEthernetFeatureIpv4SecondaryAddressArgs',
    'TransportWanVpnInterfaceEthernetFeatureIpv4SecondaryAddressArgsDict',
    'TransportWanVpnInterfaceEthernetFeatureIpv6DhcpSecondaryAddressArgs',
    'TransportWanVpnInterfaceEthernetFeatureIpv6DhcpSecondaryAddressArgsDict',
    'TransportWanVpnInterfaceEthernetFeatureIpv6SecondaryAddressArgs',
    'TransportWanVpnInterfaceEthernetFeatureIpv6SecondaryAddressArgsDict',
    'TransportWanVpnInterfaceEthernetFeatureNewStaticNatArgs',
    'TransportWanVpnInterfaceEthernetFeatureNewStaticNatArgsDict',
    'TransportWanVpnInterfaceEthernetFeatureStaticNat66Args',
    'TransportWanVpnInterfaceEthernetFeatureStaticNat66ArgsDict',
    'TransportWanVpnInterfaceEthernetFeatureTunnelInterfaceEncapsulationArgs',
    'TransportWanVpnInterfaceEthernetFeatureTunnelInterfaceEncapsulationArgsDict',
    'TransportWanVpnInterfaceT1E1SerialFeatureTunnelInterfaceEncapsulationArgs',
    'TransportWanVpnInterfaceT1E1SerialFeatureTunnelInterfaceEncapsulationArgsDict',
    'UrlFilteringPolicyDefinitionLoggingArgs',
    'UrlFilteringPolicyDefinitionLoggingArgsDict',
    'VpnInterfaceCellularFeatureTemplateIpv4AccessListArgs',
    'VpnInterfaceCellularFeatureTemplateIpv4AccessListArgsDict',
    'VpnInterfaceCellularFeatureTemplateIpv6AccessListArgs',
    'VpnInterfaceCellularFeatureTemplateIpv6AccessListArgsDict',
    'VpnInterfaceCellularFeatureTemplateNatPortForwardArgs',
    'VpnInterfaceCellularFeatureTemplateNatPortForwardArgsDict',
    'VpnInterfaceCellularFeatureTemplatePolicerArgs',
    'VpnInterfaceCellularFeatureTemplatePolicerArgsDict',
    'VpnInterfaceCellularFeatureTemplateStaticArpArgs',
    'VpnInterfaceCellularFeatureTemplateStaticArpArgsDict',
    'VpnInterfaceCellularFeatureTemplateTunnelInterfaceEncapsulationArgs',
    'VpnInterfaceCellularFeatureTemplateTunnelInterfaceEncapsulationArgsDict',
    'VpnInterfaceDslIpoeFeatureTemplateAccessListArgs',
    'VpnInterfaceDslIpoeFeatureTemplateAccessListArgsDict',
    'VpnInterfaceDslIpoeFeatureTemplateNatPortForwardArgs',
    'VpnInterfaceDslIpoeFeatureTemplateNatPortForwardArgsDict',
    'VpnInterfaceDslIpoeFeatureTemplatePolicerArgs',
    'VpnInterfaceDslIpoeFeatureTemplatePolicerArgsDict',
    'VpnInterfaceDslIpoeFeatureTemplateTunnelInterfaceEncapsulationArgs',
    'VpnInterfaceDslIpoeFeatureTemplateTunnelInterfaceEncapsulationArgsDict',
    'VpnInterfaceDslIpoeFeatureTemplateVdslConfigurationArgs',
    'VpnInterfaceDslIpoeFeatureTemplateVdslConfigurationArgsDict',
    'VpnInterfaceDslPppoaFeatureTemplateAccessListArgs',
    'VpnInterfaceDslPppoaFeatureTemplateAccessListArgsDict',
    'VpnInterfaceDslPppoaFeatureTemplateNatPortForwardArgs',
    'VpnInterfaceDslPppoaFeatureTemplateNatPortForwardArgsDict',
    'VpnInterfaceDslPppoaFeatureTemplatePolicerArgs',
    'VpnInterfaceDslPppoaFeatureTemplatePolicerArgsDict',
    'VpnInterfaceDslPppoaFeatureTemplatePvcArgs',
    'VpnInterfaceDslPppoaFeatureTemplatePvcArgsDict',
    'VpnInterfaceDslPppoaFeatureTemplateTunnelInterfaceEncapsulationArgs',
    'VpnInterfaceDslPppoaFeatureTemplateTunnelInterfaceEncapsulationArgsDict',
    'VpnInterfaceDslPppoaFeatureTemplateVdslConfigurationArgs',
    'VpnInterfaceDslPppoaFeatureTemplateVdslConfigurationArgsDict',
    'VpnInterfaceDslPppoeFeatureTemplateAccessListArgs',
    'VpnInterfaceDslPppoeFeatureTemplateAccessListArgsDict',
    'VpnInterfaceDslPppoeFeatureTemplateNatPortForwardArgs',
    'VpnInterfaceDslPppoeFeatureTemplateNatPortForwardArgsDict',
    'VpnInterfaceDslPppoeFeatureTemplatePolicerArgs',
    'VpnInterfaceDslPppoeFeatureTemplatePolicerArgsDict',
    'VpnInterfaceDslPppoeFeatureTemplateTunnelInterfaceEncapsulationArgs',
    'VpnInterfaceDslPppoeFeatureTemplateTunnelInterfaceEncapsulationArgsDict',
    'VpnInterfaceDslPppoeFeatureTemplateVdslConfigurationArgs',
    'VpnInterfaceDslPppoeFeatureTemplateVdslConfigurationArgsDict',
    'VpnInterfaceEthernetPppoeFeatureTemplateAccessListArgs',
    'VpnInterfaceEthernetPppoeFeatureTemplateAccessListArgsDict',
    'VpnInterfaceEthernetPppoeFeatureTemplateNatPortForwardArgs',
    'VpnInterfaceEthernetPppoeFeatureTemplateNatPortForwardArgsDict',
    'VpnInterfaceEthernetPppoeFeatureTemplatePolicerArgs',
    'VpnInterfaceEthernetPppoeFeatureTemplatePolicerArgsDict',
    'VpnInterfaceEthernetPppoeFeatureTemplateTunnelInterfaceEncapsulationArgs',
    'VpnInterfaceEthernetPppoeFeatureTemplateTunnelInterfaceEncapsulationArgsDict',
    'VpnInterfaceMultilinkFeatureTemplateAccessListArgs',
    'VpnInterfaceMultilinkFeatureTemplateAccessListArgsDict',
    'VpnInterfaceMultilinkFeatureTemplateIpv6AccessListArgs',
    'VpnInterfaceMultilinkFeatureTemplateIpv6AccessListArgsDict',
    'VpnInterfaceMultilinkFeatureTemplateMultilinkInterfaceArgs',
    'VpnInterfaceMultilinkFeatureTemplateMultilinkInterfaceArgsDict',
    'VpnInterfaceMultilinkFeatureTemplateMultilinkInterfaceChannelGroupListArgs',
    'VpnInterfaceMultilinkFeatureTemplateMultilinkInterfaceChannelGroupListArgsDict',
    'VpnInterfaceMultilinkFeatureTemplateNimInterfaceListArgs',
    'VpnInterfaceMultilinkFeatureTemplateNimInterfaceListArgsDict',
    'VpnInterfaceMultilinkFeatureTemplateTunnelInterfaceEncapsulationArgs',
    'VpnInterfaceMultilinkFeatureTemplateTunnelInterfaceEncapsulationArgsDict',
    'VpnInterfaceSviFeatureTemplateIpv4AccessListArgs',
    'VpnInterfaceSviFeatureTemplateIpv4AccessListArgsDict',
    'VpnInterfaceSviFeatureTemplateIpv4SecondaryAddressArgs',
    'VpnInterfaceSviFeatureTemplateIpv4SecondaryAddressArgsDict',
    'VpnInterfaceSviFeatureTemplateIpv4VrrpArgs',
    'VpnInterfaceSviFeatureTemplateIpv4VrrpArgsDict',
    'VpnInterfaceSviFeatureTemplateIpv4VrrpIpv4SecondaryAddressArgs',
    'VpnInterfaceSviFeatureTemplateIpv4VrrpIpv4SecondaryAddressArgsDict',
    'VpnInterfaceSviFeatureTemplateIpv4VrrpTrackingObjectArgs',
    'VpnInterfaceSviFeatureTemplateIpv4VrrpTrackingObjectArgsDict',
    'VpnInterfaceSviFeatureTemplateIpv6AccessListArgs',
    'VpnInterfaceSviFeatureTemplateIpv6AccessListArgsDict',
    'VpnInterfaceSviFeatureTemplateIpv6DhcpHelperArgs',
    'VpnInterfaceSviFeatureTemplateIpv6DhcpHelperArgsDict',
    'VpnInterfaceSviFeatureTemplateIpv6SecondaryAddressArgs',
    'VpnInterfaceSviFeatureTemplateIpv6SecondaryAddressArgsDict',
    'VpnInterfaceSviFeatureTemplateIpv6VrrpArgs',
    'VpnInterfaceSviFeatureTemplateIpv6VrrpArgsDict',
    'VpnInterfaceSviFeatureTemplateIpv6VrrpIpv6AddressArgs',
    'VpnInterfaceSviFeatureTemplateIpv6VrrpIpv6AddressArgsDict',
    'VpnInterfaceSviFeatureTemplateIpv6VrrpIpv6SecondaryAddressArgs',
    'VpnInterfaceSviFeatureTemplateIpv6VrrpIpv6SecondaryAddressArgsDict',
    'VpnInterfaceSviFeatureTemplatePolicerArgs',
    'VpnInterfaceSviFeatureTemplatePolicerArgsDict',
    'VpnInterfaceSviFeatureTemplateStaticArpEntryArgs',
    'VpnInterfaceSviFeatureTemplateStaticArpEntryArgsDict',
    'VpnInterfaceT1E1SerialFeatureTemplateIpv4AccessListArgs',
    'VpnInterfaceT1E1SerialFeatureTemplateIpv4AccessListArgsDict',
    'VpnInterfaceT1E1SerialFeatureTemplateIpv6AccessListArgs',
    'VpnInterfaceT1E1SerialFeatureTemplateIpv6AccessListArgsDict',
    'VpnInterfaceT1E1SerialFeatureTemplateTunnelInterfaceEncapsulationArgs',
    'VpnInterfaceT1E1SerialFeatureTemplateTunnelInterfaceEncapsulationArgsDict',
    'VpnListPolicyObjectEntryArgs',
    'VpnListPolicyObjectEntryArgsDict',
    'VpnMembershipPolicyDefinitionSiteArgs',
    'VpnMembershipPolicyDefinitionSiteArgsDict',
    'ZoneBasedFirewallPolicyDefinitionApplyZonePairArgs',
    'ZoneBasedFirewallPolicyDefinitionApplyZonePairArgsDict',
    'ZoneBasedFirewallPolicyDefinitionRuleArgs',
    'ZoneBasedFirewallPolicyDefinitionRuleArgsDict',
    'ZoneBasedFirewallPolicyDefinitionRuleActionEntryArgs',
    'ZoneBasedFirewallPolicyDefinitionRuleActionEntryArgsDict',
    'ZoneBasedFirewallPolicyDefinitionRuleMatchEntryArgs',
    'ZoneBasedFirewallPolicyDefinitionRuleMatchEntryArgsDict',
    'ZoneListPolicyObjectEntryArgs',
    'ZoneListPolicyObjectEntryArgsDict',
]

MYPY = False

if not MYPY:
    class AllowUrlListPolicyObjectEntryArgsDict(TypedDict):
        url: NotRequired[pulumi.Input[_builtins.str]]
        """
        URL
        """
elif False:
    AllowUrlListPolicyObjectEntryArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class AllowUrlListPolicyObjectEntryArgs:
    def __init__(__self__, *,
                 url: Optional[pulumi.Input[_builtins.str]] = None):
        """
        :param pulumi.Input[_builtins.str] url: URL
        """
        if url is not None:
            pulumi.set(__self__, "url", url)

    @_builtins.property
    @pulumi.getter
    def url(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        URL
        """
        return pulumi.get(self, "url")

    @url.setter
    def url(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "url", value)


if not MYPY:
    class AppProbeClassPolicyObjectMappingArgsDict(TypedDict):
        color: pulumi.Input[_builtins.str]
        """
        Color
          - Choices: `default`, `3g`, `biz-internet`, `blue`, `bronze`, `custom1`, `custom2`, `custom3`, `gold`, `green`, `lte`, `metro-ethernet`, `mpls`, `private1`, `private2`, `private3`, `private4`, `private5`, `private6`, `public-internet`, `red`, `silver`
        """
        dscp: NotRequired[pulumi.Input[_builtins.int]]
        """
        DSCP
          - Range: `0`-`63`
        """
elif False:
    AppProbeClassPolicyObjectMappingArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class AppProbeClassPolicyObjectMappingArgs:
    def __init__(__self__, *,
                 color: pulumi.Input[_builtins.str],
                 dscp: Optional[pulumi.Input[_builtins.int]] = None):
        """
        :param pulumi.Input[_builtins.str] color: Color
                 - Choices: `default`, `3g`, `biz-internet`, `blue`, `bronze`, `custom1`, `custom2`, `custom3`, `gold`, `green`, `lte`, `metro-ethernet`, `mpls`, `private1`, `private2`, `private3`, `private4`, `private5`, `private6`, `public-internet`, `red`, `silver`
        :param pulumi.Input[_builtins.int] dscp: DSCP
                 - Range: `0`-`63`
        """
        pulumi.set(__self__, "color", color)
        if dscp is not None:
            pulumi.set(__self__, "dscp", dscp)

    @_builtins.property
    @pulumi.getter
    def color(self) -> pulumi.Input[_builtins.str]:
        """
        Color
          - Choices: `default`, `3g`, `biz-internet`, `blue`, `bronze`, `custom1`, `custom2`, `custom3`, `gold`, `green`, `lte`, `metro-ethernet`, `mpls`, `private1`, `private2`, `private3`, `private4`, `private5`, `private6`, `public-internet`, `red`, `silver`
        """
        return pulumi.get(self, "color")

    @color.setter
    def color(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "color", value)

    @_builtins.property
    @pulumi.getter
    def dscp(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        DSCP
          - Range: `0`-`63`
        """
        return pulumi.get(self, "dscp")

    @dscp.setter
    def dscp(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "dscp", value)


if not MYPY:
    class ApplicationAwareRoutingPolicyDefinitionSequenceArgsDict(TypedDict):
        id: pulumi.Input[_builtins.int]
        """
        Sequence ID
        """
        name: pulumi.Input[_builtins.str]
        """
        Sequence name
        """
        action_entries: NotRequired[pulumi.Input[Sequence[pulumi.Input['ApplicationAwareRoutingPolicyDefinitionSequenceActionEntryArgsDict']]]]
        """
        List of action entries
        """
        ip_type: NotRequired[pulumi.Input[_builtins.str]]
        """
        Sequence IP type, either `ipv4`, `ipv6` or `all`
          - Choices: `ipv4`, `ipv6`, `all`
        """
        match_entries: NotRequired[pulumi.Input[Sequence[pulumi.Input['ApplicationAwareRoutingPolicyDefinitionSequenceMatchEntryArgsDict']]]]
        """
        List of match entries
        """
elif False:
    ApplicationAwareRoutingPolicyDefinitionSequenceArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ApplicationAwareRoutingPolicyDefinitionSequenceArgs:
    def __init__(__self__, *,
                 id: pulumi.Input[_builtins.int],
                 name: pulumi.Input[_builtins.str],
                 action_entries: Optional[pulumi.Input[Sequence[pulumi.Input['ApplicationAwareRoutingPolicyDefinitionSequenceActionEntryArgs']]]] = None,
                 ip_type: Optional[pulumi.Input[_builtins.str]] = None,
                 match_entries: Optional[pulumi.Input[Sequence[pulumi.Input['ApplicationAwareRoutingPolicyDefinitionSequenceMatchEntryArgs']]]] = None):
        """
        :param pulumi.Input[_builtins.int] id: Sequence ID
        :param pulumi.Input[_builtins.str] name: Sequence name
        :param pulumi.Input[Sequence[pulumi.Input['ApplicationAwareRoutingPolicyDefinitionSequenceActionEntryArgs']]] action_entries: List of action entries
        :param pulumi.Input[_builtins.str] ip_type: Sequence IP type, either `ipv4`, `ipv6` or `all`
                 - Choices: `ipv4`, `ipv6`, `all`
        :param pulumi.Input[Sequence[pulumi.Input['ApplicationAwareRoutingPolicyDefinitionSequenceMatchEntryArgs']]] match_entries: List of match entries
        """
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "name", name)
        if action_entries is not None:
            pulumi.set(__self__, "action_entries", action_entries)
        if ip_type is not None:
            pulumi.set(__self__, "ip_type", ip_type)
        if match_entries is not None:
            pulumi.set(__self__, "match_entries", match_entries)

    @_builtins.property
    @pulumi.getter
    def id(self) -> pulumi.Input[_builtins.int]:
        """
        Sequence ID
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: pulumi.Input[_builtins.int]):
        pulumi.set(self, "id", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> pulumi.Input[_builtins.str]:
        """
        Sequence name
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "name", value)

    @_builtins.property
    @pulumi.getter(name="actionEntries")
    def action_entries(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ApplicationAwareRoutingPolicyDefinitionSequenceActionEntryArgs']]]]:
        """
        List of action entries
        """
        return pulumi.get(self, "action_entries")

    @action_entries.setter
    def action_entries(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ApplicationAwareRoutingPolicyDefinitionSequenceActionEntryArgs']]]]):
        pulumi.set(self, "action_entries", value)

    @_builtins.property
    @pulumi.getter(name="ipType")
    def ip_type(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Sequence IP type, either `ipv4`, `ipv6` or `all`
          - Choices: `ipv4`, `ipv6`, `all`
        """
        return pulumi.get(self, "ip_type")

    @ip_type.setter
    def ip_type(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "ip_type", value)

    @_builtins.property
    @pulumi.getter(name="matchEntries")
    def match_entries(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ApplicationAwareRoutingPolicyDefinitionSequenceMatchEntryArgs']]]]:
        """
        List of match entries
        """
        return pulumi.get(self, "match_entries")

    @match_entries.setter
    def match_entries(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ApplicationAwareRoutingPolicyDefinitionSequenceMatchEntryArgs']]]]):
        pulumi.set(self, "match_entries", value)


if not MYPY:
    class ApplicationAwareRoutingPolicyDefinitionSequenceActionEntryArgsDict(TypedDict):
        type: pulumi.Input[_builtins.str]
        """
        Type of action entry
          - Choices: `backupSlaPreferredColor`, `count`, `log`, `slaClass`, `cloudSaas`
        """
        backup_sla_preferred_color: NotRequired[pulumi.Input[_builtins.str]]
        """
        Backup SLA preferred color (Single value or multiple values separated by spaces), Attribute conditional on `type` being equal to `backupSlaPreferredColor`
        """
        cloud_sla: NotRequired[pulumi.Input[_builtins.bool]]
        """
        Cloud SLA, Attribute conditional on `type` being equal to `cloudSaas`
        """
        counter: NotRequired[pulumi.Input[_builtins.str]]
        """
        Counter name, Attribute conditional on `type` being equal to `count`
        """
        log: NotRequired[pulumi.Input[_builtins.bool]]
        """
        Enable logging, Attribute conditional on `type` being equal to `log`
        """
        sla_class_parameters: NotRequired[pulumi.Input[Sequence[pulumi.Input['ApplicationAwareRoutingPolicyDefinitionSequenceActionEntrySlaClassParameterArgsDict']]]]
        """
        List of SLA class parameters, Attribute conditional on `type` being equal to `slaClass`
        """
elif False:
    ApplicationAwareRoutingPolicyDefinitionSequenceActionEntryArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ApplicationAwareRoutingPolicyDefinitionSequenceActionEntryArgs:
    def __init__(__self__, *,
                 type: pulumi.Input[_builtins.str],
                 backup_sla_preferred_color: Optional[pulumi.Input[_builtins.str]] = None,
                 cloud_sla: Optional[pulumi.Input[_builtins.bool]] = None,
                 counter: Optional[pulumi.Input[_builtins.str]] = None,
                 log: Optional[pulumi.Input[_builtins.bool]] = None,
                 sla_class_parameters: Optional[pulumi.Input[Sequence[pulumi.Input['ApplicationAwareRoutingPolicyDefinitionSequenceActionEntrySlaClassParameterArgs']]]] = None):
        """
        :param pulumi.Input[_builtins.str] type: Type of action entry
                 - Choices: `backupSlaPreferredColor`, `count`, `log`, `slaClass`, `cloudSaas`
        :param pulumi.Input[_builtins.str] backup_sla_preferred_color: Backup SLA preferred color (Single value or multiple values separated by spaces), Attribute conditional on `type` being equal to `backupSlaPreferredColor`
        :param pulumi.Input[_builtins.bool] cloud_sla: Cloud SLA, Attribute conditional on `type` being equal to `cloudSaas`
        :param pulumi.Input[_builtins.str] counter: Counter name, Attribute conditional on `type` being equal to `count`
        :param pulumi.Input[_builtins.bool] log: Enable logging, Attribute conditional on `type` being equal to `log`
        :param pulumi.Input[Sequence[pulumi.Input['ApplicationAwareRoutingPolicyDefinitionSequenceActionEntrySlaClassParameterArgs']]] sla_class_parameters: List of SLA class parameters, Attribute conditional on `type` being equal to `slaClass`
        """
        pulumi.set(__self__, "type", type)
        if backup_sla_preferred_color is not None:
            pulumi.set(__self__, "backup_sla_preferred_color", backup_sla_preferred_color)
        if cloud_sla is not None:
            pulumi.set(__self__, "cloud_sla", cloud_sla)
        if counter is not None:
            pulumi.set(__self__, "counter", counter)
        if log is not None:
            pulumi.set(__self__, "log", log)
        if sla_class_parameters is not None:
            pulumi.set(__self__, "sla_class_parameters", sla_class_parameters)

    @_builtins.property
    @pulumi.getter
    def type(self) -> pulumi.Input[_builtins.str]:
        """
        Type of action entry
          - Choices: `backupSlaPreferredColor`, `count`, `log`, `slaClass`, `cloudSaas`
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "type", value)

    @_builtins.property
    @pulumi.getter(name="backupSlaPreferredColor")
    def backup_sla_preferred_color(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Backup SLA preferred color (Single value or multiple values separated by spaces), Attribute conditional on `type` being equal to `backupSlaPreferredColor`
        """
        return pulumi.get(self, "backup_sla_preferred_color")

    @backup_sla_preferred_color.setter
    def backup_sla_preferred_color(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "backup_sla_preferred_color", value)

    @_builtins.property
    @pulumi.getter(name="cloudSla")
    def cloud_sla(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Cloud SLA, Attribute conditional on `type` being equal to `cloudSaas`
        """
        return pulumi.get(self, "cloud_sla")

    @cloud_sla.setter
    def cloud_sla(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "cloud_sla", value)

    @_builtins.property
    @pulumi.getter
    def counter(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Counter name, Attribute conditional on `type` being equal to `count`
        """
        return pulumi.get(self, "counter")

    @counter.setter
    def counter(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "counter", value)

    @_builtins.property
    @pulumi.getter
    def log(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Enable logging, Attribute conditional on `type` being equal to `log`
        """
        return pulumi.get(self, "log")

    @log.setter
    def log(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "log", value)

    @_builtins.property
    @pulumi.getter(name="slaClassParameters")
    def sla_class_parameters(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ApplicationAwareRoutingPolicyDefinitionSequenceActionEntrySlaClassParameterArgs']]]]:
        """
        List of SLA class parameters, Attribute conditional on `type` being equal to `slaClass`
        """
        return pulumi.get(self, "sla_class_parameters")

    @sla_class_parameters.setter
    def sla_class_parameters(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ApplicationAwareRoutingPolicyDefinitionSequenceActionEntrySlaClassParameterArgs']]]]):
        pulumi.set(self, "sla_class_parameters", value)


if not MYPY:
    class ApplicationAwareRoutingPolicyDefinitionSequenceActionEntrySlaClassParameterArgsDict(TypedDict):
        type: pulumi.Input[_builtins.str]
        """
        Type of SLA class parameter
          - Choices: `name`, `preferredColor`, `preferredColorGroup`, `strict`, `fallbackToBestPath`
        """
        preferred_color: NotRequired[pulumi.Input[_builtins.str]]
        """
        preferred color (Single value or multiple values separated by spaces), Attribute conditional on `type` being equal to `preferredColor`
        """
        preferred_color_group_list_id: NotRequired[pulumi.Input[_builtins.str]]
        """
        Preferred color group list ID, Attribute conditional on `type` being equal to `preferredColorGroup`
        """
        preferred_color_group_list_version: NotRequired[pulumi.Input[_builtins.int]]
        """
        Preferred color group list version
        """
        sla_class_list_id: NotRequired[pulumi.Input[_builtins.str]]
        """
        SLA class list ID, Attribute conditional on `type` being equal to `name`
        """
        sla_class_list_version: NotRequired[pulumi.Input[_builtins.int]]
        """
        SLA class list version
        """
elif False:
    ApplicationAwareRoutingPolicyDefinitionSequenceActionEntrySlaClassParameterArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ApplicationAwareRoutingPolicyDefinitionSequenceActionEntrySlaClassParameterArgs:
    def __init__(__self__, *,
                 type: pulumi.Input[_builtins.str],
                 preferred_color: Optional[pulumi.Input[_builtins.str]] = None,
                 preferred_color_group_list_id: Optional[pulumi.Input[_builtins.str]] = None,
                 preferred_color_group_list_version: Optional[pulumi.Input[_builtins.int]] = None,
                 sla_class_list_id: Optional[pulumi.Input[_builtins.str]] = None,
                 sla_class_list_version: Optional[pulumi.Input[_builtins.int]] = None):
        """
        :param pulumi.Input[_builtins.str] type: Type of SLA class parameter
                 - Choices: `name`, `preferredColor`, `preferredColorGroup`, `strict`, `fallbackToBestPath`
        :param pulumi.Input[_builtins.str] preferred_color: preferred color (Single value or multiple values separated by spaces), Attribute conditional on `type` being equal to `preferredColor`
        :param pulumi.Input[_builtins.str] preferred_color_group_list_id: Preferred color group list ID, Attribute conditional on `type` being equal to `preferredColorGroup`
        :param pulumi.Input[_builtins.int] preferred_color_group_list_version: Preferred color group list version
        :param pulumi.Input[_builtins.str] sla_class_list_id: SLA class list ID, Attribute conditional on `type` being equal to `name`
        :param pulumi.Input[_builtins.int] sla_class_list_version: SLA class list version
        """
        pulumi.set(__self__, "type", type)
        if preferred_color is not None:
            pulumi.set(__self__, "preferred_color", preferred_color)
        if preferred_color_group_list_id is not None:
            pulumi.set(__self__, "preferred_color_group_list_id", preferred_color_group_list_id)
        if preferred_color_group_list_version is not None:
            pulumi.set(__self__, "preferred_color_group_list_version", preferred_color_group_list_version)
        if sla_class_list_id is not None:
            pulumi.set(__self__, "sla_class_list_id", sla_class_list_id)
        if sla_class_list_version is not None:
            pulumi.set(__self__, "sla_class_list_version", sla_class_list_version)

    @_builtins.property
    @pulumi.getter
    def type(self) -> pulumi.Input[_builtins.str]:
        """
        Type of SLA class parameter
          - Choices: `name`, `preferredColor`, `preferredColorGroup`, `strict`, `fallbackToBestPath`
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "type", value)

    @_builtins.property
    @pulumi.getter(name="preferredColor")
    def preferred_color(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        preferred color (Single value or multiple values separated by spaces), Attribute conditional on `type` being equal to `preferredColor`
        """
        return pulumi.get(self, "preferred_color")

    @preferred_color.setter
    def preferred_color(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "preferred_color", value)

    @_builtins.property
    @pulumi.getter(name="preferredColorGroupListId")
    def preferred_color_group_list_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Preferred color group list ID, Attribute conditional on `type` being equal to `preferredColorGroup`
        """
        return pulumi.get(self, "preferred_color_group_list_id")

    @preferred_color_group_list_id.setter
    def preferred_color_group_list_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "preferred_color_group_list_id", value)

    @_builtins.property
    @pulumi.getter(name="preferredColorGroupListVersion")
    def preferred_color_group_list_version(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        Preferred color group list version
        """
        return pulumi.get(self, "preferred_color_group_list_version")

    @preferred_color_group_list_version.setter
    def preferred_color_group_list_version(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "preferred_color_group_list_version", value)

    @_builtins.property
    @pulumi.getter(name="slaClassListId")
    def sla_class_list_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        SLA class list ID, Attribute conditional on `type` being equal to `name`
        """
        return pulumi.get(self, "sla_class_list_id")

    @sla_class_list_id.setter
    def sla_class_list_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "sla_class_list_id", value)

    @_builtins.property
    @pulumi.getter(name="slaClassListVersion")
    def sla_class_list_version(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        SLA class list version
        """
        return pulumi.get(self, "sla_class_list_version")

    @sla_class_list_version.setter
    def sla_class_list_version(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "sla_class_list_version", value)


if not MYPY:
    class ApplicationAwareRoutingPolicyDefinitionSequenceMatchEntryArgsDict(TypedDict):
        type: pulumi.Input[_builtins.str]
        """
        Type of match entry
          - Choices: `appList`, `dnsAppList`, `dns`, `dscp`, `plp`, `protocol`, `sourceDataPrefixList`, `sourceIp`, `sourcePort`, `destinationDataPrefixList`, `destinationIp`, `destinationRegion`, `destinationPort`, `trafficTo`, `icmpMessage`
        """
        application_list_id: NotRequired[pulumi.Input[_builtins.str]]
        """
        Application list ID, Attribute conditional on `type` being equal to `appList`
        """
        application_list_version: NotRequired[pulumi.Input[_builtins.int]]
        """
        Application list version
        """
        destination_data_prefix_list_id: NotRequired[pulumi.Input[_builtins.str]]
        """
        Destination Data Prefix list ID, Attribute conditional on `type` being equal to `destinationDataPrefixList`
        """
        destination_data_prefix_list_version: NotRequired[pulumi.Input[_builtins.int]]
        """
        Destination Data Prefix list version
        """
        destination_ip: NotRequired[pulumi.Input[_builtins.str]]
        """
        Destination IP, Attribute conditional on `type` being equal to `destinationIp`
        """
        destination_port: NotRequired[pulumi.Input[_builtins.str]]
        """
        Destination port, 0-65535 (Single value, range or multiple values separated by spaces), Attribute conditional on `type` being equal to `destinationPort`
        """
        destination_region: NotRequired[pulumi.Input[_builtins.str]]
        """
        Destination region, Attribute conditional on `type` being equal to `destinationRegion`
          - Choices: `primary-region`, `secondary-region`, `other-region`
        """
        dns: NotRequired[pulumi.Input[_builtins.str]]
        """
        DNS request or response, Attribute conditional on `type` being equal to `dns`
          - Choices: `request`, `response`
        """
        dns_application_list_id: NotRequired[pulumi.Input[_builtins.str]]
        """
        DNS Application list ID, Attribute conditional on `type` being equal to `dnsAppList`
        """
        dns_application_list_version: NotRequired[pulumi.Input[_builtins.int]]
        """
        DNS Application list version
        """
        dscp: NotRequired[pulumi.Input[_builtins.str]]
        """
        DSCP value, Attribute conditional on `type` being equal to `dscp`
        """
        icmp_message: NotRequired[pulumi.Input[_builtins.str]]
        """
        ICMP Message, Attribute conditional on `type` being equal to `icmpMessage`
        """
        plp: NotRequired[pulumi.Input[_builtins.str]]
        """
        PLP, Attribute conditional on `type` being equal to `plp`
          - Choices: `low`, `high`
        """
        protocol: NotRequired[pulumi.Input[_builtins.str]]
        """
        IP Protocol, 0-255 (Single value or multiple values separated by spaces), Attribute conditional on `type` being equal to `protocol`
        """
        source_data_prefix_list_id: NotRequired[pulumi.Input[_builtins.str]]
        """
        Source Data Prefix list ID, Attribute conditional on `type` being equal to `sourceDataPrefixList`
        """
        source_data_prefix_list_version: NotRequired[pulumi.Input[_builtins.int]]
        """
        Source Data Prefix list version
        """
        source_ip: NotRequired[pulumi.Input[_builtins.str]]
        """
        Source IP, Attribute conditional on `type` being equal to `sourceIp`
        """
        source_port: NotRequired[pulumi.Input[_builtins.str]]
        """
        Source port, 0-65535 (Single value, range or multiple values separated by spaces), Attribute conditional on `type` being equal to `sourcePort`
        """
        traffic_to: NotRequired[pulumi.Input[_builtins.str]]
        """
        Traffic to, Attribute conditional on `type` being equal to `trafficTo`
          - Choices: `access`, `core`, `service`
        """
elif False:
    ApplicationAwareRoutingPolicyDefinitionSequenceMatchEntryArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ApplicationAwareRoutingPolicyDefinitionSequenceMatchEntryArgs:
    def __init__(__self__, *,
                 type: pulumi.Input[_builtins.str],
                 application_list_id: Optional[pulumi.Input[_builtins.str]] = None,
                 application_list_version: Optional[pulumi.Input[_builtins.int]] = None,
                 destination_data_prefix_list_id: Optional[pulumi.Input[_builtins.str]] = None,
                 destination_data_prefix_list_version: Optional[pulumi.Input[_builtins.int]] = None,
                 destination_ip: Optional[pulumi.Input[_builtins.str]] = None,
                 destination_port: Optional[pulumi.Input[_builtins.str]] = None,
                 destination_region: Optional[pulumi.Input[_builtins.str]] = None,
                 dns: Optional[pulumi.Input[_builtins.str]] = None,
                 dns_application_list_id: Optional[pulumi.Input[_builtins.str]] = None,
                 dns_application_list_version: Optional[pulumi.Input[_builtins.int]] = None,
                 dscp: Optional[pulumi.Input[_builtins.str]] = None,
                 icmp_message: Optional[pulumi.Input[_builtins.str]] = None,
                 plp: Optional[pulumi.Input[_builtins.str]] = None,
                 protocol: Optional[pulumi.Input[_builtins.str]] = None,
                 source_data_prefix_list_id: Optional[pulumi.Input[_builtins.str]] = None,
                 source_data_prefix_list_version: Optional[pulumi.Input[_builtins.int]] = None,
                 source_ip: Optional[pulumi.Input[_builtins.str]] = None,
                 source_port: Optional[pulumi.Input[_builtins.str]] = None,
                 traffic_to: Optional[pulumi.Input[_builtins.str]] = None):
        """
        :param pulumi.Input[_builtins.str] type: Type of match entry
                 - Choices: `appList`, `dnsAppList`, `dns`, `dscp`, `plp`, `protocol`, `sourceDataPrefixList`, `sourceIp`, `sourcePort`, `destinationDataPrefixList`, `destinationIp`, `destinationRegion`, `destinationPort`, `trafficTo`, `icmpMessage`
        :param pulumi.Input[_builtins.str] application_list_id: Application list ID, Attribute conditional on `type` being equal to `appList`
        :param pulumi.Input[_builtins.int] application_list_version: Application list version
        :param pulumi.Input[_builtins.str] destination_data_prefix_list_id: Destination Data Prefix list ID, Attribute conditional on `type` being equal to `destinationDataPrefixList`
        :param pulumi.Input[_builtins.int] destination_data_prefix_list_version: Destination Data Prefix list version
        :param pulumi.Input[_builtins.str] destination_ip: Destination IP, Attribute conditional on `type` being equal to `destinationIp`
        :param pulumi.Input[_builtins.str] destination_port: Destination port, 0-65535 (Single value, range or multiple values separated by spaces), Attribute conditional on `type` being equal to `destinationPort`
        :param pulumi.Input[_builtins.str] destination_region: Destination region, Attribute conditional on `type` being equal to `destinationRegion`
                 - Choices: `primary-region`, `secondary-region`, `other-region`
        :param pulumi.Input[_builtins.str] dns: DNS request or response, Attribute conditional on `type` being equal to `dns`
                 - Choices: `request`, `response`
        :param pulumi.Input[_builtins.str] dns_application_list_id: DNS Application list ID, Attribute conditional on `type` being equal to `dnsAppList`
        :param pulumi.Input[_builtins.int] dns_application_list_version: DNS Application list version
        :param pulumi.Input[_builtins.str] dscp: DSCP value, Attribute conditional on `type` being equal to `dscp`
        :param pulumi.Input[_builtins.str] icmp_message: ICMP Message, Attribute conditional on `type` being equal to `icmpMessage`
        :param pulumi.Input[_builtins.str] plp: PLP, Attribute conditional on `type` being equal to `plp`
                 - Choices: `low`, `high`
        :param pulumi.Input[_builtins.str] protocol: IP Protocol, 0-255 (Single value or multiple values separated by spaces), Attribute conditional on `type` being equal to `protocol`
        :param pulumi.Input[_builtins.str] source_data_prefix_list_id: Source Data Prefix list ID, Attribute conditional on `type` being equal to `sourceDataPrefixList`
        :param pulumi.Input[_builtins.int] source_data_prefix_list_version: Source Data Prefix list version
        :param pulumi.Input[_builtins.str] source_ip: Source IP, Attribute conditional on `type` being equal to `sourceIp`
        :param pulumi.Input[_builtins.str] source_port: Source port, 0-65535 (Single value, range or multiple values separated by spaces), Attribute conditional on `type` being equal to `sourcePort`
        :param pulumi.Input[_builtins.str] traffic_to: Traffic to, Attribute conditional on `type` being equal to `trafficTo`
                 - Choices: `access`, `core`, `service`
        """
        pulumi.set(__self__, "type", type)
        if application_list_id is not None:
            pulumi.set(__self__, "application_list_id", application_list_id)
        if application_list_version is not None:
            pulumi.set(__self__, "application_list_version", application_list_version)
        if destination_data_prefix_list_id is not None:
            pulumi.set(__self__, "destination_data_prefix_list_id", destination_data_prefix_list_id)
        if destination_data_prefix_list_version is not None:
            pulumi.set(__self__, "destination_data_prefix_list_version", destination_data_prefix_list_version)
        if destination_ip is not None:
            pulumi.set(__self__, "destination_ip", destination_ip)
        if destination_port is not None:
            pulumi.set(__self__, "destination_port", destination_port)
        if destination_region is not None:
            pulumi.set(__self__, "destination_region", destination_region)
        if dns is not None:
            pulumi.set(__self__, "dns", dns)
        if dns_application_list_id is not None:
            pulumi.set(__self__, "dns_application_list_id", dns_application_list_id)
        if dns_application_list_version is not None:
            pulumi.set(__self__, "dns_application_list_version", dns_application_list_version)
        if dscp is not None:
            pulumi.set(__self__, "dscp", dscp)
        if icmp_message is not None:
            pulumi.set(__self__, "icmp_message", icmp_message)
        if plp is not None:
            pulumi.set(__self__, "plp", plp)
        if protocol is not None:
            pulumi.set(__self__, "protocol", protocol)
        if source_data_prefix_list_id is not None:
            pulumi.set(__self__, "source_data_prefix_list_id", source_data_prefix_list_id)
        if source_data_prefix_list_version is not None:
            pulumi.set(__self__, "source_data_prefix_list_version", source_data_prefix_list_version)
        if source_ip is not None:
            pulumi.set(__self__, "source_ip", source_ip)
        if source_port is not None:
            pulumi.set(__self__, "source_port", source_port)
        if traffic_to is not None:
            pulumi.set(__self__, "traffic_to", traffic_to)

    @_builtins.property
    @pulumi.getter
    def type(self) -> pulumi.Input[_builtins.str]:
        """
        Type of match entry
          - Choices: `appList`, `dnsAppList`, `dns`, `dscp`, `plp`, `protocol`, `sourceDataPrefixList`, `sourceIp`, `sourcePort`, `destinationDataPrefixList`, `destinationIp`, `destinationRegion`, `destinationPort`, `trafficTo`, `icmpMessage`
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "type", value)

    @_builtins.property
    @pulumi.getter(name="applicationListId")
    def application_list_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Application list ID, Attribute conditional on `type` being equal to `appList`
        """
        return pulumi.get(self, "application_list_id")

    @application_list_id.setter
    def application_list_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "application_list_id", value)

    @_builtins.property
    @pulumi.getter(name="applicationListVersion")
    def application_list_version(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        Application list version
        """
        return pulumi.get(self, "application_list_version")

    @application_list_version.setter
    def application_list_version(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "application_list_version", value)

    @_builtins.property
    @pulumi.getter(name="destinationDataPrefixListId")
    def destination_data_prefix_list_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Destination Data Prefix list ID, Attribute conditional on `type` being equal to `destinationDataPrefixList`
        """
        return pulumi.get(self, "destination_data_prefix_list_id")

    @destination_data_prefix_list_id.setter
    def destination_data_prefix_list_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "destination_data_prefix_list_id", value)

    @_builtins.property
    @pulumi.getter(name="destinationDataPrefixListVersion")
    def destination_data_prefix_list_version(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        Destination Data Prefix list version
        """
        return pulumi.get(self, "destination_data_prefix_list_version")

    @destination_data_prefix_list_version.setter
    def destination_data_prefix_list_version(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "destination_data_prefix_list_version", value)

    @_builtins.property
    @pulumi.getter(name="destinationIp")
    def destination_ip(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Destination IP, Attribute conditional on `type` being equal to `destinationIp`
        """
        return pulumi.get(self, "destination_ip")

    @destination_ip.setter
    def destination_ip(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "destination_ip", value)

    @_builtins.property
    @pulumi.getter(name="destinationPort")
    def destination_port(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Destination port, 0-65535 (Single value, range or multiple values separated by spaces), Attribute conditional on `type` being equal to `destinationPort`
        """
        return pulumi.get(self, "destination_port")

    @destination_port.setter
    def destination_port(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "destination_port", value)

    @_builtins.property
    @pulumi.getter(name="destinationRegion")
    def destination_region(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Destination region, Attribute conditional on `type` being equal to `destinationRegion`
          - Choices: `primary-region`, `secondary-region`, `other-region`
        """
        return pulumi.get(self, "destination_region")

    @destination_region.setter
    def destination_region(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "destination_region", value)

    @_builtins.property
    @pulumi.getter
    def dns(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        DNS request or response, Attribute conditional on `type` being equal to `dns`
          - Choices: `request`, `response`
        """
        return pulumi.get(self, "dns")

    @dns.setter
    def dns(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "dns", value)

    @_builtins.property
    @pulumi.getter(name="dnsApplicationListId")
    def dns_application_list_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        DNS Application list ID, Attribute conditional on `type` being equal to `dnsAppList`
        """
        return pulumi.get(self, "dns_application_list_id")

    @dns_application_list_id.setter
    def dns_application_list_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "dns_application_list_id", value)

    @_builtins.property
    @pulumi.getter(name="dnsApplicationListVersion")
    def dns_application_list_version(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        DNS Application list version
        """
        return pulumi.get(self, "dns_application_list_version")

    @dns_application_list_version.setter
    def dns_application_list_version(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "dns_application_list_version", value)

    @_builtins.property
    @pulumi.getter
    def dscp(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        DSCP value, Attribute conditional on `type` being equal to `dscp`
        """
        return pulumi.get(self, "dscp")

    @dscp.setter
    def dscp(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "dscp", value)

    @_builtins.property
    @pulumi.getter(name="icmpMessage")
    def icmp_message(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        ICMP Message, Attribute conditional on `type` being equal to `icmpMessage`
        """
        return pulumi.get(self, "icmp_message")

    @icmp_message.setter
    def icmp_message(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "icmp_message", value)

    @_builtins.property
    @pulumi.getter
    def plp(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        PLP, Attribute conditional on `type` being equal to `plp`
          - Choices: `low`, `high`
        """
        return pulumi.get(self, "plp")

    @plp.setter
    def plp(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "plp", value)

    @_builtins.property
    @pulumi.getter
    def protocol(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        IP Protocol, 0-255 (Single value or multiple values separated by spaces), Attribute conditional on `type` being equal to `protocol`
        """
        return pulumi.get(self, "protocol")

    @protocol.setter
    def protocol(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "protocol", value)

    @_builtins.property
    @pulumi.getter(name="sourceDataPrefixListId")
    def source_data_prefix_list_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Source Data Prefix list ID, Attribute conditional on `type` being equal to `sourceDataPrefixList`
        """
        return pulumi.get(self, "source_data_prefix_list_id")

    @source_data_prefix_list_id.setter
    def source_data_prefix_list_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "source_data_prefix_list_id", value)

    @_builtins.property
    @pulumi.getter(name="sourceDataPrefixListVersion")
    def source_data_prefix_list_version(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        Source Data Prefix list version
        """
        return pulumi.get(self, "source_data_prefix_list_version")

    @source_data_prefix_list_version.setter
    def source_data_prefix_list_version(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "source_data_prefix_list_version", value)

    @_builtins.property
    @pulumi.getter(name="sourceIp")
    def source_ip(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Source IP, Attribute conditional on `type` being equal to `sourceIp`
        """
        return pulumi.get(self, "source_ip")

    @source_ip.setter
    def source_ip(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "source_ip", value)

    @_builtins.property
    @pulumi.getter(name="sourcePort")
    def source_port(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Source port, 0-65535 (Single value, range or multiple values separated by spaces), Attribute conditional on `type` being equal to `sourcePort`
        """
        return pulumi.get(self, "source_port")

    @source_port.setter
    def source_port(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "source_port", value)

    @_builtins.property
    @pulumi.getter(name="trafficTo")
    def traffic_to(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Traffic to, Attribute conditional on `type` being equal to `trafficTo`
          - Choices: `access`, `core`, `service`
        """
        return pulumi.get(self, "traffic_to")

    @traffic_to.setter
    def traffic_to(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "traffic_to", value)


if not MYPY:
    class ApplicationListPolicyObjectEntryArgsDict(TypedDict):
        application: NotRequired[pulumi.Input[_builtins.str]]
        """
        Application name
        """
        application_family: NotRequired[pulumi.Input[_builtins.str]]
        """
        Application family name
        """
elif False:
    ApplicationListPolicyObjectEntryArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ApplicationListPolicyObjectEntryArgs:
    def __init__(__self__, *,
                 application: Optional[pulumi.Input[_builtins.str]] = None,
                 application_family: Optional[pulumi.Input[_builtins.str]] = None):
        """
        :param pulumi.Input[_builtins.str] application: Application name
        :param pulumi.Input[_builtins.str] application_family: Application family name
        """
        if application is not None:
            pulumi.set(__self__, "application", application)
        if application_family is not None:
            pulumi.set(__self__, "application_family", application_family)

    @_builtins.property
    @pulumi.getter
    def application(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Application name
        """
        return pulumi.get(self, "application")

    @application.setter
    def application(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "application", value)

    @_builtins.property
    @pulumi.getter(name="applicationFamily")
    def application_family(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Application family name
        """
        return pulumi.get(self, "application_family")

    @application_family.setter
    def application_family(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "application_family", value)


if not MYPY:
    class ApplicationPriorityQosPolicyQosSchedulerArgsDict(TypedDict):
        bandwidth: NotRequired[pulumi.Input[_builtins.str]]
        """
        bandwidthPercent
        """
        drops: NotRequired[pulumi.Input[_builtins.str]]
        """
        drops
        """
        forwarding_class_id: NotRequired[pulumi.Input[_builtins.str]]
        queue: NotRequired[pulumi.Input[_builtins.str]]
        """
        queue
        """
        scheduling_type: NotRequired[pulumi.Input[_builtins.str]]
        """
        scheduling
        """
elif False:
    ApplicationPriorityQosPolicyQosSchedulerArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ApplicationPriorityQosPolicyQosSchedulerArgs:
    def __init__(__self__, *,
                 bandwidth: Optional[pulumi.Input[_builtins.str]] = None,
                 drops: Optional[pulumi.Input[_builtins.str]] = None,
                 forwarding_class_id: Optional[pulumi.Input[_builtins.str]] = None,
                 queue: Optional[pulumi.Input[_builtins.str]] = None,
                 scheduling_type: Optional[pulumi.Input[_builtins.str]] = None):
        """
        :param pulumi.Input[_builtins.str] bandwidth: bandwidthPercent
        :param pulumi.Input[_builtins.str] drops: drops
        :param pulumi.Input[_builtins.str] queue: queue
        :param pulumi.Input[_builtins.str] scheduling_type: scheduling
        """
        if bandwidth is not None:
            pulumi.set(__self__, "bandwidth", bandwidth)
        if drops is not None:
            pulumi.set(__self__, "drops", drops)
        if forwarding_class_id is not None:
            pulumi.set(__self__, "forwarding_class_id", forwarding_class_id)
        if queue is not None:
            pulumi.set(__self__, "queue", queue)
        if scheduling_type is not None:
            pulumi.set(__self__, "scheduling_type", scheduling_type)

    @_builtins.property
    @pulumi.getter
    def bandwidth(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        bandwidthPercent
        """
        return pulumi.get(self, "bandwidth")

    @bandwidth.setter
    def bandwidth(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "bandwidth", value)

    @_builtins.property
    @pulumi.getter
    def drops(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        drops
        """
        return pulumi.get(self, "drops")

    @drops.setter
    def drops(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "drops", value)

    @_builtins.property
    @pulumi.getter(name="forwardingClassId")
    def forwarding_class_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "forwarding_class_id")

    @forwarding_class_id.setter
    def forwarding_class_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "forwarding_class_id", value)

    @_builtins.property
    @pulumi.getter
    def queue(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        queue
        """
        return pulumi.get(self, "queue")

    @queue.setter
    def queue(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "queue", value)

    @_builtins.property
    @pulumi.getter(name="schedulingType")
    def scheduling_type(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        scheduling
        """
        return pulumi.get(self, "scheduling_type")

    @scheduling_type.setter
    def scheduling_type(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "scheduling_type", value)


if not MYPY:
    class ApplicationPriorityTrafficPolicyPolicySequenceArgsDict(TypedDict):
        actions: NotRequired[pulumi.Input[Sequence[pulumi.Input['ApplicationPriorityTrafficPolicyPolicySequenceActionArgsDict']]]]
        base_action: NotRequired[pulumi.Input[_builtins.str]]
        """
        Base Action
          - Choices: `drop`, `accept`
        """
        match_entries: NotRequired[pulumi.Input[Sequence[pulumi.Input['ApplicationPriorityTrafficPolicyPolicySequenceMatchEntryArgsDict']]]]
        protocol: NotRequired[pulumi.Input[_builtins.str]]
        """
        Sequence IP Type
          - Choices: `ipv4`, `ipv6`, `all`
        """
        sequence_id: NotRequired[pulumi.Input[_builtins.int]]
        """
        Sequence Id
          - Range: `1`-`65536`
        """
        sequence_name: NotRequired[pulumi.Input[_builtins.str]]
        """
        Sequence Name
        """
elif False:
    ApplicationPriorityTrafficPolicyPolicySequenceArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ApplicationPriorityTrafficPolicyPolicySequenceArgs:
    def __init__(__self__, *,
                 actions: Optional[pulumi.Input[Sequence[pulumi.Input['ApplicationPriorityTrafficPolicyPolicySequenceActionArgs']]]] = None,
                 base_action: Optional[pulumi.Input[_builtins.str]] = None,
                 match_entries: Optional[pulumi.Input[Sequence[pulumi.Input['ApplicationPriorityTrafficPolicyPolicySequenceMatchEntryArgs']]]] = None,
                 protocol: Optional[pulumi.Input[_builtins.str]] = None,
                 sequence_id: Optional[pulumi.Input[_builtins.int]] = None,
                 sequence_name: Optional[pulumi.Input[_builtins.str]] = None):
        """
        :param pulumi.Input[_builtins.str] base_action: Base Action
                 - Choices: `drop`, `accept`
        :param pulumi.Input[_builtins.str] protocol: Sequence IP Type
                 - Choices: `ipv4`, `ipv6`, `all`
        :param pulumi.Input[_builtins.int] sequence_id: Sequence Id
                 - Range: `1`-`65536`
        :param pulumi.Input[_builtins.str] sequence_name: Sequence Name
        """
        if actions is not None:
            pulumi.set(__self__, "actions", actions)
        if base_action is not None:
            pulumi.set(__self__, "base_action", base_action)
        if match_entries is not None:
            pulumi.set(__self__, "match_entries", match_entries)
        if protocol is not None:
            pulumi.set(__self__, "protocol", protocol)
        if sequence_id is not None:
            pulumi.set(__self__, "sequence_id", sequence_id)
        if sequence_name is not None:
            pulumi.set(__self__, "sequence_name", sequence_name)

    @_builtins.property
    @pulumi.getter
    def actions(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ApplicationPriorityTrafficPolicyPolicySequenceActionArgs']]]]:
        return pulumi.get(self, "actions")

    @actions.setter
    def actions(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ApplicationPriorityTrafficPolicyPolicySequenceActionArgs']]]]):
        pulumi.set(self, "actions", value)

    @_builtins.property
    @pulumi.getter(name="baseAction")
    def base_action(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Base Action
          - Choices: `drop`, `accept`
        """
        return pulumi.get(self, "base_action")

    @base_action.setter
    def base_action(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "base_action", value)

    @_builtins.property
    @pulumi.getter(name="matchEntries")
    def match_entries(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ApplicationPriorityTrafficPolicyPolicySequenceMatchEntryArgs']]]]:
        return pulumi.get(self, "match_entries")

    @match_entries.setter
    def match_entries(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ApplicationPriorityTrafficPolicyPolicySequenceMatchEntryArgs']]]]):
        pulumi.set(self, "match_entries", value)

    @_builtins.property
    @pulumi.getter
    def protocol(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Sequence IP Type
          - Choices: `ipv4`, `ipv6`, `all`
        """
        return pulumi.get(self, "protocol")

    @protocol.setter
    def protocol(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "protocol", value)

    @_builtins.property
    @pulumi.getter(name="sequenceId")
    def sequence_id(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        Sequence Id
          - Range: `1`-`65536`
        """
        return pulumi.get(self, "sequence_id")

    @sequence_id.setter
    def sequence_id(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "sequence_id", value)

    @_builtins.property
    @pulumi.getter(name="sequenceName")
    def sequence_name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Sequence Name
        """
        return pulumi.get(self, "sequence_name")

    @sequence_name.setter
    def sequence_name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "sequence_name", value)


if not MYPY:
    class ApplicationPriorityTrafficPolicyPolicySequenceActionArgsDict(TypedDict):
        backup_sla_preferred_colors: NotRequired[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]
        """
        Backup SLA perferred color
        """
        cloud_probe: NotRequired[pulumi.Input[_builtins.bool]]
        cloud_saas: NotRequired[pulumi.Input[_builtins.bool]]
        count: NotRequired[pulumi.Input[_builtins.str]]
        fallback_to_routing: NotRequired[pulumi.Input[_builtins.bool]]
        log: NotRequired[pulumi.Input[_builtins.bool]]
        loss_correct_fec_threshold: NotRequired[pulumi.Input[_builtins.int]]
        """
        - Range: `1`-`5`
        """
        loss_correct_type: NotRequired[pulumi.Input[_builtins.str]]
        """
        - Choices: `fecAdaptive`, `fecAlways`, `packetDuplication`
        """
        nat_bypass: NotRequired[pulumi.Input[_builtins.bool]]
        nat_dia_interfaces: NotRequired[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]
        nat_dia_pools: NotRequired[pulumi.Input[Sequence[pulumi.Input[_builtins.int]]]]
        nat_fallback: NotRequired[pulumi.Input[_builtins.bool]]
        nat_pool: NotRequired[pulumi.Input[_builtins.int]]
        """
        - Range: `1`-`31`
        """
        nat_vpn: NotRequired[pulumi.Input[_builtins.bool]]
        redirect_dns_field: NotRequired[pulumi.Input[_builtins.str]]
        """
        - Choices: `ipAddress`, `redirectDns`
        """
        redirect_dns_value: NotRequired[pulumi.Input[_builtins.str]]
        secure_internet_gateway: NotRequired[pulumi.Input[_builtins.bool]]
        set_parameters: NotRequired[pulumi.Input[Sequence[pulumi.Input['ApplicationPriorityTrafficPolicyPolicySequenceActionSetParameterArgsDict']]]]
        sla_classes: NotRequired[pulumi.Input[Sequence[pulumi.Input['ApplicationPriorityTrafficPolicyPolicySequenceActionSlaClassArgsDict']]]]
        """
        slaClass
        """
elif False:
    ApplicationPriorityTrafficPolicyPolicySequenceActionArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ApplicationPriorityTrafficPolicyPolicySequenceActionArgs:
    def __init__(__self__, *,
                 backup_sla_preferred_colors: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 cloud_probe: Optional[pulumi.Input[_builtins.bool]] = None,
                 cloud_saas: Optional[pulumi.Input[_builtins.bool]] = None,
                 count: Optional[pulumi.Input[_builtins.str]] = None,
                 fallback_to_routing: Optional[pulumi.Input[_builtins.bool]] = None,
                 log: Optional[pulumi.Input[_builtins.bool]] = None,
                 loss_correct_fec_threshold: Optional[pulumi.Input[_builtins.int]] = None,
                 loss_correct_type: Optional[pulumi.Input[_builtins.str]] = None,
                 nat_bypass: Optional[pulumi.Input[_builtins.bool]] = None,
                 nat_dia_interfaces: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 nat_dia_pools: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.int]]]] = None,
                 nat_fallback: Optional[pulumi.Input[_builtins.bool]] = None,
                 nat_pool: Optional[pulumi.Input[_builtins.int]] = None,
                 nat_vpn: Optional[pulumi.Input[_builtins.bool]] = None,
                 redirect_dns_field: Optional[pulumi.Input[_builtins.str]] = None,
                 redirect_dns_value: Optional[pulumi.Input[_builtins.str]] = None,
                 secure_internet_gateway: Optional[pulumi.Input[_builtins.bool]] = None,
                 set_parameters: Optional[pulumi.Input[Sequence[pulumi.Input['ApplicationPriorityTrafficPolicyPolicySequenceActionSetParameterArgs']]]] = None,
                 sla_classes: Optional[pulumi.Input[Sequence[pulumi.Input['ApplicationPriorityTrafficPolicyPolicySequenceActionSlaClassArgs']]]] = None):
        """
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] backup_sla_preferred_colors: Backup SLA perferred color
        :param pulumi.Input[_builtins.int] loss_correct_fec_threshold: - Range: `1`-`5`
        :param pulumi.Input[_builtins.str] loss_correct_type: - Choices: `fecAdaptive`, `fecAlways`, `packetDuplication`
        :param pulumi.Input[_builtins.int] nat_pool: - Range: `1`-`31`
        :param pulumi.Input[_builtins.str] redirect_dns_field: - Choices: `ipAddress`, `redirectDns`
        :param pulumi.Input[Sequence[pulumi.Input['ApplicationPriorityTrafficPolicyPolicySequenceActionSlaClassArgs']]] sla_classes: slaClass
        """
        if backup_sla_preferred_colors is not None:
            pulumi.set(__self__, "backup_sla_preferred_colors", backup_sla_preferred_colors)
        if cloud_probe is not None:
            pulumi.set(__self__, "cloud_probe", cloud_probe)
        if cloud_saas is not None:
            pulumi.set(__self__, "cloud_saas", cloud_saas)
        if count is not None:
            pulumi.set(__self__, "count", count)
        if fallback_to_routing is not None:
            pulumi.set(__self__, "fallback_to_routing", fallback_to_routing)
        if log is not None:
            pulumi.set(__self__, "log", log)
        if loss_correct_fec_threshold is not None:
            pulumi.set(__self__, "loss_correct_fec_threshold", loss_correct_fec_threshold)
        if loss_correct_type is not None:
            pulumi.set(__self__, "loss_correct_type", loss_correct_type)
        if nat_bypass is not None:
            pulumi.set(__self__, "nat_bypass", nat_bypass)
        if nat_dia_interfaces is not None:
            pulumi.set(__self__, "nat_dia_interfaces", nat_dia_interfaces)
        if nat_dia_pools is not None:
            pulumi.set(__self__, "nat_dia_pools", nat_dia_pools)
        if nat_fallback is not None:
            pulumi.set(__self__, "nat_fallback", nat_fallback)
        if nat_pool is not None:
            pulumi.set(__self__, "nat_pool", nat_pool)
        if nat_vpn is not None:
            pulumi.set(__self__, "nat_vpn", nat_vpn)
        if redirect_dns_field is not None:
            pulumi.set(__self__, "redirect_dns_field", redirect_dns_field)
        if redirect_dns_value is not None:
            pulumi.set(__self__, "redirect_dns_value", redirect_dns_value)
        if secure_internet_gateway is not None:
            pulumi.set(__self__, "secure_internet_gateway", secure_internet_gateway)
        if set_parameters is not None:
            pulumi.set(__self__, "set_parameters", set_parameters)
        if sla_classes is not None:
            pulumi.set(__self__, "sla_classes", sla_classes)

    @_builtins.property
    @pulumi.getter(name="backupSlaPreferredColors")
    def backup_sla_preferred_colors(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]:
        """
        Backup SLA perferred color
        """
        return pulumi.get(self, "backup_sla_preferred_colors")

    @backup_sla_preferred_colors.setter
    def backup_sla_preferred_colors(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "backup_sla_preferred_colors", value)

    @_builtins.property
    @pulumi.getter(name="cloudProbe")
    def cloud_probe(self) -> Optional[pulumi.Input[_builtins.bool]]:
        return pulumi.get(self, "cloud_probe")

    @cloud_probe.setter
    def cloud_probe(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "cloud_probe", value)

    @_builtins.property
    @pulumi.getter(name="cloudSaas")
    def cloud_saas(self) -> Optional[pulumi.Input[_builtins.bool]]:
        return pulumi.get(self, "cloud_saas")

    @cloud_saas.setter
    def cloud_saas(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "cloud_saas", value)

    @_builtins.property
    @pulumi.getter
    def count(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "count")

    @count.setter
    def count(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "count", value)

    @_builtins.property
    @pulumi.getter(name="fallbackToRouting")
    def fallback_to_routing(self) -> Optional[pulumi.Input[_builtins.bool]]:
        return pulumi.get(self, "fallback_to_routing")

    @fallback_to_routing.setter
    def fallback_to_routing(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "fallback_to_routing", value)

    @_builtins.property
    @pulumi.getter
    def log(self) -> Optional[pulumi.Input[_builtins.bool]]:
        return pulumi.get(self, "log")

    @log.setter
    def log(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "log", value)

    @_builtins.property
    @pulumi.getter(name="lossCorrectFecThreshold")
    def loss_correct_fec_threshold(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        - Range: `1`-`5`
        """
        return pulumi.get(self, "loss_correct_fec_threshold")

    @loss_correct_fec_threshold.setter
    def loss_correct_fec_threshold(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "loss_correct_fec_threshold", value)

    @_builtins.property
    @pulumi.getter(name="lossCorrectType")
    def loss_correct_type(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        - Choices: `fecAdaptive`, `fecAlways`, `packetDuplication`
        """
        return pulumi.get(self, "loss_correct_type")

    @loss_correct_type.setter
    def loss_correct_type(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "loss_correct_type", value)

    @_builtins.property
    @pulumi.getter(name="natBypass")
    def nat_bypass(self) -> Optional[pulumi.Input[_builtins.bool]]:
        return pulumi.get(self, "nat_bypass")

    @nat_bypass.setter
    def nat_bypass(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "nat_bypass", value)

    @_builtins.property
    @pulumi.getter(name="natDiaInterfaces")
    def nat_dia_interfaces(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]:
        return pulumi.get(self, "nat_dia_interfaces")

    @nat_dia_interfaces.setter
    def nat_dia_interfaces(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "nat_dia_interfaces", value)

    @_builtins.property
    @pulumi.getter(name="natDiaPools")
    def nat_dia_pools(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.int]]]]:
        return pulumi.get(self, "nat_dia_pools")

    @nat_dia_pools.setter
    def nat_dia_pools(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.int]]]]):
        pulumi.set(self, "nat_dia_pools", value)

    @_builtins.property
    @pulumi.getter(name="natFallback")
    def nat_fallback(self) -> Optional[pulumi.Input[_builtins.bool]]:
        return pulumi.get(self, "nat_fallback")

    @nat_fallback.setter
    def nat_fallback(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "nat_fallback", value)

    @_builtins.property
    @pulumi.getter(name="natPool")
    def nat_pool(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        - Range: `1`-`31`
        """
        return pulumi.get(self, "nat_pool")

    @nat_pool.setter
    def nat_pool(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "nat_pool", value)

    @_builtins.property
    @pulumi.getter(name="natVpn")
    def nat_vpn(self) -> Optional[pulumi.Input[_builtins.bool]]:
        return pulumi.get(self, "nat_vpn")

    @nat_vpn.setter
    def nat_vpn(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "nat_vpn", value)

    @_builtins.property
    @pulumi.getter(name="redirectDnsField")
    def redirect_dns_field(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        - Choices: `ipAddress`, `redirectDns`
        """
        return pulumi.get(self, "redirect_dns_field")

    @redirect_dns_field.setter
    def redirect_dns_field(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "redirect_dns_field", value)

    @_builtins.property
    @pulumi.getter(name="redirectDnsValue")
    def redirect_dns_value(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "redirect_dns_value")

    @redirect_dns_value.setter
    def redirect_dns_value(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "redirect_dns_value", value)

    @_builtins.property
    @pulumi.getter(name="secureInternetGateway")
    def secure_internet_gateway(self) -> Optional[pulumi.Input[_builtins.bool]]:
        return pulumi.get(self, "secure_internet_gateway")

    @secure_internet_gateway.setter
    def secure_internet_gateway(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "secure_internet_gateway", value)

    @_builtins.property
    @pulumi.getter(name="setParameters")
    def set_parameters(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ApplicationPriorityTrafficPolicyPolicySequenceActionSetParameterArgs']]]]:
        return pulumi.get(self, "set_parameters")

    @set_parameters.setter
    def set_parameters(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ApplicationPriorityTrafficPolicyPolicySequenceActionSetParameterArgs']]]]):
        pulumi.set(self, "set_parameters", value)

    @_builtins.property
    @pulumi.getter(name="slaClasses")
    def sla_classes(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ApplicationPriorityTrafficPolicyPolicySequenceActionSlaClassArgs']]]]:
        """
        slaClass
        """
        return pulumi.get(self, "sla_classes")

    @sla_classes.setter
    def sla_classes(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ApplicationPriorityTrafficPolicyPolicySequenceActionSlaClassArgs']]]]):
        pulumi.set(self, "sla_classes", value)


if not MYPY:
    class ApplicationPriorityTrafficPolicyPolicySequenceActionSetParameterArgsDict(TypedDict):
        dscp: NotRequired[pulumi.Input[_builtins.int]]
        """
        - Range: `0`-`63`
        """
        forwarding_class_list_id: NotRequired[pulumi.Input[_builtins.str]]
        local_tloc_list_colors: NotRequired[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]
        local_tloc_list_encapsulation: NotRequired[pulumi.Input[_builtins.str]]
        """
        - Choices: `ipsec`, `gre`
        """
        local_tloc_list_restrict: NotRequired[pulumi.Input[_builtins.str]]
        next_hop_ipv4: NotRequired[pulumi.Input[_builtins.str]]
        next_hop_ipv6: NotRequired[pulumi.Input[_builtins.str]]
        next_hop_loose: NotRequired[pulumi.Input[_builtins.bool]]
        policer_id: NotRequired[pulumi.Input[_builtins.str]]
        preferred_color_group_id: NotRequired[pulumi.Input[_builtins.str]]
        preferred_remote_color_ids: NotRequired[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]
        preferred_remote_color_restrict: NotRequired[pulumi.Input[_builtins.str]]
        service_chain_fallback_to_routing: NotRequired[pulumi.Input[_builtins.bool]]
        service_chain_local: NotRequired[pulumi.Input[_builtins.bool]]
        service_chain_tloc_colors: NotRequired[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]
        service_chain_tloc_encapsulation: NotRequired[pulumi.Input[_builtins.str]]
        """
        - Choices: `ipsec`, `gre`
        """
        service_chain_tloc_ip: NotRequired[pulumi.Input[_builtins.str]]
        service_chain_tloc_list_id: NotRequired[pulumi.Input[_builtins.str]]
        service_chain_type: NotRequired[pulumi.Input[_builtins.str]]
        """
        - Choices: `SC1`, `SC2`, `SC4`, `SC5`, `SC6`, `SC7`, `SC8`, `SC9`, `SC10`, `SC11`, `SC12`, `SC13`, `SC14`, `SC15`, `SC16`
        """
        service_chain_vpn: NotRequired[pulumi.Input[_builtins.int]]
        """
        - Range: `0`-`65530`
        """
        service_tloc_colors: NotRequired[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]
        service_tloc_encapsulation: NotRequired[pulumi.Input[_builtins.str]]
        """
        - Choices: `ipsec`, `gre`
        """
        service_tloc_ip: NotRequired[pulumi.Input[_builtins.str]]
        service_tloc_list_id: NotRequired[pulumi.Input[_builtins.str]]
        service_type: NotRequired[pulumi.Input[_builtins.str]]
        """
        - Choices: `FW`, `IDS`, `IDP`, `netsvc1`, `netsvc2`, `netsvc3`, `netsvc4`, `appqoe`
        """
        service_vpn: NotRequired[pulumi.Input[_builtins.str]]
        tloc_colors: NotRequired[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]
        tloc_encapsulation: NotRequired[pulumi.Input[_builtins.str]]
        """
        - Choices: `ipsec`, `gre`
        """
        tloc_ip: NotRequired[pulumi.Input[_builtins.str]]
        tloc_list_id: NotRequired[pulumi.Input[_builtins.str]]
        vpn: NotRequired[pulumi.Input[_builtins.str]]
elif False:
    ApplicationPriorityTrafficPolicyPolicySequenceActionSetParameterArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ApplicationPriorityTrafficPolicyPolicySequenceActionSetParameterArgs:
    def __init__(__self__, *,
                 dscp: Optional[pulumi.Input[_builtins.int]] = None,
                 forwarding_class_list_id: Optional[pulumi.Input[_builtins.str]] = None,
                 local_tloc_list_colors: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 local_tloc_list_encapsulation: Optional[pulumi.Input[_builtins.str]] = None,
                 local_tloc_list_restrict: Optional[pulumi.Input[_builtins.str]] = None,
                 next_hop_ipv4: Optional[pulumi.Input[_builtins.str]] = None,
                 next_hop_ipv6: Optional[pulumi.Input[_builtins.str]] = None,
                 next_hop_loose: Optional[pulumi.Input[_builtins.bool]] = None,
                 policer_id: Optional[pulumi.Input[_builtins.str]] = None,
                 preferred_color_group_id: Optional[pulumi.Input[_builtins.str]] = None,
                 preferred_remote_color_ids: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 preferred_remote_color_restrict: Optional[pulumi.Input[_builtins.str]] = None,
                 service_chain_fallback_to_routing: Optional[pulumi.Input[_builtins.bool]] = None,
                 service_chain_local: Optional[pulumi.Input[_builtins.bool]] = None,
                 service_chain_tloc_colors: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 service_chain_tloc_encapsulation: Optional[pulumi.Input[_builtins.str]] = None,
                 service_chain_tloc_ip: Optional[pulumi.Input[_builtins.str]] = None,
                 service_chain_tloc_list_id: Optional[pulumi.Input[_builtins.str]] = None,
                 service_chain_type: Optional[pulumi.Input[_builtins.str]] = None,
                 service_chain_vpn: Optional[pulumi.Input[_builtins.int]] = None,
                 service_tloc_colors: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 service_tloc_encapsulation: Optional[pulumi.Input[_builtins.str]] = None,
                 service_tloc_ip: Optional[pulumi.Input[_builtins.str]] = None,
                 service_tloc_list_id: Optional[pulumi.Input[_builtins.str]] = None,
                 service_type: Optional[pulumi.Input[_builtins.str]] = None,
                 service_vpn: Optional[pulumi.Input[_builtins.str]] = None,
                 tloc_colors: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 tloc_encapsulation: Optional[pulumi.Input[_builtins.str]] = None,
                 tloc_ip: Optional[pulumi.Input[_builtins.str]] = None,
                 tloc_list_id: Optional[pulumi.Input[_builtins.str]] = None,
                 vpn: Optional[pulumi.Input[_builtins.str]] = None):
        """
        :param pulumi.Input[_builtins.int] dscp: - Range: `0`-`63`
        :param pulumi.Input[_builtins.str] local_tloc_list_encapsulation: - Choices: `ipsec`, `gre`
        :param pulumi.Input[_builtins.str] service_chain_tloc_encapsulation: - Choices: `ipsec`, `gre`
        :param pulumi.Input[_builtins.str] service_chain_type: - Choices: `SC1`, `SC2`, `SC4`, `SC5`, `SC6`, `SC7`, `SC8`, `SC9`, `SC10`, `SC11`, `SC12`, `SC13`, `SC14`, `SC15`, `SC16`
        :param pulumi.Input[_builtins.int] service_chain_vpn: - Range: `0`-`65530`
        :param pulumi.Input[_builtins.str] service_tloc_encapsulation: - Choices: `ipsec`, `gre`
        :param pulumi.Input[_builtins.str] service_type: - Choices: `FW`, `IDS`, `IDP`, `netsvc1`, `netsvc2`, `netsvc3`, `netsvc4`, `appqoe`
        :param pulumi.Input[_builtins.str] tloc_encapsulation: - Choices: `ipsec`, `gre`
        """
        if dscp is not None:
            pulumi.set(__self__, "dscp", dscp)
        if forwarding_class_list_id is not None:
            pulumi.set(__self__, "forwarding_class_list_id", forwarding_class_list_id)
        if local_tloc_list_colors is not None:
            pulumi.set(__self__, "local_tloc_list_colors", local_tloc_list_colors)
        if local_tloc_list_encapsulation is not None:
            pulumi.set(__self__, "local_tloc_list_encapsulation", local_tloc_list_encapsulation)
        if local_tloc_list_restrict is not None:
            pulumi.set(__self__, "local_tloc_list_restrict", local_tloc_list_restrict)
        if next_hop_ipv4 is not None:
            pulumi.set(__self__, "next_hop_ipv4", next_hop_ipv4)
        if next_hop_ipv6 is not None:
            pulumi.set(__self__, "next_hop_ipv6", next_hop_ipv6)
        if next_hop_loose is not None:
            pulumi.set(__self__, "next_hop_loose", next_hop_loose)
        if policer_id is not None:
            pulumi.set(__self__, "policer_id", policer_id)
        if preferred_color_group_id is not None:
            pulumi.set(__self__, "preferred_color_group_id", preferred_color_group_id)
        if preferred_remote_color_ids is not None:
            pulumi.set(__self__, "preferred_remote_color_ids", preferred_remote_color_ids)
        if preferred_remote_color_restrict is not None:
            pulumi.set(__self__, "preferred_remote_color_restrict", preferred_remote_color_restrict)
        if service_chain_fallback_to_routing is not None:
            pulumi.set(__self__, "service_chain_fallback_to_routing", service_chain_fallback_to_routing)
        if service_chain_local is not None:
            pulumi.set(__self__, "service_chain_local", service_chain_local)
        if service_chain_tloc_colors is not None:
            pulumi.set(__self__, "service_chain_tloc_colors", service_chain_tloc_colors)
        if service_chain_tloc_encapsulation is not None:
            pulumi.set(__self__, "service_chain_tloc_encapsulation", service_chain_tloc_encapsulation)
        if service_chain_tloc_ip is not None:
            pulumi.set(__self__, "service_chain_tloc_ip", service_chain_tloc_ip)
        if service_chain_tloc_list_id is not None:
            pulumi.set(__self__, "service_chain_tloc_list_id", service_chain_tloc_list_id)
        if service_chain_type is not None:
            pulumi.set(__self__, "service_chain_type", service_chain_type)
        if service_chain_vpn is not None:
            pulumi.set(__self__, "service_chain_vpn", service_chain_vpn)
        if service_tloc_colors is not None:
            pulumi.set(__self__, "service_tloc_colors", service_tloc_colors)
        if service_tloc_encapsulation is not None:
            pulumi.set(__self__, "service_tloc_encapsulation", service_tloc_encapsulation)
        if service_tloc_ip is not None:
            pulumi.set(__self__, "service_tloc_ip", service_tloc_ip)
        if service_tloc_list_id is not None:
            pulumi.set(__self__, "service_tloc_list_id", service_tloc_list_id)
        if service_type is not None:
            pulumi.set(__self__, "service_type", service_type)
        if service_vpn is not None:
            pulumi.set(__self__, "service_vpn", service_vpn)
        if tloc_colors is not None:
            pulumi.set(__self__, "tloc_colors", tloc_colors)
        if tloc_encapsulation is not None:
            pulumi.set(__self__, "tloc_encapsulation", tloc_encapsulation)
        if tloc_ip is not None:
            pulumi.set(__self__, "tloc_ip", tloc_ip)
        if tloc_list_id is not None:
            pulumi.set(__self__, "tloc_list_id", tloc_list_id)
        if vpn is not None:
            pulumi.set(__self__, "vpn", vpn)

    @_builtins.property
    @pulumi.getter
    def dscp(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        - Range: `0`-`63`
        """
        return pulumi.get(self, "dscp")

    @dscp.setter
    def dscp(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "dscp", value)

    @_builtins.property
    @pulumi.getter(name="forwardingClassListId")
    def forwarding_class_list_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "forwarding_class_list_id")

    @forwarding_class_list_id.setter
    def forwarding_class_list_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "forwarding_class_list_id", value)

    @_builtins.property
    @pulumi.getter(name="localTlocListColors")
    def local_tloc_list_colors(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]:
        return pulumi.get(self, "local_tloc_list_colors")

    @local_tloc_list_colors.setter
    def local_tloc_list_colors(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "local_tloc_list_colors", value)

    @_builtins.property
    @pulumi.getter(name="localTlocListEncapsulation")
    def local_tloc_list_encapsulation(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        - Choices: `ipsec`, `gre`
        """
        return pulumi.get(self, "local_tloc_list_encapsulation")

    @local_tloc_list_encapsulation.setter
    def local_tloc_list_encapsulation(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "local_tloc_list_encapsulation", value)

    @_builtins.property
    @pulumi.getter(name="localTlocListRestrict")
    def local_tloc_list_restrict(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "local_tloc_list_restrict")

    @local_tloc_list_restrict.setter
    def local_tloc_list_restrict(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "local_tloc_list_restrict", value)

    @_builtins.property
    @pulumi.getter(name="nextHopIpv4")
    def next_hop_ipv4(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "next_hop_ipv4")

    @next_hop_ipv4.setter
    def next_hop_ipv4(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "next_hop_ipv4", value)

    @_builtins.property
    @pulumi.getter(name="nextHopIpv6")
    def next_hop_ipv6(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "next_hop_ipv6")

    @next_hop_ipv6.setter
    def next_hop_ipv6(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "next_hop_ipv6", value)

    @_builtins.property
    @pulumi.getter(name="nextHopLoose")
    def next_hop_loose(self) -> Optional[pulumi.Input[_builtins.bool]]:
        return pulumi.get(self, "next_hop_loose")

    @next_hop_loose.setter
    def next_hop_loose(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "next_hop_loose", value)

    @_builtins.property
    @pulumi.getter(name="policerId")
    def policer_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "policer_id")

    @policer_id.setter
    def policer_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "policer_id", value)

    @_builtins.property
    @pulumi.getter(name="preferredColorGroupId")
    def preferred_color_group_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "preferred_color_group_id")

    @preferred_color_group_id.setter
    def preferred_color_group_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "preferred_color_group_id", value)

    @_builtins.property
    @pulumi.getter(name="preferredRemoteColorIds")
    def preferred_remote_color_ids(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]:
        return pulumi.get(self, "preferred_remote_color_ids")

    @preferred_remote_color_ids.setter
    def preferred_remote_color_ids(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "preferred_remote_color_ids", value)

    @_builtins.property
    @pulumi.getter(name="preferredRemoteColorRestrict")
    def preferred_remote_color_restrict(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "preferred_remote_color_restrict")

    @preferred_remote_color_restrict.setter
    def preferred_remote_color_restrict(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "preferred_remote_color_restrict", value)

    @_builtins.property
    @pulumi.getter(name="serviceChainFallbackToRouting")
    def service_chain_fallback_to_routing(self) -> Optional[pulumi.Input[_builtins.bool]]:
        return pulumi.get(self, "service_chain_fallback_to_routing")

    @service_chain_fallback_to_routing.setter
    def service_chain_fallback_to_routing(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "service_chain_fallback_to_routing", value)

    @_builtins.property
    @pulumi.getter(name="serviceChainLocal")
    def service_chain_local(self) -> Optional[pulumi.Input[_builtins.bool]]:
        return pulumi.get(self, "service_chain_local")

    @service_chain_local.setter
    def service_chain_local(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "service_chain_local", value)

    @_builtins.property
    @pulumi.getter(name="serviceChainTlocColors")
    def service_chain_tloc_colors(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]:
        return pulumi.get(self, "service_chain_tloc_colors")

    @service_chain_tloc_colors.setter
    def service_chain_tloc_colors(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "service_chain_tloc_colors", value)

    @_builtins.property
    @pulumi.getter(name="serviceChainTlocEncapsulation")
    def service_chain_tloc_encapsulation(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        - Choices: `ipsec`, `gre`
        """
        return pulumi.get(self, "service_chain_tloc_encapsulation")

    @service_chain_tloc_encapsulation.setter
    def service_chain_tloc_encapsulation(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "service_chain_tloc_encapsulation", value)

    @_builtins.property
    @pulumi.getter(name="serviceChainTlocIp")
    def service_chain_tloc_ip(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "service_chain_tloc_ip")

    @service_chain_tloc_ip.setter
    def service_chain_tloc_ip(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "service_chain_tloc_ip", value)

    @_builtins.property
    @pulumi.getter(name="serviceChainTlocListId")
    def service_chain_tloc_list_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "service_chain_tloc_list_id")

    @service_chain_tloc_list_id.setter
    def service_chain_tloc_list_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "service_chain_tloc_list_id", value)

    @_builtins.property
    @pulumi.getter(name="serviceChainType")
    def service_chain_type(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        - Choices: `SC1`, `SC2`, `SC4`, `SC5`, `SC6`, `SC7`, `SC8`, `SC9`, `SC10`, `SC11`, `SC12`, `SC13`, `SC14`, `SC15`, `SC16`
        """
        return pulumi.get(self, "service_chain_type")

    @service_chain_type.setter
    def service_chain_type(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "service_chain_type", value)

    @_builtins.property
    @pulumi.getter(name="serviceChainVpn")
    def service_chain_vpn(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        - Range: `0`-`65530`
        """
        return pulumi.get(self, "service_chain_vpn")

    @service_chain_vpn.setter
    def service_chain_vpn(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "service_chain_vpn", value)

    @_builtins.property
    @pulumi.getter(name="serviceTlocColors")
    def service_tloc_colors(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]:
        return pulumi.get(self, "service_tloc_colors")

    @service_tloc_colors.setter
    def service_tloc_colors(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "service_tloc_colors", value)

    @_builtins.property
    @pulumi.getter(name="serviceTlocEncapsulation")
    def service_tloc_encapsulation(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        - Choices: `ipsec`, `gre`
        """
        return pulumi.get(self, "service_tloc_encapsulation")

    @service_tloc_encapsulation.setter
    def service_tloc_encapsulation(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "service_tloc_encapsulation", value)

    @_builtins.property
    @pulumi.getter(name="serviceTlocIp")
    def service_tloc_ip(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "service_tloc_ip")

    @service_tloc_ip.setter
    def service_tloc_ip(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "service_tloc_ip", value)

    @_builtins.property
    @pulumi.getter(name="serviceTlocListId")
    def service_tloc_list_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "service_tloc_list_id")

    @service_tloc_list_id.setter
    def service_tloc_list_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "service_tloc_list_id", value)

    @_builtins.property
    @pulumi.getter(name="serviceType")
    def service_type(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        - Choices: `FW`, `IDS`, `IDP`, `netsvc1`, `netsvc2`, `netsvc3`, `netsvc4`, `appqoe`
        """
        return pulumi.get(self, "service_type")

    @service_type.setter
    def service_type(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "service_type", value)

    @_builtins.property
    @pulumi.getter(name="serviceVpn")
    def service_vpn(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "service_vpn")

    @service_vpn.setter
    def service_vpn(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "service_vpn", value)

    @_builtins.property
    @pulumi.getter(name="tlocColors")
    def tloc_colors(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]:
        return pulumi.get(self, "tloc_colors")

    @tloc_colors.setter
    def tloc_colors(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "tloc_colors", value)

    @_builtins.property
    @pulumi.getter(name="tlocEncapsulation")
    def tloc_encapsulation(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        - Choices: `ipsec`, `gre`
        """
        return pulumi.get(self, "tloc_encapsulation")

    @tloc_encapsulation.setter
    def tloc_encapsulation(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "tloc_encapsulation", value)

    @_builtins.property
    @pulumi.getter(name="tlocIp")
    def tloc_ip(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "tloc_ip")

    @tloc_ip.setter
    def tloc_ip(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "tloc_ip", value)

    @_builtins.property
    @pulumi.getter(name="tlocListId")
    def tloc_list_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "tloc_list_id")

    @tloc_list_id.setter
    def tloc_list_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "tloc_list_id", value)

    @_builtins.property
    @pulumi.getter
    def vpn(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "vpn")

    @vpn.setter
    def vpn(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "vpn", value)


if not MYPY:
    class ApplicationPriorityTrafficPolicyPolicySequenceActionSlaClassArgsDict(TypedDict):
        fallback_to_best_path: NotRequired[pulumi.Input[_builtins.bool]]
        preferred_color_group_list_id: NotRequired[pulumi.Input[_builtins.str]]
        preferred_colors: NotRequired[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]
        preferred_remote_colors: NotRequired[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]
        remote_color_restrict: NotRequired[pulumi.Input[_builtins.bool]]
        sla_class_list_id: NotRequired[pulumi.Input[_builtins.str]]
        strict: NotRequired[pulumi.Input[_builtins.bool]]
elif False:
    ApplicationPriorityTrafficPolicyPolicySequenceActionSlaClassArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ApplicationPriorityTrafficPolicyPolicySequenceActionSlaClassArgs:
    def __init__(__self__, *,
                 fallback_to_best_path: Optional[pulumi.Input[_builtins.bool]] = None,
                 preferred_color_group_list_id: Optional[pulumi.Input[_builtins.str]] = None,
                 preferred_colors: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 preferred_remote_colors: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 remote_color_restrict: Optional[pulumi.Input[_builtins.bool]] = None,
                 sla_class_list_id: Optional[pulumi.Input[_builtins.str]] = None,
                 strict: Optional[pulumi.Input[_builtins.bool]] = None):
        if fallback_to_best_path is not None:
            pulumi.set(__self__, "fallback_to_best_path", fallback_to_best_path)
        if preferred_color_group_list_id is not None:
            pulumi.set(__self__, "preferred_color_group_list_id", preferred_color_group_list_id)
        if preferred_colors is not None:
            pulumi.set(__self__, "preferred_colors", preferred_colors)
        if preferred_remote_colors is not None:
            pulumi.set(__self__, "preferred_remote_colors", preferred_remote_colors)
        if remote_color_restrict is not None:
            pulumi.set(__self__, "remote_color_restrict", remote_color_restrict)
        if sla_class_list_id is not None:
            pulumi.set(__self__, "sla_class_list_id", sla_class_list_id)
        if strict is not None:
            pulumi.set(__self__, "strict", strict)

    @_builtins.property
    @pulumi.getter(name="fallbackToBestPath")
    def fallback_to_best_path(self) -> Optional[pulumi.Input[_builtins.bool]]:
        return pulumi.get(self, "fallback_to_best_path")

    @fallback_to_best_path.setter
    def fallback_to_best_path(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "fallback_to_best_path", value)

    @_builtins.property
    @pulumi.getter(name="preferredColorGroupListId")
    def preferred_color_group_list_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "preferred_color_group_list_id")

    @preferred_color_group_list_id.setter
    def preferred_color_group_list_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "preferred_color_group_list_id", value)

    @_builtins.property
    @pulumi.getter(name="preferredColors")
    def preferred_colors(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]:
        return pulumi.get(self, "preferred_colors")

    @preferred_colors.setter
    def preferred_colors(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "preferred_colors", value)

    @_builtins.property
    @pulumi.getter(name="preferredRemoteColors")
    def preferred_remote_colors(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]:
        return pulumi.get(self, "preferred_remote_colors")

    @preferred_remote_colors.setter
    def preferred_remote_colors(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "preferred_remote_colors", value)

    @_builtins.property
    @pulumi.getter(name="remoteColorRestrict")
    def remote_color_restrict(self) -> Optional[pulumi.Input[_builtins.bool]]:
        return pulumi.get(self, "remote_color_restrict")

    @remote_color_restrict.setter
    def remote_color_restrict(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "remote_color_restrict", value)

    @_builtins.property
    @pulumi.getter(name="slaClassListId")
    def sla_class_list_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "sla_class_list_id")

    @sla_class_list_id.setter
    def sla_class_list_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "sla_class_list_id", value)

    @_builtins.property
    @pulumi.getter
    def strict(self) -> Optional[pulumi.Input[_builtins.bool]]:
        return pulumi.get(self, "strict")

    @strict.setter
    def strict(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "strict", value)


if not MYPY:
    class ApplicationPriorityTrafficPolicyPolicySequenceMatchEntryArgsDict(TypedDict):
        application_list_id: NotRequired[pulumi.Input[_builtins.str]]
        destination_data_ipv4_prefix_list_id: NotRequired[pulumi.Input[_builtins.str]]
        destination_data_ipv6_prefix_list_id: NotRequired[pulumi.Input[_builtins.str]]
        destination_ipv4_prefix: NotRequired[pulumi.Input[_builtins.str]]
        """
        Destination Data IP Prefix
        """
        destination_ipv6_prefix: NotRequired[pulumi.Input[_builtins.str]]
        """
        Destination Data IP Prefix
        """
        destination_ports: NotRequired[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]
        """
        Destination Port (0-65535) range or individual number separated by space
        """
        destination_region: NotRequired[pulumi.Input[_builtins.str]]
        """
        Destination Region
          - Choices: `primary-region`, `secondary-region`, `other-region`
        """
        dns: NotRequired[pulumi.Input[_builtins.str]]
        """
        Dns
          - Choices: `request`, `response`
        """
        dns_application_list_id: NotRequired[pulumi.Input[_builtins.str]]
        dscp: NotRequired[pulumi.Input[_builtins.int]]
        """
        DSCP number
          - Range: `0`-`63`
        """
        icmp6_messages: NotRequired[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]
        """
        ICMP6 Message
        """
        icmp_messages: NotRequired[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]
        """
        ICMP Message
        """
        packet_length: NotRequired[pulumi.Input[_builtins.str]]
        """
        Packet Length
        """
        protocols: NotRequired[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]
        """
        protocol (0-255) range or individual number separated by space
        """
        saas_application_list_id: NotRequired[pulumi.Input[_builtins.str]]
        service_areas: NotRequired[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]
        """
        M365 Service Area
        """
        source_data_ipv4_prefx_list_id: NotRequired[pulumi.Input[_builtins.str]]
        source_data_ipv6_prefx_list_id: NotRequired[pulumi.Input[_builtins.str]]
        source_ipv4_prefix: NotRequired[pulumi.Input[_builtins.str]]
        """
        Source Data IP Prefix
        """
        source_ipv6_prefix: NotRequired[pulumi.Input[_builtins.str]]
        """
        Source Data IP Prefix
        """
        source_ports: NotRequired[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]
        """
        Source Port (0-65535) range or individual number separated by space
        """
        tcp: NotRequired[pulumi.Input[_builtins.str]]
        """
        TCP States
          - Choices: `syn`
        """
        traffic_category: NotRequired[pulumi.Input[_builtins.str]]
        """
        M365 Traffic Category
          - Choices: `optimize-allow`, `optimize`, `all`
        """
        traffic_class: NotRequired[pulumi.Input[_builtins.str]]
        """
        Traffic Class
          - Choices: `gold-voip-telephony`, `gold-broadcast-video`, `gold-real-time-interactive`, `gold-multimedia-conferencing`, `gold-multimedia-streaming`, `gold-network-control`, `gold-signaling`, `gold-ops-admin-mgmt`, `gold-transactional-data`, `gold-bulk-data`, `silver`, `bronze`
        """
        traffic_to: NotRequired[pulumi.Input[_builtins.str]]
        """
        Traffic to
          - Choices: `core`, `service`, `access`
        """
elif False:
    ApplicationPriorityTrafficPolicyPolicySequenceMatchEntryArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ApplicationPriorityTrafficPolicyPolicySequenceMatchEntryArgs:
    def __init__(__self__, *,
                 application_list_id: Optional[pulumi.Input[_builtins.str]] = None,
                 destination_data_ipv4_prefix_list_id: Optional[pulumi.Input[_builtins.str]] = None,
                 destination_data_ipv6_prefix_list_id: Optional[pulumi.Input[_builtins.str]] = None,
                 destination_ipv4_prefix: Optional[pulumi.Input[_builtins.str]] = None,
                 destination_ipv6_prefix: Optional[pulumi.Input[_builtins.str]] = None,
                 destination_ports: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 destination_region: Optional[pulumi.Input[_builtins.str]] = None,
                 dns: Optional[pulumi.Input[_builtins.str]] = None,
                 dns_application_list_id: Optional[pulumi.Input[_builtins.str]] = None,
                 dscp: Optional[pulumi.Input[_builtins.int]] = None,
                 icmp6_messages: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 icmp_messages: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 packet_length: Optional[pulumi.Input[_builtins.str]] = None,
                 protocols: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 saas_application_list_id: Optional[pulumi.Input[_builtins.str]] = None,
                 service_areas: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 source_data_ipv4_prefx_list_id: Optional[pulumi.Input[_builtins.str]] = None,
                 source_data_ipv6_prefx_list_id: Optional[pulumi.Input[_builtins.str]] = None,
                 source_ipv4_prefix: Optional[pulumi.Input[_builtins.str]] = None,
                 source_ipv6_prefix: Optional[pulumi.Input[_builtins.str]] = None,
                 source_ports: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 tcp: Optional[pulumi.Input[_builtins.str]] = None,
                 traffic_category: Optional[pulumi.Input[_builtins.str]] = None,
                 traffic_class: Optional[pulumi.Input[_builtins.str]] = None,
                 traffic_to: Optional[pulumi.Input[_builtins.str]] = None):
        """
        :param pulumi.Input[_builtins.str] destination_ipv4_prefix: Destination Data IP Prefix
        :param pulumi.Input[_builtins.str] destination_ipv6_prefix: Destination Data IP Prefix
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] destination_ports: Destination Port (0-65535) range or individual number separated by space
        :param pulumi.Input[_builtins.str] destination_region: Destination Region
                 - Choices: `primary-region`, `secondary-region`, `other-region`
        :param pulumi.Input[_builtins.str] dns: Dns
                 - Choices: `request`, `response`
        :param pulumi.Input[_builtins.int] dscp: DSCP number
                 - Range: `0`-`63`
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] icmp6_messages: ICMP6 Message
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] icmp_messages: ICMP Message
        :param pulumi.Input[_builtins.str] packet_length: Packet Length
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] protocols: protocol (0-255) range or individual number separated by space
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] service_areas: M365 Service Area
        :param pulumi.Input[_builtins.str] source_ipv4_prefix: Source Data IP Prefix
        :param pulumi.Input[_builtins.str] source_ipv6_prefix: Source Data IP Prefix
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] source_ports: Source Port (0-65535) range or individual number separated by space
        :param pulumi.Input[_builtins.str] tcp: TCP States
                 - Choices: `syn`
        :param pulumi.Input[_builtins.str] traffic_category: M365 Traffic Category
                 - Choices: `optimize-allow`, `optimize`, `all`
        :param pulumi.Input[_builtins.str] traffic_class: Traffic Class
                 - Choices: `gold-voip-telephony`, `gold-broadcast-video`, `gold-real-time-interactive`, `gold-multimedia-conferencing`, `gold-multimedia-streaming`, `gold-network-control`, `gold-signaling`, `gold-ops-admin-mgmt`, `gold-transactional-data`, `gold-bulk-data`, `silver`, `bronze`
        :param pulumi.Input[_builtins.str] traffic_to: Traffic to
                 - Choices: `core`, `service`, `access`
        """
        if application_list_id is not None:
            pulumi.set(__self__, "application_list_id", application_list_id)
        if destination_data_ipv4_prefix_list_id is not None:
            pulumi.set(__self__, "destination_data_ipv4_prefix_list_id", destination_data_ipv4_prefix_list_id)
        if destination_data_ipv6_prefix_list_id is not None:
            pulumi.set(__self__, "destination_data_ipv6_prefix_list_id", destination_data_ipv6_prefix_list_id)
        if destination_ipv4_prefix is not None:
            pulumi.set(__self__, "destination_ipv4_prefix", destination_ipv4_prefix)
        if destination_ipv6_prefix is not None:
            pulumi.set(__self__, "destination_ipv6_prefix", destination_ipv6_prefix)
        if destination_ports is not None:
            pulumi.set(__self__, "destination_ports", destination_ports)
        if destination_region is not None:
            pulumi.set(__self__, "destination_region", destination_region)
        if dns is not None:
            pulumi.set(__self__, "dns", dns)
        if dns_application_list_id is not None:
            pulumi.set(__self__, "dns_application_list_id", dns_application_list_id)
        if dscp is not None:
            pulumi.set(__self__, "dscp", dscp)
        if icmp6_messages is not None:
            pulumi.set(__self__, "icmp6_messages", icmp6_messages)
        if icmp_messages is not None:
            pulumi.set(__self__, "icmp_messages", icmp_messages)
        if packet_length is not None:
            pulumi.set(__self__, "packet_length", packet_length)
        if protocols is not None:
            pulumi.set(__self__, "protocols", protocols)
        if saas_application_list_id is not None:
            pulumi.set(__self__, "saas_application_list_id", saas_application_list_id)
        if service_areas is not None:
            pulumi.set(__self__, "service_areas", service_areas)
        if source_data_ipv4_prefx_list_id is not None:
            pulumi.set(__self__, "source_data_ipv4_prefx_list_id", source_data_ipv4_prefx_list_id)
        if source_data_ipv6_prefx_list_id is not None:
            pulumi.set(__self__, "source_data_ipv6_prefx_list_id", source_data_ipv6_prefx_list_id)
        if source_ipv4_prefix is not None:
            pulumi.set(__self__, "source_ipv4_prefix", source_ipv4_prefix)
        if source_ipv6_prefix is not None:
            pulumi.set(__self__, "source_ipv6_prefix", source_ipv6_prefix)
        if source_ports is not None:
            pulumi.set(__self__, "source_ports", source_ports)
        if tcp is not None:
            pulumi.set(__self__, "tcp", tcp)
        if traffic_category is not None:
            pulumi.set(__self__, "traffic_category", traffic_category)
        if traffic_class is not None:
            pulumi.set(__self__, "traffic_class", traffic_class)
        if traffic_to is not None:
            pulumi.set(__self__, "traffic_to", traffic_to)

    @_builtins.property
    @pulumi.getter(name="applicationListId")
    def application_list_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "application_list_id")

    @application_list_id.setter
    def application_list_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "application_list_id", value)

    @_builtins.property
    @pulumi.getter(name="destinationDataIpv4PrefixListId")
    def destination_data_ipv4_prefix_list_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "destination_data_ipv4_prefix_list_id")

    @destination_data_ipv4_prefix_list_id.setter
    def destination_data_ipv4_prefix_list_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "destination_data_ipv4_prefix_list_id", value)

    @_builtins.property
    @pulumi.getter(name="destinationDataIpv6PrefixListId")
    def destination_data_ipv6_prefix_list_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "destination_data_ipv6_prefix_list_id")

    @destination_data_ipv6_prefix_list_id.setter
    def destination_data_ipv6_prefix_list_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "destination_data_ipv6_prefix_list_id", value)

    @_builtins.property
    @pulumi.getter(name="destinationIpv4Prefix")
    def destination_ipv4_prefix(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Destination Data IP Prefix
        """
        return pulumi.get(self, "destination_ipv4_prefix")

    @destination_ipv4_prefix.setter
    def destination_ipv4_prefix(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "destination_ipv4_prefix", value)

    @_builtins.property
    @pulumi.getter(name="destinationIpv6Prefix")
    def destination_ipv6_prefix(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Destination Data IP Prefix
        """
        return pulumi.get(self, "destination_ipv6_prefix")

    @destination_ipv6_prefix.setter
    def destination_ipv6_prefix(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "destination_ipv6_prefix", value)

    @_builtins.property
    @pulumi.getter(name="destinationPorts")
    def destination_ports(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]:
        """
        Destination Port (0-65535) range or individual number separated by space
        """
        return pulumi.get(self, "destination_ports")

    @destination_ports.setter
    def destination_ports(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "destination_ports", value)

    @_builtins.property
    @pulumi.getter(name="destinationRegion")
    def destination_region(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Destination Region
          - Choices: `primary-region`, `secondary-region`, `other-region`
        """
        return pulumi.get(self, "destination_region")

    @destination_region.setter
    def destination_region(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "destination_region", value)

    @_builtins.property
    @pulumi.getter
    def dns(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Dns
          - Choices: `request`, `response`
        """
        return pulumi.get(self, "dns")

    @dns.setter
    def dns(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "dns", value)

    @_builtins.property
    @pulumi.getter(name="dnsApplicationListId")
    def dns_application_list_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "dns_application_list_id")

    @dns_application_list_id.setter
    def dns_application_list_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "dns_application_list_id", value)

    @_builtins.property
    @pulumi.getter
    def dscp(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        DSCP number
          - Range: `0`-`63`
        """
        return pulumi.get(self, "dscp")

    @dscp.setter
    def dscp(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "dscp", value)

    @_builtins.property
    @pulumi.getter(name="icmp6Messages")
    def icmp6_messages(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]:
        """
        ICMP6 Message
        """
        return pulumi.get(self, "icmp6_messages")

    @icmp6_messages.setter
    def icmp6_messages(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "icmp6_messages", value)

    @_builtins.property
    @pulumi.getter(name="icmpMessages")
    def icmp_messages(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]:
        """
        ICMP Message
        """
        return pulumi.get(self, "icmp_messages")

    @icmp_messages.setter
    def icmp_messages(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "icmp_messages", value)

    @_builtins.property
    @pulumi.getter(name="packetLength")
    def packet_length(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Packet Length
        """
        return pulumi.get(self, "packet_length")

    @packet_length.setter
    def packet_length(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "packet_length", value)

    @_builtins.property
    @pulumi.getter
    def protocols(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]:
        """
        protocol (0-255) range or individual number separated by space
        """
        return pulumi.get(self, "protocols")

    @protocols.setter
    def protocols(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "protocols", value)

    @_builtins.property
    @pulumi.getter(name="saasApplicationListId")
    def saas_application_list_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "saas_application_list_id")

    @saas_application_list_id.setter
    def saas_application_list_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "saas_application_list_id", value)

    @_builtins.property
    @pulumi.getter(name="serviceAreas")
    def service_areas(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]:
        """
        M365 Service Area
        """
        return pulumi.get(self, "service_areas")

    @service_areas.setter
    def service_areas(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "service_areas", value)

    @_builtins.property
    @pulumi.getter(name="sourceDataIpv4PrefxListId")
    def source_data_ipv4_prefx_list_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "source_data_ipv4_prefx_list_id")

    @source_data_ipv4_prefx_list_id.setter
    def source_data_ipv4_prefx_list_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "source_data_ipv4_prefx_list_id", value)

    @_builtins.property
    @pulumi.getter(name="sourceDataIpv6PrefxListId")
    def source_data_ipv6_prefx_list_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "source_data_ipv6_prefx_list_id")

    @source_data_ipv6_prefx_list_id.setter
    def source_data_ipv6_prefx_list_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "source_data_ipv6_prefx_list_id", value)

    @_builtins.property
    @pulumi.getter(name="sourceIpv4Prefix")
    def source_ipv4_prefix(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Source Data IP Prefix
        """
        return pulumi.get(self, "source_ipv4_prefix")

    @source_ipv4_prefix.setter
    def source_ipv4_prefix(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "source_ipv4_prefix", value)

    @_builtins.property
    @pulumi.getter(name="sourceIpv6Prefix")
    def source_ipv6_prefix(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Source Data IP Prefix
        """
        return pulumi.get(self, "source_ipv6_prefix")

    @source_ipv6_prefix.setter
    def source_ipv6_prefix(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "source_ipv6_prefix", value)

    @_builtins.property
    @pulumi.getter(name="sourcePorts")
    def source_ports(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]:
        """
        Source Port (0-65535) range or individual number separated by space
        """
        return pulumi.get(self, "source_ports")

    @source_ports.setter
    def source_ports(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "source_ports", value)

    @_builtins.property
    @pulumi.getter
    def tcp(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        TCP States
          - Choices: `syn`
        """
        return pulumi.get(self, "tcp")

    @tcp.setter
    def tcp(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "tcp", value)

    @_builtins.property
    @pulumi.getter(name="trafficCategory")
    def traffic_category(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        M365 Traffic Category
          - Choices: `optimize-allow`, `optimize`, `all`
        """
        return pulumi.get(self, "traffic_category")

    @traffic_category.setter
    def traffic_category(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "traffic_category", value)

    @_builtins.property
    @pulumi.getter(name="trafficClass")
    def traffic_class(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Traffic Class
          - Choices: `gold-voip-telephony`, `gold-broadcast-video`, `gold-real-time-interactive`, `gold-multimedia-conferencing`, `gold-multimedia-streaming`, `gold-network-control`, `gold-signaling`, `gold-ops-admin-mgmt`, `gold-transactional-data`, `gold-bulk-data`, `silver`, `bronze`
        """
        return pulumi.get(self, "traffic_class")

    @traffic_class.setter
    def traffic_class(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "traffic_class", value)

    @_builtins.property
    @pulumi.getter(name="trafficTo")
    def traffic_to(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Traffic to
          - Choices: `core`, `service`, `access`
        """
        return pulumi.get(self, "traffic_to")

    @traffic_to.setter
    def traffic_to(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "traffic_to", value)


if not MYPY:
    class AsPathListPolicyObjectEntryArgsDict(TypedDict):
        as_path: pulumi.Input[_builtins.str]
        """
        Regular expression to match the BGP AS paths e.g., `^1239_[0-9]*$`
        """
elif False:
    AsPathListPolicyObjectEntryArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class AsPathListPolicyObjectEntryArgs:
    def __init__(__self__, *,
                 as_path: pulumi.Input[_builtins.str]):
        """
        :param pulumi.Input[_builtins.str] as_path: Regular expression to match the BGP AS paths e.g., `^1239_[0-9]*$`
        """
        pulumi.set(__self__, "as_path", as_path)

    @_builtins.property
    @pulumi.getter(name="asPath")
    def as_path(self) -> pulumi.Input[_builtins.str]:
        """
        Regular expression to match the BGP AS paths e.g., `^1239_[0-9]*$`
        """
        return pulumi.get(self, "as_path")

    @as_path.setter
    def as_path(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "as_path", value)


if not MYPY:
    class AttachFeatureDeviceTemplateDeviceArgsDict(TypedDict):
        id: pulumi.Input[_builtins.str]
        """
        Device ID
        """
        variables: pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]
        """
        Device variables
        """
elif False:
    AttachFeatureDeviceTemplateDeviceArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class AttachFeatureDeviceTemplateDeviceArgs:
    def __init__(__self__, *,
                 id: pulumi.Input[_builtins.str],
                 variables: pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]):
        """
        :param pulumi.Input[_builtins.str] id: Device ID
        :param pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]] variables: Device variables
        """
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "variables", variables)

    @_builtins.property
    @pulumi.getter
    def id(self) -> pulumi.Input[_builtins.str]:
        """
        Device ID
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "id", value)

    @_builtins.property
    @pulumi.getter
    def variables(self) -> pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]:
        """
        Device variables
        """
        return pulumi.get(self, "variables")

    @variables.setter
    def variables(self, value: pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]):
        pulumi.set(self, "variables", value)


if not MYPY:
    class BlockUrlListPolicyObjectEntryArgsDict(TypedDict):
        url: NotRequired[pulumi.Input[_builtins.str]]
        """
        URL
        """
elif False:
    BlockUrlListPolicyObjectEntryArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class BlockUrlListPolicyObjectEntryArgs:
    def __init__(__self__, *,
                 url: Optional[pulumi.Input[_builtins.str]] = None):
        """
        :param pulumi.Input[_builtins.str] url: URL
        """
        if url is not None:
            pulumi.set(__self__, "url", url)

    @_builtins.property
    @pulumi.getter
    def url(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        URL
        """
        return pulumi.get(self, "url")

    @url.setter
    def url(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "url", value)


if not MYPY:
    class CedgeAaaFeatureTemplateAccountingRuleArgsDict(TypedDict):
        groups: NotRequired[pulumi.Input[_builtins.str]]
        """
        Comma separated list of groups
        """
        method: NotRequired[pulumi.Input[_builtins.str]]
        """
        Configure Accounting Method
          - Choices: `commands`, `exec`, `network`, `system`
        """
        name: NotRequired[pulumi.Input[_builtins.str]]
        """
        Configure Accounting Rule ID
        """
        optional: NotRequired[pulumi.Input[_builtins.bool]]
        """
        Indicates if list item is considered optional.
        """
        privilege_level: NotRequired[pulumi.Input[_builtins.str]]
        """
        Privilege level when method is commands
          - Choices: `1`, `15`
        """
        start_stop: NotRequired[pulumi.Input[_builtins.bool]]
        """
        Record start and stop without waiting
          - Default value: `true`
        """
        start_stop_variable: NotRequired[pulumi.Input[_builtins.str]]
        """
        Variable name
        """
elif False:
    CedgeAaaFeatureTemplateAccountingRuleArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class CedgeAaaFeatureTemplateAccountingRuleArgs:
    def __init__(__self__, *,
                 groups: Optional[pulumi.Input[_builtins.str]] = None,
                 method: Optional[pulumi.Input[_builtins.str]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 optional: Optional[pulumi.Input[_builtins.bool]] = None,
                 privilege_level: Optional[pulumi.Input[_builtins.str]] = None,
                 start_stop: Optional[pulumi.Input[_builtins.bool]] = None,
                 start_stop_variable: Optional[pulumi.Input[_builtins.str]] = None):
        """
        :param pulumi.Input[_builtins.str] groups: Comma separated list of groups
        :param pulumi.Input[_builtins.str] method: Configure Accounting Method
                 - Choices: `commands`, `exec`, `network`, `system`
        :param pulumi.Input[_builtins.str] name: Configure Accounting Rule ID
        :param pulumi.Input[_builtins.bool] optional: Indicates if list item is considered optional.
        :param pulumi.Input[_builtins.str] privilege_level: Privilege level when method is commands
                 - Choices: `1`, `15`
        :param pulumi.Input[_builtins.bool] start_stop: Record start and stop without waiting
                 - Default value: `true`
        :param pulumi.Input[_builtins.str] start_stop_variable: Variable name
        """
        if groups is not None:
            pulumi.set(__self__, "groups", groups)
        if method is not None:
            pulumi.set(__self__, "method", method)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if optional is not None:
            pulumi.set(__self__, "optional", optional)
        if privilege_level is not None:
            pulumi.set(__self__, "privilege_level", privilege_level)
        if start_stop is not None:
            pulumi.set(__self__, "start_stop", start_stop)
        if start_stop_variable is not None:
            pulumi.set(__self__, "start_stop_variable", start_stop_variable)

    @_builtins.property
    @pulumi.getter
    def groups(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Comma separated list of groups
        """
        return pulumi.get(self, "groups")

    @groups.setter
    def groups(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "groups", value)

    @_builtins.property
    @pulumi.getter
    def method(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Configure Accounting Method
          - Choices: `commands`, `exec`, `network`, `system`
        """
        return pulumi.get(self, "method")

    @method.setter
    def method(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "method", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Configure Accounting Rule ID
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "name", value)

    @_builtins.property
    @pulumi.getter
    def optional(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Indicates if list item is considered optional.
        """
        return pulumi.get(self, "optional")

    @optional.setter
    def optional(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "optional", value)

    @_builtins.property
    @pulumi.getter(name="privilegeLevel")
    def privilege_level(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Privilege level when method is commands
          - Choices: `1`, `15`
        """
        return pulumi.get(self, "privilege_level")

    @privilege_level.setter
    def privilege_level(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "privilege_level", value)

    @_builtins.property
    @pulumi.getter(name="startStop")
    def start_stop(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Record start and stop without waiting
          - Default value: `true`
        """
        return pulumi.get(self, "start_stop")

    @start_stop.setter
    def start_stop(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "start_stop", value)

    @_builtins.property
    @pulumi.getter(name="startStopVariable")
    def start_stop_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "start_stop_variable")

    @start_stop_variable.setter
    def start_stop_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "start_stop_variable", value)


if not MYPY:
    class CedgeAaaFeatureTemplateAuthorizationRuleArgsDict(TypedDict):
        authenticated: NotRequired[pulumi.Input[_builtins.bool]]
        """
        Succeed if user has authenticated
          - Default value: `false`
        """
        groups: NotRequired[pulumi.Input[_builtins.str]]
        """
        Comma separated list of groups
        """
        method: NotRequired[pulumi.Input[_builtins.str]]
        """
        Method
          - Choices: `commands`
        """
        name: NotRequired[pulumi.Input[_builtins.str]]
        """
        Configure Authorization Rule ID
        """
        optional: NotRequired[pulumi.Input[_builtins.bool]]
        """
        Indicates if list item is considered optional.
        """
        privilege_level: NotRequired[pulumi.Input[_builtins.str]]
        """
        Privilege level when method is commands
          - Choices: `1`, `15`
        """
elif False:
    CedgeAaaFeatureTemplateAuthorizationRuleArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class CedgeAaaFeatureTemplateAuthorizationRuleArgs:
    def __init__(__self__, *,
                 authenticated: Optional[pulumi.Input[_builtins.bool]] = None,
                 groups: Optional[pulumi.Input[_builtins.str]] = None,
                 method: Optional[pulumi.Input[_builtins.str]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 optional: Optional[pulumi.Input[_builtins.bool]] = None,
                 privilege_level: Optional[pulumi.Input[_builtins.str]] = None):
        """
        :param pulumi.Input[_builtins.bool] authenticated: Succeed if user has authenticated
                 - Default value: `false`
        :param pulumi.Input[_builtins.str] groups: Comma separated list of groups
        :param pulumi.Input[_builtins.str] method: Method
                 - Choices: `commands`
        :param pulumi.Input[_builtins.str] name: Configure Authorization Rule ID
        :param pulumi.Input[_builtins.bool] optional: Indicates if list item is considered optional.
        :param pulumi.Input[_builtins.str] privilege_level: Privilege level when method is commands
                 - Choices: `1`, `15`
        """
        if authenticated is not None:
            pulumi.set(__self__, "authenticated", authenticated)
        if groups is not None:
            pulumi.set(__self__, "groups", groups)
        if method is not None:
            pulumi.set(__self__, "method", method)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if optional is not None:
            pulumi.set(__self__, "optional", optional)
        if privilege_level is not None:
            pulumi.set(__self__, "privilege_level", privilege_level)

    @_builtins.property
    @pulumi.getter
    def authenticated(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Succeed if user has authenticated
          - Default value: `false`
        """
        return pulumi.get(self, "authenticated")

    @authenticated.setter
    def authenticated(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "authenticated", value)

    @_builtins.property
    @pulumi.getter
    def groups(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Comma separated list of groups
        """
        return pulumi.get(self, "groups")

    @groups.setter
    def groups(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "groups", value)

    @_builtins.property
    @pulumi.getter
    def method(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Method
          - Choices: `commands`
        """
        return pulumi.get(self, "method")

    @method.setter
    def method(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "method", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Configure Authorization Rule ID
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "name", value)

    @_builtins.property
    @pulumi.getter
    def optional(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Indicates if list item is considered optional.
        """
        return pulumi.get(self, "optional")

    @optional.setter
    def optional(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "optional", value)

    @_builtins.property
    @pulumi.getter(name="privilegeLevel")
    def privilege_level(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Privilege level when method is commands
          - Choices: `1`, `15`
        """
        return pulumi.get(self, "privilege_level")

    @privilege_level.setter
    def privilege_level(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "privilege_level", value)


if not MYPY:
    class CedgeAaaFeatureTemplateRadiusClientArgsDict(TypedDict):
        client_ip: NotRequired[pulumi.Input[_builtins.str]]
        """
        Client IP
        """
        client_ip_variable: NotRequired[pulumi.Input[_builtins.str]]
        """
        Variable name
        """
        optional: NotRequired[pulumi.Input[_builtins.bool]]
        """
        Indicates if list item is considered optional.
        """
        vpn_configurations: NotRequired[pulumi.Input[Sequence[pulumi.Input['CedgeAaaFeatureTemplateRadiusClientVpnConfigurationArgsDict']]]]
        """
        VPN configuration
        """
elif False:
    CedgeAaaFeatureTemplateRadiusClientArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class CedgeAaaFeatureTemplateRadiusClientArgs:
    def __init__(__self__, *,
                 client_ip: Optional[pulumi.Input[_builtins.str]] = None,
                 client_ip_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 optional: Optional[pulumi.Input[_builtins.bool]] = None,
                 vpn_configurations: Optional[pulumi.Input[Sequence[pulumi.Input['CedgeAaaFeatureTemplateRadiusClientVpnConfigurationArgs']]]] = None):
        """
        :param pulumi.Input[_builtins.str] client_ip: Client IP
        :param pulumi.Input[_builtins.str] client_ip_variable: Variable name
        :param pulumi.Input[_builtins.bool] optional: Indicates if list item is considered optional.
        :param pulumi.Input[Sequence[pulumi.Input['CedgeAaaFeatureTemplateRadiusClientVpnConfigurationArgs']]] vpn_configurations: VPN configuration
        """
        if client_ip is not None:
            pulumi.set(__self__, "client_ip", client_ip)
        if client_ip_variable is not None:
            pulumi.set(__self__, "client_ip_variable", client_ip_variable)
        if optional is not None:
            pulumi.set(__self__, "optional", optional)
        if vpn_configurations is not None:
            pulumi.set(__self__, "vpn_configurations", vpn_configurations)

    @_builtins.property
    @pulumi.getter(name="clientIp")
    def client_ip(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Client IP
        """
        return pulumi.get(self, "client_ip")

    @client_ip.setter
    def client_ip(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "client_ip", value)

    @_builtins.property
    @pulumi.getter(name="clientIpVariable")
    def client_ip_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "client_ip_variable")

    @client_ip_variable.setter
    def client_ip_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "client_ip_variable", value)

    @_builtins.property
    @pulumi.getter
    def optional(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Indicates if list item is considered optional.
        """
        return pulumi.get(self, "optional")

    @optional.setter
    def optional(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "optional", value)

    @_builtins.property
    @pulumi.getter(name="vpnConfigurations")
    def vpn_configurations(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['CedgeAaaFeatureTemplateRadiusClientVpnConfigurationArgs']]]]:
        """
        VPN configuration
        """
        return pulumi.get(self, "vpn_configurations")

    @vpn_configurations.setter
    def vpn_configurations(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['CedgeAaaFeatureTemplateRadiusClientVpnConfigurationArgs']]]]):
        pulumi.set(self, "vpn_configurations", value)


if not MYPY:
    class CedgeAaaFeatureTemplateRadiusClientVpnConfigurationArgsDict(TypedDict):
        optional: NotRequired[pulumi.Input[_builtins.bool]]
        """
        Indicates if list item is considered optional.
        """
        server_key: NotRequired[pulumi.Input[_builtins.str]]
        """
        Specify a RADIUS client server-key
        """
        server_key_variable: NotRequired[pulumi.Input[_builtins.str]]
        """
        Variable name
        """
        vpn_id: NotRequired[pulumi.Input[_builtins.int]]
        """
        VPN ID
        """
        vpn_id_variable: NotRequired[pulumi.Input[_builtins.str]]
        """
        Variable name
        """
elif False:
    CedgeAaaFeatureTemplateRadiusClientVpnConfigurationArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class CedgeAaaFeatureTemplateRadiusClientVpnConfigurationArgs:
    def __init__(__self__, *,
                 optional: Optional[pulumi.Input[_builtins.bool]] = None,
                 server_key: Optional[pulumi.Input[_builtins.str]] = None,
                 server_key_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 vpn_id: Optional[pulumi.Input[_builtins.int]] = None,
                 vpn_id_variable: Optional[pulumi.Input[_builtins.str]] = None):
        """
        :param pulumi.Input[_builtins.bool] optional: Indicates if list item is considered optional.
        :param pulumi.Input[_builtins.str] server_key: Specify a RADIUS client server-key
        :param pulumi.Input[_builtins.str] server_key_variable: Variable name
        :param pulumi.Input[_builtins.int] vpn_id: VPN ID
        :param pulumi.Input[_builtins.str] vpn_id_variable: Variable name
        """
        if optional is not None:
            pulumi.set(__self__, "optional", optional)
        if server_key is not None:
            pulumi.set(__self__, "server_key", server_key)
        if server_key_variable is not None:
            pulumi.set(__self__, "server_key_variable", server_key_variable)
        if vpn_id is not None:
            pulumi.set(__self__, "vpn_id", vpn_id)
        if vpn_id_variable is not None:
            pulumi.set(__self__, "vpn_id_variable", vpn_id_variable)

    @_builtins.property
    @pulumi.getter
    def optional(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Indicates if list item is considered optional.
        """
        return pulumi.get(self, "optional")

    @optional.setter
    def optional(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "optional", value)

    @_builtins.property
    @pulumi.getter(name="serverKey")
    def server_key(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specify a RADIUS client server-key
        """
        return pulumi.get(self, "server_key")

    @server_key.setter
    def server_key(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "server_key", value)

    @_builtins.property
    @pulumi.getter(name="serverKeyVariable")
    def server_key_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "server_key_variable")

    @server_key_variable.setter
    def server_key_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "server_key_variable", value)

    @_builtins.property
    @pulumi.getter(name="vpnId")
    def vpn_id(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        VPN ID
        """
        return pulumi.get(self, "vpn_id")

    @vpn_id.setter
    def vpn_id(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "vpn_id", value)

    @_builtins.property
    @pulumi.getter(name="vpnIdVariable")
    def vpn_id_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "vpn_id_variable")

    @vpn_id_variable.setter
    def vpn_id_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "vpn_id_variable", value)


if not MYPY:
    class CedgeAaaFeatureTemplateRadiusServerGroupArgsDict(TypedDict):
        group_name: NotRequired[pulumi.Input[_builtins.str]]
        """
        Set Radius server Group Name
        """
        optional: NotRequired[pulumi.Input[_builtins.bool]]
        """
        Indicates if list item is considered optional.
        """
        servers: NotRequired[pulumi.Input[Sequence[pulumi.Input['CedgeAaaFeatureTemplateRadiusServerGroupServerArgsDict']]]]
        """
        Configure the Radius server
        """
        source_interface: NotRequired[pulumi.Input[_builtins.str]]
        """
        Set interface to use to reach Radius server
        """
        source_interface_variable: NotRequired[pulumi.Input[_builtins.str]]
        """
        Variable name
        """
        vpn_id: NotRequired[pulumi.Input[_builtins.int]]
        """
        Set VPN in which Radius server is located
          - Range: `0`-`65530`
          - Default value: `0`
        """
elif False:
    CedgeAaaFeatureTemplateRadiusServerGroupArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class CedgeAaaFeatureTemplateRadiusServerGroupArgs:
    def __init__(__self__, *,
                 group_name: Optional[pulumi.Input[_builtins.str]] = None,
                 optional: Optional[pulumi.Input[_builtins.bool]] = None,
                 servers: Optional[pulumi.Input[Sequence[pulumi.Input['CedgeAaaFeatureTemplateRadiusServerGroupServerArgs']]]] = None,
                 source_interface: Optional[pulumi.Input[_builtins.str]] = None,
                 source_interface_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 vpn_id: Optional[pulumi.Input[_builtins.int]] = None):
        """
        :param pulumi.Input[_builtins.str] group_name: Set Radius server Group Name
        :param pulumi.Input[_builtins.bool] optional: Indicates if list item is considered optional.
        :param pulumi.Input[Sequence[pulumi.Input['CedgeAaaFeatureTemplateRadiusServerGroupServerArgs']]] servers: Configure the Radius server
        :param pulumi.Input[_builtins.str] source_interface: Set interface to use to reach Radius server
        :param pulumi.Input[_builtins.str] source_interface_variable: Variable name
        :param pulumi.Input[_builtins.int] vpn_id: Set VPN in which Radius server is located
                 - Range: `0`-`65530`
                 - Default value: `0`
        """
        if group_name is not None:
            pulumi.set(__self__, "group_name", group_name)
        if optional is not None:
            pulumi.set(__self__, "optional", optional)
        if servers is not None:
            pulumi.set(__self__, "servers", servers)
        if source_interface is not None:
            pulumi.set(__self__, "source_interface", source_interface)
        if source_interface_variable is not None:
            pulumi.set(__self__, "source_interface_variable", source_interface_variable)
        if vpn_id is not None:
            pulumi.set(__self__, "vpn_id", vpn_id)

    @_builtins.property
    @pulumi.getter(name="groupName")
    def group_name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Set Radius server Group Name
        """
        return pulumi.get(self, "group_name")

    @group_name.setter
    def group_name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "group_name", value)

    @_builtins.property
    @pulumi.getter
    def optional(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Indicates if list item is considered optional.
        """
        return pulumi.get(self, "optional")

    @optional.setter
    def optional(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "optional", value)

    @_builtins.property
    @pulumi.getter
    def servers(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['CedgeAaaFeatureTemplateRadiusServerGroupServerArgs']]]]:
        """
        Configure the Radius server
        """
        return pulumi.get(self, "servers")

    @servers.setter
    def servers(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['CedgeAaaFeatureTemplateRadiusServerGroupServerArgs']]]]):
        pulumi.set(self, "servers", value)

    @_builtins.property
    @pulumi.getter(name="sourceInterface")
    def source_interface(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Set interface to use to reach Radius server
        """
        return pulumi.get(self, "source_interface")

    @source_interface.setter
    def source_interface(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "source_interface", value)

    @_builtins.property
    @pulumi.getter(name="sourceInterfaceVariable")
    def source_interface_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "source_interface_variable")

    @source_interface_variable.setter
    def source_interface_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "source_interface_variable", value)

    @_builtins.property
    @pulumi.getter(name="vpnId")
    def vpn_id(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        Set VPN in which Radius server is located
          - Range: `0`-`65530`
          - Default value: `0`
        """
        return pulumi.get(self, "vpn_id")

    @vpn_id.setter
    def vpn_id(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "vpn_id", value)


if not MYPY:
    class CedgeAaaFeatureTemplateRadiusServerGroupServerArgsDict(TypedDict):
        accounting_port: NotRequired[pulumi.Input[_builtins.int]]
        """
        Set Accounting port to use to connect to Radius server
          - Range: `1`-`65534`
          - Default value: `1813`
        """
        accounting_port_variable: NotRequired[pulumi.Input[_builtins.str]]
        """
        Variable name
        """
        address: NotRequired[pulumi.Input[_builtins.str]]
        """
        Set IP address of Radius server
        """
        authentication_port: NotRequired[pulumi.Input[_builtins.int]]
        """
        Set Authentication port to use to connect to Radius server
          - Range: `1`-`65534`
          - Default value: `1812`
        """
        authentication_port_variable: NotRequired[pulumi.Input[_builtins.str]]
        """
        Variable name
        """
        encryption_type: NotRequired[pulumi.Input[_builtins.str]]
        """
        Type of encyption. To be used for type 6
          - Choices: `6`, `7`
        """
        key: NotRequired[pulumi.Input[_builtins.str]]
        """
        Set the Radius server shared key
        """
        key_type: NotRequired[pulumi.Input[_builtins.str]]
        """
        key type
          - Choices: `key`, `pac`
          - Default value: `key`
        """
        key_type_variable: NotRequired[pulumi.Input[_builtins.str]]
        """
        Variable name
        """
        optional: NotRequired[pulumi.Input[_builtins.bool]]
        """
        Indicates if list item is considered optional.
        """
        retransmit: NotRequired[pulumi.Input[_builtins.int]]
        """
        Configure how many times to contact this Radius server
          - Range: `1`-`100`
          - Default value: `3`
        """
        retransmit_variable: NotRequired[pulumi.Input[_builtins.str]]
        """
        Variable name
        """
        secret_key: NotRequired[pulumi.Input[_builtins.str]]
        """
        Set the Radius server shared type 7 encrypted key
        """
        secret_key_variable: NotRequired[pulumi.Input[_builtins.str]]
        """
        Variable name
        """
        timeout: NotRequired[pulumi.Input[_builtins.int]]
        """
        Configure how long to wait for replies from the Radius server
          - Range: `1`-`1000`
          - Default value: `5`
        """
        timeout_variable: NotRequired[pulumi.Input[_builtins.str]]
        """
        Variable name
        """
elif False:
    CedgeAaaFeatureTemplateRadiusServerGroupServerArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class CedgeAaaFeatureTemplateRadiusServerGroupServerArgs:
    def __init__(__self__, *,
                 accounting_port: Optional[pulumi.Input[_builtins.int]] = None,
                 accounting_port_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 address: Optional[pulumi.Input[_builtins.str]] = None,
                 authentication_port: Optional[pulumi.Input[_builtins.int]] = None,
                 authentication_port_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 encryption_type: Optional[pulumi.Input[_builtins.str]] = None,
                 key: Optional[pulumi.Input[_builtins.str]] = None,
                 key_type: Optional[pulumi.Input[_builtins.str]] = None,
                 key_type_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 optional: Optional[pulumi.Input[_builtins.bool]] = None,
                 retransmit: Optional[pulumi.Input[_builtins.int]] = None,
                 retransmit_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 secret_key: Optional[pulumi.Input[_builtins.str]] = None,
                 secret_key_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 timeout: Optional[pulumi.Input[_builtins.int]] = None,
                 timeout_variable: Optional[pulumi.Input[_builtins.str]] = None):
        """
        :param pulumi.Input[_builtins.int] accounting_port: Set Accounting port to use to connect to Radius server
                 - Range: `1`-`65534`
                 - Default value: `1813`
        :param pulumi.Input[_builtins.str] accounting_port_variable: Variable name
        :param pulumi.Input[_builtins.str] address: Set IP address of Radius server
        :param pulumi.Input[_builtins.int] authentication_port: Set Authentication port to use to connect to Radius server
                 - Range: `1`-`65534`
                 - Default value: `1812`
        :param pulumi.Input[_builtins.str] authentication_port_variable: Variable name
        :param pulumi.Input[_builtins.str] encryption_type: Type of encyption. To be used for type 6
                 - Choices: `6`, `7`
        :param pulumi.Input[_builtins.str] key: Set the Radius server shared key
        :param pulumi.Input[_builtins.str] key_type: key type
                 - Choices: `key`, `pac`
                 - Default value: `key`
        :param pulumi.Input[_builtins.str] key_type_variable: Variable name
        :param pulumi.Input[_builtins.bool] optional: Indicates if list item is considered optional.
        :param pulumi.Input[_builtins.int] retransmit: Configure how many times to contact this Radius server
                 - Range: `1`-`100`
                 - Default value: `3`
        :param pulumi.Input[_builtins.str] retransmit_variable: Variable name
        :param pulumi.Input[_builtins.str] secret_key: Set the Radius server shared type 7 encrypted key
        :param pulumi.Input[_builtins.str] secret_key_variable: Variable name
        :param pulumi.Input[_builtins.int] timeout: Configure how long to wait for replies from the Radius server
                 - Range: `1`-`1000`
                 - Default value: `5`
        :param pulumi.Input[_builtins.str] timeout_variable: Variable name
        """
        if accounting_port is not None:
            pulumi.set(__self__, "accounting_port", accounting_port)
        if accounting_port_variable is not None:
            pulumi.set(__self__, "accounting_port_variable", accounting_port_variable)
        if address is not None:
            pulumi.set(__self__, "address", address)
        if authentication_port is not None:
            pulumi.set(__self__, "authentication_port", authentication_port)
        if authentication_port_variable is not None:
            pulumi.set(__self__, "authentication_port_variable", authentication_port_variable)
        if encryption_type is not None:
            pulumi.set(__self__, "encryption_type", encryption_type)
        if key is not None:
            pulumi.set(__self__, "key", key)
        if key_type is not None:
            pulumi.set(__self__, "key_type", key_type)
        if key_type_variable is not None:
            pulumi.set(__self__, "key_type_variable", key_type_variable)
        if optional is not None:
            pulumi.set(__self__, "optional", optional)
        if retransmit is not None:
            pulumi.set(__self__, "retransmit", retransmit)
        if retransmit_variable is not None:
            pulumi.set(__self__, "retransmit_variable", retransmit_variable)
        if secret_key is not None:
            pulumi.set(__self__, "secret_key", secret_key)
        if secret_key_variable is not None:
            pulumi.set(__self__, "secret_key_variable", secret_key_variable)
        if timeout is not None:
            pulumi.set(__self__, "timeout", timeout)
        if timeout_variable is not None:
            pulumi.set(__self__, "timeout_variable", timeout_variable)

    @_builtins.property
    @pulumi.getter(name="accountingPort")
    def accounting_port(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        Set Accounting port to use to connect to Radius server
          - Range: `1`-`65534`
          - Default value: `1813`
        """
        return pulumi.get(self, "accounting_port")

    @accounting_port.setter
    def accounting_port(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "accounting_port", value)

    @_builtins.property
    @pulumi.getter(name="accountingPortVariable")
    def accounting_port_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "accounting_port_variable")

    @accounting_port_variable.setter
    def accounting_port_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "accounting_port_variable", value)

    @_builtins.property
    @pulumi.getter
    def address(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Set IP address of Radius server
        """
        return pulumi.get(self, "address")

    @address.setter
    def address(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "address", value)

    @_builtins.property
    @pulumi.getter(name="authenticationPort")
    def authentication_port(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        Set Authentication port to use to connect to Radius server
          - Range: `1`-`65534`
          - Default value: `1812`
        """
        return pulumi.get(self, "authentication_port")

    @authentication_port.setter
    def authentication_port(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "authentication_port", value)

    @_builtins.property
    @pulumi.getter(name="authenticationPortVariable")
    def authentication_port_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "authentication_port_variable")

    @authentication_port_variable.setter
    def authentication_port_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "authentication_port_variable", value)

    @_builtins.property
    @pulumi.getter(name="encryptionType")
    def encryption_type(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Type of encyption. To be used for type 6
          - Choices: `6`, `7`
        """
        return pulumi.get(self, "encryption_type")

    @encryption_type.setter
    def encryption_type(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "encryption_type", value)

    @_builtins.property
    @pulumi.getter
    def key(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Set the Radius server shared key
        """
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "key", value)

    @_builtins.property
    @pulumi.getter(name="keyType")
    def key_type(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        key type
          - Choices: `key`, `pac`
          - Default value: `key`
        """
        return pulumi.get(self, "key_type")

    @key_type.setter
    def key_type(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "key_type", value)

    @_builtins.property
    @pulumi.getter(name="keyTypeVariable")
    def key_type_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "key_type_variable")

    @key_type_variable.setter
    def key_type_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "key_type_variable", value)

    @_builtins.property
    @pulumi.getter
    def optional(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Indicates if list item is considered optional.
        """
        return pulumi.get(self, "optional")

    @optional.setter
    def optional(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "optional", value)

    @_builtins.property
    @pulumi.getter
    def retransmit(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        Configure how many times to contact this Radius server
          - Range: `1`-`100`
          - Default value: `3`
        """
        return pulumi.get(self, "retransmit")

    @retransmit.setter
    def retransmit(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "retransmit", value)

    @_builtins.property
    @pulumi.getter(name="retransmitVariable")
    def retransmit_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "retransmit_variable")

    @retransmit_variable.setter
    def retransmit_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "retransmit_variable", value)

    @_builtins.property
    @pulumi.getter(name="secretKey")
    def secret_key(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Set the Radius server shared type 7 encrypted key
        """
        return pulumi.get(self, "secret_key")

    @secret_key.setter
    def secret_key(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "secret_key", value)

    @_builtins.property
    @pulumi.getter(name="secretKeyVariable")
    def secret_key_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "secret_key_variable")

    @secret_key_variable.setter
    def secret_key_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "secret_key_variable", value)

    @_builtins.property
    @pulumi.getter
    def timeout(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        Configure how long to wait for replies from the Radius server
          - Range: `1`-`1000`
          - Default value: `5`
        """
        return pulumi.get(self, "timeout")

    @timeout.setter
    def timeout(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "timeout", value)

    @_builtins.property
    @pulumi.getter(name="timeoutVariable")
    def timeout_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "timeout_variable")

    @timeout_variable.setter
    def timeout_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "timeout_variable", value)


if not MYPY:
    class CedgeAaaFeatureTemplateTacacsServerGroupArgsDict(TypedDict):
        group_name: NotRequired[pulumi.Input[_builtins.str]]
        """
        Set TACACS server Group Name
        """
        optional: NotRequired[pulumi.Input[_builtins.bool]]
        """
        Indicates if list item is considered optional.
        """
        servers: NotRequired[pulumi.Input[Sequence[pulumi.Input['CedgeAaaFeatureTemplateTacacsServerGroupServerArgsDict']]]]
        """
        Configure the TACACS server
        """
        source_interface: NotRequired[pulumi.Input[_builtins.str]]
        """
        Set interface to use to reach TACACS server
        """
        source_interface_variable: NotRequired[pulumi.Input[_builtins.str]]
        """
        Variable name
        """
        vpn_id: NotRequired[pulumi.Input[_builtins.int]]
        """
        Set VPN in which TACACS server is located
          - Range: `0`-`65530`
          - Default value: `0`
        """
elif False:
    CedgeAaaFeatureTemplateTacacsServerGroupArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class CedgeAaaFeatureTemplateTacacsServerGroupArgs:
    def __init__(__self__, *,
                 group_name: Optional[pulumi.Input[_builtins.str]] = None,
                 optional: Optional[pulumi.Input[_builtins.bool]] = None,
                 servers: Optional[pulumi.Input[Sequence[pulumi.Input['CedgeAaaFeatureTemplateTacacsServerGroupServerArgs']]]] = None,
                 source_interface: Optional[pulumi.Input[_builtins.str]] = None,
                 source_interface_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 vpn_id: Optional[pulumi.Input[_builtins.int]] = None):
        """
        :param pulumi.Input[_builtins.str] group_name: Set TACACS server Group Name
        :param pulumi.Input[_builtins.bool] optional: Indicates if list item is considered optional.
        :param pulumi.Input[Sequence[pulumi.Input['CedgeAaaFeatureTemplateTacacsServerGroupServerArgs']]] servers: Configure the TACACS server
        :param pulumi.Input[_builtins.str] source_interface: Set interface to use to reach TACACS server
        :param pulumi.Input[_builtins.str] source_interface_variable: Variable name
        :param pulumi.Input[_builtins.int] vpn_id: Set VPN in which TACACS server is located
                 - Range: `0`-`65530`
                 - Default value: `0`
        """
        if group_name is not None:
            pulumi.set(__self__, "group_name", group_name)
        if optional is not None:
            pulumi.set(__self__, "optional", optional)
        if servers is not None:
            pulumi.set(__self__, "servers", servers)
        if source_interface is not None:
            pulumi.set(__self__, "source_interface", source_interface)
        if source_interface_variable is not None:
            pulumi.set(__self__, "source_interface_variable", source_interface_variable)
        if vpn_id is not None:
            pulumi.set(__self__, "vpn_id", vpn_id)

    @_builtins.property
    @pulumi.getter(name="groupName")
    def group_name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Set TACACS server Group Name
        """
        return pulumi.get(self, "group_name")

    @group_name.setter
    def group_name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "group_name", value)

    @_builtins.property
    @pulumi.getter
    def optional(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Indicates if list item is considered optional.
        """
        return pulumi.get(self, "optional")

    @optional.setter
    def optional(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "optional", value)

    @_builtins.property
    @pulumi.getter
    def servers(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['CedgeAaaFeatureTemplateTacacsServerGroupServerArgs']]]]:
        """
        Configure the TACACS server
        """
        return pulumi.get(self, "servers")

    @servers.setter
    def servers(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['CedgeAaaFeatureTemplateTacacsServerGroupServerArgs']]]]):
        pulumi.set(self, "servers", value)

    @_builtins.property
    @pulumi.getter(name="sourceInterface")
    def source_interface(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Set interface to use to reach TACACS server
        """
        return pulumi.get(self, "source_interface")

    @source_interface.setter
    def source_interface(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "source_interface", value)

    @_builtins.property
    @pulumi.getter(name="sourceInterfaceVariable")
    def source_interface_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "source_interface_variable")

    @source_interface_variable.setter
    def source_interface_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "source_interface_variable", value)

    @_builtins.property
    @pulumi.getter(name="vpnId")
    def vpn_id(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        Set VPN in which TACACS server is located
          - Range: `0`-`65530`
          - Default value: `0`
        """
        return pulumi.get(self, "vpn_id")

    @vpn_id.setter
    def vpn_id(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "vpn_id", value)


if not MYPY:
    class CedgeAaaFeatureTemplateTacacsServerGroupServerArgsDict(TypedDict):
        address: NotRequired[pulumi.Input[_builtins.str]]
        """
        Set IP address of TACACS server
        """
        encryption_type: NotRequired[pulumi.Input[_builtins.str]]
        """
        Type of encyption. To be used for type 6
          - Choices: `6`, `7`
        """
        key: NotRequired[pulumi.Input[_builtins.str]]
        """
        Set the TACACS server shared key
        """
        optional: NotRequired[pulumi.Input[_builtins.bool]]
        """
        Indicates if list item is considered optional.
        """
        port: NotRequired[pulumi.Input[_builtins.int]]
        """
        TACACS Port
          - Range: `1`-`65535`
          - Default value: `49`
        """
        port_variable: NotRequired[pulumi.Input[_builtins.str]]
        """
        Variable name
        """
        secret_key: NotRequired[pulumi.Input[_builtins.str]]
        """
        Set the TACACS server shared type 7 encrypted key
        """
        secret_key_variable: NotRequired[pulumi.Input[_builtins.str]]
        """
        Variable name
        """
        timeout: NotRequired[pulumi.Input[_builtins.int]]
        """
        Configure how long to wait for replies from the TACACS server
          - Range: `1`-`1000`
          - Default value: `5`
        """
        timeout_variable: NotRequired[pulumi.Input[_builtins.str]]
        """
        Variable name
        """
elif False:
    CedgeAaaFeatureTemplateTacacsServerGroupServerArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class CedgeAaaFeatureTemplateTacacsServerGroupServerArgs:
    def __init__(__self__, *,
                 address: Optional[pulumi.Input[_builtins.str]] = None,
                 encryption_type: Optional[pulumi.Input[_builtins.str]] = None,
                 key: Optional[pulumi.Input[_builtins.str]] = None,
                 optional: Optional[pulumi.Input[_builtins.bool]] = None,
                 port: Optional[pulumi.Input[_builtins.int]] = None,
                 port_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 secret_key: Optional[pulumi.Input[_builtins.str]] = None,
                 secret_key_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 timeout: Optional[pulumi.Input[_builtins.int]] = None,
                 timeout_variable: Optional[pulumi.Input[_builtins.str]] = None):
        """
        :param pulumi.Input[_builtins.str] address: Set IP address of TACACS server
        :param pulumi.Input[_builtins.str] encryption_type: Type of encyption. To be used for type 6
                 - Choices: `6`, `7`
        :param pulumi.Input[_builtins.str] key: Set the TACACS server shared key
        :param pulumi.Input[_builtins.bool] optional: Indicates if list item is considered optional.
        :param pulumi.Input[_builtins.int] port: TACACS Port
                 - Range: `1`-`65535`
                 - Default value: `49`
        :param pulumi.Input[_builtins.str] port_variable: Variable name
        :param pulumi.Input[_builtins.str] secret_key: Set the TACACS server shared type 7 encrypted key
        :param pulumi.Input[_builtins.str] secret_key_variable: Variable name
        :param pulumi.Input[_builtins.int] timeout: Configure how long to wait for replies from the TACACS server
                 - Range: `1`-`1000`
                 - Default value: `5`
        :param pulumi.Input[_builtins.str] timeout_variable: Variable name
        """
        if address is not None:
            pulumi.set(__self__, "address", address)
        if encryption_type is not None:
            pulumi.set(__self__, "encryption_type", encryption_type)
        if key is not None:
            pulumi.set(__self__, "key", key)
        if optional is not None:
            pulumi.set(__self__, "optional", optional)
        if port is not None:
            pulumi.set(__self__, "port", port)
        if port_variable is not None:
            pulumi.set(__self__, "port_variable", port_variable)
        if secret_key is not None:
            pulumi.set(__self__, "secret_key", secret_key)
        if secret_key_variable is not None:
            pulumi.set(__self__, "secret_key_variable", secret_key_variable)
        if timeout is not None:
            pulumi.set(__self__, "timeout", timeout)
        if timeout_variable is not None:
            pulumi.set(__self__, "timeout_variable", timeout_variable)

    @_builtins.property
    @pulumi.getter
    def address(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Set IP address of TACACS server
        """
        return pulumi.get(self, "address")

    @address.setter
    def address(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "address", value)

    @_builtins.property
    @pulumi.getter(name="encryptionType")
    def encryption_type(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Type of encyption. To be used for type 6
          - Choices: `6`, `7`
        """
        return pulumi.get(self, "encryption_type")

    @encryption_type.setter
    def encryption_type(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "encryption_type", value)

    @_builtins.property
    @pulumi.getter
    def key(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Set the TACACS server shared key
        """
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "key", value)

    @_builtins.property
    @pulumi.getter
    def optional(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Indicates if list item is considered optional.
        """
        return pulumi.get(self, "optional")

    @optional.setter
    def optional(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "optional", value)

    @_builtins.property
    @pulumi.getter
    def port(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        TACACS Port
          - Range: `1`-`65535`
          - Default value: `49`
        """
        return pulumi.get(self, "port")

    @port.setter
    def port(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "port", value)

    @_builtins.property
    @pulumi.getter(name="portVariable")
    def port_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "port_variable")

    @port_variable.setter
    def port_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "port_variable", value)

    @_builtins.property
    @pulumi.getter(name="secretKey")
    def secret_key(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Set the TACACS server shared type 7 encrypted key
        """
        return pulumi.get(self, "secret_key")

    @secret_key.setter
    def secret_key(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "secret_key", value)

    @_builtins.property
    @pulumi.getter(name="secretKeyVariable")
    def secret_key_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "secret_key_variable")

    @secret_key_variable.setter
    def secret_key_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "secret_key_variable", value)

    @_builtins.property
    @pulumi.getter
    def timeout(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        Configure how long to wait for replies from the TACACS server
          - Range: `1`-`1000`
          - Default value: `5`
        """
        return pulumi.get(self, "timeout")

    @timeout.setter
    def timeout(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "timeout", value)

    @_builtins.property
    @pulumi.getter(name="timeoutVariable")
    def timeout_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "timeout_variable")

    @timeout_variable.setter
    def timeout_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "timeout_variable", value)


if not MYPY:
    class CedgeAaaFeatureTemplateUserArgsDict(TypedDict):
        name: NotRequired[pulumi.Input[_builtins.str]]
        """
        Set the username
        """
        name_variable: NotRequired[pulumi.Input[_builtins.str]]
        """
        Variable name
        """
        optional: NotRequired[pulumi.Input[_builtins.bool]]
        """
        Indicates if list item is considered optional.
        """
        password: NotRequired[pulumi.Input[_builtins.str]]
        """
        Set the user password
        """
        privilege_level: NotRequired[pulumi.Input[_builtins.str]]
        """
        Set Privilege Level for this user
          - Choices: `1`, `15`
          - Default value: `15`
        """
        privilege_level_variable: NotRequired[pulumi.Input[_builtins.str]]
        """
        Variable name
        """
        secret: NotRequired[pulumi.Input[_builtins.str]]
        """
        Set the user scrypt password/hash
        """
        ssh_pubkeys: NotRequired[pulumi.Input[Sequence[pulumi.Input['CedgeAaaFeatureTemplateUserSshPubkeyArgsDict']]]]
        """
        List of RSA public-keys per user
        """
elif False:
    CedgeAaaFeatureTemplateUserArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class CedgeAaaFeatureTemplateUserArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 name_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 optional: Optional[pulumi.Input[_builtins.bool]] = None,
                 password: Optional[pulumi.Input[_builtins.str]] = None,
                 privilege_level: Optional[pulumi.Input[_builtins.str]] = None,
                 privilege_level_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 secret: Optional[pulumi.Input[_builtins.str]] = None,
                 ssh_pubkeys: Optional[pulumi.Input[Sequence[pulumi.Input['CedgeAaaFeatureTemplateUserSshPubkeyArgs']]]] = None):
        """
        :param pulumi.Input[_builtins.str] name: Set the username
        :param pulumi.Input[_builtins.str] name_variable: Variable name
        :param pulumi.Input[_builtins.bool] optional: Indicates if list item is considered optional.
        :param pulumi.Input[_builtins.str] password: Set the user password
        :param pulumi.Input[_builtins.str] privilege_level: Set Privilege Level for this user
                 - Choices: `1`, `15`
                 - Default value: `15`
        :param pulumi.Input[_builtins.str] privilege_level_variable: Variable name
        :param pulumi.Input[_builtins.str] secret: Set the user scrypt password/hash
        :param pulumi.Input[Sequence[pulumi.Input['CedgeAaaFeatureTemplateUserSshPubkeyArgs']]] ssh_pubkeys: List of RSA public-keys per user
        """
        if name is not None:
            pulumi.set(__self__, "name", name)
        if name_variable is not None:
            pulumi.set(__self__, "name_variable", name_variable)
        if optional is not None:
            pulumi.set(__self__, "optional", optional)
        if password is not None:
            pulumi.set(__self__, "password", password)
        if privilege_level is not None:
            pulumi.set(__self__, "privilege_level", privilege_level)
        if privilege_level_variable is not None:
            pulumi.set(__self__, "privilege_level_variable", privilege_level_variable)
        if secret is not None:
            pulumi.set(__self__, "secret", secret)
        if ssh_pubkeys is not None:
            pulumi.set(__self__, "ssh_pubkeys", ssh_pubkeys)

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Set the username
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "name", value)

    @_builtins.property
    @pulumi.getter(name="nameVariable")
    def name_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "name_variable")

    @name_variable.setter
    def name_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "name_variable", value)

    @_builtins.property
    @pulumi.getter
    def optional(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Indicates if list item is considered optional.
        """
        return pulumi.get(self, "optional")

    @optional.setter
    def optional(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "optional", value)

    @_builtins.property
    @pulumi.getter
    def password(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Set the user password
        """
        return pulumi.get(self, "password")

    @password.setter
    def password(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "password", value)

    @_builtins.property
    @pulumi.getter(name="privilegeLevel")
    def privilege_level(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Set Privilege Level for this user
          - Choices: `1`, `15`
          - Default value: `15`
        """
        return pulumi.get(self, "privilege_level")

    @privilege_level.setter
    def privilege_level(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "privilege_level", value)

    @_builtins.property
    @pulumi.getter(name="privilegeLevelVariable")
    def privilege_level_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "privilege_level_variable")

    @privilege_level_variable.setter
    def privilege_level_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "privilege_level_variable", value)

    @_builtins.property
    @pulumi.getter
    def secret(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Set the user scrypt password/hash
        """
        return pulumi.get(self, "secret")

    @secret.setter
    def secret(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "secret", value)

    @_builtins.property
    @pulumi.getter(name="sshPubkeys")
    def ssh_pubkeys(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['CedgeAaaFeatureTemplateUserSshPubkeyArgs']]]]:
        """
        List of RSA public-keys per user
        """
        return pulumi.get(self, "ssh_pubkeys")

    @ssh_pubkeys.setter
    def ssh_pubkeys(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['CedgeAaaFeatureTemplateUserSshPubkeyArgs']]]]):
        pulumi.set(self, "ssh_pubkeys", value)


if not MYPY:
    class CedgeAaaFeatureTemplateUserSshPubkeyArgsDict(TypedDict):
        key_string: NotRequired[pulumi.Input[_builtins.str]]
        """
        Set the RSA key string
        """
        key_type: NotRequired[pulumi.Input[_builtins.str]]
        """
        Only RSA is supported
        """
        key_type_variable: NotRequired[pulumi.Input[_builtins.str]]
        """
        Variable name
        """
        optional: NotRequired[pulumi.Input[_builtins.bool]]
        """
        Indicates if list item is considered optional.
        """
elif False:
    CedgeAaaFeatureTemplateUserSshPubkeyArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class CedgeAaaFeatureTemplateUserSshPubkeyArgs:
    def __init__(__self__, *,
                 key_string: Optional[pulumi.Input[_builtins.str]] = None,
                 key_type: Optional[pulumi.Input[_builtins.str]] = None,
                 key_type_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 optional: Optional[pulumi.Input[_builtins.bool]] = None):
        """
        :param pulumi.Input[_builtins.str] key_string: Set the RSA key string
        :param pulumi.Input[_builtins.str] key_type: Only RSA is supported
        :param pulumi.Input[_builtins.str] key_type_variable: Variable name
        :param pulumi.Input[_builtins.bool] optional: Indicates if list item is considered optional.
        """
        if key_string is not None:
            pulumi.set(__self__, "key_string", key_string)
        if key_type is not None:
            pulumi.set(__self__, "key_type", key_type)
        if key_type_variable is not None:
            pulumi.set(__self__, "key_type_variable", key_type_variable)
        if optional is not None:
            pulumi.set(__self__, "optional", optional)

    @_builtins.property
    @pulumi.getter(name="keyString")
    def key_string(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Set the RSA key string
        """
        return pulumi.get(self, "key_string")

    @key_string.setter
    def key_string(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "key_string", value)

    @_builtins.property
    @pulumi.getter(name="keyType")
    def key_type(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Only RSA is supported
        """
        return pulumi.get(self, "key_type")

    @key_type.setter
    def key_type(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "key_type", value)

    @_builtins.property
    @pulumi.getter(name="keyTypeVariable")
    def key_type_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "key_type_variable")

    @key_type_variable.setter
    def key_type_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "key_type_variable", value)

    @_builtins.property
    @pulumi.getter
    def optional(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Indicates if list item is considered optional.
        """
        return pulumi.get(self, "optional")

    @optional.setter
    def optional(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "optional", value)


if not MYPY:
    class CedgeIgmpFeatureTemplateInterfaceArgsDict(TypedDict):
        join_groups: NotRequired[pulumi.Input[Sequence[pulumi.Input['CedgeIgmpFeatureTemplateInterfaceJoinGroupArgsDict']]]]
        """
        Configure static joins
        """
        name: NotRequired[pulumi.Input[_builtins.str]]
        """
        Set interface name
        """
        name_variable: NotRequired[pulumi.Input[_builtins.str]]
        """
        Variable name
        """
        optional: NotRequired[pulumi.Input[_builtins.bool]]
        """
        Indicates if list item is considered optional.
        """
elif False:
    CedgeIgmpFeatureTemplateInterfaceArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class CedgeIgmpFeatureTemplateInterfaceArgs:
    def __init__(__self__, *,
                 join_groups: Optional[pulumi.Input[Sequence[pulumi.Input['CedgeIgmpFeatureTemplateInterfaceJoinGroupArgs']]]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 name_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 optional: Optional[pulumi.Input[_builtins.bool]] = None):
        """
        :param pulumi.Input[Sequence[pulumi.Input['CedgeIgmpFeatureTemplateInterfaceJoinGroupArgs']]] join_groups: Configure static joins
        :param pulumi.Input[_builtins.str] name: Set interface name
        :param pulumi.Input[_builtins.str] name_variable: Variable name
        :param pulumi.Input[_builtins.bool] optional: Indicates if list item is considered optional.
        """
        if join_groups is not None:
            pulumi.set(__self__, "join_groups", join_groups)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if name_variable is not None:
            pulumi.set(__self__, "name_variable", name_variable)
        if optional is not None:
            pulumi.set(__self__, "optional", optional)

    @_builtins.property
    @pulumi.getter(name="joinGroups")
    def join_groups(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['CedgeIgmpFeatureTemplateInterfaceJoinGroupArgs']]]]:
        """
        Configure static joins
        """
        return pulumi.get(self, "join_groups")

    @join_groups.setter
    def join_groups(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['CedgeIgmpFeatureTemplateInterfaceJoinGroupArgs']]]]):
        pulumi.set(self, "join_groups", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Set interface name
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "name", value)

    @_builtins.property
    @pulumi.getter(name="nameVariable")
    def name_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "name_variable")

    @name_variable.setter
    def name_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "name_variable", value)

    @_builtins.property
    @pulumi.getter
    def optional(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Indicates if list item is considered optional.
        """
        return pulumi.get(self, "optional")

    @optional.setter
    def optional(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "optional", value)


if not MYPY:
    class CedgeIgmpFeatureTemplateInterfaceJoinGroupArgsDict(TypedDict):
        group_address: NotRequired[pulumi.Input[_builtins.str]]
        """
        Set group address
        """
        group_address_variable: NotRequired[pulumi.Input[_builtins.str]]
        """
        Variable name
        """
        optional: NotRequired[pulumi.Input[_builtins.bool]]
        """
        Indicates if list item is considered optional.
        """
        source: NotRequired[pulumi.Input[_builtins.str]]
        """
        Set source address
        """
        source_variable: NotRequired[pulumi.Input[_builtins.str]]
        """
        Variable name
        """
elif False:
    CedgeIgmpFeatureTemplateInterfaceJoinGroupArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class CedgeIgmpFeatureTemplateInterfaceJoinGroupArgs:
    def __init__(__self__, *,
                 group_address: Optional[pulumi.Input[_builtins.str]] = None,
                 group_address_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 optional: Optional[pulumi.Input[_builtins.bool]] = None,
                 source: Optional[pulumi.Input[_builtins.str]] = None,
                 source_variable: Optional[pulumi.Input[_builtins.str]] = None):
        """
        :param pulumi.Input[_builtins.str] group_address: Set group address
        :param pulumi.Input[_builtins.str] group_address_variable: Variable name
        :param pulumi.Input[_builtins.bool] optional: Indicates if list item is considered optional.
        :param pulumi.Input[_builtins.str] source: Set source address
        :param pulumi.Input[_builtins.str] source_variable: Variable name
        """
        if group_address is not None:
            pulumi.set(__self__, "group_address", group_address)
        if group_address_variable is not None:
            pulumi.set(__self__, "group_address_variable", group_address_variable)
        if optional is not None:
            pulumi.set(__self__, "optional", optional)
        if source is not None:
            pulumi.set(__self__, "source", source)
        if source_variable is not None:
            pulumi.set(__self__, "source_variable", source_variable)

    @_builtins.property
    @pulumi.getter(name="groupAddress")
    def group_address(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Set group address
        """
        return pulumi.get(self, "group_address")

    @group_address.setter
    def group_address(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "group_address", value)

    @_builtins.property
    @pulumi.getter(name="groupAddressVariable")
    def group_address_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "group_address_variable")

    @group_address_variable.setter
    def group_address_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "group_address_variable", value)

    @_builtins.property
    @pulumi.getter
    def optional(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Indicates if list item is considered optional.
        """
        return pulumi.get(self, "optional")

    @optional.setter
    def optional(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "optional", value)

    @_builtins.property
    @pulumi.getter
    def source(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Set source address
        """
        return pulumi.get(self, "source")

    @source.setter
    def source(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "source", value)

    @_builtins.property
    @pulumi.getter(name="sourceVariable")
    def source_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "source_variable")

    @source_variable.setter
    def source_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "source_variable", value)


if not MYPY:
    class CedgePimFeatureTemplateInterfaceArgsDict(TypedDict):
        interface_name: NotRequired[pulumi.Input[_builtins.str]]
        """
        Set interface name
        """
        interface_name_variable: NotRequired[pulumi.Input[_builtins.str]]
        """
        Variable name
        """
        join_prune_interval: NotRequired[pulumi.Input[_builtins.int]]
        """
        Set interval at which PIM multicast traffic can join or be removed from RPT or SPT
          - Range: `10`-`600`
          - Default value: `60`
        """
        join_prune_interval_variable: NotRequired[pulumi.Input[_builtins.str]]
        """
        Variable name
        """
        optional: NotRequired[pulumi.Input[_builtins.bool]]
        """
        Indicates if list item is considered optional.
        """
        query_interval: NotRequired[pulumi.Input[_builtins.int]]
        """
        Set PIM query interval
          - Range: `1`-`18725`
          - Default value: `30`
        """
        query_interval_variable: NotRequired[pulumi.Input[_builtins.str]]
        """
        Variable name
        """
elif False:
    CedgePimFeatureTemplateInterfaceArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class CedgePimFeatureTemplateInterfaceArgs:
    def __init__(__self__, *,
                 interface_name: Optional[pulumi.Input[_builtins.str]] = None,
                 interface_name_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 join_prune_interval: Optional[pulumi.Input[_builtins.int]] = None,
                 join_prune_interval_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 optional: Optional[pulumi.Input[_builtins.bool]] = None,
                 query_interval: Optional[pulumi.Input[_builtins.int]] = None,
                 query_interval_variable: Optional[pulumi.Input[_builtins.str]] = None):
        """
        :param pulumi.Input[_builtins.str] interface_name: Set interface name
        :param pulumi.Input[_builtins.str] interface_name_variable: Variable name
        :param pulumi.Input[_builtins.int] join_prune_interval: Set interval at which PIM multicast traffic can join or be removed from RPT or SPT
                 - Range: `10`-`600`
                 - Default value: `60`
        :param pulumi.Input[_builtins.str] join_prune_interval_variable: Variable name
        :param pulumi.Input[_builtins.bool] optional: Indicates if list item is considered optional.
        :param pulumi.Input[_builtins.int] query_interval: Set PIM query interval
                 - Range: `1`-`18725`
                 - Default value: `30`
        :param pulumi.Input[_builtins.str] query_interval_variable: Variable name
        """
        if interface_name is not None:
            pulumi.set(__self__, "interface_name", interface_name)
        if interface_name_variable is not None:
            pulumi.set(__self__, "interface_name_variable", interface_name_variable)
        if join_prune_interval is not None:
            pulumi.set(__self__, "join_prune_interval", join_prune_interval)
        if join_prune_interval_variable is not None:
            pulumi.set(__self__, "join_prune_interval_variable", join_prune_interval_variable)
        if optional is not None:
            pulumi.set(__self__, "optional", optional)
        if query_interval is not None:
            pulumi.set(__self__, "query_interval", query_interval)
        if query_interval_variable is not None:
            pulumi.set(__self__, "query_interval_variable", query_interval_variable)

    @_builtins.property
    @pulumi.getter(name="interfaceName")
    def interface_name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Set interface name
        """
        return pulumi.get(self, "interface_name")

    @interface_name.setter
    def interface_name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "interface_name", value)

    @_builtins.property
    @pulumi.getter(name="interfaceNameVariable")
    def interface_name_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "interface_name_variable")

    @interface_name_variable.setter
    def interface_name_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "interface_name_variable", value)

    @_builtins.property
    @pulumi.getter(name="joinPruneInterval")
    def join_prune_interval(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        Set interval at which PIM multicast traffic can join or be removed from RPT or SPT
          - Range: `10`-`600`
          - Default value: `60`
        """
        return pulumi.get(self, "join_prune_interval")

    @join_prune_interval.setter
    def join_prune_interval(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "join_prune_interval", value)

    @_builtins.property
    @pulumi.getter(name="joinPruneIntervalVariable")
    def join_prune_interval_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "join_prune_interval_variable")

    @join_prune_interval_variable.setter
    def join_prune_interval_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "join_prune_interval_variable", value)

    @_builtins.property
    @pulumi.getter
    def optional(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Indicates if list item is considered optional.
        """
        return pulumi.get(self, "optional")

    @optional.setter
    def optional(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "optional", value)

    @_builtins.property
    @pulumi.getter(name="queryInterval")
    def query_interval(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        Set PIM query interval
          - Range: `1`-`18725`
          - Default value: `30`
        """
        return pulumi.get(self, "query_interval")

    @query_interval.setter
    def query_interval(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "query_interval", value)

    @_builtins.property
    @pulumi.getter(name="queryIntervalVariable")
    def query_interval_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "query_interval_variable")

    @query_interval_variable.setter
    def query_interval_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "query_interval_variable", value)


if not MYPY:
    class CedgePimFeatureTemplateRpAddressArgsDict(TypedDict):
        access_list: NotRequired[pulumi.Input[_builtins.str]]
        """
        Set Static RP Access List
        """
        access_list_variable: NotRequired[pulumi.Input[_builtins.str]]
        """
        Variable name
        """
        ip_address: NotRequired[pulumi.Input[_builtins.str]]
        """
        Set Static RP IP Address
        """
        ip_address_variable: NotRequired[pulumi.Input[_builtins.str]]
        """
        Variable name
        """
        optional: NotRequired[pulumi.Input[_builtins.bool]]
        """
        Indicates if list item is considered optional.
        """
        override: NotRequired[pulumi.Input[_builtins.bool]]
        """
        Set override flag
          - Default value: `false`
        """
        override_variable: NotRequired[pulumi.Input[_builtins.str]]
        """
        Variable name
        """
elif False:
    CedgePimFeatureTemplateRpAddressArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class CedgePimFeatureTemplateRpAddressArgs:
    def __init__(__self__, *,
                 access_list: Optional[pulumi.Input[_builtins.str]] = None,
                 access_list_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 ip_address: Optional[pulumi.Input[_builtins.str]] = None,
                 ip_address_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 optional: Optional[pulumi.Input[_builtins.bool]] = None,
                 override: Optional[pulumi.Input[_builtins.bool]] = None,
                 override_variable: Optional[pulumi.Input[_builtins.str]] = None):
        """
        :param pulumi.Input[_builtins.str] access_list: Set Static RP Access List
        :param pulumi.Input[_builtins.str] access_list_variable: Variable name
        :param pulumi.Input[_builtins.str] ip_address: Set Static RP IP Address
        :param pulumi.Input[_builtins.str] ip_address_variable: Variable name
        :param pulumi.Input[_builtins.bool] optional: Indicates if list item is considered optional.
        :param pulumi.Input[_builtins.bool] override: Set override flag
                 - Default value: `false`
        :param pulumi.Input[_builtins.str] override_variable: Variable name
        """
        if access_list is not None:
            pulumi.set(__self__, "access_list", access_list)
        if access_list_variable is not None:
            pulumi.set(__self__, "access_list_variable", access_list_variable)
        if ip_address is not None:
            pulumi.set(__self__, "ip_address", ip_address)
        if ip_address_variable is not None:
            pulumi.set(__self__, "ip_address_variable", ip_address_variable)
        if optional is not None:
            pulumi.set(__self__, "optional", optional)
        if override is not None:
            pulumi.set(__self__, "override", override)
        if override_variable is not None:
            pulumi.set(__self__, "override_variable", override_variable)

    @_builtins.property
    @pulumi.getter(name="accessList")
    def access_list(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Set Static RP Access List
        """
        return pulumi.get(self, "access_list")

    @access_list.setter
    def access_list(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "access_list", value)

    @_builtins.property
    @pulumi.getter(name="accessListVariable")
    def access_list_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "access_list_variable")

    @access_list_variable.setter
    def access_list_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "access_list_variable", value)

    @_builtins.property
    @pulumi.getter(name="ipAddress")
    def ip_address(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Set Static RP IP Address
        """
        return pulumi.get(self, "ip_address")

    @ip_address.setter
    def ip_address(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "ip_address", value)

    @_builtins.property
    @pulumi.getter(name="ipAddressVariable")
    def ip_address_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "ip_address_variable")

    @ip_address_variable.setter
    def ip_address_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "ip_address_variable", value)

    @_builtins.property
    @pulumi.getter
    def optional(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Indicates if list item is considered optional.
        """
        return pulumi.get(self, "optional")

    @optional.setter
    def optional(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "optional", value)

    @_builtins.property
    @pulumi.getter
    def override(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Set override flag
          - Default value: `false`
        """
        return pulumi.get(self, "override")

    @override.setter
    def override(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "override", value)

    @_builtins.property
    @pulumi.getter(name="overrideVariable")
    def override_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "override_variable")

    @override_variable.setter
    def override_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "override_variable", value)


if not MYPY:
    class CedgePimFeatureTemplateRpAnnounceFieldArgsDict(TypedDict):
        interface_name: NotRequired[pulumi.Input[_builtins.str]]
        """
        Set RP Announce Interface Name
        """
        interface_name_variable: NotRequired[pulumi.Input[_builtins.str]]
        """
        Variable name
        """
        optional: NotRequired[pulumi.Input[_builtins.bool]]
        """
        Indicates if list item is considered optional.
        """
        scope: NotRequired[pulumi.Input[_builtins.int]]
        """
        Set RP Announce Scope
          - Range: `1`-`255`
        """
        scope_variable: NotRequired[pulumi.Input[_builtins.str]]
        """
        Variable name
        """
elif False:
    CedgePimFeatureTemplateRpAnnounceFieldArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class CedgePimFeatureTemplateRpAnnounceFieldArgs:
    def __init__(__self__, *,
                 interface_name: Optional[pulumi.Input[_builtins.str]] = None,
                 interface_name_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 optional: Optional[pulumi.Input[_builtins.bool]] = None,
                 scope: Optional[pulumi.Input[_builtins.int]] = None,
                 scope_variable: Optional[pulumi.Input[_builtins.str]] = None):
        """
        :param pulumi.Input[_builtins.str] interface_name: Set RP Announce Interface Name
        :param pulumi.Input[_builtins.str] interface_name_variable: Variable name
        :param pulumi.Input[_builtins.bool] optional: Indicates if list item is considered optional.
        :param pulumi.Input[_builtins.int] scope: Set RP Announce Scope
                 - Range: `1`-`255`
        :param pulumi.Input[_builtins.str] scope_variable: Variable name
        """
        if interface_name is not None:
            pulumi.set(__self__, "interface_name", interface_name)
        if interface_name_variable is not None:
            pulumi.set(__self__, "interface_name_variable", interface_name_variable)
        if optional is not None:
            pulumi.set(__self__, "optional", optional)
        if scope is not None:
            pulumi.set(__self__, "scope", scope)
        if scope_variable is not None:
            pulumi.set(__self__, "scope_variable", scope_variable)

    @_builtins.property
    @pulumi.getter(name="interfaceName")
    def interface_name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Set RP Announce Interface Name
        """
        return pulumi.get(self, "interface_name")

    @interface_name.setter
    def interface_name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "interface_name", value)

    @_builtins.property
    @pulumi.getter(name="interfaceNameVariable")
    def interface_name_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "interface_name_variable")

    @interface_name_variable.setter
    def interface_name_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "interface_name_variable", value)

    @_builtins.property
    @pulumi.getter
    def optional(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Indicates if list item is considered optional.
        """
        return pulumi.get(self, "optional")

    @optional.setter
    def optional(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "optional", value)

    @_builtins.property
    @pulumi.getter
    def scope(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        Set RP Announce Scope
          - Range: `1`-`255`
        """
        return pulumi.get(self, "scope")

    @scope.setter
    def scope(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "scope", value)

    @_builtins.property
    @pulumi.getter(name="scopeVariable")
    def scope_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "scope_variable")

    @scope_variable.setter
    def scope_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "scope_variable", value)


if not MYPY:
    class CedgePimFeatureTemplateRpCandidateArgsDict(TypedDict):
        access_list: NotRequired[pulumi.Input[_builtins.str]]
        """
        Set IP Access List for PIM RP Candidate
        """
        access_list_variable: NotRequired[pulumi.Input[_builtins.str]]
        """
        Variable name
        """
        interface: NotRequired[pulumi.Input[_builtins.str]]
        """
        Set Autonomic-Networking virtual interface
        """
        interface_variable: NotRequired[pulumi.Input[_builtins.str]]
        """
        Variable name
        """
        interval: NotRequired[pulumi.Input[_builtins.int]]
        """
        Set RP candidate advertisement interval
          - Range: `1`-`16383`
        """
        interval_variable: NotRequired[pulumi.Input[_builtins.str]]
        """
        Variable name
        """
        optional: NotRequired[pulumi.Input[_builtins.bool]]
        """
        Indicates if list item is considered optional.
        """
        priority: NotRequired[pulumi.Input[_builtins.int]]
        """
        Set RP candidate priority
          - Range: `0`-`255`
        """
        priority_variable: NotRequired[pulumi.Input[_builtins.str]]
        """
        Variable name
        """
elif False:
    CedgePimFeatureTemplateRpCandidateArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class CedgePimFeatureTemplateRpCandidateArgs:
    def __init__(__self__, *,
                 access_list: Optional[pulumi.Input[_builtins.str]] = None,
                 access_list_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 interface: Optional[pulumi.Input[_builtins.str]] = None,
                 interface_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 interval: Optional[pulumi.Input[_builtins.int]] = None,
                 interval_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 optional: Optional[pulumi.Input[_builtins.bool]] = None,
                 priority: Optional[pulumi.Input[_builtins.int]] = None,
                 priority_variable: Optional[pulumi.Input[_builtins.str]] = None):
        """
        :param pulumi.Input[_builtins.str] access_list: Set IP Access List for PIM RP Candidate
        :param pulumi.Input[_builtins.str] access_list_variable: Variable name
        :param pulumi.Input[_builtins.str] interface: Set Autonomic-Networking virtual interface
        :param pulumi.Input[_builtins.str] interface_variable: Variable name
        :param pulumi.Input[_builtins.int] interval: Set RP candidate advertisement interval
                 - Range: `1`-`16383`
        :param pulumi.Input[_builtins.str] interval_variable: Variable name
        :param pulumi.Input[_builtins.bool] optional: Indicates if list item is considered optional.
        :param pulumi.Input[_builtins.int] priority: Set RP candidate priority
                 - Range: `0`-`255`
        :param pulumi.Input[_builtins.str] priority_variable: Variable name
        """
        if access_list is not None:
            pulumi.set(__self__, "access_list", access_list)
        if access_list_variable is not None:
            pulumi.set(__self__, "access_list_variable", access_list_variable)
        if interface is not None:
            pulumi.set(__self__, "interface", interface)
        if interface_variable is not None:
            pulumi.set(__self__, "interface_variable", interface_variable)
        if interval is not None:
            pulumi.set(__self__, "interval", interval)
        if interval_variable is not None:
            pulumi.set(__self__, "interval_variable", interval_variable)
        if optional is not None:
            pulumi.set(__self__, "optional", optional)
        if priority is not None:
            pulumi.set(__self__, "priority", priority)
        if priority_variable is not None:
            pulumi.set(__self__, "priority_variable", priority_variable)

    @_builtins.property
    @pulumi.getter(name="accessList")
    def access_list(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Set IP Access List for PIM RP Candidate
        """
        return pulumi.get(self, "access_list")

    @access_list.setter
    def access_list(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "access_list", value)

    @_builtins.property
    @pulumi.getter(name="accessListVariable")
    def access_list_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "access_list_variable")

    @access_list_variable.setter
    def access_list_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "access_list_variable", value)

    @_builtins.property
    @pulumi.getter
    def interface(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Set Autonomic-Networking virtual interface
        """
        return pulumi.get(self, "interface")

    @interface.setter
    def interface(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "interface", value)

    @_builtins.property
    @pulumi.getter(name="interfaceVariable")
    def interface_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "interface_variable")

    @interface_variable.setter
    def interface_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "interface_variable", value)

    @_builtins.property
    @pulumi.getter
    def interval(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        Set RP candidate advertisement interval
          - Range: `1`-`16383`
        """
        return pulumi.get(self, "interval")

    @interval.setter
    def interval(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "interval", value)

    @_builtins.property
    @pulumi.getter(name="intervalVariable")
    def interval_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "interval_variable")

    @interval_variable.setter
    def interval_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "interval_variable", value)

    @_builtins.property
    @pulumi.getter
    def optional(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Indicates if list item is considered optional.
        """
        return pulumi.get(self, "optional")

    @optional.setter
    def optional(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "optional", value)

    @_builtins.property
    @pulumi.getter
    def priority(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        Set RP candidate priority
          - Range: `0`-`255`
        """
        return pulumi.get(self, "priority")

    @priority.setter
    def priority(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "priority", value)

    @_builtins.property
    @pulumi.getter(name="priorityVariable")
    def priority_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "priority_variable")

    @priority_variable.setter
    def priority_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "priority_variable", value)


if not MYPY:
    class CellularControllerFeatureTemplateDataProfileArgsDict(TypedDict):
        attach_profile: NotRequired[pulumi.Input[_builtins.int]]
        """
        Set attach profile
          - Range: `1`-`16`
        """
        attach_profile_variable: NotRequired[pulumi.Input[_builtins.str]]
        """
        Variable name
        """
        data_profile: NotRequired[pulumi.Input[_builtins.int]]
        """
        Set data profile
          - Range: `1`-`16`
        """
        data_profile_variable: NotRequired[pulumi.Input[_builtins.str]]
        """
        Variable name
        """
        optional: NotRequired[pulumi.Input[_builtins.bool]]
        """
        Indicates if list item is considered optional.
        """
        slot_number: NotRequired[pulumi.Input[_builtins.int]]
        """
        Set slot number
          - Range: `0`-`1`
        """
        slot_number_variable: NotRequired[pulumi.Input[_builtins.str]]
        """
        Variable name
        """
elif False:
    CellularControllerFeatureTemplateDataProfileArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class CellularControllerFeatureTemplateDataProfileArgs:
    def __init__(__self__, *,
                 attach_profile: Optional[pulumi.Input[_builtins.int]] = None,
                 attach_profile_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 data_profile: Optional[pulumi.Input[_builtins.int]] = None,
                 data_profile_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 optional: Optional[pulumi.Input[_builtins.bool]] = None,
                 slot_number: Optional[pulumi.Input[_builtins.int]] = None,
                 slot_number_variable: Optional[pulumi.Input[_builtins.str]] = None):
        """
        :param pulumi.Input[_builtins.int] attach_profile: Set attach profile
                 - Range: `1`-`16`
        :param pulumi.Input[_builtins.str] attach_profile_variable: Variable name
        :param pulumi.Input[_builtins.int] data_profile: Set data profile
                 - Range: `1`-`16`
        :param pulumi.Input[_builtins.str] data_profile_variable: Variable name
        :param pulumi.Input[_builtins.bool] optional: Indicates if list item is considered optional.
        :param pulumi.Input[_builtins.int] slot_number: Set slot number
                 - Range: `0`-`1`
        :param pulumi.Input[_builtins.str] slot_number_variable: Variable name
        """
        if attach_profile is not None:
            pulumi.set(__self__, "attach_profile", attach_profile)
        if attach_profile_variable is not None:
            pulumi.set(__self__, "attach_profile_variable", attach_profile_variable)
        if data_profile is not None:
            pulumi.set(__self__, "data_profile", data_profile)
        if data_profile_variable is not None:
            pulumi.set(__self__, "data_profile_variable", data_profile_variable)
        if optional is not None:
            pulumi.set(__self__, "optional", optional)
        if slot_number is not None:
            pulumi.set(__self__, "slot_number", slot_number)
        if slot_number_variable is not None:
            pulumi.set(__self__, "slot_number_variable", slot_number_variable)

    @_builtins.property
    @pulumi.getter(name="attachProfile")
    def attach_profile(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        Set attach profile
          - Range: `1`-`16`
        """
        return pulumi.get(self, "attach_profile")

    @attach_profile.setter
    def attach_profile(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "attach_profile", value)

    @_builtins.property
    @pulumi.getter(name="attachProfileVariable")
    def attach_profile_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "attach_profile_variable")

    @attach_profile_variable.setter
    def attach_profile_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "attach_profile_variable", value)

    @_builtins.property
    @pulumi.getter(name="dataProfile")
    def data_profile(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        Set data profile
          - Range: `1`-`16`
        """
        return pulumi.get(self, "data_profile")

    @data_profile.setter
    def data_profile(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "data_profile", value)

    @_builtins.property
    @pulumi.getter(name="dataProfileVariable")
    def data_profile_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "data_profile_variable")

    @data_profile_variable.setter
    def data_profile_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "data_profile_variable", value)

    @_builtins.property
    @pulumi.getter
    def optional(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Indicates if list item is considered optional.
        """
        return pulumi.get(self, "optional")

    @optional.setter
    def optional(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "optional", value)

    @_builtins.property
    @pulumi.getter(name="slotNumber")
    def slot_number(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        Set slot number
          - Range: `0`-`1`
        """
        return pulumi.get(self, "slot_number")

    @slot_number.setter
    def slot_number(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "slot_number", value)

    @_builtins.property
    @pulumi.getter(name="slotNumberVariable")
    def slot_number_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "slot_number_variable")

    @slot_number_variable.setter
    def slot_number_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "slot_number_variable", value)


if not MYPY:
    class CentralizedPolicyDefinitionArgsDict(TypedDict):
        id: pulumi.Input[_builtins.str]
        """
        Policy definition ID
        """
        type: pulumi.Input[_builtins.str]
        """
        Policy definition type
          - Choices: `hubAndSpoke`, `mesh`, `control`, `vpnMembershipGroup`, `appRoute`, `cflowd`, `data`
        """
        entries: NotRequired[pulumi.Input[Sequence[pulumi.Input['CentralizedPolicyDefinitionEntryArgsDict']]]]
        """
        List of entries
        """
        version: NotRequired[pulumi.Input[_builtins.int]]
        """
        Policy definition version
        """
elif False:
    CentralizedPolicyDefinitionArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class CentralizedPolicyDefinitionArgs:
    def __init__(__self__, *,
                 id: pulumi.Input[_builtins.str],
                 type: pulumi.Input[_builtins.str],
                 entries: Optional[pulumi.Input[Sequence[pulumi.Input['CentralizedPolicyDefinitionEntryArgs']]]] = None,
                 version: Optional[pulumi.Input[_builtins.int]] = None):
        """
        :param pulumi.Input[_builtins.str] id: Policy definition ID
        :param pulumi.Input[_builtins.str] type: Policy definition type
                 - Choices: `hubAndSpoke`, `mesh`, `control`, `vpnMembershipGroup`, `appRoute`, `cflowd`, `data`
        :param pulumi.Input[Sequence[pulumi.Input['CentralizedPolicyDefinitionEntryArgs']]] entries: List of entries
        :param pulumi.Input[_builtins.int] version: Policy definition version
        """
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "type", type)
        if entries is not None:
            pulumi.set(__self__, "entries", entries)
        if version is not None:
            pulumi.set(__self__, "version", version)

    @_builtins.property
    @pulumi.getter
    def id(self) -> pulumi.Input[_builtins.str]:
        """
        Policy definition ID
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "id", value)

    @_builtins.property
    @pulumi.getter
    def type(self) -> pulumi.Input[_builtins.str]:
        """
        Policy definition type
          - Choices: `hubAndSpoke`, `mesh`, `control`, `vpnMembershipGroup`, `appRoute`, `cflowd`, `data`
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "type", value)

    @_builtins.property
    @pulumi.getter
    def entries(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['CentralizedPolicyDefinitionEntryArgs']]]]:
        """
        List of entries
        """
        return pulumi.get(self, "entries")

    @entries.setter
    def entries(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['CentralizedPolicyDefinitionEntryArgs']]]]):
        pulumi.set(self, "entries", value)

    @_builtins.property
    @pulumi.getter
    def version(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        Policy definition version
        """
        return pulumi.get(self, "version")

    @version.setter
    def version(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "version", value)


if not MYPY:
    class CentralizedPolicyDefinitionEntryArgsDict(TypedDict):
        direction: NotRequired[pulumi.Input[_builtins.str]]
        """
        Direction
          - Choices: `service`, `tunnel`, `all`, `in`, `out`
        """
        region_ids: NotRequired[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]
        """
        List of region IDs
        """
        region_list_ids: NotRequired[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]
        """
        List of region list IDs
        """
        region_list_versions: NotRequired[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]
        """
        List of region list versions
        """
        site_list_ids: NotRequired[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]
        """
        List of site list IDs
        """
        site_list_versions: NotRequired[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]
        """
        List of site list versions
        """
        vpn_list_ids: NotRequired[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]
        """
        List of VPN list IDs
        """
        vpn_list_versions: NotRequired[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]
        """
        List of VPN list versions
        """
elif False:
    CentralizedPolicyDefinitionEntryArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class CentralizedPolicyDefinitionEntryArgs:
    def __init__(__self__, *,
                 direction: Optional[pulumi.Input[_builtins.str]] = None,
                 region_ids: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 region_list_ids: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 region_list_versions: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 site_list_ids: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 site_list_versions: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 vpn_list_ids: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 vpn_list_versions: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None):
        """
        :param pulumi.Input[_builtins.str] direction: Direction
                 - Choices: `service`, `tunnel`, `all`, `in`, `out`
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] region_ids: List of region IDs
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] region_list_ids: List of region list IDs
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] region_list_versions: List of region list versions
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] site_list_ids: List of site list IDs
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] site_list_versions: List of site list versions
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] vpn_list_ids: List of VPN list IDs
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] vpn_list_versions: List of VPN list versions
        """
        if direction is not None:
            pulumi.set(__self__, "direction", direction)
        if region_ids is not None:
            pulumi.set(__self__, "region_ids", region_ids)
        if region_list_ids is not None:
            pulumi.set(__self__, "region_list_ids", region_list_ids)
        if region_list_versions is not None:
            pulumi.set(__self__, "region_list_versions", region_list_versions)
        if site_list_ids is not None:
            pulumi.set(__self__, "site_list_ids", site_list_ids)
        if site_list_versions is not None:
            pulumi.set(__self__, "site_list_versions", site_list_versions)
        if vpn_list_ids is not None:
            pulumi.set(__self__, "vpn_list_ids", vpn_list_ids)
        if vpn_list_versions is not None:
            pulumi.set(__self__, "vpn_list_versions", vpn_list_versions)

    @_builtins.property
    @pulumi.getter
    def direction(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Direction
          - Choices: `service`, `tunnel`, `all`, `in`, `out`
        """
        return pulumi.get(self, "direction")

    @direction.setter
    def direction(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "direction", value)

    @_builtins.property
    @pulumi.getter(name="regionIds")
    def region_ids(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]:
        """
        List of region IDs
        """
        return pulumi.get(self, "region_ids")

    @region_ids.setter
    def region_ids(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "region_ids", value)

    @_builtins.property
    @pulumi.getter(name="regionListIds")
    def region_list_ids(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]:
        """
        List of region list IDs
        """
        return pulumi.get(self, "region_list_ids")

    @region_list_ids.setter
    def region_list_ids(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "region_list_ids", value)

    @_builtins.property
    @pulumi.getter(name="regionListVersions")
    def region_list_versions(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]:
        """
        List of region list versions
        """
        return pulumi.get(self, "region_list_versions")

    @region_list_versions.setter
    def region_list_versions(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "region_list_versions", value)

    @_builtins.property
    @pulumi.getter(name="siteListIds")
    def site_list_ids(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]:
        """
        List of site list IDs
        """
        return pulumi.get(self, "site_list_ids")

    @site_list_ids.setter
    def site_list_ids(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "site_list_ids", value)

    @_builtins.property
    @pulumi.getter(name="siteListVersions")
    def site_list_versions(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]:
        """
        List of site list versions
        """
        return pulumi.get(self, "site_list_versions")

    @site_list_versions.setter
    def site_list_versions(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "site_list_versions", value)

    @_builtins.property
    @pulumi.getter(name="vpnListIds")
    def vpn_list_ids(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]:
        """
        List of VPN list IDs
        """
        return pulumi.get(self, "vpn_list_ids")

    @vpn_list_ids.setter
    def vpn_list_ids(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "vpn_list_ids", value)

    @_builtins.property
    @pulumi.getter(name="vpnListVersions")
    def vpn_list_versions(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]:
        """
        List of VPN list versions
        """
        return pulumi.get(self, "vpn_list_versions")

    @vpn_list_versions.setter
    def vpn_list_versions(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "vpn_list_versions", value)


if not MYPY:
    class CflowdPolicyDefinitionCollectorArgsDict(TypedDict):
        bfd_metrics_exporting: NotRequired[pulumi.Input[_builtins.bool]]
        """
        BFD metrics exporting
        """
        export_spreading: NotRequired[pulumi.Input[_builtins.str]]
        """
        Export spreading
          - Choices: `enable`, `disable`
        """
        exporting_interval: NotRequired[pulumi.Input[_builtins.int]]
        """
        Exporting interval
        """
        ip_address: NotRequired[pulumi.Input[_builtins.str]]
        """
        IP address
        """
        port: NotRequired[pulumi.Input[_builtins.int]]
        """
        Port
          - Range: `1024`-`65535`
        """
        source_interface: NotRequired[pulumi.Input[_builtins.str]]
        """
        Source interface
        """
        transport: NotRequired[pulumi.Input[_builtins.str]]
        """
        Transport protocol
          - Choices: `transport_tcp`, `transport_udp`
        """
        vpn_id: NotRequired[pulumi.Input[_builtins.int]]
        """
        VPN ID
          - Range: `1`-`65535`
        """
elif False:
    CflowdPolicyDefinitionCollectorArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class CflowdPolicyDefinitionCollectorArgs:
    def __init__(__self__, *,
                 bfd_metrics_exporting: Optional[pulumi.Input[_builtins.bool]] = None,
                 export_spreading: Optional[pulumi.Input[_builtins.str]] = None,
                 exporting_interval: Optional[pulumi.Input[_builtins.int]] = None,
                 ip_address: Optional[pulumi.Input[_builtins.str]] = None,
                 port: Optional[pulumi.Input[_builtins.int]] = None,
                 source_interface: Optional[pulumi.Input[_builtins.str]] = None,
                 transport: Optional[pulumi.Input[_builtins.str]] = None,
                 vpn_id: Optional[pulumi.Input[_builtins.int]] = None):
        """
        :param pulumi.Input[_builtins.bool] bfd_metrics_exporting: BFD metrics exporting
        :param pulumi.Input[_builtins.str] export_spreading: Export spreading
                 - Choices: `enable`, `disable`
        :param pulumi.Input[_builtins.int] exporting_interval: Exporting interval
        :param pulumi.Input[_builtins.str] ip_address: IP address
        :param pulumi.Input[_builtins.int] port: Port
                 - Range: `1024`-`65535`
        :param pulumi.Input[_builtins.str] source_interface: Source interface
        :param pulumi.Input[_builtins.str] transport: Transport protocol
                 - Choices: `transport_tcp`, `transport_udp`
        :param pulumi.Input[_builtins.int] vpn_id: VPN ID
                 - Range: `1`-`65535`
        """
        if bfd_metrics_exporting is not None:
            pulumi.set(__self__, "bfd_metrics_exporting", bfd_metrics_exporting)
        if export_spreading is not None:
            pulumi.set(__self__, "export_spreading", export_spreading)
        if exporting_interval is not None:
            pulumi.set(__self__, "exporting_interval", exporting_interval)
        if ip_address is not None:
            pulumi.set(__self__, "ip_address", ip_address)
        if port is not None:
            pulumi.set(__self__, "port", port)
        if source_interface is not None:
            pulumi.set(__self__, "source_interface", source_interface)
        if transport is not None:
            pulumi.set(__self__, "transport", transport)
        if vpn_id is not None:
            pulumi.set(__self__, "vpn_id", vpn_id)

    @_builtins.property
    @pulumi.getter(name="bfdMetricsExporting")
    def bfd_metrics_exporting(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        BFD metrics exporting
        """
        return pulumi.get(self, "bfd_metrics_exporting")

    @bfd_metrics_exporting.setter
    def bfd_metrics_exporting(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "bfd_metrics_exporting", value)

    @_builtins.property
    @pulumi.getter(name="exportSpreading")
    def export_spreading(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Export spreading
          - Choices: `enable`, `disable`
        """
        return pulumi.get(self, "export_spreading")

    @export_spreading.setter
    def export_spreading(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "export_spreading", value)

    @_builtins.property
    @pulumi.getter(name="exportingInterval")
    def exporting_interval(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        Exporting interval
        """
        return pulumi.get(self, "exporting_interval")

    @exporting_interval.setter
    def exporting_interval(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "exporting_interval", value)

    @_builtins.property
    @pulumi.getter(name="ipAddress")
    def ip_address(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        IP address
        """
        return pulumi.get(self, "ip_address")

    @ip_address.setter
    def ip_address(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "ip_address", value)

    @_builtins.property
    @pulumi.getter
    def port(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        Port
          - Range: `1024`-`65535`
        """
        return pulumi.get(self, "port")

    @port.setter
    def port(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "port", value)

    @_builtins.property
    @pulumi.getter(name="sourceInterface")
    def source_interface(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Source interface
        """
        return pulumi.get(self, "source_interface")

    @source_interface.setter
    def source_interface(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "source_interface", value)

    @_builtins.property
    @pulumi.getter
    def transport(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Transport protocol
          - Choices: `transport_tcp`, `transport_udp`
        """
        return pulumi.get(self, "transport")

    @transport.setter
    def transport(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "transport", value)

    @_builtins.property
    @pulumi.getter(name="vpnId")
    def vpn_id(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        VPN ID
          - Range: `1`-`65535`
        """
        return pulumi.get(self, "vpn_id")

    @vpn_id.setter
    def vpn_id(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "vpn_id", value)


if not MYPY:
    class CiscoBfdFeatureTemplateColorArgsDict(TypedDict):
        color: NotRequired[pulumi.Input[_builtins.str]]
        """
        Set color that identifies the WAN transport tunnel
          - Choices: `default`, `mpls`, `metro-ethernet`, `biz-internet`, `public-internet`, `lte`, `3g`, `red`, `green`, `blue`, `gold`, `silver`, `bronze`, `custom1`, `custom2`, `custom3`, `private1`, `private2`, `private3`, `private4`, `private5`, `private6`
        """
        color_variable: NotRequired[pulumi.Input[_builtins.str]]
        """
        Variable name
        """
        dscp: NotRequired[pulumi.Input[_builtins.int]]
        """
        Set BFD Default DSCP value for tloc color
          - Range: `0`-`63`
          - Default value: `48`
        """
        dscp_variable: NotRequired[pulumi.Input[_builtins.str]]
        """
        Variable name
        """
        hello_interval: NotRequired[pulumi.Input[_builtins.int]]
        """
        Set how often BFD sends Hello packets
          - Range: `100`-`300000`
          - Default value: `1000`
        """
        hello_interval_variable: NotRequired[pulumi.Input[_builtins.str]]
        """
        Variable name
        """
        multiplier: NotRequired[pulumi.Input[_builtins.int]]
        """
        Set how many Hello packet intervals to wait before declaring that a tunnel has failed
          - Range: `1`-`60`
          - Default value: `7`
        """
        multiplier_variable: NotRequired[pulumi.Input[_builtins.str]]
        """
        Variable name
        """
        optional: NotRequired[pulumi.Input[_builtins.bool]]
        """
        Indicates if list item is considered optional.
        """
        pmtu_discovery: NotRequired[pulumi.Input[_builtins.bool]]
        """
        Control automatic path MTU discovery
          - Default value: `true`
        """
        pmtu_discovery_variable: NotRequired[pulumi.Input[_builtins.str]]
        """
        Variable name
        """
elif False:
    CiscoBfdFeatureTemplateColorArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class CiscoBfdFeatureTemplateColorArgs:
    def __init__(__self__, *,
                 color: Optional[pulumi.Input[_builtins.str]] = None,
                 color_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 dscp: Optional[pulumi.Input[_builtins.int]] = None,
                 dscp_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 hello_interval: Optional[pulumi.Input[_builtins.int]] = None,
                 hello_interval_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 multiplier: Optional[pulumi.Input[_builtins.int]] = None,
                 multiplier_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 optional: Optional[pulumi.Input[_builtins.bool]] = None,
                 pmtu_discovery: Optional[pulumi.Input[_builtins.bool]] = None,
                 pmtu_discovery_variable: Optional[pulumi.Input[_builtins.str]] = None):
        """
        :param pulumi.Input[_builtins.str] color: Set color that identifies the WAN transport tunnel
                 - Choices: `default`, `mpls`, `metro-ethernet`, `biz-internet`, `public-internet`, `lte`, `3g`, `red`, `green`, `blue`, `gold`, `silver`, `bronze`, `custom1`, `custom2`, `custom3`, `private1`, `private2`, `private3`, `private4`, `private5`, `private6`
        :param pulumi.Input[_builtins.str] color_variable: Variable name
        :param pulumi.Input[_builtins.int] dscp: Set BFD Default DSCP value for tloc color
                 - Range: `0`-`63`
                 - Default value: `48`
        :param pulumi.Input[_builtins.str] dscp_variable: Variable name
        :param pulumi.Input[_builtins.int] hello_interval: Set how often BFD sends Hello packets
                 - Range: `100`-`300000`
                 - Default value: `1000`
        :param pulumi.Input[_builtins.str] hello_interval_variable: Variable name
        :param pulumi.Input[_builtins.int] multiplier: Set how many Hello packet intervals to wait before declaring that a tunnel has failed
                 - Range: `1`-`60`
                 - Default value: `7`
        :param pulumi.Input[_builtins.str] multiplier_variable: Variable name
        :param pulumi.Input[_builtins.bool] optional: Indicates if list item is considered optional.
        :param pulumi.Input[_builtins.bool] pmtu_discovery: Control automatic path MTU discovery
                 - Default value: `true`
        :param pulumi.Input[_builtins.str] pmtu_discovery_variable: Variable name
        """
        if color is not None:
            pulumi.set(__self__, "color", color)
        if color_variable is not None:
            pulumi.set(__self__, "color_variable", color_variable)
        if dscp is not None:
            pulumi.set(__self__, "dscp", dscp)
        if dscp_variable is not None:
            pulumi.set(__self__, "dscp_variable", dscp_variable)
        if hello_interval is not None:
            pulumi.set(__self__, "hello_interval", hello_interval)
        if hello_interval_variable is not None:
            pulumi.set(__self__, "hello_interval_variable", hello_interval_variable)
        if multiplier is not None:
            pulumi.set(__self__, "multiplier", multiplier)
        if multiplier_variable is not None:
            pulumi.set(__self__, "multiplier_variable", multiplier_variable)
        if optional is not None:
            pulumi.set(__self__, "optional", optional)
        if pmtu_discovery is not None:
            pulumi.set(__self__, "pmtu_discovery", pmtu_discovery)
        if pmtu_discovery_variable is not None:
            pulumi.set(__self__, "pmtu_discovery_variable", pmtu_discovery_variable)

    @_builtins.property
    @pulumi.getter
    def color(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Set color that identifies the WAN transport tunnel
          - Choices: `default`, `mpls`, `metro-ethernet`, `biz-internet`, `public-internet`, `lte`, `3g`, `red`, `green`, `blue`, `gold`, `silver`, `bronze`, `custom1`, `custom2`, `custom3`, `private1`, `private2`, `private3`, `private4`, `private5`, `private6`
        """
        return pulumi.get(self, "color")

    @color.setter
    def color(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "color", value)

    @_builtins.property
    @pulumi.getter(name="colorVariable")
    def color_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "color_variable")

    @color_variable.setter
    def color_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "color_variable", value)

    @_builtins.property
    @pulumi.getter
    def dscp(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        Set BFD Default DSCP value for tloc color
          - Range: `0`-`63`
          - Default value: `48`
        """
        return pulumi.get(self, "dscp")

    @dscp.setter
    def dscp(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "dscp", value)

    @_builtins.property
    @pulumi.getter(name="dscpVariable")
    def dscp_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "dscp_variable")

    @dscp_variable.setter
    def dscp_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "dscp_variable", value)

    @_builtins.property
    @pulumi.getter(name="helloInterval")
    def hello_interval(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        Set how often BFD sends Hello packets
          - Range: `100`-`300000`
          - Default value: `1000`
        """
        return pulumi.get(self, "hello_interval")

    @hello_interval.setter
    def hello_interval(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "hello_interval", value)

    @_builtins.property
    @pulumi.getter(name="helloIntervalVariable")
    def hello_interval_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "hello_interval_variable")

    @hello_interval_variable.setter
    def hello_interval_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "hello_interval_variable", value)

    @_builtins.property
    @pulumi.getter
    def multiplier(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        Set how many Hello packet intervals to wait before declaring that a tunnel has failed
          - Range: `1`-`60`
          - Default value: `7`
        """
        return pulumi.get(self, "multiplier")

    @multiplier.setter
    def multiplier(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "multiplier", value)

    @_builtins.property
    @pulumi.getter(name="multiplierVariable")
    def multiplier_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "multiplier_variable")

    @multiplier_variable.setter
    def multiplier_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "multiplier_variable", value)

    @_builtins.property
    @pulumi.getter
    def optional(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Indicates if list item is considered optional.
        """
        return pulumi.get(self, "optional")

    @optional.setter
    def optional(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "optional", value)

    @_builtins.property
    @pulumi.getter(name="pmtuDiscovery")
    def pmtu_discovery(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Control automatic path MTU discovery
          - Default value: `true`
        """
        return pulumi.get(self, "pmtu_discovery")

    @pmtu_discovery.setter
    def pmtu_discovery(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "pmtu_discovery", value)

    @_builtins.property
    @pulumi.getter(name="pmtuDiscoveryVariable")
    def pmtu_discovery_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "pmtu_discovery_variable")

    @pmtu_discovery_variable.setter
    def pmtu_discovery_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "pmtu_discovery_variable", value)


if not MYPY:
    class CiscoBgpFeatureTemplateAddressFamilyArgsDict(TypedDict):
        default_information_originate: NotRequired[pulumi.Input[_builtins.bool]]
        """
        BGP Default Information Originate
          - Default value: `false`
        """
        default_information_originate_variable: NotRequired[pulumi.Input[_builtins.str]]
        """
        Variable name
        """
        family_type: NotRequired[pulumi.Input[_builtins.str]]
        """
        Set BGP address family
          - Choices: `ipv4-unicast`, `ipv6-unicast`
        """
        ipv4_aggregate_addresses: NotRequired[pulumi.Input[Sequence[pulumi.Input['CiscoBgpFeatureTemplateAddressFamilyIpv4AggregateAddressArgsDict']]]]
        """
        Aggregate prefixes in specific range
        """
        ipv4_networks: NotRequired[pulumi.Input[Sequence[pulumi.Input['CiscoBgpFeatureTemplateAddressFamilyIpv4NetworkArgsDict']]]]
        """
        Configure the networks for BGP to advertise
        """
        ipv6_aggregate_addresses: NotRequired[pulumi.Input[Sequence[pulumi.Input['CiscoBgpFeatureTemplateAddressFamilyIpv6AggregateAddressArgsDict']]]]
        """
        IPv6 Aggregate prefixes in specific range
        """
        ipv6_networks: NotRequired[pulumi.Input[Sequence[pulumi.Input['CiscoBgpFeatureTemplateAddressFamilyIpv6NetworkArgsDict']]]]
        """
        Configure the networks for BGP to advertise
        """
        maximum_paths: NotRequired[pulumi.Input[_builtins.int]]
        """
        Set maximum number of parallel IBGP paths for multipath load sharing
          - Range: `0`-`32`
        """
        maximum_paths_variable: NotRequired[pulumi.Input[_builtins.str]]
        """
        Variable name
        """
        optional: NotRequired[pulumi.Input[_builtins.bool]]
        """
        Indicates if list item is considered optional.
        """
        redistribute_routes: NotRequired[pulumi.Input[Sequence[pulumi.Input['CiscoBgpFeatureTemplateAddressFamilyRedistributeRouteArgsDict']]]]
        """
        Redistribute routes into BGP
        """
        table_map_filter: NotRequired[pulumi.Input[_builtins.bool]]
        """
        Filter
          - Default value: `false`
        """
        table_map_filter_variable: NotRequired[pulumi.Input[_builtins.str]]
        """
        Variable name
        """
        table_map_policy: NotRequired[pulumi.Input[_builtins.str]]
        """
        Map external entry attributes into routing table
        """
        table_map_policy_variable: NotRequired[pulumi.Input[_builtins.str]]
        """
        Variable name
        """
elif False:
    CiscoBgpFeatureTemplateAddressFamilyArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class CiscoBgpFeatureTemplateAddressFamilyArgs:
    def __init__(__self__, *,
                 default_information_originate: Optional[pulumi.Input[_builtins.bool]] = None,
                 default_information_originate_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 family_type: Optional[pulumi.Input[_builtins.str]] = None,
                 ipv4_aggregate_addresses: Optional[pulumi.Input[Sequence[pulumi.Input['CiscoBgpFeatureTemplateAddressFamilyIpv4AggregateAddressArgs']]]] = None,
                 ipv4_networks: Optional[pulumi.Input[Sequence[pulumi.Input['CiscoBgpFeatureTemplateAddressFamilyIpv4NetworkArgs']]]] = None,
                 ipv6_aggregate_addresses: Optional[pulumi.Input[Sequence[pulumi.Input['CiscoBgpFeatureTemplateAddressFamilyIpv6AggregateAddressArgs']]]] = None,
                 ipv6_networks: Optional[pulumi.Input[Sequence[pulumi.Input['CiscoBgpFeatureTemplateAddressFamilyIpv6NetworkArgs']]]] = None,
                 maximum_paths: Optional[pulumi.Input[_builtins.int]] = None,
                 maximum_paths_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 optional: Optional[pulumi.Input[_builtins.bool]] = None,
                 redistribute_routes: Optional[pulumi.Input[Sequence[pulumi.Input['CiscoBgpFeatureTemplateAddressFamilyRedistributeRouteArgs']]]] = None,
                 table_map_filter: Optional[pulumi.Input[_builtins.bool]] = None,
                 table_map_filter_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 table_map_policy: Optional[pulumi.Input[_builtins.str]] = None,
                 table_map_policy_variable: Optional[pulumi.Input[_builtins.str]] = None):
        """
        :param pulumi.Input[_builtins.bool] default_information_originate: BGP Default Information Originate
                 - Default value: `false`
        :param pulumi.Input[_builtins.str] default_information_originate_variable: Variable name
        :param pulumi.Input[_builtins.str] family_type: Set BGP address family
                 - Choices: `ipv4-unicast`, `ipv6-unicast`
        :param pulumi.Input[Sequence[pulumi.Input['CiscoBgpFeatureTemplateAddressFamilyIpv4AggregateAddressArgs']]] ipv4_aggregate_addresses: Aggregate prefixes in specific range
        :param pulumi.Input[Sequence[pulumi.Input['CiscoBgpFeatureTemplateAddressFamilyIpv4NetworkArgs']]] ipv4_networks: Configure the networks for BGP to advertise
        :param pulumi.Input[Sequence[pulumi.Input['CiscoBgpFeatureTemplateAddressFamilyIpv6AggregateAddressArgs']]] ipv6_aggregate_addresses: IPv6 Aggregate prefixes in specific range
        :param pulumi.Input[Sequence[pulumi.Input['CiscoBgpFeatureTemplateAddressFamilyIpv6NetworkArgs']]] ipv6_networks: Configure the networks for BGP to advertise
        :param pulumi.Input[_builtins.int] maximum_paths: Set maximum number of parallel IBGP paths for multipath load sharing
                 - Range: `0`-`32`
        :param pulumi.Input[_builtins.str] maximum_paths_variable: Variable name
        :param pulumi.Input[_builtins.bool] optional: Indicates if list item is considered optional.
        :param pulumi.Input[Sequence[pulumi.Input['CiscoBgpFeatureTemplateAddressFamilyRedistributeRouteArgs']]] redistribute_routes: Redistribute routes into BGP
        :param pulumi.Input[_builtins.bool] table_map_filter: Filter
                 - Default value: `false`
        :param pulumi.Input[_builtins.str] table_map_filter_variable: Variable name
        :param pulumi.Input[_builtins.str] table_map_policy: Map external entry attributes into routing table
        :param pulumi.Input[_builtins.str] table_map_policy_variable: Variable name
        """
        if default_information_originate is not None:
            pulumi.set(__self__, "default_information_originate", default_information_originate)
        if default_information_originate_variable is not None:
            pulumi.set(__self__, "default_information_originate_variable", default_information_originate_variable)
        if family_type is not None:
            pulumi.set(__self__, "family_type", family_type)
        if ipv4_aggregate_addresses is not None:
            pulumi.set(__self__, "ipv4_aggregate_addresses", ipv4_aggregate_addresses)
        if ipv4_networks is not None:
            pulumi.set(__self__, "ipv4_networks", ipv4_networks)
        if ipv6_aggregate_addresses is not None:
            pulumi.set(__self__, "ipv6_aggregate_addresses", ipv6_aggregate_addresses)
        if ipv6_networks is not None:
            pulumi.set(__self__, "ipv6_networks", ipv6_networks)
        if maximum_paths is not None:
            pulumi.set(__self__, "maximum_paths", maximum_paths)
        if maximum_paths_variable is not None:
            pulumi.set(__self__, "maximum_paths_variable", maximum_paths_variable)
        if optional is not None:
            pulumi.set(__self__, "optional", optional)
        if redistribute_routes is not None:
            pulumi.set(__self__, "redistribute_routes", redistribute_routes)
        if table_map_filter is not None:
            pulumi.set(__self__, "table_map_filter", table_map_filter)
        if table_map_filter_variable is not None:
            pulumi.set(__self__, "table_map_filter_variable", table_map_filter_variable)
        if table_map_policy is not None:
            pulumi.set(__self__, "table_map_policy", table_map_policy)
        if table_map_policy_variable is not None:
            pulumi.set(__self__, "table_map_policy_variable", table_map_policy_variable)

    @_builtins.property
    @pulumi.getter(name="defaultInformationOriginate")
    def default_information_originate(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        BGP Default Information Originate
          - Default value: `false`
        """
        return pulumi.get(self, "default_information_originate")

    @default_information_originate.setter
    def default_information_originate(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "default_information_originate", value)

    @_builtins.property
    @pulumi.getter(name="defaultInformationOriginateVariable")
    def default_information_originate_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "default_information_originate_variable")

    @default_information_originate_variable.setter
    def default_information_originate_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "default_information_originate_variable", value)

    @_builtins.property
    @pulumi.getter(name="familyType")
    def family_type(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Set BGP address family
          - Choices: `ipv4-unicast`, `ipv6-unicast`
        """
        return pulumi.get(self, "family_type")

    @family_type.setter
    def family_type(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "family_type", value)

    @_builtins.property
    @pulumi.getter(name="ipv4AggregateAddresses")
    def ipv4_aggregate_addresses(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['CiscoBgpFeatureTemplateAddressFamilyIpv4AggregateAddressArgs']]]]:
        """
        Aggregate prefixes in specific range
        """
        return pulumi.get(self, "ipv4_aggregate_addresses")

    @ipv4_aggregate_addresses.setter
    def ipv4_aggregate_addresses(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['CiscoBgpFeatureTemplateAddressFamilyIpv4AggregateAddressArgs']]]]):
        pulumi.set(self, "ipv4_aggregate_addresses", value)

    @_builtins.property
    @pulumi.getter(name="ipv4Networks")
    def ipv4_networks(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['CiscoBgpFeatureTemplateAddressFamilyIpv4NetworkArgs']]]]:
        """
        Configure the networks for BGP to advertise
        """
        return pulumi.get(self, "ipv4_networks")

    @ipv4_networks.setter
    def ipv4_networks(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['CiscoBgpFeatureTemplateAddressFamilyIpv4NetworkArgs']]]]):
        pulumi.set(self, "ipv4_networks", value)

    @_builtins.property
    @pulumi.getter(name="ipv6AggregateAddresses")
    def ipv6_aggregate_addresses(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['CiscoBgpFeatureTemplateAddressFamilyIpv6AggregateAddressArgs']]]]:
        """
        IPv6 Aggregate prefixes in specific range
        """
        return pulumi.get(self, "ipv6_aggregate_addresses")

    @ipv6_aggregate_addresses.setter
    def ipv6_aggregate_addresses(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['CiscoBgpFeatureTemplateAddressFamilyIpv6AggregateAddressArgs']]]]):
        pulumi.set(self, "ipv6_aggregate_addresses", value)

    @_builtins.property
    @pulumi.getter(name="ipv6Networks")
    def ipv6_networks(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['CiscoBgpFeatureTemplateAddressFamilyIpv6NetworkArgs']]]]:
        """
        Configure the networks for BGP to advertise
        """
        return pulumi.get(self, "ipv6_networks")

    @ipv6_networks.setter
    def ipv6_networks(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['CiscoBgpFeatureTemplateAddressFamilyIpv6NetworkArgs']]]]):
        pulumi.set(self, "ipv6_networks", value)

    @_builtins.property
    @pulumi.getter(name="maximumPaths")
    def maximum_paths(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        Set maximum number of parallel IBGP paths for multipath load sharing
          - Range: `0`-`32`
        """
        return pulumi.get(self, "maximum_paths")

    @maximum_paths.setter
    def maximum_paths(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "maximum_paths", value)

    @_builtins.property
    @pulumi.getter(name="maximumPathsVariable")
    def maximum_paths_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "maximum_paths_variable")

    @maximum_paths_variable.setter
    def maximum_paths_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "maximum_paths_variable", value)

    @_builtins.property
    @pulumi.getter
    def optional(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Indicates if list item is considered optional.
        """
        return pulumi.get(self, "optional")

    @optional.setter
    def optional(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "optional", value)

    @_builtins.property
    @pulumi.getter(name="redistributeRoutes")
    def redistribute_routes(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['CiscoBgpFeatureTemplateAddressFamilyRedistributeRouteArgs']]]]:
        """
        Redistribute routes into BGP
        """
        return pulumi.get(self, "redistribute_routes")

    @redistribute_routes.setter
    def redistribute_routes(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['CiscoBgpFeatureTemplateAddressFamilyRedistributeRouteArgs']]]]):
        pulumi.set(self, "redistribute_routes", value)

    @_builtins.property
    @pulumi.getter(name="tableMapFilter")
    def table_map_filter(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Filter
          - Default value: `false`
        """
        return pulumi.get(self, "table_map_filter")

    @table_map_filter.setter
    def table_map_filter(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "table_map_filter", value)

    @_builtins.property
    @pulumi.getter(name="tableMapFilterVariable")
    def table_map_filter_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "table_map_filter_variable")

    @table_map_filter_variable.setter
    def table_map_filter_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "table_map_filter_variable", value)

    @_builtins.property
    @pulumi.getter(name="tableMapPolicy")
    def table_map_policy(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Map external entry attributes into routing table
        """
        return pulumi.get(self, "table_map_policy")

    @table_map_policy.setter
    def table_map_policy(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "table_map_policy", value)

    @_builtins.property
    @pulumi.getter(name="tableMapPolicyVariable")
    def table_map_policy_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "table_map_policy_variable")

    @table_map_policy_variable.setter
    def table_map_policy_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "table_map_policy_variable", value)


if not MYPY:
    class CiscoBgpFeatureTemplateAddressFamilyIpv4AggregateAddressArgsDict(TypedDict):
        as_set_path: NotRequired[pulumi.Input[_builtins.bool]]
        """
        Set AS set path information
          - Default value: `false`
        """
        as_set_path_variable: NotRequired[pulumi.Input[_builtins.str]]
        """
        Variable name
        """
        optional: NotRequired[pulumi.Input[_builtins.bool]]
        """
        Indicates if list item is considered optional.
        """
        prefix: NotRequired[pulumi.Input[_builtins.str]]
        """
        Configure the prefixes to aggregate
        """
        prefix_variable: NotRequired[pulumi.Input[_builtins.str]]
        """
        Variable name
        """
        summary_only: NotRequired[pulumi.Input[_builtins.bool]]
        """
        Filter out more specific routes from updates
          - Default value: `false`
        """
        summary_only_variable: NotRequired[pulumi.Input[_builtins.str]]
        """
        Variable name
        """
elif False:
    CiscoBgpFeatureTemplateAddressFamilyIpv4AggregateAddressArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class CiscoBgpFeatureTemplateAddressFamilyIpv4AggregateAddressArgs:
    def __init__(__self__, *,
                 as_set_path: Optional[pulumi.Input[_builtins.bool]] = None,
                 as_set_path_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 optional: Optional[pulumi.Input[_builtins.bool]] = None,
                 prefix: Optional[pulumi.Input[_builtins.str]] = None,
                 prefix_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 summary_only: Optional[pulumi.Input[_builtins.bool]] = None,
                 summary_only_variable: Optional[pulumi.Input[_builtins.str]] = None):
        """
        :param pulumi.Input[_builtins.bool] as_set_path: Set AS set path information
                 - Default value: `false`
        :param pulumi.Input[_builtins.str] as_set_path_variable: Variable name
        :param pulumi.Input[_builtins.bool] optional: Indicates if list item is considered optional.
        :param pulumi.Input[_builtins.str] prefix: Configure the prefixes to aggregate
        :param pulumi.Input[_builtins.str] prefix_variable: Variable name
        :param pulumi.Input[_builtins.bool] summary_only: Filter out more specific routes from updates
                 - Default value: `false`
        :param pulumi.Input[_builtins.str] summary_only_variable: Variable name
        """
        if as_set_path is not None:
            pulumi.set(__self__, "as_set_path", as_set_path)
        if as_set_path_variable is not None:
            pulumi.set(__self__, "as_set_path_variable", as_set_path_variable)
        if optional is not None:
            pulumi.set(__self__, "optional", optional)
        if prefix is not None:
            pulumi.set(__self__, "prefix", prefix)
        if prefix_variable is not None:
            pulumi.set(__self__, "prefix_variable", prefix_variable)
        if summary_only is not None:
            pulumi.set(__self__, "summary_only", summary_only)
        if summary_only_variable is not None:
            pulumi.set(__self__, "summary_only_variable", summary_only_variable)

    @_builtins.property
    @pulumi.getter(name="asSetPath")
    def as_set_path(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Set AS set path information
          - Default value: `false`
        """
        return pulumi.get(self, "as_set_path")

    @as_set_path.setter
    def as_set_path(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "as_set_path", value)

    @_builtins.property
    @pulumi.getter(name="asSetPathVariable")
    def as_set_path_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "as_set_path_variable")

    @as_set_path_variable.setter
    def as_set_path_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "as_set_path_variable", value)

    @_builtins.property
    @pulumi.getter
    def optional(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Indicates if list item is considered optional.
        """
        return pulumi.get(self, "optional")

    @optional.setter
    def optional(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "optional", value)

    @_builtins.property
    @pulumi.getter
    def prefix(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Configure the prefixes to aggregate
        """
        return pulumi.get(self, "prefix")

    @prefix.setter
    def prefix(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "prefix", value)

    @_builtins.property
    @pulumi.getter(name="prefixVariable")
    def prefix_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "prefix_variable")

    @prefix_variable.setter
    def prefix_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "prefix_variable", value)

    @_builtins.property
    @pulumi.getter(name="summaryOnly")
    def summary_only(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Filter out more specific routes from updates
          - Default value: `false`
        """
        return pulumi.get(self, "summary_only")

    @summary_only.setter
    def summary_only(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "summary_only", value)

    @_builtins.property
    @pulumi.getter(name="summaryOnlyVariable")
    def summary_only_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "summary_only_variable")

    @summary_only_variable.setter
    def summary_only_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "summary_only_variable", value)


if not MYPY:
    class CiscoBgpFeatureTemplateAddressFamilyIpv4NetworkArgsDict(TypedDict):
        optional: NotRequired[pulumi.Input[_builtins.bool]]
        """
        Indicates if list item is considered optional.
        """
        prefix: NotRequired[pulumi.Input[_builtins.str]]
        """
        Configure the prefixes for BGP to announce
        """
        prefix_variable: NotRequired[pulumi.Input[_builtins.str]]
        """
        Variable name
        """
elif False:
    CiscoBgpFeatureTemplateAddressFamilyIpv4NetworkArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class CiscoBgpFeatureTemplateAddressFamilyIpv4NetworkArgs:
    def __init__(__self__, *,
                 optional: Optional[pulumi.Input[_builtins.bool]] = None,
                 prefix: Optional[pulumi.Input[_builtins.str]] = None,
                 prefix_variable: Optional[pulumi.Input[_builtins.str]] = None):
        """
        :param pulumi.Input[_builtins.bool] optional: Indicates if list item is considered optional.
        :param pulumi.Input[_builtins.str] prefix: Configure the prefixes for BGP to announce
        :param pulumi.Input[_builtins.str] prefix_variable: Variable name
        """
        if optional is not None:
            pulumi.set(__self__, "optional", optional)
        if prefix is not None:
            pulumi.set(__self__, "prefix", prefix)
        if prefix_variable is not None:
            pulumi.set(__self__, "prefix_variable", prefix_variable)

    @_builtins.property
    @pulumi.getter
    def optional(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Indicates if list item is considered optional.
        """
        return pulumi.get(self, "optional")

    @optional.setter
    def optional(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "optional", value)

    @_builtins.property
    @pulumi.getter
    def prefix(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Configure the prefixes for BGP to announce
        """
        return pulumi.get(self, "prefix")

    @prefix.setter
    def prefix(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "prefix", value)

    @_builtins.property
    @pulumi.getter(name="prefixVariable")
    def prefix_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "prefix_variable")

    @prefix_variable.setter
    def prefix_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "prefix_variable", value)


if not MYPY:
    class CiscoBgpFeatureTemplateAddressFamilyIpv6AggregateAddressArgsDict(TypedDict):
        as_set_path: NotRequired[pulumi.Input[_builtins.bool]]
        """
        Set AS set path information
          - Default value: `false`
        """
        as_set_path_variable: NotRequired[pulumi.Input[_builtins.str]]
        """
        Variable name
        """
        optional: NotRequired[pulumi.Input[_builtins.bool]]
        """
        Indicates if list item is considered optional.
        """
        prefix: NotRequired[pulumi.Input[_builtins.str]]
        """
        Configure the IPv6 prefixes to aggregate
        """
        prefix_variable: NotRequired[pulumi.Input[_builtins.str]]
        """
        Variable name
        """
        summary_only: NotRequired[pulumi.Input[_builtins.bool]]
        """
        Filter out more specific routes from updates
          - Default value: `false`
        """
        summary_only_variable: NotRequired[pulumi.Input[_builtins.str]]
        """
        Variable name
        """
elif False:
    CiscoBgpFeatureTemplateAddressFamilyIpv6AggregateAddressArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class CiscoBgpFeatureTemplateAddressFamilyIpv6AggregateAddressArgs:
    def __init__(__self__, *,
                 as_set_path: Optional[pulumi.Input[_builtins.bool]] = None,
                 as_set_path_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 optional: Optional[pulumi.Input[_builtins.bool]] = None,
                 prefix: Optional[pulumi.Input[_builtins.str]] = None,
                 prefix_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 summary_only: Optional[pulumi.Input[_builtins.bool]] = None,
                 summary_only_variable: Optional[pulumi.Input[_builtins.str]] = None):
        """
        :param pulumi.Input[_builtins.bool] as_set_path: Set AS set path information
                 - Default value: `false`
        :param pulumi.Input[_builtins.str] as_set_path_variable: Variable name
        :param pulumi.Input[_builtins.bool] optional: Indicates if list item is considered optional.
        :param pulumi.Input[_builtins.str] prefix: Configure the IPv6 prefixes to aggregate
        :param pulumi.Input[_builtins.str] prefix_variable: Variable name
        :param pulumi.Input[_builtins.bool] summary_only: Filter out more specific routes from updates
                 - Default value: `false`
        :param pulumi.Input[_builtins.str] summary_only_variable: Variable name
        """
        if as_set_path is not None:
            pulumi.set(__self__, "as_set_path", as_set_path)
        if as_set_path_variable is not None:
            pulumi.set(__self__, "as_set_path_variable", as_set_path_variable)
        if optional is not None:
            pulumi.set(__self__, "optional", optional)
        if prefix is not None:
            pulumi.set(__self__, "prefix", prefix)
        if prefix_variable is not None:
            pulumi.set(__self__, "prefix_variable", prefix_variable)
        if summary_only is not None:
            pulumi.set(__self__, "summary_only", summary_only)
        if summary_only_variable is not None:
            pulumi.set(__self__, "summary_only_variable", summary_only_variable)

    @_builtins.property
    @pulumi.getter(name="asSetPath")
    def as_set_path(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Set AS set path information
          - Default value: `false`
        """
        return pulumi.get(self, "as_set_path")

    @as_set_path.setter
    def as_set_path(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "as_set_path", value)

    @_builtins.property
    @pulumi.getter(name="asSetPathVariable")
    def as_set_path_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "as_set_path_variable")

    @as_set_path_variable.setter
    def as_set_path_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "as_set_path_variable", value)

    @_builtins.property
    @pulumi.getter
    def optional(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Indicates if list item is considered optional.
        """
        return pulumi.get(self, "optional")

    @optional.setter
    def optional(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "optional", value)

    @_builtins.property
    @pulumi.getter
    def prefix(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Configure the IPv6 prefixes to aggregate
        """
        return pulumi.get(self, "prefix")

    @prefix.setter
    def prefix(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "prefix", value)

    @_builtins.property
    @pulumi.getter(name="prefixVariable")
    def prefix_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "prefix_variable")

    @prefix_variable.setter
    def prefix_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "prefix_variable", value)

    @_builtins.property
    @pulumi.getter(name="summaryOnly")
    def summary_only(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Filter out more specific routes from updates
          - Default value: `false`
        """
        return pulumi.get(self, "summary_only")

    @summary_only.setter
    def summary_only(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "summary_only", value)

    @_builtins.property
    @pulumi.getter(name="summaryOnlyVariable")
    def summary_only_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "summary_only_variable")

    @summary_only_variable.setter
    def summary_only_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "summary_only_variable", value)


if not MYPY:
    class CiscoBgpFeatureTemplateAddressFamilyIpv6NetworkArgsDict(TypedDict):
        optional: NotRequired[pulumi.Input[_builtins.bool]]
        """
        Indicates if list item is considered optional.
        """
        prefix: NotRequired[pulumi.Input[_builtins.str]]
        """
        Configure the prefixes for BGP to announce
        """
        prefix_variable: NotRequired[pulumi.Input[_builtins.str]]
        """
        Variable name
        """
elif False:
    CiscoBgpFeatureTemplateAddressFamilyIpv6NetworkArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class CiscoBgpFeatureTemplateAddressFamilyIpv6NetworkArgs:
    def __init__(__self__, *,
                 optional: Optional[pulumi.Input[_builtins.bool]] = None,
                 prefix: Optional[pulumi.Input[_builtins.str]] = None,
                 prefix_variable: Optional[pulumi.Input[_builtins.str]] = None):
        """
        :param pulumi.Input[_builtins.bool] optional: Indicates if list item is considered optional.
        :param pulumi.Input[_builtins.str] prefix: Configure the prefixes for BGP to announce
        :param pulumi.Input[_builtins.str] prefix_variable: Variable name
        """
        if optional is not None:
            pulumi.set(__self__, "optional", optional)
        if prefix is not None:
            pulumi.set(__self__, "prefix", prefix)
        if prefix_variable is not None:
            pulumi.set(__self__, "prefix_variable", prefix_variable)

    @_builtins.property
    @pulumi.getter
    def optional(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Indicates if list item is considered optional.
        """
        return pulumi.get(self, "optional")

    @optional.setter
    def optional(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "optional", value)

    @_builtins.property
    @pulumi.getter
    def prefix(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Configure the prefixes for BGP to announce
        """
        return pulumi.get(self, "prefix")

    @prefix.setter
    def prefix(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "prefix", value)

    @_builtins.property
    @pulumi.getter(name="prefixVariable")
    def prefix_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "prefix_variable")

    @prefix_variable.setter
    def prefix_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "prefix_variable", value)


if not MYPY:
    class CiscoBgpFeatureTemplateAddressFamilyRedistributeRouteArgsDict(TypedDict):
        optional: NotRequired[pulumi.Input[_builtins.bool]]
        """
        Indicates if list item is considered optional.
        """
        protocol: NotRequired[pulumi.Input[_builtins.str]]
        """
        Set the protocol to redistribute routes from
          - Choices: `static`, `connected`, `ospf`, `ospfv3`, `omp`, `eigrp`, `nat`
        """
        protocol_variable: NotRequired[pulumi.Input[_builtins.str]]
        """
        Variable name
        """
        route_policy: NotRequired[pulumi.Input[_builtins.str]]
        """
        Configure policy to apply to prefixes received from BGP neighbor
        """
        route_policy_variable: NotRequired[pulumi.Input[_builtins.str]]
        """
        Variable name
        """
elif False:
    CiscoBgpFeatureTemplateAddressFamilyRedistributeRouteArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class CiscoBgpFeatureTemplateAddressFamilyRedistributeRouteArgs:
    def __init__(__self__, *,
                 optional: Optional[pulumi.Input[_builtins.bool]] = None,
                 protocol: Optional[pulumi.Input[_builtins.str]] = None,
                 protocol_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 route_policy: Optional[pulumi.Input[_builtins.str]] = None,
                 route_policy_variable: Optional[pulumi.Input[_builtins.str]] = None):
        """
        :param pulumi.Input[_builtins.bool] optional: Indicates if list item is considered optional.
        :param pulumi.Input[_builtins.str] protocol: Set the protocol to redistribute routes from
                 - Choices: `static`, `connected`, `ospf`, `ospfv3`, `omp`, `eigrp`, `nat`
        :param pulumi.Input[_builtins.str] protocol_variable: Variable name
        :param pulumi.Input[_builtins.str] route_policy: Configure policy to apply to prefixes received from BGP neighbor
        :param pulumi.Input[_builtins.str] route_policy_variable: Variable name
        """
        if optional is not None:
            pulumi.set(__self__, "optional", optional)
        if protocol is not None:
            pulumi.set(__self__, "protocol", protocol)
        if protocol_variable is not None:
            pulumi.set(__self__, "protocol_variable", protocol_variable)
        if route_policy is not None:
            pulumi.set(__self__, "route_policy", route_policy)
        if route_policy_variable is not None:
            pulumi.set(__self__, "route_policy_variable", route_policy_variable)

    @_builtins.property
    @pulumi.getter
    def optional(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Indicates if list item is considered optional.
        """
        return pulumi.get(self, "optional")

    @optional.setter
    def optional(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "optional", value)

    @_builtins.property
    @pulumi.getter
    def protocol(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Set the protocol to redistribute routes from
          - Choices: `static`, `connected`, `ospf`, `ospfv3`, `omp`, `eigrp`, `nat`
        """
        return pulumi.get(self, "protocol")

    @protocol.setter
    def protocol(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "protocol", value)

    @_builtins.property
    @pulumi.getter(name="protocolVariable")
    def protocol_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "protocol_variable")

    @protocol_variable.setter
    def protocol_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "protocol_variable", value)

    @_builtins.property
    @pulumi.getter(name="routePolicy")
    def route_policy(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Configure policy to apply to prefixes received from BGP neighbor
        """
        return pulumi.get(self, "route_policy")

    @route_policy.setter
    def route_policy(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "route_policy", value)

    @_builtins.property
    @pulumi.getter(name="routePolicyVariable")
    def route_policy_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "route_policy_variable")

    @route_policy_variable.setter
    def route_policy_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "route_policy_variable", value)


if not MYPY:
    class CiscoBgpFeatureTemplateIpv4NeighborArgsDict(TypedDict):
        address: NotRequired[pulumi.Input[_builtins.str]]
        """
        Set neighbor address
        """
        address_families: NotRequired[pulumi.Input[Sequence[pulumi.Input['CiscoBgpFeatureTemplateIpv4NeighborAddressFamilyArgsDict']]]]
        """
        Set BGP address family
        """
        address_variable: NotRequired[pulumi.Input[_builtins.str]]
        """
        Variable name
        """
        allow_as_in: NotRequired[pulumi.Input[_builtins.int]]
        """
        As Number
          - Range: `1`-`10`
        """
        allow_as_in_variable: NotRequired[pulumi.Input[_builtins.str]]
        """
        Variable name
        """
        as_override: NotRequired[pulumi.Input[_builtins.bool]]
        """
        As Override
          - Default value: `false`
        """
        as_override_variable: NotRequired[pulumi.Input[_builtins.str]]
        """
        Variable name
        """
        description: NotRequired[pulumi.Input[_builtins.str]]
        """
        Set description
        """
        description_variable: NotRequired[pulumi.Input[_builtins.str]]
        """
        Variable name
        """
        ebgp_multihop: NotRequired[pulumi.Input[_builtins.int]]
        """
        Set TTL value for peers that are not directly connected
          - Range: `1`-`255`
          - Default value: `1`
        """
        ebgp_multihop_variable: NotRequired[pulumi.Input[_builtins.str]]
        """
        Variable name
        """
        holdtime: NotRequired[pulumi.Input[_builtins.int]]
        """
        Set how long to wait since receiving a keepalive message to consider BGP peer unavailable
          - Range: `0`-`65535`
        """
        holdtime_variable: NotRequired[pulumi.Input[_builtins.str]]
        """
        Variable name
        """
        keepalive: NotRequired[pulumi.Input[_builtins.int]]
        """
        Set how often to advertise keepalive messages to BGP peer
          - Range: `0`-`65535`
        """
        keepalive_variable: NotRequired[pulumi.Input[_builtins.str]]
        """
        Variable name
        """
        next_hop_self: NotRequired[pulumi.Input[_builtins.bool]]
        """
        Set router to be next hop for routes advertised to neighbor
          - Default value: `false`
        """
        next_hop_self_variable: NotRequired[pulumi.Input[_builtins.str]]
        """
        Variable name
        """
        optional: NotRequired[pulumi.Input[_builtins.bool]]
        """
        Indicates if list item is considered optional.
        """
        password: NotRequired[pulumi.Input[_builtins.str]]
        """
        Set MD5 password on TCP connection with BGP peer
        """
        password_variable: NotRequired[pulumi.Input[_builtins.str]]
        """
        Variable name
        """
        remote_as: NotRequired[pulumi.Input[_builtins.str]]
        """
        Set remote autonomous system number
        """
        remote_as_variable: NotRequired[pulumi.Input[_builtins.str]]
        """
        Variable name
        """
        send_community: NotRequired[pulumi.Input[_builtins.bool]]
        """
        Send community attribute
          - Default value: `true`
        """
        send_community_variable: NotRequired[pulumi.Input[_builtins.str]]
        """
        Variable name
        """
        send_ext_community: NotRequired[pulumi.Input[_builtins.bool]]
        """
        Send extended community attribute
          - Default value: `true`
        """
        send_ext_community_variable: NotRequired[pulumi.Input[_builtins.str]]
        """
        Variable name
        """
        send_label: NotRequired[pulumi.Input[_builtins.bool]]
        """
        Send label
          - Default value: `false`
        """
        send_label_explicit: NotRequired[pulumi.Input[_builtins.bool]]
        """
        Send label
          - Default value: `false`
        """
        send_label_explicit_variable: NotRequired[pulumi.Input[_builtins.str]]
        """
        Variable name
        """
        send_label_variable: NotRequired[pulumi.Input[_builtins.str]]
        """
        Variable name
        """
        shutdown: NotRequired[pulumi.Input[_builtins.bool]]
        """
        Enable or disable a BGP neighbor
          - Default value: `false`
        """
        shutdown_variable: NotRequired[pulumi.Input[_builtins.str]]
        """
        Variable name
        """
        source_interface: NotRequired[pulumi.Input[_builtins.str]]
        """
        Set IP address of interface for TCP connection to BGP neighbor
        """
        source_interface_variable: NotRequired[pulumi.Input[_builtins.str]]
        """
        Variable name
        """
elif False:
    CiscoBgpFeatureTemplateIpv4NeighborArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class CiscoBgpFeatureTemplateIpv4NeighborArgs:
    def __init__(__self__, *,
                 address: Optional[pulumi.Input[_builtins.str]] = None,
                 address_families: Optional[pulumi.Input[Sequence[pulumi.Input['CiscoBgpFeatureTemplateIpv4NeighborAddressFamilyArgs']]]] = None,
                 address_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 allow_as_in: Optional[pulumi.Input[_builtins.int]] = None,
                 allow_as_in_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 as_override: Optional[pulumi.Input[_builtins.bool]] = None,
                 as_override_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 description: Optional[pulumi.Input[_builtins.str]] = None,
                 description_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 ebgp_multihop: Optional[pulumi.Input[_builtins.int]] = None,
                 ebgp_multihop_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 holdtime: Optional[pulumi.Input[_builtins.int]] = None,
                 holdtime_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 keepalive: Optional[pulumi.Input[_builtins.int]] = None,
                 keepalive_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 next_hop_self: Optional[pulumi.Input[_builtins.bool]] = None,
                 next_hop_self_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 optional: Optional[pulumi.Input[_builtins.bool]] = None,
                 password: Optional[pulumi.Input[_builtins.str]] = None,
                 password_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 remote_as: Optional[pulumi.Input[_builtins.str]] = None,
                 remote_as_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 send_community: Optional[pulumi.Input[_builtins.bool]] = None,
                 send_community_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 send_ext_community: Optional[pulumi.Input[_builtins.bool]] = None,
                 send_ext_community_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 send_label: Optional[pulumi.Input[_builtins.bool]] = None,
                 send_label_explicit: Optional[pulumi.Input[_builtins.bool]] = None,
                 send_label_explicit_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 send_label_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 shutdown: Optional[pulumi.Input[_builtins.bool]] = None,
                 shutdown_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 source_interface: Optional[pulumi.Input[_builtins.str]] = None,
                 source_interface_variable: Optional[pulumi.Input[_builtins.str]] = None):
        """
        :param pulumi.Input[_builtins.str] address: Set neighbor address
        :param pulumi.Input[Sequence[pulumi.Input['CiscoBgpFeatureTemplateIpv4NeighborAddressFamilyArgs']]] address_families: Set BGP address family
        :param pulumi.Input[_builtins.str] address_variable: Variable name
        :param pulumi.Input[_builtins.int] allow_as_in: As Number
                 - Range: `1`-`10`
        :param pulumi.Input[_builtins.str] allow_as_in_variable: Variable name
        :param pulumi.Input[_builtins.bool] as_override: As Override
                 - Default value: `false`
        :param pulumi.Input[_builtins.str] as_override_variable: Variable name
        :param pulumi.Input[_builtins.str] description: Set description
        :param pulumi.Input[_builtins.str] description_variable: Variable name
        :param pulumi.Input[_builtins.int] ebgp_multihop: Set TTL value for peers that are not directly connected
                 - Range: `1`-`255`
                 - Default value: `1`
        :param pulumi.Input[_builtins.str] ebgp_multihop_variable: Variable name
        :param pulumi.Input[_builtins.int] holdtime: Set how long to wait since receiving a keepalive message to consider BGP peer unavailable
                 - Range: `0`-`65535`
        :param pulumi.Input[_builtins.str] holdtime_variable: Variable name
        :param pulumi.Input[_builtins.int] keepalive: Set how often to advertise keepalive messages to BGP peer
                 - Range: `0`-`65535`
        :param pulumi.Input[_builtins.str] keepalive_variable: Variable name
        :param pulumi.Input[_builtins.bool] next_hop_self: Set router to be next hop for routes advertised to neighbor
                 - Default value: `false`
        :param pulumi.Input[_builtins.str] next_hop_self_variable: Variable name
        :param pulumi.Input[_builtins.bool] optional: Indicates if list item is considered optional.
        :param pulumi.Input[_builtins.str] password: Set MD5 password on TCP connection with BGP peer
        :param pulumi.Input[_builtins.str] password_variable: Variable name
        :param pulumi.Input[_builtins.str] remote_as: Set remote autonomous system number
        :param pulumi.Input[_builtins.str] remote_as_variable: Variable name
        :param pulumi.Input[_builtins.bool] send_community: Send community attribute
                 - Default value: `true`
        :param pulumi.Input[_builtins.str] send_community_variable: Variable name
        :param pulumi.Input[_builtins.bool] send_ext_community: Send extended community attribute
                 - Default value: `true`
        :param pulumi.Input[_builtins.str] send_ext_community_variable: Variable name
        :param pulumi.Input[_builtins.bool] send_label: Send label
                 - Default value: `false`
        :param pulumi.Input[_builtins.bool] send_label_explicit: Send label
                 - Default value: `false`
        :param pulumi.Input[_builtins.str] send_label_explicit_variable: Variable name
        :param pulumi.Input[_builtins.str] send_label_variable: Variable name
        :param pulumi.Input[_builtins.bool] shutdown: Enable or disable a BGP neighbor
                 - Default value: `false`
        :param pulumi.Input[_builtins.str] shutdown_variable: Variable name
        :param pulumi.Input[_builtins.str] source_interface: Set IP address of interface for TCP connection to BGP neighbor
        :param pulumi.Input[_builtins.str] source_interface_variable: Variable name
        """
        if address is not None:
            pulumi.set(__self__, "address", address)
        if address_families is not None:
            pulumi.set(__self__, "address_families", address_families)
        if address_variable is not None:
            pulumi.set(__self__, "address_variable", address_variable)
        if allow_as_in is not None:
            pulumi.set(__self__, "allow_as_in", allow_as_in)
        if allow_as_in_variable is not None:
            pulumi.set(__self__, "allow_as_in_variable", allow_as_in_variable)
        if as_override is not None:
            pulumi.set(__self__, "as_override", as_override)
        if as_override_variable is not None:
            pulumi.set(__self__, "as_override_variable", as_override_variable)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if description_variable is not None:
            pulumi.set(__self__, "description_variable", description_variable)
        if ebgp_multihop is not None:
            pulumi.set(__self__, "ebgp_multihop", ebgp_multihop)
        if ebgp_multihop_variable is not None:
            pulumi.set(__self__, "ebgp_multihop_variable", ebgp_multihop_variable)
        if holdtime is not None:
            pulumi.set(__self__, "holdtime", holdtime)
        if holdtime_variable is not None:
            pulumi.set(__self__, "holdtime_variable", holdtime_variable)
        if keepalive is not None:
            pulumi.set(__self__, "keepalive", keepalive)
        if keepalive_variable is not None:
            pulumi.set(__self__, "keepalive_variable", keepalive_variable)
        if next_hop_self is not None:
            pulumi.set(__self__, "next_hop_self", next_hop_self)
        if next_hop_self_variable is not None:
            pulumi.set(__self__, "next_hop_self_variable", next_hop_self_variable)
        if optional is not None:
            pulumi.set(__self__, "optional", optional)
        if password is not None:
            pulumi.set(__self__, "password", password)
        if password_variable is not None:
            pulumi.set(__self__, "password_variable", password_variable)
        if remote_as is not None:
            pulumi.set(__self__, "remote_as", remote_as)
        if remote_as_variable is not None:
            pulumi.set(__self__, "remote_as_variable", remote_as_variable)
        if send_community is not None:
            pulumi.set(__self__, "send_community", send_community)
        if send_community_variable is not None:
            pulumi.set(__self__, "send_community_variable", send_community_variable)
        if send_ext_community is not None:
            pulumi.set(__self__, "send_ext_community", send_ext_community)
        if send_ext_community_variable is not None:
            pulumi.set(__self__, "send_ext_community_variable", send_ext_community_variable)
        if send_label is not None:
            pulumi.set(__self__, "send_label", send_label)
        if send_label_explicit is not None:
            pulumi.set(__self__, "send_label_explicit", send_label_explicit)
        if send_label_explicit_variable is not None:
            pulumi.set(__self__, "send_label_explicit_variable", send_label_explicit_variable)
        if send_label_variable is not None:
            pulumi.set(__self__, "send_label_variable", send_label_variable)
        if shutdown is not None:
            pulumi.set(__self__, "shutdown", shutdown)
        if shutdown_variable is not None:
            pulumi.set(__self__, "shutdown_variable", shutdown_variable)
        if source_interface is not None:
            pulumi.set(__self__, "source_interface", source_interface)
        if source_interface_variable is not None:
            pulumi.set(__self__, "source_interface_variable", source_interface_variable)

    @_builtins.property
    @pulumi.getter
    def address(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Set neighbor address
        """
        return pulumi.get(self, "address")

    @address.setter
    def address(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "address", value)

    @_builtins.property
    @pulumi.getter(name="addressFamilies")
    def address_families(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['CiscoBgpFeatureTemplateIpv4NeighborAddressFamilyArgs']]]]:
        """
        Set BGP address family
        """
        return pulumi.get(self, "address_families")

    @address_families.setter
    def address_families(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['CiscoBgpFeatureTemplateIpv4NeighborAddressFamilyArgs']]]]):
        pulumi.set(self, "address_families", value)

    @_builtins.property
    @pulumi.getter(name="addressVariable")
    def address_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "address_variable")

    @address_variable.setter
    def address_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "address_variable", value)

    @_builtins.property
    @pulumi.getter(name="allowAsIn")
    def allow_as_in(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        As Number
          - Range: `1`-`10`
        """
        return pulumi.get(self, "allow_as_in")

    @allow_as_in.setter
    def allow_as_in(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "allow_as_in", value)

    @_builtins.property
    @pulumi.getter(name="allowAsInVariable")
    def allow_as_in_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "allow_as_in_variable")

    @allow_as_in_variable.setter
    def allow_as_in_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "allow_as_in_variable", value)

    @_builtins.property
    @pulumi.getter(name="asOverride")
    def as_override(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        As Override
          - Default value: `false`
        """
        return pulumi.get(self, "as_override")

    @as_override.setter
    def as_override(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "as_override", value)

    @_builtins.property
    @pulumi.getter(name="asOverrideVariable")
    def as_override_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "as_override_variable")

    @as_override_variable.setter
    def as_override_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "as_override_variable", value)

    @_builtins.property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Set description
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "description", value)

    @_builtins.property
    @pulumi.getter(name="descriptionVariable")
    def description_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "description_variable")

    @description_variable.setter
    def description_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "description_variable", value)

    @_builtins.property
    @pulumi.getter(name="ebgpMultihop")
    def ebgp_multihop(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        Set TTL value for peers that are not directly connected
          - Range: `1`-`255`
          - Default value: `1`
        """
        return pulumi.get(self, "ebgp_multihop")

    @ebgp_multihop.setter
    def ebgp_multihop(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "ebgp_multihop", value)

    @_builtins.property
    @pulumi.getter(name="ebgpMultihopVariable")
    def ebgp_multihop_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "ebgp_multihop_variable")

    @ebgp_multihop_variable.setter
    def ebgp_multihop_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "ebgp_multihop_variable", value)

    @_builtins.property
    @pulumi.getter
    def holdtime(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        Set how long to wait since receiving a keepalive message to consider BGP peer unavailable
          - Range: `0`-`65535`
        """
        return pulumi.get(self, "holdtime")

    @holdtime.setter
    def holdtime(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "holdtime", value)

    @_builtins.property
    @pulumi.getter(name="holdtimeVariable")
    def holdtime_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "holdtime_variable")

    @holdtime_variable.setter
    def holdtime_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "holdtime_variable", value)

    @_builtins.property
    @pulumi.getter
    def keepalive(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        Set how often to advertise keepalive messages to BGP peer
          - Range: `0`-`65535`
        """
        return pulumi.get(self, "keepalive")

    @keepalive.setter
    def keepalive(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "keepalive", value)

    @_builtins.property
    @pulumi.getter(name="keepaliveVariable")
    def keepalive_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "keepalive_variable")

    @keepalive_variable.setter
    def keepalive_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "keepalive_variable", value)

    @_builtins.property
    @pulumi.getter(name="nextHopSelf")
    def next_hop_self(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Set router to be next hop for routes advertised to neighbor
          - Default value: `false`
        """
        return pulumi.get(self, "next_hop_self")

    @next_hop_self.setter
    def next_hop_self(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "next_hop_self", value)

    @_builtins.property
    @pulumi.getter(name="nextHopSelfVariable")
    def next_hop_self_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "next_hop_self_variable")

    @next_hop_self_variable.setter
    def next_hop_self_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "next_hop_self_variable", value)

    @_builtins.property
    @pulumi.getter
    def optional(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Indicates if list item is considered optional.
        """
        return pulumi.get(self, "optional")

    @optional.setter
    def optional(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "optional", value)

    @_builtins.property
    @pulumi.getter
    def password(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Set MD5 password on TCP connection with BGP peer
        """
        return pulumi.get(self, "password")

    @password.setter
    def password(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "password", value)

    @_builtins.property
    @pulumi.getter(name="passwordVariable")
    def password_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "password_variable")

    @password_variable.setter
    def password_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "password_variable", value)

    @_builtins.property
    @pulumi.getter(name="remoteAs")
    def remote_as(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Set remote autonomous system number
        """
        return pulumi.get(self, "remote_as")

    @remote_as.setter
    def remote_as(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "remote_as", value)

    @_builtins.property
    @pulumi.getter(name="remoteAsVariable")
    def remote_as_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "remote_as_variable")

    @remote_as_variable.setter
    def remote_as_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "remote_as_variable", value)

    @_builtins.property
    @pulumi.getter(name="sendCommunity")
    def send_community(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Send community attribute
          - Default value: `true`
        """
        return pulumi.get(self, "send_community")

    @send_community.setter
    def send_community(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "send_community", value)

    @_builtins.property
    @pulumi.getter(name="sendCommunityVariable")
    def send_community_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "send_community_variable")

    @send_community_variable.setter
    def send_community_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "send_community_variable", value)

    @_builtins.property
    @pulumi.getter(name="sendExtCommunity")
    def send_ext_community(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Send extended community attribute
          - Default value: `true`
        """
        return pulumi.get(self, "send_ext_community")

    @send_ext_community.setter
    def send_ext_community(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "send_ext_community", value)

    @_builtins.property
    @pulumi.getter(name="sendExtCommunityVariable")
    def send_ext_community_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "send_ext_community_variable")

    @send_ext_community_variable.setter
    def send_ext_community_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "send_ext_community_variable", value)

    @_builtins.property
    @pulumi.getter(name="sendLabel")
    def send_label(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Send label
          - Default value: `false`
        """
        return pulumi.get(self, "send_label")

    @send_label.setter
    def send_label(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "send_label", value)

    @_builtins.property
    @pulumi.getter(name="sendLabelExplicit")
    def send_label_explicit(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Send label
          - Default value: `false`
        """
        return pulumi.get(self, "send_label_explicit")

    @send_label_explicit.setter
    def send_label_explicit(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "send_label_explicit", value)

    @_builtins.property
    @pulumi.getter(name="sendLabelExplicitVariable")
    def send_label_explicit_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "send_label_explicit_variable")

    @send_label_explicit_variable.setter
    def send_label_explicit_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "send_label_explicit_variable", value)

    @_builtins.property
    @pulumi.getter(name="sendLabelVariable")
    def send_label_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "send_label_variable")

    @send_label_variable.setter
    def send_label_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "send_label_variable", value)

    @_builtins.property
    @pulumi.getter
    def shutdown(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Enable or disable a BGP neighbor
          - Default value: `false`
        """
        return pulumi.get(self, "shutdown")

    @shutdown.setter
    def shutdown(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "shutdown", value)

    @_builtins.property
    @pulumi.getter(name="shutdownVariable")
    def shutdown_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "shutdown_variable")

    @shutdown_variable.setter
    def shutdown_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "shutdown_variable", value)

    @_builtins.property
    @pulumi.getter(name="sourceInterface")
    def source_interface(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Set IP address of interface for TCP connection to BGP neighbor
        """
        return pulumi.get(self, "source_interface")

    @source_interface.setter
    def source_interface(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "source_interface", value)

    @_builtins.property
    @pulumi.getter(name="sourceInterfaceVariable")
    def source_interface_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "source_interface_variable")

    @source_interface_variable.setter
    def source_interface_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "source_interface_variable", value)


if not MYPY:
    class CiscoBgpFeatureTemplateIpv4NeighborAddressFamilyArgsDict(TypedDict):
        family_type: NotRequired[pulumi.Input[_builtins.str]]
        """
        Set BGP address family
          - Choices: `ipv4-unicast`, `vpnv4-unicast`, `vpnv6-unicast`
        """
        maximum_prefixes: NotRequired[pulumi.Input[_builtins.int]]
        """
        Set maximum number of prefixes accepted from BGP peer
          - Range: `0`-`4294967295`
        """
        maximum_prefixes_restart: NotRequired[pulumi.Input[_builtins.int]]
        """
        Set when to restart BGP connection if threshold is exceeded
          - Range: `0`-`65535`
        """
        maximum_prefixes_restart_variable: NotRequired[pulumi.Input[_builtins.str]]
        """
        Variable name
        """
        maximum_prefixes_threshold: NotRequired[pulumi.Input[_builtins.int]]
        """
        Set threshold at which to generate a warning message
          - Range: `0`-`100`
        """
        maximum_prefixes_threshold_variable: NotRequired[pulumi.Input[_builtins.str]]
        """
        Variable name
        """
        maximum_prefixes_variable: NotRequired[pulumi.Input[_builtins.str]]
        """
        Variable name
        """
        maximum_prefixes_warning_only: NotRequired[pulumi.Input[_builtins.bool]]
        """
        Display only a warning message when threshold is exceeded
          - Default value: `false`
        """
        maximum_prefixes_warning_only_variable: NotRequired[pulumi.Input[_builtins.str]]
        """
        Variable name
        """
        optional: NotRequired[pulumi.Input[_builtins.bool]]
        """
        Indicates if list item is considered optional.
        """
        route_policies: NotRequired[pulumi.Input[Sequence[pulumi.Input['CiscoBgpFeatureTemplateIpv4NeighborAddressFamilyRoutePolicyArgsDict']]]]
        """
        Select route policy to apply to prefixes received from BGP neighbor
        """
elif False:
    CiscoBgpFeatureTemplateIpv4NeighborAddressFamilyArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class CiscoBgpFeatureTemplateIpv4NeighborAddressFamilyArgs:
    def __init__(__self__, *,
                 family_type: Optional[pulumi.Input[_builtins.str]] = None,
                 maximum_prefixes: Optional[pulumi.Input[_builtins.int]] = None,
                 maximum_prefixes_restart: Optional[pulumi.Input[_builtins.int]] = None,
                 maximum_prefixes_restart_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 maximum_prefixes_threshold: Optional[pulumi.Input[_builtins.int]] = None,
                 maximum_prefixes_threshold_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 maximum_prefixes_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 maximum_prefixes_warning_only: Optional[pulumi.Input[_builtins.bool]] = None,
                 maximum_prefixes_warning_only_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 optional: Optional[pulumi.Input[_builtins.bool]] = None,
                 route_policies: Optional[pulumi.Input[Sequence[pulumi.Input['CiscoBgpFeatureTemplateIpv4NeighborAddressFamilyRoutePolicyArgs']]]] = None):
        """
        :param pulumi.Input[_builtins.str] family_type: Set BGP address family
                 - Choices: `ipv4-unicast`, `vpnv4-unicast`, `vpnv6-unicast`
        :param pulumi.Input[_builtins.int] maximum_prefixes: Set maximum number of prefixes accepted from BGP peer
                 - Range: `0`-`4294967295`
        :param pulumi.Input[_builtins.int] maximum_prefixes_restart: Set when to restart BGP connection if threshold is exceeded
                 - Range: `0`-`65535`
        :param pulumi.Input[_builtins.str] maximum_prefixes_restart_variable: Variable name
        :param pulumi.Input[_builtins.int] maximum_prefixes_threshold: Set threshold at which to generate a warning message
                 - Range: `0`-`100`
        :param pulumi.Input[_builtins.str] maximum_prefixes_threshold_variable: Variable name
        :param pulumi.Input[_builtins.str] maximum_prefixes_variable: Variable name
        :param pulumi.Input[_builtins.bool] maximum_prefixes_warning_only: Display only a warning message when threshold is exceeded
                 - Default value: `false`
        :param pulumi.Input[_builtins.str] maximum_prefixes_warning_only_variable: Variable name
        :param pulumi.Input[_builtins.bool] optional: Indicates if list item is considered optional.
        :param pulumi.Input[Sequence[pulumi.Input['CiscoBgpFeatureTemplateIpv4NeighborAddressFamilyRoutePolicyArgs']]] route_policies: Select route policy to apply to prefixes received from BGP neighbor
        """
        if family_type is not None:
            pulumi.set(__self__, "family_type", family_type)
        if maximum_prefixes is not None:
            pulumi.set(__self__, "maximum_prefixes", maximum_prefixes)
        if maximum_prefixes_restart is not None:
            pulumi.set(__self__, "maximum_prefixes_restart", maximum_prefixes_restart)
        if maximum_prefixes_restart_variable is not None:
            pulumi.set(__self__, "maximum_prefixes_restart_variable", maximum_prefixes_restart_variable)
        if maximum_prefixes_threshold is not None:
            pulumi.set(__self__, "maximum_prefixes_threshold", maximum_prefixes_threshold)
        if maximum_prefixes_threshold_variable is not None:
            pulumi.set(__self__, "maximum_prefixes_threshold_variable", maximum_prefixes_threshold_variable)
        if maximum_prefixes_variable is not None:
            pulumi.set(__self__, "maximum_prefixes_variable", maximum_prefixes_variable)
        if maximum_prefixes_warning_only is not None:
            pulumi.set(__self__, "maximum_prefixes_warning_only", maximum_prefixes_warning_only)
        if maximum_prefixes_warning_only_variable is not None:
            pulumi.set(__self__, "maximum_prefixes_warning_only_variable", maximum_prefixes_warning_only_variable)
        if optional is not None:
            pulumi.set(__self__, "optional", optional)
        if route_policies is not None:
            pulumi.set(__self__, "route_policies", route_policies)

    @_builtins.property
    @pulumi.getter(name="familyType")
    def family_type(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Set BGP address family
          - Choices: `ipv4-unicast`, `vpnv4-unicast`, `vpnv6-unicast`
        """
        return pulumi.get(self, "family_type")

    @family_type.setter
    def family_type(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "family_type", value)

    @_builtins.property
    @pulumi.getter(name="maximumPrefixes")
    def maximum_prefixes(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        Set maximum number of prefixes accepted from BGP peer
          - Range: `0`-`4294967295`
        """
        return pulumi.get(self, "maximum_prefixes")

    @maximum_prefixes.setter
    def maximum_prefixes(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "maximum_prefixes", value)

    @_builtins.property
    @pulumi.getter(name="maximumPrefixesRestart")
    def maximum_prefixes_restart(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        Set when to restart BGP connection if threshold is exceeded
          - Range: `0`-`65535`
        """
        return pulumi.get(self, "maximum_prefixes_restart")

    @maximum_prefixes_restart.setter
    def maximum_prefixes_restart(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "maximum_prefixes_restart", value)

    @_builtins.property
    @pulumi.getter(name="maximumPrefixesRestartVariable")
    def maximum_prefixes_restart_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "maximum_prefixes_restart_variable")

    @maximum_prefixes_restart_variable.setter
    def maximum_prefixes_restart_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "maximum_prefixes_restart_variable", value)

    @_builtins.property
    @pulumi.getter(name="maximumPrefixesThreshold")
    def maximum_prefixes_threshold(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        Set threshold at which to generate a warning message
          - Range: `0`-`100`
        """
        return pulumi.get(self, "maximum_prefixes_threshold")

    @maximum_prefixes_threshold.setter
    def maximum_prefixes_threshold(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "maximum_prefixes_threshold", value)

    @_builtins.property
    @pulumi.getter(name="maximumPrefixesThresholdVariable")
    def maximum_prefixes_threshold_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "maximum_prefixes_threshold_variable")

    @maximum_prefixes_threshold_variable.setter
    def maximum_prefixes_threshold_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "maximum_prefixes_threshold_variable", value)

    @_builtins.property
    @pulumi.getter(name="maximumPrefixesVariable")
    def maximum_prefixes_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "maximum_prefixes_variable")

    @maximum_prefixes_variable.setter
    def maximum_prefixes_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "maximum_prefixes_variable", value)

    @_builtins.property
    @pulumi.getter(name="maximumPrefixesWarningOnly")
    def maximum_prefixes_warning_only(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Display only a warning message when threshold is exceeded
          - Default value: `false`
        """
        return pulumi.get(self, "maximum_prefixes_warning_only")

    @maximum_prefixes_warning_only.setter
    def maximum_prefixes_warning_only(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "maximum_prefixes_warning_only", value)

    @_builtins.property
    @pulumi.getter(name="maximumPrefixesWarningOnlyVariable")
    def maximum_prefixes_warning_only_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "maximum_prefixes_warning_only_variable")

    @maximum_prefixes_warning_only_variable.setter
    def maximum_prefixes_warning_only_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "maximum_prefixes_warning_only_variable", value)

    @_builtins.property
    @pulumi.getter
    def optional(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Indicates if list item is considered optional.
        """
        return pulumi.get(self, "optional")

    @optional.setter
    def optional(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "optional", value)

    @_builtins.property
    @pulumi.getter(name="routePolicies")
    def route_policies(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['CiscoBgpFeatureTemplateIpv4NeighborAddressFamilyRoutePolicyArgs']]]]:
        """
        Select route policy to apply to prefixes received from BGP neighbor
        """
        return pulumi.get(self, "route_policies")

    @route_policies.setter
    def route_policies(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['CiscoBgpFeatureTemplateIpv4NeighborAddressFamilyRoutePolicyArgs']]]]):
        pulumi.set(self, "route_policies", value)


if not MYPY:
    class CiscoBgpFeatureTemplateIpv4NeighborAddressFamilyRoutePolicyArgsDict(TypedDict):
        direction: NotRequired[pulumi.Input[_builtins.str]]
        """
        Set direction for applying route policy
          - Choices: `in`, `out`
        """
        optional: NotRequired[pulumi.Input[_builtins.bool]]
        """
        Indicates if list item is considered optional.
        """
        policy_name: NotRequired[pulumi.Input[_builtins.str]]
        """
        Configure name of route policy
        """
        policy_name_variable: NotRequired[pulumi.Input[_builtins.str]]
        """
        Variable name
        """
elif False:
    CiscoBgpFeatureTemplateIpv4NeighborAddressFamilyRoutePolicyArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class CiscoBgpFeatureTemplateIpv4NeighborAddressFamilyRoutePolicyArgs:
    def __init__(__self__, *,
                 direction: Optional[pulumi.Input[_builtins.str]] = None,
                 optional: Optional[pulumi.Input[_builtins.bool]] = None,
                 policy_name: Optional[pulumi.Input[_builtins.str]] = None,
                 policy_name_variable: Optional[pulumi.Input[_builtins.str]] = None):
        """
        :param pulumi.Input[_builtins.str] direction: Set direction for applying route policy
                 - Choices: `in`, `out`
        :param pulumi.Input[_builtins.bool] optional: Indicates if list item is considered optional.
        :param pulumi.Input[_builtins.str] policy_name: Configure name of route policy
        :param pulumi.Input[_builtins.str] policy_name_variable: Variable name
        """
        if direction is not None:
            pulumi.set(__self__, "direction", direction)
        if optional is not None:
            pulumi.set(__self__, "optional", optional)
        if policy_name is not None:
            pulumi.set(__self__, "policy_name", policy_name)
        if policy_name_variable is not None:
            pulumi.set(__self__, "policy_name_variable", policy_name_variable)

    @_builtins.property
    @pulumi.getter
    def direction(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Set direction for applying route policy
          - Choices: `in`, `out`
        """
        return pulumi.get(self, "direction")

    @direction.setter
    def direction(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "direction", value)

    @_builtins.property
    @pulumi.getter
    def optional(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Indicates if list item is considered optional.
        """
        return pulumi.get(self, "optional")

    @optional.setter
    def optional(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "optional", value)

    @_builtins.property
    @pulumi.getter(name="policyName")
    def policy_name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Configure name of route policy
        """
        return pulumi.get(self, "policy_name")

    @policy_name.setter
    def policy_name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "policy_name", value)

    @_builtins.property
    @pulumi.getter(name="policyNameVariable")
    def policy_name_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "policy_name_variable")

    @policy_name_variable.setter
    def policy_name_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "policy_name_variable", value)


if not MYPY:
    class CiscoBgpFeatureTemplateIpv4RouteTargetArgsDict(TypedDict):
        exports: NotRequired[pulumi.Input[Sequence[pulumi.Input['CiscoBgpFeatureTemplateIpv4RouteTargetExportArgsDict']]]]
        """
        Export Target-VPN community for IPV4
        """
        imports: NotRequired[pulumi.Input[Sequence[pulumi.Input['CiscoBgpFeatureTemplateIpv4RouteTargetImportArgsDict']]]]
        """
        Import Target-VPN community for IPV4
        """
        optional: NotRequired[pulumi.Input[_builtins.bool]]
        """
        Indicates if list item is considered optional.
        """
        vpn_id: NotRequired[pulumi.Input[_builtins.int]]
        """
        VPN ID for IPv4
          - Range: `1`-`65527`
        """
        vpn_id_variable: NotRequired[pulumi.Input[_builtins.str]]
        """
        Variable name
        """
elif False:
    CiscoBgpFeatureTemplateIpv4RouteTargetArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class CiscoBgpFeatureTemplateIpv4RouteTargetArgs:
    def __init__(__self__, *,
                 exports: Optional[pulumi.Input[Sequence[pulumi.Input['CiscoBgpFeatureTemplateIpv4RouteTargetExportArgs']]]] = None,
                 imports: Optional[pulumi.Input[Sequence[pulumi.Input['CiscoBgpFeatureTemplateIpv4RouteTargetImportArgs']]]] = None,
                 optional: Optional[pulumi.Input[_builtins.bool]] = None,
                 vpn_id: Optional[pulumi.Input[_builtins.int]] = None,
                 vpn_id_variable: Optional[pulumi.Input[_builtins.str]] = None):
        """
        :param pulumi.Input[Sequence[pulumi.Input['CiscoBgpFeatureTemplateIpv4RouteTargetExportArgs']]] exports: Export Target-VPN community for IPV4
        :param pulumi.Input[Sequence[pulumi.Input['CiscoBgpFeatureTemplateIpv4RouteTargetImportArgs']]] imports: Import Target-VPN community for IPV4
        :param pulumi.Input[_builtins.bool] optional: Indicates if list item is considered optional.
        :param pulumi.Input[_builtins.int] vpn_id: VPN ID for IPv4
                 - Range: `1`-`65527`
        :param pulumi.Input[_builtins.str] vpn_id_variable: Variable name
        """
        if exports is not None:
            pulumi.set(__self__, "exports", exports)
        if imports is not None:
            pulumi.set(__self__, "imports", imports)
        if optional is not None:
            pulumi.set(__self__, "optional", optional)
        if vpn_id is not None:
            pulumi.set(__self__, "vpn_id", vpn_id)
        if vpn_id_variable is not None:
            pulumi.set(__self__, "vpn_id_variable", vpn_id_variable)

    @_builtins.property
    @pulumi.getter
    def exports(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['CiscoBgpFeatureTemplateIpv4RouteTargetExportArgs']]]]:
        """
        Export Target-VPN community for IPV4
        """
        return pulumi.get(self, "exports")

    @exports.setter
    def exports(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['CiscoBgpFeatureTemplateIpv4RouteTargetExportArgs']]]]):
        pulumi.set(self, "exports", value)

    @_builtins.property
    @pulumi.getter
    def imports(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['CiscoBgpFeatureTemplateIpv4RouteTargetImportArgs']]]]:
        """
        Import Target-VPN community for IPV4
        """
        return pulumi.get(self, "imports")

    @imports.setter
    def imports(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['CiscoBgpFeatureTemplateIpv4RouteTargetImportArgs']]]]):
        pulumi.set(self, "imports", value)

    @_builtins.property
    @pulumi.getter
    def optional(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Indicates if list item is considered optional.
        """
        return pulumi.get(self, "optional")

    @optional.setter
    def optional(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "optional", value)

    @_builtins.property
    @pulumi.getter(name="vpnId")
    def vpn_id(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        VPN ID for IPv4
          - Range: `1`-`65527`
        """
        return pulumi.get(self, "vpn_id")

    @vpn_id.setter
    def vpn_id(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "vpn_id", value)

    @_builtins.property
    @pulumi.getter(name="vpnIdVariable")
    def vpn_id_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "vpn_id_variable")

    @vpn_id_variable.setter
    def vpn_id_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "vpn_id_variable", value)


if not MYPY:
    class CiscoBgpFeatureTemplateIpv4RouteTargetExportArgsDict(TypedDict):
        asn_ip: NotRequired[pulumi.Input[_builtins.str]]
        """
        asn-ip
        """
        asn_ip_variable: NotRequired[pulumi.Input[_builtins.str]]
        """
        Variable name
        """
        optional: NotRequired[pulumi.Input[_builtins.bool]]
        """
        Indicates if list item is considered optional.
        """
elif False:
    CiscoBgpFeatureTemplateIpv4RouteTargetExportArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class CiscoBgpFeatureTemplateIpv4RouteTargetExportArgs:
    def __init__(__self__, *,
                 asn_ip: Optional[pulumi.Input[_builtins.str]] = None,
                 asn_ip_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 optional: Optional[pulumi.Input[_builtins.bool]] = None):
        """
        :param pulumi.Input[_builtins.str] asn_ip: asn-ip
        :param pulumi.Input[_builtins.str] asn_ip_variable: Variable name
        :param pulumi.Input[_builtins.bool] optional: Indicates if list item is considered optional.
        """
        if asn_ip is not None:
            pulumi.set(__self__, "asn_ip", asn_ip)
        if asn_ip_variable is not None:
            pulumi.set(__self__, "asn_ip_variable", asn_ip_variable)
        if optional is not None:
            pulumi.set(__self__, "optional", optional)

    @_builtins.property
    @pulumi.getter(name="asnIp")
    def asn_ip(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        asn-ip
        """
        return pulumi.get(self, "asn_ip")

    @asn_ip.setter
    def asn_ip(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "asn_ip", value)

    @_builtins.property
    @pulumi.getter(name="asnIpVariable")
    def asn_ip_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "asn_ip_variable")

    @asn_ip_variable.setter
    def asn_ip_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "asn_ip_variable", value)

    @_builtins.property
    @pulumi.getter
    def optional(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Indicates if list item is considered optional.
        """
        return pulumi.get(self, "optional")

    @optional.setter
    def optional(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "optional", value)


if not MYPY:
    class CiscoBgpFeatureTemplateIpv4RouteTargetImportArgsDict(TypedDict):
        asn_ip: NotRequired[pulumi.Input[_builtins.str]]
        """
        asn-ip
        """
        asn_ip_variable: NotRequired[pulumi.Input[_builtins.str]]
        """
        Variable name
        """
        optional: NotRequired[pulumi.Input[_builtins.bool]]
        """
        Indicates if list item is considered optional.
        """
elif False:
    CiscoBgpFeatureTemplateIpv4RouteTargetImportArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class CiscoBgpFeatureTemplateIpv4RouteTargetImportArgs:
    def __init__(__self__, *,
                 asn_ip: Optional[pulumi.Input[_builtins.str]] = None,
                 asn_ip_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 optional: Optional[pulumi.Input[_builtins.bool]] = None):
        """
        :param pulumi.Input[_builtins.str] asn_ip: asn-ip
        :param pulumi.Input[_builtins.str] asn_ip_variable: Variable name
        :param pulumi.Input[_builtins.bool] optional: Indicates if list item is considered optional.
        """
        if asn_ip is not None:
            pulumi.set(__self__, "asn_ip", asn_ip)
        if asn_ip_variable is not None:
            pulumi.set(__self__, "asn_ip_variable", asn_ip_variable)
        if optional is not None:
            pulumi.set(__self__, "optional", optional)

    @_builtins.property
    @pulumi.getter(name="asnIp")
    def asn_ip(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        asn-ip
        """
        return pulumi.get(self, "asn_ip")

    @asn_ip.setter
    def asn_ip(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "asn_ip", value)

    @_builtins.property
    @pulumi.getter(name="asnIpVariable")
    def asn_ip_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "asn_ip_variable")

    @asn_ip_variable.setter
    def asn_ip_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "asn_ip_variable", value)

    @_builtins.property
    @pulumi.getter
    def optional(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Indicates if list item is considered optional.
        """
        return pulumi.get(self, "optional")

    @optional.setter
    def optional(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "optional", value)


if not MYPY:
    class CiscoBgpFeatureTemplateIpv6NeighborArgsDict(TypedDict):
        address: NotRequired[pulumi.Input[_builtins.str]]
        """
        Set neighbor address
        """
        address_families: NotRequired[pulumi.Input[Sequence[pulumi.Input['CiscoBgpFeatureTemplateIpv6NeighborAddressFamilyArgsDict']]]]
        """
        Set BGP address family
        """
        address_variable: NotRequired[pulumi.Input[_builtins.str]]
        """
        Variable name
        """
        allow_as_in: NotRequired[pulumi.Input[_builtins.int]]
        """
        As Number
          - Range: `1`-`10`
        """
        allow_as_in_variable: NotRequired[pulumi.Input[_builtins.str]]
        """
        Variable name
        """
        as_override: NotRequired[pulumi.Input[_builtins.bool]]
        """
        As Override
          - Default value: `false`
        """
        as_override_variable: NotRequired[pulumi.Input[_builtins.str]]
        """
        Variable name
        """
        description: NotRequired[pulumi.Input[_builtins.str]]
        """
        Set description
        """
        description_variable: NotRequired[pulumi.Input[_builtins.str]]
        """
        Variable name
        """
        ebgp_multihop: NotRequired[pulumi.Input[_builtins.int]]
        """
        Set TTL value for peers that are not directly connected
          - Range: `1`-`255`
          - Default value: `1`
        """
        ebgp_multihop_variable: NotRequired[pulumi.Input[_builtins.str]]
        """
        Variable name
        """
        holdtime: NotRequired[pulumi.Input[_builtins.int]]
        """
        Set how long to wait since receiving a keepalive message to consider BGP peer unavailable
          - Range: `0`-`65535`
        """
        holdtime_variable: NotRequired[pulumi.Input[_builtins.str]]
        """
        Variable name
        """
        keepalive: NotRequired[pulumi.Input[_builtins.int]]
        """
        Set how often to advertise keepalive messages to BGP peer
          - Range: `0`-`65535`
        """
        keepalive_variable: NotRequired[pulumi.Input[_builtins.str]]
        """
        Variable name
        """
        next_hop_self: NotRequired[pulumi.Input[_builtins.bool]]
        """
        Set router to be next hop for routes advertised to neighbor
          - Default value: `false`
        """
        next_hop_self_variable: NotRequired[pulumi.Input[_builtins.str]]
        """
        Variable name
        """
        optional: NotRequired[pulumi.Input[_builtins.bool]]
        """
        Indicates if list item is considered optional.
        """
        password: NotRequired[pulumi.Input[_builtins.str]]
        """
        Set MD5 password on TCP connection with BGP peer
        """
        password_variable: NotRequired[pulumi.Input[_builtins.str]]
        """
        Variable name
        """
        remote_as: NotRequired[pulumi.Input[_builtins.str]]
        """
        Set remote autonomous system number
        """
        remote_as_variable: NotRequired[pulumi.Input[_builtins.str]]
        """
        Variable name
        """
        send_community: NotRequired[pulumi.Input[_builtins.bool]]
        """
        Send community attribute
          - Default value: `true`
        """
        send_community_variable: NotRequired[pulumi.Input[_builtins.str]]
        """
        Variable name
        """
        send_ext_community: NotRequired[pulumi.Input[_builtins.bool]]
        """
        Send extended community attribute
          - Default value: `true`
        """
        send_ext_community_variable: NotRequired[pulumi.Input[_builtins.str]]
        """
        Variable name
        """
        send_label: NotRequired[pulumi.Input[_builtins.bool]]
        """
        Send label
          - Default value: `false`
        """
        send_label_explicit: NotRequired[pulumi.Input[_builtins.bool]]
        """
        Send label Explicit
          - Default value: `false`
        """
        send_label_explicit_variable: NotRequired[pulumi.Input[_builtins.str]]
        """
        Variable name
        """
        send_label_variable: NotRequired[pulumi.Input[_builtins.str]]
        """
        Variable name
        """
        shutdown: NotRequired[pulumi.Input[_builtins.bool]]
        """
        Enable or disable a BGP neighbor
          - Default value: `false`
        """
        shutdown_variable: NotRequired[pulumi.Input[_builtins.str]]
        """
        Variable name
        """
        source_interface: NotRequired[pulumi.Input[_builtins.str]]
        """
        Set IP address of interface for TCP connection to BGP neighbor
        """
        source_interface_variable: NotRequired[pulumi.Input[_builtins.str]]
        """
        Variable name
        """
elif False:
    CiscoBgpFeatureTemplateIpv6NeighborArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class CiscoBgpFeatureTemplateIpv6NeighborArgs:
    def __init__(__self__, *,
                 address: Optional[pulumi.Input[_builtins.str]] = None,
                 address_families: Optional[pulumi.Input[Sequence[pulumi.Input['CiscoBgpFeatureTemplateIpv6NeighborAddressFamilyArgs']]]] = None,
                 address_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 allow_as_in: Optional[pulumi.Input[_builtins.int]] = None,
                 allow_as_in_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 as_override: Optional[pulumi.Input[_builtins.bool]] = None,
                 as_override_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 description: Optional[pulumi.Input[_builtins.str]] = None,
                 description_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 ebgp_multihop: Optional[pulumi.Input[_builtins.int]] = None,
                 ebgp_multihop_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 holdtime: Optional[pulumi.Input[_builtins.int]] = None,
                 holdtime_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 keepalive: Optional[pulumi.Input[_builtins.int]] = None,
                 keepalive_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 next_hop_self: Optional[pulumi.Input[_builtins.bool]] = None,
                 next_hop_self_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 optional: Optional[pulumi.Input[_builtins.bool]] = None,
                 password: Optional[pulumi.Input[_builtins.str]] = None,
                 password_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 remote_as: Optional[pulumi.Input[_builtins.str]] = None,
                 remote_as_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 send_community: Optional[pulumi.Input[_builtins.bool]] = None,
                 send_community_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 send_ext_community: Optional[pulumi.Input[_builtins.bool]] = None,
                 send_ext_community_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 send_label: Optional[pulumi.Input[_builtins.bool]] = None,
                 send_label_explicit: Optional[pulumi.Input[_builtins.bool]] = None,
                 send_label_explicit_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 send_label_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 shutdown: Optional[pulumi.Input[_builtins.bool]] = None,
                 shutdown_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 source_interface: Optional[pulumi.Input[_builtins.str]] = None,
                 source_interface_variable: Optional[pulumi.Input[_builtins.str]] = None):
        """
        :param pulumi.Input[_builtins.str] address: Set neighbor address
        :param pulumi.Input[Sequence[pulumi.Input['CiscoBgpFeatureTemplateIpv6NeighborAddressFamilyArgs']]] address_families: Set BGP address family
        :param pulumi.Input[_builtins.str] address_variable: Variable name
        :param pulumi.Input[_builtins.int] allow_as_in: As Number
                 - Range: `1`-`10`
        :param pulumi.Input[_builtins.str] allow_as_in_variable: Variable name
        :param pulumi.Input[_builtins.bool] as_override: As Override
                 - Default value: `false`
        :param pulumi.Input[_builtins.str] as_override_variable: Variable name
        :param pulumi.Input[_builtins.str] description: Set description
        :param pulumi.Input[_builtins.str] description_variable: Variable name
        :param pulumi.Input[_builtins.int] ebgp_multihop: Set TTL value for peers that are not directly connected
                 - Range: `1`-`255`
                 - Default value: `1`
        :param pulumi.Input[_builtins.str] ebgp_multihop_variable: Variable name
        :param pulumi.Input[_builtins.int] holdtime: Set how long to wait since receiving a keepalive message to consider BGP peer unavailable
                 - Range: `0`-`65535`
        :param pulumi.Input[_builtins.str] holdtime_variable: Variable name
        :param pulumi.Input[_builtins.int] keepalive: Set how often to advertise keepalive messages to BGP peer
                 - Range: `0`-`65535`
        :param pulumi.Input[_builtins.str] keepalive_variable: Variable name
        :param pulumi.Input[_builtins.bool] next_hop_self: Set router to be next hop for routes advertised to neighbor
                 - Default value: `false`
        :param pulumi.Input[_builtins.str] next_hop_self_variable: Variable name
        :param pulumi.Input[_builtins.bool] optional: Indicates if list item is considered optional.
        :param pulumi.Input[_builtins.str] password: Set MD5 password on TCP connection with BGP peer
        :param pulumi.Input[_builtins.str] password_variable: Variable name
        :param pulumi.Input[_builtins.str] remote_as: Set remote autonomous system number
        :param pulumi.Input[_builtins.str] remote_as_variable: Variable name
        :param pulumi.Input[_builtins.bool] send_community: Send community attribute
                 - Default value: `true`
        :param pulumi.Input[_builtins.str] send_community_variable: Variable name
        :param pulumi.Input[_builtins.bool] send_ext_community: Send extended community attribute
                 - Default value: `true`
        :param pulumi.Input[_builtins.str] send_ext_community_variable: Variable name
        :param pulumi.Input[_builtins.bool] send_label: Send label
                 - Default value: `false`
        :param pulumi.Input[_builtins.bool] send_label_explicit: Send label Explicit
                 - Default value: `false`
        :param pulumi.Input[_builtins.str] send_label_explicit_variable: Variable name
        :param pulumi.Input[_builtins.str] send_label_variable: Variable name
        :param pulumi.Input[_builtins.bool] shutdown: Enable or disable a BGP neighbor
                 - Default value: `false`
        :param pulumi.Input[_builtins.str] shutdown_variable: Variable name
        :param pulumi.Input[_builtins.str] source_interface: Set IP address of interface for TCP connection to BGP neighbor
        :param pulumi.Input[_builtins.str] source_interface_variable: Variable name
        """
        if address is not None:
            pulumi.set(__self__, "address", address)
        if address_families is not None:
            pulumi.set(__self__, "address_families", address_families)
        if address_variable is not None:
            pulumi.set(__self__, "address_variable", address_variable)
        if allow_as_in is not None:
            pulumi.set(__self__, "allow_as_in", allow_as_in)
        if allow_as_in_variable is not None:
            pulumi.set(__self__, "allow_as_in_variable", allow_as_in_variable)
        if as_override is not None:
            pulumi.set(__self__, "as_override", as_override)
        if as_override_variable is not None:
            pulumi.set(__self__, "as_override_variable", as_override_variable)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if description_variable is not None:
            pulumi.set(__self__, "description_variable", description_variable)
        if ebgp_multihop is not None:
            pulumi.set(__self__, "ebgp_multihop", ebgp_multihop)
        if ebgp_multihop_variable is not None:
            pulumi.set(__self__, "ebgp_multihop_variable", ebgp_multihop_variable)
        if holdtime is not None:
            pulumi.set(__self__, "holdtime", holdtime)
        if holdtime_variable is not None:
            pulumi.set(__self__, "holdtime_variable", holdtime_variable)
        if keepalive is not None:
            pulumi.set(__self__, "keepalive", keepalive)
        if keepalive_variable is not None:
            pulumi.set(__self__, "keepalive_variable", keepalive_variable)
        if next_hop_self is not None:
            pulumi.set(__self__, "next_hop_self", next_hop_self)
        if next_hop_self_variable is not None:
            pulumi.set(__self__, "next_hop_self_variable", next_hop_self_variable)
        if optional is not None:
            pulumi.set(__self__, "optional", optional)
        if password is not None:
            pulumi.set(__self__, "password", password)
        if password_variable is not None:
            pulumi.set(__self__, "password_variable", password_variable)
        if remote_as is not None:
            pulumi.set(__self__, "remote_as", remote_as)
        if remote_as_variable is not None:
            pulumi.set(__self__, "remote_as_variable", remote_as_variable)
        if send_community is not None:
            pulumi.set(__self__, "send_community", send_community)
        if send_community_variable is not None:
            pulumi.set(__self__, "send_community_variable", send_community_variable)
        if send_ext_community is not None:
            pulumi.set(__self__, "send_ext_community", send_ext_community)
        if send_ext_community_variable is not None:
            pulumi.set(__self__, "send_ext_community_variable", send_ext_community_variable)
        if send_label is not None:
            pulumi.set(__self__, "send_label", send_label)
        if send_label_explicit is not None:
            pulumi.set(__self__, "send_label_explicit", send_label_explicit)
        if send_label_explicit_variable is not None:
            pulumi.set(__self__, "send_label_explicit_variable", send_label_explicit_variable)
        if send_label_variable is not None:
            pulumi.set(__self__, "send_label_variable", send_label_variable)
        if shutdown is not None:
            pulumi.set(__self__, "shutdown", shutdown)
        if shutdown_variable is not None:
            pulumi.set(__self__, "shutdown_variable", shutdown_variable)
        if source_interface is not None:
            pulumi.set(__self__, "source_interface", source_interface)
        if source_interface_variable is not None:
            pulumi.set(__self__, "source_interface_variable", source_interface_variable)

    @_builtins.property
    @pulumi.getter
    def address(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Set neighbor address
        """
        return pulumi.get(self, "address")

    @address.setter
    def address(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "address", value)

    @_builtins.property
    @pulumi.getter(name="addressFamilies")
    def address_families(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['CiscoBgpFeatureTemplateIpv6NeighborAddressFamilyArgs']]]]:
        """
        Set BGP address family
        """
        return pulumi.get(self, "address_families")

    @address_families.setter
    def address_families(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['CiscoBgpFeatureTemplateIpv6NeighborAddressFamilyArgs']]]]):
        pulumi.set(self, "address_families", value)

    @_builtins.property
    @pulumi.getter(name="addressVariable")
    def address_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "address_variable")

    @address_variable.setter
    def address_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "address_variable", value)

    @_builtins.property
    @pulumi.getter(name="allowAsIn")
    def allow_as_in(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        As Number
          - Range: `1`-`10`
        """
        return pulumi.get(self, "allow_as_in")

    @allow_as_in.setter
    def allow_as_in(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "allow_as_in", value)

    @_builtins.property
    @pulumi.getter(name="allowAsInVariable")
    def allow_as_in_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "allow_as_in_variable")

    @allow_as_in_variable.setter
    def allow_as_in_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "allow_as_in_variable", value)

    @_builtins.property
    @pulumi.getter(name="asOverride")
    def as_override(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        As Override
          - Default value: `false`
        """
        return pulumi.get(self, "as_override")

    @as_override.setter
    def as_override(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "as_override", value)

    @_builtins.property
    @pulumi.getter(name="asOverrideVariable")
    def as_override_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "as_override_variable")

    @as_override_variable.setter
    def as_override_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "as_override_variable", value)

    @_builtins.property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Set description
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "description", value)

    @_builtins.property
    @pulumi.getter(name="descriptionVariable")
    def description_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "description_variable")

    @description_variable.setter
    def description_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "description_variable", value)

    @_builtins.property
    @pulumi.getter(name="ebgpMultihop")
    def ebgp_multihop(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        Set TTL value for peers that are not directly connected
          - Range: `1`-`255`
          - Default value: `1`
        """
        return pulumi.get(self, "ebgp_multihop")

    @ebgp_multihop.setter
    def ebgp_multihop(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "ebgp_multihop", value)

    @_builtins.property
    @pulumi.getter(name="ebgpMultihopVariable")
    def ebgp_multihop_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "ebgp_multihop_variable")

    @ebgp_multihop_variable.setter
    def ebgp_multihop_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "ebgp_multihop_variable", value)

    @_builtins.property
    @pulumi.getter
    def holdtime(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        Set how long to wait since receiving a keepalive message to consider BGP peer unavailable
          - Range: `0`-`65535`
        """
        return pulumi.get(self, "holdtime")

    @holdtime.setter
    def holdtime(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "holdtime", value)

    @_builtins.property
    @pulumi.getter(name="holdtimeVariable")
    def holdtime_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "holdtime_variable")

    @holdtime_variable.setter
    def holdtime_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "holdtime_variable", value)

    @_builtins.property
    @pulumi.getter
    def keepalive(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        Set how often to advertise keepalive messages to BGP peer
          - Range: `0`-`65535`
        """
        return pulumi.get(self, "keepalive")

    @keepalive.setter
    def keepalive(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "keepalive", value)

    @_builtins.property
    @pulumi.getter(name="keepaliveVariable")
    def keepalive_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "keepalive_variable")

    @keepalive_variable.setter
    def keepalive_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "keepalive_variable", value)

    @_builtins.property
    @pulumi.getter(name="nextHopSelf")
    def next_hop_self(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Set router to be next hop for routes advertised to neighbor
          - Default value: `false`
        """
        return pulumi.get(self, "next_hop_self")

    @next_hop_self.setter
    def next_hop_self(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "next_hop_self", value)

    @_builtins.property
    @pulumi.getter(name="nextHopSelfVariable")
    def next_hop_self_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "next_hop_self_variable")

    @next_hop_self_variable.setter
    def next_hop_self_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "next_hop_self_variable", value)

    @_builtins.property
    @pulumi.getter
    def optional(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Indicates if list item is considered optional.
        """
        return pulumi.get(self, "optional")

    @optional.setter
    def optional(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "optional", value)

    @_builtins.property
    @pulumi.getter
    def password(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Set MD5 password on TCP connection with BGP peer
        """
        return pulumi.get(self, "password")

    @password.setter
    def password(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "password", value)

    @_builtins.property
    @pulumi.getter(name="passwordVariable")
    def password_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "password_variable")

    @password_variable.setter
    def password_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "password_variable", value)

    @_builtins.property
    @pulumi.getter(name="remoteAs")
    def remote_as(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Set remote autonomous system number
        """
        return pulumi.get(self, "remote_as")

    @remote_as.setter
    def remote_as(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "remote_as", value)

    @_builtins.property
    @pulumi.getter(name="remoteAsVariable")
    def remote_as_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "remote_as_variable")

    @remote_as_variable.setter
    def remote_as_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "remote_as_variable", value)

    @_builtins.property
    @pulumi.getter(name="sendCommunity")
    def send_community(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Send community attribute
          - Default value: `true`
        """
        return pulumi.get(self, "send_community")

    @send_community.setter
    def send_community(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "send_community", value)

    @_builtins.property
    @pulumi.getter(name="sendCommunityVariable")
    def send_community_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "send_community_variable")

    @send_community_variable.setter
    def send_community_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "send_community_variable", value)

    @_builtins.property
    @pulumi.getter(name="sendExtCommunity")
    def send_ext_community(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Send extended community attribute
          - Default value: `true`
        """
        return pulumi.get(self, "send_ext_community")

    @send_ext_community.setter
    def send_ext_community(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "send_ext_community", value)

    @_builtins.property
    @pulumi.getter(name="sendExtCommunityVariable")
    def send_ext_community_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "send_ext_community_variable")

    @send_ext_community_variable.setter
    def send_ext_community_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "send_ext_community_variable", value)

    @_builtins.property
    @pulumi.getter(name="sendLabel")
    def send_label(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Send label
          - Default value: `false`
        """
        return pulumi.get(self, "send_label")

    @send_label.setter
    def send_label(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "send_label", value)

    @_builtins.property
    @pulumi.getter(name="sendLabelExplicit")
    def send_label_explicit(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Send label Explicit
          - Default value: `false`
        """
        return pulumi.get(self, "send_label_explicit")

    @send_label_explicit.setter
    def send_label_explicit(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "send_label_explicit", value)

    @_builtins.property
    @pulumi.getter(name="sendLabelExplicitVariable")
    def send_label_explicit_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "send_label_explicit_variable")

    @send_label_explicit_variable.setter
    def send_label_explicit_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "send_label_explicit_variable", value)

    @_builtins.property
    @pulumi.getter(name="sendLabelVariable")
    def send_label_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "send_label_variable")

    @send_label_variable.setter
    def send_label_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "send_label_variable", value)

    @_builtins.property
    @pulumi.getter
    def shutdown(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Enable or disable a BGP neighbor
          - Default value: `false`
        """
        return pulumi.get(self, "shutdown")

    @shutdown.setter
    def shutdown(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "shutdown", value)

    @_builtins.property
    @pulumi.getter(name="shutdownVariable")
    def shutdown_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "shutdown_variable")

    @shutdown_variable.setter
    def shutdown_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "shutdown_variable", value)

    @_builtins.property
    @pulumi.getter(name="sourceInterface")
    def source_interface(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Set IP address of interface for TCP connection to BGP neighbor
        """
        return pulumi.get(self, "source_interface")

    @source_interface.setter
    def source_interface(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "source_interface", value)

    @_builtins.property
    @pulumi.getter(name="sourceInterfaceVariable")
    def source_interface_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "source_interface_variable")

    @source_interface_variable.setter
    def source_interface_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "source_interface_variable", value)


if not MYPY:
    class CiscoBgpFeatureTemplateIpv6NeighborAddressFamilyArgsDict(TypedDict):
        family_type: NotRequired[pulumi.Input[_builtins.str]]
        """
        Set BGP address family
          - Choices: `ipv6-unicast`
        """
        maximum_prefixes: NotRequired[pulumi.Input[_builtins.int]]
        """
        Set maximum number of prefixes accepted from BGP peer
          - Range: `0`-`4294967295`
          - Default value: `0`
        """
        maximum_prefixes_restart: NotRequired[pulumi.Input[_builtins.int]]
        """
        Set when to restart BGP connection if threshold is exceeded
          - Range: `0`-`65535`
        """
        maximum_prefixes_restart_variable: NotRequired[pulumi.Input[_builtins.str]]
        """
        Variable name
        """
        maximum_prefixes_threshold: NotRequired[pulumi.Input[_builtins.int]]
        """
        Set threshold at which to generate a warning message
          - Range: `0`-`100`
          - Default value: `0`
        """
        maximum_prefixes_threshold_variable: NotRequired[pulumi.Input[_builtins.str]]
        """
        Variable name
        """
        maximum_prefixes_variable: NotRequired[pulumi.Input[_builtins.str]]
        """
        Variable name
        """
        maximum_prefixes_warning_only: NotRequired[pulumi.Input[_builtins.bool]]
        """
        Display only a warning message when threshold is exceeded
          - Default value: `false`
        """
        maximum_prefixes_warning_only_variable: NotRequired[pulumi.Input[_builtins.str]]
        """
        Variable name
        """
        optional: NotRequired[pulumi.Input[_builtins.bool]]
        """
        Indicates if list item is considered optional.
        """
        route_policies: NotRequired[pulumi.Input[Sequence[pulumi.Input['CiscoBgpFeatureTemplateIpv6NeighborAddressFamilyRoutePolicyArgsDict']]]]
        """
        Select route policy to apply to prefixes received from BGP neighbor
        """
elif False:
    CiscoBgpFeatureTemplateIpv6NeighborAddressFamilyArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class CiscoBgpFeatureTemplateIpv6NeighborAddressFamilyArgs:
    def __init__(__self__, *,
                 family_type: Optional[pulumi.Input[_builtins.str]] = None,
                 maximum_prefixes: Optional[pulumi.Input[_builtins.int]] = None,
                 maximum_prefixes_restart: Optional[pulumi.Input[_builtins.int]] = None,
                 maximum_prefixes_restart_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 maximum_prefixes_threshold: Optional[pulumi.Input[_builtins.int]] = None,
                 maximum_prefixes_threshold_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 maximum_prefixes_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 maximum_prefixes_warning_only: Optional[pulumi.Input[_builtins.bool]] = None,
                 maximum_prefixes_warning_only_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 optional: Optional[pulumi.Input[_builtins.bool]] = None,
                 route_policies: Optional[pulumi.Input[Sequence[pulumi.Input['CiscoBgpFeatureTemplateIpv6NeighborAddressFamilyRoutePolicyArgs']]]] = None):
        """
        :param pulumi.Input[_builtins.str] family_type: Set BGP address family
                 - Choices: `ipv6-unicast`
        :param pulumi.Input[_builtins.int] maximum_prefixes: Set maximum number of prefixes accepted from BGP peer
                 - Range: `0`-`4294967295`
                 - Default value: `0`
        :param pulumi.Input[_builtins.int] maximum_prefixes_restart: Set when to restart BGP connection if threshold is exceeded
                 - Range: `0`-`65535`
        :param pulumi.Input[_builtins.str] maximum_prefixes_restart_variable: Variable name
        :param pulumi.Input[_builtins.int] maximum_prefixes_threshold: Set threshold at which to generate a warning message
                 - Range: `0`-`100`
                 - Default value: `0`
        :param pulumi.Input[_builtins.str] maximum_prefixes_threshold_variable: Variable name
        :param pulumi.Input[_builtins.str] maximum_prefixes_variable: Variable name
        :param pulumi.Input[_builtins.bool] maximum_prefixes_warning_only: Display only a warning message when threshold is exceeded
                 - Default value: `false`
        :param pulumi.Input[_builtins.str] maximum_prefixes_warning_only_variable: Variable name
        :param pulumi.Input[_builtins.bool] optional: Indicates if list item is considered optional.
        :param pulumi.Input[Sequence[pulumi.Input['CiscoBgpFeatureTemplateIpv6NeighborAddressFamilyRoutePolicyArgs']]] route_policies: Select route policy to apply to prefixes received from BGP neighbor
        """
        if family_type is not None:
            pulumi.set(__self__, "family_type", family_type)
        if maximum_prefixes is not None:
            pulumi.set(__self__, "maximum_prefixes", maximum_prefixes)
        if maximum_prefixes_restart is not None:
            pulumi.set(__self__, "maximum_prefixes_restart", maximum_prefixes_restart)
        if maximum_prefixes_restart_variable is not None:
            pulumi.set(__self__, "maximum_prefixes_restart_variable", maximum_prefixes_restart_variable)
        if maximum_prefixes_threshold is not None:
            pulumi.set(__self__, "maximum_prefixes_threshold", maximum_prefixes_threshold)
        if maximum_prefixes_threshold_variable is not None:
            pulumi.set(__self__, "maximum_prefixes_threshold_variable", maximum_prefixes_threshold_variable)
        if maximum_prefixes_variable is not None:
            pulumi.set(__self__, "maximum_prefixes_variable", maximum_prefixes_variable)
        if maximum_prefixes_warning_only is not None:
            pulumi.set(__self__, "maximum_prefixes_warning_only", maximum_prefixes_warning_only)
        if maximum_prefixes_warning_only_variable is not None:
            pulumi.set(__self__, "maximum_prefixes_warning_only_variable", maximum_prefixes_warning_only_variable)
        if optional is not None:
            pulumi.set(__self__, "optional", optional)
        if route_policies is not None:
            pulumi.set(__self__, "route_policies", route_policies)

    @_builtins.property
    @pulumi.getter(name="familyType")
    def family_type(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Set BGP address family
          - Choices: `ipv6-unicast`
        """
        return pulumi.get(self, "family_type")

    @family_type.setter
    def family_type(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "family_type", value)

    @_builtins.property
    @pulumi.getter(name="maximumPrefixes")
    def maximum_prefixes(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        Set maximum number of prefixes accepted from BGP peer
          - Range: `0`-`4294967295`
          - Default value: `0`
        """
        return pulumi.get(self, "maximum_prefixes")

    @maximum_prefixes.setter
    def maximum_prefixes(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "maximum_prefixes", value)

    @_builtins.property
    @pulumi.getter(name="maximumPrefixesRestart")
    def maximum_prefixes_restart(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        Set when to restart BGP connection if threshold is exceeded
          - Range: `0`-`65535`
        """
        return pulumi.get(self, "maximum_prefixes_restart")

    @maximum_prefixes_restart.setter
    def maximum_prefixes_restart(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "maximum_prefixes_restart", value)

    @_builtins.property
    @pulumi.getter(name="maximumPrefixesRestartVariable")
    def maximum_prefixes_restart_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "maximum_prefixes_restart_variable")

    @maximum_prefixes_restart_variable.setter
    def maximum_prefixes_restart_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "maximum_prefixes_restart_variable", value)

    @_builtins.property
    @pulumi.getter(name="maximumPrefixesThreshold")
    def maximum_prefixes_threshold(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        Set threshold at which to generate a warning message
          - Range: `0`-`100`
          - Default value: `0`
        """
        return pulumi.get(self, "maximum_prefixes_threshold")

    @maximum_prefixes_threshold.setter
    def maximum_prefixes_threshold(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "maximum_prefixes_threshold", value)

    @_builtins.property
    @pulumi.getter(name="maximumPrefixesThresholdVariable")
    def maximum_prefixes_threshold_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "maximum_prefixes_threshold_variable")

    @maximum_prefixes_threshold_variable.setter
    def maximum_prefixes_threshold_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "maximum_prefixes_threshold_variable", value)

    @_builtins.property
    @pulumi.getter(name="maximumPrefixesVariable")
    def maximum_prefixes_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "maximum_prefixes_variable")

    @maximum_prefixes_variable.setter
    def maximum_prefixes_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "maximum_prefixes_variable", value)

    @_builtins.property
    @pulumi.getter(name="maximumPrefixesWarningOnly")
    def maximum_prefixes_warning_only(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Display only a warning message when threshold is exceeded
          - Default value: `false`
        """
        return pulumi.get(self, "maximum_prefixes_warning_only")

    @maximum_prefixes_warning_only.setter
    def maximum_prefixes_warning_only(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "maximum_prefixes_warning_only", value)

    @_builtins.property
    @pulumi.getter(name="maximumPrefixesWarningOnlyVariable")
    def maximum_prefixes_warning_only_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "maximum_prefixes_warning_only_variable")

    @maximum_prefixes_warning_only_variable.setter
    def maximum_prefixes_warning_only_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "maximum_prefixes_warning_only_variable", value)

    @_builtins.property
    @pulumi.getter
    def optional(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Indicates if list item is considered optional.
        """
        return pulumi.get(self, "optional")

    @optional.setter
    def optional(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "optional", value)

    @_builtins.property
    @pulumi.getter(name="routePolicies")
    def route_policies(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['CiscoBgpFeatureTemplateIpv6NeighborAddressFamilyRoutePolicyArgs']]]]:
        """
        Select route policy to apply to prefixes received from BGP neighbor
        """
        return pulumi.get(self, "route_policies")

    @route_policies.setter
    def route_policies(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['CiscoBgpFeatureTemplateIpv6NeighborAddressFamilyRoutePolicyArgs']]]]):
        pulumi.set(self, "route_policies", value)


if not MYPY:
    class CiscoBgpFeatureTemplateIpv6NeighborAddressFamilyRoutePolicyArgsDict(TypedDict):
        direction: NotRequired[pulumi.Input[_builtins.str]]
        """
        Set direction for applying route policy
          - Choices: `in`, `out`
        """
        optional: NotRequired[pulumi.Input[_builtins.bool]]
        """
        Indicates if list item is considered optional.
        """
        policy_name: NotRequired[pulumi.Input[_builtins.str]]
        """
        Configure name of route policy
        """
        policy_name_variable: NotRequired[pulumi.Input[_builtins.str]]
        """
        Variable name
        """
elif False:
    CiscoBgpFeatureTemplateIpv6NeighborAddressFamilyRoutePolicyArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class CiscoBgpFeatureTemplateIpv6NeighborAddressFamilyRoutePolicyArgs:
    def __init__(__self__, *,
                 direction: Optional[pulumi.Input[_builtins.str]] = None,
                 optional: Optional[pulumi.Input[_builtins.bool]] = None,
                 policy_name: Optional[pulumi.Input[_builtins.str]] = None,
                 policy_name_variable: Optional[pulumi.Input[_builtins.str]] = None):
        """
        :param pulumi.Input[_builtins.str] direction: Set direction for applying route policy
                 - Choices: `in`, `out`
        :param pulumi.Input[_builtins.bool] optional: Indicates if list item is considered optional.
        :param pulumi.Input[_builtins.str] policy_name: Configure name of route policy
        :param pulumi.Input[_builtins.str] policy_name_variable: Variable name
        """
        if direction is not None:
            pulumi.set(__self__, "direction", direction)
        if optional is not None:
            pulumi.set(__self__, "optional", optional)
        if policy_name is not None:
            pulumi.set(__self__, "policy_name", policy_name)
        if policy_name_variable is not None:
            pulumi.set(__self__, "policy_name_variable", policy_name_variable)

    @_builtins.property
    @pulumi.getter
    def direction(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Set direction for applying route policy
          - Choices: `in`, `out`
        """
        return pulumi.get(self, "direction")

    @direction.setter
    def direction(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "direction", value)

    @_builtins.property
    @pulumi.getter
    def optional(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Indicates if list item is considered optional.
        """
        return pulumi.get(self, "optional")

    @optional.setter
    def optional(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "optional", value)

    @_builtins.property
    @pulumi.getter(name="policyName")
    def policy_name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Configure name of route policy
        """
        return pulumi.get(self, "policy_name")

    @policy_name.setter
    def policy_name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "policy_name", value)

    @_builtins.property
    @pulumi.getter(name="policyNameVariable")
    def policy_name_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "policy_name_variable")

    @policy_name_variable.setter
    def policy_name_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "policy_name_variable", value)


if not MYPY:
    class CiscoBgpFeatureTemplateIpv6RouteTargetArgsDict(TypedDict):
        exports: NotRequired[pulumi.Input[Sequence[pulumi.Input['CiscoBgpFeatureTemplateIpv6RouteTargetExportArgsDict']]]]
        """
        Export Target-VPN community for IPV6
        """
        imports: NotRequired[pulumi.Input[Sequence[pulumi.Input['CiscoBgpFeatureTemplateIpv6RouteTargetImportArgsDict']]]]
        """
        Import Target-VPN community for IPV6
        """
        optional: NotRequired[pulumi.Input[_builtins.bool]]
        """
        Indicates if list item is considered optional.
        """
        vpn_id: NotRequired[pulumi.Input[_builtins.int]]
        """
        VPN ID for IPv6
          - Range: `1`-`65527`
        """
        vpn_id_variable: NotRequired[pulumi.Input[_builtins.str]]
        """
        Variable name
        """
elif False:
    CiscoBgpFeatureTemplateIpv6RouteTargetArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class CiscoBgpFeatureTemplateIpv6RouteTargetArgs:
    def __init__(__self__, *,
                 exports: Optional[pulumi.Input[Sequence[pulumi.Input['CiscoBgpFeatureTemplateIpv6RouteTargetExportArgs']]]] = None,
                 imports: Optional[pulumi.Input[Sequence[pulumi.Input['CiscoBgpFeatureTemplateIpv6RouteTargetImportArgs']]]] = None,
                 optional: Optional[pulumi.Input[_builtins.bool]] = None,
                 vpn_id: Optional[pulumi.Input[_builtins.int]] = None,
                 vpn_id_variable: Optional[pulumi.Input[_builtins.str]] = None):
        """
        :param pulumi.Input[Sequence[pulumi.Input['CiscoBgpFeatureTemplateIpv6RouteTargetExportArgs']]] exports: Export Target-VPN community for IPV6
        :param pulumi.Input[Sequence[pulumi.Input['CiscoBgpFeatureTemplateIpv6RouteTargetImportArgs']]] imports: Import Target-VPN community for IPV6
        :param pulumi.Input[_builtins.bool] optional: Indicates if list item is considered optional.
        :param pulumi.Input[_builtins.int] vpn_id: VPN ID for IPv6
                 - Range: `1`-`65527`
        :param pulumi.Input[_builtins.str] vpn_id_variable: Variable name
        """
        if exports is not None:
            pulumi.set(__self__, "exports", exports)
        if imports is not None:
            pulumi.set(__self__, "imports", imports)
        if optional is not None:
            pulumi.set(__self__, "optional", optional)
        if vpn_id is not None:
            pulumi.set(__self__, "vpn_id", vpn_id)
        if vpn_id_variable is not None:
            pulumi.set(__self__, "vpn_id_variable", vpn_id_variable)

    @_builtins.property
    @pulumi.getter
    def exports(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['CiscoBgpFeatureTemplateIpv6RouteTargetExportArgs']]]]:
        """
        Export Target-VPN community for IPV6
        """
        return pulumi.get(self, "exports")

    @exports.setter
    def exports(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['CiscoBgpFeatureTemplateIpv6RouteTargetExportArgs']]]]):
        pulumi.set(self, "exports", value)

    @_builtins.property
    @pulumi.getter
    def imports(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['CiscoBgpFeatureTemplateIpv6RouteTargetImportArgs']]]]:
        """
        Import Target-VPN community for IPV6
        """
        return pulumi.get(self, "imports")

    @imports.setter
    def imports(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['CiscoBgpFeatureTemplateIpv6RouteTargetImportArgs']]]]):
        pulumi.set(self, "imports", value)

    @_builtins.property
    @pulumi.getter
    def optional(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Indicates if list item is considered optional.
        """
        return pulumi.get(self, "optional")

    @optional.setter
    def optional(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "optional", value)

    @_builtins.property
    @pulumi.getter(name="vpnId")
    def vpn_id(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        VPN ID for IPv6
          - Range: `1`-`65527`
        """
        return pulumi.get(self, "vpn_id")

    @vpn_id.setter
    def vpn_id(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "vpn_id", value)

    @_builtins.property
    @pulumi.getter(name="vpnIdVariable")
    def vpn_id_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "vpn_id_variable")

    @vpn_id_variable.setter
    def vpn_id_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "vpn_id_variable", value)


if not MYPY:
    class CiscoBgpFeatureTemplateIpv6RouteTargetExportArgsDict(TypedDict):
        asn_ip: NotRequired[pulumi.Input[_builtins.str]]
        """
        asn-ip
        """
        asn_ip_variable: NotRequired[pulumi.Input[_builtins.str]]
        """
        Variable name
        """
        optional: NotRequired[pulumi.Input[_builtins.bool]]
        """
        Indicates if list item is considered optional.
        """
elif False:
    CiscoBgpFeatureTemplateIpv6RouteTargetExportArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class CiscoBgpFeatureTemplateIpv6RouteTargetExportArgs:
    def __init__(__self__, *,
                 asn_ip: Optional[pulumi.Input[_builtins.str]] = None,
                 asn_ip_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 optional: Optional[pulumi.Input[_builtins.bool]] = None):
        """
        :param pulumi.Input[_builtins.str] asn_ip: asn-ip
        :param pulumi.Input[_builtins.str] asn_ip_variable: Variable name
        :param pulumi.Input[_builtins.bool] optional: Indicates if list item is considered optional.
        """
        if asn_ip is not None:
            pulumi.set(__self__, "asn_ip", asn_ip)
        if asn_ip_variable is not None:
            pulumi.set(__self__, "asn_ip_variable", asn_ip_variable)
        if optional is not None:
            pulumi.set(__self__, "optional", optional)

    @_builtins.property
    @pulumi.getter(name="asnIp")
    def asn_ip(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        asn-ip
        """
        return pulumi.get(self, "asn_ip")

    @asn_ip.setter
    def asn_ip(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "asn_ip", value)

    @_builtins.property
    @pulumi.getter(name="asnIpVariable")
    def asn_ip_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "asn_ip_variable")

    @asn_ip_variable.setter
    def asn_ip_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "asn_ip_variable", value)

    @_builtins.property
    @pulumi.getter
    def optional(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Indicates if list item is considered optional.
        """
        return pulumi.get(self, "optional")

    @optional.setter
    def optional(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "optional", value)


if not MYPY:
    class CiscoBgpFeatureTemplateIpv6RouteTargetImportArgsDict(TypedDict):
        asn_ip: NotRequired[pulumi.Input[_builtins.str]]
        """
        asn-ip
        """
        asn_ip_variable: NotRequired[pulumi.Input[_builtins.str]]
        """
        Variable name
        """
        optional: NotRequired[pulumi.Input[_builtins.bool]]
        """
        Indicates if list item is considered optional.
        """
elif False:
    CiscoBgpFeatureTemplateIpv6RouteTargetImportArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class CiscoBgpFeatureTemplateIpv6RouteTargetImportArgs:
    def __init__(__self__, *,
                 asn_ip: Optional[pulumi.Input[_builtins.str]] = None,
                 asn_ip_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 optional: Optional[pulumi.Input[_builtins.bool]] = None):
        """
        :param pulumi.Input[_builtins.str] asn_ip: asn-ip
        :param pulumi.Input[_builtins.str] asn_ip_variable: Variable name
        :param pulumi.Input[_builtins.bool] optional: Indicates if list item is considered optional.
        """
        if asn_ip is not None:
            pulumi.set(__self__, "asn_ip", asn_ip)
        if asn_ip_variable is not None:
            pulumi.set(__self__, "asn_ip_variable", asn_ip_variable)
        if optional is not None:
            pulumi.set(__self__, "optional", optional)

    @_builtins.property
    @pulumi.getter(name="asnIp")
    def asn_ip(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        asn-ip
        """
        return pulumi.get(self, "asn_ip")

    @asn_ip.setter
    def asn_ip(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "asn_ip", value)

    @_builtins.property
    @pulumi.getter(name="asnIpVariable")
    def asn_ip_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "asn_ip_variable")

    @asn_ip_variable.setter
    def asn_ip_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "asn_ip_variable", value)

    @_builtins.property
    @pulumi.getter
    def optional(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Indicates if list item is considered optional.
        """
        return pulumi.get(self, "optional")

    @optional.setter
    def optional(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "optional", value)


if not MYPY:
    class CiscoBgpFeatureTemplateMplsInterfaceArgsDict(TypedDict):
        interface_name: NotRequired[pulumi.Input[_builtins.str]]
        """
        Interface Name
        """
        interface_name_variable: NotRequired[pulumi.Input[_builtins.str]]
        """
        Variable name
        """
        optional: NotRequired[pulumi.Input[_builtins.bool]]
        """
        Indicates if list item is considered optional.
        """
elif False:
    CiscoBgpFeatureTemplateMplsInterfaceArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class CiscoBgpFeatureTemplateMplsInterfaceArgs:
    def __init__(__self__, *,
                 interface_name: Optional[pulumi.Input[_builtins.str]] = None,
                 interface_name_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 optional: Optional[pulumi.Input[_builtins.bool]] = None):
        """
        :param pulumi.Input[_builtins.str] interface_name: Interface Name
        :param pulumi.Input[_builtins.str] interface_name_variable: Variable name
        :param pulumi.Input[_builtins.bool] optional: Indicates if list item is considered optional.
        """
        if interface_name is not None:
            pulumi.set(__self__, "interface_name", interface_name)
        if interface_name_variable is not None:
            pulumi.set(__self__, "interface_name_variable", interface_name_variable)
        if optional is not None:
            pulumi.set(__self__, "optional", optional)

    @_builtins.property
    @pulumi.getter(name="interfaceName")
    def interface_name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Interface Name
        """
        return pulumi.get(self, "interface_name")

    @interface_name.setter
    def interface_name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "interface_name", value)

    @_builtins.property
    @pulumi.getter(name="interfaceNameVariable")
    def interface_name_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "interface_name_variable")

    @interface_name_variable.setter
    def interface_name_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "interface_name_variable", value)

    @_builtins.property
    @pulumi.getter
    def optional(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Indicates if list item is considered optional.
        """
        return pulumi.get(self, "optional")

    @optional.setter
    def optional(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "optional", value)


if not MYPY:
    class CiscoDhcpServerFeatureTemplateOptionArgsDict(TypedDict):
        ascii: NotRequired[pulumi.Input[_builtins.str]]
        """
        Set ASCII value
        """
        ascii_variable: NotRequired[pulumi.Input[_builtins.str]]
        """
        Variable name
        """
        hex: NotRequired[pulumi.Input[_builtins.str]]
        """
        Set HEX value
        """
        hex_variable: NotRequired[pulumi.Input[_builtins.str]]
        """
        Variable name
        """
        ip_address_variable: NotRequired[pulumi.Input[_builtins.str]]
        """
        Variable name
        """
        ip_addresses: NotRequired[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]
        """
        Set ip address
        """
        option_code: NotRequired[pulumi.Input[_builtins.int]]
        """
        Set Option Code
          - Range: `1`-`254`
        """
        option_code_variable: NotRequired[pulumi.Input[_builtins.str]]
        """
        Variable name
        """
        optional: NotRequired[pulumi.Input[_builtins.bool]]
        """
        Indicates if list item is considered optional.
        """
elif False:
    CiscoDhcpServerFeatureTemplateOptionArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class CiscoDhcpServerFeatureTemplateOptionArgs:
    def __init__(__self__, *,
                 ascii: Optional[pulumi.Input[_builtins.str]] = None,
                 ascii_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 hex: Optional[pulumi.Input[_builtins.str]] = None,
                 hex_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 ip_address_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 ip_addresses: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 option_code: Optional[pulumi.Input[_builtins.int]] = None,
                 option_code_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 optional: Optional[pulumi.Input[_builtins.bool]] = None):
        """
        :param pulumi.Input[_builtins.str] ascii: Set ASCII value
        :param pulumi.Input[_builtins.str] ascii_variable: Variable name
        :param pulumi.Input[_builtins.str] hex: Set HEX value
        :param pulumi.Input[_builtins.str] hex_variable: Variable name
        :param pulumi.Input[_builtins.str] ip_address_variable: Variable name
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] ip_addresses: Set ip address
        :param pulumi.Input[_builtins.int] option_code: Set Option Code
                 - Range: `1`-`254`
        :param pulumi.Input[_builtins.str] option_code_variable: Variable name
        :param pulumi.Input[_builtins.bool] optional: Indicates if list item is considered optional.
        """
        if ascii is not None:
            pulumi.set(__self__, "ascii", ascii)
        if ascii_variable is not None:
            pulumi.set(__self__, "ascii_variable", ascii_variable)
        if hex is not None:
            pulumi.set(__self__, "hex", hex)
        if hex_variable is not None:
            pulumi.set(__self__, "hex_variable", hex_variable)
        if ip_address_variable is not None:
            pulumi.set(__self__, "ip_address_variable", ip_address_variable)
        if ip_addresses is not None:
            pulumi.set(__self__, "ip_addresses", ip_addresses)
        if option_code is not None:
            pulumi.set(__self__, "option_code", option_code)
        if option_code_variable is not None:
            pulumi.set(__self__, "option_code_variable", option_code_variable)
        if optional is not None:
            pulumi.set(__self__, "optional", optional)

    @_builtins.property
    @pulumi.getter
    def ascii(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Set ASCII value
        """
        return pulumi.get(self, "ascii")

    @ascii.setter
    def ascii(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "ascii", value)

    @_builtins.property
    @pulumi.getter(name="asciiVariable")
    def ascii_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "ascii_variable")

    @ascii_variable.setter
    def ascii_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "ascii_variable", value)

    @_builtins.property
    @pulumi.getter
    def hex(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Set HEX value
        """
        return pulumi.get(self, "hex")

    @hex.setter
    def hex(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "hex", value)

    @_builtins.property
    @pulumi.getter(name="hexVariable")
    def hex_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "hex_variable")

    @hex_variable.setter
    def hex_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "hex_variable", value)

    @_builtins.property
    @pulumi.getter(name="ipAddressVariable")
    def ip_address_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "ip_address_variable")

    @ip_address_variable.setter
    def ip_address_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "ip_address_variable", value)

    @_builtins.property
    @pulumi.getter(name="ipAddresses")
    def ip_addresses(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]:
        """
        Set ip address
        """
        return pulumi.get(self, "ip_addresses")

    @ip_addresses.setter
    def ip_addresses(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "ip_addresses", value)

    @_builtins.property
    @pulumi.getter(name="optionCode")
    def option_code(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        Set Option Code
          - Range: `1`-`254`
        """
        return pulumi.get(self, "option_code")

    @option_code.setter
    def option_code(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "option_code", value)

    @_builtins.property
    @pulumi.getter(name="optionCodeVariable")
    def option_code_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "option_code_variable")

    @option_code_variable.setter
    def option_code_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "option_code_variable", value)

    @_builtins.property
    @pulumi.getter
    def optional(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Indicates if list item is considered optional.
        """
        return pulumi.get(self, "optional")

    @optional.setter
    def optional(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "optional", value)


if not MYPY:
    class CiscoDhcpServerFeatureTemplateStaticLeaseArgsDict(TypedDict):
        hostname: NotRequired[pulumi.Input[_builtins.str]]
        """
        Set client’s hostname
        """
        hostname_variable: NotRequired[pulumi.Input[_builtins.str]]
        """
        Variable name
        """
        ip_address: NotRequired[pulumi.Input[_builtins.str]]
        """
        Set client’s static IP address
        """
        ip_address_variable: NotRequired[pulumi.Input[_builtins.str]]
        """
        Variable name
        """
        mac_address: NotRequired[pulumi.Input[_builtins.str]]
        """
        Set MAC address of client
        """
        mac_address_variable: NotRequired[pulumi.Input[_builtins.str]]
        """
        Variable name
        """
        optional: NotRequired[pulumi.Input[_builtins.bool]]
        """
        Indicates if list item is considered optional.
        """
elif False:
    CiscoDhcpServerFeatureTemplateStaticLeaseArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class CiscoDhcpServerFeatureTemplateStaticLeaseArgs:
    def __init__(__self__, *,
                 hostname: Optional[pulumi.Input[_builtins.str]] = None,
                 hostname_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 ip_address: Optional[pulumi.Input[_builtins.str]] = None,
                 ip_address_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 mac_address: Optional[pulumi.Input[_builtins.str]] = None,
                 mac_address_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 optional: Optional[pulumi.Input[_builtins.bool]] = None):
        """
        :param pulumi.Input[_builtins.str] hostname: Set client’s hostname
        :param pulumi.Input[_builtins.str] hostname_variable: Variable name
        :param pulumi.Input[_builtins.str] ip_address: Set client’s static IP address
        :param pulumi.Input[_builtins.str] ip_address_variable: Variable name
        :param pulumi.Input[_builtins.str] mac_address: Set MAC address of client
        :param pulumi.Input[_builtins.str] mac_address_variable: Variable name
        :param pulumi.Input[_builtins.bool] optional: Indicates if list item is considered optional.
        """
        if hostname is not None:
            pulumi.set(__self__, "hostname", hostname)
        if hostname_variable is not None:
            pulumi.set(__self__, "hostname_variable", hostname_variable)
        if ip_address is not None:
            pulumi.set(__self__, "ip_address", ip_address)
        if ip_address_variable is not None:
            pulumi.set(__self__, "ip_address_variable", ip_address_variable)
        if mac_address is not None:
            pulumi.set(__self__, "mac_address", mac_address)
        if mac_address_variable is not None:
            pulumi.set(__self__, "mac_address_variable", mac_address_variable)
        if optional is not None:
            pulumi.set(__self__, "optional", optional)

    @_builtins.property
    @pulumi.getter
    def hostname(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Set client’s hostname
        """
        return pulumi.get(self, "hostname")

    @hostname.setter
    def hostname(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "hostname", value)

    @_builtins.property
    @pulumi.getter(name="hostnameVariable")
    def hostname_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "hostname_variable")

    @hostname_variable.setter
    def hostname_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "hostname_variable", value)

    @_builtins.property
    @pulumi.getter(name="ipAddress")
    def ip_address(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Set client’s static IP address
        """
        return pulumi.get(self, "ip_address")

    @ip_address.setter
    def ip_address(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "ip_address", value)

    @_builtins.property
    @pulumi.getter(name="ipAddressVariable")
    def ip_address_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "ip_address_variable")

    @ip_address_variable.setter
    def ip_address_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "ip_address_variable", value)

    @_builtins.property
    @pulumi.getter(name="macAddress")
    def mac_address(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Set MAC address of client
        """
        return pulumi.get(self, "mac_address")

    @mac_address.setter
    def mac_address(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "mac_address", value)

    @_builtins.property
    @pulumi.getter(name="macAddressVariable")
    def mac_address_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "mac_address_variable")

    @mac_address_variable.setter
    def mac_address_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "mac_address_variable", value)

    @_builtins.property
    @pulumi.getter
    def optional(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Indicates if list item is considered optional.
        """
        return pulumi.get(self, "optional")

    @optional.setter
    def optional(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "optional", value)


if not MYPY:
    class CiscoLoggingFeatureTemplateIpv4ServerArgsDict(TypedDict):
        custom_profile: NotRequired[pulumi.Input[_builtins.bool]]
        """
        Define custom profile
          - Default value: `false`
        """
        custom_profile_variable: NotRequired[pulumi.Input[_builtins.str]]
        """
        Variable name
        """
        enable_tls: NotRequired[pulumi.Input[_builtins.bool]]
        """
        Enable TLS
          - Default value: `false`
        """
        enable_tls_variable: NotRequired[pulumi.Input[_builtins.str]]
        """
        Variable name
        """
        hostname_ip: NotRequired[pulumi.Input[_builtins.str]]
        """
        Set hostname or IPv4 address of server
        """
        hostname_ip_variable: NotRequired[pulumi.Input[_builtins.str]]
        """
        Variable name
        """
        logging_level: NotRequired[pulumi.Input[_builtins.str]]
        """
        Set logging level for messages logged to server
          - Choices: `information`, `debugging`, `notice`, `warn`, `error`, `critical`, `alert`, `emergency`
          - Default value: `information`
        """
        logging_level_variable: NotRequired[pulumi.Input[_builtins.str]]
        """
        Variable name
        """
        optional: NotRequired[pulumi.Input[_builtins.bool]]
        """
        Indicates if list item is considered optional.
        """
        profile: NotRequired[pulumi.Input[_builtins.str]]
        """
        Configure a TLS profile
        """
        profile_variable: NotRequired[pulumi.Input[_builtins.str]]
        """
        Variable name
        """
        source_interface: NotRequired[pulumi.Input[_builtins.str]]
        """
        Set interface to use to reach syslog server
        """
        source_interface_variable: NotRequired[pulumi.Input[_builtins.str]]
        """
        Variable name
        """
        vpn_id: NotRequired[pulumi.Input[_builtins.int]]
        """
        Set VPN in which syslog server is located
          - Range: `0`-`65530`
          - Default value: `0`
        """
        vpn_id_variable: NotRequired[pulumi.Input[_builtins.str]]
        """
        Variable name
        """
elif False:
    CiscoLoggingFeatureTemplateIpv4ServerArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class CiscoLoggingFeatureTemplateIpv4ServerArgs:
    def __init__(__self__, *,
                 custom_profile: Optional[pulumi.Input[_builtins.bool]] = None,
                 custom_profile_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 enable_tls: Optional[pulumi.Input[_builtins.bool]] = None,
                 enable_tls_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 hostname_ip: Optional[pulumi.Input[_builtins.str]] = None,
                 hostname_ip_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 logging_level: Optional[pulumi.Input[_builtins.str]] = None,
                 logging_level_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 optional: Optional[pulumi.Input[_builtins.bool]] = None,
                 profile: Optional[pulumi.Input[_builtins.str]] = None,
                 profile_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 source_interface: Optional[pulumi.Input[_builtins.str]] = None,
                 source_interface_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 vpn_id: Optional[pulumi.Input[_builtins.int]] = None,
                 vpn_id_variable: Optional[pulumi.Input[_builtins.str]] = None):
        """
        :param pulumi.Input[_builtins.bool] custom_profile: Define custom profile
                 - Default value: `false`
        :param pulumi.Input[_builtins.str] custom_profile_variable: Variable name
        :param pulumi.Input[_builtins.bool] enable_tls: Enable TLS
                 - Default value: `false`
        :param pulumi.Input[_builtins.str] enable_tls_variable: Variable name
        :param pulumi.Input[_builtins.str] hostname_ip: Set hostname or IPv4 address of server
        :param pulumi.Input[_builtins.str] hostname_ip_variable: Variable name
        :param pulumi.Input[_builtins.str] logging_level: Set logging level for messages logged to server
                 - Choices: `information`, `debugging`, `notice`, `warn`, `error`, `critical`, `alert`, `emergency`
                 - Default value: `information`
        :param pulumi.Input[_builtins.str] logging_level_variable: Variable name
        :param pulumi.Input[_builtins.bool] optional: Indicates if list item is considered optional.
        :param pulumi.Input[_builtins.str] profile: Configure a TLS profile
        :param pulumi.Input[_builtins.str] profile_variable: Variable name
        :param pulumi.Input[_builtins.str] source_interface: Set interface to use to reach syslog server
        :param pulumi.Input[_builtins.str] source_interface_variable: Variable name
        :param pulumi.Input[_builtins.int] vpn_id: Set VPN in which syslog server is located
                 - Range: `0`-`65530`
                 - Default value: `0`
        :param pulumi.Input[_builtins.str] vpn_id_variable: Variable name
        """
        if custom_profile is not None:
            pulumi.set(__self__, "custom_profile", custom_profile)
        if custom_profile_variable is not None:
            pulumi.set(__self__, "custom_profile_variable", custom_profile_variable)
        if enable_tls is not None:
            pulumi.set(__self__, "enable_tls", enable_tls)
        if enable_tls_variable is not None:
            pulumi.set(__self__, "enable_tls_variable", enable_tls_variable)
        if hostname_ip is not None:
            pulumi.set(__self__, "hostname_ip", hostname_ip)
        if hostname_ip_variable is not None:
            pulumi.set(__self__, "hostname_ip_variable", hostname_ip_variable)
        if logging_level is not None:
            pulumi.set(__self__, "logging_level", logging_level)
        if logging_level_variable is not None:
            pulumi.set(__self__, "logging_level_variable", logging_level_variable)
        if optional is not None:
            pulumi.set(__self__, "optional", optional)
        if profile is not None:
            pulumi.set(__self__, "profile", profile)
        if profile_variable is not None:
            pulumi.set(__self__, "profile_variable", profile_variable)
        if source_interface is not None:
            pulumi.set(__self__, "source_interface", source_interface)
        if source_interface_variable is not None:
            pulumi.set(__self__, "source_interface_variable", source_interface_variable)
        if vpn_id is not None:
            pulumi.set(__self__, "vpn_id", vpn_id)
        if vpn_id_variable is not None:
            pulumi.set(__self__, "vpn_id_variable", vpn_id_variable)

    @_builtins.property
    @pulumi.getter(name="customProfile")
    def custom_profile(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Define custom profile
          - Default value: `false`
        """
        return pulumi.get(self, "custom_profile")

    @custom_profile.setter
    def custom_profile(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "custom_profile", value)

    @_builtins.property
    @pulumi.getter(name="customProfileVariable")
    def custom_profile_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "custom_profile_variable")

    @custom_profile_variable.setter
    def custom_profile_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "custom_profile_variable", value)

    @_builtins.property
    @pulumi.getter(name="enableTls")
    def enable_tls(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Enable TLS
          - Default value: `false`
        """
        return pulumi.get(self, "enable_tls")

    @enable_tls.setter
    def enable_tls(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "enable_tls", value)

    @_builtins.property
    @pulumi.getter(name="enableTlsVariable")
    def enable_tls_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "enable_tls_variable")

    @enable_tls_variable.setter
    def enable_tls_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "enable_tls_variable", value)

    @_builtins.property
    @pulumi.getter(name="hostnameIp")
    def hostname_ip(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Set hostname or IPv4 address of server
        """
        return pulumi.get(self, "hostname_ip")

    @hostname_ip.setter
    def hostname_ip(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "hostname_ip", value)

    @_builtins.property
    @pulumi.getter(name="hostnameIpVariable")
    def hostname_ip_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "hostname_ip_variable")

    @hostname_ip_variable.setter
    def hostname_ip_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "hostname_ip_variable", value)

    @_builtins.property
    @pulumi.getter(name="loggingLevel")
    def logging_level(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Set logging level for messages logged to server
          - Choices: `information`, `debugging`, `notice`, `warn`, `error`, `critical`, `alert`, `emergency`
          - Default value: `information`
        """
        return pulumi.get(self, "logging_level")

    @logging_level.setter
    def logging_level(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "logging_level", value)

    @_builtins.property
    @pulumi.getter(name="loggingLevelVariable")
    def logging_level_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "logging_level_variable")

    @logging_level_variable.setter
    def logging_level_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "logging_level_variable", value)

    @_builtins.property
    @pulumi.getter
    def optional(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Indicates if list item is considered optional.
        """
        return pulumi.get(self, "optional")

    @optional.setter
    def optional(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "optional", value)

    @_builtins.property
    @pulumi.getter
    def profile(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Configure a TLS profile
        """
        return pulumi.get(self, "profile")

    @profile.setter
    def profile(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "profile", value)

    @_builtins.property
    @pulumi.getter(name="profileVariable")
    def profile_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "profile_variable")

    @profile_variable.setter
    def profile_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "profile_variable", value)

    @_builtins.property
    @pulumi.getter(name="sourceInterface")
    def source_interface(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Set interface to use to reach syslog server
        """
        return pulumi.get(self, "source_interface")

    @source_interface.setter
    def source_interface(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "source_interface", value)

    @_builtins.property
    @pulumi.getter(name="sourceInterfaceVariable")
    def source_interface_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "source_interface_variable")

    @source_interface_variable.setter
    def source_interface_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "source_interface_variable", value)

    @_builtins.property
    @pulumi.getter(name="vpnId")
    def vpn_id(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        Set VPN in which syslog server is located
          - Range: `0`-`65530`
          - Default value: `0`
        """
        return pulumi.get(self, "vpn_id")

    @vpn_id.setter
    def vpn_id(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "vpn_id", value)

    @_builtins.property
    @pulumi.getter(name="vpnIdVariable")
    def vpn_id_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "vpn_id_variable")

    @vpn_id_variable.setter
    def vpn_id_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "vpn_id_variable", value)


if not MYPY:
    class CiscoLoggingFeatureTemplateIpv6ServerArgsDict(TypedDict):
        custom_profile: NotRequired[pulumi.Input[_builtins.bool]]
        """
        Define custom profile
          - Default value: `false`
        """
        custom_profile_variable: NotRequired[pulumi.Input[_builtins.str]]
        """
        Variable name
        """
        enable_tls: NotRequired[pulumi.Input[_builtins.bool]]
        """
        Enable TLS
          - Default value: `false`
        """
        enable_tls_variable: NotRequired[pulumi.Input[_builtins.str]]
        """
        Variable name
        """
        hostname_ip: NotRequired[pulumi.Input[_builtins.str]]
        """
        Set IPv6 hostname or IPv6 address of server
        """
        hostname_ip_variable: NotRequired[pulumi.Input[_builtins.str]]
        """
        Variable name
        """
        logging_level: NotRequired[pulumi.Input[_builtins.str]]
        """
        Set logging level for messages logged to server
          - Choices: `information`, `debugging`, `notification`, `warn`, `error`, `critical`, `alert`, `emergency`
          - Default value: `information`
        """
        logging_level_variable: NotRequired[pulumi.Input[_builtins.str]]
        """
        Variable name
        """
        optional: NotRequired[pulumi.Input[_builtins.bool]]
        """
        Indicates if list item is considered optional.
        """
        profile: NotRequired[pulumi.Input[_builtins.str]]
        """
        Configure a TLS profile
        """
        profile_variable: NotRequired[pulumi.Input[_builtins.str]]
        """
        Variable name
        """
        source_interface: NotRequired[pulumi.Input[_builtins.str]]
        """
        Set interface to use to reach syslog server
        """
        source_interface_variable: NotRequired[pulumi.Input[_builtins.str]]
        """
        Variable name
        """
        vpn_id: NotRequired[pulumi.Input[_builtins.int]]
        """
        Set VPN in which syslog server is located
          - Range: `0`-`65530`
          - Default value: `0`
        """
        vpn_id_variable: NotRequired[pulumi.Input[_builtins.str]]
        """
        Variable name
        """
elif False:
    CiscoLoggingFeatureTemplateIpv6ServerArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class CiscoLoggingFeatureTemplateIpv6ServerArgs:
    def __init__(__self__, *,
                 custom_profile: Optional[pulumi.Input[_builtins.bool]] = None,
                 custom_profile_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 enable_tls: Optional[pulumi.Input[_builtins.bool]] = None,
                 enable_tls_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 hostname_ip: Optional[pulumi.Input[_builtins.str]] = None,
                 hostname_ip_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 logging_level: Optional[pulumi.Input[_builtins.str]] = None,
                 logging_level_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 optional: Optional[pulumi.Input[_builtins.bool]] = None,
                 profile: Optional[pulumi.Input[_builtins.str]] = None,
                 profile_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 source_interface: Optional[pulumi.Input[_builtins.str]] = None,
                 source_interface_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 vpn_id: Optional[pulumi.Input[_builtins.int]] = None,
                 vpn_id_variable: Optional[pulumi.Input[_builtins.str]] = None):
        """
        :param pulumi.Input[_builtins.bool] custom_profile: Define custom profile
                 - Default value: `false`
        :param pulumi.Input[_builtins.str] custom_profile_variable: Variable name
        :param pulumi.Input[_builtins.bool] enable_tls: Enable TLS
                 - Default value: `false`
        :param pulumi.Input[_builtins.str] enable_tls_variable: Variable name
        :param pulumi.Input[_builtins.str] hostname_ip: Set IPv6 hostname or IPv6 address of server
        :param pulumi.Input[_builtins.str] hostname_ip_variable: Variable name
        :param pulumi.Input[_builtins.str] logging_level: Set logging level for messages logged to server
                 - Choices: `information`, `debugging`, `notification`, `warn`, `error`, `critical`, `alert`, `emergency`
                 - Default value: `information`
        :param pulumi.Input[_builtins.str] logging_level_variable: Variable name
        :param pulumi.Input[_builtins.bool] optional: Indicates if list item is considered optional.
        :param pulumi.Input[_builtins.str] profile: Configure a TLS profile
        :param pulumi.Input[_builtins.str] profile_variable: Variable name
        :param pulumi.Input[_builtins.str] source_interface: Set interface to use to reach syslog server
        :param pulumi.Input[_builtins.str] source_interface_variable: Variable name
        :param pulumi.Input[_builtins.int] vpn_id: Set VPN in which syslog server is located
                 - Range: `0`-`65530`
                 - Default value: `0`
        :param pulumi.Input[_builtins.str] vpn_id_variable: Variable name
        """
        if custom_profile is not None:
            pulumi.set(__self__, "custom_profile", custom_profile)
        if custom_profile_variable is not None:
            pulumi.set(__self__, "custom_profile_variable", custom_profile_variable)
        if enable_tls is not None:
            pulumi.set(__self__, "enable_tls", enable_tls)
        if enable_tls_variable is not None:
            pulumi.set(__self__, "enable_tls_variable", enable_tls_variable)
        if hostname_ip is not None:
            pulumi.set(__self__, "hostname_ip", hostname_ip)
        if hostname_ip_variable is not None:
            pulumi.set(__self__, "hostname_ip_variable", hostname_ip_variable)
        if logging_level is not None:
            pulumi.set(__self__, "logging_level", logging_level)
        if logging_level_variable is not None:
            pulumi.set(__self__, "logging_level_variable", logging_level_variable)
        if optional is not None:
            pulumi.set(__self__, "optional", optional)
        if profile is not None:
            pulumi.set(__self__, "profile", profile)
        if profile_variable is not None:
            pulumi.set(__self__, "profile_variable", profile_variable)
        if source_interface is not None:
            pulumi.set(__self__, "source_interface", source_interface)
        if source_interface_variable is not None:
            pulumi.set(__self__, "source_interface_variable", source_interface_variable)
        if vpn_id is not None:
            pulumi.set(__self__, "vpn_id", vpn_id)
        if vpn_id_variable is not None:
            pulumi.set(__self__, "vpn_id_variable", vpn_id_variable)

    @_builtins.property
    @pulumi.getter(name="customProfile")
    def custom_profile(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Define custom profile
          - Default value: `false`
        """
        return pulumi.get(self, "custom_profile")

    @custom_profile.setter
    def custom_profile(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "custom_profile", value)

    @_builtins.property
    @pulumi.getter(name="customProfileVariable")
    def custom_profile_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "custom_profile_variable")

    @custom_profile_variable.setter
    def custom_profile_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "custom_profile_variable", value)

    @_builtins.property
    @pulumi.getter(name="enableTls")
    def enable_tls(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Enable TLS
          - Default value: `false`
        """
        return pulumi.get(self, "enable_tls")

    @enable_tls.setter
    def enable_tls(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "enable_tls", value)

    @_builtins.property
    @pulumi.getter(name="enableTlsVariable")
    def enable_tls_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "enable_tls_variable")

    @enable_tls_variable.setter
    def enable_tls_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "enable_tls_variable", value)

    @_builtins.property
    @pulumi.getter(name="hostnameIp")
    def hostname_ip(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Set IPv6 hostname or IPv6 address of server
        """
        return pulumi.get(self, "hostname_ip")

    @hostname_ip.setter
    def hostname_ip(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "hostname_ip", value)

    @_builtins.property
    @pulumi.getter(name="hostnameIpVariable")
    def hostname_ip_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "hostname_ip_variable")

    @hostname_ip_variable.setter
    def hostname_ip_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "hostname_ip_variable", value)

    @_builtins.property
    @pulumi.getter(name="loggingLevel")
    def logging_level(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Set logging level for messages logged to server
          - Choices: `information`, `debugging`, `notification`, `warn`, `error`, `critical`, `alert`, `emergency`
          - Default value: `information`
        """
        return pulumi.get(self, "logging_level")

    @logging_level.setter
    def logging_level(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "logging_level", value)

    @_builtins.property
    @pulumi.getter(name="loggingLevelVariable")
    def logging_level_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "logging_level_variable")

    @logging_level_variable.setter
    def logging_level_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "logging_level_variable", value)

    @_builtins.property
    @pulumi.getter
    def optional(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Indicates if list item is considered optional.
        """
        return pulumi.get(self, "optional")

    @optional.setter
    def optional(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "optional", value)

    @_builtins.property
    @pulumi.getter
    def profile(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Configure a TLS profile
        """
        return pulumi.get(self, "profile")

    @profile.setter
    def profile(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "profile", value)

    @_builtins.property
    @pulumi.getter(name="profileVariable")
    def profile_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "profile_variable")

    @profile_variable.setter
    def profile_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "profile_variable", value)

    @_builtins.property
    @pulumi.getter(name="sourceInterface")
    def source_interface(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Set interface to use to reach syslog server
        """
        return pulumi.get(self, "source_interface")

    @source_interface.setter
    def source_interface(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "source_interface", value)

    @_builtins.property
    @pulumi.getter(name="sourceInterfaceVariable")
    def source_interface_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "source_interface_variable")

    @source_interface_variable.setter
    def source_interface_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "source_interface_variable", value)

    @_builtins.property
    @pulumi.getter(name="vpnId")
    def vpn_id(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        Set VPN in which syslog server is located
          - Range: `0`-`65530`
          - Default value: `0`
        """
        return pulumi.get(self, "vpn_id")

    @vpn_id.setter
    def vpn_id(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "vpn_id", value)

    @_builtins.property
    @pulumi.getter(name="vpnIdVariable")
    def vpn_id_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "vpn_id_variable")

    @vpn_id_variable.setter
    def vpn_id_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "vpn_id_variable", value)


if not MYPY:
    class CiscoLoggingFeatureTemplateTlsProfileArgsDict(TypedDict):
        authentication_type: NotRequired[pulumi.Input[_builtins.str]]
        """
        Authentication Type
          - Choices: `Server`, `Mutual`
        """
        ciphersuite_list_variable: NotRequired[pulumi.Input[_builtins.str]]
        """
        Variable name
        """
        ciphersuite_lists: NotRequired[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]
        """
        Syslog secure server ciphersuites. Possible values: `aes-128-cbc-sha`, `aes-256-cbc-sha`, `dhe-aes-cbc-sha2`, `dhe-aes-gcm-sha2`, `ecdhe-ecdsa-aes-gcm-sha2`, `ecdhe-rsa-aes-cbc-sha2`, `ecdhe-rsa-aes-gcm-sha2`, `rsa-aes-cbc-sha2`, `rsa-aes-gcm-sha2`
        """
        name: NotRequired[pulumi.Input[_builtins.str]]
        """
        Specify the name of the TLS profile
        """
        name_variable: NotRequired[pulumi.Input[_builtins.str]]
        """
        Variable name
        """
        optional: NotRequired[pulumi.Input[_builtins.bool]]
        """
        Indicates if list item is considered optional.
        """
        version: NotRequired[pulumi.Input[_builtins.str]]
        """
        TLS Version
          - Choices: `TLSv1.1`, `TLSv1.2`
          - Default value: `TLSv1.1`
        """
        version_variable: NotRequired[pulumi.Input[_builtins.str]]
        """
        Variable name
        """
elif False:
    CiscoLoggingFeatureTemplateTlsProfileArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class CiscoLoggingFeatureTemplateTlsProfileArgs:
    def __init__(__self__, *,
                 authentication_type: Optional[pulumi.Input[_builtins.str]] = None,
                 ciphersuite_list_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 ciphersuite_lists: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 name_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 optional: Optional[pulumi.Input[_builtins.bool]] = None,
                 version: Optional[pulumi.Input[_builtins.str]] = None,
                 version_variable: Optional[pulumi.Input[_builtins.str]] = None):
        """
        :param pulumi.Input[_builtins.str] authentication_type: Authentication Type
                 - Choices: `Server`, `Mutual`
        :param pulumi.Input[_builtins.str] ciphersuite_list_variable: Variable name
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] ciphersuite_lists: Syslog secure server ciphersuites. Possible values: `aes-128-cbc-sha`, `aes-256-cbc-sha`, `dhe-aes-cbc-sha2`, `dhe-aes-gcm-sha2`, `ecdhe-ecdsa-aes-gcm-sha2`, `ecdhe-rsa-aes-cbc-sha2`, `ecdhe-rsa-aes-gcm-sha2`, `rsa-aes-cbc-sha2`, `rsa-aes-gcm-sha2`
        :param pulumi.Input[_builtins.str] name: Specify the name of the TLS profile
        :param pulumi.Input[_builtins.str] name_variable: Variable name
        :param pulumi.Input[_builtins.bool] optional: Indicates if list item is considered optional.
        :param pulumi.Input[_builtins.str] version: TLS Version
                 - Choices: `TLSv1.1`, `TLSv1.2`
                 - Default value: `TLSv1.1`
        :param pulumi.Input[_builtins.str] version_variable: Variable name
        """
        if authentication_type is not None:
            pulumi.set(__self__, "authentication_type", authentication_type)
        if ciphersuite_list_variable is not None:
            pulumi.set(__self__, "ciphersuite_list_variable", ciphersuite_list_variable)
        if ciphersuite_lists is not None:
            pulumi.set(__self__, "ciphersuite_lists", ciphersuite_lists)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if name_variable is not None:
            pulumi.set(__self__, "name_variable", name_variable)
        if optional is not None:
            pulumi.set(__self__, "optional", optional)
        if version is not None:
            pulumi.set(__self__, "version", version)
        if version_variable is not None:
            pulumi.set(__self__, "version_variable", version_variable)

    @_builtins.property
    @pulumi.getter(name="authenticationType")
    def authentication_type(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Authentication Type
          - Choices: `Server`, `Mutual`
        """
        return pulumi.get(self, "authentication_type")

    @authentication_type.setter
    def authentication_type(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "authentication_type", value)

    @_builtins.property
    @pulumi.getter(name="ciphersuiteListVariable")
    def ciphersuite_list_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "ciphersuite_list_variable")

    @ciphersuite_list_variable.setter
    def ciphersuite_list_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "ciphersuite_list_variable", value)

    @_builtins.property
    @pulumi.getter(name="ciphersuiteLists")
    def ciphersuite_lists(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]:
        """
        Syslog secure server ciphersuites. Possible values: `aes-128-cbc-sha`, `aes-256-cbc-sha`, `dhe-aes-cbc-sha2`, `dhe-aes-gcm-sha2`, `ecdhe-ecdsa-aes-gcm-sha2`, `ecdhe-rsa-aes-cbc-sha2`, `ecdhe-rsa-aes-gcm-sha2`, `rsa-aes-cbc-sha2`, `rsa-aes-gcm-sha2`
        """
        return pulumi.get(self, "ciphersuite_lists")

    @ciphersuite_lists.setter
    def ciphersuite_lists(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "ciphersuite_lists", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specify the name of the TLS profile
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "name", value)

    @_builtins.property
    @pulumi.getter(name="nameVariable")
    def name_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "name_variable")

    @name_variable.setter
    def name_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "name_variable", value)

    @_builtins.property
    @pulumi.getter
    def optional(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Indicates if list item is considered optional.
        """
        return pulumi.get(self, "optional")

    @optional.setter
    def optional(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "optional", value)

    @_builtins.property
    @pulumi.getter
    def version(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        TLS Version
          - Choices: `TLSv1.1`, `TLSv1.2`
          - Default value: `TLSv1.1`
        """
        return pulumi.get(self, "version")

    @version.setter
    def version(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "version", value)

    @_builtins.property
    @pulumi.getter(name="versionVariable")
    def version_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "version_variable")

    @version_variable.setter
    def version_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "version_variable", value)


if not MYPY:
    class CiscoNtpFeatureTemplateAuthenticationKeyArgsDict(TypedDict):
        id: NotRequired[pulumi.Input[_builtins.int]]
        """
        MD5 authentication key ID
          - Range: `1`-`65535`
        """
        id_variable: NotRequired[pulumi.Input[_builtins.str]]
        """
        Variable name
        """
        optional: NotRequired[pulumi.Input[_builtins.bool]]
        """
        Indicates if list item is considered optional.
        """
        value: NotRequired[pulumi.Input[_builtins.str]]
        """
        Enter cleartext or AES-encrypted MD5 authentication key
        """
        value_variable: NotRequired[pulumi.Input[_builtins.str]]
        """
        Variable name
        """
elif False:
    CiscoNtpFeatureTemplateAuthenticationKeyArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class CiscoNtpFeatureTemplateAuthenticationKeyArgs:
    def __init__(__self__, *,
                 id: Optional[pulumi.Input[_builtins.int]] = None,
                 id_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 optional: Optional[pulumi.Input[_builtins.bool]] = None,
                 value: Optional[pulumi.Input[_builtins.str]] = None,
                 value_variable: Optional[pulumi.Input[_builtins.str]] = None):
        """
        :param pulumi.Input[_builtins.int] id: MD5 authentication key ID
                 - Range: `1`-`65535`
        :param pulumi.Input[_builtins.str] id_variable: Variable name
        :param pulumi.Input[_builtins.bool] optional: Indicates if list item is considered optional.
        :param pulumi.Input[_builtins.str] value: Enter cleartext or AES-encrypted MD5 authentication key
        :param pulumi.Input[_builtins.str] value_variable: Variable name
        """
        if id is not None:
            pulumi.set(__self__, "id", id)
        if id_variable is not None:
            pulumi.set(__self__, "id_variable", id_variable)
        if optional is not None:
            pulumi.set(__self__, "optional", optional)
        if value is not None:
            pulumi.set(__self__, "value", value)
        if value_variable is not None:
            pulumi.set(__self__, "value_variable", value_variable)

    @_builtins.property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        MD5 authentication key ID
          - Range: `1`-`65535`
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "id", value)

    @_builtins.property
    @pulumi.getter(name="idVariable")
    def id_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "id_variable")

    @id_variable.setter
    def id_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "id_variable", value)

    @_builtins.property
    @pulumi.getter
    def optional(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Indicates if list item is considered optional.
        """
        return pulumi.get(self, "optional")

    @optional.setter
    def optional(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "optional", value)

    @_builtins.property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Enter cleartext or AES-encrypted MD5 authentication key
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "value", value)

    @_builtins.property
    @pulumi.getter(name="valueVariable")
    def value_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "value_variable")

    @value_variable.setter
    def value_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "value_variable", value)


if not MYPY:
    class CiscoNtpFeatureTemplateServerArgsDict(TypedDict):
        authentication_key_id: NotRequired[pulumi.Input[_builtins.int]]
        """
        Set authentication key for the server
          - Range: `1`-`65535`
        """
        authentication_key_id_variable: NotRequired[pulumi.Input[_builtins.str]]
        """
        Variable name
        """
        hostname_ip: NotRequired[pulumi.Input[_builtins.str]]
        """
        Set hostname or IP address of server
        """
        hostname_ip_variable: NotRequired[pulumi.Input[_builtins.str]]
        """
        Variable name
        """
        optional: NotRequired[pulumi.Input[_builtins.bool]]
        """
        Indicates if list item is considered optional.
        """
        prefer: NotRequired[pulumi.Input[_builtins.bool]]
        """
        Prefer this NTP server
          - Default value: `false`
        """
        prefer_variable: NotRequired[pulumi.Input[_builtins.str]]
        """
        Variable name
        """
        source_interface: NotRequired[pulumi.Input[_builtins.str]]
        """
        Set interface to use to reach NTP server
        """
        source_interface_variable: NotRequired[pulumi.Input[_builtins.str]]
        """
        Variable name
        """
        version: NotRequired[pulumi.Input[_builtins.int]]
        """
        Set NTP version
          - Range: `1`-`4`
          - Default value: `4`
        """
        version_variable: NotRequired[pulumi.Input[_builtins.str]]
        """
        Variable name
        """
        vpn_id: NotRequired[pulumi.Input[_builtins.int]]
        """
        Set VPN in which NTP server is located
          - Range: `0`-`65530`
          - Default value: `0`
        """
        vpn_id_variable: NotRequired[pulumi.Input[_builtins.str]]
        """
        Variable name
        """
elif False:
    CiscoNtpFeatureTemplateServerArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class CiscoNtpFeatureTemplateServerArgs:
    def __init__(__self__, *,
                 authentication_key_id: Optional[pulumi.Input[_builtins.int]] = None,
                 authentication_key_id_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 hostname_ip: Optional[pulumi.Input[_builtins.str]] = None,
                 hostname_ip_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 optional: Optional[pulumi.Input[_builtins.bool]] = None,
                 prefer: Optional[pulumi.Input[_builtins.bool]] = None,
                 prefer_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 source_interface: Optional[pulumi.Input[_builtins.str]] = None,
                 source_interface_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 version: Optional[pulumi.Input[_builtins.int]] = None,
                 version_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 vpn_id: Optional[pulumi.Input[_builtins.int]] = None,
                 vpn_id_variable: Optional[pulumi.Input[_builtins.str]] = None):
        """
        :param pulumi.Input[_builtins.int] authentication_key_id: Set authentication key for the server
                 - Range: `1`-`65535`
        :param pulumi.Input[_builtins.str] authentication_key_id_variable: Variable name
        :param pulumi.Input[_builtins.str] hostname_ip: Set hostname or IP address of server
        :param pulumi.Input[_builtins.str] hostname_ip_variable: Variable name
        :param pulumi.Input[_builtins.bool] optional: Indicates if list item is considered optional.
        :param pulumi.Input[_builtins.bool] prefer: Prefer this NTP server
                 - Default value: `false`
        :param pulumi.Input[_builtins.str] prefer_variable: Variable name
        :param pulumi.Input[_builtins.str] source_interface: Set interface to use to reach NTP server
        :param pulumi.Input[_builtins.str] source_interface_variable: Variable name
        :param pulumi.Input[_builtins.int] version: Set NTP version
                 - Range: `1`-`4`
                 - Default value: `4`
        :param pulumi.Input[_builtins.str] version_variable: Variable name
        :param pulumi.Input[_builtins.int] vpn_id: Set VPN in which NTP server is located
                 - Range: `0`-`65530`
                 - Default value: `0`
        :param pulumi.Input[_builtins.str] vpn_id_variable: Variable name
        """
        if authentication_key_id is not None:
            pulumi.set(__self__, "authentication_key_id", authentication_key_id)
        if authentication_key_id_variable is not None:
            pulumi.set(__self__, "authentication_key_id_variable", authentication_key_id_variable)
        if hostname_ip is not None:
            pulumi.set(__self__, "hostname_ip", hostname_ip)
        if hostname_ip_variable is not None:
            pulumi.set(__self__, "hostname_ip_variable", hostname_ip_variable)
        if optional is not None:
            pulumi.set(__self__, "optional", optional)
        if prefer is not None:
            pulumi.set(__self__, "prefer", prefer)
        if prefer_variable is not None:
            pulumi.set(__self__, "prefer_variable", prefer_variable)
        if source_interface is not None:
            pulumi.set(__self__, "source_interface", source_interface)
        if source_interface_variable is not None:
            pulumi.set(__self__, "source_interface_variable", source_interface_variable)
        if version is not None:
            pulumi.set(__self__, "version", version)
        if version_variable is not None:
            pulumi.set(__self__, "version_variable", version_variable)
        if vpn_id is not None:
            pulumi.set(__self__, "vpn_id", vpn_id)
        if vpn_id_variable is not None:
            pulumi.set(__self__, "vpn_id_variable", vpn_id_variable)

    @_builtins.property
    @pulumi.getter(name="authenticationKeyId")
    def authentication_key_id(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        Set authentication key for the server
          - Range: `1`-`65535`
        """
        return pulumi.get(self, "authentication_key_id")

    @authentication_key_id.setter
    def authentication_key_id(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "authentication_key_id", value)

    @_builtins.property
    @pulumi.getter(name="authenticationKeyIdVariable")
    def authentication_key_id_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "authentication_key_id_variable")

    @authentication_key_id_variable.setter
    def authentication_key_id_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "authentication_key_id_variable", value)

    @_builtins.property
    @pulumi.getter(name="hostnameIp")
    def hostname_ip(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Set hostname or IP address of server
        """
        return pulumi.get(self, "hostname_ip")

    @hostname_ip.setter
    def hostname_ip(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "hostname_ip", value)

    @_builtins.property
    @pulumi.getter(name="hostnameIpVariable")
    def hostname_ip_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "hostname_ip_variable")

    @hostname_ip_variable.setter
    def hostname_ip_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "hostname_ip_variable", value)

    @_builtins.property
    @pulumi.getter
    def optional(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Indicates if list item is considered optional.
        """
        return pulumi.get(self, "optional")

    @optional.setter
    def optional(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "optional", value)

    @_builtins.property
    @pulumi.getter
    def prefer(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Prefer this NTP server
          - Default value: `false`
        """
        return pulumi.get(self, "prefer")

    @prefer.setter
    def prefer(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "prefer", value)

    @_builtins.property
    @pulumi.getter(name="preferVariable")
    def prefer_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "prefer_variable")

    @prefer_variable.setter
    def prefer_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "prefer_variable", value)

    @_builtins.property
    @pulumi.getter(name="sourceInterface")
    def source_interface(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Set interface to use to reach NTP server
        """
        return pulumi.get(self, "source_interface")

    @source_interface.setter
    def source_interface(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "source_interface", value)

    @_builtins.property
    @pulumi.getter(name="sourceInterfaceVariable")
    def source_interface_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "source_interface_variable")

    @source_interface_variable.setter
    def source_interface_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "source_interface_variable", value)

    @_builtins.property
    @pulumi.getter
    def version(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        Set NTP version
          - Range: `1`-`4`
          - Default value: `4`
        """
        return pulumi.get(self, "version")

    @version.setter
    def version(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "version", value)

    @_builtins.property
    @pulumi.getter(name="versionVariable")
    def version_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "version_variable")

    @version_variable.setter
    def version_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "version_variable", value)

    @_builtins.property
    @pulumi.getter(name="vpnId")
    def vpn_id(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        Set VPN in which NTP server is located
          - Range: `0`-`65530`
          - Default value: `0`
        """
        return pulumi.get(self, "vpn_id")

    @vpn_id.setter
    def vpn_id(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "vpn_id", value)

    @_builtins.property
    @pulumi.getter(name="vpnIdVariable")
    def vpn_id_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "vpn_id_variable")

    @vpn_id_variable.setter
    def vpn_id_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "vpn_id_variable", value)


if not MYPY:
    class CiscoOmpFeatureTemplateAdvertiseIpv4RouteArgsDict(TypedDict):
        advertise_external_ospf: NotRequired[pulumi.Input[_builtins.str]]
        """
        Advertise OSPF external routes
          - Choices: `external`
        """
        advertise_external_ospf_variable: NotRequired[pulumi.Input[_builtins.str]]
        """
        Variable name
        """
        optional: NotRequired[pulumi.Input[_builtins.bool]]
        """
        Indicates if list item is considered optional.
        """
        protocol: NotRequired[pulumi.Input[_builtins.str]]
        """
        Set routes to advertise
          - Choices: `bgp`, `ospf`, `ospfv3`, `connected`, `static`, `eigrp`, `lisp`, `isis`
        """
elif False:
    CiscoOmpFeatureTemplateAdvertiseIpv4RouteArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class CiscoOmpFeatureTemplateAdvertiseIpv4RouteArgs:
    def __init__(__self__, *,
                 advertise_external_ospf: Optional[pulumi.Input[_builtins.str]] = None,
                 advertise_external_ospf_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 optional: Optional[pulumi.Input[_builtins.bool]] = None,
                 protocol: Optional[pulumi.Input[_builtins.str]] = None):
        """
        :param pulumi.Input[_builtins.str] advertise_external_ospf: Advertise OSPF external routes
                 - Choices: `external`
        :param pulumi.Input[_builtins.str] advertise_external_ospf_variable: Variable name
        :param pulumi.Input[_builtins.bool] optional: Indicates if list item is considered optional.
        :param pulumi.Input[_builtins.str] protocol: Set routes to advertise
                 - Choices: `bgp`, `ospf`, `ospfv3`, `connected`, `static`, `eigrp`, `lisp`, `isis`
        """
        if advertise_external_ospf is not None:
            pulumi.set(__self__, "advertise_external_ospf", advertise_external_ospf)
        if advertise_external_ospf_variable is not None:
            pulumi.set(__self__, "advertise_external_ospf_variable", advertise_external_ospf_variable)
        if optional is not None:
            pulumi.set(__self__, "optional", optional)
        if protocol is not None:
            pulumi.set(__self__, "protocol", protocol)

    @_builtins.property
    @pulumi.getter(name="advertiseExternalOspf")
    def advertise_external_ospf(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Advertise OSPF external routes
          - Choices: `external`
        """
        return pulumi.get(self, "advertise_external_ospf")

    @advertise_external_ospf.setter
    def advertise_external_ospf(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "advertise_external_ospf", value)

    @_builtins.property
    @pulumi.getter(name="advertiseExternalOspfVariable")
    def advertise_external_ospf_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "advertise_external_ospf_variable")

    @advertise_external_ospf_variable.setter
    def advertise_external_ospf_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "advertise_external_ospf_variable", value)

    @_builtins.property
    @pulumi.getter
    def optional(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Indicates if list item is considered optional.
        """
        return pulumi.get(self, "optional")

    @optional.setter
    def optional(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "optional", value)

    @_builtins.property
    @pulumi.getter
    def protocol(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Set routes to advertise
          - Choices: `bgp`, `ospf`, `ospfv3`, `connected`, `static`, `eigrp`, `lisp`, `isis`
        """
        return pulumi.get(self, "protocol")

    @protocol.setter
    def protocol(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "protocol", value)


if not MYPY:
    class CiscoOmpFeatureTemplateAdvertiseIpv6RouteArgsDict(TypedDict):
        optional: NotRequired[pulumi.Input[_builtins.bool]]
        """
        Indicates if list item is considered optional.
        """
        protocol: NotRequired[pulumi.Input[_builtins.str]]
        """
        Set routes to advertise
          - Choices: `bgp`, `ospf`, `connected`, `static`, `eigrp`, `lisp`, `isis`
        """
elif False:
    CiscoOmpFeatureTemplateAdvertiseIpv6RouteArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class CiscoOmpFeatureTemplateAdvertiseIpv6RouteArgs:
    def __init__(__self__, *,
                 optional: Optional[pulumi.Input[_builtins.bool]] = None,
                 protocol: Optional[pulumi.Input[_builtins.str]] = None):
        """
        :param pulumi.Input[_builtins.bool] optional: Indicates if list item is considered optional.
        :param pulumi.Input[_builtins.str] protocol: Set routes to advertise
                 - Choices: `bgp`, `ospf`, `connected`, `static`, `eigrp`, `lisp`, `isis`
        """
        if optional is not None:
            pulumi.set(__self__, "optional", optional)
        if protocol is not None:
            pulumi.set(__self__, "protocol", protocol)

    @_builtins.property
    @pulumi.getter
    def optional(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Indicates if list item is considered optional.
        """
        return pulumi.get(self, "optional")

    @optional.setter
    def optional(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "optional", value)

    @_builtins.property
    @pulumi.getter
    def protocol(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Set routes to advertise
          - Choices: `bgp`, `ospf`, `connected`, `static`, `eigrp`, `lisp`, `isis`
        """
        return pulumi.get(self, "protocol")

    @protocol.setter
    def protocol(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "protocol", value)


if not MYPY:
    class CiscoOspfFeatureTemplateAreaArgsDict(TypedDict):
        area_number: NotRequired[pulumi.Input[_builtins.int]]
        """
        Set OSPF area number
          - Range: `0`-`4294967295`
        """
        area_number_variable: NotRequired[pulumi.Input[_builtins.str]]
        """
        Variable name
        """
        interfaces: NotRequired[pulumi.Input[Sequence[pulumi.Input['CiscoOspfFeatureTemplateAreaInterfaceArgsDict']]]]
        """
        Set OSPF interface parameters
        """
        nssa: NotRequired[pulumi.Input[_builtins.bool]]
        """
        NSSA area
        """
        nssa_no_summary: NotRequired[pulumi.Input[_builtins.bool]]
        """
        Do not inject interarea routes into NSSA
          - Default value: `false`
        """
        nssa_no_summary_variable: NotRequired[pulumi.Input[_builtins.str]]
        """
        Variable name
        """
        optional: NotRequired[pulumi.Input[_builtins.bool]]
        """
        Indicates if list item is considered optional.
        """
        ranges: NotRequired[pulumi.Input[Sequence[pulumi.Input['CiscoOspfFeatureTemplateAreaRangeArgsDict']]]]
        """
        Summarize OSPF routes at an area boundary
        """
        stub: NotRequired[pulumi.Input[_builtins.bool]]
        """
        Stub area
        """
        stub_no_summary: NotRequired[pulumi.Input[_builtins.bool]]
        """
        Do not inject interarea routes into stub
          - Default value: `false`
        """
        stub_no_summary_variable: NotRequired[pulumi.Input[_builtins.str]]
        """
        Variable name
        """
elif False:
    CiscoOspfFeatureTemplateAreaArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class CiscoOspfFeatureTemplateAreaArgs:
    def __init__(__self__, *,
                 area_number: Optional[pulumi.Input[_builtins.int]] = None,
                 area_number_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 interfaces: Optional[pulumi.Input[Sequence[pulumi.Input['CiscoOspfFeatureTemplateAreaInterfaceArgs']]]] = None,
                 nssa: Optional[pulumi.Input[_builtins.bool]] = None,
                 nssa_no_summary: Optional[pulumi.Input[_builtins.bool]] = None,
                 nssa_no_summary_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 optional: Optional[pulumi.Input[_builtins.bool]] = None,
                 ranges: Optional[pulumi.Input[Sequence[pulumi.Input['CiscoOspfFeatureTemplateAreaRangeArgs']]]] = None,
                 stub: Optional[pulumi.Input[_builtins.bool]] = None,
                 stub_no_summary: Optional[pulumi.Input[_builtins.bool]] = None,
                 stub_no_summary_variable: Optional[pulumi.Input[_builtins.str]] = None):
        """
        :param pulumi.Input[_builtins.int] area_number: Set OSPF area number
                 - Range: `0`-`4294967295`
        :param pulumi.Input[_builtins.str] area_number_variable: Variable name
        :param pulumi.Input[Sequence[pulumi.Input['CiscoOspfFeatureTemplateAreaInterfaceArgs']]] interfaces: Set OSPF interface parameters
        :param pulumi.Input[_builtins.bool] nssa: NSSA area
        :param pulumi.Input[_builtins.bool] nssa_no_summary: Do not inject interarea routes into NSSA
                 - Default value: `false`
        :param pulumi.Input[_builtins.str] nssa_no_summary_variable: Variable name
        :param pulumi.Input[_builtins.bool] optional: Indicates if list item is considered optional.
        :param pulumi.Input[Sequence[pulumi.Input['CiscoOspfFeatureTemplateAreaRangeArgs']]] ranges: Summarize OSPF routes at an area boundary
        :param pulumi.Input[_builtins.bool] stub: Stub area
        :param pulumi.Input[_builtins.bool] stub_no_summary: Do not inject interarea routes into stub
                 - Default value: `false`
        :param pulumi.Input[_builtins.str] stub_no_summary_variable: Variable name
        """
        if area_number is not None:
            pulumi.set(__self__, "area_number", area_number)
        if area_number_variable is not None:
            pulumi.set(__self__, "area_number_variable", area_number_variable)
        if interfaces is not None:
            pulumi.set(__self__, "interfaces", interfaces)
        if nssa is not None:
            pulumi.set(__self__, "nssa", nssa)
        if nssa_no_summary is not None:
            pulumi.set(__self__, "nssa_no_summary", nssa_no_summary)
        if nssa_no_summary_variable is not None:
            pulumi.set(__self__, "nssa_no_summary_variable", nssa_no_summary_variable)
        if optional is not None:
            pulumi.set(__self__, "optional", optional)
        if ranges is not None:
            pulumi.set(__self__, "ranges", ranges)
        if stub is not None:
            pulumi.set(__self__, "stub", stub)
        if stub_no_summary is not None:
            pulumi.set(__self__, "stub_no_summary", stub_no_summary)
        if stub_no_summary_variable is not None:
            pulumi.set(__self__, "stub_no_summary_variable", stub_no_summary_variable)

    @_builtins.property
    @pulumi.getter(name="areaNumber")
    def area_number(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        Set OSPF area number
          - Range: `0`-`4294967295`
        """
        return pulumi.get(self, "area_number")

    @area_number.setter
    def area_number(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "area_number", value)

    @_builtins.property
    @pulumi.getter(name="areaNumberVariable")
    def area_number_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "area_number_variable")

    @area_number_variable.setter
    def area_number_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "area_number_variable", value)

    @_builtins.property
    @pulumi.getter
    def interfaces(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['CiscoOspfFeatureTemplateAreaInterfaceArgs']]]]:
        """
        Set OSPF interface parameters
        """
        return pulumi.get(self, "interfaces")

    @interfaces.setter
    def interfaces(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['CiscoOspfFeatureTemplateAreaInterfaceArgs']]]]):
        pulumi.set(self, "interfaces", value)

    @_builtins.property
    @pulumi.getter
    def nssa(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        NSSA area
        """
        return pulumi.get(self, "nssa")

    @nssa.setter
    def nssa(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "nssa", value)

    @_builtins.property
    @pulumi.getter(name="nssaNoSummary")
    def nssa_no_summary(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Do not inject interarea routes into NSSA
          - Default value: `false`
        """
        return pulumi.get(self, "nssa_no_summary")

    @nssa_no_summary.setter
    def nssa_no_summary(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "nssa_no_summary", value)

    @_builtins.property
    @pulumi.getter(name="nssaNoSummaryVariable")
    def nssa_no_summary_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "nssa_no_summary_variable")

    @nssa_no_summary_variable.setter
    def nssa_no_summary_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "nssa_no_summary_variable", value)

    @_builtins.property
    @pulumi.getter
    def optional(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Indicates if list item is considered optional.
        """
        return pulumi.get(self, "optional")

    @optional.setter
    def optional(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "optional", value)

    @_builtins.property
    @pulumi.getter
    def ranges(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['CiscoOspfFeatureTemplateAreaRangeArgs']]]]:
        """
        Summarize OSPF routes at an area boundary
        """
        return pulumi.get(self, "ranges")

    @ranges.setter
    def ranges(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['CiscoOspfFeatureTemplateAreaRangeArgs']]]]):
        pulumi.set(self, "ranges", value)

    @_builtins.property
    @pulumi.getter
    def stub(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Stub area
        """
        return pulumi.get(self, "stub")

    @stub.setter
    def stub(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "stub", value)

    @_builtins.property
    @pulumi.getter(name="stubNoSummary")
    def stub_no_summary(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Do not inject interarea routes into stub
          - Default value: `false`
        """
        return pulumi.get(self, "stub_no_summary")

    @stub_no_summary.setter
    def stub_no_summary(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "stub_no_summary", value)

    @_builtins.property
    @pulumi.getter(name="stubNoSummaryVariable")
    def stub_no_summary_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "stub_no_summary_variable")

    @stub_no_summary_variable.setter
    def stub_no_summary_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "stub_no_summary_variable", value)


if not MYPY:
    class CiscoOspfFeatureTemplateAreaInterfaceArgsDict(TypedDict):
        authentication_message_digest_key: NotRequired[pulumi.Input[_builtins.str]]
        """
        Set MD5 authentication key
        """
        authentication_message_digest_key_id: NotRequired[pulumi.Input[_builtins.int]]
        """
        Set MD5 message digest key
          - Range: `1`-`255`
        """
        authentication_message_digest_key_id_variable: NotRequired[pulumi.Input[_builtins.str]]
        """
        Variable name
        """
        authentication_message_digest_key_variable: NotRequired[pulumi.Input[_builtins.str]]
        """
        Variable name
        """
        authentication_type: NotRequired[pulumi.Input[_builtins.str]]
        """
        Set OSPF interface authentication type
          - Choices: `simple`, `message-digest`, `null`
        """
        authentication_type_variable: NotRequired[pulumi.Input[_builtins.str]]
        """
        Variable name
        """
        cost: NotRequired[pulumi.Input[_builtins.int]]
        """
        Set cost of OSPF interface
          - Range: `1`-`65535`
        """
        cost_variable: NotRequired[pulumi.Input[_builtins.str]]
        """
        Variable name
        """
        dead_interval: NotRequired[pulumi.Input[_builtins.int]]
        """
        Set interval after which neighbor is declared to be down
          - Range: `1`-`65535`
          - Default value: `40`
        """
        dead_interval_variable: NotRequired[pulumi.Input[_builtins.str]]
        """
        Variable name
        """
        hello_interval: NotRequired[pulumi.Input[_builtins.int]]
        """
        Set interval between OSPF hello packets
          - Range: `1`-`65535`
          - Default value: `10`
        """
        hello_interval_variable: NotRequired[pulumi.Input[_builtins.str]]
        """
        Variable name
        """
        name: NotRequired[pulumi.Input[_builtins.str]]
        """
        Set interface name
        """
        name_variable: NotRequired[pulumi.Input[_builtins.str]]
        """
        Variable name
        """
        network: NotRequired[pulumi.Input[_builtins.str]]
        """
        Set the OSPF network type
          - Choices: `broadcast`, `point-to-point`, `non-broadcast`, `point-to-multipoint`
          - Default value: `broadcast`
        """
        network_variable: NotRequired[pulumi.Input[_builtins.str]]
        """
        Variable name
        """
        optional: NotRequired[pulumi.Input[_builtins.bool]]
        """
        Indicates if list item is considered optional.
        """
        passive_interface: NotRequired[pulumi.Input[_builtins.bool]]
        """
        Set the interface to advertise its address, but not to actively run OSPF
          - Default value: `false`
        """
        passive_interface_variable: NotRequired[pulumi.Input[_builtins.str]]
        """
        Variable name
        """
        priority: NotRequired[pulumi.Input[_builtins.int]]
        """
        Set router’s priority to be elected as designated router
          - Range: `0`-`255`
          - Default value: `1`
        """
        priority_variable: NotRequired[pulumi.Input[_builtins.str]]
        """
        Variable name
        """
        retransmit_interval: NotRequired[pulumi.Input[_builtins.int]]
        """
        Set time between retransmitting LSAs
          - Range: `1`-`65535`
          - Default value: `5`
        """
        retransmit_interval_variable: NotRequired[pulumi.Input[_builtins.str]]
        """
        Variable name
        """
elif False:
    CiscoOspfFeatureTemplateAreaInterfaceArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class CiscoOspfFeatureTemplateAreaInterfaceArgs:
    def __init__(__self__, *,
                 authentication_message_digest_key: Optional[pulumi.Input[_builtins.str]] = None,
                 authentication_message_digest_key_id: Optional[pulumi.Input[_builtins.int]] = None,
                 authentication_message_digest_key_id_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 authentication_message_digest_key_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 authentication_type: Optional[pulumi.Input[_builtins.str]] = None,
                 authentication_type_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 cost: Optional[pulumi.Input[_builtins.int]] = None,
                 cost_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 dead_interval: Optional[pulumi.Input[_builtins.int]] = None,
                 dead_interval_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 hello_interval: Optional[pulumi.Input[_builtins.int]] = None,
                 hello_interval_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 name_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 network: Optional[pulumi.Input[_builtins.str]] = None,
                 network_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 optional: Optional[pulumi.Input[_builtins.bool]] = None,
                 passive_interface: Optional[pulumi.Input[_builtins.bool]] = None,
                 passive_interface_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 priority: Optional[pulumi.Input[_builtins.int]] = None,
                 priority_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 retransmit_interval: Optional[pulumi.Input[_builtins.int]] = None,
                 retransmit_interval_variable: Optional[pulumi.Input[_builtins.str]] = None):
        """
        :param pulumi.Input[_builtins.str] authentication_message_digest_key: Set MD5 authentication key
        :param pulumi.Input[_builtins.int] authentication_message_digest_key_id: Set MD5 message digest key
                 - Range: `1`-`255`
        :param pulumi.Input[_builtins.str] authentication_message_digest_key_id_variable: Variable name
        :param pulumi.Input[_builtins.str] authentication_message_digest_key_variable: Variable name
        :param pulumi.Input[_builtins.str] authentication_type: Set OSPF interface authentication type
                 - Choices: `simple`, `message-digest`, `null`
        :param pulumi.Input[_builtins.str] authentication_type_variable: Variable name
        :param pulumi.Input[_builtins.int] cost: Set cost of OSPF interface
                 - Range: `1`-`65535`
        :param pulumi.Input[_builtins.str] cost_variable: Variable name
        :param pulumi.Input[_builtins.int] dead_interval: Set interval after which neighbor is declared to be down
                 - Range: `1`-`65535`
                 - Default value: `40`
        :param pulumi.Input[_builtins.str] dead_interval_variable: Variable name
        :param pulumi.Input[_builtins.int] hello_interval: Set interval between OSPF hello packets
                 - Range: `1`-`65535`
                 - Default value: `10`
        :param pulumi.Input[_builtins.str] hello_interval_variable: Variable name
        :param pulumi.Input[_builtins.str] name: Set interface name
        :param pulumi.Input[_builtins.str] name_variable: Variable name
        :param pulumi.Input[_builtins.str] network: Set the OSPF network type
                 - Choices: `broadcast`, `point-to-point`, `non-broadcast`, `point-to-multipoint`
                 - Default value: `broadcast`
        :param pulumi.Input[_builtins.str] network_variable: Variable name
        :param pulumi.Input[_builtins.bool] optional: Indicates if list item is considered optional.
        :param pulumi.Input[_builtins.bool] passive_interface: Set the interface to advertise its address, but not to actively run OSPF
                 - Default value: `false`
        :param pulumi.Input[_builtins.str] passive_interface_variable: Variable name
        :param pulumi.Input[_builtins.int] priority: Set router’s priority to be elected as designated router
                 - Range: `0`-`255`
                 - Default value: `1`
        :param pulumi.Input[_builtins.str] priority_variable: Variable name
        :param pulumi.Input[_builtins.int] retransmit_interval: Set time between retransmitting LSAs
                 - Range: `1`-`65535`
                 - Default value: `5`
        :param pulumi.Input[_builtins.str] retransmit_interval_variable: Variable name
        """
        if authentication_message_digest_key is not None:
            pulumi.set(__self__, "authentication_message_digest_key", authentication_message_digest_key)
        if authentication_message_digest_key_id is not None:
            pulumi.set(__self__, "authentication_message_digest_key_id", authentication_message_digest_key_id)
        if authentication_message_digest_key_id_variable is not None:
            pulumi.set(__self__, "authentication_message_digest_key_id_variable", authentication_message_digest_key_id_variable)
        if authentication_message_digest_key_variable is not None:
            pulumi.set(__self__, "authentication_message_digest_key_variable", authentication_message_digest_key_variable)
        if authentication_type is not None:
            pulumi.set(__self__, "authentication_type", authentication_type)
        if authentication_type_variable is not None:
            pulumi.set(__self__, "authentication_type_variable", authentication_type_variable)
        if cost is not None:
            pulumi.set(__self__, "cost", cost)
        if cost_variable is not None:
            pulumi.set(__self__, "cost_variable", cost_variable)
        if dead_interval is not None:
            pulumi.set(__self__, "dead_interval", dead_interval)
        if dead_interval_variable is not None:
            pulumi.set(__self__, "dead_interval_variable", dead_interval_variable)
        if hello_interval is not None:
            pulumi.set(__self__, "hello_interval", hello_interval)
        if hello_interval_variable is not None:
            pulumi.set(__self__, "hello_interval_variable", hello_interval_variable)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if name_variable is not None:
            pulumi.set(__self__, "name_variable", name_variable)
        if network is not None:
            pulumi.set(__self__, "network", network)
        if network_variable is not None:
            pulumi.set(__self__, "network_variable", network_variable)
        if optional is not None:
            pulumi.set(__self__, "optional", optional)
        if passive_interface is not None:
            pulumi.set(__self__, "passive_interface", passive_interface)
        if passive_interface_variable is not None:
            pulumi.set(__self__, "passive_interface_variable", passive_interface_variable)
        if priority is not None:
            pulumi.set(__self__, "priority", priority)
        if priority_variable is not None:
            pulumi.set(__self__, "priority_variable", priority_variable)
        if retransmit_interval is not None:
            pulumi.set(__self__, "retransmit_interval", retransmit_interval)
        if retransmit_interval_variable is not None:
            pulumi.set(__self__, "retransmit_interval_variable", retransmit_interval_variable)

    @_builtins.property
    @pulumi.getter(name="authenticationMessageDigestKey")
    def authentication_message_digest_key(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Set MD5 authentication key
        """
        return pulumi.get(self, "authentication_message_digest_key")

    @authentication_message_digest_key.setter
    def authentication_message_digest_key(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "authentication_message_digest_key", value)

    @_builtins.property
    @pulumi.getter(name="authenticationMessageDigestKeyId")
    def authentication_message_digest_key_id(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        Set MD5 message digest key
          - Range: `1`-`255`
        """
        return pulumi.get(self, "authentication_message_digest_key_id")

    @authentication_message_digest_key_id.setter
    def authentication_message_digest_key_id(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "authentication_message_digest_key_id", value)

    @_builtins.property
    @pulumi.getter(name="authenticationMessageDigestKeyIdVariable")
    def authentication_message_digest_key_id_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "authentication_message_digest_key_id_variable")

    @authentication_message_digest_key_id_variable.setter
    def authentication_message_digest_key_id_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "authentication_message_digest_key_id_variable", value)

    @_builtins.property
    @pulumi.getter(name="authenticationMessageDigestKeyVariable")
    def authentication_message_digest_key_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "authentication_message_digest_key_variable")

    @authentication_message_digest_key_variable.setter
    def authentication_message_digest_key_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "authentication_message_digest_key_variable", value)

    @_builtins.property
    @pulumi.getter(name="authenticationType")
    def authentication_type(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Set OSPF interface authentication type
          - Choices: `simple`, `message-digest`, `null`
        """
        return pulumi.get(self, "authentication_type")

    @authentication_type.setter
    def authentication_type(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "authentication_type", value)

    @_builtins.property
    @pulumi.getter(name="authenticationTypeVariable")
    def authentication_type_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "authentication_type_variable")

    @authentication_type_variable.setter
    def authentication_type_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "authentication_type_variable", value)

    @_builtins.property
    @pulumi.getter
    def cost(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        Set cost of OSPF interface
          - Range: `1`-`65535`
        """
        return pulumi.get(self, "cost")

    @cost.setter
    def cost(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "cost", value)

    @_builtins.property
    @pulumi.getter(name="costVariable")
    def cost_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "cost_variable")

    @cost_variable.setter
    def cost_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "cost_variable", value)

    @_builtins.property
    @pulumi.getter(name="deadInterval")
    def dead_interval(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        Set interval after which neighbor is declared to be down
          - Range: `1`-`65535`
          - Default value: `40`
        """
        return pulumi.get(self, "dead_interval")

    @dead_interval.setter
    def dead_interval(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "dead_interval", value)

    @_builtins.property
    @pulumi.getter(name="deadIntervalVariable")
    def dead_interval_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "dead_interval_variable")

    @dead_interval_variable.setter
    def dead_interval_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "dead_interval_variable", value)

    @_builtins.property
    @pulumi.getter(name="helloInterval")
    def hello_interval(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        Set interval between OSPF hello packets
          - Range: `1`-`65535`
          - Default value: `10`
        """
        return pulumi.get(self, "hello_interval")

    @hello_interval.setter
    def hello_interval(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "hello_interval", value)

    @_builtins.property
    @pulumi.getter(name="helloIntervalVariable")
    def hello_interval_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "hello_interval_variable")

    @hello_interval_variable.setter
    def hello_interval_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "hello_interval_variable", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Set interface name
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "name", value)

    @_builtins.property
    @pulumi.getter(name="nameVariable")
    def name_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "name_variable")

    @name_variable.setter
    def name_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "name_variable", value)

    @_builtins.property
    @pulumi.getter
    def network(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Set the OSPF network type
          - Choices: `broadcast`, `point-to-point`, `non-broadcast`, `point-to-multipoint`
          - Default value: `broadcast`
        """
        return pulumi.get(self, "network")

    @network.setter
    def network(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "network", value)

    @_builtins.property
    @pulumi.getter(name="networkVariable")
    def network_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "network_variable")

    @network_variable.setter
    def network_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "network_variable", value)

    @_builtins.property
    @pulumi.getter
    def optional(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Indicates if list item is considered optional.
        """
        return pulumi.get(self, "optional")

    @optional.setter
    def optional(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "optional", value)

    @_builtins.property
    @pulumi.getter(name="passiveInterface")
    def passive_interface(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Set the interface to advertise its address, but not to actively run OSPF
          - Default value: `false`
        """
        return pulumi.get(self, "passive_interface")

    @passive_interface.setter
    def passive_interface(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "passive_interface", value)

    @_builtins.property
    @pulumi.getter(name="passiveInterfaceVariable")
    def passive_interface_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "passive_interface_variable")

    @passive_interface_variable.setter
    def passive_interface_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "passive_interface_variable", value)

    @_builtins.property
    @pulumi.getter
    def priority(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        Set router’s priority to be elected as designated router
          - Range: `0`-`255`
          - Default value: `1`
        """
        return pulumi.get(self, "priority")

    @priority.setter
    def priority(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "priority", value)

    @_builtins.property
    @pulumi.getter(name="priorityVariable")
    def priority_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "priority_variable")

    @priority_variable.setter
    def priority_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "priority_variable", value)

    @_builtins.property
    @pulumi.getter(name="retransmitInterval")
    def retransmit_interval(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        Set time between retransmitting LSAs
          - Range: `1`-`65535`
          - Default value: `5`
        """
        return pulumi.get(self, "retransmit_interval")

    @retransmit_interval.setter
    def retransmit_interval(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "retransmit_interval", value)

    @_builtins.property
    @pulumi.getter(name="retransmitIntervalVariable")
    def retransmit_interval_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "retransmit_interval_variable")

    @retransmit_interval_variable.setter
    def retransmit_interval_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "retransmit_interval_variable", value)


if not MYPY:
    class CiscoOspfFeatureTemplateAreaRangeArgsDict(TypedDict):
        address: NotRequired[pulumi.Input[_builtins.str]]
        """
        Set matching prefix
        """
        address_variable: NotRequired[pulumi.Input[_builtins.str]]
        """
        Variable name
        """
        cost: NotRequired[pulumi.Input[_builtins.int]]
        """
        Set cost for this range
          - Range: `0`-`16777214`
        """
        cost_variable: NotRequired[pulumi.Input[_builtins.str]]
        """
        Variable name
        """
        no_advertise: NotRequired[pulumi.Input[_builtins.bool]]
        """
        Do not advertise this range
          - Default value: `false`
        """
        no_advertise_variable: NotRequired[pulumi.Input[_builtins.str]]
        """
        Variable name
        """
        optional: NotRequired[pulumi.Input[_builtins.bool]]
        """
        Indicates if list item is considered optional.
        """
elif False:
    CiscoOspfFeatureTemplateAreaRangeArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class CiscoOspfFeatureTemplateAreaRangeArgs:
    def __init__(__self__, *,
                 address: Optional[pulumi.Input[_builtins.str]] = None,
                 address_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 cost: Optional[pulumi.Input[_builtins.int]] = None,
                 cost_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 no_advertise: Optional[pulumi.Input[_builtins.bool]] = None,
                 no_advertise_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 optional: Optional[pulumi.Input[_builtins.bool]] = None):
        """
        :param pulumi.Input[_builtins.str] address: Set matching prefix
        :param pulumi.Input[_builtins.str] address_variable: Variable name
        :param pulumi.Input[_builtins.int] cost: Set cost for this range
                 - Range: `0`-`16777214`
        :param pulumi.Input[_builtins.str] cost_variable: Variable name
        :param pulumi.Input[_builtins.bool] no_advertise: Do not advertise this range
                 - Default value: `false`
        :param pulumi.Input[_builtins.str] no_advertise_variable: Variable name
        :param pulumi.Input[_builtins.bool] optional: Indicates if list item is considered optional.
        """
        if address is not None:
            pulumi.set(__self__, "address", address)
        if address_variable is not None:
            pulumi.set(__self__, "address_variable", address_variable)
        if cost is not None:
            pulumi.set(__self__, "cost", cost)
        if cost_variable is not None:
            pulumi.set(__self__, "cost_variable", cost_variable)
        if no_advertise is not None:
            pulumi.set(__self__, "no_advertise", no_advertise)
        if no_advertise_variable is not None:
            pulumi.set(__self__, "no_advertise_variable", no_advertise_variable)
        if optional is not None:
            pulumi.set(__self__, "optional", optional)

    @_builtins.property
    @pulumi.getter
    def address(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Set matching prefix
        """
        return pulumi.get(self, "address")

    @address.setter
    def address(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "address", value)

    @_builtins.property
    @pulumi.getter(name="addressVariable")
    def address_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "address_variable")

    @address_variable.setter
    def address_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "address_variable", value)

    @_builtins.property
    @pulumi.getter
    def cost(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        Set cost for this range
          - Range: `0`-`16777214`
        """
        return pulumi.get(self, "cost")

    @cost.setter
    def cost(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "cost", value)

    @_builtins.property
    @pulumi.getter(name="costVariable")
    def cost_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "cost_variable")

    @cost_variable.setter
    def cost_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "cost_variable", value)

    @_builtins.property
    @pulumi.getter(name="noAdvertise")
    def no_advertise(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Do not advertise this range
          - Default value: `false`
        """
        return pulumi.get(self, "no_advertise")

    @no_advertise.setter
    def no_advertise(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "no_advertise", value)

    @_builtins.property
    @pulumi.getter(name="noAdvertiseVariable")
    def no_advertise_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "no_advertise_variable")

    @no_advertise_variable.setter
    def no_advertise_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "no_advertise_variable", value)

    @_builtins.property
    @pulumi.getter
    def optional(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Indicates if list item is considered optional.
        """
        return pulumi.get(self, "optional")

    @optional.setter
    def optional(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "optional", value)


if not MYPY:
    class CiscoOspfFeatureTemplateMaxMetricRouterLsaArgsDict(TypedDict):
        ad_type: NotRequired[pulumi.Input[_builtins.str]]
        """
        Set the router LSA advertisement type
          - Choices: `administrative`, `on-startup`
        """
        optional: NotRequired[pulumi.Input[_builtins.bool]]
        """
        Indicates if list item is considered optional.
        """
        time: NotRequired[pulumi.Input[_builtins.int]]
        """
        Set how long to advertise maximum metric after router starts up
          - Range: `5`-`86400`
        """
        time_variable: NotRequired[pulumi.Input[_builtins.str]]
        """
        Variable name
        """
elif False:
    CiscoOspfFeatureTemplateMaxMetricRouterLsaArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class CiscoOspfFeatureTemplateMaxMetricRouterLsaArgs:
    def __init__(__self__, *,
                 ad_type: Optional[pulumi.Input[_builtins.str]] = None,
                 optional: Optional[pulumi.Input[_builtins.bool]] = None,
                 time: Optional[pulumi.Input[_builtins.int]] = None,
                 time_variable: Optional[pulumi.Input[_builtins.str]] = None):
        """
        :param pulumi.Input[_builtins.str] ad_type: Set the router LSA advertisement type
                 - Choices: `administrative`, `on-startup`
        :param pulumi.Input[_builtins.bool] optional: Indicates if list item is considered optional.
        :param pulumi.Input[_builtins.int] time: Set how long to advertise maximum metric after router starts up
                 - Range: `5`-`86400`
        :param pulumi.Input[_builtins.str] time_variable: Variable name
        """
        if ad_type is not None:
            pulumi.set(__self__, "ad_type", ad_type)
        if optional is not None:
            pulumi.set(__self__, "optional", optional)
        if time is not None:
            pulumi.set(__self__, "time", time)
        if time_variable is not None:
            pulumi.set(__self__, "time_variable", time_variable)

    @_builtins.property
    @pulumi.getter(name="adType")
    def ad_type(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Set the router LSA advertisement type
          - Choices: `administrative`, `on-startup`
        """
        return pulumi.get(self, "ad_type")

    @ad_type.setter
    def ad_type(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "ad_type", value)

    @_builtins.property
    @pulumi.getter
    def optional(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Indicates if list item is considered optional.
        """
        return pulumi.get(self, "optional")

    @optional.setter
    def optional(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "optional", value)

    @_builtins.property
    @pulumi.getter
    def time(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        Set how long to advertise maximum metric after router starts up
          - Range: `5`-`86400`
        """
        return pulumi.get(self, "time")

    @time.setter
    def time(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "time", value)

    @_builtins.property
    @pulumi.getter(name="timeVariable")
    def time_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "time_variable")

    @time_variable.setter
    def time_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "time_variable", value)


if not MYPY:
    class CiscoOspfFeatureTemplateRedistributeArgsDict(TypedDict):
        nat_dia: NotRequired[pulumi.Input[_builtins.bool]]
        """
        Enable NAT DIA for redistributed routes
          - Default value: `true`
        """
        nat_dia_variable: NotRequired[pulumi.Input[_builtins.str]]
        """
        Variable name
        """
        optional: NotRequired[pulumi.Input[_builtins.bool]]
        """
        Indicates if list item is considered optional.
        """
        protocol: NotRequired[pulumi.Input[_builtins.str]]
        """
        Set the protocol
          - Choices: `static`, `connected`, `bgp`, `omp`, `nat`, `eigrp`
        """
        protocol_variable: NotRequired[pulumi.Input[_builtins.str]]
        """
        Variable name
        """
        route_policy: NotRequired[pulumi.Input[_builtins.str]]
        """
        Set route policy to apply to redistributed routes
        """
        route_policy_variable: NotRequired[pulumi.Input[_builtins.str]]
        """
        Variable name
        """
elif False:
    CiscoOspfFeatureTemplateRedistributeArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class CiscoOspfFeatureTemplateRedistributeArgs:
    def __init__(__self__, *,
                 nat_dia: Optional[pulumi.Input[_builtins.bool]] = None,
                 nat_dia_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 optional: Optional[pulumi.Input[_builtins.bool]] = None,
                 protocol: Optional[pulumi.Input[_builtins.str]] = None,
                 protocol_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 route_policy: Optional[pulumi.Input[_builtins.str]] = None,
                 route_policy_variable: Optional[pulumi.Input[_builtins.str]] = None):
        """
        :param pulumi.Input[_builtins.bool] nat_dia: Enable NAT DIA for redistributed routes
                 - Default value: `true`
        :param pulumi.Input[_builtins.str] nat_dia_variable: Variable name
        :param pulumi.Input[_builtins.bool] optional: Indicates if list item is considered optional.
        :param pulumi.Input[_builtins.str] protocol: Set the protocol
                 - Choices: `static`, `connected`, `bgp`, `omp`, `nat`, `eigrp`
        :param pulumi.Input[_builtins.str] protocol_variable: Variable name
        :param pulumi.Input[_builtins.str] route_policy: Set route policy to apply to redistributed routes
        :param pulumi.Input[_builtins.str] route_policy_variable: Variable name
        """
        if nat_dia is not None:
            pulumi.set(__self__, "nat_dia", nat_dia)
        if nat_dia_variable is not None:
            pulumi.set(__self__, "nat_dia_variable", nat_dia_variable)
        if optional is not None:
            pulumi.set(__self__, "optional", optional)
        if protocol is not None:
            pulumi.set(__self__, "protocol", protocol)
        if protocol_variable is not None:
            pulumi.set(__self__, "protocol_variable", protocol_variable)
        if route_policy is not None:
            pulumi.set(__self__, "route_policy", route_policy)
        if route_policy_variable is not None:
            pulumi.set(__self__, "route_policy_variable", route_policy_variable)

    @_builtins.property
    @pulumi.getter(name="natDia")
    def nat_dia(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Enable NAT DIA for redistributed routes
          - Default value: `true`
        """
        return pulumi.get(self, "nat_dia")

    @nat_dia.setter
    def nat_dia(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "nat_dia", value)

    @_builtins.property
    @pulumi.getter(name="natDiaVariable")
    def nat_dia_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "nat_dia_variable")

    @nat_dia_variable.setter
    def nat_dia_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "nat_dia_variable", value)

    @_builtins.property
    @pulumi.getter
    def optional(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Indicates if list item is considered optional.
        """
        return pulumi.get(self, "optional")

    @optional.setter
    def optional(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "optional", value)

    @_builtins.property
    @pulumi.getter
    def protocol(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Set the protocol
          - Choices: `static`, `connected`, `bgp`, `omp`, `nat`, `eigrp`
        """
        return pulumi.get(self, "protocol")

    @protocol.setter
    def protocol(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "protocol", value)

    @_builtins.property
    @pulumi.getter(name="protocolVariable")
    def protocol_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "protocol_variable")

    @protocol_variable.setter
    def protocol_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "protocol_variable", value)

    @_builtins.property
    @pulumi.getter(name="routePolicy")
    def route_policy(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Set route policy to apply to redistributed routes
        """
        return pulumi.get(self, "route_policy")

    @route_policy.setter
    def route_policy(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "route_policy", value)

    @_builtins.property
    @pulumi.getter(name="routePolicyVariable")
    def route_policy_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "route_policy_variable")

    @route_policy_variable.setter
    def route_policy_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "route_policy_variable", value)


if not MYPY:
    class CiscoOspfFeatureTemplateRoutePolicyArgsDict(TypedDict):
        direction: NotRequired[pulumi.Input[_builtins.str]]
        """
        Set direction to apply policy
          - Choices: `in`
        """
        direction_variable: NotRequired[pulumi.Input[_builtins.str]]
        """
        Variable name
        """
        optional: NotRequired[pulumi.Input[_builtins.bool]]
        """
        Indicates if list item is considered optional.
        """
        policy_name: NotRequired[pulumi.Input[_builtins.str]]
        """
        Name of route policy
        """
        policy_name_variable: NotRequired[pulumi.Input[_builtins.str]]
        """
        Variable name
        """
elif False:
    CiscoOspfFeatureTemplateRoutePolicyArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class CiscoOspfFeatureTemplateRoutePolicyArgs:
    def __init__(__self__, *,
                 direction: Optional[pulumi.Input[_builtins.str]] = None,
                 direction_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 optional: Optional[pulumi.Input[_builtins.bool]] = None,
                 policy_name: Optional[pulumi.Input[_builtins.str]] = None,
                 policy_name_variable: Optional[pulumi.Input[_builtins.str]] = None):
        """
        :param pulumi.Input[_builtins.str] direction: Set direction to apply policy
                 - Choices: `in`
        :param pulumi.Input[_builtins.str] direction_variable: Variable name
        :param pulumi.Input[_builtins.bool] optional: Indicates if list item is considered optional.
        :param pulumi.Input[_builtins.str] policy_name: Name of route policy
        :param pulumi.Input[_builtins.str] policy_name_variable: Variable name
        """
        if direction is not None:
            pulumi.set(__self__, "direction", direction)
        if direction_variable is not None:
            pulumi.set(__self__, "direction_variable", direction_variable)
        if optional is not None:
            pulumi.set(__self__, "optional", optional)
        if policy_name is not None:
            pulumi.set(__self__, "policy_name", policy_name)
        if policy_name_variable is not None:
            pulumi.set(__self__, "policy_name_variable", policy_name_variable)

    @_builtins.property
    @pulumi.getter
    def direction(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Set direction to apply policy
          - Choices: `in`
        """
        return pulumi.get(self, "direction")

    @direction.setter
    def direction(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "direction", value)

    @_builtins.property
    @pulumi.getter(name="directionVariable")
    def direction_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "direction_variable")

    @direction_variable.setter
    def direction_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "direction_variable", value)

    @_builtins.property
    @pulumi.getter
    def optional(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Indicates if list item is considered optional.
        """
        return pulumi.get(self, "optional")

    @optional.setter
    def optional(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "optional", value)

    @_builtins.property
    @pulumi.getter(name="policyName")
    def policy_name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Name of route policy
        """
        return pulumi.get(self, "policy_name")

    @policy_name.setter
    def policy_name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "policy_name", value)

    @_builtins.property
    @pulumi.getter(name="policyNameVariable")
    def policy_name_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "policy_name_variable")

    @policy_name_variable.setter
    def policy_name_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "policy_name_variable", value)


if not MYPY:
    class CiscoOspfv3FeatureTemplateIpv4AreaArgsDict(TypedDict):
        area_number: NotRequired[pulumi.Input[_builtins.int]]
        """
        Set OSPF area number
          - Range: `0`-`4294967295`
        """
        area_number_variable: NotRequired[pulumi.Input[_builtins.str]]
        """
        Variable name
        """
        interfaces: NotRequired[pulumi.Input[Sequence[pulumi.Input['CiscoOspfv3FeatureTemplateIpv4AreaInterfaceArgsDict']]]]
        """
        Set OSPF interface parameters
        """
        normal: NotRequired[pulumi.Input[_builtins.bool]]
        """
        Area Type Normal
          - Default value: `false`
        """
        normal_variable: NotRequired[pulumi.Input[_builtins.str]]
        """
        Variable name
        """
        nssa: NotRequired[pulumi.Input[_builtins.bool]]
        """
        NSSA area
        """
        nssa_no_summary: NotRequired[pulumi.Input[_builtins.bool]]
        """
        Do not inject interarea routes into NSSA
          - Default value: `false`
        """
        nssa_no_summary_variable: NotRequired[pulumi.Input[_builtins.str]]
        """
        Variable name
        """
        optional: NotRequired[pulumi.Input[_builtins.bool]]
        """
        Indicates if list item is considered optional.
        """
        ranges: NotRequired[pulumi.Input[Sequence[pulumi.Input['CiscoOspfv3FeatureTemplateIpv4AreaRangeArgsDict']]]]
        """
        Summarize OSPF routes at an area boundary
        """
        stub: NotRequired[pulumi.Input[_builtins.bool]]
        """
        Stub area
        """
        stub_no_summary: NotRequired[pulumi.Input[_builtins.bool]]
        """
        Do not inject interarea routes into stub
          - Default value: `false`
        """
        stub_no_summary_variable: NotRequired[pulumi.Input[_builtins.str]]
        """
        Variable name
        """
        translate: NotRequired[pulumi.Input[_builtins.str]]
        """
        Always Translate LSAs on this ABR
          - Choices: `always`
        """
        translate_variable: NotRequired[pulumi.Input[_builtins.str]]
        """
        Variable name
        """
elif False:
    CiscoOspfv3FeatureTemplateIpv4AreaArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class CiscoOspfv3FeatureTemplateIpv4AreaArgs:
    def __init__(__self__, *,
                 area_number: Optional[pulumi.Input[_builtins.int]] = None,
                 area_number_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 interfaces: Optional[pulumi.Input[Sequence[pulumi.Input['CiscoOspfv3FeatureTemplateIpv4AreaInterfaceArgs']]]] = None,
                 normal: Optional[pulumi.Input[_builtins.bool]] = None,
                 normal_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 nssa: Optional[pulumi.Input[_builtins.bool]] = None,
                 nssa_no_summary: Optional[pulumi.Input[_builtins.bool]] = None,
                 nssa_no_summary_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 optional: Optional[pulumi.Input[_builtins.bool]] = None,
                 ranges: Optional[pulumi.Input[Sequence[pulumi.Input['CiscoOspfv3FeatureTemplateIpv4AreaRangeArgs']]]] = None,
                 stub: Optional[pulumi.Input[_builtins.bool]] = None,
                 stub_no_summary: Optional[pulumi.Input[_builtins.bool]] = None,
                 stub_no_summary_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 translate: Optional[pulumi.Input[_builtins.str]] = None,
                 translate_variable: Optional[pulumi.Input[_builtins.str]] = None):
        """
        :param pulumi.Input[_builtins.int] area_number: Set OSPF area number
                 - Range: `0`-`4294967295`
        :param pulumi.Input[_builtins.str] area_number_variable: Variable name
        :param pulumi.Input[Sequence[pulumi.Input['CiscoOspfv3FeatureTemplateIpv4AreaInterfaceArgs']]] interfaces: Set OSPF interface parameters
        :param pulumi.Input[_builtins.bool] normal: Area Type Normal
                 - Default value: `false`
        :param pulumi.Input[_builtins.str] normal_variable: Variable name
        :param pulumi.Input[_builtins.bool] nssa: NSSA area
        :param pulumi.Input[_builtins.bool] nssa_no_summary: Do not inject interarea routes into NSSA
                 - Default value: `false`
        :param pulumi.Input[_builtins.str] nssa_no_summary_variable: Variable name
        :param pulumi.Input[_builtins.bool] optional: Indicates if list item is considered optional.
        :param pulumi.Input[Sequence[pulumi.Input['CiscoOspfv3FeatureTemplateIpv4AreaRangeArgs']]] ranges: Summarize OSPF routes at an area boundary
        :param pulumi.Input[_builtins.bool] stub: Stub area
        :param pulumi.Input[_builtins.bool] stub_no_summary: Do not inject interarea routes into stub
                 - Default value: `false`
        :param pulumi.Input[_builtins.str] stub_no_summary_variable: Variable name
        :param pulumi.Input[_builtins.str] translate: Always Translate LSAs on this ABR
                 - Choices: `always`
        :param pulumi.Input[_builtins.str] translate_variable: Variable name
        """
        if area_number is not None:
            pulumi.set(__self__, "area_number", area_number)
        if area_number_variable is not None:
            pulumi.set(__self__, "area_number_variable", area_number_variable)
        if interfaces is not None:
            pulumi.set(__self__, "interfaces", interfaces)
        if normal is not None:
            pulumi.set(__self__, "normal", normal)
        if normal_variable is not None:
            pulumi.set(__self__, "normal_variable", normal_variable)
        if nssa is not None:
            pulumi.set(__self__, "nssa", nssa)
        if nssa_no_summary is not None:
            pulumi.set(__self__, "nssa_no_summary", nssa_no_summary)
        if nssa_no_summary_variable is not None:
            pulumi.set(__self__, "nssa_no_summary_variable", nssa_no_summary_variable)
        if optional is not None:
            pulumi.set(__self__, "optional", optional)
        if ranges is not None:
            pulumi.set(__self__, "ranges", ranges)
        if stub is not None:
            pulumi.set(__self__, "stub", stub)
        if stub_no_summary is not None:
            pulumi.set(__self__, "stub_no_summary", stub_no_summary)
        if stub_no_summary_variable is not None:
            pulumi.set(__self__, "stub_no_summary_variable", stub_no_summary_variable)
        if translate is not None:
            pulumi.set(__self__, "translate", translate)
        if translate_variable is not None:
            pulumi.set(__self__, "translate_variable", translate_variable)

    @_builtins.property
    @pulumi.getter(name="areaNumber")
    def area_number(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        Set OSPF area number
          - Range: `0`-`4294967295`
        """
        return pulumi.get(self, "area_number")

    @area_number.setter
    def area_number(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "area_number", value)

    @_builtins.property
    @pulumi.getter(name="areaNumberVariable")
    def area_number_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "area_number_variable")

    @area_number_variable.setter
    def area_number_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "area_number_variable", value)

    @_builtins.property
    @pulumi.getter
    def interfaces(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['CiscoOspfv3FeatureTemplateIpv4AreaInterfaceArgs']]]]:
        """
        Set OSPF interface parameters
        """
        return pulumi.get(self, "interfaces")

    @interfaces.setter
    def interfaces(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['CiscoOspfv3FeatureTemplateIpv4AreaInterfaceArgs']]]]):
        pulumi.set(self, "interfaces", value)

    @_builtins.property
    @pulumi.getter
    def normal(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Area Type Normal
          - Default value: `false`
        """
        return pulumi.get(self, "normal")

    @normal.setter
    def normal(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "normal", value)

    @_builtins.property
    @pulumi.getter(name="normalVariable")
    def normal_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "normal_variable")

    @normal_variable.setter
    def normal_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "normal_variable", value)

    @_builtins.property
    @pulumi.getter
    def nssa(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        NSSA area
        """
        return pulumi.get(self, "nssa")

    @nssa.setter
    def nssa(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "nssa", value)

    @_builtins.property
    @pulumi.getter(name="nssaNoSummary")
    def nssa_no_summary(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Do not inject interarea routes into NSSA
          - Default value: `false`
        """
        return pulumi.get(self, "nssa_no_summary")

    @nssa_no_summary.setter
    def nssa_no_summary(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "nssa_no_summary", value)

    @_builtins.property
    @pulumi.getter(name="nssaNoSummaryVariable")
    def nssa_no_summary_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "nssa_no_summary_variable")

    @nssa_no_summary_variable.setter
    def nssa_no_summary_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "nssa_no_summary_variable", value)

    @_builtins.property
    @pulumi.getter
    def optional(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Indicates if list item is considered optional.
        """
        return pulumi.get(self, "optional")

    @optional.setter
    def optional(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "optional", value)

    @_builtins.property
    @pulumi.getter
    def ranges(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['CiscoOspfv3FeatureTemplateIpv4AreaRangeArgs']]]]:
        """
        Summarize OSPF routes at an area boundary
        """
        return pulumi.get(self, "ranges")

    @ranges.setter
    def ranges(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['CiscoOspfv3FeatureTemplateIpv4AreaRangeArgs']]]]):
        pulumi.set(self, "ranges", value)

    @_builtins.property
    @pulumi.getter
    def stub(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Stub area
        """
        return pulumi.get(self, "stub")

    @stub.setter
    def stub(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "stub", value)

    @_builtins.property
    @pulumi.getter(name="stubNoSummary")
    def stub_no_summary(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Do not inject interarea routes into stub
          - Default value: `false`
        """
        return pulumi.get(self, "stub_no_summary")

    @stub_no_summary.setter
    def stub_no_summary(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "stub_no_summary", value)

    @_builtins.property
    @pulumi.getter(name="stubNoSummaryVariable")
    def stub_no_summary_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "stub_no_summary_variable")

    @stub_no_summary_variable.setter
    def stub_no_summary_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "stub_no_summary_variable", value)

    @_builtins.property
    @pulumi.getter
    def translate(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Always Translate LSAs on this ABR
          - Choices: `always`
        """
        return pulumi.get(self, "translate")

    @translate.setter
    def translate(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "translate", value)

    @_builtins.property
    @pulumi.getter(name="translateVariable")
    def translate_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "translate_variable")

    @translate_variable.setter
    def translate_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "translate_variable", value)


if not MYPY:
    class CiscoOspfv3FeatureTemplateIpv4AreaInterfaceArgsDict(TypedDict):
        authentication_key: NotRequired[pulumi.Input[_builtins.str]]
        """
        Set OSPF interface authentication key
        """
        authentication_key_variable: NotRequired[pulumi.Input[_builtins.str]]
        """
        Variable name
        """
        authentication_type: NotRequired[pulumi.Input[_builtins.str]]
        """
        Set OSPF interface authentication type
          - Choices: `md5`, `sha1`
        """
        authentication_type_variable: NotRequired[pulumi.Input[_builtins.str]]
        """
        Variable name
        """
        cost: NotRequired[pulumi.Input[_builtins.int]]
        """
        Set cost of OSPF interface
          - Range: `1`-`65535`
        """
        cost_variable: NotRequired[pulumi.Input[_builtins.str]]
        """
        Variable name
        """
        dead_interval: NotRequired[pulumi.Input[_builtins.int]]
        """
        Set interval after which neighbor is declared to be down
          - Range: `1`-`65535`
          - Default value: `40`
        """
        dead_interval_variable: NotRequired[pulumi.Input[_builtins.str]]
        """
        Variable name
        """
        hello_interval: NotRequired[pulumi.Input[_builtins.int]]
        """
        Set interval between OSPF hello packets
          - Range: `1`-`65535`
          - Default value: `10`
        """
        hello_interval_variable: NotRequired[pulumi.Input[_builtins.str]]
        """
        Variable name
        """
        ipsec_spi: NotRequired[pulumi.Input[_builtins.int]]
        """
        Set OSPF interface authentication IPSec SPI, range 256..4294967295
          - Range: `256`-`4294967295`
        """
        ipsec_spi_variable: NotRequired[pulumi.Input[_builtins.str]]
        """
        Variable name
        """
        name: NotRequired[pulumi.Input[_builtins.str]]
        """
        Set interface name
        """
        name_variable: NotRequired[pulumi.Input[_builtins.str]]
        """
        Variable name
        """
        network: NotRequired[pulumi.Input[_builtins.str]]
        """
        Set the OSPF network type
          - Choices: `broadcast`, `point-to-point`, `non-broadcast`, `point-to-multipoint`
          - Default value: `broadcast`
        """
        network_variable: NotRequired[pulumi.Input[_builtins.str]]
        """
        Variable name
        """
        optional: NotRequired[pulumi.Input[_builtins.bool]]
        """
        Indicates if list item is considered optional.
        """
        passive_interface: NotRequired[pulumi.Input[_builtins.bool]]
        """
        Set the interface to advertise its address, but not to actively run OSPF
          - Default value: `false`
        """
        passive_interface_variable: NotRequired[pulumi.Input[_builtins.str]]
        """
        Variable name
        """
        retransmit_interval: NotRequired[pulumi.Input[_builtins.int]]
        """
        Set time between retransmitting LSAs
          - Range: `1`-`65535`
          - Default value: `5`
        """
        retransmit_interval_variable: NotRequired[pulumi.Input[_builtins.str]]
        """
        Variable name
        """
elif False:
    CiscoOspfv3FeatureTemplateIpv4AreaInterfaceArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class CiscoOspfv3FeatureTemplateIpv4AreaInterfaceArgs:
    def __init__(__self__, *,
                 authentication_key: Optional[pulumi.Input[_builtins.str]] = None,
                 authentication_key_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 authentication_type: Optional[pulumi.Input[_builtins.str]] = None,
                 authentication_type_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 cost: Optional[pulumi.Input[_builtins.int]] = None,
                 cost_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 dead_interval: Optional[pulumi.Input[_builtins.int]] = None,
                 dead_interval_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 hello_interval: Optional[pulumi.Input[_builtins.int]] = None,
                 hello_interval_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 ipsec_spi: Optional[pulumi.Input[_builtins.int]] = None,
                 ipsec_spi_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 name_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 network: Optional[pulumi.Input[_builtins.str]] = None,
                 network_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 optional: Optional[pulumi.Input[_builtins.bool]] = None,
                 passive_interface: Optional[pulumi.Input[_builtins.bool]] = None,
                 passive_interface_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 retransmit_interval: Optional[pulumi.Input[_builtins.int]] = None,
                 retransmit_interval_variable: Optional[pulumi.Input[_builtins.str]] = None):
        """
        :param pulumi.Input[_builtins.str] authentication_key: Set OSPF interface authentication key
        :param pulumi.Input[_builtins.str] authentication_key_variable: Variable name
        :param pulumi.Input[_builtins.str] authentication_type: Set OSPF interface authentication type
                 - Choices: `md5`, `sha1`
        :param pulumi.Input[_builtins.str] authentication_type_variable: Variable name
        :param pulumi.Input[_builtins.int] cost: Set cost of OSPF interface
                 - Range: `1`-`65535`
        :param pulumi.Input[_builtins.str] cost_variable: Variable name
        :param pulumi.Input[_builtins.int] dead_interval: Set interval after which neighbor is declared to be down
                 - Range: `1`-`65535`
                 - Default value: `40`
        :param pulumi.Input[_builtins.str] dead_interval_variable: Variable name
        :param pulumi.Input[_builtins.int] hello_interval: Set interval between OSPF hello packets
                 - Range: `1`-`65535`
                 - Default value: `10`
        :param pulumi.Input[_builtins.str] hello_interval_variable: Variable name
        :param pulumi.Input[_builtins.int] ipsec_spi: Set OSPF interface authentication IPSec SPI, range 256..4294967295
                 - Range: `256`-`4294967295`
        :param pulumi.Input[_builtins.str] ipsec_spi_variable: Variable name
        :param pulumi.Input[_builtins.str] name: Set interface name
        :param pulumi.Input[_builtins.str] name_variable: Variable name
        :param pulumi.Input[_builtins.str] network: Set the OSPF network type
                 - Choices: `broadcast`, `point-to-point`, `non-broadcast`, `point-to-multipoint`
                 - Default value: `broadcast`
        :param pulumi.Input[_builtins.str] network_variable: Variable name
        :param pulumi.Input[_builtins.bool] optional: Indicates if list item is considered optional.
        :param pulumi.Input[_builtins.bool] passive_interface: Set the interface to advertise its address, but not to actively run OSPF
                 - Default value: `false`
        :param pulumi.Input[_builtins.str] passive_interface_variable: Variable name
        :param pulumi.Input[_builtins.int] retransmit_interval: Set time between retransmitting LSAs
                 - Range: `1`-`65535`
                 - Default value: `5`
        :param pulumi.Input[_builtins.str] retransmit_interval_variable: Variable name
        """
        if authentication_key is not None:
            pulumi.set(__self__, "authentication_key", authentication_key)
        if authentication_key_variable is not None:
            pulumi.set(__self__, "authentication_key_variable", authentication_key_variable)
        if authentication_type is not None:
            pulumi.set(__self__, "authentication_type", authentication_type)
        if authentication_type_variable is not None:
            pulumi.set(__self__, "authentication_type_variable", authentication_type_variable)
        if cost is not None:
            pulumi.set(__self__, "cost", cost)
        if cost_variable is not None:
            pulumi.set(__self__, "cost_variable", cost_variable)
        if dead_interval is not None:
            pulumi.set(__self__, "dead_interval", dead_interval)
        if dead_interval_variable is not None:
            pulumi.set(__self__, "dead_interval_variable", dead_interval_variable)
        if hello_interval is not None:
            pulumi.set(__self__, "hello_interval", hello_interval)
        if hello_interval_variable is not None:
            pulumi.set(__self__, "hello_interval_variable", hello_interval_variable)
        if ipsec_spi is not None:
            pulumi.set(__self__, "ipsec_spi", ipsec_spi)
        if ipsec_spi_variable is not None:
            pulumi.set(__self__, "ipsec_spi_variable", ipsec_spi_variable)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if name_variable is not None:
            pulumi.set(__self__, "name_variable", name_variable)
        if network is not None:
            pulumi.set(__self__, "network", network)
        if network_variable is not None:
            pulumi.set(__self__, "network_variable", network_variable)
        if optional is not None:
            pulumi.set(__self__, "optional", optional)
        if passive_interface is not None:
            pulumi.set(__self__, "passive_interface", passive_interface)
        if passive_interface_variable is not None:
            pulumi.set(__self__, "passive_interface_variable", passive_interface_variable)
        if retransmit_interval is not None:
            pulumi.set(__self__, "retransmit_interval", retransmit_interval)
        if retransmit_interval_variable is not None:
            pulumi.set(__self__, "retransmit_interval_variable", retransmit_interval_variable)

    @_builtins.property
    @pulumi.getter(name="authenticationKey")
    def authentication_key(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Set OSPF interface authentication key
        """
        return pulumi.get(self, "authentication_key")

    @authentication_key.setter
    def authentication_key(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "authentication_key", value)

    @_builtins.property
    @pulumi.getter(name="authenticationKeyVariable")
    def authentication_key_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "authentication_key_variable")

    @authentication_key_variable.setter
    def authentication_key_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "authentication_key_variable", value)

    @_builtins.property
    @pulumi.getter(name="authenticationType")
    def authentication_type(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Set OSPF interface authentication type
          - Choices: `md5`, `sha1`
        """
        return pulumi.get(self, "authentication_type")

    @authentication_type.setter
    def authentication_type(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "authentication_type", value)

    @_builtins.property
    @pulumi.getter(name="authenticationTypeVariable")
    def authentication_type_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "authentication_type_variable")

    @authentication_type_variable.setter
    def authentication_type_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "authentication_type_variable", value)

    @_builtins.property
    @pulumi.getter
    def cost(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        Set cost of OSPF interface
          - Range: `1`-`65535`
        """
        return pulumi.get(self, "cost")

    @cost.setter
    def cost(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "cost", value)

    @_builtins.property
    @pulumi.getter(name="costVariable")
    def cost_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "cost_variable")

    @cost_variable.setter
    def cost_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "cost_variable", value)

    @_builtins.property
    @pulumi.getter(name="deadInterval")
    def dead_interval(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        Set interval after which neighbor is declared to be down
          - Range: `1`-`65535`
          - Default value: `40`
        """
        return pulumi.get(self, "dead_interval")

    @dead_interval.setter
    def dead_interval(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "dead_interval", value)

    @_builtins.property
    @pulumi.getter(name="deadIntervalVariable")
    def dead_interval_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "dead_interval_variable")

    @dead_interval_variable.setter
    def dead_interval_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "dead_interval_variable", value)

    @_builtins.property
    @pulumi.getter(name="helloInterval")
    def hello_interval(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        Set interval between OSPF hello packets
          - Range: `1`-`65535`
          - Default value: `10`
        """
        return pulumi.get(self, "hello_interval")

    @hello_interval.setter
    def hello_interval(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "hello_interval", value)

    @_builtins.property
    @pulumi.getter(name="helloIntervalVariable")
    def hello_interval_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "hello_interval_variable")

    @hello_interval_variable.setter
    def hello_interval_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "hello_interval_variable", value)

    @_builtins.property
    @pulumi.getter(name="ipsecSpi")
    def ipsec_spi(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        Set OSPF interface authentication IPSec SPI, range 256..4294967295
          - Range: `256`-`4294967295`
        """
        return pulumi.get(self, "ipsec_spi")

    @ipsec_spi.setter
    def ipsec_spi(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "ipsec_spi", value)

    @_builtins.property
    @pulumi.getter(name="ipsecSpiVariable")
    def ipsec_spi_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "ipsec_spi_variable")

    @ipsec_spi_variable.setter
    def ipsec_spi_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "ipsec_spi_variable", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Set interface name
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "name", value)

    @_builtins.property
    @pulumi.getter(name="nameVariable")
    def name_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "name_variable")

    @name_variable.setter
    def name_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "name_variable", value)

    @_builtins.property
    @pulumi.getter
    def network(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Set the OSPF network type
          - Choices: `broadcast`, `point-to-point`, `non-broadcast`, `point-to-multipoint`
          - Default value: `broadcast`
        """
        return pulumi.get(self, "network")

    @network.setter
    def network(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "network", value)

    @_builtins.property
    @pulumi.getter(name="networkVariable")
    def network_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "network_variable")

    @network_variable.setter
    def network_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "network_variable", value)

    @_builtins.property
    @pulumi.getter
    def optional(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Indicates if list item is considered optional.
        """
        return pulumi.get(self, "optional")

    @optional.setter
    def optional(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "optional", value)

    @_builtins.property
    @pulumi.getter(name="passiveInterface")
    def passive_interface(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Set the interface to advertise its address, but not to actively run OSPF
          - Default value: `false`
        """
        return pulumi.get(self, "passive_interface")

    @passive_interface.setter
    def passive_interface(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "passive_interface", value)

    @_builtins.property
    @pulumi.getter(name="passiveInterfaceVariable")
    def passive_interface_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "passive_interface_variable")

    @passive_interface_variable.setter
    def passive_interface_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "passive_interface_variable", value)

    @_builtins.property
    @pulumi.getter(name="retransmitInterval")
    def retransmit_interval(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        Set time between retransmitting LSAs
          - Range: `1`-`65535`
          - Default value: `5`
        """
        return pulumi.get(self, "retransmit_interval")

    @retransmit_interval.setter
    def retransmit_interval(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "retransmit_interval", value)

    @_builtins.property
    @pulumi.getter(name="retransmitIntervalVariable")
    def retransmit_interval_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "retransmit_interval_variable")

    @retransmit_interval_variable.setter
    def retransmit_interval_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "retransmit_interval_variable", value)


if not MYPY:
    class CiscoOspfv3FeatureTemplateIpv4AreaRangeArgsDict(TypedDict):
        address: NotRequired[pulumi.Input[_builtins.str]]
        """
        Set Matching Prefix
        """
        address_variable: NotRequired[pulumi.Input[_builtins.str]]
        """
        Variable name
        """
        cost: NotRequired[pulumi.Input[_builtins.int]]
        """
        Set cost for this range
          - Range: `0`-`16777214`
        """
        cost_variable: NotRequired[pulumi.Input[_builtins.str]]
        """
        Variable name
        """
        no_advertise: NotRequired[pulumi.Input[_builtins.bool]]
        """
        Do not advertise this range
          - Default value: `false`
        """
        no_advertise_variable: NotRequired[pulumi.Input[_builtins.str]]
        """
        Variable name
        """
        optional: NotRequired[pulumi.Input[_builtins.bool]]
        """
        Indicates if list item is considered optional.
        """
elif False:
    CiscoOspfv3FeatureTemplateIpv4AreaRangeArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class CiscoOspfv3FeatureTemplateIpv4AreaRangeArgs:
    def __init__(__self__, *,
                 address: Optional[pulumi.Input[_builtins.str]] = None,
                 address_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 cost: Optional[pulumi.Input[_builtins.int]] = None,
                 cost_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 no_advertise: Optional[pulumi.Input[_builtins.bool]] = None,
                 no_advertise_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 optional: Optional[pulumi.Input[_builtins.bool]] = None):
        """
        :param pulumi.Input[_builtins.str] address: Set Matching Prefix
        :param pulumi.Input[_builtins.str] address_variable: Variable name
        :param pulumi.Input[_builtins.int] cost: Set cost for this range
                 - Range: `0`-`16777214`
        :param pulumi.Input[_builtins.str] cost_variable: Variable name
        :param pulumi.Input[_builtins.bool] no_advertise: Do not advertise this range
                 - Default value: `false`
        :param pulumi.Input[_builtins.str] no_advertise_variable: Variable name
        :param pulumi.Input[_builtins.bool] optional: Indicates if list item is considered optional.
        """
        if address is not None:
            pulumi.set(__self__, "address", address)
        if address_variable is not None:
            pulumi.set(__self__, "address_variable", address_variable)
        if cost is not None:
            pulumi.set(__self__, "cost", cost)
        if cost_variable is not None:
            pulumi.set(__self__, "cost_variable", cost_variable)
        if no_advertise is not None:
            pulumi.set(__self__, "no_advertise", no_advertise)
        if no_advertise_variable is not None:
            pulumi.set(__self__, "no_advertise_variable", no_advertise_variable)
        if optional is not None:
            pulumi.set(__self__, "optional", optional)

    @_builtins.property
    @pulumi.getter
    def address(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Set Matching Prefix
        """
        return pulumi.get(self, "address")

    @address.setter
    def address(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "address", value)

    @_builtins.property
    @pulumi.getter(name="addressVariable")
    def address_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "address_variable")

    @address_variable.setter
    def address_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "address_variable", value)

    @_builtins.property
    @pulumi.getter
    def cost(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        Set cost for this range
          - Range: `0`-`16777214`
        """
        return pulumi.get(self, "cost")

    @cost.setter
    def cost(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "cost", value)

    @_builtins.property
    @pulumi.getter(name="costVariable")
    def cost_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "cost_variable")

    @cost_variable.setter
    def cost_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "cost_variable", value)

    @_builtins.property
    @pulumi.getter(name="noAdvertise")
    def no_advertise(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Do not advertise this range
          - Default value: `false`
        """
        return pulumi.get(self, "no_advertise")

    @no_advertise.setter
    def no_advertise(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "no_advertise", value)

    @_builtins.property
    @pulumi.getter(name="noAdvertiseVariable")
    def no_advertise_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "no_advertise_variable")

    @no_advertise_variable.setter
    def no_advertise_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "no_advertise_variable", value)

    @_builtins.property
    @pulumi.getter
    def optional(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Indicates if list item is considered optional.
        """
        return pulumi.get(self, "optional")

    @optional.setter
    def optional(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "optional", value)


if not MYPY:
    class CiscoOspfv3FeatureTemplateIpv4MaxMetricRouterLsaArgsDict(TypedDict):
        ad_type: NotRequired[pulumi.Input[_builtins.str]]
        """
        Set the router LSA advertisement type
          - Choices: `on-startup`
        """
        optional: NotRequired[pulumi.Input[_builtins.bool]]
        """
        Indicates if list item is considered optional.
        """
        time: NotRequired[pulumi.Input[_builtins.int]]
        """
        Set how long to advertise maximum metric after router starts up
          - Range: `5`-`86400`
        """
        time_variable: NotRequired[pulumi.Input[_builtins.str]]
        """
        Variable name
        """
elif False:
    CiscoOspfv3FeatureTemplateIpv4MaxMetricRouterLsaArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class CiscoOspfv3FeatureTemplateIpv4MaxMetricRouterLsaArgs:
    def __init__(__self__, *,
                 ad_type: Optional[pulumi.Input[_builtins.str]] = None,
                 optional: Optional[pulumi.Input[_builtins.bool]] = None,
                 time: Optional[pulumi.Input[_builtins.int]] = None,
                 time_variable: Optional[pulumi.Input[_builtins.str]] = None):
        """
        :param pulumi.Input[_builtins.str] ad_type: Set the router LSA advertisement type
                 - Choices: `on-startup`
        :param pulumi.Input[_builtins.bool] optional: Indicates if list item is considered optional.
        :param pulumi.Input[_builtins.int] time: Set how long to advertise maximum metric after router starts up
                 - Range: `5`-`86400`
        :param pulumi.Input[_builtins.str] time_variable: Variable name
        """
        if ad_type is not None:
            pulumi.set(__self__, "ad_type", ad_type)
        if optional is not None:
            pulumi.set(__self__, "optional", optional)
        if time is not None:
            pulumi.set(__self__, "time", time)
        if time_variable is not None:
            pulumi.set(__self__, "time_variable", time_variable)

    @_builtins.property
    @pulumi.getter(name="adType")
    def ad_type(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Set the router LSA advertisement type
          - Choices: `on-startup`
        """
        return pulumi.get(self, "ad_type")

    @ad_type.setter
    def ad_type(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "ad_type", value)

    @_builtins.property
    @pulumi.getter
    def optional(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Indicates if list item is considered optional.
        """
        return pulumi.get(self, "optional")

    @optional.setter
    def optional(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "optional", value)

    @_builtins.property
    @pulumi.getter
    def time(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        Set how long to advertise maximum metric after router starts up
          - Range: `5`-`86400`
        """
        return pulumi.get(self, "time")

    @time.setter
    def time(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "time", value)

    @_builtins.property
    @pulumi.getter(name="timeVariable")
    def time_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "time_variable")

    @time_variable.setter
    def time_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "time_variable", value)


if not MYPY:
    class CiscoOspfv3FeatureTemplateIpv4RedistributeArgsDict(TypedDict):
        nat_dia: NotRequired[pulumi.Input[_builtins.bool]]
        """
        Enable NAT DIA for redistributed routes
          - Default value: `true`
        """
        nat_dia_variable: NotRequired[pulumi.Input[_builtins.str]]
        """
        Variable name
        """
        optional: NotRequired[pulumi.Input[_builtins.bool]]
        """
        Indicates if list item is considered optional.
        """
        protocol: NotRequired[pulumi.Input[_builtins.str]]
        """
        Set the protocol
          - Choices: `bgp`, `connected`, `eigrp`, `isis`, `lisp`, `nat-route`, `omp`, `static`
        """
        protocol_variable: NotRequired[pulumi.Input[_builtins.str]]
        """
        Variable name
        """
        route_policy: NotRequired[pulumi.Input[_builtins.str]]
        """
        Set route policy to apply to redistributed routes
        """
        route_policy_variable: NotRequired[pulumi.Input[_builtins.str]]
        """
        Variable name
        """
elif False:
    CiscoOspfv3FeatureTemplateIpv4RedistributeArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class CiscoOspfv3FeatureTemplateIpv4RedistributeArgs:
    def __init__(__self__, *,
                 nat_dia: Optional[pulumi.Input[_builtins.bool]] = None,
                 nat_dia_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 optional: Optional[pulumi.Input[_builtins.bool]] = None,
                 protocol: Optional[pulumi.Input[_builtins.str]] = None,
                 protocol_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 route_policy: Optional[pulumi.Input[_builtins.str]] = None,
                 route_policy_variable: Optional[pulumi.Input[_builtins.str]] = None):
        """
        :param pulumi.Input[_builtins.bool] nat_dia: Enable NAT DIA for redistributed routes
                 - Default value: `true`
        :param pulumi.Input[_builtins.str] nat_dia_variable: Variable name
        :param pulumi.Input[_builtins.bool] optional: Indicates if list item is considered optional.
        :param pulumi.Input[_builtins.str] protocol: Set the protocol
                 - Choices: `bgp`, `connected`, `eigrp`, `isis`, `lisp`, `nat-route`, `omp`, `static`
        :param pulumi.Input[_builtins.str] protocol_variable: Variable name
        :param pulumi.Input[_builtins.str] route_policy: Set route policy to apply to redistributed routes
        :param pulumi.Input[_builtins.str] route_policy_variable: Variable name
        """
        if nat_dia is not None:
            pulumi.set(__self__, "nat_dia", nat_dia)
        if nat_dia_variable is not None:
            pulumi.set(__self__, "nat_dia_variable", nat_dia_variable)
        if optional is not None:
            pulumi.set(__self__, "optional", optional)
        if protocol is not None:
            pulumi.set(__self__, "protocol", protocol)
        if protocol_variable is not None:
            pulumi.set(__self__, "protocol_variable", protocol_variable)
        if route_policy is not None:
            pulumi.set(__self__, "route_policy", route_policy)
        if route_policy_variable is not None:
            pulumi.set(__self__, "route_policy_variable", route_policy_variable)

    @_builtins.property
    @pulumi.getter(name="natDia")
    def nat_dia(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Enable NAT DIA for redistributed routes
          - Default value: `true`
        """
        return pulumi.get(self, "nat_dia")

    @nat_dia.setter
    def nat_dia(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "nat_dia", value)

    @_builtins.property
    @pulumi.getter(name="natDiaVariable")
    def nat_dia_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "nat_dia_variable")

    @nat_dia_variable.setter
    def nat_dia_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "nat_dia_variable", value)

    @_builtins.property
    @pulumi.getter
    def optional(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Indicates if list item is considered optional.
        """
        return pulumi.get(self, "optional")

    @optional.setter
    def optional(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "optional", value)

    @_builtins.property
    @pulumi.getter
    def protocol(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Set the protocol
          - Choices: `bgp`, `connected`, `eigrp`, `isis`, `lisp`, `nat-route`, `omp`, `static`
        """
        return pulumi.get(self, "protocol")

    @protocol.setter
    def protocol(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "protocol", value)

    @_builtins.property
    @pulumi.getter(name="protocolVariable")
    def protocol_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "protocol_variable")

    @protocol_variable.setter
    def protocol_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "protocol_variable", value)

    @_builtins.property
    @pulumi.getter(name="routePolicy")
    def route_policy(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Set route policy to apply to redistributed routes
        """
        return pulumi.get(self, "route_policy")

    @route_policy.setter
    def route_policy(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "route_policy", value)

    @_builtins.property
    @pulumi.getter(name="routePolicyVariable")
    def route_policy_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "route_policy_variable")

    @route_policy_variable.setter
    def route_policy_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "route_policy_variable", value)


if not MYPY:
    class CiscoOspfv3FeatureTemplateIpv6AreaArgsDict(TypedDict):
        area_number: NotRequired[pulumi.Input[_builtins.int]]
        """
        Set OSPF area number
          - Range: `0`-`4294967295`
        """
        area_number_variable: NotRequired[pulumi.Input[_builtins.str]]
        """
        Variable name
        """
        interfaces: NotRequired[pulumi.Input[Sequence[pulumi.Input['CiscoOspfv3FeatureTemplateIpv6AreaInterfaceArgsDict']]]]
        """
        Set OSPF interface parameters
        """
        normal: NotRequired[pulumi.Input[_builtins.bool]]
        """
        Area Type Normal
          - Default value: `false`
        """
        normal_variable: NotRequired[pulumi.Input[_builtins.str]]
        """
        Variable name
        """
        nssa: NotRequired[pulumi.Input[_builtins.bool]]
        """
        NSSA area
        """
        nssa_no_summary: NotRequired[pulumi.Input[_builtins.bool]]
        """
        Do not inject interarea routes into NSSA
          - Default value: `false`
        """
        nssa_no_summary_variable: NotRequired[pulumi.Input[_builtins.str]]
        """
        Variable name
        """
        optional: NotRequired[pulumi.Input[_builtins.bool]]
        """
        Indicates if list item is considered optional.
        """
        ranges: NotRequired[pulumi.Input[Sequence[pulumi.Input['CiscoOspfv3FeatureTemplateIpv6AreaRangeArgsDict']]]]
        """
        Summarize OSPF routes at an area boundary
        """
        stub: NotRequired[pulumi.Input[_builtins.bool]]
        """
        Stub area
        """
        stub_no_summary: NotRequired[pulumi.Input[_builtins.bool]]
        """
        Do not inject interarea routes into stub
          - Default value: `false`
        """
        stub_no_summary_variable: NotRequired[pulumi.Input[_builtins.str]]
        """
        Variable name
        """
        translate: NotRequired[pulumi.Input[_builtins.str]]
        """
        Always translate LSAs on this ABR
          - Choices: `always`
        """
        translate_variable: NotRequired[pulumi.Input[_builtins.str]]
        """
        Variable name
        """
elif False:
    CiscoOspfv3FeatureTemplateIpv6AreaArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class CiscoOspfv3FeatureTemplateIpv6AreaArgs:
    def __init__(__self__, *,
                 area_number: Optional[pulumi.Input[_builtins.int]] = None,
                 area_number_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 interfaces: Optional[pulumi.Input[Sequence[pulumi.Input['CiscoOspfv3FeatureTemplateIpv6AreaInterfaceArgs']]]] = None,
                 normal: Optional[pulumi.Input[_builtins.bool]] = None,
                 normal_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 nssa: Optional[pulumi.Input[_builtins.bool]] = None,
                 nssa_no_summary: Optional[pulumi.Input[_builtins.bool]] = None,
                 nssa_no_summary_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 optional: Optional[pulumi.Input[_builtins.bool]] = None,
                 ranges: Optional[pulumi.Input[Sequence[pulumi.Input['CiscoOspfv3FeatureTemplateIpv6AreaRangeArgs']]]] = None,
                 stub: Optional[pulumi.Input[_builtins.bool]] = None,
                 stub_no_summary: Optional[pulumi.Input[_builtins.bool]] = None,
                 stub_no_summary_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 translate: Optional[pulumi.Input[_builtins.str]] = None,
                 translate_variable: Optional[pulumi.Input[_builtins.str]] = None):
        """
        :param pulumi.Input[_builtins.int] area_number: Set OSPF area number
                 - Range: `0`-`4294967295`
        :param pulumi.Input[_builtins.str] area_number_variable: Variable name
        :param pulumi.Input[Sequence[pulumi.Input['CiscoOspfv3FeatureTemplateIpv6AreaInterfaceArgs']]] interfaces: Set OSPF interface parameters
        :param pulumi.Input[_builtins.bool] normal: Area Type Normal
                 - Default value: `false`
        :param pulumi.Input[_builtins.str] normal_variable: Variable name
        :param pulumi.Input[_builtins.bool] nssa: NSSA area
        :param pulumi.Input[_builtins.bool] nssa_no_summary: Do not inject interarea routes into NSSA
                 - Default value: `false`
        :param pulumi.Input[_builtins.str] nssa_no_summary_variable: Variable name
        :param pulumi.Input[_builtins.bool] optional: Indicates if list item is considered optional.
        :param pulumi.Input[Sequence[pulumi.Input['CiscoOspfv3FeatureTemplateIpv6AreaRangeArgs']]] ranges: Summarize OSPF routes at an area boundary
        :param pulumi.Input[_builtins.bool] stub: Stub area
        :param pulumi.Input[_builtins.bool] stub_no_summary: Do not inject interarea routes into stub
                 - Default value: `false`
        :param pulumi.Input[_builtins.str] stub_no_summary_variable: Variable name
        :param pulumi.Input[_builtins.str] translate: Always translate LSAs on this ABR
                 - Choices: `always`
        :param pulumi.Input[_builtins.str] translate_variable: Variable name
        """
        if area_number is not None:
            pulumi.set(__self__, "area_number", area_number)
        if area_number_variable is not None:
            pulumi.set(__self__, "area_number_variable", area_number_variable)
        if interfaces is not None:
            pulumi.set(__self__, "interfaces", interfaces)
        if normal is not None:
            pulumi.set(__self__, "normal", normal)
        if normal_variable is not None:
            pulumi.set(__self__, "normal_variable", normal_variable)
        if nssa is not None:
            pulumi.set(__self__, "nssa", nssa)
        if nssa_no_summary is not None:
            pulumi.set(__self__, "nssa_no_summary", nssa_no_summary)
        if nssa_no_summary_variable is not None:
            pulumi.set(__self__, "nssa_no_summary_variable", nssa_no_summary_variable)
        if optional is not None:
            pulumi.set(__self__, "optional", optional)
        if ranges is not None:
            pulumi.set(__self__, "ranges", ranges)
        if stub is not None:
            pulumi.set(__self__, "stub", stub)
        if stub_no_summary is not None:
            pulumi.set(__self__, "stub_no_summary", stub_no_summary)
        if stub_no_summary_variable is not None:
            pulumi.set(__self__, "stub_no_summary_variable", stub_no_summary_variable)
        if translate is not None:
            pulumi.set(__self__, "translate", translate)
        if translate_variable is not None:
            pulumi.set(__self__, "translate_variable", translate_variable)

    @_builtins.property
    @pulumi.getter(name="areaNumber")
    def area_number(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        Set OSPF area number
          - Range: `0`-`4294967295`
        """
        return pulumi.get(self, "area_number")

    @area_number.setter
    def area_number(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "area_number", value)

    @_builtins.property
    @pulumi.getter(name="areaNumberVariable")
    def area_number_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "area_number_variable")

    @area_number_variable.setter
    def area_number_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "area_number_variable", value)

    @_builtins.property
    @pulumi.getter
    def interfaces(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['CiscoOspfv3FeatureTemplateIpv6AreaInterfaceArgs']]]]:
        """
        Set OSPF interface parameters
        """
        return pulumi.get(self, "interfaces")

    @interfaces.setter
    def interfaces(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['CiscoOspfv3FeatureTemplateIpv6AreaInterfaceArgs']]]]):
        pulumi.set(self, "interfaces", value)

    @_builtins.property
    @pulumi.getter
    def normal(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Area Type Normal
          - Default value: `false`
        """
        return pulumi.get(self, "normal")

    @normal.setter
    def normal(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "normal", value)

    @_builtins.property
    @pulumi.getter(name="normalVariable")
    def normal_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "normal_variable")

    @normal_variable.setter
    def normal_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "normal_variable", value)

    @_builtins.property
    @pulumi.getter
    def nssa(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        NSSA area
        """
        return pulumi.get(self, "nssa")

    @nssa.setter
    def nssa(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "nssa", value)

    @_builtins.property
    @pulumi.getter(name="nssaNoSummary")
    def nssa_no_summary(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Do not inject interarea routes into NSSA
          - Default value: `false`
        """
        return pulumi.get(self, "nssa_no_summary")

    @nssa_no_summary.setter
    def nssa_no_summary(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "nssa_no_summary", value)

    @_builtins.property
    @pulumi.getter(name="nssaNoSummaryVariable")
    def nssa_no_summary_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "nssa_no_summary_variable")

    @nssa_no_summary_variable.setter
    def nssa_no_summary_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "nssa_no_summary_variable", value)

    @_builtins.property
    @pulumi.getter
    def optional(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Indicates if list item is considered optional.
        """
        return pulumi.get(self, "optional")

    @optional.setter
    def optional(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "optional", value)

    @_builtins.property
    @pulumi.getter
    def ranges(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['CiscoOspfv3FeatureTemplateIpv6AreaRangeArgs']]]]:
        """
        Summarize OSPF routes at an area boundary
        """
        return pulumi.get(self, "ranges")

    @ranges.setter
    def ranges(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['CiscoOspfv3FeatureTemplateIpv6AreaRangeArgs']]]]):
        pulumi.set(self, "ranges", value)

    @_builtins.property
    @pulumi.getter
    def stub(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Stub area
        """
        return pulumi.get(self, "stub")

    @stub.setter
    def stub(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "stub", value)

    @_builtins.property
    @pulumi.getter(name="stubNoSummary")
    def stub_no_summary(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Do not inject interarea routes into stub
          - Default value: `false`
        """
        return pulumi.get(self, "stub_no_summary")

    @stub_no_summary.setter
    def stub_no_summary(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "stub_no_summary", value)

    @_builtins.property
    @pulumi.getter(name="stubNoSummaryVariable")
    def stub_no_summary_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "stub_no_summary_variable")

    @stub_no_summary_variable.setter
    def stub_no_summary_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "stub_no_summary_variable", value)

    @_builtins.property
    @pulumi.getter
    def translate(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Always translate LSAs on this ABR
          - Choices: `always`
        """
        return pulumi.get(self, "translate")

    @translate.setter
    def translate(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "translate", value)

    @_builtins.property
    @pulumi.getter(name="translateVariable")
    def translate_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "translate_variable")

    @translate_variable.setter
    def translate_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "translate_variable", value)


if not MYPY:
    class CiscoOspfv3FeatureTemplateIpv6AreaInterfaceArgsDict(TypedDict):
        authentication_key: NotRequired[pulumi.Input[_builtins.str]]
        """
        Set OSPF interface authentication key
        """
        authentication_key_variable: NotRequired[pulumi.Input[_builtins.str]]
        """
        Variable name
        """
        authentication_type: NotRequired[pulumi.Input[_builtins.str]]
        """
        Set OSPF interface authentication type
          - Choices: `md5`, `sha1`
        """
        authentication_type_variable: NotRequired[pulumi.Input[_builtins.str]]
        """
        Variable name
        """
        cost: NotRequired[pulumi.Input[_builtins.int]]
        """
        Set cost of OSPF interface
          - Range: `1`-`65535`
        """
        cost_variable: NotRequired[pulumi.Input[_builtins.str]]
        """
        Variable name
        """
        dead_interval: NotRequired[pulumi.Input[_builtins.int]]
        """
        Set interval after which neighbor is declared to be down
          - Range: `1`-`65535`
          - Default value: `40`
        """
        dead_interval_variable: NotRequired[pulumi.Input[_builtins.str]]
        """
        Variable name
        """
        hello_interval: NotRequired[pulumi.Input[_builtins.int]]
        """
        Set interval between OSPF hello packets
          - Range: `1`-`65535`
          - Default value: `10`
        """
        hello_interval_variable: NotRequired[pulumi.Input[_builtins.str]]
        """
        Variable name
        """
        ipsec_spi: NotRequired[pulumi.Input[_builtins.int]]
        """
        Set OSPF interface authentication IPSec SPI, range 256..4294967295
          - Range: `256`-`4294967295`
        """
        ipsec_spi_variable: NotRequired[pulumi.Input[_builtins.str]]
        """
        Variable name
        """
        name: NotRequired[pulumi.Input[_builtins.str]]
        """
        Set interface name
        """
        name_variable: NotRequired[pulumi.Input[_builtins.str]]
        """
        Variable name
        """
        network: NotRequired[pulumi.Input[_builtins.str]]
        """
        Set the OSPF network type
          - Choices: `broadcast`, `point-to-point`, `non-broadcast`, `point-to-multipoint`
          - Default value: `broadcast`
        """
        network_variable: NotRequired[pulumi.Input[_builtins.str]]
        """
        Variable name
        """
        optional: NotRequired[pulumi.Input[_builtins.bool]]
        """
        Indicates if list item is considered optional.
        """
        passive_interface: NotRequired[pulumi.Input[_builtins.bool]]
        """
        Set the interface to advertise its address, but not to actively run OSPF
          - Default value: `false`
        """
        passive_interface_variable: NotRequired[pulumi.Input[_builtins.str]]
        """
        Variable name
        """
        retransmit_interval: NotRequired[pulumi.Input[_builtins.int]]
        """
        Set time between retransmitting LSAs
          - Range: `1`-`65535`
          - Default value: `5`
        """
        retransmit_interval_variable: NotRequired[pulumi.Input[_builtins.str]]
        """
        Variable name
        """
elif False:
    CiscoOspfv3FeatureTemplateIpv6AreaInterfaceArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class CiscoOspfv3FeatureTemplateIpv6AreaInterfaceArgs:
    def __init__(__self__, *,
                 authentication_key: Optional[pulumi.Input[_builtins.str]] = None,
                 authentication_key_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 authentication_type: Optional[pulumi.Input[_builtins.str]] = None,
                 authentication_type_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 cost: Optional[pulumi.Input[_builtins.int]] = None,
                 cost_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 dead_interval: Optional[pulumi.Input[_builtins.int]] = None,
                 dead_interval_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 hello_interval: Optional[pulumi.Input[_builtins.int]] = None,
                 hello_interval_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 ipsec_spi: Optional[pulumi.Input[_builtins.int]] = None,
                 ipsec_spi_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 name_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 network: Optional[pulumi.Input[_builtins.str]] = None,
                 network_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 optional: Optional[pulumi.Input[_builtins.bool]] = None,
                 passive_interface: Optional[pulumi.Input[_builtins.bool]] = None,
                 passive_interface_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 retransmit_interval: Optional[pulumi.Input[_builtins.int]] = None,
                 retransmit_interval_variable: Optional[pulumi.Input[_builtins.str]] = None):
        """
        :param pulumi.Input[_builtins.str] authentication_key: Set OSPF interface authentication key
        :param pulumi.Input[_builtins.str] authentication_key_variable: Variable name
        :param pulumi.Input[_builtins.str] authentication_type: Set OSPF interface authentication type
                 - Choices: `md5`, `sha1`
        :param pulumi.Input[_builtins.str] authentication_type_variable: Variable name
        :param pulumi.Input[_builtins.int] cost: Set cost of OSPF interface
                 - Range: `1`-`65535`
        :param pulumi.Input[_builtins.str] cost_variable: Variable name
        :param pulumi.Input[_builtins.int] dead_interval: Set interval after which neighbor is declared to be down
                 - Range: `1`-`65535`
                 - Default value: `40`
        :param pulumi.Input[_builtins.str] dead_interval_variable: Variable name
        :param pulumi.Input[_builtins.int] hello_interval: Set interval between OSPF hello packets
                 - Range: `1`-`65535`
                 - Default value: `10`
        :param pulumi.Input[_builtins.str] hello_interval_variable: Variable name
        :param pulumi.Input[_builtins.int] ipsec_spi: Set OSPF interface authentication IPSec SPI, range 256..4294967295
                 - Range: `256`-`4294967295`
        :param pulumi.Input[_builtins.str] ipsec_spi_variable: Variable name
        :param pulumi.Input[_builtins.str] name: Set interface name
        :param pulumi.Input[_builtins.str] name_variable: Variable name
        :param pulumi.Input[_builtins.str] network: Set the OSPF network type
                 - Choices: `broadcast`, `point-to-point`, `non-broadcast`, `point-to-multipoint`
                 - Default value: `broadcast`
        :param pulumi.Input[_builtins.str] network_variable: Variable name
        :param pulumi.Input[_builtins.bool] optional: Indicates if list item is considered optional.
        :param pulumi.Input[_builtins.bool] passive_interface: Set the interface to advertise its address, but not to actively run OSPF
                 - Default value: `false`
        :param pulumi.Input[_builtins.str] passive_interface_variable: Variable name
        :param pulumi.Input[_builtins.int] retransmit_interval: Set time between retransmitting LSAs
                 - Range: `1`-`65535`
                 - Default value: `5`
        :param pulumi.Input[_builtins.str] retransmit_interval_variable: Variable name
        """
        if authentication_key is not None:
            pulumi.set(__self__, "authentication_key", authentication_key)
        if authentication_key_variable is not None:
            pulumi.set(__self__, "authentication_key_variable", authentication_key_variable)
        if authentication_type is not None:
            pulumi.set(__self__, "authentication_type", authentication_type)
        if authentication_type_variable is not None:
            pulumi.set(__self__, "authentication_type_variable", authentication_type_variable)
        if cost is not None:
            pulumi.set(__self__, "cost", cost)
        if cost_variable is not None:
            pulumi.set(__self__, "cost_variable", cost_variable)
        if dead_interval is not None:
            pulumi.set(__self__, "dead_interval", dead_interval)
        if dead_interval_variable is not None:
            pulumi.set(__self__, "dead_interval_variable", dead_interval_variable)
        if hello_interval is not None:
            pulumi.set(__self__, "hello_interval", hello_interval)
        if hello_interval_variable is not None:
            pulumi.set(__self__, "hello_interval_variable", hello_interval_variable)
        if ipsec_spi is not None:
            pulumi.set(__self__, "ipsec_spi", ipsec_spi)
        if ipsec_spi_variable is not None:
            pulumi.set(__self__, "ipsec_spi_variable", ipsec_spi_variable)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if name_variable is not None:
            pulumi.set(__self__, "name_variable", name_variable)
        if network is not None:
            pulumi.set(__self__, "network", network)
        if network_variable is not None:
            pulumi.set(__self__, "network_variable", network_variable)
        if optional is not None:
            pulumi.set(__self__, "optional", optional)
        if passive_interface is not None:
            pulumi.set(__self__, "passive_interface", passive_interface)
        if passive_interface_variable is not None:
            pulumi.set(__self__, "passive_interface_variable", passive_interface_variable)
        if retransmit_interval is not None:
            pulumi.set(__self__, "retransmit_interval", retransmit_interval)
        if retransmit_interval_variable is not None:
            pulumi.set(__self__, "retransmit_interval_variable", retransmit_interval_variable)

    @_builtins.property
    @pulumi.getter(name="authenticationKey")
    def authentication_key(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Set OSPF interface authentication key
        """
        return pulumi.get(self, "authentication_key")

    @authentication_key.setter
    def authentication_key(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "authentication_key", value)

    @_builtins.property
    @pulumi.getter(name="authenticationKeyVariable")
    def authentication_key_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "authentication_key_variable")

    @authentication_key_variable.setter
    def authentication_key_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "authentication_key_variable", value)

    @_builtins.property
    @pulumi.getter(name="authenticationType")
    def authentication_type(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Set OSPF interface authentication type
          - Choices: `md5`, `sha1`
        """
        return pulumi.get(self, "authentication_type")

    @authentication_type.setter
    def authentication_type(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "authentication_type", value)

    @_builtins.property
    @pulumi.getter(name="authenticationTypeVariable")
    def authentication_type_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "authentication_type_variable")

    @authentication_type_variable.setter
    def authentication_type_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "authentication_type_variable", value)

    @_builtins.property
    @pulumi.getter
    def cost(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        Set cost of OSPF interface
          - Range: `1`-`65535`
        """
        return pulumi.get(self, "cost")

    @cost.setter
    def cost(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "cost", value)

    @_builtins.property
    @pulumi.getter(name="costVariable")
    def cost_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "cost_variable")

    @cost_variable.setter
    def cost_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "cost_variable", value)

    @_builtins.property
    @pulumi.getter(name="deadInterval")
    def dead_interval(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        Set interval after which neighbor is declared to be down
          - Range: `1`-`65535`
          - Default value: `40`
        """
        return pulumi.get(self, "dead_interval")

    @dead_interval.setter
    def dead_interval(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "dead_interval", value)

    @_builtins.property
    @pulumi.getter(name="deadIntervalVariable")
    def dead_interval_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "dead_interval_variable")

    @dead_interval_variable.setter
    def dead_interval_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "dead_interval_variable", value)

    @_builtins.property
    @pulumi.getter(name="helloInterval")
    def hello_interval(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        Set interval between OSPF hello packets
          - Range: `1`-`65535`
          - Default value: `10`
        """
        return pulumi.get(self, "hello_interval")

    @hello_interval.setter
    def hello_interval(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "hello_interval", value)

    @_builtins.property
    @pulumi.getter(name="helloIntervalVariable")
    def hello_interval_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "hello_interval_variable")

    @hello_interval_variable.setter
    def hello_interval_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "hello_interval_variable", value)

    @_builtins.property
    @pulumi.getter(name="ipsecSpi")
    def ipsec_spi(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        Set OSPF interface authentication IPSec SPI, range 256..4294967295
          - Range: `256`-`4294967295`
        """
        return pulumi.get(self, "ipsec_spi")

    @ipsec_spi.setter
    def ipsec_spi(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "ipsec_spi", value)

    @_builtins.property
    @pulumi.getter(name="ipsecSpiVariable")
    def ipsec_spi_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "ipsec_spi_variable")

    @ipsec_spi_variable.setter
    def ipsec_spi_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "ipsec_spi_variable", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Set interface name
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "name", value)

    @_builtins.property
    @pulumi.getter(name="nameVariable")
    def name_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "name_variable")

    @name_variable.setter
    def name_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "name_variable", value)

    @_builtins.property
    @pulumi.getter
    def network(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Set the OSPF network type
          - Choices: `broadcast`, `point-to-point`, `non-broadcast`, `point-to-multipoint`
          - Default value: `broadcast`
        """
        return pulumi.get(self, "network")

    @network.setter
    def network(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "network", value)

    @_builtins.property
    @pulumi.getter(name="networkVariable")
    def network_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "network_variable")

    @network_variable.setter
    def network_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "network_variable", value)

    @_builtins.property
    @pulumi.getter
    def optional(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Indicates if list item is considered optional.
        """
        return pulumi.get(self, "optional")

    @optional.setter
    def optional(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "optional", value)

    @_builtins.property
    @pulumi.getter(name="passiveInterface")
    def passive_interface(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Set the interface to advertise its address, but not to actively run OSPF
          - Default value: `false`
        """
        return pulumi.get(self, "passive_interface")

    @passive_interface.setter
    def passive_interface(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "passive_interface", value)

    @_builtins.property
    @pulumi.getter(name="passiveInterfaceVariable")
    def passive_interface_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "passive_interface_variable")

    @passive_interface_variable.setter
    def passive_interface_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "passive_interface_variable", value)

    @_builtins.property
    @pulumi.getter(name="retransmitInterval")
    def retransmit_interval(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        Set time between retransmitting LSAs
          - Range: `1`-`65535`
          - Default value: `5`
        """
        return pulumi.get(self, "retransmit_interval")

    @retransmit_interval.setter
    def retransmit_interval(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "retransmit_interval", value)

    @_builtins.property
    @pulumi.getter(name="retransmitIntervalVariable")
    def retransmit_interval_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "retransmit_interval_variable")

    @retransmit_interval_variable.setter
    def retransmit_interval_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "retransmit_interval_variable", value)


if not MYPY:
    class CiscoOspfv3FeatureTemplateIpv6AreaRangeArgsDict(TypedDict):
        address: NotRequired[pulumi.Input[_builtins.str]]
        """
        Set Matching Prefix
        """
        address_variable: NotRequired[pulumi.Input[_builtins.str]]
        """
        Variable name
        """
        cost: NotRequired[pulumi.Input[_builtins.int]]
        """
        Set cost for this range
          - Range: `0`-`16777214`
        """
        cost_variable: NotRequired[pulumi.Input[_builtins.str]]
        """
        Variable name
        """
        no_advertise: NotRequired[pulumi.Input[_builtins.bool]]
        """
        Do not advertise this range
          - Default value: `false`
        """
        no_advertise_variable: NotRequired[pulumi.Input[_builtins.str]]
        """
        Variable name
        """
        optional: NotRequired[pulumi.Input[_builtins.bool]]
        """
        Indicates if list item is considered optional.
        """
elif False:
    CiscoOspfv3FeatureTemplateIpv6AreaRangeArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class CiscoOspfv3FeatureTemplateIpv6AreaRangeArgs:
    def __init__(__self__, *,
                 address: Optional[pulumi.Input[_builtins.str]] = None,
                 address_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 cost: Optional[pulumi.Input[_builtins.int]] = None,
                 cost_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 no_advertise: Optional[pulumi.Input[_builtins.bool]] = None,
                 no_advertise_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 optional: Optional[pulumi.Input[_builtins.bool]] = None):
        """
        :param pulumi.Input[_builtins.str] address: Set Matching Prefix
        :param pulumi.Input[_builtins.str] address_variable: Variable name
        :param pulumi.Input[_builtins.int] cost: Set cost for this range
                 - Range: `0`-`16777214`
        :param pulumi.Input[_builtins.str] cost_variable: Variable name
        :param pulumi.Input[_builtins.bool] no_advertise: Do not advertise this range
                 - Default value: `false`
        :param pulumi.Input[_builtins.str] no_advertise_variable: Variable name
        :param pulumi.Input[_builtins.bool] optional: Indicates if list item is considered optional.
        """
        if address is not None:
            pulumi.set(__self__, "address", address)
        if address_variable is not None:
            pulumi.set(__self__, "address_variable", address_variable)
        if cost is not None:
            pulumi.set(__self__, "cost", cost)
        if cost_variable is not None:
            pulumi.set(__self__, "cost_variable", cost_variable)
        if no_advertise is not None:
            pulumi.set(__self__, "no_advertise", no_advertise)
        if no_advertise_variable is not None:
            pulumi.set(__self__, "no_advertise_variable", no_advertise_variable)
        if optional is not None:
            pulumi.set(__self__, "optional", optional)

    @_builtins.property
    @pulumi.getter
    def address(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Set Matching Prefix
        """
        return pulumi.get(self, "address")

    @address.setter
    def address(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "address", value)

    @_builtins.property
    @pulumi.getter(name="addressVariable")
    def address_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "address_variable")

    @address_variable.setter
    def address_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "address_variable", value)

    @_builtins.property
    @pulumi.getter
    def cost(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        Set cost for this range
          - Range: `0`-`16777214`
        """
        return pulumi.get(self, "cost")

    @cost.setter
    def cost(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "cost", value)

    @_builtins.property
    @pulumi.getter(name="costVariable")
    def cost_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "cost_variable")

    @cost_variable.setter
    def cost_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "cost_variable", value)

    @_builtins.property
    @pulumi.getter(name="noAdvertise")
    def no_advertise(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Do not advertise this range
          - Default value: `false`
        """
        return pulumi.get(self, "no_advertise")

    @no_advertise.setter
    def no_advertise(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "no_advertise", value)

    @_builtins.property
    @pulumi.getter(name="noAdvertiseVariable")
    def no_advertise_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "no_advertise_variable")

    @no_advertise_variable.setter
    def no_advertise_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "no_advertise_variable", value)

    @_builtins.property
    @pulumi.getter
    def optional(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Indicates if list item is considered optional.
        """
        return pulumi.get(self, "optional")

    @optional.setter
    def optional(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "optional", value)


if not MYPY:
    class CiscoOspfv3FeatureTemplateIpv6MaxMetricRouterLsaArgsDict(TypedDict):
        ad_type: NotRequired[pulumi.Input[_builtins.str]]
        """
        Set the router LSA advertisement type
          - Choices: `on-startup`
        """
        optional: NotRequired[pulumi.Input[_builtins.bool]]
        """
        Indicates if list item is considered optional.
        """
        time: NotRequired[pulumi.Input[_builtins.int]]
        """
        Set how long to advertise maximum metric after router starts up
        """
        time_variable: NotRequired[pulumi.Input[_builtins.str]]
        """
        Variable name
        """
elif False:
    CiscoOspfv3FeatureTemplateIpv6MaxMetricRouterLsaArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class CiscoOspfv3FeatureTemplateIpv6MaxMetricRouterLsaArgs:
    def __init__(__self__, *,
                 ad_type: Optional[pulumi.Input[_builtins.str]] = None,
                 optional: Optional[pulumi.Input[_builtins.bool]] = None,
                 time: Optional[pulumi.Input[_builtins.int]] = None,
                 time_variable: Optional[pulumi.Input[_builtins.str]] = None):
        """
        :param pulumi.Input[_builtins.str] ad_type: Set the router LSA advertisement type
                 - Choices: `on-startup`
        :param pulumi.Input[_builtins.bool] optional: Indicates if list item is considered optional.
        :param pulumi.Input[_builtins.int] time: Set how long to advertise maximum metric after router starts up
        :param pulumi.Input[_builtins.str] time_variable: Variable name
        """
        if ad_type is not None:
            pulumi.set(__self__, "ad_type", ad_type)
        if optional is not None:
            pulumi.set(__self__, "optional", optional)
        if time is not None:
            pulumi.set(__self__, "time", time)
        if time_variable is not None:
            pulumi.set(__self__, "time_variable", time_variable)

    @_builtins.property
    @pulumi.getter(name="adType")
    def ad_type(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Set the router LSA advertisement type
          - Choices: `on-startup`
        """
        return pulumi.get(self, "ad_type")

    @ad_type.setter
    def ad_type(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "ad_type", value)

    @_builtins.property
    @pulumi.getter
    def optional(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Indicates if list item is considered optional.
        """
        return pulumi.get(self, "optional")

    @optional.setter
    def optional(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "optional", value)

    @_builtins.property
    @pulumi.getter
    def time(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        Set how long to advertise maximum metric after router starts up
        """
        return pulumi.get(self, "time")

    @time.setter
    def time(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "time", value)

    @_builtins.property
    @pulumi.getter(name="timeVariable")
    def time_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "time_variable")

    @time_variable.setter
    def time_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "time_variable", value)


if not MYPY:
    class CiscoOspfv3FeatureTemplateIpv6RedistributeArgsDict(TypedDict):
        optional: NotRequired[pulumi.Input[_builtins.bool]]
        """
        Indicates if list item is considered optional.
        """
        protocol: NotRequired[pulumi.Input[_builtins.str]]
        """
        Set the protocol
          - Choices: `bgp`, `connected`, `eigrp`, `isis`, `lisp`, `nat-route`, `omp`, `static`
        """
        protocol_variable: NotRequired[pulumi.Input[_builtins.str]]
        """
        Variable name
        """
        route_policy: NotRequired[pulumi.Input[_builtins.str]]
        """
        Set route policy to apply to redistributed routes
        """
        route_policy_variable: NotRequired[pulumi.Input[_builtins.str]]
        """
        Variable name
        """
elif False:
    CiscoOspfv3FeatureTemplateIpv6RedistributeArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class CiscoOspfv3FeatureTemplateIpv6RedistributeArgs:
    def __init__(__self__, *,
                 optional: Optional[pulumi.Input[_builtins.bool]] = None,
                 protocol: Optional[pulumi.Input[_builtins.str]] = None,
                 protocol_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 route_policy: Optional[pulumi.Input[_builtins.str]] = None,
                 route_policy_variable: Optional[pulumi.Input[_builtins.str]] = None):
        """
        :param pulumi.Input[_builtins.bool] optional: Indicates if list item is considered optional.
        :param pulumi.Input[_builtins.str] protocol: Set the protocol
                 - Choices: `bgp`, `connected`, `eigrp`, `isis`, `lisp`, `nat-route`, `omp`, `static`
        :param pulumi.Input[_builtins.str] protocol_variable: Variable name
        :param pulumi.Input[_builtins.str] route_policy: Set route policy to apply to redistributed routes
        :param pulumi.Input[_builtins.str] route_policy_variable: Variable name
        """
        if optional is not None:
            pulumi.set(__self__, "optional", optional)
        if protocol is not None:
            pulumi.set(__self__, "protocol", protocol)
        if protocol_variable is not None:
            pulumi.set(__self__, "protocol_variable", protocol_variable)
        if route_policy is not None:
            pulumi.set(__self__, "route_policy", route_policy)
        if route_policy_variable is not None:
            pulumi.set(__self__, "route_policy_variable", route_policy_variable)

    @_builtins.property
    @pulumi.getter
    def optional(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Indicates if list item is considered optional.
        """
        return pulumi.get(self, "optional")

    @optional.setter
    def optional(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "optional", value)

    @_builtins.property
    @pulumi.getter
    def protocol(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Set the protocol
          - Choices: `bgp`, `connected`, `eigrp`, `isis`, `lisp`, `nat-route`, `omp`, `static`
        """
        return pulumi.get(self, "protocol")

    @protocol.setter
    def protocol(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "protocol", value)

    @_builtins.property
    @pulumi.getter(name="protocolVariable")
    def protocol_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "protocol_variable")

    @protocol_variable.setter
    def protocol_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "protocol_variable", value)

    @_builtins.property
    @pulumi.getter(name="routePolicy")
    def route_policy(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Set route policy to apply to redistributed routes
        """
        return pulumi.get(self, "route_policy")

    @route_policy.setter
    def route_policy(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "route_policy", value)

    @_builtins.property
    @pulumi.getter(name="routePolicyVariable")
    def route_policy_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "route_policy_variable")

    @route_policy_variable.setter
    def route_policy_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "route_policy_variable", value)


if not MYPY:
    class CiscoSecureInternetGatewayFeatureTemplateInterfaceArgsDict(TypedDict):
        application: NotRequired[pulumi.Input[_builtins.str]]
        """
        Enable Application Tunnel Type
          - Choices: `sig`
          - Default value: `sig`
        """
        auto_tunnel_mode: NotRequired[pulumi.Input[_builtins.bool]]
        """
        Auto Tunnel Mode
          - Default value: `false`
        """
        dead_peer_detection_interval: NotRequired[pulumi.Input[_builtins.int]]
        """
        IKE keepalive interval (seconds)
          - Range: `0`-`65535`
          - Default value: `10`
        """
        dead_peer_detection_interval_variable: NotRequired[pulumi.Input[_builtins.str]]
        """
        Variable name
        """
        dead_peer_detection_retries: NotRequired[pulumi.Input[_builtins.int]]
        """
        IKE keepalive retries
          - Range: `0`-`255`
          - Default value: `3`
        """
        dead_peer_detection_retries_variable: NotRequired[pulumi.Input[_builtins.str]]
        """
        Variable name
        """
        description: NotRequired[pulumi.Input[_builtins.str]]
        """
        Interface description
        """
        description_variable: NotRequired[pulumi.Input[_builtins.str]]
        """
        Variable name
        """
        ike_ciphersuite: NotRequired[pulumi.Input[_builtins.str]]
        """
        IKE identity the IKE preshared secret belongs to
          - Choices: `aes256-cbc-sha1`, `aes256-cbc-sha2`, `aes128-cbc-sha1`, `aes128-cbc-sha2`
          - Default value: `aes256-cbc-sha1`
        """
        ike_ciphersuite_variable: NotRequired[pulumi.Input[_builtins.str]]
        """
        Variable name
        """
        ike_group: NotRequired[pulumi.Input[_builtins.str]]
        """
        IKE Diffie Hellman Groups
          - Choices: `2`, `14`, `15`, `16`
          - Default value: `14`
        """
        ike_group_variable: NotRequired[pulumi.Input[_builtins.str]]
        """
        Variable name
        """
        ike_pre_shared_key: NotRequired[pulumi.Input[_builtins.str]]
        """
        Use preshared key to authenticate IKE peer
        """
        ike_pre_shared_key_dynamic: NotRequired[pulumi.Input[_builtins.bool]]
        """
        Use preshared key to authenticate IKE peer
          - Default value: `true`
        """
        ike_pre_shared_key_local_id: NotRequired[pulumi.Input[_builtins.str]]
        """
        IKE ID for the local endpoint. Input IPv4 address, domain name, or email address
        """
        ike_pre_shared_key_local_id_variable: NotRequired[pulumi.Input[_builtins.str]]
        """
        Variable name
        """
        ike_pre_shared_key_remote_id: NotRequired[pulumi.Input[_builtins.str]]
        """
        IKE ID for the remote endpoint. Input IPv4 address, domain name, or email address
        """
        ike_pre_shared_key_remote_id_variable: NotRequired[pulumi.Input[_builtins.str]]
        """
        Variable name
        """
        ike_pre_shared_key_variable: NotRequired[pulumi.Input[_builtins.str]]
        """
        Variable name
        """
        ike_rekey_interval: NotRequired[pulumi.Input[_builtins.int]]
        """
        IKE rekey interval <300..1209600> seconds
          - Range: `300`-`1209600`
          - Default value: `14400`
        """
        ike_rekey_interval_variable: NotRequired[pulumi.Input[_builtins.str]]
        """
        Variable name
        """
        ike_version: NotRequired[pulumi.Input[_builtins.int]]
        """
        IKE Version <1..2>
          - Range: `1`-`2`
          - Default value: `2`
        """
        ike_version_variable: NotRequired[pulumi.Input[_builtins.str]]
        """
        Variable name
        """
        ip_unnumbered: NotRequired[pulumi.Input[_builtins.bool]]
        """
        Unnumbered interface
          - Default value: `true`
        """
        ipsec_ciphersuite: NotRequired[pulumi.Input[_builtins.str]]
        """
        IPsec(ESP) encryption and integrity protocol
          - Choices: `aes256-cbc-sha1`, `aes256-cbc-sha384`, `aes256-cbc-sha256`, `aes256-cbc-sha512`, `aes256-gcm`, `null-sha1`, `null-sha384`, `null-sha256`, `null-sha512`
          - Default value: `aes256-gcm`
        """
        ipsec_ciphersuite_variable: NotRequired[pulumi.Input[_builtins.str]]
        """
        Variable name
        """
        ipsec_perfect_forward_secrecy: NotRequired[pulumi.Input[_builtins.str]]
        """
        IPsec perfect forward secrecy settings
          - Choices: `group-2`, `group-14`, `group-15`, `group-16`, `none`
          - Default value: `none`
        """
        ipsec_perfect_forward_secrecy_variable: NotRequired[pulumi.Input[_builtins.str]]
        """
        Variable name
        """
        ipsec_rekey_interval: NotRequired[pulumi.Input[_builtins.int]]
        """
        IPsec rekey interval <300..1209600> seconds
          - Range: `300`-`1209600`
          - Default value: `3600`
        """
        ipsec_rekey_interval_variable: NotRequired[pulumi.Input[_builtins.str]]
        """
        Variable name
        """
        ipsec_replay_window: NotRequired[pulumi.Input[_builtins.int]]
        """
        Replay window size 32..8192 (must be a power of 2)
          - Range: `64`-`4096`
          - Default value: `512`
        """
        ipsec_replay_window_variable: NotRequired[pulumi.Input[_builtins.str]]
        """
        Variable name
        """
        ipv4_address: NotRequired[pulumi.Input[_builtins.str]]
        """
        Assign IPv4 address
        """
        ipv4_address_variable: NotRequired[pulumi.Input[_builtins.str]]
        """
        Variable name
        """
        mtu: NotRequired[pulumi.Input[_builtins.int]]
        """
        Interface MTU <576..2000>, in bytes
          - Range: `576`-`2000`
          - Default value: `1400`
        """
        mtu_variable: NotRequired[pulumi.Input[_builtins.str]]
        """
        Variable name
        """
        name: NotRequired[pulumi.Input[_builtins.str]]
        """
        Interface name: IPsec when present
        """
        name_variable: NotRequired[pulumi.Input[_builtins.str]]
        """
        Variable name
        """
        optional: NotRequired[pulumi.Input[_builtins.bool]]
        """
        Indicates if list item is considered optional.
        """
        shutdown: NotRequired[pulumi.Input[_builtins.bool]]
        """
        Administrative state
          - Default value: `false`
        """
        sig_provider: NotRequired[pulumi.Input[_builtins.str]]
        """
        SIG Tunnel Provider
          - Choices: `secure-internet-gateway-umbrella`, `secure-internet-gateway-zscaler`, `secure-internet-gateway-other`
          - Default value: `secure-internet-gateway-umbrella`
        """
        tcp_mss: NotRequired[pulumi.Input[_builtins.int]]
        """
        TCP MSS on SYN packets, in bytes
          - Range: `500`-`1460`
        """
        tcp_mss_variable: NotRequired[pulumi.Input[_builtins.str]]
        """
        Variable name
        """
        track_enable: NotRequired[pulumi.Input[_builtins.bool]]
        """
        Enable/disable SIG tracking
          - Default value: `true`
        """
        tracker: NotRequired[pulumi.Input[_builtins.str]]
        """
        Enable tracker for this interface
        """
        tunnel_dc_preference: NotRequired[pulumi.Input[_builtins.str]]
        """
        SIG Tunnel Data Center
          - Choices: `primary-dc`, `secondary-dc`
          - Default value: `primary-dc`
        """
        tunnel_destination: NotRequired[pulumi.Input[_builtins.str]]
        """
        Tunnel destination IP address
        """
        tunnel_destination_variable: NotRequired[pulumi.Input[_builtins.str]]
        """
        Variable name
        """
        tunnel_public_ip: NotRequired[pulumi.Input[_builtins.str]]
        """
        Public IP required to setup GRE tunnel to Zscaler
          - Default value: `Auto`
        """
        tunnel_public_ip_variable: NotRequired[pulumi.Input[_builtins.str]]
        """
        Variable name
        """
        tunnel_route_via: NotRequired[pulumi.Input[_builtins.str]]
        """
        <1..32 characters> Interface name: ge0/<0-..> or ge0/<0-..>.vlanid
        """
        tunnel_route_via_variable: NotRequired[pulumi.Input[_builtins.str]]
        """
        Variable name
        """
        tunnel_source: NotRequired[pulumi.Input[_builtins.str]]
        """
        Tunnel source IP Address
        """
        tunnel_source_interface: NotRequired[pulumi.Input[_builtins.str]]
        """
        <1..32 characters> Interface name: ge0/<0-..> or ge0/<0-..>.vlanid
        """
        tunnel_source_interface_variable: NotRequired[pulumi.Input[_builtins.str]]
        """
        Variable name
        """
        tunnel_source_variable: NotRequired[pulumi.Input[_builtins.str]]
        """
        Variable name
        """
elif False:
    CiscoSecureInternetGatewayFeatureTemplateInterfaceArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class CiscoSecureInternetGatewayFeatureTemplateInterfaceArgs:
    def __init__(__self__, *,
                 application: Optional[pulumi.Input[_builtins.str]] = None,
                 auto_tunnel_mode: Optional[pulumi.Input[_builtins.bool]] = None,
                 dead_peer_detection_interval: Optional[pulumi.Input[_builtins.int]] = None,
                 dead_peer_detection_interval_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 dead_peer_detection_retries: Optional[pulumi.Input[_builtins.int]] = None,
                 dead_peer_detection_retries_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 description: Optional[pulumi.Input[_builtins.str]] = None,
                 description_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 ike_ciphersuite: Optional[pulumi.Input[_builtins.str]] = None,
                 ike_ciphersuite_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 ike_group: Optional[pulumi.Input[_builtins.str]] = None,
                 ike_group_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 ike_pre_shared_key: Optional[pulumi.Input[_builtins.str]] = None,
                 ike_pre_shared_key_dynamic: Optional[pulumi.Input[_builtins.bool]] = None,
                 ike_pre_shared_key_local_id: Optional[pulumi.Input[_builtins.str]] = None,
                 ike_pre_shared_key_local_id_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 ike_pre_shared_key_remote_id: Optional[pulumi.Input[_builtins.str]] = None,
                 ike_pre_shared_key_remote_id_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 ike_pre_shared_key_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 ike_rekey_interval: Optional[pulumi.Input[_builtins.int]] = None,
                 ike_rekey_interval_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 ike_version: Optional[pulumi.Input[_builtins.int]] = None,
                 ike_version_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 ip_unnumbered: Optional[pulumi.Input[_builtins.bool]] = None,
                 ipsec_ciphersuite: Optional[pulumi.Input[_builtins.str]] = None,
                 ipsec_ciphersuite_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 ipsec_perfect_forward_secrecy: Optional[pulumi.Input[_builtins.str]] = None,
                 ipsec_perfect_forward_secrecy_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 ipsec_rekey_interval: Optional[pulumi.Input[_builtins.int]] = None,
                 ipsec_rekey_interval_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 ipsec_replay_window: Optional[pulumi.Input[_builtins.int]] = None,
                 ipsec_replay_window_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 ipv4_address: Optional[pulumi.Input[_builtins.str]] = None,
                 ipv4_address_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 mtu: Optional[pulumi.Input[_builtins.int]] = None,
                 mtu_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 name_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 optional: Optional[pulumi.Input[_builtins.bool]] = None,
                 shutdown: Optional[pulumi.Input[_builtins.bool]] = None,
                 sig_provider: Optional[pulumi.Input[_builtins.str]] = None,
                 tcp_mss: Optional[pulumi.Input[_builtins.int]] = None,
                 tcp_mss_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 track_enable: Optional[pulumi.Input[_builtins.bool]] = None,
                 tracker: Optional[pulumi.Input[_builtins.str]] = None,
                 tunnel_dc_preference: Optional[pulumi.Input[_builtins.str]] = None,
                 tunnel_destination: Optional[pulumi.Input[_builtins.str]] = None,
                 tunnel_destination_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 tunnel_public_ip: Optional[pulumi.Input[_builtins.str]] = None,
                 tunnel_public_ip_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 tunnel_route_via: Optional[pulumi.Input[_builtins.str]] = None,
                 tunnel_route_via_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 tunnel_source: Optional[pulumi.Input[_builtins.str]] = None,
                 tunnel_source_interface: Optional[pulumi.Input[_builtins.str]] = None,
                 tunnel_source_interface_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 tunnel_source_variable: Optional[pulumi.Input[_builtins.str]] = None):
        """
        :param pulumi.Input[_builtins.str] application: Enable Application Tunnel Type
                 - Choices: `sig`
                 - Default value: `sig`
        :param pulumi.Input[_builtins.bool] auto_tunnel_mode: Auto Tunnel Mode
                 - Default value: `false`
        :param pulumi.Input[_builtins.int] dead_peer_detection_interval: IKE keepalive interval (seconds)
                 - Range: `0`-`65535`
                 - Default value: `10`
        :param pulumi.Input[_builtins.str] dead_peer_detection_interval_variable: Variable name
        :param pulumi.Input[_builtins.int] dead_peer_detection_retries: IKE keepalive retries
                 - Range: `0`-`255`
                 - Default value: `3`
        :param pulumi.Input[_builtins.str] dead_peer_detection_retries_variable: Variable name
        :param pulumi.Input[_builtins.str] description: Interface description
        :param pulumi.Input[_builtins.str] description_variable: Variable name
        :param pulumi.Input[_builtins.str] ike_ciphersuite: IKE identity the IKE preshared secret belongs to
                 - Choices: `aes256-cbc-sha1`, `aes256-cbc-sha2`, `aes128-cbc-sha1`, `aes128-cbc-sha2`
                 - Default value: `aes256-cbc-sha1`
        :param pulumi.Input[_builtins.str] ike_ciphersuite_variable: Variable name
        :param pulumi.Input[_builtins.str] ike_group: IKE Diffie Hellman Groups
                 - Choices: `2`, `14`, `15`, `16`
                 - Default value: `14`
        :param pulumi.Input[_builtins.str] ike_group_variable: Variable name
        :param pulumi.Input[_builtins.str] ike_pre_shared_key: Use preshared key to authenticate IKE peer
        :param pulumi.Input[_builtins.bool] ike_pre_shared_key_dynamic: Use preshared key to authenticate IKE peer
                 - Default value: `true`
        :param pulumi.Input[_builtins.str] ike_pre_shared_key_local_id: IKE ID for the local endpoint. Input IPv4 address, domain name, or email address
        :param pulumi.Input[_builtins.str] ike_pre_shared_key_local_id_variable: Variable name
        :param pulumi.Input[_builtins.str] ike_pre_shared_key_remote_id: IKE ID for the remote endpoint. Input IPv4 address, domain name, or email address
        :param pulumi.Input[_builtins.str] ike_pre_shared_key_remote_id_variable: Variable name
        :param pulumi.Input[_builtins.str] ike_pre_shared_key_variable: Variable name
        :param pulumi.Input[_builtins.int] ike_rekey_interval: IKE rekey interval <300..1209600> seconds
                 - Range: `300`-`1209600`
                 - Default value: `14400`
        :param pulumi.Input[_builtins.str] ike_rekey_interval_variable: Variable name
        :param pulumi.Input[_builtins.int] ike_version: IKE Version <1..2>
                 - Range: `1`-`2`
                 - Default value: `2`
        :param pulumi.Input[_builtins.str] ike_version_variable: Variable name
        :param pulumi.Input[_builtins.bool] ip_unnumbered: Unnumbered interface
                 - Default value: `true`
        :param pulumi.Input[_builtins.str] ipsec_ciphersuite: IPsec(ESP) encryption and integrity protocol
                 - Choices: `aes256-cbc-sha1`, `aes256-cbc-sha384`, `aes256-cbc-sha256`, `aes256-cbc-sha512`, `aes256-gcm`, `null-sha1`, `null-sha384`, `null-sha256`, `null-sha512`
                 - Default value: `aes256-gcm`
        :param pulumi.Input[_builtins.str] ipsec_ciphersuite_variable: Variable name
        :param pulumi.Input[_builtins.str] ipsec_perfect_forward_secrecy: IPsec perfect forward secrecy settings
                 - Choices: `group-2`, `group-14`, `group-15`, `group-16`, `none`
                 - Default value: `none`
        :param pulumi.Input[_builtins.str] ipsec_perfect_forward_secrecy_variable: Variable name
        :param pulumi.Input[_builtins.int] ipsec_rekey_interval: IPsec rekey interval <300..1209600> seconds
                 - Range: `300`-`1209600`
                 - Default value: `3600`
        :param pulumi.Input[_builtins.str] ipsec_rekey_interval_variable: Variable name
        :param pulumi.Input[_builtins.int] ipsec_replay_window: Replay window size 32..8192 (must be a power of 2)
                 - Range: `64`-`4096`
                 - Default value: `512`
        :param pulumi.Input[_builtins.str] ipsec_replay_window_variable: Variable name
        :param pulumi.Input[_builtins.str] ipv4_address: Assign IPv4 address
        :param pulumi.Input[_builtins.str] ipv4_address_variable: Variable name
        :param pulumi.Input[_builtins.int] mtu: Interface MTU <576..2000>, in bytes
                 - Range: `576`-`2000`
                 - Default value: `1400`
        :param pulumi.Input[_builtins.str] mtu_variable: Variable name
        :param pulumi.Input[_builtins.str] name: Interface name: IPsec when present
        :param pulumi.Input[_builtins.str] name_variable: Variable name
        :param pulumi.Input[_builtins.bool] optional: Indicates if list item is considered optional.
        :param pulumi.Input[_builtins.bool] shutdown: Administrative state
                 - Default value: `false`
        :param pulumi.Input[_builtins.str] sig_provider: SIG Tunnel Provider
                 - Choices: `secure-internet-gateway-umbrella`, `secure-internet-gateway-zscaler`, `secure-internet-gateway-other`
                 - Default value: `secure-internet-gateway-umbrella`
        :param pulumi.Input[_builtins.int] tcp_mss: TCP MSS on SYN packets, in bytes
                 - Range: `500`-`1460`
        :param pulumi.Input[_builtins.str] tcp_mss_variable: Variable name
        :param pulumi.Input[_builtins.bool] track_enable: Enable/disable SIG tracking
                 - Default value: `true`
        :param pulumi.Input[_builtins.str] tracker: Enable tracker for this interface
        :param pulumi.Input[_builtins.str] tunnel_dc_preference: SIG Tunnel Data Center
                 - Choices: `primary-dc`, `secondary-dc`
                 - Default value: `primary-dc`
        :param pulumi.Input[_builtins.str] tunnel_destination: Tunnel destination IP address
        :param pulumi.Input[_builtins.str] tunnel_destination_variable: Variable name
        :param pulumi.Input[_builtins.str] tunnel_public_ip: Public IP required to setup GRE tunnel to Zscaler
                 - Default value: `Auto`
        :param pulumi.Input[_builtins.str] tunnel_public_ip_variable: Variable name
        :param pulumi.Input[_builtins.str] tunnel_route_via: <1..32 characters> Interface name: ge0/<0-..> or ge0/<0-..>.vlanid
        :param pulumi.Input[_builtins.str] tunnel_route_via_variable: Variable name
        :param pulumi.Input[_builtins.str] tunnel_source: Tunnel source IP Address
        :param pulumi.Input[_builtins.str] tunnel_source_interface: <1..32 characters> Interface name: ge0/<0-..> or ge0/<0-..>.vlanid
        :param pulumi.Input[_builtins.str] tunnel_source_interface_variable: Variable name
        :param pulumi.Input[_builtins.str] tunnel_source_variable: Variable name
        """
        if application is not None:
            pulumi.set(__self__, "application", application)
        if auto_tunnel_mode is not None:
            pulumi.set(__self__, "auto_tunnel_mode", auto_tunnel_mode)
        if dead_peer_detection_interval is not None:
            pulumi.set(__self__, "dead_peer_detection_interval", dead_peer_detection_interval)
        if dead_peer_detection_interval_variable is not None:
            pulumi.set(__self__, "dead_peer_detection_interval_variable", dead_peer_detection_interval_variable)
        if dead_peer_detection_retries is not None:
            pulumi.set(__self__, "dead_peer_detection_retries", dead_peer_detection_retries)
        if dead_peer_detection_retries_variable is not None:
            pulumi.set(__self__, "dead_peer_detection_retries_variable", dead_peer_detection_retries_variable)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if description_variable is not None:
            pulumi.set(__self__, "description_variable", description_variable)
        if ike_ciphersuite is not None:
            pulumi.set(__self__, "ike_ciphersuite", ike_ciphersuite)
        if ike_ciphersuite_variable is not None:
            pulumi.set(__self__, "ike_ciphersuite_variable", ike_ciphersuite_variable)
        if ike_group is not None:
            pulumi.set(__self__, "ike_group", ike_group)
        if ike_group_variable is not None:
            pulumi.set(__self__, "ike_group_variable", ike_group_variable)
        if ike_pre_shared_key is not None:
            pulumi.set(__self__, "ike_pre_shared_key", ike_pre_shared_key)
        if ike_pre_shared_key_dynamic is not None:
            pulumi.set(__self__, "ike_pre_shared_key_dynamic", ike_pre_shared_key_dynamic)
        if ike_pre_shared_key_local_id is not None:
            pulumi.set(__self__, "ike_pre_shared_key_local_id", ike_pre_shared_key_local_id)
        if ike_pre_shared_key_local_id_variable is not None:
            pulumi.set(__self__, "ike_pre_shared_key_local_id_variable", ike_pre_shared_key_local_id_variable)
        if ike_pre_shared_key_remote_id is not None:
            pulumi.set(__self__, "ike_pre_shared_key_remote_id", ike_pre_shared_key_remote_id)
        if ike_pre_shared_key_remote_id_variable is not None:
            pulumi.set(__self__, "ike_pre_shared_key_remote_id_variable", ike_pre_shared_key_remote_id_variable)
        if ike_pre_shared_key_variable is not None:
            pulumi.set(__self__, "ike_pre_shared_key_variable", ike_pre_shared_key_variable)
        if ike_rekey_interval is not None:
            pulumi.set(__self__, "ike_rekey_interval", ike_rekey_interval)
        if ike_rekey_interval_variable is not None:
            pulumi.set(__self__, "ike_rekey_interval_variable", ike_rekey_interval_variable)
        if ike_version is not None:
            pulumi.set(__self__, "ike_version", ike_version)
        if ike_version_variable is not None:
            pulumi.set(__self__, "ike_version_variable", ike_version_variable)
        if ip_unnumbered is not None:
            pulumi.set(__self__, "ip_unnumbered", ip_unnumbered)
        if ipsec_ciphersuite is not None:
            pulumi.set(__self__, "ipsec_ciphersuite", ipsec_ciphersuite)
        if ipsec_ciphersuite_variable is not None:
            pulumi.set(__self__, "ipsec_ciphersuite_variable", ipsec_ciphersuite_variable)
        if ipsec_perfect_forward_secrecy is not None:
            pulumi.set(__self__, "ipsec_perfect_forward_secrecy", ipsec_perfect_forward_secrecy)
        if ipsec_perfect_forward_secrecy_variable is not None:
            pulumi.set(__self__, "ipsec_perfect_forward_secrecy_variable", ipsec_perfect_forward_secrecy_variable)
        if ipsec_rekey_interval is not None:
            pulumi.set(__self__, "ipsec_rekey_interval", ipsec_rekey_interval)
        if ipsec_rekey_interval_variable is not None:
            pulumi.set(__self__, "ipsec_rekey_interval_variable", ipsec_rekey_interval_variable)
        if ipsec_replay_window is not None:
            pulumi.set(__self__, "ipsec_replay_window", ipsec_replay_window)
        if ipsec_replay_window_variable is not None:
            pulumi.set(__self__, "ipsec_replay_window_variable", ipsec_replay_window_variable)
        if ipv4_address is not None:
            pulumi.set(__self__, "ipv4_address", ipv4_address)
        if ipv4_address_variable is not None:
            pulumi.set(__self__, "ipv4_address_variable", ipv4_address_variable)
        if mtu is not None:
            pulumi.set(__self__, "mtu", mtu)
        if mtu_variable is not None:
            pulumi.set(__self__, "mtu_variable", mtu_variable)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if name_variable is not None:
            pulumi.set(__self__, "name_variable", name_variable)
        if optional is not None:
            pulumi.set(__self__, "optional", optional)
        if shutdown is not None:
            pulumi.set(__self__, "shutdown", shutdown)
        if sig_provider is not None:
            pulumi.set(__self__, "sig_provider", sig_provider)
        if tcp_mss is not None:
            pulumi.set(__self__, "tcp_mss", tcp_mss)
        if tcp_mss_variable is not None:
            pulumi.set(__self__, "tcp_mss_variable", tcp_mss_variable)
        if track_enable is not None:
            pulumi.set(__self__, "track_enable", track_enable)
        if tracker is not None:
            pulumi.set(__self__, "tracker", tracker)
        if tunnel_dc_preference is not None:
            pulumi.set(__self__, "tunnel_dc_preference", tunnel_dc_preference)
        if tunnel_destination is not None:
            pulumi.set(__self__, "tunnel_destination", tunnel_destination)
        if tunnel_destination_variable is not None:
            pulumi.set(__self__, "tunnel_destination_variable", tunnel_destination_variable)
        if tunnel_public_ip is not None:
            pulumi.set(__self__, "tunnel_public_ip", tunnel_public_ip)
        if tunnel_public_ip_variable is not None:
            pulumi.set(__self__, "tunnel_public_ip_variable", tunnel_public_ip_variable)
        if tunnel_route_via is not None:
            pulumi.set(__self__, "tunnel_route_via", tunnel_route_via)
        if tunnel_route_via_variable is not None:
            pulumi.set(__self__, "tunnel_route_via_variable", tunnel_route_via_variable)
        if tunnel_source is not None:
            pulumi.set(__self__, "tunnel_source", tunnel_source)
        if tunnel_source_interface is not None:
            pulumi.set(__self__, "tunnel_source_interface", tunnel_source_interface)
        if tunnel_source_interface_variable is not None:
            pulumi.set(__self__, "tunnel_source_interface_variable", tunnel_source_interface_variable)
        if tunnel_source_variable is not None:
            pulumi.set(__self__, "tunnel_source_variable", tunnel_source_variable)

    @_builtins.property
    @pulumi.getter
    def application(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Enable Application Tunnel Type
          - Choices: `sig`
          - Default value: `sig`
        """
        return pulumi.get(self, "application")

    @application.setter
    def application(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "application", value)

    @_builtins.property
    @pulumi.getter(name="autoTunnelMode")
    def auto_tunnel_mode(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Auto Tunnel Mode
          - Default value: `false`
        """
        return pulumi.get(self, "auto_tunnel_mode")

    @auto_tunnel_mode.setter
    def auto_tunnel_mode(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "auto_tunnel_mode", value)

    @_builtins.property
    @pulumi.getter(name="deadPeerDetectionInterval")
    def dead_peer_detection_interval(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        IKE keepalive interval (seconds)
          - Range: `0`-`65535`
          - Default value: `10`
        """
        return pulumi.get(self, "dead_peer_detection_interval")

    @dead_peer_detection_interval.setter
    def dead_peer_detection_interval(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "dead_peer_detection_interval", value)

    @_builtins.property
    @pulumi.getter(name="deadPeerDetectionIntervalVariable")
    def dead_peer_detection_interval_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "dead_peer_detection_interval_variable")

    @dead_peer_detection_interval_variable.setter
    def dead_peer_detection_interval_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "dead_peer_detection_interval_variable", value)

    @_builtins.property
    @pulumi.getter(name="deadPeerDetectionRetries")
    def dead_peer_detection_retries(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        IKE keepalive retries
          - Range: `0`-`255`
          - Default value: `3`
        """
        return pulumi.get(self, "dead_peer_detection_retries")

    @dead_peer_detection_retries.setter
    def dead_peer_detection_retries(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "dead_peer_detection_retries", value)

    @_builtins.property
    @pulumi.getter(name="deadPeerDetectionRetriesVariable")
    def dead_peer_detection_retries_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "dead_peer_detection_retries_variable")

    @dead_peer_detection_retries_variable.setter
    def dead_peer_detection_retries_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "dead_peer_detection_retries_variable", value)

    @_builtins.property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Interface description
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "description", value)

    @_builtins.property
    @pulumi.getter(name="descriptionVariable")
    def description_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "description_variable")

    @description_variable.setter
    def description_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "description_variable", value)

    @_builtins.property
    @pulumi.getter(name="ikeCiphersuite")
    def ike_ciphersuite(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        IKE identity the IKE preshared secret belongs to
          - Choices: `aes256-cbc-sha1`, `aes256-cbc-sha2`, `aes128-cbc-sha1`, `aes128-cbc-sha2`
          - Default value: `aes256-cbc-sha1`
        """
        return pulumi.get(self, "ike_ciphersuite")

    @ike_ciphersuite.setter
    def ike_ciphersuite(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "ike_ciphersuite", value)

    @_builtins.property
    @pulumi.getter(name="ikeCiphersuiteVariable")
    def ike_ciphersuite_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "ike_ciphersuite_variable")

    @ike_ciphersuite_variable.setter
    def ike_ciphersuite_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "ike_ciphersuite_variable", value)

    @_builtins.property
    @pulumi.getter(name="ikeGroup")
    def ike_group(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        IKE Diffie Hellman Groups
          - Choices: `2`, `14`, `15`, `16`
          - Default value: `14`
        """
        return pulumi.get(self, "ike_group")

    @ike_group.setter
    def ike_group(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "ike_group", value)

    @_builtins.property
    @pulumi.getter(name="ikeGroupVariable")
    def ike_group_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "ike_group_variable")

    @ike_group_variable.setter
    def ike_group_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "ike_group_variable", value)

    @_builtins.property
    @pulumi.getter(name="ikePreSharedKey")
    def ike_pre_shared_key(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Use preshared key to authenticate IKE peer
        """
        return pulumi.get(self, "ike_pre_shared_key")

    @ike_pre_shared_key.setter
    def ike_pre_shared_key(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "ike_pre_shared_key", value)

    @_builtins.property
    @pulumi.getter(name="ikePreSharedKeyDynamic")
    def ike_pre_shared_key_dynamic(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Use preshared key to authenticate IKE peer
          - Default value: `true`
        """
        return pulumi.get(self, "ike_pre_shared_key_dynamic")

    @ike_pre_shared_key_dynamic.setter
    def ike_pre_shared_key_dynamic(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "ike_pre_shared_key_dynamic", value)

    @_builtins.property
    @pulumi.getter(name="ikePreSharedKeyLocalId")
    def ike_pre_shared_key_local_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        IKE ID for the local endpoint. Input IPv4 address, domain name, or email address
        """
        return pulumi.get(self, "ike_pre_shared_key_local_id")

    @ike_pre_shared_key_local_id.setter
    def ike_pre_shared_key_local_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "ike_pre_shared_key_local_id", value)

    @_builtins.property
    @pulumi.getter(name="ikePreSharedKeyLocalIdVariable")
    def ike_pre_shared_key_local_id_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "ike_pre_shared_key_local_id_variable")

    @ike_pre_shared_key_local_id_variable.setter
    def ike_pre_shared_key_local_id_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "ike_pre_shared_key_local_id_variable", value)

    @_builtins.property
    @pulumi.getter(name="ikePreSharedKeyRemoteId")
    def ike_pre_shared_key_remote_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        IKE ID for the remote endpoint. Input IPv4 address, domain name, or email address
        """
        return pulumi.get(self, "ike_pre_shared_key_remote_id")

    @ike_pre_shared_key_remote_id.setter
    def ike_pre_shared_key_remote_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "ike_pre_shared_key_remote_id", value)

    @_builtins.property
    @pulumi.getter(name="ikePreSharedKeyRemoteIdVariable")
    def ike_pre_shared_key_remote_id_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "ike_pre_shared_key_remote_id_variable")

    @ike_pre_shared_key_remote_id_variable.setter
    def ike_pre_shared_key_remote_id_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "ike_pre_shared_key_remote_id_variable", value)

    @_builtins.property
    @pulumi.getter(name="ikePreSharedKeyVariable")
    def ike_pre_shared_key_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "ike_pre_shared_key_variable")

    @ike_pre_shared_key_variable.setter
    def ike_pre_shared_key_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "ike_pre_shared_key_variable", value)

    @_builtins.property
    @pulumi.getter(name="ikeRekeyInterval")
    def ike_rekey_interval(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        IKE rekey interval <300..1209600> seconds
          - Range: `300`-`1209600`
          - Default value: `14400`
        """
        return pulumi.get(self, "ike_rekey_interval")

    @ike_rekey_interval.setter
    def ike_rekey_interval(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "ike_rekey_interval", value)

    @_builtins.property
    @pulumi.getter(name="ikeRekeyIntervalVariable")
    def ike_rekey_interval_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "ike_rekey_interval_variable")

    @ike_rekey_interval_variable.setter
    def ike_rekey_interval_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "ike_rekey_interval_variable", value)

    @_builtins.property
    @pulumi.getter(name="ikeVersion")
    def ike_version(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        IKE Version <1..2>
          - Range: `1`-`2`
          - Default value: `2`
        """
        return pulumi.get(self, "ike_version")

    @ike_version.setter
    def ike_version(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "ike_version", value)

    @_builtins.property
    @pulumi.getter(name="ikeVersionVariable")
    def ike_version_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "ike_version_variable")

    @ike_version_variable.setter
    def ike_version_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "ike_version_variable", value)

    @_builtins.property
    @pulumi.getter(name="ipUnnumbered")
    def ip_unnumbered(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Unnumbered interface
          - Default value: `true`
        """
        return pulumi.get(self, "ip_unnumbered")

    @ip_unnumbered.setter
    def ip_unnumbered(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "ip_unnumbered", value)

    @_builtins.property
    @pulumi.getter(name="ipsecCiphersuite")
    def ipsec_ciphersuite(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        IPsec(ESP) encryption and integrity protocol
          - Choices: `aes256-cbc-sha1`, `aes256-cbc-sha384`, `aes256-cbc-sha256`, `aes256-cbc-sha512`, `aes256-gcm`, `null-sha1`, `null-sha384`, `null-sha256`, `null-sha512`
          - Default value: `aes256-gcm`
        """
        return pulumi.get(self, "ipsec_ciphersuite")

    @ipsec_ciphersuite.setter
    def ipsec_ciphersuite(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "ipsec_ciphersuite", value)

    @_builtins.property
    @pulumi.getter(name="ipsecCiphersuiteVariable")
    def ipsec_ciphersuite_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "ipsec_ciphersuite_variable")

    @ipsec_ciphersuite_variable.setter
    def ipsec_ciphersuite_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "ipsec_ciphersuite_variable", value)

    @_builtins.property
    @pulumi.getter(name="ipsecPerfectForwardSecrecy")
    def ipsec_perfect_forward_secrecy(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        IPsec perfect forward secrecy settings
          - Choices: `group-2`, `group-14`, `group-15`, `group-16`, `none`
          - Default value: `none`
        """
        return pulumi.get(self, "ipsec_perfect_forward_secrecy")

    @ipsec_perfect_forward_secrecy.setter
    def ipsec_perfect_forward_secrecy(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "ipsec_perfect_forward_secrecy", value)

    @_builtins.property
    @pulumi.getter(name="ipsecPerfectForwardSecrecyVariable")
    def ipsec_perfect_forward_secrecy_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "ipsec_perfect_forward_secrecy_variable")

    @ipsec_perfect_forward_secrecy_variable.setter
    def ipsec_perfect_forward_secrecy_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "ipsec_perfect_forward_secrecy_variable", value)

    @_builtins.property
    @pulumi.getter(name="ipsecRekeyInterval")
    def ipsec_rekey_interval(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        IPsec rekey interval <300..1209600> seconds
          - Range: `300`-`1209600`
          - Default value: `3600`
        """
        return pulumi.get(self, "ipsec_rekey_interval")

    @ipsec_rekey_interval.setter
    def ipsec_rekey_interval(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "ipsec_rekey_interval", value)

    @_builtins.property
    @pulumi.getter(name="ipsecRekeyIntervalVariable")
    def ipsec_rekey_interval_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "ipsec_rekey_interval_variable")

    @ipsec_rekey_interval_variable.setter
    def ipsec_rekey_interval_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "ipsec_rekey_interval_variable", value)

    @_builtins.property
    @pulumi.getter(name="ipsecReplayWindow")
    def ipsec_replay_window(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        Replay window size 32..8192 (must be a power of 2)
          - Range: `64`-`4096`
          - Default value: `512`
        """
        return pulumi.get(self, "ipsec_replay_window")

    @ipsec_replay_window.setter
    def ipsec_replay_window(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "ipsec_replay_window", value)

    @_builtins.property
    @pulumi.getter(name="ipsecReplayWindowVariable")
    def ipsec_replay_window_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "ipsec_replay_window_variable")

    @ipsec_replay_window_variable.setter
    def ipsec_replay_window_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "ipsec_replay_window_variable", value)

    @_builtins.property
    @pulumi.getter(name="ipv4Address")
    def ipv4_address(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Assign IPv4 address
        """
        return pulumi.get(self, "ipv4_address")

    @ipv4_address.setter
    def ipv4_address(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "ipv4_address", value)

    @_builtins.property
    @pulumi.getter(name="ipv4AddressVariable")
    def ipv4_address_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "ipv4_address_variable")

    @ipv4_address_variable.setter
    def ipv4_address_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "ipv4_address_variable", value)

    @_builtins.property
    @pulumi.getter
    def mtu(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        Interface MTU <576..2000>, in bytes
          - Range: `576`-`2000`
          - Default value: `1400`
        """
        return pulumi.get(self, "mtu")

    @mtu.setter
    def mtu(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "mtu", value)

    @_builtins.property
    @pulumi.getter(name="mtuVariable")
    def mtu_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "mtu_variable")

    @mtu_variable.setter
    def mtu_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "mtu_variable", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Interface name: IPsec when present
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "name", value)

    @_builtins.property
    @pulumi.getter(name="nameVariable")
    def name_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "name_variable")

    @name_variable.setter
    def name_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "name_variable", value)

    @_builtins.property
    @pulumi.getter
    def optional(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Indicates if list item is considered optional.
        """
        return pulumi.get(self, "optional")

    @optional.setter
    def optional(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "optional", value)

    @_builtins.property
    @pulumi.getter
    def shutdown(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Administrative state
          - Default value: `false`
        """
        return pulumi.get(self, "shutdown")

    @shutdown.setter
    def shutdown(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "shutdown", value)

    @_builtins.property
    @pulumi.getter(name="sigProvider")
    def sig_provider(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        SIG Tunnel Provider
          - Choices: `secure-internet-gateway-umbrella`, `secure-internet-gateway-zscaler`, `secure-internet-gateway-other`
          - Default value: `secure-internet-gateway-umbrella`
        """
        return pulumi.get(self, "sig_provider")

    @sig_provider.setter
    def sig_provider(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "sig_provider", value)

    @_builtins.property
    @pulumi.getter(name="tcpMss")
    def tcp_mss(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        TCP MSS on SYN packets, in bytes
          - Range: `500`-`1460`
        """
        return pulumi.get(self, "tcp_mss")

    @tcp_mss.setter
    def tcp_mss(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "tcp_mss", value)

    @_builtins.property
    @pulumi.getter(name="tcpMssVariable")
    def tcp_mss_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "tcp_mss_variable")

    @tcp_mss_variable.setter
    def tcp_mss_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "tcp_mss_variable", value)

    @_builtins.property
    @pulumi.getter(name="trackEnable")
    def track_enable(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Enable/disable SIG tracking
          - Default value: `true`
        """
        return pulumi.get(self, "track_enable")

    @track_enable.setter
    def track_enable(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "track_enable", value)

    @_builtins.property
    @pulumi.getter
    def tracker(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Enable tracker for this interface
        """
        return pulumi.get(self, "tracker")

    @tracker.setter
    def tracker(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "tracker", value)

    @_builtins.property
    @pulumi.getter(name="tunnelDcPreference")
    def tunnel_dc_preference(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        SIG Tunnel Data Center
          - Choices: `primary-dc`, `secondary-dc`
          - Default value: `primary-dc`
        """
        return pulumi.get(self, "tunnel_dc_preference")

    @tunnel_dc_preference.setter
    def tunnel_dc_preference(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "tunnel_dc_preference", value)

    @_builtins.property
    @pulumi.getter(name="tunnelDestination")
    def tunnel_destination(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Tunnel destination IP address
        """
        return pulumi.get(self, "tunnel_destination")

    @tunnel_destination.setter
    def tunnel_destination(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "tunnel_destination", value)

    @_builtins.property
    @pulumi.getter(name="tunnelDestinationVariable")
    def tunnel_destination_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "tunnel_destination_variable")

    @tunnel_destination_variable.setter
    def tunnel_destination_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "tunnel_destination_variable", value)

    @_builtins.property
    @pulumi.getter(name="tunnelPublicIp")
    def tunnel_public_ip(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Public IP required to setup GRE tunnel to Zscaler
          - Default value: `Auto`
        """
        return pulumi.get(self, "tunnel_public_ip")

    @tunnel_public_ip.setter
    def tunnel_public_ip(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "tunnel_public_ip", value)

    @_builtins.property
    @pulumi.getter(name="tunnelPublicIpVariable")
    def tunnel_public_ip_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "tunnel_public_ip_variable")

    @tunnel_public_ip_variable.setter
    def tunnel_public_ip_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "tunnel_public_ip_variable", value)

    @_builtins.property
    @pulumi.getter(name="tunnelRouteVia")
    def tunnel_route_via(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        <1..32 characters> Interface name: ge0/<0-..> or ge0/<0-..>.vlanid
        """
        return pulumi.get(self, "tunnel_route_via")

    @tunnel_route_via.setter
    def tunnel_route_via(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "tunnel_route_via", value)

    @_builtins.property
    @pulumi.getter(name="tunnelRouteViaVariable")
    def tunnel_route_via_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "tunnel_route_via_variable")

    @tunnel_route_via_variable.setter
    def tunnel_route_via_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "tunnel_route_via_variable", value)

    @_builtins.property
    @pulumi.getter(name="tunnelSource")
    def tunnel_source(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Tunnel source IP Address
        """
        return pulumi.get(self, "tunnel_source")

    @tunnel_source.setter
    def tunnel_source(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "tunnel_source", value)

    @_builtins.property
    @pulumi.getter(name="tunnelSourceInterface")
    def tunnel_source_interface(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        <1..32 characters> Interface name: ge0/<0-..> or ge0/<0-..>.vlanid
        """
        return pulumi.get(self, "tunnel_source_interface")

    @tunnel_source_interface.setter
    def tunnel_source_interface(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "tunnel_source_interface", value)

    @_builtins.property
    @pulumi.getter(name="tunnelSourceInterfaceVariable")
    def tunnel_source_interface_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "tunnel_source_interface_variable")

    @tunnel_source_interface_variable.setter
    def tunnel_source_interface_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "tunnel_source_interface_variable", value)

    @_builtins.property
    @pulumi.getter(name="tunnelSourceVariable")
    def tunnel_source_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "tunnel_source_variable")

    @tunnel_source_variable.setter
    def tunnel_source_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "tunnel_source_variable", value)


if not MYPY:
    class CiscoSecureInternetGatewayFeatureTemplateServiceArgsDict(TypedDict):
        interface_pairs: NotRequired[pulumi.Input[Sequence[pulumi.Input['CiscoSecureInternetGatewayFeatureTemplateServiceInterfacePairArgsDict']]]]
        """
        Interface Pair for active and backup
        """
        optional: NotRequired[pulumi.Input[_builtins.bool]]
        """
        Indicates if list item is considered optional.
        """
        service_type: NotRequired[pulumi.Input[_builtins.str]]
        """
        Service Type
          - Choices: `sig`
          - Default value: `sig`
        """
        umbrella_primary_data_center: NotRequired[pulumi.Input[_builtins.str]]
        """
        Umbrella Primary Datacenter
          - Default value: `Auto`
        """
        umbrella_primary_data_center_variable: NotRequired[pulumi.Input[_builtins.str]]
        """
        Variable name
        """
        umbrella_secondary_data_center: NotRequired[pulumi.Input[_builtins.str]]
        """
        Umbrella Secondary Datacenter
          - Default value: `Auto`
        """
        umbrella_secondary_data_center_variable: NotRequired[pulumi.Input[_builtins.str]]
        """
        Variable name
        """
        zscaler_aup_block_internet_until_accepted: NotRequired[pulumi.Input[_builtins.bool]]
        """
        For first-time Acceptable User Policy behavior, block Internet access
          - Default value: `false`
        """
        zscaler_aup_enabled: NotRequired[pulumi.Input[_builtins.bool]]
        """
        Enable Acceptable User Policy
          - Default value: `false`
        """
        zscaler_aup_force_ssl_inspection: NotRequired[pulumi.Input[_builtins.bool]]
        """
        For first-time Acceptable User Policy behavior, force SSL inspection
          - Default value: `false`
        """
        zscaler_aup_timeout: NotRequired[pulumi.Input[_builtins.int]]
        """
        Custom Acceptable User Policy frequency in days
          - Default value: `0`
        """
        zscaler_authentication_required: NotRequired[pulumi.Input[_builtins.bool]]
        """
        Enforce Authentication
          - Default value: `false`
        """
        zscaler_caution_enabled: NotRequired[pulumi.Input[_builtins.bool]]
        """
        Enable Caution
          - Default value: `false`
        """
        zscaler_firewall_enabled: NotRequired[pulumi.Input[_builtins.bool]]
        """
        Firewall enabled
          - Default value: `false`
        """
        zscaler_ips_control_enabled: NotRequired[pulumi.Input[_builtins.bool]]
        """
        Enable IPS Control
          - Default value: `false`
        """
        zscaler_location_name: NotRequired[pulumi.Input[_builtins.str]]
        """
        Zscaler location name (optional)
          - Default value: `Auto`
        """
        zscaler_location_name_variable: NotRequired[pulumi.Input[_builtins.str]]
        """
        Variable name
        """
        zscaler_primary_data_center: NotRequired[pulumi.Input[_builtins.str]]
        """
        Custom Primary Datacenter
          - Default value: `Auto`
        """
        zscaler_primary_data_center_variable: NotRequired[pulumi.Input[_builtins.str]]
        """
        Variable name
        """
        zscaler_secondary_data_center: NotRequired[pulumi.Input[_builtins.str]]
        """
        Custom Secondary Datacenter
          - Default value: `Auto`
        """
        zscaler_secondary_data_center_variable: NotRequired[pulumi.Input[_builtins.str]]
        """
        Variable name
        """
        zscaler_surrogate_display_time_unit: NotRequired[pulumi.Input[_builtins.str]]
        """
        Display time unit
          - Choices: `MINUTE`, `HOUR`, `DAY`
          - Default value: `MINUTE`
        """
        zscaler_surrogate_idle_time: NotRequired[pulumi.Input[_builtins.int]]
        """
        Idle time to disassociation
          - Default value: `0`
        """
        zscaler_surrogate_ip: NotRequired[pulumi.Input[_builtins.bool]]
        """
        Enable Surrogate IP
          - Default value: `false`
        """
        zscaler_surrogate_ip_enforce_for_known_browsers: NotRequired[pulumi.Input[_builtins.bool]]
        """
        Enforce Surrogate IP for known browsers
          - Default value: `false`
        """
        zscaler_surrogate_refresh_time: NotRequired[pulumi.Input[_builtins.int]]
        """
        Refresh time for re-validation of surrogacy in minutes
          - Default value: `0`
        """
        zscaler_surrogate_refresh_time_unit: NotRequired[pulumi.Input[_builtins.str]]
        """
        Refresh Time unit
          - Choices: `MINUTE`, `HOUR`, `DAY`
          - Default value: `MINUTE`
        """
        zscaler_xff_forward: NotRequired[pulumi.Input[_builtins.bool]]
        """
        XFF forwarding enabled
          - Default value: `false`
        """
elif False:
    CiscoSecureInternetGatewayFeatureTemplateServiceArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class CiscoSecureInternetGatewayFeatureTemplateServiceArgs:
    def __init__(__self__, *,
                 interface_pairs: Optional[pulumi.Input[Sequence[pulumi.Input['CiscoSecureInternetGatewayFeatureTemplateServiceInterfacePairArgs']]]] = None,
                 optional: Optional[pulumi.Input[_builtins.bool]] = None,
                 service_type: Optional[pulumi.Input[_builtins.str]] = None,
                 umbrella_primary_data_center: Optional[pulumi.Input[_builtins.str]] = None,
                 umbrella_primary_data_center_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 umbrella_secondary_data_center: Optional[pulumi.Input[_builtins.str]] = None,
                 umbrella_secondary_data_center_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 zscaler_aup_block_internet_until_accepted: Optional[pulumi.Input[_builtins.bool]] = None,
                 zscaler_aup_enabled: Optional[pulumi.Input[_builtins.bool]] = None,
                 zscaler_aup_force_ssl_inspection: Optional[pulumi.Input[_builtins.bool]] = None,
                 zscaler_aup_timeout: Optional[pulumi.Input[_builtins.int]] = None,
                 zscaler_authentication_required: Optional[pulumi.Input[_builtins.bool]] = None,
                 zscaler_caution_enabled: Optional[pulumi.Input[_builtins.bool]] = None,
                 zscaler_firewall_enabled: Optional[pulumi.Input[_builtins.bool]] = None,
                 zscaler_ips_control_enabled: Optional[pulumi.Input[_builtins.bool]] = None,
                 zscaler_location_name: Optional[pulumi.Input[_builtins.str]] = None,
                 zscaler_location_name_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 zscaler_primary_data_center: Optional[pulumi.Input[_builtins.str]] = None,
                 zscaler_primary_data_center_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 zscaler_secondary_data_center: Optional[pulumi.Input[_builtins.str]] = None,
                 zscaler_secondary_data_center_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 zscaler_surrogate_display_time_unit: Optional[pulumi.Input[_builtins.str]] = None,
                 zscaler_surrogate_idle_time: Optional[pulumi.Input[_builtins.int]] = None,
                 zscaler_surrogate_ip: Optional[pulumi.Input[_builtins.bool]] = None,
                 zscaler_surrogate_ip_enforce_for_known_browsers: Optional[pulumi.Input[_builtins.bool]] = None,
                 zscaler_surrogate_refresh_time: Optional[pulumi.Input[_builtins.int]] = None,
                 zscaler_surrogate_refresh_time_unit: Optional[pulumi.Input[_builtins.str]] = None,
                 zscaler_xff_forward: Optional[pulumi.Input[_builtins.bool]] = None):
        """
        :param pulumi.Input[Sequence[pulumi.Input['CiscoSecureInternetGatewayFeatureTemplateServiceInterfacePairArgs']]] interface_pairs: Interface Pair for active and backup
        :param pulumi.Input[_builtins.bool] optional: Indicates if list item is considered optional.
        :param pulumi.Input[_builtins.str] service_type: Service Type
                 - Choices: `sig`
                 - Default value: `sig`
        :param pulumi.Input[_builtins.str] umbrella_primary_data_center: Umbrella Primary Datacenter
                 - Default value: `Auto`
        :param pulumi.Input[_builtins.str] umbrella_primary_data_center_variable: Variable name
        :param pulumi.Input[_builtins.str] umbrella_secondary_data_center: Umbrella Secondary Datacenter
                 - Default value: `Auto`
        :param pulumi.Input[_builtins.str] umbrella_secondary_data_center_variable: Variable name
        :param pulumi.Input[_builtins.bool] zscaler_aup_block_internet_until_accepted: For first-time Acceptable User Policy behavior, block Internet access
                 - Default value: `false`
        :param pulumi.Input[_builtins.bool] zscaler_aup_enabled: Enable Acceptable User Policy
                 - Default value: `false`
        :param pulumi.Input[_builtins.bool] zscaler_aup_force_ssl_inspection: For first-time Acceptable User Policy behavior, force SSL inspection
                 - Default value: `false`
        :param pulumi.Input[_builtins.int] zscaler_aup_timeout: Custom Acceptable User Policy frequency in days
                 - Default value: `0`
        :param pulumi.Input[_builtins.bool] zscaler_authentication_required: Enforce Authentication
                 - Default value: `false`
        :param pulumi.Input[_builtins.bool] zscaler_caution_enabled: Enable Caution
                 - Default value: `false`
        :param pulumi.Input[_builtins.bool] zscaler_firewall_enabled: Firewall enabled
                 - Default value: `false`
        :param pulumi.Input[_builtins.bool] zscaler_ips_control_enabled: Enable IPS Control
                 - Default value: `false`
        :param pulumi.Input[_builtins.str] zscaler_location_name: Zscaler location name (optional)
                 - Default value: `Auto`
        :param pulumi.Input[_builtins.str] zscaler_location_name_variable: Variable name
        :param pulumi.Input[_builtins.str] zscaler_primary_data_center: Custom Primary Datacenter
                 - Default value: `Auto`
        :param pulumi.Input[_builtins.str] zscaler_primary_data_center_variable: Variable name
        :param pulumi.Input[_builtins.str] zscaler_secondary_data_center: Custom Secondary Datacenter
                 - Default value: `Auto`
        :param pulumi.Input[_builtins.str] zscaler_secondary_data_center_variable: Variable name
        :param pulumi.Input[_builtins.str] zscaler_surrogate_display_time_unit: Display time unit
                 - Choices: `MINUTE`, `HOUR`, `DAY`
                 - Default value: `MINUTE`
        :param pulumi.Input[_builtins.int] zscaler_surrogate_idle_time: Idle time to disassociation
                 - Default value: `0`
        :param pulumi.Input[_builtins.bool] zscaler_surrogate_ip: Enable Surrogate IP
                 - Default value: `false`
        :param pulumi.Input[_builtins.bool] zscaler_surrogate_ip_enforce_for_known_browsers: Enforce Surrogate IP for known browsers
                 - Default value: `false`
        :param pulumi.Input[_builtins.int] zscaler_surrogate_refresh_time: Refresh time for re-validation of surrogacy in minutes
                 - Default value: `0`
        :param pulumi.Input[_builtins.str] zscaler_surrogate_refresh_time_unit: Refresh Time unit
                 - Choices: `MINUTE`, `HOUR`, `DAY`
                 - Default value: `MINUTE`
        :param pulumi.Input[_builtins.bool] zscaler_xff_forward: XFF forwarding enabled
                 - Default value: `false`
        """
        if interface_pairs is not None:
            pulumi.set(__self__, "interface_pairs", interface_pairs)
        if optional is not None:
            pulumi.set(__self__, "optional", optional)
        if service_type is not None:
            pulumi.set(__self__, "service_type", service_type)
        if umbrella_primary_data_center is not None:
            pulumi.set(__self__, "umbrella_primary_data_center", umbrella_primary_data_center)
        if umbrella_primary_data_center_variable is not None:
            pulumi.set(__self__, "umbrella_primary_data_center_variable", umbrella_primary_data_center_variable)
        if umbrella_secondary_data_center is not None:
            pulumi.set(__self__, "umbrella_secondary_data_center", umbrella_secondary_data_center)
        if umbrella_secondary_data_center_variable is not None:
            pulumi.set(__self__, "umbrella_secondary_data_center_variable", umbrella_secondary_data_center_variable)
        if zscaler_aup_block_internet_until_accepted is not None:
            pulumi.set(__self__, "zscaler_aup_block_internet_until_accepted", zscaler_aup_block_internet_until_accepted)
        if zscaler_aup_enabled is not None:
            pulumi.set(__self__, "zscaler_aup_enabled", zscaler_aup_enabled)
        if zscaler_aup_force_ssl_inspection is not None:
            pulumi.set(__self__, "zscaler_aup_force_ssl_inspection", zscaler_aup_force_ssl_inspection)
        if zscaler_aup_timeout is not None:
            pulumi.set(__self__, "zscaler_aup_timeout", zscaler_aup_timeout)
        if zscaler_authentication_required is not None:
            pulumi.set(__self__, "zscaler_authentication_required", zscaler_authentication_required)
        if zscaler_caution_enabled is not None:
            pulumi.set(__self__, "zscaler_caution_enabled", zscaler_caution_enabled)
        if zscaler_firewall_enabled is not None:
            pulumi.set(__self__, "zscaler_firewall_enabled", zscaler_firewall_enabled)
        if zscaler_ips_control_enabled is not None:
            pulumi.set(__self__, "zscaler_ips_control_enabled", zscaler_ips_control_enabled)
        if zscaler_location_name is not None:
            pulumi.set(__self__, "zscaler_location_name", zscaler_location_name)
        if zscaler_location_name_variable is not None:
            pulumi.set(__self__, "zscaler_location_name_variable", zscaler_location_name_variable)
        if zscaler_primary_data_center is not None:
            pulumi.set(__self__, "zscaler_primary_data_center", zscaler_primary_data_center)
        if zscaler_primary_data_center_variable is not None:
            pulumi.set(__self__, "zscaler_primary_data_center_variable", zscaler_primary_data_center_variable)
        if zscaler_secondary_data_center is not None:
            pulumi.set(__self__, "zscaler_secondary_data_center", zscaler_secondary_data_center)
        if zscaler_secondary_data_center_variable is not None:
            pulumi.set(__self__, "zscaler_secondary_data_center_variable", zscaler_secondary_data_center_variable)
        if zscaler_surrogate_display_time_unit is not None:
            pulumi.set(__self__, "zscaler_surrogate_display_time_unit", zscaler_surrogate_display_time_unit)
        if zscaler_surrogate_idle_time is not None:
            pulumi.set(__self__, "zscaler_surrogate_idle_time", zscaler_surrogate_idle_time)
        if zscaler_surrogate_ip is not None:
            pulumi.set(__self__, "zscaler_surrogate_ip", zscaler_surrogate_ip)
        if zscaler_surrogate_ip_enforce_for_known_browsers is not None:
            pulumi.set(__self__, "zscaler_surrogate_ip_enforce_for_known_browsers", zscaler_surrogate_ip_enforce_for_known_browsers)
        if zscaler_surrogate_refresh_time is not None:
            pulumi.set(__self__, "zscaler_surrogate_refresh_time", zscaler_surrogate_refresh_time)
        if zscaler_surrogate_refresh_time_unit is not None:
            pulumi.set(__self__, "zscaler_surrogate_refresh_time_unit", zscaler_surrogate_refresh_time_unit)
        if zscaler_xff_forward is not None:
            pulumi.set(__self__, "zscaler_xff_forward", zscaler_xff_forward)

    @_builtins.property
    @pulumi.getter(name="interfacePairs")
    def interface_pairs(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['CiscoSecureInternetGatewayFeatureTemplateServiceInterfacePairArgs']]]]:
        """
        Interface Pair for active and backup
        """
        return pulumi.get(self, "interface_pairs")

    @interface_pairs.setter
    def interface_pairs(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['CiscoSecureInternetGatewayFeatureTemplateServiceInterfacePairArgs']]]]):
        pulumi.set(self, "interface_pairs", value)

    @_builtins.property
    @pulumi.getter
    def optional(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Indicates if list item is considered optional.
        """
        return pulumi.get(self, "optional")

    @optional.setter
    def optional(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "optional", value)

    @_builtins.property
    @pulumi.getter(name="serviceType")
    def service_type(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Service Type
          - Choices: `sig`
          - Default value: `sig`
        """
        return pulumi.get(self, "service_type")

    @service_type.setter
    def service_type(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "service_type", value)

    @_builtins.property
    @pulumi.getter(name="umbrellaPrimaryDataCenter")
    def umbrella_primary_data_center(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Umbrella Primary Datacenter
          - Default value: `Auto`
        """
        return pulumi.get(self, "umbrella_primary_data_center")

    @umbrella_primary_data_center.setter
    def umbrella_primary_data_center(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "umbrella_primary_data_center", value)

    @_builtins.property
    @pulumi.getter(name="umbrellaPrimaryDataCenterVariable")
    def umbrella_primary_data_center_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "umbrella_primary_data_center_variable")

    @umbrella_primary_data_center_variable.setter
    def umbrella_primary_data_center_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "umbrella_primary_data_center_variable", value)

    @_builtins.property
    @pulumi.getter(name="umbrellaSecondaryDataCenter")
    def umbrella_secondary_data_center(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Umbrella Secondary Datacenter
          - Default value: `Auto`
        """
        return pulumi.get(self, "umbrella_secondary_data_center")

    @umbrella_secondary_data_center.setter
    def umbrella_secondary_data_center(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "umbrella_secondary_data_center", value)

    @_builtins.property
    @pulumi.getter(name="umbrellaSecondaryDataCenterVariable")
    def umbrella_secondary_data_center_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "umbrella_secondary_data_center_variable")

    @umbrella_secondary_data_center_variable.setter
    def umbrella_secondary_data_center_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "umbrella_secondary_data_center_variable", value)

    @_builtins.property
    @pulumi.getter(name="zscalerAupBlockInternetUntilAccepted")
    def zscaler_aup_block_internet_until_accepted(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        For first-time Acceptable User Policy behavior, block Internet access
          - Default value: `false`
        """
        return pulumi.get(self, "zscaler_aup_block_internet_until_accepted")

    @zscaler_aup_block_internet_until_accepted.setter
    def zscaler_aup_block_internet_until_accepted(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "zscaler_aup_block_internet_until_accepted", value)

    @_builtins.property
    @pulumi.getter(name="zscalerAupEnabled")
    def zscaler_aup_enabled(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Enable Acceptable User Policy
          - Default value: `false`
        """
        return pulumi.get(self, "zscaler_aup_enabled")

    @zscaler_aup_enabled.setter
    def zscaler_aup_enabled(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "zscaler_aup_enabled", value)

    @_builtins.property
    @pulumi.getter(name="zscalerAupForceSslInspection")
    def zscaler_aup_force_ssl_inspection(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        For first-time Acceptable User Policy behavior, force SSL inspection
          - Default value: `false`
        """
        return pulumi.get(self, "zscaler_aup_force_ssl_inspection")

    @zscaler_aup_force_ssl_inspection.setter
    def zscaler_aup_force_ssl_inspection(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "zscaler_aup_force_ssl_inspection", value)

    @_builtins.property
    @pulumi.getter(name="zscalerAupTimeout")
    def zscaler_aup_timeout(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        Custom Acceptable User Policy frequency in days
          - Default value: `0`
        """
        return pulumi.get(self, "zscaler_aup_timeout")

    @zscaler_aup_timeout.setter
    def zscaler_aup_timeout(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "zscaler_aup_timeout", value)

    @_builtins.property
    @pulumi.getter(name="zscalerAuthenticationRequired")
    def zscaler_authentication_required(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Enforce Authentication
          - Default value: `false`
        """
        return pulumi.get(self, "zscaler_authentication_required")

    @zscaler_authentication_required.setter
    def zscaler_authentication_required(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "zscaler_authentication_required", value)

    @_builtins.property
    @pulumi.getter(name="zscalerCautionEnabled")
    def zscaler_caution_enabled(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Enable Caution
          - Default value: `false`
        """
        return pulumi.get(self, "zscaler_caution_enabled")

    @zscaler_caution_enabled.setter
    def zscaler_caution_enabled(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "zscaler_caution_enabled", value)

    @_builtins.property
    @pulumi.getter(name="zscalerFirewallEnabled")
    def zscaler_firewall_enabled(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Firewall enabled
          - Default value: `false`
        """
        return pulumi.get(self, "zscaler_firewall_enabled")

    @zscaler_firewall_enabled.setter
    def zscaler_firewall_enabled(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "zscaler_firewall_enabled", value)

    @_builtins.property
    @pulumi.getter(name="zscalerIpsControlEnabled")
    def zscaler_ips_control_enabled(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Enable IPS Control
          - Default value: `false`
        """
        return pulumi.get(self, "zscaler_ips_control_enabled")

    @zscaler_ips_control_enabled.setter
    def zscaler_ips_control_enabled(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "zscaler_ips_control_enabled", value)

    @_builtins.property
    @pulumi.getter(name="zscalerLocationName")
    def zscaler_location_name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Zscaler location name (optional)
          - Default value: `Auto`
        """
        return pulumi.get(self, "zscaler_location_name")

    @zscaler_location_name.setter
    def zscaler_location_name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "zscaler_location_name", value)

    @_builtins.property
    @pulumi.getter(name="zscalerLocationNameVariable")
    def zscaler_location_name_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "zscaler_location_name_variable")

    @zscaler_location_name_variable.setter
    def zscaler_location_name_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "zscaler_location_name_variable", value)

    @_builtins.property
    @pulumi.getter(name="zscalerPrimaryDataCenter")
    def zscaler_primary_data_center(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Custom Primary Datacenter
          - Default value: `Auto`
        """
        return pulumi.get(self, "zscaler_primary_data_center")

    @zscaler_primary_data_center.setter
    def zscaler_primary_data_center(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "zscaler_primary_data_center", value)

    @_builtins.property
    @pulumi.getter(name="zscalerPrimaryDataCenterVariable")
    def zscaler_primary_data_center_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "zscaler_primary_data_center_variable")

    @zscaler_primary_data_center_variable.setter
    def zscaler_primary_data_center_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "zscaler_primary_data_center_variable", value)

    @_builtins.property
    @pulumi.getter(name="zscalerSecondaryDataCenter")
    def zscaler_secondary_data_center(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Custom Secondary Datacenter
          - Default value: `Auto`
        """
        return pulumi.get(self, "zscaler_secondary_data_center")

    @zscaler_secondary_data_center.setter
    def zscaler_secondary_data_center(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "zscaler_secondary_data_center", value)

    @_builtins.property
    @pulumi.getter(name="zscalerSecondaryDataCenterVariable")
    def zscaler_secondary_data_center_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "zscaler_secondary_data_center_variable")

    @zscaler_secondary_data_center_variable.setter
    def zscaler_secondary_data_center_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "zscaler_secondary_data_center_variable", value)

    @_builtins.property
    @pulumi.getter(name="zscalerSurrogateDisplayTimeUnit")
    def zscaler_surrogate_display_time_unit(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Display time unit
          - Choices: `MINUTE`, `HOUR`, `DAY`
          - Default value: `MINUTE`
        """
        return pulumi.get(self, "zscaler_surrogate_display_time_unit")

    @zscaler_surrogate_display_time_unit.setter
    def zscaler_surrogate_display_time_unit(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "zscaler_surrogate_display_time_unit", value)

    @_builtins.property
    @pulumi.getter(name="zscalerSurrogateIdleTime")
    def zscaler_surrogate_idle_time(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        Idle time to disassociation
          - Default value: `0`
        """
        return pulumi.get(self, "zscaler_surrogate_idle_time")

    @zscaler_surrogate_idle_time.setter
    def zscaler_surrogate_idle_time(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "zscaler_surrogate_idle_time", value)

    @_builtins.property
    @pulumi.getter(name="zscalerSurrogateIp")
    def zscaler_surrogate_ip(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Enable Surrogate IP
          - Default value: `false`
        """
        return pulumi.get(self, "zscaler_surrogate_ip")

    @zscaler_surrogate_ip.setter
    def zscaler_surrogate_ip(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "zscaler_surrogate_ip", value)

    @_builtins.property
    @pulumi.getter(name="zscalerSurrogateIpEnforceForKnownBrowsers")
    def zscaler_surrogate_ip_enforce_for_known_browsers(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Enforce Surrogate IP for known browsers
          - Default value: `false`
        """
        return pulumi.get(self, "zscaler_surrogate_ip_enforce_for_known_browsers")

    @zscaler_surrogate_ip_enforce_for_known_browsers.setter
    def zscaler_surrogate_ip_enforce_for_known_browsers(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "zscaler_surrogate_ip_enforce_for_known_browsers", value)

    @_builtins.property
    @pulumi.getter(name="zscalerSurrogateRefreshTime")
    def zscaler_surrogate_refresh_time(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        Refresh time for re-validation of surrogacy in minutes
          - Default value: `0`
        """
        return pulumi.get(self, "zscaler_surrogate_refresh_time")

    @zscaler_surrogate_refresh_time.setter
    def zscaler_surrogate_refresh_time(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "zscaler_surrogate_refresh_time", value)

    @_builtins.property
    @pulumi.getter(name="zscalerSurrogateRefreshTimeUnit")
    def zscaler_surrogate_refresh_time_unit(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Refresh Time unit
          - Choices: `MINUTE`, `HOUR`, `DAY`
          - Default value: `MINUTE`
        """
        return pulumi.get(self, "zscaler_surrogate_refresh_time_unit")

    @zscaler_surrogate_refresh_time_unit.setter
    def zscaler_surrogate_refresh_time_unit(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "zscaler_surrogate_refresh_time_unit", value)

    @_builtins.property
    @pulumi.getter(name="zscalerXffForward")
    def zscaler_xff_forward(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        XFF forwarding enabled
          - Default value: `false`
        """
        return pulumi.get(self, "zscaler_xff_forward")

    @zscaler_xff_forward.setter
    def zscaler_xff_forward(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "zscaler_xff_forward", value)


if not MYPY:
    class CiscoSecureInternetGatewayFeatureTemplateServiceInterfacePairArgsDict(TypedDict):
        active_interface: NotRequired[pulumi.Input[_builtins.str]]
        """
        Active Tunnel Interface for SIG
        """
        active_interface_weight: NotRequired[pulumi.Input[_builtins.int]]
        """
        Active Tunnel Interface Weight
          - Range: `1`-`255`
          - Default value: `1`
        """
        backup_interface: NotRequired[pulumi.Input[_builtins.str]]
        """
        Backup Tunnel Interface for SIG
        """
        backup_interface_weight: NotRequired[pulumi.Input[_builtins.int]]
        """
        Backup Tunnel Interface Weight
          - Range: `1`-`255`
          - Default value: `1`
        """
        optional: NotRequired[pulumi.Input[_builtins.bool]]
        """
        Indicates if list item is considered optional.
        """
elif False:
    CiscoSecureInternetGatewayFeatureTemplateServiceInterfacePairArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class CiscoSecureInternetGatewayFeatureTemplateServiceInterfacePairArgs:
    def __init__(__self__, *,
                 active_interface: Optional[pulumi.Input[_builtins.str]] = None,
                 active_interface_weight: Optional[pulumi.Input[_builtins.int]] = None,
                 backup_interface: Optional[pulumi.Input[_builtins.str]] = None,
                 backup_interface_weight: Optional[pulumi.Input[_builtins.int]] = None,
                 optional: Optional[pulumi.Input[_builtins.bool]] = None):
        """
        :param pulumi.Input[_builtins.str] active_interface: Active Tunnel Interface for SIG
        :param pulumi.Input[_builtins.int] active_interface_weight: Active Tunnel Interface Weight
                 - Range: `1`-`255`
                 - Default value: `1`
        :param pulumi.Input[_builtins.str] backup_interface: Backup Tunnel Interface for SIG
        :param pulumi.Input[_builtins.int] backup_interface_weight: Backup Tunnel Interface Weight
                 - Range: `1`-`255`
                 - Default value: `1`
        :param pulumi.Input[_builtins.bool] optional: Indicates if list item is considered optional.
        """
        if active_interface is not None:
            pulumi.set(__self__, "active_interface", active_interface)
        if active_interface_weight is not None:
            pulumi.set(__self__, "active_interface_weight", active_interface_weight)
        if backup_interface is not None:
            pulumi.set(__self__, "backup_interface", backup_interface)
        if backup_interface_weight is not None:
            pulumi.set(__self__, "backup_interface_weight", backup_interface_weight)
        if optional is not None:
            pulumi.set(__self__, "optional", optional)

    @_builtins.property
    @pulumi.getter(name="activeInterface")
    def active_interface(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Active Tunnel Interface for SIG
        """
        return pulumi.get(self, "active_interface")

    @active_interface.setter
    def active_interface(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "active_interface", value)

    @_builtins.property
    @pulumi.getter(name="activeInterfaceWeight")
    def active_interface_weight(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        Active Tunnel Interface Weight
          - Range: `1`-`255`
          - Default value: `1`
        """
        return pulumi.get(self, "active_interface_weight")

    @active_interface_weight.setter
    def active_interface_weight(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "active_interface_weight", value)

    @_builtins.property
    @pulumi.getter(name="backupInterface")
    def backup_interface(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Backup Tunnel Interface for SIG
        """
        return pulumi.get(self, "backup_interface")

    @backup_interface.setter
    def backup_interface(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "backup_interface", value)

    @_builtins.property
    @pulumi.getter(name="backupInterfaceWeight")
    def backup_interface_weight(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        Backup Tunnel Interface Weight
          - Range: `1`-`255`
          - Default value: `1`
        """
        return pulumi.get(self, "backup_interface_weight")

    @backup_interface_weight.setter
    def backup_interface_weight(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "backup_interface_weight", value)

    @_builtins.property
    @pulumi.getter
    def optional(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Indicates if list item is considered optional.
        """
        return pulumi.get(self, "optional")

    @optional.setter
    def optional(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "optional", value)


if not MYPY:
    class CiscoSecureInternetGatewayFeatureTemplateTrackerArgsDict(TypedDict):
        endpoint_api_url: NotRequired[pulumi.Input[_builtins.str]]
        """
        API url of endpoint
        """
        endpoint_api_url_variable: NotRequired[pulumi.Input[_builtins.str]]
        """
        Variable name
        """
        interval: NotRequired[pulumi.Input[_builtins.int]]
        """
        Probe interval <10..600> seconds
          - Range: `20`-`600`
          - Default value: `60`
        """
        interval_variable: NotRequired[pulumi.Input[_builtins.str]]
        """
        Variable name
        """
        multiplier: NotRequired[pulumi.Input[_builtins.int]]
        """
        Probe failure multiplier <1..10> failed attempts
          - Range: `1`-`10`
          - Default value: `3`
        """
        multiplier_variable: NotRequired[pulumi.Input[_builtins.str]]
        """
        Variable name
        """
        name: NotRequired[pulumi.Input[_builtins.str]]
        """
        Tracker name
        """
        name_variable: NotRequired[pulumi.Input[_builtins.str]]
        """
        Variable name
        """
        optional: NotRequired[pulumi.Input[_builtins.bool]]
        """
        Indicates if list item is considered optional.
        """
        threshold: NotRequired[pulumi.Input[_builtins.int]]
        """
        Probe Timeout threshold <100..1000> milliseconds
          - Range: `100`-`1000`
          - Default value: `300`
        """
        threshold_variable: NotRequired[pulumi.Input[_builtins.str]]
        """
        Variable name
        """
        tracker_type: NotRequired[pulumi.Input[_builtins.str]]
        """
        - Choices: `SIG`
          - Default value: ` SIG`
        """
elif False:
    CiscoSecureInternetGatewayFeatureTemplateTrackerArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class CiscoSecureInternetGatewayFeatureTemplateTrackerArgs:
    def __init__(__self__, *,
                 endpoint_api_url: Optional[pulumi.Input[_builtins.str]] = None,
                 endpoint_api_url_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 interval: Optional[pulumi.Input[_builtins.int]] = None,
                 interval_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 multiplier: Optional[pulumi.Input[_builtins.int]] = None,
                 multiplier_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 name_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 optional: Optional[pulumi.Input[_builtins.bool]] = None,
                 threshold: Optional[pulumi.Input[_builtins.int]] = None,
                 threshold_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 tracker_type: Optional[pulumi.Input[_builtins.str]] = None):
        """
        :param pulumi.Input[_builtins.str] endpoint_api_url: API url of endpoint
        :param pulumi.Input[_builtins.str] endpoint_api_url_variable: Variable name
        :param pulumi.Input[_builtins.int] interval: Probe interval <10..600> seconds
                 - Range: `20`-`600`
                 - Default value: `60`
        :param pulumi.Input[_builtins.str] interval_variable: Variable name
        :param pulumi.Input[_builtins.int] multiplier: Probe failure multiplier <1..10> failed attempts
                 - Range: `1`-`10`
                 - Default value: `3`
        :param pulumi.Input[_builtins.str] multiplier_variable: Variable name
        :param pulumi.Input[_builtins.str] name: Tracker name
        :param pulumi.Input[_builtins.str] name_variable: Variable name
        :param pulumi.Input[_builtins.bool] optional: Indicates if list item is considered optional.
        :param pulumi.Input[_builtins.int] threshold: Probe Timeout threshold <100..1000> milliseconds
                 - Range: `100`-`1000`
                 - Default value: `300`
        :param pulumi.Input[_builtins.str] threshold_variable: Variable name
        :param pulumi.Input[_builtins.str] tracker_type: - Choices: `SIG`
                 - Default value: ` SIG`
        """
        if endpoint_api_url is not None:
            pulumi.set(__self__, "endpoint_api_url", endpoint_api_url)
        if endpoint_api_url_variable is not None:
            pulumi.set(__self__, "endpoint_api_url_variable", endpoint_api_url_variable)
        if interval is not None:
            pulumi.set(__self__, "interval", interval)
        if interval_variable is not None:
            pulumi.set(__self__, "interval_variable", interval_variable)
        if multiplier is not None:
            pulumi.set(__self__, "multiplier", multiplier)
        if multiplier_variable is not None:
            pulumi.set(__self__, "multiplier_variable", multiplier_variable)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if name_variable is not None:
            pulumi.set(__self__, "name_variable", name_variable)
        if optional is not None:
            pulumi.set(__self__, "optional", optional)
        if threshold is not None:
            pulumi.set(__self__, "threshold", threshold)
        if threshold_variable is not None:
            pulumi.set(__self__, "threshold_variable", threshold_variable)
        if tracker_type is not None:
            pulumi.set(__self__, "tracker_type", tracker_type)

    @_builtins.property
    @pulumi.getter(name="endpointApiUrl")
    def endpoint_api_url(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        API url of endpoint
        """
        return pulumi.get(self, "endpoint_api_url")

    @endpoint_api_url.setter
    def endpoint_api_url(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "endpoint_api_url", value)

    @_builtins.property
    @pulumi.getter(name="endpointApiUrlVariable")
    def endpoint_api_url_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "endpoint_api_url_variable")

    @endpoint_api_url_variable.setter
    def endpoint_api_url_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "endpoint_api_url_variable", value)

    @_builtins.property
    @pulumi.getter
    def interval(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        Probe interval <10..600> seconds
          - Range: `20`-`600`
          - Default value: `60`
        """
        return pulumi.get(self, "interval")

    @interval.setter
    def interval(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "interval", value)

    @_builtins.property
    @pulumi.getter(name="intervalVariable")
    def interval_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "interval_variable")

    @interval_variable.setter
    def interval_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "interval_variable", value)

    @_builtins.property
    @pulumi.getter
    def multiplier(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        Probe failure multiplier <1..10> failed attempts
          - Range: `1`-`10`
          - Default value: `3`
        """
        return pulumi.get(self, "multiplier")

    @multiplier.setter
    def multiplier(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "multiplier", value)

    @_builtins.property
    @pulumi.getter(name="multiplierVariable")
    def multiplier_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "multiplier_variable")

    @multiplier_variable.setter
    def multiplier_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "multiplier_variable", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Tracker name
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "name", value)

    @_builtins.property
    @pulumi.getter(name="nameVariable")
    def name_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "name_variable")

    @name_variable.setter
    def name_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "name_variable", value)

    @_builtins.property
    @pulumi.getter
    def optional(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Indicates if list item is considered optional.
        """
        return pulumi.get(self, "optional")

    @optional.setter
    def optional(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "optional", value)

    @_builtins.property
    @pulumi.getter
    def threshold(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        Probe Timeout threshold <100..1000> milliseconds
          - Range: `100`-`1000`
          - Default value: `300`
        """
        return pulumi.get(self, "threshold")

    @threshold.setter
    def threshold(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "threshold", value)

    @_builtins.property
    @pulumi.getter(name="thresholdVariable")
    def threshold_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "threshold_variable")

    @threshold_variable.setter
    def threshold_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "threshold_variable", value)

    @_builtins.property
    @pulumi.getter(name="trackerType")
    def tracker_type(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        - Choices: `SIG`
          - Default value: ` SIG`
        """
        return pulumi.get(self, "tracker_type")

    @tracker_type.setter
    def tracker_type(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "tracker_type", value)


if not MYPY:
    class CiscoSecurityFeatureTemplateKeyArgsDict(TypedDict):
        accept_ao_mismatch: NotRequired[pulumi.Input[_builtins.bool]]
        """
        Configure Accept AO Mismatch
          - Default value: `false`
        """
        accept_ao_mismatch_variable: NotRequired[pulumi.Input[_builtins.str]]
        """
        Variable name
        """
        accept_lifetime_duration: NotRequired[pulumi.Input[_builtins.int]]
        """
        Configure Accept lifetime Duration
          - Range: `1`-`2147483646`
        """
        accept_lifetime_duration_variable: NotRequired[pulumi.Input[_builtins.str]]
        """
        Variable name
        """
        accept_lifetime_end_time: NotRequired[pulumi.Input[_builtins.str]]
        """
        Configure Key lifetime end time
        """
        accept_lifetime_end_time_format: NotRequired[pulumi.Input[_builtins.str]]
        """
        Configure Key lifetime end time
          - Choices: `infinite`, `duration`, `end-epoch`
          - Default value: `infinite`
        """
        accept_lifetime_infinite: NotRequired[pulumi.Input[_builtins.bool]]
        """
        Configure Key lifetime end time
        """
        accept_lifetime_infinite_variable: NotRequired[pulumi.Input[_builtins.str]]
        """
        Variable name
        """
        accept_lifetime_local: NotRequired[pulumi.Input[_builtins.bool]]
        """
        Configure Accept Lifetime Local
          - Default value: `false`
        """
        accept_lifetime_local_variable: NotRequired[pulumi.Input[_builtins.str]]
        """
        Variable name
        """
        accept_lifetime_start_time: NotRequired[pulumi.Input[_builtins.str]]
        """
        Configure Key lifetime start time
        """
        chain_name: NotRequired[pulumi.Input[_builtins.str]]
        """
        Select the chain name
        """
        crypto_algorithm: NotRequired[pulumi.Input[_builtins.str]]
        """
        Crypto Algorithm
          - Choices: `aes-128-cmac`, `hmac-sha-1`, `hmac-sha-256`
        """
        id: NotRequired[pulumi.Input[_builtins.str]]
        """
        Select the Key ID
        """
        include_tcp_options: NotRequired[pulumi.Input[_builtins.bool]]
        """
        Configure Include TCP Options
          - Default value: `false`
        """
        include_tcp_options_variable: NotRequired[pulumi.Input[_builtins.str]]
        """
        Variable name
        """
        key_string: NotRequired[pulumi.Input[_builtins.str]]
        """
        Specify the Key String
        """
        key_string_variable: NotRequired[pulumi.Input[_builtins.str]]
        """
        Variable name
        """
        optional: NotRequired[pulumi.Input[_builtins.bool]]
        """
        Indicates if list item is considered optional.
        """
        receive_id: NotRequired[pulumi.Input[_builtins.int]]
        """
        Specify the Receiver ID
          - Range: `0`-`255`
          - Default value: `0`
        """
        receive_id_variable: NotRequired[pulumi.Input[_builtins.str]]
        """
        Variable name
        """
        send_id: NotRequired[pulumi.Input[_builtins.int]]
        """
        Specify the Send ID
          - Range: `0`-`255`
          - Default value: `0`
        """
        send_id_variable: NotRequired[pulumi.Input[_builtins.str]]
        """
        Variable name
        """
        send_lifetime_duration: NotRequired[pulumi.Input[_builtins.int]]
        """
        Configure Send lifetime Duration
          - Range: `1`-`2147483646`
        """
        send_lifetime_duration_variable: NotRequired[pulumi.Input[_builtins.str]]
        """
        Variable name
        """
        send_lifetime_end_time: NotRequired[pulumi.Input[_builtins.str]]
        """
        Configure Key lifetime end time
        """
        send_lifetime_end_time_format: NotRequired[pulumi.Input[_builtins.str]]
        """
        Configure Key lifetime end time
          - Choices: `infinite`, `duration`, `end-epoch`
          - Default value: `infinite`
        """
        send_lifetime_infinite: NotRequired[pulumi.Input[_builtins.bool]]
        """
        Configure Key lifetime end time
        """
        send_lifetime_infinite_variable: NotRequired[pulumi.Input[_builtins.str]]
        """
        Variable name
        """
        send_lifetime_local: NotRequired[pulumi.Input[_builtins.bool]]
        """
        Configure Send lifetime Local
          - Default value: `false`
        """
        send_lifetime_local_variable: NotRequired[pulumi.Input[_builtins.str]]
        """
        Variable name
        """
        send_lifetime_start_time: NotRequired[pulumi.Input[_builtins.str]]
        """
        Configure Key lifetime start time
        """
elif False:
    CiscoSecurityFeatureTemplateKeyArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class CiscoSecurityFeatureTemplateKeyArgs:
    def __init__(__self__, *,
                 accept_ao_mismatch: Optional[pulumi.Input[_builtins.bool]] = None,
                 accept_ao_mismatch_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 accept_lifetime_duration: Optional[pulumi.Input[_builtins.int]] = None,
                 accept_lifetime_duration_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 accept_lifetime_end_time: Optional[pulumi.Input[_builtins.str]] = None,
                 accept_lifetime_end_time_format: Optional[pulumi.Input[_builtins.str]] = None,
                 accept_lifetime_infinite: Optional[pulumi.Input[_builtins.bool]] = None,
                 accept_lifetime_infinite_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 accept_lifetime_local: Optional[pulumi.Input[_builtins.bool]] = None,
                 accept_lifetime_local_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 accept_lifetime_start_time: Optional[pulumi.Input[_builtins.str]] = None,
                 chain_name: Optional[pulumi.Input[_builtins.str]] = None,
                 crypto_algorithm: Optional[pulumi.Input[_builtins.str]] = None,
                 id: Optional[pulumi.Input[_builtins.str]] = None,
                 include_tcp_options: Optional[pulumi.Input[_builtins.bool]] = None,
                 include_tcp_options_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 key_string: Optional[pulumi.Input[_builtins.str]] = None,
                 key_string_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 optional: Optional[pulumi.Input[_builtins.bool]] = None,
                 receive_id: Optional[pulumi.Input[_builtins.int]] = None,
                 receive_id_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 send_id: Optional[pulumi.Input[_builtins.int]] = None,
                 send_id_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 send_lifetime_duration: Optional[pulumi.Input[_builtins.int]] = None,
                 send_lifetime_duration_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 send_lifetime_end_time: Optional[pulumi.Input[_builtins.str]] = None,
                 send_lifetime_end_time_format: Optional[pulumi.Input[_builtins.str]] = None,
                 send_lifetime_infinite: Optional[pulumi.Input[_builtins.bool]] = None,
                 send_lifetime_infinite_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 send_lifetime_local: Optional[pulumi.Input[_builtins.bool]] = None,
                 send_lifetime_local_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 send_lifetime_start_time: Optional[pulumi.Input[_builtins.str]] = None):
        """
        :param pulumi.Input[_builtins.bool] accept_ao_mismatch: Configure Accept AO Mismatch
                 - Default value: `false`
        :param pulumi.Input[_builtins.str] accept_ao_mismatch_variable: Variable name
        :param pulumi.Input[_builtins.int] accept_lifetime_duration: Configure Accept lifetime Duration
                 - Range: `1`-`2147483646`
        :param pulumi.Input[_builtins.str] accept_lifetime_duration_variable: Variable name
        :param pulumi.Input[_builtins.str] accept_lifetime_end_time: Configure Key lifetime end time
        :param pulumi.Input[_builtins.str] accept_lifetime_end_time_format: Configure Key lifetime end time
                 - Choices: `infinite`, `duration`, `end-epoch`
                 - Default value: `infinite`
        :param pulumi.Input[_builtins.bool] accept_lifetime_infinite: Configure Key lifetime end time
        :param pulumi.Input[_builtins.str] accept_lifetime_infinite_variable: Variable name
        :param pulumi.Input[_builtins.bool] accept_lifetime_local: Configure Accept Lifetime Local
                 - Default value: `false`
        :param pulumi.Input[_builtins.str] accept_lifetime_local_variable: Variable name
        :param pulumi.Input[_builtins.str] accept_lifetime_start_time: Configure Key lifetime start time
        :param pulumi.Input[_builtins.str] chain_name: Select the chain name
        :param pulumi.Input[_builtins.str] crypto_algorithm: Crypto Algorithm
                 - Choices: `aes-128-cmac`, `hmac-sha-1`, `hmac-sha-256`
        :param pulumi.Input[_builtins.str] id: Select the Key ID
        :param pulumi.Input[_builtins.bool] include_tcp_options: Configure Include TCP Options
                 - Default value: `false`
        :param pulumi.Input[_builtins.str] include_tcp_options_variable: Variable name
        :param pulumi.Input[_builtins.str] key_string: Specify the Key String
        :param pulumi.Input[_builtins.str] key_string_variable: Variable name
        :param pulumi.Input[_builtins.bool] optional: Indicates if list item is considered optional.
        :param pulumi.Input[_builtins.int] receive_id: Specify the Receiver ID
                 - Range: `0`-`255`
                 - Default value: `0`
        :param pulumi.Input[_builtins.str] receive_id_variable: Variable name
        :param pulumi.Input[_builtins.int] send_id: Specify the Send ID
                 - Range: `0`-`255`
                 - Default value: `0`
        :param pulumi.Input[_builtins.str] send_id_variable: Variable name
        :param pulumi.Input[_builtins.int] send_lifetime_duration: Configure Send lifetime Duration
                 - Range: `1`-`2147483646`
        :param pulumi.Input[_builtins.str] send_lifetime_duration_variable: Variable name
        :param pulumi.Input[_builtins.str] send_lifetime_end_time: Configure Key lifetime end time
        :param pulumi.Input[_builtins.str] send_lifetime_end_time_format: Configure Key lifetime end time
                 - Choices: `infinite`, `duration`, `end-epoch`
                 - Default value: `infinite`
        :param pulumi.Input[_builtins.bool] send_lifetime_infinite: Configure Key lifetime end time
        :param pulumi.Input[_builtins.str] send_lifetime_infinite_variable: Variable name
        :param pulumi.Input[_builtins.bool] send_lifetime_local: Configure Send lifetime Local
                 - Default value: `false`
        :param pulumi.Input[_builtins.str] send_lifetime_local_variable: Variable name
        :param pulumi.Input[_builtins.str] send_lifetime_start_time: Configure Key lifetime start time
        """
        if accept_ao_mismatch is not None:
            pulumi.set(__self__, "accept_ao_mismatch", accept_ao_mismatch)
        if accept_ao_mismatch_variable is not None:
            pulumi.set(__self__, "accept_ao_mismatch_variable", accept_ao_mismatch_variable)
        if accept_lifetime_duration is not None:
            pulumi.set(__self__, "accept_lifetime_duration", accept_lifetime_duration)
        if accept_lifetime_duration_variable is not None:
            pulumi.set(__self__, "accept_lifetime_duration_variable", accept_lifetime_duration_variable)
        if accept_lifetime_end_time is not None:
            pulumi.set(__self__, "accept_lifetime_end_time", accept_lifetime_end_time)
        if accept_lifetime_end_time_format is not None:
            pulumi.set(__self__, "accept_lifetime_end_time_format", accept_lifetime_end_time_format)
        if accept_lifetime_infinite is not None:
            pulumi.set(__self__, "accept_lifetime_infinite", accept_lifetime_infinite)
        if accept_lifetime_infinite_variable is not None:
            pulumi.set(__self__, "accept_lifetime_infinite_variable", accept_lifetime_infinite_variable)
        if accept_lifetime_local is not None:
            pulumi.set(__self__, "accept_lifetime_local", accept_lifetime_local)
        if accept_lifetime_local_variable is not None:
            pulumi.set(__self__, "accept_lifetime_local_variable", accept_lifetime_local_variable)
        if accept_lifetime_start_time is not None:
            pulumi.set(__self__, "accept_lifetime_start_time", accept_lifetime_start_time)
        if chain_name is not None:
            pulumi.set(__self__, "chain_name", chain_name)
        if crypto_algorithm is not None:
            pulumi.set(__self__, "crypto_algorithm", crypto_algorithm)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if include_tcp_options is not None:
            pulumi.set(__self__, "include_tcp_options", include_tcp_options)
        if include_tcp_options_variable is not None:
            pulumi.set(__self__, "include_tcp_options_variable", include_tcp_options_variable)
        if key_string is not None:
            pulumi.set(__self__, "key_string", key_string)
        if key_string_variable is not None:
            pulumi.set(__self__, "key_string_variable", key_string_variable)
        if optional is not None:
            pulumi.set(__self__, "optional", optional)
        if receive_id is not None:
            pulumi.set(__self__, "receive_id", receive_id)
        if receive_id_variable is not None:
            pulumi.set(__self__, "receive_id_variable", receive_id_variable)
        if send_id is not None:
            pulumi.set(__self__, "send_id", send_id)
        if send_id_variable is not None:
            pulumi.set(__self__, "send_id_variable", send_id_variable)
        if send_lifetime_duration is not None:
            pulumi.set(__self__, "send_lifetime_duration", send_lifetime_duration)
        if send_lifetime_duration_variable is not None:
            pulumi.set(__self__, "send_lifetime_duration_variable", send_lifetime_duration_variable)
        if send_lifetime_end_time is not None:
            pulumi.set(__self__, "send_lifetime_end_time", send_lifetime_end_time)
        if send_lifetime_end_time_format is not None:
            pulumi.set(__self__, "send_lifetime_end_time_format", send_lifetime_end_time_format)
        if send_lifetime_infinite is not None:
            pulumi.set(__self__, "send_lifetime_infinite", send_lifetime_infinite)
        if send_lifetime_infinite_variable is not None:
            pulumi.set(__self__, "send_lifetime_infinite_variable", send_lifetime_infinite_variable)
        if send_lifetime_local is not None:
            pulumi.set(__self__, "send_lifetime_local", send_lifetime_local)
        if send_lifetime_local_variable is not None:
            pulumi.set(__self__, "send_lifetime_local_variable", send_lifetime_local_variable)
        if send_lifetime_start_time is not None:
            pulumi.set(__self__, "send_lifetime_start_time", send_lifetime_start_time)

    @_builtins.property
    @pulumi.getter(name="acceptAoMismatch")
    def accept_ao_mismatch(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Configure Accept AO Mismatch
          - Default value: `false`
        """
        return pulumi.get(self, "accept_ao_mismatch")

    @accept_ao_mismatch.setter
    def accept_ao_mismatch(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "accept_ao_mismatch", value)

    @_builtins.property
    @pulumi.getter(name="acceptAoMismatchVariable")
    def accept_ao_mismatch_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "accept_ao_mismatch_variable")

    @accept_ao_mismatch_variable.setter
    def accept_ao_mismatch_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "accept_ao_mismatch_variable", value)

    @_builtins.property
    @pulumi.getter(name="acceptLifetimeDuration")
    def accept_lifetime_duration(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        Configure Accept lifetime Duration
          - Range: `1`-`2147483646`
        """
        return pulumi.get(self, "accept_lifetime_duration")

    @accept_lifetime_duration.setter
    def accept_lifetime_duration(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "accept_lifetime_duration", value)

    @_builtins.property
    @pulumi.getter(name="acceptLifetimeDurationVariable")
    def accept_lifetime_duration_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "accept_lifetime_duration_variable")

    @accept_lifetime_duration_variable.setter
    def accept_lifetime_duration_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "accept_lifetime_duration_variable", value)

    @_builtins.property
    @pulumi.getter(name="acceptLifetimeEndTime")
    def accept_lifetime_end_time(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Configure Key lifetime end time
        """
        return pulumi.get(self, "accept_lifetime_end_time")

    @accept_lifetime_end_time.setter
    def accept_lifetime_end_time(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "accept_lifetime_end_time", value)

    @_builtins.property
    @pulumi.getter(name="acceptLifetimeEndTimeFormat")
    def accept_lifetime_end_time_format(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Configure Key lifetime end time
          - Choices: `infinite`, `duration`, `end-epoch`
          - Default value: `infinite`
        """
        return pulumi.get(self, "accept_lifetime_end_time_format")

    @accept_lifetime_end_time_format.setter
    def accept_lifetime_end_time_format(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "accept_lifetime_end_time_format", value)

    @_builtins.property
    @pulumi.getter(name="acceptLifetimeInfinite")
    def accept_lifetime_infinite(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Configure Key lifetime end time
        """
        return pulumi.get(self, "accept_lifetime_infinite")

    @accept_lifetime_infinite.setter
    def accept_lifetime_infinite(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "accept_lifetime_infinite", value)

    @_builtins.property
    @pulumi.getter(name="acceptLifetimeInfiniteVariable")
    def accept_lifetime_infinite_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "accept_lifetime_infinite_variable")

    @accept_lifetime_infinite_variable.setter
    def accept_lifetime_infinite_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "accept_lifetime_infinite_variable", value)

    @_builtins.property
    @pulumi.getter(name="acceptLifetimeLocal")
    def accept_lifetime_local(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Configure Accept Lifetime Local
          - Default value: `false`
        """
        return pulumi.get(self, "accept_lifetime_local")

    @accept_lifetime_local.setter
    def accept_lifetime_local(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "accept_lifetime_local", value)

    @_builtins.property
    @pulumi.getter(name="acceptLifetimeLocalVariable")
    def accept_lifetime_local_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "accept_lifetime_local_variable")

    @accept_lifetime_local_variable.setter
    def accept_lifetime_local_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "accept_lifetime_local_variable", value)

    @_builtins.property
    @pulumi.getter(name="acceptLifetimeStartTime")
    def accept_lifetime_start_time(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Configure Key lifetime start time
        """
        return pulumi.get(self, "accept_lifetime_start_time")

    @accept_lifetime_start_time.setter
    def accept_lifetime_start_time(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "accept_lifetime_start_time", value)

    @_builtins.property
    @pulumi.getter(name="chainName")
    def chain_name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Select the chain name
        """
        return pulumi.get(self, "chain_name")

    @chain_name.setter
    def chain_name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "chain_name", value)

    @_builtins.property
    @pulumi.getter(name="cryptoAlgorithm")
    def crypto_algorithm(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Crypto Algorithm
          - Choices: `aes-128-cmac`, `hmac-sha-1`, `hmac-sha-256`
        """
        return pulumi.get(self, "crypto_algorithm")

    @crypto_algorithm.setter
    def crypto_algorithm(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "crypto_algorithm", value)

    @_builtins.property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Select the Key ID
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "id", value)

    @_builtins.property
    @pulumi.getter(name="includeTcpOptions")
    def include_tcp_options(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Configure Include TCP Options
          - Default value: `false`
        """
        return pulumi.get(self, "include_tcp_options")

    @include_tcp_options.setter
    def include_tcp_options(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "include_tcp_options", value)

    @_builtins.property
    @pulumi.getter(name="includeTcpOptionsVariable")
    def include_tcp_options_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "include_tcp_options_variable")

    @include_tcp_options_variable.setter
    def include_tcp_options_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "include_tcp_options_variable", value)

    @_builtins.property
    @pulumi.getter(name="keyString")
    def key_string(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specify the Key String
        """
        return pulumi.get(self, "key_string")

    @key_string.setter
    def key_string(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "key_string", value)

    @_builtins.property
    @pulumi.getter(name="keyStringVariable")
    def key_string_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "key_string_variable")

    @key_string_variable.setter
    def key_string_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "key_string_variable", value)

    @_builtins.property
    @pulumi.getter
    def optional(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Indicates if list item is considered optional.
        """
        return pulumi.get(self, "optional")

    @optional.setter
    def optional(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "optional", value)

    @_builtins.property
    @pulumi.getter(name="receiveId")
    def receive_id(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        Specify the Receiver ID
          - Range: `0`-`255`
          - Default value: `0`
        """
        return pulumi.get(self, "receive_id")

    @receive_id.setter
    def receive_id(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "receive_id", value)

    @_builtins.property
    @pulumi.getter(name="receiveIdVariable")
    def receive_id_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "receive_id_variable")

    @receive_id_variable.setter
    def receive_id_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "receive_id_variable", value)

    @_builtins.property
    @pulumi.getter(name="sendId")
    def send_id(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        Specify the Send ID
          - Range: `0`-`255`
          - Default value: `0`
        """
        return pulumi.get(self, "send_id")

    @send_id.setter
    def send_id(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "send_id", value)

    @_builtins.property
    @pulumi.getter(name="sendIdVariable")
    def send_id_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "send_id_variable")

    @send_id_variable.setter
    def send_id_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "send_id_variable", value)

    @_builtins.property
    @pulumi.getter(name="sendLifetimeDuration")
    def send_lifetime_duration(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        Configure Send lifetime Duration
          - Range: `1`-`2147483646`
        """
        return pulumi.get(self, "send_lifetime_duration")

    @send_lifetime_duration.setter
    def send_lifetime_duration(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "send_lifetime_duration", value)

    @_builtins.property
    @pulumi.getter(name="sendLifetimeDurationVariable")
    def send_lifetime_duration_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "send_lifetime_duration_variable")

    @send_lifetime_duration_variable.setter
    def send_lifetime_duration_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "send_lifetime_duration_variable", value)

    @_builtins.property
    @pulumi.getter(name="sendLifetimeEndTime")
    def send_lifetime_end_time(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Configure Key lifetime end time
        """
        return pulumi.get(self, "send_lifetime_end_time")

    @send_lifetime_end_time.setter
    def send_lifetime_end_time(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "send_lifetime_end_time", value)

    @_builtins.property
    @pulumi.getter(name="sendLifetimeEndTimeFormat")
    def send_lifetime_end_time_format(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Configure Key lifetime end time
          - Choices: `infinite`, `duration`, `end-epoch`
          - Default value: `infinite`
        """
        return pulumi.get(self, "send_lifetime_end_time_format")

    @send_lifetime_end_time_format.setter
    def send_lifetime_end_time_format(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "send_lifetime_end_time_format", value)

    @_builtins.property
    @pulumi.getter(name="sendLifetimeInfinite")
    def send_lifetime_infinite(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Configure Key lifetime end time
        """
        return pulumi.get(self, "send_lifetime_infinite")

    @send_lifetime_infinite.setter
    def send_lifetime_infinite(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "send_lifetime_infinite", value)

    @_builtins.property
    @pulumi.getter(name="sendLifetimeInfiniteVariable")
    def send_lifetime_infinite_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "send_lifetime_infinite_variable")

    @send_lifetime_infinite_variable.setter
    def send_lifetime_infinite_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "send_lifetime_infinite_variable", value)

    @_builtins.property
    @pulumi.getter(name="sendLifetimeLocal")
    def send_lifetime_local(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Configure Send lifetime Local
          - Default value: `false`
        """
        return pulumi.get(self, "send_lifetime_local")

    @send_lifetime_local.setter
    def send_lifetime_local(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "send_lifetime_local", value)

    @_builtins.property
    @pulumi.getter(name="sendLifetimeLocalVariable")
    def send_lifetime_local_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "send_lifetime_local_variable")

    @send_lifetime_local_variable.setter
    def send_lifetime_local_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "send_lifetime_local_variable", value)

    @_builtins.property
    @pulumi.getter(name="sendLifetimeStartTime")
    def send_lifetime_start_time(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Configure Key lifetime start time
        """
        return pulumi.get(self, "send_lifetime_start_time")

    @send_lifetime_start_time.setter
    def send_lifetime_start_time(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "send_lifetime_start_time", value)


if not MYPY:
    class CiscoSecurityFeatureTemplateKeychainArgsDict(TypedDict):
        key_id: NotRequired[pulumi.Input[_builtins.int]]
        """
        Specify the Key ID
          - Range: `0`-`2147483647`
        """
        name: NotRequired[pulumi.Input[_builtins.str]]
        """
        Specify the name of the Keychain
        """
        optional: NotRequired[pulumi.Input[_builtins.bool]]
        """
        Indicates if list item is considered optional.
        """
elif False:
    CiscoSecurityFeatureTemplateKeychainArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class CiscoSecurityFeatureTemplateKeychainArgs:
    def __init__(__self__, *,
                 key_id: Optional[pulumi.Input[_builtins.int]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 optional: Optional[pulumi.Input[_builtins.bool]] = None):
        """
        :param pulumi.Input[_builtins.int] key_id: Specify the Key ID
                 - Range: `0`-`2147483647`
        :param pulumi.Input[_builtins.str] name: Specify the name of the Keychain
        :param pulumi.Input[_builtins.bool] optional: Indicates if list item is considered optional.
        """
        if key_id is not None:
            pulumi.set(__self__, "key_id", key_id)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if optional is not None:
            pulumi.set(__self__, "optional", optional)

    @_builtins.property
    @pulumi.getter(name="keyId")
    def key_id(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        Specify the Key ID
          - Range: `0`-`2147483647`
        """
        return pulumi.get(self, "key_id")

    @key_id.setter
    def key_id(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "key_id", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specify the name of the Keychain
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "name", value)

    @_builtins.property
    @pulumi.getter
    def optional(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Indicates if list item is considered optional.
        """
        return pulumi.get(self, "optional")

    @optional.setter
    def optional(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "optional", value)


if not MYPY:
    class CiscoSnmpFeatureTemplateCommunityArgsDict(TypedDict):
        authorization: NotRequired[pulumi.Input[_builtins.str]]
        """
        Configure access permissions
          - Choices: `read-only`
        """
        authorization_variable: NotRequired[pulumi.Input[_builtins.str]]
        """
        Variable name
        """
        name: NotRequired[pulumi.Input[_builtins.str]]
        """
        Set name of the SNMP community
        """
        optional: NotRequired[pulumi.Input[_builtins.bool]]
        """
        Indicates if list item is considered optional.
        """
        view: NotRequired[pulumi.Input[_builtins.str]]
        """
        Set name of the SNMP view
        """
        view_variable: NotRequired[pulumi.Input[_builtins.str]]
        """
        Variable name
        """
elif False:
    CiscoSnmpFeatureTemplateCommunityArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class CiscoSnmpFeatureTemplateCommunityArgs:
    def __init__(__self__, *,
                 authorization: Optional[pulumi.Input[_builtins.str]] = None,
                 authorization_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 optional: Optional[pulumi.Input[_builtins.bool]] = None,
                 view: Optional[pulumi.Input[_builtins.str]] = None,
                 view_variable: Optional[pulumi.Input[_builtins.str]] = None):
        """
        :param pulumi.Input[_builtins.str] authorization: Configure access permissions
                 - Choices: `read-only`
        :param pulumi.Input[_builtins.str] authorization_variable: Variable name
        :param pulumi.Input[_builtins.str] name: Set name of the SNMP community
        :param pulumi.Input[_builtins.bool] optional: Indicates if list item is considered optional.
        :param pulumi.Input[_builtins.str] view: Set name of the SNMP view
        :param pulumi.Input[_builtins.str] view_variable: Variable name
        """
        if authorization is not None:
            pulumi.set(__self__, "authorization", authorization)
        if authorization_variable is not None:
            pulumi.set(__self__, "authorization_variable", authorization_variable)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if optional is not None:
            pulumi.set(__self__, "optional", optional)
        if view is not None:
            pulumi.set(__self__, "view", view)
        if view_variable is not None:
            pulumi.set(__self__, "view_variable", view_variable)

    @_builtins.property
    @pulumi.getter
    def authorization(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Configure access permissions
          - Choices: `read-only`
        """
        return pulumi.get(self, "authorization")

    @authorization.setter
    def authorization(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "authorization", value)

    @_builtins.property
    @pulumi.getter(name="authorizationVariable")
    def authorization_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "authorization_variable")

    @authorization_variable.setter
    def authorization_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "authorization_variable", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Set name of the SNMP community
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "name", value)

    @_builtins.property
    @pulumi.getter
    def optional(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Indicates if list item is considered optional.
        """
        return pulumi.get(self, "optional")

    @optional.setter
    def optional(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "optional", value)

    @_builtins.property
    @pulumi.getter
    def view(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Set name of the SNMP view
        """
        return pulumi.get(self, "view")

    @view.setter
    def view(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "view", value)

    @_builtins.property
    @pulumi.getter(name="viewVariable")
    def view_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "view_variable")

    @view_variable.setter
    def view_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "view_variable", value)


if not MYPY:
    class CiscoSnmpFeatureTemplateGroupArgsDict(TypedDict):
        name: NotRequired[pulumi.Input[_builtins.str]]
        """
        Name of the SNMP group
        """
        optional: NotRequired[pulumi.Input[_builtins.bool]]
        """
        Indicates if list item is considered optional.
        """
        security_level: NotRequired[pulumi.Input[_builtins.str]]
        """
        Configure security level
          - Choices: `no-auth-no-priv`, `auth-no-priv`, `auth-priv`
        """
        view: NotRequired[pulumi.Input[_builtins.str]]
        """
        Name of the SNMP view
        """
        view_variable: NotRequired[pulumi.Input[_builtins.str]]
        """
        Variable name
        """
elif False:
    CiscoSnmpFeatureTemplateGroupArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class CiscoSnmpFeatureTemplateGroupArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 optional: Optional[pulumi.Input[_builtins.bool]] = None,
                 security_level: Optional[pulumi.Input[_builtins.str]] = None,
                 view: Optional[pulumi.Input[_builtins.str]] = None,
                 view_variable: Optional[pulumi.Input[_builtins.str]] = None):
        """
        :param pulumi.Input[_builtins.str] name: Name of the SNMP group
        :param pulumi.Input[_builtins.bool] optional: Indicates if list item is considered optional.
        :param pulumi.Input[_builtins.str] security_level: Configure security level
                 - Choices: `no-auth-no-priv`, `auth-no-priv`, `auth-priv`
        :param pulumi.Input[_builtins.str] view: Name of the SNMP view
        :param pulumi.Input[_builtins.str] view_variable: Variable name
        """
        if name is not None:
            pulumi.set(__self__, "name", name)
        if optional is not None:
            pulumi.set(__self__, "optional", optional)
        if security_level is not None:
            pulumi.set(__self__, "security_level", security_level)
        if view is not None:
            pulumi.set(__self__, "view", view)
        if view_variable is not None:
            pulumi.set(__self__, "view_variable", view_variable)

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Name of the SNMP group
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "name", value)

    @_builtins.property
    @pulumi.getter
    def optional(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Indicates if list item is considered optional.
        """
        return pulumi.get(self, "optional")

    @optional.setter
    def optional(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "optional", value)

    @_builtins.property
    @pulumi.getter(name="securityLevel")
    def security_level(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Configure security level
          - Choices: `no-auth-no-priv`, `auth-no-priv`, `auth-priv`
        """
        return pulumi.get(self, "security_level")

    @security_level.setter
    def security_level(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "security_level", value)

    @_builtins.property
    @pulumi.getter
    def view(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Name of the SNMP view
        """
        return pulumi.get(self, "view")

    @view.setter
    def view(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "view", value)

    @_builtins.property
    @pulumi.getter(name="viewVariable")
    def view_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "view_variable")

    @view_variable.setter
    def view_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "view_variable", value)


if not MYPY:
    class CiscoSnmpFeatureTemplateTrapTargetArgsDict(TypedDict):
        community_name: NotRequired[pulumi.Input[_builtins.str]]
        """
        Set name of the SNMP community
        """
        community_name_variable: NotRequired[pulumi.Input[_builtins.str]]
        """
        Variable name
        """
        ip: NotRequired[pulumi.Input[_builtins.str]]
        """
        Set IPv4/IPv6 address of SNMP server
        """
        ip_variable: NotRequired[pulumi.Input[_builtins.str]]
        """
        Variable name
        """
        optional: NotRequired[pulumi.Input[_builtins.bool]]
        """
        Indicates if list item is considered optional.
        """
        source_interface: NotRequired[pulumi.Input[_builtins.str]]
        """
        Source interface for outgoing SNMP traps
        """
        source_interface_variable: NotRequired[pulumi.Input[_builtins.str]]
        """
        Variable name
        """
        udp_port: NotRequired[pulumi.Input[_builtins.int]]
        """
        Set UDP port number to connect to SNMP server
          - Range: `1`-`65535`
        """
        udp_port_variable: NotRequired[pulumi.Input[_builtins.str]]
        """
        Variable name
        """
        user: NotRequired[pulumi.Input[_builtins.str]]
        """
        Set name of the SNMP user
        """
        user_variable: NotRequired[pulumi.Input[_builtins.str]]
        """
        Variable name
        """
        vpn_id: NotRequired[pulumi.Input[_builtins.int]]
        """
        Set VPN in which SNMP server is located
          - Range: `0`-`65530`
        """
        vpn_id_variable: NotRequired[pulumi.Input[_builtins.str]]
        """
        Variable name
        """
elif False:
    CiscoSnmpFeatureTemplateTrapTargetArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class CiscoSnmpFeatureTemplateTrapTargetArgs:
    def __init__(__self__, *,
                 community_name: Optional[pulumi.Input[_builtins.str]] = None,
                 community_name_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 ip: Optional[pulumi.Input[_builtins.str]] = None,
                 ip_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 optional: Optional[pulumi.Input[_builtins.bool]] = None,
                 source_interface: Optional[pulumi.Input[_builtins.str]] = None,
                 source_interface_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 udp_port: Optional[pulumi.Input[_builtins.int]] = None,
                 udp_port_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 user: Optional[pulumi.Input[_builtins.str]] = None,
                 user_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 vpn_id: Optional[pulumi.Input[_builtins.int]] = None,
                 vpn_id_variable: Optional[pulumi.Input[_builtins.str]] = None):
        """
        :param pulumi.Input[_builtins.str] community_name: Set name of the SNMP community
        :param pulumi.Input[_builtins.str] community_name_variable: Variable name
        :param pulumi.Input[_builtins.str] ip: Set IPv4/IPv6 address of SNMP server
        :param pulumi.Input[_builtins.str] ip_variable: Variable name
        :param pulumi.Input[_builtins.bool] optional: Indicates if list item is considered optional.
        :param pulumi.Input[_builtins.str] source_interface: Source interface for outgoing SNMP traps
        :param pulumi.Input[_builtins.str] source_interface_variable: Variable name
        :param pulumi.Input[_builtins.int] udp_port: Set UDP port number to connect to SNMP server
                 - Range: `1`-`65535`
        :param pulumi.Input[_builtins.str] udp_port_variable: Variable name
        :param pulumi.Input[_builtins.str] user: Set name of the SNMP user
        :param pulumi.Input[_builtins.str] user_variable: Variable name
        :param pulumi.Input[_builtins.int] vpn_id: Set VPN in which SNMP server is located
                 - Range: `0`-`65530`
        :param pulumi.Input[_builtins.str] vpn_id_variable: Variable name
        """
        if community_name is not None:
            pulumi.set(__self__, "community_name", community_name)
        if community_name_variable is not None:
            pulumi.set(__self__, "community_name_variable", community_name_variable)
        if ip is not None:
            pulumi.set(__self__, "ip", ip)
        if ip_variable is not None:
            pulumi.set(__self__, "ip_variable", ip_variable)
        if optional is not None:
            pulumi.set(__self__, "optional", optional)
        if source_interface is not None:
            pulumi.set(__self__, "source_interface", source_interface)
        if source_interface_variable is not None:
            pulumi.set(__self__, "source_interface_variable", source_interface_variable)
        if udp_port is not None:
            pulumi.set(__self__, "udp_port", udp_port)
        if udp_port_variable is not None:
            pulumi.set(__self__, "udp_port_variable", udp_port_variable)
        if user is not None:
            pulumi.set(__self__, "user", user)
        if user_variable is not None:
            pulumi.set(__self__, "user_variable", user_variable)
        if vpn_id is not None:
            pulumi.set(__self__, "vpn_id", vpn_id)
        if vpn_id_variable is not None:
            pulumi.set(__self__, "vpn_id_variable", vpn_id_variable)

    @_builtins.property
    @pulumi.getter(name="communityName")
    def community_name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Set name of the SNMP community
        """
        return pulumi.get(self, "community_name")

    @community_name.setter
    def community_name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "community_name", value)

    @_builtins.property
    @pulumi.getter(name="communityNameVariable")
    def community_name_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "community_name_variable")

    @community_name_variable.setter
    def community_name_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "community_name_variable", value)

    @_builtins.property
    @pulumi.getter
    def ip(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Set IPv4/IPv6 address of SNMP server
        """
        return pulumi.get(self, "ip")

    @ip.setter
    def ip(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "ip", value)

    @_builtins.property
    @pulumi.getter(name="ipVariable")
    def ip_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "ip_variable")

    @ip_variable.setter
    def ip_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "ip_variable", value)

    @_builtins.property
    @pulumi.getter
    def optional(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Indicates if list item is considered optional.
        """
        return pulumi.get(self, "optional")

    @optional.setter
    def optional(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "optional", value)

    @_builtins.property
    @pulumi.getter(name="sourceInterface")
    def source_interface(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Source interface for outgoing SNMP traps
        """
        return pulumi.get(self, "source_interface")

    @source_interface.setter
    def source_interface(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "source_interface", value)

    @_builtins.property
    @pulumi.getter(name="sourceInterfaceVariable")
    def source_interface_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "source_interface_variable")

    @source_interface_variable.setter
    def source_interface_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "source_interface_variable", value)

    @_builtins.property
    @pulumi.getter(name="udpPort")
    def udp_port(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        Set UDP port number to connect to SNMP server
          - Range: `1`-`65535`
        """
        return pulumi.get(self, "udp_port")

    @udp_port.setter
    def udp_port(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "udp_port", value)

    @_builtins.property
    @pulumi.getter(name="udpPortVariable")
    def udp_port_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "udp_port_variable")

    @udp_port_variable.setter
    def udp_port_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "udp_port_variable", value)

    @_builtins.property
    @pulumi.getter
    def user(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Set name of the SNMP user
        """
        return pulumi.get(self, "user")

    @user.setter
    def user(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "user", value)

    @_builtins.property
    @pulumi.getter(name="userVariable")
    def user_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "user_variable")

    @user_variable.setter
    def user_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "user_variable", value)

    @_builtins.property
    @pulumi.getter(name="vpnId")
    def vpn_id(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        Set VPN in which SNMP server is located
          - Range: `0`-`65530`
        """
        return pulumi.get(self, "vpn_id")

    @vpn_id.setter
    def vpn_id(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "vpn_id", value)

    @_builtins.property
    @pulumi.getter(name="vpnIdVariable")
    def vpn_id_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "vpn_id_variable")

    @vpn_id_variable.setter
    def vpn_id_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "vpn_id_variable", value)


if not MYPY:
    class CiscoSnmpFeatureTemplateUserArgsDict(TypedDict):
        authentication_password: NotRequired[pulumi.Input[_builtins.str]]
        """
        Specify authentication protocol password
        """
        authentication_password_variable: NotRequired[pulumi.Input[_builtins.str]]
        """
        Variable name
        """
        authentication_protocol: NotRequired[pulumi.Input[_builtins.str]]
        """
        Configure authentication protocol
          - Choices: `md5`, `sha`
        """
        authentication_protocol_variable: NotRequired[pulumi.Input[_builtins.str]]
        """
        Variable name
        """
        group: NotRequired[pulumi.Input[_builtins.str]]
        """
        Name of the SNMP group
        """
        group_variable: NotRequired[pulumi.Input[_builtins.str]]
        """
        Variable name
        """
        name: NotRequired[pulumi.Input[_builtins.str]]
        """
        Name of the SNMP user
        """
        optional: NotRequired[pulumi.Input[_builtins.bool]]
        """
        Indicates if list item is considered optional.
        """
        privacy_password: NotRequired[pulumi.Input[_builtins.str]]
        """
        Specify privacy protocol password
        """
        privacy_password_variable: NotRequired[pulumi.Input[_builtins.str]]
        """
        Variable name
        """
        privacy_protocol: NotRequired[pulumi.Input[_builtins.str]]
        """
        Configure privacy protocol
          - Choices: `aes-cfb-128`, `aes-256-cfb-128`
        """
        privacy_protocol_variable: NotRequired[pulumi.Input[_builtins.str]]
        """
        Variable name
        """
elif False:
    CiscoSnmpFeatureTemplateUserArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class CiscoSnmpFeatureTemplateUserArgs:
    def __init__(__self__, *,
                 authentication_password: Optional[pulumi.Input[_builtins.str]] = None,
                 authentication_password_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 authentication_protocol: Optional[pulumi.Input[_builtins.str]] = None,
                 authentication_protocol_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 group: Optional[pulumi.Input[_builtins.str]] = None,
                 group_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 optional: Optional[pulumi.Input[_builtins.bool]] = None,
                 privacy_password: Optional[pulumi.Input[_builtins.str]] = None,
                 privacy_password_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 privacy_protocol: Optional[pulumi.Input[_builtins.str]] = None,
                 privacy_protocol_variable: Optional[pulumi.Input[_builtins.str]] = None):
        """
        :param pulumi.Input[_builtins.str] authentication_password: Specify authentication protocol password
        :param pulumi.Input[_builtins.str] authentication_password_variable: Variable name
        :param pulumi.Input[_builtins.str] authentication_protocol: Configure authentication protocol
                 - Choices: `md5`, `sha`
        :param pulumi.Input[_builtins.str] authentication_protocol_variable: Variable name
        :param pulumi.Input[_builtins.str] group: Name of the SNMP group
        :param pulumi.Input[_builtins.str] group_variable: Variable name
        :param pulumi.Input[_builtins.str] name: Name of the SNMP user
        :param pulumi.Input[_builtins.bool] optional: Indicates if list item is considered optional.
        :param pulumi.Input[_builtins.str] privacy_password: Specify privacy protocol password
        :param pulumi.Input[_builtins.str] privacy_password_variable: Variable name
        :param pulumi.Input[_builtins.str] privacy_protocol: Configure privacy protocol
                 - Choices: `aes-cfb-128`, `aes-256-cfb-128`
        :param pulumi.Input[_builtins.str] privacy_protocol_variable: Variable name
        """
        if authentication_password is not None:
            pulumi.set(__self__, "authentication_password", authentication_password)
        if authentication_password_variable is not None:
            pulumi.set(__self__, "authentication_password_variable", authentication_password_variable)
        if authentication_protocol is not None:
            pulumi.set(__self__, "authentication_protocol", authentication_protocol)
        if authentication_protocol_variable is not None:
            pulumi.set(__self__, "authentication_protocol_variable", authentication_protocol_variable)
        if group is not None:
            pulumi.set(__self__, "group", group)
        if group_variable is not None:
            pulumi.set(__self__, "group_variable", group_variable)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if optional is not None:
            pulumi.set(__self__, "optional", optional)
        if privacy_password is not None:
            pulumi.set(__self__, "privacy_password", privacy_password)
        if privacy_password_variable is not None:
            pulumi.set(__self__, "privacy_password_variable", privacy_password_variable)
        if privacy_protocol is not None:
            pulumi.set(__self__, "privacy_protocol", privacy_protocol)
        if privacy_protocol_variable is not None:
            pulumi.set(__self__, "privacy_protocol_variable", privacy_protocol_variable)

    @_builtins.property
    @pulumi.getter(name="authenticationPassword")
    def authentication_password(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specify authentication protocol password
        """
        return pulumi.get(self, "authentication_password")

    @authentication_password.setter
    def authentication_password(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "authentication_password", value)

    @_builtins.property
    @pulumi.getter(name="authenticationPasswordVariable")
    def authentication_password_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "authentication_password_variable")

    @authentication_password_variable.setter
    def authentication_password_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "authentication_password_variable", value)

    @_builtins.property
    @pulumi.getter(name="authenticationProtocol")
    def authentication_protocol(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Configure authentication protocol
          - Choices: `md5`, `sha`
        """
        return pulumi.get(self, "authentication_protocol")

    @authentication_protocol.setter
    def authentication_protocol(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "authentication_protocol", value)

    @_builtins.property
    @pulumi.getter(name="authenticationProtocolVariable")
    def authentication_protocol_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "authentication_protocol_variable")

    @authentication_protocol_variable.setter
    def authentication_protocol_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "authentication_protocol_variable", value)

    @_builtins.property
    @pulumi.getter
    def group(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Name of the SNMP group
        """
        return pulumi.get(self, "group")

    @group.setter
    def group(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "group", value)

    @_builtins.property
    @pulumi.getter(name="groupVariable")
    def group_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "group_variable")

    @group_variable.setter
    def group_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "group_variable", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Name of the SNMP user
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "name", value)

    @_builtins.property
    @pulumi.getter
    def optional(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Indicates if list item is considered optional.
        """
        return pulumi.get(self, "optional")

    @optional.setter
    def optional(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "optional", value)

    @_builtins.property
    @pulumi.getter(name="privacyPassword")
    def privacy_password(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specify privacy protocol password
        """
        return pulumi.get(self, "privacy_password")

    @privacy_password.setter
    def privacy_password(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "privacy_password", value)

    @_builtins.property
    @pulumi.getter(name="privacyPasswordVariable")
    def privacy_password_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "privacy_password_variable")

    @privacy_password_variable.setter
    def privacy_password_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "privacy_password_variable", value)

    @_builtins.property
    @pulumi.getter(name="privacyProtocol")
    def privacy_protocol(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Configure privacy protocol
          - Choices: `aes-cfb-128`, `aes-256-cfb-128`
        """
        return pulumi.get(self, "privacy_protocol")

    @privacy_protocol.setter
    def privacy_protocol(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "privacy_protocol", value)

    @_builtins.property
    @pulumi.getter(name="privacyProtocolVariable")
    def privacy_protocol_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "privacy_protocol_variable")

    @privacy_protocol_variable.setter
    def privacy_protocol_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "privacy_protocol_variable", value)


if not MYPY:
    class CiscoSnmpFeatureTemplateViewArgsDict(TypedDict):
        name: NotRequired[pulumi.Input[_builtins.str]]
        """
        Set the name of the SNMP view
        """
        object_identifiers: NotRequired[pulumi.Input[Sequence[pulumi.Input['CiscoSnmpFeatureTemplateViewObjectIdentifierArgsDict']]]]
        """
        Configure SNMP object identifier
        """
        optional: NotRequired[pulumi.Input[_builtins.bool]]
        """
        Indicates if list item is considered optional.
        """
elif False:
    CiscoSnmpFeatureTemplateViewArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class CiscoSnmpFeatureTemplateViewArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 object_identifiers: Optional[pulumi.Input[Sequence[pulumi.Input['CiscoSnmpFeatureTemplateViewObjectIdentifierArgs']]]] = None,
                 optional: Optional[pulumi.Input[_builtins.bool]] = None):
        """
        :param pulumi.Input[_builtins.str] name: Set the name of the SNMP view
        :param pulumi.Input[Sequence[pulumi.Input['CiscoSnmpFeatureTemplateViewObjectIdentifierArgs']]] object_identifiers: Configure SNMP object identifier
        :param pulumi.Input[_builtins.bool] optional: Indicates if list item is considered optional.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)
        if object_identifiers is not None:
            pulumi.set(__self__, "object_identifiers", object_identifiers)
        if optional is not None:
            pulumi.set(__self__, "optional", optional)

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Set the name of the SNMP view
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "name", value)

    @_builtins.property
    @pulumi.getter(name="objectIdentifiers")
    def object_identifiers(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['CiscoSnmpFeatureTemplateViewObjectIdentifierArgs']]]]:
        """
        Configure SNMP object identifier
        """
        return pulumi.get(self, "object_identifiers")

    @object_identifiers.setter
    def object_identifiers(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['CiscoSnmpFeatureTemplateViewObjectIdentifierArgs']]]]):
        pulumi.set(self, "object_identifiers", value)

    @_builtins.property
    @pulumi.getter
    def optional(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Indicates if list item is considered optional.
        """
        return pulumi.get(self, "optional")

    @optional.setter
    def optional(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "optional", value)


if not MYPY:
    class CiscoSnmpFeatureTemplateViewObjectIdentifierArgsDict(TypedDict):
        exclude: NotRequired[pulumi.Input[_builtins.bool]]
        """
        Exclude the OID
          - Default value: `false`
        """
        exclude_variable: NotRequired[pulumi.Input[_builtins.str]]
        """
        Variable name
        """
        id: NotRequired[pulumi.Input[_builtins.str]]
        """
        Configure identifier of subtree of MIB objects
        """
        id_variable: NotRequired[pulumi.Input[_builtins.str]]
        """
        Variable name
        """
        optional: NotRequired[pulumi.Input[_builtins.bool]]
        """
        Indicates if list item is considered optional.
        """
elif False:
    CiscoSnmpFeatureTemplateViewObjectIdentifierArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class CiscoSnmpFeatureTemplateViewObjectIdentifierArgs:
    def __init__(__self__, *,
                 exclude: Optional[pulumi.Input[_builtins.bool]] = None,
                 exclude_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 id: Optional[pulumi.Input[_builtins.str]] = None,
                 id_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 optional: Optional[pulumi.Input[_builtins.bool]] = None):
        """
        :param pulumi.Input[_builtins.bool] exclude: Exclude the OID
                 - Default value: `false`
        :param pulumi.Input[_builtins.str] exclude_variable: Variable name
        :param pulumi.Input[_builtins.str] id: Configure identifier of subtree of MIB objects
        :param pulumi.Input[_builtins.str] id_variable: Variable name
        :param pulumi.Input[_builtins.bool] optional: Indicates if list item is considered optional.
        """
        if exclude is not None:
            pulumi.set(__self__, "exclude", exclude)
        if exclude_variable is not None:
            pulumi.set(__self__, "exclude_variable", exclude_variable)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if id_variable is not None:
            pulumi.set(__self__, "id_variable", id_variable)
        if optional is not None:
            pulumi.set(__self__, "optional", optional)

    @_builtins.property
    @pulumi.getter
    def exclude(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Exclude the OID
          - Default value: `false`
        """
        return pulumi.get(self, "exclude")

    @exclude.setter
    def exclude(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "exclude", value)

    @_builtins.property
    @pulumi.getter(name="excludeVariable")
    def exclude_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "exclude_variable")

    @exclude_variable.setter
    def exclude_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "exclude_variable", value)

    @_builtins.property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Configure identifier of subtree of MIB objects
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "id", value)

    @_builtins.property
    @pulumi.getter(name="idVariable")
    def id_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "id_variable")

    @id_variable.setter
    def id_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "id_variable", value)

    @_builtins.property
    @pulumi.getter
    def optional(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Indicates if list item is considered optional.
        """
        return pulumi.get(self, "optional")

    @optional.setter
    def optional(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "optional", value)


if not MYPY:
    class CiscoSystemFeatureTemplateGeoFencingSmsPhoneNumberArgsDict(TypedDict):
        number: NotRequired[pulumi.Input[_builtins.str]]
        """
        Mobile number, ex: +1231234414
        """
        number_variable: NotRequired[pulumi.Input[_builtins.str]]
        """
        Variable name
        """
        optional: NotRequired[pulumi.Input[_builtins.bool]]
        """
        Indicates if list item is considered optional.
        """
elif False:
    CiscoSystemFeatureTemplateGeoFencingSmsPhoneNumberArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class CiscoSystemFeatureTemplateGeoFencingSmsPhoneNumberArgs:
    def __init__(__self__, *,
                 number: Optional[pulumi.Input[_builtins.str]] = None,
                 number_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 optional: Optional[pulumi.Input[_builtins.bool]] = None):
        """
        :param pulumi.Input[_builtins.str] number: Mobile number, ex: +1231234414
        :param pulumi.Input[_builtins.str] number_variable: Variable name
        :param pulumi.Input[_builtins.bool] optional: Indicates if list item is considered optional.
        """
        if number is not None:
            pulumi.set(__self__, "number", number)
        if number_variable is not None:
            pulumi.set(__self__, "number_variable", number_variable)
        if optional is not None:
            pulumi.set(__self__, "optional", optional)

    @_builtins.property
    @pulumi.getter
    def number(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Mobile number, ex: +1231234414
        """
        return pulumi.get(self, "number")

    @number.setter
    def number(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "number", value)

    @_builtins.property
    @pulumi.getter(name="numberVariable")
    def number_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "number_variable")

    @number_variable.setter
    def number_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "number_variable", value)

    @_builtins.property
    @pulumi.getter
    def optional(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Indicates if list item is considered optional.
        """
        return pulumi.get(self, "optional")

    @optional.setter
    def optional(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "optional", value)


if not MYPY:
    class CiscoSystemFeatureTemplateObjectTrackerArgsDict(TypedDict):
        boolean: NotRequired[pulumi.Input[_builtins.str]]
        """
        Type of grouping to be performed for tracker group
          - Choices: `and`, `or`
        """
        boolean_variable: NotRequired[pulumi.Input[_builtins.str]]
        """
        Variable name
        """
        group_tracks_ids: NotRequired[pulumi.Input[Sequence[pulumi.Input['CiscoSystemFeatureTemplateObjectTrackerGroupTracksIdArgsDict']]]]
        """
        Tracks id in group configuration
        """
        interface: NotRequired[pulumi.Input[_builtins.str]]
        """
        interface name
        """
        interface_variable: NotRequired[pulumi.Input[_builtins.str]]
        """
        Variable name
        """
        ip: NotRequired[pulumi.Input[_builtins.str]]
        """
        IP address of route
        """
        ip_variable: NotRequired[pulumi.Input[_builtins.str]]
        """
        Variable name
        """
        mask: NotRequired[pulumi.Input[_builtins.str]]
        """
        Route Ip Mask
          - Default value: `0.0.0.0`
        """
        mask_variable: NotRequired[pulumi.Input[_builtins.str]]
        """
        Variable name
        """
        object_number: NotRequired[pulumi.Input[_builtins.int]]
        """
        Object tracker ID
          - Range: `1`-`1000`
        """
        object_number_variable: NotRequired[pulumi.Input[_builtins.str]]
        """
        Variable name
        """
        optional: NotRequired[pulumi.Input[_builtins.bool]]
        """
        Indicates if list item is considered optional.
        """
        sig: NotRequired[pulumi.Input[_builtins.str]]
        """
        service sig
        """
        sig_variable: NotRequired[pulumi.Input[_builtins.str]]
        """
        Variable name
        """
        vpn_id: NotRequired[pulumi.Input[_builtins.int]]
        """
        VPN
          - Range: `0`-`65527`
          - Default value: `0`
        """
elif False:
    CiscoSystemFeatureTemplateObjectTrackerArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class CiscoSystemFeatureTemplateObjectTrackerArgs:
    def __init__(__self__, *,
                 boolean: Optional[pulumi.Input[_builtins.str]] = None,
                 boolean_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 group_tracks_ids: Optional[pulumi.Input[Sequence[pulumi.Input['CiscoSystemFeatureTemplateObjectTrackerGroupTracksIdArgs']]]] = None,
                 interface: Optional[pulumi.Input[_builtins.str]] = None,
                 interface_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 ip: Optional[pulumi.Input[_builtins.str]] = None,
                 ip_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 mask: Optional[pulumi.Input[_builtins.str]] = None,
                 mask_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 object_number: Optional[pulumi.Input[_builtins.int]] = None,
                 object_number_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 optional: Optional[pulumi.Input[_builtins.bool]] = None,
                 sig: Optional[pulumi.Input[_builtins.str]] = None,
                 sig_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 vpn_id: Optional[pulumi.Input[_builtins.int]] = None):
        """
        :param pulumi.Input[_builtins.str] boolean: Type of grouping to be performed for tracker group
                 - Choices: `and`, `or`
        :param pulumi.Input[_builtins.str] boolean_variable: Variable name
        :param pulumi.Input[Sequence[pulumi.Input['CiscoSystemFeatureTemplateObjectTrackerGroupTracksIdArgs']]] group_tracks_ids: Tracks id in group configuration
        :param pulumi.Input[_builtins.str] interface: interface name
        :param pulumi.Input[_builtins.str] interface_variable: Variable name
        :param pulumi.Input[_builtins.str] ip: IP address of route
        :param pulumi.Input[_builtins.str] ip_variable: Variable name
        :param pulumi.Input[_builtins.str] mask: Route Ip Mask
                 - Default value: `0.0.0.0`
        :param pulumi.Input[_builtins.str] mask_variable: Variable name
        :param pulumi.Input[_builtins.int] object_number: Object tracker ID
                 - Range: `1`-`1000`
        :param pulumi.Input[_builtins.str] object_number_variable: Variable name
        :param pulumi.Input[_builtins.bool] optional: Indicates if list item is considered optional.
        :param pulumi.Input[_builtins.str] sig: service sig
        :param pulumi.Input[_builtins.str] sig_variable: Variable name
        :param pulumi.Input[_builtins.int] vpn_id: VPN
                 - Range: `0`-`65527`
                 - Default value: `0`
        """
        if boolean is not None:
            pulumi.set(__self__, "boolean", boolean)
        if boolean_variable is not None:
            pulumi.set(__self__, "boolean_variable", boolean_variable)
        if group_tracks_ids is not None:
            pulumi.set(__self__, "group_tracks_ids", group_tracks_ids)
        if interface is not None:
            pulumi.set(__self__, "interface", interface)
        if interface_variable is not None:
            pulumi.set(__self__, "interface_variable", interface_variable)
        if ip is not None:
            pulumi.set(__self__, "ip", ip)
        if ip_variable is not None:
            pulumi.set(__self__, "ip_variable", ip_variable)
        if mask is not None:
            pulumi.set(__self__, "mask", mask)
        if mask_variable is not None:
            pulumi.set(__self__, "mask_variable", mask_variable)
        if object_number is not None:
            pulumi.set(__self__, "object_number", object_number)
        if object_number_variable is not None:
            pulumi.set(__self__, "object_number_variable", object_number_variable)
        if optional is not None:
            pulumi.set(__self__, "optional", optional)
        if sig is not None:
            pulumi.set(__self__, "sig", sig)
        if sig_variable is not None:
            pulumi.set(__self__, "sig_variable", sig_variable)
        if vpn_id is not None:
            pulumi.set(__self__, "vpn_id", vpn_id)

    @_builtins.property
    @pulumi.getter
    def boolean(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Type of grouping to be performed for tracker group
          - Choices: `and`, `or`
        """
        return pulumi.get(self, "boolean")

    @boolean.setter
    def boolean(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "boolean", value)

    @_builtins.property
    @pulumi.getter(name="booleanVariable")
    def boolean_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "boolean_variable")

    @boolean_variable.setter
    def boolean_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "boolean_variable", value)

    @_builtins.property
    @pulumi.getter(name="groupTracksIds")
    def group_tracks_ids(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['CiscoSystemFeatureTemplateObjectTrackerGroupTracksIdArgs']]]]:
        """
        Tracks id in group configuration
        """
        return pulumi.get(self, "group_tracks_ids")

    @group_tracks_ids.setter
    def group_tracks_ids(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['CiscoSystemFeatureTemplateObjectTrackerGroupTracksIdArgs']]]]):
        pulumi.set(self, "group_tracks_ids", value)

    @_builtins.property
    @pulumi.getter
    def interface(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        interface name
        """
        return pulumi.get(self, "interface")

    @interface.setter
    def interface(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "interface", value)

    @_builtins.property
    @pulumi.getter(name="interfaceVariable")
    def interface_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "interface_variable")

    @interface_variable.setter
    def interface_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "interface_variable", value)

    @_builtins.property
    @pulumi.getter
    def ip(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        IP address of route
        """
        return pulumi.get(self, "ip")

    @ip.setter
    def ip(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "ip", value)

    @_builtins.property
    @pulumi.getter(name="ipVariable")
    def ip_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "ip_variable")

    @ip_variable.setter
    def ip_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "ip_variable", value)

    @_builtins.property
    @pulumi.getter
    def mask(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Route Ip Mask
          - Default value: `0.0.0.0`
        """
        return pulumi.get(self, "mask")

    @mask.setter
    def mask(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "mask", value)

    @_builtins.property
    @pulumi.getter(name="maskVariable")
    def mask_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "mask_variable")

    @mask_variable.setter
    def mask_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "mask_variable", value)

    @_builtins.property
    @pulumi.getter(name="objectNumber")
    def object_number(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        Object tracker ID
          - Range: `1`-`1000`
        """
        return pulumi.get(self, "object_number")

    @object_number.setter
    def object_number(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "object_number", value)

    @_builtins.property
    @pulumi.getter(name="objectNumberVariable")
    def object_number_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "object_number_variable")

    @object_number_variable.setter
    def object_number_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "object_number_variable", value)

    @_builtins.property
    @pulumi.getter
    def optional(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Indicates if list item is considered optional.
        """
        return pulumi.get(self, "optional")

    @optional.setter
    def optional(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "optional", value)

    @_builtins.property
    @pulumi.getter
    def sig(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        service sig
        """
        return pulumi.get(self, "sig")

    @sig.setter
    def sig(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "sig", value)

    @_builtins.property
    @pulumi.getter(name="sigVariable")
    def sig_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "sig_variable")

    @sig_variable.setter
    def sig_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "sig_variable", value)

    @_builtins.property
    @pulumi.getter(name="vpnId")
    def vpn_id(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        VPN
          - Range: `0`-`65527`
          - Default value: `0`
        """
        return pulumi.get(self, "vpn_id")

    @vpn_id.setter
    def vpn_id(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "vpn_id", value)


if not MYPY:
    class CiscoSystemFeatureTemplateObjectTrackerGroupTracksIdArgsDict(TypedDict):
        optional: NotRequired[pulumi.Input[_builtins.bool]]
        """
        Indicates if list item is considered optional.
        """
        track_id: NotRequired[pulumi.Input[_builtins.int]]
        """
        Track id
          - Range: `1`-`1000`
        """
        track_id_variable: NotRequired[pulumi.Input[_builtins.str]]
        """
        Variable name
        """
elif False:
    CiscoSystemFeatureTemplateObjectTrackerGroupTracksIdArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class CiscoSystemFeatureTemplateObjectTrackerGroupTracksIdArgs:
    def __init__(__self__, *,
                 optional: Optional[pulumi.Input[_builtins.bool]] = None,
                 track_id: Optional[pulumi.Input[_builtins.int]] = None,
                 track_id_variable: Optional[pulumi.Input[_builtins.str]] = None):
        """
        :param pulumi.Input[_builtins.bool] optional: Indicates if list item is considered optional.
        :param pulumi.Input[_builtins.int] track_id: Track id
                 - Range: `1`-`1000`
        :param pulumi.Input[_builtins.str] track_id_variable: Variable name
        """
        if optional is not None:
            pulumi.set(__self__, "optional", optional)
        if track_id is not None:
            pulumi.set(__self__, "track_id", track_id)
        if track_id_variable is not None:
            pulumi.set(__self__, "track_id_variable", track_id_variable)

    @_builtins.property
    @pulumi.getter
    def optional(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Indicates if list item is considered optional.
        """
        return pulumi.get(self, "optional")

    @optional.setter
    def optional(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "optional", value)

    @_builtins.property
    @pulumi.getter(name="trackId")
    def track_id(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        Track id
          - Range: `1`-`1000`
        """
        return pulumi.get(self, "track_id")

    @track_id.setter
    def track_id(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "track_id", value)

    @_builtins.property
    @pulumi.getter(name="trackIdVariable")
    def track_id_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "track_id_variable")

    @track_id_variable.setter
    def track_id_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "track_id_variable", value)


if not MYPY:
    class CiscoSystemFeatureTemplateTrackerArgsDict(TypedDict):
        boolean: NotRequired[pulumi.Input[_builtins.str]]
        """
        Type of grouping to be performed for tracker group
          - Choices: `or`, `and`
          - Default value: `or`
        """
        boolean_variable: NotRequired[pulumi.Input[_builtins.str]]
        """
        Variable name
        """
        elements: NotRequired[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]
        """
        Tracker member names separated by space
        """
        elements_variable: NotRequired[pulumi.Input[_builtins.str]]
        """
        Variable name
        """
        endpoint_api_url: NotRequired[pulumi.Input[_builtins.str]]
        """
        API url of endpoint
        """
        endpoint_api_url_variable: NotRequired[pulumi.Input[_builtins.str]]
        """
        Variable name
        """
        endpoint_dns_name: NotRequired[pulumi.Input[_builtins.str]]
        """
        DNS name of endpoint
        """
        endpoint_dns_name_variable: NotRequired[pulumi.Input[_builtins.str]]
        """
        Variable name
        """
        endpoint_ip: NotRequired[pulumi.Input[_builtins.str]]
        """
        IP address of endpoint
        """
        endpoint_ip_variable: NotRequired[pulumi.Input[_builtins.str]]
        """
        Variable name
        """
        interval: NotRequired[pulumi.Input[_builtins.int]]
        """
        Probe interval <10..600> seconds
          - Range: `20`-`600`
          - Default value: `60`
        """
        interval_variable: NotRequired[pulumi.Input[_builtins.str]]
        """
        Variable name
        """
        multiplier: NotRequired[pulumi.Input[_builtins.int]]
        """
        Probe failure multiplier <1..10> failed attempts
          - Range: `1`-`10`
          - Default value: `3`
        """
        multiplier_variable: NotRequired[pulumi.Input[_builtins.str]]
        """
        Variable name
        """
        name: NotRequired[pulumi.Input[_builtins.str]]
        """
        Tracker name
        """
        name_variable: NotRequired[pulumi.Input[_builtins.str]]
        """
        Variable name
        """
        optional: NotRequired[pulumi.Input[_builtins.bool]]
        """
        Indicates if list item is considered optional.
        """
        threshold: NotRequired[pulumi.Input[_builtins.int]]
        """
        Probe Timeout threshold <100..1000> milliseconds
          - Range: `100`-`1000`
          - Default value: `300`
        """
        threshold_variable: NotRequired[pulumi.Input[_builtins.str]]
        """
        Variable name
        """
        type: NotRequired[pulumi.Input[_builtins.str]]
        """
        Default(Interface)
          - Choices: `tracker-group`, `interface`, `static-route`
          - Default value: `interface`
        """
        type_variable: NotRequired[pulumi.Input[_builtins.str]]
        """
        Variable name
        """
elif False:
    CiscoSystemFeatureTemplateTrackerArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class CiscoSystemFeatureTemplateTrackerArgs:
    def __init__(__self__, *,
                 boolean: Optional[pulumi.Input[_builtins.str]] = None,
                 boolean_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 elements: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 elements_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 endpoint_api_url: Optional[pulumi.Input[_builtins.str]] = None,
                 endpoint_api_url_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 endpoint_dns_name: Optional[pulumi.Input[_builtins.str]] = None,
                 endpoint_dns_name_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 endpoint_ip: Optional[pulumi.Input[_builtins.str]] = None,
                 endpoint_ip_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 interval: Optional[pulumi.Input[_builtins.int]] = None,
                 interval_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 multiplier: Optional[pulumi.Input[_builtins.int]] = None,
                 multiplier_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 name_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 optional: Optional[pulumi.Input[_builtins.bool]] = None,
                 threshold: Optional[pulumi.Input[_builtins.int]] = None,
                 threshold_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 type: Optional[pulumi.Input[_builtins.str]] = None,
                 type_variable: Optional[pulumi.Input[_builtins.str]] = None):
        """
        :param pulumi.Input[_builtins.str] boolean: Type of grouping to be performed for tracker group
                 - Choices: `or`, `and`
                 - Default value: `or`
        :param pulumi.Input[_builtins.str] boolean_variable: Variable name
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] elements: Tracker member names separated by space
        :param pulumi.Input[_builtins.str] elements_variable: Variable name
        :param pulumi.Input[_builtins.str] endpoint_api_url: API url of endpoint
        :param pulumi.Input[_builtins.str] endpoint_api_url_variable: Variable name
        :param pulumi.Input[_builtins.str] endpoint_dns_name: DNS name of endpoint
        :param pulumi.Input[_builtins.str] endpoint_dns_name_variable: Variable name
        :param pulumi.Input[_builtins.str] endpoint_ip: IP address of endpoint
        :param pulumi.Input[_builtins.str] endpoint_ip_variable: Variable name
        :param pulumi.Input[_builtins.int] interval: Probe interval <10..600> seconds
                 - Range: `20`-`600`
                 - Default value: `60`
        :param pulumi.Input[_builtins.str] interval_variable: Variable name
        :param pulumi.Input[_builtins.int] multiplier: Probe failure multiplier <1..10> failed attempts
                 - Range: `1`-`10`
                 - Default value: `3`
        :param pulumi.Input[_builtins.str] multiplier_variable: Variable name
        :param pulumi.Input[_builtins.str] name: Tracker name
        :param pulumi.Input[_builtins.str] name_variable: Variable name
        :param pulumi.Input[_builtins.bool] optional: Indicates if list item is considered optional.
        :param pulumi.Input[_builtins.int] threshold: Probe Timeout threshold <100..1000> milliseconds
                 - Range: `100`-`1000`
                 - Default value: `300`
        :param pulumi.Input[_builtins.str] threshold_variable: Variable name
        :param pulumi.Input[_builtins.str] type: Default(Interface)
                 - Choices: `tracker-group`, `interface`, `static-route`
                 - Default value: `interface`
        :param pulumi.Input[_builtins.str] type_variable: Variable name
        """
        if boolean is not None:
            pulumi.set(__self__, "boolean", boolean)
        if boolean_variable is not None:
            pulumi.set(__self__, "boolean_variable", boolean_variable)
        if elements is not None:
            pulumi.set(__self__, "elements", elements)
        if elements_variable is not None:
            pulumi.set(__self__, "elements_variable", elements_variable)
        if endpoint_api_url is not None:
            pulumi.set(__self__, "endpoint_api_url", endpoint_api_url)
        if endpoint_api_url_variable is not None:
            pulumi.set(__self__, "endpoint_api_url_variable", endpoint_api_url_variable)
        if endpoint_dns_name is not None:
            pulumi.set(__self__, "endpoint_dns_name", endpoint_dns_name)
        if endpoint_dns_name_variable is not None:
            pulumi.set(__self__, "endpoint_dns_name_variable", endpoint_dns_name_variable)
        if endpoint_ip is not None:
            pulumi.set(__self__, "endpoint_ip", endpoint_ip)
        if endpoint_ip_variable is not None:
            pulumi.set(__self__, "endpoint_ip_variable", endpoint_ip_variable)
        if interval is not None:
            pulumi.set(__self__, "interval", interval)
        if interval_variable is not None:
            pulumi.set(__self__, "interval_variable", interval_variable)
        if multiplier is not None:
            pulumi.set(__self__, "multiplier", multiplier)
        if multiplier_variable is not None:
            pulumi.set(__self__, "multiplier_variable", multiplier_variable)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if name_variable is not None:
            pulumi.set(__self__, "name_variable", name_variable)
        if optional is not None:
            pulumi.set(__self__, "optional", optional)
        if threshold is not None:
            pulumi.set(__self__, "threshold", threshold)
        if threshold_variable is not None:
            pulumi.set(__self__, "threshold_variable", threshold_variable)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if type_variable is not None:
            pulumi.set(__self__, "type_variable", type_variable)

    @_builtins.property
    @pulumi.getter
    def boolean(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Type of grouping to be performed for tracker group
          - Choices: `or`, `and`
          - Default value: `or`
        """
        return pulumi.get(self, "boolean")

    @boolean.setter
    def boolean(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "boolean", value)

    @_builtins.property
    @pulumi.getter(name="booleanVariable")
    def boolean_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "boolean_variable")

    @boolean_variable.setter
    def boolean_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "boolean_variable", value)

    @_builtins.property
    @pulumi.getter
    def elements(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]:
        """
        Tracker member names separated by space
        """
        return pulumi.get(self, "elements")

    @elements.setter
    def elements(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "elements", value)

    @_builtins.property
    @pulumi.getter(name="elementsVariable")
    def elements_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "elements_variable")

    @elements_variable.setter
    def elements_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "elements_variable", value)

    @_builtins.property
    @pulumi.getter(name="endpointApiUrl")
    def endpoint_api_url(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        API url of endpoint
        """
        return pulumi.get(self, "endpoint_api_url")

    @endpoint_api_url.setter
    def endpoint_api_url(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "endpoint_api_url", value)

    @_builtins.property
    @pulumi.getter(name="endpointApiUrlVariable")
    def endpoint_api_url_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "endpoint_api_url_variable")

    @endpoint_api_url_variable.setter
    def endpoint_api_url_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "endpoint_api_url_variable", value)

    @_builtins.property
    @pulumi.getter(name="endpointDnsName")
    def endpoint_dns_name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        DNS name of endpoint
        """
        return pulumi.get(self, "endpoint_dns_name")

    @endpoint_dns_name.setter
    def endpoint_dns_name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "endpoint_dns_name", value)

    @_builtins.property
    @pulumi.getter(name="endpointDnsNameVariable")
    def endpoint_dns_name_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "endpoint_dns_name_variable")

    @endpoint_dns_name_variable.setter
    def endpoint_dns_name_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "endpoint_dns_name_variable", value)

    @_builtins.property
    @pulumi.getter(name="endpointIp")
    def endpoint_ip(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        IP address of endpoint
        """
        return pulumi.get(self, "endpoint_ip")

    @endpoint_ip.setter
    def endpoint_ip(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "endpoint_ip", value)

    @_builtins.property
    @pulumi.getter(name="endpointIpVariable")
    def endpoint_ip_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "endpoint_ip_variable")

    @endpoint_ip_variable.setter
    def endpoint_ip_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "endpoint_ip_variable", value)

    @_builtins.property
    @pulumi.getter
    def interval(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        Probe interval <10..600> seconds
          - Range: `20`-`600`
          - Default value: `60`
        """
        return pulumi.get(self, "interval")

    @interval.setter
    def interval(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "interval", value)

    @_builtins.property
    @pulumi.getter(name="intervalVariable")
    def interval_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "interval_variable")

    @interval_variable.setter
    def interval_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "interval_variable", value)

    @_builtins.property
    @pulumi.getter
    def multiplier(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        Probe failure multiplier <1..10> failed attempts
          - Range: `1`-`10`
          - Default value: `3`
        """
        return pulumi.get(self, "multiplier")

    @multiplier.setter
    def multiplier(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "multiplier", value)

    @_builtins.property
    @pulumi.getter(name="multiplierVariable")
    def multiplier_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "multiplier_variable")

    @multiplier_variable.setter
    def multiplier_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "multiplier_variable", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Tracker name
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "name", value)

    @_builtins.property
    @pulumi.getter(name="nameVariable")
    def name_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "name_variable")

    @name_variable.setter
    def name_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "name_variable", value)

    @_builtins.property
    @pulumi.getter
    def optional(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Indicates if list item is considered optional.
        """
        return pulumi.get(self, "optional")

    @optional.setter
    def optional(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "optional", value)

    @_builtins.property
    @pulumi.getter
    def threshold(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        Probe Timeout threshold <100..1000> milliseconds
          - Range: `100`-`1000`
          - Default value: `300`
        """
        return pulumi.get(self, "threshold")

    @threshold.setter
    def threshold(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "threshold", value)

    @_builtins.property
    @pulumi.getter(name="thresholdVariable")
    def threshold_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "threshold_variable")

    @threshold_variable.setter
    def threshold_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "threshold_variable", value)

    @_builtins.property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Default(Interface)
          - Choices: `tracker-group`, `interface`, `static-route`
          - Default value: `interface`
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "type", value)

    @_builtins.property
    @pulumi.getter(name="typeVariable")
    def type_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "type_variable")

    @type_variable.setter
    def type_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "type_variable", value)


if not MYPY:
    class CiscoThousandeyesFeatureTemplateVirtualApplicationArgsDict(TypedDict):
        application_type: NotRequired[pulumi.Input[_builtins.str]]
        """
        List of Virtual applications
          - Default value: `te`
        """
        instance_id: NotRequired[pulumi.Input[_builtins.str]]
        """
        List of Virtual applications
          - Default value: `1`
        """
        optional: NotRequired[pulumi.Input[_builtins.bool]]
        """
        Indicates if list item is considered optional.
        """
        te_account_group_token: NotRequired[pulumi.Input[_builtins.str]]
        """
        Set the Account Group Token
        """
        te_account_group_token_variable: NotRequired[pulumi.Input[_builtins.str]]
        """
        Variable name
        """
        te_agent_ip: NotRequired[pulumi.Input[_builtins.str]]
        """
        Set the Agent IP Address
        """
        te_agent_ip_variable: NotRequired[pulumi.Input[_builtins.str]]
        """
        Variable name
        """
        te_default_gateway: NotRequired[pulumi.Input[_builtins.str]]
        """
        Set the Agent default gateway
        """
        te_default_gateway_variable: NotRequired[pulumi.Input[_builtins.str]]
        """
        Variable name
        """
        te_hostname: NotRequired[pulumi.Input[_builtins.str]]
        """
        Set the host name
        """
        te_hostname_variable: NotRequired[pulumi.Input[_builtins.str]]
        """
        Variable name
        """
        te_name_server: NotRequired[pulumi.Input[_builtins.str]]
        """
        Set the name server
        """
        te_name_server_variable: NotRequired[pulumi.Input[_builtins.str]]
        """
        Variable name
        """
        te_pac_url: NotRequired[pulumi.Input[_builtins.str]]
        """
        PAC URL
        """
        te_pac_url_variable: NotRequired[pulumi.Input[_builtins.str]]
        """
        Variable name
        """
        te_proxy_host: NotRequired[pulumi.Input[_builtins.str]]
        """
        Set the proxy host
        """
        te_proxy_host_variable: NotRequired[pulumi.Input[_builtins.str]]
        """
        Variable name
        """
        te_proxy_port: NotRequired[pulumi.Input[_builtins.int]]
        """
        Set the proxy port
          - Range: `0`-`65535`
        """
        te_proxy_port_variable: NotRequired[pulumi.Input[_builtins.str]]
        """
        Variable name
        """
        te_vpn: NotRequired[pulumi.Input[_builtins.int]]
        """
        VPN number
          - Range: `1`-`65535`
        """
        te_vpn_variable: NotRequired[pulumi.Input[_builtins.str]]
        """
        Variable name
        """
        te_web_proxy_type: NotRequired[pulumi.Input[_builtins.str]]
        """
        Web Proxy Type
          - Choices: `none`, `static`, `pac`
          - Default value: `none`
        """
elif False:
    CiscoThousandeyesFeatureTemplateVirtualApplicationArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class CiscoThousandeyesFeatureTemplateVirtualApplicationArgs:
    def __init__(__self__, *,
                 application_type: Optional[pulumi.Input[_builtins.str]] = None,
                 instance_id: Optional[pulumi.Input[_builtins.str]] = None,
                 optional: Optional[pulumi.Input[_builtins.bool]] = None,
                 te_account_group_token: Optional[pulumi.Input[_builtins.str]] = None,
                 te_account_group_token_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 te_agent_ip: Optional[pulumi.Input[_builtins.str]] = None,
                 te_agent_ip_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 te_default_gateway: Optional[pulumi.Input[_builtins.str]] = None,
                 te_default_gateway_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 te_hostname: Optional[pulumi.Input[_builtins.str]] = None,
                 te_hostname_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 te_name_server: Optional[pulumi.Input[_builtins.str]] = None,
                 te_name_server_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 te_pac_url: Optional[pulumi.Input[_builtins.str]] = None,
                 te_pac_url_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 te_proxy_host: Optional[pulumi.Input[_builtins.str]] = None,
                 te_proxy_host_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 te_proxy_port: Optional[pulumi.Input[_builtins.int]] = None,
                 te_proxy_port_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 te_vpn: Optional[pulumi.Input[_builtins.int]] = None,
                 te_vpn_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 te_web_proxy_type: Optional[pulumi.Input[_builtins.str]] = None):
        """
        :param pulumi.Input[_builtins.str] application_type: List of Virtual applications
                 - Default value: `te`
        :param pulumi.Input[_builtins.str] instance_id: List of Virtual applications
                 - Default value: `1`
        :param pulumi.Input[_builtins.bool] optional: Indicates if list item is considered optional.
        :param pulumi.Input[_builtins.str] te_account_group_token: Set the Account Group Token
        :param pulumi.Input[_builtins.str] te_account_group_token_variable: Variable name
        :param pulumi.Input[_builtins.str] te_agent_ip: Set the Agent IP Address
        :param pulumi.Input[_builtins.str] te_agent_ip_variable: Variable name
        :param pulumi.Input[_builtins.str] te_default_gateway: Set the Agent default gateway
        :param pulumi.Input[_builtins.str] te_default_gateway_variable: Variable name
        :param pulumi.Input[_builtins.str] te_hostname: Set the host name
        :param pulumi.Input[_builtins.str] te_hostname_variable: Variable name
        :param pulumi.Input[_builtins.str] te_name_server: Set the name server
        :param pulumi.Input[_builtins.str] te_name_server_variable: Variable name
        :param pulumi.Input[_builtins.str] te_pac_url: PAC URL
        :param pulumi.Input[_builtins.str] te_pac_url_variable: Variable name
        :param pulumi.Input[_builtins.str] te_proxy_host: Set the proxy host
        :param pulumi.Input[_builtins.str] te_proxy_host_variable: Variable name
        :param pulumi.Input[_builtins.int] te_proxy_port: Set the proxy port
                 - Range: `0`-`65535`
        :param pulumi.Input[_builtins.str] te_proxy_port_variable: Variable name
        :param pulumi.Input[_builtins.int] te_vpn: VPN number
                 - Range: `1`-`65535`
        :param pulumi.Input[_builtins.str] te_vpn_variable: Variable name
        :param pulumi.Input[_builtins.str] te_web_proxy_type: Web Proxy Type
                 - Choices: `none`, `static`, `pac`
                 - Default value: `none`
        """
        if application_type is not None:
            pulumi.set(__self__, "application_type", application_type)
        if instance_id is not None:
            pulumi.set(__self__, "instance_id", instance_id)
        if optional is not None:
            pulumi.set(__self__, "optional", optional)
        if te_account_group_token is not None:
            pulumi.set(__self__, "te_account_group_token", te_account_group_token)
        if te_account_group_token_variable is not None:
            pulumi.set(__self__, "te_account_group_token_variable", te_account_group_token_variable)
        if te_agent_ip is not None:
            pulumi.set(__self__, "te_agent_ip", te_agent_ip)
        if te_agent_ip_variable is not None:
            pulumi.set(__self__, "te_agent_ip_variable", te_agent_ip_variable)
        if te_default_gateway is not None:
            pulumi.set(__self__, "te_default_gateway", te_default_gateway)
        if te_default_gateway_variable is not None:
            pulumi.set(__self__, "te_default_gateway_variable", te_default_gateway_variable)
        if te_hostname is not None:
            pulumi.set(__self__, "te_hostname", te_hostname)
        if te_hostname_variable is not None:
            pulumi.set(__self__, "te_hostname_variable", te_hostname_variable)
        if te_name_server is not None:
            pulumi.set(__self__, "te_name_server", te_name_server)
        if te_name_server_variable is not None:
            pulumi.set(__self__, "te_name_server_variable", te_name_server_variable)
        if te_pac_url is not None:
            pulumi.set(__self__, "te_pac_url", te_pac_url)
        if te_pac_url_variable is not None:
            pulumi.set(__self__, "te_pac_url_variable", te_pac_url_variable)
        if te_proxy_host is not None:
            pulumi.set(__self__, "te_proxy_host", te_proxy_host)
        if te_proxy_host_variable is not None:
            pulumi.set(__self__, "te_proxy_host_variable", te_proxy_host_variable)
        if te_proxy_port is not None:
            pulumi.set(__self__, "te_proxy_port", te_proxy_port)
        if te_proxy_port_variable is not None:
            pulumi.set(__self__, "te_proxy_port_variable", te_proxy_port_variable)
        if te_vpn is not None:
            pulumi.set(__self__, "te_vpn", te_vpn)
        if te_vpn_variable is not None:
            pulumi.set(__self__, "te_vpn_variable", te_vpn_variable)
        if te_web_proxy_type is not None:
            pulumi.set(__self__, "te_web_proxy_type", te_web_proxy_type)

    @_builtins.property
    @pulumi.getter(name="applicationType")
    def application_type(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        List of Virtual applications
          - Default value: `te`
        """
        return pulumi.get(self, "application_type")

    @application_type.setter
    def application_type(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "application_type", value)

    @_builtins.property
    @pulumi.getter(name="instanceId")
    def instance_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        List of Virtual applications
          - Default value: `1`
        """
        return pulumi.get(self, "instance_id")

    @instance_id.setter
    def instance_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "instance_id", value)

    @_builtins.property
    @pulumi.getter
    def optional(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Indicates if list item is considered optional.
        """
        return pulumi.get(self, "optional")

    @optional.setter
    def optional(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "optional", value)

    @_builtins.property
    @pulumi.getter(name="teAccountGroupToken")
    def te_account_group_token(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Set the Account Group Token
        """
        return pulumi.get(self, "te_account_group_token")

    @te_account_group_token.setter
    def te_account_group_token(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "te_account_group_token", value)

    @_builtins.property
    @pulumi.getter(name="teAccountGroupTokenVariable")
    def te_account_group_token_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "te_account_group_token_variable")

    @te_account_group_token_variable.setter
    def te_account_group_token_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "te_account_group_token_variable", value)

    @_builtins.property
    @pulumi.getter(name="teAgentIp")
    def te_agent_ip(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Set the Agent IP Address
        """
        return pulumi.get(self, "te_agent_ip")

    @te_agent_ip.setter
    def te_agent_ip(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "te_agent_ip", value)

    @_builtins.property
    @pulumi.getter(name="teAgentIpVariable")
    def te_agent_ip_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "te_agent_ip_variable")

    @te_agent_ip_variable.setter
    def te_agent_ip_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "te_agent_ip_variable", value)

    @_builtins.property
    @pulumi.getter(name="teDefaultGateway")
    def te_default_gateway(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Set the Agent default gateway
        """
        return pulumi.get(self, "te_default_gateway")

    @te_default_gateway.setter
    def te_default_gateway(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "te_default_gateway", value)

    @_builtins.property
    @pulumi.getter(name="teDefaultGatewayVariable")
    def te_default_gateway_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "te_default_gateway_variable")

    @te_default_gateway_variable.setter
    def te_default_gateway_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "te_default_gateway_variable", value)

    @_builtins.property
    @pulumi.getter(name="teHostname")
    def te_hostname(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Set the host name
        """
        return pulumi.get(self, "te_hostname")

    @te_hostname.setter
    def te_hostname(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "te_hostname", value)

    @_builtins.property
    @pulumi.getter(name="teHostnameVariable")
    def te_hostname_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "te_hostname_variable")

    @te_hostname_variable.setter
    def te_hostname_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "te_hostname_variable", value)

    @_builtins.property
    @pulumi.getter(name="teNameServer")
    def te_name_server(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Set the name server
        """
        return pulumi.get(self, "te_name_server")

    @te_name_server.setter
    def te_name_server(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "te_name_server", value)

    @_builtins.property
    @pulumi.getter(name="teNameServerVariable")
    def te_name_server_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "te_name_server_variable")

    @te_name_server_variable.setter
    def te_name_server_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "te_name_server_variable", value)

    @_builtins.property
    @pulumi.getter(name="tePacUrl")
    def te_pac_url(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        PAC URL
        """
        return pulumi.get(self, "te_pac_url")

    @te_pac_url.setter
    def te_pac_url(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "te_pac_url", value)

    @_builtins.property
    @pulumi.getter(name="tePacUrlVariable")
    def te_pac_url_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "te_pac_url_variable")

    @te_pac_url_variable.setter
    def te_pac_url_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "te_pac_url_variable", value)

    @_builtins.property
    @pulumi.getter(name="teProxyHost")
    def te_proxy_host(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Set the proxy host
        """
        return pulumi.get(self, "te_proxy_host")

    @te_proxy_host.setter
    def te_proxy_host(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "te_proxy_host", value)

    @_builtins.property
    @pulumi.getter(name="teProxyHostVariable")
    def te_proxy_host_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "te_proxy_host_variable")

    @te_proxy_host_variable.setter
    def te_proxy_host_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "te_proxy_host_variable", value)

    @_builtins.property
    @pulumi.getter(name="teProxyPort")
    def te_proxy_port(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        Set the proxy port
          - Range: `0`-`65535`
        """
        return pulumi.get(self, "te_proxy_port")

    @te_proxy_port.setter
    def te_proxy_port(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "te_proxy_port", value)

    @_builtins.property
    @pulumi.getter(name="teProxyPortVariable")
    def te_proxy_port_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "te_proxy_port_variable")

    @te_proxy_port_variable.setter
    def te_proxy_port_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "te_proxy_port_variable", value)

    @_builtins.property
    @pulumi.getter(name="teVpn")
    def te_vpn(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        VPN number
          - Range: `1`-`65535`
        """
        return pulumi.get(self, "te_vpn")

    @te_vpn.setter
    def te_vpn(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "te_vpn", value)

    @_builtins.property
    @pulumi.getter(name="teVpnVariable")
    def te_vpn_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "te_vpn_variable")

    @te_vpn_variable.setter
    def te_vpn_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "te_vpn_variable", value)

    @_builtins.property
    @pulumi.getter(name="teWebProxyType")
    def te_web_proxy_type(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Web Proxy Type
          - Choices: `none`, `static`, `pac`
          - Default value: `none`
        """
        return pulumi.get(self, "te_web_proxy_type")

    @te_web_proxy_type.setter
    def te_web_proxy_type(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "te_web_proxy_type", value)


if not MYPY:
    class CiscoTrustsecFeatureTemplateSxpConnectionArgsDict(TypedDict):
        maximum_hold_time: NotRequired[pulumi.Input[_builtins.int]]
        """
        Configure Connection Maximum hold time <0..65535>
          - Range: `0`-`65535`
          - Default value: `0`
        """
        maximum_hold_time_variable: NotRequired[pulumi.Input[_builtins.str]]
        """
        Variable name
        """
        minimum_hold_time: NotRequired[pulumi.Input[_builtins.int]]
        """
        Configure Connection Minimum hold time <0..65535>
          - Range: `0`-`65535`
          - Default value: `0`
        """
        minimum_hold_time_variable: NotRequired[pulumi.Input[_builtins.str]]
        """
        Variable name
        """
        mode: NotRequired[pulumi.Input[_builtins.str]]
        """
        Define Mode of connection
          - Choices: `local`, `peer`
          - Default value: `local`
        """
        mode_type: NotRequired[pulumi.Input[_builtins.str]]
        """
        Define Role of a device <speaker/listener/both>
          - Choices: `listener`, `speaker`, `both`
          - Default value: `speaker`
        """
        optional: NotRequired[pulumi.Input[_builtins.bool]]
        """
        Indicates if list item is considered optional.
        """
        peer_ip: NotRequired[pulumi.Input[_builtins.str]]
        """
        Configure SXP Peer IP address (IPv4)
        """
        preshared_key: NotRequired[pulumi.Input[_builtins.str]]
        """
        Define Preshared Key type
          - Choices: `default`, `key-chain`, `none`
          - Default value: `none`
        """
        source_ip: NotRequired[pulumi.Input[_builtins.str]]
        """
        Configure SXP Source IP address (IPv4)
        """
        source_ip_variable: NotRequired[pulumi.Input[_builtins.str]]
        """
        Variable name
        """
        vpn_id: NotRequired[pulumi.Input[_builtins.int]]
        """
        Configure Connection VPN (VRF) ID
          - Range: `0`-`65527`
          - Default value: `0`
        """
        vpn_id_variable: NotRequired[pulumi.Input[_builtins.str]]
        """
        Variable name
        """
elif False:
    CiscoTrustsecFeatureTemplateSxpConnectionArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class CiscoTrustsecFeatureTemplateSxpConnectionArgs:
    def __init__(__self__, *,
                 maximum_hold_time: Optional[pulumi.Input[_builtins.int]] = None,
                 maximum_hold_time_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 minimum_hold_time: Optional[pulumi.Input[_builtins.int]] = None,
                 minimum_hold_time_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 mode: Optional[pulumi.Input[_builtins.str]] = None,
                 mode_type: Optional[pulumi.Input[_builtins.str]] = None,
                 optional: Optional[pulumi.Input[_builtins.bool]] = None,
                 peer_ip: Optional[pulumi.Input[_builtins.str]] = None,
                 preshared_key: Optional[pulumi.Input[_builtins.str]] = None,
                 source_ip: Optional[pulumi.Input[_builtins.str]] = None,
                 source_ip_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 vpn_id: Optional[pulumi.Input[_builtins.int]] = None,
                 vpn_id_variable: Optional[pulumi.Input[_builtins.str]] = None):
        """
        :param pulumi.Input[_builtins.int] maximum_hold_time: Configure Connection Maximum hold time <0..65535>
                 - Range: `0`-`65535`
                 - Default value: `0`
        :param pulumi.Input[_builtins.str] maximum_hold_time_variable: Variable name
        :param pulumi.Input[_builtins.int] minimum_hold_time: Configure Connection Minimum hold time <0..65535>
                 - Range: `0`-`65535`
                 - Default value: `0`
        :param pulumi.Input[_builtins.str] minimum_hold_time_variable: Variable name
        :param pulumi.Input[_builtins.str] mode: Define Mode of connection
                 - Choices: `local`, `peer`
                 - Default value: `local`
        :param pulumi.Input[_builtins.str] mode_type: Define Role of a device <speaker/listener/both>
                 - Choices: `listener`, `speaker`, `both`
                 - Default value: `speaker`
        :param pulumi.Input[_builtins.bool] optional: Indicates if list item is considered optional.
        :param pulumi.Input[_builtins.str] peer_ip: Configure SXP Peer IP address (IPv4)
        :param pulumi.Input[_builtins.str] preshared_key: Define Preshared Key type
                 - Choices: `default`, `key-chain`, `none`
                 - Default value: `none`
        :param pulumi.Input[_builtins.str] source_ip: Configure SXP Source IP address (IPv4)
        :param pulumi.Input[_builtins.str] source_ip_variable: Variable name
        :param pulumi.Input[_builtins.int] vpn_id: Configure Connection VPN (VRF) ID
                 - Range: `0`-`65527`
                 - Default value: `0`
        :param pulumi.Input[_builtins.str] vpn_id_variable: Variable name
        """
        if maximum_hold_time is not None:
            pulumi.set(__self__, "maximum_hold_time", maximum_hold_time)
        if maximum_hold_time_variable is not None:
            pulumi.set(__self__, "maximum_hold_time_variable", maximum_hold_time_variable)
        if minimum_hold_time is not None:
            pulumi.set(__self__, "minimum_hold_time", minimum_hold_time)
        if minimum_hold_time_variable is not None:
            pulumi.set(__self__, "minimum_hold_time_variable", minimum_hold_time_variable)
        if mode is not None:
            pulumi.set(__self__, "mode", mode)
        if mode_type is not None:
            pulumi.set(__self__, "mode_type", mode_type)
        if optional is not None:
            pulumi.set(__self__, "optional", optional)
        if peer_ip is not None:
            pulumi.set(__self__, "peer_ip", peer_ip)
        if preshared_key is not None:
            pulumi.set(__self__, "preshared_key", preshared_key)
        if source_ip is not None:
            pulumi.set(__self__, "source_ip", source_ip)
        if source_ip_variable is not None:
            pulumi.set(__self__, "source_ip_variable", source_ip_variable)
        if vpn_id is not None:
            pulumi.set(__self__, "vpn_id", vpn_id)
        if vpn_id_variable is not None:
            pulumi.set(__self__, "vpn_id_variable", vpn_id_variable)

    @_builtins.property
    @pulumi.getter(name="maximumHoldTime")
    def maximum_hold_time(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        Configure Connection Maximum hold time <0..65535>
          - Range: `0`-`65535`
          - Default value: `0`
        """
        return pulumi.get(self, "maximum_hold_time")

    @maximum_hold_time.setter
    def maximum_hold_time(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "maximum_hold_time", value)

    @_builtins.property
    @pulumi.getter(name="maximumHoldTimeVariable")
    def maximum_hold_time_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "maximum_hold_time_variable")

    @maximum_hold_time_variable.setter
    def maximum_hold_time_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "maximum_hold_time_variable", value)

    @_builtins.property
    @pulumi.getter(name="minimumHoldTime")
    def minimum_hold_time(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        Configure Connection Minimum hold time <0..65535>
          - Range: `0`-`65535`
          - Default value: `0`
        """
        return pulumi.get(self, "minimum_hold_time")

    @minimum_hold_time.setter
    def minimum_hold_time(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "minimum_hold_time", value)

    @_builtins.property
    @pulumi.getter(name="minimumHoldTimeVariable")
    def minimum_hold_time_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "minimum_hold_time_variable")

    @minimum_hold_time_variable.setter
    def minimum_hold_time_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "minimum_hold_time_variable", value)

    @_builtins.property
    @pulumi.getter
    def mode(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Define Mode of connection
          - Choices: `local`, `peer`
          - Default value: `local`
        """
        return pulumi.get(self, "mode")

    @mode.setter
    def mode(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "mode", value)

    @_builtins.property
    @pulumi.getter(name="modeType")
    def mode_type(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Define Role of a device <speaker/listener/both>
          - Choices: `listener`, `speaker`, `both`
          - Default value: `speaker`
        """
        return pulumi.get(self, "mode_type")

    @mode_type.setter
    def mode_type(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "mode_type", value)

    @_builtins.property
    @pulumi.getter
    def optional(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Indicates if list item is considered optional.
        """
        return pulumi.get(self, "optional")

    @optional.setter
    def optional(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "optional", value)

    @_builtins.property
    @pulumi.getter(name="peerIp")
    def peer_ip(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Configure SXP Peer IP address (IPv4)
        """
        return pulumi.get(self, "peer_ip")

    @peer_ip.setter
    def peer_ip(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "peer_ip", value)

    @_builtins.property
    @pulumi.getter(name="presharedKey")
    def preshared_key(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Define Preshared Key type
          - Choices: `default`, `key-chain`, `none`
          - Default value: `none`
        """
        return pulumi.get(self, "preshared_key")

    @preshared_key.setter
    def preshared_key(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "preshared_key", value)

    @_builtins.property
    @pulumi.getter(name="sourceIp")
    def source_ip(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Configure SXP Source IP address (IPv4)
        """
        return pulumi.get(self, "source_ip")

    @source_ip.setter
    def source_ip(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "source_ip", value)

    @_builtins.property
    @pulumi.getter(name="sourceIpVariable")
    def source_ip_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "source_ip_variable")

    @source_ip_variable.setter
    def source_ip_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "source_ip_variable", value)

    @_builtins.property
    @pulumi.getter(name="vpnId")
    def vpn_id(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        Configure Connection VPN (VRF) ID
          - Range: `0`-`65527`
          - Default value: `0`
        """
        return pulumi.get(self, "vpn_id")

    @vpn_id.setter
    def vpn_id(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "vpn_id", value)

    @_builtins.property
    @pulumi.getter(name="vpnIdVariable")
    def vpn_id_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "vpn_id_variable")

    @vpn_id_variable.setter
    def vpn_id_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "vpn_id_variable", value)


if not MYPY:
    class CiscoVpnFeatureTemplateDnsHostArgsDict(TypedDict):
        hostname: NotRequired[pulumi.Input[_builtins.str]]
        """
        Hostname
        """
        hostname_variable: NotRequired[pulumi.Input[_builtins.str]]
        """
        Variable name
        """
        ip_variable: NotRequired[pulumi.Input[_builtins.str]]
        """
        Variable name
        """
        ips: NotRequired[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]
        """
        List of IP
        """
        optional: NotRequired[pulumi.Input[_builtins.bool]]
        """
        Indicates if list item is considered optional.
        """
elif False:
    CiscoVpnFeatureTemplateDnsHostArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class CiscoVpnFeatureTemplateDnsHostArgs:
    def __init__(__self__, *,
                 hostname: Optional[pulumi.Input[_builtins.str]] = None,
                 hostname_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 ip_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 ips: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 optional: Optional[pulumi.Input[_builtins.bool]] = None):
        """
        :param pulumi.Input[_builtins.str] hostname: Hostname
        :param pulumi.Input[_builtins.str] hostname_variable: Variable name
        :param pulumi.Input[_builtins.str] ip_variable: Variable name
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] ips: List of IP
        :param pulumi.Input[_builtins.bool] optional: Indicates if list item is considered optional.
        """
        if hostname is not None:
            pulumi.set(__self__, "hostname", hostname)
        if hostname_variable is not None:
            pulumi.set(__self__, "hostname_variable", hostname_variable)
        if ip_variable is not None:
            pulumi.set(__self__, "ip_variable", ip_variable)
        if ips is not None:
            pulumi.set(__self__, "ips", ips)
        if optional is not None:
            pulumi.set(__self__, "optional", optional)

    @_builtins.property
    @pulumi.getter
    def hostname(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Hostname
        """
        return pulumi.get(self, "hostname")

    @hostname.setter
    def hostname(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "hostname", value)

    @_builtins.property
    @pulumi.getter(name="hostnameVariable")
    def hostname_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "hostname_variable")

    @hostname_variable.setter
    def hostname_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "hostname_variable", value)

    @_builtins.property
    @pulumi.getter(name="ipVariable")
    def ip_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "ip_variable")

    @ip_variable.setter
    def ip_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "ip_variable", value)

    @_builtins.property
    @pulumi.getter
    def ips(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]:
        """
        List of IP
        """
        return pulumi.get(self, "ips")

    @ips.setter
    def ips(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "ips", value)

    @_builtins.property
    @pulumi.getter
    def optional(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Indicates if list item is considered optional.
        """
        return pulumi.get(self, "optional")

    @optional.setter
    def optional(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "optional", value)


if not MYPY:
    class CiscoVpnFeatureTemplateDnsIpv4ServerArgsDict(TypedDict):
        address: NotRequired[pulumi.Input[_builtins.str]]
        """
        DNS Address
        """
        address_variable: NotRequired[pulumi.Input[_builtins.str]]
        """
        Variable name
        """
        optional: NotRequired[pulumi.Input[_builtins.bool]]
        """
        Indicates if list item is considered optional.
        """
        role: NotRequired[pulumi.Input[_builtins.str]]
        """
        Role
          - Choices: `primary`, `secondary`
          - Default value: `primary`
        """
        role_variable: NotRequired[pulumi.Input[_builtins.str]]
        """
        Variable name
        """
elif False:
    CiscoVpnFeatureTemplateDnsIpv4ServerArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class CiscoVpnFeatureTemplateDnsIpv4ServerArgs:
    def __init__(__self__, *,
                 address: Optional[pulumi.Input[_builtins.str]] = None,
                 address_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 optional: Optional[pulumi.Input[_builtins.bool]] = None,
                 role: Optional[pulumi.Input[_builtins.str]] = None,
                 role_variable: Optional[pulumi.Input[_builtins.str]] = None):
        """
        :param pulumi.Input[_builtins.str] address: DNS Address
        :param pulumi.Input[_builtins.str] address_variable: Variable name
        :param pulumi.Input[_builtins.bool] optional: Indicates if list item is considered optional.
        :param pulumi.Input[_builtins.str] role: Role
                 - Choices: `primary`, `secondary`
                 - Default value: `primary`
        :param pulumi.Input[_builtins.str] role_variable: Variable name
        """
        if address is not None:
            pulumi.set(__self__, "address", address)
        if address_variable is not None:
            pulumi.set(__self__, "address_variable", address_variable)
        if optional is not None:
            pulumi.set(__self__, "optional", optional)
        if role is not None:
            pulumi.set(__self__, "role", role)
        if role_variable is not None:
            pulumi.set(__self__, "role_variable", role_variable)

    @_builtins.property
    @pulumi.getter
    def address(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        DNS Address
        """
        return pulumi.get(self, "address")

    @address.setter
    def address(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "address", value)

    @_builtins.property
    @pulumi.getter(name="addressVariable")
    def address_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "address_variable")

    @address_variable.setter
    def address_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "address_variable", value)

    @_builtins.property
    @pulumi.getter
    def optional(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Indicates if list item is considered optional.
        """
        return pulumi.get(self, "optional")

    @optional.setter
    def optional(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "optional", value)

    @_builtins.property
    @pulumi.getter
    def role(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Role
          - Choices: `primary`, `secondary`
          - Default value: `primary`
        """
        return pulumi.get(self, "role")

    @role.setter
    def role(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "role", value)

    @_builtins.property
    @pulumi.getter(name="roleVariable")
    def role_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "role_variable")

    @role_variable.setter
    def role_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "role_variable", value)


if not MYPY:
    class CiscoVpnFeatureTemplateDnsIpv6ServerArgsDict(TypedDict):
        address: NotRequired[pulumi.Input[_builtins.str]]
        """
        DNS Address
        """
        optional: NotRequired[pulumi.Input[_builtins.bool]]
        """
        Indicates if list item is considered optional.
        """
        role: NotRequired[pulumi.Input[_builtins.str]]
        """
        Role
          - Choices: `primary`, `secondary`
          - Default value: `primary`
        """
        role_variable: NotRequired[pulumi.Input[_builtins.str]]
        """
        Variable name
        """
elif False:
    CiscoVpnFeatureTemplateDnsIpv6ServerArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class CiscoVpnFeatureTemplateDnsIpv6ServerArgs:
    def __init__(__self__, *,
                 address: Optional[pulumi.Input[_builtins.str]] = None,
                 optional: Optional[pulumi.Input[_builtins.bool]] = None,
                 role: Optional[pulumi.Input[_builtins.str]] = None,
                 role_variable: Optional[pulumi.Input[_builtins.str]] = None):
        """
        :param pulumi.Input[_builtins.str] address: DNS Address
        :param pulumi.Input[_builtins.bool] optional: Indicates if list item is considered optional.
        :param pulumi.Input[_builtins.str] role: Role
                 - Choices: `primary`, `secondary`
                 - Default value: `primary`
        :param pulumi.Input[_builtins.str] role_variable: Variable name
        """
        if address is not None:
            pulumi.set(__self__, "address", address)
        if optional is not None:
            pulumi.set(__self__, "optional", optional)
        if role is not None:
            pulumi.set(__self__, "role", role)
        if role_variable is not None:
            pulumi.set(__self__, "role_variable", role_variable)

    @_builtins.property
    @pulumi.getter
    def address(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        DNS Address
        """
        return pulumi.get(self, "address")

    @address.setter
    def address(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "address", value)

    @_builtins.property
    @pulumi.getter
    def optional(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Indicates if list item is considered optional.
        """
        return pulumi.get(self, "optional")

    @optional.setter
    def optional(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "optional", value)

    @_builtins.property
    @pulumi.getter
    def role(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Role
          - Choices: `primary`, `secondary`
          - Default value: `primary`
        """
        return pulumi.get(self, "role")

    @role.setter
    def role(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "role", value)

    @_builtins.property
    @pulumi.getter(name="roleVariable")
    def role_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "role_variable")

    @role_variable.setter
    def role_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "role_variable", value)


if not MYPY:
    class CiscoVpnFeatureTemplateIpv4StaticGreRouteArgsDict(TypedDict):
        interfaces: NotRequired[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]
        """
        List of GRE Interfaces
        """
        interfaces_variable: NotRequired[pulumi.Input[_builtins.str]]
        """
        Variable name
        """
        optional: NotRequired[pulumi.Input[_builtins.bool]]
        """
        Indicates if list item is considered optional.
        """
        prefix: NotRequired[pulumi.Input[_builtins.str]]
        """
        Prefix
        """
        prefix_variable: NotRequired[pulumi.Input[_builtins.str]]
        """
        Variable name
        """
        vpn_id: NotRequired[pulumi.Input[_builtins.int]]
        """
        Destination VPN to resolve the prefix
          - Default value: `0`
        """
elif False:
    CiscoVpnFeatureTemplateIpv4StaticGreRouteArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class CiscoVpnFeatureTemplateIpv4StaticGreRouteArgs:
    def __init__(__self__, *,
                 interfaces: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 interfaces_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 optional: Optional[pulumi.Input[_builtins.bool]] = None,
                 prefix: Optional[pulumi.Input[_builtins.str]] = None,
                 prefix_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 vpn_id: Optional[pulumi.Input[_builtins.int]] = None):
        """
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] interfaces: List of GRE Interfaces
        :param pulumi.Input[_builtins.str] interfaces_variable: Variable name
        :param pulumi.Input[_builtins.bool] optional: Indicates if list item is considered optional.
        :param pulumi.Input[_builtins.str] prefix: Prefix
        :param pulumi.Input[_builtins.str] prefix_variable: Variable name
        :param pulumi.Input[_builtins.int] vpn_id: Destination VPN to resolve the prefix
                 - Default value: `0`
        """
        if interfaces is not None:
            pulumi.set(__self__, "interfaces", interfaces)
        if interfaces_variable is not None:
            pulumi.set(__self__, "interfaces_variable", interfaces_variable)
        if optional is not None:
            pulumi.set(__self__, "optional", optional)
        if prefix is not None:
            pulumi.set(__self__, "prefix", prefix)
        if prefix_variable is not None:
            pulumi.set(__self__, "prefix_variable", prefix_variable)
        if vpn_id is not None:
            pulumi.set(__self__, "vpn_id", vpn_id)

    @_builtins.property
    @pulumi.getter
    def interfaces(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]:
        """
        List of GRE Interfaces
        """
        return pulumi.get(self, "interfaces")

    @interfaces.setter
    def interfaces(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "interfaces", value)

    @_builtins.property
    @pulumi.getter(name="interfacesVariable")
    def interfaces_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "interfaces_variable")

    @interfaces_variable.setter
    def interfaces_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "interfaces_variable", value)

    @_builtins.property
    @pulumi.getter
    def optional(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Indicates if list item is considered optional.
        """
        return pulumi.get(self, "optional")

    @optional.setter
    def optional(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "optional", value)

    @_builtins.property
    @pulumi.getter
    def prefix(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Prefix
        """
        return pulumi.get(self, "prefix")

    @prefix.setter
    def prefix(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "prefix", value)

    @_builtins.property
    @pulumi.getter(name="prefixVariable")
    def prefix_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "prefix_variable")

    @prefix_variable.setter
    def prefix_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "prefix_variable", value)

    @_builtins.property
    @pulumi.getter(name="vpnId")
    def vpn_id(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        Destination VPN to resolve the prefix
          - Default value: `0`
        """
        return pulumi.get(self, "vpn_id")

    @vpn_id.setter
    def vpn_id(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "vpn_id", value)


if not MYPY:
    class CiscoVpnFeatureTemplateIpv4StaticIpsecRouteArgsDict(TypedDict):
        interfaces: NotRequired[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]
        """
        List of IPSEC Interfaces (Separated by commas)
        """
        interfaces_variable: NotRequired[pulumi.Input[_builtins.str]]
        """
        Variable name
        """
        optional: NotRequired[pulumi.Input[_builtins.bool]]
        """
        Indicates if list item is considered optional.
        """
        prefix: NotRequired[pulumi.Input[_builtins.str]]
        """
        Prefix
        """
        prefix_variable: NotRequired[pulumi.Input[_builtins.str]]
        """
        Variable name
        """
        vpn_id: NotRequired[pulumi.Input[_builtins.int]]
        """
        Destination VPN to resolve the prefix
          - Default value: `0`
        """
elif False:
    CiscoVpnFeatureTemplateIpv4StaticIpsecRouteArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class CiscoVpnFeatureTemplateIpv4StaticIpsecRouteArgs:
    def __init__(__self__, *,
                 interfaces: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 interfaces_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 optional: Optional[pulumi.Input[_builtins.bool]] = None,
                 prefix: Optional[pulumi.Input[_builtins.str]] = None,
                 prefix_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 vpn_id: Optional[pulumi.Input[_builtins.int]] = None):
        """
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] interfaces: List of IPSEC Interfaces (Separated by commas)
        :param pulumi.Input[_builtins.str] interfaces_variable: Variable name
        :param pulumi.Input[_builtins.bool] optional: Indicates if list item is considered optional.
        :param pulumi.Input[_builtins.str] prefix: Prefix
        :param pulumi.Input[_builtins.str] prefix_variable: Variable name
        :param pulumi.Input[_builtins.int] vpn_id: Destination VPN to resolve the prefix
                 - Default value: `0`
        """
        if interfaces is not None:
            pulumi.set(__self__, "interfaces", interfaces)
        if interfaces_variable is not None:
            pulumi.set(__self__, "interfaces_variable", interfaces_variable)
        if optional is not None:
            pulumi.set(__self__, "optional", optional)
        if prefix is not None:
            pulumi.set(__self__, "prefix", prefix)
        if prefix_variable is not None:
            pulumi.set(__self__, "prefix_variable", prefix_variable)
        if vpn_id is not None:
            pulumi.set(__self__, "vpn_id", vpn_id)

    @_builtins.property
    @pulumi.getter
    def interfaces(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]:
        """
        List of IPSEC Interfaces (Separated by commas)
        """
        return pulumi.get(self, "interfaces")

    @interfaces.setter
    def interfaces(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "interfaces", value)

    @_builtins.property
    @pulumi.getter(name="interfacesVariable")
    def interfaces_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "interfaces_variable")

    @interfaces_variable.setter
    def interfaces_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "interfaces_variable", value)

    @_builtins.property
    @pulumi.getter
    def optional(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Indicates if list item is considered optional.
        """
        return pulumi.get(self, "optional")

    @optional.setter
    def optional(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "optional", value)

    @_builtins.property
    @pulumi.getter
    def prefix(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Prefix
        """
        return pulumi.get(self, "prefix")

    @prefix.setter
    def prefix(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "prefix", value)

    @_builtins.property
    @pulumi.getter(name="prefixVariable")
    def prefix_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "prefix_variable")

    @prefix_variable.setter
    def prefix_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "prefix_variable", value)

    @_builtins.property
    @pulumi.getter(name="vpnId")
    def vpn_id(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        Destination VPN to resolve the prefix
          - Default value: `0`
        """
        return pulumi.get(self, "vpn_id")

    @vpn_id.setter
    def vpn_id(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "vpn_id", value)


if not MYPY:
    class CiscoVpnFeatureTemplateIpv4StaticRouteArgsDict(TypedDict):
        dhcp: NotRequired[pulumi.Input[_builtins.bool]]
        """
        Default Gateway obtained from DHCP
          - Default value: `false`
        """
        dhcp_variable: NotRequired[pulumi.Input[_builtins.str]]
        """
        Variable name
        """
        distance: NotRequired[pulumi.Input[_builtins.int]]
        """
        Administrative distance
          - Range: `1`-`255`
          - Default value: `1`
        """
        distance_variable: NotRequired[pulumi.Input[_builtins.str]]
        """
        Variable name
        """
        next_hops: NotRequired[pulumi.Input[Sequence[pulumi.Input['CiscoVpnFeatureTemplateIpv4StaticRouteNextHopArgsDict']]]]
        """
        IP gateway address
        """
        null0: NotRequired[pulumi.Input[_builtins.bool]]
        """
        null0
          - Default value: `false`
        """
        null0_variable: NotRequired[pulumi.Input[_builtins.str]]
        """
        Variable name
        """
        optional: NotRequired[pulumi.Input[_builtins.bool]]
        """
        Indicates if list item is considered optional.
        """
        prefix: NotRequired[pulumi.Input[_builtins.str]]
        """
        Prefix
        """
        prefix_variable: NotRequired[pulumi.Input[_builtins.str]]
        """
        Variable name
        """
        track_next_hops: NotRequired[pulumi.Input[Sequence[pulumi.Input['CiscoVpnFeatureTemplateIpv4StaticRouteTrackNextHopArgsDict']]]]
        """
        IP gateway address
        """
        vpn_id: NotRequired[pulumi.Input[_builtins.int]]
        """
        Destination VPN(!=0 or !=512) to resolve the prefix
          - Default value: `0`
        """
        vpn_id_variable: NotRequired[pulumi.Input[_builtins.str]]
        """
        Variable name
        """
elif False:
    CiscoVpnFeatureTemplateIpv4StaticRouteArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class CiscoVpnFeatureTemplateIpv4StaticRouteArgs:
    def __init__(__self__, *,
                 dhcp: Optional[pulumi.Input[_builtins.bool]] = None,
                 dhcp_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 distance: Optional[pulumi.Input[_builtins.int]] = None,
                 distance_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 next_hops: Optional[pulumi.Input[Sequence[pulumi.Input['CiscoVpnFeatureTemplateIpv4StaticRouteNextHopArgs']]]] = None,
                 null0: Optional[pulumi.Input[_builtins.bool]] = None,
                 null0_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 optional: Optional[pulumi.Input[_builtins.bool]] = None,
                 prefix: Optional[pulumi.Input[_builtins.str]] = None,
                 prefix_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 track_next_hops: Optional[pulumi.Input[Sequence[pulumi.Input['CiscoVpnFeatureTemplateIpv4StaticRouteTrackNextHopArgs']]]] = None,
                 vpn_id: Optional[pulumi.Input[_builtins.int]] = None,
                 vpn_id_variable: Optional[pulumi.Input[_builtins.str]] = None):
        """
        :param pulumi.Input[_builtins.bool] dhcp: Default Gateway obtained from DHCP
                 - Default value: `false`
        :param pulumi.Input[_builtins.str] dhcp_variable: Variable name
        :param pulumi.Input[_builtins.int] distance: Administrative distance
                 - Range: `1`-`255`
                 - Default value: `1`
        :param pulumi.Input[_builtins.str] distance_variable: Variable name
        :param pulumi.Input[Sequence[pulumi.Input['CiscoVpnFeatureTemplateIpv4StaticRouteNextHopArgs']]] next_hops: IP gateway address
        :param pulumi.Input[_builtins.bool] null0: null0
                 - Default value: `false`
        :param pulumi.Input[_builtins.str] null0_variable: Variable name
        :param pulumi.Input[_builtins.bool] optional: Indicates if list item is considered optional.
        :param pulumi.Input[_builtins.str] prefix: Prefix
        :param pulumi.Input[_builtins.str] prefix_variable: Variable name
        :param pulumi.Input[Sequence[pulumi.Input['CiscoVpnFeatureTemplateIpv4StaticRouteTrackNextHopArgs']]] track_next_hops: IP gateway address
        :param pulumi.Input[_builtins.int] vpn_id: Destination VPN(!=0 or !=512) to resolve the prefix
                 - Default value: `0`
        :param pulumi.Input[_builtins.str] vpn_id_variable: Variable name
        """
        if dhcp is not None:
            pulumi.set(__self__, "dhcp", dhcp)
        if dhcp_variable is not None:
            pulumi.set(__self__, "dhcp_variable", dhcp_variable)
        if distance is not None:
            pulumi.set(__self__, "distance", distance)
        if distance_variable is not None:
            pulumi.set(__self__, "distance_variable", distance_variable)
        if next_hops is not None:
            pulumi.set(__self__, "next_hops", next_hops)
        if null0 is not None:
            pulumi.set(__self__, "null0", null0)
        if null0_variable is not None:
            pulumi.set(__self__, "null0_variable", null0_variable)
        if optional is not None:
            pulumi.set(__self__, "optional", optional)
        if prefix is not None:
            pulumi.set(__self__, "prefix", prefix)
        if prefix_variable is not None:
            pulumi.set(__self__, "prefix_variable", prefix_variable)
        if track_next_hops is not None:
            pulumi.set(__self__, "track_next_hops", track_next_hops)
        if vpn_id is not None:
            pulumi.set(__self__, "vpn_id", vpn_id)
        if vpn_id_variable is not None:
            pulumi.set(__self__, "vpn_id_variable", vpn_id_variable)

    @_builtins.property
    @pulumi.getter
    def dhcp(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Default Gateway obtained from DHCP
          - Default value: `false`
        """
        return pulumi.get(self, "dhcp")

    @dhcp.setter
    def dhcp(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "dhcp", value)

    @_builtins.property
    @pulumi.getter(name="dhcpVariable")
    def dhcp_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "dhcp_variable")

    @dhcp_variable.setter
    def dhcp_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "dhcp_variable", value)

    @_builtins.property
    @pulumi.getter
    def distance(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        Administrative distance
          - Range: `1`-`255`
          - Default value: `1`
        """
        return pulumi.get(self, "distance")

    @distance.setter
    def distance(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "distance", value)

    @_builtins.property
    @pulumi.getter(name="distanceVariable")
    def distance_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "distance_variable")

    @distance_variable.setter
    def distance_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "distance_variable", value)

    @_builtins.property
    @pulumi.getter(name="nextHops")
    def next_hops(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['CiscoVpnFeatureTemplateIpv4StaticRouteNextHopArgs']]]]:
        """
        IP gateway address
        """
        return pulumi.get(self, "next_hops")

    @next_hops.setter
    def next_hops(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['CiscoVpnFeatureTemplateIpv4StaticRouteNextHopArgs']]]]):
        pulumi.set(self, "next_hops", value)

    @_builtins.property
    @pulumi.getter
    def null0(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        null0
          - Default value: `false`
        """
        return pulumi.get(self, "null0")

    @null0.setter
    def null0(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "null0", value)

    @_builtins.property
    @pulumi.getter(name="null0Variable")
    def null0_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "null0_variable")

    @null0_variable.setter
    def null0_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "null0_variable", value)

    @_builtins.property
    @pulumi.getter
    def optional(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Indicates if list item is considered optional.
        """
        return pulumi.get(self, "optional")

    @optional.setter
    def optional(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "optional", value)

    @_builtins.property
    @pulumi.getter
    def prefix(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Prefix
        """
        return pulumi.get(self, "prefix")

    @prefix.setter
    def prefix(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "prefix", value)

    @_builtins.property
    @pulumi.getter(name="prefixVariable")
    def prefix_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "prefix_variable")

    @prefix_variable.setter
    def prefix_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "prefix_variable", value)

    @_builtins.property
    @pulumi.getter(name="trackNextHops")
    def track_next_hops(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['CiscoVpnFeatureTemplateIpv4StaticRouteTrackNextHopArgs']]]]:
        """
        IP gateway address
        """
        return pulumi.get(self, "track_next_hops")

    @track_next_hops.setter
    def track_next_hops(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['CiscoVpnFeatureTemplateIpv4StaticRouteTrackNextHopArgs']]]]):
        pulumi.set(self, "track_next_hops", value)

    @_builtins.property
    @pulumi.getter(name="vpnId")
    def vpn_id(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        Destination VPN(!=0 or !=512) to resolve the prefix
          - Default value: `0`
        """
        return pulumi.get(self, "vpn_id")

    @vpn_id.setter
    def vpn_id(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "vpn_id", value)

    @_builtins.property
    @pulumi.getter(name="vpnIdVariable")
    def vpn_id_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "vpn_id_variable")

    @vpn_id_variable.setter
    def vpn_id_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "vpn_id_variable", value)


if not MYPY:
    class CiscoVpnFeatureTemplateIpv4StaticRouteNextHopArgsDict(TypedDict):
        address: NotRequired[pulumi.Input[_builtins.str]]
        """
        IP Address
        """
        address_variable: NotRequired[pulumi.Input[_builtins.str]]
        """
        Variable name
        """
        distance: NotRequired[pulumi.Input[_builtins.int]]
        """
        Administrative distance
          - Range: `1`-`255`
          - Default value: `1`
        """
        distance_variable: NotRequired[pulumi.Input[_builtins.str]]
        """
        Variable name
        """
        optional: NotRequired[pulumi.Input[_builtins.bool]]
        """
        Indicates if list item is considered optional.
        """
elif False:
    CiscoVpnFeatureTemplateIpv4StaticRouteNextHopArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class CiscoVpnFeatureTemplateIpv4StaticRouteNextHopArgs:
    def __init__(__self__, *,
                 address: Optional[pulumi.Input[_builtins.str]] = None,
                 address_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 distance: Optional[pulumi.Input[_builtins.int]] = None,
                 distance_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 optional: Optional[pulumi.Input[_builtins.bool]] = None):
        """
        :param pulumi.Input[_builtins.str] address: IP Address
        :param pulumi.Input[_builtins.str] address_variable: Variable name
        :param pulumi.Input[_builtins.int] distance: Administrative distance
                 - Range: `1`-`255`
                 - Default value: `1`
        :param pulumi.Input[_builtins.str] distance_variable: Variable name
        :param pulumi.Input[_builtins.bool] optional: Indicates if list item is considered optional.
        """
        if address is not None:
            pulumi.set(__self__, "address", address)
        if address_variable is not None:
            pulumi.set(__self__, "address_variable", address_variable)
        if distance is not None:
            pulumi.set(__self__, "distance", distance)
        if distance_variable is not None:
            pulumi.set(__self__, "distance_variable", distance_variable)
        if optional is not None:
            pulumi.set(__self__, "optional", optional)

    @_builtins.property
    @pulumi.getter
    def address(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        IP Address
        """
        return pulumi.get(self, "address")

    @address.setter
    def address(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "address", value)

    @_builtins.property
    @pulumi.getter(name="addressVariable")
    def address_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "address_variable")

    @address_variable.setter
    def address_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "address_variable", value)

    @_builtins.property
    @pulumi.getter
    def distance(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        Administrative distance
          - Range: `1`-`255`
          - Default value: `1`
        """
        return pulumi.get(self, "distance")

    @distance.setter
    def distance(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "distance", value)

    @_builtins.property
    @pulumi.getter(name="distanceVariable")
    def distance_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "distance_variable")

    @distance_variable.setter
    def distance_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "distance_variable", value)

    @_builtins.property
    @pulumi.getter
    def optional(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Indicates if list item is considered optional.
        """
        return pulumi.get(self, "optional")

    @optional.setter
    def optional(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "optional", value)


if not MYPY:
    class CiscoVpnFeatureTemplateIpv4StaticRouteTrackNextHopArgsDict(TypedDict):
        address: NotRequired[pulumi.Input[_builtins.str]]
        """
        IP Address
        """
        address_variable: NotRequired[pulumi.Input[_builtins.str]]
        """
        Variable name
        """
        distance: NotRequired[pulumi.Input[_builtins.int]]
        """
        Administrative distance
          - Range: `1`-`255`
          - Default value: `1`
        """
        distance_variable: NotRequired[pulumi.Input[_builtins.str]]
        """
        Variable name
        """
        optional: NotRequired[pulumi.Input[_builtins.bool]]
        """
        Indicates if list item is considered optional.
        """
        tracker: NotRequired[pulumi.Input[_builtins.str]]
        """
        Static route tracker
        """
        tracker_variable: NotRequired[pulumi.Input[_builtins.str]]
        """
        Variable name
        """
elif False:
    CiscoVpnFeatureTemplateIpv4StaticRouteTrackNextHopArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class CiscoVpnFeatureTemplateIpv4StaticRouteTrackNextHopArgs:
    def __init__(__self__, *,
                 address: Optional[pulumi.Input[_builtins.str]] = None,
                 address_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 distance: Optional[pulumi.Input[_builtins.int]] = None,
                 distance_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 optional: Optional[pulumi.Input[_builtins.bool]] = None,
                 tracker: Optional[pulumi.Input[_builtins.str]] = None,
                 tracker_variable: Optional[pulumi.Input[_builtins.str]] = None):
        """
        :param pulumi.Input[_builtins.str] address: IP Address
        :param pulumi.Input[_builtins.str] address_variable: Variable name
        :param pulumi.Input[_builtins.int] distance: Administrative distance
                 - Range: `1`-`255`
                 - Default value: `1`
        :param pulumi.Input[_builtins.str] distance_variable: Variable name
        :param pulumi.Input[_builtins.bool] optional: Indicates if list item is considered optional.
        :param pulumi.Input[_builtins.str] tracker: Static route tracker
        :param pulumi.Input[_builtins.str] tracker_variable: Variable name
        """
        if address is not None:
            pulumi.set(__self__, "address", address)
        if address_variable is not None:
            pulumi.set(__self__, "address_variable", address_variable)
        if distance is not None:
            pulumi.set(__self__, "distance", distance)
        if distance_variable is not None:
            pulumi.set(__self__, "distance_variable", distance_variable)
        if optional is not None:
            pulumi.set(__self__, "optional", optional)
        if tracker is not None:
            pulumi.set(__self__, "tracker", tracker)
        if tracker_variable is not None:
            pulumi.set(__self__, "tracker_variable", tracker_variable)

    @_builtins.property
    @pulumi.getter
    def address(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        IP Address
        """
        return pulumi.get(self, "address")

    @address.setter
    def address(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "address", value)

    @_builtins.property
    @pulumi.getter(name="addressVariable")
    def address_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "address_variable")

    @address_variable.setter
    def address_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "address_variable", value)

    @_builtins.property
    @pulumi.getter
    def distance(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        Administrative distance
          - Range: `1`-`255`
          - Default value: `1`
        """
        return pulumi.get(self, "distance")

    @distance.setter
    def distance(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "distance", value)

    @_builtins.property
    @pulumi.getter(name="distanceVariable")
    def distance_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "distance_variable")

    @distance_variable.setter
    def distance_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "distance_variable", value)

    @_builtins.property
    @pulumi.getter
    def optional(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Indicates if list item is considered optional.
        """
        return pulumi.get(self, "optional")

    @optional.setter
    def optional(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "optional", value)

    @_builtins.property
    @pulumi.getter
    def tracker(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Static route tracker
        """
        return pulumi.get(self, "tracker")

    @tracker.setter
    def tracker(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "tracker", value)

    @_builtins.property
    @pulumi.getter(name="trackerVariable")
    def tracker_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "tracker_variable")

    @tracker_variable.setter
    def tracker_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "tracker_variable", value)


if not MYPY:
    class CiscoVpnFeatureTemplateIpv4StaticServiceRouteArgsDict(TypedDict):
        optional: NotRequired[pulumi.Input[_builtins.bool]]
        """
        Indicates if list item is considered optional.
        """
        prefix: NotRequired[pulumi.Input[_builtins.str]]
        """
        Prefix
        """
        prefix_variable: NotRequired[pulumi.Input[_builtins.str]]
        """
        Variable name
        """
        service: NotRequired[pulumi.Input[_builtins.str]]
        """
        Service
          - Choices: `sig`
          - Default value: `sig`
        """
        vpn_id: NotRequired[pulumi.Input[_builtins.int]]
        """
        Destination VPN to resolve the prefix
          - Default value: `0`
        """
elif False:
    CiscoVpnFeatureTemplateIpv4StaticServiceRouteArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class CiscoVpnFeatureTemplateIpv4StaticServiceRouteArgs:
    def __init__(__self__, *,
                 optional: Optional[pulumi.Input[_builtins.bool]] = None,
                 prefix: Optional[pulumi.Input[_builtins.str]] = None,
                 prefix_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 service: Optional[pulumi.Input[_builtins.str]] = None,
                 vpn_id: Optional[pulumi.Input[_builtins.int]] = None):
        """
        :param pulumi.Input[_builtins.bool] optional: Indicates if list item is considered optional.
        :param pulumi.Input[_builtins.str] prefix: Prefix
        :param pulumi.Input[_builtins.str] prefix_variable: Variable name
        :param pulumi.Input[_builtins.str] service: Service
                 - Choices: `sig`
                 - Default value: `sig`
        :param pulumi.Input[_builtins.int] vpn_id: Destination VPN to resolve the prefix
                 - Default value: `0`
        """
        if optional is not None:
            pulumi.set(__self__, "optional", optional)
        if prefix is not None:
            pulumi.set(__self__, "prefix", prefix)
        if prefix_variable is not None:
            pulumi.set(__self__, "prefix_variable", prefix_variable)
        if service is not None:
            pulumi.set(__self__, "service", service)
        if vpn_id is not None:
            pulumi.set(__self__, "vpn_id", vpn_id)

    @_builtins.property
    @pulumi.getter
    def optional(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Indicates if list item is considered optional.
        """
        return pulumi.get(self, "optional")

    @optional.setter
    def optional(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "optional", value)

    @_builtins.property
    @pulumi.getter
    def prefix(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Prefix
        """
        return pulumi.get(self, "prefix")

    @prefix.setter
    def prefix(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "prefix", value)

    @_builtins.property
    @pulumi.getter(name="prefixVariable")
    def prefix_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "prefix_variable")

    @prefix_variable.setter
    def prefix_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "prefix_variable", value)

    @_builtins.property
    @pulumi.getter
    def service(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Service
          - Choices: `sig`
          - Default value: `sig`
        """
        return pulumi.get(self, "service")

    @service.setter
    def service(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "service", value)

    @_builtins.property
    @pulumi.getter(name="vpnId")
    def vpn_id(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        Destination VPN to resolve the prefix
          - Default value: `0`
        """
        return pulumi.get(self, "vpn_id")

    @vpn_id.setter
    def vpn_id(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "vpn_id", value)


if not MYPY:
    class CiscoVpnFeatureTemplateIpv6StaticRouteArgsDict(TypedDict):
        nat: NotRequired[pulumi.Input[_builtins.str]]
        """
        NAT
          - Choices: `NAT64`, `NAT66`
          - Default value: `NAT64`
        """
        nat_variable: NotRequired[pulumi.Input[_builtins.str]]
        """
        Variable name
        """
        next_hops: NotRequired[pulumi.Input[Sequence[pulumi.Input['CiscoVpnFeatureTemplateIpv6StaticRouteNextHopArgsDict']]]]
        """
        IP gateway address
        """
        null0: NotRequired[pulumi.Input[_builtins.bool]]
        """
        null0
          - Default value: `false`
        """
        null0_variable: NotRequired[pulumi.Input[_builtins.str]]
        """
        Variable name
        """
        optional: NotRequired[pulumi.Input[_builtins.bool]]
        """
        Indicates if list item is considered optional.
        """
        prefix: NotRequired[pulumi.Input[_builtins.str]]
        """
        Prefix
        """
        prefix_variable: NotRequired[pulumi.Input[_builtins.str]]
        """
        Variable name
        """
        vpn_id: NotRequired[pulumi.Input[_builtins.int]]
        """
        Destination VPN(!=0 or !=512) to resolve the prefix
          - Default value: `0`
        """
        vpn_id_variable: NotRequired[pulumi.Input[_builtins.str]]
        """
        Variable name
        """
elif False:
    CiscoVpnFeatureTemplateIpv6StaticRouteArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class CiscoVpnFeatureTemplateIpv6StaticRouteArgs:
    def __init__(__self__, *,
                 nat: Optional[pulumi.Input[_builtins.str]] = None,
                 nat_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 next_hops: Optional[pulumi.Input[Sequence[pulumi.Input['CiscoVpnFeatureTemplateIpv6StaticRouteNextHopArgs']]]] = None,
                 null0: Optional[pulumi.Input[_builtins.bool]] = None,
                 null0_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 optional: Optional[pulumi.Input[_builtins.bool]] = None,
                 prefix: Optional[pulumi.Input[_builtins.str]] = None,
                 prefix_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 vpn_id: Optional[pulumi.Input[_builtins.int]] = None,
                 vpn_id_variable: Optional[pulumi.Input[_builtins.str]] = None):
        """
        :param pulumi.Input[_builtins.str] nat: NAT
                 - Choices: `NAT64`, `NAT66`
                 - Default value: `NAT64`
        :param pulumi.Input[_builtins.str] nat_variable: Variable name
        :param pulumi.Input[Sequence[pulumi.Input['CiscoVpnFeatureTemplateIpv6StaticRouteNextHopArgs']]] next_hops: IP gateway address
        :param pulumi.Input[_builtins.bool] null0: null0
                 - Default value: `false`
        :param pulumi.Input[_builtins.str] null0_variable: Variable name
        :param pulumi.Input[_builtins.bool] optional: Indicates if list item is considered optional.
        :param pulumi.Input[_builtins.str] prefix: Prefix
        :param pulumi.Input[_builtins.str] prefix_variable: Variable name
        :param pulumi.Input[_builtins.int] vpn_id: Destination VPN(!=0 or !=512) to resolve the prefix
                 - Default value: `0`
        :param pulumi.Input[_builtins.str] vpn_id_variable: Variable name
        """
        if nat is not None:
            pulumi.set(__self__, "nat", nat)
        if nat_variable is not None:
            pulumi.set(__self__, "nat_variable", nat_variable)
        if next_hops is not None:
            pulumi.set(__self__, "next_hops", next_hops)
        if null0 is not None:
            pulumi.set(__self__, "null0", null0)
        if null0_variable is not None:
            pulumi.set(__self__, "null0_variable", null0_variable)
        if optional is not None:
            pulumi.set(__self__, "optional", optional)
        if prefix is not None:
            pulumi.set(__self__, "prefix", prefix)
        if prefix_variable is not None:
            pulumi.set(__self__, "prefix_variable", prefix_variable)
        if vpn_id is not None:
            pulumi.set(__self__, "vpn_id", vpn_id)
        if vpn_id_variable is not None:
            pulumi.set(__self__, "vpn_id_variable", vpn_id_variable)

    @_builtins.property
    @pulumi.getter
    def nat(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        NAT
          - Choices: `NAT64`, `NAT66`
          - Default value: `NAT64`
        """
        return pulumi.get(self, "nat")

    @nat.setter
    def nat(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "nat", value)

    @_builtins.property
    @pulumi.getter(name="natVariable")
    def nat_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "nat_variable")

    @nat_variable.setter
    def nat_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "nat_variable", value)

    @_builtins.property
    @pulumi.getter(name="nextHops")
    def next_hops(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['CiscoVpnFeatureTemplateIpv6StaticRouteNextHopArgs']]]]:
        """
        IP gateway address
        """
        return pulumi.get(self, "next_hops")

    @next_hops.setter
    def next_hops(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['CiscoVpnFeatureTemplateIpv6StaticRouteNextHopArgs']]]]):
        pulumi.set(self, "next_hops", value)

    @_builtins.property
    @pulumi.getter
    def null0(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        null0
          - Default value: `false`
        """
        return pulumi.get(self, "null0")

    @null0.setter
    def null0(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "null0", value)

    @_builtins.property
    @pulumi.getter(name="null0Variable")
    def null0_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "null0_variable")

    @null0_variable.setter
    def null0_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "null0_variable", value)

    @_builtins.property
    @pulumi.getter
    def optional(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Indicates if list item is considered optional.
        """
        return pulumi.get(self, "optional")

    @optional.setter
    def optional(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "optional", value)

    @_builtins.property
    @pulumi.getter
    def prefix(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Prefix
        """
        return pulumi.get(self, "prefix")

    @prefix.setter
    def prefix(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "prefix", value)

    @_builtins.property
    @pulumi.getter(name="prefixVariable")
    def prefix_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "prefix_variable")

    @prefix_variable.setter
    def prefix_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "prefix_variable", value)

    @_builtins.property
    @pulumi.getter(name="vpnId")
    def vpn_id(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        Destination VPN(!=0 or !=512) to resolve the prefix
          - Default value: `0`
        """
        return pulumi.get(self, "vpn_id")

    @vpn_id.setter
    def vpn_id(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "vpn_id", value)

    @_builtins.property
    @pulumi.getter(name="vpnIdVariable")
    def vpn_id_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "vpn_id_variable")

    @vpn_id_variable.setter
    def vpn_id_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "vpn_id_variable", value)


if not MYPY:
    class CiscoVpnFeatureTemplateIpv6StaticRouteNextHopArgsDict(TypedDict):
        address: NotRequired[pulumi.Input[_builtins.str]]
        """
        IP Address
        """
        address_variable: NotRequired[pulumi.Input[_builtins.str]]
        """
        Variable name
        """
        distance: NotRequired[pulumi.Input[_builtins.int]]
        """
        Administrative distance
          - Range: `1`-`255`
          - Default value: `1`
        """
        distance_variable: NotRequired[pulumi.Input[_builtins.str]]
        """
        Variable name
        """
        optional: NotRequired[pulumi.Input[_builtins.bool]]
        """
        Indicates if list item is considered optional.
        """
elif False:
    CiscoVpnFeatureTemplateIpv6StaticRouteNextHopArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class CiscoVpnFeatureTemplateIpv6StaticRouteNextHopArgs:
    def __init__(__self__, *,
                 address: Optional[pulumi.Input[_builtins.str]] = None,
                 address_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 distance: Optional[pulumi.Input[_builtins.int]] = None,
                 distance_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 optional: Optional[pulumi.Input[_builtins.bool]] = None):
        """
        :param pulumi.Input[_builtins.str] address: IP Address
        :param pulumi.Input[_builtins.str] address_variable: Variable name
        :param pulumi.Input[_builtins.int] distance: Administrative distance
                 - Range: `1`-`255`
                 - Default value: `1`
        :param pulumi.Input[_builtins.str] distance_variable: Variable name
        :param pulumi.Input[_builtins.bool] optional: Indicates if list item is considered optional.
        """
        if address is not None:
            pulumi.set(__self__, "address", address)
        if address_variable is not None:
            pulumi.set(__self__, "address_variable", address_variable)
        if distance is not None:
            pulumi.set(__self__, "distance", distance)
        if distance_variable is not None:
            pulumi.set(__self__, "distance_variable", distance_variable)
        if optional is not None:
            pulumi.set(__self__, "optional", optional)

    @_builtins.property
    @pulumi.getter
    def address(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        IP Address
        """
        return pulumi.get(self, "address")

    @address.setter
    def address(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "address", value)

    @_builtins.property
    @pulumi.getter(name="addressVariable")
    def address_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "address_variable")

    @address_variable.setter
    def address_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "address_variable", value)

    @_builtins.property
    @pulumi.getter
    def distance(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        Administrative distance
          - Range: `1`-`255`
          - Default value: `1`
        """
        return pulumi.get(self, "distance")

    @distance.setter
    def distance(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "distance", value)

    @_builtins.property
    @pulumi.getter(name="distanceVariable")
    def distance_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "distance_variable")

    @distance_variable.setter
    def distance_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "distance_variable", value)

    @_builtins.property
    @pulumi.getter
    def optional(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Indicates if list item is considered optional.
        """
        return pulumi.get(self, "optional")

    @optional.setter
    def optional(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "optional", value)


if not MYPY:
    class CiscoVpnFeatureTemplateNat64PoolArgsDict(TypedDict):
        end_address: NotRequired[pulumi.Input[_builtins.str]]
        """
        Ending IP address of NAT pool range
        """
        end_address_variable: NotRequired[pulumi.Input[_builtins.str]]
        """
        Variable name
        """
        leak_from_global: NotRequired[pulumi.Input[_builtins.bool]]
        """
        Enable Route Leaking from Global VPN to this Service VPN
          - Default value: `false`
        """
        leak_from_global_protocol: NotRequired[pulumi.Input[_builtins.str]]
        """
        Select protocol for route leaking
          - Choices: `all`, `static`, `mobile`, `connected`, `rip`, `odr`
        """
        leak_to_global: NotRequired[pulumi.Input[_builtins.bool]]
        """
        Enable Route Leaking from this Service VPN to Global VPN
          - Default value: `false`
        """
        name: NotRequired[pulumi.Input[_builtins.str]]
        """
        NAT64 Pool name
        """
        optional: NotRequired[pulumi.Input[_builtins.bool]]
        """
        Indicates if list item is considered optional.
        """
        overload: NotRequired[pulumi.Input[_builtins.bool]]
        """
        NAT 64 Overload Option
          - Default value: `false`
        """
        overload_variable: NotRequired[pulumi.Input[_builtins.str]]
        """
        Variable name
        """
        start_address: NotRequired[pulumi.Input[_builtins.str]]
        """
        Starting IP address of NAT pool range
        """
        start_address_variable: NotRequired[pulumi.Input[_builtins.str]]
        """
        Variable name
        """
elif False:
    CiscoVpnFeatureTemplateNat64PoolArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class CiscoVpnFeatureTemplateNat64PoolArgs:
    def __init__(__self__, *,
                 end_address: Optional[pulumi.Input[_builtins.str]] = None,
                 end_address_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 leak_from_global: Optional[pulumi.Input[_builtins.bool]] = None,
                 leak_from_global_protocol: Optional[pulumi.Input[_builtins.str]] = None,
                 leak_to_global: Optional[pulumi.Input[_builtins.bool]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 optional: Optional[pulumi.Input[_builtins.bool]] = None,
                 overload: Optional[pulumi.Input[_builtins.bool]] = None,
                 overload_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 start_address: Optional[pulumi.Input[_builtins.str]] = None,
                 start_address_variable: Optional[pulumi.Input[_builtins.str]] = None):
        """
        :param pulumi.Input[_builtins.str] end_address: Ending IP address of NAT pool range
        :param pulumi.Input[_builtins.str] end_address_variable: Variable name
        :param pulumi.Input[_builtins.bool] leak_from_global: Enable Route Leaking from Global VPN to this Service VPN
                 - Default value: `false`
        :param pulumi.Input[_builtins.str] leak_from_global_protocol: Select protocol for route leaking
                 - Choices: `all`, `static`, `mobile`, `connected`, `rip`, `odr`
        :param pulumi.Input[_builtins.bool] leak_to_global: Enable Route Leaking from this Service VPN to Global VPN
                 - Default value: `false`
        :param pulumi.Input[_builtins.str] name: NAT64 Pool name
        :param pulumi.Input[_builtins.bool] optional: Indicates if list item is considered optional.
        :param pulumi.Input[_builtins.bool] overload: NAT 64 Overload Option
                 - Default value: `false`
        :param pulumi.Input[_builtins.str] overload_variable: Variable name
        :param pulumi.Input[_builtins.str] start_address: Starting IP address of NAT pool range
        :param pulumi.Input[_builtins.str] start_address_variable: Variable name
        """
        if end_address is not None:
            pulumi.set(__self__, "end_address", end_address)
        if end_address_variable is not None:
            pulumi.set(__self__, "end_address_variable", end_address_variable)
        if leak_from_global is not None:
            pulumi.set(__self__, "leak_from_global", leak_from_global)
        if leak_from_global_protocol is not None:
            pulumi.set(__self__, "leak_from_global_protocol", leak_from_global_protocol)
        if leak_to_global is not None:
            pulumi.set(__self__, "leak_to_global", leak_to_global)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if optional is not None:
            pulumi.set(__self__, "optional", optional)
        if overload is not None:
            pulumi.set(__self__, "overload", overload)
        if overload_variable is not None:
            pulumi.set(__self__, "overload_variable", overload_variable)
        if start_address is not None:
            pulumi.set(__self__, "start_address", start_address)
        if start_address_variable is not None:
            pulumi.set(__self__, "start_address_variable", start_address_variable)

    @_builtins.property
    @pulumi.getter(name="endAddress")
    def end_address(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Ending IP address of NAT pool range
        """
        return pulumi.get(self, "end_address")

    @end_address.setter
    def end_address(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "end_address", value)

    @_builtins.property
    @pulumi.getter(name="endAddressVariable")
    def end_address_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "end_address_variable")

    @end_address_variable.setter
    def end_address_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "end_address_variable", value)

    @_builtins.property
    @pulumi.getter(name="leakFromGlobal")
    def leak_from_global(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Enable Route Leaking from Global VPN to this Service VPN
          - Default value: `false`
        """
        return pulumi.get(self, "leak_from_global")

    @leak_from_global.setter
    def leak_from_global(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "leak_from_global", value)

    @_builtins.property
    @pulumi.getter(name="leakFromGlobalProtocol")
    def leak_from_global_protocol(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Select protocol for route leaking
          - Choices: `all`, `static`, `mobile`, `connected`, `rip`, `odr`
        """
        return pulumi.get(self, "leak_from_global_protocol")

    @leak_from_global_protocol.setter
    def leak_from_global_protocol(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "leak_from_global_protocol", value)

    @_builtins.property
    @pulumi.getter(name="leakToGlobal")
    def leak_to_global(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Enable Route Leaking from this Service VPN to Global VPN
          - Default value: `false`
        """
        return pulumi.get(self, "leak_to_global")

    @leak_to_global.setter
    def leak_to_global(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "leak_to_global", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        NAT64 Pool name
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "name", value)

    @_builtins.property
    @pulumi.getter
    def optional(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Indicates if list item is considered optional.
        """
        return pulumi.get(self, "optional")

    @optional.setter
    def optional(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "optional", value)

    @_builtins.property
    @pulumi.getter
    def overload(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        NAT 64 Overload Option
          - Default value: `false`
        """
        return pulumi.get(self, "overload")

    @overload.setter
    def overload(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "overload", value)

    @_builtins.property
    @pulumi.getter(name="overloadVariable")
    def overload_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "overload_variable")

    @overload_variable.setter
    def overload_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "overload_variable", value)

    @_builtins.property
    @pulumi.getter(name="startAddress")
    def start_address(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Starting IP address of NAT pool range
        """
        return pulumi.get(self, "start_address")

    @start_address.setter
    def start_address(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "start_address", value)

    @_builtins.property
    @pulumi.getter(name="startAddressVariable")
    def start_address_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "start_address_variable")

    @start_address_variable.setter
    def start_address_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "start_address_variable", value)


if not MYPY:
    class CiscoVpnFeatureTemplateNatPoolArgsDict(TypedDict):
        direction: NotRequired[pulumi.Input[_builtins.str]]
        """
        Direction of NAT translation
          - Choices: `inside`, `outside`
        """
        direction_variable: NotRequired[pulumi.Input[_builtins.str]]
        """
        Variable name
        """
        name: NotRequired[pulumi.Input[_builtins.int]]
        """
        NAT Pool Name, natpool1..31
          - Range: `1`-`31`
        """
        name_variable: NotRequired[pulumi.Input[_builtins.str]]
        """
        Variable name
        """
        optional: NotRequired[pulumi.Input[_builtins.bool]]
        """
        Indicates if list item is considered optional.
        """
        overload: NotRequired[pulumi.Input[_builtins.bool]]
        """
        Enable port translation(PAT)
          - Default value: `true`
        """
        overload_variable: NotRequired[pulumi.Input[_builtins.str]]
        """
        Variable name
        """
        prefix_length: NotRequired[pulumi.Input[_builtins.int]]
        """
        Ending IP address of NAT Pool Prefix Length
          - Range: `1`-`32`
        """
        prefix_length_variable: NotRequired[pulumi.Input[_builtins.str]]
        """
        Variable name
        """
        range_end: NotRequired[pulumi.Input[_builtins.str]]
        """
        Ending IP address of NAT pool range
        """
        range_end_variable: NotRequired[pulumi.Input[_builtins.str]]
        """
        Variable name
        """
        range_start: NotRequired[pulumi.Input[_builtins.str]]
        """
        Starting IP address of NAT pool range
        """
        range_start_variable: NotRequired[pulumi.Input[_builtins.str]]
        """
        Variable name
        """
        tracker_id: NotRequired[pulumi.Input[_builtins.int]]
        """
        Add Object/Object Group Tracker
          - Range: `1`-`1000`
        """
        tracker_id_variable: NotRequired[pulumi.Input[_builtins.str]]
        """
        Variable name
        """
elif False:
    CiscoVpnFeatureTemplateNatPoolArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class CiscoVpnFeatureTemplateNatPoolArgs:
    def __init__(__self__, *,
                 direction: Optional[pulumi.Input[_builtins.str]] = None,
                 direction_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 name: Optional[pulumi.Input[_builtins.int]] = None,
                 name_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 optional: Optional[pulumi.Input[_builtins.bool]] = None,
                 overload: Optional[pulumi.Input[_builtins.bool]] = None,
                 overload_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 prefix_length: Optional[pulumi.Input[_builtins.int]] = None,
                 prefix_length_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 range_end: Optional[pulumi.Input[_builtins.str]] = None,
                 range_end_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 range_start: Optional[pulumi.Input[_builtins.str]] = None,
                 range_start_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 tracker_id: Optional[pulumi.Input[_builtins.int]] = None,
                 tracker_id_variable: Optional[pulumi.Input[_builtins.str]] = None):
        """
        :param pulumi.Input[_builtins.str] direction: Direction of NAT translation
                 - Choices: `inside`, `outside`
        :param pulumi.Input[_builtins.str] direction_variable: Variable name
        :param pulumi.Input[_builtins.int] name: NAT Pool Name, natpool1..31
                 - Range: `1`-`31`
        :param pulumi.Input[_builtins.str] name_variable: Variable name
        :param pulumi.Input[_builtins.bool] optional: Indicates if list item is considered optional.
        :param pulumi.Input[_builtins.bool] overload: Enable port translation(PAT)
                 - Default value: `true`
        :param pulumi.Input[_builtins.str] overload_variable: Variable name
        :param pulumi.Input[_builtins.int] prefix_length: Ending IP address of NAT Pool Prefix Length
                 - Range: `1`-`32`
        :param pulumi.Input[_builtins.str] prefix_length_variable: Variable name
        :param pulumi.Input[_builtins.str] range_end: Ending IP address of NAT pool range
        :param pulumi.Input[_builtins.str] range_end_variable: Variable name
        :param pulumi.Input[_builtins.str] range_start: Starting IP address of NAT pool range
        :param pulumi.Input[_builtins.str] range_start_variable: Variable name
        :param pulumi.Input[_builtins.int] tracker_id: Add Object/Object Group Tracker
                 - Range: `1`-`1000`
        :param pulumi.Input[_builtins.str] tracker_id_variable: Variable name
        """
        if direction is not None:
            pulumi.set(__self__, "direction", direction)
        if direction_variable is not None:
            pulumi.set(__self__, "direction_variable", direction_variable)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if name_variable is not None:
            pulumi.set(__self__, "name_variable", name_variable)
        if optional is not None:
            pulumi.set(__self__, "optional", optional)
        if overload is not None:
            pulumi.set(__self__, "overload", overload)
        if overload_variable is not None:
            pulumi.set(__self__, "overload_variable", overload_variable)
        if prefix_length is not None:
            pulumi.set(__self__, "prefix_length", prefix_length)
        if prefix_length_variable is not None:
            pulumi.set(__self__, "prefix_length_variable", prefix_length_variable)
        if range_end is not None:
            pulumi.set(__self__, "range_end", range_end)
        if range_end_variable is not None:
            pulumi.set(__self__, "range_end_variable", range_end_variable)
        if range_start is not None:
            pulumi.set(__self__, "range_start", range_start)
        if range_start_variable is not None:
            pulumi.set(__self__, "range_start_variable", range_start_variable)
        if tracker_id is not None:
            pulumi.set(__self__, "tracker_id", tracker_id)
        if tracker_id_variable is not None:
            pulumi.set(__self__, "tracker_id_variable", tracker_id_variable)

    @_builtins.property
    @pulumi.getter
    def direction(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Direction of NAT translation
          - Choices: `inside`, `outside`
        """
        return pulumi.get(self, "direction")

    @direction.setter
    def direction(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "direction", value)

    @_builtins.property
    @pulumi.getter(name="directionVariable")
    def direction_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "direction_variable")

    @direction_variable.setter
    def direction_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "direction_variable", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        NAT Pool Name, natpool1..31
          - Range: `1`-`31`
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "name", value)

    @_builtins.property
    @pulumi.getter(name="nameVariable")
    def name_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "name_variable")

    @name_variable.setter
    def name_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "name_variable", value)

    @_builtins.property
    @pulumi.getter
    def optional(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Indicates if list item is considered optional.
        """
        return pulumi.get(self, "optional")

    @optional.setter
    def optional(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "optional", value)

    @_builtins.property
    @pulumi.getter
    def overload(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Enable port translation(PAT)
          - Default value: `true`
        """
        return pulumi.get(self, "overload")

    @overload.setter
    def overload(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "overload", value)

    @_builtins.property
    @pulumi.getter(name="overloadVariable")
    def overload_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "overload_variable")

    @overload_variable.setter
    def overload_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "overload_variable", value)

    @_builtins.property
    @pulumi.getter(name="prefixLength")
    def prefix_length(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        Ending IP address of NAT Pool Prefix Length
          - Range: `1`-`32`
        """
        return pulumi.get(self, "prefix_length")

    @prefix_length.setter
    def prefix_length(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "prefix_length", value)

    @_builtins.property
    @pulumi.getter(name="prefixLengthVariable")
    def prefix_length_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "prefix_length_variable")

    @prefix_length_variable.setter
    def prefix_length_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "prefix_length_variable", value)

    @_builtins.property
    @pulumi.getter(name="rangeEnd")
    def range_end(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Ending IP address of NAT pool range
        """
        return pulumi.get(self, "range_end")

    @range_end.setter
    def range_end(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "range_end", value)

    @_builtins.property
    @pulumi.getter(name="rangeEndVariable")
    def range_end_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "range_end_variable")

    @range_end_variable.setter
    def range_end_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "range_end_variable", value)

    @_builtins.property
    @pulumi.getter(name="rangeStart")
    def range_start(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Starting IP address of NAT pool range
        """
        return pulumi.get(self, "range_start")

    @range_start.setter
    def range_start(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "range_start", value)

    @_builtins.property
    @pulumi.getter(name="rangeStartVariable")
    def range_start_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "range_start_variable")

    @range_start_variable.setter
    def range_start_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "range_start_variable", value)

    @_builtins.property
    @pulumi.getter(name="trackerId")
    def tracker_id(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        Add Object/Object Group Tracker
          - Range: `1`-`1000`
        """
        return pulumi.get(self, "tracker_id")

    @tracker_id.setter
    def tracker_id(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "tracker_id", value)

    @_builtins.property
    @pulumi.getter(name="trackerIdVariable")
    def tracker_id_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "tracker_id_variable")

    @tracker_id_variable.setter
    def tracker_id_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "tracker_id_variable", value)


if not MYPY:
    class CiscoVpnFeatureTemplateOmpAdvertiseIpv4RouteArgsDict(TypedDict):
        optional: NotRequired[pulumi.Input[_builtins.bool]]
        """
        Indicates if list item is considered optional.
        """
        prefixes: NotRequired[pulumi.Input[Sequence[pulumi.Input['CiscoVpnFeatureTemplateOmpAdvertiseIpv4RoutePrefixArgsDict']]]]
        protocol: NotRequired[pulumi.Input[_builtins.str]]
        """
        Advertised routes protocol
          - Choices: `bgp`, `ospf`, `ospfv3`, `connected`, `static`, `network`, `aggregate`, `eigrp`, `lisp`, `isis`
        """
        protocol_sub_type_variable: NotRequired[pulumi.Input[_builtins.str]]
        """
        Variable name
        """
        protocol_sub_types: NotRequired[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]
        protocol_variable: NotRequired[pulumi.Input[_builtins.str]]
        """
        Variable name
        """
        route_policy: NotRequired[pulumi.Input[_builtins.str]]
        """
        Set Route Policy to OMP
        """
        route_policy_variable: NotRequired[pulumi.Input[_builtins.str]]
        """
        Variable name
        """
elif False:
    CiscoVpnFeatureTemplateOmpAdvertiseIpv4RouteArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class CiscoVpnFeatureTemplateOmpAdvertiseIpv4RouteArgs:
    def __init__(__self__, *,
                 optional: Optional[pulumi.Input[_builtins.bool]] = None,
                 prefixes: Optional[pulumi.Input[Sequence[pulumi.Input['CiscoVpnFeatureTemplateOmpAdvertiseIpv4RoutePrefixArgs']]]] = None,
                 protocol: Optional[pulumi.Input[_builtins.str]] = None,
                 protocol_sub_type_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 protocol_sub_types: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 protocol_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 route_policy: Optional[pulumi.Input[_builtins.str]] = None,
                 route_policy_variable: Optional[pulumi.Input[_builtins.str]] = None):
        """
        :param pulumi.Input[_builtins.bool] optional: Indicates if list item is considered optional.
        :param pulumi.Input[_builtins.str] protocol: Advertised routes protocol
                 - Choices: `bgp`, `ospf`, `ospfv3`, `connected`, `static`, `network`, `aggregate`, `eigrp`, `lisp`, `isis`
        :param pulumi.Input[_builtins.str] protocol_sub_type_variable: Variable name
        :param pulumi.Input[_builtins.str] protocol_variable: Variable name
        :param pulumi.Input[_builtins.str] route_policy: Set Route Policy to OMP
        :param pulumi.Input[_builtins.str] route_policy_variable: Variable name
        """
        if optional is not None:
            pulumi.set(__self__, "optional", optional)
        if prefixes is not None:
            pulumi.set(__self__, "prefixes", prefixes)
        if protocol is not None:
            pulumi.set(__self__, "protocol", protocol)
        if protocol_sub_type_variable is not None:
            pulumi.set(__self__, "protocol_sub_type_variable", protocol_sub_type_variable)
        if protocol_sub_types is not None:
            pulumi.set(__self__, "protocol_sub_types", protocol_sub_types)
        if protocol_variable is not None:
            pulumi.set(__self__, "protocol_variable", protocol_variable)
        if route_policy is not None:
            pulumi.set(__self__, "route_policy", route_policy)
        if route_policy_variable is not None:
            pulumi.set(__self__, "route_policy_variable", route_policy_variable)

    @_builtins.property
    @pulumi.getter
    def optional(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Indicates if list item is considered optional.
        """
        return pulumi.get(self, "optional")

    @optional.setter
    def optional(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "optional", value)

    @_builtins.property
    @pulumi.getter
    def prefixes(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['CiscoVpnFeatureTemplateOmpAdvertiseIpv4RoutePrefixArgs']]]]:
        return pulumi.get(self, "prefixes")

    @prefixes.setter
    def prefixes(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['CiscoVpnFeatureTemplateOmpAdvertiseIpv4RoutePrefixArgs']]]]):
        pulumi.set(self, "prefixes", value)

    @_builtins.property
    @pulumi.getter
    def protocol(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Advertised routes protocol
          - Choices: `bgp`, `ospf`, `ospfv3`, `connected`, `static`, `network`, `aggregate`, `eigrp`, `lisp`, `isis`
        """
        return pulumi.get(self, "protocol")

    @protocol.setter
    def protocol(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "protocol", value)

    @_builtins.property
    @pulumi.getter(name="protocolSubTypeVariable")
    def protocol_sub_type_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "protocol_sub_type_variable")

    @protocol_sub_type_variable.setter
    def protocol_sub_type_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "protocol_sub_type_variable", value)

    @_builtins.property
    @pulumi.getter(name="protocolSubTypes")
    def protocol_sub_types(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]:
        return pulumi.get(self, "protocol_sub_types")

    @protocol_sub_types.setter
    def protocol_sub_types(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "protocol_sub_types", value)

    @_builtins.property
    @pulumi.getter(name="protocolVariable")
    def protocol_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "protocol_variable")

    @protocol_variable.setter
    def protocol_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "protocol_variable", value)

    @_builtins.property
    @pulumi.getter(name="routePolicy")
    def route_policy(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Set Route Policy to OMP
        """
        return pulumi.get(self, "route_policy")

    @route_policy.setter
    def route_policy(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "route_policy", value)

    @_builtins.property
    @pulumi.getter(name="routePolicyVariable")
    def route_policy_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "route_policy_variable")

    @route_policy_variable.setter
    def route_policy_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "route_policy_variable", value)


if not MYPY:
    class CiscoVpnFeatureTemplateOmpAdvertiseIpv4RoutePrefixArgsDict(TypedDict):
        aggregate_only: NotRequired[pulumi.Input[_builtins.bool]]
        """
        Aggregate Only
          - Default value: `false`
        """
        aggregate_only_variable: NotRequired[pulumi.Input[_builtins.str]]
        """
        Variable name
        """
        optional: NotRequired[pulumi.Input[_builtins.bool]]
        """
        Indicates if list item is considered optional.
        """
        prefix_entry: NotRequired[pulumi.Input[_builtins.str]]
        """
        Prefix
        """
        prefix_entry_variable: NotRequired[pulumi.Input[_builtins.str]]
        """
        Variable name
        """
elif False:
    CiscoVpnFeatureTemplateOmpAdvertiseIpv4RoutePrefixArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class CiscoVpnFeatureTemplateOmpAdvertiseIpv4RoutePrefixArgs:
    def __init__(__self__, *,
                 aggregate_only: Optional[pulumi.Input[_builtins.bool]] = None,
                 aggregate_only_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 optional: Optional[pulumi.Input[_builtins.bool]] = None,
                 prefix_entry: Optional[pulumi.Input[_builtins.str]] = None,
                 prefix_entry_variable: Optional[pulumi.Input[_builtins.str]] = None):
        """
        :param pulumi.Input[_builtins.bool] aggregate_only: Aggregate Only
                 - Default value: `false`
        :param pulumi.Input[_builtins.str] aggregate_only_variable: Variable name
        :param pulumi.Input[_builtins.bool] optional: Indicates if list item is considered optional.
        :param pulumi.Input[_builtins.str] prefix_entry: Prefix
        :param pulumi.Input[_builtins.str] prefix_entry_variable: Variable name
        """
        if aggregate_only is not None:
            pulumi.set(__self__, "aggregate_only", aggregate_only)
        if aggregate_only_variable is not None:
            pulumi.set(__self__, "aggregate_only_variable", aggregate_only_variable)
        if optional is not None:
            pulumi.set(__self__, "optional", optional)
        if prefix_entry is not None:
            pulumi.set(__self__, "prefix_entry", prefix_entry)
        if prefix_entry_variable is not None:
            pulumi.set(__self__, "prefix_entry_variable", prefix_entry_variable)

    @_builtins.property
    @pulumi.getter(name="aggregateOnly")
    def aggregate_only(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Aggregate Only
          - Default value: `false`
        """
        return pulumi.get(self, "aggregate_only")

    @aggregate_only.setter
    def aggregate_only(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "aggregate_only", value)

    @_builtins.property
    @pulumi.getter(name="aggregateOnlyVariable")
    def aggregate_only_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "aggregate_only_variable")

    @aggregate_only_variable.setter
    def aggregate_only_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "aggregate_only_variable", value)

    @_builtins.property
    @pulumi.getter
    def optional(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Indicates if list item is considered optional.
        """
        return pulumi.get(self, "optional")

    @optional.setter
    def optional(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "optional", value)

    @_builtins.property
    @pulumi.getter(name="prefixEntry")
    def prefix_entry(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Prefix
        """
        return pulumi.get(self, "prefix_entry")

    @prefix_entry.setter
    def prefix_entry(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "prefix_entry", value)

    @_builtins.property
    @pulumi.getter(name="prefixEntryVariable")
    def prefix_entry_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "prefix_entry_variable")

    @prefix_entry_variable.setter
    def prefix_entry_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "prefix_entry_variable", value)


if not MYPY:
    class CiscoVpnFeatureTemplateOmpAdvertiseIpv6RouteArgsDict(TypedDict):
        optional: NotRequired[pulumi.Input[_builtins.bool]]
        """
        Indicates if list item is considered optional.
        """
        prefixes: NotRequired[pulumi.Input[Sequence[pulumi.Input['CiscoVpnFeatureTemplateOmpAdvertiseIpv6RoutePrefixArgsDict']]]]
        protocol: NotRequired[pulumi.Input[_builtins.str]]
        """
        Advertised routes protocol
          - Choices: `bgp`, `ospf`, `connected`, `static`, `network`, `aggregate`
        """
        protocol_sub_type_variable: NotRequired[pulumi.Input[_builtins.str]]
        """
        Variable name
        """
        protocol_sub_types: NotRequired[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]
        protocol_variable: NotRequired[pulumi.Input[_builtins.str]]
        """
        Variable name
        """
        route_policy: NotRequired[pulumi.Input[_builtins.str]]
        route_policy_variable: NotRequired[pulumi.Input[_builtins.str]]
        """
        Variable name
        """
elif False:
    CiscoVpnFeatureTemplateOmpAdvertiseIpv6RouteArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class CiscoVpnFeatureTemplateOmpAdvertiseIpv6RouteArgs:
    def __init__(__self__, *,
                 optional: Optional[pulumi.Input[_builtins.bool]] = None,
                 prefixes: Optional[pulumi.Input[Sequence[pulumi.Input['CiscoVpnFeatureTemplateOmpAdvertiseIpv6RoutePrefixArgs']]]] = None,
                 protocol: Optional[pulumi.Input[_builtins.str]] = None,
                 protocol_sub_type_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 protocol_sub_types: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 protocol_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 route_policy: Optional[pulumi.Input[_builtins.str]] = None,
                 route_policy_variable: Optional[pulumi.Input[_builtins.str]] = None):
        """
        :param pulumi.Input[_builtins.bool] optional: Indicates if list item is considered optional.
        :param pulumi.Input[_builtins.str] protocol: Advertised routes protocol
                 - Choices: `bgp`, `ospf`, `connected`, `static`, `network`, `aggregate`
        :param pulumi.Input[_builtins.str] protocol_sub_type_variable: Variable name
        :param pulumi.Input[_builtins.str] protocol_variable: Variable name
        :param pulumi.Input[_builtins.str] route_policy_variable: Variable name
        """
        if optional is not None:
            pulumi.set(__self__, "optional", optional)
        if prefixes is not None:
            pulumi.set(__self__, "prefixes", prefixes)
        if protocol is not None:
            pulumi.set(__self__, "protocol", protocol)
        if protocol_sub_type_variable is not None:
            pulumi.set(__self__, "protocol_sub_type_variable", protocol_sub_type_variable)
        if protocol_sub_types is not None:
            pulumi.set(__self__, "protocol_sub_types", protocol_sub_types)
        if protocol_variable is not None:
            pulumi.set(__self__, "protocol_variable", protocol_variable)
        if route_policy is not None:
            pulumi.set(__self__, "route_policy", route_policy)
        if route_policy_variable is not None:
            pulumi.set(__self__, "route_policy_variable", route_policy_variable)

    @_builtins.property
    @pulumi.getter
    def optional(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Indicates if list item is considered optional.
        """
        return pulumi.get(self, "optional")

    @optional.setter
    def optional(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "optional", value)

    @_builtins.property
    @pulumi.getter
    def prefixes(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['CiscoVpnFeatureTemplateOmpAdvertiseIpv6RoutePrefixArgs']]]]:
        return pulumi.get(self, "prefixes")

    @prefixes.setter
    def prefixes(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['CiscoVpnFeatureTemplateOmpAdvertiseIpv6RoutePrefixArgs']]]]):
        pulumi.set(self, "prefixes", value)

    @_builtins.property
    @pulumi.getter
    def protocol(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Advertised routes protocol
          - Choices: `bgp`, `ospf`, `connected`, `static`, `network`, `aggregate`
        """
        return pulumi.get(self, "protocol")

    @protocol.setter
    def protocol(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "protocol", value)

    @_builtins.property
    @pulumi.getter(name="protocolSubTypeVariable")
    def protocol_sub_type_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "protocol_sub_type_variable")

    @protocol_sub_type_variable.setter
    def protocol_sub_type_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "protocol_sub_type_variable", value)

    @_builtins.property
    @pulumi.getter(name="protocolSubTypes")
    def protocol_sub_types(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]:
        return pulumi.get(self, "protocol_sub_types")

    @protocol_sub_types.setter
    def protocol_sub_types(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "protocol_sub_types", value)

    @_builtins.property
    @pulumi.getter(name="protocolVariable")
    def protocol_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "protocol_variable")

    @protocol_variable.setter
    def protocol_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "protocol_variable", value)

    @_builtins.property
    @pulumi.getter(name="routePolicy")
    def route_policy(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "route_policy")

    @route_policy.setter
    def route_policy(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "route_policy", value)

    @_builtins.property
    @pulumi.getter(name="routePolicyVariable")
    def route_policy_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "route_policy_variable")

    @route_policy_variable.setter
    def route_policy_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "route_policy_variable", value)


if not MYPY:
    class CiscoVpnFeatureTemplateOmpAdvertiseIpv6RoutePrefixArgsDict(TypedDict):
        aggregate_only: NotRequired[pulumi.Input[_builtins.bool]]
        """
        Aggregate Only
          - Default value: `false`
        """
        aggregate_only_variable: NotRequired[pulumi.Input[_builtins.str]]
        """
        Variable name
        """
        optional: NotRequired[pulumi.Input[_builtins.bool]]
        """
        Indicates if list item is considered optional.
        """
        prefix_entry: NotRequired[pulumi.Input[_builtins.str]]
        """
        Prefix
        """
        prefix_entry_variable: NotRequired[pulumi.Input[_builtins.str]]
        """
        Variable name
        """
elif False:
    CiscoVpnFeatureTemplateOmpAdvertiseIpv6RoutePrefixArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class CiscoVpnFeatureTemplateOmpAdvertiseIpv6RoutePrefixArgs:
    def __init__(__self__, *,
                 aggregate_only: Optional[pulumi.Input[_builtins.bool]] = None,
                 aggregate_only_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 optional: Optional[pulumi.Input[_builtins.bool]] = None,
                 prefix_entry: Optional[pulumi.Input[_builtins.str]] = None,
                 prefix_entry_variable: Optional[pulumi.Input[_builtins.str]] = None):
        """
        :param pulumi.Input[_builtins.bool] aggregate_only: Aggregate Only
                 - Default value: `false`
        :param pulumi.Input[_builtins.str] aggregate_only_variable: Variable name
        :param pulumi.Input[_builtins.bool] optional: Indicates if list item is considered optional.
        :param pulumi.Input[_builtins.str] prefix_entry: Prefix
        :param pulumi.Input[_builtins.str] prefix_entry_variable: Variable name
        """
        if aggregate_only is not None:
            pulumi.set(__self__, "aggregate_only", aggregate_only)
        if aggregate_only_variable is not None:
            pulumi.set(__self__, "aggregate_only_variable", aggregate_only_variable)
        if optional is not None:
            pulumi.set(__self__, "optional", optional)
        if prefix_entry is not None:
            pulumi.set(__self__, "prefix_entry", prefix_entry)
        if prefix_entry_variable is not None:
            pulumi.set(__self__, "prefix_entry_variable", prefix_entry_variable)

    @_builtins.property
    @pulumi.getter(name="aggregateOnly")
    def aggregate_only(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Aggregate Only
          - Default value: `false`
        """
        return pulumi.get(self, "aggregate_only")

    @aggregate_only.setter
    def aggregate_only(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "aggregate_only", value)

    @_builtins.property
    @pulumi.getter(name="aggregateOnlyVariable")
    def aggregate_only_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "aggregate_only_variable")

    @aggregate_only_variable.setter
    def aggregate_only_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "aggregate_only_variable", value)

    @_builtins.property
    @pulumi.getter
    def optional(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Indicates if list item is considered optional.
        """
        return pulumi.get(self, "optional")

    @optional.setter
    def optional(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "optional", value)

    @_builtins.property
    @pulumi.getter(name="prefixEntry")
    def prefix_entry(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Prefix
        """
        return pulumi.get(self, "prefix_entry")

    @prefix_entry.setter
    def prefix_entry(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "prefix_entry", value)

    @_builtins.property
    @pulumi.getter(name="prefixEntryVariable")
    def prefix_entry_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "prefix_entry_variable")

    @prefix_entry_variable.setter
    def prefix_entry_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "prefix_entry_variable", value)


if not MYPY:
    class CiscoVpnFeatureTemplatePortForwardRuleArgsDict(TypedDict):
        optional: NotRequired[pulumi.Input[_builtins.bool]]
        """
        Indicates if list item is considered optional.
        """
        pool_name: NotRequired[pulumi.Input[_builtins.int]]
        """
        NAT Pool Name, natpool1..31
        """
        pool_name_variable: NotRequired[pulumi.Input[_builtins.str]]
        """
        Variable name
        """
        protocol: NotRequired[pulumi.Input[_builtins.str]]
        """
        Protocol
          - Choices: `tcp`, `udp`
        """
        protocol_variable: NotRequired[pulumi.Input[_builtins.str]]
        """
        Variable name
        """
        source_ip: NotRequired[pulumi.Input[_builtins.str]]
        """
        Source IP address to be translated
        """
        source_ip_variable: NotRequired[pulumi.Input[_builtins.str]]
        """
        Variable name
        """
        source_port: NotRequired[pulumi.Input[_builtins.int]]
        """
        Source Port
          - Default value: `0`
        """
        source_port_variable: NotRequired[pulumi.Input[_builtins.str]]
        """
        Variable name
        """
        translate_ip: NotRequired[pulumi.Input[_builtins.str]]
        """
        Statically translated source IP address
        """
        translate_ip_variable: NotRequired[pulumi.Input[_builtins.str]]
        """
        Variable name
        """
        translate_port: NotRequired[pulumi.Input[_builtins.int]]
        """
        Translate Port
          - Default value: `0`
        """
        translate_port_variable: NotRequired[pulumi.Input[_builtins.str]]
        """
        Variable name
        """
elif False:
    CiscoVpnFeatureTemplatePortForwardRuleArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class CiscoVpnFeatureTemplatePortForwardRuleArgs:
    def __init__(__self__, *,
                 optional: Optional[pulumi.Input[_builtins.bool]] = None,
                 pool_name: Optional[pulumi.Input[_builtins.int]] = None,
                 pool_name_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 protocol: Optional[pulumi.Input[_builtins.str]] = None,
                 protocol_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 source_ip: Optional[pulumi.Input[_builtins.str]] = None,
                 source_ip_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 source_port: Optional[pulumi.Input[_builtins.int]] = None,
                 source_port_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 translate_ip: Optional[pulumi.Input[_builtins.str]] = None,
                 translate_ip_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 translate_port: Optional[pulumi.Input[_builtins.int]] = None,
                 translate_port_variable: Optional[pulumi.Input[_builtins.str]] = None):
        """
        :param pulumi.Input[_builtins.bool] optional: Indicates if list item is considered optional.
        :param pulumi.Input[_builtins.int] pool_name: NAT Pool Name, natpool1..31
        :param pulumi.Input[_builtins.str] pool_name_variable: Variable name
        :param pulumi.Input[_builtins.str] protocol: Protocol
                 - Choices: `tcp`, `udp`
        :param pulumi.Input[_builtins.str] protocol_variable: Variable name
        :param pulumi.Input[_builtins.str] source_ip: Source IP address to be translated
        :param pulumi.Input[_builtins.str] source_ip_variable: Variable name
        :param pulumi.Input[_builtins.int] source_port: Source Port
                 - Default value: `0`
        :param pulumi.Input[_builtins.str] source_port_variable: Variable name
        :param pulumi.Input[_builtins.str] translate_ip: Statically translated source IP address
        :param pulumi.Input[_builtins.str] translate_ip_variable: Variable name
        :param pulumi.Input[_builtins.int] translate_port: Translate Port
                 - Default value: `0`
        :param pulumi.Input[_builtins.str] translate_port_variable: Variable name
        """
        if optional is not None:
            pulumi.set(__self__, "optional", optional)
        if pool_name is not None:
            pulumi.set(__self__, "pool_name", pool_name)
        if pool_name_variable is not None:
            pulumi.set(__self__, "pool_name_variable", pool_name_variable)
        if protocol is not None:
            pulumi.set(__self__, "protocol", protocol)
        if protocol_variable is not None:
            pulumi.set(__self__, "protocol_variable", protocol_variable)
        if source_ip is not None:
            pulumi.set(__self__, "source_ip", source_ip)
        if source_ip_variable is not None:
            pulumi.set(__self__, "source_ip_variable", source_ip_variable)
        if source_port is not None:
            pulumi.set(__self__, "source_port", source_port)
        if source_port_variable is not None:
            pulumi.set(__self__, "source_port_variable", source_port_variable)
        if translate_ip is not None:
            pulumi.set(__self__, "translate_ip", translate_ip)
        if translate_ip_variable is not None:
            pulumi.set(__self__, "translate_ip_variable", translate_ip_variable)
        if translate_port is not None:
            pulumi.set(__self__, "translate_port", translate_port)
        if translate_port_variable is not None:
            pulumi.set(__self__, "translate_port_variable", translate_port_variable)

    @_builtins.property
    @pulumi.getter
    def optional(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Indicates if list item is considered optional.
        """
        return pulumi.get(self, "optional")

    @optional.setter
    def optional(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "optional", value)

    @_builtins.property
    @pulumi.getter(name="poolName")
    def pool_name(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        NAT Pool Name, natpool1..31
        """
        return pulumi.get(self, "pool_name")

    @pool_name.setter
    def pool_name(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "pool_name", value)

    @_builtins.property
    @pulumi.getter(name="poolNameVariable")
    def pool_name_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "pool_name_variable")

    @pool_name_variable.setter
    def pool_name_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "pool_name_variable", value)

    @_builtins.property
    @pulumi.getter
    def protocol(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Protocol
          - Choices: `tcp`, `udp`
        """
        return pulumi.get(self, "protocol")

    @protocol.setter
    def protocol(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "protocol", value)

    @_builtins.property
    @pulumi.getter(name="protocolVariable")
    def protocol_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "protocol_variable")

    @protocol_variable.setter
    def protocol_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "protocol_variable", value)

    @_builtins.property
    @pulumi.getter(name="sourceIp")
    def source_ip(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Source IP address to be translated
        """
        return pulumi.get(self, "source_ip")

    @source_ip.setter
    def source_ip(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "source_ip", value)

    @_builtins.property
    @pulumi.getter(name="sourceIpVariable")
    def source_ip_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "source_ip_variable")

    @source_ip_variable.setter
    def source_ip_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "source_ip_variable", value)

    @_builtins.property
    @pulumi.getter(name="sourcePort")
    def source_port(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        Source Port
          - Default value: `0`
        """
        return pulumi.get(self, "source_port")

    @source_port.setter
    def source_port(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "source_port", value)

    @_builtins.property
    @pulumi.getter(name="sourcePortVariable")
    def source_port_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "source_port_variable")

    @source_port_variable.setter
    def source_port_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "source_port_variable", value)

    @_builtins.property
    @pulumi.getter(name="translateIp")
    def translate_ip(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Statically translated source IP address
        """
        return pulumi.get(self, "translate_ip")

    @translate_ip.setter
    def translate_ip(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "translate_ip", value)

    @_builtins.property
    @pulumi.getter(name="translateIpVariable")
    def translate_ip_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "translate_ip_variable")

    @translate_ip_variable.setter
    def translate_ip_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "translate_ip_variable", value)

    @_builtins.property
    @pulumi.getter(name="translatePort")
    def translate_port(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        Translate Port
          - Default value: `0`
        """
        return pulumi.get(self, "translate_port")

    @translate_port.setter
    def translate_port(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "translate_port", value)

    @_builtins.property
    @pulumi.getter(name="translatePortVariable")
    def translate_port_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "translate_port_variable")

    @translate_port_variable.setter
    def translate_port_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "translate_port_variable", value)


if not MYPY:
    class CiscoVpnFeatureTemplateRouteGlobalExportArgsDict(TypedDict):
        optional: NotRequired[pulumi.Input[_builtins.bool]]
        """
        Indicates if list item is considered optional.
        """
        protocol: NotRequired[pulumi.Input[_builtins.str]]
        """
        Select a Route Protocol to enable route leaking from this Service VPN to Global VPN
          - Choices: `static`, `connected`, `bgp`, `eigrp`, `ospf`
        """
        protocol_sub_type_variable: NotRequired[pulumi.Input[_builtins.str]]
        """
        Variable name
        """
        protocol_sub_types: NotRequired[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]
        """
        - Default value: `external`
        """
        protocol_variable: NotRequired[pulumi.Input[_builtins.str]]
        """
        Variable name
        """
        redistributes: NotRequired[pulumi.Input[Sequence[pulumi.Input['CiscoVpnFeatureTemplateRouteGlobalExportRedistributeArgsDict']]]]
        """
        Enable redistribution of replicated route protocol
        """
        route_policy: NotRequired[pulumi.Input[_builtins.str]]
        """
        Select a Route Policy to enable route leaking from this Service VPN to Global VPN
        """
elif False:
    CiscoVpnFeatureTemplateRouteGlobalExportArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class CiscoVpnFeatureTemplateRouteGlobalExportArgs:
    def __init__(__self__, *,
                 optional: Optional[pulumi.Input[_builtins.bool]] = None,
                 protocol: Optional[pulumi.Input[_builtins.str]] = None,
                 protocol_sub_type_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 protocol_sub_types: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 protocol_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 redistributes: Optional[pulumi.Input[Sequence[pulumi.Input['CiscoVpnFeatureTemplateRouteGlobalExportRedistributeArgs']]]] = None,
                 route_policy: Optional[pulumi.Input[_builtins.str]] = None):
        """
        :param pulumi.Input[_builtins.bool] optional: Indicates if list item is considered optional.
        :param pulumi.Input[_builtins.str] protocol: Select a Route Protocol to enable route leaking from this Service VPN to Global VPN
                 - Choices: `static`, `connected`, `bgp`, `eigrp`, `ospf`
        :param pulumi.Input[_builtins.str] protocol_sub_type_variable: Variable name
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] protocol_sub_types: - Default value: `external`
        :param pulumi.Input[_builtins.str] protocol_variable: Variable name
        :param pulumi.Input[Sequence[pulumi.Input['CiscoVpnFeatureTemplateRouteGlobalExportRedistributeArgs']]] redistributes: Enable redistribution of replicated route protocol
        :param pulumi.Input[_builtins.str] route_policy: Select a Route Policy to enable route leaking from this Service VPN to Global VPN
        """
        if optional is not None:
            pulumi.set(__self__, "optional", optional)
        if protocol is not None:
            pulumi.set(__self__, "protocol", protocol)
        if protocol_sub_type_variable is not None:
            pulumi.set(__self__, "protocol_sub_type_variable", protocol_sub_type_variable)
        if protocol_sub_types is not None:
            pulumi.set(__self__, "protocol_sub_types", protocol_sub_types)
        if protocol_variable is not None:
            pulumi.set(__self__, "protocol_variable", protocol_variable)
        if redistributes is not None:
            pulumi.set(__self__, "redistributes", redistributes)
        if route_policy is not None:
            pulumi.set(__self__, "route_policy", route_policy)

    @_builtins.property
    @pulumi.getter
    def optional(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Indicates if list item is considered optional.
        """
        return pulumi.get(self, "optional")

    @optional.setter
    def optional(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "optional", value)

    @_builtins.property
    @pulumi.getter
    def protocol(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Select a Route Protocol to enable route leaking from this Service VPN to Global VPN
          - Choices: `static`, `connected`, `bgp`, `eigrp`, `ospf`
        """
        return pulumi.get(self, "protocol")

    @protocol.setter
    def protocol(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "protocol", value)

    @_builtins.property
    @pulumi.getter(name="protocolSubTypeVariable")
    def protocol_sub_type_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "protocol_sub_type_variable")

    @protocol_sub_type_variable.setter
    def protocol_sub_type_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "protocol_sub_type_variable", value)

    @_builtins.property
    @pulumi.getter(name="protocolSubTypes")
    def protocol_sub_types(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]:
        """
        - Default value: `external`
        """
        return pulumi.get(self, "protocol_sub_types")

    @protocol_sub_types.setter
    def protocol_sub_types(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "protocol_sub_types", value)

    @_builtins.property
    @pulumi.getter(name="protocolVariable")
    def protocol_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "protocol_variable")

    @protocol_variable.setter
    def protocol_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "protocol_variable", value)

    @_builtins.property
    @pulumi.getter
    def redistributes(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['CiscoVpnFeatureTemplateRouteGlobalExportRedistributeArgs']]]]:
        """
        Enable redistribution of replicated route protocol
        """
        return pulumi.get(self, "redistributes")

    @redistributes.setter
    def redistributes(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['CiscoVpnFeatureTemplateRouteGlobalExportRedistributeArgs']]]]):
        pulumi.set(self, "redistributes", value)

    @_builtins.property
    @pulumi.getter(name="routePolicy")
    def route_policy(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Select a Route Policy to enable route leaking from this Service VPN to Global VPN
        """
        return pulumi.get(self, "route_policy")

    @route_policy.setter
    def route_policy(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "route_policy", value)


if not MYPY:
    class CiscoVpnFeatureTemplateRouteGlobalExportRedistributeArgsDict(TypedDict):
        optional: NotRequired[pulumi.Input[_builtins.bool]]
        """
        Indicates if list item is considered optional.
        """
        protocol: NotRequired[pulumi.Input[_builtins.str]]
        """
        Select a Route Protocol to enable redistribution
          - Choices: `bgp`, `ospf`
        """
        protocol_variable: NotRequired[pulumi.Input[_builtins.str]]
        """
        Variable name
        """
        route_policy: NotRequired[pulumi.Input[_builtins.str]]
        """
        Select a Route Policy to enable redistribution
        """
elif False:
    CiscoVpnFeatureTemplateRouteGlobalExportRedistributeArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class CiscoVpnFeatureTemplateRouteGlobalExportRedistributeArgs:
    def __init__(__self__, *,
                 optional: Optional[pulumi.Input[_builtins.bool]] = None,
                 protocol: Optional[pulumi.Input[_builtins.str]] = None,
                 protocol_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 route_policy: Optional[pulumi.Input[_builtins.str]] = None):
        """
        :param pulumi.Input[_builtins.bool] optional: Indicates if list item is considered optional.
        :param pulumi.Input[_builtins.str] protocol: Select a Route Protocol to enable redistribution
                 - Choices: `bgp`, `ospf`
        :param pulumi.Input[_builtins.str] protocol_variable: Variable name
        :param pulumi.Input[_builtins.str] route_policy: Select a Route Policy to enable redistribution
        """
        if optional is not None:
            pulumi.set(__self__, "optional", optional)
        if protocol is not None:
            pulumi.set(__self__, "protocol", protocol)
        if protocol_variable is not None:
            pulumi.set(__self__, "protocol_variable", protocol_variable)
        if route_policy is not None:
            pulumi.set(__self__, "route_policy", route_policy)

    @_builtins.property
    @pulumi.getter
    def optional(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Indicates if list item is considered optional.
        """
        return pulumi.get(self, "optional")

    @optional.setter
    def optional(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "optional", value)

    @_builtins.property
    @pulumi.getter
    def protocol(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Select a Route Protocol to enable redistribution
          - Choices: `bgp`, `ospf`
        """
        return pulumi.get(self, "protocol")

    @protocol.setter
    def protocol(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "protocol", value)

    @_builtins.property
    @pulumi.getter(name="protocolVariable")
    def protocol_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "protocol_variable")

    @protocol_variable.setter
    def protocol_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "protocol_variable", value)

    @_builtins.property
    @pulumi.getter(name="routePolicy")
    def route_policy(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Select a Route Policy to enable redistribution
        """
        return pulumi.get(self, "route_policy")

    @route_policy.setter
    def route_policy(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "route_policy", value)


if not MYPY:
    class CiscoVpnFeatureTemplateRouteGlobalImportArgsDict(TypedDict):
        optional: NotRequired[pulumi.Input[_builtins.bool]]
        """
        Indicates if list item is considered optional.
        """
        protocol: NotRequired[pulumi.Input[_builtins.str]]
        """
        Select a Route Protocol to enable route leaking from Global VPN to this Service VPN
          - Choices: `static`, `connected`, `bgp`, `ospf`
        """
        protocol_sub_type_variable: NotRequired[pulumi.Input[_builtins.str]]
        """
        Variable name
        """
        protocol_sub_types: NotRequired[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]
        """
        - Default value: `external`
        """
        protocol_variable: NotRequired[pulumi.Input[_builtins.str]]
        """
        Variable name
        """
        redistributes: NotRequired[pulumi.Input[Sequence[pulumi.Input['CiscoVpnFeatureTemplateRouteGlobalImportRedistributeArgsDict']]]]
        """
        Enable redistribution of replicated route protocol
        """
        route_policy: NotRequired[pulumi.Input[_builtins.str]]
        """
        Select a Route Policy to enable route leaking from Global VPN to this Service VPN
        """
elif False:
    CiscoVpnFeatureTemplateRouteGlobalImportArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class CiscoVpnFeatureTemplateRouteGlobalImportArgs:
    def __init__(__self__, *,
                 optional: Optional[pulumi.Input[_builtins.bool]] = None,
                 protocol: Optional[pulumi.Input[_builtins.str]] = None,
                 protocol_sub_type_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 protocol_sub_types: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 protocol_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 redistributes: Optional[pulumi.Input[Sequence[pulumi.Input['CiscoVpnFeatureTemplateRouteGlobalImportRedistributeArgs']]]] = None,
                 route_policy: Optional[pulumi.Input[_builtins.str]] = None):
        """
        :param pulumi.Input[_builtins.bool] optional: Indicates if list item is considered optional.
        :param pulumi.Input[_builtins.str] protocol: Select a Route Protocol to enable route leaking from Global VPN to this Service VPN
                 - Choices: `static`, `connected`, `bgp`, `ospf`
        :param pulumi.Input[_builtins.str] protocol_sub_type_variable: Variable name
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] protocol_sub_types: - Default value: `external`
        :param pulumi.Input[_builtins.str] protocol_variable: Variable name
        :param pulumi.Input[Sequence[pulumi.Input['CiscoVpnFeatureTemplateRouteGlobalImportRedistributeArgs']]] redistributes: Enable redistribution of replicated route protocol
        :param pulumi.Input[_builtins.str] route_policy: Select a Route Policy to enable route leaking from Global VPN to this Service VPN
        """
        if optional is not None:
            pulumi.set(__self__, "optional", optional)
        if protocol is not None:
            pulumi.set(__self__, "protocol", protocol)
        if protocol_sub_type_variable is not None:
            pulumi.set(__self__, "protocol_sub_type_variable", protocol_sub_type_variable)
        if protocol_sub_types is not None:
            pulumi.set(__self__, "protocol_sub_types", protocol_sub_types)
        if protocol_variable is not None:
            pulumi.set(__self__, "protocol_variable", protocol_variable)
        if redistributes is not None:
            pulumi.set(__self__, "redistributes", redistributes)
        if route_policy is not None:
            pulumi.set(__self__, "route_policy", route_policy)

    @_builtins.property
    @pulumi.getter
    def optional(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Indicates if list item is considered optional.
        """
        return pulumi.get(self, "optional")

    @optional.setter
    def optional(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "optional", value)

    @_builtins.property
    @pulumi.getter
    def protocol(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Select a Route Protocol to enable route leaking from Global VPN to this Service VPN
          - Choices: `static`, `connected`, `bgp`, `ospf`
        """
        return pulumi.get(self, "protocol")

    @protocol.setter
    def protocol(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "protocol", value)

    @_builtins.property
    @pulumi.getter(name="protocolSubTypeVariable")
    def protocol_sub_type_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "protocol_sub_type_variable")

    @protocol_sub_type_variable.setter
    def protocol_sub_type_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "protocol_sub_type_variable", value)

    @_builtins.property
    @pulumi.getter(name="protocolSubTypes")
    def protocol_sub_types(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]:
        """
        - Default value: `external`
        """
        return pulumi.get(self, "protocol_sub_types")

    @protocol_sub_types.setter
    def protocol_sub_types(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "protocol_sub_types", value)

    @_builtins.property
    @pulumi.getter(name="protocolVariable")
    def protocol_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "protocol_variable")

    @protocol_variable.setter
    def protocol_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "protocol_variable", value)

    @_builtins.property
    @pulumi.getter
    def redistributes(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['CiscoVpnFeatureTemplateRouteGlobalImportRedistributeArgs']]]]:
        """
        Enable redistribution of replicated route protocol
        """
        return pulumi.get(self, "redistributes")

    @redistributes.setter
    def redistributes(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['CiscoVpnFeatureTemplateRouteGlobalImportRedistributeArgs']]]]):
        pulumi.set(self, "redistributes", value)

    @_builtins.property
    @pulumi.getter(name="routePolicy")
    def route_policy(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Select a Route Policy to enable route leaking from Global VPN to this Service VPN
        """
        return pulumi.get(self, "route_policy")

    @route_policy.setter
    def route_policy(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "route_policy", value)


if not MYPY:
    class CiscoVpnFeatureTemplateRouteGlobalImportRedistributeArgsDict(TypedDict):
        optional: NotRequired[pulumi.Input[_builtins.bool]]
        """
        Indicates if list item is considered optional.
        """
        protocol: NotRequired[pulumi.Input[_builtins.str]]
        """
        Select a Route Protocol to enable redistribution
          - Choices: `bgp`, `eigrp`, `ospf`
        """
        protocol_variable: NotRequired[pulumi.Input[_builtins.str]]
        """
        Variable name
        """
        route_policy: NotRequired[pulumi.Input[_builtins.str]]
        """
        Select a Route Policy to enable redistribution
        """
elif False:
    CiscoVpnFeatureTemplateRouteGlobalImportRedistributeArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class CiscoVpnFeatureTemplateRouteGlobalImportRedistributeArgs:
    def __init__(__self__, *,
                 optional: Optional[pulumi.Input[_builtins.bool]] = None,
                 protocol: Optional[pulumi.Input[_builtins.str]] = None,
                 protocol_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 route_policy: Optional[pulumi.Input[_builtins.str]] = None):
        """
        :param pulumi.Input[_builtins.bool] optional: Indicates if list item is considered optional.
        :param pulumi.Input[_builtins.str] protocol: Select a Route Protocol to enable redistribution
                 - Choices: `bgp`, `eigrp`, `ospf`
        :param pulumi.Input[_builtins.str] protocol_variable: Variable name
        :param pulumi.Input[_builtins.str] route_policy: Select a Route Policy to enable redistribution
        """
        if optional is not None:
            pulumi.set(__self__, "optional", optional)
        if protocol is not None:
            pulumi.set(__self__, "protocol", protocol)
        if protocol_variable is not None:
            pulumi.set(__self__, "protocol_variable", protocol_variable)
        if route_policy is not None:
            pulumi.set(__self__, "route_policy", route_policy)

    @_builtins.property
    @pulumi.getter
    def optional(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Indicates if list item is considered optional.
        """
        return pulumi.get(self, "optional")

    @optional.setter
    def optional(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "optional", value)

    @_builtins.property
    @pulumi.getter
    def protocol(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Select a Route Protocol to enable redistribution
          - Choices: `bgp`, `eigrp`, `ospf`
        """
        return pulumi.get(self, "protocol")

    @protocol.setter
    def protocol(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "protocol", value)

    @_builtins.property
    @pulumi.getter(name="protocolVariable")
    def protocol_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "protocol_variable")

    @protocol_variable.setter
    def protocol_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "protocol_variable", value)

    @_builtins.property
    @pulumi.getter(name="routePolicy")
    def route_policy(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Select a Route Policy to enable redistribution
        """
        return pulumi.get(self, "route_policy")

    @route_policy.setter
    def route_policy(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "route_policy", value)


if not MYPY:
    class CiscoVpnFeatureTemplateRouteVpnImportArgsDict(TypedDict):
        optional: NotRequired[pulumi.Input[_builtins.bool]]
        """
        Indicates if list item is considered optional.
        """
        protocol: NotRequired[pulumi.Input[_builtins.str]]
        """
        Select a Route Protocol to enable route leaking to current VPN
          - Choices: `static`, `connected`, `bgp`, `ospf`, `eigrp`
        """
        protocol_sub_type_variable: NotRequired[pulumi.Input[_builtins.str]]
        """
        Variable name
        """
        protocol_sub_types: NotRequired[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]
        """
        - Default value: `external`
        """
        protocol_variable: NotRequired[pulumi.Input[_builtins.str]]
        """
        Variable name
        """
        redistributes: NotRequired[pulumi.Input[Sequence[pulumi.Input['CiscoVpnFeatureTemplateRouteVpnImportRedistributeArgsDict']]]]
        """
        Enable redistribution of replicated route protocol
        """
        route_policy: NotRequired[pulumi.Input[_builtins.str]]
        """
        Select a Route Policy to enable route leaking to current VPN
        """
        route_policy_variable: NotRequired[pulumi.Input[_builtins.str]]
        """
        Variable name
        """
        source_vpn_id: NotRequired[pulumi.Input[_builtins.int]]
        """
        Select a Source VPN where route leaks from
          - Range: `1`-`65530`
          - Default value: `1`
        """
        source_vpn_id_variable: NotRequired[pulumi.Input[_builtins.str]]
        """
        Variable name
        """
elif False:
    CiscoVpnFeatureTemplateRouteVpnImportArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class CiscoVpnFeatureTemplateRouteVpnImportArgs:
    def __init__(__self__, *,
                 optional: Optional[pulumi.Input[_builtins.bool]] = None,
                 protocol: Optional[pulumi.Input[_builtins.str]] = None,
                 protocol_sub_type_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 protocol_sub_types: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 protocol_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 redistributes: Optional[pulumi.Input[Sequence[pulumi.Input['CiscoVpnFeatureTemplateRouteVpnImportRedistributeArgs']]]] = None,
                 route_policy: Optional[pulumi.Input[_builtins.str]] = None,
                 route_policy_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 source_vpn_id: Optional[pulumi.Input[_builtins.int]] = None,
                 source_vpn_id_variable: Optional[pulumi.Input[_builtins.str]] = None):
        """
        :param pulumi.Input[_builtins.bool] optional: Indicates if list item is considered optional.
        :param pulumi.Input[_builtins.str] protocol: Select a Route Protocol to enable route leaking to current VPN
                 - Choices: `static`, `connected`, `bgp`, `ospf`, `eigrp`
        :param pulumi.Input[_builtins.str] protocol_sub_type_variable: Variable name
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] protocol_sub_types: - Default value: `external`
        :param pulumi.Input[_builtins.str] protocol_variable: Variable name
        :param pulumi.Input[Sequence[pulumi.Input['CiscoVpnFeatureTemplateRouteVpnImportRedistributeArgs']]] redistributes: Enable redistribution of replicated route protocol
        :param pulumi.Input[_builtins.str] route_policy: Select a Route Policy to enable route leaking to current VPN
        :param pulumi.Input[_builtins.str] route_policy_variable: Variable name
        :param pulumi.Input[_builtins.int] source_vpn_id: Select a Source VPN where route leaks from
                 - Range: `1`-`65530`
                 - Default value: `1`
        :param pulumi.Input[_builtins.str] source_vpn_id_variable: Variable name
        """
        if optional is not None:
            pulumi.set(__self__, "optional", optional)
        if protocol is not None:
            pulumi.set(__self__, "protocol", protocol)
        if protocol_sub_type_variable is not None:
            pulumi.set(__self__, "protocol_sub_type_variable", protocol_sub_type_variable)
        if protocol_sub_types is not None:
            pulumi.set(__self__, "protocol_sub_types", protocol_sub_types)
        if protocol_variable is not None:
            pulumi.set(__self__, "protocol_variable", protocol_variable)
        if redistributes is not None:
            pulumi.set(__self__, "redistributes", redistributes)
        if route_policy is not None:
            pulumi.set(__self__, "route_policy", route_policy)
        if route_policy_variable is not None:
            pulumi.set(__self__, "route_policy_variable", route_policy_variable)
        if source_vpn_id is not None:
            pulumi.set(__self__, "source_vpn_id", source_vpn_id)
        if source_vpn_id_variable is not None:
            pulumi.set(__self__, "source_vpn_id_variable", source_vpn_id_variable)

    @_builtins.property
    @pulumi.getter
    def optional(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Indicates if list item is considered optional.
        """
        return pulumi.get(self, "optional")

    @optional.setter
    def optional(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "optional", value)

    @_builtins.property
    @pulumi.getter
    def protocol(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Select a Route Protocol to enable route leaking to current VPN
          - Choices: `static`, `connected`, `bgp`, `ospf`, `eigrp`
        """
        return pulumi.get(self, "protocol")

    @protocol.setter
    def protocol(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "protocol", value)

    @_builtins.property
    @pulumi.getter(name="protocolSubTypeVariable")
    def protocol_sub_type_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "protocol_sub_type_variable")

    @protocol_sub_type_variable.setter
    def protocol_sub_type_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "protocol_sub_type_variable", value)

    @_builtins.property
    @pulumi.getter(name="protocolSubTypes")
    def protocol_sub_types(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]:
        """
        - Default value: `external`
        """
        return pulumi.get(self, "protocol_sub_types")

    @protocol_sub_types.setter
    def protocol_sub_types(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "protocol_sub_types", value)

    @_builtins.property
    @pulumi.getter(name="protocolVariable")
    def protocol_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "protocol_variable")

    @protocol_variable.setter
    def protocol_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "protocol_variable", value)

    @_builtins.property
    @pulumi.getter
    def redistributes(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['CiscoVpnFeatureTemplateRouteVpnImportRedistributeArgs']]]]:
        """
        Enable redistribution of replicated route protocol
        """
        return pulumi.get(self, "redistributes")

    @redistributes.setter
    def redistributes(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['CiscoVpnFeatureTemplateRouteVpnImportRedistributeArgs']]]]):
        pulumi.set(self, "redistributes", value)

    @_builtins.property
    @pulumi.getter(name="routePolicy")
    def route_policy(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Select a Route Policy to enable route leaking to current VPN
        """
        return pulumi.get(self, "route_policy")

    @route_policy.setter
    def route_policy(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "route_policy", value)

    @_builtins.property
    @pulumi.getter(name="routePolicyVariable")
    def route_policy_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "route_policy_variable")

    @route_policy_variable.setter
    def route_policy_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "route_policy_variable", value)

    @_builtins.property
    @pulumi.getter(name="sourceVpnId")
    def source_vpn_id(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        Select a Source VPN where route leaks from
          - Range: `1`-`65530`
          - Default value: `1`
        """
        return pulumi.get(self, "source_vpn_id")

    @source_vpn_id.setter
    def source_vpn_id(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "source_vpn_id", value)

    @_builtins.property
    @pulumi.getter(name="sourceVpnIdVariable")
    def source_vpn_id_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "source_vpn_id_variable")

    @source_vpn_id_variable.setter
    def source_vpn_id_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "source_vpn_id_variable", value)


if not MYPY:
    class CiscoVpnFeatureTemplateRouteVpnImportRedistributeArgsDict(TypedDict):
        optional: NotRequired[pulumi.Input[_builtins.bool]]
        """
        Indicates if list item is considered optional.
        """
        protocol: NotRequired[pulumi.Input[_builtins.str]]
        """
        Select a Route Protocol to enable redistribution
          - Choices: `bgp`, `eigrp`, `ospf`
        """
        protocol_variable: NotRequired[pulumi.Input[_builtins.str]]
        """
        Variable name
        """
        route_policy: NotRequired[pulumi.Input[_builtins.str]]
        """
        Select a Route Policy to enable redistribution
        """
        route_policy_variable: NotRequired[pulumi.Input[_builtins.str]]
        """
        Variable name
        """
elif False:
    CiscoVpnFeatureTemplateRouteVpnImportRedistributeArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class CiscoVpnFeatureTemplateRouteVpnImportRedistributeArgs:
    def __init__(__self__, *,
                 optional: Optional[pulumi.Input[_builtins.bool]] = None,
                 protocol: Optional[pulumi.Input[_builtins.str]] = None,
                 protocol_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 route_policy: Optional[pulumi.Input[_builtins.str]] = None,
                 route_policy_variable: Optional[pulumi.Input[_builtins.str]] = None):
        """
        :param pulumi.Input[_builtins.bool] optional: Indicates if list item is considered optional.
        :param pulumi.Input[_builtins.str] protocol: Select a Route Protocol to enable redistribution
                 - Choices: `bgp`, `eigrp`, `ospf`
        :param pulumi.Input[_builtins.str] protocol_variable: Variable name
        :param pulumi.Input[_builtins.str] route_policy: Select a Route Policy to enable redistribution
        :param pulumi.Input[_builtins.str] route_policy_variable: Variable name
        """
        if optional is not None:
            pulumi.set(__self__, "optional", optional)
        if protocol is not None:
            pulumi.set(__self__, "protocol", protocol)
        if protocol_variable is not None:
            pulumi.set(__self__, "protocol_variable", protocol_variable)
        if route_policy is not None:
            pulumi.set(__self__, "route_policy", route_policy)
        if route_policy_variable is not None:
            pulumi.set(__self__, "route_policy_variable", route_policy_variable)

    @_builtins.property
    @pulumi.getter
    def optional(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Indicates if list item is considered optional.
        """
        return pulumi.get(self, "optional")

    @optional.setter
    def optional(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "optional", value)

    @_builtins.property
    @pulumi.getter
    def protocol(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Select a Route Protocol to enable redistribution
          - Choices: `bgp`, `eigrp`, `ospf`
        """
        return pulumi.get(self, "protocol")

    @protocol.setter
    def protocol(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "protocol", value)

    @_builtins.property
    @pulumi.getter(name="protocolVariable")
    def protocol_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "protocol_variable")

    @protocol_variable.setter
    def protocol_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "protocol_variable", value)

    @_builtins.property
    @pulumi.getter(name="routePolicy")
    def route_policy(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Select a Route Policy to enable redistribution
        """
        return pulumi.get(self, "route_policy")

    @route_policy.setter
    def route_policy(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "route_policy", value)

    @_builtins.property
    @pulumi.getter(name="routePolicyVariable")
    def route_policy_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "route_policy_variable")

    @route_policy_variable.setter
    def route_policy_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "route_policy_variable", value)


if not MYPY:
    class CiscoVpnFeatureTemplateServiceArgsDict(TypedDict):
        address_variable: NotRequired[pulumi.Input[_builtins.str]]
        """
        Variable name
        """
        addresses: NotRequired[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]
        """
        List of IPv4 address
        """
        interface: NotRequired[pulumi.Input[_builtins.str]]
        """
        Tracking Service
        """
        interface_variable: NotRequired[pulumi.Input[_builtins.str]]
        """
        Variable name
        """
        optional: NotRequired[pulumi.Input[_builtins.bool]]
        """
        Indicates if list item is considered optional.
        """
        service_types: NotRequired[pulumi.Input[_builtins.str]]
        """
        Service Type
          - Choices: `FW`, `IDS`, `IDP`, `netsvc1`, `netsvc2`, `netsvc3`, `netsvc4`, `TE`, `appqoe`
        """
        track_enable: NotRequired[pulumi.Input[_builtins.bool]]
        """
        Tracking Service
          - Default value: `true`
        """
        track_enable_variable: NotRequired[pulumi.Input[_builtins.str]]
        """
        Variable name
        """
elif False:
    CiscoVpnFeatureTemplateServiceArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class CiscoVpnFeatureTemplateServiceArgs:
    def __init__(__self__, *,
                 address_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 addresses: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 interface: Optional[pulumi.Input[_builtins.str]] = None,
                 interface_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 optional: Optional[pulumi.Input[_builtins.bool]] = None,
                 service_types: Optional[pulumi.Input[_builtins.str]] = None,
                 track_enable: Optional[pulumi.Input[_builtins.bool]] = None,
                 track_enable_variable: Optional[pulumi.Input[_builtins.str]] = None):
        """
        :param pulumi.Input[_builtins.str] address_variable: Variable name
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] addresses: List of IPv4 address
        :param pulumi.Input[_builtins.str] interface: Tracking Service
        :param pulumi.Input[_builtins.str] interface_variable: Variable name
        :param pulumi.Input[_builtins.bool] optional: Indicates if list item is considered optional.
        :param pulumi.Input[_builtins.str] service_types: Service Type
                 - Choices: `FW`, `IDS`, `IDP`, `netsvc1`, `netsvc2`, `netsvc3`, `netsvc4`, `TE`, `appqoe`
        :param pulumi.Input[_builtins.bool] track_enable: Tracking Service
                 - Default value: `true`
        :param pulumi.Input[_builtins.str] track_enable_variable: Variable name
        """
        if address_variable is not None:
            pulumi.set(__self__, "address_variable", address_variable)
        if addresses is not None:
            pulumi.set(__self__, "addresses", addresses)
        if interface is not None:
            pulumi.set(__self__, "interface", interface)
        if interface_variable is not None:
            pulumi.set(__self__, "interface_variable", interface_variable)
        if optional is not None:
            pulumi.set(__self__, "optional", optional)
        if service_types is not None:
            pulumi.set(__self__, "service_types", service_types)
        if track_enable is not None:
            pulumi.set(__self__, "track_enable", track_enable)
        if track_enable_variable is not None:
            pulumi.set(__self__, "track_enable_variable", track_enable_variable)

    @_builtins.property
    @pulumi.getter(name="addressVariable")
    def address_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "address_variable")

    @address_variable.setter
    def address_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "address_variable", value)

    @_builtins.property
    @pulumi.getter
    def addresses(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]:
        """
        List of IPv4 address
        """
        return pulumi.get(self, "addresses")

    @addresses.setter
    def addresses(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "addresses", value)

    @_builtins.property
    @pulumi.getter
    def interface(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Tracking Service
        """
        return pulumi.get(self, "interface")

    @interface.setter
    def interface(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "interface", value)

    @_builtins.property
    @pulumi.getter(name="interfaceVariable")
    def interface_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "interface_variable")

    @interface_variable.setter
    def interface_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "interface_variable", value)

    @_builtins.property
    @pulumi.getter
    def optional(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Indicates if list item is considered optional.
        """
        return pulumi.get(self, "optional")

    @optional.setter
    def optional(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "optional", value)

    @_builtins.property
    @pulumi.getter(name="serviceTypes")
    def service_types(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Service Type
          - Choices: `FW`, `IDS`, `IDP`, `netsvc1`, `netsvc2`, `netsvc3`, `netsvc4`, `TE`, `appqoe`
        """
        return pulumi.get(self, "service_types")

    @service_types.setter
    def service_types(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "service_types", value)

    @_builtins.property
    @pulumi.getter(name="trackEnable")
    def track_enable(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Tracking Service
          - Default value: `true`
        """
        return pulumi.get(self, "track_enable")

    @track_enable.setter
    def track_enable(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "track_enable", value)

    @_builtins.property
    @pulumi.getter(name="trackEnableVariable")
    def track_enable_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "track_enable_variable")

    @track_enable_variable.setter
    def track_enable_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "track_enable_variable", value)


if not MYPY:
    class CiscoVpnFeatureTemplateStaticNatRuleArgsDict(TypedDict):
        optional: NotRequired[pulumi.Input[_builtins.bool]]
        """
        Indicates if list item is considered optional.
        """
        pool_name: NotRequired[pulumi.Input[_builtins.int]]
        """
        NAT Pool Name, natpool1..31
        """
        pool_name_variable: NotRequired[pulumi.Input[_builtins.str]]
        """
        Variable name
        """
        source_ip: NotRequired[pulumi.Input[_builtins.str]]
        """
        Source IP address to be translated
        """
        source_ip_variable: NotRequired[pulumi.Input[_builtins.str]]
        """
        Variable name
        """
        static_nat_direction: NotRequired[pulumi.Input[_builtins.str]]
        """
        Direction of static NAT translation
          - Choices: `inside`, `outside`
        """
        static_nat_direction_variable: NotRequired[pulumi.Input[_builtins.str]]
        """
        Variable name
        """
        tracker_id: NotRequired[pulumi.Input[_builtins.int]]
        """
        Add Object/Object Group Tracker
          - Range: `1`-`1000`
        """
        tracker_id_variable: NotRequired[pulumi.Input[_builtins.str]]
        """
        Variable name
        """
        translate_ip: NotRequired[pulumi.Input[_builtins.str]]
        """
        Statically translated source IP address
        """
        translate_ip_variable: NotRequired[pulumi.Input[_builtins.str]]
        """
        Variable name
        """
elif False:
    CiscoVpnFeatureTemplateStaticNatRuleArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class CiscoVpnFeatureTemplateStaticNatRuleArgs:
    def __init__(__self__, *,
                 optional: Optional[pulumi.Input[_builtins.bool]] = None,
                 pool_name: Optional[pulumi.Input[_builtins.int]] = None,
                 pool_name_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 source_ip: Optional[pulumi.Input[_builtins.str]] = None,
                 source_ip_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 static_nat_direction: Optional[pulumi.Input[_builtins.str]] = None,
                 static_nat_direction_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 tracker_id: Optional[pulumi.Input[_builtins.int]] = None,
                 tracker_id_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 translate_ip: Optional[pulumi.Input[_builtins.str]] = None,
                 translate_ip_variable: Optional[pulumi.Input[_builtins.str]] = None):
        """
        :param pulumi.Input[_builtins.bool] optional: Indicates if list item is considered optional.
        :param pulumi.Input[_builtins.int] pool_name: NAT Pool Name, natpool1..31
        :param pulumi.Input[_builtins.str] pool_name_variable: Variable name
        :param pulumi.Input[_builtins.str] source_ip: Source IP address to be translated
        :param pulumi.Input[_builtins.str] source_ip_variable: Variable name
        :param pulumi.Input[_builtins.str] static_nat_direction: Direction of static NAT translation
                 - Choices: `inside`, `outside`
        :param pulumi.Input[_builtins.str] static_nat_direction_variable: Variable name
        :param pulumi.Input[_builtins.int] tracker_id: Add Object/Object Group Tracker
                 - Range: `1`-`1000`
        :param pulumi.Input[_builtins.str] tracker_id_variable: Variable name
        :param pulumi.Input[_builtins.str] translate_ip: Statically translated source IP address
        :param pulumi.Input[_builtins.str] translate_ip_variable: Variable name
        """
        if optional is not None:
            pulumi.set(__self__, "optional", optional)
        if pool_name is not None:
            pulumi.set(__self__, "pool_name", pool_name)
        if pool_name_variable is not None:
            pulumi.set(__self__, "pool_name_variable", pool_name_variable)
        if source_ip is not None:
            pulumi.set(__self__, "source_ip", source_ip)
        if source_ip_variable is not None:
            pulumi.set(__self__, "source_ip_variable", source_ip_variable)
        if static_nat_direction is not None:
            pulumi.set(__self__, "static_nat_direction", static_nat_direction)
        if static_nat_direction_variable is not None:
            pulumi.set(__self__, "static_nat_direction_variable", static_nat_direction_variable)
        if tracker_id is not None:
            pulumi.set(__self__, "tracker_id", tracker_id)
        if tracker_id_variable is not None:
            pulumi.set(__self__, "tracker_id_variable", tracker_id_variable)
        if translate_ip is not None:
            pulumi.set(__self__, "translate_ip", translate_ip)
        if translate_ip_variable is not None:
            pulumi.set(__self__, "translate_ip_variable", translate_ip_variable)

    @_builtins.property
    @pulumi.getter
    def optional(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Indicates if list item is considered optional.
        """
        return pulumi.get(self, "optional")

    @optional.setter
    def optional(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "optional", value)

    @_builtins.property
    @pulumi.getter(name="poolName")
    def pool_name(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        NAT Pool Name, natpool1..31
        """
        return pulumi.get(self, "pool_name")

    @pool_name.setter
    def pool_name(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "pool_name", value)

    @_builtins.property
    @pulumi.getter(name="poolNameVariable")
    def pool_name_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "pool_name_variable")

    @pool_name_variable.setter
    def pool_name_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "pool_name_variable", value)

    @_builtins.property
    @pulumi.getter(name="sourceIp")
    def source_ip(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Source IP address to be translated
        """
        return pulumi.get(self, "source_ip")

    @source_ip.setter
    def source_ip(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "source_ip", value)

    @_builtins.property
    @pulumi.getter(name="sourceIpVariable")
    def source_ip_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "source_ip_variable")

    @source_ip_variable.setter
    def source_ip_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "source_ip_variable", value)

    @_builtins.property
    @pulumi.getter(name="staticNatDirection")
    def static_nat_direction(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Direction of static NAT translation
          - Choices: `inside`, `outside`
        """
        return pulumi.get(self, "static_nat_direction")

    @static_nat_direction.setter
    def static_nat_direction(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "static_nat_direction", value)

    @_builtins.property
    @pulumi.getter(name="staticNatDirectionVariable")
    def static_nat_direction_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "static_nat_direction_variable")

    @static_nat_direction_variable.setter
    def static_nat_direction_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "static_nat_direction_variable", value)

    @_builtins.property
    @pulumi.getter(name="trackerId")
    def tracker_id(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        Add Object/Object Group Tracker
          - Range: `1`-`1000`
        """
        return pulumi.get(self, "tracker_id")

    @tracker_id.setter
    def tracker_id(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "tracker_id", value)

    @_builtins.property
    @pulumi.getter(name="trackerIdVariable")
    def tracker_id_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "tracker_id_variable")

    @tracker_id_variable.setter
    def tracker_id_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "tracker_id_variable", value)

    @_builtins.property
    @pulumi.getter(name="translateIp")
    def translate_ip(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Statically translated source IP address
        """
        return pulumi.get(self, "translate_ip")

    @translate_ip.setter
    def translate_ip(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "translate_ip", value)

    @_builtins.property
    @pulumi.getter(name="translateIpVariable")
    def translate_ip_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "translate_ip_variable")

    @translate_ip_variable.setter
    def translate_ip_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "translate_ip_variable", value)


if not MYPY:
    class CiscoVpnFeatureTemplateStaticNatSubnetRuleArgsDict(TypedDict):
        optional: NotRequired[pulumi.Input[_builtins.bool]]
        """
        Indicates if list item is considered optional.
        """
        prefix_length: NotRequired[pulumi.Input[_builtins.int]]
        """
        Network Prefix Length
          - Range: `1`-`32`
        """
        prefix_length_variable: NotRequired[pulumi.Input[_builtins.str]]
        """
        Variable name
        """
        source_ip_subnet: NotRequired[pulumi.Input[_builtins.str]]
        """
        Source IP Subnet to be translated
        """
        source_ip_subnet_variable: NotRequired[pulumi.Input[_builtins.str]]
        """
        Variable name
        """
        static_nat_direction: NotRequired[pulumi.Input[_builtins.str]]
        """
        Direction of static NAT translation
          - Choices: `inside`, `outside`
        """
        static_nat_direction_variable: NotRequired[pulumi.Input[_builtins.str]]
        """
        Variable name
        """
        tracker_id: NotRequired[pulumi.Input[_builtins.int]]
        """
        Add Object/Object Group Tracker
          - Range: `1`-`1000`
        """
        tracker_id_variable: NotRequired[pulumi.Input[_builtins.str]]
        """
        Variable name
        """
        translate_ip_subnet: NotRequired[pulumi.Input[_builtins.str]]
        """
        Statically translated source IP Subnet
        """
        translate_ip_subnet_variable: NotRequired[pulumi.Input[_builtins.str]]
        """
        Variable name
        """
elif False:
    CiscoVpnFeatureTemplateStaticNatSubnetRuleArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class CiscoVpnFeatureTemplateStaticNatSubnetRuleArgs:
    def __init__(__self__, *,
                 optional: Optional[pulumi.Input[_builtins.bool]] = None,
                 prefix_length: Optional[pulumi.Input[_builtins.int]] = None,
                 prefix_length_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 source_ip_subnet: Optional[pulumi.Input[_builtins.str]] = None,
                 source_ip_subnet_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 static_nat_direction: Optional[pulumi.Input[_builtins.str]] = None,
                 static_nat_direction_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 tracker_id: Optional[pulumi.Input[_builtins.int]] = None,
                 tracker_id_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 translate_ip_subnet: Optional[pulumi.Input[_builtins.str]] = None,
                 translate_ip_subnet_variable: Optional[pulumi.Input[_builtins.str]] = None):
        """
        :param pulumi.Input[_builtins.bool] optional: Indicates if list item is considered optional.
        :param pulumi.Input[_builtins.int] prefix_length: Network Prefix Length
                 - Range: `1`-`32`
        :param pulumi.Input[_builtins.str] prefix_length_variable: Variable name
        :param pulumi.Input[_builtins.str] source_ip_subnet: Source IP Subnet to be translated
        :param pulumi.Input[_builtins.str] source_ip_subnet_variable: Variable name
        :param pulumi.Input[_builtins.str] static_nat_direction: Direction of static NAT translation
                 - Choices: `inside`, `outside`
        :param pulumi.Input[_builtins.str] static_nat_direction_variable: Variable name
        :param pulumi.Input[_builtins.int] tracker_id: Add Object/Object Group Tracker
                 - Range: `1`-`1000`
        :param pulumi.Input[_builtins.str] tracker_id_variable: Variable name
        :param pulumi.Input[_builtins.str] translate_ip_subnet: Statically translated source IP Subnet
        :param pulumi.Input[_builtins.str] translate_ip_subnet_variable: Variable name
        """
        if optional is not None:
            pulumi.set(__self__, "optional", optional)
        if prefix_length is not None:
            pulumi.set(__self__, "prefix_length", prefix_length)
        if prefix_length_variable is not None:
            pulumi.set(__self__, "prefix_length_variable", prefix_length_variable)
        if source_ip_subnet is not None:
            pulumi.set(__self__, "source_ip_subnet", source_ip_subnet)
        if source_ip_subnet_variable is not None:
            pulumi.set(__self__, "source_ip_subnet_variable", source_ip_subnet_variable)
        if static_nat_direction is not None:
            pulumi.set(__self__, "static_nat_direction", static_nat_direction)
        if static_nat_direction_variable is not None:
            pulumi.set(__self__, "static_nat_direction_variable", static_nat_direction_variable)
        if tracker_id is not None:
            pulumi.set(__self__, "tracker_id", tracker_id)
        if tracker_id_variable is not None:
            pulumi.set(__self__, "tracker_id_variable", tracker_id_variable)
        if translate_ip_subnet is not None:
            pulumi.set(__self__, "translate_ip_subnet", translate_ip_subnet)
        if translate_ip_subnet_variable is not None:
            pulumi.set(__self__, "translate_ip_subnet_variable", translate_ip_subnet_variable)

    @_builtins.property
    @pulumi.getter
    def optional(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Indicates if list item is considered optional.
        """
        return pulumi.get(self, "optional")

    @optional.setter
    def optional(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "optional", value)

    @_builtins.property
    @pulumi.getter(name="prefixLength")
    def prefix_length(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        Network Prefix Length
          - Range: `1`-`32`
        """
        return pulumi.get(self, "prefix_length")

    @prefix_length.setter
    def prefix_length(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "prefix_length", value)

    @_builtins.property
    @pulumi.getter(name="prefixLengthVariable")
    def prefix_length_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "prefix_length_variable")

    @prefix_length_variable.setter
    def prefix_length_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "prefix_length_variable", value)

    @_builtins.property
    @pulumi.getter(name="sourceIpSubnet")
    def source_ip_subnet(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Source IP Subnet to be translated
        """
        return pulumi.get(self, "source_ip_subnet")

    @source_ip_subnet.setter
    def source_ip_subnet(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "source_ip_subnet", value)

    @_builtins.property
    @pulumi.getter(name="sourceIpSubnetVariable")
    def source_ip_subnet_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "source_ip_subnet_variable")

    @source_ip_subnet_variable.setter
    def source_ip_subnet_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "source_ip_subnet_variable", value)

    @_builtins.property
    @pulumi.getter(name="staticNatDirection")
    def static_nat_direction(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Direction of static NAT translation
          - Choices: `inside`, `outside`
        """
        return pulumi.get(self, "static_nat_direction")

    @static_nat_direction.setter
    def static_nat_direction(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "static_nat_direction", value)

    @_builtins.property
    @pulumi.getter(name="staticNatDirectionVariable")
    def static_nat_direction_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "static_nat_direction_variable")

    @static_nat_direction_variable.setter
    def static_nat_direction_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "static_nat_direction_variable", value)

    @_builtins.property
    @pulumi.getter(name="trackerId")
    def tracker_id(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        Add Object/Object Group Tracker
          - Range: `1`-`1000`
        """
        return pulumi.get(self, "tracker_id")

    @tracker_id.setter
    def tracker_id(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "tracker_id", value)

    @_builtins.property
    @pulumi.getter(name="trackerIdVariable")
    def tracker_id_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "tracker_id_variable")

    @tracker_id_variable.setter
    def tracker_id_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "tracker_id_variable", value)

    @_builtins.property
    @pulumi.getter(name="translateIpSubnet")
    def translate_ip_subnet(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Statically translated source IP Subnet
        """
        return pulumi.get(self, "translate_ip_subnet")

    @translate_ip_subnet.setter
    def translate_ip_subnet(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "translate_ip_subnet", value)

    @_builtins.property
    @pulumi.getter(name="translateIpSubnetVariable")
    def translate_ip_subnet_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "translate_ip_subnet_variable")

    @translate_ip_subnet_variable.setter
    def translate_ip_subnet_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "translate_ip_subnet_variable", value)


if not MYPY:
    class CiscoVpnInterfaceFeatureTemplateAccessListArgsDict(TypedDict):
        acl_name: NotRequired[pulumi.Input[_builtins.str]]
        """
        Name of access list
        """
        acl_name_variable: NotRequired[pulumi.Input[_builtins.str]]
        """
        Variable name
        """
        direction: NotRequired[pulumi.Input[_builtins.str]]
        """
        Direction
          - Choices: `in`, `out`
        """
        optional: NotRequired[pulumi.Input[_builtins.bool]]
        """
        Indicates if list item is considered optional.
        """
elif False:
    CiscoVpnInterfaceFeatureTemplateAccessListArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class CiscoVpnInterfaceFeatureTemplateAccessListArgs:
    def __init__(__self__, *,
                 acl_name: Optional[pulumi.Input[_builtins.str]] = None,
                 acl_name_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 direction: Optional[pulumi.Input[_builtins.str]] = None,
                 optional: Optional[pulumi.Input[_builtins.bool]] = None):
        """
        :param pulumi.Input[_builtins.str] acl_name: Name of access list
        :param pulumi.Input[_builtins.str] acl_name_variable: Variable name
        :param pulumi.Input[_builtins.str] direction: Direction
                 - Choices: `in`, `out`
        :param pulumi.Input[_builtins.bool] optional: Indicates if list item is considered optional.
        """
        if acl_name is not None:
            pulumi.set(__self__, "acl_name", acl_name)
        if acl_name_variable is not None:
            pulumi.set(__self__, "acl_name_variable", acl_name_variable)
        if direction is not None:
            pulumi.set(__self__, "direction", direction)
        if optional is not None:
            pulumi.set(__self__, "optional", optional)

    @_builtins.property
    @pulumi.getter(name="aclName")
    def acl_name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Name of access list
        """
        return pulumi.get(self, "acl_name")

    @acl_name.setter
    def acl_name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "acl_name", value)

    @_builtins.property
    @pulumi.getter(name="aclNameVariable")
    def acl_name_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "acl_name_variable")

    @acl_name_variable.setter
    def acl_name_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "acl_name_variable", value)

    @_builtins.property
    @pulumi.getter
    def direction(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Direction
          - Choices: `in`, `out`
        """
        return pulumi.get(self, "direction")

    @direction.setter
    def direction(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "direction", value)

    @_builtins.property
    @pulumi.getter
    def optional(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Indicates if list item is considered optional.
        """
        return pulumi.get(self, "optional")

    @optional.setter
    def optional(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "optional", value)


if not MYPY:
    class CiscoVpnInterfaceFeatureTemplateIpv4SecondaryAddressArgsDict(TypedDict):
        address: NotRequired[pulumi.Input[_builtins.str]]
        """
        IP Address
        """
        address_variable: NotRequired[pulumi.Input[_builtins.str]]
        """
        Variable name
        """
        optional: NotRequired[pulumi.Input[_builtins.bool]]
        """
        Indicates if list item is considered optional.
        """
elif False:
    CiscoVpnInterfaceFeatureTemplateIpv4SecondaryAddressArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class CiscoVpnInterfaceFeatureTemplateIpv4SecondaryAddressArgs:
    def __init__(__self__, *,
                 address: Optional[pulumi.Input[_builtins.str]] = None,
                 address_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 optional: Optional[pulumi.Input[_builtins.bool]] = None):
        """
        :param pulumi.Input[_builtins.str] address: IP Address
        :param pulumi.Input[_builtins.str] address_variable: Variable name
        :param pulumi.Input[_builtins.bool] optional: Indicates if list item is considered optional.
        """
        if address is not None:
            pulumi.set(__self__, "address", address)
        if address_variable is not None:
            pulumi.set(__self__, "address_variable", address_variable)
        if optional is not None:
            pulumi.set(__self__, "optional", optional)

    @_builtins.property
    @pulumi.getter
    def address(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        IP Address
        """
        return pulumi.get(self, "address")

    @address.setter
    def address(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "address", value)

    @_builtins.property
    @pulumi.getter(name="addressVariable")
    def address_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "address_variable")

    @address_variable.setter
    def address_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "address_variable", value)

    @_builtins.property
    @pulumi.getter
    def optional(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Indicates if list item is considered optional.
        """
        return pulumi.get(self, "optional")

    @optional.setter
    def optional(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "optional", value)


if not MYPY:
    class CiscoVpnInterfaceFeatureTemplateIpv4VrrpArgsDict(TypedDict):
        group_id: NotRequired[pulumi.Input[_builtins.int]]
        """
        Group ID
          - Range: `1`-`255`
        """
        group_id_variable: NotRequired[pulumi.Input[_builtins.str]]
        """
        Variable name
        """
        ip_address: NotRequired[pulumi.Input[_builtins.str]]
        """
        Assign IP Address
        """
        ip_address_variable: NotRequired[pulumi.Input[_builtins.str]]
        """
        Variable name
        """
        ipv4_secondary_addresses: NotRequired[pulumi.Input[Sequence[pulumi.Input['CiscoVpnInterfaceFeatureTemplateIpv4VrrpIpv4SecondaryAddressArgsDict']]]]
        """
        VRRP Secondary IP address
        """
        optional: NotRequired[pulumi.Input[_builtins.bool]]
        """
        Indicates if list item is considered optional.
        """
        priority: NotRequired[pulumi.Input[_builtins.int]]
        """
        Set priority
          - Range: `1`-`254`
          - Default value: `100`
        """
        priority_variable: NotRequired[pulumi.Input[_builtins.str]]
        """
        Variable name
        """
        timer: NotRequired[pulumi.Input[_builtins.int]]
        """
        Timer interval for successive advertisements, in milliseconds
          - Range: `100`-`40950`
          - Default value: `100`
        """
        timer_variable: NotRequired[pulumi.Input[_builtins.str]]
        """
        Variable name
        """
        tloc_preference_change: NotRequired[pulumi.Input[_builtins.bool]]
        """
        change TLOC preference
          - Default value: `false`
        """
        tloc_preference_change_value: NotRequired[pulumi.Input[_builtins.int]]
        """
        Set tloc preference change value
          - Range: `1`-`4294967295`
        """
        tloc_preference_change_value_variable: NotRequired[pulumi.Input[_builtins.str]]
        """
        Variable name
        """
        track_omp: NotRequired[pulumi.Input[_builtins.bool]]
        """
        Track OMP status
          - Default value: `false`
        """
        track_prefix_list: NotRequired[pulumi.Input[_builtins.str]]
        """
        Track Prefix List
        """
        track_prefix_list_variable: NotRequired[pulumi.Input[_builtins.str]]
        """
        Variable name
        """
        tracking_objects: NotRequired[pulumi.Input[Sequence[pulumi.Input['CiscoVpnInterfaceFeatureTemplateIpv4VrrpTrackingObjectArgsDict']]]]
        """
        tracking object for VRRP configuration
        """
elif False:
    CiscoVpnInterfaceFeatureTemplateIpv4VrrpArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class CiscoVpnInterfaceFeatureTemplateIpv4VrrpArgs:
    def __init__(__self__, *,
                 group_id: Optional[pulumi.Input[_builtins.int]] = None,
                 group_id_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 ip_address: Optional[pulumi.Input[_builtins.str]] = None,
                 ip_address_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 ipv4_secondary_addresses: Optional[pulumi.Input[Sequence[pulumi.Input['CiscoVpnInterfaceFeatureTemplateIpv4VrrpIpv4SecondaryAddressArgs']]]] = None,
                 optional: Optional[pulumi.Input[_builtins.bool]] = None,
                 priority: Optional[pulumi.Input[_builtins.int]] = None,
                 priority_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 timer: Optional[pulumi.Input[_builtins.int]] = None,
                 timer_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 tloc_preference_change: Optional[pulumi.Input[_builtins.bool]] = None,
                 tloc_preference_change_value: Optional[pulumi.Input[_builtins.int]] = None,
                 tloc_preference_change_value_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 track_omp: Optional[pulumi.Input[_builtins.bool]] = None,
                 track_prefix_list: Optional[pulumi.Input[_builtins.str]] = None,
                 track_prefix_list_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 tracking_objects: Optional[pulumi.Input[Sequence[pulumi.Input['CiscoVpnInterfaceFeatureTemplateIpv4VrrpTrackingObjectArgs']]]] = None):
        """
        :param pulumi.Input[_builtins.int] group_id: Group ID
                 - Range: `1`-`255`
        :param pulumi.Input[_builtins.str] group_id_variable: Variable name
        :param pulumi.Input[_builtins.str] ip_address: Assign IP Address
        :param pulumi.Input[_builtins.str] ip_address_variable: Variable name
        :param pulumi.Input[Sequence[pulumi.Input['CiscoVpnInterfaceFeatureTemplateIpv4VrrpIpv4SecondaryAddressArgs']]] ipv4_secondary_addresses: VRRP Secondary IP address
        :param pulumi.Input[_builtins.bool] optional: Indicates if list item is considered optional.
        :param pulumi.Input[_builtins.int] priority: Set priority
                 - Range: `1`-`254`
                 - Default value: `100`
        :param pulumi.Input[_builtins.str] priority_variable: Variable name
        :param pulumi.Input[_builtins.int] timer: Timer interval for successive advertisements, in milliseconds
                 - Range: `100`-`40950`
                 - Default value: `100`
        :param pulumi.Input[_builtins.str] timer_variable: Variable name
        :param pulumi.Input[_builtins.bool] tloc_preference_change: change TLOC preference
                 - Default value: `false`
        :param pulumi.Input[_builtins.int] tloc_preference_change_value: Set tloc preference change value
                 - Range: `1`-`4294967295`
        :param pulumi.Input[_builtins.str] tloc_preference_change_value_variable: Variable name
        :param pulumi.Input[_builtins.bool] track_omp: Track OMP status
                 - Default value: `false`
        :param pulumi.Input[_builtins.str] track_prefix_list: Track Prefix List
        :param pulumi.Input[_builtins.str] track_prefix_list_variable: Variable name
        :param pulumi.Input[Sequence[pulumi.Input['CiscoVpnInterfaceFeatureTemplateIpv4VrrpTrackingObjectArgs']]] tracking_objects: tracking object for VRRP configuration
        """
        if group_id is not None:
            pulumi.set(__self__, "group_id", group_id)
        if group_id_variable is not None:
            pulumi.set(__self__, "group_id_variable", group_id_variable)
        if ip_address is not None:
            pulumi.set(__self__, "ip_address", ip_address)
        if ip_address_variable is not None:
            pulumi.set(__self__, "ip_address_variable", ip_address_variable)
        if ipv4_secondary_addresses is not None:
            pulumi.set(__self__, "ipv4_secondary_addresses", ipv4_secondary_addresses)
        if optional is not None:
            pulumi.set(__self__, "optional", optional)
        if priority is not None:
            pulumi.set(__self__, "priority", priority)
        if priority_variable is not None:
            pulumi.set(__self__, "priority_variable", priority_variable)
        if timer is not None:
            pulumi.set(__self__, "timer", timer)
        if timer_variable is not None:
            pulumi.set(__self__, "timer_variable", timer_variable)
        if tloc_preference_change is not None:
            pulumi.set(__self__, "tloc_preference_change", tloc_preference_change)
        if tloc_preference_change_value is not None:
            pulumi.set(__self__, "tloc_preference_change_value", tloc_preference_change_value)
        if tloc_preference_change_value_variable is not None:
            pulumi.set(__self__, "tloc_preference_change_value_variable", tloc_preference_change_value_variable)
        if track_omp is not None:
            pulumi.set(__self__, "track_omp", track_omp)
        if track_prefix_list is not None:
            pulumi.set(__self__, "track_prefix_list", track_prefix_list)
        if track_prefix_list_variable is not None:
            pulumi.set(__self__, "track_prefix_list_variable", track_prefix_list_variable)
        if tracking_objects is not None:
            pulumi.set(__self__, "tracking_objects", tracking_objects)

    @_builtins.property
    @pulumi.getter(name="groupId")
    def group_id(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        Group ID
          - Range: `1`-`255`
        """
        return pulumi.get(self, "group_id")

    @group_id.setter
    def group_id(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "group_id", value)

    @_builtins.property
    @pulumi.getter(name="groupIdVariable")
    def group_id_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "group_id_variable")

    @group_id_variable.setter
    def group_id_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "group_id_variable", value)

    @_builtins.property
    @pulumi.getter(name="ipAddress")
    def ip_address(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Assign IP Address
        """
        return pulumi.get(self, "ip_address")

    @ip_address.setter
    def ip_address(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "ip_address", value)

    @_builtins.property
    @pulumi.getter(name="ipAddressVariable")
    def ip_address_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "ip_address_variable")

    @ip_address_variable.setter
    def ip_address_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "ip_address_variable", value)

    @_builtins.property
    @pulumi.getter(name="ipv4SecondaryAddresses")
    def ipv4_secondary_addresses(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['CiscoVpnInterfaceFeatureTemplateIpv4VrrpIpv4SecondaryAddressArgs']]]]:
        """
        VRRP Secondary IP address
        """
        return pulumi.get(self, "ipv4_secondary_addresses")

    @ipv4_secondary_addresses.setter
    def ipv4_secondary_addresses(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['CiscoVpnInterfaceFeatureTemplateIpv4VrrpIpv4SecondaryAddressArgs']]]]):
        pulumi.set(self, "ipv4_secondary_addresses", value)

    @_builtins.property
    @pulumi.getter
    def optional(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Indicates if list item is considered optional.
        """
        return pulumi.get(self, "optional")

    @optional.setter
    def optional(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "optional", value)

    @_builtins.property
    @pulumi.getter
    def priority(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        Set priority
          - Range: `1`-`254`
          - Default value: `100`
        """
        return pulumi.get(self, "priority")

    @priority.setter
    def priority(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "priority", value)

    @_builtins.property
    @pulumi.getter(name="priorityVariable")
    def priority_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "priority_variable")

    @priority_variable.setter
    def priority_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "priority_variable", value)

    @_builtins.property
    @pulumi.getter
    def timer(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        Timer interval for successive advertisements, in milliseconds
          - Range: `100`-`40950`
          - Default value: `100`
        """
        return pulumi.get(self, "timer")

    @timer.setter
    def timer(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "timer", value)

    @_builtins.property
    @pulumi.getter(name="timerVariable")
    def timer_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "timer_variable")

    @timer_variable.setter
    def timer_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "timer_variable", value)

    @_builtins.property
    @pulumi.getter(name="tlocPreferenceChange")
    def tloc_preference_change(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        change TLOC preference
          - Default value: `false`
        """
        return pulumi.get(self, "tloc_preference_change")

    @tloc_preference_change.setter
    def tloc_preference_change(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "tloc_preference_change", value)

    @_builtins.property
    @pulumi.getter(name="tlocPreferenceChangeValue")
    def tloc_preference_change_value(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        Set tloc preference change value
          - Range: `1`-`4294967295`
        """
        return pulumi.get(self, "tloc_preference_change_value")

    @tloc_preference_change_value.setter
    def tloc_preference_change_value(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "tloc_preference_change_value", value)

    @_builtins.property
    @pulumi.getter(name="tlocPreferenceChangeValueVariable")
    def tloc_preference_change_value_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "tloc_preference_change_value_variable")

    @tloc_preference_change_value_variable.setter
    def tloc_preference_change_value_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "tloc_preference_change_value_variable", value)

    @_builtins.property
    @pulumi.getter(name="trackOmp")
    def track_omp(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Track OMP status
          - Default value: `false`
        """
        return pulumi.get(self, "track_omp")

    @track_omp.setter
    def track_omp(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "track_omp", value)

    @_builtins.property
    @pulumi.getter(name="trackPrefixList")
    def track_prefix_list(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Track Prefix List
        """
        return pulumi.get(self, "track_prefix_list")

    @track_prefix_list.setter
    def track_prefix_list(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "track_prefix_list", value)

    @_builtins.property
    @pulumi.getter(name="trackPrefixListVariable")
    def track_prefix_list_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "track_prefix_list_variable")

    @track_prefix_list_variable.setter
    def track_prefix_list_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "track_prefix_list_variable", value)

    @_builtins.property
    @pulumi.getter(name="trackingObjects")
    def tracking_objects(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['CiscoVpnInterfaceFeatureTemplateIpv4VrrpTrackingObjectArgs']]]]:
        """
        tracking object for VRRP configuration
        """
        return pulumi.get(self, "tracking_objects")

    @tracking_objects.setter
    def tracking_objects(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['CiscoVpnInterfaceFeatureTemplateIpv4VrrpTrackingObjectArgs']]]]):
        pulumi.set(self, "tracking_objects", value)


if not MYPY:
    class CiscoVpnInterfaceFeatureTemplateIpv4VrrpIpv4SecondaryAddressArgsDict(TypedDict):
        ip_address: NotRequired[pulumi.Input[_builtins.str]]
        """
        VRRP Secondary IP address
        """
        ip_address_variable: NotRequired[pulumi.Input[_builtins.str]]
        """
        Variable name
        """
        optional: NotRequired[pulumi.Input[_builtins.bool]]
        """
        Indicates if list item is considered optional.
        """
elif False:
    CiscoVpnInterfaceFeatureTemplateIpv4VrrpIpv4SecondaryAddressArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class CiscoVpnInterfaceFeatureTemplateIpv4VrrpIpv4SecondaryAddressArgs:
    def __init__(__self__, *,
                 ip_address: Optional[pulumi.Input[_builtins.str]] = None,
                 ip_address_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 optional: Optional[pulumi.Input[_builtins.bool]] = None):
        """
        :param pulumi.Input[_builtins.str] ip_address: VRRP Secondary IP address
        :param pulumi.Input[_builtins.str] ip_address_variable: Variable name
        :param pulumi.Input[_builtins.bool] optional: Indicates if list item is considered optional.
        """
        if ip_address is not None:
            pulumi.set(__self__, "ip_address", ip_address)
        if ip_address_variable is not None:
            pulumi.set(__self__, "ip_address_variable", ip_address_variable)
        if optional is not None:
            pulumi.set(__self__, "optional", optional)

    @_builtins.property
    @pulumi.getter(name="ipAddress")
    def ip_address(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        VRRP Secondary IP address
        """
        return pulumi.get(self, "ip_address")

    @ip_address.setter
    def ip_address(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "ip_address", value)

    @_builtins.property
    @pulumi.getter(name="ipAddressVariable")
    def ip_address_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "ip_address_variable")

    @ip_address_variable.setter
    def ip_address_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "ip_address_variable", value)

    @_builtins.property
    @pulumi.getter
    def optional(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Indicates if list item is considered optional.
        """
        return pulumi.get(self, "optional")

    @optional.setter
    def optional(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "optional", value)


if not MYPY:
    class CiscoVpnInterfaceFeatureTemplateIpv4VrrpTrackingObjectArgsDict(TypedDict):
        decrement_value: NotRequired[pulumi.Input[_builtins.int]]
        """
        Decrement Value for VRRP priority
          - Range: `1`-`255`
        """
        decrement_value_variable: NotRequired[pulumi.Input[_builtins.str]]
        """
        Variable name
        """
        optional: NotRequired[pulumi.Input[_builtins.bool]]
        """
        Indicates if list item is considered optional.
        """
        track_action: NotRequired[pulumi.Input[_builtins.str]]
        """
        Track Action
          - Choices: `decrement`, `shutdown`
          - Default value: `decrement`
        """
        track_action_variable: NotRequired[pulumi.Input[_builtins.str]]
        """
        Variable name
        """
        tracker_id: NotRequired[pulumi.Input[_builtins.int]]
        """
        Tracker ID
          - Range: `1`-`1000`
        """
        tracker_id_variable: NotRequired[pulumi.Input[_builtins.str]]
        """
        Variable name
        """
elif False:
    CiscoVpnInterfaceFeatureTemplateIpv4VrrpTrackingObjectArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class CiscoVpnInterfaceFeatureTemplateIpv4VrrpTrackingObjectArgs:
    def __init__(__self__, *,
                 decrement_value: Optional[pulumi.Input[_builtins.int]] = None,
                 decrement_value_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 optional: Optional[pulumi.Input[_builtins.bool]] = None,
                 track_action: Optional[pulumi.Input[_builtins.str]] = None,
                 track_action_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 tracker_id: Optional[pulumi.Input[_builtins.int]] = None,
                 tracker_id_variable: Optional[pulumi.Input[_builtins.str]] = None):
        """
        :param pulumi.Input[_builtins.int] decrement_value: Decrement Value for VRRP priority
                 - Range: `1`-`255`
        :param pulumi.Input[_builtins.str] decrement_value_variable: Variable name
        :param pulumi.Input[_builtins.bool] optional: Indicates if list item is considered optional.
        :param pulumi.Input[_builtins.str] track_action: Track Action
                 - Choices: `decrement`, `shutdown`
                 - Default value: `decrement`
        :param pulumi.Input[_builtins.str] track_action_variable: Variable name
        :param pulumi.Input[_builtins.int] tracker_id: Tracker ID
                 - Range: `1`-`1000`
        :param pulumi.Input[_builtins.str] tracker_id_variable: Variable name
        """
        if decrement_value is not None:
            pulumi.set(__self__, "decrement_value", decrement_value)
        if decrement_value_variable is not None:
            pulumi.set(__self__, "decrement_value_variable", decrement_value_variable)
        if optional is not None:
            pulumi.set(__self__, "optional", optional)
        if track_action is not None:
            pulumi.set(__self__, "track_action", track_action)
        if track_action_variable is not None:
            pulumi.set(__self__, "track_action_variable", track_action_variable)
        if tracker_id is not None:
            pulumi.set(__self__, "tracker_id", tracker_id)
        if tracker_id_variable is not None:
            pulumi.set(__self__, "tracker_id_variable", tracker_id_variable)

    @_builtins.property
    @pulumi.getter(name="decrementValue")
    def decrement_value(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        Decrement Value for VRRP priority
          - Range: `1`-`255`
        """
        return pulumi.get(self, "decrement_value")

    @decrement_value.setter
    def decrement_value(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "decrement_value", value)

    @_builtins.property
    @pulumi.getter(name="decrementValueVariable")
    def decrement_value_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "decrement_value_variable")

    @decrement_value_variable.setter
    def decrement_value_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "decrement_value_variable", value)

    @_builtins.property
    @pulumi.getter
    def optional(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Indicates if list item is considered optional.
        """
        return pulumi.get(self, "optional")

    @optional.setter
    def optional(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "optional", value)

    @_builtins.property
    @pulumi.getter(name="trackAction")
    def track_action(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Track Action
          - Choices: `decrement`, `shutdown`
          - Default value: `decrement`
        """
        return pulumi.get(self, "track_action")

    @track_action.setter
    def track_action(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "track_action", value)

    @_builtins.property
    @pulumi.getter(name="trackActionVariable")
    def track_action_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "track_action_variable")

    @track_action_variable.setter
    def track_action_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "track_action_variable", value)

    @_builtins.property
    @pulumi.getter(name="trackerId")
    def tracker_id(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        Tracker ID
          - Range: `1`-`1000`
        """
        return pulumi.get(self, "tracker_id")

    @tracker_id.setter
    def tracker_id(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "tracker_id", value)

    @_builtins.property
    @pulumi.getter(name="trackerIdVariable")
    def tracker_id_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "tracker_id_variable")

    @tracker_id_variable.setter
    def tracker_id_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "tracker_id_variable", value)


if not MYPY:
    class CiscoVpnInterfaceFeatureTemplateIpv6AccessListArgsDict(TypedDict):
        acl_name: NotRequired[pulumi.Input[_builtins.str]]
        """
        Name of access list
        """
        acl_name_variable: NotRequired[pulumi.Input[_builtins.str]]
        """
        Variable name
        """
        direction: NotRequired[pulumi.Input[_builtins.str]]
        """
        Direction
          - Choices: `in`, `out`
        """
        optional: NotRequired[pulumi.Input[_builtins.bool]]
        """
        Indicates if list item is considered optional.
        """
elif False:
    CiscoVpnInterfaceFeatureTemplateIpv6AccessListArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class CiscoVpnInterfaceFeatureTemplateIpv6AccessListArgs:
    def __init__(__self__, *,
                 acl_name: Optional[pulumi.Input[_builtins.str]] = None,
                 acl_name_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 direction: Optional[pulumi.Input[_builtins.str]] = None,
                 optional: Optional[pulumi.Input[_builtins.bool]] = None):
        """
        :param pulumi.Input[_builtins.str] acl_name: Name of access list
        :param pulumi.Input[_builtins.str] acl_name_variable: Variable name
        :param pulumi.Input[_builtins.str] direction: Direction
                 - Choices: `in`, `out`
        :param pulumi.Input[_builtins.bool] optional: Indicates if list item is considered optional.
        """
        if acl_name is not None:
            pulumi.set(__self__, "acl_name", acl_name)
        if acl_name_variable is not None:
            pulumi.set(__self__, "acl_name_variable", acl_name_variable)
        if direction is not None:
            pulumi.set(__self__, "direction", direction)
        if optional is not None:
            pulumi.set(__self__, "optional", optional)

    @_builtins.property
    @pulumi.getter(name="aclName")
    def acl_name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Name of access list
        """
        return pulumi.get(self, "acl_name")

    @acl_name.setter
    def acl_name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "acl_name", value)

    @_builtins.property
    @pulumi.getter(name="aclNameVariable")
    def acl_name_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "acl_name_variable")

    @acl_name_variable.setter
    def acl_name_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "acl_name_variable", value)

    @_builtins.property
    @pulumi.getter
    def direction(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Direction
          - Choices: `in`, `out`
        """
        return pulumi.get(self, "direction")

    @direction.setter
    def direction(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "direction", value)

    @_builtins.property
    @pulumi.getter
    def optional(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Indicates if list item is considered optional.
        """
        return pulumi.get(self, "optional")

    @optional.setter
    def optional(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "optional", value)


if not MYPY:
    class CiscoVpnInterfaceFeatureTemplateIpv6DhcpHelperArgsDict(TypedDict):
        address: NotRequired[pulumi.Input[_builtins.str]]
        """
        DHCPv6 Helper address
        """
        address_variable: NotRequired[pulumi.Input[_builtins.str]]
        """
        Variable name
        """
        optional: NotRequired[pulumi.Input[_builtins.bool]]
        """
        Indicates if list item is considered optional.
        """
        vpn_id: NotRequired[pulumi.Input[_builtins.int]]
        """
        DHCPv6 Helper VPN
          - Range: `1`-`65536`
        """
        vpn_id_variable: NotRequired[pulumi.Input[_builtins.str]]
        """
        Variable name
        """
elif False:
    CiscoVpnInterfaceFeatureTemplateIpv6DhcpHelperArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class CiscoVpnInterfaceFeatureTemplateIpv6DhcpHelperArgs:
    def __init__(__self__, *,
                 address: Optional[pulumi.Input[_builtins.str]] = None,
                 address_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 optional: Optional[pulumi.Input[_builtins.bool]] = None,
                 vpn_id: Optional[pulumi.Input[_builtins.int]] = None,
                 vpn_id_variable: Optional[pulumi.Input[_builtins.str]] = None):
        """
        :param pulumi.Input[_builtins.str] address: DHCPv6 Helper address
        :param pulumi.Input[_builtins.str] address_variable: Variable name
        :param pulumi.Input[_builtins.bool] optional: Indicates if list item is considered optional.
        :param pulumi.Input[_builtins.int] vpn_id: DHCPv6 Helper VPN
                 - Range: `1`-`65536`
        :param pulumi.Input[_builtins.str] vpn_id_variable: Variable name
        """
        if address is not None:
            pulumi.set(__self__, "address", address)
        if address_variable is not None:
            pulumi.set(__self__, "address_variable", address_variable)
        if optional is not None:
            pulumi.set(__self__, "optional", optional)
        if vpn_id is not None:
            pulumi.set(__self__, "vpn_id", vpn_id)
        if vpn_id_variable is not None:
            pulumi.set(__self__, "vpn_id_variable", vpn_id_variable)

    @_builtins.property
    @pulumi.getter
    def address(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        DHCPv6 Helper address
        """
        return pulumi.get(self, "address")

    @address.setter
    def address(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "address", value)

    @_builtins.property
    @pulumi.getter(name="addressVariable")
    def address_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "address_variable")

    @address_variable.setter
    def address_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "address_variable", value)

    @_builtins.property
    @pulumi.getter
    def optional(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Indicates if list item is considered optional.
        """
        return pulumi.get(self, "optional")

    @optional.setter
    def optional(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "optional", value)

    @_builtins.property
    @pulumi.getter(name="vpnId")
    def vpn_id(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        DHCPv6 Helper VPN
          - Range: `1`-`65536`
        """
        return pulumi.get(self, "vpn_id")

    @vpn_id.setter
    def vpn_id(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "vpn_id", value)

    @_builtins.property
    @pulumi.getter(name="vpnIdVariable")
    def vpn_id_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "vpn_id_variable")

    @vpn_id_variable.setter
    def vpn_id_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "vpn_id_variable", value)


if not MYPY:
    class CiscoVpnInterfaceFeatureTemplateIpv6SecondaryAddressArgsDict(TypedDict):
        address: NotRequired[pulumi.Input[_builtins.str]]
        """
        IPv6 Address
        """
        address_variable: NotRequired[pulumi.Input[_builtins.str]]
        """
        Variable name
        """
        optional: NotRequired[pulumi.Input[_builtins.bool]]
        """
        Indicates if list item is considered optional.
        """
elif False:
    CiscoVpnInterfaceFeatureTemplateIpv6SecondaryAddressArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class CiscoVpnInterfaceFeatureTemplateIpv6SecondaryAddressArgs:
    def __init__(__self__, *,
                 address: Optional[pulumi.Input[_builtins.str]] = None,
                 address_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 optional: Optional[pulumi.Input[_builtins.bool]] = None):
        """
        :param pulumi.Input[_builtins.str] address: IPv6 Address
        :param pulumi.Input[_builtins.str] address_variable: Variable name
        :param pulumi.Input[_builtins.bool] optional: Indicates if list item is considered optional.
        """
        if address is not None:
            pulumi.set(__self__, "address", address)
        if address_variable is not None:
            pulumi.set(__self__, "address_variable", address_variable)
        if optional is not None:
            pulumi.set(__self__, "optional", optional)

    @_builtins.property
    @pulumi.getter
    def address(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        IPv6 Address
        """
        return pulumi.get(self, "address")

    @address.setter
    def address(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "address", value)

    @_builtins.property
    @pulumi.getter(name="addressVariable")
    def address_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "address_variable")

    @address_variable.setter
    def address_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "address_variable", value)

    @_builtins.property
    @pulumi.getter
    def optional(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Indicates if list item is considered optional.
        """
        return pulumi.get(self, "optional")

    @optional.setter
    def optional(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "optional", value)


if not MYPY:
    class CiscoVpnInterfaceFeatureTemplateIpv6VrrpArgsDict(TypedDict):
        group_id: NotRequired[pulumi.Input[_builtins.int]]
        """
        Group ID
          - Range: `1`-`255`
        """
        group_id_variable: NotRequired[pulumi.Input[_builtins.str]]
        """
        Variable name
        """
        ipv6_addresses: NotRequired[pulumi.Input[Sequence[pulumi.Input['CiscoVpnInterfaceFeatureTemplateIpv6VrrpIpv6AddressArgsDict']]]]
        """
        IPv6 VRRP
        """
        optional: NotRequired[pulumi.Input[_builtins.bool]]
        """
        Indicates if list item is considered optional.
        """
        priority: NotRequired[pulumi.Input[_builtins.int]]
        """
        Set priority
          - Range: `1`-`254`
          - Default value: `100`
        """
        priority_variable: NotRequired[pulumi.Input[_builtins.str]]
        """
        Variable name
        """
        timer: NotRequired[pulumi.Input[_builtins.int]]
        """
        Timer interval for successive advertisements, in milliseconds
          - Range: `100`-`40950`
          - Default value: `100`
        """
        timer_variable: NotRequired[pulumi.Input[_builtins.str]]
        """
        Variable name
        """
        track_omp: NotRequired[pulumi.Input[_builtins.bool]]
        """
        Track OMP status
          - Default value: `false`
        """
        track_omp_variable: NotRequired[pulumi.Input[_builtins.str]]
        """
        Variable name
        """
        track_prefix_list: NotRequired[pulumi.Input[_builtins.str]]
        """
        Track Prefix List
        """
        track_prefix_list_variable: NotRequired[pulumi.Input[_builtins.str]]
        """
        Variable name
        """
elif False:
    CiscoVpnInterfaceFeatureTemplateIpv6VrrpArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class CiscoVpnInterfaceFeatureTemplateIpv6VrrpArgs:
    def __init__(__self__, *,
                 group_id: Optional[pulumi.Input[_builtins.int]] = None,
                 group_id_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 ipv6_addresses: Optional[pulumi.Input[Sequence[pulumi.Input['CiscoVpnInterfaceFeatureTemplateIpv6VrrpIpv6AddressArgs']]]] = None,
                 optional: Optional[pulumi.Input[_builtins.bool]] = None,
                 priority: Optional[pulumi.Input[_builtins.int]] = None,
                 priority_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 timer: Optional[pulumi.Input[_builtins.int]] = None,
                 timer_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 track_omp: Optional[pulumi.Input[_builtins.bool]] = None,
                 track_omp_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 track_prefix_list: Optional[pulumi.Input[_builtins.str]] = None,
                 track_prefix_list_variable: Optional[pulumi.Input[_builtins.str]] = None):
        """
        :param pulumi.Input[_builtins.int] group_id: Group ID
                 - Range: `1`-`255`
        :param pulumi.Input[_builtins.str] group_id_variable: Variable name
        :param pulumi.Input[Sequence[pulumi.Input['CiscoVpnInterfaceFeatureTemplateIpv6VrrpIpv6AddressArgs']]] ipv6_addresses: IPv6 VRRP
        :param pulumi.Input[_builtins.bool] optional: Indicates if list item is considered optional.
        :param pulumi.Input[_builtins.int] priority: Set priority
                 - Range: `1`-`254`
                 - Default value: `100`
        :param pulumi.Input[_builtins.str] priority_variable: Variable name
        :param pulumi.Input[_builtins.int] timer: Timer interval for successive advertisements, in milliseconds
                 - Range: `100`-`40950`
                 - Default value: `100`
        :param pulumi.Input[_builtins.str] timer_variable: Variable name
        :param pulumi.Input[_builtins.bool] track_omp: Track OMP status
                 - Default value: `false`
        :param pulumi.Input[_builtins.str] track_omp_variable: Variable name
        :param pulumi.Input[_builtins.str] track_prefix_list: Track Prefix List
        :param pulumi.Input[_builtins.str] track_prefix_list_variable: Variable name
        """
        if group_id is not None:
            pulumi.set(__self__, "group_id", group_id)
        if group_id_variable is not None:
            pulumi.set(__self__, "group_id_variable", group_id_variable)
        if ipv6_addresses is not None:
            pulumi.set(__self__, "ipv6_addresses", ipv6_addresses)
        if optional is not None:
            pulumi.set(__self__, "optional", optional)
        if priority is not None:
            pulumi.set(__self__, "priority", priority)
        if priority_variable is not None:
            pulumi.set(__self__, "priority_variable", priority_variable)
        if timer is not None:
            pulumi.set(__self__, "timer", timer)
        if timer_variable is not None:
            pulumi.set(__self__, "timer_variable", timer_variable)
        if track_omp is not None:
            pulumi.set(__self__, "track_omp", track_omp)
        if track_omp_variable is not None:
            pulumi.set(__self__, "track_omp_variable", track_omp_variable)
        if track_prefix_list is not None:
            pulumi.set(__self__, "track_prefix_list", track_prefix_list)
        if track_prefix_list_variable is not None:
            pulumi.set(__self__, "track_prefix_list_variable", track_prefix_list_variable)

    @_builtins.property
    @pulumi.getter(name="groupId")
    def group_id(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        Group ID
          - Range: `1`-`255`
        """
        return pulumi.get(self, "group_id")

    @group_id.setter
    def group_id(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "group_id", value)

    @_builtins.property
    @pulumi.getter(name="groupIdVariable")
    def group_id_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "group_id_variable")

    @group_id_variable.setter
    def group_id_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "group_id_variable", value)

    @_builtins.property
    @pulumi.getter(name="ipv6Addresses")
    def ipv6_addresses(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['CiscoVpnInterfaceFeatureTemplateIpv6VrrpIpv6AddressArgs']]]]:
        """
        IPv6 VRRP
        """
        return pulumi.get(self, "ipv6_addresses")

    @ipv6_addresses.setter
    def ipv6_addresses(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['CiscoVpnInterfaceFeatureTemplateIpv6VrrpIpv6AddressArgs']]]]):
        pulumi.set(self, "ipv6_addresses", value)

    @_builtins.property
    @pulumi.getter
    def optional(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Indicates if list item is considered optional.
        """
        return pulumi.get(self, "optional")

    @optional.setter
    def optional(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "optional", value)

    @_builtins.property
    @pulumi.getter
    def priority(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        Set priority
          - Range: `1`-`254`
          - Default value: `100`
        """
        return pulumi.get(self, "priority")

    @priority.setter
    def priority(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "priority", value)

    @_builtins.property
    @pulumi.getter(name="priorityVariable")
    def priority_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "priority_variable")

    @priority_variable.setter
    def priority_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "priority_variable", value)

    @_builtins.property
    @pulumi.getter
    def timer(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        Timer interval for successive advertisements, in milliseconds
          - Range: `100`-`40950`
          - Default value: `100`
        """
        return pulumi.get(self, "timer")

    @timer.setter
    def timer(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "timer", value)

    @_builtins.property
    @pulumi.getter(name="timerVariable")
    def timer_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "timer_variable")

    @timer_variable.setter
    def timer_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "timer_variable", value)

    @_builtins.property
    @pulumi.getter(name="trackOmp")
    def track_omp(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Track OMP status
          - Default value: `false`
        """
        return pulumi.get(self, "track_omp")

    @track_omp.setter
    def track_omp(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "track_omp", value)

    @_builtins.property
    @pulumi.getter(name="trackOmpVariable")
    def track_omp_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "track_omp_variable")

    @track_omp_variable.setter
    def track_omp_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "track_omp_variable", value)

    @_builtins.property
    @pulumi.getter(name="trackPrefixList")
    def track_prefix_list(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Track Prefix List
        """
        return pulumi.get(self, "track_prefix_list")

    @track_prefix_list.setter
    def track_prefix_list(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "track_prefix_list", value)

    @_builtins.property
    @pulumi.getter(name="trackPrefixListVariable")
    def track_prefix_list_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "track_prefix_list_variable")

    @track_prefix_list_variable.setter
    def track_prefix_list_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "track_prefix_list_variable", value)


if not MYPY:
    class CiscoVpnInterfaceFeatureTemplateIpv6VrrpIpv6AddressArgsDict(TypedDict):
        ipv6_link_local: NotRequired[pulumi.Input[_builtins.str]]
        """
        Use link-local IPv6 Address
        """
        ipv6_link_local_variable: NotRequired[pulumi.Input[_builtins.str]]
        """
        Variable name
        """
        optional: NotRequired[pulumi.Input[_builtins.bool]]
        """
        Indicates if list item is considered optional.
        """
        prefix: NotRequired[pulumi.Input[_builtins.str]]
        """
        Assign Global IPv6 Prefix
        """
        prefix_variable: NotRequired[pulumi.Input[_builtins.str]]
        """
        Variable name
        """
elif False:
    CiscoVpnInterfaceFeatureTemplateIpv6VrrpIpv6AddressArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class CiscoVpnInterfaceFeatureTemplateIpv6VrrpIpv6AddressArgs:
    def __init__(__self__, *,
                 ipv6_link_local: Optional[pulumi.Input[_builtins.str]] = None,
                 ipv6_link_local_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 optional: Optional[pulumi.Input[_builtins.bool]] = None,
                 prefix: Optional[pulumi.Input[_builtins.str]] = None,
                 prefix_variable: Optional[pulumi.Input[_builtins.str]] = None):
        """
        :param pulumi.Input[_builtins.str] ipv6_link_local: Use link-local IPv6 Address
        :param pulumi.Input[_builtins.str] ipv6_link_local_variable: Variable name
        :param pulumi.Input[_builtins.bool] optional: Indicates if list item is considered optional.
        :param pulumi.Input[_builtins.str] prefix: Assign Global IPv6 Prefix
        :param pulumi.Input[_builtins.str] prefix_variable: Variable name
        """
        if ipv6_link_local is not None:
            pulumi.set(__self__, "ipv6_link_local", ipv6_link_local)
        if ipv6_link_local_variable is not None:
            pulumi.set(__self__, "ipv6_link_local_variable", ipv6_link_local_variable)
        if optional is not None:
            pulumi.set(__self__, "optional", optional)
        if prefix is not None:
            pulumi.set(__self__, "prefix", prefix)
        if prefix_variable is not None:
            pulumi.set(__self__, "prefix_variable", prefix_variable)

    @_builtins.property
    @pulumi.getter(name="ipv6LinkLocal")
    def ipv6_link_local(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Use link-local IPv6 Address
        """
        return pulumi.get(self, "ipv6_link_local")

    @ipv6_link_local.setter
    def ipv6_link_local(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "ipv6_link_local", value)

    @_builtins.property
    @pulumi.getter(name="ipv6LinkLocalVariable")
    def ipv6_link_local_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "ipv6_link_local_variable")

    @ipv6_link_local_variable.setter
    def ipv6_link_local_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "ipv6_link_local_variable", value)

    @_builtins.property
    @pulumi.getter
    def optional(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Indicates if list item is considered optional.
        """
        return pulumi.get(self, "optional")

    @optional.setter
    def optional(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "optional", value)

    @_builtins.property
    @pulumi.getter
    def prefix(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Assign Global IPv6 Prefix
        """
        return pulumi.get(self, "prefix")

    @prefix.setter
    def prefix(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "prefix", value)

    @_builtins.property
    @pulumi.getter(name="prefixVariable")
    def prefix_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "prefix_variable")

    @prefix_variable.setter
    def prefix_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "prefix_variable", value)


if not MYPY:
    class CiscoVpnInterfaceFeatureTemplateStaticArpArgsDict(TypedDict):
        ip_address: NotRequired[pulumi.Input[_builtins.str]]
        """
        IP Address
        """
        ip_address_variable: NotRequired[pulumi.Input[_builtins.str]]
        """
        Variable name
        """
        mac: NotRequired[pulumi.Input[_builtins.str]]
        """
        MAC address
        """
        mac_variable: NotRequired[pulumi.Input[_builtins.str]]
        """
        Variable name
        """
        optional: NotRequired[pulumi.Input[_builtins.bool]]
        """
        Indicates if list item is considered optional.
        """
elif False:
    CiscoVpnInterfaceFeatureTemplateStaticArpArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class CiscoVpnInterfaceFeatureTemplateStaticArpArgs:
    def __init__(__self__, *,
                 ip_address: Optional[pulumi.Input[_builtins.str]] = None,
                 ip_address_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 mac: Optional[pulumi.Input[_builtins.str]] = None,
                 mac_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 optional: Optional[pulumi.Input[_builtins.bool]] = None):
        """
        :param pulumi.Input[_builtins.str] ip_address: IP Address
        :param pulumi.Input[_builtins.str] ip_address_variable: Variable name
        :param pulumi.Input[_builtins.str] mac: MAC address
        :param pulumi.Input[_builtins.str] mac_variable: Variable name
        :param pulumi.Input[_builtins.bool] optional: Indicates if list item is considered optional.
        """
        if ip_address is not None:
            pulumi.set(__self__, "ip_address", ip_address)
        if ip_address_variable is not None:
            pulumi.set(__self__, "ip_address_variable", ip_address_variable)
        if mac is not None:
            pulumi.set(__self__, "mac", mac)
        if mac_variable is not None:
            pulumi.set(__self__, "mac_variable", mac_variable)
        if optional is not None:
            pulumi.set(__self__, "optional", optional)

    @_builtins.property
    @pulumi.getter(name="ipAddress")
    def ip_address(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        IP Address
        """
        return pulumi.get(self, "ip_address")

    @ip_address.setter
    def ip_address(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "ip_address", value)

    @_builtins.property
    @pulumi.getter(name="ipAddressVariable")
    def ip_address_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "ip_address_variable")

    @ip_address_variable.setter
    def ip_address_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "ip_address_variable", value)

    @_builtins.property
    @pulumi.getter
    def mac(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        MAC address
        """
        return pulumi.get(self, "mac")

    @mac.setter
    def mac(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "mac", value)

    @_builtins.property
    @pulumi.getter(name="macVariable")
    def mac_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "mac_variable")

    @mac_variable.setter
    def mac_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "mac_variable", value)

    @_builtins.property
    @pulumi.getter
    def optional(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Indicates if list item is considered optional.
        """
        return pulumi.get(self, "optional")

    @optional.setter
    def optional(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "optional", value)


if not MYPY:
    class CiscoVpnInterfaceFeatureTemplateStaticNat66EntryArgsDict(TypedDict):
        optional: NotRequired[pulumi.Input[_builtins.bool]]
        """
        Indicates if list item is considered optional.
        """
        source_prefix: NotRequired[pulumi.Input[_builtins.str]]
        """
        Source Prefix
        """
        source_prefix_variable: NotRequired[pulumi.Input[_builtins.str]]
        """
        Variable name
        """
        source_vpn_id: NotRequired[pulumi.Input[_builtins.int]]
        """
        Source VPN ID
          - Range: `0`-`65530`
          - Default value: `0`
        """
        source_vpn_id_variable: NotRequired[pulumi.Input[_builtins.str]]
        """
        Variable name
        """
        translated_source_prefix: NotRequired[pulumi.Input[_builtins.str]]
        """
        Translated Source Prefix
        """
        translated_source_prefix_variable: NotRequired[pulumi.Input[_builtins.str]]
        """
        Variable name
        """
elif False:
    CiscoVpnInterfaceFeatureTemplateStaticNat66EntryArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class CiscoVpnInterfaceFeatureTemplateStaticNat66EntryArgs:
    def __init__(__self__, *,
                 optional: Optional[pulumi.Input[_builtins.bool]] = None,
                 source_prefix: Optional[pulumi.Input[_builtins.str]] = None,
                 source_prefix_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 source_vpn_id: Optional[pulumi.Input[_builtins.int]] = None,
                 source_vpn_id_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 translated_source_prefix: Optional[pulumi.Input[_builtins.str]] = None,
                 translated_source_prefix_variable: Optional[pulumi.Input[_builtins.str]] = None):
        """
        :param pulumi.Input[_builtins.bool] optional: Indicates if list item is considered optional.
        :param pulumi.Input[_builtins.str] source_prefix: Source Prefix
        :param pulumi.Input[_builtins.str] source_prefix_variable: Variable name
        :param pulumi.Input[_builtins.int] source_vpn_id: Source VPN ID
                 - Range: `0`-`65530`
                 - Default value: `0`
        :param pulumi.Input[_builtins.str] source_vpn_id_variable: Variable name
        :param pulumi.Input[_builtins.str] translated_source_prefix: Translated Source Prefix
        :param pulumi.Input[_builtins.str] translated_source_prefix_variable: Variable name
        """
        if optional is not None:
            pulumi.set(__self__, "optional", optional)
        if source_prefix is not None:
            pulumi.set(__self__, "source_prefix", source_prefix)
        if source_prefix_variable is not None:
            pulumi.set(__self__, "source_prefix_variable", source_prefix_variable)
        if source_vpn_id is not None:
            pulumi.set(__self__, "source_vpn_id", source_vpn_id)
        if source_vpn_id_variable is not None:
            pulumi.set(__self__, "source_vpn_id_variable", source_vpn_id_variable)
        if translated_source_prefix is not None:
            pulumi.set(__self__, "translated_source_prefix", translated_source_prefix)
        if translated_source_prefix_variable is not None:
            pulumi.set(__self__, "translated_source_prefix_variable", translated_source_prefix_variable)

    @_builtins.property
    @pulumi.getter
    def optional(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Indicates if list item is considered optional.
        """
        return pulumi.get(self, "optional")

    @optional.setter
    def optional(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "optional", value)

    @_builtins.property
    @pulumi.getter(name="sourcePrefix")
    def source_prefix(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Source Prefix
        """
        return pulumi.get(self, "source_prefix")

    @source_prefix.setter
    def source_prefix(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "source_prefix", value)

    @_builtins.property
    @pulumi.getter(name="sourcePrefixVariable")
    def source_prefix_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "source_prefix_variable")

    @source_prefix_variable.setter
    def source_prefix_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "source_prefix_variable", value)

    @_builtins.property
    @pulumi.getter(name="sourceVpnId")
    def source_vpn_id(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        Source VPN ID
          - Range: `0`-`65530`
          - Default value: `0`
        """
        return pulumi.get(self, "source_vpn_id")

    @source_vpn_id.setter
    def source_vpn_id(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "source_vpn_id", value)

    @_builtins.property
    @pulumi.getter(name="sourceVpnIdVariable")
    def source_vpn_id_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "source_vpn_id_variable")

    @source_vpn_id_variable.setter
    def source_vpn_id_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "source_vpn_id_variable", value)

    @_builtins.property
    @pulumi.getter(name="translatedSourcePrefix")
    def translated_source_prefix(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Translated Source Prefix
        """
        return pulumi.get(self, "translated_source_prefix")

    @translated_source_prefix.setter
    def translated_source_prefix(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "translated_source_prefix", value)

    @_builtins.property
    @pulumi.getter(name="translatedSourcePrefixVariable")
    def translated_source_prefix_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "translated_source_prefix_variable")

    @translated_source_prefix_variable.setter
    def translated_source_prefix_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "translated_source_prefix_variable", value)


if not MYPY:
    class CiscoVpnInterfaceFeatureTemplateStaticNatEntryArgsDict(TypedDict):
        optional: NotRequired[pulumi.Input[_builtins.bool]]
        """
        Indicates if list item is considered optional.
        """
        source_ip: NotRequired[pulumi.Input[_builtins.str]]
        """
        Source IP address to be translated
        """
        source_ip_variable: NotRequired[pulumi.Input[_builtins.str]]
        """
        Variable name
        """
        source_vpn_id: NotRequired[pulumi.Input[_builtins.int]]
        """
        Configure VPN ID
          - Range: `0`-`65530`
          - Default value: `0`
        """
        source_vpn_id_variable: NotRequired[pulumi.Input[_builtins.str]]
        """
        Variable name
        """
        static_nat_direction: NotRequired[pulumi.Input[_builtins.str]]
        """
        Direction of static NAT translation
          - Choices: `inside`, `outside`
          - Default value: `inside`
        """
        static_nat_direction_variable: NotRequired[pulumi.Input[_builtins.str]]
        """
        Variable name
        """
        translate_ip: NotRequired[pulumi.Input[_builtins.str]]
        """
        Statically translated source IP address
        """
        translate_ip_variable: NotRequired[pulumi.Input[_builtins.str]]
        """
        Variable name
        """
elif False:
    CiscoVpnInterfaceFeatureTemplateStaticNatEntryArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class CiscoVpnInterfaceFeatureTemplateStaticNatEntryArgs:
    def __init__(__self__, *,
                 optional: Optional[pulumi.Input[_builtins.bool]] = None,
                 source_ip: Optional[pulumi.Input[_builtins.str]] = None,
                 source_ip_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 source_vpn_id: Optional[pulumi.Input[_builtins.int]] = None,
                 source_vpn_id_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 static_nat_direction: Optional[pulumi.Input[_builtins.str]] = None,
                 static_nat_direction_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 translate_ip: Optional[pulumi.Input[_builtins.str]] = None,
                 translate_ip_variable: Optional[pulumi.Input[_builtins.str]] = None):
        """
        :param pulumi.Input[_builtins.bool] optional: Indicates if list item is considered optional.
        :param pulumi.Input[_builtins.str] source_ip: Source IP address to be translated
        :param pulumi.Input[_builtins.str] source_ip_variable: Variable name
        :param pulumi.Input[_builtins.int] source_vpn_id: Configure VPN ID
                 - Range: `0`-`65530`
                 - Default value: `0`
        :param pulumi.Input[_builtins.str] source_vpn_id_variable: Variable name
        :param pulumi.Input[_builtins.str] static_nat_direction: Direction of static NAT translation
                 - Choices: `inside`, `outside`
                 - Default value: `inside`
        :param pulumi.Input[_builtins.str] static_nat_direction_variable: Variable name
        :param pulumi.Input[_builtins.str] translate_ip: Statically translated source IP address
        :param pulumi.Input[_builtins.str] translate_ip_variable: Variable name
        """
        if optional is not None:
            pulumi.set(__self__, "optional", optional)
        if source_ip is not None:
            pulumi.set(__self__, "source_ip", source_ip)
        if source_ip_variable is not None:
            pulumi.set(__self__, "source_ip_variable", source_ip_variable)
        if source_vpn_id is not None:
            pulumi.set(__self__, "source_vpn_id", source_vpn_id)
        if source_vpn_id_variable is not None:
            pulumi.set(__self__, "source_vpn_id_variable", source_vpn_id_variable)
        if static_nat_direction is not None:
            pulumi.set(__self__, "static_nat_direction", static_nat_direction)
        if static_nat_direction_variable is not None:
            pulumi.set(__self__, "static_nat_direction_variable", static_nat_direction_variable)
        if translate_ip is not None:
            pulumi.set(__self__, "translate_ip", translate_ip)
        if translate_ip_variable is not None:
            pulumi.set(__self__, "translate_ip_variable", translate_ip_variable)

    @_builtins.property
    @pulumi.getter
    def optional(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Indicates if list item is considered optional.
        """
        return pulumi.get(self, "optional")

    @optional.setter
    def optional(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "optional", value)

    @_builtins.property
    @pulumi.getter(name="sourceIp")
    def source_ip(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Source IP address to be translated
        """
        return pulumi.get(self, "source_ip")

    @source_ip.setter
    def source_ip(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "source_ip", value)

    @_builtins.property
    @pulumi.getter(name="sourceIpVariable")
    def source_ip_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "source_ip_variable")

    @source_ip_variable.setter
    def source_ip_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "source_ip_variable", value)

    @_builtins.property
    @pulumi.getter(name="sourceVpnId")
    def source_vpn_id(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        Configure VPN ID
          - Range: `0`-`65530`
          - Default value: `0`
        """
        return pulumi.get(self, "source_vpn_id")

    @source_vpn_id.setter
    def source_vpn_id(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "source_vpn_id", value)

    @_builtins.property
    @pulumi.getter(name="sourceVpnIdVariable")
    def source_vpn_id_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "source_vpn_id_variable")

    @source_vpn_id_variable.setter
    def source_vpn_id_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "source_vpn_id_variable", value)

    @_builtins.property
    @pulumi.getter(name="staticNatDirection")
    def static_nat_direction(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Direction of static NAT translation
          - Choices: `inside`, `outside`
          - Default value: `inside`
        """
        return pulumi.get(self, "static_nat_direction")

    @static_nat_direction.setter
    def static_nat_direction(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "static_nat_direction", value)

    @_builtins.property
    @pulumi.getter(name="staticNatDirectionVariable")
    def static_nat_direction_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "static_nat_direction_variable")

    @static_nat_direction_variable.setter
    def static_nat_direction_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "static_nat_direction_variable", value)

    @_builtins.property
    @pulumi.getter(name="translateIp")
    def translate_ip(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Statically translated source IP address
        """
        return pulumi.get(self, "translate_ip")

    @translate_ip.setter
    def translate_ip(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "translate_ip", value)

    @_builtins.property
    @pulumi.getter(name="translateIpVariable")
    def translate_ip_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "translate_ip_variable")

    @translate_ip_variable.setter
    def translate_ip_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "translate_ip_variable", value)


if not MYPY:
    class CiscoVpnInterfaceFeatureTemplateStaticPortForwardEntryArgsDict(TypedDict):
        optional: NotRequired[pulumi.Input[_builtins.bool]]
        """
        Indicates if list item is considered optional.
        """
        protocol: NotRequired[pulumi.Input[_builtins.str]]
        """
        Protocol
          - Choices: `tcp`, `udp`
        """
        protocol_variable: NotRequired[pulumi.Input[_builtins.str]]
        """
        Variable name
        """
        source_ip: NotRequired[pulumi.Input[_builtins.str]]
        """
        Source IP address to be translated
        """
        source_ip_variable: NotRequired[pulumi.Input[_builtins.str]]
        """
        Variable name
        """
        source_port: NotRequired[pulumi.Input[_builtins.int]]
        """
        Source Port
          - Range: `0`-`65535`
          - Default value: `0`
        """
        source_port_variable: NotRequired[pulumi.Input[_builtins.str]]
        """
        Variable name
        """
        source_vpn_id: NotRequired[pulumi.Input[_builtins.int]]
        """
        Configure VPN ID
          - Range: `0`-`65530`
          - Default value: `0`
        """
        source_vpn_id_variable: NotRequired[pulumi.Input[_builtins.str]]
        """
        Variable name
        """
        static_nat_direction: NotRequired[pulumi.Input[_builtins.str]]
        """
        Direction of static NAT translation
          - Choices: `inside`, `outside`
          - Default value: `inside`
        """
        static_nat_direction_variable: NotRequired[pulumi.Input[_builtins.str]]
        """
        Variable name
        """
        translate_ip: NotRequired[pulumi.Input[_builtins.str]]
        """
        Statically translated source IP address
        """
        translate_ip_variable: NotRequired[pulumi.Input[_builtins.str]]
        """
        Variable name
        """
        translate_port: NotRequired[pulumi.Input[_builtins.int]]
        """
        Translate Port
          - Range: `0`-`65535`
          - Default value: `0`
        """
        translate_port_variable: NotRequired[pulumi.Input[_builtins.str]]
        """
        Variable name
        """
elif False:
    CiscoVpnInterfaceFeatureTemplateStaticPortForwardEntryArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class CiscoVpnInterfaceFeatureTemplateStaticPortForwardEntryArgs:
    def __init__(__self__, *,
                 optional: Optional[pulumi.Input[_builtins.bool]] = None,
                 protocol: Optional[pulumi.Input[_builtins.str]] = None,
                 protocol_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 source_ip: Optional[pulumi.Input[_builtins.str]] = None,
                 source_ip_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 source_port: Optional[pulumi.Input[_builtins.int]] = None,
                 source_port_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 source_vpn_id: Optional[pulumi.Input[_builtins.int]] = None,
                 source_vpn_id_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 static_nat_direction: Optional[pulumi.Input[_builtins.str]] = None,
                 static_nat_direction_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 translate_ip: Optional[pulumi.Input[_builtins.str]] = None,
                 translate_ip_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 translate_port: Optional[pulumi.Input[_builtins.int]] = None,
                 translate_port_variable: Optional[pulumi.Input[_builtins.str]] = None):
        """
        :param pulumi.Input[_builtins.bool] optional: Indicates if list item is considered optional.
        :param pulumi.Input[_builtins.str] protocol: Protocol
                 - Choices: `tcp`, `udp`
        :param pulumi.Input[_builtins.str] protocol_variable: Variable name
        :param pulumi.Input[_builtins.str] source_ip: Source IP address to be translated
        :param pulumi.Input[_builtins.str] source_ip_variable: Variable name
        :param pulumi.Input[_builtins.int] source_port: Source Port
                 - Range: `0`-`65535`
                 - Default value: `0`
        :param pulumi.Input[_builtins.str] source_port_variable: Variable name
        :param pulumi.Input[_builtins.int] source_vpn_id: Configure VPN ID
                 - Range: `0`-`65530`
                 - Default value: `0`
        :param pulumi.Input[_builtins.str] source_vpn_id_variable: Variable name
        :param pulumi.Input[_builtins.str] static_nat_direction: Direction of static NAT translation
                 - Choices: `inside`, `outside`
                 - Default value: `inside`
        :param pulumi.Input[_builtins.str] static_nat_direction_variable: Variable name
        :param pulumi.Input[_builtins.str] translate_ip: Statically translated source IP address
        :param pulumi.Input[_builtins.str] translate_ip_variable: Variable name
        :param pulumi.Input[_builtins.int] translate_port: Translate Port
                 - Range: `0`-`65535`
                 - Default value: `0`
        :param pulumi.Input[_builtins.str] translate_port_variable: Variable name
        """
        if optional is not None:
            pulumi.set(__self__, "optional", optional)
        if protocol is not None:
            pulumi.set(__self__, "protocol", protocol)
        if protocol_variable is not None:
            pulumi.set(__self__, "protocol_variable", protocol_variable)
        if source_ip is not None:
            pulumi.set(__self__, "source_ip", source_ip)
        if source_ip_variable is not None:
            pulumi.set(__self__, "source_ip_variable", source_ip_variable)
        if source_port is not None:
            pulumi.set(__self__, "source_port", source_port)
        if source_port_variable is not None:
            pulumi.set(__self__, "source_port_variable", source_port_variable)
        if source_vpn_id is not None:
            pulumi.set(__self__, "source_vpn_id", source_vpn_id)
        if source_vpn_id_variable is not None:
            pulumi.set(__self__, "source_vpn_id_variable", source_vpn_id_variable)
        if static_nat_direction is not None:
            pulumi.set(__self__, "static_nat_direction", static_nat_direction)
        if static_nat_direction_variable is not None:
            pulumi.set(__self__, "static_nat_direction_variable", static_nat_direction_variable)
        if translate_ip is not None:
            pulumi.set(__self__, "translate_ip", translate_ip)
        if translate_ip_variable is not None:
            pulumi.set(__self__, "translate_ip_variable", translate_ip_variable)
        if translate_port is not None:
            pulumi.set(__self__, "translate_port", translate_port)
        if translate_port_variable is not None:
            pulumi.set(__self__, "translate_port_variable", translate_port_variable)

    @_builtins.property
    @pulumi.getter
    def optional(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Indicates if list item is considered optional.
        """
        return pulumi.get(self, "optional")

    @optional.setter
    def optional(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "optional", value)

    @_builtins.property
    @pulumi.getter
    def protocol(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Protocol
          - Choices: `tcp`, `udp`
        """
        return pulumi.get(self, "protocol")

    @protocol.setter
    def protocol(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "protocol", value)

    @_builtins.property
    @pulumi.getter(name="protocolVariable")
    def protocol_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "protocol_variable")

    @protocol_variable.setter
    def protocol_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "protocol_variable", value)

    @_builtins.property
    @pulumi.getter(name="sourceIp")
    def source_ip(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Source IP address to be translated
        """
        return pulumi.get(self, "source_ip")

    @source_ip.setter
    def source_ip(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "source_ip", value)

    @_builtins.property
    @pulumi.getter(name="sourceIpVariable")
    def source_ip_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "source_ip_variable")

    @source_ip_variable.setter
    def source_ip_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "source_ip_variable", value)

    @_builtins.property
    @pulumi.getter(name="sourcePort")
    def source_port(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        Source Port
          - Range: `0`-`65535`
          - Default value: `0`
        """
        return pulumi.get(self, "source_port")

    @source_port.setter
    def source_port(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "source_port", value)

    @_builtins.property
    @pulumi.getter(name="sourcePortVariable")
    def source_port_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "source_port_variable")

    @source_port_variable.setter
    def source_port_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "source_port_variable", value)

    @_builtins.property
    @pulumi.getter(name="sourceVpnId")
    def source_vpn_id(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        Configure VPN ID
          - Range: `0`-`65530`
          - Default value: `0`
        """
        return pulumi.get(self, "source_vpn_id")

    @source_vpn_id.setter
    def source_vpn_id(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "source_vpn_id", value)

    @_builtins.property
    @pulumi.getter(name="sourceVpnIdVariable")
    def source_vpn_id_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "source_vpn_id_variable")

    @source_vpn_id_variable.setter
    def source_vpn_id_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "source_vpn_id_variable", value)

    @_builtins.property
    @pulumi.getter(name="staticNatDirection")
    def static_nat_direction(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Direction of static NAT translation
          - Choices: `inside`, `outside`
          - Default value: `inside`
        """
        return pulumi.get(self, "static_nat_direction")

    @static_nat_direction.setter
    def static_nat_direction(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "static_nat_direction", value)

    @_builtins.property
    @pulumi.getter(name="staticNatDirectionVariable")
    def static_nat_direction_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "static_nat_direction_variable")

    @static_nat_direction_variable.setter
    def static_nat_direction_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "static_nat_direction_variable", value)

    @_builtins.property
    @pulumi.getter(name="translateIp")
    def translate_ip(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Statically translated source IP address
        """
        return pulumi.get(self, "translate_ip")

    @translate_ip.setter
    def translate_ip(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "translate_ip", value)

    @_builtins.property
    @pulumi.getter(name="translateIpVariable")
    def translate_ip_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "translate_ip_variable")

    @translate_ip_variable.setter
    def translate_ip_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "translate_ip_variable", value)

    @_builtins.property
    @pulumi.getter(name="translatePort")
    def translate_port(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        Translate Port
          - Range: `0`-`65535`
          - Default value: `0`
        """
        return pulumi.get(self, "translate_port")

    @translate_port.setter
    def translate_port(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "translate_port", value)

    @_builtins.property
    @pulumi.getter(name="translatePortVariable")
    def translate_port_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "translate_port_variable")

    @translate_port_variable.setter
    def translate_port_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "translate_port_variable", value)


if not MYPY:
    class CiscoVpnInterfaceFeatureTemplateTunnelInterfaceEncapsulationArgsDict(TypedDict):
        encapsulation: NotRequired[pulumi.Input[_builtins.str]]
        """
        Encapsulation
          - Choices: `gre`, `ipsec`
        """
        optional: NotRequired[pulumi.Input[_builtins.bool]]
        """
        Indicates if list item is considered optional.
        """
        preference: NotRequired[pulumi.Input[_builtins.int]]
        """
        Set preference for TLOC
          - Range: `0`-`4294967295`
        """
        preference_variable: NotRequired[pulumi.Input[_builtins.str]]
        """
        Variable name
        """
        weight: NotRequired[pulumi.Input[_builtins.int]]
        """
        Set weight for TLOC
          - Range: `1`-`255`
          - Default value: `1`
        """
        weight_variable: NotRequired[pulumi.Input[_builtins.str]]
        """
        Variable name
        """
elif False:
    CiscoVpnInterfaceFeatureTemplateTunnelInterfaceEncapsulationArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class CiscoVpnInterfaceFeatureTemplateTunnelInterfaceEncapsulationArgs:
    def __init__(__self__, *,
                 encapsulation: Optional[pulumi.Input[_builtins.str]] = None,
                 optional: Optional[pulumi.Input[_builtins.bool]] = None,
                 preference: Optional[pulumi.Input[_builtins.int]] = None,
                 preference_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 weight: Optional[pulumi.Input[_builtins.int]] = None,
                 weight_variable: Optional[pulumi.Input[_builtins.str]] = None):
        """
        :param pulumi.Input[_builtins.str] encapsulation: Encapsulation
                 - Choices: `gre`, `ipsec`
        :param pulumi.Input[_builtins.bool] optional: Indicates if list item is considered optional.
        :param pulumi.Input[_builtins.int] preference: Set preference for TLOC
                 - Range: `0`-`4294967295`
        :param pulumi.Input[_builtins.str] preference_variable: Variable name
        :param pulumi.Input[_builtins.int] weight: Set weight for TLOC
                 - Range: `1`-`255`
                 - Default value: `1`
        :param pulumi.Input[_builtins.str] weight_variable: Variable name
        """
        if encapsulation is not None:
            pulumi.set(__self__, "encapsulation", encapsulation)
        if optional is not None:
            pulumi.set(__self__, "optional", optional)
        if preference is not None:
            pulumi.set(__self__, "preference", preference)
        if preference_variable is not None:
            pulumi.set(__self__, "preference_variable", preference_variable)
        if weight is not None:
            pulumi.set(__self__, "weight", weight)
        if weight_variable is not None:
            pulumi.set(__self__, "weight_variable", weight_variable)

    @_builtins.property
    @pulumi.getter
    def encapsulation(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Encapsulation
          - Choices: `gre`, `ipsec`
        """
        return pulumi.get(self, "encapsulation")

    @encapsulation.setter
    def encapsulation(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "encapsulation", value)

    @_builtins.property
    @pulumi.getter
    def optional(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Indicates if list item is considered optional.
        """
        return pulumi.get(self, "optional")

    @optional.setter
    def optional(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "optional", value)

    @_builtins.property
    @pulumi.getter
    def preference(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        Set preference for TLOC
          - Range: `0`-`4294967295`
        """
        return pulumi.get(self, "preference")

    @preference.setter
    def preference(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "preference", value)

    @_builtins.property
    @pulumi.getter(name="preferenceVariable")
    def preference_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "preference_variable")

    @preference_variable.setter
    def preference_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "preference_variable", value)

    @_builtins.property
    @pulumi.getter
    def weight(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        Set weight for TLOC
          - Range: `1`-`255`
          - Default value: `1`
        """
        return pulumi.get(self, "weight")

    @weight.setter
    def weight(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "weight", value)

    @_builtins.property
    @pulumi.getter(name="weightVariable")
    def weight_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "weight_variable")

    @weight_variable.setter
    def weight_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "weight_variable", value)


if not MYPY:
    class CiscoVpnInterfaceGreFeatureTemplateAccessListArgsDict(TypedDict):
        acl_name: NotRequired[pulumi.Input[_builtins.str]]
        """
        Name of access list
        """
        acl_name_variable: NotRequired[pulumi.Input[_builtins.str]]
        """
        Variable name
        """
        direction: NotRequired[pulumi.Input[_builtins.str]]
        """
        Direction
          - Choices: `in`, `out`
        """
        optional: NotRequired[pulumi.Input[_builtins.bool]]
        """
        Indicates if list item is considered optional.
        """
elif False:
    CiscoVpnInterfaceGreFeatureTemplateAccessListArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class CiscoVpnInterfaceGreFeatureTemplateAccessListArgs:
    def __init__(__self__, *,
                 acl_name: Optional[pulumi.Input[_builtins.str]] = None,
                 acl_name_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 direction: Optional[pulumi.Input[_builtins.str]] = None,
                 optional: Optional[pulumi.Input[_builtins.bool]] = None):
        """
        :param pulumi.Input[_builtins.str] acl_name: Name of access list
        :param pulumi.Input[_builtins.str] acl_name_variable: Variable name
        :param pulumi.Input[_builtins.str] direction: Direction
                 - Choices: `in`, `out`
        :param pulumi.Input[_builtins.bool] optional: Indicates if list item is considered optional.
        """
        if acl_name is not None:
            pulumi.set(__self__, "acl_name", acl_name)
        if acl_name_variable is not None:
            pulumi.set(__self__, "acl_name_variable", acl_name_variable)
        if direction is not None:
            pulumi.set(__self__, "direction", direction)
        if optional is not None:
            pulumi.set(__self__, "optional", optional)

    @_builtins.property
    @pulumi.getter(name="aclName")
    def acl_name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Name of access list
        """
        return pulumi.get(self, "acl_name")

    @acl_name.setter
    def acl_name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "acl_name", value)

    @_builtins.property
    @pulumi.getter(name="aclNameVariable")
    def acl_name_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "acl_name_variable")

    @acl_name_variable.setter
    def acl_name_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "acl_name_variable", value)

    @_builtins.property
    @pulumi.getter
    def direction(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Direction
          - Choices: `in`, `out`
        """
        return pulumi.get(self, "direction")

    @direction.setter
    def direction(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "direction", value)

    @_builtins.property
    @pulumi.getter
    def optional(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Indicates if list item is considered optional.
        """
        return pulumi.get(self, "optional")

    @optional.setter
    def optional(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "optional", value)


if not MYPY:
    class CiscoWirelessLanFeatureTemplateSsidArgsDict(TypedDict):
        admin_state: NotRequired[pulumi.Input[_builtins.bool]]
        """
        Set admin state
          - Default value: `true`
        """
        admin_state_variable: NotRequired[pulumi.Input[_builtins.str]]
        """
        Variable name
        """
        broadcast_ssid: NotRequired[pulumi.Input[_builtins.bool]]
        """
        Enable broadcast SSID
          - Default value: `true`
        """
        optional: NotRequired[pulumi.Input[_builtins.bool]]
        """
        Indicates if list item is considered optional.
        """
        passphrase: NotRequired[pulumi.Input[_builtins.str]]
        """
        Set passphrase
        """
        passphrase_variable: NotRequired[pulumi.Input[_builtins.str]]
        """
        Variable name
        """
        qos_profile: NotRequired[pulumi.Input[_builtins.str]]
        """
        Select QoS profile
          - Choices: `platinum`, `gold`, `silver`, `bronze`
          - Default value: `silver`
        """
        qos_profile_variable: NotRequired[pulumi.Input[_builtins.str]]
        """
        Variable name
        """
        radio_type: NotRequired[pulumi.Input[_builtins.str]]
        """
        Select radio type
          - Choices: `24ghz`, `5ghz`, `all`
          - Default value: `all`
        """
        radio_type_variable: NotRequired[pulumi.Input[_builtins.str]]
        """
        Variable name
        """
        radius_server_ip: NotRequired[pulumi.Input[_builtins.str]]
        """
        Set RADIUS server IP
        """
        radius_server_ip_variable: NotRequired[pulumi.Input[_builtins.str]]
        """
        Variable name
        """
        radius_server_port: NotRequired[pulumi.Input[_builtins.int]]
        """
        Set RADIUS server authentication port
          - Range: `1`-`65535`
          - Default value: `1812`
        """
        radius_server_port_variable: NotRequired[pulumi.Input[_builtins.str]]
        """
        Variable name
        """
        radius_server_secret: NotRequired[pulumi.Input[_builtins.str]]
        """
        Set RADIUS server shared secret
        """
        radius_server_secret_variable: NotRequired[pulumi.Input[_builtins.str]]
        """
        Variable name
        """
        security_type: NotRequired[pulumi.Input[_builtins.str]]
        """
        Select security type
          - Choices: `enterprise`, `personal`, `open`
          - Default value: `personal`
        """
        security_type_variable: NotRequired[pulumi.Input[_builtins.str]]
        """
        Variable name
        """
        vlan_id: NotRequired[pulumi.Input[_builtins.int]]
        """
        Set VLAN ID
          - Range: `1`-`4094`
        """
        vlan_id_variable: NotRequired[pulumi.Input[_builtins.str]]
        """
        Variable name
        """
        wireless_network_name: NotRequired[pulumi.Input[_builtins.str]]
        """
        Configure wlan SSID
        """
elif False:
    CiscoWirelessLanFeatureTemplateSsidArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class CiscoWirelessLanFeatureTemplateSsidArgs:
    def __init__(__self__, *,
                 admin_state: Optional[pulumi.Input[_builtins.bool]] = None,
                 admin_state_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 broadcast_ssid: Optional[pulumi.Input[_builtins.bool]] = None,
                 optional: Optional[pulumi.Input[_builtins.bool]] = None,
                 passphrase: Optional[pulumi.Input[_builtins.str]] = None,
                 passphrase_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 qos_profile: Optional[pulumi.Input[_builtins.str]] = None,
                 qos_profile_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 radio_type: Optional[pulumi.Input[_builtins.str]] = None,
                 radio_type_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 radius_server_ip: Optional[pulumi.Input[_builtins.str]] = None,
                 radius_server_ip_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 radius_server_port: Optional[pulumi.Input[_builtins.int]] = None,
                 radius_server_port_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 radius_server_secret: Optional[pulumi.Input[_builtins.str]] = None,
                 radius_server_secret_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 security_type: Optional[pulumi.Input[_builtins.str]] = None,
                 security_type_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 vlan_id: Optional[pulumi.Input[_builtins.int]] = None,
                 vlan_id_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 wireless_network_name: Optional[pulumi.Input[_builtins.str]] = None):
        """
        :param pulumi.Input[_builtins.bool] admin_state: Set admin state
                 - Default value: `true`
        :param pulumi.Input[_builtins.str] admin_state_variable: Variable name
        :param pulumi.Input[_builtins.bool] broadcast_ssid: Enable broadcast SSID
                 - Default value: `true`
        :param pulumi.Input[_builtins.bool] optional: Indicates if list item is considered optional.
        :param pulumi.Input[_builtins.str] passphrase: Set passphrase
        :param pulumi.Input[_builtins.str] passphrase_variable: Variable name
        :param pulumi.Input[_builtins.str] qos_profile: Select QoS profile
                 - Choices: `platinum`, `gold`, `silver`, `bronze`
                 - Default value: `silver`
        :param pulumi.Input[_builtins.str] qos_profile_variable: Variable name
        :param pulumi.Input[_builtins.str] radio_type: Select radio type
                 - Choices: `24ghz`, `5ghz`, `all`
                 - Default value: `all`
        :param pulumi.Input[_builtins.str] radio_type_variable: Variable name
        :param pulumi.Input[_builtins.str] radius_server_ip: Set RADIUS server IP
        :param pulumi.Input[_builtins.str] radius_server_ip_variable: Variable name
        :param pulumi.Input[_builtins.int] radius_server_port: Set RADIUS server authentication port
                 - Range: `1`-`65535`
                 - Default value: `1812`
        :param pulumi.Input[_builtins.str] radius_server_port_variable: Variable name
        :param pulumi.Input[_builtins.str] radius_server_secret: Set RADIUS server shared secret
        :param pulumi.Input[_builtins.str] radius_server_secret_variable: Variable name
        :param pulumi.Input[_builtins.str] security_type: Select security type
                 - Choices: `enterprise`, `personal`, `open`
                 - Default value: `personal`
        :param pulumi.Input[_builtins.str] security_type_variable: Variable name
        :param pulumi.Input[_builtins.int] vlan_id: Set VLAN ID
                 - Range: `1`-`4094`
        :param pulumi.Input[_builtins.str] vlan_id_variable: Variable name
        :param pulumi.Input[_builtins.str] wireless_network_name: Configure wlan SSID
        """
        if admin_state is not None:
            pulumi.set(__self__, "admin_state", admin_state)
        if admin_state_variable is not None:
            pulumi.set(__self__, "admin_state_variable", admin_state_variable)
        if broadcast_ssid is not None:
            pulumi.set(__self__, "broadcast_ssid", broadcast_ssid)
        if optional is not None:
            pulumi.set(__self__, "optional", optional)
        if passphrase is not None:
            pulumi.set(__self__, "passphrase", passphrase)
        if passphrase_variable is not None:
            pulumi.set(__self__, "passphrase_variable", passphrase_variable)
        if qos_profile is not None:
            pulumi.set(__self__, "qos_profile", qos_profile)
        if qos_profile_variable is not None:
            pulumi.set(__self__, "qos_profile_variable", qos_profile_variable)
        if radio_type is not None:
            pulumi.set(__self__, "radio_type", radio_type)
        if radio_type_variable is not None:
            pulumi.set(__self__, "radio_type_variable", radio_type_variable)
        if radius_server_ip is not None:
            pulumi.set(__self__, "radius_server_ip", radius_server_ip)
        if radius_server_ip_variable is not None:
            pulumi.set(__self__, "radius_server_ip_variable", radius_server_ip_variable)
        if radius_server_port is not None:
            pulumi.set(__self__, "radius_server_port", radius_server_port)
        if radius_server_port_variable is not None:
            pulumi.set(__self__, "radius_server_port_variable", radius_server_port_variable)
        if radius_server_secret is not None:
            pulumi.set(__self__, "radius_server_secret", radius_server_secret)
        if radius_server_secret_variable is not None:
            pulumi.set(__self__, "radius_server_secret_variable", radius_server_secret_variable)
        if security_type is not None:
            pulumi.set(__self__, "security_type", security_type)
        if security_type_variable is not None:
            pulumi.set(__self__, "security_type_variable", security_type_variable)
        if vlan_id is not None:
            pulumi.set(__self__, "vlan_id", vlan_id)
        if vlan_id_variable is not None:
            pulumi.set(__self__, "vlan_id_variable", vlan_id_variable)
        if wireless_network_name is not None:
            pulumi.set(__self__, "wireless_network_name", wireless_network_name)

    @_builtins.property
    @pulumi.getter(name="adminState")
    def admin_state(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Set admin state
          - Default value: `true`
        """
        return pulumi.get(self, "admin_state")

    @admin_state.setter
    def admin_state(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "admin_state", value)

    @_builtins.property
    @pulumi.getter(name="adminStateVariable")
    def admin_state_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "admin_state_variable")

    @admin_state_variable.setter
    def admin_state_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "admin_state_variable", value)

    @_builtins.property
    @pulumi.getter(name="broadcastSsid")
    def broadcast_ssid(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Enable broadcast SSID
          - Default value: `true`
        """
        return pulumi.get(self, "broadcast_ssid")

    @broadcast_ssid.setter
    def broadcast_ssid(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "broadcast_ssid", value)

    @_builtins.property
    @pulumi.getter
    def optional(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Indicates if list item is considered optional.
        """
        return pulumi.get(self, "optional")

    @optional.setter
    def optional(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "optional", value)

    @_builtins.property
    @pulumi.getter
    def passphrase(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Set passphrase
        """
        return pulumi.get(self, "passphrase")

    @passphrase.setter
    def passphrase(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "passphrase", value)

    @_builtins.property
    @pulumi.getter(name="passphraseVariable")
    def passphrase_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "passphrase_variable")

    @passphrase_variable.setter
    def passphrase_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "passphrase_variable", value)

    @_builtins.property
    @pulumi.getter(name="qosProfile")
    def qos_profile(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Select QoS profile
          - Choices: `platinum`, `gold`, `silver`, `bronze`
          - Default value: `silver`
        """
        return pulumi.get(self, "qos_profile")

    @qos_profile.setter
    def qos_profile(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "qos_profile", value)

    @_builtins.property
    @pulumi.getter(name="qosProfileVariable")
    def qos_profile_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "qos_profile_variable")

    @qos_profile_variable.setter
    def qos_profile_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "qos_profile_variable", value)

    @_builtins.property
    @pulumi.getter(name="radioType")
    def radio_type(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Select radio type
          - Choices: `24ghz`, `5ghz`, `all`
          - Default value: `all`
        """
        return pulumi.get(self, "radio_type")

    @radio_type.setter
    def radio_type(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "radio_type", value)

    @_builtins.property
    @pulumi.getter(name="radioTypeVariable")
    def radio_type_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "radio_type_variable")

    @radio_type_variable.setter
    def radio_type_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "radio_type_variable", value)

    @_builtins.property
    @pulumi.getter(name="radiusServerIp")
    def radius_server_ip(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Set RADIUS server IP
        """
        return pulumi.get(self, "radius_server_ip")

    @radius_server_ip.setter
    def radius_server_ip(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "radius_server_ip", value)

    @_builtins.property
    @pulumi.getter(name="radiusServerIpVariable")
    def radius_server_ip_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "radius_server_ip_variable")

    @radius_server_ip_variable.setter
    def radius_server_ip_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "radius_server_ip_variable", value)

    @_builtins.property
    @pulumi.getter(name="radiusServerPort")
    def radius_server_port(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        Set RADIUS server authentication port
          - Range: `1`-`65535`
          - Default value: `1812`
        """
        return pulumi.get(self, "radius_server_port")

    @radius_server_port.setter
    def radius_server_port(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "radius_server_port", value)

    @_builtins.property
    @pulumi.getter(name="radiusServerPortVariable")
    def radius_server_port_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "radius_server_port_variable")

    @radius_server_port_variable.setter
    def radius_server_port_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "radius_server_port_variable", value)

    @_builtins.property
    @pulumi.getter(name="radiusServerSecret")
    def radius_server_secret(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Set RADIUS server shared secret
        """
        return pulumi.get(self, "radius_server_secret")

    @radius_server_secret.setter
    def radius_server_secret(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "radius_server_secret", value)

    @_builtins.property
    @pulumi.getter(name="radiusServerSecretVariable")
    def radius_server_secret_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "radius_server_secret_variable")

    @radius_server_secret_variable.setter
    def radius_server_secret_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "radius_server_secret_variable", value)

    @_builtins.property
    @pulumi.getter(name="securityType")
    def security_type(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Select security type
          - Choices: `enterprise`, `personal`, `open`
          - Default value: `personal`
        """
        return pulumi.get(self, "security_type")

    @security_type.setter
    def security_type(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "security_type", value)

    @_builtins.property
    @pulumi.getter(name="securityTypeVariable")
    def security_type_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "security_type_variable")

    @security_type_variable.setter
    def security_type_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "security_type_variable", value)

    @_builtins.property
    @pulumi.getter(name="vlanId")
    def vlan_id(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        Set VLAN ID
          - Range: `1`-`4094`
        """
        return pulumi.get(self, "vlan_id")

    @vlan_id.setter
    def vlan_id(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "vlan_id", value)

    @_builtins.property
    @pulumi.getter(name="vlanIdVariable")
    def vlan_id_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "vlan_id_variable")

    @vlan_id_variable.setter
    def vlan_id_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "vlan_id_variable", value)

    @_builtins.property
    @pulumi.getter(name="wirelessNetworkName")
    def wireless_network_name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Configure wlan SSID
        """
        return pulumi.get(self, "wireless_network_name")

    @wireless_network_name.setter
    def wireless_network_name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "wireless_network_name", value)


if not MYPY:
    class ColorListPolicyObjectEntryArgsDict(TypedDict):
        color: pulumi.Input[_builtins.str]
        """
        Color
          - Choices: `default`, `3g`, `biz-internet`, `blue`, `bronze`, `custom1`, `custom2`, `custom3`, `gold`, `green`, `lte`, `metro-ethernet`, `mpls`, `private1`, `private2`, `private3`, `private4`, `private5`, `private6`, `public-internet`, `red`, `silver`
        """
elif False:
    ColorListPolicyObjectEntryArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ColorListPolicyObjectEntryArgs:
    def __init__(__self__, *,
                 color: pulumi.Input[_builtins.str]):
        """
        :param pulumi.Input[_builtins.str] color: Color
                 - Choices: `default`, `3g`, `biz-internet`, `blue`, `bronze`, `custom1`, `custom2`, `custom3`, `gold`, `green`, `lte`, `metro-ethernet`, `mpls`, `private1`, `private2`, `private3`, `private4`, `private5`, `private6`, `public-internet`, `red`, `silver`
        """
        pulumi.set(__self__, "color", color)

    @_builtins.property
    @pulumi.getter
    def color(self) -> pulumi.Input[_builtins.str]:
        """
        Color
          - Choices: `default`, `3g`, `biz-internet`, `blue`, `bronze`, `custom1`, `custom2`, `custom3`, `gold`, `green`, `lte`, `metro-ethernet`, `mpls`, `private1`, `private2`, `private3`, `private4`, `private5`, `private6`, `public-internet`, `red`, `silver`
        """
        return pulumi.get(self, "color")

    @color.setter
    def color(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "color", value)


if not MYPY:
    class ConfigurationGroupDeviceArgsDict(TypedDict):
        deploy: NotRequired[pulumi.Input[_builtins.bool]]
        """
        Deploy to device if enabled.
          - Default value: `false`
        """
        id: NotRequired[pulumi.Input[_builtins.str]]
        """
        Device ID
        """
        variables: NotRequired[pulumi.Input[Sequence[pulumi.Input['ConfigurationGroupDeviceVariableArgsDict']]]]
        """
        List of variables
        """
elif False:
    ConfigurationGroupDeviceArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ConfigurationGroupDeviceArgs:
    def __init__(__self__, *,
                 deploy: Optional[pulumi.Input[_builtins.bool]] = None,
                 id: Optional[pulumi.Input[_builtins.str]] = None,
                 variables: Optional[pulumi.Input[Sequence[pulumi.Input['ConfigurationGroupDeviceVariableArgs']]]] = None):
        """
        :param pulumi.Input[_builtins.bool] deploy: Deploy to device if enabled.
                 - Default value: `false`
        :param pulumi.Input[_builtins.str] id: Device ID
        :param pulumi.Input[Sequence[pulumi.Input['ConfigurationGroupDeviceVariableArgs']]] variables: List of variables
        """
        if deploy is not None:
            pulumi.set(__self__, "deploy", deploy)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if variables is not None:
            pulumi.set(__self__, "variables", variables)

    @_builtins.property
    @pulumi.getter
    def deploy(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Deploy to device if enabled.
          - Default value: `false`
        """
        return pulumi.get(self, "deploy")

    @deploy.setter
    def deploy(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "deploy", value)

    @_builtins.property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Device ID
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "id", value)

    @_builtins.property
    @pulumi.getter
    def variables(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ConfigurationGroupDeviceVariableArgs']]]]:
        """
        List of variables
        """
        return pulumi.get(self, "variables")

    @variables.setter
    def variables(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ConfigurationGroupDeviceVariableArgs']]]]):
        pulumi.set(self, "variables", value)


if not MYPY:
    class ConfigurationGroupDeviceVariableArgsDict(TypedDict):
        name: pulumi.Input[_builtins.str]
        """
        Variable name
        """
        list_values: NotRequired[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]
        """
        Use this instead of `value` in case value is of type `List`.
        """
        value: NotRequired[pulumi.Input[_builtins.str]]
        """
        Variable value
        """
elif False:
    ConfigurationGroupDeviceVariableArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ConfigurationGroupDeviceVariableArgs:
    def __init__(__self__, *,
                 name: pulumi.Input[_builtins.str],
                 list_values: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 value: Optional[pulumi.Input[_builtins.str]] = None):
        """
        :param pulumi.Input[_builtins.str] name: Variable name
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] list_values: Use this instead of `value` in case value is of type `List`.
        :param pulumi.Input[_builtins.str] value: Variable value
        """
        pulumi.set(__self__, "name", name)
        if list_values is not None:
            pulumi.set(__self__, "list_values", list_values)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> pulumi.Input[_builtins.str]:
        """
        Variable name
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "name", value)

    @_builtins.property
    @pulumi.getter(name="listValues")
    def list_values(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]:
        """
        Use this instead of `value` in case value is of type `List`.
        """
        return pulumi.get(self, "list_values")

    @list_values.setter
    def list_values(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "list_values", value)

    @_builtins.property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable value
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "value", value)


if not MYPY:
    class ConfigurationGroupTopologyDeviceArgsDict(TypedDict):
        criteria_attribute: pulumi.Input[_builtins.str]
        """
        Criteria attribute
          - Choices: `tag`
        """
        criteria_value: NotRequired[pulumi.Input[_builtins.str]]
        """
        Criteria value
        """
        unsupported_features: NotRequired[pulumi.Input[Sequence[pulumi.Input['ConfigurationGroupTopologyDeviceUnsupportedFeatureArgsDict']]]]
        """
        List of unsupported features
        """
elif False:
    ConfigurationGroupTopologyDeviceArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ConfigurationGroupTopologyDeviceArgs:
    def __init__(__self__, *,
                 criteria_attribute: pulumi.Input[_builtins.str],
                 criteria_value: Optional[pulumi.Input[_builtins.str]] = None,
                 unsupported_features: Optional[pulumi.Input[Sequence[pulumi.Input['ConfigurationGroupTopologyDeviceUnsupportedFeatureArgs']]]] = None):
        """
        :param pulumi.Input[_builtins.str] criteria_attribute: Criteria attribute
                 - Choices: `tag`
        :param pulumi.Input[_builtins.str] criteria_value: Criteria value
        :param pulumi.Input[Sequence[pulumi.Input['ConfigurationGroupTopologyDeviceUnsupportedFeatureArgs']]] unsupported_features: List of unsupported features
        """
        pulumi.set(__self__, "criteria_attribute", criteria_attribute)
        if criteria_value is not None:
            pulumi.set(__self__, "criteria_value", criteria_value)
        if unsupported_features is not None:
            pulumi.set(__self__, "unsupported_features", unsupported_features)

    @_builtins.property
    @pulumi.getter(name="criteriaAttribute")
    def criteria_attribute(self) -> pulumi.Input[_builtins.str]:
        """
        Criteria attribute
          - Choices: `tag`
        """
        return pulumi.get(self, "criteria_attribute")

    @criteria_attribute.setter
    def criteria_attribute(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "criteria_attribute", value)

    @_builtins.property
    @pulumi.getter(name="criteriaValue")
    def criteria_value(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Criteria value
        """
        return pulumi.get(self, "criteria_value")

    @criteria_value.setter
    def criteria_value(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "criteria_value", value)

    @_builtins.property
    @pulumi.getter(name="unsupportedFeatures")
    def unsupported_features(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ConfigurationGroupTopologyDeviceUnsupportedFeatureArgs']]]]:
        """
        List of unsupported features
        """
        return pulumi.get(self, "unsupported_features")

    @unsupported_features.setter
    def unsupported_features(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ConfigurationGroupTopologyDeviceUnsupportedFeatureArgs']]]]):
        pulumi.set(self, "unsupported_features", value)


if not MYPY:
    class ConfigurationGroupTopologyDeviceUnsupportedFeatureArgsDict(TypedDict):
        parcel_id: NotRequired[pulumi.Input[_builtins.str]]
        """
        Parcel ID
        """
        parcel_type: NotRequired[pulumi.Input[_builtins.str]]
        """
        Parcel type
          - Choices: `wan/vpn/interface/gre`, `wan/vpn/interface/ethernet`, `wan/vpn/interface/cellular`, `wan/vpn/interface/ipsec`, `wan/vpn/interface/serial`, `route-policy`, `routing/bgp`, `routing/ospf`, `lan/vpn/interface/ethernet`, `lan/vpn/interface/svi`, `lan/vpn/interface/ipsec`, `lan/vpn`
        """
elif False:
    ConfigurationGroupTopologyDeviceUnsupportedFeatureArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ConfigurationGroupTopologyDeviceUnsupportedFeatureArgs:
    def __init__(__self__, *,
                 parcel_id: Optional[pulumi.Input[_builtins.str]] = None,
                 parcel_type: Optional[pulumi.Input[_builtins.str]] = None):
        """
        :param pulumi.Input[_builtins.str] parcel_id: Parcel ID
        :param pulumi.Input[_builtins.str] parcel_type: Parcel type
                 - Choices: `wan/vpn/interface/gre`, `wan/vpn/interface/ethernet`, `wan/vpn/interface/cellular`, `wan/vpn/interface/ipsec`, `wan/vpn/interface/serial`, `route-policy`, `routing/bgp`, `routing/ospf`, `lan/vpn/interface/ethernet`, `lan/vpn/interface/svi`, `lan/vpn/interface/ipsec`, `lan/vpn`
        """
        if parcel_id is not None:
            pulumi.set(__self__, "parcel_id", parcel_id)
        if parcel_type is not None:
            pulumi.set(__self__, "parcel_type", parcel_type)

    @_builtins.property
    @pulumi.getter(name="parcelId")
    def parcel_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Parcel ID
        """
        return pulumi.get(self, "parcel_id")

    @parcel_id.setter
    def parcel_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "parcel_id", value)

    @_builtins.property
    @pulumi.getter(name="parcelType")
    def parcel_type(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Parcel type
          - Choices: `wan/vpn/interface/gre`, `wan/vpn/interface/ethernet`, `wan/vpn/interface/cellular`, `wan/vpn/interface/ipsec`, `wan/vpn/interface/serial`, `route-policy`, `routing/bgp`, `routing/ospf`, `lan/vpn/interface/ethernet`, `lan/vpn/interface/svi`, `lan/vpn/interface/ipsec`, `lan/vpn`
        """
        return pulumi.get(self, "parcel_type")

    @parcel_type.setter
    def parcel_type(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "parcel_type", value)


if not MYPY:
    class CustomControlTopologyPolicyDefinitionSequenceArgsDict(TypedDict):
        id: pulumi.Input[_builtins.int]
        """
        Sequence ID
        """
        name: pulumi.Input[_builtins.str]
        """
        Sequence name
        """
        action_entries: NotRequired[pulumi.Input[Sequence[pulumi.Input['CustomControlTopologyPolicyDefinitionSequenceActionEntryArgsDict']]]]
        """
        List of action entries
        """
        base_action: NotRequired[pulumi.Input[_builtins.str]]
        """
        Base action, either `accept` or `reject`
          - Choices: `accept`, `reject`
        """
        ip_type: NotRequired[pulumi.Input[_builtins.str]]
        """
        Sequence IP type, either `ipv4`, `ipv6` or `all`
          - Choices: `ipv4`, `ipv6`, `all`
        """
        match_entries: NotRequired[pulumi.Input[Sequence[pulumi.Input['CustomControlTopologyPolicyDefinitionSequenceMatchEntryArgsDict']]]]
        """
        List of match entries
        """
        type: NotRequired[pulumi.Input[_builtins.str]]
        """
        Sequence type, either `route` or `tloc`
          - Choices: `route`, `tloc`
        """
elif False:
    CustomControlTopologyPolicyDefinitionSequenceArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class CustomControlTopologyPolicyDefinitionSequenceArgs:
    def __init__(__self__, *,
                 id: pulumi.Input[_builtins.int],
                 name: pulumi.Input[_builtins.str],
                 action_entries: Optional[pulumi.Input[Sequence[pulumi.Input['CustomControlTopologyPolicyDefinitionSequenceActionEntryArgs']]]] = None,
                 base_action: Optional[pulumi.Input[_builtins.str]] = None,
                 ip_type: Optional[pulumi.Input[_builtins.str]] = None,
                 match_entries: Optional[pulumi.Input[Sequence[pulumi.Input['CustomControlTopologyPolicyDefinitionSequenceMatchEntryArgs']]]] = None,
                 type: Optional[pulumi.Input[_builtins.str]] = None):
        """
        :param pulumi.Input[_builtins.int] id: Sequence ID
        :param pulumi.Input[_builtins.str] name: Sequence name
        :param pulumi.Input[Sequence[pulumi.Input['CustomControlTopologyPolicyDefinitionSequenceActionEntryArgs']]] action_entries: List of action entries
        :param pulumi.Input[_builtins.str] base_action: Base action, either `accept` or `reject`
                 - Choices: `accept`, `reject`
        :param pulumi.Input[_builtins.str] ip_type: Sequence IP type, either `ipv4`, `ipv6` or `all`
                 - Choices: `ipv4`, `ipv6`, `all`
        :param pulumi.Input[Sequence[pulumi.Input['CustomControlTopologyPolicyDefinitionSequenceMatchEntryArgs']]] match_entries: List of match entries
        :param pulumi.Input[_builtins.str] type: Sequence type, either `route` or `tloc`
                 - Choices: `route`, `tloc`
        """
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "name", name)
        if action_entries is not None:
            pulumi.set(__self__, "action_entries", action_entries)
        if base_action is not None:
            pulumi.set(__self__, "base_action", base_action)
        if ip_type is not None:
            pulumi.set(__self__, "ip_type", ip_type)
        if match_entries is not None:
            pulumi.set(__self__, "match_entries", match_entries)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @_builtins.property
    @pulumi.getter
    def id(self) -> pulumi.Input[_builtins.int]:
        """
        Sequence ID
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: pulumi.Input[_builtins.int]):
        pulumi.set(self, "id", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> pulumi.Input[_builtins.str]:
        """
        Sequence name
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "name", value)

    @_builtins.property
    @pulumi.getter(name="actionEntries")
    def action_entries(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['CustomControlTopologyPolicyDefinitionSequenceActionEntryArgs']]]]:
        """
        List of action entries
        """
        return pulumi.get(self, "action_entries")

    @action_entries.setter
    def action_entries(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['CustomControlTopologyPolicyDefinitionSequenceActionEntryArgs']]]]):
        pulumi.set(self, "action_entries", value)

    @_builtins.property
    @pulumi.getter(name="baseAction")
    def base_action(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Base action, either `accept` or `reject`
          - Choices: `accept`, `reject`
        """
        return pulumi.get(self, "base_action")

    @base_action.setter
    def base_action(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "base_action", value)

    @_builtins.property
    @pulumi.getter(name="ipType")
    def ip_type(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Sequence IP type, either `ipv4`, `ipv6` or `all`
          - Choices: `ipv4`, `ipv6`, `all`
        """
        return pulumi.get(self, "ip_type")

    @ip_type.setter
    def ip_type(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "ip_type", value)

    @_builtins.property
    @pulumi.getter(name="matchEntries")
    def match_entries(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['CustomControlTopologyPolicyDefinitionSequenceMatchEntryArgs']]]]:
        """
        List of match entries
        """
        return pulumi.get(self, "match_entries")

    @match_entries.setter
    def match_entries(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['CustomControlTopologyPolicyDefinitionSequenceMatchEntryArgs']]]]):
        pulumi.set(self, "match_entries", value)

    @_builtins.property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Sequence type, either `route` or `tloc`
          - Choices: `route`, `tloc`
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "type", value)


if not MYPY:
    class CustomControlTopologyPolicyDefinitionSequenceActionEntryArgsDict(TypedDict):
        type: pulumi.Input[_builtins.str]
        """
        Type of action entry
          - Choices: `set`, `exportTo`
        """
        export_to_vpn_list_id: NotRequired[pulumi.Input[_builtins.str]]
        """
        Export to VPN list ID, Attribute conditional on `type` being equal to `exportTo`
        """
        export_to_vpn_list_version: NotRequired[pulumi.Input[_builtins.int]]
        """
        Export to VPN list version
        """
        set_parameters: NotRequired[pulumi.Input[Sequence[pulumi.Input['CustomControlTopologyPolicyDefinitionSequenceActionEntrySetParameterArgsDict']]]]
        """
        List of set parameters, Attribute conditional on `type` being equal to `set`
        """
elif False:
    CustomControlTopologyPolicyDefinitionSequenceActionEntryArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class CustomControlTopologyPolicyDefinitionSequenceActionEntryArgs:
    def __init__(__self__, *,
                 type: pulumi.Input[_builtins.str],
                 export_to_vpn_list_id: Optional[pulumi.Input[_builtins.str]] = None,
                 export_to_vpn_list_version: Optional[pulumi.Input[_builtins.int]] = None,
                 set_parameters: Optional[pulumi.Input[Sequence[pulumi.Input['CustomControlTopologyPolicyDefinitionSequenceActionEntrySetParameterArgs']]]] = None):
        """
        :param pulumi.Input[_builtins.str] type: Type of action entry
                 - Choices: `set`, `exportTo`
        :param pulumi.Input[_builtins.str] export_to_vpn_list_id: Export to VPN list ID, Attribute conditional on `type` being equal to `exportTo`
        :param pulumi.Input[_builtins.int] export_to_vpn_list_version: Export to VPN list version
        :param pulumi.Input[Sequence[pulumi.Input['CustomControlTopologyPolicyDefinitionSequenceActionEntrySetParameterArgs']]] set_parameters: List of set parameters, Attribute conditional on `type` being equal to `set`
        """
        pulumi.set(__self__, "type", type)
        if export_to_vpn_list_id is not None:
            pulumi.set(__self__, "export_to_vpn_list_id", export_to_vpn_list_id)
        if export_to_vpn_list_version is not None:
            pulumi.set(__self__, "export_to_vpn_list_version", export_to_vpn_list_version)
        if set_parameters is not None:
            pulumi.set(__self__, "set_parameters", set_parameters)

    @_builtins.property
    @pulumi.getter
    def type(self) -> pulumi.Input[_builtins.str]:
        """
        Type of action entry
          - Choices: `set`, `exportTo`
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "type", value)

    @_builtins.property
    @pulumi.getter(name="exportToVpnListId")
    def export_to_vpn_list_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Export to VPN list ID, Attribute conditional on `type` being equal to `exportTo`
        """
        return pulumi.get(self, "export_to_vpn_list_id")

    @export_to_vpn_list_id.setter
    def export_to_vpn_list_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "export_to_vpn_list_id", value)

    @_builtins.property
    @pulumi.getter(name="exportToVpnListVersion")
    def export_to_vpn_list_version(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        Export to VPN list version
        """
        return pulumi.get(self, "export_to_vpn_list_version")

    @export_to_vpn_list_version.setter
    def export_to_vpn_list_version(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "export_to_vpn_list_version", value)

    @_builtins.property
    @pulumi.getter(name="setParameters")
    def set_parameters(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['CustomControlTopologyPolicyDefinitionSequenceActionEntrySetParameterArgs']]]]:
        """
        List of set parameters, Attribute conditional on `type` being equal to `set`
        """
        return pulumi.get(self, "set_parameters")

    @set_parameters.setter
    def set_parameters(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['CustomControlTopologyPolicyDefinitionSequenceActionEntrySetParameterArgs']]]]):
        pulumi.set(self, "set_parameters", value)


if not MYPY:
    class CustomControlTopologyPolicyDefinitionSequenceActionEntrySetParameterArgsDict(TypedDict):
        type: pulumi.Input[_builtins.str]
        """
        Type of set parameter
          - Choices: `tlocList`, `tloc`, `tlocAction`, `preference`, `ompTag`, `community`, `communityAdditive`, `service`
        """
        community: NotRequired[pulumi.Input[_builtins.str]]
        """
        Community value, e.g. `1000:10000` or `internet` or `local-AS`, Attribute conditional on `type` being equal to `community`
        """
        community_additive: NotRequired[pulumi.Input[_builtins.bool]]
        """
        Community additive, Attribute conditional on `type` being equal to `communityAdditive`
        """
        omp_tag: NotRequired[pulumi.Input[_builtins.int]]
        """
        OMP tag, Attribute conditional on `type` being equal to `ompTag`
          - Range: `0`-`4294967295`
        """
        preference: NotRequired[pulumi.Input[_builtins.int]]
        """
        Preference, Attribute conditional on `type` being equal to `preference`
          - Range: `0`-`4294967295`
        """
        service_tloc_color: NotRequired[pulumi.Input[_builtins.str]]
        """
        Service TLOC color, Attribute conditional on `type` being equal to `service`
        """
        service_tloc_encapsulation: NotRequired[pulumi.Input[_builtins.str]]
        """
        Service TLOC encapsulation, Attribute conditional on `type` being equal to `service`
          - Choices: `ipsec`, `gre`
        """
        service_tloc_ip: NotRequired[pulumi.Input[_builtins.str]]
        """
        Service TLOC IP address, Attribute conditional on `type` being equal to `service`
        """
        service_tloc_list_id: NotRequired[pulumi.Input[_builtins.str]]
        """
        Service TLOC list ID, Attribute conditional on `type` being equal to `service`
        """
        service_tloc_list_version: NotRequired[pulumi.Input[_builtins.int]]
        """
        Service TLOC list version
        """
        service_type: NotRequired[pulumi.Input[_builtins.str]]
        """
        Service type, Attribute conditional on `type` being equal to `service`
          - Choices: `FW`, `IDP`, `IDS`, `netsvc1`, `netsvc2`, `netsvc3`, `netsvc4`, `netsvc5`
        """
        service_vpn_id: NotRequired[pulumi.Input[_builtins.int]]
        """
        Service VPN ID, Attribute conditional on `type` being equal to `service`
          - Range: `0`-`65536`
        """
        tloc_action: NotRequired[pulumi.Input[_builtins.str]]
        """
        TLOC action, Attribute conditional on `type` being equal to `tlocAction`
          - Choices: `strict`, `primary`, `backup`, `ecmp`
        """
        tloc_color: NotRequired[pulumi.Input[_builtins.str]]
        """
        TLOC color, Attribute conditional on `type` being equal to `tloc`
        """
        tloc_encapsulation: NotRequired[pulumi.Input[_builtins.str]]
        """
        TLOC encapsulation, Attribute conditional on `type` being equal to `tloc`
          - Choices: `ipsec`, `gre`
        """
        tloc_ip: NotRequired[pulumi.Input[_builtins.str]]
        """
        TLOC IP address, Attribute conditional on `type` being equal to `tloc`
        """
        tloc_list_id: NotRequired[pulumi.Input[_builtins.str]]
        """
        TLOC list ID, Attribute conditional on `type` being equal to `tlocList`
        """
        tloc_list_version: NotRequired[pulumi.Input[_builtins.int]]
        """
        TLOC list version
        """
elif False:
    CustomControlTopologyPolicyDefinitionSequenceActionEntrySetParameterArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class CustomControlTopologyPolicyDefinitionSequenceActionEntrySetParameterArgs:
    def __init__(__self__, *,
                 type: pulumi.Input[_builtins.str],
                 community: Optional[pulumi.Input[_builtins.str]] = None,
                 community_additive: Optional[pulumi.Input[_builtins.bool]] = None,
                 omp_tag: Optional[pulumi.Input[_builtins.int]] = None,
                 preference: Optional[pulumi.Input[_builtins.int]] = None,
                 service_tloc_color: Optional[pulumi.Input[_builtins.str]] = None,
                 service_tloc_encapsulation: Optional[pulumi.Input[_builtins.str]] = None,
                 service_tloc_ip: Optional[pulumi.Input[_builtins.str]] = None,
                 service_tloc_list_id: Optional[pulumi.Input[_builtins.str]] = None,
                 service_tloc_list_version: Optional[pulumi.Input[_builtins.int]] = None,
                 service_type: Optional[pulumi.Input[_builtins.str]] = None,
                 service_vpn_id: Optional[pulumi.Input[_builtins.int]] = None,
                 tloc_action: Optional[pulumi.Input[_builtins.str]] = None,
                 tloc_color: Optional[pulumi.Input[_builtins.str]] = None,
                 tloc_encapsulation: Optional[pulumi.Input[_builtins.str]] = None,
                 tloc_ip: Optional[pulumi.Input[_builtins.str]] = None,
                 tloc_list_id: Optional[pulumi.Input[_builtins.str]] = None,
                 tloc_list_version: Optional[pulumi.Input[_builtins.int]] = None):
        """
        :param pulumi.Input[_builtins.str] type: Type of set parameter
                 - Choices: `tlocList`, `tloc`, `tlocAction`, `preference`, `ompTag`, `community`, `communityAdditive`, `service`
        :param pulumi.Input[_builtins.str] community: Community value, e.g. `1000:10000` or `internet` or `local-AS`, Attribute conditional on `type` being equal to `community`
        :param pulumi.Input[_builtins.bool] community_additive: Community additive, Attribute conditional on `type` being equal to `communityAdditive`
        :param pulumi.Input[_builtins.int] omp_tag: OMP tag, Attribute conditional on `type` being equal to `ompTag`
                 - Range: `0`-`4294967295`
        :param pulumi.Input[_builtins.int] preference: Preference, Attribute conditional on `type` being equal to `preference`
                 - Range: `0`-`4294967295`
        :param pulumi.Input[_builtins.str] service_tloc_color: Service TLOC color, Attribute conditional on `type` being equal to `service`
        :param pulumi.Input[_builtins.str] service_tloc_encapsulation: Service TLOC encapsulation, Attribute conditional on `type` being equal to `service`
                 - Choices: `ipsec`, `gre`
        :param pulumi.Input[_builtins.str] service_tloc_ip: Service TLOC IP address, Attribute conditional on `type` being equal to `service`
        :param pulumi.Input[_builtins.str] service_tloc_list_id: Service TLOC list ID, Attribute conditional on `type` being equal to `service`
        :param pulumi.Input[_builtins.int] service_tloc_list_version: Service TLOC list version
        :param pulumi.Input[_builtins.str] service_type: Service type, Attribute conditional on `type` being equal to `service`
                 - Choices: `FW`, `IDP`, `IDS`, `netsvc1`, `netsvc2`, `netsvc3`, `netsvc4`, `netsvc5`
        :param pulumi.Input[_builtins.int] service_vpn_id: Service VPN ID, Attribute conditional on `type` being equal to `service`
                 - Range: `0`-`65536`
        :param pulumi.Input[_builtins.str] tloc_action: TLOC action, Attribute conditional on `type` being equal to `tlocAction`
                 - Choices: `strict`, `primary`, `backup`, `ecmp`
        :param pulumi.Input[_builtins.str] tloc_color: TLOC color, Attribute conditional on `type` being equal to `tloc`
        :param pulumi.Input[_builtins.str] tloc_encapsulation: TLOC encapsulation, Attribute conditional on `type` being equal to `tloc`
                 - Choices: `ipsec`, `gre`
        :param pulumi.Input[_builtins.str] tloc_ip: TLOC IP address, Attribute conditional on `type` being equal to `tloc`
        :param pulumi.Input[_builtins.str] tloc_list_id: TLOC list ID, Attribute conditional on `type` being equal to `tlocList`
        :param pulumi.Input[_builtins.int] tloc_list_version: TLOC list version
        """
        pulumi.set(__self__, "type", type)
        if community is not None:
            pulumi.set(__self__, "community", community)
        if community_additive is not None:
            pulumi.set(__self__, "community_additive", community_additive)
        if omp_tag is not None:
            pulumi.set(__self__, "omp_tag", omp_tag)
        if preference is not None:
            pulumi.set(__self__, "preference", preference)
        if service_tloc_color is not None:
            pulumi.set(__self__, "service_tloc_color", service_tloc_color)
        if service_tloc_encapsulation is not None:
            pulumi.set(__self__, "service_tloc_encapsulation", service_tloc_encapsulation)
        if service_tloc_ip is not None:
            pulumi.set(__self__, "service_tloc_ip", service_tloc_ip)
        if service_tloc_list_id is not None:
            pulumi.set(__self__, "service_tloc_list_id", service_tloc_list_id)
        if service_tloc_list_version is not None:
            pulumi.set(__self__, "service_tloc_list_version", service_tloc_list_version)
        if service_type is not None:
            pulumi.set(__self__, "service_type", service_type)
        if service_vpn_id is not None:
            pulumi.set(__self__, "service_vpn_id", service_vpn_id)
        if tloc_action is not None:
            pulumi.set(__self__, "tloc_action", tloc_action)
        if tloc_color is not None:
            pulumi.set(__self__, "tloc_color", tloc_color)
        if tloc_encapsulation is not None:
            pulumi.set(__self__, "tloc_encapsulation", tloc_encapsulation)
        if tloc_ip is not None:
            pulumi.set(__self__, "tloc_ip", tloc_ip)
        if tloc_list_id is not None:
            pulumi.set(__self__, "tloc_list_id", tloc_list_id)
        if tloc_list_version is not None:
            pulumi.set(__self__, "tloc_list_version", tloc_list_version)

    @_builtins.property
    @pulumi.getter
    def type(self) -> pulumi.Input[_builtins.str]:
        """
        Type of set parameter
          - Choices: `tlocList`, `tloc`, `tlocAction`, `preference`, `ompTag`, `community`, `communityAdditive`, `service`
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "type", value)

    @_builtins.property
    @pulumi.getter
    def community(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Community value, e.g. `1000:10000` or `internet` or `local-AS`, Attribute conditional on `type` being equal to `community`
        """
        return pulumi.get(self, "community")

    @community.setter
    def community(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "community", value)

    @_builtins.property
    @pulumi.getter(name="communityAdditive")
    def community_additive(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Community additive, Attribute conditional on `type` being equal to `communityAdditive`
        """
        return pulumi.get(self, "community_additive")

    @community_additive.setter
    def community_additive(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "community_additive", value)

    @_builtins.property
    @pulumi.getter(name="ompTag")
    def omp_tag(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        OMP tag, Attribute conditional on `type` being equal to `ompTag`
          - Range: `0`-`4294967295`
        """
        return pulumi.get(self, "omp_tag")

    @omp_tag.setter
    def omp_tag(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "omp_tag", value)

    @_builtins.property
    @pulumi.getter
    def preference(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        Preference, Attribute conditional on `type` being equal to `preference`
          - Range: `0`-`4294967295`
        """
        return pulumi.get(self, "preference")

    @preference.setter
    def preference(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "preference", value)

    @_builtins.property
    @pulumi.getter(name="serviceTlocColor")
    def service_tloc_color(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Service TLOC color, Attribute conditional on `type` being equal to `service`
        """
        return pulumi.get(self, "service_tloc_color")

    @service_tloc_color.setter
    def service_tloc_color(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "service_tloc_color", value)

    @_builtins.property
    @pulumi.getter(name="serviceTlocEncapsulation")
    def service_tloc_encapsulation(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Service TLOC encapsulation, Attribute conditional on `type` being equal to `service`
          - Choices: `ipsec`, `gre`
        """
        return pulumi.get(self, "service_tloc_encapsulation")

    @service_tloc_encapsulation.setter
    def service_tloc_encapsulation(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "service_tloc_encapsulation", value)

    @_builtins.property
    @pulumi.getter(name="serviceTlocIp")
    def service_tloc_ip(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Service TLOC IP address, Attribute conditional on `type` being equal to `service`
        """
        return pulumi.get(self, "service_tloc_ip")

    @service_tloc_ip.setter
    def service_tloc_ip(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "service_tloc_ip", value)

    @_builtins.property
    @pulumi.getter(name="serviceTlocListId")
    def service_tloc_list_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Service TLOC list ID, Attribute conditional on `type` being equal to `service`
        """
        return pulumi.get(self, "service_tloc_list_id")

    @service_tloc_list_id.setter
    def service_tloc_list_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "service_tloc_list_id", value)

    @_builtins.property
    @pulumi.getter(name="serviceTlocListVersion")
    def service_tloc_list_version(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        Service TLOC list version
        """
        return pulumi.get(self, "service_tloc_list_version")

    @service_tloc_list_version.setter
    def service_tloc_list_version(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "service_tloc_list_version", value)

    @_builtins.property
    @pulumi.getter(name="serviceType")
    def service_type(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Service type, Attribute conditional on `type` being equal to `service`
          - Choices: `FW`, `IDP`, `IDS`, `netsvc1`, `netsvc2`, `netsvc3`, `netsvc4`, `netsvc5`
        """
        return pulumi.get(self, "service_type")

    @service_type.setter
    def service_type(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "service_type", value)

    @_builtins.property
    @pulumi.getter(name="serviceVpnId")
    def service_vpn_id(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        Service VPN ID, Attribute conditional on `type` being equal to `service`
          - Range: `0`-`65536`
        """
        return pulumi.get(self, "service_vpn_id")

    @service_vpn_id.setter
    def service_vpn_id(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "service_vpn_id", value)

    @_builtins.property
    @pulumi.getter(name="tlocAction")
    def tloc_action(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        TLOC action, Attribute conditional on `type` being equal to `tlocAction`
          - Choices: `strict`, `primary`, `backup`, `ecmp`
        """
        return pulumi.get(self, "tloc_action")

    @tloc_action.setter
    def tloc_action(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "tloc_action", value)

    @_builtins.property
    @pulumi.getter(name="tlocColor")
    def tloc_color(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        TLOC color, Attribute conditional on `type` being equal to `tloc`
        """
        return pulumi.get(self, "tloc_color")

    @tloc_color.setter
    def tloc_color(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "tloc_color", value)

    @_builtins.property
    @pulumi.getter(name="tlocEncapsulation")
    def tloc_encapsulation(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        TLOC encapsulation, Attribute conditional on `type` being equal to `tloc`
          - Choices: `ipsec`, `gre`
        """
        return pulumi.get(self, "tloc_encapsulation")

    @tloc_encapsulation.setter
    def tloc_encapsulation(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "tloc_encapsulation", value)

    @_builtins.property
    @pulumi.getter(name="tlocIp")
    def tloc_ip(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        TLOC IP address, Attribute conditional on `type` being equal to `tloc`
        """
        return pulumi.get(self, "tloc_ip")

    @tloc_ip.setter
    def tloc_ip(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "tloc_ip", value)

    @_builtins.property
    @pulumi.getter(name="tlocListId")
    def tloc_list_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        TLOC list ID, Attribute conditional on `type` being equal to `tlocList`
        """
        return pulumi.get(self, "tloc_list_id")

    @tloc_list_id.setter
    def tloc_list_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "tloc_list_id", value)

    @_builtins.property
    @pulumi.getter(name="tlocListVersion")
    def tloc_list_version(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        TLOC list version
        """
        return pulumi.get(self, "tloc_list_version")

    @tloc_list_version.setter
    def tloc_list_version(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "tloc_list_version", value)


if not MYPY:
    class CustomControlTopologyPolicyDefinitionSequenceMatchEntryArgsDict(TypedDict):
        type: pulumi.Input[_builtins.str]
        """
        Type of match entry
          - Choices: `colorList`, `community`, `expandedCommunity`, `ompTag`, `origin`, `originator`, `preference`, `siteList`, `pathType`, `tlocList`, `vpnList`, `prefixList`, `vpn`, `tloc`, `siteId`, `carrier`, `domainId`, `groupId`
        """
        carrier: NotRequired[pulumi.Input[_builtins.str]]
        """
        Carrier, Attribute conditional on `type` being equal to `carrier`
          - Choices: `default`, `carrier1`, `carrier2`, `carrier3`, `carrier4`, `carrier5`, `carrier6`, `carrier7`, `carrier8`
        """
        color_list_id: NotRequired[pulumi.Input[_builtins.str]]
        """
        Color list ID, Attribute conditional on `type` being equal to `colorList`
        """
        color_list_version: NotRequired[pulumi.Input[_builtins.int]]
        """
        Color list version
        """
        community_list_id: NotRequired[pulumi.Input[_builtins.str]]
        """
        Community list ID, Attribute conditional on `type` being equal to `community`
        """
        community_list_version: NotRequired[pulumi.Input[_builtins.int]]
        """
        Community list version
        """
        domain_id: NotRequired[pulumi.Input[_builtins.int]]
        """
        Domain ID, Attribute conditional on `type` being equal to `domainId`
          - Range: `0`-`4294967295`
        """
        expanded_community_list_id: NotRequired[pulumi.Input[_builtins.str]]
        """
        Expanded community list ID, Attribute conditional on `type` being equal to `expandedCommunity`
        """
        expanded_community_list_version: NotRequired[pulumi.Input[_builtins.int]]
        """
        Expanded community list version
        """
        group_id: NotRequired[pulumi.Input[_builtins.int]]
        """
        Group ID, Attribute conditional on `type` being equal to `groupId`
          - Range: `0`-`4294967295`
        """
        omp_tag: NotRequired[pulumi.Input[_builtins.int]]
        """
        OMP tag, Attribute conditional on `type` being equal to `ompTag`
          - Range: `0`-`4294967295`
        """
        origin: NotRequired[pulumi.Input[_builtins.str]]
        """
        Origin, Attribute conditional on `type` being equal to `origin`
          - Choices: `igp`, `egp`, `incomplete`, `aggregrate`, `bgp`, `bgp-external`, `bgp-internal`, `connected`, `eigrp`, `ospf`, `ospf-inter-area`, `ospf-intra-area`, `ospf-external1`, `ospf-external2`, `rip`, `static`, `eigrp-summary`, `eigrp-internal`, `eigrp-external`, `lisp`, `nat-dia`, `natpool`, `isis`, `isis-level1`, `isis-level2`
        """
        originator: NotRequired[pulumi.Input[_builtins.str]]
        """
        Originator IP, Attribute conditional on `type` being equal to `originator`
        """
        path_type: NotRequired[pulumi.Input[_builtins.str]]
        """
        Path type, Attribute conditional on `type` being equal to `pathType`
          - Choices: `hierarchical-path`, `direct-path`, `transport-gateway-path`
        """
        preference: NotRequired[pulumi.Input[_builtins.int]]
        """
        Preference, Attribute conditional on `type` being equal to `preference`
          - Range: `0`-`4294967295`
        """
        prefix_list_id: NotRequired[pulumi.Input[_builtins.str]]
        """
        Prefix list ID, Attribute conditional on `type` being equal to `prefixList`
        """
        prefix_list_version: NotRequired[pulumi.Input[_builtins.int]]
        """
        Prefix list version
        """
        site_id: NotRequired[pulumi.Input[_builtins.int]]
        """
        Site ID, Attribute conditional on `type` being equal to `siteId`
          - Range: `0`-`4294967295`
        """
        site_list_id: NotRequired[pulumi.Input[_builtins.str]]
        """
        Site list ID, Attribute conditional on `type` being equal to `siteList`
        """
        site_list_version: NotRequired[pulumi.Input[_builtins.int]]
        """
        Site list version
        """
        tloc_color: NotRequired[pulumi.Input[_builtins.str]]
        """
        TLOC color, Attribute conditional on `type` being equal to `tloc`
        """
        tloc_encapsulation: NotRequired[pulumi.Input[_builtins.str]]
        """
        TLOC encapsulation, Attribute conditional on `type` being equal to `tloc`
          - Choices: `ipsec`, `gre`
        """
        tloc_ip: NotRequired[pulumi.Input[_builtins.str]]
        """
        TLOC IP address, Attribute conditional on `type` being equal to `tloc`
        """
        tloc_list_id: NotRequired[pulumi.Input[_builtins.str]]
        """
        TLOC list ID, Attribute conditional on `type` being equal to `tlocList`
        """
        tloc_list_version: NotRequired[pulumi.Input[_builtins.int]]
        """
        TLOC list version
        """
        vpn_id: NotRequired[pulumi.Input[_builtins.int]]
        """
        VPN ID, Attribute conditional on `type` being equal to `vpn`
          - Range: `0`-`65536`
        """
        vpn_list_id: NotRequired[pulumi.Input[_builtins.str]]
        """
        VPN list ID, Attribute conditional on `type` being equal to `vpnList`
        """
        vpn_list_version: NotRequired[pulumi.Input[_builtins.int]]
        """
        VPN list version
        """
elif False:
    CustomControlTopologyPolicyDefinitionSequenceMatchEntryArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class CustomControlTopologyPolicyDefinitionSequenceMatchEntryArgs:
    def __init__(__self__, *,
                 type: pulumi.Input[_builtins.str],
                 carrier: Optional[pulumi.Input[_builtins.str]] = None,
                 color_list_id: Optional[pulumi.Input[_builtins.str]] = None,
                 color_list_version: Optional[pulumi.Input[_builtins.int]] = None,
                 community_list_id: Optional[pulumi.Input[_builtins.str]] = None,
                 community_list_version: Optional[pulumi.Input[_builtins.int]] = None,
                 domain_id: Optional[pulumi.Input[_builtins.int]] = None,
                 expanded_community_list_id: Optional[pulumi.Input[_builtins.str]] = None,
                 expanded_community_list_version: Optional[pulumi.Input[_builtins.int]] = None,
                 group_id: Optional[pulumi.Input[_builtins.int]] = None,
                 omp_tag: Optional[pulumi.Input[_builtins.int]] = None,
                 origin: Optional[pulumi.Input[_builtins.str]] = None,
                 originator: Optional[pulumi.Input[_builtins.str]] = None,
                 path_type: Optional[pulumi.Input[_builtins.str]] = None,
                 preference: Optional[pulumi.Input[_builtins.int]] = None,
                 prefix_list_id: Optional[pulumi.Input[_builtins.str]] = None,
                 prefix_list_version: Optional[pulumi.Input[_builtins.int]] = None,
                 site_id: Optional[pulumi.Input[_builtins.int]] = None,
                 site_list_id: Optional[pulumi.Input[_builtins.str]] = None,
                 site_list_version: Optional[pulumi.Input[_builtins.int]] = None,
                 tloc_color: Optional[pulumi.Input[_builtins.str]] = None,
                 tloc_encapsulation: Optional[pulumi.Input[_builtins.str]] = None,
                 tloc_ip: Optional[pulumi.Input[_builtins.str]] = None,
                 tloc_list_id: Optional[pulumi.Input[_builtins.str]] = None,
                 tloc_list_version: Optional[pulumi.Input[_builtins.int]] = None,
                 vpn_id: Optional[pulumi.Input[_builtins.int]] = None,
                 vpn_list_id: Optional[pulumi.Input[_builtins.str]] = None,
                 vpn_list_version: Optional[pulumi.Input[_builtins.int]] = None):
        """
        :param pulumi.Input[_builtins.str] type: Type of match entry
                 - Choices: `colorList`, `community`, `expandedCommunity`, `ompTag`, `origin`, `originator`, `preference`, `siteList`, `pathType`, `tlocList`, `vpnList`, `prefixList`, `vpn`, `tloc`, `siteId`, `carrier`, `domainId`, `groupId`
        :param pulumi.Input[_builtins.str] carrier: Carrier, Attribute conditional on `type` being equal to `carrier`
                 - Choices: `default`, `carrier1`, `carrier2`, `carrier3`, `carrier4`, `carrier5`, `carrier6`, `carrier7`, `carrier8`
        :param pulumi.Input[_builtins.str] color_list_id: Color list ID, Attribute conditional on `type` being equal to `colorList`
        :param pulumi.Input[_builtins.int] color_list_version: Color list version
        :param pulumi.Input[_builtins.str] community_list_id: Community list ID, Attribute conditional on `type` being equal to `community`
        :param pulumi.Input[_builtins.int] community_list_version: Community list version
        :param pulumi.Input[_builtins.int] domain_id: Domain ID, Attribute conditional on `type` being equal to `domainId`
                 - Range: `0`-`4294967295`
        :param pulumi.Input[_builtins.str] expanded_community_list_id: Expanded community list ID, Attribute conditional on `type` being equal to `expandedCommunity`
        :param pulumi.Input[_builtins.int] expanded_community_list_version: Expanded community list version
        :param pulumi.Input[_builtins.int] group_id: Group ID, Attribute conditional on `type` being equal to `groupId`
                 - Range: `0`-`4294967295`
        :param pulumi.Input[_builtins.int] omp_tag: OMP tag, Attribute conditional on `type` being equal to `ompTag`
                 - Range: `0`-`4294967295`
        :param pulumi.Input[_builtins.str] origin: Origin, Attribute conditional on `type` being equal to `origin`
                 - Choices: `igp`, `egp`, `incomplete`, `aggregrate`, `bgp`, `bgp-external`, `bgp-internal`, `connected`, `eigrp`, `ospf`, `ospf-inter-area`, `ospf-intra-area`, `ospf-external1`, `ospf-external2`, `rip`, `static`, `eigrp-summary`, `eigrp-internal`, `eigrp-external`, `lisp`, `nat-dia`, `natpool`, `isis`, `isis-level1`, `isis-level2`
        :param pulumi.Input[_builtins.str] originator: Originator IP, Attribute conditional on `type` being equal to `originator`
        :param pulumi.Input[_builtins.str] path_type: Path type, Attribute conditional on `type` being equal to `pathType`
                 - Choices: `hierarchical-path`, `direct-path`, `transport-gateway-path`
        :param pulumi.Input[_builtins.int] preference: Preference, Attribute conditional on `type` being equal to `preference`
                 - Range: `0`-`4294967295`
        :param pulumi.Input[_builtins.str] prefix_list_id: Prefix list ID, Attribute conditional on `type` being equal to `prefixList`
        :param pulumi.Input[_builtins.int] prefix_list_version: Prefix list version
        :param pulumi.Input[_builtins.int] site_id: Site ID, Attribute conditional on `type` being equal to `siteId`
                 - Range: `0`-`4294967295`
        :param pulumi.Input[_builtins.str] site_list_id: Site list ID, Attribute conditional on `type` being equal to `siteList`
        :param pulumi.Input[_builtins.int] site_list_version: Site list version
        :param pulumi.Input[_builtins.str] tloc_color: TLOC color, Attribute conditional on `type` being equal to `tloc`
        :param pulumi.Input[_builtins.str] tloc_encapsulation: TLOC encapsulation, Attribute conditional on `type` being equal to `tloc`
                 - Choices: `ipsec`, `gre`
        :param pulumi.Input[_builtins.str] tloc_ip: TLOC IP address, Attribute conditional on `type` being equal to `tloc`
        :param pulumi.Input[_builtins.str] tloc_list_id: TLOC list ID, Attribute conditional on `type` being equal to `tlocList`
        :param pulumi.Input[_builtins.int] tloc_list_version: TLOC list version
        :param pulumi.Input[_builtins.int] vpn_id: VPN ID, Attribute conditional on `type` being equal to `vpn`
                 - Range: `0`-`65536`
        :param pulumi.Input[_builtins.str] vpn_list_id: VPN list ID, Attribute conditional on `type` being equal to `vpnList`
        :param pulumi.Input[_builtins.int] vpn_list_version: VPN list version
        """
        pulumi.set(__self__, "type", type)
        if carrier is not None:
            pulumi.set(__self__, "carrier", carrier)
        if color_list_id is not None:
            pulumi.set(__self__, "color_list_id", color_list_id)
        if color_list_version is not None:
            pulumi.set(__self__, "color_list_version", color_list_version)
        if community_list_id is not None:
            pulumi.set(__self__, "community_list_id", community_list_id)
        if community_list_version is not None:
            pulumi.set(__self__, "community_list_version", community_list_version)
        if domain_id is not None:
            pulumi.set(__self__, "domain_id", domain_id)
        if expanded_community_list_id is not None:
            pulumi.set(__self__, "expanded_community_list_id", expanded_community_list_id)
        if expanded_community_list_version is not None:
            pulumi.set(__self__, "expanded_community_list_version", expanded_community_list_version)
        if group_id is not None:
            pulumi.set(__self__, "group_id", group_id)
        if omp_tag is not None:
            pulumi.set(__self__, "omp_tag", omp_tag)
        if origin is not None:
            pulumi.set(__self__, "origin", origin)
        if originator is not None:
            pulumi.set(__self__, "originator", originator)
        if path_type is not None:
            pulumi.set(__self__, "path_type", path_type)
        if preference is not None:
            pulumi.set(__self__, "preference", preference)
        if prefix_list_id is not None:
            pulumi.set(__self__, "prefix_list_id", prefix_list_id)
        if prefix_list_version is not None:
            pulumi.set(__self__, "prefix_list_version", prefix_list_version)
        if site_id is not None:
            pulumi.set(__self__, "site_id", site_id)
        if site_list_id is not None:
            pulumi.set(__self__, "site_list_id", site_list_id)
        if site_list_version is not None:
            pulumi.set(__self__, "site_list_version", site_list_version)
        if tloc_color is not None:
            pulumi.set(__self__, "tloc_color", tloc_color)
        if tloc_encapsulation is not None:
            pulumi.set(__self__, "tloc_encapsulation", tloc_encapsulation)
        if tloc_ip is not None:
            pulumi.set(__self__, "tloc_ip", tloc_ip)
        if tloc_list_id is not None:
            pulumi.set(__self__, "tloc_list_id", tloc_list_id)
        if tloc_list_version is not None:
            pulumi.set(__self__, "tloc_list_version", tloc_list_version)
        if vpn_id is not None:
            pulumi.set(__self__, "vpn_id", vpn_id)
        if vpn_list_id is not None:
            pulumi.set(__self__, "vpn_list_id", vpn_list_id)
        if vpn_list_version is not None:
            pulumi.set(__self__, "vpn_list_version", vpn_list_version)

    @_builtins.property
    @pulumi.getter
    def type(self) -> pulumi.Input[_builtins.str]:
        """
        Type of match entry
          - Choices: `colorList`, `community`, `expandedCommunity`, `ompTag`, `origin`, `originator`, `preference`, `siteList`, `pathType`, `tlocList`, `vpnList`, `prefixList`, `vpn`, `tloc`, `siteId`, `carrier`, `domainId`, `groupId`
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "type", value)

    @_builtins.property
    @pulumi.getter
    def carrier(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Carrier, Attribute conditional on `type` being equal to `carrier`
          - Choices: `default`, `carrier1`, `carrier2`, `carrier3`, `carrier4`, `carrier5`, `carrier6`, `carrier7`, `carrier8`
        """
        return pulumi.get(self, "carrier")

    @carrier.setter
    def carrier(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "carrier", value)

    @_builtins.property
    @pulumi.getter(name="colorListId")
    def color_list_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Color list ID, Attribute conditional on `type` being equal to `colorList`
        """
        return pulumi.get(self, "color_list_id")

    @color_list_id.setter
    def color_list_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "color_list_id", value)

    @_builtins.property
    @pulumi.getter(name="colorListVersion")
    def color_list_version(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        Color list version
        """
        return pulumi.get(self, "color_list_version")

    @color_list_version.setter
    def color_list_version(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "color_list_version", value)

    @_builtins.property
    @pulumi.getter(name="communityListId")
    def community_list_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Community list ID, Attribute conditional on `type` being equal to `community`
        """
        return pulumi.get(self, "community_list_id")

    @community_list_id.setter
    def community_list_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "community_list_id", value)

    @_builtins.property
    @pulumi.getter(name="communityListVersion")
    def community_list_version(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        Community list version
        """
        return pulumi.get(self, "community_list_version")

    @community_list_version.setter
    def community_list_version(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "community_list_version", value)

    @_builtins.property
    @pulumi.getter(name="domainId")
    def domain_id(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        Domain ID, Attribute conditional on `type` being equal to `domainId`
          - Range: `0`-`4294967295`
        """
        return pulumi.get(self, "domain_id")

    @domain_id.setter
    def domain_id(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "domain_id", value)

    @_builtins.property
    @pulumi.getter(name="expandedCommunityListId")
    def expanded_community_list_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Expanded community list ID, Attribute conditional on `type` being equal to `expandedCommunity`
        """
        return pulumi.get(self, "expanded_community_list_id")

    @expanded_community_list_id.setter
    def expanded_community_list_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "expanded_community_list_id", value)

    @_builtins.property
    @pulumi.getter(name="expandedCommunityListVersion")
    def expanded_community_list_version(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        Expanded community list version
        """
        return pulumi.get(self, "expanded_community_list_version")

    @expanded_community_list_version.setter
    def expanded_community_list_version(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "expanded_community_list_version", value)

    @_builtins.property
    @pulumi.getter(name="groupId")
    def group_id(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        Group ID, Attribute conditional on `type` being equal to `groupId`
          - Range: `0`-`4294967295`
        """
        return pulumi.get(self, "group_id")

    @group_id.setter
    def group_id(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "group_id", value)

    @_builtins.property
    @pulumi.getter(name="ompTag")
    def omp_tag(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        OMP tag, Attribute conditional on `type` being equal to `ompTag`
          - Range: `0`-`4294967295`
        """
        return pulumi.get(self, "omp_tag")

    @omp_tag.setter
    def omp_tag(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "omp_tag", value)

    @_builtins.property
    @pulumi.getter
    def origin(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Origin, Attribute conditional on `type` being equal to `origin`
          - Choices: `igp`, `egp`, `incomplete`, `aggregrate`, `bgp`, `bgp-external`, `bgp-internal`, `connected`, `eigrp`, `ospf`, `ospf-inter-area`, `ospf-intra-area`, `ospf-external1`, `ospf-external2`, `rip`, `static`, `eigrp-summary`, `eigrp-internal`, `eigrp-external`, `lisp`, `nat-dia`, `natpool`, `isis`, `isis-level1`, `isis-level2`
        """
        return pulumi.get(self, "origin")

    @origin.setter
    def origin(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "origin", value)

    @_builtins.property
    @pulumi.getter
    def originator(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Originator IP, Attribute conditional on `type` being equal to `originator`
        """
        return pulumi.get(self, "originator")

    @originator.setter
    def originator(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "originator", value)

    @_builtins.property
    @pulumi.getter(name="pathType")
    def path_type(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Path type, Attribute conditional on `type` being equal to `pathType`
          - Choices: `hierarchical-path`, `direct-path`, `transport-gateway-path`
        """
        return pulumi.get(self, "path_type")

    @path_type.setter
    def path_type(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "path_type", value)

    @_builtins.property
    @pulumi.getter
    def preference(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        Preference, Attribute conditional on `type` being equal to `preference`
          - Range: `0`-`4294967295`
        """
        return pulumi.get(self, "preference")

    @preference.setter
    def preference(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "preference", value)

    @_builtins.property
    @pulumi.getter(name="prefixListId")
    def prefix_list_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Prefix list ID, Attribute conditional on `type` being equal to `prefixList`
        """
        return pulumi.get(self, "prefix_list_id")

    @prefix_list_id.setter
    def prefix_list_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "prefix_list_id", value)

    @_builtins.property
    @pulumi.getter(name="prefixListVersion")
    def prefix_list_version(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        Prefix list version
        """
        return pulumi.get(self, "prefix_list_version")

    @prefix_list_version.setter
    def prefix_list_version(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "prefix_list_version", value)

    @_builtins.property
    @pulumi.getter(name="siteId")
    def site_id(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        Site ID, Attribute conditional on `type` being equal to `siteId`
          - Range: `0`-`4294967295`
        """
        return pulumi.get(self, "site_id")

    @site_id.setter
    def site_id(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "site_id", value)

    @_builtins.property
    @pulumi.getter(name="siteListId")
    def site_list_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Site list ID, Attribute conditional on `type` being equal to `siteList`
        """
        return pulumi.get(self, "site_list_id")

    @site_list_id.setter
    def site_list_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "site_list_id", value)

    @_builtins.property
    @pulumi.getter(name="siteListVersion")
    def site_list_version(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        Site list version
        """
        return pulumi.get(self, "site_list_version")

    @site_list_version.setter
    def site_list_version(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "site_list_version", value)

    @_builtins.property
    @pulumi.getter(name="tlocColor")
    def tloc_color(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        TLOC color, Attribute conditional on `type` being equal to `tloc`
        """
        return pulumi.get(self, "tloc_color")

    @tloc_color.setter
    def tloc_color(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "tloc_color", value)

    @_builtins.property
    @pulumi.getter(name="tlocEncapsulation")
    def tloc_encapsulation(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        TLOC encapsulation, Attribute conditional on `type` being equal to `tloc`
          - Choices: `ipsec`, `gre`
        """
        return pulumi.get(self, "tloc_encapsulation")

    @tloc_encapsulation.setter
    def tloc_encapsulation(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "tloc_encapsulation", value)

    @_builtins.property
    @pulumi.getter(name="tlocIp")
    def tloc_ip(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        TLOC IP address, Attribute conditional on `type` being equal to `tloc`
        """
        return pulumi.get(self, "tloc_ip")

    @tloc_ip.setter
    def tloc_ip(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "tloc_ip", value)

    @_builtins.property
    @pulumi.getter(name="tlocListId")
    def tloc_list_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        TLOC list ID, Attribute conditional on `type` being equal to `tlocList`
        """
        return pulumi.get(self, "tloc_list_id")

    @tloc_list_id.setter
    def tloc_list_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "tloc_list_id", value)

    @_builtins.property
    @pulumi.getter(name="tlocListVersion")
    def tloc_list_version(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        TLOC list version
        """
        return pulumi.get(self, "tloc_list_version")

    @tloc_list_version.setter
    def tloc_list_version(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "tloc_list_version", value)

    @_builtins.property
    @pulumi.getter(name="vpnId")
    def vpn_id(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        VPN ID, Attribute conditional on `type` being equal to `vpn`
          - Range: `0`-`65536`
        """
        return pulumi.get(self, "vpn_id")

    @vpn_id.setter
    def vpn_id(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "vpn_id", value)

    @_builtins.property
    @pulumi.getter(name="vpnListId")
    def vpn_list_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        VPN list ID, Attribute conditional on `type` being equal to `vpnList`
        """
        return pulumi.get(self, "vpn_list_id")

    @vpn_list_id.setter
    def vpn_list_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "vpn_list_id", value)

    @_builtins.property
    @pulumi.getter(name="vpnListVersion")
    def vpn_list_version(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        VPN list version
        """
        return pulumi.get(self, "vpn_list_version")

    @vpn_list_version.setter
    def vpn_list_version(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "vpn_list_version", value)


if not MYPY:
    class DataFqdnPrefixListPolicyObjectEntryArgsDict(TypedDict):
        fqdn: pulumi.Input[_builtins.str]
        """
        Fully qualified domain name
        """
elif False:
    DataFqdnPrefixListPolicyObjectEntryArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class DataFqdnPrefixListPolicyObjectEntryArgs:
    def __init__(__self__, *,
                 fqdn: pulumi.Input[_builtins.str]):
        """
        :param pulumi.Input[_builtins.str] fqdn: Fully qualified domain name
        """
        pulumi.set(__self__, "fqdn", fqdn)

    @_builtins.property
    @pulumi.getter
    def fqdn(self) -> pulumi.Input[_builtins.str]:
        """
        Fully qualified domain name
        """
        return pulumi.get(self, "fqdn")

    @fqdn.setter
    def fqdn(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "fqdn", value)


if not MYPY:
    class DataIpv4PrefixListPolicyObjectEntryArgsDict(TypedDict):
        prefix: pulumi.Input[_builtins.str]
        """
        IP prefix list entry, e.g. `10.0.0.0/12`
        """
elif False:
    DataIpv4PrefixListPolicyObjectEntryArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class DataIpv4PrefixListPolicyObjectEntryArgs:
    def __init__(__self__, *,
                 prefix: pulumi.Input[_builtins.str]):
        """
        :param pulumi.Input[_builtins.str] prefix: IP prefix list entry, e.g. `10.0.0.0/12`
        """
        pulumi.set(__self__, "prefix", prefix)

    @_builtins.property
    @pulumi.getter
    def prefix(self) -> pulumi.Input[_builtins.str]:
        """
        IP prefix list entry, e.g. `10.0.0.0/12`
        """
        return pulumi.get(self, "prefix")

    @prefix.setter
    def prefix(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "prefix", value)


if not MYPY:
    class DataIpv6PrefixListPolicyObjectEntryArgsDict(TypedDict):
        prefix: pulumi.Input[_builtins.str]
        """
        IP prefix list entry, e.g. `2001:0:0:1::/64`
        """
elif False:
    DataIpv6PrefixListPolicyObjectEntryArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class DataIpv6PrefixListPolicyObjectEntryArgs:
    def __init__(__self__, *,
                 prefix: pulumi.Input[_builtins.str]):
        """
        :param pulumi.Input[_builtins.str] prefix: IP prefix list entry, e.g. `2001:0:0:1::/64`
        """
        pulumi.set(__self__, "prefix", prefix)

    @_builtins.property
    @pulumi.getter
    def prefix(self) -> pulumi.Input[_builtins.str]:
        """
        IP prefix list entry, e.g. `2001:0:0:1::/64`
        """
        return pulumi.get(self, "prefix")

    @prefix.setter
    def prefix(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "prefix", value)


if not MYPY:
    class DnsSecurityPolicyDefinitionTargetVpnArgsDict(TypedDict):
        custom_dns_server_ip: NotRequired[pulumi.Input[_builtins.str]]
        """
        Only relevant when `umbrella_dns_default` is `false`
        """
        local_domain_bypass_enabled: NotRequired[pulumi.Input[_builtins.bool]]
        """
        Should the local domain bypass list be enabled
        """
        umbrella_dns_default: NotRequired[pulumi.Input[_builtins.bool]]
        """
        Should use umbrella as DNS Server
        """
        vpn_ids: NotRequired[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]
        """
        VPN ID's separated by Comma
        """
elif False:
    DnsSecurityPolicyDefinitionTargetVpnArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class DnsSecurityPolicyDefinitionTargetVpnArgs:
    def __init__(__self__, *,
                 custom_dns_server_ip: Optional[pulumi.Input[_builtins.str]] = None,
                 local_domain_bypass_enabled: Optional[pulumi.Input[_builtins.bool]] = None,
                 umbrella_dns_default: Optional[pulumi.Input[_builtins.bool]] = None,
                 vpn_ids: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None):
        """
        :param pulumi.Input[_builtins.str] custom_dns_server_ip: Only relevant when `umbrella_dns_default` is `false`
        :param pulumi.Input[_builtins.bool] local_domain_bypass_enabled: Should the local domain bypass list be enabled
        :param pulumi.Input[_builtins.bool] umbrella_dns_default: Should use umbrella as DNS Server
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] vpn_ids: VPN ID's separated by Comma
        """
        if custom_dns_server_ip is not None:
            pulumi.set(__self__, "custom_dns_server_ip", custom_dns_server_ip)
        if local_domain_bypass_enabled is not None:
            pulumi.set(__self__, "local_domain_bypass_enabled", local_domain_bypass_enabled)
        if umbrella_dns_default is not None:
            pulumi.set(__self__, "umbrella_dns_default", umbrella_dns_default)
        if vpn_ids is not None:
            pulumi.set(__self__, "vpn_ids", vpn_ids)

    @_builtins.property
    @pulumi.getter(name="customDnsServerIp")
    def custom_dns_server_ip(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Only relevant when `umbrella_dns_default` is `false`
        """
        return pulumi.get(self, "custom_dns_server_ip")

    @custom_dns_server_ip.setter
    def custom_dns_server_ip(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "custom_dns_server_ip", value)

    @_builtins.property
    @pulumi.getter(name="localDomainBypassEnabled")
    def local_domain_bypass_enabled(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Should the local domain bypass list be enabled
        """
        return pulumi.get(self, "local_domain_bypass_enabled")

    @local_domain_bypass_enabled.setter
    def local_domain_bypass_enabled(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "local_domain_bypass_enabled", value)

    @_builtins.property
    @pulumi.getter(name="umbrellaDnsDefault")
    def umbrella_dns_default(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Should use umbrella as DNS Server
        """
        return pulumi.get(self, "umbrella_dns_default")

    @umbrella_dns_default.setter
    def umbrella_dns_default(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "umbrella_dns_default", value)

    @_builtins.property
    @pulumi.getter(name="vpnIds")
    def vpn_ids(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]:
        """
        VPN ID's separated by Comma
        """
        return pulumi.get(self, "vpn_ids")

    @vpn_ids.setter
    def vpn_ids(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "vpn_ids", value)


if not MYPY:
    class DnsSecurityPolicyTargetVpnArgsDict(TypedDict):
        dns_server_ip: NotRequired[pulumi.Input[_builtins.str]]
        """
        Field will only be under data field if matchAllVpn is true, otherwise field will be under targetVpns and set per entry
        """
        local_domain_bypass_enabled: NotRequired[pulumi.Input[_builtins.bool]]
        """
        Field will only be under data field if matchAllVpn is true, otherwise field will be under targetVpns and set per entry
        """
        uid: NotRequired[pulumi.Input[_builtins.str]]
        """
        non empty interger string
        """
        umbrella_default: NotRequired[pulumi.Input[_builtins.bool]]
        """
        Field will only be under data field if matchAllVpn is true, otherwise field will be under targetVpns and set per entry
        """
        vpns: NotRequired[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]
elif False:
    DnsSecurityPolicyTargetVpnArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class DnsSecurityPolicyTargetVpnArgs:
    def __init__(__self__, *,
                 dns_server_ip: Optional[pulumi.Input[_builtins.str]] = None,
                 local_domain_bypass_enabled: Optional[pulumi.Input[_builtins.bool]] = None,
                 uid: Optional[pulumi.Input[_builtins.str]] = None,
                 umbrella_default: Optional[pulumi.Input[_builtins.bool]] = None,
                 vpns: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None):
        """
        :param pulumi.Input[_builtins.str] dns_server_ip: Field will only be under data field if matchAllVpn is true, otherwise field will be under targetVpns and set per entry
        :param pulumi.Input[_builtins.bool] local_domain_bypass_enabled: Field will only be under data field if matchAllVpn is true, otherwise field will be under targetVpns and set per entry
        :param pulumi.Input[_builtins.str] uid: non empty interger string
        :param pulumi.Input[_builtins.bool] umbrella_default: Field will only be under data field if matchAllVpn is true, otherwise field will be under targetVpns and set per entry
        """
        if dns_server_ip is not None:
            pulumi.set(__self__, "dns_server_ip", dns_server_ip)
        if local_domain_bypass_enabled is not None:
            pulumi.set(__self__, "local_domain_bypass_enabled", local_domain_bypass_enabled)
        if uid is not None:
            pulumi.set(__self__, "uid", uid)
        if umbrella_default is not None:
            pulumi.set(__self__, "umbrella_default", umbrella_default)
        if vpns is not None:
            pulumi.set(__self__, "vpns", vpns)

    @_builtins.property
    @pulumi.getter(name="dnsServerIp")
    def dns_server_ip(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Field will only be under data field if matchAllVpn is true, otherwise field will be under targetVpns and set per entry
        """
        return pulumi.get(self, "dns_server_ip")

    @dns_server_ip.setter
    def dns_server_ip(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "dns_server_ip", value)

    @_builtins.property
    @pulumi.getter(name="localDomainBypassEnabled")
    def local_domain_bypass_enabled(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Field will only be under data field if matchAllVpn is true, otherwise field will be under targetVpns and set per entry
        """
        return pulumi.get(self, "local_domain_bypass_enabled")

    @local_domain_bypass_enabled.setter
    def local_domain_bypass_enabled(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "local_domain_bypass_enabled", value)

    @_builtins.property
    @pulumi.getter
    def uid(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        non empty interger string
        """
        return pulumi.get(self, "uid")

    @uid.setter
    def uid(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "uid", value)

    @_builtins.property
    @pulumi.getter(name="umbrellaDefault")
    def umbrella_default(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Field will only be under data field if matchAllVpn is true, otherwise field will be under targetVpns and set per entry
        """
        return pulumi.get(self, "umbrella_default")

    @umbrella_default.setter
    def umbrella_default(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "umbrella_default", value)

    @_builtins.property
    @pulumi.getter
    def vpns(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]:
        return pulumi.get(self, "vpns")

    @vpns.setter
    def vpns(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "vpns", value)


if not MYPY:
    class DomainListPolicyObjectEntryArgsDict(TypedDict):
        domain: NotRequired[pulumi.Input[_builtins.str]]
        """
        Domain name, must not start with `*`
        """
elif False:
    DomainListPolicyObjectEntryArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class DomainListPolicyObjectEntryArgs:
    def __init__(__self__, *,
                 domain: Optional[pulumi.Input[_builtins.str]] = None):
        """
        :param pulumi.Input[_builtins.str] domain: Domain name, must not start with `*`
        """
        if domain is not None:
            pulumi.set(__self__, "domain", domain)

    @_builtins.property
    @pulumi.getter
    def domain(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Domain name, must not start with `*`
        """
        return pulumi.get(self, "domain")

    @domain.setter
    def domain(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "domain", value)


if not MYPY:
    class EigrpFeatureTemplateAddressFamilyArgsDict(TypedDict):
        networks: NotRequired[pulumi.Input[Sequence[pulumi.Input['EigrpFeatureTemplateAddressFamilyNetworkArgsDict']]]]
        """
        Configure the networks for EIGRP to advertise
        """
        optional: NotRequired[pulumi.Input[_builtins.bool]]
        """
        Indicates if list item is considered optional.
        """
        redistributes: NotRequired[pulumi.Input[Sequence[pulumi.Input['EigrpFeatureTemplateAddressFamilyRedistributeArgsDict']]]]
        """
        Redistribute routes into EIGRP
        """
        type: NotRequired[pulumi.Input[_builtins.str]]
        """
        Set EIGRP address family
          - Choices: `ipv4`
          - Default value: `ipv4`
        """
elif False:
    EigrpFeatureTemplateAddressFamilyArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class EigrpFeatureTemplateAddressFamilyArgs:
    def __init__(__self__, *,
                 networks: Optional[pulumi.Input[Sequence[pulumi.Input['EigrpFeatureTemplateAddressFamilyNetworkArgs']]]] = None,
                 optional: Optional[pulumi.Input[_builtins.bool]] = None,
                 redistributes: Optional[pulumi.Input[Sequence[pulumi.Input['EigrpFeatureTemplateAddressFamilyRedistributeArgs']]]] = None,
                 type: Optional[pulumi.Input[_builtins.str]] = None):
        """
        :param pulumi.Input[Sequence[pulumi.Input['EigrpFeatureTemplateAddressFamilyNetworkArgs']]] networks: Configure the networks for EIGRP to advertise
        :param pulumi.Input[_builtins.bool] optional: Indicates if list item is considered optional.
        :param pulumi.Input[Sequence[pulumi.Input['EigrpFeatureTemplateAddressFamilyRedistributeArgs']]] redistributes: Redistribute routes into EIGRP
        :param pulumi.Input[_builtins.str] type: Set EIGRP address family
                 - Choices: `ipv4`
                 - Default value: `ipv4`
        """
        if networks is not None:
            pulumi.set(__self__, "networks", networks)
        if optional is not None:
            pulumi.set(__self__, "optional", optional)
        if redistributes is not None:
            pulumi.set(__self__, "redistributes", redistributes)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @_builtins.property
    @pulumi.getter
    def networks(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['EigrpFeatureTemplateAddressFamilyNetworkArgs']]]]:
        """
        Configure the networks for EIGRP to advertise
        """
        return pulumi.get(self, "networks")

    @networks.setter
    def networks(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['EigrpFeatureTemplateAddressFamilyNetworkArgs']]]]):
        pulumi.set(self, "networks", value)

    @_builtins.property
    @pulumi.getter
    def optional(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Indicates if list item is considered optional.
        """
        return pulumi.get(self, "optional")

    @optional.setter
    def optional(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "optional", value)

    @_builtins.property
    @pulumi.getter
    def redistributes(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['EigrpFeatureTemplateAddressFamilyRedistributeArgs']]]]:
        """
        Redistribute routes into EIGRP
        """
        return pulumi.get(self, "redistributes")

    @redistributes.setter
    def redistributes(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['EigrpFeatureTemplateAddressFamilyRedistributeArgs']]]]):
        pulumi.set(self, "redistributes", value)

    @_builtins.property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Set EIGRP address family
          - Choices: `ipv4`
          - Default value: `ipv4`
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "type", value)


if not MYPY:
    class EigrpFeatureTemplateAddressFamilyNetworkArgsDict(TypedDict):
        optional: NotRequired[pulumi.Input[_builtins.bool]]
        """
        Indicates if list item is considered optional.
        """
        prefix: NotRequired[pulumi.Input[_builtins.str]]
        """
        Configure the prefixes for EIGRP to announce
        """
        prefix_variable: NotRequired[pulumi.Input[_builtins.str]]
        """
        Variable name
        """
elif False:
    EigrpFeatureTemplateAddressFamilyNetworkArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class EigrpFeatureTemplateAddressFamilyNetworkArgs:
    def __init__(__self__, *,
                 optional: Optional[pulumi.Input[_builtins.bool]] = None,
                 prefix: Optional[pulumi.Input[_builtins.str]] = None,
                 prefix_variable: Optional[pulumi.Input[_builtins.str]] = None):
        """
        :param pulumi.Input[_builtins.bool] optional: Indicates if list item is considered optional.
        :param pulumi.Input[_builtins.str] prefix: Configure the prefixes for EIGRP to announce
        :param pulumi.Input[_builtins.str] prefix_variable: Variable name
        """
        if optional is not None:
            pulumi.set(__self__, "optional", optional)
        if prefix is not None:
            pulumi.set(__self__, "prefix", prefix)
        if prefix_variable is not None:
            pulumi.set(__self__, "prefix_variable", prefix_variable)

    @_builtins.property
    @pulumi.getter
    def optional(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Indicates if list item is considered optional.
        """
        return pulumi.get(self, "optional")

    @optional.setter
    def optional(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "optional", value)

    @_builtins.property
    @pulumi.getter
    def prefix(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Configure the prefixes for EIGRP to announce
        """
        return pulumi.get(self, "prefix")

    @prefix.setter
    def prefix(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "prefix", value)

    @_builtins.property
    @pulumi.getter(name="prefixVariable")
    def prefix_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "prefix_variable")

    @prefix_variable.setter
    def prefix_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "prefix_variable", value)


if not MYPY:
    class EigrpFeatureTemplateAddressFamilyRedistributeArgsDict(TypedDict):
        optional: NotRequired[pulumi.Input[_builtins.bool]]
        """
        Indicates if list item is considered optional.
        """
        protocol: NotRequired[pulumi.Input[_builtins.str]]
        """
        Set the protocol to redistribute routes from
          - Choices: `bgp`, `connected`, `nat-route`, `omp`, `ospf`, `ospfv3`, `static`
        """
        protocol_variable: NotRequired[pulumi.Input[_builtins.str]]
        """
        Variable name
        """
        route_policy: NotRequired[pulumi.Input[_builtins.str]]
        """
        Configure policy to apply to prefixes received from EIGRP neighbor
        """
        route_policy_variable: NotRequired[pulumi.Input[_builtins.str]]
        """
        Variable name
        """
elif False:
    EigrpFeatureTemplateAddressFamilyRedistributeArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class EigrpFeatureTemplateAddressFamilyRedistributeArgs:
    def __init__(__self__, *,
                 optional: Optional[pulumi.Input[_builtins.bool]] = None,
                 protocol: Optional[pulumi.Input[_builtins.str]] = None,
                 protocol_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 route_policy: Optional[pulumi.Input[_builtins.str]] = None,
                 route_policy_variable: Optional[pulumi.Input[_builtins.str]] = None):
        """
        :param pulumi.Input[_builtins.bool] optional: Indicates if list item is considered optional.
        :param pulumi.Input[_builtins.str] protocol: Set the protocol to redistribute routes from
                 - Choices: `bgp`, `connected`, `nat-route`, `omp`, `ospf`, `ospfv3`, `static`
        :param pulumi.Input[_builtins.str] protocol_variable: Variable name
        :param pulumi.Input[_builtins.str] route_policy: Configure policy to apply to prefixes received from EIGRP neighbor
        :param pulumi.Input[_builtins.str] route_policy_variable: Variable name
        """
        if optional is not None:
            pulumi.set(__self__, "optional", optional)
        if protocol is not None:
            pulumi.set(__self__, "protocol", protocol)
        if protocol_variable is not None:
            pulumi.set(__self__, "protocol_variable", protocol_variable)
        if route_policy is not None:
            pulumi.set(__self__, "route_policy", route_policy)
        if route_policy_variable is not None:
            pulumi.set(__self__, "route_policy_variable", route_policy_variable)

    @_builtins.property
    @pulumi.getter
    def optional(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Indicates if list item is considered optional.
        """
        return pulumi.get(self, "optional")

    @optional.setter
    def optional(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "optional", value)

    @_builtins.property
    @pulumi.getter
    def protocol(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Set the protocol to redistribute routes from
          - Choices: `bgp`, `connected`, `nat-route`, `omp`, `ospf`, `ospfv3`, `static`
        """
        return pulumi.get(self, "protocol")

    @protocol.setter
    def protocol(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "protocol", value)

    @_builtins.property
    @pulumi.getter(name="protocolVariable")
    def protocol_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "protocol_variable")

    @protocol_variable.setter
    def protocol_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "protocol_variable", value)

    @_builtins.property
    @pulumi.getter(name="routePolicy")
    def route_policy(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Configure policy to apply to prefixes received from EIGRP neighbor
        """
        return pulumi.get(self, "route_policy")

    @route_policy.setter
    def route_policy(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "route_policy", value)

    @_builtins.property
    @pulumi.getter(name="routePolicyVariable")
    def route_policy_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "route_policy_variable")

    @route_policy_variable.setter
    def route_policy_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "route_policy_variable", value)


if not MYPY:
    class EigrpFeatureTemplateInterfaceArgsDict(TypedDict):
        interface_name: NotRequired[pulumi.Input[_builtins.str]]
        """
        Set interface name
        """
        interface_name_variable: NotRequired[pulumi.Input[_builtins.str]]
        """
        Variable name
        """
        optional: NotRequired[pulumi.Input[_builtins.bool]]
        """
        Indicates if list item is considered optional.
        """
        shutdown: NotRequired[pulumi.Input[_builtins.bool]]
        """
        Enable/disable EIGRP
          - Default value: `false`
        """
        shutdown_variable: NotRequired[pulumi.Input[_builtins.str]]
        """
        Variable name
        """
        summary_addresses: NotRequired[pulumi.Input[Sequence[pulumi.Input['EigrpFeatureTemplateInterfaceSummaryAddressArgsDict']]]]
        """
        Set summary addresses
        """
elif False:
    EigrpFeatureTemplateInterfaceArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class EigrpFeatureTemplateInterfaceArgs:
    def __init__(__self__, *,
                 interface_name: Optional[pulumi.Input[_builtins.str]] = None,
                 interface_name_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 optional: Optional[pulumi.Input[_builtins.bool]] = None,
                 shutdown: Optional[pulumi.Input[_builtins.bool]] = None,
                 shutdown_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 summary_addresses: Optional[pulumi.Input[Sequence[pulumi.Input['EigrpFeatureTemplateInterfaceSummaryAddressArgs']]]] = None):
        """
        :param pulumi.Input[_builtins.str] interface_name: Set interface name
        :param pulumi.Input[_builtins.str] interface_name_variable: Variable name
        :param pulumi.Input[_builtins.bool] optional: Indicates if list item is considered optional.
        :param pulumi.Input[_builtins.bool] shutdown: Enable/disable EIGRP
                 - Default value: `false`
        :param pulumi.Input[_builtins.str] shutdown_variable: Variable name
        :param pulumi.Input[Sequence[pulumi.Input['EigrpFeatureTemplateInterfaceSummaryAddressArgs']]] summary_addresses: Set summary addresses
        """
        if interface_name is not None:
            pulumi.set(__self__, "interface_name", interface_name)
        if interface_name_variable is not None:
            pulumi.set(__self__, "interface_name_variable", interface_name_variable)
        if optional is not None:
            pulumi.set(__self__, "optional", optional)
        if shutdown is not None:
            pulumi.set(__self__, "shutdown", shutdown)
        if shutdown_variable is not None:
            pulumi.set(__self__, "shutdown_variable", shutdown_variable)
        if summary_addresses is not None:
            pulumi.set(__self__, "summary_addresses", summary_addresses)

    @_builtins.property
    @pulumi.getter(name="interfaceName")
    def interface_name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Set interface name
        """
        return pulumi.get(self, "interface_name")

    @interface_name.setter
    def interface_name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "interface_name", value)

    @_builtins.property
    @pulumi.getter(name="interfaceNameVariable")
    def interface_name_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "interface_name_variable")

    @interface_name_variable.setter
    def interface_name_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "interface_name_variable", value)

    @_builtins.property
    @pulumi.getter
    def optional(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Indicates if list item is considered optional.
        """
        return pulumi.get(self, "optional")

    @optional.setter
    def optional(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "optional", value)

    @_builtins.property
    @pulumi.getter
    def shutdown(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Enable/disable EIGRP
          - Default value: `false`
        """
        return pulumi.get(self, "shutdown")

    @shutdown.setter
    def shutdown(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "shutdown", value)

    @_builtins.property
    @pulumi.getter(name="shutdownVariable")
    def shutdown_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "shutdown_variable")

    @shutdown_variable.setter
    def shutdown_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "shutdown_variable", value)

    @_builtins.property
    @pulumi.getter(name="summaryAddresses")
    def summary_addresses(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['EigrpFeatureTemplateInterfaceSummaryAddressArgs']]]]:
        """
        Set summary addresses
        """
        return pulumi.get(self, "summary_addresses")

    @summary_addresses.setter
    def summary_addresses(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['EigrpFeatureTemplateInterfaceSummaryAddressArgs']]]]):
        pulumi.set(self, "summary_addresses", value)


if not MYPY:
    class EigrpFeatureTemplateInterfaceSummaryAddressArgsDict(TypedDict):
        optional: NotRequired[pulumi.Input[_builtins.bool]]
        """
        Indicates if list item is considered optional.
        """
        prefix: NotRequired[pulumi.Input[_builtins.str]]
        """
        Set summary address prefix
        """
        prefix_variable: NotRequired[pulumi.Input[_builtins.str]]
        """
        Variable name
        """
elif False:
    EigrpFeatureTemplateInterfaceSummaryAddressArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class EigrpFeatureTemplateInterfaceSummaryAddressArgs:
    def __init__(__self__, *,
                 optional: Optional[pulumi.Input[_builtins.bool]] = None,
                 prefix: Optional[pulumi.Input[_builtins.str]] = None,
                 prefix_variable: Optional[pulumi.Input[_builtins.str]] = None):
        """
        :param pulumi.Input[_builtins.bool] optional: Indicates if list item is considered optional.
        :param pulumi.Input[_builtins.str] prefix: Set summary address prefix
        :param pulumi.Input[_builtins.str] prefix_variable: Variable name
        """
        if optional is not None:
            pulumi.set(__self__, "optional", optional)
        if prefix is not None:
            pulumi.set(__self__, "prefix", prefix)
        if prefix_variable is not None:
            pulumi.set(__self__, "prefix_variable", prefix_variable)

    @_builtins.property
    @pulumi.getter
    def optional(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Indicates if list item is considered optional.
        """
        return pulumi.get(self, "optional")

    @optional.setter
    def optional(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "optional", value)

    @_builtins.property
    @pulumi.getter
    def prefix(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Set summary address prefix
        """
        return pulumi.get(self, "prefix")

    @prefix.setter
    def prefix(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "prefix", value)

    @_builtins.property
    @pulumi.getter(name="prefixVariable")
    def prefix_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "prefix_variable")

    @prefix_variable.setter
    def prefix_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "prefix_variable", value)


if not MYPY:
    class EigrpFeatureTemplateKeyArgsDict(TypedDict):
        md5_authentication_key: NotRequired[pulumi.Input[_builtins.str]]
        """
        Set MD5 key
        """
        md5_authentication_key_variable: NotRequired[pulumi.Input[_builtins.str]]
        """
        Variable name
        """
        md5_key_id: NotRequired[pulumi.Input[_builtins.int]]
        """
        Set MD5 key ID
          - Range: `1`-`255`
        """
        md5_key_id_variable: NotRequired[pulumi.Input[_builtins.str]]
        """
        Variable name
        """
        optional: NotRequired[pulumi.Input[_builtins.bool]]
        """
        Indicates if list item is considered optional.
        """
elif False:
    EigrpFeatureTemplateKeyArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class EigrpFeatureTemplateKeyArgs:
    def __init__(__self__, *,
                 md5_authentication_key: Optional[pulumi.Input[_builtins.str]] = None,
                 md5_authentication_key_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 md5_key_id: Optional[pulumi.Input[_builtins.int]] = None,
                 md5_key_id_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 optional: Optional[pulumi.Input[_builtins.bool]] = None):
        """
        :param pulumi.Input[_builtins.str] md5_authentication_key: Set MD5 key
        :param pulumi.Input[_builtins.str] md5_authentication_key_variable: Variable name
        :param pulumi.Input[_builtins.int] md5_key_id: Set MD5 key ID
                 - Range: `1`-`255`
        :param pulumi.Input[_builtins.str] md5_key_id_variable: Variable name
        :param pulumi.Input[_builtins.bool] optional: Indicates if list item is considered optional.
        """
        if md5_authentication_key is not None:
            pulumi.set(__self__, "md5_authentication_key", md5_authentication_key)
        if md5_authentication_key_variable is not None:
            pulumi.set(__self__, "md5_authentication_key_variable", md5_authentication_key_variable)
        if md5_key_id is not None:
            pulumi.set(__self__, "md5_key_id", md5_key_id)
        if md5_key_id_variable is not None:
            pulumi.set(__self__, "md5_key_id_variable", md5_key_id_variable)
        if optional is not None:
            pulumi.set(__self__, "optional", optional)

    @_builtins.property
    @pulumi.getter(name="md5AuthenticationKey")
    def md5_authentication_key(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Set MD5 key
        """
        return pulumi.get(self, "md5_authentication_key")

    @md5_authentication_key.setter
    def md5_authentication_key(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "md5_authentication_key", value)

    @_builtins.property
    @pulumi.getter(name="md5AuthenticationKeyVariable")
    def md5_authentication_key_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "md5_authentication_key_variable")

    @md5_authentication_key_variable.setter
    def md5_authentication_key_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "md5_authentication_key_variable", value)

    @_builtins.property
    @pulumi.getter(name="md5KeyId")
    def md5_key_id(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        Set MD5 key ID
          - Range: `1`-`255`
        """
        return pulumi.get(self, "md5_key_id")

    @md5_key_id.setter
    def md5_key_id(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "md5_key_id", value)

    @_builtins.property
    @pulumi.getter(name="md5KeyIdVariable")
    def md5_key_id_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "md5_key_id_variable")

    @md5_key_id_variable.setter
    def md5_key_id_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "md5_key_id_variable", value)

    @_builtins.property
    @pulumi.getter
    def optional(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Indicates if list item is considered optional.
        """
        return pulumi.get(self, "optional")

    @optional.setter
    def optional(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "optional", value)


if not MYPY:
    class ExpandedCommunityListPolicyObjectEntryArgsDict(TypedDict):
        community: NotRequired[pulumi.Input[_builtins.str]]
        """
        Expanded community value, e.g. `100:1000`
        """
elif False:
    ExpandedCommunityListPolicyObjectEntryArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ExpandedCommunityListPolicyObjectEntryArgs:
    def __init__(__self__, *,
                 community: Optional[pulumi.Input[_builtins.str]] = None):
        """
        :param pulumi.Input[_builtins.str] community: Expanded community value, e.g. `100:1000`
        """
        if community is not None:
            pulumi.set(__self__, "community", community)

    @_builtins.property
    @pulumi.getter
    def community(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Expanded community value, e.g. `100:1000`
        """
        return pulumi.get(self, "community")

    @community.setter
    def community(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "community", value)


if not MYPY:
    class ExtendedCommunityListPolicyObjectEntryArgsDict(TypedDict):
        community: pulumi.Input[_builtins.str]
        """
        Extended community value, e.g. `community soo 10.0.0.1:30` or `community rt 100:10`
        """
elif False:
    ExtendedCommunityListPolicyObjectEntryArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ExtendedCommunityListPolicyObjectEntryArgs:
    def __init__(__self__, *,
                 community: pulumi.Input[_builtins.str]):
        """
        :param pulumi.Input[_builtins.str] community: Extended community value, e.g. `community soo 10.0.0.1:30` or `community rt 100:10`
        """
        pulumi.set(__self__, "community", community)

    @_builtins.property
    @pulumi.getter
    def community(self) -> pulumi.Input[_builtins.str]:
        """
        Extended community value, e.g. `community soo 10.0.0.1:30` or `community rt 100:10`
        """
        return pulumi.get(self, "community")

    @community.setter
    def community(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "community", value)


if not MYPY:
    class FeatureDeviceTemplateGeneralTemplateArgsDict(TypedDict):
        id: pulumi.Input[_builtins.str]
        """
        Feature template ID
        """
        type: pulumi.Input[_builtins.str]
        """
        Feature template type
          - Choices: `cisco_system`, `cisco_logging`, `cedge_aaa`, `cisco_bfd`, `cisco_omp`, `cisco_security`, `cisco_banner`, `cisco_snmp`, `cedge_global`, `cli-template`, `cisco_sig_credentials`, `switchport`, `cisco_thousandeyes`, `cisco_vpn`, `virtual-application-utd`, `cellular-cedge-controller`
        """
        sub_templates: NotRequired[pulumi.Input[Sequence[pulumi.Input['FeatureDeviceTemplateGeneralTemplateSubTemplateArgsDict']]]]
        """
        List of sub templates
        """
        version: NotRequired[pulumi.Input[_builtins.int]]
        """
        Feature template version
        """
elif False:
    FeatureDeviceTemplateGeneralTemplateArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class FeatureDeviceTemplateGeneralTemplateArgs:
    def __init__(__self__, *,
                 id: pulumi.Input[_builtins.str],
                 type: pulumi.Input[_builtins.str],
                 sub_templates: Optional[pulumi.Input[Sequence[pulumi.Input['FeatureDeviceTemplateGeneralTemplateSubTemplateArgs']]]] = None,
                 version: Optional[pulumi.Input[_builtins.int]] = None):
        """
        :param pulumi.Input[_builtins.str] id: Feature template ID
        :param pulumi.Input[_builtins.str] type: Feature template type
                 - Choices: `cisco_system`, `cisco_logging`, `cedge_aaa`, `cisco_bfd`, `cisco_omp`, `cisco_security`, `cisco_banner`, `cisco_snmp`, `cedge_global`, `cli-template`, `cisco_sig_credentials`, `switchport`, `cisco_thousandeyes`, `cisco_vpn`, `virtual-application-utd`, `cellular-cedge-controller`
        :param pulumi.Input[Sequence[pulumi.Input['FeatureDeviceTemplateGeneralTemplateSubTemplateArgs']]] sub_templates: List of sub templates
        :param pulumi.Input[_builtins.int] version: Feature template version
        """
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "type", type)
        if sub_templates is not None:
            pulumi.set(__self__, "sub_templates", sub_templates)
        if version is not None:
            pulumi.set(__self__, "version", version)

    @_builtins.property
    @pulumi.getter
    def id(self) -> pulumi.Input[_builtins.str]:
        """
        Feature template ID
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "id", value)

    @_builtins.property
    @pulumi.getter
    def type(self) -> pulumi.Input[_builtins.str]:
        """
        Feature template type
          - Choices: `cisco_system`, `cisco_logging`, `cedge_aaa`, `cisco_bfd`, `cisco_omp`, `cisco_security`, `cisco_banner`, `cisco_snmp`, `cedge_global`, `cli-template`, `cisco_sig_credentials`, `switchport`, `cisco_thousandeyes`, `cisco_vpn`, `virtual-application-utd`, `cellular-cedge-controller`
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "type", value)

    @_builtins.property
    @pulumi.getter(name="subTemplates")
    def sub_templates(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['FeatureDeviceTemplateGeneralTemplateSubTemplateArgs']]]]:
        """
        List of sub templates
        """
        return pulumi.get(self, "sub_templates")

    @sub_templates.setter
    def sub_templates(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['FeatureDeviceTemplateGeneralTemplateSubTemplateArgs']]]]):
        pulumi.set(self, "sub_templates", value)

    @_builtins.property
    @pulumi.getter
    def version(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        Feature template version
        """
        return pulumi.get(self, "version")

    @version.setter
    def version(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "version", value)


if not MYPY:
    class FeatureDeviceTemplateGeneralTemplateSubTemplateArgsDict(TypedDict):
        id: pulumi.Input[_builtins.str]
        """
        Feature template ID
        """
        type: pulumi.Input[_builtins.str]
        """
        Feature template type
          - Choices: `cisco_logging`, `cisco_ntp`, `cisco_ospf`, `cisco_bgp`, `cisco_vpn_interface`, `cisco_vpn_interface_gre`, `cisco_vpn_interface_ipsec`, `vpn-interface-svi`, `vpn-cedge-interface-cellular`, `cisco_secure_internet_gateway`
        """
        sub_templates: NotRequired[pulumi.Input[Sequence[pulumi.Input['FeatureDeviceTemplateGeneralTemplateSubTemplateSubTemplateArgsDict']]]]
        """
        List of sub templates
        """
        version: NotRequired[pulumi.Input[_builtins.int]]
        """
        Feature template version
        """
elif False:
    FeatureDeviceTemplateGeneralTemplateSubTemplateArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class FeatureDeviceTemplateGeneralTemplateSubTemplateArgs:
    def __init__(__self__, *,
                 id: pulumi.Input[_builtins.str],
                 type: pulumi.Input[_builtins.str],
                 sub_templates: Optional[pulumi.Input[Sequence[pulumi.Input['FeatureDeviceTemplateGeneralTemplateSubTemplateSubTemplateArgs']]]] = None,
                 version: Optional[pulumi.Input[_builtins.int]] = None):
        """
        :param pulumi.Input[_builtins.str] id: Feature template ID
        :param pulumi.Input[_builtins.str] type: Feature template type
                 - Choices: `cisco_logging`, `cisco_ntp`, `cisco_ospf`, `cisco_bgp`, `cisco_vpn_interface`, `cisco_vpn_interface_gre`, `cisco_vpn_interface_ipsec`, `vpn-interface-svi`, `vpn-cedge-interface-cellular`, `cisco_secure_internet_gateway`
        :param pulumi.Input[Sequence[pulumi.Input['FeatureDeviceTemplateGeneralTemplateSubTemplateSubTemplateArgs']]] sub_templates: List of sub templates
        :param pulumi.Input[_builtins.int] version: Feature template version
        """
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "type", type)
        if sub_templates is not None:
            pulumi.set(__self__, "sub_templates", sub_templates)
        if version is not None:
            pulumi.set(__self__, "version", version)

    @_builtins.property
    @pulumi.getter
    def id(self) -> pulumi.Input[_builtins.str]:
        """
        Feature template ID
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "id", value)

    @_builtins.property
    @pulumi.getter
    def type(self) -> pulumi.Input[_builtins.str]:
        """
        Feature template type
          - Choices: `cisco_logging`, `cisco_ntp`, `cisco_ospf`, `cisco_bgp`, `cisco_vpn_interface`, `cisco_vpn_interface_gre`, `cisco_vpn_interface_ipsec`, `vpn-interface-svi`, `vpn-cedge-interface-cellular`, `cisco_secure_internet_gateway`
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "type", value)

    @_builtins.property
    @pulumi.getter(name="subTemplates")
    def sub_templates(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['FeatureDeviceTemplateGeneralTemplateSubTemplateSubTemplateArgs']]]]:
        """
        List of sub templates
        """
        return pulumi.get(self, "sub_templates")

    @sub_templates.setter
    def sub_templates(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['FeatureDeviceTemplateGeneralTemplateSubTemplateSubTemplateArgs']]]]):
        pulumi.set(self, "sub_templates", value)

    @_builtins.property
    @pulumi.getter
    def version(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        Feature template version
        """
        return pulumi.get(self, "version")

    @version.setter
    def version(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "version", value)


if not MYPY:
    class FeatureDeviceTemplateGeneralTemplateSubTemplateSubTemplateArgsDict(TypedDict):
        id: pulumi.Input[_builtins.str]
        """
        Feature template ID
        """
        type: pulumi.Input[_builtins.str]
        """
        Feature template type
          - Choices: `cisco_dhcp_server`, `cellular-cedge-profile`
        """
        version: NotRequired[pulumi.Input[_builtins.int]]
        """
        Feature template version
        """
elif False:
    FeatureDeviceTemplateGeneralTemplateSubTemplateSubTemplateArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class FeatureDeviceTemplateGeneralTemplateSubTemplateSubTemplateArgs:
    def __init__(__self__, *,
                 id: pulumi.Input[_builtins.str],
                 type: pulumi.Input[_builtins.str],
                 version: Optional[pulumi.Input[_builtins.int]] = None):
        """
        :param pulumi.Input[_builtins.str] id: Feature template ID
        :param pulumi.Input[_builtins.str] type: Feature template type
                 - Choices: `cisco_dhcp_server`, `cellular-cedge-profile`
        :param pulumi.Input[_builtins.int] version: Feature template version
        """
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "type", type)
        if version is not None:
            pulumi.set(__self__, "version", version)

    @_builtins.property
    @pulumi.getter
    def id(self) -> pulumi.Input[_builtins.str]:
        """
        Feature template ID
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "id", value)

    @_builtins.property
    @pulumi.getter
    def type(self) -> pulumi.Input[_builtins.str]:
        """
        Feature template type
          - Choices: `cisco_dhcp_server`, `cellular-cedge-profile`
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "type", value)

    @_builtins.property
    @pulumi.getter
    def version(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        Feature template version
        """
        return pulumi.get(self, "version")

    @version.setter
    def version(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "version", value)


if not MYPY:
    class GeoLocationListPolicyObjectEntryArgsDict(TypedDict):
        continent: NotRequired[pulumi.Input[_builtins.str]]
        """
        Continent
          - Choices: `AF`, `AN`, `AS`, `EU`, `NA`, `OC`, `SA`
        """
        country: NotRequired[pulumi.Input[_builtins.str]]
        """
        Country
        """
elif False:
    GeoLocationListPolicyObjectEntryArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class GeoLocationListPolicyObjectEntryArgs:
    def __init__(__self__, *,
                 continent: Optional[pulumi.Input[_builtins.str]] = None,
                 country: Optional[pulumi.Input[_builtins.str]] = None):
        """
        :param pulumi.Input[_builtins.str] continent: Continent
                 - Choices: `AF`, `AN`, `AS`, `EU`, `NA`, `OC`, `SA`
        :param pulumi.Input[_builtins.str] country: Country
        """
        if continent is not None:
            pulumi.set(__self__, "continent", continent)
        if country is not None:
            pulumi.set(__self__, "country", country)

    @_builtins.property
    @pulumi.getter
    def continent(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Continent
          - Choices: `AF`, `AN`, `AS`, `EU`, `NA`, `OC`, `SA`
        """
        return pulumi.get(self, "continent")

    @continent.setter
    def continent(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "continent", value)

    @_builtins.property
    @pulumi.getter
    def country(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Country
        """
        return pulumi.get(self, "country")

    @country.setter
    def country(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "country", value)


if not MYPY:
    class HubAndSpokeTopologyPolicyDefinitionTopologyArgsDict(TypedDict):
        name: pulumi.Input[_builtins.str]
        """
        Topology name
        """
        advertise_hub_tlocs: NotRequired[pulumi.Input[_builtins.bool]]
        """
        Advertise Hub TLOCs
        """
        all_hubs_are_equal: NotRequired[pulumi.Input[_builtins.bool]]
        """
        All hubs are equal (All Spokes Sites connect to all Hubs)
        """
        spokes: NotRequired[pulumi.Input[Sequence[pulumi.Input['HubAndSpokeTopologyPolicyDefinitionTopologySpokeArgsDict']]]]
        """
        List of spokes
        """
        tloc_list_id: NotRequired[pulumi.Input[_builtins.str]]
        """
        TLOC list ID (required when `advertise_hub_tlocs` is 'true')
        """
elif False:
    HubAndSpokeTopologyPolicyDefinitionTopologyArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class HubAndSpokeTopologyPolicyDefinitionTopologyArgs:
    def __init__(__self__, *,
                 name: pulumi.Input[_builtins.str],
                 advertise_hub_tlocs: Optional[pulumi.Input[_builtins.bool]] = None,
                 all_hubs_are_equal: Optional[pulumi.Input[_builtins.bool]] = None,
                 spokes: Optional[pulumi.Input[Sequence[pulumi.Input['HubAndSpokeTopologyPolicyDefinitionTopologySpokeArgs']]]] = None,
                 tloc_list_id: Optional[pulumi.Input[_builtins.str]] = None):
        """
        :param pulumi.Input[_builtins.str] name: Topology name
        :param pulumi.Input[_builtins.bool] advertise_hub_tlocs: Advertise Hub TLOCs
        :param pulumi.Input[_builtins.bool] all_hubs_are_equal: All hubs are equal (All Spokes Sites connect to all Hubs)
        :param pulumi.Input[Sequence[pulumi.Input['HubAndSpokeTopologyPolicyDefinitionTopologySpokeArgs']]] spokes: List of spokes
        :param pulumi.Input[_builtins.str] tloc_list_id: TLOC list ID (required when `advertise_hub_tlocs` is 'true')
        """
        pulumi.set(__self__, "name", name)
        if advertise_hub_tlocs is not None:
            pulumi.set(__self__, "advertise_hub_tlocs", advertise_hub_tlocs)
        if all_hubs_are_equal is not None:
            pulumi.set(__self__, "all_hubs_are_equal", all_hubs_are_equal)
        if spokes is not None:
            pulumi.set(__self__, "spokes", spokes)
        if tloc_list_id is not None:
            pulumi.set(__self__, "tloc_list_id", tloc_list_id)

    @_builtins.property
    @pulumi.getter
    def name(self) -> pulumi.Input[_builtins.str]:
        """
        Topology name
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "name", value)

    @_builtins.property
    @pulumi.getter(name="advertiseHubTlocs")
    def advertise_hub_tlocs(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Advertise Hub TLOCs
        """
        return pulumi.get(self, "advertise_hub_tlocs")

    @advertise_hub_tlocs.setter
    def advertise_hub_tlocs(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "advertise_hub_tlocs", value)

    @_builtins.property
    @pulumi.getter(name="allHubsAreEqual")
    def all_hubs_are_equal(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        All hubs are equal (All Spokes Sites connect to all Hubs)
        """
        return pulumi.get(self, "all_hubs_are_equal")

    @all_hubs_are_equal.setter
    def all_hubs_are_equal(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "all_hubs_are_equal", value)

    @_builtins.property
    @pulumi.getter
    def spokes(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['HubAndSpokeTopologyPolicyDefinitionTopologySpokeArgs']]]]:
        """
        List of spokes
        """
        return pulumi.get(self, "spokes")

    @spokes.setter
    def spokes(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['HubAndSpokeTopologyPolicyDefinitionTopologySpokeArgs']]]]):
        pulumi.set(self, "spokes", value)

    @_builtins.property
    @pulumi.getter(name="tlocListId")
    def tloc_list_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        TLOC list ID (required when `advertise_hub_tlocs` is 'true')
        """
        return pulumi.get(self, "tloc_list_id")

    @tloc_list_id.setter
    def tloc_list_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "tloc_list_id", value)


if not MYPY:
    class HubAndSpokeTopologyPolicyDefinitionTopologySpokeArgsDict(TypedDict):
        hubs: NotRequired[pulumi.Input[Sequence[pulumi.Input['HubAndSpokeTopologyPolicyDefinitionTopologySpokeHubArgsDict']]]]
        """
        List of hubs
        """
        site_list_id: NotRequired[pulumi.Input[_builtins.str]]
        """
        Site list ID
        """
        site_list_version: NotRequired[pulumi.Input[_builtins.int]]
        """
        Site list version
        """
elif False:
    HubAndSpokeTopologyPolicyDefinitionTopologySpokeArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class HubAndSpokeTopologyPolicyDefinitionTopologySpokeArgs:
    def __init__(__self__, *,
                 hubs: Optional[pulumi.Input[Sequence[pulumi.Input['HubAndSpokeTopologyPolicyDefinitionTopologySpokeHubArgs']]]] = None,
                 site_list_id: Optional[pulumi.Input[_builtins.str]] = None,
                 site_list_version: Optional[pulumi.Input[_builtins.int]] = None):
        """
        :param pulumi.Input[Sequence[pulumi.Input['HubAndSpokeTopologyPolicyDefinitionTopologySpokeHubArgs']]] hubs: List of hubs
        :param pulumi.Input[_builtins.str] site_list_id: Site list ID
        :param pulumi.Input[_builtins.int] site_list_version: Site list version
        """
        if hubs is not None:
            pulumi.set(__self__, "hubs", hubs)
        if site_list_id is not None:
            pulumi.set(__self__, "site_list_id", site_list_id)
        if site_list_version is not None:
            pulumi.set(__self__, "site_list_version", site_list_version)

    @_builtins.property
    @pulumi.getter
    def hubs(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['HubAndSpokeTopologyPolicyDefinitionTopologySpokeHubArgs']]]]:
        """
        List of hubs
        """
        return pulumi.get(self, "hubs")

    @hubs.setter
    def hubs(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['HubAndSpokeTopologyPolicyDefinitionTopologySpokeHubArgs']]]]):
        pulumi.set(self, "hubs", value)

    @_builtins.property
    @pulumi.getter(name="siteListId")
    def site_list_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Site list ID
        """
        return pulumi.get(self, "site_list_id")

    @site_list_id.setter
    def site_list_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "site_list_id", value)

    @_builtins.property
    @pulumi.getter(name="siteListVersion")
    def site_list_version(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        Site list version
        """
        return pulumi.get(self, "site_list_version")

    @site_list_version.setter
    def site_list_version(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "site_list_version", value)


if not MYPY:
    class HubAndSpokeTopologyPolicyDefinitionTopologySpokeHubArgsDict(TypedDict):
        ipv4_prefix_list_ids: NotRequired[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]
        """
        List of IPv4 prefix list IDs
        """
        ipv6_prefix_list_ids: NotRequired[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]
        """
        List of IPv6 prefix list IDs
        """
        preference: NotRequired[pulumi.Input[_builtins.str]]
        """
        Preference, multiple of 10 (for example 70, 80, 90, 100). The higher the value the higher the priority of the associated hub (required when `all_hubs_are_equal` is 'false')
        """
        site_list_id: NotRequired[pulumi.Input[_builtins.str]]
        """
        Site list ID
        """
        site_list_version: NotRequired[pulumi.Input[_builtins.int]]
        """
        Site list version
        """
elif False:
    HubAndSpokeTopologyPolicyDefinitionTopologySpokeHubArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class HubAndSpokeTopologyPolicyDefinitionTopologySpokeHubArgs:
    def __init__(__self__, *,
                 ipv4_prefix_list_ids: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 ipv6_prefix_list_ids: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 preference: Optional[pulumi.Input[_builtins.str]] = None,
                 site_list_id: Optional[pulumi.Input[_builtins.str]] = None,
                 site_list_version: Optional[pulumi.Input[_builtins.int]] = None):
        """
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] ipv4_prefix_list_ids: List of IPv4 prefix list IDs
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] ipv6_prefix_list_ids: List of IPv6 prefix list IDs
        :param pulumi.Input[_builtins.str] preference: Preference, multiple of 10 (for example 70, 80, 90, 100). The higher the value the higher the priority of the associated hub (required when `all_hubs_are_equal` is 'false')
        :param pulumi.Input[_builtins.str] site_list_id: Site list ID
        :param pulumi.Input[_builtins.int] site_list_version: Site list version
        """
        if ipv4_prefix_list_ids is not None:
            pulumi.set(__self__, "ipv4_prefix_list_ids", ipv4_prefix_list_ids)
        if ipv6_prefix_list_ids is not None:
            pulumi.set(__self__, "ipv6_prefix_list_ids", ipv6_prefix_list_ids)
        if preference is not None:
            pulumi.set(__self__, "preference", preference)
        if site_list_id is not None:
            pulumi.set(__self__, "site_list_id", site_list_id)
        if site_list_version is not None:
            pulumi.set(__self__, "site_list_version", site_list_version)

    @_builtins.property
    @pulumi.getter(name="ipv4PrefixListIds")
    def ipv4_prefix_list_ids(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]:
        """
        List of IPv4 prefix list IDs
        """
        return pulumi.get(self, "ipv4_prefix_list_ids")

    @ipv4_prefix_list_ids.setter
    def ipv4_prefix_list_ids(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "ipv4_prefix_list_ids", value)

    @_builtins.property
    @pulumi.getter(name="ipv6PrefixListIds")
    def ipv6_prefix_list_ids(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]:
        """
        List of IPv6 prefix list IDs
        """
        return pulumi.get(self, "ipv6_prefix_list_ids")

    @ipv6_prefix_list_ids.setter
    def ipv6_prefix_list_ids(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "ipv6_prefix_list_ids", value)

    @_builtins.property
    @pulumi.getter
    def preference(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Preference, multiple of 10 (for example 70, 80, 90, 100). The higher the value the higher the priority of the associated hub (required when `all_hubs_are_equal` is 'false')
        """
        return pulumi.get(self, "preference")

    @preference.setter
    def preference(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "preference", value)

    @_builtins.property
    @pulumi.getter(name="siteListId")
    def site_list_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Site list ID
        """
        return pulumi.get(self, "site_list_id")

    @site_list_id.setter
    def site_list_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "site_list_id", value)

    @_builtins.property
    @pulumi.getter(name="siteListVersion")
    def site_list_version(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        Site list version
        """
        return pulumi.get(self, "site_list_version")

    @site_list_version.setter
    def site_list_version(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "site_list_version", value)


if not MYPY:
    class IntrusionPreventionPolicyDefinitionLoggingArgsDict(TypedDict):
        external_syslog_server_ip: NotRequired[pulumi.Input[_builtins.str]]
        """
        External Syslog Server IP
        """
        external_syslog_server_vpn: NotRequired[pulumi.Input[_builtins.str]]
        """
        External Syslog Server VPN
        """
elif False:
    IntrusionPreventionPolicyDefinitionLoggingArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class IntrusionPreventionPolicyDefinitionLoggingArgs:
    def __init__(__self__, *,
                 external_syslog_server_ip: Optional[pulumi.Input[_builtins.str]] = None,
                 external_syslog_server_vpn: Optional[pulumi.Input[_builtins.str]] = None):
        """
        :param pulumi.Input[_builtins.str] external_syslog_server_ip: External Syslog Server IP
        :param pulumi.Input[_builtins.str] external_syslog_server_vpn: External Syslog Server VPN
        """
        if external_syslog_server_ip is not None:
            pulumi.set(__self__, "external_syslog_server_ip", external_syslog_server_ip)
        if external_syslog_server_vpn is not None:
            pulumi.set(__self__, "external_syslog_server_vpn", external_syslog_server_vpn)

    @_builtins.property
    @pulumi.getter(name="externalSyslogServerIp")
    def external_syslog_server_ip(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        External Syslog Server IP
        """
        return pulumi.get(self, "external_syslog_server_ip")

    @external_syslog_server_ip.setter
    def external_syslog_server_ip(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "external_syslog_server_ip", value)

    @_builtins.property
    @pulumi.getter(name="externalSyslogServerVpn")
    def external_syslog_server_vpn(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        External Syslog Server VPN
        """
        return pulumi.get(self, "external_syslog_server_vpn")

    @external_syslog_server_vpn.setter
    def external_syslog_server_vpn(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "external_syslog_server_vpn", value)


if not MYPY:
    class IpsSignatureListPolicyObjectEntryArgsDict(TypedDict):
        generator_id: NotRequired[pulumi.Input[_builtins.int]]
        """
        Signature generator ID
          - Range: `0`-`4294967295`
        """
        signature_id: NotRequired[pulumi.Input[_builtins.int]]
        """
        Signature ID
          - Range: `0`-`4294967295`
        """
elif False:
    IpsSignatureListPolicyObjectEntryArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class IpsSignatureListPolicyObjectEntryArgs:
    def __init__(__self__, *,
                 generator_id: Optional[pulumi.Input[_builtins.int]] = None,
                 signature_id: Optional[pulumi.Input[_builtins.int]] = None):
        """
        :param pulumi.Input[_builtins.int] generator_id: Signature generator ID
                 - Range: `0`-`4294967295`
        :param pulumi.Input[_builtins.int] signature_id: Signature ID
                 - Range: `0`-`4294967295`
        """
        if generator_id is not None:
            pulumi.set(__self__, "generator_id", generator_id)
        if signature_id is not None:
            pulumi.set(__self__, "signature_id", signature_id)

    @_builtins.property
    @pulumi.getter(name="generatorId")
    def generator_id(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        Signature generator ID
          - Range: `0`-`4294967295`
        """
        return pulumi.get(self, "generator_id")

    @generator_id.setter
    def generator_id(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "generator_id", value)

    @_builtins.property
    @pulumi.getter(name="signatureId")
    def signature_id(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        Signature ID
          - Range: `0`-`4294967295`
        """
        return pulumi.get(self, "signature_id")

    @signature_id.setter
    def signature_id(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "signature_id", value)


if not MYPY:
    class Ipv4AclPolicyDefinitionSequenceArgsDict(TypedDict):
        id: pulumi.Input[_builtins.int]
        """
        Sequence ID
          - Range: `1`-`65534`
        """
        name: pulumi.Input[_builtins.str]
        """
        Sequence name
        """
        action_entries: NotRequired[pulumi.Input[Sequence[pulumi.Input['Ipv4AclPolicyDefinitionSequenceActionEntryArgsDict']]]]
        """
        List of action entries
        """
        base_action: NotRequired[pulumi.Input[_builtins.str]]
        """
        Base action, either `accept` or `drop`
          - Choices: `accept`, `drop`
        """
        match_entries: NotRequired[pulumi.Input[Sequence[pulumi.Input['Ipv4AclPolicyDefinitionSequenceMatchEntryArgsDict']]]]
        """
        List of match entries
        """
elif False:
    Ipv4AclPolicyDefinitionSequenceArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class Ipv4AclPolicyDefinitionSequenceArgs:
    def __init__(__self__, *,
                 id: pulumi.Input[_builtins.int],
                 name: pulumi.Input[_builtins.str],
                 action_entries: Optional[pulumi.Input[Sequence[pulumi.Input['Ipv4AclPolicyDefinitionSequenceActionEntryArgs']]]] = None,
                 base_action: Optional[pulumi.Input[_builtins.str]] = None,
                 match_entries: Optional[pulumi.Input[Sequence[pulumi.Input['Ipv4AclPolicyDefinitionSequenceMatchEntryArgs']]]] = None):
        """
        :param pulumi.Input[_builtins.int] id: Sequence ID
                 - Range: `1`-`65534`
        :param pulumi.Input[_builtins.str] name: Sequence name
        :param pulumi.Input[Sequence[pulumi.Input['Ipv4AclPolicyDefinitionSequenceActionEntryArgs']]] action_entries: List of action entries
        :param pulumi.Input[_builtins.str] base_action: Base action, either `accept` or `drop`
                 - Choices: `accept`, `drop`
        :param pulumi.Input[Sequence[pulumi.Input['Ipv4AclPolicyDefinitionSequenceMatchEntryArgs']]] match_entries: List of match entries
        """
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "name", name)
        if action_entries is not None:
            pulumi.set(__self__, "action_entries", action_entries)
        if base_action is not None:
            pulumi.set(__self__, "base_action", base_action)
        if match_entries is not None:
            pulumi.set(__self__, "match_entries", match_entries)

    @_builtins.property
    @pulumi.getter
    def id(self) -> pulumi.Input[_builtins.int]:
        """
        Sequence ID
          - Range: `1`-`65534`
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: pulumi.Input[_builtins.int]):
        pulumi.set(self, "id", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> pulumi.Input[_builtins.str]:
        """
        Sequence name
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "name", value)

    @_builtins.property
    @pulumi.getter(name="actionEntries")
    def action_entries(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['Ipv4AclPolicyDefinitionSequenceActionEntryArgs']]]]:
        """
        List of action entries
        """
        return pulumi.get(self, "action_entries")

    @action_entries.setter
    def action_entries(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['Ipv4AclPolicyDefinitionSequenceActionEntryArgs']]]]):
        pulumi.set(self, "action_entries", value)

    @_builtins.property
    @pulumi.getter(name="baseAction")
    def base_action(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Base action, either `accept` or `drop`
          - Choices: `accept`, `drop`
        """
        return pulumi.get(self, "base_action")

    @base_action.setter
    def base_action(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "base_action", value)

    @_builtins.property
    @pulumi.getter(name="matchEntries")
    def match_entries(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['Ipv4AclPolicyDefinitionSequenceMatchEntryArgs']]]]:
        """
        List of match entries
        """
        return pulumi.get(self, "match_entries")

    @match_entries.setter
    def match_entries(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['Ipv4AclPolicyDefinitionSequenceMatchEntryArgs']]]]):
        pulumi.set(self, "match_entries", value)


if not MYPY:
    class Ipv4AclPolicyDefinitionSequenceActionEntryArgsDict(TypedDict):
        type: pulumi.Input[_builtins.str]
        """
        Type of action entry
          - Choices: `class`, `count`, `set`, `log`, `mirror`, `policer`
        """
        class_map_id: NotRequired[pulumi.Input[_builtins.str]]
        """
        Class map ID, Attribute conditional on `type` being equal to `class`
        """
        class_map_version: NotRequired[pulumi.Input[_builtins.int]]
        """
        Class map version
        """
        counter_name: NotRequired[pulumi.Input[_builtins.str]]
        """
        Counter name, Attribute conditional on `type` being equal to `count`
        """
        log: NotRequired[pulumi.Input[_builtins.bool]]
        """
        Enable logging, Attribute conditional on `type` being equal to `log`
        """
        mirror_id: NotRequired[pulumi.Input[_builtins.str]]
        """
        Mirror ID, Attribute conditional on `type` being equal to `mirror`
        """
        mirror_version: NotRequired[pulumi.Input[_builtins.int]]
        """
        Mirror version
        """
        policer_id: NotRequired[pulumi.Input[_builtins.str]]
        """
        Policer ID, Attribute conditional on `type` being equal to `policer`
        """
        policer_version: NotRequired[pulumi.Input[_builtins.int]]
        """
        Policer version
        """
        set_parameters: NotRequired[pulumi.Input[Sequence[pulumi.Input['Ipv4AclPolicyDefinitionSequenceActionEntrySetParameterArgsDict']]]]
        """
        List of set parameters, Attribute conditional on `type` being equal to `set`
        """
elif False:
    Ipv4AclPolicyDefinitionSequenceActionEntryArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class Ipv4AclPolicyDefinitionSequenceActionEntryArgs:
    def __init__(__self__, *,
                 type: pulumi.Input[_builtins.str],
                 class_map_id: Optional[pulumi.Input[_builtins.str]] = None,
                 class_map_version: Optional[pulumi.Input[_builtins.int]] = None,
                 counter_name: Optional[pulumi.Input[_builtins.str]] = None,
                 log: Optional[pulumi.Input[_builtins.bool]] = None,
                 mirror_id: Optional[pulumi.Input[_builtins.str]] = None,
                 mirror_version: Optional[pulumi.Input[_builtins.int]] = None,
                 policer_id: Optional[pulumi.Input[_builtins.str]] = None,
                 policer_version: Optional[pulumi.Input[_builtins.int]] = None,
                 set_parameters: Optional[pulumi.Input[Sequence[pulumi.Input['Ipv4AclPolicyDefinitionSequenceActionEntrySetParameterArgs']]]] = None):
        """
        :param pulumi.Input[_builtins.str] type: Type of action entry
                 - Choices: `class`, `count`, `set`, `log`, `mirror`, `policer`
        :param pulumi.Input[_builtins.str] class_map_id: Class map ID, Attribute conditional on `type` being equal to `class`
        :param pulumi.Input[_builtins.int] class_map_version: Class map version
        :param pulumi.Input[_builtins.str] counter_name: Counter name, Attribute conditional on `type` being equal to `count`
        :param pulumi.Input[_builtins.bool] log: Enable logging, Attribute conditional on `type` being equal to `log`
        :param pulumi.Input[_builtins.str] mirror_id: Mirror ID, Attribute conditional on `type` being equal to `mirror`
        :param pulumi.Input[_builtins.int] mirror_version: Mirror version
        :param pulumi.Input[_builtins.str] policer_id: Policer ID, Attribute conditional on `type` being equal to `policer`
        :param pulumi.Input[_builtins.int] policer_version: Policer version
        :param pulumi.Input[Sequence[pulumi.Input['Ipv4AclPolicyDefinitionSequenceActionEntrySetParameterArgs']]] set_parameters: List of set parameters, Attribute conditional on `type` being equal to `set`
        """
        pulumi.set(__self__, "type", type)
        if class_map_id is not None:
            pulumi.set(__self__, "class_map_id", class_map_id)
        if class_map_version is not None:
            pulumi.set(__self__, "class_map_version", class_map_version)
        if counter_name is not None:
            pulumi.set(__self__, "counter_name", counter_name)
        if log is not None:
            pulumi.set(__self__, "log", log)
        if mirror_id is not None:
            pulumi.set(__self__, "mirror_id", mirror_id)
        if mirror_version is not None:
            pulumi.set(__self__, "mirror_version", mirror_version)
        if policer_id is not None:
            pulumi.set(__self__, "policer_id", policer_id)
        if policer_version is not None:
            pulumi.set(__self__, "policer_version", policer_version)
        if set_parameters is not None:
            pulumi.set(__self__, "set_parameters", set_parameters)

    @_builtins.property
    @pulumi.getter
    def type(self) -> pulumi.Input[_builtins.str]:
        """
        Type of action entry
          - Choices: `class`, `count`, `set`, `log`, `mirror`, `policer`
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "type", value)

    @_builtins.property
    @pulumi.getter(name="classMapId")
    def class_map_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Class map ID, Attribute conditional on `type` being equal to `class`
        """
        return pulumi.get(self, "class_map_id")

    @class_map_id.setter
    def class_map_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "class_map_id", value)

    @_builtins.property
    @pulumi.getter(name="classMapVersion")
    def class_map_version(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        Class map version
        """
        return pulumi.get(self, "class_map_version")

    @class_map_version.setter
    def class_map_version(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "class_map_version", value)

    @_builtins.property
    @pulumi.getter(name="counterName")
    def counter_name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Counter name, Attribute conditional on `type` being equal to `count`
        """
        return pulumi.get(self, "counter_name")

    @counter_name.setter
    def counter_name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "counter_name", value)

    @_builtins.property
    @pulumi.getter
    def log(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Enable logging, Attribute conditional on `type` being equal to `log`
        """
        return pulumi.get(self, "log")

    @log.setter
    def log(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "log", value)

    @_builtins.property
    @pulumi.getter(name="mirrorId")
    def mirror_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Mirror ID, Attribute conditional on `type` being equal to `mirror`
        """
        return pulumi.get(self, "mirror_id")

    @mirror_id.setter
    def mirror_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "mirror_id", value)

    @_builtins.property
    @pulumi.getter(name="mirrorVersion")
    def mirror_version(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        Mirror version
        """
        return pulumi.get(self, "mirror_version")

    @mirror_version.setter
    def mirror_version(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "mirror_version", value)

    @_builtins.property
    @pulumi.getter(name="policerId")
    def policer_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Policer ID, Attribute conditional on `type` being equal to `policer`
        """
        return pulumi.get(self, "policer_id")

    @policer_id.setter
    def policer_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "policer_id", value)

    @_builtins.property
    @pulumi.getter(name="policerVersion")
    def policer_version(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        Policer version
        """
        return pulumi.get(self, "policer_version")

    @policer_version.setter
    def policer_version(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "policer_version", value)

    @_builtins.property
    @pulumi.getter(name="setParameters")
    def set_parameters(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['Ipv4AclPolicyDefinitionSequenceActionEntrySetParameterArgs']]]]:
        """
        List of set parameters, Attribute conditional on `type` being equal to `set`
        """
        return pulumi.get(self, "set_parameters")

    @set_parameters.setter
    def set_parameters(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['Ipv4AclPolicyDefinitionSequenceActionEntrySetParameterArgs']]]]):
        pulumi.set(self, "set_parameters", value)


if not MYPY:
    class Ipv4AclPolicyDefinitionSequenceActionEntrySetParameterArgsDict(TypedDict):
        type: pulumi.Input[_builtins.str]
        """
        Type of set parameter
          - Choices: `dscp`, `nextHop`
        """
        dscp: NotRequired[pulumi.Input[_builtins.int]]
        """
        DSCP value, Attribute conditional on `type` being equal to `dscp`
          - Range: `0`-`63`
        """
        next_hop: NotRequired[pulumi.Input[_builtins.str]]
        """
        Next hop IP, Attribute conditional on `type` being equal to `nextHop`
        """
elif False:
    Ipv4AclPolicyDefinitionSequenceActionEntrySetParameterArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class Ipv4AclPolicyDefinitionSequenceActionEntrySetParameterArgs:
    def __init__(__self__, *,
                 type: pulumi.Input[_builtins.str],
                 dscp: Optional[pulumi.Input[_builtins.int]] = None,
                 next_hop: Optional[pulumi.Input[_builtins.str]] = None):
        """
        :param pulumi.Input[_builtins.str] type: Type of set parameter
                 - Choices: `dscp`, `nextHop`
        :param pulumi.Input[_builtins.int] dscp: DSCP value, Attribute conditional on `type` being equal to `dscp`
                 - Range: `0`-`63`
        :param pulumi.Input[_builtins.str] next_hop: Next hop IP, Attribute conditional on `type` being equal to `nextHop`
        """
        pulumi.set(__self__, "type", type)
        if dscp is not None:
            pulumi.set(__self__, "dscp", dscp)
        if next_hop is not None:
            pulumi.set(__self__, "next_hop", next_hop)

    @_builtins.property
    @pulumi.getter
    def type(self) -> pulumi.Input[_builtins.str]:
        """
        Type of set parameter
          - Choices: `dscp`, `nextHop`
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "type", value)

    @_builtins.property
    @pulumi.getter
    def dscp(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        DSCP value, Attribute conditional on `type` being equal to `dscp`
          - Range: `0`-`63`
        """
        return pulumi.get(self, "dscp")

    @dscp.setter
    def dscp(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "dscp", value)

    @_builtins.property
    @pulumi.getter(name="nextHop")
    def next_hop(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Next hop IP, Attribute conditional on `type` being equal to `nextHop`
        """
        return pulumi.get(self, "next_hop")

    @next_hop.setter
    def next_hop(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "next_hop", value)


if not MYPY:
    class Ipv4AclPolicyDefinitionSequenceMatchEntryArgsDict(TypedDict):
        type: pulumi.Input[_builtins.str]
        """
        Type of match entry
          - Choices: `dscp`, `sourceIp`, `destinationIp`, `class`, `packetLength`, `plp`, `sourcePort`, `destinationPort`, `sourceDataPrefixList`, `destinationDataPrefixList`, `protocol`, `tcp`, `icmpMessage`
        """
        class_map_id: NotRequired[pulumi.Input[_builtins.str]]
        """
        Class map ID, Attribute conditional on `type` being equal to `class`
        """
        class_map_version: NotRequired[pulumi.Input[_builtins.int]]
        """
        Class map version
        """
        destination_data_ipv4_prefix_list_id: NotRequired[pulumi.Input[_builtins.str]]
        """
        Destination data IPv4 prefix list ID, Attribute conditional on `type` being equal to `destinationDataPrefixList`
        """
        destination_data_ipv4_prefix_list_version: NotRequired[pulumi.Input[_builtins.int]]
        """
        Destination data IPv4 prefix list version
        """
        destination_ip: NotRequired[pulumi.Input[_builtins.str]]
        """
        Destination IP prefix, Attribute conditional on `type` being equal to `destinationIp`
        """
        destination_ip_variable: NotRequired[pulumi.Input[_builtins.str]]
        """
        Destination IP prefix variable, Attribute conditional on `type` being equal to `destinationIp`
        """
        destination_ports: NotRequired[pulumi.Input[_builtins.str]]
        """
        Destination ports. Single value (0-65535) or ranges separated by spaces., Attribute conditional on `type` being equal to `destinationPort`
        """
        dscp: NotRequired[pulumi.Input[_builtins.str]]
        """
        DSCP value, Attribute conditional on `type` being equal to `dscp`
        """
        icmp_message: NotRequired[pulumi.Input[_builtins.str]]
        """
        ICMP Message, Attribute conditional on `type` being equal to `icmpMessage`
        """
        packet_length: NotRequired[pulumi.Input[_builtins.int]]
        """
        Packet length, Attribute conditional on `type` being equal to `packetLength`
          - Range: `0`-`65535`
        """
        priority: NotRequired[pulumi.Input[_builtins.str]]
        """
        PLP - priority, Attribute conditional on `type` being equal to `plp`
          - Choices: `high`, `low`
        """
        protocol: NotRequired[pulumi.Input[_builtins.str]]
        """
        Single value (0-255) or multiple values separated by spaces, Attribute conditional on `type` being equal to `protocol`
        """
        source_data_ipv4_prefix_list_id: NotRequired[pulumi.Input[_builtins.str]]
        """
        Source data IPv4 prefix list ID, Attribute conditional on `type` being equal to `sourceDataPrefixList`
        """
        source_data_ipv4_prefix_list_version: NotRequired[pulumi.Input[_builtins.int]]
        """
        Source data IPv4 prefix list version
        """
        source_ip: NotRequired[pulumi.Input[_builtins.str]]
        """
        Source IP prefix, Attribute conditional on `type` being equal to `sourceIp`
        """
        source_ip_variable: NotRequired[pulumi.Input[_builtins.str]]
        """
        Source IP prefix variable, Attribute conditional on `type` being equal to `sourceIp`
        """
        source_ports: NotRequired[pulumi.Input[_builtins.str]]
        """
        Source ports. Single value (0-65535) or ranges separated by spaces., Attribute conditional on `type` being equal to `sourcePort`
        """
        tcp: NotRequired[pulumi.Input[_builtins.str]]
        """
        TCP parameters, Attribute conditional on `type` being equal to `tcp`
          - Choices: `syn`
        """
elif False:
    Ipv4AclPolicyDefinitionSequenceMatchEntryArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class Ipv4AclPolicyDefinitionSequenceMatchEntryArgs:
    def __init__(__self__, *,
                 type: pulumi.Input[_builtins.str],
                 class_map_id: Optional[pulumi.Input[_builtins.str]] = None,
                 class_map_version: Optional[pulumi.Input[_builtins.int]] = None,
                 destination_data_ipv4_prefix_list_id: Optional[pulumi.Input[_builtins.str]] = None,
                 destination_data_ipv4_prefix_list_version: Optional[pulumi.Input[_builtins.int]] = None,
                 destination_ip: Optional[pulumi.Input[_builtins.str]] = None,
                 destination_ip_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 destination_ports: Optional[pulumi.Input[_builtins.str]] = None,
                 dscp: Optional[pulumi.Input[_builtins.str]] = None,
                 icmp_message: Optional[pulumi.Input[_builtins.str]] = None,
                 packet_length: Optional[pulumi.Input[_builtins.int]] = None,
                 priority: Optional[pulumi.Input[_builtins.str]] = None,
                 protocol: Optional[pulumi.Input[_builtins.str]] = None,
                 source_data_ipv4_prefix_list_id: Optional[pulumi.Input[_builtins.str]] = None,
                 source_data_ipv4_prefix_list_version: Optional[pulumi.Input[_builtins.int]] = None,
                 source_ip: Optional[pulumi.Input[_builtins.str]] = None,
                 source_ip_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 source_ports: Optional[pulumi.Input[_builtins.str]] = None,
                 tcp: Optional[pulumi.Input[_builtins.str]] = None):
        """
        :param pulumi.Input[_builtins.str] type: Type of match entry
                 - Choices: `dscp`, `sourceIp`, `destinationIp`, `class`, `packetLength`, `plp`, `sourcePort`, `destinationPort`, `sourceDataPrefixList`, `destinationDataPrefixList`, `protocol`, `tcp`, `icmpMessage`
        :param pulumi.Input[_builtins.str] class_map_id: Class map ID, Attribute conditional on `type` being equal to `class`
        :param pulumi.Input[_builtins.int] class_map_version: Class map version
        :param pulumi.Input[_builtins.str] destination_data_ipv4_prefix_list_id: Destination data IPv4 prefix list ID, Attribute conditional on `type` being equal to `destinationDataPrefixList`
        :param pulumi.Input[_builtins.int] destination_data_ipv4_prefix_list_version: Destination data IPv4 prefix list version
        :param pulumi.Input[_builtins.str] destination_ip: Destination IP prefix, Attribute conditional on `type` being equal to `destinationIp`
        :param pulumi.Input[_builtins.str] destination_ip_variable: Destination IP prefix variable, Attribute conditional on `type` being equal to `destinationIp`
        :param pulumi.Input[_builtins.str] destination_ports: Destination ports. Single value (0-65535) or ranges separated by spaces., Attribute conditional on `type` being equal to `destinationPort`
        :param pulumi.Input[_builtins.str] dscp: DSCP value, Attribute conditional on `type` being equal to `dscp`
        :param pulumi.Input[_builtins.str] icmp_message: ICMP Message, Attribute conditional on `type` being equal to `icmpMessage`
        :param pulumi.Input[_builtins.int] packet_length: Packet length, Attribute conditional on `type` being equal to `packetLength`
                 - Range: `0`-`65535`
        :param pulumi.Input[_builtins.str] priority: PLP - priority, Attribute conditional on `type` being equal to `plp`
                 - Choices: `high`, `low`
        :param pulumi.Input[_builtins.str] protocol: Single value (0-255) or multiple values separated by spaces, Attribute conditional on `type` being equal to `protocol`
        :param pulumi.Input[_builtins.str] source_data_ipv4_prefix_list_id: Source data IPv4 prefix list ID, Attribute conditional on `type` being equal to `sourceDataPrefixList`
        :param pulumi.Input[_builtins.int] source_data_ipv4_prefix_list_version: Source data IPv4 prefix list version
        :param pulumi.Input[_builtins.str] source_ip: Source IP prefix, Attribute conditional on `type` being equal to `sourceIp`
        :param pulumi.Input[_builtins.str] source_ip_variable: Source IP prefix variable, Attribute conditional on `type` being equal to `sourceIp`
        :param pulumi.Input[_builtins.str] source_ports: Source ports. Single value (0-65535) or ranges separated by spaces., Attribute conditional on `type` being equal to `sourcePort`
        :param pulumi.Input[_builtins.str] tcp: TCP parameters, Attribute conditional on `type` being equal to `tcp`
                 - Choices: `syn`
        """
        pulumi.set(__self__, "type", type)
        if class_map_id is not None:
            pulumi.set(__self__, "class_map_id", class_map_id)
        if class_map_version is not None:
            pulumi.set(__self__, "class_map_version", class_map_version)
        if destination_data_ipv4_prefix_list_id is not None:
            pulumi.set(__self__, "destination_data_ipv4_prefix_list_id", destination_data_ipv4_prefix_list_id)
        if destination_data_ipv4_prefix_list_version is not None:
            pulumi.set(__self__, "destination_data_ipv4_prefix_list_version", destination_data_ipv4_prefix_list_version)
        if destination_ip is not None:
            pulumi.set(__self__, "destination_ip", destination_ip)
        if destination_ip_variable is not None:
            pulumi.set(__self__, "destination_ip_variable", destination_ip_variable)
        if destination_ports is not None:
            pulumi.set(__self__, "destination_ports", destination_ports)
        if dscp is not None:
            pulumi.set(__self__, "dscp", dscp)
        if icmp_message is not None:
            pulumi.set(__self__, "icmp_message", icmp_message)
        if packet_length is not None:
            pulumi.set(__self__, "packet_length", packet_length)
        if priority is not None:
            pulumi.set(__self__, "priority", priority)
        if protocol is not None:
            pulumi.set(__self__, "protocol", protocol)
        if source_data_ipv4_prefix_list_id is not None:
            pulumi.set(__self__, "source_data_ipv4_prefix_list_id", source_data_ipv4_prefix_list_id)
        if source_data_ipv4_prefix_list_version is not None:
            pulumi.set(__self__, "source_data_ipv4_prefix_list_version", source_data_ipv4_prefix_list_version)
        if source_ip is not None:
            pulumi.set(__self__, "source_ip", source_ip)
        if source_ip_variable is not None:
            pulumi.set(__self__, "source_ip_variable", source_ip_variable)
        if source_ports is not None:
            pulumi.set(__self__, "source_ports", source_ports)
        if tcp is not None:
            pulumi.set(__self__, "tcp", tcp)

    @_builtins.property
    @pulumi.getter
    def type(self) -> pulumi.Input[_builtins.str]:
        """
        Type of match entry
          - Choices: `dscp`, `sourceIp`, `destinationIp`, `class`, `packetLength`, `plp`, `sourcePort`, `destinationPort`, `sourceDataPrefixList`, `destinationDataPrefixList`, `protocol`, `tcp`, `icmpMessage`
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "type", value)

    @_builtins.property
    @pulumi.getter(name="classMapId")
    def class_map_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Class map ID, Attribute conditional on `type` being equal to `class`
        """
        return pulumi.get(self, "class_map_id")

    @class_map_id.setter
    def class_map_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "class_map_id", value)

    @_builtins.property
    @pulumi.getter(name="classMapVersion")
    def class_map_version(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        Class map version
        """
        return pulumi.get(self, "class_map_version")

    @class_map_version.setter
    def class_map_version(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "class_map_version", value)

    @_builtins.property
    @pulumi.getter(name="destinationDataIpv4PrefixListId")
    def destination_data_ipv4_prefix_list_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Destination data IPv4 prefix list ID, Attribute conditional on `type` being equal to `destinationDataPrefixList`
        """
        return pulumi.get(self, "destination_data_ipv4_prefix_list_id")

    @destination_data_ipv4_prefix_list_id.setter
    def destination_data_ipv4_prefix_list_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "destination_data_ipv4_prefix_list_id", value)

    @_builtins.property
    @pulumi.getter(name="destinationDataIpv4PrefixListVersion")
    def destination_data_ipv4_prefix_list_version(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        Destination data IPv4 prefix list version
        """
        return pulumi.get(self, "destination_data_ipv4_prefix_list_version")

    @destination_data_ipv4_prefix_list_version.setter
    def destination_data_ipv4_prefix_list_version(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "destination_data_ipv4_prefix_list_version", value)

    @_builtins.property
    @pulumi.getter(name="destinationIp")
    def destination_ip(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Destination IP prefix, Attribute conditional on `type` being equal to `destinationIp`
        """
        return pulumi.get(self, "destination_ip")

    @destination_ip.setter
    def destination_ip(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "destination_ip", value)

    @_builtins.property
    @pulumi.getter(name="destinationIpVariable")
    def destination_ip_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Destination IP prefix variable, Attribute conditional on `type` being equal to `destinationIp`
        """
        return pulumi.get(self, "destination_ip_variable")

    @destination_ip_variable.setter
    def destination_ip_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "destination_ip_variable", value)

    @_builtins.property
    @pulumi.getter(name="destinationPorts")
    def destination_ports(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Destination ports. Single value (0-65535) or ranges separated by spaces., Attribute conditional on `type` being equal to `destinationPort`
        """
        return pulumi.get(self, "destination_ports")

    @destination_ports.setter
    def destination_ports(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "destination_ports", value)

    @_builtins.property
    @pulumi.getter
    def dscp(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        DSCP value, Attribute conditional on `type` being equal to `dscp`
        """
        return pulumi.get(self, "dscp")

    @dscp.setter
    def dscp(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "dscp", value)

    @_builtins.property
    @pulumi.getter(name="icmpMessage")
    def icmp_message(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        ICMP Message, Attribute conditional on `type` being equal to `icmpMessage`
        """
        return pulumi.get(self, "icmp_message")

    @icmp_message.setter
    def icmp_message(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "icmp_message", value)

    @_builtins.property
    @pulumi.getter(name="packetLength")
    def packet_length(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        Packet length, Attribute conditional on `type` being equal to `packetLength`
          - Range: `0`-`65535`
        """
        return pulumi.get(self, "packet_length")

    @packet_length.setter
    def packet_length(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "packet_length", value)

    @_builtins.property
    @pulumi.getter
    def priority(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        PLP - priority, Attribute conditional on `type` being equal to `plp`
          - Choices: `high`, `low`
        """
        return pulumi.get(self, "priority")

    @priority.setter
    def priority(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "priority", value)

    @_builtins.property
    @pulumi.getter
    def protocol(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Single value (0-255) or multiple values separated by spaces, Attribute conditional on `type` being equal to `protocol`
        """
        return pulumi.get(self, "protocol")

    @protocol.setter
    def protocol(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "protocol", value)

    @_builtins.property
    @pulumi.getter(name="sourceDataIpv4PrefixListId")
    def source_data_ipv4_prefix_list_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Source data IPv4 prefix list ID, Attribute conditional on `type` being equal to `sourceDataPrefixList`
        """
        return pulumi.get(self, "source_data_ipv4_prefix_list_id")

    @source_data_ipv4_prefix_list_id.setter
    def source_data_ipv4_prefix_list_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "source_data_ipv4_prefix_list_id", value)

    @_builtins.property
    @pulumi.getter(name="sourceDataIpv4PrefixListVersion")
    def source_data_ipv4_prefix_list_version(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        Source data IPv4 prefix list version
        """
        return pulumi.get(self, "source_data_ipv4_prefix_list_version")

    @source_data_ipv4_prefix_list_version.setter
    def source_data_ipv4_prefix_list_version(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "source_data_ipv4_prefix_list_version", value)

    @_builtins.property
    @pulumi.getter(name="sourceIp")
    def source_ip(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Source IP prefix, Attribute conditional on `type` being equal to `sourceIp`
        """
        return pulumi.get(self, "source_ip")

    @source_ip.setter
    def source_ip(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "source_ip", value)

    @_builtins.property
    @pulumi.getter(name="sourceIpVariable")
    def source_ip_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Source IP prefix variable, Attribute conditional on `type` being equal to `sourceIp`
        """
        return pulumi.get(self, "source_ip_variable")

    @source_ip_variable.setter
    def source_ip_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "source_ip_variable", value)

    @_builtins.property
    @pulumi.getter(name="sourcePorts")
    def source_ports(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Source ports. Single value (0-65535) or ranges separated by spaces., Attribute conditional on `type` being equal to `sourcePort`
        """
        return pulumi.get(self, "source_ports")

    @source_ports.setter
    def source_ports(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "source_ports", value)

    @_builtins.property
    @pulumi.getter
    def tcp(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        TCP parameters, Attribute conditional on `type` being equal to `tcp`
          - Choices: `syn`
        """
        return pulumi.get(self, "tcp")

    @tcp.setter
    def tcp(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "tcp", value)


if not MYPY:
    class Ipv4DeviceAclPolicyDefinitionSequenceArgsDict(TypedDict):
        id: pulumi.Input[_builtins.int]
        """
        Sequence ID
          - Range: `1`-`65534`
        """
        name: pulumi.Input[_builtins.str]
        """
        Sequence name
        """
        action_entries: NotRequired[pulumi.Input[Sequence[pulumi.Input['Ipv4DeviceAclPolicyDefinitionSequenceActionEntryArgsDict']]]]
        """
        List of action entries
        """
        base_action: NotRequired[pulumi.Input[_builtins.str]]
        """
        Base action, either `accept` or `drop`
          - Choices: `accept`, `drop`
        """
        match_entries: NotRequired[pulumi.Input[Sequence[pulumi.Input['Ipv4DeviceAclPolicyDefinitionSequenceMatchEntryArgsDict']]]]
        """
        List of match entries
        """
elif False:
    Ipv4DeviceAclPolicyDefinitionSequenceArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class Ipv4DeviceAclPolicyDefinitionSequenceArgs:
    def __init__(__self__, *,
                 id: pulumi.Input[_builtins.int],
                 name: pulumi.Input[_builtins.str],
                 action_entries: Optional[pulumi.Input[Sequence[pulumi.Input['Ipv4DeviceAclPolicyDefinitionSequenceActionEntryArgs']]]] = None,
                 base_action: Optional[pulumi.Input[_builtins.str]] = None,
                 match_entries: Optional[pulumi.Input[Sequence[pulumi.Input['Ipv4DeviceAclPolicyDefinitionSequenceMatchEntryArgs']]]] = None):
        """
        :param pulumi.Input[_builtins.int] id: Sequence ID
                 - Range: `1`-`65534`
        :param pulumi.Input[_builtins.str] name: Sequence name
        :param pulumi.Input[Sequence[pulumi.Input['Ipv4DeviceAclPolicyDefinitionSequenceActionEntryArgs']]] action_entries: List of action entries
        :param pulumi.Input[_builtins.str] base_action: Base action, either `accept` or `drop`
                 - Choices: `accept`, `drop`
        :param pulumi.Input[Sequence[pulumi.Input['Ipv4DeviceAclPolicyDefinitionSequenceMatchEntryArgs']]] match_entries: List of match entries
        """
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "name", name)
        if action_entries is not None:
            pulumi.set(__self__, "action_entries", action_entries)
        if base_action is not None:
            pulumi.set(__self__, "base_action", base_action)
        if match_entries is not None:
            pulumi.set(__self__, "match_entries", match_entries)

    @_builtins.property
    @pulumi.getter
    def id(self) -> pulumi.Input[_builtins.int]:
        """
        Sequence ID
          - Range: `1`-`65534`
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: pulumi.Input[_builtins.int]):
        pulumi.set(self, "id", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> pulumi.Input[_builtins.str]:
        """
        Sequence name
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "name", value)

    @_builtins.property
    @pulumi.getter(name="actionEntries")
    def action_entries(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['Ipv4DeviceAclPolicyDefinitionSequenceActionEntryArgs']]]]:
        """
        List of action entries
        """
        return pulumi.get(self, "action_entries")

    @action_entries.setter
    def action_entries(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['Ipv4DeviceAclPolicyDefinitionSequenceActionEntryArgs']]]]):
        pulumi.set(self, "action_entries", value)

    @_builtins.property
    @pulumi.getter(name="baseAction")
    def base_action(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Base action, either `accept` or `drop`
          - Choices: `accept`, `drop`
        """
        return pulumi.get(self, "base_action")

    @base_action.setter
    def base_action(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "base_action", value)

    @_builtins.property
    @pulumi.getter(name="matchEntries")
    def match_entries(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['Ipv4DeviceAclPolicyDefinitionSequenceMatchEntryArgs']]]]:
        """
        List of match entries
        """
        return pulumi.get(self, "match_entries")

    @match_entries.setter
    def match_entries(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['Ipv4DeviceAclPolicyDefinitionSequenceMatchEntryArgs']]]]):
        pulumi.set(self, "match_entries", value)


if not MYPY:
    class Ipv4DeviceAclPolicyDefinitionSequenceActionEntryArgsDict(TypedDict):
        type: pulumi.Input[_builtins.str]
        """
        Type of action entry
          - Choices: `count`
        """
        counter_name: NotRequired[pulumi.Input[_builtins.str]]
        """
        Counter name, Attribute conditional on `type` being equal to `count`
        """
elif False:
    Ipv4DeviceAclPolicyDefinitionSequenceActionEntryArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class Ipv4DeviceAclPolicyDefinitionSequenceActionEntryArgs:
    def __init__(__self__, *,
                 type: pulumi.Input[_builtins.str],
                 counter_name: Optional[pulumi.Input[_builtins.str]] = None):
        """
        :param pulumi.Input[_builtins.str] type: Type of action entry
                 - Choices: `count`
        :param pulumi.Input[_builtins.str] counter_name: Counter name, Attribute conditional on `type` being equal to `count`
        """
        pulumi.set(__self__, "type", type)
        if counter_name is not None:
            pulumi.set(__self__, "counter_name", counter_name)

    @_builtins.property
    @pulumi.getter
    def type(self) -> pulumi.Input[_builtins.str]:
        """
        Type of action entry
          - Choices: `count`
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "type", value)

    @_builtins.property
    @pulumi.getter(name="counterName")
    def counter_name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Counter name, Attribute conditional on `type` being equal to `count`
        """
        return pulumi.get(self, "counter_name")

    @counter_name.setter
    def counter_name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "counter_name", value)


if not MYPY:
    class Ipv4DeviceAclPolicyDefinitionSequenceMatchEntryArgsDict(TypedDict):
        type: pulumi.Input[_builtins.str]
        """
        Type of match entry
          - Choices: `sourceIp`, `destinationIp`, `sourcePort`, `destinationPort`, `sourceDataPrefixList`, `destinationDataPrefixList`
        """
        destination_data_ipv4_prefix_list_id: NotRequired[pulumi.Input[_builtins.str]]
        """
        Destination data IPv4 prefix list ID, Attribute conditional on `type` being equal to `destinationDataPrefixList`
        """
        destination_data_ipv4_prefix_list_version: NotRequired[pulumi.Input[_builtins.int]]
        """
        Destination data IPv4 prefix list version
        """
        destination_ip: NotRequired[pulumi.Input[_builtins.str]]
        """
        Destination IP prefix, Attribute conditional on `type` being equal to `destinationIp`
        """
        destination_ip_variable: NotRequired[pulumi.Input[_builtins.str]]
        """
        Destination IP prefix variable, Attribute conditional on `type` being equal to `destinationIp`
        """
        destination_port: NotRequired[pulumi.Input[_builtins.int]]
        """
        Destination port, only `22` and `161` supported, Attribute conditional on `type` being equal to `destinationPort`
          - Range: `0`-`65535`
        """
        source_data_ipv4_prefix_list_id: NotRequired[pulumi.Input[_builtins.str]]
        """
        Source data IPv4 prefix list ID, Attribute conditional on `type` being equal to `sourceDataPrefixList`
        """
        source_data_ipv4_prefix_list_version: NotRequired[pulumi.Input[_builtins.int]]
        """
        Source data IPv4 prefix list version
        """
        source_ip: NotRequired[pulumi.Input[_builtins.str]]
        """
        Source IP prefix, Attribute conditional on `type` being equal to `sourceIp`
        """
        source_ip_variable: NotRequired[pulumi.Input[_builtins.str]]
        """
        Source IP prefix variable, Attribute conditional on `type` being equal to `sourceIp`
        """
        source_ports: NotRequired[pulumi.Input[_builtins.str]]
        """
        Source ports. Single value (0-65535) or ranges separated by spaces., Attribute conditional on `type` being equal to `sourcePort`
        """
elif False:
    Ipv4DeviceAclPolicyDefinitionSequenceMatchEntryArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class Ipv4DeviceAclPolicyDefinitionSequenceMatchEntryArgs:
    def __init__(__self__, *,
                 type: pulumi.Input[_builtins.str],
                 destination_data_ipv4_prefix_list_id: Optional[pulumi.Input[_builtins.str]] = None,
                 destination_data_ipv4_prefix_list_version: Optional[pulumi.Input[_builtins.int]] = None,
                 destination_ip: Optional[pulumi.Input[_builtins.str]] = None,
                 destination_ip_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 destination_port: Optional[pulumi.Input[_builtins.int]] = None,
                 source_data_ipv4_prefix_list_id: Optional[pulumi.Input[_builtins.str]] = None,
                 source_data_ipv4_prefix_list_version: Optional[pulumi.Input[_builtins.int]] = None,
                 source_ip: Optional[pulumi.Input[_builtins.str]] = None,
                 source_ip_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 source_ports: Optional[pulumi.Input[_builtins.str]] = None):
        """
        :param pulumi.Input[_builtins.str] type: Type of match entry
                 - Choices: `sourceIp`, `destinationIp`, `sourcePort`, `destinationPort`, `sourceDataPrefixList`, `destinationDataPrefixList`
        :param pulumi.Input[_builtins.str] destination_data_ipv4_prefix_list_id: Destination data IPv4 prefix list ID, Attribute conditional on `type` being equal to `destinationDataPrefixList`
        :param pulumi.Input[_builtins.int] destination_data_ipv4_prefix_list_version: Destination data IPv4 prefix list version
        :param pulumi.Input[_builtins.str] destination_ip: Destination IP prefix, Attribute conditional on `type` being equal to `destinationIp`
        :param pulumi.Input[_builtins.str] destination_ip_variable: Destination IP prefix variable, Attribute conditional on `type` being equal to `destinationIp`
        :param pulumi.Input[_builtins.int] destination_port: Destination port, only `22` and `161` supported, Attribute conditional on `type` being equal to `destinationPort`
                 - Range: `0`-`65535`
        :param pulumi.Input[_builtins.str] source_data_ipv4_prefix_list_id: Source data IPv4 prefix list ID, Attribute conditional on `type` being equal to `sourceDataPrefixList`
        :param pulumi.Input[_builtins.int] source_data_ipv4_prefix_list_version: Source data IPv4 prefix list version
        :param pulumi.Input[_builtins.str] source_ip: Source IP prefix, Attribute conditional on `type` being equal to `sourceIp`
        :param pulumi.Input[_builtins.str] source_ip_variable: Source IP prefix variable, Attribute conditional on `type` being equal to `sourceIp`
        :param pulumi.Input[_builtins.str] source_ports: Source ports. Single value (0-65535) or ranges separated by spaces., Attribute conditional on `type` being equal to `sourcePort`
        """
        pulumi.set(__self__, "type", type)
        if destination_data_ipv4_prefix_list_id is not None:
            pulumi.set(__self__, "destination_data_ipv4_prefix_list_id", destination_data_ipv4_prefix_list_id)
        if destination_data_ipv4_prefix_list_version is not None:
            pulumi.set(__self__, "destination_data_ipv4_prefix_list_version", destination_data_ipv4_prefix_list_version)
        if destination_ip is not None:
            pulumi.set(__self__, "destination_ip", destination_ip)
        if destination_ip_variable is not None:
            pulumi.set(__self__, "destination_ip_variable", destination_ip_variable)
        if destination_port is not None:
            pulumi.set(__self__, "destination_port", destination_port)
        if source_data_ipv4_prefix_list_id is not None:
            pulumi.set(__self__, "source_data_ipv4_prefix_list_id", source_data_ipv4_prefix_list_id)
        if source_data_ipv4_prefix_list_version is not None:
            pulumi.set(__self__, "source_data_ipv4_prefix_list_version", source_data_ipv4_prefix_list_version)
        if source_ip is not None:
            pulumi.set(__self__, "source_ip", source_ip)
        if source_ip_variable is not None:
            pulumi.set(__self__, "source_ip_variable", source_ip_variable)
        if source_ports is not None:
            pulumi.set(__self__, "source_ports", source_ports)

    @_builtins.property
    @pulumi.getter
    def type(self) -> pulumi.Input[_builtins.str]:
        """
        Type of match entry
          - Choices: `sourceIp`, `destinationIp`, `sourcePort`, `destinationPort`, `sourceDataPrefixList`, `destinationDataPrefixList`
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "type", value)

    @_builtins.property
    @pulumi.getter(name="destinationDataIpv4PrefixListId")
    def destination_data_ipv4_prefix_list_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Destination data IPv4 prefix list ID, Attribute conditional on `type` being equal to `destinationDataPrefixList`
        """
        return pulumi.get(self, "destination_data_ipv4_prefix_list_id")

    @destination_data_ipv4_prefix_list_id.setter
    def destination_data_ipv4_prefix_list_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "destination_data_ipv4_prefix_list_id", value)

    @_builtins.property
    @pulumi.getter(name="destinationDataIpv4PrefixListVersion")
    def destination_data_ipv4_prefix_list_version(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        Destination data IPv4 prefix list version
        """
        return pulumi.get(self, "destination_data_ipv4_prefix_list_version")

    @destination_data_ipv4_prefix_list_version.setter
    def destination_data_ipv4_prefix_list_version(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "destination_data_ipv4_prefix_list_version", value)

    @_builtins.property
    @pulumi.getter(name="destinationIp")
    def destination_ip(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Destination IP prefix, Attribute conditional on `type` being equal to `destinationIp`
        """
        return pulumi.get(self, "destination_ip")

    @destination_ip.setter
    def destination_ip(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "destination_ip", value)

    @_builtins.property
    @pulumi.getter(name="destinationIpVariable")
    def destination_ip_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Destination IP prefix variable, Attribute conditional on `type` being equal to `destinationIp`
        """
        return pulumi.get(self, "destination_ip_variable")

    @destination_ip_variable.setter
    def destination_ip_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "destination_ip_variable", value)

    @_builtins.property
    @pulumi.getter(name="destinationPort")
    def destination_port(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        Destination port, only `22` and `161` supported, Attribute conditional on `type` being equal to `destinationPort`
          - Range: `0`-`65535`
        """
        return pulumi.get(self, "destination_port")

    @destination_port.setter
    def destination_port(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "destination_port", value)

    @_builtins.property
    @pulumi.getter(name="sourceDataIpv4PrefixListId")
    def source_data_ipv4_prefix_list_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Source data IPv4 prefix list ID, Attribute conditional on `type` being equal to `sourceDataPrefixList`
        """
        return pulumi.get(self, "source_data_ipv4_prefix_list_id")

    @source_data_ipv4_prefix_list_id.setter
    def source_data_ipv4_prefix_list_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "source_data_ipv4_prefix_list_id", value)

    @_builtins.property
    @pulumi.getter(name="sourceDataIpv4PrefixListVersion")
    def source_data_ipv4_prefix_list_version(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        Source data IPv4 prefix list version
        """
        return pulumi.get(self, "source_data_ipv4_prefix_list_version")

    @source_data_ipv4_prefix_list_version.setter
    def source_data_ipv4_prefix_list_version(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "source_data_ipv4_prefix_list_version", value)

    @_builtins.property
    @pulumi.getter(name="sourceIp")
    def source_ip(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Source IP prefix, Attribute conditional on `type` being equal to `sourceIp`
        """
        return pulumi.get(self, "source_ip")

    @source_ip.setter
    def source_ip(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "source_ip", value)

    @_builtins.property
    @pulumi.getter(name="sourceIpVariable")
    def source_ip_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Source IP prefix variable, Attribute conditional on `type` being equal to `sourceIp`
        """
        return pulumi.get(self, "source_ip_variable")

    @source_ip_variable.setter
    def source_ip_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "source_ip_variable", value)

    @_builtins.property
    @pulumi.getter(name="sourcePorts")
    def source_ports(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Source ports. Single value (0-65535) or ranges separated by spaces., Attribute conditional on `type` being equal to `sourcePort`
        """
        return pulumi.get(self, "source_ports")

    @source_ports.setter
    def source_ports(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "source_ports", value)


if not MYPY:
    class Ipv4PrefixListPolicyObjectEntryArgsDict(TypedDict):
        prefix: pulumi.Input[_builtins.str]
        """
        IP prefix list entry e.g., `10.0.0.0/12`
        """
        ge: NotRequired[pulumi.Input[_builtins.int]]
        """
        Greater equal
        """
        le: NotRequired[pulumi.Input[_builtins.int]]
        """
        Lesser equal
        """
elif False:
    Ipv4PrefixListPolicyObjectEntryArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class Ipv4PrefixListPolicyObjectEntryArgs:
    def __init__(__self__, *,
                 prefix: pulumi.Input[_builtins.str],
                 ge: Optional[pulumi.Input[_builtins.int]] = None,
                 le: Optional[pulumi.Input[_builtins.int]] = None):
        """
        :param pulumi.Input[_builtins.str] prefix: IP prefix list entry e.g., `10.0.0.0/12`
        :param pulumi.Input[_builtins.int] ge: Greater equal
        :param pulumi.Input[_builtins.int] le: Lesser equal
        """
        pulumi.set(__self__, "prefix", prefix)
        if ge is not None:
            pulumi.set(__self__, "ge", ge)
        if le is not None:
            pulumi.set(__self__, "le", le)

    @_builtins.property
    @pulumi.getter
    def prefix(self) -> pulumi.Input[_builtins.str]:
        """
        IP prefix list entry e.g., `10.0.0.0/12`
        """
        return pulumi.get(self, "prefix")

    @prefix.setter
    def prefix(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "prefix", value)

    @_builtins.property
    @pulumi.getter
    def ge(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        Greater equal
        """
        return pulumi.get(self, "ge")

    @ge.setter
    def ge(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "ge", value)

    @_builtins.property
    @pulumi.getter
    def le(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        Lesser equal
        """
        return pulumi.get(self, "le")

    @le.setter
    def le(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "le", value)


if not MYPY:
    class Ipv6AclPolicyDefinitionSequenceArgsDict(TypedDict):
        id: pulumi.Input[_builtins.int]
        """
        Sequence ID
          - Range: `1`-`65534`
        """
        name: pulumi.Input[_builtins.str]
        """
        Sequence name
        """
        action_entries: NotRequired[pulumi.Input[Sequence[pulumi.Input['Ipv6AclPolicyDefinitionSequenceActionEntryArgsDict']]]]
        """
        List of action entries
        """
        base_action: NotRequired[pulumi.Input[_builtins.str]]
        """
        Base action, either `accept` or `drop`
          - Choices: `accept`, `drop`
        """
        match_entries: NotRequired[pulumi.Input[Sequence[pulumi.Input['Ipv6AclPolicyDefinitionSequenceMatchEntryArgsDict']]]]
        """
        List of match entries
        """
elif False:
    Ipv6AclPolicyDefinitionSequenceArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class Ipv6AclPolicyDefinitionSequenceArgs:
    def __init__(__self__, *,
                 id: pulumi.Input[_builtins.int],
                 name: pulumi.Input[_builtins.str],
                 action_entries: Optional[pulumi.Input[Sequence[pulumi.Input['Ipv6AclPolicyDefinitionSequenceActionEntryArgs']]]] = None,
                 base_action: Optional[pulumi.Input[_builtins.str]] = None,
                 match_entries: Optional[pulumi.Input[Sequence[pulumi.Input['Ipv6AclPolicyDefinitionSequenceMatchEntryArgs']]]] = None):
        """
        :param pulumi.Input[_builtins.int] id: Sequence ID
                 - Range: `1`-`65534`
        :param pulumi.Input[_builtins.str] name: Sequence name
        :param pulumi.Input[Sequence[pulumi.Input['Ipv6AclPolicyDefinitionSequenceActionEntryArgs']]] action_entries: List of action entries
        :param pulumi.Input[_builtins.str] base_action: Base action, either `accept` or `drop`
                 - Choices: `accept`, `drop`
        :param pulumi.Input[Sequence[pulumi.Input['Ipv6AclPolicyDefinitionSequenceMatchEntryArgs']]] match_entries: List of match entries
        """
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "name", name)
        if action_entries is not None:
            pulumi.set(__self__, "action_entries", action_entries)
        if base_action is not None:
            pulumi.set(__self__, "base_action", base_action)
        if match_entries is not None:
            pulumi.set(__self__, "match_entries", match_entries)

    @_builtins.property
    @pulumi.getter
    def id(self) -> pulumi.Input[_builtins.int]:
        """
        Sequence ID
          - Range: `1`-`65534`
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: pulumi.Input[_builtins.int]):
        pulumi.set(self, "id", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> pulumi.Input[_builtins.str]:
        """
        Sequence name
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "name", value)

    @_builtins.property
    @pulumi.getter(name="actionEntries")
    def action_entries(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['Ipv6AclPolicyDefinitionSequenceActionEntryArgs']]]]:
        """
        List of action entries
        """
        return pulumi.get(self, "action_entries")

    @action_entries.setter
    def action_entries(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['Ipv6AclPolicyDefinitionSequenceActionEntryArgs']]]]):
        pulumi.set(self, "action_entries", value)

    @_builtins.property
    @pulumi.getter(name="baseAction")
    def base_action(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Base action, either `accept` or `drop`
          - Choices: `accept`, `drop`
        """
        return pulumi.get(self, "base_action")

    @base_action.setter
    def base_action(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "base_action", value)

    @_builtins.property
    @pulumi.getter(name="matchEntries")
    def match_entries(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['Ipv6AclPolicyDefinitionSequenceMatchEntryArgs']]]]:
        """
        List of match entries
        """
        return pulumi.get(self, "match_entries")

    @match_entries.setter
    def match_entries(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['Ipv6AclPolicyDefinitionSequenceMatchEntryArgs']]]]):
        pulumi.set(self, "match_entries", value)


if not MYPY:
    class Ipv6AclPolicyDefinitionSequenceActionEntryArgsDict(TypedDict):
        type: pulumi.Input[_builtins.str]
        """
        Type of action entry
          - Choices: `class`, `count`, `set`, `log`, `mirror`, `policer`
        """
        class_map_id: NotRequired[pulumi.Input[_builtins.str]]
        """
        Class map ID, Attribute conditional on `type` being equal to `class`
        """
        class_map_version: NotRequired[pulumi.Input[_builtins.int]]
        """
        Class map version
        """
        counter_name: NotRequired[pulumi.Input[_builtins.str]]
        """
        Counter name, Attribute conditional on `type` being equal to `count`
        """
        log: NotRequired[pulumi.Input[_builtins.bool]]
        """
        Enable logging, Attribute conditional on `type` being equal to `log`
        """
        mirror_id: NotRequired[pulumi.Input[_builtins.str]]
        """
        Mirror ID, Attribute conditional on `type` being equal to `mirror`
        """
        mirror_version: NotRequired[pulumi.Input[_builtins.int]]
        """
        Mirror version
        """
        policer_id: NotRequired[pulumi.Input[_builtins.str]]
        """
        Policer ID, Attribute conditional on `type` being equal to `policer`
        """
        policer_version: NotRequired[pulumi.Input[_builtins.int]]
        """
        Policer version
        """
        set_parameters: NotRequired[pulumi.Input[Sequence[pulumi.Input['Ipv6AclPolicyDefinitionSequenceActionEntrySetParameterArgsDict']]]]
        """
        List of set parameters, Attribute conditional on `type` being equal to `set`
        """
elif False:
    Ipv6AclPolicyDefinitionSequenceActionEntryArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class Ipv6AclPolicyDefinitionSequenceActionEntryArgs:
    def __init__(__self__, *,
                 type: pulumi.Input[_builtins.str],
                 class_map_id: Optional[pulumi.Input[_builtins.str]] = None,
                 class_map_version: Optional[pulumi.Input[_builtins.int]] = None,
                 counter_name: Optional[pulumi.Input[_builtins.str]] = None,
                 log: Optional[pulumi.Input[_builtins.bool]] = None,
                 mirror_id: Optional[pulumi.Input[_builtins.str]] = None,
                 mirror_version: Optional[pulumi.Input[_builtins.int]] = None,
                 policer_id: Optional[pulumi.Input[_builtins.str]] = None,
                 policer_version: Optional[pulumi.Input[_builtins.int]] = None,
                 set_parameters: Optional[pulumi.Input[Sequence[pulumi.Input['Ipv6AclPolicyDefinitionSequenceActionEntrySetParameterArgs']]]] = None):
        """
        :param pulumi.Input[_builtins.str] type: Type of action entry
                 - Choices: `class`, `count`, `set`, `log`, `mirror`, `policer`
        :param pulumi.Input[_builtins.str] class_map_id: Class map ID, Attribute conditional on `type` being equal to `class`
        :param pulumi.Input[_builtins.int] class_map_version: Class map version
        :param pulumi.Input[_builtins.str] counter_name: Counter name, Attribute conditional on `type` being equal to `count`
        :param pulumi.Input[_builtins.bool] log: Enable logging, Attribute conditional on `type` being equal to `log`
        :param pulumi.Input[_builtins.str] mirror_id: Mirror ID, Attribute conditional on `type` being equal to `mirror`
        :param pulumi.Input[_builtins.int] mirror_version: Mirror version
        :param pulumi.Input[_builtins.str] policer_id: Policer ID, Attribute conditional on `type` being equal to `policer`
        :param pulumi.Input[_builtins.int] policer_version: Policer version
        :param pulumi.Input[Sequence[pulumi.Input['Ipv6AclPolicyDefinitionSequenceActionEntrySetParameterArgs']]] set_parameters: List of set parameters, Attribute conditional on `type` being equal to `set`
        """
        pulumi.set(__self__, "type", type)
        if class_map_id is not None:
            pulumi.set(__self__, "class_map_id", class_map_id)
        if class_map_version is not None:
            pulumi.set(__self__, "class_map_version", class_map_version)
        if counter_name is not None:
            pulumi.set(__self__, "counter_name", counter_name)
        if log is not None:
            pulumi.set(__self__, "log", log)
        if mirror_id is not None:
            pulumi.set(__self__, "mirror_id", mirror_id)
        if mirror_version is not None:
            pulumi.set(__self__, "mirror_version", mirror_version)
        if policer_id is not None:
            pulumi.set(__self__, "policer_id", policer_id)
        if policer_version is not None:
            pulumi.set(__self__, "policer_version", policer_version)
        if set_parameters is not None:
            pulumi.set(__self__, "set_parameters", set_parameters)

    @_builtins.property
    @pulumi.getter
    def type(self) -> pulumi.Input[_builtins.str]:
        """
        Type of action entry
          - Choices: `class`, `count`, `set`, `log`, `mirror`, `policer`
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "type", value)

    @_builtins.property
    @pulumi.getter(name="classMapId")
    def class_map_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Class map ID, Attribute conditional on `type` being equal to `class`
        """
        return pulumi.get(self, "class_map_id")

    @class_map_id.setter
    def class_map_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "class_map_id", value)

    @_builtins.property
    @pulumi.getter(name="classMapVersion")
    def class_map_version(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        Class map version
        """
        return pulumi.get(self, "class_map_version")

    @class_map_version.setter
    def class_map_version(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "class_map_version", value)

    @_builtins.property
    @pulumi.getter(name="counterName")
    def counter_name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Counter name, Attribute conditional on `type` being equal to `count`
        """
        return pulumi.get(self, "counter_name")

    @counter_name.setter
    def counter_name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "counter_name", value)

    @_builtins.property
    @pulumi.getter
    def log(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Enable logging, Attribute conditional on `type` being equal to `log`
        """
        return pulumi.get(self, "log")

    @log.setter
    def log(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "log", value)

    @_builtins.property
    @pulumi.getter(name="mirrorId")
    def mirror_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Mirror ID, Attribute conditional on `type` being equal to `mirror`
        """
        return pulumi.get(self, "mirror_id")

    @mirror_id.setter
    def mirror_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "mirror_id", value)

    @_builtins.property
    @pulumi.getter(name="mirrorVersion")
    def mirror_version(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        Mirror version
        """
        return pulumi.get(self, "mirror_version")

    @mirror_version.setter
    def mirror_version(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "mirror_version", value)

    @_builtins.property
    @pulumi.getter(name="policerId")
    def policer_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Policer ID, Attribute conditional on `type` being equal to `policer`
        """
        return pulumi.get(self, "policer_id")

    @policer_id.setter
    def policer_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "policer_id", value)

    @_builtins.property
    @pulumi.getter(name="policerVersion")
    def policer_version(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        Policer version
        """
        return pulumi.get(self, "policer_version")

    @policer_version.setter
    def policer_version(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "policer_version", value)

    @_builtins.property
    @pulumi.getter(name="setParameters")
    def set_parameters(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['Ipv6AclPolicyDefinitionSequenceActionEntrySetParameterArgs']]]]:
        """
        List of set parameters, Attribute conditional on `type` being equal to `set`
        """
        return pulumi.get(self, "set_parameters")

    @set_parameters.setter
    def set_parameters(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['Ipv6AclPolicyDefinitionSequenceActionEntrySetParameterArgs']]]]):
        pulumi.set(self, "set_parameters", value)


if not MYPY:
    class Ipv6AclPolicyDefinitionSequenceActionEntrySetParameterArgsDict(TypedDict):
        type: pulumi.Input[_builtins.str]
        """
        Type of set parameter
          - Choices: `trafficClass`, `nextHop`
        """
        next_hop: NotRequired[pulumi.Input[_builtins.str]]
        """
        Next hop IP, Attribute conditional on `type` being equal to `nextHop`
        """
        traffic_class: NotRequired[pulumi.Input[_builtins.int]]
        """
        Traffic class, Attribute conditional on `type` being equal to `trafficClass`
          - Range: `0`-`63`
        """
elif False:
    Ipv6AclPolicyDefinitionSequenceActionEntrySetParameterArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class Ipv6AclPolicyDefinitionSequenceActionEntrySetParameterArgs:
    def __init__(__self__, *,
                 type: pulumi.Input[_builtins.str],
                 next_hop: Optional[pulumi.Input[_builtins.str]] = None,
                 traffic_class: Optional[pulumi.Input[_builtins.int]] = None):
        """
        :param pulumi.Input[_builtins.str] type: Type of set parameter
                 - Choices: `trafficClass`, `nextHop`
        :param pulumi.Input[_builtins.str] next_hop: Next hop IP, Attribute conditional on `type` being equal to `nextHop`
        :param pulumi.Input[_builtins.int] traffic_class: Traffic class, Attribute conditional on `type` being equal to `trafficClass`
                 - Range: `0`-`63`
        """
        pulumi.set(__self__, "type", type)
        if next_hop is not None:
            pulumi.set(__self__, "next_hop", next_hop)
        if traffic_class is not None:
            pulumi.set(__self__, "traffic_class", traffic_class)

    @_builtins.property
    @pulumi.getter
    def type(self) -> pulumi.Input[_builtins.str]:
        """
        Type of set parameter
          - Choices: `trafficClass`, `nextHop`
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "type", value)

    @_builtins.property
    @pulumi.getter(name="nextHop")
    def next_hop(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Next hop IP, Attribute conditional on `type` being equal to `nextHop`
        """
        return pulumi.get(self, "next_hop")

    @next_hop.setter
    def next_hop(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "next_hop", value)

    @_builtins.property
    @pulumi.getter(name="trafficClass")
    def traffic_class(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        Traffic class, Attribute conditional on `type` being equal to `trafficClass`
          - Range: `0`-`63`
        """
        return pulumi.get(self, "traffic_class")

    @traffic_class.setter
    def traffic_class(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "traffic_class", value)


if not MYPY:
    class Ipv6AclPolicyDefinitionSequenceMatchEntryArgsDict(TypedDict):
        type: pulumi.Input[_builtins.str]
        """
        Type of match entry
          - Choices: `nextHeader`, `sourceIpv6`, `destinationIpv6`, `class`, `packetLength`, `plp`, `sourcePort`, `destinationPort`, `sourceDataIpv6PrefixList`, `destinationDataIpv6PrefixList`, `tcp`, `trafficClass`
        """
        class_map_id: NotRequired[pulumi.Input[_builtins.str]]
        """
        Class map ID, Attribute conditional on `type` being equal to `class`
        """
        class_map_version: NotRequired[pulumi.Input[_builtins.int]]
        """
        Class map version
        """
        destination_data_ipv6_prefix_list_id: NotRequired[pulumi.Input[_builtins.str]]
        """
        Destination dataIPv6 prefix list ID, Attribute conditional on `type` being equal to `destinationDataIpv6PrefixList`
        """
        destination_data_ipv6_prefix_list_version: NotRequired[pulumi.Input[_builtins.int]]
        """
        Destination data prefix list version
        """
        destination_ip: NotRequired[pulumi.Input[_builtins.str]]
        """
        Destination IPv6 prefix, Attribute conditional on `type` being equal to `destinationIpv6`
        """
        destination_ports: NotRequired[pulumi.Input[_builtins.str]]
        """
        Destination ports. Single value (0-65535) or ranges separated by spaces., Attribute conditional on `type` being equal to `destinationPort`
        """
        next_header: NotRequired[pulumi.Input[_builtins.int]]
        """
        Next header, Attribute conditional on `type` being equal to `nextHeader`
          - Range: `0`-`255`
        """
        packet_length: NotRequired[pulumi.Input[_builtins.int]]
        """
        Packet length, Attribute conditional on `type` being equal to `packetLength`
          - Range: `0`-`65535`
        """
        priority: NotRequired[pulumi.Input[_builtins.str]]
        """
        PLP - priority, Attribute conditional on `type` being equal to `plp`
          - Choices: `high`, `low`
        """
        source_data_ipv6_prefix_list_id: NotRequired[pulumi.Input[_builtins.str]]
        """
        Source data IPv6 prefix list ID, Attribute conditional on `type` being equal to `sourceDataIpv6PrefixList`
        """
        source_data_ipv6_prefix_list_version: NotRequired[pulumi.Input[_builtins.int]]
        """
        Source data IPv6 prefix list version
        """
        source_ip: NotRequired[pulumi.Input[_builtins.str]]
        """
        Source IPv6 prefix, Attribute conditional on `type` being equal to `sourceIpv6`
        """
        source_ports: NotRequired[pulumi.Input[_builtins.str]]
        """
        Source ports. Single value (0-65535) or ranges separated by spaces., Attribute conditional on `type` being equal to `sourcePort`
        """
        tcp: NotRequired[pulumi.Input[_builtins.str]]
        """
        TCP parameters, Attribute conditional on `type` being equal to `tcp`
          - Choices: `syn`
        """
        traffic_class: NotRequired[pulumi.Input[_builtins.int]]
        """
        Traffic class, Attribute conditional on `type` being equal to `trafficClass`
          - Range: `0`-`63`
        """
elif False:
    Ipv6AclPolicyDefinitionSequenceMatchEntryArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class Ipv6AclPolicyDefinitionSequenceMatchEntryArgs:
    def __init__(__self__, *,
                 type: pulumi.Input[_builtins.str],
                 class_map_id: Optional[pulumi.Input[_builtins.str]] = None,
                 class_map_version: Optional[pulumi.Input[_builtins.int]] = None,
                 destination_data_ipv6_prefix_list_id: Optional[pulumi.Input[_builtins.str]] = None,
                 destination_data_ipv6_prefix_list_version: Optional[pulumi.Input[_builtins.int]] = None,
                 destination_ip: Optional[pulumi.Input[_builtins.str]] = None,
                 destination_ports: Optional[pulumi.Input[_builtins.str]] = None,
                 next_header: Optional[pulumi.Input[_builtins.int]] = None,
                 packet_length: Optional[pulumi.Input[_builtins.int]] = None,
                 priority: Optional[pulumi.Input[_builtins.str]] = None,
                 source_data_ipv6_prefix_list_id: Optional[pulumi.Input[_builtins.str]] = None,
                 source_data_ipv6_prefix_list_version: Optional[pulumi.Input[_builtins.int]] = None,
                 source_ip: Optional[pulumi.Input[_builtins.str]] = None,
                 source_ports: Optional[pulumi.Input[_builtins.str]] = None,
                 tcp: Optional[pulumi.Input[_builtins.str]] = None,
                 traffic_class: Optional[pulumi.Input[_builtins.int]] = None):
        """
        :param pulumi.Input[_builtins.str] type: Type of match entry
                 - Choices: `nextHeader`, `sourceIpv6`, `destinationIpv6`, `class`, `packetLength`, `plp`, `sourcePort`, `destinationPort`, `sourceDataIpv6PrefixList`, `destinationDataIpv6PrefixList`, `tcp`, `trafficClass`
        :param pulumi.Input[_builtins.str] class_map_id: Class map ID, Attribute conditional on `type` being equal to `class`
        :param pulumi.Input[_builtins.int] class_map_version: Class map version
        :param pulumi.Input[_builtins.str] destination_data_ipv6_prefix_list_id: Destination dataIPv6 prefix list ID, Attribute conditional on `type` being equal to `destinationDataIpv6PrefixList`
        :param pulumi.Input[_builtins.int] destination_data_ipv6_prefix_list_version: Destination data prefix list version
        :param pulumi.Input[_builtins.str] destination_ip: Destination IPv6 prefix, Attribute conditional on `type` being equal to `destinationIpv6`
        :param pulumi.Input[_builtins.str] destination_ports: Destination ports. Single value (0-65535) or ranges separated by spaces., Attribute conditional on `type` being equal to `destinationPort`
        :param pulumi.Input[_builtins.int] next_header: Next header, Attribute conditional on `type` being equal to `nextHeader`
                 - Range: `0`-`255`
        :param pulumi.Input[_builtins.int] packet_length: Packet length, Attribute conditional on `type` being equal to `packetLength`
                 - Range: `0`-`65535`
        :param pulumi.Input[_builtins.str] priority: PLP - priority, Attribute conditional on `type` being equal to `plp`
                 - Choices: `high`, `low`
        :param pulumi.Input[_builtins.str] source_data_ipv6_prefix_list_id: Source data IPv6 prefix list ID, Attribute conditional on `type` being equal to `sourceDataIpv6PrefixList`
        :param pulumi.Input[_builtins.int] source_data_ipv6_prefix_list_version: Source data IPv6 prefix list version
        :param pulumi.Input[_builtins.str] source_ip: Source IPv6 prefix, Attribute conditional on `type` being equal to `sourceIpv6`
        :param pulumi.Input[_builtins.str] source_ports: Source ports. Single value (0-65535) or ranges separated by spaces., Attribute conditional on `type` being equal to `sourcePort`
        :param pulumi.Input[_builtins.str] tcp: TCP parameters, Attribute conditional on `type` being equal to `tcp`
                 - Choices: `syn`
        :param pulumi.Input[_builtins.int] traffic_class: Traffic class, Attribute conditional on `type` being equal to `trafficClass`
                 - Range: `0`-`63`
        """
        pulumi.set(__self__, "type", type)
        if class_map_id is not None:
            pulumi.set(__self__, "class_map_id", class_map_id)
        if class_map_version is not None:
            pulumi.set(__self__, "class_map_version", class_map_version)
        if destination_data_ipv6_prefix_list_id is not None:
            pulumi.set(__self__, "destination_data_ipv6_prefix_list_id", destination_data_ipv6_prefix_list_id)
        if destination_data_ipv6_prefix_list_version is not None:
            pulumi.set(__self__, "destination_data_ipv6_prefix_list_version", destination_data_ipv6_prefix_list_version)
        if destination_ip is not None:
            pulumi.set(__self__, "destination_ip", destination_ip)
        if destination_ports is not None:
            pulumi.set(__self__, "destination_ports", destination_ports)
        if next_header is not None:
            pulumi.set(__self__, "next_header", next_header)
        if packet_length is not None:
            pulumi.set(__self__, "packet_length", packet_length)
        if priority is not None:
            pulumi.set(__self__, "priority", priority)
        if source_data_ipv6_prefix_list_id is not None:
            pulumi.set(__self__, "source_data_ipv6_prefix_list_id", source_data_ipv6_prefix_list_id)
        if source_data_ipv6_prefix_list_version is not None:
            pulumi.set(__self__, "source_data_ipv6_prefix_list_version", source_data_ipv6_prefix_list_version)
        if source_ip is not None:
            pulumi.set(__self__, "source_ip", source_ip)
        if source_ports is not None:
            pulumi.set(__self__, "source_ports", source_ports)
        if tcp is not None:
            pulumi.set(__self__, "tcp", tcp)
        if traffic_class is not None:
            pulumi.set(__self__, "traffic_class", traffic_class)

    @_builtins.property
    @pulumi.getter
    def type(self) -> pulumi.Input[_builtins.str]:
        """
        Type of match entry
          - Choices: `nextHeader`, `sourceIpv6`, `destinationIpv6`, `class`, `packetLength`, `plp`, `sourcePort`, `destinationPort`, `sourceDataIpv6PrefixList`, `destinationDataIpv6PrefixList`, `tcp`, `trafficClass`
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "type", value)

    @_builtins.property
    @pulumi.getter(name="classMapId")
    def class_map_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Class map ID, Attribute conditional on `type` being equal to `class`
        """
        return pulumi.get(self, "class_map_id")

    @class_map_id.setter
    def class_map_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "class_map_id", value)

    @_builtins.property
    @pulumi.getter(name="classMapVersion")
    def class_map_version(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        Class map version
        """
        return pulumi.get(self, "class_map_version")

    @class_map_version.setter
    def class_map_version(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "class_map_version", value)

    @_builtins.property
    @pulumi.getter(name="destinationDataIpv6PrefixListId")
    def destination_data_ipv6_prefix_list_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Destination dataIPv6 prefix list ID, Attribute conditional on `type` being equal to `destinationDataIpv6PrefixList`
        """
        return pulumi.get(self, "destination_data_ipv6_prefix_list_id")

    @destination_data_ipv6_prefix_list_id.setter
    def destination_data_ipv6_prefix_list_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "destination_data_ipv6_prefix_list_id", value)

    @_builtins.property
    @pulumi.getter(name="destinationDataIpv6PrefixListVersion")
    def destination_data_ipv6_prefix_list_version(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        Destination data prefix list version
        """
        return pulumi.get(self, "destination_data_ipv6_prefix_list_version")

    @destination_data_ipv6_prefix_list_version.setter
    def destination_data_ipv6_prefix_list_version(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "destination_data_ipv6_prefix_list_version", value)

    @_builtins.property
    @pulumi.getter(name="destinationIp")
    def destination_ip(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Destination IPv6 prefix, Attribute conditional on `type` being equal to `destinationIpv6`
        """
        return pulumi.get(self, "destination_ip")

    @destination_ip.setter
    def destination_ip(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "destination_ip", value)

    @_builtins.property
    @pulumi.getter(name="destinationPorts")
    def destination_ports(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Destination ports. Single value (0-65535) or ranges separated by spaces., Attribute conditional on `type` being equal to `destinationPort`
        """
        return pulumi.get(self, "destination_ports")

    @destination_ports.setter
    def destination_ports(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "destination_ports", value)

    @_builtins.property
    @pulumi.getter(name="nextHeader")
    def next_header(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        Next header, Attribute conditional on `type` being equal to `nextHeader`
          - Range: `0`-`255`
        """
        return pulumi.get(self, "next_header")

    @next_header.setter
    def next_header(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "next_header", value)

    @_builtins.property
    @pulumi.getter(name="packetLength")
    def packet_length(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        Packet length, Attribute conditional on `type` being equal to `packetLength`
          - Range: `0`-`65535`
        """
        return pulumi.get(self, "packet_length")

    @packet_length.setter
    def packet_length(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "packet_length", value)

    @_builtins.property
    @pulumi.getter
    def priority(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        PLP - priority, Attribute conditional on `type` being equal to `plp`
          - Choices: `high`, `low`
        """
        return pulumi.get(self, "priority")

    @priority.setter
    def priority(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "priority", value)

    @_builtins.property
    @pulumi.getter(name="sourceDataIpv6PrefixListId")
    def source_data_ipv6_prefix_list_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Source data IPv6 prefix list ID, Attribute conditional on `type` being equal to `sourceDataIpv6PrefixList`
        """
        return pulumi.get(self, "source_data_ipv6_prefix_list_id")

    @source_data_ipv6_prefix_list_id.setter
    def source_data_ipv6_prefix_list_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "source_data_ipv6_prefix_list_id", value)

    @_builtins.property
    @pulumi.getter(name="sourceDataIpv6PrefixListVersion")
    def source_data_ipv6_prefix_list_version(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        Source data IPv6 prefix list version
        """
        return pulumi.get(self, "source_data_ipv6_prefix_list_version")

    @source_data_ipv6_prefix_list_version.setter
    def source_data_ipv6_prefix_list_version(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "source_data_ipv6_prefix_list_version", value)

    @_builtins.property
    @pulumi.getter(name="sourceIp")
    def source_ip(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Source IPv6 prefix, Attribute conditional on `type` being equal to `sourceIpv6`
        """
        return pulumi.get(self, "source_ip")

    @source_ip.setter
    def source_ip(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "source_ip", value)

    @_builtins.property
    @pulumi.getter(name="sourcePorts")
    def source_ports(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Source ports. Single value (0-65535) or ranges separated by spaces., Attribute conditional on `type` being equal to `sourcePort`
        """
        return pulumi.get(self, "source_ports")

    @source_ports.setter
    def source_ports(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "source_ports", value)

    @_builtins.property
    @pulumi.getter
    def tcp(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        TCP parameters, Attribute conditional on `type` being equal to `tcp`
          - Choices: `syn`
        """
        return pulumi.get(self, "tcp")

    @tcp.setter
    def tcp(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "tcp", value)

    @_builtins.property
    @pulumi.getter(name="trafficClass")
    def traffic_class(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        Traffic class, Attribute conditional on `type` being equal to `trafficClass`
          - Range: `0`-`63`
        """
        return pulumi.get(self, "traffic_class")

    @traffic_class.setter
    def traffic_class(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "traffic_class", value)


if not MYPY:
    class Ipv6DeviceAclPolicyDefinitionSequenceArgsDict(TypedDict):
        id: pulumi.Input[_builtins.int]
        """
        Sequence ID
          - Range: `1`-`65534`
        """
        name: pulumi.Input[_builtins.str]
        """
        Sequence name
        """
        action_entries: NotRequired[pulumi.Input[Sequence[pulumi.Input['Ipv6DeviceAclPolicyDefinitionSequenceActionEntryArgsDict']]]]
        """
        List of action entries
        """
        base_action: NotRequired[pulumi.Input[_builtins.str]]
        """
        Base action, either `accept` or `drop`
          - Choices: `accept`, `drop`
        """
        match_entries: NotRequired[pulumi.Input[Sequence[pulumi.Input['Ipv6DeviceAclPolicyDefinitionSequenceMatchEntryArgsDict']]]]
        """
        List of match entries
        """
elif False:
    Ipv6DeviceAclPolicyDefinitionSequenceArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class Ipv6DeviceAclPolicyDefinitionSequenceArgs:
    def __init__(__self__, *,
                 id: pulumi.Input[_builtins.int],
                 name: pulumi.Input[_builtins.str],
                 action_entries: Optional[pulumi.Input[Sequence[pulumi.Input['Ipv6DeviceAclPolicyDefinitionSequenceActionEntryArgs']]]] = None,
                 base_action: Optional[pulumi.Input[_builtins.str]] = None,
                 match_entries: Optional[pulumi.Input[Sequence[pulumi.Input['Ipv6DeviceAclPolicyDefinitionSequenceMatchEntryArgs']]]] = None):
        """
        :param pulumi.Input[_builtins.int] id: Sequence ID
                 - Range: `1`-`65534`
        :param pulumi.Input[_builtins.str] name: Sequence name
        :param pulumi.Input[Sequence[pulumi.Input['Ipv6DeviceAclPolicyDefinitionSequenceActionEntryArgs']]] action_entries: List of action entries
        :param pulumi.Input[_builtins.str] base_action: Base action, either `accept` or `drop`
                 - Choices: `accept`, `drop`
        :param pulumi.Input[Sequence[pulumi.Input['Ipv6DeviceAclPolicyDefinitionSequenceMatchEntryArgs']]] match_entries: List of match entries
        """
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "name", name)
        if action_entries is not None:
            pulumi.set(__self__, "action_entries", action_entries)
        if base_action is not None:
            pulumi.set(__self__, "base_action", base_action)
        if match_entries is not None:
            pulumi.set(__self__, "match_entries", match_entries)

    @_builtins.property
    @pulumi.getter
    def id(self) -> pulumi.Input[_builtins.int]:
        """
        Sequence ID
          - Range: `1`-`65534`
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: pulumi.Input[_builtins.int]):
        pulumi.set(self, "id", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> pulumi.Input[_builtins.str]:
        """
        Sequence name
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "name", value)

    @_builtins.property
    @pulumi.getter(name="actionEntries")
    def action_entries(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['Ipv6DeviceAclPolicyDefinitionSequenceActionEntryArgs']]]]:
        """
        List of action entries
        """
        return pulumi.get(self, "action_entries")

    @action_entries.setter
    def action_entries(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['Ipv6DeviceAclPolicyDefinitionSequenceActionEntryArgs']]]]):
        pulumi.set(self, "action_entries", value)

    @_builtins.property
    @pulumi.getter(name="baseAction")
    def base_action(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Base action, either `accept` or `drop`
          - Choices: `accept`, `drop`
        """
        return pulumi.get(self, "base_action")

    @base_action.setter
    def base_action(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "base_action", value)

    @_builtins.property
    @pulumi.getter(name="matchEntries")
    def match_entries(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['Ipv6DeviceAclPolicyDefinitionSequenceMatchEntryArgs']]]]:
        """
        List of match entries
        """
        return pulumi.get(self, "match_entries")

    @match_entries.setter
    def match_entries(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['Ipv6DeviceAclPolicyDefinitionSequenceMatchEntryArgs']]]]):
        pulumi.set(self, "match_entries", value)


if not MYPY:
    class Ipv6DeviceAclPolicyDefinitionSequenceActionEntryArgsDict(TypedDict):
        type: pulumi.Input[_builtins.str]
        """
        Type of action entry
          - Choices: `count`
        """
        counter_name: NotRequired[pulumi.Input[_builtins.str]]
        """
        Counter name, Attribute conditional on `type` being equal to `count`
        """
elif False:
    Ipv6DeviceAclPolicyDefinitionSequenceActionEntryArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class Ipv6DeviceAclPolicyDefinitionSequenceActionEntryArgs:
    def __init__(__self__, *,
                 type: pulumi.Input[_builtins.str],
                 counter_name: Optional[pulumi.Input[_builtins.str]] = None):
        """
        :param pulumi.Input[_builtins.str] type: Type of action entry
                 - Choices: `count`
        :param pulumi.Input[_builtins.str] counter_name: Counter name, Attribute conditional on `type` being equal to `count`
        """
        pulumi.set(__self__, "type", type)
        if counter_name is not None:
            pulumi.set(__self__, "counter_name", counter_name)

    @_builtins.property
    @pulumi.getter
    def type(self) -> pulumi.Input[_builtins.str]:
        """
        Type of action entry
          - Choices: `count`
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "type", value)

    @_builtins.property
    @pulumi.getter(name="counterName")
    def counter_name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Counter name, Attribute conditional on `type` being equal to `count`
        """
        return pulumi.get(self, "counter_name")

    @counter_name.setter
    def counter_name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "counter_name", value)


if not MYPY:
    class Ipv6DeviceAclPolicyDefinitionSequenceMatchEntryArgsDict(TypedDict):
        type: pulumi.Input[_builtins.str]
        """
        Type of match entry
          - Choices: `sourceIpv6`, `destinationIpv6`, `sourcePort`, `destinationPort`, `sourceDataIpv6PrefixList`, `destinationDataIpv6PrefixList`
        """
        destination_data_ipv6_prefix_list_id: NotRequired[pulumi.Input[_builtins.str]]
        """
        Destination data IPv6 prefix list ID, Attribute conditional on `type` being equal to `destinationDataIpv6PrefixList`
        """
        destination_data_ipv6_prefix_list_version: NotRequired[pulumi.Input[_builtins.int]]
        """
        Destination data IPv6 prefix list version
        """
        destination_ip: NotRequired[pulumi.Input[_builtins.str]]
        """
        Destination IP prefix, Attribute conditional on `type` being equal to `destinationIpv6`
        """
        destination_port: NotRequired[pulumi.Input[_builtins.int]]
        """
        Destination port, only `22` and `161` supported, Attribute conditional on `type` being equal to `destinationPort`
          - Range: `0`-`65535`
        """
        source_data_ipv6_prefix_list_id: NotRequired[pulumi.Input[_builtins.str]]
        """
        Source data IPv6 prefix list ID, Attribute conditional on `type` being equal to `sourceDataIpv6PrefixList`
        """
        source_data_ipv6_prefix_list_version: NotRequired[pulumi.Input[_builtins.int]]
        """
        Source data IPv6 prefix list version
        """
        source_ip: NotRequired[pulumi.Input[_builtins.str]]
        """
        Source IP prefix, Attribute conditional on `type` being equal to `sourceIpv6`
        """
        source_ports: NotRequired[pulumi.Input[_builtins.str]]
        """
        Source ports. Single value (0-65535) or ranges separated by spaces., Attribute conditional on `type` being equal to `sourcePort`
        """
elif False:
    Ipv6DeviceAclPolicyDefinitionSequenceMatchEntryArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class Ipv6DeviceAclPolicyDefinitionSequenceMatchEntryArgs:
    def __init__(__self__, *,
                 type: pulumi.Input[_builtins.str],
                 destination_data_ipv6_prefix_list_id: Optional[pulumi.Input[_builtins.str]] = None,
                 destination_data_ipv6_prefix_list_version: Optional[pulumi.Input[_builtins.int]] = None,
                 destination_ip: Optional[pulumi.Input[_builtins.str]] = None,
                 destination_port: Optional[pulumi.Input[_builtins.int]] = None,
                 source_data_ipv6_prefix_list_id: Optional[pulumi.Input[_builtins.str]] = None,
                 source_data_ipv6_prefix_list_version: Optional[pulumi.Input[_builtins.int]] = None,
                 source_ip: Optional[pulumi.Input[_builtins.str]] = None,
                 source_ports: Optional[pulumi.Input[_builtins.str]] = None):
        """
        :param pulumi.Input[_builtins.str] type: Type of match entry
                 - Choices: `sourceIpv6`, `destinationIpv6`, `sourcePort`, `destinationPort`, `sourceDataIpv6PrefixList`, `destinationDataIpv6PrefixList`
        :param pulumi.Input[_builtins.str] destination_data_ipv6_prefix_list_id: Destination data IPv6 prefix list ID, Attribute conditional on `type` being equal to `destinationDataIpv6PrefixList`
        :param pulumi.Input[_builtins.int] destination_data_ipv6_prefix_list_version: Destination data IPv6 prefix list version
        :param pulumi.Input[_builtins.str] destination_ip: Destination IP prefix, Attribute conditional on `type` being equal to `destinationIpv6`
        :param pulumi.Input[_builtins.int] destination_port: Destination port, only `22` and `161` supported, Attribute conditional on `type` being equal to `destinationPort`
                 - Range: `0`-`65535`
        :param pulumi.Input[_builtins.str] source_data_ipv6_prefix_list_id: Source data IPv6 prefix list ID, Attribute conditional on `type` being equal to `sourceDataIpv6PrefixList`
        :param pulumi.Input[_builtins.int] source_data_ipv6_prefix_list_version: Source data IPv6 prefix list version
        :param pulumi.Input[_builtins.str] source_ip: Source IP prefix, Attribute conditional on `type` being equal to `sourceIpv6`
        :param pulumi.Input[_builtins.str] source_ports: Source ports. Single value (0-65535) or ranges separated by spaces., Attribute conditional on `type` being equal to `sourcePort`
        """
        pulumi.set(__self__, "type", type)
        if destination_data_ipv6_prefix_list_id is not None:
            pulumi.set(__self__, "destination_data_ipv6_prefix_list_id", destination_data_ipv6_prefix_list_id)
        if destination_data_ipv6_prefix_list_version is not None:
            pulumi.set(__self__, "destination_data_ipv6_prefix_list_version", destination_data_ipv6_prefix_list_version)
        if destination_ip is not None:
            pulumi.set(__self__, "destination_ip", destination_ip)
        if destination_port is not None:
            pulumi.set(__self__, "destination_port", destination_port)
        if source_data_ipv6_prefix_list_id is not None:
            pulumi.set(__self__, "source_data_ipv6_prefix_list_id", source_data_ipv6_prefix_list_id)
        if source_data_ipv6_prefix_list_version is not None:
            pulumi.set(__self__, "source_data_ipv6_prefix_list_version", source_data_ipv6_prefix_list_version)
        if source_ip is not None:
            pulumi.set(__self__, "source_ip", source_ip)
        if source_ports is not None:
            pulumi.set(__self__, "source_ports", source_ports)

    @_builtins.property
    @pulumi.getter
    def type(self) -> pulumi.Input[_builtins.str]:
        """
        Type of match entry
          - Choices: `sourceIpv6`, `destinationIpv6`, `sourcePort`, `destinationPort`, `sourceDataIpv6PrefixList`, `destinationDataIpv6PrefixList`
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "type", value)

    @_builtins.property
    @pulumi.getter(name="destinationDataIpv6PrefixListId")
    def destination_data_ipv6_prefix_list_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Destination data IPv6 prefix list ID, Attribute conditional on `type` being equal to `destinationDataIpv6PrefixList`
        """
        return pulumi.get(self, "destination_data_ipv6_prefix_list_id")

    @destination_data_ipv6_prefix_list_id.setter
    def destination_data_ipv6_prefix_list_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "destination_data_ipv6_prefix_list_id", value)

    @_builtins.property
    @pulumi.getter(name="destinationDataIpv6PrefixListVersion")
    def destination_data_ipv6_prefix_list_version(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        Destination data IPv6 prefix list version
        """
        return pulumi.get(self, "destination_data_ipv6_prefix_list_version")

    @destination_data_ipv6_prefix_list_version.setter
    def destination_data_ipv6_prefix_list_version(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "destination_data_ipv6_prefix_list_version", value)

    @_builtins.property
    @pulumi.getter(name="destinationIp")
    def destination_ip(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Destination IP prefix, Attribute conditional on `type` being equal to `destinationIpv6`
        """
        return pulumi.get(self, "destination_ip")

    @destination_ip.setter
    def destination_ip(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "destination_ip", value)

    @_builtins.property
    @pulumi.getter(name="destinationPort")
    def destination_port(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        Destination port, only `22` and `161` supported, Attribute conditional on `type` being equal to `destinationPort`
          - Range: `0`-`65535`
        """
        return pulumi.get(self, "destination_port")

    @destination_port.setter
    def destination_port(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "destination_port", value)

    @_builtins.property
    @pulumi.getter(name="sourceDataIpv6PrefixListId")
    def source_data_ipv6_prefix_list_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Source data IPv6 prefix list ID, Attribute conditional on `type` being equal to `sourceDataIpv6PrefixList`
        """
        return pulumi.get(self, "source_data_ipv6_prefix_list_id")

    @source_data_ipv6_prefix_list_id.setter
    def source_data_ipv6_prefix_list_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "source_data_ipv6_prefix_list_id", value)

    @_builtins.property
    @pulumi.getter(name="sourceDataIpv6PrefixListVersion")
    def source_data_ipv6_prefix_list_version(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        Source data IPv6 prefix list version
        """
        return pulumi.get(self, "source_data_ipv6_prefix_list_version")

    @source_data_ipv6_prefix_list_version.setter
    def source_data_ipv6_prefix_list_version(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "source_data_ipv6_prefix_list_version", value)

    @_builtins.property
    @pulumi.getter(name="sourceIp")
    def source_ip(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Source IP prefix, Attribute conditional on `type` being equal to `sourceIpv6`
        """
        return pulumi.get(self, "source_ip")

    @source_ip.setter
    def source_ip(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "source_ip", value)

    @_builtins.property
    @pulumi.getter(name="sourcePorts")
    def source_ports(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Source ports. Single value (0-65535) or ranges separated by spaces., Attribute conditional on `type` being equal to `sourcePort`
        """
        return pulumi.get(self, "source_ports")

    @source_ports.setter
    def source_ports(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "source_ports", value)


if not MYPY:
    class Ipv6PrefixListPolicyObjectEntryArgsDict(TypedDict):
        prefix: pulumi.Input[_builtins.str]
        """
        IP prefix list entry, e.g. `2001:1:1:2::/64`
        """
        ge: NotRequired[pulumi.Input[_builtins.int]]
        """
        Greater equal
        """
        le: NotRequired[pulumi.Input[_builtins.int]]
        """
        Lesser equal
        """
elif False:
    Ipv6PrefixListPolicyObjectEntryArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class Ipv6PrefixListPolicyObjectEntryArgs:
    def __init__(__self__, *,
                 prefix: pulumi.Input[_builtins.str],
                 ge: Optional[pulumi.Input[_builtins.int]] = None,
                 le: Optional[pulumi.Input[_builtins.int]] = None):
        """
        :param pulumi.Input[_builtins.str] prefix: IP prefix list entry, e.g. `2001:1:1:2::/64`
        :param pulumi.Input[_builtins.int] ge: Greater equal
        :param pulumi.Input[_builtins.int] le: Lesser equal
        """
        pulumi.set(__self__, "prefix", prefix)
        if ge is not None:
            pulumi.set(__self__, "ge", ge)
        if le is not None:
            pulumi.set(__self__, "le", le)

    @_builtins.property
    @pulumi.getter
    def prefix(self) -> pulumi.Input[_builtins.str]:
        """
        IP prefix list entry, e.g. `2001:1:1:2::/64`
        """
        return pulumi.get(self, "prefix")

    @prefix.setter
    def prefix(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "prefix", value)

    @_builtins.property
    @pulumi.getter
    def ge(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        Greater equal
        """
        return pulumi.get(self, "ge")

    @ge.setter
    def ge(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "ge", value)

    @_builtins.property
    @pulumi.getter
    def le(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        Lesser equal
        """
        return pulumi.get(self, "le")

    @le.setter
    def le(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "le", value)


if not MYPY:
    class LocalApplicationListPolicyObjectEntryArgsDict(TypedDict):
        application: NotRequired[pulumi.Input[_builtins.str]]
        """
        Application name
        """
        application_family: NotRequired[pulumi.Input[_builtins.str]]
        """
        Application family name
        """
elif False:
    LocalApplicationListPolicyObjectEntryArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class LocalApplicationListPolicyObjectEntryArgs:
    def __init__(__self__, *,
                 application: Optional[pulumi.Input[_builtins.str]] = None,
                 application_family: Optional[pulumi.Input[_builtins.str]] = None):
        """
        :param pulumi.Input[_builtins.str] application: Application name
        :param pulumi.Input[_builtins.str] application_family: Application family name
        """
        if application is not None:
            pulumi.set(__self__, "application", application)
        if application_family is not None:
            pulumi.set(__self__, "application_family", application_family)

    @_builtins.property
    @pulumi.getter
    def application(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Application name
        """
        return pulumi.get(self, "application")

    @application.setter
    def application(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "application", value)

    @_builtins.property
    @pulumi.getter(name="applicationFamily")
    def application_family(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Application family name
        """
        return pulumi.get(self, "application_family")

    @application_family.setter
    def application_family(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "application_family", value)


if not MYPY:
    class LocalizedPolicyDefinitionArgsDict(TypedDict):
        id: pulumi.Input[_builtins.str]
        """
        Policy definition ID
        """
        type: pulumi.Input[_builtins.str]
        """
        Policy definition type
          - Choices: `qosMap`, `rewriteRule`, `vedgeRoute`, `acl`, `aclv6`, `deviceAccessPolicy`, `deviceAccessPolicyv6`
        """
        version: NotRequired[pulumi.Input[_builtins.int]]
        """
        Policy definition version
        """
elif False:
    LocalizedPolicyDefinitionArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class LocalizedPolicyDefinitionArgs:
    def __init__(__self__, *,
                 id: pulumi.Input[_builtins.str],
                 type: pulumi.Input[_builtins.str],
                 version: Optional[pulumi.Input[_builtins.int]] = None):
        """
        :param pulumi.Input[_builtins.str] id: Policy definition ID
        :param pulumi.Input[_builtins.str] type: Policy definition type
                 - Choices: `qosMap`, `rewriteRule`, `vedgeRoute`, `acl`, `aclv6`, `deviceAccessPolicy`, `deviceAccessPolicyv6`
        :param pulumi.Input[_builtins.int] version: Policy definition version
        """
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "type", type)
        if version is not None:
            pulumi.set(__self__, "version", version)

    @_builtins.property
    @pulumi.getter
    def id(self) -> pulumi.Input[_builtins.str]:
        """
        Policy definition ID
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "id", value)

    @_builtins.property
    @pulumi.getter
    def type(self) -> pulumi.Input[_builtins.str]:
        """
        Policy definition type
          - Choices: `qosMap`, `rewriteRule`, `vedgeRoute`, `acl`, `aclv6`, `deviceAccessPolicy`, `deviceAccessPolicyv6`
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "type", value)

    @_builtins.property
    @pulumi.getter
    def version(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        Policy definition version
        """
        return pulumi.get(self, "version")

    @version.setter
    def version(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "version", value)


if not MYPY:
    class MeshTopologyPolicyDefinitionRegionArgsDict(TypedDict):
        name: pulumi.Input[_builtins.str]
        """
        Region name
        """
        site_list_ids: NotRequired[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]
        """
        Site list IDs
        """
        site_list_versions: NotRequired[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]
        """
        Site list versions
        """
elif False:
    MeshTopologyPolicyDefinitionRegionArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class MeshTopologyPolicyDefinitionRegionArgs:
    def __init__(__self__, *,
                 name: pulumi.Input[_builtins.str],
                 site_list_ids: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 site_list_versions: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None):
        """
        :param pulumi.Input[_builtins.str] name: Region name
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] site_list_ids: Site list IDs
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] site_list_versions: Site list versions
        """
        pulumi.set(__self__, "name", name)
        if site_list_ids is not None:
            pulumi.set(__self__, "site_list_ids", site_list_ids)
        if site_list_versions is not None:
            pulumi.set(__self__, "site_list_versions", site_list_versions)

    @_builtins.property
    @pulumi.getter
    def name(self) -> pulumi.Input[_builtins.str]:
        """
        Region name
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "name", value)

    @_builtins.property
    @pulumi.getter(name="siteListIds")
    def site_list_ids(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]:
        """
        Site list IDs
        """
        return pulumi.get(self, "site_list_ids")

    @site_list_ids.setter
    def site_list_ids(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "site_list_ids", value)

    @_builtins.property
    @pulumi.getter(name="siteListVersions")
    def site_list_versions(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]:
        """
        Site list versions
        """
        return pulumi.get(self, "site_list_versions")

    @site_list_versions.setter
    def site_list_versions(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "site_list_versions", value)


if not MYPY:
    class OtherThousandeyesFeatureVirtualApplicationArgsDict(TypedDict):
        account_group_token: NotRequired[pulumi.Input[_builtins.str]]
        """
        Set the Account Group Token
        """
        account_group_token_variable: NotRequired[pulumi.Input[_builtins.str]]
        """
        Variable name
        """
        agent_default_gateway: NotRequired[pulumi.Input[_builtins.str]]
        """
        Set the Agent default gateway
        """
        agent_default_gateway_variable: NotRequired[pulumi.Input[_builtins.str]]
        """
        Variable name
        """
        hostname: NotRequired[pulumi.Input[_builtins.str]]
        """
        Set the host name
        """
        hostname_variable: NotRequired[pulumi.Input[_builtins.str]]
        """
        Variable name
        """
        management_ip: NotRequired[pulumi.Input[_builtins.str]]
        """
        Set the Agent IP Address
        """
        management_ip_variable: NotRequired[pulumi.Input[_builtins.str]]
        """
        Variable name
        """
        management_subnet_mask: NotRequired[pulumi.Input[_builtins.str]]
        """
        Set the Agent SubnetMask
          - Choices: `255.255.255.255`, `255.255.255.254`, `255.255.255.252`, `255.255.255.248`, `255.255.255.240`, `255.255.255.224`, `255.255.255.192`, `255.255.255.128`, `255.255.255.0`, `255.255.254.0`, `255.255.252.0`, `255.255.248.0`, `255.255.240.0`, `255.255.224.0`, `255.255.192.0`, `255.255.128.0`, `255.255.0.0`, `255.254.0.0`, `255.252.0.0`, `255.240.0.0`, `255.224.0.0`, `255.192.0.0`, `255.128.0.0`, `255.0.0.0`, `254.0.0.0`, `252.0.0.0`, `248.0.0.0`, `240.0.0.0`, `224.0.0.0`, `192.0.0.0`, `128.0.0.0`, `0.0.0.0`
        """
        management_subnet_mask_variable: NotRequired[pulumi.Input[_builtins.str]]
        """
        Variable name
        """
        name_server_ip: NotRequired[pulumi.Input[_builtins.str]]
        """
        Set the name server
        """
        name_server_ip_variable: NotRequired[pulumi.Input[_builtins.str]]
        """
        Variable name
        """
        pac_url: NotRequired[pulumi.Input[_builtins.str]]
        """
        Set the proxy PAC url
        """
        pac_url_variable: NotRequired[pulumi.Input[_builtins.str]]
        """
        Variable name
        """
        proxy_host: NotRequired[pulumi.Input[_builtins.str]]
        """
        Set the Proxy Host
        """
        proxy_host_variable: NotRequired[pulumi.Input[_builtins.str]]
        """
        Variable name
        """
        proxy_port: NotRequired[pulumi.Input[_builtins.int]]
        """
        Set the Proxy Port
          - Range: `1`-`65535`
        """
        proxy_port_variable: NotRequired[pulumi.Input[_builtins.str]]
        """
        Variable name
        """
        proxy_type: NotRequired[pulumi.Input[_builtins.str]]
        """
        Select Web Proxy Type
        """
        vpn: NotRequired[pulumi.Input[_builtins.int]]
        """
        VPN number
          - Range: `0`-`65530`
        """
        vpn_variable: NotRequired[pulumi.Input[_builtins.str]]
        """
        Variable name
        """
elif False:
    OtherThousandeyesFeatureVirtualApplicationArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class OtherThousandeyesFeatureVirtualApplicationArgs:
    def __init__(__self__, *,
                 account_group_token: Optional[pulumi.Input[_builtins.str]] = None,
                 account_group_token_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 agent_default_gateway: Optional[pulumi.Input[_builtins.str]] = None,
                 agent_default_gateway_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 hostname: Optional[pulumi.Input[_builtins.str]] = None,
                 hostname_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 management_ip: Optional[pulumi.Input[_builtins.str]] = None,
                 management_ip_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 management_subnet_mask: Optional[pulumi.Input[_builtins.str]] = None,
                 management_subnet_mask_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 name_server_ip: Optional[pulumi.Input[_builtins.str]] = None,
                 name_server_ip_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 pac_url: Optional[pulumi.Input[_builtins.str]] = None,
                 pac_url_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 proxy_host: Optional[pulumi.Input[_builtins.str]] = None,
                 proxy_host_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 proxy_port: Optional[pulumi.Input[_builtins.int]] = None,
                 proxy_port_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 proxy_type: Optional[pulumi.Input[_builtins.str]] = None,
                 vpn: Optional[pulumi.Input[_builtins.int]] = None,
                 vpn_variable: Optional[pulumi.Input[_builtins.str]] = None):
        """
        :param pulumi.Input[_builtins.str] account_group_token: Set the Account Group Token
        :param pulumi.Input[_builtins.str] account_group_token_variable: Variable name
        :param pulumi.Input[_builtins.str] agent_default_gateway: Set the Agent default gateway
        :param pulumi.Input[_builtins.str] agent_default_gateway_variable: Variable name
        :param pulumi.Input[_builtins.str] hostname: Set the host name
        :param pulumi.Input[_builtins.str] hostname_variable: Variable name
        :param pulumi.Input[_builtins.str] management_ip: Set the Agent IP Address
        :param pulumi.Input[_builtins.str] management_ip_variable: Variable name
        :param pulumi.Input[_builtins.str] management_subnet_mask: Set the Agent SubnetMask
                 - Choices: `255.255.255.255`, `255.255.255.254`, `255.255.255.252`, `255.255.255.248`, `255.255.255.240`, `255.255.255.224`, `255.255.255.192`, `255.255.255.128`, `255.255.255.0`, `255.255.254.0`, `255.255.252.0`, `255.255.248.0`, `255.255.240.0`, `255.255.224.0`, `255.255.192.0`, `255.255.128.0`, `255.255.0.0`, `255.254.0.0`, `255.252.0.0`, `255.240.0.0`, `255.224.0.0`, `255.192.0.0`, `255.128.0.0`, `255.0.0.0`, `254.0.0.0`, `252.0.0.0`, `248.0.0.0`, `240.0.0.0`, `224.0.0.0`, `192.0.0.0`, `128.0.0.0`, `0.0.0.0`
        :param pulumi.Input[_builtins.str] management_subnet_mask_variable: Variable name
        :param pulumi.Input[_builtins.str] name_server_ip: Set the name server
        :param pulumi.Input[_builtins.str] name_server_ip_variable: Variable name
        :param pulumi.Input[_builtins.str] pac_url: Set the proxy PAC url
        :param pulumi.Input[_builtins.str] pac_url_variable: Variable name
        :param pulumi.Input[_builtins.str] proxy_host: Set the Proxy Host
        :param pulumi.Input[_builtins.str] proxy_host_variable: Variable name
        :param pulumi.Input[_builtins.int] proxy_port: Set the Proxy Port
                 - Range: `1`-`65535`
        :param pulumi.Input[_builtins.str] proxy_port_variable: Variable name
        :param pulumi.Input[_builtins.str] proxy_type: Select Web Proxy Type
        :param pulumi.Input[_builtins.int] vpn: VPN number
                 - Range: `0`-`65530`
        :param pulumi.Input[_builtins.str] vpn_variable: Variable name
        """
        if account_group_token is not None:
            pulumi.set(__self__, "account_group_token", account_group_token)
        if account_group_token_variable is not None:
            pulumi.set(__self__, "account_group_token_variable", account_group_token_variable)
        if agent_default_gateway is not None:
            pulumi.set(__self__, "agent_default_gateway", agent_default_gateway)
        if agent_default_gateway_variable is not None:
            pulumi.set(__self__, "agent_default_gateway_variable", agent_default_gateway_variable)
        if hostname is not None:
            pulumi.set(__self__, "hostname", hostname)
        if hostname_variable is not None:
            pulumi.set(__self__, "hostname_variable", hostname_variable)
        if management_ip is not None:
            pulumi.set(__self__, "management_ip", management_ip)
        if management_ip_variable is not None:
            pulumi.set(__self__, "management_ip_variable", management_ip_variable)
        if management_subnet_mask is not None:
            pulumi.set(__self__, "management_subnet_mask", management_subnet_mask)
        if management_subnet_mask_variable is not None:
            pulumi.set(__self__, "management_subnet_mask_variable", management_subnet_mask_variable)
        if name_server_ip is not None:
            pulumi.set(__self__, "name_server_ip", name_server_ip)
        if name_server_ip_variable is not None:
            pulumi.set(__self__, "name_server_ip_variable", name_server_ip_variable)
        if pac_url is not None:
            pulumi.set(__self__, "pac_url", pac_url)
        if pac_url_variable is not None:
            pulumi.set(__self__, "pac_url_variable", pac_url_variable)
        if proxy_host is not None:
            pulumi.set(__self__, "proxy_host", proxy_host)
        if proxy_host_variable is not None:
            pulumi.set(__self__, "proxy_host_variable", proxy_host_variable)
        if proxy_port is not None:
            pulumi.set(__self__, "proxy_port", proxy_port)
        if proxy_port_variable is not None:
            pulumi.set(__self__, "proxy_port_variable", proxy_port_variable)
        if proxy_type is not None:
            pulumi.set(__self__, "proxy_type", proxy_type)
        if vpn is not None:
            pulumi.set(__self__, "vpn", vpn)
        if vpn_variable is not None:
            pulumi.set(__self__, "vpn_variable", vpn_variable)

    @_builtins.property
    @pulumi.getter(name="accountGroupToken")
    def account_group_token(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Set the Account Group Token
        """
        return pulumi.get(self, "account_group_token")

    @account_group_token.setter
    def account_group_token(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "account_group_token", value)

    @_builtins.property
    @pulumi.getter(name="accountGroupTokenVariable")
    def account_group_token_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "account_group_token_variable")

    @account_group_token_variable.setter
    def account_group_token_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "account_group_token_variable", value)

    @_builtins.property
    @pulumi.getter(name="agentDefaultGateway")
    def agent_default_gateway(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Set the Agent default gateway
        """
        return pulumi.get(self, "agent_default_gateway")

    @agent_default_gateway.setter
    def agent_default_gateway(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "agent_default_gateway", value)

    @_builtins.property
    @pulumi.getter(name="agentDefaultGatewayVariable")
    def agent_default_gateway_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "agent_default_gateway_variable")

    @agent_default_gateway_variable.setter
    def agent_default_gateway_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "agent_default_gateway_variable", value)

    @_builtins.property
    @pulumi.getter
    def hostname(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Set the host name
        """
        return pulumi.get(self, "hostname")

    @hostname.setter
    def hostname(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "hostname", value)

    @_builtins.property
    @pulumi.getter(name="hostnameVariable")
    def hostname_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "hostname_variable")

    @hostname_variable.setter
    def hostname_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "hostname_variable", value)

    @_builtins.property
    @pulumi.getter(name="managementIp")
    def management_ip(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Set the Agent IP Address
        """
        return pulumi.get(self, "management_ip")

    @management_ip.setter
    def management_ip(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "management_ip", value)

    @_builtins.property
    @pulumi.getter(name="managementIpVariable")
    def management_ip_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "management_ip_variable")

    @management_ip_variable.setter
    def management_ip_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "management_ip_variable", value)

    @_builtins.property
    @pulumi.getter(name="managementSubnetMask")
    def management_subnet_mask(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Set the Agent SubnetMask
          - Choices: `255.255.255.255`, `255.255.255.254`, `255.255.255.252`, `255.255.255.248`, `255.255.255.240`, `255.255.255.224`, `255.255.255.192`, `255.255.255.128`, `255.255.255.0`, `255.255.254.0`, `255.255.252.0`, `255.255.248.0`, `255.255.240.0`, `255.255.224.0`, `255.255.192.0`, `255.255.128.0`, `255.255.0.0`, `255.254.0.0`, `255.252.0.0`, `255.240.0.0`, `255.224.0.0`, `255.192.0.0`, `255.128.0.0`, `255.0.0.0`, `254.0.0.0`, `252.0.0.0`, `248.0.0.0`, `240.0.0.0`, `224.0.0.0`, `192.0.0.0`, `128.0.0.0`, `0.0.0.0`
        """
        return pulumi.get(self, "management_subnet_mask")

    @management_subnet_mask.setter
    def management_subnet_mask(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "management_subnet_mask", value)

    @_builtins.property
    @pulumi.getter(name="managementSubnetMaskVariable")
    def management_subnet_mask_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "management_subnet_mask_variable")

    @management_subnet_mask_variable.setter
    def management_subnet_mask_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "management_subnet_mask_variable", value)

    @_builtins.property
    @pulumi.getter(name="nameServerIp")
    def name_server_ip(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Set the name server
        """
        return pulumi.get(self, "name_server_ip")

    @name_server_ip.setter
    def name_server_ip(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "name_server_ip", value)

    @_builtins.property
    @pulumi.getter(name="nameServerIpVariable")
    def name_server_ip_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "name_server_ip_variable")

    @name_server_ip_variable.setter
    def name_server_ip_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "name_server_ip_variable", value)

    @_builtins.property
    @pulumi.getter(name="pacUrl")
    def pac_url(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Set the proxy PAC url
        """
        return pulumi.get(self, "pac_url")

    @pac_url.setter
    def pac_url(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "pac_url", value)

    @_builtins.property
    @pulumi.getter(name="pacUrlVariable")
    def pac_url_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "pac_url_variable")

    @pac_url_variable.setter
    def pac_url_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "pac_url_variable", value)

    @_builtins.property
    @pulumi.getter(name="proxyHost")
    def proxy_host(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Set the Proxy Host
        """
        return pulumi.get(self, "proxy_host")

    @proxy_host.setter
    def proxy_host(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "proxy_host", value)

    @_builtins.property
    @pulumi.getter(name="proxyHostVariable")
    def proxy_host_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "proxy_host_variable")

    @proxy_host_variable.setter
    def proxy_host_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "proxy_host_variable", value)

    @_builtins.property
    @pulumi.getter(name="proxyPort")
    def proxy_port(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        Set the Proxy Port
          - Range: `1`-`65535`
        """
        return pulumi.get(self, "proxy_port")

    @proxy_port.setter
    def proxy_port(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "proxy_port", value)

    @_builtins.property
    @pulumi.getter(name="proxyPortVariable")
    def proxy_port_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "proxy_port_variable")

    @proxy_port_variable.setter
    def proxy_port_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "proxy_port_variable", value)

    @_builtins.property
    @pulumi.getter(name="proxyType")
    def proxy_type(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Select Web Proxy Type
        """
        return pulumi.get(self, "proxy_type")

    @proxy_type.setter
    def proxy_type(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "proxy_type", value)

    @_builtins.property
    @pulumi.getter
    def vpn(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        VPN number
          - Range: `0`-`65530`
        """
        return pulumi.get(self, "vpn")

    @vpn.setter
    def vpn(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "vpn", value)

    @_builtins.property
    @pulumi.getter(name="vpnVariable")
    def vpn_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "vpn_variable")

    @vpn_variable.setter
    def vpn_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "vpn_variable", value)


if not MYPY:
    class OtherUcseFeatureInterfaceArgsDict(TypedDict):
        interface_name: NotRequired[pulumi.Input[_builtins.str]]
        """
        Set Inteface name
        """
        interface_name_variable: NotRequired[pulumi.Input[_builtins.str]]
        """
        Variable name
        """
        ipv4_address: NotRequired[pulumi.Input[_builtins.str]]
        """
        Assign IPv4 address
        """
        ipv4_address_variable: NotRequired[pulumi.Input[_builtins.str]]
        """
        Variable name
        """
        ucse_interface_vpn: NotRequired[pulumi.Input[_builtins.int]]
        """
        UCSE Interface VPN
          - Range: `1`-`65527`
        """
        ucse_interface_vpn_variable: NotRequired[pulumi.Input[_builtins.str]]
        """
        Variable name
        """
elif False:
    OtherUcseFeatureInterfaceArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class OtherUcseFeatureInterfaceArgs:
    def __init__(__self__, *,
                 interface_name: Optional[pulumi.Input[_builtins.str]] = None,
                 interface_name_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 ipv4_address: Optional[pulumi.Input[_builtins.str]] = None,
                 ipv4_address_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 ucse_interface_vpn: Optional[pulumi.Input[_builtins.int]] = None,
                 ucse_interface_vpn_variable: Optional[pulumi.Input[_builtins.str]] = None):
        """
        :param pulumi.Input[_builtins.str] interface_name: Set Inteface name
        :param pulumi.Input[_builtins.str] interface_name_variable: Variable name
        :param pulumi.Input[_builtins.str] ipv4_address: Assign IPv4 address
        :param pulumi.Input[_builtins.str] ipv4_address_variable: Variable name
        :param pulumi.Input[_builtins.int] ucse_interface_vpn: UCSE Interface VPN
                 - Range: `1`-`65527`
        :param pulumi.Input[_builtins.str] ucse_interface_vpn_variable: Variable name
        """
        if interface_name is not None:
            pulumi.set(__self__, "interface_name", interface_name)
        if interface_name_variable is not None:
            pulumi.set(__self__, "interface_name_variable", interface_name_variable)
        if ipv4_address is not None:
            pulumi.set(__self__, "ipv4_address", ipv4_address)
        if ipv4_address_variable is not None:
            pulumi.set(__self__, "ipv4_address_variable", ipv4_address_variable)
        if ucse_interface_vpn is not None:
            pulumi.set(__self__, "ucse_interface_vpn", ucse_interface_vpn)
        if ucse_interface_vpn_variable is not None:
            pulumi.set(__self__, "ucse_interface_vpn_variable", ucse_interface_vpn_variable)

    @_builtins.property
    @pulumi.getter(name="interfaceName")
    def interface_name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Set Inteface name
        """
        return pulumi.get(self, "interface_name")

    @interface_name.setter
    def interface_name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "interface_name", value)

    @_builtins.property
    @pulumi.getter(name="interfaceNameVariable")
    def interface_name_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "interface_name_variable")

    @interface_name_variable.setter
    def interface_name_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "interface_name_variable", value)

    @_builtins.property
    @pulumi.getter(name="ipv4Address")
    def ipv4_address(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Assign IPv4 address
        """
        return pulumi.get(self, "ipv4_address")

    @ipv4_address.setter
    def ipv4_address(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "ipv4_address", value)

    @_builtins.property
    @pulumi.getter(name="ipv4AddressVariable")
    def ipv4_address_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "ipv4_address_variable")

    @ipv4_address_variable.setter
    def ipv4_address_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "ipv4_address_variable", value)

    @_builtins.property
    @pulumi.getter(name="ucseInterfaceVpn")
    def ucse_interface_vpn(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        UCSE Interface VPN
          - Range: `1`-`65527`
        """
        return pulumi.get(self, "ucse_interface_vpn")

    @ucse_interface_vpn.setter
    def ucse_interface_vpn(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "ucse_interface_vpn", value)

    @_builtins.property
    @pulumi.getter(name="ucseInterfaceVpnVariable")
    def ucse_interface_vpn_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "ucse_interface_vpn_variable")

    @ucse_interface_vpn_variable.setter
    def ucse_interface_vpn_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "ucse_interface_vpn_variable", value)


if not MYPY:
    class PolicyGroupDeviceArgsDict(TypedDict):
        deploy: NotRequired[pulumi.Input[_builtins.bool]]
        """
        Deploy to device if enabled.
          - Default value: `false`
        """
        id: NotRequired[pulumi.Input[_builtins.str]]
        """
        Device ID
        """
        variables: NotRequired[pulumi.Input[Sequence[pulumi.Input['PolicyGroupDeviceVariableArgsDict']]]]
        """
        List of variables
        """
elif False:
    PolicyGroupDeviceArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class PolicyGroupDeviceArgs:
    def __init__(__self__, *,
                 deploy: Optional[pulumi.Input[_builtins.bool]] = None,
                 id: Optional[pulumi.Input[_builtins.str]] = None,
                 variables: Optional[pulumi.Input[Sequence[pulumi.Input['PolicyGroupDeviceVariableArgs']]]] = None):
        """
        :param pulumi.Input[_builtins.bool] deploy: Deploy to device if enabled.
                 - Default value: `false`
        :param pulumi.Input[_builtins.str] id: Device ID
        :param pulumi.Input[Sequence[pulumi.Input['PolicyGroupDeviceVariableArgs']]] variables: List of variables
        """
        if deploy is not None:
            pulumi.set(__self__, "deploy", deploy)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if variables is not None:
            pulumi.set(__self__, "variables", variables)

    @_builtins.property
    @pulumi.getter
    def deploy(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Deploy to device if enabled.
          - Default value: `false`
        """
        return pulumi.get(self, "deploy")

    @deploy.setter
    def deploy(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "deploy", value)

    @_builtins.property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Device ID
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "id", value)

    @_builtins.property
    @pulumi.getter
    def variables(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['PolicyGroupDeviceVariableArgs']]]]:
        """
        List of variables
        """
        return pulumi.get(self, "variables")

    @variables.setter
    def variables(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['PolicyGroupDeviceVariableArgs']]]]):
        pulumi.set(self, "variables", value)


if not MYPY:
    class PolicyGroupDeviceVariableArgsDict(TypedDict):
        name: pulumi.Input[_builtins.str]
        """
        Variable name
        """
        list_values: NotRequired[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]
        """
        Use this instead of `value` in case value is of type `List`.
        """
        value: NotRequired[pulumi.Input[_builtins.str]]
        """
        Variable value
        """
elif False:
    PolicyGroupDeviceVariableArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class PolicyGroupDeviceVariableArgs:
    def __init__(__self__, *,
                 name: pulumi.Input[_builtins.str],
                 list_values: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 value: Optional[pulumi.Input[_builtins.str]] = None):
        """
        :param pulumi.Input[_builtins.str] name: Variable name
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] list_values: Use this instead of `value` in case value is of type `List`.
        :param pulumi.Input[_builtins.str] value: Variable value
        """
        pulumi.set(__self__, "name", name)
        if list_values is not None:
            pulumi.set(__self__, "list_values", list_values)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> pulumi.Input[_builtins.str]:
        """
        Variable name
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "name", value)

    @_builtins.property
    @pulumi.getter(name="listValues")
    def list_values(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]:
        """
        Use this instead of `value` in case value is of type `List`.
        """
        return pulumi.get(self, "list_values")

    @list_values.setter
    def list_values(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "list_values", value)

    @_builtins.property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable value
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "value", value)


if not MYPY:
    class PolicyObjectAppProbeClassEntryArgsDict(TypedDict):
        forwarding_class: NotRequired[pulumi.Input[_builtins.str]]
        """
        Forwarding Class Name
        """
        maps: NotRequired[pulumi.Input[Sequence[pulumi.Input['PolicyObjectAppProbeClassEntryMapArgsDict']]]]
        """
        Map
        """
elif False:
    PolicyObjectAppProbeClassEntryArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class PolicyObjectAppProbeClassEntryArgs:
    def __init__(__self__, *,
                 forwarding_class: Optional[pulumi.Input[_builtins.str]] = None,
                 maps: Optional[pulumi.Input[Sequence[pulumi.Input['PolicyObjectAppProbeClassEntryMapArgs']]]] = None):
        """
        :param pulumi.Input[_builtins.str] forwarding_class: Forwarding Class Name
        :param pulumi.Input[Sequence[pulumi.Input['PolicyObjectAppProbeClassEntryMapArgs']]] maps: Map
        """
        if forwarding_class is not None:
            pulumi.set(__self__, "forwarding_class", forwarding_class)
        if maps is not None:
            pulumi.set(__self__, "maps", maps)

    @_builtins.property
    @pulumi.getter(name="forwardingClass")
    def forwarding_class(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Forwarding Class Name
        """
        return pulumi.get(self, "forwarding_class")

    @forwarding_class.setter
    def forwarding_class(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "forwarding_class", value)

    @_builtins.property
    @pulumi.getter
    def maps(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['PolicyObjectAppProbeClassEntryMapArgs']]]]:
        """
        Map
        """
        return pulumi.get(self, "maps")

    @maps.setter
    def maps(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['PolicyObjectAppProbeClassEntryMapArgs']]]]):
        pulumi.set(self, "maps", value)


if not MYPY:
    class PolicyObjectAppProbeClassEntryMapArgsDict(TypedDict):
        color: NotRequired[pulumi.Input[_builtins.str]]
        """
        Color
          - Choices: `3g`, `biz-internet`, `blue`, `bronze`, `custom1`, `custom2`, `custom3`, `default`, `gold`, `green`, `lte`, `metro-ethernet`, `mpls`, `private1`, `private2`, `private3`, `private4`, `private5`, `private6`, `public-internet`, `red`, `silver`
        """
        dscp: NotRequired[pulumi.Input[_builtins.int]]
        """
        DSCP number
          - Range: `0`-`63`
        """
elif False:
    PolicyObjectAppProbeClassEntryMapArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class PolicyObjectAppProbeClassEntryMapArgs:
    def __init__(__self__, *,
                 color: Optional[pulumi.Input[_builtins.str]] = None,
                 dscp: Optional[pulumi.Input[_builtins.int]] = None):
        """
        :param pulumi.Input[_builtins.str] color: Color
                 - Choices: `3g`, `biz-internet`, `blue`, `bronze`, `custom1`, `custom2`, `custom3`, `default`, `gold`, `green`, `lte`, `metro-ethernet`, `mpls`, `private1`, `private2`, `private3`, `private4`, `private5`, `private6`, `public-internet`, `red`, `silver`
        :param pulumi.Input[_builtins.int] dscp: DSCP number
                 - Range: `0`-`63`
        """
        if color is not None:
            pulumi.set(__self__, "color", color)
        if dscp is not None:
            pulumi.set(__self__, "dscp", dscp)

    @_builtins.property
    @pulumi.getter
    def color(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Color
          - Choices: `3g`, `biz-internet`, `blue`, `bronze`, `custom1`, `custom2`, `custom3`, `default`, `gold`, `green`, `lte`, `metro-ethernet`, `mpls`, `private1`, `private2`, `private3`, `private4`, `private5`, `private6`, `public-internet`, `red`, `silver`
        """
        return pulumi.get(self, "color")

    @color.setter
    def color(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "color", value)

    @_builtins.property
    @pulumi.getter
    def dscp(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        DSCP number
          - Range: `0`-`63`
        """
        return pulumi.get(self, "dscp")

    @dscp.setter
    def dscp(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "dscp", value)


if not MYPY:
    class PolicyObjectApplicationListEntryArgsDict(TypedDict):
        application: NotRequired[pulumi.Input[_builtins.str]]
        application_family: NotRequired[pulumi.Input[_builtins.str]]
elif False:
    PolicyObjectApplicationListEntryArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class PolicyObjectApplicationListEntryArgs:
    def __init__(__self__, *,
                 application: Optional[pulumi.Input[_builtins.str]] = None,
                 application_family: Optional[pulumi.Input[_builtins.str]] = None):
        if application is not None:
            pulumi.set(__self__, "application", application)
        if application_family is not None:
            pulumi.set(__self__, "application_family", application_family)

    @_builtins.property
    @pulumi.getter
    def application(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "application")

    @application.setter
    def application(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "application", value)

    @_builtins.property
    @pulumi.getter(name="applicationFamily")
    def application_family(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "application_family")

    @application_family.setter
    def application_family(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "application_family", value)


if not MYPY:
    class PolicyObjectAsPathListEntryArgsDict(TypedDict):
        as_path_list: NotRequired[pulumi.Input[_builtins.str]]
elif False:
    PolicyObjectAsPathListEntryArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class PolicyObjectAsPathListEntryArgs:
    def __init__(__self__, *,
                 as_path_list: Optional[pulumi.Input[_builtins.str]] = None):
        if as_path_list is not None:
            pulumi.set(__self__, "as_path_list", as_path_list)

    @_builtins.property
    @pulumi.getter(name="asPathList")
    def as_path_list(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "as_path_list")

    @as_path_list.setter
    def as_path_list(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "as_path_list", value)


if not MYPY:
    class PolicyObjectClassMapEntryArgsDict(TypedDict):
        queue: NotRequired[pulumi.Input[_builtins.str]]
        """
        select a queue
          - Choices: `0`, `1`, `2`, `3`, `4`, `5`, `6`, `7`
        """
elif False:
    PolicyObjectClassMapEntryArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class PolicyObjectClassMapEntryArgs:
    def __init__(__self__, *,
                 queue: Optional[pulumi.Input[_builtins.str]] = None):
        """
        :param pulumi.Input[_builtins.str] queue: select a queue
                 - Choices: `0`, `1`, `2`, `3`, `4`, `5`, `6`, `7`
        """
        if queue is not None:
            pulumi.set(__self__, "queue", queue)

    @_builtins.property
    @pulumi.getter
    def queue(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        select a queue
          - Choices: `0`, `1`, `2`, `3`, `4`, `5`, `6`, `7`
        """
        return pulumi.get(self, "queue")

    @queue.setter
    def queue(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "queue", value)


if not MYPY:
    class PolicyObjectColorListEntryArgsDict(TypedDict):
        color: NotRequired[pulumi.Input[_builtins.str]]
        """
        - Choices: `3g`, `biz-internet`, `blue`, `bronze`, `custom1`, `custom2`, `custom3`, `default`, `gold`, `green`, `lte`, `metro-ethernet`, `mpls`, `private1`, `private2`, `private3`, `private4`, `private5`, `private6`, `public-internet`, `red`, `silver`
        """
elif False:
    PolicyObjectColorListEntryArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class PolicyObjectColorListEntryArgs:
    def __init__(__self__, *,
                 color: Optional[pulumi.Input[_builtins.str]] = None):
        """
        :param pulumi.Input[_builtins.str] color: - Choices: `3g`, `biz-internet`, `blue`, `bronze`, `custom1`, `custom2`, `custom3`, `default`, `gold`, `green`, `lte`, `metro-ethernet`, `mpls`, `private1`, `private2`, `private3`, `private4`, `private5`, `private6`, `public-internet`, `red`, `silver`
        """
        if color is not None:
            pulumi.set(__self__, "color", color)

    @_builtins.property
    @pulumi.getter
    def color(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        - Choices: `3g`, `biz-internet`, `blue`, `bronze`, `custom1`, `custom2`, `custom3`, `default`, `gold`, `green`, `lte`, `metro-ethernet`, `mpls`, `private1`, `private2`, `private3`, `private4`, `private5`, `private6`, `public-internet`, `red`, `silver`
        """
        return pulumi.get(self, "color")

    @color.setter
    def color(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "color", value)


if not MYPY:
    class PolicyObjectDataIpv4PrefixListEntryArgsDict(TypedDict):
        ipv4_address: NotRequired[pulumi.Input[_builtins.str]]
        """
        IPv4 address
        """
        ipv4_prefix_length: NotRequired[pulumi.Input[_builtins.int]]
        """
        IPv4 prefix Length
          - Range: `0`-`32`
        """
elif False:
    PolicyObjectDataIpv4PrefixListEntryArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class PolicyObjectDataIpv4PrefixListEntryArgs:
    def __init__(__self__, *,
                 ipv4_address: Optional[pulumi.Input[_builtins.str]] = None,
                 ipv4_prefix_length: Optional[pulumi.Input[_builtins.int]] = None):
        """
        :param pulumi.Input[_builtins.str] ipv4_address: IPv4 address
        :param pulumi.Input[_builtins.int] ipv4_prefix_length: IPv4 prefix Length
                 - Range: `0`-`32`
        """
        if ipv4_address is not None:
            pulumi.set(__self__, "ipv4_address", ipv4_address)
        if ipv4_prefix_length is not None:
            pulumi.set(__self__, "ipv4_prefix_length", ipv4_prefix_length)

    @_builtins.property
    @pulumi.getter(name="ipv4Address")
    def ipv4_address(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        IPv4 address
        """
        return pulumi.get(self, "ipv4_address")

    @ipv4_address.setter
    def ipv4_address(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "ipv4_address", value)

    @_builtins.property
    @pulumi.getter(name="ipv4PrefixLength")
    def ipv4_prefix_length(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        IPv4 prefix Length
          - Range: `0`-`32`
        """
        return pulumi.get(self, "ipv4_prefix_length")

    @ipv4_prefix_length.setter
    def ipv4_prefix_length(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "ipv4_prefix_length", value)


if not MYPY:
    class PolicyObjectDataIpv6PrefixListEntryArgsDict(TypedDict):
        ipv6_address: NotRequired[pulumi.Input[_builtins.str]]
        """
        IPv6 address
        """
        ipv6_prefix_length: NotRequired[pulumi.Input[_builtins.int]]
        """
        IPv6 prefix
          - Range: `0`-`128`
        """
elif False:
    PolicyObjectDataIpv6PrefixListEntryArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class PolicyObjectDataIpv6PrefixListEntryArgs:
    def __init__(__self__, *,
                 ipv6_address: Optional[pulumi.Input[_builtins.str]] = None,
                 ipv6_prefix_length: Optional[pulumi.Input[_builtins.int]] = None):
        """
        :param pulumi.Input[_builtins.str] ipv6_address: IPv6 address
        :param pulumi.Input[_builtins.int] ipv6_prefix_length: IPv6 prefix
                 - Range: `0`-`128`
        """
        if ipv6_address is not None:
            pulumi.set(__self__, "ipv6_address", ipv6_address)
        if ipv6_prefix_length is not None:
            pulumi.set(__self__, "ipv6_prefix_length", ipv6_prefix_length)

    @_builtins.property
    @pulumi.getter(name="ipv6Address")
    def ipv6_address(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        IPv6 address
        """
        return pulumi.get(self, "ipv6_address")

    @ipv6_address.setter
    def ipv6_address(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "ipv6_address", value)

    @_builtins.property
    @pulumi.getter(name="ipv6PrefixLength")
    def ipv6_prefix_length(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        IPv6 prefix
          - Range: `0`-`128`
        """
        return pulumi.get(self, "ipv6_prefix_length")

    @ipv6_prefix_length.setter
    def ipv6_prefix_length(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "ipv6_prefix_length", value)


if not MYPY:
    class PolicyObjectExtendedCommunityListEntryArgsDict(TypedDict):
        extended_community: NotRequired[pulumi.Input[_builtins.str]]
        """
        can be soo 10.0.0.1:30 or rt 500:50 etc.
        """
elif False:
    PolicyObjectExtendedCommunityListEntryArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class PolicyObjectExtendedCommunityListEntryArgs:
    def __init__(__self__, *,
                 extended_community: Optional[pulumi.Input[_builtins.str]] = None):
        """
        :param pulumi.Input[_builtins.str] extended_community: can be soo 10.0.0.1:30 or rt 500:50 etc.
        """
        if extended_community is not None:
            pulumi.set(__self__, "extended_community", extended_community)

    @_builtins.property
    @pulumi.getter(name="extendedCommunity")
    def extended_community(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        can be soo 10.0.0.1:30 or rt 500:50 etc.
        """
        return pulumi.get(self, "extended_community")

    @extended_community.setter
    def extended_community(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "extended_community", value)


if not MYPY:
    class PolicyObjectIpv4PrefixListEntryArgsDict(TypedDict):
        ge: NotRequired[pulumi.Input[_builtins.int]]
        """
        IPv4 prefix length with ge range operator
          - Range: `1`-`32`
        """
        ipv4_address: NotRequired[pulumi.Input[_builtins.str]]
        """
        IPv4 address
        """
        ipv4_prefix_length: NotRequired[pulumi.Input[_builtins.int]]
        """
        IPv4 prefix length
          - Range: `0`-`32`
        """
        le: NotRequired[pulumi.Input[_builtins.int]]
        """
        IPv4 prefix length with le range operator
          - Range: `1`-`32`
        """
elif False:
    PolicyObjectIpv4PrefixListEntryArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class PolicyObjectIpv4PrefixListEntryArgs:
    def __init__(__self__, *,
                 ge: Optional[pulumi.Input[_builtins.int]] = None,
                 ipv4_address: Optional[pulumi.Input[_builtins.str]] = None,
                 ipv4_prefix_length: Optional[pulumi.Input[_builtins.int]] = None,
                 le: Optional[pulumi.Input[_builtins.int]] = None):
        """
        :param pulumi.Input[_builtins.int] ge: IPv4 prefix length with ge range operator
                 - Range: `1`-`32`
        :param pulumi.Input[_builtins.str] ipv4_address: IPv4 address
        :param pulumi.Input[_builtins.int] ipv4_prefix_length: IPv4 prefix length
                 - Range: `0`-`32`
        :param pulumi.Input[_builtins.int] le: IPv4 prefix length with le range operator
                 - Range: `1`-`32`
        """
        if ge is not None:
            pulumi.set(__self__, "ge", ge)
        if ipv4_address is not None:
            pulumi.set(__self__, "ipv4_address", ipv4_address)
        if ipv4_prefix_length is not None:
            pulumi.set(__self__, "ipv4_prefix_length", ipv4_prefix_length)
        if le is not None:
            pulumi.set(__self__, "le", le)

    @_builtins.property
    @pulumi.getter
    def ge(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        IPv4 prefix length with ge range operator
          - Range: `1`-`32`
        """
        return pulumi.get(self, "ge")

    @ge.setter
    def ge(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "ge", value)

    @_builtins.property
    @pulumi.getter(name="ipv4Address")
    def ipv4_address(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        IPv4 address
        """
        return pulumi.get(self, "ipv4_address")

    @ipv4_address.setter
    def ipv4_address(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "ipv4_address", value)

    @_builtins.property
    @pulumi.getter(name="ipv4PrefixLength")
    def ipv4_prefix_length(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        IPv4 prefix length
          - Range: `0`-`32`
        """
        return pulumi.get(self, "ipv4_prefix_length")

    @ipv4_prefix_length.setter
    def ipv4_prefix_length(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "ipv4_prefix_length", value)

    @_builtins.property
    @pulumi.getter
    def le(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        IPv4 prefix length with le range operator
          - Range: `1`-`32`
        """
        return pulumi.get(self, "le")

    @le.setter
    def le(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "le", value)


if not MYPY:
    class PolicyObjectIpv6PrefixListEntryArgsDict(TypedDict):
        ge: NotRequired[pulumi.Input[_builtins.int]]
        """
        IPv6 prefix length with ge range operator
          - Range: `1`-`128`
        """
        ipv6_address: NotRequired[pulumi.Input[_builtins.str]]
        """
        IPv6 address
        """
        ipv6_prefix_length: NotRequired[pulumi.Input[_builtins.int]]
        """
        IPv6 prefix length
          - Range: `0`-`128`
        """
        le: NotRequired[pulumi.Input[_builtins.int]]
        """
        IPv6 prefix length with le range operator
          - Range: `1`-`128`
        """
elif False:
    PolicyObjectIpv6PrefixListEntryArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class PolicyObjectIpv6PrefixListEntryArgs:
    def __init__(__self__, *,
                 ge: Optional[pulumi.Input[_builtins.int]] = None,
                 ipv6_address: Optional[pulumi.Input[_builtins.str]] = None,
                 ipv6_prefix_length: Optional[pulumi.Input[_builtins.int]] = None,
                 le: Optional[pulumi.Input[_builtins.int]] = None):
        """
        :param pulumi.Input[_builtins.int] ge: IPv6 prefix length with ge range operator
                 - Range: `1`-`128`
        :param pulumi.Input[_builtins.str] ipv6_address: IPv6 address
        :param pulumi.Input[_builtins.int] ipv6_prefix_length: IPv6 prefix length
                 - Range: `0`-`128`
        :param pulumi.Input[_builtins.int] le: IPv6 prefix length with le range operator
                 - Range: `1`-`128`
        """
        if ge is not None:
            pulumi.set(__self__, "ge", ge)
        if ipv6_address is not None:
            pulumi.set(__self__, "ipv6_address", ipv6_address)
        if ipv6_prefix_length is not None:
            pulumi.set(__self__, "ipv6_prefix_length", ipv6_prefix_length)
        if le is not None:
            pulumi.set(__self__, "le", le)

    @_builtins.property
    @pulumi.getter
    def ge(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        IPv6 prefix length with ge range operator
          - Range: `1`-`128`
        """
        return pulumi.get(self, "ge")

    @ge.setter
    def ge(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "ge", value)

    @_builtins.property
    @pulumi.getter(name="ipv6Address")
    def ipv6_address(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        IPv6 address
        """
        return pulumi.get(self, "ipv6_address")

    @ipv6_address.setter
    def ipv6_address(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "ipv6_address", value)

    @_builtins.property
    @pulumi.getter(name="ipv6PrefixLength")
    def ipv6_prefix_length(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        IPv6 prefix length
          - Range: `0`-`128`
        """
        return pulumi.get(self, "ipv6_prefix_length")

    @ipv6_prefix_length.setter
    def ipv6_prefix_length(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "ipv6_prefix_length", value)

    @_builtins.property
    @pulumi.getter
    def le(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        IPv6 prefix length with le range operator
          - Range: `1`-`128`
        """
        return pulumi.get(self, "le")

    @le.setter
    def le(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "le", value)


if not MYPY:
    class PolicyObjectMirrorEntryArgsDict(TypedDict):
        remote_destination_ip: NotRequired[pulumi.Input[_builtins.str]]
        """
        remote destination ip address
        """
        source_ip: NotRequired[pulumi.Input[_builtins.str]]
        """
        source ip address
        """
elif False:
    PolicyObjectMirrorEntryArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class PolicyObjectMirrorEntryArgs:
    def __init__(__self__, *,
                 remote_destination_ip: Optional[pulumi.Input[_builtins.str]] = None,
                 source_ip: Optional[pulumi.Input[_builtins.str]] = None):
        """
        :param pulumi.Input[_builtins.str] remote_destination_ip: remote destination ip address
        :param pulumi.Input[_builtins.str] source_ip: source ip address
        """
        if remote_destination_ip is not None:
            pulumi.set(__self__, "remote_destination_ip", remote_destination_ip)
        if source_ip is not None:
            pulumi.set(__self__, "source_ip", source_ip)

    @_builtins.property
    @pulumi.getter(name="remoteDestinationIp")
    def remote_destination_ip(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        remote destination ip address
        """
        return pulumi.get(self, "remote_destination_ip")

    @remote_destination_ip.setter
    def remote_destination_ip(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "remote_destination_ip", value)

    @_builtins.property
    @pulumi.getter(name="sourceIp")
    def source_ip(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        source ip address
        """
        return pulumi.get(self, "source_ip")

    @source_ip.setter
    def source_ip(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "source_ip", value)


if not MYPY:
    class PolicyObjectPolicerEntryArgsDict(TypedDict):
        burst_bytes: NotRequired[pulumi.Input[_builtins.int]]
        """
        Burst (Bytes)
          - Range: `15000`-`10000000`
        """
        exceed_action: NotRequired[pulumi.Input[_builtins.str]]
        """
        Exceed options such as Drop or Remark
          - Choices: `drop`, `remark`
        """
        rate_bps: NotRequired[pulumi.Input[_builtins.int]]
        """
        Rate (bps)
          - Range: `8`-`100000000000`
        """
elif False:
    PolicyObjectPolicerEntryArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class PolicyObjectPolicerEntryArgs:
    def __init__(__self__, *,
                 burst_bytes: Optional[pulumi.Input[_builtins.int]] = None,
                 exceed_action: Optional[pulumi.Input[_builtins.str]] = None,
                 rate_bps: Optional[pulumi.Input[_builtins.int]] = None):
        """
        :param pulumi.Input[_builtins.int] burst_bytes: Burst (Bytes)
                 - Range: `15000`-`10000000`
        :param pulumi.Input[_builtins.str] exceed_action: Exceed options such as Drop or Remark
                 - Choices: `drop`, `remark`
        :param pulumi.Input[_builtins.int] rate_bps: Rate (bps)
                 - Range: `8`-`100000000000`
        """
        if burst_bytes is not None:
            pulumi.set(__self__, "burst_bytes", burst_bytes)
        if exceed_action is not None:
            pulumi.set(__self__, "exceed_action", exceed_action)
        if rate_bps is not None:
            pulumi.set(__self__, "rate_bps", rate_bps)

    @_builtins.property
    @pulumi.getter(name="burstBytes")
    def burst_bytes(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        Burst (Bytes)
          - Range: `15000`-`10000000`
        """
        return pulumi.get(self, "burst_bytes")

    @burst_bytes.setter
    def burst_bytes(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "burst_bytes", value)

    @_builtins.property
    @pulumi.getter(name="exceedAction")
    def exceed_action(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Exceed options such as Drop or Remark
          - Choices: `drop`, `remark`
        """
        return pulumi.get(self, "exceed_action")

    @exceed_action.setter
    def exceed_action(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "exceed_action", value)

    @_builtins.property
    @pulumi.getter(name="rateBps")
    def rate_bps(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        Rate (bps)
          - Range: `8`-`100000000000`
        """
        return pulumi.get(self, "rate_bps")

    @rate_bps.setter
    def rate_bps(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "rate_bps", value)


if not MYPY:
    class PolicyObjectPreferredColorGroupEntryArgsDict(TypedDict):
        primary_color_preferences: NotRequired[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]
        primary_path_preference: NotRequired[pulumi.Input[_builtins.str]]
        """
        - Choices: `all-paths`, `direct-path`, `multi-hop-path`
        """
        secondary_color_preferences: NotRequired[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]
        secondary_path_preference: NotRequired[pulumi.Input[_builtins.str]]
        """
        - Choices: `all-paths`, `direct-path`, `multi-hop-path`
        """
        tertiary_color_preferences: NotRequired[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]
        tertiary_path_preference: NotRequired[pulumi.Input[_builtins.str]]
        """
        - Choices: `all-paths`, `direct-path`, `multi-hop-path`
        """
elif False:
    PolicyObjectPreferredColorGroupEntryArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class PolicyObjectPreferredColorGroupEntryArgs:
    def __init__(__self__, *,
                 primary_color_preferences: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 primary_path_preference: Optional[pulumi.Input[_builtins.str]] = None,
                 secondary_color_preferences: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 secondary_path_preference: Optional[pulumi.Input[_builtins.str]] = None,
                 tertiary_color_preferences: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 tertiary_path_preference: Optional[pulumi.Input[_builtins.str]] = None):
        """
        :param pulumi.Input[_builtins.str] primary_path_preference: - Choices: `all-paths`, `direct-path`, `multi-hop-path`
        :param pulumi.Input[_builtins.str] secondary_path_preference: - Choices: `all-paths`, `direct-path`, `multi-hop-path`
        :param pulumi.Input[_builtins.str] tertiary_path_preference: - Choices: `all-paths`, `direct-path`, `multi-hop-path`
        """
        if primary_color_preferences is not None:
            pulumi.set(__self__, "primary_color_preferences", primary_color_preferences)
        if primary_path_preference is not None:
            pulumi.set(__self__, "primary_path_preference", primary_path_preference)
        if secondary_color_preferences is not None:
            pulumi.set(__self__, "secondary_color_preferences", secondary_color_preferences)
        if secondary_path_preference is not None:
            pulumi.set(__self__, "secondary_path_preference", secondary_path_preference)
        if tertiary_color_preferences is not None:
            pulumi.set(__self__, "tertiary_color_preferences", tertiary_color_preferences)
        if tertiary_path_preference is not None:
            pulumi.set(__self__, "tertiary_path_preference", tertiary_path_preference)

    @_builtins.property
    @pulumi.getter(name="primaryColorPreferences")
    def primary_color_preferences(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]:
        return pulumi.get(self, "primary_color_preferences")

    @primary_color_preferences.setter
    def primary_color_preferences(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "primary_color_preferences", value)

    @_builtins.property
    @pulumi.getter(name="primaryPathPreference")
    def primary_path_preference(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        - Choices: `all-paths`, `direct-path`, `multi-hop-path`
        """
        return pulumi.get(self, "primary_path_preference")

    @primary_path_preference.setter
    def primary_path_preference(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "primary_path_preference", value)

    @_builtins.property
    @pulumi.getter(name="secondaryColorPreferences")
    def secondary_color_preferences(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]:
        return pulumi.get(self, "secondary_color_preferences")

    @secondary_color_preferences.setter
    def secondary_color_preferences(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "secondary_color_preferences", value)

    @_builtins.property
    @pulumi.getter(name="secondaryPathPreference")
    def secondary_path_preference(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        - Choices: `all-paths`, `direct-path`, `multi-hop-path`
        """
        return pulumi.get(self, "secondary_path_preference")

    @secondary_path_preference.setter
    def secondary_path_preference(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "secondary_path_preference", value)

    @_builtins.property
    @pulumi.getter(name="tertiaryColorPreferences")
    def tertiary_color_preferences(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]:
        return pulumi.get(self, "tertiary_color_preferences")

    @tertiary_color_preferences.setter
    def tertiary_color_preferences(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "tertiary_color_preferences", value)

    @_builtins.property
    @pulumi.getter(name="tertiaryPathPreference")
    def tertiary_path_preference(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        - Choices: `all-paths`, `direct-path`, `multi-hop-path`
        """
        return pulumi.get(self, "tertiary_path_preference")

    @tertiary_path_preference.setter
    def tertiary_path_preference(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "tertiary_path_preference", value)


if not MYPY:
    class PolicyObjectSecurityDataIpv4PrefixListEntryArgsDict(TypedDict):
        ip_prefix: NotRequired[pulumi.Input[_builtins.str]]
        ip_prefix_variable: NotRequired[pulumi.Input[_builtins.str]]
        """
        Variable name
        """
elif False:
    PolicyObjectSecurityDataIpv4PrefixListEntryArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class PolicyObjectSecurityDataIpv4PrefixListEntryArgs:
    def __init__(__self__, *,
                 ip_prefix: Optional[pulumi.Input[_builtins.str]] = None,
                 ip_prefix_variable: Optional[pulumi.Input[_builtins.str]] = None):
        """
        :param pulumi.Input[_builtins.str] ip_prefix_variable: Variable name
        """
        if ip_prefix is not None:
            pulumi.set(__self__, "ip_prefix", ip_prefix)
        if ip_prefix_variable is not None:
            pulumi.set(__self__, "ip_prefix_variable", ip_prefix_variable)

    @_builtins.property
    @pulumi.getter(name="ipPrefix")
    def ip_prefix(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "ip_prefix")

    @ip_prefix.setter
    def ip_prefix(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "ip_prefix", value)

    @_builtins.property
    @pulumi.getter(name="ipPrefixVariable")
    def ip_prefix_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "ip_prefix_variable")

    @ip_prefix_variable.setter
    def ip_prefix_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "ip_prefix_variable", value)


if not MYPY:
    class PolicyObjectSecurityFqdnListEntryArgsDict(TypedDict):
        pattern: NotRequired[pulumi.Input[_builtins.str]]
elif False:
    PolicyObjectSecurityFqdnListEntryArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class PolicyObjectSecurityFqdnListEntryArgs:
    def __init__(__self__, *,
                 pattern: Optional[pulumi.Input[_builtins.str]] = None):
        if pattern is not None:
            pulumi.set(__self__, "pattern", pattern)

    @_builtins.property
    @pulumi.getter
    def pattern(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "pattern")

    @pattern.setter
    def pattern(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "pattern", value)


if not MYPY:
    class PolicyObjectSecurityGeolocationListEntryArgsDict(TypedDict):
        continent: NotRequired[pulumi.Input[_builtins.str]]
        """
        continent name
          - Choices: `AF`, `AN`, `AS`, `EU`, `NA`, `OC`, `SA`
        """
        country: NotRequired[pulumi.Input[_builtins.str]]
        """
        country names
          - Choices: `AFG`, `ALB`, `ATA`, `DZA`, `ASM`, `AND`, `AGO`, `ATG`, `AZE`, `ARG`, `AUS`, `AUT`, `BHS`, `BHR`, `BGD`, `ARM`, `BRB`, `BEL`, `BMU`, `BTN`, `BOL`, `BIH`, `BWA`, `BVT`, `BRA`, `BLZ`, `IOT`, `SLB`, `VGB`, `BRN`, `BGR`, `MMR`, `BDI`, `BLR`, `KHM`, `CMR`, `CAN`, `CPV`, `CYM`, `CAF`, `LKA`, `TCD`, `CHL`, `CHN`, `TWN`, `CXR`, `CCK`, `COL`, `COM`, `MYT`, `COG`, `COD`, `COK`, `CRI`, `HRV`, `CUB`, `CYP`, `CZE`, `BEN`, `DNK`, `DMA`, `DOM`, `ECU`, `SLV`, `GNQ`, `ETH`, `ERI`, `EST`, `FRO`, `FLK`, `SGS`, `FJI`, `FIN`, `ALA`, `FRA`, `GUF`, `PYF`, `ATF`, `DJI`, `GAB`, `GEO`, `GMB`, `PSE`, `DEU`, `GHA`, `GIB`, `KIR`, `GRC`, `GRL`, `GRD`, `GLP`, `GUM`, `GTM`, `GIN`, `GUY`, `HTI`, `HMD`, `VAT`, `HND`, `HKG`, `HUN`, `ISL`, `IND`, `IDN`, `IRN`, `IRQ`, `IRL`, `ISR`, `ITA`, `CIV`, `JAM`, `JPN`, `KAZ`, `JOR`, `KEN`, `PRK`, `KOR`, `KWT`, `KGZ`, `LAO`, `LBN`, `LSO`, `LVA`, `LBR`, `LBY`, `LIE`, `LTU`, `LUX`, `MAC`, `MDG`, `MWI`, `MYS`, `MDV`, `MLI`, `MLT`, `MTQ`, `MRT`, `MUS`, `MEX`, `MCO`, `MNG`, `MDA`, `MNE`, `MSR`, `MAR`, `MOZ`, `OMN`, `NAM`, `NRU`, `NPL`, `NLD`, `ANT`, `CUW`, `ABW`, `SXM`, `BES`, `NCL`, `VUT`, `NZL`, `NIC`, `NER`, `NGA`, `NIU`, `NFK`, `NOR`, `MNP`, `UMI`, `FSM`, `MHL`, `PLW`, `PAK`, `PAN`, `PNG`, `PRY`, `PER`, `PHL`, `PCN`, `POL`, `PRT`, `GNB`, `TLS`, `PRI`, `QAT`, `REU`, `ROU`, `RUS`, `RWA`, `BLM`, `SHN`, `KNA`, `AIA`, `LCA`, `MAF`, `SPM`, `VCT`, `SMR`, `STP`, `SAU`, `SEN`, `SRB`, `SYC`, `SLE`, `SGP`, `SVK`, `VNM`, `SVN`, `SOM`, `ZAF`, `ZWE`, `ESP`, `SSD`, `ESH`, `SDN`, `SUR`, `SJM`, `SWZ`, `SWE`, `CHE`, `SYR`, `TJK`, `THA`, `TGO`, `TKL`, `TON`, `TTO`, `ARE`, `TUN`, `TUR`, `TKM`, `TCA`, `TUV`, `UGA`, `UKR`, `MKD`, `EGY`, `GBR`, `GGY`, `JEY`, `IMN`, `TZA`, `USA`, `VIR`, `BFA`, `URY`, `UZB`, `VEN`, `WLF`, `WSM`, `YEM`, `ZMB`
        """
elif False:
    PolicyObjectSecurityGeolocationListEntryArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class PolicyObjectSecurityGeolocationListEntryArgs:
    def __init__(__self__, *,
                 continent: Optional[pulumi.Input[_builtins.str]] = None,
                 country: Optional[pulumi.Input[_builtins.str]] = None):
        """
        :param pulumi.Input[_builtins.str] continent: continent name
                 - Choices: `AF`, `AN`, `AS`, `EU`, `NA`, `OC`, `SA`
        :param pulumi.Input[_builtins.str] country: country names
                 - Choices: `AFG`, `ALB`, `ATA`, `DZA`, `ASM`, `AND`, `AGO`, `ATG`, `AZE`, `ARG`, `AUS`, `AUT`, `BHS`, `BHR`, `BGD`, `ARM`, `BRB`, `BEL`, `BMU`, `BTN`, `BOL`, `BIH`, `BWA`, `BVT`, `BRA`, `BLZ`, `IOT`, `SLB`, `VGB`, `BRN`, `BGR`, `MMR`, `BDI`, `BLR`, `KHM`, `CMR`, `CAN`, `CPV`, `CYM`, `CAF`, `LKA`, `TCD`, `CHL`, `CHN`, `TWN`, `CXR`, `CCK`, `COL`, `COM`, `MYT`, `COG`, `COD`, `COK`, `CRI`, `HRV`, `CUB`, `CYP`, `CZE`, `BEN`, `DNK`, `DMA`, `DOM`, `ECU`, `SLV`, `GNQ`, `ETH`, `ERI`, `EST`, `FRO`, `FLK`, `SGS`, `FJI`, `FIN`, `ALA`, `FRA`, `GUF`, `PYF`, `ATF`, `DJI`, `GAB`, `GEO`, `GMB`, `PSE`, `DEU`, `GHA`, `GIB`, `KIR`, `GRC`, `GRL`, `GRD`, `GLP`, `GUM`, `GTM`, `GIN`, `GUY`, `HTI`, `HMD`, `VAT`, `HND`, `HKG`, `HUN`, `ISL`, `IND`, `IDN`, `IRN`, `IRQ`, `IRL`, `ISR`, `ITA`, `CIV`, `JAM`, `JPN`, `KAZ`, `JOR`, `KEN`, `PRK`, `KOR`, `KWT`, `KGZ`, `LAO`, `LBN`, `LSO`, `LVA`, `LBR`, `LBY`, `LIE`, `LTU`, `LUX`, `MAC`, `MDG`, `MWI`, `MYS`, `MDV`, `MLI`, `MLT`, `MTQ`, `MRT`, `MUS`, `MEX`, `MCO`, `MNG`, `MDA`, `MNE`, `MSR`, `MAR`, `MOZ`, `OMN`, `NAM`, `NRU`, `NPL`, `NLD`, `ANT`, `CUW`, `ABW`, `SXM`, `BES`, `NCL`, `VUT`, `NZL`, `NIC`, `NER`, `NGA`, `NIU`, `NFK`, `NOR`, `MNP`, `UMI`, `FSM`, `MHL`, `PLW`, `PAK`, `PAN`, `PNG`, `PRY`, `PER`, `PHL`, `PCN`, `POL`, `PRT`, `GNB`, `TLS`, `PRI`, `QAT`, `REU`, `ROU`, `RUS`, `RWA`, `BLM`, `SHN`, `KNA`, `AIA`, `LCA`, `MAF`, `SPM`, `VCT`, `SMR`, `STP`, `SAU`, `SEN`, `SRB`, `SYC`, `SLE`, `SGP`, `SVK`, `VNM`, `SVN`, `SOM`, `ZAF`, `ZWE`, `ESP`, `SSD`, `ESH`, `SDN`, `SUR`, `SJM`, `SWZ`, `SWE`, `CHE`, `SYR`, `TJK`, `THA`, `TGO`, `TKL`, `TON`, `TTO`, `ARE`, `TUN`, `TUR`, `TKM`, `TCA`, `TUV`, `UGA`, `UKR`, `MKD`, `EGY`, `GBR`, `GGY`, `JEY`, `IMN`, `TZA`, `USA`, `VIR`, `BFA`, `URY`, `UZB`, `VEN`, `WLF`, `WSM`, `YEM`, `ZMB`
        """
        if continent is not None:
            pulumi.set(__self__, "continent", continent)
        if country is not None:
            pulumi.set(__self__, "country", country)

    @_builtins.property
    @pulumi.getter
    def continent(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        continent name
          - Choices: `AF`, `AN`, `AS`, `EU`, `NA`, `OC`, `SA`
        """
        return pulumi.get(self, "continent")

    @continent.setter
    def continent(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "continent", value)

    @_builtins.property
    @pulumi.getter
    def country(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        country names
          - Choices: `AFG`, `ALB`, `ATA`, `DZA`, `ASM`, `AND`, `AGO`, `ATG`, `AZE`, `ARG`, `AUS`, `AUT`, `BHS`, `BHR`, `BGD`, `ARM`, `BRB`, `BEL`, `BMU`, `BTN`, `BOL`, `BIH`, `BWA`, `BVT`, `BRA`, `BLZ`, `IOT`, `SLB`, `VGB`, `BRN`, `BGR`, `MMR`, `BDI`, `BLR`, `KHM`, `CMR`, `CAN`, `CPV`, `CYM`, `CAF`, `LKA`, `TCD`, `CHL`, `CHN`, `TWN`, `CXR`, `CCK`, `COL`, `COM`, `MYT`, `COG`, `COD`, `COK`, `CRI`, `HRV`, `CUB`, `CYP`, `CZE`, `BEN`, `DNK`, `DMA`, `DOM`, `ECU`, `SLV`, `GNQ`, `ETH`, `ERI`, `EST`, `FRO`, `FLK`, `SGS`, `FJI`, `FIN`, `ALA`, `FRA`, `GUF`, `PYF`, `ATF`, `DJI`, `GAB`, `GEO`, `GMB`, `PSE`, `DEU`, `GHA`, `GIB`, `KIR`, `GRC`, `GRL`, `GRD`, `GLP`, `GUM`, `GTM`, `GIN`, `GUY`, `HTI`, `HMD`, `VAT`, `HND`, `HKG`, `HUN`, `ISL`, `IND`, `IDN`, `IRN`, `IRQ`, `IRL`, `ISR`, `ITA`, `CIV`, `JAM`, `JPN`, `KAZ`, `JOR`, `KEN`, `PRK`, `KOR`, `KWT`, `KGZ`, `LAO`, `LBN`, `LSO`, `LVA`, `LBR`, `LBY`, `LIE`, `LTU`, `LUX`, `MAC`, `MDG`, `MWI`, `MYS`, `MDV`, `MLI`, `MLT`, `MTQ`, `MRT`, `MUS`, `MEX`, `MCO`, `MNG`, `MDA`, `MNE`, `MSR`, `MAR`, `MOZ`, `OMN`, `NAM`, `NRU`, `NPL`, `NLD`, `ANT`, `CUW`, `ABW`, `SXM`, `BES`, `NCL`, `VUT`, `NZL`, `NIC`, `NER`, `NGA`, `NIU`, `NFK`, `NOR`, `MNP`, `UMI`, `FSM`, `MHL`, `PLW`, `PAK`, `PAN`, `PNG`, `PRY`, `PER`, `PHL`, `PCN`, `POL`, `PRT`, `GNB`, `TLS`, `PRI`, `QAT`, `REU`, `ROU`, `RUS`, `RWA`, `BLM`, `SHN`, `KNA`, `AIA`, `LCA`, `MAF`, `SPM`, `VCT`, `SMR`, `STP`, `SAU`, `SEN`, `SRB`, `SYC`, `SLE`, `SGP`, `SVK`, `VNM`, `SVN`, `SOM`, `ZAF`, `ZWE`, `ESP`, `SSD`, `ESH`, `SDN`, `SUR`, `SJM`, `SWZ`, `SWE`, `CHE`, `SYR`, `TJK`, `THA`, `TGO`, `TKL`, `TON`, `TTO`, `ARE`, `TUN`, `TUR`, `TKM`, `TCA`, `TUV`, `UGA`, `UKR`, `MKD`, `EGY`, `GBR`, `GGY`, `JEY`, `IMN`, `TZA`, `USA`, `VIR`, `BFA`, `URY`, `UZB`, `VEN`, `WLF`, `WSM`, `YEM`, `ZMB`
        """
        return pulumi.get(self, "country")

    @country.setter
    def country(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "country", value)


if not MYPY:
    class PolicyObjectSecurityIdentityListEntryArgsDict(TypedDict):
        user: NotRequired[pulumi.Input[_builtins.str]]
        user_group: NotRequired[pulumi.Input[_builtins.str]]
elif False:
    PolicyObjectSecurityIdentityListEntryArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class PolicyObjectSecurityIdentityListEntryArgs:
    def __init__(__self__, *,
                 user: Optional[pulumi.Input[_builtins.str]] = None,
                 user_group: Optional[pulumi.Input[_builtins.str]] = None):
        if user is not None:
            pulumi.set(__self__, "user", user)
        if user_group is not None:
            pulumi.set(__self__, "user_group", user_group)

    @_builtins.property
    @pulumi.getter
    def user(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "user")

    @user.setter
    def user(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "user", value)

    @_builtins.property
    @pulumi.getter(name="userGroup")
    def user_group(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "user_group")

    @user_group.setter
    def user_group(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "user_group", value)


if not MYPY:
    class PolicyObjectSecurityIpsSignatureEntryArgsDict(TypedDict):
        generator_id: NotRequired[pulumi.Input[_builtins.str]]
        signature_id: NotRequired[pulumi.Input[_builtins.str]]
elif False:
    PolicyObjectSecurityIpsSignatureEntryArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class PolicyObjectSecurityIpsSignatureEntryArgs:
    def __init__(__self__, *,
                 generator_id: Optional[pulumi.Input[_builtins.str]] = None,
                 signature_id: Optional[pulumi.Input[_builtins.str]] = None):
        if generator_id is not None:
            pulumi.set(__self__, "generator_id", generator_id)
        if signature_id is not None:
            pulumi.set(__self__, "signature_id", signature_id)

    @_builtins.property
    @pulumi.getter(name="generatorId")
    def generator_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "generator_id")

    @generator_id.setter
    def generator_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "generator_id", value)

    @_builtins.property
    @pulumi.getter(name="signatureId")
    def signature_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "signature_id")

    @signature_id.setter
    def signature_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "signature_id", value)


if not MYPY:
    class PolicyObjectSecurityLocalApplicationListEntryArgsDict(TypedDict):
        app: NotRequired[pulumi.Input[_builtins.str]]
        app_family: NotRequired[pulumi.Input[_builtins.str]]
elif False:
    PolicyObjectSecurityLocalApplicationListEntryArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class PolicyObjectSecurityLocalApplicationListEntryArgs:
    def __init__(__self__, *,
                 app: Optional[pulumi.Input[_builtins.str]] = None,
                 app_family: Optional[pulumi.Input[_builtins.str]] = None):
        if app is not None:
            pulumi.set(__self__, "app", app)
        if app_family is not None:
            pulumi.set(__self__, "app_family", app_family)

    @_builtins.property
    @pulumi.getter
    def app(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "app")

    @app.setter
    def app(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "app", value)

    @_builtins.property
    @pulumi.getter(name="appFamily")
    def app_family(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "app_family")

    @app_family.setter
    def app_family(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "app_family", value)


if not MYPY:
    class PolicyObjectSecurityLocalDomainListEntryArgsDict(TypedDict):
        local_domain: NotRequired[pulumi.Input[_builtins.str]]
elif False:
    PolicyObjectSecurityLocalDomainListEntryArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class PolicyObjectSecurityLocalDomainListEntryArgs:
    def __init__(__self__, *,
                 local_domain: Optional[pulumi.Input[_builtins.str]] = None):
        if local_domain is not None:
            pulumi.set(__self__, "local_domain", local_domain)

    @_builtins.property
    @pulumi.getter(name="localDomain")
    def local_domain(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "local_domain")

    @local_domain.setter
    def local_domain(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "local_domain", value)


if not MYPY:
    class PolicyObjectSecurityPortListEntryArgsDict(TypedDict):
        port: NotRequired[pulumi.Input[_builtins.str]]
        """
        can be single port or port range
        """
elif False:
    PolicyObjectSecurityPortListEntryArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class PolicyObjectSecurityPortListEntryArgs:
    def __init__(__self__, *,
                 port: Optional[pulumi.Input[_builtins.str]] = None):
        """
        :param pulumi.Input[_builtins.str] port: can be single port or port range
        """
        if port is not None:
            pulumi.set(__self__, "port", port)

    @_builtins.property
    @pulumi.getter
    def port(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        can be single port or port range
        """
        return pulumi.get(self, "port")

    @port.setter
    def port(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "port", value)


if not MYPY:
    class PolicyObjectSecurityScalableGroupTagListEntryArgsDict(TypedDict):
        sgt_name: NotRequired[pulumi.Input[_builtins.str]]
        tag: NotRequired[pulumi.Input[_builtins.str]]
elif False:
    PolicyObjectSecurityScalableGroupTagListEntryArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class PolicyObjectSecurityScalableGroupTagListEntryArgs:
    def __init__(__self__, *,
                 sgt_name: Optional[pulumi.Input[_builtins.str]] = None,
                 tag: Optional[pulumi.Input[_builtins.str]] = None):
        if sgt_name is not None:
            pulumi.set(__self__, "sgt_name", sgt_name)
        if tag is not None:
            pulumi.set(__self__, "tag", tag)

    @_builtins.property
    @pulumi.getter(name="sgtName")
    def sgt_name(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "sgt_name")

    @sgt_name.setter
    def sgt_name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "sgt_name", value)

    @_builtins.property
    @pulumi.getter
    def tag(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "tag")

    @tag.setter
    def tag(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "tag", value)


if not MYPY:
    class PolicyObjectSecurityUrlAllowListEntryArgsDict(TypedDict):
        pattern: NotRequired[pulumi.Input[_builtins.str]]
        """
        valid url pattern
        """
elif False:
    PolicyObjectSecurityUrlAllowListEntryArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class PolicyObjectSecurityUrlAllowListEntryArgs:
    def __init__(__self__, *,
                 pattern: Optional[pulumi.Input[_builtins.str]] = None):
        """
        :param pulumi.Input[_builtins.str] pattern: valid url pattern
        """
        if pattern is not None:
            pulumi.set(__self__, "pattern", pattern)

    @_builtins.property
    @pulumi.getter
    def pattern(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        valid url pattern
        """
        return pulumi.get(self, "pattern")

    @pattern.setter
    def pattern(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "pattern", value)


if not MYPY:
    class PolicyObjectSecurityUrlBlockListEntryArgsDict(TypedDict):
        pattern: NotRequired[pulumi.Input[_builtins.str]]
        """
        valid url pattern
        """
elif False:
    PolicyObjectSecurityUrlBlockListEntryArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class PolicyObjectSecurityUrlBlockListEntryArgs:
    def __init__(__self__, *,
                 pattern: Optional[pulumi.Input[_builtins.str]] = None):
        """
        :param pulumi.Input[_builtins.str] pattern: valid url pattern
        """
        if pattern is not None:
            pulumi.set(__self__, "pattern", pattern)

    @_builtins.property
    @pulumi.getter
    def pattern(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        valid url pattern
        """
        return pulumi.get(self, "pattern")

    @pattern.setter
    def pattern(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "pattern", value)


if not MYPY:
    class PolicyObjectSlaClassListEntryArgsDict(TypedDict):
        app_probe_class_list_id: NotRequired[pulumi.Input[_builtins.str]]
        fallback_best_tunnel_criteria: NotRequired[pulumi.Input[_builtins.str]]
        """
        - Choices: `jitter`, `latency`, `loss`, `loss-latency`, `loss-jitter`, `latency-loss`, `latency-jitter`, `jitter-latency`, `jitter-loss`, `loss-latency-jitter`, `loss-jitter-latency`, `latency-loss-jitter`, `latency-jitter-loss`, `jitter-latency-loss`, `jitter-loss-latency`
        """
        fallback_best_tunnel_jitter_variance: NotRequired[pulumi.Input[_builtins.int]]
        """
        - Range: `1`-`1000`
        """
        fallback_best_tunnel_latency_variance: NotRequired[pulumi.Input[_builtins.int]]
        """
        - Range: `1`-`1000`
        """
        fallback_best_tunnel_loss_variance: NotRequired[pulumi.Input[_builtins.int]]
        """
        - Range: `0`-`100`
        """
        jitter: NotRequired[pulumi.Input[_builtins.int]]
        """
        - Range: `1`-`1000`
        """
        latency: NotRequired[pulumi.Input[_builtins.int]]
        """
        - Range: `1`-`1000`
        """
        loss: NotRequired[pulumi.Input[_builtins.int]]
        """
        - Range: `0`-`100`
        """
elif False:
    PolicyObjectSlaClassListEntryArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class PolicyObjectSlaClassListEntryArgs:
    def __init__(__self__, *,
                 app_probe_class_list_id: Optional[pulumi.Input[_builtins.str]] = None,
                 fallback_best_tunnel_criteria: Optional[pulumi.Input[_builtins.str]] = None,
                 fallback_best_tunnel_jitter_variance: Optional[pulumi.Input[_builtins.int]] = None,
                 fallback_best_tunnel_latency_variance: Optional[pulumi.Input[_builtins.int]] = None,
                 fallback_best_tunnel_loss_variance: Optional[pulumi.Input[_builtins.int]] = None,
                 jitter: Optional[pulumi.Input[_builtins.int]] = None,
                 latency: Optional[pulumi.Input[_builtins.int]] = None,
                 loss: Optional[pulumi.Input[_builtins.int]] = None):
        """
        :param pulumi.Input[_builtins.str] fallback_best_tunnel_criteria: - Choices: `jitter`, `latency`, `loss`, `loss-latency`, `loss-jitter`, `latency-loss`, `latency-jitter`, `jitter-latency`, `jitter-loss`, `loss-latency-jitter`, `loss-jitter-latency`, `latency-loss-jitter`, `latency-jitter-loss`, `jitter-latency-loss`, `jitter-loss-latency`
        :param pulumi.Input[_builtins.int] fallback_best_tunnel_jitter_variance: - Range: `1`-`1000`
        :param pulumi.Input[_builtins.int] fallback_best_tunnel_latency_variance: - Range: `1`-`1000`
        :param pulumi.Input[_builtins.int] fallback_best_tunnel_loss_variance: - Range: `0`-`100`
        :param pulumi.Input[_builtins.int] jitter: - Range: `1`-`1000`
        :param pulumi.Input[_builtins.int] latency: - Range: `1`-`1000`
        :param pulumi.Input[_builtins.int] loss: - Range: `0`-`100`
        """
        if app_probe_class_list_id is not None:
            pulumi.set(__self__, "app_probe_class_list_id", app_probe_class_list_id)
        if fallback_best_tunnel_criteria is not None:
            pulumi.set(__self__, "fallback_best_tunnel_criteria", fallback_best_tunnel_criteria)
        if fallback_best_tunnel_jitter_variance is not None:
            pulumi.set(__self__, "fallback_best_tunnel_jitter_variance", fallback_best_tunnel_jitter_variance)
        if fallback_best_tunnel_latency_variance is not None:
            pulumi.set(__self__, "fallback_best_tunnel_latency_variance", fallback_best_tunnel_latency_variance)
        if fallback_best_tunnel_loss_variance is not None:
            pulumi.set(__self__, "fallback_best_tunnel_loss_variance", fallback_best_tunnel_loss_variance)
        if jitter is not None:
            pulumi.set(__self__, "jitter", jitter)
        if latency is not None:
            pulumi.set(__self__, "latency", latency)
        if loss is not None:
            pulumi.set(__self__, "loss", loss)

    @_builtins.property
    @pulumi.getter(name="appProbeClassListId")
    def app_probe_class_list_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "app_probe_class_list_id")

    @app_probe_class_list_id.setter
    def app_probe_class_list_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "app_probe_class_list_id", value)

    @_builtins.property
    @pulumi.getter(name="fallbackBestTunnelCriteria")
    def fallback_best_tunnel_criteria(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        - Choices: `jitter`, `latency`, `loss`, `loss-latency`, `loss-jitter`, `latency-loss`, `latency-jitter`, `jitter-latency`, `jitter-loss`, `loss-latency-jitter`, `loss-jitter-latency`, `latency-loss-jitter`, `latency-jitter-loss`, `jitter-latency-loss`, `jitter-loss-latency`
        """
        return pulumi.get(self, "fallback_best_tunnel_criteria")

    @fallback_best_tunnel_criteria.setter
    def fallback_best_tunnel_criteria(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "fallback_best_tunnel_criteria", value)

    @_builtins.property
    @pulumi.getter(name="fallbackBestTunnelJitterVariance")
    def fallback_best_tunnel_jitter_variance(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        - Range: `1`-`1000`
        """
        return pulumi.get(self, "fallback_best_tunnel_jitter_variance")

    @fallback_best_tunnel_jitter_variance.setter
    def fallback_best_tunnel_jitter_variance(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "fallback_best_tunnel_jitter_variance", value)

    @_builtins.property
    @pulumi.getter(name="fallbackBestTunnelLatencyVariance")
    def fallback_best_tunnel_latency_variance(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        - Range: `1`-`1000`
        """
        return pulumi.get(self, "fallback_best_tunnel_latency_variance")

    @fallback_best_tunnel_latency_variance.setter
    def fallback_best_tunnel_latency_variance(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "fallback_best_tunnel_latency_variance", value)

    @_builtins.property
    @pulumi.getter(name="fallbackBestTunnelLossVariance")
    def fallback_best_tunnel_loss_variance(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        - Range: `0`-`100`
        """
        return pulumi.get(self, "fallback_best_tunnel_loss_variance")

    @fallback_best_tunnel_loss_variance.setter
    def fallback_best_tunnel_loss_variance(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "fallback_best_tunnel_loss_variance", value)

    @_builtins.property
    @pulumi.getter
    def jitter(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        - Range: `1`-`1000`
        """
        return pulumi.get(self, "jitter")

    @jitter.setter
    def jitter(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "jitter", value)

    @_builtins.property
    @pulumi.getter
    def latency(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        - Range: `1`-`1000`
        """
        return pulumi.get(self, "latency")

    @latency.setter
    def latency(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "latency", value)

    @_builtins.property
    @pulumi.getter
    def loss(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        - Range: `0`-`100`
        """
        return pulumi.get(self, "loss")

    @loss.setter
    def loss(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "loss", value)


if not MYPY:
    class PolicyObjectStandardCommunityListEntryArgsDict(TypedDict):
        standard_community: NotRequired[pulumi.Input[_builtins.str]]
        """
        Standard Community
        """
elif False:
    PolicyObjectStandardCommunityListEntryArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class PolicyObjectStandardCommunityListEntryArgs:
    def __init__(__self__, *,
                 standard_community: Optional[pulumi.Input[_builtins.str]] = None):
        """
        :param pulumi.Input[_builtins.str] standard_community: Standard Community
        """
        if standard_community is not None:
            pulumi.set(__self__, "standard_community", standard_community)

    @_builtins.property
    @pulumi.getter(name="standardCommunity")
    def standard_community(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Standard Community
        """
        return pulumi.get(self, "standard_community")

    @standard_community.setter
    def standard_community(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "standard_community", value)


if not MYPY:
    class PolicyObjectTlocListEntryArgsDict(TypedDict):
        color: NotRequired[pulumi.Input[_builtins.str]]
        """
        color
          - Choices: `3g`, `biz-internet`, `blue`, `bronze`, `custom1`, `custom2`, `custom3`, `default`, `gold`, `green`, `lte`, `metro-ethernet`, `mpls`, `private1`, `private2`, `private3`, `private4`, `private5`, `private6`, `public-internet`, `red`, `silver`
        """
        encapsulation: NotRequired[pulumi.Input[_builtins.str]]
        """
        encapsulation
          - Choices: `ipsec`, `gre`
        """
        preference: NotRequired[pulumi.Input[_builtins.str]]
        """
        Preference
        """
        tloc_ip: NotRequired[pulumi.Input[_builtins.str]]
        """
        tloc
        """
elif False:
    PolicyObjectTlocListEntryArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class PolicyObjectTlocListEntryArgs:
    def __init__(__self__, *,
                 color: Optional[pulumi.Input[_builtins.str]] = None,
                 encapsulation: Optional[pulumi.Input[_builtins.str]] = None,
                 preference: Optional[pulumi.Input[_builtins.str]] = None,
                 tloc_ip: Optional[pulumi.Input[_builtins.str]] = None):
        """
        :param pulumi.Input[_builtins.str] color: color
                 - Choices: `3g`, `biz-internet`, `blue`, `bronze`, `custom1`, `custom2`, `custom3`, `default`, `gold`, `green`, `lte`, `metro-ethernet`, `mpls`, `private1`, `private2`, `private3`, `private4`, `private5`, `private6`, `public-internet`, `red`, `silver`
        :param pulumi.Input[_builtins.str] encapsulation: encapsulation
                 - Choices: `ipsec`, `gre`
        :param pulumi.Input[_builtins.str] preference: Preference
        :param pulumi.Input[_builtins.str] tloc_ip: tloc
        """
        if color is not None:
            pulumi.set(__self__, "color", color)
        if encapsulation is not None:
            pulumi.set(__self__, "encapsulation", encapsulation)
        if preference is not None:
            pulumi.set(__self__, "preference", preference)
        if tloc_ip is not None:
            pulumi.set(__self__, "tloc_ip", tloc_ip)

    @_builtins.property
    @pulumi.getter
    def color(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        color
          - Choices: `3g`, `biz-internet`, `blue`, `bronze`, `custom1`, `custom2`, `custom3`, `default`, `gold`, `green`, `lte`, `metro-ethernet`, `mpls`, `private1`, `private2`, `private3`, `private4`, `private5`, `private6`, `public-internet`, `red`, `silver`
        """
        return pulumi.get(self, "color")

    @color.setter
    def color(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "color", value)

    @_builtins.property
    @pulumi.getter
    def encapsulation(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        encapsulation
          - Choices: `ipsec`, `gre`
        """
        return pulumi.get(self, "encapsulation")

    @encapsulation.setter
    def encapsulation(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "encapsulation", value)

    @_builtins.property
    @pulumi.getter
    def preference(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Preference
        """
        return pulumi.get(self, "preference")

    @preference.setter
    def preference(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "preference", value)

    @_builtins.property
    @pulumi.getter(name="tlocIp")
    def tloc_ip(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        tloc
        """
        return pulumi.get(self, "tloc_ip")

    @tloc_ip.setter
    def tloc_ip(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "tloc_ip", value)


if not MYPY:
    class PolicyObjectVpnGroupEntryArgsDict(TypedDict):
        vpn: NotRequired[pulumi.Input[_builtins.int]]
        """
        can be single vpn id or vpn id range
        """
elif False:
    PolicyObjectVpnGroupEntryArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class PolicyObjectVpnGroupEntryArgs:
    def __init__(__self__, *,
                 vpn: Optional[pulumi.Input[_builtins.int]] = None):
        """
        :param pulumi.Input[_builtins.int] vpn: can be single vpn id or vpn id range
        """
        if vpn is not None:
            pulumi.set(__self__, "vpn", vpn)

    @_builtins.property
    @pulumi.getter
    def vpn(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        can be single vpn id or vpn id range
        """
        return pulumi.get(self, "vpn")

    @vpn.setter
    def vpn(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "vpn", value)


if not MYPY:
    class PortListPolicyObjectEntryArgsDict(TypedDict):
        port: NotRequired[pulumi.Input[_builtins.str]]
        """
        Port number
        """
elif False:
    PortListPolicyObjectEntryArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class PortListPolicyObjectEntryArgs:
    def __init__(__self__, *,
                 port: Optional[pulumi.Input[_builtins.str]] = None):
        """
        :param pulumi.Input[_builtins.str] port: Port number
        """
        if port is not None:
            pulumi.set(__self__, "port", port)

    @_builtins.property
    @pulumi.getter
    def port(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Port number
        """
        return pulumi.get(self, "port")

    @port.setter
    def port(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "port", value)


if not MYPY:
    class ProtocolListPolicyObjectEntryArgsDict(TypedDict):
        protocol: NotRequired[pulumi.Input[_builtins.str]]
        """
        Protocol name
        """
elif False:
    ProtocolListPolicyObjectEntryArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ProtocolListPolicyObjectEntryArgs:
    def __init__(__self__, *,
                 protocol: Optional[pulumi.Input[_builtins.str]] = None):
        """
        :param pulumi.Input[_builtins.str] protocol: Protocol name
        """
        if protocol is not None:
            pulumi.set(__self__, "protocol", protocol)

    @_builtins.property
    @pulumi.getter
    def protocol(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Protocol name
        """
        return pulumi.get(self, "protocol")

    @protocol.setter
    def protocol(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "protocol", value)


if not MYPY:
    class QosMapPolicyDefinitionQosSchedulerArgsDict(TypedDict):
        bandwidth_percent: pulumi.Input[_builtins.int]
        """
        Bandwidth percent
          - Range: `0`-`100`
        """
        buffer_percent: pulumi.Input[_builtins.int]
        """
        Buffer percent
          - Range: `0`-`100`
        """
        class_map_id: pulumi.Input[_builtins.str]
        """
        Class map ID
        """
        drop_type: pulumi.Input[_builtins.str]
        """
        Drop type
          - Choices: `tail-drop`, `red-drop`
        """
        queue: pulumi.Input[_builtins.int]
        """
        Queue number
          - Range: `0`-`7`
        """
        scheduling_type: pulumi.Input[_builtins.str]
        """
        Scheduling type
          - Choices: `llq`, `wrr`
        """
        burst: NotRequired[pulumi.Input[_builtins.int]]
        """
        Burst size
          - Range: `5000`-`10000000`
        """
        class_map_version: NotRequired[pulumi.Input[_builtins.int]]
        """
        Class map version
        """
elif False:
    QosMapPolicyDefinitionQosSchedulerArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class QosMapPolicyDefinitionQosSchedulerArgs:
    def __init__(__self__, *,
                 bandwidth_percent: pulumi.Input[_builtins.int],
                 buffer_percent: pulumi.Input[_builtins.int],
                 class_map_id: pulumi.Input[_builtins.str],
                 drop_type: pulumi.Input[_builtins.str],
                 queue: pulumi.Input[_builtins.int],
                 scheduling_type: pulumi.Input[_builtins.str],
                 burst: Optional[pulumi.Input[_builtins.int]] = None,
                 class_map_version: Optional[pulumi.Input[_builtins.int]] = None):
        """
        :param pulumi.Input[_builtins.int] bandwidth_percent: Bandwidth percent
                 - Range: `0`-`100`
        :param pulumi.Input[_builtins.int] buffer_percent: Buffer percent
                 - Range: `0`-`100`
        :param pulumi.Input[_builtins.str] class_map_id: Class map ID
        :param pulumi.Input[_builtins.str] drop_type: Drop type
                 - Choices: `tail-drop`, `red-drop`
        :param pulumi.Input[_builtins.int] queue: Queue number
                 - Range: `0`-`7`
        :param pulumi.Input[_builtins.str] scheduling_type: Scheduling type
                 - Choices: `llq`, `wrr`
        :param pulumi.Input[_builtins.int] burst: Burst size
                 - Range: `5000`-`10000000`
        :param pulumi.Input[_builtins.int] class_map_version: Class map version
        """
        pulumi.set(__self__, "bandwidth_percent", bandwidth_percent)
        pulumi.set(__self__, "buffer_percent", buffer_percent)
        pulumi.set(__self__, "class_map_id", class_map_id)
        pulumi.set(__self__, "drop_type", drop_type)
        pulumi.set(__self__, "queue", queue)
        pulumi.set(__self__, "scheduling_type", scheduling_type)
        if burst is not None:
            pulumi.set(__self__, "burst", burst)
        if class_map_version is not None:
            pulumi.set(__self__, "class_map_version", class_map_version)

    @_builtins.property
    @pulumi.getter(name="bandwidthPercent")
    def bandwidth_percent(self) -> pulumi.Input[_builtins.int]:
        """
        Bandwidth percent
          - Range: `0`-`100`
        """
        return pulumi.get(self, "bandwidth_percent")

    @bandwidth_percent.setter
    def bandwidth_percent(self, value: pulumi.Input[_builtins.int]):
        pulumi.set(self, "bandwidth_percent", value)

    @_builtins.property
    @pulumi.getter(name="bufferPercent")
    def buffer_percent(self) -> pulumi.Input[_builtins.int]:
        """
        Buffer percent
          - Range: `0`-`100`
        """
        return pulumi.get(self, "buffer_percent")

    @buffer_percent.setter
    def buffer_percent(self, value: pulumi.Input[_builtins.int]):
        pulumi.set(self, "buffer_percent", value)

    @_builtins.property
    @pulumi.getter(name="classMapId")
    def class_map_id(self) -> pulumi.Input[_builtins.str]:
        """
        Class map ID
        """
        return pulumi.get(self, "class_map_id")

    @class_map_id.setter
    def class_map_id(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "class_map_id", value)

    @_builtins.property
    @pulumi.getter(name="dropType")
    def drop_type(self) -> pulumi.Input[_builtins.str]:
        """
        Drop type
          - Choices: `tail-drop`, `red-drop`
        """
        return pulumi.get(self, "drop_type")

    @drop_type.setter
    def drop_type(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "drop_type", value)

    @_builtins.property
    @pulumi.getter
    def queue(self) -> pulumi.Input[_builtins.int]:
        """
        Queue number
          - Range: `0`-`7`
        """
        return pulumi.get(self, "queue")

    @queue.setter
    def queue(self, value: pulumi.Input[_builtins.int]):
        pulumi.set(self, "queue", value)

    @_builtins.property
    @pulumi.getter(name="schedulingType")
    def scheduling_type(self) -> pulumi.Input[_builtins.str]:
        """
        Scheduling type
          - Choices: `llq`, `wrr`
        """
        return pulumi.get(self, "scheduling_type")

    @scheduling_type.setter
    def scheduling_type(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "scheduling_type", value)

    @_builtins.property
    @pulumi.getter
    def burst(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        Burst size
          - Range: `5000`-`10000000`
        """
        return pulumi.get(self, "burst")

    @burst.setter
    def burst(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "burst", value)

    @_builtins.property
    @pulumi.getter(name="classMapVersion")
    def class_map_version(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        Class map version
        """
        return pulumi.get(self, "class_map_version")

    @class_map_version.setter
    def class_map_version(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "class_map_version", value)


if not MYPY:
    class RegionListPolicyObjectEntryArgsDict(TypedDict):
        region_id: pulumi.Input[_builtins.str]
        """
        Region ID or range of Region IDs e.g., `2` or `3-6`
        """
elif False:
    RegionListPolicyObjectEntryArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class RegionListPolicyObjectEntryArgs:
    def __init__(__self__, *,
                 region_id: pulumi.Input[_builtins.str]):
        """
        :param pulumi.Input[_builtins.str] region_id: Region ID or range of Region IDs e.g., `2` or `3-6`
        """
        pulumi.set(__self__, "region_id", region_id)

    @_builtins.property
    @pulumi.getter(name="regionId")
    def region_id(self) -> pulumi.Input[_builtins.str]:
        """
        Region ID or range of Region IDs e.g., `2` or `3-6`
        """
        return pulumi.get(self, "region_id")

    @region_id.setter
    def region_id(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "region_id", value)


if not MYPY:
    class RewriteRulePolicyDefinitionRuleArgsDict(TypedDict):
        class_map_id: pulumi.Input[_builtins.str]
        """
        Class map ID
        """
        dscp: pulumi.Input[_builtins.int]
        """
        DSCP
          - Range: `0`-`63`
        """
        priority: pulumi.Input[_builtins.str]
        """
        Priority
          - Choices: `high`, `low`
        """
        class_map_version: NotRequired[pulumi.Input[_builtins.int]]
        """
        Class map version
        """
        layer2_cos: NotRequired[pulumi.Input[_builtins.int]]
        """
        Layer2 CoS
          - Range: `0`-`7`
        """
elif False:
    RewriteRulePolicyDefinitionRuleArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class RewriteRulePolicyDefinitionRuleArgs:
    def __init__(__self__, *,
                 class_map_id: pulumi.Input[_builtins.str],
                 dscp: pulumi.Input[_builtins.int],
                 priority: pulumi.Input[_builtins.str],
                 class_map_version: Optional[pulumi.Input[_builtins.int]] = None,
                 layer2_cos: Optional[pulumi.Input[_builtins.int]] = None):
        """
        :param pulumi.Input[_builtins.str] class_map_id: Class map ID
        :param pulumi.Input[_builtins.int] dscp: DSCP
                 - Range: `0`-`63`
        :param pulumi.Input[_builtins.str] priority: Priority
                 - Choices: `high`, `low`
        :param pulumi.Input[_builtins.int] class_map_version: Class map version
        :param pulumi.Input[_builtins.int] layer2_cos: Layer2 CoS
                 - Range: `0`-`7`
        """
        pulumi.set(__self__, "class_map_id", class_map_id)
        pulumi.set(__self__, "dscp", dscp)
        pulumi.set(__self__, "priority", priority)
        if class_map_version is not None:
            pulumi.set(__self__, "class_map_version", class_map_version)
        if layer2_cos is not None:
            pulumi.set(__self__, "layer2_cos", layer2_cos)

    @_builtins.property
    @pulumi.getter(name="classMapId")
    def class_map_id(self) -> pulumi.Input[_builtins.str]:
        """
        Class map ID
        """
        return pulumi.get(self, "class_map_id")

    @class_map_id.setter
    def class_map_id(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "class_map_id", value)

    @_builtins.property
    @pulumi.getter
    def dscp(self) -> pulumi.Input[_builtins.int]:
        """
        DSCP
          - Range: `0`-`63`
        """
        return pulumi.get(self, "dscp")

    @dscp.setter
    def dscp(self, value: pulumi.Input[_builtins.int]):
        pulumi.set(self, "dscp", value)

    @_builtins.property
    @pulumi.getter
    def priority(self) -> pulumi.Input[_builtins.str]:
        """
        Priority
          - Choices: `high`, `low`
        """
        return pulumi.get(self, "priority")

    @priority.setter
    def priority(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "priority", value)

    @_builtins.property
    @pulumi.getter(name="classMapVersion")
    def class_map_version(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        Class map version
        """
        return pulumi.get(self, "class_map_version")

    @class_map_version.setter
    def class_map_version(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "class_map_version", value)

    @_builtins.property
    @pulumi.getter(name="layer2Cos")
    def layer2_cos(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        Layer2 CoS
          - Range: `0`-`7`
        """
        return pulumi.get(self, "layer2_cos")

    @layer2_cos.setter
    def layer2_cos(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "layer2_cos", value)


if not MYPY:
    class RoutePolicyDefinitionSequenceArgsDict(TypedDict):
        id: pulumi.Input[_builtins.int]
        """
        Sequence ID
          - Range: `1`-`65534`
        """
        name: pulumi.Input[_builtins.str]
        """
        Sequence name
        """
        action_entries: NotRequired[pulumi.Input[Sequence[pulumi.Input['RoutePolicyDefinitionSequenceActionEntryArgsDict']]]]
        """
        List of action entries
        """
        base_action: NotRequired[pulumi.Input[_builtins.str]]
        """
        Base action, either `accept` or `reject`
          - Choices: `accept`, `reject`
        """
        ip_type: NotRequired[pulumi.Input[_builtins.str]]
        """
        IP version, either `ipv4` or `ipv6`
          - Choices: `ipv4`, `ipv6`
        """
        match_entries: NotRequired[pulumi.Input[Sequence[pulumi.Input['RoutePolicyDefinitionSequenceMatchEntryArgsDict']]]]
        """
        List of match entries
        """
elif False:
    RoutePolicyDefinitionSequenceArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class RoutePolicyDefinitionSequenceArgs:
    def __init__(__self__, *,
                 id: pulumi.Input[_builtins.int],
                 name: pulumi.Input[_builtins.str],
                 action_entries: Optional[pulumi.Input[Sequence[pulumi.Input['RoutePolicyDefinitionSequenceActionEntryArgs']]]] = None,
                 base_action: Optional[pulumi.Input[_builtins.str]] = None,
                 ip_type: Optional[pulumi.Input[_builtins.str]] = None,
                 match_entries: Optional[pulumi.Input[Sequence[pulumi.Input['RoutePolicyDefinitionSequenceMatchEntryArgs']]]] = None):
        """
        :param pulumi.Input[_builtins.int] id: Sequence ID
                 - Range: `1`-`65534`
        :param pulumi.Input[_builtins.str] name: Sequence name
        :param pulumi.Input[Sequence[pulumi.Input['RoutePolicyDefinitionSequenceActionEntryArgs']]] action_entries: List of action entries
        :param pulumi.Input[_builtins.str] base_action: Base action, either `accept` or `reject`
                 - Choices: `accept`, `reject`
        :param pulumi.Input[_builtins.str] ip_type: IP version, either `ipv4` or `ipv6`
                 - Choices: `ipv4`, `ipv6`
        :param pulumi.Input[Sequence[pulumi.Input['RoutePolicyDefinitionSequenceMatchEntryArgs']]] match_entries: List of match entries
        """
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "name", name)
        if action_entries is not None:
            pulumi.set(__self__, "action_entries", action_entries)
        if base_action is not None:
            pulumi.set(__self__, "base_action", base_action)
        if ip_type is not None:
            pulumi.set(__self__, "ip_type", ip_type)
        if match_entries is not None:
            pulumi.set(__self__, "match_entries", match_entries)

    @_builtins.property
    @pulumi.getter
    def id(self) -> pulumi.Input[_builtins.int]:
        """
        Sequence ID
          - Range: `1`-`65534`
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: pulumi.Input[_builtins.int]):
        pulumi.set(self, "id", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> pulumi.Input[_builtins.str]:
        """
        Sequence name
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "name", value)

    @_builtins.property
    @pulumi.getter(name="actionEntries")
    def action_entries(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['RoutePolicyDefinitionSequenceActionEntryArgs']]]]:
        """
        List of action entries
        """
        return pulumi.get(self, "action_entries")

    @action_entries.setter
    def action_entries(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['RoutePolicyDefinitionSequenceActionEntryArgs']]]]):
        pulumi.set(self, "action_entries", value)

    @_builtins.property
    @pulumi.getter(name="baseAction")
    def base_action(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Base action, either `accept` or `reject`
          - Choices: `accept`, `reject`
        """
        return pulumi.get(self, "base_action")

    @base_action.setter
    def base_action(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "base_action", value)

    @_builtins.property
    @pulumi.getter(name="ipType")
    def ip_type(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        IP version, either `ipv4` or `ipv6`
          - Choices: `ipv4`, `ipv6`
        """
        return pulumi.get(self, "ip_type")

    @ip_type.setter
    def ip_type(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "ip_type", value)

    @_builtins.property
    @pulumi.getter(name="matchEntries")
    def match_entries(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['RoutePolicyDefinitionSequenceMatchEntryArgs']]]]:
        """
        List of match entries
        """
        return pulumi.get(self, "match_entries")

    @match_entries.setter
    def match_entries(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['RoutePolicyDefinitionSequenceMatchEntryArgs']]]]):
        pulumi.set(self, "match_entries", value)


if not MYPY:
    class RoutePolicyDefinitionSequenceActionEntryArgsDict(TypedDict):
        type: pulumi.Input[_builtins.str]
        """
        Type of action entry
          - Choices: `aggregator`, `asPath`, `atomicAggregate`, `community`, `communityAdditive`, `localPreference`, `metric`, `weight`, `metricType`, `nextHop`, `ompTag`, `ospfTag`, `origin`, `originator`
        """
        aggregator: NotRequired[pulumi.Input[_builtins.int]]
        """
        Aggregator, Attribute conditional on `type` being equal to `aggregator`
          - Range: `0`-`4294967295`
        """
        aggregator_ip_address: NotRequired[pulumi.Input[_builtins.str]]
        """
        IP address, Attribute conditional on `type` being equal to `aggregator`
        """
        as_path_exclude: NotRequired[pulumi.Input[_builtins.str]]
        """
        Space separated list of ASN to exclude, Attribute conditional on `type` being equal to `asPath`
        """
        as_path_prepend: NotRequired[pulumi.Input[_builtins.str]]
        """
        Space separated list of ASN to prepend, Attribute conditional on `type` being equal to `asPath`
        """
        atomic_aggregate: NotRequired[pulumi.Input[_builtins.bool]]
        """
        Atomic aggregate, Attribute conditional on `type` being equal to `atomicAggregate`
        """
        community: NotRequired[pulumi.Input[_builtins.str]]
        """
        Community value, e.g. `1000:10000` or `internet` or `local-AS`, Attribute conditional on `type` being equal to `community`
        """
        community_additive: NotRequired[pulumi.Input[_builtins.bool]]
        """
        Community additive, Attribute conditional on `type` being equal to `communityAdditive`
        """
        community_variable: NotRequired[pulumi.Input[_builtins.str]]
        """
        Community variable, Attribute conditional on `type` being equal to `community`
        """
        local_preference: NotRequired[pulumi.Input[_builtins.int]]
        """
        Local preference, Attribute conditional on `type` being equal to `localPreference`
          - Range: `0`-`4294967295`
        """
        metric: NotRequired[pulumi.Input[_builtins.int]]
        """
        Metric, Attribute conditional on `type` being equal to `metric`
          - Range: `0`-`4294967295`
        """
        metric_type: NotRequired[pulumi.Input[_builtins.str]]
        """
        Metric type, Attribute conditional on `type` being equal to `metricType`
          - Choices: `type1`, `type2`
        """
        next_hop: NotRequired[pulumi.Input[_builtins.str]]
        """
        Next hop IP, Attribute conditional on `type` being equal to `nextHop`
        """
        omp_tag: NotRequired[pulumi.Input[_builtins.int]]
        """
        OMP tag, Attribute conditional on `type` being equal to `ompTag`
          - Range: `0`-`4294967295`
        """
        origin: NotRequired[pulumi.Input[_builtins.str]]
        """
        Origin, Attribute conditional on `type` being equal to `origin`
          - Choices: `igp`, `egp`, `incomplete`
        """
        originator: NotRequired[pulumi.Input[_builtins.str]]
        """
        Originator IP, Attribute conditional on `type` being equal to `originator`
        """
        ospf_tag: NotRequired[pulumi.Input[_builtins.int]]
        """
        OSPF tag, Attribute conditional on `type` being equal to `ospfTag`
          - Range: `0`-`4294967295`
        """
        weight: NotRequired[pulumi.Input[_builtins.int]]
        """
        Weight, Attribute conditional on `type` being equal to `weight`
          - Range: `0`-`4294967295`
        """
elif False:
    RoutePolicyDefinitionSequenceActionEntryArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class RoutePolicyDefinitionSequenceActionEntryArgs:
    def __init__(__self__, *,
                 type: pulumi.Input[_builtins.str],
                 aggregator: Optional[pulumi.Input[_builtins.int]] = None,
                 aggregator_ip_address: Optional[pulumi.Input[_builtins.str]] = None,
                 as_path_exclude: Optional[pulumi.Input[_builtins.str]] = None,
                 as_path_prepend: Optional[pulumi.Input[_builtins.str]] = None,
                 atomic_aggregate: Optional[pulumi.Input[_builtins.bool]] = None,
                 community: Optional[pulumi.Input[_builtins.str]] = None,
                 community_additive: Optional[pulumi.Input[_builtins.bool]] = None,
                 community_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 local_preference: Optional[pulumi.Input[_builtins.int]] = None,
                 metric: Optional[pulumi.Input[_builtins.int]] = None,
                 metric_type: Optional[pulumi.Input[_builtins.str]] = None,
                 next_hop: Optional[pulumi.Input[_builtins.str]] = None,
                 omp_tag: Optional[pulumi.Input[_builtins.int]] = None,
                 origin: Optional[pulumi.Input[_builtins.str]] = None,
                 originator: Optional[pulumi.Input[_builtins.str]] = None,
                 ospf_tag: Optional[pulumi.Input[_builtins.int]] = None,
                 weight: Optional[pulumi.Input[_builtins.int]] = None):
        """
        :param pulumi.Input[_builtins.str] type: Type of action entry
                 - Choices: `aggregator`, `asPath`, `atomicAggregate`, `community`, `communityAdditive`, `localPreference`, `metric`, `weight`, `metricType`, `nextHop`, `ompTag`, `ospfTag`, `origin`, `originator`
        :param pulumi.Input[_builtins.int] aggregator: Aggregator, Attribute conditional on `type` being equal to `aggregator`
                 - Range: `0`-`4294967295`
        :param pulumi.Input[_builtins.str] aggregator_ip_address: IP address, Attribute conditional on `type` being equal to `aggregator`
        :param pulumi.Input[_builtins.str] as_path_exclude: Space separated list of ASN to exclude, Attribute conditional on `type` being equal to `asPath`
        :param pulumi.Input[_builtins.str] as_path_prepend: Space separated list of ASN to prepend, Attribute conditional on `type` being equal to `asPath`
        :param pulumi.Input[_builtins.bool] atomic_aggregate: Atomic aggregate, Attribute conditional on `type` being equal to `atomicAggregate`
        :param pulumi.Input[_builtins.str] community: Community value, e.g. `1000:10000` or `internet` or `local-AS`, Attribute conditional on `type` being equal to `community`
        :param pulumi.Input[_builtins.bool] community_additive: Community additive, Attribute conditional on `type` being equal to `communityAdditive`
        :param pulumi.Input[_builtins.str] community_variable: Community variable, Attribute conditional on `type` being equal to `community`
        :param pulumi.Input[_builtins.int] local_preference: Local preference, Attribute conditional on `type` being equal to `localPreference`
                 - Range: `0`-`4294967295`
        :param pulumi.Input[_builtins.int] metric: Metric, Attribute conditional on `type` being equal to `metric`
                 - Range: `0`-`4294967295`
        :param pulumi.Input[_builtins.str] metric_type: Metric type, Attribute conditional on `type` being equal to `metricType`
                 - Choices: `type1`, `type2`
        :param pulumi.Input[_builtins.str] next_hop: Next hop IP, Attribute conditional on `type` being equal to `nextHop`
        :param pulumi.Input[_builtins.int] omp_tag: OMP tag, Attribute conditional on `type` being equal to `ompTag`
                 - Range: `0`-`4294967295`
        :param pulumi.Input[_builtins.str] origin: Origin, Attribute conditional on `type` being equal to `origin`
                 - Choices: `igp`, `egp`, `incomplete`
        :param pulumi.Input[_builtins.str] originator: Originator IP, Attribute conditional on `type` being equal to `originator`
        :param pulumi.Input[_builtins.int] ospf_tag: OSPF tag, Attribute conditional on `type` being equal to `ospfTag`
                 - Range: `0`-`4294967295`
        :param pulumi.Input[_builtins.int] weight: Weight, Attribute conditional on `type` being equal to `weight`
                 - Range: `0`-`4294967295`
        """
        pulumi.set(__self__, "type", type)
        if aggregator is not None:
            pulumi.set(__self__, "aggregator", aggregator)
        if aggregator_ip_address is not None:
            pulumi.set(__self__, "aggregator_ip_address", aggregator_ip_address)
        if as_path_exclude is not None:
            pulumi.set(__self__, "as_path_exclude", as_path_exclude)
        if as_path_prepend is not None:
            pulumi.set(__self__, "as_path_prepend", as_path_prepend)
        if atomic_aggregate is not None:
            pulumi.set(__self__, "atomic_aggregate", atomic_aggregate)
        if community is not None:
            pulumi.set(__self__, "community", community)
        if community_additive is not None:
            pulumi.set(__self__, "community_additive", community_additive)
        if community_variable is not None:
            pulumi.set(__self__, "community_variable", community_variable)
        if local_preference is not None:
            pulumi.set(__self__, "local_preference", local_preference)
        if metric is not None:
            pulumi.set(__self__, "metric", metric)
        if metric_type is not None:
            pulumi.set(__self__, "metric_type", metric_type)
        if next_hop is not None:
            pulumi.set(__self__, "next_hop", next_hop)
        if omp_tag is not None:
            pulumi.set(__self__, "omp_tag", omp_tag)
        if origin is not None:
            pulumi.set(__self__, "origin", origin)
        if originator is not None:
            pulumi.set(__self__, "originator", originator)
        if ospf_tag is not None:
            pulumi.set(__self__, "ospf_tag", ospf_tag)
        if weight is not None:
            pulumi.set(__self__, "weight", weight)

    @_builtins.property
    @pulumi.getter
    def type(self) -> pulumi.Input[_builtins.str]:
        """
        Type of action entry
          - Choices: `aggregator`, `asPath`, `atomicAggregate`, `community`, `communityAdditive`, `localPreference`, `metric`, `weight`, `metricType`, `nextHop`, `ompTag`, `ospfTag`, `origin`, `originator`
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "type", value)

    @_builtins.property
    @pulumi.getter
    def aggregator(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        Aggregator, Attribute conditional on `type` being equal to `aggregator`
          - Range: `0`-`4294967295`
        """
        return pulumi.get(self, "aggregator")

    @aggregator.setter
    def aggregator(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "aggregator", value)

    @_builtins.property
    @pulumi.getter(name="aggregatorIpAddress")
    def aggregator_ip_address(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        IP address, Attribute conditional on `type` being equal to `aggregator`
        """
        return pulumi.get(self, "aggregator_ip_address")

    @aggregator_ip_address.setter
    def aggregator_ip_address(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "aggregator_ip_address", value)

    @_builtins.property
    @pulumi.getter(name="asPathExclude")
    def as_path_exclude(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Space separated list of ASN to exclude, Attribute conditional on `type` being equal to `asPath`
        """
        return pulumi.get(self, "as_path_exclude")

    @as_path_exclude.setter
    def as_path_exclude(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "as_path_exclude", value)

    @_builtins.property
    @pulumi.getter(name="asPathPrepend")
    def as_path_prepend(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Space separated list of ASN to prepend, Attribute conditional on `type` being equal to `asPath`
        """
        return pulumi.get(self, "as_path_prepend")

    @as_path_prepend.setter
    def as_path_prepend(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "as_path_prepend", value)

    @_builtins.property
    @pulumi.getter(name="atomicAggregate")
    def atomic_aggregate(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Atomic aggregate, Attribute conditional on `type` being equal to `atomicAggregate`
        """
        return pulumi.get(self, "atomic_aggregate")

    @atomic_aggregate.setter
    def atomic_aggregate(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "atomic_aggregate", value)

    @_builtins.property
    @pulumi.getter
    def community(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Community value, e.g. `1000:10000` or `internet` or `local-AS`, Attribute conditional on `type` being equal to `community`
        """
        return pulumi.get(self, "community")

    @community.setter
    def community(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "community", value)

    @_builtins.property
    @pulumi.getter(name="communityAdditive")
    def community_additive(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Community additive, Attribute conditional on `type` being equal to `communityAdditive`
        """
        return pulumi.get(self, "community_additive")

    @community_additive.setter
    def community_additive(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "community_additive", value)

    @_builtins.property
    @pulumi.getter(name="communityVariable")
    def community_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Community variable, Attribute conditional on `type` being equal to `community`
        """
        return pulumi.get(self, "community_variable")

    @community_variable.setter
    def community_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "community_variable", value)

    @_builtins.property
    @pulumi.getter(name="localPreference")
    def local_preference(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        Local preference, Attribute conditional on `type` being equal to `localPreference`
          - Range: `0`-`4294967295`
        """
        return pulumi.get(self, "local_preference")

    @local_preference.setter
    def local_preference(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "local_preference", value)

    @_builtins.property
    @pulumi.getter
    def metric(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        Metric, Attribute conditional on `type` being equal to `metric`
          - Range: `0`-`4294967295`
        """
        return pulumi.get(self, "metric")

    @metric.setter
    def metric(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "metric", value)

    @_builtins.property
    @pulumi.getter(name="metricType")
    def metric_type(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Metric type, Attribute conditional on `type` being equal to `metricType`
          - Choices: `type1`, `type2`
        """
        return pulumi.get(self, "metric_type")

    @metric_type.setter
    def metric_type(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "metric_type", value)

    @_builtins.property
    @pulumi.getter(name="nextHop")
    def next_hop(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Next hop IP, Attribute conditional on `type` being equal to `nextHop`
        """
        return pulumi.get(self, "next_hop")

    @next_hop.setter
    def next_hop(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "next_hop", value)

    @_builtins.property
    @pulumi.getter(name="ompTag")
    def omp_tag(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        OMP tag, Attribute conditional on `type` being equal to `ompTag`
          - Range: `0`-`4294967295`
        """
        return pulumi.get(self, "omp_tag")

    @omp_tag.setter
    def omp_tag(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "omp_tag", value)

    @_builtins.property
    @pulumi.getter
    def origin(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Origin, Attribute conditional on `type` being equal to `origin`
          - Choices: `igp`, `egp`, `incomplete`
        """
        return pulumi.get(self, "origin")

    @origin.setter
    def origin(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "origin", value)

    @_builtins.property
    @pulumi.getter
    def originator(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Originator IP, Attribute conditional on `type` being equal to `originator`
        """
        return pulumi.get(self, "originator")

    @originator.setter
    def originator(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "originator", value)

    @_builtins.property
    @pulumi.getter(name="ospfTag")
    def ospf_tag(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        OSPF tag, Attribute conditional on `type` being equal to `ospfTag`
          - Range: `0`-`4294967295`
        """
        return pulumi.get(self, "ospf_tag")

    @ospf_tag.setter
    def ospf_tag(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "ospf_tag", value)

    @_builtins.property
    @pulumi.getter
    def weight(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        Weight, Attribute conditional on `type` being equal to `weight`
          - Range: `0`-`4294967295`
        """
        return pulumi.get(self, "weight")

    @weight.setter
    def weight(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "weight", value)


if not MYPY:
    class RoutePolicyDefinitionSequenceMatchEntryArgsDict(TypedDict):
        type: pulumi.Input[_builtins.str]
        """
        Type of match entry
          - Choices: `address`, `asPath`, `community`, `advancedCommunity`, `expandedCommunity`, `expandedCommunityInline`, `extCommunity`, `localPreference`, `metric`, `nextHop`, `origin`, `peer`, `ompTag`, `ospfTag`
        """
        as_path_list_id: NotRequired[pulumi.Input[_builtins.str]]
        """
        AS path list ID, Attribute conditional on `type` being equal to `asPath`
        """
        as_path_list_version: NotRequired[pulumi.Input[_builtins.int]]
        """
        AS path list version
        """
        community_list_id: NotRequired[pulumi.Input[_builtins.str]]
        """
        Community list ID, Attribute conditional on `type` being equal to `community`
        """
        community_list_ids: NotRequired[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]
        """
        Community list IDs, Attribute conditional on `type` being equal to `advancedCommunity`
        """
        community_list_match_flag: NotRequired[pulumi.Input[_builtins.str]]
        """
        Community list match flag
          - Choices: `and`, `or`, `exact`
        """
        community_list_version: NotRequired[pulumi.Input[_builtins.int]]
        """
        Community list version
        """
        community_list_versions: NotRequired[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]
        """
        Community list versions
        """
        expanded_community_list_id: NotRequired[pulumi.Input[_builtins.str]]
        """
        Expanded community list ID, Attribute conditional on `type` being equal to `expandedCommunity`
        """
        expanded_community_list_variable: NotRequired[pulumi.Input[_builtins.str]]
        """
        Expanded community list variable, Attribute conditional on `type` being equal to `expandedCommunityInline`
        """
        expanded_community_list_version: NotRequired[pulumi.Input[_builtins.int]]
        """
        Expanded community list version
        """
        extended_community_list_id: NotRequired[pulumi.Input[_builtins.str]]
        """
        Extended community list ID, Attribute conditional on `type` being equal to `extCommunity`
        """
        extended_community_list_version: NotRequired[pulumi.Input[_builtins.int]]
        """
        Extended community list version
        """
        local_preference: NotRequired[pulumi.Input[_builtins.int]]
        """
        Local preference, Attribute conditional on `type` being equal to `localPreference`
          - Range: `0`-`4294967295`
        """
        metric: NotRequired[pulumi.Input[_builtins.int]]
        """
        Metric, Attribute conditional on `type` being equal to `metric`
          - Range: `0`-`4294967295`
        """
        next_hop_prefix_list_id: NotRequired[pulumi.Input[_builtins.str]]
        """
        Next hop prefix list ID, Attribute conditional on `type` being equal to `nextHop`
        """
        next_hop_prefix_list_version: NotRequired[pulumi.Input[_builtins.int]]
        """
        Next hop prefix list version
        """
        omp_tag: NotRequired[pulumi.Input[_builtins.int]]
        """
        OMP tag, Attribute conditional on `type` being equal to `ompTag`
          - Range: `0`-`4294967295`
        """
        origin: NotRequired[pulumi.Input[_builtins.str]]
        """
        Origin, Attribute conditional on `type` being equal to `origin`
          - Choices: `igp`, `egp`, `incomplete`
        """
        ospf_tag: NotRequired[pulumi.Input[_builtins.int]]
        """
        OSPF tag, Attribute conditional on `type` being equal to `ospfTag`
          - Range: `0`-`4294967295`
        """
        peer: NotRequired[pulumi.Input[_builtins.str]]
        """
        Peer IP, Attribute conditional on `type` being equal to `peer`
        """
        prefix_list_id: NotRequired[pulumi.Input[_builtins.str]]
        """
        Prefix list ID, Attribute conditional on `type` being equal to `address`
        """
        prefix_list_version: NotRequired[pulumi.Input[_builtins.int]]
        """
        Prefix list version
        """
elif False:
    RoutePolicyDefinitionSequenceMatchEntryArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class RoutePolicyDefinitionSequenceMatchEntryArgs:
    def __init__(__self__, *,
                 type: pulumi.Input[_builtins.str],
                 as_path_list_id: Optional[pulumi.Input[_builtins.str]] = None,
                 as_path_list_version: Optional[pulumi.Input[_builtins.int]] = None,
                 community_list_id: Optional[pulumi.Input[_builtins.str]] = None,
                 community_list_ids: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 community_list_match_flag: Optional[pulumi.Input[_builtins.str]] = None,
                 community_list_version: Optional[pulumi.Input[_builtins.int]] = None,
                 community_list_versions: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 expanded_community_list_id: Optional[pulumi.Input[_builtins.str]] = None,
                 expanded_community_list_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 expanded_community_list_version: Optional[pulumi.Input[_builtins.int]] = None,
                 extended_community_list_id: Optional[pulumi.Input[_builtins.str]] = None,
                 extended_community_list_version: Optional[pulumi.Input[_builtins.int]] = None,
                 local_preference: Optional[pulumi.Input[_builtins.int]] = None,
                 metric: Optional[pulumi.Input[_builtins.int]] = None,
                 next_hop_prefix_list_id: Optional[pulumi.Input[_builtins.str]] = None,
                 next_hop_prefix_list_version: Optional[pulumi.Input[_builtins.int]] = None,
                 omp_tag: Optional[pulumi.Input[_builtins.int]] = None,
                 origin: Optional[pulumi.Input[_builtins.str]] = None,
                 ospf_tag: Optional[pulumi.Input[_builtins.int]] = None,
                 peer: Optional[pulumi.Input[_builtins.str]] = None,
                 prefix_list_id: Optional[pulumi.Input[_builtins.str]] = None,
                 prefix_list_version: Optional[pulumi.Input[_builtins.int]] = None):
        """
        :param pulumi.Input[_builtins.str] type: Type of match entry
                 - Choices: `address`, `asPath`, `community`, `advancedCommunity`, `expandedCommunity`, `expandedCommunityInline`, `extCommunity`, `localPreference`, `metric`, `nextHop`, `origin`, `peer`, `ompTag`, `ospfTag`
        :param pulumi.Input[_builtins.str] as_path_list_id: AS path list ID, Attribute conditional on `type` being equal to `asPath`
        :param pulumi.Input[_builtins.int] as_path_list_version: AS path list version
        :param pulumi.Input[_builtins.str] community_list_id: Community list ID, Attribute conditional on `type` being equal to `community`
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] community_list_ids: Community list IDs, Attribute conditional on `type` being equal to `advancedCommunity`
        :param pulumi.Input[_builtins.str] community_list_match_flag: Community list match flag
                 - Choices: `and`, `or`, `exact`
        :param pulumi.Input[_builtins.int] community_list_version: Community list version
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] community_list_versions: Community list versions
        :param pulumi.Input[_builtins.str] expanded_community_list_id: Expanded community list ID, Attribute conditional on `type` being equal to `expandedCommunity`
        :param pulumi.Input[_builtins.str] expanded_community_list_variable: Expanded community list variable, Attribute conditional on `type` being equal to `expandedCommunityInline`
        :param pulumi.Input[_builtins.int] expanded_community_list_version: Expanded community list version
        :param pulumi.Input[_builtins.str] extended_community_list_id: Extended community list ID, Attribute conditional on `type` being equal to `extCommunity`
        :param pulumi.Input[_builtins.int] extended_community_list_version: Extended community list version
        :param pulumi.Input[_builtins.int] local_preference: Local preference, Attribute conditional on `type` being equal to `localPreference`
                 - Range: `0`-`4294967295`
        :param pulumi.Input[_builtins.int] metric: Metric, Attribute conditional on `type` being equal to `metric`
                 - Range: `0`-`4294967295`
        :param pulumi.Input[_builtins.str] next_hop_prefix_list_id: Next hop prefix list ID, Attribute conditional on `type` being equal to `nextHop`
        :param pulumi.Input[_builtins.int] next_hop_prefix_list_version: Next hop prefix list version
        :param pulumi.Input[_builtins.int] omp_tag: OMP tag, Attribute conditional on `type` being equal to `ompTag`
                 - Range: `0`-`4294967295`
        :param pulumi.Input[_builtins.str] origin: Origin, Attribute conditional on `type` being equal to `origin`
                 - Choices: `igp`, `egp`, `incomplete`
        :param pulumi.Input[_builtins.int] ospf_tag: OSPF tag, Attribute conditional on `type` being equal to `ospfTag`
                 - Range: `0`-`4294967295`
        :param pulumi.Input[_builtins.str] peer: Peer IP, Attribute conditional on `type` being equal to `peer`
        :param pulumi.Input[_builtins.str] prefix_list_id: Prefix list ID, Attribute conditional on `type` being equal to `address`
        :param pulumi.Input[_builtins.int] prefix_list_version: Prefix list version
        """
        pulumi.set(__self__, "type", type)
        if as_path_list_id is not None:
            pulumi.set(__self__, "as_path_list_id", as_path_list_id)
        if as_path_list_version is not None:
            pulumi.set(__self__, "as_path_list_version", as_path_list_version)
        if community_list_id is not None:
            pulumi.set(__self__, "community_list_id", community_list_id)
        if community_list_ids is not None:
            pulumi.set(__self__, "community_list_ids", community_list_ids)
        if community_list_match_flag is not None:
            pulumi.set(__self__, "community_list_match_flag", community_list_match_flag)
        if community_list_version is not None:
            pulumi.set(__self__, "community_list_version", community_list_version)
        if community_list_versions is not None:
            pulumi.set(__self__, "community_list_versions", community_list_versions)
        if expanded_community_list_id is not None:
            pulumi.set(__self__, "expanded_community_list_id", expanded_community_list_id)
        if expanded_community_list_variable is not None:
            pulumi.set(__self__, "expanded_community_list_variable", expanded_community_list_variable)
        if expanded_community_list_version is not None:
            pulumi.set(__self__, "expanded_community_list_version", expanded_community_list_version)
        if extended_community_list_id is not None:
            pulumi.set(__self__, "extended_community_list_id", extended_community_list_id)
        if extended_community_list_version is not None:
            pulumi.set(__self__, "extended_community_list_version", extended_community_list_version)
        if local_preference is not None:
            pulumi.set(__self__, "local_preference", local_preference)
        if metric is not None:
            pulumi.set(__self__, "metric", metric)
        if next_hop_prefix_list_id is not None:
            pulumi.set(__self__, "next_hop_prefix_list_id", next_hop_prefix_list_id)
        if next_hop_prefix_list_version is not None:
            pulumi.set(__self__, "next_hop_prefix_list_version", next_hop_prefix_list_version)
        if omp_tag is not None:
            pulumi.set(__self__, "omp_tag", omp_tag)
        if origin is not None:
            pulumi.set(__self__, "origin", origin)
        if ospf_tag is not None:
            pulumi.set(__self__, "ospf_tag", ospf_tag)
        if peer is not None:
            pulumi.set(__self__, "peer", peer)
        if prefix_list_id is not None:
            pulumi.set(__self__, "prefix_list_id", prefix_list_id)
        if prefix_list_version is not None:
            pulumi.set(__self__, "prefix_list_version", prefix_list_version)

    @_builtins.property
    @pulumi.getter
    def type(self) -> pulumi.Input[_builtins.str]:
        """
        Type of match entry
          - Choices: `address`, `asPath`, `community`, `advancedCommunity`, `expandedCommunity`, `expandedCommunityInline`, `extCommunity`, `localPreference`, `metric`, `nextHop`, `origin`, `peer`, `ompTag`, `ospfTag`
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "type", value)

    @_builtins.property
    @pulumi.getter(name="asPathListId")
    def as_path_list_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        AS path list ID, Attribute conditional on `type` being equal to `asPath`
        """
        return pulumi.get(self, "as_path_list_id")

    @as_path_list_id.setter
    def as_path_list_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "as_path_list_id", value)

    @_builtins.property
    @pulumi.getter(name="asPathListVersion")
    def as_path_list_version(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        AS path list version
        """
        return pulumi.get(self, "as_path_list_version")

    @as_path_list_version.setter
    def as_path_list_version(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "as_path_list_version", value)

    @_builtins.property
    @pulumi.getter(name="communityListId")
    def community_list_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Community list ID, Attribute conditional on `type` being equal to `community`
        """
        return pulumi.get(self, "community_list_id")

    @community_list_id.setter
    def community_list_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "community_list_id", value)

    @_builtins.property
    @pulumi.getter(name="communityListIds")
    def community_list_ids(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]:
        """
        Community list IDs, Attribute conditional on `type` being equal to `advancedCommunity`
        """
        return pulumi.get(self, "community_list_ids")

    @community_list_ids.setter
    def community_list_ids(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "community_list_ids", value)

    @_builtins.property
    @pulumi.getter(name="communityListMatchFlag")
    def community_list_match_flag(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Community list match flag
          - Choices: `and`, `or`, `exact`
        """
        return pulumi.get(self, "community_list_match_flag")

    @community_list_match_flag.setter
    def community_list_match_flag(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "community_list_match_flag", value)

    @_builtins.property
    @pulumi.getter(name="communityListVersion")
    def community_list_version(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        Community list version
        """
        return pulumi.get(self, "community_list_version")

    @community_list_version.setter
    def community_list_version(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "community_list_version", value)

    @_builtins.property
    @pulumi.getter(name="communityListVersions")
    def community_list_versions(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]:
        """
        Community list versions
        """
        return pulumi.get(self, "community_list_versions")

    @community_list_versions.setter
    def community_list_versions(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "community_list_versions", value)

    @_builtins.property
    @pulumi.getter(name="expandedCommunityListId")
    def expanded_community_list_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Expanded community list ID, Attribute conditional on `type` being equal to `expandedCommunity`
        """
        return pulumi.get(self, "expanded_community_list_id")

    @expanded_community_list_id.setter
    def expanded_community_list_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "expanded_community_list_id", value)

    @_builtins.property
    @pulumi.getter(name="expandedCommunityListVariable")
    def expanded_community_list_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Expanded community list variable, Attribute conditional on `type` being equal to `expandedCommunityInline`
        """
        return pulumi.get(self, "expanded_community_list_variable")

    @expanded_community_list_variable.setter
    def expanded_community_list_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "expanded_community_list_variable", value)

    @_builtins.property
    @pulumi.getter(name="expandedCommunityListVersion")
    def expanded_community_list_version(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        Expanded community list version
        """
        return pulumi.get(self, "expanded_community_list_version")

    @expanded_community_list_version.setter
    def expanded_community_list_version(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "expanded_community_list_version", value)

    @_builtins.property
    @pulumi.getter(name="extendedCommunityListId")
    def extended_community_list_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Extended community list ID, Attribute conditional on `type` being equal to `extCommunity`
        """
        return pulumi.get(self, "extended_community_list_id")

    @extended_community_list_id.setter
    def extended_community_list_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "extended_community_list_id", value)

    @_builtins.property
    @pulumi.getter(name="extendedCommunityListVersion")
    def extended_community_list_version(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        Extended community list version
        """
        return pulumi.get(self, "extended_community_list_version")

    @extended_community_list_version.setter
    def extended_community_list_version(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "extended_community_list_version", value)

    @_builtins.property
    @pulumi.getter(name="localPreference")
    def local_preference(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        Local preference, Attribute conditional on `type` being equal to `localPreference`
          - Range: `0`-`4294967295`
        """
        return pulumi.get(self, "local_preference")

    @local_preference.setter
    def local_preference(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "local_preference", value)

    @_builtins.property
    @pulumi.getter
    def metric(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        Metric, Attribute conditional on `type` being equal to `metric`
          - Range: `0`-`4294967295`
        """
        return pulumi.get(self, "metric")

    @metric.setter
    def metric(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "metric", value)

    @_builtins.property
    @pulumi.getter(name="nextHopPrefixListId")
    def next_hop_prefix_list_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Next hop prefix list ID, Attribute conditional on `type` being equal to `nextHop`
        """
        return pulumi.get(self, "next_hop_prefix_list_id")

    @next_hop_prefix_list_id.setter
    def next_hop_prefix_list_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "next_hop_prefix_list_id", value)

    @_builtins.property
    @pulumi.getter(name="nextHopPrefixListVersion")
    def next_hop_prefix_list_version(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        Next hop prefix list version
        """
        return pulumi.get(self, "next_hop_prefix_list_version")

    @next_hop_prefix_list_version.setter
    def next_hop_prefix_list_version(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "next_hop_prefix_list_version", value)

    @_builtins.property
    @pulumi.getter(name="ompTag")
    def omp_tag(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        OMP tag, Attribute conditional on `type` being equal to `ompTag`
          - Range: `0`-`4294967295`
        """
        return pulumi.get(self, "omp_tag")

    @omp_tag.setter
    def omp_tag(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "omp_tag", value)

    @_builtins.property
    @pulumi.getter
    def origin(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Origin, Attribute conditional on `type` being equal to `origin`
          - Choices: `igp`, `egp`, `incomplete`
        """
        return pulumi.get(self, "origin")

    @origin.setter
    def origin(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "origin", value)

    @_builtins.property
    @pulumi.getter(name="ospfTag")
    def ospf_tag(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        OSPF tag, Attribute conditional on `type` being equal to `ospfTag`
          - Range: `0`-`4294967295`
        """
        return pulumi.get(self, "ospf_tag")

    @ospf_tag.setter
    def ospf_tag(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "ospf_tag", value)

    @_builtins.property
    @pulumi.getter
    def peer(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Peer IP, Attribute conditional on `type` being equal to `peer`
        """
        return pulumi.get(self, "peer")

    @peer.setter
    def peer(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "peer", value)

    @_builtins.property
    @pulumi.getter(name="prefixListId")
    def prefix_list_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Prefix list ID, Attribute conditional on `type` being equal to `address`
        """
        return pulumi.get(self, "prefix_list_id")

    @prefix_list_id.setter
    def prefix_list_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "prefix_list_id", value)

    @_builtins.property
    @pulumi.getter(name="prefixListVersion")
    def prefix_list_version(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        Prefix list version
        """
        return pulumi.get(self, "prefix_list_version")

    @prefix_list_version.setter
    def prefix_list_version(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "prefix_list_version", value)


if not MYPY:
    class RuleSetPolicyDefinitionRuleArgsDict(TypedDict):
        name: pulumi.Input[_builtins.str]
        """
        The name of the rule
        """
        order: pulumi.Input[_builtins.int]
        """
        The order of the rule
        """
        destination_data_fqdn_prefix_list_id: NotRequired[pulumi.Input[_builtins.str]]
        """
        Destination data FQDN prefix list ID
        """
        destination_data_fqdn_prefix_list_version: NotRequired[pulumi.Input[_builtins.int]]
        """
        Destination data FQDN prefix list version
        """
        destination_data_ipv4_prefix_list_id: NotRequired[pulumi.Input[_builtins.str]]
        """
        Destination data IPv4 prefix list ID
        """
        destination_data_ipv4_prefix_list_version: NotRequired[pulumi.Input[_builtins.int]]
        """
        Destination data IPv4 prefix list version
        """
        destination_fqdn: NotRequired[pulumi.Input[_builtins.str]]
        """
        Destination fully qualified domain name
        """
        destination_geo_location: NotRequired[pulumi.Input[_builtins.str]]
        """
        Destination geo location
        """
        destination_geo_location_list_id: NotRequired[pulumi.Input[_builtins.str]]
        """
        Destination geo location list ID
        """
        destination_geo_location_list_version: NotRequired[pulumi.Input[_builtins.int]]
        """
        Destination geo location list version
        """
        destination_ipv4_prefix: NotRequired[pulumi.Input[_builtins.str]]
        """
        Destination IPv4 prefix
        """
        destination_ipv4_prefix_variable: NotRequired[pulumi.Input[_builtins.str]]
        """
        Destination IPv4 prefix variable name
        """
        destination_object_group_id: NotRequired[pulumi.Input[_builtins.str]]
        """
        Destination object group ID
        """
        destination_object_group_version: NotRequired[pulumi.Input[_builtins.int]]
        """
        Destination object group version
        """
        destination_port: NotRequired[pulumi.Input[_builtins.str]]
        """
        Destination port or range of ports
        """
        destination_port_list_id: NotRequired[pulumi.Input[_builtins.str]]
        """
        Destination port list ID
        """
        destination_port_list_version: NotRequired[pulumi.Input[_builtins.int]]
        """
        Destination port list version
        """
        protocol: NotRequired[pulumi.Input[_builtins.str]]
        """
        Protocol name
        """
        protocol_list_id: NotRequired[pulumi.Input[_builtins.str]]
        """
        Protocol list ID
        """
        protocol_list_version: NotRequired[pulumi.Input[_builtins.int]]
        """
        Protocol list version
        """
        protocol_number: NotRequired[pulumi.Input[_builtins.int]]
        """
        Protocol number
          - Range: `0`-`255`
        """
        source_data_fqdn_prefix_list_id: NotRequired[pulumi.Input[_builtins.str]]
        """
        Source data FQDN prefix list ID
        """
        source_data_fqdn_prefix_list_version: NotRequired[pulumi.Input[_builtins.int]]
        """
        Source data FQDN prefix list version
        """
        source_data_ipv4_prefix_list_id: NotRequired[pulumi.Input[_builtins.str]]
        """
        Source data IPv4 prefix list ID
        """
        source_data_ipv4_prefix_list_version: NotRequired[pulumi.Input[_builtins.int]]
        """
        Source data IPv4 prefix list version
        """
        source_fqdn: NotRequired[pulumi.Input[_builtins.str]]
        """
        Source fully qualified domain name
        """
        source_geo_location: NotRequired[pulumi.Input[_builtins.str]]
        """
        Source geo location
        """
        source_geo_location_list_id: NotRequired[pulumi.Input[_builtins.str]]
        """
        Source geo location list ID
        """
        source_geo_location_list_version: NotRequired[pulumi.Input[_builtins.int]]
        """
        Source geo location list version
        """
        source_ipv4_prefix: NotRequired[pulumi.Input[_builtins.str]]
        """
        Source IPv4 prefix
        """
        source_ipv4_prefix_variable: NotRequired[pulumi.Input[_builtins.str]]
        """
        Source IPv4 prefix variable name
        """
        source_object_group_id: NotRequired[pulumi.Input[_builtins.str]]
        """
        Source object group ID
        """
        source_object_group_version: NotRequired[pulumi.Input[_builtins.int]]
        """
        Source object group version
        """
        source_port: NotRequired[pulumi.Input[_builtins.str]]
        """
        Source port or range of ports
        """
        source_port_list_id: NotRequired[pulumi.Input[_builtins.str]]
        """
        Source port list ID
        """
        source_port_list_version: NotRequired[pulumi.Input[_builtins.int]]
        """
        Source port list version
        """
elif False:
    RuleSetPolicyDefinitionRuleArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class RuleSetPolicyDefinitionRuleArgs:
    def __init__(__self__, *,
                 name: pulumi.Input[_builtins.str],
                 order: pulumi.Input[_builtins.int],
                 destination_data_fqdn_prefix_list_id: Optional[pulumi.Input[_builtins.str]] = None,
                 destination_data_fqdn_prefix_list_version: Optional[pulumi.Input[_builtins.int]] = None,
                 destination_data_ipv4_prefix_list_id: Optional[pulumi.Input[_builtins.str]] = None,
                 destination_data_ipv4_prefix_list_version: Optional[pulumi.Input[_builtins.int]] = None,
                 destination_fqdn: Optional[pulumi.Input[_builtins.str]] = None,
                 destination_geo_location: Optional[pulumi.Input[_builtins.str]] = None,
                 destination_geo_location_list_id: Optional[pulumi.Input[_builtins.str]] = None,
                 destination_geo_location_list_version: Optional[pulumi.Input[_builtins.int]] = None,
                 destination_ipv4_prefix: Optional[pulumi.Input[_builtins.str]] = None,
                 destination_ipv4_prefix_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 destination_object_group_id: Optional[pulumi.Input[_builtins.str]] = None,
                 destination_object_group_version: Optional[pulumi.Input[_builtins.int]] = None,
                 destination_port: Optional[pulumi.Input[_builtins.str]] = None,
                 destination_port_list_id: Optional[pulumi.Input[_builtins.str]] = None,
                 destination_port_list_version: Optional[pulumi.Input[_builtins.int]] = None,
                 protocol: Optional[pulumi.Input[_builtins.str]] = None,
                 protocol_list_id: Optional[pulumi.Input[_builtins.str]] = None,
                 protocol_list_version: Optional[pulumi.Input[_builtins.int]] = None,
                 protocol_number: Optional[pulumi.Input[_builtins.int]] = None,
                 source_data_fqdn_prefix_list_id: Optional[pulumi.Input[_builtins.str]] = None,
                 source_data_fqdn_prefix_list_version: Optional[pulumi.Input[_builtins.int]] = None,
                 source_data_ipv4_prefix_list_id: Optional[pulumi.Input[_builtins.str]] = None,
                 source_data_ipv4_prefix_list_version: Optional[pulumi.Input[_builtins.int]] = None,
                 source_fqdn: Optional[pulumi.Input[_builtins.str]] = None,
                 source_geo_location: Optional[pulumi.Input[_builtins.str]] = None,
                 source_geo_location_list_id: Optional[pulumi.Input[_builtins.str]] = None,
                 source_geo_location_list_version: Optional[pulumi.Input[_builtins.int]] = None,
                 source_ipv4_prefix: Optional[pulumi.Input[_builtins.str]] = None,
                 source_ipv4_prefix_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 source_object_group_id: Optional[pulumi.Input[_builtins.str]] = None,
                 source_object_group_version: Optional[pulumi.Input[_builtins.int]] = None,
                 source_port: Optional[pulumi.Input[_builtins.str]] = None,
                 source_port_list_id: Optional[pulumi.Input[_builtins.str]] = None,
                 source_port_list_version: Optional[pulumi.Input[_builtins.int]] = None):
        """
        :param pulumi.Input[_builtins.str] name: The name of the rule
        :param pulumi.Input[_builtins.int] order: The order of the rule
        :param pulumi.Input[_builtins.str] destination_data_fqdn_prefix_list_id: Destination data FQDN prefix list ID
        :param pulumi.Input[_builtins.int] destination_data_fqdn_prefix_list_version: Destination data FQDN prefix list version
        :param pulumi.Input[_builtins.str] destination_data_ipv4_prefix_list_id: Destination data IPv4 prefix list ID
        :param pulumi.Input[_builtins.int] destination_data_ipv4_prefix_list_version: Destination data IPv4 prefix list version
        :param pulumi.Input[_builtins.str] destination_fqdn: Destination fully qualified domain name
        :param pulumi.Input[_builtins.str] destination_geo_location: Destination geo location
        :param pulumi.Input[_builtins.str] destination_geo_location_list_id: Destination geo location list ID
        :param pulumi.Input[_builtins.int] destination_geo_location_list_version: Destination geo location list version
        :param pulumi.Input[_builtins.str] destination_ipv4_prefix: Destination IPv4 prefix
        :param pulumi.Input[_builtins.str] destination_ipv4_prefix_variable: Destination IPv4 prefix variable name
        :param pulumi.Input[_builtins.str] destination_object_group_id: Destination object group ID
        :param pulumi.Input[_builtins.int] destination_object_group_version: Destination object group version
        :param pulumi.Input[_builtins.str] destination_port: Destination port or range of ports
        :param pulumi.Input[_builtins.str] destination_port_list_id: Destination port list ID
        :param pulumi.Input[_builtins.int] destination_port_list_version: Destination port list version
        :param pulumi.Input[_builtins.str] protocol: Protocol name
        :param pulumi.Input[_builtins.str] protocol_list_id: Protocol list ID
        :param pulumi.Input[_builtins.int] protocol_list_version: Protocol list version
        :param pulumi.Input[_builtins.int] protocol_number: Protocol number
                 - Range: `0`-`255`
        :param pulumi.Input[_builtins.str] source_data_fqdn_prefix_list_id: Source data FQDN prefix list ID
        :param pulumi.Input[_builtins.int] source_data_fqdn_prefix_list_version: Source data FQDN prefix list version
        :param pulumi.Input[_builtins.str] source_data_ipv4_prefix_list_id: Source data IPv4 prefix list ID
        :param pulumi.Input[_builtins.int] source_data_ipv4_prefix_list_version: Source data IPv4 prefix list version
        :param pulumi.Input[_builtins.str] source_fqdn: Source fully qualified domain name
        :param pulumi.Input[_builtins.str] source_geo_location: Source geo location
        :param pulumi.Input[_builtins.str] source_geo_location_list_id: Source geo location list ID
        :param pulumi.Input[_builtins.int] source_geo_location_list_version: Source geo location list version
        :param pulumi.Input[_builtins.str] source_ipv4_prefix: Source IPv4 prefix
        :param pulumi.Input[_builtins.str] source_ipv4_prefix_variable: Source IPv4 prefix variable name
        :param pulumi.Input[_builtins.str] source_object_group_id: Source object group ID
        :param pulumi.Input[_builtins.int] source_object_group_version: Source object group version
        :param pulumi.Input[_builtins.str] source_port: Source port or range of ports
        :param pulumi.Input[_builtins.str] source_port_list_id: Source port list ID
        :param pulumi.Input[_builtins.int] source_port_list_version: Source port list version
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "order", order)
        if destination_data_fqdn_prefix_list_id is not None:
            pulumi.set(__self__, "destination_data_fqdn_prefix_list_id", destination_data_fqdn_prefix_list_id)
        if destination_data_fqdn_prefix_list_version is not None:
            pulumi.set(__self__, "destination_data_fqdn_prefix_list_version", destination_data_fqdn_prefix_list_version)
        if destination_data_ipv4_prefix_list_id is not None:
            pulumi.set(__self__, "destination_data_ipv4_prefix_list_id", destination_data_ipv4_prefix_list_id)
        if destination_data_ipv4_prefix_list_version is not None:
            pulumi.set(__self__, "destination_data_ipv4_prefix_list_version", destination_data_ipv4_prefix_list_version)
        if destination_fqdn is not None:
            pulumi.set(__self__, "destination_fqdn", destination_fqdn)
        if destination_geo_location is not None:
            pulumi.set(__self__, "destination_geo_location", destination_geo_location)
        if destination_geo_location_list_id is not None:
            pulumi.set(__self__, "destination_geo_location_list_id", destination_geo_location_list_id)
        if destination_geo_location_list_version is not None:
            pulumi.set(__self__, "destination_geo_location_list_version", destination_geo_location_list_version)
        if destination_ipv4_prefix is not None:
            pulumi.set(__self__, "destination_ipv4_prefix", destination_ipv4_prefix)
        if destination_ipv4_prefix_variable is not None:
            pulumi.set(__self__, "destination_ipv4_prefix_variable", destination_ipv4_prefix_variable)
        if destination_object_group_id is not None:
            pulumi.set(__self__, "destination_object_group_id", destination_object_group_id)
        if destination_object_group_version is not None:
            pulumi.set(__self__, "destination_object_group_version", destination_object_group_version)
        if destination_port is not None:
            pulumi.set(__self__, "destination_port", destination_port)
        if destination_port_list_id is not None:
            pulumi.set(__self__, "destination_port_list_id", destination_port_list_id)
        if destination_port_list_version is not None:
            pulumi.set(__self__, "destination_port_list_version", destination_port_list_version)
        if protocol is not None:
            pulumi.set(__self__, "protocol", protocol)
        if protocol_list_id is not None:
            pulumi.set(__self__, "protocol_list_id", protocol_list_id)
        if protocol_list_version is not None:
            pulumi.set(__self__, "protocol_list_version", protocol_list_version)
        if protocol_number is not None:
            pulumi.set(__self__, "protocol_number", protocol_number)
        if source_data_fqdn_prefix_list_id is not None:
            pulumi.set(__self__, "source_data_fqdn_prefix_list_id", source_data_fqdn_prefix_list_id)
        if source_data_fqdn_prefix_list_version is not None:
            pulumi.set(__self__, "source_data_fqdn_prefix_list_version", source_data_fqdn_prefix_list_version)
        if source_data_ipv4_prefix_list_id is not None:
            pulumi.set(__self__, "source_data_ipv4_prefix_list_id", source_data_ipv4_prefix_list_id)
        if source_data_ipv4_prefix_list_version is not None:
            pulumi.set(__self__, "source_data_ipv4_prefix_list_version", source_data_ipv4_prefix_list_version)
        if source_fqdn is not None:
            pulumi.set(__self__, "source_fqdn", source_fqdn)
        if source_geo_location is not None:
            pulumi.set(__self__, "source_geo_location", source_geo_location)
        if source_geo_location_list_id is not None:
            pulumi.set(__self__, "source_geo_location_list_id", source_geo_location_list_id)
        if source_geo_location_list_version is not None:
            pulumi.set(__self__, "source_geo_location_list_version", source_geo_location_list_version)
        if source_ipv4_prefix is not None:
            pulumi.set(__self__, "source_ipv4_prefix", source_ipv4_prefix)
        if source_ipv4_prefix_variable is not None:
            pulumi.set(__self__, "source_ipv4_prefix_variable", source_ipv4_prefix_variable)
        if source_object_group_id is not None:
            pulumi.set(__self__, "source_object_group_id", source_object_group_id)
        if source_object_group_version is not None:
            pulumi.set(__self__, "source_object_group_version", source_object_group_version)
        if source_port is not None:
            pulumi.set(__self__, "source_port", source_port)
        if source_port_list_id is not None:
            pulumi.set(__self__, "source_port_list_id", source_port_list_id)
        if source_port_list_version is not None:
            pulumi.set(__self__, "source_port_list_version", source_port_list_version)

    @_builtins.property
    @pulumi.getter
    def name(self) -> pulumi.Input[_builtins.str]:
        """
        The name of the rule
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "name", value)

    @_builtins.property
    @pulumi.getter
    def order(self) -> pulumi.Input[_builtins.int]:
        """
        The order of the rule
        """
        return pulumi.get(self, "order")

    @order.setter
    def order(self, value: pulumi.Input[_builtins.int]):
        pulumi.set(self, "order", value)

    @_builtins.property
    @pulumi.getter(name="destinationDataFqdnPrefixListId")
    def destination_data_fqdn_prefix_list_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Destination data FQDN prefix list ID
        """
        return pulumi.get(self, "destination_data_fqdn_prefix_list_id")

    @destination_data_fqdn_prefix_list_id.setter
    def destination_data_fqdn_prefix_list_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "destination_data_fqdn_prefix_list_id", value)

    @_builtins.property
    @pulumi.getter(name="destinationDataFqdnPrefixListVersion")
    def destination_data_fqdn_prefix_list_version(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        Destination data FQDN prefix list version
        """
        return pulumi.get(self, "destination_data_fqdn_prefix_list_version")

    @destination_data_fqdn_prefix_list_version.setter
    def destination_data_fqdn_prefix_list_version(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "destination_data_fqdn_prefix_list_version", value)

    @_builtins.property
    @pulumi.getter(name="destinationDataIpv4PrefixListId")
    def destination_data_ipv4_prefix_list_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Destination data IPv4 prefix list ID
        """
        return pulumi.get(self, "destination_data_ipv4_prefix_list_id")

    @destination_data_ipv4_prefix_list_id.setter
    def destination_data_ipv4_prefix_list_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "destination_data_ipv4_prefix_list_id", value)

    @_builtins.property
    @pulumi.getter(name="destinationDataIpv4PrefixListVersion")
    def destination_data_ipv4_prefix_list_version(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        Destination data IPv4 prefix list version
        """
        return pulumi.get(self, "destination_data_ipv4_prefix_list_version")

    @destination_data_ipv4_prefix_list_version.setter
    def destination_data_ipv4_prefix_list_version(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "destination_data_ipv4_prefix_list_version", value)

    @_builtins.property
    @pulumi.getter(name="destinationFqdn")
    def destination_fqdn(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Destination fully qualified domain name
        """
        return pulumi.get(self, "destination_fqdn")

    @destination_fqdn.setter
    def destination_fqdn(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "destination_fqdn", value)

    @_builtins.property
    @pulumi.getter(name="destinationGeoLocation")
    def destination_geo_location(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Destination geo location
        """
        return pulumi.get(self, "destination_geo_location")

    @destination_geo_location.setter
    def destination_geo_location(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "destination_geo_location", value)

    @_builtins.property
    @pulumi.getter(name="destinationGeoLocationListId")
    def destination_geo_location_list_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Destination geo location list ID
        """
        return pulumi.get(self, "destination_geo_location_list_id")

    @destination_geo_location_list_id.setter
    def destination_geo_location_list_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "destination_geo_location_list_id", value)

    @_builtins.property
    @pulumi.getter(name="destinationGeoLocationListVersion")
    def destination_geo_location_list_version(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        Destination geo location list version
        """
        return pulumi.get(self, "destination_geo_location_list_version")

    @destination_geo_location_list_version.setter
    def destination_geo_location_list_version(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "destination_geo_location_list_version", value)

    @_builtins.property
    @pulumi.getter(name="destinationIpv4Prefix")
    def destination_ipv4_prefix(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Destination IPv4 prefix
        """
        return pulumi.get(self, "destination_ipv4_prefix")

    @destination_ipv4_prefix.setter
    def destination_ipv4_prefix(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "destination_ipv4_prefix", value)

    @_builtins.property
    @pulumi.getter(name="destinationIpv4PrefixVariable")
    def destination_ipv4_prefix_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Destination IPv4 prefix variable name
        """
        return pulumi.get(self, "destination_ipv4_prefix_variable")

    @destination_ipv4_prefix_variable.setter
    def destination_ipv4_prefix_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "destination_ipv4_prefix_variable", value)

    @_builtins.property
    @pulumi.getter(name="destinationObjectGroupId")
    def destination_object_group_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Destination object group ID
        """
        return pulumi.get(self, "destination_object_group_id")

    @destination_object_group_id.setter
    def destination_object_group_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "destination_object_group_id", value)

    @_builtins.property
    @pulumi.getter(name="destinationObjectGroupVersion")
    def destination_object_group_version(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        Destination object group version
        """
        return pulumi.get(self, "destination_object_group_version")

    @destination_object_group_version.setter
    def destination_object_group_version(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "destination_object_group_version", value)

    @_builtins.property
    @pulumi.getter(name="destinationPort")
    def destination_port(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Destination port or range of ports
        """
        return pulumi.get(self, "destination_port")

    @destination_port.setter
    def destination_port(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "destination_port", value)

    @_builtins.property
    @pulumi.getter(name="destinationPortListId")
    def destination_port_list_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Destination port list ID
        """
        return pulumi.get(self, "destination_port_list_id")

    @destination_port_list_id.setter
    def destination_port_list_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "destination_port_list_id", value)

    @_builtins.property
    @pulumi.getter(name="destinationPortListVersion")
    def destination_port_list_version(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        Destination port list version
        """
        return pulumi.get(self, "destination_port_list_version")

    @destination_port_list_version.setter
    def destination_port_list_version(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "destination_port_list_version", value)

    @_builtins.property
    @pulumi.getter
    def protocol(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Protocol name
        """
        return pulumi.get(self, "protocol")

    @protocol.setter
    def protocol(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "protocol", value)

    @_builtins.property
    @pulumi.getter(name="protocolListId")
    def protocol_list_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Protocol list ID
        """
        return pulumi.get(self, "protocol_list_id")

    @protocol_list_id.setter
    def protocol_list_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "protocol_list_id", value)

    @_builtins.property
    @pulumi.getter(name="protocolListVersion")
    def protocol_list_version(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        Protocol list version
        """
        return pulumi.get(self, "protocol_list_version")

    @protocol_list_version.setter
    def protocol_list_version(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "protocol_list_version", value)

    @_builtins.property
    @pulumi.getter(name="protocolNumber")
    def protocol_number(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        Protocol number
          - Range: `0`-`255`
        """
        return pulumi.get(self, "protocol_number")

    @protocol_number.setter
    def protocol_number(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "protocol_number", value)

    @_builtins.property
    @pulumi.getter(name="sourceDataFqdnPrefixListId")
    def source_data_fqdn_prefix_list_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Source data FQDN prefix list ID
        """
        return pulumi.get(self, "source_data_fqdn_prefix_list_id")

    @source_data_fqdn_prefix_list_id.setter
    def source_data_fqdn_prefix_list_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "source_data_fqdn_prefix_list_id", value)

    @_builtins.property
    @pulumi.getter(name="sourceDataFqdnPrefixListVersion")
    def source_data_fqdn_prefix_list_version(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        Source data FQDN prefix list version
        """
        return pulumi.get(self, "source_data_fqdn_prefix_list_version")

    @source_data_fqdn_prefix_list_version.setter
    def source_data_fqdn_prefix_list_version(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "source_data_fqdn_prefix_list_version", value)

    @_builtins.property
    @pulumi.getter(name="sourceDataIpv4PrefixListId")
    def source_data_ipv4_prefix_list_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Source data IPv4 prefix list ID
        """
        return pulumi.get(self, "source_data_ipv4_prefix_list_id")

    @source_data_ipv4_prefix_list_id.setter
    def source_data_ipv4_prefix_list_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "source_data_ipv4_prefix_list_id", value)

    @_builtins.property
    @pulumi.getter(name="sourceDataIpv4PrefixListVersion")
    def source_data_ipv4_prefix_list_version(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        Source data IPv4 prefix list version
        """
        return pulumi.get(self, "source_data_ipv4_prefix_list_version")

    @source_data_ipv4_prefix_list_version.setter
    def source_data_ipv4_prefix_list_version(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "source_data_ipv4_prefix_list_version", value)

    @_builtins.property
    @pulumi.getter(name="sourceFqdn")
    def source_fqdn(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Source fully qualified domain name
        """
        return pulumi.get(self, "source_fqdn")

    @source_fqdn.setter
    def source_fqdn(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "source_fqdn", value)

    @_builtins.property
    @pulumi.getter(name="sourceGeoLocation")
    def source_geo_location(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Source geo location
        """
        return pulumi.get(self, "source_geo_location")

    @source_geo_location.setter
    def source_geo_location(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "source_geo_location", value)

    @_builtins.property
    @pulumi.getter(name="sourceGeoLocationListId")
    def source_geo_location_list_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Source geo location list ID
        """
        return pulumi.get(self, "source_geo_location_list_id")

    @source_geo_location_list_id.setter
    def source_geo_location_list_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "source_geo_location_list_id", value)

    @_builtins.property
    @pulumi.getter(name="sourceGeoLocationListVersion")
    def source_geo_location_list_version(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        Source geo location list version
        """
        return pulumi.get(self, "source_geo_location_list_version")

    @source_geo_location_list_version.setter
    def source_geo_location_list_version(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "source_geo_location_list_version", value)

    @_builtins.property
    @pulumi.getter(name="sourceIpv4Prefix")
    def source_ipv4_prefix(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Source IPv4 prefix
        """
        return pulumi.get(self, "source_ipv4_prefix")

    @source_ipv4_prefix.setter
    def source_ipv4_prefix(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "source_ipv4_prefix", value)

    @_builtins.property
    @pulumi.getter(name="sourceIpv4PrefixVariable")
    def source_ipv4_prefix_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Source IPv4 prefix variable name
        """
        return pulumi.get(self, "source_ipv4_prefix_variable")

    @source_ipv4_prefix_variable.setter
    def source_ipv4_prefix_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "source_ipv4_prefix_variable", value)

    @_builtins.property
    @pulumi.getter(name="sourceObjectGroupId")
    def source_object_group_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Source object group ID
        """
        return pulumi.get(self, "source_object_group_id")

    @source_object_group_id.setter
    def source_object_group_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "source_object_group_id", value)

    @_builtins.property
    @pulumi.getter(name="sourceObjectGroupVersion")
    def source_object_group_version(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        Source object group version
        """
        return pulumi.get(self, "source_object_group_version")

    @source_object_group_version.setter
    def source_object_group_version(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "source_object_group_version", value)

    @_builtins.property
    @pulumi.getter(name="sourcePort")
    def source_port(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Source port or range of ports
        """
        return pulumi.get(self, "source_port")

    @source_port.setter
    def source_port(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "source_port", value)

    @_builtins.property
    @pulumi.getter(name="sourcePortListId")
    def source_port_list_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Source port list ID
        """
        return pulumi.get(self, "source_port_list_id")

    @source_port_list_id.setter
    def source_port_list_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "source_port_list_id", value)

    @_builtins.property
    @pulumi.getter(name="sourcePortListVersion")
    def source_port_list_version(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        Source port list version
        """
        return pulumi.get(self, "source_port_list_version")

    @source_port_list_version.setter
    def source_port_list_version(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "source_port_list_version", value)


if not MYPY:
    class SecurityAppHostingFeatureTemplateVirtualApplicationArgsDict(TypedDict):
        application_type: NotRequired[pulumi.Input[_builtins.str]]
        """
        List of Virtual applications
          - Choices: `utd`
          - Default value: `utd`
        """
        data_gateway_ip: NotRequired[pulumi.Input[_builtins.str]]
        """
        Data Gateway IP 
          - Default value: `192.0.2.1/24`
        """
        data_gateway_ip_variable: NotRequired[pulumi.Input[_builtins.str]]
        """
        Variable name
        """
        data_service_ip: NotRequired[pulumi.Input[_builtins.str]]
        """
        Data Service IP
          - Default value: `192.0.2.2/24`
        """
        data_service_ip_variable: NotRequired[pulumi.Input[_builtins.str]]
        """
        Variable name
        """
        database_url: NotRequired[pulumi.Input[_builtins.bool]]
        """
        Download URL Database on Device
          - Default value: `false`
        """
        database_url_variable: NotRequired[pulumi.Input[_builtins.str]]
        """
        Variable name
        """
        instance_id: NotRequired[pulumi.Input[_builtins.str]]
        """
        List of Virtual applications
          - Default value: `1`
        """
        nat: NotRequired[pulumi.Input[_builtins.bool]]
        """
        Is Nat enabled
          - Default value: `true`
        """
        nat_variable: NotRequired[pulumi.Input[_builtins.str]]
        """
        Variable name
        """
        optional: NotRequired[pulumi.Input[_builtins.bool]]
        """
        Indicates if list item is considered optional.
        """
        resource_profile: NotRequired[pulumi.Input[_builtins.str]]
        """
        Resource Profile
          - Choices: `low`, `medium`, `high`
          - Default value: `low`
        """
        resource_profile_variable: NotRequired[pulumi.Input[_builtins.str]]
        """
        Variable name
        """
        service_gateway_ip: NotRequired[pulumi.Input[_builtins.str]]
        """
        Service Gateway IP (Management interface)
        """
        service_gateway_ip_variable: NotRequired[pulumi.Input[_builtins.str]]
        """
        Variable name
        """
        service_ip: NotRequired[pulumi.Input[_builtins.str]]
        """
        Service IP
        """
        service_ip_variable: NotRequired[pulumi.Input[_builtins.str]]
        """
        Variable name
        """
elif False:
    SecurityAppHostingFeatureTemplateVirtualApplicationArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class SecurityAppHostingFeatureTemplateVirtualApplicationArgs:
    def __init__(__self__, *,
                 application_type: Optional[pulumi.Input[_builtins.str]] = None,
                 data_gateway_ip: Optional[pulumi.Input[_builtins.str]] = None,
                 data_gateway_ip_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 data_service_ip: Optional[pulumi.Input[_builtins.str]] = None,
                 data_service_ip_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 database_url: Optional[pulumi.Input[_builtins.bool]] = None,
                 database_url_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 instance_id: Optional[pulumi.Input[_builtins.str]] = None,
                 nat: Optional[pulumi.Input[_builtins.bool]] = None,
                 nat_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 optional: Optional[pulumi.Input[_builtins.bool]] = None,
                 resource_profile: Optional[pulumi.Input[_builtins.str]] = None,
                 resource_profile_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 service_gateway_ip: Optional[pulumi.Input[_builtins.str]] = None,
                 service_gateway_ip_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 service_ip: Optional[pulumi.Input[_builtins.str]] = None,
                 service_ip_variable: Optional[pulumi.Input[_builtins.str]] = None):
        """
        :param pulumi.Input[_builtins.str] application_type: List of Virtual applications
                 - Choices: `utd`
                 - Default value: `utd`
        :param pulumi.Input[_builtins.str] data_gateway_ip: Data Gateway IP 
                 - Default value: `192.0.2.1/24`
        :param pulumi.Input[_builtins.str] data_gateway_ip_variable: Variable name
        :param pulumi.Input[_builtins.str] data_service_ip: Data Service IP
                 - Default value: `192.0.2.2/24`
        :param pulumi.Input[_builtins.str] data_service_ip_variable: Variable name
        :param pulumi.Input[_builtins.bool] database_url: Download URL Database on Device
                 - Default value: `false`
        :param pulumi.Input[_builtins.str] database_url_variable: Variable name
        :param pulumi.Input[_builtins.str] instance_id: List of Virtual applications
                 - Default value: `1`
        :param pulumi.Input[_builtins.bool] nat: Is Nat enabled
                 - Default value: `true`
        :param pulumi.Input[_builtins.str] nat_variable: Variable name
        :param pulumi.Input[_builtins.bool] optional: Indicates if list item is considered optional.
        :param pulumi.Input[_builtins.str] resource_profile: Resource Profile
                 - Choices: `low`, `medium`, `high`
                 - Default value: `low`
        :param pulumi.Input[_builtins.str] resource_profile_variable: Variable name
        :param pulumi.Input[_builtins.str] service_gateway_ip: Service Gateway IP (Management interface)
        :param pulumi.Input[_builtins.str] service_gateway_ip_variable: Variable name
        :param pulumi.Input[_builtins.str] service_ip: Service IP
        :param pulumi.Input[_builtins.str] service_ip_variable: Variable name
        """
        if application_type is not None:
            pulumi.set(__self__, "application_type", application_type)
        if data_gateway_ip is not None:
            pulumi.set(__self__, "data_gateway_ip", data_gateway_ip)
        if data_gateway_ip_variable is not None:
            pulumi.set(__self__, "data_gateway_ip_variable", data_gateway_ip_variable)
        if data_service_ip is not None:
            pulumi.set(__self__, "data_service_ip", data_service_ip)
        if data_service_ip_variable is not None:
            pulumi.set(__self__, "data_service_ip_variable", data_service_ip_variable)
        if database_url is not None:
            pulumi.set(__self__, "database_url", database_url)
        if database_url_variable is not None:
            pulumi.set(__self__, "database_url_variable", database_url_variable)
        if instance_id is not None:
            pulumi.set(__self__, "instance_id", instance_id)
        if nat is not None:
            pulumi.set(__self__, "nat", nat)
        if nat_variable is not None:
            pulumi.set(__self__, "nat_variable", nat_variable)
        if optional is not None:
            pulumi.set(__self__, "optional", optional)
        if resource_profile is not None:
            pulumi.set(__self__, "resource_profile", resource_profile)
        if resource_profile_variable is not None:
            pulumi.set(__self__, "resource_profile_variable", resource_profile_variable)
        if service_gateway_ip is not None:
            pulumi.set(__self__, "service_gateway_ip", service_gateway_ip)
        if service_gateway_ip_variable is not None:
            pulumi.set(__self__, "service_gateway_ip_variable", service_gateway_ip_variable)
        if service_ip is not None:
            pulumi.set(__self__, "service_ip", service_ip)
        if service_ip_variable is not None:
            pulumi.set(__self__, "service_ip_variable", service_ip_variable)

    @_builtins.property
    @pulumi.getter(name="applicationType")
    def application_type(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        List of Virtual applications
          - Choices: `utd`
          - Default value: `utd`
        """
        return pulumi.get(self, "application_type")

    @application_type.setter
    def application_type(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "application_type", value)

    @_builtins.property
    @pulumi.getter(name="dataGatewayIp")
    def data_gateway_ip(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Data Gateway IP 
          - Default value: `192.0.2.1/24`
        """
        return pulumi.get(self, "data_gateway_ip")

    @data_gateway_ip.setter
    def data_gateway_ip(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "data_gateway_ip", value)

    @_builtins.property
    @pulumi.getter(name="dataGatewayIpVariable")
    def data_gateway_ip_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "data_gateway_ip_variable")

    @data_gateway_ip_variable.setter
    def data_gateway_ip_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "data_gateway_ip_variable", value)

    @_builtins.property
    @pulumi.getter(name="dataServiceIp")
    def data_service_ip(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Data Service IP
          - Default value: `192.0.2.2/24`
        """
        return pulumi.get(self, "data_service_ip")

    @data_service_ip.setter
    def data_service_ip(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "data_service_ip", value)

    @_builtins.property
    @pulumi.getter(name="dataServiceIpVariable")
    def data_service_ip_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "data_service_ip_variable")

    @data_service_ip_variable.setter
    def data_service_ip_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "data_service_ip_variable", value)

    @_builtins.property
    @pulumi.getter(name="databaseUrl")
    def database_url(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Download URL Database on Device
          - Default value: `false`
        """
        return pulumi.get(self, "database_url")

    @database_url.setter
    def database_url(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "database_url", value)

    @_builtins.property
    @pulumi.getter(name="databaseUrlVariable")
    def database_url_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "database_url_variable")

    @database_url_variable.setter
    def database_url_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "database_url_variable", value)

    @_builtins.property
    @pulumi.getter(name="instanceId")
    def instance_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        List of Virtual applications
          - Default value: `1`
        """
        return pulumi.get(self, "instance_id")

    @instance_id.setter
    def instance_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "instance_id", value)

    @_builtins.property
    @pulumi.getter
    def nat(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Is Nat enabled
          - Default value: `true`
        """
        return pulumi.get(self, "nat")

    @nat.setter
    def nat(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "nat", value)

    @_builtins.property
    @pulumi.getter(name="natVariable")
    def nat_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "nat_variable")

    @nat_variable.setter
    def nat_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "nat_variable", value)

    @_builtins.property
    @pulumi.getter
    def optional(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Indicates if list item is considered optional.
        """
        return pulumi.get(self, "optional")

    @optional.setter
    def optional(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "optional", value)

    @_builtins.property
    @pulumi.getter(name="resourceProfile")
    def resource_profile(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Resource Profile
          - Choices: `low`, `medium`, `high`
          - Default value: `low`
        """
        return pulumi.get(self, "resource_profile")

    @resource_profile.setter
    def resource_profile(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "resource_profile", value)

    @_builtins.property
    @pulumi.getter(name="resourceProfileVariable")
    def resource_profile_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "resource_profile_variable")

    @resource_profile_variable.setter
    def resource_profile_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "resource_profile_variable", value)

    @_builtins.property
    @pulumi.getter(name="serviceGatewayIp")
    def service_gateway_ip(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Service Gateway IP (Management interface)
        """
        return pulumi.get(self, "service_gateway_ip")

    @service_gateway_ip.setter
    def service_gateway_ip(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "service_gateway_ip", value)

    @_builtins.property
    @pulumi.getter(name="serviceGatewayIpVariable")
    def service_gateway_ip_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "service_gateway_ip_variable")

    @service_gateway_ip_variable.setter
    def service_gateway_ip_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "service_gateway_ip_variable", value)

    @_builtins.property
    @pulumi.getter(name="serviceIp")
    def service_ip(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Service IP
        """
        return pulumi.get(self, "service_ip")

    @service_ip.setter
    def service_ip(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "service_ip", value)

    @_builtins.property
    @pulumi.getter(name="serviceIpVariable")
    def service_ip_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "service_ip_variable")

    @service_ip_variable.setter
    def service_ip_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "service_ip_variable", value)


if not MYPY:
    class SecurityPolicyDefinitionArgsDict(TypedDict):
        id: pulumi.Input[_builtins.str]
        """
        Policy definition ID
        """
        type: pulumi.Input[_builtins.str]
        """
        Policy definition type
          - Choices: `urlFiltering`, `zoneBasedFW`, `intrusionPrevention`, `sslDecryption`, `advancedMalwareProtection`, `dnsSecurity`
        """
        entries: NotRequired[pulumi.Input[Sequence[pulumi.Input['SecurityPolicyDefinitionEntryArgsDict']]]]
        """
        List of zone pair definitions, Attribute conditional on `type` being equal to `zoneBasedFW`
        """
        version: NotRequired[pulumi.Input[_builtins.int]]
        """
        Policy definition version
        """
elif False:
    SecurityPolicyDefinitionArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class SecurityPolicyDefinitionArgs:
    def __init__(__self__, *,
                 id: pulumi.Input[_builtins.str],
                 type: pulumi.Input[_builtins.str],
                 entries: Optional[pulumi.Input[Sequence[pulumi.Input['SecurityPolicyDefinitionEntryArgs']]]] = None,
                 version: Optional[pulumi.Input[_builtins.int]] = None):
        """
        :param pulumi.Input[_builtins.str] id: Policy definition ID
        :param pulumi.Input[_builtins.str] type: Policy definition type
                 - Choices: `urlFiltering`, `zoneBasedFW`, `intrusionPrevention`, `sslDecryption`, `advancedMalwareProtection`, `dnsSecurity`
        :param pulumi.Input[Sequence[pulumi.Input['SecurityPolicyDefinitionEntryArgs']]] entries: List of zone pair definitions, Attribute conditional on `type` being equal to `zoneBasedFW`
        :param pulumi.Input[_builtins.int] version: Policy definition version
        """
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "type", type)
        if entries is not None:
            pulumi.set(__self__, "entries", entries)
        if version is not None:
            pulumi.set(__self__, "version", version)

    @_builtins.property
    @pulumi.getter
    def id(self) -> pulumi.Input[_builtins.str]:
        """
        Policy definition ID
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "id", value)

    @_builtins.property
    @pulumi.getter
    def type(self) -> pulumi.Input[_builtins.str]:
        """
        Policy definition type
          - Choices: `urlFiltering`, `zoneBasedFW`, `intrusionPrevention`, `sslDecryption`, `advancedMalwareProtection`, `dnsSecurity`
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "type", value)

    @_builtins.property
    @pulumi.getter
    def entries(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['SecurityPolicyDefinitionEntryArgs']]]]:
        """
        List of zone pair definitions, Attribute conditional on `type` being equal to `zoneBasedFW`
        """
        return pulumi.get(self, "entries")

    @entries.setter
    def entries(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['SecurityPolicyDefinitionEntryArgs']]]]):
        pulumi.set(self, "entries", value)

    @_builtins.property
    @pulumi.getter
    def version(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        Policy definition version
        """
        return pulumi.get(self, "version")

    @version.setter
    def version(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "version", value)


if not MYPY:
    class SecurityPolicyDefinitionEntryArgsDict(TypedDict):
        destination_zone: NotRequired[pulumi.Input[_builtins.str]]
        """
        Destination Zone
        """
        source_zone: NotRequired[pulumi.Input[_builtins.str]]
        """
        Source Zone
        """
elif False:
    SecurityPolicyDefinitionEntryArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class SecurityPolicyDefinitionEntryArgs:
    def __init__(__self__, *,
                 destination_zone: Optional[pulumi.Input[_builtins.str]] = None,
                 source_zone: Optional[pulumi.Input[_builtins.str]] = None):
        """
        :param pulumi.Input[_builtins.str] destination_zone: Destination Zone
        :param pulumi.Input[_builtins.str] source_zone: Source Zone
        """
        if destination_zone is not None:
            pulumi.set(__self__, "destination_zone", destination_zone)
        if source_zone is not None:
            pulumi.set(__self__, "source_zone", source_zone)

    @_builtins.property
    @pulumi.getter(name="destinationZone")
    def destination_zone(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Destination Zone
        """
        return pulumi.get(self, "destination_zone")

    @destination_zone.setter
    def destination_zone(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "destination_zone", value)

    @_builtins.property
    @pulumi.getter(name="sourceZone")
    def source_zone(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Source Zone
        """
        return pulumi.get(self, "source_zone")

    @source_zone.setter
    def source_zone(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "source_zone", value)


if not MYPY:
    class SecurityPolicyLoggingArgsDict(TypedDict):
        external_syslog_server_ip: NotRequired[pulumi.Input[_builtins.str]]
        """
        External Syslog Server IP
        """
        external_syslog_server_source_interface: NotRequired[pulumi.Input[_builtins.str]]
        """
        External Syslog Server Source Interface
        """
        external_syslog_server_vpn: NotRequired[pulumi.Input[_builtins.str]]
        """
        External Syslog Server VPN
        """
elif False:
    SecurityPolicyLoggingArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class SecurityPolicyLoggingArgs:
    def __init__(__self__, *,
                 external_syslog_server_ip: Optional[pulumi.Input[_builtins.str]] = None,
                 external_syslog_server_source_interface: Optional[pulumi.Input[_builtins.str]] = None,
                 external_syslog_server_vpn: Optional[pulumi.Input[_builtins.str]] = None):
        """
        :param pulumi.Input[_builtins.str] external_syslog_server_ip: External Syslog Server IP
        :param pulumi.Input[_builtins.str] external_syslog_server_source_interface: External Syslog Server Source Interface
        :param pulumi.Input[_builtins.str] external_syslog_server_vpn: External Syslog Server VPN
        """
        if external_syslog_server_ip is not None:
            pulumi.set(__self__, "external_syslog_server_ip", external_syslog_server_ip)
        if external_syslog_server_source_interface is not None:
            pulumi.set(__self__, "external_syslog_server_source_interface", external_syslog_server_source_interface)
        if external_syslog_server_vpn is not None:
            pulumi.set(__self__, "external_syslog_server_vpn", external_syslog_server_vpn)

    @_builtins.property
    @pulumi.getter(name="externalSyslogServerIp")
    def external_syslog_server_ip(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        External Syslog Server IP
        """
        return pulumi.get(self, "external_syslog_server_ip")

    @external_syslog_server_ip.setter
    def external_syslog_server_ip(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "external_syslog_server_ip", value)

    @_builtins.property
    @pulumi.getter(name="externalSyslogServerSourceInterface")
    def external_syslog_server_source_interface(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        External Syslog Server Source Interface
        """
        return pulumi.get(self, "external_syslog_server_source_interface")

    @external_syslog_server_source_interface.setter
    def external_syslog_server_source_interface(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "external_syslog_server_source_interface", value)

    @_builtins.property
    @pulumi.getter(name="externalSyslogServerVpn")
    def external_syslog_server_vpn(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        External Syslog Server VPN
        """
        return pulumi.get(self, "external_syslog_server_vpn")

    @external_syslog_server_vpn.setter
    def external_syslog_server_vpn(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "external_syslog_server_vpn", value)


if not MYPY:
    class ServiceDhcpServerFeatureOptionCodeArgsDict(TypedDict):
        ascii: NotRequired[pulumi.Input[_builtins.str]]
        """
        Set ASCII value
        """
        ascii_variable: NotRequired[pulumi.Input[_builtins.str]]
        """
        Variable name
        """
        code: NotRequired[pulumi.Input[_builtins.int]]
        """
        Set Option Code
          - Range: `1`-`254`
        """
        code_variable: NotRequired[pulumi.Input[_builtins.str]]
        """
        Variable name
        """
        hex: NotRequired[pulumi.Input[_builtins.str]]
        """
        Set HEX value
        """
        hex_variable: NotRequired[pulumi.Input[_builtins.str]]
        """
        Variable name
        """
        ip_variable: NotRequired[pulumi.Input[_builtins.str]]
        """
        Variable name
        """
        ips: NotRequired[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]
        """
        Set ip address
        """
elif False:
    ServiceDhcpServerFeatureOptionCodeArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ServiceDhcpServerFeatureOptionCodeArgs:
    def __init__(__self__, *,
                 ascii: Optional[pulumi.Input[_builtins.str]] = None,
                 ascii_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 code: Optional[pulumi.Input[_builtins.int]] = None,
                 code_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 hex: Optional[pulumi.Input[_builtins.str]] = None,
                 hex_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 ip_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 ips: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None):
        """
        :param pulumi.Input[_builtins.str] ascii: Set ASCII value
        :param pulumi.Input[_builtins.str] ascii_variable: Variable name
        :param pulumi.Input[_builtins.int] code: Set Option Code
                 - Range: `1`-`254`
        :param pulumi.Input[_builtins.str] code_variable: Variable name
        :param pulumi.Input[_builtins.str] hex: Set HEX value
        :param pulumi.Input[_builtins.str] hex_variable: Variable name
        :param pulumi.Input[_builtins.str] ip_variable: Variable name
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] ips: Set ip address
        """
        if ascii is not None:
            pulumi.set(__self__, "ascii", ascii)
        if ascii_variable is not None:
            pulumi.set(__self__, "ascii_variable", ascii_variable)
        if code is not None:
            pulumi.set(__self__, "code", code)
        if code_variable is not None:
            pulumi.set(__self__, "code_variable", code_variable)
        if hex is not None:
            pulumi.set(__self__, "hex", hex)
        if hex_variable is not None:
            pulumi.set(__self__, "hex_variable", hex_variable)
        if ip_variable is not None:
            pulumi.set(__self__, "ip_variable", ip_variable)
        if ips is not None:
            pulumi.set(__self__, "ips", ips)

    @_builtins.property
    @pulumi.getter
    def ascii(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Set ASCII value
        """
        return pulumi.get(self, "ascii")

    @ascii.setter
    def ascii(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "ascii", value)

    @_builtins.property
    @pulumi.getter(name="asciiVariable")
    def ascii_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "ascii_variable")

    @ascii_variable.setter
    def ascii_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "ascii_variable", value)

    @_builtins.property
    @pulumi.getter
    def code(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        Set Option Code
          - Range: `1`-`254`
        """
        return pulumi.get(self, "code")

    @code.setter
    def code(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "code", value)

    @_builtins.property
    @pulumi.getter(name="codeVariable")
    def code_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "code_variable")

    @code_variable.setter
    def code_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "code_variable", value)

    @_builtins.property
    @pulumi.getter
    def hex(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Set HEX value
        """
        return pulumi.get(self, "hex")

    @hex.setter
    def hex(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "hex", value)

    @_builtins.property
    @pulumi.getter(name="hexVariable")
    def hex_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "hex_variable")

    @hex_variable.setter
    def hex_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "hex_variable", value)

    @_builtins.property
    @pulumi.getter(name="ipVariable")
    def ip_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "ip_variable")

    @ip_variable.setter
    def ip_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "ip_variable", value)

    @_builtins.property
    @pulumi.getter
    def ips(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]:
        """
        Set ip address
        """
        return pulumi.get(self, "ips")

    @ips.setter
    def ips(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "ips", value)


if not MYPY:
    class ServiceDhcpServerFeatureStaticLeaseArgsDict(TypedDict):
        ip_address: NotRequired[pulumi.Input[_builtins.str]]
        """
        Set client’s static IP address
        """
        ip_address_variable: NotRequired[pulumi.Input[_builtins.str]]
        """
        Variable name
        """
        mac_address: NotRequired[pulumi.Input[_builtins.str]]
        """
        Set MAC address of client
        """
        mac_address_variable: NotRequired[pulumi.Input[_builtins.str]]
        """
        Variable name
        """
elif False:
    ServiceDhcpServerFeatureStaticLeaseArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ServiceDhcpServerFeatureStaticLeaseArgs:
    def __init__(__self__, *,
                 ip_address: Optional[pulumi.Input[_builtins.str]] = None,
                 ip_address_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 mac_address: Optional[pulumi.Input[_builtins.str]] = None,
                 mac_address_variable: Optional[pulumi.Input[_builtins.str]] = None):
        """
        :param pulumi.Input[_builtins.str] ip_address: Set client’s static IP address
        :param pulumi.Input[_builtins.str] ip_address_variable: Variable name
        :param pulumi.Input[_builtins.str] mac_address: Set MAC address of client
        :param pulumi.Input[_builtins.str] mac_address_variable: Variable name
        """
        if ip_address is not None:
            pulumi.set(__self__, "ip_address", ip_address)
        if ip_address_variable is not None:
            pulumi.set(__self__, "ip_address_variable", ip_address_variable)
        if mac_address is not None:
            pulumi.set(__self__, "mac_address", mac_address)
        if mac_address_variable is not None:
            pulumi.set(__self__, "mac_address_variable", mac_address_variable)

    @_builtins.property
    @pulumi.getter(name="ipAddress")
    def ip_address(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Set client’s static IP address
        """
        return pulumi.get(self, "ip_address")

    @ip_address.setter
    def ip_address(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "ip_address", value)

    @_builtins.property
    @pulumi.getter(name="ipAddressVariable")
    def ip_address_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "ip_address_variable")

    @ip_address_variable.setter
    def ip_address_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "ip_address_variable", value)

    @_builtins.property
    @pulumi.getter(name="macAddress")
    def mac_address(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Set MAC address of client
        """
        return pulumi.get(self, "mac_address")

    @mac_address.setter
    def mac_address(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "mac_address", value)

    @_builtins.property
    @pulumi.getter(name="macAddressVariable")
    def mac_address_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "mac_address_variable")

    @mac_address_variable.setter
    def mac_address_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "mac_address_variable", value)


if not MYPY:
    class ServiceIpv4AclFeatureSequenceArgsDict(TypedDict):
        actions: NotRequired[pulumi.Input[Sequence[pulumi.Input['ServiceIpv4AclFeatureSequenceActionArgsDict']]]]
        """
        Define list of actions
        """
        base_action: NotRequired[pulumi.Input[_builtins.str]]
        """
        Base Action
          - Choices: `drop`, `accept`
          - Default value: `accept`
        """
        match_entries: NotRequired[pulumi.Input[Sequence[pulumi.Input['ServiceIpv4AclFeatureSequenceMatchEntryArgsDict']]]]
        """
        Define match conditions
        """
        sequence_id: NotRequired[pulumi.Input[_builtins.int]]
        """
        Sequence Id
          - Range: `1`-`65536`
        """
        sequence_name: NotRequired[pulumi.Input[_builtins.str]]
        """
        Sequence Name
        """
elif False:
    ServiceIpv4AclFeatureSequenceArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ServiceIpv4AclFeatureSequenceArgs:
    def __init__(__self__, *,
                 actions: Optional[pulumi.Input[Sequence[pulumi.Input['ServiceIpv4AclFeatureSequenceActionArgs']]]] = None,
                 base_action: Optional[pulumi.Input[_builtins.str]] = None,
                 match_entries: Optional[pulumi.Input[Sequence[pulumi.Input['ServiceIpv4AclFeatureSequenceMatchEntryArgs']]]] = None,
                 sequence_id: Optional[pulumi.Input[_builtins.int]] = None,
                 sequence_name: Optional[pulumi.Input[_builtins.str]] = None):
        """
        :param pulumi.Input[Sequence[pulumi.Input['ServiceIpv4AclFeatureSequenceActionArgs']]] actions: Define list of actions
        :param pulumi.Input[_builtins.str] base_action: Base Action
                 - Choices: `drop`, `accept`
                 - Default value: `accept`
        :param pulumi.Input[Sequence[pulumi.Input['ServiceIpv4AclFeatureSequenceMatchEntryArgs']]] match_entries: Define match conditions
        :param pulumi.Input[_builtins.int] sequence_id: Sequence Id
                 - Range: `1`-`65536`
        :param pulumi.Input[_builtins.str] sequence_name: Sequence Name
        """
        if actions is not None:
            pulumi.set(__self__, "actions", actions)
        if base_action is not None:
            pulumi.set(__self__, "base_action", base_action)
        if match_entries is not None:
            pulumi.set(__self__, "match_entries", match_entries)
        if sequence_id is not None:
            pulumi.set(__self__, "sequence_id", sequence_id)
        if sequence_name is not None:
            pulumi.set(__self__, "sequence_name", sequence_name)

    @_builtins.property
    @pulumi.getter
    def actions(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ServiceIpv4AclFeatureSequenceActionArgs']]]]:
        """
        Define list of actions
        """
        return pulumi.get(self, "actions")

    @actions.setter
    def actions(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ServiceIpv4AclFeatureSequenceActionArgs']]]]):
        pulumi.set(self, "actions", value)

    @_builtins.property
    @pulumi.getter(name="baseAction")
    def base_action(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Base Action
          - Choices: `drop`, `accept`
          - Default value: `accept`
        """
        return pulumi.get(self, "base_action")

    @base_action.setter
    def base_action(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "base_action", value)

    @_builtins.property
    @pulumi.getter(name="matchEntries")
    def match_entries(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ServiceIpv4AclFeatureSequenceMatchEntryArgs']]]]:
        """
        Define match conditions
        """
        return pulumi.get(self, "match_entries")

    @match_entries.setter
    def match_entries(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ServiceIpv4AclFeatureSequenceMatchEntryArgs']]]]):
        pulumi.set(self, "match_entries", value)

    @_builtins.property
    @pulumi.getter(name="sequenceId")
    def sequence_id(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        Sequence Id
          - Range: `1`-`65536`
        """
        return pulumi.get(self, "sequence_id")

    @sequence_id.setter
    def sequence_id(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "sequence_id", value)

    @_builtins.property
    @pulumi.getter(name="sequenceName")
    def sequence_name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Sequence Name
        """
        return pulumi.get(self, "sequence_name")

    @sequence_name.setter
    def sequence_name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "sequence_name", value)


if not MYPY:
    class ServiceIpv4AclFeatureSequenceActionArgsDict(TypedDict):
        accept_counter_name: NotRequired[pulumi.Input[_builtins.str]]
        """
        Counter Name
        """
        accept_log: NotRequired[pulumi.Input[_builtins.bool]]
        """
        Enable Log
          - Default value: `false`
        """
        accept_mirror_list_id: NotRequired[pulumi.Input[_builtins.str]]
        accept_policer_id: NotRequired[pulumi.Input[_builtins.str]]
        accept_set_dscp: NotRequired[pulumi.Input[_builtins.int]]
        """
        DSCP number
          - Range: `0`-`63`
        """
        accept_set_next_hop: NotRequired[pulumi.Input[_builtins.str]]
        """
        Set Next Hop (IPV4 address)
        """
        drop_counter_name: NotRequired[pulumi.Input[_builtins.str]]
        """
        Counter Name
        """
        drop_log: NotRequired[pulumi.Input[_builtins.bool]]
        """
        Enable Log
          - Default value: `false`
        """
elif False:
    ServiceIpv4AclFeatureSequenceActionArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ServiceIpv4AclFeatureSequenceActionArgs:
    def __init__(__self__, *,
                 accept_counter_name: Optional[pulumi.Input[_builtins.str]] = None,
                 accept_log: Optional[pulumi.Input[_builtins.bool]] = None,
                 accept_mirror_list_id: Optional[pulumi.Input[_builtins.str]] = None,
                 accept_policer_id: Optional[pulumi.Input[_builtins.str]] = None,
                 accept_set_dscp: Optional[pulumi.Input[_builtins.int]] = None,
                 accept_set_next_hop: Optional[pulumi.Input[_builtins.str]] = None,
                 drop_counter_name: Optional[pulumi.Input[_builtins.str]] = None,
                 drop_log: Optional[pulumi.Input[_builtins.bool]] = None):
        """
        :param pulumi.Input[_builtins.str] accept_counter_name: Counter Name
        :param pulumi.Input[_builtins.bool] accept_log: Enable Log
                 - Default value: `false`
        :param pulumi.Input[_builtins.int] accept_set_dscp: DSCP number
                 - Range: `0`-`63`
        :param pulumi.Input[_builtins.str] accept_set_next_hop: Set Next Hop (IPV4 address)
        :param pulumi.Input[_builtins.str] drop_counter_name: Counter Name
        :param pulumi.Input[_builtins.bool] drop_log: Enable Log
                 - Default value: `false`
        """
        if accept_counter_name is not None:
            pulumi.set(__self__, "accept_counter_name", accept_counter_name)
        if accept_log is not None:
            pulumi.set(__self__, "accept_log", accept_log)
        if accept_mirror_list_id is not None:
            pulumi.set(__self__, "accept_mirror_list_id", accept_mirror_list_id)
        if accept_policer_id is not None:
            pulumi.set(__self__, "accept_policer_id", accept_policer_id)
        if accept_set_dscp is not None:
            pulumi.set(__self__, "accept_set_dscp", accept_set_dscp)
        if accept_set_next_hop is not None:
            pulumi.set(__self__, "accept_set_next_hop", accept_set_next_hop)
        if drop_counter_name is not None:
            pulumi.set(__self__, "drop_counter_name", drop_counter_name)
        if drop_log is not None:
            pulumi.set(__self__, "drop_log", drop_log)

    @_builtins.property
    @pulumi.getter(name="acceptCounterName")
    def accept_counter_name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Counter Name
        """
        return pulumi.get(self, "accept_counter_name")

    @accept_counter_name.setter
    def accept_counter_name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "accept_counter_name", value)

    @_builtins.property
    @pulumi.getter(name="acceptLog")
    def accept_log(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Enable Log
          - Default value: `false`
        """
        return pulumi.get(self, "accept_log")

    @accept_log.setter
    def accept_log(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "accept_log", value)

    @_builtins.property
    @pulumi.getter(name="acceptMirrorListId")
    def accept_mirror_list_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "accept_mirror_list_id")

    @accept_mirror_list_id.setter
    def accept_mirror_list_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "accept_mirror_list_id", value)

    @_builtins.property
    @pulumi.getter(name="acceptPolicerId")
    def accept_policer_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "accept_policer_id")

    @accept_policer_id.setter
    def accept_policer_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "accept_policer_id", value)

    @_builtins.property
    @pulumi.getter(name="acceptSetDscp")
    def accept_set_dscp(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        DSCP number
          - Range: `0`-`63`
        """
        return pulumi.get(self, "accept_set_dscp")

    @accept_set_dscp.setter
    def accept_set_dscp(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "accept_set_dscp", value)

    @_builtins.property
    @pulumi.getter(name="acceptSetNextHop")
    def accept_set_next_hop(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Set Next Hop (IPV4 address)
        """
        return pulumi.get(self, "accept_set_next_hop")

    @accept_set_next_hop.setter
    def accept_set_next_hop(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "accept_set_next_hop", value)

    @_builtins.property
    @pulumi.getter(name="dropCounterName")
    def drop_counter_name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Counter Name
        """
        return pulumi.get(self, "drop_counter_name")

    @drop_counter_name.setter
    def drop_counter_name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "drop_counter_name", value)

    @_builtins.property
    @pulumi.getter(name="dropLog")
    def drop_log(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Enable Log
          - Default value: `false`
        """
        return pulumi.get(self, "drop_log")

    @drop_log.setter
    def drop_log(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "drop_log", value)


if not MYPY:
    class ServiceIpv4AclFeatureSequenceMatchEntryArgsDict(TypedDict):
        destination_data_prefix: NotRequired[pulumi.Input[_builtins.str]]
        """
        Destination Data IP Prefix
        """
        destination_data_prefix_list_id: NotRequired[pulumi.Input[_builtins.str]]
        destination_data_prefix_variable: NotRequired[pulumi.Input[_builtins.str]]
        """
        Variable name
        """
        destination_ports: NotRequired[pulumi.Input[Sequence[pulumi.Input['ServiceIpv4AclFeatureSequenceMatchEntryDestinationPortArgsDict']]]]
        """
        Destination Port List
        """
        dscps: NotRequired[pulumi.Input[Sequence[pulumi.Input[_builtins.int]]]]
        """
        DSCP number
        """
        icmp_messages: NotRequired[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]
        """
        ICMP Message
        """
        packet_length: NotRequired[pulumi.Input[_builtins.str]]
        """
        Packet Length
        """
        protocols: NotRequired[pulumi.Input[Sequence[pulumi.Input[_builtins.int]]]]
        """
        protocol number list with at least one item
        """
        source_data_prefix: NotRequired[pulumi.Input[_builtins.str]]
        """
        Source Data IP Prefix
        """
        source_data_prefix_list_id: NotRequired[pulumi.Input[_builtins.str]]
        source_data_prefix_variable: NotRequired[pulumi.Input[_builtins.str]]
        """
        Variable name
        """
        source_ports: NotRequired[pulumi.Input[Sequence[pulumi.Input['ServiceIpv4AclFeatureSequenceMatchEntrySourcePortArgsDict']]]]
        """
        Source Port List
        """
        tcp_state: NotRequired[pulumi.Input[_builtins.str]]
        """
        TCP States
          - Choices: `syn`
        """
elif False:
    ServiceIpv4AclFeatureSequenceMatchEntryArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ServiceIpv4AclFeatureSequenceMatchEntryArgs:
    def __init__(__self__, *,
                 destination_data_prefix: Optional[pulumi.Input[_builtins.str]] = None,
                 destination_data_prefix_list_id: Optional[pulumi.Input[_builtins.str]] = None,
                 destination_data_prefix_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 destination_ports: Optional[pulumi.Input[Sequence[pulumi.Input['ServiceIpv4AclFeatureSequenceMatchEntryDestinationPortArgs']]]] = None,
                 dscps: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.int]]]] = None,
                 icmp_messages: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 packet_length: Optional[pulumi.Input[_builtins.str]] = None,
                 protocols: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.int]]]] = None,
                 source_data_prefix: Optional[pulumi.Input[_builtins.str]] = None,
                 source_data_prefix_list_id: Optional[pulumi.Input[_builtins.str]] = None,
                 source_data_prefix_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 source_ports: Optional[pulumi.Input[Sequence[pulumi.Input['ServiceIpv4AclFeatureSequenceMatchEntrySourcePortArgs']]]] = None,
                 tcp_state: Optional[pulumi.Input[_builtins.str]] = None):
        """
        :param pulumi.Input[_builtins.str] destination_data_prefix: Destination Data IP Prefix
        :param pulumi.Input[_builtins.str] destination_data_prefix_variable: Variable name
        :param pulumi.Input[Sequence[pulumi.Input['ServiceIpv4AclFeatureSequenceMatchEntryDestinationPortArgs']]] destination_ports: Destination Port List
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.int]]] dscps: DSCP number
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] icmp_messages: ICMP Message
        :param pulumi.Input[_builtins.str] packet_length: Packet Length
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.int]]] protocols: protocol number list with at least one item
        :param pulumi.Input[_builtins.str] source_data_prefix: Source Data IP Prefix
        :param pulumi.Input[_builtins.str] source_data_prefix_variable: Variable name
        :param pulumi.Input[Sequence[pulumi.Input['ServiceIpv4AclFeatureSequenceMatchEntrySourcePortArgs']]] source_ports: Source Port List
        :param pulumi.Input[_builtins.str] tcp_state: TCP States
                 - Choices: `syn`
        """
        if destination_data_prefix is not None:
            pulumi.set(__self__, "destination_data_prefix", destination_data_prefix)
        if destination_data_prefix_list_id is not None:
            pulumi.set(__self__, "destination_data_prefix_list_id", destination_data_prefix_list_id)
        if destination_data_prefix_variable is not None:
            pulumi.set(__self__, "destination_data_prefix_variable", destination_data_prefix_variable)
        if destination_ports is not None:
            pulumi.set(__self__, "destination_ports", destination_ports)
        if dscps is not None:
            pulumi.set(__self__, "dscps", dscps)
        if icmp_messages is not None:
            pulumi.set(__self__, "icmp_messages", icmp_messages)
        if packet_length is not None:
            pulumi.set(__self__, "packet_length", packet_length)
        if protocols is not None:
            pulumi.set(__self__, "protocols", protocols)
        if source_data_prefix is not None:
            pulumi.set(__self__, "source_data_prefix", source_data_prefix)
        if source_data_prefix_list_id is not None:
            pulumi.set(__self__, "source_data_prefix_list_id", source_data_prefix_list_id)
        if source_data_prefix_variable is not None:
            pulumi.set(__self__, "source_data_prefix_variable", source_data_prefix_variable)
        if source_ports is not None:
            pulumi.set(__self__, "source_ports", source_ports)
        if tcp_state is not None:
            pulumi.set(__self__, "tcp_state", tcp_state)

    @_builtins.property
    @pulumi.getter(name="destinationDataPrefix")
    def destination_data_prefix(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Destination Data IP Prefix
        """
        return pulumi.get(self, "destination_data_prefix")

    @destination_data_prefix.setter
    def destination_data_prefix(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "destination_data_prefix", value)

    @_builtins.property
    @pulumi.getter(name="destinationDataPrefixListId")
    def destination_data_prefix_list_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "destination_data_prefix_list_id")

    @destination_data_prefix_list_id.setter
    def destination_data_prefix_list_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "destination_data_prefix_list_id", value)

    @_builtins.property
    @pulumi.getter(name="destinationDataPrefixVariable")
    def destination_data_prefix_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "destination_data_prefix_variable")

    @destination_data_prefix_variable.setter
    def destination_data_prefix_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "destination_data_prefix_variable", value)

    @_builtins.property
    @pulumi.getter(name="destinationPorts")
    def destination_ports(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ServiceIpv4AclFeatureSequenceMatchEntryDestinationPortArgs']]]]:
        """
        Destination Port List
        """
        return pulumi.get(self, "destination_ports")

    @destination_ports.setter
    def destination_ports(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ServiceIpv4AclFeatureSequenceMatchEntryDestinationPortArgs']]]]):
        pulumi.set(self, "destination_ports", value)

    @_builtins.property
    @pulumi.getter
    def dscps(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.int]]]]:
        """
        DSCP number
        """
        return pulumi.get(self, "dscps")

    @dscps.setter
    def dscps(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.int]]]]):
        pulumi.set(self, "dscps", value)

    @_builtins.property
    @pulumi.getter(name="icmpMessages")
    def icmp_messages(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]:
        """
        ICMP Message
        """
        return pulumi.get(self, "icmp_messages")

    @icmp_messages.setter
    def icmp_messages(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "icmp_messages", value)

    @_builtins.property
    @pulumi.getter(name="packetLength")
    def packet_length(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Packet Length
        """
        return pulumi.get(self, "packet_length")

    @packet_length.setter
    def packet_length(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "packet_length", value)

    @_builtins.property
    @pulumi.getter
    def protocols(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.int]]]]:
        """
        protocol number list with at least one item
        """
        return pulumi.get(self, "protocols")

    @protocols.setter
    def protocols(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.int]]]]):
        pulumi.set(self, "protocols", value)

    @_builtins.property
    @pulumi.getter(name="sourceDataPrefix")
    def source_data_prefix(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Source Data IP Prefix
        """
        return pulumi.get(self, "source_data_prefix")

    @source_data_prefix.setter
    def source_data_prefix(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "source_data_prefix", value)

    @_builtins.property
    @pulumi.getter(name="sourceDataPrefixListId")
    def source_data_prefix_list_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "source_data_prefix_list_id")

    @source_data_prefix_list_id.setter
    def source_data_prefix_list_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "source_data_prefix_list_id", value)

    @_builtins.property
    @pulumi.getter(name="sourceDataPrefixVariable")
    def source_data_prefix_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "source_data_prefix_variable")

    @source_data_prefix_variable.setter
    def source_data_prefix_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "source_data_prefix_variable", value)

    @_builtins.property
    @pulumi.getter(name="sourcePorts")
    def source_ports(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ServiceIpv4AclFeatureSequenceMatchEntrySourcePortArgs']]]]:
        """
        Source Port List
        """
        return pulumi.get(self, "source_ports")

    @source_ports.setter
    def source_ports(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ServiceIpv4AclFeatureSequenceMatchEntrySourcePortArgs']]]]):
        pulumi.set(self, "source_ports", value)

    @_builtins.property
    @pulumi.getter(name="tcpState")
    def tcp_state(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        TCP States
          - Choices: `syn`
        """
        return pulumi.get(self, "tcp_state")

    @tcp_state.setter
    def tcp_state(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "tcp_state", value)


if not MYPY:
    class ServiceIpv4AclFeatureSequenceMatchEntryDestinationPortArgsDict(TypedDict):
        port: NotRequired[pulumi.Input[_builtins.str]]
        """
        destination port range or individual port number
        """
elif False:
    ServiceIpv4AclFeatureSequenceMatchEntryDestinationPortArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ServiceIpv4AclFeatureSequenceMatchEntryDestinationPortArgs:
    def __init__(__self__, *,
                 port: Optional[pulumi.Input[_builtins.str]] = None):
        """
        :param pulumi.Input[_builtins.str] port: destination port range or individual port number
        """
        if port is not None:
            pulumi.set(__self__, "port", port)

    @_builtins.property
    @pulumi.getter
    def port(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        destination port range or individual port number
        """
        return pulumi.get(self, "port")

    @port.setter
    def port(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "port", value)


if not MYPY:
    class ServiceIpv4AclFeatureSequenceMatchEntrySourcePortArgsDict(TypedDict):
        port: NotRequired[pulumi.Input[_builtins.str]]
        """
        source port range or individual port number
        """
elif False:
    ServiceIpv4AclFeatureSequenceMatchEntrySourcePortArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ServiceIpv4AclFeatureSequenceMatchEntrySourcePortArgs:
    def __init__(__self__, *,
                 port: Optional[pulumi.Input[_builtins.str]] = None):
        """
        :param pulumi.Input[_builtins.str] port: source port range or individual port number
        """
        if port is not None:
            pulumi.set(__self__, "port", port)

    @_builtins.property
    @pulumi.getter
    def port(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        source port range or individual port number
        """
        return pulumi.get(self, "port")

    @port.setter
    def port(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "port", value)


if not MYPY:
    class ServiceIpv6AclFeatureSequenceArgsDict(TypedDict):
        actions: NotRequired[pulumi.Input[Sequence[pulumi.Input['ServiceIpv6AclFeatureSequenceActionArgsDict']]]]
        """
        Define list of actions
        """
        base_action: NotRequired[pulumi.Input[_builtins.str]]
        """
        Base Action
          - Choices: `drop`, `accept`
          - Default value: `accept`
        """
        match_entries: NotRequired[pulumi.Input[Sequence[pulumi.Input['ServiceIpv6AclFeatureSequenceMatchEntryArgsDict']]]]
        """
        Define match conditions
        """
        sequence_id: NotRequired[pulumi.Input[_builtins.int]]
        """
        Sequence Id
          - Range: `1`-`65536`
        """
        sequence_name: NotRequired[pulumi.Input[_builtins.str]]
        """
        Sequence Name
        """
elif False:
    ServiceIpv6AclFeatureSequenceArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ServiceIpv6AclFeatureSequenceArgs:
    def __init__(__self__, *,
                 actions: Optional[pulumi.Input[Sequence[pulumi.Input['ServiceIpv6AclFeatureSequenceActionArgs']]]] = None,
                 base_action: Optional[pulumi.Input[_builtins.str]] = None,
                 match_entries: Optional[pulumi.Input[Sequence[pulumi.Input['ServiceIpv6AclFeatureSequenceMatchEntryArgs']]]] = None,
                 sequence_id: Optional[pulumi.Input[_builtins.int]] = None,
                 sequence_name: Optional[pulumi.Input[_builtins.str]] = None):
        """
        :param pulumi.Input[Sequence[pulumi.Input['ServiceIpv6AclFeatureSequenceActionArgs']]] actions: Define list of actions
        :param pulumi.Input[_builtins.str] base_action: Base Action
                 - Choices: `drop`, `accept`
                 - Default value: `accept`
        :param pulumi.Input[Sequence[pulumi.Input['ServiceIpv6AclFeatureSequenceMatchEntryArgs']]] match_entries: Define match conditions
        :param pulumi.Input[_builtins.int] sequence_id: Sequence Id
                 - Range: `1`-`65536`
        :param pulumi.Input[_builtins.str] sequence_name: Sequence Name
        """
        if actions is not None:
            pulumi.set(__self__, "actions", actions)
        if base_action is not None:
            pulumi.set(__self__, "base_action", base_action)
        if match_entries is not None:
            pulumi.set(__self__, "match_entries", match_entries)
        if sequence_id is not None:
            pulumi.set(__self__, "sequence_id", sequence_id)
        if sequence_name is not None:
            pulumi.set(__self__, "sequence_name", sequence_name)

    @_builtins.property
    @pulumi.getter
    def actions(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ServiceIpv6AclFeatureSequenceActionArgs']]]]:
        """
        Define list of actions
        """
        return pulumi.get(self, "actions")

    @actions.setter
    def actions(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ServiceIpv6AclFeatureSequenceActionArgs']]]]):
        pulumi.set(self, "actions", value)

    @_builtins.property
    @pulumi.getter(name="baseAction")
    def base_action(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Base Action
          - Choices: `drop`, `accept`
          - Default value: `accept`
        """
        return pulumi.get(self, "base_action")

    @base_action.setter
    def base_action(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "base_action", value)

    @_builtins.property
    @pulumi.getter(name="matchEntries")
    def match_entries(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ServiceIpv6AclFeatureSequenceMatchEntryArgs']]]]:
        """
        Define match conditions
        """
        return pulumi.get(self, "match_entries")

    @match_entries.setter
    def match_entries(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ServiceIpv6AclFeatureSequenceMatchEntryArgs']]]]):
        pulumi.set(self, "match_entries", value)

    @_builtins.property
    @pulumi.getter(name="sequenceId")
    def sequence_id(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        Sequence Id
          - Range: `1`-`65536`
        """
        return pulumi.get(self, "sequence_id")

    @sequence_id.setter
    def sequence_id(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "sequence_id", value)

    @_builtins.property
    @pulumi.getter(name="sequenceName")
    def sequence_name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Sequence Name
        """
        return pulumi.get(self, "sequence_name")

    @sequence_name.setter
    def sequence_name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "sequence_name", value)


if not MYPY:
    class ServiceIpv6AclFeatureSequenceActionArgsDict(TypedDict):
        accept_counter_name: NotRequired[pulumi.Input[_builtins.str]]
        """
        Counter Name
        """
        accept_log: NotRequired[pulumi.Input[_builtins.bool]]
        """
        Enable Log
          - Default value: `false`
        """
        accept_mirror_list_id: NotRequired[pulumi.Input[_builtins.str]]
        accept_policer_id: NotRequired[pulumi.Input[_builtins.str]]
        accept_set_next_hop: NotRequired[pulumi.Input[_builtins.str]]
        """
        Set Next Hop (IPV6 address)
        """
        accept_traffic_class: NotRequired[pulumi.Input[_builtins.int]]
        """
        set traffic class number
          - Range: `0`-`63`
        """
        drop_counter_name: NotRequired[pulumi.Input[_builtins.str]]
        """
        Counter Name
        """
        drop_log: NotRequired[pulumi.Input[_builtins.bool]]
        """
        Enable Log
          - Default value: `false`
        """
elif False:
    ServiceIpv6AclFeatureSequenceActionArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ServiceIpv6AclFeatureSequenceActionArgs:
    def __init__(__self__, *,
                 accept_counter_name: Optional[pulumi.Input[_builtins.str]] = None,
                 accept_log: Optional[pulumi.Input[_builtins.bool]] = None,
                 accept_mirror_list_id: Optional[pulumi.Input[_builtins.str]] = None,
                 accept_policer_id: Optional[pulumi.Input[_builtins.str]] = None,
                 accept_set_next_hop: Optional[pulumi.Input[_builtins.str]] = None,
                 accept_traffic_class: Optional[pulumi.Input[_builtins.int]] = None,
                 drop_counter_name: Optional[pulumi.Input[_builtins.str]] = None,
                 drop_log: Optional[pulumi.Input[_builtins.bool]] = None):
        """
        :param pulumi.Input[_builtins.str] accept_counter_name: Counter Name
        :param pulumi.Input[_builtins.bool] accept_log: Enable Log
                 - Default value: `false`
        :param pulumi.Input[_builtins.str] accept_set_next_hop: Set Next Hop (IPV6 address)
        :param pulumi.Input[_builtins.int] accept_traffic_class: set traffic class number
                 - Range: `0`-`63`
        :param pulumi.Input[_builtins.str] drop_counter_name: Counter Name
        :param pulumi.Input[_builtins.bool] drop_log: Enable Log
                 - Default value: `false`
        """
        if accept_counter_name is not None:
            pulumi.set(__self__, "accept_counter_name", accept_counter_name)
        if accept_log is not None:
            pulumi.set(__self__, "accept_log", accept_log)
        if accept_mirror_list_id is not None:
            pulumi.set(__self__, "accept_mirror_list_id", accept_mirror_list_id)
        if accept_policer_id is not None:
            pulumi.set(__self__, "accept_policer_id", accept_policer_id)
        if accept_set_next_hop is not None:
            pulumi.set(__self__, "accept_set_next_hop", accept_set_next_hop)
        if accept_traffic_class is not None:
            pulumi.set(__self__, "accept_traffic_class", accept_traffic_class)
        if drop_counter_name is not None:
            pulumi.set(__self__, "drop_counter_name", drop_counter_name)
        if drop_log is not None:
            pulumi.set(__self__, "drop_log", drop_log)

    @_builtins.property
    @pulumi.getter(name="acceptCounterName")
    def accept_counter_name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Counter Name
        """
        return pulumi.get(self, "accept_counter_name")

    @accept_counter_name.setter
    def accept_counter_name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "accept_counter_name", value)

    @_builtins.property
    @pulumi.getter(name="acceptLog")
    def accept_log(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Enable Log
          - Default value: `false`
        """
        return pulumi.get(self, "accept_log")

    @accept_log.setter
    def accept_log(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "accept_log", value)

    @_builtins.property
    @pulumi.getter(name="acceptMirrorListId")
    def accept_mirror_list_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "accept_mirror_list_id")

    @accept_mirror_list_id.setter
    def accept_mirror_list_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "accept_mirror_list_id", value)

    @_builtins.property
    @pulumi.getter(name="acceptPolicerId")
    def accept_policer_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "accept_policer_id")

    @accept_policer_id.setter
    def accept_policer_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "accept_policer_id", value)

    @_builtins.property
    @pulumi.getter(name="acceptSetNextHop")
    def accept_set_next_hop(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Set Next Hop (IPV6 address)
        """
        return pulumi.get(self, "accept_set_next_hop")

    @accept_set_next_hop.setter
    def accept_set_next_hop(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "accept_set_next_hop", value)

    @_builtins.property
    @pulumi.getter(name="acceptTrafficClass")
    def accept_traffic_class(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        set traffic class number
          - Range: `0`-`63`
        """
        return pulumi.get(self, "accept_traffic_class")

    @accept_traffic_class.setter
    def accept_traffic_class(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "accept_traffic_class", value)

    @_builtins.property
    @pulumi.getter(name="dropCounterName")
    def drop_counter_name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Counter Name
        """
        return pulumi.get(self, "drop_counter_name")

    @drop_counter_name.setter
    def drop_counter_name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "drop_counter_name", value)

    @_builtins.property
    @pulumi.getter(name="dropLog")
    def drop_log(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Enable Log
          - Default value: `false`
        """
        return pulumi.get(self, "drop_log")

    @drop_log.setter
    def drop_log(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "drop_log", value)


if not MYPY:
    class ServiceIpv6AclFeatureSequenceMatchEntryArgsDict(TypedDict):
        destination_data_prefix: NotRequired[pulumi.Input[_builtins.str]]
        """
        Destination Data IP Prefix
        """
        destination_data_prefix_list_id: NotRequired[pulumi.Input[_builtins.str]]
        destination_ports: NotRequired[pulumi.Input[Sequence[pulumi.Input['ServiceIpv6AclFeatureSequenceMatchEntryDestinationPortArgsDict']]]]
        """
        Destination Port List
        """
        icmp_messages: NotRequired[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]
        """
        ICMP6 Message
        """
        next_header: NotRequired[pulumi.Input[_builtins.int]]
        """
        next header number
          - Range: `0`-`255`
        """
        packet_length: NotRequired[pulumi.Input[_builtins.str]]
        """
        Packet Length
        """
        source_data_prefix: NotRequired[pulumi.Input[_builtins.str]]
        """
        Source Data IP Prefix
        """
        source_data_prefix_list_id: NotRequired[pulumi.Input[_builtins.str]]
        source_ports: NotRequired[pulumi.Input[Sequence[pulumi.Input['ServiceIpv6AclFeatureSequenceMatchEntrySourcePortArgsDict']]]]
        """
        Source Port List
        """
        tcp_state: NotRequired[pulumi.Input[_builtins.str]]
        """
        TCP States
          - Choices: `syn`
        """
        traffic_classes: NotRequired[pulumi.Input[Sequence[pulumi.Input[_builtins.int]]]]
        """
        Select Traffic Class
        """
elif False:
    ServiceIpv6AclFeatureSequenceMatchEntryArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ServiceIpv6AclFeatureSequenceMatchEntryArgs:
    def __init__(__self__, *,
                 destination_data_prefix: Optional[pulumi.Input[_builtins.str]] = None,
                 destination_data_prefix_list_id: Optional[pulumi.Input[_builtins.str]] = None,
                 destination_ports: Optional[pulumi.Input[Sequence[pulumi.Input['ServiceIpv6AclFeatureSequenceMatchEntryDestinationPortArgs']]]] = None,
                 icmp_messages: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 next_header: Optional[pulumi.Input[_builtins.int]] = None,
                 packet_length: Optional[pulumi.Input[_builtins.str]] = None,
                 source_data_prefix: Optional[pulumi.Input[_builtins.str]] = None,
                 source_data_prefix_list_id: Optional[pulumi.Input[_builtins.str]] = None,
                 source_ports: Optional[pulumi.Input[Sequence[pulumi.Input['ServiceIpv6AclFeatureSequenceMatchEntrySourcePortArgs']]]] = None,
                 tcp_state: Optional[pulumi.Input[_builtins.str]] = None,
                 traffic_classes: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.int]]]] = None):
        """
        :param pulumi.Input[_builtins.str] destination_data_prefix: Destination Data IP Prefix
        :param pulumi.Input[Sequence[pulumi.Input['ServiceIpv6AclFeatureSequenceMatchEntryDestinationPortArgs']]] destination_ports: Destination Port List
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] icmp_messages: ICMP6 Message
        :param pulumi.Input[_builtins.int] next_header: next header number
                 - Range: `0`-`255`
        :param pulumi.Input[_builtins.str] packet_length: Packet Length
        :param pulumi.Input[_builtins.str] source_data_prefix: Source Data IP Prefix
        :param pulumi.Input[Sequence[pulumi.Input['ServiceIpv6AclFeatureSequenceMatchEntrySourcePortArgs']]] source_ports: Source Port List
        :param pulumi.Input[_builtins.str] tcp_state: TCP States
                 - Choices: `syn`
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.int]]] traffic_classes: Select Traffic Class
        """
        if destination_data_prefix is not None:
            pulumi.set(__self__, "destination_data_prefix", destination_data_prefix)
        if destination_data_prefix_list_id is not None:
            pulumi.set(__self__, "destination_data_prefix_list_id", destination_data_prefix_list_id)
        if destination_ports is not None:
            pulumi.set(__self__, "destination_ports", destination_ports)
        if icmp_messages is not None:
            pulumi.set(__self__, "icmp_messages", icmp_messages)
        if next_header is not None:
            pulumi.set(__self__, "next_header", next_header)
        if packet_length is not None:
            pulumi.set(__self__, "packet_length", packet_length)
        if source_data_prefix is not None:
            pulumi.set(__self__, "source_data_prefix", source_data_prefix)
        if source_data_prefix_list_id is not None:
            pulumi.set(__self__, "source_data_prefix_list_id", source_data_prefix_list_id)
        if source_ports is not None:
            pulumi.set(__self__, "source_ports", source_ports)
        if tcp_state is not None:
            pulumi.set(__self__, "tcp_state", tcp_state)
        if traffic_classes is not None:
            pulumi.set(__self__, "traffic_classes", traffic_classes)

    @_builtins.property
    @pulumi.getter(name="destinationDataPrefix")
    def destination_data_prefix(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Destination Data IP Prefix
        """
        return pulumi.get(self, "destination_data_prefix")

    @destination_data_prefix.setter
    def destination_data_prefix(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "destination_data_prefix", value)

    @_builtins.property
    @pulumi.getter(name="destinationDataPrefixListId")
    def destination_data_prefix_list_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "destination_data_prefix_list_id")

    @destination_data_prefix_list_id.setter
    def destination_data_prefix_list_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "destination_data_prefix_list_id", value)

    @_builtins.property
    @pulumi.getter(name="destinationPorts")
    def destination_ports(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ServiceIpv6AclFeatureSequenceMatchEntryDestinationPortArgs']]]]:
        """
        Destination Port List
        """
        return pulumi.get(self, "destination_ports")

    @destination_ports.setter
    def destination_ports(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ServiceIpv6AclFeatureSequenceMatchEntryDestinationPortArgs']]]]):
        pulumi.set(self, "destination_ports", value)

    @_builtins.property
    @pulumi.getter(name="icmpMessages")
    def icmp_messages(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]:
        """
        ICMP6 Message
        """
        return pulumi.get(self, "icmp_messages")

    @icmp_messages.setter
    def icmp_messages(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "icmp_messages", value)

    @_builtins.property
    @pulumi.getter(name="nextHeader")
    def next_header(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        next header number
          - Range: `0`-`255`
        """
        return pulumi.get(self, "next_header")

    @next_header.setter
    def next_header(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "next_header", value)

    @_builtins.property
    @pulumi.getter(name="packetLength")
    def packet_length(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Packet Length
        """
        return pulumi.get(self, "packet_length")

    @packet_length.setter
    def packet_length(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "packet_length", value)

    @_builtins.property
    @pulumi.getter(name="sourceDataPrefix")
    def source_data_prefix(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Source Data IP Prefix
        """
        return pulumi.get(self, "source_data_prefix")

    @source_data_prefix.setter
    def source_data_prefix(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "source_data_prefix", value)

    @_builtins.property
    @pulumi.getter(name="sourceDataPrefixListId")
    def source_data_prefix_list_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "source_data_prefix_list_id")

    @source_data_prefix_list_id.setter
    def source_data_prefix_list_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "source_data_prefix_list_id", value)

    @_builtins.property
    @pulumi.getter(name="sourcePorts")
    def source_ports(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ServiceIpv6AclFeatureSequenceMatchEntrySourcePortArgs']]]]:
        """
        Source Port List
        """
        return pulumi.get(self, "source_ports")

    @source_ports.setter
    def source_ports(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ServiceIpv6AclFeatureSequenceMatchEntrySourcePortArgs']]]]):
        pulumi.set(self, "source_ports", value)

    @_builtins.property
    @pulumi.getter(name="tcpState")
    def tcp_state(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        TCP States
          - Choices: `syn`
        """
        return pulumi.get(self, "tcp_state")

    @tcp_state.setter
    def tcp_state(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "tcp_state", value)

    @_builtins.property
    @pulumi.getter(name="trafficClasses")
    def traffic_classes(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.int]]]]:
        """
        Select Traffic Class
        """
        return pulumi.get(self, "traffic_classes")

    @traffic_classes.setter
    def traffic_classes(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.int]]]]):
        pulumi.set(self, "traffic_classes", value)


if not MYPY:
    class ServiceIpv6AclFeatureSequenceMatchEntryDestinationPortArgsDict(TypedDict):
        port: NotRequired[pulumi.Input[_builtins.str]]
        """
        destination port range or individual port number
        """
elif False:
    ServiceIpv6AclFeatureSequenceMatchEntryDestinationPortArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ServiceIpv6AclFeatureSequenceMatchEntryDestinationPortArgs:
    def __init__(__self__, *,
                 port: Optional[pulumi.Input[_builtins.str]] = None):
        """
        :param pulumi.Input[_builtins.str] port: destination port range or individual port number
        """
        if port is not None:
            pulumi.set(__self__, "port", port)

    @_builtins.property
    @pulumi.getter
    def port(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        destination port range or individual port number
        """
        return pulumi.get(self, "port")

    @port.setter
    def port(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "port", value)


if not MYPY:
    class ServiceIpv6AclFeatureSequenceMatchEntrySourcePortArgsDict(TypedDict):
        port: NotRequired[pulumi.Input[_builtins.str]]
        """
        source port range or individual port number
        """
elif False:
    ServiceIpv6AclFeatureSequenceMatchEntrySourcePortArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ServiceIpv6AclFeatureSequenceMatchEntrySourcePortArgs:
    def __init__(__self__, *,
                 port: Optional[pulumi.Input[_builtins.str]] = None):
        """
        :param pulumi.Input[_builtins.str] port: source port range or individual port number
        """
        if port is not None:
            pulumi.set(__self__, "port", port)

    @_builtins.property
    @pulumi.getter
    def port(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        source port range or individual port number
        """
        return pulumi.get(self, "port")

    @port.setter
    def port(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "port", value)


if not MYPY:
    class ServiceLanVpnFeatureAdvertiseOmpIpv4ArgsDict(TypedDict):
        prefixes: NotRequired[pulumi.Input[Sequence[pulumi.Input['ServiceLanVpnFeatureAdvertiseOmpIpv4PrefixArgsDict']]]]
        """
        IPv4 Prefix List
        """
        protocol: NotRequired[pulumi.Input[_builtins.str]]
        """
        Protocol
          - Choices: `bgp`, `ospf`, `ospfv3`, `connected`, `static`, `network`, `aggregate`, `eigrp`, `lisp`, `isis`
        """
        protocol_variable: NotRequired[pulumi.Input[_builtins.str]]
        """
        Variable name
        """
        route_policy_id: NotRequired[pulumi.Input[_builtins.str]]
elif False:
    ServiceLanVpnFeatureAdvertiseOmpIpv4ArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ServiceLanVpnFeatureAdvertiseOmpIpv4Args:
    def __init__(__self__, *,
                 prefixes: Optional[pulumi.Input[Sequence[pulumi.Input['ServiceLanVpnFeatureAdvertiseOmpIpv4PrefixArgs']]]] = None,
                 protocol: Optional[pulumi.Input[_builtins.str]] = None,
                 protocol_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 route_policy_id: Optional[pulumi.Input[_builtins.str]] = None):
        """
        :param pulumi.Input[Sequence[pulumi.Input['ServiceLanVpnFeatureAdvertiseOmpIpv4PrefixArgs']]] prefixes: IPv4 Prefix List
        :param pulumi.Input[_builtins.str] protocol: Protocol
                 - Choices: `bgp`, `ospf`, `ospfv3`, `connected`, `static`, `network`, `aggregate`, `eigrp`, `lisp`, `isis`
        :param pulumi.Input[_builtins.str] protocol_variable: Variable name
        """
        if prefixes is not None:
            pulumi.set(__self__, "prefixes", prefixes)
        if protocol is not None:
            pulumi.set(__self__, "protocol", protocol)
        if protocol_variable is not None:
            pulumi.set(__self__, "protocol_variable", protocol_variable)
        if route_policy_id is not None:
            pulumi.set(__self__, "route_policy_id", route_policy_id)

    @_builtins.property
    @pulumi.getter
    def prefixes(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ServiceLanVpnFeatureAdvertiseOmpIpv4PrefixArgs']]]]:
        """
        IPv4 Prefix List
        """
        return pulumi.get(self, "prefixes")

    @prefixes.setter
    def prefixes(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ServiceLanVpnFeatureAdvertiseOmpIpv4PrefixArgs']]]]):
        pulumi.set(self, "prefixes", value)

    @_builtins.property
    @pulumi.getter
    def protocol(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Protocol
          - Choices: `bgp`, `ospf`, `ospfv3`, `connected`, `static`, `network`, `aggregate`, `eigrp`, `lisp`, `isis`
        """
        return pulumi.get(self, "protocol")

    @protocol.setter
    def protocol(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "protocol", value)

    @_builtins.property
    @pulumi.getter(name="protocolVariable")
    def protocol_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "protocol_variable")

    @protocol_variable.setter
    def protocol_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "protocol_variable", value)

    @_builtins.property
    @pulumi.getter(name="routePolicyId")
    def route_policy_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "route_policy_id")

    @route_policy_id.setter
    def route_policy_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "route_policy_id", value)


if not MYPY:
    class ServiceLanVpnFeatureAdvertiseOmpIpv4PrefixArgsDict(TypedDict):
        aggregate_only: NotRequired[pulumi.Input[_builtins.bool]]
        """
        Aggregate Only
          - Default value: `false`
        """
        network_address: NotRequired[pulumi.Input[_builtins.str]]
        network_address_variable: NotRequired[pulumi.Input[_builtins.str]]
        """
        Variable name
        """
        region: NotRequired[pulumi.Input[_builtins.str]]
        """
        Applied to Region
          - Choices: `core-and-access`, `core`, `access`
          - Default value: `core-and-access`
        """
        region_variable: NotRequired[pulumi.Input[_builtins.str]]
        """
        Variable name
        """
        subnet_mask: NotRequired[pulumi.Input[_builtins.str]]
        """
        - Choices: `255.255.255.255`, `255.255.255.254`, `255.255.255.252`, `255.255.255.248`, `255.255.255.240`, `255.255.255.224`, `255.255.255.192`, `255.255.255.128`, `255.255.255.0`, `255.255.254.0`, `255.255.252.0`, `255.255.248.0`, `255.255.240.0`, `255.255.224.0`, `255.255.192.0`, `255.255.128.0`, `255.255.0.0`, `255.254.0.0`, `255.252.0.0`, `255.240.0.0`, `255.224.0.0`, `255.192.0.0`, `255.128.0.0`, `255.0.0.0`, `254.0.0.0`, `252.0.0.0`, `248.0.0.0`, `240.0.0.0`, `224.0.0.0`, `192.0.0.0`, `128.0.0.0`, `0.0.0.0`
        """
        subnet_mask_variable: NotRequired[pulumi.Input[_builtins.str]]
        """
        Variable name
        """
elif False:
    ServiceLanVpnFeatureAdvertiseOmpIpv4PrefixArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ServiceLanVpnFeatureAdvertiseOmpIpv4PrefixArgs:
    def __init__(__self__, *,
                 aggregate_only: Optional[pulumi.Input[_builtins.bool]] = None,
                 network_address: Optional[pulumi.Input[_builtins.str]] = None,
                 network_address_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 region_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 subnet_mask: Optional[pulumi.Input[_builtins.str]] = None,
                 subnet_mask_variable: Optional[pulumi.Input[_builtins.str]] = None):
        """
        :param pulumi.Input[_builtins.bool] aggregate_only: Aggregate Only
                 - Default value: `false`
        :param pulumi.Input[_builtins.str] network_address_variable: Variable name
        :param pulumi.Input[_builtins.str] region: Applied to Region
                 - Choices: `core-and-access`, `core`, `access`
                 - Default value: `core-and-access`
        :param pulumi.Input[_builtins.str] region_variable: Variable name
        :param pulumi.Input[_builtins.str] subnet_mask: - Choices: `255.255.255.255`, `255.255.255.254`, `255.255.255.252`, `255.255.255.248`, `255.255.255.240`, `255.255.255.224`, `255.255.255.192`, `255.255.255.128`, `255.255.255.0`, `255.255.254.0`, `255.255.252.0`, `255.255.248.0`, `255.255.240.0`, `255.255.224.0`, `255.255.192.0`, `255.255.128.0`, `255.255.0.0`, `255.254.0.0`, `255.252.0.0`, `255.240.0.0`, `255.224.0.0`, `255.192.0.0`, `255.128.0.0`, `255.0.0.0`, `254.0.0.0`, `252.0.0.0`, `248.0.0.0`, `240.0.0.0`, `224.0.0.0`, `192.0.0.0`, `128.0.0.0`, `0.0.0.0`
        :param pulumi.Input[_builtins.str] subnet_mask_variable: Variable name
        """
        if aggregate_only is not None:
            pulumi.set(__self__, "aggregate_only", aggregate_only)
        if network_address is not None:
            pulumi.set(__self__, "network_address", network_address)
        if network_address_variable is not None:
            pulumi.set(__self__, "network_address_variable", network_address_variable)
        if region is not None:
            pulumi.set(__self__, "region", region)
        if region_variable is not None:
            pulumi.set(__self__, "region_variable", region_variable)
        if subnet_mask is not None:
            pulumi.set(__self__, "subnet_mask", subnet_mask)
        if subnet_mask_variable is not None:
            pulumi.set(__self__, "subnet_mask_variable", subnet_mask_variable)

    @_builtins.property
    @pulumi.getter(name="aggregateOnly")
    def aggregate_only(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Aggregate Only
          - Default value: `false`
        """
        return pulumi.get(self, "aggregate_only")

    @aggregate_only.setter
    def aggregate_only(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "aggregate_only", value)

    @_builtins.property
    @pulumi.getter(name="networkAddress")
    def network_address(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "network_address")

    @network_address.setter
    def network_address(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "network_address", value)

    @_builtins.property
    @pulumi.getter(name="networkAddressVariable")
    def network_address_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "network_address_variable")

    @network_address_variable.setter
    def network_address_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "network_address_variable", value)

    @_builtins.property
    @pulumi.getter
    def region(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Applied to Region
          - Choices: `core-and-access`, `core`, `access`
          - Default value: `core-and-access`
        """
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "region", value)

    @_builtins.property
    @pulumi.getter(name="regionVariable")
    def region_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "region_variable")

    @region_variable.setter
    def region_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "region_variable", value)

    @_builtins.property
    @pulumi.getter(name="subnetMask")
    def subnet_mask(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        - Choices: `255.255.255.255`, `255.255.255.254`, `255.255.255.252`, `255.255.255.248`, `255.255.255.240`, `255.255.255.224`, `255.255.255.192`, `255.255.255.128`, `255.255.255.0`, `255.255.254.0`, `255.255.252.0`, `255.255.248.0`, `255.255.240.0`, `255.255.224.0`, `255.255.192.0`, `255.255.128.0`, `255.255.0.0`, `255.254.0.0`, `255.252.0.0`, `255.240.0.0`, `255.224.0.0`, `255.192.0.0`, `255.128.0.0`, `255.0.0.0`, `254.0.0.0`, `252.0.0.0`, `248.0.0.0`, `240.0.0.0`, `224.0.0.0`, `192.0.0.0`, `128.0.0.0`, `0.0.0.0`
        """
        return pulumi.get(self, "subnet_mask")

    @subnet_mask.setter
    def subnet_mask(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "subnet_mask", value)

    @_builtins.property
    @pulumi.getter(name="subnetMaskVariable")
    def subnet_mask_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "subnet_mask_variable")

    @subnet_mask_variable.setter
    def subnet_mask_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "subnet_mask_variable", value)


if not MYPY:
    class ServiceLanVpnFeatureAdvertiseOmpIpv6ArgsDict(TypedDict):
        prefixes: NotRequired[pulumi.Input[Sequence[pulumi.Input['ServiceLanVpnFeatureAdvertiseOmpIpv6PrefixArgsDict']]]]
        """
        IPv6 Prefix List
        """
        protocol: NotRequired[pulumi.Input[_builtins.str]]
        """
        Protocol
          - Choices: `BGP`, `OSPF`, `Connected`, `Static`, `Network`, `Aggregate`
        """
        protocol_sub_type: NotRequired[pulumi.Input[_builtins.str]]
        """
        Protocol Sub Type
          - Choices: `External`
        """
        protocol_sub_type_variable: NotRequired[pulumi.Input[_builtins.str]]
        """
        Variable name
        """
        protocol_variable: NotRequired[pulumi.Input[_builtins.str]]
        """
        Variable name
        """
        route_policy_id: NotRequired[pulumi.Input[_builtins.str]]
elif False:
    ServiceLanVpnFeatureAdvertiseOmpIpv6ArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ServiceLanVpnFeatureAdvertiseOmpIpv6Args:
    def __init__(__self__, *,
                 prefixes: Optional[pulumi.Input[Sequence[pulumi.Input['ServiceLanVpnFeatureAdvertiseOmpIpv6PrefixArgs']]]] = None,
                 protocol: Optional[pulumi.Input[_builtins.str]] = None,
                 protocol_sub_type: Optional[pulumi.Input[_builtins.str]] = None,
                 protocol_sub_type_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 protocol_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 route_policy_id: Optional[pulumi.Input[_builtins.str]] = None):
        """
        :param pulumi.Input[Sequence[pulumi.Input['ServiceLanVpnFeatureAdvertiseOmpIpv6PrefixArgs']]] prefixes: IPv6 Prefix List
        :param pulumi.Input[_builtins.str] protocol: Protocol
                 - Choices: `BGP`, `OSPF`, `Connected`, `Static`, `Network`, `Aggregate`
        :param pulumi.Input[_builtins.str] protocol_sub_type: Protocol Sub Type
                 - Choices: `External`
        :param pulumi.Input[_builtins.str] protocol_sub_type_variable: Variable name
        :param pulumi.Input[_builtins.str] protocol_variable: Variable name
        """
        if prefixes is not None:
            pulumi.set(__self__, "prefixes", prefixes)
        if protocol is not None:
            pulumi.set(__self__, "protocol", protocol)
        if protocol_sub_type is not None:
            pulumi.set(__self__, "protocol_sub_type", protocol_sub_type)
        if protocol_sub_type_variable is not None:
            pulumi.set(__self__, "protocol_sub_type_variable", protocol_sub_type_variable)
        if protocol_variable is not None:
            pulumi.set(__self__, "protocol_variable", protocol_variable)
        if route_policy_id is not None:
            pulumi.set(__self__, "route_policy_id", route_policy_id)

    @_builtins.property
    @pulumi.getter
    def prefixes(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ServiceLanVpnFeatureAdvertiseOmpIpv6PrefixArgs']]]]:
        """
        IPv6 Prefix List
        """
        return pulumi.get(self, "prefixes")

    @prefixes.setter
    def prefixes(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ServiceLanVpnFeatureAdvertiseOmpIpv6PrefixArgs']]]]):
        pulumi.set(self, "prefixes", value)

    @_builtins.property
    @pulumi.getter
    def protocol(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Protocol
          - Choices: `BGP`, `OSPF`, `Connected`, `Static`, `Network`, `Aggregate`
        """
        return pulumi.get(self, "protocol")

    @protocol.setter
    def protocol(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "protocol", value)

    @_builtins.property
    @pulumi.getter(name="protocolSubType")
    def protocol_sub_type(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Protocol Sub Type
          - Choices: `External`
        """
        return pulumi.get(self, "protocol_sub_type")

    @protocol_sub_type.setter
    def protocol_sub_type(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "protocol_sub_type", value)

    @_builtins.property
    @pulumi.getter(name="protocolSubTypeVariable")
    def protocol_sub_type_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "protocol_sub_type_variable")

    @protocol_sub_type_variable.setter
    def protocol_sub_type_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "protocol_sub_type_variable", value)

    @_builtins.property
    @pulumi.getter(name="protocolVariable")
    def protocol_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "protocol_variable")

    @protocol_variable.setter
    def protocol_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "protocol_variable", value)

    @_builtins.property
    @pulumi.getter(name="routePolicyId")
    def route_policy_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "route_policy_id")

    @route_policy_id.setter
    def route_policy_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "route_policy_id", value)


if not MYPY:
    class ServiceLanVpnFeatureAdvertiseOmpIpv6PrefixArgsDict(TypedDict):
        aggregate_only: NotRequired[pulumi.Input[_builtins.bool]]
        """
        Aggregate Only
          - Default value: `false`
        """
        prefix: NotRequired[pulumi.Input[_builtins.str]]
        """
        IPv6 Prefix
        """
        prefix_variable: NotRequired[pulumi.Input[_builtins.str]]
        """
        Variable name
        """
elif False:
    ServiceLanVpnFeatureAdvertiseOmpIpv6PrefixArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ServiceLanVpnFeatureAdvertiseOmpIpv6PrefixArgs:
    def __init__(__self__, *,
                 aggregate_only: Optional[pulumi.Input[_builtins.bool]] = None,
                 prefix: Optional[pulumi.Input[_builtins.str]] = None,
                 prefix_variable: Optional[pulumi.Input[_builtins.str]] = None):
        """
        :param pulumi.Input[_builtins.bool] aggregate_only: Aggregate Only
                 - Default value: `false`
        :param pulumi.Input[_builtins.str] prefix: IPv6 Prefix
        :param pulumi.Input[_builtins.str] prefix_variable: Variable name
        """
        if aggregate_only is not None:
            pulumi.set(__self__, "aggregate_only", aggregate_only)
        if prefix is not None:
            pulumi.set(__self__, "prefix", prefix)
        if prefix_variable is not None:
            pulumi.set(__self__, "prefix_variable", prefix_variable)

    @_builtins.property
    @pulumi.getter(name="aggregateOnly")
    def aggregate_only(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Aggregate Only
          - Default value: `false`
        """
        return pulumi.get(self, "aggregate_only")

    @aggregate_only.setter
    def aggregate_only(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "aggregate_only", value)

    @_builtins.property
    @pulumi.getter
    def prefix(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        IPv6 Prefix
        """
        return pulumi.get(self, "prefix")

    @prefix.setter
    def prefix(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "prefix", value)

    @_builtins.property
    @pulumi.getter(name="prefixVariable")
    def prefix_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "prefix_variable")

    @prefix_variable.setter
    def prefix_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "prefix_variable", value)


if not MYPY:
    class ServiceLanVpnFeatureGreRouteArgsDict(TypedDict):
        interface_variable: NotRequired[pulumi.Input[_builtins.str]]
        """
        Variable name
        """
        interfaces: NotRequired[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]
        """
        Interface
        """
        network_address: NotRequired[pulumi.Input[_builtins.str]]
        """
        IP Address
        """
        network_address_variable: NotRequired[pulumi.Input[_builtins.str]]
        """
        Variable name
        """
        subnet_mask: NotRequired[pulumi.Input[_builtins.str]]
        """
        Subnet Mask
          - Choices: `255.255.255.255`, `255.255.255.254`, `255.255.255.252`, `255.255.255.248`, `255.255.255.240`, `255.255.255.224`, `255.255.255.192`, `255.255.255.128`, `255.255.255.0`, `255.255.254.0`, `255.255.252.0`, `255.255.248.0`, `255.255.240.0`, `255.255.224.0`, `255.255.192.0`, `255.255.128.0`, `255.255.0.0`, `255.254.0.0`, `255.252.0.0`, `255.240.0.0`, `255.224.0.0`, `255.192.0.0`, `255.128.0.0`, `255.0.0.0`, `254.0.0.0`, `252.0.0.0`, `248.0.0.0`, `240.0.0.0`, `224.0.0.0`, `192.0.0.0`, `128.0.0.0`, `0.0.0.0`
        """
        subnet_mask_variable: NotRequired[pulumi.Input[_builtins.str]]
        """
        Variable name
        """
        vpn: NotRequired[pulumi.Input[_builtins.int]]
        """
        Service
        """
elif False:
    ServiceLanVpnFeatureGreRouteArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ServiceLanVpnFeatureGreRouteArgs:
    def __init__(__self__, *,
                 interface_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 interfaces: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 network_address: Optional[pulumi.Input[_builtins.str]] = None,
                 network_address_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 subnet_mask: Optional[pulumi.Input[_builtins.str]] = None,
                 subnet_mask_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 vpn: Optional[pulumi.Input[_builtins.int]] = None):
        """
        :param pulumi.Input[_builtins.str] interface_variable: Variable name
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] interfaces: Interface
        :param pulumi.Input[_builtins.str] network_address: IP Address
        :param pulumi.Input[_builtins.str] network_address_variable: Variable name
        :param pulumi.Input[_builtins.str] subnet_mask: Subnet Mask
                 - Choices: `255.255.255.255`, `255.255.255.254`, `255.255.255.252`, `255.255.255.248`, `255.255.255.240`, `255.255.255.224`, `255.255.255.192`, `255.255.255.128`, `255.255.255.0`, `255.255.254.0`, `255.255.252.0`, `255.255.248.0`, `255.255.240.0`, `255.255.224.0`, `255.255.192.0`, `255.255.128.0`, `255.255.0.0`, `255.254.0.0`, `255.252.0.0`, `255.240.0.0`, `255.224.0.0`, `255.192.0.0`, `255.128.0.0`, `255.0.0.0`, `254.0.0.0`, `252.0.0.0`, `248.0.0.0`, `240.0.0.0`, `224.0.0.0`, `192.0.0.0`, `128.0.0.0`, `0.0.0.0`
        :param pulumi.Input[_builtins.str] subnet_mask_variable: Variable name
        :param pulumi.Input[_builtins.int] vpn: Service
        """
        if interface_variable is not None:
            pulumi.set(__self__, "interface_variable", interface_variable)
        if interfaces is not None:
            pulumi.set(__self__, "interfaces", interfaces)
        if network_address is not None:
            pulumi.set(__self__, "network_address", network_address)
        if network_address_variable is not None:
            pulumi.set(__self__, "network_address_variable", network_address_variable)
        if subnet_mask is not None:
            pulumi.set(__self__, "subnet_mask", subnet_mask)
        if subnet_mask_variable is not None:
            pulumi.set(__self__, "subnet_mask_variable", subnet_mask_variable)
        if vpn is not None:
            pulumi.set(__self__, "vpn", vpn)

    @_builtins.property
    @pulumi.getter(name="interfaceVariable")
    def interface_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "interface_variable")

    @interface_variable.setter
    def interface_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "interface_variable", value)

    @_builtins.property
    @pulumi.getter
    def interfaces(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]:
        """
        Interface
        """
        return pulumi.get(self, "interfaces")

    @interfaces.setter
    def interfaces(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "interfaces", value)

    @_builtins.property
    @pulumi.getter(name="networkAddress")
    def network_address(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        IP Address
        """
        return pulumi.get(self, "network_address")

    @network_address.setter
    def network_address(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "network_address", value)

    @_builtins.property
    @pulumi.getter(name="networkAddressVariable")
    def network_address_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "network_address_variable")

    @network_address_variable.setter
    def network_address_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "network_address_variable", value)

    @_builtins.property
    @pulumi.getter(name="subnetMask")
    def subnet_mask(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Subnet Mask
          - Choices: `255.255.255.255`, `255.255.255.254`, `255.255.255.252`, `255.255.255.248`, `255.255.255.240`, `255.255.255.224`, `255.255.255.192`, `255.255.255.128`, `255.255.255.0`, `255.255.254.0`, `255.255.252.0`, `255.255.248.0`, `255.255.240.0`, `255.255.224.0`, `255.255.192.0`, `255.255.128.0`, `255.255.0.0`, `255.254.0.0`, `255.252.0.0`, `255.240.0.0`, `255.224.0.0`, `255.192.0.0`, `255.128.0.0`, `255.0.0.0`, `254.0.0.0`, `252.0.0.0`, `248.0.0.0`, `240.0.0.0`, `224.0.0.0`, `192.0.0.0`, `128.0.0.0`, `0.0.0.0`
        """
        return pulumi.get(self, "subnet_mask")

    @subnet_mask.setter
    def subnet_mask(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "subnet_mask", value)

    @_builtins.property
    @pulumi.getter(name="subnetMaskVariable")
    def subnet_mask_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "subnet_mask_variable")

    @subnet_mask_variable.setter
    def subnet_mask_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "subnet_mask_variable", value)

    @_builtins.property
    @pulumi.getter
    def vpn(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        Service
        """
        return pulumi.get(self, "vpn")

    @vpn.setter
    def vpn(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "vpn", value)


if not MYPY:
    class ServiceLanVpnFeatureHostMappingArgsDict(TypedDict):
        host_name: NotRequired[pulumi.Input[_builtins.str]]
        """
        Hostname
        """
        host_name_variable: NotRequired[pulumi.Input[_builtins.str]]
        """
        Variable name
        """
        list_of_ips: NotRequired[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]
        """
        List of IP
        """
        list_of_ips_variable: NotRequired[pulumi.Input[_builtins.str]]
        """
        Variable name
        """
elif False:
    ServiceLanVpnFeatureHostMappingArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ServiceLanVpnFeatureHostMappingArgs:
    def __init__(__self__, *,
                 host_name: Optional[pulumi.Input[_builtins.str]] = None,
                 host_name_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 list_of_ips: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 list_of_ips_variable: Optional[pulumi.Input[_builtins.str]] = None):
        """
        :param pulumi.Input[_builtins.str] host_name: Hostname
        :param pulumi.Input[_builtins.str] host_name_variable: Variable name
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] list_of_ips: List of IP
        :param pulumi.Input[_builtins.str] list_of_ips_variable: Variable name
        """
        if host_name is not None:
            pulumi.set(__self__, "host_name", host_name)
        if host_name_variable is not None:
            pulumi.set(__self__, "host_name_variable", host_name_variable)
        if list_of_ips is not None:
            pulumi.set(__self__, "list_of_ips", list_of_ips)
        if list_of_ips_variable is not None:
            pulumi.set(__self__, "list_of_ips_variable", list_of_ips_variable)

    @_builtins.property
    @pulumi.getter(name="hostName")
    def host_name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Hostname
        """
        return pulumi.get(self, "host_name")

    @host_name.setter
    def host_name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "host_name", value)

    @_builtins.property
    @pulumi.getter(name="hostNameVariable")
    def host_name_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "host_name_variable")

    @host_name_variable.setter
    def host_name_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "host_name_variable", value)

    @_builtins.property
    @pulumi.getter(name="listOfIps")
    def list_of_ips(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]:
        """
        List of IP
        """
        return pulumi.get(self, "list_of_ips")

    @list_of_ips.setter
    def list_of_ips(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "list_of_ips", value)

    @_builtins.property
    @pulumi.getter(name="listOfIpsVariable")
    def list_of_ips_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "list_of_ips_variable")

    @list_of_ips_variable.setter
    def list_of_ips_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "list_of_ips_variable", value)


if not MYPY:
    class ServiceLanVpnFeatureIpsecRouteArgsDict(TypedDict):
        interface_variable: NotRequired[pulumi.Input[_builtins.str]]
        """
        Variable name
        """
        interfaces: NotRequired[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]
        """
        Interface
        """
        network_address: NotRequired[pulumi.Input[_builtins.str]]
        """
        IP Address
        """
        network_address_variable: NotRequired[pulumi.Input[_builtins.str]]
        """
        Variable name
        """
        subnet_mask: NotRequired[pulumi.Input[_builtins.str]]
        """
        Subnet Mask
          - Choices: `255.255.255.255`, `255.255.255.254`, `255.255.255.252`, `255.255.255.248`, `255.255.255.240`, `255.255.255.224`, `255.255.255.192`, `255.255.255.128`, `255.255.255.0`, `255.255.254.0`, `255.255.252.0`, `255.255.248.0`, `255.255.240.0`, `255.255.224.0`, `255.255.192.0`, `255.255.128.0`, `255.255.0.0`, `255.254.0.0`, `255.252.0.0`, `255.240.0.0`, `255.224.0.0`, `255.192.0.0`, `255.128.0.0`, `255.0.0.0`, `254.0.0.0`, `252.0.0.0`, `248.0.0.0`, `240.0.0.0`, `224.0.0.0`, `192.0.0.0`, `128.0.0.0`, `0.0.0.0`
        """
        subnet_mask_variable: NotRequired[pulumi.Input[_builtins.str]]
        """
        Variable name
        """
elif False:
    ServiceLanVpnFeatureIpsecRouteArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ServiceLanVpnFeatureIpsecRouteArgs:
    def __init__(__self__, *,
                 interface_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 interfaces: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 network_address: Optional[pulumi.Input[_builtins.str]] = None,
                 network_address_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 subnet_mask: Optional[pulumi.Input[_builtins.str]] = None,
                 subnet_mask_variable: Optional[pulumi.Input[_builtins.str]] = None):
        """
        :param pulumi.Input[_builtins.str] interface_variable: Variable name
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] interfaces: Interface
        :param pulumi.Input[_builtins.str] network_address: IP Address
        :param pulumi.Input[_builtins.str] network_address_variable: Variable name
        :param pulumi.Input[_builtins.str] subnet_mask: Subnet Mask
                 - Choices: `255.255.255.255`, `255.255.255.254`, `255.255.255.252`, `255.255.255.248`, `255.255.255.240`, `255.255.255.224`, `255.255.255.192`, `255.255.255.128`, `255.255.255.0`, `255.255.254.0`, `255.255.252.0`, `255.255.248.0`, `255.255.240.0`, `255.255.224.0`, `255.255.192.0`, `255.255.128.0`, `255.255.0.0`, `255.254.0.0`, `255.252.0.0`, `255.240.0.0`, `255.224.0.0`, `255.192.0.0`, `255.128.0.0`, `255.0.0.0`, `254.0.0.0`, `252.0.0.0`, `248.0.0.0`, `240.0.0.0`, `224.0.0.0`, `192.0.0.0`, `128.0.0.0`, `0.0.0.0`
        :param pulumi.Input[_builtins.str] subnet_mask_variable: Variable name
        """
        if interface_variable is not None:
            pulumi.set(__self__, "interface_variable", interface_variable)
        if interfaces is not None:
            pulumi.set(__self__, "interfaces", interfaces)
        if network_address is not None:
            pulumi.set(__self__, "network_address", network_address)
        if network_address_variable is not None:
            pulumi.set(__self__, "network_address_variable", network_address_variable)
        if subnet_mask is not None:
            pulumi.set(__self__, "subnet_mask", subnet_mask)
        if subnet_mask_variable is not None:
            pulumi.set(__self__, "subnet_mask_variable", subnet_mask_variable)

    @_builtins.property
    @pulumi.getter(name="interfaceVariable")
    def interface_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "interface_variable")

    @interface_variable.setter
    def interface_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "interface_variable", value)

    @_builtins.property
    @pulumi.getter
    def interfaces(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]:
        """
        Interface
        """
        return pulumi.get(self, "interfaces")

    @interfaces.setter
    def interfaces(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "interfaces", value)

    @_builtins.property
    @pulumi.getter(name="networkAddress")
    def network_address(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        IP Address
        """
        return pulumi.get(self, "network_address")

    @network_address.setter
    def network_address(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "network_address", value)

    @_builtins.property
    @pulumi.getter(name="networkAddressVariable")
    def network_address_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "network_address_variable")

    @network_address_variable.setter
    def network_address_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "network_address_variable", value)

    @_builtins.property
    @pulumi.getter(name="subnetMask")
    def subnet_mask(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Subnet Mask
          - Choices: `255.255.255.255`, `255.255.255.254`, `255.255.255.252`, `255.255.255.248`, `255.255.255.240`, `255.255.255.224`, `255.255.255.192`, `255.255.255.128`, `255.255.255.0`, `255.255.254.0`, `255.255.252.0`, `255.255.248.0`, `255.255.240.0`, `255.255.224.0`, `255.255.192.0`, `255.255.128.0`, `255.255.0.0`, `255.254.0.0`, `255.252.0.0`, `255.240.0.0`, `255.224.0.0`, `255.192.0.0`, `255.128.0.0`, `255.0.0.0`, `254.0.0.0`, `252.0.0.0`, `248.0.0.0`, `240.0.0.0`, `224.0.0.0`, `192.0.0.0`, `128.0.0.0`, `0.0.0.0`
        """
        return pulumi.get(self, "subnet_mask")

    @subnet_mask.setter
    def subnet_mask(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "subnet_mask", value)

    @_builtins.property
    @pulumi.getter(name="subnetMaskVariable")
    def subnet_mask_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "subnet_mask_variable")

    @subnet_mask_variable.setter
    def subnet_mask_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "subnet_mask_variable", value)


if not MYPY:
    class ServiceLanVpnFeatureIpv4ExportRouteTargetArgsDict(TypedDict):
        route_target: NotRequired[pulumi.Input[_builtins.str]]
        """
        Route target
        """
        route_target_variable: NotRequired[pulumi.Input[_builtins.str]]
        """
        Variable name
        """
elif False:
    ServiceLanVpnFeatureIpv4ExportRouteTargetArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ServiceLanVpnFeatureIpv4ExportRouteTargetArgs:
    def __init__(__self__, *,
                 route_target: Optional[pulumi.Input[_builtins.str]] = None,
                 route_target_variable: Optional[pulumi.Input[_builtins.str]] = None):
        """
        :param pulumi.Input[_builtins.str] route_target: Route target
        :param pulumi.Input[_builtins.str] route_target_variable: Variable name
        """
        if route_target is not None:
            pulumi.set(__self__, "route_target", route_target)
        if route_target_variable is not None:
            pulumi.set(__self__, "route_target_variable", route_target_variable)

    @_builtins.property
    @pulumi.getter(name="routeTarget")
    def route_target(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Route target
        """
        return pulumi.get(self, "route_target")

    @route_target.setter
    def route_target(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "route_target", value)

    @_builtins.property
    @pulumi.getter(name="routeTargetVariable")
    def route_target_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "route_target_variable")

    @route_target_variable.setter
    def route_target_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "route_target_variable", value)


if not MYPY:
    class ServiceLanVpnFeatureIpv4ImportRouteTargetArgsDict(TypedDict):
        route_target: NotRequired[pulumi.Input[_builtins.str]]
        """
        Route target
        """
        route_target_variable: NotRequired[pulumi.Input[_builtins.str]]
        """
        Variable name
        """
elif False:
    ServiceLanVpnFeatureIpv4ImportRouteTargetArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ServiceLanVpnFeatureIpv4ImportRouteTargetArgs:
    def __init__(__self__, *,
                 route_target: Optional[pulumi.Input[_builtins.str]] = None,
                 route_target_variable: Optional[pulumi.Input[_builtins.str]] = None):
        """
        :param pulumi.Input[_builtins.str] route_target: Route target
        :param pulumi.Input[_builtins.str] route_target_variable: Variable name
        """
        if route_target is not None:
            pulumi.set(__self__, "route_target", route_target)
        if route_target_variable is not None:
            pulumi.set(__self__, "route_target_variable", route_target_variable)

    @_builtins.property
    @pulumi.getter(name="routeTarget")
    def route_target(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Route target
        """
        return pulumi.get(self, "route_target")

    @route_target.setter
    def route_target(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "route_target", value)

    @_builtins.property
    @pulumi.getter(name="routeTargetVariable")
    def route_target_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "route_target_variable")

    @route_target_variable.setter
    def route_target_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "route_target_variable", value)


if not MYPY:
    class ServiceLanVpnFeatureIpv4StaticRouteArgsDict(TypedDict):
        dhcp: NotRequired[pulumi.Input[_builtins.bool]]
        """
        IPv4 Route Gateway DHCP, Attribute conditional on `gateway` being equal to `dhcp`
        """
        gateway: NotRequired[pulumi.Input[_builtins.str]]
        """
        Gateway type
          - Choices: `nextHop`, `null0`, `vpn`, `dhcp`
        """
        network_address: NotRequired[pulumi.Input[_builtins.str]]
        """
        IP Address
        """
        network_address_variable: NotRequired[pulumi.Input[_builtins.str]]
        """
        Variable name
        """
        next_hop_with_trackers: NotRequired[pulumi.Input[Sequence[pulumi.Input['ServiceLanVpnFeatureIpv4StaticRouteNextHopWithTrackerArgsDict']]]]
        """
        IPv4 Route Gateway Next Hop with Tracker, Attribute conditional on `gateway` being equal to `nextHop`
        """
        next_hops: NotRequired[pulumi.Input[Sequence[pulumi.Input['ServiceLanVpnFeatureIpv4StaticRouteNextHopArgsDict']]]]
        """
        IPv4 Route Gateway Next Hop, Attribute conditional on `gateway` being equal to `nextHop`
        """
        null0: NotRequired[pulumi.Input[_builtins.bool]]
        """
        IPv4 Route Gateway Next Hop, Attribute conditional on `gateway` being equal to `null0`
        """
        subnet_mask: NotRequired[pulumi.Input[_builtins.str]]
        """
        Subnet Mask
          - Choices: `255.255.255.255`, `255.255.255.254`, `255.255.255.252`, `255.255.255.248`, `255.255.255.240`, `255.255.255.224`, `255.255.255.192`, `255.255.255.128`, `255.255.255.0`, `255.255.254.0`, `255.255.252.0`, `255.255.248.0`, `255.255.240.0`, `255.255.224.0`, `255.255.192.0`, `255.255.128.0`, `255.255.0.0`, `255.254.0.0`, `255.252.0.0`, `255.240.0.0`, `255.224.0.0`, `255.192.0.0`, `255.128.0.0`, `255.0.0.0`, `254.0.0.0`, `252.0.0.0`, `248.0.0.0`, `240.0.0.0`, `224.0.0.0`, `192.0.0.0`, `128.0.0.0`, `0.0.0.0`
        """
        subnet_mask_variable: NotRequired[pulumi.Input[_builtins.str]]
        """
        Variable name
        """
        vpn: NotRequired[pulumi.Input[_builtins.bool]]
        """
        IPv4 Route Gateway VPN, Attribute conditional on `gateway` being equal to `vpn`
        """
elif False:
    ServiceLanVpnFeatureIpv4StaticRouteArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ServiceLanVpnFeatureIpv4StaticRouteArgs:
    def __init__(__self__, *,
                 dhcp: Optional[pulumi.Input[_builtins.bool]] = None,
                 gateway: Optional[pulumi.Input[_builtins.str]] = None,
                 network_address: Optional[pulumi.Input[_builtins.str]] = None,
                 network_address_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 next_hop_with_trackers: Optional[pulumi.Input[Sequence[pulumi.Input['ServiceLanVpnFeatureIpv4StaticRouteNextHopWithTrackerArgs']]]] = None,
                 next_hops: Optional[pulumi.Input[Sequence[pulumi.Input['ServiceLanVpnFeatureIpv4StaticRouteNextHopArgs']]]] = None,
                 null0: Optional[pulumi.Input[_builtins.bool]] = None,
                 subnet_mask: Optional[pulumi.Input[_builtins.str]] = None,
                 subnet_mask_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 vpn: Optional[pulumi.Input[_builtins.bool]] = None):
        """
        :param pulumi.Input[_builtins.bool] dhcp: IPv4 Route Gateway DHCP, Attribute conditional on `gateway` being equal to `dhcp`
        :param pulumi.Input[_builtins.str] gateway: Gateway type
                 - Choices: `nextHop`, `null0`, `vpn`, `dhcp`
        :param pulumi.Input[_builtins.str] network_address: IP Address
        :param pulumi.Input[_builtins.str] network_address_variable: Variable name
        :param pulumi.Input[Sequence[pulumi.Input['ServiceLanVpnFeatureIpv4StaticRouteNextHopWithTrackerArgs']]] next_hop_with_trackers: IPv4 Route Gateway Next Hop with Tracker, Attribute conditional on `gateway` being equal to `nextHop`
        :param pulumi.Input[Sequence[pulumi.Input['ServiceLanVpnFeatureIpv4StaticRouteNextHopArgs']]] next_hops: IPv4 Route Gateway Next Hop, Attribute conditional on `gateway` being equal to `nextHop`
        :param pulumi.Input[_builtins.bool] null0: IPv4 Route Gateway Next Hop, Attribute conditional on `gateway` being equal to `null0`
        :param pulumi.Input[_builtins.str] subnet_mask: Subnet Mask
                 - Choices: `255.255.255.255`, `255.255.255.254`, `255.255.255.252`, `255.255.255.248`, `255.255.255.240`, `255.255.255.224`, `255.255.255.192`, `255.255.255.128`, `255.255.255.0`, `255.255.254.0`, `255.255.252.0`, `255.255.248.0`, `255.255.240.0`, `255.255.224.0`, `255.255.192.0`, `255.255.128.0`, `255.255.0.0`, `255.254.0.0`, `255.252.0.0`, `255.240.0.0`, `255.224.0.0`, `255.192.0.0`, `255.128.0.0`, `255.0.0.0`, `254.0.0.0`, `252.0.0.0`, `248.0.0.0`, `240.0.0.0`, `224.0.0.0`, `192.0.0.0`, `128.0.0.0`, `0.0.0.0`
        :param pulumi.Input[_builtins.str] subnet_mask_variable: Variable name
        :param pulumi.Input[_builtins.bool] vpn: IPv4 Route Gateway VPN, Attribute conditional on `gateway` being equal to `vpn`
        """
        if dhcp is not None:
            pulumi.set(__self__, "dhcp", dhcp)
        if gateway is not None:
            pulumi.set(__self__, "gateway", gateway)
        if network_address is not None:
            pulumi.set(__self__, "network_address", network_address)
        if network_address_variable is not None:
            pulumi.set(__self__, "network_address_variable", network_address_variable)
        if next_hop_with_trackers is not None:
            pulumi.set(__self__, "next_hop_with_trackers", next_hop_with_trackers)
        if next_hops is not None:
            pulumi.set(__self__, "next_hops", next_hops)
        if null0 is not None:
            pulumi.set(__self__, "null0", null0)
        if subnet_mask is not None:
            pulumi.set(__self__, "subnet_mask", subnet_mask)
        if subnet_mask_variable is not None:
            pulumi.set(__self__, "subnet_mask_variable", subnet_mask_variable)
        if vpn is not None:
            pulumi.set(__self__, "vpn", vpn)

    @_builtins.property
    @pulumi.getter
    def dhcp(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        IPv4 Route Gateway DHCP, Attribute conditional on `gateway` being equal to `dhcp`
        """
        return pulumi.get(self, "dhcp")

    @dhcp.setter
    def dhcp(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "dhcp", value)

    @_builtins.property
    @pulumi.getter
    def gateway(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Gateway type
          - Choices: `nextHop`, `null0`, `vpn`, `dhcp`
        """
        return pulumi.get(self, "gateway")

    @gateway.setter
    def gateway(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "gateway", value)

    @_builtins.property
    @pulumi.getter(name="networkAddress")
    def network_address(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        IP Address
        """
        return pulumi.get(self, "network_address")

    @network_address.setter
    def network_address(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "network_address", value)

    @_builtins.property
    @pulumi.getter(name="networkAddressVariable")
    def network_address_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "network_address_variable")

    @network_address_variable.setter
    def network_address_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "network_address_variable", value)

    @_builtins.property
    @pulumi.getter(name="nextHopWithTrackers")
    def next_hop_with_trackers(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ServiceLanVpnFeatureIpv4StaticRouteNextHopWithTrackerArgs']]]]:
        """
        IPv4 Route Gateway Next Hop with Tracker, Attribute conditional on `gateway` being equal to `nextHop`
        """
        return pulumi.get(self, "next_hop_with_trackers")

    @next_hop_with_trackers.setter
    def next_hop_with_trackers(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ServiceLanVpnFeatureIpv4StaticRouteNextHopWithTrackerArgs']]]]):
        pulumi.set(self, "next_hop_with_trackers", value)

    @_builtins.property
    @pulumi.getter(name="nextHops")
    def next_hops(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ServiceLanVpnFeatureIpv4StaticRouteNextHopArgs']]]]:
        """
        IPv4 Route Gateway Next Hop, Attribute conditional on `gateway` being equal to `nextHop`
        """
        return pulumi.get(self, "next_hops")

    @next_hops.setter
    def next_hops(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ServiceLanVpnFeatureIpv4StaticRouteNextHopArgs']]]]):
        pulumi.set(self, "next_hops", value)

    @_builtins.property
    @pulumi.getter
    def null0(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        IPv4 Route Gateway Next Hop, Attribute conditional on `gateway` being equal to `null0`
        """
        return pulumi.get(self, "null0")

    @null0.setter
    def null0(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "null0", value)

    @_builtins.property
    @pulumi.getter(name="subnetMask")
    def subnet_mask(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Subnet Mask
          - Choices: `255.255.255.255`, `255.255.255.254`, `255.255.255.252`, `255.255.255.248`, `255.255.255.240`, `255.255.255.224`, `255.255.255.192`, `255.255.255.128`, `255.255.255.0`, `255.255.254.0`, `255.255.252.0`, `255.255.248.0`, `255.255.240.0`, `255.255.224.0`, `255.255.192.0`, `255.255.128.0`, `255.255.0.0`, `255.254.0.0`, `255.252.0.0`, `255.240.0.0`, `255.224.0.0`, `255.192.0.0`, `255.128.0.0`, `255.0.0.0`, `254.0.0.0`, `252.0.0.0`, `248.0.0.0`, `240.0.0.0`, `224.0.0.0`, `192.0.0.0`, `128.0.0.0`, `0.0.0.0`
        """
        return pulumi.get(self, "subnet_mask")

    @subnet_mask.setter
    def subnet_mask(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "subnet_mask", value)

    @_builtins.property
    @pulumi.getter(name="subnetMaskVariable")
    def subnet_mask_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "subnet_mask_variable")

    @subnet_mask_variable.setter
    def subnet_mask_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "subnet_mask_variable", value)

    @_builtins.property
    @pulumi.getter
    def vpn(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        IPv4 Route Gateway VPN, Attribute conditional on `gateway` being equal to `vpn`
        """
        return pulumi.get(self, "vpn")

    @vpn.setter
    def vpn(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "vpn", value)


if not MYPY:
    class ServiceLanVpnFeatureIpv4StaticRouteNextHopArgsDict(TypedDict):
        address: NotRequired[pulumi.Input[_builtins.str]]
        """
        Address
        """
        address_variable: NotRequired[pulumi.Input[_builtins.str]]
        """
        Variable name
        """
        administrative_distance: NotRequired[pulumi.Input[_builtins.int]]
        """
        Administrative distance
          - Range: `1`-`255`
          - Default value: `1`
        """
        administrative_distance_variable: NotRequired[pulumi.Input[_builtins.str]]
        """
        Variable name
        """
elif False:
    ServiceLanVpnFeatureIpv4StaticRouteNextHopArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ServiceLanVpnFeatureIpv4StaticRouteNextHopArgs:
    def __init__(__self__, *,
                 address: Optional[pulumi.Input[_builtins.str]] = None,
                 address_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 administrative_distance: Optional[pulumi.Input[_builtins.int]] = None,
                 administrative_distance_variable: Optional[pulumi.Input[_builtins.str]] = None):
        """
        :param pulumi.Input[_builtins.str] address: Address
        :param pulumi.Input[_builtins.str] address_variable: Variable name
        :param pulumi.Input[_builtins.int] administrative_distance: Administrative distance
                 - Range: `1`-`255`
                 - Default value: `1`
        :param pulumi.Input[_builtins.str] administrative_distance_variable: Variable name
        """
        if address is not None:
            pulumi.set(__self__, "address", address)
        if address_variable is not None:
            pulumi.set(__self__, "address_variable", address_variable)
        if administrative_distance is not None:
            pulumi.set(__self__, "administrative_distance", administrative_distance)
        if administrative_distance_variable is not None:
            pulumi.set(__self__, "administrative_distance_variable", administrative_distance_variable)

    @_builtins.property
    @pulumi.getter
    def address(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Address
        """
        return pulumi.get(self, "address")

    @address.setter
    def address(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "address", value)

    @_builtins.property
    @pulumi.getter(name="addressVariable")
    def address_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "address_variable")

    @address_variable.setter
    def address_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "address_variable", value)

    @_builtins.property
    @pulumi.getter(name="administrativeDistance")
    def administrative_distance(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        Administrative distance
          - Range: `1`-`255`
          - Default value: `1`
        """
        return pulumi.get(self, "administrative_distance")

    @administrative_distance.setter
    def administrative_distance(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "administrative_distance", value)

    @_builtins.property
    @pulumi.getter(name="administrativeDistanceVariable")
    def administrative_distance_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "administrative_distance_variable")

    @administrative_distance_variable.setter
    def administrative_distance_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "administrative_distance_variable", value)


if not MYPY:
    class ServiceLanVpnFeatureIpv4StaticRouteNextHopWithTrackerArgsDict(TypedDict):
        address: NotRequired[pulumi.Input[_builtins.str]]
        """
        Address
        """
        address_variable: NotRequired[pulumi.Input[_builtins.str]]
        """
        Variable name
        """
        administrative_distance: NotRequired[pulumi.Input[_builtins.int]]
        """
        Administrative distance
          - Range: `1`-`255`
          - Default value: `1`
        """
        administrative_distance_variable: NotRequired[pulumi.Input[_builtins.str]]
        """
        Variable name
        """
        tracker_id: NotRequired[pulumi.Input[_builtins.str]]
elif False:
    ServiceLanVpnFeatureIpv4StaticRouteNextHopWithTrackerArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ServiceLanVpnFeatureIpv4StaticRouteNextHopWithTrackerArgs:
    def __init__(__self__, *,
                 address: Optional[pulumi.Input[_builtins.str]] = None,
                 address_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 administrative_distance: Optional[pulumi.Input[_builtins.int]] = None,
                 administrative_distance_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 tracker_id: Optional[pulumi.Input[_builtins.str]] = None):
        """
        :param pulumi.Input[_builtins.str] address: Address
        :param pulumi.Input[_builtins.str] address_variable: Variable name
        :param pulumi.Input[_builtins.int] administrative_distance: Administrative distance
                 - Range: `1`-`255`
                 - Default value: `1`
        :param pulumi.Input[_builtins.str] administrative_distance_variable: Variable name
        """
        if address is not None:
            pulumi.set(__self__, "address", address)
        if address_variable is not None:
            pulumi.set(__self__, "address_variable", address_variable)
        if administrative_distance is not None:
            pulumi.set(__self__, "administrative_distance", administrative_distance)
        if administrative_distance_variable is not None:
            pulumi.set(__self__, "administrative_distance_variable", administrative_distance_variable)
        if tracker_id is not None:
            pulumi.set(__self__, "tracker_id", tracker_id)

    @_builtins.property
    @pulumi.getter
    def address(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Address
        """
        return pulumi.get(self, "address")

    @address.setter
    def address(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "address", value)

    @_builtins.property
    @pulumi.getter(name="addressVariable")
    def address_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "address_variable")

    @address_variable.setter
    def address_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "address_variable", value)

    @_builtins.property
    @pulumi.getter(name="administrativeDistance")
    def administrative_distance(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        Administrative distance
          - Range: `1`-`255`
          - Default value: `1`
        """
        return pulumi.get(self, "administrative_distance")

    @administrative_distance.setter
    def administrative_distance(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "administrative_distance", value)

    @_builtins.property
    @pulumi.getter(name="administrativeDistanceVariable")
    def administrative_distance_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "administrative_distance_variable")

    @administrative_distance_variable.setter
    def administrative_distance_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "administrative_distance_variable", value)

    @_builtins.property
    @pulumi.getter(name="trackerId")
    def tracker_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "tracker_id")

    @tracker_id.setter
    def tracker_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "tracker_id", value)


if not MYPY:
    class ServiceLanVpnFeatureIpv6ExportRouteTargetArgsDict(TypedDict):
        route_target: NotRequired[pulumi.Input[_builtins.str]]
        """
        Route target
        """
        route_target_variable: NotRequired[pulumi.Input[_builtins.str]]
        """
        Variable name
        """
elif False:
    ServiceLanVpnFeatureIpv6ExportRouteTargetArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ServiceLanVpnFeatureIpv6ExportRouteTargetArgs:
    def __init__(__self__, *,
                 route_target: Optional[pulumi.Input[_builtins.str]] = None,
                 route_target_variable: Optional[pulumi.Input[_builtins.str]] = None):
        """
        :param pulumi.Input[_builtins.str] route_target: Route target
        :param pulumi.Input[_builtins.str] route_target_variable: Variable name
        """
        if route_target is not None:
            pulumi.set(__self__, "route_target", route_target)
        if route_target_variable is not None:
            pulumi.set(__self__, "route_target_variable", route_target_variable)

    @_builtins.property
    @pulumi.getter(name="routeTarget")
    def route_target(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Route target
        """
        return pulumi.get(self, "route_target")

    @route_target.setter
    def route_target(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "route_target", value)

    @_builtins.property
    @pulumi.getter(name="routeTargetVariable")
    def route_target_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "route_target_variable")

    @route_target_variable.setter
    def route_target_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "route_target_variable", value)


if not MYPY:
    class ServiceLanVpnFeatureIpv6ImportRouteTargetArgsDict(TypedDict):
        route_target: NotRequired[pulumi.Input[_builtins.str]]
        """
        Route target
        """
        route_target_variable: NotRequired[pulumi.Input[_builtins.str]]
        """
        Variable name
        """
elif False:
    ServiceLanVpnFeatureIpv6ImportRouteTargetArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ServiceLanVpnFeatureIpv6ImportRouteTargetArgs:
    def __init__(__self__, *,
                 route_target: Optional[pulumi.Input[_builtins.str]] = None,
                 route_target_variable: Optional[pulumi.Input[_builtins.str]] = None):
        """
        :param pulumi.Input[_builtins.str] route_target: Route target
        :param pulumi.Input[_builtins.str] route_target_variable: Variable name
        """
        if route_target is not None:
            pulumi.set(__self__, "route_target", route_target)
        if route_target_variable is not None:
            pulumi.set(__self__, "route_target_variable", route_target_variable)

    @_builtins.property
    @pulumi.getter(name="routeTarget")
    def route_target(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Route target
        """
        return pulumi.get(self, "route_target")

    @route_target.setter
    def route_target(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "route_target", value)

    @_builtins.property
    @pulumi.getter(name="routeTargetVariable")
    def route_target_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "route_target_variable")

    @route_target_variable.setter
    def route_target_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "route_target_variable", value)


if not MYPY:
    class ServiceLanVpnFeatureIpv6StaticRouteArgsDict(TypedDict):
        gateway: NotRequired[pulumi.Input[_builtins.str]]
        """
        Gateway type
          - Choices: `nextHop`, `null0`, `nat`
        """
        nat: NotRequired[pulumi.Input[_builtins.str]]
        """
        IPv6 Nat, Attribute conditional on `gateway` being equal to `nat`
          - Choices: `NAT64`, `NAT66`
        """
        nat_variable: NotRequired[pulumi.Input[_builtins.str]]
        """
        Variable name, Attribute conditional on `gateway` being equal to `nat`
        """
        next_hops: NotRequired[pulumi.Input[Sequence[pulumi.Input['ServiceLanVpnFeatureIpv6StaticRouteNextHopArgsDict']]]]
        """
        IPv6 Route Gateway Next Hop, Attribute conditional on `gateway` being equal to `nextHop`
        """
        null0: NotRequired[pulumi.Input[_builtins.bool]]
        """
        IPv6 Route Gateway Next Hop, Attribute conditional on `gateway` being equal to `null0`
        """
        prefix: NotRequired[pulumi.Input[_builtins.str]]
        """
        Prefix
        """
        prefix_variable: NotRequired[pulumi.Input[_builtins.str]]
        """
        Variable name
        """
elif False:
    ServiceLanVpnFeatureIpv6StaticRouteArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ServiceLanVpnFeatureIpv6StaticRouteArgs:
    def __init__(__self__, *,
                 gateway: Optional[pulumi.Input[_builtins.str]] = None,
                 nat: Optional[pulumi.Input[_builtins.str]] = None,
                 nat_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 next_hops: Optional[pulumi.Input[Sequence[pulumi.Input['ServiceLanVpnFeatureIpv6StaticRouteNextHopArgs']]]] = None,
                 null0: Optional[pulumi.Input[_builtins.bool]] = None,
                 prefix: Optional[pulumi.Input[_builtins.str]] = None,
                 prefix_variable: Optional[pulumi.Input[_builtins.str]] = None):
        """
        :param pulumi.Input[_builtins.str] gateway: Gateway type
                 - Choices: `nextHop`, `null0`, `nat`
        :param pulumi.Input[_builtins.str] nat: IPv6 Nat, Attribute conditional on `gateway` being equal to `nat`
                 - Choices: `NAT64`, `NAT66`
        :param pulumi.Input[_builtins.str] nat_variable: Variable name, Attribute conditional on `gateway` being equal to `nat`
        :param pulumi.Input[Sequence[pulumi.Input['ServiceLanVpnFeatureIpv6StaticRouteNextHopArgs']]] next_hops: IPv6 Route Gateway Next Hop, Attribute conditional on `gateway` being equal to `nextHop`
        :param pulumi.Input[_builtins.bool] null0: IPv6 Route Gateway Next Hop, Attribute conditional on `gateway` being equal to `null0`
        :param pulumi.Input[_builtins.str] prefix: Prefix
        :param pulumi.Input[_builtins.str] prefix_variable: Variable name
        """
        if gateway is not None:
            pulumi.set(__self__, "gateway", gateway)
        if nat is not None:
            pulumi.set(__self__, "nat", nat)
        if nat_variable is not None:
            pulumi.set(__self__, "nat_variable", nat_variable)
        if next_hops is not None:
            pulumi.set(__self__, "next_hops", next_hops)
        if null0 is not None:
            pulumi.set(__self__, "null0", null0)
        if prefix is not None:
            pulumi.set(__self__, "prefix", prefix)
        if prefix_variable is not None:
            pulumi.set(__self__, "prefix_variable", prefix_variable)

    @_builtins.property
    @pulumi.getter
    def gateway(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Gateway type
          - Choices: `nextHop`, `null0`, `nat`
        """
        return pulumi.get(self, "gateway")

    @gateway.setter
    def gateway(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "gateway", value)

    @_builtins.property
    @pulumi.getter
    def nat(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        IPv6 Nat, Attribute conditional on `gateway` being equal to `nat`
          - Choices: `NAT64`, `NAT66`
        """
        return pulumi.get(self, "nat")

    @nat.setter
    def nat(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "nat", value)

    @_builtins.property
    @pulumi.getter(name="natVariable")
    def nat_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name, Attribute conditional on `gateway` being equal to `nat`
        """
        return pulumi.get(self, "nat_variable")

    @nat_variable.setter
    def nat_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "nat_variable", value)

    @_builtins.property
    @pulumi.getter(name="nextHops")
    def next_hops(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ServiceLanVpnFeatureIpv6StaticRouteNextHopArgs']]]]:
        """
        IPv6 Route Gateway Next Hop, Attribute conditional on `gateway` being equal to `nextHop`
        """
        return pulumi.get(self, "next_hops")

    @next_hops.setter
    def next_hops(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ServiceLanVpnFeatureIpv6StaticRouteNextHopArgs']]]]):
        pulumi.set(self, "next_hops", value)

    @_builtins.property
    @pulumi.getter
    def null0(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        IPv6 Route Gateway Next Hop, Attribute conditional on `gateway` being equal to `null0`
        """
        return pulumi.get(self, "null0")

    @null0.setter
    def null0(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "null0", value)

    @_builtins.property
    @pulumi.getter
    def prefix(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Prefix
        """
        return pulumi.get(self, "prefix")

    @prefix.setter
    def prefix(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "prefix", value)

    @_builtins.property
    @pulumi.getter(name="prefixVariable")
    def prefix_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "prefix_variable")

    @prefix_variable.setter
    def prefix_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "prefix_variable", value)


if not MYPY:
    class ServiceLanVpnFeatureIpv6StaticRouteNextHopArgsDict(TypedDict):
        address: NotRequired[pulumi.Input[_builtins.str]]
        """
        Address
        """
        address_variable: NotRequired[pulumi.Input[_builtins.str]]
        """
        Variable name
        """
        administrative_distance: NotRequired[pulumi.Input[_builtins.int]]
        """
        Administrative distance
          - Range: `1`-`254`
          - Default value: `1`
        """
        administrative_distance_variable: NotRequired[pulumi.Input[_builtins.str]]
        """
        Variable name
        """
elif False:
    ServiceLanVpnFeatureIpv6StaticRouteNextHopArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ServiceLanVpnFeatureIpv6StaticRouteNextHopArgs:
    def __init__(__self__, *,
                 address: Optional[pulumi.Input[_builtins.str]] = None,
                 address_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 administrative_distance: Optional[pulumi.Input[_builtins.int]] = None,
                 administrative_distance_variable: Optional[pulumi.Input[_builtins.str]] = None):
        """
        :param pulumi.Input[_builtins.str] address: Address
        :param pulumi.Input[_builtins.str] address_variable: Variable name
        :param pulumi.Input[_builtins.int] administrative_distance: Administrative distance
                 - Range: `1`-`254`
                 - Default value: `1`
        :param pulumi.Input[_builtins.str] administrative_distance_variable: Variable name
        """
        if address is not None:
            pulumi.set(__self__, "address", address)
        if address_variable is not None:
            pulumi.set(__self__, "address_variable", address_variable)
        if administrative_distance is not None:
            pulumi.set(__self__, "administrative_distance", administrative_distance)
        if administrative_distance_variable is not None:
            pulumi.set(__self__, "administrative_distance_variable", administrative_distance_variable)

    @_builtins.property
    @pulumi.getter
    def address(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Address
        """
        return pulumi.get(self, "address")

    @address.setter
    def address(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "address", value)

    @_builtins.property
    @pulumi.getter(name="addressVariable")
    def address_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "address_variable")

    @address_variable.setter
    def address_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "address_variable", value)

    @_builtins.property
    @pulumi.getter(name="administrativeDistance")
    def administrative_distance(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        Administrative distance
          - Range: `1`-`254`
          - Default value: `1`
        """
        return pulumi.get(self, "administrative_distance")

    @administrative_distance.setter
    def administrative_distance(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "administrative_distance", value)

    @_builtins.property
    @pulumi.getter(name="administrativeDistanceVariable")
    def administrative_distance_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "administrative_distance_variable")

    @administrative_distance_variable.setter
    def administrative_distance_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "administrative_distance_variable", value)


if not MYPY:
    class ServiceLanVpnFeatureNat64V4PoolArgsDict(TypedDict):
        name: NotRequired[pulumi.Input[_builtins.str]]
        """
        NAT64 v4 Pool Name
        """
        name_variable: NotRequired[pulumi.Input[_builtins.str]]
        """
        Variable name
        """
        overload: NotRequired[pulumi.Input[_builtins.bool]]
        """
        NAT64 Overload
          - Default value: `false`
        """
        overload_variable: NotRequired[pulumi.Input[_builtins.str]]
        """
        Variable name
        """
        range_end: NotRequired[pulumi.Input[_builtins.str]]
        """
        NAT64 Pool Range End
        """
        range_end_variable: NotRequired[pulumi.Input[_builtins.str]]
        """
        Variable name
        """
        range_start: NotRequired[pulumi.Input[_builtins.str]]
        """
        NAT64 Pool Range Start
        """
        range_start_variable: NotRequired[pulumi.Input[_builtins.str]]
        """
        Variable name
        """
elif False:
    ServiceLanVpnFeatureNat64V4PoolArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ServiceLanVpnFeatureNat64V4PoolArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 name_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 overload: Optional[pulumi.Input[_builtins.bool]] = None,
                 overload_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 range_end: Optional[pulumi.Input[_builtins.str]] = None,
                 range_end_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 range_start: Optional[pulumi.Input[_builtins.str]] = None,
                 range_start_variable: Optional[pulumi.Input[_builtins.str]] = None):
        """
        :param pulumi.Input[_builtins.str] name: NAT64 v4 Pool Name
        :param pulumi.Input[_builtins.str] name_variable: Variable name
        :param pulumi.Input[_builtins.bool] overload: NAT64 Overload
                 - Default value: `false`
        :param pulumi.Input[_builtins.str] overload_variable: Variable name
        :param pulumi.Input[_builtins.str] range_end: NAT64 Pool Range End
        :param pulumi.Input[_builtins.str] range_end_variable: Variable name
        :param pulumi.Input[_builtins.str] range_start: NAT64 Pool Range Start
        :param pulumi.Input[_builtins.str] range_start_variable: Variable name
        """
        if name is not None:
            pulumi.set(__self__, "name", name)
        if name_variable is not None:
            pulumi.set(__self__, "name_variable", name_variable)
        if overload is not None:
            pulumi.set(__self__, "overload", overload)
        if overload_variable is not None:
            pulumi.set(__self__, "overload_variable", overload_variable)
        if range_end is not None:
            pulumi.set(__self__, "range_end", range_end)
        if range_end_variable is not None:
            pulumi.set(__self__, "range_end_variable", range_end_variable)
        if range_start is not None:
            pulumi.set(__self__, "range_start", range_start)
        if range_start_variable is not None:
            pulumi.set(__self__, "range_start_variable", range_start_variable)

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        NAT64 v4 Pool Name
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "name", value)

    @_builtins.property
    @pulumi.getter(name="nameVariable")
    def name_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "name_variable")

    @name_variable.setter
    def name_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "name_variable", value)

    @_builtins.property
    @pulumi.getter
    def overload(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        NAT64 Overload
          - Default value: `false`
        """
        return pulumi.get(self, "overload")

    @overload.setter
    def overload(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "overload", value)

    @_builtins.property
    @pulumi.getter(name="overloadVariable")
    def overload_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "overload_variable")

    @overload_variable.setter
    def overload_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "overload_variable", value)

    @_builtins.property
    @pulumi.getter(name="rangeEnd")
    def range_end(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        NAT64 Pool Range End
        """
        return pulumi.get(self, "range_end")

    @range_end.setter
    def range_end(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "range_end", value)

    @_builtins.property
    @pulumi.getter(name="rangeEndVariable")
    def range_end_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "range_end_variable")

    @range_end_variable.setter
    def range_end_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "range_end_variable", value)

    @_builtins.property
    @pulumi.getter(name="rangeStart")
    def range_start(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        NAT64 Pool Range Start
        """
        return pulumi.get(self, "range_start")

    @range_start.setter
    def range_start(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "range_start", value)

    @_builtins.property
    @pulumi.getter(name="rangeStartVariable")
    def range_start_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "range_start_variable")

    @range_start_variable.setter
    def range_start_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "range_start_variable", value)


if not MYPY:
    class ServiceLanVpnFeatureNatPoolArgsDict(TypedDict):
        direction: NotRequired[pulumi.Input[_builtins.str]]
        """
        NAT Direction
          - Choices: `inside`, `outside`
        """
        direction_variable: NotRequired[pulumi.Input[_builtins.str]]
        """
        Variable name
        """
        nat_pool_name: NotRequired[pulumi.Input[_builtins.int]]
        """
        NAT Pool Name
          - Range: `1`-`32`
        """
        nat_pool_name_variable: NotRequired[pulumi.Input[_builtins.str]]
        """
        Variable name
        """
        overload: NotRequired[pulumi.Input[_builtins.bool]]
        """
        NAT Overload
          - Default value: `true`
        """
        overload_variable: NotRequired[pulumi.Input[_builtins.str]]
        """
        Variable name
        """
        prefix_length: NotRequired[pulumi.Input[_builtins.int]]
        """
        NAT Pool Prefix Length
          - Range: `1`-`32`
        """
        prefix_length_variable: NotRequired[pulumi.Input[_builtins.str]]
        """
        Variable name
        """
        range_end: NotRequired[pulumi.Input[_builtins.str]]
        """
        NAT Pool Range End
        """
        range_end_variable: NotRequired[pulumi.Input[_builtins.str]]
        """
        Variable name
        """
        range_start: NotRequired[pulumi.Input[_builtins.str]]
        """
        NAT Pool Range Start
        """
        range_start_variable: NotRequired[pulumi.Input[_builtins.str]]
        """
        Variable name
        """
        tracker_object_id: NotRequired[pulumi.Input[_builtins.str]]
elif False:
    ServiceLanVpnFeatureNatPoolArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ServiceLanVpnFeatureNatPoolArgs:
    def __init__(__self__, *,
                 direction: Optional[pulumi.Input[_builtins.str]] = None,
                 direction_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 nat_pool_name: Optional[pulumi.Input[_builtins.int]] = None,
                 nat_pool_name_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 overload: Optional[pulumi.Input[_builtins.bool]] = None,
                 overload_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 prefix_length: Optional[pulumi.Input[_builtins.int]] = None,
                 prefix_length_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 range_end: Optional[pulumi.Input[_builtins.str]] = None,
                 range_end_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 range_start: Optional[pulumi.Input[_builtins.str]] = None,
                 range_start_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 tracker_object_id: Optional[pulumi.Input[_builtins.str]] = None):
        """
        :param pulumi.Input[_builtins.str] direction: NAT Direction
                 - Choices: `inside`, `outside`
        :param pulumi.Input[_builtins.str] direction_variable: Variable name
        :param pulumi.Input[_builtins.int] nat_pool_name: NAT Pool Name
                 - Range: `1`-`32`
        :param pulumi.Input[_builtins.str] nat_pool_name_variable: Variable name
        :param pulumi.Input[_builtins.bool] overload: NAT Overload
                 - Default value: `true`
        :param pulumi.Input[_builtins.str] overload_variable: Variable name
        :param pulumi.Input[_builtins.int] prefix_length: NAT Pool Prefix Length
                 - Range: `1`-`32`
        :param pulumi.Input[_builtins.str] prefix_length_variable: Variable name
        :param pulumi.Input[_builtins.str] range_end: NAT Pool Range End
        :param pulumi.Input[_builtins.str] range_end_variable: Variable name
        :param pulumi.Input[_builtins.str] range_start: NAT Pool Range Start
        :param pulumi.Input[_builtins.str] range_start_variable: Variable name
        """
        if direction is not None:
            pulumi.set(__self__, "direction", direction)
        if direction_variable is not None:
            pulumi.set(__self__, "direction_variable", direction_variable)
        if nat_pool_name is not None:
            pulumi.set(__self__, "nat_pool_name", nat_pool_name)
        if nat_pool_name_variable is not None:
            pulumi.set(__self__, "nat_pool_name_variable", nat_pool_name_variable)
        if overload is not None:
            pulumi.set(__self__, "overload", overload)
        if overload_variable is not None:
            pulumi.set(__self__, "overload_variable", overload_variable)
        if prefix_length is not None:
            pulumi.set(__self__, "prefix_length", prefix_length)
        if prefix_length_variable is not None:
            pulumi.set(__self__, "prefix_length_variable", prefix_length_variable)
        if range_end is not None:
            pulumi.set(__self__, "range_end", range_end)
        if range_end_variable is not None:
            pulumi.set(__self__, "range_end_variable", range_end_variable)
        if range_start is not None:
            pulumi.set(__self__, "range_start", range_start)
        if range_start_variable is not None:
            pulumi.set(__self__, "range_start_variable", range_start_variable)
        if tracker_object_id is not None:
            pulumi.set(__self__, "tracker_object_id", tracker_object_id)

    @_builtins.property
    @pulumi.getter
    def direction(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        NAT Direction
          - Choices: `inside`, `outside`
        """
        return pulumi.get(self, "direction")

    @direction.setter
    def direction(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "direction", value)

    @_builtins.property
    @pulumi.getter(name="directionVariable")
    def direction_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "direction_variable")

    @direction_variable.setter
    def direction_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "direction_variable", value)

    @_builtins.property
    @pulumi.getter(name="natPoolName")
    def nat_pool_name(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        NAT Pool Name
          - Range: `1`-`32`
        """
        return pulumi.get(self, "nat_pool_name")

    @nat_pool_name.setter
    def nat_pool_name(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "nat_pool_name", value)

    @_builtins.property
    @pulumi.getter(name="natPoolNameVariable")
    def nat_pool_name_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "nat_pool_name_variable")

    @nat_pool_name_variable.setter
    def nat_pool_name_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "nat_pool_name_variable", value)

    @_builtins.property
    @pulumi.getter
    def overload(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        NAT Overload
          - Default value: `true`
        """
        return pulumi.get(self, "overload")

    @overload.setter
    def overload(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "overload", value)

    @_builtins.property
    @pulumi.getter(name="overloadVariable")
    def overload_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "overload_variable")

    @overload_variable.setter
    def overload_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "overload_variable", value)

    @_builtins.property
    @pulumi.getter(name="prefixLength")
    def prefix_length(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        NAT Pool Prefix Length
          - Range: `1`-`32`
        """
        return pulumi.get(self, "prefix_length")

    @prefix_length.setter
    def prefix_length(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "prefix_length", value)

    @_builtins.property
    @pulumi.getter(name="prefixLengthVariable")
    def prefix_length_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "prefix_length_variable")

    @prefix_length_variable.setter
    def prefix_length_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "prefix_length_variable", value)

    @_builtins.property
    @pulumi.getter(name="rangeEnd")
    def range_end(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        NAT Pool Range End
        """
        return pulumi.get(self, "range_end")

    @range_end.setter
    def range_end(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "range_end", value)

    @_builtins.property
    @pulumi.getter(name="rangeEndVariable")
    def range_end_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "range_end_variable")

    @range_end_variable.setter
    def range_end_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "range_end_variable", value)

    @_builtins.property
    @pulumi.getter(name="rangeStart")
    def range_start(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        NAT Pool Range Start
        """
        return pulumi.get(self, "range_start")

    @range_start.setter
    def range_start(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "range_start", value)

    @_builtins.property
    @pulumi.getter(name="rangeStartVariable")
    def range_start_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "range_start_variable")

    @range_start_variable.setter
    def range_start_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "range_start_variable", value)

    @_builtins.property
    @pulumi.getter(name="trackerObjectId")
    def tracker_object_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "tracker_object_id")

    @tracker_object_id.setter
    def tracker_object_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "tracker_object_id", value)


if not MYPY:
    class ServiceLanVpnFeatureNatPortForwardArgsDict(TypedDict):
        nat_pool_name: NotRequired[pulumi.Input[_builtins.int]]
        """
        NAT Pool Name
          - Range: `1`-`32`
        """
        nat_pool_name_variable: NotRequired[pulumi.Input[_builtins.str]]
        """
        Variable name
        """
        protocol: NotRequired[pulumi.Input[_builtins.str]]
        """
        Protocol
          - Choices: `TCP`, `UDP`
        """
        protocol_variable: NotRequired[pulumi.Input[_builtins.str]]
        """
        Variable name
        """
        source_ip: NotRequired[pulumi.Input[_builtins.str]]
        """
        Source IP Address
        """
        source_ip_variable: NotRequired[pulumi.Input[_builtins.str]]
        """
        Variable name
        """
        source_port: NotRequired[pulumi.Input[_builtins.int]]
        """
        Source Port
        """
        source_port_variable: NotRequired[pulumi.Input[_builtins.str]]
        """
        Variable name
        """
        translate_port: NotRequired[pulumi.Input[_builtins.int]]
        """
        Translate Port
        """
        translate_port_variable: NotRequired[pulumi.Input[_builtins.str]]
        """
        Variable name
        """
        translated_source_ip: NotRequired[pulumi.Input[_builtins.str]]
        """
        Translated Source IP Address
        """
        translated_source_ip_variable: NotRequired[pulumi.Input[_builtins.str]]
        """
        Variable name
        """
elif False:
    ServiceLanVpnFeatureNatPortForwardArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ServiceLanVpnFeatureNatPortForwardArgs:
    def __init__(__self__, *,
                 nat_pool_name: Optional[pulumi.Input[_builtins.int]] = None,
                 nat_pool_name_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 protocol: Optional[pulumi.Input[_builtins.str]] = None,
                 protocol_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 source_ip: Optional[pulumi.Input[_builtins.str]] = None,
                 source_ip_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 source_port: Optional[pulumi.Input[_builtins.int]] = None,
                 source_port_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 translate_port: Optional[pulumi.Input[_builtins.int]] = None,
                 translate_port_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 translated_source_ip: Optional[pulumi.Input[_builtins.str]] = None,
                 translated_source_ip_variable: Optional[pulumi.Input[_builtins.str]] = None):
        """
        :param pulumi.Input[_builtins.int] nat_pool_name: NAT Pool Name
                 - Range: `1`-`32`
        :param pulumi.Input[_builtins.str] nat_pool_name_variable: Variable name
        :param pulumi.Input[_builtins.str] protocol: Protocol
                 - Choices: `TCP`, `UDP`
        :param pulumi.Input[_builtins.str] protocol_variable: Variable name
        :param pulumi.Input[_builtins.str] source_ip: Source IP Address
        :param pulumi.Input[_builtins.str] source_ip_variable: Variable name
        :param pulumi.Input[_builtins.int] source_port: Source Port
        :param pulumi.Input[_builtins.str] source_port_variable: Variable name
        :param pulumi.Input[_builtins.int] translate_port: Translate Port
        :param pulumi.Input[_builtins.str] translate_port_variable: Variable name
        :param pulumi.Input[_builtins.str] translated_source_ip: Translated Source IP Address
        :param pulumi.Input[_builtins.str] translated_source_ip_variable: Variable name
        """
        if nat_pool_name is not None:
            pulumi.set(__self__, "nat_pool_name", nat_pool_name)
        if nat_pool_name_variable is not None:
            pulumi.set(__self__, "nat_pool_name_variable", nat_pool_name_variable)
        if protocol is not None:
            pulumi.set(__self__, "protocol", protocol)
        if protocol_variable is not None:
            pulumi.set(__self__, "protocol_variable", protocol_variable)
        if source_ip is not None:
            pulumi.set(__self__, "source_ip", source_ip)
        if source_ip_variable is not None:
            pulumi.set(__self__, "source_ip_variable", source_ip_variable)
        if source_port is not None:
            pulumi.set(__self__, "source_port", source_port)
        if source_port_variable is not None:
            pulumi.set(__self__, "source_port_variable", source_port_variable)
        if translate_port is not None:
            pulumi.set(__self__, "translate_port", translate_port)
        if translate_port_variable is not None:
            pulumi.set(__self__, "translate_port_variable", translate_port_variable)
        if translated_source_ip is not None:
            pulumi.set(__self__, "translated_source_ip", translated_source_ip)
        if translated_source_ip_variable is not None:
            pulumi.set(__self__, "translated_source_ip_variable", translated_source_ip_variable)

    @_builtins.property
    @pulumi.getter(name="natPoolName")
    def nat_pool_name(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        NAT Pool Name
          - Range: `1`-`32`
        """
        return pulumi.get(self, "nat_pool_name")

    @nat_pool_name.setter
    def nat_pool_name(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "nat_pool_name", value)

    @_builtins.property
    @pulumi.getter(name="natPoolNameVariable")
    def nat_pool_name_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "nat_pool_name_variable")

    @nat_pool_name_variable.setter
    def nat_pool_name_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "nat_pool_name_variable", value)

    @_builtins.property
    @pulumi.getter
    def protocol(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Protocol
          - Choices: `TCP`, `UDP`
        """
        return pulumi.get(self, "protocol")

    @protocol.setter
    def protocol(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "protocol", value)

    @_builtins.property
    @pulumi.getter(name="protocolVariable")
    def protocol_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "protocol_variable")

    @protocol_variable.setter
    def protocol_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "protocol_variable", value)

    @_builtins.property
    @pulumi.getter(name="sourceIp")
    def source_ip(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Source IP Address
        """
        return pulumi.get(self, "source_ip")

    @source_ip.setter
    def source_ip(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "source_ip", value)

    @_builtins.property
    @pulumi.getter(name="sourceIpVariable")
    def source_ip_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "source_ip_variable")

    @source_ip_variable.setter
    def source_ip_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "source_ip_variable", value)

    @_builtins.property
    @pulumi.getter(name="sourcePort")
    def source_port(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        Source Port
        """
        return pulumi.get(self, "source_port")

    @source_port.setter
    def source_port(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "source_port", value)

    @_builtins.property
    @pulumi.getter(name="sourcePortVariable")
    def source_port_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "source_port_variable")

    @source_port_variable.setter
    def source_port_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "source_port_variable", value)

    @_builtins.property
    @pulumi.getter(name="translatePort")
    def translate_port(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        Translate Port
        """
        return pulumi.get(self, "translate_port")

    @translate_port.setter
    def translate_port(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "translate_port", value)

    @_builtins.property
    @pulumi.getter(name="translatePortVariable")
    def translate_port_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "translate_port_variable")

    @translate_port_variable.setter
    def translate_port_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "translate_port_variable", value)

    @_builtins.property
    @pulumi.getter(name="translatedSourceIp")
    def translated_source_ip(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Translated Source IP Address
        """
        return pulumi.get(self, "translated_source_ip")

    @translated_source_ip.setter
    def translated_source_ip(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "translated_source_ip", value)

    @_builtins.property
    @pulumi.getter(name="translatedSourceIpVariable")
    def translated_source_ip_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "translated_source_ip_variable")

    @translated_source_ip_variable.setter
    def translated_source_ip_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "translated_source_ip_variable", value)


if not MYPY:
    class ServiceLanVpnFeatureRouteLeakFromGlobalVpnArgsDict(TypedDict):
        redistributions: NotRequired[pulumi.Input[Sequence[pulumi.Input['ServiceLanVpnFeatureRouteLeakFromGlobalVpnRedistributionArgsDict']]]]
        """
        Redistribute Routes to specific Protocol on Service VPN
        """
        route_policy_id: NotRequired[pulumi.Input[_builtins.str]]
        route_protocol: NotRequired[pulumi.Input[_builtins.str]]
        """
        Leak Routes of particular protocol from Global to Service VPN
          - Choices: `static`, `connected`, `bgp`, `ospf`
        """
        route_protocol_variable: NotRequired[pulumi.Input[_builtins.str]]
        """
        Variable name
        """
elif False:
    ServiceLanVpnFeatureRouteLeakFromGlobalVpnArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ServiceLanVpnFeatureRouteLeakFromGlobalVpnArgs:
    def __init__(__self__, *,
                 redistributions: Optional[pulumi.Input[Sequence[pulumi.Input['ServiceLanVpnFeatureRouteLeakFromGlobalVpnRedistributionArgs']]]] = None,
                 route_policy_id: Optional[pulumi.Input[_builtins.str]] = None,
                 route_protocol: Optional[pulumi.Input[_builtins.str]] = None,
                 route_protocol_variable: Optional[pulumi.Input[_builtins.str]] = None):
        """
        :param pulumi.Input[Sequence[pulumi.Input['ServiceLanVpnFeatureRouteLeakFromGlobalVpnRedistributionArgs']]] redistributions: Redistribute Routes to specific Protocol on Service VPN
        :param pulumi.Input[_builtins.str] route_protocol: Leak Routes of particular protocol from Global to Service VPN
                 - Choices: `static`, `connected`, `bgp`, `ospf`
        :param pulumi.Input[_builtins.str] route_protocol_variable: Variable name
        """
        if redistributions is not None:
            pulumi.set(__self__, "redistributions", redistributions)
        if route_policy_id is not None:
            pulumi.set(__self__, "route_policy_id", route_policy_id)
        if route_protocol is not None:
            pulumi.set(__self__, "route_protocol", route_protocol)
        if route_protocol_variable is not None:
            pulumi.set(__self__, "route_protocol_variable", route_protocol_variable)

    @_builtins.property
    @pulumi.getter
    def redistributions(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ServiceLanVpnFeatureRouteLeakFromGlobalVpnRedistributionArgs']]]]:
        """
        Redistribute Routes to specific Protocol on Service VPN
        """
        return pulumi.get(self, "redistributions")

    @redistributions.setter
    def redistributions(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ServiceLanVpnFeatureRouteLeakFromGlobalVpnRedistributionArgs']]]]):
        pulumi.set(self, "redistributions", value)

    @_builtins.property
    @pulumi.getter(name="routePolicyId")
    def route_policy_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "route_policy_id")

    @route_policy_id.setter
    def route_policy_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "route_policy_id", value)

    @_builtins.property
    @pulumi.getter(name="routeProtocol")
    def route_protocol(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Leak Routes of particular protocol from Global to Service VPN
          - Choices: `static`, `connected`, `bgp`, `ospf`
        """
        return pulumi.get(self, "route_protocol")

    @route_protocol.setter
    def route_protocol(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "route_protocol", value)

    @_builtins.property
    @pulumi.getter(name="routeProtocolVariable")
    def route_protocol_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "route_protocol_variable")

    @route_protocol_variable.setter
    def route_protocol_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "route_protocol_variable", value)


if not MYPY:
    class ServiceLanVpnFeatureRouteLeakFromGlobalVpnRedistributionArgsDict(TypedDict):
        protocol: NotRequired[pulumi.Input[_builtins.str]]
        """
        Protocol to restributed leaked routes
          - Choices: `bgp`, `ospf`
        """
        protocol_variable: NotRequired[pulumi.Input[_builtins.str]]
        """
        Variable name
        """
        redistribution_policy_id: NotRequired[pulumi.Input[_builtins.str]]
elif False:
    ServiceLanVpnFeatureRouteLeakFromGlobalVpnRedistributionArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ServiceLanVpnFeatureRouteLeakFromGlobalVpnRedistributionArgs:
    def __init__(__self__, *,
                 protocol: Optional[pulumi.Input[_builtins.str]] = None,
                 protocol_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 redistribution_policy_id: Optional[pulumi.Input[_builtins.str]] = None):
        """
        :param pulumi.Input[_builtins.str] protocol: Protocol to restributed leaked routes
                 - Choices: `bgp`, `ospf`
        :param pulumi.Input[_builtins.str] protocol_variable: Variable name
        """
        if protocol is not None:
            pulumi.set(__self__, "protocol", protocol)
        if protocol_variable is not None:
            pulumi.set(__self__, "protocol_variable", protocol_variable)
        if redistribution_policy_id is not None:
            pulumi.set(__self__, "redistribution_policy_id", redistribution_policy_id)

    @_builtins.property
    @pulumi.getter
    def protocol(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Protocol to restributed leaked routes
          - Choices: `bgp`, `ospf`
        """
        return pulumi.get(self, "protocol")

    @protocol.setter
    def protocol(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "protocol", value)

    @_builtins.property
    @pulumi.getter(name="protocolVariable")
    def protocol_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "protocol_variable")

    @protocol_variable.setter
    def protocol_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "protocol_variable", value)

    @_builtins.property
    @pulumi.getter(name="redistributionPolicyId")
    def redistribution_policy_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "redistribution_policy_id")

    @redistribution_policy_id.setter
    def redistribution_policy_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "redistribution_policy_id", value)


if not MYPY:
    class ServiceLanVpnFeatureRouteLeakFromOtherServiceArgsDict(TypedDict):
        redistributions: NotRequired[pulumi.Input[Sequence[pulumi.Input['ServiceLanVpnFeatureRouteLeakFromOtherServiceRedistributionArgsDict']]]]
        """
        Redistribute Route to specific Protocol on Current Service VPN
        """
        route_policy_id: NotRequired[pulumi.Input[_builtins.str]]
        route_protocol: NotRequired[pulumi.Input[_builtins.str]]
        """
        Leak Route of particular protocol from Source Service VPN
          - Choices: `static`, `connected`, `bgp`, `ospf`
        """
        route_protocol_variable: NotRequired[pulumi.Input[_builtins.str]]
        """
        Variable name
        """
        source_vpn: NotRequired[pulumi.Input[_builtins.int]]
        """
        Source Service VPN from where route are to be leaked
          - Range: `1`-`65530`
        """
        source_vpn_variable: NotRequired[pulumi.Input[_builtins.str]]
        """
        Variable name
        """
elif False:
    ServiceLanVpnFeatureRouteLeakFromOtherServiceArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ServiceLanVpnFeatureRouteLeakFromOtherServiceArgs:
    def __init__(__self__, *,
                 redistributions: Optional[pulumi.Input[Sequence[pulumi.Input['ServiceLanVpnFeatureRouteLeakFromOtherServiceRedistributionArgs']]]] = None,
                 route_policy_id: Optional[pulumi.Input[_builtins.str]] = None,
                 route_protocol: Optional[pulumi.Input[_builtins.str]] = None,
                 route_protocol_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 source_vpn: Optional[pulumi.Input[_builtins.int]] = None,
                 source_vpn_variable: Optional[pulumi.Input[_builtins.str]] = None):
        """
        :param pulumi.Input[Sequence[pulumi.Input['ServiceLanVpnFeatureRouteLeakFromOtherServiceRedistributionArgs']]] redistributions: Redistribute Route to specific Protocol on Current Service VPN
        :param pulumi.Input[_builtins.str] route_protocol: Leak Route of particular protocol from Source Service VPN
                 - Choices: `static`, `connected`, `bgp`, `ospf`
        :param pulumi.Input[_builtins.str] route_protocol_variable: Variable name
        :param pulumi.Input[_builtins.int] source_vpn: Source Service VPN from where route are to be leaked
                 - Range: `1`-`65530`
        :param pulumi.Input[_builtins.str] source_vpn_variable: Variable name
        """
        if redistributions is not None:
            pulumi.set(__self__, "redistributions", redistributions)
        if route_policy_id is not None:
            pulumi.set(__self__, "route_policy_id", route_policy_id)
        if route_protocol is not None:
            pulumi.set(__self__, "route_protocol", route_protocol)
        if route_protocol_variable is not None:
            pulumi.set(__self__, "route_protocol_variable", route_protocol_variable)
        if source_vpn is not None:
            pulumi.set(__self__, "source_vpn", source_vpn)
        if source_vpn_variable is not None:
            pulumi.set(__self__, "source_vpn_variable", source_vpn_variable)

    @_builtins.property
    @pulumi.getter
    def redistributions(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ServiceLanVpnFeatureRouteLeakFromOtherServiceRedistributionArgs']]]]:
        """
        Redistribute Route to specific Protocol on Current Service VPN
        """
        return pulumi.get(self, "redistributions")

    @redistributions.setter
    def redistributions(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ServiceLanVpnFeatureRouteLeakFromOtherServiceRedistributionArgs']]]]):
        pulumi.set(self, "redistributions", value)

    @_builtins.property
    @pulumi.getter(name="routePolicyId")
    def route_policy_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "route_policy_id")

    @route_policy_id.setter
    def route_policy_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "route_policy_id", value)

    @_builtins.property
    @pulumi.getter(name="routeProtocol")
    def route_protocol(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Leak Route of particular protocol from Source Service VPN
          - Choices: `static`, `connected`, `bgp`, `ospf`
        """
        return pulumi.get(self, "route_protocol")

    @route_protocol.setter
    def route_protocol(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "route_protocol", value)

    @_builtins.property
    @pulumi.getter(name="routeProtocolVariable")
    def route_protocol_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "route_protocol_variable")

    @route_protocol_variable.setter
    def route_protocol_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "route_protocol_variable", value)

    @_builtins.property
    @pulumi.getter(name="sourceVpn")
    def source_vpn(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        Source Service VPN from where route are to be leaked
          - Range: `1`-`65530`
        """
        return pulumi.get(self, "source_vpn")

    @source_vpn.setter
    def source_vpn(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "source_vpn", value)

    @_builtins.property
    @pulumi.getter(name="sourceVpnVariable")
    def source_vpn_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "source_vpn_variable")

    @source_vpn_variable.setter
    def source_vpn_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "source_vpn_variable", value)


if not MYPY:
    class ServiceLanVpnFeatureRouteLeakFromOtherServiceRedistributionArgsDict(TypedDict):
        protocol: NotRequired[pulumi.Input[_builtins.str]]
        """
        Protocol to restributed leaked routes
          - Choices: `bgp`, `ospf`
        """
        protocol_variable: NotRequired[pulumi.Input[_builtins.str]]
        """
        Variable name
        """
        redistribution_policy_id: NotRequired[pulumi.Input[_builtins.str]]
elif False:
    ServiceLanVpnFeatureRouteLeakFromOtherServiceRedistributionArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ServiceLanVpnFeatureRouteLeakFromOtherServiceRedistributionArgs:
    def __init__(__self__, *,
                 protocol: Optional[pulumi.Input[_builtins.str]] = None,
                 protocol_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 redistribution_policy_id: Optional[pulumi.Input[_builtins.str]] = None):
        """
        :param pulumi.Input[_builtins.str] protocol: Protocol to restributed leaked routes
                 - Choices: `bgp`, `ospf`
        :param pulumi.Input[_builtins.str] protocol_variable: Variable name
        """
        if protocol is not None:
            pulumi.set(__self__, "protocol", protocol)
        if protocol_variable is not None:
            pulumi.set(__self__, "protocol_variable", protocol_variable)
        if redistribution_policy_id is not None:
            pulumi.set(__self__, "redistribution_policy_id", redistribution_policy_id)

    @_builtins.property
    @pulumi.getter
    def protocol(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Protocol to restributed leaked routes
          - Choices: `bgp`, `ospf`
        """
        return pulumi.get(self, "protocol")

    @protocol.setter
    def protocol(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "protocol", value)

    @_builtins.property
    @pulumi.getter(name="protocolVariable")
    def protocol_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "protocol_variable")

    @protocol_variable.setter
    def protocol_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "protocol_variable", value)

    @_builtins.property
    @pulumi.getter(name="redistributionPolicyId")
    def redistribution_policy_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "redistribution_policy_id")

    @redistribution_policy_id.setter
    def redistribution_policy_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "redistribution_policy_id", value)


if not MYPY:
    class ServiceLanVpnFeatureRouteLeakToGlobalVpnArgsDict(TypedDict):
        redistributions: NotRequired[pulumi.Input[Sequence[pulumi.Input['ServiceLanVpnFeatureRouteLeakToGlobalVpnRedistributionArgsDict']]]]
        """
        Redistribute Routes to specific Protocol on Global VPN
        """
        route_policy_id: NotRequired[pulumi.Input[_builtins.str]]
        route_protocol: NotRequired[pulumi.Input[_builtins.str]]
        """
        Leak Routes of particular protocol from Service to Global VPN
          - Choices: `static`, `connected`, `bgp`, `ospf`
        """
        route_protocol_variable: NotRequired[pulumi.Input[_builtins.str]]
        """
        Variable name
        """
elif False:
    ServiceLanVpnFeatureRouteLeakToGlobalVpnArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ServiceLanVpnFeatureRouteLeakToGlobalVpnArgs:
    def __init__(__self__, *,
                 redistributions: Optional[pulumi.Input[Sequence[pulumi.Input['ServiceLanVpnFeatureRouteLeakToGlobalVpnRedistributionArgs']]]] = None,
                 route_policy_id: Optional[pulumi.Input[_builtins.str]] = None,
                 route_protocol: Optional[pulumi.Input[_builtins.str]] = None,
                 route_protocol_variable: Optional[pulumi.Input[_builtins.str]] = None):
        """
        :param pulumi.Input[Sequence[pulumi.Input['ServiceLanVpnFeatureRouteLeakToGlobalVpnRedistributionArgs']]] redistributions: Redistribute Routes to specific Protocol on Global VPN
        :param pulumi.Input[_builtins.str] route_protocol: Leak Routes of particular protocol from Service to Global VPN
                 - Choices: `static`, `connected`, `bgp`, `ospf`
        :param pulumi.Input[_builtins.str] route_protocol_variable: Variable name
        """
        if redistributions is not None:
            pulumi.set(__self__, "redistributions", redistributions)
        if route_policy_id is not None:
            pulumi.set(__self__, "route_policy_id", route_policy_id)
        if route_protocol is not None:
            pulumi.set(__self__, "route_protocol", route_protocol)
        if route_protocol_variable is not None:
            pulumi.set(__self__, "route_protocol_variable", route_protocol_variable)

    @_builtins.property
    @pulumi.getter
    def redistributions(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ServiceLanVpnFeatureRouteLeakToGlobalVpnRedistributionArgs']]]]:
        """
        Redistribute Routes to specific Protocol on Global VPN
        """
        return pulumi.get(self, "redistributions")

    @redistributions.setter
    def redistributions(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ServiceLanVpnFeatureRouteLeakToGlobalVpnRedistributionArgs']]]]):
        pulumi.set(self, "redistributions", value)

    @_builtins.property
    @pulumi.getter(name="routePolicyId")
    def route_policy_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "route_policy_id")

    @route_policy_id.setter
    def route_policy_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "route_policy_id", value)

    @_builtins.property
    @pulumi.getter(name="routeProtocol")
    def route_protocol(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Leak Routes of particular protocol from Service to Global VPN
          - Choices: `static`, `connected`, `bgp`, `ospf`
        """
        return pulumi.get(self, "route_protocol")

    @route_protocol.setter
    def route_protocol(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "route_protocol", value)

    @_builtins.property
    @pulumi.getter(name="routeProtocolVariable")
    def route_protocol_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "route_protocol_variable")

    @route_protocol_variable.setter
    def route_protocol_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "route_protocol_variable", value)


if not MYPY:
    class ServiceLanVpnFeatureRouteLeakToGlobalVpnRedistributionArgsDict(TypedDict):
        protocol: NotRequired[pulumi.Input[_builtins.str]]
        """
        Protocol to restributed leaked routes
          - Choices: `bgp`, `ospf`
        """
        protocol_variable: NotRequired[pulumi.Input[_builtins.str]]
        """
        Variable name
        """
        redistribution_policy_id: NotRequired[pulumi.Input[_builtins.str]]
elif False:
    ServiceLanVpnFeatureRouteLeakToGlobalVpnRedistributionArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ServiceLanVpnFeatureRouteLeakToGlobalVpnRedistributionArgs:
    def __init__(__self__, *,
                 protocol: Optional[pulumi.Input[_builtins.str]] = None,
                 protocol_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 redistribution_policy_id: Optional[pulumi.Input[_builtins.str]] = None):
        """
        :param pulumi.Input[_builtins.str] protocol: Protocol to restributed leaked routes
                 - Choices: `bgp`, `ospf`
        :param pulumi.Input[_builtins.str] protocol_variable: Variable name
        """
        if protocol is not None:
            pulumi.set(__self__, "protocol", protocol)
        if protocol_variable is not None:
            pulumi.set(__self__, "protocol_variable", protocol_variable)
        if redistribution_policy_id is not None:
            pulumi.set(__self__, "redistribution_policy_id", redistribution_policy_id)

    @_builtins.property
    @pulumi.getter
    def protocol(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Protocol to restributed leaked routes
          - Choices: `bgp`, `ospf`
        """
        return pulumi.get(self, "protocol")

    @protocol.setter
    def protocol(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "protocol", value)

    @_builtins.property
    @pulumi.getter(name="protocolVariable")
    def protocol_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "protocol_variable")

    @protocol_variable.setter
    def protocol_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "protocol_variable", value)

    @_builtins.property
    @pulumi.getter(name="redistributionPolicyId")
    def redistribution_policy_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "redistribution_policy_id")

    @redistribution_policy_id.setter
    def redistribution_policy_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "redistribution_policy_id", value)


if not MYPY:
    class ServiceLanVpnFeatureServiceArgsDict(TypedDict):
        ipv4_addresses: NotRequired[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]
        """
        IPv4 Addresses (Maximum: 4)
        """
        ipv4_addresses_variable: NotRequired[pulumi.Input[_builtins.str]]
        """
        Variable name
        """
        service_type: NotRequired[pulumi.Input[_builtins.str]]
        """
        Service Type
          - Choices: `FW`, `IDS`, `IDP`, `netsvc1`, `netsvc2`, `netsvc3`, `netsvc4`, `TE`, `appqoe`
        """
        service_type_variable: NotRequired[pulumi.Input[_builtins.str]]
        """
        Variable name
        """
        tracking: NotRequired[pulumi.Input[_builtins.bool]]
        """
        Tracking
          - Default value: `true`
        """
        tracking_variable: NotRequired[pulumi.Input[_builtins.str]]
        """
        Variable name
        """
elif False:
    ServiceLanVpnFeatureServiceArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ServiceLanVpnFeatureServiceArgs:
    def __init__(__self__, *,
                 ipv4_addresses: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 ipv4_addresses_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 service_type: Optional[pulumi.Input[_builtins.str]] = None,
                 service_type_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 tracking: Optional[pulumi.Input[_builtins.bool]] = None,
                 tracking_variable: Optional[pulumi.Input[_builtins.str]] = None):
        """
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] ipv4_addresses: IPv4 Addresses (Maximum: 4)
        :param pulumi.Input[_builtins.str] ipv4_addresses_variable: Variable name
        :param pulumi.Input[_builtins.str] service_type: Service Type
                 - Choices: `FW`, `IDS`, `IDP`, `netsvc1`, `netsvc2`, `netsvc3`, `netsvc4`, `TE`, `appqoe`
        :param pulumi.Input[_builtins.str] service_type_variable: Variable name
        :param pulumi.Input[_builtins.bool] tracking: Tracking
                 - Default value: `true`
        :param pulumi.Input[_builtins.str] tracking_variable: Variable name
        """
        if ipv4_addresses is not None:
            pulumi.set(__self__, "ipv4_addresses", ipv4_addresses)
        if ipv4_addresses_variable is not None:
            pulumi.set(__self__, "ipv4_addresses_variable", ipv4_addresses_variable)
        if service_type is not None:
            pulumi.set(__self__, "service_type", service_type)
        if service_type_variable is not None:
            pulumi.set(__self__, "service_type_variable", service_type_variable)
        if tracking is not None:
            pulumi.set(__self__, "tracking", tracking)
        if tracking_variable is not None:
            pulumi.set(__self__, "tracking_variable", tracking_variable)

    @_builtins.property
    @pulumi.getter(name="ipv4Addresses")
    def ipv4_addresses(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]:
        """
        IPv4 Addresses (Maximum: 4)
        """
        return pulumi.get(self, "ipv4_addresses")

    @ipv4_addresses.setter
    def ipv4_addresses(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "ipv4_addresses", value)

    @_builtins.property
    @pulumi.getter(name="ipv4AddressesVariable")
    def ipv4_addresses_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "ipv4_addresses_variable")

    @ipv4_addresses_variable.setter
    def ipv4_addresses_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "ipv4_addresses_variable", value)

    @_builtins.property
    @pulumi.getter(name="serviceType")
    def service_type(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Service Type
          - Choices: `FW`, `IDS`, `IDP`, `netsvc1`, `netsvc2`, `netsvc3`, `netsvc4`, `TE`, `appqoe`
        """
        return pulumi.get(self, "service_type")

    @service_type.setter
    def service_type(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "service_type", value)

    @_builtins.property
    @pulumi.getter(name="serviceTypeVariable")
    def service_type_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "service_type_variable")

    @service_type_variable.setter
    def service_type_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "service_type_variable", value)

    @_builtins.property
    @pulumi.getter
    def tracking(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Tracking
          - Default value: `true`
        """
        return pulumi.get(self, "tracking")

    @tracking.setter
    def tracking(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "tracking", value)

    @_builtins.property
    @pulumi.getter(name="trackingVariable")
    def tracking_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "tracking_variable")

    @tracking_variable.setter
    def tracking_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "tracking_variable", value)


if not MYPY:
    class ServiceLanVpnFeatureServiceRouteArgsDict(TypedDict):
        network_address: NotRequired[pulumi.Input[_builtins.str]]
        """
        IP Address
        """
        network_address_variable: NotRequired[pulumi.Input[_builtins.str]]
        """
        Variable name
        """
        service: NotRequired[pulumi.Input[_builtins.str]]
        """
        Service
          - Choices: `SIG`
          - Default value: `SIG`
        """
        service_variable: NotRequired[pulumi.Input[_builtins.str]]
        """
        Variable name
        """
        subnet_mask: NotRequired[pulumi.Input[_builtins.str]]
        """
        Subnet Mask
          - Choices: `255.255.255.255`, `255.255.255.254`, `255.255.255.252`, `255.255.255.248`, `255.255.255.240`, `255.255.255.224`, `255.255.255.192`, `255.255.255.128`, `255.255.255.0`, `255.255.254.0`, `255.255.252.0`, `255.255.248.0`, `255.255.240.0`, `255.255.224.0`, `255.255.192.0`, `255.255.128.0`, `255.255.0.0`, `255.254.0.0`, `255.252.0.0`, `255.240.0.0`, `255.224.0.0`, `255.192.0.0`, `255.128.0.0`, `255.0.0.0`, `254.0.0.0`, `252.0.0.0`, `248.0.0.0`, `240.0.0.0`, `224.0.0.0`, `192.0.0.0`, `128.0.0.0`, `0.0.0.0`
        """
        subnet_mask_variable: NotRequired[pulumi.Input[_builtins.str]]
        """
        Variable name
        """
        vpn: NotRequired[pulumi.Input[_builtins.int]]
        """
        Service
        """
elif False:
    ServiceLanVpnFeatureServiceRouteArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ServiceLanVpnFeatureServiceRouteArgs:
    def __init__(__self__, *,
                 network_address: Optional[pulumi.Input[_builtins.str]] = None,
                 network_address_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 service: Optional[pulumi.Input[_builtins.str]] = None,
                 service_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 subnet_mask: Optional[pulumi.Input[_builtins.str]] = None,
                 subnet_mask_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 vpn: Optional[pulumi.Input[_builtins.int]] = None):
        """
        :param pulumi.Input[_builtins.str] network_address: IP Address
        :param pulumi.Input[_builtins.str] network_address_variable: Variable name
        :param pulumi.Input[_builtins.str] service: Service
                 - Choices: `SIG`
                 - Default value: `SIG`
        :param pulumi.Input[_builtins.str] service_variable: Variable name
        :param pulumi.Input[_builtins.str] subnet_mask: Subnet Mask
                 - Choices: `255.255.255.255`, `255.255.255.254`, `255.255.255.252`, `255.255.255.248`, `255.255.255.240`, `255.255.255.224`, `255.255.255.192`, `255.255.255.128`, `255.255.255.0`, `255.255.254.0`, `255.255.252.0`, `255.255.248.0`, `255.255.240.0`, `255.255.224.0`, `255.255.192.0`, `255.255.128.0`, `255.255.0.0`, `255.254.0.0`, `255.252.0.0`, `255.240.0.0`, `255.224.0.0`, `255.192.0.0`, `255.128.0.0`, `255.0.0.0`, `254.0.0.0`, `252.0.0.0`, `248.0.0.0`, `240.0.0.0`, `224.0.0.0`, `192.0.0.0`, `128.0.0.0`, `0.0.0.0`
        :param pulumi.Input[_builtins.str] subnet_mask_variable: Variable name
        :param pulumi.Input[_builtins.int] vpn: Service
        """
        if network_address is not None:
            pulumi.set(__self__, "network_address", network_address)
        if network_address_variable is not None:
            pulumi.set(__self__, "network_address_variable", network_address_variable)
        if service is not None:
            pulumi.set(__self__, "service", service)
        if service_variable is not None:
            pulumi.set(__self__, "service_variable", service_variable)
        if subnet_mask is not None:
            pulumi.set(__self__, "subnet_mask", subnet_mask)
        if subnet_mask_variable is not None:
            pulumi.set(__self__, "subnet_mask_variable", subnet_mask_variable)
        if vpn is not None:
            pulumi.set(__self__, "vpn", vpn)

    @_builtins.property
    @pulumi.getter(name="networkAddress")
    def network_address(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        IP Address
        """
        return pulumi.get(self, "network_address")

    @network_address.setter
    def network_address(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "network_address", value)

    @_builtins.property
    @pulumi.getter(name="networkAddressVariable")
    def network_address_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "network_address_variable")

    @network_address_variable.setter
    def network_address_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "network_address_variable", value)

    @_builtins.property
    @pulumi.getter
    def service(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Service
          - Choices: `SIG`
          - Default value: `SIG`
        """
        return pulumi.get(self, "service")

    @service.setter
    def service(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "service", value)

    @_builtins.property
    @pulumi.getter(name="serviceVariable")
    def service_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "service_variable")

    @service_variable.setter
    def service_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "service_variable", value)

    @_builtins.property
    @pulumi.getter(name="subnetMask")
    def subnet_mask(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Subnet Mask
          - Choices: `255.255.255.255`, `255.255.255.254`, `255.255.255.252`, `255.255.255.248`, `255.255.255.240`, `255.255.255.224`, `255.255.255.192`, `255.255.255.128`, `255.255.255.0`, `255.255.254.0`, `255.255.252.0`, `255.255.248.0`, `255.255.240.0`, `255.255.224.0`, `255.255.192.0`, `255.255.128.0`, `255.255.0.0`, `255.254.0.0`, `255.252.0.0`, `255.240.0.0`, `255.224.0.0`, `255.192.0.0`, `255.128.0.0`, `255.0.0.0`, `254.0.0.0`, `252.0.0.0`, `248.0.0.0`, `240.0.0.0`, `224.0.0.0`, `192.0.0.0`, `128.0.0.0`, `0.0.0.0`
        """
        return pulumi.get(self, "subnet_mask")

    @subnet_mask.setter
    def subnet_mask(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "subnet_mask", value)

    @_builtins.property
    @pulumi.getter(name="subnetMaskVariable")
    def subnet_mask_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "subnet_mask_variable")

    @subnet_mask_variable.setter
    def subnet_mask_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "subnet_mask_variable", value)

    @_builtins.property
    @pulumi.getter
    def vpn(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        Service
        """
        return pulumi.get(self, "vpn")

    @vpn.setter
    def vpn(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "vpn", value)


if not MYPY:
    class ServiceLanVpnFeatureStaticNatArgsDict(TypedDict):
        nat_pool_name: NotRequired[pulumi.Input[_builtins.int]]
        """
        NAT Pool Name
          - Range: `1`-`32`
        """
        nat_pool_name_variable: NotRequired[pulumi.Input[_builtins.str]]
        """
        Variable name
        """
        source_ip: NotRequired[pulumi.Input[_builtins.str]]
        """
        Source IP Address
        """
        source_ip_variable: NotRequired[pulumi.Input[_builtins.str]]
        """
        Variable name
        """
        static_nat_direction: NotRequired[pulumi.Input[_builtins.str]]
        """
        Static NAT Direction
          - Choices: `inside`, `outside`
        """
        static_nat_direction_variable: NotRequired[pulumi.Input[_builtins.str]]
        """
        Variable name
        """
        tracker_object_id: NotRequired[pulumi.Input[_builtins.str]]
        translated_source_ip: NotRequired[pulumi.Input[_builtins.str]]
        """
        Translated Source IP Address
        """
        translated_source_ip_variable: NotRequired[pulumi.Input[_builtins.str]]
        """
        Variable name
        """
elif False:
    ServiceLanVpnFeatureStaticNatArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ServiceLanVpnFeatureStaticNatArgs:
    def __init__(__self__, *,
                 nat_pool_name: Optional[pulumi.Input[_builtins.int]] = None,
                 nat_pool_name_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 source_ip: Optional[pulumi.Input[_builtins.str]] = None,
                 source_ip_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 static_nat_direction: Optional[pulumi.Input[_builtins.str]] = None,
                 static_nat_direction_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 tracker_object_id: Optional[pulumi.Input[_builtins.str]] = None,
                 translated_source_ip: Optional[pulumi.Input[_builtins.str]] = None,
                 translated_source_ip_variable: Optional[pulumi.Input[_builtins.str]] = None):
        """
        :param pulumi.Input[_builtins.int] nat_pool_name: NAT Pool Name
                 - Range: `1`-`32`
        :param pulumi.Input[_builtins.str] nat_pool_name_variable: Variable name
        :param pulumi.Input[_builtins.str] source_ip: Source IP Address
        :param pulumi.Input[_builtins.str] source_ip_variable: Variable name
        :param pulumi.Input[_builtins.str] static_nat_direction: Static NAT Direction
                 - Choices: `inside`, `outside`
        :param pulumi.Input[_builtins.str] static_nat_direction_variable: Variable name
        :param pulumi.Input[_builtins.str] translated_source_ip: Translated Source IP Address
        :param pulumi.Input[_builtins.str] translated_source_ip_variable: Variable name
        """
        if nat_pool_name is not None:
            pulumi.set(__self__, "nat_pool_name", nat_pool_name)
        if nat_pool_name_variable is not None:
            pulumi.set(__self__, "nat_pool_name_variable", nat_pool_name_variable)
        if source_ip is not None:
            pulumi.set(__self__, "source_ip", source_ip)
        if source_ip_variable is not None:
            pulumi.set(__self__, "source_ip_variable", source_ip_variable)
        if static_nat_direction is not None:
            pulumi.set(__self__, "static_nat_direction", static_nat_direction)
        if static_nat_direction_variable is not None:
            pulumi.set(__self__, "static_nat_direction_variable", static_nat_direction_variable)
        if tracker_object_id is not None:
            pulumi.set(__self__, "tracker_object_id", tracker_object_id)
        if translated_source_ip is not None:
            pulumi.set(__self__, "translated_source_ip", translated_source_ip)
        if translated_source_ip_variable is not None:
            pulumi.set(__self__, "translated_source_ip_variable", translated_source_ip_variable)

    @_builtins.property
    @pulumi.getter(name="natPoolName")
    def nat_pool_name(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        NAT Pool Name
          - Range: `1`-`32`
        """
        return pulumi.get(self, "nat_pool_name")

    @nat_pool_name.setter
    def nat_pool_name(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "nat_pool_name", value)

    @_builtins.property
    @pulumi.getter(name="natPoolNameVariable")
    def nat_pool_name_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "nat_pool_name_variable")

    @nat_pool_name_variable.setter
    def nat_pool_name_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "nat_pool_name_variable", value)

    @_builtins.property
    @pulumi.getter(name="sourceIp")
    def source_ip(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Source IP Address
        """
        return pulumi.get(self, "source_ip")

    @source_ip.setter
    def source_ip(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "source_ip", value)

    @_builtins.property
    @pulumi.getter(name="sourceIpVariable")
    def source_ip_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "source_ip_variable")

    @source_ip_variable.setter
    def source_ip_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "source_ip_variable", value)

    @_builtins.property
    @pulumi.getter(name="staticNatDirection")
    def static_nat_direction(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Static NAT Direction
          - Choices: `inside`, `outside`
        """
        return pulumi.get(self, "static_nat_direction")

    @static_nat_direction.setter
    def static_nat_direction(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "static_nat_direction", value)

    @_builtins.property
    @pulumi.getter(name="staticNatDirectionVariable")
    def static_nat_direction_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "static_nat_direction_variable")

    @static_nat_direction_variable.setter
    def static_nat_direction_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "static_nat_direction_variable", value)

    @_builtins.property
    @pulumi.getter(name="trackerObjectId")
    def tracker_object_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "tracker_object_id")

    @tracker_object_id.setter
    def tracker_object_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "tracker_object_id", value)

    @_builtins.property
    @pulumi.getter(name="translatedSourceIp")
    def translated_source_ip(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Translated Source IP Address
        """
        return pulumi.get(self, "translated_source_ip")

    @translated_source_ip.setter
    def translated_source_ip(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "translated_source_ip", value)

    @_builtins.property
    @pulumi.getter(name="translatedSourceIpVariable")
    def translated_source_ip_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "translated_source_ip_variable")

    @translated_source_ip_variable.setter
    def translated_source_ip_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "translated_source_ip_variable", value)


if not MYPY:
    class ServiceLanVpnInterfaceEthernetFeatureArpArgsDict(TypedDict):
        ip_address: NotRequired[pulumi.Input[_builtins.str]]
        """
        IPV4 Address
        """
        ip_address_variable: NotRequired[pulumi.Input[_builtins.str]]
        """
        Variable name
        """
        mac_address: NotRequired[pulumi.Input[_builtins.str]]
        """
        MAC Address
        """
        mac_address_variable: NotRequired[pulumi.Input[_builtins.str]]
        """
        Variable name
        """
elif False:
    ServiceLanVpnInterfaceEthernetFeatureArpArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ServiceLanVpnInterfaceEthernetFeatureArpArgs:
    def __init__(__self__, *,
                 ip_address: Optional[pulumi.Input[_builtins.str]] = None,
                 ip_address_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 mac_address: Optional[pulumi.Input[_builtins.str]] = None,
                 mac_address_variable: Optional[pulumi.Input[_builtins.str]] = None):
        """
        :param pulumi.Input[_builtins.str] ip_address: IPV4 Address
        :param pulumi.Input[_builtins.str] ip_address_variable: Variable name
        :param pulumi.Input[_builtins.str] mac_address: MAC Address
        :param pulumi.Input[_builtins.str] mac_address_variable: Variable name
        """
        if ip_address is not None:
            pulumi.set(__self__, "ip_address", ip_address)
        if ip_address_variable is not None:
            pulumi.set(__self__, "ip_address_variable", ip_address_variable)
        if mac_address is not None:
            pulumi.set(__self__, "mac_address", mac_address)
        if mac_address_variable is not None:
            pulumi.set(__self__, "mac_address_variable", mac_address_variable)

    @_builtins.property
    @pulumi.getter(name="ipAddress")
    def ip_address(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        IPV4 Address
        """
        return pulumi.get(self, "ip_address")

    @ip_address.setter
    def ip_address(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "ip_address", value)

    @_builtins.property
    @pulumi.getter(name="ipAddressVariable")
    def ip_address_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "ip_address_variable")

    @ip_address_variable.setter
    def ip_address_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "ip_address_variable", value)

    @_builtins.property
    @pulumi.getter(name="macAddress")
    def mac_address(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        MAC Address
        """
        return pulumi.get(self, "mac_address")

    @mac_address.setter
    def mac_address(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "mac_address", value)

    @_builtins.property
    @pulumi.getter(name="macAddressVariable")
    def mac_address_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "mac_address_variable")

    @mac_address_variable.setter
    def mac_address_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "mac_address_variable", value)


if not MYPY:
    class ServiceLanVpnInterfaceEthernetFeatureIpv4SecondaryAddressArgsDict(TypedDict):
        address: NotRequired[pulumi.Input[_builtins.str]]
        """
        IpV4 Address
        """
        address_variable: NotRequired[pulumi.Input[_builtins.str]]
        """
        Variable name
        """
        subnet_mask: NotRequired[pulumi.Input[_builtins.str]]
        """
        Subnet Mask
          - Choices: `255.255.255.255`, `255.255.255.254`, `255.255.255.252`, `255.255.255.248`, `255.255.255.240`, `255.255.255.224`, `255.255.255.192`, `255.255.255.128`, `255.255.255.0`, `255.255.254.0`, `255.255.252.0`, `255.255.248.0`, `255.255.240.0`, `255.255.224.0`, `255.255.192.0`, `255.255.128.0`, `255.255.0.0`, `255.254.0.0`, `255.252.0.0`, `255.240.0.0`, `255.224.0.0`, `255.192.0.0`, `255.128.0.0`, `255.0.0.0`, `254.0.0.0`, `252.0.0.0`, `248.0.0.0`, `240.0.0.0`, `224.0.0.0`, `192.0.0.0`, `128.0.0.0`, `0.0.0.0`
        """
        subnet_mask_variable: NotRequired[pulumi.Input[_builtins.str]]
        """
        Variable name
        """
elif False:
    ServiceLanVpnInterfaceEthernetFeatureIpv4SecondaryAddressArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ServiceLanVpnInterfaceEthernetFeatureIpv4SecondaryAddressArgs:
    def __init__(__self__, *,
                 address: Optional[pulumi.Input[_builtins.str]] = None,
                 address_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 subnet_mask: Optional[pulumi.Input[_builtins.str]] = None,
                 subnet_mask_variable: Optional[pulumi.Input[_builtins.str]] = None):
        """
        :param pulumi.Input[_builtins.str] address: IpV4 Address
        :param pulumi.Input[_builtins.str] address_variable: Variable name
        :param pulumi.Input[_builtins.str] subnet_mask: Subnet Mask
                 - Choices: `255.255.255.255`, `255.255.255.254`, `255.255.255.252`, `255.255.255.248`, `255.255.255.240`, `255.255.255.224`, `255.255.255.192`, `255.255.255.128`, `255.255.255.0`, `255.255.254.0`, `255.255.252.0`, `255.255.248.0`, `255.255.240.0`, `255.255.224.0`, `255.255.192.0`, `255.255.128.0`, `255.255.0.0`, `255.254.0.0`, `255.252.0.0`, `255.240.0.0`, `255.224.0.0`, `255.192.0.0`, `255.128.0.0`, `255.0.0.0`, `254.0.0.0`, `252.0.0.0`, `248.0.0.0`, `240.0.0.0`, `224.0.0.0`, `192.0.0.0`, `128.0.0.0`, `0.0.0.0`
        :param pulumi.Input[_builtins.str] subnet_mask_variable: Variable name
        """
        if address is not None:
            pulumi.set(__self__, "address", address)
        if address_variable is not None:
            pulumi.set(__self__, "address_variable", address_variable)
        if subnet_mask is not None:
            pulumi.set(__self__, "subnet_mask", subnet_mask)
        if subnet_mask_variable is not None:
            pulumi.set(__self__, "subnet_mask_variable", subnet_mask_variable)

    @_builtins.property
    @pulumi.getter
    def address(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        IpV4 Address
        """
        return pulumi.get(self, "address")

    @address.setter
    def address(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "address", value)

    @_builtins.property
    @pulumi.getter(name="addressVariable")
    def address_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "address_variable")

    @address_variable.setter
    def address_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "address_variable", value)

    @_builtins.property
    @pulumi.getter(name="subnetMask")
    def subnet_mask(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Subnet Mask
          - Choices: `255.255.255.255`, `255.255.255.254`, `255.255.255.252`, `255.255.255.248`, `255.255.255.240`, `255.255.255.224`, `255.255.255.192`, `255.255.255.128`, `255.255.255.0`, `255.255.254.0`, `255.255.252.0`, `255.255.248.0`, `255.255.240.0`, `255.255.224.0`, `255.255.192.0`, `255.255.128.0`, `255.255.0.0`, `255.254.0.0`, `255.252.0.0`, `255.240.0.0`, `255.224.0.0`, `255.192.0.0`, `255.128.0.0`, `255.0.0.0`, `254.0.0.0`, `252.0.0.0`, `248.0.0.0`, `240.0.0.0`, `224.0.0.0`, `192.0.0.0`, `128.0.0.0`, `0.0.0.0`
        """
        return pulumi.get(self, "subnet_mask")

    @subnet_mask.setter
    def subnet_mask(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "subnet_mask", value)

    @_builtins.property
    @pulumi.getter(name="subnetMaskVariable")
    def subnet_mask_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "subnet_mask_variable")

    @subnet_mask_variable.setter
    def subnet_mask_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "subnet_mask_variable", value)


if not MYPY:
    class ServiceLanVpnInterfaceEthernetFeatureIpv4VrrpArgsDict(TypedDict):
        address: NotRequired[pulumi.Input[_builtins.str]]
        """
        VRRP Ip Address
        """
        address_variable: NotRequired[pulumi.Input[_builtins.str]]
        """
        Variable name
        """
        group_id: NotRequired[pulumi.Input[_builtins.int]]
        """
        Group ID
          - Range: `1`-`255`
        """
        group_id_variable: NotRequired[pulumi.Input[_builtins.str]]
        """
        Variable name
        """
        priority: NotRequired[pulumi.Input[_builtins.int]]
        """
        Set priority
          - Range: `1`-`254`
          - Default value: `100`
        """
        priority_variable: NotRequired[pulumi.Input[_builtins.str]]
        """
        Variable name
        """
        secondary_addresses: NotRequired[pulumi.Input[Sequence[pulumi.Input['ServiceLanVpnInterfaceEthernetFeatureIpv4VrrpSecondaryAddressArgsDict']]]]
        """
        VRRP Secondary Ip Addresses
        """
        timer: NotRequired[pulumi.Input[_builtins.int]]
        """
        Timer interval for successive advertisements, in milliseconds
          - Range: `100`-`40950`
          - Default value: `1000`
        """
        timer_variable: NotRequired[pulumi.Input[_builtins.str]]
        """
        Variable name
        """
        tloc_pref_change_value: NotRequired[pulumi.Input[_builtins.int]]
        """
        Timer interval for successive advertisements, in milliseconds
          - Range: `100`-`4294967295`
        """
        tloc_prefix_change: NotRequired[pulumi.Input[_builtins.bool]]
        """
        Timer interval for successive advertisements, in milliseconds
          - Default value: `false`
        """
        track_omp: NotRequired[pulumi.Input[_builtins.bool]]
        """
        Track OMP status
          - Default value: `false`
        """
        tracking_objects: NotRequired[pulumi.Input[Sequence[pulumi.Input['ServiceLanVpnInterfaceEthernetFeatureIpv4VrrpTrackingObjectArgsDict']]]]
        """
        Tracking object for VRRP configuration
        """
elif False:
    ServiceLanVpnInterfaceEthernetFeatureIpv4VrrpArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ServiceLanVpnInterfaceEthernetFeatureIpv4VrrpArgs:
    def __init__(__self__, *,
                 address: Optional[pulumi.Input[_builtins.str]] = None,
                 address_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 group_id: Optional[pulumi.Input[_builtins.int]] = None,
                 group_id_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 priority: Optional[pulumi.Input[_builtins.int]] = None,
                 priority_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 secondary_addresses: Optional[pulumi.Input[Sequence[pulumi.Input['ServiceLanVpnInterfaceEthernetFeatureIpv4VrrpSecondaryAddressArgs']]]] = None,
                 timer: Optional[pulumi.Input[_builtins.int]] = None,
                 timer_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 tloc_pref_change_value: Optional[pulumi.Input[_builtins.int]] = None,
                 tloc_prefix_change: Optional[pulumi.Input[_builtins.bool]] = None,
                 track_omp: Optional[pulumi.Input[_builtins.bool]] = None,
                 tracking_objects: Optional[pulumi.Input[Sequence[pulumi.Input['ServiceLanVpnInterfaceEthernetFeatureIpv4VrrpTrackingObjectArgs']]]] = None):
        """
        :param pulumi.Input[_builtins.str] address: VRRP Ip Address
        :param pulumi.Input[_builtins.str] address_variable: Variable name
        :param pulumi.Input[_builtins.int] group_id: Group ID
                 - Range: `1`-`255`
        :param pulumi.Input[_builtins.str] group_id_variable: Variable name
        :param pulumi.Input[_builtins.int] priority: Set priority
                 - Range: `1`-`254`
                 - Default value: `100`
        :param pulumi.Input[_builtins.str] priority_variable: Variable name
        :param pulumi.Input[Sequence[pulumi.Input['ServiceLanVpnInterfaceEthernetFeatureIpv4VrrpSecondaryAddressArgs']]] secondary_addresses: VRRP Secondary Ip Addresses
        :param pulumi.Input[_builtins.int] timer: Timer interval for successive advertisements, in milliseconds
                 - Range: `100`-`40950`
                 - Default value: `1000`
        :param pulumi.Input[_builtins.str] timer_variable: Variable name
        :param pulumi.Input[_builtins.int] tloc_pref_change_value: Timer interval for successive advertisements, in milliseconds
                 - Range: `100`-`4294967295`
        :param pulumi.Input[_builtins.bool] tloc_prefix_change: Timer interval for successive advertisements, in milliseconds
                 - Default value: `false`
        :param pulumi.Input[_builtins.bool] track_omp: Track OMP status
                 - Default value: `false`
        :param pulumi.Input[Sequence[pulumi.Input['ServiceLanVpnInterfaceEthernetFeatureIpv4VrrpTrackingObjectArgs']]] tracking_objects: Tracking object for VRRP configuration
        """
        if address is not None:
            pulumi.set(__self__, "address", address)
        if address_variable is not None:
            pulumi.set(__self__, "address_variable", address_variable)
        if group_id is not None:
            pulumi.set(__self__, "group_id", group_id)
        if group_id_variable is not None:
            pulumi.set(__self__, "group_id_variable", group_id_variable)
        if priority is not None:
            pulumi.set(__self__, "priority", priority)
        if priority_variable is not None:
            pulumi.set(__self__, "priority_variable", priority_variable)
        if secondary_addresses is not None:
            pulumi.set(__self__, "secondary_addresses", secondary_addresses)
        if timer is not None:
            pulumi.set(__self__, "timer", timer)
        if timer_variable is not None:
            pulumi.set(__self__, "timer_variable", timer_variable)
        if tloc_pref_change_value is not None:
            pulumi.set(__self__, "tloc_pref_change_value", tloc_pref_change_value)
        if tloc_prefix_change is not None:
            pulumi.set(__self__, "tloc_prefix_change", tloc_prefix_change)
        if track_omp is not None:
            pulumi.set(__self__, "track_omp", track_omp)
        if tracking_objects is not None:
            pulumi.set(__self__, "tracking_objects", tracking_objects)

    @_builtins.property
    @pulumi.getter
    def address(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        VRRP Ip Address
        """
        return pulumi.get(self, "address")

    @address.setter
    def address(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "address", value)

    @_builtins.property
    @pulumi.getter(name="addressVariable")
    def address_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "address_variable")

    @address_variable.setter
    def address_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "address_variable", value)

    @_builtins.property
    @pulumi.getter(name="groupId")
    def group_id(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        Group ID
          - Range: `1`-`255`
        """
        return pulumi.get(self, "group_id")

    @group_id.setter
    def group_id(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "group_id", value)

    @_builtins.property
    @pulumi.getter(name="groupIdVariable")
    def group_id_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "group_id_variable")

    @group_id_variable.setter
    def group_id_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "group_id_variable", value)

    @_builtins.property
    @pulumi.getter
    def priority(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        Set priority
          - Range: `1`-`254`
          - Default value: `100`
        """
        return pulumi.get(self, "priority")

    @priority.setter
    def priority(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "priority", value)

    @_builtins.property
    @pulumi.getter(name="priorityVariable")
    def priority_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "priority_variable")

    @priority_variable.setter
    def priority_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "priority_variable", value)

    @_builtins.property
    @pulumi.getter(name="secondaryAddresses")
    def secondary_addresses(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ServiceLanVpnInterfaceEthernetFeatureIpv4VrrpSecondaryAddressArgs']]]]:
        """
        VRRP Secondary Ip Addresses
        """
        return pulumi.get(self, "secondary_addresses")

    @secondary_addresses.setter
    def secondary_addresses(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ServiceLanVpnInterfaceEthernetFeatureIpv4VrrpSecondaryAddressArgs']]]]):
        pulumi.set(self, "secondary_addresses", value)

    @_builtins.property
    @pulumi.getter
    def timer(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        Timer interval for successive advertisements, in milliseconds
          - Range: `100`-`40950`
          - Default value: `1000`
        """
        return pulumi.get(self, "timer")

    @timer.setter
    def timer(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "timer", value)

    @_builtins.property
    @pulumi.getter(name="timerVariable")
    def timer_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "timer_variable")

    @timer_variable.setter
    def timer_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "timer_variable", value)

    @_builtins.property
    @pulumi.getter(name="tlocPrefChangeValue")
    def tloc_pref_change_value(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        Timer interval for successive advertisements, in milliseconds
          - Range: `100`-`4294967295`
        """
        return pulumi.get(self, "tloc_pref_change_value")

    @tloc_pref_change_value.setter
    def tloc_pref_change_value(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "tloc_pref_change_value", value)

    @_builtins.property
    @pulumi.getter(name="tlocPrefixChange")
    def tloc_prefix_change(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Timer interval for successive advertisements, in milliseconds
          - Default value: `false`
        """
        return pulumi.get(self, "tloc_prefix_change")

    @tloc_prefix_change.setter
    def tloc_prefix_change(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "tloc_prefix_change", value)

    @_builtins.property
    @pulumi.getter(name="trackOmp")
    def track_omp(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Track OMP status
          - Default value: `false`
        """
        return pulumi.get(self, "track_omp")

    @track_omp.setter
    def track_omp(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "track_omp", value)

    @_builtins.property
    @pulumi.getter(name="trackingObjects")
    def tracking_objects(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ServiceLanVpnInterfaceEthernetFeatureIpv4VrrpTrackingObjectArgs']]]]:
        """
        Tracking object for VRRP configuration
        """
        return pulumi.get(self, "tracking_objects")

    @tracking_objects.setter
    def tracking_objects(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ServiceLanVpnInterfaceEthernetFeatureIpv4VrrpTrackingObjectArgs']]]]):
        pulumi.set(self, "tracking_objects", value)


if not MYPY:
    class ServiceLanVpnInterfaceEthernetFeatureIpv4VrrpSecondaryAddressArgsDict(TypedDict):
        address: NotRequired[pulumi.Input[_builtins.str]]
        """
        Ip Address
        """
        address_variable: NotRequired[pulumi.Input[_builtins.str]]
        """
        Variable name
        """
        subnet_mask: NotRequired[pulumi.Input[_builtins.str]]
        """
        Subnet Mask
          - Choices: `255.255.255.255`, `255.255.255.254`, `255.255.255.252`, `255.255.255.248`, `255.255.255.240`, `255.255.255.224`, `255.255.255.192`, `255.255.255.128`, `255.255.255.0`, `255.255.254.0`, `255.255.252.0`, `255.255.248.0`, `255.255.240.0`, `255.255.224.0`, `255.255.192.0`, `255.255.128.0`, `255.255.0.0`, `255.254.0.0`, `255.252.0.0`, `255.240.0.0`, `255.224.0.0`, `255.192.0.0`, `255.128.0.0`, `255.0.0.0`, `254.0.0.0`, `252.0.0.0`, `248.0.0.0`, `240.0.0.0`, `224.0.0.0`, `192.0.0.0`, `128.0.0.0`, `0.0.0.0`
        """
        subnet_mask_variable: NotRequired[pulumi.Input[_builtins.str]]
        """
        Variable name
        """
elif False:
    ServiceLanVpnInterfaceEthernetFeatureIpv4VrrpSecondaryAddressArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ServiceLanVpnInterfaceEthernetFeatureIpv4VrrpSecondaryAddressArgs:
    def __init__(__self__, *,
                 address: Optional[pulumi.Input[_builtins.str]] = None,
                 address_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 subnet_mask: Optional[pulumi.Input[_builtins.str]] = None,
                 subnet_mask_variable: Optional[pulumi.Input[_builtins.str]] = None):
        """
        :param pulumi.Input[_builtins.str] address: Ip Address
        :param pulumi.Input[_builtins.str] address_variable: Variable name
        :param pulumi.Input[_builtins.str] subnet_mask: Subnet Mask
                 - Choices: `255.255.255.255`, `255.255.255.254`, `255.255.255.252`, `255.255.255.248`, `255.255.255.240`, `255.255.255.224`, `255.255.255.192`, `255.255.255.128`, `255.255.255.0`, `255.255.254.0`, `255.255.252.0`, `255.255.248.0`, `255.255.240.0`, `255.255.224.0`, `255.255.192.0`, `255.255.128.0`, `255.255.0.0`, `255.254.0.0`, `255.252.0.0`, `255.240.0.0`, `255.224.0.0`, `255.192.0.0`, `255.128.0.0`, `255.0.0.0`, `254.0.0.0`, `252.0.0.0`, `248.0.0.0`, `240.0.0.0`, `224.0.0.0`, `192.0.0.0`, `128.0.0.0`, `0.0.0.0`
        :param pulumi.Input[_builtins.str] subnet_mask_variable: Variable name
        """
        if address is not None:
            pulumi.set(__self__, "address", address)
        if address_variable is not None:
            pulumi.set(__self__, "address_variable", address_variable)
        if subnet_mask is not None:
            pulumi.set(__self__, "subnet_mask", subnet_mask)
        if subnet_mask_variable is not None:
            pulumi.set(__self__, "subnet_mask_variable", subnet_mask_variable)

    @_builtins.property
    @pulumi.getter
    def address(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Ip Address
        """
        return pulumi.get(self, "address")

    @address.setter
    def address(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "address", value)

    @_builtins.property
    @pulumi.getter(name="addressVariable")
    def address_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "address_variable")

    @address_variable.setter
    def address_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "address_variable", value)

    @_builtins.property
    @pulumi.getter(name="subnetMask")
    def subnet_mask(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Subnet Mask
          - Choices: `255.255.255.255`, `255.255.255.254`, `255.255.255.252`, `255.255.255.248`, `255.255.255.240`, `255.255.255.224`, `255.255.255.192`, `255.255.255.128`, `255.255.255.0`, `255.255.254.0`, `255.255.252.0`, `255.255.248.0`, `255.255.240.0`, `255.255.224.0`, `255.255.192.0`, `255.255.128.0`, `255.255.0.0`, `255.254.0.0`, `255.252.0.0`, `255.240.0.0`, `255.224.0.0`, `255.192.0.0`, `255.128.0.0`, `255.0.0.0`, `254.0.0.0`, `252.0.0.0`, `248.0.0.0`, `240.0.0.0`, `224.0.0.0`, `192.0.0.0`, `128.0.0.0`, `0.0.0.0`
        """
        return pulumi.get(self, "subnet_mask")

    @subnet_mask.setter
    def subnet_mask(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "subnet_mask", value)

    @_builtins.property
    @pulumi.getter(name="subnetMaskVariable")
    def subnet_mask_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "subnet_mask_variable")

    @subnet_mask_variable.setter
    def subnet_mask_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "subnet_mask_variable", value)


if not MYPY:
    class ServiceLanVpnInterfaceEthernetFeatureIpv4VrrpTrackingObjectArgsDict(TypedDict):
        decrement_value: NotRequired[pulumi.Input[_builtins.int]]
        """
        Decrement Value for VRRP priority
          - Range: `1`-`255`
        """
        decrement_value_variable: NotRequired[pulumi.Input[_builtins.str]]
        """
        Variable name
        """
        tracker_action: NotRequired[pulumi.Input[_builtins.str]]
        """
        Track Action
          - Choices: `Decrement`, `Shutdown`
        """
        tracker_action_variable: NotRequired[pulumi.Input[_builtins.str]]
        """
        Variable name
        """
        tracker_id: NotRequired[pulumi.Input[_builtins.str]]
elif False:
    ServiceLanVpnInterfaceEthernetFeatureIpv4VrrpTrackingObjectArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ServiceLanVpnInterfaceEthernetFeatureIpv4VrrpTrackingObjectArgs:
    def __init__(__self__, *,
                 decrement_value: Optional[pulumi.Input[_builtins.int]] = None,
                 decrement_value_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 tracker_action: Optional[pulumi.Input[_builtins.str]] = None,
                 tracker_action_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 tracker_id: Optional[pulumi.Input[_builtins.str]] = None):
        """
        :param pulumi.Input[_builtins.int] decrement_value: Decrement Value for VRRP priority
                 - Range: `1`-`255`
        :param pulumi.Input[_builtins.str] decrement_value_variable: Variable name
        :param pulumi.Input[_builtins.str] tracker_action: Track Action
                 - Choices: `Decrement`, `Shutdown`
        :param pulumi.Input[_builtins.str] tracker_action_variable: Variable name
        """
        if decrement_value is not None:
            pulumi.set(__self__, "decrement_value", decrement_value)
        if decrement_value_variable is not None:
            pulumi.set(__self__, "decrement_value_variable", decrement_value_variable)
        if tracker_action is not None:
            pulumi.set(__self__, "tracker_action", tracker_action)
        if tracker_action_variable is not None:
            pulumi.set(__self__, "tracker_action_variable", tracker_action_variable)
        if tracker_id is not None:
            pulumi.set(__self__, "tracker_id", tracker_id)

    @_builtins.property
    @pulumi.getter(name="decrementValue")
    def decrement_value(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        Decrement Value for VRRP priority
          - Range: `1`-`255`
        """
        return pulumi.get(self, "decrement_value")

    @decrement_value.setter
    def decrement_value(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "decrement_value", value)

    @_builtins.property
    @pulumi.getter(name="decrementValueVariable")
    def decrement_value_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "decrement_value_variable")

    @decrement_value_variable.setter
    def decrement_value_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "decrement_value_variable", value)

    @_builtins.property
    @pulumi.getter(name="trackerAction")
    def tracker_action(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Track Action
          - Choices: `Decrement`, `Shutdown`
        """
        return pulumi.get(self, "tracker_action")

    @tracker_action.setter
    def tracker_action(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "tracker_action", value)

    @_builtins.property
    @pulumi.getter(name="trackerActionVariable")
    def tracker_action_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "tracker_action_variable")

    @tracker_action_variable.setter
    def tracker_action_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "tracker_action_variable", value)

    @_builtins.property
    @pulumi.getter(name="trackerId")
    def tracker_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "tracker_id")

    @tracker_id.setter
    def tracker_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "tracker_id", value)


if not MYPY:
    class ServiceLanVpnInterfaceEthernetFeatureIpv6DhcpHelperArgsDict(TypedDict):
        address: NotRequired[pulumi.Input[_builtins.str]]
        """
        DHCPv6 Helper address
        """
        address_variable: NotRequired[pulumi.Input[_builtins.str]]
        """
        Variable name
        """
        dhcpv6_helper_vpn: NotRequired[pulumi.Input[_builtins.int]]
        """
        DHCPv6 Helper VPN
          - Range: `1`-`65536`
        """
        dhcpv6_helper_vpn_variable: NotRequired[pulumi.Input[_builtins.str]]
        """
        Variable name
        """
elif False:
    ServiceLanVpnInterfaceEthernetFeatureIpv6DhcpHelperArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ServiceLanVpnInterfaceEthernetFeatureIpv6DhcpHelperArgs:
    def __init__(__self__, *,
                 address: Optional[pulumi.Input[_builtins.str]] = None,
                 address_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 dhcpv6_helper_vpn: Optional[pulumi.Input[_builtins.int]] = None,
                 dhcpv6_helper_vpn_variable: Optional[pulumi.Input[_builtins.str]] = None):
        """
        :param pulumi.Input[_builtins.str] address: DHCPv6 Helper address
        :param pulumi.Input[_builtins.str] address_variable: Variable name
        :param pulumi.Input[_builtins.int] dhcpv6_helper_vpn: DHCPv6 Helper VPN
                 - Range: `1`-`65536`
        :param pulumi.Input[_builtins.str] dhcpv6_helper_vpn_variable: Variable name
        """
        if address is not None:
            pulumi.set(__self__, "address", address)
        if address_variable is not None:
            pulumi.set(__self__, "address_variable", address_variable)
        if dhcpv6_helper_vpn is not None:
            pulumi.set(__self__, "dhcpv6_helper_vpn", dhcpv6_helper_vpn)
        if dhcpv6_helper_vpn_variable is not None:
            pulumi.set(__self__, "dhcpv6_helper_vpn_variable", dhcpv6_helper_vpn_variable)

    @_builtins.property
    @pulumi.getter
    def address(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        DHCPv6 Helper address
        """
        return pulumi.get(self, "address")

    @address.setter
    def address(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "address", value)

    @_builtins.property
    @pulumi.getter(name="addressVariable")
    def address_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "address_variable")

    @address_variable.setter
    def address_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "address_variable", value)

    @_builtins.property
    @pulumi.getter(name="dhcpv6HelperVpn")
    def dhcpv6_helper_vpn(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        DHCPv6 Helper VPN
          - Range: `1`-`65536`
        """
        return pulumi.get(self, "dhcpv6_helper_vpn")

    @dhcpv6_helper_vpn.setter
    def dhcpv6_helper_vpn(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "dhcpv6_helper_vpn", value)

    @_builtins.property
    @pulumi.getter(name="dhcpv6HelperVpnVariable")
    def dhcpv6_helper_vpn_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "dhcpv6_helper_vpn_variable")

    @dhcpv6_helper_vpn_variable.setter
    def dhcpv6_helper_vpn_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "dhcpv6_helper_vpn_variable", value)


if not MYPY:
    class ServiceLanVpnInterfaceEthernetFeatureIpv6DhcpSecondaryAddressArgsDict(TypedDict):
        address: NotRequired[pulumi.Input[_builtins.str]]
        """
        IPv6 Address Secondary
        """
        address_variable: NotRequired[pulumi.Input[_builtins.str]]
        """
        Variable name
        """
elif False:
    ServiceLanVpnInterfaceEthernetFeatureIpv6DhcpSecondaryAddressArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ServiceLanVpnInterfaceEthernetFeatureIpv6DhcpSecondaryAddressArgs:
    def __init__(__self__, *,
                 address: Optional[pulumi.Input[_builtins.str]] = None,
                 address_variable: Optional[pulumi.Input[_builtins.str]] = None):
        """
        :param pulumi.Input[_builtins.str] address: IPv6 Address Secondary
        :param pulumi.Input[_builtins.str] address_variable: Variable name
        """
        if address is not None:
            pulumi.set(__self__, "address", address)
        if address_variable is not None:
            pulumi.set(__self__, "address_variable", address_variable)

    @_builtins.property
    @pulumi.getter
    def address(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        IPv6 Address Secondary
        """
        return pulumi.get(self, "address")

    @address.setter
    def address(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "address", value)

    @_builtins.property
    @pulumi.getter(name="addressVariable")
    def address_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "address_variable")

    @address_variable.setter
    def address_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "address_variable", value)


if not MYPY:
    class ServiceLanVpnInterfaceEthernetFeatureIpv6SecondaryAddressArgsDict(TypedDict):
        address: NotRequired[pulumi.Input[_builtins.str]]
        """
        IPv6 Address Secondary
        """
        address_variable: NotRequired[pulumi.Input[_builtins.str]]
        """
        Variable name
        """
elif False:
    ServiceLanVpnInterfaceEthernetFeatureIpv6SecondaryAddressArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ServiceLanVpnInterfaceEthernetFeatureIpv6SecondaryAddressArgs:
    def __init__(__self__, *,
                 address: Optional[pulumi.Input[_builtins.str]] = None,
                 address_variable: Optional[pulumi.Input[_builtins.str]] = None):
        """
        :param pulumi.Input[_builtins.str] address: IPv6 Address Secondary
        :param pulumi.Input[_builtins.str] address_variable: Variable name
        """
        if address is not None:
            pulumi.set(__self__, "address", address)
        if address_variable is not None:
            pulumi.set(__self__, "address_variable", address_variable)

    @_builtins.property
    @pulumi.getter
    def address(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        IPv6 Address Secondary
        """
        return pulumi.get(self, "address")

    @address.setter
    def address(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "address", value)

    @_builtins.property
    @pulumi.getter(name="addressVariable")
    def address_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "address_variable")

    @address_variable.setter
    def address_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "address_variable", value)


if not MYPY:
    class ServiceLanVpnInterfaceEthernetFeatureIpv6VrrpArgsDict(TypedDict):
        group_id: NotRequired[pulumi.Input[_builtins.int]]
        """
        Group ID
          - Range: `1`-`255`
        """
        group_id_variable: NotRequired[pulumi.Input[_builtins.str]]
        """
        Variable name
        """
        ipv6_addresses: NotRequired[pulumi.Input[Sequence[pulumi.Input['ServiceLanVpnInterfaceEthernetFeatureIpv6VrrpIpv6AddressArgsDict']]]]
        """
        IPv6 VRRP
        """
        priority: NotRequired[pulumi.Input[_builtins.int]]
        """
        Set priority
          - Range: `1`-`254`
          - Default value: `100`
        """
        priority_variable: NotRequired[pulumi.Input[_builtins.str]]
        """
        Variable name
        """
        timer: NotRequired[pulumi.Input[_builtins.int]]
        """
        Timer interval for successive advertisements, in milliseconds
          - Range: `100`-`40950`
          - Default value: `1000`
        """
        timer_variable: NotRequired[pulumi.Input[_builtins.str]]
        """
        Variable name
        """
        track_omp: NotRequired[pulumi.Input[_builtins.bool]]
        """
        Track OMP status
          - Default value: `false`
        """
elif False:
    ServiceLanVpnInterfaceEthernetFeatureIpv6VrrpArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ServiceLanVpnInterfaceEthernetFeatureIpv6VrrpArgs:
    def __init__(__self__, *,
                 group_id: Optional[pulumi.Input[_builtins.int]] = None,
                 group_id_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 ipv6_addresses: Optional[pulumi.Input[Sequence[pulumi.Input['ServiceLanVpnInterfaceEthernetFeatureIpv6VrrpIpv6AddressArgs']]]] = None,
                 priority: Optional[pulumi.Input[_builtins.int]] = None,
                 priority_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 timer: Optional[pulumi.Input[_builtins.int]] = None,
                 timer_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 track_omp: Optional[pulumi.Input[_builtins.bool]] = None):
        """
        :param pulumi.Input[_builtins.int] group_id: Group ID
                 - Range: `1`-`255`
        :param pulumi.Input[_builtins.str] group_id_variable: Variable name
        :param pulumi.Input[Sequence[pulumi.Input['ServiceLanVpnInterfaceEthernetFeatureIpv6VrrpIpv6AddressArgs']]] ipv6_addresses: IPv6 VRRP
        :param pulumi.Input[_builtins.int] priority: Set priority
                 - Range: `1`-`254`
                 - Default value: `100`
        :param pulumi.Input[_builtins.str] priority_variable: Variable name
        :param pulumi.Input[_builtins.int] timer: Timer interval for successive advertisements, in milliseconds
                 - Range: `100`-`40950`
                 - Default value: `1000`
        :param pulumi.Input[_builtins.str] timer_variable: Variable name
        :param pulumi.Input[_builtins.bool] track_omp: Track OMP status
                 - Default value: `false`
        """
        if group_id is not None:
            pulumi.set(__self__, "group_id", group_id)
        if group_id_variable is not None:
            pulumi.set(__self__, "group_id_variable", group_id_variable)
        if ipv6_addresses is not None:
            pulumi.set(__self__, "ipv6_addresses", ipv6_addresses)
        if priority is not None:
            pulumi.set(__self__, "priority", priority)
        if priority_variable is not None:
            pulumi.set(__self__, "priority_variable", priority_variable)
        if timer is not None:
            pulumi.set(__self__, "timer", timer)
        if timer_variable is not None:
            pulumi.set(__self__, "timer_variable", timer_variable)
        if track_omp is not None:
            pulumi.set(__self__, "track_omp", track_omp)

    @_builtins.property
    @pulumi.getter(name="groupId")
    def group_id(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        Group ID
          - Range: `1`-`255`
        """
        return pulumi.get(self, "group_id")

    @group_id.setter
    def group_id(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "group_id", value)

    @_builtins.property
    @pulumi.getter(name="groupIdVariable")
    def group_id_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "group_id_variable")

    @group_id_variable.setter
    def group_id_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "group_id_variable", value)

    @_builtins.property
    @pulumi.getter(name="ipv6Addresses")
    def ipv6_addresses(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ServiceLanVpnInterfaceEthernetFeatureIpv6VrrpIpv6AddressArgs']]]]:
        """
        IPv6 VRRP
        """
        return pulumi.get(self, "ipv6_addresses")

    @ipv6_addresses.setter
    def ipv6_addresses(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ServiceLanVpnInterfaceEthernetFeatureIpv6VrrpIpv6AddressArgs']]]]):
        pulumi.set(self, "ipv6_addresses", value)

    @_builtins.property
    @pulumi.getter
    def priority(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        Set priority
          - Range: `1`-`254`
          - Default value: `100`
        """
        return pulumi.get(self, "priority")

    @priority.setter
    def priority(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "priority", value)

    @_builtins.property
    @pulumi.getter(name="priorityVariable")
    def priority_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "priority_variable")

    @priority_variable.setter
    def priority_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "priority_variable", value)

    @_builtins.property
    @pulumi.getter
    def timer(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        Timer interval for successive advertisements, in milliseconds
          - Range: `100`-`40950`
          - Default value: `1000`
        """
        return pulumi.get(self, "timer")

    @timer.setter
    def timer(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "timer", value)

    @_builtins.property
    @pulumi.getter(name="timerVariable")
    def timer_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "timer_variable")

    @timer_variable.setter
    def timer_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "timer_variable", value)

    @_builtins.property
    @pulumi.getter(name="trackOmp")
    def track_omp(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Track OMP status
          - Default value: `false`
        """
        return pulumi.get(self, "track_omp")

    @track_omp.setter
    def track_omp(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "track_omp", value)


if not MYPY:
    class ServiceLanVpnInterfaceEthernetFeatureIpv6VrrpIpv6AddressArgsDict(TypedDict):
        global_address: NotRequired[pulumi.Input[_builtins.str]]
        """
        Assign Global IPv6 Prefix
        """
        global_address_variable: NotRequired[pulumi.Input[_builtins.str]]
        """
        Variable name
        """
        link_local_address: NotRequired[pulumi.Input[_builtins.str]]
        """
        Use link-local IPv6 Address
        """
        link_local_address_variable: NotRequired[pulumi.Input[_builtins.str]]
        """
        Variable name
        """
elif False:
    ServiceLanVpnInterfaceEthernetFeatureIpv6VrrpIpv6AddressArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ServiceLanVpnInterfaceEthernetFeatureIpv6VrrpIpv6AddressArgs:
    def __init__(__self__, *,
                 global_address: Optional[pulumi.Input[_builtins.str]] = None,
                 global_address_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 link_local_address: Optional[pulumi.Input[_builtins.str]] = None,
                 link_local_address_variable: Optional[pulumi.Input[_builtins.str]] = None):
        """
        :param pulumi.Input[_builtins.str] global_address: Assign Global IPv6 Prefix
        :param pulumi.Input[_builtins.str] global_address_variable: Variable name
        :param pulumi.Input[_builtins.str] link_local_address: Use link-local IPv6 Address
        :param pulumi.Input[_builtins.str] link_local_address_variable: Variable name
        """
        if global_address is not None:
            pulumi.set(__self__, "global_address", global_address)
        if global_address_variable is not None:
            pulumi.set(__self__, "global_address_variable", global_address_variable)
        if link_local_address is not None:
            pulumi.set(__self__, "link_local_address", link_local_address)
        if link_local_address_variable is not None:
            pulumi.set(__self__, "link_local_address_variable", link_local_address_variable)

    @_builtins.property
    @pulumi.getter(name="globalAddress")
    def global_address(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Assign Global IPv6 Prefix
        """
        return pulumi.get(self, "global_address")

    @global_address.setter
    def global_address(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "global_address", value)

    @_builtins.property
    @pulumi.getter(name="globalAddressVariable")
    def global_address_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "global_address_variable")

    @global_address_variable.setter
    def global_address_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "global_address_variable", value)

    @_builtins.property
    @pulumi.getter(name="linkLocalAddress")
    def link_local_address(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Use link-local IPv6 Address
        """
        return pulumi.get(self, "link_local_address")

    @link_local_address.setter
    def link_local_address(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "link_local_address", value)

    @_builtins.property
    @pulumi.getter(name="linkLocalAddressVariable")
    def link_local_address_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "link_local_address_variable")

    @link_local_address_variable.setter
    def link_local_address_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "link_local_address_variable", value)


if not MYPY:
    class ServiceLanVpnInterfaceEthernetFeatureStaticNatArgsDict(TypedDict):
        direction: NotRequired[pulumi.Input[_builtins.str]]
        """
        Direction of static NAT translation
          - Choices: `inside`, `outside`
          - Default value: `inside`
        """
        source_ip: NotRequired[pulumi.Input[_builtins.str]]
        """
        Source IP address to be translated
        """
        source_ip_variable: NotRequired[pulumi.Input[_builtins.str]]
        """
        Variable name
        """
        source_vpn: NotRequired[pulumi.Input[_builtins.int]]
        """
        Source VPN ID
          - Range: `0`-`65530`
          - Default value: `0`
        """
        source_vpn_variable: NotRequired[pulumi.Input[_builtins.str]]
        """
        Variable name
        """
        translate_ip: NotRequired[pulumi.Input[_builtins.str]]
        """
        Statically translated source IP address
        """
        translate_ip_variable: NotRequired[pulumi.Input[_builtins.str]]
        """
        Variable name
        """
elif False:
    ServiceLanVpnInterfaceEthernetFeatureStaticNatArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ServiceLanVpnInterfaceEthernetFeatureStaticNatArgs:
    def __init__(__self__, *,
                 direction: Optional[pulumi.Input[_builtins.str]] = None,
                 source_ip: Optional[pulumi.Input[_builtins.str]] = None,
                 source_ip_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 source_vpn: Optional[pulumi.Input[_builtins.int]] = None,
                 source_vpn_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 translate_ip: Optional[pulumi.Input[_builtins.str]] = None,
                 translate_ip_variable: Optional[pulumi.Input[_builtins.str]] = None):
        """
        :param pulumi.Input[_builtins.str] direction: Direction of static NAT translation
                 - Choices: `inside`, `outside`
                 - Default value: `inside`
        :param pulumi.Input[_builtins.str] source_ip: Source IP address to be translated
        :param pulumi.Input[_builtins.str] source_ip_variable: Variable name
        :param pulumi.Input[_builtins.int] source_vpn: Source VPN ID
                 - Range: `0`-`65530`
                 - Default value: `0`
        :param pulumi.Input[_builtins.str] source_vpn_variable: Variable name
        :param pulumi.Input[_builtins.str] translate_ip: Statically translated source IP address
        :param pulumi.Input[_builtins.str] translate_ip_variable: Variable name
        """
        if direction is not None:
            pulumi.set(__self__, "direction", direction)
        if source_ip is not None:
            pulumi.set(__self__, "source_ip", source_ip)
        if source_ip_variable is not None:
            pulumi.set(__self__, "source_ip_variable", source_ip_variable)
        if source_vpn is not None:
            pulumi.set(__self__, "source_vpn", source_vpn)
        if source_vpn_variable is not None:
            pulumi.set(__self__, "source_vpn_variable", source_vpn_variable)
        if translate_ip is not None:
            pulumi.set(__self__, "translate_ip", translate_ip)
        if translate_ip_variable is not None:
            pulumi.set(__self__, "translate_ip_variable", translate_ip_variable)

    @_builtins.property
    @pulumi.getter
    def direction(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Direction of static NAT translation
          - Choices: `inside`, `outside`
          - Default value: `inside`
        """
        return pulumi.get(self, "direction")

    @direction.setter
    def direction(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "direction", value)

    @_builtins.property
    @pulumi.getter(name="sourceIp")
    def source_ip(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Source IP address to be translated
        """
        return pulumi.get(self, "source_ip")

    @source_ip.setter
    def source_ip(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "source_ip", value)

    @_builtins.property
    @pulumi.getter(name="sourceIpVariable")
    def source_ip_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "source_ip_variable")

    @source_ip_variable.setter
    def source_ip_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "source_ip_variable", value)

    @_builtins.property
    @pulumi.getter(name="sourceVpn")
    def source_vpn(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        Source VPN ID
          - Range: `0`-`65530`
          - Default value: `0`
        """
        return pulumi.get(self, "source_vpn")

    @source_vpn.setter
    def source_vpn(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "source_vpn", value)

    @_builtins.property
    @pulumi.getter(name="sourceVpnVariable")
    def source_vpn_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "source_vpn_variable")

    @source_vpn_variable.setter
    def source_vpn_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "source_vpn_variable", value)

    @_builtins.property
    @pulumi.getter(name="translateIp")
    def translate_ip(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Statically translated source IP address
        """
        return pulumi.get(self, "translate_ip")

    @translate_ip.setter
    def translate_ip(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "translate_ip", value)

    @_builtins.property
    @pulumi.getter(name="translateIpVariable")
    def translate_ip_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "translate_ip_variable")

    @translate_ip_variable.setter
    def translate_ip_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "translate_ip_variable", value)


if not MYPY:
    class ServiceLanVpnInterfaceSviFeatureArpArgsDict(TypedDict):
        ip_address: NotRequired[pulumi.Input[_builtins.str]]
        """
        IP Address
        """
        ip_address_variable: NotRequired[pulumi.Input[_builtins.str]]
        """
        Variable name
        """
        mac_address: NotRequired[pulumi.Input[_builtins.str]]
        """
        MAC address
        """
        mac_address_variable: NotRequired[pulumi.Input[_builtins.str]]
        """
        Variable name
        """
elif False:
    ServiceLanVpnInterfaceSviFeatureArpArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ServiceLanVpnInterfaceSviFeatureArpArgs:
    def __init__(__self__, *,
                 ip_address: Optional[pulumi.Input[_builtins.str]] = None,
                 ip_address_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 mac_address: Optional[pulumi.Input[_builtins.str]] = None,
                 mac_address_variable: Optional[pulumi.Input[_builtins.str]] = None):
        """
        :param pulumi.Input[_builtins.str] ip_address: IP Address
        :param pulumi.Input[_builtins.str] ip_address_variable: Variable name
        :param pulumi.Input[_builtins.str] mac_address: MAC address
        :param pulumi.Input[_builtins.str] mac_address_variable: Variable name
        """
        if ip_address is not None:
            pulumi.set(__self__, "ip_address", ip_address)
        if ip_address_variable is not None:
            pulumi.set(__self__, "ip_address_variable", ip_address_variable)
        if mac_address is not None:
            pulumi.set(__self__, "mac_address", mac_address)
        if mac_address_variable is not None:
            pulumi.set(__self__, "mac_address_variable", mac_address_variable)

    @_builtins.property
    @pulumi.getter(name="ipAddress")
    def ip_address(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        IP Address
        """
        return pulumi.get(self, "ip_address")

    @ip_address.setter
    def ip_address(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "ip_address", value)

    @_builtins.property
    @pulumi.getter(name="ipAddressVariable")
    def ip_address_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "ip_address_variable")

    @ip_address_variable.setter
    def ip_address_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "ip_address_variable", value)

    @_builtins.property
    @pulumi.getter(name="macAddress")
    def mac_address(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        MAC address
        """
        return pulumi.get(self, "mac_address")

    @mac_address.setter
    def mac_address(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "mac_address", value)

    @_builtins.property
    @pulumi.getter(name="macAddressVariable")
    def mac_address_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "mac_address_variable")

    @mac_address_variable.setter
    def mac_address_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "mac_address_variable", value)


if not MYPY:
    class ServiceLanVpnInterfaceSviFeatureIpv4SecondaryAddressArgsDict(TypedDict):
        address: NotRequired[pulumi.Input[_builtins.str]]
        """
        IpV4 Address
        """
        address_variable: NotRequired[pulumi.Input[_builtins.str]]
        """
        Variable name
        """
        ipv4_subnet_mask: NotRequired[pulumi.Input[_builtins.str]]
        """
        Subnet Mask
          - Choices: `255.255.255.255`, `255.255.255.254`, `255.255.255.252`, `255.255.255.248`, `255.255.255.240`, `255.255.255.224`, `255.255.255.192`, `255.255.255.128`, `255.255.255.0`, `255.255.254.0`, `255.255.252.0`, `255.255.248.0`, `255.255.240.0`, `255.255.224.0`, `255.255.192.0`, `255.255.128.0`, `255.255.0.0`, `255.254.0.0`, `255.252.0.0`, `255.240.0.0`, `255.224.0.0`, `255.192.0.0`, `255.128.0.0`, `255.0.0.0`, `254.0.0.0`, `252.0.0.0`, `248.0.0.0`, `240.0.0.0`, `224.0.0.0`, `192.0.0.0`, `128.0.0.0`, `0.0.0.0`
        """
        ipv4_subnet_mask_variable: NotRequired[pulumi.Input[_builtins.str]]
        """
        Variable name
        """
elif False:
    ServiceLanVpnInterfaceSviFeatureIpv4SecondaryAddressArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ServiceLanVpnInterfaceSviFeatureIpv4SecondaryAddressArgs:
    def __init__(__self__, *,
                 address: Optional[pulumi.Input[_builtins.str]] = None,
                 address_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 ipv4_subnet_mask: Optional[pulumi.Input[_builtins.str]] = None,
                 ipv4_subnet_mask_variable: Optional[pulumi.Input[_builtins.str]] = None):
        """
        :param pulumi.Input[_builtins.str] address: IpV4 Address
        :param pulumi.Input[_builtins.str] address_variable: Variable name
        :param pulumi.Input[_builtins.str] ipv4_subnet_mask: Subnet Mask
                 - Choices: `255.255.255.255`, `255.255.255.254`, `255.255.255.252`, `255.255.255.248`, `255.255.255.240`, `255.255.255.224`, `255.255.255.192`, `255.255.255.128`, `255.255.255.0`, `255.255.254.0`, `255.255.252.0`, `255.255.248.0`, `255.255.240.0`, `255.255.224.0`, `255.255.192.0`, `255.255.128.0`, `255.255.0.0`, `255.254.0.0`, `255.252.0.0`, `255.240.0.0`, `255.224.0.0`, `255.192.0.0`, `255.128.0.0`, `255.0.0.0`, `254.0.0.0`, `252.0.0.0`, `248.0.0.0`, `240.0.0.0`, `224.0.0.0`, `192.0.0.0`, `128.0.0.0`, `0.0.0.0`
        :param pulumi.Input[_builtins.str] ipv4_subnet_mask_variable: Variable name
        """
        if address is not None:
            pulumi.set(__self__, "address", address)
        if address_variable is not None:
            pulumi.set(__self__, "address_variable", address_variable)
        if ipv4_subnet_mask is not None:
            pulumi.set(__self__, "ipv4_subnet_mask", ipv4_subnet_mask)
        if ipv4_subnet_mask_variable is not None:
            pulumi.set(__self__, "ipv4_subnet_mask_variable", ipv4_subnet_mask_variable)

    @_builtins.property
    @pulumi.getter
    def address(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        IpV4 Address
        """
        return pulumi.get(self, "address")

    @address.setter
    def address(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "address", value)

    @_builtins.property
    @pulumi.getter(name="addressVariable")
    def address_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "address_variable")

    @address_variable.setter
    def address_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "address_variable", value)

    @_builtins.property
    @pulumi.getter(name="ipv4SubnetMask")
    def ipv4_subnet_mask(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Subnet Mask
          - Choices: `255.255.255.255`, `255.255.255.254`, `255.255.255.252`, `255.255.255.248`, `255.255.255.240`, `255.255.255.224`, `255.255.255.192`, `255.255.255.128`, `255.255.255.0`, `255.255.254.0`, `255.255.252.0`, `255.255.248.0`, `255.255.240.0`, `255.255.224.0`, `255.255.192.0`, `255.255.128.0`, `255.255.0.0`, `255.254.0.0`, `255.252.0.0`, `255.240.0.0`, `255.224.0.0`, `255.192.0.0`, `255.128.0.0`, `255.0.0.0`, `254.0.0.0`, `252.0.0.0`, `248.0.0.0`, `240.0.0.0`, `224.0.0.0`, `192.0.0.0`, `128.0.0.0`, `0.0.0.0`
        """
        return pulumi.get(self, "ipv4_subnet_mask")

    @ipv4_subnet_mask.setter
    def ipv4_subnet_mask(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "ipv4_subnet_mask", value)

    @_builtins.property
    @pulumi.getter(name="ipv4SubnetMaskVariable")
    def ipv4_subnet_mask_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "ipv4_subnet_mask_variable")

    @ipv4_subnet_mask_variable.setter
    def ipv4_subnet_mask_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "ipv4_subnet_mask_variable", value)


if not MYPY:
    class ServiceLanVpnInterfaceSviFeatureIpv4VrrpArgsDict(TypedDict):
        address: NotRequired[pulumi.Input[_builtins.str]]
        """
        Assign IPV4 Address
        """
        address_variable: NotRequired[pulumi.Input[_builtins.str]]
        """
        Variable name
        """
        group_id: NotRequired[pulumi.Input[_builtins.int]]
        """
        Group ID
          - Range: `1`-`255`
        """
        group_id_variable: NotRequired[pulumi.Input[_builtins.str]]
        """
        Variable name
        """
        prefix_list: NotRequired[pulumi.Input[_builtins.str]]
        """
        Track Prefix List
        """
        prefix_list_variable: NotRequired[pulumi.Input[_builtins.str]]
        """
        Variable name
        """
        priority: NotRequired[pulumi.Input[_builtins.int]]
        """
        Set priority
          - Range: `1`-`254`
          - Default value: `100`
        """
        priority_variable: NotRequired[pulumi.Input[_builtins.str]]
        """
        Variable name
        """
        secondary_addresses: NotRequired[pulumi.Input[Sequence[pulumi.Input['ServiceLanVpnInterfaceSviFeatureIpv4VrrpSecondaryAddressArgsDict']]]]
        """
        VRRP Secondary IPV4 address
        """
        timer: NotRequired[pulumi.Input[_builtins.int]]
        """
        Timer interval for successive advertisements, in milliseconds
          - Range: `100`-`40950`
          - Default value: `1000`
        """
        timer_variable: NotRequired[pulumi.Input[_builtins.str]]
        """
        Variable name
        """
        tloc_prefix_change: NotRequired[pulumi.Input[_builtins.bool]]
        """
        change TLOC preference
          - Default value: `false`
        """
        tloc_prefix_change_value: NotRequired[pulumi.Input[_builtins.int]]
        """
        Set tloc preference change value
          - Range: `1`-`4294967295`
        """
        tloc_prefix_change_value_variable: NotRequired[pulumi.Input[_builtins.str]]
        """
        Variable name
        """
        track_omp: NotRequired[pulumi.Input[_builtins.bool]]
        """
        Track OMP status
          - Default value: `false`
        """
        track_omp_variable: NotRequired[pulumi.Input[_builtins.str]]
        """
        Variable name
        """
        tracking_objects: NotRequired[pulumi.Input[Sequence[pulumi.Input['ServiceLanVpnInterfaceSviFeatureIpv4VrrpTrackingObjectArgsDict']]]]
        """
        tracking object for VRRP configuration
        """
elif False:
    ServiceLanVpnInterfaceSviFeatureIpv4VrrpArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ServiceLanVpnInterfaceSviFeatureIpv4VrrpArgs:
    def __init__(__self__, *,
                 address: Optional[pulumi.Input[_builtins.str]] = None,
                 address_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 group_id: Optional[pulumi.Input[_builtins.int]] = None,
                 group_id_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 prefix_list: Optional[pulumi.Input[_builtins.str]] = None,
                 prefix_list_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 priority: Optional[pulumi.Input[_builtins.int]] = None,
                 priority_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 secondary_addresses: Optional[pulumi.Input[Sequence[pulumi.Input['ServiceLanVpnInterfaceSviFeatureIpv4VrrpSecondaryAddressArgs']]]] = None,
                 timer: Optional[pulumi.Input[_builtins.int]] = None,
                 timer_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 tloc_prefix_change: Optional[pulumi.Input[_builtins.bool]] = None,
                 tloc_prefix_change_value: Optional[pulumi.Input[_builtins.int]] = None,
                 tloc_prefix_change_value_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 track_omp: Optional[pulumi.Input[_builtins.bool]] = None,
                 track_omp_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 tracking_objects: Optional[pulumi.Input[Sequence[pulumi.Input['ServiceLanVpnInterfaceSviFeatureIpv4VrrpTrackingObjectArgs']]]] = None):
        """
        :param pulumi.Input[_builtins.str] address: Assign IPV4 Address
        :param pulumi.Input[_builtins.str] address_variable: Variable name
        :param pulumi.Input[_builtins.int] group_id: Group ID
                 - Range: `1`-`255`
        :param pulumi.Input[_builtins.str] group_id_variable: Variable name
        :param pulumi.Input[_builtins.str] prefix_list: Track Prefix List
        :param pulumi.Input[_builtins.str] prefix_list_variable: Variable name
        :param pulumi.Input[_builtins.int] priority: Set priority
                 - Range: `1`-`254`
                 - Default value: `100`
        :param pulumi.Input[_builtins.str] priority_variable: Variable name
        :param pulumi.Input[Sequence[pulumi.Input['ServiceLanVpnInterfaceSviFeatureIpv4VrrpSecondaryAddressArgs']]] secondary_addresses: VRRP Secondary IPV4 address
        :param pulumi.Input[_builtins.int] timer: Timer interval for successive advertisements, in milliseconds
                 - Range: `100`-`40950`
                 - Default value: `1000`
        :param pulumi.Input[_builtins.str] timer_variable: Variable name
        :param pulumi.Input[_builtins.bool] tloc_prefix_change: change TLOC preference
                 - Default value: `false`
        :param pulumi.Input[_builtins.int] tloc_prefix_change_value: Set tloc preference change value
                 - Range: `1`-`4294967295`
        :param pulumi.Input[_builtins.str] tloc_prefix_change_value_variable: Variable name
        :param pulumi.Input[_builtins.bool] track_omp: Track OMP status
                 - Default value: `false`
        :param pulumi.Input[_builtins.str] track_omp_variable: Variable name
        :param pulumi.Input[Sequence[pulumi.Input['ServiceLanVpnInterfaceSviFeatureIpv4VrrpTrackingObjectArgs']]] tracking_objects: tracking object for VRRP configuration
        """
        if address is not None:
            pulumi.set(__self__, "address", address)
        if address_variable is not None:
            pulumi.set(__self__, "address_variable", address_variable)
        if group_id is not None:
            pulumi.set(__self__, "group_id", group_id)
        if group_id_variable is not None:
            pulumi.set(__self__, "group_id_variable", group_id_variable)
        if prefix_list is not None:
            pulumi.set(__self__, "prefix_list", prefix_list)
        if prefix_list_variable is not None:
            pulumi.set(__self__, "prefix_list_variable", prefix_list_variable)
        if priority is not None:
            pulumi.set(__self__, "priority", priority)
        if priority_variable is not None:
            pulumi.set(__self__, "priority_variable", priority_variable)
        if secondary_addresses is not None:
            pulumi.set(__self__, "secondary_addresses", secondary_addresses)
        if timer is not None:
            pulumi.set(__self__, "timer", timer)
        if timer_variable is not None:
            pulumi.set(__self__, "timer_variable", timer_variable)
        if tloc_prefix_change is not None:
            pulumi.set(__self__, "tloc_prefix_change", tloc_prefix_change)
        if tloc_prefix_change_value is not None:
            pulumi.set(__self__, "tloc_prefix_change_value", tloc_prefix_change_value)
        if tloc_prefix_change_value_variable is not None:
            pulumi.set(__self__, "tloc_prefix_change_value_variable", tloc_prefix_change_value_variable)
        if track_omp is not None:
            pulumi.set(__self__, "track_omp", track_omp)
        if track_omp_variable is not None:
            pulumi.set(__self__, "track_omp_variable", track_omp_variable)
        if tracking_objects is not None:
            pulumi.set(__self__, "tracking_objects", tracking_objects)

    @_builtins.property
    @pulumi.getter
    def address(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Assign IPV4 Address
        """
        return pulumi.get(self, "address")

    @address.setter
    def address(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "address", value)

    @_builtins.property
    @pulumi.getter(name="addressVariable")
    def address_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "address_variable")

    @address_variable.setter
    def address_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "address_variable", value)

    @_builtins.property
    @pulumi.getter(name="groupId")
    def group_id(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        Group ID
          - Range: `1`-`255`
        """
        return pulumi.get(self, "group_id")

    @group_id.setter
    def group_id(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "group_id", value)

    @_builtins.property
    @pulumi.getter(name="groupIdVariable")
    def group_id_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "group_id_variable")

    @group_id_variable.setter
    def group_id_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "group_id_variable", value)

    @_builtins.property
    @pulumi.getter(name="prefixList")
    def prefix_list(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Track Prefix List
        """
        return pulumi.get(self, "prefix_list")

    @prefix_list.setter
    def prefix_list(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "prefix_list", value)

    @_builtins.property
    @pulumi.getter(name="prefixListVariable")
    def prefix_list_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "prefix_list_variable")

    @prefix_list_variable.setter
    def prefix_list_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "prefix_list_variable", value)

    @_builtins.property
    @pulumi.getter
    def priority(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        Set priority
          - Range: `1`-`254`
          - Default value: `100`
        """
        return pulumi.get(self, "priority")

    @priority.setter
    def priority(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "priority", value)

    @_builtins.property
    @pulumi.getter(name="priorityVariable")
    def priority_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "priority_variable")

    @priority_variable.setter
    def priority_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "priority_variable", value)

    @_builtins.property
    @pulumi.getter(name="secondaryAddresses")
    def secondary_addresses(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ServiceLanVpnInterfaceSviFeatureIpv4VrrpSecondaryAddressArgs']]]]:
        """
        VRRP Secondary IPV4 address
        """
        return pulumi.get(self, "secondary_addresses")

    @secondary_addresses.setter
    def secondary_addresses(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ServiceLanVpnInterfaceSviFeatureIpv4VrrpSecondaryAddressArgs']]]]):
        pulumi.set(self, "secondary_addresses", value)

    @_builtins.property
    @pulumi.getter
    def timer(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        Timer interval for successive advertisements, in milliseconds
          - Range: `100`-`40950`
          - Default value: `1000`
        """
        return pulumi.get(self, "timer")

    @timer.setter
    def timer(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "timer", value)

    @_builtins.property
    @pulumi.getter(name="timerVariable")
    def timer_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "timer_variable")

    @timer_variable.setter
    def timer_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "timer_variable", value)

    @_builtins.property
    @pulumi.getter(name="tlocPrefixChange")
    def tloc_prefix_change(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        change TLOC preference
          - Default value: `false`
        """
        return pulumi.get(self, "tloc_prefix_change")

    @tloc_prefix_change.setter
    def tloc_prefix_change(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "tloc_prefix_change", value)

    @_builtins.property
    @pulumi.getter(name="tlocPrefixChangeValue")
    def tloc_prefix_change_value(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        Set tloc preference change value
          - Range: `1`-`4294967295`
        """
        return pulumi.get(self, "tloc_prefix_change_value")

    @tloc_prefix_change_value.setter
    def tloc_prefix_change_value(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "tloc_prefix_change_value", value)

    @_builtins.property
    @pulumi.getter(name="tlocPrefixChangeValueVariable")
    def tloc_prefix_change_value_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "tloc_prefix_change_value_variable")

    @tloc_prefix_change_value_variable.setter
    def tloc_prefix_change_value_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "tloc_prefix_change_value_variable", value)

    @_builtins.property
    @pulumi.getter(name="trackOmp")
    def track_omp(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Track OMP status
          - Default value: `false`
        """
        return pulumi.get(self, "track_omp")

    @track_omp.setter
    def track_omp(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "track_omp", value)

    @_builtins.property
    @pulumi.getter(name="trackOmpVariable")
    def track_omp_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "track_omp_variable")

    @track_omp_variable.setter
    def track_omp_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "track_omp_variable", value)

    @_builtins.property
    @pulumi.getter(name="trackingObjects")
    def tracking_objects(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ServiceLanVpnInterfaceSviFeatureIpv4VrrpTrackingObjectArgs']]]]:
        """
        tracking object for VRRP configuration
        """
        return pulumi.get(self, "tracking_objects")

    @tracking_objects.setter
    def tracking_objects(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ServiceLanVpnInterfaceSviFeatureIpv4VrrpTrackingObjectArgs']]]]):
        pulumi.set(self, "tracking_objects", value)


if not MYPY:
    class ServiceLanVpnInterfaceSviFeatureIpv4VrrpSecondaryAddressArgsDict(TypedDict):
        address: NotRequired[pulumi.Input[_builtins.str]]
        """
        VRRP Secondary IPV4 address
        """
        address_variable: NotRequired[pulumi.Input[_builtins.str]]
        """
        Variable name
        """
elif False:
    ServiceLanVpnInterfaceSviFeatureIpv4VrrpSecondaryAddressArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ServiceLanVpnInterfaceSviFeatureIpv4VrrpSecondaryAddressArgs:
    def __init__(__self__, *,
                 address: Optional[pulumi.Input[_builtins.str]] = None,
                 address_variable: Optional[pulumi.Input[_builtins.str]] = None):
        """
        :param pulumi.Input[_builtins.str] address: VRRP Secondary IPV4 address
        :param pulumi.Input[_builtins.str] address_variable: Variable name
        """
        if address is not None:
            pulumi.set(__self__, "address", address)
        if address_variable is not None:
            pulumi.set(__self__, "address_variable", address_variable)

    @_builtins.property
    @pulumi.getter
    def address(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        VRRP Secondary IPV4 address
        """
        return pulumi.get(self, "address")

    @address.setter
    def address(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "address", value)

    @_builtins.property
    @pulumi.getter(name="addressVariable")
    def address_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "address_variable")

    @address_variable.setter
    def address_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "address_variable", value)


if not MYPY:
    class ServiceLanVpnInterfaceSviFeatureIpv4VrrpTrackingObjectArgsDict(TypedDict):
        decrement_value: NotRequired[pulumi.Input[_builtins.int]]
        """
        Decrement Value for VRRP priority
          - Range: `1`-`255`
        """
        decrement_value_variable: NotRequired[pulumi.Input[_builtins.str]]
        """
        Variable name
        """
        track_action: NotRequired[pulumi.Input[_builtins.str]]
        """
        Track Action
          - Choices: `decrement`, `shutdown`
        """
        track_action_variable: NotRequired[pulumi.Input[_builtins.str]]
        """
        Variable name
        """
        tracker_id: NotRequired[pulumi.Input[_builtins.str]]
elif False:
    ServiceLanVpnInterfaceSviFeatureIpv4VrrpTrackingObjectArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ServiceLanVpnInterfaceSviFeatureIpv4VrrpTrackingObjectArgs:
    def __init__(__self__, *,
                 decrement_value: Optional[pulumi.Input[_builtins.int]] = None,
                 decrement_value_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 track_action: Optional[pulumi.Input[_builtins.str]] = None,
                 track_action_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 tracker_id: Optional[pulumi.Input[_builtins.str]] = None):
        """
        :param pulumi.Input[_builtins.int] decrement_value: Decrement Value for VRRP priority
                 - Range: `1`-`255`
        :param pulumi.Input[_builtins.str] decrement_value_variable: Variable name
        :param pulumi.Input[_builtins.str] track_action: Track Action
                 - Choices: `decrement`, `shutdown`
        :param pulumi.Input[_builtins.str] track_action_variable: Variable name
        """
        if decrement_value is not None:
            pulumi.set(__self__, "decrement_value", decrement_value)
        if decrement_value_variable is not None:
            pulumi.set(__self__, "decrement_value_variable", decrement_value_variable)
        if track_action is not None:
            pulumi.set(__self__, "track_action", track_action)
        if track_action_variable is not None:
            pulumi.set(__self__, "track_action_variable", track_action_variable)
        if tracker_id is not None:
            pulumi.set(__self__, "tracker_id", tracker_id)

    @_builtins.property
    @pulumi.getter(name="decrementValue")
    def decrement_value(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        Decrement Value for VRRP priority
          - Range: `1`-`255`
        """
        return pulumi.get(self, "decrement_value")

    @decrement_value.setter
    def decrement_value(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "decrement_value", value)

    @_builtins.property
    @pulumi.getter(name="decrementValueVariable")
    def decrement_value_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "decrement_value_variable")

    @decrement_value_variable.setter
    def decrement_value_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "decrement_value_variable", value)

    @_builtins.property
    @pulumi.getter(name="trackAction")
    def track_action(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Track Action
          - Choices: `decrement`, `shutdown`
        """
        return pulumi.get(self, "track_action")

    @track_action.setter
    def track_action(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "track_action", value)

    @_builtins.property
    @pulumi.getter(name="trackActionVariable")
    def track_action_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "track_action_variable")

    @track_action_variable.setter
    def track_action_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "track_action_variable", value)

    @_builtins.property
    @pulumi.getter(name="trackerId")
    def tracker_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "tracker_id")

    @tracker_id.setter
    def tracker_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "tracker_id", value)


if not MYPY:
    class ServiceLanVpnInterfaceSviFeatureIpv6DhcpHelperArgsDict(TypedDict):
        address: NotRequired[pulumi.Input[_builtins.str]]
        """
        DHCPv6 Helper address
        """
        address_variable: NotRequired[pulumi.Input[_builtins.str]]
        """
        Variable name
        """
        vpn: NotRequired[pulumi.Input[_builtins.int]]
        """
        DHCPv6 Helper VPN
          - Range: `1`-`65536`
        """
        vpn_variable: NotRequired[pulumi.Input[_builtins.str]]
        """
        Variable name
        """
elif False:
    ServiceLanVpnInterfaceSviFeatureIpv6DhcpHelperArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ServiceLanVpnInterfaceSviFeatureIpv6DhcpHelperArgs:
    def __init__(__self__, *,
                 address: Optional[pulumi.Input[_builtins.str]] = None,
                 address_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 vpn: Optional[pulumi.Input[_builtins.int]] = None,
                 vpn_variable: Optional[pulumi.Input[_builtins.str]] = None):
        """
        :param pulumi.Input[_builtins.str] address: DHCPv6 Helper address
        :param pulumi.Input[_builtins.str] address_variable: Variable name
        :param pulumi.Input[_builtins.int] vpn: DHCPv6 Helper VPN
                 - Range: `1`-`65536`
        :param pulumi.Input[_builtins.str] vpn_variable: Variable name
        """
        if address is not None:
            pulumi.set(__self__, "address", address)
        if address_variable is not None:
            pulumi.set(__self__, "address_variable", address_variable)
        if vpn is not None:
            pulumi.set(__self__, "vpn", vpn)
        if vpn_variable is not None:
            pulumi.set(__self__, "vpn_variable", vpn_variable)

    @_builtins.property
    @pulumi.getter
    def address(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        DHCPv6 Helper address
        """
        return pulumi.get(self, "address")

    @address.setter
    def address(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "address", value)

    @_builtins.property
    @pulumi.getter(name="addressVariable")
    def address_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "address_variable")

    @address_variable.setter
    def address_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "address_variable", value)

    @_builtins.property
    @pulumi.getter
    def vpn(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        DHCPv6 Helper VPN
          - Range: `1`-`65536`
        """
        return pulumi.get(self, "vpn")

    @vpn.setter
    def vpn(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "vpn", value)

    @_builtins.property
    @pulumi.getter(name="vpnVariable")
    def vpn_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "vpn_variable")

    @vpn_variable.setter
    def vpn_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "vpn_variable", value)


if not MYPY:
    class ServiceLanVpnInterfaceSviFeatureIpv6SecondaryAddressArgsDict(TypedDict):
        address: NotRequired[pulumi.Input[_builtins.str]]
        """
        IPv6 Address
        """
        address_variable: NotRequired[pulumi.Input[_builtins.str]]
        """
        Variable name
        """
elif False:
    ServiceLanVpnInterfaceSviFeatureIpv6SecondaryAddressArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ServiceLanVpnInterfaceSviFeatureIpv6SecondaryAddressArgs:
    def __init__(__self__, *,
                 address: Optional[pulumi.Input[_builtins.str]] = None,
                 address_variable: Optional[pulumi.Input[_builtins.str]] = None):
        """
        :param pulumi.Input[_builtins.str] address: IPv6 Address
        :param pulumi.Input[_builtins.str] address_variable: Variable name
        """
        if address is not None:
            pulumi.set(__self__, "address", address)
        if address_variable is not None:
            pulumi.set(__self__, "address_variable", address_variable)

    @_builtins.property
    @pulumi.getter
    def address(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        IPv6 Address
        """
        return pulumi.get(self, "address")

    @address.setter
    def address(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "address", value)

    @_builtins.property
    @pulumi.getter(name="addressVariable")
    def address_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "address_variable")

    @address_variable.setter
    def address_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "address_variable", value)


if not MYPY:
    class ServiceLanVpnInterfaceSviFeatureIpv6VrrpArgsDict(TypedDict):
        addresses: NotRequired[pulumi.Input[Sequence[pulumi.Input['ServiceLanVpnInterfaceSviFeatureIpv6VrrpAddressArgsDict']]]]
        """
        IPv6 VRRP
        """
        group_id: NotRequired[pulumi.Input[_builtins.int]]
        """
        Group ID
          - Range: `1`-`255`
        """
        group_id_variable: NotRequired[pulumi.Input[_builtins.str]]
        """
        Variable name
        """
        priority: NotRequired[pulumi.Input[_builtins.int]]
        """
        Set priority
          - Range: `1`-`254`
          - Default value: `100`
        """
        priority_variable: NotRequired[pulumi.Input[_builtins.str]]
        """
        Variable name
        """
        secondary_addresses: NotRequired[pulumi.Input[Sequence[pulumi.Input['ServiceLanVpnInterfaceSviFeatureIpv6VrrpSecondaryAddressArgsDict']]]]
        """
        IPv6 Secondary IP address
        """
        timer: NotRequired[pulumi.Input[_builtins.int]]
        """
        Timer interval for successive advertisements, in milliseconds
          - Range: `100`-`40950`
          - Default value: `1000`
        """
        timer_variable: NotRequired[pulumi.Input[_builtins.str]]
        """
        Variable name
        """
        track_omp: NotRequired[pulumi.Input[_builtins.bool]]
        """
        Track OMP status
          - Default value: `false`
        """
        track_omp_variable: NotRequired[pulumi.Input[_builtins.str]]
        """
        Variable name
        """
        track_prefix_list: NotRequired[pulumi.Input[_builtins.str]]
        """
        Track Prefix List
        """
        track_prefix_list_variable: NotRequired[pulumi.Input[_builtins.str]]
        """
        Variable name
        """
elif False:
    ServiceLanVpnInterfaceSviFeatureIpv6VrrpArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ServiceLanVpnInterfaceSviFeatureIpv6VrrpArgs:
    def __init__(__self__, *,
                 addresses: Optional[pulumi.Input[Sequence[pulumi.Input['ServiceLanVpnInterfaceSviFeatureIpv6VrrpAddressArgs']]]] = None,
                 group_id: Optional[pulumi.Input[_builtins.int]] = None,
                 group_id_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 priority: Optional[pulumi.Input[_builtins.int]] = None,
                 priority_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 secondary_addresses: Optional[pulumi.Input[Sequence[pulumi.Input['ServiceLanVpnInterfaceSviFeatureIpv6VrrpSecondaryAddressArgs']]]] = None,
                 timer: Optional[pulumi.Input[_builtins.int]] = None,
                 timer_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 track_omp: Optional[pulumi.Input[_builtins.bool]] = None,
                 track_omp_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 track_prefix_list: Optional[pulumi.Input[_builtins.str]] = None,
                 track_prefix_list_variable: Optional[pulumi.Input[_builtins.str]] = None):
        """
        :param pulumi.Input[Sequence[pulumi.Input['ServiceLanVpnInterfaceSviFeatureIpv6VrrpAddressArgs']]] addresses: IPv6 VRRP
        :param pulumi.Input[_builtins.int] group_id: Group ID
                 - Range: `1`-`255`
        :param pulumi.Input[_builtins.str] group_id_variable: Variable name
        :param pulumi.Input[_builtins.int] priority: Set priority
                 - Range: `1`-`254`
                 - Default value: `100`
        :param pulumi.Input[_builtins.str] priority_variable: Variable name
        :param pulumi.Input[Sequence[pulumi.Input['ServiceLanVpnInterfaceSviFeatureIpv6VrrpSecondaryAddressArgs']]] secondary_addresses: IPv6 Secondary IP address
        :param pulumi.Input[_builtins.int] timer: Timer interval for successive advertisements, in milliseconds
                 - Range: `100`-`40950`
                 - Default value: `1000`
        :param pulumi.Input[_builtins.str] timer_variable: Variable name
        :param pulumi.Input[_builtins.bool] track_omp: Track OMP status
                 - Default value: `false`
        :param pulumi.Input[_builtins.str] track_omp_variable: Variable name
        :param pulumi.Input[_builtins.str] track_prefix_list: Track Prefix List
        :param pulumi.Input[_builtins.str] track_prefix_list_variable: Variable name
        """
        if addresses is not None:
            pulumi.set(__self__, "addresses", addresses)
        if group_id is not None:
            pulumi.set(__self__, "group_id", group_id)
        if group_id_variable is not None:
            pulumi.set(__self__, "group_id_variable", group_id_variable)
        if priority is not None:
            pulumi.set(__self__, "priority", priority)
        if priority_variable is not None:
            pulumi.set(__self__, "priority_variable", priority_variable)
        if secondary_addresses is not None:
            pulumi.set(__self__, "secondary_addresses", secondary_addresses)
        if timer is not None:
            pulumi.set(__self__, "timer", timer)
        if timer_variable is not None:
            pulumi.set(__self__, "timer_variable", timer_variable)
        if track_omp is not None:
            pulumi.set(__self__, "track_omp", track_omp)
        if track_omp_variable is not None:
            pulumi.set(__self__, "track_omp_variable", track_omp_variable)
        if track_prefix_list is not None:
            pulumi.set(__self__, "track_prefix_list", track_prefix_list)
        if track_prefix_list_variable is not None:
            pulumi.set(__self__, "track_prefix_list_variable", track_prefix_list_variable)

    @_builtins.property
    @pulumi.getter
    def addresses(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ServiceLanVpnInterfaceSviFeatureIpv6VrrpAddressArgs']]]]:
        """
        IPv6 VRRP
        """
        return pulumi.get(self, "addresses")

    @addresses.setter
    def addresses(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ServiceLanVpnInterfaceSviFeatureIpv6VrrpAddressArgs']]]]):
        pulumi.set(self, "addresses", value)

    @_builtins.property
    @pulumi.getter(name="groupId")
    def group_id(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        Group ID
          - Range: `1`-`255`
        """
        return pulumi.get(self, "group_id")

    @group_id.setter
    def group_id(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "group_id", value)

    @_builtins.property
    @pulumi.getter(name="groupIdVariable")
    def group_id_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "group_id_variable")

    @group_id_variable.setter
    def group_id_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "group_id_variable", value)

    @_builtins.property
    @pulumi.getter
    def priority(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        Set priority
          - Range: `1`-`254`
          - Default value: `100`
        """
        return pulumi.get(self, "priority")

    @priority.setter
    def priority(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "priority", value)

    @_builtins.property
    @pulumi.getter(name="priorityVariable")
    def priority_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "priority_variable")

    @priority_variable.setter
    def priority_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "priority_variable", value)

    @_builtins.property
    @pulumi.getter(name="secondaryAddresses")
    def secondary_addresses(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ServiceLanVpnInterfaceSviFeatureIpv6VrrpSecondaryAddressArgs']]]]:
        """
        IPv6 Secondary IP address
        """
        return pulumi.get(self, "secondary_addresses")

    @secondary_addresses.setter
    def secondary_addresses(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ServiceLanVpnInterfaceSviFeatureIpv6VrrpSecondaryAddressArgs']]]]):
        pulumi.set(self, "secondary_addresses", value)

    @_builtins.property
    @pulumi.getter
    def timer(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        Timer interval for successive advertisements, in milliseconds
          - Range: `100`-`40950`
          - Default value: `1000`
        """
        return pulumi.get(self, "timer")

    @timer.setter
    def timer(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "timer", value)

    @_builtins.property
    @pulumi.getter(name="timerVariable")
    def timer_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "timer_variable")

    @timer_variable.setter
    def timer_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "timer_variable", value)

    @_builtins.property
    @pulumi.getter(name="trackOmp")
    def track_omp(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Track OMP status
          - Default value: `false`
        """
        return pulumi.get(self, "track_omp")

    @track_omp.setter
    def track_omp(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "track_omp", value)

    @_builtins.property
    @pulumi.getter(name="trackOmpVariable")
    def track_omp_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "track_omp_variable")

    @track_omp_variable.setter
    def track_omp_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "track_omp_variable", value)

    @_builtins.property
    @pulumi.getter(name="trackPrefixList")
    def track_prefix_list(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Track Prefix List
        """
        return pulumi.get(self, "track_prefix_list")

    @track_prefix_list.setter
    def track_prefix_list(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "track_prefix_list", value)

    @_builtins.property
    @pulumi.getter(name="trackPrefixListVariable")
    def track_prefix_list_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "track_prefix_list_variable")

    @track_prefix_list_variable.setter
    def track_prefix_list_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "track_prefix_list_variable", value)


if not MYPY:
    class ServiceLanVpnInterfaceSviFeatureIpv6VrrpAddressArgsDict(TypedDict):
        global_address: NotRequired[pulumi.Input[_builtins.str]]
        """
        Assign Global IPv6 Prefix
        """
        global_address_variable: NotRequired[pulumi.Input[_builtins.str]]
        """
        Variable name
        """
        link_local_address: NotRequired[pulumi.Input[_builtins.str]]
        """
        Use link-local IPv6 Address
        """
        link_local_address_variable: NotRequired[pulumi.Input[_builtins.str]]
        """
        Variable name
        """
elif False:
    ServiceLanVpnInterfaceSviFeatureIpv6VrrpAddressArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ServiceLanVpnInterfaceSviFeatureIpv6VrrpAddressArgs:
    def __init__(__self__, *,
                 global_address: Optional[pulumi.Input[_builtins.str]] = None,
                 global_address_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 link_local_address: Optional[pulumi.Input[_builtins.str]] = None,
                 link_local_address_variable: Optional[pulumi.Input[_builtins.str]] = None):
        """
        :param pulumi.Input[_builtins.str] global_address: Assign Global IPv6 Prefix
        :param pulumi.Input[_builtins.str] global_address_variable: Variable name
        :param pulumi.Input[_builtins.str] link_local_address: Use link-local IPv6 Address
        :param pulumi.Input[_builtins.str] link_local_address_variable: Variable name
        """
        if global_address is not None:
            pulumi.set(__self__, "global_address", global_address)
        if global_address_variable is not None:
            pulumi.set(__self__, "global_address_variable", global_address_variable)
        if link_local_address is not None:
            pulumi.set(__self__, "link_local_address", link_local_address)
        if link_local_address_variable is not None:
            pulumi.set(__self__, "link_local_address_variable", link_local_address_variable)

    @_builtins.property
    @pulumi.getter(name="globalAddress")
    def global_address(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Assign Global IPv6 Prefix
        """
        return pulumi.get(self, "global_address")

    @global_address.setter
    def global_address(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "global_address", value)

    @_builtins.property
    @pulumi.getter(name="globalAddressVariable")
    def global_address_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "global_address_variable")

    @global_address_variable.setter
    def global_address_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "global_address_variable", value)

    @_builtins.property
    @pulumi.getter(name="linkLocalAddress")
    def link_local_address(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Use link-local IPv6 Address
        """
        return pulumi.get(self, "link_local_address")

    @link_local_address.setter
    def link_local_address(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "link_local_address", value)

    @_builtins.property
    @pulumi.getter(name="linkLocalAddressVariable")
    def link_local_address_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "link_local_address_variable")

    @link_local_address_variable.setter
    def link_local_address_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "link_local_address_variable", value)


if not MYPY:
    class ServiceLanVpnInterfaceSviFeatureIpv6VrrpSecondaryAddressArgsDict(TypedDict):
        prefix: NotRequired[pulumi.Input[_builtins.str]]
        """
        IPv6 Secondary IP address
        """
        prefix_variable: NotRequired[pulumi.Input[_builtins.str]]
        """
        Variable name
        """
elif False:
    ServiceLanVpnInterfaceSviFeatureIpv6VrrpSecondaryAddressArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ServiceLanVpnInterfaceSviFeatureIpv6VrrpSecondaryAddressArgs:
    def __init__(__self__, *,
                 prefix: Optional[pulumi.Input[_builtins.str]] = None,
                 prefix_variable: Optional[pulumi.Input[_builtins.str]] = None):
        """
        :param pulumi.Input[_builtins.str] prefix: IPv6 Secondary IP address
        :param pulumi.Input[_builtins.str] prefix_variable: Variable name
        """
        if prefix is not None:
            pulumi.set(__self__, "prefix", prefix)
        if prefix_variable is not None:
            pulumi.set(__self__, "prefix_variable", prefix_variable)

    @_builtins.property
    @pulumi.getter
    def prefix(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        IPv6 Secondary IP address
        """
        return pulumi.get(self, "prefix")

    @prefix.setter
    def prefix(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "prefix", value)

    @_builtins.property
    @pulumi.getter(name="prefixVariable")
    def prefix_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "prefix_variable")

    @prefix_variable.setter
    def prefix_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "prefix_variable", value)


if not MYPY:
    class ServiceMulticastFeatureAutoRpAnnounceArgsDict(TypedDict):
        interface_name: NotRequired[pulumi.Input[_builtins.str]]
        """
        Set RP Announce Interface Name
        """
        interface_name_variable: NotRequired[pulumi.Input[_builtins.str]]
        """
        Variable name
        """
        scope: NotRequired[pulumi.Input[_builtins.int]]
        """
        Set RP Announce Scope
          - Range: `1`-`255`
        """
        scope_variable: NotRequired[pulumi.Input[_builtins.str]]
        """
        Variable name
        """
elif False:
    ServiceMulticastFeatureAutoRpAnnounceArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ServiceMulticastFeatureAutoRpAnnounceArgs:
    def __init__(__self__, *,
                 interface_name: Optional[pulumi.Input[_builtins.str]] = None,
                 interface_name_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 scope: Optional[pulumi.Input[_builtins.int]] = None,
                 scope_variable: Optional[pulumi.Input[_builtins.str]] = None):
        """
        :param pulumi.Input[_builtins.str] interface_name: Set RP Announce Interface Name
        :param pulumi.Input[_builtins.str] interface_name_variable: Variable name
        :param pulumi.Input[_builtins.int] scope: Set RP Announce Scope
                 - Range: `1`-`255`
        :param pulumi.Input[_builtins.str] scope_variable: Variable name
        """
        if interface_name is not None:
            pulumi.set(__self__, "interface_name", interface_name)
        if interface_name_variable is not None:
            pulumi.set(__self__, "interface_name_variable", interface_name_variable)
        if scope is not None:
            pulumi.set(__self__, "scope", scope)
        if scope_variable is not None:
            pulumi.set(__self__, "scope_variable", scope_variable)

    @_builtins.property
    @pulumi.getter(name="interfaceName")
    def interface_name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Set RP Announce Interface Name
        """
        return pulumi.get(self, "interface_name")

    @interface_name.setter
    def interface_name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "interface_name", value)

    @_builtins.property
    @pulumi.getter(name="interfaceNameVariable")
    def interface_name_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "interface_name_variable")

    @interface_name_variable.setter
    def interface_name_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "interface_name_variable", value)

    @_builtins.property
    @pulumi.getter
    def scope(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        Set RP Announce Scope
          - Range: `1`-`255`
        """
        return pulumi.get(self, "scope")

    @scope.setter
    def scope(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "scope", value)

    @_builtins.property
    @pulumi.getter(name="scopeVariable")
    def scope_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "scope_variable")

    @scope_variable.setter
    def scope_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "scope_variable", value)


if not MYPY:
    class ServiceMulticastFeatureAutoRpDiscoveryArgsDict(TypedDict):
        interface_name: NotRequired[pulumi.Input[_builtins.str]]
        """
        Set RP Discovery Interface Name
        """
        interface_name_variable: NotRequired[pulumi.Input[_builtins.str]]
        """
        Variable name
        """
        scope: NotRequired[pulumi.Input[_builtins.int]]
        """
        Set RP Discovery Scope
          - Range: `1`-`255`
        """
        scope_variable: NotRequired[pulumi.Input[_builtins.str]]
        """
        Variable name
        """
elif False:
    ServiceMulticastFeatureAutoRpDiscoveryArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ServiceMulticastFeatureAutoRpDiscoveryArgs:
    def __init__(__self__, *,
                 interface_name: Optional[pulumi.Input[_builtins.str]] = None,
                 interface_name_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 scope: Optional[pulumi.Input[_builtins.int]] = None,
                 scope_variable: Optional[pulumi.Input[_builtins.str]] = None):
        """
        :param pulumi.Input[_builtins.str] interface_name: Set RP Discovery Interface Name
        :param pulumi.Input[_builtins.str] interface_name_variable: Variable name
        :param pulumi.Input[_builtins.int] scope: Set RP Discovery Scope
                 - Range: `1`-`255`
        :param pulumi.Input[_builtins.str] scope_variable: Variable name
        """
        if interface_name is not None:
            pulumi.set(__self__, "interface_name", interface_name)
        if interface_name_variable is not None:
            pulumi.set(__self__, "interface_name_variable", interface_name_variable)
        if scope is not None:
            pulumi.set(__self__, "scope", scope)
        if scope_variable is not None:
            pulumi.set(__self__, "scope_variable", scope_variable)

    @_builtins.property
    @pulumi.getter(name="interfaceName")
    def interface_name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Set RP Discovery Interface Name
        """
        return pulumi.get(self, "interface_name")

    @interface_name.setter
    def interface_name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "interface_name", value)

    @_builtins.property
    @pulumi.getter(name="interfaceNameVariable")
    def interface_name_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "interface_name_variable")

    @interface_name_variable.setter
    def interface_name_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "interface_name_variable", value)

    @_builtins.property
    @pulumi.getter
    def scope(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        Set RP Discovery Scope
          - Range: `1`-`255`
        """
        return pulumi.get(self, "scope")

    @scope.setter
    def scope(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "scope", value)

    @_builtins.property
    @pulumi.getter(name="scopeVariable")
    def scope_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "scope_variable")

    @scope_variable.setter
    def scope_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "scope_variable", value)


if not MYPY:
    class ServiceMulticastFeatureIgmpInterfaceArgsDict(TypedDict):
        interface_name: NotRequired[pulumi.Input[_builtins.str]]
        """
        Set interface name
        """
        interface_name_variable: NotRequired[pulumi.Input[_builtins.str]]
        """
        Variable name
        """
        join_groups: NotRequired[pulumi.Input[Sequence[pulumi.Input['ServiceMulticastFeatureIgmpInterfaceJoinGroupArgsDict']]]]
        """
        Configure static joins
        """
        version: NotRequired[pulumi.Input[_builtins.int]]
        """
        igmp Version <1..3>
          - Range: `1`-`3`
          - Default value: `2`
        """
elif False:
    ServiceMulticastFeatureIgmpInterfaceArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ServiceMulticastFeatureIgmpInterfaceArgs:
    def __init__(__self__, *,
                 interface_name: Optional[pulumi.Input[_builtins.str]] = None,
                 interface_name_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 join_groups: Optional[pulumi.Input[Sequence[pulumi.Input['ServiceMulticastFeatureIgmpInterfaceJoinGroupArgs']]]] = None,
                 version: Optional[pulumi.Input[_builtins.int]] = None):
        """
        :param pulumi.Input[_builtins.str] interface_name: Set interface name
        :param pulumi.Input[_builtins.str] interface_name_variable: Variable name
        :param pulumi.Input[Sequence[pulumi.Input['ServiceMulticastFeatureIgmpInterfaceJoinGroupArgs']]] join_groups: Configure static joins
        :param pulumi.Input[_builtins.int] version: igmp Version <1..3>
                 - Range: `1`-`3`
                 - Default value: `2`
        """
        if interface_name is not None:
            pulumi.set(__self__, "interface_name", interface_name)
        if interface_name_variable is not None:
            pulumi.set(__self__, "interface_name_variable", interface_name_variable)
        if join_groups is not None:
            pulumi.set(__self__, "join_groups", join_groups)
        if version is not None:
            pulumi.set(__self__, "version", version)

    @_builtins.property
    @pulumi.getter(name="interfaceName")
    def interface_name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Set interface name
        """
        return pulumi.get(self, "interface_name")

    @interface_name.setter
    def interface_name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "interface_name", value)

    @_builtins.property
    @pulumi.getter(name="interfaceNameVariable")
    def interface_name_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "interface_name_variable")

    @interface_name_variable.setter
    def interface_name_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "interface_name_variable", value)

    @_builtins.property
    @pulumi.getter(name="joinGroups")
    def join_groups(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ServiceMulticastFeatureIgmpInterfaceJoinGroupArgs']]]]:
        """
        Configure static joins
        """
        return pulumi.get(self, "join_groups")

    @join_groups.setter
    def join_groups(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ServiceMulticastFeatureIgmpInterfaceJoinGroupArgs']]]]):
        pulumi.set(self, "join_groups", value)

    @_builtins.property
    @pulumi.getter
    def version(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        igmp Version <1..3>
          - Range: `1`-`3`
          - Default value: `2`
        """
        return pulumi.get(self, "version")

    @version.setter
    def version(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "version", value)


if not MYPY:
    class ServiceMulticastFeatureIgmpInterfaceJoinGroupArgsDict(TypedDict):
        group_address: NotRequired[pulumi.Input[_builtins.str]]
        """
        Set group address
        """
        group_address_variable: NotRequired[pulumi.Input[_builtins.str]]
        """
        Variable name
        """
        source_address: NotRequired[pulumi.Input[_builtins.str]]
        """
        Set source address
        """
        source_address_variable: NotRequired[pulumi.Input[_builtins.str]]
        """
        Variable name
        """
elif False:
    ServiceMulticastFeatureIgmpInterfaceJoinGroupArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ServiceMulticastFeatureIgmpInterfaceJoinGroupArgs:
    def __init__(__self__, *,
                 group_address: Optional[pulumi.Input[_builtins.str]] = None,
                 group_address_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 source_address: Optional[pulumi.Input[_builtins.str]] = None,
                 source_address_variable: Optional[pulumi.Input[_builtins.str]] = None):
        """
        :param pulumi.Input[_builtins.str] group_address: Set group address
        :param pulumi.Input[_builtins.str] group_address_variable: Variable name
        :param pulumi.Input[_builtins.str] source_address: Set source address
        :param pulumi.Input[_builtins.str] source_address_variable: Variable name
        """
        if group_address is not None:
            pulumi.set(__self__, "group_address", group_address)
        if group_address_variable is not None:
            pulumi.set(__self__, "group_address_variable", group_address_variable)
        if source_address is not None:
            pulumi.set(__self__, "source_address", source_address)
        if source_address_variable is not None:
            pulumi.set(__self__, "source_address_variable", source_address_variable)

    @_builtins.property
    @pulumi.getter(name="groupAddress")
    def group_address(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Set group address
        """
        return pulumi.get(self, "group_address")

    @group_address.setter
    def group_address(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "group_address", value)

    @_builtins.property
    @pulumi.getter(name="groupAddressVariable")
    def group_address_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "group_address_variable")

    @group_address_variable.setter
    def group_address_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "group_address_variable", value)

    @_builtins.property
    @pulumi.getter(name="sourceAddress")
    def source_address(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Set source address
        """
        return pulumi.get(self, "source_address")

    @source_address.setter
    def source_address(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "source_address", value)

    @_builtins.property
    @pulumi.getter(name="sourceAddressVariable")
    def source_address_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "source_address_variable")

    @source_address_variable.setter
    def source_address_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "source_address_variable", value)


if not MYPY:
    class ServiceMulticastFeatureMsdpGroupArgsDict(TypedDict):
        mesh_group_name: NotRequired[pulumi.Input[_builtins.str]]
        """
        Set MSDP mesh group
        """
        mesh_group_name_variable: NotRequired[pulumi.Input[_builtins.str]]
        """
        Variable name
        """
        peers: NotRequired[pulumi.Input[Sequence[pulumi.Input['ServiceMulticastFeatureMsdpGroupPeerArgsDict']]]]
        """
        Configure peer
        """
elif False:
    ServiceMulticastFeatureMsdpGroupArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ServiceMulticastFeatureMsdpGroupArgs:
    def __init__(__self__, *,
                 mesh_group_name: Optional[pulumi.Input[_builtins.str]] = None,
                 mesh_group_name_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 peers: Optional[pulumi.Input[Sequence[pulumi.Input['ServiceMulticastFeatureMsdpGroupPeerArgs']]]] = None):
        """
        :param pulumi.Input[_builtins.str] mesh_group_name: Set MSDP mesh group
        :param pulumi.Input[_builtins.str] mesh_group_name_variable: Variable name
        :param pulumi.Input[Sequence[pulumi.Input['ServiceMulticastFeatureMsdpGroupPeerArgs']]] peers: Configure peer
        """
        if mesh_group_name is not None:
            pulumi.set(__self__, "mesh_group_name", mesh_group_name)
        if mesh_group_name_variable is not None:
            pulumi.set(__self__, "mesh_group_name_variable", mesh_group_name_variable)
        if peers is not None:
            pulumi.set(__self__, "peers", peers)

    @_builtins.property
    @pulumi.getter(name="meshGroupName")
    def mesh_group_name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Set MSDP mesh group
        """
        return pulumi.get(self, "mesh_group_name")

    @mesh_group_name.setter
    def mesh_group_name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "mesh_group_name", value)

    @_builtins.property
    @pulumi.getter(name="meshGroupNameVariable")
    def mesh_group_name_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "mesh_group_name_variable")

    @mesh_group_name_variable.setter
    def mesh_group_name_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "mesh_group_name_variable", value)

    @_builtins.property
    @pulumi.getter
    def peers(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ServiceMulticastFeatureMsdpGroupPeerArgs']]]]:
        """
        Configure peer
        """
        return pulumi.get(self, "peers")

    @peers.setter
    def peers(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ServiceMulticastFeatureMsdpGroupPeerArgs']]]]):
        pulumi.set(self, "peers", value)


if not MYPY:
    class ServiceMulticastFeatureMsdpGroupPeerArgsDict(TypedDict):
        connection_source_interface: NotRequired[pulumi.Input[_builtins.str]]
        """
        Set MSDP peer ip connect-source interface
        """
        connection_source_interface_variable: NotRequired[pulumi.Input[_builtins.str]]
        """
        Variable name
        """
        default_peer: NotRequired[pulumi.Input[_builtins.bool]]
        """
        Set MSDP default peer
        """
        keepalive_hold_time: NotRequired[pulumi.Input[_builtins.int]]
        """
        Set MSDP peer ip keepalive hold time
          - Range: `1`-`75`
        """
        keepalive_hold_time_variable: NotRequired[pulumi.Input[_builtins.str]]
        """
        Variable name
        """
        keepalive_interval: NotRequired[pulumi.Input[_builtins.int]]
        """
        Set MSDP peer ip keepalive interval
          - Range: `1`-`60`
        """
        keepalive_interval_variable: NotRequired[pulumi.Input[_builtins.str]]
        """
        Variable name
        """
        peer_authentication_password: NotRequired[pulumi.Input[_builtins.str]]
        """
        Set MSDP peer ip password
        """
        peer_authentication_password_variable: NotRequired[pulumi.Input[_builtins.str]]
        """
        Variable name
        """
        peer_ip: NotRequired[pulumi.Input[_builtins.str]]
        """
        Set MSDP peer ip
        """
        peer_ip_variable: NotRequired[pulumi.Input[_builtins.str]]
        """
        Variable name
        """
        prefix_list_id: NotRequired[pulumi.Input[_builtins.str]]
        remote_as: NotRequired[pulumi.Input[_builtins.int]]
        """
        Set MSDP peer ip remote autonomous system number
          - Range: `1`-`65535`
        """
        remote_as_variable: NotRequired[pulumi.Input[_builtins.str]]
        """
        Variable name
        """
        sa_limit: NotRequired[pulumi.Input[_builtins.int]]
        """
        Set MSDP peer ip SA limit message number
          - Range: `1`-`2147483646`
        """
        sa_limit_variable: NotRequired[pulumi.Input[_builtins.str]]
        """
        Variable name
        """
elif False:
    ServiceMulticastFeatureMsdpGroupPeerArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ServiceMulticastFeatureMsdpGroupPeerArgs:
    def __init__(__self__, *,
                 connection_source_interface: Optional[pulumi.Input[_builtins.str]] = None,
                 connection_source_interface_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 default_peer: Optional[pulumi.Input[_builtins.bool]] = None,
                 keepalive_hold_time: Optional[pulumi.Input[_builtins.int]] = None,
                 keepalive_hold_time_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 keepalive_interval: Optional[pulumi.Input[_builtins.int]] = None,
                 keepalive_interval_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 peer_authentication_password: Optional[pulumi.Input[_builtins.str]] = None,
                 peer_authentication_password_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 peer_ip: Optional[pulumi.Input[_builtins.str]] = None,
                 peer_ip_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 prefix_list_id: Optional[pulumi.Input[_builtins.str]] = None,
                 remote_as: Optional[pulumi.Input[_builtins.int]] = None,
                 remote_as_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 sa_limit: Optional[pulumi.Input[_builtins.int]] = None,
                 sa_limit_variable: Optional[pulumi.Input[_builtins.str]] = None):
        """
        :param pulumi.Input[_builtins.str] connection_source_interface: Set MSDP peer ip connect-source interface
        :param pulumi.Input[_builtins.str] connection_source_interface_variable: Variable name
        :param pulumi.Input[_builtins.bool] default_peer: Set MSDP default peer
        :param pulumi.Input[_builtins.int] keepalive_hold_time: Set MSDP peer ip keepalive hold time
                 - Range: `1`-`75`
        :param pulumi.Input[_builtins.str] keepalive_hold_time_variable: Variable name
        :param pulumi.Input[_builtins.int] keepalive_interval: Set MSDP peer ip keepalive interval
                 - Range: `1`-`60`
        :param pulumi.Input[_builtins.str] keepalive_interval_variable: Variable name
        :param pulumi.Input[_builtins.str] peer_authentication_password: Set MSDP peer ip password
        :param pulumi.Input[_builtins.str] peer_authentication_password_variable: Variable name
        :param pulumi.Input[_builtins.str] peer_ip: Set MSDP peer ip
        :param pulumi.Input[_builtins.str] peer_ip_variable: Variable name
        :param pulumi.Input[_builtins.int] remote_as: Set MSDP peer ip remote autonomous system number
                 - Range: `1`-`65535`
        :param pulumi.Input[_builtins.str] remote_as_variable: Variable name
        :param pulumi.Input[_builtins.int] sa_limit: Set MSDP peer ip SA limit message number
                 - Range: `1`-`2147483646`
        :param pulumi.Input[_builtins.str] sa_limit_variable: Variable name
        """
        if connection_source_interface is not None:
            pulumi.set(__self__, "connection_source_interface", connection_source_interface)
        if connection_source_interface_variable is not None:
            pulumi.set(__self__, "connection_source_interface_variable", connection_source_interface_variable)
        if default_peer is not None:
            pulumi.set(__self__, "default_peer", default_peer)
        if keepalive_hold_time is not None:
            pulumi.set(__self__, "keepalive_hold_time", keepalive_hold_time)
        if keepalive_hold_time_variable is not None:
            pulumi.set(__self__, "keepalive_hold_time_variable", keepalive_hold_time_variable)
        if keepalive_interval is not None:
            pulumi.set(__self__, "keepalive_interval", keepalive_interval)
        if keepalive_interval_variable is not None:
            pulumi.set(__self__, "keepalive_interval_variable", keepalive_interval_variable)
        if peer_authentication_password is not None:
            pulumi.set(__self__, "peer_authentication_password", peer_authentication_password)
        if peer_authentication_password_variable is not None:
            pulumi.set(__self__, "peer_authentication_password_variable", peer_authentication_password_variable)
        if peer_ip is not None:
            pulumi.set(__self__, "peer_ip", peer_ip)
        if peer_ip_variable is not None:
            pulumi.set(__self__, "peer_ip_variable", peer_ip_variable)
        if prefix_list_id is not None:
            pulumi.set(__self__, "prefix_list_id", prefix_list_id)
        if remote_as is not None:
            pulumi.set(__self__, "remote_as", remote_as)
        if remote_as_variable is not None:
            pulumi.set(__self__, "remote_as_variable", remote_as_variable)
        if sa_limit is not None:
            pulumi.set(__self__, "sa_limit", sa_limit)
        if sa_limit_variable is not None:
            pulumi.set(__self__, "sa_limit_variable", sa_limit_variable)

    @_builtins.property
    @pulumi.getter(name="connectionSourceInterface")
    def connection_source_interface(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Set MSDP peer ip connect-source interface
        """
        return pulumi.get(self, "connection_source_interface")

    @connection_source_interface.setter
    def connection_source_interface(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "connection_source_interface", value)

    @_builtins.property
    @pulumi.getter(name="connectionSourceInterfaceVariable")
    def connection_source_interface_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "connection_source_interface_variable")

    @connection_source_interface_variable.setter
    def connection_source_interface_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "connection_source_interface_variable", value)

    @_builtins.property
    @pulumi.getter(name="defaultPeer")
    def default_peer(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Set MSDP default peer
        """
        return pulumi.get(self, "default_peer")

    @default_peer.setter
    def default_peer(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "default_peer", value)

    @_builtins.property
    @pulumi.getter(name="keepaliveHoldTime")
    def keepalive_hold_time(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        Set MSDP peer ip keepalive hold time
          - Range: `1`-`75`
        """
        return pulumi.get(self, "keepalive_hold_time")

    @keepalive_hold_time.setter
    def keepalive_hold_time(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "keepalive_hold_time", value)

    @_builtins.property
    @pulumi.getter(name="keepaliveHoldTimeVariable")
    def keepalive_hold_time_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "keepalive_hold_time_variable")

    @keepalive_hold_time_variable.setter
    def keepalive_hold_time_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "keepalive_hold_time_variable", value)

    @_builtins.property
    @pulumi.getter(name="keepaliveInterval")
    def keepalive_interval(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        Set MSDP peer ip keepalive interval
          - Range: `1`-`60`
        """
        return pulumi.get(self, "keepalive_interval")

    @keepalive_interval.setter
    def keepalive_interval(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "keepalive_interval", value)

    @_builtins.property
    @pulumi.getter(name="keepaliveIntervalVariable")
    def keepalive_interval_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "keepalive_interval_variable")

    @keepalive_interval_variable.setter
    def keepalive_interval_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "keepalive_interval_variable", value)

    @_builtins.property
    @pulumi.getter(name="peerAuthenticationPassword")
    def peer_authentication_password(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Set MSDP peer ip password
        """
        return pulumi.get(self, "peer_authentication_password")

    @peer_authentication_password.setter
    def peer_authentication_password(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "peer_authentication_password", value)

    @_builtins.property
    @pulumi.getter(name="peerAuthenticationPasswordVariable")
    def peer_authentication_password_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "peer_authentication_password_variable")

    @peer_authentication_password_variable.setter
    def peer_authentication_password_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "peer_authentication_password_variable", value)

    @_builtins.property
    @pulumi.getter(name="peerIp")
    def peer_ip(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Set MSDP peer ip
        """
        return pulumi.get(self, "peer_ip")

    @peer_ip.setter
    def peer_ip(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "peer_ip", value)

    @_builtins.property
    @pulumi.getter(name="peerIpVariable")
    def peer_ip_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "peer_ip_variable")

    @peer_ip_variable.setter
    def peer_ip_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "peer_ip_variable", value)

    @_builtins.property
    @pulumi.getter(name="prefixListId")
    def prefix_list_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "prefix_list_id")

    @prefix_list_id.setter
    def prefix_list_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "prefix_list_id", value)

    @_builtins.property
    @pulumi.getter(name="remoteAs")
    def remote_as(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        Set MSDP peer ip remote autonomous system number
          - Range: `1`-`65535`
        """
        return pulumi.get(self, "remote_as")

    @remote_as.setter
    def remote_as(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "remote_as", value)

    @_builtins.property
    @pulumi.getter(name="remoteAsVariable")
    def remote_as_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "remote_as_variable")

    @remote_as_variable.setter
    def remote_as_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "remote_as_variable", value)

    @_builtins.property
    @pulumi.getter(name="saLimit")
    def sa_limit(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        Set MSDP peer ip SA limit message number
          - Range: `1`-`2147483646`
        """
        return pulumi.get(self, "sa_limit")

    @sa_limit.setter
    def sa_limit(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "sa_limit", value)

    @_builtins.property
    @pulumi.getter(name="saLimitVariable")
    def sa_limit_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "sa_limit_variable")

    @sa_limit_variable.setter
    def sa_limit_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "sa_limit_variable", value)


if not MYPY:
    class ServiceMulticastFeaturePimBsrCandidateArgsDict(TypedDict):
        accept_candidate_access_list: NotRequired[pulumi.Input[_builtins.str]]
        """
        Set BSR RP candidate filter
        """
        accept_candidate_access_list_variable: NotRequired[pulumi.Input[_builtins.str]]
        """
        Variable name
        """
        hash_mask_length: NotRequired[pulumi.Input[_builtins.int]]
        """
        Hash Mask length for RP selection
          - Range: `0`-`32`
        """
        hash_mask_length_variable: NotRequired[pulumi.Input[_builtins.str]]
        """
        Variable name
        """
        interface_name: NotRequired[pulumi.Input[_builtins.str]]
        """
        Set Autonomic-Networking virtual interface
        """
        interface_name_variable: NotRequired[pulumi.Input[_builtins.str]]
        """
        Variable name
        """
        priority: NotRequired[pulumi.Input[_builtins.int]]
        """
        Set RP candidate priority
          - Range: `0`-`255`
        """
        priority_variable: NotRequired[pulumi.Input[_builtins.str]]
        """
        Variable name
        """
elif False:
    ServiceMulticastFeaturePimBsrCandidateArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ServiceMulticastFeaturePimBsrCandidateArgs:
    def __init__(__self__, *,
                 accept_candidate_access_list: Optional[pulumi.Input[_builtins.str]] = None,
                 accept_candidate_access_list_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 hash_mask_length: Optional[pulumi.Input[_builtins.int]] = None,
                 hash_mask_length_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 interface_name: Optional[pulumi.Input[_builtins.str]] = None,
                 interface_name_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 priority: Optional[pulumi.Input[_builtins.int]] = None,
                 priority_variable: Optional[pulumi.Input[_builtins.str]] = None):
        """
        :param pulumi.Input[_builtins.str] accept_candidate_access_list: Set BSR RP candidate filter
        :param pulumi.Input[_builtins.str] accept_candidate_access_list_variable: Variable name
        :param pulumi.Input[_builtins.int] hash_mask_length: Hash Mask length for RP selection
                 - Range: `0`-`32`
        :param pulumi.Input[_builtins.str] hash_mask_length_variable: Variable name
        :param pulumi.Input[_builtins.str] interface_name: Set Autonomic-Networking virtual interface
        :param pulumi.Input[_builtins.str] interface_name_variable: Variable name
        :param pulumi.Input[_builtins.int] priority: Set RP candidate priority
                 - Range: `0`-`255`
        :param pulumi.Input[_builtins.str] priority_variable: Variable name
        """
        if accept_candidate_access_list is not None:
            pulumi.set(__self__, "accept_candidate_access_list", accept_candidate_access_list)
        if accept_candidate_access_list_variable is not None:
            pulumi.set(__self__, "accept_candidate_access_list_variable", accept_candidate_access_list_variable)
        if hash_mask_length is not None:
            pulumi.set(__self__, "hash_mask_length", hash_mask_length)
        if hash_mask_length_variable is not None:
            pulumi.set(__self__, "hash_mask_length_variable", hash_mask_length_variable)
        if interface_name is not None:
            pulumi.set(__self__, "interface_name", interface_name)
        if interface_name_variable is not None:
            pulumi.set(__self__, "interface_name_variable", interface_name_variable)
        if priority is not None:
            pulumi.set(__self__, "priority", priority)
        if priority_variable is not None:
            pulumi.set(__self__, "priority_variable", priority_variable)

    @_builtins.property
    @pulumi.getter(name="acceptCandidateAccessList")
    def accept_candidate_access_list(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Set BSR RP candidate filter
        """
        return pulumi.get(self, "accept_candidate_access_list")

    @accept_candidate_access_list.setter
    def accept_candidate_access_list(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "accept_candidate_access_list", value)

    @_builtins.property
    @pulumi.getter(name="acceptCandidateAccessListVariable")
    def accept_candidate_access_list_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "accept_candidate_access_list_variable")

    @accept_candidate_access_list_variable.setter
    def accept_candidate_access_list_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "accept_candidate_access_list_variable", value)

    @_builtins.property
    @pulumi.getter(name="hashMaskLength")
    def hash_mask_length(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        Hash Mask length for RP selection
          - Range: `0`-`32`
        """
        return pulumi.get(self, "hash_mask_length")

    @hash_mask_length.setter
    def hash_mask_length(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "hash_mask_length", value)

    @_builtins.property
    @pulumi.getter(name="hashMaskLengthVariable")
    def hash_mask_length_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "hash_mask_length_variable")

    @hash_mask_length_variable.setter
    def hash_mask_length_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "hash_mask_length_variable", value)

    @_builtins.property
    @pulumi.getter(name="interfaceName")
    def interface_name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Set Autonomic-Networking virtual interface
        """
        return pulumi.get(self, "interface_name")

    @interface_name.setter
    def interface_name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "interface_name", value)

    @_builtins.property
    @pulumi.getter(name="interfaceNameVariable")
    def interface_name_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "interface_name_variable")

    @interface_name_variable.setter
    def interface_name_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "interface_name_variable", value)

    @_builtins.property
    @pulumi.getter
    def priority(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        Set RP candidate priority
          - Range: `0`-`255`
        """
        return pulumi.get(self, "priority")

    @priority.setter
    def priority(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "priority", value)

    @_builtins.property
    @pulumi.getter(name="priorityVariable")
    def priority_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "priority_variable")

    @priority_variable.setter
    def priority_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "priority_variable", value)


if not MYPY:
    class ServiceMulticastFeaturePimBsrRpCandidateArgsDict(TypedDict):
        access_list_id: NotRequired[pulumi.Input[_builtins.str]]
        """
        Set IP Access List for PIM RP Candidate
        """
        access_list_id_variable: NotRequired[pulumi.Input[_builtins.str]]
        """
        Variable name
        """
        interface_name: NotRequired[pulumi.Input[_builtins.str]]
        """
        Set Autonomic-Networking virtual interface
        """
        interface_name_variable: NotRequired[pulumi.Input[_builtins.str]]
        """
        Variable name
        """
        interval: NotRequired[pulumi.Input[_builtins.int]]
        """
        Set RP candidate advertisement interval
          - Range: `1`-`16383`
        """
        interval_variable: NotRequired[pulumi.Input[_builtins.str]]
        """
        Variable name
        """
        priority: NotRequired[pulumi.Input[_builtins.int]]
        """
        Set RP candidate priority
          - Range: `0`-`255`
        """
        priority_variable: NotRequired[pulumi.Input[_builtins.str]]
        """
        Variable name
        """
elif False:
    ServiceMulticastFeaturePimBsrRpCandidateArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ServiceMulticastFeaturePimBsrRpCandidateArgs:
    def __init__(__self__, *,
                 access_list_id: Optional[pulumi.Input[_builtins.str]] = None,
                 access_list_id_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 interface_name: Optional[pulumi.Input[_builtins.str]] = None,
                 interface_name_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 interval: Optional[pulumi.Input[_builtins.int]] = None,
                 interval_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 priority: Optional[pulumi.Input[_builtins.int]] = None,
                 priority_variable: Optional[pulumi.Input[_builtins.str]] = None):
        """
        :param pulumi.Input[_builtins.str] access_list_id: Set IP Access List for PIM RP Candidate
        :param pulumi.Input[_builtins.str] access_list_id_variable: Variable name
        :param pulumi.Input[_builtins.str] interface_name: Set Autonomic-Networking virtual interface
        :param pulumi.Input[_builtins.str] interface_name_variable: Variable name
        :param pulumi.Input[_builtins.int] interval: Set RP candidate advertisement interval
                 - Range: `1`-`16383`
        :param pulumi.Input[_builtins.str] interval_variable: Variable name
        :param pulumi.Input[_builtins.int] priority: Set RP candidate priority
                 - Range: `0`-`255`
        :param pulumi.Input[_builtins.str] priority_variable: Variable name
        """
        if access_list_id is not None:
            pulumi.set(__self__, "access_list_id", access_list_id)
        if access_list_id_variable is not None:
            pulumi.set(__self__, "access_list_id_variable", access_list_id_variable)
        if interface_name is not None:
            pulumi.set(__self__, "interface_name", interface_name)
        if interface_name_variable is not None:
            pulumi.set(__self__, "interface_name_variable", interface_name_variable)
        if interval is not None:
            pulumi.set(__self__, "interval", interval)
        if interval_variable is not None:
            pulumi.set(__self__, "interval_variable", interval_variable)
        if priority is not None:
            pulumi.set(__self__, "priority", priority)
        if priority_variable is not None:
            pulumi.set(__self__, "priority_variable", priority_variable)

    @_builtins.property
    @pulumi.getter(name="accessListId")
    def access_list_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Set IP Access List for PIM RP Candidate
        """
        return pulumi.get(self, "access_list_id")

    @access_list_id.setter
    def access_list_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "access_list_id", value)

    @_builtins.property
    @pulumi.getter(name="accessListIdVariable")
    def access_list_id_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "access_list_id_variable")

    @access_list_id_variable.setter
    def access_list_id_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "access_list_id_variable", value)

    @_builtins.property
    @pulumi.getter(name="interfaceName")
    def interface_name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Set Autonomic-Networking virtual interface
        """
        return pulumi.get(self, "interface_name")

    @interface_name.setter
    def interface_name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "interface_name", value)

    @_builtins.property
    @pulumi.getter(name="interfaceNameVariable")
    def interface_name_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "interface_name_variable")

    @interface_name_variable.setter
    def interface_name_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "interface_name_variable", value)

    @_builtins.property
    @pulumi.getter
    def interval(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        Set RP candidate advertisement interval
          - Range: `1`-`16383`
        """
        return pulumi.get(self, "interval")

    @interval.setter
    def interval(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "interval", value)

    @_builtins.property
    @pulumi.getter(name="intervalVariable")
    def interval_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "interval_variable")

    @interval_variable.setter
    def interval_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "interval_variable", value)

    @_builtins.property
    @pulumi.getter
    def priority(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        Set RP candidate priority
          - Range: `0`-`255`
        """
        return pulumi.get(self, "priority")

    @priority.setter
    def priority(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "priority", value)

    @_builtins.property
    @pulumi.getter(name="priorityVariable")
    def priority_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "priority_variable")

    @priority_variable.setter
    def priority_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "priority_variable", value)


if not MYPY:
    class ServiceMulticastFeaturePimInterfaceArgsDict(TypedDict):
        interface_name: NotRequired[pulumi.Input[_builtins.str]]
        """
        Set interface name
        """
        interface_name_variable: NotRequired[pulumi.Input[_builtins.str]]
        """
        Variable name
        """
        join_prune_interval: NotRequired[pulumi.Input[_builtins.int]]
        """
        Set interval at which PIM multicast traffic can join or be removed from RPT or SPT
          - Range: `10`-`600`
          - Default value: `60`
        """
        join_prune_interval_variable: NotRequired[pulumi.Input[_builtins.str]]
        """
        Variable name
        """
        query_interval: NotRequired[pulumi.Input[_builtins.int]]
        """
        Set PIM query interval
          - Range: `1`-`18725`
          - Default value: `30`
        """
        query_interval_variable: NotRequired[pulumi.Input[_builtins.str]]
        """
        Variable name
        """
elif False:
    ServiceMulticastFeaturePimInterfaceArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ServiceMulticastFeaturePimInterfaceArgs:
    def __init__(__self__, *,
                 interface_name: Optional[pulumi.Input[_builtins.str]] = None,
                 interface_name_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 join_prune_interval: Optional[pulumi.Input[_builtins.int]] = None,
                 join_prune_interval_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 query_interval: Optional[pulumi.Input[_builtins.int]] = None,
                 query_interval_variable: Optional[pulumi.Input[_builtins.str]] = None):
        """
        :param pulumi.Input[_builtins.str] interface_name: Set interface name
        :param pulumi.Input[_builtins.str] interface_name_variable: Variable name
        :param pulumi.Input[_builtins.int] join_prune_interval: Set interval at which PIM multicast traffic can join or be removed from RPT or SPT
                 - Range: `10`-`600`
                 - Default value: `60`
        :param pulumi.Input[_builtins.str] join_prune_interval_variable: Variable name
        :param pulumi.Input[_builtins.int] query_interval: Set PIM query interval
                 - Range: `1`-`18725`
                 - Default value: `30`
        :param pulumi.Input[_builtins.str] query_interval_variable: Variable name
        """
        if interface_name is not None:
            pulumi.set(__self__, "interface_name", interface_name)
        if interface_name_variable is not None:
            pulumi.set(__self__, "interface_name_variable", interface_name_variable)
        if join_prune_interval is not None:
            pulumi.set(__self__, "join_prune_interval", join_prune_interval)
        if join_prune_interval_variable is not None:
            pulumi.set(__self__, "join_prune_interval_variable", join_prune_interval_variable)
        if query_interval is not None:
            pulumi.set(__self__, "query_interval", query_interval)
        if query_interval_variable is not None:
            pulumi.set(__self__, "query_interval_variable", query_interval_variable)

    @_builtins.property
    @pulumi.getter(name="interfaceName")
    def interface_name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Set interface name
        """
        return pulumi.get(self, "interface_name")

    @interface_name.setter
    def interface_name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "interface_name", value)

    @_builtins.property
    @pulumi.getter(name="interfaceNameVariable")
    def interface_name_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "interface_name_variable")

    @interface_name_variable.setter
    def interface_name_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "interface_name_variable", value)

    @_builtins.property
    @pulumi.getter(name="joinPruneInterval")
    def join_prune_interval(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        Set interval at which PIM multicast traffic can join or be removed from RPT or SPT
          - Range: `10`-`600`
          - Default value: `60`
        """
        return pulumi.get(self, "join_prune_interval")

    @join_prune_interval.setter
    def join_prune_interval(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "join_prune_interval", value)

    @_builtins.property
    @pulumi.getter(name="joinPruneIntervalVariable")
    def join_prune_interval_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "join_prune_interval_variable")

    @join_prune_interval_variable.setter
    def join_prune_interval_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "join_prune_interval_variable", value)

    @_builtins.property
    @pulumi.getter(name="queryInterval")
    def query_interval(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        Set PIM query interval
          - Range: `1`-`18725`
          - Default value: `30`
        """
        return pulumi.get(self, "query_interval")

    @query_interval.setter
    def query_interval(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "query_interval", value)

    @_builtins.property
    @pulumi.getter(name="queryIntervalVariable")
    def query_interval_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "query_interval_variable")

    @query_interval_variable.setter
    def query_interval_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "query_interval_variable", value)


if not MYPY:
    class ServiceMulticastFeatureStaticRpAddressArgsDict(TypedDict):
        access_list: NotRequired[pulumi.Input[_builtins.str]]
        """
        Set Static RP Access List
        """
        access_list_variable: NotRequired[pulumi.Input[_builtins.str]]
        """
        Variable name
        """
        ip_address: NotRequired[pulumi.Input[_builtins.str]]
        """
        Set Static RP IP Address
        """
        ip_address_variable: NotRequired[pulumi.Input[_builtins.str]]
        """
        Variable name
        """
        override: NotRequired[pulumi.Input[_builtins.bool]]
        """
        Set override flag
          - Default value: `false`
        """
        override_variable: NotRequired[pulumi.Input[_builtins.str]]
        """
        Variable name
        """
elif False:
    ServiceMulticastFeatureStaticRpAddressArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ServiceMulticastFeatureStaticRpAddressArgs:
    def __init__(__self__, *,
                 access_list: Optional[pulumi.Input[_builtins.str]] = None,
                 access_list_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 ip_address: Optional[pulumi.Input[_builtins.str]] = None,
                 ip_address_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 override: Optional[pulumi.Input[_builtins.bool]] = None,
                 override_variable: Optional[pulumi.Input[_builtins.str]] = None):
        """
        :param pulumi.Input[_builtins.str] access_list: Set Static RP Access List
        :param pulumi.Input[_builtins.str] access_list_variable: Variable name
        :param pulumi.Input[_builtins.str] ip_address: Set Static RP IP Address
        :param pulumi.Input[_builtins.str] ip_address_variable: Variable name
        :param pulumi.Input[_builtins.bool] override: Set override flag
                 - Default value: `false`
        :param pulumi.Input[_builtins.str] override_variable: Variable name
        """
        if access_list is not None:
            pulumi.set(__self__, "access_list", access_list)
        if access_list_variable is not None:
            pulumi.set(__self__, "access_list_variable", access_list_variable)
        if ip_address is not None:
            pulumi.set(__self__, "ip_address", ip_address)
        if ip_address_variable is not None:
            pulumi.set(__self__, "ip_address_variable", ip_address_variable)
        if override is not None:
            pulumi.set(__self__, "override", override)
        if override_variable is not None:
            pulumi.set(__self__, "override_variable", override_variable)

    @_builtins.property
    @pulumi.getter(name="accessList")
    def access_list(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Set Static RP Access List
        """
        return pulumi.get(self, "access_list")

    @access_list.setter
    def access_list(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "access_list", value)

    @_builtins.property
    @pulumi.getter(name="accessListVariable")
    def access_list_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "access_list_variable")

    @access_list_variable.setter
    def access_list_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "access_list_variable", value)

    @_builtins.property
    @pulumi.getter(name="ipAddress")
    def ip_address(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Set Static RP IP Address
        """
        return pulumi.get(self, "ip_address")

    @ip_address.setter
    def ip_address(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "ip_address", value)

    @_builtins.property
    @pulumi.getter(name="ipAddressVariable")
    def ip_address_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "ip_address_variable")

    @ip_address_variable.setter
    def ip_address_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "ip_address_variable", value)

    @_builtins.property
    @pulumi.getter
    def override(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Set override flag
          - Default value: `false`
        """
        return pulumi.get(self, "override")

    @override.setter
    def override(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "override", value)

    @_builtins.property
    @pulumi.getter(name="overrideVariable")
    def override_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "override_variable")

    @override_variable.setter
    def override_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "override_variable", value)


if not MYPY:
    class ServiceObjectTrackerGroupFeatureTrackerElementArgsDict(TypedDict):
        object_tracker_id: NotRequired[pulumi.Input[_builtins.str]]
elif False:
    ServiceObjectTrackerGroupFeatureTrackerElementArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ServiceObjectTrackerGroupFeatureTrackerElementArgs:
    def __init__(__self__, *,
                 object_tracker_id: Optional[pulumi.Input[_builtins.str]] = None):
        if object_tracker_id is not None:
            pulumi.set(__self__, "object_tracker_id", object_tracker_id)

    @_builtins.property
    @pulumi.getter(name="objectTrackerId")
    def object_tracker_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "object_tracker_id")

    @object_tracker_id.setter
    def object_tracker_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "object_tracker_id", value)


if not MYPY:
    class ServiceRoutePolicyFeatureSequenceArgsDict(TypedDict):
        actions: NotRequired[pulumi.Input[Sequence[pulumi.Input['ServiceRoutePolicyFeatureSequenceActionArgsDict']]]]
        """
        Define list of actions
        """
        base_action: NotRequired[pulumi.Input[_builtins.str]]
        """
        Base Action
          - Choices: `reject`, `accept`
          - Default value: `reject`
        """
        id: NotRequired[pulumi.Input[_builtins.int]]
        """
        Sequence Id
          - Range: `1`-`65536`
        """
        match_entries: NotRequired[pulumi.Input[Sequence[pulumi.Input['ServiceRoutePolicyFeatureSequenceMatchEntryArgsDict']]]]
        """
        Define match conditions
        """
        name: NotRequired[pulumi.Input[_builtins.str]]
        """
        Sequence Name
        """
        protocol: NotRequired[pulumi.Input[_builtins.str]]
        """
        protocol such as IPV4, IPV6, or BOTH
          - Choices: `IPV4`, `IPV6`, `BOTH`
          - Default value: `IPV4`
        """
elif False:
    ServiceRoutePolicyFeatureSequenceArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ServiceRoutePolicyFeatureSequenceArgs:
    def __init__(__self__, *,
                 actions: Optional[pulumi.Input[Sequence[pulumi.Input['ServiceRoutePolicyFeatureSequenceActionArgs']]]] = None,
                 base_action: Optional[pulumi.Input[_builtins.str]] = None,
                 id: Optional[pulumi.Input[_builtins.int]] = None,
                 match_entries: Optional[pulumi.Input[Sequence[pulumi.Input['ServiceRoutePolicyFeatureSequenceMatchEntryArgs']]]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 protocol: Optional[pulumi.Input[_builtins.str]] = None):
        """
        :param pulumi.Input[Sequence[pulumi.Input['ServiceRoutePolicyFeatureSequenceActionArgs']]] actions: Define list of actions
        :param pulumi.Input[_builtins.str] base_action: Base Action
                 - Choices: `reject`, `accept`
                 - Default value: `reject`
        :param pulumi.Input[_builtins.int] id: Sequence Id
                 - Range: `1`-`65536`
        :param pulumi.Input[Sequence[pulumi.Input['ServiceRoutePolicyFeatureSequenceMatchEntryArgs']]] match_entries: Define match conditions
        :param pulumi.Input[_builtins.str] name: Sequence Name
        :param pulumi.Input[_builtins.str] protocol: protocol such as IPV4, IPV6, or BOTH
                 - Choices: `IPV4`, `IPV6`, `BOTH`
                 - Default value: `IPV4`
        """
        if actions is not None:
            pulumi.set(__self__, "actions", actions)
        if base_action is not None:
            pulumi.set(__self__, "base_action", base_action)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if match_entries is not None:
            pulumi.set(__self__, "match_entries", match_entries)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if protocol is not None:
            pulumi.set(__self__, "protocol", protocol)

    @_builtins.property
    @pulumi.getter
    def actions(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ServiceRoutePolicyFeatureSequenceActionArgs']]]]:
        """
        Define list of actions
        """
        return pulumi.get(self, "actions")

    @actions.setter
    def actions(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ServiceRoutePolicyFeatureSequenceActionArgs']]]]):
        pulumi.set(self, "actions", value)

    @_builtins.property
    @pulumi.getter(name="baseAction")
    def base_action(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Base Action
          - Choices: `reject`, `accept`
          - Default value: `reject`
        """
        return pulumi.get(self, "base_action")

    @base_action.setter
    def base_action(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "base_action", value)

    @_builtins.property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        Sequence Id
          - Range: `1`-`65536`
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "id", value)

    @_builtins.property
    @pulumi.getter(name="matchEntries")
    def match_entries(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ServiceRoutePolicyFeatureSequenceMatchEntryArgs']]]]:
        """
        Define match conditions
        """
        return pulumi.get(self, "match_entries")

    @match_entries.setter
    def match_entries(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ServiceRoutePolicyFeatureSequenceMatchEntryArgs']]]]):
        pulumi.set(self, "match_entries", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Sequence Name
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "name", value)

    @_builtins.property
    @pulumi.getter
    def protocol(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        protocol such as IPV4, IPV6, or BOTH
          - Choices: `IPV4`, `IPV6`, `BOTH`
          - Default value: `IPV4`
        """
        return pulumi.get(self, "protocol")

    @protocol.setter
    def protocol(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "protocol", value)


if not MYPY:
    class ServiceRoutePolicyFeatureSequenceActionArgsDict(TypedDict):
        as_path_prepends: NotRequired[pulumi.Input[Sequence[pulumi.Input[_builtins.int]]]]
        communities: NotRequired[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]
        community_additive: NotRequired[pulumi.Input[_builtins.bool]]
        """
        - Default value: `false`
        """
        community_variable: NotRequired[pulumi.Input[_builtins.str]]
        """
        Variable name
        """
        ipv4_next_hop: NotRequired[pulumi.Input[_builtins.str]]
        """
        Set Ipv4 Next Hop
        """
        ipv6_next_hop: NotRequired[pulumi.Input[_builtins.str]]
        """
        Set Ipv6 Next Hop
        """
        local_preference: NotRequired[pulumi.Input[_builtins.int]]
        """
        Set Local Preference
          - Range: `0`-`4294967295`
        """
        metric: NotRequired[pulumi.Input[_builtins.int]]
        """
        Set Metric
          - Range: `0`-`4294967295`
        """
        metric_type: NotRequired[pulumi.Input[_builtins.str]]
        """
        Set Metric Type
          - Choices: `type1`, `type2`
        """
        omp_tag: NotRequired[pulumi.Input[_builtins.int]]
        """
        Set OMP Tag
          - Range: `0`-`4294967295`
        """
        origin: NotRequired[pulumi.Input[_builtins.str]]
        """
        Set Origin
          - Choices: `EGP`, `IGP`, `Incomplete`
        """
        ospf_tag: NotRequired[pulumi.Input[_builtins.int]]
        """
        Set OSPF Tag
          - Range: `0`-`4294967295`
        """
        weight: NotRequired[pulumi.Input[_builtins.int]]
        """
        Set Weight
          - Range: `0`-`65535`
        """
elif False:
    ServiceRoutePolicyFeatureSequenceActionArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ServiceRoutePolicyFeatureSequenceActionArgs:
    def __init__(__self__, *,
                 as_path_prepends: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.int]]]] = None,
                 communities: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 community_additive: Optional[pulumi.Input[_builtins.bool]] = None,
                 community_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 ipv4_next_hop: Optional[pulumi.Input[_builtins.str]] = None,
                 ipv6_next_hop: Optional[pulumi.Input[_builtins.str]] = None,
                 local_preference: Optional[pulumi.Input[_builtins.int]] = None,
                 metric: Optional[pulumi.Input[_builtins.int]] = None,
                 metric_type: Optional[pulumi.Input[_builtins.str]] = None,
                 omp_tag: Optional[pulumi.Input[_builtins.int]] = None,
                 origin: Optional[pulumi.Input[_builtins.str]] = None,
                 ospf_tag: Optional[pulumi.Input[_builtins.int]] = None,
                 weight: Optional[pulumi.Input[_builtins.int]] = None):
        """
        :param pulumi.Input[_builtins.bool] community_additive: - Default value: `false`
        :param pulumi.Input[_builtins.str] community_variable: Variable name
        :param pulumi.Input[_builtins.str] ipv4_next_hop: Set Ipv4 Next Hop
        :param pulumi.Input[_builtins.str] ipv6_next_hop: Set Ipv6 Next Hop
        :param pulumi.Input[_builtins.int] local_preference: Set Local Preference
                 - Range: `0`-`4294967295`
        :param pulumi.Input[_builtins.int] metric: Set Metric
                 - Range: `0`-`4294967295`
        :param pulumi.Input[_builtins.str] metric_type: Set Metric Type
                 - Choices: `type1`, `type2`
        :param pulumi.Input[_builtins.int] omp_tag: Set OMP Tag
                 - Range: `0`-`4294967295`
        :param pulumi.Input[_builtins.str] origin: Set Origin
                 - Choices: `EGP`, `IGP`, `Incomplete`
        :param pulumi.Input[_builtins.int] ospf_tag: Set OSPF Tag
                 - Range: `0`-`4294967295`
        :param pulumi.Input[_builtins.int] weight: Set Weight
                 - Range: `0`-`65535`
        """
        if as_path_prepends is not None:
            pulumi.set(__self__, "as_path_prepends", as_path_prepends)
        if communities is not None:
            pulumi.set(__self__, "communities", communities)
        if community_additive is not None:
            pulumi.set(__self__, "community_additive", community_additive)
        if community_variable is not None:
            pulumi.set(__self__, "community_variable", community_variable)
        if ipv4_next_hop is not None:
            pulumi.set(__self__, "ipv4_next_hop", ipv4_next_hop)
        if ipv6_next_hop is not None:
            pulumi.set(__self__, "ipv6_next_hop", ipv6_next_hop)
        if local_preference is not None:
            pulumi.set(__self__, "local_preference", local_preference)
        if metric is not None:
            pulumi.set(__self__, "metric", metric)
        if metric_type is not None:
            pulumi.set(__self__, "metric_type", metric_type)
        if omp_tag is not None:
            pulumi.set(__self__, "omp_tag", omp_tag)
        if origin is not None:
            pulumi.set(__self__, "origin", origin)
        if ospf_tag is not None:
            pulumi.set(__self__, "ospf_tag", ospf_tag)
        if weight is not None:
            pulumi.set(__self__, "weight", weight)

    @_builtins.property
    @pulumi.getter(name="asPathPrepends")
    def as_path_prepends(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.int]]]]:
        return pulumi.get(self, "as_path_prepends")

    @as_path_prepends.setter
    def as_path_prepends(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.int]]]]):
        pulumi.set(self, "as_path_prepends", value)

    @_builtins.property
    @pulumi.getter
    def communities(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]:
        return pulumi.get(self, "communities")

    @communities.setter
    def communities(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "communities", value)

    @_builtins.property
    @pulumi.getter(name="communityAdditive")
    def community_additive(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        - Default value: `false`
        """
        return pulumi.get(self, "community_additive")

    @community_additive.setter
    def community_additive(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "community_additive", value)

    @_builtins.property
    @pulumi.getter(name="communityVariable")
    def community_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "community_variable")

    @community_variable.setter
    def community_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "community_variable", value)

    @_builtins.property
    @pulumi.getter(name="ipv4NextHop")
    def ipv4_next_hop(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Set Ipv4 Next Hop
        """
        return pulumi.get(self, "ipv4_next_hop")

    @ipv4_next_hop.setter
    def ipv4_next_hop(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "ipv4_next_hop", value)

    @_builtins.property
    @pulumi.getter(name="ipv6NextHop")
    def ipv6_next_hop(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Set Ipv6 Next Hop
        """
        return pulumi.get(self, "ipv6_next_hop")

    @ipv6_next_hop.setter
    def ipv6_next_hop(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "ipv6_next_hop", value)

    @_builtins.property
    @pulumi.getter(name="localPreference")
    def local_preference(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        Set Local Preference
          - Range: `0`-`4294967295`
        """
        return pulumi.get(self, "local_preference")

    @local_preference.setter
    def local_preference(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "local_preference", value)

    @_builtins.property
    @pulumi.getter
    def metric(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        Set Metric
          - Range: `0`-`4294967295`
        """
        return pulumi.get(self, "metric")

    @metric.setter
    def metric(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "metric", value)

    @_builtins.property
    @pulumi.getter(name="metricType")
    def metric_type(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Set Metric Type
          - Choices: `type1`, `type2`
        """
        return pulumi.get(self, "metric_type")

    @metric_type.setter
    def metric_type(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "metric_type", value)

    @_builtins.property
    @pulumi.getter(name="ompTag")
    def omp_tag(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        Set OMP Tag
          - Range: `0`-`4294967295`
        """
        return pulumi.get(self, "omp_tag")

    @omp_tag.setter
    def omp_tag(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "omp_tag", value)

    @_builtins.property
    @pulumi.getter
    def origin(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Set Origin
          - Choices: `EGP`, `IGP`, `Incomplete`
        """
        return pulumi.get(self, "origin")

    @origin.setter
    def origin(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "origin", value)

    @_builtins.property
    @pulumi.getter(name="ospfTag")
    def ospf_tag(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        Set OSPF Tag
          - Range: `0`-`4294967295`
        """
        return pulumi.get(self, "ospf_tag")

    @ospf_tag.setter
    def ospf_tag(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "ospf_tag", value)

    @_builtins.property
    @pulumi.getter
    def weight(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        Set Weight
          - Range: `0`-`65535`
        """
        return pulumi.get(self, "weight")

    @weight.setter
    def weight(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "weight", value)


if not MYPY:
    class ServiceRoutePolicyFeatureSequenceMatchEntryArgsDict(TypedDict):
        as_path_list_id: NotRequired[pulumi.Input[_builtins.str]]
        bgp_local_preference: NotRequired[pulumi.Input[_builtins.int]]
        """
        BGP Local Preference
          - Range: `0`-`4294967295`
        """
        expanded_community_list_id: NotRequired[pulumi.Input[_builtins.str]]
        extended_community_list_id: NotRequired[pulumi.Input[_builtins.str]]
        ipv4_address_prefix_list_id: NotRequired[pulumi.Input[_builtins.str]]
        ipv4_next_hop_prefix_list_id: NotRequired[pulumi.Input[_builtins.str]]
        ipv6_address_prefix_list_id: NotRequired[pulumi.Input[_builtins.str]]
        ipv6_next_hop_prefix_list_id: NotRequired[pulumi.Input[_builtins.str]]
        metric: NotRequired[pulumi.Input[_builtins.int]]
        """
        Select Metric
          - Range: `0`-`4294967295`
        """
        omp_tag: NotRequired[pulumi.Input[_builtins.int]]
        """
        Select OMP Tag
          - Range: `0`-`4294967295`
        """
        ospf_tag: NotRequired[pulumi.Input[_builtins.int]]
        """
        Select OSPF Tag
          - Range: `0`-`4294967295`
        """
        standard_community_list_criteria: NotRequired[pulumi.Input[_builtins.str]]
        """
        Select a condition such as OR, AND or EXACT
          - Choices: `OR`, `AND`, `EXACT`
        """
        standard_community_lists: NotRequired[pulumi.Input[Sequence[pulumi.Input['ServiceRoutePolicyFeatureSequenceMatchEntryStandardCommunityListArgsDict']]]]
        """
        Select a standard community list
        """
elif False:
    ServiceRoutePolicyFeatureSequenceMatchEntryArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ServiceRoutePolicyFeatureSequenceMatchEntryArgs:
    def __init__(__self__, *,
                 as_path_list_id: Optional[pulumi.Input[_builtins.str]] = None,
                 bgp_local_preference: Optional[pulumi.Input[_builtins.int]] = None,
                 expanded_community_list_id: Optional[pulumi.Input[_builtins.str]] = None,
                 extended_community_list_id: Optional[pulumi.Input[_builtins.str]] = None,
                 ipv4_address_prefix_list_id: Optional[pulumi.Input[_builtins.str]] = None,
                 ipv4_next_hop_prefix_list_id: Optional[pulumi.Input[_builtins.str]] = None,
                 ipv6_address_prefix_list_id: Optional[pulumi.Input[_builtins.str]] = None,
                 ipv6_next_hop_prefix_list_id: Optional[pulumi.Input[_builtins.str]] = None,
                 metric: Optional[pulumi.Input[_builtins.int]] = None,
                 omp_tag: Optional[pulumi.Input[_builtins.int]] = None,
                 ospf_tag: Optional[pulumi.Input[_builtins.int]] = None,
                 standard_community_list_criteria: Optional[pulumi.Input[_builtins.str]] = None,
                 standard_community_lists: Optional[pulumi.Input[Sequence[pulumi.Input['ServiceRoutePolicyFeatureSequenceMatchEntryStandardCommunityListArgs']]]] = None):
        """
        :param pulumi.Input[_builtins.int] bgp_local_preference: BGP Local Preference
                 - Range: `0`-`4294967295`
        :param pulumi.Input[_builtins.int] metric: Select Metric
                 - Range: `0`-`4294967295`
        :param pulumi.Input[_builtins.int] omp_tag: Select OMP Tag
                 - Range: `0`-`4294967295`
        :param pulumi.Input[_builtins.int] ospf_tag: Select OSPF Tag
                 - Range: `0`-`4294967295`
        :param pulumi.Input[_builtins.str] standard_community_list_criteria: Select a condition such as OR, AND or EXACT
                 - Choices: `OR`, `AND`, `EXACT`
        :param pulumi.Input[Sequence[pulumi.Input['ServiceRoutePolicyFeatureSequenceMatchEntryStandardCommunityListArgs']]] standard_community_lists: Select a standard community list
        """
        if as_path_list_id is not None:
            pulumi.set(__self__, "as_path_list_id", as_path_list_id)
        if bgp_local_preference is not None:
            pulumi.set(__self__, "bgp_local_preference", bgp_local_preference)
        if expanded_community_list_id is not None:
            pulumi.set(__self__, "expanded_community_list_id", expanded_community_list_id)
        if extended_community_list_id is not None:
            pulumi.set(__self__, "extended_community_list_id", extended_community_list_id)
        if ipv4_address_prefix_list_id is not None:
            pulumi.set(__self__, "ipv4_address_prefix_list_id", ipv4_address_prefix_list_id)
        if ipv4_next_hop_prefix_list_id is not None:
            pulumi.set(__self__, "ipv4_next_hop_prefix_list_id", ipv4_next_hop_prefix_list_id)
        if ipv6_address_prefix_list_id is not None:
            pulumi.set(__self__, "ipv6_address_prefix_list_id", ipv6_address_prefix_list_id)
        if ipv6_next_hop_prefix_list_id is not None:
            pulumi.set(__self__, "ipv6_next_hop_prefix_list_id", ipv6_next_hop_prefix_list_id)
        if metric is not None:
            pulumi.set(__self__, "metric", metric)
        if omp_tag is not None:
            pulumi.set(__self__, "omp_tag", omp_tag)
        if ospf_tag is not None:
            pulumi.set(__self__, "ospf_tag", ospf_tag)
        if standard_community_list_criteria is not None:
            pulumi.set(__self__, "standard_community_list_criteria", standard_community_list_criteria)
        if standard_community_lists is not None:
            pulumi.set(__self__, "standard_community_lists", standard_community_lists)

    @_builtins.property
    @pulumi.getter(name="asPathListId")
    def as_path_list_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "as_path_list_id")

    @as_path_list_id.setter
    def as_path_list_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "as_path_list_id", value)

    @_builtins.property
    @pulumi.getter(name="bgpLocalPreference")
    def bgp_local_preference(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        BGP Local Preference
          - Range: `0`-`4294967295`
        """
        return pulumi.get(self, "bgp_local_preference")

    @bgp_local_preference.setter
    def bgp_local_preference(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "bgp_local_preference", value)

    @_builtins.property
    @pulumi.getter(name="expandedCommunityListId")
    def expanded_community_list_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "expanded_community_list_id")

    @expanded_community_list_id.setter
    def expanded_community_list_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "expanded_community_list_id", value)

    @_builtins.property
    @pulumi.getter(name="extendedCommunityListId")
    def extended_community_list_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "extended_community_list_id")

    @extended_community_list_id.setter
    def extended_community_list_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "extended_community_list_id", value)

    @_builtins.property
    @pulumi.getter(name="ipv4AddressPrefixListId")
    def ipv4_address_prefix_list_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "ipv4_address_prefix_list_id")

    @ipv4_address_prefix_list_id.setter
    def ipv4_address_prefix_list_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "ipv4_address_prefix_list_id", value)

    @_builtins.property
    @pulumi.getter(name="ipv4NextHopPrefixListId")
    def ipv4_next_hop_prefix_list_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "ipv4_next_hop_prefix_list_id")

    @ipv4_next_hop_prefix_list_id.setter
    def ipv4_next_hop_prefix_list_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "ipv4_next_hop_prefix_list_id", value)

    @_builtins.property
    @pulumi.getter(name="ipv6AddressPrefixListId")
    def ipv6_address_prefix_list_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "ipv6_address_prefix_list_id")

    @ipv6_address_prefix_list_id.setter
    def ipv6_address_prefix_list_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "ipv6_address_prefix_list_id", value)

    @_builtins.property
    @pulumi.getter(name="ipv6NextHopPrefixListId")
    def ipv6_next_hop_prefix_list_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "ipv6_next_hop_prefix_list_id")

    @ipv6_next_hop_prefix_list_id.setter
    def ipv6_next_hop_prefix_list_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "ipv6_next_hop_prefix_list_id", value)

    @_builtins.property
    @pulumi.getter
    def metric(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        Select Metric
          - Range: `0`-`4294967295`
        """
        return pulumi.get(self, "metric")

    @metric.setter
    def metric(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "metric", value)

    @_builtins.property
    @pulumi.getter(name="ompTag")
    def omp_tag(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        Select OMP Tag
          - Range: `0`-`4294967295`
        """
        return pulumi.get(self, "omp_tag")

    @omp_tag.setter
    def omp_tag(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "omp_tag", value)

    @_builtins.property
    @pulumi.getter(name="ospfTag")
    def ospf_tag(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        Select OSPF Tag
          - Range: `0`-`4294967295`
        """
        return pulumi.get(self, "ospf_tag")

    @ospf_tag.setter
    def ospf_tag(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "ospf_tag", value)

    @_builtins.property
    @pulumi.getter(name="standardCommunityListCriteria")
    def standard_community_list_criteria(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Select a condition such as OR, AND or EXACT
          - Choices: `OR`, `AND`, `EXACT`
        """
        return pulumi.get(self, "standard_community_list_criteria")

    @standard_community_list_criteria.setter
    def standard_community_list_criteria(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "standard_community_list_criteria", value)

    @_builtins.property
    @pulumi.getter(name="standardCommunityLists")
    def standard_community_lists(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ServiceRoutePolicyFeatureSequenceMatchEntryStandardCommunityListArgs']]]]:
        """
        Select a standard community list
        """
        return pulumi.get(self, "standard_community_lists")

    @standard_community_lists.setter
    def standard_community_lists(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ServiceRoutePolicyFeatureSequenceMatchEntryStandardCommunityListArgs']]]]):
        pulumi.set(self, "standard_community_lists", value)


if not MYPY:
    class ServiceRoutePolicyFeatureSequenceMatchEntryStandardCommunityListArgsDict(TypedDict):
        id: NotRequired[pulumi.Input[_builtins.str]]
elif False:
    ServiceRoutePolicyFeatureSequenceMatchEntryStandardCommunityListArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ServiceRoutePolicyFeatureSequenceMatchEntryStandardCommunityListArgs:
    def __init__(__self__, *,
                 id: Optional[pulumi.Input[_builtins.str]] = None):
        if id is not None:
            pulumi.set(__self__, "id", id)

    @_builtins.property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "id", value)


if not MYPY:
    class ServiceRoutingBgpFeatureIpv4AggregateAddressArgsDict(TypedDict):
        as_set_path: NotRequired[pulumi.Input[_builtins.bool]]
        """
        Set AS set path information
          - Default value: `false`
        """
        as_set_path_variable: NotRequired[pulumi.Input[_builtins.str]]
        """
        Variable name
        """
        network_address: NotRequired[pulumi.Input[_builtins.str]]
        network_address_variable: NotRequired[pulumi.Input[_builtins.str]]
        """
        Variable name
        """
        subnet_mask: NotRequired[pulumi.Input[_builtins.str]]
        """
        - Choices: `255.255.255.255`, `255.255.255.254`, `255.255.255.252`, `255.255.255.248`, `255.255.255.240`, `255.255.255.224`, `255.255.255.192`, `255.255.255.128`, `255.255.255.0`, `255.255.254.0`, `255.255.252.0`, `255.255.248.0`, `255.255.240.0`, `255.255.224.0`, `255.255.192.0`, `255.255.128.0`, `255.255.0.0`, `255.254.0.0`, `255.252.0.0`, `255.240.0.0`, `255.224.0.0`, `255.192.0.0`, `255.128.0.0`, `255.0.0.0`, `254.0.0.0`, `252.0.0.0`, `248.0.0.0`, `240.0.0.0`, `224.0.0.0`, `192.0.0.0`, `128.0.0.0`, `0.0.0.0`
        """
        subnet_mask_variable: NotRequired[pulumi.Input[_builtins.str]]
        """
        Variable name
        """
        summary_only: NotRequired[pulumi.Input[_builtins.bool]]
        """
        Filter out more specific routes from updates
          - Default value: `false`
        """
        summary_only_variable: NotRequired[pulumi.Input[_builtins.str]]
        """
        Variable name
        """
elif False:
    ServiceRoutingBgpFeatureIpv4AggregateAddressArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ServiceRoutingBgpFeatureIpv4AggregateAddressArgs:
    def __init__(__self__, *,
                 as_set_path: Optional[pulumi.Input[_builtins.bool]] = None,
                 as_set_path_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 network_address: Optional[pulumi.Input[_builtins.str]] = None,
                 network_address_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 subnet_mask: Optional[pulumi.Input[_builtins.str]] = None,
                 subnet_mask_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 summary_only: Optional[pulumi.Input[_builtins.bool]] = None,
                 summary_only_variable: Optional[pulumi.Input[_builtins.str]] = None):
        """
        :param pulumi.Input[_builtins.bool] as_set_path: Set AS set path information
                 - Default value: `false`
        :param pulumi.Input[_builtins.str] as_set_path_variable: Variable name
        :param pulumi.Input[_builtins.str] network_address_variable: Variable name
        :param pulumi.Input[_builtins.str] subnet_mask: - Choices: `255.255.255.255`, `255.255.255.254`, `255.255.255.252`, `255.255.255.248`, `255.255.255.240`, `255.255.255.224`, `255.255.255.192`, `255.255.255.128`, `255.255.255.0`, `255.255.254.0`, `255.255.252.0`, `255.255.248.0`, `255.255.240.0`, `255.255.224.0`, `255.255.192.0`, `255.255.128.0`, `255.255.0.0`, `255.254.0.0`, `255.252.0.0`, `255.240.0.0`, `255.224.0.0`, `255.192.0.0`, `255.128.0.0`, `255.0.0.0`, `254.0.0.0`, `252.0.0.0`, `248.0.0.0`, `240.0.0.0`, `224.0.0.0`, `192.0.0.0`, `128.0.0.0`, `0.0.0.0`
        :param pulumi.Input[_builtins.str] subnet_mask_variable: Variable name
        :param pulumi.Input[_builtins.bool] summary_only: Filter out more specific routes from updates
                 - Default value: `false`
        :param pulumi.Input[_builtins.str] summary_only_variable: Variable name
        """
        if as_set_path is not None:
            pulumi.set(__self__, "as_set_path", as_set_path)
        if as_set_path_variable is not None:
            pulumi.set(__self__, "as_set_path_variable", as_set_path_variable)
        if network_address is not None:
            pulumi.set(__self__, "network_address", network_address)
        if network_address_variable is not None:
            pulumi.set(__self__, "network_address_variable", network_address_variable)
        if subnet_mask is not None:
            pulumi.set(__self__, "subnet_mask", subnet_mask)
        if subnet_mask_variable is not None:
            pulumi.set(__self__, "subnet_mask_variable", subnet_mask_variable)
        if summary_only is not None:
            pulumi.set(__self__, "summary_only", summary_only)
        if summary_only_variable is not None:
            pulumi.set(__self__, "summary_only_variable", summary_only_variable)

    @_builtins.property
    @pulumi.getter(name="asSetPath")
    def as_set_path(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Set AS set path information
          - Default value: `false`
        """
        return pulumi.get(self, "as_set_path")

    @as_set_path.setter
    def as_set_path(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "as_set_path", value)

    @_builtins.property
    @pulumi.getter(name="asSetPathVariable")
    def as_set_path_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "as_set_path_variable")

    @as_set_path_variable.setter
    def as_set_path_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "as_set_path_variable", value)

    @_builtins.property
    @pulumi.getter(name="networkAddress")
    def network_address(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "network_address")

    @network_address.setter
    def network_address(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "network_address", value)

    @_builtins.property
    @pulumi.getter(name="networkAddressVariable")
    def network_address_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "network_address_variable")

    @network_address_variable.setter
    def network_address_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "network_address_variable", value)

    @_builtins.property
    @pulumi.getter(name="subnetMask")
    def subnet_mask(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        - Choices: `255.255.255.255`, `255.255.255.254`, `255.255.255.252`, `255.255.255.248`, `255.255.255.240`, `255.255.255.224`, `255.255.255.192`, `255.255.255.128`, `255.255.255.0`, `255.255.254.0`, `255.255.252.0`, `255.255.248.0`, `255.255.240.0`, `255.255.224.0`, `255.255.192.0`, `255.255.128.0`, `255.255.0.0`, `255.254.0.0`, `255.252.0.0`, `255.240.0.0`, `255.224.0.0`, `255.192.0.0`, `255.128.0.0`, `255.0.0.0`, `254.0.0.0`, `252.0.0.0`, `248.0.0.0`, `240.0.0.0`, `224.0.0.0`, `192.0.0.0`, `128.0.0.0`, `0.0.0.0`
        """
        return pulumi.get(self, "subnet_mask")

    @subnet_mask.setter
    def subnet_mask(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "subnet_mask", value)

    @_builtins.property
    @pulumi.getter(name="subnetMaskVariable")
    def subnet_mask_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "subnet_mask_variable")

    @subnet_mask_variable.setter
    def subnet_mask_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "subnet_mask_variable", value)

    @_builtins.property
    @pulumi.getter(name="summaryOnly")
    def summary_only(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Filter out more specific routes from updates
          - Default value: `false`
        """
        return pulumi.get(self, "summary_only")

    @summary_only.setter
    def summary_only(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "summary_only", value)

    @_builtins.property
    @pulumi.getter(name="summaryOnlyVariable")
    def summary_only_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "summary_only_variable")

    @summary_only_variable.setter
    def summary_only_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "summary_only_variable", value)


if not MYPY:
    class ServiceRoutingBgpFeatureIpv4NeighborArgsDict(TypedDict):
        address: NotRequired[pulumi.Input[_builtins.str]]
        """
        Set neighbor address
        """
        address_families: NotRequired[pulumi.Input[Sequence[pulumi.Input['ServiceRoutingBgpFeatureIpv4NeighborAddressFamilyArgsDict']]]]
        """
        Set BGP address family
        """
        address_variable: NotRequired[pulumi.Input[_builtins.str]]
        """
        Variable name
        """
        allowas_in_number: NotRequired[pulumi.Input[_builtins.int]]
        """
        The number of accept as-path with my AS present in it
          - Range: `1`-`10`
        """
        allowas_in_number_variable: NotRequired[pulumi.Input[_builtins.str]]
        """
        Variable name
        """
        as_override: NotRequired[pulumi.Input[_builtins.bool]]
        """
        Override matching AS-number while sending update
          - Default value: `false`
        """
        as_override_variable: NotRequired[pulumi.Input[_builtins.str]]
        """
        Variable name
        """
        description: NotRequired[pulumi.Input[_builtins.str]]
        """
        Set description
        """
        description_variable: NotRequired[pulumi.Input[_builtins.str]]
        """
        Variable name
        """
        ebgp_multihop: NotRequired[pulumi.Input[_builtins.int]]
        """
        Set TTL value for peers that are not directly connected
          - Range: `1`-`255`
          - Default value: `1`
        """
        ebgp_multihop_variable: NotRequired[pulumi.Input[_builtins.str]]
        """
        Variable name
        """
        hold_time: NotRequired[pulumi.Input[_builtins.int]]
        """
        Interval (seconds) not receiving a keepalive message declares a BGP peer down
          - Range: `0`-`65535`
          - Default value: `180`
        """
        hold_time_variable: NotRequired[pulumi.Input[_builtins.str]]
        """
        Variable name
        """
        keepalive_time: NotRequired[pulumi.Input[_builtins.int]]
        """
        Interval (seconds) of keepalive messages sent to its BGP peer
          - Range: `0`-`65535`
          - Default value: `60`
        """
        keepalive_time_variable: NotRequired[pulumi.Input[_builtins.str]]
        """
        Variable name
        """
        local_as: NotRequired[pulumi.Input[_builtins.int]]
        """
        Set local autonomous number,Local-AS cannot have the local BGP protocol AS number or the AS number of the remote peer.The local-as is valid only if the peer is a true eBGP peer. It does not work for two peers in different sub-ASs in a confederation.
        """
        local_as_variable: NotRequired[pulumi.Input[_builtins.str]]
        """
        Variable name
        """
        next_hop_self: NotRequired[pulumi.Input[_builtins.bool]]
        """
        Set router to be next hop for routes advertised to neighbor
          - Default value: `false`
        """
        next_hop_self_variable: NotRequired[pulumi.Input[_builtins.str]]
        """
        Variable name
        """
        password: NotRequired[pulumi.Input[_builtins.str]]
        """
        Set MD5 password on TCP connection with BGP peer
        """
        password_variable: NotRequired[pulumi.Input[_builtins.str]]
        """
        Variable name
        """
        remote_as: NotRequired[pulumi.Input[_builtins.int]]
        """
        Set remote autonomous system number
        """
        remote_as_variable: NotRequired[pulumi.Input[_builtins.str]]
        """
        Variable name
        """
        send_community: NotRequired[pulumi.Input[_builtins.bool]]
        """
        Send community attribute
          - Default value: `true`
        """
        send_community_variable: NotRequired[pulumi.Input[_builtins.str]]
        """
        Variable name
        """
        send_extended_community: NotRequired[pulumi.Input[_builtins.bool]]
        """
        Send extended community attribute
          - Default value: `true`
        """
        send_extended_community_variable: NotRequired[pulumi.Input[_builtins.str]]
        """
        Variable name
        """
        send_label: NotRequired[pulumi.Input[_builtins.bool]]
        """
        Send label
          - Default value: `false`
        """
        send_label_variable: NotRequired[pulumi.Input[_builtins.str]]
        """
        Variable name
        """
        shutdown: NotRequired[pulumi.Input[_builtins.bool]]
        """
        Enable or disable a BGP neighbor
          - Default value: `false`
        """
        shutdown_variable: NotRequired[pulumi.Input[_builtins.str]]
        """
        Variable name
        """
        update_source_interface: NotRequired[pulumi.Input[_builtins.str]]
        """
        Source interface name for BGP neighbor
        """
        update_source_interface_variable: NotRequired[pulumi.Input[_builtins.str]]
        """
        Variable name
        """
elif False:
    ServiceRoutingBgpFeatureIpv4NeighborArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ServiceRoutingBgpFeatureIpv4NeighborArgs:
    def __init__(__self__, *,
                 address: Optional[pulumi.Input[_builtins.str]] = None,
                 address_families: Optional[pulumi.Input[Sequence[pulumi.Input['ServiceRoutingBgpFeatureIpv4NeighborAddressFamilyArgs']]]] = None,
                 address_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 allowas_in_number: Optional[pulumi.Input[_builtins.int]] = None,
                 allowas_in_number_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 as_override: Optional[pulumi.Input[_builtins.bool]] = None,
                 as_override_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 description: Optional[pulumi.Input[_builtins.str]] = None,
                 description_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 ebgp_multihop: Optional[pulumi.Input[_builtins.int]] = None,
                 ebgp_multihop_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 hold_time: Optional[pulumi.Input[_builtins.int]] = None,
                 hold_time_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 keepalive_time: Optional[pulumi.Input[_builtins.int]] = None,
                 keepalive_time_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 local_as: Optional[pulumi.Input[_builtins.int]] = None,
                 local_as_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 next_hop_self: Optional[pulumi.Input[_builtins.bool]] = None,
                 next_hop_self_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 password: Optional[pulumi.Input[_builtins.str]] = None,
                 password_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 remote_as: Optional[pulumi.Input[_builtins.int]] = None,
                 remote_as_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 send_community: Optional[pulumi.Input[_builtins.bool]] = None,
                 send_community_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 send_extended_community: Optional[pulumi.Input[_builtins.bool]] = None,
                 send_extended_community_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 send_label: Optional[pulumi.Input[_builtins.bool]] = None,
                 send_label_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 shutdown: Optional[pulumi.Input[_builtins.bool]] = None,
                 shutdown_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 update_source_interface: Optional[pulumi.Input[_builtins.str]] = None,
                 update_source_interface_variable: Optional[pulumi.Input[_builtins.str]] = None):
        """
        :param pulumi.Input[_builtins.str] address: Set neighbor address
        :param pulumi.Input[Sequence[pulumi.Input['ServiceRoutingBgpFeatureIpv4NeighborAddressFamilyArgs']]] address_families: Set BGP address family
        :param pulumi.Input[_builtins.str] address_variable: Variable name
        :param pulumi.Input[_builtins.int] allowas_in_number: The number of accept as-path with my AS present in it
                 - Range: `1`-`10`
        :param pulumi.Input[_builtins.str] allowas_in_number_variable: Variable name
        :param pulumi.Input[_builtins.bool] as_override: Override matching AS-number while sending update
                 - Default value: `false`
        :param pulumi.Input[_builtins.str] as_override_variable: Variable name
        :param pulumi.Input[_builtins.str] description: Set description
        :param pulumi.Input[_builtins.str] description_variable: Variable name
        :param pulumi.Input[_builtins.int] ebgp_multihop: Set TTL value for peers that are not directly connected
                 - Range: `1`-`255`
                 - Default value: `1`
        :param pulumi.Input[_builtins.str] ebgp_multihop_variable: Variable name
        :param pulumi.Input[_builtins.int] hold_time: Interval (seconds) not receiving a keepalive message declares a BGP peer down
                 - Range: `0`-`65535`
                 - Default value: `180`
        :param pulumi.Input[_builtins.str] hold_time_variable: Variable name
        :param pulumi.Input[_builtins.int] keepalive_time: Interval (seconds) of keepalive messages sent to its BGP peer
                 - Range: `0`-`65535`
                 - Default value: `60`
        :param pulumi.Input[_builtins.str] keepalive_time_variable: Variable name
        :param pulumi.Input[_builtins.int] local_as: Set local autonomous number,Local-AS cannot have the local BGP protocol AS number or the AS number of the remote peer.The local-as is valid only if the peer is a true eBGP peer. It does not work for two peers in different sub-ASs in a confederation.
        :param pulumi.Input[_builtins.str] local_as_variable: Variable name
        :param pulumi.Input[_builtins.bool] next_hop_self: Set router to be next hop for routes advertised to neighbor
                 - Default value: `false`
        :param pulumi.Input[_builtins.str] next_hop_self_variable: Variable name
        :param pulumi.Input[_builtins.str] password: Set MD5 password on TCP connection with BGP peer
        :param pulumi.Input[_builtins.str] password_variable: Variable name
        :param pulumi.Input[_builtins.int] remote_as: Set remote autonomous system number
        :param pulumi.Input[_builtins.str] remote_as_variable: Variable name
        :param pulumi.Input[_builtins.bool] send_community: Send community attribute
                 - Default value: `true`
        :param pulumi.Input[_builtins.str] send_community_variable: Variable name
        :param pulumi.Input[_builtins.bool] send_extended_community: Send extended community attribute
                 - Default value: `true`
        :param pulumi.Input[_builtins.str] send_extended_community_variable: Variable name
        :param pulumi.Input[_builtins.bool] send_label: Send label
                 - Default value: `false`
        :param pulumi.Input[_builtins.str] send_label_variable: Variable name
        :param pulumi.Input[_builtins.bool] shutdown: Enable or disable a BGP neighbor
                 - Default value: `false`
        :param pulumi.Input[_builtins.str] shutdown_variable: Variable name
        :param pulumi.Input[_builtins.str] update_source_interface: Source interface name for BGP neighbor
        :param pulumi.Input[_builtins.str] update_source_interface_variable: Variable name
        """
        if address is not None:
            pulumi.set(__self__, "address", address)
        if address_families is not None:
            pulumi.set(__self__, "address_families", address_families)
        if address_variable is not None:
            pulumi.set(__self__, "address_variable", address_variable)
        if allowas_in_number is not None:
            pulumi.set(__self__, "allowas_in_number", allowas_in_number)
        if allowas_in_number_variable is not None:
            pulumi.set(__self__, "allowas_in_number_variable", allowas_in_number_variable)
        if as_override is not None:
            pulumi.set(__self__, "as_override", as_override)
        if as_override_variable is not None:
            pulumi.set(__self__, "as_override_variable", as_override_variable)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if description_variable is not None:
            pulumi.set(__self__, "description_variable", description_variable)
        if ebgp_multihop is not None:
            pulumi.set(__self__, "ebgp_multihop", ebgp_multihop)
        if ebgp_multihop_variable is not None:
            pulumi.set(__self__, "ebgp_multihop_variable", ebgp_multihop_variable)
        if hold_time is not None:
            pulumi.set(__self__, "hold_time", hold_time)
        if hold_time_variable is not None:
            pulumi.set(__self__, "hold_time_variable", hold_time_variable)
        if keepalive_time is not None:
            pulumi.set(__self__, "keepalive_time", keepalive_time)
        if keepalive_time_variable is not None:
            pulumi.set(__self__, "keepalive_time_variable", keepalive_time_variable)
        if local_as is not None:
            pulumi.set(__self__, "local_as", local_as)
        if local_as_variable is not None:
            pulumi.set(__self__, "local_as_variable", local_as_variable)
        if next_hop_self is not None:
            pulumi.set(__self__, "next_hop_self", next_hop_self)
        if next_hop_self_variable is not None:
            pulumi.set(__self__, "next_hop_self_variable", next_hop_self_variable)
        if password is not None:
            pulumi.set(__self__, "password", password)
        if password_variable is not None:
            pulumi.set(__self__, "password_variable", password_variable)
        if remote_as is not None:
            pulumi.set(__self__, "remote_as", remote_as)
        if remote_as_variable is not None:
            pulumi.set(__self__, "remote_as_variable", remote_as_variable)
        if send_community is not None:
            pulumi.set(__self__, "send_community", send_community)
        if send_community_variable is not None:
            pulumi.set(__self__, "send_community_variable", send_community_variable)
        if send_extended_community is not None:
            pulumi.set(__self__, "send_extended_community", send_extended_community)
        if send_extended_community_variable is not None:
            pulumi.set(__self__, "send_extended_community_variable", send_extended_community_variable)
        if send_label is not None:
            pulumi.set(__self__, "send_label", send_label)
        if send_label_variable is not None:
            pulumi.set(__self__, "send_label_variable", send_label_variable)
        if shutdown is not None:
            pulumi.set(__self__, "shutdown", shutdown)
        if shutdown_variable is not None:
            pulumi.set(__self__, "shutdown_variable", shutdown_variable)
        if update_source_interface is not None:
            pulumi.set(__self__, "update_source_interface", update_source_interface)
        if update_source_interface_variable is not None:
            pulumi.set(__self__, "update_source_interface_variable", update_source_interface_variable)

    @_builtins.property
    @pulumi.getter
    def address(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Set neighbor address
        """
        return pulumi.get(self, "address")

    @address.setter
    def address(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "address", value)

    @_builtins.property
    @pulumi.getter(name="addressFamilies")
    def address_families(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ServiceRoutingBgpFeatureIpv4NeighborAddressFamilyArgs']]]]:
        """
        Set BGP address family
        """
        return pulumi.get(self, "address_families")

    @address_families.setter
    def address_families(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ServiceRoutingBgpFeatureIpv4NeighborAddressFamilyArgs']]]]):
        pulumi.set(self, "address_families", value)

    @_builtins.property
    @pulumi.getter(name="addressVariable")
    def address_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "address_variable")

    @address_variable.setter
    def address_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "address_variable", value)

    @_builtins.property
    @pulumi.getter(name="allowasInNumber")
    def allowas_in_number(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        The number of accept as-path with my AS present in it
          - Range: `1`-`10`
        """
        return pulumi.get(self, "allowas_in_number")

    @allowas_in_number.setter
    def allowas_in_number(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "allowas_in_number", value)

    @_builtins.property
    @pulumi.getter(name="allowasInNumberVariable")
    def allowas_in_number_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "allowas_in_number_variable")

    @allowas_in_number_variable.setter
    def allowas_in_number_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "allowas_in_number_variable", value)

    @_builtins.property
    @pulumi.getter(name="asOverride")
    def as_override(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Override matching AS-number while sending update
          - Default value: `false`
        """
        return pulumi.get(self, "as_override")

    @as_override.setter
    def as_override(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "as_override", value)

    @_builtins.property
    @pulumi.getter(name="asOverrideVariable")
    def as_override_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "as_override_variable")

    @as_override_variable.setter
    def as_override_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "as_override_variable", value)

    @_builtins.property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Set description
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "description", value)

    @_builtins.property
    @pulumi.getter(name="descriptionVariable")
    def description_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "description_variable")

    @description_variable.setter
    def description_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "description_variable", value)

    @_builtins.property
    @pulumi.getter(name="ebgpMultihop")
    def ebgp_multihop(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        Set TTL value for peers that are not directly connected
          - Range: `1`-`255`
          - Default value: `1`
        """
        return pulumi.get(self, "ebgp_multihop")

    @ebgp_multihop.setter
    def ebgp_multihop(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "ebgp_multihop", value)

    @_builtins.property
    @pulumi.getter(name="ebgpMultihopVariable")
    def ebgp_multihop_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "ebgp_multihop_variable")

    @ebgp_multihop_variable.setter
    def ebgp_multihop_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "ebgp_multihop_variable", value)

    @_builtins.property
    @pulumi.getter(name="holdTime")
    def hold_time(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        Interval (seconds) not receiving a keepalive message declares a BGP peer down
          - Range: `0`-`65535`
          - Default value: `180`
        """
        return pulumi.get(self, "hold_time")

    @hold_time.setter
    def hold_time(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "hold_time", value)

    @_builtins.property
    @pulumi.getter(name="holdTimeVariable")
    def hold_time_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "hold_time_variable")

    @hold_time_variable.setter
    def hold_time_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "hold_time_variable", value)

    @_builtins.property
    @pulumi.getter(name="keepaliveTime")
    def keepalive_time(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        Interval (seconds) of keepalive messages sent to its BGP peer
          - Range: `0`-`65535`
          - Default value: `60`
        """
        return pulumi.get(self, "keepalive_time")

    @keepalive_time.setter
    def keepalive_time(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "keepalive_time", value)

    @_builtins.property
    @pulumi.getter(name="keepaliveTimeVariable")
    def keepalive_time_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "keepalive_time_variable")

    @keepalive_time_variable.setter
    def keepalive_time_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "keepalive_time_variable", value)

    @_builtins.property
    @pulumi.getter(name="localAs")
    def local_as(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        Set local autonomous number,Local-AS cannot have the local BGP protocol AS number or the AS number of the remote peer.The local-as is valid only if the peer is a true eBGP peer. It does not work for two peers in different sub-ASs in a confederation.
        """
        return pulumi.get(self, "local_as")

    @local_as.setter
    def local_as(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "local_as", value)

    @_builtins.property
    @pulumi.getter(name="localAsVariable")
    def local_as_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "local_as_variable")

    @local_as_variable.setter
    def local_as_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "local_as_variable", value)

    @_builtins.property
    @pulumi.getter(name="nextHopSelf")
    def next_hop_self(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Set router to be next hop for routes advertised to neighbor
          - Default value: `false`
        """
        return pulumi.get(self, "next_hop_self")

    @next_hop_self.setter
    def next_hop_self(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "next_hop_self", value)

    @_builtins.property
    @pulumi.getter(name="nextHopSelfVariable")
    def next_hop_self_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "next_hop_self_variable")

    @next_hop_self_variable.setter
    def next_hop_self_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "next_hop_self_variable", value)

    @_builtins.property
    @pulumi.getter
    def password(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Set MD5 password on TCP connection with BGP peer
        """
        return pulumi.get(self, "password")

    @password.setter
    def password(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "password", value)

    @_builtins.property
    @pulumi.getter(name="passwordVariable")
    def password_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "password_variable")

    @password_variable.setter
    def password_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "password_variable", value)

    @_builtins.property
    @pulumi.getter(name="remoteAs")
    def remote_as(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        Set remote autonomous system number
        """
        return pulumi.get(self, "remote_as")

    @remote_as.setter
    def remote_as(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "remote_as", value)

    @_builtins.property
    @pulumi.getter(name="remoteAsVariable")
    def remote_as_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "remote_as_variable")

    @remote_as_variable.setter
    def remote_as_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "remote_as_variable", value)

    @_builtins.property
    @pulumi.getter(name="sendCommunity")
    def send_community(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Send community attribute
          - Default value: `true`
        """
        return pulumi.get(self, "send_community")

    @send_community.setter
    def send_community(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "send_community", value)

    @_builtins.property
    @pulumi.getter(name="sendCommunityVariable")
    def send_community_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "send_community_variable")

    @send_community_variable.setter
    def send_community_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "send_community_variable", value)

    @_builtins.property
    @pulumi.getter(name="sendExtendedCommunity")
    def send_extended_community(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Send extended community attribute
          - Default value: `true`
        """
        return pulumi.get(self, "send_extended_community")

    @send_extended_community.setter
    def send_extended_community(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "send_extended_community", value)

    @_builtins.property
    @pulumi.getter(name="sendExtendedCommunityVariable")
    def send_extended_community_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "send_extended_community_variable")

    @send_extended_community_variable.setter
    def send_extended_community_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "send_extended_community_variable", value)

    @_builtins.property
    @pulumi.getter(name="sendLabel")
    def send_label(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Send label
          - Default value: `false`
        """
        return pulumi.get(self, "send_label")

    @send_label.setter
    def send_label(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "send_label", value)

    @_builtins.property
    @pulumi.getter(name="sendLabelVariable")
    def send_label_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "send_label_variable")

    @send_label_variable.setter
    def send_label_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "send_label_variable", value)

    @_builtins.property
    @pulumi.getter
    def shutdown(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Enable or disable a BGP neighbor
          - Default value: `false`
        """
        return pulumi.get(self, "shutdown")

    @shutdown.setter
    def shutdown(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "shutdown", value)

    @_builtins.property
    @pulumi.getter(name="shutdownVariable")
    def shutdown_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "shutdown_variable")

    @shutdown_variable.setter
    def shutdown_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "shutdown_variable", value)

    @_builtins.property
    @pulumi.getter(name="updateSourceInterface")
    def update_source_interface(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Source interface name for BGP neighbor
        """
        return pulumi.get(self, "update_source_interface")

    @update_source_interface.setter
    def update_source_interface(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "update_source_interface", value)

    @_builtins.property
    @pulumi.getter(name="updateSourceInterfaceVariable")
    def update_source_interface_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "update_source_interface_variable")

    @update_source_interface_variable.setter
    def update_source_interface_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "update_source_interface_variable", value)


if not MYPY:
    class ServiceRoutingBgpFeatureIpv4NeighborAddressFamilyArgsDict(TypedDict):
        disable_peer_max_number_of_prefixes: NotRequired[pulumi.Input[_builtins.int]]
        """
        Set maximum number of prefixes accepted from BGP peer, Attribute conditional on `policy_type` being equal to `disable-peer`
          - Range: `1`-`4294967295`
        """
        disable_peer_max_number_of_prefixes_variable: NotRequired[pulumi.Input[_builtins.str]]
        """
        Variable name, Attribute conditional on `policy_type` being equal to `disable-peer`
        """
        disable_peer_threshold: NotRequired[pulumi.Input[_builtins.int]]
        """
        Set threshold(1 to 100) at which to generate a warning message, Attribute conditional on `policy_type` being equal to `disable-peer`
          - Range: `1`-`100`
          - Default value: `75`
        """
        disable_peer_threshold_variable: NotRequired[pulumi.Input[_builtins.str]]
        """
        Variable name, Attribute conditional on `policy_type` being equal to `disable-peer`
        """
        family_type: NotRequired[pulumi.Input[_builtins.str]]
        """
        Set IPv4 unicast address family
        """
        in_route_policy_id: NotRequired[pulumi.Input[_builtins.str]]
        out_route_policy_id: NotRequired[pulumi.Input[_builtins.str]]
        policy_type: NotRequired[pulumi.Input[_builtins.str]]
        """
        Neighbor received maximum prefix policy is disabled.
          - Choices: `restart`, `off`, `warning-only`, `disable-peer`
        """
        restart_interval: NotRequired[pulumi.Input[_builtins.int]]
        """
        Set the restart interval(minutes) when to restart BGP connection if threshold is exceeded, Attribute conditional on `policy_type` being equal to `restart`
          - Range: `1`-`65535`
        """
        restart_interval_variable: NotRequired[pulumi.Input[_builtins.str]]
        """
        Variable name, Attribute conditional on `policy_type` being equal to `restart`
        """
        restart_max_number_of_prefixes: NotRequired[pulumi.Input[_builtins.int]]
        """
        Set maximum number of prefixes accepted from BGP peer, Attribute conditional on `policy_type` being equal to `restart`
          - Range: `1`-`4294967295`
        """
        restart_max_number_of_prefixes_variable: NotRequired[pulumi.Input[_builtins.str]]
        """
        Variable name, Attribute conditional on `policy_type` being equal to `restart`
        """
        restart_threshold: NotRequired[pulumi.Input[_builtins.int]]
        """
        Set threshold(1 to 100) at which to generate a warning message, Attribute conditional on `policy_type` being equal to `restart`
          - Range: `1`-`100`
          - Default value: `75`
        """
        restart_threshold_variable: NotRequired[pulumi.Input[_builtins.str]]
        """
        Variable name, Attribute conditional on `policy_type` being equal to `restart`
        """
        warning_message_max_number_of_prefixes: NotRequired[pulumi.Input[_builtins.int]]
        """
        Set maximum number of prefixes accepted from BGP peer, Attribute conditional on `policy_type` being equal to `warning-only`
          - Range: `1`-`4294967295`
        """
        warning_message_max_number_of_prefixes_variable: NotRequired[pulumi.Input[_builtins.str]]
        """
        Variable name, Attribute conditional on `policy_type` being equal to `warning-only`
        """
        warning_message_threshold: NotRequired[pulumi.Input[_builtins.int]]
        """
        Set threshold(1 to 100) at which to generate a warning message, Attribute conditional on `policy_type` being equal to `warning-only`
          - Range: `1`-`100`
          - Default value: `75`
        """
        warning_message_threshold_variable: NotRequired[pulumi.Input[_builtins.str]]
        """
        Variable name, Attribute conditional on `policy_type` being equal to `warning-only`
        """
elif False:
    ServiceRoutingBgpFeatureIpv4NeighborAddressFamilyArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ServiceRoutingBgpFeatureIpv4NeighborAddressFamilyArgs:
    def __init__(__self__, *,
                 disable_peer_max_number_of_prefixes: Optional[pulumi.Input[_builtins.int]] = None,
                 disable_peer_max_number_of_prefixes_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 disable_peer_threshold: Optional[pulumi.Input[_builtins.int]] = None,
                 disable_peer_threshold_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 family_type: Optional[pulumi.Input[_builtins.str]] = None,
                 in_route_policy_id: Optional[pulumi.Input[_builtins.str]] = None,
                 out_route_policy_id: Optional[pulumi.Input[_builtins.str]] = None,
                 policy_type: Optional[pulumi.Input[_builtins.str]] = None,
                 restart_interval: Optional[pulumi.Input[_builtins.int]] = None,
                 restart_interval_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 restart_max_number_of_prefixes: Optional[pulumi.Input[_builtins.int]] = None,
                 restart_max_number_of_prefixes_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 restart_threshold: Optional[pulumi.Input[_builtins.int]] = None,
                 restart_threshold_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 warning_message_max_number_of_prefixes: Optional[pulumi.Input[_builtins.int]] = None,
                 warning_message_max_number_of_prefixes_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 warning_message_threshold: Optional[pulumi.Input[_builtins.int]] = None,
                 warning_message_threshold_variable: Optional[pulumi.Input[_builtins.str]] = None):
        """
        :param pulumi.Input[_builtins.int] disable_peer_max_number_of_prefixes: Set maximum number of prefixes accepted from BGP peer, Attribute conditional on `policy_type` being equal to `disable-peer`
                 - Range: `1`-`4294967295`
        :param pulumi.Input[_builtins.str] disable_peer_max_number_of_prefixes_variable: Variable name, Attribute conditional on `policy_type` being equal to `disable-peer`
        :param pulumi.Input[_builtins.int] disable_peer_threshold: Set threshold(1 to 100) at which to generate a warning message, Attribute conditional on `policy_type` being equal to `disable-peer`
                 - Range: `1`-`100`
                 - Default value: `75`
        :param pulumi.Input[_builtins.str] disable_peer_threshold_variable: Variable name, Attribute conditional on `policy_type` being equal to `disable-peer`
        :param pulumi.Input[_builtins.str] family_type: Set IPv4 unicast address family
        :param pulumi.Input[_builtins.str] policy_type: Neighbor received maximum prefix policy is disabled.
                 - Choices: `restart`, `off`, `warning-only`, `disable-peer`
        :param pulumi.Input[_builtins.int] restart_interval: Set the restart interval(minutes) when to restart BGP connection if threshold is exceeded, Attribute conditional on `policy_type` being equal to `restart`
                 - Range: `1`-`65535`
        :param pulumi.Input[_builtins.str] restart_interval_variable: Variable name, Attribute conditional on `policy_type` being equal to `restart`
        :param pulumi.Input[_builtins.int] restart_max_number_of_prefixes: Set maximum number of prefixes accepted from BGP peer, Attribute conditional on `policy_type` being equal to `restart`
                 - Range: `1`-`4294967295`
        :param pulumi.Input[_builtins.str] restart_max_number_of_prefixes_variable: Variable name, Attribute conditional on `policy_type` being equal to `restart`
        :param pulumi.Input[_builtins.int] restart_threshold: Set threshold(1 to 100) at which to generate a warning message, Attribute conditional on `policy_type` being equal to `restart`
                 - Range: `1`-`100`
                 - Default value: `75`
        :param pulumi.Input[_builtins.str] restart_threshold_variable: Variable name, Attribute conditional on `policy_type` being equal to `restart`
        :param pulumi.Input[_builtins.int] warning_message_max_number_of_prefixes: Set maximum number of prefixes accepted from BGP peer, Attribute conditional on `policy_type` being equal to `warning-only`
                 - Range: `1`-`4294967295`
        :param pulumi.Input[_builtins.str] warning_message_max_number_of_prefixes_variable: Variable name, Attribute conditional on `policy_type` being equal to `warning-only`
        :param pulumi.Input[_builtins.int] warning_message_threshold: Set threshold(1 to 100) at which to generate a warning message, Attribute conditional on `policy_type` being equal to `warning-only`
                 - Range: `1`-`100`
                 - Default value: `75`
        :param pulumi.Input[_builtins.str] warning_message_threshold_variable: Variable name, Attribute conditional on `policy_type` being equal to `warning-only`
        """
        if disable_peer_max_number_of_prefixes is not None:
            pulumi.set(__self__, "disable_peer_max_number_of_prefixes", disable_peer_max_number_of_prefixes)
        if disable_peer_max_number_of_prefixes_variable is not None:
            pulumi.set(__self__, "disable_peer_max_number_of_prefixes_variable", disable_peer_max_number_of_prefixes_variable)
        if disable_peer_threshold is not None:
            pulumi.set(__self__, "disable_peer_threshold", disable_peer_threshold)
        if disable_peer_threshold_variable is not None:
            pulumi.set(__self__, "disable_peer_threshold_variable", disable_peer_threshold_variable)
        if family_type is not None:
            pulumi.set(__self__, "family_type", family_type)
        if in_route_policy_id is not None:
            pulumi.set(__self__, "in_route_policy_id", in_route_policy_id)
        if out_route_policy_id is not None:
            pulumi.set(__self__, "out_route_policy_id", out_route_policy_id)
        if policy_type is not None:
            pulumi.set(__self__, "policy_type", policy_type)
        if restart_interval is not None:
            pulumi.set(__self__, "restart_interval", restart_interval)
        if restart_interval_variable is not None:
            pulumi.set(__self__, "restart_interval_variable", restart_interval_variable)
        if restart_max_number_of_prefixes is not None:
            pulumi.set(__self__, "restart_max_number_of_prefixes", restart_max_number_of_prefixes)
        if restart_max_number_of_prefixes_variable is not None:
            pulumi.set(__self__, "restart_max_number_of_prefixes_variable", restart_max_number_of_prefixes_variable)
        if restart_threshold is not None:
            pulumi.set(__self__, "restart_threshold", restart_threshold)
        if restart_threshold_variable is not None:
            pulumi.set(__self__, "restart_threshold_variable", restart_threshold_variable)
        if warning_message_max_number_of_prefixes is not None:
            pulumi.set(__self__, "warning_message_max_number_of_prefixes", warning_message_max_number_of_prefixes)
        if warning_message_max_number_of_prefixes_variable is not None:
            pulumi.set(__self__, "warning_message_max_number_of_prefixes_variable", warning_message_max_number_of_prefixes_variable)
        if warning_message_threshold is not None:
            pulumi.set(__self__, "warning_message_threshold", warning_message_threshold)
        if warning_message_threshold_variable is not None:
            pulumi.set(__self__, "warning_message_threshold_variable", warning_message_threshold_variable)

    @_builtins.property
    @pulumi.getter(name="disablePeerMaxNumberOfPrefixes")
    def disable_peer_max_number_of_prefixes(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        Set maximum number of prefixes accepted from BGP peer, Attribute conditional on `policy_type` being equal to `disable-peer`
          - Range: `1`-`4294967295`
        """
        return pulumi.get(self, "disable_peer_max_number_of_prefixes")

    @disable_peer_max_number_of_prefixes.setter
    def disable_peer_max_number_of_prefixes(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "disable_peer_max_number_of_prefixes", value)

    @_builtins.property
    @pulumi.getter(name="disablePeerMaxNumberOfPrefixesVariable")
    def disable_peer_max_number_of_prefixes_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name, Attribute conditional on `policy_type` being equal to `disable-peer`
        """
        return pulumi.get(self, "disable_peer_max_number_of_prefixes_variable")

    @disable_peer_max_number_of_prefixes_variable.setter
    def disable_peer_max_number_of_prefixes_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "disable_peer_max_number_of_prefixes_variable", value)

    @_builtins.property
    @pulumi.getter(name="disablePeerThreshold")
    def disable_peer_threshold(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        Set threshold(1 to 100) at which to generate a warning message, Attribute conditional on `policy_type` being equal to `disable-peer`
          - Range: `1`-`100`
          - Default value: `75`
        """
        return pulumi.get(self, "disable_peer_threshold")

    @disable_peer_threshold.setter
    def disable_peer_threshold(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "disable_peer_threshold", value)

    @_builtins.property
    @pulumi.getter(name="disablePeerThresholdVariable")
    def disable_peer_threshold_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name, Attribute conditional on `policy_type` being equal to `disable-peer`
        """
        return pulumi.get(self, "disable_peer_threshold_variable")

    @disable_peer_threshold_variable.setter
    def disable_peer_threshold_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "disable_peer_threshold_variable", value)

    @_builtins.property
    @pulumi.getter(name="familyType")
    def family_type(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Set IPv4 unicast address family
        """
        return pulumi.get(self, "family_type")

    @family_type.setter
    def family_type(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "family_type", value)

    @_builtins.property
    @pulumi.getter(name="inRoutePolicyId")
    def in_route_policy_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "in_route_policy_id")

    @in_route_policy_id.setter
    def in_route_policy_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "in_route_policy_id", value)

    @_builtins.property
    @pulumi.getter(name="outRoutePolicyId")
    def out_route_policy_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "out_route_policy_id")

    @out_route_policy_id.setter
    def out_route_policy_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "out_route_policy_id", value)

    @_builtins.property
    @pulumi.getter(name="policyType")
    def policy_type(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Neighbor received maximum prefix policy is disabled.
          - Choices: `restart`, `off`, `warning-only`, `disable-peer`
        """
        return pulumi.get(self, "policy_type")

    @policy_type.setter
    def policy_type(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "policy_type", value)

    @_builtins.property
    @pulumi.getter(name="restartInterval")
    def restart_interval(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        Set the restart interval(minutes) when to restart BGP connection if threshold is exceeded, Attribute conditional on `policy_type` being equal to `restart`
          - Range: `1`-`65535`
        """
        return pulumi.get(self, "restart_interval")

    @restart_interval.setter
    def restart_interval(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "restart_interval", value)

    @_builtins.property
    @pulumi.getter(name="restartIntervalVariable")
    def restart_interval_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name, Attribute conditional on `policy_type` being equal to `restart`
        """
        return pulumi.get(self, "restart_interval_variable")

    @restart_interval_variable.setter
    def restart_interval_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "restart_interval_variable", value)

    @_builtins.property
    @pulumi.getter(name="restartMaxNumberOfPrefixes")
    def restart_max_number_of_prefixes(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        Set maximum number of prefixes accepted from BGP peer, Attribute conditional on `policy_type` being equal to `restart`
          - Range: `1`-`4294967295`
        """
        return pulumi.get(self, "restart_max_number_of_prefixes")

    @restart_max_number_of_prefixes.setter
    def restart_max_number_of_prefixes(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "restart_max_number_of_prefixes", value)

    @_builtins.property
    @pulumi.getter(name="restartMaxNumberOfPrefixesVariable")
    def restart_max_number_of_prefixes_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name, Attribute conditional on `policy_type` being equal to `restart`
        """
        return pulumi.get(self, "restart_max_number_of_prefixes_variable")

    @restart_max_number_of_prefixes_variable.setter
    def restart_max_number_of_prefixes_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "restart_max_number_of_prefixes_variable", value)

    @_builtins.property
    @pulumi.getter(name="restartThreshold")
    def restart_threshold(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        Set threshold(1 to 100) at which to generate a warning message, Attribute conditional on `policy_type` being equal to `restart`
          - Range: `1`-`100`
          - Default value: `75`
        """
        return pulumi.get(self, "restart_threshold")

    @restart_threshold.setter
    def restart_threshold(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "restart_threshold", value)

    @_builtins.property
    @pulumi.getter(name="restartThresholdVariable")
    def restart_threshold_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name, Attribute conditional on `policy_type` being equal to `restart`
        """
        return pulumi.get(self, "restart_threshold_variable")

    @restart_threshold_variable.setter
    def restart_threshold_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "restart_threshold_variable", value)

    @_builtins.property
    @pulumi.getter(name="warningMessageMaxNumberOfPrefixes")
    def warning_message_max_number_of_prefixes(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        Set maximum number of prefixes accepted from BGP peer, Attribute conditional on `policy_type` being equal to `warning-only`
          - Range: `1`-`4294967295`
        """
        return pulumi.get(self, "warning_message_max_number_of_prefixes")

    @warning_message_max_number_of_prefixes.setter
    def warning_message_max_number_of_prefixes(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "warning_message_max_number_of_prefixes", value)

    @_builtins.property
    @pulumi.getter(name="warningMessageMaxNumberOfPrefixesVariable")
    def warning_message_max_number_of_prefixes_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name, Attribute conditional on `policy_type` being equal to `warning-only`
        """
        return pulumi.get(self, "warning_message_max_number_of_prefixes_variable")

    @warning_message_max_number_of_prefixes_variable.setter
    def warning_message_max_number_of_prefixes_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "warning_message_max_number_of_prefixes_variable", value)

    @_builtins.property
    @pulumi.getter(name="warningMessageThreshold")
    def warning_message_threshold(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        Set threshold(1 to 100) at which to generate a warning message, Attribute conditional on `policy_type` being equal to `warning-only`
          - Range: `1`-`100`
          - Default value: `75`
        """
        return pulumi.get(self, "warning_message_threshold")

    @warning_message_threshold.setter
    def warning_message_threshold(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "warning_message_threshold", value)

    @_builtins.property
    @pulumi.getter(name="warningMessageThresholdVariable")
    def warning_message_threshold_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name, Attribute conditional on `policy_type` being equal to `warning-only`
        """
        return pulumi.get(self, "warning_message_threshold_variable")

    @warning_message_threshold_variable.setter
    def warning_message_threshold_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "warning_message_threshold_variable", value)


if not MYPY:
    class ServiceRoutingBgpFeatureIpv4NetworkArgsDict(TypedDict):
        network_address: NotRequired[pulumi.Input[_builtins.str]]
        network_address_variable: NotRequired[pulumi.Input[_builtins.str]]
        """
        Variable name
        """
        subnet_mask: NotRequired[pulumi.Input[_builtins.str]]
        """
        - Choices: `255.255.255.255`, `255.255.255.254`, `255.255.255.252`, `255.255.255.248`, `255.255.255.240`, `255.255.255.224`, `255.255.255.192`, `255.255.255.128`, `255.255.255.0`, `255.255.254.0`, `255.255.252.0`, `255.255.248.0`, `255.255.240.0`, `255.255.224.0`, `255.255.192.0`, `255.255.128.0`, `255.255.0.0`, `255.254.0.0`, `255.252.0.0`, `255.240.0.0`, `255.224.0.0`, `255.192.0.0`, `255.128.0.0`, `255.0.0.0`, `254.0.0.0`, `252.0.0.0`, `248.0.0.0`, `240.0.0.0`, `224.0.0.0`, `192.0.0.0`, `128.0.0.0`, `0.0.0.0`
        """
        subnet_mask_variable: NotRequired[pulumi.Input[_builtins.str]]
        """
        Variable name
        """
elif False:
    ServiceRoutingBgpFeatureIpv4NetworkArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ServiceRoutingBgpFeatureIpv4NetworkArgs:
    def __init__(__self__, *,
                 network_address: Optional[pulumi.Input[_builtins.str]] = None,
                 network_address_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 subnet_mask: Optional[pulumi.Input[_builtins.str]] = None,
                 subnet_mask_variable: Optional[pulumi.Input[_builtins.str]] = None):
        """
        :param pulumi.Input[_builtins.str] network_address_variable: Variable name
        :param pulumi.Input[_builtins.str] subnet_mask: - Choices: `255.255.255.255`, `255.255.255.254`, `255.255.255.252`, `255.255.255.248`, `255.255.255.240`, `255.255.255.224`, `255.255.255.192`, `255.255.255.128`, `255.255.255.0`, `255.255.254.0`, `255.255.252.0`, `255.255.248.0`, `255.255.240.0`, `255.255.224.0`, `255.255.192.0`, `255.255.128.0`, `255.255.0.0`, `255.254.0.0`, `255.252.0.0`, `255.240.0.0`, `255.224.0.0`, `255.192.0.0`, `255.128.0.0`, `255.0.0.0`, `254.0.0.0`, `252.0.0.0`, `248.0.0.0`, `240.0.0.0`, `224.0.0.0`, `192.0.0.0`, `128.0.0.0`, `0.0.0.0`
        :param pulumi.Input[_builtins.str] subnet_mask_variable: Variable name
        """
        if network_address is not None:
            pulumi.set(__self__, "network_address", network_address)
        if network_address_variable is not None:
            pulumi.set(__self__, "network_address_variable", network_address_variable)
        if subnet_mask is not None:
            pulumi.set(__self__, "subnet_mask", subnet_mask)
        if subnet_mask_variable is not None:
            pulumi.set(__self__, "subnet_mask_variable", subnet_mask_variable)

    @_builtins.property
    @pulumi.getter(name="networkAddress")
    def network_address(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "network_address")

    @network_address.setter
    def network_address(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "network_address", value)

    @_builtins.property
    @pulumi.getter(name="networkAddressVariable")
    def network_address_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "network_address_variable")

    @network_address_variable.setter
    def network_address_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "network_address_variable", value)

    @_builtins.property
    @pulumi.getter(name="subnetMask")
    def subnet_mask(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        - Choices: `255.255.255.255`, `255.255.255.254`, `255.255.255.252`, `255.255.255.248`, `255.255.255.240`, `255.255.255.224`, `255.255.255.192`, `255.255.255.128`, `255.255.255.0`, `255.255.254.0`, `255.255.252.0`, `255.255.248.0`, `255.255.240.0`, `255.255.224.0`, `255.255.192.0`, `255.255.128.0`, `255.255.0.0`, `255.254.0.0`, `255.252.0.0`, `255.240.0.0`, `255.224.0.0`, `255.192.0.0`, `255.128.0.0`, `255.0.0.0`, `254.0.0.0`, `252.0.0.0`, `248.0.0.0`, `240.0.0.0`, `224.0.0.0`, `192.0.0.0`, `128.0.0.0`, `0.0.0.0`
        """
        return pulumi.get(self, "subnet_mask")

    @subnet_mask.setter
    def subnet_mask(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "subnet_mask", value)

    @_builtins.property
    @pulumi.getter(name="subnetMaskVariable")
    def subnet_mask_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "subnet_mask_variable")

    @subnet_mask_variable.setter
    def subnet_mask_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "subnet_mask_variable", value)


if not MYPY:
    class ServiceRoutingBgpFeatureIpv4RedistributeArgsDict(TypedDict):
        protocol: NotRequired[pulumi.Input[_builtins.str]]
        """
        Set the protocol to redistribute routes from
          - Choices: `static`, `connected`, `omp`, `nat`, `ospf`, `ospfv3`, `eigrp`
        """
        protocol_variable: NotRequired[pulumi.Input[_builtins.str]]
        """
        Variable name
        """
        route_policy_id: NotRequired[pulumi.Input[_builtins.str]]
        translate_rib_metric: NotRequired[pulumi.Input[_builtins.bool]]
        """
        Translate Rib Metric, Attribute conditional on `protocol` being equal to `omp`
          - Default value: `false`
        """
elif False:
    ServiceRoutingBgpFeatureIpv4RedistributeArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ServiceRoutingBgpFeatureIpv4RedistributeArgs:
    def __init__(__self__, *,
                 protocol: Optional[pulumi.Input[_builtins.str]] = None,
                 protocol_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 route_policy_id: Optional[pulumi.Input[_builtins.str]] = None,
                 translate_rib_metric: Optional[pulumi.Input[_builtins.bool]] = None):
        """
        :param pulumi.Input[_builtins.str] protocol: Set the protocol to redistribute routes from
                 - Choices: `static`, `connected`, `omp`, `nat`, `ospf`, `ospfv3`, `eigrp`
        :param pulumi.Input[_builtins.str] protocol_variable: Variable name
        :param pulumi.Input[_builtins.bool] translate_rib_metric: Translate Rib Metric, Attribute conditional on `protocol` being equal to `omp`
                 - Default value: `false`
        """
        if protocol is not None:
            pulumi.set(__self__, "protocol", protocol)
        if protocol_variable is not None:
            pulumi.set(__self__, "protocol_variable", protocol_variable)
        if route_policy_id is not None:
            pulumi.set(__self__, "route_policy_id", route_policy_id)
        if translate_rib_metric is not None:
            pulumi.set(__self__, "translate_rib_metric", translate_rib_metric)

    @_builtins.property
    @pulumi.getter
    def protocol(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Set the protocol to redistribute routes from
          - Choices: `static`, `connected`, `omp`, `nat`, `ospf`, `ospfv3`, `eigrp`
        """
        return pulumi.get(self, "protocol")

    @protocol.setter
    def protocol(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "protocol", value)

    @_builtins.property
    @pulumi.getter(name="protocolVariable")
    def protocol_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "protocol_variable")

    @protocol_variable.setter
    def protocol_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "protocol_variable", value)

    @_builtins.property
    @pulumi.getter(name="routePolicyId")
    def route_policy_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "route_policy_id")

    @route_policy_id.setter
    def route_policy_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "route_policy_id", value)

    @_builtins.property
    @pulumi.getter(name="translateRibMetric")
    def translate_rib_metric(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Translate Rib Metric, Attribute conditional on `protocol` being equal to `omp`
          - Default value: `false`
        """
        return pulumi.get(self, "translate_rib_metric")

    @translate_rib_metric.setter
    def translate_rib_metric(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "translate_rib_metric", value)


if not MYPY:
    class ServiceRoutingBgpFeatureIpv6AggregateAddressArgsDict(TypedDict):
        aggregate_prefix: NotRequired[pulumi.Input[_builtins.str]]
        """
        Configure the IPv6 prefixes to aggregate
        """
        aggregate_prefix_variable: NotRequired[pulumi.Input[_builtins.str]]
        """
        Variable name
        """
        as_set_path: NotRequired[pulumi.Input[_builtins.bool]]
        """
        Set AS set path information
          - Default value: `false`
        """
        as_set_path_variable: NotRequired[pulumi.Input[_builtins.str]]
        """
        Variable name
        """
        summary_only: NotRequired[pulumi.Input[_builtins.bool]]
        """
        Filter out more specific routes from updates
          - Default value: `false`
        """
        summary_only_variable: NotRequired[pulumi.Input[_builtins.str]]
        """
        Variable name
        """
elif False:
    ServiceRoutingBgpFeatureIpv6AggregateAddressArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ServiceRoutingBgpFeatureIpv6AggregateAddressArgs:
    def __init__(__self__, *,
                 aggregate_prefix: Optional[pulumi.Input[_builtins.str]] = None,
                 aggregate_prefix_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 as_set_path: Optional[pulumi.Input[_builtins.bool]] = None,
                 as_set_path_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 summary_only: Optional[pulumi.Input[_builtins.bool]] = None,
                 summary_only_variable: Optional[pulumi.Input[_builtins.str]] = None):
        """
        :param pulumi.Input[_builtins.str] aggregate_prefix: Configure the IPv6 prefixes to aggregate
        :param pulumi.Input[_builtins.str] aggregate_prefix_variable: Variable name
        :param pulumi.Input[_builtins.bool] as_set_path: Set AS set path information
                 - Default value: `false`
        :param pulumi.Input[_builtins.str] as_set_path_variable: Variable name
        :param pulumi.Input[_builtins.bool] summary_only: Filter out more specific routes from updates
                 - Default value: `false`
        :param pulumi.Input[_builtins.str] summary_only_variable: Variable name
        """
        if aggregate_prefix is not None:
            pulumi.set(__self__, "aggregate_prefix", aggregate_prefix)
        if aggregate_prefix_variable is not None:
            pulumi.set(__self__, "aggregate_prefix_variable", aggregate_prefix_variable)
        if as_set_path is not None:
            pulumi.set(__self__, "as_set_path", as_set_path)
        if as_set_path_variable is not None:
            pulumi.set(__self__, "as_set_path_variable", as_set_path_variable)
        if summary_only is not None:
            pulumi.set(__self__, "summary_only", summary_only)
        if summary_only_variable is not None:
            pulumi.set(__self__, "summary_only_variable", summary_only_variable)

    @_builtins.property
    @pulumi.getter(name="aggregatePrefix")
    def aggregate_prefix(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Configure the IPv6 prefixes to aggregate
        """
        return pulumi.get(self, "aggregate_prefix")

    @aggregate_prefix.setter
    def aggregate_prefix(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "aggregate_prefix", value)

    @_builtins.property
    @pulumi.getter(name="aggregatePrefixVariable")
    def aggregate_prefix_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "aggregate_prefix_variable")

    @aggregate_prefix_variable.setter
    def aggregate_prefix_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "aggregate_prefix_variable", value)

    @_builtins.property
    @pulumi.getter(name="asSetPath")
    def as_set_path(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Set AS set path information
          - Default value: `false`
        """
        return pulumi.get(self, "as_set_path")

    @as_set_path.setter
    def as_set_path(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "as_set_path", value)

    @_builtins.property
    @pulumi.getter(name="asSetPathVariable")
    def as_set_path_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "as_set_path_variable")

    @as_set_path_variable.setter
    def as_set_path_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "as_set_path_variable", value)

    @_builtins.property
    @pulumi.getter(name="summaryOnly")
    def summary_only(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Filter out more specific routes from updates
          - Default value: `false`
        """
        return pulumi.get(self, "summary_only")

    @summary_only.setter
    def summary_only(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "summary_only", value)

    @_builtins.property
    @pulumi.getter(name="summaryOnlyVariable")
    def summary_only_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "summary_only_variable")

    @summary_only_variable.setter
    def summary_only_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "summary_only_variable", value)


if not MYPY:
    class ServiceRoutingBgpFeatureIpv6NeighborArgsDict(TypedDict):
        address: NotRequired[pulumi.Input[_builtins.str]]
        """
        Set IPv6 neighbor address
        """
        address_families: NotRequired[pulumi.Input[Sequence[pulumi.Input['ServiceRoutingBgpFeatureIpv6NeighborAddressFamilyArgsDict']]]]
        """
        Set IPv6 BGP address family
        """
        address_variable: NotRequired[pulumi.Input[_builtins.str]]
        """
        Variable name
        """
        allowas_in_number: NotRequired[pulumi.Input[_builtins.int]]
        """
        The number of accept as-path with my AS present in it
          - Range: `1`-`10`
        """
        allowas_in_number_variable: NotRequired[pulumi.Input[_builtins.str]]
        """
        Variable name
        """
        as_override: NotRequired[pulumi.Input[_builtins.bool]]
        """
        Override matching AS-number while sending update
          - Default value: `false`
        """
        as_override_variable: NotRequired[pulumi.Input[_builtins.str]]
        """
        Variable name
        """
        description: NotRequired[pulumi.Input[_builtins.str]]
        """
        Set description
        """
        description_variable: NotRequired[pulumi.Input[_builtins.str]]
        """
        Variable name
        """
        ebgp_multihop: NotRequired[pulumi.Input[_builtins.int]]
        """
        Set TTL value for peers that are not directly connected
          - Range: `1`-`255`
          - Default value: `1`
        """
        ebgp_multihop_variable: NotRequired[pulumi.Input[_builtins.str]]
        """
        Variable name
        """
        hold_time: NotRequired[pulumi.Input[_builtins.int]]
        """
        Set how long to wait since receiving a keepalive message to consider BGP peer unavailable
          - Range: `0`-`65535`
          - Default value: `180`
        """
        hold_time_variable: NotRequired[pulumi.Input[_builtins.str]]
        """
        Variable name
        """
        keepalive_time: NotRequired[pulumi.Input[_builtins.int]]
        """
        Set how often to advertise keepalive messages to BGP peer
          - Range: `0`-`65535`
          - Default value: `60`
        """
        keepalive_time_variable: NotRequired[pulumi.Input[_builtins.str]]
        """
        Variable name
        """
        local_as: NotRequired[pulumi.Input[_builtins.int]]
        """
        Set local autonomous number,Local-AS cannot have the local BGP protocol AS number or the AS number of the remote peer.The local-as is valid only if the peer is a true eBGP peer. It does not work for two peers in different sub-ASs in a confederation.
        """
        local_as_variable: NotRequired[pulumi.Input[_builtins.str]]
        """
        Variable name
        """
        next_hop_self: NotRequired[pulumi.Input[_builtins.bool]]
        """
        Set router to be next hop for routes advertised to neighbor
          - Default value: `false`
        """
        next_hop_self_variable: NotRequired[pulumi.Input[_builtins.str]]
        """
        Variable name
        """
        password: NotRequired[pulumi.Input[_builtins.str]]
        """
        Set MD5 password on TCP connection with BGP peer
        """
        password_variable: NotRequired[pulumi.Input[_builtins.str]]
        """
        Variable name
        """
        remote_as: NotRequired[pulumi.Input[_builtins.int]]
        """
        Set remote autonomous system number
        """
        remote_as_variable: NotRequired[pulumi.Input[_builtins.str]]
        """
        Variable name
        """
        send_community: NotRequired[pulumi.Input[_builtins.bool]]
        """
        Send community attribute
          - Default value: `true`
        """
        send_community_variable: NotRequired[pulumi.Input[_builtins.str]]
        """
        Variable name
        """
        send_extended_community: NotRequired[pulumi.Input[_builtins.bool]]
        """
        Send extended community attribute
          - Default value: `true`
        """
        send_extended_community_variable: NotRequired[pulumi.Input[_builtins.str]]
        """
        Variable name
        """
        shutdown: NotRequired[pulumi.Input[_builtins.bool]]
        """
        Enable or disable a BGP neighbor
          - Default value: `false`
        """
        shutdown_variable: NotRequired[pulumi.Input[_builtins.str]]
        """
        Variable name
        """
        update_source_interface: NotRequired[pulumi.Input[_builtins.str]]
        """
        Source interface name for BGP neighbor
        """
        update_source_interface_variable: NotRequired[pulumi.Input[_builtins.str]]
        """
        Variable name
        """
elif False:
    ServiceRoutingBgpFeatureIpv6NeighborArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ServiceRoutingBgpFeatureIpv6NeighborArgs:
    def __init__(__self__, *,
                 address: Optional[pulumi.Input[_builtins.str]] = None,
                 address_families: Optional[pulumi.Input[Sequence[pulumi.Input['ServiceRoutingBgpFeatureIpv6NeighborAddressFamilyArgs']]]] = None,
                 address_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 allowas_in_number: Optional[pulumi.Input[_builtins.int]] = None,
                 allowas_in_number_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 as_override: Optional[pulumi.Input[_builtins.bool]] = None,
                 as_override_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 description: Optional[pulumi.Input[_builtins.str]] = None,
                 description_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 ebgp_multihop: Optional[pulumi.Input[_builtins.int]] = None,
                 ebgp_multihop_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 hold_time: Optional[pulumi.Input[_builtins.int]] = None,
                 hold_time_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 keepalive_time: Optional[pulumi.Input[_builtins.int]] = None,
                 keepalive_time_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 local_as: Optional[pulumi.Input[_builtins.int]] = None,
                 local_as_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 next_hop_self: Optional[pulumi.Input[_builtins.bool]] = None,
                 next_hop_self_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 password: Optional[pulumi.Input[_builtins.str]] = None,
                 password_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 remote_as: Optional[pulumi.Input[_builtins.int]] = None,
                 remote_as_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 send_community: Optional[pulumi.Input[_builtins.bool]] = None,
                 send_community_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 send_extended_community: Optional[pulumi.Input[_builtins.bool]] = None,
                 send_extended_community_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 shutdown: Optional[pulumi.Input[_builtins.bool]] = None,
                 shutdown_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 update_source_interface: Optional[pulumi.Input[_builtins.str]] = None,
                 update_source_interface_variable: Optional[pulumi.Input[_builtins.str]] = None):
        """
        :param pulumi.Input[_builtins.str] address: Set IPv6 neighbor address
        :param pulumi.Input[Sequence[pulumi.Input['ServiceRoutingBgpFeatureIpv6NeighborAddressFamilyArgs']]] address_families: Set IPv6 BGP address family
        :param pulumi.Input[_builtins.str] address_variable: Variable name
        :param pulumi.Input[_builtins.int] allowas_in_number: The number of accept as-path with my AS present in it
                 - Range: `1`-`10`
        :param pulumi.Input[_builtins.str] allowas_in_number_variable: Variable name
        :param pulumi.Input[_builtins.bool] as_override: Override matching AS-number while sending update
                 - Default value: `false`
        :param pulumi.Input[_builtins.str] as_override_variable: Variable name
        :param pulumi.Input[_builtins.str] description: Set description
        :param pulumi.Input[_builtins.str] description_variable: Variable name
        :param pulumi.Input[_builtins.int] ebgp_multihop: Set TTL value for peers that are not directly connected
                 - Range: `1`-`255`
                 - Default value: `1`
        :param pulumi.Input[_builtins.str] ebgp_multihop_variable: Variable name
        :param pulumi.Input[_builtins.int] hold_time: Set how long to wait since receiving a keepalive message to consider BGP peer unavailable
                 - Range: `0`-`65535`
                 - Default value: `180`
        :param pulumi.Input[_builtins.str] hold_time_variable: Variable name
        :param pulumi.Input[_builtins.int] keepalive_time: Set how often to advertise keepalive messages to BGP peer
                 - Range: `0`-`65535`
                 - Default value: `60`
        :param pulumi.Input[_builtins.str] keepalive_time_variable: Variable name
        :param pulumi.Input[_builtins.int] local_as: Set local autonomous number,Local-AS cannot have the local BGP protocol AS number or the AS number of the remote peer.The local-as is valid only if the peer is a true eBGP peer. It does not work for two peers in different sub-ASs in a confederation.
        :param pulumi.Input[_builtins.str] local_as_variable: Variable name
        :param pulumi.Input[_builtins.bool] next_hop_self: Set router to be next hop for routes advertised to neighbor
                 - Default value: `false`
        :param pulumi.Input[_builtins.str] next_hop_self_variable: Variable name
        :param pulumi.Input[_builtins.str] password: Set MD5 password on TCP connection with BGP peer
        :param pulumi.Input[_builtins.str] password_variable: Variable name
        :param pulumi.Input[_builtins.int] remote_as: Set remote autonomous system number
        :param pulumi.Input[_builtins.str] remote_as_variable: Variable name
        :param pulumi.Input[_builtins.bool] send_community: Send community attribute
                 - Default value: `true`
        :param pulumi.Input[_builtins.str] send_community_variable: Variable name
        :param pulumi.Input[_builtins.bool] send_extended_community: Send extended community attribute
                 - Default value: `true`
        :param pulumi.Input[_builtins.str] send_extended_community_variable: Variable name
        :param pulumi.Input[_builtins.bool] shutdown: Enable or disable a BGP neighbor
                 - Default value: `false`
        :param pulumi.Input[_builtins.str] shutdown_variable: Variable name
        :param pulumi.Input[_builtins.str] update_source_interface: Source interface name for BGP neighbor
        :param pulumi.Input[_builtins.str] update_source_interface_variable: Variable name
        """
        if address is not None:
            pulumi.set(__self__, "address", address)
        if address_families is not None:
            pulumi.set(__self__, "address_families", address_families)
        if address_variable is not None:
            pulumi.set(__self__, "address_variable", address_variable)
        if allowas_in_number is not None:
            pulumi.set(__self__, "allowas_in_number", allowas_in_number)
        if allowas_in_number_variable is not None:
            pulumi.set(__self__, "allowas_in_number_variable", allowas_in_number_variable)
        if as_override is not None:
            pulumi.set(__self__, "as_override", as_override)
        if as_override_variable is not None:
            pulumi.set(__self__, "as_override_variable", as_override_variable)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if description_variable is not None:
            pulumi.set(__self__, "description_variable", description_variable)
        if ebgp_multihop is not None:
            pulumi.set(__self__, "ebgp_multihop", ebgp_multihop)
        if ebgp_multihop_variable is not None:
            pulumi.set(__self__, "ebgp_multihop_variable", ebgp_multihop_variable)
        if hold_time is not None:
            pulumi.set(__self__, "hold_time", hold_time)
        if hold_time_variable is not None:
            pulumi.set(__self__, "hold_time_variable", hold_time_variable)
        if keepalive_time is not None:
            pulumi.set(__self__, "keepalive_time", keepalive_time)
        if keepalive_time_variable is not None:
            pulumi.set(__self__, "keepalive_time_variable", keepalive_time_variable)
        if local_as is not None:
            pulumi.set(__self__, "local_as", local_as)
        if local_as_variable is not None:
            pulumi.set(__self__, "local_as_variable", local_as_variable)
        if next_hop_self is not None:
            pulumi.set(__self__, "next_hop_self", next_hop_self)
        if next_hop_self_variable is not None:
            pulumi.set(__self__, "next_hop_self_variable", next_hop_self_variable)
        if password is not None:
            pulumi.set(__self__, "password", password)
        if password_variable is not None:
            pulumi.set(__self__, "password_variable", password_variable)
        if remote_as is not None:
            pulumi.set(__self__, "remote_as", remote_as)
        if remote_as_variable is not None:
            pulumi.set(__self__, "remote_as_variable", remote_as_variable)
        if send_community is not None:
            pulumi.set(__self__, "send_community", send_community)
        if send_community_variable is not None:
            pulumi.set(__self__, "send_community_variable", send_community_variable)
        if send_extended_community is not None:
            pulumi.set(__self__, "send_extended_community", send_extended_community)
        if send_extended_community_variable is not None:
            pulumi.set(__self__, "send_extended_community_variable", send_extended_community_variable)
        if shutdown is not None:
            pulumi.set(__self__, "shutdown", shutdown)
        if shutdown_variable is not None:
            pulumi.set(__self__, "shutdown_variable", shutdown_variable)
        if update_source_interface is not None:
            pulumi.set(__self__, "update_source_interface", update_source_interface)
        if update_source_interface_variable is not None:
            pulumi.set(__self__, "update_source_interface_variable", update_source_interface_variable)

    @_builtins.property
    @pulumi.getter
    def address(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Set IPv6 neighbor address
        """
        return pulumi.get(self, "address")

    @address.setter
    def address(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "address", value)

    @_builtins.property
    @pulumi.getter(name="addressFamilies")
    def address_families(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ServiceRoutingBgpFeatureIpv6NeighborAddressFamilyArgs']]]]:
        """
        Set IPv6 BGP address family
        """
        return pulumi.get(self, "address_families")

    @address_families.setter
    def address_families(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ServiceRoutingBgpFeatureIpv6NeighborAddressFamilyArgs']]]]):
        pulumi.set(self, "address_families", value)

    @_builtins.property
    @pulumi.getter(name="addressVariable")
    def address_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "address_variable")

    @address_variable.setter
    def address_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "address_variable", value)

    @_builtins.property
    @pulumi.getter(name="allowasInNumber")
    def allowas_in_number(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        The number of accept as-path with my AS present in it
          - Range: `1`-`10`
        """
        return pulumi.get(self, "allowas_in_number")

    @allowas_in_number.setter
    def allowas_in_number(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "allowas_in_number", value)

    @_builtins.property
    @pulumi.getter(name="allowasInNumberVariable")
    def allowas_in_number_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "allowas_in_number_variable")

    @allowas_in_number_variable.setter
    def allowas_in_number_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "allowas_in_number_variable", value)

    @_builtins.property
    @pulumi.getter(name="asOverride")
    def as_override(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Override matching AS-number while sending update
          - Default value: `false`
        """
        return pulumi.get(self, "as_override")

    @as_override.setter
    def as_override(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "as_override", value)

    @_builtins.property
    @pulumi.getter(name="asOverrideVariable")
    def as_override_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "as_override_variable")

    @as_override_variable.setter
    def as_override_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "as_override_variable", value)

    @_builtins.property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Set description
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "description", value)

    @_builtins.property
    @pulumi.getter(name="descriptionVariable")
    def description_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "description_variable")

    @description_variable.setter
    def description_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "description_variable", value)

    @_builtins.property
    @pulumi.getter(name="ebgpMultihop")
    def ebgp_multihop(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        Set TTL value for peers that are not directly connected
          - Range: `1`-`255`
          - Default value: `1`
        """
        return pulumi.get(self, "ebgp_multihop")

    @ebgp_multihop.setter
    def ebgp_multihop(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "ebgp_multihop", value)

    @_builtins.property
    @pulumi.getter(name="ebgpMultihopVariable")
    def ebgp_multihop_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "ebgp_multihop_variable")

    @ebgp_multihop_variable.setter
    def ebgp_multihop_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "ebgp_multihop_variable", value)

    @_builtins.property
    @pulumi.getter(name="holdTime")
    def hold_time(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        Set how long to wait since receiving a keepalive message to consider BGP peer unavailable
          - Range: `0`-`65535`
          - Default value: `180`
        """
        return pulumi.get(self, "hold_time")

    @hold_time.setter
    def hold_time(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "hold_time", value)

    @_builtins.property
    @pulumi.getter(name="holdTimeVariable")
    def hold_time_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "hold_time_variable")

    @hold_time_variable.setter
    def hold_time_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "hold_time_variable", value)

    @_builtins.property
    @pulumi.getter(name="keepaliveTime")
    def keepalive_time(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        Set how often to advertise keepalive messages to BGP peer
          - Range: `0`-`65535`
          - Default value: `60`
        """
        return pulumi.get(self, "keepalive_time")

    @keepalive_time.setter
    def keepalive_time(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "keepalive_time", value)

    @_builtins.property
    @pulumi.getter(name="keepaliveTimeVariable")
    def keepalive_time_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "keepalive_time_variable")

    @keepalive_time_variable.setter
    def keepalive_time_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "keepalive_time_variable", value)

    @_builtins.property
    @pulumi.getter(name="localAs")
    def local_as(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        Set local autonomous number,Local-AS cannot have the local BGP protocol AS number or the AS number of the remote peer.The local-as is valid only if the peer is a true eBGP peer. It does not work for two peers in different sub-ASs in a confederation.
        """
        return pulumi.get(self, "local_as")

    @local_as.setter
    def local_as(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "local_as", value)

    @_builtins.property
    @pulumi.getter(name="localAsVariable")
    def local_as_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "local_as_variable")

    @local_as_variable.setter
    def local_as_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "local_as_variable", value)

    @_builtins.property
    @pulumi.getter(name="nextHopSelf")
    def next_hop_self(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Set router to be next hop for routes advertised to neighbor
          - Default value: `false`
        """
        return pulumi.get(self, "next_hop_self")

    @next_hop_self.setter
    def next_hop_self(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "next_hop_self", value)

    @_builtins.property
    @pulumi.getter(name="nextHopSelfVariable")
    def next_hop_self_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "next_hop_self_variable")

    @next_hop_self_variable.setter
    def next_hop_self_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "next_hop_self_variable", value)

    @_builtins.property
    @pulumi.getter
    def password(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Set MD5 password on TCP connection with BGP peer
        """
        return pulumi.get(self, "password")

    @password.setter
    def password(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "password", value)

    @_builtins.property
    @pulumi.getter(name="passwordVariable")
    def password_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "password_variable")

    @password_variable.setter
    def password_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "password_variable", value)

    @_builtins.property
    @pulumi.getter(name="remoteAs")
    def remote_as(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        Set remote autonomous system number
        """
        return pulumi.get(self, "remote_as")

    @remote_as.setter
    def remote_as(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "remote_as", value)

    @_builtins.property
    @pulumi.getter(name="remoteAsVariable")
    def remote_as_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "remote_as_variable")

    @remote_as_variable.setter
    def remote_as_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "remote_as_variable", value)

    @_builtins.property
    @pulumi.getter(name="sendCommunity")
    def send_community(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Send community attribute
          - Default value: `true`
        """
        return pulumi.get(self, "send_community")

    @send_community.setter
    def send_community(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "send_community", value)

    @_builtins.property
    @pulumi.getter(name="sendCommunityVariable")
    def send_community_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "send_community_variable")

    @send_community_variable.setter
    def send_community_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "send_community_variable", value)

    @_builtins.property
    @pulumi.getter(name="sendExtendedCommunity")
    def send_extended_community(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Send extended community attribute
          - Default value: `true`
        """
        return pulumi.get(self, "send_extended_community")

    @send_extended_community.setter
    def send_extended_community(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "send_extended_community", value)

    @_builtins.property
    @pulumi.getter(name="sendExtendedCommunityVariable")
    def send_extended_community_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "send_extended_community_variable")

    @send_extended_community_variable.setter
    def send_extended_community_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "send_extended_community_variable", value)

    @_builtins.property
    @pulumi.getter
    def shutdown(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Enable or disable a BGP neighbor
          - Default value: `false`
        """
        return pulumi.get(self, "shutdown")

    @shutdown.setter
    def shutdown(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "shutdown", value)

    @_builtins.property
    @pulumi.getter(name="shutdownVariable")
    def shutdown_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "shutdown_variable")

    @shutdown_variable.setter
    def shutdown_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "shutdown_variable", value)

    @_builtins.property
    @pulumi.getter(name="updateSourceInterface")
    def update_source_interface(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Source interface name for BGP neighbor
        """
        return pulumi.get(self, "update_source_interface")

    @update_source_interface.setter
    def update_source_interface(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "update_source_interface", value)

    @_builtins.property
    @pulumi.getter(name="updateSourceInterfaceVariable")
    def update_source_interface_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "update_source_interface_variable")

    @update_source_interface_variable.setter
    def update_source_interface_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "update_source_interface_variable", value)


if not MYPY:
    class ServiceRoutingBgpFeatureIpv6NeighborAddressFamilyArgsDict(TypedDict):
        family_type: NotRequired[pulumi.Input[_builtins.str]]
        """
        Set IPv6 unicast address family
        """
        in_route_policy_id: NotRequired[pulumi.Input[_builtins.str]]
        max_number_of_prefixes: NotRequired[pulumi.Input[_builtins.int]]
        """
        Set maximum number of prefixes accepted from BGP peer
          - Range: `1`-`4294967295`
        """
        max_number_of_prefixes_variable: NotRequired[pulumi.Input[_builtins.str]]
        """
        Variable name
        """
        out_route_policy_id: NotRequired[pulumi.Input[_builtins.str]]
        policy_type: NotRequired[pulumi.Input[_builtins.str]]
        """
        Neighbor received maximum prefix policy is disabled.
        """
        restart_interval: NotRequired[pulumi.Input[_builtins.int]]
        """
        Set the restart interval(minutes) when to restart BGP connection if threshold is exceeded
          - Range: `1`-`65535`
        """
        restart_interval_variable: NotRequired[pulumi.Input[_builtins.str]]
        """
        Variable name
        """
        threshold: NotRequired[pulumi.Input[_builtins.int]]
        """
        Set threshold(1 to 100) at which to generate a warning message
          - Range: `1`-`100`
          - Default value: `75`
        """
        threshold_variable: NotRequired[pulumi.Input[_builtins.str]]
        """
        Variable name
        """
elif False:
    ServiceRoutingBgpFeatureIpv6NeighborAddressFamilyArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ServiceRoutingBgpFeatureIpv6NeighborAddressFamilyArgs:
    def __init__(__self__, *,
                 family_type: Optional[pulumi.Input[_builtins.str]] = None,
                 in_route_policy_id: Optional[pulumi.Input[_builtins.str]] = None,
                 max_number_of_prefixes: Optional[pulumi.Input[_builtins.int]] = None,
                 max_number_of_prefixes_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 out_route_policy_id: Optional[pulumi.Input[_builtins.str]] = None,
                 policy_type: Optional[pulumi.Input[_builtins.str]] = None,
                 restart_interval: Optional[pulumi.Input[_builtins.int]] = None,
                 restart_interval_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 threshold: Optional[pulumi.Input[_builtins.int]] = None,
                 threshold_variable: Optional[pulumi.Input[_builtins.str]] = None):
        """
        :param pulumi.Input[_builtins.str] family_type: Set IPv6 unicast address family
        :param pulumi.Input[_builtins.int] max_number_of_prefixes: Set maximum number of prefixes accepted from BGP peer
                 - Range: `1`-`4294967295`
        :param pulumi.Input[_builtins.str] max_number_of_prefixes_variable: Variable name
        :param pulumi.Input[_builtins.str] policy_type: Neighbor received maximum prefix policy is disabled.
        :param pulumi.Input[_builtins.int] restart_interval: Set the restart interval(minutes) when to restart BGP connection if threshold is exceeded
                 - Range: `1`-`65535`
        :param pulumi.Input[_builtins.str] restart_interval_variable: Variable name
        :param pulumi.Input[_builtins.int] threshold: Set threshold(1 to 100) at which to generate a warning message
                 - Range: `1`-`100`
                 - Default value: `75`
        :param pulumi.Input[_builtins.str] threshold_variable: Variable name
        """
        if family_type is not None:
            pulumi.set(__self__, "family_type", family_type)
        if in_route_policy_id is not None:
            pulumi.set(__self__, "in_route_policy_id", in_route_policy_id)
        if max_number_of_prefixes is not None:
            pulumi.set(__self__, "max_number_of_prefixes", max_number_of_prefixes)
        if max_number_of_prefixes_variable is not None:
            pulumi.set(__self__, "max_number_of_prefixes_variable", max_number_of_prefixes_variable)
        if out_route_policy_id is not None:
            pulumi.set(__self__, "out_route_policy_id", out_route_policy_id)
        if policy_type is not None:
            pulumi.set(__self__, "policy_type", policy_type)
        if restart_interval is not None:
            pulumi.set(__self__, "restart_interval", restart_interval)
        if restart_interval_variable is not None:
            pulumi.set(__self__, "restart_interval_variable", restart_interval_variable)
        if threshold is not None:
            pulumi.set(__self__, "threshold", threshold)
        if threshold_variable is not None:
            pulumi.set(__self__, "threshold_variable", threshold_variable)

    @_builtins.property
    @pulumi.getter(name="familyType")
    def family_type(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Set IPv6 unicast address family
        """
        return pulumi.get(self, "family_type")

    @family_type.setter
    def family_type(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "family_type", value)

    @_builtins.property
    @pulumi.getter(name="inRoutePolicyId")
    def in_route_policy_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "in_route_policy_id")

    @in_route_policy_id.setter
    def in_route_policy_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "in_route_policy_id", value)

    @_builtins.property
    @pulumi.getter(name="maxNumberOfPrefixes")
    def max_number_of_prefixes(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        Set maximum number of prefixes accepted from BGP peer
          - Range: `1`-`4294967295`
        """
        return pulumi.get(self, "max_number_of_prefixes")

    @max_number_of_prefixes.setter
    def max_number_of_prefixes(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "max_number_of_prefixes", value)

    @_builtins.property
    @pulumi.getter(name="maxNumberOfPrefixesVariable")
    def max_number_of_prefixes_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "max_number_of_prefixes_variable")

    @max_number_of_prefixes_variable.setter
    def max_number_of_prefixes_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "max_number_of_prefixes_variable", value)

    @_builtins.property
    @pulumi.getter(name="outRoutePolicyId")
    def out_route_policy_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "out_route_policy_id")

    @out_route_policy_id.setter
    def out_route_policy_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "out_route_policy_id", value)

    @_builtins.property
    @pulumi.getter(name="policyType")
    def policy_type(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Neighbor received maximum prefix policy is disabled.
        """
        return pulumi.get(self, "policy_type")

    @policy_type.setter
    def policy_type(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "policy_type", value)

    @_builtins.property
    @pulumi.getter(name="restartInterval")
    def restart_interval(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        Set the restart interval(minutes) when to restart BGP connection if threshold is exceeded
          - Range: `1`-`65535`
        """
        return pulumi.get(self, "restart_interval")

    @restart_interval.setter
    def restart_interval(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "restart_interval", value)

    @_builtins.property
    @pulumi.getter(name="restartIntervalVariable")
    def restart_interval_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "restart_interval_variable")

    @restart_interval_variable.setter
    def restart_interval_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "restart_interval_variable", value)

    @_builtins.property
    @pulumi.getter
    def threshold(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        Set threshold(1 to 100) at which to generate a warning message
          - Range: `1`-`100`
          - Default value: `75`
        """
        return pulumi.get(self, "threshold")

    @threshold.setter
    def threshold(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "threshold", value)

    @_builtins.property
    @pulumi.getter(name="thresholdVariable")
    def threshold_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "threshold_variable")

    @threshold_variable.setter
    def threshold_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "threshold_variable", value)


if not MYPY:
    class ServiceRoutingBgpFeatureIpv6NetworkArgsDict(TypedDict):
        network_prefix: NotRequired[pulumi.Input[_builtins.str]]
        """
        Configure the prefixes for BGP to announce
        """
        network_prefix_variable: NotRequired[pulumi.Input[_builtins.str]]
        """
        Variable name
        """
elif False:
    ServiceRoutingBgpFeatureIpv6NetworkArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ServiceRoutingBgpFeatureIpv6NetworkArgs:
    def __init__(__self__, *,
                 network_prefix: Optional[pulumi.Input[_builtins.str]] = None,
                 network_prefix_variable: Optional[pulumi.Input[_builtins.str]] = None):
        """
        :param pulumi.Input[_builtins.str] network_prefix: Configure the prefixes for BGP to announce
        :param pulumi.Input[_builtins.str] network_prefix_variable: Variable name
        """
        if network_prefix is not None:
            pulumi.set(__self__, "network_prefix", network_prefix)
        if network_prefix_variable is not None:
            pulumi.set(__self__, "network_prefix_variable", network_prefix_variable)

    @_builtins.property
    @pulumi.getter(name="networkPrefix")
    def network_prefix(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Configure the prefixes for BGP to announce
        """
        return pulumi.get(self, "network_prefix")

    @network_prefix.setter
    def network_prefix(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "network_prefix", value)

    @_builtins.property
    @pulumi.getter(name="networkPrefixVariable")
    def network_prefix_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "network_prefix_variable")

    @network_prefix_variable.setter
    def network_prefix_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "network_prefix_variable", value)


if not MYPY:
    class ServiceRoutingBgpFeatureIpv6RedistributeArgsDict(TypedDict):
        protocol: NotRequired[pulumi.Input[_builtins.str]]
        """
        Set the protocol to redistribute routes from
          - Choices: `static`, `connected`, `ospf`, `omp`
        """
        protocol_variable: NotRequired[pulumi.Input[_builtins.str]]
        """
        Variable name
        """
        route_policy_id: NotRequired[pulumi.Input[_builtins.str]]
        translate_rib_metric: NotRequired[pulumi.Input[_builtins.bool]]
        """
        Translate Rib Metric, Attribute conditional on `protocol` being equal to `omp`
          - Default value: `false`
        """
elif False:
    ServiceRoutingBgpFeatureIpv6RedistributeArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ServiceRoutingBgpFeatureIpv6RedistributeArgs:
    def __init__(__self__, *,
                 protocol: Optional[pulumi.Input[_builtins.str]] = None,
                 protocol_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 route_policy_id: Optional[pulumi.Input[_builtins.str]] = None,
                 translate_rib_metric: Optional[pulumi.Input[_builtins.bool]] = None):
        """
        :param pulumi.Input[_builtins.str] protocol: Set the protocol to redistribute routes from
                 - Choices: `static`, `connected`, `ospf`, `omp`
        :param pulumi.Input[_builtins.str] protocol_variable: Variable name
        :param pulumi.Input[_builtins.bool] translate_rib_metric: Translate Rib Metric, Attribute conditional on `protocol` being equal to `omp`
                 - Default value: `false`
        """
        if protocol is not None:
            pulumi.set(__self__, "protocol", protocol)
        if protocol_variable is not None:
            pulumi.set(__self__, "protocol_variable", protocol_variable)
        if route_policy_id is not None:
            pulumi.set(__self__, "route_policy_id", route_policy_id)
        if translate_rib_metric is not None:
            pulumi.set(__self__, "translate_rib_metric", translate_rib_metric)

    @_builtins.property
    @pulumi.getter
    def protocol(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Set the protocol to redistribute routes from
          - Choices: `static`, `connected`, `ospf`, `omp`
        """
        return pulumi.get(self, "protocol")

    @protocol.setter
    def protocol(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "protocol", value)

    @_builtins.property
    @pulumi.getter(name="protocolVariable")
    def protocol_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "protocol_variable")

    @protocol_variable.setter
    def protocol_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "protocol_variable", value)

    @_builtins.property
    @pulumi.getter(name="routePolicyId")
    def route_policy_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "route_policy_id")

    @route_policy_id.setter
    def route_policy_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "route_policy_id", value)

    @_builtins.property
    @pulumi.getter(name="translateRibMetric")
    def translate_rib_metric(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Translate Rib Metric, Attribute conditional on `protocol` being equal to `omp`
          - Default value: `false`
        """
        return pulumi.get(self, "translate_rib_metric")

    @translate_rib_metric.setter
    def translate_rib_metric(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "translate_rib_metric", value)


if not MYPY:
    class ServiceRoutingEigrpFeatureInterfaceArgsDict(TypedDict):
        name: NotRequired[pulumi.Input[_builtins.str]]
        """
        Set interface name
        """
        name_variable: NotRequired[pulumi.Input[_builtins.str]]
        """
        Variable name
        """
        shutdown: NotRequired[pulumi.Input[_builtins.bool]]
        """
        Enable/disable EIGRP
          - Default value: `false`
        """
        shutdown_variable: NotRequired[pulumi.Input[_builtins.str]]
        """
        Variable name
        """
        summary_addresses: NotRequired[pulumi.Input[Sequence[pulumi.Input['ServiceRoutingEigrpFeatureInterfaceSummaryAddressArgsDict']]]]
        """
        Set summary addresses
        """
elif False:
    ServiceRoutingEigrpFeatureInterfaceArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ServiceRoutingEigrpFeatureInterfaceArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 name_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 shutdown: Optional[pulumi.Input[_builtins.bool]] = None,
                 shutdown_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 summary_addresses: Optional[pulumi.Input[Sequence[pulumi.Input['ServiceRoutingEigrpFeatureInterfaceSummaryAddressArgs']]]] = None):
        """
        :param pulumi.Input[_builtins.str] name: Set interface name
        :param pulumi.Input[_builtins.str] name_variable: Variable name
        :param pulumi.Input[_builtins.bool] shutdown: Enable/disable EIGRP
                 - Default value: `false`
        :param pulumi.Input[_builtins.str] shutdown_variable: Variable name
        :param pulumi.Input[Sequence[pulumi.Input['ServiceRoutingEigrpFeatureInterfaceSummaryAddressArgs']]] summary_addresses: Set summary addresses
        """
        if name is not None:
            pulumi.set(__self__, "name", name)
        if name_variable is not None:
            pulumi.set(__self__, "name_variable", name_variable)
        if shutdown is not None:
            pulumi.set(__self__, "shutdown", shutdown)
        if shutdown_variable is not None:
            pulumi.set(__self__, "shutdown_variable", shutdown_variable)
        if summary_addresses is not None:
            pulumi.set(__self__, "summary_addresses", summary_addresses)

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Set interface name
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "name", value)

    @_builtins.property
    @pulumi.getter(name="nameVariable")
    def name_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "name_variable")

    @name_variable.setter
    def name_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "name_variable", value)

    @_builtins.property
    @pulumi.getter
    def shutdown(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Enable/disable EIGRP
          - Default value: `false`
        """
        return pulumi.get(self, "shutdown")

    @shutdown.setter
    def shutdown(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "shutdown", value)

    @_builtins.property
    @pulumi.getter(name="shutdownVariable")
    def shutdown_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "shutdown_variable")

    @shutdown_variable.setter
    def shutdown_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "shutdown_variable", value)

    @_builtins.property
    @pulumi.getter(name="summaryAddresses")
    def summary_addresses(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ServiceRoutingEigrpFeatureInterfaceSummaryAddressArgs']]]]:
        """
        Set summary addresses
        """
        return pulumi.get(self, "summary_addresses")

    @summary_addresses.setter
    def summary_addresses(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ServiceRoutingEigrpFeatureInterfaceSummaryAddressArgs']]]]):
        pulumi.set(self, "summary_addresses", value)


if not MYPY:
    class ServiceRoutingEigrpFeatureInterfaceSummaryAddressArgsDict(TypedDict):
        address: NotRequired[pulumi.Input[_builtins.str]]
        address_variable: NotRequired[pulumi.Input[_builtins.str]]
        """
        Variable name
        """
        mask: NotRequired[pulumi.Input[_builtins.str]]
        """
        - Choices: `255.255.255.255`, `255.255.255.254`, `255.255.255.252`, `255.255.255.248`, `255.255.255.240`, `255.255.255.224`, `255.255.255.192`, `255.255.255.128`, `255.255.255.0`, `255.255.254.0`, `255.255.252.0`, `255.255.248.0`, `255.255.240.0`, `255.255.224.0`, `255.255.192.0`, `255.255.128.0`, `255.255.0.0`, `255.254.0.0`, `255.252.0.0`, `255.240.0.0`, `255.224.0.0`, `255.192.0.0`, `255.128.0.0`, `255.0.0.0`, `254.0.0.0`, `252.0.0.0`, `248.0.0.0`, `240.0.0.0`, `224.0.0.0`, `192.0.0.0`, `128.0.0.0`, `0.0.0.0`
        """
        mask_variable: NotRequired[pulumi.Input[_builtins.str]]
        """
        Variable name
        """
elif False:
    ServiceRoutingEigrpFeatureInterfaceSummaryAddressArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ServiceRoutingEigrpFeatureInterfaceSummaryAddressArgs:
    def __init__(__self__, *,
                 address: Optional[pulumi.Input[_builtins.str]] = None,
                 address_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 mask: Optional[pulumi.Input[_builtins.str]] = None,
                 mask_variable: Optional[pulumi.Input[_builtins.str]] = None):
        """
        :param pulumi.Input[_builtins.str] address_variable: Variable name
        :param pulumi.Input[_builtins.str] mask: - Choices: `255.255.255.255`, `255.255.255.254`, `255.255.255.252`, `255.255.255.248`, `255.255.255.240`, `255.255.255.224`, `255.255.255.192`, `255.255.255.128`, `255.255.255.0`, `255.255.254.0`, `255.255.252.0`, `255.255.248.0`, `255.255.240.0`, `255.255.224.0`, `255.255.192.0`, `255.255.128.0`, `255.255.0.0`, `255.254.0.0`, `255.252.0.0`, `255.240.0.0`, `255.224.0.0`, `255.192.0.0`, `255.128.0.0`, `255.0.0.0`, `254.0.0.0`, `252.0.0.0`, `248.0.0.0`, `240.0.0.0`, `224.0.0.0`, `192.0.0.0`, `128.0.0.0`, `0.0.0.0`
        :param pulumi.Input[_builtins.str] mask_variable: Variable name
        """
        if address is not None:
            pulumi.set(__self__, "address", address)
        if address_variable is not None:
            pulumi.set(__self__, "address_variable", address_variable)
        if mask is not None:
            pulumi.set(__self__, "mask", mask)
        if mask_variable is not None:
            pulumi.set(__self__, "mask_variable", mask_variable)

    @_builtins.property
    @pulumi.getter
    def address(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "address")

    @address.setter
    def address(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "address", value)

    @_builtins.property
    @pulumi.getter(name="addressVariable")
    def address_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "address_variable")

    @address_variable.setter
    def address_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "address_variable", value)

    @_builtins.property
    @pulumi.getter
    def mask(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        - Choices: `255.255.255.255`, `255.255.255.254`, `255.255.255.252`, `255.255.255.248`, `255.255.255.240`, `255.255.255.224`, `255.255.255.192`, `255.255.255.128`, `255.255.255.0`, `255.255.254.0`, `255.255.252.0`, `255.255.248.0`, `255.255.240.0`, `255.255.224.0`, `255.255.192.0`, `255.255.128.0`, `255.255.0.0`, `255.254.0.0`, `255.252.0.0`, `255.240.0.0`, `255.224.0.0`, `255.192.0.0`, `255.128.0.0`, `255.0.0.0`, `254.0.0.0`, `252.0.0.0`, `248.0.0.0`, `240.0.0.0`, `224.0.0.0`, `192.0.0.0`, `128.0.0.0`, `0.0.0.0`
        """
        return pulumi.get(self, "mask")

    @mask.setter
    def mask(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "mask", value)

    @_builtins.property
    @pulumi.getter(name="maskVariable")
    def mask_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "mask_variable")

    @mask_variable.setter
    def mask_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "mask_variable", value)


if not MYPY:
    class ServiceRoutingEigrpFeatureMd5KeyArgsDict(TypedDict):
        key_id: NotRequired[pulumi.Input[_builtins.int]]
        """
        Set MD5 key ID
          - Range: `1`-`255`
        """
        key_id_variable: NotRequired[pulumi.Input[_builtins.str]]
        """
        Variable name
        """
        key_string: NotRequired[pulumi.Input[_builtins.str]]
        """
        Set MD5 key
        """
        key_string_variable: NotRequired[pulumi.Input[_builtins.str]]
        """
        Variable name
        """
elif False:
    ServiceRoutingEigrpFeatureMd5KeyArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ServiceRoutingEigrpFeatureMd5KeyArgs:
    def __init__(__self__, *,
                 key_id: Optional[pulumi.Input[_builtins.int]] = None,
                 key_id_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 key_string: Optional[pulumi.Input[_builtins.str]] = None,
                 key_string_variable: Optional[pulumi.Input[_builtins.str]] = None):
        """
        :param pulumi.Input[_builtins.int] key_id: Set MD5 key ID
                 - Range: `1`-`255`
        :param pulumi.Input[_builtins.str] key_id_variable: Variable name
        :param pulumi.Input[_builtins.str] key_string: Set MD5 key
        :param pulumi.Input[_builtins.str] key_string_variable: Variable name
        """
        if key_id is not None:
            pulumi.set(__self__, "key_id", key_id)
        if key_id_variable is not None:
            pulumi.set(__self__, "key_id_variable", key_id_variable)
        if key_string is not None:
            pulumi.set(__self__, "key_string", key_string)
        if key_string_variable is not None:
            pulumi.set(__self__, "key_string_variable", key_string_variable)

    @_builtins.property
    @pulumi.getter(name="keyId")
    def key_id(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        Set MD5 key ID
          - Range: `1`-`255`
        """
        return pulumi.get(self, "key_id")

    @key_id.setter
    def key_id(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "key_id", value)

    @_builtins.property
    @pulumi.getter(name="keyIdVariable")
    def key_id_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "key_id_variable")

    @key_id_variable.setter
    def key_id_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "key_id_variable", value)

    @_builtins.property
    @pulumi.getter(name="keyString")
    def key_string(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Set MD5 key
        """
        return pulumi.get(self, "key_string")

    @key_string.setter
    def key_string(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "key_string", value)

    @_builtins.property
    @pulumi.getter(name="keyStringVariable")
    def key_string_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "key_string_variable")

    @key_string_variable.setter
    def key_string_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "key_string_variable", value)


if not MYPY:
    class ServiceRoutingEigrpFeatureNetworkArgsDict(TypedDict):
        ip_address: NotRequired[pulumi.Input[_builtins.str]]
        ip_address_variable: NotRequired[pulumi.Input[_builtins.str]]
        """
        Variable name
        """
        mask: NotRequired[pulumi.Input[_builtins.str]]
        """
        - Choices: `255.255.255.255`, `255.255.255.254`, `255.255.255.252`, `255.255.255.248`, `255.255.255.240`, `255.255.255.224`, `255.255.255.192`, `255.255.255.128`, `255.255.255.0`, `255.255.254.0`, `255.255.252.0`, `255.255.248.0`, `255.255.240.0`, `255.255.224.0`, `255.255.192.0`, `255.255.128.0`, `255.255.0.0`, `255.254.0.0`, `255.252.0.0`, `255.240.0.0`, `255.224.0.0`, `255.192.0.0`, `255.128.0.0`, `255.0.0.0`, `254.0.0.0`, `252.0.0.0`, `248.0.0.0`, `240.0.0.0`, `224.0.0.0`, `192.0.0.0`, `128.0.0.0`, `0.0.0.0`
        """
        mask_variable: NotRequired[pulumi.Input[_builtins.str]]
        """
        Variable name
        """
elif False:
    ServiceRoutingEigrpFeatureNetworkArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ServiceRoutingEigrpFeatureNetworkArgs:
    def __init__(__self__, *,
                 ip_address: Optional[pulumi.Input[_builtins.str]] = None,
                 ip_address_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 mask: Optional[pulumi.Input[_builtins.str]] = None,
                 mask_variable: Optional[pulumi.Input[_builtins.str]] = None):
        """
        :param pulumi.Input[_builtins.str] ip_address_variable: Variable name
        :param pulumi.Input[_builtins.str] mask: - Choices: `255.255.255.255`, `255.255.255.254`, `255.255.255.252`, `255.255.255.248`, `255.255.255.240`, `255.255.255.224`, `255.255.255.192`, `255.255.255.128`, `255.255.255.0`, `255.255.254.0`, `255.255.252.0`, `255.255.248.0`, `255.255.240.0`, `255.255.224.0`, `255.255.192.0`, `255.255.128.0`, `255.255.0.0`, `255.254.0.0`, `255.252.0.0`, `255.240.0.0`, `255.224.0.0`, `255.192.0.0`, `255.128.0.0`, `255.0.0.0`, `254.0.0.0`, `252.0.0.0`, `248.0.0.0`, `240.0.0.0`, `224.0.0.0`, `192.0.0.0`, `128.0.0.0`, `0.0.0.0`
        :param pulumi.Input[_builtins.str] mask_variable: Variable name
        """
        if ip_address is not None:
            pulumi.set(__self__, "ip_address", ip_address)
        if ip_address_variable is not None:
            pulumi.set(__self__, "ip_address_variable", ip_address_variable)
        if mask is not None:
            pulumi.set(__self__, "mask", mask)
        if mask_variable is not None:
            pulumi.set(__self__, "mask_variable", mask_variable)

    @_builtins.property
    @pulumi.getter(name="ipAddress")
    def ip_address(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "ip_address")

    @ip_address.setter
    def ip_address(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "ip_address", value)

    @_builtins.property
    @pulumi.getter(name="ipAddressVariable")
    def ip_address_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "ip_address_variable")

    @ip_address_variable.setter
    def ip_address_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "ip_address_variable", value)

    @_builtins.property
    @pulumi.getter
    def mask(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        - Choices: `255.255.255.255`, `255.255.255.254`, `255.255.255.252`, `255.255.255.248`, `255.255.255.240`, `255.255.255.224`, `255.255.255.192`, `255.255.255.128`, `255.255.255.0`, `255.255.254.0`, `255.255.252.0`, `255.255.248.0`, `255.255.240.0`, `255.255.224.0`, `255.255.192.0`, `255.255.128.0`, `255.255.0.0`, `255.254.0.0`, `255.252.0.0`, `255.240.0.0`, `255.224.0.0`, `255.192.0.0`, `255.128.0.0`, `255.0.0.0`, `254.0.0.0`, `252.0.0.0`, `248.0.0.0`, `240.0.0.0`, `224.0.0.0`, `192.0.0.0`, `128.0.0.0`, `0.0.0.0`
        """
        return pulumi.get(self, "mask")

    @mask.setter
    def mask(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "mask", value)

    @_builtins.property
    @pulumi.getter(name="maskVariable")
    def mask_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "mask_variable")

    @mask_variable.setter
    def mask_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "mask_variable", value)


if not MYPY:
    class ServiceRoutingEigrpFeatureRedistributeArgsDict(TypedDict):
        protocol: NotRequired[pulumi.Input[_builtins.str]]
        """
        Set the protocol to redistribute routes from
          - Choices: `bgp`, `connected`, `nat-route`, `omp`, `ospf`, `ospfv3`, `static`
        """
        protocol_variable: NotRequired[pulumi.Input[_builtins.str]]
        """
        Variable name
        """
        route_policy_id: NotRequired[pulumi.Input[_builtins.str]]
elif False:
    ServiceRoutingEigrpFeatureRedistributeArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ServiceRoutingEigrpFeatureRedistributeArgs:
    def __init__(__self__, *,
                 protocol: Optional[pulumi.Input[_builtins.str]] = None,
                 protocol_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 route_policy_id: Optional[pulumi.Input[_builtins.str]] = None):
        """
        :param pulumi.Input[_builtins.str] protocol: Set the protocol to redistribute routes from
                 - Choices: `bgp`, `connected`, `nat-route`, `omp`, `ospf`, `ospfv3`, `static`
        :param pulumi.Input[_builtins.str] protocol_variable: Variable name
        """
        if protocol is not None:
            pulumi.set(__self__, "protocol", protocol)
        if protocol_variable is not None:
            pulumi.set(__self__, "protocol_variable", protocol_variable)
        if route_policy_id is not None:
            pulumi.set(__self__, "route_policy_id", route_policy_id)

    @_builtins.property
    @pulumi.getter
    def protocol(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Set the protocol to redistribute routes from
          - Choices: `bgp`, `connected`, `nat-route`, `omp`, `ospf`, `ospfv3`, `static`
        """
        return pulumi.get(self, "protocol")

    @protocol.setter
    def protocol(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "protocol", value)

    @_builtins.property
    @pulumi.getter(name="protocolVariable")
    def protocol_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "protocol_variable")

    @protocol_variable.setter
    def protocol_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "protocol_variable", value)

    @_builtins.property
    @pulumi.getter(name="routePolicyId")
    def route_policy_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "route_policy_id")

    @route_policy_id.setter
    def route_policy_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "route_policy_id", value)


if not MYPY:
    class ServiceRoutingOspfFeatureAreaArgsDict(TypedDict):
        area_number: NotRequired[pulumi.Input[_builtins.int]]
        """
        Set OSPF area number
          - Range: `0`-`4294967295`
        """
        area_number_variable: NotRequired[pulumi.Input[_builtins.str]]
        """
        Variable name
        """
        area_type: NotRequired[pulumi.Input[_builtins.str]]
        """
        set the area type
          - Choices: `stub`, `nssa`
        """
        interfaces: NotRequired[pulumi.Input[Sequence[pulumi.Input['ServiceRoutingOspfFeatureAreaInterfaceArgsDict']]]]
        """
        Set OSPF interface parameters
        """
        no_summary: NotRequired[pulumi.Input[_builtins.bool]]
        """
        Do not inject interarea routes into STUB or NSSA
          - Default value: `false`
        """
        no_summary_variable: NotRequired[pulumi.Input[_builtins.str]]
        """
        Variable name
        """
        ranges: NotRequired[pulumi.Input[Sequence[pulumi.Input['ServiceRoutingOspfFeatureAreaRangeArgsDict']]]]
        """
        Summarize OSPF routes at an area boundary
        """
elif False:
    ServiceRoutingOspfFeatureAreaArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ServiceRoutingOspfFeatureAreaArgs:
    def __init__(__self__, *,
                 area_number: Optional[pulumi.Input[_builtins.int]] = None,
                 area_number_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 area_type: Optional[pulumi.Input[_builtins.str]] = None,
                 interfaces: Optional[pulumi.Input[Sequence[pulumi.Input['ServiceRoutingOspfFeatureAreaInterfaceArgs']]]] = None,
                 no_summary: Optional[pulumi.Input[_builtins.bool]] = None,
                 no_summary_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 ranges: Optional[pulumi.Input[Sequence[pulumi.Input['ServiceRoutingOspfFeatureAreaRangeArgs']]]] = None):
        """
        :param pulumi.Input[_builtins.int] area_number: Set OSPF area number
                 - Range: `0`-`4294967295`
        :param pulumi.Input[_builtins.str] area_number_variable: Variable name
        :param pulumi.Input[_builtins.str] area_type: set the area type
                 - Choices: `stub`, `nssa`
        :param pulumi.Input[Sequence[pulumi.Input['ServiceRoutingOspfFeatureAreaInterfaceArgs']]] interfaces: Set OSPF interface parameters
        :param pulumi.Input[_builtins.bool] no_summary: Do not inject interarea routes into STUB or NSSA
                 - Default value: `false`
        :param pulumi.Input[_builtins.str] no_summary_variable: Variable name
        :param pulumi.Input[Sequence[pulumi.Input['ServiceRoutingOspfFeatureAreaRangeArgs']]] ranges: Summarize OSPF routes at an area boundary
        """
        if area_number is not None:
            pulumi.set(__self__, "area_number", area_number)
        if area_number_variable is not None:
            pulumi.set(__self__, "area_number_variable", area_number_variable)
        if area_type is not None:
            pulumi.set(__self__, "area_type", area_type)
        if interfaces is not None:
            pulumi.set(__self__, "interfaces", interfaces)
        if no_summary is not None:
            pulumi.set(__self__, "no_summary", no_summary)
        if no_summary_variable is not None:
            pulumi.set(__self__, "no_summary_variable", no_summary_variable)
        if ranges is not None:
            pulumi.set(__self__, "ranges", ranges)

    @_builtins.property
    @pulumi.getter(name="areaNumber")
    def area_number(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        Set OSPF area number
          - Range: `0`-`4294967295`
        """
        return pulumi.get(self, "area_number")

    @area_number.setter
    def area_number(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "area_number", value)

    @_builtins.property
    @pulumi.getter(name="areaNumberVariable")
    def area_number_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "area_number_variable")

    @area_number_variable.setter
    def area_number_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "area_number_variable", value)

    @_builtins.property
    @pulumi.getter(name="areaType")
    def area_type(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        set the area type
          - Choices: `stub`, `nssa`
        """
        return pulumi.get(self, "area_type")

    @area_type.setter
    def area_type(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "area_type", value)

    @_builtins.property
    @pulumi.getter
    def interfaces(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ServiceRoutingOspfFeatureAreaInterfaceArgs']]]]:
        """
        Set OSPF interface parameters
        """
        return pulumi.get(self, "interfaces")

    @interfaces.setter
    def interfaces(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ServiceRoutingOspfFeatureAreaInterfaceArgs']]]]):
        pulumi.set(self, "interfaces", value)

    @_builtins.property
    @pulumi.getter(name="noSummary")
    def no_summary(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Do not inject interarea routes into STUB or NSSA
          - Default value: `false`
        """
        return pulumi.get(self, "no_summary")

    @no_summary.setter
    def no_summary(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "no_summary", value)

    @_builtins.property
    @pulumi.getter(name="noSummaryVariable")
    def no_summary_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "no_summary_variable")

    @no_summary_variable.setter
    def no_summary_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "no_summary_variable", value)

    @_builtins.property
    @pulumi.getter
    def ranges(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ServiceRoutingOspfFeatureAreaRangeArgs']]]]:
        """
        Summarize OSPF routes at an area boundary
        """
        return pulumi.get(self, "ranges")

    @ranges.setter
    def ranges(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ServiceRoutingOspfFeatureAreaRangeArgs']]]]):
        pulumi.set(self, "ranges", value)


if not MYPY:
    class ServiceRoutingOspfFeatureAreaInterfaceArgsDict(TypedDict):
        authentication_type: NotRequired[pulumi.Input[_builtins.str]]
        """
        Set OSPF interface authentication type
          - Choices: `message-digest`
        """
        authentication_type_variable: NotRequired[pulumi.Input[_builtins.str]]
        """
        Variable name
        """
        cost: NotRequired[pulumi.Input[_builtins.int]]
        """
        Set cost of OSPF interface
          - Range: `1`-`65535`
        """
        cost_variable: NotRequired[pulumi.Input[_builtins.str]]
        """
        Variable name
        """
        dead_interval: NotRequired[pulumi.Input[_builtins.int]]
        """
        Set interval after which neighbor is declared to be down
          - Range: `1`-`65535`
          - Default value: `40`
        """
        dead_interval_variable: NotRequired[pulumi.Input[_builtins.str]]
        """
        Variable name
        """
        designated_router_priority: NotRequired[pulumi.Input[_builtins.int]]
        """
        Set router’s priority to be elected as designated router
          - Range: `0`-`255`
          - Default value: `1`
        """
        designated_router_priority_variable: NotRequired[pulumi.Input[_builtins.str]]
        """
        Variable name
        """
        hello_interval: NotRequired[pulumi.Input[_builtins.int]]
        """
        Set interval between OSPF hello packets
          - Range: `1`-`65535`
          - Default value: `10`
        """
        hello_interval_variable: NotRequired[pulumi.Input[_builtins.str]]
        """
        Variable name
        """
        lsa_retransmit_interval: NotRequired[pulumi.Input[_builtins.int]]
        """
        Set time between retransmitting LSAs
          - Range: `1`-`65535`
          - Default value: `5`
        """
        lsa_retransmit_interval_variable: NotRequired[pulumi.Input[_builtins.str]]
        """
        Variable name
        """
        message_digest_key: NotRequired[pulumi.Input[_builtins.str]]
        """
        Set MD5 authentication key
        """
        message_digest_key_id: NotRequired[pulumi.Input[_builtins.int]]
        """
        Set MD5 message digest key
          - Range: `1`-`255`
        """
        message_digest_key_id_variable: NotRequired[pulumi.Input[_builtins.str]]
        """
        Variable name
        """
        message_digest_key_variable: NotRequired[pulumi.Input[_builtins.str]]
        """
        Variable name
        """
        name: NotRequired[pulumi.Input[_builtins.str]]
        """
        Set interface name
        """
        name_variable: NotRequired[pulumi.Input[_builtins.str]]
        """
        Variable name
        """
        network_type: NotRequired[pulumi.Input[_builtins.str]]
        """
        Set the OSPF network type
          - Choices: `broadcast`, `point-to-point`, `non-broadcast`, `point-to-multipoint`
          - Default value: `broadcast`
        """
        network_type_variable: NotRequired[pulumi.Input[_builtins.str]]
        """
        Variable name
        """
        passive_interface: NotRequired[pulumi.Input[_builtins.bool]]
        """
        Set the interface to advertise its address, but not to actively run OSPF
          - Default value: `false`
        """
        passive_interface_variable: NotRequired[pulumi.Input[_builtins.str]]
        """
        Variable name
        """
elif False:
    ServiceRoutingOspfFeatureAreaInterfaceArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ServiceRoutingOspfFeatureAreaInterfaceArgs:
    def __init__(__self__, *,
                 authentication_type: Optional[pulumi.Input[_builtins.str]] = None,
                 authentication_type_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 cost: Optional[pulumi.Input[_builtins.int]] = None,
                 cost_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 dead_interval: Optional[pulumi.Input[_builtins.int]] = None,
                 dead_interval_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 designated_router_priority: Optional[pulumi.Input[_builtins.int]] = None,
                 designated_router_priority_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 hello_interval: Optional[pulumi.Input[_builtins.int]] = None,
                 hello_interval_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 lsa_retransmit_interval: Optional[pulumi.Input[_builtins.int]] = None,
                 lsa_retransmit_interval_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 message_digest_key: Optional[pulumi.Input[_builtins.str]] = None,
                 message_digest_key_id: Optional[pulumi.Input[_builtins.int]] = None,
                 message_digest_key_id_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 message_digest_key_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 name_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 network_type: Optional[pulumi.Input[_builtins.str]] = None,
                 network_type_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 passive_interface: Optional[pulumi.Input[_builtins.bool]] = None,
                 passive_interface_variable: Optional[pulumi.Input[_builtins.str]] = None):
        """
        :param pulumi.Input[_builtins.str] authentication_type: Set OSPF interface authentication type
                 - Choices: `message-digest`
        :param pulumi.Input[_builtins.str] authentication_type_variable: Variable name
        :param pulumi.Input[_builtins.int] cost: Set cost of OSPF interface
                 - Range: `1`-`65535`
        :param pulumi.Input[_builtins.str] cost_variable: Variable name
        :param pulumi.Input[_builtins.int] dead_interval: Set interval after which neighbor is declared to be down
                 - Range: `1`-`65535`
                 - Default value: `40`
        :param pulumi.Input[_builtins.str] dead_interval_variable: Variable name
        :param pulumi.Input[_builtins.int] designated_router_priority: Set router’s priority to be elected as designated router
                 - Range: `0`-`255`
                 - Default value: `1`
        :param pulumi.Input[_builtins.str] designated_router_priority_variable: Variable name
        :param pulumi.Input[_builtins.int] hello_interval: Set interval between OSPF hello packets
                 - Range: `1`-`65535`
                 - Default value: `10`
        :param pulumi.Input[_builtins.str] hello_interval_variable: Variable name
        :param pulumi.Input[_builtins.int] lsa_retransmit_interval: Set time between retransmitting LSAs
                 - Range: `1`-`65535`
                 - Default value: `5`
        :param pulumi.Input[_builtins.str] lsa_retransmit_interval_variable: Variable name
        :param pulumi.Input[_builtins.str] message_digest_key: Set MD5 authentication key
        :param pulumi.Input[_builtins.int] message_digest_key_id: Set MD5 message digest key
                 - Range: `1`-`255`
        :param pulumi.Input[_builtins.str] message_digest_key_id_variable: Variable name
        :param pulumi.Input[_builtins.str] message_digest_key_variable: Variable name
        :param pulumi.Input[_builtins.str] name: Set interface name
        :param pulumi.Input[_builtins.str] name_variable: Variable name
        :param pulumi.Input[_builtins.str] network_type: Set the OSPF network type
                 - Choices: `broadcast`, `point-to-point`, `non-broadcast`, `point-to-multipoint`
                 - Default value: `broadcast`
        :param pulumi.Input[_builtins.str] network_type_variable: Variable name
        :param pulumi.Input[_builtins.bool] passive_interface: Set the interface to advertise its address, but not to actively run OSPF
                 - Default value: `false`
        :param pulumi.Input[_builtins.str] passive_interface_variable: Variable name
        """
        if authentication_type is not None:
            pulumi.set(__self__, "authentication_type", authentication_type)
        if authentication_type_variable is not None:
            pulumi.set(__self__, "authentication_type_variable", authentication_type_variable)
        if cost is not None:
            pulumi.set(__self__, "cost", cost)
        if cost_variable is not None:
            pulumi.set(__self__, "cost_variable", cost_variable)
        if dead_interval is not None:
            pulumi.set(__self__, "dead_interval", dead_interval)
        if dead_interval_variable is not None:
            pulumi.set(__self__, "dead_interval_variable", dead_interval_variable)
        if designated_router_priority is not None:
            pulumi.set(__self__, "designated_router_priority", designated_router_priority)
        if designated_router_priority_variable is not None:
            pulumi.set(__self__, "designated_router_priority_variable", designated_router_priority_variable)
        if hello_interval is not None:
            pulumi.set(__self__, "hello_interval", hello_interval)
        if hello_interval_variable is not None:
            pulumi.set(__self__, "hello_interval_variable", hello_interval_variable)
        if lsa_retransmit_interval is not None:
            pulumi.set(__self__, "lsa_retransmit_interval", lsa_retransmit_interval)
        if lsa_retransmit_interval_variable is not None:
            pulumi.set(__self__, "lsa_retransmit_interval_variable", lsa_retransmit_interval_variable)
        if message_digest_key is not None:
            pulumi.set(__self__, "message_digest_key", message_digest_key)
        if message_digest_key_id is not None:
            pulumi.set(__self__, "message_digest_key_id", message_digest_key_id)
        if message_digest_key_id_variable is not None:
            pulumi.set(__self__, "message_digest_key_id_variable", message_digest_key_id_variable)
        if message_digest_key_variable is not None:
            pulumi.set(__self__, "message_digest_key_variable", message_digest_key_variable)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if name_variable is not None:
            pulumi.set(__self__, "name_variable", name_variable)
        if network_type is not None:
            pulumi.set(__self__, "network_type", network_type)
        if network_type_variable is not None:
            pulumi.set(__self__, "network_type_variable", network_type_variable)
        if passive_interface is not None:
            pulumi.set(__self__, "passive_interface", passive_interface)
        if passive_interface_variable is not None:
            pulumi.set(__self__, "passive_interface_variable", passive_interface_variable)

    @_builtins.property
    @pulumi.getter(name="authenticationType")
    def authentication_type(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Set OSPF interface authentication type
          - Choices: `message-digest`
        """
        return pulumi.get(self, "authentication_type")

    @authentication_type.setter
    def authentication_type(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "authentication_type", value)

    @_builtins.property
    @pulumi.getter(name="authenticationTypeVariable")
    def authentication_type_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "authentication_type_variable")

    @authentication_type_variable.setter
    def authentication_type_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "authentication_type_variable", value)

    @_builtins.property
    @pulumi.getter
    def cost(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        Set cost of OSPF interface
          - Range: `1`-`65535`
        """
        return pulumi.get(self, "cost")

    @cost.setter
    def cost(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "cost", value)

    @_builtins.property
    @pulumi.getter(name="costVariable")
    def cost_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "cost_variable")

    @cost_variable.setter
    def cost_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "cost_variable", value)

    @_builtins.property
    @pulumi.getter(name="deadInterval")
    def dead_interval(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        Set interval after which neighbor is declared to be down
          - Range: `1`-`65535`
          - Default value: `40`
        """
        return pulumi.get(self, "dead_interval")

    @dead_interval.setter
    def dead_interval(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "dead_interval", value)

    @_builtins.property
    @pulumi.getter(name="deadIntervalVariable")
    def dead_interval_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "dead_interval_variable")

    @dead_interval_variable.setter
    def dead_interval_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "dead_interval_variable", value)

    @_builtins.property
    @pulumi.getter(name="designatedRouterPriority")
    def designated_router_priority(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        Set router’s priority to be elected as designated router
          - Range: `0`-`255`
          - Default value: `1`
        """
        return pulumi.get(self, "designated_router_priority")

    @designated_router_priority.setter
    def designated_router_priority(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "designated_router_priority", value)

    @_builtins.property
    @pulumi.getter(name="designatedRouterPriorityVariable")
    def designated_router_priority_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "designated_router_priority_variable")

    @designated_router_priority_variable.setter
    def designated_router_priority_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "designated_router_priority_variable", value)

    @_builtins.property
    @pulumi.getter(name="helloInterval")
    def hello_interval(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        Set interval between OSPF hello packets
          - Range: `1`-`65535`
          - Default value: `10`
        """
        return pulumi.get(self, "hello_interval")

    @hello_interval.setter
    def hello_interval(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "hello_interval", value)

    @_builtins.property
    @pulumi.getter(name="helloIntervalVariable")
    def hello_interval_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "hello_interval_variable")

    @hello_interval_variable.setter
    def hello_interval_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "hello_interval_variable", value)

    @_builtins.property
    @pulumi.getter(name="lsaRetransmitInterval")
    def lsa_retransmit_interval(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        Set time between retransmitting LSAs
          - Range: `1`-`65535`
          - Default value: `5`
        """
        return pulumi.get(self, "lsa_retransmit_interval")

    @lsa_retransmit_interval.setter
    def lsa_retransmit_interval(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "lsa_retransmit_interval", value)

    @_builtins.property
    @pulumi.getter(name="lsaRetransmitIntervalVariable")
    def lsa_retransmit_interval_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "lsa_retransmit_interval_variable")

    @lsa_retransmit_interval_variable.setter
    def lsa_retransmit_interval_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "lsa_retransmit_interval_variable", value)

    @_builtins.property
    @pulumi.getter(name="messageDigestKey")
    def message_digest_key(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Set MD5 authentication key
        """
        return pulumi.get(self, "message_digest_key")

    @message_digest_key.setter
    def message_digest_key(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "message_digest_key", value)

    @_builtins.property
    @pulumi.getter(name="messageDigestKeyId")
    def message_digest_key_id(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        Set MD5 message digest key
          - Range: `1`-`255`
        """
        return pulumi.get(self, "message_digest_key_id")

    @message_digest_key_id.setter
    def message_digest_key_id(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "message_digest_key_id", value)

    @_builtins.property
    @pulumi.getter(name="messageDigestKeyIdVariable")
    def message_digest_key_id_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "message_digest_key_id_variable")

    @message_digest_key_id_variable.setter
    def message_digest_key_id_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "message_digest_key_id_variable", value)

    @_builtins.property
    @pulumi.getter(name="messageDigestKeyVariable")
    def message_digest_key_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "message_digest_key_variable")

    @message_digest_key_variable.setter
    def message_digest_key_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "message_digest_key_variable", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Set interface name
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "name", value)

    @_builtins.property
    @pulumi.getter(name="nameVariable")
    def name_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "name_variable")

    @name_variable.setter
    def name_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "name_variable", value)

    @_builtins.property
    @pulumi.getter(name="networkType")
    def network_type(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Set the OSPF network type
          - Choices: `broadcast`, `point-to-point`, `non-broadcast`, `point-to-multipoint`
          - Default value: `broadcast`
        """
        return pulumi.get(self, "network_type")

    @network_type.setter
    def network_type(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "network_type", value)

    @_builtins.property
    @pulumi.getter(name="networkTypeVariable")
    def network_type_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "network_type_variable")

    @network_type_variable.setter
    def network_type_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "network_type_variable", value)

    @_builtins.property
    @pulumi.getter(name="passiveInterface")
    def passive_interface(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Set the interface to advertise its address, but not to actively run OSPF
          - Default value: `false`
        """
        return pulumi.get(self, "passive_interface")

    @passive_interface.setter
    def passive_interface(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "passive_interface", value)

    @_builtins.property
    @pulumi.getter(name="passiveInterfaceVariable")
    def passive_interface_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "passive_interface_variable")

    @passive_interface_variable.setter
    def passive_interface_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "passive_interface_variable", value)


if not MYPY:
    class ServiceRoutingOspfFeatureAreaRangeArgsDict(TypedDict):
        cost: NotRequired[pulumi.Input[_builtins.int]]
        """
        Set cost for this range
          - Range: `0`-`16777214`
        """
        cost_variable: NotRequired[pulumi.Input[_builtins.str]]
        """
        Variable name
        """
        ip_address: NotRequired[pulumi.Input[_builtins.str]]
        """
        IP Address
        """
        ip_address_variable: NotRequired[pulumi.Input[_builtins.str]]
        """
        Variable name
        """
        no_advertise: NotRequired[pulumi.Input[_builtins.bool]]
        """
        Do not advertise this range
          - Default value: `false`
        """
        no_advertise_variable: NotRequired[pulumi.Input[_builtins.str]]
        """
        Variable name
        """
        subnet_mask: NotRequired[pulumi.Input[_builtins.str]]
        """
        Subnet Mask
          - Choices: `255.255.255.255`, `255.255.255.254`, `255.255.255.252`, `255.255.255.248`, `255.255.255.240`, `255.255.255.224`, `255.255.255.192`, `255.255.255.128`, `255.255.255.0`, `255.255.254.0`, `255.255.252.0`, `255.255.248.0`, `255.255.240.0`, `255.255.224.0`, `255.255.192.0`, `255.255.128.0`, `255.255.0.0`, `255.254.0.0`, `255.252.0.0`, `255.240.0.0`, `255.224.0.0`, `255.192.0.0`, `255.128.0.0`, `255.0.0.0`, `254.0.0.0`, `252.0.0.0`, `248.0.0.0`, `240.0.0.0`, `224.0.0.0`, `192.0.0.0`, `128.0.0.0`, `0.0.0.0`
        """
        subnet_mask_variable: NotRequired[pulumi.Input[_builtins.str]]
        """
        Variable name
        """
elif False:
    ServiceRoutingOspfFeatureAreaRangeArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ServiceRoutingOspfFeatureAreaRangeArgs:
    def __init__(__self__, *,
                 cost: Optional[pulumi.Input[_builtins.int]] = None,
                 cost_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 ip_address: Optional[pulumi.Input[_builtins.str]] = None,
                 ip_address_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 no_advertise: Optional[pulumi.Input[_builtins.bool]] = None,
                 no_advertise_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 subnet_mask: Optional[pulumi.Input[_builtins.str]] = None,
                 subnet_mask_variable: Optional[pulumi.Input[_builtins.str]] = None):
        """
        :param pulumi.Input[_builtins.int] cost: Set cost for this range
                 - Range: `0`-`16777214`
        :param pulumi.Input[_builtins.str] cost_variable: Variable name
        :param pulumi.Input[_builtins.str] ip_address: IP Address
        :param pulumi.Input[_builtins.str] ip_address_variable: Variable name
        :param pulumi.Input[_builtins.bool] no_advertise: Do not advertise this range
                 - Default value: `false`
        :param pulumi.Input[_builtins.str] no_advertise_variable: Variable name
        :param pulumi.Input[_builtins.str] subnet_mask: Subnet Mask
                 - Choices: `255.255.255.255`, `255.255.255.254`, `255.255.255.252`, `255.255.255.248`, `255.255.255.240`, `255.255.255.224`, `255.255.255.192`, `255.255.255.128`, `255.255.255.0`, `255.255.254.0`, `255.255.252.0`, `255.255.248.0`, `255.255.240.0`, `255.255.224.0`, `255.255.192.0`, `255.255.128.0`, `255.255.0.0`, `255.254.0.0`, `255.252.0.0`, `255.240.0.0`, `255.224.0.0`, `255.192.0.0`, `255.128.0.0`, `255.0.0.0`, `254.0.0.0`, `252.0.0.0`, `248.0.0.0`, `240.0.0.0`, `224.0.0.0`, `192.0.0.0`, `128.0.0.0`, `0.0.0.0`
        :param pulumi.Input[_builtins.str] subnet_mask_variable: Variable name
        """
        if cost is not None:
            pulumi.set(__self__, "cost", cost)
        if cost_variable is not None:
            pulumi.set(__self__, "cost_variable", cost_variable)
        if ip_address is not None:
            pulumi.set(__self__, "ip_address", ip_address)
        if ip_address_variable is not None:
            pulumi.set(__self__, "ip_address_variable", ip_address_variable)
        if no_advertise is not None:
            pulumi.set(__self__, "no_advertise", no_advertise)
        if no_advertise_variable is not None:
            pulumi.set(__self__, "no_advertise_variable", no_advertise_variable)
        if subnet_mask is not None:
            pulumi.set(__self__, "subnet_mask", subnet_mask)
        if subnet_mask_variable is not None:
            pulumi.set(__self__, "subnet_mask_variable", subnet_mask_variable)

    @_builtins.property
    @pulumi.getter
    def cost(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        Set cost for this range
          - Range: `0`-`16777214`
        """
        return pulumi.get(self, "cost")

    @cost.setter
    def cost(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "cost", value)

    @_builtins.property
    @pulumi.getter(name="costVariable")
    def cost_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "cost_variable")

    @cost_variable.setter
    def cost_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "cost_variable", value)

    @_builtins.property
    @pulumi.getter(name="ipAddress")
    def ip_address(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        IP Address
        """
        return pulumi.get(self, "ip_address")

    @ip_address.setter
    def ip_address(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "ip_address", value)

    @_builtins.property
    @pulumi.getter(name="ipAddressVariable")
    def ip_address_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "ip_address_variable")

    @ip_address_variable.setter
    def ip_address_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "ip_address_variable", value)

    @_builtins.property
    @pulumi.getter(name="noAdvertise")
    def no_advertise(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Do not advertise this range
          - Default value: `false`
        """
        return pulumi.get(self, "no_advertise")

    @no_advertise.setter
    def no_advertise(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "no_advertise", value)

    @_builtins.property
    @pulumi.getter(name="noAdvertiseVariable")
    def no_advertise_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "no_advertise_variable")

    @no_advertise_variable.setter
    def no_advertise_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "no_advertise_variable", value)

    @_builtins.property
    @pulumi.getter(name="subnetMask")
    def subnet_mask(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Subnet Mask
          - Choices: `255.255.255.255`, `255.255.255.254`, `255.255.255.252`, `255.255.255.248`, `255.255.255.240`, `255.255.255.224`, `255.255.255.192`, `255.255.255.128`, `255.255.255.0`, `255.255.254.0`, `255.255.252.0`, `255.255.248.0`, `255.255.240.0`, `255.255.224.0`, `255.255.192.0`, `255.255.128.0`, `255.255.0.0`, `255.254.0.0`, `255.252.0.0`, `255.240.0.0`, `255.224.0.0`, `255.192.0.0`, `255.128.0.0`, `255.0.0.0`, `254.0.0.0`, `252.0.0.0`, `248.0.0.0`, `240.0.0.0`, `224.0.0.0`, `192.0.0.0`, `128.0.0.0`, `0.0.0.0`
        """
        return pulumi.get(self, "subnet_mask")

    @subnet_mask.setter
    def subnet_mask(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "subnet_mask", value)

    @_builtins.property
    @pulumi.getter(name="subnetMaskVariable")
    def subnet_mask_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "subnet_mask_variable")

    @subnet_mask_variable.setter
    def subnet_mask_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "subnet_mask_variable", value)


if not MYPY:
    class ServiceRoutingOspfFeatureRedistributeArgsDict(TypedDict):
        nat_dia: NotRequired[pulumi.Input[_builtins.bool]]
        """
        Enable NAT DIA for redistributed routes
          - Default value: `true`
        """
        nat_dia_variable: NotRequired[pulumi.Input[_builtins.str]]
        """
        Variable name
        """
        protocol: NotRequired[pulumi.Input[_builtins.str]]
        """
        Set the protocol
          - Choices: `static`, `connected`, `bgp`, `omp`, `nat`, `eigrp`
        """
        protocol_variable: NotRequired[pulumi.Input[_builtins.str]]
        """
        Variable name
        """
        route_policy_id: NotRequired[pulumi.Input[_builtins.str]]
        translate_rib_metric: NotRequired[pulumi.Input[_builtins.bool]]
        """
        Translate Rib Metric, Attribute conditional on `protocol` being equal to `omp`
          - Default value: `false`
        """
elif False:
    ServiceRoutingOspfFeatureRedistributeArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ServiceRoutingOspfFeatureRedistributeArgs:
    def __init__(__self__, *,
                 nat_dia: Optional[pulumi.Input[_builtins.bool]] = None,
                 nat_dia_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 protocol: Optional[pulumi.Input[_builtins.str]] = None,
                 protocol_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 route_policy_id: Optional[pulumi.Input[_builtins.str]] = None,
                 translate_rib_metric: Optional[pulumi.Input[_builtins.bool]] = None):
        """
        :param pulumi.Input[_builtins.bool] nat_dia: Enable NAT DIA for redistributed routes
                 - Default value: `true`
        :param pulumi.Input[_builtins.str] nat_dia_variable: Variable name
        :param pulumi.Input[_builtins.str] protocol: Set the protocol
                 - Choices: `static`, `connected`, `bgp`, `omp`, `nat`, `eigrp`
        :param pulumi.Input[_builtins.str] protocol_variable: Variable name
        :param pulumi.Input[_builtins.bool] translate_rib_metric: Translate Rib Metric, Attribute conditional on `protocol` being equal to `omp`
                 - Default value: `false`
        """
        if nat_dia is not None:
            pulumi.set(__self__, "nat_dia", nat_dia)
        if nat_dia_variable is not None:
            pulumi.set(__self__, "nat_dia_variable", nat_dia_variable)
        if protocol is not None:
            pulumi.set(__self__, "protocol", protocol)
        if protocol_variable is not None:
            pulumi.set(__self__, "protocol_variable", protocol_variable)
        if route_policy_id is not None:
            pulumi.set(__self__, "route_policy_id", route_policy_id)
        if translate_rib_metric is not None:
            pulumi.set(__self__, "translate_rib_metric", translate_rib_metric)

    @_builtins.property
    @pulumi.getter(name="natDia")
    def nat_dia(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Enable NAT DIA for redistributed routes
          - Default value: `true`
        """
        return pulumi.get(self, "nat_dia")

    @nat_dia.setter
    def nat_dia(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "nat_dia", value)

    @_builtins.property
    @pulumi.getter(name="natDiaVariable")
    def nat_dia_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "nat_dia_variable")

    @nat_dia_variable.setter
    def nat_dia_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "nat_dia_variable", value)

    @_builtins.property
    @pulumi.getter
    def protocol(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Set the protocol
          - Choices: `static`, `connected`, `bgp`, `omp`, `nat`, `eigrp`
        """
        return pulumi.get(self, "protocol")

    @protocol.setter
    def protocol(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "protocol", value)

    @_builtins.property
    @pulumi.getter(name="protocolVariable")
    def protocol_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "protocol_variable")

    @protocol_variable.setter
    def protocol_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "protocol_variable", value)

    @_builtins.property
    @pulumi.getter(name="routePolicyId")
    def route_policy_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "route_policy_id")

    @route_policy_id.setter
    def route_policy_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "route_policy_id", value)

    @_builtins.property
    @pulumi.getter(name="translateRibMetric")
    def translate_rib_metric(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Translate Rib Metric, Attribute conditional on `protocol` being equal to `omp`
          - Default value: `false`
        """
        return pulumi.get(self, "translate_rib_metric")

    @translate_rib_metric.setter
    def translate_rib_metric(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "translate_rib_metric", value)


if not MYPY:
    class ServiceRoutingOspfFeatureRouterLsaArgsDict(TypedDict):
        time: NotRequired[pulumi.Input[_builtins.int]]
        """
        Set how long to advertise maximum metric after router starts up
          - Range: `5`-`86400`
        """
        time_variable: NotRequired[pulumi.Input[_builtins.str]]
        """
        Variable name
        """
        type: NotRequired[pulumi.Input[_builtins.str]]
        """
        Set the router LSA advertisement type
          - Choices: `administrative`, `on-startup`
        """
elif False:
    ServiceRoutingOspfFeatureRouterLsaArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ServiceRoutingOspfFeatureRouterLsaArgs:
    def __init__(__self__, *,
                 time: Optional[pulumi.Input[_builtins.int]] = None,
                 time_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 type: Optional[pulumi.Input[_builtins.str]] = None):
        """
        :param pulumi.Input[_builtins.int] time: Set how long to advertise maximum metric after router starts up
                 - Range: `5`-`86400`
        :param pulumi.Input[_builtins.str] time_variable: Variable name
        :param pulumi.Input[_builtins.str] type: Set the router LSA advertisement type
                 - Choices: `administrative`, `on-startup`
        """
        if time is not None:
            pulumi.set(__self__, "time", time)
        if time_variable is not None:
            pulumi.set(__self__, "time_variable", time_variable)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @_builtins.property
    @pulumi.getter
    def time(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        Set how long to advertise maximum metric after router starts up
          - Range: `5`-`86400`
        """
        return pulumi.get(self, "time")

    @time.setter
    def time(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "time", value)

    @_builtins.property
    @pulumi.getter(name="timeVariable")
    def time_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "time_variable")

    @time_variable.setter
    def time_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "time_variable", value)

    @_builtins.property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Set the router LSA advertisement type
          - Choices: `administrative`, `on-startup`
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "type", value)


if not MYPY:
    class ServiceRoutingOspfv3Ipv4FeatureAreaArgsDict(TypedDict):
        always_translate: NotRequired[pulumi.Input[_builtins.bool]]
        """
        Always translate type7 LSAs
        """
        always_translate_variable: NotRequired[pulumi.Input[_builtins.str]]
        """
        Variable name
        """
        area_number: NotRequired[pulumi.Input[_builtins.int]]
        """
        Set OSPF area number
          - Range: `0`-`4294967295`
        """
        area_number_variable: NotRequired[pulumi.Input[_builtins.str]]
        """
        Variable name
        """
        area_type: NotRequired[pulumi.Input[_builtins.str]]
        """
        stub area type
          - Choices: `stub`
        """
        interfaces: NotRequired[pulumi.Input[Sequence[pulumi.Input['ServiceRoutingOspfv3Ipv4FeatureAreaInterfaceArgsDict']]]]
        """
        Set OSPF interface parameters
        """
        no_summary: NotRequired[pulumi.Input[_builtins.bool]]
        """
        Do not inject inter-area routes
        """
        no_summary_variable: NotRequired[pulumi.Input[_builtins.str]]
        """
        Variable name
        """
        ranges: NotRequired[pulumi.Input[Sequence[pulumi.Input['ServiceRoutingOspfv3Ipv4FeatureAreaRangeArgsDict']]]]
        """
        Summarize OSPF routes at an area boundary
        """
elif False:
    ServiceRoutingOspfv3Ipv4FeatureAreaArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ServiceRoutingOspfv3Ipv4FeatureAreaArgs:
    def __init__(__self__, *,
                 always_translate: Optional[pulumi.Input[_builtins.bool]] = None,
                 always_translate_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 area_number: Optional[pulumi.Input[_builtins.int]] = None,
                 area_number_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 area_type: Optional[pulumi.Input[_builtins.str]] = None,
                 interfaces: Optional[pulumi.Input[Sequence[pulumi.Input['ServiceRoutingOspfv3Ipv4FeatureAreaInterfaceArgs']]]] = None,
                 no_summary: Optional[pulumi.Input[_builtins.bool]] = None,
                 no_summary_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 ranges: Optional[pulumi.Input[Sequence[pulumi.Input['ServiceRoutingOspfv3Ipv4FeatureAreaRangeArgs']]]] = None):
        """
        :param pulumi.Input[_builtins.bool] always_translate: Always translate type7 LSAs
        :param pulumi.Input[_builtins.str] always_translate_variable: Variable name
        :param pulumi.Input[_builtins.int] area_number: Set OSPF area number
                 - Range: `0`-`4294967295`
        :param pulumi.Input[_builtins.str] area_number_variable: Variable name
        :param pulumi.Input[_builtins.str] area_type: stub area type
                 - Choices: `stub`
        :param pulumi.Input[Sequence[pulumi.Input['ServiceRoutingOspfv3Ipv4FeatureAreaInterfaceArgs']]] interfaces: Set OSPF interface parameters
        :param pulumi.Input[_builtins.bool] no_summary: Do not inject inter-area routes
        :param pulumi.Input[_builtins.str] no_summary_variable: Variable name
        :param pulumi.Input[Sequence[pulumi.Input['ServiceRoutingOspfv3Ipv4FeatureAreaRangeArgs']]] ranges: Summarize OSPF routes at an area boundary
        """
        if always_translate is not None:
            pulumi.set(__self__, "always_translate", always_translate)
        if always_translate_variable is not None:
            pulumi.set(__self__, "always_translate_variable", always_translate_variable)
        if area_number is not None:
            pulumi.set(__self__, "area_number", area_number)
        if area_number_variable is not None:
            pulumi.set(__self__, "area_number_variable", area_number_variable)
        if area_type is not None:
            pulumi.set(__self__, "area_type", area_type)
        if interfaces is not None:
            pulumi.set(__self__, "interfaces", interfaces)
        if no_summary is not None:
            pulumi.set(__self__, "no_summary", no_summary)
        if no_summary_variable is not None:
            pulumi.set(__self__, "no_summary_variable", no_summary_variable)
        if ranges is not None:
            pulumi.set(__self__, "ranges", ranges)

    @_builtins.property
    @pulumi.getter(name="alwaysTranslate")
    def always_translate(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Always translate type7 LSAs
        """
        return pulumi.get(self, "always_translate")

    @always_translate.setter
    def always_translate(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "always_translate", value)

    @_builtins.property
    @pulumi.getter(name="alwaysTranslateVariable")
    def always_translate_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "always_translate_variable")

    @always_translate_variable.setter
    def always_translate_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "always_translate_variable", value)

    @_builtins.property
    @pulumi.getter(name="areaNumber")
    def area_number(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        Set OSPF area number
          - Range: `0`-`4294967295`
        """
        return pulumi.get(self, "area_number")

    @area_number.setter
    def area_number(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "area_number", value)

    @_builtins.property
    @pulumi.getter(name="areaNumberVariable")
    def area_number_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "area_number_variable")

    @area_number_variable.setter
    def area_number_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "area_number_variable", value)

    @_builtins.property
    @pulumi.getter(name="areaType")
    def area_type(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        stub area type
          - Choices: `stub`
        """
        return pulumi.get(self, "area_type")

    @area_type.setter
    def area_type(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "area_type", value)

    @_builtins.property
    @pulumi.getter
    def interfaces(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ServiceRoutingOspfv3Ipv4FeatureAreaInterfaceArgs']]]]:
        """
        Set OSPF interface parameters
        """
        return pulumi.get(self, "interfaces")

    @interfaces.setter
    def interfaces(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ServiceRoutingOspfv3Ipv4FeatureAreaInterfaceArgs']]]]):
        pulumi.set(self, "interfaces", value)

    @_builtins.property
    @pulumi.getter(name="noSummary")
    def no_summary(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Do not inject inter-area routes
        """
        return pulumi.get(self, "no_summary")

    @no_summary.setter
    def no_summary(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "no_summary", value)

    @_builtins.property
    @pulumi.getter(name="noSummaryVariable")
    def no_summary_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "no_summary_variable")

    @no_summary_variable.setter
    def no_summary_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "no_summary_variable", value)

    @_builtins.property
    @pulumi.getter
    def ranges(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ServiceRoutingOspfv3Ipv4FeatureAreaRangeArgs']]]]:
        """
        Summarize OSPF routes at an area boundary
        """
        return pulumi.get(self, "ranges")

    @ranges.setter
    def ranges(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ServiceRoutingOspfv3Ipv4FeatureAreaRangeArgs']]]]):
        pulumi.set(self, "ranges", value)


if not MYPY:
    class ServiceRoutingOspfv3Ipv4FeatureAreaInterfaceArgsDict(TypedDict):
        authentication_key: NotRequired[pulumi.Input[_builtins.str]]
        """
        Set OSPF interface authentication IPSEC key
        """
        authentication_key_variable: NotRequired[pulumi.Input[_builtins.str]]
        """
        Variable name
        """
        authentication_spi: NotRequired[pulumi.Input[_builtins.int]]
        """
        Set OSPF interface authentication IPSec SPI, range 256..4294967295
          - Range: `256`-`4294967295`
        """
        authentication_spi_variable: NotRequired[pulumi.Input[_builtins.str]]
        """
        Variable name
        """
        authentication_type: NotRequired[pulumi.Input[_builtins.str]]
        """
        No Authentication by default
          - Choices: `no-auth`
        """
        cost: NotRequired[pulumi.Input[_builtins.int]]
        """
        Set cost of OSPF interface
          - Range: `1`-`65535`
        """
        cost_variable: NotRequired[pulumi.Input[_builtins.str]]
        """
        Variable name
        """
        dead_interval: NotRequired[pulumi.Input[_builtins.int]]
        """
        Set interval after which neighbor is declared to be down
          - Range: `1`-`65535`
          - Default value: `40`
        """
        dead_interval_variable: NotRequired[pulumi.Input[_builtins.str]]
        """
        Variable name
        """
        hello_interval: NotRequired[pulumi.Input[_builtins.int]]
        """
        Set interval between OSPF hello packets
          - Range: `1`-`65535`
          - Default value: `10`
        """
        hello_interval_variable: NotRequired[pulumi.Input[_builtins.str]]
        """
        Variable name
        """
        lsa_retransmit_interval: NotRequired[pulumi.Input[_builtins.int]]
        """
        Set time between retransmitting LSAs
          - Range: `1`-`65535`
          - Default value: `5`
        """
        lsa_retransmit_interval_variable: NotRequired[pulumi.Input[_builtins.str]]
        """
        Variable name
        """
        name: NotRequired[pulumi.Input[_builtins.str]]
        """
        Set interface name
        """
        name_variable: NotRequired[pulumi.Input[_builtins.str]]
        """
        Variable name
        """
        network_type: NotRequired[pulumi.Input[_builtins.str]]
        """
        Set the OSPF network type
          - Choices: `broadcast`, `point-to-point`, `non-broadcast`, `point-to-multipoint`
        """
        network_type_variable: NotRequired[pulumi.Input[_builtins.str]]
        """
        Variable name
        """
        passive_interface: NotRequired[pulumi.Input[_builtins.bool]]
        """
        Set the interface to advertise its address, but not to actively run OSPF
          - Default value: `false`
        """
        passive_interface_variable: NotRequired[pulumi.Input[_builtins.str]]
        """
        Variable name
        """
elif False:
    ServiceRoutingOspfv3Ipv4FeatureAreaInterfaceArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ServiceRoutingOspfv3Ipv4FeatureAreaInterfaceArgs:
    def __init__(__self__, *,
                 authentication_key: Optional[pulumi.Input[_builtins.str]] = None,
                 authentication_key_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 authentication_spi: Optional[pulumi.Input[_builtins.int]] = None,
                 authentication_spi_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 authentication_type: Optional[pulumi.Input[_builtins.str]] = None,
                 cost: Optional[pulumi.Input[_builtins.int]] = None,
                 cost_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 dead_interval: Optional[pulumi.Input[_builtins.int]] = None,
                 dead_interval_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 hello_interval: Optional[pulumi.Input[_builtins.int]] = None,
                 hello_interval_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 lsa_retransmit_interval: Optional[pulumi.Input[_builtins.int]] = None,
                 lsa_retransmit_interval_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 name_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 network_type: Optional[pulumi.Input[_builtins.str]] = None,
                 network_type_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 passive_interface: Optional[pulumi.Input[_builtins.bool]] = None,
                 passive_interface_variable: Optional[pulumi.Input[_builtins.str]] = None):
        """
        :param pulumi.Input[_builtins.str] authentication_key: Set OSPF interface authentication IPSEC key
        :param pulumi.Input[_builtins.str] authentication_key_variable: Variable name
        :param pulumi.Input[_builtins.int] authentication_spi: Set OSPF interface authentication IPSec SPI, range 256..4294967295
                 - Range: `256`-`4294967295`
        :param pulumi.Input[_builtins.str] authentication_spi_variable: Variable name
        :param pulumi.Input[_builtins.str] authentication_type: No Authentication by default
                 - Choices: `no-auth`
        :param pulumi.Input[_builtins.int] cost: Set cost of OSPF interface
                 - Range: `1`-`65535`
        :param pulumi.Input[_builtins.str] cost_variable: Variable name
        :param pulumi.Input[_builtins.int] dead_interval: Set interval after which neighbor is declared to be down
                 - Range: `1`-`65535`
                 - Default value: `40`
        :param pulumi.Input[_builtins.str] dead_interval_variable: Variable name
        :param pulumi.Input[_builtins.int] hello_interval: Set interval between OSPF hello packets
                 - Range: `1`-`65535`
                 - Default value: `10`
        :param pulumi.Input[_builtins.str] hello_interval_variable: Variable name
        :param pulumi.Input[_builtins.int] lsa_retransmit_interval: Set time between retransmitting LSAs
                 - Range: `1`-`65535`
                 - Default value: `5`
        :param pulumi.Input[_builtins.str] lsa_retransmit_interval_variable: Variable name
        :param pulumi.Input[_builtins.str] name: Set interface name
        :param pulumi.Input[_builtins.str] name_variable: Variable name
        :param pulumi.Input[_builtins.str] network_type: Set the OSPF network type
                 - Choices: `broadcast`, `point-to-point`, `non-broadcast`, `point-to-multipoint`
        :param pulumi.Input[_builtins.str] network_type_variable: Variable name
        :param pulumi.Input[_builtins.bool] passive_interface: Set the interface to advertise its address, but not to actively run OSPF
                 - Default value: `false`
        :param pulumi.Input[_builtins.str] passive_interface_variable: Variable name
        """
        if authentication_key is not None:
            pulumi.set(__self__, "authentication_key", authentication_key)
        if authentication_key_variable is not None:
            pulumi.set(__self__, "authentication_key_variable", authentication_key_variable)
        if authentication_spi is not None:
            pulumi.set(__self__, "authentication_spi", authentication_spi)
        if authentication_spi_variable is not None:
            pulumi.set(__self__, "authentication_spi_variable", authentication_spi_variable)
        if authentication_type is not None:
            pulumi.set(__self__, "authentication_type", authentication_type)
        if cost is not None:
            pulumi.set(__self__, "cost", cost)
        if cost_variable is not None:
            pulumi.set(__self__, "cost_variable", cost_variable)
        if dead_interval is not None:
            pulumi.set(__self__, "dead_interval", dead_interval)
        if dead_interval_variable is not None:
            pulumi.set(__self__, "dead_interval_variable", dead_interval_variable)
        if hello_interval is not None:
            pulumi.set(__self__, "hello_interval", hello_interval)
        if hello_interval_variable is not None:
            pulumi.set(__self__, "hello_interval_variable", hello_interval_variable)
        if lsa_retransmit_interval is not None:
            pulumi.set(__self__, "lsa_retransmit_interval", lsa_retransmit_interval)
        if lsa_retransmit_interval_variable is not None:
            pulumi.set(__self__, "lsa_retransmit_interval_variable", lsa_retransmit_interval_variable)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if name_variable is not None:
            pulumi.set(__self__, "name_variable", name_variable)
        if network_type is not None:
            pulumi.set(__self__, "network_type", network_type)
        if network_type_variable is not None:
            pulumi.set(__self__, "network_type_variable", network_type_variable)
        if passive_interface is not None:
            pulumi.set(__self__, "passive_interface", passive_interface)
        if passive_interface_variable is not None:
            pulumi.set(__self__, "passive_interface_variable", passive_interface_variable)

    @_builtins.property
    @pulumi.getter(name="authenticationKey")
    def authentication_key(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Set OSPF interface authentication IPSEC key
        """
        return pulumi.get(self, "authentication_key")

    @authentication_key.setter
    def authentication_key(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "authentication_key", value)

    @_builtins.property
    @pulumi.getter(name="authenticationKeyVariable")
    def authentication_key_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "authentication_key_variable")

    @authentication_key_variable.setter
    def authentication_key_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "authentication_key_variable", value)

    @_builtins.property
    @pulumi.getter(name="authenticationSpi")
    def authentication_spi(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        Set OSPF interface authentication IPSec SPI, range 256..4294967295
          - Range: `256`-`4294967295`
        """
        return pulumi.get(self, "authentication_spi")

    @authentication_spi.setter
    def authentication_spi(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "authentication_spi", value)

    @_builtins.property
    @pulumi.getter(name="authenticationSpiVariable")
    def authentication_spi_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "authentication_spi_variable")

    @authentication_spi_variable.setter
    def authentication_spi_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "authentication_spi_variable", value)

    @_builtins.property
    @pulumi.getter(name="authenticationType")
    def authentication_type(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        No Authentication by default
          - Choices: `no-auth`
        """
        return pulumi.get(self, "authentication_type")

    @authentication_type.setter
    def authentication_type(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "authentication_type", value)

    @_builtins.property
    @pulumi.getter
    def cost(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        Set cost of OSPF interface
          - Range: `1`-`65535`
        """
        return pulumi.get(self, "cost")

    @cost.setter
    def cost(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "cost", value)

    @_builtins.property
    @pulumi.getter(name="costVariable")
    def cost_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "cost_variable")

    @cost_variable.setter
    def cost_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "cost_variable", value)

    @_builtins.property
    @pulumi.getter(name="deadInterval")
    def dead_interval(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        Set interval after which neighbor is declared to be down
          - Range: `1`-`65535`
          - Default value: `40`
        """
        return pulumi.get(self, "dead_interval")

    @dead_interval.setter
    def dead_interval(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "dead_interval", value)

    @_builtins.property
    @pulumi.getter(name="deadIntervalVariable")
    def dead_interval_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "dead_interval_variable")

    @dead_interval_variable.setter
    def dead_interval_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "dead_interval_variable", value)

    @_builtins.property
    @pulumi.getter(name="helloInterval")
    def hello_interval(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        Set interval between OSPF hello packets
          - Range: `1`-`65535`
          - Default value: `10`
        """
        return pulumi.get(self, "hello_interval")

    @hello_interval.setter
    def hello_interval(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "hello_interval", value)

    @_builtins.property
    @pulumi.getter(name="helloIntervalVariable")
    def hello_interval_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "hello_interval_variable")

    @hello_interval_variable.setter
    def hello_interval_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "hello_interval_variable", value)

    @_builtins.property
    @pulumi.getter(name="lsaRetransmitInterval")
    def lsa_retransmit_interval(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        Set time between retransmitting LSAs
          - Range: `1`-`65535`
          - Default value: `5`
        """
        return pulumi.get(self, "lsa_retransmit_interval")

    @lsa_retransmit_interval.setter
    def lsa_retransmit_interval(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "lsa_retransmit_interval", value)

    @_builtins.property
    @pulumi.getter(name="lsaRetransmitIntervalVariable")
    def lsa_retransmit_interval_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "lsa_retransmit_interval_variable")

    @lsa_retransmit_interval_variable.setter
    def lsa_retransmit_interval_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "lsa_retransmit_interval_variable", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Set interface name
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "name", value)

    @_builtins.property
    @pulumi.getter(name="nameVariable")
    def name_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "name_variable")

    @name_variable.setter
    def name_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "name_variable", value)

    @_builtins.property
    @pulumi.getter(name="networkType")
    def network_type(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Set the OSPF network type
          - Choices: `broadcast`, `point-to-point`, `non-broadcast`, `point-to-multipoint`
        """
        return pulumi.get(self, "network_type")

    @network_type.setter
    def network_type(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "network_type", value)

    @_builtins.property
    @pulumi.getter(name="networkTypeVariable")
    def network_type_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "network_type_variable")

    @network_type_variable.setter
    def network_type_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "network_type_variable", value)

    @_builtins.property
    @pulumi.getter(name="passiveInterface")
    def passive_interface(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Set the interface to advertise its address, but not to actively run OSPF
          - Default value: `false`
        """
        return pulumi.get(self, "passive_interface")

    @passive_interface.setter
    def passive_interface(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "passive_interface", value)

    @_builtins.property
    @pulumi.getter(name="passiveInterfaceVariable")
    def passive_interface_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "passive_interface_variable")

    @passive_interface_variable.setter
    def passive_interface_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "passive_interface_variable", value)


if not MYPY:
    class ServiceRoutingOspfv3Ipv4FeatureAreaRangeArgsDict(TypedDict):
        cost: NotRequired[pulumi.Input[_builtins.int]]
        """
        Set cost for this range
          - Range: `0`-`16777214`
        """
        cost_variable: NotRequired[pulumi.Input[_builtins.str]]
        """
        Variable name
        """
        ip_address: NotRequired[pulumi.Input[_builtins.str]]
        ip_address_variable: NotRequired[pulumi.Input[_builtins.str]]
        """
        Variable name
        """
        no_advertise: NotRequired[pulumi.Input[_builtins.bool]]
        """
        Do not advertise this range
          - Default value: `false`
        """
        no_advertise_variable: NotRequired[pulumi.Input[_builtins.str]]
        """
        Variable name
        """
        subnet_mask: NotRequired[pulumi.Input[_builtins.str]]
        """
        - Choices: `255.255.255.255`, `255.255.255.254`, `255.255.255.252`, `255.255.255.248`, `255.255.255.240`, `255.255.255.224`, `255.255.255.192`, `255.255.255.128`, `255.255.255.0`, `255.255.254.0`, `255.255.252.0`, `255.255.248.0`, `255.255.240.0`, `255.255.224.0`, `255.255.192.0`, `255.255.128.0`, `255.255.0.0`, `255.254.0.0`, `255.252.0.0`, `255.240.0.0`, `255.224.0.0`, `255.192.0.0`, `255.128.0.0`, `255.0.0.0`, `254.0.0.0`, `252.0.0.0`, `248.0.0.0`, `240.0.0.0`, `224.0.0.0`, `192.0.0.0`, `128.0.0.0`, `0.0.0.0`
        """
        subnet_mask_variable: NotRequired[pulumi.Input[_builtins.str]]
        """
        Variable name
        """
elif False:
    ServiceRoutingOspfv3Ipv4FeatureAreaRangeArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ServiceRoutingOspfv3Ipv4FeatureAreaRangeArgs:
    def __init__(__self__, *,
                 cost: Optional[pulumi.Input[_builtins.int]] = None,
                 cost_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 ip_address: Optional[pulumi.Input[_builtins.str]] = None,
                 ip_address_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 no_advertise: Optional[pulumi.Input[_builtins.bool]] = None,
                 no_advertise_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 subnet_mask: Optional[pulumi.Input[_builtins.str]] = None,
                 subnet_mask_variable: Optional[pulumi.Input[_builtins.str]] = None):
        """
        :param pulumi.Input[_builtins.int] cost: Set cost for this range
                 - Range: `0`-`16777214`
        :param pulumi.Input[_builtins.str] cost_variable: Variable name
        :param pulumi.Input[_builtins.str] ip_address_variable: Variable name
        :param pulumi.Input[_builtins.bool] no_advertise: Do not advertise this range
                 - Default value: `false`
        :param pulumi.Input[_builtins.str] no_advertise_variable: Variable name
        :param pulumi.Input[_builtins.str] subnet_mask: - Choices: `255.255.255.255`, `255.255.255.254`, `255.255.255.252`, `255.255.255.248`, `255.255.255.240`, `255.255.255.224`, `255.255.255.192`, `255.255.255.128`, `255.255.255.0`, `255.255.254.0`, `255.255.252.0`, `255.255.248.0`, `255.255.240.0`, `255.255.224.0`, `255.255.192.0`, `255.255.128.0`, `255.255.0.0`, `255.254.0.0`, `255.252.0.0`, `255.240.0.0`, `255.224.0.0`, `255.192.0.0`, `255.128.0.0`, `255.0.0.0`, `254.0.0.0`, `252.0.0.0`, `248.0.0.0`, `240.0.0.0`, `224.0.0.0`, `192.0.0.0`, `128.0.0.0`, `0.0.0.0`
        :param pulumi.Input[_builtins.str] subnet_mask_variable: Variable name
        """
        if cost is not None:
            pulumi.set(__self__, "cost", cost)
        if cost_variable is not None:
            pulumi.set(__self__, "cost_variable", cost_variable)
        if ip_address is not None:
            pulumi.set(__self__, "ip_address", ip_address)
        if ip_address_variable is not None:
            pulumi.set(__self__, "ip_address_variable", ip_address_variable)
        if no_advertise is not None:
            pulumi.set(__self__, "no_advertise", no_advertise)
        if no_advertise_variable is not None:
            pulumi.set(__self__, "no_advertise_variable", no_advertise_variable)
        if subnet_mask is not None:
            pulumi.set(__self__, "subnet_mask", subnet_mask)
        if subnet_mask_variable is not None:
            pulumi.set(__self__, "subnet_mask_variable", subnet_mask_variable)

    @_builtins.property
    @pulumi.getter
    def cost(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        Set cost for this range
          - Range: `0`-`16777214`
        """
        return pulumi.get(self, "cost")

    @cost.setter
    def cost(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "cost", value)

    @_builtins.property
    @pulumi.getter(name="costVariable")
    def cost_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "cost_variable")

    @cost_variable.setter
    def cost_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "cost_variable", value)

    @_builtins.property
    @pulumi.getter(name="ipAddress")
    def ip_address(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "ip_address")

    @ip_address.setter
    def ip_address(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "ip_address", value)

    @_builtins.property
    @pulumi.getter(name="ipAddressVariable")
    def ip_address_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "ip_address_variable")

    @ip_address_variable.setter
    def ip_address_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "ip_address_variable", value)

    @_builtins.property
    @pulumi.getter(name="noAdvertise")
    def no_advertise(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Do not advertise this range
          - Default value: `false`
        """
        return pulumi.get(self, "no_advertise")

    @no_advertise.setter
    def no_advertise(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "no_advertise", value)

    @_builtins.property
    @pulumi.getter(name="noAdvertiseVariable")
    def no_advertise_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "no_advertise_variable")

    @no_advertise_variable.setter
    def no_advertise_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "no_advertise_variable", value)

    @_builtins.property
    @pulumi.getter(name="subnetMask")
    def subnet_mask(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        - Choices: `255.255.255.255`, `255.255.255.254`, `255.255.255.252`, `255.255.255.248`, `255.255.255.240`, `255.255.255.224`, `255.255.255.192`, `255.255.255.128`, `255.255.255.0`, `255.255.254.0`, `255.255.252.0`, `255.255.248.0`, `255.255.240.0`, `255.255.224.0`, `255.255.192.0`, `255.255.128.0`, `255.255.0.0`, `255.254.0.0`, `255.252.0.0`, `255.240.0.0`, `255.224.0.0`, `255.192.0.0`, `255.128.0.0`, `255.0.0.0`, `254.0.0.0`, `252.0.0.0`, `248.0.0.0`, `240.0.0.0`, `224.0.0.0`, `192.0.0.0`, `128.0.0.0`, `0.0.0.0`
        """
        return pulumi.get(self, "subnet_mask")

    @subnet_mask.setter
    def subnet_mask(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "subnet_mask", value)

    @_builtins.property
    @pulumi.getter(name="subnetMaskVariable")
    def subnet_mask_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "subnet_mask_variable")

    @subnet_mask_variable.setter
    def subnet_mask_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "subnet_mask_variable", value)


if not MYPY:
    class ServiceRoutingOspfv3Ipv4FeatureRedistributeArgsDict(TypedDict):
        nat_dia: NotRequired[pulumi.Input[_builtins.bool]]
        """
        Enable NAT DIA for redistributed routes
          - Default value: `true`
        """
        nat_dia_variable: NotRequired[pulumi.Input[_builtins.str]]
        """
        Variable name
        """
        protocol: NotRequired[pulumi.Input[_builtins.str]]
        """
        Set the protocol
          - Choices: `connected`, `static`, `omp`, `nat-route`, `bgp`, `eigrp`
        """
        protocol_variable: NotRequired[pulumi.Input[_builtins.str]]
        """
        Variable name
        """
        route_policy_id: NotRequired[pulumi.Input[_builtins.str]]
        translate_rib_metric: NotRequired[pulumi.Input[_builtins.bool]]
        """
        Translate Rib Metric, Attribute conditional on `protocol` being equal to `omp`
          - Default value: `false`
        """
elif False:
    ServiceRoutingOspfv3Ipv4FeatureRedistributeArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ServiceRoutingOspfv3Ipv4FeatureRedistributeArgs:
    def __init__(__self__, *,
                 nat_dia: Optional[pulumi.Input[_builtins.bool]] = None,
                 nat_dia_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 protocol: Optional[pulumi.Input[_builtins.str]] = None,
                 protocol_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 route_policy_id: Optional[pulumi.Input[_builtins.str]] = None,
                 translate_rib_metric: Optional[pulumi.Input[_builtins.bool]] = None):
        """
        :param pulumi.Input[_builtins.bool] nat_dia: Enable NAT DIA for redistributed routes
                 - Default value: `true`
        :param pulumi.Input[_builtins.str] nat_dia_variable: Variable name
        :param pulumi.Input[_builtins.str] protocol: Set the protocol
                 - Choices: `connected`, `static`, `omp`, `nat-route`, `bgp`, `eigrp`
        :param pulumi.Input[_builtins.str] protocol_variable: Variable name
        :param pulumi.Input[_builtins.bool] translate_rib_metric: Translate Rib Metric, Attribute conditional on `protocol` being equal to `omp`
                 - Default value: `false`
        """
        if nat_dia is not None:
            pulumi.set(__self__, "nat_dia", nat_dia)
        if nat_dia_variable is not None:
            pulumi.set(__self__, "nat_dia_variable", nat_dia_variable)
        if protocol is not None:
            pulumi.set(__self__, "protocol", protocol)
        if protocol_variable is not None:
            pulumi.set(__self__, "protocol_variable", protocol_variable)
        if route_policy_id is not None:
            pulumi.set(__self__, "route_policy_id", route_policy_id)
        if translate_rib_metric is not None:
            pulumi.set(__self__, "translate_rib_metric", translate_rib_metric)

    @_builtins.property
    @pulumi.getter(name="natDia")
    def nat_dia(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Enable NAT DIA for redistributed routes
          - Default value: `true`
        """
        return pulumi.get(self, "nat_dia")

    @nat_dia.setter
    def nat_dia(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "nat_dia", value)

    @_builtins.property
    @pulumi.getter(name="natDiaVariable")
    def nat_dia_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "nat_dia_variable")

    @nat_dia_variable.setter
    def nat_dia_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "nat_dia_variable", value)

    @_builtins.property
    @pulumi.getter
    def protocol(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Set the protocol
          - Choices: `connected`, `static`, `omp`, `nat-route`, `bgp`, `eigrp`
        """
        return pulumi.get(self, "protocol")

    @protocol.setter
    def protocol(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "protocol", value)

    @_builtins.property
    @pulumi.getter(name="protocolVariable")
    def protocol_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "protocol_variable")

    @protocol_variable.setter
    def protocol_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "protocol_variable", value)

    @_builtins.property
    @pulumi.getter(name="routePolicyId")
    def route_policy_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "route_policy_id")

    @route_policy_id.setter
    def route_policy_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "route_policy_id", value)

    @_builtins.property
    @pulumi.getter(name="translateRibMetric")
    def translate_rib_metric(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Translate Rib Metric, Attribute conditional on `protocol` being equal to `omp`
          - Default value: `false`
        """
        return pulumi.get(self, "translate_rib_metric")

    @translate_rib_metric.setter
    def translate_rib_metric(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "translate_rib_metric", value)


if not MYPY:
    class ServiceRoutingOspfv3Ipv6FeatureAreaArgsDict(TypedDict):
        always_translate: NotRequired[pulumi.Input[_builtins.bool]]
        """
        Always translate type7 LSAs
        """
        always_translate_variable: NotRequired[pulumi.Input[_builtins.str]]
        """
        Variable name
        """
        area_number: NotRequired[pulumi.Input[_builtins.int]]
        """
        Set OSPF area number
          - Range: `0`-`4294967295`
        """
        area_number_variable: NotRequired[pulumi.Input[_builtins.str]]
        """
        Variable name
        """
        area_type: NotRequired[pulumi.Input[_builtins.str]]
        """
        stub area type
          - Choices: `stub`
        """
        interfaces: NotRequired[pulumi.Input[Sequence[pulumi.Input['ServiceRoutingOspfv3Ipv6FeatureAreaInterfaceArgsDict']]]]
        """
        Set OSPF interface parameters
        """
        no_summary: NotRequired[pulumi.Input[_builtins.bool]]
        """
        Do not inject inter-area routes
        """
        no_summary_variable: NotRequired[pulumi.Input[_builtins.str]]
        """
        Variable name
        """
        ranges: NotRequired[pulumi.Input[Sequence[pulumi.Input['ServiceRoutingOspfv3Ipv6FeatureAreaRangeArgsDict']]]]
        """
        Summarize OSPF routes at an area boundary
        """
elif False:
    ServiceRoutingOspfv3Ipv6FeatureAreaArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ServiceRoutingOspfv3Ipv6FeatureAreaArgs:
    def __init__(__self__, *,
                 always_translate: Optional[pulumi.Input[_builtins.bool]] = None,
                 always_translate_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 area_number: Optional[pulumi.Input[_builtins.int]] = None,
                 area_number_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 area_type: Optional[pulumi.Input[_builtins.str]] = None,
                 interfaces: Optional[pulumi.Input[Sequence[pulumi.Input['ServiceRoutingOspfv3Ipv6FeatureAreaInterfaceArgs']]]] = None,
                 no_summary: Optional[pulumi.Input[_builtins.bool]] = None,
                 no_summary_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 ranges: Optional[pulumi.Input[Sequence[pulumi.Input['ServiceRoutingOspfv3Ipv6FeatureAreaRangeArgs']]]] = None):
        """
        :param pulumi.Input[_builtins.bool] always_translate: Always translate type7 LSAs
        :param pulumi.Input[_builtins.str] always_translate_variable: Variable name
        :param pulumi.Input[_builtins.int] area_number: Set OSPF area number
                 - Range: `0`-`4294967295`
        :param pulumi.Input[_builtins.str] area_number_variable: Variable name
        :param pulumi.Input[_builtins.str] area_type: stub area type
                 - Choices: `stub`
        :param pulumi.Input[Sequence[pulumi.Input['ServiceRoutingOspfv3Ipv6FeatureAreaInterfaceArgs']]] interfaces: Set OSPF interface parameters
        :param pulumi.Input[_builtins.bool] no_summary: Do not inject inter-area routes
        :param pulumi.Input[_builtins.str] no_summary_variable: Variable name
        :param pulumi.Input[Sequence[pulumi.Input['ServiceRoutingOspfv3Ipv6FeatureAreaRangeArgs']]] ranges: Summarize OSPF routes at an area boundary
        """
        if always_translate is not None:
            pulumi.set(__self__, "always_translate", always_translate)
        if always_translate_variable is not None:
            pulumi.set(__self__, "always_translate_variable", always_translate_variable)
        if area_number is not None:
            pulumi.set(__self__, "area_number", area_number)
        if area_number_variable is not None:
            pulumi.set(__self__, "area_number_variable", area_number_variable)
        if area_type is not None:
            pulumi.set(__self__, "area_type", area_type)
        if interfaces is not None:
            pulumi.set(__self__, "interfaces", interfaces)
        if no_summary is not None:
            pulumi.set(__self__, "no_summary", no_summary)
        if no_summary_variable is not None:
            pulumi.set(__self__, "no_summary_variable", no_summary_variable)
        if ranges is not None:
            pulumi.set(__self__, "ranges", ranges)

    @_builtins.property
    @pulumi.getter(name="alwaysTranslate")
    def always_translate(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Always translate type7 LSAs
        """
        return pulumi.get(self, "always_translate")

    @always_translate.setter
    def always_translate(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "always_translate", value)

    @_builtins.property
    @pulumi.getter(name="alwaysTranslateVariable")
    def always_translate_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "always_translate_variable")

    @always_translate_variable.setter
    def always_translate_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "always_translate_variable", value)

    @_builtins.property
    @pulumi.getter(name="areaNumber")
    def area_number(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        Set OSPF area number
          - Range: `0`-`4294967295`
        """
        return pulumi.get(self, "area_number")

    @area_number.setter
    def area_number(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "area_number", value)

    @_builtins.property
    @pulumi.getter(name="areaNumberVariable")
    def area_number_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "area_number_variable")

    @area_number_variable.setter
    def area_number_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "area_number_variable", value)

    @_builtins.property
    @pulumi.getter(name="areaType")
    def area_type(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        stub area type
          - Choices: `stub`
        """
        return pulumi.get(self, "area_type")

    @area_type.setter
    def area_type(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "area_type", value)

    @_builtins.property
    @pulumi.getter
    def interfaces(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ServiceRoutingOspfv3Ipv6FeatureAreaInterfaceArgs']]]]:
        """
        Set OSPF interface parameters
        """
        return pulumi.get(self, "interfaces")

    @interfaces.setter
    def interfaces(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ServiceRoutingOspfv3Ipv6FeatureAreaInterfaceArgs']]]]):
        pulumi.set(self, "interfaces", value)

    @_builtins.property
    @pulumi.getter(name="noSummary")
    def no_summary(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Do not inject inter-area routes
        """
        return pulumi.get(self, "no_summary")

    @no_summary.setter
    def no_summary(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "no_summary", value)

    @_builtins.property
    @pulumi.getter(name="noSummaryVariable")
    def no_summary_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "no_summary_variable")

    @no_summary_variable.setter
    def no_summary_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "no_summary_variable", value)

    @_builtins.property
    @pulumi.getter
    def ranges(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ServiceRoutingOspfv3Ipv6FeatureAreaRangeArgs']]]]:
        """
        Summarize OSPF routes at an area boundary
        """
        return pulumi.get(self, "ranges")

    @ranges.setter
    def ranges(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ServiceRoutingOspfv3Ipv6FeatureAreaRangeArgs']]]]):
        pulumi.set(self, "ranges", value)


if not MYPY:
    class ServiceRoutingOspfv3Ipv6FeatureAreaInterfaceArgsDict(TypedDict):
        authentication_key: NotRequired[pulumi.Input[_builtins.str]]
        """
        Set OSPF interface authentication IPSEC key
        """
        authentication_key_variable: NotRequired[pulumi.Input[_builtins.str]]
        """
        Variable name
        """
        authentication_spi: NotRequired[pulumi.Input[_builtins.int]]
        """
        Set OSPF interface authentication IPSec SPI, range 256..4294967295
          - Range: `256`-`4294967295`
        """
        authentication_spi_variable: NotRequired[pulumi.Input[_builtins.str]]
        """
        Variable name
        """
        authentication_type: NotRequired[pulumi.Input[_builtins.str]]
        """
        No Authentication by default
          - Choices: `no-auth`
        """
        cost: NotRequired[pulumi.Input[_builtins.int]]
        """
        Set cost of OSPF interface
          - Range: `1`-`65535`
        """
        cost_variable: NotRequired[pulumi.Input[_builtins.str]]
        """
        Variable name
        """
        dead_interval: NotRequired[pulumi.Input[_builtins.int]]
        """
        Set interval after which neighbor is declared to be down
          - Range: `1`-`65535`
          - Default value: `40`
        """
        dead_interval_variable: NotRequired[pulumi.Input[_builtins.str]]
        """
        Variable name
        """
        hello_interval: NotRequired[pulumi.Input[_builtins.int]]
        """
        Set interval between OSPF hello packets
          - Range: `1`-`65535`
          - Default value: `10`
        """
        hello_interval_variable: NotRequired[pulumi.Input[_builtins.str]]
        """
        Variable name
        """
        lsa_retransmit_interval: NotRequired[pulumi.Input[_builtins.int]]
        """
        Set time between retransmitting LSAs
          - Range: `1`-`65535`
          - Default value: `5`
        """
        lsa_retransmit_interval_variable: NotRequired[pulumi.Input[_builtins.str]]
        """
        Variable name
        """
        name: NotRequired[pulumi.Input[_builtins.str]]
        """
        Set interface name
        """
        name_variable: NotRequired[pulumi.Input[_builtins.str]]
        """
        Variable name
        """
        network_type: NotRequired[pulumi.Input[_builtins.str]]
        """
        Set the OSPF network type
          - Choices: `broadcast`, `point-to-point`, `non-broadcast`, `point-to-multipoint`
        """
        network_type_variable: NotRequired[pulumi.Input[_builtins.str]]
        """
        Variable name
        """
        passive_interface: NotRequired[pulumi.Input[_builtins.bool]]
        """
        Set the interface to advertise its address, but not to actively run OSPF
          - Default value: `false`
        """
        passive_interface_variable: NotRequired[pulumi.Input[_builtins.str]]
        """
        Variable name
        """
elif False:
    ServiceRoutingOspfv3Ipv6FeatureAreaInterfaceArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ServiceRoutingOspfv3Ipv6FeatureAreaInterfaceArgs:
    def __init__(__self__, *,
                 authentication_key: Optional[pulumi.Input[_builtins.str]] = None,
                 authentication_key_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 authentication_spi: Optional[pulumi.Input[_builtins.int]] = None,
                 authentication_spi_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 authentication_type: Optional[pulumi.Input[_builtins.str]] = None,
                 cost: Optional[pulumi.Input[_builtins.int]] = None,
                 cost_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 dead_interval: Optional[pulumi.Input[_builtins.int]] = None,
                 dead_interval_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 hello_interval: Optional[pulumi.Input[_builtins.int]] = None,
                 hello_interval_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 lsa_retransmit_interval: Optional[pulumi.Input[_builtins.int]] = None,
                 lsa_retransmit_interval_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 name_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 network_type: Optional[pulumi.Input[_builtins.str]] = None,
                 network_type_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 passive_interface: Optional[pulumi.Input[_builtins.bool]] = None,
                 passive_interface_variable: Optional[pulumi.Input[_builtins.str]] = None):
        """
        :param pulumi.Input[_builtins.str] authentication_key: Set OSPF interface authentication IPSEC key
        :param pulumi.Input[_builtins.str] authentication_key_variable: Variable name
        :param pulumi.Input[_builtins.int] authentication_spi: Set OSPF interface authentication IPSec SPI, range 256..4294967295
                 - Range: `256`-`4294967295`
        :param pulumi.Input[_builtins.str] authentication_spi_variable: Variable name
        :param pulumi.Input[_builtins.str] authentication_type: No Authentication by default
                 - Choices: `no-auth`
        :param pulumi.Input[_builtins.int] cost: Set cost of OSPF interface
                 - Range: `1`-`65535`
        :param pulumi.Input[_builtins.str] cost_variable: Variable name
        :param pulumi.Input[_builtins.int] dead_interval: Set interval after which neighbor is declared to be down
                 - Range: `1`-`65535`
                 - Default value: `40`
        :param pulumi.Input[_builtins.str] dead_interval_variable: Variable name
        :param pulumi.Input[_builtins.int] hello_interval: Set interval between OSPF hello packets
                 - Range: `1`-`65535`
                 - Default value: `10`
        :param pulumi.Input[_builtins.str] hello_interval_variable: Variable name
        :param pulumi.Input[_builtins.int] lsa_retransmit_interval: Set time between retransmitting LSAs
                 - Range: `1`-`65535`
                 - Default value: `5`
        :param pulumi.Input[_builtins.str] lsa_retransmit_interval_variable: Variable name
        :param pulumi.Input[_builtins.str] name: Set interface name
        :param pulumi.Input[_builtins.str] name_variable: Variable name
        :param pulumi.Input[_builtins.str] network_type: Set the OSPF network type
                 - Choices: `broadcast`, `point-to-point`, `non-broadcast`, `point-to-multipoint`
        :param pulumi.Input[_builtins.str] network_type_variable: Variable name
        :param pulumi.Input[_builtins.bool] passive_interface: Set the interface to advertise its address, but not to actively run OSPF
                 - Default value: `false`
        :param pulumi.Input[_builtins.str] passive_interface_variable: Variable name
        """
        if authentication_key is not None:
            pulumi.set(__self__, "authentication_key", authentication_key)
        if authentication_key_variable is not None:
            pulumi.set(__self__, "authentication_key_variable", authentication_key_variable)
        if authentication_spi is not None:
            pulumi.set(__self__, "authentication_spi", authentication_spi)
        if authentication_spi_variable is not None:
            pulumi.set(__self__, "authentication_spi_variable", authentication_spi_variable)
        if authentication_type is not None:
            pulumi.set(__self__, "authentication_type", authentication_type)
        if cost is not None:
            pulumi.set(__self__, "cost", cost)
        if cost_variable is not None:
            pulumi.set(__self__, "cost_variable", cost_variable)
        if dead_interval is not None:
            pulumi.set(__self__, "dead_interval", dead_interval)
        if dead_interval_variable is not None:
            pulumi.set(__self__, "dead_interval_variable", dead_interval_variable)
        if hello_interval is not None:
            pulumi.set(__self__, "hello_interval", hello_interval)
        if hello_interval_variable is not None:
            pulumi.set(__self__, "hello_interval_variable", hello_interval_variable)
        if lsa_retransmit_interval is not None:
            pulumi.set(__self__, "lsa_retransmit_interval", lsa_retransmit_interval)
        if lsa_retransmit_interval_variable is not None:
            pulumi.set(__self__, "lsa_retransmit_interval_variable", lsa_retransmit_interval_variable)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if name_variable is not None:
            pulumi.set(__self__, "name_variable", name_variable)
        if network_type is not None:
            pulumi.set(__self__, "network_type", network_type)
        if network_type_variable is not None:
            pulumi.set(__self__, "network_type_variable", network_type_variable)
        if passive_interface is not None:
            pulumi.set(__self__, "passive_interface", passive_interface)
        if passive_interface_variable is not None:
            pulumi.set(__self__, "passive_interface_variable", passive_interface_variable)

    @_builtins.property
    @pulumi.getter(name="authenticationKey")
    def authentication_key(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Set OSPF interface authentication IPSEC key
        """
        return pulumi.get(self, "authentication_key")

    @authentication_key.setter
    def authentication_key(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "authentication_key", value)

    @_builtins.property
    @pulumi.getter(name="authenticationKeyVariable")
    def authentication_key_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "authentication_key_variable")

    @authentication_key_variable.setter
    def authentication_key_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "authentication_key_variable", value)

    @_builtins.property
    @pulumi.getter(name="authenticationSpi")
    def authentication_spi(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        Set OSPF interface authentication IPSec SPI, range 256..4294967295
          - Range: `256`-`4294967295`
        """
        return pulumi.get(self, "authentication_spi")

    @authentication_spi.setter
    def authentication_spi(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "authentication_spi", value)

    @_builtins.property
    @pulumi.getter(name="authenticationSpiVariable")
    def authentication_spi_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "authentication_spi_variable")

    @authentication_spi_variable.setter
    def authentication_spi_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "authentication_spi_variable", value)

    @_builtins.property
    @pulumi.getter(name="authenticationType")
    def authentication_type(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        No Authentication by default
          - Choices: `no-auth`
        """
        return pulumi.get(self, "authentication_type")

    @authentication_type.setter
    def authentication_type(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "authentication_type", value)

    @_builtins.property
    @pulumi.getter
    def cost(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        Set cost of OSPF interface
          - Range: `1`-`65535`
        """
        return pulumi.get(self, "cost")

    @cost.setter
    def cost(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "cost", value)

    @_builtins.property
    @pulumi.getter(name="costVariable")
    def cost_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "cost_variable")

    @cost_variable.setter
    def cost_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "cost_variable", value)

    @_builtins.property
    @pulumi.getter(name="deadInterval")
    def dead_interval(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        Set interval after which neighbor is declared to be down
          - Range: `1`-`65535`
          - Default value: `40`
        """
        return pulumi.get(self, "dead_interval")

    @dead_interval.setter
    def dead_interval(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "dead_interval", value)

    @_builtins.property
    @pulumi.getter(name="deadIntervalVariable")
    def dead_interval_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "dead_interval_variable")

    @dead_interval_variable.setter
    def dead_interval_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "dead_interval_variable", value)

    @_builtins.property
    @pulumi.getter(name="helloInterval")
    def hello_interval(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        Set interval between OSPF hello packets
          - Range: `1`-`65535`
          - Default value: `10`
        """
        return pulumi.get(self, "hello_interval")

    @hello_interval.setter
    def hello_interval(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "hello_interval", value)

    @_builtins.property
    @pulumi.getter(name="helloIntervalVariable")
    def hello_interval_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "hello_interval_variable")

    @hello_interval_variable.setter
    def hello_interval_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "hello_interval_variable", value)

    @_builtins.property
    @pulumi.getter(name="lsaRetransmitInterval")
    def lsa_retransmit_interval(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        Set time between retransmitting LSAs
          - Range: `1`-`65535`
          - Default value: `5`
        """
        return pulumi.get(self, "lsa_retransmit_interval")

    @lsa_retransmit_interval.setter
    def lsa_retransmit_interval(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "lsa_retransmit_interval", value)

    @_builtins.property
    @pulumi.getter(name="lsaRetransmitIntervalVariable")
    def lsa_retransmit_interval_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "lsa_retransmit_interval_variable")

    @lsa_retransmit_interval_variable.setter
    def lsa_retransmit_interval_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "lsa_retransmit_interval_variable", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Set interface name
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "name", value)

    @_builtins.property
    @pulumi.getter(name="nameVariable")
    def name_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "name_variable")

    @name_variable.setter
    def name_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "name_variable", value)

    @_builtins.property
    @pulumi.getter(name="networkType")
    def network_type(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Set the OSPF network type
          - Choices: `broadcast`, `point-to-point`, `non-broadcast`, `point-to-multipoint`
        """
        return pulumi.get(self, "network_type")

    @network_type.setter
    def network_type(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "network_type", value)

    @_builtins.property
    @pulumi.getter(name="networkTypeVariable")
    def network_type_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "network_type_variable")

    @network_type_variable.setter
    def network_type_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "network_type_variable", value)

    @_builtins.property
    @pulumi.getter(name="passiveInterface")
    def passive_interface(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Set the interface to advertise its address, but not to actively run OSPF
          - Default value: `false`
        """
        return pulumi.get(self, "passive_interface")

    @passive_interface.setter
    def passive_interface(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "passive_interface", value)

    @_builtins.property
    @pulumi.getter(name="passiveInterfaceVariable")
    def passive_interface_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "passive_interface_variable")

    @passive_interface_variable.setter
    def passive_interface_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "passive_interface_variable", value)


if not MYPY:
    class ServiceRoutingOspfv3Ipv6FeatureAreaRangeArgsDict(TypedDict):
        cost: NotRequired[pulumi.Input[_builtins.int]]
        """
        Set cost for this range
          - Range: `0`-`16777214`
        """
        cost_variable: NotRequired[pulumi.Input[_builtins.str]]
        """
        Variable name
        """
        no_advertise: NotRequired[pulumi.Input[_builtins.bool]]
        """
        Do not advertise this range
          - Default value: `false`
        """
        no_advertise_variable: NotRequired[pulumi.Input[_builtins.str]]
        """
        Variable name
        """
        prefix: NotRequired[pulumi.Input[_builtins.str]]
        """
        IPv6 prefix,for example 2001::/64
        """
        prefix_variable: NotRequired[pulumi.Input[_builtins.str]]
        """
        Variable name
        """
elif False:
    ServiceRoutingOspfv3Ipv6FeatureAreaRangeArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ServiceRoutingOspfv3Ipv6FeatureAreaRangeArgs:
    def __init__(__self__, *,
                 cost: Optional[pulumi.Input[_builtins.int]] = None,
                 cost_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 no_advertise: Optional[pulumi.Input[_builtins.bool]] = None,
                 no_advertise_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 prefix: Optional[pulumi.Input[_builtins.str]] = None,
                 prefix_variable: Optional[pulumi.Input[_builtins.str]] = None):
        """
        :param pulumi.Input[_builtins.int] cost: Set cost for this range
                 - Range: `0`-`16777214`
        :param pulumi.Input[_builtins.str] cost_variable: Variable name
        :param pulumi.Input[_builtins.bool] no_advertise: Do not advertise this range
                 - Default value: `false`
        :param pulumi.Input[_builtins.str] no_advertise_variable: Variable name
        :param pulumi.Input[_builtins.str] prefix: IPv6 prefix,for example 2001::/64
        :param pulumi.Input[_builtins.str] prefix_variable: Variable name
        """
        if cost is not None:
            pulumi.set(__self__, "cost", cost)
        if cost_variable is not None:
            pulumi.set(__self__, "cost_variable", cost_variable)
        if no_advertise is not None:
            pulumi.set(__self__, "no_advertise", no_advertise)
        if no_advertise_variable is not None:
            pulumi.set(__self__, "no_advertise_variable", no_advertise_variable)
        if prefix is not None:
            pulumi.set(__self__, "prefix", prefix)
        if prefix_variable is not None:
            pulumi.set(__self__, "prefix_variable", prefix_variable)

    @_builtins.property
    @pulumi.getter
    def cost(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        Set cost for this range
          - Range: `0`-`16777214`
        """
        return pulumi.get(self, "cost")

    @cost.setter
    def cost(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "cost", value)

    @_builtins.property
    @pulumi.getter(name="costVariable")
    def cost_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "cost_variable")

    @cost_variable.setter
    def cost_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "cost_variable", value)

    @_builtins.property
    @pulumi.getter(name="noAdvertise")
    def no_advertise(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Do not advertise this range
          - Default value: `false`
        """
        return pulumi.get(self, "no_advertise")

    @no_advertise.setter
    def no_advertise(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "no_advertise", value)

    @_builtins.property
    @pulumi.getter(name="noAdvertiseVariable")
    def no_advertise_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "no_advertise_variable")

    @no_advertise_variable.setter
    def no_advertise_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "no_advertise_variable", value)

    @_builtins.property
    @pulumi.getter
    def prefix(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        IPv6 prefix,for example 2001::/64
        """
        return pulumi.get(self, "prefix")

    @prefix.setter
    def prefix(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "prefix", value)

    @_builtins.property
    @pulumi.getter(name="prefixVariable")
    def prefix_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "prefix_variable")

    @prefix_variable.setter
    def prefix_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "prefix_variable", value)


if not MYPY:
    class ServiceRoutingOspfv3Ipv6FeatureRedistributeArgsDict(TypedDict):
        protocol: NotRequired[pulumi.Input[_builtins.str]]
        """
        Set the protocol
          - Choices: `connected`, `static`, `omp`, `bgp`, `eigrp`
        """
        protocol_variable: NotRequired[pulumi.Input[_builtins.str]]
        """
        Variable name
        """
        route_policy_id: NotRequired[pulumi.Input[_builtins.str]]
        translate_rib_metric: NotRequired[pulumi.Input[_builtins.bool]]
        """
        Translate Rib Metric, Attribute conditional on `protocol` being equal to `omp`
          - Default value: `false`
        """
elif False:
    ServiceRoutingOspfv3Ipv6FeatureRedistributeArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ServiceRoutingOspfv3Ipv6FeatureRedistributeArgs:
    def __init__(__self__, *,
                 protocol: Optional[pulumi.Input[_builtins.str]] = None,
                 protocol_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 route_policy_id: Optional[pulumi.Input[_builtins.str]] = None,
                 translate_rib_metric: Optional[pulumi.Input[_builtins.bool]] = None):
        """
        :param pulumi.Input[_builtins.str] protocol: Set the protocol
                 - Choices: `connected`, `static`, `omp`, `bgp`, `eigrp`
        :param pulumi.Input[_builtins.str] protocol_variable: Variable name
        :param pulumi.Input[_builtins.bool] translate_rib_metric: Translate Rib Metric, Attribute conditional on `protocol` being equal to `omp`
                 - Default value: `false`
        """
        if protocol is not None:
            pulumi.set(__self__, "protocol", protocol)
        if protocol_variable is not None:
            pulumi.set(__self__, "protocol_variable", protocol_variable)
        if route_policy_id is not None:
            pulumi.set(__self__, "route_policy_id", route_policy_id)
        if translate_rib_metric is not None:
            pulumi.set(__self__, "translate_rib_metric", translate_rib_metric)

    @_builtins.property
    @pulumi.getter
    def protocol(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Set the protocol
          - Choices: `connected`, `static`, `omp`, `bgp`, `eigrp`
        """
        return pulumi.get(self, "protocol")

    @protocol.setter
    def protocol(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "protocol", value)

    @_builtins.property
    @pulumi.getter(name="protocolVariable")
    def protocol_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "protocol_variable")

    @protocol_variable.setter
    def protocol_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "protocol_variable", value)

    @_builtins.property
    @pulumi.getter(name="routePolicyId")
    def route_policy_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "route_policy_id")

    @route_policy_id.setter
    def route_policy_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "route_policy_id", value)

    @_builtins.property
    @pulumi.getter(name="translateRibMetric")
    def translate_rib_metric(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Translate Rib Metric, Attribute conditional on `protocol` being equal to `omp`
          - Default value: `false`
        """
        return pulumi.get(self, "translate_rib_metric")

    @translate_rib_metric.setter
    def translate_rib_metric(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "translate_rib_metric", value)


if not MYPY:
    class ServiceSwitchportFeatureInterfaceArgsDict(TypedDict):
        control_direction: NotRequired[pulumi.Input[_builtins.str]]
        """
        Set uni or bi directional authorization mode
          - Choices: `both`, `in`
        """
        control_direction_variable: NotRequired[pulumi.Input[_builtins.str]]
        """
        Variable name
        """
        critical_vlan: NotRequired[pulumi.Input[_builtins.int]]
        """
        Set Critical VLAN
          - Range: `1`-`4094`
        """
        critical_vlan_variable: NotRequired[pulumi.Input[_builtins.str]]
        """
        Variable name
        """
        duplex: NotRequired[pulumi.Input[_builtins.str]]
        """
        Duplex mode
          - Choices: `full`, `half`
        """
        duplex_variable: NotRequired[pulumi.Input[_builtins.str]]
        """
        Variable name
        """
        enable_periodic_reauth: NotRequired[pulumi.Input[_builtins.bool]]
        """
        Enable Periodic Reauthentication
        """
        enable_periodic_reauth_variable: NotRequired[pulumi.Input[_builtins.str]]
        """
        Variable name
        """
        enable_voice: NotRequired[pulumi.Input[_builtins.bool]]
        """
        Enable Critical Voice VLAN
        """
        enable_voice_variable: NotRequired[pulumi.Input[_builtins.str]]
        """
        Variable name
        """
        guest_vlan: NotRequired[pulumi.Input[_builtins.int]]
        """
        Set vlan to drop non-802.1x enabled clients into if client is not in MAB list
          - Range: `1`-`4094`
        """
        guest_vlan_variable: NotRequired[pulumi.Input[_builtins.str]]
        """
        Variable name
        """
        host_mode: NotRequired[pulumi.Input[_builtins.str]]
        """
        Set host mode
          - Choices: `single-host`, `multi-auth`, `multi-host`, `multi-domain`
        """
        host_mode_variable: NotRequired[pulumi.Input[_builtins.str]]
        """
        Variable name
        """
        inactivity: NotRequired[pulumi.Input[_builtins.int]]
        """
        Periodic Reauthentication Inactivity Timeout (in seconds)
          - Range: `1`-`65535`
        """
        inactivity_variable: NotRequired[pulumi.Input[_builtins.str]]
        """
        Variable name
        """
        interface_name: NotRequired[pulumi.Input[_builtins.str]]
        """
        Set Interface name
        """
        interface_name_variable: NotRequired[pulumi.Input[_builtins.str]]
        """
        Variable name
        """
        mac_authentication_bypass: NotRequired[pulumi.Input[_builtins.bool]]
        """
        MAC Authentication Bypass
        """
        mac_authentication_bypass_variable: NotRequired[pulumi.Input[_builtins.str]]
        """
        Variable name
        """
        mode: NotRequired[pulumi.Input[_builtins.str]]
        """
        Set type of switch port: access/trunk
          - Choices: `access`, `trunk`
        """
        pae_enable: NotRequired[pulumi.Input[_builtins.bool]]
        """
        Set 802.1x Interface Pae Type
        """
        pae_enable_variable: NotRequired[pulumi.Input[_builtins.str]]
        """
        Variable name
        """
        port_control: NotRequired[pulumi.Input[_builtins.str]]
        """
        Set Port-Control Mode
          - Choices: `auto`, `force-unauthorized`, `force-authorized`
        """
        port_control_variable: NotRequired[pulumi.Input[_builtins.str]]
        """
        Variable name
        """
        reauthentication: NotRequired[pulumi.Input[_builtins.int]]
        """
        Periodic Reauthentication Interval (in seconds)
          - Range: `1`-`1073741823`
          - Default value: `3600`
        """
        reauthentication_variable: NotRequired[pulumi.Input[_builtins.str]]
        """
        Variable name
        """
        restricted_vlan: NotRequired[pulumi.Input[_builtins.int]]
        """
        Set Restricted VLAN ID
          - Range: `1`-`4094`
        """
        restricted_vlan_variable: NotRequired[pulumi.Input[_builtins.str]]
        """
        Variable name
        """
        shutdown: NotRequired[pulumi.Input[_builtins.bool]]
        """
        Administrative state
          - Default value: `true`
        """
        shutdown_variable: NotRequired[pulumi.Input[_builtins.str]]
        """
        Variable name
        """
        speed: NotRequired[pulumi.Input[_builtins.str]]
        """
        Set interface speed
          - Choices: `10`, `100`, `1000`, `2500`, `10000`
        """
        speed_variable: NotRequired[pulumi.Input[_builtins.str]]
        """
        Variable name
        """
        switchport_access_vlan: NotRequired[pulumi.Input[_builtins.int]]
        """
        Set VLAN identifier associated with bridging domain
          - Range: `1`-`4094`
        """
        switchport_access_vlan_variable: NotRequired[pulumi.Input[_builtins.str]]
        """
        Variable name
        """
        switchport_trunk_allowed_vlans: NotRequired[pulumi.Input[_builtins.str]]
        """
        Configure VLAN IDs used with the trunk
        """
        switchport_trunk_allowed_vlans_variable: NotRequired[pulumi.Input[_builtins.str]]
        """
        Variable name
        """
        switchport_trunk_native_vlan: NotRequired[pulumi.Input[_builtins.int]]
        """
        Configure VLAN ID used for native VLAN
          - Range: `1`-`4094`
        """
        switchport_trunk_native_vlan_variable: NotRequired[pulumi.Input[_builtins.str]]
        """
        Variable name
        """
        voice_vlan: NotRequired[pulumi.Input[_builtins.int]]
        """
        Configure Voice Vlan
          - Range: `1`-`4094`
        """
        voice_vlan_variable: NotRequired[pulumi.Input[_builtins.str]]
        """
        Variable name
        """
elif False:
    ServiceSwitchportFeatureInterfaceArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ServiceSwitchportFeatureInterfaceArgs:
    def __init__(__self__, *,
                 control_direction: Optional[pulumi.Input[_builtins.str]] = None,
                 control_direction_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 critical_vlan: Optional[pulumi.Input[_builtins.int]] = None,
                 critical_vlan_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 duplex: Optional[pulumi.Input[_builtins.str]] = None,
                 duplex_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 enable_periodic_reauth: Optional[pulumi.Input[_builtins.bool]] = None,
                 enable_periodic_reauth_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 enable_voice: Optional[pulumi.Input[_builtins.bool]] = None,
                 enable_voice_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 guest_vlan: Optional[pulumi.Input[_builtins.int]] = None,
                 guest_vlan_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 host_mode: Optional[pulumi.Input[_builtins.str]] = None,
                 host_mode_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 inactivity: Optional[pulumi.Input[_builtins.int]] = None,
                 inactivity_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 interface_name: Optional[pulumi.Input[_builtins.str]] = None,
                 interface_name_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 mac_authentication_bypass: Optional[pulumi.Input[_builtins.bool]] = None,
                 mac_authentication_bypass_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 mode: Optional[pulumi.Input[_builtins.str]] = None,
                 pae_enable: Optional[pulumi.Input[_builtins.bool]] = None,
                 pae_enable_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 port_control: Optional[pulumi.Input[_builtins.str]] = None,
                 port_control_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 reauthentication: Optional[pulumi.Input[_builtins.int]] = None,
                 reauthentication_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 restricted_vlan: Optional[pulumi.Input[_builtins.int]] = None,
                 restricted_vlan_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 shutdown: Optional[pulumi.Input[_builtins.bool]] = None,
                 shutdown_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 speed: Optional[pulumi.Input[_builtins.str]] = None,
                 speed_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 switchport_access_vlan: Optional[pulumi.Input[_builtins.int]] = None,
                 switchport_access_vlan_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 switchport_trunk_allowed_vlans: Optional[pulumi.Input[_builtins.str]] = None,
                 switchport_trunk_allowed_vlans_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 switchport_trunk_native_vlan: Optional[pulumi.Input[_builtins.int]] = None,
                 switchport_trunk_native_vlan_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 voice_vlan: Optional[pulumi.Input[_builtins.int]] = None,
                 voice_vlan_variable: Optional[pulumi.Input[_builtins.str]] = None):
        """
        :param pulumi.Input[_builtins.str] control_direction: Set uni or bi directional authorization mode
                 - Choices: `both`, `in`
        :param pulumi.Input[_builtins.str] control_direction_variable: Variable name
        :param pulumi.Input[_builtins.int] critical_vlan: Set Critical VLAN
                 - Range: `1`-`4094`
        :param pulumi.Input[_builtins.str] critical_vlan_variable: Variable name
        :param pulumi.Input[_builtins.str] duplex: Duplex mode
                 - Choices: `full`, `half`
        :param pulumi.Input[_builtins.str] duplex_variable: Variable name
        :param pulumi.Input[_builtins.bool] enable_periodic_reauth: Enable Periodic Reauthentication
        :param pulumi.Input[_builtins.str] enable_periodic_reauth_variable: Variable name
        :param pulumi.Input[_builtins.bool] enable_voice: Enable Critical Voice VLAN
        :param pulumi.Input[_builtins.str] enable_voice_variable: Variable name
        :param pulumi.Input[_builtins.int] guest_vlan: Set vlan to drop non-802.1x enabled clients into if client is not in MAB list
                 - Range: `1`-`4094`
        :param pulumi.Input[_builtins.str] guest_vlan_variable: Variable name
        :param pulumi.Input[_builtins.str] host_mode: Set host mode
                 - Choices: `single-host`, `multi-auth`, `multi-host`, `multi-domain`
        :param pulumi.Input[_builtins.str] host_mode_variable: Variable name
        :param pulumi.Input[_builtins.int] inactivity: Periodic Reauthentication Inactivity Timeout (in seconds)
                 - Range: `1`-`65535`
        :param pulumi.Input[_builtins.str] inactivity_variable: Variable name
        :param pulumi.Input[_builtins.str] interface_name: Set Interface name
        :param pulumi.Input[_builtins.str] interface_name_variable: Variable name
        :param pulumi.Input[_builtins.bool] mac_authentication_bypass: MAC Authentication Bypass
        :param pulumi.Input[_builtins.str] mac_authentication_bypass_variable: Variable name
        :param pulumi.Input[_builtins.str] mode: Set type of switch port: access/trunk
                 - Choices: `access`, `trunk`
        :param pulumi.Input[_builtins.bool] pae_enable: Set 802.1x Interface Pae Type
        :param pulumi.Input[_builtins.str] pae_enable_variable: Variable name
        :param pulumi.Input[_builtins.str] port_control: Set Port-Control Mode
                 - Choices: `auto`, `force-unauthorized`, `force-authorized`
        :param pulumi.Input[_builtins.str] port_control_variable: Variable name
        :param pulumi.Input[_builtins.int] reauthentication: Periodic Reauthentication Interval (in seconds)
                 - Range: `1`-`1073741823`
                 - Default value: `3600`
        :param pulumi.Input[_builtins.str] reauthentication_variable: Variable name
        :param pulumi.Input[_builtins.int] restricted_vlan: Set Restricted VLAN ID
                 - Range: `1`-`4094`
        :param pulumi.Input[_builtins.str] restricted_vlan_variable: Variable name
        :param pulumi.Input[_builtins.bool] shutdown: Administrative state
                 - Default value: `true`
        :param pulumi.Input[_builtins.str] shutdown_variable: Variable name
        :param pulumi.Input[_builtins.str] speed: Set interface speed
                 - Choices: `10`, `100`, `1000`, `2500`, `10000`
        :param pulumi.Input[_builtins.str] speed_variable: Variable name
        :param pulumi.Input[_builtins.int] switchport_access_vlan: Set VLAN identifier associated with bridging domain
                 - Range: `1`-`4094`
        :param pulumi.Input[_builtins.str] switchport_access_vlan_variable: Variable name
        :param pulumi.Input[_builtins.str] switchport_trunk_allowed_vlans: Configure VLAN IDs used with the trunk
        :param pulumi.Input[_builtins.str] switchport_trunk_allowed_vlans_variable: Variable name
        :param pulumi.Input[_builtins.int] switchport_trunk_native_vlan: Configure VLAN ID used for native VLAN
                 - Range: `1`-`4094`
        :param pulumi.Input[_builtins.str] switchport_trunk_native_vlan_variable: Variable name
        :param pulumi.Input[_builtins.int] voice_vlan: Configure Voice Vlan
                 - Range: `1`-`4094`
        :param pulumi.Input[_builtins.str] voice_vlan_variable: Variable name
        """
        if control_direction is not None:
            pulumi.set(__self__, "control_direction", control_direction)
        if control_direction_variable is not None:
            pulumi.set(__self__, "control_direction_variable", control_direction_variable)
        if critical_vlan is not None:
            pulumi.set(__self__, "critical_vlan", critical_vlan)
        if critical_vlan_variable is not None:
            pulumi.set(__self__, "critical_vlan_variable", critical_vlan_variable)
        if duplex is not None:
            pulumi.set(__self__, "duplex", duplex)
        if duplex_variable is not None:
            pulumi.set(__self__, "duplex_variable", duplex_variable)
        if enable_periodic_reauth is not None:
            pulumi.set(__self__, "enable_periodic_reauth", enable_periodic_reauth)
        if enable_periodic_reauth_variable is not None:
            pulumi.set(__self__, "enable_periodic_reauth_variable", enable_periodic_reauth_variable)
        if enable_voice is not None:
            pulumi.set(__self__, "enable_voice", enable_voice)
        if enable_voice_variable is not None:
            pulumi.set(__self__, "enable_voice_variable", enable_voice_variable)
        if guest_vlan is not None:
            pulumi.set(__self__, "guest_vlan", guest_vlan)
        if guest_vlan_variable is not None:
            pulumi.set(__self__, "guest_vlan_variable", guest_vlan_variable)
        if host_mode is not None:
            pulumi.set(__self__, "host_mode", host_mode)
        if host_mode_variable is not None:
            pulumi.set(__self__, "host_mode_variable", host_mode_variable)
        if inactivity is not None:
            pulumi.set(__self__, "inactivity", inactivity)
        if inactivity_variable is not None:
            pulumi.set(__self__, "inactivity_variable", inactivity_variable)
        if interface_name is not None:
            pulumi.set(__self__, "interface_name", interface_name)
        if interface_name_variable is not None:
            pulumi.set(__self__, "interface_name_variable", interface_name_variable)
        if mac_authentication_bypass is not None:
            pulumi.set(__self__, "mac_authentication_bypass", mac_authentication_bypass)
        if mac_authentication_bypass_variable is not None:
            pulumi.set(__self__, "mac_authentication_bypass_variable", mac_authentication_bypass_variable)
        if mode is not None:
            pulumi.set(__self__, "mode", mode)
        if pae_enable is not None:
            pulumi.set(__self__, "pae_enable", pae_enable)
        if pae_enable_variable is not None:
            pulumi.set(__self__, "pae_enable_variable", pae_enable_variable)
        if port_control is not None:
            pulumi.set(__self__, "port_control", port_control)
        if port_control_variable is not None:
            pulumi.set(__self__, "port_control_variable", port_control_variable)
        if reauthentication is not None:
            pulumi.set(__self__, "reauthentication", reauthentication)
        if reauthentication_variable is not None:
            pulumi.set(__self__, "reauthentication_variable", reauthentication_variable)
        if restricted_vlan is not None:
            pulumi.set(__self__, "restricted_vlan", restricted_vlan)
        if restricted_vlan_variable is not None:
            pulumi.set(__self__, "restricted_vlan_variable", restricted_vlan_variable)
        if shutdown is not None:
            pulumi.set(__self__, "shutdown", shutdown)
        if shutdown_variable is not None:
            pulumi.set(__self__, "shutdown_variable", shutdown_variable)
        if speed is not None:
            pulumi.set(__self__, "speed", speed)
        if speed_variable is not None:
            pulumi.set(__self__, "speed_variable", speed_variable)
        if switchport_access_vlan is not None:
            pulumi.set(__self__, "switchport_access_vlan", switchport_access_vlan)
        if switchport_access_vlan_variable is not None:
            pulumi.set(__self__, "switchport_access_vlan_variable", switchport_access_vlan_variable)
        if switchport_trunk_allowed_vlans is not None:
            pulumi.set(__self__, "switchport_trunk_allowed_vlans", switchport_trunk_allowed_vlans)
        if switchport_trunk_allowed_vlans_variable is not None:
            pulumi.set(__self__, "switchport_trunk_allowed_vlans_variable", switchport_trunk_allowed_vlans_variable)
        if switchport_trunk_native_vlan is not None:
            pulumi.set(__self__, "switchport_trunk_native_vlan", switchport_trunk_native_vlan)
        if switchport_trunk_native_vlan_variable is not None:
            pulumi.set(__self__, "switchport_trunk_native_vlan_variable", switchport_trunk_native_vlan_variable)
        if voice_vlan is not None:
            pulumi.set(__self__, "voice_vlan", voice_vlan)
        if voice_vlan_variable is not None:
            pulumi.set(__self__, "voice_vlan_variable", voice_vlan_variable)

    @_builtins.property
    @pulumi.getter(name="controlDirection")
    def control_direction(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Set uni or bi directional authorization mode
          - Choices: `both`, `in`
        """
        return pulumi.get(self, "control_direction")

    @control_direction.setter
    def control_direction(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "control_direction", value)

    @_builtins.property
    @pulumi.getter(name="controlDirectionVariable")
    def control_direction_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "control_direction_variable")

    @control_direction_variable.setter
    def control_direction_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "control_direction_variable", value)

    @_builtins.property
    @pulumi.getter(name="criticalVlan")
    def critical_vlan(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        Set Critical VLAN
          - Range: `1`-`4094`
        """
        return pulumi.get(self, "critical_vlan")

    @critical_vlan.setter
    def critical_vlan(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "critical_vlan", value)

    @_builtins.property
    @pulumi.getter(name="criticalVlanVariable")
    def critical_vlan_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "critical_vlan_variable")

    @critical_vlan_variable.setter
    def critical_vlan_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "critical_vlan_variable", value)

    @_builtins.property
    @pulumi.getter
    def duplex(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Duplex mode
          - Choices: `full`, `half`
        """
        return pulumi.get(self, "duplex")

    @duplex.setter
    def duplex(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "duplex", value)

    @_builtins.property
    @pulumi.getter(name="duplexVariable")
    def duplex_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "duplex_variable")

    @duplex_variable.setter
    def duplex_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "duplex_variable", value)

    @_builtins.property
    @pulumi.getter(name="enablePeriodicReauth")
    def enable_periodic_reauth(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Enable Periodic Reauthentication
        """
        return pulumi.get(self, "enable_periodic_reauth")

    @enable_periodic_reauth.setter
    def enable_periodic_reauth(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "enable_periodic_reauth", value)

    @_builtins.property
    @pulumi.getter(name="enablePeriodicReauthVariable")
    def enable_periodic_reauth_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "enable_periodic_reauth_variable")

    @enable_periodic_reauth_variable.setter
    def enable_periodic_reauth_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "enable_periodic_reauth_variable", value)

    @_builtins.property
    @pulumi.getter(name="enableVoice")
    def enable_voice(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Enable Critical Voice VLAN
        """
        return pulumi.get(self, "enable_voice")

    @enable_voice.setter
    def enable_voice(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "enable_voice", value)

    @_builtins.property
    @pulumi.getter(name="enableVoiceVariable")
    def enable_voice_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "enable_voice_variable")

    @enable_voice_variable.setter
    def enable_voice_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "enable_voice_variable", value)

    @_builtins.property
    @pulumi.getter(name="guestVlan")
    def guest_vlan(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        Set vlan to drop non-802.1x enabled clients into if client is not in MAB list
          - Range: `1`-`4094`
        """
        return pulumi.get(self, "guest_vlan")

    @guest_vlan.setter
    def guest_vlan(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "guest_vlan", value)

    @_builtins.property
    @pulumi.getter(name="guestVlanVariable")
    def guest_vlan_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "guest_vlan_variable")

    @guest_vlan_variable.setter
    def guest_vlan_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "guest_vlan_variable", value)

    @_builtins.property
    @pulumi.getter(name="hostMode")
    def host_mode(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Set host mode
          - Choices: `single-host`, `multi-auth`, `multi-host`, `multi-domain`
        """
        return pulumi.get(self, "host_mode")

    @host_mode.setter
    def host_mode(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "host_mode", value)

    @_builtins.property
    @pulumi.getter(name="hostModeVariable")
    def host_mode_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "host_mode_variable")

    @host_mode_variable.setter
    def host_mode_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "host_mode_variable", value)

    @_builtins.property
    @pulumi.getter
    def inactivity(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        Periodic Reauthentication Inactivity Timeout (in seconds)
          - Range: `1`-`65535`
        """
        return pulumi.get(self, "inactivity")

    @inactivity.setter
    def inactivity(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "inactivity", value)

    @_builtins.property
    @pulumi.getter(name="inactivityVariable")
    def inactivity_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "inactivity_variable")

    @inactivity_variable.setter
    def inactivity_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "inactivity_variable", value)

    @_builtins.property
    @pulumi.getter(name="interfaceName")
    def interface_name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Set Interface name
        """
        return pulumi.get(self, "interface_name")

    @interface_name.setter
    def interface_name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "interface_name", value)

    @_builtins.property
    @pulumi.getter(name="interfaceNameVariable")
    def interface_name_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "interface_name_variable")

    @interface_name_variable.setter
    def interface_name_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "interface_name_variable", value)

    @_builtins.property
    @pulumi.getter(name="macAuthenticationBypass")
    def mac_authentication_bypass(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        MAC Authentication Bypass
        """
        return pulumi.get(self, "mac_authentication_bypass")

    @mac_authentication_bypass.setter
    def mac_authentication_bypass(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "mac_authentication_bypass", value)

    @_builtins.property
    @pulumi.getter(name="macAuthenticationBypassVariable")
    def mac_authentication_bypass_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "mac_authentication_bypass_variable")

    @mac_authentication_bypass_variable.setter
    def mac_authentication_bypass_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "mac_authentication_bypass_variable", value)

    @_builtins.property
    @pulumi.getter
    def mode(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Set type of switch port: access/trunk
          - Choices: `access`, `trunk`
        """
        return pulumi.get(self, "mode")

    @mode.setter
    def mode(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "mode", value)

    @_builtins.property
    @pulumi.getter(name="paeEnable")
    def pae_enable(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Set 802.1x Interface Pae Type
        """
        return pulumi.get(self, "pae_enable")

    @pae_enable.setter
    def pae_enable(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "pae_enable", value)

    @_builtins.property
    @pulumi.getter(name="paeEnableVariable")
    def pae_enable_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "pae_enable_variable")

    @pae_enable_variable.setter
    def pae_enable_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "pae_enable_variable", value)

    @_builtins.property
    @pulumi.getter(name="portControl")
    def port_control(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Set Port-Control Mode
          - Choices: `auto`, `force-unauthorized`, `force-authorized`
        """
        return pulumi.get(self, "port_control")

    @port_control.setter
    def port_control(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "port_control", value)

    @_builtins.property
    @pulumi.getter(name="portControlVariable")
    def port_control_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "port_control_variable")

    @port_control_variable.setter
    def port_control_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "port_control_variable", value)

    @_builtins.property
    @pulumi.getter
    def reauthentication(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        Periodic Reauthentication Interval (in seconds)
          - Range: `1`-`1073741823`
          - Default value: `3600`
        """
        return pulumi.get(self, "reauthentication")

    @reauthentication.setter
    def reauthentication(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "reauthentication", value)

    @_builtins.property
    @pulumi.getter(name="reauthenticationVariable")
    def reauthentication_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "reauthentication_variable")

    @reauthentication_variable.setter
    def reauthentication_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "reauthentication_variable", value)

    @_builtins.property
    @pulumi.getter(name="restrictedVlan")
    def restricted_vlan(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        Set Restricted VLAN ID
          - Range: `1`-`4094`
        """
        return pulumi.get(self, "restricted_vlan")

    @restricted_vlan.setter
    def restricted_vlan(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "restricted_vlan", value)

    @_builtins.property
    @pulumi.getter(name="restrictedVlanVariable")
    def restricted_vlan_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "restricted_vlan_variable")

    @restricted_vlan_variable.setter
    def restricted_vlan_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "restricted_vlan_variable", value)

    @_builtins.property
    @pulumi.getter
    def shutdown(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Administrative state
          - Default value: `true`
        """
        return pulumi.get(self, "shutdown")

    @shutdown.setter
    def shutdown(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "shutdown", value)

    @_builtins.property
    @pulumi.getter(name="shutdownVariable")
    def shutdown_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "shutdown_variable")

    @shutdown_variable.setter
    def shutdown_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "shutdown_variable", value)

    @_builtins.property
    @pulumi.getter
    def speed(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Set interface speed
          - Choices: `10`, `100`, `1000`, `2500`, `10000`
        """
        return pulumi.get(self, "speed")

    @speed.setter
    def speed(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "speed", value)

    @_builtins.property
    @pulumi.getter(name="speedVariable")
    def speed_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "speed_variable")

    @speed_variable.setter
    def speed_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "speed_variable", value)

    @_builtins.property
    @pulumi.getter(name="switchportAccessVlan")
    def switchport_access_vlan(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        Set VLAN identifier associated with bridging domain
          - Range: `1`-`4094`
        """
        return pulumi.get(self, "switchport_access_vlan")

    @switchport_access_vlan.setter
    def switchport_access_vlan(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "switchport_access_vlan", value)

    @_builtins.property
    @pulumi.getter(name="switchportAccessVlanVariable")
    def switchport_access_vlan_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "switchport_access_vlan_variable")

    @switchport_access_vlan_variable.setter
    def switchport_access_vlan_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "switchport_access_vlan_variable", value)

    @_builtins.property
    @pulumi.getter(name="switchportTrunkAllowedVlans")
    def switchport_trunk_allowed_vlans(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Configure VLAN IDs used with the trunk
        """
        return pulumi.get(self, "switchport_trunk_allowed_vlans")

    @switchport_trunk_allowed_vlans.setter
    def switchport_trunk_allowed_vlans(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "switchport_trunk_allowed_vlans", value)

    @_builtins.property
    @pulumi.getter(name="switchportTrunkAllowedVlansVariable")
    def switchport_trunk_allowed_vlans_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "switchport_trunk_allowed_vlans_variable")

    @switchport_trunk_allowed_vlans_variable.setter
    def switchport_trunk_allowed_vlans_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "switchport_trunk_allowed_vlans_variable", value)

    @_builtins.property
    @pulumi.getter(name="switchportTrunkNativeVlan")
    def switchport_trunk_native_vlan(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        Configure VLAN ID used for native VLAN
          - Range: `1`-`4094`
        """
        return pulumi.get(self, "switchport_trunk_native_vlan")

    @switchport_trunk_native_vlan.setter
    def switchport_trunk_native_vlan(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "switchport_trunk_native_vlan", value)

    @_builtins.property
    @pulumi.getter(name="switchportTrunkNativeVlanVariable")
    def switchport_trunk_native_vlan_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "switchport_trunk_native_vlan_variable")

    @switchport_trunk_native_vlan_variable.setter
    def switchport_trunk_native_vlan_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "switchport_trunk_native_vlan_variable", value)

    @_builtins.property
    @pulumi.getter(name="voiceVlan")
    def voice_vlan(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        Configure Voice Vlan
          - Range: `1`-`4094`
        """
        return pulumi.get(self, "voice_vlan")

    @voice_vlan.setter
    def voice_vlan(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "voice_vlan", value)

    @_builtins.property
    @pulumi.getter(name="voiceVlanVariable")
    def voice_vlan_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "voice_vlan_variable")

    @voice_vlan_variable.setter
    def voice_vlan_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "voice_vlan_variable", value)


if not MYPY:
    class ServiceSwitchportFeatureStaticMacAddressArgsDict(TypedDict):
        interface_name: NotRequired[pulumi.Input[_builtins.str]]
        """
        Interface name: GigabitEthernet0/<>/<>
        """
        interface_name_variable: NotRequired[pulumi.Input[_builtins.str]]
        """
        Variable name
        """
        mac_address: NotRequired[pulumi.Input[_builtins.str]]
        """
        Set MAC address in xxxx.xxxx.xxxx format
        """
        mac_address_variable: NotRequired[pulumi.Input[_builtins.str]]
        """
        Variable name
        """
        vlan_id: NotRequired[pulumi.Input[_builtins.int]]
        """
        Configure VLAN ID used with the mac and interface
          - Range: `1`-`4094`
        """
        vlan_id_variable: NotRequired[pulumi.Input[_builtins.str]]
        """
        Variable name
        """
elif False:
    ServiceSwitchportFeatureStaticMacAddressArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ServiceSwitchportFeatureStaticMacAddressArgs:
    def __init__(__self__, *,
                 interface_name: Optional[pulumi.Input[_builtins.str]] = None,
                 interface_name_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 mac_address: Optional[pulumi.Input[_builtins.str]] = None,
                 mac_address_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 vlan_id: Optional[pulumi.Input[_builtins.int]] = None,
                 vlan_id_variable: Optional[pulumi.Input[_builtins.str]] = None):
        """
        :param pulumi.Input[_builtins.str] interface_name: Interface name: GigabitEthernet0/<>/<>
        :param pulumi.Input[_builtins.str] interface_name_variable: Variable name
        :param pulumi.Input[_builtins.str] mac_address: Set MAC address in xxxx.xxxx.xxxx format
        :param pulumi.Input[_builtins.str] mac_address_variable: Variable name
        :param pulumi.Input[_builtins.int] vlan_id: Configure VLAN ID used with the mac and interface
                 - Range: `1`-`4094`
        :param pulumi.Input[_builtins.str] vlan_id_variable: Variable name
        """
        if interface_name is not None:
            pulumi.set(__self__, "interface_name", interface_name)
        if interface_name_variable is not None:
            pulumi.set(__self__, "interface_name_variable", interface_name_variable)
        if mac_address is not None:
            pulumi.set(__self__, "mac_address", mac_address)
        if mac_address_variable is not None:
            pulumi.set(__self__, "mac_address_variable", mac_address_variable)
        if vlan_id is not None:
            pulumi.set(__self__, "vlan_id", vlan_id)
        if vlan_id_variable is not None:
            pulumi.set(__self__, "vlan_id_variable", vlan_id_variable)

    @_builtins.property
    @pulumi.getter(name="interfaceName")
    def interface_name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Interface name: GigabitEthernet0/<>/<>
        """
        return pulumi.get(self, "interface_name")

    @interface_name.setter
    def interface_name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "interface_name", value)

    @_builtins.property
    @pulumi.getter(name="interfaceNameVariable")
    def interface_name_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "interface_name_variable")

    @interface_name_variable.setter
    def interface_name_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "interface_name_variable", value)

    @_builtins.property
    @pulumi.getter(name="macAddress")
    def mac_address(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Set MAC address in xxxx.xxxx.xxxx format
        """
        return pulumi.get(self, "mac_address")

    @mac_address.setter
    def mac_address(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "mac_address", value)

    @_builtins.property
    @pulumi.getter(name="macAddressVariable")
    def mac_address_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "mac_address_variable")

    @mac_address_variable.setter
    def mac_address_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "mac_address_variable", value)

    @_builtins.property
    @pulumi.getter(name="vlanId")
    def vlan_id(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        Configure VLAN ID used with the mac and interface
          - Range: `1`-`4094`
        """
        return pulumi.get(self, "vlan_id")

    @vlan_id.setter
    def vlan_id(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "vlan_id", value)

    @_builtins.property
    @pulumi.getter(name="vlanIdVariable")
    def vlan_id_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "vlan_id_variable")

    @vlan_id_variable.setter
    def vlan_id_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "vlan_id_variable", value)


if not MYPY:
    class ServiceTrackerGroupFeatureTrackerElementArgsDict(TypedDict):
        tracker_id: NotRequired[pulumi.Input[_builtins.str]]
elif False:
    ServiceTrackerGroupFeatureTrackerElementArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ServiceTrackerGroupFeatureTrackerElementArgs:
    def __init__(__self__, *,
                 tracker_id: Optional[pulumi.Input[_builtins.str]] = None):
        if tracker_id is not None:
            pulumi.set(__self__, "tracker_id", tracker_id)

    @_builtins.property
    @pulumi.getter(name="trackerId")
    def tracker_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "tracker_id")

    @tracker_id.setter
    def tracker_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "tracker_id", value)


if not MYPY:
    class ServiceWirelessLanFeatureSsidArgsDict(TypedDict):
        admin_state: NotRequired[pulumi.Input[_builtins.bool]]
        """
        Set admin state
          - Default value: `true`
        """
        admin_state_variable: NotRequired[pulumi.Input[_builtins.str]]
        """
        Variable name
        """
        broadcast_ssid: NotRequired[pulumi.Input[_builtins.bool]]
        """
        Enable broadcast SSID
          - Default value: `true`
        """
        broadcast_ssid_variable: NotRequired[pulumi.Input[_builtins.str]]
        """
        Variable name
        """
        passphrase: NotRequired[pulumi.Input[_builtins.str]]
        """
        Set passphrase, Attribute conditional on `security_type` being equal to `personal`
        """
        passphrase_variable: NotRequired[pulumi.Input[_builtins.str]]
        """
        Variable name, Attribute conditional on `security_type` being equal to `personal`
        """
        qos_profile: NotRequired[pulumi.Input[_builtins.str]]
        """
        Select QoS profile
          - Choices: `platinum`, `gold`, `silver`, `bronze`
          - Default value: `silver`
        """
        qos_profile_variable: NotRequired[pulumi.Input[_builtins.str]]
        """
        Variable name
        """
        radio_type: NotRequired[pulumi.Input[_builtins.str]]
        """
        Select radio type
          - Choices: `24ghz`, `5ghz`, `all`
          - Default value: `all`
        """
        radio_type_variable: NotRequired[pulumi.Input[_builtins.str]]
        """
        Variable name
        """
        radius_server_ip: NotRequired[pulumi.Input[_builtins.str]]
        """
        Set RADIUS server IP, Attribute conditional on `security_type` being equal to `enterprise`
        """
        radius_server_ip_variable: NotRequired[pulumi.Input[_builtins.str]]
        """
        Variable name, Attribute conditional on `security_type` being equal to `enterprise`
        """
        radius_server_port: NotRequired[pulumi.Input[_builtins.int]]
        """
        Set RADIUS server authentication port, Attribute conditional on `security_type` being equal to `enterprise`
          - Range: `1`-`65535`
          - Default value: `1812`
        """
        radius_server_port_variable: NotRequired[pulumi.Input[_builtins.str]]
        """
        Variable name, Attribute conditional on `security_type` being equal to `enterprise`
        """
        radius_server_secret: NotRequired[pulumi.Input[_builtins.str]]
        """
        Set RADIUS server shared secret, Attribute conditional on `security_type` being equal to `enterprise`
        """
        radius_server_secret_variable: NotRequired[pulumi.Input[_builtins.str]]
        """
        Variable name, Attribute conditional on `security_type` being equal to `enterprise`
        """
        security_type: NotRequired[pulumi.Input[_builtins.str]]
        """
        Select security type
          - Choices: `enterprise`, `personal`, `open`
        """
        ssid_name: NotRequired[pulumi.Input[_builtins.str]]
        """
        Configure wlan SSID
        """
        vlan_id: NotRequired[pulumi.Input[_builtins.int]]
        """
        Set VLAN ID
          - Range: `1`-`4094`
        """
        vlan_id_variable: NotRequired[pulumi.Input[_builtins.str]]
        """
        Variable name
        """
elif False:
    ServiceWirelessLanFeatureSsidArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ServiceWirelessLanFeatureSsidArgs:
    def __init__(__self__, *,
                 admin_state: Optional[pulumi.Input[_builtins.bool]] = None,
                 admin_state_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 broadcast_ssid: Optional[pulumi.Input[_builtins.bool]] = None,
                 broadcast_ssid_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 passphrase: Optional[pulumi.Input[_builtins.str]] = None,
                 passphrase_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 qos_profile: Optional[pulumi.Input[_builtins.str]] = None,
                 qos_profile_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 radio_type: Optional[pulumi.Input[_builtins.str]] = None,
                 radio_type_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 radius_server_ip: Optional[pulumi.Input[_builtins.str]] = None,
                 radius_server_ip_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 radius_server_port: Optional[pulumi.Input[_builtins.int]] = None,
                 radius_server_port_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 radius_server_secret: Optional[pulumi.Input[_builtins.str]] = None,
                 radius_server_secret_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 security_type: Optional[pulumi.Input[_builtins.str]] = None,
                 ssid_name: Optional[pulumi.Input[_builtins.str]] = None,
                 vlan_id: Optional[pulumi.Input[_builtins.int]] = None,
                 vlan_id_variable: Optional[pulumi.Input[_builtins.str]] = None):
        """
        :param pulumi.Input[_builtins.bool] admin_state: Set admin state
                 - Default value: `true`
        :param pulumi.Input[_builtins.str] admin_state_variable: Variable name
        :param pulumi.Input[_builtins.bool] broadcast_ssid: Enable broadcast SSID
                 - Default value: `true`
        :param pulumi.Input[_builtins.str] broadcast_ssid_variable: Variable name
        :param pulumi.Input[_builtins.str] passphrase: Set passphrase, Attribute conditional on `security_type` being equal to `personal`
        :param pulumi.Input[_builtins.str] passphrase_variable: Variable name, Attribute conditional on `security_type` being equal to `personal`
        :param pulumi.Input[_builtins.str] qos_profile: Select QoS profile
                 - Choices: `platinum`, `gold`, `silver`, `bronze`
                 - Default value: `silver`
        :param pulumi.Input[_builtins.str] qos_profile_variable: Variable name
        :param pulumi.Input[_builtins.str] radio_type: Select radio type
                 - Choices: `24ghz`, `5ghz`, `all`
                 - Default value: `all`
        :param pulumi.Input[_builtins.str] radio_type_variable: Variable name
        :param pulumi.Input[_builtins.str] radius_server_ip: Set RADIUS server IP, Attribute conditional on `security_type` being equal to `enterprise`
        :param pulumi.Input[_builtins.str] radius_server_ip_variable: Variable name, Attribute conditional on `security_type` being equal to `enterprise`
        :param pulumi.Input[_builtins.int] radius_server_port: Set RADIUS server authentication port, Attribute conditional on `security_type` being equal to `enterprise`
                 - Range: `1`-`65535`
                 - Default value: `1812`
        :param pulumi.Input[_builtins.str] radius_server_port_variable: Variable name, Attribute conditional on `security_type` being equal to `enterprise`
        :param pulumi.Input[_builtins.str] radius_server_secret: Set RADIUS server shared secret, Attribute conditional on `security_type` being equal to `enterprise`
        :param pulumi.Input[_builtins.str] radius_server_secret_variable: Variable name, Attribute conditional on `security_type` being equal to `enterprise`
        :param pulumi.Input[_builtins.str] security_type: Select security type
                 - Choices: `enterprise`, `personal`, `open`
        :param pulumi.Input[_builtins.str] ssid_name: Configure wlan SSID
        :param pulumi.Input[_builtins.int] vlan_id: Set VLAN ID
                 - Range: `1`-`4094`
        :param pulumi.Input[_builtins.str] vlan_id_variable: Variable name
        """
        if admin_state is not None:
            pulumi.set(__self__, "admin_state", admin_state)
        if admin_state_variable is not None:
            pulumi.set(__self__, "admin_state_variable", admin_state_variable)
        if broadcast_ssid is not None:
            pulumi.set(__self__, "broadcast_ssid", broadcast_ssid)
        if broadcast_ssid_variable is not None:
            pulumi.set(__self__, "broadcast_ssid_variable", broadcast_ssid_variable)
        if passphrase is not None:
            pulumi.set(__self__, "passphrase", passphrase)
        if passphrase_variable is not None:
            pulumi.set(__self__, "passphrase_variable", passphrase_variable)
        if qos_profile is not None:
            pulumi.set(__self__, "qos_profile", qos_profile)
        if qos_profile_variable is not None:
            pulumi.set(__self__, "qos_profile_variable", qos_profile_variable)
        if radio_type is not None:
            pulumi.set(__self__, "radio_type", radio_type)
        if radio_type_variable is not None:
            pulumi.set(__self__, "radio_type_variable", radio_type_variable)
        if radius_server_ip is not None:
            pulumi.set(__self__, "radius_server_ip", radius_server_ip)
        if radius_server_ip_variable is not None:
            pulumi.set(__self__, "radius_server_ip_variable", radius_server_ip_variable)
        if radius_server_port is not None:
            pulumi.set(__self__, "radius_server_port", radius_server_port)
        if radius_server_port_variable is not None:
            pulumi.set(__self__, "radius_server_port_variable", radius_server_port_variable)
        if radius_server_secret is not None:
            pulumi.set(__self__, "radius_server_secret", radius_server_secret)
        if radius_server_secret_variable is not None:
            pulumi.set(__self__, "radius_server_secret_variable", radius_server_secret_variable)
        if security_type is not None:
            pulumi.set(__self__, "security_type", security_type)
        if ssid_name is not None:
            pulumi.set(__self__, "ssid_name", ssid_name)
        if vlan_id is not None:
            pulumi.set(__self__, "vlan_id", vlan_id)
        if vlan_id_variable is not None:
            pulumi.set(__self__, "vlan_id_variable", vlan_id_variable)

    @_builtins.property
    @pulumi.getter(name="adminState")
    def admin_state(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Set admin state
          - Default value: `true`
        """
        return pulumi.get(self, "admin_state")

    @admin_state.setter
    def admin_state(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "admin_state", value)

    @_builtins.property
    @pulumi.getter(name="adminStateVariable")
    def admin_state_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "admin_state_variable")

    @admin_state_variable.setter
    def admin_state_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "admin_state_variable", value)

    @_builtins.property
    @pulumi.getter(name="broadcastSsid")
    def broadcast_ssid(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Enable broadcast SSID
          - Default value: `true`
        """
        return pulumi.get(self, "broadcast_ssid")

    @broadcast_ssid.setter
    def broadcast_ssid(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "broadcast_ssid", value)

    @_builtins.property
    @pulumi.getter(name="broadcastSsidVariable")
    def broadcast_ssid_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "broadcast_ssid_variable")

    @broadcast_ssid_variable.setter
    def broadcast_ssid_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "broadcast_ssid_variable", value)

    @_builtins.property
    @pulumi.getter
    def passphrase(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Set passphrase, Attribute conditional on `security_type` being equal to `personal`
        """
        return pulumi.get(self, "passphrase")

    @passphrase.setter
    def passphrase(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "passphrase", value)

    @_builtins.property
    @pulumi.getter(name="passphraseVariable")
    def passphrase_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name, Attribute conditional on `security_type` being equal to `personal`
        """
        return pulumi.get(self, "passphrase_variable")

    @passphrase_variable.setter
    def passphrase_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "passphrase_variable", value)

    @_builtins.property
    @pulumi.getter(name="qosProfile")
    def qos_profile(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Select QoS profile
          - Choices: `platinum`, `gold`, `silver`, `bronze`
          - Default value: `silver`
        """
        return pulumi.get(self, "qos_profile")

    @qos_profile.setter
    def qos_profile(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "qos_profile", value)

    @_builtins.property
    @pulumi.getter(name="qosProfileVariable")
    def qos_profile_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "qos_profile_variable")

    @qos_profile_variable.setter
    def qos_profile_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "qos_profile_variable", value)

    @_builtins.property
    @pulumi.getter(name="radioType")
    def radio_type(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Select radio type
          - Choices: `24ghz`, `5ghz`, `all`
          - Default value: `all`
        """
        return pulumi.get(self, "radio_type")

    @radio_type.setter
    def radio_type(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "radio_type", value)

    @_builtins.property
    @pulumi.getter(name="radioTypeVariable")
    def radio_type_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "radio_type_variable")

    @radio_type_variable.setter
    def radio_type_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "radio_type_variable", value)

    @_builtins.property
    @pulumi.getter(name="radiusServerIp")
    def radius_server_ip(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Set RADIUS server IP, Attribute conditional on `security_type` being equal to `enterprise`
        """
        return pulumi.get(self, "radius_server_ip")

    @radius_server_ip.setter
    def radius_server_ip(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "radius_server_ip", value)

    @_builtins.property
    @pulumi.getter(name="radiusServerIpVariable")
    def radius_server_ip_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name, Attribute conditional on `security_type` being equal to `enterprise`
        """
        return pulumi.get(self, "radius_server_ip_variable")

    @radius_server_ip_variable.setter
    def radius_server_ip_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "radius_server_ip_variable", value)

    @_builtins.property
    @pulumi.getter(name="radiusServerPort")
    def radius_server_port(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        Set RADIUS server authentication port, Attribute conditional on `security_type` being equal to `enterprise`
          - Range: `1`-`65535`
          - Default value: `1812`
        """
        return pulumi.get(self, "radius_server_port")

    @radius_server_port.setter
    def radius_server_port(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "radius_server_port", value)

    @_builtins.property
    @pulumi.getter(name="radiusServerPortVariable")
    def radius_server_port_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name, Attribute conditional on `security_type` being equal to `enterprise`
        """
        return pulumi.get(self, "radius_server_port_variable")

    @radius_server_port_variable.setter
    def radius_server_port_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "radius_server_port_variable", value)

    @_builtins.property
    @pulumi.getter(name="radiusServerSecret")
    def radius_server_secret(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Set RADIUS server shared secret, Attribute conditional on `security_type` being equal to `enterprise`
        """
        return pulumi.get(self, "radius_server_secret")

    @radius_server_secret.setter
    def radius_server_secret(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "radius_server_secret", value)

    @_builtins.property
    @pulumi.getter(name="radiusServerSecretVariable")
    def radius_server_secret_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name, Attribute conditional on `security_type` being equal to `enterprise`
        """
        return pulumi.get(self, "radius_server_secret_variable")

    @radius_server_secret_variable.setter
    def radius_server_secret_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "radius_server_secret_variable", value)

    @_builtins.property
    @pulumi.getter(name="securityType")
    def security_type(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Select security type
          - Choices: `enterprise`, `personal`, `open`
        """
        return pulumi.get(self, "security_type")

    @security_type.setter
    def security_type(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "security_type", value)

    @_builtins.property
    @pulumi.getter(name="ssidName")
    def ssid_name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Configure wlan SSID
        """
        return pulumi.get(self, "ssid_name")

    @ssid_name.setter
    def ssid_name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "ssid_name", value)

    @_builtins.property
    @pulumi.getter(name="vlanId")
    def vlan_id(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        Set VLAN ID
          - Range: `1`-`4094`
        """
        return pulumi.get(self, "vlan_id")

    @vlan_id.setter
    def vlan_id(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "vlan_id", value)

    @_builtins.property
    @pulumi.getter(name="vlanIdVariable")
    def vlan_id_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "vlan_id_variable")

    @vlan_id_variable.setter
    def vlan_id_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "vlan_id_variable", value)


if not MYPY:
    class SiteListPolicyObjectEntryArgsDict(TypedDict):
        site_id: pulumi.Input[_builtins.str]
        """
        Site ID or range of Site IDs e.g., `100` or `200-300`
        """
elif False:
    SiteListPolicyObjectEntryArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class SiteListPolicyObjectEntryArgs:
    def __init__(__self__, *,
                 site_id: pulumi.Input[_builtins.str]):
        """
        :param pulumi.Input[_builtins.str] site_id: Site ID or range of Site IDs e.g., `100` or `200-300`
        """
        pulumi.set(__self__, "site_id", site_id)

    @_builtins.property
    @pulumi.getter(name="siteId")
    def site_id(self) -> pulumi.Input[_builtins.str]:
        """
        Site ID or range of Site IDs e.g., `100` or `200-300`
        """
        return pulumi.get(self, "site_id")

    @site_id.setter
    def site_id(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "site_id", value)


if not MYPY:
    class StandardCommunityListPolicyObjectEntryArgsDict(TypedDict):
        community: pulumi.Input[_builtins.str]
        """
        Standard community value, e.g. `100:1000`, `internet`, `local-AS`, `no-advertise` or `no-export`
        """
elif False:
    StandardCommunityListPolicyObjectEntryArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class StandardCommunityListPolicyObjectEntryArgs:
    def __init__(__self__, *,
                 community: pulumi.Input[_builtins.str]):
        """
        :param pulumi.Input[_builtins.str] community: Standard community value, e.g. `100:1000`, `internet`, `local-AS`, `no-advertise` or `no-export`
        """
        pulumi.set(__self__, "community", community)

    @_builtins.property
    @pulumi.getter
    def community(self) -> pulumi.Input[_builtins.str]:
        """
        Standard community value, e.g. `100:1000`, `internet`, `local-AS`, `no-advertise` or `no-export`
        """
        return pulumi.get(self, "community")

    @community.setter
    def community(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "community", value)


if not MYPY:
    class SwitchportFeatureTemplateInterfaceArgsDict(TypedDict):
        dot1x_authentication_order_variable: NotRequired[pulumi.Input[_builtins.str]]
        """
        Variable name
        """
        dot1x_authentication_orders: NotRequired[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]
        """
        Specify authentication methods in the order of preference
        """
        dot1x_control_direction: NotRequired[pulumi.Input[_builtins.str]]
        """
        Set uni or bi directional authorization mode
          - Choices: `both`, `in`
          - Default value: `both`
        """
        dot1x_control_direction_variable: NotRequired[pulumi.Input[_builtins.str]]
        """
        Variable name
        """
        dot1x_critical_vlan: NotRequired[pulumi.Input[_builtins.int]]
        """
        Set Critical VLAN
          - Range: `1`-`4094`
        """
        dot1x_critical_vlan_variable: NotRequired[pulumi.Input[_builtins.str]]
        """
        Variable name
        """
        dot1x_enable: NotRequired[pulumi.Input[_builtins.bool]]
        """
        Set 802.1x on off
          - Default value: `true`
        """
        dot1x_enable_criticial_voice_vlan: NotRequired[pulumi.Input[_builtins.bool]]
        """
        Enable Critical Voice VLAN
          - Default value: `false`
        """
        dot1x_enable_criticial_voice_vlan_variable: NotRequired[pulumi.Input[_builtins.str]]
        """
        Variable name
        """
        dot1x_enable_periodic_reauth: NotRequired[pulumi.Input[_builtins.bool]]
        """
        Enable Periodic Reauthentication
          - Default value: `false`
        """
        dot1x_enable_periodic_reauth_variable: NotRequired[pulumi.Input[_builtins.str]]
        """
        Variable name
        """
        dot1x_enable_variable: NotRequired[pulumi.Input[_builtins.str]]
        """
        Variable name
        """
        dot1x_guest_vlan: NotRequired[pulumi.Input[_builtins.int]]
        """
        Set vlan to drop non-802.1x enabled clients into if client is not in MAB list
          - Range: `1`-`4094`
        """
        dot1x_guest_vlan_variable: NotRequired[pulumi.Input[_builtins.str]]
        """
        Variable name
        """
        dot1x_host_mode: NotRequired[pulumi.Input[_builtins.str]]
        """
        Set host mode
          - Choices: `single-host`, `multi-auth`, `multi-host`, `multi-domain`
          - Default value: `single-host`
        """
        dot1x_host_mode_variable: NotRequired[pulumi.Input[_builtins.str]]
        """
        Variable name
        """
        dot1x_mac_authentication_bypass: NotRequired[pulumi.Input[_builtins.bool]]
        """
        MAC Authentication Bypass
          - Default value: `false`
        """
        dot1x_mac_authentication_bypass_variable: NotRequired[pulumi.Input[_builtins.str]]
        """
        Variable name
        """
        dot1x_pae_enable: NotRequired[pulumi.Input[_builtins.bool]]
        """
        Set 802.1x Interface Pae Type
          - Default value: `true`
        """
        dot1x_pae_enable_variable: NotRequired[pulumi.Input[_builtins.str]]
        """
        Variable name
        """
        dot1x_periodic_reauth_inactivity_timeout: NotRequired[pulumi.Input[_builtins.int]]
        """
        Periodic Reauthentication Inactivity Timeout (in seconds)
          - Range: `1`-`1440`
          - Default value: `60`
        """
        dot1x_periodic_reauth_inactivity_timeout_variable: NotRequired[pulumi.Input[_builtins.str]]
        """
        Variable name
        """
        dot1x_periodic_reauth_interval: NotRequired[pulumi.Input[_builtins.int]]
        """
        Periodic Reauthentication Interval (in seconds)
          - Range: `0`-`1440`
          - Default value: `0`
        """
        dot1x_periodic_reauth_interval_variable: NotRequired[pulumi.Input[_builtins.str]]
        """
        Variable name
        """
        dot1x_port_control: NotRequired[pulumi.Input[_builtins.str]]
        """
        Set Port-Control Mode
          - Choices: `auto`, `force-unauthorized`, `force-authorized`
          - Default value: `auto`
        """
        dot1x_port_control_variable: NotRequired[pulumi.Input[_builtins.str]]
        """
        Variable name
        """
        dot1x_restricted_vlan: NotRequired[pulumi.Input[_builtins.int]]
        """
        Set Restricted VLAN ID
          - Range: `1`-`4094`
        """
        dot1x_restricted_vlan_variable: NotRequired[pulumi.Input[_builtins.str]]
        """
        Variable name
        """
        duplex: NotRequired[pulumi.Input[_builtins.str]]
        """
        Duplex mode
          - Choices: `full`, `half`
        """
        duplex_variable: NotRequired[pulumi.Input[_builtins.str]]
        """
        Variable name
        """
        name: NotRequired[pulumi.Input[_builtins.str]]
        """
        Set Interface name
        """
        name_variable: NotRequired[pulumi.Input[_builtins.str]]
        """
        Variable name
        """
        optional: NotRequired[pulumi.Input[_builtins.bool]]
        """
        Indicates if list item is considered optional.
        """
        shutdown: NotRequired[pulumi.Input[_builtins.bool]]
        """
        Administrative state
          - Default value: `true`
        """
        shutdown_variable: NotRequired[pulumi.Input[_builtins.str]]
        """
        Variable name
        """
        speed: NotRequired[pulumi.Input[_builtins.str]]
        """
        Set interface speed
          - Choices: `10`, `100`, `1000`, `2500`, `10000`
        """
        speed_variable: NotRequired[pulumi.Input[_builtins.str]]
        """
        Variable name
        """
        switchport_access_vlan: NotRequired[pulumi.Input[_builtins.int]]
        """
        Set VLAN identifier associated with bridging domain
          - Range: `1`-`4094`
        """
        switchport_access_vlan_variable: NotRequired[pulumi.Input[_builtins.str]]
        """
        Variable name
        """
        switchport_mode: NotRequired[pulumi.Input[_builtins.str]]
        """
        Set type of switch port: access/trunk
          - Choices: `access`, `trunk`
        """
        switchport_trunk_allowed_vlans: NotRequired[pulumi.Input[_builtins.str]]
        """
        Configure VLAN IDs used with the trunk
        """
        switchport_trunk_allowed_vlans_variable: NotRequired[pulumi.Input[_builtins.str]]
        """
        Variable name
        """
        switchport_trunk_native_vlan: NotRequired[pulumi.Input[_builtins.int]]
        """
        Configure VLAN ID used for native VLAN
          - Range: `1`-`4094`
        """
        switchport_trunk_native_vlan_variable: NotRequired[pulumi.Input[_builtins.str]]
        """
        Variable name
        """
        voice_vlan: NotRequired[pulumi.Input[_builtins.int]]
        """
        Configure Voice Vlan
          - Range: `1`-`4094`
        """
        voice_vlan_variable: NotRequired[pulumi.Input[_builtins.str]]
        """
        Variable name
        """
elif False:
    SwitchportFeatureTemplateInterfaceArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class SwitchportFeatureTemplateInterfaceArgs:
    def __init__(__self__, *,
                 dot1x_authentication_order_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 dot1x_authentication_orders: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 dot1x_control_direction: Optional[pulumi.Input[_builtins.str]] = None,
                 dot1x_control_direction_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 dot1x_critical_vlan: Optional[pulumi.Input[_builtins.int]] = None,
                 dot1x_critical_vlan_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 dot1x_enable: Optional[pulumi.Input[_builtins.bool]] = None,
                 dot1x_enable_criticial_voice_vlan: Optional[pulumi.Input[_builtins.bool]] = None,
                 dot1x_enable_criticial_voice_vlan_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 dot1x_enable_periodic_reauth: Optional[pulumi.Input[_builtins.bool]] = None,
                 dot1x_enable_periodic_reauth_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 dot1x_enable_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 dot1x_guest_vlan: Optional[pulumi.Input[_builtins.int]] = None,
                 dot1x_guest_vlan_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 dot1x_host_mode: Optional[pulumi.Input[_builtins.str]] = None,
                 dot1x_host_mode_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 dot1x_mac_authentication_bypass: Optional[pulumi.Input[_builtins.bool]] = None,
                 dot1x_mac_authentication_bypass_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 dot1x_pae_enable: Optional[pulumi.Input[_builtins.bool]] = None,
                 dot1x_pae_enable_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 dot1x_periodic_reauth_inactivity_timeout: Optional[pulumi.Input[_builtins.int]] = None,
                 dot1x_periodic_reauth_inactivity_timeout_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 dot1x_periodic_reauth_interval: Optional[pulumi.Input[_builtins.int]] = None,
                 dot1x_periodic_reauth_interval_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 dot1x_port_control: Optional[pulumi.Input[_builtins.str]] = None,
                 dot1x_port_control_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 dot1x_restricted_vlan: Optional[pulumi.Input[_builtins.int]] = None,
                 dot1x_restricted_vlan_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 duplex: Optional[pulumi.Input[_builtins.str]] = None,
                 duplex_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 name_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 optional: Optional[pulumi.Input[_builtins.bool]] = None,
                 shutdown: Optional[pulumi.Input[_builtins.bool]] = None,
                 shutdown_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 speed: Optional[pulumi.Input[_builtins.str]] = None,
                 speed_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 switchport_access_vlan: Optional[pulumi.Input[_builtins.int]] = None,
                 switchport_access_vlan_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 switchport_mode: Optional[pulumi.Input[_builtins.str]] = None,
                 switchport_trunk_allowed_vlans: Optional[pulumi.Input[_builtins.str]] = None,
                 switchport_trunk_allowed_vlans_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 switchport_trunk_native_vlan: Optional[pulumi.Input[_builtins.int]] = None,
                 switchport_trunk_native_vlan_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 voice_vlan: Optional[pulumi.Input[_builtins.int]] = None,
                 voice_vlan_variable: Optional[pulumi.Input[_builtins.str]] = None):
        """
        :param pulumi.Input[_builtins.str] dot1x_authentication_order_variable: Variable name
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] dot1x_authentication_orders: Specify authentication methods in the order of preference
        :param pulumi.Input[_builtins.str] dot1x_control_direction: Set uni or bi directional authorization mode
                 - Choices: `both`, `in`
                 - Default value: `both`
        :param pulumi.Input[_builtins.str] dot1x_control_direction_variable: Variable name
        :param pulumi.Input[_builtins.int] dot1x_critical_vlan: Set Critical VLAN
                 - Range: `1`-`4094`
        :param pulumi.Input[_builtins.str] dot1x_critical_vlan_variable: Variable name
        :param pulumi.Input[_builtins.bool] dot1x_enable: Set 802.1x on off
                 - Default value: `true`
        :param pulumi.Input[_builtins.bool] dot1x_enable_criticial_voice_vlan: Enable Critical Voice VLAN
                 - Default value: `false`
        :param pulumi.Input[_builtins.str] dot1x_enable_criticial_voice_vlan_variable: Variable name
        :param pulumi.Input[_builtins.bool] dot1x_enable_periodic_reauth: Enable Periodic Reauthentication
                 - Default value: `false`
        :param pulumi.Input[_builtins.str] dot1x_enable_periodic_reauth_variable: Variable name
        :param pulumi.Input[_builtins.str] dot1x_enable_variable: Variable name
        :param pulumi.Input[_builtins.int] dot1x_guest_vlan: Set vlan to drop non-802.1x enabled clients into if client is not in MAB list
                 - Range: `1`-`4094`
        :param pulumi.Input[_builtins.str] dot1x_guest_vlan_variable: Variable name
        :param pulumi.Input[_builtins.str] dot1x_host_mode: Set host mode
                 - Choices: `single-host`, `multi-auth`, `multi-host`, `multi-domain`
                 - Default value: `single-host`
        :param pulumi.Input[_builtins.str] dot1x_host_mode_variable: Variable name
        :param pulumi.Input[_builtins.bool] dot1x_mac_authentication_bypass: MAC Authentication Bypass
                 - Default value: `false`
        :param pulumi.Input[_builtins.str] dot1x_mac_authentication_bypass_variable: Variable name
        :param pulumi.Input[_builtins.bool] dot1x_pae_enable: Set 802.1x Interface Pae Type
                 - Default value: `true`
        :param pulumi.Input[_builtins.str] dot1x_pae_enable_variable: Variable name
        :param pulumi.Input[_builtins.int] dot1x_periodic_reauth_inactivity_timeout: Periodic Reauthentication Inactivity Timeout (in seconds)
                 - Range: `1`-`1440`
                 - Default value: `60`
        :param pulumi.Input[_builtins.str] dot1x_periodic_reauth_inactivity_timeout_variable: Variable name
        :param pulumi.Input[_builtins.int] dot1x_periodic_reauth_interval: Periodic Reauthentication Interval (in seconds)
                 - Range: `0`-`1440`
                 - Default value: `0`
        :param pulumi.Input[_builtins.str] dot1x_periodic_reauth_interval_variable: Variable name
        :param pulumi.Input[_builtins.str] dot1x_port_control: Set Port-Control Mode
                 - Choices: `auto`, `force-unauthorized`, `force-authorized`
                 - Default value: `auto`
        :param pulumi.Input[_builtins.str] dot1x_port_control_variable: Variable name
        :param pulumi.Input[_builtins.int] dot1x_restricted_vlan: Set Restricted VLAN ID
                 - Range: `1`-`4094`
        :param pulumi.Input[_builtins.str] dot1x_restricted_vlan_variable: Variable name
        :param pulumi.Input[_builtins.str] duplex: Duplex mode
                 - Choices: `full`, `half`
        :param pulumi.Input[_builtins.str] duplex_variable: Variable name
        :param pulumi.Input[_builtins.str] name: Set Interface name
        :param pulumi.Input[_builtins.str] name_variable: Variable name
        :param pulumi.Input[_builtins.bool] optional: Indicates if list item is considered optional.
        :param pulumi.Input[_builtins.bool] shutdown: Administrative state
                 - Default value: `true`
        :param pulumi.Input[_builtins.str] shutdown_variable: Variable name
        :param pulumi.Input[_builtins.str] speed: Set interface speed
                 - Choices: `10`, `100`, `1000`, `2500`, `10000`
        :param pulumi.Input[_builtins.str] speed_variable: Variable name
        :param pulumi.Input[_builtins.int] switchport_access_vlan: Set VLAN identifier associated with bridging domain
                 - Range: `1`-`4094`
        :param pulumi.Input[_builtins.str] switchport_access_vlan_variable: Variable name
        :param pulumi.Input[_builtins.str] switchport_mode: Set type of switch port: access/trunk
                 - Choices: `access`, `trunk`
        :param pulumi.Input[_builtins.str] switchport_trunk_allowed_vlans: Configure VLAN IDs used with the trunk
        :param pulumi.Input[_builtins.str] switchport_trunk_allowed_vlans_variable: Variable name
        :param pulumi.Input[_builtins.int] switchport_trunk_native_vlan: Configure VLAN ID used for native VLAN
                 - Range: `1`-`4094`
        :param pulumi.Input[_builtins.str] switchport_trunk_native_vlan_variable: Variable name
        :param pulumi.Input[_builtins.int] voice_vlan: Configure Voice Vlan
                 - Range: `1`-`4094`
        :param pulumi.Input[_builtins.str] voice_vlan_variable: Variable name
        """
        if dot1x_authentication_order_variable is not None:
            pulumi.set(__self__, "dot1x_authentication_order_variable", dot1x_authentication_order_variable)
        if dot1x_authentication_orders is not None:
            pulumi.set(__self__, "dot1x_authentication_orders", dot1x_authentication_orders)
        if dot1x_control_direction is not None:
            pulumi.set(__self__, "dot1x_control_direction", dot1x_control_direction)
        if dot1x_control_direction_variable is not None:
            pulumi.set(__self__, "dot1x_control_direction_variable", dot1x_control_direction_variable)
        if dot1x_critical_vlan is not None:
            pulumi.set(__self__, "dot1x_critical_vlan", dot1x_critical_vlan)
        if dot1x_critical_vlan_variable is not None:
            pulumi.set(__self__, "dot1x_critical_vlan_variable", dot1x_critical_vlan_variable)
        if dot1x_enable is not None:
            pulumi.set(__self__, "dot1x_enable", dot1x_enable)
        if dot1x_enable_criticial_voice_vlan is not None:
            pulumi.set(__self__, "dot1x_enable_criticial_voice_vlan", dot1x_enable_criticial_voice_vlan)
        if dot1x_enable_criticial_voice_vlan_variable is not None:
            pulumi.set(__self__, "dot1x_enable_criticial_voice_vlan_variable", dot1x_enable_criticial_voice_vlan_variable)
        if dot1x_enable_periodic_reauth is not None:
            pulumi.set(__self__, "dot1x_enable_periodic_reauth", dot1x_enable_periodic_reauth)
        if dot1x_enable_periodic_reauth_variable is not None:
            pulumi.set(__self__, "dot1x_enable_periodic_reauth_variable", dot1x_enable_periodic_reauth_variable)
        if dot1x_enable_variable is not None:
            pulumi.set(__self__, "dot1x_enable_variable", dot1x_enable_variable)
        if dot1x_guest_vlan is not None:
            pulumi.set(__self__, "dot1x_guest_vlan", dot1x_guest_vlan)
        if dot1x_guest_vlan_variable is not None:
            pulumi.set(__self__, "dot1x_guest_vlan_variable", dot1x_guest_vlan_variable)
        if dot1x_host_mode is not None:
            pulumi.set(__self__, "dot1x_host_mode", dot1x_host_mode)
        if dot1x_host_mode_variable is not None:
            pulumi.set(__self__, "dot1x_host_mode_variable", dot1x_host_mode_variable)
        if dot1x_mac_authentication_bypass is not None:
            pulumi.set(__self__, "dot1x_mac_authentication_bypass", dot1x_mac_authentication_bypass)
        if dot1x_mac_authentication_bypass_variable is not None:
            pulumi.set(__self__, "dot1x_mac_authentication_bypass_variable", dot1x_mac_authentication_bypass_variable)
        if dot1x_pae_enable is not None:
            pulumi.set(__self__, "dot1x_pae_enable", dot1x_pae_enable)
        if dot1x_pae_enable_variable is not None:
            pulumi.set(__self__, "dot1x_pae_enable_variable", dot1x_pae_enable_variable)
        if dot1x_periodic_reauth_inactivity_timeout is not None:
            pulumi.set(__self__, "dot1x_periodic_reauth_inactivity_timeout", dot1x_periodic_reauth_inactivity_timeout)
        if dot1x_periodic_reauth_inactivity_timeout_variable is not None:
            pulumi.set(__self__, "dot1x_periodic_reauth_inactivity_timeout_variable", dot1x_periodic_reauth_inactivity_timeout_variable)
        if dot1x_periodic_reauth_interval is not None:
            pulumi.set(__self__, "dot1x_periodic_reauth_interval", dot1x_periodic_reauth_interval)
        if dot1x_periodic_reauth_interval_variable is not None:
            pulumi.set(__self__, "dot1x_periodic_reauth_interval_variable", dot1x_periodic_reauth_interval_variable)
        if dot1x_port_control is not None:
            pulumi.set(__self__, "dot1x_port_control", dot1x_port_control)
        if dot1x_port_control_variable is not None:
            pulumi.set(__self__, "dot1x_port_control_variable", dot1x_port_control_variable)
        if dot1x_restricted_vlan is not None:
            pulumi.set(__self__, "dot1x_restricted_vlan", dot1x_restricted_vlan)
        if dot1x_restricted_vlan_variable is not None:
            pulumi.set(__self__, "dot1x_restricted_vlan_variable", dot1x_restricted_vlan_variable)
        if duplex is not None:
            pulumi.set(__self__, "duplex", duplex)
        if duplex_variable is not None:
            pulumi.set(__self__, "duplex_variable", duplex_variable)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if name_variable is not None:
            pulumi.set(__self__, "name_variable", name_variable)
        if optional is not None:
            pulumi.set(__self__, "optional", optional)
        if shutdown is not None:
            pulumi.set(__self__, "shutdown", shutdown)
        if shutdown_variable is not None:
            pulumi.set(__self__, "shutdown_variable", shutdown_variable)
        if speed is not None:
            pulumi.set(__self__, "speed", speed)
        if speed_variable is not None:
            pulumi.set(__self__, "speed_variable", speed_variable)
        if switchport_access_vlan is not None:
            pulumi.set(__self__, "switchport_access_vlan", switchport_access_vlan)
        if switchport_access_vlan_variable is not None:
            pulumi.set(__self__, "switchport_access_vlan_variable", switchport_access_vlan_variable)
        if switchport_mode is not None:
            pulumi.set(__self__, "switchport_mode", switchport_mode)
        if switchport_trunk_allowed_vlans is not None:
            pulumi.set(__self__, "switchport_trunk_allowed_vlans", switchport_trunk_allowed_vlans)
        if switchport_trunk_allowed_vlans_variable is not None:
            pulumi.set(__self__, "switchport_trunk_allowed_vlans_variable", switchport_trunk_allowed_vlans_variable)
        if switchport_trunk_native_vlan is not None:
            pulumi.set(__self__, "switchport_trunk_native_vlan", switchport_trunk_native_vlan)
        if switchport_trunk_native_vlan_variable is not None:
            pulumi.set(__self__, "switchport_trunk_native_vlan_variable", switchport_trunk_native_vlan_variable)
        if voice_vlan is not None:
            pulumi.set(__self__, "voice_vlan", voice_vlan)
        if voice_vlan_variable is not None:
            pulumi.set(__self__, "voice_vlan_variable", voice_vlan_variable)

    @_builtins.property
    @pulumi.getter(name="dot1xAuthenticationOrderVariable")
    def dot1x_authentication_order_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "dot1x_authentication_order_variable")

    @dot1x_authentication_order_variable.setter
    def dot1x_authentication_order_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "dot1x_authentication_order_variable", value)

    @_builtins.property
    @pulumi.getter(name="dot1xAuthenticationOrders")
    def dot1x_authentication_orders(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]:
        """
        Specify authentication methods in the order of preference
        """
        return pulumi.get(self, "dot1x_authentication_orders")

    @dot1x_authentication_orders.setter
    def dot1x_authentication_orders(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "dot1x_authentication_orders", value)

    @_builtins.property
    @pulumi.getter(name="dot1xControlDirection")
    def dot1x_control_direction(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Set uni or bi directional authorization mode
          - Choices: `both`, `in`
          - Default value: `both`
        """
        return pulumi.get(self, "dot1x_control_direction")

    @dot1x_control_direction.setter
    def dot1x_control_direction(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "dot1x_control_direction", value)

    @_builtins.property
    @pulumi.getter(name="dot1xControlDirectionVariable")
    def dot1x_control_direction_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "dot1x_control_direction_variable")

    @dot1x_control_direction_variable.setter
    def dot1x_control_direction_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "dot1x_control_direction_variable", value)

    @_builtins.property
    @pulumi.getter(name="dot1xCriticalVlan")
    def dot1x_critical_vlan(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        Set Critical VLAN
          - Range: `1`-`4094`
        """
        return pulumi.get(self, "dot1x_critical_vlan")

    @dot1x_critical_vlan.setter
    def dot1x_critical_vlan(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "dot1x_critical_vlan", value)

    @_builtins.property
    @pulumi.getter(name="dot1xCriticalVlanVariable")
    def dot1x_critical_vlan_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "dot1x_critical_vlan_variable")

    @dot1x_critical_vlan_variable.setter
    def dot1x_critical_vlan_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "dot1x_critical_vlan_variable", value)

    @_builtins.property
    @pulumi.getter(name="dot1xEnable")
    def dot1x_enable(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Set 802.1x on off
          - Default value: `true`
        """
        return pulumi.get(self, "dot1x_enable")

    @dot1x_enable.setter
    def dot1x_enable(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "dot1x_enable", value)

    @_builtins.property
    @pulumi.getter(name="dot1xEnableCriticialVoiceVlan")
    def dot1x_enable_criticial_voice_vlan(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Enable Critical Voice VLAN
          - Default value: `false`
        """
        return pulumi.get(self, "dot1x_enable_criticial_voice_vlan")

    @dot1x_enable_criticial_voice_vlan.setter
    def dot1x_enable_criticial_voice_vlan(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "dot1x_enable_criticial_voice_vlan", value)

    @_builtins.property
    @pulumi.getter(name="dot1xEnableCriticialVoiceVlanVariable")
    def dot1x_enable_criticial_voice_vlan_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "dot1x_enable_criticial_voice_vlan_variable")

    @dot1x_enable_criticial_voice_vlan_variable.setter
    def dot1x_enable_criticial_voice_vlan_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "dot1x_enable_criticial_voice_vlan_variable", value)

    @_builtins.property
    @pulumi.getter(name="dot1xEnablePeriodicReauth")
    def dot1x_enable_periodic_reauth(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Enable Periodic Reauthentication
          - Default value: `false`
        """
        return pulumi.get(self, "dot1x_enable_periodic_reauth")

    @dot1x_enable_periodic_reauth.setter
    def dot1x_enable_periodic_reauth(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "dot1x_enable_periodic_reauth", value)

    @_builtins.property
    @pulumi.getter(name="dot1xEnablePeriodicReauthVariable")
    def dot1x_enable_periodic_reauth_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "dot1x_enable_periodic_reauth_variable")

    @dot1x_enable_periodic_reauth_variable.setter
    def dot1x_enable_periodic_reauth_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "dot1x_enable_periodic_reauth_variable", value)

    @_builtins.property
    @pulumi.getter(name="dot1xEnableVariable")
    def dot1x_enable_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "dot1x_enable_variable")

    @dot1x_enable_variable.setter
    def dot1x_enable_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "dot1x_enable_variable", value)

    @_builtins.property
    @pulumi.getter(name="dot1xGuestVlan")
    def dot1x_guest_vlan(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        Set vlan to drop non-802.1x enabled clients into if client is not in MAB list
          - Range: `1`-`4094`
        """
        return pulumi.get(self, "dot1x_guest_vlan")

    @dot1x_guest_vlan.setter
    def dot1x_guest_vlan(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "dot1x_guest_vlan", value)

    @_builtins.property
    @pulumi.getter(name="dot1xGuestVlanVariable")
    def dot1x_guest_vlan_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "dot1x_guest_vlan_variable")

    @dot1x_guest_vlan_variable.setter
    def dot1x_guest_vlan_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "dot1x_guest_vlan_variable", value)

    @_builtins.property
    @pulumi.getter(name="dot1xHostMode")
    def dot1x_host_mode(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Set host mode
          - Choices: `single-host`, `multi-auth`, `multi-host`, `multi-domain`
          - Default value: `single-host`
        """
        return pulumi.get(self, "dot1x_host_mode")

    @dot1x_host_mode.setter
    def dot1x_host_mode(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "dot1x_host_mode", value)

    @_builtins.property
    @pulumi.getter(name="dot1xHostModeVariable")
    def dot1x_host_mode_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "dot1x_host_mode_variable")

    @dot1x_host_mode_variable.setter
    def dot1x_host_mode_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "dot1x_host_mode_variable", value)

    @_builtins.property
    @pulumi.getter(name="dot1xMacAuthenticationBypass")
    def dot1x_mac_authentication_bypass(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        MAC Authentication Bypass
          - Default value: `false`
        """
        return pulumi.get(self, "dot1x_mac_authentication_bypass")

    @dot1x_mac_authentication_bypass.setter
    def dot1x_mac_authentication_bypass(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "dot1x_mac_authentication_bypass", value)

    @_builtins.property
    @pulumi.getter(name="dot1xMacAuthenticationBypassVariable")
    def dot1x_mac_authentication_bypass_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "dot1x_mac_authentication_bypass_variable")

    @dot1x_mac_authentication_bypass_variable.setter
    def dot1x_mac_authentication_bypass_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "dot1x_mac_authentication_bypass_variable", value)

    @_builtins.property
    @pulumi.getter(name="dot1xPaeEnable")
    def dot1x_pae_enable(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Set 802.1x Interface Pae Type
          - Default value: `true`
        """
        return pulumi.get(self, "dot1x_pae_enable")

    @dot1x_pae_enable.setter
    def dot1x_pae_enable(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "dot1x_pae_enable", value)

    @_builtins.property
    @pulumi.getter(name="dot1xPaeEnableVariable")
    def dot1x_pae_enable_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "dot1x_pae_enable_variable")

    @dot1x_pae_enable_variable.setter
    def dot1x_pae_enable_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "dot1x_pae_enable_variable", value)

    @_builtins.property
    @pulumi.getter(name="dot1xPeriodicReauthInactivityTimeout")
    def dot1x_periodic_reauth_inactivity_timeout(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        Periodic Reauthentication Inactivity Timeout (in seconds)
          - Range: `1`-`1440`
          - Default value: `60`
        """
        return pulumi.get(self, "dot1x_periodic_reauth_inactivity_timeout")

    @dot1x_periodic_reauth_inactivity_timeout.setter
    def dot1x_periodic_reauth_inactivity_timeout(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "dot1x_periodic_reauth_inactivity_timeout", value)

    @_builtins.property
    @pulumi.getter(name="dot1xPeriodicReauthInactivityTimeoutVariable")
    def dot1x_periodic_reauth_inactivity_timeout_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "dot1x_periodic_reauth_inactivity_timeout_variable")

    @dot1x_periodic_reauth_inactivity_timeout_variable.setter
    def dot1x_periodic_reauth_inactivity_timeout_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "dot1x_periodic_reauth_inactivity_timeout_variable", value)

    @_builtins.property
    @pulumi.getter(name="dot1xPeriodicReauthInterval")
    def dot1x_periodic_reauth_interval(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        Periodic Reauthentication Interval (in seconds)
          - Range: `0`-`1440`
          - Default value: `0`
        """
        return pulumi.get(self, "dot1x_periodic_reauth_interval")

    @dot1x_periodic_reauth_interval.setter
    def dot1x_periodic_reauth_interval(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "dot1x_periodic_reauth_interval", value)

    @_builtins.property
    @pulumi.getter(name="dot1xPeriodicReauthIntervalVariable")
    def dot1x_periodic_reauth_interval_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "dot1x_periodic_reauth_interval_variable")

    @dot1x_periodic_reauth_interval_variable.setter
    def dot1x_periodic_reauth_interval_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "dot1x_periodic_reauth_interval_variable", value)

    @_builtins.property
    @pulumi.getter(name="dot1xPortControl")
    def dot1x_port_control(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Set Port-Control Mode
          - Choices: `auto`, `force-unauthorized`, `force-authorized`
          - Default value: `auto`
        """
        return pulumi.get(self, "dot1x_port_control")

    @dot1x_port_control.setter
    def dot1x_port_control(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "dot1x_port_control", value)

    @_builtins.property
    @pulumi.getter(name="dot1xPortControlVariable")
    def dot1x_port_control_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "dot1x_port_control_variable")

    @dot1x_port_control_variable.setter
    def dot1x_port_control_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "dot1x_port_control_variable", value)

    @_builtins.property
    @pulumi.getter(name="dot1xRestrictedVlan")
    def dot1x_restricted_vlan(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        Set Restricted VLAN ID
          - Range: `1`-`4094`
        """
        return pulumi.get(self, "dot1x_restricted_vlan")

    @dot1x_restricted_vlan.setter
    def dot1x_restricted_vlan(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "dot1x_restricted_vlan", value)

    @_builtins.property
    @pulumi.getter(name="dot1xRestrictedVlanVariable")
    def dot1x_restricted_vlan_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "dot1x_restricted_vlan_variable")

    @dot1x_restricted_vlan_variable.setter
    def dot1x_restricted_vlan_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "dot1x_restricted_vlan_variable", value)

    @_builtins.property
    @pulumi.getter
    def duplex(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Duplex mode
          - Choices: `full`, `half`
        """
        return pulumi.get(self, "duplex")

    @duplex.setter
    def duplex(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "duplex", value)

    @_builtins.property
    @pulumi.getter(name="duplexVariable")
    def duplex_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "duplex_variable")

    @duplex_variable.setter
    def duplex_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "duplex_variable", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Set Interface name
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "name", value)

    @_builtins.property
    @pulumi.getter(name="nameVariable")
    def name_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "name_variable")

    @name_variable.setter
    def name_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "name_variable", value)

    @_builtins.property
    @pulumi.getter
    def optional(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Indicates if list item is considered optional.
        """
        return pulumi.get(self, "optional")

    @optional.setter
    def optional(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "optional", value)

    @_builtins.property
    @pulumi.getter
    def shutdown(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Administrative state
          - Default value: `true`
        """
        return pulumi.get(self, "shutdown")

    @shutdown.setter
    def shutdown(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "shutdown", value)

    @_builtins.property
    @pulumi.getter(name="shutdownVariable")
    def shutdown_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "shutdown_variable")

    @shutdown_variable.setter
    def shutdown_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "shutdown_variable", value)

    @_builtins.property
    @pulumi.getter
    def speed(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Set interface speed
          - Choices: `10`, `100`, `1000`, `2500`, `10000`
        """
        return pulumi.get(self, "speed")

    @speed.setter
    def speed(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "speed", value)

    @_builtins.property
    @pulumi.getter(name="speedVariable")
    def speed_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "speed_variable")

    @speed_variable.setter
    def speed_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "speed_variable", value)

    @_builtins.property
    @pulumi.getter(name="switchportAccessVlan")
    def switchport_access_vlan(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        Set VLAN identifier associated with bridging domain
          - Range: `1`-`4094`
        """
        return pulumi.get(self, "switchport_access_vlan")

    @switchport_access_vlan.setter
    def switchport_access_vlan(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "switchport_access_vlan", value)

    @_builtins.property
    @pulumi.getter(name="switchportAccessVlanVariable")
    def switchport_access_vlan_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "switchport_access_vlan_variable")

    @switchport_access_vlan_variable.setter
    def switchport_access_vlan_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "switchport_access_vlan_variable", value)

    @_builtins.property
    @pulumi.getter(name="switchportMode")
    def switchport_mode(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Set type of switch port: access/trunk
          - Choices: `access`, `trunk`
        """
        return pulumi.get(self, "switchport_mode")

    @switchport_mode.setter
    def switchport_mode(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "switchport_mode", value)

    @_builtins.property
    @pulumi.getter(name="switchportTrunkAllowedVlans")
    def switchport_trunk_allowed_vlans(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Configure VLAN IDs used with the trunk
        """
        return pulumi.get(self, "switchport_trunk_allowed_vlans")

    @switchport_trunk_allowed_vlans.setter
    def switchport_trunk_allowed_vlans(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "switchport_trunk_allowed_vlans", value)

    @_builtins.property
    @pulumi.getter(name="switchportTrunkAllowedVlansVariable")
    def switchport_trunk_allowed_vlans_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "switchport_trunk_allowed_vlans_variable")

    @switchport_trunk_allowed_vlans_variable.setter
    def switchport_trunk_allowed_vlans_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "switchport_trunk_allowed_vlans_variable", value)

    @_builtins.property
    @pulumi.getter(name="switchportTrunkNativeVlan")
    def switchport_trunk_native_vlan(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        Configure VLAN ID used for native VLAN
          - Range: `1`-`4094`
        """
        return pulumi.get(self, "switchport_trunk_native_vlan")

    @switchport_trunk_native_vlan.setter
    def switchport_trunk_native_vlan(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "switchport_trunk_native_vlan", value)

    @_builtins.property
    @pulumi.getter(name="switchportTrunkNativeVlanVariable")
    def switchport_trunk_native_vlan_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "switchport_trunk_native_vlan_variable")

    @switchport_trunk_native_vlan_variable.setter
    def switchport_trunk_native_vlan_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "switchport_trunk_native_vlan_variable", value)

    @_builtins.property
    @pulumi.getter(name="voiceVlan")
    def voice_vlan(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        Configure Voice Vlan
          - Range: `1`-`4094`
        """
        return pulumi.get(self, "voice_vlan")

    @voice_vlan.setter
    def voice_vlan(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "voice_vlan", value)

    @_builtins.property
    @pulumi.getter(name="voiceVlanVariable")
    def voice_vlan_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "voice_vlan_variable")

    @voice_vlan_variable.setter
    def voice_vlan_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "voice_vlan_variable", value)


if not MYPY:
    class SwitchportFeatureTemplateStaticMacAddressArgsDict(TypedDict):
        if_name: NotRequired[pulumi.Input[_builtins.str]]
        """
        Interface name: GigabitEthernet0/<>/<>
        """
        if_name_variable: NotRequired[pulumi.Input[_builtins.str]]
        """
        Variable name
        """
        mac_address: NotRequired[pulumi.Input[_builtins.str]]
        """
        Set MAC address in xxxx.xxxx.xxxx format
        """
        mac_address_variable: NotRequired[pulumi.Input[_builtins.str]]
        """
        Variable name
        """
        optional: NotRequired[pulumi.Input[_builtins.bool]]
        """
        Indicates if list item is considered optional.
        """
        vlan: NotRequired[pulumi.Input[_builtins.int]]
        """
        Configure VLAN ID used with the mac and interface
          - Range: `1`-`4094`
        """
        vlan_variable: NotRequired[pulumi.Input[_builtins.str]]
        """
        Variable name
        """
elif False:
    SwitchportFeatureTemplateStaticMacAddressArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class SwitchportFeatureTemplateStaticMacAddressArgs:
    def __init__(__self__, *,
                 if_name: Optional[pulumi.Input[_builtins.str]] = None,
                 if_name_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 mac_address: Optional[pulumi.Input[_builtins.str]] = None,
                 mac_address_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 optional: Optional[pulumi.Input[_builtins.bool]] = None,
                 vlan: Optional[pulumi.Input[_builtins.int]] = None,
                 vlan_variable: Optional[pulumi.Input[_builtins.str]] = None):
        """
        :param pulumi.Input[_builtins.str] if_name: Interface name: GigabitEthernet0/<>/<>
        :param pulumi.Input[_builtins.str] if_name_variable: Variable name
        :param pulumi.Input[_builtins.str] mac_address: Set MAC address in xxxx.xxxx.xxxx format
        :param pulumi.Input[_builtins.str] mac_address_variable: Variable name
        :param pulumi.Input[_builtins.bool] optional: Indicates if list item is considered optional.
        :param pulumi.Input[_builtins.int] vlan: Configure VLAN ID used with the mac and interface
                 - Range: `1`-`4094`
        :param pulumi.Input[_builtins.str] vlan_variable: Variable name
        """
        if if_name is not None:
            pulumi.set(__self__, "if_name", if_name)
        if if_name_variable is not None:
            pulumi.set(__self__, "if_name_variable", if_name_variable)
        if mac_address is not None:
            pulumi.set(__self__, "mac_address", mac_address)
        if mac_address_variable is not None:
            pulumi.set(__self__, "mac_address_variable", mac_address_variable)
        if optional is not None:
            pulumi.set(__self__, "optional", optional)
        if vlan is not None:
            pulumi.set(__self__, "vlan", vlan)
        if vlan_variable is not None:
            pulumi.set(__self__, "vlan_variable", vlan_variable)

    @_builtins.property
    @pulumi.getter(name="ifName")
    def if_name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Interface name: GigabitEthernet0/<>/<>
        """
        return pulumi.get(self, "if_name")

    @if_name.setter
    def if_name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "if_name", value)

    @_builtins.property
    @pulumi.getter(name="ifNameVariable")
    def if_name_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "if_name_variable")

    @if_name_variable.setter
    def if_name_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "if_name_variable", value)

    @_builtins.property
    @pulumi.getter(name="macAddress")
    def mac_address(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Set MAC address in xxxx.xxxx.xxxx format
        """
        return pulumi.get(self, "mac_address")

    @mac_address.setter
    def mac_address(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "mac_address", value)

    @_builtins.property
    @pulumi.getter(name="macAddressVariable")
    def mac_address_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "mac_address_variable")

    @mac_address_variable.setter
    def mac_address_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "mac_address_variable", value)

    @_builtins.property
    @pulumi.getter
    def optional(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Indicates if list item is considered optional.
        """
        return pulumi.get(self, "optional")

    @optional.setter
    def optional(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "optional", value)

    @_builtins.property
    @pulumi.getter
    def vlan(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        Configure VLAN ID used with the mac and interface
          - Range: `1`-`4094`
        """
        return pulumi.get(self, "vlan")

    @vlan.setter
    def vlan(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "vlan", value)

    @_builtins.property
    @pulumi.getter(name="vlanVariable")
    def vlan_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "vlan_variable")

    @vlan_variable.setter
    def vlan_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "vlan_variable", value)


if not MYPY:
    class SystemAaaFeatureAccountingRuleArgsDict(TypedDict):
        groups: NotRequired[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]
        """
        Use Server-group
        """
        level: NotRequired[pulumi.Input[_builtins.str]]
        """
        Privilege level when method is commands
          - Choices: `1`, `15`
        """
        method: NotRequired[pulumi.Input[_builtins.str]]
        """
        Configure Accounting Method
          - Choices: `commands`, `exec`, `network`, `system`
        """
        rule_id: NotRequired[pulumi.Input[_builtins.str]]
        """
        Configure Accounting Rule ID
        """
        start_stop: NotRequired[pulumi.Input[_builtins.bool]]
        """
        Record start and stop without waiting
          - Default value: `true`
        """
        start_stop_variable: NotRequired[pulumi.Input[_builtins.str]]
        """
        Variable name
        """
elif False:
    SystemAaaFeatureAccountingRuleArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class SystemAaaFeatureAccountingRuleArgs:
    def __init__(__self__, *,
                 groups: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 level: Optional[pulumi.Input[_builtins.str]] = None,
                 method: Optional[pulumi.Input[_builtins.str]] = None,
                 rule_id: Optional[pulumi.Input[_builtins.str]] = None,
                 start_stop: Optional[pulumi.Input[_builtins.bool]] = None,
                 start_stop_variable: Optional[pulumi.Input[_builtins.str]] = None):
        """
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] groups: Use Server-group
        :param pulumi.Input[_builtins.str] level: Privilege level when method is commands
                 - Choices: `1`, `15`
        :param pulumi.Input[_builtins.str] method: Configure Accounting Method
                 - Choices: `commands`, `exec`, `network`, `system`
        :param pulumi.Input[_builtins.str] rule_id: Configure Accounting Rule ID
        :param pulumi.Input[_builtins.bool] start_stop: Record start and stop without waiting
                 - Default value: `true`
        :param pulumi.Input[_builtins.str] start_stop_variable: Variable name
        """
        if groups is not None:
            pulumi.set(__self__, "groups", groups)
        if level is not None:
            pulumi.set(__self__, "level", level)
        if method is not None:
            pulumi.set(__self__, "method", method)
        if rule_id is not None:
            pulumi.set(__self__, "rule_id", rule_id)
        if start_stop is not None:
            pulumi.set(__self__, "start_stop", start_stop)
        if start_stop_variable is not None:
            pulumi.set(__self__, "start_stop_variable", start_stop_variable)

    @_builtins.property
    @pulumi.getter
    def groups(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]:
        """
        Use Server-group
        """
        return pulumi.get(self, "groups")

    @groups.setter
    def groups(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "groups", value)

    @_builtins.property
    @pulumi.getter
    def level(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Privilege level when method is commands
          - Choices: `1`, `15`
        """
        return pulumi.get(self, "level")

    @level.setter
    def level(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "level", value)

    @_builtins.property
    @pulumi.getter
    def method(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Configure Accounting Method
          - Choices: `commands`, `exec`, `network`, `system`
        """
        return pulumi.get(self, "method")

    @method.setter
    def method(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "method", value)

    @_builtins.property
    @pulumi.getter(name="ruleId")
    def rule_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Configure Accounting Rule ID
        """
        return pulumi.get(self, "rule_id")

    @rule_id.setter
    def rule_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "rule_id", value)

    @_builtins.property
    @pulumi.getter(name="startStop")
    def start_stop(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Record start and stop without waiting
          - Default value: `true`
        """
        return pulumi.get(self, "start_stop")

    @start_stop.setter
    def start_stop(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "start_stop", value)

    @_builtins.property
    @pulumi.getter(name="startStopVariable")
    def start_stop_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "start_stop_variable")

    @start_stop_variable.setter
    def start_stop_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "start_stop_variable", value)


if not MYPY:
    class SystemAaaFeatureAuthorizationRuleArgsDict(TypedDict):
        groups: NotRequired[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]
        """
        Use Server-group
        """
        if_authenticated: NotRequired[pulumi.Input[_builtins.bool]]
        """
        Succeed if user has authenticated
          - Default value: `false`
        """
        level: NotRequired[pulumi.Input[_builtins.str]]
        """
        Privilege level when method is commands
          - Choices: `1`, `15`
        """
        method: NotRequired[pulumi.Input[_builtins.str]]
        """
        Method
          - Choices: `commands`
        """
        rule_id: NotRequired[pulumi.Input[_builtins.str]]
        """
        Configure Authorization Rule ID
        """
elif False:
    SystemAaaFeatureAuthorizationRuleArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class SystemAaaFeatureAuthorizationRuleArgs:
    def __init__(__self__, *,
                 groups: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 if_authenticated: Optional[pulumi.Input[_builtins.bool]] = None,
                 level: Optional[pulumi.Input[_builtins.str]] = None,
                 method: Optional[pulumi.Input[_builtins.str]] = None,
                 rule_id: Optional[pulumi.Input[_builtins.str]] = None):
        """
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] groups: Use Server-group
        :param pulumi.Input[_builtins.bool] if_authenticated: Succeed if user has authenticated
                 - Default value: `false`
        :param pulumi.Input[_builtins.str] level: Privilege level when method is commands
                 - Choices: `1`, `15`
        :param pulumi.Input[_builtins.str] method: Method
                 - Choices: `commands`
        :param pulumi.Input[_builtins.str] rule_id: Configure Authorization Rule ID
        """
        if groups is not None:
            pulumi.set(__self__, "groups", groups)
        if if_authenticated is not None:
            pulumi.set(__self__, "if_authenticated", if_authenticated)
        if level is not None:
            pulumi.set(__self__, "level", level)
        if method is not None:
            pulumi.set(__self__, "method", method)
        if rule_id is not None:
            pulumi.set(__self__, "rule_id", rule_id)

    @_builtins.property
    @pulumi.getter
    def groups(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]:
        """
        Use Server-group
        """
        return pulumi.get(self, "groups")

    @groups.setter
    def groups(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "groups", value)

    @_builtins.property
    @pulumi.getter(name="ifAuthenticated")
    def if_authenticated(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Succeed if user has authenticated
          - Default value: `false`
        """
        return pulumi.get(self, "if_authenticated")

    @if_authenticated.setter
    def if_authenticated(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "if_authenticated", value)

    @_builtins.property
    @pulumi.getter
    def level(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Privilege level when method is commands
          - Choices: `1`, `15`
        """
        return pulumi.get(self, "level")

    @level.setter
    def level(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "level", value)

    @_builtins.property
    @pulumi.getter
    def method(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Method
          - Choices: `commands`
        """
        return pulumi.get(self, "method")

    @method.setter
    def method(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "method", value)

    @_builtins.property
    @pulumi.getter(name="ruleId")
    def rule_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Configure Authorization Rule ID
        """
        return pulumi.get(self, "rule_id")

    @rule_id.setter
    def rule_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "rule_id", value)


if not MYPY:
    class SystemAaaFeatureRadiusGroupArgsDict(TypedDict):
        group_name: NotRequired[pulumi.Input[_builtins.str]]
        """
        Set Radius server Group Name
        """
        servers: NotRequired[pulumi.Input[Sequence[pulumi.Input['SystemAaaFeatureRadiusGroupServerArgsDict']]]]
        """
        Configure the Radius server
        """
        source_interface: NotRequired[pulumi.Input[_builtins.str]]
        """
        Set interface to use to reach Radius server
        """
        source_interface_variable: NotRequired[pulumi.Input[_builtins.str]]
        """
        Variable name
        """
        vpn: NotRequired[pulumi.Input[_builtins.int]]
        """
        Set VPN in which Radius server is located
          - Range: `0`-`65530`
          - Default value: `0`
        """
elif False:
    SystemAaaFeatureRadiusGroupArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class SystemAaaFeatureRadiusGroupArgs:
    def __init__(__self__, *,
                 group_name: Optional[pulumi.Input[_builtins.str]] = None,
                 servers: Optional[pulumi.Input[Sequence[pulumi.Input['SystemAaaFeatureRadiusGroupServerArgs']]]] = None,
                 source_interface: Optional[pulumi.Input[_builtins.str]] = None,
                 source_interface_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 vpn: Optional[pulumi.Input[_builtins.int]] = None):
        """
        :param pulumi.Input[_builtins.str] group_name: Set Radius server Group Name
        :param pulumi.Input[Sequence[pulumi.Input['SystemAaaFeatureRadiusGroupServerArgs']]] servers: Configure the Radius server
        :param pulumi.Input[_builtins.str] source_interface: Set interface to use to reach Radius server
        :param pulumi.Input[_builtins.str] source_interface_variable: Variable name
        :param pulumi.Input[_builtins.int] vpn: Set VPN in which Radius server is located
                 - Range: `0`-`65530`
                 - Default value: `0`
        """
        if group_name is not None:
            pulumi.set(__self__, "group_name", group_name)
        if servers is not None:
            pulumi.set(__self__, "servers", servers)
        if source_interface is not None:
            pulumi.set(__self__, "source_interface", source_interface)
        if source_interface_variable is not None:
            pulumi.set(__self__, "source_interface_variable", source_interface_variable)
        if vpn is not None:
            pulumi.set(__self__, "vpn", vpn)

    @_builtins.property
    @pulumi.getter(name="groupName")
    def group_name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Set Radius server Group Name
        """
        return pulumi.get(self, "group_name")

    @group_name.setter
    def group_name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "group_name", value)

    @_builtins.property
    @pulumi.getter
    def servers(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['SystemAaaFeatureRadiusGroupServerArgs']]]]:
        """
        Configure the Radius server
        """
        return pulumi.get(self, "servers")

    @servers.setter
    def servers(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['SystemAaaFeatureRadiusGroupServerArgs']]]]):
        pulumi.set(self, "servers", value)

    @_builtins.property
    @pulumi.getter(name="sourceInterface")
    def source_interface(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Set interface to use to reach Radius server
        """
        return pulumi.get(self, "source_interface")

    @source_interface.setter
    def source_interface(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "source_interface", value)

    @_builtins.property
    @pulumi.getter(name="sourceInterfaceVariable")
    def source_interface_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "source_interface_variable")

    @source_interface_variable.setter
    def source_interface_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "source_interface_variable", value)

    @_builtins.property
    @pulumi.getter
    def vpn(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        Set VPN in which Radius server is located
          - Range: `0`-`65530`
          - Default value: `0`
        """
        return pulumi.get(self, "vpn")

    @vpn.setter
    def vpn(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "vpn", value)


if not MYPY:
    class SystemAaaFeatureRadiusGroupServerArgsDict(TypedDict):
        acct_port: NotRequired[pulumi.Input[_builtins.int]]
        """
        Set Accounting port to use to connect to Radius server
          - Range: `1`-`65534`
          - Default value: `1813`
        """
        acct_port_variable: NotRequired[pulumi.Input[_builtins.str]]
        """
        Variable name
        """
        address: NotRequired[pulumi.Input[_builtins.str]]
        """
        Set IP address of Radius server
        """
        auth_port: NotRequired[pulumi.Input[_builtins.int]]
        """
        Set Authentication port to use to connect to Radius server
          - Range: `1`-`65534`
          - Default value: `1812`
        """
        auth_port_variable: NotRequired[pulumi.Input[_builtins.str]]
        """
        Variable name
        """
        key: NotRequired[pulumi.Input[_builtins.str]]
        """
        Set the Radius server shared key
        """
        key_enum: NotRequired[pulumi.Input[_builtins.str]]
        """
        Type of encyption. To be used for type 6
          - Choices: `6`, `7`
        """
        key_type: NotRequired[pulumi.Input[_builtins.str]]
        """
        key type
          - Choices: `key`, `pac`
          - Default value: `key`
        """
        key_type_variable: NotRequired[pulumi.Input[_builtins.str]]
        """
        Variable name
        """
        retransmit: NotRequired[pulumi.Input[_builtins.int]]
        """
        Configure how many times to contact this Radius server
          - Range: `1`-`100`
          - Default value: `3`
        """
        retransmit_variable: NotRequired[pulumi.Input[_builtins.str]]
        """
        Variable name
        """
        secret_key: NotRequired[pulumi.Input[_builtins.str]]
        """
        Set the Radius server shared type 7 encrypted key
        """
        secret_key_variable: NotRequired[pulumi.Input[_builtins.str]]
        """
        Variable name
        """
        timeout: NotRequired[pulumi.Input[_builtins.int]]
        """
        Configure how long to wait for replies from the Radius server
          - Range: `1`-`1000`
          - Default value: `5`
        """
        timeout_variable: NotRequired[pulumi.Input[_builtins.str]]
        """
        Variable name
        """
elif False:
    SystemAaaFeatureRadiusGroupServerArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class SystemAaaFeatureRadiusGroupServerArgs:
    def __init__(__self__, *,
                 acct_port: Optional[pulumi.Input[_builtins.int]] = None,
                 acct_port_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 address: Optional[pulumi.Input[_builtins.str]] = None,
                 auth_port: Optional[pulumi.Input[_builtins.int]] = None,
                 auth_port_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 key: Optional[pulumi.Input[_builtins.str]] = None,
                 key_enum: Optional[pulumi.Input[_builtins.str]] = None,
                 key_type: Optional[pulumi.Input[_builtins.str]] = None,
                 key_type_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 retransmit: Optional[pulumi.Input[_builtins.int]] = None,
                 retransmit_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 secret_key: Optional[pulumi.Input[_builtins.str]] = None,
                 secret_key_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 timeout: Optional[pulumi.Input[_builtins.int]] = None,
                 timeout_variable: Optional[pulumi.Input[_builtins.str]] = None):
        """
        :param pulumi.Input[_builtins.int] acct_port: Set Accounting port to use to connect to Radius server
                 - Range: `1`-`65534`
                 - Default value: `1813`
        :param pulumi.Input[_builtins.str] acct_port_variable: Variable name
        :param pulumi.Input[_builtins.str] address: Set IP address of Radius server
        :param pulumi.Input[_builtins.int] auth_port: Set Authentication port to use to connect to Radius server
                 - Range: `1`-`65534`
                 - Default value: `1812`
        :param pulumi.Input[_builtins.str] auth_port_variable: Variable name
        :param pulumi.Input[_builtins.str] key: Set the Radius server shared key
        :param pulumi.Input[_builtins.str] key_enum: Type of encyption. To be used for type 6
                 - Choices: `6`, `7`
        :param pulumi.Input[_builtins.str] key_type: key type
                 - Choices: `key`, `pac`
                 - Default value: `key`
        :param pulumi.Input[_builtins.str] key_type_variable: Variable name
        :param pulumi.Input[_builtins.int] retransmit: Configure how many times to contact this Radius server
                 - Range: `1`-`100`
                 - Default value: `3`
        :param pulumi.Input[_builtins.str] retransmit_variable: Variable name
        :param pulumi.Input[_builtins.str] secret_key: Set the Radius server shared type 7 encrypted key
        :param pulumi.Input[_builtins.str] secret_key_variable: Variable name
        :param pulumi.Input[_builtins.int] timeout: Configure how long to wait for replies from the Radius server
                 - Range: `1`-`1000`
                 - Default value: `5`
        :param pulumi.Input[_builtins.str] timeout_variable: Variable name
        """
        if acct_port is not None:
            pulumi.set(__self__, "acct_port", acct_port)
        if acct_port_variable is not None:
            pulumi.set(__self__, "acct_port_variable", acct_port_variable)
        if address is not None:
            pulumi.set(__self__, "address", address)
        if auth_port is not None:
            pulumi.set(__self__, "auth_port", auth_port)
        if auth_port_variable is not None:
            pulumi.set(__self__, "auth_port_variable", auth_port_variable)
        if key is not None:
            pulumi.set(__self__, "key", key)
        if key_enum is not None:
            pulumi.set(__self__, "key_enum", key_enum)
        if key_type is not None:
            pulumi.set(__self__, "key_type", key_type)
        if key_type_variable is not None:
            pulumi.set(__self__, "key_type_variable", key_type_variable)
        if retransmit is not None:
            pulumi.set(__self__, "retransmit", retransmit)
        if retransmit_variable is not None:
            pulumi.set(__self__, "retransmit_variable", retransmit_variable)
        if secret_key is not None:
            pulumi.set(__self__, "secret_key", secret_key)
        if secret_key_variable is not None:
            pulumi.set(__self__, "secret_key_variable", secret_key_variable)
        if timeout is not None:
            pulumi.set(__self__, "timeout", timeout)
        if timeout_variable is not None:
            pulumi.set(__self__, "timeout_variable", timeout_variable)

    @_builtins.property
    @pulumi.getter(name="acctPort")
    def acct_port(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        Set Accounting port to use to connect to Radius server
          - Range: `1`-`65534`
          - Default value: `1813`
        """
        return pulumi.get(self, "acct_port")

    @acct_port.setter
    def acct_port(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "acct_port", value)

    @_builtins.property
    @pulumi.getter(name="acctPortVariable")
    def acct_port_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "acct_port_variable")

    @acct_port_variable.setter
    def acct_port_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "acct_port_variable", value)

    @_builtins.property
    @pulumi.getter
    def address(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Set IP address of Radius server
        """
        return pulumi.get(self, "address")

    @address.setter
    def address(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "address", value)

    @_builtins.property
    @pulumi.getter(name="authPort")
    def auth_port(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        Set Authentication port to use to connect to Radius server
          - Range: `1`-`65534`
          - Default value: `1812`
        """
        return pulumi.get(self, "auth_port")

    @auth_port.setter
    def auth_port(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "auth_port", value)

    @_builtins.property
    @pulumi.getter(name="authPortVariable")
    def auth_port_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "auth_port_variable")

    @auth_port_variable.setter
    def auth_port_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "auth_port_variable", value)

    @_builtins.property
    @pulumi.getter
    def key(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Set the Radius server shared key
        """
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "key", value)

    @_builtins.property
    @pulumi.getter(name="keyEnum")
    def key_enum(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Type of encyption. To be used for type 6
          - Choices: `6`, `7`
        """
        return pulumi.get(self, "key_enum")

    @key_enum.setter
    def key_enum(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "key_enum", value)

    @_builtins.property
    @pulumi.getter(name="keyType")
    def key_type(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        key type
          - Choices: `key`, `pac`
          - Default value: `key`
        """
        return pulumi.get(self, "key_type")

    @key_type.setter
    def key_type(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "key_type", value)

    @_builtins.property
    @pulumi.getter(name="keyTypeVariable")
    def key_type_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "key_type_variable")

    @key_type_variable.setter
    def key_type_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "key_type_variable", value)

    @_builtins.property
    @pulumi.getter
    def retransmit(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        Configure how many times to contact this Radius server
          - Range: `1`-`100`
          - Default value: `3`
        """
        return pulumi.get(self, "retransmit")

    @retransmit.setter
    def retransmit(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "retransmit", value)

    @_builtins.property
    @pulumi.getter(name="retransmitVariable")
    def retransmit_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "retransmit_variable")

    @retransmit_variable.setter
    def retransmit_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "retransmit_variable", value)

    @_builtins.property
    @pulumi.getter(name="secretKey")
    def secret_key(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Set the Radius server shared type 7 encrypted key
        """
        return pulumi.get(self, "secret_key")

    @secret_key.setter
    def secret_key(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "secret_key", value)

    @_builtins.property
    @pulumi.getter(name="secretKeyVariable")
    def secret_key_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "secret_key_variable")

    @secret_key_variable.setter
    def secret_key_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "secret_key_variable", value)

    @_builtins.property
    @pulumi.getter
    def timeout(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        Configure how long to wait for replies from the Radius server
          - Range: `1`-`1000`
          - Default value: `5`
        """
        return pulumi.get(self, "timeout")

    @timeout.setter
    def timeout(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "timeout", value)

    @_builtins.property
    @pulumi.getter(name="timeoutVariable")
    def timeout_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "timeout_variable")

    @timeout_variable.setter
    def timeout_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "timeout_variable", value)


if not MYPY:
    class SystemAaaFeatureTacacsGroupArgsDict(TypedDict):
        group_name: NotRequired[pulumi.Input[_builtins.str]]
        """
        Set TACACS server Group Name
        """
        servers: NotRequired[pulumi.Input[Sequence[pulumi.Input['SystemAaaFeatureTacacsGroupServerArgsDict']]]]
        """
        Configure the TACACS server
        """
        source_interface: NotRequired[pulumi.Input[_builtins.str]]
        """
        Set interface to use to reach TACACS server
        """
        source_interface_variable: NotRequired[pulumi.Input[_builtins.str]]
        """
        Variable name
        """
        vpn: NotRequired[pulumi.Input[_builtins.int]]
        """
        Set VPN in which TACACS server is located
          - Range: `0`-`65530`
          - Default value: `0`
        """
elif False:
    SystemAaaFeatureTacacsGroupArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class SystemAaaFeatureTacacsGroupArgs:
    def __init__(__self__, *,
                 group_name: Optional[pulumi.Input[_builtins.str]] = None,
                 servers: Optional[pulumi.Input[Sequence[pulumi.Input['SystemAaaFeatureTacacsGroupServerArgs']]]] = None,
                 source_interface: Optional[pulumi.Input[_builtins.str]] = None,
                 source_interface_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 vpn: Optional[pulumi.Input[_builtins.int]] = None):
        """
        :param pulumi.Input[_builtins.str] group_name: Set TACACS server Group Name
        :param pulumi.Input[Sequence[pulumi.Input['SystemAaaFeatureTacacsGroupServerArgs']]] servers: Configure the TACACS server
        :param pulumi.Input[_builtins.str] source_interface: Set interface to use to reach TACACS server
        :param pulumi.Input[_builtins.str] source_interface_variable: Variable name
        :param pulumi.Input[_builtins.int] vpn: Set VPN in which TACACS server is located
                 - Range: `0`-`65530`
                 - Default value: `0`
        """
        if group_name is not None:
            pulumi.set(__self__, "group_name", group_name)
        if servers is not None:
            pulumi.set(__self__, "servers", servers)
        if source_interface is not None:
            pulumi.set(__self__, "source_interface", source_interface)
        if source_interface_variable is not None:
            pulumi.set(__self__, "source_interface_variable", source_interface_variable)
        if vpn is not None:
            pulumi.set(__self__, "vpn", vpn)

    @_builtins.property
    @pulumi.getter(name="groupName")
    def group_name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Set TACACS server Group Name
        """
        return pulumi.get(self, "group_name")

    @group_name.setter
    def group_name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "group_name", value)

    @_builtins.property
    @pulumi.getter
    def servers(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['SystemAaaFeatureTacacsGroupServerArgs']]]]:
        """
        Configure the TACACS server
        """
        return pulumi.get(self, "servers")

    @servers.setter
    def servers(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['SystemAaaFeatureTacacsGroupServerArgs']]]]):
        pulumi.set(self, "servers", value)

    @_builtins.property
    @pulumi.getter(name="sourceInterface")
    def source_interface(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Set interface to use to reach TACACS server
        """
        return pulumi.get(self, "source_interface")

    @source_interface.setter
    def source_interface(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "source_interface", value)

    @_builtins.property
    @pulumi.getter(name="sourceInterfaceVariable")
    def source_interface_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "source_interface_variable")

    @source_interface_variable.setter
    def source_interface_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "source_interface_variable", value)

    @_builtins.property
    @pulumi.getter
    def vpn(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        Set VPN in which TACACS server is located
          - Range: `0`-`65530`
          - Default value: `0`
        """
        return pulumi.get(self, "vpn")

    @vpn.setter
    def vpn(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "vpn", value)


if not MYPY:
    class SystemAaaFeatureTacacsGroupServerArgsDict(TypedDict):
        address: NotRequired[pulumi.Input[_builtins.str]]
        """
        Set IP address of TACACS server
        """
        key: NotRequired[pulumi.Input[_builtins.str]]
        """
        Set the TACACS server shared key
        """
        key_enum: NotRequired[pulumi.Input[_builtins.str]]
        """
        Type of encyption. To be used for type 6
          - Choices: `6`, `7`
        """
        port: NotRequired[pulumi.Input[_builtins.int]]
        """
        TACACS Port
          - Range: `1`-`65535`
          - Default value: `49`
        """
        port_variable: NotRequired[pulumi.Input[_builtins.str]]
        """
        Variable name
        """
        secret_key: NotRequired[pulumi.Input[_builtins.str]]
        """
        Set the TACACS server shared type 7 encrypted key
        """
        secret_key_variable: NotRequired[pulumi.Input[_builtins.str]]
        """
        Variable name
        """
        timeout: NotRequired[pulumi.Input[_builtins.int]]
        """
        Configure how long to wait for replies from the TACACS server
          - Range: `1`-`1000`
          - Default value: `5`
        """
        timeout_variable: NotRequired[pulumi.Input[_builtins.str]]
        """
        Variable name
        """
elif False:
    SystemAaaFeatureTacacsGroupServerArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class SystemAaaFeatureTacacsGroupServerArgs:
    def __init__(__self__, *,
                 address: Optional[pulumi.Input[_builtins.str]] = None,
                 key: Optional[pulumi.Input[_builtins.str]] = None,
                 key_enum: Optional[pulumi.Input[_builtins.str]] = None,
                 port: Optional[pulumi.Input[_builtins.int]] = None,
                 port_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 secret_key: Optional[pulumi.Input[_builtins.str]] = None,
                 secret_key_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 timeout: Optional[pulumi.Input[_builtins.int]] = None,
                 timeout_variable: Optional[pulumi.Input[_builtins.str]] = None):
        """
        :param pulumi.Input[_builtins.str] address: Set IP address of TACACS server
        :param pulumi.Input[_builtins.str] key: Set the TACACS server shared key
        :param pulumi.Input[_builtins.str] key_enum: Type of encyption. To be used for type 6
                 - Choices: `6`, `7`
        :param pulumi.Input[_builtins.int] port: TACACS Port
                 - Range: `1`-`65535`
                 - Default value: `49`
        :param pulumi.Input[_builtins.str] port_variable: Variable name
        :param pulumi.Input[_builtins.str] secret_key: Set the TACACS server shared type 7 encrypted key
        :param pulumi.Input[_builtins.str] secret_key_variable: Variable name
        :param pulumi.Input[_builtins.int] timeout: Configure how long to wait for replies from the TACACS server
                 - Range: `1`-`1000`
                 - Default value: `5`
        :param pulumi.Input[_builtins.str] timeout_variable: Variable name
        """
        if address is not None:
            pulumi.set(__self__, "address", address)
        if key is not None:
            pulumi.set(__self__, "key", key)
        if key_enum is not None:
            pulumi.set(__self__, "key_enum", key_enum)
        if port is not None:
            pulumi.set(__self__, "port", port)
        if port_variable is not None:
            pulumi.set(__self__, "port_variable", port_variable)
        if secret_key is not None:
            pulumi.set(__self__, "secret_key", secret_key)
        if secret_key_variable is not None:
            pulumi.set(__self__, "secret_key_variable", secret_key_variable)
        if timeout is not None:
            pulumi.set(__self__, "timeout", timeout)
        if timeout_variable is not None:
            pulumi.set(__self__, "timeout_variable", timeout_variable)

    @_builtins.property
    @pulumi.getter
    def address(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Set IP address of TACACS server
        """
        return pulumi.get(self, "address")

    @address.setter
    def address(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "address", value)

    @_builtins.property
    @pulumi.getter
    def key(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Set the TACACS server shared key
        """
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "key", value)

    @_builtins.property
    @pulumi.getter(name="keyEnum")
    def key_enum(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Type of encyption. To be used for type 6
          - Choices: `6`, `7`
        """
        return pulumi.get(self, "key_enum")

    @key_enum.setter
    def key_enum(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "key_enum", value)

    @_builtins.property
    @pulumi.getter
    def port(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        TACACS Port
          - Range: `1`-`65535`
          - Default value: `49`
        """
        return pulumi.get(self, "port")

    @port.setter
    def port(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "port", value)

    @_builtins.property
    @pulumi.getter(name="portVariable")
    def port_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "port_variable")

    @port_variable.setter
    def port_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "port_variable", value)

    @_builtins.property
    @pulumi.getter(name="secretKey")
    def secret_key(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Set the TACACS server shared type 7 encrypted key
        """
        return pulumi.get(self, "secret_key")

    @secret_key.setter
    def secret_key(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "secret_key", value)

    @_builtins.property
    @pulumi.getter(name="secretKeyVariable")
    def secret_key_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "secret_key_variable")

    @secret_key_variable.setter
    def secret_key_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "secret_key_variable", value)

    @_builtins.property
    @pulumi.getter
    def timeout(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        Configure how long to wait for replies from the TACACS server
          - Range: `1`-`1000`
          - Default value: `5`
        """
        return pulumi.get(self, "timeout")

    @timeout.setter
    def timeout(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "timeout", value)

    @_builtins.property
    @pulumi.getter(name="timeoutVariable")
    def timeout_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "timeout_variable")

    @timeout_variable.setter
    def timeout_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "timeout_variable", value)


if not MYPY:
    class SystemAaaFeatureUserArgsDict(TypedDict):
        name: NotRequired[pulumi.Input[_builtins.str]]
        """
        Set the username
        """
        name_variable: NotRequired[pulumi.Input[_builtins.str]]
        """
        Variable name
        """
        password: NotRequired[pulumi.Input[_builtins.str]]
        """
        Set the user password
        """
        password_variable: NotRequired[pulumi.Input[_builtins.str]]
        """
        Variable name
        """
        privilege: NotRequired[pulumi.Input[_builtins.str]]
        """
        Set Privilege Level for this user
          - Choices: `1`, `15`
          - Default value: `15`
        """
        privilege_variable: NotRequired[pulumi.Input[_builtins.str]]
        """
        Variable name
        """
        public_keys: NotRequired[pulumi.Input[Sequence[pulumi.Input['SystemAaaFeatureUserPublicKeyArgsDict']]]]
        """
        List of RSA public-keys per user
        """
elif False:
    SystemAaaFeatureUserArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class SystemAaaFeatureUserArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 name_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 password: Optional[pulumi.Input[_builtins.str]] = None,
                 password_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 privilege: Optional[pulumi.Input[_builtins.str]] = None,
                 privilege_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 public_keys: Optional[pulumi.Input[Sequence[pulumi.Input['SystemAaaFeatureUserPublicKeyArgs']]]] = None):
        """
        :param pulumi.Input[_builtins.str] name: Set the username
        :param pulumi.Input[_builtins.str] name_variable: Variable name
        :param pulumi.Input[_builtins.str] password: Set the user password
        :param pulumi.Input[_builtins.str] password_variable: Variable name
        :param pulumi.Input[_builtins.str] privilege: Set Privilege Level for this user
                 - Choices: `1`, `15`
                 - Default value: `15`
        :param pulumi.Input[_builtins.str] privilege_variable: Variable name
        :param pulumi.Input[Sequence[pulumi.Input['SystemAaaFeatureUserPublicKeyArgs']]] public_keys: List of RSA public-keys per user
        """
        if name is not None:
            pulumi.set(__self__, "name", name)
        if name_variable is not None:
            pulumi.set(__self__, "name_variable", name_variable)
        if password is not None:
            pulumi.set(__self__, "password", password)
        if password_variable is not None:
            pulumi.set(__self__, "password_variable", password_variable)
        if privilege is not None:
            pulumi.set(__self__, "privilege", privilege)
        if privilege_variable is not None:
            pulumi.set(__self__, "privilege_variable", privilege_variable)
        if public_keys is not None:
            pulumi.set(__self__, "public_keys", public_keys)

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Set the username
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "name", value)

    @_builtins.property
    @pulumi.getter(name="nameVariable")
    def name_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "name_variable")

    @name_variable.setter
    def name_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "name_variable", value)

    @_builtins.property
    @pulumi.getter
    def password(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Set the user password
        """
        return pulumi.get(self, "password")

    @password.setter
    def password(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "password", value)

    @_builtins.property
    @pulumi.getter(name="passwordVariable")
    def password_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "password_variable")

    @password_variable.setter
    def password_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "password_variable", value)

    @_builtins.property
    @pulumi.getter
    def privilege(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Set Privilege Level for this user
          - Choices: `1`, `15`
          - Default value: `15`
        """
        return pulumi.get(self, "privilege")

    @privilege.setter
    def privilege(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "privilege", value)

    @_builtins.property
    @pulumi.getter(name="privilegeVariable")
    def privilege_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "privilege_variable")

    @privilege_variable.setter
    def privilege_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "privilege_variable", value)

    @_builtins.property
    @pulumi.getter(name="publicKeys")
    def public_keys(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['SystemAaaFeatureUserPublicKeyArgs']]]]:
        """
        List of RSA public-keys per user
        """
        return pulumi.get(self, "public_keys")

    @public_keys.setter
    def public_keys(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['SystemAaaFeatureUserPublicKeyArgs']]]]):
        pulumi.set(self, "public_keys", value)


if not MYPY:
    class SystemAaaFeatureUserPublicKeyArgsDict(TypedDict):
        key_string: NotRequired[pulumi.Input[_builtins.str]]
        """
        Set the RSA key string
        """
        key_type: NotRequired[pulumi.Input[_builtins.str]]
        """
        Only RSA is supported
        """
        key_type_variable: NotRequired[pulumi.Input[_builtins.str]]
        """
        Variable name
        """
elif False:
    SystemAaaFeatureUserPublicKeyArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class SystemAaaFeatureUserPublicKeyArgs:
    def __init__(__self__, *,
                 key_string: Optional[pulumi.Input[_builtins.str]] = None,
                 key_type: Optional[pulumi.Input[_builtins.str]] = None,
                 key_type_variable: Optional[pulumi.Input[_builtins.str]] = None):
        """
        :param pulumi.Input[_builtins.str] key_string: Set the RSA key string
        :param pulumi.Input[_builtins.str] key_type: Only RSA is supported
        :param pulumi.Input[_builtins.str] key_type_variable: Variable name
        """
        if key_string is not None:
            pulumi.set(__self__, "key_string", key_string)
        if key_type is not None:
            pulumi.set(__self__, "key_type", key_type)
        if key_type_variable is not None:
            pulumi.set(__self__, "key_type_variable", key_type_variable)

    @_builtins.property
    @pulumi.getter(name="keyString")
    def key_string(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Set the RSA key string
        """
        return pulumi.get(self, "key_string")

    @key_string.setter
    def key_string(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "key_string", value)

    @_builtins.property
    @pulumi.getter(name="keyType")
    def key_type(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Only RSA is supported
        """
        return pulumi.get(self, "key_type")

    @key_type.setter
    def key_type(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "key_type", value)

    @_builtins.property
    @pulumi.getter(name="keyTypeVariable")
    def key_type_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "key_type_variable")

    @key_type_variable.setter
    def key_type_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "key_type_variable", value)


if not MYPY:
    class SystemBasicFeatureAffinityPerVrfArgsDict(TypedDict):
        affinity_group_number: NotRequired[pulumi.Input[_builtins.int]]
        """
        Affinity Group Number
          - Range: `1`-`63`
        """
        affinity_group_number_variable: NotRequired[pulumi.Input[_builtins.str]]
        """
        Variable name
        """
        vrf_range: NotRequired[pulumi.Input[_builtins.str]]
        """
        Range of VRFs
        """
        vrf_range_variable: NotRequired[pulumi.Input[_builtins.str]]
        """
        Variable name
        """
elif False:
    SystemBasicFeatureAffinityPerVrfArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class SystemBasicFeatureAffinityPerVrfArgs:
    def __init__(__self__, *,
                 affinity_group_number: Optional[pulumi.Input[_builtins.int]] = None,
                 affinity_group_number_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 vrf_range: Optional[pulumi.Input[_builtins.str]] = None,
                 vrf_range_variable: Optional[pulumi.Input[_builtins.str]] = None):
        """
        :param pulumi.Input[_builtins.int] affinity_group_number: Affinity Group Number
                 - Range: `1`-`63`
        :param pulumi.Input[_builtins.str] affinity_group_number_variable: Variable name
        :param pulumi.Input[_builtins.str] vrf_range: Range of VRFs
        :param pulumi.Input[_builtins.str] vrf_range_variable: Variable name
        """
        if affinity_group_number is not None:
            pulumi.set(__self__, "affinity_group_number", affinity_group_number)
        if affinity_group_number_variable is not None:
            pulumi.set(__self__, "affinity_group_number_variable", affinity_group_number_variable)
        if vrf_range is not None:
            pulumi.set(__self__, "vrf_range", vrf_range)
        if vrf_range_variable is not None:
            pulumi.set(__self__, "vrf_range_variable", vrf_range_variable)

    @_builtins.property
    @pulumi.getter(name="affinityGroupNumber")
    def affinity_group_number(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        Affinity Group Number
          - Range: `1`-`63`
        """
        return pulumi.get(self, "affinity_group_number")

    @affinity_group_number.setter
    def affinity_group_number(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "affinity_group_number", value)

    @_builtins.property
    @pulumi.getter(name="affinityGroupNumberVariable")
    def affinity_group_number_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "affinity_group_number_variable")

    @affinity_group_number_variable.setter
    def affinity_group_number_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "affinity_group_number_variable", value)

    @_builtins.property
    @pulumi.getter(name="vrfRange")
    def vrf_range(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Range of VRFs
        """
        return pulumi.get(self, "vrf_range")

    @vrf_range.setter
    def vrf_range(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "vrf_range", value)

    @_builtins.property
    @pulumi.getter(name="vrfRangeVariable")
    def vrf_range_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "vrf_range_variable")

    @vrf_range_variable.setter
    def vrf_range_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "vrf_range_variable", value)


if not MYPY:
    class SystemBasicFeatureGpsSmsMobileNumberArgsDict(TypedDict):
        number: NotRequired[pulumi.Input[_builtins.str]]
        """
        Mobile number, ex: 1231234414
        """
        number_variable: NotRequired[pulumi.Input[_builtins.str]]
        """
        Variable name
        """
elif False:
    SystemBasicFeatureGpsSmsMobileNumberArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class SystemBasicFeatureGpsSmsMobileNumberArgs:
    def __init__(__self__, *,
                 number: Optional[pulumi.Input[_builtins.str]] = None,
                 number_variable: Optional[pulumi.Input[_builtins.str]] = None):
        """
        :param pulumi.Input[_builtins.str] number: Mobile number, ex: 1231234414
        :param pulumi.Input[_builtins.str] number_variable: Variable name
        """
        if number is not None:
            pulumi.set(__self__, "number", number)
        if number_variable is not None:
            pulumi.set(__self__, "number_variable", number_variable)

    @_builtins.property
    @pulumi.getter
    def number(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Mobile number, ex: 1231234414
        """
        return pulumi.get(self, "number")

    @number.setter
    def number(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "number", value)

    @_builtins.property
    @pulumi.getter(name="numberVariable")
    def number_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "number_variable")

    @number_variable.setter
    def number_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "number_variable", value)


if not MYPY:
    class SystemBfdFeatureColorArgsDict(TypedDict):
        color: NotRequired[pulumi.Input[_builtins.str]]
        """
        Color that identifies the WAN transport tunnel
          - Choices: `default`, `mpls`, `metro-ethernet`, `biz-internet`, `public-internet`, `lte`, `3g`, `red`, `green`, `blue`, `gold`, `silver`, `bronze`, `custom1`, `custom2`, `custom3`, `private1`, `private2`, `private3`, `private4`, `private5`, `private6`
        """
        color_variable: NotRequired[pulumi.Input[_builtins.str]]
        """
        Variable name
        """
        dscp: NotRequired[pulumi.Input[_builtins.int]]
        """
        BFD Default DSCP value for tloc color
          - Range: `0`-`63`
          - Default value: `48`
        """
        dscp_variable: NotRequired[pulumi.Input[_builtins.str]]
        """
        Variable name
        """
        hello_interval: NotRequired[pulumi.Input[_builtins.int]]
        """
        Hello Interval (milliseconds)
          - Range: `100`-`300000`
          - Default value: `1000`
        """
        hello_interval_variable: NotRequired[pulumi.Input[_builtins.str]]
        """
        Variable name
        """
        multiplier: NotRequired[pulumi.Input[_builtins.int]]
        """
        Multiplier
          - Range: `1`-`60`
          - Default value: `7`
        """
        multiplier_variable: NotRequired[pulumi.Input[_builtins.str]]
        """
        Variable name
        """
        pmtu_discovery: NotRequired[pulumi.Input[_builtins.bool]]
        """
        Path MTU Discovery
          - Default value: `true`
        """
        pmtu_discovery_variable: NotRequired[pulumi.Input[_builtins.str]]
        """
        Variable name
        """
elif False:
    SystemBfdFeatureColorArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class SystemBfdFeatureColorArgs:
    def __init__(__self__, *,
                 color: Optional[pulumi.Input[_builtins.str]] = None,
                 color_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 dscp: Optional[pulumi.Input[_builtins.int]] = None,
                 dscp_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 hello_interval: Optional[pulumi.Input[_builtins.int]] = None,
                 hello_interval_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 multiplier: Optional[pulumi.Input[_builtins.int]] = None,
                 multiplier_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 pmtu_discovery: Optional[pulumi.Input[_builtins.bool]] = None,
                 pmtu_discovery_variable: Optional[pulumi.Input[_builtins.str]] = None):
        """
        :param pulumi.Input[_builtins.str] color: Color that identifies the WAN transport tunnel
                 - Choices: `default`, `mpls`, `metro-ethernet`, `biz-internet`, `public-internet`, `lte`, `3g`, `red`, `green`, `blue`, `gold`, `silver`, `bronze`, `custom1`, `custom2`, `custom3`, `private1`, `private2`, `private3`, `private4`, `private5`, `private6`
        :param pulumi.Input[_builtins.str] color_variable: Variable name
        :param pulumi.Input[_builtins.int] dscp: BFD Default DSCP value for tloc color
                 - Range: `0`-`63`
                 - Default value: `48`
        :param pulumi.Input[_builtins.str] dscp_variable: Variable name
        :param pulumi.Input[_builtins.int] hello_interval: Hello Interval (milliseconds)
                 - Range: `100`-`300000`
                 - Default value: `1000`
        :param pulumi.Input[_builtins.str] hello_interval_variable: Variable name
        :param pulumi.Input[_builtins.int] multiplier: Multiplier
                 - Range: `1`-`60`
                 - Default value: `7`
        :param pulumi.Input[_builtins.str] multiplier_variable: Variable name
        :param pulumi.Input[_builtins.bool] pmtu_discovery: Path MTU Discovery
                 - Default value: `true`
        :param pulumi.Input[_builtins.str] pmtu_discovery_variable: Variable name
        """
        if color is not None:
            pulumi.set(__self__, "color", color)
        if color_variable is not None:
            pulumi.set(__self__, "color_variable", color_variable)
        if dscp is not None:
            pulumi.set(__self__, "dscp", dscp)
        if dscp_variable is not None:
            pulumi.set(__self__, "dscp_variable", dscp_variable)
        if hello_interval is not None:
            pulumi.set(__self__, "hello_interval", hello_interval)
        if hello_interval_variable is not None:
            pulumi.set(__self__, "hello_interval_variable", hello_interval_variable)
        if multiplier is not None:
            pulumi.set(__self__, "multiplier", multiplier)
        if multiplier_variable is not None:
            pulumi.set(__self__, "multiplier_variable", multiplier_variable)
        if pmtu_discovery is not None:
            pulumi.set(__self__, "pmtu_discovery", pmtu_discovery)
        if pmtu_discovery_variable is not None:
            pulumi.set(__self__, "pmtu_discovery_variable", pmtu_discovery_variable)

    @_builtins.property
    @pulumi.getter
    def color(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Color that identifies the WAN transport tunnel
          - Choices: `default`, `mpls`, `metro-ethernet`, `biz-internet`, `public-internet`, `lte`, `3g`, `red`, `green`, `blue`, `gold`, `silver`, `bronze`, `custom1`, `custom2`, `custom3`, `private1`, `private2`, `private3`, `private4`, `private5`, `private6`
        """
        return pulumi.get(self, "color")

    @color.setter
    def color(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "color", value)

    @_builtins.property
    @pulumi.getter(name="colorVariable")
    def color_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "color_variable")

    @color_variable.setter
    def color_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "color_variable", value)

    @_builtins.property
    @pulumi.getter
    def dscp(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        BFD Default DSCP value for tloc color
          - Range: `0`-`63`
          - Default value: `48`
        """
        return pulumi.get(self, "dscp")

    @dscp.setter
    def dscp(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "dscp", value)

    @_builtins.property
    @pulumi.getter(name="dscpVariable")
    def dscp_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "dscp_variable")

    @dscp_variable.setter
    def dscp_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "dscp_variable", value)

    @_builtins.property
    @pulumi.getter(name="helloInterval")
    def hello_interval(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        Hello Interval (milliseconds)
          - Range: `100`-`300000`
          - Default value: `1000`
        """
        return pulumi.get(self, "hello_interval")

    @hello_interval.setter
    def hello_interval(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "hello_interval", value)

    @_builtins.property
    @pulumi.getter(name="helloIntervalVariable")
    def hello_interval_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "hello_interval_variable")

    @hello_interval_variable.setter
    def hello_interval_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "hello_interval_variable", value)

    @_builtins.property
    @pulumi.getter
    def multiplier(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        Multiplier
          - Range: `1`-`60`
          - Default value: `7`
        """
        return pulumi.get(self, "multiplier")

    @multiplier.setter
    def multiplier(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "multiplier", value)

    @_builtins.property
    @pulumi.getter(name="multiplierVariable")
    def multiplier_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "multiplier_variable")

    @multiplier_variable.setter
    def multiplier_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "multiplier_variable", value)

    @_builtins.property
    @pulumi.getter(name="pmtuDiscovery")
    def pmtu_discovery(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Path MTU Discovery
          - Default value: `true`
        """
        return pulumi.get(self, "pmtu_discovery")

    @pmtu_discovery.setter
    def pmtu_discovery(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "pmtu_discovery", value)

    @_builtins.property
    @pulumi.getter(name="pmtuDiscoveryVariable")
    def pmtu_discovery_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "pmtu_discovery_variable")

    @pmtu_discovery_variable.setter
    def pmtu_discovery_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "pmtu_discovery_variable", value)


if not MYPY:
    class SystemIpv4DeviceAccessFeatureSequenceArgsDict(TypedDict):
        base_action: NotRequired[pulumi.Input[_builtins.str]]
        """
        Base Action
          - Choices: `drop`, `accept`
        """
        destination_data_prefix_list_id: NotRequired[pulumi.Input[_builtins.str]]
        destination_ip_prefix_list_variable: NotRequired[pulumi.Input[_builtins.str]]
        """
        Variable name
        """
        destination_ip_prefix_lists: NotRequired[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]
        """
        Destination Data IP Prefix List
        """
        device_access_port: NotRequired[pulumi.Input[_builtins.int]]
        """
        device access protocol
        """
        id: NotRequired[pulumi.Input[_builtins.int]]
        """
        Sequence Id
          - Range: `1`-`65536`
        """
        name: NotRequired[pulumi.Input[_builtins.str]]
        """
        Sequence Name
        """
        source_data_prefix_list_id: NotRequired[pulumi.Input[_builtins.str]]
        source_ip_prefix_list_variable: NotRequired[pulumi.Input[_builtins.str]]
        """
        Variable name
        """
        source_ip_prefix_lists: NotRequired[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]
        """
        Source Data IP Prefix List
        """
        source_ports: NotRequired[pulumi.Input[Sequence[pulumi.Input[_builtins.int]]]]
        """
        Source Port List
        """
elif False:
    SystemIpv4DeviceAccessFeatureSequenceArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class SystemIpv4DeviceAccessFeatureSequenceArgs:
    def __init__(__self__, *,
                 base_action: Optional[pulumi.Input[_builtins.str]] = None,
                 destination_data_prefix_list_id: Optional[pulumi.Input[_builtins.str]] = None,
                 destination_ip_prefix_list_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 destination_ip_prefix_lists: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 device_access_port: Optional[pulumi.Input[_builtins.int]] = None,
                 id: Optional[pulumi.Input[_builtins.int]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 source_data_prefix_list_id: Optional[pulumi.Input[_builtins.str]] = None,
                 source_ip_prefix_list_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 source_ip_prefix_lists: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 source_ports: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.int]]]] = None):
        """
        :param pulumi.Input[_builtins.str] base_action: Base Action
                 - Choices: `drop`, `accept`
        :param pulumi.Input[_builtins.str] destination_ip_prefix_list_variable: Variable name
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] destination_ip_prefix_lists: Destination Data IP Prefix List
        :param pulumi.Input[_builtins.int] device_access_port: device access protocol
        :param pulumi.Input[_builtins.int] id: Sequence Id
                 - Range: `1`-`65536`
        :param pulumi.Input[_builtins.str] name: Sequence Name
        :param pulumi.Input[_builtins.str] source_ip_prefix_list_variable: Variable name
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] source_ip_prefix_lists: Source Data IP Prefix List
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.int]]] source_ports: Source Port List
        """
        if base_action is not None:
            pulumi.set(__self__, "base_action", base_action)
        if destination_data_prefix_list_id is not None:
            pulumi.set(__self__, "destination_data_prefix_list_id", destination_data_prefix_list_id)
        if destination_ip_prefix_list_variable is not None:
            pulumi.set(__self__, "destination_ip_prefix_list_variable", destination_ip_prefix_list_variable)
        if destination_ip_prefix_lists is not None:
            pulumi.set(__self__, "destination_ip_prefix_lists", destination_ip_prefix_lists)
        if device_access_port is not None:
            pulumi.set(__self__, "device_access_port", device_access_port)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if source_data_prefix_list_id is not None:
            pulumi.set(__self__, "source_data_prefix_list_id", source_data_prefix_list_id)
        if source_ip_prefix_list_variable is not None:
            pulumi.set(__self__, "source_ip_prefix_list_variable", source_ip_prefix_list_variable)
        if source_ip_prefix_lists is not None:
            pulumi.set(__self__, "source_ip_prefix_lists", source_ip_prefix_lists)
        if source_ports is not None:
            pulumi.set(__self__, "source_ports", source_ports)

    @_builtins.property
    @pulumi.getter(name="baseAction")
    def base_action(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Base Action
          - Choices: `drop`, `accept`
        """
        return pulumi.get(self, "base_action")

    @base_action.setter
    def base_action(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "base_action", value)

    @_builtins.property
    @pulumi.getter(name="destinationDataPrefixListId")
    def destination_data_prefix_list_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "destination_data_prefix_list_id")

    @destination_data_prefix_list_id.setter
    def destination_data_prefix_list_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "destination_data_prefix_list_id", value)

    @_builtins.property
    @pulumi.getter(name="destinationIpPrefixListVariable")
    def destination_ip_prefix_list_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "destination_ip_prefix_list_variable")

    @destination_ip_prefix_list_variable.setter
    def destination_ip_prefix_list_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "destination_ip_prefix_list_variable", value)

    @_builtins.property
    @pulumi.getter(name="destinationIpPrefixLists")
    def destination_ip_prefix_lists(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]:
        """
        Destination Data IP Prefix List
        """
        return pulumi.get(self, "destination_ip_prefix_lists")

    @destination_ip_prefix_lists.setter
    def destination_ip_prefix_lists(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "destination_ip_prefix_lists", value)

    @_builtins.property
    @pulumi.getter(name="deviceAccessPort")
    def device_access_port(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        device access protocol
        """
        return pulumi.get(self, "device_access_port")

    @device_access_port.setter
    def device_access_port(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "device_access_port", value)

    @_builtins.property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        Sequence Id
          - Range: `1`-`65536`
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "id", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Sequence Name
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "name", value)

    @_builtins.property
    @pulumi.getter(name="sourceDataPrefixListId")
    def source_data_prefix_list_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "source_data_prefix_list_id")

    @source_data_prefix_list_id.setter
    def source_data_prefix_list_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "source_data_prefix_list_id", value)

    @_builtins.property
    @pulumi.getter(name="sourceIpPrefixListVariable")
    def source_ip_prefix_list_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "source_ip_prefix_list_variable")

    @source_ip_prefix_list_variable.setter
    def source_ip_prefix_list_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "source_ip_prefix_list_variable", value)

    @_builtins.property
    @pulumi.getter(name="sourceIpPrefixLists")
    def source_ip_prefix_lists(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]:
        """
        Source Data IP Prefix List
        """
        return pulumi.get(self, "source_ip_prefix_lists")

    @source_ip_prefix_lists.setter
    def source_ip_prefix_lists(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "source_ip_prefix_lists", value)

    @_builtins.property
    @pulumi.getter(name="sourcePorts")
    def source_ports(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.int]]]]:
        """
        Source Port List
        """
        return pulumi.get(self, "source_ports")

    @source_ports.setter
    def source_ports(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.int]]]]):
        pulumi.set(self, "source_ports", value)


if not MYPY:
    class SystemIpv6DeviceAccessFeatureSequenceArgsDict(TypedDict):
        base_action: NotRequired[pulumi.Input[_builtins.str]]
        """
        Base Action
          - Choices: `drop`, `accept`
          - Default value: `accept`
        """
        destination_data_prefix_list_id: NotRequired[pulumi.Input[_builtins.str]]
        destination_ip_prefix_list_variable: NotRequired[pulumi.Input[_builtins.str]]
        """
        Variable name
        """
        destination_ip_prefix_lists: NotRequired[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]
        """
        Destination Data IP Prefix List
        """
        device_access_port: NotRequired[pulumi.Input[_builtins.int]]
        """
        device access protocol
        """
        id: NotRequired[pulumi.Input[_builtins.int]]
        """
        Sequence Id
          - Range: `1`-`65536`
        """
        name: NotRequired[pulumi.Input[_builtins.str]]
        """
        Sequence Name
        """
        source_data_prefix_list_id: NotRequired[pulumi.Input[_builtins.str]]
        source_ip_prefix_list_variable: NotRequired[pulumi.Input[_builtins.str]]
        """
        Variable name
        """
        source_ip_prefix_lists: NotRequired[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]
        """
        Source Data IP Prefix List
        """
        source_ports: NotRequired[pulumi.Input[Sequence[pulumi.Input[_builtins.int]]]]
        """
        Source Port List
        """
elif False:
    SystemIpv6DeviceAccessFeatureSequenceArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class SystemIpv6DeviceAccessFeatureSequenceArgs:
    def __init__(__self__, *,
                 base_action: Optional[pulumi.Input[_builtins.str]] = None,
                 destination_data_prefix_list_id: Optional[pulumi.Input[_builtins.str]] = None,
                 destination_ip_prefix_list_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 destination_ip_prefix_lists: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 device_access_port: Optional[pulumi.Input[_builtins.int]] = None,
                 id: Optional[pulumi.Input[_builtins.int]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 source_data_prefix_list_id: Optional[pulumi.Input[_builtins.str]] = None,
                 source_ip_prefix_list_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 source_ip_prefix_lists: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 source_ports: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.int]]]] = None):
        """
        :param pulumi.Input[_builtins.str] base_action: Base Action
                 - Choices: `drop`, `accept`
                 - Default value: `accept`
        :param pulumi.Input[_builtins.str] destination_ip_prefix_list_variable: Variable name
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] destination_ip_prefix_lists: Destination Data IP Prefix List
        :param pulumi.Input[_builtins.int] device_access_port: device access protocol
        :param pulumi.Input[_builtins.int] id: Sequence Id
                 - Range: `1`-`65536`
        :param pulumi.Input[_builtins.str] name: Sequence Name
        :param pulumi.Input[_builtins.str] source_ip_prefix_list_variable: Variable name
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] source_ip_prefix_lists: Source Data IP Prefix List
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.int]]] source_ports: Source Port List
        """
        if base_action is not None:
            pulumi.set(__self__, "base_action", base_action)
        if destination_data_prefix_list_id is not None:
            pulumi.set(__self__, "destination_data_prefix_list_id", destination_data_prefix_list_id)
        if destination_ip_prefix_list_variable is not None:
            pulumi.set(__self__, "destination_ip_prefix_list_variable", destination_ip_prefix_list_variable)
        if destination_ip_prefix_lists is not None:
            pulumi.set(__self__, "destination_ip_prefix_lists", destination_ip_prefix_lists)
        if device_access_port is not None:
            pulumi.set(__self__, "device_access_port", device_access_port)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if source_data_prefix_list_id is not None:
            pulumi.set(__self__, "source_data_prefix_list_id", source_data_prefix_list_id)
        if source_ip_prefix_list_variable is not None:
            pulumi.set(__self__, "source_ip_prefix_list_variable", source_ip_prefix_list_variable)
        if source_ip_prefix_lists is not None:
            pulumi.set(__self__, "source_ip_prefix_lists", source_ip_prefix_lists)
        if source_ports is not None:
            pulumi.set(__self__, "source_ports", source_ports)

    @_builtins.property
    @pulumi.getter(name="baseAction")
    def base_action(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Base Action
          - Choices: `drop`, `accept`
          - Default value: `accept`
        """
        return pulumi.get(self, "base_action")

    @base_action.setter
    def base_action(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "base_action", value)

    @_builtins.property
    @pulumi.getter(name="destinationDataPrefixListId")
    def destination_data_prefix_list_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "destination_data_prefix_list_id")

    @destination_data_prefix_list_id.setter
    def destination_data_prefix_list_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "destination_data_prefix_list_id", value)

    @_builtins.property
    @pulumi.getter(name="destinationIpPrefixListVariable")
    def destination_ip_prefix_list_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "destination_ip_prefix_list_variable")

    @destination_ip_prefix_list_variable.setter
    def destination_ip_prefix_list_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "destination_ip_prefix_list_variable", value)

    @_builtins.property
    @pulumi.getter(name="destinationIpPrefixLists")
    def destination_ip_prefix_lists(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]:
        """
        Destination Data IP Prefix List
        """
        return pulumi.get(self, "destination_ip_prefix_lists")

    @destination_ip_prefix_lists.setter
    def destination_ip_prefix_lists(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "destination_ip_prefix_lists", value)

    @_builtins.property
    @pulumi.getter(name="deviceAccessPort")
    def device_access_port(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        device access protocol
        """
        return pulumi.get(self, "device_access_port")

    @device_access_port.setter
    def device_access_port(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "device_access_port", value)

    @_builtins.property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        Sequence Id
          - Range: `1`-`65536`
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "id", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Sequence Name
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "name", value)

    @_builtins.property
    @pulumi.getter(name="sourceDataPrefixListId")
    def source_data_prefix_list_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "source_data_prefix_list_id")

    @source_data_prefix_list_id.setter
    def source_data_prefix_list_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "source_data_prefix_list_id", value)

    @_builtins.property
    @pulumi.getter(name="sourceIpPrefixListVariable")
    def source_ip_prefix_list_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "source_ip_prefix_list_variable")

    @source_ip_prefix_list_variable.setter
    def source_ip_prefix_list_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "source_ip_prefix_list_variable", value)

    @_builtins.property
    @pulumi.getter(name="sourceIpPrefixLists")
    def source_ip_prefix_lists(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]:
        """
        Source Data IP Prefix List
        """
        return pulumi.get(self, "source_ip_prefix_lists")

    @source_ip_prefix_lists.setter
    def source_ip_prefix_lists(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "source_ip_prefix_lists", value)

    @_builtins.property
    @pulumi.getter(name="sourcePorts")
    def source_ports(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.int]]]]:
        """
        Source Port List
        """
        return pulumi.get(self, "source_ports")

    @source_ports.setter
    def source_ports(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.int]]]]):
        pulumi.set(self, "source_ports", value)


if not MYPY:
    class SystemLoggingFeatureIpv4ServerArgsDict(TypedDict):
        hostname_ip: NotRequired[pulumi.Input[_builtins.str]]
        """
        Set hostname or IPv4 address of server
        """
        hostname_ip_variable: NotRequired[pulumi.Input[_builtins.str]]
        """
        Variable name
        """
        priority: NotRequired[pulumi.Input[_builtins.str]]
        """
        Set logging level for messages logged to server
          - Choices: `informational`, `debugging`, `notice`, `warn`, `error`, `critical`, `alert`, `emergency`
          - Default value: `informational`
        """
        priority_variable: NotRequired[pulumi.Input[_builtins.str]]
        """
        Variable name
        """
        source_interface: NotRequired[pulumi.Input[_builtins.str]]
        """
        Set interface to use to reach syslog server
        """
        source_interface_variable: NotRequired[pulumi.Input[_builtins.str]]
        """
        Variable name
        """
        tls_enable: NotRequired[pulumi.Input[_builtins.bool]]
        """
        Enable TLS Profile
          - Default value: `false`
        """
        tls_enable_variable: NotRequired[pulumi.Input[_builtins.str]]
        """
        Variable name
        """
        tls_properties_custom_profile: NotRequired[pulumi.Input[_builtins.bool]]
        """
        Define custom profile
          - Default value: `false`
        """
        tls_properties_custom_profile_variable: NotRequired[pulumi.Input[_builtins.str]]
        """
        Variable name
        """
        tls_properties_profile: NotRequired[pulumi.Input[_builtins.str]]
        """
        Configure a TLS profile
        """
        tls_properties_profile_variable: NotRequired[pulumi.Input[_builtins.str]]
        """
        Variable name
        """
        vpn: NotRequired[pulumi.Input[_builtins.int]]
        """
        Set hostname or IPv4 address of server
          - Range: `0`-`65530`
          - Default value: `0`
        """
        vpn_variable: NotRequired[pulumi.Input[_builtins.str]]
        """
        Variable name
        """
elif False:
    SystemLoggingFeatureIpv4ServerArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class SystemLoggingFeatureIpv4ServerArgs:
    def __init__(__self__, *,
                 hostname_ip: Optional[pulumi.Input[_builtins.str]] = None,
                 hostname_ip_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 priority: Optional[pulumi.Input[_builtins.str]] = None,
                 priority_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 source_interface: Optional[pulumi.Input[_builtins.str]] = None,
                 source_interface_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 tls_enable: Optional[pulumi.Input[_builtins.bool]] = None,
                 tls_enable_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 tls_properties_custom_profile: Optional[pulumi.Input[_builtins.bool]] = None,
                 tls_properties_custom_profile_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 tls_properties_profile: Optional[pulumi.Input[_builtins.str]] = None,
                 tls_properties_profile_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 vpn: Optional[pulumi.Input[_builtins.int]] = None,
                 vpn_variable: Optional[pulumi.Input[_builtins.str]] = None):
        """
        :param pulumi.Input[_builtins.str] hostname_ip: Set hostname or IPv4 address of server
        :param pulumi.Input[_builtins.str] hostname_ip_variable: Variable name
        :param pulumi.Input[_builtins.str] priority: Set logging level for messages logged to server
                 - Choices: `informational`, `debugging`, `notice`, `warn`, `error`, `critical`, `alert`, `emergency`
                 - Default value: `informational`
        :param pulumi.Input[_builtins.str] priority_variable: Variable name
        :param pulumi.Input[_builtins.str] source_interface: Set interface to use to reach syslog server
        :param pulumi.Input[_builtins.str] source_interface_variable: Variable name
        :param pulumi.Input[_builtins.bool] tls_enable: Enable TLS Profile
                 - Default value: `false`
        :param pulumi.Input[_builtins.str] tls_enable_variable: Variable name
        :param pulumi.Input[_builtins.bool] tls_properties_custom_profile: Define custom profile
                 - Default value: `false`
        :param pulumi.Input[_builtins.str] tls_properties_custom_profile_variable: Variable name
        :param pulumi.Input[_builtins.str] tls_properties_profile: Configure a TLS profile
        :param pulumi.Input[_builtins.str] tls_properties_profile_variable: Variable name
        :param pulumi.Input[_builtins.int] vpn: Set hostname or IPv4 address of server
                 - Range: `0`-`65530`
                 - Default value: `0`
        :param pulumi.Input[_builtins.str] vpn_variable: Variable name
        """
        if hostname_ip is not None:
            pulumi.set(__self__, "hostname_ip", hostname_ip)
        if hostname_ip_variable is not None:
            pulumi.set(__self__, "hostname_ip_variable", hostname_ip_variable)
        if priority is not None:
            pulumi.set(__self__, "priority", priority)
        if priority_variable is not None:
            pulumi.set(__self__, "priority_variable", priority_variable)
        if source_interface is not None:
            pulumi.set(__self__, "source_interface", source_interface)
        if source_interface_variable is not None:
            pulumi.set(__self__, "source_interface_variable", source_interface_variable)
        if tls_enable is not None:
            pulumi.set(__self__, "tls_enable", tls_enable)
        if tls_enable_variable is not None:
            pulumi.set(__self__, "tls_enable_variable", tls_enable_variable)
        if tls_properties_custom_profile is not None:
            pulumi.set(__self__, "tls_properties_custom_profile", tls_properties_custom_profile)
        if tls_properties_custom_profile_variable is not None:
            pulumi.set(__self__, "tls_properties_custom_profile_variable", tls_properties_custom_profile_variable)
        if tls_properties_profile is not None:
            pulumi.set(__self__, "tls_properties_profile", tls_properties_profile)
        if tls_properties_profile_variable is not None:
            pulumi.set(__self__, "tls_properties_profile_variable", tls_properties_profile_variable)
        if vpn is not None:
            pulumi.set(__self__, "vpn", vpn)
        if vpn_variable is not None:
            pulumi.set(__self__, "vpn_variable", vpn_variable)

    @_builtins.property
    @pulumi.getter(name="hostnameIp")
    def hostname_ip(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Set hostname or IPv4 address of server
        """
        return pulumi.get(self, "hostname_ip")

    @hostname_ip.setter
    def hostname_ip(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "hostname_ip", value)

    @_builtins.property
    @pulumi.getter(name="hostnameIpVariable")
    def hostname_ip_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "hostname_ip_variable")

    @hostname_ip_variable.setter
    def hostname_ip_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "hostname_ip_variable", value)

    @_builtins.property
    @pulumi.getter
    def priority(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Set logging level for messages logged to server
          - Choices: `informational`, `debugging`, `notice`, `warn`, `error`, `critical`, `alert`, `emergency`
          - Default value: `informational`
        """
        return pulumi.get(self, "priority")

    @priority.setter
    def priority(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "priority", value)

    @_builtins.property
    @pulumi.getter(name="priorityVariable")
    def priority_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "priority_variable")

    @priority_variable.setter
    def priority_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "priority_variable", value)

    @_builtins.property
    @pulumi.getter(name="sourceInterface")
    def source_interface(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Set interface to use to reach syslog server
        """
        return pulumi.get(self, "source_interface")

    @source_interface.setter
    def source_interface(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "source_interface", value)

    @_builtins.property
    @pulumi.getter(name="sourceInterfaceVariable")
    def source_interface_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "source_interface_variable")

    @source_interface_variable.setter
    def source_interface_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "source_interface_variable", value)

    @_builtins.property
    @pulumi.getter(name="tlsEnable")
    def tls_enable(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Enable TLS Profile
          - Default value: `false`
        """
        return pulumi.get(self, "tls_enable")

    @tls_enable.setter
    def tls_enable(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "tls_enable", value)

    @_builtins.property
    @pulumi.getter(name="tlsEnableVariable")
    def tls_enable_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "tls_enable_variable")

    @tls_enable_variable.setter
    def tls_enable_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "tls_enable_variable", value)

    @_builtins.property
    @pulumi.getter(name="tlsPropertiesCustomProfile")
    def tls_properties_custom_profile(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Define custom profile
          - Default value: `false`
        """
        return pulumi.get(self, "tls_properties_custom_profile")

    @tls_properties_custom_profile.setter
    def tls_properties_custom_profile(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "tls_properties_custom_profile", value)

    @_builtins.property
    @pulumi.getter(name="tlsPropertiesCustomProfileVariable")
    def tls_properties_custom_profile_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "tls_properties_custom_profile_variable")

    @tls_properties_custom_profile_variable.setter
    def tls_properties_custom_profile_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "tls_properties_custom_profile_variable", value)

    @_builtins.property
    @pulumi.getter(name="tlsPropertiesProfile")
    def tls_properties_profile(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Configure a TLS profile
        """
        return pulumi.get(self, "tls_properties_profile")

    @tls_properties_profile.setter
    def tls_properties_profile(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "tls_properties_profile", value)

    @_builtins.property
    @pulumi.getter(name="tlsPropertiesProfileVariable")
    def tls_properties_profile_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "tls_properties_profile_variable")

    @tls_properties_profile_variable.setter
    def tls_properties_profile_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "tls_properties_profile_variable", value)

    @_builtins.property
    @pulumi.getter
    def vpn(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        Set hostname or IPv4 address of server
          - Range: `0`-`65530`
          - Default value: `0`
        """
        return pulumi.get(self, "vpn")

    @vpn.setter
    def vpn(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "vpn", value)

    @_builtins.property
    @pulumi.getter(name="vpnVariable")
    def vpn_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "vpn_variable")

    @vpn_variable.setter
    def vpn_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "vpn_variable", value)


if not MYPY:
    class SystemLoggingFeatureIpv6ServerArgsDict(TypedDict):
        hostname_ip: NotRequired[pulumi.Input[_builtins.str]]
        """
        Set IPv6 hostname or IPv6 address of server
        """
        hostname_ip_variable: NotRequired[pulumi.Input[_builtins.str]]
        """
        Variable name
        """
        priority: NotRequired[pulumi.Input[_builtins.str]]
        """
        Set logging level for messages logged to server
          - Choices: `informational`, `debugging`, `notice`, `warn`, `error`, `critical`, `alert`, `emergency`
          - Default value: `informational`
        """
        priority_variable: NotRequired[pulumi.Input[_builtins.str]]
        """
        Variable name
        """
        source_interface: NotRequired[pulumi.Input[_builtins.str]]
        """
        Set interface to use to reach syslog server
        """
        source_interface_variable: NotRequired[pulumi.Input[_builtins.str]]
        """
        Variable name
        """
        tls_enable: NotRequired[pulumi.Input[_builtins.bool]]
        """
        Enable TLS Profile
          - Default value: `false`
        """
        tls_enable_variable: NotRequired[pulumi.Input[_builtins.str]]
        """
        Variable name
        """
        tls_properties_custom_profile: NotRequired[pulumi.Input[_builtins.bool]]
        """
        Define custom profile
          - Default value: `false`
        """
        tls_properties_custom_profile_variable: NotRequired[pulumi.Input[_builtins.str]]
        """
        Variable name
        """
        tls_properties_profile: NotRequired[pulumi.Input[_builtins.str]]
        """
        Configure a TLS profile
        """
        tls_properties_profile_variable: NotRequired[pulumi.Input[_builtins.str]]
        """
        Variable name
        """
        vpn: NotRequired[pulumi.Input[_builtins.int]]
        """
        Set hostname or IPv4 address of server
          - Range: `0`-`65530`
          - Default value: `0`
        """
        vpn_variable: NotRequired[pulumi.Input[_builtins.str]]
        """
        Variable name
        """
elif False:
    SystemLoggingFeatureIpv6ServerArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class SystemLoggingFeatureIpv6ServerArgs:
    def __init__(__self__, *,
                 hostname_ip: Optional[pulumi.Input[_builtins.str]] = None,
                 hostname_ip_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 priority: Optional[pulumi.Input[_builtins.str]] = None,
                 priority_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 source_interface: Optional[pulumi.Input[_builtins.str]] = None,
                 source_interface_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 tls_enable: Optional[pulumi.Input[_builtins.bool]] = None,
                 tls_enable_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 tls_properties_custom_profile: Optional[pulumi.Input[_builtins.bool]] = None,
                 tls_properties_custom_profile_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 tls_properties_profile: Optional[pulumi.Input[_builtins.str]] = None,
                 tls_properties_profile_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 vpn: Optional[pulumi.Input[_builtins.int]] = None,
                 vpn_variable: Optional[pulumi.Input[_builtins.str]] = None):
        """
        :param pulumi.Input[_builtins.str] hostname_ip: Set IPv6 hostname or IPv6 address of server
        :param pulumi.Input[_builtins.str] hostname_ip_variable: Variable name
        :param pulumi.Input[_builtins.str] priority: Set logging level for messages logged to server
                 - Choices: `informational`, `debugging`, `notice`, `warn`, `error`, `critical`, `alert`, `emergency`
                 - Default value: `informational`
        :param pulumi.Input[_builtins.str] priority_variable: Variable name
        :param pulumi.Input[_builtins.str] source_interface: Set interface to use to reach syslog server
        :param pulumi.Input[_builtins.str] source_interface_variable: Variable name
        :param pulumi.Input[_builtins.bool] tls_enable: Enable TLS Profile
                 - Default value: `false`
        :param pulumi.Input[_builtins.str] tls_enable_variable: Variable name
        :param pulumi.Input[_builtins.bool] tls_properties_custom_profile: Define custom profile
                 - Default value: `false`
        :param pulumi.Input[_builtins.str] tls_properties_custom_profile_variable: Variable name
        :param pulumi.Input[_builtins.str] tls_properties_profile: Configure a TLS profile
        :param pulumi.Input[_builtins.str] tls_properties_profile_variable: Variable name
        :param pulumi.Input[_builtins.int] vpn: Set hostname or IPv4 address of server
                 - Range: `0`-`65530`
                 - Default value: `0`
        :param pulumi.Input[_builtins.str] vpn_variable: Variable name
        """
        if hostname_ip is not None:
            pulumi.set(__self__, "hostname_ip", hostname_ip)
        if hostname_ip_variable is not None:
            pulumi.set(__self__, "hostname_ip_variable", hostname_ip_variable)
        if priority is not None:
            pulumi.set(__self__, "priority", priority)
        if priority_variable is not None:
            pulumi.set(__self__, "priority_variable", priority_variable)
        if source_interface is not None:
            pulumi.set(__self__, "source_interface", source_interface)
        if source_interface_variable is not None:
            pulumi.set(__self__, "source_interface_variable", source_interface_variable)
        if tls_enable is not None:
            pulumi.set(__self__, "tls_enable", tls_enable)
        if tls_enable_variable is not None:
            pulumi.set(__self__, "tls_enable_variable", tls_enable_variable)
        if tls_properties_custom_profile is not None:
            pulumi.set(__self__, "tls_properties_custom_profile", tls_properties_custom_profile)
        if tls_properties_custom_profile_variable is not None:
            pulumi.set(__self__, "tls_properties_custom_profile_variable", tls_properties_custom_profile_variable)
        if tls_properties_profile is not None:
            pulumi.set(__self__, "tls_properties_profile", tls_properties_profile)
        if tls_properties_profile_variable is not None:
            pulumi.set(__self__, "tls_properties_profile_variable", tls_properties_profile_variable)
        if vpn is not None:
            pulumi.set(__self__, "vpn", vpn)
        if vpn_variable is not None:
            pulumi.set(__self__, "vpn_variable", vpn_variable)

    @_builtins.property
    @pulumi.getter(name="hostnameIp")
    def hostname_ip(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Set IPv6 hostname or IPv6 address of server
        """
        return pulumi.get(self, "hostname_ip")

    @hostname_ip.setter
    def hostname_ip(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "hostname_ip", value)

    @_builtins.property
    @pulumi.getter(name="hostnameIpVariable")
    def hostname_ip_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "hostname_ip_variable")

    @hostname_ip_variable.setter
    def hostname_ip_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "hostname_ip_variable", value)

    @_builtins.property
    @pulumi.getter
    def priority(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Set logging level for messages logged to server
          - Choices: `informational`, `debugging`, `notice`, `warn`, `error`, `critical`, `alert`, `emergency`
          - Default value: `informational`
        """
        return pulumi.get(self, "priority")

    @priority.setter
    def priority(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "priority", value)

    @_builtins.property
    @pulumi.getter(name="priorityVariable")
    def priority_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "priority_variable")

    @priority_variable.setter
    def priority_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "priority_variable", value)

    @_builtins.property
    @pulumi.getter(name="sourceInterface")
    def source_interface(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Set interface to use to reach syslog server
        """
        return pulumi.get(self, "source_interface")

    @source_interface.setter
    def source_interface(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "source_interface", value)

    @_builtins.property
    @pulumi.getter(name="sourceInterfaceVariable")
    def source_interface_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "source_interface_variable")

    @source_interface_variable.setter
    def source_interface_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "source_interface_variable", value)

    @_builtins.property
    @pulumi.getter(name="tlsEnable")
    def tls_enable(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Enable TLS Profile
          - Default value: `false`
        """
        return pulumi.get(self, "tls_enable")

    @tls_enable.setter
    def tls_enable(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "tls_enable", value)

    @_builtins.property
    @pulumi.getter(name="tlsEnableVariable")
    def tls_enable_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "tls_enable_variable")

    @tls_enable_variable.setter
    def tls_enable_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "tls_enable_variable", value)

    @_builtins.property
    @pulumi.getter(name="tlsPropertiesCustomProfile")
    def tls_properties_custom_profile(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Define custom profile
          - Default value: `false`
        """
        return pulumi.get(self, "tls_properties_custom_profile")

    @tls_properties_custom_profile.setter
    def tls_properties_custom_profile(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "tls_properties_custom_profile", value)

    @_builtins.property
    @pulumi.getter(name="tlsPropertiesCustomProfileVariable")
    def tls_properties_custom_profile_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "tls_properties_custom_profile_variable")

    @tls_properties_custom_profile_variable.setter
    def tls_properties_custom_profile_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "tls_properties_custom_profile_variable", value)

    @_builtins.property
    @pulumi.getter(name="tlsPropertiesProfile")
    def tls_properties_profile(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Configure a TLS profile
        """
        return pulumi.get(self, "tls_properties_profile")

    @tls_properties_profile.setter
    def tls_properties_profile(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "tls_properties_profile", value)

    @_builtins.property
    @pulumi.getter(name="tlsPropertiesProfileVariable")
    def tls_properties_profile_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "tls_properties_profile_variable")

    @tls_properties_profile_variable.setter
    def tls_properties_profile_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "tls_properties_profile_variable", value)

    @_builtins.property
    @pulumi.getter
    def vpn(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        Set hostname or IPv4 address of server
          - Range: `0`-`65530`
          - Default value: `0`
        """
        return pulumi.get(self, "vpn")

    @vpn.setter
    def vpn(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "vpn", value)

    @_builtins.property
    @pulumi.getter(name="vpnVariable")
    def vpn_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "vpn_variable")

    @vpn_variable.setter
    def vpn_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "vpn_variable", value)


if not MYPY:
    class SystemLoggingFeatureTlsProfileArgsDict(TypedDict):
        cipher_suites: NotRequired[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]
        """
        Syslog secure server ciphersuites
        """
        cipher_suites_variable: NotRequired[pulumi.Input[_builtins.str]]
        """
        Variable name
        """
        profile: NotRequired[pulumi.Input[_builtins.str]]
        """
        Specify the name of the TLS profile
        """
        profile_variable: NotRequired[pulumi.Input[_builtins.str]]
        """
        Variable name
        """
        tls_version: NotRequired[pulumi.Input[_builtins.str]]
        """
        TLS Version
          - Choices: `TLSv1.1`, `TLSv1.2`
          - Default value: `TLSv1.1`
        """
        tls_version_variable: NotRequired[pulumi.Input[_builtins.str]]
        """
        Variable name
        """
elif False:
    SystemLoggingFeatureTlsProfileArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class SystemLoggingFeatureTlsProfileArgs:
    def __init__(__self__, *,
                 cipher_suites: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 cipher_suites_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 profile: Optional[pulumi.Input[_builtins.str]] = None,
                 profile_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 tls_version: Optional[pulumi.Input[_builtins.str]] = None,
                 tls_version_variable: Optional[pulumi.Input[_builtins.str]] = None):
        """
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] cipher_suites: Syslog secure server ciphersuites
        :param pulumi.Input[_builtins.str] cipher_suites_variable: Variable name
        :param pulumi.Input[_builtins.str] profile: Specify the name of the TLS profile
        :param pulumi.Input[_builtins.str] profile_variable: Variable name
        :param pulumi.Input[_builtins.str] tls_version: TLS Version
                 - Choices: `TLSv1.1`, `TLSv1.2`
                 - Default value: `TLSv1.1`
        :param pulumi.Input[_builtins.str] tls_version_variable: Variable name
        """
        if cipher_suites is not None:
            pulumi.set(__self__, "cipher_suites", cipher_suites)
        if cipher_suites_variable is not None:
            pulumi.set(__self__, "cipher_suites_variable", cipher_suites_variable)
        if profile is not None:
            pulumi.set(__self__, "profile", profile)
        if profile_variable is not None:
            pulumi.set(__self__, "profile_variable", profile_variable)
        if tls_version is not None:
            pulumi.set(__self__, "tls_version", tls_version)
        if tls_version_variable is not None:
            pulumi.set(__self__, "tls_version_variable", tls_version_variable)

    @_builtins.property
    @pulumi.getter(name="cipherSuites")
    def cipher_suites(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]:
        """
        Syslog secure server ciphersuites
        """
        return pulumi.get(self, "cipher_suites")

    @cipher_suites.setter
    def cipher_suites(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "cipher_suites", value)

    @_builtins.property
    @pulumi.getter(name="cipherSuitesVariable")
    def cipher_suites_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "cipher_suites_variable")

    @cipher_suites_variable.setter
    def cipher_suites_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "cipher_suites_variable", value)

    @_builtins.property
    @pulumi.getter
    def profile(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specify the name of the TLS profile
        """
        return pulumi.get(self, "profile")

    @profile.setter
    def profile(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "profile", value)

    @_builtins.property
    @pulumi.getter(name="profileVariable")
    def profile_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "profile_variable")

    @profile_variable.setter
    def profile_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "profile_variable", value)

    @_builtins.property
    @pulumi.getter(name="tlsVersion")
    def tls_version(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        TLS Version
          - Choices: `TLSv1.1`, `TLSv1.2`
          - Default value: `TLSv1.1`
        """
        return pulumi.get(self, "tls_version")

    @tls_version.setter
    def tls_version(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "tls_version", value)

    @_builtins.property
    @pulumi.getter(name="tlsVersionVariable")
    def tls_version_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "tls_version_variable")

    @tls_version_variable.setter
    def tls_version_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "tls_version_variable", value)


if not MYPY:
    class SystemNtpFeatureAuthenticationKeyArgsDict(TypedDict):
        key_id: NotRequired[pulumi.Input[_builtins.int]]
        """
        MD5 authentication key ID
          - Range: `1`-`65535`
        """
        key_id_variable: NotRequired[pulumi.Input[_builtins.str]]
        """
        Variable name
        """
        md5_value: NotRequired[pulumi.Input[_builtins.str]]
        """
        Enter cleartext or AES-encrypted MD5 authentication key
        """
        md5_value_variable: NotRequired[pulumi.Input[_builtins.str]]
        """
        Variable name
        """
elif False:
    SystemNtpFeatureAuthenticationKeyArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class SystemNtpFeatureAuthenticationKeyArgs:
    def __init__(__self__, *,
                 key_id: Optional[pulumi.Input[_builtins.int]] = None,
                 key_id_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 md5_value: Optional[pulumi.Input[_builtins.str]] = None,
                 md5_value_variable: Optional[pulumi.Input[_builtins.str]] = None):
        """
        :param pulumi.Input[_builtins.int] key_id: MD5 authentication key ID
                 - Range: `1`-`65535`
        :param pulumi.Input[_builtins.str] key_id_variable: Variable name
        :param pulumi.Input[_builtins.str] md5_value: Enter cleartext or AES-encrypted MD5 authentication key
        :param pulumi.Input[_builtins.str] md5_value_variable: Variable name
        """
        if key_id is not None:
            pulumi.set(__self__, "key_id", key_id)
        if key_id_variable is not None:
            pulumi.set(__self__, "key_id_variable", key_id_variable)
        if md5_value is not None:
            pulumi.set(__self__, "md5_value", md5_value)
        if md5_value_variable is not None:
            pulumi.set(__self__, "md5_value_variable", md5_value_variable)

    @_builtins.property
    @pulumi.getter(name="keyId")
    def key_id(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        MD5 authentication key ID
          - Range: `1`-`65535`
        """
        return pulumi.get(self, "key_id")

    @key_id.setter
    def key_id(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "key_id", value)

    @_builtins.property
    @pulumi.getter(name="keyIdVariable")
    def key_id_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "key_id_variable")

    @key_id_variable.setter
    def key_id_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "key_id_variable", value)

    @_builtins.property
    @pulumi.getter(name="md5Value")
    def md5_value(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Enter cleartext or AES-encrypted MD5 authentication key
        """
        return pulumi.get(self, "md5_value")

    @md5_value.setter
    def md5_value(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "md5_value", value)

    @_builtins.property
    @pulumi.getter(name="md5ValueVariable")
    def md5_value_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "md5_value_variable")

    @md5_value_variable.setter
    def md5_value_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "md5_value_variable", value)


if not MYPY:
    class SystemNtpFeatureServerArgsDict(TypedDict):
        authentication_key: NotRequired[pulumi.Input[_builtins.int]]
        """
        Set authentication key for the server
          - Range: `1`-`65535`
        """
        authentication_key_variable: NotRequired[pulumi.Input[_builtins.str]]
        """
        Variable name
        """
        hostname_ip_address: NotRequired[pulumi.Input[_builtins.str]]
        """
        Set hostname or IP address of server
        """
        hostname_ip_address_variable: NotRequired[pulumi.Input[_builtins.str]]
        """
        Variable name
        """
        ntp_version: NotRequired[pulumi.Input[_builtins.int]]
        """
        Set NTP version
          - Range: `1`-`4`
          - Default value: `4`
        """
        ntp_version_variable: NotRequired[pulumi.Input[_builtins.str]]
        """
        Variable name
        """
        prefer_this_ntp_server: NotRequired[pulumi.Input[_builtins.bool]]
        """
        Prefer this NTP server
          - Default value: `false`
        """
        prefer_this_ntp_server_variable: NotRequired[pulumi.Input[_builtins.str]]
        """
        Variable name
        """
        source_interface: NotRequired[pulumi.Input[_builtins.str]]
        """
        Set interface to use to reach NTP server
        """
        source_interface_variable: NotRequired[pulumi.Input[_builtins.str]]
        """
        Variable name
        """
        vpn: NotRequired[pulumi.Input[_builtins.int]]
        """
        Set VPN in which NTP server is located
          - Range: `0`-`65530`
          - Default value: `0`
        """
        vpn_variable: NotRequired[pulumi.Input[_builtins.str]]
        """
        Variable name
        """
elif False:
    SystemNtpFeatureServerArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class SystemNtpFeatureServerArgs:
    def __init__(__self__, *,
                 authentication_key: Optional[pulumi.Input[_builtins.int]] = None,
                 authentication_key_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 hostname_ip_address: Optional[pulumi.Input[_builtins.str]] = None,
                 hostname_ip_address_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 ntp_version: Optional[pulumi.Input[_builtins.int]] = None,
                 ntp_version_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 prefer_this_ntp_server: Optional[pulumi.Input[_builtins.bool]] = None,
                 prefer_this_ntp_server_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 source_interface: Optional[pulumi.Input[_builtins.str]] = None,
                 source_interface_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 vpn: Optional[pulumi.Input[_builtins.int]] = None,
                 vpn_variable: Optional[pulumi.Input[_builtins.str]] = None):
        """
        :param pulumi.Input[_builtins.int] authentication_key: Set authentication key for the server
                 - Range: `1`-`65535`
        :param pulumi.Input[_builtins.str] authentication_key_variable: Variable name
        :param pulumi.Input[_builtins.str] hostname_ip_address: Set hostname or IP address of server
        :param pulumi.Input[_builtins.str] hostname_ip_address_variable: Variable name
        :param pulumi.Input[_builtins.int] ntp_version: Set NTP version
                 - Range: `1`-`4`
                 - Default value: `4`
        :param pulumi.Input[_builtins.str] ntp_version_variable: Variable name
        :param pulumi.Input[_builtins.bool] prefer_this_ntp_server: Prefer this NTP server
                 - Default value: `false`
        :param pulumi.Input[_builtins.str] prefer_this_ntp_server_variable: Variable name
        :param pulumi.Input[_builtins.str] source_interface: Set interface to use to reach NTP server
        :param pulumi.Input[_builtins.str] source_interface_variable: Variable name
        :param pulumi.Input[_builtins.int] vpn: Set VPN in which NTP server is located
                 - Range: `0`-`65530`
                 - Default value: `0`
        :param pulumi.Input[_builtins.str] vpn_variable: Variable name
        """
        if authentication_key is not None:
            pulumi.set(__self__, "authentication_key", authentication_key)
        if authentication_key_variable is not None:
            pulumi.set(__self__, "authentication_key_variable", authentication_key_variable)
        if hostname_ip_address is not None:
            pulumi.set(__self__, "hostname_ip_address", hostname_ip_address)
        if hostname_ip_address_variable is not None:
            pulumi.set(__self__, "hostname_ip_address_variable", hostname_ip_address_variable)
        if ntp_version is not None:
            pulumi.set(__self__, "ntp_version", ntp_version)
        if ntp_version_variable is not None:
            pulumi.set(__self__, "ntp_version_variable", ntp_version_variable)
        if prefer_this_ntp_server is not None:
            pulumi.set(__self__, "prefer_this_ntp_server", prefer_this_ntp_server)
        if prefer_this_ntp_server_variable is not None:
            pulumi.set(__self__, "prefer_this_ntp_server_variable", prefer_this_ntp_server_variable)
        if source_interface is not None:
            pulumi.set(__self__, "source_interface", source_interface)
        if source_interface_variable is not None:
            pulumi.set(__self__, "source_interface_variable", source_interface_variable)
        if vpn is not None:
            pulumi.set(__self__, "vpn", vpn)
        if vpn_variable is not None:
            pulumi.set(__self__, "vpn_variable", vpn_variable)

    @_builtins.property
    @pulumi.getter(name="authenticationKey")
    def authentication_key(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        Set authentication key for the server
          - Range: `1`-`65535`
        """
        return pulumi.get(self, "authentication_key")

    @authentication_key.setter
    def authentication_key(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "authentication_key", value)

    @_builtins.property
    @pulumi.getter(name="authenticationKeyVariable")
    def authentication_key_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "authentication_key_variable")

    @authentication_key_variable.setter
    def authentication_key_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "authentication_key_variable", value)

    @_builtins.property
    @pulumi.getter(name="hostnameIpAddress")
    def hostname_ip_address(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Set hostname or IP address of server
        """
        return pulumi.get(self, "hostname_ip_address")

    @hostname_ip_address.setter
    def hostname_ip_address(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "hostname_ip_address", value)

    @_builtins.property
    @pulumi.getter(name="hostnameIpAddressVariable")
    def hostname_ip_address_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "hostname_ip_address_variable")

    @hostname_ip_address_variable.setter
    def hostname_ip_address_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "hostname_ip_address_variable", value)

    @_builtins.property
    @pulumi.getter(name="ntpVersion")
    def ntp_version(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        Set NTP version
          - Range: `1`-`4`
          - Default value: `4`
        """
        return pulumi.get(self, "ntp_version")

    @ntp_version.setter
    def ntp_version(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "ntp_version", value)

    @_builtins.property
    @pulumi.getter(name="ntpVersionVariable")
    def ntp_version_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "ntp_version_variable")

    @ntp_version_variable.setter
    def ntp_version_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "ntp_version_variable", value)

    @_builtins.property
    @pulumi.getter(name="preferThisNtpServer")
    def prefer_this_ntp_server(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Prefer this NTP server
          - Default value: `false`
        """
        return pulumi.get(self, "prefer_this_ntp_server")

    @prefer_this_ntp_server.setter
    def prefer_this_ntp_server(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "prefer_this_ntp_server", value)

    @_builtins.property
    @pulumi.getter(name="preferThisNtpServerVariable")
    def prefer_this_ntp_server_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "prefer_this_ntp_server_variable")

    @prefer_this_ntp_server_variable.setter
    def prefer_this_ntp_server_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "prefer_this_ntp_server_variable", value)

    @_builtins.property
    @pulumi.getter(name="sourceInterface")
    def source_interface(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Set interface to use to reach NTP server
        """
        return pulumi.get(self, "source_interface")

    @source_interface.setter
    def source_interface(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "source_interface", value)

    @_builtins.property
    @pulumi.getter(name="sourceInterfaceVariable")
    def source_interface_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "source_interface_variable")

    @source_interface_variable.setter
    def source_interface_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "source_interface_variable", value)

    @_builtins.property
    @pulumi.getter
    def vpn(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        Set VPN in which NTP server is located
          - Range: `0`-`65530`
          - Default value: `0`
        """
        return pulumi.get(self, "vpn")

    @vpn.setter
    def vpn(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "vpn", value)

    @_builtins.property
    @pulumi.getter(name="vpnVariable")
    def vpn_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "vpn_variable")

    @vpn_variable.setter
    def vpn_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "vpn_variable", value)


if not MYPY:
    class SystemSecurityFeatureKeyArgsDict(TypedDict):
        accept_ao_mismatch: NotRequired[pulumi.Input[_builtins.bool]]
        """
        Configure Accept AO Mismatch
          - Default value: `false`
        """
        accept_ao_mismatch_variable: NotRequired[pulumi.Input[_builtins.str]]
        """
        Variable name
        """
        accept_life_time_duration: NotRequired[pulumi.Input[_builtins.int]]
        """
        Send lifetime Duration (seconds)
          - Range: `1`-`2147483646`
        """
        accept_life_time_duration_variable: NotRequired[pulumi.Input[_builtins.str]]
        """
        Variable name
        """
        accept_life_time_exact: NotRequired[pulumi.Input[_builtins.int]]
        """
        Configure Key lifetime end time
        """
        accept_life_time_infinite: NotRequired[pulumi.Input[_builtins.bool]]
        """
        Infinite lifetime
        """
        accept_life_time_infinite_variable: NotRequired[pulumi.Input[_builtins.str]]
        """
        Variable name
        """
        accept_life_time_local: NotRequired[pulumi.Input[_builtins.bool]]
        """
        Configure Send lifetime Local
          - Default value: `false`
        """
        accept_life_time_local_variable: NotRequired[pulumi.Input[_builtins.str]]
        """
        Variable name
        """
        accept_life_time_start_epoch: NotRequired[pulumi.Input[_builtins.int]]
        """
        Configure Key lifetime start time
        """
        crypto_algorithm: NotRequired[pulumi.Input[_builtins.str]]
        """
        Crypto Algorithm
          - Choices: `aes-128-cmac`, `hmac-sha-1`, `hmac-sha-256`
        """
        id: NotRequired[pulumi.Input[_builtins.int]]
        """
        Select the Key ID
        """
        include_tcp_options: NotRequired[pulumi.Input[_builtins.bool]]
        """
        Configure Include TCP Options
          - Default value: `false`
        """
        include_tcp_options_variable: NotRequired[pulumi.Input[_builtins.str]]
        """
        Variable name
        """
        key_string: NotRequired[pulumi.Input[_builtins.str]]
        """
        Specify the Key String
        """
        key_string_variable: NotRequired[pulumi.Input[_builtins.str]]
        """
        Variable name
        """
        name: NotRequired[pulumi.Input[_builtins.str]]
        """
        Select the chain name
        """
        receiver_id: NotRequired[pulumi.Input[_builtins.int]]
        """
        Specify the Receiver ID
          - Range: `0`-`255`
        """
        receiver_id_variable: NotRequired[pulumi.Input[_builtins.str]]
        """
        Variable name
        """
        send_id: NotRequired[pulumi.Input[_builtins.int]]
        """
        Specify the Send ID
          - Range: `0`-`255`
        """
        send_id_variable: NotRequired[pulumi.Input[_builtins.str]]
        """
        Variable name
        """
        send_life_time_duration: NotRequired[pulumi.Input[_builtins.int]]
        """
        Send lifetime Duration (seconds)
          - Range: `1`-`2147483646`
        """
        send_life_time_duration_variable: NotRequired[pulumi.Input[_builtins.str]]
        """
        Variable name
        """
        send_life_time_exact: NotRequired[pulumi.Input[_builtins.int]]
        """
        Configure Key lifetime end time
        """
        send_life_time_infinite: NotRequired[pulumi.Input[_builtins.bool]]
        """
        Infinite lifetime
        """
        send_life_time_infinite_variable: NotRequired[pulumi.Input[_builtins.str]]
        """
        Variable name
        """
        send_life_time_local: NotRequired[pulumi.Input[_builtins.bool]]
        """
        Configure Send lifetime Local
          - Default value: `false`
        """
        send_life_time_local_variable: NotRequired[pulumi.Input[_builtins.str]]
        """
        Variable name
        """
        send_life_time_start_epoch: NotRequired[pulumi.Input[_builtins.int]]
        """
        Configure Key lifetime start time
        """
elif False:
    SystemSecurityFeatureKeyArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class SystemSecurityFeatureKeyArgs:
    def __init__(__self__, *,
                 accept_ao_mismatch: Optional[pulumi.Input[_builtins.bool]] = None,
                 accept_ao_mismatch_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 accept_life_time_duration: Optional[pulumi.Input[_builtins.int]] = None,
                 accept_life_time_duration_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 accept_life_time_exact: Optional[pulumi.Input[_builtins.int]] = None,
                 accept_life_time_infinite: Optional[pulumi.Input[_builtins.bool]] = None,
                 accept_life_time_infinite_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 accept_life_time_local: Optional[pulumi.Input[_builtins.bool]] = None,
                 accept_life_time_local_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 accept_life_time_start_epoch: Optional[pulumi.Input[_builtins.int]] = None,
                 crypto_algorithm: Optional[pulumi.Input[_builtins.str]] = None,
                 id: Optional[pulumi.Input[_builtins.int]] = None,
                 include_tcp_options: Optional[pulumi.Input[_builtins.bool]] = None,
                 include_tcp_options_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 key_string: Optional[pulumi.Input[_builtins.str]] = None,
                 key_string_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 receiver_id: Optional[pulumi.Input[_builtins.int]] = None,
                 receiver_id_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 send_id: Optional[pulumi.Input[_builtins.int]] = None,
                 send_id_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 send_life_time_duration: Optional[pulumi.Input[_builtins.int]] = None,
                 send_life_time_duration_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 send_life_time_exact: Optional[pulumi.Input[_builtins.int]] = None,
                 send_life_time_infinite: Optional[pulumi.Input[_builtins.bool]] = None,
                 send_life_time_infinite_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 send_life_time_local: Optional[pulumi.Input[_builtins.bool]] = None,
                 send_life_time_local_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 send_life_time_start_epoch: Optional[pulumi.Input[_builtins.int]] = None):
        """
        :param pulumi.Input[_builtins.bool] accept_ao_mismatch: Configure Accept AO Mismatch
                 - Default value: `false`
        :param pulumi.Input[_builtins.str] accept_ao_mismatch_variable: Variable name
        :param pulumi.Input[_builtins.int] accept_life_time_duration: Send lifetime Duration (seconds)
                 - Range: `1`-`2147483646`
        :param pulumi.Input[_builtins.str] accept_life_time_duration_variable: Variable name
        :param pulumi.Input[_builtins.int] accept_life_time_exact: Configure Key lifetime end time
        :param pulumi.Input[_builtins.bool] accept_life_time_infinite: Infinite lifetime
        :param pulumi.Input[_builtins.str] accept_life_time_infinite_variable: Variable name
        :param pulumi.Input[_builtins.bool] accept_life_time_local: Configure Send lifetime Local
                 - Default value: `false`
        :param pulumi.Input[_builtins.str] accept_life_time_local_variable: Variable name
        :param pulumi.Input[_builtins.int] accept_life_time_start_epoch: Configure Key lifetime start time
        :param pulumi.Input[_builtins.str] crypto_algorithm: Crypto Algorithm
                 - Choices: `aes-128-cmac`, `hmac-sha-1`, `hmac-sha-256`
        :param pulumi.Input[_builtins.int] id: Select the Key ID
        :param pulumi.Input[_builtins.bool] include_tcp_options: Configure Include TCP Options
                 - Default value: `false`
        :param pulumi.Input[_builtins.str] include_tcp_options_variable: Variable name
        :param pulumi.Input[_builtins.str] key_string: Specify the Key String
        :param pulumi.Input[_builtins.str] key_string_variable: Variable name
        :param pulumi.Input[_builtins.str] name: Select the chain name
        :param pulumi.Input[_builtins.int] receiver_id: Specify the Receiver ID
                 - Range: `0`-`255`
        :param pulumi.Input[_builtins.str] receiver_id_variable: Variable name
        :param pulumi.Input[_builtins.int] send_id: Specify the Send ID
                 - Range: `0`-`255`
        :param pulumi.Input[_builtins.str] send_id_variable: Variable name
        :param pulumi.Input[_builtins.int] send_life_time_duration: Send lifetime Duration (seconds)
                 - Range: `1`-`2147483646`
        :param pulumi.Input[_builtins.str] send_life_time_duration_variable: Variable name
        :param pulumi.Input[_builtins.int] send_life_time_exact: Configure Key lifetime end time
        :param pulumi.Input[_builtins.bool] send_life_time_infinite: Infinite lifetime
        :param pulumi.Input[_builtins.str] send_life_time_infinite_variable: Variable name
        :param pulumi.Input[_builtins.bool] send_life_time_local: Configure Send lifetime Local
                 - Default value: `false`
        :param pulumi.Input[_builtins.str] send_life_time_local_variable: Variable name
        :param pulumi.Input[_builtins.int] send_life_time_start_epoch: Configure Key lifetime start time
        """
        if accept_ao_mismatch is not None:
            pulumi.set(__self__, "accept_ao_mismatch", accept_ao_mismatch)
        if accept_ao_mismatch_variable is not None:
            pulumi.set(__self__, "accept_ao_mismatch_variable", accept_ao_mismatch_variable)
        if accept_life_time_duration is not None:
            pulumi.set(__self__, "accept_life_time_duration", accept_life_time_duration)
        if accept_life_time_duration_variable is not None:
            pulumi.set(__self__, "accept_life_time_duration_variable", accept_life_time_duration_variable)
        if accept_life_time_exact is not None:
            pulumi.set(__self__, "accept_life_time_exact", accept_life_time_exact)
        if accept_life_time_infinite is not None:
            pulumi.set(__self__, "accept_life_time_infinite", accept_life_time_infinite)
        if accept_life_time_infinite_variable is not None:
            pulumi.set(__self__, "accept_life_time_infinite_variable", accept_life_time_infinite_variable)
        if accept_life_time_local is not None:
            pulumi.set(__self__, "accept_life_time_local", accept_life_time_local)
        if accept_life_time_local_variable is not None:
            pulumi.set(__self__, "accept_life_time_local_variable", accept_life_time_local_variable)
        if accept_life_time_start_epoch is not None:
            pulumi.set(__self__, "accept_life_time_start_epoch", accept_life_time_start_epoch)
        if crypto_algorithm is not None:
            pulumi.set(__self__, "crypto_algorithm", crypto_algorithm)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if include_tcp_options is not None:
            pulumi.set(__self__, "include_tcp_options", include_tcp_options)
        if include_tcp_options_variable is not None:
            pulumi.set(__self__, "include_tcp_options_variable", include_tcp_options_variable)
        if key_string is not None:
            pulumi.set(__self__, "key_string", key_string)
        if key_string_variable is not None:
            pulumi.set(__self__, "key_string_variable", key_string_variable)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if receiver_id is not None:
            pulumi.set(__self__, "receiver_id", receiver_id)
        if receiver_id_variable is not None:
            pulumi.set(__self__, "receiver_id_variable", receiver_id_variable)
        if send_id is not None:
            pulumi.set(__self__, "send_id", send_id)
        if send_id_variable is not None:
            pulumi.set(__self__, "send_id_variable", send_id_variable)
        if send_life_time_duration is not None:
            pulumi.set(__self__, "send_life_time_duration", send_life_time_duration)
        if send_life_time_duration_variable is not None:
            pulumi.set(__self__, "send_life_time_duration_variable", send_life_time_duration_variable)
        if send_life_time_exact is not None:
            pulumi.set(__self__, "send_life_time_exact", send_life_time_exact)
        if send_life_time_infinite is not None:
            pulumi.set(__self__, "send_life_time_infinite", send_life_time_infinite)
        if send_life_time_infinite_variable is not None:
            pulumi.set(__self__, "send_life_time_infinite_variable", send_life_time_infinite_variable)
        if send_life_time_local is not None:
            pulumi.set(__self__, "send_life_time_local", send_life_time_local)
        if send_life_time_local_variable is not None:
            pulumi.set(__self__, "send_life_time_local_variable", send_life_time_local_variable)
        if send_life_time_start_epoch is not None:
            pulumi.set(__self__, "send_life_time_start_epoch", send_life_time_start_epoch)

    @_builtins.property
    @pulumi.getter(name="acceptAoMismatch")
    def accept_ao_mismatch(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Configure Accept AO Mismatch
          - Default value: `false`
        """
        return pulumi.get(self, "accept_ao_mismatch")

    @accept_ao_mismatch.setter
    def accept_ao_mismatch(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "accept_ao_mismatch", value)

    @_builtins.property
    @pulumi.getter(name="acceptAoMismatchVariable")
    def accept_ao_mismatch_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "accept_ao_mismatch_variable")

    @accept_ao_mismatch_variable.setter
    def accept_ao_mismatch_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "accept_ao_mismatch_variable", value)

    @_builtins.property
    @pulumi.getter(name="acceptLifeTimeDuration")
    def accept_life_time_duration(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        Send lifetime Duration (seconds)
          - Range: `1`-`2147483646`
        """
        return pulumi.get(self, "accept_life_time_duration")

    @accept_life_time_duration.setter
    def accept_life_time_duration(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "accept_life_time_duration", value)

    @_builtins.property
    @pulumi.getter(name="acceptLifeTimeDurationVariable")
    def accept_life_time_duration_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "accept_life_time_duration_variable")

    @accept_life_time_duration_variable.setter
    def accept_life_time_duration_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "accept_life_time_duration_variable", value)

    @_builtins.property
    @pulumi.getter(name="acceptLifeTimeExact")
    def accept_life_time_exact(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        Configure Key lifetime end time
        """
        return pulumi.get(self, "accept_life_time_exact")

    @accept_life_time_exact.setter
    def accept_life_time_exact(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "accept_life_time_exact", value)

    @_builtins.property
    @pulumi.getter(name="acceptLifeTimeInfinite")
    def accept_life_time_infinite(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Infinite lifetime
        """
        return pulumi.get(self, "accept_life_time_infinite")

    @accept_life_time_infinite.setter
    def accept_life_time_infinite(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "accept_life_time_infinite", value)

    @_builtins.property
    @pulumi.getter(name="acceptLifeTimeInfiniteVariable")
    def accept_life_time_infinite_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "accept_life_time_infinite_variable")

    @accept_life_time_infinite_variable.setter
    def accept_life_time_infinite_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "accept_life_time_infinite_variable", value)

    @_builtins.property
    @pulumi.getter(name="acceptLifeTimeLocal")
    def accept_life_time_local(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Configure Send lifetime Local
          - Default value: `false`
        """
        return pulumi.get(self, "accept_life_time_local")

    @accept_life_time_local.setter
    def accept_life_time_local(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "accept_life_time_local", value)

    @_builtins.property
    @pulumi.getter(name="acceptLifeTimeLocalVariable")
    def accept_life_time_local_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "accept_life_time_local_variable")

    @accept_life_time_local_variable.setter
    def accept_life_time_local_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "accept_life_time_local_variable", value)

    @_builtins.property
    @pulumi.getter(name="acceptLifeTimeStartEpoch")
    def accept_life_time_start_epoch(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        Configure Key lifetime start time
        """
        return pulumi.get(self, "accept_life_time_start_epoch")

    @accept_life_time_start_epoch.setter
    def accept_life_time_start_epoch(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "accept_life_time_start_epoch", value)

    @_builtins.property
    @pulumi.getter(name="cryptoAlgorithm")
    def crypto_algorithm(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Crypto Algorithm
          - Choices: `aes-128-cmac`, `hmac-sha-1`, `hmac-sha-256`
        """
        return pulumi.get(self, "crypto_algorithm")

    @crypto_algorithm.setter
    def crypto_algorithm(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "crypto_algorithm", value)

    @_builtins.property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        Select the Key ID
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "id", value)

    @_builtins.property
    @pulumi.getter(name="includeTcpOptions")
    def include_tcp_options(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Configure Include TCP Options
          - Default value: `false`
        """
        return pulumi.get(self, "include_tcp_options")

    @include_tcp_options.setter
    def include_tcp_options(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "include_tcp_options", value)

    @_builtins.property
    @pulumi.getter(name="includeTcpOptionsVariable")
    def include_tcp_options_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "include_tcp_options_variable")

    @include_tcp_options_variable.setter
    def include_tcp_options_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "include_tcp_options_variable", value)

    @_builtins.property
    @pulumi.getter(name="keyString")
    def key_string(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specify the Key String
        """
        return pulumi.get(self, "key_string")

    @key_string.setter
    def key_string(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "key_string", value)

    @_builtins.property
    @pulumi.getter(name="keyStringVariable")
    def key_string_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "key_string_variable")

    @key_string_variable.setter
    def key_string_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "key_string_variable", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Select the chain name
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "name", value)

    @_builtins.property
    @pulumi.getter(name="receiverId")
    def receiver_id(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        Specify the Receiver ID
          - Range: `0`-`255`
        """
        return pulumi.get(self, "receiver_id")

    @receiver_id.setter
    def receiver_id(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "receiver_id", value)

    @_builtins.property
    @pulumi.getter(name="receiverIdVariable")
    def receiver_id_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "receiver_id_variable")

    @receiver_id_variable.setter
    def receiver_id_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "receiver_id_variable", value)

    @_builtins.property
    @pulumi.getter(name="sendId")
    def send_id(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        Specify the Send ID
          - Range: `0`-`255`
        """
        return pulumi.get(self, "send_id")

    @send_id.setter
    def send_id(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "send_id", value)

    @_builtins.property
    @pulumi.getter(name="sendIdVariable")
    def send_id_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "send_id_variable")

    @send_id_variable.setter
    def send_id_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "send_id_variable", value)

    @_builtins.property
    @pulumi.getter(name="sendLifeTimeDuration")
    def send_life_time_duration(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        Send lifetime Duration (seconds)
          - Range: `1`-`2147483646`
        """
        return pulumi.get(self, "send_life_time_duration")

    @send_life_time_duration.setter
    def send_life_time_duration(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "send_life_time_duration", value)

    @_builtins.property
    @pulumi.getter(name="sendLifeTimeDurationVariable")
    def send_life_time_duration_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "send_life_time_duration_variable")

    @send_life_time_duration_variable.setter
    def send_life_time_duration_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "send_life_time_duration_variable", value)

    @_builtins.property
    @pulumi.getter(name="sendLifeTimeExact")
    def send_life_time_exact(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        Configure Key lifetime end time
        """
        return pulumi.get(self, "send_life_time_exact")

    @send_life_time_exact.setter
    def send_life_time_exact(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "send_life_time_exact", value)

    @_builtins.property
    @pulumi.getter(name="sendLifeTimeInfinite")
    def send_life_time_infinite(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Infinite lifetime
        """
        return pulumi.get(self, "send_life_time_infinite")

    @send_life_time_infinite.setter
    def send_life_time_infinite(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "send_life_time_infinite", value)

    @_builtins.property
    @pulumi.getter(name="sendLifeTimeInfiniteVariable")
    def send_life_time_infinite_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "send_life_time_infinite_variable")

    @send_life_time_infinite_variable.setter
    def send_life_time_infinite_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "send_life_time_infinite_variable", value)

    @_builtins.property
    @pulumi.getter(name="sendLifeTimeLocal")
    def send_life_time_local(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Configure Send lifetime Local
          - Default value: `false`
        """
        return pulumi.get(self, "send_life_time_local")

    @send_life_time_local.setter
    def send_life_time_local(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "send_life_time_local", value)

    @_builtins.property
    @pulumi.getter(name="sendLifeTimeLocalVariable")
    def send_life_time_local_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "send_life_time_local_variable")

    @send_life_time_local_variable.setter
    def send_life_time_local_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "send_life_time_local_variable", value)

    @_builtins.property
    @pulumi.getter(name="sendLifeTimeStartEpoch")
    def send_life_time_start_epoch(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        Configure Key lifetime start time
        """
        return pulumi.get(self, "send_life_time_start_epoch")

    @send_life_time_start_epoch.setter
    def send_life_time_start_epoch(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "send_life_time_start_epoch", value)


if not MYPY:
    class SystemSecurityFeatureKeychainArgsDict(TypedDict):
        key_chain_name: NotRequired[pulumi.Input[_builtins.str]]
        """
        Specify the name of the Keychain
        """
        key_id: NotRequired[pulumi.Input[_builtins.int]]
        """
        Specify the Key ID
          - Range: `0`-`2147483647`
        """
elif False:
    SystemSecurityFeatureKeychainArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class SystemSecurityFeatureKeychainArgs:
    def __init__(__self__, *,
                 key_chain_name: Optional[pulumi.Input[_builtins.str]] = None,
                 key_id: Optional[pulumi.Input[_builtins.int]] = None):
        """
        :param pulumi.Input[_builtins.str] key_chain_name: Specify the name of the Keychain
        :param pulumi.Input[_builtins.int] key_id: Specify the Key ID
                 - Range: `0`-`2147483647`
        """
        if key_chain_name is not None:
            pulumi.set(__self__, "key_chain_name", key_chain_name)
        if key_id is not None:
            pulumi.set(__self__, "key_id", key_id)

    @_builtins.property
    @pulumi.getter(name="keyChainName")
    def key_chain_name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specify the name of the Keychain
        """
        return pulumi.get(self, "key_chain_name")

    @key_chain_name.setter
    def key_chain_name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "key_chain_name", value)

    @_builtins.property
    @pulumi.getter(name="keyId")
    def key_id(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        Specify the Key ID
          - Range: `0`-`2147483647`
        """
        return pulumi.get(self, "key_id")

    @key_id.setter
    def key_id(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "key_id", value)


if not MYPY:
    class SystemSnmpFeatureCommunityArgsDict(TypedDict):
        authorization: NotRequired[pulumi.Input[_builtins.str]]
        """
        Configure access permissions
          - Choices: `read-only`, `read-write`
        """
        authorization_variable: NotRequired[pulumi.Input[_builtins.str]]
        """
        Variable name
        """
        name: NotRequired[pulumi.Input[_builtins.str]]
        """
        Set name of the SNMP community
        """
        user_label: NotRequired[pulumi.Input[_builtins.str]]
        """
        Set user label of the SNMP community
        """
        view: NotRequired[pulumi.Input[_builtins.str]]
        """
        Set name of the SNMP view
        """
        view_variable: NotRequired[pulumi.Input[_builtins.str]]
        """
        Variable name
        """
elif False:
    SystemSnmpFeatureCommunityArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class SystemSnmpFeatureCommunityArgs:
    def __init__(__self__, *,
                 authorization: Optional[pulumi.Input[_builtins.str]] = None,
                 authorization_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 user_label: Optional[pulumi.Input[_builtins.str]] = None,
                 view: Optional[pulumi.Input[_builtins.str]] = None,
                 view_variable: Optional[pulumi.Input[_builtins.str]] = None):
        """
        :param pulumi.Input[_builtins.str] authorization: Configure access permissions
                 - Choices: `read-only`, `read-write`
        :param pulumi.Input[_builtins.str] authorization_variable: Variable name
        :param pulumi.Input[_builtins.str] name: Set name of the SNMP community
        :param pulumi.Input[_builtins.str] user_label: Set user label of the SNMP community
        :param pulumi.Input[_builtins.str] view: Set name of the SNMP view
        :param pulumi.Input[_builtins.str] view_variable: Variable name
        """
        if authorization is not None:
            pulumi.set(__self__, "authorization", authorization)
        if authorization_variable is not None:
            pulumi.set(__self__, "authorization_variable", authorization_variable)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if user_label is not None:
            pulumi.set(__self__, "user_label", user_label)
        if view is not None:
            pulumi.set(__self__, "view", view)
        if view_variable is not None:
            pulumi.set(__self__, "view_variable", view_variable)

    @_builtins.property
    @pulumi.getter
    def authorization(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Configure access permissions
          - Choices: `read-only`, `read-write`
        """
        return pulumi.get(self, "authorization")

    @authorization.setter
    def authorization(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "authorization", value)

    @_builtins.property
    @pulumi.getter(name="authorizationVariable")
    def authorization_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "authorization_variable")

    @authorization_variable.setter
    def authorization_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "authorization_variable", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Set name of the SNMP community
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "name", value)

    @_builtins.property
    @pulumi.getter(name="userLabel")
    def user_label(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Set user label of the SNMP community
        """
        return pulumi.get(self, "user_label")

    @user_label.setter
    def user_label(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "user_label", value)

    @_builtins.property
    @pulumi.getter
    def view(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Set name of the SNMP view
        """
        return pulumi.get(self, "view")

    @view.setter
    def view(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "view", value)

    @_builtins.property
    @pulumi.getter(name="viewVariable")
    def view_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "view_variable")

    @view_variable.setter
    def view_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "view_variable", value)


if not MYPY:
    class SystemSnmpFeatureGroupArgsDict(TypedDict):
        name: NotRequired[pulumi.Input[_builtins.str]]
        """
        Name of the SNMP group
        """
        security_level: NotRequired[pulumi.Input[_builtins.str]]
        """
        Configure security level
          - Choices: `no-auth-no-priv`, `auth-no-priv`, `auth-priv`
        """
        view: NotRequired[pulumi.Input[_builtins.str]]
        """
        Name of the SNMP view
        """
        view_variable: NotRequired[pulumi.Input[_builtins.str]]
        """
        Variable name
        """
elif False:
    SystemSnmpFeatureGroupArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class SystemSnmpFeatureGroupArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 security_level: Optional[pulumi.Input[_builtins.str]] = None,
                 view: Optional[pulumi.Input[_builtins.str]] = None,
                 view_variable: Optional[pulumi.Input[_builtins.str]] = None):
        """
        :param pulumi.Input[_builtins.str] name: Name of the SNMP group
        :param pulumi.Input[_builtins.str] security_level: Configure security level
                 - Choices: `no-auth-no-priv`, `auth-no-priv`, `auth-priv`
        :param pulumi.Input[_builtins.str] view: Name of the SNMP view
        :param pulumi.Input[_builtins.str] view_variable: Variable name
        """
        if name is not None:
            pulumi.set(__self__, "name", name)
        if security_level is not None:
            pulumi.set(__self__, "security_level", security_level)
        if view is not None:
            pulumi.set(__self__, "view", view)
        if view_variable is not None:
            pulumi.set(__self__, "view_variable", view_variable)

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Name of the SNMP group
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "name", value)

    @_builtins.property
    @pulumi.getter(name="securityLevel")
    def security_level(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Configure security level
          - Choices: `no-auth-no-priv`, `auth-no-priv`, `auth-priv`
        """
        return pulumi.get(self, "security_level")

    @security_level.setter
    def security_level(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "security_level", value)

    @_builtins.property
    @pulumi.getter
    def view(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Name of the SNMP view
        """
        return pulumi.get(self, "view")

    @view.setter
    def view(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "view", value)

    @_builtins.property
    @pulumi.getter(name="viewVariable")
    def view_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "view_variable")

    @view_variable.setter
    def view_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "view_variable", value)


if not MYPY:
    class SystemSnmpFeatureTrapTargetServerArgsDict(TypedDict):
        ip: NotRequired[pulumi.Input[_builtins.str]]
        """
        Set IPv4/IPv6 address of SNMP server
        """
        ip_variable: NotRequired[pulumi.Input[_builtins.str]]
        """
        Variable name
        """
        port: NotRequired[pulumi.Input[_builtins.int]]
        """
        Set UDP port number to connect to SNMP server
          - Range: `1`-`65535`
        """
        port_variable: NotRequired[pulumi.Input[_builtins.str]]
        """
        Variable name
        """
        source_interface: NotRequired[pulumi.Input[_builtins.str]]
        """
        Source interface for outgoing SNMP traps
        """
        source_interface_variable: NotRequired[pulumi.Input[_builtins.str]]
        """
        Variable name
        """
        user: NotRequired[pulumi.Input[_builtins.str]]
        """
        Set name of the SNMP user
        """
        user_label: NotRequired[pulumi.Input[_builtins.str]]
        """
        Set user label of the SNMP community
        """
        user_variable: NotRequired[pulumi.Input[_builtins.str]]
        """
        Variable name
        """
        vpn_id: NotRequired[pulumi.Input[_builtins.int]]
        """
        Set VPN in which SNMP server is located
          - Range: `0`-`65530`
        """
        vpn_id_variable: NotRequired[pulumi.Input[_builtins.str]]
        """
        Variable name
        """
elif False:
    SystemSnmpFeatureTrapTargetServerArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class SystemSnmpFeatureTrapTargetServerArgs:
    def __init__(__self__, *,
                 ip: Optional[pulumi.Input[_builtins.str]] = None,
                 ip_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 port: Optional[pulumi.Input[_builtins.int]] = None,
                 port_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 source_interface: Optional[pulumi.Input[_builtins.str]] = None,
                 source_interface_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 user: Optional[pulumi.Input[_builtins.str]] = None,
                 user_label: Optional[pulumi.Input[_builtins.str]] = None,
                 user_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 vpn_id: Optional[pulumi.Input[_builtins.int]] = None,
                 vpn_id_variable: Optional[pulumi.Input[_builtins.str]] = None):
        """
        :param pulumi.Input[_builtins.str] ip: Set IPv4/IPv6 address of SNMP server
        :param pulumi.Input[_builtins.str] ip_variable: Variable name
        :param pulumi.Input[_builtins.int] port: Set UDP port number to connect to SNMP server
                 - Range: `1`-`65535`
        :param pulumi.Input[_builtins.str] port_variable: Variable name
        :param pulumi.Input[_builtins.str] source_interface: Source interface for outgoing SNMP traps
        :param pulumi.Input[_builtins.str] source_interface_variable: Variable name
        :param pulumi.Input[_builtins.str] user: Set name of the SNMP user
        :param pulumi.Input[_builtins.str] user_label: Set user label of the SNMP community
        :param pulumi.Input[_builtins.str] user_variable: Variable name
        :param pulumi.Input[_builtins.int] vpn_id: Set VPN in which SNMP server is located
                 - Range: `0`-`65530`
        :param pulumi.Input[_builtins.str] vpn_id_variable: Variable name
        """
        if ip is not None:
            pulumi.set(__self__, "ip", ip)
        if ip_variable is not None:
            pulumi.set(__self__, "ip_variable", ip_variable)
        if port is not None:
            pulumi.set(__self__, "port", port)
        if port_variable is not None:
            pulumi.set(__self__, "port_variable", port_variable)
        if source_interface is not None:
            pulumi.set(__self__, "source_interface", source_interface)
        if source_interface_variable is not None:
            pulumi.set(__self__, "source_interface_variable", source_interface_variable)
        if user is not None:
            pulumi.set(__self__, "user", user)
        if user_label is not None:
            pulumi.set(__self__, "user_label", user_label)
        if user_variable is not None:
            pulumi.set(__self__, "user_variable", user_variable)
        if vpn_id is not None:
            pulumi.set(__self__, "vpn_id", vpn_id)
        if vpn_id_variable is not None:
            pulumi.set(__self__, "vpn_id_variable", vpn_id_variable)

    @_builtins.property
    @pulumi.getter
    def ip(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Set IPv4/IPv6 address of SNMP server
        """
        return pulumi.get(self, "ip")

    @ip.setter
    def ip(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "ip", value)

    @_builtins.property
    @pulumi.getter(name="ipVariable")
    def ip_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "ip_variable")

    @ip_variable.setter
    def ip_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "ip_variable", value)

    @_builtins.property
    @pulumi.getter
    def port(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        Set UDP port number to connect to SNMP server
          - Range: `1`-`65535`
        """
        return pulumi.get(self, "port")

    @port.setter
    def port(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "port", value)

    @_builtins.property
    @pulumi.getter(name="portVariable")
    def port_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "port_variable")

    @port_variable.setter
    def port_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "port_variable", value)

    @_builtins.property
    @pulumi.getter(name="sourceInterface")
    def source_interface(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Source interface for outgoing SNMP traps
        """
        return pulumi.get(self, "source_interface")

    @source_interface.setter
    def source_interface(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "source_interface", value)

    @_builtins.property
    @pulumi.getter(name="sourceInterfaceVariable")
    def source_interface_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "source_interface_variable")

    @source_interface_variable.setter
    def source_interface_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "source_interface_variable", value)

    @_builtins.property
    @pulumi.getter
    def user(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Set name of the SNMP user
        """
        return pulumi.get(self, "user")

    @user.setter
    def user(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "user", value)

    @_builtins.property
    @pulumi.getter(name="userLabel")
    def user_label(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Set user label of the SNMP community
        """
        return pulumi.get(self, "user_label")

    @user_label.setter
    def user_label(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "user_label", value)

    @_builtins.property
    @pulumi.getter(name="userVariable")
    def user_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "user_variable")

    @user_variable.setter
    def user_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "user_variable", value)

    @_builtins.property
    @pulumi.getter(name="vpnId")
    def vpn_id(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        Set VPN in which SNMP server is located
          - Range: `0`-`65530`
        """
        return pulumi.get(self, "vpn_id")

    @vpn_id.setter
    def vpn_id(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "vpn_id", value)

    @_builtins.property
    @pulumi.getter(name="vpnIdVariable")
    def vpn_id_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "vpn_id_variable")

    @vpn_id_variable.setter
    def vpn_id_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "vpn_id_variable", value)


if not MYPY:
    class SystemSnmpFeatureUserArgsDict(TypedDict):
        authentication_password: NotRequired[pulumi.Input[_builtins.str]]
        """
        Specify authentication protocol password
        """
        authentication_password_variable: NotRequired[pulumi.Input[_builtins.str]]
        """
        Variable name
        """
        authentication_protocol: NotRequired[pulumi.Input[_builtins.str]]
        """
        Configure authentication protocol
          - Choices: `sha`
        """
        authentication_protocol_variable: NotRequired[pulumi.Input[_builtins.str]]
        """
        Variable name
        """
        group: NotRequired[pulumi.Input[_builtins.str]]
        """
        Name of the SNMP group
        """
        group_variable: NotRequired[pulumi.Input[_builtins.str]]
        """
        Variable name
        """
        name: NotRequired[pulumi.Input[_builtins.str]]
        """
        Name of the SNMP user
        """
        privacy_password: NotRequired[pulumi.Input[_builtins.str]]
        """
        Specify privacy protocol password
        """
        privacy_password_variable: NotRequired[pulumi.Input[_builtins.str]]
        """
        Variable name
        """
        privacy_protocol: NotRequired[pulumi.Input[_builtins.str]]
        """
        Configure privacy protocol
          - Choices: `aes-cfb-128`, `aes-256-cfb-128`
        """
        privacy_protocol_variable: NotRequired[pulumi.Input[_builtins.str]]
        """
        Variable name
        """
elif False:
    SystemSnmpFeatureUserArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class SystemSnmpFeatureUserArgs:
    def __init__(__self__, *,
                 authentication_password: Optional[pulumi.Input[_builtins.str]] = None,
                 authentication_password_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 authentication_protocol: Optional[pulumi.Input[_builtins.str]] = None,
                 authentication_protocol_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 group: Optional[pulumi.Input[_builtins.str]] = None,
                 group_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 privacy_password: Optional[pulumi.Input[_builtins.str]] = None,
                 privacy_password_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 privacy_protocol: Optional[pulumi.Input[_builtins.str]] = None,
                 privacy_protocol_variable: Optional[pulumi.Input[_builtins.str]] = None):
        """
        :param pulumi.Input[_builtins.str] authentication_password: Specify authentication protocol password
        :param pulumi.Input[_builtins.str] authentication_password_variable: Variable name
        :param pulumi.Input[_builtins.str] authentication_protocol: Configure authentication protocol
                 - Choices: `sha`
        :param pulumi.Input[_builtins.str] authentication_protocol_variable: Variable name
        :param pulumi.Input[_builtins.str] group: Name of the SNMP group
        :param pulumi.Input[_builtins.str] group_variable: Variable name
        :param pulumi.Input[_builtins.str] name: Name of the SNMP user
        :param pulumi.Input[_builtins.str] privacy_password: Specify privacy protocol password
        :param pulumi.Input[_builtins.str] privacy_password_variable: Variable name
        :param pulumi.Input[_builtins.str] privacy_protocol: Configure privacy protocol
                 - Choices: `aes-cfb-128`, `aes-256-cfb-128`
        :param pulumi.Input[_builtins.str] privacy_protocol_variable: Variable name
        """
        if authentication_password is not None:
            pulumi.set(__self__, "authentication_password", authentication_password)
        if authentication_password_variable is not None:
            pulumi.set(__self__, "authentication_password_variable", authentication_password_variable)
        if authentication_protocol is not None:
            pulumi.set(__self__, "authentication_protocol", authentication_protocol)
        if authentication_protocol_variable is not None:
            pulumi.set(__self__, "authentication_protocol_variable", authentication_protocol_variable)
        if group is not None:
            pulumi.set(__self__, "group", group)
        if group_variable is not None:
            pulumi.set(__self__, "group_variable", group_variable)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if privacy_password is not None:
            pulumi.set(__self__, "privacy_password", privacy_password)
        if privacy_password_variable is not None:
            pulumi.set(__self__, "privacy_password_variable", privacy_password_variable)
        if privacy_protocol is not None:
            pulumi.set(__self__, "privacy_protocol", privacy_protocol)
        if privacy_protocol_variable is not None:
            pulumi.set(__self__, "privacy_protocol_variable", privacy_protocol_variable)

    @_builtins.property
    @pulumi.getter(name="authenticationPassword")
    def authentication_password(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specify authentication protocol password
        """
        return pulumi.get(self, "authentication_password")

    @authentication_password.setter
    def authentication_password(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "authentication_password", value)

    @_builtins.property
    @pulumi.getter(name="authenticationPasswordVariable")
    def authentication_password_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "authentication_password_variable")

    @authentication_password_variable.setter
    def authentication_password_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "authentication_password_variable", value)

    @_builtins.property
    @pulumi.getter(name="authenticationProtocol")
    def authentication_protocol(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Configure authentication protocol
          - Choices: `sha`
        """
        return pulumi.get(self, "authentication_protocol")

    @authentication_protocol.setter
    def authentication_protocol(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "authentication_protocol", value)

    @_builtins.property
    @pulumi.getter(name="authenticationProtocolVariable")
    def authentication_protocol_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "authentication_protocol_variable")

    @authentication_protocol_variable.setter
    def authentication_protocol_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "authentication_protocol_variable", value)

    @_builtins.property
    @pulumi.getter
    def group(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Name of the SNMP group
        """
        return pulumi.get(self, "group")

    @group.setter
    def group(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "group", value)

    @_builtins.property
    @pulumi.getter(name="groupVariable")
    def group_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "group_variable")

    @group_variable.setter
    def group_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "group_variable", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Name of the SNMP user
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "name", value)

    @_builtins.property
    @pulumi.getter(name="privacyPassword")
    def privacy_password(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specify privacy protocol password
        """
        return pulumi.get(self, "privacy_password")

    @privacy_password.setter
    def privacy_password(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "privacy_password", value)

    @_builtins.property
    @pulumi.getter(name="privacyPasswordVariable")
    def privacy_password_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "privacy_password_variable")

    @privacy_password_variable.setter
    def privacy_password_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "privacy_password_variable", value)

    @_builtins.property
    @pulumi.getter(name="privacyProtocol")
    def privacy_protocol(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Configure privacy protocol
          - Choices: `aes-cfb-128`, `aes-256-cfb-128`
        """
        return pulumi.get(self, "privacy_protocol")

    @privacy_protocol.setter
    def privacy_protocol(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "privacy_protocol", value)

    @_builtins.property
    @pulumi.getter(name="privacyProtocolVariable")
    def privacy_protocol_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "privacy_protocol_variable")

    @privacy_protocol_variable.setter
    def privacy_protocol_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "privacy_protocol_variable", value)


if not MYPY:
    class SystemSnmpFeatureViewArgsDict(TypedDict):
        name: NotRequired[pulumi.Input[_builtins.str]]
        """
        Set the name of the SNMP view
        """
        oids: NotRequired[pulumi.Input[Sequence[pulumi.Input['SystemSnmpFeatureViewOidArgsDict']]]]
        """
        Configure SNMP object identifier
        """
elif False:
    SystemSnmpFeatureViewArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class SystemSnmpFeatureViewArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 oids: Optional[pulumi.Input[Sequence[pulumi.Input['SystemSnmpFeatureViewOidArgs']]]] = None):
        """
        :param pulumi.Input[_builtins.str] name: Set the name of the SNMP view
        :param pulumi.Input[Sequence[pulumi.Input['SystemSnmpFeatureViewOidArgs']]] oids: Configure SNMP object identifier
        """
        if name is not None:
            pulumi.set(__self__, "name", name)
        if oids is not None:
            pulumi.set(__self__, "oids", oids)

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Set the name of the SNMP view
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "name", value)

    @_builtins.property
    @pulumi.getter
    def oids(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['SystemSnmpFeatureViewOidArgs']]]]:
        """
        Configure SNMP object identifier
        """
        return pulumi.get(self, "oids")

    @oids.setter
    def oids(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['SystemSnmpFeatureViewOidArgs']]]]):
        pulumi.set(self, "oids", value)


if not MYPY:
    class SystemSnmpFeatureViewOidArgsDict(TypedDict):
        exclude: NotRequired[pulumi.Input[_builtins.bool]]
        """
        Exclude the OID
          - Default value: `false`
        """
        exclude_variable: NotRequired[pulumi.Input[_builtins.str]]
        """
        Variable name
        """
        id: NotRequired[pulumi.Input[_builtins.str]]
        """
        Configure identifier of subtree of MIB objects
        """
        id_variable: NotRequired[pulumi.Input[_builtins.str]]
        """
        Variable name
        """
elif False:
    SystemSnmpFeatureViewOidArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class SystemSnmpFeatureViewOidArgs:
    def __init__(__self__, *,
                 exclude: Optional[pulumi.Input[_builtins.bool]] = None,
                 exclude_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 id: Optional[pulumi.Input[_builtins.str]] = None,
                 id_variable: Optional[pulumi.Input[_builtins.str]] = None):
        """
        :param pulumi.Input[_builtins.bool] exclude: Exclude the OID
                 - Default value: `false`
        :param pulumi.Input[_builtins.str] exclude_variable: Variable name
        :param pulumi.Input[_builtins.str] id: Configure identifier of subtree of MIB objects
        :param pulumi.Input[_builtins.str] id_variable: Variable name
        """
        if exclude is not None:
            pulumi.set(__self__, "exclude", exclude)
        if exclude_variable is not None:
            pulumi.set(__self__, "exclude_variable", exclude_variable)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if id_variable is not None:
            pulumi.set(__self__, "id_variable", id_variable)

    @_builtins.property
    @pulumi.getter
    def exclude(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Exclude the OID
          - Default value: `false`
        """
        return pulumi.get(self, "exclude")

    @exclude.setter
    def exclude(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "exclude", value)

    @_builtins.property
    @pulumi.getter(name="excludeVariable")
    def exclude_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "exclude_variable")

    @exclude_variable.setter
    def exclude_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "exclude_variable", value)

    @_builtins.property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Configure identifier of subtree of MIB objects
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "id", value)

    @_builtins.property
    @pulumi.getter(name="idVariable")
    def id_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "id_variable")

    @id_variable.setter
    def id_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "id_variable", value)


if not MYPY:
    class TlocListPolicyObjectEntryArgsDict(TypedDict):
        color: pulumi.Input[_builtins.str]
        """
        Color
          - Choices: `default`, `3g`, `biz-internet`, `blue`, `bronze`, `custom1`, `custom2`, `custom3`, `gold`, `green`, `lte`, `metro-ethernet`, `mpls`, `private1`, `private2`, `private3`, `private4`, `private5`, `private6`, `public-internet`, `red`, `silver`
        """
        encapsulation: pulumi.Input[_builtins.str]
        """
        Encapsulation
          - Choices: `ipsec`, `gre`
        """
        tloc_ip: pulumi.Input[_builtins.str]
        """
        TLOC IP
        """
        preference: NotRequired[pulumi.Input[_builtins.int]]
        """
        Preference
          - Range: `0`-`4294967295`
        """
elif False:
    TlocListPolicyObjectEntryArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class TlocListPolicyObjectEntryArgs:
    def __init__(__self__, *,
                 color: pulumi.Input[_builtins.str],
                 encapsulation: pulumi.Input[_builtins.str],
                 tloc_ip: pulumi.Input[_builtins.str],
                 preference: Optional[pulumi.Input[_builtins.int]] = None):
        """
        :param pulumi.Input[_builtins.str] color: Color
                 - Choices: `default`, `3g`, `biz-internet`, `blue`, `bronze`, `custom1`, `custom2`, `custom3`, `gold`, `green`, `lte`, `metro-ethernet`, `mpls`, `private1`, `private2`, `private3`, `private4`, `private5`, `private6`, `public-internet`, `red`, `silver`
        :param pulumi.Input[_builtins.str] encapsulation: Encapsulation
                 - Choices: `ipsec`, `gre`
        :param pulumi.Input[_builtins.str] tloc_ip: TLOC IP
        :param pulumi.Input[_builtins.int] preference: Preference
                 - Range: `0`-`4294967295`
        """
        pulumi.set(__self__, "color", color)
        pulumi.set(__self__, "encapsulation", encapsulation)
        pulumi.set(__self__, "tloc_ip", tloc_ip)
        if preference is not None:
            pulumi.set(__self__, "preference", preference)

    @_builtins.property
    @pulumi.getter
    def color(self) -> pulumi.Input[_builtins.str]:
        """
        Color
          - Choices: `default`, `3g`, `biz-internet`, `blue`, `bronze`, `custom1`, `custom2`, `custom3`, `gold`, `green`, `lte`, `metro-ethernet`, `mpls`, `private1`, `private2`, `private3`, `private4`, `private5`, `private6`, `public-internet`, `red`, `silver`
        """
        return pulumi.get(self, "color")

    @color.setter
    def color(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "color", value)

    @_builtins.property
    @pulumi.getter
    def encapsulation(self) -> pulumi.Input[_builtins.str]:
        """
        Encapsulation
          - Choices: `ipsec`, `gre`
        """
        return pulumi.get(self, "encapsulation")

    @encapsulation.setter
    def encapsulation(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "encapsulation", value)

    @_builtins.property
    @pulumi.getter(name="tlocIp")
    def tloc_ip(self) -> pulumi.Input[_builtins.str]:
        """
        TLOC IP
        """
        return pulumi.get(self, "tloc_ip")

    @tloc_ip.setter
    def tloc_ip(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "tloc_ip", value)

    @_builtins.property
    @pulumi.getter
    def preference(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        Preference
          - Range: `0`-`4294967295`
        """
        return pulumi.get(self, "preference")

    @preference.setter
    def preference(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "preference", value)


if not MYPY:
    class TlsSslDecryptionPolicyDefinitionNetworkRuleArgsDict(TypedDict):
        base_action: NotRequired[pulumi.Input[_builtins.str]]
        """
        Rule base action
          - Choices: `noIntent`, `doNotDecrypt`, `decrypt`
        """
        rule_id: NotRequired[pulumi.Input[_builtins.int]]
        """
        Rule ID
        """
        rule_name: NotRequired[pulumi.Input[_builtins.str]]
        """
        Rule name
        """
        rule_type: NotRequired[pulumi.Input[_builtins.str]]
        """
        Rule type
        """
        source_and_destination_configurations: NotRequired[pulumi.Input[Sequence[pulumi.Input['TlsSslDecryptionPolicyDefinitionNetworkRuleSourceAndDestinationConfigurationArgsDict']]]]
        """
        List of network source / destination configuration
        """
elif False:
    TlsSslDecryptionPolicyDefinitionNetworkRuleArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class TlsSslDecryptionPolicyDefinitionNetworkRuleArgs:
    def __init__(__self__, *,
                 base_action: Optional[pulumi.Input[_builtins.str]] = None,
                 rule_id: Optional[pulumi.Input[_builtins.int]] = None,
                 rule_name: Optional[pulumi.Input[_builtins.str]] = None,
                 rule_type: Optional[pulumi.Input[_builtins.str]] = None,
                 source_and_destination_configurations: Optional[pulumi.Input[Sequence[pulumi.Input['TlsSslDecryptionPolicyDefinitionNetworkRuleSourceAndDestinationConfigurationArgs']]]] = None):
        """
        :param pulumi.Input[_builtins.str] base_action: Rule base action
                 - Choices: `noIntent`, `doNotDecrypt`, `decrypt`
        :param pulumi.Input[_builtins.int] rule_id: Rule ID
        :param pulumi.Input[_builtins.str] rule_name: Rule name
        :param pulumi.Input[_builtins.str] rule_type: Rule type
        :param pulumi.Input[Sequence[pulumi.Input['TlsSslDecryptionPolicyDefinitionNetworkRuleSourceAndDestinationConfigurationArgs']]] source_and_destination_configurations: List of network source / destination configuration
        """
        if base_action is not None:
            pulumi.set(__self__, "base_action", base_action)
        if rule_id is not None:
            pulumi.set(__self__, "rule_id", rule_id)
        if rule_name is not None:
            pulumi.set(__self__, "rule_name", rule_name)
        if rule_type is not None:
            pulumi.set(__self__, "rule_type", rule_type)
        if source_and_destination_configurations is not None:
            pulumi.set(__self__, "source_and_destination_configurations", source_and_destination_configurations)

    @_builtins.property
    @pulumi.getter(name="baseAction")
    def base_action(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Rule base action
          - Choices: `noIntent`, `doNotDecrypt`, `decrypt`
        """
        return pulumi.get(self, "base_action")

    @base_action.setter
    def base_action(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "base_action", value)

    @_builtins.property
    @pulumi.getter(name="ruleId")
    def rule_id(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        Rule ID
        """
        return pulumi.get(self, "rule_id")

    @rule_id.setter
    def rule_id(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "rule_id", value)

    @_builtins.property
    @pulumi.getter(name="ruleName")
    def rule_name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Rule name
        """
        return pulumi.get(self, "rule_name")

    @rule_name.setter
    def rule_name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "rule_name", value)

    @_builtins.property
    @pulumi.getter(name="ruleType")
    def rule_type(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Rule type
        """
        return pulumi.get(self, "rule_type")

    @rule_type.setter
    def rule_type(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "rule_type", value)

    @_builtins.property
    @pulumi.getter(name="sourceAndDestinationConfigurations")
    def source_and_destination_configurations(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['TlsSslDecryptionPolicyDefinitionNetworkRuleSourceAndDestinationConfigurationArgs']]]]:
        """
        List of network source / destination configuration
        """
        return pulumi.get(self, "source_and_destination_configurations")

    @source_and_destination_configurations.setter
    def source_and_destination_configurations(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['TlsSslDecryptionPolicyDefinitionNetworkRuleSourceAndDestinationConfigurationArgs']]]]):
        pulumi.set(self, "source_and_destination_configurations", value)


if not MYPY:
    class TlsSslDecryptionPolicyDefinitionNetworkRuleSourceAndDestinationConfigurationArgsDict(TypedDict):
        option: NotRequired[pulumi.Input[_builtins.str]]
        """
        source / destination option
          - Choices: `sourceIp`, `sourcePort`, `destinationVpn`, `destinationIp`, `destinationPort`
        """
        value: NotRequired[pulumi.Input[_builtins.str]]
        """
        source / destination option target
        """
elif False:
    TlsSslDecryptionPolicyDefinitionNetworkRuleSourceAndDestinationConfigurationArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class TlsSslDecryptionPolicyDefinitionNetworkRuleSourceAndDestinationConfigurationArgs:
    def __init__(__self__, *,
                 option: Optional[pulumi.Input[_builtins.str]] = None,
                 value: Optional[pulumi.Input[_builtins.str]] = None):
        """
        :param pulumi.Input[_builtins.str] option: source / destination option
                 - Choices: `sourceIp`, `sourcePort`, `destinationVpn`, `destinationIp`, `destinationPort`
        :param pulumi.Input[_builtins.str] value: source / destination option target
        """
        if option is not None:
            pulumi.set(__self__, "option", option)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @_builtins.property
    @pulumi.getter
    def option(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        source / destination option
          - Choices: `sourceIp`, `sourcePort`, `destinationVpn`, `destinationIp`, `destinationPort`
        """
        return pulumi.get(self, "option")

    @option.setter
    def option(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "option", value)

    @_builtins.property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        source / destination option target
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "value", value)


if not MYPY:
    class TlsSslDecryptionPolicyDefinitionUrlRuleArgsDict(TypedDict):
        rule_name: NotRequired[pulumi.Input[_builtins.str]]
        """
        Country
        """
        target_vpns: NotRequired[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]
        """
        List of VPN IDs
        """
        tls_ssl_profile_policy_id: NotRequired[pulumi.Input[_builtins.str]]
        """
        TLS SSL Profile Policy ID
        """
        tls_ssl_profile_policy_version: NotRequired[pulumi.Input[_builtins.int]]
        """
        TLS SSL Profile Policy version
        """
elif False:
    TlsSslDecryptionPolicyDefinitionUrlRuleArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class TlsSslDecryptionPolicyDefinitionUrlRuleArgs:
    def __init__(__self__, *,
                 rule_name: Optional[pulumi.Input[_builtins.str]] = None,
                 target_vpns: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 tls_ssl_profile_policy_id: Optional[pulumi.Input[_builtins.str]] = None,
                 tls_ssl_profile_policy_version: Optional[pulumi.Input[_builtins.int]] = None):
        """
        :param pulumi.Input[_builtins.str] rule_name: Country
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] target_vpns: List of VPN IDs
        :param pulumi.Input[_builtins.str] tls_ssl_profile_policy_id: TLS SSL Profile Policy ID
        :param pulumi.Input[_builtins.int] tls_ssl_profile_policy_version: TLS SSL Profile Policy version
        """
        if rule_name is not None:
            pulumi.set(__self__, "rule_name", rule_name)
        if target_vpns is not None:
            pulumi.set(__self__, "target_vpns", target_vpns)
        if tls_ssl_profile_policy_id is not None:
            pulumi.set(__self__, "tls_ssl_profile_policy_id", tls_ssl_profile_policy_id)
        if tls_ssl_profile_policy_version is not None:
            pulumi.set(__self__, "tls_ssl_profile_policy_version", tls_ssl_profile_policy_version)

    @_builtins.property
    @pulumi.getter(name="ruleName")
    def rule_name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Country
        """
        return pulumi.get(self, "rule_name")

    @rule_name.setter
    def rule_name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "rule_name", value)

    @_builtins.property
    @pulumi.getter(name="targetVpns")
    def target_vpns(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]:
        """
        List of VPN IDs
        """
        return pulumi.get(self, "target_vpns")

    @target_vpns.setter
    def target_vpns(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "target_vpns", value)

    @_builtins.property
    @pulumi.getter(name="tlsSslProfilePolicyId")
    def tls_ssl_profile_policy_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        TLS SSL Profile Policy ID
        """
        return pulumi.get(self, "tls_ssl_profile_policy_id")

    @tls_ssl_profile_policy_id.setter
    def tls_ssl_profile_policy_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "tls_ssl_profile_policy_id", value)

    @_builtins.property
    @pulumi.getter(name="tlsSslProfilePolicyVersion")
    def tls_ssl_profile_policy_version(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        TLS SSL Profile Policy version
        """
        return pulumi.get(self, "tls_ssl_profile_policy_version")

    @tls_ssl_profile_policy_version.setter
    def tls_ssl_profile_policy_version(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "tls_ssl_profile_policy_version", value)


if not MYPY:
    class TrafficDataPolicyDefinitionSequenceArgsDict(TypedDict):
        id: pulumi.Input[_builtins.int]
        """
        Sequence ID
        """
        name: pulumi.Input[_builtins.str]
        """
        Sequence name
        """
        type: pulumi.Input[_builtins.str]
        """
        Sequence type
          - Choices: `applicationFirewall`, `qos`, `serviceChaining`, `trafficEngineering`, `data`
        """
        action_entries: NotRequired[pulumi.Input[Sequence[pulumi.Input['TrafficDataPolicyDefinitionSequenceActionEntryArgsDict']]]]
        """
        List of action entries
        """
        base_action: NotRequired[pulumi.Input[_builtins.str]]
        """
        Base action, either `accept` or `drop`
          - Choices: `accept`, `drop`
        """
        ip_type: NotRequired[pulumi.Input[_builtins.str]]
        """
        Sequence IP type, either `ipv4`, `ipv6` or `all`
          - Choices: `ipv4`, `ipv6`, `all`
        """
        match_entries: NotRequired[pulumi.Input[Sequence[pulumi.Input['TrafficDataPolicyDefinitionSequenceMatchEntryArgsDict']]]]
        """
        List of match entries
        """
elif False:
    TrafficDataPolicyDefinitionSequenceArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class TrafficDataPolicyDefinitionSequenceArgs:
    def __init__(__self__, *,
                 id: pulumi.Input[_builtins.int],
                 name: pulumi.Input[_builtins.str],
                 type: pulumi.Input[_builtins.str],
                 action_entries: Optional[pulumi.Input[Sequence[pulumi.Input['TrafficDataPolicyDefinitionSequenceActionEntryArgs']]]] = None,
                 base_action: Optional[pulumi.Input[_builtins.str]] = None,
                 ip_type: Optional[pulumi.Input[_builtins.str]] = None,
                 match_entries: Optional[pulumi.Input[Sequence[pulumi.Input['TrafficDataPolicyDefinitionSequenceMatchEntryArgs']]]] = None):
        """
        :param pulumi.Input[_builtins.int] id: Sequence ID
        :param pulumi.Input[_builtins.str] name: Sequence name
        :param pulumi.Input[_builtins.str] type: Sequence type
                 - Choices: `applicationFirewall`, `qos`, `serviceChaining`, `trafficEngineering`, `data`
        :param pulumi.Input[Sequence[pulumi.Input['TrafficDataPolicyDefinitionSequenceActionEntryArgs']]] action_entries: List of action entries
        :param pulumi.Input[_builtins.str] base_action: Base action, either `accept` or `drop`
                 - Choices: `accept`, `drop`
        :param pulumi.Input[_builtins.str] ip_type: Sequence IP type, either `ipv4`, `ipv6` or `all`
                 - Choices: `ipv4`, `ipv6`, `all`
        :param pulumi.Input[Sequence[pulumi.Input['TrafficDataPolicyDefinitionSequenceMatchEntryArgs']]] match_entries: List of match entries
        """
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "type", type)
        if action_entries is not None:
            pulumi.set(__self__, "action_entries", action_entries)
        if base_action is not None:
            pulumi.set(__self__, "base_action", base_action)
        if ip_type is not None:
            pulumi.set(__self__, "ip_type", ip_type)
        if match_entries is not None:
            pulumi.set(__self__, "match_entries", match_entries)

    @_builtins.property
    @pulumi.getter
    def id(self) -> pulumi.Input[_builtins.int]:
        """
        Sequence ID
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: pulumi.Input[_builtins.int]):
        pulumi.set(self, "id", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> pulumi.Input[_builtins.str]:
        """
        Sequence name
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "name", value)

    @_builtins.property
    @pulumi.getter
    def type(self) -> pulumi.Input[_builtins.str]:
        """
        Sequence type
          - Choices: `applicationFirewall`, `qos`, `serviceChaining`, `trafficEngineering`, `data`
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "type", value)

    @_builtins.property
    @pulumi.getter(name="actionEntries")
    def action_entries(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['TrafficDataPolicyDefinitionSequenceActionEntryArgs']]]]:
        """
        List of action entries
        """
        return pulumi.get(self, "action_entries")

    @action_entries.setter
    def action_entries(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['TrafficDataPolicyDefinitionSequenceActionEntryArgs']]]]):
        pulumi.set(self, "action_entries", value)

    @_builtins.property
    @pulumi.getter(name="baseAction")
    def base_action(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Base action, either `accept` or `drop`
          - Choices: `accept`, `drop`
        """
        return pulumi.get(self, "base_action")

    @base_action.setter
    def base_action(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "base_action", value)

    @_builtins.property
    @pulumi.getter(name="ipType")
    def ip_type(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Sequence IP type, either `ipv4`, `ipv6` or `all`
          - Choices: `ipv4`, `ipv6`, `all`
        """
        return pulumi.get(self, "ip_type")

    @ip_type.setter
    def ip_type(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "ip_type", value)

    @_builtins.property
    @pulumi.getter(name="matchEntries")
    def match_entries(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['TrafficDataPolicyDefinitionSequenceMatchEntryArgs']]]]:
        """
        List of match entries
        """
        return pulumi.get(self, "match_entries")

    @match_entries.setter
    def match_entries(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['TrafficDataPolicyDefinitionSequenceMatchEntryArgs']]]]):
        pulumi.set(self, "match_entries", value)


if not MYPY:
    class TrafficDataPolicyDefinitionSequenceActionEntryArgsDict(TypedDict):
        type: pulumi.Input[_builtins.str]
        """
        Type of action entry
          - Choices: `cflowd`, `count`, `dreOptimization`, `fallbackToRouting`, `log`, `lossProtect`, `lossProtectPktDup`, `lossProtectFec`, `nat`, `redirectDns`, `serviceNodeGroup`, `set`, `sig`, `tcpOptimization`
        """
        cflowd: NotRequired[pulumi.Input[_builtins.bool]]
        """
        Enable cflowd, Attribute conditional on `type` being equal to `cflowd`
        """
        counter: NotRequired[pulumi.Input[_builtins.str]]
        """
        Counter name, Attribute conditional on `type` being equal to `count`
        """
        dre_optimization: NotRequired[pulumi.Input[_builtins.bool]]
        """
        Enable DRE optimization, Attribute conditional on `type` being equal to `dreOptimization`
        """
        fallback_to_routing: NotRequired[pulumi.Input[_builtins.bool]]
        """
        Enable fallback to routing, Attribute conditional on `type` being equal to `fallbackToRouting`
        """
        log: NotRequired[pulumi.Input[_builtins.bool]]
        """
        Enable logging, Attribute conditional on `type` being equal to `log`
        """
        loss_correction: NotRequired[pulumi.Input[_builtins.str]]
        """
        Loss correction, Attribute conditional on `type` being equal to `lossProtect`
          - Choices: `fecAdaptive`, `fecAlways`, `packetDuplication`
        """
        loss_correction_fec: NotRequired[pulumi.Input[_builtins.str]]
        """
        Loss correction FEC, Attribute conditional on `type` being equal to `lossProtectFec`
          - Choices: `fecAdaptive`, `fecAlways`, `packetDuplication`
        """
        loss_correction_fec_threshold: NotRequired[pulumi.Input[_builtins.str]]
        """
        Loss correction FEC threshold, Attribute conditional on `type` being equal to `lossProtectFec`
        """
        loss_correction_packet_duplication: NotRequired[pulumi.Input[_builtins.str]]
        """
        Loss correction packet duplication, Attribute conditional on `type` being equal to `lossProtectPktDup`
          - Choices: `fecAdaptive`, `fecAlways`, `packetDuplication`
        """
        nat_parameters: NotRequired[pulumi.Input[Sequence[pulumi.Input['TrafficDataPolicyDefinitionSequenceActionEntryNatParameterArgsDict']]]]
        """
        List of NAT parameters, Attribute conditional on `type` being equal to `nat`
        """
        nat_pool: NotRequired[pulumi.Input[_builtins.str]]
        """
        NAT pool, Attribute conditional on `type` being equal to `nat`
          - Choices: `pool`
        """
        nat_pool_id: NotRequired[pulumi.Input[_builtins.int]]
        """
        NAT pool ID, Attribute conditional on `type` being equal to `nat`
          - Range: `1`-`31`
        """
        redirect_dns: NotRequired[pulumi.Input[_builtins.str]]
        """
        Redirect DNS, Attribute conditional on `type` being equal to `redirectDns`
          - Choices: `dnsType`, `ipAddress`
        """
        redirect_dns_address: NotRequired[pulumi.Input[_builtins.str]]
        """
        Redirect DNS IP address, Attribute conditional on `redirect_dns` being equal to `ipAddress`
        """
        redirect_dns_type: NotRequired[pulumi.Input[_builtins.str]]
        """
        Redirect DNS type, Attribute conditional on `redirect_dns` being equal to `dnsType`
          - Choices: `host`, `umbrella`
        """
        secure_internet_gateway: NotRequired[pulumi.Input[_builtins.bool]]
        """
        Enable secure internet gateway, Attribute conditional on `type` being equal to `sig`
        """
        service_node_group: NotRequired[pulumi.Input[_builtins.str]]
        """
        Service node group, Attribute conditional on `type` being equal to `serviceNodeGroup`
        """
        set_parameters: NotRequired[pulumi.Input[Sequence[pulumi.Input['TrafficDataPolicyDefinitionSequenceActionEntrySetParameterArgsDict']]]]
        """
        List of set parameters, Attribute conditional on `type` being equal to `set`
        """
        tcp_optimization: NotRequired[pulumi.Input[_builtins.bool]]
        """
        Enable TCP optimization, Attribute conditional on `type` being equal to `tcpOptimization`
        """
elif False:
    TrafficDataPolicyDefinitionSequenceActionEntryArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class TrafficDataPolicyDefinitionSequenceActionEntryArgs:
    def __init__(__self__, *,
                 type: pulumi.Input[_builtins.str],
                 cflowd: Optional[pulumi.Input[_builtins.bool]] = None,
                 counter: Optional[pulumi.Input[_builtins.str]] = None,
                 dre_optimization: Optional[pulumi.Input[_builtins.bool]] = None,
                 fallback_to_routing: Optional[pulumi.Input[_builtins.bool]] = None,
                 log: Optional[pulumi.Input[_builtins.bool]] = None,
                 loss_correction: Optional[pulumi.Input[_builtins.str]] = None,
                 loss_correction_fec: Optional[pulumi.Input[_builtins.str]] = None,
                 loss_correction_fec_threshold: Optional[pulumi.Input[_builtins.str]] = None,
                 loss_correction_packet_duplication: Optional[pulumi.Input[_builtins.str]] = None,
                 nat_parameters: Optional[pulumi.Input[Sequence[pulumi.Input['TrafficDataPolicyDefinitionSequenceActionEntryNatParameterArgs']]]] = None,
                 nat_pool: Optional[pulumi.Input[_builtins.str]] = None,
                 nat_pool_id: Optional[pulumi.Input[_builtins.int]] = None,
                 redirect_dns: Optional[pulumi.Input[_builtins.str]] = None,
                 redirect_dns_address: Optional[pulumi.Input[_builtins.str]] = None,
                 redirect_dns_type: Optional[pulumi.Input[_builtins.str]] = None,
                 secure_internet_gateway: Optional[pulumi.Input[_builtins.bool]] = None,
                 service_node_group: Optional[pulumi.Input[_builtins.str]] = None,
                 set_parameters: Optional[pulumi.Input[Sequence[pulumi.Input['TrafficDataPolicyDefinitionSequenceActionEntrySetParameterArgs']]]] = None,
                 tcp_optimization: Optional[pulumi.Input[_builtins.bool]] = None):
        """
        :param pulumi.Input[_builtins.str] type: Type of action entry
                 - Choices: `cflowd`, `count`, `dreOptimization`, `fallbackToRouting`, `log`, `lossProtect`, `lossProtectPktDup`, `lossProtectFec`, `nat`, `redirectDns`, `serviceNodeGroup`, `set`, `sig`, `tcpOptimization`
        :param pulumi.Input[_builtins.bool] cflowd: Enable cflowd, Attribute conditional on `type` being equal to `cflowd`
        :param pulumi.Input[_builtins.str] counter: Counter name, Attribute conditional on `type` being equal to `count`
        :param pulumi.Input[_builtins.bool] dre_optimization: Enable DRE optimization, Attribute conditional on `type` being equal to `dreOptimization`
        :param pulumi.Input[_builtins.bool] fallback_to_routing: Enable fallback to routing, Attribute conditional on `type` being equal to `fallbackToRouting`
        :param pulumi.Input[_builtins.bool] log: Enable logging, Attribute conditional on `type` being equal to `log`
        :param pulumi.Input[_builtins.str] loss_correction: Loss correction, Attribute conditional on `type` being equal to `lossProtect`
                 - Choices: `fecAdaptive`, `fecAlways`, `packetDuplication`
        :param pulumi.Input[_builtins.str] loss_correction_fec: Loss correction FEC, Attribute conditional on `type` being equal to `lossProtectFec`
                 - Choices: `fecAdaptive`, `fecAlways`, `packetDuplication`
        :param pulumi.Input[_builtins.str] loss_correction_fec_threshold: Loss correction FEC threshold, Attribute conditional on `type` being equal to `lossProtectFec`
        :param pulumi.Input[_builtins.str] loss_correction_packet_duplication: Loss correction packet duplication, Attribute conditional on `type` being equal to `lossProtectPktDup`
                 - Choices: `fecAdaptive`, `fecAlways`, `packetDuplication`
        :param pulumi.Input[Sequence[pulumi.Input['TrafficDataPolicyDefinitionSequenceActionEntryNatParameterArgs']]] nat_parameters: List of NAT parameters, Attribute conditional on `type` being equal to `nat`
        :param pulumi.Input[_builtins.str] nat_pool: NAT pool, Attribute conditional on `type` being equal to `nat`
                 - Choices: `pool`
        :param pulumi.Input[_builtins.int] nat_pool_id: NAT pool ID, Attribute conditional on `type` being equal to `nat`
                 - Range: `1`-`31`
        :param pulumi.Input[_builtins.str] redirect_dns: Redirect DNS, Attribute conditional on `type` being equal to `redirectDns`
                 - Choices: `dnsType`, `ipAddress`
        :param pulumi.Input[_builtins.str] redirect_dns_address: Redirect DNS IP address, Attribute conditional on `redirect_dns` being equal to `ipAddress`
        :param pulumi.Input[_builtins.str] redirect_dns_type: Redirect DNS type, Attribute conditional on `redirect_dns` being equal to `dnsType`
                 - Choices: `host`, `umbrella`
        :param pulumi.Input[_builtins.bool] secure_internet_gateway: Enable secure internet gateway, Attribute conditional on `type` being equal to `sig`
        :param pulumi.Input[_builtins.str] service_node_group: Service node group, Attribute conditional on `type` being equal to `serviceNodeGroup`
        :param pulumi.Input[Sequence[pulumi.Input['TrafficDataPolicyDefinitionSequenceActionEntrySetParameterArgs']]] set_parameters: List of set parameters, Attribute conditional on `type` being equal to `set`
        :param pulumi.Input[_builtins.bool] tcp_optimization: Enable TCP optimization, Attribute conditional on `type` being equal to `tcpOptimization`
        """
        pulumi.set(__self__, "type", type)
        if cflowd is not None:
            pulumi.set(__self__, "cflowd", cflowd)
        if counter is not None:
            pulumi.set(__self__, "counter", counter)
        if dre_optimization is not None:
            pulumi.set(__self__, "dre_optimization", dre_optimization)
        if fallback_to_routing is not None:
            pulumi.set(__self__, "fallback_to_routing", fallback_to_routing)
        if log is not None:
            pulumi.set(__self__, "log", log)
        if loss_correction is not None:
            pulumi.set(__self__, "loss_correction", loss_correction)
        if loss_correction_fec is not None:
            pulumi.set(__self__, "loss_correction_fec", loss_correction_fec)
        if loss_correction_fec_threshold is not None:
            pulumi.set(__self__, "loss_correction_fec_threshold", loss_correction_fec_threshold)
        if loss_correction_packet_duplication is not None:
            pulumi.set(__self__, "loss_correction_packet_duplication", loss_correction_packet_duplication)
        if nat_parameters is not None:
            pulumi.set(__self__, "nat_parameters", nat_parameters)
        if nat_pool is not None:
            pulumi.set(__self__, "nat_pool", nat_pool)
        if nat_pool_id is not None:
            pulumi.set(__self__, "nat_pool_id", nat_pool_id)
        if redirect_dns is not None:
            pulumi.set(__self__, "redirect_dns", redirect_dns)
        if redirect_dns_address is not None:
            pulumi.set(__self__, "redirect_dns_address", redirect_dns_address)
        if redirect_dns_type is not None:
            pulumi.set(__self__, "redirect_dns_type", redirect_dns_type)
        if secure_internet_gateway is not None:
            pulumi.set(__self__, "secure_internet_gateway", secure_internet_gateway)
        if service_node_group is not None:
            pulumi.set(__self__, "service_node_group", service_node_group)
        if set_parameters is not None:
            pulumi.set(__self__, "set_parameters", set_parameters)
        if tcp_optimization is not None:
            pulumi.set(__self__, "tcp_optimization", tcp_optimization)

    @_builtins.property
    @pulumi.getter
    def type(self) -> pulumi.Input[_builtins.str]:
        """
        Type of action entry
          - Choices: `cflowd`, `count`, `dreOptimization`, `fallbackToRouting`, `log`, `lossProtect`, `lossProtectPktDup`, `lossProtectFec`, `nat`, `redirectDns`, `serviceNodeGroup`, `set`, `sig`, `tcpOptimization`
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "type", value)

    @_builtins.property
    @pulumi.getter
    def cflowd(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Enable cflowd, Attribute conditional on `type` being equal to `cflowd`
        """
        return pulumi.get(self, "cflowd")

    @cflowd.setter
    def cflowd(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "cflowd", value)

    @_builtins.property
    @pulumi.getter
    def counter(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Counter name, Attribute conditional on `type` being equal to `count`
        """
        return pulumi.get(self, "counter")

    @counter.setter
    def counter(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "counter", value)

    @_builtins.property
    @pulumi.getter(name="dreOptimization")
    def dre_optimization(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Enable DRE optimization, Attribute conditional on `type` being equal to `dreOptimization`
        """
        return pulumi.get(self, "dre_optimization")

    @dre_optimization.setter
    def dre_optimization(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "dre_optimization", value)

    @_builtins.property
    @pulumi.getter(name="fallbackToRouting")
    def fallback_to_routing(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Enable fallback to routing, Attribute conditional on `type` being equal to `fallbackToRouting`
        """
        return pulumi.get(self, "fallback_to_routing")

    @fallback_to_routing.setter
    def fallback_to_routing(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "fallback_to_routing", value)

    @_builtins.property
    @pulumi.getter
    def log(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Enable logging, Attribute conditional on `type` being equal to `log`
        """
        return pulumi.get(self, "log")

    @log.setter
    def log(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "log", value)

    @_builtins.property
    @pulumi.getter(name="lossCorrection")
    def loss_correction(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Loss correction, Attribute conditional on `type` being equal to `lossProtect`
          - Choices: `fecAdaptive`, `fecAlways`, `packetDuplication`
        """
        return pulumi.get(self, "loss_correction")

    @loss_correction.setter
    def loss_correction(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "loss_correction", value)

    @_builtins.property
    @pulumi.getter(name="lossCorrectionFec")
    def loss_correction_fec(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Loss correction FEC, Attribute conditional on `type` being equal to `lossProtectFec`
          - Choices: `fecAdaptive`, `fecAlways`, `packetDuplication`
        """
        return pulumi.get(self, "loss_correction_fec")

    @loss_correction_fec.setter
    def loss_correction_fec(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "loss_correction_fec", value)

    @_builtins.property
    @pulumi.getter(name="lossCorrectionFecThreshold")
    def loss_correction_fec_threshold(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Loss correction FEC threshold, Attribute conditional on `type` being equal to `lossProtectFec`
        """
        return pulumi.get(self, "loss_correction_fec_threshold")

    @loss_correction_fec_threshold.setter
    def loss_correction_fec_threshold(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "loss_correction_fec_threshold", value)

    @_builtins.property
    @pulumi.getter(name="lossCorrectionPacketDuplication")
    def loss_correction_packet_duplication(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Loss correction packet duplication, Attribute conditional on `type` being equal to `lossProtectPktDup`
          - Choices: `fecAdaptive`, `fecAlways`, `packetDuplication`
        """
        return pulumi.get(self, "loss_correction_packet_duplication")

    @loss_correction_packet_duplication.setter
    def loss_correction_packet_duplication(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "loss_correction_packet_duplication", value)

    @_builtins.property
    @pulumi.getter(name="natParameters")
    def nat_parameters(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['TrafficDataPolicyDefinitionSequenceActionEntryNatParameterArgs']]]]:
        """
        List of NAT parameters, Attribute conditional on `type` being equal to `nat`
        """
        return pulumi.get(self, "nat_parameters")

    @nat_parameters.setter
    def nat_parameters(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['TrafficDataPolicyDefinitionSequenceActionEntryNatParameterArgs']]]]):
        pulumi.set(self, "nat_parameters", value)

    @_builtins.property
    @pulumi.getter(name="natPool")
    def nat_pool(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        NAT pool, Attribute conditional on `type` being equal to `nat`
          - Choices: `pool`
        """
        return pulumi.get(self, "nat_pool")

    @nat_pool.setter
    def nat_pool(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "nat_pool", value)

    @_builtins.property
    @pulumi.getter(name="natPoolId")
    def nat_pool_id(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        NAT pool ID, Attribute conditional on `type` being equal to `nat`
          - Range: `1`-`31`
        """
        return pulumi.get(self, "nat_pool_id")

    @nat_pool_id.setter
    def nat_pool_id(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "nat_pool_id", value)

    @_builtins.property
    @pulumi.getter(name="redirectDns")
    def redirect_dns(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Redirect DNS, Attribute conditional on `type` being equal to `redirectDns`
          - Choices: `dnsType`, `ipAddress`
        """
        return pulumi.get(self, "redirect_dns")

    @redirect_dns.setter
    def redirect_dns(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "redirect_dns", value)

    @_builtins.property
    @pulumi.getter(name="redirectDnsAddress")
    def redirect_dns_address(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Redirect DNS IP address, Attribute conditional on `redirect_dns` being equal to `ipAddress`
        """
        return pulumi.get(self, "redirect_dns_address")

    @redirect_dns_address.setter
    def redirect_dns_address(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "redirect_dns_address", value)

    @_builtins.property
    @pulumi.getter(name="redirectDnsType")
    def redirect_dns_type(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Redirect DNS type, Attribute conditional on `redirect_dns` being equal to `dnsType`
          - Choices: `host`, `umbrella`
        """
        return pulumi.get(self, "redirect_dns_type")

    @redirect_dns_type.setter
    def redirect_dns_type(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "redirect_dns_type", value)

    @_builtins.property
    @pulumi.getter(name="secureInternetGateway")
    def secure_internet_gateway(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Enable secure internet gateway, Attribute conditional on `type` being equal to `sig`
        """
        return pulumi.get(self, "secure_internet_gateway")

    @secure_internet_gateway.setter
    def secure_internet_gateway(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "secure_internet_gateway", value)

    @_builtins.property
    @pulumi.getter(name="serviceNodeGroup")
    def service_node_group(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Service node group, Attribute conditional on `type` being equal to `serviceNodeGroup`
        """
        return pulumi.get(self, "service_node_group")

    @service_node_group.setter
    def service_node_group(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "service_node_group", value)

    @_builtins.property
    @pulumi.getter(name="setParameters")
    def set_parameters(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['TrafficDataPolicyDefinitionSequenceActionEntrySetParameterArgs']]]]:
        """
        List of set parameters, Attribute conditional on `type` being equal to `set`
        """
        return pulumi.get(self, "set_parameters")

    @set_parameters.setter
    def set_parameters(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['TrafficDataPolicyDefinitionSequenceActionEntrySetParameterArgs']]]]):
        pulumi.set(self, "set_parameters", value)

    @_builtins.property
    @pulumi.getter(name="tcpOptimization")
    def tcp_optimization(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Enable TCP optimization, Attribute conditional on `type` being equal to `tcpOptimization`
        """
        return pulumi.get(self, "tcp_optimization")

    @tcp_optimization.setter
    def tcp_optimization(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "tcp_optimization", value)


if not MYPY:
    class TrafficDataPolicyDefinitionSequenceActionEntryNatParameterArgsDict(TypedDict):
        type: pulumi.Input[_builtins.str]
        """
        Type of NAT parameter
          - Choices: `useVpn`, `fallback`
        """
        fallback: NotRequired[pulumi.Input[_builtins.bool]]
        """
        Fallback, Attribute conditional on `type` being equal to `fallback`
        """
        vpn_id: NotRequired[pulumi.Input[_builtins.int]]
        """
        DSCP, Attribute conditional on `type` being equal to `useVpn`
        """
elif False:
    TrafficDataPolicyDefinitionSequenceActionEntryNatParameterArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class TrafficDataPolicyDefinitionSequenceActionEntryNatParameterArgs:
    def __init__(__self__, *,
                 type: pulumi.Input[_builtins.str],
                 fallback: Optional[pulumi.Input[_builtins.bool]] = None,
                 vpn_id: Optional[pulumi.Input[_builtins.int]] = None):
        """
        :param pulumi.Input[_builtins.str] type: Type of NAT parameter
                 - Choices: `useVpn`, `fallback`
        :param pulumi.Input[_builtins.bool] fallback: Fallback, Attribute conditional on `type` being equal to `fallback`
        :param pulumi.Input[_builtins.int] vpn_id: DSCP, Attribute conditional on `type` being equal to `useVpn`
        """
        pulumi.set(__self__, "type", type)
        if fallback is not None:
            pulumi.set(__self__, "fallback", fallback)
        if vpn_id is not None:
            pulumi.set(__self__, "vpn_id", vpn_id)

    @_builtins.property
    @pulumi.getter
    def type(self) -> pulumi.Input[_builtins.str]:
        """
        Type of NAT parameter
          - Choices: `useVpn`, `fallback`
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "type", value)

    @_builtins.property
    @pulumi.getter
    def fallback(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Fallback, Attribute conditional on `type` being equal to `fallback`
        """
        return pulumi.get(self, "fallback")

    @fallback.setter
    def fallback(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "fallback", value)

    @_builtins.property
    @pulumi.getter(name="vpnId")
    def vpn_id(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        DSCP, Attribute conditional on `type` being equal to `useVpn`
        """
        return pulumi.get(self, "vpn_id")

    @vpn_id.setter
    def vpn_id(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "vpn_id", value)


if not MYPY:
    class TrafficDataPolicyDefinitionSequenceActionEntrySetParameterArgsDict(TypedDict):
        type: pulumi.Input[_builtins.str]
        """
        Type of set parameter
          - Choices: `dscp`, `forwardingClass`, `localTlocList`, `nextHop`, `nextHopLoose`, `policer`, `preferredColorGroup`, `tlocList`, `tloc`, `service`, `vpn`
        """
        dscp: NotRequired[pulumi.Input[_builtins.int]]
        """
        DSCP, Attribute conditional on `type` being equal to `dscp`
          - Range: `0`-`63`
        """
        forwarding_class: NotRequired[pulumi.Input[_builtins.str]]
        """
        Forwarding class, Attribute conditional on `type` being equal to `forwardingClass`
        """
        local_tloc_list_color: NotRequired[pulumi.Input[_builtins.str]]
        """
        Local TLOC list color. Space separated list of colors., Attribute conditional on `type` being equal to `localTlocList`
        """
        local_tloc_list_encap: NotRequired[pulumi.Input[_builtins.str]]
        """
        Local TLOC list encapsulation., Attribute conditional on `type` being equal to `localTlocList`
          - Choices: `ipsec`, `gre`, `ipsec gre`
        """
        local_tloc_list_restrict: NotRequired[pulumi.Input[_builtins.bool]]
        """
        Local TLOC list restrict, Attribute conditional on `type` being equal to `localTlocList`
        """
        next_hop: NotRequired[pulumi.Input[_builtins.str]]
        """
        Next hop IP, Attribute conditional on `type` being equal to `nextHop`
        """
        next_hop_loose: NotRequired[pulumi.Input[_builtins.bool]]
        """
        Use routing table entry to forward the packet in case Next-hop is not available, Attribute conditional on `type` being equal to `nextHopLoose`
        """
        policer_list_id: NotRequired[pulumi.Input[_builtins.str]]
        """
        Policer list ID, Attribute conditional on `type` being equal to `policer`
        """
        policer_list_version: NotRequired[pulumi.Input[_builtins.int]]
        """
        Policer list version
        """
        preferred_color_group_list_id: NotRequired[pulumi.Input[_builtins.str]]
        """
        Preferred color group list ID, Attribute conditional on `type` being equal to `preferredColorGroup`
        """
        preferred_color_group_list_version: NotRequired[pulumi.Input[_builtins.int]]
        """
        Preferred color group list version
        """
        service_tloc_color: NotRequired[pulumi.Input[_builtins.str]]
        """
        Service TLOC color, Attribute conditional on `type` being equal to `service`
        """
        service_tloc_encapsulation: NotRequired[pulumi.Input[_builtins.str]]
        """
        Service TLOC encapsulation, Attribute conditional on `type` being equal to `service`
          - Choices: `ipsec`, `gre`, `ipsec gre`
        """
        service_tloc_ip: NotRequired[pulumi.Input[_builtins.str]]
        """
        Service TLOC IP address, Attribute conditional on `type` being equal to `service`
        """
        service_tloc_list_id: NotRequired[pulumi.Input[_builtins.str]]
        """
        Service TLOC list ID, Attribute conditional on `type` being equal to `service`
        """
        service_tloc_list_version: NotRequired[pulumi.Input[_builtins.int]]
        """
        Service TLOC list version
        """
        service_tloc_local: NotRequired[pulumi.Input[_builtins.bool]]
        """
        Service TLOC Local, Attribute conditional on `type` being equal to `service`
        """
        service_tloc_restrict: NotRequired[pulumi.Input[_builtins.bool]]
        """
        Service TLOC Restrict, Attribute conditional on `type` being equal to `service`
        """
        service_type: NotRequired[pulumi.Input[_builtins.str]]
        """
        Service type, Attribute conditional on `type` being equal to `service`
          - Choices: `FW`, `IDP`, `IDS`, `netsvc1`, `netsvc2`, `netsvc3`, `netsvc4`, `netsvc5`
        """
        service_vpn_id: NotRequired[pulumi.Input[_builtins.int]]
        """
        Service VPN ID, Attribute conditional on `type` being equal to `service`
          - Range: `0`-`65536`
        """
        tloc_color: NotRequired[pulumi.Input[_builtins.str]]
        """
        TLOC color, Attribute conditional on `type` being equal to `tloc`
        """
        tloc_encapsulation: NotRequired[pulumi.Input[_builtins.str]]
        """
        TLOC encapsulation, Attribute conditional on `type` being equal to `tloc`
          - Choices: `ipsec`, `gre`, `ipsec gre`
        """
        tloc_ip: NotRequired[pulumi.Input[_builtins.str]]
        """
        TLOC IP address, Attribute conditional on `type` being equal to `tloc`
        """
        tloc_list_id: NotRequired[pulumi.Input[_builtins.str]]
        """
        TLOC list ID, Attribute conditional on `type` being equal to `tlocList`
        """
        tloc_list_version: NotRequired[pulumi.Input[_builtins.int]]
        """
        TLOC list version
        """
        vpn_id: NotRequired[pulumi.Input[_builtins.int]]
        """
        DSCP, Attribute conditional on `type` being equal to `vpn`
          - Range: `0`-`65530`
        """
elif False:
    TrafficDataPolicyDefinitionSequenceActionEntrySetParameterArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class TrafficDataPolicyDefinitionSequenceActionEntrySetParameterArgs:
    def __init__(__self__, *,
                 type: pulumi.Input[_builtins.str],
                 dscp: Optional[pulumi.Input[_builtins.int]] = None,
                 forwarding_class: Optional[pulumi.Input[_builtins.str]] = None,
                 local_tloc_list_color: Optional[pulumi.Input[_builtins.str]] = None,
                 local_tloc_list_encap: Optional[pulumi.Input[_builtins.str]] = None,
                 local_tloc_list_restrict: Optional[pulumi.Input[_builtins.bool]] = None,
                 next_hop: Optional[pulumi.Input[_builtins.str]] = None,
                 next_hop_loose: Optional[pulumi.Input[_builtins.bool]] = None,
                 policer_list_id: Optional[pulumi.Input[_builtins.str]] = None,
                 policer_list_version: Optional[pulumi.Input[_builtins.int]] = None,
                 preferred_color_group_list_id: Optional[pulumi.Input[_builtins.str]] = None,
                 preferred_color_group_list_version: Optional[pulumi.Input[_builtins.int]] = None,
                 service_tloc_color: Optional[pulumi.Input[_builtins.str]] = None,
                 service_tloc_encapsulation: Optional[pulumi.Input[_builtins.str]] = None,
                 service_tloc_ip: Optional[pulumi.Input[_builtins.str]] = None,
                 service_tloc_list_id: Optional[pulumi.Input[_builtins.str]] = None,
                 service_tloc_list_version: Optional[pulumi.Input[_builtins.int]] = None,
                 service_tloc_local: Optional[pulumi.Input[_builtins.bool]] = None,
                 service_tloc_restrict: Optional[pulumi.Input[_builtins.bool]] = None,
                 service_type: Optional[pulumi.Input[_builtins.str]] = None,
                 service_vpn_id: Optional[pulumi.Input[_builtins.int]] = None,
                 tloc_color: Optional[pulumi.Input[_builtins.str]] = None,
                 tloc_encapsulation: Optional[pulumi.Input[_builtins.str]] = None,
                 tloc_ip: Optional[pulumi.Input[_builtins.str]] = None,
                 tloc_list_id: Optional[pulumi.Input[_builtins.str]] = None,
                 tloc_list_version: Optional[pulumi.Input[_builtins.int]] = None,
                 vpn_id: Optional[pulumi.Input[_builtins.int]] = None):
        """
        :param pulumi.Input[_builtins.str] type: Type of set parameter
                 - Choices: `dscp`, `forwardingClass`, `localTlocList`, `nextHop`, `nextHopLoose`, `policer`, `preferredColorGroup`, `tlocList`, `tloc`, `service`, `vpn`
        :param pulumi.Input[_builtins.int] dscp: DSCP, Attribute conditional on `type` being equal to `dscp`
                 - Range: `0`-`63`
        :param pulumi.Input[_builtins.str] forwarding_class: Forwarding class, Attribute conditional on `type` being equal to `forwardingClass`
        :param pulumi.Input[_builtins.str] local_tloc_list_color: Local TLOC list color. Space separated list of colors., Attribute conditional on `type` being equal to `localTlocList`
        :param pulumi.Input[_builtins.str] local_tloc_list_encap: Local TLOC list encapsulation., Attribute conditional on `type` being equal to `localTlocList`
                 - Choices: `ipsec`, `gre`, `ipsec gre`
        :param pulumi.Input[_builtins.bool] local_tloc_list_restrict: Local TLOC list restrict, Attribute conditional on `type` being equal to `localTlocList`
        :param pulumi.Input[_builtins.str] next_hop: Next hop IP, Attribute conditional on `type` being equal to `nextHop`
        :param pulumi.Input[_builtins.bool] next_hop_loose: Use routing table entry to forward the packet in case Next-hop is not available, Attribute conditional on `type` being equal to `nextHopLoose`
        :param pulumi.Input[_builtins.str] policer_list_id: Policer list ID, Attribute conditional on `type` being equal to `policer`
        :param pulumi.Input[_builtins.int] policer_list_version: Policer list version
        :param pulumi.Input[_builtins.str] preferred_color_group_list_id: Preferred color group list ID, Attribute conditional on `type` being equal to `preferredColorGroup`
        :param pulumi.Input[_builtins.int] preferred_color_group_list_version: Preferred color group list version
        :param pulumi.Input[_builtins.str] service_tloc_color: Service TLOC color, Attribute conditional on `type` being equal to `service`
        :param pulumi.Input[_builtins.str] service_tloc_encapsulation: Service TLOC encapsulation, Attribute conditional on `type` being equal to `service`
                 - Choices: `ipsec`, `gre`, `ipsec gre`
        :param pulumi.Input[_builtins.str] service_tloc_ip: Service TLOC IP address, Attribute conditional on `type` being equal to `service`
        :param pulumi.Input[_builtins.str] service_tloc_list_id: Service TLOC list ID, Attribute conditional on `type` being equal to `service`
        :param pulumi.Input[_builtins.int] service_tloc_list_version: Service TLOC list version
        :param pulumi.Input[_builtins.bool] service_tloc_local: Service TLOC Local, Attribute conditional on `type` being equal to `service`
        :param pulumi.Input[_builtins.bool] service_tloc_restrict: Service TLOC Restrict, Attribute conditional on `type` being equal to `service`
        :param pulumi.Input[_builtins.str] service_type: Service type, Attribute conditional on `type` being equal to `service`
                 - Choices: `FW`, `IDP`, `IDS`, `netsvc1`, `netsvc2`, `netsvc3`, `netsvc4`, `netsvc5`
        :param pulumi.Input[_builtins.int] service_vpn_id: Service VPN ID, Attribute conditional on `type` being equal to `service`
                 - Range: `0`-`65536`
        :param pulumi.Input[_builtins.str] tloc_color: TLOC color, Attribute conditional on `type` being equal to `tloc`
        :param pulumi.Input[_builtins.str] tloc_encapsulation: TLOC encapsulation, Attribute conditional on `type` being equal to `tloc`
                 - Choices: `ipsec`, `gre`, `ipsec gre`
        :param pulumi.Input[_builtins.str] tloc_ip: TLOC IP address, Attribute conditional on `type` being equal to `tloc`
        :param pulumi.Input[_builtins.str] tloc_list_id: TLOC list ID, Attribute conditional on `type` being equal to `tlocList`
        :param pulumi.Input[_builtins.int] tloc_list_version: TLOC list version
        :param pulumi.Input[_builtins.int] vpn_id: DSCP, Attribute conditional on `type` being equal to `vpn`
                 - Range: `0`-`65530`
        """
        pulumi.set(__self__, "type", type)
        if dscp is not None:
            pulumi.set(__self__, "dscp", dscp)
        if forwarding_class is not None:
            pulumi.set(__self__, "forwarding_class", forwarding_class)
        if local_tloc_list_color is not None:
            pulumi.set(__self__, "local_tloc_list_color", local_tloc_list_color)
        if local_tloc_list_encap is not None:
            pulumi.set(__self__, "local_tloc_list_encap", local_tloc_list_encap)
        if local_tloc_list_restrict is not None:
            pulumi.set(__self__, "local_tloc_list_restrict", local_tloc_list_restrict)
        if next_hop is not None:
            pulumi.set(__self__, "next_hop", next_hop)
        if next_hop_loose is not None:
            pulumi.set(__self__, "next_hop_loose", next_hop_loose)
        if policer_list_id is not None:
            pulumi.set(__self__, "policer_list_id", policer_list_id)
        if policer_list_version is not None:
            pulumi.set(__self__, "policer_list_version", policer_list_version)
        if preferred_color_group_list_id is not None:
            pulumi.set(__self__, "preferred_color_group_list_id", preferred_color_group_list_id)
        if preferred_color_group_list_version is not None:
            pulumi.set(__self__, "preferred_color_group_list_version", preferred_color_group_list_version)
        if service_tloc_color is not None:
            pulumi.set(__self__, "service_tloc_color", service_tloc_color)
        if service_tloc_encapsulation is not None:
            pulumi.set(__self__, "service_tloc_encapsulation", service_tloc_encapsulation)
        if service_tloc_ip is not None:
            pulumi.set(__self__, "service_tloc_ip", service_tloc_ip)
        if service_tloc_list_id is not None:
            pulumi.set(__self__, "service_tloc_list_id", service_tloc_list_id)
        if service_tloc_list_version is not None:
            pulumi.set(__self__, "service_tloc_list_version", service_tloc_list_version)
        if service_tloc_local is not None:
            pulumi.set(__self__, "service_tloc_local", service_tloc_local)
        if service_tloc_restrict is not None:
            pulumi.set(__self__, "service_tloc_restrict", service_tloc_restrict)
        if service_type is not None:
            pulumi.set(__self__, "service_type", service_type)
        if service_vpn_id is not None:
            pulumi.set(__self__, "service_vpn_id", service_vpn_id)
        if tloc_color is not None:
            pulumi.set(__self__, "tloc_color", tloc_color)
        if tloc_encapsulation is not None:
            pulumi.set(__self__, "tloc_encapsulation", tloc_encapsulation)
        if tloc_ip is not None:
            pulumi.set(__self__, "tloc_ip", tloc_ip)
        if tloc_list_id is not None:
            pulumi.set(__self__, "tloc_list_id", tloc_list_id)
        if tloc_list_version is not None:
            pulumi.set(__self__, "tloc_list_version", tloc_list_version)
        if vpn_id is not None:
            pulumi.set(__self__, "vpn_id", vpn_id)

    @_builtins.property
    @pulumi.getter
    def type(self) -> pulumi.Input[_builtins.str]:
        """
        Type of set parameter
          - Choices: `dscp`, `forwardingClass`, `localTlocList`, `nextHop`, `nextHopLoose`, `policer`, `preferredColorGroup`, `tlocList`, `tloc`, `service`, `vpn`
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "type", value)

    @_builtins.property
    @pulumi.getter
    def dscp(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        DSCP, Attribute conditional on `type` being equal to `dscp`
          - Range: `0`-`63`
        """
        return pulumi.get(self, "dscp")

    @dscp.setter
    def dscp(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "dscp", value)

    @_builtins.property
    @pulumi.getter(name="forwardingClass")
    def forwarding_class(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Forwarding class, Attribute conditional on `type` being equal to `forwardingClass`
        """
        return pulumi.get(self, "forwarding_class")

    @forwarding_class.setter
    def forwarding_class(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "forwarding_class", value)

    @_builtins.property
    @pulumi.getter(name="localTlocListColor")
    def local_tloc_list_color(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Local TLOC list color. Space separated list of colors., Attribute conditional on `type` being equal to `localTlocList`
        """
        return pulumi.get(self, "local_tloc_list_color")

    @local_tloc_list_color.setter
    def local_tloc_list_color(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "local_tloc_list_color", value)

    @_builtins.property
    @pulumi.getter(name="localTlocListEncap")
    def local_tloc_list_encap(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Local TLOC list encapsulation., Attribute conditional on `type` being equal to `localTlocList`
          - Choices: `ipsec`, `gre`, `ipsec gre`
        """
        return pulumi.get(self, "local_tloc_list_encap")

    @local_tloc_list_encap.setter
    def local_tloc_list_encap(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "local_tloc_list_encap", value)

    @_builtins.property
    @pulumi.getter(name="localTlocListRestrict")
    def local_tloc_list_restrict(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Local TLOC list restrict, Attribute conditional on `type` being equal to `localTlocList`
        """
        return pulumi.get(self, "local_tloc_list_restrict")

    @local_tloc_list_restrict.setter
    def local_tloc_list_restrict(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "local_tloc_list_restrict", value)

    @_builtins.property
    @pulumi.getter(name="nextHop")
    def next_hop(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Next hop IP, Attribute conditional on `type` being equal to `nextHop`
        """
        return pulumi.get(self, "next_hop")

    @next_hop.setter
    def next_hop(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "next_hop", value)

    @_builtins.property
    @pulumi.getter(name="nextHopLoose")
    def next_hop_loose(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Use routing table entry to forward the packet in case Next-hop is not available, Attribute conditional on `type` being equal to `nextHopLoose`
        """
        return pulumi.get(self, "next_hop_loose")

    @next_hop_loose.setter
    def next_hop_loose(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "next_hop_loose", value)

    @_builtins.property
    @pulumi.getter(name="policerListId")
    def policer_list_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Policer list ID, Attribute conditional on `type` being equal to `policer`
        """
        return pulumi.get(self, "policer_list_id")

    @policer_list_id.setter
    def policer_list_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "policer_list_id", value)

    @_builtins.property
    @pulumi.getter(name="policerListVersion")
    def policer_list_version(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        Policer list version
        """
        return pulumi.get(self, "policer_list_version")

    @policer_list_version.setter
    def policer_list_version(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "policer_list_version", value)

    @_builtins.property
    @pulumi.getter(name="preferredColorGroupListId")
    def preferred_color_group_list_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Preferred color group list ID, Attribute conditional on `type` being equal to `preferredColorGroup`
        """
        return pulumi.get(self, "preferred_color_group_list_id")

    @preferred_color_group_list_id.setter
    def preferred_color_group_list_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "preferred_color_group_list_id", value)

    @_builtins.property
    @pulumi.getter(name="preferredColorGroupListVersion")
    def preferred_color_group_list_version(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        Preferred color group list version
        """
        return pulumi.get(self, "preferred_color_group_list_version")

    @preferred_color_group_list_version.setter
    def preferred_color_group_list_version(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "preferred_color_group_list_version", value)

    @_builtins.property
    @pulumi.getter(name="serviceTlocColor")
    def service_tloc_color(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Service TLOC color, Attribute conditional on `type` being equal to `service`
        """
        return pulumi.get(self, "service_tloc_color")

    @service_tloc_color.setter
    def service_tloc_color(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "service_tloc_color", value)

    @_builtins.property
    @pulumi.getter(name="serviceTlocEncapsulation")
    def service_tloc_encapsulation(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Service TLOC encapsulation, Attribute conditional on `type` being equal to `service`
          - Choices: `ipsec`, `gre`, `ipsec gre`
        """
        return pulumi.get(self, "service_tloc_encapsulation")

    @service_tloc_encapsulation.setter
    def service_tloc_encapsulation(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "service_tloc_encapsulation", value)

    @_builtins.property
    @pulumi.getter(name="serviceTlocIp")
    def service_tloc_ip(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Service TLOC IP address, Attribute conditional on `type` being equal to `service`
        """
        return pulumi.get(self, "service_tloc_ip")

    @service_tloc_ip.setter
    def service_tloc_ip(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "service_tloc_ip", value)

    @_builtins.property
    @pulumi.getter(name="serviceTlocListId")
    def service_tloc_list_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Service TLOC list ID, Attribute conditional on `type` being equal to `service`
        """
        return pulumi.get(self, "service_tloc_list_id")

    @service_tloc_list_id.setter
    def service_tloc_list_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "service_tloc_list_id", value)

    @_builtins.property
    @pulumi.getter(name="serviceTlocListVersion")
    def service_tloc_list_version(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        Service TLOC list version
        """
        return pulumi.get(self, "service_tloc_list_version")

    @service_tloc_list_version.setter
    def service_tloc_list_version(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "service_tloc_list_version", value)

    @_builtins.property
    @pulumi.getter(name="serviceTlocLocal")
    def service_tloc_local(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Service TLOC Local, Attribute conditional on `type` being equal to `service`
        """
        return pulumi.get(self, "service_tloc_local")

    @service_tloc_local.setter
    def service_tloc_local(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "service_tloc_local", value)

    @_builtins.property
    @pulumi.getter(name="serviceTlocRestrict")
    def service_tloc_restrict(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Service TLOC Restrict, Attribute conditional on `type` being equal to `service`
        """
        return pulumi.get(self, "service_tloc_restrict")

    @service_tloc_restrict.setter
    def service_tloc_restrict(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "service_tloc_restrict", value)

    @_builtins.property
    @pulumi.getter(name="serviceType")
    def service_type(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Service type, Attribute conditional on `type` being equal to `service`
          - Choices: `FW`, `IDP`, `IDS`, `netsvc1`, `netsvc2`, `netsvc3`, `netsvc4`, `netsvc5`
        """
        return pulumi.get(self, "service_type")

    @service_type.setter
    def service_type(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "service_type", value)

    @_builtins.property
    @pulumi.getter(name="serviceVpnId")
    def service_vpn_id(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        Service VPN ID, Attribute conditional on `type` being equal to `service`
          - Range: `0`-`65536`
        """
        return pulumi.get(self, "service_vpn_id")

    @service_vpn_id.setter
    def service_vpn_id(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "service_vpn_id", value)

    @_builtins.property
    @pulumi.getter(name="tlocColor")
    def tloc_color(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        TLOC color, Attribute conditional on `type` being equal to `tloc`
        """
        return pulumi.get(self, "tloc_color")

    @tloc_color.setter
    def tloc_color(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "tloc_color", value)

    @_builtins.property
    @pulumi.getter(name="tlocEncapsulation")
    def tloc_encapsulation(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        TLOC encapsulation, Attribute conditional on `type` being equal to `tloc`
          - Choices: `ipsec`, `gre`, `ipsec gre`
        """
        return pulumi.get(self, "tloc_encapsulation")

    @tloc_encapsulation.setter
    def tloc_encapsulation(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "tloc_encapsulation", value)

    @_builtins.property
    @pulumi.getter(name="tlocIp")
    def tloc_ip(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        TLOC IP address, Attribute conditional on `type` being equal to `tloc`
        """
        return pulumi.get(self, "tloc_ip")

    @tloc_ip.setter
    def tloc_ip(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "tloc_ip", value)

    @_builtins.property
    @pulumi.getter(name="tlocListId")
    def tloc_list_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        TLOC list ID, Attribute conditional on `type` being equal to `tlocList`
        """
        return pulumi.get(self, "tloc_list_id")

    @tloc_list_id.setter
    def tloc_list_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "tloc_list_id", value)

    @_builtins.property
    @pulumi.getter(name="tlocListVersion")
    def tloc_list_version(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        TLOC list version
        """
        return pulumi.get(self, "tloc_list_version")

    @tloc_list_version.setter
    def tloc_list_version(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "tloc_list_version", value)

    @_builtins.property
    @pulumi.getter(name="vpnId")
    def vpn_id(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        DSCP, Attribute conditional on `type` being equal to `vpn`
          - Range: `0`-`65530`
        """
        return pulumi.get(self, "vpn_id")

    @vpn_id.setter
    def vpn_id(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "vpn_id", value)


if not MYPY:
    class TrafficDataPolicyDefinitionSequenceMatchEntryArgsDict(TypedDict):
        type: pulumi.Input[_builtins.str]
        """
        Type of match entry
          - Choices: `appList`, `dnsAppList`, `dns`, `dscp`, `packetLength`, `plp`, `protocol`, `sourceDataPrefixList`, `sourceIp`, `sourcePort`, `destinationDataPrefixList`, `destinationIp`, `destinationRegion`, `destinationPort`, `tcp`, `trafficTo`, `icmpMessage`
        """
        application_list_id: NotRequired[pulumi.Input[_builtins.str]]
        """
        Application list ID, Attribute conditional on `type` being equal to `appList`
        """
        application_list_version: NotRequired[pulumi.Input[_builtins.int]]
        """
        Application list version
        """
        destination_data_prefix_list_id: NotRequired[pulumi.Input[_builtins.str]]
        """
        Destination Data Prefix list ID, Attribute conditional on `type` being equal to `destinationDataPrefixList`
        """
        destination_data_prefix_list_version: NotRequired[pulumi.Input[_builtins.int]]
        """
        Destination Data Prefix list version
        """
        destination_ip: NotRequired[pulumi.Input[_builtins.str]]
        """
        Destination IP, Attribute conditional on `type` being equal to `destinationIp`
        """
        destination_port: NotRequired[pulumi.Input[_builtins.str]]
        """
        Destination port, 0-65535 (Single value, range or multiple values separated by spaces), Attribute conditional on `type` being equal to `destinationPort`
        """
        destination_region: NotRequired[pulumi.Input[_builtins.str]]
        """
        Destination region, Attribute conditional on `type` being equal to `destinationRegion`
          - Choices: `primary-region`, `secondary-region`, `other-region`
        """
        dns: NotRequired[pulumi.Input[_builtins.str]]
        """
        DNS request or response, Attribute conditional on `type` being equal to `dns`
          - Choices: `request`, `response`
        """
        dns_application_list_id: NotRequired[pulumi.Input[_builtins.str]]
        """
        DNS Application list ID, Attribute conditional on `type` being equal to `dnsAppList`
        """
        dns_application_list_version: NotRequired[pulumi.Input[_builtins.int]]
        """
        DNS Application list version
        """
        dscp: NotRequired[pulumi.Input[_builtins.str]]
        """
        DSCP value, Attribute conditional on `type` being equal to `dscp`
        """
        icmp_message: NotRequired[pulumi.Input[_builtins.str]]
        """
        ICMP Message, Attribute conditional on `type` being equal to `icmpMessage`
        """
        packet_length: NotRequired[pulumi.Input[_builtins.int]]
        """
        Packet length, Attribute conditional on `type` being equal to `packetLength`
          - Range: `0`-`65535`
        """
        plp: NotRequired[pulumi.Input[_builtins.str]]
        """
        PLP, Attribute conditional on `type` being equal to `plp`
          - Choices: `low`, `high`
        """
        protocol: NotRequired[pulumi.Input[_builtins.str]]
        """
        IP Protocol, 0-255 (Single value or multiple values separated by spaces), Attribute conditional on `type` being equal to `protocol`
        """
        source_data_prefix_list_id: NotRequired[pulumi.Input[_builtins.str]]
        """
        Source Data Prefix list ID, Attribute conditional on `type` being equal to `sourceDataPrefixList`
        """
        source_data_prefix_list_version: NotRequired[pulumi.Input[_builtins.int]]
        """
        Source Data Prefix list version
        """
        source_ip: NotRequired[pulumi.Input[_builtins.str]]
        """
        Source IP, Attribute conditional on `type` being equal to `sourceIp`
        """
        source_port: NotRequired[pulumi.Input[_builtins.str]]
        """
        Source port, 0-65535 (Single value, range or multiple values separated by spaces), Attribute conditional on `type` being equal to `sourcePort`
        """
        tcp: NotRequired[pulumi.Input[_builtins.str]]
        """
        TCP flags, Attribute conditional on `type` being equal to `tcp`
          - Choices: `syn`
        """
        traffic_to: NotRequired[pulumi.Input[_builtins.str]]
        """
        Traffic to, Attribute conditional on `type` being equal to `trafficTo`
          - Choices: `access`, `core`, `service`
        """
elif False:
    TrafficDataPolicyDefinitionSequenceMatchEntryArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class TrafficDataPolicyDefinitionSequenceMatchEntryArgs:
    def __init__(__self__, *,
                 type: pulumi.Input[_builtins.str],
                 application_list_id: Optional[pulumi.Input[_builtins.str]] = None,
                 application_list_version: Optional[pulumi.Input[_builtins.int]] = None,
                 destination_data_prefix_list_id: Optional[pulumi.Input[_builtins.str]] = None,
                 destination_data_prefix_list_version: Optional[pulumi.Input[_builtins.int]] = None,
                 destination_ip: Optional[pulumi.Input[_builtins.str]] = None,
                 destination_port: Optional[pulumi.Input[_builtins.str]] = None,
                 destination_region: Optional[pulumi.Input[_builtins.str]] = None,
                 dns: Optional[pulumi.Input[_builtins.str]] = None,
                 dns_application_list_id: Optional[pulumi.Input[_builtins.str]] = None,
                 dns_application_list_version: Optional[pulumi.Input[_builtins.int]] = None,
                 dscp: Optional[pulumi.Input[_builtins.str]] = None,
                 icmp_message: Optional[pulumi.Input[_builtins.str]] = None,
                 packet_length: Optional[pulumi.Input[_builtins.int]] = None,
                 plp: Optional[pulumi.Input[_builtins.str]] = None,
                 protocol: Optional[pulumi.Input[_builtins.str]] = None,
                 source_data_prefix_list_id: Optional[pulumi.Input[_builtins.str]] = None,
                 source_data_prefix_list_version: Optional[pulumi.Input[_builtins.int]] = None,
                 source_ip: Optional[pulumi.Input[_builtins.str]] = None,
                 source_port: Optional[pulumi.Input[_builtins.str]] = None,
                 tcp: Optional[pulumi.Input[_builtins.str]] = None,
                 traffic_to: Optional[pulumi.Input[_builtins.str]] = None):
        """
        :param pulumi.Input[_builtins.str] type: Type of match entry
                 - Choices: `appList`, `dnsAppList`, `dns`, `dscp`, `packetLength`, `plp`, `protocol`, `sourceDataPrefixList`, `sourceIp`, `sourcePort`, `destinationDataPrefixList`, `destinationIp`, `destinationRegion`, `destinationPort`, `tcp`, `trafficTo`, `icmpMessage`
        :param pulumi.Input[_builtins.str] application_list_id: Application list ID, Attribute conditional on `type` being equal to `appList`
        :param pulumi.Input[_builtins.int] application_list_version: Application list version
        :param pulumi.Input[_builtins.str] destination_data_prefix_list_id: Destination Data Prefix list ID, Attribute conditional on `type` being equal to `destinationDataPrefixList`
        :param pulumi.Input[_builtins.int] destination_data_prefix_list_version: Destination Data Prefix list version
        :param pulumi.Input[_builtins.str] destination_ip: Destination IP, Attribute conditional on `type` being equal to `destinationIp`
        :param pulumi.Input[_builtins.str] destination_port: Destination port, 0-65535 (Single value, range or multiple values separated by spaces), Attribute conditional on `type` being equal to `destinationPort`
        :param pulumi.Input[_builtins.str] destination_region: Destination region, Attribute conditional on `type` being equal to `destinationRegion`
                 - Choices: `primary-region`, `secondary-region`, `other-region`
        :param pulumi.Input[_builtins.str] dns: DNS request or response, Attribute conditional on `type` being equal to `dns`
                 - Choices: `request`, `response`
        :param pulumi.Input[_builtins.str] dns_application_list_id: DNS Application list ID, Attribute conditional on `type` being equal to `dnsAppList`
        :param pulumi.Input[_builtins.int] dns_application_list_version: DNS Application list version
        :param pulumi.Input[_builtins.str] dscp: DSCP value, Attribute conditional on `type` being equal to `dscp`
        :param pulumi.Input[_builtins.str] icmp_message: ICMP Message, Attribute conditional on `type` being equal to `icmpMessage`
        :param pulumi.Input[_builtins.int] packet_length: Packet length, Attribute conditional on `type` being equal to `packetLength`
                 - Range: `0`-`65535`
        :param pulumi.Input[_builtins.str] plp: PLP, Attribute conditional on `type` being equal to `plp`
                 - Choices: `low`, `high`
        :param pulumi.Input[_builtins.str] protocol: IP Protocol, 0-255 (Single value or multiple values separated by spaces), Attribute conditional on `type` being equal to `protocol`
        :param pulumi.Input[_builtins.str] source_data_prefix_list_id: Source Data Prefix list ID, Attribute conditional on `type` being equal to `sourceDataPrefixList`
        :param pulumi.Input[_builtins.int] source_data_prefix_list_version: Source Data Prefix list version
        :param pulumi.Input[_builtins.str] source_ip: Source IP, Attribute conditional on `type` being equal to `sourceIp`
        :param pulumi.Input[_builtins.str] source_port: Source port, 0-65535 (Single value, range or multiple values separated by spaces), Attribute conditional on `type` being equal to `sourcePort`
        :param pulumi.Input[_builtins.str] tcp: TCP flags, Attribute conditional on `type` being equal to `tcp`
                 - Choices: `syn`
        :param pulumi.Input[_builtins.str] traffic_to: Traffic to, Attribute conditional on `type` being equal to `trafficTo`
                 - Choices: `access`, `core`, `service`
        """
        pulumi.set(__self__, "type", type)
        if application_list_id is not None:
            pulumi.set(__self__, "application_list_id", application_list_id)
        if application_list_version is not None:
            pulumi.set(__self__, "application_list_version", application_list_version)
        if destination_data_prefix_list_id is not None:
            pulumi.set(__self__, "destination_data_prefix_list_id", destination_data_prefix_list_id)
        if destination_data_prefix_list_version is not None:
            pulumi.set(__self__, "destination_data_prefix_list_version", destination_data_prefix_list_version)
        if destination_ip is not None:
            pulumi.set(__self__, "destination_ip", destination_ip)
        if destination_port is not None:
            pulumi.set(__self__, "destination_port", destination_port)
        if destination_region is not None:
            pulumi.set(__self__, "destination_region", destination_region)
        if dns is not None:
            pulumi.set(__self__, "dns", dns)
        if dns_application_list_id is not None:
            pulumi.set(__self__, "dns_application_list_id", dns_application_list_id)
        if dns_application_list_version is not None:
            pulumi.set(__self__, "dns_application_list_version", dns_application_list_version)
        if dscp is not None:
            pulumi.set(__self__, "dscp", dscp)
        if icmp_message is not None:
            pulumi.set(__self__, "icmp_message", icmp_message)
        if packet_length is not None:
            pulumi.set(__self__, "packet_length", packet_length)
        if plp is not None:
            pulumi.set(__self__, "plp", plp)
        if protocol is not None:
            pulumi.set(__self__, "protocol", protocol)
        if source_data_prefix_list_id is not None:
            pulumi.set(__self__, "source_data_prefix_list_id", source_data_prefix_list_id)
        if source_data_prefix_list_version is not None:
            pulumi.set(__self__, "source_data_prefix_list_version", source_data_prefix_list_version)
        if source_ip is not None:
            pulumi.set(__self__, "source_ip", source_ip)
        if source_port is not None:
            pulumi.set(__self__, "source_port", source_port)
        if tcp is not None:
            pulumi.set(__self__, "tcp", tcp)
        if traffic_to is not None:
            pulumi.set(__self__, "traffic_to", traffic_to)

    @_builtins.property
    @pulumi.getter
    def type(self) -> pulumi.Input[_builtins.str]:
        """
        Type of match entry
          - Choices: `appList`, `dnsAppList`, `dns`, `dscp`, `packetLength`, `plp`, `protocol`, `sourceDataPrefixList`, `sourceIp`, `sourcePort`, `destinationDataPrefixList`, `destinationIp`, `destinationRegion`, `destinationPort`, `tcp`, `trafficTo`, `icmpMessage`
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "type", value)

    @_builtins.property
    @pulumi.getter(name="applicationListId")
    def application_list_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Application list ID, Attribute conditional on `type` being equal to `appList`
        """
        return pulumi.get(self, "application_list_id")

    @application_list_id.setter
    def application_list_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "application_list_id", value)

    @_builtins.property
    @pulumi.getter(name="applicationListVersion")
    def application_list_version(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        Application list version
        """
        return pulumi.get(self, "application_list_version")

    @application_list_version.setter
    def application_list_version(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "application_list_version", value)

    @_builtins.property
    @pulumi.getter(name="destinationDataPrefixListId")
    def destination_data_prefix_list_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Destination Data Prefix list ID, Attribute conditional on `type` being equal to `destinationDataPrefixList`
        """
        return pulumi.get(self, "destination_data_prefix_list_id")

    @destination_data_prefix_list_id.setter
    def destination_data_prefix_list_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "destination_data_prefix_list_id", value)

    @_builtins.property
    @pulumi.getter(name="destinationDataPrefixListVersion")
    def destination_data_prefix_list_version(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        Destination Data Prefix list version
        """
        return pulumi.get(self, "destination_data_prefix_list_version")

    @destination_data_prefix_list_version.setter
    def destination_data_prefix_list_version(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "destination_data_prefix_list_version", value)

    @_builtins.property
    @pulumi.getter(name="destinationIp")
    def destination_ip(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Destination IP, Attribute conditional on `type` being equal to `destinationIp`
        """
        return pulumi.get(self, "destination_ip")

    @destination_ip.setter
    def destination_ip(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "destination_ip", value)

    @_builtins.property
    @pulumi.getter(name="destinationPort")
    def destination_port(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Destination port, 0-65535 (Single value, range or multiple values separated by spaces), Attribute conditional on `type` being equal to `destinationPort`
        """
        return pulumi.get(self, "destination_port")

    @destination_port.setter
    def destination_port(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "destination_port", value)

    @_builtins.property
    @pulumi.getter(name="destinationRegion")
    def destination_region(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Destination region, Attribute conditional on `type` being equal to `destinationRegion`
          - Choices: `primary-region`, `secondary-region`, `other-region`
        """
        return pulumi.get(self, "destination_region")

    @destination_region.setter
    def destination_region(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "destination_region", value)

    @_builtins.property
    @pulumi.getter
    def dns(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        DNS request or response, Attribute conditional on `type` being equal to `dns`
          - Choices: `request`, `response`
        """
        return pulumi.get(self, "dns")

    @dns.setter
    def dns(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "dns", value)

    @_builtins.property
    @pulumi.getter(name="dnsApplicationListId")
    def dns_application_list_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        DNS Application list ID, Attribute conditional on `type` being equal to `dnsAppList`
        """
        return pulumi.get(self, "dns_application_list_id")

    @dns_application_list_id.setter
    def dns_application_list_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "dns_application_list_id", value)

    @_builtins.property
    @pulumi.getter(name="dnsApplicationListVersion")
    def dns_application_list_version(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        DNS Application list version
        """
        return pulumi.get(self, "dns_application_list_version")

    @dns_application_list_version.setter
    def dns_application_list_version(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "dns_application_list_version", value)

    @_builtins.property
    @pulumi.getter
    def dscp(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        DSCP value, Attribute conditional on `type` being equal to `dscp`
        """
        return pulumi.get(self, "dscp")

    @dscp.setter
    def dscp(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "dscp", value)

    @_builtins.property
    @pulumi.getter(name="icmpMessage")
    def icmp_message(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        ICMP Message, Attribute conditional on `type` being equal to `icmpMessage`
        """
        return pulumi.get(self, "icmp_message")

    @icmp_message.setter
    def icmp_message(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "icmp_message", value)

    @_builtins.property
    @pulumi.getter(name="packetLength")
    def packet_length(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        Packet length, Attribute conditional on `type` being equal to `packetLength`
          - Range: `0`-`65535`
        """
        return pulumi.get(self, "packet_length")

    @packet_length.setter
    def packet_length(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "packet_length", value)

    @_builtins.property
    @pulumi.getter
    def plp(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        PLP, Attribute conditional on `type` being equal to `plp`
          - Choices: `low`, `high`
        """
        return pulumi.get(self, "plp")

    @plp.setter
    def plp(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "plp", value)

    @_builtins.property
    @pulumi.getter
    def protocol(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        IP Protocol, 0-255 (Single value or multiple values separated by spaces), Attribute conditional on `type` being equal to `protocol`
        """
        return pulumi.get(self, "protocol")

    @protocol.setter
    def protocol(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "protocol", value)

    @_builtins.property
    @pulumi.getter(name="sourceDataPrefixListId")
    def source_data_prefix_list_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Source Data Prefix list ID, Attribute conditional on `type` being equal to `sourceDataPrefixList`
        """
        return pulumi.get(self, "source_data_prefix_list_id")

    @source_data_prefix_list_id.setter
    def source_data_prefix_list_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "source_data_prefix_list_id", value)

    @_builtins.property
    @pulumi.getter(name="sourceDataPrefixListVersion")
    def source_data_prefix_list_version(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        Source Data Prefix list version
        """
        return pulumi.get(self, "source_data_prefix_list_version")

    @source_data_prefix_list_version.setter
    def source_data_prefix_list_version(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "source_data_prefix_list_version", value)

    @_builtins.property
    @pulumi.getter(name="sourceIp")
    def source_ip(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Source IP, Attribute conditional on `type` being equal to `sourceIp`
        """
        return pulumi.get(self, "source_ip")

    @source_ip.setter
    def source_ip(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "source_ip", value)

    @_builtins.property
    @pulumi.getter(name="sourcePort")
    def source_port(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Source port, 0-65535 (Single value, range or multiple values separated by spaces), Attribute conditional on `type` being equal to `sourcePort`
        """
        return pulumi.get(self, "source_port")

    @source_port.setter
    def source_port(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "source_port", value)

    @_builtins.property
    @pulumi.getter
    def tcp(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        TCP flags, Attribute conditional on `type` being equal to `tcp`
          - Choices: `syn`
        """
        return pulumi.get(self, "tcp")

    @tcp.setter
    def tcp(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "tcp", value)

    @_builtins.property
    @pulumi.getter(name="trafficTo")
    def traffic_to(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Traffic to, Attribute conditional on `type` being equal to `trafficTo`
          - Choices: `access`, `core`, `service`
        """
        return pulumi.get(self, "traffic_to")

    @traffic_to.setter
    def traffic_to(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "traffic_to", value)


if not MYPY:
    class TransportIpv4AclFeatureSequenceArgsDict(TypedDict):
        actions: NotRequired[pulumi.Input[Sequence[pulumi.Input['TransportIpv4AclFeatureSequenceActionArgsDict']]]]
        """
        Define list of actions
        """
        base_action: NotRequired[pulumi.Input[_builtins.str]]
        """
        Base Action
          - Choices: `drop`, `accept`
          - Default value: `accept`
        """
        match_entries: NotRequired[pulumi.Input[Sequence[pulumi.Input['TransportIpv4AclFeatureSequenceMatchEntryArgsDict']]]]
        """
        Define match conditions
        """
        sequence_id: NotRequired[pulumi.Input[_builtins.int]]
        """
        Sequence Id
          - Range: `1`-`65536`
        """
        sequence_name: NotRequired[pulumi.Input[_builtins.str]]
        """
        Sequence Name
        """
elif False:
    TransportIpv4AclFeatureSequenceArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class TransportIpv4AclFeatureSequenceArgs:
    def __init__(__self__, *,
                 actions: Optional[pulumi.Input[Sequence[pulumi.Input['TransportIpv4AclFeatureSequenceActionArgs']]]] = None,
                 base_action: Optional[pulumi.Input[_builtins.str]] = None,
                 match_entries: Optional[pulumi.Input[Sequence[pulumi.Input['TransportIpv4AclFeatureSequenceMatchEntryArgs']]]] = None,
                 sequence_id: Optional[pulumi.Input[_builtins.int]] = None,
                 sequence_name: Optional[pulumi.Input[_builtins.str]] = None):
        """
        :param pulumi.Input[Sequence[pulumi.Input['TransportIpv4AclFeatureSequenceActionArgs']]] actions: Define list of actions
        :param pulumi.Input[_builtins.str] base_action: Base Action
                 - Choices: `drop`, `accept`
                 - Default value: `accept`
        :param pulumi.Input[Sequence[pulumi.Input['TransportIpv4AclFeatureSequenceMatchEntryArgs']]] match_entries: Define match conditions
        :param pulumi.Input[_builtins.int] sequence_id: Sequence Id
                 - Range: `1`-`65536`
        :param pulumi.Input[_builtins.str] sequence_name: Sequence Name
        """
        if actions is not None:
            pulumi.set(__self__, "actions", actions)
        if base_action is not None:
            pulumi.set(__self__, "base_action", base_action)
        if match_entries is not None:
            pulumi.set(__self__, "match_entries", match_entries)
        if sequence_id is not None:
            pulumi.set(__self__, "sequence_id", sequence_id)
        if sequence_name is not None:
            pulumi.set(__self__, "sequence_name", sequence_name)

    @_builtins.property
    @pulumi.getter
    def actions(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['TransportIpv4AclFeatureSequenceActionArgs']]]]:
        """
        Define list of actions
        """
        return pulumi.get(self, "actions")

    @actions.setter
    def actions(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['TransportIpv4AclFeatureSequenceActionArgs']]]]):
        pulumi.set(self, "actions", value)

    @_builtins.property
    @pulumi.getter(name="baseAction")
    def base_action(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Base Action
          - Choices: `drop`, `accept`
          - Default value: `accept`
        """
        return pulumi.get(self, "base_action")

    @base_action.setter
    def base_action(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "base_action", value)

    @_builtins.property
    @pulumi.getter(name="matchEntries")
    def match_entries(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['TransportIpv4AclFeatureSequenceMatchEntryArgs']]]]:
        """
        Define match conditions
        """
        return pulumi.get(self, "match_entries")

    @match_entries.setter
    def match_entries(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['TransportIpv4AclFeatureSequenceMatchEntryArgs']]]]):
        pulumi.set(self, "match_entries", value)

    @_builtins.property
    @pulumi.getter(name="sequenceId")
    def sequence_id(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        Sequence Id
          - Range: `1`-`65536`
        """
        return pulumi.get(self, "sequence_id")

    @sequence_id.setter
    def sequence_id(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "sequence_id", value)

    @_builtins.property
    @pulumi.getter(name="sequenceName")
    def sequence_name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Sequence Name
        """
        return pulumi.get(self, "sequence_name")

    @sequence_name.setter
    def sequence_name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "sequence_name", value)


if not MYPY:
    class TransportIpv4AclFeatureSequenceActionArgsDict(TypedDict):
        accept_counter_name: NotRequired[pulumi.Input[_builtins.str]]
        """
        Counter Name
        """
        accept_log: NotRequired[pulumi.Input[_builtins.bool]]
        """
        Enable Log
          - Default value: `false`
        """
        accept_mirror_list_id: NotRequired[pulumi.Input[_builtins.str]]
        accept_policer_id: NotRequired[pulumi.Input[_builtins.str]]
        accept_set_dscp: NotRequired[pulumi.Input[_builtins.int]]
        """
        DSCP number
          - Range: `0`-`63`
        """
        accept_set_next_hop: NotRequired[pulumi.Input[_builtins.str]]
        """
        Set Next Hop (IPV4 address)
        """
        drop_counter_name: NotRequired[pulumi.Input[_builtins.str]]
        """
        Counter Name
        """
        drop_log: NotRequired[pulumi.Input[_builtins.bool]]
        """
        Enable Log
          - Default value: `false`
        """
elif False:
    TransportIpv4AclFeatureSequenceActionArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class TransportIpv4AclFeatureSequenceActionArgs:
    def __init__(__self__, *,
                 accept_counter_name: Optional[pulumi.Input[_builtins.str]] = None,
                 accept_log: Optional[pulumi.Input[_builtins.bool]] = None,
                 accept_mirror_list_id: Optional[pulumi.Input[_builtins.str]] = None,
                 accept_policer_id: Optional[pulumi.Input[_builtins.str]] = None,
                 accept_set_dscp: Optional[pulumi.Input[_builtins.int]] = None,
                 accept_set_next_hop: Optional[pulumi.Input[_builtins.str]] = None,
                 drop_counter_name: Optional[pulumi.Input[_builtins.str]] = None,
                 drop_log: Optional[pulumi.Input[_builtins.bool]] = None):
        """
        :param pulumi.Input[_builtins.str] accept_counter_name: Counter Name
        :param pulumi.Input[_builtins.bool] accept_log: Enable Log
                 - Default value: `false`
        :param pulumi.Input[_builtins.int] accept_set_dscp: DSCP number
                 - Range: `0`-`63`
        :param pulumi.Input[_builtins.str] accept_set_next_hop: Set Next Hop (IPV4 address)
        :param pulumi.Input[_builtins.str] drop_counter_name: Counter Name
        :param pulumi.Input[_builtins.bool] drop_log: Enable Log
                 - Default value: `false`
        """
        if accept_counter_name is not None:
            pulumi.set(__self__, "accept_counter_name", accept_counter_name)
        if accept_log is not None:
            pulumi.set(__self__, "accept_log", accept_log)
        if accept_mirror_list_id is not None:
            pulumi.set(__self__, "accept_mirror_list_id", accept_mirror_list_id)
        if accept_policer_id is not None:
            pulumi.set(__self__, "accept_policer_id", accept_policer_id)
        if accept_set_dscp is not None:
            pulumi.set(__self__, "accept_set_dscp", accept_set_dscp)
        if accept_set_next_hop is not None:
            pulumi.set(__self__, "accept_set_next_hop", accept_set_next_hop)
        if drop_counter_name is not None:
            pulumi.set(__self__, "drop_counter_name", drop_counter_name)
        if drop_log is not None:
            pulumi.set(__self__, "drop_log", drop_log)

    @_builtins.property
    @pulumi.getter(name="acceptCounterName")
    def accept_counter_name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Counter Name
        """
        return pulumi.get(self, "accept_counter_name")

    @accept_counter_name.setter
    def accept_counter_name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "accept_counter_name", value)

    @_builtins.property
    @pulumi.getter(name="acceptLog")
    def accept_log(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Enable Log
          - Default value: `false`
        """
        return pulumi.get(self, "accept_log")

    @accept_log.setter
    def accept_log(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "accept_log", value)

    @_builtins.property
    @pulumi.getter(name="acceptMirrorListId")
    def accept_mirror_list_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "accept_mirror_list_id")

    @accept_mirror_list_id.setter
    def accept_mirror_list_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "accept_mirror_list_id", value)

    @_builtins.property
    @pulumi.getter(name="acceptPolicerId")
    def accept_policer_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "accept_policer_id")

    @accept_policer_id.setter
    def accept_policer_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "accept_policer_id", value)

    @_builtins.property
    @pulumi.getter(name="acceptSetDscp")
    def accept_set_dscp(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        DSCP number
          - Range: `0`-`63`
        """
        return pulumi.get(self, "accept_set_dscp")

    @accept_set_dscp.setter
    def accept_set_dscp(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "accept_set_dscp", value)

    @_builtins.property
    @pulumi.getter(name="acceptSetNextHop")
    def accept_set_next_hop(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Set Next Hop (IPV4 address)
        """
        return pulumi.get(self, "accept_set_next_hop")

    @accept_set_next_hop.setter
    def accept_set_next_hop(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "accept_set_next_hop", value)

    @_builtins.property
    @pulumi.getter(name="dropCounterName")
    def drop_counter_name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Counter Name
        """
        return pulumi.get(self, "drop_counter_name")

    @drop_counter_name.setter
    def drop_counter_name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "drop_counter_name", value)

    @_builtins.property
    @pulumi.getter(name="dropLog")
    def drop_log(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Enable Log
          - Default value: `false`
        """
        return pulumi.get(self, "drop_log")

    @drop_log.setter
    def drop_log(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "drop_log", value)


if not MYPY:
    class TransportIpv4AclFeatureSequenceMatchEntryArgsDict(TypedDict):
        destination_data_prefix: NotRequired[pulumi.Input[_builtins.str]]
        """
        Destination Data IP Prefix
        """
        destination_data_prefix_list_id: NotRequired[pulumi.Input[_builtins.str]]
        destination_data_prefix_variable: NotRequired[pulumi.Input[_builtins.str]]
        """
        Variable name
        """
        destination_ports: NotRequired[pulumi.Input[Sequence[pulumi.Input['TransportIpv4AclFeatureSequenceMatchEntryDestinationPortArgsDict']]]]
        """
        Destination Port List
        """
        dscps: NotRequired[pulumi.Input[Sequence[pulumi.Input[_builtins.int]]]]
        """
        DSCP number
        """
        icmp_messages: NotRequired[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]
        """
        ICMP Message
        """
        packet_length: NotRequired[pulumi.Input[_builtins.str]]
        """
        Packet Length
        """
        protocols: NotRequired[pulumi.Input[Sequence[pulumi.Input[_builtins.int]]]]
        """
        protocol number list with at least one item
        """
        source_data_prefix: NotRequired[pulumi.Input[_builtins.str]]
        """
        Source Data IP Prefix
        """
        source_data_prefix_list_id: NotRequired[pulumi.Input[_builtins.str]]
        source_data_prefix_variable: NotRequired[pulumi.Input[_builtins.str]]
        """
        Variable name
        """
        source_ports: NotRequired[pulumi.Input[Sequence[pulumi.Input['TransportIpv4AclFeatureSequenceMatchEntrySourcePortArgsDict']]]]
        """
        Source Port List
        """
        tcp_state: NotRequired[pulumi.Input[_builtins.str]]
        """
        TCP States
          - Choices: `syn`
        """
elif False:
    TransportIpv4AclFeatureSequenceMatchEntryArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class TransportIpv4AclFeatureSequenceMatchEntryArgs:
    def __init__(__self__, *,
                 destination_data_prefix: Optional[pulumi.Input[_builtins.str]] = None,
                 destination_data_prefix_list_id: Optional[pulumi.Input[_builtins.str]] = None,
                 destination_data_prefix_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 destination_ports: Optional[pulumi.Input[Sequence[pulumi.Input['TransportIpv4AclFeatureSequenceMatchEntryDestinationPortArgs']]]] = None,
                 dscps: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.int]]]] = None,
                 icmp_messages: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 packet_length: Optional[pulumi.Input[_builtins.str]] = None,
                 protocols: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.int]]]] = None,
                 source_data_prefix: Optional[pulumi.Input[_builtins.str]] = None,
                 source_data_prefix_list_id: Optional[pulumi.Input[_builtins.str]] = None,
                 source_data_prefix_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 source_ports: Optional[pulumi.Input[Sequence[pulumi.Input['TransportIpv4AclFeatureSequenceMatchEntrySourcePortArgs']]]] = None,
                 tcp_state: Optional[pulumi.Input[_builtins.str]] = None):
        """
        :param pulumi.Input[_builtins.str] destination_data_prefix: Destination Data IP Prefix
        :param pulumi.Input[_builtins.str] destination_data_prefix_variable: Variable name
        :param pulumi.Input[Sequence[pulumi.Input['TransportIpv4AclFeatureSequenceMatchEntryDestinationPortArgs']]] destination_ports: Destination Port List
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.int]]] dscps: DSCP number
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] icmp_messages: ICMP Message
        :param pulumi.Input[_builtins.str] packet_length: Packet Length
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.int]]] protocols: protocol number list with at least one item
        :param pulumi.Input[_builtins.str] source_data_prefix: Source Data IP Prefix
        :param pulumi.Input[_builtins.str] source_data_prefix_variable: Variable name
        :param pulumi.Input[Sequence[pulumi.Input['TransportIpv4AclFeatureSequenceMatchEntrySourcePortArgs']]] source_ports: Source Port List
        :param pulumi.Input[_builtins.str] tcp_state: TCP States
                 - Choices: `syn`
        """
        if destination_data_prefix is not None:
            pulumi.set(__self__, "destination_data_prefix", destination_data_prefix)
        if destination_data_prefix_list_id is not None:
            pulumi.set(__self__, "destination_data_prefix_list_id", destination_data_prefix_list_id)
        if destination_data_prefix_variable is not None:
            pulumi.set(__self__, "destination_data_prefix_variable", destination_data_prefix_variable)
        if destination_ports is not None:
            pulumi.set(__self__, "destination_ports", destination_ports)
        if dscps is not None:
            pulumi.set(__self__, "dscps", dscps)
        if icmp_messages is not None:
            pulumi.set(__self__, "icmp_messages", icmp_messages)
        if packet_length is not None:
            pulumi.set(__self__, "packet_length", packet_length)
        if protocols is not None:
            pulumi.set(__self__, "protocols", protocols)
        if source_data_prefix is not None:
            pulumi.set(__self__, "source_data_prefix", source_data_prefix)
        if source_data_prefix_list_id is not None:
            pulumi.set(__self__, "source_data_prefix_list_id", source_data_prefix_list_id)
        if source_data_prefix_variable is not None:
            pulumi.set(__self__, "source_data_prefix_variable", source_data_prefix_variable)
        if source_ports is not None:
            pulumi.set(__self__, "source_ports", source_ports)
        if tcp_state is not None:
            pulumi.set(__self__, "tcp_state", tcp_state)

    @_builtins.property
    @pulumi.getter(name="destinationDataPrefix")
    def destination_data_prefix(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Destination Data IP Prefix
        """
        return pulumi.get(self, "destination_data_prefix")

    @destination_data_prefix.setter
    def destination_data_prefix(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "destination_data_prefix", value)

    @_builtins.property
    @pulumi.getter(name="destinationDataPrefixListId")
    def destination_data_prefix_list_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "destination_data_prefix_list_id")

    @destination_data_prefix_list_id.setter
    def destination_data_prefix_list_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "destination_data_prefix_list_id", value)

    @_builtins.property
    @pulumi.getter(name="destinationDataPrefixVariable")
    def destination_data_prefix_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "destination_data_prefix_variable")

    @destination_data_prefix_variable.setter
    def destination_data_prefix_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "destination_data_prefix_variable", value)

    @_builtins.property
    @pulumi.getter(name="destinationPorts")
    def destination_ports(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['TransportIpv4AclFeatureSequenceMatchEntryDestinationPortArgs']]]]:
        """
        Destination Port List
        """
        return pulumi.get(self, "destination_ports")

    @destination_ports.setter
    def destination_ports(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['TransportIpv4AclFeatureSequenceMatchEntryDestinationPortArgs']]]]):
        pulumi.set(self, "destination_ports", value)

    @_builtins.property
    @pulumi.getter
    def dscps(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.int]]]]:
        """
        DSCP number
        """
        return pulumi.get(self, "dscps")

    @dscps.setter
    def dscps(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.int]]]]):
        pulumi.set(self, "dscps", value)

    @_builtins.property
    @pulumi.getter(name="icmpMessages")
    def icmp_messages(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]:
        """
        ICMP Message
        """
        return pulumi.get(self, "icmp_messages")

    @icmp_messages.setter
    def icmp_messages(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "icmp_messages", value)

    @_builtins.property
    @pulumi.getter(name="packetLength")
    def packet_length(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Packet Length
        """
        return pulumi.get(self, "packet_length")

    @packet_length.setter
    def packet_length(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "packet_length", value)

    @_builtins.property
    @pulumi.getter
    def protocols(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.int]]]]:
        """
        protocol number list with at least one item
        """
        return pulumi.get(self, "protocols")

    @protocols.setter
    def protocols(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.int]]]]):
        pulumi.set(self, "protocols", value)

    @_builtins.property
    @pulumi.getter(name="sourceDataPrefix")
    def source_data_prefix(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Source Data IP Prefix
        """
        return pulumi.get(self, "source_data_prefix")

    @source_data_prefix.setter
    def source_data_prefix(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "source_data_prefix", value)

    @_builtins.property
    @pulumi.getter(name="sourceDataPrefixListId")
    def source_data_prefix_list_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "source_data_prefix_list_id")

    @source_data_prefix_list_id.setter
    def source_data_prefix_list_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "source_data_prefix_list_id", value)

    @_builtins.property
    @pulumi.getter(name="sourceDataPrefixVariable")
    def source_data_prefix_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "source_data_prefix_variable")

    @source_data_prefix_variable.setter
    def source_data_prefix_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "source_data_prefix_variable", value)

    @_builtins.property
    @pulumi.getter(name="sourcePorts")
    def source_ports(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['TransportIpv4AclFeatureSequenceMatchEntrySourcePortArgs']]]]:
        """
        Source Port List
        """
        return pulumi.get(self, "source_ports")

    @source_ports.setter
    def source_ports(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['TransportIpv4AclFeatureSequenceMatchEntrySourcePortArgs']]]]):
        pulumi.set(self, "source_ports", value)

    @_builtins.property
    @pulumi.getter(name="tcpState")
    def tcp_state(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        TCP States
          - Choices: `syn`
        """
        return pulumi.get(self, "tcp_state")

    @tcp_state.setter
    def tcp_state(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "tcp_state", value)


if not MYPY:
    class TransportIpv4AclFeatureSequenceMatchEntryDestinationPortArgsDict(TypedDict):
        port: NotRequired[pulumi.Input[_builtins.str]]
        """
        destination port range or individual port number
        """
elif False:
    TransportIpv4AclFeatureSequenceMatchEntryDestinationPortArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class TransportIpv4AclFeatureSequenceMatchEntryDestinationPortArgs:
    def __init__(__self__, *,
                 port: Optional[pulumi.Input[_builtins.str]] = None):
        """
        :param pulumi.Input[_builtins.str] port: destination port range or individual port number
        """
        if port is not None:
            pulumi.set(__self__, "port", port)

    @_builtins.property
    @pulumi.getter
    def port(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        destination port range or individual port number
        """
        return pulumi.get(self, "port")

    @port.setter
    def port(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "port", value)


if not MYPY:
    class TransportIpv4AclFeatureSequenceMatchEntrySourcePortArgsDict(TypedDict):
        port: NotRequired[pulumi.Input[_builtins.str]]
        """
        source port range or individual port number
        """
elif False:
    TransportIpv4AclFeatureSequenceMatchEntrySourcePortArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class TransportIpv4AclFeatureSequenceMatchEntrySourcePortArgs:
    def __init__(__self__, *,
                 port: Optional[pulumi.Input[_builtins.str]] = None):
        """
        :param pulumi.Input[_builtins.str] port: source port range or individual port number
        """
        if port is not None:
            pulumi.set(__self__, "port", port)

    @_builtins.property
    @pulumi.getter
    def port(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        source port range or individual port number
        """
        return pulumi.get(self, "port")

    @port.setter
    def port(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "port", value)


if not MYPY:
    class TransportIpv6AclFeatureSequenceArgsDict(TypedDict):
        actions: NotRequired[pulumi.Input[Sequence[pulumi.Input['TransportIpv6AclFeatureSequenceActionArgsDict']]]]
        """
        Define list of actions
        """
        base_action: NotRequired[pulumi.Input[_builtins.str]]
        """
        Base Action
          - Choices: `drop`, `accept`
          - Default value: `accept`
        """
        match_entries: NotRequired[pulumi.Input[Sequence[pulumi.Input['TransportIpv6AclFeatureSequenceMatchEntryArgsDict']]]]
        """
        Define match conditions
        """
        sequence_id: NotRequired[pulumi.Input[_builtins.int]]
        """
        Sequence Id
          - Range: `1`-`65536`
        """
        sequence_name: NotRequired[pulumi.Input[_builtins.str]]
        """
        Sequence Name
        """
elif False:
    TransportIpv6AclFeatureSequenceArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class TransportIpv6AclFeatureSequenceArgs:
    def __init__(__self__, *,
                 actions: Optional[pulumi.Input[Sequence[pulumi.Input['TransportIpv6AclFeatureSequenceActionArgs']]]] = None,
                 base_action: Optional[pulumi.Input[_builtins.str]] = None,
                 match_entries: Optional[pulumi.Input[Sequence[pulumi.Input['TransportIpv6AclFeatureSequenceMatchEntryArgs']]]] = None,
                 sequence_id: Optional[pulumi.Input[_builtins.int]] = None,
                 sequence_name: Optional[pulumi.Input[_builtins.str]] = None):
        """
        :param pulumi.Input[Sequence[pulumi.Input['TransportIpv6AclFeatureSequenceActionArgs']]] actions: Define list of actions
        :param pulumi.Input[_builtins.str] base_action: Base Action
                 - Choices: `drop`, `accept`
                 - Default value: `accept`
        :param pulumi.Input[Sequence[pulumi.Input['TransportIpv6AclFeatureSequenceMatchEntryArgs']]] match_entries: Define match conditions
        :param pulumi.Input[_builtins.int] sequence_id: Sequence Id
                 - Range: `1`-`65536`
        :param pulumi.Input[_builtins.str] sequence_name: Sequence Name
        """
        if actions is not None:
            pulumi.set(__self__, "actions", actions)
        if base_action is not None:
            pulumi.set(__self__, "base_action", base_action)
        if match_entries is not None:
            pulumi.set(__self__, "match_entries", match_entries)
        if sequence_id is not None:
            pulumi.set(__self__, "sequence_id", sequence_id)
        if sequence_name is not None:
            pulumi.set(__self__, "sequence_name", sequence_name)

    @_builtins.property
    @pulumi.getter
    def actions(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['TransportIpv6AclFeatureSequenceActionArgs']]]]:
        """
        Define list of actions
        """
        return pulumi.get(self, "actions")

    @actions.setter
    def actions(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['TransportIpv6AclFeatureSequenceActionArgs']]]]):
        pulumi.set(self, "actions", value)

    @_builtins.property
    @pulumi.getter(name="baseAction")
    def base_action(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Base Action
          - Choices: `drop`, `accept`
          - Default value: `accept`
        """
        return pulumi.get(self, "base_action")

    @base_action.setter
    def base_action(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "base_action", value)

    @_builtins.property
    @pulumi.getter(name="matchEntries")
    def match_entries(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['TransportIpv6AclFeatureSequenceMatchEntryArgs']]]]:
        """
        Define match conditions
        """
        return pulumi.get(self, "match_entries")

    @match_entries.setter
    def match_entries(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['TransportIpv6AclFeatureSequenceMatchEntryArgs']]]]):
        pulumi.set(self, "match_entries", value)

    @_builtins.property
    @pulumi.getter(name="sequenceId")
    def sequence_id(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        Sequence Id
          - Range: `1`-`65536`
        """
        return pulumi.get(self, "sequence_id")

    @sequence_id.setter
    def sequence_id(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "sequence_id", value)

    @_builtins.property
    @pulumi.getter(name="sequenceName")
    def sequence_name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Sequence Name
        """
        return pulumi.get(self, "sequence_name")

    @sequence_name.setter
    def sequence_name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "sequence_name", value)


if not MYPY:
    class TransportIpv6AclFeatureSequenceActionArgsDict(TypedDict):
        accept_counter_name: NotRequired[pulumi.Input[_builtins.str]]
        """
        Counter Name
        """
        accept_log: NotRequired[pulumi.Input[_builtins.bool]]
        """
        Enable Log
          - Default value: `false`
        """
        accept_mirror_list_id: NotRequired[pulumi.Input[_builtins.str]]
        accept_policer_id: NotRequired[pulumi.Input[_builtins.str]]
        accept_set_next_hop: NotRequired[pulumi.Input[_builtins.str]]
        """
        Set Next Hop (IPV6 address)
        """
        accept_traffic_class: NotRequired[pulumi.Input[_builtins.int]]
        """
        set traffic class number
          - Range: `0`-`63`
        """
        drop_counter_name: NotRequired[pulumi.Input[_builtins.str]]
        """
        Counter Name
        """
        drop_log: NotRequired[pulumi.Input[_builtins.bool]]
        """
        Enable Log
          - Default value: `false`
        """
elif False:
    TransportIpv6AclFeatureSequenceActionArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class TransportIpv6AclFeatureSequenceActionArgs:
    def __init__(__self__, *,
                 accept_counter_name: Optional[pulumi.Input[_builtins.str]] = None,
                 accept_log: Optional[pulumi.Input[_builtins.bool]] = None,
                 accept_mirror_list_id: Optional[pulumi.Input[_builtins.str]] = None,
                 accept_policer_id: Optional[pulumi.Input[_builtins.str]] = None,
                 accept_set_next_hop: Optional[pulumi.Input[_builtins.str]] = None,
                 accept_traffic_class: Optional[pulumi.Input[_builtins.int]] = None,
                 drop_counter_name: Optional[pulumi.Input[_builtins.str]] = None,
                 drop_log: Optional[pulumi.Input[_builtins.bool]] = None):
        """
        :param pulumi.Input[_builtins.str] accept_counter_name: Counter Name
        :param pulumi.Input[_builtins.bool] accept_log: Enable Log
                 - Default value: `false`
        :param pulumi.Input[_builtins.str] accept_set_next_hop: Set Next Hop (IPV6 address)
        :param pulumi.Input[_builtins.int] accept_traffic_class: set traffic class number
                 - Range: `0`-`63`
        :param pulumi.Input[_builtins.str] drop_counter_name: Counter Name
        :param pulumi.Input[_builtins.bool] drop_log: Enable Log
                 - Default value: `false`
        """
        if accept_counter_name is not None:
            pulumi.set(__self__, "accept_counter_name", accept_counter_name)
        if accept_log is not None:
            pulumi.set(__self__, "accept_log", accept_log)
        if accept_mirror_list_id is not None:
            pulumi.set(__self__, "accept_mirror_list_id", accept_mirror_list_id)
        if accept_policer_id is not None:
            pulumi.set(__self__, "accept_policer_id", accept_policer_id)
        if accept_set_next_hop is not None:
            pulumi.set(__self__, "accept_set_next_hop", accept_set_next_hop)
        if accept_traffic_class is not None:
            pulumi.set(__self__, "accept_traffic_class", accept_traffic_class)
        if drop_counter_name is not None:
            pulumi.set(__self__, "drop_counter_name", drop_counter_name)
        if drop_log is not None:
            pulumi.set(__self__, "drop_log", drop_log)

    @_builtins.property
    @pulumi.getter(name="acceptCounterName")
    def accept_counter_name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Counter Name
        """
        return pulumi.get(self, "accept_counter_name")

    @accept_counter_name.setter
    def accept_counter_name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "accept_counter_name", value)

    @_builtins.property
    @pulumi.getter(name="acceptLog")
    def accept_log(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Enable Log
          - Default value: `false`
        """
        return pulumi.get(self, "accept_log")

    @accept_log.setter
    def accept_log(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "accept_log", value)

    @_builtins.property
    @pulumi.getter(name="acceptMirrorListId")
    def accept_mirror_list_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "accept_mirror_list_id")

    @accept_mirror_list_id.setter
    def accept_mirror_list_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "accept_mirror_list_id", value)

    @_builtins.property
    @pulumi.getter(name="acceptPolicerId")
    def accept_policer_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "accept_policer_id")

    @accept_policer_id.setter
    def accept_policer_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "accept_policer_id", value)

    @_builtins.property
    @pulumi.getter(name="acceptSetNextHop")
    def accept_set_next_hop(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Set Next Hop (IPV6 address)
        """
        return pulumi.get(self, "accept_set_next_hop")

    @accept_set_next_hop.setter
    def accept_set_next_hop(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "accept_set_next_hop", value)

    @_builtins.property
    @pulumi.getter(name="acceptTrafficClass")
    def accept_traffic_class(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        set traffic class number
          - Range: `0`-`63`
        """
        return pulumi.get(self, "accept_traffic_class")

    @accept_traffic_class.setter
    def accept_traffic_class(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "accept_traffic_class", value)

    @_builtins.property
    @pulumi.getter(name="dropCounterName")
    def drop_counter_name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Counter Name
        """
        return pulumi.get(self, "drop_counter_name")

    @drop_counter_name.setter
    def drop_counter_name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "drop_counter_name", value)

    @_builtins.property
    @pulumi.getter(name="dropLog")
    def drop_log(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Enable Log
          - Default value: `false`
        """
        return pulumi.get(self, "drop_log")

    @drop_log.setter
    def drop_log(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "drop_log", value)


if not MYPY:
    class TransportIpv6AclFeatureSequenceMatchEntryArgsDict(TypedDict):
        destination_data_prefix: NotRequired[pulumi.Input[_builtins.str]]
        """
        Destination Data IP Prefix
        """
        destination_data_prefix_list_id: NotRequired[pulumi.Input[_builtins.str]]
        destination_ports: NotRequired[pulumi.Input[Sequence[pulumi.Input['TransportIpv6AclFeatureSequenceMatchEntryDestinationPortArgsDict']]]]
        """
        Destination Port List
        """
        icmp_messages: NotRequired[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]
        """
        ICMP6 Message
        """
        next_header: NotRequired[pulumi.Input[_builtins.int]]
        """
        next header number
          - Range: `0`-`255`
        """
        packet_length: NotRequired[pulumi.Input[_builtins.str]]
        """
        Packet Length
        """
        source_data_prefix: NotRequired[pulumi.Input[_builtins.str]]
        """
        Source Data IP Prefix
        """
        source_data_prefix_list_id: NotRequired[pulumi.Input[_builtins.str]]
        source_ports: NotRequired[pulumi.Input[Sequence[pulumi.Input['TransportIpv6AclFeatureSequenceMatchEntrySourcePortArgsDict']]]]
        """
        Source Port List
        """
        tcp_state: NotRequired[pulumi.Input[_builtins.str]]
        """
        TCP States
          - Choices: `syn`
        """
        traffic_classes: NotRequired[pulumi.Input[Sequence[pulumi.Input[_builtins.int]]]]
        """
        Select Traffic Class
        """
elif False:
    TransportIpv6AclFeatureSequenceMatchEntryArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class TransportIpv6AclFeatureSequenceMatchEntryArgs:
    def __init__(__self__, *,
                 destination_data_prefix: Optional[pulumi.Input[_builtins.str]] = None,
                 destination_data_prefix_list_id: Optional[pulumi.Input[_builtins.str]] = None,
                 destination_ports: Optional[pulumi.Input[Sequence[pulumi.Input['TransportIpv6AclFeatureSequenceMatchEntryDestinationPortArgs']]]] = None,
                 icmp_messages: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 next_header: Optional[pulumi.Input[_builtins.int]] = None,
                 packet_length: Optional[pulumi.Input[_builtins.str]] = None,
                 source_data_prefix: Optional[pulumi.Input[_builtins.str]] = None,
                 source_data_prefix_list_id: Optional[pulumi.Input[_builtins.str]] = None,
                 source_ports: Optional[pulumi.Input[Sequence[pulumi.Input['TransportIpv6AclFeatureSequenceMatchEntrySourcePortArgs']]]] = None,
                 tcp_state: Optional[pulumi.Input[_builtins.str]] = None,
                 traffic_classes: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.int]]]] = None):
        """
        :param pulumi.Input[_builtins.str] destination_data_prefix: Destination Data IP Prefix
        :param pulumi.Input[Sequence[pulumi.Input['TransportIpv6AclFeatureSequenceMatchEntryDestinationPortArgs']]] destination_ports: Destination Port List
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] icmp_messages: ICMP6 Message
        :param pulumi.Input[_builtins.int] next_header: next header number
                 - Range: `0`-`255`
        :param pulumi.Input[_builtins.str] packet_length: Packet Length
        :param pulumi.Input[_builtins.str] source_data_prefix: Source Data IP Prefix
        :param pulumi.Input[Sequence[pulumi.Input['TransportIpv6AclFeatureSequenceMatchEntrySourcePortArgs']]] source_ports: Source Port List
        :param pulumi.Input[_builtins.str] tcp_state: TCP States
                 - Choices: `syn`
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.int]]] traffic_classes: Select Traffic Class
        """
        if destination_data_prefix is not None:
            pulumi.set(__self__, "destination_data_prefix", destination_data_prefix)
        if destination_data_prefix_list_id is not None:
            pulumi.set(__self__, "destination_data_prefix_list_id", destination_data_prefix_list_id)
        if destination_ports is not None:
            pulumi.set(__self__, "destination_ports", destination_ports)
        if icmp_messages is not None:
            pulumi.set(__self__, "icmp_messages", icmp_messages)
        if next_header is not None:
            pulumi.set(__self__, "next_header", next_header)
        if packet_length is not None:
            pulumi.set(__self__, "packet_length", packet_length)
        if source_data_prefix is not None:
            pulumi.set(__self__, "source_data_prefix", source_data_prefix)
        if source_data_prefix_list_id is not None:
            pulumi.set(__self__, "source_data_prefix_list_id", source_data_prefix_list_id)
        if source_ports is not None:
            pulumi.set(__self__, "source_ports", source_ports)
        if tcp_state is not None:
            pulumi.set(__self__, "tcp_state", tcp_state)
        if traffic_classes is not None:
            pulumi.set(__self__, "traffic_classes", traffic_classes)

    @_builtins.property
    @pulumi.getter(name="destinationDataPrefix")
    def destination_data_prefix(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Destination Data IP Prefix
        """
        return pulumi.get(self, "destination_data_prefix")

    @destination_data_prefix.setter
    def destination_data_prefix(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "destination_data_prefix", value)

    @_builtins.property
    @pulumi.getter(name="destinationDataPrefixListId")
    def destination_data_prefix_list_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "destination_data_prefix_list_id")

    @destination_data_prefix_list_id.setter
    def destination_data_prefix_list_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "destination_data_prefix_list_id", value)

    @_builtins.property
    @pulumi.getter(name="destinationPorts")
    def destination_ports(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['TransportIpv6AclFeatureSequenceMatchEntryDestinationPortArgs']]]]:
        """
        Destination Port List
        """
        return pulumi.get(self, "destination_ports")

    @destination_ports.setter
    def destination_ports(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['TransportIpv6AclFeatureSequenceMatchEntryDestinationPortArgs']]]]):
        pulumi.set(self, "destination_ports", value)

    @_builtins.property
    @pulumi.getter(name="icmpMessages")
    def icmp_messages(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]:
        """
        ICMP6 Message
        """
        return pulumi.get(self, "icmp_messages")

    @icmp_messages.setter
    def icmp_messages(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "icmp_messages", value)

    @_builtins.property
    @pulumi.getter(name="nextHeader")
    def next_header(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        next header number
          - Range: `0`-`255`
        """
        return pulumi.get(self, "next_header")

    @next_header.setter
    def next_header(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "next_header", value)

    @_builtins.property
    @pulumi.getter(name="packetLength")
    def packet_length(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Packet Length
        """
        return pulumi.get(self, "packet_length")

    @packet_length.setter
    def packet_length(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "packet_length", value)

    @_builtins.property
    @pulumi.getter(name="sourceDataPrefix")
    def source_data_prefix(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Source Data IP Prefix
        """
        return pulumi.get(self, "source_data_prefix")

    @source_data_prefix.setter
    def source_data_prefix(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "source_data_prefix", value)

    @_builtins.property
    @pulumi.getter(name="sourceDataPrefixListId")
    def source_data_prefix_list_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "source_data_prefix_list_id")

    @source_data_prefix_list_id.setter
    def source_data_prefix_list_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "source_data_prefix_list_id", value)

    @_builtins.property
    @pulumi.getter(name="sourcePorts")
    def source_ports(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['TransportIpv6AclFeatureSequenceMatchEntrySourcePortArgs']]]]:
        """
        Source Port List
        """
        return pulumi.get(self, "source_ports")

    @source_ports.setter
    def source_ports(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['TransportIpv6AclFeatureSequenceMatchEntrySourcePortArgs']]]]):
        pulumi.set(self, "source_ports", value)

    @_builtins.property
    @pulumi.getter(name="tcpState")
    def tcp_state(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        TCP States
          - Choices: `syn`
        """
        return pulumi.get(self, "tcp_state")

    @tcp_state.setter
    def tcp_state(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "tcp_state", value)

    @_builtins.property
    @pulumi.getter(name="trafficClasses")
    def traffic_classes(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.int]]]]:
        """
        Select Traffic Class
        """
        return pulumi.get(self, "traffic_classes")

    @traffic_classes.setter
    def traffic_classes(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.int]]]]):
        pulumi.set(self, "traffic_classes", value)


if not MYPY:
    class TransportIpv6AclFeatureSequenceMatchEntryDestinationPortArgsDict(TypedDict):
        port: NotRequired[pulumi.Input[_builtins.str]]
        """
        destination port range or individual port number
        """
elif False:
    TransportIpv6AclFeatureSequenceMatchEntryDestinationPortArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class TransportIpv6AclFeatureSequenceMatchEntryDestinationPortArgs:
    def __init__(__self__, *,
                 port: Optional[pulumi.Input[_builtins.str]] = None):
        """
        :param pulumi.Input[_builtins.str] port: destination port range or individual port number
        """
        if port is not None:
            pulumi.set(__self__, "port", port)

    @_builtins.property
    @pulumi.getter
    def port(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        destination port range or individual port number
        """
        return pulumi.get(self, "port")

    @port.setter
    def port(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "port", value)


if not MYPY:
    class TransportIpv6AclFeatureSequenceMatchEntrySourcePortArgsDict(TypedDict):
        port: NotRequired[pulumi.Input[_builtins.str]]
        """
        source port range or individual port number
        """
elif False:
    TransportIpv6AclFeatureSequenceMatchEntrySourcePortArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class TransportIpv6AclFeatureSequenceMatchEntrySourcePortArgs:
    def __init__(__self__, *,
                 port: Optional[pulumi.Input[_builtins.str]] = None):
        """
        :param pulumi.Input[_builtins.str] port: source port range or individual port number
        """
        if port is not None:
            pulumi.set(__self__, "port", port)

    @_builtins.property
    @pulumi.getter
    def port(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        source port range or individual port number
        """
        return pulumi.get(self, "port")

    @port.setter
    def port(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "port", value)


if not MYPY:
    class TransportIpv6TrackerGroupFeatureTrackerElementArgsDict(TypedDict):
        tracker_id: NotRequired[pulumi.Input[_builtins.str]]
elif False:
    TransportIpv6TrackerGroupFeatureTrackerElementArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class TransportIpv6TrackerGroupFeatureTrackerElementArgs:
    def __init__(__self__, *,
                 tracker_id: Optional[pulumi.Input[_builtins.str]] = None):
        if tracker_id is not None:
            pulumi.set(__self__, "tracker_id", tracker_id)

    @_builtins.property
    @pulumi.getter(name="trackerId")
    def tracker_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "tracker_id")

    @tracker_id.setter
    def tracker_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "tracker_id", value)


if not MYPY:
    class TransportManagementVpnFeatureIpv4StaticRouteArgsDict(TypedDict):
        administrative_distance: NotRequired[pulumi.Input[_builtins.int]]
        """
        Administrative distance, Attribute conditional on `gateway` being equal to `null0`
          - Range: `1`-`255`
          - Default value: `1`
        """
        administrative_distance_variable: NotRequired[pulumi.Input[_builtins.str]]
        """
        Variable name, Attribute conditional on `gateway` being equal to `null0`
        """
        gateway: NotRequired[pulumi.Input[_builtins.str]]
        """
        Gateway
          - Choices: `nextHop`, `dhcp`, `null0`
          - Default value: `nextHop`
        """
        network_address: NotRequired[pulumi.Input[_builtins.str]]
        """
        IP Address
        """
        network_address_variable: NotRequired[pulumi.Input[_builtins.str]]
        """
        Variable name
        """
        next_hops: NotRequired[pulumi.Input[Sequence[pulumi.Input['TransportManagementVpnFeatureIpv4StaticRouteNextHopArgsDict']]]]
        """
        IPv4 Route Gateway Next Hop, Attribute conditional on `gateway` being equal to `nextHop`
        """
        subnet_mask: NotRequired[pulumi.Input[_builtins.str]]
        """
        Subnet Mask
          - Choices: `255.255.255.255`, `255.255.255.254`, `255.255.255.252`, `255.255.255.248`, `255.255.255.240`, `255.255.255.224`, `255.255.255.192`, `255.255.255.128`, `255.255.255.0`, `255.255.254.0`, `255.255.252.0`, `255.255.248.0`, `255.255.240.0`, `255.255.224.0`, `255.255.192.0`, `255.255.128.0`, `255.255.0.0`, `255.254.0.0`, `255.252.0.0`, `255.240.0.0`, `255.224.0.0`, `255.192.0.0`, `255.128.0.0`, `255.0.0.0`, `254.0.0.0`, `252.0.0.0`, `248.0.0.0`, `240.0.0.0`, `224.0.0.0`, `192.0.0.0`, `128.0.0.0`, `0.0.0.0`
        """
        subnet_mask_variable: NotRequired[pulumi.Input[_builtins.str]]
        """
        Variable name
        """
elif False:
    TransportManagementVpnFeatureIpv4StaticRouteArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class TransportManagementVpnFeatureIpv4StaticRouteArgs:
    def __init__(__self__, *,
                 administrative_distance: Optional[pulumi.Input[_builtins.int]] = None,
                 administrative_distance_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 gateway: Optional[pulumi.Input[_builtins.str]] = None,
                 network_address: Optional[pulumi.Input[_builtins.str]] = None,
                 network_address_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 next_hops: Optional[pulumi.Input[Sequence[pulumi.Input['TransportManagementVpnFeatureIpv4StaticRouteNextHopArgs']]]] = None,
                 subnet_mask: Optional[pulumi.Input[_builtins.str]] = None,
                 subnet_mask_variable: Optional[pulumi.Input[_builtins.str]] = None):
        """
        :param pulumi.Input[_builtins.int] administrative_distance: Administrative distance, Attribute conditional on `gateway` being equal to `null0`
                 - Range: `1`-`255`
                 - Default value: `1`
        :param pulumi.Input[_builtins.str] administrative_distance_variable: Variable name, Attribute conditional on `gateway` being equal to `null0`
        :param pulumi.Input[_builtins.str] gateway: Gateway
                 - Choices: `nextHop`, `dhcp`, `null0`
                 - Default value: `nextHop`
        :param pulumi.Input[_builtins.str] network_address: IP Address
        :param pulumi.Input[_builtins.str] network_address_variable: Variable name
        :param pulumi.Input[Sequence[pulumi.Input['TransportManagementVpnFeatureIpv4StaticRouteNextHopArgs']]] next_hops: IPv4 Route Gateway Next Hop, Attribute conditional on `gateway` being equal to `nextHop`
        :param pulumi.Input[_builtins.str] subnet_mask: Subnet Mask
                 - Choices: `255.255.255.255`, `255.255.255.254`, `255.255.255.252`, `255.255.255.248`, `255.255.255.240`, `255.255.255.224`, `255.255.255.192`, `255.255.255.128`, `255.255.255.0`, `255.255.254.0`, `255.255.252.0`, `255.255.248.0`, `255.255.240.0`, `255.255.224.0`, `255.255.192.0`, `255.255.128.0`, `255.255.0.0`, `255.254.0.0`, `255.252.0.0`, `255.240.0.0`, `255.224.0.0`, `255.192.0.0`, `255.128.0.0`, `255.0.0.0`, `254.0.0.0`, `252.0.0.0`, `248.0.0.0`, `240.0.0.0`, `224.0.0.0`, `192.0.0.0`, `128.0.0.0`, `0.0.0.0`
        :param pulumi.Input[_builtins.str] subnet_mask_variable: Variable name
        """
        if administrative_distance is not None:
            pulumi.set(__self__, "administrative_distance", administrative_distance)
        if administrative_distance_variable is not None:
            pulumi.set(__self__, "administrative_distance_variable", administrative_distance_variable)
        if gateway is not None:
            pulumi.set(__self__, "gateway", gateway)
        if network_address is not None:
            pulumi.set(__self__, "network_address", network_address)
        if network_address_variable is not None:
            pulumi.set(__self__, "network_address_variable", network_address_variable)
        if next_hops is not None:
            pulumi.set(__self__, "next_hops", next_hops)
        if subnet_mask is not None:
            pulumi.set(__self__, "subnet_mask", subnet_mask)
        if subnet_mask_variable is not None:
            pulumi.set(__self__, "subnet_mask_variable", subnet_mask_variable)

    @_builtins.property
    @pulumi.getter(name="administrativeDistance")
    def administrative_distance(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        Administrative distance, Attribute conditional on `gateway` being equal to `null0`
          - Range: `1`-`255`
          - Default value: `1`
        """
        return pulumi.get(self, "administrative_distance")

    @administrative_distance.setter
    def administrative_distance(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "administrative_distance", value)

    @_builtins.property
    @pulumi.getter(name="administrativeDistanceVariable")
    def administrative_distance_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name, Attribute conditional on `gateway` being equal to `null0`
        """
        return pulumi.get(self, "administrative_distance_variable")

    @administrative_distance_variable.setter
    def administrative_distance_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "administrative_distance_variable", value)

    @_builtins.property
    @pulumi.getter
    def gateway(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Gateway
          - Choices: `nextHop`, `dhcp`, `null0`
          - Default value: `nextHop`
        """
        return pulumi.get(self, "gateway")

    @gateway.setter
    def gateway(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "gateway", value)

    @_builtins.property
    @pulumi.getter(name="networkAddress")
    def network_address(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        IP Address
        """
        return pulumi.get(self, "network_address")

    @network_address.setter
    def network_address(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "network_address", value)

    @_builtins.property
    @pulumi.getter(name="networkAddressVariable")
    def network_address_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "network_address_variable")

    @network_address_variable.setter
    def network_address_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "network_address_variable", value)

    @_builtins.property
    @pulumi.getter(name="nextHops")
    def next_hops(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['TransportManagementVpnFeatureIpv4StaticRouteNextHopArgs']]]]:
        """
        IPv4 Route Gateway Next Hop, Attribute conditional on `gateway` being equal to `nextHop`
        """
        return pulumi.get(self, "next_hops")

    @next_hops.setter
    def next_hops(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['TransportManagementVpnFeatureIpv4StaticRouteNextHopArgs']]]]):
        pulumi.set(self, "next_hops", value)

    @_builtins.property
    @pulumi.getter(name="subnetMask")
    def subnet_mask(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Subnet Mask
          - Choices: `255.255.255.255`, `255.255.255.254`, `255.255.255.252`, `255.255.255.248`, `255.255.255.240`, `255.255.255.224`, `255.255.255.192`, `255.255.255.128`, `255.255.255.0`, `255.255.254.0`, `255.255.252.0`, `255.255.248.0`, `255.255.240.0`, `255.255.224.0`, `255.255.192.0`, `255.255.128.0`, `255.255.0.0`, `255.254.0.0`, `255.252.0.0`, `255.240.0.0`, `255.224.0.0`, `255.192.0.0`, `255.128.0.0`, `255.0.0.0`, `254.0.0.0`, `252.0.0.0`, `248.0.0.0`, `240.0.0.0`, `224.0.0.0`, `192.0.0.0`, `128.0.0.0`, `0.0.0.0`
        """
        return pulumi.get(self, "subnet_mask")

    @subnet_mask.setter
    def subnet_mask(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "subnet_mask", value)

    @_builtins.property
    @pulumi.getter(name="subnetMaskVariable")
    def subnet_mask_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "subnet_mask_variable")

    @subnet_mask_variable.setter
    def subnet_mask_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "subnet_mask_variable", value)


if not MYPY:
    class TransportManagementVpnFeatureIpv4StaticRouteNextHopArgsDict(TypedDict):
        address: NotRequired[pulumi.Input[_builtins.str]]
        """
        Address
        """
        address_variable: NotRequired[pulumi.Input[_builtins.str]]
        """
        Variable name
        """
        administrative_distance: NotRequired[pulumi.Input[_builtins.int]]
        """
        Administrative distance
          - Range: `1`-`255`
          - Default value: `1`
        """
        administrative_distance_variable: NotRequired[pulumi.Input[_builtins.str]]
        """
        Variable name
        """
elif False:
    TransportManagementVpnFeatureIpv4StaticRouteNextHopArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class TransportManagementVpnFeatureIpv4StaticRouteNextHopArgs:
    def __init__(__self__, *,
                 address: Optional[pulumi.Input[_builtins.str]] = None,
                 address_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 administrative_distance: Optional[pulumi.Input[_builtins.int]] = None,
                 administrative_distance_variable: Optional[pulumi.Input[_builtins.str]] = None):
        """
        :param pulumi.Input[_builtins.str] address: Address
        :param pulumi.Input[_builtins.str] address_variable: Variable name
        :param pulumi.Input[_builtins.int] administrative_distance: Administrative distance
                 - Range: `1`-`255`
                 - Default value: `1`
        :param pulumi.Input[_builtins.str] administrative_distance_variable: Variable name
        """
        if address is not None:
            pulumi.set(__self__, "address", address)
        if address_variable is not None:
            pulumi.set(__self__, "address_variable", address_variable)
        if administrative_distance is not None:
            pulumi.set(__self__, "administrative_distance", administrative_distance)
        if administrative_distance_variable is not None:
            pulumi.set(__self__, "administrative_distance_variable", administrative_distance_variable)

    @_builtins.property
    @pulumi.getter
    def address(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Address
        """
        return pulumi.get(self, "address")

    @address.setter
    def address(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "address", value)

    @_builtins.property
    @pulumi.getter(name="addressVariable")
    def address_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "address_variable")

    @address_variable.setter
    def address_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "address_variable", value)

    @_builtins.property
    @pulumi.getter(name="administrativeDistance")
    def administrative_distance(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        Administrative distance
          - Range: `1`-`255`
          - Default value: `1`
        """
        return pulumi.get(self, "administrative_distance")

    @administrative_distance.setter
    def administrative_distance(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "administrative_distance", value)

    @_builtins.property
    @pulumi.getter(name="administrativeDistanceVariable")
    def administrative_distance_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "administrative_distance_variable")

    @administrative_distance_variable.setter
    def administrative_distance_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "administrative_distance_variable", value)


if not MYPY:
    class TransportManagementVpnFeatureIpv6StaticRouteArgsDict(TypedDict):
        gateway: NotRequired[pulumi.Input[_builtins.str]]
        """
        Gateway
          - Choices: `nextHop`, `null0`, `nat`
        """
        nat: NotRequired[pulumi.Input[_builtins.str]]
        """
        IPv6 Nat, Attribute conditional on `gateway` being equal to `nat`
          - Choices: `NAT64`, `NAT66`
        """
        nat_variable: NotRequired[pulumi.Input[_builtins.str]]
        """
        Variable name, Attribute conditional on `gateway` being equal to `nat`
        """
        next_hops: NotRequired[pulumi.Input[Sequence[pulumi.Input['TransportManagementVpnFeatureIpv6StaticRouteNextHopArgsDict']]]]
        """
        IPv6 Route Gateway Next Hop, Attribute conditional on `gateway` being equal to `nextHop`
        """
        null0: NotRequired[pulumi.Input[_builtins.bool]]
        """
        IPv6 Route Gateway Next Hop, Attribute conditional on `gateway` being equal to `null0`
        """
        prefix: NotRequired[pulumi.Input[_builtins.str]]
        """
        Prefix
        """
        prefix_variable: NotRequired[pulumi.Input[_builtins.str]]
        """
        Variable name
        """
elif False:
    TransportManagementVpnFeatureIpv6StaticRouteArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class TransportManagementVpnFeatureIpv6StaticRouteArgs:
    def __init__(__self__, *,
                 gateway: Optional[pulumi.Input[_builtins.str]] = None,
                 nat: Optional[pulumi.Input[_builtins.str]] = None,
                 nat_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 next_hops: Optional[pulumi.Input[Sequence[pulumi.Input['TransportManagementVpnFeatureIpv6StaticRouteNextHopArgs']]]] = None,
                 null0: Optional[pulumi.Input[_builtins.bool]] = None,
                 prefix: Optional[pulumi.Input[_builtins.str]] = None,
                 prefix_variable: Optional[pulumi.Input[_builtins.str]] = None):
        """
        :param pulumi.Input[_builtins.str] gateway: Gateway
                 - Choices: `nextHop`, `null0`, `nat`
        :param pulumi.Input[_builtins.str] nat: IPv6 Nat, Attribute conditional on `gateway` being equal to `nat`
                 - Choices: `NAT64`, `NAT66`
        :param pulumi.Input[_builtins.str] nat_variable: Variable name, Attribute conditional on `gateway` being equal to `nat`
        :param pulumi.Input[Sequence[pulumi.Input['TransportManagementVpnFeatureIpv6StaticRouteNextHopArgs']]] next_hops: IPv6 Route Gateway Next Hop, Attribute conditional on `gateway` being equal to `nextHop`
        :param pulumi.Input[_builtins.bool] null0: IPv6 Route Gateway Next Hop, Attribute conditional on `gateway` being equal to `null0`
        :param pulumi.Input[_builtins.str] prefix: Prefix
        :param pulumi.Input[_builtins.str] prefix_variable: Variable name
        """
        if gateway is not None:
            pulumi.set(__self__, "gateway", gateway)
        if nat is not None:
            pulumi.set(__self__, "nat", nat)
        if nat_variable is not None:
            pulumi.set(__self__, "nat_variable", nat_variable)
        if next_hops is not None:
            pulumi.set(__self__, "next_hops", next_hops)
        if null0 is not None:
            pulumi.set(__self__, "null0", null0)
        if prefix is not None:
            pulumi.set(__self__, "prefix", prefix)
        if prefix_variable is not None:
            pulumi.set(__self__, "prefix_variable", prefix_variable)

    @_builtins.property
    @pulumi.getter
    def gateway(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Gateway
          - Choices: `nextHop`, `null0`, `nat`
        """
        return pulumi.get(self, "gateway")

    @gateway.setter
    def gateway(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "gateway", value)

    @_builtins.property
    @pulumi.getter
    def nat(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        IPv6 Nat, Attribute conditional on `gateway` being equal to `nat`
          - Choices: `NAT64`, `NAT66`
        """
        return pulumi.get(self, "nat")

    @nat.setter
    def nat(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "nat", value)

    @_builtins.property
    @pulumi.getter(name="natVariable")
    def nat_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name, Attribute conditional on `gateway` being equal to `nat`
        """
        return pulumi.get(self, "nat_variable")

    @nat_variable.setter
    def nat_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "nat_variable", value)

    @_builtins.property
    @pulumi.getter(name="nextHops")
    def next_hops(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['TransportManagementVpnFeatureIpv6StaticRouteNextHopArgs']]]]:
        """
        IPv6 Route Gateway Next Hop, Attribute conditional on `gateway` being equal to `nextHop`
        """
        return pulumi.get(self, "next_hops")

    @next_hops.setter
    def next_hops(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['TransportManagementVpnFeatureIpv6StaticRouteNextHopArgs']]]]):
        pulumi.set(self, "next_hops", value)

    @_builtins.property
    @pulumi.getter
    def null0(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        IPv6 Route Gateway Next Hop, Attribute conditional on `gateway` being equal to `null0`
        """
        return pulumi.get(self, "null0")

    @null0.setter
    def null0(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "null0", value)

    @_builtins.property
    @pulumi.getter
    def prefix(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Prefix
        """
        return pulumi.get(self, "prefix")

    @prefix.setter
    def prefix(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "prefix", value)

    @_builtins.property
    @pulumi.getter(name="prefixVariable")
    def prefix_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "prefix_variable")

    @prefix_variable.setter
    def prefix_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "prefix_variable", value)


if not MYPY:
    class TransportManagementVpnFeatureIpv6StaticRouteNextHopArgsDict(TypedDict):
        address: NotRequired[pulumi.Input[_builtins.str]]
        """
        Address
        """
        address_variable: NotRequired[pulumi.Input[_builtins.str]]
        """
        Variable name
        """
        administrative_distance: NotRequired[pulumi.Input[_builtins.int]]
        """
        Administrative distance
          - Range: `1`-`254`
          - Default value: `1`
        """
        administrative_distance_variable: NotRequired[pulumi.Input[_builtins.str]]
        """
        Variable name
        """
elif False:
    TransportManagementVpnFeatureIpv6StaticRouteNextHopArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class TransportManagementVpnFeatureIpv6StaticRouteNextHopArgs:
    def __init__(__self__, *,
                 address: Optional[pulumi.Input[_builtins.str]] = None,
                 address_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 administrative_distance: Optional[pulumi.Input[_builtins.int]] = None,
                 administrative_distance_variable: Optional[pulumi.Input[_builtins.str]] = None):
        """
        :param pulumi.Input[_builtins.str] address: Address
        :param pulumi.Input[_builtins.str] address_variable: Variable name
        :param pulumi.Input[_builtins.int] administrative_distance: Administrative distance
                 - Range: `1`-`254`
                 - Default value: `1`
        :param pulumi.Input[_builtins.str] administrative_distance_variable: Variable name
        """
        if address is not None:
            pulumi.set(__self__, "address", address)
        if address_variable is not None:
            pulumi.set(__self__, "address_variable", address_variable)
        if administrative_distance is not None:
            pulumi.set(__self__, "administrative_distance", administrative_distance)
        if administrative_distance_variable is not None:
            pulumi.set(__self__, "administrative_distance_variable", administrative_distance_variable)

    @_builtins.property
    @pulumi.getter
    def address(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Address
        """
        return pulumi.get(self, "address")

    @address.setter
    def address(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "address", value)

    @_builtins.property
    @pulumi.getter(name="addressVariable")
    def address_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "address_variable")

    @address_variable.setter
    def address_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "address_variable", value)

    @_builtins.property
    @pulumi.getter(name="administrativeDistance")
    def administrative_distance(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        Administrative distance
          - Range: `1`-`254`
          - Default value: `1`
        """
        return pulumi.get(self, "administrative_distance")

    @administrative_distance.setter
    def administrative_distance(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "administrative_distance", value)

    @_builtins.property
    @pulumi.getter(name="administrativeDistanceVariable")
    def administrative_distance_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "administrative_distance_variable")

    @administrative_distance_variable.setter
    def administrative_distance_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "administrative_distance_variable", value)


if not MYPY:
    class TransportManagementVpnFeatureNewHostMappingArgsDict(TypedDict):
        host_name: NotRequired[pulumi.Input[_builtins.str]]
        """
        Hostname
        """
        host_name_variable: NotRequired[pulumi.Input[_builtins.str]]
        """
        Variable name
        """
        list_of_ip_addresses: NotRequired[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]
        """
        List of IP
        """
        list_of_ip_addresses_variable: NotRequired[pulumi.Input[_builtins.str]]
        """
        Variable name
        """
elif False:
    TransportManagementVpnFeatureNewHostMappingArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class TransportManagementVpnFeatureNewHostMappingArgs:
    def __init__(__self__, *,
                 host_name: Optional[pulumi.Input[_builtins.str]] = None,
                 host_name_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 list_of_ip_addresses: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 list_of_ip_addresses_variable: Optional[pulumi.Input[_builtins.str]] = None):
        """
        :param pulumi.Input[_builtins.str] host_name: Hostname
        :param pulumi.Input[_builtins.str] host_name_variable: Variable name
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] list_of_ip_addresses: List of IP
        :param pulumi.Input[_builtins.str] list_of_ip_addresses_variable: Variable name
        """
        if host_name is not None:
            pulumi.set(__self__, "host_name", host_name)
        if host_name_variable is not None:
            pulumi.set(__self__, "host_name_variable", host_name_variable)
        if list_of_ip_addresses is not None:
            pulumi.set(__self__, "list_of_ip_addresses", list_of_ip_addresses)
        if list_of_ip_addresses_variable is not None:
            pulumi.set(__self__, "list_of_ip_addresses_variable", list_of_ip_addresses_variable)

    @_builtins.property
    @pulumi.getter(name="hostName")
    def host_name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Hostname
        """
        return pulumi.get(self, "host_name")

    @host_name.setter
    def host_name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "host_name", value)

    @_builtins.property
    @pulumi.getter(name="hostNameVariable")
    def host_name_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "host_name_variable")

    @host_name_variable.setter
    def host_name_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "host_name_variable", value)

    @_builtins.property
    @pulumi.getter(name="listOfIpAddresses")
    def list_of_ip_addresses(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]:
        """
        List of IP
        """
        return pulumi.get(self, "list_of_ip_addresses")

    @list_of_ip_addresses.setter
    def list_of_ip_addresses(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "list_of_ip_addresses", value)

    @_builtins.property
    @pulumi.getter(name="listOfIpAddressesVariable")
    def list_of_ip_addresses_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "list_of_ip_addresses_variable")

    @list_of_ip_addresses_variable.setter
    def list_of_ip_addresses_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "list_of_ip_addresses_variable", value)


if not MYPY:
    class TransportManagementVpnInterfaceEthernetFeatureArpEntryArgsDict(TypedDict):
        ip_address: NotRequired[pulumi.Input[_builtins.str]]
        """
        IPV4 Address
        """
        ip_address_variable: NotRequired[pulumi.Input[_builtins.str]]
        """
        Variable name
        """
        mac_address: NotRequired[pulumi.Input[_builtins.str]]
        """
        MAC Address
        """
        mac_address_variable: NotRequired[pulumi.Input[_builtins.str]]
        """
        Variable name
        """
elif False:
    TransportManagementVpnInterfaceEthernetFeatureArpEntryArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class TransportManagementVpnInterfaceEthernetFeatureArpEntryArgs:
    def __init__(__self__, *,
                 ip_address: Optional[pulumi.Input[_builtins.str]] = None,
                 ip_address_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 mac_address: Optional[pulumi.Input[_builtins.str]] = None,
                 mac_address_variable: Optional[pulumi.Input[_builtins.str]] = None):
        """
        :param pulumi.Input[_builtins.str] ip_address: IPV4 Address
        :param pulumi.Input[_builtins.str] ip_address_variable: Variable name
        :param pulumi.Input[_builtins.str] mac_address: MAC Address
        :param pulumi.Input[_builtins.str] mac_address_variable: Variable name
        """
        if ip_address is not None:
            pulumi.set(__self__, "ip_address", ip_address)
        if ip_address_variable is not None:
            pulumi.set(__self__, "ip_address_variable", ip_address_variable)
        if mac_address is not None:
            pulumi.set(__self__, "mac_address", mac_address)
        if mac_address_variable is not None:
            pulumi.set(__self__, "mac_address_variable", mac_address_variable)

    @_builtins.property
    @pulumi.getter(name="ipAddress")
    def ip_address(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        IPV4 Address
        """
        return pulumi.get(self, "ip_address")

    @ip_address.setter
    def ip_address(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "ip_address", value)

    @_builtins.property
    @pulumi.getter(name="ipAddressVariable")
    def ip_address_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "ip_address_variable")

    @ip_address_variable.setter
    def ip_address_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "ip_address_variable", value)

    @_builtins.property
    @pulumi.getter(name="macAddress")
    def mac_address(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        MAC Address
        """
        return pulumi.get(self, "mac_address")

    @mac_address.setter
    def mac_address(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "mac_address", value)

    @_builtins.property
    @pulumi.getter(name="macAddressVariable")
    def mac_address_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "mac_address_variable")

    @mac_address_variable.setter
    def mac_address_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "mac_address_variable", value)


if not MYPY:
    class TransportManagementVpnInterfaceEthernetFeatureIpv4SecondaryAddressArgsDict(TypedDict):
        address: NotRequired[pulumi.Input[_builtins.str]]
        """
        IpV4 Address
        """
        address_variable: NotRequired[pulumi.Input[_builtins.str]]
        """
        Variable name
        """
        subnet_mask: NotRequired[pulumi.Input[_builtins.str]]
        """
        Subnet Mask
          - Choices: `255.255.255.255`, `255.255.255.254`, `255.255.255.252`, `255.255.255.248`, `255.255.255.240`, `255.255.255.224`, `255.255.255.192`, `255.255.255.128`, `255.255.255.0`, `255.255.254.0`, `255.255.252.0`, `255.255.248.0`, `255.255.240.0`, `255.255.224.0`, `255.255.192.0`, `255.255.128.0`, `255.255.0.0`, `255.254.0.0`, `255.252.0.0`, `255.240.0.0`, `255.224.0.0`, `255.192.0.0`, `255.128.0.0`, `255.0.0.0`, `254.0.0.0`, `252.0.0.0`, `248.0.0.0`, `240.0.0.0`, `224.0.0.0`, `192.0.0.0`, `128.0.0.0`, `0.0.0.0`
        """
        subnet_mask_variable: NotRequired[pulumi.Input[_builtins.str]]
        """
        Variable name
        """
elif False:
    TransportManagementVpnInterfaceEthernetFeatureIpv4SecondaryAddressArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class TransportManagementVpnInterfaceEthernetFeatureIpv4SecondaryAddressArgs:
    def __init__(__self__, *,
                 address: Optional[pulumi.Input[_builtins.str]] = None,
                 address_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 subnet_mask: Optional[pulumi.Input[_builtins.str]] = None,
                 subnet_mask_variable: Optional[pulumi.Input[_builtins.str]] = None):
        """
        :param pulumi.Input[_builtins.str] address: IpV4 Address
        :param pulumi.Input[_builtins.str] address_variable: Variable name
        :param pulumi.Input[_builtins.str] subnet_mask: Subnet Mask
                 - Choices: `255.255.255.255`, `255.255.255.254`, `255.255.255.252`, `255.255.255.248`, `255.255.255.240`, `255.255.255.224`, `255.255.255.192`, `255.255.255.128`, `255.255.255.0`, `255.255.254.0`, `255.255.252.0`, `255.255.248.0`, `255.255.240.0`, `255.255.224.0`, `255.255.192.0`, `255.255.128.0`, `255.255.0.0`, `255.254.0.0`, `255.252.0.0`, `255.240.0.0`, `255.224.0.0`, `255.192.0.0`, `255.128.0.0`, `255.0.0.0`, `254.0.0.0`, `252.0.0.0`, `248.0.0.0`, `240.0.0.0`, `224.0.0.0`, `192.0.0.0`, `128.0.0.0`, `0.0.0.0`
        :param pulumi.Input[_builtins.str] subnet_mask_variable: Variable name
        """
        if address is not None:
            pulumi.set(__self__, "address", address)
        if address_variable is not None:
            pulumi.set(__self__, "address_variable", address_variable)
        if subnet_mask is not None:
            pulumi.set(__self__, "subnet_mask", subnet_mask)
        if subnet_mask_variable is not None:
            pulumi.set(__self__, "subnet_mask_variable", subnet_mask_variable)

    @_builtins.property
    @pulumi.getter
    def address(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        IpV4 Address
        """
        return pulumi.get(self, "address")

    @address.setter
    def address(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "address", value)

    @_builtins.property
    @pulumi.getter(name="addressVariable")
    def address_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "address_variable")

    @address_variable.setter
    def address_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "address_variable", value)

    @_builtins.property
    @pulumi.getter(name="subnetMask")
    def subnet_mask(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Subnet Mask
          - Choices: `255.255.255.255`, `255.255.255.254`, `255.255.255.252`, `255.255.255.248`, `255.255.255.240`, `255.255.255.224`, `255.255.255.192`, `255.255.255.128`, `255.255.255.0`, `255.255.254.0`, `255.255.252.0`, `255.255.248.0`, `255.255.240.0`, `255.255.224.0`, `255.255.192.0`, `255.255.128.0`, `255.255.0.0`, `255.254.0.0`, `255.252.0.0`, `255.240.0.0`, `255.224.0.0`, `255.192.0.0`, `255.128.0.0`, `255.0.0.0`, `254.0.0.0`, `252.0.0.0`, `248.0.0.0`, `240.0.0.0`, `224.0.0.0`, `192.0.0.0`, `128.0.0.0`, `0.0.0.0`
        """
        return pulumi.get(self, "subnet_mask")

    @subnet_mask.setter
    def subnet_mask(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "subnet_mask", value)

    @_builtins.property
    @pulumi.getter(name="subnetMaskVariable")
    def subnet_mask_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "subnet_mask_variable")

    @subnet_mask_variable.setter
    def subnet_mask_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "subnet_mask_variable", value)


if not MYPY:
    class TransportRoutePolicyFeatureSequenceArgsDict(TypedDict):
        actions: NotRequired[pulumi.Input[Sequence[pulumi.Input['TransportRoutePolicyFeatureSequenceActionArgsDict']]]]
        """
        Define list of actions
        """
        base_action: NotRequired[pulumi.Input[_builtins.str]]
        """
        Base Action
          - Choices: `reject`, `accept`
          - Default value: `reject`
        """
        id: NotRequired[pulumi.Input[_builtins.int]]
        """
        Sequence Id
          - Range: `1`-`65536`
        """
        match_entries: NotRequired[pulumi.Input[Sequence[pulumi.Input['TransportRoutePolicyFeatureSequenceMatchEntryArgsDict']]]]
        """
        Define match conditions
        """
        name: NotRequired[pulumi.Input[_builtins.str]]
        """
        Sequence Name
        """
        protocol: NotRequired[pulumi.Input[_builtins.str]]
        """
        protocol such as IPV4, IPV6, or BOTH
          - Choices: `IPV4`, `IPV6`, `BOTH`
          - Default value: `IPV4`
        """
elif False:
    TransportRoutePolicyFeatureSequenceArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class TransportRoutePolicyFeatureSequenceArgs:
    def __init__(__self__, *,
                 actions: Optional[pulumi.Input[Sequence[pulumi.Input['TransportRoutePolicyFeatureSequenceActionArgs']]]] = None,
                 base_action: Optional[pulumi.Input[_builtins.str]] = None,
                 id: Optional[pulumi.Input[_builtins.int]] = None,
                 match_entries: Optional[pulumi.Input[Sequence[pulumi.Input['TransportRoutePolicyFeatureSequenceMatchEntryArgs']]]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 protocol: Optional[pulumi.Input[_builtins.str]] = None):
        """
        :param pulumi.Input[Sequence[pulumi.Input['TransportRoutePolicyFeatureSequenceActionArgs']]] actions: Define list of actions
        :param pulumi.Input[_builtins.str] base_action: Base Action
                 - Choices: `reject`, `accept`
                 - Default value: `reject`
        :param pulumi.Input[_builtins.int] id: Sequence Id
                 - Range: `1`-`65536`
        :param pulumi.Input[Sequence[pulumi.Input['TransportRoutePolicyFeatureSequenceMatchEntryArgs']]] match_entries: Define match conditions
        :param pulumi.Input[_builtins.str] name: Sequence Name
        :param pulumi.Input[_builtins.str] protocol: protocol such as IPV4, IPV6, or BOTH
                 - Choices: `IPV4`, `IPV6`, `BOTH`
                 - Default value: `IPV4`
        """
        if actions is not None:
            pulumi.set(__self__, "actions", actions)
        if base_action is not None:
            pulumi.set(__self__, "base_action", base_action)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if match_entries is not None:
            pulumi.set(__self__, "match_entries", match_entries)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if protocol is not None:
            pulumi.set(__self__, "protocol", protocol)

    @_builtins.property
    @pulumi.getter
    def actions(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['TransportRoutePolicyFeatureSequenceActionArgs']]]]:
        """
        Define list of actions
        """
        return pulumi.get(self, "actions")

    @actions.setter
    def actions(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['TransportRoutePolicyFeatureSequenceActionArgs']]]]):
        pulumi.set(self, "actions", value)

    @_builtins.property
    @pulumi.getter(name="baseAction")
    def base_action(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Base Action
          - Choices: `reject`, `accept`
          - Default value: `reject`
        """
        return pulumi.get(self, "base_action")

    @base_action.setter
    def base_action(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "base_action", value)

    @_builtins.property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        Sequence Id
          - Range: `1`-`65536`
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "id", value)

    @_builtins.property
    @pulumi.getter(name="matchEntries")
    def match_entries(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['TransportRoutePolicyFeatureSequenceMatchEntryArgs']]]]:
        """
        Define match conditions
        """
        return pulumi.get(self, "match_entries")

    @match_entries.setter
    def match_entries(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['TransportRoutePolicyFeatureSequenceMatchEntryArgs']]]]):
        pulumi.set(self, "match_entries", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Sequence Name
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "name", value)

    @_builtins.property
    @pulumi.getter
    def protocol(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        protocol such as IPV4, IPV6, or BOTH
          - Choices: `IPV4`, `IPV6`, `BOTH`
          - Default value: `IPV4`
        """
        return pulumi.get(self, "protocol")

    @protocol.setter
    def protocol(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "protocol", value)


if not MYPY:
    class TransportRoutePolicyFeatureSequenceActionArgsDict(TypedDict):
        as_path_prepends: NotRequired[pulumi.Input[Sequence[pulumi.Input[_builtins.int]]]]
        communities: NotRequired[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]
        community_additive: NotRequired[pulumi.Input[_builtins.bool]]
        """
        - Default value: `false`
        """
        community_variable: NotRequired[pulumi.Input[_builtins.str]]
        """
        Variable name
        """
        ipv4_next_hop: NotRequired[pulumi.Input[_builtins.str]]
        """
        Set Ipv4 Next Hop
        """
        ipv6_next_hop: NotRequired[pulumi.Input[_builtins.str]]
        """
        Set Ipv6 Next Hop
        """
        local_preference: NotRequired[pulumi.Input[_builtins.int]]
        """
        Set Local Preference
          - Range: `0`-`4294967295`
        """
        metric: NotRequired[pulumi.Input[_builtins.int]]
        """
        Set Metric
          - Range: `0`-`4294967295`
        """
        metric_type: NotRequired[pulumi.Input[_builtins.str]]
        """
        Set Metric Type
          - Choices: `type1`, `type2`
        """
        omp_tag: NotRequired[pulumi.Input[_builtins.int]]
        """
        Set OMP Tag
          - Range: `0`-`4294967295`
        """
        origin: NotRequired[pulumi.Input[_builtins.str]]
        """
        Set Origin
          - Choices: `EGP`, `IGP`, `Incomplete`
        """
        ospf_tag: NotRequired[pulumi.Input[_builtins.int]]
        """
        Set OSPF Tag
          - Range: `0`-`4294967295`
        """
        weight: NotRequired[pulumi.Input[_builtins.int]]
        """
        Set Weight
          - Range: `0`-`65535`
        """
elif False:
    TransportRoutePolicyFeatureSequenceActionArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class TransportRoutePolicyFeatureSequenceActionArgs:
    def __init__(__self__, *,
                 as_path_prepends: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.int]]]] = None,
                 communities: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 community_additive: Optional[pulumi.Input[_builtins.bool]] = None,
                 community_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 ipv4_next_hop: Optional[pulumi.Input[_builtins.str]] = None,
                 ipv6_next_hop: Optional[pulumi.Input[_builtins.str]] = None,
                 local_preference: Optional[pulumi.Input[_builtins.int]] = None,
                 metric: Optional[pulumi.Input[_builtins.int]] = None,
                 metric_type: Optional[pulumi.Input[_builtins.str]] = None,
                 omp_tag: Optional[pulumi.Input[_builtins.int]] = None,
                 origin: Optional[pulumi.Input[_builtins.str]] = None,
                 ospf_tag: Optional[pulumi.Input[_builtins.int]] = None,
                 weight: Optional[pulumi.Input[_builtins.int]] = None):
        """
        :param pulumi.Input[_builtins.bool] community_additive: - Default value: `false`
        :param pulumi.Input[_builtins.str] community_variable: Variable name
        :param pulumi.Input[_builtins.str] ipv4_next_hop: Set Ipv4 Next Hop
        :param pulumi.Input[_builtins.str] ipv6_next_hop: Set Ipv6 Next Hop
        :param pulumi.Input[_builtins.int] local_preference: Set Local Preference
                 - Range: `0`-`4294967295`
        :param pulumi.Input[_builtins.int] metric: Set Metric
                 - Range: `0`-`4294967295`
        :param pulumi.Input[_builtins.str] metric_type: Set Metric Type
                 - Choices: `type1`, `type2`
        :param pulumi.Input[_builtins.int] omp_tag: Set OMP Tag
                 - Range: `0`-`4294967295`
        :param pulumi.Input[_builtins.str] origin: Set Origin
                 - Choices: `EGP`, `IGP`, `Incomplete`
        :param pulumi.Input[_builtins.int] ospf_tag: Set OSPF Tag
                 - Range: `0`-`4294967295`
        :param pulumi.Input[_builtins.int] weight: Set Weight
                 - Range: `0`-`65535`
        """
        if as_path_prepends is not None:
            pulumi.set(__self__, "as_path_prepends", as_path_prepends)
        if communities is not None:
            pulumi.set(__self__, "communities", communities)
        if community_additive is not None:
            pulumi.set(__self__, "community_additive", community_additive)
        if community_variable is not None:
            pulumi.set(__self__, "community_variable", community_variable)
        if ipv4_next_hop is not None:
            pulumi.set(__self__, "ipv4_next_hop", ipv4_next_hop)
        if ipv6_next_hop is not None:
            pulumi.set(__self__, "ipv6_next_hop", ipv6_next_hop)
        if local_preference is not None:
            pulumi.set(__self__, "local_preference", local_preference)
        if metric is not None:
            pulumi.set(__self__, "metric", metric)
        if metric_type is not None:
            pulumi.set(__self__, "metric_type", metric_type)
        if omp_tag is not None:
            pulumi.set(__self__, "omp_tag", omp_tag)
        if origin is not None:
            pulumi.set(__self__, "origin", origin)
        if ospf_tag is not None:
            pulumi.set(__self__, "ospf_tag", ospf_tag)
        if weight is not None:
            pulumi.set(__self__, "weight", weight)

    @_builtins.property
    @pulumi.getter(name="asPathPrepends")
    def as_path_prepends(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.int]]]]:
        return pulumi.get(self, "as_path_prepends")

    @as_path_prepends.setter
    def as_path_prepends(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.int]]]]):
        pulumi.set(self, "as_path_prepends", value)

    @_builtins.property
    @pulumi.getter
    def communities(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]:
        return pulumi.get(self, "communities")

    @communities.setter
    def communities(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "communities", value)

    @_builtins.property
    @pulumi.getter(name="communityAdditive")
    def community_additive(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        - Default value: `false`
        """
        return pulumi.get(self, "community_additive")

    @community_additive.setter
    def community_additive(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "community_additive", value)

    @_builtins.property
    @pulumi.getter(name="communityVariable")
    def community_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "community_variable")

    @community_variable.setter
    def community_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "community_variable", value)

    @_builtins.property
    @pulumi.getter(name="ipv4NextHop")
    def ipv4_next_hop(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Set Ipv4 Next Hop
        """
        return pulumi.get(self, "ipv4_next_hop")

    @ipv4_next_hop.setter
    def ipv4_next_hop(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "ipv4_next_hop", value)

    @_builtins.property
    @pulumi.getter(name="ipv6NextHop")
    def ipv6_next_hop(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Set Ipv6 Next Hop
        """
        return pulumi.get(self, "ipv6_next_hop")

    @ipv6_next_hop.setter
    def ipv6_next_hop(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "ipv6_next_hop", value)

    @_builtins.property
    @pulumi.getter(name="localPreference")
    def local_preference(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        Set Local Preference
          - Range: `0`-`4294967295`
        """
        return pulumi.get(self, "local_preference")

    @local_preference.setter
    def local_preference(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "local_preference", value)

    @_builtins.property
    @pulumi.getter
    def metric(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        Set Metric
          - Range: `0`-`4294967295`
        """
        return pulumi.get(self, "metric")

    @metric.setter
    def metric(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "metric", value)

    @_builtins.property
    @pulumi.getter(name="metricType")
    def metric_type(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Set Metric Type
          - Choices: `type1`, `type2`
        """
        return pulumi.get(self, "metric_type")

    @metric_type.setter
    def metric_type(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "metric_type", value)

    @_builtins.property
    @pulumi.getter(name="ompTag")
    def omp_tag(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        Set OMP Tag
          - Range: `0`-`4294967295`
        """
        return pulumi.get(self, "omp_tag")

    @omp_tag.setter
    def omp_tag(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "omp_tag", value)

    @_builtins.property
    @pulumi.getter
    def origin(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Set Origin
          - Choices: `EGP`, `IGP`, `Incomplete`
        """
        return pulumi.get(self, "origin")

    @origin.setter
    def origin(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "origin", value)

    @_builtins.property
    @pulumi.getter(name="ospfTag")
    def ospf_tag(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        Set OSPF Tag
          - Range: `0`-`4294967295`
        """
        return pulumi.get(self, "ospf_tag")

    @ospf_tag.setter
    def ospf_tag(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "ospf_tag", value)

    @_builtins.property
    @pulumi.getter
    def weight(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        Set Weight
          - Range: `0`-`65535`
        """
        return pulumi.get(self, "weight")

    @weight.setter
    def weight(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "weight", value)


if not MYPY:
    class TransportRoutePolicyFeatureSequenceMatchEntryArgsDict(TypedDict):
        as_path_list_id: NotRequired[pulumi.Input[_builtins.str]]
        bgp_local_preference: NotRequired[pulumi.Input[_builtins.int]]
        """
        BGP Local Preference
          - Range: `0`-`4294967295`
        """
        expanded_community_list_id: NotRequired[pulumi.Input[_builtins.str]]
        extended_community_list_id: NotRequired[pulumi.Input[_builtins.str]]
        ipv4_address_prefix_list_id: NotRequired[pulumi.Input[_builtins.str]]
        ipv4_next_hop_prefix_list_id: NotRequired[pulumi.Input[_builtins.str]]
        ipv6_address_prefix_list_id: NotRequired[pulumi.Input[_builtins.str]]
        ipv6_next_hop_prefix_list_id: NotRequired[pulumi.Input[_builtins.str]]
        metric: NotRequired[pulumi.Input[_builtins.int]]
        """
        Select Metric
          - Range: `0`-`4294967295`
        """
        omp_tag: NotRequired[pulumi.Input[_builtins.int]]
        """
        Select OMP Tag
          - Range: `0`-`4294967295`
        """
        ospf_tag: NotRequired[pulumi.Input[_builtins.int]]
        """
        Select OSPF Tag
          - Range: `0`-`4294967295`
        """
        standard_community_list_criteria: NotRequired[pulumi.Input[_builtins.str]]
        """
        Select a condition such as OR, AND or EXACT
          - Choices: `OR`, `AND`, `EXACT`
        """
        standard_community_lists: NotRequired[pulumi.Input[Sequence[pulumi.Input['TransportRoutePolicyFeatureSequenceMatchEntryStandardCommunityListArgsDict']]]]
        """
        Select a standard community list
        """
elif False:
    TransportRoutePolicyFeatureSequenceMatchEntryArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class TransportRoutePolicyFeatureSequenceMatchEntryArgs:
    def __init__(__self__, *,
                 as_path_list_id: Optional[pulumi.Input[_builtins.str]] = None,
                 bgp_local_preference: Optional[pulumi.Input[_builtins.int]] = None,
                 expanded_community_list_id: Optional[pulumi.Input[_builtins.str]] = None,
                 extended_community_list_id: Optional[pulumi.Input[_builtins.str]] = None,
                 ipv4_address_prefix_list_id: Optional[pulumi.Input[_builtins.str]] = None,
                 ipv4_next_hop_prefix_list_id: Optional[pulumi.Input[_builtins.str]] = None,
                 ipv6_address_prefix_list_id: Optional[pulumi.Input[_builtins.str]] = None,
                 ipv6_next_hop_prefix_list_id: Optional[pulumi.Input[_builtins.str]] = None,
                 metric: Optional[pulumi.Input[_builtins.int]] = None,
                 omp_tag: Optional[pulumi.Input[_builtins.int]] = None,
                 ospf_tag: Optional[pulumi.Input[_builtins.int]] = None,
                 standard_community_list_criteria: Optional[pulumi.Input[_builtins.str]] = None,
                 standard_community_lists: Optional[pulumi.Input[Sequence[pulumi.Input['TransportRoutePolicyFeatureSequenceMatchEntryStandardCommunityListArgs']]]] = None):
        """
        :param pulumi.Input[_builtins.int] bgp_local_preference: BGP Local Preference
                 - Range: `0`-`4294967295`
        :param pulumi.Input[_builtins.int] metric: Select Metric
                 - Range: `0`-`4294967295`
        :param pulumi.Input[_builtins.int] omp_tag: Select OMP Tag
                 - Range: `0`-`4294967295`
        :param pulumi.Input[_builtins.int] ospf_tag: Select OSPF Tag
                 - Range: `0`-`4294967295`
        :param pulumi.Input[_builtins.str] standard_community_list_criteria: Select a condition such as OR, AND or EXACT
                 - Choices: `OR`, `AND`, `EXACT`
        :param pulumi.Input[Sequence[pulumi.Input['TransportRoutePolicyFeatureSequenceMatchEntryStandardCommunityListArgs']]] standard_community_lists: Select a standard community list
        """
        if as_path_list_id is not None:
            pulumi.set(__self__, "as_path_list_id", as_path_list_id)
        if bgp_local_preference is not None:
            pulumi.set(__self__, "bgp_local_preference", bgp_local_preference)
        if expanded_community_list_id is not None:
            pulumi.set(__self__, "expanded_community_list_id", expanded_community_list_id)
        if extended_community_list_id is not None:
            pulumi.set(__self__, "extended_community_list_id", extended_community_list_id)
        if ipv4_address_prefix_list_id is not None:
            pulumi.set(__self__, "ipv4_address_prefix_list_id", ipv4_address_prefix_list_id)
        if ipv4_next_hop_prefix_list_id is not None:
            pulumi.set(__self__, "ipv4_next_hop_prefix_list_id", ipv4_next_hop_prefix_list_id)
        if ipv6_address_prefix_list_id is not None:
            pulumi.set(__self__, "ipv6_address_prefix_list_id", ipv6_address_prefix_list_id)
        if ipv6_next_hop_prefix_list_id is not None:
            pulumi.set(__self__, "ipv6_next_hop_prefix_list_id", ipv6_next_hop_prefix_list_id)
        if metric is not None:
            pulumi.set(__self__, "metric", metric)
        if omp_tag is not None:
            pulumi.set(__self__, "omp_tag", omp_tag)
        if ospf_tag is not None:
            pulumi.set(__self__, "ospf_tag", ospf_tag)
        if standard_community_list_criteria is not None:
            pulumi.set(__self__, "standard_community_list_criteria", standard_community_list_criteria)
        if standard_community_lists is not None:
            pulumi.set(__self__, "standard_community_lists", standard_community_lists)

    @_builtins.property
    @pulumi.getter(name="asPathListId")
    def as_path_list_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "as_path_list_id")

    @as_path_list_id.setter
    def as_path_list_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "as_path_list_id", value)

    @_builtins.property
    @pulumi.getter(name="bgpLocalPreference")
    def bgp_local_preference(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        BGP Local Preference
          - Range: `0`-`4294967295`
        """
        return pulumi.get(self, "bgp_local_preference")

    @bgp_local_preference.setter
    def bgp_local_preference(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "bgp_local_preference", value)

    @_builtins.property
    @pulumi.getter(name="expandedCommunityListId")
    def expanded_community_list_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "expanded_community_list_id")

    @expanded_community_list_id.setter
    def expanded_community_list_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "expanded_community_list_id", value)

    @_builtins.property
    @pulumi.getter(name="extendedCommunityListId")
    def extended_community_list_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "extended_community_list_id")

    @extended_community_list_id.setter
    def extended_community_list_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "extended_community_list_id", value)

    @_builtins.property
    @pulumi.getter(name="ipv4AddressPrefixListId")
    def ipv4_address_prefix_list_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "ipv4_address_prefix_list_id")

    @ipv4_address_prefix_list_id.setter
    def ipv4_address_prefix_list_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "ipv4_address_prefix_list_id", value)

    @_builtins.property
    @pulumi.getter(name="ipv4NextHopPrefixListId")
    def ipv4_next_hop_prefix_list_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "ipv4_next_hop_prefix_list_id")

    @ipv4_next_hop_prefix_list_id.setter
    def ipv4_next_hop_prefix_list_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "ipv4_next_hop_prefix_list_id", value)

    @_builtins.property
    @pulumi.getter(name="ipv6AddressPrefixListId")
    def ipv6_address_prefix_list_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "ipv6_address_prefix_list_id")

    @ipv6_address_prefix_list_id.setter
    def ipv6_address_prefix_list_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "ipv6_address_prefix_list_id", value)

    @_builtins.property
    @pulumi.getter(name="ipv6NextHopPrefixListId")
    def ipv6_next_hop_prefix_list_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "ipv6_next_hop_prefix_list_id")

    @ipv6_next_hop_prefix_list_id.setter
    def ipv6_next_hop_prefix_list_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "ipv6_next_hop_prefix_list_id", value)

    @_builtins.property
    @pulumi.getter
    def metric(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        Select Metric
          - Range: `0`-`4294967295`
        """
        return pulumi.get(self, "metric")

    @metric.setter
    def metric(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "metric", value)

    @_builtins.property
    @pulumi.getter(name="ompTag")
    def omp_tag(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        Select OMP Tag
          - Range: `0`-`4294967295`
        """
        return pulumi.get(self, "omp_tag")

    @omp_tag.setter
    def omp_tag(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "omp_tag", value)

    @_builtins.property
    @pulumi.getter(name="ospfTag")
    def ospf_tag(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        Select OSPF Tag
          - Range: `0`-`4294967295`
        """
        return pulumi.get(self, "ospf_tag")

    @ospf_tag.setter
    def ospf_tag(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "ospf_tag", value)

    @_builtins.property
    @pulumi.getter(name="standardCommunityListCriteria")
    def standard_community_list_criteria(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Select a condition such as OR, AND or EXACT
          - Choices: `OR`, `AND`, `EXACT`
        """
        return pulumi.get(self, "standard_community_list_criteria")

    @standard_community_list_criteria.setter
    def standard_community_list_criteria(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "standard_community_list_criteria", value)

    @_builtins.property
    @pulumi.getter(name="standardCommunityLists")
    def standard_community_lists(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['TransportRoutePolicyFeatureSequenceMatchEntryStandardCommunityListArgs']]]]:
        """
        Select a standard community list
        """
        return pulumi.get(self, "standard_community_lists")

    @standard_community_lists.setter
    def standard_community_lists(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['TransportRoutePolicyFeatureSequenceMatchEntryStandardCommunityListArgs']]]]):
        pulumi.set(self, "standard_community_lists", value)


if not MYPY:
    class TransportRoutePolicyFeatureSequenceMatchEntryStandardCommunityListArgsDict(TypedDict):
        id: NotRequired[pulumi.Input[_builtins.str]]
elif False:
    TransportRoutePolicyFeatureSequenceMatchEntryStandardCommunityListArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class TransportRoutePolicyFeatureSequenceMatchEntryStandardCommunityListArgs:
    def __init__(__self__, *,
                 id: Optional[pulumi.Input[_builtins.str]] = None):
        if id is not None:
            pulumi.set(__self__, "id", id)

    @_builtins.property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "id", value)


if not MYPY:
    class TransportRoutingBgpFeatureIpv4AggregateAddressArgsDict(TypedDict):
        as_set_path: NotRequired[pulumi.Input[_builtins.bool]]
        """
        Set AS set path information
          - Default value: `false`
        """
        as_set_path_variable: NotRequired[pulumi.Input[_builtins.str]]
        """
        Variable name
        """
        network_address: NotRequired[pulumi.Input[_builtins.str]]
        network_address_variable: NotRequired[pulumi.Input[_builtins.str]]
        """
        Variable name
        """
        subnet_mask: NotRequired[pulumi.Input[_builtins.str]]
        """
        - Choices: `255.255.255.255`, `255.255.255.254`, `255.255.255.252`, `255.255.255.248`, `255.255.255.240`, `255.255.255.224`, `255.255.255.192`, `255.255.255.128`, `255.255.255.0`, `255.255.254.0`, `255.255.252.0`, `255.255.248.0`, `255.255.240.0`, `255.255.224.0`, `255.255.192.0`, `255.255.128.0`, `255.255.0.0`, `255.254.0.0`, `255.252.0.0`, `255.240.0.0`, `255.224.0.0`, `255.192.0.0`, `255.128.0.0`, `255.0.0.0`, `254.0.0.0`, `252.0.0.0`, `248.0.0.0`, `240.0.0.0`, `224.0.0.0`, `192.0.0.0`, `128.0.0.0`, `0.0.0.0`
        """
        subnet_mask_variable: NotRequired[pulumi.Input[_builtins.str]]
        """
        Variable name
        """
        summary_only: NotRequired[pulumi.Input[_builtins.bool]]
        """
        Filter out more specific routes from updates
          - Default value: `false`
        """
        summary_only_variable: NotRequired[pulumi.Input[_builtins.str]]
        """
        Variable name
        """
elif False:
    TransportRoutingBgpFeatureIpv4AggregateAddressArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class TransportRoutingBgpFeatureIpv4AggregateAddressArgs:
    def __init__(__self__, *,
                 as_set_path: Optional[pulumi.Input[_builtins.bool]] = None,
                 as_set_path_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 network_address: Optional[pulumi.Input[_builtins.str]] = None,
                 network_address_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 subnet_mask: Optional[pulumi.Input[_builtins.str]] = None,
                 subnet_mask_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 summary_only: Optional[pulumi.Input[_builtins.bool]] = None,
                 summary_only_variable: Optional[pulumi.Input[_builtins.str]] = None):
        """
        :param pulumi.Input[_builtins.bool] as_set_path: Set AS set path information
                 - Default value: `false`
        :param pulumi.Input[_builtins.str] as_set_path_variable: Variable name
        :param pulumi.Input[_builtins.str] network_address_variable: Variable name
        :param pulumi.Input[_builtins.str] subnet_mask: - Choices: `255.255.255.255`, `255.255.255.254`, `255.255.255.252`, `255.255.255.248`, `255.255.255.240`, `255.255.255.224`, `255.255.255.192`, `255.255.255.128`, `255.255.255.0`, `255.255.254.0`, `255.255.252.0`, `255.255.248.0`, `255.255.240.0`, `255.255.224.0`, `255.255.192.0`, `255.255.128.0`, `255.255.0.0`, `255.254.0.0`, `255.252.0.0`, `255.240.0.0`, `255.224.0.0`, `255.192.0.0`, `255.128.0.0`, `255.0.0.0`, `254.0.0.0`, `252.0.0.0`, `248.0.0.0`, `240.0.0.0`, `224.0.0.0`, `192.0.0.0`, `128.0.0.0`, `0.0.0.0`
        :param pulumi.Input[_builtins.str] subnet_mask_variable: Variable name
        :param pulumi.Input[_builtins.bool] summary_only: Filter out more specific routes from updates
                 - Default value: `false`
        :param pulumi.Input[_builtins.str] summary_only_variable: Variable name
        """
        if as_set_path is not None:
            pulumi.set(__self__, "as_set_path", as_set_path)
        if as_set_path_variable is not None:
            pulumi.set(__self__, "as_set_path_variable", as_set_path_variable)
        if network_address is not None:
            pulumi.set(__self__, "network_address", network_address)
        if network_address_variable is not None:
            pulumi.set(__self__, "network_address_variable", network_address_variable)
        if subnet_mask is not None:
            pulumi.set(__self__, "subnet_mask", subnet_mask)
        if subnet_mask_variable is not None:
            pulumi.set(__self__, "subnet_mask_variable", subnet_mask_variable)
        if summary_only is not None:
            pulumi.set(__self__, "summary_only", summary_only)
        if summary_only_variable is not None:
            pulumi.set(__self__, "summary_only_variable", summary_only_variable)

    @_builtins.property
    @pulumi.getter(name="asSetPath")
    def as_set_path(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Set AS set path information
          - Default value: `false`
        """
        return pulumi.get(self, "as_set_path")

    @as_set_path.setter
    def as_set_path(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "as_set_path", value)

    @_builtins.property
    @pulumi.getter(name="asSetPathVariable")
    def as_set_path_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "as_set_path_variable")

    @as_set_path_variable.setter
    def as_set_path_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "as_set_path_variable", value)

    @_builtins.property
    @pulumi.getter(name="networkAddress")
    def network_address(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "network_address")

    @network_address.setter
    def network_address(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "network_address", value)

    @_builtins.property
    @pulumi.getter(name="networkAddressVariable")
    def network_address_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "network_address_variable")

    @network_address_variable.setter
    def network_address_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "network_address_variable", value)

    @_builtins.property
    @pulumi.getter(name="subnetMask")
    def subnet_mask(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        - Choices: `255.255.255.255`, `255.255.255.254`, `255.255.255.252`, `255.255.255.248`, `255.255.255.240`, `255.255.255.224`, `255.255.255.192`, `255.255.255.128`, `255.255.255.0`, `255.255.254.0`, `255.255.252.0`, `255.255.248.0`, `255.255.240.0`, `255.255.224.0`, `255.255.192.0`, `255.255.128.0`, `255.255.0.0`, `255.254.0.0`, `255.252.0.0`, `255.240.0.0`, `255.224.0.0`, `255.192.0.0`, `255.128.0.0`, `255.0.0.0`, `254.0.0.0`, `252.0.0.0`, `248.0.0.0`, `240.0.0.0`, `224.0.0.0`, `192.0.0.0`, `128.0.0.0`, `0.0.0.0`
        """
        return pulumi.get(self, "subnet_mask")

    @subnet_mask.setter
    def subnet_mask(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "subnet_mask", value)

    @_builtins.property
    @pulumi.getter(name="subnetMaskVariable")
    def subnet_mask_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "subnet_mask_variable")

    @subnet_mask_variable.setter
    def subnet_mask_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "subnet_mask_variable", value)

    @_builtins.property
    @pulumi.getter(name="summaryOnly")
    def summary_only(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Filter out more specific routes from updates
          - Default value: `false`
        """
        return pulumi.get(self, "summary_only")

    @summary_only.setter
    def summary_only(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "summary_only", value)

    @_builtins.property
    @pulumi.getter(name="summaryOnlyVariable")
    def summary_only_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "summary_only_variable")

    @summary_only_variable.setter
    def summary_only_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "summary_only_variable", value)


if not MYPY:
    class TransportRoutingBgpFeatureIpv4NeighborArgsDict(TypedDict):
        address: NotRequired[pulumi.Input[_builtins.str]]
        """
        Set neighbor address
        """
        address_families: NotRequired[pulumi.Input[Sequence[pulumi.Input['TransportRoutingBgpFeatureIpv4NeighborAddressFamilyArgsDict']]]]
        """
        Set BGP address family
        """
        address_variable: NotRequired[pulumi.Input[_builtins.str]]
        """
        Variable name
        """
        allowas_in_number: NotRequired[pulumi.Input[_builtins.int]]
        """
        The number of accept as-path with my AS present in it
          - Range: `1`-`10`
        """
        allowas_in_number_variable: NotRequired[pulumi.Input[_builtins.str]]
        """
        Variable name
        """
        as_override: NotRequired[pulumi.Input[_builtins.bool]]
        """
        Override matching AS-number while sending update
          - Default value: `false`
        """
        as_override_variable: NotRequired[pulumi.Input[_builtins.str]]
        """
        Variable name
        """
        description: NotRequired[pulumi.Input[_builtins.str]]
        """
        Set description
        """
        description_variable: NotRequired[pulumi.Input[_builtins.str]]
        """
        Variable name
        """
        ebgp_multihop: NotRequired[pulumi.Input[_builtins.int]]
        """
        Set TTL value for peers that are not directly connected
          - Range: `1`-`255`
          - Default value: `1`
        """
        ebgp_multihop_variable: NotRequired[pulumi.Input[_builtins.str]]
        """
        Variable name
        """
        explicit_null: NotRequired[pulumi.Input[_builtins.bool]]
        """
        Send explicit null label
          - Default value: `false`
        """
        explicit_null_variable: NotRequired[pulumi.Input[_builtins.str]]
        """
        Variable name
        """
        hold_time: NotRequired[pulumi.Input[_builtins.int]]
        """
        Set how long to wait since receiving a keepalive message to consider BGP peer unavailable
          - Range: `0`-`65535`
          - Default value: `180`
        """
        hold_time_variable: NotRequired[pulumi.Input[_builtins.str]]
        """
        Variable name
        """
        keepalive_time: NotRequired[pulumi.Input[_builtins.int]]
        """
        Set how often to advertise keepalive messages to BGP peer
          - Range: `0`-`65535`
          - Default value: `60`
        """
        keepalive_time_variable: NotRequired[pulumi.Input[_builtins.str]]
        """
        Variable name
        """
        local_as: NotRequired[pulumi.Input[_builtins.int]]
        """
        Set local autonomous number,Local-AS cannot have the local BGP protocol AS number or the AS number of the remote peer.The local-as is valid only if the peer is a true eBGP peer. It does not work for two peers in different sub-ASs in a confederation.
        """
        local_as_variable: NotRequired[pulumi.Input[_builtins.str]]
        """
        Variable name
        """
        next_hop_self: NotRequired[pulumi.Input[_builtins.bool]]
        """
        Set router to be next hop for routes advertised to neighbor
          - Default value: `false`
        """
        next_hop_self_variable: NotRequired[pulumi.Input[_builtins.str]]
        """
        Variable name
        """
        password: NotRequired[pulumi.Input[_builtins.str]]
        """
        Set MD5 password on TCP connection with BGP peer
        """
        password_variable: NotRequired[pulumi.Input[_builtins.str]]
        """
        Variable name
        """
        remote_as: NotRequired[pulumi.Input[_builtins.int]]
        """
        Set remote autonomous system number
        """
        remote_as_variable: NotRequired[pulumi.Input[_builtins.str]]
        """
        Variable name
        """
        send_community: NotRequired[pulumi.Input[_builtins.bool]]
        """
        Send community attribute
          - Default value: `true`
        """
        send_community_variable: NotRequired[pulumi.Input[_builtins.str]]
        """
        Variable name
        """
        send_extended_community: NotRequired[pulumi.Input[_builtins.bool]]
        """
        Send extended community attribute
          - Default value: `true`
        """
        send_extended_community_variable: NotRequired[pulumi.Input[_builtins.str]]
        """
        Variable name
        """
        send_label: NotRequired[pulumi.Input[_builtins.bool]]
        """
        Send label
          - Default value: `false`
        """
        shutdown: NotRequired[pulumi.Input[_builtins.bool]]
        """
        Enable or disable a BGP neighbor
          - Default value: `false`
        """
        shutdown_variable: NotRequired[pulumi.Input[_builtins.str]]
        """
        Variable name
        """
        update_source_interface: NotRequired[pulumi.Input[_builtins.str]]
        """
        Source interface name for BGP neighbor
        """
        update_source_interface_variable: NotRequired[pulumi.Input[_builtins.str]]
        """
        Variable name
        """
elif False:
    TransportRoutingBgpFeatureIpv4NeighborArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class TransportRoutingBgpFeatureIpv4NeighborArgs:
    def __init__(__self__, *,
                 address: Optional[pulumi.Input[_builtins.str]] = None,
                 address_families: Optional[pulumi.Input[Sequence[pulumi.Input['TransportRoutingBgpFeatureIpv4NeighborAddressFamilyArgs']]]] = None,
                 address_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 allowas_in_number: Optional[pulumi.Input[_builtins.int]] = None,
                 allowas_in_number_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 as_override: Optional[pulumi.Input[_builtins.bool]] = None,
                 as_override_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 description: Optional[pulumi.Input[_builtins.str]] = None,
                 description_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 ebgp_multihop: Optional[pulumi.Input[_builtins.int]] = None,
                 ebgp_multihop_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 explicit_null: Optional[pulumi.Input[_builtins.bool]] = None,
                 explicit_null_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 hold_time: Optional[pulumi.Input[_builtins.int]] = None,
                 hold_time_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 keepalive_time: Optional[pulumi.Input[_builtins.int]] = None,
                 keepalive_time_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 local_as: Optional[pulumi.Input[_builtins.int]] = None,
                 local_as_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 next_hop_self: Optional[pulumi.Input[_builtins.bool]] = None,
                 next_hop_self_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 password: Optional[pulumi.Input[_builtins.str]] = None,
                 password_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 remote_as: Optional[pulumi.Input[_builtins.int]] = None,
                 remote_as_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 send_community: Optional[pulumi.Input[_builtins.bool]] = None,
                 send_community_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 send_extended_community: Optional[pulumi.Input[_builtins.bool]] = None,
                 send_extended_community_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 send_label: Optional[pulumi.Input[_builtins.bool]] = None,
                 shutdown: Optional[pulumi.Input[_builtins.bool]] = None,
                 shutdown_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 update_source_interface: Optional[pulumi.Input[_builtins.str]] = None,
                 update_source_interface_variable: Optional[pulumi.Input[_builtins.str]] = None):
        """
        :param pulumi.Input[_builtins.str] address: Set neighbor address
        :param pulumi.Input[Sequence[pulumi.Input['TransportRoutingBgpFeatureIpv4NeighborAddressFamilyArgs']]] address_families: Set BGP address family
        :param pulumi.Input[_builtins.str] address_variable: Variable name
        :param pulumi.Input[_builtins.int] allowas_in_number: The number of accept as-path with my AS present in it
                 - Range: `1`-`10`
        :param pulumi.Input[_builtins.str] allowas_in_number_variable: Variable name
        :param pulumi.Input[_builtins.bool] as_override: Override matching AS-number while sending update
                 - Default value: `false`
        :param pulumi.Input[_builtins.str] as_override_variable: Variable name
        :param pulumi.Input[_builtins.str] description: Set description
        :param pulumi.Input[_builtins.str] description_variable: Variable name
        :param pulumi.Input[_builtins.int] ebgp_multihop: Set TTL value for peers that are not directly connected
                 - Range: `1`-`255`
                 - Default value: `1`
        :param pulumi.Input[_builtins.str] ebgp_multihop_variable: Variable name
        :param pulumi.Input[_builtins.bool] explicit_null: Send explicit null label
                 - Default value: `false`
        :param pulumi.Input[_builtins.str] explicit_null_variable: Variable name
        :param pulumi.Input[_builtins.int] hold_time: Set how long to wait since receiving a keepalive message to consider BGP peer unavailable
                 - Range: `0`-`65535`
                 - Default value: `180`
        :param pulumi.Input[_builtins.str] hold_time_variable: Variable name
        :param pulumi.Input[_builtins.int] keepalive_time: Set how often to advertise keepalive messages to BGP peer
                 - Range: `0`-`65535`
                 - Default value: `60`
        :param pulumi.Input[_builtins.str] keepalive_time_variable: Variable name
        :param pulumi.Input[_builtins.int] local_as: Set local autonomous number,Local-AS cannot have the local BGP protocol AS number or the AS number of the remote peer.The local-as is valid only if the peer is a true eBGP peer. It does not work for two peers in different sub-ASs in a confederation.
        :param pulumi.Input[_builtins.str] local_as_variable: Variable name
        :param pulumi.Input[_builtins.bool] next_hop_self: Set router to be next hop for routes advertised to neighbor
                 - Default value: `false`
        :param pulumi.Input[_builtins.str] next_hop_self_variable: Variable name
        :param pulumi.Input[_builtins.str] password: Set MD5 password on TCP connection with BGP peer
        :param pulumi.Input[_builtins.str] password_variable: Variable name
        :param pulumi.Input[_builtins.int] remote_as: Set remote autonomous system number
        :param pulumi.Input[_builtins.str] remote_as_variable: Variable name
        :param pulumi.Input[_builtins.bool] send_community: Send community attribute
                 - Default value: `true`
        :param pulumi.Input[_builtins.str] send_community_variable: Variable name
        :param pulumi.Input[_builtins.bool] send_extended_community: Send extended community attribute
                 - Default value: `true`
        :param pulumi.Input[_builtins.str] send_extended_community_variable: Variable name
        :param pulumi.Input[_builtins.bool] send_label: Send label
                 - Default value: `false`
        :param pulumi.Input[_builtins.bool] shutdown: Enable or disable a BGP neighbor
                 - Default value: `false`
        :param pulumi.Input[_builtins.str] shutdown_variable: Variable name
        :param pulumi.Input[_builtins.str] update_source_interface: Source interface name for BGP neighbor
        :param pulumi.Input[_builtins.str] update_source_interface_variable: Variable name
        """
        if address is not None:
            pulumi.set(__self__, "address", address)
        if address_families is not None:
            pulumi.set(__self__, "address_families", address_families)
        if address_variable is not None:
            pulumi.set(__self__, "address_variable", address_variable)
        if allowas_in_number is not None:
            pulumi.set(__self__, "allowas_in_number", allowas_in_number)
        if allowas_in_number_variable is not None:
            pulumi.set(__self__, "allowas_in_number_variable", allowas_in_number_variable)
        if as_override is not None:
            pulumi.set(__self__, "as_override", as_override)
        if as_override_variable is not None:
            pulumi.set(__self__, "as_override_variable", as_override_variable)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if description_variable is not None:
            pulumi.set(__self__, "description_variable", description_variable)
        if ebgp_multihop is not None:
            pulumi.set(__self__, "ebgp_multihop", ebgp_multihop)
        if ebgp_multihop_variable is not None:
            pulumi.set(__self__, "ebgp_multihop_variable", ebgp_multihop_variable)
        if explicit_null is not None:
            pulumi.set(__self__, "explicit_null", explicit_null)
        if explicit_null_variable is not None:
            pulumi.set(__self__, "explicit_null_variable", explicit_null_variable)
        if hold_time is not None:
            pulumi.set(__self__, "hold_time", hold_time)
        if hold_time_variable is not None:
            pulumi.set(__self__, "hold_time_variable", hold_time_variable)
        if keepalive_time is not None:
            pulumi.set(__self__, "keepalive_time", keepalive_time)
        if keepalive_time_variable is not None:
            pulumi.set(__self__, "keepalive_time_variable", keepalive_time_variable)
        if local_as is not None:
            pulumi.set(__self__, "local_as", local_as)
        if local_as_variable is not None:
            pulumi.set(__self__, "local_as_variable", local_as_variable)
        if next_hop_self is not None:
            pulumi.set(__self__, "next_hop_self", next_hop_self)
        if next_hop_self_variable is not None:
            pulumi.set(__self__, "next_hop_self_variable", next_hop_self_variable)
        if password is not None:
            pulumi.set(__self__, "password", password)
        if password_variable is not None:
            pulumi.set(__self__, "password_variable", password_variable)
        if remote_as is not None:
            pulumi.set(__self__, "remote_as", remote_as)
        if remote_as_variable is not None:
            pulumi.set(__self__, "remote_as_variable", remote_as_variable)
        if send_community is not None:
            pulumi.set(__self__, "send_community", send_community)
        if send_community_variable is not None:
            pulumi.set(__self__, "send_community_variable", send_community_variable)
        if send_extended_community is not None:
            pulumi.set(__self__, "send_extended_community", send_extended_community)
        if send_extended_community_variable is not None:
            pulumi.set(__self__, "send_extended_community_variable", send_extended_community_variable)
        if send_label is not None:
            pulumi.set(__self__, "send_label", send_label)
        if shutdown is not None:
            pulumi.set(__self__, "shutdown", shutdown)
        if shutdown_variable is not None:
            pulumi.set(__self__, "shutdown_variable", shutdown_variable)
        if update_source_interface is not None:
            pulumi.set(__self__, "update_source_interface", update_source_interface)
        if update_source_interface_variable is not None:
            pulumi.set(__self__, "update_source_interface_variable", update_source_interface_variable)

    @_builtins.property
    @pulumi.getter
    def address(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Set neighbor address
        """
        return pulumi.get(self, "address")

    @address.setter
    def address(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "address", value)

    @_builtins.property
    @pulumi.getter(name="addressFamilies")
    def address_families(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['TransportRoutingBgpFeatureIpv4NeighborAddressFamilyArgs']]]]:
        """
        Set BGP address family
        """
        return pulumi.get(self, "address_families")

    @address_families.setter
    def address_families(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['TransportRoutingBgpFeatureIpv4NeighborAddressFamilyArgs']]]]):
        pulumi.set(self, "address_families", value)

    @_builtins.property
    @pulumi.getter(name="addressVariable")
    def address_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "address_variable")

    @address_variable.setter
    def address_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "address_variable", value)

    @_builtins.property
    @pulumi.getter(name="allowasInNumber")
    def allowas_in_number(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        The number of accept as-path with my AS present in it
          - Range: `1`-`10`
        """
        return pulumi.get(self, "allowas_in_number")

    @allowas_in_number.setter
    def allowas_in_number(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "allowas_in_number", value)

    @_builtins.property
    @pulumi.getter(name="allowasInNumberVariable")
    def allowas_in_number_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "allowas_in_number_variable")

    @allowas_in_number_variable.setter
    def allowas_in_number_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "allowas_in_number_variable", value)

    @_builtins.property
    @pulumi.getter(name="asOverride")
    def as_override(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Override matching AS-number while sending update
          - Default value: `false`
        """
        return pulumi.get(self, "as_override")

    @as_override.setter
    def as_override(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "as_override", value)

    @_builtins.property
    @pulumi.getter(name="asOverrideVariable")
    def as_override_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "as_override_variable")

    @as_override_variable.setter
    def as_override_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "as_override_variable", value)

    @_builtins.property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Set description
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "description", value)

    @_builtins.property
    @pulumi.getter(name="descriptionVariable")
    def description_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "description_variable")

    @description_variable.setter
    def description_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "description_variable", value)

    @_builtins.property
    @pulumi.getter(name="ebgpMultihop")
    def ebgp_multihop(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        Set TTL value for peers that are not directly connected
          - Range: `1`-`255`
          - Default value: `1`
        """
        return pulumi.get(self, "ebgp_multihop")

    @ebgp_multihop.setter
    def ebgp_multihop(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "ebgp_multihop", value)

    @_builtins.property
    @pulumi.getter(name="ebgpMultihopVariable")
    def ebgp_multihop_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "ebgp_multihop_variable")

    @ebgp_multihop_variable.setter
    def ebgp_multihop_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "ebgp_multihop_variable", value)

    @_builtins.property
    @pulumi.getter(name="explicitNull")
    def explicit_null(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Send explicit null label
          - Default value: `false`
        """
        return pulumi.get(self, "explicit_null")

    @explicit_null.setter
    def explicit_null(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "explicit_null", value)

    @_builtins.property
    @pulumi.getter(name="explicitNullVariable")
    def explicit_null_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "explicit_null_variable")

    @explicit_null_variable.setter
    def explicit_null_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "explicit_null_variable", value)

    @_builtins.property
    @pulumi.getter(name="holdTime")
    def hold_time(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        Set how long to wait since receiving a keepalive message to consider BGP peer unavailable
          - Range: `0`-`65535`
          - Default value: `180`
        """
        return pulumi.get(self, "hold_time")

    @hold_time.setter
    def hold_time(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "hold_time", value)

    @_builtins.property
    @pulumi.getter(name="holdTimeVariable")
    def hold_time_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "hold_time_variable")

    @hold_time_variable.setter
    def hold_time_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "hold_time_variable", value)

    @_builtins.property
    @pulumi.getter(name="keepaliveTime")
    def keepalive_time(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        Set how often to advertise keepalive messages to BGP peer
          - Range: `0`-`65535`
          - Default value: `60`
        """
        return pulumi.get(self, "keepalive_time")

    @keepalive_time.setter
    def keepalive_time(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "keepalive_time", value)

    @_builtins.property
    @pulumi.getter(name="keepaliveTimeVariable")
    def keepalive_time_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "keepalive_time_variable")

    @keepalive_time_variable.setter
    def keepalive_time_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "keepalive_time_variable", value)

    @_builtins.property
    @pulumi.getter(name="localAs")
    def local_as(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        Set local autonomous number,Local-AS cannot have the local BGP protocol AS number or the AS number of the remote peer.The local-as is valid only if the peer is a true eBGP peer. It does not work for two peers in different sub-ASs in a confederation.
        """
        return pulumi.get(self, "local_as")

    @local_as.setter
    def local_as(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "local_as", value)

    @_builtins.property
    @pulumi.getter(name="localAsVariable")
    def local_as_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "local_as_variable")

    @local_as_variable.setter
    def local_as_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "local_as_variable", value)

    @_builtins.property
    @pulumi.getter(name="nextHopSelf")
    def next_hop_self(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Set router to be next hop for routes advertised to neighbor
          - Default value: `false`
        """
        return pulumi.get(self, "next_hop_self")

    @next_hop_self.setter
    def next_hop_self(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "next_hop_self", value)

    @_builtins.property
    @pulumi.getter(name="nextHopSelfVariable")
    def next_hop_self_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "next_hop_self_variable")

    @next_hop_self_variable.setter
    def next_hop_self_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "next_hop_self_variable", value)

    @_builtins.property
    @pulumi.getter
    def password(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Set MD5 password on TCP connection with BGP peer
        """
        return pulumi.get(self, "password")

    @password.setter
    def password(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "password", value)

    @_builtins.property
    @pulumi.getter(name="passwordVariable")
    def password_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "password_variable")

    @password_variable.setter
    def password_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "password_variable", value)

    @_builtins.property
    @pulumi.getter(name="remoteAs")
    def remote_as(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        Set remote autonomous system number
        """
        return pulumi.get(self, "remote_as")

    @remote_as.setter
    def remote_as(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "remote_as", value)

    @_builtins.property
    @pulumi.getter(name="remoteAsVariable")
    def remote_as_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "remote_as_variable")

    @remote_as_variable.setter
    def remote_as_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "remote_as_variable", value)

    @_builtins.property
    @pulumi.getter(name="sendCommunity")
    def send_community(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Send community attribute
          - Default value: `true`
        """
        return pulumi.get(self, "send_community")

    @send_community.setter
    def send_community(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "send_community", value)

    @_builtins.property
    @pulumi.getter(name="sendCommunityVariable")
    def send_community_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "send_community_variable")

    @send_community_variable.setter
    def send_community_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "send_community_variable", value)

    @_builtins.property
    @pulumi.getter(name="sendExtendedCommunity")
    def send_extended_community(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Send extended community attribute
          - Default value: `true`
        """
        return pulumi.get(self, "send_extended_community")

    @send_extended_community.setter
    def send_extended_community(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "send_extended_community", value)

    @_builtins.property
    @pulumi.getter(name="sendExtendedCommunityVariable")
    def send_extended_community_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "send_extended_community_variable")

    @send_extended_community_variable.setter
    def send_extended_community_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "send_extended_community_variable", value)

    @_builtins.property
    @pulumi.getter(name="sendLabel")
    def send_label(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Send label
          - Default value: `false`
        """
        return pulumi.get(self, "send_label")

    @send_label.setter
    def send_label(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "send_label", value)

    @_builtins.property
    @pulumi.getter
    def shutdown(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Enable or disable a BGP neighbor
          - Default value: `false`
        """
        return pulumi.get(self, "shutdown")

    @shutdown.setter
    def shutdown(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "shutdown", value)

    @_builtins.property
    @pulumi.getter(name="shutdownVariable")
    def shutdown_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "shutdown_variable")

    @shutdown_variable.setter
    def shutdown_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "shutdown_variable", value)

    @_builtins.property
    @pulumi.getter(name="updateSourceInterface")
    def update_source_interface(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Source interface name for BGP neighbor
        """
        return pulumi.get(self, "update_source_interface")

    @update_source_interface.setter
    def update_source_interface(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "update_source_interface", value)

    @_builtins.property
    @pulumi.getter(name="updateSourceInterfaceVariable")
    def update_source_interface_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "update_source_interface_variable")

    @update_source_interface_variable.setter
    def update_source_interface_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "update_source_interface_variable", value)


if not MYPY:
    class TransportRoutingBgpFeatureIpv4NeighborAddressFamilyArgsDict(TypedDict):
        disable_peer_max_number_of_prefixes: NotRequired[pulumi.Input[_builtins.int]]
        """
        Set maximum number of prefixes accepted from BGP peer, Attribute conditional on `policy_type` being equal to `disable-peer`
          - Range: `1`-`4294967295`
        """
        disable_peer_max_number_of_prefixes_variable: NotRequired[pulumi.Input[_builtins.str]]
        """
        Variable name, Attribute conditional on `policy_type` being equal to `disable-peer`
        """
        disable_peer_threshold: NotRequired[pulumi.Input[_builtins.int]]
        """
        Set threshold(1 to 100) at which to generate a warning message, Attribute conditional on `policy_type` being equal to `disable-peer`
          - Range: `1`-`100`
          - Default value: `75`
        """
        disable_peer_threshold_variable: NotRequired[pulumi.Input[_builtins.str]]
        """
        Variable name, Attribute conditional on `policy_type` being equal to `disable-peer`
        """
        family_type: NotRequired[pulumi.Input[_builtins.str]]
        """
        Set IPv4 unicast address family
          - Choices: `ipv4-unicast`, `vpnv4-unicast`, `vpnv6-unicast`
        """
        in_route_policy_id: NotRequired[pulumi.Input[_builtins.str]]
        out_route_policy_id: NotRequired[pulumi.Input[_builtins.str]]
        policy_type: NotRequired[pulumi.Input[_builtins.str]]
        """
        Neighbor received maximum prefix policy is disabled.
          - Choices: `restart`, `off`, `warning-only`, `disable-peer`
        """
        restart_interval: NotRequired[pulumi.Input[_builtins.int]]
        """
        Set the restart interval(minutes) when to restart BGP connection if threshold is exceeded, Attribute conditional on `policy_type` being equal to `restart`
          - Range: `1`-`65535`
        """
        restart_interval_variable: NotRequired[pulumi.Input[_builtins.str]]
        """
        Variable name, Attribute conditional on `policy_type` being equal to `restart`
        """
        restart_max_number_of_prefixes: NotRequired[pulumi.Input[_builtins.int]]
        """
        Set maximum number of prefixes accepted from BGP peer, Attribute conditional on `policy_type` being equal to `restart`
          - Range: `1`-`4294967295`
        """
        restart_max_number_of_prefixes_variable: NotRequired[pulumi.Input[_builtins.str]]
        """
        Variable name, Attribute conditional on `policy_type` being equal to `restart`
        """
        restart_threshold: NotRequired[pulumi.Input[_builtins.int]]
        """
        Set threshold(1 to 100) at which to generate a warning message, Attribute conditional on `policy_type` being equal to `restart`
          - Range: `1`-`100`
          - Default value: `75`
        """
        restart_threshold_variable: NotRequired[pulumi.Input[_builtins.str]]
        """
        Variable name, Attribute conditional on `policy_type` being equal to `restart`
        """
        warning_message_max_number_of_prefixes: NotRequired[pulumi.Input[_builtins.int]]
        """
        Set maximum number of prefixes accepted from BGP peer, Attribute conditional on `policy_type` being equal to `warning-only`
          - Range: `1`-`4294967295`
        """
        warning_message_max_number_of_prefixes_variable: NotRequired[pulumi.Input[_builtins.str]]
        """
        Variable name, Attribute conditional on `policy_type` being equal to `warning-only`
        """
        warning_message_threshold: NotRequired[pulumi.Input[_builtins.int]]
        """
        Set threshold(1 to 100) at which to generate a warning message, Attribute conditional on `policy_type` being equal to `warning-only`
          - Range: `1`-`100`
          - Default value: `75`
        """
        warning_message_threshold_variable: NotRequired[pulumi.Input[_builtins.str]]
        """
        Variable name, Attribute conditional on `policy_type` being equal to `warning-only`
        """
elif False:
    TransportRoutingBgpFeatureIpv4NeighborAddressFamilyArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class TransportRoutingBgpFeatureIpv4NeighborAddressFamilyArgs:
    def __init__(__self__, *,
                 disable_peer_max_number_of_prefixes: Optional[pulumi.Input[_builtins.int]] = None,
                 disable_peer_max_number_of_prefixes_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 disable_peer_threshold: Optional[pulumi.Input[_builtins.int]] = None,
                 disable_peer_threshold_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 family_type: Optional[pulumi.Input[_builtins.str]] = None,
                 in_route_policy_id: Optional[pulumi.Input[_builtins.str]] = None,
                 out_route_policy_id: Optional[pulumi.Input[_builtins.str]] = None,
                 policy_type: Optional[pulumi.Input[_builtins.str]] = None,
                 restart_interval: Optional[pulumi.Input[_builtins.int]] = None,
                 restart_interval_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 restart_max_number_of_prefixes: Optional[pulumi.Input[_builtins.int]] = None,
                 restart_max_number_of_prefixes_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 restart_threshold: Optional[pulumi.Input[_builtins.int]] = None,
                 restart_threshold_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 warning_message_max_number_of_prefixes: Optional[pulumi.Input[_builtins.int]] = None,
                 warning_message_max_number_of_prefixes_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 warning_message_threshold: Optional[pulumi.Input[_builtins.int]] = None,
                 warning_message_threshold_variable: Optional[pulumi.Input[_builtins.str]] = None):
        """
        :param pulumi.Input[_builtins.int] disable_peer_max_number_of_prefixes: Set maximum number of prefixes accepted from BGP peer, Attribute conditional on `policy_type` being equal to `disable-peer`
                 - Range: `1`-`4294967295`
        :param pulumi.Input[_builtins.str] disable_peer_max_number_of_prefixes_variable: Variable name, Attribute conditional on `policy_type` being equal to `disable-peer`
        :param pulumi.Input[_builtins.int] disable_peer_threshold: Set threshold(1 to 100) at which to generate a warning message, Attribute conditional on `policy_type` being equal to `disable-peer`
                 - Range: `1`-`100`
                 - Default value: `75`
        :param pulumi.Input[_builtins.str] disable_peer_threshold_variable: Variable name, Attribute conditional on `policy_type` being equal to `disable-peer`
        :param pulumi.Input[_builtins.str] family_type: Set IPv4 unicast address family
                 - Choices: `ipv4-unicast`, `vpnv4-unicast`, `vpnv6-unicast`
        :param pulumi.Input[_builtins.str] policy_type: Neighbor received maximum prefix policy is disabled.
                 - Choices: `restart`, `off`, `warning-only`, `disable-peer`
        :param pulumi.Input[_builtins.int] restart_interval: Set the restart interval(minutes) when to restart BGP connection if threshold is exceeded, Attribute conditional on `policy_type` being equal to `restart`
                 - Range: `1`-`65535`
        :param pulumi.Input[_builtins.str] restart_interval_variable: Variable name, Attribute conditional on `policy_type` being equal to `restart`
        :param pulumi.Input[_builtins.int] restart_max_number_of_prefixes: Set maximum number of prefixes accepted from BGP peer, Attribute conditional on `policy_type` being equal to `restart`
                 - Range: `1`-`4294967295`
        :param pulumi.Input[_builtins.str] restart_max_number_of_prefixes_variable: Variable name, Attribute conditional on `policy_type` being equal to `restart`
        :param pulumi.Input[_builtins.int] restart_threshold: Set threshold(1 to 100) at which to generate a warning message, Attribute conditional on `policy_type` being equal to `restart`
                 - Range: `1`-`100`
                 - Default value: `75`
        :param pulumi.Input[_builtins.str] restart_threshold_variable: Variable name, Attribute conditional on `policy_type` being equal to `restart`
        :param pulumi.Input[_builtins.int] warning_message_max_number_of_prefixes: Set maximum number of prefixes accepted from BGP peer, Attribute conditional on `policy_type` being equal to `warning-only`
                 - Range: `1`-`4294967295`
        :param pulumi.Input[_builtins.str] warning_message_max_number_of_prefixes_variable: Variable name, Attribute conditional on `policy_type` being equal to `warning-only`
        :param pulumi.Input[_builtins.int] warning_message_threshold: Set threshold(1 to 100) at which to generate a warning message, Attribute conditional on `policy_type` being equal to `warning-only`
                 - Range: `1`-`100`
                 - Default value: `75`
        :param pulumi.Input[_builtins.str] warning_message_threshold_variable: Variable name, Attribute conditional on `policy_type` being equal to `warning-only`
        """
        if disable_peer_max_number_of_prefixes is not None:
            pulumi.set(__self__, "disable_peer_max_number_of_prefixes", disable_peer_max_number_of_prefixes)
        if disable_peer_max_number_of_prefixes_variable is not None:
            pulumi.set(__self__, "disable_peer_max_number_of_prefixes_variable", disable_peer_max_number_of_prefixes_variable)
        if disable_peer_threshold is not None:
            pulumi.set(__self__, "disable_peer_threshold", disable_peer_threshold)
        if disable_peer_threshold_variable is not None:
            pulumi.set(__self__, "disable_peer_threshold_variable", disable_peer_threshold_variable)
        if family_type is not None:
            pulumi.set(__self__, "family_type", family_type)
        if in_route_policy_id is not None:
            pulumi.set(__self__, "in_route_policy_id", in_route_policy_id)
        if out_route_policy_id is not None:
            pulumi.set(__self__, "out_route_policy_id", out_route_policy_id)
        if policy_type is not None:
            pulumi.set(__self__, "policy_type", policy_type)
        if restart_interval is not None:
            pulumi.set(__self__, "restart_interval", restart_interval)
        if restart_interval_variable is not None:
            pulumi.set(__self__, "restart_interval_variable", restart_interval_variable)
        if restart_max_number_of_prefixes is not None:
            pulumi.set(__self__, "restart_max_number_of_prefixes", restart_max_number_of_prefixes)
        if restart_max_number_of_prefixes_variable is not None:
            pulumi.set(__self__, "restart_max_number_of_prefixes_variable", restart_max_number_of_prefixes_variable)
        if restart_threshold is not None:
            pulumi.set(__self__, "restart_threshold", restart_threshold)
        if restart_threshold_variable is not None:
            pulumi.set(__self__, "restart_threshold_variable", restart_threshold_variable)
        if warning_message_max_number_of_prefixes is not None:
            pulumi.set(__self__, "warning_message_max_number_of_prefixes", warning_message_max_number_of_prefixes)
        if warning_message_max_number_of_prefixes_variable is not None:
            pulumi.set(__self__, "warning_message_max_number_of_prefixes_variable", warning_message_max_number_of_prefixes_variable)
        if warning_message_threshold is not None:
            pulumi.set(__self__, "warning_message_threshold", warning_message_threshold)
        if warning_message_threshold_variable is not None:
            pulumi.set(__self__, "warning_message_threshold_variable", warning_message_threshold_variable)

    @_builtins.property
    @pulumi.getter(name="disablePeerMaxNumberOfPrefixes")
    def disable_peer_max_number_of_prefixes(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        Set maximum number of prefixes accepted from BGP peer, Attribute conditional on `policy_type` being equal to `disable-peer`
          - Range: `1`-`4294967295`
        """
        return pulumi.get(self, "disable_peer_max_number_of_prefixes")

    @disable_peer_max_number_of_prefixes.setter
    def disable_peer_max_number_of_prefixes(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "disable_peer_max_number_of_prefixes", value)

    @_builtins.property
    @pulumi.getter(name="disablePeerMaxNumberOfPrefixesVariable")
    def disable_peer_max_number_of_prefixes_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name, Attribute conditional on `policy_type` being equal to `disable-peer`
        """
        return pulumi.get(self, "disable_peer_max_number_of_prefixes_variable")

    @disable_peer_max_number_of_prefixes_variable.setter
    def disable_peer_max_number_of_prefixes_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "disable_peer_max_number_of_prefixes_variable", value)

    @_builtins.property
    @pulumi.getter(name="disablePeerThreshold")
    def disable_peer_threshold(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        Set threshold(1 to 100) at which to generate a warning message, Attribute conditional on `policy_type` being equal to `disable-peer`
          - Range: `1`-`100`
          - Default value: `75`
        """
        return pulumi.get(self, "disable_peer_threshold")

    @disable_peer_threshold.setter
    def disable_peer_threshold(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "disable_peer_threshold", value)

    @_builtins.property
    @pulumi.getter(name="disablePeerThresholdVariable")
    def disable_peer_threshold_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name, Attribute conditional on `policy_type` being equal to `disable-peer`
        """
        return pulumi.get(self, "disable_peer_threshold_variable")

    @disable_peer_threshold_variable.setter
    def disable_peer_threshold_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "disable_peer_threshold_variable", value)

    @_builtins.property
    @pulumi.getter(name="familyType")
    def family_type(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Set IPv4 unicast address family
          - Choices: `ipv4-unicast`, `vpnv4-unicast`, `vpnv6-unicast`
        """
        return pulumi.get(self, "family_type")

    @family_type.setter
    def family_type(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "family_type", value)

    @_builtins.property
    @pulumi.getter(name="inRoutePolicyId")
    def in_route_policy_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "in_route_policy_id")

    @in_route_policy_id.setter
    def in_route_policy_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "in_route_policy_id", value)

    @_builtins.property
    @pulumi.getter(name="outRoutePolicyId")
    def out_route_policy_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "out_route_policy_id")

    @out_route_policy_id.setter
    def out_route_policy_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "out_route_policy_id", value)

    @_builtins.property
    @pulumi.getter(name="policyType")
    def policy_type(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Neighbor received maximum prefix policy is disabled.
          - Choices: `restart`, `off`, `warning-only`, `disable-peer`
        """
        return pulumi.get(self, "policy_type")

    @policy_type.setter
    def policy_type(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "policy_type", value)

    @_builtins.property
    @pulumi.getter(name="restartInterval")
    def restart_interval(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        Set the restart interval(minutes) when to restart BGP connection if threshold is exceeded, Attribute conditional on `policy_type` being equal to `restart`
          - Range: `1`-`65535`
        """
        return pulumi.get(self, "restart_interval")

    @restart_interval.setter
    def restart_interval(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "restart_interval", value)

    @_builtins.property
    @pulumi.getter(name="restartIntervalVariable")
    def restart_interval_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name, Attribute conditional on `policy_type` being equal to `restart`
        """
        return pulumi.get(self, "restart_interval_variable")

    @restart_interval_variable.setter
    def restart_interval_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "restart_interval_variable", value)

    @_builtins.property
    @pulumi.getter(name="restartMaxNumberOfPrefixes")
    def restart_max_number_of_prefixes(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        Set maximum number of prefixes accepted from BGP peer, Attribute conditional on `policy_type` being equal to `restart`
          - Range: `1`-`4294967295`
        """
        return pulumi.get(self, "restart_max_number_of_prefixes")

    @restart_max_number_of_prefixes.setter
    def restart_max_number_of_prefixes(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "restart_max_number_of_prefixes", value)

    @_builtins.property
    @pulumi.getter(name="restartMaxNumberOfPrefixesVariable")
    def restart_max_number_of_prefixes_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name, Attribute conditional on `policy_type` being equal to `restart`
        """
        return pulumi.get(self, "restart_max_number_of_prefixes_variable")

    @restart_max_number_of_prefixes_variable.setter
    def restart_max_number_of_prefixes_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "restart_max_number_of_prefixes_variable", value)

    @_builtins.property
    @pulumi.getter(name="restartThreshold")
    def restart_threshold(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        Set threshold(1 to 100) at which to generate a warning message, Attribute conditional on `policy_type` being equal to `restart`
          - Range: `1`-`100`
          - Default value: `75`
        """
        return pulumi.get(self, "restart_threshold")

    @restart_threshold.setter
    def restart_threshold(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "restart_threshold", value)

    @_builtins.property
    @pulumi.getter(name="restartThresholdVariable")
    def restart_threshold_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name, Attribute conditional on `policy_type` being equal to `restart`
        """
        return pulumi.get(self, "restart_threshold_variable")

    @restart_threshold_variable.setter
    def restart_threshold_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "restart_threshold_variable", value)

    @_builtins.property
    @pulumi.getter(name="warningMessageMaxNumberOfPrefixes")
    def warning_message_max_number_of_prefixes(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        Set maximum number of prefixes accepted from BGP peer, Attribute conditional on `policy_type` being equal to `warning-only`
          - Range: `1`-`4294967295`
        """
        return pulumi.get(self, "warning_message_max_number_of_prefixes")

    @warning_message_max_number_of_prefixes.setter
    def warning_message_max_number_of_prefixes(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "warning_message_max_number_of_prefixes", value)

    @_builtins.property
    @pulumi.getter(name="warningMessageMaxNumberOfPrefixesVariable")
    def warning_message_max_number_of_prefixes_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name, Attribute conditional on `policy_type` being equal to `warning-only`
        """
        return pulumi.get(self, "warning_message_max_number_of_prefixes_variable")

    @warning_message_max_number_of_prefixes_variable.setter
    def warning_message_max_number_of_prefixes_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "warning_message_max_number_of_prefixes_variable", value)

    @_builtins.property
    @pulumi.getter(name="warningMessageThreshold")
    def warning_message_threshold(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        Set threshold(1 to 100) at which to generate a warning message, Attribute conditional on `policy_type` being equal to `warning-only`
          - Range: `1`-`100`
          - Default value: `75`
        """
        return pulumi.get(self, "warning_message_threshold")

    @warning_message_threshold.setter
    def warning_message_threshold(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "warning_message_threshold", value)

    @_builtins.property
    @pulumi.getter(name="warningMessageThresholdVariable")
    def warning_message_threshold_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name, Attribute conditional on `policy_type` being equal to `warning-only`
        """
        return pulumi.get(self, "warning_message_threshold_variable")

    @warning_message_threshold_variable.setter
    def warning_message_threshold_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "warning_message_threshold_variable", value)


if not MYPY:
    class TransportRoutingBgpFeatureIpv4NetworkArgsDict(TypedDict):
        network_address: NotRequired[pulumi.Input[_builtins.str]]
        network_address_variable: NotRequired[pulumi.Input[_builtins.str]]
        """
        Variable name
        """
        subnet_mask: NotRequired[pulumi.Input[_builtins.str]]
        """
        - Choices: `255.255.255.255`, `255.255.255.254`, `255.255.255.252`, `255.255.255.248`, `255.255.255.240`, `255.255.255.224`, `255.255.255.192`, `255.255.255.128`, `255.255.255.0`, `255.255.254.0`, `255.255.252.0`, `255.255.248.0`, `255.255.240.0`, `255.255.224.0`, `255.255.192.0`, `255.255.128.0`, `255.255.0.0`, `255.254.0.0`, `255.252.0.0`, `255.240.0.0`, `255.224.0.0`, `255.192.0.0`, `255.128.0.0`, `255.0.0.0`, `254.0.0.0`, `252.0.0.0`, `248.0.0.0`, `240.0.0.0`, `224.0.0.0`, `192.0.0.0`, `128.0.0.0`, `0.0.0.0`
        """
        subnet_mask_variable: NotRequired[pulumi.Input[_builtins.str]]
        """
        Variable name
        """
elif False:
    TransportRoutingBgpFeatureIpv4NetworkArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class TransportRoutingBgpFeatureIpv4NetworkArgs:
    def __init__(__self__, *,
                 network_address: Optional[pulumi.Input[_builtins.str]] = None,
                 network_address_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 subnet_mask: Optional[pulumi.Input[_builtins.str]] = None,
                 subnet_mask_variable: Optional[pulumi.Input[_builtins.str]] = None):
        """
        :param pulumi.Input[_builtins.str] network_address_variable: Variable name
        :param pulumi.Input[_builtins.str] subnet_mask: - Choices: `255.255.255.255`, `255.255.255.254`, `255.255.255.252`, `255.255.255.248`, `255.255.255.240`, `255.255.255.224`, `255.255.255.192`, `255.255.255.128`, `255.255.255.0`, `255.255.254.0`, `255.255.252.0`, `255.255.248.0`, `255.255.240.0`, `255.255.224.0`, `255.255.192.0`, `255.255.128.0`, `255.255.0.0`, `255.254.0.0`, `255.252.0.0`, `255.240.0.0`, `255.224.0.0`, `255.192.0.0`, `255.128.0.0`, `255.0.0.0`, `254.0.0.0`, `252.0.0.0`, `248.0.0.0`, `240.0.0.0`, `224.0.0.0`, `192.0.0.0`, `128.0.0.0`, `0.0.0.0`
        :param pulumi.Input[_builtins.str] subnet_mask_variable: Variable name
        """
        if network_address is not None:
            pulumi.set(__self__, "network_address", network_address)
        if network_address_variable is not None:
            pulumi.set(__self__, "network_address_variable", network_address_variable)
        if subnet_mask is not None:
            pulumi.set(__self__, "subnet_mask", subnet_mask)
        if subnet_mask_variable is not None:
            pulumi.set(__self__, "subnet_mask_variable", subnet_mask_variable)

    @_builtins.property
    @pulumi.getter(name="networkAddress")
    def network_address(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "network_address")

    @network_address.setter
    def network_address(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "network_address", value)

    @_builtins.property
    @pulumi.getter(name="networkAddressVariable")
    def network_address_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "network_address_variable")

    @network_address_variable.setter
    def network_address_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "network_address_variable", value)

    @_builtins.property
    @pulumi.getter(name="subnetMask")
    def subnet_mask(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        - Choices: `255.255.255.255`, `255.255.255.254`, `255.255.255.252`, `255.255.255.248`, `255.255.255.240`, `255.255.255.224`, `255.255.255.192`, `255.255.255.128`, `255.255.255.0`, `255.255.254.0`, `255.255.252.0`, `255.255.248.0`, `255.255.240.0`, `255.255.224.0`, `255.255.192.0`, `255.255.128.0`, `255.255.0.0`, `255.254.0.0`, `255.252.0.0`, `255.240.0.0`, `255.224.0.0`, `255.192.0.0`, `255.128.0.0`, `255.0.0.0`, `254.0.0.0`, `252.0.0.0`, `248.0.0.0`, `240.0.0.0`, `224.0.0.0`, `192.0.0.0`, `128.0.0.0`, `0.0.0.0`
        """
        return pulumi.get(self, "subnet_mask")

    @subnet_mask.setter
    def subnet_mask(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "subnet_mask", value)

    @_builtins.property
    @pulumi.getter(name="subnetMaskVariable")
    def subnet_mask_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "subnet_mask_variable")

    @subnet_mask_variable.setter
    def subnet_mask_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "subnet_mask_variable", value)


if not MYPY:
    class TransportRoutingBgpFeatureIpv4RedistributeArgsDict(TypedDict):
        protocol: NotRequired[pulumi.Input[_builtins.str]]
        """
        Set the protocol to redistribute routes from
          - Choices: `static`, `connected`, `ospf`, `ospfv3`, `nat`
        """
        protocol_variable: NotRequired[pulumi.Input[_builtins.str]]
        """
        Variable name
        """
        route_policy_id: NotRequired[pulumi.Input[_builtins.str]]
elif False:
    TransportRoutingBgpFeatureIpv4RedistributeArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class TransportRoutingBgpFeatureIpv4RedistributeArgs:
    def __init__(__self__, *,
                 protocol: Optional[pulumi.Input[_builtins.str]] = None,
                 protocol_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 route_policy_id: Optional[pulumi.Input[_builtins.str]] = None):
        """
        :param pulumi.Input[_builtins.str] protocol: Set the protocol to redistribute routes from
                 - Choices: `static`, `connected`, `ospf`, `ospfv3`, `nat`
        :param pulumi.Input[_builtins.str] protocol_variable: Variable name
        """
        if protocol is not None:
            pulumi.set(__self__, "protocol", protocol)
        if protocol_variable is not None:
            pulumi.set(__self__, "protocol_variable", protocol_variable)
        if route_policy_id is not None:
            pulumi.set(__self__, "route_policy_id", route_policy_id)

    @_builtins.property
    @pulumi.getter
    def protocol(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Set the protocol to redistribute routes from
          - Choices: `static`, `connected`, `ospf`, `ospfv3`, `nat`
        """
        return pulumi.get(self, "protocol")

    @protocol.setter
    def protocol(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "protocol", value)

    @_builtins.property
    @pulumi.getter(name="protocolVariable")
    def protocol_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "protocol_variable")

    @protocol_variable.setter
    def protocol_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "protocol_variable", value)

    @_builtins.property
    @pulumi.getter(name="routePolicyId")
    def route_policy_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "route_policy_id")

    @route_policy_id.setter
    def route_policy_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "route_policy_id", value)


if not MYPY:
    class TransportRoutingBgpFeatureIpv6AggregateAddressArgsDict(TypedDict):
        aggregate_prefix: NotRequired[pulumi.Input[_builtins.str]]
        """
        Configure the IPv6 prefixes to aggregate
        """
        aggregate_prefix_variable: NotRequired[pulumi.Input[_builtins.str]]
        """
        Variable name
        """
        as_set_path: NotRequired[pulumi.Input[_builtins.bool]]
        """
        Set AS set path information
          - Default value: `false`
        """
        as_set_path_variable: NotRequired[pulumi.Input[_builtins.str]]
        """
        Variable name
        """
        summary_only: NotRequired[pulumi.Input[_builtins.bool]]
        """
        Filter out more specific routes from updates
          - Default value: `false`
        """
        summary_only_variable: NotRequired[pulumi.Input[_builtins.str]]
        """
        Variable name
        """
elif False:
    TransportRoutingBgpFeatureIpv6AggregateAddressArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class TransportRoutingBgpFeatureIpv6AggregateAddressArgs:
    def __init__(__self__, *,
                 aggregate_prefix: Optional[pulumi.Input[_builtins.str]] = None,
                 aggregate_prefix_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 as_set_path: Optional[pulumi.Input[_builtins.bool]] = None,
                 as_set_path_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 summary_only: Optional[pulumi.Input[_builtins.bool]] = None,
                 summary_only_variable: Optional[pulumi.Input[_builtins.str]] = None):
        """
        :param pulumi.Input[_builtins.str] aggregate_prefix: Configure the IPv6 prefixes to aggregate
        :param pulumi.Input[_builtins.str] aggregate_prefix_variable: Variable name
        :param pulumi.Input[_builtins.bool] as_set_path: Set AS set path information
                 - Default value: `false`
        :param pulumi.Input[_builtins.str] as_set_path_variable: Variable name
        :param pulumi.Input[_builtins.bool] summary_only: Filter out more specific routes from updates
                 - Default value: `false`
        :param pulumi.Input[_builtins.str] summary_only_variable: Variable name
        """
        if aggregate_prefix is not None:
            pulumi.set(__self__, "aggregate_prefix", aggregate_prefix)
        if aggregate_prefix_variable is not None:
            pulumi.set(__self__, "aggregate_prefix_variable", aggregate_prefix_variable)
        if as_set_path is not None:
            pulumi.set(__self__, "as_set_path", as_set_path)
        if as_set_path_variable is not None:
            pulumi.set(__self__, "as_set_path_variable", as_set_path_variable)
        if summary_only is not None:
            pulumi.set(__self__, "summary_only", summary_only)
        if summary_only_variable is not None:
            pulumi.set(__self__, "summary_only_variable", summary_only_variable)

    @_builtins.property
    @pulumi.getter(name="aggregatePrefix")
    def aggregate_prefix(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Configure the IPv6 prefixes to aggregate
        """
        return pulumi.get(self, "aggregate_prefix")

    @aggregate_prefix.setter
    def aggregate_prefix(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "aggregate_prefix", value)

    @_builtins.property
    @pulumi.getter(name="aggregatePrefixVariable")
    def aggregate_prefix_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "aggregate_prefix_variable")

    @aggregate_prefix_variable.setter
    def aggregate_prefix_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "aggregate_prefix_variable", value)

    @_builtins.property
    @pulumi.getter(name="asSetPath")
    def as_set_path(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Set AS set path information
          - Default value: `false`
        """
        return pulumi.get(self, "as_set_path")

    @as_set_path.setter
    def as_set_path(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "as_set_path", value)

    @_builtins.property
    @pulumi.getter(name="asSetPathVariable")
    def as_set_path_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "as_set_path_variable")

    @as_set_path_variable.setter
    def as_set_path_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "as_set_path_variable", value)

    @_builtins.property
    @pulumi.getter(name="summaryOnly")
    def summary_only(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Filter out more specific routes from updates
          - Default value: `false`
        """
        return pulumi.get(self, "summary_only")

    @summary_only.setter
    def summary_only(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "summary_only", value)

    @_builtins.property
    @pulumi.getter(name="summaryOnlyVariable")
    def summary_only_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "summary_only_variable")

    @summary_only_variable.setter
    def summary_only_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "summary_only_variable", value)


if not MYPY:
    class TransportRoutingBgpFeatureIpv6NeighborArgsDict(TypedDict):
        address: NotRequired[pulumi.Input[_builtins.str]]
        """
        Set IPv6 neighbor address
        """
        address_families: NotRequired[pulumi.Input[Sequence[pulumi.Input['TransportRoutingBgpFeatureIpv6NeighborAddressFamilyArgsDict']]]]
        """
        Set IPv6 BGP address family
        """
        address_variable: NotRequired[pulumi.Input[_builtins.str]]
        """
        Variable name
        """
        allowas_in_number: NotRequired[pulumi.Input[_builtins.int]]
        """
        The number of accept as-path with my AS present in it
          - Range: `1`-`10`
        """
        allowas_in_number_variable: NotRequired[pulumi.Input[_builtins.str]]
        """
        Variable name
        """
        as_override: NotRequired[pulumi.Input[_builtins.bool]]
        """
        Override matching AS-number while sending update
          - Default value: `false`
        """
        as_override_variable: NotRequired[pulumi.Input[_builtins.str]]
        """
        Variable name
        """
        description: NotRequired[pulumi.Input[_builtins.str]]
        """
        Set description
        """
        description_variable: NotRequired[pulumi.Input[_builtins.str]]
        """
        Variable name
        """
        ebgp_multihop: NotRequired[pulumi.Input[_builtins.int]]
        """
        Set TTL value for peers that are not directly connected
          - Range: `1`-`255`
          - Default value: `1`
        """
        ebgp_multihop_variable: NotRequired[pulumi.Input[_builtins.str]]
        """
        Variable name
        """
        hold_time: NotRequired[pulumi.Input[_builtins.int]]
        """
        Interval (seconds) not receiving a keepalive message declares a BGP peer down
          - Range: `0`-`65535`
          - Default value: `180`
        """
        hold_time_variable: NotRequired[pulumi.Input[_builtins.str]]
        """
        Variable name
        """
        keepalive_time: NotRequired[pulumi.Input[_builtins.int]]
        """
        Interval (seconds) of keepalive messages sent to its BGP peer
          - Range: `0`-`65535`
          - Default value: `60`
        """
        keepalive_time_variable: NotRequired[pulumi.Input[_builtins.str]]
        """
        Variable name
        """
        local_as: NotRequired[pulumi.Input[_builtins.int]]
        """
        Set local autonomous system number,Local-AS cannot have the local BGP protocol AS number or the AS number of the remote peer.The local-as is valid only if the peer is a true eBGP peer. It does not work for two peers in different sub-ASs in a confederation.
        """
        local_as_variable: NotRequired[pulumi.Input[_builtins.str]]
        """
        Variable name
        """
        next_hop_self: NotRequired[pulumi.Input[_builtins.bool]]
        """
        Set router to be next hop for routes advertised to neighbor
          - Default value: `false`
        """
        next_hop_self_variable: NotRequired[pulumi.Input[_builtins.str]]
        """
        Variable name
        """
        password: NotRequired[pulumi.Input[_builtins.str]]
        """
        Set MD5 password on TCP connection with BGP peer
        """
        password_variable: NotRequired[pulumi.Input[_builtins.str]]
        """
        Variable name
        """
        remote_as: NotRequired[pulumi.Input[_builtins.int]]
        """
        Set remote autonomous system number
        """
        remote_as_variable: NotRequired[pulumi.Input[_builtins.str]]
        """
        Variable name
        """
        send_community: NotRequired[pulumi.Input[_builtins.bool]]
        """
        Send community attribute
          - Default value: `true`
        """
        send_community_variable: NotRequired[pulumi.Input[_builtins.str]]
        """
        Variable name
        """
        send_extended_community: NotRequired[pulumi.Input[_builtins.bool]]
        """
        Send extended community attribute
          - Default value: `true`
        """
        send_extended_community_variable: NotRequired[pulumi.Input[_builtins.str]]
        """
        Variable name
        """
        shutdown: NotRequired[pulumi.Input[_builtins.bool]]
        """
        Enable or disable a BGP neighbor
          - Default value: `false`
        """
        shutdown_variable: NotRequired[pulumi.Input[_builtins.str]]
        """
        Variable name
        """
        update_source_interface: NotRequired[pulumi.Input[_builtins.str]]
        """
        Source interface name for BGP neighbor
        """
        update_source_interface_variable: NotRequired[pulumi.Input[_builtins.str]]
        """
        Variable name
        """
elif False:
    TransportRoutingBgpFeatureIpv6NeighborArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class TransportRoutingBgpFeatureIpv6NeighborArgs:
    def __init__(__self__, *,
                 address: Optional[pulumi.Input[_builtins.str]] = None,
                 address_families: Optional[pulumi.Input[Sequence[pulumi.Input['TransportRoutingBgpFeatureIpv6NeighborAddressFamilyArgs']]]] = None,
                 address_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 allowas_in_number: Optional[pulumi.Input[_builtins.int]] = None,
                 allowas_in_number_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 as_override: Optional[pulumi.Input[_builtins.bool]] = None,
                 as_override_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 description: Optional[pulumi.Input[_builtins.str]] = None,
                 description_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 ebgp_multihop: Optional[pulumi.Input[_builtins.int]] = None,
                 ebgp_multihop_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 hold_time: Optional[pulumi.Input[_builtins.int]] = None,
                 hold_time_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 keepalive_time: Optional[pulumi.Input[_builtins.int]] = None,
                 keepalive_time_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 local_as: Optional[pulumi.Input[_builtins.int]] = None,
                 local_as_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 next_hop_self: Optional[pulumi.Input[_builtins.bool]] = None,
                 next_hop_self_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 password: Optional[pulumi.Input[_builtins.str]] = None,
                 password_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 remote_as: Optional[pulumi.Input[_builtins.int]] = None,
                 remote_as_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 send_community: Optional[pulumi.Input[_builtins.bool]] = None,
                 send_community_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 send_extended_community: Optional[pulumi.Input[_builtins.bool]] = None,
                 send_extended_community_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 shutdown: Optional[pulumi.Input[_builtins.bool]] = None,
                 shutdown_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 update_source_interface: Optional[pulumi.Input[_builtins.str]] = None,
                 update_source_interface_variable: Optional[pulumi.Input[_builtins.str]] = None):
        """
        :param pulumi.Input[_builtins.str] address: Set IPv6 neighbor address
        :param pulumi.Input[Sequence[pulumi.Input['TransportRoutingBgpFeatureIpv6NeighborAddressFamilyArgs']]] address_families: Set IPv6 BGP address family
        :param pulumi.Input[_builtins.str] address_variable: Variable name
        :param pulumi.Input[_builtins.int] allowas_in_number: The number of accept as-path with my AS present in it
                 - Range: `1`-`10`
        :param pulumi.Input[_builtins.str] allowas_in_number_variable: Variable name
        :param pulumi.Input[_builtins.bool] as_override: Override matching AS-number while sending update
                 - Default value: `false`
        :param pulumi.Input[_builtins.str] as_override_variable: Variable name
        :param pulumi.Input[_builtins.str] description: Set description
        :param pulumi.Input[_builtins.str] description_variable: Variable name
        :param pulumi.Input[_builtins.int] ebgp_multihop: Set TTL value for peers that are not directly connected
                 - Range: `1`-`255`
                 - Default value: `1`
        :param pulumi.Input[_builtins.str] ebgp_multihop_variable: Variable name
        :param pulumi.Input[_builtins.int] hold_time: Interval (seconds) not receiving a keepalive message declares a BGP peer down
                 - Range: `0`-`65535`
                 - Default value: `180`
        :param pulumi.Input[_builtins.str] hold_time_variable: Variable name
        :param pulumi.Input[_builtins.int] keepalive_time: Interval (seconds) of keepalive messages sent to its BGP peer
                 - Range: `0`-`65535`
                 - Default value: `60`
        :param pulumi.Input[_builtins.str] keepalive_time_variable: Variable name
        :param pulumi.Input[_builtins.int] local_as: Set local autonomous system number,Local-AS cannot have the local BGP protocol AS number or the AS number of the remote peer.The local-as is valid only if the peer is a true eBGP peer. It does not work for two peers in different sub-ASs in a confederation.
        :param pulumi.Input[_builtins.str] local_as_variable: Variable name
        :param pulumi.Input[_builtins.bool] next_hop_self: Set router to be next hop for routes advertised to neighbor
                 - Default value: `false`
        :param pulumi.Input[_builtins.str] next_hop_self_variable: Variable name
        :param pulumi.Input[_builtins.str] password: Set MD5 password on TCP connection with BGP peer
        :param pulumi.Input[_builtins.str] password_variable: Variable name
        :param pulumi.Input[_builtins.int] remote_as: Set remote autonomous system number
        :param pulumi.Input[_builtins.str] remote_as_variable: Variable name
        :param pulumi.Input[_builtins.bool] send_community: Send community attribute
                 - Default value: `true`
        :param pulumi.Input[_builtins.str] send_community_variable: Variable name
        :param pulumi.Input[_builtins.bool] send_extended_community: Send extended community attribute
                 - Default value: `true`
        :param pulumi.Input[_builtins.str] send_extended_community_variable: Variable name
        :param pulumi.Input[_builtins.bool] shutdown: Enable or disable a BGP neighbor
                 - Default value: `false`
        :param pulumi.Input[_builtins.str] shutdown_variable: Variable name
        :param pulumi.Input[_builtins.str] update_source_interface: Source interface name for BGP neighbor
        :param pulumi.Input[_builtins.str] update_source_interface_variable: Variable name
        """
        if address is not None:
            pulumi.set(__self__, "address", address)
        if address_families is not None:
            pulumi.set(__self__, "address_families", address_families)
        if address_variable is not None:
            pulumi.set(__self__, "address_variable", address_variable)
        if allowas_in_number is not None:
            pulumi.set(__self__, "allowas_in_number", allowas_in_number)
        if allowas_in_number_variable is not None:
            pulumi.set(__self__, "allowas_in_number_variable", allowas_in_number_variable)
        if as_override is not None:
            pulumi.set(__self__, "as_override", as_override)
        if as_override_variable is not None:
            pulumi.set(__self__, "as_override_variable", as_override_variable)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if description_variable is not None:
            pulumi.set(__self__, "description_variable", description_variable)
        if ebgp_multihop is not None:
            pulumi.set(__self__, "ebgp_multihop", ebgp_multihop)
        if ebgp_multihop_variable is not None:
            pulumi.set(__self__, "ebgp_multihop_variable", ebgp_multihop_variable)
        if hold_time is not None:
            pulumi.set(__self__, "hold_time", hold_time)
        if hold_time_variable is not None:
            pulumi.set(__self__, "hold_time_variable", hold_time_variable)
        if keepalive_time is not None:
            pulumi.set(__self__, "keepalive_time", keepalive_time)
        if keepalive_time_variable is not None:
            pulumi.set(__self__, "keepalive_time_variable", keepalive_time_variable)
        if local_as is not None:
            pulumi.set(__self__, "local_as", local_as)
        if local_as_variable is not None:
            pulumi.set(__self__, "local_as_variable", local_as_variable)
        if next_hop_self is not None:
            pulumi.set(__self__, "next_hop_self", next_hop_self)
        if next_hop_self_variable is not None:
            pulumi.set(__self__, "next_hop_self_variable", next_hop_self_variable)
        if password is not None:
            pulumi.set(__self__, "password", password)
        if password_variable is not None:
            pulumi.set(__self__, "password_variable", password_variable)
        if remote_as is not None:
            pulumi.set(__self__, "remote_as", remote_as)
        if remote_as_variable is not None:
            pulumi.set(__self__, "remote_as_variable", remote_as_variable)
        if send_community is not None:
            pulumi.set(__self__, "send_community", send_community)
        if send_community_variable is not None:
            pulumi.set(__self__, "send_community_variable", send_community_variable)
        if send_extended_community is not None:
            pulumi.set(__self__, "send_extended_community", send_extended_community)
        if send_extended_community_variable is not None:
            pulumi.set(__self__, "send_extended_community_variable", send_extended_community_variable)
        if shutdown is not None:
            pulumi.set(__self__, "shutdown", shutdown)
        if shutdown_variable is not None:
            pulumi.set(__self__, "shutdown_variable", shutdown_variable)
        if update_source_interface is not None:
            pulumi.set(__self__, "update_source_interface", update_source_interface)
        if update_source_interface_variable is not None:
            pulumi.set(__self__, "update_source_interface_variable", update_source_interface_variable)

    @_builtins.property
    @pulumi.getter
    def address(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Set IPv6 neighbor address
        """
        return pulumi.get(self, "address")

    @address.setter
    def address(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "address", value)

    @_builtins.property
    @pulumi.getter(name="addressFamilies")
    def address_families(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['TransportRoutingBgpFeatureIpv6NeighborAddressFamilyArgs']]]]:
        """
        Set IPv6 BGP address family
        """
        return pulumi.get(self, "address_families")

    @address_families.setter
    def address_families(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['TransportRoutingBgpFeatureIpv6NeighborAddressFamilyArgs']]]]):
        pulumi.set(self, "address_families", value)

    @_builtins.property
    @pulumi.getter(name="addressVariable")
    def address_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "address_variable")

    @address_variable.setter
    def address_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "address_variable", value)

    @_builtins.property
    @pulumi.getter(name="allowasInNumber")
    def allowas_in_number(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        The number of accept as-path with my AS present in it
          - Range: `1`-`10`
        """
        return pulumi.get(self, "allowas_in_number")

    @allowas_in_number.setter
    def allowas_in_number(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "allowas_in_number", value)

    @_builtins.property
    @pulumi.getter(name="allowasInNumberVariable")
    def allowas_in_number_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "allowas_in_number_variable")

    @allowas_in_number_variable.setter
    def allowas_in_number_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "allowas_in_number_variable", value)

    @_builtins.property
    @pulumi.getter(name="asOverride")
    def as_override(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Override matching AS-number while sending update
          - Default value: `false`
        """
        return pulumi.get(self, "as_override")

    @as_override.setter
    def as_override(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "as_override", value)

    @_builtins.property
    @pulumi.getter(name="asOverrideVariable")
    def as_override_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "as_override_variable")

    @as_override_variable.setter
    def as_override_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "as_override_variable", value)

    @_builtins.property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Set description
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "description", value)

    @_builtins.property
    @pulumi.getter(name="descriptionVariable")
    def description_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "description_variable")

    @description_variable.setter
    def description_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "description_variable", value)

    @_builtins.property
    @pulumi.getter(name="ebgpMultihop")
    def ebgp_multihop(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        Set TTL value for peers that are not directly connected
          - Range: `1`-`255`
          - Default value: `1`
        """
        return pulumi.get(self, "ebgp_multihop")

    @ebgp_multihop.setter
    def ebgp_multihop(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "ebgp_multihop", value)

    @_builtins.property
    @pulumi.getter(name="ebgpMultihopVariable")
    def ebgp_multihop_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "ebgp_multihop_variable")

    @ebgp_multihop_variable.setter
    def ebgp_multihop_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "ebgp_multihop_variable", value)

    @_builtins.property
    @pulumi.getter(name="holdTime")
    def hold_time(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        Interval (seconds) not receiving a keepalive message declares a BGP peer down
          - Range: `0`-`65535`
          - Default value: `180`
        """
        return pulumi.get(self, "hold_time")

    @hold_time.setter
    def hold_time(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "hold_time", value)

    @_builtins.property
    @pulumi.getter(name="holdTimeVariable")
    def hold_time_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "hold_time_variable")

    @hold_time_variable.setter
    def hold_time_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "hold_time_variable", value)

    @_builtins.property
    @pulumi.getter(name="keepaliveTime")
    def keepalive_time(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        Interval (seconds) of keepalive messages sent to its BGP peer
          - Range: `0`-`65535`
          - Default value: `60`
        """
        return pulumi.get(self, "keepalive_time")

    @keepalive_time.setter
    def keepalive_time(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "keepalive_time", value)

    @_builtins.property
    @pulumi.getter(name="keepaliveTimeVariable")
    def keepalive_time_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "keepalive_time_variable")

    @keepalive_time_variable.setter
    def keepalive_time_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "keepalive_time_variable", value)

    @_builtins.property
    @pulumi.getter(name="localAs")
    def local_as(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        Set local autonomous system number,Local-AS cannot have the local BGP protocol AS number or the AS number of the remote peer.The local-as is valid only if the peer is a true eBGP peer. It does not work for two peers in different sub-ASs in a confederation.
        """
        return pulumi.get(self, "local_as")

    @local_as.setter
    def local_as(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "local_as", value)

    @_builtins.property
    @pulumi.getter(name="localAsVariable")
    def local_as_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "local_as_variable")

    @local_as_variable.setter
    def local_as_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "local_as_variable", value)

    @_builtins.property
    @pulumi.getter(name="nextHopSelf")
    def next_hop_self(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Set router to be next hop for routes advertised to neighbor
          - Default value: `false`
        """
        return pulumi.get(self, "next_hop_self")

    @next_hop_self.setter
    def next_hop_self(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "next_hop_self", value)

    @_builtins.property
    @pulumi.getter(name="nextHopSelfVariable")
    def next_hop_self_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "next_hop_self_variable")

    @next_hop_self_variable.setter
    def next_hop_self_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "next_hop_self_variable", value)

    @_builtins.property
    @pulumi.getter
    def password(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Set MD5 password on TCP connection with BGP peer
        """
        return pulumi.get(self, "password")

    @password.setter
    def password(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "password", value)

    @_builtins.property
    @pulumi.getter(name="passwordVariable")
    def password_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "password_variable")

    @password_variable.setter
    def password_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "password_variable", value)

    @_builtins.property
    @pulumi.getter(name="remoteAs")
    def remote_as(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        Set remote autonomous system number
        """
        return pulumi.get(self, "remote_as")

    @remote_as.setter
    def remote_as(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "remote_as", value)

    @_builtins.property
    @pulumi.getter(name="remoteAsVariable")
    def remote_as_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "remote_as_variable")

    @remote_as_variable.setter
    def remote_as_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "remote_as_variable", value)

    @_builtins.property
    @pulumi.getter(name="sendCommunity")
    def send_community(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Send community attribute
          - Default value: `true`
        """
        return pulumi.get(self, "send_community")

    @send_community.setter
    def send_community(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "send_community", value)

    @_builtins.property
    @pulumi.getter(name="sendCommunityVariable")
    def send_community_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "send_community_variable")

    @send_community_variable.setter
    def send_community_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "send_community_variable", value)

    @_builtins.property
    @pulumi.getter(name="sendExtendedCommunity")
    def send_extended_community(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Send extended community attribute
          - Default value: `true`
        """
        return pulumi.get(self, "send_extended_community")

    @send_extended_community.setter
    def send_extended_community(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "send_extended_community", value)

    @_builtins.property
    @pulumi.getter(name="sendExtendedCommunityVariable")
    def send_extended_community_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "send_extended_community_variable")

    @send_extended_community_variable.setter
    def send_extended_community_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "send_extended_community_variable", value)

    @_builtins.property
    @pulumi.getter
    def shutdown(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Enable or disable a BGP neighbor
          - Default value: `false`
        """
        return pulumi.get(self, "shutdown")

    @shutdown.setter
    def shutdown(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "shutdown", value)

    @_builtins.property
    @pulumi.getter(name="shutdownVariable")
    def shutdown_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "shutdown_variable")

    @shutdown_variable.setter
    def shutdown_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "shutdown_variable", value)

    @_builtins.property
    @pulumi.getter(name="updateSourceInterface")
    def update_source_interface(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Source interface name for BGP neighbor
        """
        return pulumi.get(self, "update_source_interface")

    @update_source_interface.setter
    def update_source_interface(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "update_source_interface", value)

    @_builtins.property
    @pulumi.getter(name="updateSourceInterfaceVariable")
    def update_source_interface_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "update_source_interface_variable")

    @update_source_interface_variable.setter
    def update_source_interface_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "update_source_interface_variable", value)


if not MYPY:
    class TransportRoutingBgpFeatureIpv6NeighborAddressFamilyArgsDict(TypedDict):
        family_type: NotRequired[pulumi.Input[_builtins.str]]
        """
        Set IPv6 unicast address family
          - Choices: `ipv6-unicast`, `vpnv6-unicast`
        """
        in_route_policy_id: NotRequired[pulumi.Input[_builtins.str]]
        max_number_of_prefixes: NotRequired[pulumi.Input[_builtins.int]]
        """
        Set maximum number of prefixes accepted from BGP peer
          - Range: `1`-`4294967295`
        """
        max_number_of_prefixes_variable: NotRequired[pulumi.Input[_builtins.str]]
        """
        Variable name
        """
        out_route_policy_id: NotRequired[pulumi.Input[_builtins.str]]
        policy_type: NotRequired[pulumi.Input[_builtins.str]]
        """
        Neighbor received maximum prefix policy is disabled.
        """
        restart_interval: NotRequired[pulumi.Input[_builtins.int]]
        """
        Set the restart interval(minutes) when to restart BGP connection if threshold is exceeded
          - Range: `1`-`65535`
        """
        restart_interval_variable: NotRequired[pulumi.Input[_builtins.str]]
        """
        Variable name
        """
        threshold: NotRequired[pulumi.Input[_builtins.int]]
        """
        Set threshold(1 to 100) at which to generate a warning message
          - Range: `1`-`100`
          - Default value: `75`
        """
        threshold_variable: NotRequired[pulumi.Input[_builtins.str]]
        """
        Variable name
        """
elif False:
    TransportRoutingBgpFeatureIpv6NeighborAddressFamilyArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class TransportRoutingBgpFeatureIpv6NeighborAddressFamilyArgs:
    def __init__(__self__, *,
                 family_type: Optional[pulumi.Input[_builtins.str]] = None,
                 in_route_policy_id: Optional[pulumi.Input[_builtins.str]] = None,
                 max_number_of_prefixes: Optional[pulumi.Input[_builtins.int]] = None,
                 max_number_of_prefixes_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 out_route_policy_id: Optional[pulumi.Input[_builtins.str]] = None,
                 policy_type: Optional[pulumi.Input[_builtins.str]] = None,
                 restart_interval: Optional[pulumi.Input[_builtins.int]] = None,
                 restart_interval_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 threshold: Optional[pulumi.Input[_builtins.int]] = None,
                 threshold_variable: Optional[pulumi.Input[_builtins.str]] = None):
        """
        :param pulumi.Input[_builtins.str] family_type: Set IPv6 unicast address family
                 - Choices: `ipv6-unicast`, `vpnv6-unicast`
        :param pulumi.Input[_builtins.int] max_number_of_prefixes: Set maximum number of prefixes accepted from BGP peer
                 - Range: `1`-`4294967295`
        :param pulumi.Input[_builtins.str] max_number_of_prefixes_variable: Variable name
        :param pulumi.Input[_builtins.str] policy_type: Neighbor received maximum prefix policy is disabled.
        :param pulumi.Input[_builtins.int] restart_interval: Set the restart interval(minutes) when to restart BGP connection if threshold is exceeded
                 - Range: `1`-`65535`
        :param pulumi.Input[_builtins.str] restart_interval_variable: Variable name
        :param pulumi.Input[_builtins.int] threshold: Set threshold(1 to 100) at which to generate a warning message
                 - Range: `1`-`100`
                 - Default value: `75`
        :param pulumi.Input[_builtins.str] threshold_variable: Variable name
        """
        if family_type is not None:
            pulumi.set(__self__, "family_type", family_type)
        if in_route_policy_id is not None:
            pulumi.set(__self__, "in_route_policy_id", in_route_policy_id)
        if max_number_of_prefixes is not None:
            pulumi.set(__self__, "max_number_of_prefixes", max_number_of_prefixes)
        if max_number_of_prefixes_variable is not None:
            pulumi.set(__self__, "max_number_of_prefixes_variable", max_number_of_prefixes_variable)
        if out_route_policy_id is not None:
            pulumi.set(__self__, "out_route_policy_id", out_route_policy_id)
        if policy_type is not None:
            pulumi.set(__self__, "policy_type", policy_type)
        if restart_interval is not None:
            pulumi.set(__self__, "restart_interval", restart_interval)
        if restart_interval_variable is not None:
            pulumi.set(__self__, "restart_interval_variable", restart_interval_variable)
        if threshold is not None:
            pulumi.set(__self__, "threshold", threshold)
        if threshold_variable is not None:
            pulumi.set(__self__, "threshold_variable", threshold_variable)

    @_builtins.property
    @pulumi.getter(name="familyType")
    def family_type(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Set IPv6 unicast address family
          - Choices: `ipv6-unicast`, `vpnv6-unicast`
        """
        return pulumi.get(self, "family_type")

    @family_type.setter
    def family_type(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "family_type", value)

    @_builtins.property
    @pulumi.getter(name="inRoutePolicyId")
    def in_route_policy_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "in_route_policy_id")

    @in_route_policy_id.setter
    def in_route_policy_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "in_route_policy_id", value)

    @_builtins.property
    @pulumi.getter(name="maxNumberOfPrefixes")
    def max_number_of_prefixes(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        Set maximum number of prefixes accepted from BGP peer
          - Range: `1`-`4294967295`
        """
        return pulumi.get(self, "max_number_of_prefixes")

    @max_number_of_prefixes.setter
    def max_number_of_prefixes(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "max_number_of_prefixes", value)

    @_builtins.property
    @pulumi.getter(name="maxNumberOfPrefixesVariable")
    def max_number_of_prefixes_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "max_number_of_prefixes_variable")

    @max_number_of_prefixes_variable.setter
    def max_number_of_prefixes_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "max_number_of_prefixes_variable", value)

    @_builtins.property
    @pulumi.getter(name="outRoutePolicyId")
    def out_route_policy_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "out_route_policy_id")

    @out_route_policy_id.setter
    def out_route_policy_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "out_route_policy_id", value)

    @_builtins.property
    @pulumi.getter(name="policyType")
    def policy_type(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Neighbor received maximum prefix policy is disabled.
        """
        return pulumi.get(self, "policy_type")

    @policy_type.setter
    def policy_type(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "policy_type", value)

    @_builtins.property
    @pulumi.getter(name="restartInterval")
    def restart_interval(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        Set the restart interval(minutes) when to restart BGP connection if threshold is exceeded
          - Range: `1`-`65535`
        """
        return pulumi.get(self, "restart_interval")

    @restart_interval.setter
    def restart_interval(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "restart_interval", value)

    @_builtins.property
    @pulumi.getter(name="restartIntervalVariable")
    def restart_interval_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "restart_interval_variable")

    @restart_interval_variable.setter
    def restart_interval_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "restart_interval_variable", value)

    @_builtins.property
    @pulumi.getter
    def threshold(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        Set threshold(1 to 100) at which to generate a warning message
          - Range: `1`-`100`
          - Default value: `75`
        """
        return pulumi.get(self, "threshold")

    @threshold.setter
    def threshold(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "threshold", value)

    @_builtins.property
    @pulumi.getter(name="thresholdVariable")
    def threshold_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "threshold_variable")

    @threshold_variable.setter
    def threshold_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "threshold_variable", value)


if not MYPY:
    class TransportRoutingBgpFeatureIpv6NetworkArgsDict(TypedDict):
        network_prefix: NotRequired[pulumi.Input[_builtins.str]]
        """
        Configure the prefixes for BGP to announce
        """
        network_prefix_variable: NotRequired[pulumi.Input[_builtins.str]]
        """
        Variable name
        """
elif False:
    TransportRoutingBgpFeatureIpv6NetworkArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class TransportRoutingBgpFeatureIpv6NetworkArgs:
    def __init__(__self__, *,
                 network_prefix: Optional[pulumi.Input[_builtins.str]] = None,
                 network_prefix_variable: Optional[pulumi.Input[_builtins.str]] = None):
        """
        :param pulumi.Input[_builtins.str] network_prefix: Configure the prefixes for BGP to announce
        :param pulumi.Input[_builtins.str] network_prefix_variable: Variable name
        """
        if network_prefix is not None:
            pulumi.set(__self__, "network_prefix", network_prefix)
        if network_prefix_variable is not None:
            pulumi.set(__self__, "network_prefix_variable", network_prefix_variable)

    @_builtins.property
    @pulumi.getter(name="networkPrefix")
    def network_prefix(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Configure the prefixes for BGP to announce
        """
        return pulumi.get(self, "network_prefix")

    @network_prefix.setter
    def network_prefix(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "network_prefix", value)

    @_builtins.property
    @pulumi.getter(name="networkPrefixVariable")
    def network_prefix_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "network_prefix_variable")

    @network_prefix_variable.setter
    def network_prefix_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "network_prefix_variable", value)


if not MYPY:
    class TransportRoutingBgpFeatureIpv6RedistributeArgsDict(TypedDict):
        protocol: NotRequired[pulumi.Input[_builtins.str]]
        """
        Set the protocol to redistribute routes from
          - Choices: `static`, `connected`, `ospf`
        """
        protocol_variable: NotRequired[pulumi.Input[_builtins.str]]
        """
        Variable name
        """
        route_policy_id: NotRequired[pulumi.Input[_builtins.str]]
elif False:
    TransportRoutingBgpFeatureIpv6RedistributeArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class TransportRoutingBgpFeatureIpv6RedistributeArgs:
    def __init__(__self__, *,
                 protocol: Optional[pulumi.Input[_builtins.str]] = None,
                 protocol_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 route_policy_id: Optional[pulumi.Input[_builtins.str]] = None):
        """
        :param pulumi.Input[_builtins.str] protocol: Set the protocol to redistribute routes from
                 - Choices: `static`, `connected`, `ospf`
        :param pulumi.Input[_builtins.str] protocol_variable: Variable name
        """
        if protocol is not None:
            pulumi.set(__self__, "protocol", protocol)
        if protocol_variable is not None:
            pulumi.set(__self__, "protocol_variable", protocol_variable)
        if route_policy_id is not None:
            pulumi.set(__self__, "route_policy_id", route_policy_id)

    @_builtins.property
    @pulumi.getter
    def protocol(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Set the protocol to redistribute routes from
          - Choices: `static`, `connected`, `ospf`
        """
        return pulumi.get(self, "protocol")

    @protocol.setter
    def protocol(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "protocol", value)

    @_builtins.property
    @pulumi.getter(name="protocolVariable")
    def protocol_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "protocol_variable")

    @protocol_variable.setter
    def protocol_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "protocol_variable", value)

    @_builtins.property
    @pulumi.getter(name="routePolicyId")
    def route_policy_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "route_policy_id")

    @route_policy_id.setter
    def route_policy_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "route_policy_id", value)


if not MYPY:
    class TransportRoutingBgpFeatureMplsInterfaceArgsDict(TypedDict):
        interface_name: NotRequired[pulumi.Input[_builtins.str]]
        """
        Interface Name
        """
        interface_name_variable: NotRequired[pulumi.Input[_builtins.str]]
        """
        Variable name
        """
elif False:
    TransportRoutingBgpFeatureMplsInterfaceArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class TransportRoutingBgpFeatureMplsInterfaceArgs:
    def __init__(__self__, *,
                 interface_name: Optional[pulumi.Input[_builtins.str]] = None,
                 interface_name_variable: Optional[pulumi.Input[_builtins.str]] = None):
        """
        :param pulumi.Input[_builtins.str] interface_name: Interface Name
        :param pulumi.Input[_builtins.str] interface_name_variable: Variable name
        """
        if interface_name is not None:
            pulumi.set(__self__, "interface_name", interface_name)
        if interface_name_variable is not None:
            pulumi.set(__self__, "interface_name_variable", interface_name_variable)

    @_builtins.property
    @pulumi.getter(name="interfaceName")
    def interface_name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Interface Name
        """
        return pulumi.get(self, "interface_name")

    @interface_name.setter
    def interface_name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "interface_name", value)

    @_builtins.property
    @pulumi.getter(name="interfaceNameVariable")
    def interface_name_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "interface_name_variable")

    @interface_name_variable.setter
    def interface_name_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "interface_name_variable", value)


if not MYPY:
    class TransportRoutingOspfFeatureAreaArgsDict(TypedDict):
        area_number: NotRequired[pulumi.Input[_builtins.int]]
        """
        Set OSPF area number
          - Range: `0`-`4294967295`
        """
        area_number_variable: NotRequired[pulumi.Input[_builtins.str]]
        """
        Variable name
        """
        area_type: NotRequired[pulumi.Input[_builtins.str]]
        """
        set the area type
          - Choices: `stub`, `nssa`
        """
        interfaces: NotRequired[pulumi.Input[Sequence[pulumi.Input['TransportRoutingOspfFeatureAreaInterfaceArgsDict']]]]
        """
        Set OSPF interface parameters
        """
        no_summary: NotRequired[pulumi.Input[_builtins.bool]]
        """
        Do not inject interarea routes into STUB or NSSA
          - Default value: `false`
        """
        no_summary_variable: NotRequired[pulumi.Input[_builtins.str]]
        """
        Variable name
        """
        ranges: NotRequired[pulumi.Input[Sequence[pulumi.Input['TransportRoutingOspfFeatureAreaRangeArgsDict']]]]
        """
        Summarize OSPF routes at an area boundary
        """
elif False:
    TransportRoutingOspfFeatureAreaArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class TransportRoutingOspfFeatureAreaArgs:
    def __init__(__self__, *,
                 area_number: Optional[pulumi.Input[_builtins.int]] = None,
                 area_number_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 area_type: Optional[pulumi.Input[_builtins.str]] = None,
                 interfaces: Optional[pulumi.Input[Sequence[pulumi.Input['TransportRoutingOspfFeatureAreaInterfaceArgs']]]] = None,
                 no_summary: Optional[pulumi.Input[_builtins.bool]] = None,
                 no_summary_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 ranges: Optional[pulumi.Input[Sequence[pulumi.Input['TransportRoutingOspfFeatureAreaRangeArgs']]]] = None):
        """
        :param pulumi.Input[_builtins.int] area_number: Set OSPF area number
                 - Range: `0`-`4294967295`
        :param pulumi.Input[_builtins.str] area_number_variable: Variable name
        :param pulumi.Input[_builtins.str] area_type: set the area type
                 - Choices: `stub`, `nssa`
        :param pulumi.Input[Sequence[pulumi.Input['TransportRoutingOspfFeatureAreaInterfaceArgs']]] interfaces: Set OSPF interface parameters
        :param pulumi.Input[_builtins.bool] no_summary: Do not inject interarea routes into STUB or NSSA
                 - Default value: `false`
        :param pulumi.Input[_builtins.str] no_summary_variable: Variable name
        :param pulumi.Input[Sequence[pulumi.Input['TransportRoutingOspfFeatureAreaRangeArgs']]] ranges: Summarize OSPF routes at an area boundary
        """
        if area_number is not None:
            pulumi.set(__self__, "area_number", area_number)
        if area_number_variable is not None:
            pulumi.set(__self__, "area_number_variable", area_number_variable)
        if area_type is not None:
            pulumi.set(__self__, "area_type", area_type)
        if interfaces is not None:
            pulumi.set(__self__, "interfaces", interfaces)
        if no_summary is not None:
            pulumi.set(__self__, "no_summary", no_summary)
        if no_summary_variable is not None:
            pulumi.set(__self__, "no_summary_variable", no_summary_variable)
        if ranges is not None:
            pulumi.set(__self__, "ranges", ranges)

    @_builtins.property
    @pulumi.getter(name="areaNumber")
    def area_number(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        Set OSPF area number
          - Range: `0`-`4294967295`
        """
        return pulumi.get(self, "area_number")

    @area_number.setter
    def area_number(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "area_number", value)

    @_builtins.property
    @pulumi.getter(name="areaNumberVariable")
    def area_number_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "area_number_variable")

    @area_number_variable.setter
    def area_number_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "area_number_variable", value)

    @_builtins.property
    @pulumi.getter(name="areaType")
    def area_type(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        set the area type
          - Choices: `stub`, `nssa`
        """
        return pulumi.get(self, "area_type")

    @area_type.setter
    def area_type(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "area_type", value)

    @_builtins.property
    @pulumi.getter
    def interfaces(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['TransportRoutingOspfFeatureAreaInterfaceArgs']]]]:
        """
        Set OSPF interface parameters
        """
        return pulumi.get(self, "interfaces")

    @interfaces.setter
    def interfaces(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['TransportRoutingOspfFeatureAreaInterfaceArgs']]]]):
        pulumi.set(self, "interfaces", value)

    @_builtins.property
    @pulumi.getter(name="noSummary")
    def no_summary(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Do not inject interarea routes into STUB or NSSA
          - Default value: `false`
        """
        return pulumi.get(self, "no_summary")

    @no_summary.setter
    def no_summary(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "no_summary", value)

    @_builtins.property
    @pulumi.getter(name="noSummaryVariable")
    def no_summary_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "no_summary_variable")

    @no_summary_variable.setter
    def no_summary_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "no_summary_variable", value)

    @_builtins.property
    @pulumi.getter
    def ranges(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['TransportRoutingOspfFeatureAreaRangeArgs']]]]:
        """
        Summarize OSPF routes at an area boundary
        """
        return pulumi.get(self, "ranges")

    @ranges.setter
    def ranges(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['TransportRoutingOspfFeatureAreaRangeArgs']]]]):
        pulumi.set(self, "ranges", value)


if not MYPY:
    class TransportRoutingOspfFeatureAreaInterfaceArgsDict(TypedDict):
        authentication_type: NotRequired[pulumi.Input[_builtins.str]]
        """
        Set OSPF interface authentication type
          - Choices: `message-digest`
        """
        authentication_type_variable: NotRequired[pulumi.Input[_builtins.str]]
        """
        Variable name
        """
        cost: NotRequired[pulumi.Input[_builtins.int]]
        """
        Set cost of OSPF interface
          - Range: `1`-`65535`
        """
        cost_variable: NotRequired[pulumi.Input[_builtins.str]]
        """
        Variable name
        """
        dead_interval: NotRequired[pulumi.Input[_builtins.int]]
        """
        Set interval after which neighbor is declared to be down
          - Range: `1`-`65535`
          - Default value: `40`
        """
        dead_interval_variable: NotRequired[pulumi.Input[_builtins.str]]
        """
        Variable name
        """
        designated_router_priority: NotRequired[pulumi.Input[_builtins.int]]
        """
        Set router’s priority to be elected as designated router
          - Range: `0`-`255`
          - Default value: `1`
        """
        designated_router_priority_variable: NotRequired[pulumi.Input[_builtins.str]]
        """
        Variable name
        """
        hello_interval: NotRequired[pulumi.Input[_builtins.int]]
        """
        Set interval between OSPF hello packets
          - Range: `1`-`65535`
          - Default value: `10`
        """
        hello_interval_variable: NotRequired[pulumi.Input[_builtins.str]]
        """
        Variable name
        """
        lsa_retransmit_interval: NotRequired[pulumi.Input[_builtins.int]]
        """
        Set time between retransmitting LSAs
          - Range: `1`-`65535`
          - Default value: `5`
        """
        lsa_retransmit_interval_variable: NotRequired[pulumi.Input[_builtins.str]]
        """
        Variable name
        """
        message_digest_key: NotRequired[pulumi.Input[_builtins.str]]
        """
        Set MD5 authentication key
        """
        message_digest_key_id: NotRequired[pulumi.Input[_builtins.int]]
        """
        Set MD5 message digest key
          - Range: `1`-`255`
        """
        message_digest_key_id_variable: NotRequired[pulumi.Input[_builtins.str]]
        """
        Variable name
        """
        message_digest_key_variable: NotRequired[pulumi.Input[_builtins.str]]
        """
        Variable name
        """
        name: NotRequired[pulumi.Input[_builtins.str]]
        """
        Set interface name
        """
        name_variable: NotRequired[pulumi.Input[_builtins.str]]
        """
        Variable name
        """
        network_type: NotRequired[pulumi.Input[_builtins.str]]
        """
        Set the OSPF network type
          - Choices: `broadcast`, `point-to-point`, `non-broadcast`, `point-to-multipoint`
          - Default value: `broadcast`
        """
        network_type_variable: NotRequired[pulumi.Input[_builtins.str]]
        """
        Variable name
        """
        passive_interface: NotRequired[pulumi.Input[_builtins.bool]]
        """
        Set the interface to advertise its address, but not to actively run OSPF
          - Default value: `false`
        """
        passive_interface_variable: NotRequired[pulumi.Input[_builtins.str]]
        """
        Variable name
        """
elif False:
    TransportRoutingOspfFeatureAreaInterfaceArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class TransportRoutingOspfFeatureAreaInterfaceArgs:
    def __init__(__self__, *,
                 authentication_type: Optional[pulumi.Input[_builtins.str]] = None,
                 authentication_type_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 cost: Optional[pulumi.Input[_builtins.int]] = None,
                 cost_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 dead_interval: Optional[pulumi.Input[_builtins.int]] = None,
                 dead_interval_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 designated_router_priority: Optional[pulumi.Input[_builtins.int]] = None,
                 designated_router_priority_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 hello_interval: Optional[pulumi.Input[_builtins.int]] = None,
                 hello_interval_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 lsa_retransmit_interval: Optional[pulumi.Input[_builtins.int]] = None,
                 lsa_retransmit_interval_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 message_digest_key: Optional[pulumi.Input[_builtins.str]] = None,
                 message_digest_key_id: Optional[pulumi.Input[_builtins.int]] = None,
                 message_digest_key_id_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 message_digest_key_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 name_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 network_type: Optional[pulumi.Input[_builtins.str]] = None,
                 network_type_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 passive_interface: Optional[pulumi.Input[_builtins.bool]] = None,
                 passive_interface_variable: Optional[pulumi.Input[_builtins.str]] = None):
        """
        :param pulumi.Input[_builtins.str] authentication_type: Set OSPF interface authentication type
                 - Choices: `message-digest`
        :param pulumi.Input[_builtins.str] authentication_type_variable: Variable name
        :param pulumi.Input[_builtins.int] cost: Set cost of OSPF interface
                 - Range: `1`-`65535`
        :param pulumi.Input[_builtins.str] cost_variable: Variable name
        :param pulumi.Input[_builtins.int] dead_interval: Set interval after which neighbor is declared to be down
                 - Range: `1`-`65535`
                 - Default value: `40`
        :param pulumi.Input[_builtins.str] dead_interval_variable: Variable name
        :param pulumi.Input[_builtins.int] designated_router_priority: Set router’s priority to be elected as designated router
                 - Range: `0`-`255`
                 - Default value: `1`
        :param pulumi.Input[_builtins.str] designated_router_priority_variable: Variable name
        :param pulumi.Input[_builtins.int] hello_interval: Set interval between OSPF hello packets
                 - Range: `1`-`65535`
                 - Default value: `10`
        :param pulumi.Input[_builtins.str] hello_interval_variable: Variable name
        :param pulumi.Input[_builtins.int] lsa_retransmit_interval: Set time between retransmitting LSAs
                 - Range: `1`-`65535`
                 - Default value: `5`
        :param pulumi.Input[_builtins.str] lsa_retransmit_interval_variable: Variable name
        :param pulumi.Input[_builtins.str] message_digest_key: Set MD5 authentication key
        :param pulumi.Input[_builtins.int] message_digest_key_id: Set MD5 message digest key
                 - Range: `1`-`255`
        :param pulumi.Input[_builtins.str] message_digest_key_id_variable: Variable name
        :param pulumi.Input[_builtins.str] message_digest_key_variable: Variable name
        :param pulumi.Input[_builtins.str] name: Set interface name
        :param pulumi.Input[_builtins.str] name_variable: Variable name
        :param pulumi.Input[_builtins.str] network_type: Set the OSPF network type
                 - Choices: `broadcast`, `point-to-point`, `non-broadcast`, `point-to-multipoint`
                 - Default value: `broadcast`
        :param pulumi.Input[_builtins.str] network_type_variable: Variable name
        :param pulumi.Input[_builtins.bool] passive_interface: Set the interface to advertise its address, but not to actively run OSPF
                 - Default value: `false`
        :param pulumi.Input[_builtins.str] passive_interface_variable: Variable name
        """
        if authentication_type is not None:
            pulumi.set(__self__, "authentication_type", authentication_type)
        if authentication_type_variable is not None:
            pulumi.set(__self__, "authentication_type_variable", authentication_type_variable)
        if cost is not None:
            pulumi.set(__self__, "cost", cost)
        if cost_variable is not None:
            pulumi.set(__self__, "cost_variable", cost_variable)
        if dead_interval is not None:
            pulumi.set(__self__, "dead_interval", dead_interval)
        if dead_interval_variable is not None:
            pulumi.set(__self__, "dead_interval_variable", dead_interval_variable)
        if designated_router_priority is not None:
            pulumi.set(__self__, "designated_router_priority", designated_router_priority)
        if designated_router_priority_variable is not None:
            pulumi.set(__self__, "designated_router_priority_variable", designated_router_priority_variable)
        if hello_interval is not None:
            pulumi.set(__self__, "hello_interval", hello_interval)
        if hello_interval_variable is not None:
            pulumi.set(__self__, "hello_interval_variable", hello_interval_variable)
        if lsa_retransmit_interval is not None:
            pulumi.set(__self__, "lsa_retransmit_interval", lsa_retransmit_interval)
        if lsa_retransmit_interval_variable is not None:
            pulumi.set(__self__, "lsa_retransmit_interval_variable", lsa_retransmit_interval_variable)
        if message_digest_key is not None:
            pulumi.set(__self__, "message_digest_key", message_digest_key)
        if message_digest_key_id is not None:
            pulumi.set(__self__, "message_digest_key_id", message_digest_key_id)
        if message_digest_key_id_variable is not None:
            pulumi.set(__self__, "message_digest_key_id_variable", message_digest_key_id_variable)
        if message_digest_key_variable is not None:
            pulumi.set(__self__, "message_digest_key_variable", message_digest_key_variable)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if name_variable is not None:
            pulumi.set(__self__, "name_variable", name_variable)
        if network_type is not None:
            pulumi.set(__self__, "network_type", network_type)
        if network_type_variable is not None:
            pulumi.set(__self__, "network_type_variable", network_type_variable)
        if passive_interface is not None:
            pulumi.set(__self__, "passive_interface", passive_interface)
        if passive_interface_variable is not None:
            pulumi.set(__self__, "passive_interface_variable", passive_interface_variable)

    @_builtins.property
    @pulumi.getter(name="authenticationType")
    def authentication_type(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Set OSPF interface authentication type
          - Choices: `message-digest`
        """
        return pulumi.get(self, "authentication_type")

    @authentication_type.setter
    def authentication_type(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "authentication_type", value)

    @_builtins.property
    @pulumi.getter(name="authenticationTypeVariable")
    def authentication_type_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "authentication_type_variable")

    @authentication_type_variable.setter
    def authentication_type_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "authentication_type_variable", value)

    @_builtins.property
    @pulumi.getter
    def cost(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        Set cost of OSPF interface
          - Range: `1`-`65535`
        """
        return pulumi.get(self, "cost")

    @cost.setter
    def cost(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "cost", value)

    @_builtins.property
    @pulumi.getter(name="costVariable")
    def cost_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "cost_variable")

    @cost_variable.setter
    def cost_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "cost_variable", value)

    @_builtins.property
    @pulumi.getter(name="deadInterval")
    def dead_interval(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        Set interval after which neighbor is declared to be down
          - Range: `1`-`65535`
          - Default value: `40`
        """
        return pulumi.get(self, "dead_interval")

    @dead_interval.setter
    def dead_interval(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "dead_interval", value)

    @_builtins.property
    @pulumi.getter(name="deadIntervalVariable")
    def dead_interval_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "dead_interval_variable")

    @dead_interval_variable.setter
    def dead_interval_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "dead_interval_variable", value)

    @_builtins.property
    @pulumi.getter(name="designatedRouterPriority")
    def designated_router_priority(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        Set router’s priority to be elected as designated router
          - Range: `0`-`255`
          - Default value: `1`
        """
        return pulumi.get(self, "designated_router_priority")

    @designated_router_priority.setter
    def designated_router_priority(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "designated_router_priority", value)

    @_builtins.property
    @pulumi.getter(name="designatedRouterPriorityVariable")
    def designated_router_priority_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "designated_router_priority_variable")

    @designated_router_priority_variable.setter
    def designated_router_priority_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "designated_router_priority_variable", value)

    @_builtins.property
    @pulumi.getter(name="helloInterval")
    def hello_interval(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        Set interval between OSPF hello packets
          - Range: `1`-`65535`
          - Default value: `10`
        """
        return pulumi.get(self, "hello_interval")

    @hello_interval.setter
    def hello_interval(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "hello_interval", value)

    @_builtins.property
    @pulumi.getter(name="helloIntervalVariable")
    def hello_interval_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "hello_interval_variable")

    @hello_interval_variable.setter
    def hello_interval_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "hello_interval_variable", value)

    @_builtins.property
    @pulumi.getter(name="lsaRetransmitInterval")
    def lsa_retransmit_interval(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        Set time between retransmitting LSAs
          - Range: `1`-`65535`
          - Default value: `5`
        """
        return pulumi.get(self, "lsa_retransmit_interval")

    @lsa_retransmit_interval.setter
    def lsa_retransmit_interval(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "lsa_retransmit_interval", value)

    @_builtins.property
    @pulumi.getter(name="lsaRetransmitIntervalVariable")
    def lsa_retransmit_interval_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "lsa_retransmit_interval_variable")

    @lsa_retransmit_interval_variable.setter
    def lsa_retransmit_interval_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "lsa_retransmit_interval_variable", value)

    @_builtins.property
    @pulumi.getter(name="messageDigestKey")
    def message_digest_key(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Set MD5 authentication key
        """
        return pulumi.get(self, "message_digest_key")

    @message_digest_key.setter
    def message_digest_key(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "message_digest_key", value)

    @_builtins.property
    @pulumi.getter(name="messageDigestKeyId")
    def message_digest_key_id(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        Set MD5 message digest key
          - Range: `1`-`255`
        """
        return pulumi.get(self, "message_digest_key_id")

    @message_digest_key_id.setter
    def message_digest_key_id(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "message_digest_key_id", value)

    @_builtins.property
    @pulumi.getter(name="messageDigestKeyIdVariable")
    def message_digest_key_id_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "message_digest_key_id_variable")

    @message_digest_key_id_variable.setter
    def message_digest_key_id_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "message_digest_key_id_variable", value)

    @_builtins.property
    @pulumi.getter(name="messageDigestKeyVariable")
    def message_digest_key_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "message_digest_key_variable")

    @message_digest_key_variable.setter
    def message_digest_key_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "message_digest_key_variable", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Set interface name
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "name", value)

    @_builtins.property
    @pulumi.getter(name="nameVariable")
    def name_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "name_variable")

    @name_variable.setter
    def name_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "name_variable", value)

    @_builtins.property
    @pulumi.getter(name="networkType")
    def network_type(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Set the OSPF network type
          - Choices: `broadcast`, `point-to-point`, `non-broadcast`, `point-to-multipoint`
          - Default value: `broadcast`
        """
        return pulumi.get(self, "network_type")

    @network_type.setter
    def network_type(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "network_type", value)

    @_builtins.property
    @pulumi.getter(name="networkTypeVariable")
    def network_type_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "network_type_variable")

    @network_type_variable.setter
    def network_type_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "network_type_variable", value)

    @_builtins.property
    @pulumi.getter(name="passiveInterface")
    def passive_interface(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Set the interface to advertise its address, but not to actively run OSPF
          - Default value: `false`
        """
        return pulumi.get(self, "passive_interface")

    @passive_interface.setter
    def passive_interface(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "passive_interface", value)

    @_builtins.property
    @pulumi.getter(name="passiveInterfaceVariable")
    def passive_interface_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "passive_interface_variable")

    @passive_interface_variable.setter
    def passive_interface_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "passive_interface_variable", value)


if not MYPY:
    class TransportRoutingOspfFeatureAreaRangeArgsDict(TypedDict):
        cost: NotRequired[pulumi.Input[_builtins.int]]
        """
        Set cost for this range
          - Range: `0`-`16777214`
        """
        cost_variable: NotRequired[pulumi.Input[_builtins.str]]
        """
        Variable name
        """
        ip_address: NotRequired[pulumi.Input[_builtins.str]]
        """
        IP Address
        """
        ip_address_variable: NotRequired[pulumi.Input[_builtins.str]]
        """
        Variable name
        """
        no_advertise: NotRequired[pulumi.Input[_builtins.bool]]
        """
        Do not advertise this range
          - Default value: `false`
        """
        no_advertise_variable: NotRequired[pulumi.Input[_builtins.str]]
        """
        Variable name
        """
        subnet_mask: NotRequired[pulumi.Input[_builtins.str]]
        """
        Subnet Mask
          - Choices: `255.255.255.255`, `255.255.255.254`, `255.255.255.252`, `255.255.255.248`, `255.255.255.240`, `255.255.255.224`, `255.255.255.192`, `255.255.255.128`, `255.255.255.0`, `255.255.254.0`, `255.255.252.0`, `255.255.248.0`, `255.255.240.0`, `255.255.224.0`, `255.255.192.0`, `255.255.128.0`, `255.255.0.0`, `255.254.0.0`, `255.252.0.0`, `255.240.0.0`, `255.224.0.0`, `255.192.0.0`, `255.128.0.0`, `255.0.0.0`, `254.0.0.0`, `252.0.0.0`, `248.0.0.0`, `240.0.0.0`, `224.0.0.0`, `192.0.0.0`, `128.0.0.0`, `0.0.0.0`
        """
        subnet_mask_variable: NotRequired[pulumi.Input[_builtins.str]]
        """
        Variable name
        """
elif False:
    TransportRoutingOspfFeatureAreaRangeArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class TransportRoutingOspfFeatureAreaRangeArgs:
    def __init__(__self__, *,
                 cost: Optional[pulumi.Input[_builtins.int]] = None,
                 cost_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 ip_address: Optional[pulumi.Input[_builtins.str]] = None,
                 ip_address_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 no_advertise: Optional[pulumi.Input[_builtins.bool]] = None,
                 no_advertise_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 subnet_mask: Optional[pulumi.Input[_builtins.str]] = None,
                 subnet_mask_variable: Optional[pulumi.Input[_builtins.str]] = None):
        """
        :param pulumi.Input[_builtins.int] cost: Set cost for this range
                 - Range: `0`-`16777214`
        :param pulumi.Input[_builtins.str] cost_variable: Variable name
        :param pulumi.Input[_builtins.str] ip_address: IP Address
        :param pulumi.Input[_builtins.str] ip_address_variable: Variable name
        :param pulumi.Input[_builtins.bool] no_advertise: Do not advertise this range
                 - Default value: `false`
        :param pulumi.Input[_builtins.str] no_advertise_variable: Variable name
        :param pulumi.Input[_builtins.str] subnet_mask: Subnet Mask
                 - Choices: `255.255.255.255`, `255.255.255.254`, `255.255.255.252`, `255.255.255.248`, `255.255.255.240`, `255.255.255.224`, `255.255.255.192`, `255.255.255.128`, `255.255.255.0`, `255.255.254.0`, `255.255.252.0`, `255.255.248.0`, `255.255.240.0`, `255.255.224.0`, `255.255.192.0`, `255.255.128.0`, `255.255.0.0`, `255.254.0.0`, `255.252.0.0`, `255.240.0.0`, `255.224.0.0`, `255.192.0.0`, `255.128.0.0`, `255.0.0.0`, `254.0.0.0`, `252.0.0.0`, `248.0.0.0`, `240.0.0.0`, `224.0.0.0`, `192.0.0.0`, `128.0.0.0`, `0.0.0.0`
        :param pulumi.Input[_builtins.str] subnet_mask_variable: Variable name
        """
        if cost is not None:
            pulumi.set(__self__, "cost", cost)
        if cost_variable is not None:
            pulumi.set(__self__, "cost_variable", cost_variable)
        if ip_address is not None:
            pulumi.set(__self__, "ip_address", ip_address)
        if ip_address_variable is not None:
            pulumi.set(__self__, "ip_address_variable", ip_address_variable)
        if no_advertise is not None:
            pulumi.set(__self__, "no_advertise", no_advertise)
        if no_advertise_variable is not None:
            pulumi.set(__self__, "no_advertise_variable", no_advertise_variable)
        if subnet_mask is not None:
            pulumi.set(__self__, "subnet_mask", subnet_mask)
        if subnet_mask_variable is not None:
            pulumi.set(__self__, "subnet_mask_variable", subnet_mask_variable)

    @_builtins.property
    @pulumi.getter
    def cost(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        Set cost for this range
          - Range: `0`-`16777214`
        """
        return pulumi.get(self, "cost")

    @cost.setter
    def cost(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "cost", value)

    @_builtins.property
    @pulumi.getter(name="costVariable")
    def cost_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "cost_variable")

    @cost_variable.setter
    def cost_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "cost_variable", value)

    @_builtins.property
    @pulumi.getter(name="ipAddress")
    def ip_address(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        IP Address
        """
        return pulumi.get(self, "ip_address")

    @ip_address.setter
    def ip_address(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "ip_address", value)

    @_builtins.property
    @pulumi.getter(name="ipAddressVariable")
    def ip_address_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "ip_address_variable")

    @ip_address_variable.setter
    def ip_address_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "ip_address_variable", value)

    @_builtins.property
    @pulumi.getter(name="noAdvertise")
    def no_advertise(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Do not advertise this range
          - Default value: `false`
        """
        return pulumi.get(self, "no_advertise")

    @no_advertise.setter
    def no_advertise(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "no_advertise", value)

    @_builtins.property
    @pulumi.getter(name="noAdvertiseVariable")
    def no_advertise_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "no_advertise_variable")

    @no_advertise_variable.setter
    def no_advertise_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "no_advertise_variable", value)

    @_builtins.property
    @pulumi.getter(name="subnetMask")
    def subnet_mask(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Subnet Mask
          - Choices: `255.255.255.255`, `255.255.255.254`, `255.255.255.252`, `255.255.255.248`, `255.255.255.240`, `255.255.255.224`, `255.255.255.192`, `255.255.255.128`, `255.255.255.0`, `255.255.254.0`, `255.255.252.0`, `255.255.248.0`, `255.255.240.0`, `255.255.224.0`, `255.255.192.0`, `255.255.128.0`, `255.255.0.0`, `255.254.0.0`, `255.252.0.0`, `255.240.0.0`, `255.224.0.0`, `255.192.0.0`, `255.128.0.0`, `255.0.0.0`, `254.0.0.0`, `252.0.0.0`, `248.0.0.0`, `240.0.0.0`, `224.0.0.0`, `192.0.0.0`, `128.0.0.0`, `0.0.0.0`
        """
        return pulumi.get(self, "subnet_mask")

    @subnet_mask.setter
    def subnet_mask(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "subnet_mask", value)

    @_builtins.property
    @pulumi.getter(name="subnetMaskVariable")
    def subnet_mask_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "subnet_mask_variable")

    @subnet_mask_variable.setter
    def subnet_mask_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "subnet_mask_variable", value)


if not MYPY:
    class TransportRoutingOspfFeatureRedistributeArgsDict(TypedDict):
        nat_dia: NotRequired[pulumi.Input[_builtins.bool]]
        """
        Enable NAT DIA for redistributed routes
          - Default value: `true`
        """
        nat_dia_variable: NotRequired[pulumi.Input[_builtins.str]]
        """
        Variable name
        """
        protocol: NotRequired[pulumi.Input[_builtins.str]]
        """
        Set the protocol
          - Choices: `static`, `connected`, `bgp`, `omp`, `nat`, `eigrp`
        """
        protocol_variable: NotRequired[pulumi.Input[_builtins.str]]
        """
        Variable name
        """
        route_policy_id: NotRequired[pulumi.Input[_builtins.str]]
elif False:
    TransportRoutingOspfFeatureRedistributeArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class TransportRoutingOspfFeatureRedistributeArgs:
    def __init__(__self__, *,
                 nat_dia: Optional[pulumi.Input[_builtins.bool]] = None,
                 nat_dia_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 protocol: Optional[pulumi.Input[_builtins.str]] = None,
                 protocol_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 route_policy_id: Optional[pulumi.Input[_builtins.str]] = None):
        """
        :param pulumi.Input[_builtins.bool] nat_dia: Enable NAT DIA for redistributed routes
                 - Default value: `true`
        :param pulumi.Input[_builtins.str] nat_dia_variable: Variable name
        :param pulumi.Input[_builtins.str] protocol: Set the protocol
                 - Choices: `static`, `connected`, `bgp`, `omp`, `nat`, `eigrp`
        :param pulumi.Input[_builtins.str] protocol_variable: Variable name
        """
        if nat_dia is not None:
            pulumi.set(__self__, "nat_dia", nat_dia)
        if nat_dia_variable is not None:
            pulumi.set(__self__, "nat_dia_variable", nat_dia_variable)
        if protocol is not None:
            pulumi.set(__self__, "protocol", protocol)
        if protocol_variable is not None:
            pulumi.set(__self__, "protocol_variable", protocol_variable)
        if route_policy_id is not None:
            pulumi.set(__self__, "route_policy_id", route_policy_id)

    @_builtins.property
    @pulumi.getter(name="natDia")
    def nat_dia(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Enable NAT DIA for redistributed routes
          - Default value: `true`
        """
        return pulumi.get(self, "nat_dia")

    @nat_dia.setter
    def nat_dia(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "nat_dia", value)

    @_builtins.property
    @pulumi.getter(name="natDiaVariable")
    def nat_dia_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "nat_dia_variable")

    @nat_dia_variable.setter
    def nat_dia_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "nat_dia_variable", value)

    @_builtins.property
    @pulumi.getter
    def protocol(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Set the protocol
          - Choices: `static`, `connected`, `bgp`, `omp`, `nat`, `eigrp`
        """
        return pulumi.get(self, "protocol")

    @protocol.setter
    def protocol(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "protocol", value)

    @_builtins.property
    @pulumi.getter(name="protocolVariable")
    def protocol_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "protocol_variable")

    @protocol_variable.setter
    def protocol_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "protocol_variable", value)

    @_builtins.property
    @pulumi.getter(name="routePolicyId")
    def route_policy_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "route_policy_id")

    @route_policy_id.setter
    def route_policy_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "route_policy_id", value)


if not MYPY:
    class TransportRoutingOspfFeatureRouterLsaArgsDict(TypedDict):
        time: NotRequired[pulumi.Input[_builtins.int]]
        """
        Set how long to advertise maximum metric after router starts up
          - Range: `5`-`86400`
        """
        time_variable: NotRequired[pulumi.Input[_builtins.str]]
        """
        Variable name
        """
        type: NotRequired[pulumi.Input[_builtins.str]]
        """
        Set the router LSA advertisement type
          - Choices: `administrative`, `on-startup`
        """
elif False:
    TransportRoutingOspfFeatureRouterLsaArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class TransportRoutingOspfFeatureRouterLsaArgs:
    def __init__(__self__, *,
                 time: Optional[pulumi.Input[_builtins.int]] = None,
                 time_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 type: Optional[pulumi.Input[_builtins.str]] = None):
        """
        :param pulumi.Input[_builtins.int] time: Set how long to advertise maximum metric after router starts up
                 - Range: `5`-`86400`
        :param pulumi.Input[_builtins.str] time_variable: Variable name
        :param pulumi.Input[_builtins.str] type: Set the router LSA advertisement type
                 - Choices: `administrative`, `on-startup`
        """
        if time is not None:
            pulumi.set(__self__, "time", time)
        if time_variable is not None:
            pulumi.set(__self__, "time_variable", time_variable)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @_builtins.property
    @pulumi.getter
    def time(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        Set how long to advertise maximum metric after router starts up
          - Range: `5`-`86400`
        """
        return pulumi.get(self, "time")

    @time.setter
    def time(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "time", value)

    @_builtins.property
    @pulumi.getter(name="timeVariable")
    def time_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "time_variable")

    @time_variable.setter
    def time_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "time_variable", value)

    @_builtins.property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Set the router LSA advertisement type
          - Choices: `administrative`, `on-startup`
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "type", value)


if not MYPY:
    class TransportRoutingOspfv3Ipv4FeatureAreaArgsDict(TypedDict):
        always_translate: NotRequired[pulumi.Input[_builtins.bool]]
        """
        Always translate type7 LSAs
        """
        always_translate_variable: NotRequired[pulumi.Input[_builtins.str]]
        """
        Variable name
        """
        area_number: NotRequired[pulumi.Input[_builtins.int]]
        """
        Set OSPF area number
          - Range: `0`-`4294967295`
        """
        area_number_variable: NotRequired[pulumi.Input[_builtins.str]]
        """
        Variable name
        """
        area_type: NotRequired[pulumi.Input[_builtins.str]]
        """
        stub area type
          - Choices: `stub`
        """
        interfaces: NotRequired[pulumi.Input[Sequence[pulumi.Input['TransportRoutingOspfv3Ipv4FeatureAreaInterfaceArgsDict']]]]
        """
        Set OSPF interface parameters
        """
        no_summary: NotRequired[pulumi.Input[_builtins.bool]]
        """
        Do not inject inter-area routes
        """
        no_summary_variable: NotRequired[pulumi.Input[_builtins.str]]
        """
        Variable name
        """
        ranges: NotRequired[pulumi.Input[Sequence[pulumi.Input['TransportRoutingOspfv3Ipv4FeatureAreaRangeArgsDict']]]]
        """
        Summarize OSPF routes at an area boundary
        """
elif False:
    TransportRoutingOspfv3Ipv4FeatureAreaArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class TransportRoutingOspfv3Ipv4FeatureAreaArgs:
    def __init__(__self__, *,
                 always_translate: Optional[pulumi.Input[_builtins.bool]] = None,
                 always_translate_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 area_number: Optional[pulumi.Input[_builtins.int]] = None,
                 area_number_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 area_type: Optional[pulumi.Input[_builtins.str]] = None,
                 interfaces: Optional[pulumi.Input[Sequence[pulumi.Input['TransportRoutingOspfv3Ipv4FeatureAreaInterfaceArgs']]]] = None,
                 no_summary: Optional[pulumi.Input[_builtins.bool]] = None,
                 no_summary_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 ranges: Optional[pulumi.Input[Sequence[pulumi.Input['TransportRoutingOspfv3Ipv4FeatureAreaRangeArgs']]]] = None):
        """
        :param pulumi.Input[_builtins.bool] always_translate: Always translate type7 LSAs
        :param pulumi.Input[_builtins.str] always_translate_variable: Variable name
        :param pulumi.Input[_builtins.int] area_number: Set OSPF area number
                 - Range: `0`-`4294967295`
        :param pulumi.Input[_builtins.str] area_number_variable: Variable name
        :param pulumi.Input[_builtins.str] area_type: stub area type
                 - Choices: `stub`
        :param pulumi.Input[Sequence[pulumi.Input['TransportRoutingOspfv3Ipv4FeatureAreaInterfaceArgs']]] interfaces: Set OSPF interface parameters
        :param pulumi.Input[_builtins.bool] no_summary: Do not inject inter-area routes
        :param pulumi.Input[_builtins.str] no_summary_variable: Variable name
        :param pulumi.Input[Sequence[pulumi.Input['TransportRoutingOspfv3Ipv4FeatureAreaRangeArgs']]] ranges: Summarize OSPF routes at an area boundary
        """
        if always_translate is not None:
            pulumi.set(__self__, "always_translate", always_translate)
        if always_translate_variable is not None:
            pulumi.set(__self__, "always_translate_variable", always_translate_variable)
        if area_number is not None:
            pulumi.set(__self__, "area_number", area_number)
        if area_number_variable is not None:
            pulumi.set(__self__, "area_number_variable", area_number_variable)
        if area_type is not None:
            pulumi.set(__self__, "area_type", area_type)
        if interfaces is not None:
            pulumi.set(__self__, "interfaces", interfaces)
        if no_summary is not None:
            pulumi.set(__self__, "no_summary", no_summary)
        if no_summary_variable is not None:
            pulumi.set(__self__, "no_summary_variable", no_summary_variable)
        if ranges is not None:
            pulumi.set(__self__, "ranges", ranges)

    @_builtins.property
    @pulumi.getter(name="alwaysTranslate")
    def always_translate(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Always translate type7 LSAs
        """
        return pulumi.get(self, "always_translate")

    @always_translate.setter
    def always_translate(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "always_translate", value)

    @_builtins.property
    @pulumi.getter(name="alwaysTranslateVariable")
    def always_translate_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "always_translate_variable")

    @always_translate_variable.setter
    def always_translate_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "always_translate_variable", value)

    @_builtins.property
    @pulumi.getter(name="areaNumber")
    def area_number(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        Set OSPF area number
          - Range: `0`-`4294967295`
        """
        return pulumi.get(self, "area_number")

    @area_number.setter
    def area_number(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "area_number", value)

    @_builtins.property
    @pulumi.getter(name="areaNumberVariable")
    def area_number_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "area_number_variable")

    @area_number_variable.setter
    def area_number_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "area_number_variable", value)

    @_builtins.property
    @pulumi.getter(name="areaType")
    def area_type(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        stub area type
          - Choices: `stub`
        """
        return pulumi.get(self, "area_type")

    @area_type.setter
    def area_type(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "area_type", value)

    @_builtins.property
    @pulumi.getter
    def interfaces(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['TransportRoutingOspfv3Ipv4FeatureAreaInterfaceArgs']]]]:
        """
        Set OSPF interface parameters
        """
        return pulumi.get(self, "interfaces")

    @interfaces.setter
    def interfaces(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['TransportRoutingOspfv3Ipv4FeatureAreaInterfaceArgs']]]]):
        pulumi.set(self, "interfaces", value)

    @_builtins.property
    @pulumi.getter(name="noSummary")
    def no_summary(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Do not inject inter-area routes
        """
        return pulumi.get(self, "no_summary")

    @no_summary.setter
    def no_summary(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "no_summary", value)

    @_builtins.property
    @pulumi.getter(name="noSummaryVariable")
    def no_summary_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "no_summary_variable")

    @no_summary_variable.setter
    def no_summary_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "no_summary_variable", value)

    @_builtins.property
    @pulumi.getter
    def ranges(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['TransportRoutingOspfv3Ipv4FeatureAreaRangeArgs']]]]:
        """
        Summarize OSPF routes at an area boundary
        """
        return pulumi.get(self, "ranges")

    @ranges.setter
    def ranges(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['TransportRoutingOspfv3Ipv4FeatureAreaRangeArgs']]]]):
        pulumi.set(self, "ranges", value)


if not MYPY:
    class TransportRoutingOspfv3Ipv4FeatureAreaInterfaceArgsDict(TypedDict):
        authentication_key: NotRequired[pulumi.Input[_builtins.str]]
        """
        Set OSPF interface authentication IPSEC key
        """
        authentication_key_variable: NotRequired[pulumi.Input[_builtins.str]]
        """
        Variable name
        """
        authentication_spi: NotRequired[pulumi.Input[_builtins.int]]
        """
        Set OSPF interface authentication IPSec SPI, range 256..4294967295
          - Range: `256`-`4294967295`
        """
        authentication_spi_variable: NotRequired[pulumi.Input[_builtins.str]]
        """
        Variable name
        """
        authentication_type: NotRequired[pulumi.Input[_builtins.str]]
        """
        No Authentication by default
          - Choices: `no-auth`
        """
        cost: NotRequired[pulumi.Input[_builtins.int]]
        """
        Set cost of OSPF interface
          - Range: `1`-`65535`
        """
        cost_variable: NotRequired[pulumi.Input[_builtins.str]]
        """
        Variable name
        """
        dead_interval: NotRequired[pulumi.Input[_builtins.int]]
        """
        Set interval after which neighbor is declared to be down
          - Range: `1`-`65535`
          - Default value: `40`
        """
        dead_interval_variable: NotRequired[pulumi.Input[_builtins.str]]
        """
        Variable name
        """
        hello_interval: NotRequired[pulumi.Input[_builtins.int]]
        """
        Set interval between OSPF hello packets
          - Range: `1`-`65535`
          - Default value: `10`
        """
        hello_interval_variable: NotRequired[pulumi.Input[_builtins.str]]
        """
        Variable name
        """
        lsa_retransmit_interval: NotRequired[pulumi.Input[_builtins.int]]
        """
        Set time between retransmitting LSAs
          - Range: `1`-`65535`
          - Default value: `5`
        """
        lsa_retransmit_interval_variable: NotRequired[pulumi.Input[_builtins.str]]
        """
        Variable name
        """
        name: NotRequired[pulumi.Input[_builtins.str]]
        """
        Set interface name
        """
        name_variable: NotRequired[pulumi.Input[_builtins.str]]
        """
        Variable name
        """
        network_type: NotRequired[pulumi.Input[_builtins.str]]
        """
        Set the OSPF network type
          - Choices: `broadcast`, `point-to-point`, `non-broadcast`, `point-to-multipoint`
        """
        network_type_variable: NotRequired[pulumi.Input[_builtins.str]]
        """
        Variable name
        """
        passive_interface: NotRequired[pulumi.Input[_builtins.bool]]
        """
        Set the interface to advertise its address, but not to actively run OSPF
          - Default value: `false`
        """
        passive_interface_variable: NotRequired[pulumi.Input[_builtins.str]]
        """
        Variable name
        """
elif False:
    TransportRoutingOspfv3Ipv4FeatureAreaInterfaceArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class TransportRoutingOspfv3Ipv4FeatureAreaInterfaceArgs:
    def __init__(__self__, *,
                 authentication_key: Optional[pulumi.Input[_builtins.str]] = None,
                 authentication_key_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 authentication_spi: Optional[pulumi.Input[_builtins.int]] = None,
                 authentication_spi_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 authentication_type: Optional[pulumi.Input[_builtins.str]] = None,
                 cost: Optional[pulumi.Input[_builtins.int]] = None,
                 cost_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 dead_interval: Optional[pulumi.Input[_builtins.int]] = None,
                 dead_interval_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 hello_interval: Optional[pulumi.Input[_builtins.int]] = None,
                 hello_interval_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 lsa_retransmit_interval: Optional[pulumi.Input[_builtins.int]] = None,
                 lsa_retransmit_interval_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 name_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 network_type: Optional[pulumi.Input[_builtins.str]] = None,
                 network_type_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 passive_interface: Optional[pulumi.Input[_builtins.bool]] = None,
                 passive_interface_variable: Optional[pulumi.Input[_builtins.str]] = None):
        """
        :param pulumi.Input[_builtins.str] authentication_key: Set OSPF interface authentication IPSEC key
        :param pulumi.Input[_builtins.str] authentication_key_variable: Variable name
        :param pulumi.Input[_builtins.int] authentication_spi: Set OSPF interface authentication IPSec SPI, range 256..4294967295
                 - Range: `256`-`4294967295`
        :param pulumi.Input[_builtins.str] authentication_spi_variable: Variable name
        :param pulumi.Input[_builtins.str] authentication_type: No Authentication by default
                 - Choices: `no-auth`
        :param pulumi.Input[_builtins.int] cost: Set cost of OSPF interface
                 - Range: `1`-`65535`
        :param pulumi.Input[_builtins.str] cost_variable: Variable name
        :param pulumi.Input[_builtins.int] dead_interval: Set interval after which neighbor is declared to be down
                 - Range: `1`-`65535`
                 - Default value: `40`
        :param pulumi.Input[_builtins.str] dead_interval_variable: Variable name
        :param pulumi.Input[_builtins.int] hello_interval: Set interval between OSPF hello packets
                 - Range: `1`-`65535`
                 - Default value: `10`
        :param pulumi.Input[_builtins.str] hello_interval_variable: Variable name
        :param pulumi.Input[_builtins.int] lsa_retransmit_interval: Set time between retransmitting LSAs
                 - Range: `1`-`65535`
                 - Default value: `5`
        :param pulumi.Input[_builtins.str] lsa_retransmit_interval_variable: Variable name
        :param pulumi.Input[_builtins.str] name: Set interface name
        :param pulumi.Input[_builtins.str] name_variable: Variable name
        :param pulumi.Input[_builtins.str] network_type: Set the OSPF network type
                 - Choices: `broadcast`, `point-to-point`, `non-broadcast`, `point-to-multipoint`
        :param pulumi.Input[_builtins.str] network_type_variable: Variable name
        :param pulumi.Input[_builtins.bool] passive_interface: Set the interface to advertise its address, but not to actively run OSPF
                 - Default value: `false`
        :param pulumi.Input[_builtins.str] passive_interface_variable: Variable name
        """
        if authentication_key is not None:
            pulumi.set(__self__, "authentication_key", authentication_key)
        if authentication_key_variable is not None:
            pulumi.set(__self__, "authentication_key_variable", authentication_key_variable)
        if authentication_spi is not None:
            pulumi.set(__self__, "authentication_spi", authentication_spi)
        if authentication_spi_variable is not None:
            pulumi.set(__self__, "authentication_spi_variable", authentication_spi_variable)
        if authentication_type is not None:
            pulumi.set(__self__, "authentication_type", authentication_type)
        if cost is not None:
            pulumi.set(__self__, "cost", cost)
        if cost_variable is not None:
            pulumi.set(__self__, "cost_variable", cost_variable)
        if dead_interval is not None:
            pulumi.set(__self__, "dead_interval", dead_interval)
        if dead_interval_variable is not None:
            pulumi.set(__self__, "dead_interval_variable", dead_interval_variable)
        if hello_interval is not None:
            pulumi.set(__self__, "hello_interval", hello_interval)
        if hello_interval_variable is not None:
            pulumi.set(__self__, "hello_interval_variable", hello_interval_variable)
        if lsa_retransmit_interval is not None:
            pulumi.set(__self__, "lsa_retransmit_interval", lsa_retransmit_interval)
        if lsa_retransmit_interval_variable is not None:
            pulumi.set(__self__, "lsa_retransmit_interval_variable", lsa_retransmit_interval_variable)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if name_variable is not None:
            pulumi.set(__self__, "name_variable", name_variable)
        if network_type is not None:
            pulumi.set(__self__, "network_type", network_type)
        if network_type_variable is not None:
            pulumi.set(__self__, "network_type_variable", network_type_variable)
        if passive_interface is not None:
            pulumi.set(__self__, "passive_interface", passive_interface)
        if passive_interface_variable is not None:
            pulumi.set(__self__, "passive_interface_variable", passive_interface_variable)

    @_builtins.property
    @pulumi.getter(name="authenticationKey")
    def authentication_key(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Set OSPF interface authentication IPSEC key
        """
        return pulumi.get(self, "authentication_key")

    @authentication_key.setter
    def authentication_key(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "authentication_key", value)

    @_builtins.property
    @pulumi.getter(name="authenticationKeyVariable")
    def authentication_key_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "authentication_key_variable")

    @authentication_key_variable.setter
    def authentication_key_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "authentication_key_variable", value)

    @_builtins.property
    @pulumi.getter(name="authenticationSpi")
    def authentication_spi(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        Set OSPF interface authentication IPSec SPI, range 256..4294967295
          - Range: `256`-`4294967295`
        """
        return pulumi.get(self, "authentication_spi")

    @authentication_spi.setter
    def authentication_spi(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "authentication_spi", value)

    @_builtins.property
    @pulumi.getter(name="authenticationSpiVariable")
    def authentication_spi_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "authentication_spi_variable")

    @authentication_spi_variable.setter
    def authentication_spi_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "authentication_spi_variable", value)

    @_builtins.property
    @pulumi.getter(name="authenticationType")
    def authentication_type(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        No Authentication by default
          - Choices: `no-auth`
        """
        return pulumi.get(self, "authentication_type")

    @authentication_type.setter
    def authentication_type(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "authentication_type", value)

    @_builtins.property
    @pulumi.getter
    def cost(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        Set cost of OSPF interface
          - Range: `1`-`65535`
        """
        return pulumi.get(self, "cost")

    @cost.setter
    def cost(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "cost", value)

    @_builtins.property
    @pulumi.getter(name="costVariable")
    def cost_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "cost_variable")

    @cost_variable.setter
    def cost_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "cost_variable", value)

    @_builtins.property
    @pulumi.getter(name="deadInterval")
    def dead_interval(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        Set interval after which neighbor is declared to be down
          - Range: `1`-`65535`
          - Default value: `40`
        """
        return pulumi.get(self, "dead_interval")

    @dead_interval.setter
    def dead_interval(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "dead_interval", value)

    @_builtins.property
    @pulumi.getter(name="deadIntervalVariable")
    def dead_interval_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "dead_interval_variable")

    @dead_interval_variable.setter
    def dead_interval_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "dead_interval_variable", value)

    @_builtins.property
    @pulumi.getter(name="helloInterval")
    def hello_interval(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        Set interval between OSPF hello packets
          - Range: `1`-`65535`
          - Default value: `10`
        """
        return pulumi.get(self, "hello_interval")

    @hello_interval.setter
    def hello_interval(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "hello_interval", value)

    @_builtins.property
    @pulumi.getter(name="helloIntervalVariable")
    def hello_interval_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "hello_interval_variable")

    @hello_interval_variable.setter
    def hello_interval_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "hello_interval_variable", value)

    @_builtins.property
    @pulumi.getter(name="lsaRetransmitInterval")
    def lsa_retransmit_interval(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        Set time between retransmitting LSAs
          - Range: `1`-`65535`
          - Default value: `5`
        """
        return pulumi.get(self, "lsa_retransmit_interval")

    @lsa_retransmit_interval.setter
    def lsa_retransmit_interval(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "lsa_retransmit_interval", value)

    @_builtins.property
    @pulumi.getter(name="lsaRetransmitIntervalVariable")
    def lsa_retransmit_interval_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "lsa_retransmit_interval_variable")

    @lsa_retransmit_interval_variable.setter
    def lsa_retransmit_interval_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "lsa_retransmit_interval_variable", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Set interface name
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "name", value)

    @_builtins.property
    @pulumi.getter(name="nameVariable")
    def name_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "name_variable")

    @name_variable.setter
    def name_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "name_variable", value)

    @_builtins.property
    @pulumi.getter(name="networkType")
    def network_type(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Set the OSPF network type
          - Choices: `broadcast`, `point-to-point`, `non-broadcast`, `point-to-multipoint`
        """
        return pulumi.get(self, "network_type")

    @network_type.setter
    def network_type(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "network_type", value)

    @_builtins.property
    @pulumi.getter(name="networkTypeVariable")
    def network_type_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "network_type_variable")

    @network_type_variable.setter
    def network_type_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "network_type_variable", value)

    @_builtins.property
    @pulumi.getter(name="passiveInterface")
    def passive_interface(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Set the interface to advertise its address, but not to actively run OSPF
          - Default value: `false`
        """
        return pulumi.get(self, "passive_interface")

    @passive_interface.setter
    def passive_interface(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "passive_interface", value)

    @_builtins.property
    @pulumi.getter(name="passiveInterfaceVariable")
    def passive_interface_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "passive_interface_variable")

    @passive_interface_variable.setter
    def passive_interface_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "passive_interface_variable", value)


if not MYPY:
    class TransportRoutingOspfv3Ipv4FeatureAreaRangeArgsDict(TypedDict):
        cost: NotRequired[pulumi.Input[_builtins.int]]
        """
        Set cost for this range
          - Range: `0`-`16777214`
        """
        cost_variable: NotRequired[pulumi.Input[_builtins.str]]
        """
        Variable name
        """
        ip_address: NotRequired[pulumi.Input[_builtins.str]]
        ip_address_variable: NotRequired[pulumi.Input[_builtins.str]]
        """
        Variable name
        """
        no_advertise: NotRequired[pulumi.Input[_builtins.bool]]
        """
        Do not advertise this range
          - Default value: `false`
        """
        no_advertise_variable: NotRequired[pulumi.Input[_builtins.str]]
        """
        Variable name
        """
        subnet_mask: NotRequired[pulumi.Input[_builtins.str]]
        """
        - Choices: `255.255.255.255`, `255.255.255.254`, `255.255.255.252`, `255.255.255.248`, `255.255.255.240`, `255.255.255.224`, `255.255.255.192`, `255.255.255.128`, `255.255.255.0`, `255.255.254.0`, `255.255.252.0`, `255.255.248.0`, `255.255.240.0`, `255.255.224.0`, `255.255.192.0`, `255.255.128.0`, `255.255.0.0`, `255.254.0.0`, `255.252.0.0`, `255.240.0.0`, `255.224.0.0`, `255.192.0.0`, `255.128.0.0`, `255.0.0.0`, `254.0.0.0`, `252.0.0.0`, `248.0.0.0`, `240.0.0.0`, `224.0.0.0`, `192.0.0.0`, `128.0.0.0`, `0.0.0.0`
        """
        subnet_mask_variable: NotRequired[pulumi.Input[_builtins.str]]
        """
        Variable name
        """
elif False:
    TransportRoutingOspfv3Ipv4FeatureAreaRangeArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class TransportRoutingOspfv3Ipv4FeatureAreaRangeArgs:
    def __init__(__self__, *,
                 cost: Optional[pulumi.Input[_builtins.int]] = None,
                 cost_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 ip_address: Optional[pulumi.Input[_builtins.str]] = None,
                 ip_address_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 no_advertise: Optional[pulumi.Input[_builtins.bool]] = None,
                 no_advertise_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 subnet_mask: Optional[pulumi.Input[_builtins.str]] = None,
                 subnet_mask_variable: Optional[pulumi.Input[_builtins.str]] = None):
        """
        :param pulumi.Input[_builtins.int] cost: Set cost for this range
                 - Range: `0`-`16777214`
        :param pulumi.Input[_builtins.str] cost_variable: Variable name
        :param pulumi.Input[_builtins.str] ip_address_variable: Variable name
        :param pulumi.Input[_builtins.bool] no_advertise: Do not advertise this range
                 - Default value: `false`
        :param pulumi.Input[_builtins.str] no_advertise_variable: Variable name
        :param pulumi.Input[_builtins.str] subnet_mask: - Choices: `255.255.255.255`, `255.255.255.254`, `255.255.255.252`, `255.255.255.248`, `255.255.255.240`, `255.255.255.224`, `255.255.255.192`, `255.255.255.128`, `255.255.255.0`, `255.255.254.0`, `255.255.252.0`, `255.255.248.0`, `255.255.240.0`, `255.255.224.0`, `255.255.192.0`, `255.255.128.0`, `255.255.0.0`, `255.254.0.0`, `255.252.0.0`, `255.240.0.0`, `255.224.0.0`, `255.192.0.0`, `255.128.0.0`, `255.0.0.0`, `254.0.0.0`, `252.0.0.0`, `248.0.0.0`, `240.0.0.0`, `224.0.0.0`, `192.0.0.0`, `128.0.0.0`, `0.0.0.0`
        :param pulumi.Input[_builtins.str] subnet_mask_variable: Variable name
        """
        if cost is not None:
            pulumi.set(__self__, "cost", cost)
        if cost_variable is not None:
            pulumi.set(__self__, "cost_variable", cost_variable)
        if ip_address is not None:
            pulumi.set(__self__, "ip_address", ip_address)
        if ip_address_variable is not None:
            pulumi.set(__self__, "ip_address_variable", ip_address_variable)
        if no_advertise is not None:
            pulumi.set(__self__, "no_advertise", no_advertise)
        if no_advertise_variable is not None:
            pulumi.set(__self__, "no_advertise_variable", no_advertise_variable)
        if subnet_mask is not None:
            pulumi.set(__self__, "subnet_mask", subnet_mask)
        if subnet_mask_variable is not None:
            pulumi.set(__self__, "subnet_mask_variable", subnet_mask_variable)

    @_builtins.property
    @pulumi.getter
    def cost(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        Set cost for this range
          - Range: `0`-`16777214`
        """
        return pulumi.get(self, "cost")

    @cost.setter
    def cost(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "cost", value)

    @_builtins.property
    @pulumi.getter(name="costVariable")
    def cost_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "cost_variable")

    @cost_variable.setter
    def cost_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "cost_variable", value)

    @_builtins.property
    @pulumi.getter(name="ipAddress")
    def ip_address(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "ip_address")

    @ip_address.setter
    def ip_address(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "ip_address", value)

    @_builtins.property
    @pulumi.getter(name="ipAddressVariable")
    def ip_address_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "ip_address_variable")

    @ip_address_variable.setter
    def ip_address_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "ip_address_variable", value)

    @_builtins.property
    @pulumi.getter(name="noAdvertise")
    def no_advertise(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Do not advertise this range
          - Default value: `false`
        """
        return pulumi.get(self, "no_advertise")

    @no_advertise.setter
    def no_advertise(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "no_advertise", value)

    @_builtins.property
    @pulumi.getter(name="noAdvertiseVariable")
    def no_advertise_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "no_advertise_variable")

    @no_advertise_variable.setter
    def no_advertise_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "no_advertise_variable", value)

    @_builtins.property
    @pulumi.getter(name="subnetMask")
    def subnet_mask(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        - Choices: `255.255.255.255`, `255.255.255.254`, `255.255.255.252`, `255.255.255.248`, `255.255.255.240`, `255.255.255.224`, `255.255.255.192`, `255.255.255.128`, `255.255.255.0`, `255.255.254.0`, `255.255.252.0`, `255.255.248.0`, `255.255.240.0`, `255.255.224.0`, `255.255.192.0`, `255.255.128.0`, `255.255.0.0`, `255.254.0.0`, `255.252.0.0`, `255.240.0.0`, `255.224.0.0`, `255.192.0.0`, `255.128.0.0`, `255.0.0.0`, `254.0.0.0`, `252.0.0.0`, `248.0.0.0`, `240.0.0.0`, `224.0.0.0`, `192.0.0.0`, `128.0.0.0`, `0.0.0.0`
        """
        return pulumi.get(self, "subnet_mask")

    @subnet_mask.setter
    def subnet_mask(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "subnet_mask", value)

    @_builtins.property
    @pulumi.getter(name="subnetMaskVariable")
    def subnet_mask_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "subnet_mask_variable")

    @subnet_mask_variable.setter
    def subnet_mask_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "subnet_mask_variable", value)


if not MYPY:
    class TransportRoutingOspfv3Ipv4FeatureRedistributeArgsDict(TypedDict):
        nat_dia: NotRequired[pulumi.Input[_builtins.bool]]
        """
        Enable NAT DIA for redistributed routes
          - Default value: `true`
        """
        nat_dia_variable: NotRequired[pulumi.Input[_builtins.str]]
        """
        Variable name
        """
        protocol: NotRequired[pulumi.Input[_builtins.str]]
        """
        Set the protocol
          - Choices: `connected`, `static`, `omp`, `nat-route`, `bgp`, `eigrp`
        """
        protocol_variable: NotRequired[pulumi.Input[_builtins.str]]
        """
        Variable name
        """
        route_policy_id: NotRequired[pulumi.Input[_builtins.str]]
elif False:
    TransportRoutingOspfv3Ipv4FeatureRedistributeArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class TransportRoutingOspfv3Ipv4FeatureRedistributeArgs:
    def __init__(__self__, *,
                 nat_dia: Optional[pulumi.Input[_builtins.bool]] = None,
                 nat_dia_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 protocol: Optional[pulumi.Input[_builtins.str]] = None,
                 protocol_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 route_policy_id: Optional[pulumi.Input[_builtins.str]] = None):
        """
        :param pulumi.Input[_builtins.bool] nat_dia: Enable NAT DIA for redistributed routes
                 - Default value: `true`
        :param pulumi.Input[_builtins.str] nat_dia_variable: Variable name
        :param pulumi.Input[_builtins.str] protocol: Set the protocol
                 - Choices: `connected`, `static`, `omp`, `nat-route`, `bgp`, `eigrp`
        :param pulumi.Input[_builtins.str] protocol_variable: Variable name
        """
        if nat_dia is not None:
            pulumi.set(__self__, "nat_dia", nat_dia)
        if nat_dia_variable is not None:
            pulumi.set(__self__, "nat_dia_variable", nat_dia_variable)
        if protocol is not None:
            pulumi.set(__self__, "protocol", protocol)
        if protocol_variable is not None:
            pulumi.set(__self__, "protocol_variable", protocol_variable)
        if route_policy_id is not None:
            pulumi.set(__self__, "route_policy_id", route_policy_id)

    @_builtins.property
    @pulumi.getter(name="natDia")
    def nat_dia(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Enable NAT DIA for redistributed routes
          - Default value: `true`
        """
        return pulumi.get(self, "nat_dia")

    @nat_dia.setter
    def nat_dia(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "nat_dia", value)

    @_builtins.property
    @pulumi.getter(name="natDiaVariable")
    def nat_dia_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "nat_dia_variable")

    @nat_dia_variable.setter
    def nat_dia_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "nat_dia_variable", value)

    @_builtins.property
    @pulumi.getter
    def protocol(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Set the protocol
          - Choices: `connected`, `static`, `omp`, `nat-route`, `bgp`, `eigrp`
        """
        return pulumi.get(self, "protocol")

    @protocol.setter
    def protocol(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "protocol", value)

    @_builtins.property
    @pulumi.getter(name="protocolVariable")
    def protocol_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "protocol_variable")

    @protocol_variable.setter
    def protocol_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "protocol_variable", value)

    @_builtins.property
    @pulumi.getter(name="routePolicyId")
    def route_policy_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "route_policy_id")

    @route_policy_id.setter
    def route_policy_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "route_policy_id", value)


if not MYPY:
    class TransportRoutingOspfv3Ipv6FeatureAreaArgsDict(TypedDict):
        always_translate: NotRequired[pulumi.Input[_builtins.bool]]
        """
        Always translate type7 LSAs
        """
        always_translate_variable: NotRequired[pulumi.Input[_builtins.str]]
        """
        Variable name
        """
        area_number: NotRequired[pulumi.Input[_builtins.int]]
        """
        Set OSPF area number
          - Range: `0`-`4294967295`
        """
        area_number_variable: NotRequired[pulumi.Input[_builtins.str]]
        """
        Variable name
        """
        area_type: NotRequired[pulumi.Input[_builtins.str]]
        """
        stub area type
          - Choices: `stub`
        """
        interfaces: NotRequired[pulumi.Input[Sequence[pulumi.Input['TransportRoutingOspfv3Ipv6FeatureAreaInterfaceArgsDict']]]]
        """
        Set OSPF interface parameters
        """
        no_summary: NotRequired[pulumi.Input[_builtins.bool]]
        """
        Do not inject inter-area routes
        """
        no_summary_variable: NotRequired[pulumi.Input[_builtins.str]]
        """
        Variable name
        """
        ranges: NotRequired[pulumi.Input[Sequence[pulumi.Input['TransportRoutingOspfv3Ipv6FeatureAreaRangeArgsDict']]]]
        """
        Summarize OSPF routes at an area boundary
        """
elif False:
    TransportRoutingOspfv3Ipv6FeatureAreaArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class TransportRoutingOspfv3Ipv6FeatureAreaArgs:
    def __init__(__self__, *,
                 always_translate: Optional[pulumi.Input[_builtins.bool]] = None,
                 always_translate_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 area_number: Optional[pulumi.Input[_builtins.int]] = None,
                 area_number_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 area_type: Optional[pulumi.Input[_builtins.str]] = None,
                 interfaces: Optional[pulumi.Input[Sequence[pulumi.Input['TransportRoutingOspfv3Ipv6FeatureAreaInterfaceArgs']]]] = None,
                 no_summary: Optional[pulumi.Input[_builtins.bool]] = None,
                 no_summary_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 ranges: Optional[pulumi.Input[Sequence[pulumi.Input['TransportRoutingOspfv3Ipv6FeatureAreaRangeArgs']]]] = None):
        """
        :param pulumi.Input[_builtins.bool] always_translate: Always translate type7 LSAs
        :param pulumi.Input[_builtins.str] always_translate_variable: Variable name
        :param pulumi.Input[_builtins.int] area_number: Set OSPF area number
                 - Range: `0`-`4294967295`
        :param pulumi.Input[_builtins.str] area_number_variable: Variable name
        :param pulumi.Input[_builtins.str] area_type: stub area type
                 - Choices: `stub`
        :param pulumi.Input[Sequence[pulumi.Input['TransportRoutingOspfv3Ipv6FeatureAreaInterfaceArgs']]] interfaces: Set OSPF interface parameters
        :param pulumi.Input[_builtins.bool] no_summary: Do not inject inter-area routes
        :param pulumi.Input[_builtins.str] no_summary_variable: Variable name
        :param pulumi.Input[Sequence[pulumi.Input['TransportRoutingOspfv3Ipv6FeatureAreaRangeArgs']]] ranges: Summarize OSPF routes at an area boundary
        """
        if always_translate is not None:
            pulumi.set(__self__, "always_translate", always_translate)
        if always_translate_variable is not None:
            pulumi.set(__self__, "always_translate_variable", always_translate_variable)
        if area_number is not None:
            pulumi.set(__self__, "area_number", area_number)
        if area_number_variable is not None:
            pulumi.set(__self__, "area_number_variable", area_number_variable)
        if area_type is not None:
            pulumi.set(__self__, "area_type", area_type)
        if interfaces is not None:
            pulumi.set(__self__, "interfaces", interfaces)
        if no_summary is not None:
            pulumi.set(__self__, "no_summary", no_summary)
        if no_summary_variable is not None:
            pulumi.set(__self__, "no_summary_variable", no_summary_variable)
        if ranges is not None:
            pulumi.set(__self__, "ranges", ranges)

    @_builtins.property
    @pulumi.getter(name="alwaysTranslate")
    def always_translate(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Always translate type7 LSAs
        """
        return pulumi.get(self, "always_translate")

    @always_translate.setter
    def always_translate(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "always_translate", value)

    @_builtins.property
    @pulumi.getter(name="alwaysTranslateVariable")
    def always_translate_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "always_translate_variable")

    @always_translate_variable.setter
    def always_translate_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "always_translate_variable", value)

    @_builtins.property
    @pulumi.getter(name="areaNumber")
    def area_number(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        Set OSPF area number
          - Range: `0`-`4294967295`
        """
        return pulumi.get(self, "area_number")

    @area_number.setter
    def area_number(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "area_number", value)

    @_builtins.property
    @pulumi.getter(name="areaNumberVariable")
    def area_number_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "area_number_variable")

    @area_number_variable.setter
    def area_number_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "area_number_variable", value)

    @_builtins.property
    @pulumi.getter(name="areaType")
    def area_type(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        stub area type
          - Choices: `stub`
        """
        return pulumi.get(self, "area_type")

    @area_type.setter
    def area_type(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "area_type", value)

    @_builtins.property
    @pulumi.getter
    def interfaces(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['TransportRoutingOspfv3Ipv6FeatureAreaInterfaceArgs']]]]:
        """
        Set OSPF interface parameters
        """
        return pulumi.get(self, "interfaces")

    @interfaces.setter
    def interfaces(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['TransportRoutingOspfv3Ipv6FeatureAreaInterfaceArgs']]]]):
        pulumi.set(self, "interfaces", value)

    @_builtins.property
    @pulumi.getter(name="noSummary")
    def no_summary(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Do not inject inter-area routes
        """
        return pulumi.get(self, "no_summary")

    @no_summary.setter
    def no_summary(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "no_summary", value)

    @_builtins.property
    @pulumi.getter(name="noSummaryVariable")
    def no_summary_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "no_summary_variable")

    @no_summary_variable.setter
    def no_summary_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "no_summary_variable", value)

    @_builtins.property
    @pulumi.getter
    def ranges(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['TransportRoutingOspfv3Ipv6FeatureAreaRangeArgs']]]]:
        """
        Summarize OSPF routes at an area boundary
        """
        return pulumi.get(self, "ranges")

    @ranges.setter
    def ranges(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['TransportRoutingOspfv3Ipv6FeatureAreaRangeArgs']]]]):
        pulumi.set(self, "ranges", value)


if not MYPY:
    class TransportRoutingOspfv3Ipv6FeatureAreaInterfaceArgsDict(TypedDict):
        authentication_key: NotRequired[pulumi.Input[_builtins.str]]
        """
        Set OSPF interface authentication IPSEC key
        """
        authentication_key_variable: NotRequired[pulumi.Input[_builtins.str]]
        """
        Variable name
        """
        authentication_spi: NotRequired[pulumi.Input[_builtins.int]]
        """
        Set OSPF interface authentication IPSec SPI, range 256..4294967295
          - Range: `256`-`4294967295`
        """
        authentication_spi_variable: NotRequired[pulumi.Input[_builtins.str]]
        """
        Variable name
        """
        authentication_type: NotRequired[pulumi.Input[_builtins.str]]
        """
        No Authentication by default
          - Choices: `no-auth`
        """
        cost: NotRequired[pulumi.Input[_builtins.int]]
        """
        Set cost of OSPF interface
          - Range: `1`-`65535`
        """
        cost_variable: NotRequired[pulumi.Input[_builtins.str]]
        """
        Variable name
        """
        dead_interval: NotRequired[pulumi.Input[_builtins.int]]
        """
        Set interval after which neighbor is declared to be down
          - Range: `1`-`65535`
          - Default value: `40`
        """
        dead_interval_variable: NotRequired[pulumi.Input[_builtins.str]]
        """
        Variable name
        """
        hello_interval: NotRequired[pulumi.Input[_builtins.int]]
        """
        Set interval between OSPF hello packets
          - Range: `1`-`65535`
          - Default value: `10`
        """
        hello_interval_variable: NotRequired[pulumi.Input[_builtins.str]]
        """
        Variable name
        """
        lsa_retransmit_interval: NotRequired[pulumi.Input[_builtins.int]]
        """
        Set time between retransmitting LSAs
          - Range: `1`-`65535`
          - Default value: `5`
        """
        lsa_retransmit_interval_variable: NotRequired[pulumi.Input[_builtins.str]]
        """
        Variable name
        """
        name: NotRequired[pulumi.Input[_builtins.str]]
        """
        Set interface name
        """
        name_variable: NotRequired[pulumi.Input[_builtins.str]]
        """
        Variable name
        """
        network_type: NotRequired[pulumi.Input[_builtins.str]]
        """
        Set the OSPF network type
          - Choices: `broadcast`, `point-to-point`, `non-broadcast`, `point-to-multipoint`
        """
        network_type_variable: NotRequired[pulumi.Input[_builtins.str]]
        """
        Variable name
        """
        passive_interface: NotRequired[pulumi.Input[_builtins.bool]]
        """
        Set the interface to advertise its address, but not to actively run OSPF
          - Default value: `false`
        """
        passive_interface_variable: NotRequired[pulumi.Input[_builtins.str]]
        """
        Variable name
        """
elif False:
    TransportRoutingOspfv3Ipv6FeatureAreaInterfaceArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class TransportRoutingOspfv3Ipv6FeatureAreaInterfaceArgs:
    def __init__(__self__, *,
                 authentication_key: Optional[pulumi.Input[_builtins.str]] = None,
                 authentication_key_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 authentication_spi: Optional[pulumi.Input[_builtins.int]] = None,
                 authentication_spi_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 authentication_type: Optional[pulumi.Input[_builtins.str]] = None,
                 cost: Optional[pulumi.Input[_builtins.int]] = None,
                 cost_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 dead_interval: Optional[pulumi.Input[_builtins.int]] = None,
                 dead_interval_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 hello_interval: Optional[pulumi.Input[_builtins.int]] = None,
                 hello_interval_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 lsa_retransmit_interval: Optional[pulumi.Input[_builtins.int]] = None,
                 lsa_retransmit_interval_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 name_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 network_type: Optional[pulumi.Input[_builtins.str]] = None,
                 network_type_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 passive_interface: Optional[pulumi.Input[_builtins.bool]] = None,
                 passive_interface_variable: Optional[pulumi.Input[_builtins.str]] = None):
        """
        :param pulumi.Input[_builtins.str] authentication_key: Set OSPF interface authentication IPSEC key
        :param pulumi.Input[_builtins.str] authentication_key_variable: Variable name
        :param pulumi.Input[_builtins.int] authentication_spi: Set OSPF interface authentication IPSec SPI, range 256..4294967295
                 - Range: `256`-`4294967295`
        :param pulumi.Input[_builtins.str] authentication_spi_variable: Variable name
        :param pulumi.Input[_builtins.str] authentication_type: No Authentication by default
                 - Choices: `no-auth`
        :param pulumi.Input[_builtins.int] cost: Set cost of OSPF interface
                 - Range: `1`-`65535`
        :param pulumi.Input[_builtins.str] cost_variable: Variable name
        :param pulumi.Input[_builtins.int] dead_interval: Set interval after which neighbor is declared to be down
                 - Range: `1`-`65535`
                 - Default value: `40`
        :param pulumi.Input[_builtins.str] dead_interval_variable: Variable name
        :param pulumi.Input[_builtins.int] hello_interval: Set interval between OSPF hello packets
                 - Range: `1`-`65535`
                 - Default value: `10`
        :param pulumi.Input[_builtins.str] hello_interval_variable: Variable name
        :param pulumi.Input[_builtins.int] lsa_retransmit_interval: Set time between retransmitting LSAs
                 - Range: `1`-`65535`
                 - Default value: `5`
        :param pulumi.Input[_builtins.str] lsa_retransmit_interval_variable: Variable name
        :param pulumi.Input[_builtins.str] name: Set interface name
        :param pulumi.Input[_builtins.str] name_variable: Variable name
        :param pulumi.Input[_builtins.str] network_type: Set the OSPF network type
                 - Choices: `broadcast`, `point-to-point`, `non-broadcast`, `point-to-multipoint`
        :param pulumi.Input[_builtins.str] network_type_variable: Variable name
        :param pulumi.Input[_builtins.bool] passive_interface: Set the interface to advertise its address, but not to actively run OSPF
                 - Default value: `false`
        :param pulumi.Input[_builtins.str] passive_interface_variable: Variable name
        """
        if authentication_key is not None:
            pulumi.set(__self__, "authentication_key", authentication_key)
        if authentication_key_variable is not None:
            pulumi.set(__self__, "authentication_key_variable", authentication_key_variable)
        if authentication_spi is not None:
            pulumi.set(__self__, "authentication_spi", authentication_spi)
        if authentication_spi_variable is not None:
            pulumi.set(__self__, "authentication_spi_variable", authentication_spi_variable)
        if authentication_type is not None:
            pulumi.set(__self__, "authentication_type", authentication_type)
        if cost is not None:
            pulumi.set(__self__, "cost", cost)
        if cost_variable is not None:
            pulumi.set(__self__, "cost_variable", cost_variable)
        if dead_interval is not None:
            pulumi.set(__self__, "dead_interval", dead_interval)
        if dead_interval_variable is not None:
            pulumi.set(__self__, "dead_interval_variable", dead_interval_variable)
        if hello_interval is not None:
            pulumi.set(__self__, "hello_interval", hello_interval)
        if hello_interval_variable is not None:
            pulumi.set(__self__, "hello_interval_variable", hello_interval_variable)
        if lsa_retransmit_interval is not None:
            pulumi.set(__self__, "lsa_retransmit_interval", lsa_retransmit_interval)
        if lsa_retransmit_interval_variable is not None:
            pulumi.set(__self__, "lsa_retransmit_interval_variable", lsa_retransmit_interval_variable)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if name_variable is not None:
            pulumi.set(__self__, "name_variable", name_variable)
        if network_type is not None:
            pulumi.set(__self__, "network_type", network_type)
        if network_type_variable is not None:
            pulumi.set(__self__, "network_type_variable", network_type_variable)
        if passive_interface is not None:
            pulumi.set(__self__, "passive_interface", passive_interface)
        if passive_interface_variable is not None:
            pulumi.set(__self__, "passive_interface_variable", passive_interface_variable)

    @_builtins.property
    @pulumi.getter(name="authenticationKey")
    def authentication_key(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Set OSPF interface authentication IPSEC key
        """
        return pulumi.get(self, "authentication_key")

    @authentication_key.setter
    def authentication_key(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "authentication_key", value)

    @_builtins.property
    @pulumi.getter(name="authenticationKeyVariable")
    def authentication_key_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "authentication_key_variable")

    @authentication_key_variable.setter
    def authentication_key_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "authentication_key_variable", value)

    @_builtins.property
    @pulumi.getter(name="authenticationSpi")
    def authentication_spi(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        Set OSPF interface authentication IPSec SPI, range 256..4294967295
          - Range: `256`-`4294967295`
        """
        return pulumi.get(self, "authentication_spi")

    @authentication_spi.setter
    def authentication_spi(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "authentication_spi", value)

    @_builtins.property
    @pulumi.getter(name="authenticationSpiVariable")
    def authentication_spi_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "authentication_spi_variable")

    @authentication_spi_variable.setter
    def authentication_spi_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "authentication_spi_variable", value)

    @_builtins.property
    @pulumi.getter(name="authenticationType")
    def authentication_type(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        No Authentication by default
          - Choices: `no-auth`
        """
        return pulumi.get(self, "authentication_type")

    @authentication_type.setter
    def authentication_type(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "authentication_type", value)

    @_builtins.property
    @pulumi.getter
    def cost(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        Set cost of OSPF interface
          - Range: `1`-`65535`
        """
        return pulumi.get(self, "cost")

    @cost.setter
    def cost(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "cost", value)

    @_builtins.property
    @pulumi.getter(name="costVariable")
    def cost_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "cost_variable")

    @cost_variable.setter
    def cost_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "cost_variable", value)

    @_builtins.property
    @pulumi.getter(name="deadInterval")
    def dead_interval(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        Set interval after which neighbor is declared to be down
          - Range: `1`-`65535`
          - Default value: `40`
        """
        return pulumi.get(self, "dead_interval")

    @dead_interval.setter
    def dead_interval(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "dead_interval", value)

    @_builtins.property
    @pulumi.getter(name="deadIntervalVariable")
    def dead_interval_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "dead_interval_variable")

    @dead_interval_variable.setter
    def dead_interval_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "dead_interval_variable", value)

    @_builtins.property
    @pulumi.getter(name="helloInterval")
    def hello_interval(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        Set interval between OSPF hello packets
          - Range: `1`-`65535`
          - Default value: `10`
        """
        return pulumi.get(self, "hello_interval")

    @hello_interval.setter
    def hello_interval(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "hello_interval", value)

    @_builtins.property
    @pulumi.getter(name="helloIntervalVariable")
    def hello_interval_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "hello_interval_variable")

    @hello_interval_variable.setter
    def hello_interval_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "hello_interval_variable", value)

    @_builtins.property
    @pulumi.getter(name="lsaRetransmitInterval")
    def lsa_retransmit_interval(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        Set time between retransmitting LSAs
          - Range: `1`-`65535`
          - Default value: `5`
        """
        return pulumi.get(self, "lsa_retransmit_interval")

    @lsa_retransmit_interval.setter
    def lsa_retransmit_interval(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "lsa_retransmit_interval", value)

    @_builtins.property
    @pulumi.getter(name="lsaRetransmitIntervalVariable")
    def lsa_retransmit_interval_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "lsa_retransmit_interval_variable")

    @lsa_retransmit_interval_variable.setter
    def lsa_retransmit_interval_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "lsa_retransmit_interval_variable", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Set interface name
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "name", value)

    @_builtins.property
    @pulumi.getter(name="nameVariable")
    def name_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "name_variable")

    @name_variable.setter
    def name_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "name_variable", value)

    @_builtins.property
    @pulumi.getter(name="networkType")
    def network_type(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Set the OSPF network type
          - Choices: `broadcast`, `point-to-point`, `non-broadcast`, `point-to-multipoint`
        """
        return pulumi.get(self, "network_type")

    @network_type.setter
    def network_type(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "network_type", value)

    @_builtins.property
    @pulumi.getter(name="networkTypeVariable")
    def network_type_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "network_type_variable")

    @network_type_variable.setter
    def network_type_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "network_type_variable", value)

    @_builtins.property
    @pulumi.getter(name="passiveInterface")
    def passive_interface(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Set the interface to advertise its address, but not to actively run OSPF
          - Default value: `false`
        """
        return pulumi.get(self, "passive_interface")

    @passive_interface.setter
    def passive_interface(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "passive_interface", value)

    @_builtins.property
    @pulumi.getter(name="passiveInterfaceVariable")
    def passive_interface_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "passive_interface_variable")

    @passive_interface_variable.setter
    def passive_interface_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "passive_interface_variable", value)


if not MYPY:
    class TransportRoutingOspfv3Ipv6FeatureAreaRangeArgsDict(TypedDict):
        cost: NotRequired[pulumi.Input[_builtins.int]]
        """
        Set cost for this range
          - Range: `0`-`16777214`
        """
        cost_variable: NotRequired[pulumi.Input[_builtins.str]]
        """
        Variable name
        """
        no_advertise: NotRequired[pulumi.Input[_builtins.bool]]
        """
        Do not advertise this range
          - Default value: `false`
        """
        no_advertise_variable: NotRequired[pulumi.Input[_builtins.str]]
        """
        Variable name
        """
        prefix: NotRequired[pulumi.Input[_builtins.str]]
        """
        IPv6 prefix,for example 2001::/64
        """
        prefix_variable: NotRequired[pulumi.Input[_builtins.str]]
        """
        Variable name
        """
elif False:
    TransportRoutingOspfv3Ipv6FeatureAreaRangeArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class TransportRoutingOspfv3Ipv6FeatureAreaRangeArgs:
    def __init__(__self__, *,
                 cost: Optional[pulumi.Input[_builtins.int]] = None,
                 cost_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 no_advertise: Optional[pulumi.Input[_builtins.bool]] = None,
                 no_advertise_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 prefix: Optional[pulumi.Input[_builtins.str]] = None,
                 prefix_variable: Optional[pulumi.Input[_builtins.str]] = None):
        """
        :param pulumi.Input[_builtins.int] cost: Set cost for this range
                 - Range: `0`-`16777214`
        :param pulumi.Input[_builtins.str] cost_variable: Variable name
        :param pulumi.Input[_builtins.bool] no_advertise: Do not advertise this range
                 - Default value: `false`
        :param pulumi.Input[_builtins.str] no_advertise_variable: Variable name
        :param pulumi.Input[_builtins.str] prefix: IPv6 prefix,for example 2001::/64
        :param pulumi.Input[_builtins.str] prefix_variable: Variable name
        """
        if cost is not None:
            pulumi.set(__self__, "cost", cost)
        if cost_variable is not None:
            pulumi.set(__self__, "cost_variable", cost_variable)
        if no_advertise is not None:
            pulumi.set(__self__, "no_advertise", no_advertise)
        if no_advertise_variable is not None:
            pulumi.set(__self__, "no_advertise_variable", no_advertise_variable)
        if prefix is not None:
            pulumi.set(__self__, "prefix", prefix)
        if prefix_variable is not None:
            pulumi.set(__self__, "prefix_variable", prefix_variable)

    @_builtins.property
    @pulumi.getter
    def cost(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        Set cost for this range
          - Range: `0`-`16777214`
        """
        return pulumi.get(self, "cost")

    @cost.setter
    def cost(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "cost", value)

    @_builtins.property
    @pulumi.getter(name="costVariable")
    def cost_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "cost_variable")

    @cost_variable.setter
    def cost_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "cost_variable", value)

    @_builtins.property
    @pulumi.getter(name="noAdvertise")
    def no_advertise(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Do not advertise this range
          - Default value: `false`
        """
        return pulumi.get(self, "no_advertise")

    @no_advertise.setter
    def no_advertise(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "no_advertise", value)

    @_builtins.property
    @pulumi.getter(name="noAdvertiseVariable")
    def no_advertise_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "no_advertise_variable")

    @no_advertise_variable.setter
    def no_advertise_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "no_advertise_variable", value)

    @_builtins.property
    @pulumi.getter
    def prefix(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        IPv6 prefix,for example 2001::/64
        """
        return pulumi.get(self, "prefix")

    @prefix.setter
    def prefix(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "prefix", value)

    @_builtins.property
    @pulumi.getter(name="prefixVariable")
    def prefix_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "prefix_variable")

    @prefix_variable.setter
    def prefix_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "prefix_variable", value)


if not MYPY:
    class TransportRoutingOspfv3Ipv6FeatureRedistributeArgsDict(TypedDict):
        protocol: NotRequired[pulumi.Input[_builtins.str]]
        """
        Set the protocol
          - Choices: `connected`, `static`, `omp`, `bgp`, `eigrp`
        """
        protocol_variable: NotRequired[pulumi.Input[_builtins.str]]
        """
        Variable name
        """
        route_policy_id: NotRequired[pulumi.Input[_builtins.str]]
elif False:
    TransportRoutingOspfv3Ipv6FeatureRedistributeArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class TransportRoutingOspfv3Ipv6FeatureRedistributeArgs:
    def __init__(__self__, *,
                 protocol: Optional[pulumi.Input[_builtins.str]] = None,
                 protocol_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 route_policy_id: Optional[pulumi.Input[_builtins.str]] = None):
        """
        :param pulumi.Input[_builtins.str] protocol: Set the protocol
                 - Choices: `connected`, `static`, `omp`, `bgp`, `eigrp`
        :param pulumi.Input[_builtins.str] protocol_variable: Variable name
        """
        if protocol is not None:
            pulumi.set(__self__, "protocol", protocol)
        if protocol_variable is not None:
            pulumi.set(__self__, "protocol_variable", protocol_variable)
        if route_policy_id is not None:
            pulumi.set(__self__, "route_policy_id", route_policy_id)

    @_builtins.property
    @pulumi.getter
    def protocol(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Set the protocol
          - Choices: `connected`, `static`, `omp`, `bgp`, `eigrp`
        """
        return pulumi.get(self, "protocol")

    @protocol.setter
    def protocol(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "protocol", value)

    @_builtins.property
    @pulumi.getter(name="protocolVariable")
    def protocol_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "protocol_variable")

    @protocol_variable.setter
    def protocol_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "protocol_variable", value)

    @_builtins.property
    @pulumi.getter(name="routePolicyId")
    def route_policy_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "route_policy_id")

    @route_policy_id.setter
    def route_policy_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "route_policy_id", value)


if not MYPY:
    class TransportT1E1ControllerFeatureEntryArgsDict(TypedDict):
        cable_length: NotRequired[pulumi.Input[_builtins.str]]
        """
        Cable Config
          - Choices: `short`, `long`
        """
        channel_groups: NotRequired[pulumi.Input[Sequence[pulumi.Input['TransportT1E1ControllerFeatureEntryChannelGroupArgsDict']]]]
        """
        Channel Group List
        """
        clock_source: NotRequired[pulumi.Input[_builtins.str]]
        """
        Clock Source
          - Choices: `line`, `internal`, `loop-timed`, `network`
        """
        description: NotRequired[pulumi.Input[_builtins.str]]
        """
        Description
        """
        description_variable: NotRequired[pulumi.Input[_builtins.str]]
        """
        Variable name
        """
        e1_description: NotRequired[pulumi.Input[_builtins.str]]
        """
        Card Type
          - Choices: `E1`
        """
        e1_framing: NotRequired[pulumi.Input[_builtins.str]]
        """
        Framing
          - Choices: `crc4`, `no-crc4`
        """
        e1_framing_variable: NotRequired[pulumi.Input[_builtins.str]]
        """
        Variable name
        """
        e1_linecode: NotRequired[pulumi.Input[_builtins.str]]
        """
        LineCode
          - Choices: `ami`, `hdb3`
        """
        e1_linecode_variable: NotRequired[pulumi.Input[_builtins.str]]
        """
        Variable name
        """
        length_long: NotRequired[pulumi.Input[_builtins.str]]
        """
        length, Attribute conditional on `cable_length` being equal to `long`
          - Choices: `-15db`, `-22.5db`, `-7.5db`, `0db`
        """
        length_long_variable: NotRequired[pulumi.Input[_builtins.str]]
        """
        Variable name, Attribute conditional on `cable_length` being equal to `long`
        """
        length_short: NotRequired[pulumi.Input[_builtins.str]]
        """
        length, Attribute conditional on `cable_length` being equal to `short`
          - Choices: `110ft`, `220ft`, `330ft`, `440ft`, `550ft`, `660ft`
        """
        length_short_variable: NotRequired[pulumi.Input[_builtins.str]]
        """
        Variable name, Attribute conditional on `cable_length` being equal to `short`
        """
        line_mode: NotRequired[pulumi.Input[_builtins.str]]
        """
        Line Mode
          - Choices: `secondary`, `primary`
        """
        line_mode_variable: NotRequired[pulumi.Input[_builtins.str]]
        """
        Variable name
        """
        t1_description: NotRequired[pulumi.Input[_builtins.str]]
        """
        Card Type
          - Choices: `T1`
        """
        t1_framing: NotRequired[pulumi.Input[_builtins.str]]
        """
        Framing
          - Choices: `esf`, `sf`
        """
        t1_framing_variable: NotRequired[pulumi.Input[_builtins.str]]
        """
        Variable name
        """
        t1_linecode: NotRequired[pulumi.Input[_builtins.str]]
        """
        LineCode
          - Choices: `ami`, `b8zs`
        """
        t1_linecode_variable: NotRequired[pulumi.Input[_builtins.str]]
        """
        Variable name
        """
elif False:
    TransportT1E1ControllerFeatureEntryArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class TransportT1E1ControllerFeatureEntryArgs:
    def __init__(__self__, *,
                 cable_length: Optional[pulumi.Input[_builtins.str]] = None,
                 channel_groups: Optional[pulumi.Input[Sequence[pulumi.Input['TransportT1E1ControllerFeatureEntryChannelGroupArgs']]]] = None,
                 clock_source: Optional[pulumi.Input[_builtins.str]] = None,
                 description: Optional[pulumi.Input[_builtins.str]] = None,
                 description_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 e1_description: Optional[pulumi.Input[_builtins.str]] = None,
                 e1_framing: Optional[pulumi.Input[_builtins.str]] = None,
                 e1_framing_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 e1_linecode: Optional[pulumi.Input[_builtins.str]] = None,
                 e1_linecode_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 length_long: Optional[pulumi.Input[_builtins.str]] = None,
                 length_long_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 length_short: Optional[pulumi.Input[_builtins.str]] = None,
                 length_short_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 line_mode: Optional[pulumi.Input[_builtins.str]] = None,
                 line_mode_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 t1_description: Optional[pulumi.Input[_builtins.str]] = None,
                 t1_framing: Optional[pulumi.Input[_builtins.str]] = None,
                 t1_framing_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 t1_linecode: Optional[pulumi.Input[_builtins.str]] = None,
                 t1_linecode_variable: Optional[pulumi.Input[_builtins.str]] = None):
        """
        :param pulumi.Input[_builtins.str] cable_length: Cable Config
                 - Choices: `short`, `long`
        :param pulumi.Input[Sequence[pulumi.Input['TransportT1E1ControllerFeatureEntryChannelGroupArgs']]] channel_groups: Channel Group List
        :param pulumi.Input[_builtins.str] clock_source: Clock Source
                 - Choices: `line`, `internal`, `loop-timed`, `network`
        :param pulumi.Input[_builtins.str] description: Description
        :param pulumi.Input[_builtins.str] description_variable: Variable name
        :param pulumi.Input[_builtins.str] e1_description: Card Type
                 - Choices: `E1`
        :param pulumi.Input[_builtins.str] e1_framing: Framing
                 - Choices: `crc4`, `no-crc4`
        :param pulumi.Input[_builtins.str] e1_framing_variable: Variable name
        :param pulumi.Input[_builtins.str] e1_linecode: LineCode
                 - Choices: `ami`, `hdb3`
        :param pulumi.Input[_builtins.str] e1_linecode_variable: Variable name
        :param pulumi.Input[_builtins.str] length_long: length, Attribute conditional on `cable_length` being equal to `long`
                 - Choices: `-15db`, `-22.5db`, `-7.5db`, `0db`
        :param pulumi.Input[_builtins.str] length_long_variable: Variable name, Attribute conditional on `cable_length` being equal to `long`
        :param pulumi.Input[_builtins.str] length_short: length, Attribute conditional on `cable_length` being equal to `short`
                 - Choices: `110ft`, `220ft`, `330ft`, `440ft`, `550ft`, `660ft`
        :param pulumi.Input[_builtins.str] length_short_variable: Variable name, Attribute conditional on `cable_length` being equal to `short`
        :param pulumi.Input[_builtins.str] line_mode: Line Mode
                 - Choices: `secondary`, `primary`
        :param pulumi.Input[_builtins.str] line_mode_variable: Variable name
        :param pulumi.Input[_builtins.str] t1_description: Card Type
                 - Choices: `T1`
        :param pulumi.Input[_builtins.str] t1_framing: Framing
                 - Choices: `esf`, `sf`
        :param pulumi.Input[_builtins.str] t1_framing_variable: Variable name
        :param pulumi.Input[_builtins.str] t1_linecode: LineCode
                 - Choices: `ami`, `b8zs`
        :param pulumi.Input[_builtins.str] t1_linecode_variable: Variable name
        """
        if cable_length is not None:
            pulumi.set(__self__, "cable_length", cable_length)
        if channel_groups is not None:
            pulumi.set(__self__, "channel_groups", channel_groups)
        if clock_source is not None:
            pulumi.set(__self__, "clock_source", clock_source)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if description_variable is not None:
            pulumi.set(__self__, "description_variable", description_variable)
        if e1_description is not None:
            pulumi.set(__self__, "e1_description", e1_description)
        if e1_framing is not None:
            pulumi.set(__self__, "e1_framing", e1_framing)
        if e1_framing_variable is not None:
            pulumi.set(__self__, "e1_framing_variable", e1_framing_variable)
        if e1_linecode is not None:
            pulumi.set(__self__, "e1_linecode", e1_linecode)
        if e1_linecode_variable is not None:
            pulumi.set(__self__, "e1_linecode_variable", e1_linecode_variable)
        if length_long is not None:
            pulumi.set(__self__, "length_long", length_long)
        if length_long_variable is not None:
            pulumi.set(__self__, "length_long_variable", length_long_variable)
        if length_short is not None:
            pulumi.set(__self__, "length_short", length_short)
        if length_short_variable is not None:
            pulumi.set(__self__, "length_short_variable", length_short_variable)
        if line_mode is not None:
            pulumi.set(__self__, "line_mode", line_mode)
        if line_mode_variable is not None:
            pulumi.set(__self__, "line_mode_variable", line_mode_variable)
        if t1_description is not None:
            pulumi.set(__self__, "t1_description", t1_description)
        if t1_framing is not None:
            pulumi.set(__self__, "t1_framing", t1_framing)
        if t1_framing_variable is not None:
            pulumi.set(__self__, "t1_framing_variable", t1_framing_variable)
        if t1_linecode is not None:
            pulumi.set(__self__, "t1_linecode", t1_linecode)
        if t1_linecode_variable is not None:
            pulumi.set(__self__, "t1_linecode_variable", t1_linecode_variable)

    @_builtins.property
    @pulumi.getter(name="cableLength")
    def cable_length(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Cable Config
          - Choices: `short`, `long`
        """
        return pulumi.get(self, "cable_length")

    @cable_length.setter
    def cable_length(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "cable_length", value)

    @_builtins.property
    @pulumi.getter(name="channelGroups")
    def channel_groups(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['TransportT1E1ControllerFeatureEntryChannelGroupArgs']]]]:
        """
        Channel Group List
        """
        return pulumi.get(self, "channel_groups")

    @channel_groups.setter
    def channel_groups(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['TransportT1E1ControllerFeatureEntryChannelGroupArgs']]]]):
        pulumi.set(self, "channel_groups", value)

    @_builtins.property
    @pulumi.getter(name="clockSource")
    def clock_source(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Clock Source
          - Choices: `line`, `internal`, `loop-timed`, `network`
        """
        return pulumi.get(self, "clock_source")

    @clock_source.setter
    def clock_source(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "clock_source", value)

    @_builtins.property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Description
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "description", value)

    @_builtins.property
    @pulumi.getter(name="descriptionVariable")
    def description_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "description_variable")

    @description_variable.setter
    def description_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "description_variable", value)

    @_builtins.property
    @pulumi.getter(name="e1Description")
    def e1_description(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Card Type
          - Choices: `E1`
        """
        return pulumi.get(self, "e1_description")

    @e1_description.setter
    def e1_description(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "e1_description", value)

    @_builtins.property
    @pulumi.getter(name="e1Framing")
    def e1_framing(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Framing
          - Choices: `crc4`, `no-crc4`
        """
        return pulumi.get(self, "e1_framing")

    @e1_framing.setter
    def e1_framing(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "e1_framing", value)

    @_builtins.property
    @pulumi.getter(name="e1FramingVariable")
    def e1_framing_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "e1_framing_variable")

    @e1_framing_variable.setter
    def e1_framing_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "e1_framing_variable", value)

    @_builtins.property
    @pulumi.getter(name="e1Linecode")
    def e1_linecode(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        LineCode
          - Choices: `ami`, `hdb3`
        """
        return pulumi.get(self, "e1_linecode")

    @e1_linecode.setter
    def e1_linecode(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "e1_linecode", value)

    @_builtins.property
    @pulumi.getter(name="e1LinecodeVariable")
    def e1_linecode_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "e1_linecode_variable")

    @e1_linecode_variable.setter
    def e1_linecode_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "e1_linecode_variable", value)

    @_builtins.property
    @pulumi.getter(name="lengthLong")
    def length_long(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        length, Attribute conditional on `cable_length` being equal to `long`
          - Choices: `-15db`, `-22.5db`, `-7.5db`, `0db`
        """
        return pulumi.get(self, "length_long")

    @length_long.setter
    def length_long(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "length_long", value)

    @_builtins.property
    @pulumi.getter(name="lengthLongVariable")
    def length_long_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name, Attribute conditional on `cable_length` being equal to `long`
        """
        return pulumi.get(self, "length_long_variable")

    @length_long_variable.setter
    def length_long_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "length_long_variable", value)

    @_builtins.property
    @pulumi.getter(name="lengthShort")
    def length_short(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        length, Attribute conditional on `cable_length` being equal to `short`
          - Choices: `110ft`, `220ft`, `330ft`, `440ft`, `550ft`, `660ft`
        """
        return pulumi.get(self, "length_short")

    @length_short.setter
    def length_short(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "length_short", value)

    @_builtins.property
    @pulumi.getter(name="lengthShortVariable")
    def length_short_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name, Attribute conditional on `cable_length` being equal to `short`
        """
        return pulumi.get(self, "length_short_variable")

    @length_short_variable.setter
    def length_short_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "length_short_variable", value)

    @_builtins.property
    @pulumi.getter(name="lineMode")
    def line_mode(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Line Mode
          - Choices: `secondary`, `primary`
        """
        return pulumi.get(self, "line_mode")

    @line_mode.setter
    def line_mode(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "line_mode", value)

    @_builtins.property
    @pulumi.getter(name="lineModeVariable")
    def line_mode_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "line_mode_variable")

    @line_mode_variable.setter
    def line_mode_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "line_mode_variable", value)

    @_builtins.property
    @pulumi.getter(name="t1Description")
    def t1_description(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Card Type
          - Choices: `T1`
        """
        return pulumi.get(self, "t1_description")

    @t1_description.setter
    def t1_description(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "t1_description", value)

    @_builtins.property
    @pulumi.getter(name="t1Framing")
    def t1_framing(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Framing
          - Choices: `esf`, `sf`
        """
        return pulumi.get(self, "t1_framing")

    @t1_framing.setter
    def t1_framing(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "t1_framing", value)

    @_builtins.property
    @pulumi.getter(name="t1FramingVariable")
    def t1_framing_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "t1_framing_variable")

    @t1_framing_variable.setter
    def t1_framing_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "t1_framing_variable", value)

    @_builtins.property
    @pulumi.getter(name="t1Linecode")
    def t1_linecode(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        LineCode
          - Choices: `ami`, `b8zs`
        """
        return pulumi.get(self, "t1_linecode")

    @t1_linecode.setter
    def t1_linecode(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "t1_linecode", value)

    @_builtins.property
    @pulumi.getter(name="t1LinecodeVariable")
    def t1_linecode_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "t1_linecode_variable")

    @t1_linecode_variable.setter
    def t1_linecode_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "t1_linecode_variable", value)


if not MYPY:
    class TransportT1E1ControllerFeatureEntryChannelGroupArgsDict(TypedDict):
        channel_group: NotRequired[pulumi.Input[_builtins.int]]
        """
        Number
          - Range: `0`-`23`
        """
        channel_group_variable: NotRequired[pulumi.Input[_builtins.str]]
        """
        Variable name
        """
        time_slot: NotRequired[pulumi.Input[_builtins.str]]
        """
        Time slots
        """
        time_slot_variable: NotRequired[pulumi.Input[_builtins.str]]
        """
        Variable name
        """
elif False:
    TransportT1E1ControllerFeatureEntryChannelGroupArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class TransportT1E1ControllerFeatureEntryChannelGroupArgs:
    def __init__(__self__, *,
                 channel_group: Optional[pulumi.Input[_builtins.int]] = None,
                 channel_group_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 time_slot: Optional[pulumi.Input[_builtins.str]] = None,
                 time_slot_variable: Optional[pulumi.Input[_builtins.str]] = None):
        """
        :param pulumi.Input[_builtins.int] channel_group: Number
                 - Range: `0`-`23`
        :param pulumi.Input[_builtins.str] channel_group_variable: Variable name
        :param pulumi.Input[_builtins.str] time_slot: Time slots
        :param pulumi.Input[_builtins.str] time_slot_variable: Variable name
        """
        if channel_group is not None:
            pulumi.set(__self__, "channel_group", channel_group)
        if channel_group_variable is not None:
            pulumi.set(__self__, "channel_group_variable", channel_group_variable)
        if time_slot is not None:
            pulumi.set(__self__, "time_slot", time_slot)
        if time_slot_variable is not None:
            pulumi.set(__self__, "time_slot_variable", time_slot_variable)

    @_builtins.property
    @pulumi.getter(name="channelGroup")
    def channel_group(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        Number
          - Range: `0`-`23`
        """
        return pulumi.get(self, "channel_group")

    @channel_group.setter
    def channel_group(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "channel_group", value)

    @_builtins.property
    @pulumi.getter(name="channelGroupVariable")
    def channel_group_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "channel_group_variable")

    @channel_group_variable.setter
    def channel_group_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "channel_group_variable", value)

    @_builtins.property
    @pulumi.getter(name="timeSlot")
    def time_slot(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Time slots
        """
        return pulumi.get(self, "time_slot")

    @time_slot.setter
    def time_slot(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "time_slot", value)

    @_builtins.property
    @pulumi.getter(name="timeSlotVariable")
    def time_slot_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "time_slot_variable")

    @time_slot_variable.setter
    def time_slot_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "time_slot_variable", value)


if not MYPY:
    class TransportTrackerGroupFeatureTrackerElementArgsDict(TypedDict):
        tracker_id: NotRequired[pulumi.Input[_builtins.str]]
elif False:
    TransportTrackerGroupFeatureTrackerElementArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class TransportTrackerGroupFeatureTrackerElementArgs:
    def __init__(__self__, *,
                 tracker_id: Optional[pulumi.Input[_builtins.str]] = None):
        if tracker_id is not None:
            pulumi.set(__self__, "tracker_id", tracker_id)

    @_builtins.property
    @pulumi.getter(name="trackerId")
    def tracker_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "tracker_id")

    @tracker_id.setter
    def tracker_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "tracker_id", value)


if not MYPY:
    class TransportWanVpnFeatureIpv4StaticRouteArgsDict(TypedDict):
        administrative_distance: NotRequired[pulumi.Input[_builtins.int]]
        """
        Administrative distance, Attribute conditional on `gateway` being equal to `null0`
          - Range: `1`-`255`
          - Default value: `1`
        """
        administrative_distance_variable: NotRequired[pulumi.Input[_builtins.str]]
        """
        Variable name, Attribute conditional on `gateway` being equal to `null0`
        """
        gateway: NotRequired[pulumi.Input[_builtins.str]]
        """
        Gateway
          - Choices: `nextHop`, `dhcp`, `null0`
          - Default value: `nextHop`
        """
        network_address: NotRequired[pulumi.Input[_builtins.str]]
        """
        IP Address
        """
        network_address_variable: NotRequired[pulumi.Input[_builtins.str]]
        """
        Variable name
        """
        next_hops: NotRequired[pulumi.Input[Sequence[pulumi.Input['TransportWanVpnFeatureIpv4StaticRouteNextHopArgsDict']]]]
        """
        IPv4 Route Gateway Next Hop, Attribute conditional on `gateway` being equal to `nextHop`
        """
        subnet_mask: NotRequired[pulumi.Input[_builtins.str]]
        """
        Subnet Mask
          - Choices: `255.255.255.255`, `255.255.255.254`, `255.255.255.252`, `255.255.255.248`, `255.255.255.240`, `255.255.255.224`, `255.255.255.192`, `255.255.255.128`, `255.255.255.0`, `255.255.254.0`, `255.255.252.0`, `255.255.248.0`, `255.255.240.0`, `255.255.224.0`, `255.255.192.0`, `255.255.128.0`, `255.255.0.0`, `255.254.0.0`, `255.252.0.0`, `255.240.0.0`, `255.224.0.0`, `255.192.0.0`, `255.128.0.0`, `255.0.0.0`, `254.0.0.0`, `252.0.0.0`, `248.0.0.0`, `240.0.0.0`, `224.0.0.0`, `192.0.0.0`, `128.0.0.0`, `0.0.0.0`
        """
        subnet_mask_variable: NotRequired[pulumi.Input[_builtins.str]]
        """
        Variable name
        """
elif False:
    TransportWanVpnFeatureIpv4StaticRouteArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class TransportWanVpnFeatureIpv4StaticRouteArgs:
    def __init__(__self__, *,
                 administrative_distance: Optional[pulumi.Input[_builtins.int]] = None,
                 administrative_distance_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 gateway: Optional[pulumi.Input[_builtins.str]] = None,
                 network_address: Optional[pulumi.Input[_builtins.str]] = None,
                 network_address_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 next_hops: Optional[pulumi.Input[Sequence[pulumi.Input['TransportWanVpnFeatureIpv4StaticRouteNextHopArgs']]]] = None,
                 subnet_mask: Optional[pulumi.Input[_builtins.str]] = None,
                 subnet_mask_variable: Optional[pulumi.Input[_builtins.str]] = None):
        """
        :param pulumi.Input[_builtins.int] administrative_distance: Administrative distance, Attribute conditional on `gateway` being equal to `null0`
                 - Range: `1`-`255`
                 - Default value: `1`
        :param pulumi.Input[_builtins.str] administrative_distance_variable: Variable name, Attribute conditional on `gateway` being equal to `null0`
        :param pulumi.Input[_builtins.str] gateway: Gateway
                 - Choices: `nextHop`, `dhcp`, `null0`
                 - Default value: `nextHop`
        :param pulumi.Input[_builtins.str] network_address: IP Address
        :param pulumi.Input[_builtins.str] network_address_variable: Variable name
        :param pulumi.Input[Sequence[pulumi.Input['TransportWanVpnFeatureIpv4StaticRouteNextHopArgs']]] next_hops: IPv4 Route Gateway Next Hop, Attribute conditional on `gateway` being equal to `nextHop`
        :param pulumi.Input[_builtins.str] subnet_mask: Subnet Mask
                 - Choices: `255.255.255.255`, `255.255.255.254`, `255.255.255.252`, `255.255.255.248`, `255.255.255.240`, `255.255.255.224`, `255.255.255.192`, `255.255.255.128`, `255.255.255.0`, `255.255.254.0`, `255.255.252.0`, `255.255.248.0`, `255.255.240.0`, `255.255.224.0`, `255.255.192.0`, `255.255.128.0`, `255.255.0.0`, `255.254.0.0`, `255.252.0.0`, `255.240.0.0`, `255.224.0.0`, `255.192.0.0`, `255.128.0.0`, `255.0.0.0`, `254.0.0.0`, `252.0.0.0`, `248.0.0.0`, `240.0.0.0`, `224.0.0.0`, `192.0.0.0`, `128.0.0.0`, `0.0.0.0`
        :param pulumi.Input[_builtins.str] subnet_mask_variable: Variable name
        """
        if administrative_distance is not None:
            pulumi.set(__self__, "administrative_distance", administrative_distance)
        if administrative_distance_variable is not None:
            pulumi.set(__self__, "administrative_distance_variable", administrative_distance_variable)
        if gateway is not None:
            pulumi.set(__self__, "gateway", gateway)
        if network_address is not None:
            pulumi.set(__self__, "network_address", network_address)
        if network_address_variable is not None:
            pulumi.set(__self__, "network_address_variable", network_address_variable)
        if next_hops is not None:
            pulumi.set(__self__, "next_hops", next_hops)
        if subnet_mask is not None:
            pulumi.set(__self__, "subnet_mask", subnet_mask)
        if subnet_mask_variable is not None:
            pulumi.set(__self__, "subnet_mask_variable", subnet_mask_variable)

    @_builtins.property
    @pulumi.getter(name="administrativeDistance")
    def administrative_distance(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        Administrative distance, Attribute conditional on `gateway` being equal to `null0`
          - Range: `1`-`255`
          - Default value: `1`
        """
        return pulumi.get(self, "administrative_distance")

    @administrative_distance.setter
    def administrative_distance(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "administrative_distance", value)

    @_builtins.property
    @pulumi.getter(name="administrativeDistanceVariable")
    def administrative_distance_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name, Attribute conditional on `gateway` being equal to `null0`
        """
        return pulumi.get(self, "administrative_distance_variable")

    @administrative_distance_variable.setter
    def administrative_distance_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "administrative_distance_variable", value)

    @_builtins.property
    @pulumi.getter
    def gateway(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Gateway
          - Choices: `nextHop`, `dhcp`, `null0`
          - Default value: `nextHop`
        """
        return pulumi.get(self, "gateway")

    @gateway.setter
    def gateway(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "gateway", value)

    @_builtins.property
    @pulumi.getter(name="networkAddress")
    def network_address(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        IP Address
        """
        return pulumi.get(self, "network_address")

    @network_address.setter
    def network_address(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "network_address", value)

    @_builtins.property
    @pulumi.getter(name="networkAddressVariable")
    def network_address_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "network_address_variable")

    @network_address_variable.setter
    def network_address_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "network_address_variable", value)

    @_builtins.property
    @pulumi.getter(name="nextHops")
    def next_hops(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['TransportWanVpnFeatureIpv4StaticRouteNextHopArgs']]]]:
        """
        IPv4 Route Gateway Next Hop, Attribute conditional on `gateway` being equal to `nextHop`
        """
        return pulumi.get(self, "next_hops")

    @next_hops.setter
    def next_hops(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['TransportWanVpnFeatureIpv4StaticRouteNextHopArgs']]]]):
        pulumi.set(self, "next_hops", value)

    @_builtins.property
    @pulumi.getter(name="subnetMask")
    def subnet_mask(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Subnet Mask
          - Choices: `255.255.255.255`, `255.255.255.254`, `255.255.255.252`, `255.255.255.248`, `255.255.255.240`, `255.255.255.224`, `255.255.255.192`, `255.255.255.128`, `255.255.255.0`, `255.255.254.0`, `255.255.252.0`, `255.255.248.0`, `255.255.240.0`, `255.255.224.0`, `255.255.192.0`, `255.255.128.0`, `255.255.0.0`, `255.254.0.0`, `255.252.0.0`, `255.240.0.0`, `255.224.0.0`, `255.192.0.0`, `255.128.0.0`, `255.0.0.0`, `254.0.0.0`, `252.0.0.0`, `248.0.0.0`, `240.0.0.0`, `224.0.0.0`, `192.0.0.0`, `128.0.0.0`, `0.0.0.0`
        """
        return pulumi.get(self, "subnet_mask")

    @subnet_mask.setter
    def subnet_mask(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "subnet_mask", value)

    @_builtins.property
    @pulumi.getter(name="subnetMaskVariable")
    def subnet_mask_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "subnet_mask_variable")

    @subnet_mask_variable.setter
    def subnet_mask_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "subnet_mask_variable", value)


if not MYPY:
    class TransportWanVpnFeatureIpv4StaticRouteNextHopArgsDict(TypedDict):
        address: NotRequired[pulumi.Input[_builtins.str]]
        """
        Address
        """
        address_variable: NotRequired[pulumi.Input[_builtins.str]]
        """
        Variable name
        """
        administrative_distance: NotRequired[pulumi.Input[_builtins.int]]
        """
        Administrative distance
          - Range: `1`-`255`
          - Default value: `1`
        """
        administrative_distance_variable: NotRequired[pulumi.Input[_builtins.str]]
        """
        Variable name
        """
elif False:
    TransportWanVpnFeatureIpv4StaticRouteNextHopArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class TransportWanVpnFeatureIpv4StaticRouteNextHopArgs:
    def __init__(__self__, *,
                 address: Optional[pulumi.Input[_builtins.str]] = None,
                 address_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 administrative_distance: Optional[pulumi.Input[_builtins.int]] = None,
                 administrative_distance_variable: Optional[pulumi.Input[_builtins.str]] = None):
        """
        :param pulumi.Input[_builtins.str] address: Address
        :param pulumi.Input[_builtins.str] address_variable: Variable name
        :param pulumi.Input[_builtins.int] administrative_distance: Administrative distance
                 - Range: `1`-`255`
                 - Default value: `1`
        :param pulumi.Input[_builtins.str] administrative_distance_variable: Variable name
        """
        if address is not None:
            pulumi.set(__self__, "address", address)
        if address_variable is not None:
            pulumi.set(__self__, "address_variable", address_variable)
        if administrative_distance is not None:
            pulumi.set(__self__, "administrative_distance", administrative_distance)
        if administrative_distance_variable is not None:
            pulumi.set(__self__, "administrative_distance_variable", administrative_distance_variable)

    @_builtins.property
    @pulumi.getter
    def address(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Address
        """
        return pulumi.get(self, "address")

    @address.setter
    def address(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "address", value)

    @_builtins.property
    @pulumi.getter(name="addressVariable")
    def address_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "address_variable")

    @address_variable.setter
    def address_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "address_variable", value)

    @_builtins.property
    @pulumi.getter(name="administrativeDistance")
    def administrative_distance(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        Administrative distance
          - Range: `1`-`255`
          - Default value: `1`
        """
        return pulumi.get(self, "administrative_distance")

    @administrative_distance.setter
    def administrative_distance(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "administrative_distance", value)

    @_builtins.property
    @pulumi.getter(name="administrativeDistanceVariable")
    def administrative_distance_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "administrative_distance_variable")

    @administrative_distance_variable.setter
    def administrative_distance_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "administrative_distance_variable", value)


if not MYPY:
    class TransportWanVpnFeatureIpv6StaticRouteArgsDict(TypedDict):
        gateway: NotRequired[pulumi.Input[_builtins.str]]
        """
        Gateway
          - Choices: `nextHop`, `null0`, `nat`
        """
        nat: NotRequired[pulumi.Input[_builtins.str]]
        """
        IPv6 Nat, Attribute conditional on `gateway` being equal to `nat`
          - Choices: `NAT64`, `NAT66`
        """
        nat_variable: NotRequired[pulumi.Input[_builtins.str]]
        """
        Variable name, Attribute conditional on `gateway` being equal to `nat`
        """
        next_hops: NotRequired[pulumi.Input[Sequence[pulumi.Input['TransportWanVpnFeatureIpv6StaticRouteNextHopArgsDict']]]]
        """
        IPv6 Route Gateway Next Hop, Attribute conditional on `gateway` being equal to `nextHop`
        """
        null0: NotRequired[pulumi.Input[_builtins.bool]]
        """
        IPv6 Route Gateway Next Hop, Attribute conditional on `gateway` being equal to `null0`
        """
        prefix: NotRequired[pulumi.Input[_builtins.str]]
        """
        Prefix
        """
        prefix_variable: NotRequired[pulumi.Input[_builtins.str]]
        """
        Variable name
        """
elif False:
    TransportWanVpnFeatureIpv6StaticRouteArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class TransportWanVpnFeatureIpv6StaticRouteArgs:
    def __init__(__self__, *,
                 gateway: Optional[pulumi.Input[_builtins.str]] = None,
                 nat: Optional[pulumi.Input[_builtins.str]] = None,
                 nat_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 next_hops: Optional[pulumi.Input[Sequence[pulumi.Input['TransportWanVpnFeatureIpv6StaticRouteNextHopArgs']]]] = None,
                 null0: Optional[pulumi.Input[_builtins.bool]] = None,
                 prefix: Optional[pulumi.Input[_builtins.str]] = None,
                 prefix_variable: Optional[pulumi.Input[_builtins.str]] = None):
        """
        :param pulumi.Input[_builtins.str] gateway: Gateway
                 - Choices: `nextHop`, `null0`, `nat`
        :param pulumi.Input[_builtins.str] nat: IPv6 Nat, Attribute conditional on `gateway` being equal to `nat`
                 - Choices: `NAT64`, `NAT66`
        :param pulumi.Input[_builtins.str] nat_variable: Variable name, Attribute conditional on `gateway` being equal to `nat`
        :param pulumi.Input[Sequence[pulumi.Input['TransportWanVpnFeatureIpv6StaticRouteNextHopArgs']]] next_hops: IPv6 Route Gateway Next Hop, Attribute conditional on `gateway` being equal to `nextHop`
        :param pulumi.Input[_builtins.bool] null0: IPv6 Route Gateway Next Hop, Attribute conditional on `gateway` being equal to `null0`
        :param pulumi.Input[_builtins.str] prefix: Prefix
        :param pulumi.Input[_builtins.str] prefix_variable: Variable name
        """
        if gateway is not None:
            pulumi.set(__self__, "gateway", gateway)
        if nat is not None:
            pulumi.set(__self__, "nat", nat)
        if nat_variable is not None:
            pulumi.set(__self__, "nat_variable", nat_variable)
        if next_hops is not None:
            pulumi.set(__self__, "next_hops", next_hops)
        if null0 is not None:
            pulumi.set(__self__, "null0", null0)
        if prefix is not None:
            pulumi.set(__self__, "prefix", prefix)
        if prefix_variable is not None:
            pulumi.set(__self__, "prefix_variable", prefix_variable)

    @_builtins.property
    @pulumi.getter
    def gateway(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Gateway
          - Choices: `nextHop`, `null0`, `nat`
        """
        return pulumi.get(self, "gateway")

    @gateway.setter
    def gateway(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "gateway", value)

    @_builtins.property
    @pulumi.getter
    def nat(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        IPv6 Nat, Attribute conditional on `gateway` being equal to `nat`
          - Choices: `NAT64`, `NAT66`
        """
        return pulumi.get(self, "nat")

    @nat.setter
    def nat(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "nat", value)

    @_builtins.property
    @pulumi.getter(name="natVariable")
    def nat_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name, Attribute conditional on `gateway` being equal to `nat`
        """
        return pulumi.get(self, "nat_variable")

    @nat_variable.setter
    def nat_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "nat_variable", value)

    @_builtins.property
    @pulumi.getter(name="nextHops")
    def next_hops(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['TransportWanVpnFeatureIpv6StaticRouteNextHopArgs']]]]:
        """
        IPv6 Route Gateway Next Hop, Attribute conditional on `gateway` being equal to `nextHop`
        """
        return pulumi.get(self, "next_hops")

    @next_hops.setter
    def next_hops(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['TransportWanVpnFeatureIpv6StaticRouteNextHopArgs']]]]):
        pulumi.set(self, "next_hops", value)

    @_builtins.property
    @pulumi.getter
    def null0(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        IPv6 Route Gateway Next Hop, Attribute conditional on `gateway` being equal to `null0`
        """
        return pulumi.get(self, "null0")

    @null0.setter
    def null0(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "null0", value)

    @_builtins.property
    @pulumi.getter
    def prefix(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Prefix
        """
        return pulumi.get(self, "prefix")

    @prefix.setter
    def prefix(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "prefix", value)

    @_builtins.property
    @pulumi.getter(name="prefixVariable")
    def prefix_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "prefix_variable")

    @prefix_variable.setter
    def prefix_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "prefix_variable", value)


if not MYPY:
    class TransportWanVpnFeatureIpv6StaticRouteNextHopArgsDict(TypedDict):
        address: NotRequired[pulumi.Input[_builtins.str]]
        """
        Address
        """
        address_variable: NotRequired[pulumi.Input[_builtins.str]]
        """
        Variable name
        """
        administrative_distance: NotRequired[pulumi.Input[_builtins.int]]
        """
        Administrative distance
          - Range: `1`-`254`
        """
        administrative_distance_variable: NotRequired[pulumi.Input[_builtins.str]]
        """
        Variable name
        """
elif False:
    TransportWanVpnFeatureIpv6StaticRouteNextHopArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class TransportWanVpnFeatureIpv6StaticRouteNextHopArgs:
    def __init__(__self__, *,
                 address: Optional[pulumi.Input[_builtins.str]] = None,
                 address_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 administrative_distance: Optional[pulumi.Input[_builtins.int]] = None,
                 administrative_distance_variable: Optional[pulumi.Input[_builtins.str]] = None):
        """
        :param pulumi.Input[_builtins.str] address: Address
        :param pulumi.Input[_builtins.str] address_variable: Variable name
        :param pulumi.Input[_builtins.int] administrative_distance: Administrative distance
                 - Range: `1`-`254`
        :param pulumi.Input[_builtins.str] administrative_distance_variable: Variable name
        """
        if address is not None:
            pulumi.set(__self__, "address", address)
        if address_variable is not None:
            pulumi.set(__self__, "address_variable", address_variable)
        if administrative_distance is not None:
            pulumi.set(__self__, "administrative_distance", administrative_distance)
        if administrative_distance_variable is not None:
            pulumi.set(__self__, "administrative_distance_variable", administrative_distance_variable)

    @_builtins.property
    @pulumi.getter
    def address(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Address
        """
        return pulumi.get(self, "address")

    @address.setter
    def address(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "address", value)

    @_builtins.property
    @pulumi.getter(name="addressVariable")
    def address_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "address_variable")

    @address_variable.setter
    def address_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "address_variable", value)

    @_builtins.property
    @pulumi.getter(name="administrativeDistance")
    def administrative_distance(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        Administrative distance
          - Range: `1`-`254`
        """
        return pulumi.get(self, "administrative_distance")

    @administrative_distance.setter
    def administrative_distance(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "administrative_distance", value)

    @_builtins.property
    @pulumi.getter(name="administrativeDistanceVariable")
    def administrative_distance_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "administrative_distance_variable")

    @administrative_distance_variable.setter
    def administrative_distance_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "administrative_distance_variable", value)


if not MYPY:
    class TransportWanVpnFeatureNat64V4PoolArgsDict(TypedDict):
        nat64_v4_pool_name: NotRequired[pulumi.Input[_builtins.str]]
        """
        NAT64 v4 Pool Name
        """
        nat64_v4_pool_name_variable: NotRequired[pulumi.Input[_builtins.str]]
        """
        Variable name
        """
        nat64_v4_pool_overload: NotRequired[pulumi.Input[_builtins.bool]]
        """
        NAT64 Overload
          - Default value: `false`
        """
        nat64_v4_pool_overload_variable: NotRequired[pulumi.Input[_builtins.str]]
        """
        Variable name
        """
        nat64_v4_pool_range_end: NotRequired[pulumi.Input[_builtins.str]]
        """
        NAT64 Pool Range End
        """
        nat64_v4_pool_range_end_variable: NotRequired[pulumi.Input[_builtins.str]]
        """
        Variable name
        """
        nat64_v4_pool_range_start: NotRequired[pulumi.Input[_builtins.str]]
        """
        NAT64 Pool Range Start
        """
        nat64_v4_pool_range_start_variable: NotRequired[pulumi.Input[_builtins.str]]
        """
        Variable name
        """
elif False:
    TransportWanVpnFeatureNat64V4PoolArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class TransportWanVpnFeatureNat64V4PoolArgs:
    def __init__(__self__, *,
                 nat64_v4_pool_name: Optional[pulumi.Input[_builtins.str]] = None,
                 nat64_v4_pool_name_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 nat64_v4_pool_overload: Optional[pulumi.Input[_builtins.bool]] = None,
                 nat64_v4_pool_overload_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 nat64_v4_pool_range_end: Optional[pulumi.Input[_builtins.str]] = None,
                 nat64_v4_pool_range_end_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 nat64_v4_pool_range_start: Optional[pulumi.Input[_builtins.str]] = None,
                 nat64_v4_pool_range_start_variable: Optional[pulumi.Input[_builtins.str]] = None):
        """
        :param pulumi.Input[_builtins.str] nat64_v4_pool_name: NAT64 v4 Pool Name
        :param pulumi.Input[_builtins.str] nat64_v4_pool_name_variable: Variable name
        :param pulumi.Input[_builtins.bool] nat64_v4_pool_overload: NAT64 Overload
                 - Default value: `false`
        :param pulumi.Input[_builtins.str] nat64_v4_pool_overload_variable: Variable name
        :param pulumi.Input[_builtins.str] nat64_v4_pool_range_end: NAT64 Pool Range End
        :param pulumi.Input[_builtins.str] nat64_v4_pool_range_end_variable: Variable name
        :param pulumi.Input[_builtins.str] nat64_v4_pool_range_start: NAT64 Pool Range Start
        :param pulumi.Input[_builtins.str] nat64_v4_pool_range_start_variable: Variable name
        """
        if nat64_v4_pool_name is not None:
            pulumi.set(__self__, "nat64_v4_pool_name", nat64_v4_pool_name)
        if nat64_v4_pool_name_variable is not None:
            pulumi.set(__self__, "nat64_v4_pool_name_variable", nat64_v4_pool_name_variable)
        if nat64_v4_pool_overload is not None:
            pulumi.set(__self__, "nat64_v4_pool_overload", nat64_v4_pool_overload)
        if nat64_v4_pool_overload_variable is not None:
            pulumi.set(__self__, "nat64_v4_pool_overload_variable", nat64_v4_pool_overload_variable)
        if nat64_v4_pool_range_end is not None:
            pulumi.set(__self__, "nat64_v4_pool_range_end", nat64_v4_pool_range_end)
        if nat64_v4_pool_range_end_variable is not None:
            pulumi.set(__self__, "nat64_v4_pool_range_end_variable", nat64_v4_pool_range_end_variable)
        if nat64_v4_pool_range_start is not None:
            pulumi.set(__self__, "nat64_v4_pool_range_start", nat64_v4_pool_range_start)
        if nat64_v4_pool_range_start_variable is not None:
            pulumi.set(__self__, "nat64_v4_pool_range_start_variable", nat64_v4_pool_range_start_variable)

    @_builtins.property
    @pulumi.getter(name="nat64V4PoolName")
    def nat64_v4_pool_name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        NAT64 v4 Pool Name
        """
        return pulumi.get(self, "nat64_v4_pool_name")

    @nat64_v4_pool_name.setter
    def nat64_v4_pool_name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "nat64_v4_pool_name", value)

    @_builtins.property
    @pulumi.getter(name="nat64V4PoolNameVariable")
    def nat64_v4_pool_name_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "nat64_v4_pool_name_variable")

    @nat64_v4_pool_name_variable.setter
    def nat64_v4_pool_name_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "nat64_v4_pool_name_variable", value)

    @_builtins.property
    @pulumi.getter(name="nat64V4PoolOverload")
    def nat64_v4_pool_overload(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        NAT64 Overload
          - Default value: `false`
        """
        return pulumi.get(self, "nat64_v4_pool_overload")

    @nat64_v4_pool_overload.setter
    def nat64_v4_pool_overload(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "nat64_v4_pool_overload", value)

    @_builtins.property
    @pulumi.getter(name="nat64V4PoolOverloadVariable")
    def nat64_v4_pool_overload_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "nat64_v4_pool_overload_variable")

    @nat64_v4_pool_overload_variable.setter
    def nat64_v4_pool_overload_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "nat64_v4_pool_overload_variable", value)

    @_builtins.property
    @pulumi.getter(name="nat64V4PoolRangeEnd")
    def nat64_v4_pool_range_end(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        NAT64 Pool Range End
        """
        return pulumi.get(self, "nat64_v4_pool_range_end")

    @nat64_v4_pool_range_end.setter
    def nat64_v4_pool_range_end(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "nat64_v4_pool_range_end", value)

    @_builtins.property
    @pulumi.getter(name="nat64V4PoolRangeEndVariable")
    def nat64_v4_pool_range_end_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "nat64_v4_pool_range_end_variable")

    @nat64_v4_pool_range_end_variable.setter
    def nat64_v4_pool_range_end_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "nat64_v4_pool_range_end_variable", value)

    @_builtins.property
    @pulumi.getter(name="nat64V4PoolRangeStart")
    def nat64_v4_pool_range_start(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        NAT64 Pool Range Start
        """
        return pulumi.get(self, "nat64_v4_pool_range_start")

    @nat64_v4_pool_range_start.setter
    def nat64_v4_pool_range_start(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "nat64_v4_pool_range_start", value)

    @_builtins.property
    @pulumi.getter(name="nat64V4PoolRangeStartVariable")
    def nat64_v4_pool_range_start_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "nat64_v4_pool_range_start_variable")

    @nat64_v4_pool_range_start_variable.setter
    def nat64_v4_pool_range_start_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "nat64_v4_pool_range_start_variable", value)


if not MYPY:
    class TransportWanVpnFeatureNewHostMappingArgsDict(TypedDict):
        host_name: NotRequired[pulumi.Input[_builtins.str]]
        """
        Hostname
        """
        host_name_variable: NotRequired[pulumi.Input[_builtins.str]]
        """
        Variable name
        """
        list_of_ip_addresses: NotRequired[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]
        """
        List of IP
        """
        list_of_ip_addresses_variable: NotRequired[pulumi.Input[_builtins.str]]
        """
        Variable name
        """
elif False:
    TransportWanVpnFeatureNewHostMappingArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class TransportWanVpnFeatureNewHostMappingArgs:
    def __init__(__self__, *,
                 host_name: Optional[pulumi.Input[_builtins.str]] = None,
                 host_name_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 list_of_ip_addresses: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 list_of_ip_addresses_variable: Optional[pulumi.Input[_builtins.str]] = None):
        """
        :param pulumi.Input[_builtins.str] host_name: Hostname
        :param pulumi.Input[_builtins.str] host_name_variable: Variable name
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] list_of_ip_addresses: List of IP
        :param pulumi.Input[_builtins.str] list_of_ip_addresses_variable: Variable name
        """
        if host_name is not None:
            pulumi.set(__self__, "host_name", host_name)
        if host_name_variable is not None:
            pulumi.set(__self__, "host_name_variable", host_name_variable)
        if list_of_ip_addresses is not None:
            pulumi.set(__self__, "list_of_ip_addresses", list_of_ip_addresses)
        if list_of_ip_addresses_variable is not None:
            pulumi.set(__self__, "list_of_ip_addresses_variable", list_of_ip_addresses_variable)

    @_builtins.property
    @pulumi.getter(name="hostName")
    def host_name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Hostname
        """
        return pulumi.get(self, "host_name")

    @host_name.setter
    def host_name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "host_name", value)

    @_builtins.property
    @pulumi.getter(name="hostNameVariable")
    def host_name_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "host_name_variable")

    @host_name_variable.setter
    def host_name_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "host_name_variable", value)

    @_builtins.property
    @pulumi.getter(name="listOfIpAddresses")
    def list_of_ip_addresses(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]:
        """
        List of IP
        """
        return pulumi.get(self, "list_of_ip_addresses")

    @list_of_ip_addresses.setter
    def list_of_ip_addresses(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "list_of_ip_addresses", value)

    @_builtins.property
    @pulumi.getter(name="listOfIpAddressesVariable")
    def list_of_ip_addresses_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "list_of_ip_addresses_variable")

    @list_of_ip_addresses_variable.setter
    def list_of_ip_addresses_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "list_of_ip_addresses_variable", value)


if not MYPY:
    class TransportWanVpnFeatureServiceArgsDict(TypedDict):
        service_type: NotRequired[pulumi.Input[_builtins.str]]
        """
        Service Type
          - Choices: `TE`
        """
elif False:
    TransportWanVpnFeatureServiceArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class TransportWanVpnFeatureServiceArgs:
    def __init__(__self__, *,
                 service_type: Optional[pulumi.Input[_builtins.str]] = None):
        """
        :param pulumi.Input[_builtins.str] service_type: Service Type
                 - Choices: `TE`
        """
        if service_type is not None:
            pulumi.set(__self__, "service_type", service_type)

    @_builtins.property
    @pulumi.getter(name="serviceType")
    def service_type(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Service Type
          - Choices: `TE`
        """
        return pulumi.get(self, "service_type")

    @service_type.setter
    def service_type(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "service_type", value)


if not MYPY:
    class TransportWanVpnInterfaceCellularFeatureArpArgsDict(TypedDict):
        ip_address: NotRequired[pulumi.Input[_builtins.str]]
        """
        IP V4 Address
        """
        ip_address_variable: NotRequired[pulumi.Input[_builtins.str]]
        """
        Variable name
        """
        mac_address: NotRequired[pulumi.Input[_builtins.str]]
        """
        MAC Address
        """
        mac_address_variable: NotRequired[pulumi.Input[_builtins.str]]
        """
        Variable name
        """
elif False:
    TransportWanVpnInterfaceCellularFeatureArpArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class TransportWanVpnInterfaceCellularFeatureArpArgs:
    def __init__(__self__, *,
                 ip_address: Optional[pulumi.Input[_builtins.str]] = None,
                 ip_address_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 mac_address: Optional[pulumi.Input[_builtins.str]] = None,
                 mac_address_variable: Optional[pulumi.Input[_builtins.str]] = None):
        """
        :param pulumi.Input[_builtins.str] ip_address: IP V4 Address
        :param pulumi.Input[_builtins.str] ip_address_variable: Variable name
        :param pulumi.Input[_builtins.str] mac_address: MAC Address
        :param pulumi.Input[_builtins.str] mac_address_variable: Variable name
        """
        if ip_address is not None:
            pulumi.set(__self__, "ip_address", ip_address)
        if ip_address_variable is not None:
            pulumi.set(__self__, "ip_address_variable", ip_address_variable)
        if mac_address is not None:
            pulumi.set(__self__, "mac_address", mac_address)
        if mac_address_variable is not None:
            pulumi.set(__self__, "mac_address_variable", mac_address_variable)

    @_builtins.property
    @pulumi.getter(name="ipAddress")
    def ip_address(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        IP V4 Address
        """
        return pulumi.get(self, "ip_address")

    @ip_address.setter
    def ip_address(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "ip_address", value)

    @_builtins.property
    @pulumi.getter(name="ipAddressVariable")
    def ip_address_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "ip_address_variable")

    @ip_address_variable.setter
    def ip_address_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "ip_address_variable", value)

    @_builtins.property
    @pulumi.getter(name="macAddress")
    def mac_address(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        MAC Address
        """
        return pulumi.get(self, "mac_address")

    @mac_address.setter
    def mac_address(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "mac_address", value)

    @_builtins.property
    @pulumi.getter(name="macAddressVariable")
    def mac_address_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "mac_address_variable")

    @mac_address_variable.setter
    def mac_address_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "mac_address_variable", value)


if not MYPY:
    class TransportWanVpnInterfaceCellularFeatureTunnelInterfaceEncapsulationArgsDict(TypedDict):
        encapsulation: NotRequired[pulumi.Input[_builtins.str]]
        """
        Encapsulation
          - Choices: `gre`, `ipsec`
        """
        preference: NotRequired[pulumi.Input[_builtins.int]]
        """
        Set preference for TLOC
          - Range: `0`-`4294967295`
        """
        preference_variable: NotRequired[pulumi.Input[_builtins.str]]
        """
        Variable name
        """
        weight: NotRequired[pulumi.Input[_builtins.int]]
        """
        Set weight for TLOC
          - Range: `1`-`255`
          - Default value: `1`
        """
        weight_variable: NotRequired[pulumi.Input[_builtins.str]]
        """
        Variable name
        """
elif False:
    TransportWanVpnInterfaceCellularFeatureTunnelInterfaceEncapsulationArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class TransportWanVpnInterfaceCellularFeatureTunnelInterfaceEncapsulationArgs:
    def __init__(__self__, *,
                 encapsulation: Optional[pulumi.Input[_builtins.str]] = None,
                 preference: Optional[pulumi.Input[_builtins.int]] = None,
                 preference_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 weight: Optional[pulumi.Input[_builtins.int]] = None,
                 weight_variable: Optional[pulumi.Input[_builtins.str]] = None):
        """
        :param pulumi.Input[_builtins.str] encapsulation: Encapsulation
                 - Choices: `gre`, `ipsec`
        :param pulumi.Input[_builtins.int] preference: Set preference for TLOC
                 - Range: `0`-`4294967295`
        :param pulumi.Input[_builtins.str] preference_variable: Variable name
        :param pulumi.Input[_builtins.int] weight: Set weight for TLOC
                 - Range: `1`-`255`
                 - Default value: `1`
        :param pulumi.Input[_builtins.str] weight_variable: Variable name
        """
        if encapsulation is not None:
            pulumi.set(__self__, "encapsulation", encapsulation)
        if preference is not None:
            pulumi.set(__self__, "preference", preference)
        if preference_variable is not None:
            pulumi.set(__self__, "preference_variable", preference_variable)
        if weight is not None:
            pulumi.set(__self__, "weight", weight)
        if weight_variable is not None:
            pulumi.set(__self__, "weight_variable", weight_variable)

    @_builtins.property
    @pulumi.getter
    def encapsulation(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Encapsulation
          - Choices: `gre`, `ipsec`
        """
        return pulumi.get(self, "encapsulation")

    @encapsulation.setter
    def encapsulation(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "encapsulation", value)

    @_builtins.property
    @pulumi.getter
    def preference(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        Set preference for TLOC
          - Range: `0`-`4294967295`
        """
        return pulumi.get(self, "preference")

    @preference.setter
    def preference(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "preference", value)

    @_builtins.property
    @pulumi.getter(name="preferenceVariable")
    def preference_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "preference_variable")

    @preference_variable.setter
    def preference_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "preference_variable", value)

    @_builtins.property
    @pulumi.getter
    def weight(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        Set weight for TLOC
          - Range: `1`-`255`
          - Default value: `1`
        """
        return pulumi.get(self, "weight")

    @weight.setter
    def weight(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "weight", value)

    @_builtins.property
    @pulumi.getter(name="weightVariable")
    def weight_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "weight_variable")

    @weight_variable.setter
    def weight_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "weight_variable", value)


if not MYPY:
    class TransportWanVpnInterfaceEthernetFeatureArpArgsDict(TypedDict):
        ip_address: NotRequired[pulumi.Input[_builtins.str]]
        """
        IP V4 Address
        """
        ip_address_variable: NotRequired[pulumi.Input[_builtins.str]]
        """
        Variable name
        """
        mac_address: NotRequired[pulumi.Input[_builtins.str]]
        """
        MAC Address
        """
        mac_address_variable: NotRequired[pulumi.Input[_builtins.str]]
        """
        Variable name
        """
elif False:
    TransportWanVpnInterfaceEthernetFeatureArpArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class TransportWanVpnInterfaceEthernetFeatureArpArgs:
    def __init__(__self__, *,
                 ip_address: Optional[pulumi.Input[_builtins.str]] = None,
                 ip_address_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 mac_address: Optional[pulumi.Input[_builtins.str]] = None,
                 mac_address_variable: Optional[pulumi.Input[_builtins.str]] = None):
        """
        :param pulumi.Input[_builtins.str] ip_address: IP V4 Address
        :param pulumi.Input[_builtins.str] ip_address_variable: Variable name
        :param pulumi.Input[_builtins.str] mac_address: MAC Address
        :param pulumi.Input[_builtins.str] mac_address_variable: Variable name
        """
        if ip_address is not None:
            pulumi.set(__self__, "ip_address", ip_address)
        if ip_address_variable is not None:
            pulumi.set(__self__, "ip_address_variable", ip_address_variable)
        if mac_address is not None:
            pulumi.set(__self__, "mac_address", mac_address)
        if mac_address_variable is not None:
            pulumi.set(__self__, "mac_address_variable", mac_address_variable)

    @_builtins.property
    @pulumi.getter(name="ipAddress")
    def ip_address(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        IP V4 Address
        """
        return pulumi.get(self, "ip_address")

    @ip_address.setter
    def ip_address(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "ip_address", value)

    @_builtins.property
    @pulumi.getter(name="ipAddressVariable")
    def ip_address_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "ip_address_variable")

    @ip_address_variable.setter
    def ip_address_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "ip_address_variable", value)

    @_builtins.property
    @pulumi.getter(name="macAddress")
    def mac_address(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        MAC Address
        """
        return pulumi.get(self, "mac_address")

    @mac_address.setter
    def mac_address(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "mac_address", value)

    @_builtins.property
    @pulumi.getter(name="macAddressVariable")
    def mac_address_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "mac_address_variable")

    @mac_address_variable.setter
    def mac_address_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "mac_address_variable", value)


if not MYPY:
    class TransportWanVpnInterfaceEthernetFeatureIpv4SecondaryAddressArgsDict(TypedDict):
        address: NotRequired[pulumi.Input[_builtins.str]]
        """
        IpV4 Address
        """
        address_variable: NotRequired[pulumi.Input[_builtins.str]]
        """
        Variable name
        """
        subnet_mask: NotRequired[pulumi.Input[_builtins.str]]
        """
        Subnet Mask
          - Choices: `255.255.255.255`, `255.255.255.254`, `255.255.255.252`, `255.255.255.248`, `255.255.255.240`, `255.255.255.224`, `255.255.255.192`, `255.255.255.128`, `255.255.255.0`, `255.255.254.0`, `255.255.252.0`, `255.255.248.0`, `255.255.240.0`, `255.255.224.0`, `255.255.192.0`, `255.255.128.0`, `255.255.0.0`, `255.254.0.0`, `255.252.0.0`, `255.240.0.0`, `255.224.0.0`, `255.192.0.0`, `255.128.0.0`, `255.0.0.0`, `254.0.0.0`, `252.0.0.0`, `248.0.0.0`, `240.0.0.0`, `224.0.0.0`, `192.0.0.0`, `128.0.0.0`, `0.0.0.0`
        """
        subnet_mask_variable: NotRequired[pulumi.Input[_builtins.str]]
        """
        Variable name
        """
elif False:
    TransportWanVpnInterfaceEthernetFeatureIpv4SecondaryAddressArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class TransportWanVpnInterfaceEthernetFeatureIpv4SecondaryAddressArgs:
    def __init__(__self__, *,
                 address: Optional[pulumi.Input[_builtins.str]] = None,
                 address_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 subnet_mask: Optional[pulumi.Input[_builtins.str]] = None,
                 subnet_mask_variable: Optional[pulumi.Input[_builtins.str]] = None):
        """
        :param pulumi.Input[_builtins.str] address: IpV4 Address
        :param pulumi.Input[_builtins.str] address_variable: Variable name
        :param pulumi.Input[_builtins.str] subnet_mask: Subnet Mask
                 - Choices: `255.255.255.255`, `255.255.255.254`, `255.255.255.252`, `255.255.255.248`, `255.255.255.240`, `255.255.255.224`, `255.255.255.192`, `255.255.255.128`, `255.255.255.0`, `255.255.254.0`, `255.255.252.0`, `255.255.248.0`, `255.255.240.0`, `255.255.224.0`, `255.255.192.0`, `255.255.128.0`, `255.255.0.0`, `255.254.0.0`, `255.252.0.0`, `255.240.0.0`, `255.224.0.0`, `255.192.0.0`, `255.128.0.0`, `255.0.0.0`, `254.0.0.0`, `252.0.0.0`, `248.0.0.0`, `240.0.0.0`, `224.0.0.0`, `192.0.0.0`, `128.0.0.0`, `0.0.0.0`
        :param pulumi.Input[_builtins.str] subnet_mask_variable: Variable name
        """
        if address is not None:
            pulumi.set(__self__, "address", address)
        if address_variable is not None:
            pulumi.set(__self__, "address_variable", address_variable)
        if subnet_mask is not None:
            pulumi.set(__self__, "subnet_mask", subnet_mask)
        if subnet_mask_variable is not None:
            pulumi.set(__self__, "subnet_mask_variable", subnet_mask_variable)

    @_builtins.property
    @pulumi.getter
    def address(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        IpV4 Address
        """
        return pulumi.get(self, "address")

    @address.setter
    def address(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "address", value)

    @_builtins.property
    @pulumi.getter(name="addressVariable")
    def address_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "address_variable")

    @address_variable.setter
    def address_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "address_variable", value)

    @_builtins.property
    @pulumi.getter(name="subnetMask")
    def subnet_mask(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Subnet Mask
          - Choices: `255.255.255.255`, `255.255.255.254`, `255.255.255.252`, `255.255.255.248`, `255.255.255.240`, `255.255.255.224`, `255.255.255.192`, `255.255.255.128`, `255.255.255.0`, `255.255.254.0`, `255.255.252.0`, `255.255.248.0`, `255.255.240.0`, `255.255.224.0`, `255.255.192.0`, `255.255.128.0`, `255.255.0.0`, `255.254.0.0`, `255.252.0.0`, `255.240.0.0`, `255.224.0.0`, `255.192.0.0`, `255.128.0.0`, `255.0.0.0`, `254.0.0.0`, `252.0.0.0`, `248.0.0.0`, `240.0.0.0`, `224.0.0.0`, `192.0.0.0`, `128.0.0.0`, `0.0.0.0`
        """
        return pulumi.get(self, "subnet_mask")

    @subnet_mask.setter
    def subnet_mask(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "subnet_mask", value)

    @_builtins.property
    @pulumi.getter(name="subnetMaskVariable")
    def subnet_mask_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "subnet_mask_variable")

    @subnet_mask_variable.setter
    def subnet_mask_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "subnet_mask_variable", value)


if not MYPY:
    class TransportWanVpnInterfaceEthernetFeatureIpv6DhcpSecondaryAddressArgsDict(TypedDict):
        address: NotRequired[pulumi.Input[_builtins.str]]
        """
        IPv6 Address Secondary
        """
        address_variable: NotRequired[pulumi.Input[_builtins.str]]
        """
        Variable name
        """
elif False:
    TransportWanVpnInterfaceEthernetFeatureIpv6DhcpSecondaryAddressArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class TransportWanVpnInterfaceEthernetFeatureIpv6DhcpSecondaryAddressArgs:
    def __init__(__self__, *,
                 address: Optional[pulumi.Input[_builtins.str]] = None,
                 address_variable: Optional[pulumi.Input[_builtins.str]] = None):
        """
        :param pulumi.Input[_builtins.str] address: IPv6 Address Secondary
        :param pulumi.Input[_builtins.str] address_variable: Variable name
        """
        if address is not None:
            pulumi.set(__self__, "address", address)
        if address_variable is not None:
            pulumi.set(__self__, "address_variable", address_variable)

    @_builtins.property
    @pulumi.getter
    def address(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        IPv6 Address Secondary
        """
        return pulumi.get(self, "address")

    @address.setter
    def address(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "address", value)

    @_builtins.property
    @pulumi.getter(name="addressVariable")
    def address_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "address_variable")

    @address_variable.setter
    def address_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "address_variable", value)


if not MYPY:
    class TransportWanVpnInterfaceEthernetFeatureIpv6SecondaryAddressArgsDict(TypedDict):
        address: NotRequired[pulumi.Input[_builtins.str]]
        """
        IPv6 Address Secondary
        """
        address_variable: NotRequired[pulumi.Input[_builtins.str]]
        """
        Variable name
        """
elif False:
    TransportWanVpnInterfaceEthernetFeatureIpv6SecondaryAddressArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class TransportWanVpnInterfaceEthernetFeatureIpv6SecondaryAddressArgs:
    def __init__(__self__, *,
                 address: Optional[pulumi.Input[_builtins.str]] = None,
                 address_variable: Optional[pulumi.Input[_builtins.str]] = None):
        """
        :param pulumi.Input[_builtins.str] address: IPv6 Address Secondary
        :param pulumi.Input[_builtins.str] address_variable: Variable name
        """
        if address is not None:
            pulumi.set(__self__, "address", address)
        if address_variable is not None:
            pulumi.set(__self__, "address_variable", address_variable)

    @_builtins.property
    @pulumi.getter
    def address(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        IPv6 Address Secondary
        """
        return pulumi.get(self, "address")

    @address.setter
    def address(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "address", value)

    @_builtins.property
    @pulumi.getter(name="addressVariable")
    def address_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "address_variable")

    @address_variable.setter
    def address_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "address_variable", value)


if not MYPY:
    class TransportWanVpnInterfaceEthernetFeatureNewStaticNatArgsDict(TypedDict):
        direction: NotRequired[pulumi.Input[_builtins.str]]
        """
        Direction of static NAT translation
          - Choices: `inside`, `outside`
          - Default value: `inside`
        """
        source_ip: NotRequired[pulumi.Input[_builtins.str]]
        """
        Source IP address to be translated
        """
        source_ip_variable: NotRequired[pulumi.Input[_builtins.str]]
        """
        Variable name
        """
        source_vpn: NotRequired[pulumi.Input[_builtins.int]]
        """
        Source VPN ID
          - Range: `0`-`65530`
          - Default value: `0`
        """
        source_vpn_variable: NotRequired[pulumi.Input[_builtins.str]]
        """
        Variable name
        """
        translated_ip: NotRequired[pulumi.Input[_builtins.str]]
        """
        Statically translated source IP address
        """
        translated_ip_variable: NotRequired[pulumi.Input[_builtins.str]]
        """
        Variable name
        """
elif False:
    TransportWanVpnInterfaceEthernetFeatureNewStaticNatArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class TransportWanVpnInterfaceEthernetFeatureNewStaticNatArgs:
    def __init__(__self__, *,
                 direction: Optional[pulumi.Input[_builtins.str]] = None,
                 source_ip: Optional[pulumi.Input[_builtins.str]] = None,
                 source_ip_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 source_vpn: Optional[pulumi.Input[_builtins.int]] = None,
                 source_vpn_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 translated_ip: Optional[pulumi.Input[_builtins.str]] = None,
                 translated_ip_variable: Optional[pulumi.Input[_builtins.str]] = None):
        """
        :param pulumi.Input[_builtins.str] direction: Direction of static NAT translation
                 - Choices: `inside`, `outside`
                 - Default value: `inside`
        :param pulumi.Input[_builtins.str] source_ip: Source IP address to be translated
        :param pulumi.Input[_builtins.str] source_ip_variable: Variable name
        :param pulumi.Input[_builtins.int] source_vpn: Source VPN ID
                 - Range: `0`-`65530`
                 - Default value: `0`
        :param pulumi.Input[_builtins.str] source_vpn_variable: Variable name
        :param pulumi.Input[_builtins.str] translated_ip: Statically translated source IP address
        :param pulumi.Input[_builtins.str] translated_ip_variable: Variable name
        """
        if direction is not None:
            pulumi.set(__self__, "direction", direction)
        if source_ip is not None:
            pulumi.set(__self__, "source_ip", source_ip)
        if source_ip_variable is not None:
            pulumi.set(__self__, "source_ip_variable", source_ip_variable)
        if source_vpn is not None:
            pulumi.set(__self__, "source_vpn", source_vpn)
        if source_vpn_variable is not None:
            pulumi.set(__self__, "source_vpn_variable", source_vpn_variable)
        if translated_ip is not None:
            pulumi.set(__self__, "translated_ip", translated_ip)
        if translated_ip_variable is not None:
            pulumi.set(__self__, "translated_ip_variable", translated_ip_variable)

    @_builtins.property
    @pulumi.getter
    def direction(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Direction of static NAT translation
          - Choices: `inside`, `outside`
          - Default value: `inside`
        """
        return pulumi.get(self, "direction")

    @direction.setter
    def direction(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "direction", value)

    @_builtins.property
    @pulumi.getter(name="sourceIp")
    def source_ip(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Source IP address to be translated
        """
        return pulumi.get(self, "source_ip")

    @source_ip.setter
    def source_ip(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "source_ip", value)

    @_builtins.property
    @pulumi.getter(name="sourceIpVariable")
    def source_ip_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "source_ip_variable")

    @source_ip_variable.setter
    def source_ip_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "source_ip_variable", value)

    @_builtins.property
    @pulumi.getter(name="sourceVpn")
    def source_vpn(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        Source VPN ID
          - Range: `0`-`65530`
          - Default value: `0`
        """
        return pulumi.get(self, "source_vpn")

    @source_vpn.setter
    def source_vpn(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "source_vpn", value)

    @_builtins.property
    @pulumi.getter(name="sourceVpnVariable")
    def source_vpn_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "source_vpn_variable")

    @source_vpn_variable.setter
    def source_vpn_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "source_vpn_variable", value)

    @_builtins.property
    @pulumi.getter(name="translatedIp")
    def translated_ip(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Statically translated source IP address
        """
        return pulumi.get(self, "translated_ip")

    @translated_ip.setter
    def translated_ip(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "translated_ip", value)

    @_builtins.property
    @pulumi.getter(name="translatedIpVariable")
    def translated_ip_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "translated_ip_variable")

    @translated_ip_variable.setter
    def translated_ip_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "translated_ip_variable", value)


if not MYPY:
    class TransportWanVpnInterfaceEthernetFeatureStaticNat66ArgsDict(TypedDict):
        source_prefix: NotRequired[pulumi.Input[_builtins.str]]
        """
        Source Prefix
        """
        source_prefix_variable: NotRequired[pulumi.Input[_builtins.str]]
        """
        Variable name
        """
        source_vpn_id: NotRequired[pulumi.Input[_builtins.int]]
        """
        Source VPN ID
          - Range: `0`-`65530`
        """
        source_vpn_id_variable: NotRequired[pulumi.Input[_builtins.str]]
        """
        Variable name
        """
        translated_source_prefix: NotRequired[pulumi.Input[_builtins.str]]
        """
        Translated Source Prefix
        """
        translated_source_prefix_variable: NotRequired[pulumi.Input[_builtins.str]]
        """
        Variable name
        """
elif False:
    TransportWanVpnInterfaceEthernetFeatureStaticNat66ArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class TransportWanVpnInterfaceEthernetFeatureStaticNat66Args:
    def __init__(__self__, *,
                 source_prefix: Optional[pulumi.Input[_builtins.str]] = None,
                 source_prefix_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 source_vpn_id: Optional[pulumi.Input[_builtins.int]] = None,
                 source_vpn_id_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 translated_source_prefix: Optional[pulumi.Input[_builtins.str]] = None,
                 translated_source_prefix_variable: Optional[pulumi.Input[_builtins.str]] = None):
        """
        :param pulumi.Input[_builtins.str] source_prefix: Source Prefix
        :param pulumi.Input[_builtins.str] source_prefix_variable: Variable name
        :param pulumi.Input[_builtins.int] source_vpn_id: Source VPN ID
                 - Range: `0`-`65530`
        :param pulumi.Input[_builtins.str] source_vpn_id_variable: Variable name
        :param pulumi.Input[_builtins.str] translated_source_prefix: Translated Source Prefix
        :param pulumi.Input[_builtins.str] translated_source_prefix_variable: Variable name
        """
        if source_prefix is not None:
            pulumi.set(__self__, "source_prefix", source_prefix)
        if source_prefix_variable is not None:
            pulumi.set(__self__, "source_prefix_variable", source_prefix_variable)
        if source_vpn_id is not None:
            pulumi.set(__self__, "source_vpn_id", source_vpn_id)
        if source_vpn_id_variable is not None:
            pulumi.set(__self__, "source_vpn_id_variable", source_vpn_id_variable)
        if translated_source_prefix is not None:
            pulumi.set(__self__, "translated_source_prefix", translated_source_prefix)
        if translated_source_prefix_variable is not None:
            pulumi.set(__self__, "translated_source_prefix_variable", translated_source_prefix_variable)

    @_builtins.property
    @pulumi.getter(name="sourcePrefix")
    def source_prefix(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Source Prefix
        """
        return pulumi.get(self, "source_prefix")

    @source_prefix.setter
    def source_prefix(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "source_prefix", value)

    @_builtins.property
    @pulumi.getter(name="sourcePrefixVariable")
    def source_prefix_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "source_prefix_variable")

    @source_prefix_variable.setter
    def source_prefix_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "source_prefix_variable", value)

    @_builtins.property
    @pulumi.getter(name="sourceVpnId")
    def source_vpn_id(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        Source VPN ID
          - Range: `0`-`65530`
        """
        return pulumi.get(self, "source_vpn_id")

    @source_vpn_id.setter
    def source_vpn_id(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "source_vpn_id", value)

    @_builtins.property
    @pulumi.getter(name="sourceVpnIdVariable")
    def source_vpn_id_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "source_vpn_id_variable")

    @source_vpn_id_variable.setter
    def source_vpn_id_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "source_vpn_id_variable", value)

    @_builtins.property
    @pulumi.getter(name="translatedSourcePrefix")
    def translated_source_prefix(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Translated Source Prefix
        """
        return pulumi.get(self, "translated_source_prefix")

    @translated_source_prefix.setter
    def translated_source_prefix(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "translated_source_prefix", value)

    @_builtins.property
    @pulumi.getter(name="translatedSourcePrefixVariable")
    def translated_source_prefix_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "translated_source_prefix_variable")

    @translated_source_prefix_variable.setter
    def translated_source_prefix_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "translated_source_prefix_variable", value)


if not MYPY:
    class TransportWanVpnInterfaceEthernetFeatureTunnelInterfaceEncapsulationArgsDict(TypedDict):
        encapsulation: NotRequired[pulumi.Input[_builtins.str]]
        """
        Encapsulation
          - Choices: `gre`, `ipsec`
        """
        preference: NotRequired[pulumi.Input[_builtins.int]]
        """
        Set preference for TLOC
          - Range: `0`-`4294967295`
        """
        preference_variable: NotRequired[pulumi.Input[_builtins.str]]
        """
        Variable name
        """
        weight: NotRequired[pulumi.Input[_builtins.int]]
        """
        Set weight for TLOC
          - Range: `1`-`255`
          - Default value: `1`
        """
        weight_variable: NotRequired[pulumi.Input[_builtins.str]]
        """
        Variable name
        """
elif False:
    TransportWanVpnInterfaceEthernetFeatureTunnelInterfaceEncapsulationArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class TransportWanVpnInterfaceEthernetFeatureTunnelInterfaceEncapsulationArgs:
    def __init__(__self__, *,
                 encapsulation: Optional[pulumi.Input[_builtins.str]] = None,
                 preference: Optional[pulumi.Input[_builtins.int]] = None,
                 preference_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 weight: Optional[pulumi.Input[_builtins.int]] = None,
                 weight_variable: Optional[pulumi.Input[_builtins.str]] = None):
        """
        :param pulumi.Input[_builtins.str] encapsulation: Encapsulation
                 - Choices: `gre`, `ipsec`
        :param pulumi.Input[_builtins.int] preference: Set preference for TLOC
                 - Range: `0`-`4294967295`
        :param pulumi.Input[_builtins.str] preference_variable: Variable name
        :param pulumi.Input[_builtins.int] weight: Set weight for TLOC
                 - Range: `1`-`255`
                 - Default value: `1`
        :param pulumi.Input[_builtins.str] weight_variable: Variable name
        """
        if encapsulation is not None:
            pulumi.set(__self__, "encapsulation", encapsulation)
        if preference is not None:
            pulumi.set(__self__, "preference", preference)
        if preference_variable is not None:
            pulumi.set(__self__, "preference_variable", preference_variable)
        if weight is not None:
            pulumi.set(__self__, "weight", weight)
        if weight_variable is not None:
            pulumi.set(__self__, "weight_variable", weight_variable)

    @_builtins.property
    @pulumi.getter
    def encapsulation(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Encapsulation
          - Choices: `gre`, `ipsec`
        """
        return pulumi.get(self, "encapsulation")

    @encapsulation.setter
    def encapsulation(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "encapsulation", value)

    @_builtins.property
    @pulumi.getter
    def preference(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        Set preference for TLOC
          - Range: `0`-`4294967295`
        """
        return pulumi.get(self, "preference")

    @preference.setter
    def preference(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "preference", value)

    @_builtins.property
    @pulumi.getter(name="preferenceVariable")
    def preference_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "preference_variable")

    @preference_variable.setter
    def preference_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "preference_variable", value)

    @_builtins.property
    @pulumi.getter
    def weight(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        Set weight for TLOC
          - Range: `1`-`255`
          - Default value: `1`
        """
        return pulumi.get(self, "weight")

    @weight.setter
    def weight(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "weight", value)

    @_builtins.property
    @pulumi.getter(name="weightVariable")
    def weight_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "weight_variable")

    @weight_variable.setter
    def weight_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "weight_variable", value)


if not MYPY:
    class TransportWanVpnInterfaceT1E1SerialFeatureTunnelInterfaceEncapsulationArgsDict(TypedDict):
        encapsulation: NotRequired[pulumi.Input[_builtins.str]]
        """
        Encapsulation
          - Choices: `gre`, `ipsec`
        """
        preference: NotRequired[pulumi.Input[_builtins.int]]
        """
        Set preference for TLOC
          - Range: `0`-`4294967295`
        """
        preference_variable: NotRequired[pulumi.Input[_builtins.str]]
        """
        Variable name
        """
        weight: NotRequired[pulumi.Input[_builtins.int]]
        """
        Set weight for TLOC
          - Range: `1`-`255`
          - Default value: `1`
        """
        weight_variable: NotRequired[pulumi.Input[_builtins.str]]
        """
        Variable name
        """
elif False:
    TransportWanVpnInterfaceT1E1SerialFeatureTunnelInterfaceEncapsulationArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class TransportWanVpnInterfaceT1E1SerialFeatureTunnelInterfaceEncapsulationArgs:
    def __init__(__self__, *,
                 encapsulation: Optional[pulumi.Input[_builtins.str]] = None,
                 preference: Optional[pulumi.Input[_builtins.int]] = None,
                 preference_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 weight: Optional[pulumi.Input[_builtins.int]] = None,
                 weight_variable: Optional[pulumi.Input[_builtins.str]] = None):
        """
        :param pulumi.Input[_builtins.str] encapsulation: Encapsulation
                 - Choices: `gre`, `ipsec`
        :param pulumi.Input[_builtins.int] preference: Set preference for TLOC
                 - Range: `0`-`4294967295`
        :param pulumi.Input[_builtins.str] preference_variable: Variable name
        :param pulumi.Input[_builtins.int] weight: Set weight for TLOC
                 - Range: `1`-`255`
                 - Default value: `1`
        :param pulumi.Input[_builtins.str] weight_variable: Variable name
        """
        if encapsulation is not None:
            pulumi.set(__self__, "encapsulation", encapsulation)
        if preference is not None:
            pulumi.set(__self__, "preference", preference)
        if preference_variable is not None:
            pulumi.set(__self__, "preference_variable", preference_variable)
        if weight is not None:
            pulumi.set(__self__, "weight", weight)
        if weight_variable is not None:
            pulumi.set(__self__, "weight_variable", weight_variable)

    @_builtins.property
    @pulumi.getter
    def encapsulation(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Encapsulation
          - Choices: `gre`, `ipsec`
        """
        return pulumi.get(self, "encapsulation")

    @encapsulation.setter
    def encapsulation(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "encapsulation", value)

    @_builtins.property
    @pulumi.getter
    def preference(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        Set preference for TLOC
          - Range: `0`-`4294967295`
        """
        return pulumi.get(self, "preference")

    @preference.setter
    def preference(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "preference", value)

    @_builtins.property
    @pulumi.getter(name="preferenceVariable")
    def preference_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "preference_variable")

    @preference_variable.setter
    def preference_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "preference_variable", value)

    @_builtins.property
    @pulumi.getter
    def weight(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        Set weight for TLOC
          - Range: `1`-`255`
          - Default value: `1`
        """
        return pulumi.get(self, "weight")

    @weight.setter
    def weight(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "weight", value)

    @_builtins.property
    @pulumi.getter(name="weightVariable")
    def weight_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "weight_variable")

    @weight_variable.setter
    def weight_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "weight_variable", value)


if not MYPY:
    class UrlFilteringPolicyDefinitionLoggingArgsDict(TypedDict):
        external_syslog_server_ip: NotRequired[pulumi.Input[_builtins.str]]
        """
        External Syslog Server IP
        """
        external_syslog_server_vpn: NotRequired[pulumi.Input[_builtins.str]]
        """
        External Syslog Server VPN
        """
elif False:
    UrlFilteringPolicyDefinitionLoggingArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class UrlFilteringPolicyDefinitionLoggingArgs:
    def __init__(__self__, *,
                 external_syslog_server_ip: Optional[pulumi.Input[_builtins.str]] = None,
                 external_syslog_server_vpn: Optional[pulumi.Input[_builtins.str]] = None):
        """
        :param pulumi.Input[_builtins.str] external_syslog_server_ip: External Syslog Server IP
        :param pulumi.Input[_builtins.str] external_syslog_server_vpn: External Syslog Server VPN
        """
        if external_syslog_server_ip is not None:
            pulumi.set(__self__, "external_syslog_server_ip", external_syslog_server_ip)
        if external_syslog_server_vpn is not None:
            pulumi.set(__self__, "external_syslog_server_vpn", external_syslog_server_vpn)

    @_builtins.property
    @pulumi.getter(name="externalSyslogServerIp")
    def external_syslog_server_ip(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        External Syslog Server IP
        """
        return pulumi.get(self, "external_syslog_server_ip")

    @external_syslog_server_ip.setter
    def external_syslog_server_ip(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "external_syslog_server_ip", value)

    @_builtins.property
    @pulumi.getter(name="externalSyslogServerVpn")
    def external_syslog_server_vpn(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        External Syslog Server VPN
        """
        return pulumi.get(self, "external_syslog_server_vpn")

    @external_syslog_server_vpn.setter
    def external_syslog_server_vpn(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "external_syslog_server_vpn", value)


if not MYPY:
    class VpnInterfaceCellularFeatureTemplateIpv4AccessListArgsDict(TypedDict):
        acl_name: NotRequired[pulumi.Input[_builtins.str]]
        """
        Name of access list
        """
        acl_name_variable: NotRequired[pulumi.Input[_builtins.str]]
        """
        Variable name
        """
        direction: NotRequired[pulumi.Input[_builtins.str]]
        """
        Direction
          - Choices: `in`, `out`
        """
        optional: NotRequired[pulumi.Input[_builtins.bool]]
        """
        Indicates if list item is considered optional.
        """
elif False:
    VpnInterfaceCellularFeatureTemplateIpv4AccessListArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class VpnInterfaceCellularFeatureTemplateIpv4AccessListArgs:
    def __init__(__self__, *,
                 acl_name: Optional[pulumi.Input[_builtins.str]] = None,
                 acl_name_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 direction: Optional[pulumi.Input[_builtins.str]] = None,
                 optional: Optional[pulumi.Input[_builtins.bool]] = None):
        """
        :param pulumi.Input[_builtins.str] acl_name: Name of access list
        :param pulumi.Input[_builtins.str] acl_name_variable: Variable name
        :param pulumi.Input[_builtins.str] direction: Direction
                 - Choices: `in`, `out`
        :param pulumi.Input[_builtins.bool] optional: Indicates if list item is considered optional.
        """
        if acl_name is not None:
            pulumi.set(__self__, "acl_name", acl_name)
        if acl_name_variable is not None:
            pulumi.set(__self__, "acl_name_variable", acl_name_variable)
        if direction is not None:
            pulumi.set(__self__, "direction", direction)
        if optional is not None:
            pulumi.set(__self__, "optional", optional)

    @_builtins.property
    @pulumi.getter(name="aclName")
    def acl_name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Name of access list
        """
        return pulumi.get(self, "acl_name")

    @acl_name.setter
    def acl_name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "acl_name", value)

    @_builtins.property
    @pulumi.getter(name="aclNameVariable")
    def acl_name_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "acl_name_variable")

    @acl_name_variable.setter
    def acl_name_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "acl_name_variable", value)

    @_builtins.property
    @pulumi.getter
    def direction(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Direction
          - Choices: `in`, `out`
        """
        return pulumi.get(self, "direction")

    @direction.setter
    def direction(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "direction", value)

    @_builtins.property
    @pulumi.getter
    def optional(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Indicates if list item is considered optional.
        """
        return pulumi.get(self, "optional")

    @optional.setter
    def optional(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "optional", value)


if not MYPY:
    class VpnInterfaceCellularFeatureTemplateIpv6AccessListArgsDict(TypedDict):
        acl_name: NotRequired[pulumi.Input[_builtins.str]]
        """
        Name of access list
        """
        acl_name_variable: NotRequired[pulumi.Input[_builtins.str]]
        """
        Variable name
        """
        direction: NotRequired[pulumi.Input[_builtins.str]]
        """
        Direction
          - Choices: `in`, `out`
        """
        optional: NotRequired[pulumi.Input[_builtins.bool]]
        """
        Indicates if list item is considered optional.
        """
elif False:
    VpnInterfaceCellularFeatureTemplateIpv6AccessListArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class VpnInterfaceCellularFeatureTemplateIpv6AccessListArgs:
    def __init__(__self__, *,
                 acl_name: Optional[pulumi.Input[_builtins.str]] = None,
                 acl_name_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 direction: Optional[pulumi.Input[_builtins.str]] = None,
                 optional: Optional[pulumi.Input[_builtins.bool]] = None):
        """
        :param pulumi.Input[_builtins.str] acl_name: Name of access list
        :param pulumi.Input[_builtins.str] acl_name_variable: Variable name
        :param pulumi.Input[_builtins.str] direction: Direction
                 - Choices: `in`, `out`
        :param pulumi.Input[_builtins.bool] optional: Indicates if list item is considered optional.
        """
        if acl_name is not None:
            pulumi.set(__self__, "acl_name", acl_name)
        if acl_name_variable is not None:
            pulumi.set(__self__, "acl_name_variable", acl_name_variable)
        if direction is not None:
            pulumi.set(__self__, "direction", direction)
        if optional is not None:
            pulumi.set(__self__, "optional", optional)

    @_builtins.property
    @pulumi.getter(name="aclName")
    def acl_name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Name of access list
        """
        return pulumi.get(self, "acl_name")

    @acl_name.setter
    def acl_name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "acl_name", value)

    @_builtins.property
    @pulumi.getter(name="aclNameVariable")
    def acl_name_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "acl_name_variable")

    @acl_name_variable.setter
    def acl_name_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "acl_name_variable", value)

    @_builtins.property
    @pulumi.getter
    def direction(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Direction
          - Choices: `in`, `out`
        """
        return pulumi.get(self, "direction")

    @direction.setter
    def direction(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "direction", value)

    @_builtins.property
    @pulumi.getter
    def optional(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Indicates if list item is considered optional.
        """
        return pulumi.get(self, "optional")

    @optional.setter
    def optional(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "optional", value)


if not MYPY:
    class VpnInterfaceCellularFeatureTemplateNatPortForwardArgsDict(TypedDict):
        optional: NotRequired[pulumi.Input[_builtins.bool]]
        """
        Indicates if list item is considered optional.
        """
        port_end_range: NotRequired[pulumi.Input[_builtins.int]]
        """
        Ending port of port range
          - Range: `0`-`65535`
        """
        port_start_range: NotRequired[pulumi.Input[_builtins.int]]
        """
        Starting port of port range
          - Range: `0`-`65535`
        """
        private_ip_address: NotRequired[pulumi.Input[_builtins.str]]
        """
        Private IP Address to translate to
        """
        private_ip_address_variable: NotRequired[pulumi.Input[_builtins.str]]
        """
        Variable name
        """
        private_vpn: NotRequired[pulumi.Input[_builtins.int]]
        """
        VPN in which private IP Address resides
          - Range: `0`-`65535`
        """
        private_vpn_variable: NotRequired[pulumi.Input[_builtins.str]]
        """
        Variable name
        """
        protocol: NotRequired[pulumi.Input[_builtins.str]]
        """
        Layer 4 protocol to apply port forwarding to
          - Choices: `tcp`, `udp`
        """
elif False:
    VpnInterfaceCellularFeatureTemplateNatPortForwardArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class VpnInterfaceCellularFeatureTemplateNatPortForwardArgs:
    def __init__(__self__, *,
                 optional: Optional[pulumi.Input[_builtins.bool]] = None,
                 port_end_range: Optional[pulumi.Input[_builtins.int]] = None,
                 port_start_range: Optional[pulumi.Input[_builtins.int]] = None,
                 private_ip_address: Optional[pulumi.Input[_builtins.str]] = None,
                 private_ip_address_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 private_vpn: Optional[pulumi.Input[_builtins.int]] = None,
                 private_vpn_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 protocol: Optional[pulumi.Input[_builtins.str]] = None):
        """
        :param pulumi.Input[_builtins.bool] optional: Indicates if list item is considered optional.
        :param pulumi.Input[_builtins.int] port_end_range: Ending port of port range
                 - Range: `0`-`65535`
        :param pulumi.Input[_builtins.int] port_start_range: Starting port of port range
                 - Range: `0`-`65535`
        :param pulumi.Input[_builtins.str] private_ip_address: Private IP Address to translate to
        :param pulumi.Input[_builtins.str] private_ip_address_variable: Variable name
        :param pulumi.Input[_builtins.int] private_vpn: VPN in which private IP Address resides
                 - Range: `0`-`65535`
        :param pulumi.Input[_builtins.str] private_vpn_variable: Variable name
        :param pulumi.Input[_builtins.str] protocol: Layer 4 protocol to apply port forwarding to
                 - Choices: `tcp`, `udp`
        """
        if optional is not None:
            pulumi.set(__self__, "optional", optional)
        if port_end_range is not None:
            pulumi.set(__self__, "port_end_range", port_end_range)
        if port_start_range is not None:
            pulumi.set(__self__, "port_start_range", port_start_range)
        if private_ip_address is not None:
            pulumi.set(__self__, "private_ip_address", private_ip_address)
        if private_ip_address_variable is not None:
            pulumi.set(__self__, "private_ip_address_variable", private_ip_address_variable)
        if private_vpn is not None:
            pulumi.set(__self__, "private_vpn", private_vpn)
        if private_vpn_variable is not None:
            pulumi.set(__self__, "private_vpn_variable", private_vpn_variable)
        if protocol is not None:
            pulumi.set(__self__, "protocol", protocol)

    @_builtins.property
    @pulumi.getter
    def optional(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Indicates if list item is considered optional.
        """
        return pulumi.get(self, "optional")

    @optional.setter
    def optional(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "optional", value)

    @_builtins.property
    @pulumi.getter(name="portEndRange")
    def port_end_range(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        Ending port of port range
          - Range: `0`-`65535`
        """
        return pulumi.get(self, "port_end_range")

    @port_end_range.setter
    def port_end_range(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "port_end_range", value)

    @_builtins.property
    @pulumi.getter(name="portStartRange")
    def port_start_range(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        Starting port of port range
          - Range: `0`-`65535`
        """
        return pulumi.get(self, "port_start_range")

    @port_start_range.setter
    def port_start_range(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "port_start_range", value)

    @_builtins.property
    @pulumi.getter(name="privateIpAddress")
    def private_ip_address(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Private IP Address to translate to
        """
        return pulumi.get(self, "private_ip_address")

    @private_ip_address.setter
    def private_ip_address(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "private_ip_address", value)

    @_builtins.property
    @pulumi.getter(name="privateIpAddressVariable")
    def private_ip_address_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "private_ip_address_variable")

    @private_ip_address_variable.setter
    def private_ip_address_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "private_ip_address_variable", value)

    @_builtins.property
    @pulumi.getter(name="privateVpn")
    def private_vpn(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        VPN in which private IP Address resides
          - Range: `0`-`65535`
        """
        return pulumi.get(self, "private_vpn")

    @private_vpn.setter
    def private_vpn(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "private_vpn", value)

    @_builtins.property
    @pulumi.getter(name="privateVpnVariable")
    def private_vpn_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "private_vpn_variable")

    @private_vpn_variable.setter
    def private_vpn_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "private_vpn_variable", value)

    @_builtins.property
    @pulumi.getter
    def protocol(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Layer 4 protocol to apply port forwarding to
          - Choices: `tcp`, `udp`
        """
        return pulumi.get(self, "protocol")

    @protocol.setter
    def protocol(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "protocol", value)


if not MYPY:
    class VpnInterfaceCellularFeatureTemplatePolicerArgsDict(TypedDict):
        direction: NotRequired[pulumi.Input[_builtins.str]]
        """
        Direction
          - Choices: `in`, `out`
        """
        optional: NotRequired[pulumi.Input[_builtins.bool]]
        """
        Indicates if list item is considered optional.
        """
        policer_name: NotRequired[pulumi.Input[_builtins.str]]
        """
        Name of policer
        """
elif False:
    VpnInterfaceCellularFeatureTemplatePolicerArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class VpnInterfaceCellularFeatureTemplatePolicerArgs:
    def __init__(__self__, *,
                 direction: Optional[pulumi.Input[_builtins.str]] = None,
                 optional: Optional[pulumi.Input[_builtins.bool]] = None,
                 policer_name: Optional[pulumi.Input[_builtins.str]] = None):
        """
        :param pulumi.Input[_builtins.str] direction: Direction
                 - Choices: `in`, `out`
        :param pulumi.Input[_builtins.bool] optional: Indicates if list item is considered optional.
        :param pulumi.Input[_builtins.str] policer_name: Name of policer
        """
        if direction is not None:
            pulumi.set(__self__, "direction", direction)
        if optional is not None:
            pulumi.set(__self__, "optional", optional)
        if policer_name is not None:
            pulumi.set(__self__, "policer_name", policer_name)

    @_builtins.property
    @pulumi.getter
    def direction(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Direction
          - Choices: `in`, `out`
        """
        return pulumi.get(self, "direction")

    @direction.setter
    def direction(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "direction", value)

    @_builtins.property
    @pulumi.getter
    def optional(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Indicates if list item is considered optional.
        """
        return pulumi.get(self, "optional")

    @optional.setter
    def optional(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "optional", value)

    @_builtins.property
    @pulumi.getter(name="policerName")
    def policer_name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Name of policer
        """
        return pulumi.get(self, "policer_name")

    @policer_name.setter
    def policer_name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "policer_name", value)


if not MYPY:
    class VpnInterfaceCellularFeatureTemplateStaticArpArgsDict(TypedDict):
        ip_address: NotRequired[pulumi.Input[_builtins.str]]
        """
        IP Address
        """
        ip_address_variable: NotRequired[pulumi.Input[_builtins.str]]
        """
        Variable name
        """
        mac: NotRequired[pulumi.Input[_builtins.str]]
        """
        MAC address
        """
        mac_variable: NotRequired[pulumi.Input[_builtins.str]]
        """
        Variable name
        """
        optional: NotRequired[pulumi.Input[_builtins.bool]]
        """
        Indicates if list item is considered optional.
        """
elif False:
    VpnInterfaceCellularFeatureTemplateStaticArpArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class VpnInterfaceCellularFeatureTemplateStaticArpArgs:
    def __init__(__self__, *,
                 ip_address: Optional[pulumi.Input[_builtins.str]] = None,
                 ip_address_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 mac: Optional[pulumi.Input[_builtins.str]] = None,
                 mac_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 optional: Optional[pulumi.Input[_builtins.bool]] = None):
        """
        :param pulumi.Input[_builtins.str] ip_address: IP Address
        :param pulumi.Input[_builtins.str] ip_address_variable: Variable name
        :param pulumi.Input[_builtins.str] mac: MAC address
        :param pulumi.Input[_builtins.str] mac_variable: Variable name
        :param pulumi.Input[_builtins.bool] optional: Indicates if list item is considered optional.
        """
        if ip_address is not None:
            pulumi.set(__self__, "ip_address", ip_address)
        if ip_address_variable is not None:
            pulumi.set(__self__, "ip_address_variable", ip_address_variable)
        if mac is not None:
            pulumi.set(__self__, "mac", mac)
        if mac_variable is not None:
            pulumi.set(__self__, "mac_variable", mac_variable)
        if optional is not None:
            pulumi.set(__self__, "optional", optional)

    @_builtins.property
    @pulumi.getter(name="ipAddress")
    def ip_address(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        IP Address
        """
        return pulumi.get(self, "ip_address")

    @ip_address.setter
    def ip_address(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "ip_address", value)

    @_builtins.property
    @pulumi.getter(name="ipAddressVariable")
    def ip_address_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "ip_address_variable")

    @ip_address_variable.setter
    def ip_address_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "ip_address_variable", value)

    @_builtins.property
    @pulumi.getter
    def mac(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        MAC address
        """
        return pulumi.get(self, "mac")

    @mac.setter
    def mac(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "mac", value)

    @_builtins.property
    @pulumi.getter(name="macVariable")
    def mac_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "mac_variable")

    @mac_variable.setter
    def mac_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "mac_variable", value)

    @_builtins.property
    @pulumi.getter
    def optional(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Indicates if list item is considered optional.
        """
        return pulumi.get(self, "optional")

    @optional.setter
    def optional(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "optional", value)


if not MYPY:
    class VpnInterfaceCellularFeatureTemplateTunnelInterfaceEncapsulationArgsDict(TypedDict):
        encapsulation: NotRequired[pulumi.Input[_builtins.str]]
        """
        Encapsulation
          - Choices: `gre`, `ipsec`
        """
        optional: NotRequired[pulumi.Input[_builtins.bool]]
        """
        Indicates if list item is considered optional.
        """
        preference: NotRequired[pulumi.Input[_builtins.int]]
        """
        Set preference for TLOC
          - Range: `0`-`4294967295`
        """
        preference_variable: NotRequired[pulumi.Input[_builtins.str]]
        """
        Variable name
        """
        weight: NotRequired[pulumi.Input[_builtins.int]]
        """
        Set weight for TLOC
          - Range: `1`-`255`
          - Default value: `1`
        """
        weight_variable: NotRequired[pulumi.Input[_builtins.str]]
        """
        Variable name
        """
elif False:
    VpnInterfaceCellularFeatureTemplateTunnelInterfaceEncapsulationArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class VpnInterfaceCellularFeatureTemplateTunnelInterfaceEncapsulationArgs:
    def __init__(__self__, *,
                 encapsulation: Optional[pulumi.Input[_builtins.str]] = None,
                 optional: Optional[pulumi.Input[_builtins.bool]] = None,
                 preference: Optional[pulumi.Input[_builtins.int]] = None,
                 preference_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 weight: Optional[pulumi.Input[_builtins.int]] = None,
                 weight_variable: Optional[pulumi.Input[_builtins.str]] = None):
        """
        :param pulumi.Input[_builtins.str] encapsulation: Encapsulation
                 - Choices: `gre`, `ipsec`
        :param pulumi.Input[_builtins.bool] optional: Indicates if list item is considered optional.
        :param pulumi.Input[_builtins.int] preference: Set preference for TLOC
                 - Range: `0`-`4294967295`
        :param pulumi.Input[_builtins.str] preference_variable: Variable name
        :param pulumi.Input[_builtins.int] weight: Set weight for TLOC
                 - Range: `1`-`255`
                 - Default value: `1`
        :param pulumi.Input[_builtins.str] weight_variable: Variable name
        """
        if encapsulation is not None:
            pulumi.set(__self__, "encapsulation", encapsulation)
        if optional is not None:
            pulumi.set(__self__, "optional", optional)
        if preference is not None:
            pulumi.set(__self__, "preference", preference)
        if preference_variable is not None:
            pulumi.set(__self__, "preference_variable", preference_variable)
        if weight is not None:
            pulumi.set(__self__, "weight", weight)
        if weight_variable is not None:
            pulumi.set(__self__, "weight_variable", weight_variable)

    @_builtins.property
    @pulumi.getter
    def encapsulation(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Encapsulation
          - Choices: `gre`, `ipsec`
        """
        return pulumi.get(self, "encapsulation")

    @encapsulation.setter
    def encapsulation(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "encapsulation", value)

    @_builtins.property
    @pulumi.getter
    def optional(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Indicates if list item is considered optional.
        """
        return pulumi.get(self, "optional")

    @optional.setter
    def optional(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "optional", value)

    @_builtins.property
    @pulumi.getter
    def preference(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        Set preference for TLOC
          - Range: `0`-`4294967295`
        """
        return pulumi.get(self, "preference")

    @preference.setter
    def preference(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "preference", value)

    @_builtins.property
    @pulumi.getter(name="preferenceVariable")
    def preference_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "preference_variable")

    @preference_variable.setter
    def preference_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "preference_variable", value)

    @_builtins.property
    @pulumi.getter
    def weight(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        Set weight for TLOC
          - Range: `1`-`255`
          - Default value: `1`
        """
        return pulumi.get(self, "weight")

    @weight.setter
    def weight(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "weight", value)

    @_builtins.property
    @pulumi.getter(name="weightVariable")
    def weight_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "weight_variable")

    @weight_variable.setter
    def weight_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "weight_variable", value)


if not MYPY:
    class VpnInterfaceDslIpoeFeatureTemplateAccessListArgsDict(TypedDict):
        acl_name: NotRequired[pulumi.Input[_builtins.str]]
        """
        Name of access list
        """
        acl_name_variable: NotRequired[pulumi.Input[_builtins.str]]
        """
        Variable name
        """
        direction: NotRequired[pulumi.Input[_builtins.str]]
        """
        Direction
          - Choices: `in`, `out`
        """
        optional: NotRequired[pulumi.Input[_builtins.bool]]
        """
        Indicates if list item is considered optional.
        """
elif False:
    VpnInterfaceDslIpoeFeatureTemplateAccessListArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class VpnInterfaceDslIpoeFeatureTemplateAccessListArgs:
    def __init__(__self__, *,
                 acl_name: Optional[pulumi.Input[_builtins.str]] = None,
                 acl_name_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 direction: Optional[pulumi.Input[_builtins.str]] = None,
                 optional: Optional[pulumi.Input[_builtins.bool]] = None):
        """
        :param pulumi.Input[_builtins.str] acl_name: Name of access list
        :param pulumi.Input[_builtins.str] acl_name_variable: Variable name
        :param pulumi.Input[_builtins.str] direction: Direction
                 - Choices: `in`, `out`
        :param pulumi.Input[_builtins.bool] optional: Indicates if list item is considered optional.
        """
        if acl_name is not None:
            pulumi.set(__self__, "acl_name", acl_name)
        if acl_name_variable is not None:
            pulumi.set(__self__, "acl_name_variable", acl_name_variable)
        if direction is not None:
            pulumi.set(__self__, "direction", direction)
        if optional is not None:
            pulumi.set(__self__, "optional", optional)

    @_builtins.property
    @pulumi.getter(name="aclName")
    def acl_name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Name of access list
        """
        return pulumi.get(self, "acl_name")

    @acl_name.setter
    def acl_name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "acl_name", value)

    @_builtins.property
    @pulumi.getter(name="aclNameVariable")
    def acl_name_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "acl_name_variable")

    @acl_name_variable.setter
    def acl_name_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "acl_name_variable", value)

    @_builtins.property
    @pulumi.getter
    def direction(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Direction
          - Choices: `in`, `out`
        """
        return pulumi.get(self, "direction")

    @direction.setter
    def direction(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "direction", value)

    @_builtins.property
    @pulumi.getter
    def optional(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Indicates if list item is considered optional.
        """
        return pulumi.get(self, "optional")

    @optional.setter
    def optional(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "optional", value)


if not MYPY:
    class VpnInterfaceDslIpoeFeatureTemplateNatPortForwardArgsDict(TypedDict):
        optional: NotRequired[pulumi.Input[_builtins.bool]]
        """
        Indicates if list item is considered optional.
        """
        port_end_range: NotRequired[pulumi.Input[_builtins.int]]
        """
        Ending port of port range
          - Range: `0`-`65535`
        """
        port_start_range: NotRequired[pulumi.Input[_builtins.int]]
        """
        Starting port of port range
          - Range: `0`-`65535`
        """
        private_ip_address: NotRequired[pulumi.Input[_builtins.str]]
        """
        Private IP Address to translate to
        """
        private_ip_address_variable: NotRequired[pulumi.Input[_builtins.str]]
        """
        Variable name
        """
        private_vpn: NotRequired[pulumi.Input[_builtins.int]]
        """
        VPN in which private IP Address resides
          - Range: `0`-`65535`
        """
        private_vpn_variable: NotRequired[pulumi.Input[_builtins.str]]
        """
        Variable name
        """
        protocol: NotRequired[pulumi.Input[_builtins.str]]
        """
        Layer 4 protocol to apply port forwarding to
          - Choices: `tcp`, `udp`
        """
elif False:
    VpnInterfaceDslIpoeFeatureTemplateNatPortForwardArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class VpnInterfaceDslIpoeFeatureTemplateNatPortForwardArgs:
    def __init__(__self__, *,
                 optional: Optional[pulumi.Input[_builtins.bool]] = None,
                 port_end_range: Optional[pulumi.Input[_builtins.int]] = None,
                 port_start_range: Optional[pulumi.Input[_builtins.int]] = None,
                 private_ip_address: Optional[pulumi.Input[_builtins.str]] = None,
                 private_ip_address_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 private_vpn: Optional[pulumi.Input[_builtins.int]] = None,
                 private_vpn_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 protocol: Optional[pulumi.Input[_builtins.str]] = None):
        """
        :param pulumi.Input[_builtins.bool] optional: Indicates if list item is considered optional.
        :param pulumi.Input[_builtins.int] port_end_range: Ending port of port range
                 - Range: `0`-`65535`
        :param pulumi.Input[_builtins.int] port_start_range: Starting port of port range
                 - Range: `0`-`65535`
        :param pulumi.Input[_builtins.str] private_ip_address: Private IP Address to translate to
        :param pulumi.Input[_builtins.str] private_ip_address_variable: Variable name
        :param pulumi.Input[_builtins.int] private_vpn: VPN in which private IP Address resides
                 - Range: `0`-`65535`
        :param pulumi.Input[_builtins.str] private_vpn_variable: Variable name
        :param pulumi.Input[_builtins.str] protocol: Layer 4 protocol to apply port forwarding to
                 - Choices: `tcp`, `udp`
        """
        if optional is not None:
            pulumi.set(__self__, "optional", optional)
        if port_end_range is not None:
            pulumi.set(__self__, "port_end_range", port_end_range)
        if port_start_range is not None:
            pulumi.set(__self__, "port_start_range", port_start_range)
        if private_ip_address is not None:
            pulumi.set(__self__, "private_ip_address", private_ip_address)
        if private_ip_address_variable is not None:
            pulumi.set(__self__, "private_ip_address_variable", private_ip_address_variable)
        if private_vpn is not None:
            pulumi.set(__self__, "private_vpn", private_vpn)
        if private_vpn_variable is not None:
            pulumi.set(__self__, "private_vpn_variable", private_vpn_variable)
        if protocol is not None:
            pulumi.set(__self__, "protocol", protocol)

    @_builtins.property
    @pulumi.getter
    def optional(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Indicates if list item is considered optional.
        """
        return pulumi.get(self, "optional")

    @optional.setter
    def optional(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "optional", value)

    @_builtins.property
    @pulumi.getter(name="portEndRange")
    def port_end_range(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        Ending port of port range
          - Range: `0`-`65535`
        """
        return pulumi.get(self, "port_end_range")

    @port_end_range.setter
    def port_end_range(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "port_end_range", value)

    @_builtins.property
    @pulumi.getter(name="portStartRange")
    def port_start_range(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        Starting port of port range
          - Range: `0`-`65535`
        """
        return pulumi.get(self, "port_start_range")

    @port_start_range.setter
    def port_start_range(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "port_start_range", value)

    @_builtins.property
    @pulumi.getter(name="privateIpAddress")
    def private_ip_address(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Private IP Address to translate to
        """
        return pulumi.get(self, "private_ip_address")

    @private_ip_address.setter
    def private_ip_address(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "private_ip_address", value)

    @_builtins.property
    @pulumi.getter(name="privateIpAddressVariable")
    def private_ip_address_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "private_ip_address_variable")

    @private_ip_address_variable.setter
    def private_ip_address_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "private_ip_address_variable", value)

    @_builtins.property
    @pulumi.getter(name="privateVpn")
    def private_vpn(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        VPN in which private IP Address resides
          - Range: `0`-`65535`
        """
        return pulumi.get(self, "private_vpn")

    @private_vpn.setter
    def private_vpn(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "private_vpn", value)

    @_builtins.property
    @pulumi.getter(name="privateVpnVariable")
    def private_vpn_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "private_vpn_variable")

    @private_vpn_variable.setter
    def private_vpn_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "private_vpn_variable", value)

    @_builtins.property
    @pulumi.getter
    def protocol(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Layer 4 protocol to apply port forwarding to
          - Choices: `tcp`, `udp`
        """
        return pulumi.get(self, "protocol")

    @protocol.setter
    def protocol(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "protocol", value)


if not MYPY:
    class VpnInterfaceDslIpoeFeatureTemplatePolicerArgsDict(TypedDict):
        direction: NotRequired[pulumi.Input[_builtins.str]]
        """
        Direction
          - Choices: `in`, `out`
        """
        optional: NotRequired[pulumi.Input[_builtins.bool]]
        """
        Indicates if list item is considered optional.
        """
        policer_name: NotRequired[pulumi.Input[_builtins.str]]
        """
        Name of policer
        """
elif False:
    VpnInterfaceDslIpoeFeatureTemplatePolicerArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class VpnInterfaceDslIpoeFeatureTemplatePolicerArgs:
    def __init__(__self__, *,
                 direction: Optional[pulumi.Input[_builtins.str]] = None,
                 optional: Optional[pulumi.Input[_builtins.bool]] = None,
                 policer_name: Optional[pulumi.Input[_builtins.str]] = None):
        """
        :param pulumi.Input[_builtins.str] direction: Direction
                 - Choices: `in`, `out`
        :param pulumi.Input[_builtins.bool] optional: Indicates if list item is considered optional.
        :param pulumi.Input[_builtins.str] policer_name: Name of policer
        """
        if direction is not None:
            pulumi.set(__self__, "direction", direction)
        if optional is not None:
            pulumi.set(__self__, "optional", optional)
        if policer_name is not None:
            pulumi.set(__self__, "policer_name", policer_name)

    @_builtins.property
    @pulumi.getter
    def direction(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Direction
          - Choices: `in`, `out`
        """
        return pulumi.get(self, "direction")

    @direction.setter
    def direction(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "direction", value)

    @_builtins.property
    @pulumi.getter
    def optional(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Indicates if list item is considered optional.
        """
        return pulumi.get(self, "optional")

    @optional.setter
    def optional(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "optional", value)

    @_builtins.property
    @pulumi.getter(name="policerName")
    def policer_name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Name of policer
        """
        return pulumi.get(self, "policer_name")

    @policer_name.setter
    def policer_name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "policer_name", value)


if not MYPY:
    class VpnInterfaceDslIpoeFeatureTemplateTunnelInterfaceEncapsulationArgsDict(TypedDict):
        encapsulation: NotRequired[pulumi.Input[_builtins.str]]
        """
        Encapsulation
          - Choices: `gre`, `ipsec`
        """
        optional: NotRequired[pulumi.Input[_builtins.bool]]
        """
        Indicates if list item is considered optional.
        """
        preference: NotRequired[pulumi.Input[_builtins.int]]
        """
        Set preference for TLOC
          - Range: `0`-`4294967295`
        """
        preference_variable: NotRequired[pulumi.Input[_builtins.str]]
        """
        Variable name
        """
        weight: NotRequired[pulumi.Input[_builtins.int]]
        """
        Set weight for TLOC
          - Range: `1`-`255`
          - Default value: `1`
        """
        weight_variable: NotRequired[pulumi.Input[_builtins.str]]
        """
        Variable name
        """
elif False:
    VpnInterfaceDslIpoeFeatureTemplateTunnelInterfaceEncapsulationArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class VpnInterfaceDslIpoeFeatureTemplateTunnelInterfaceEncapsulationArgs:
    def __init__(__self__, *,
                 encapsulation: Optional[pulumi.Input[_builtins.str]] = None,
                 optional: Optional[pulumi.Input[_builtins.bool]] = None,
                 preference: Optional[pulumi.Input[_builtins.int]] = None,
                 preference_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 weight: Optional[pulumi.Input[_builtins.int]] = None,
                 weight_variable: Optional[pulumi.Input[_builtins.str]] = None):
        """
        :param pulumi.Input[_builtins.str] encapsulation: Encapsulation
                 - Choices: `gre`, `ipsec`
        :param pulumi.Input[_builtins.bool] optional: Indicates if list item is considered optional.
        :param pulumi.Input[_builtins.int] preference: Set preference for TLOC
                 - Range: `0`-`4294967295`
        :param pulumi.Input[_builtins.str] preference_variable: Variable name
        :param pulumi.Input[_builtins.int] weight: Set weight for TLOC
                 - Range: `1`-`255`
                 - Default value: `1`
        :param pulumi.Input[_builtins.str] weight_variable: Variable name
        """
        if encapsulation is not None:
            pulumi.set(__self__, "encapsulation", encapsulation)
        if optional is not None:
            pulumi.set(__self__, "optional", optional)
        if preference is not None:
            pulumi.set(__self__, "preference", preference)
        if preference_variable is not None:
            pulumi.set(__self__, "preference_variable", preference_variable)
        if weight is not None:
            pulumi.set(__self__, "weight", weight)
        if weight_variable is not None:
            pulumi.set(__self__, "weight_variable", weight_variable)

    @_builtins.property
    @pulumi.getter
    def encapsulation(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Encapsulation
          - Choices: `gre`, `ipsec`
        """
        return pulumi.get(self, "encapsulation")

    @encapsulation.setter
    def encapsulation(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "encapsulation", value)

    @_builtins.property
    @pulumi.getter
    def optional(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Indicates if list item is considered optional.
        """
        return pulumi.get(self, "optional")

    @optional.setter
    def optional(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "optional", value)

    @_builtins.property
    @pulumi.getter
    def preference(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        Set preference for TLOC
          - Range: `0`-`4294967295`
        """
        return pulumi.get(self, "preference")

    @preference.setter
    def preference(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "preference", value)

    @_builtins.property
    @pulumi.getter(name="preferenceVariable")
    def preference_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "preference_variable")

    @preference_variable.setter
    def preference_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "preference_variable", value)

    @_builtins.property
    @pulumi.getter
    def weight(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        Set weight for TLOC
          - Range: `1`-`255`
          - Default value: `1`
        """
        return pulumi.get(self, "weight")

    @weight.setter
    def weight(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "weight", value)

    @_builtins.property
    @pulumi.getter(name="weightVariable")
    def weight_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "weight_variable")

    @weight_variable.setter
    def weight_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "weight_variable", value)


if not MYPY:
    class VpnInterfaceDslIpoeFeatureTemplateVdslConfigurationArgsDict(TypedDict):
        controller_vdsl_slot: NotRequired[pulumi.Input[_builtins.str]]
        """
        Set module slot/subslot/port number
        """
        controller_vdsl_slot_variable: NotRequired[pulumi.Input[_builtins.str]]
        """
        Variable name
        """
        mode_adsl1: NotRequired[pulumi.Input[_builtins.bool]]
        """
        Set VDSL operating mode to adsl1
          - Default value: `false`
        """
        mode_adsl2: NotRequired[pulumi.Input[_builtins.bool]]
        """
        Set VDSL operating mode to adsl2
          - Default value: `false`
        """
        mode_adsl2plus: NotRequired[pulumi.Input[_builtins.bool]]
        """
        Set VDSL operating mode to adsl2plus
          - Default value: `false`
        """
        mode_ansi: NotRequired[pulumi.Input[_builtins.bool]]
        """
        Set VDSL operating mode to ansi
          - Default value: `false`
        """
        mode_vdsl2: NotRequired[pulumi.Input[_builtins.bool]]
        """
        Set VDSL operating mode to vdsl2
          - Default value: `false`
        """
        optional: NotRequired[pulumi.Input[_builtins.bool]]
        """
        Indicates if list item is considered optional.
        """
        sra: NotRequired[pulumi.Input[_builtins.bool]]
        """
        Seamless rate adaption
          - Default value: `true`
        """
        vdsl_modem_configuration: NotRequired[pulumi.Input[_builtins.str]]
        """
        Set module slot/subslot/port number
        """
        vdsl_modem_configuration_variable: NotRequired[pulumi.Input[_builtins.str]]
        """
        Variable name
        """
elif False:
    VpnInterfaceDslIpoeFeatureTemplateVdslConfigurationArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class VpnInterfaceDslIpoeFeatureTemplateVdslConfigurationArgs:
    def __init__(__self__, *,
                 controller_vdsl_slot: Optional[pulumi.Input[_builtins.str]] = None,
                 controller_vdsl_slot_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 mode_adsl1: Optional[pulumi.Input[_builtins.bool]] = None,
                 mode_adsl2: Optional[pulumi.Input[_builtins.bool]] = None,
                 mode_adsl2plus: Optional[pulumi.Input[_builtins.bool]] = None,
                 mode_ansi: Optional[pulumi.Input[_builtins.bool]] = None,
                 mode_vdsl2: Optional[pulumi.Input[_builtins.bool]] = None,
                 optional: Optional[pulumi.Input[_builtins.bool]] = None,
                 sra: Optional[pulumi.Input[_builtins.bool]] = None,
                 vdsl_modem_configuration: Optional[pulumi.Input[_builtins.str]] = None,
                 vdsl_modem_configuration_variable: Optional[pulumi.Input[_builtins.str]] = None):
        """
        :param pulumi.Input[_builtins.str] controller_vdsl_slot: Set module slot/subslot/port number
        :param pulumi.Input[_builtins.str] controller_vdsl_slot_variable: Variable name
        :param pulumi.Input[_builtins.bool] mode_adsl1: Set VDSL operating mode to adsl1
                 - Default value: `false`
        :param pulumi.Input[_builtins.bool] mode_adsl2: Set VDSL operating mode to adsl2
                 - Default value: `false`
        :param pulumi.Input[_builtins.bool] mode_adsl2plus: Set VDSL operating mode to adsl2plus
                 - Default value: `false`
        :param pulumi.Input[_builtins.bool] mode_ansi: Set VDSL operating mode to ansi
                 - Default value: `false`
        :param pulumi.Input[_builtins.bool] mode_vdsl2: Set VDSL operating mode to vdsl2
                 - Default value: `false`
        :param pulumi.Input[_builtins.bool] optional: Indicates if list item is considered optional.
        :param pulumi.Input[_builtins.bool] sra: Seamless rate adaption
                 - Default value: `true`
        :param pulumi.Input[_builtins.str] vdsl_modem_configuration: Set module slot/subslot/port number
        :param pulumi.Input[_builtins.str] vdsl_modem_configuration_variable: Variable name
        """
        if controller_vdsl_slot is not None:
            pulumi.set(__self__, "controller_vdsl_slot", controller_vdsl_slot)
        if controller_vdsl_slot_variable is not None:
            pulumi.set(__self__, "controller_vdsl_slot_variable", controller_vdsl_slot_variable)
        if mode_adsl1 is not None:
            pulumi.set(__self__, "mode_adsl1", mode_adsl1)
        if mode_adsl2 is not None:
            pulumi.set(__self__, "mode_adsl2", mode_adsl2)
        if mode_adsl2plus is not None:
            pulumi.set(__self__, "mode_adsl2plus", mode_adsl2plus)
        if mode_ansi is not None:
            pulumi.set(__self__, "mode_ansi", mode_ansi)
        if mode_vdsl2 is not None:
            pulumi.set(__self__, "mode_vdsl2", mode_vdsl2)
        if optional is not None:
            pulumi.set(__self__, "optional", optional)
        if sra is not None:
            pulumi.set(__self__, "sra", sra)
        if vdsl_modem_configuration is not None:
            pulumi.set(__self__, "vdsl_modem_configuration", vdsl_modem_configuration)
        if vdsl_modem_configuration_variable is not None:
            pulumi.set(__self__, "vdsl_modem_configuration_variable", vdsl_modem_configuration_variable)

    @_builtins.property
    @pulumi.getter(name="controllerVdslSlot")
    def controller_vdsl_slot(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Set module slot/subslot/port number
        """
        return pulumi.get(self, "controller_vdsl_slot")

    @controller_vdsl_slot.setter
    def controller_vdsl_slot(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "controller_vdsl_slot", value)

    @_builtins.property
    @pulumi.getter(name="controllerVdslSlotVariable")
    def controller_vdsl_slot_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "controller_vdsl_slot_variable")

    @controller_vdsl_slot_variable.setter
    def controller_vdsl_slot_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "controller_vdsl_slot_variable", value)

    @_builtins.property
    @pulumi.getter(name="modeAdsl1")
    def mode_adsl1(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Set VDSL operating mode to adsl1
          - Default value: `false`
        """
        return pulumi.get(self, "mode_adsl1")

    @mode_adsl1.setter
    def mode_adsl1(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "mode_adsl1", value)

    @_builtins.property
    @pulumi.getter(name="modeAdsl2")
    def mode_adsl2(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Set VDSL operating mode to adsl2
          - Default value: `false`
        """
        return pulumi.get(self, "mode_adsl2")

    @mode_adsl2.setter
    def mode_adsl2(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "mode_adsl2", value)

    @_builtins.property
    @pulumi.getter(name="modeAdsl2plus")
    def mode_adsl2plus(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Set VDSL operating mode to adsl2plus
          - Default value: `false`
        """
        return pulumi.get(self, "mode_adsl2plus")

    @mode_adsl2plus.setter
    def mode_adsl2plus(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "mode_adsl2plus", value)

    @_builtins.property
    @pulumi.getter(name="modeAnsi")
    def mode_ansi(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Set VDSL operating mode to ansi
          - Default value: `false`
        """
        return pulumi.get(self, "mode_ansi")

    @mode_ansi.setter
    def mode_ansi(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "mode_ansi", value)

    @_builtins.property
    @pulumi.getter(name="modeVdsl2")
    def mode_vdsl2(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Set VDSL operating mode to vdsl2
          - Default value: `false`
        """
        return pulumi.get(self, "mode_vdsl2")

    @mode_vdsl2.setter
    def mode_vdsl2(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "mode_vdsl2", value)

    @_builtins.property
    @pulumi.getter
    def optional(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Indicates if list item is considered optional.
        """
        return pulumi.get(self, "optional")

    @optional.setter
    def optional(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "optional", value)

    @_builtins.property
    @pulumi.getter
    def sra(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Seamless rate adaption
          - Default value: `true`
        """
        return pulumi.get(self, "sra")

    @sra.setter
    def sra(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "sra", value)

    @_builtins.property
    @pulumi.getter(name="vdslModemConfiguration")
    def vdsl_modem_configuration(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Set module slot/subslot/port number
        """
        return pulumi.get(self, "vdsl_modem_configuration")

    @vdsl_modem_configuration.setter
    def vdsl_modem_configuration(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "vdsl_modem_configuration", value)

    @_builtins.property
    @pulumi.getter(name="vdslModemConfigurationVariable")
    def vdsl_modem_configuration_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "vdsl_modem_configuration_variable")

    @vdsl_modem_configuration_variable.setter
    def vdsl_modem_configuration_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "vdsl_modem_configuration_variable", value)


if not MYPY:
    class VpnInterfaceDslPppoaFeatureTemplateAccessListArgsDict(TypedDict):
        acl_name: NotRequired[pulumi.Input[_builtins.str]]
        """
        Name of access list
        """
        acl_name_variable: NotRequired[pulumi.Input[_builtins.str]]
        """
        Variable name
        """
        direction: NotRequired[pulumi.Input[_builtins.str]]
        """
        Direction
          - Choices: `in`, `out`
        """
        optional: NotRequired[pulumi.Input[_builtins.bool]]
        """
        Indicates if list item is considered optional.
        """
elif False:
    VpnInterfaceDslPppoaFeatureTemplateAccessListArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class VpnInterfaceDslPppoaFeatureTemplateAccessListArgs:
    def __init__(__self__, *,
                 acl_name: Optional[pulumi.Input[_builtins.str]] = None,
                 acl_name_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 direction: Optional[pulumi.Input[_builtins.str]] = None,
                 optional: Optional[pulumi.Input[_builtins.bool]] = None):
        """
        :param pulumi.Input[_builtins.str] acl_name: Name of access list
        :param pulumi.Input[_builtins.str] acl_name_variable: Variable name
        :param pulumi.Input[_builtins.str] direction: Direction
                 - Choices: `in`, `out`
        :param pulumi.Input[_builtins.bool] optional: Indicates if list item is considered optional.
        """
        if acl_name is not None:
            pulumi.set(__self__, "acl_name", acl_name)
        if acl_name_variable is not None:
            pulumi.set(__self__, "acl_name_variable", acl_name_variable)
        if direction is not None:
            pulumi.set(__self__, "direction", direction)
        if optional is not None:
            pulumi.set(__self__, "optional", optional)

    @_builtins.property
    @pulumi.getter(name="aclName")
    def acl_name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Name of access list
        """
        return pulumi.get(self, "acl_name")

    @acl_name.setter
    def acl_name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "acl_name", value)

    @_builtins.property
    @pulumi.getter(name="aclNameVariable")
    def acl_name_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "acl_name_variable")

    @acl_name_variable.setter
    def acl_name_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "acl_name_variable", value)

    @_builtins.property
    @pulumi.getter
    def direction(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Direction
          - Choices: `in`, `out`
        """
        return pulumi.get(self, "direction")

    @direction.setter
    def direction(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "direction", value)

    @_builtins.property
    @pulumi.getter
    def optional(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Indicates if list item is considered optional.
        """
        return pulumi.get(self, "optional")

    @optional.setter
    def optional(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "optional", value)


if not MYPY:
    class VpnInterfaceDslPppoaFeatureTemplateNatPortForwardArgsDict(TypedDict):
        optional: NotRequired[pulumi.Input[_builtins.bool]]
        """
        Indicates if list item is considered optional.
        """
        port_end_range: NotRequired[pulumi.Input[_builtins.int]]
        """
        Ending port of port range
          - Range: `0`-`65535`
        """
        port_start_range: NotRequired[pulumi.Input[_builtins.int]]
        """
        Starting port of port range
          - Range: `0`-`65535`
        """
        private_ip_address: NotRequired[pulumi.Input[_builtins.str]]
        """
        Private IP Address to translate to
        """
        private_ip_address_variable: NotRequired[pulumi.Input[_builtins.str]]
        """
        Variable name
        """
        private_vpn: NotRequired[pulumi.Input[_builtins.int]]
        """
        VPN in which private IP Address resides
          - Range: `0`-`65535`
        """
        private_vpn_variable: NotRequired[pulumi.Input[_builtins.str]]
        """
        Variable name
        """
        protocol: NotRequired[pulumi.Input[_builtins.str]]
        """
        Layer 4 protocol to apply port forwarding to
          - Choices: `tcp`, `udp`
        """
elif False:
    VpnInterfaceDslPppoaFeatureTemplateNatPortForwardArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class VpnInterfaceDslPppoaFeatureTemplateNatPortForwardArgs:
    def __init__(__self__, *,
                 optional: Optional[pulumi.Input[_builtins.bool]] = None,
                 port_end_range: Optional[pulumi.Input[_builtins.int]] = None,
                 port_start_range: Optional[pulumi.Input[_builtins.int]] = None,
                 private_ip_address: Optional[pulumi.Input[_builtins.str]] = None,
                 private_ip_address_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 private_vpn: Optional[pulumi.Input[_builtins.int]] = None,
                 private_vpn_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 protocol: Optional[pulumi.Input[_builtins.str]] = None):
        """
        :param pulumi.Input[_builtins.bool] optional: Indicates if list item is considered optional.
        :param pulumi.Input[_builtins.int] port_end_range: Ending port of port range
                 - Range: `0`-`65535`
        :param pulumi.Input[_builtins.int] port_start_range: Starting port of port range
                 - Range: `0`-`65535`
        :param pulumi.Input[_builtins.str] private_ip_address: Private IP Address to translate to
        :param pulumi.Input[_builtins.str] private_ip_address_variable: Variable name
        :param pulumi.Input[_builtins.int] private_vpn: VPN in which private IP Address resides
                 - Range: `0`-`65535`
        :param pulumi.Input[_builtins.str] private_vpn_variable: Variable name
        :param pulumi.Input[_builtins.str] protocol: Layer 4 protocol to apply port forwarding to
                 - Choices: `tcp`, `udp`
        """
        if optional is not None:
            pulumi.set(__self__, "optional", optional)
        if port_end_range is not None:
            pulumi.set(__self__, "port_end_range", port_end_range)
        if port_start_range is not None:
            pulumi.set(__self__, "port_start_range", port_start_range)
        if private_ip_address is not None:
            pulumi.set(__self__, "private_ip_address", private_ip_address)
        if private_ip_address_variable is not None:
            pulumi.set(__self__, "private_ip_address_variable", private_ip_address_variable)
        if private_vpn is not None:
            pulumi.set(__self__, "private_vpn", private_vpn)
        if private_vpn_variable is not None:
            pulumi.set(__self__, "private_vpn_variable", private_vpn_variable)
        if protocol is not None:
            pulumi.set(__self__, "protocol", protocol)

    @_builtins.property
    @pulumi.getter
    def optional(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Indicates if list item is considered optional.
        """
        return pulumi.get(self, "optional")

    @optional.setter
    def optional(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "optional", value)

    @_builtins.property
    @pulumi.getter(name="portEndRange")
    def port_end_range(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        Ending port of port range
          - Range: `0`-`65535`
        """
        return pulumi.get(self, "port_end_range")

    @port_end_range.setter
    def port_end_range(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "port_end_range", value)

    @_builtins.property
    @pulumi.getter(name="portStartRange")
    def port_start_range(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        Starting port of port range
          - Range: `0`-`65535`
        """
        return pulumi.get(self, "port_start_range")

    @port_start_range.setter
    def port_start_range(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "port_start_range", value)

    @_builtins.property
    @pulumi.getter(name="privateIpAddress")
    def private_ip_address(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Private IP Address to translate to
        """
        return pulumi.get(self, "private_ip_address")

    @private_ip_address.setter
    def private_ip_address(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "private_ip_address", value)

    @_builtins.property
    @pulumi.getter(name="privateIpAddressVariable")
    def private_ip_address_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "private_ip_address_variable")

    @private_ip_address_variable.setter
    def private_ip_address_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "private_ip_address_variable", value)

    @_builtins.property
    @pulumi.getter(name="privateVpn")
    def private_vpn(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        VPN in which private IP Address resides
          - Range: `0`-`65535`
        """
        return pulumi.get(self, "private_vpn")

    @private_vpn.setter
    def private_vpn(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "private_vpn", value)

    @_builtins.property
    @pulumi.getter(name="privateVpnVariable")
    def private_vpn_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "private_vpn_variable")

    @private_vpn_variable.setter
    def private_vpn_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "private_vpn_variable", value)

    @_builtins.property
    @pulumi.getter
    def protocol(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Layer 4 protocol to apply port forwarding to
          - Choices: `tcp`, `udp`
        """
        return pulumi.get(self, "protocol")

    @protocol.setter
    def protocol(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "protocol", value)


if not MYPY:
    class VpnInterfaceDslPppoaFeatureTemplatePolicerArgsDict(TypedDict):
        direction: NotRequired[pulumi.Input[_builtins.str]]
        """
        Direction
          - Choices: `in`, `out`
        """
        optional: NotRequired[pulumi.Input[_builtins.bool]]
        """
        Indicates if list item is considered optional.
        """
        policer_name: NotRequired[pulumi.Input[_builtins.str]]
        """
        Name of policer
        """
elif False:
    VpnInterfaceDslPppoaFeatureTemplatePolicerArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class VpnInterfaceDslPppoaFeatureTemplatePolicerArgs:
    def __init__(__self__, *,
                 direction: Optional[pulumi.Input[_builtins.str]] = None,
                 optional: Optional[pulumi.Input[_builtins.bool]] = None,
                 policer_name: Optional[pulumi.Input[_builtins.str]] = None):
        """
        :param pulumi.Input[_builtins.str] direction: Direction
                 - Choices: `in`, `out`
        :param pulumi.Input[_builtins.bool] optional: Indicates if list item is considered optional.
        :param pulumi.Input[_builtins.str] policer_name: Name of policer
        """
        if direction is not None:
            pulumi.set(__self__, "direction", direction)
        if optional is not None:
            pulumi.set(__self__, "optional", optional)
        if policer_name is not None:
            pulumi.set(__self__, "policer_name", policer_name)

    @_builtins.property
    @pulumi.getter
    def direction(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Direction
          - Choices: `in`, `out`
        """
        return pulumi.get(self, "direction")

    @direction.setter
    def direction(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "direction", value)

    @_builtins.property
    @pulumi.getter
    def optional(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Indicates if list item is considered optional.
        """
        return pulumi.get(self, "optional")

    @optional.setter
    def optional(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "optional", value)

    @_builtins.property
    @pulumi.getter(name="policerName")
    def policer_name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Name of policer
        """
        return pulumi.get(self, "policer_name")

    @policer_name.setter
    def policer_name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "policer_name", value)


if not MYPY:
    class VpnInterfaceDslPppoaFeatureTemplatePvcArgsDict(TypedDict):
        atm_dialer_pool_member: NotRequired[pulumi.Input[_builtins.int]]
        """
        Dialer Pool corresponding to this pvc
          - Range: `1`-`255`
        """
        atm_dialer_pool_member_variable: NotRequired[pulumi.Input[_builtins.str]]
        """
        Variable name
        """
        atm_encapsulation_aal5mux: NotRequired[pulumi.Input[_builtins.bool]]
        """
        dialer
        """
        atm_encapsulation_aal5nlpid: NotRequired[pulumi.Input[_builtins.bool]]
        """
        aal5nlpid
        """
        atm_encapsulation_aal5snap: NotRequired[pulumi.Input[_builtins.bool]]
        """
        aal5snap
        """
        atm_vbr_nrt_maximum_burst_size: NotRequired[pulumi.Input[_builtins.int]]
        """
        Maximum Burst Size in Cells
          - Range: `1`-`65535`
        """
        atm_vbr_nrt_maximum_burst_size_variable: NotRequired[pulumi.Input[_builtins.str]]
        """
        Variable name
        """
        atm_vbr_nrt_peak_cell_rate: NotRequired[pulumi.Input[_builtins.int]]
        """
        Peak Cell Rate in Kbps
          - Range: `48`-`1015`
        """
        atm_vbr_nrt_peak_cell_rate_variable: NotRequired[pulumi.Input[_builtins.str]]
        """
        Variable name
        """
        atm_vbr_nrt_sustainable_cell_rate: NotRequired[pulumi.Input[_builtins.int]]
        """
        Peak Cell Rate in Kbps
        """
        atm_vbr_nrt_sustainable_cell_rate_variable: NotRequired[pulumi.Input[_builtins.str]]
        """
        Variable name
        """
        atm_vbr_rt_average_cell_rate: NotRequired[pulumi.Input[_builtins.int]]
        """
        Average Cell Rate in Kbps
        """
        atm_vbr_rt_average_cell_rate_variable: NotRequired[pulumi.Input[_builtins.str]]
        """
        Variable name
        """
        atm_vbr_rt_maximum_burst_size: NotRequired[pulumi.Input[_builtins.int]]
        """
        Maximum Burst Size in number of Cells
          - Range: `1`-`65535`
        """
        atm_vbr_rt_maximum_burst_size_variable: NotRequired[pulumi.Input[_builtins.str]]
        """
        Variable name
        """
        atm_vbr_rt_peak_cell_rate: NotRequired[pulumi.Input[_builtins.int]]
        """
        Peak Cell Rate in Kbps
          - Range: `48`-`25000`
        """
        atm_vbr_rt_peak_cell_rate_variable: NotRequired[pulumi.Input[_builtins.str]]
        """
        Variable name
        """
        atm_vpi_and_vci: NotRequired[pulumi.Input[_builtins.str]]
        """
        VPI/VCI
        """
        atm_vpi_and_vci_variable: NotRequired[pulumi.Input[_builtins.str]]
        """
        Variable name
        """
        optional: NotRequired[pulumi.Input[_builtins.bool]]
        """
        Indicates if list item is considered optional.
        """
elif False:
    VpnInterfaceDslPppoaFeatureTemplatePvcArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class VpnInterfaceDslPppoaFeatureTemplatePvcArgs:
    def __init__(__self__, *,
                 atm_dialer_pool_member: Optional[pulumi.Input[_builtins.int]] = None,
                 atm_dialer_pool_member_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 atm_encapsulation_aal5mux: Optional[pulumi.Input[_builtins.bool]] = None,
                 atm_encapsulation_aal5nlpid: Optional[pulumi.Input[_builtins.bool]] = None,
                 atm_encapsulation_aal5snap: Optional[pulumi.Input[_builtins.bool]] = None,
                 atm_vbr_nrt_maximum_burst_size: Optional[pulumi.Input[_builtins.int]] = None,
                 atm_vbr_nrt_maximum_burst_size_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 atm_vbr_nrt_peak_cell_rate: Optional[pulumi.Input[_builtins.int]] = None,
                 atm_vbr_nrt_peak_cell_rate_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 atm_vbr_nrt_sustainable_cell_rate: Optional[pulumi.Input[_builtins.int]] = None,
                 atm_vbr_nrt_sustainable_cell_rate_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 atm_vbr_rt_average_cell_rate: Optional[pulumi.Input[_builtins.int]] = None,
                 atm_vbr_rt_average_cell_rate_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 atm_vbr_rt_maximum_burst_size: Optional[pulumi.Input[_builtins.int]] = None,
                 atm_vbr_rt_maximum_burst_size_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 atm_vbr_rt_peak_cell_rate: Optional[pulumi.Input[_builtins.int]] = None,
                 atm_vbr_rt_peak_cell_rate_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 atm_vpi_and_vci: Optional[pulumi.Input[_builtins.str]] = None,
                 atm_vpi_and_vci_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 optional: Optional[pulumi.Input[_builtins.bool]] = None):
        """
        :param pulumi.Input[_builtins.int] atm_dialer_pool_member: Dialer Pool corresponding to this pvc
                 - Range: `1`-`255`
        :param pulumi.Input[_builtins.str] atm_dialer_pool_member_variable: Variable name
        :param pulumi.Input[_builtins.bool] atm_encapsulation_aal5mux: dialer
        :param pulumi.Input[_builtins.bool] atm_encapsulation_aal5nlpid: aal5nlpid
        :param pulumi.Input[_builtins.bool] atm_encapsulation_aal5snap: aal5snap
        :param pulumi.Input[_builtins.int] atm_vbr_nrt_maximum_burst_size: Maximum Burst Size in Cells
                 - Range: `1`-`65535`
        :param pulumi.Input[_builtins.str] atm_vbr_nrt_maximum_burst_size_variable: Variable name
        :param pulumi.Input[_builtins.int] atm_vbr_nrt_peak_cell_rate: Peak Cell Rate in Kbps
                 - Range: `48`-`1015`
        :param pulumi.Input[_builtins.str] atm_vbr_nrt_peak_cell_rate_variable: Variable name
        :param pulumi.Input[_builtins.int] atm_vbr_nrt_sustainable_cell_rate: Peak Cell Rate in Kbps
        :param pulumi.Input[_builtins.str] atm_vbr_nrt_sustainable_cell_rate_variable: Variable name
        :param pulumi.Input[_builtins.int] atm_vbr_rt_average_cell_rate: Average Cell Rate in Kbps
        :param pulumi.Input[_builtins.str] atm_vbr_rt_average_cell_rate_variable: Variable name
        :param pulumi.Input[_builtins.int] atm_vbr_rt_maximum_burst_size: Maximum Burst Size in number of Cells
                 - Range: `1`-`65535`
        :param pulumi.Input[_builtins.str] atm_vbr_rt_maximum_burst_size_variable: Variable name
        :param pulumi.Input[_builtins.int] atm_vbr_rt_peak_cell_rate: Peak Cell Rate in Kbps
                 - Range: `48`-`25000`
        :param pulumi.Input[_builtins.str] atm_vbr_rt_peak_cell_rate_variable: Variable name
        :param pulumi.Input[_builtins.str] atm_vpi_and_vci: VPI/VCI
        :param pulumi.Input[_builtins.str] atm_vpi_and_vci_variable: Variable name
        :param pulumi.Input[_builtins.bool] optional: Indicates if list item is considered optional.
        """
        if atm_dialer_pool_member is not None:
            pulumi.set(__self__, "atm_dialer_pool_member", atm_dialer_pool_member)
        if atm_dialer_pool_member_variable is not None:
            pulumi.set(__self__, "atm_dialer_pool_member_variable", atm_dialer_pool_member_variable)
        if atm_encapsulation_aal5mux is not None:
            pulumi.set(__self__, "atm_encapsulation_aal5mux", atm_encapsulation_aal5mux)
        if atm_encapsulation_aal5nlpid is not None:
            pulumi.set(__self__, "atm_encapsulation_aal5nlpid", atm_encapsulation_aal5nlpid)
        if atm_encapsulation_aal5snap is not None:
            pulumi.set(__self__, "atm_encapsulation_aal5snap", atm_encapsulation_aal5snap)
        if atm_vbr_nrt_maximum_burst_size is not None:
            pulumi.set(__self__, "atm_vbr_nrt_maximum_burst_size", atm_vbr_nrt_maximum_burst_size)
        if atm_vbr_nrt_maximum_burst_size_variable is not None:
            pulumi.set(__self__, "atm_vbr_nrt_maximum_burst_size_variable", atm_vbr_nrt_maximum_burst_size_variable)
        if atm_vbr_nrt_peak_cell_rate is not None:
            pulumi.set(__self__, "atm_vbr_nrt_peak_cell_rate", atm_vbr_nrt_peak_cell_rate)
        if atm_vbr_nrt_peak_cell_rate_variable is not None:
            pulumi.set(__self__, "atm_vbr_nrt_peak_cell_rate_variable", atm_vbr_nrt_peak_cell_rate_variable)
        if atm_vbr_nrt_sustainable_cell_rate is not None:
            pulumi.set(__self__, "atm_vbr_nrt_sustainable_cell_rate", atm_vbr_nrt_sustainable_cell_rate)
        if atm_vbr_nrt_sustainable_cell_rate_variable is not None:
            pulumi.set(__self__, "atm_vbr_nrt_sustainable_cell_rate_variable", atm_vbr_nrt_sustainable_cell_rate_variable)
        if atm_vbr_rt_average_cell_rate is not None:
            pulumi.set(__self__, "atm_vbr_rt_average_cell_rate", atm_vbr_rt_average_cell_rate)
        if atm_vbr_rt_average_cell_rate_variable is not None:
            pulumi.set(__self__, "atm_vbr_rt_average_cell_rate_variable", atm_vbr_rt_average_cell_rate_variable)
        if atm_vbr_rt_maximum_burst_size is not None:
            pulumi.set(__self__, "atm_vbr_rt_maximum_burst_size", atm_vbr_rt_maximum_burst_size)
        if atm_vbr_rt_maximum_burst_size_variable is not None:
            pulumi.set(__self__, "atm_vbr_rt_maximum_burst_size_variable", atm_vbr_rt_maximum_burst_size_variable)
        if atm_vbr_rt_peak_cell_rate is not None:
            pulumi.set(__self__, "atm_vbr_rt_peak_cell_rate", atm_vbr_rt_peak_cell_rate)
        if atm_vbr_rt_peak_cell_rate_variable is not None:
            pulumi.set(__self__, "atm_vbr_rt_peak_cell_rate_variable", atm_vbr_rt_peak_cell_rate_variable)
        if atm_vpi_and_vci is not None:
            pulumi.set(__self__, "atm_vpi_and_vci", atm_vpi_and_vci)
        if atm_vpi_and_vci_variable is not None:
            pulumi.set(__self__, "atm_vpi_and_vci_variable", atm_vpi_and_vci_variable)
        if optional is not None:
            pulumi.set(__self__, "optional", optional)

    @_builtins.property
    @pulumi.getter(name="atmDialerPoolMember")
    def atm_dialer_pool_member(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        Dialer Pool corresponding to this pvc
          - Range: `1`-`255`
        """
        return pulumi.get(self, "atm_dialer_pool_member")

    @atm_dialer_pool_member.setter
    def atm_dialer_pool_member(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "atm_dialer_pool_member", value)

    @_builtins.property
    @pulumi.getter(name="atmDialerPoolMemberVariable")
    def atm_dialer_pool_member_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "atm_dialer_pool_member_variable")

    @atm_dialer_pool_member_variable.setter
    def atm_dialer_pool_member_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "atm_dialer_pool_member_variable", value)

    @_builtins.property
    @pulumi.getter(name="atmEncapsulationAal5mux")
    def atm_encapsulation_aal5mux(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        dialer
        """
        return pulumi.get(self, "atm_encapsulation_aal5mux")

    @atm_encapsulation_aal5mux.setter
    def atm_encapsulation_aal5mux(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "atm_encapsulation_aal5mux", value)

    @_builtins.property
    @pulumi.getter(name="atmEncapsulationAal5nlpid")
    def atm_encapsulation_aal5nlpid(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        aal5nlpid
        """
        return pulumi.get(self, "atm_encapsulation_aal5nlpid")

    @atm_encapsulation_aal5nlpid.setter
    def atm_encapsulation_aal5nlpid(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "atm_encapsulation_aal5nlpid", value)

    @_builtins.property
    @pulumi.getter(name="atmEncapsulationAal5snap")
    def atm_encapsulation_aal5snap(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        aal5snap
        """
        return pulumi.get(self, "atm_encapsulation_aal5snap")

    @atm_encapsulation_aal5snap.setter
    def atm_encapsulation_aal5snap(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "atm_encapsulation_aal5snap", value)

    @_builtins.property
    @pulumi.getter(name="atmVbrNrtMaximumBurstSize")
    def atm_vbr_nrt_maximum_burst_size(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        Maximum Burst Size in Cells
          - Range: `1`-`65535`
        """
        return pulumi.get(self, "atm_vbr_nrt_maximum_burst_size")

    @atm_vbr_nrt_maximum_burst_size.setter
    def atm_vbr_nrt_maximum_burst_size(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "atm_vbr_nrt_maximum_burst_size", value)

    @_builtins.property
    @pulumi.getter(name="atmVbrNrtMaximumBurstSizeVariable")
    def atm_vbr_nrt_maximum_burst_size_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "atm_vbr_nrt_maximum_burst_size_variable")

    @atm_vbr_nrt_maximum_burst_size_variable.setter
    def atm_vbr_nrt_maximum_burst_size_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "atm_vbr_nrt_maximum_burst_size_variable", value)

    @_builtins.property
    @pulumi.getter(name="atmVbrNrtPeakCellRate")
    def atm_vbr_nrt_peak_cell_rate(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        Peak Cell Rate in Kbps
          - Range: `48`-`1015`
        """
        return pulumi.get(self, "atm_vbr_nrt_peak_cell_rate")

    @atm_vbr_nrt_peak_cell_rate.setter
    def atm_vbr_nrt_peak_cell_rate(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "atm_vbr_nrt_peak_cell_rate", value)

    @_builtins.property
    @pulumi.getter(name="atmVbrNrtPeakCellRateVariable")
    def atm_vbr_nrt_peak_cell_rate_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "atm_vbr_nrt_peak_cell_rate_variable")

    @atm_vbr_nrt_peak_cell_rate_variable.setter
    def atm_vbr_nrt_peak_cell_rate_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "atm_vbr_nrt_peak_cell_rate_variable", value)

    @_builtins.property
    @pulumi.getter(name="atmVbrNrtSustainableCellRate")
    def atm_vbr_nrt_sustainable_cell_rate(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        Peak Cell Rate in Kbps
        """
        return pulumi.get(self, "atm_vbr_nrt_sustainable_cell_rate")

    @atm_vbr_nrt_sustainable_cell_rate.setter
    def atm_vbr_nrt_sustainable_cell_rate(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "atm_vbr_nrt_sustainable_cell_rate", value)

    @_builtins.property
    @pulumi.getter(name="atmVbrNrtSustainableCellRateVariable")
    def atm_vbr_nrt_sustainable_cell_rate_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "atm_vbr_nrt_sustainable_cell_rate_variable")

    @atm_vbr_nrt_sustainable_cell_rate_variable.setter
    def atm_vbr_nrt_sustainable_cell_rate_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "atm_vbr_nrt_sustainable_cell_rate_variable", value)

    @_builtins.property
    @pulumi.getter(name="atmVbrRtAverageCellRate")
    def atm_vbr_rt_average_cell_rate(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        Average Cell Rate in Kbps
        """
        return pulumi.get(self, "atm_vbr_rt_average_cell_rate")

    @atm_vbr_rt_average_cell_rate.setter
    def atm_vbr_rt_average_cell_rate(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "atm_vbr_rt_average_cell_rate", value)

    @_builtins.property
    @pulumi.getter(name="atmVbrRtAverageCellRateVariable")
    def atm_vbr_rt_average_cell_rate_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "atm_vbr_rt_average_cell_rate_variable")

    @atm_vbr_rt_average_cell_rate_variable.setter
    def atm_vbr_rt_average_cell_rate_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "atm_vbr_rt_average_cell_rate_variable", value)

    @_builtins.property
    @pulumi.getter(name="atmVbrRtMaximumBurstSize")
    def atm_vbr_rt_maximum_burst_size(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        Maximum Burst Size in number of Cells
          - Range: `1`-`65535`
        """
        return pulumi.get(self, "atm_vbr_rt_maximum_burst_size")

    @atm_vbr_rt_maximum_burst_size.setter
    def atm_vbr_rt_maximum_burst_size(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "atm_vbr_rt_maximum_burst_size", value)

    @_builtins.property
    @pulumi.getter(name="atmVbrRtMaximumBurstSizeVariable")
    def atm_vbr_rt_maximum_burst_size_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "atm_vbr_rt_maximum_burst_size_variable")

    @atm_vbr_rt_maximum_burst_size_variable.setter
    def atm_vbr_rt_maximum_burst_size_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "atm_vbr_rt_maximum_burst_size_variable", value)

    @_builtins.property
    @pulumi.getter(name="atmVbrRtPeakCellRate")
    def atm_vbr_rt_peak_cell_rate(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        Peak Cell Rate in Kbps
          - Range: `48`-`25000`
        """
        return pulumi.get(self, "atm_vbr_rt_peak_cell_rate")

    @atm_vbr_rt_peak_cell_rate.setter
    def atm_vbr_rt_peak_cell_rate(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "atm_vbr_rt_peak_cell_rate", value)

    @_builtins.property
    @pulumi.getter(name="atmVbrRtPeakCellRateVariable")
    def atm_vbr_rt_peak_cell_rate_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "atm_vbr_rt_peak_cell_rate_variable")

    @atm_vbr_rt_peak_cell_rate_variable.setter
    def atm_vbr_rt_peak_cell_rate_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "atm_vbr_rt_peak_cell_rate_variable", value)

    @_builtins.property
    @pulumi.getter(name="atmVpiAndVci")
    def atm_vpi_and_vci(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        VPI/VCI
        """
        return pulumi.get(self, "atm_vpi_and_vci")

    @atm_vpi_and_vci.setter
    def atm_vpi_and_vci(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "atm_vpi_and_vci", value)

    @_builtins.property
    @pulumi.getter(name="atmVpiAndVciVariable")
    def atm_vpi_and_vci_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "atm_vpi_and_vci_variable")

    @atm_vpi_and_vci_variable.setter
    def atm_vpi_and_vci_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "atm_vpi_and_vci_variable", value)

    @_builtins.property
    @pulumi.getter
    def optional(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Indicates if list item is considered optional.
        """
        return pulumi.get(self, "optional")

    @optional.setter
    def optional(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "optional", value)


if not MYPY:
    class VpnInterfaceDslPppoaFeatureTemplateTunnelInterfaceEncapsulationArgsDict(TypedDict):
        encapsulation: NotRequired[pulumi.Input[_builtins.str]]
        """
        Encapsulation
          - Choices: `gre`, `ipsec`
        """
        optional: NotRequired[pulumi.Input[_builtins.bool]]
        """
        Indicates if list item is considered optional.
        """
        preference: NotRequired[pulumi.Input[_builtins.int]]
        """
        Set preference for TLOC
          - Range: `0`-`4294967295`
        """
        preference_variable: NotRequired[pulumi.Input[_builtins.str]]
        """
        Variable name
        """
        weight: NotRequired[pulumi.Input[_builtins.int]]
        """
        Set weight for TLOC
          - Range: `1`-`255`
          - Default value: `1`
        """
        weight_variable: NotRequired[pulumi.Input[_builtins.str]]
        """
        Variable name
        """
elif False:
    VpnInterfaceDslPppoaFeatureTemplateTunnelInterfaceEncapsulationArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class VpnInterfaceDslPppoaFeatureTemplateTunnelInterfaceEncapsulationArgs:
    def __init__(__self__, *,
                 encapsulation: Optional[pulumi.Input[_builtins.str]] = None,
                 optional: Optional[pulumi.Input[_builtins.bool]] = None,
                 preference: Optional[pulumi.Input[_builtins.int]] = None,
                 preference_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 weight: Optional[pulumi.Input[_builtins.int]] = None,
                 weight_variable: Optional[pulumi.Input[_builtins.str]] = None):
        """
        :param pulumi.Input[_builtins.str] encapsulation: Encapsulation
                 - Choices: `gre`, `ipsec`
        :param pulumi.Input[_builtins.bool] optional: Indicates if list item is considered optional.
        :param pulumi.Input[_builtins.int] preference: Set preference for TLOC
                 - Range: `0`-`4294967295`
        :param pulumi.Input[_builtins.str] preference_variable: Variable name
        :param pulumi.Input[_builtins.int] weight: Set weight for TLOC
                 - Range: `1`-`255`
                 - Default value: `1`
        :param pulumi.Input[_builtins.str] weight_variable: Variable name
        """
        if encapsulation is not None:
            pulumi.set(__self__, "encapsulation", encapsulation)
        if optional is not None:
            pulumi.set(__self__, "optional", optional)
        if preference is not None:
            pulumi.set(__self__, "preference", preference)
        if preference_variable is not None:
            pulumi.set(__self__, "preference_variable", preference_variable)
        if weight is not None:
            pulumi.set(__self__, "weight", weight)
        if weight_variable is not None:
            pulumi.set(__self__, "weight_variable", weight_variable)

    @_builtins.property
    @pulumi.getter
    def encapsulation(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Encapsulation
          - Choices: `gre`, `ipsec`
        """
        return pulumi.get(self, "encapsulation")

    @encapsulation.setter
    def encapsulation(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "encapsulation", value)

    @_builtins.property
    @pulumi.getter
    def optional(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Indicates if list item is considered optional.
        """
        return pulumi.get(self, "optional")

    @optional.setter
    def optional(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "optional", value)

    @_builtins.property
    @pulumi.getter
    def preference(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        Set preference for TLOC
          - Range: `0`-`4294967295`
        """
        return pulumi.get(self, "preference")

    @preference.setter
    def preference(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "preference", value)

    @_builtins.property
    @pulumi.getter(name="preferenceVariable")
    def preference_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "preference_variable")

    @preference_variable.setter
    def preference_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "preference_variable", value)

    @_builtins.property
    @pulumi.getter
    def weight(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        Set weight for TLOC
          - Range: `1`-`255`
          - Default value: `1`
        """
        return pulumi.get(self, "weight")

    @weight.setter
    def weight(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "weight", value)

    @_builtins.property
    @pulumi.getter(name="weightVariable")
    def weight_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "weight_variable")

    @weight_variable.setter
    def weight_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "weight_variable", value)


if not MYPY:
    class VpnInterfaceDslPppoaFeatureTemplateVdslConfigurationArgsDict(TypedDict):
        controller_vdsl_slot: NotRequired[pulumi.Input[_builtins.str]]
        """
        Set module slot/subslot/port number
        """
        controller_vdsl_slot_variable: NotRequired[pulumi.Input[_builtins.str]]
        """
        Variable name
        """
        mode_adsl1: NotRequired[pulumi.Input[_builtins.bool]]
        """
        Set VDSL operating mode to adsl1
          - Default value: `false`
        """
        mode_adsl2: NotRequired[pulumi.Input[_builtins.bool]]
        """
        Set VDSL operating mode to adsl2
          - Default value: `false`
        """
        mode_adsl2plus: NotRequired[pulumi.Input[_builtins.bool]]
        """
        Set VDSL operating mode to adsl2plus
          - Default value: `false`
        """
        mode_ansi: NotRequired[pulumi.Input[_builtins.bool]]
        """
        Set VDSL operating mode to ansi
          - Default value: `false`
        """
        mode_vdsl2: NotRequired[pulumi.Input[_builtins.bool]]
        """
        Set VDSL operating mode to vdsl2
          - Default value: `false`
        """
        optional: NotRequired[pulumi.Input[_builtins.bool]]
        """
        Indicates if list item is considered optional.
        """
        sra: NotRequired[pulumi.Input[_builtins.bool]]
        """
        Seamless rate adaption
          - Default value: `true`
        """
        vdsl_modem_configuration: NotRequired[pulumi.Input[_builtins.str]]
        """
        Set module slot/subslot/port number
        """
        vdsl_modem_configuration_variable: NotRequired[pulumi.Input[_builtins.str]]
        """
        Variable name
        """
elif False:
    VpnInterfaceDslPppoaFeatureTemplateVdslConfigurationArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class VpnInterfaceDslPppoaFeatureTemplateVdslConfigurationArgs:
    def __init__(__self__, *,
                 controller_vdsl_slot: Optional[pulumi.Input[_builtins.str]] = None,
                 controller_vdsl_slot_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 mode_adsl1: Optional[pulumi.Input[_builtins.bool]] = None,
                 mode_adsl2: Optional[pulumi.Input[_builtins.bool]] = None,
                 mode_adsl2plus: Optional[pulumi.Input[_builtins.bool]] = None,
                 mode_ansi: Optional[pulumi.Input[_builtins.bool]] = None,
                 mode_vdsl2: Optional[pulumi.Input[_builtins.bool]] = None,
                 optional: Optional[pulumi.Input[_builtins.bool]] = None,
                 sra: Optional[pulumi.Input[_builtins.bool]] = None,
                 vdsl_modem_configuration: Optional[pulumi.Input[_builtins.str]] = None,
                 vdsl_modem_configuration_variable: Optional[pulumi.Input[_builtins.str]] = None):
        """
        :param pulumi.Input[_builtins.str] controller_vdsl_slot: Set module slot/subslot/port number
        :param pulumi.Input[_builtins.str] controller_vdsl_slot_variable: Variable name
        :param pulumi.Input[_builtins.bool] mode_adsl1: Set VDSL operating mode to adsl1
                 - Default value: `false`
        :param pulumi.Input[_builtins.bool] mode_adsl2: Set VDSL operating mode to adsl2
                 - Default value: `false`
        :param pulumi.Input[_builtins.bool] mode_adsl2plus: Set VDSL operating mode to adsl2plus
                 - Default value: `false`
        :param pulumi.Input[_builtins.bool] mode_ansi: Set VDSL operating mode to ansi
                 - Default value: `false`
        :param pulumi.Input[_builtins.bool] mode_vdsl2: Set VDSL operating mode to vdsl2
                 - Default value: `false`
        :param pulumi.Input[_builtins.bool] optional: Indicates if list item is considered optional.
        :param pulumi.Input[_builtins.bool] sra: Seamless rate adaption
                 - Default value: `true`
        :param pulumi.Input[_builtins.str] vdsl_modem_configuration: Set module slot/subslot/port number
        :param pulumi.Input[_builtins.str] vdsl_modem_configuration_variable: Variable name
        """
        if controller_vdsl_slot is not None:
            pulumi.set(__self__, "controller_vdsl_slot", controller_vdsl_slot)
        if controller_vdsl_slot_variable is not None:
            pulumi.set(__self__, "controller_vdsl_slot_variable", controller_vdsl_slot_variable)
        if mode_adsl1 is not None:
            pulumi.set(__self__, "mode_adsl1", mode_adsl1)
        if mode_adsl2 is not None:
            pulumi.set(__self__, "mode_adsl2", mode_adsl2)
        if mode_adsl2plus is not None:
            pulumi.set(__self__, "mode_adsl2plus", mode_adsl2plus)
        if mode_ansi is not None:
            pulumi.set(__self__, "mode_ansi", mode_ansi)
        if mode_vdsl2 is not None:
            pulumi.set(__self__, "mode_vdsl2", mode_vdsl2)
        if optional is not None:
            pulumi.set(__self__, "optional", optional)
        if sra is not None:
            pulumi.set(__self__, "sra", sra)
        if vdsl_modem_configuration is not None:
            pulumi.set(__self__, "vdsl_modem_configuration", vdsl_modem_configuration)
        if vdsl_modem_configuration_variable is not None:
            pulumi.set(__self__, "vdsl_modem_configuration_variable", vdsl_modem_configuration_variable)

    @_builtins.property
    @pulumi.getter(name="controllerVdslSlot")
    def controller_vdsl_slot(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Set module slot/subslot/port number
        """
        return pulumi.get(self, "controller_vdsl_slot")

    @controller_vdsl_slot.setter
    def controller_vdsl_slot(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "controller_vdsl_slot", value)

    @_builtins.property
    @pulumi.getter(name="controllerVdslSlotVariable")
    def controller_vdsl_slot_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "controller_vdsl_slot_variable")

    @controller_vdsl_slot_variable.setter
    def controller_vdsl_slot_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "controller_vdsl_slot_variable", value)

    @_builtins.property
    @pulumi.getter(name="modeAdsl1")
    def mode_adsl1(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Set VDSL operating mode to adsl1
          - Default value: `false`
        """
        return pulumi.get(self, "mode_adsl1")

    @mode_adsl1.setter
    def mode_adsl1(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "mode_adsl1", value)

    @_builtins.property
    @pulumi.getter(name="modeAdsl2")
    def mode_adsl2(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Set VDSL operating mode to adsl2
          - Default value: `false`
        """
        return pulumi.get(self, "mode_adsl2")

    @mode_adsl2.setter
    def mode_adsl2(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "mode_adsl2", value)

    @_builtins.property
    @pulumi.getter(name="modeAdsl2plus")
    def mode_adsl2plus(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Set VDSL operating mode to adsl2plus
          - Default value: `false`
        """
        return pulumi.get(self, "mode_adsl2plus")

    @mode_adsl2plus.setter
    def mode_adsl2plus(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "mode_adsl2plus", value)

    @_builtins.property
    @pulumi.getter(name="modeAnsi")
    def mode_ansi(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Set VDSL operating mode to ansi
          - Default value: `false`
        """
        return pulumi.get(self, "mode_ansi")

    @mode_ansi.setter
    def mode_ansi(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "mode_ansi", value)

    @_builtins.property
    @pulumi.getter(name="modeVdsl2")
    def mode_vdsl2(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Set VDSL operating mode to vdsl2
          - Default value: `false`
        """
        return pulumi.get(self, "mode_vdsl2")

    @mode_vdsl2.setter
    def mode_vdsl2(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "mode_vdsl2", value)

    @_builtins.property
    @pulumi.getter
    def optional(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Indicates if list item is considered optional.
        """
        return pulumi.get(self, "optional")

    @optional.setter
    def optional(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "optional", value)

    @_builtins.property
    @pulumi.getter
    def sra(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Seamless rate adaption
          - Default value: `true`
        """
        return pulumi.get(self, "sra")

    @sra.setter
    def sra(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "sra", value)

    @_builtins.property
    @pulumi.getter(name="vdslModemConfiguration")
    def vdsl_modem_configuration(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Set module slot/subslot/port number
        """
        return pulumi.get(self, "vdsl_modem_configuration")

    @vdsl_modem_configuration.setter
    def vdsl_modem_configuration(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "vdsl_modem_configuration", value)

    @_builtins.property
    @pulumi.getter(name="vdslModemConfigurationVariable")
    def vdsl_modem_configuration_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "vdsl_modem_configuration_variable")

    @vdsl_modem_configuration_variable.setter
    def vdsl_modem_configuration_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "vdsl_modem_configuration_variable", value)


if not MYPY:
    class VpnInterfaceDslPppoeFeatureTemplateAccessListArgsDict(TypedDict):
        acl_name: NotRequired[pulumi.Input[_builtins.str]]
        """
        Name of access list
        """
        acl_name_variable: NotRequired[pulumi.Input[_builtins.str]]
        """
        Variable name
        """
        direction: NotRequired[pulumi.Input[_builtins.str]]
        """
        Direction
          - Choices: `in`, `out`
        """
        optional: NotRequired[pulumi.Input[_builtins.bool]]
        """
        Indicates if list item is considered optional.
        """
elif False:
    VpnInterfaceDslPppoeFeatureTemplateAccessListArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class VpnInterfaceDslPppoeFeatureTemplateAccessListArgs:
    def __init__(__self__, *,
                 acl_name: Optional[pulumi.Input[_builtins.str]] = None,
                 acl_name_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 direction: Optional[pulumi.Input[_builtins.str]] = None,
                 optional: Optional[pulumi.Input[_builtins.bool]] = None):
        """
        :param pulumi.Input[_builtins.str] acl_name: Name of access list
        :param pulumi.Input[_builtins.str] acl_name_variable: Variable name
        :param pulumi.Input[_builtins.str] direction: Direction
                 - Choices: `in`, `out`
        :param pulumi.Input[_builtins.bool] optional: Indicates if list item is considered optional.
        """
        if acl_name is not None:
            pulumi.set(__self__, "acl_name", acl_name)
        if acl_name_variable is not None:
            pulumi.set(__self__, "acl_name_variable", acl_name_variable)
        if direction is not None:
            pulumi.set(__self__, "direction", direction)
        if optional is not None:
            pulumi.set(__self__, "optional", optional)

    @_builtins.property
    @pulumi.getter(name="aclName")
    def acl_name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Name of access list
        """
        return pulumi.get(self, "acl_name")

    @acl_name.setter
    def acl_name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "acl_name", value)

    @_builtins.property
    @pulumi.getter(name="aclNameVariable")
    def acl_name_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "acl_name_variable")

    @acl_name_variable.setter
    def acl_name_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "acl_name_variable", value)

    @_builtins.property
    @pulumi.getter
    def direction(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Direction
          - Choices: `in`, `out`
        """
        return pulumi.get(self, "direction")

    @direction.setter
    def direction(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "direction", value)

    @_builtins.property
    @pulumi.getter
    def optional(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Indicates if list item is considered optional.
        """
        return pulumi.get(self, "optional")

    @optional.setter
    def optional(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "optional", value)


if not MYPY:
    class VpnInterfaceDslPppoeFeatureTemplateNatPortForwardArgsDict(TypedDict):
        optional: NotRequired[pulumi.Input[_builtins.bool]]
        """
        Indicates if list item is considered optional.
        """
        port_end_range: NotRequired[pulumi.Input[_builtins.int]]
        """
        Ending port of port range
          - Range: `0`-`65535`
        """
        port_start_range: NotRequired[pulumi.Input[_builtins.int]]
        """
        Starting port of port range
          - Range: `0`-`65535`
        """
        private_ip_address: NotRequired[pulumi.Input[_builtins.str]]
        """
        Private IP Address to translate to
        """
        private_ip_address_variable: NotRequired[pulumi.Input[_builtins.str]]
        """
        Variable name
        """
        private_vpn: NotRequired[pulumi.Input[_builtins.int]]
        """
        VPN in which private IP Address resides
          - Range: `0`-`65535`
        """
        private_vpn_variable: NotRequired[pulumi.Input[_builtins.str]]
        """
        Variable name
        """
        protocol: NotRequired[pulumi.Input[_builtins.str]]
        """
        Layer 4 protocol to apply port forwarding to
          - Choices: `tcp`, `udp`
        """
elif False:
    VpnInterfaceDslPppoeFeatureTemplateNatPortForwardArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class VpnInterfaceDslPppoeFeatureTemplateNatPortForwardArgs:
    def __init__(__self__, *,
                 optional: Optional[pulumi.Input[_builtins.bool]] = None,
                 port_end_range: Optional[pulumi.Input[_builtins.int]] = None,
                 port_start_range: Optional[pulumi.Input[_builtins.int]] = None,
                 private_ip_address: Optional[pulumi.Input[_builtins.str]] = None,
                 private_ip_address_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 private_vpn: Optional[pulumi.Input[_builtins.int]] = None,
                 private_vpn_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 protocol: Optional[pulumi.Input[_builtins.str]] = None):
        """
        :param pulumi.Input[_builtins.bool] optional: Indicates if list item is considered optional.
        :param pulumi.Input[_builtins.int] port_end_range: Ending port of port range
                 - Range: `0`-`65535`
        :param pulumi.Input[_builtins.int] port_start_range: Starting port of port range
                 - Range: `0`-`65535`
        :param pulumi.Input[_builtins.str] private_ip_address: Private IP Address to translate to
        :param pulumi.Input[_builtins.str] private_ip_address_variable: Variable name
        :param pulumi.Input[_builtins.int] private_vpn: VPN in which private IP Address resides
                 - Range: `0`-`65535`
        :param pulumi.Input[_builtins.str] private_vpn_variable: Variable name
        :param pulumi.Input[_builtins.str] protocol: Layer 4 protocol to apply port forwarding to
                 - Choices: `tcp`, `udp`
        """
        if optional is not None:
            pulumi.set(__self__, "optional", optional)
        if port_end_range is not None:
            pulumi.set(__self__, "port_end_range", port_end_range)
        if port_start_range is not None:
            pulumi.set(__self__, "port_start_range", port_start_range)
        if private_ip_address is not None:
            pulumi.set(__self__, "private_ip_address", private_ip_address)
        if private_ip_address_variable is not None:
            pulumi.set(__self__, "private_ip_address_variable", private_ip_address_variable)
        if private_vpn is not None:
            pulumi.set(__self__, "private_vpn", private_vpn)
        if private_vpn_variable is not None:
            pulumi.set(__self__, "private_vpn_variable", private_vpn_variable)
        if protocol is not None:
            pulumi.set(__self__, "protocol", protocol)

    @_builtins.property
    @pulumi.getter
    def optional(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Indicates if list item is considered optional.
        """
        return pulumi.get(self, "optional")

    @optional.setter
    def optional(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "optional", value)

    @_builtins.property
    @pulumi.getter(name="portEndRange")
    def port_end_range(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        Ending port of port range
          - Range: `0`-`65535`
        """
        return pulumi.get(self, "port_end_range")

    @port_end_range.setter
    def port_end_range(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "port_end_range", value)

    @_builtins.property
    @pulumi.getter(name="portStartRange")
    def port_start_range(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        Starting port of port range
          - Range: `0`-`65535`
        """
        return pulumi.get(self, "port_start_range")

    @port_start_range.setter
    def port_start_range(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "port_start_range", value)

    @_builtins.property
    @pulumi.getter(name="privateIpAddress")
    def private_ip_address(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Private IP Address to translate to
        """
        return pulumi.get(self, "private_ip_address")

    @private_ip_address.setter
    def private_ip_address(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "private_ip_address", value)

    @_builtins.property
    @pulumi.getter(name="privateIpAddressVariable")
    def private_ip_address_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "private_ip_address_variable")

    @private_ip_address_variable.setter
    def private_ip_address_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "private_ip_address_variable", value)

    @_builtins.property
    @pulumi.getter(name="privateVpn")
    def private_vpn(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        VPN in which private IP Address resides
          - Range: `0`-`65535`
        """
        return pulumi.get(self, "private_vpn")

    @private_vpn.setter
    def private_vpn(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "private_vpn", value)

    @_builtins.property
    @pulumi.getter(name="privateVpnVariable")
    def private_vpn_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "private_vpn_variable")

    @private_vpn_variable.setter
    def private_vpn_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "private_vpn_variable", value)

    @_builtins.property
    @pulumi.getter
    def protocol(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Layer 4 protocol to apply port forwarding to
          - Choices: `tcp`, `udp`
        """
        return pulumi.get(self, "protocol")

    @protocol.setter
    def protocol(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "protocol", value)


if not MYPY:
    class VpnInterfaceDslPppoeFeatureTemplatePolicerArgsDict(TypedDict):
        direction: NotRequired[pulumi.Input[_builtins.str]]
        """
        Direction
          - Choices: `in`, `out`
        """
        optional: NotRequired[pulumi.Input[_builtins.bool]]
        """
        Indicates if list item is considered optional.
        """
        policer_name: NotRequired[pulumi.Input[_builtins.str]]
        """
        Name of policer
        """
elif False:
    VpnInterfaceDslPppoeFeatureTemplatePolicerArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class VpnInterfaceDslPppoeFeatureTemplatePolicerArgs:
    def __init__(__self__, *,
                 direction: Optional[pulumi.Input[_builtins.str]] = None,
                 optional: Optional[pulumi.Input[_builtins.bool]] = None,
                 policer_name: Optional[pulumi.Input[_builtins.str]] = None):
        """
        :param pulumi.Input[_builtins.str] direction: Direction
                 - Choices: `in`, `out`
        :param pulumi.Input[_builtins.bool] optional: Indicates if list item is considered optional.
        :param pulumi.Input[_builtins.str] policer_name: Name of policer
        """
        if direction is not None:
            pulumi.set(__self__, "direction", direction)
        if optional is not None:
            pulumi.set(__self__, "optional", optional)
        if policer_name is not None:
            pulumi.set(__self__, "policer_name", policer_name)

    @_builtins.property
    @pulumi.getter
    def direction(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Direction
          - Choices: `in`, `out`
        """
        return pulumi.get(self, "direction")

    @direction.setter
    def direction(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "direction", value)

    @_builtins.property
    @pulumi.getter
    def optional(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Indicates if list item is considered optional.
        """
        return pulumi.get(self, "optional")

    @optional.setter
    def optional(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "optional", value)

    @_builtins.property
    @pulumi.getter(name="policerName")
    def policer_name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Name of policer
        """
        return pulumi.get(self, "policer_name")

    @policer_name.setter
    def policer_name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "policer_name", value)


if not MYPY:
    class VpnInterfaceDslPppoeFeatureTemplateTunnelInterfaceEncapsulationArgsDict(TypedDict):
        encapsulation: NotRequired[pulumi.Input[_builtins.str]]
        """
        Encapsulation
          - Choices: `gre`, `ipsec`
        """
        optional: NotRequired[pulumi.Input[_builtins.bool]]
        """
        Indicates if list item is considered optional.
        """
        preference: NotRequired[pulumi.Input[_builtins.int]]
        """
        Set preference for TLOC
          - Range: `0`-`4294967295`
        """
        preference_variable: NotRequired[pulumi.Input[_builtins.str]]
        """
        Variable name
        """
        weight: NotRequired[pulumi.Input[_builtins.int]]
        """
        Set weight for TLOC
          - Range: `1`-`255`
          - Default value: `1`
        """
        weight_variable: NotRequired[pulumi.Input[_builtins.str]]
        """
        Variable name
        """
elif False:
    VpnInterfaceDslPppoeFeatureTemplateTunnelInterfaceEncapsulationArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class VpnInterfaceDslPppoeFeatureTemplateTunnelInterfaceEncapsulationArgs:
    def __init__(__self__, *,
                 encapsulation: Optional[pulumi.Input[_builtins.str]] = None,
                 optional: Optional[pulumi.Input[_builtins.bool]] = None,
                 preference: Optional[pulumi.Input[_builtins.int]] = None,
                 preference_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 weight: Optional[pulumi.Input[_builtins.int]] = None,
                 weight_variable: Optional[pulumi.Input[_builtins.str]] = None):
        """
        :param pulumi.Input[_builtins.str] encapsulation: Encapsulation
                 - Choices: `gre`, `ipsec`
        :param pulumi.Input[_builtins.bool] optional: Indicates if list item is considered optional.
        :param pulumi.Input[_builtins.int] preference: Set preference for TLOC
                 - Range: `0`-`4294967295`
        :param pulumi.Input[_builtins.str] preference_variable: Variable name
        :param pulumi.Input[_builtins.int] weight: Set weight for TLOC
                 - Range: `1`-`255`
                 - Default value: `1`
        :param pulumi.Input[_builtins.str] weight_variable: Variable name
        """
        if encapsulation is not None:
            pulumi.set(__self__, "encapsulation", encapsulation)
        if optional is not None:
            pulumi.set(__self__, "optional", optional)
        if preference is not None:
            pulumi.set(__self__, "preference", preference)
        if preference_variable is not None:
            pulumi.set(__self__, "preference_variable", preference_variable)
        if weight is not None:
            pulumi.set(__self__, "weight", weight)
        if weight_variable is not None:
            pulumi.set(__self__, "weight_variable", weight_variable)

    @_builtins.property
    @pulumi.getter
    def encapsulation(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Encapsulation
          - Choices: `gre`, `ipsec`
        """
        return pulumi.get(self, "encapsulation")

    @encapsulation.setter
    def encapsulation(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "encapsulation", value)

    @_builtins.property
    @pulumi.getter
    def optional(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Indicates if list item is considered optional.
        """
        return pulumi.get(self, "optional")

    @optional.setter
    def optional(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "optional", value)

    @_builtins.property
    @pulumi.getter
    def preference(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        Set preference for TLOC
          - Range: `0`-`4294967295`
        """
        return pulumi.get(self, "preference")

    @preference.setter
    def preference(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "preference", value)

    @_builtins.property
    @pulumi.getter(name="preferenceVariable")
    def preference_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "preference_variable")

    @preference_variable.setter
    def preference_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "preference_variable", value)

    @_builtins.property
    @pulumi.getter
    def weight(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        Set weight for TLOC
          - Range: `1`-`255`
          - Default value: `1`
        """
        return pulumi.get(self, "weight")

    @weight.setter
    def weight(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "weight", value)

    @_builtins.property
    @pulumi.getter(name="weightVariable")
    def weight_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "weight_variable")

    @weight_variable.setter
    def weight_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "weight_variable", value)


if not MYPY:
    class VpnInterfaceDslPppoeFeatureTemplateVdslConfigurationArgsDict(TypedDict):
        controller_vdsl_slot: NotRequired[pulumi.Input[_builtins.str]]
        """
        Set module slot/subslot/port number
        """
        controller_vdsl_slot_variable: NotRequired[pulumi.Input[_builtins.str]]
        """
        Variable name
        """
        mode_adsl1: NotRequired[pulumi.Input[_builtins.bool]]
        """
        Set VDSL operating mode to adsl1
          - Default value: `false`
        """
        mode_adsl2: NotRequired[pulumi.Input[_builtins.bool]]
        """
        Set VDSL operating mode to adsl2
          - Default value: `false`
        """
        mode_adsl2plus: NotRequired[pulumi.Input[_builtins.bool]]
        """
        Set VDSL operating mode to adsl2plus
          - Default value: `false`
        """
        mode_ansi: NotRequired[pulumi.Input[_builtins.bool]]
        """
        Set VDSL operating mode to ansi
          - Default value: `false`
        """
        mode_vdsl2: NotRequired[pulumi.Input[_builtins.bool]]
        """
        Set VDSL operating mode to vdsl2
          - Default value: `false`
        """
        optional: NotRequired[pulumi.Input[_builtins.bool]]
        """
        Indicates if list item is considered optional.
        """
        sra: NotRequired[pulumi.Input[_builtins.bool]]
        """
        Seamless rate adaption
          - Default value: `true`
        """
        vdsl_modem_configuration: NotRequired[pulumi.Input[_builtins.str]]
        """
        Set module slot/subslot/port number
        """
        vdsl_modem_configuration_variable: NotRequired[pulumi.Input[_builtins.str]]
        """
        Variable name
        """
elif False:
    VpnInterfaceDslPppoeFeatureTemplateVdslConfigurationArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class VpnInterfaceDslPppoeFeatureTemplateVdslConfigurationArgs:
    def __init__(__self__, *,
                 controller_vdsl_slot: Optional[pulumi.Input[_builtins.str]] = None,
                 controller_vdsl_slot_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 mode_adsl1: Optional[pulumi.Input[_builtins.bool]] = None,
                 mode_adsl2: Optional[pulumi.Input[_builtins.bool]] = None,
                 mode_adsl2plus: Optional[pulumi.Input[_builtins.bool]] = None,
                 mode_ansi: Optional[pulumi.Input[_builtins.bool]] = None,
                 mode_vdsl2: Optional[pulumi.Input[_builtins.bool]] = None,
                 optional: Optional[pulumi.Input[_builtins.bool]] = None,
                 sra: Optional[pulumi.Input[_builtins.bool]] = None,
                 vdsl_modem_configuration: Optional[pulumi.Input[_builtins.str]] = None,
                 vdsl_modem_configuration_variable: Optional[pulumi.Input[_builtins.str]] = None):
        """
        :param pulumi.Input[_builtins.str] controller_vdsl_slot: Set module slot/subslot/port number
        :param pulumi.Input[_builtins.str] controller_vdsl_slot_variable: Variable name
        :param pulumi.Input[_builtins.bool] mode_adsl1: Set VDSL operating mode to adsl1
                 - Default value: `false`
        :param pulumi.Input[_builtins.bool] mode_adsl2: Set VDSL operating mode to adsl2
                 - Default value: `false`
        :param pulumi.Input[_builtins.bool] mode_adsl2plus: Set VDSL operating mode to adsl2plus
                 - Default value: `false`
        :param pulumi.Input[_builtins.bool] mode_ansi: Set VDSL operating mode to ansi
                 - Default value: `false`
        :param pulumi.Input[_builtins.bool] mode_vdsl2: Set VDSL operating mode to vdsl2
                 - Default value: `false`
        :param pulumi.Input[_builtins.bool] optional: Indicates if list item is considered optional.
        :param pulumi.Input[_builtins.bool] sra: Seamless rate adaption
                 - Default value: `true`
        :param pulumi.Input[_builtins.str] vdsl_modem_configuration: Set module slot/subslot/port number
        :param pulumi.Input[_builtins.str] vdsl_modem_configuration_variable: Variable name
        """
        if controller_vdsl_slot is not None:
            pulumi.set(__self__, "controller_vdsl_slot", controller_vdsl_slot)
        if controller_vdsl_slot_variable is not None:
            pulumi.set(__self__, "controller_vdsl_slot_variable", controller_vdsl_slot_variable)
        if mode_adsl1 is not None:
            pulumi.set(__self__, "mode_adsl1", mode_adsl1)
        if mode_adsl2 is not None:
            pulumi.set(__self__, "mode_adsl2", mode_adsl2)
        if mode_adsl2plus is not None:
            pulumi.set(__self__, "mode_adsl2plus", mode_adsl2plus)
        if mode_ansi is not None:
            pulumi.set(__self__, "mode_ansi", mode_ansi)
        if mode_vdsl2 is not None:
            pulumi.set(__self__, "mode_vdsl2", mode_vdsl2)
        if optional is not None:
            pulumi.set(__self__, "optional", optional)
        if sra is not None:
            pulumi.set(__self__, "sra", sra)
        if vdsl_modem_configuration is not None:
            pulumi.set(__self__, "vdsl_modem_configuration", vdsl_modem_configuration)
        if vdsl_modem_configuration_variable is not None:
            pulumi.set(__self__, "vdsl_modem_configuration_variable", vdsl_modem_configuration_variable)

    @_builtins.property
    @pulumi.getter(name="controllerVdslSlot")
    def controller_vdsl_slot(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Set module slot/subslot/port number
        """
        return pulumi.get(self, "controller_vdsl_slot")

    @controller_vdsl_slot.setter
    def controller_vdsl_slot(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "controller_vdsl_slot", value)

    @_builtins.property
    @pulumi.getter(name="controllerVdslSlotVariable")
    def controller_vdsl_slot_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "controller_vdsl_slot_variable")

    @controller_vdsl_slot_variable.setter
    def controller_vdsl_slot_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "controller_vdsl_slot_variable", value)

    @_builtins.property
    @pulumi.getter(name="modeAdsl1")
    def mode_adsl1(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Set VDSL operating mode to adsl1
          - Default value: `false`
        """
        return pulumi.get(self, "mode_adsl1")

    @mode_adsl1.setter
    def mode_adsl1(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "mode_adsl1", value)

    @_builtins.property
    @pulumi.getter(name="modeAdsl2")
    def mode_adsl2(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Set VDSL operating mode to adsl2
          - Default value: `false`
        """
        return pulumi.get(self, "mode_adsl2")

    @mode_adsl2.setter
    def mode_adsl2(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "mode_adsl2", value)

    @_builtins.property
    @pulumi.getter(name="modeAdsl2plus")
    def mode_adsl2plus(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Set VDSL operating mode to adsl2plus
          - Default value: `false`
        """
        return pulumi.get(self, "mode_adsl2plus")

    @mode_adsl2plus.setter
    def mode_adsl2plus(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "mode_adsl2plus", value)

    @_builtins.property
    @pulumi.getter(name="modeAnsi")
    def mode_ansi(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Set VDSL operating mode to ansi
          - Default value: `false`
        """
        return pulumi.get(self, "mode_ansi")

    @mode_ansi.setter
    def mode_ansi(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "mode_ansi", value)

    @_builtins.property
    @pulumi.getter(name="modeVdsl2")
    def mode_vdsl2(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Set VDSL operating mode to vdsl2
          - Default value: `false`
        """
        return pulumi.get(self, "mode_vdsl2")

    @mode_vdsl2.setter
    def mode_vdsl2(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "mode_vdsl2", value)

    @_builtins.property
    @pulumi.getter
    def optional(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Indicates if list item is considered optional.
        """
        return pulumi.get(self, "optional")

    @optional.setter
    def optional(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "optional", value)

    @_builtins.property
    @pulumi.getter
    def sra(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Seamless rate adaption
          - Default value: `true`
        """
        return pulumi.get(self, "sra")

    @sra.setter
    def sra(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "sra", value)

    @_builtins.property
    @pulumi.getter(name="vdslModemConfiguration")
    def vdsl_modem_configuration(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Set module slot/subslot/port number
        """
        return pulumi.get(self, "vdsl_modem_configuration")

    @vdsl_modem_configuration.setter
    def vdsl_modem_configuration(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "vdsl_modem_configuration", value)

    @_builtins.property
    @pulumi.getter(name="vdslModemConfigurationVariable")
    def vdsl_modem_configuration_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "vdsl_modem_configuration_variable")

    @vdsl_modem_configuration_variable.setter
    def vdsl_modem_configuration_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "vdsl_modem_configuration_variable", value)


if not MYPY:
    class VpnInterfaceEthernetPppoeFeatureTemplateAccessListArgsDict(TypedDict):
        acl_name: NotRequired[pulumi.Input[_builtins.str]]
        """
        Name of access list
        """
        acl_name_variable: NotRequired[pulumi.Input[_builtins.str]]
        """
        Variable name
        """
        direction: NotRequired[pulumi.Input[_builtins.str]]
        """
        Direction
          - Choices: `in`, `out`
        """
        optional: NotRequired[pulumi.Input[_builtins.bool]]
        """
        Indicates if list item is considered optional.
        """
elif False:
    VpnInterfaceEthernetPppoeFeatureTemplateAccessListArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class VpnInterfaceEthernetPppoeFeatureTemplateAccessListArgs:
    def __init__(__self__, *,
                 acl_name: Optional[pulumi.Input[_builtins.str]] = None,
                 acl_name_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 direction: Optional[pulumi.Input[_builtins.str]] = None,
                 optional: Optional[pulumi.Input[_builtins.bool]] = None):
        """
        :param pulumi.Input[_builtins.str] acl_name: Name of access list
        :param pulumi.Input[_builtins.str] acl_name_variable: Variable name
        :param pulumi.Input[_builtins.str] direction: Direction
                 - Choices: `in`, `out`
        :param pulumi.Input[_builtins.bool] optional: Indicates if list item is considered optional.
        """
        if acl_name is not None:
            pulumi.set(__self__, "acl_name", acl_name)
        if acl_name_variable is not None:
            pulumi.set(__self__, "acl_name_variable", acl_name_variable)
        if direction is not None:
            pulumi.set(__self__, "direction", direction)
        if optional is not None:
            pulumi.set(__self__, "optional", optional)

    @_builtins.property
    @pulumi.getter(name="aclName")
    def acl_name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Name of access list
        """
        return pulumi.get(self, "acl_name")

    @acl_name.setter
    def acl_name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "acl_name", value)

    @_builtins.property
    @pulumi.getter(name="aclNameVariable")
    def acl_name_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "acl_name_variable")

    @acl_name_variable.setter
    def acl_name_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "acl_name_variable", value)

    @_builtins.property
    @pulumi.getter
    def direction(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Direction
          - Choices: `in`, `out`
        """
        return pulumi.get(self, "direction")

    @direction.setter
    def direction(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "direction", value)

    @_builtins.property
    @pulumi.getter
    def optional(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Indicates if list item is considered optional.
        """
        return pulumi.get(self, "optional")

    @optional.setter
    def optional(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "optional", value)


if not MYPY:
    class VpnInterfaceEthernetPppoeFeatureTemplateNatPortForwardArgsDict(TypedDict):
        optional: NotRequired[pulumi.Input[_builtins.bool]]
        """
        Indicates if list item is considered optional.
        """
        port_end_range: NotRequired[pulumi.Input[_builtins.int]]
        """
        Ending port of port range
          - Range: `0`-`65535`
        """
        port_start_range: NotRequired[pulumi.Input[_builtins.int]]
        """
        Starting port of port range
          - Range: `0`-`65535`
        """
        private_ip_address: NotRequired[pulumi.Input[_builtins.str]]
        """
        Private IP Address to translate to
        """
        private_ip_address_variable: NotRequired[pulumi.Input[_builtins.str]]
        """
        Variable name
        """
        private_vpn: NotRequired[pulumi.Input[_builtins.int]]
        """
        VPN in which private IP Address resides
          - Range: `0`-`65535`
        """
        private_vpn_variable: NotRequired[pulumi.Input[_builtins.str]]
        """
        Variable name
        """
        protocol: NotRequired[pulumi.Input[_builtins.str]]
        """
        Layer 4 protocol to apply port forwarding to
          - Choices: `tcp`, `udp`
        """
elif False:
    VpnInterfaceEthernetPppoeFeatureTemplateNatPortForwardArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class VpnInterfaceEthernetPppoeFeatureTemplateNatPortForwardArgs:
    def __init__(__self__, *,
                 optional: Optional[pulumi.Input[_builtins.bool]] = None,
                 port_end_range: Optional[pulumi.Input[_builtins.int]] = None,
                 port_start_range: Optional[pulumi.Input[_builtins.int]] = None,
                 private_ip_address: Optional[pulumi.Input[_builtins.str]] = None,
                 private_ip_address_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 private_vpn: Optional[pulumi.Input[_builtins.int]] = None,
                 private_vpn_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 protocol: Optional[pulumi.Input[_builtins.str]] = None):
        """
        :param pulumi.Input[_builtins.bool] optional: Indicates if list item is considered optional.
        :param pulumi.Input[_builtins.int] port_end_range: Ending port of port range
                 - Range: `0`-`65535`
        :param pulumi.Input[_builtins.int] port_start_range: Starting port of port range
                 - Range: `0`-`65535`
        :param pulumi.Input[_builtins.str] private_ip_address: Private IP Address to translate to
        :param pulumi.Input[_builtins.str] private_ip_address_variable: Variable name
        :param pulumi.Input[_builtins.int] private_vpn: VPN in which private IP Address resides
                 - Range: `0`-`65535`
        :param pulumi.Input[_builtins.str] private_vpn_variable: Variable name
        :param pulumi.Input[_builtins.str] protocol: Layer 4 protocol to apply port forwarding to
                 - Choices: `tcp`, `udp`
        """
        if optional is not None:
            pulumi.set(__self__, "optional", optional)
        if port_end_range is not None:
            pulumi.set(__self__, "port_end_range", port_end_range)
        if port_start_range is not None:
            pulumi.set(__self__, "port_start_range", port_start_range)
        if private_ip_address is not None:
            pulumi.set(__self__, "private_ip_address", private_ip_address)
        if private_ip_address_variable is not None:
            pulumi.set(__self__, "private_ip_address_variable", private_ip_address_variable)
        if private_vpn is not None:
            pulumi.set(__self__, "private_vpn", private_vpn)
        if private_vpn_variable is not None:
            pulumi.set(__self__, "private_vpn_variable", private_vpn_variable)
        if protocol is not None:
            pulumi.set(__self__, "protocol", protocol)

    @_builtins.property
    @pulumi.getter
    def optional(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Indicates if list item is considered optional.
        """
        return pulumi.get(self, "optional")

    @optional.setter
    def optional(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "optional", value)

    @_builtins.property
    @pulumi.getter(name="portEndRange")
    def port_end_range(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        Ending port of port range
          - Range: `0`-`65535`
        """
        return pulumi.get(self, "port_end_range")

    @port_end_range.setter
    def port_end_range(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "port_end_range", value)

    @_builtins.property
    @pulumi.getter(name="portStartRange")
    def port_start_range(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        Starting port of port range
          - Range: `0`-`65535`
        """
        return pulumi.get(self, "port_start_range")

    @port_start_range.setter
    def port_start_range(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "port_start_range", value)

    @_builtins.property
    @pulumi.getter(name="privateIpAddress")
    def private_ip_address(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Private IP Address to translate to
        """
        return pulumi.get(self, "private_ip_address")

    @private_ip_address.setter
    def private_ip_address(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "private_ip_address", value)

    @_builtins.property
    @pulumi.getter(name="privateIpAddressVariable")
    def private_ip_address_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "private_ip_address_variable")

    @private_ip_address_variable.setter
    def private_ip_address_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "private_ip_address_variable", value)

    @_builtins.property
    @pulumi.getter(name="privateVpn")
    def private_vpn(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        VPN in which private IP Address resides
          - Range: `0`-`65535`
        """
        return pulumi.get(self, "private_vpn")

    @private_vpn.setter
    def private_vpn(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "private_vpn", value)

    @_builtins.property
    @pulumi.getter(name="privateVpnVariable")
    def private_vpn_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "private_vpn_variable")

    @private_vpn_variable.setter
    def private_vpn_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "private_vpn_variable", value)

    @_builtins.property
    @pulumi.getter
    def protocol(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Layer 4 protocol to apply port forwarding to
          - Choices: `tcp`, `udp`
        """
        return pulumi.get(self, "protocol")

    @protocol.setter
    def protocol(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "protocol", value)


if not MYPY:
    class VpnInterfaceEthernetPppoeFeatureTemplatePolicerArgsDict(TypedDict):
        direction: NotRequired[pulumi.Input[_builtins.str]]
        """
        Direction
          - Choices: `in`, `out`
        """
        optional: NotRequired[pulumi.Input[_builtins.bool]]
        """
        Indicates if list item is considered optional.
        """
        policer_name: NotRequired[pulumi.Input[_builtins.str]]
        """
        Name of policer
        """
elif False:
    VpnInterfaceEthernetPppoeFeatureTemplatePolicerArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class VpnInterfaceEthernetPppoeFeatureTemplatePolicerArgs:
    def __init__(__self__, *,
                 direction: Optional[pulumi.Input[_builtins.str]] = None,
                 optional: Optional[pulumi.Input[_builtins.bool]] = None,
                 policer_name: Optional[pulumi.Input[_builtins.str]] = None):
        """
        :param pulumi.Input[_builtins.str] direction: Direction
                 - Choices: `in`, `out`
        :param pulumi.Input[_builtins.bool] optional: Indicates if list item is considered optional.
        :param pulumi.Input[_builtins.str] policer_name: Name of policer
        """
        if direction is not None:
            pulumi.set(__self__, "direction", direction)
        if optional is not None:
            pulumi.set(__self__, "optional", optional)
        if policer_name is not None:
            pulumi.set(__self__, "policer_name", policer_name)

    @_builtins.property
    @pulumi.getter
    def direction(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Direction
          - Choices: `in`, `out`
        """
        return pulumi.get(self, "direction")

    @direction.setter
    def direction(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "direction", value)

    @_builtins.property
    @pulumi.getter
    def optional(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Indicates if list item is considered optional.
        """
        return pulumi.get(self, "optional")

    @optional.setter
    def optional(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "optional", value)

    @_builtins.property
    @pulumi.getter(name="policerName")
    def policer_name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Name of policer
        """
        return pulumi.get(self, "policer_name")

    @policer_name.setter
    def policer_name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "policer_name", value)


if not MYPY:
    class VpnInterfaceEthernetPppoeFeatureTemplateTunnelInterfaceEncapsulationArgsDict(TypedDict):
        encapsulation: NotRequired[pulumi.Input[_builtins.str]]
        """
        Encapsulation
          - Choices: `gre`, `ipsec`
        """
        optional: NotRequired[pulumi.Input[_builtins.bool]]
        """
        Indicates if list item is considered optional.
        """
        preference: NotRequired[pulumi.Input[_builtins.int]]
        """
        Set preference for TLOC
          - Range: `0`-`4294967295`
        """
        preference_variable: NotRequired[pulumi.Input[_builtins.str]]
        """
        Variable name
        """
        weight: NotRequired[pulumi.Input[_builtins.int]]
        """
        Set weight for TLOC
          - Range: `1`-`255`
          - Default value: `1`
        """
        weight_variable: NotRequired[pulumi.Input[_builtins.str]]
        """
        Variable name
        """
elif False:
    VpnInterfaceEthernetPppoeFeatureTemplateTunnelInterfaceEncapsulationArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class VpnInterfaceEthernetPppoeFeatureTemplateTunnelInterfaceEncapsulationArgs:
    def __init__(__self__, *,
                 encapsulation: Optional[pulumi.Input[_builtins.str]] = None,
                 optional: Optional[pulumi.Input[_builtins.bool]] = None,
                 preference: Optional[pulumi.Input[_builtins.int]] = None,
                 preference_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 weight: Optional[pulumi.Input[_builtins.int]] = None,
                 weight_variable: Optional[pulumi.Input[_builtins.str]] = None):
        """
        :param pulumi.Input[_builtins.str] encapsulation: Encapsulation
                 - Choices: `gre`, `ipsec`
        :param pulumi.Input[_builtins.bool] optional: Indicates if list item is considered optional.
        :param pulumi.Input[_builtins.int] preference: Set preference for TLOC
                 - Range: `0`-`4294967295`
        :param pulumi.Input[_builtins.str] preference_variable: Variable name
        :param pulumi.Input[_builtins.int] weight: Set weight for TLOC
                 - Range: `1`-`255`
                 - Default value: `1`
        :param pulumi.Input[_builtins.str] weight_variable: Variable name
        """
        if encapsulation is not None:
            pulumi.set(__self__, "encapsulation", encapsulation)
        if optional is not None:
            pulumi.set(__self__, "optional", optional)
        if preference is not None:
            pulumi.set(__self__, "preference", preference)
        if preference_variable is not None:
            pulumi.set(__self__, "preference_variable", preference_variable)
        if weight is not None:
            pulumi.set(__self__, "weight", weight)
        if weight_variable is not None:
            pulumi.set(__self__, "weight_variable", weight_variable)

    @_builtins.property
    @pulumi.getter
    def encapsulation(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Encapsulation
          - Choices: `gre`, `ipsec`
        """
        return pulumi.get(self, "encapsulation")

    @encapsulation.setter
    def encapsulation(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "encapsulation", value)

    @_builtins.property
    @pulumi.getter
    def optional(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Indicates if list item is considered optional.
        """
        return pulumi.get(self, "optional")

    @optional.setter
    def optional(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "optional", value)

    @_builtins.property
    @pulumi.getter
    def preference(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        Set preference for TLOC
          - Range: `0`-`4294967295`
        """
        return pulumi.get(self, "preference")

    @preference.setter
    def preference(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "preference", value)

    @_builtins.property
    @pulumi.getter(name="preferenceVariable")
    def preference_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "preference_variable")

    @preference_variable.setter
    def preference_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "preference_variable", value)

    @_builtins.property
    @pulumi.getter
    def weight(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        Set weight for TLOC
          - Range: `1`-`255`
          - Default value: `1`
        """
        return pulumi.get(self, "weight")

    @weight.setter
    def weight(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "weight", value)

    @_builtins.property
    @pulumi.getter(name="weightVariable")
    def weight_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "weight_variable")

    @weight_variable.setter
    def weight_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "weight_variable", value)


if not MYPY:
    class VpnInterfaceMultilinkFeatureTemplateAccessListArgsDict(TypedDict):
        acl_name: NotRequired[pulumi.Input[_builtins.str]]
        """
        Name of access list
        """
        acl_name_variable: NotRequired[pulumi.Input[_builtins.str]]
        """
        Variable name
        """
        direction: NotRequired[pulumi.Input[_builtins.str]]
        """
        Direction
          - Choices: `in`, `out`
        """
        optional: NotRequired[pulumi.Input[_builtins.bool]]
        """
        Indicates if list item is considered optional.
        """
elif False:
    VpnInterfaceMultilinkFeatureTemplateAccessListArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class VpnInterfaceMultilinkFeatureTemplateAccessListArgs:
    def __init__(__self__, *,
                 acl_name: Optional[pulumi.Input[_builtins.str]] = None,
                 acl_name_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 direction: Optional[pulumi.Input[_builtins.str]] = None,
                 optional: Optional[pulumi.Input[_builtins.bool]] = None):
        """
        :param pulumi.Input[_builtins.str] acl_name: Name of access list
        :param pulumi.Input[_builtins.str] acl_name_variable: Variable name
        :param pulumi.Input[_builtins.str] direction: Direction
                 - Choices: `in`, `out`
        :param pulumi.Input[_builtins.bool] optional: Indicates if list item is considered optional.
        """
        if acl_name is not None:
            pulumi.set(__self__, "acl_name", acl_name)
        if acl_name_variable is not None:
            pulumi.set(__self__, "acl_name_variable", acl_name_variable)
        if direction is not None:
            pulumi.set(__self__, "direction", direction)
        if optional is not None:
            pulumi.set(__self__, "optional", optional)

    @_builtins.property
    @pulumi.getter(name="aclName")
    def acl_name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Name of access list
        """
        return pulumi.get(self, "acl_name")

    @acl_name.setter
    def acl_name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "acl_name", value)

    @_builtins.property
    @pulumi.getter(name="aclNameVariable")
    def acl_name_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "acl_name_variable")

    @acl_name_variable.setter
    def acl_name_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "acl_name_variable", value)

    @_builtins.property
    @pulumi.getter
    def direction(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Direction
          - Choices: `in`, `out`
        """
        return pulumi.get(self, "direction")

    @direction.setter
    def direction(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "direction", value)

    @_builtins.property
    @pulumi.getter
    def optional(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Indicates if list item is considered optional.
        """
        return pulumi.get(self, "optional")

    @optional.setter
    def optional(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "optional", value)


if not MYPY:
    class VpnInterfaceMultilinkFeatureTemplateIpv6AccessListArgsDict(TypedDict):
        acl_name: NotRequired[pulumi.Input[_builtins.str]]
        """
        Name of access list
        """
        acl_name_variable: NotRequired[pulumi.Input[_builtins.str]]
        """
        Variable name
        """
        direction: NotRequired[pulumi.Input[_builtins.str]]
        """
        Direction
          - Choices: `in`, `out`
        """
        optional: NotRequired[pulumi.Input[_builtins.bool]]
        """
        Indicates if list item is considered optional.
        """
elif False:
    VpnInterfaceMultilinkFeatureTemplateIpv6AccessListArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class VpnInterfaceMultilinkFeatureTemplateIpv6AccessListArgs:
    def __init__(__self__, *,
                 acl_name: Optional[pulumi.Input[_builtins.str]] = None,
                 acl_name_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 direction: Optional[pulumi.Input[_builtins.str]] = None,
                 optional: Optional[pulumi.Input[_builtins.bool]] = None):
        """
        :param pulumi.Input[_builtins.str] acl_name: Name of access list
        :param pulumi.Input[_builtins.str] acl_name_variable: Variable name
        :param pulumi.Input[_builtins.str] direction: Direction
                 - Choices: `in`, `out`
        :param pulumi.Input[_builtins.bool] optional: Indicates if list item is considered optional.
        """
        if acl_name is not None:
            pulumi.set(__self__, "acl_name", acl_name)
        if acl_name_variable is not None:
            pulumi.set(__self__, "acl_name_variable", acl_name_variable)
        if direction is not None:
            pulumi.set(__self__, "direction", direction)
        if optional is not None:
            pulumi.set(__self__, "optional", optional)

    @_builtins.property
    @pulumi.getter(name="aclName")
    def acl_name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Name of access list
        """
        return pulumi.get(self, "acl_name")

    @acl_name.setter
    def acl_name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "acl_name", value)

    @_builtins.property
    @pulumi.getter(name="aclNameVariable")
    def acl_name_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "acl_name_variable")

    @acl_name_variable.setter
    def acl_name_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "acl_name_variable", value)

    @_builtins.property
    @pulumi.getter
    def direction(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Direction
          - Choices: `in`, `out`
        """
        return pulumi.get(self, "direction")

    @direction.setter
    def direction(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "direction", value)

    @_builtins.property
    @pulumi.getter
    def optional(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Indicates if list item is considered optional.
        """
        return pulumi.get(self, "optional")

    @optional.setter
    def optional(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "optional", value)


if not MYPY:
    class VpnInterfaceMultilinkFeatureTemplateMultilinkInterfaceArgsDict(TypedDict):
        channel_group_lists: NotRequired[pulumi.Input[Sequence[pulumi.Input['VpnInterfaceMultilinkFeatureTemplateMultilinkInterfaceChannelGroupListArgsDict']]]]
        """
        Channel Group List
        """
        description: NotRequired[pulumi.Input[_builtins.str]]
        """
        Description
        """
        description_variable: NotRequired[pulumi.Input[_builtins.str]]
        """
        Variable name
        """
        framing: NotRequired[pulumi.Input[_builtins.str]]
        """
        Framing
        """
        framing_variable: NotRequired[pulumi.Input[_builtins.str]]
        """
        Variable name
        """
        interface_type: NotRequired[pulumi.Input[_builtins.str]]
        """
        Card Type
          - Choices: `E1`, `T1`, `NIM-2T`, `NIM-4T`
        """
        internal: NotRequired[pulumi.Input[_builtins.bool]]
        """
        Internal
          - Default value: `false`
        """
        line_mode: NotRequired[pulumi.Input[_builtins.str]]
        """
        Line Mode
          - Choices: `secondary`, `primary`
        """
        line_mode_variable: NotRequired[pulumi.Input[_builtins.str]]
        """
        Variable name
        """
        linecode: NotRequired[pulumi.Input[_builtins.str]]
        """
        LineCode
          - Choices: `ami`, `b8zs`, `hdb3`
        """
        linecode_variable: NotRequired[pulumi.Input[_builtins.str]]
        """
        Variable name
        """
        optional: NotRequired[pulumi.Input[_builtins.bool]]
        """
        Indicates if list item is considered optional.
        """
        set_length_for_long: NotRequired[pulumi.Input[_builtins.str]]
        """
        Set length for long
        """
        set_length_for_short: NotRequired[pulumi.Input[_builtins.str]]
        """
        Set Length for short
        """
        slot: NotRequired[pulumi.Input[_builtins.str]]
        """
        Slot number
        """
elif False:
    VpnInterfaceMultilinkFeatureTemplateMultilinkInterfaceArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class VpnInterfaceMultilinkFeatureTemplateMultilinkInterfaceArgs:
    def __init__(__self__, *,
                 channel_group_lists: Optional[pulumi.Input[Sequence[pulumi.Input['VpnInterfaceMultilinkFeatureTemplateMultilinkInterfaceChannelGroupListArgs']]]] = None,
                 description: Optional[pulumi.Input[_builtins.str]] = None,
                 description_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 framing: Optional[pulumi.Input[_builtins.str]] = None,
                 framing_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 interface_type: Optional[pulumi.Input[_builtins.str]] = None,
                 internal: Optional[pulumi.Input[_builtins.bool]] = None,
                 line_mode: Optional[pulumi.Input[_builtins.str]] = None,
                 line_mode_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 linecode: Optional[pulumi.Input[_builtins.str]] = None,
                 linecode_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 optional: Optional[pulumi.Input[_builtins.bool]] = None,
                 set_length_for_long: Optional[pulumi.Input[_builtins.str]] = None,
                 set_length_for_short: Optional[pulumi.Input[_builtins.str]] = None,
                 slot: Optional[pulumi.Input[_builtins.str]] = None):
        """
        :param pulumi.Input[Sequence[pulumi.Input['VpnInterfaceMultilinkFeatureTemplateMultilinkInterfaceChannelGroupListArgs']]] channel_group_lists: Channel Group List
        :param pulumi.Input[_builtins.str] description: Description
        :param pulumi.Input[_builtins.str] description_variable: Variable name
        :param pulumi.Input[_builtins.str] framing: Framing
        :param pulumi.Input[_builtins.str] framing_variable: Variable name
        :param pulumi.Input[_builtins.str] interface_type: Card Type
                 - Choices: `E1`, `T1`, `NIM-2T`, `NIM-4T`
        :param pulumi.Input[_builtins.bool] internal: Internal
                 - Default value: `false`
        :param pulumi.Input[_builtins.str] line_mode: Line Mode
                 - Choices: `secondary`, `primary`
        :param pulumi.Input[_builtins.str] line_mode_variable: Variable name
        :param pulumi.Input[_builtins.str] linecode: LineCode
                 - Choices: `ami`, `b8zs`, `hdb3`
        :param pulumi.Input[_builtins.str] linecode_variable: Variable name
        :param pulumi.Input[_builtins.bool] optional: Indicates if list item is considered optional.
        :param pulumi.Input[_builtins.str] set_length_for_long: Set length for long
        :param pulumi.Input[_builtins.str] set_length_for_short: Set Length for short
        :param pulumi.Input[_builtins.str] slot: Slot number
        """
        if channel_group_lists is not None:
            pulumi.set(__self__, "channel_group_lists", channel_group_lists)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if description_variable is not None:
            pulumi.set(__self__, "description_variable", description_variable)
        if framing is not None:
            pulumi.set(__self__, "framing", framing)
        if framing_variable is not None:
            pulumi.set(__self__, "framing_variable", framing_variable)
        if interface_type is not None:
            pulumi.set(__self__, "interface_type", interface_type)
        if internal is not None:
            pulumi.set(__self__, "internal", internal)
        if line_mode is not None:
            pulumi.set(__self__, "line_mode", line_mode)
        if line_mode_variable is not None:
            pulumi.set(__self__, "line_mode_variable", line_mode_variable)
        if linecode is not None:
            pulumi.set(__self__, "linecode", linecode)
        if linecode_variable is not None:
            pulumi.set(__self__, "linecode_variable", linecode_variable)
        if optional is not None:
            pulumi.set(__self__, "optional", optional)
        if set_length_for_long is not None:
            pulumi.set(__self__, "set_length_for_long", set_length_for_long)
        if set_length_for_short is not None:
            pulumi.set(__self__, "set_length_for_short", set_length_for_short)
        if slot is not None:
            pulumi.set(__self__, "slot", slot)

    @_builtins.property
    @pulumi.getter(name="channelGroupLists")
    def channel_group_lists(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['VpnInterfaceMultilinkFeatureTemplateMultilinkInterfaceChannelGroupListArgs']]]]:
        """
        Channel Group List
        """
        return pulumi.get(self, "channel_group_lists")

    @channel_group_lists.setter
    def channel_group_lists(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['VpnInterfaceMultilinkFeatureTemplateMultilinkInterfaceChannelGroupListArgs']]]]):
        pulumi.set(self, "channel_group_lists", value)

    @_builtins.property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Description
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "description", value)

    @_builtins.property
    @pulumi.getter(name="descriptionVariable")
    def description_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "description_variable")

    @description_variable.setter
    def description_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "description_variable", value)

    @_builtins.property
    @pulumi.getter
    def framing(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Framing
        """
        return pulumi.get(self, "framing")

    @framing.setter
    def framing(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "framing", value)

    @_builtins.property
    @pulumi.getter(name="framingVariable")
    def framing_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "framing_variable")

    @framing_variable.setter
    def framing_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "framing_variable", value)

    @_builtins.property
    @pulumi.getter(name="interfaceType")
    def interface_type(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Card Type
          - Choices: `E1`, `T1`, `NIM-2T`, `NIM-4T`
        """
        return pulumi.get(self, "interface_type")

    @interface_type.setter
    def interface_type(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "interface_type", value)

    @_builtins.property
    @pulumi.getter
    def internal(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Internal
          - Default value: `false`
        """
        return pulumi.get(self, "internal")

    @internal.setter
    def internal(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "internal", value)

    @_builtins.property
    @pulumi.getter(name="lineMode")
    def line_mode(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Line Mode
          - Choices: `secondary`, `primary`
        """
        return pulumi.get(self, "line_mode")

    @line_mode.setter
    def line_mode(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "line_mode", value)

    @_builtins.property
    @pulumi.getter(name="lineModeVariable")
    def line_mode_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "line_mode_variable")

    @line_mode_variable.setter
    def line_mode_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "line_mode_variable", value)

    @_builtins.property
    @pulumi.getter
    def linecode(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        LineCode
          - Choices: `ami`, `b8zs`, `hdb3`
        """
        return pulumi.get(self, "linecode")

    @linecode.setter
    def linecode(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "linecode", value)

    @_builtins.property
    @pulumi.getter(name="linecodeVariable")
    def linecode_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "linecode_variable")

    @linecode_variable.setter
    def linecode_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "linecode_variable", value)

    @_builtins.property
    @pulumi.getter
    def optional(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Indicates if list item is considered optional.
        """
        return pulumi.get(self, "optional")

    @optional.setter
    def optional(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "optional", value)

    @_builtins.property
    @pulumi.getter(name="setLengthForLong")
    def set_length_for_long(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Set length for long
        """
        return pulumi.get(self, "set_length_for_long")

    @set_length_for_long.setter
    def set_length_for_long(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "set_length_for_long", value)

    @_builtins.property
    @pulumi.getter(name="setLengthForShort")
    def set_length_for_short(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Set Length for short
        """
        return pulumi.get(self, "set_length_for_short")

    @set_length_for_short.setter
    def set_length_for_short(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "set_length_for_short", value)

    @_builtins.property
    @pulumi.getter
    def slot(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Slot number
        """
        return pulumi.get(self, "slot")

    @slot.setter
    def slot(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "slot", value)


if not MYPY:
    class VpnInterfaceMultilinkFeatureTemplateMultilinkInterfaceChannelGroupListArgsDict(TypedDict):
        channel_group: NotRequired[pulumi.Input[_builtins.int]]
        """
        Number
          - Range: `0`-`30`
        """
        channel_group_variable: NotRequired[pulumi.Input[_builtins.str]]
        """
        Variable name
        """
        optional: NotRequired[pulumi.Input[_builtins.bool]]
        """
        Indicates if list item is considered optional.
        """
        time_slot_variable: NotRequired[pulumi.Input[_builtins.str]]
        """
        Variable name
        """
        time_slots: NotRequired[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]
        """
        Time slots
        """
elif False:
    VpnInterfaceMultilinkFeatureTemplateMultilinkInterfaceChannelGroupListArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class VpnInterfaceMultilinkFeatureTemplateMultilinkInterfaceChannelGroupListArgs:
    def __init__(__self__, *,
                 channel_group: Optional[pulumi.Input[_builtins.int]] = None,
                 channel_group_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 optional: Optional[pulumi.Input[_builtins.bool]] = None,
                 time_slot_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 time_slots: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None):
        """
        :param pulumi.Input[_builtins.int] channel_group: Number
                 - Range: `0`-`30`
        :param pulumi.Input[_builtins.str] channel_group_variable: Variable name
        :param pulumi.Input[_builtins.bool] optional: Indicates if list item is considered optional.
        :param pulumi.Input[_builtins.str] time_slot_variable: Variable name
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] time_slots: Time slots
        """
        if channel_group is not None:
            pulumi.set(__self__, "channel_group", channel_group)
        if channel_group_variable is not None:
            pulumi.set(__self__, "channel_group_variable", channel_group_variable)
        if optional is not None:
            pulumi.set(__self__, "optional", optional)
        if time_slot_variable is not None:
            pulumi.set(__self__, "time_slot_variable", time_slot_variable)
        if time_slots is not None:
            pulumi.set(__self__, "time_slots", time_slots)

    @_builtins.property
    @pulumi.getter(name="channelGroup")
    def channel_group(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        Number
          - Range: `0`-`30`
        """
        return pulumi.get(self, "channel_group")

    @channel_group.setter
    def channel_group(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "channel_group", value)

    @_builtins.property
    @pulumi.getter(name="channelGroupVariable")
    def channel_group_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "channel_group_variable")

    @channel_group_variable.setter
    def channel_group_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "channel_group_variable", value)

    @_builtins.property
    @pulumi.getter
    def optional(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Indicates if list item is considered optional.
        """
        return pulumi.get(self, "optional")

    @optional.setter
    def optional(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "optional", value)

    @_builtins.property
    @pulumi.getter(name="timeSlotVariable")
    def time_slot_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "time_slot_variable")

    @time_slot_variable.setter
    def time_slot_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "time_slot_variable", value)

    @_builtins.property
    @pulumi.getter(name="timeSlots")
    def time_slots(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]:
        """
        Time slots
        """
        return pulumi.get(self, "time_slots")

    @time_slots.setter
    def time_slots(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "time_slots", value)


if not MYPY:
    class VpnInterfaceMultilinkFeatureTemplateNimInterfaceListArgsDict(TypedDict):
        bandwidth: NotRequired[pulumi.Input[_builtins.int]]
        """
        Interface bandwidth capacity, in kbps
          - Range: `1`-`2147483647`
        """
        bandwidth_variable: NotRequired[pulumi.Input[_builtins.str]]
        """
        Variable name
        """
        clock_rate: NotRequired[pulumi.Input[_builtins.int]]
        """
        Set preference for interface Clock speed
          - Range: `1200`-`8000000`
        """
        clock_rate_variable: NotRequired[pulumi.Input[_builtins.str]]
        """
        Variable name
        """
        encapsulation_serial: NotRequired[pulumi.Input[_builtins.str]]
        """
        Configure Encapsulation for interface
          - Choices: `hdlc`, `ppp`
        """
        encapsulation_serial_variable: NotRequired[pulumi.Input[_builtins.str]]
        """
        Variable name
        """
        interface_description: NotRequired[pulumi.Input[_builtins.str]]
        """
        Interface description
        """
        interface_description_variable: NotRequired[pulumi.Input[_builtins.str]]
        """
        Variable name
        """
        interface_name: NotRequired[pulumi.Input[_builtins.str]]
        """
        Interface Name
        """
        interface_name_variable: NotRequired[pulumi.Input[_builtins.str]]
        """
        Variable name
        """
        nim_serial_interface_type: NotRequired[pulumi.Input[_builtins.str]]
        """
        NIM Serial interface type
          - Choices: `2t`, `4t`, `2T`, `4T`
        """
        nim_serial_interface_type_variable: NotRequired[pulumi.Input[_builtins.str]]
        """
        Variable name
        """
        optional: NotRequired[pulumi.Input[_builtins.bool]]
        """
        Indicates if list item is considered optional.
        """
elif False:
    VpnInterfaceMultilinkFeatureTemplateNimInterfaceListArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class VpnInterfaceMultilinkFeatureTemplateNimInterfaceListArgs:
    def __init__(__self__, *,
                 bandwidth: Optional[pulumi.Input[_builtins.int]] = None,
                 bandwidth_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 clock_rate: Optional[pulumi.Input[_builtins.int]] = None,
                 clock_rate_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 encapsulation_serial: Optional[pulumi.Input[_builtins.str]] = None,
                 encapsulation_serial_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 interface_description: Optional[pulumi.Input[_builtins.str]] = None,
                 interface_description_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 interface_name: Optional[pulumi.Input[_builtins.str]] = None,
                 interface_name_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 nim_serial_interface_type: Optional[pulumi.Input[_builtins.str]] = None,
                 nim_serial_interface_type_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 optional: Optional[pulumi.Input[_builtins.bool]] = None):
        """
        :param pulumi.Input[_builtins.int] bandwidth: Interface bandwidth capacity, in kbps
                 - Range: `1`-`2147483647`
        :param pulumi.Input[_builtins.str] bandwidth_variable: Variable name
        :param pulumi.Input[_builtins.int] clock_rate: Set preference for interface Clock speed
                 - Range: `1200`-`8000000`
        :param pulumi.Input[_builtins.str] clock_rate_variable: Variable name
        :param pulumi.Input[_builtins.str] encapsulation_serial: Configure Encapsulation for interface
                 - Choices: `hdlc`, `ppp`
        :param pulumi.Input[_builtins.str] encapsulation_serial_variable: Variable name
        :param pulumi.Input[_builtins.str] interface_description: Interface description
        :param pulumi.Input[_builtins.str] interface_description_variable: Variable name
        :param pulumi.Input[_builtins.str] interface_name: Interface Name
        :param pulumi.Input[_builtins.str] interface_name_variable: Variable name
        :param pulumi.Input[_builtins.str] nim_serial_interface_type: NIM Serial interface type
                 - Choices: `2t`, `4t`, `2T`, `4T`
        :param pulumi.Input[_builtins.str] nim_serial_interface_type_variable: Variable name
        :param pulumi.Input[_builtins.bool] optional: Indicates if list item is considered optional.
        """
        if bandwidth is not None:
            pulumi.set(__self__, "bandwidth", bandwidth)
        if bandwidth_variable is not None:
            pulumi.set(__self__, "bandwidth_variable", bandwidth_variable)
        if clock_rate is not None:
            pulumi.set(__self__, "clock_rate", clock_rate)
        if clock_rate_variable is not None:
            pulumi.set(__self__, "clock_rate_variable", clock_rate_variable)
        if encapsulation_serial is not None:
            pulumi.set(__self__, "encapsulation_serial", encapsulation_serial)
        if encapsulation_serial_variable is not None:
            pulumi.set(__self__, "encapsulation_serial_variable", encapsulation_serial_variable)
        if interface_description is not None:
            pulumi.set(__self__, "interface_description", interface_description)
        if interface_description_variable is not None:
            pulumi.set(__self__, "interface_description_variable", interface_description_variable)
        if interface_name is not None:
            pulumi.set(__self__, "interface_name", interface_name)
        if interface_name_variable is not None:
            pulumi.set(__self__, "interface_name_variable", interface_name_variable)
        if nim_serial_interface_type is not None:
            pulumi.set(__self__, "nim_serial_interface_type", nim_serial_interface_type)
        if nim_serial_interface_type_variable is not None:
            pulumi.set(__self__, "nim_serial_interface_type_variable", nim_serial_interface_type_variable)
        if optional is not None:
            pulumi.set(__self__, "optional", optional)

    @_builtins.property
    @pulumi.getter
    def bandwidth(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        Interface bandwidth capacity, in kbps
          - Range: `1`-`2147483647`
        """
        return pulumi.get(self, "bandwidth")

    @bandwidth.setter
    def bandwidth(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "bandwidth", value)

    @_builtins.property
    @pulumi.getter(name="bandwidthVariable")
    def bandwidth_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "bandwidth_variable")

    @bandwidth_variable.setter
    def bandwidth_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "bandwidth_variable", value)

    @_builtins.property
    @pulumi.getter(name="clockRate")
    def clock_rate(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        Set preference for interface Clock speed
          - Range: `1200`-`8000000`
        """
        return pulumi.get(self, "clock_rate")

    @clock_rate.setter
    def clock_rate(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "clock_rate", value)

    @_builtins.property
    @pulumi.getter(name="clockRateVariable")
    def clock_rate_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "clock_rate_variable")

    @clock_rate_variable.setter
    def clock_rate_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "clock_rate_variable", value)

    @_builtins.property
    @pulumi.getter(name="encapsulationSerial")
    def encapsulation_serial(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Configure Encapsulation for interface
          - Choices: `hdlc`, `ppp`
        """
        return pulumi.get(self, "encapsulation_serial")

    @encapsulation_serial.setter
    def encapsulation_serial(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "encapsulation_serial", value)

    @_builtins.property
    @pulumi.getter(name="encapsulationSerialVariable")
    def encapsulation_serial_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "encapsulation_serial_variable")

    @encapsulation_serial_variable.setter
    def encapsulation_serial_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "encapsulation_serial_variable", value)

    @_builtins.property
    @pulumi.getter(name="interfaceDescription")
    def interface_description(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Interface description
        """
        return pulumi.get(self, "interface_description")

    @interface_description.setter
    def interface_description(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "interface_description", value)

    @_builtins.property
    @pulumi.getter(name="interfaceDescriptionVariable")
    def interface_description_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "interface_description_variable")

    @interface_description_variable.setter
    def interface_description_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "interface_description_variable", value)

    @_builtins.property
    @pulumi.getter(name="interfaceName")
    def interface_name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Interface Name
        """
        return pulumi.get(self, "interface_name")

    @interface_name.setter
    def interface_name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "interface_name", value)

    @_builtins.property
    @pulumi.getter(name="interfaceNameVariable")
    def interface_name_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "interface_name_variable")

    @interface_name_variable.setter
    def interface_name_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "interface_name_variable", value)

    @_builtins.property
    @pulumi.getter(name="nimSerialInterfaceType")
    def nim_serial_interface_type(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        NIM Serial interface type
          - Choices: `2t`, `4t`, `2T`, `4T`
        """
        return pulumi.get(self, "nim_serial_interface_type")

    @nim_serial_interface_type.setter
    def nim_serial_interface_type(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "nim_serial_interface_type", value)

    @_builtins.property
    @pulumi.getter(name="nimSerialInterfaceTypeVariable")
    def nim_serial_interface_type_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "nim_serial_interface_type_variable")

    @nim_serial_interface_type_variable.setter
    def nim_serial_interface_type_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "nim_serial_interface_type_variable", value)

    @_builtins.property
    @pulumi.getter
    def optional(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Indicates if list item is considered optional.
        """
        return pulumi.get(self, "optional")

    @optional.setter
    def optional(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "optional", value)


if not MYPY:
    class VpnInterfaceMultilinkFeatureTemplateTunnelInterfaceEncapsulationArgsDict(TypedDict):
        encapsulation: NotRequired[pulumi.Input[_builtins.str]]
        """
        Encapsulation
          - Choices: `gre`, `ipsec`
        """
        optional: NotRequired[pulumi.Input[_builtins.bool]]
        """
        Indicates if list item is considered optional.
        """
        preference: NotRequired[pulumi.Input[_builtins.int]]
        """
        Set preference for TLOC
          - Range: `0`-`4294967295`
        """
        preference_variable: NotRequired[pulumi.Input[_builtins.str]]
        """
        Variable name
        """
        weight: NotRequired[pulumi.Input[_builtins.int]]
        """
        Set weight for TLOC
          - Range: `1`-`255`
          - Default value: `1`
        """
        weight_variable: NotRequired[pulumi.Input[_builtins.str]]
        """
        Variable name
        """
elif False:
    VpnInterfaceMultilinkFeatureTemplateTunnelInterfaceEncapsulationArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class VpnInterfaceMultilinkFeatureTemplateTunnelInterfaceEncapsulationArgs:
    def __init__(__self__, *,
                 encapsulation: Optional[pulumi.Input[_builtins.str]] = None,
                 optional: Optional[pulumi.Input[_builtins.bool]] = None,
                 preference: Optional[pulumi.Input[_builtins.int]] = None,
                 preference_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 weight: Optional[pulumi.Input[_builtins.int]] = None,
                 weight_variable: Optional[pulumi.Input[_builtins.str]] = None):
        """
        :param pulumi.Input[_builtins.str] encapsulation: Encapsulation
                 - Choices: `gre`, `ipsec`
        :param pulumi.Input[_builtins.bool] optional: Indicates if list item is considered optional.
        :param pulumi.Input[_builtins.int] preference: Set preference for TLOC
                 - Range: `0`-`4294967295`
        :param pulumi.Input[_builtins.str] preference_variable: Variable name
        :param pulumi.Input[_builtins.int] weight: Set weight for TLOC
                 - Range: `1`-`255`
                 - Default value: `1`
        :param pulumi.Input[_builtins.str] weight_variable: Variable name
        """
        if encapsulation is not None:
            pulumi.set(__self__, "encapsulation", encapsulation)
        if optional is not None:
            pulumi.set(__self__, "optional", optional)
        if preference is not None:
            pulumi.set(__self__, "preference", preference)
        if preference_variable is not None:
            pulumi.set(__self__, "preference_variable", preference_variable)
        if weight is not None:
            pulumi.set(__self__, "weight", weight)
        if weight_variable is not None:
            pulumi.set(__self__, "weight_variable", weight_variable)

    @_builtins.property
    @pulumi.getter
    def encapsulation(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Encapsulation
          - Choices: `gre`, `ipsec`
        """
        return pulumi.get(self, "encapsulation")

    @encapsulation.setter
    def encapsulation(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "encapsulation", value)

    @_builtins.property
    @pulumi.getter
    def optional(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Indicates if list item is considered optional.
        """
        return pulumi.get(self, "optional")

    @optional.setter
    def optional(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "optional", value)

    @_builtins.property
    @pulumi.getter
    def preference(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        Set preference for TLOC
          - Range: `0`-`4294967295`
        """
        return pulumi.get(self, "preference")

    @preference.setter
    def preference(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "preference", value)

    @_builtins.property
    @pulumi.getter(name="preferenceVariable")
    def preference_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "preference_variable")

    @preference_variable.setter
    def preference_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "preference_variable", value)

    @_builtins.property
    @pulumi.getter
    def weight(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        Set weight for TLOC
          - Range: `1`-`255`
          - Default value: `1`
        """
        return pulumi.get(self, "weight")

    @weight.setter
    def weight(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "weight", value)

    @_builtins.property
    @pulumi.getter(name="weightVariable")
    def weight_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "weight_variable")

    @weight_variable.setter
    def weight_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "weight_variable", value)


if not MYPY:
    class VpnInterfaceSviFeatureTemplateIpv4AccessListArgsDict(TypedDict):
        acl_name: NotRequired[pulumi.Input[_builtins.str]]
        """
        Name of access list
        """
        acl_name_variable: NotRequired[pulumi.Input[_builtins.str]]
        """
        Variable name
        """
        direction: NotRequired[pulumi.Input[_builtins.str]]
        """
        Direction
          - Choices: `in`, `out`
        """
        optional: NotRequired[pulumi.Input[_builtins.bool]]
        """
        Indicates if list item is considered optional.
        """
elif False:
    VpnInterfaceSviFeatureTemplateIpv4AccessListArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class VpnInterfaceSviFeatureTemplateIpv4AccessListArgs:
    def __init__(__self__, *,
                 acl_name: Optional[pulumi.Input[_builtins.str]] = None,
                 acl_name_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 direction: Optional[pulumi.Input[_builtins.str]] = None,
                 optional: Optional[pulumi.Input[_builtins.bool]] = None):
        """
        :param pulumi.Input[_builtins.str] acl_name: Name of access list
        :param pulumi.Input[_builtins.str] acl_name_variable: Variable name
        :param pulumi.Input[_builtins.str] direction: Direction
                 - Choices: `in`, `out`
        :param pulumi.Input[_builtins.bool] optional: Indicates if list item is considered optional.
        """
        if acl_name is not None:
            pulumi.set(__self__, "acl_name", acl_name)
        if acl_name_variable is not None:
            pulumi.set(__self__, "acl_name_variable", acl_name_variable)
        if direction is not None:
            pulumi.set(__self__, "direction", direction)
        if optional is not None:
            pulumi.set(__self__, "optional", optional)

    @_builtins.property
    @pulumi.getter(name="aclName")
    def acl_name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Name of access list
        """
        return pulumi.get(self, "acl_name")

    @acl_name.setter
    def acl_name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "acl_name", value)

    @_builtins.property
    @pulumi.getter(name="aclNameVariable")
    def acl_name_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "acl_name_variable")

    @acl_name_variable.setter
    def acl_name_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "acl_name_variable", value)

    @_builtins.property
    @pulumi.getter
    def direction(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Direction
          - Choices: `in`, `out`
        """
        return pulumi.get(self, "direction")

    @direction.setter
    def direction(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "direction", value)

    @_builtins.property
    @pulumi.getter
    def optional(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Indicates if list item is considered optional.
        """
        return pulumi.get(self, "optional")

    @optional.setter
    def optional(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "optional", value)


if not MYPY:
    class VpnInterfaceSviFeatureTemplateIpv4SecondaryAddressArgsDict(TypedDict):
        ipv4_address: NotRequired[pulumi.Input[_builtins.str]]
        """
        IP Address
        """
        ipv4_address_variable: NotRequired[pulumi.Input[_builtins.str]]
        """
        Variable name
        """
        optional: NotRequired[pulumi.Input[_builtins.bool]]
        """
        Indicates if list item is considered optional.
        """
elif False:
    VpnInterfaceSviFeatureTemplateIpv4SecondaryAddressArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class VpnInterfaceSviFeatureTemplateIpv4SecondaryAddressArgs:
    def __init__(__self__, *,
                 ipv4_address: Optional[pulumi.Input[_builtins.str]] = None,
                 ipv4_address_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 optional: Optional[pulumi.Input[_builtins.bool]] = None):
        """
        :param pulumi.Input[_builtins.str] ipv4_address: IP Address
        :param pulumi.Input[_builtins.str] ipv4_address_variable: Variable name
        :param pulumi.Input[_builtins.bool] optional: Indicates if list item is considered optional.
        """
        if ipv4_address is not None:
            pulumi.set(__self__, "ipv4_address", ipv4_address)
        if ipv4_address_variable is not None:
            pulumi.set(__self__, "ipv4_address_variable", ipv4_address_variable)
        if optional is not None:
            pulumi.set(__self__, "optional", optional)

    @_builtins.property
    @pulumi.getter(name="ipv4Address")
    def ipv4_address(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        IP Address
        """
        return pulumi.get(self, "ipv4_address")

    @ipv4_address.setter
    def ipv4_address(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "ipv4_address", value)

    @_builtins.property
    @pulumi.getter(name="ipv4AddressVariable")
    def ipv4_address_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "ipv4_address_variable")

    @ipv4_address_variable.setter
    def ipv4_address_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "ipv4_address_variable", value)

    @_builtins.property
    @pulumi.getter
    def optional(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Indicates if list item is considered optional.
        """
        return pulumi.get(self, "optional")

    @optional.setter
    def optional(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "optional", value)


if not MYPY:
    class VpnInterfaceSviFeatureTemplateIpv4VrrpArgsDict(TypedDict):
        group_id: NotRequired[pulumi.Input[_builtins.int]]
        """
        Group ID
          - Range: `1`-`255`
        """
        group_id_variable: NotRequired[pulumi.Input[_builtins.str]]
        """
        Variable name
        """
        ipv4_address: NotRequired[pulumi.Input[_builtins.str]]
        """
        Assign IP Address
        """
        ipv4_address_variable: NotRequired[pulumi.Input[_builtins.str]]
        """
        Variable name
        """
        ipv4_secondary_addresses: NotRequired[pulumi.Input[Sequence[pulumi.Input['VpnInterfaceSviFeatureTemplateIpv4VrrpIpv4SecondaryAddressArgsDict']]]]
        """
        VRRP Secondary IP address
        """
        optional: NotRequired[pulumi.Input[_builtins.bool]]
        """
        Indicates if list item is considered optional.
        """
        priority: NotRequired[pulumi.Input[_builtins.int]]
        """
        Set priority
          - Range: `1`-`254`
          - Default value: `100`
        """
        priority_variable: NotRequired[pulumi.Input[_builtins.str]]
        """
        Variable name
        """
        timer: NotRequired[pulumi.Input[_builtins.int]]
        """
        Timer interval for successive advertisements, in milliseconds
          - Range: `100`-`40950`
          - Default value: `100`
        """
        timer_variable: NotRequired[pulumi.Input[_builtins.str]]
        """
        Variable name
        """
        tloc_preference_change: NotRequired[pulumi.Input[_builtins.bool]]
        """
        change TLOC preference
          - Default value: `false`
        """
        tloc_preference_change_value: NotRequired[pulumi.Input[_builtins.int]]
        """
        Set tloc preference change value
          - Range: `1`-`4294967295`
        """
        tloc_preference_change_value_variable: NotRequired[pulumi.Input[_builtins.str]]
        """
        Variable name
        """
        track_omp: NotRequired[pulumi.Input[_builtins.bool]]
        """
        Track OMP status
          - Default value: `false`
        """
        track_omp_variable: NotRequired[pulumi.Input[_builtins.str]]
        """
        Variable name
        """
        track_prefix_list: NotRequired[pulumi.Input[_builtins.str]]
        """
        Track Prefix List
        """
        track_prefix_list_variable: NotRequired[pulumi.Input[_builtins.str]]
        """
        Variable name
        """
        tracking_objects: NotRequired[pulumi.Input[Sequence[pulumi.Input['VpnInterfaceSviFeatureTemplateIpv4VrrpTrackingObjectArgsDict']]]]
        """
        tracking object for VRRP configuration
        """
elif False:
    VpnInterfaceSviFeatureTemplateIpv4VrrpArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class VpnInterfaceSviFeatureTemplateIpv4VrrpArgs:
    def __init__(__self__, *,
                 group_id: Optional[pulumi.Input[_builtins.int]] = None,
                 group_id_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 ipv4_address: Optional[pulumi.Input[_builtins.str]] = None,
                 ipv4_address_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 ipv4_secondary_addresses: Optional[pulumi.Input[Sequence[pulumi.Input['VpnInterfaceSviFeatureTemplateIpv4VrrpIpv4SecondaryAddressArgs']]]] = None,
                 optional: Optional[pulumi.Input[_builtins.bool]] = None,
                 priority: Optional[pulumi.Input[_builtins.int]] = None,
                 priority_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 timer: Optional[pulumi.Input[_builtins.int]] = None,
                 timer_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 tloc_preference_change: Optional[pulumi.Input[_builtins.bool]] = None,
                 tloc_preference_change_value: Optional[pulumi.Input[_builtins.int]] = None,
                 tloc_preference_change_value_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 track_omp: Optional[pulumi.Input[_builtins.bool]] = None,
                 track_omp_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 track_prefix_list: Optional[pulumi.Input[_builtins.str]] = None,
                 track_prefix_list_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 tracking_objects: Optional[pulumi.Input[Sequence[pulumi.Input['VpnInterfaceSviFeatureTemplateIpv4VrrpTrackingObjectArgs']]]] = None):
        """
        :param pulumi.Input[_builtins.int] group_id: Group ID
                 - Range: `1`-`255`
        :param pulumi.Input[_builtins.str] group_id_variable: Variable name
        :param pulumi.Input[_builtins.str] ipv4_address: Assign IP Address
        :param pulumi.Input[_builtins.str] ipv4_address_variable: Variable name
        :param pulumi.Input[Sequence[pulumi.Input['VpnInterfaceSviFeatureTemplateIpv4VrrpIpv4SecondaryAddressArgs']]] ipv4_secondary_addresses: VRRP Secondary IP address
        :param pulumi.Input[_builtins.bool] optional: Indicates if list item is considered optional.
        :param pulumi.Input[_builtins.int] priority: Set priority
                 - Range: `1`-`254`
                 - Default value: `100`
        :param pulumi.Input[_builtins.str] priority_variable: Variable name
        :param pulumi.Input[_builtins.int] timer: Timer interval for successive advertisements, in milliseconds
                 - Range: `100`-`40950`
                 - Default value: `100`
        :param pulumi.Input[_builtins.str] timer_variable: Variable name
        :param pulumi.Input[_builtins.bool] tloc_preference_change: change TLOC preference
                 - Default value: `false`
        :param pulumi.Input[_builtins.int] tloc_preference_change_value: Set tloc preference change value
                 - Range: `1`-`4294967295`
        :param pulumi.Input[_builtins.str] tloc_preference_change_value_variable: Variable name
        :param pulumi.Input[_builtins.bool] track_omp: Track OMP status
                 - Default value: `false`
        :param pulumi.Input[_builtins.str] track_omp_variable: Variable name
        :param pulumi.Input[_builtins.str] track_prefix_list: Track Prefix List
        :param pulumi.Input[_builtins.str] track_prefix_list_variable: Variable name
        :param pulumi.Input[Sequence[pulumi.Input['VpnInterfaceSviFeatureTemplateIpv4VrrpTrackingObjectArgs']]] tracking_objects: tracking object for VRRP configuration
        """
        if group_id is not None:
            pulumi.set(__self__, "group_id", group_id)
        if group_id_variable is not None:
            pulumi.set(__self__, "group_id_variable", group_id_variable)
        if ipv4_address is not None:
            pulumi.set(__self__, "ipv4_address", ipv4_address)
        if ipv4_address_variable is not None:
            pulumi.set(__self__, "ipv4_address_variable", ipv4_address_variable)
        if ipv4_secondary_addresses is not None:
            pulumi.set(__self__, "ipv4_secondary_addresses", ipv4_secondary_addresses)
        if optional is not None:
            pulumi.set(__self__, "optional", optional)
        if priority is not None:
            pulumi.set(__self__, "priority", priority)
        if priority_variable is not None:
            pulumi.set(__self__, "priority_variable", priority_variable)
        if timer is not None:
            pulumi.set(__self__, "timer", timer)
        if timer_variable is not None:
            pulumi.set(__self__, "timer_variable", timer_variable)
        if tloc_preference_change is not None:
            pulumi.set(__self__, "tloc_preference_change", tloc_preference_change)
        if tloc_preference_change_value is not None:
            pulumi.set(__self__, "tloc_preference_change_value", tloc_preference_change_value)
        if tloc_preference_change_value_variable is not None:
            pulumi.set(__self__, "tloc_preference_change_value_variable", tloc_preference_change_value_variable)
        if track_omp is not None:
            pulumi.set(__self__, "track_omp", track_omp)
        if track_omp_variable is not None:
            pulumi.set(__self__, "track_omp_variable", track_omp_variable)
        if track_prefix_list is not None:
            pulumi.set(__self__, "track_prefix_list", track_prefix_list)
        if track_prefix_list_variable is not None:
            pulumi.set(__self__, "track_prefix_list_variable", track_prefix_list_variable)
        if tracking_objects is not None:
            pulumi.set(__self__, "tracking_objects", tracking_objects)

    @_builtins.property
    @pulumi.getter(name="groupId")
    def group_id(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        Group ID
          - Range: `1`-`255`
        """
        return pulumi.get(self, "group_id")

    @group_id.setter
    def group_id(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "group_id", value)

    @_builtins.property
    @pulumi.getter(name="groupIdVariable")
    def group_id_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "group_id_variable")

    @group_id_variable.setter
    def group_id_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "group_id_variable", value)

    @_builtins.property
    @pulumi.getter(name="ipv4Address")
    def ipv4_address(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Assign IP Address
        """
        return pulumi.get(self, "ipv4_address")

    @ipv4_address.setter
    def ipv4_address(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "ipv4_address", value)

    @_builtins.property
    @pulumi.getter(name="ipv4AddressVariable")
    def ipv4_address_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "ipv4_address_variable")

    @ipv4_address_variable.setter
    def ipv4_address_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "ipv4_address_variable", value)

    @_builtins.property
    @pulumi.getter(name="ipv4SecondaryAddresses")
    def ipv4_secondary_addresses(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['VpnInterfaceSviFeatureTemplateIpv4VrrpIpv4SecondaryAddressArgs']]]]:
        """
        VRRP Secondary IP address
        """
        return pulumi.get(self, "ipv4_secondary_addresses")

    @ipv4_secondary_addresses.setter
    def ipv4_secondary_addresses(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['VpnInterfaceSviFeatureTemplateIpv4VrrpIpv4SecondaryAddressArgs']]]]):
        pulumi.set(self, "ipv4_secondary_addresses", value)

    @_builtins.property
    @pulumi.getter
    def optional(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Indicates if list item is considered optional.
        """
        return pulumi.get(self, "optional")

    @optional.setter
    def optional(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "optional", value)

    @_builtins.property
    @pulumi.getter
    def priority(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        Set priority
          - Range: `1`-`254`
          - Default value: `100`
        """
        return pulumi.get(self, "priority")

    @priority.setter
    def priority(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "priority", value)

    @_builtins.property
    @pulumi.getter(name="priorityVariable")
    def priority_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "priority_variable")

    @priority_variable.setter
    def priority_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "priority_variable", value)

    @_builtins.property
    @pulumi.getter
    def timer(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        Timer interval for successive advertisements, in milliseconds
          - Range: `100`-`40950`
          - Default value: `100`
        """
        return pulumi.get(self, "timer")

    @timer.setter
    def timer(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "timer", value)

    @_builtins.property
    @pulumi.getter(name="timerVariable")
    def timer_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "timer_variable")

    @timer_variable.setter
    def timer_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "timer_variable", value)

    @_builtins.property
    @pulumi.getter(name="tlocPreferenceChange")
    def tloc_preference_change(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        change TLOC preference
          - Default value: `false`
        """
        return pulumi.get(self, "tloc_preference_change")

    @tloc_preference_change.setter
    def tloc_preference_change(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "tloc_preference_change", value)

    @_builtins.property
    @pulumi.getter(name="tlocPreferenceChangeValue")
    def tloc_preference_change_value(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        Set tloc preference change value
          - Range: `1`-`4294967295`
        """
        return pulumi.get(self, "tloc_preference_change_value")

    @tloc_preference_change_value.setter
    def tloc_preference_change_value(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "tloc_preference_change_value", value)

    @_builtins.property
    @pulumi.getter(name="tlocPreferenceChangeValueVariable")
    def tloc_preference_change_value_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "tloc_preference_change_value_variable")

    @tloc_preference_change_value_variable.setter
    def tloc_preference_change_value_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "tloc_preference_change_value_variable", value)

    @_builtins.property
    @pulumi.getter(name="trackOmp")
    def track_omp(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Track OMP status
          - Default value: `false`
        """
        return pulumi.get(self, "track_omp")

    @track_omp.setter
    def track_omp(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "track_omp", value)

    @_builtins.property
    @pulumi.getter(name="trackOmpVariable")
    def track_omp_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "track_omp_variable")

    @track_omp_variable.setter
    def track_omp_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "track_omp_variable", value)

    @_builtins.property
    @pulumi.getter(name="trackPrefixList")
    def track_prefix_list(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Track Prefix List
        """
        return pulumi.get(self, "track_prefix_list")

    @track_prefix_list.setter
    def track_prefix_list(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "track_prefix_list", value)

    @_builtins.property
    @pulumi.getter(name="trackPrefixListVariable")
    def track_prefix_list_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "track_prefix_list_variable")

    @track_prefix_list_variable.setter
    def track_prefix_list_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "track_prefix_list_variable", value)

    @_builtins.property
    @pulumi.getter(name="trackingObjects")
    def tracking_objects(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['VpnInterfaceSviFeatureTemplateIpv4VrrpTrackingObjectArgs']]]]:
        """
        tracking object for VRRP configuration
        """
        return pulumi.get(self, "tracking_objects")

    @tracking_objects.setter
    def tracking_objects(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['VpnInterfaceSviFeatureTemplateIpv4VrrpTrackingObjectArgs']]]]):
        pulumi.set(self, "tracking_objects", value)


if not MYPY:
    class VpnInterfaceSviFeatureTemplateIpv4VrrpIpv4SecondaryAddressArgsDict(TypedDict):
        ipv4_address: NotRequired[pulumi.Input[_builtins.str]]
        """
        VRRP Secondary IP address
        """
        ipv4_address_variable: NotRequired[pulumi.Input[_builtins.str]]
        """
        Variable name
        """
        optional: NotRequired[pulumi.Input[_builtins.bool]]
        """
        Indicates if list item is considered optional.
        """
elif False:
    VpnInterfaceSviFeatureTemplateIpv4VrrpIpv4SecondaryAddressArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class VpnInterfaceSviFeatureTemplateIpv4VrrpIpv4SecondaryAddressArgs:
    def __init__(__self__, *,
                 ipv4_address: Optional[pulumi.Input[_builtins.str]] = None,
                 ipv4_address_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 optional: Optional[pulumi.Input[_builtins.bool]] = None):
        """
        :param pulumi.Input[_builtins.str] ipv4_address: VRRP Secondary IP address
        :param pulumi.Input[_builtins.str] ipv4_address_variable: Variable name
        :param pulumi.Input[_builtins.bool] optional: Indicates if list item is considered optional.
        """
        if ipv4_address is not None:
            pulumi.set(__self__, "ipv4_address", ipv4_address)
        if ipv4_address_variable is not None:
            pulumi.set(__self__, "ipv4_address_variable", ipv4_address_variable)
        if optional is not None:
            pulumi.set(__self__, "optional", optional)

    @_builtins.property
    @pulumi.getter(name="ipv4Address")
    def ipv4_address(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        VRRP Secondary IP address
        """
        return pulumi.get(self, "ipv4_address")

    @ipv4_address.setter
    def ipv4_address(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "ipv4_address", value)

    @_builtins.property
    @pulumi.getter(name="ipv4AddressVariable")
    def ipv4_address_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "ipv4_address_variable")

    @ipv4_address_variable.setter
    def ipv4_address_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "ipv4_address_variable", value)

    @_builtins.property
    @pulumi.getter
    def optional(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Indicates if list item is considered optional.
        """
        return pulumi.get(self, "optional")

    @optional.setter
    def optional(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "optional", value)


if not MYPY:
    class VpnInterfaceSviFeatureTemplateIpv4VrrpTrackingObjectArgsDict(TypedDict):
        decrement_value: NotRequired[pulumi.Input[_builtins.int]]
        """
        Decrement Value for VRRP priority
          - Range: `1`-`255`
        """
        decrement_value_variable: NotRequired[pulumi.Input[_builtins.str]]
        """
        Variable name
        """
        name: NotRequired[pulumi.Input[_builtins.int]]
        """
        Tracker ID
          - Range: `1`-`1000`
        """
        name_variable: NotRequired[pulumi.Input[_builtins.str]]
        """
        Variable name
        """
        optional: NotRequired[pulumi.Input[_builtins.bool]]
        """
        Indicates if list item is considered optional.
        """
        track_action: NotRequired[pulumi.Input[_builtins.str]]
        """
        Track Action
          - Choices: `decrement`, `shutdown`
          - Default value: `decrement`
        """
        track_action_variable: NotRequired[pulumi.Input[_builtins.str]]
        """
        Variable name
        """
elif False:
    VpnInterfaceSviFeatureTemplateIpv4VrrpTrackingObjectArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class VpnInterfaceSviFeatureTemplateIpv4VrrpTrackingObjectArgs:
    def __init__(__self__, *,
                 decrement_value: Optional[pulumi.Input[_builtins.int]] = None,
                 decrement_value_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 name: Optional[pulumi.Input[_builtins.int]] = None,
                 name_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 optional: Optional[pulumi.Input[_builtins.bool]] = None,
                 track_action: Optional[pulumi.Input[_builtins.str]] = None,
                 track_action_variable: Optional[pulumi.Input[_builtins.str]] = None):
        """
        :param pulumi.Input[_builtins.int] decrement_value: Decrement Value for VRRP priority
                 - Range: `1`-`255`
        :param pulumi.Input[_builtins.str] decrement_value_variable: Variable name
        :param pulumi.Input[_builtins.int] name: Tracker ID
                 - Range: `1`-`1000`
        :param pulumi.Input[_builtins.str] name_variable: Variable name
        :param pulumi.Input[_builtins.bool] optional: Indicates if list item is considered optional.
        :param pulumi.Input[_builtins.str] track_action: Track Action
                 - Choices: `decrement`, `shutdown`
                 - Default value: `decrement`
        :param pulumi.Input[_builtins.str] track_action_variable: Variable name
        """
        if decrement_value is not None:
            pulumi.set(__self__, "decrement_value", decrement_value)
        if decrement_value_variable is not None:
            pulumi.set(__self__, "decrement_value_variable", decrement_value_variable)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if name_variable is not None:
            pulumi.set(__self__, "name_variable", name_variable)
        if optional is not None:
            pulumi.set(__self__, "optional", optional)
        if track_action is not None:
            pulumi.set(__self__, "track_action", track_action)
        if track_action_variable is not None:
            pulumi.set(__self__, "track_action_variable", track_action_variable)

    @_builtins.property
    @pulumi.getter(name="decrementValue")
    def decrement_value(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        Decrement Value for VRRP priority
          - Range: `1`-`255`
        """
        return pulumi.get(self, "decrement_value")

    @decrement_value.setter
    def decrement_value(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "decrement_value", value)

    @_builtins.property
    @pulumi.getter(name="decrementValueVariable")
    def decrement_value_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "decrement_value_variable")

    @decrement_value_variable.setter
    def decrement_value_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "decrement_value_variable", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        Tracker ID
          - Range: `1`-`1000`
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "name", value)

    @_builtins.property
    @pulumi.getter(name="nameVariable")
    def name_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "name_variable")

    @name_variable.setter
    def name_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "name_variable", value)

    @_builtins.property
    @pulumi.getter
    def optional(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Indicates if list item is considered optional.
        """
        return pulumi.get(self, "optional")

    @optional.setter
    def optional(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "optional", value)

    @_builtins.property
    @pulumi.getter(name="trackAction")
    def track_action(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Track Action
          - Choices: `decrement`, `shutdown`
          - Default value: `decrement`
        """
        return pulumi.get(self, "track_action")

    @track_action.setter
    def track_action(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "track_action", value)

    @_builtins.property
    @pulumi.getter(name="trackActionVariable")
    def track_action_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "track_action_variable")

    @track_action_variable.setter
    def track_action_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "track_action_variable", value)


if not MYPY:
    class VpnInterfaceSviFeatureTemplateIpv6AccessListArgsDict(TypedDict):
        acl_name: NotRequired[pulumi.Input[_builtins.str]]
        """
        Name of access list
        """
        acl_name_variable: NotRequired[pulumi.Input[_builtins.str]]
        """
        Variable name
        """
        direction: NotRequired[pulumi.Input[_builtins.str]]
        """
        Direction
          - Choices: `in`, `out`
        """
        optional: NotRequired[pulumi.Input[_builtins.bool]]
        """
        Indicates if list item is considered optional.
        """
elif False:
    VpnInterfaceSviFeatureTemplateIpv6AccessListArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class VpnInterfaceSviFeatureTemplateIpv6AccessListArgs:
    def __init__(__self__, *,
                 acl_name: Optional[pulumi.Input[_builtins.str]] = None,
                 acl_name_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 direction: Optional[pulumi.Input[_builtins.str]] = None,
                 optional: Optional[pulumi.Input[_builtins.bool]] = None):
        """
        :param pulumi.Input[_builtins.str] acl_name: Name of access list
        :param pulumi.Input[_builtins.str] acl_name_variable: Variable name
        :param pulumi.Input[_builtins.str] direction: Direction
                 - Choices: `in`, `out`
        :param pulumi.Input[_builtins.bool] optional: Indicates if list item is considered optional.
        """
        if acl_name is not None:
            pulumi.set(__self__, "acl_name", acl_name)
        if acl_name_variable is not None:
            pulumi.set(__self__, "acl_name_variable", acl_name_variable)
        if direction is not None:
            pulumi.set(__self__, "direction", direction)
        if optional is not None:
            pulumi.set(__self__, "optional", optional)

    @_builtins.property
    @pulumi.getter(name="aclName")
    def acl_name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Name of access list
        """
        return pulumi.get(self, "acl_name")

    @acl_name.setter
    def acl_name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "acl_name", value)

    @_builtins.property
    @pulumi.getter(name="aclNameVariable")
    def acl_name_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "acl_name_variable")

    @acl_name_variable.setter
    def acl_name_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "acl_name_variable", value)

    @_builtins.property
    @pulumi.getter
    def direction(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Direction
          - Choices: `in`, `out`
        """
        return pulumi.get(self, "direction")

    @direction.setter
    def direction(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "direction", value)

    @_builtins.property
    @pulumi.getter
    def optional(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Indicates if list item is considered optional.
        """
        return pulumi.get(self, "optional")

    @optional.setter
    def optional(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "optional", value)


if not MYPY:
    class VpnInterfaceSviFeatureTemplateIpv6DhcpHelperArgsDict(TypedDict):
        address: NotRequired[pulumi.Input[_builtins.str]]
        """
        DHCPv6 Helper address
        """
        address_variable: NotRequired[pulumi.Input[_builtins.str]]
        """
        Variable name
        """
        optional: NotRequired[pulumi.Input[_builtins.bool]]
        """
        Indicates if list item is considered optional.
        """
        vpn_id: NotRequired[pulumi.Input[_builtins.int]]
        """
        DHCPv6 Helper VPN
          - Range: `1`-`65536`
        """
        vpn_id_variable: NotRequired[pulumi.Input[_builtins.str]]
        """
        Variable name
        """
elif False:
    VpnInterfaceSviFeatureTemplateIpv6DhcpHelperArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class VpnInterfaceSviFeatureTemplateIpv6DhcpHelperArgs:
    def __init__(__self__, *,
                 address: Optional[pulumi.Input[_builtins.str]] = None,
                 address_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 optional: Optional[pulumi.Input[_builtins.bool]] = None,
                 vpn_id: Optional[pulumi.Input[_builtins.int]] = None,
                 vpn_id_variable: Optional[pulumi.Input[_builtins.str]] = None):
        """
        :param pulumi.Input[_builtins.str] address: DHCPv6 Helper address
        :param pulumi.Input[_builtins.str] address_variable: Variable name
        :param pulumi.Input[_builtins.bool] optional: Indicates if list item is considered optional.
        :param pulumi.Input[_builtins.int] vpn_id: DHCPv6 Helper VPN
                 - Range: `1`-`65536`
        :param pulumi.Input[_builtins.str] vpn_id_variable: Variable name
        """
        if address is not None:
            pulumi.set(__self__, "address", address)
        if address_variable is not None:
            pulumi.set(__self__, "address_variable", address_variable)
        if optional is not None:
            pulumi.set(__self__, "optional", optional)
        if vpn_id is not None:
            pulumi.set(__self__, "vpn_id", vpn_id)
        if vpn_id_variable is not None:
            pulumi.set(__self__, "vpn_id_variable", vpn_id_variable)

    @_builtins.property
    @pulumi.getter
    def address(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        DHCPv6 Helper address
        """
        return pulumi.get(self, "address")

    @address.setter
    def address(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "address", value)

    @_builtins.property
    @pulumi.getter(name="addressVariable")
    def address_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "address_variable")

    @address_variable.setter
    def address_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "address_variable", value)

    @_builtins.property
    @pulumi.getter
    def optional(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Indicates if list item is considered optional.
        """
        return pulumi.get(self, "optional")

    @optional.setter
    def optional(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "optional", value)

    @_builtins.property
    @pulumi.getter(name="vpnId")
    def vpn_id(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        DHCPv6 Helper VPN
          - Range: `1`-`65536`
        """
        return pulumi.get(self, "vpn_id")

    @vpn_id.setter
    def vpn_id(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "vpn_id", value)

    @_builtins.property
    @pulumi.getter(name="vpnIdVariable")
    def vpn_id_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "vpn_id_variable")

    @vpn_id_variable.setter
    def vpn_id_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "vpn_id_variable", value)


if not MYPY:
    class VpnInterfaceSviFeatureTemplateIpv6SecondaryAddressArgsDict(TypedDict):
        ipv6_address: NotRequired[pulumi.Input[_builtins.str]]
        """
        IPv6 Address
        """
        ipv6_address_variable: NotRequired[pulumi.Input[_builtins.str]]
        """
        Variable name
        """
        optional: NotRequired[pulumi.Input[_builtins.bool]]
        """
        Indicates if list item is considered optional.
        """
elif False:
    VpnInterfaceSviFeatureTemplateIpv6SecondaryAddressArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class VpnInterfaceSviFeatureTemplateIpv6SecondaryAddressArgs:
    def __init__(__self__, *,
                 ipv6_address: Optional[pulumi.Input[_builtins.str]] = None,
                 ipv6_address_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 optional: Optional[pulumi.Input[_builtins.bool]] = None):
        """
        :param pulumi.Input[_builtins.str] ipv6_address: IPv6 Address
        :param pulumi.Input[_builtins.str] ipv6_address_variable: Variable name
        :param pulumi.Input[_builtins.bool] optional: Indicates if list item is considered optional.
        """
        if ipv6_address is not None:
            pulumi.set(__self__, "ipv6_address", ipv6_address)
        if ipv6_address_variable is not None:
            pulumi.set(__self__, "ipv6_address_variable", ipv6_address_variable)
        if optional is not None:
            pulumi.set(__self__, "optional", optional)

    @_builtins.property
    @pulumi.getter(name="ipv6Address")
    def ipv6_address(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        IPv6 Address
        """
        return pulumi.get(self, "ipv6_address")

    @ipv6_address.setter
    def ipv6_address(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "ipv6_address", value)

    @_builtins.property
    @pulumi.getter(name="ipv6AddressVariable")
    def ipv6_address_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "ipv6_address_variable")

    @ipv6_address_variable.setter
    def ipv6_address_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "ipv6_address_variable", value)

    @_builtins.property
    @pulumi.getter
    def optional(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Indicates if list item is considered optional.
        """
        return pulumi.get(self, "optional")

    @optional.setter
    def optional(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "optional", value)


if not MYPY:
    class VpnInterfaceSviFeatureTemplateIpv6VrrpArgsDict(TypedDict):
        group_id: NotRequired[pulumi.Input[_builtins.int]]
        """
        Group ID
          - Range: `1`-`255`
        """
        group_id_variable: NotRequired[pulumi.Input[_builtins.str]]
        """
        Variable name
        """
        ipv6_addresses: NotRequired[pulumi.Input[Sequence[pulumi.Input['VpnInterfaceSviFeatureTemplateIpv6VrrpIpv6AddressArgsDict']]]]
        """
        IPv6 VRRP
        """
        ipv6_secondary_addresses: NotRequired[pulumi.Input[Sequence[pulumi.Input['VpnInterfaceSviFeatureTemplateIpv6VrrpIpv6SecondaryAddressArgsDict']]]]
        """
        IPv6 Secondary IP address
        """
        optional: NotRequired[pulumi.Input[_builtins.bool]]
        """
        Indicates if list item is considered optional.
        """
        priority: NotRequired[pulumi.Input[_builtins.int]]
        """
        Set priority
          - Range: `1`-`254`
          - Default value: `100`
        """
        priority_variable: NotRequired[pulumi.Input[_builtins.str]]
        """
        Variable name
        """
        timer: NotRequired[pulumi.Input[_builtins.int]]
        """
        Timer interval for successive advertisements, in milliseconds
          - Range: `100`-`40950`
          - Default value: `100`
        """
        timer_variable: NotRequired[pulumi.Input[_builtins.str]]
        """
        Variable name
        """
        track_omp: NotRequired[pulumi.Input[_builtins.bool]]
        """
        Track OMP status
          - Default value: `false`
        """
        track_omp_variable: NotRequired[pulumi.Input[_builtins.str]]
        """
        Variable name
        """
        track_prefix_list: NotRequired[pulumi.Input[_builtins.str]]
        """
        Track Prefix List
        """
        track_prefix_list_variable: NotRequired[pulumi.Input[_builtins.str]]
        """
        Variable name
        """
elif False:
    VpnInterfaceSviFeatureTemplateIpv6VrrpArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class VpnInterfaceSviFeatureTemplateIpv6VrrpArgs:
    def __init__(__self__, *,
                 group_id: Optional[pulumi.Input[_builtins.int]] = None,
                 group_id_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 ipv6_addresses: Optional[pulumi.Input[Sequence[pulumi.Input['VpnInterfaceSviFeatureTemplateIpv6VrrpIpv6AddressArgs']]]] = None,
                 ipv6_secondary_addresses: Optional[pulumi.Input[Sequence[pulumi.Input['VpnInterfaceSviFeatureTemplateIpv6VrrpIpv6SecondaryAddressArgs']]]] = None,
                 optional: Optional[pulumi.Input[_builtins.bool]] = None,
                 priority: Optional[pulumi.Input[_builtins.int]] = None,
                 priority_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 timer: Optional[pulumi.Input[_builtins.int]] = None,
                 timer_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 track_omp: Optional[pulumi.Input[_builtins.bool]] = None,
                 track_omp_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 track_prefix_list: Optional[pulumi.Input[_builtins.str]] = None,
                 track_prefix_list_variable: Optional[pulumi.Input[_builtins.str]] = None):
        """
        :param pulumi.Input[_builtins.int] group_id: Group ID
                 - Range: `1`-`255`
        :param pulumi.Input[_builtins.str] group_id_variable: Variable name
        :param pulumi.Input[Sequence[pulumi.Input['VpnInterfaceSviFeatureTemplateIpv6VrrpIpv6AddressArgs']]] ipv6_addresses: IPv6 VRRP
        :param pulumi.Input[Sequence[pulumi.Input['VpnInterfaceSviFeatureTemplateIpv6VrrpIpv6SecondaryAddressArgs']]] ipv6_secondary_addresses: IPv6 Secondary IP address
        :param pulumi.Input[_builtins.bool] optional: Indicates if list item is considered optional.
        :param pulumi.Input[_builtins.int] priority: Set priority
                 - Range: `1`-`254`
                 - Default value: `100`
        :param pulumi.Input[_builtins.str] priority_variable: Variable name
        :param pulumi.Input[_builtins.int] timer: Timer interval for successive advertisements, in milliseconds
                 - Range: `100`-`40950`
                 - Default value: `100`
        :param pulumi.Input[_builtins.str] timer_variable: Variable name
        :param pulumi.Input[_builtins.bool] track_omp: Track OMP status
                 - Default value: `false`
        :param pulumi.Input[_builtins.str] track_omp_variable: Variable name
        :param pulumi.Input[_builtins.str] track_prefix_list: Track Prefix List
        :param pulumi.Input[_builtins.str] track_prefix_list_variable: Variable name
        """
        if group_id is not None:
            pulumi.set(__self__, "group_id", group_id)
        if group_id_variable is not None:
            pulumi.set(__self__, "group_id_variable", group_id_variable)
        if ipv6_addresses is not None:
            pulumi.set(__self__, "ipv6_addresses", ipv6_addresses)
        if ipv6_secondary_addresses is not None:
            pulumi.set(__self__, "ipv6_secondary_addresses", ipv6_secondary_addresses)
        if optional is not None:
            pulumi.set(__self__, "optional", optional)
        if priority is not None:
            pulumi.set(__self__, "priority", priority)
        if priority_variable is not None:
            pulumi.set(__self__, "priority_variable", priority_variable)
        if timer is not None:
            pulumi.set(__self__, "timer", timer)
        if timer_variable is not None:
            pulumi.set(__self__, "timer_variable", timer_variable)
        if track_omp is not None:
            pulumi.set(__self__, "track_omp", track_omp)
        if track_omp_variable is not None:
            pulumi.set(__self__, "track_omp_variable", track_omp_variable)
        if track_prefix_list is not None:
            pulumi.set(__self__, "track_prefix_list", track_prefix_list)
        if track_prefix_list_variable is not None:
            pulumi.set(__self__, "track_prefix_list_variable", track_prefix_list_variable)

    @_builtins.property
    @pulumi.getter(name="groupId")
    def group_id(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        Group ID
          - Range: `1`-`255`
        """
        return pulumi.get(self, "group_id")

    @group_id.setter
    def group_id(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "group_id", value)

    @_builtins.property
    @pulumi.getter(name="groupIdVariable")
    def group_id_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "group_id_variable")

    @group_id_variable.setter
    def group_id_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "group_id_variable", value)

    @_builtins.property
    @pulumi.getter(name="ipv6Addresses")
    def ipv6_addresses(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['VpnInterfaceSviFeatureTemplateIpv6VrrpIpv6AddressArgs']]]]:
        """
        IPv6 VRRP
        """
        return pulumi.get(self, "ipv6_addresses")

    @ipv6_addresses.setter
    def ipv6_addresses(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['VpnInterfaceSviFeatureTemplateIpv6VrrpIpv6AddressArgs']]]]):
        pulumi.set(self, "ipv6_addresses", value)

    @_builtins.property
    @pulumi.getter(name="ipv6SecondaryAddresses")
    def ipv6_secondary_addresses(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['VpnInterfaceSviFeatureTemplateIpv6VrrpIpv6SecondaryAddressArgs']]]]:
        """
        IPv6 Secondary IP address
        """
        return pulumi.get(self, "ipv6_secondary_addresses")

    @ipv6_secondary_addresses.setter
    def ipv6_secondary_addresses(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['VpnInterfaceSviFeatureTemplateIpv6VrrpIpv6SecondaryAddressArgs']]]]):
        pulumi.set(self, "ipv6_secondary_addresses", value)

    @_builtins.property
    @pulumi.getter
    def optional(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Indicates if list item is considered optional.
        """
        return pulumi.get(self, "optional")

    @optional.setter
    def optional(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "optional", value)

    @_builtins.property
    @pulumi.getter
    def priority(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        Set priority
          - Range: `1`-`254`
          - Default value: `100`
        """
        return pulumi.get(self, "priority")

    @priority.setter
    def priority(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "priority", value)

    @_builtins.property
    @pulumi.getter(name="priorityVariable")
    def priority_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "priority_variable")

    @priority_variable.setter
    def priority_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "priority_variable", value)

    @_builtins.property
    @pulumi.getter
    def timer(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        Timer interval for successive advertisements, in milliseconds
          - Range: `100`-`40950`
          - Default value: `100`
        """
        return pulumi.get(self, "timer")

    @timer.setter
    def timer(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "timer", value)

    @_builtins.property
    @pulumi.getter(name="timerVariable")
    def timer_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "timer_variable")

    @timer_variable.setter
    def timer_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "timer_variable", value)

    @_builtins.property
    @pulumi.getter(name="trackOmp")
    def track_omp(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Track OMP status
          - Default value: `false`
        """
        return pulumi.get(self, "track_omp")

    @track_omp.setter
    def track_omp(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "track_omp", value)

    @_builtins.property
    @pulumi.getter(name="trackOmpVariable")
    def track_omp_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "track_omp_variable")

    @track_omp_variable.setter
    def track_omp_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "track_omp_variable", value)

    @_builtins.property
    @pulumi.getter(name="trackPrefixList")
    def track_prefix_list(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Track Prefix List
        """
        return pulumi.get(self, "track_prefix_list")

    @track_prefix_list.setter
    def track_prefix_list(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "track_prefix_list", value)

    @_builtins.property
    @pulumi.getter(name="trackPrefixListVariable")
    def track_prefix_list_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "track_prefix_list_variable")

    @track_prefix_list_variable.setter
    def track_prefix_list_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "track_prefix_list_variable", value)


if not MYPY:
    class VpnInterfaceSviFeatureTemplateIpv6VrrpIpv6AddressArgsDict(TypedDict):
        link_local_address: NotRequired[pulumi.Input[_builtins.str]]
        """
        Use link-local IPv6 Address
        """
        link_local_address_variable: NotRequired[pulumi.Input[_builtins.str]]
        """
        Variable name
        """
        optional: NotRequired[pulumi.Input[_builtins.bool]]
        """
        Indicates if list item is considered optional.
        """
        prefix: NotRequired[pulumi.Input[_builtins.str]]
        """
        Assign Global IPv6 Prefix
        """
        prefix_variable: NotRequired[pulumi.Input[_builtins.str]]
        """
        Variable name
        """
elif False:
    VpnInterfaceSviFeatureTemplateIpv6VrrpIpv6AddressArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class VpnInterfaceSviFeatureTemplateIpv6VrrpIpv6AddressArgs:
    def __init__(__self__, *,
                 link_local_address: Optional[pulumi.Input[_builtins.str]] = None,
                 link_local_address_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 optional: Optional[pulumi.Input[_builtins.bool]] = None,
                 prefix: Optional[pulumi.Input[_builtins.str]] = None,
                 prefix_variable: Optional[pulumi.Input[_builtins.str]] = None):
        """
        :param pulumi.Input[_builtins.str] link_local_address: Use link-local IPv6 Address
        :param pulumi.Input[_builtins.str] link_local_address_variable: Variable name
        :param pulumi.Input[_builtins.bool] optional: Indicates if list item is considered optional.
        :param pulumi.Input[_builtins.str] prefix: Assign Global IPv6 Prefix
        :param pulumi.Input[_builtins.str] prefix_variable: Variable name
        """
        if link_local_address is not None:
            pulumi.set(__self__, "link_local_address", link_local_address)
        if link_local_address_variable is not None:
            pulumi.set(__self__, "link_local_address_variable", link_local_address_variable)
        if optional is not None:
            pulumi.set(__self__, "optional", optional)
        if prefix is not None:
            pulumi.set(__self__, "prefix", prefix)
        if prefix_variable is not None:
            pulumi.set(__self__, "prefix_variable", prefix_variable)

    @_builtins.property
    @pulumi.getter(name="linkLocalAddress")
    def link_local_address(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Use link-local IPv6 Address
        """
        return pulumi.get(self, "link_local_address")

    @link_local_address.setter
    def link_local_address(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "link_local_address", value)

    @_builtins.property
    @pulumi.getter(name="linkLocalAddressVariable")
    def link_local_address_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "link_local_address_variable")

    @link_local_address_variable.setter
    def link_local_address_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "link_local_address_variable", value)

    @_builtins.property
    @pulumi.getter
    def optional(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Indicates if list item is considered optional.
        """
        return pulumi.get(self, "optional")

    @optional.setter
    def optional(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "optional", value)

    @_builtins.property
    @pulumi.getter
    def prefix(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Assign Global IPv6 Prefix
        """
        return pulumi.get(self, "prefix")

    @prefix.setter
    def prefix(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "prefix", value)

    @_builtins.property
    @pulumi.getter(name="prefixVariable")
    def prefix_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "prefix_variable")

    @prefix_variable.setter
    def prefix_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "prefix_variable", value)


if not MYPY:
    class VpnInterfaceSviFeatureTemplateIpv6VrrpIpv6SecondaryAddressArgsDict(TypedDict):
        optional: NotRequired[pulumi.Input[_builtins.bool]]
        """
        Indicates if list item is considered optional.
        """
        prefix: NotRequired[pulumi.Input[_builtins.str]]
        """
        IPv6 Secondary IP address
        """
        prefix_variable: NotRequired[pulumi.Input[_builtins.str]]
        """
        Variable name
        """
elif False:
    VpnInterfaceSviFeatureTemplateIpv6VrrpIpv6SecondaryAddressArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class VpnInterfaceSviFeatureTemplateIpv6VrrpIpv6SecondaryAddressArgs:
    def __init__(__self__, *,
                 optional: Optional[pulumi.Input[_builtins.bool]] = None,
                 prefix: Optional[pulumi.Input[_builtins.str]] = None,
                 prefix_variable: Optional[pulumi.Input[_builtins.str]] = None):
        """
        :param pulumi.Input[_builtins.bool] optional: Indicates if list item is considered optional.
        :param pulumi.Input[_builtins.str] prefix: IPv6 Secondary IP address
        :param pulumi.Input[_builtins.str] prefix_variable: Variable name
        """
        if optional is not None:
            pulumi.set(__self__, "optional", optional)
        if prefix is not None:
            pulumi.set(__self__, "prefix", prefix)
        if prefix_variable is not None:
            pulumi.set(__self__, "prefix_variable", prefix_variable)

    @_builtins.property
    @pulumi.getter
    def optional(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Indicates if list item is considered optional.
        """
        return pulumi.get(self, "optional")

    @optional.setter
    def optional(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "optional", value)

    @_builtins.property
    @pulumi.getter
    def prefix(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        IPv6 Secondary IP address
        """
        return pulumi.get(self, "prefix")

    @prefix.setter
    def prefix(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "prefix", value)

    @_builtins.property
    @pulumi.getter(name="prefixVariable")
    def prefix_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "prefix_variable")

    @prefix_variable.setter
    def prefix_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "prefix_variable", value)


if not MYPY:
    class VpnInterfaceSviFeatureTemplatePolicerArgsDict(TypedDict):
        direction: NotRequired[pulumi.Input[_builtins.str]]
        """
        Direction
          - Choices: `in`, `out`
        """
        optional: NotRequired[pulumi.Input[_builtins.bool]]
        """
        Indicates if list item is considered optional.
        """
        policer_name: NotRequired[pulumi.Input[_builtins.str]]
        """
        Name of policer
        """
elif False:
    VpnInterfaceSviFeatureTemplatePolicerArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class VpnInterfaceSviFeatureTemplatePolicerArgs:
    def __init__(__self__, *,
                 direction: Optional[pulumi.Input[_builtins.str]] = None,
                 optional: Optional[pulumi.Input[_builtins.bool]] = None,
                 policer_name: Optional[pulumi.Input[_builtins.str]] = None):
        """
        :param pulumi.Input[_builtins.str] direction: Direction
                 - Choices: `in`, `out`
        :param pulumi.Input[_builtins.bool] optional: Indicates if list item is considered optional.
        :param pulumi.Input[_builtins.str] policer_name: Name of policer
        """
        if direction is not None:
            pulumi.set(__self__, "direction", direction)
        if optional is not None:
            pulumi.set(__self__, "optional", optional)
        if policer_name is not None:
            pulumi.set(__self__, "policer_name", policer_name)

    @_builtins.property
    @pulumi.getter
    def direction(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Direction
          - Choices: `in`, `out`
        """
        return pulumi.get(self, "direction")

    @direction.setter
    def direction(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "direction", value)

    @_builtins.property
    @pulumi.getter
    def optional(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Indicates if list item is considered optional.
        """
        return pulumi.get(self, "optional")

    @optional.setter
    def optional(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "optional", value)

    @_builtins.property
    @pulumi.getter(name="policerName")
    def policer_name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Name of policer
        """
        return pulumi.get(self, "policer_name")

    @policer_name.setter
    def policer_name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "policer_name", value)


if not MYPY:
    class VpnInterfaceSviFeatureTemplateStaticArpEntryArgsDict(TypedDict):
        ipv4_address: NotRequired[pulumi.Input[_builtins.str]]
        """
        IP Address
        """
        ipv4_address_variable: NotRequired[pulumi.Input[_builtins.str]]
        """
        Variable name
        """
        mac_address: NotRequired[pulumi.Input[_builtins.str]]
        """
        MAC address
        """
        mac_address_variable: NotRequired[pulumi.Input[_builtins.str]]
        """
        Variable name
        """
        optional: NotRequired[pulumi.Input[_builtins.bool]]
        """
        Indicates if list item is considered optional.
        """
elif False:
    VpnInterfaceSviFeatureTemplateStaticArpEntryArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class VpnInterfaceSviFeatureTemplateStaticArpEntryArgs:
    def __init__(__self__, *,
                 ipv4_address: Optional[pulumi.Input[_builtins.str]] = None,
                 ipv4_address_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 mac_address: Optional[pulumi.Input[_builtins.str]] = None,
                 mac_address_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 optional: Optional[pulumi.Input[_builtins.bool]] = None):
        """
        :param pulumi.Input[_builtins.str] ipv4_address: IP Address
        :param pulumi.Input[_builtins.str] ipv4_address_variable: Variable name
        :param pulumi.Input[_builtins.str] mac_address: MAC address
        :param pulumi.Input[_builtins.str] mac_address_variable: Variable name
        :param pulumi.Input[_builtins.bool] optional: Indicates if list item is considered optional.
        """
        if ipv4_address is not None:
            pulumi.set(__self__, "ipv4_address", ipv4_address)
        if ipv4_address_variable is not None:
            pulumi.set(__self__, "ipv4_address_variable", ipv4_address_variable)
        if mac_address is not None:
            pulumi.set(__self__, "mac_address", mac_address)
        if mac_address_variable is not None:
            pulumi.set(__self__, "mac_address_variable", mac_address_variable)
        if optional is not None:
            pulumi.set(__self__, "optional", optional)

    @_builtins.property
    @pulumi.getter(name="ipv4Address")
    def ipv4_address(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        IP Address
        """
        return pulumi.get(self, "ipv4_address")

    @ipv4_address.setter
    def ipv4_address(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "ipv4_address", value)

    @_builtins.property
    @pulumi.getter(name="ipv4AddressVariable")
    def ipv4_address_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "ipv4_address_variable")

    @ipv4_address_variable.setter
    def ipv4_address_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "ipv4_address_variable", value)

    @_builtins.property
    @pulumi.getter(name="macAddress")
    def mac_address(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        MAC address
        """
        return pulumi.get(self, "mac_address")

    @mac_address.setter
    def mac_address(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "mac_address", value)

    @_builtins.property
    @pulumi.getter(name="macAddressVariable")
    def mac_address_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "mac_address_variable")

    @mac_address_variable.setter
    def mac_address_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "mac_address_variable", value)

    @_builtins.property
    @pulumi.getter
    def optional(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Indicates if list item is considered optional.
        """
        return pulumi.get(self, "optional")

    @optional.setter
    def optional(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "optional", value)


if not MYPY:
    class VpnInterfaceT1E1SerialFeatureTemplateIpv4AccessListArgsDict(TypedDict):
        acl_name: NotRequired[pulumi.Input[_builtins.str]]
        """
        Name of access list
        """
        acl_name_variable: NotRequired[pulumi.Input[_builtins.str]]
        """
        Variable name
        """
        direction: NotRequired[pulumi.Input[_builtins.str]]
        """
        Direction
          - Choices: `in`, `out`
        """
        optional: NotRequired[pulumi.Input[_builtins.bool]]
        """
        Indicates if list item is considered optional.
        """
elif False:
    VpnInterfaceT1E1SerialFeatureTemplateIpv4AccessListArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class VpnInterfaceT1E1SerialFeatureTemplateIpv4AccessListArgs:
    def __init__(__self__, *,
                 acl_name: Optional[pulumi.Input[_builtins.str]] = None,
                 acl_name_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 direction: Optional[pulumi.Input[_builtins.str]] = None,
                 optional: Optional[pulumi.Input[_builtins.bool]] = None):
        """
        :param pulumi.Input[_builtins.str] acl_name: Name of access list
        :param pulumi.Input[_builtins.str] acl_name_variable: Variable name
        :param pulumi.Input[_builtins.str] direction: Direction
                 - Choices: `in`, `out`
        :param pulumi.Input[_builtins.bool] optional: Indicates if list item is considered optional.
        """
        if acl_name is not None:
            pulumi.set(__self__, "acl_name", acl_name)
        if acl_name_variable is not None:
            pulumi.set(__self__, "acl_name_variable", acl_name_variable)
        if direction is not None:
            pulumi.set(__self__, "direction", direction)
        if optional is not None:
            pulumi.set(__self__, "optional", optional)

    @_builtins.property
    @pulumi.getter(name="aclName")
    def acl_name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Name of access list
        """
        return pulumi.get(self, "acl_name")

    @acl_name.setter
    def acl_name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "acl_name", value)

    @_builtins.property
    @pulumi.getter(name="aclNameVariable")
    def acl_name_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "acl_name_variable")

    @acl_name_variable.setter
    def acl_name_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "acl_name_variable", value)

    @_builtins.property
    @pulumi.getter
    def direction(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Direction
          - Choices: `in`, `out`
        """
        return pulumi.get(self, "direction")

    @direction.setter
    def direction(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "direction", value)

    @_builtins.property
    @pulumi.getter
    def optional(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Indicates if list item is considered optional.
        """
        return pulumi.get(self, "optional")

    @optional.setter
    def optional(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "optional", value)


if not MYPY:
    class VpnInterfaceT1E1SerialFeatureTemplateIpv6AccessListArgsDict(TypedDict):
        acl_name: NotRequired[pulumi.Input[_builtins.str]]
        """
        Name of access list
        """
        acl_name_variable: NotRequired[pulumi.Input[_builtins.str]]
        """
        Variable name
        """
        direction: NotRequired[pulumi.Input[_builtins.str]]
        """
        Direction
          - Choices: `in`, `out`
        """
        optional: NotRequired[pulumi.Input[_builtins.bool]]
        """
        Indicates if list item is considered optional.
        """
elif False:
    VpnInterfaceT1E1SerialFeatureTemplateIpv6AccessListArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class VpnInterfaceT1E1SerialFeatureTemplateIpv6AccessListArgs:
    def __init__(__self__, *,
                 acl_name: Optional[pulumi.Input[_builtins.str]] = None,
                 acl_name_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 direction: Optional[pulumi.Input[_builtins.str]] = None,
                 optional: Optional[pulumi.Input[_builtins.bool]] = None):
        """
        :param pulumi.Input[_builtins.str] acl_name: Name of access list
        :param pulumi.Input[_builtins.str] acl_name_variable: Variable name
        :param pulumi.Input[_builtins.str] direction: Direction
                 - Choices: `in`, `out`
        :param pulumi.Input[_builtins.bool] optional: Indicates if list item is considered optional.
        """
        if acl_name is not None:
            pulumi.set(__self__, "acl_name", acl_name)
        if acl_name_variable is not None:
            pulumi.set(__self__, "acl_name_variable", acl_name_variable)
        if direction is not None:
            pulumi.set(__self__, "direction", direction)
        if optional is not None:
            pulumi.set(__self__, "optional", optional)

    @_builtins.property
    @pulumi.getter(name="aclName")
    def acl_name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Name of access list
        """
        return pulumi.get(self, "acl_name")

    @acl_name.setter
    def acl_name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "acl_name", value)

    @_builtins.property
    @pulumi.getter(name="aclNameVariable")
    def acl_name_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "acl_name_variable")

    @acl_name_variable.setter
    def acl_name_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "acl_name_variable", value)

    @_builtins.property
    @pulumi.getter
    def direction(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Direction
          - Choices: `in`, `out`
        """
        return pulumi.get(self, "direction")

    @direction.setter
    def direction(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "direction", value)

    @_builtins.property
    @pulumi.getter
    def optional(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Indicates if list item is considered optional.
        """
        return pulumi.get(self, "optional")

    @optional.setter
    def optional(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "optional", value)


if not MYPY:
    class VpnInterfaceT1E1SerialFeatureTemplateTunnelInterfaceEncapsulationArgsDict(TypedDict):
        encapsulation: NotRequired[pulumi.Input[_builtins.str]]
        """
        Encapsulation
          - Choices: `gre`, `ipsec`
        """
        optional: NotRequired[pulumi.Input[_builtins.bool]]
        """
        Indicates if list item is considered optional.
        """
        preference: NotRequired[pulumi.Input[_builtins.int]]
        """
        Set preference for TLOC
          - Range: `0`-`4294967295`
        """
        preference_variable: NotRequired[pulumi.Input[_builtins.str]]
        """
        Variable name
        """
        weight: NotRequired[pulumi.Input[_builtins.int]]
        """
        Set weight for TLOC
          - Range: `1`-`255`
          - Default value: `1`
        """
        weight_variable: NotRequired[pulumi.Input[_builtins.str]]
        """
        Variable name
        """
elif False:
    VpnInterfaceT1E1SerialFeatureTemplateTunnelInterfaceEncapsulationArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class VpnInterfaceT1E1SerialFeatureTemplateTunnelInterfaceEncapsulationArgs:
    def __init__(__self__, *,
                 encapsulation: Optional[pulumi.Input[_builtins.str]] = None,
                 optional: Optional[pulumi.Input[_builtins.bool]] = None,
                 preference: Optional[pulumi.Input[_builtins.int]] = None,
                 preference_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 weight: Optional[pulumi.Input[_builtins.int]] = None,
                 weight_variable: Optional[pulumi.Input[_builtins.str]] = None):
        """
        :param pulumi.Input[_builtins.str] encapsulation: Encapsulation
                 - Choices: `gre`, `ipsec`
        :param pulumi.Input[_builtins.bool] optional: Indicates if list item is considered optional.
        :param pulumi.Input[_builtins.int] preference: Set preference for TLOC
                 - Range: `0`-`4294967295`
        :param pulumi.Input[_builtins.str] preference_variable: Variable name
        :param pulumi.Input[_builtins.int] weight: Set weight for TLOC
                 - Range: `1`-`255`
                 - Default value: `1`
        :param pulumi.Input[_builtins.str] weight_variable: Variable name
        """
        if encapsulation is not None:
            pulumi.set(__self__, "encapsulation", encapsulation)
        if optional is not None:
            pulumi.set(__self__, "optional", optional)
        if preference is not None:
            pulumi.set(__self__, "preference", preference)
        if preference_variable is not None:
            pulumi.set(__self__, "preference_variable", preference_variable)
        if weight is not None:
            pulumi.set(__self__, "weight", weight)
        if weight_variable is not None:
            pulumi.set(__self__, "weight_variable", weight_variable)

    @_builtins.property
    @pulumi.getter
    def encapsulation(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Encapsulation
          - Choices: `gre`, `ipsec`
        """
        return pulumi.get(self, "encapsulation")

    @encapsulation.setter
    def encapsulation(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "encapsulation", value)

    @_builtins.property
    @pulumi.getter
    def optional(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Indicates if list item is considered optional.
        """
        return pulumi.get(self, "optional")

    @optional.setter
    def optional(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "optional", value)

    @_builtins.property
    @pulumi.getter
    def preference(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        Set preference for TLOC
          - Range: `0`-`4294967295`
        """
        return pulumi.get(self, "preference")

    @preference.setter
    def preference(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "preference", value)

    @_builtins.property
    @pulumi.getter(name="preferenceVariable")
    def preference_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "preference_variable")

    @preference_variable.setter
    def preference_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "preference_variable", value)

    @_builtins.property
    @pulumi.getter
    def weight(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        Set weight for TLOC
          - Range: `1`-`255`
          - Default value: `1`
        """
        return pulumi.get(self, "weight")

    @weight.setter
    def weight(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "weight", value)

    @_builtins.property
    @pulumi.getter(name="weightVariable")
    def weight_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "weight_variable")

    @weight_variable.setter
    def weight_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "weight_variable", value)


if not MYPY:
    class VpnListPolicyObjectEntryArgsDict(TypedDict):
        vpn_id: pulumi.Input[_builtins.str]
        """
        VPN ID or range of VPN IDs e.g., `100` or `200-300`
        """
elif False:
    VpnListPolicyObjectEntryArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class VpnListPolicyObjectEntryArgs:
    def __init__(__self__, *,
                 vpn_id: pulumi.Input[_builtins.str]):
        """
        :param pulumi.Input[_builtins.str] vpn_id: VPN ID or range of VPN IDs e.g., `100` or `200-300`
        """
        pulumi.set(__self__, "vpn_id", vpn_id)

    @_builtins.property
    @pulumi.getter(name="vpnId")
    def vpn_id(self) -> pulumi.Input[_builtins.str]:
        """
        VPN ID or range of VPN IDs e.g., `100` or `200-300`
        """
        return pulumi.get(self, "vpn_id")

    @vpn_id.setter
    def vpn_id(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "vpn_id", value)


if not MYPY:
    class VpnMembershipPolicyDefinitionSiteArgsDict(TypedDict):
        site_list_id: NotRequired[pulumi.Input[_builtins.str]]
        """
        Site list ID
        """
        site_list_version: NotRequired[pulumi.Input[_builtins.int]]
        """
        Site list version
        """
        vpn_list_ids: NotRequired[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]
        """
        VPN list IDs
        """
        vpn_list_versions: NotRequired[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]
        """
        VPN list versions
        """
elif False:
    VpnMembershipPolicyDefinitionSiteArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class VpnMembershipPolicyDefinitionSiteArgs:
    def __init__(__self__, *,
                 site_list_id: Optional[pulumi.Input[_builtins.str]] = None,
                 site_list_version: Optional[pulumi.Input[_builtins.int]] = None,
                 vpn_list_ids: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 vpn_list_versions: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None):
        """
        :param pulumi.Input[_builtins.str] site_list_id: Site list ID
        :param pulumi.Input[_builtins.int] site_list_version: Site list version
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] vpn_list_ids: VPN list IDs
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] vpn_list_versions: VPN list versions
        """
        if site_list_id is not None:
            pulumi.set(__self__, "site_list_id", site_list_id)
        if site_list_version is not None:
            pulumi.set(__self__, "site_list_version", site_list_version)
        if vpn_list_ids is not None:
            pulumi.set(__self__, "vpn_list_ids", vpn_list_ids)
        if vpn_list_versions is not None:
            pulumi.set(__self__, "vpn_list_versions", vpn_list_versions)

    @_builtins.property
    @pulumi.getter(name="siteListId")
    def site_list_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Site list ID
        """
        return pulumi.get(self, "site_list_id")

    @site_list_id.setter
    def site_list_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "site_list_id", value)

    @_builtins.property
    @pulumi.getter(name="siteListVersion")
    def site_list_version(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        Site list version
        """
        return pulumi.get(self, "site_list_version")

    @site_list_version.setter
    def site_list_version(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "site_list_version", value)

    @_builtins.property
    @pulumi.getter(name="vpnListIds")
    def vpn_list_ids(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]:
        """
        VPN list IDs
        """
        return pulumi.get(self, "vpn_list_ids")

    @vpn_list_ids.setter
    def vpn_list_ids(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "vpn_list_ids", value)

    @_builtins.property
    @pulumi.getter(name="vpnListVersions")
    def vpn_list_versions(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]:
        """
        VPN list versions
        """
        return pulumi.get(self, "vpn_list_versions")

    @vpn_list_versions.setter
    def vpn_list_versions(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "vpn_list_versions", value)


if not MYPY:
    class ZoneBasedFirewallPolicyDefinitionApplyZonePairArgsDict(TypedDict):
        destination_zone: NotRequired[pulumi.Input[_builtins.str]]
        """
        Destination Zone
        """
        source_zone: NotRequired[pulumi.Input[_builtins.str]]
        """
        Source Zone
        """
elif False:
    ZoneBasedFirewallPolicyDefinitionApplyZonePairArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ZoneBasedFirewallPolicyDefinitionApplyZonePairArgs:
    def __init__(__self__, *,
                 destination_zone: Optional[pulumi.Input[_builtins.str]] = None,
                 source_zone: Optional[pulumi.Input[_builtins.str]] = None):
        """
        :param pulumi.Input[_builtins.str] destination_zone: Destination Zone
        :param pulumi.Input[_builtins.str] source_zone: Source Zone
        """
        if destination_zone is not None:
            pulumi.set(__self__, "destination_zone", destination_zone)
        if source_zone is not None:
            pulumi.set(__self__, "source_zone", source_zone)

    @_builtins.property
    @pulumi.getter(name="destinationZone")
    def destination_zone(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Destination Zone
        """
        return pulumi.get(self, "destination_zone")

    @destination_zone.setter
    def destination_zone(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "destination_zone", value)

    @_builtins.property
    @pulumi.getter(name="sourceZone")
    def source_zone(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Source Zone
        """
        return pulumi.get(self, "source_zone")

    @source_zone.setter
    def source_zone(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "source_zone", value)


if not MYPY:
    class ZoneBasedFirewallPolicyDefinitionRuleArgsDict(TypedDict):
        base_action: pulumi.Input[_builtins.str]
        """
        Base action
          - Choices: `pass`, `drop`, `inspect`
        """
        rule_name: pulumi.Input[_builtins.str]
        """
        Rule name
        """
        rule_order: pulumi.Input[_builtins.int]
        """
        Rule
        """
        action_entries: NotRequired[pulumi.Input[Sequence[pulumi.Input['ZoneBasedFirewallPolicyDefinitionRuleActionEntryArgsDict']]]]
        """
        List of actions entries
        """
        match_entries: NotRequired[pulumi.Input[Sequence[pulumi.Input['ZoneBasedFirewallPolicyDefinitionRuleMatchEntryArgsDict']]]]
        """
        List of match entries
        """
elif False:
    ZoneBasedFirewallPolicyDefinitionRuleArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ZoneBasedFirewallPolicyDefinitionRuleArgs:
    def __init__(__self__, *,
                 base_action: pulumi.Input[_builtins.str],
                 rule_name: pulumi.Input[_builtins.str],
                 rule_order: pulumi.Input[_builtins.int],
                 action_entries: Optional[pulumi.Input[Sequence[pulumi.Input['ZoneBasedFirewallPolicyDefinitionRuleActionEntryArgs']]]] = None,
                 match_entries: Optional[pulumi.Input[Sequence[pulumi.Input['ZoneBasedFirewallPolicyDefinitionRuleMatchEntryArgs']]]] = None):
        """
        :param pulumi.Input[_builtins.str] base_action: Base action
                 - Choices: `pass`, `drop`, `inspect`
        :param pulumi.Input[_builtins.str] rule_name: Rule name
        :param pulumi.Input[_builtins.int] rule_order: Rule
        :param pulumi.Input[Sequence[pulumi.Input['ZoneBasedFirewallPolicyDefinitionRuleActionEntryArgs']]] action_entries: List of actions entries
        :param pulumi.Input[Sequence[pulumi.Input['ZoneBasedFirewallPolicyDefinitionRuleMatchEntryArgs']]] match_entries: List of match entries
        """
        pulumi.set(__self__, "base_action", base_action)
        pulumi.set(__self__, "rule_name", rule_name)
        pulumi.set(__self__, "rule_order", rule_order)
        if action_entries is not None:
            pulumi.set(__self__, "action_entries", action_entries)
        if match_entries is not None:
            pulumi.set(__self__, "match_entries", match_entries)

    @_builtins.property
    @pulumi.getter(name="baseAction")
    def base_action(self) -> pulumi.Input[_builtins.str]:
        """
        Base action
          - Choices: `pass`, `drop`, `inspect`
        """
        return pulumi.get(self, "base_action")

    @base_action.setter
    def base_action(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "base_action", value)

    @_builtins.property
    @pulumi.getter(name="ruleName")
    def rule_name(self) -> pulumi.Input[_builtins.str]:
        """
        Rule name
        """
        return pulumi.get(self, "rule_name")

    @rule_name.setter
    def rule_name(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "rule_name", value)

    @_builtins.property
    @pulumi.getter(name="ruleOrder")
    def rule_order(self) -> pulumi.Input[_builtins.int]:
        """
        Rule
        """
        return pulumi.get(self, "rule_order")

    @rule_order.setter
    def rule_order(self, value: pulumi.Input[_builtins.int]):
        pulumi.set(self, "rule_order", value)

    @_builtins.property
    @pulumi.getter(name="actionEntries")
    def action_entries(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ZoneBasedFirewallPolicyDefinitionRuleActionEntryArgs']]]]:
        """
        List of actions entries
        """
        return pulumi.get(self, "action_entries")

    @action_entries.setter
    def action_entries(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ZoneBasedFirewallPolicyDefinitionRuleActionEntryArgs']]]]):
        pulumi.set(self, "action_entries", value)

    @_builtins.property
    @pulumi.getter(name="matchEntries")
    def match_entries(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ZoneBasedFirewallPolicyDefinitionRuleMatchEntryArgs']]]]:
        """
        List of match entries
        """
        return pulumi.get(self, "match_entries")

    @match_entries.setter
    def match_entries(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ZoneBasedFirewallPolicyDefinitionRuleMatchEntryArgs']]]]):
        pulumi.set(self, "match_entries", value)


if not MYPY:
    class ZoneBasedFirewallPolicyDefinitionRuleActionEntryArgsDict(TypedDict):
        type: NotRequired[pulumi.Input[_builtins.str]]
        """
        Type of action entry
          - Choices: `log`, `connectionEvents`, `advancedInspectionProfile`
        """
elif False:
    ZoneBasedFirewallPolicyDefinitionRuleActionEntryArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ZoneBasedFirewallPolicyDefinitionRuleActionEntryArgs:
    def __init__(__self__, *,
                 type: Optional[pulumi.Input[_builtins.str]] = None):
        """
        :param pulumi.Input[_builtins.str] type: Type of action entry
                 - Choices: `log`, `connectionEvents`, `advancedInspectionProfile`
        """
        if type is not None:
            pulumi.set(__self__, "type", type)

    @_builtins.property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Type of action entry
          - Choices: `log`, `connectionEvents`, `advancedInspectionProfile`
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "type", value)


if not MYPY:
    class ZoneBasedFirewallPolicyDefinitionRuleMatchEntryArgsDict(TypedDict):
        type: pulumi.Input[_builtins.str]
        """
        Type of match entry
          - Choices: `sourceFqdnList`, `sourceDataPrefixList`, `sourceGeoLocationList`, `sourcePortList`, `destinationFqdnList`, `destinationDataPrefixList`, `destinationGeoLocationList`, `destinationPortList`, `appList`, `appListFlat`, `protocolNameList`, `sourceIp`, `sourcePort`, `sourceFqdn`, `destinationIp`, `destinationFqdn`, `destinationPort`, `sourceGeoLocation`, `destinationGeoLocation`, `protocolName`, `protocol`, `app`, `ruleSetList`
        """
        policy_id: NotRequired[pulumi.Input[_builtins.str]]
        """
        policy id for selected match entry
        """
        protocol_type: NotRequired[pulumi.Input[_builtins.str]]
        """
        Should be included with additionally entries for `destinationPort` and `protocol` whenever the type `protocolName` is used.
        """
        value: NotRequired[pulumi.Input[_builtins.str]]
        """
        value for selected match entry
        """
        value_variable: NotRequired[pulumi.Input[_builtins.str]]
        """
        variable value for selected match entry if it has variable option (sourceIp & destinationIp)
        """
elif False:
    ZoneBasedFirewallPolicyDefinitionRuleMatchEntryArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ZoneBasedFirewallPolicyDefinitionRuleMatchEntryArgs:
    def __init__(__self__, *,
                 type: pulumi.Input[_builtins.str],
                 policy_id: Optional[pulumi.Input[_builtins.str]] = None,
                 protocol_type: Optional[pulumi.Input[_builtins.str]] = None,
                 value: Optional[pulumi.Input[_builtins.str]] = None,
                 value_variable: Optional[pulumi.Input[_builtins.str]] = None):
        """
        :param pulumi.Input[_builtins.str] type: Type of match entry
                 - Choices: `sourceFqdnList`, `sourceDataPrefixList`, `sourceGeoLocationList`, `sourcePortList`, `destinationFqdnList`, `destinationDataPrefixList`, `destinationGeoLocationList`, `destinationPortList`, `appList`, `appListFlat`, `protocolNameList`, `sourceIp`, `sourcePort`, `sourceFqdn`, `destinationIp`, `destinationFqdn`, `destinationPort`, `sourceGeoLocation`, `destinationGeoLocation`, `protocolName`, `protocol`, `app`, `ruleSetList`
        :param pulumi.Input[_builtins.str] policy_id: policy id for selected match entry
        :param pulumi.Input[_builtins.str] protocol_type: Should be included with additionally entries for `destinationPort` and `protocol` whenever the type `protocolName` is used.
        :param pulumi.Input[_builtins.str] value: value for selected match entry
        :param pulumi.Input[_builtins.str] value_variable: variable value for selected match entry if it has variable option (sourceIp & destinationIp)
        """
        pulumi.set(__self__, "type", type)
        if policy_id is not None:
            pulumi.set(__self__, "policy_id", policy_id)
        if protocol_type is not None:
            pulumi.set(__self__, "protocol_type", protocol_type)
        if value is not None:
            pulumi.set(__self__, "value", value)
        if value_variable is not None:
            pulumi.set(__self__, "value_variable", value_variable)

    @_builtins.property
    @pulumi.getter
    def type(self) -> pulumi.Input[_builtins.str]:
        """
        Type of match entry
          - Choices: `sourceFqdnList`, `sourceDataPrefixList`, `sourceGeoLocationList`, `sourcePortList`, `destinationFqdnList`, `destinationDataPrefixList`, `destinationGeoLocationList`, `destinationPortList`, `appList`, `appListFlat`, `protocolNameList`, `sourceIp`, `sourcePort`, `sourceFqdn`, `destinationIp`, `destinationFqdn`, `destinationPort`, `sourceGeoLocation`, `destinationGeoLocation`, `protocolName`, `protocol`, `app`, `ruleSetList`
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "type", value)

    @_builtins.property
    @pulumi.getter(name="policyId")
    def policy_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        policy id for selected match entry
        """
        return pulumi.get(self, "policy_id")

    @policy_id.setter
    def policy_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "policy_id", value)

    @_builtins.property
    @pulumi.getter(name="protocolType")
    def protocol_type(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Should be included with additionally entries for `destinationPort` and `protocol` whenever the type `protocolName` is used.
        """
        return pulumi.get(self, "protocol_type")

    @protocol_type.setter
    def protocol_type(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "protocol_type", value)

    @_builtins.property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        value for selected match entry
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "value", value)

    @_builtins.property
    @pulumi.getter(name="valueVariable")
    def value_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        variable value for selected match entry if it has variable option (sourceIp & destinationIp)
        """
        return pulumi.get(self, "value_variable")

    @value_variable.setter
    def value_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "value_variable", value)


if not MYPY:
    class ZoneListPolicyObjectEntryArgsDict(TypedDict):
        interface: NotRequired[pulumi.Input[_builtins.str]]
        """
        Interface name
        """
        vpn: NotRequired[pulumi.Input[_builtins.str]]
        """
        VPN ID
        """
elif False:
    ZoneListPolicyObjectEntryArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ZoneListPolicyObjectEntryArgs:
    def __init__(__self__, *,
                 interface: Optional[pulumi.Input[_builtins.str]] = None,
                 vpn: Optional[pulumi.Input[_builtins.str]] = None):
        """
        :param pulumi.Input[_builtins.str] interface: Interface name
        :param pulumi.Input[_builtins.str] vpn: VPN ID
        """
        if interface is not None:
            pulumi.set(__self__, "interface", interface)
        if vpn is not None:
            pulumi.set(__self__, "vpn", vpn)

    @_builtins.property
    @pulumi.getter
    def interface(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Interface name
        """
        return pulumi.get(self, "interface")

    @interface.setter
    def interface(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "interface", value)

    @_builtins.property
    @pulumi.getter
    def vpn(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        VPN ID
        """
        return pulumi.get(self, "vpn")

    @vpn.setter
    def vpn(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "vpn", value)


