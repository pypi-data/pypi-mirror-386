# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities
from . import outputs

__all__ = [
    'GetSystemBasicFeatureResult',
    'AwaitableGetSystemBasicFeatureResult',
    'get_system_basic_feature',
    'get_system_basic_feature_output',
]

@pulumi.output_type
class GetSystemBasicFeatureResult:
    """
    A collection of values returned by getSystemBasicFeature.
    """
    def __init__(__self__, admin_tech_on_failure=None, admin_tech_on_failure_variable=None, affinity_group_number=None, affinity_group_number_variable=None, affinity_group_preferences=None, affinity_group_preferences_variable=None, affinity_per_vrfs=None, affinity_preference_auto=None, affinity_preference_auto_variable=None, config_description=None, config_description_variable=None, console_baud_rate=None, console_baud_rate_variable=None, control_session_pps=None, control_session_pps_variable=None, controller_groups=None, controller_groups_variable=None, description=None, device_groups=None, device_groups_variable=None, enhanced_app_aware_routing=None, enhanced_app_aware_routing_variable=None, feature_profile_id=None, gps_geo_fencing_enable=None, gps_geo_fencing_range=None, gps_geo_fencing_range_variable=None, gps_latitude=None, gps_latitude_variable=None, gps_longitude=None, gps_longitude_variable=None, gps_sms_enable=None, gps_sms_mobile_numbers=None, id=None, idle_timeout=None, idle_timeout_variable=None, location=None, location_variable=None, max_omp_sessions=None, max_omp_sessions_variable=None, multi_tenant=None, multi_tenant_variable=None, name=None, on_demand_enable=None, on_demand_enable_variable=None, on_demand_idle_timeout=None, on_demand_idle_timeout_variable=None, overlay_id=None, overlay_id_variable=None, port_hopping=None, port_hopping_variable=None, port_offset=None, port_offset_variable=None, site_types=None, site_types_variable=None, timezone=None, timezone_variable=None, track_default_gateway=None, track_default_gateway_variable=None, track_interface_tag=None, track_interface_tag_variable=None, track_transport=None, track_transport_variable=None, transport_gateway=None, transport_gateway_variable=None, version=None):
        if admin_tech_on_failure and not isinstance(admin_tech_on_failure, bool):
            raise TypeError("Expected argument 'admin_tech_on_failure' to be a bool")
        pulumi.set(__self__, "admin_tech_on_failure", admin_tech_on_failure)
        if admin_tech_on_failure_variable and not isinstance(admin_tech_on_failure_variable, str):
            raise TypeError("Expected argument 'admin_tech_on_failure_variable' to be a str")
        pulumi.set(__self__, "admin_tech_on_failure_variable", admin_tech_on_failure_variable)
        if affinity_group_number and not isinstance(affinity_group_number, int):
            raise TypeError("Expected argument 'affinity_group_number' to be a int")
        pulumi.set(__self__, "affinity_group_number", affinity_group_number)
        if affinity_group_number_variable and not isinstance(affinity_group_number_variable, str):
            raise TypeError("Expected argument 'affinity_group_number_variable' to be a str")
        pulumi.set(__self__, "affinity_group_number_variable", affinity_group_number_variable)
        if affinity_group_preferences and not isinstance(affinity_group_preferences, list):
            raise TypeError("Expected argument 'affinity_group_preferences' to be a list")
        pulumi.set(__self__, "affinity_group_preferences", affinity_group_preferences)
        if affinity_group_preferences_variable and not isinstance(affinity_group_preferences_variable, str):
            raise TypeError("Expected argument 'affinity_group_preferences_variable' to be a str")
        pulumi.set(__self__, "affinity_group_preferences_variable", affinity_group_preferences_variable)
        if affinity_per_vrfs and not isinstance(affinity_per_vrfs, list):
            raise TypeError("Expected argument 'affinity_per_vrfs' to be a list")
        pulumi.set(__self__, "affinity_per_vrfs", affinity_per_vrfs)
        if affinity_preference_auto and not isinstance(affinity_preference_auto, bool):
            raise TypeError("Expected argument 'affinity_preference_auto' to be a bool")
        pulumi.set(__self__, "affinity_preference_auto", affinity_preference_auto)
        if affinity_preference_auto_variable and not isinstance(affinity_preference_auto_variable, str):
            raise TypeError("Expected argument 'affinity_preference_auto_variable' to be a str")
        pulumi.set(__self__, "affinity_preference_auto_variable", affinity_preference_auto_variable)
        if config_description and not isinstance(config_description, str):
            raise TypeError("Expected argument 'config_description' to be a str")
        pulumi.set(__self__, "config_description", config_description)
        if config_description_variable and not isinstance(config_description_variable, str):
            raise TypeError("Expected argument 'config_description_variable' to be a str")
        pulumi.set(__self__, "config_description_variable", config_description_variable)
        if console_baud_rate and not isinstance(console_baud_rate, str):
            raise TypeError("Expected argument 'console_baud_rate' to be a str")
        pulumi.set(__self__, "console_baud_rate", console_baud_rate)
        if console_baud_rate_variable and not isinstance(console_baud_rate_variable, str):
            raise TypeError("Expected argument 'console_baud_rate_variable' to be a str")
        pulumi.set(__self__, "console_baud_rate_variable", console_baud_rate_variable)
        if control_session_pps and not isinstance(control_session_pps, int):
            raise TypeError("Expected argument 'control_session_pps' to be a int")
        pulumi.set(__self__, "control_session_pps", control_session_pps)
        if control_session_pps_variable and not isinstance(control_session_pps_variable, str):
            raise TypeError("Expected argument 'control_session_pps_variable' to be a str")
        pulumi.set(__self__, "control_session_pps_variable", control_session_pps_variable)
        if controller_groups and not isinstance(controller_groups, list):
            raise TypeError("Expected argument 'controller_groups' to be a list")
        pulumi.set(__self__, "controller_groups", controller_groups)
        if controller_groups_variable and not isinstance(controller_groups_variable, str):
            raise TypeError("Expected argument 'controller_groups_variable' to be a str")
        pulumi.set(__self__, "controller_groups_variable", controller_groups_variable)
        if description and not isinstance(description, str):
            raise TypeError("Expected argument 'description' to be a str")
        pulumi.set(__self__, "description", description)
        if device_groups and not isinstance(device_groups, list):
            raise TypeError("Expected argument 'device_groups' to be a list")
        pulumi.set(__self__, "device_groups", device_groups)
        if device_groups_variable and not isinstance(device_groups_variable, str):
            raise TypeError("Expected argument 'device_groups_variable' to be a str")
        pulumi.set(__self__, "device_groups_variable", device_groups_variable)
        if enhanced_app_aware_routing and not isinstance(enhanced_app_aware_routing, str):
            raise TypeError("Expected argument 'enhanced_app_aware_routing' to be a str")
        pulumi.set(__self__, "enhanced_app_aware_routing", enhanced_app_aware_routing)
        if enhanced_app_aware_routing_variable and not isinstance(enhanced_app_aware_routing_variable, str):
            raise TypeError("Expected argument 'enhanced_app_aware_routing_variable' to be a str")
        pulumi.set(__self__, "enhanced_app_aware_routing_variable", enhanced_app_aware_routing_variable)
        if feature_profile_id and not isinstance(feature_profile_id, str):
            raise TypeError("Expected argument 'feature_profile_id' to be a str")
        pulumi.set(__self__, "feature_profile_id", feature_profile_id)
        if gps_geo_fencing_enable and not isinstance(gps_geo_fencing_enable, bool):
            raise TypeError("Expected argument 'gps_geo_fencing_enable' to be a bool")
        pulumi.set(__self__, "gps_geo_fencing_enable", gps_geo_fencing_enable)
        if gps_geo_fencing_range and not isinstance(gps_geo_fencing_range, int):
            raise TypeError("Expected argument 'gps_geo_fencing_range' to be a int")
        pulumi.set(__self__, "gps_geo_fencing_range", gps_geo_fencing_range)
        if gps_geo_fencing_range_variable and not isinstance(gps_geo_fencing_range_variable, str):
            raise TypeError("Expected argument 'gps_geo_fencing_range_variable' to be a str")
        pulumi.set(__self__, "gps_geo_fencing_range_variable", gps_geo_fencing_range_variable)
        if gps_latitude and not isinstance(gps_latitude, float):
            raise TypeError("Expected argument 'gps_latitude' to be a float")
        pulumi.set(__self__, "gps_latitude", gps_latitude)
        if gps_latitude_variable and not isinstance(gps_latitude_variable, str):
            raise TypeError("Expected argument 'gps_latitude_variable' to be a str")
        pulumi.set(__self__, "gps_latitude_variable", gps_latitude_variable)
        if gps_longitude and not isinstance(gps_longitude, float):
            raise TypeError("Expected argument 'gps_longitude' to be a float")
        pulumi.set(__self__, "gps_longitude", gps_longitude)
        if gps_longitude_variable and not isinstance(gps_longitude_variable, str):
            raise TypeError("Expected argument 'gps_longitude_variable' to be a str")
        pulumi.set(__self__, "gps_longitude_variable", gps_longitude_variable)
        if gps_sms_enable and not isinstance(gps_sms_enable, bool):
            raise TypeError("Expected argument 'gps_sms_enable' to be a bool")
        pulumi.set(__self__, "gps_sms_enable", gps_sms_enable)
        if gps_sms_mobile_numbers and not isinstance(gps_sms_mobile_numbers, list):
            raise TypeError("Expected argument 'gps_sms_mobile_numbers' to be a list")
        pulumi.set(__self__, "gps_sms_mobile_numbers", gps_sms_mobile_numbers)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if idle_timeout and not isinstance(idle_timeout, int):
            raise TypeError("Expected argument 'idle_timeout' to be a int")
        pulumi.set(__self__, "idle_timeout", idle_timeout)
        if idle_timeout_variable and not isinstance(idle_timeout_variable, str):
            raise TypeError("Expected argument 'idle_timeout_variable' to be a str")
        pulumi.set(__self__, "idle_timeout_variable", idle_timeout_variable)
        if location and not isinstance(location, str):
            raise TypeError("Expected argument 'location' to be a str")
        pulumi.set(__self__, "location", location)
        if location_variable and not isinstance(location_variable, str):
            raise TypeError("Expected argument 'location_variable' to be a str")
        pulumi.set(__self__, "location_variable", location_variable)
        if max_omp_sessions and not isinstance(max_omp_sessions, int):
            raise TypeError("Expected argument 'max_omp_sessions' to be a int")
        pulumi.set(__self__, "max_omp_sessions", max_omp_sessions)
        if max_omp_sessions_variable and not isinstance(max_omp_sessions_variable, str):
            raise TypeError("Expected argument 'max_omp_sessions_variable' to be a str")
        pulumi.set(__self__, "max_omp_sessions_variable", max_omp_sessions_variable)
        if multi_tenant and not isinstance(multi_tenant, bool):
            raise TypeError("Expected argument 'multi_tenant' to be a bool")
        pulumi.set(__self__, "multi_tenant", multi_tenant)
        if multi_tenant_variable and not isinstance(multi_tenant_variable, str):
            raise TypeError("Expected argument 'multi_tenant_variable' to be a str")
        pulumi.set(__self__, "multi_tenant_variable", multi_tenant_variable)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)
        if on_demand_enable and not isinstance(on_demand_enable, bool):
            raise TypeError("Expected argument 'on_demand_enable' to be a bool")
        pulumi.set(__self__, "on_demand_enable", on_demand_enable)
        if on_demand_enable_variable and not isinstance(on_demand_enable_variable, str):
            raise TypeError("Expected argument 'on_demand_enable_variable' to be a str")
        pulumi.set(__self__, "on_demand_enable_variable", on_demand_enable_variable)
        if on_demand_idle_timeout and not isinstance(on_demand_idle_timeout, int):
            raise TypeError("Expected argument 'on_demand_idle_timeout' to be a int")
        pulumi.set(__self__, "on_demand_idle_timeout", on_demand_idle_timeout)
        if on_demand_idle_timeout_variable and not isinstance(on_demand_idle_timeout_variable, str):
            raise TypeError("Expected argument 'on_demand_idle_timeout_variable' to be a str")
        pulumi.set(__self__, "on_demand_idle_timeout_variable", on_demand_idle_timeout_variable)
        if overlay_id and not isinstance(overlay_id, int):
            raise TypeError("Expected argument 'overlay_id' to be a int")
        pulumi.set(__self__, "overlay_id", overlay_id)
        if overlay_id_variable and not isinstance(overlay_id_variable, str):
            raise TypeError("Expected argument 'overlay_id_variable' to be a str")
        pulumi.set(__self__, "overlay_id_variable", overlay_id_variable)
        if port_hopping and not isinstance(port_hopping, bool):
            raise TypeError("Expected argument 'port_hopping' to be a bool")
        pulumi.set(__self__, "port_hopping", port_hopping)
        if port_hopping_variable and not isinstance(port_hopping_variable, str):
            raise TypeError("Expected argument 'port_hopping_variable' to be a str")
        pulumi.set(__self__, "port_hopping_variable", port_hopping_variable)
        if port_offset and not isinstance(port_offset, int):
            raise TypeError("Expected argument 'port_offset' to be a int")
        pulumi.set(__self__, "port_offset", port_offset)
        if port_offset_variable and not isinstance(port_offset_variable, str):
            raise TypeError("Expected argument 'port_offset_variable' to be a str")
        pulumi.set(__self__, "port_offset_variable", port_offset_variable)
        if site_types and not isinstance(site_types, list):
            raise TypeError("Expected argument 'site_types' to be a list")
        pulumi.set(__self__, "site_types", site_types)
        if site_types_variable and not isinstance(site_types_variable, str):
            raise TypeError("Expected argument 'site_types_variable' to be a str")
        pulumi.set(__self__, "site_types_variable", site_types_variable)
        if timezone and not isinstance(timezone, str):
            raise TypeError("Expected argument 'timezone' to be a str")
        pulumi.set(__self__, "timezone", timezone)
        if timezone_variable and not isinstance(timezone_variable, str):
            raise TypeError("Expected argument 'timezone_variable' to be a str")
        pulumi.set(__self__, "timezone_variable", timezone_variable)
        if track_default_gateway and not isinstance(track_default_gateway, bool):
            raise TypeError("Expected argument 'track_default_gateway' to be a bool")
        pulumi.set(__self__, "track_default_gateway", track_default_gateway)
        if track_default_gateway_variable and not isinstance(track_default_gateway_variable, str):
            raise TypeError("Expected argument 'track_default_gateway_variable' to be a str")
        pulumi.set(__self__, "track_default_gateway_variable", track_default_gateway_variable)
        if track_interface_tag and not isinstance(track_interface_tag, int):
            raise TypeError("Expected argument 'track_interface_tag' to be a int")
        pulumi.set(__self__, "track_interface_tag", track_interface_tag)
        if track_interface_tag_variable and not isinstance(track_interface_tag_variable, str):
            raise TypeError("Expected argument 'track_interface_tag_variable' to be a str")
        pulumi.set(__self__, "track_interface_tag_variable", track_interface_tag_variable)
        if track_transport and not isinstance(track_transport, bool):
            raise TypeError("Expected argument 'track_transport' to be a bool")
        pulumi.set(__self__, "track_transport", track_transport)
        if track_transport_variable and not isinstance(track_transport_variable, str):
            raise TypeError("Expected argument 'track_transport_variable' to be a str")
        pulumi.set(__self__, "track_transport_variable", track_transport_variable)
        if transport_gateway and not isinstance(transport_gateway, bool):
            raise TypeError("Expected argument 'transport_gateway' to be a bool")
        pulumi.set(__self__, "transport_gateway", transport_gateway)
        if transport_gateway_variable and not isinstance(transport_gateway_variable, str):
            raise TypeError("Expected argument 'transport_gateway_variable' to be a str")
        pulumi.set(__self__, "transport_gateway_variable", transport_gateway_variable)
        if version and not isinstance(version, int):
            raise TypeError("Expected argument 'version' to be a int")
        pulumi.set(__self__, "version", version)

    @_builtins.property
    @pulumi.getter(name="adminTechOnFailure")
    def admin_tech_on_failure(self) -> _builtins.bool:
        """
        Collect admin-tech before reboot due to daemon failure
        """
        return pulumi.get(self, "admin_tech_on_failure")

    @_builtins.property
    @pulumi.getter(name="adminTechOnFailureVariable")
    def admin_tech_on_failure_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "admin_tech_on_failure_variable")

    @_builtins.property
    @pulumi.getter(name="affinityGroupNumber")
    def affinity_group_number(self) -> _builtins.int:
        """
        Affinity Group Number
        """
        return pulumi.get(self, "affinity_group_number")

    @_builtins.property
    @pulumi.getter(name="affinityGroupNumberVariable")
    def affinity_group_number_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "affinity_group_number_variable")

    @_builtins.property
    @pulumi.getter(name="affinityGroupPreferences")
    def affinity_group_preferences(self) -> Sequence[_builtins.int]:
        """
        Affinity Group Preference
        """
        return pulumi.get(self, "affinity_group_preferences")

    @_builtins.property
    @pulumi.getter(name="affinityGroupPreferencesVariable")
    def affinity_group_preferences_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "affinity_group_preferences_variable")

    @_builtins.property
    @pulumi.getter(name="affinityPerVrfs")
    def affinity_per_vrfs(self) -> Sequence['outputs.GetSystemBasicFeatureAffinityPerVrfResult']:
        """
        Affinity Group Number for VRFs
        """
        return pulumi.get(self, "affinity_per_vrfs")

    @_builtins.property
    @pulumi.getter(name="affinityPreferenceAuto")
    def affinity_preference_auto(self) -> _builtins.bool:
        """
        Affinity Group Preference Auto
        """
        return pulumi.get(self, "affinity_preference_auto")

    @_builtins.property
    @pulumi.getter(name="affinityPreferenceAutoVariable")
    def affinity_preference_auto_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "affinity_preference_auto_variable")

    @_builtins.property
    @pulumi.getter(name="configDescription")
    def config_description(self) -> _builtins.str:
        """
        Set a text description of the device
        """
        return pulumi.get(self, "config_description")

    @_builtins.property
    @pulumi.getter(name="configDescriptionVariable")
    def config_description_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "config_description_variable")

    @_builtins.property
    @pulumi.getter(name="consoleBaudRate")
    def console_baud_rate(self) -> _builtins.str:
        """
        Set the console baud rate
        """
        return pulumi.get(self, "console_baud_rate")

    @_builtins.property
    @pulumi.getter(name="consoleBaudRateVariable")
    def console_baud_rate_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "console_baud_rate_variable")

    @_builtins.property
    @pulumi.getter(name="controlSessionPps")
    def control_session_pps(self) -> _builtins.int:
        """
        Set the policer rate for control sessions
        """
        return pulumi.get(self, "control_session_pps")

    @_builtins.property
    @pulumi.getter(name="controlSessionPpsVariable")
    def control_session_pps_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "control_session_pps_variable")

    @_builtins.property
    @pulumi.getter(name="controllerGroups")
    def controller_groups(self) -> Sequence[_builtins.int]:
        """
        Configure a list of comma-separated controller groups
        """
        return pulumi.get(self, "controller_groups")

    @_builtins.property
    @pulumi.getter(name="controllerGroupsVariable")
    def controller_groups_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "controller_groups_variable")

    @_builtins.property
    @pulumi.getter
    def description(self) -> _builtins.str:
        """
        The description of the Feature
        """
        return pulumi.get(self, "description")

    @_builtins.property
    @pulumi.getter(name="deviceGroups")
    def device_groups(self) -> Sequence[_builtins.str]:
        """
        Device groups
        """
        return pulumi.get(self, "device_groups")

    @_builtins.property
    @pulumi.getter(name="deviceGroupsVariable")
    def device_groups_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "device_groups_variable")

    @_builtins.property
    @pulumi.getter(name="enhancedAppAwareRouting")
    def enhanced_app_aware_routing(self) -> _builtins.str:
        """
        Enable SLA Dampening and Enhanced App Routing.
        """
        return pulumi.get(self, "enhanced_app_aware_routing")

    @_builtins.property
    @pulumi.getter(name="enhancedAppAwareRoutingVariable")
    def enhanced_app_aware_routing_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "enhanced_app_aware_routing_variable")

    @_builtins.property
    @pulumi.getter(name="featureProfileId")
    def feature_profile_id(self) -> _builtins.str:
        """
        Feature Profile ID
        """
        return pulumi.get(self, "feature_profile_id")

    @_builtins.property
    @pulumi.getter(name="gpsGeoFencingEnable")
    def gps_geo_fencing_enable(self) -> _builtins.bool:
        """
        Enable Geo fencing
        """
        return pulumi.get(self, "gps_geo_fencing_enable")

    @_builtins.property
    @pulumi.getter(name="gpsGeoFencingRange")
    def gps_geo_fencing_range(self) -> _builtins.int:
        """
        Set the device’s geo fencing range
        """
        return pulumi.get(self, "gps_geo_fencing_range")

    @_builtins.property
    @pulumi.getter(name="gpsGeoFencingRangeVariable")
    def gps_geo_fencing_range_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "gps_geo_fencing_range_variable")

    @_builtins.property
    @pulumi.getter(name="gpsLatitude")
    def gps_latitude(self) -> _builtins.float:
        """
        Set the device physical latitude
        """
        return pulumi.get(self, "gps_latitude")

    @_builtins.property
    @pulumi.getter(name="gpsLatitudeVariable")
    def gps_latitude_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "gps_latitude_variable")

    @_builtins.property
    @pulumi.getter(name="gpsLongitude")
    def gps_longitude(self) -> _builtins.float:
        """
        Set the device physical longitude
        """
        return pulumi.get(self, "gps_longitude")

    @_builtins.property
    @pulumi.getter(name="gpsLongitudeVariable")
    def gps_longitude_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "gps_longitude_variable")

    @_builtins.property
    @pulumi.getter(name="gpsSmsEnable")
    def gps_sms_enable(self) -> _builtins.bool:
        """
        Enable device’s geo fencing SMS
        """
        return pulumi.get(self, "gps_sms_enable")

    @_builtins.property
    @pulumi.getter(name="gpsSmsMobileNumbers")
    def gps_sms_mobile_numbers(self) -> Sequence['outputs.GetSystemBasicFeatureGpsSmsMobileNumberResult']:
        """
        Set device’s geo fencing SMS phone number
        """
        return pulumi.get(self, "gps_sms_mobile_numbers")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        The id of the Feature
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter(name="idleTimeout")
    def idle_timeout(self) -> _builtins.int:
        """
        Idle CLI timeout in minutes
        """
        return pulumi.get(self, "idle_timeout")

    @_builtins.property
    @pulumi.getter(name="idleTimeoutVariable")
    def idle_timeout_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "idle_timeout_variable")

    @_builtins.property
    @pulumi.getter
    def location(self) -> _builtins.str:
        """
        Set the location of the device
        """
        return pulumi.get(self, "location")

    @_builtins.property
    @pulumi.getter(name="locationVariable")
    def location_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "location_variable")

    @_builtins.property
    @pulumi.getter(name="maxOmpSessions")
    def max_omp_sessions(self) -> _builtins.int:
        """
        Set the maximum number of OMP sessions \\n\\n the device can have
        """
        return pulumi.get(self, "max_omp_sessions")

    @_builtins.property
    @pulumi.getter(name="maxOmpSessionsVariable")
    def max_omp_sessions_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "max_omp_sessions_variable")

    @_builtins.property
    @pulumi.getter(name="multiTenant")
    def multi_tenant(self) -> _builtins.bool:
        """
        Device is multi-tenant
        """
        return pulumi.get(self, "multi_tenant")

    @_builtins.property
    @pulumi.getter(name="multiTenantVariable")
    def multi_tenant_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "multi_tenant_variable")

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        """
        The name of the Feature
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter(name="onDemandEnable")
    def on_demand_enable(self) -> _builtins.bool:
        """
        Enable or disable On-demand Tunnel
        """
        return pulumi.get(self, "on_demand_enable")

    @_builtins.property
    @pulumi.getter(name="onDemandEnableVariable")
    def on_demand_enable_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "on_demand_enable_variable")

    @_builtins.property
    @pulumi.getter(name="onDemandIdleTimeout")
    def on_demand_idle_timeout(self) -> _builtins.int:
        """
        Set the idle timeout for on-demand tunnels
        """
        return pulumi.get(self, "on_demand_idle_timeout")

    @_builtins.property
    @pulumi.getter(name="onDemandIdleTimeoutVariable")
    def on_demand_idle_timeout_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "on_demand_idle_timeout_variable")

    @_builtins.property
    @pulumi.getter(name="overlayId")
    def overlay_id(self) -> _builtins.int:
        """
        Set the Overlay ID
        """
        return pulumi.get(self, "overlay_id")

    @_builtins.property
    @pulumi.getter(name="overlayIdVariable")
    def overlay_id_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "overlay_id_variable")

    @_builtins.property
    @pulumi.getter(name="portHopping")
    def port_hopping(self) -> _builtins.bool:
        """
        Enable port hopping
        """
        return pulumi.get(self, "port_hopping")

    @_builtins.property
    @pulumi.getter(name="portHoppingVariable")
    def port_hopping_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "port_hopping_variable")

    @_builtins.property
    @pulumi.getter(name="portOffset")
    def port_offset(self) -> _builtins.int:
        """
        Set the TLOC port offset when multiple devices are behind a NAT
        """
        return pulumi.get(self, "port_offset")

    @_builtins.property
    @pulumi.getter(name="portOffsetVariable")
    def port_offset_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "port_offset_variable")

    @_builtins.property
    @pulumi.getter(name="siteTypes")
    def site_types(self) -> Sequence[_builtins.str]:
        """
        Site Type
        """
        return pulumi.get(self, "site_types")

    @_builtins.property
    @pulumi.getter(name="siteTypesVariable")
    def site_types_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "site_types_variable")

    @_builtins.property
    @pulumi.getter
    def timezone(self) -> _builtins.str:
        """
        Set the timezone
        """
        return pulumi.get(self, "timezone")

    @_builtins.property
    @pulumi.getter(name="timezoneVariable")
    def timezone_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "timezone_variable")

    @_builtins.property
    @pulumi.getter(name="trackDefaultGateway")
    def track_default_gateway(self) -> _builtins.bool:
        """
        Enable or disable default gateway tracking
        """
        return pulumi.get(self, "track_default_gateway")

    @_builtins.property
    @pulumi.getter(name="trackDefaultGatewayVariable")
    def track_default_gateway_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "track_default_gateway_variable")

    @_builtins.property
    @pulumi.getter(name="trackInterfaceTag")
    def track_interface_tag(self) -> _builtins.int:
        """
        OMP Tag attached to routes based on interface tracking
        """
        return pulumi.get(self, "track_interface_tag")

    @_builtins.property
    @pulumi.getter(name="trackInterfaceTagVariable")
    def track_interface_tag_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "track_interface_tag_variable")

    @_builtins.property
    @pulumi.getter(name="trackTransport")
    def track_transport(self) -> _builtins.bool:
        """
        Configure tracking of transport
        """
        return pulumi.get(self, "track_transport")

    @_builtins.property
    @pulumi.getter(name="trackTransportVariable")
    def track_transport_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "track_transport_variable")

    @_builtins.property
    @pulumi.getter(name="transportGateway")
    def transport_gateway(self) -> _builtins.bool:
        """
        Enable transport gateway
        """
        return pulumi.get(self, "transport_gateway")

    @_builtins.property
    @pulumi.getter(name="transportGatewayVariable")
    def transport_gateway_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "transport_gateway_variable")

    @_builtins.property
    @pulumi.getter
    def version(self) -> _builtins.int:
        """
        The version of the Feature
        """
        return pulumi.get(self, "version")


class AwaitableGetSystemBasicFeatureResult(GetSystemBasicFeatureResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetSystemBasicFeatureResult(
            admin_tech_on_failure=self.admin_tech_on_failure,
            admin_tech_on_failure_variable=self.admin_tech_on_failure_variable,
            affinity_group_number=self.affinity_group_number,
            affinity_group_number_variable=self.affinity_group_number_variable,
            affinity_group_preferences=self.affinity_group_preferences,
            affinity_group_preferences_variable=self.affinity_group_preferences_variable,
            affinity_per_vrfs=self.affinity_per_vrfs,
            affinity_preference_auto=self.affinity_preference_auto,
            affinity_preference_auto_variable=self.affinity_preference_auto_variable,
            config_description=self.config_description,
            config_description_variable=self.config_description_variable,
            console_baud_rate=self.console_baud_rate,
            console_baud_rate_variable=self.console_baud_rate_variable,
            control_session_pps=self.control_session_pps,
            control_session_pps_variable=self.control_session_pps_variable,
            controller_groups=self.controller_groups,
            controller_groups_variable=self.controller_groups_variable,
            description=self.description,
            device_groups=self.device_groups,
            device_groups_variable=self.device_groups_variable,
            enhanced_app_aware_routing=self.enhanced_app_aware_routing,
            enhanced_app_aware_routing_variable=self.enhanced_app_aware_routing_variable,
            feature_profile_id=self.feature_profile_id,
            gps_geo_fencing_enable=self.gps_geo_fencing_enable,
            gps_geo_fencing_range=self.gps_geo_fencing_range,
            gps_geo_fencing_range_variable=self.gps_geo_fencing_range_variable,
            gps_latitude=self.gps_latitude,
            gps_latitude_variable=self.gps_latitude_variable,
            gps_longitude=self.gps_longitude,
            gps_longitude_variable=self.gps_longitude_variable,
            gps_sms_enable=self.gps_sms_enable,
            gps_sms_mobile_numbers=self.gps_sms_mobile_numbers,
            id=self.id,
            idle_timeout=self.idle_timeout,
            idle_timeout_variable=self.idle_timeout_variable,
            location=self.location,
            location_variable=self.location_variable,
            max_omp_sessions=self.max_omp_sessions,
            max_omp_sessions_variable=self.max_omp_sessions_variable,
            multi_tenant=self.multi_tenant,
            multi_tenant_variable=self.multi_tenant_variable,
            name=self.name,
            on_demand_enable=self.on_demand_enable,
            on_demand_enable_variable=self.on_demand_enable_variable,
            on_demand_idle_timeout=self.on_demand_idle_timeout,
            on_demand_idle_timeout_variable=self.on_demand_idle_timeout_variable,
            overlay_id=self.overlay_id,
            overlay_id_variable=self.overlay_id_variable,
            port_hopping=self.port_hopping,
            port_hopping_variable=self.port_hopping_variable,
            port_offset=self.port_offset,
            port_offset_variable=self.port_offset_variable,
            site_types=self.site_types,
            site_types_variable=self.site_types_variable,
            timezone=self.timezone,
            timezone_variable=self.timezone_variable,
            track_default_gateway=self.track_default_gateway,
            track_default_gateway_variable=self.track_default_gateway_variable,
            track_interface_tag=self.track_interface_tag,
            track_interface_tag_variable=self.track_interface_tag_variable,
            track_transport=self.track_transport,
            track_transport_variable=self.track_transport_variable,
            transport_gateway=self.transport_gateway,
            transport_gateway_variable=self.transport_gateway_variable,
            version=self.version)


def get_system_basic_feature(feature_profile_id: Optional[_builtins.str] = None,
                             id: Optional[_builtins.str] = None,
                             opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetSystemBasicFeatureResult:
    """
    This data source can read the System Basic Feature.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_sdwan as sdwan

    example = sdwan.get_system_basic_feature(id="f6b2c44c-693c-4763-b010-895aa3d236bd",
        feature_profile_id="f6dd22c8-0b4f-496c-9a0b-6813d1f8b8ac")
    ```


    :param _builtins.str feature_profile_id: Feature Profile ID
    :param _builtins.str id: The id of the Feature
    """
    __args__ = dict()
    __args__['featureProfileId'] = feature_profile_id
    __args__['id'] = id
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('sdwan:index/getSystemBasicFeature:getSystemBasicFeature', __args__, opts=opts, typ=GetSystemBasicFeatureResult).value

    return AwaitableGetSystemBasicFeatureResult(
        admin_tech_on_failure=pulumi.get(__ret__, 'admin_tech_on_failure'),
        admin_tech_on_failure_variable=pulumi.get(__ret__, 'admin_tech_on_failure_variable'),
        affinity_group_number=pulumi.get(__ret__, 'affinity_group_number'),
        affinity_group_number_variable=pulumi.get(__ret__, 'affinity_group_number_variable'),
        affinity_group_preferences=pulumi.get(__ret__, 'affinity_group_preferences'),
        affinity_group_preferences_variable=pulumi.get(__ret__, 'affinity_group_preferences_variable'),
        affinity_per_vrfs=pulumi.get(__ret__, 'affinity_per_vrfs'),
        affinity_preference_auto=pulumi.get(__ret__, 'affinity_preference_auto'),
        affinity_preference_auto_variable=pulumi.get(__ret__, 'affinity_preference_auto_variable'),
        config_description=pulumi.get(__ret__, 'config_description'),
        config_description_variable=pulumi.get(__ret__, 'config_description_variable'),
        console_baud_rate=pulumi.get(__ret__, 'console_baud_rate'),
        console_baud_rate_variable=pulumi.get(__ret__, 'console_baud_rate_variable'),
        control_session_pps=pulumi.get(__ret__, 'control_session_pps'),
        control_session_pps_variable=pulumi.get(__ret__, 'control_session_pps_variable'),
        controller_groups=pulumi.get(__ret__, 'controller_groups'),
        controller_groups_variable=pulumi.get(__ret__, 'controller_groups_variable'),
        description=pulumi.get(__ret__, 'description'),
        device_groups=pulumi.get(__ret__, 'device_groups'),
        device_groups_variable=pulumi.get(__ret__, 'device_groups_variable'),
        enhanced_app_aware_routing=pulumi.get(__ret__, 'enhanced_app_aware_routing'),
        enhanced_app_aware_routing_variable=pulumi.get(__ret__, 'enhanced_app_aware_routing_variable'),
        feature_profile_id=pulumi.get(__ret__, 'feature_profile_id'),
        gps_geo_fencing_enable=pulumi.get(__ret__, 'gps_geo_fencing_enable'),
        gps_geo_fencing_range=pulumi.get(__ret__, 'gps_geo_fencing_range'),
        gps_geo_fencing_range_variable=pulumi.get(__ret__, 'gps_geo_fencing_range_variable'),
        gps_latitude=pulumi.get(__ret__, 'gps_latitude'),
        gps_latitude_variable=pulumi.get(__ret__, 'gps_latitude_variable'),
        gps_longitude=pulumi.get(__ret__, 'gps_longitude'),
        gps_longitude_variable=pulumi.get(__ret__, 'gps_longitude_variable'),
        gps_sms_enable=pulumi.get(__ret__, 'gps_sms_enable'),
        gps_sms_mobile_numbers=pulumi.get(__ret__, 'gps_sms_mobile_numbers'),
        id=pulumi.get(__ret__, 'id'),
        idle_timeout=pulumi.get(__ret__, 'idle_timeout'),
        idle_timeout_variable=pulumi.get(__ret__, 'idle_timeout_variable'),
        location=pulumi.get(__ret__, 'location'),
        location_variable=pulumi.get(__ret__, 'location_variable'),
        max_omp_sessions=pulumi.get(__ret__, 'max_omp_sessions'),
        max_omp_sessions_variable=pulumi.get(__ret__, 'max_omp_sessions_variable'),
        multi_tenant=pulumi.get(__ret__, 'multi_tenant'),
        multi_tenant_variable=pulumi.get(__ret__, 'multi_tenant_variable'),
        name=pulumi.get(__ret__, 'name'),
        on_demand_enable=pulumi.get(__ret__, 'on_demand_enable'),
        on_demand_enable_variable=pulumi.get(__ret__, 'on_demand_enable_variable'),
        on_demand_idle_timeout=pulumi.get(__ret__, 'on_demand_idle_timeout'),
        on_demand_idle_timeout_variable=pulumi.get(__ret__, 'on_demand_idle_timeout_variable'),
        overlay_id=pulumi.get(__ret__, 'overlay_id'),
        overlay_id_variable=pulumi.get(__ret__, 'overlay_id_variable'),
        port_hopping=pulumi.get(__ret__, 'port_hopping'),
        port_hopping_variable=pulumi.get(__ret__, 'port_hopping_variable'),
        port_offset=pulumi.get(__ret__, 'port_offset'),
        port_offset_variable=pulumi.get(__ret__, 'port_offset_variable'),
        site_types=pulumi.get(__ret__, 'site_types'),
        site_types_variable=pulumi.get(__ret__, 'site_types_variable'),
        timezone=pulumi.get(__ret__, 'timezone'),
        timezone_variable=pulumi.get(__ret__, 'timezone_variable'),
        track_default_gateway=pulumi.get(__ret__, 'track_default_gateway'),
        track_default_gateway_variable=pulumi.get(__ret__, 'track_default_gateway_variable'),
        track_interface_tag=pulumi.get(__ret__, 'track_interface_tag'),
        track_interface_tag_variable=pulumi.get(__ret__, 'track_interface_tag_variable'),
        track_transport=pulumi.get(__ret__, 'track_transport'),
        track_transport_variable=pulumi.get(__ret__, 'track_transport_variable'),
        transport_gateway=pulumi.get(__ret__, 'transport_gateway'),
        transport_gateway_variable=pulumi.get(__ret__, 'transport_gateway_variable'),
        version=pulumi.get(__ret__, 'version'))
def get_system_basic_feature_output(feature_profile_id: Optional[pulumi.Input[_builtins.str]] = None,
                                    id: Optional[pulumi.Input[_builtins.str]] = None,
                                    opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetSystemBasicFeatureResult]:
    """
    This data source can read the System Basic Feature.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_sdwan as sdwan

    example = sdwan.get_system_basic_feature(id="f6b2c44c-693c-4763-b010-895aa3d236bd",
        feature_profile_id="f6dd22c8-0b4f-496c-9a0b-6813d1f8b8ac")
    ```


    :param _builtins.str feature_profile_id: Feature Profile ID
    :param _builtins.str id: The id of the Feature
    """
    __args__ = dict()
    __args__['featureProfileId'] = feature_profile_id
    __args__['id'] = id
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('sdwan:index/getSystemBasicFeature:getSystemBasicFeature', __args__, opts=opts, typ=GetSystemBasicFeatureResult)
    return __ret__.apply(lambda __response__: GetSystemBasicFeatureResult(
        admin_tech_on_failure=pulumi.get(__response__, 'admin_tech_on_failure'),
        admin_tech_on_failure_variable=pulumi.get(__response__, 'admin_tech_on_failure_variable'),
        affinity_group_number=pulumi.get(__response__, 'affinity_group_number'),
        affinity_group_number_variable=pulumi.get(__response__, 'affinity_group_number_variable'),
        affinity_group_preferences=pulumi.get(__response__, 'affinity_group_preferences'),
        affinity_group_preferences_variable=pulumi.get(__response__, 'affinity_group_preferences_variable'),
        affinity_per_vrfs=pulumi.get(__response__, 'affinity_per_vrfs'),
        affinity_preference_auto=pulumi.get(__response__, 'affinity_preference_auto'),
        affinity_preference_auto_variable=pulumi.get(__response__, 'affinity_preference_auto_variable'),
        config_description=pulumi.get(__response__, 'config_description'),
        config_description_variable=pulumi.get(__response__, 'config_description_variable'),
        console_baud_rate=pulumi.get(__response__, 'console_baud_rate'),
        console_baud_rate_variable=pulumi.get(__response__, 'console_baud_rate_variable'),
        control_session_pps=pulumi.get(__response__, 'control_session_pps'),
        control_session_pps_variable=pulumi.get(__response__, 'control_session_pps_variable'),
        controller_groups=pulumi.get(__response__, 'controller_groups'),
        controller_groups_variable=pulumi.get(__response__, 'controller_groups_variable'),
        description=pulumi.get(__response__, 'description'),
        device_groups=pulumi.get(__response__, 'device_groups'),
        device_groups_variable=pulumi.get(__response__, 'device_groups_variable'),
        enhanced_app_aware_routing=pulumi.get(__response__, 'enhanced_app_aware_routing'),
        enhanced_app_aware_routing_variable=pulumi.get(__response__, 'enhanced_app_aware_routing_variable'),
        feature_profile_id=pulumi.get(__response__, 'feature_profile_id'),
        gps_geo_fencing_enable=pulumi.get(__response__, 'gps_geo_fencing_enable'),
        gps_geo_fencing_range=pulumi.get(__response__, 'gps_geo_fencing_range'),
        gps_geo_fencing_range_variable=pulumi.get(__response__, 'gps_geo_fencing_range_variable'),
        gps_latitude=pulumi.get(__response__, 'gps_latitude'),
        gps_latitude_variable=pulumi.get(__response__, 'gps_latitude_variable'),
        gps_longitude=pulumi.get(__response__, 'gps_longitude'),
        gps_longitude_variable=pulumi.get(__response__, 'gps_longitude_variable'),
        gps_sms_enable=pulumi.get(__response__, 'gps_sms_enable'),
        gps_sms_mobile_numbers=pulumi.get(__response__, 'gps_sms_mobile_numbers'),
        id=pulumi.get(__response__, 'id'),
        idle_timeout=pulumi.get(__response__, 'idle_timeout'),
        idle_timeout_variable=pulumi.get(__response__, 'idle_timeout_variable'),
        location=pulumi.get(__response__, 'location'),
        location_variable=pulumi.get(__response__, 'location_variable'),
        max_omp_sessions=pulumi.get(__response__, 'max_omp_sessions'),
        max_omp_sessions_variable=pulumi.get(__response__, 'max_omp_sessions_variable'),
        multi_tenant=pulumi.get(__response__, 'multi_tenant'),
        multi_tenant_variable=pulumi.get(__response__, 'multi_tenant_variable'),
        name=pulumi.get(__response__, 'name'),
        on_demand_enable=pulumi.get(__response__, 'on_demand_enable'),
        on_demand_enable_variable=pulumi.get(__response__, 'on_demand_enable_variable'),
        on_demand_idle_timeout=pulumi.get(__response__, 'on_demand_idle_timeout'),
        on_demand_idle_timeout_variable=pulumi.get(__response__, 'on_demand_idle_timeout_variable'),
        overlay_id=pulumi.get(__response__, 'overlay_id'),
        overlay_id_variable=pulumi.get(__response__, 'overlay_id_variable'),
        port_hopping=pulumi.get(__response__, 'port_hopping'),
        port_hopping_variable=pulumi.get(__response__, 'port_hopping_variable'),
        port_offset=pulumi.get(__response__, 'port_offset'),
        port_offset_variable=pulumi.get(__response__, 'port_offset_variable'),
        site_types=pulumi.get(__response__, 'site_types'),
        site_types_variable=pulumi.get(__response__, 'site_types_variable'),
        timezone=pulumi.get(__response__, 'timezone'),
        timezone_variable=pulumi.get(__response__, 'timezone_variable'),
        track_default_gateway=pulumi.get(__response__, 'track_default_gateway'),
        track_default_gateway_variable=pulumi.get(__response__, 'track_default_gateway_variable'),
        track_interface_tag=pulumi.get(__response__, 'track_interface_tag'),
        track_interface_tag_variable=pulumi.get(__response__, 'track_interface_tag_variable'),
        track_transport=pulumi.get(__response__, 'track_transport'),
        track_transport_variable=pulumi.get(__response__, 'track_transport_variable'),
        transport_gateway=pulumi.get(__response__, 'transport_gateway'),
        transport_gateway_variable=pulumi.get(__response__, 'transport_gateway_variable'),
        version=pulumi.get(__response__, 'version')))
