# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities
from . import outputs
from ._inputs import *

__all__ = ['CiscoVpnInterfaceFeatureTemplateArgs', 'CiscoVpnInterfaceFeatureTemplate']

@pulumi.input_type
class CiscoVpnInterfaceFeatureTemplateArgs:
    def __init__(__self__, *,
                 description: pulumi.Input[_builtins.str],
                 device_types: pulumi.Input[Sequence[pulumi.Input[_builtins.str]]],
                 access_lists: Optional[pulumi.Input[Sequence[pulumi.Input['CiscoVpnInterfaceFeatureTemplateAccessListArgs']]]] = None,
                 address: Optional[pulumi.Input[_builtins.str]] = None,
                 address_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 arp_timeout: Optional[pulumi.Input[_builtins.int]] = None,
                 arp_timeout_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 auto_bandwidth_detect: Optional[pulumi.Input[_builtins.bool]] = None,
                 auto_bandwidth_detect_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 autonegotiate: Optional[pulumi.Input[_builtins.bool]] = None,
                 autonegotiate_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 bandwidth_downstream: Optional[pulumi.Input[_builtins.int]] = None,
                 bandwidth_downstream_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 bandwidth_upstream: Optional[pulumi.Input[_builtins.int]] = None,
                 bandwidth_upstream_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 block_non_source_ip: Optional[pulumi.Input[_builtins.bool]] = None,
                 block_non_source_ip_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 core_region: Optional[pulumi.Input[_builtins.str]] = None,
                 core_region_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 dhcp: Optional[pulumi.Input[_builtins.bool]] = None,
                 dhcp_distance: Optional[pulumi.Input[_builtins.int]] = None,
                 dhcp_distance_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 dhcp_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 dhcpv6: Optional[pulumi.Input[_builtins.bool]] = None,
                 dhcpv6_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 duplex: Optional[pulumi.Input[_builtins.str]] = None,
                 duplex_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 enable_core_region: Optional[pulumi.Input[_builtins.bool]] = None,
                 enable_sgt: Optional[pulumi.Input[_builtins.bool]] = None,
                 gre_tunnel_source_ip: Optional[pulumi.Input[_builtins.str]] = None,
                 gre_tunnel_source_ip_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 gre_tunnel_xconnect: Optional[pulumi.Input[_builtins.str]] = None,
                 gre_tunnel_xconnect_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 icmp_redirect_disable: Optional[pulumi.Input[_builtins.bool]] = None,
                 icmp_redirect_disable_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 interface_description: Optional[pulumi.Input[_builtins.str]] = None,
                 interface_description_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 interface_mtu: Optional[pulumi.Input[_builtins.int]] = None,
                 interface_mtu_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 interface_name: Optional[pulumi.Input[_builtins.str]] = None,
                 interface_name_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 ip_directed_broadcast: Optional[pulumi.Input[_builtins.bool]] = None,
                 ip_directed_broadcast_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 ip_mtu: Optional[pulumi.Input[_builtins.int]] = None,
                 ip_mtu_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 iperf_server: Optional[pulumi.Input[_builtins.str]] = None,
                 iperf_server_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 ipv4_dhcp_helper_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 ipv4_dhcp_helpers: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 ipv4_secondary_addresses: Optional[pulumi.Input[Sequence[pulumi.Input['CiscoVpnInterfaceFeatureTemplateIpv4SecondaryAddressArgs']]]] = None,
                 ipv4_vrrps: Optional[pulumi.Input[Sequence[pulumi.Input['CiscoVpnInterfaceFeatureTemplateIpv4VrrpArgs']]]] = None,
                 ipv6_access_lists: Optional[pulumi.Input[Sequence[pulumi.Input['CiscoVpnInterfaceFeatureTemplateIpv6AccessListArgs']]]] = None,
                 ipv6_address: Optional[pulumi.Input[_builtins.str]] = None,
                 ipv6_address_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 ipv6_dhcp_helpers: Optional[pulumi.Input[Sequence[pulumi.Input['CiscoVpnInterfaceFeatureTemplateIpv6DhcpHelperArgs']]]] = None,
                 ipv6_nat: Optional[pulumi.Input[_builtins.bool]] = None,
                 ipv6_nat_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 ipv6_secondary_addresses: Optional[pulumi.Input[Sequence[pulumi.Input['CiscoVpnInterfaceFeatureTemplateIpv6SecondaryAddressArgs']]]] = None,
                 ipv6_vrrps: Optional[pulumi.Input[Sequence[pulumi.Input['CiscoVpnInterfaceFeatureTemplateIpv6VrrpArgs']]]] = None,
                 load_interval: Optional[pulumi.Input[_builtins.int]] = None,
                 load_interval_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 mac_address: Optional[pulumi.Input[_builtins.str]] = None,
                 mac_address_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 media_type: Optional[pulumi.Input[_builtins.str]] = None,
                 media_type_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 nat: Optional[pulumi.Input[_builtins.bool]] = None,
                 nat64_interface: Optional[pulumi.Input[_builtins.bool]] = None,
                 nat66_interface: Optional[pulumi.Input[_builtins.bool]] = None,
                 nat_inside_source_loopback_interface: Optional[pulumi.Input[_builtins.str]] = None,
                 nat_inside_source_loopback_interface_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 nat_overload: Optional[pulumi.Input[_builtins.bool]] = None,
                 nat_overload_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 nat_pool_prefix_length: Optional[pulumi.Input[_builtins.int]] = None,
                 nat_pool_prefix_length_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 nat_pool_range_end: Optional[pulumi.Input[_builtins.str]] = None,
                 nat_pool_range_end_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 nat_pool_range_start: Optional[pulumi.Input[_builtins.str]] = None,
                 nat_pool_range_start_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 nat_type: Optional[pulumi.Input[_builtins.str]] = None,
                 nat_type_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 poe: Optional[pulumi.Input[_builtins.bool]] = None,
                 poe_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 propagate_sgt: Optional[pulumi.Input[_builtins.bool]] = None,
                 qos_adaptive_bandwidth_downstream: Optional[pulumi.Input[_builtins.int]] = None,
                 qos_adaptive_bandwidth_downstream_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 qos_adaptive_bandwidth_upstream: Optional[pulumi.Input[_builtins.int]] = None,
                 qos_adaptive_bandwidth_upstream_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 qos_adaptive_max_downstream: Optional[pulumi.Input[_builtins.int]] = None,
                 qos_adaptive_max_downstream_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 qos_adaptive_max_upstream: Optional[pulumi.Input[_builtins.int]] = None,
                 qos_adaptive_max_upstream_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 qos_adaptive_min_downstream: Optional[pulumi.Input[_builtins.int]] = None,
                 qos_adaptive_min_downstream_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 qos_adaptive_min_upstream: Optional[pulumi.Input[_builtins.int]] = None,
                 qos_adaptive_min_upstream_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 qos_adaptive_period: Optional[pulumi.Input[_builtins.int]] = None,
                 qos_adaptive_period_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 qos_map: Optional[pulumi.Input[_builtins.str]] = None,
                 qos_map_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 qos_map_vpn: Optional[pulumi.Input[_builtins.str]] = None,
                 qos_map_vpn_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 rewrite_rule_name: Optional[pulumi.Input[_builtins.str]] = None,
                 rewrite_rule_name_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 secondary_region: Optional[pulumi.Input[_builtins.str]] = None,
                 secondary_region_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 sgt_enforcement: Optional[pulumi.Input[_builtins.bool]] = None,
                 sgt_enforcement_sgt: Optional[pulumi.Input[_builtins.int]] = None,
                 sgt_enforcement_sgt_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 shaping_rate: Optional[pulumi.Input[_builtins.int]] = None,
                 shaping_rate_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 shutdown: Optional[pulumi.Input[_builtins.bool]] = None,
                 shutdown_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 speed: Optional[pulumi.Input[_builtins.str]] = None,
                 speed_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 static_arps: Optional[pulumi.Input[Sequence[pulumi.Input['CiscoVpnInterfaceFeatureTemplateStaticArpArgs']]]] = None,
                 static_nat66_entries: Optional[pulumi.Input[Sequence[pulumi.Input['CiscoVpnInterfaceFeatureTemplateStaticNat66EntryArgs']]]] = None,
                 static_nat_entries: Optional[pulumi.Input[Sequence[pulumi.Input['CiscoVpnInterfaceFeatureTemplateStaticNatEntryArgs']]]] = None,
                 static_port_forward_entries: Optional[pulumi.Input[Sequence[pulumi.Input['CiscoVpnInterfaceFeatureTemplateStaticPortForwardEntryArgs']]]] = None,
                 static_sgt: Optional[pulumi.Input[_builtins.int]] = None,
                 static_sgt_trusted: Optional[pulumi.Input[_builtins.bool]] = None,
                 static_sgt_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 tcp_mss_adjust: Optional[pulumi.Input[_builtins.int]] = None,
                 tcp_mss_adjust_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 tcp_timeout: Optional[pulumi.Input[_builtins.int]] = None,
                 tcp_timeout_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 tloc_extension: Optional[pulumi.Input[_builtins.str]] = None,
                 tloc_extension_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 tracker_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 trackers: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 tunnel_bandwidth: Optional[pulumi.Input[_builtins.int]] = None,
                 tunnel_bandwidth_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 tunnel_interface_allow_all: Optional[pulumi.Input[_builtins.bool]] = None,
                 tunnel_interface_allow_all_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 tunnel_interface_allow_bgp: Optional[pulumi.Input[_builtins.bool]] = None,
                 tunnel_interface_allow_bgp_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 tunnel_interface_allow_dhcp: Optional[pulumi.Input[_builtins.bool]] = None,
                 tunnel_interface_allow_dhcp_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 tunnel_interface_allow_dns: Optional[pulumi.Input[_builtins.bool]] = None,
                 tunnel_interface_allow_dns_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 tunnel_interface_allow_https: Optional[pulumi.Input[_builtins.bool]] = None,
                 tunnel_interface_allow_https_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 tunnel_interface_allow_icmp: Optional[pulumi.Input[_builtins.bool]] = None,
                 tunnel_interface_allow_icmp_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 tunnel_interface_allow_netconf: Optional[pulumi.Input[_builtins.bool]] = None,
                 tunnel_interface_allow_netconf_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 tunnel_interface_allow_ntp: Optional[pulumi.Input[_builtins.bool]] = None,
                 tunnel_interface_allow_ntp_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 tunnel_interface_allow_ospf: Optional[pulumi.Input[_builtins.bool]] = None,
                 tunnel_interface_allow_ospf_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 tunnel_interface_allow_snmp: Optional[pulumi.Input[_builtins.bool]] = None,
                 tunnel_interface_allow_snmp_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 tunnel_interface_allow_ssh: Optional[pulumi.Input[_builtins.bool]] = None,
                 tunnel_interface_allow_ssh_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 tunnel_interface_allow_stun: Optional[pulumi.Input[_builtins.bool]] = None,
                 tunnel_interface_allow_stun_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 tunnel_interface_bind_loopback_tunnel: Optional[pulumi.Input[_builtins.str]] = None,
                 tunnel_interface_bind_loopback_tunnel_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 tunnel_interface_border: Optional[pulumi.Input[_builtins.bool]] = None,
                 tunnel_interface_border_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 tunnel_interface_carrier: Optional[pulumi.Input[_builtins.str]] = None,
                 tunnel_interface_carrier_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 tunnel_interface_clear_dont_fragment: Optional[pulumi.Input[_builtins.bool]] = None,
                 tunnel_interface_clear_dont_fragment_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 tunnel_interface_color: Optional[pulumi.Input[_builtins.str]] = None,
                 tunnel_interface_color_restrict: Optional[pulumi.Input[_builtins.bool]] = None,
                 tunnel_interface_color_restrict_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 tunnel_interface_color_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 tunnel_interface_control_connections: Optional[pulumi.Input[_builtins.bool]] = None,
                 tunnel_interface_control_connections_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 tunnel_interface_encapsulations: Optional[pulumi.Input[Sequence[pulumi.Input['CiscoVpnInterfaceFeatureTemplateTunnelInterfaceEncapsulationArgs']]]] = None,
                 tunnel_interface_exclude_controller_group_list_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 tunnel_interface_exclude_controller_group_lists: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.int]]]] = None,
                 tunnel_interface_gre_tunnel_destination_ip: Optional[pulumi.Input[_builtins.str]] = None,
                 tunnel_interface_gre_tunnel_destination_ip_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 tunnel_interface_groups: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.int]]]] = None,
                 tunnel_interface_groups_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 tunnel_interface_hello_interval: Optional[pulumi.Input[_builtins.int]] = None,
                 tunnel_interface_hello_interval_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 tunnel_interface_hello_tolerance: Optional[pulumi.Input[_builtins.int]] = None,
                 tunnel_interface_hello_tolerance_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 tunnel_interface_last_resort_circuit: Optional[pulumi.Input[_builtins.bool]] = None,
                 tunnel_interface_last_resort_circuit_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 tunnel_interface_low_bandwidth_link: Optional[pulumi.Input[_builtins.bool]] = None,
                 tunnel_interface_low_bandwidth_link_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 tunnel_interface_max_control_connections: Optional[pulumi.Input[_builtins.int]] = None,
                 tunnel_interface_max_control_connections_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 tunnel_interface_nat_refresh_interval: Optional[pulumi.Input[_builtins.int]] = None,
                 tunnel_interface_nat_refresh_interval_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 tunnel_interface_network_broadcast: Optional[pulumi.Input[_builtins.bool]] = None,
                 tunnel_interface_network_broadcast_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 tunnel_interface_port_hop: Optional[pulumi.Input[_builtins.bool]] = None,
                 tunnel_interface_port_hop_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 tunnel_interface_propagate_sgt: Optional[pulumi.Input[_builtins.bool]] = None,
                 tunnel_interface_propagate_sgt_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 tunnel_interface_tunnel_tcp_mss: Optional[pulumi.Input[_builtins.int]] = None,
                 tunnel_interface_tunnel_tcp_mss_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 tunnel_interface_vbond_as_stun_server: Optional[pulumi.Input[_builtins.bool]] = None,
                 tunnel_interface_vbond_as_stun_server_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 tunnel_interface_vmanage_connection_preference: Optional[pulumi.Input[_builtins.int]] = None,
                 tunnel_interface_vmanage_connection_preference_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 tunnel_qos_mode: Optional[pulumi.Input[_builtins.str]] = None,
                 tunnel_qos_mode_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 udp_timeout: Optional[pulumi.Input[_builtins.int]] = None,
                 udp_timeout_variable: Optional[pulumi.Input[_builtins.str]] = None):
        """
        The set of arguments for constructing a CiscoVpnInterfaceFeatureTemplate resource.
        :param pulumi.Input[_builtins.str] description: The description of the feature template
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] device_types: List of supported device types
                 - Choices: `vedge-C8000V`, `vedge-C8300-1N1S-4T2X`, `vedge-C8300-1N1S-6T`, `vedge-C8300-2N2S-6T`, `vedge-C8300-2N2S-4T2X`, `vedge-C8500-12X4QC`, `vedge-C8500-12X`, `vedge-C8500-20X6C`, `vedge-C8500L-8S4X`, `vedge-C8200-1N-4T`, `vedge-C8200L-1N-4T`
        :param pulumi.Input[Sequence[pulumi.Input['CiscoVpnInterfaceFeatureTemplateAccessListArgs']]] access_lists: Apply ACL
        :param pulumi.Input[_builtins.str] address: Assign IPv4 address
        :param pulumi.Input[_builtins.str] address_variable: Variable name
        :param pulumi.Input[_builtins.int] arp_timeout: Timeout value for dynamically learned ARP entries, <0..2678400> seconds
                 - Range: `0`-`2147483`
                 - Default value: `1200`
        :param pulumi.Input[_builtins.str] arp_timeout_variable: Variable name
        :param pulumi.Input[_builtins.bool] auto_bandwidth_detect: Interface auto detect bandwidth
                 - Default value: `false`
        :param pulumi.Input[_builtins.str] auto_bandwidth_detect_variable: Variable name
        :param pulumi.Input[_builtins.bool] autonegotiate: Link autonegotiation
        :param pulumi.Input[_builtins.str] autonegotiate_variable: Variable name
        :param pulumi.Input[_builtins.int] bandwidth_downstream: Interface downstream bandwidth capacity, in kbps
                 - Range: `1`-`2147483647`
        :param pulumi.Input[_builtins.str] bandwidth_downstream_variable: Variable name
        :param pulumi.Input[_builtins.int] bandwidth_upstream: Interface upstream bandwidth capacity, in kbps
                 - Range: `1`-`2147483647`
        :param pulumi.Input[_builtins.str] bandwidth_upstream_variable: Variable name
        :param pulumi.Input[_builtins.bool] block_non_source_ip: Block packets originating from IP address that is not from this source
                 - Default value: `false`
        :param pulumi.Input[_builtins.str] block_non_source_ip_variable: Variable name
        :param pulumi.Input[_builtins.str] core_region: Enable core region
                 - Choices: `core`, `core-shared`
                 - Default value: `core`
        :param pulumi.Input[_builtins.str] core_region_variable: Variable name
        :param pulumi.Input[_builtins.bool] dhcp: Enable DHCP
                 - Default value: `false`
        :param pulumi.Input[_builtins.int] dhcp_distance: Set administrative distance for DHCP default route
                 - Range: `1`-`65536`
                 - Default value: `1`
        :param pulumi.Input[_builtins.str] dhcp_distance_variable: Variable name
        :param pulumi.Input[_builtins.str] dhcp_variable: Variable name
        :param pulumi.Input[_builtins.bool] dhcpv6: Enable DHCPv6
                 - Default value: `false`
        :param pulumi.Input[_builtins.str] dhcpv6_variable: Variable name
        :param pulumi.Input[_builtins.str] duplex: Duplex mode
                 - Choices: `full`, `half`, `auto`
        :param pulumi.Input[_builtins.str] duplex_variable: Variable name
        :param pulumi.Input[_builtins.bool] enable_core_region: Enable core region
                 - Default value: `false`
        :param pulumi.Input[_builtins.bool] enable_sgt: Enables the interface for CTS SGT authorization and forwarding.
                 - Default value: `false`
        :param pulumi.Input[_builtins.str] gre_tunnel_source_ip: Extend remote TLOC over a GRE tunnel to a local WAN interface
        :param pulumi.Input[_builtins.str] gre_tunnel_source_ip_variable: Variable name
        :param pulumi.Input[_builtins.str] gre_tunnel_xconnect: Extend remote TLOC over a GRE tunnel to a local WAN interface
        :param pulumi.Input[_builtins.str] gre_tunnel_xconnect_variable: Variable name
        :param pulumi.Input[_builtins.bool] icmp_redirect_disable: Set this option to disable the icmp/icmpv6 redirect packets
                 - Default value: `true`
        :param pulumi.Input[_builtins.str] icmp_redirect_disable_variable: Variable name
        :param pulumi.Input[_builtins.str] interface_description: Interface description
        :param pulumi.Input[_builtins.str] interface_description_variable: Variable name
        :param pulumi.Input[_builtins.int] interface_mtu: Interface MTU GigabitEthernet0 <1500..1518>, Other GigabitEthernet <1500..9216> in bytes
                 - Range: `1500`-`9216`
                 - Default value: `1500`
        :param pulumi.Input[_builtins.str] interface_mtu_variable: Variable name
        :param pulumi.Input[_builtins.str] interface_name: Interface name: ge0/<0-..> or ge0/<0-..>.vlanid or irb<bridgeid:1-63> or loopback<string> or natpool-<1..31> when present
        :param pulumi.Input[_builtins.str] interface_name_variable: Variable name
        :param pulumi.Input[_builtins.bool] ip_directed_broadcast: IP Directed-Broadcast
                 - Default value: `false`
        :param pulumi.Input[_builtins.str] ip_directed_broadcast_variable: Variable name
        :param pulumi.Input[_builtins.int] ip_mtu: IP MTU for GigabitEthernet main <576..Interface MTU>, GigabitEthernet subinterface <576..9216>, Other Interfaces <576..2000> in bytes
                 - Range: `576`-`9216`
                 - Default value: `1500`
        :param pulumi.Input[_builtins.str] ip_mtu_variable: Variable name
        :param pulumi.Input[_builtins.str] iperf_server: Iperf server for auto bandwidth detect
        :param pulumi.Input[_builtins.str] iperf_server_variable: Variable name
        :param pulumi.Input[_builtins.str] ipv4_dhcp_helper_variable: Variable name
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] ipv4_dhcp_helpers: List of DHCP IPv4 helper addresses
        :param pulumi.Input[Sequence[pulumi.Input['CiscoVpnInterfaceFeatureTemplateIpv4SecondaryAddressArgs']]] ipv4_secondary_addresses: Assign secondary IP addresses
        :param pulumi.Input[Sequence[pulumi.Input['CiscoVpnInterfaceFeatureTemplateIpv4VrrpArgs']]] ipv4_vrrps: Enable VRRP
        :param pulumi.Input[Sequence[pulumi.Input['CiscoVpnInterfaceFeatureTemplateIpv6AccessListArgs']]] ipv6_access_lists: Apply IPv6 access list
        :param pulumi.Input[_builtins.str] ipv6_address: Assign IPv6 address
        :param pulumi.Input[_builtins.str] ipv6_address_variable: Variable name
        :param pulumi.Input[Sequence[pulumi.Input['CiscoVpnInterfaceFeatureTemplateIpv6DhcpHelperArgs']]] ipv6_dhcp_helpers: DHCPv6 Helper
        :param pulumi.Input[_builtins.bool] ipv6_nat: NAT64 on this interface
                 - Default value: `false`
        :param pulumi.Input[_builtins.str] ipv6_nat_variable: Variable name
        :param pulumi.Input[Sequence[pulumi.Input['CiscoVpnInterfaceFeatureTemplateIpv6SecondaryAddressArgs']]] ipv6_secondary_addresses: Assign secondary IPv6 addresses
        :param pulumi.Input[Sequence[pulumi.Input['CiscoVpnInterfaceFeatureTemplateIpv6VrrpArgs']]] ipv6_vrrps: Enable VRRP
        :param pulumi.Input[_builtins.int] load_interval: Interval for interface load calculation
                 - Range: `30`-`600`
                 - Default value: `30`
        :param pulumi.Input[_builtins.str] load_interval_variable: Variable name
        :param pulumi.Input[_builtins.str] mac_address: Set MAC-layer address
        :param pulumi.Input[_builtins.str] mac_address_variable: Variable name
        :param pulumi.Input[_builtins.str] media_type: Media type
                 - Choices: `auto-select`, `rj45`, `sfp`
        :param pulumi.Input[_builtins.str] media_type_variable: Variable name
        :param pulumi.Input[_builtins.str] name: The name of the feature template
        :param pulumi.Input[_builtins.bool] nat: Network Address Translation on this interface
                 - Default value: `false`
        :param pulumi.Input[_builtins.bool] nat64_interface: NAT64 on this interface
                 - Default value: `false`
        :param pulumi.Input[_builtins.bool] nat66_interface: NAT66 on this interface
                 - Default value: `false`
        :param pulumi.Input[_builtins.str] nat_inside_source_loopback_interface: Configure NAT Inside Loopback Interface
        :param pulumi.Input[_builtins.str] nat_inside_source_loopback_interface_variable: Variable name
        :param pulumi.Input[_builtins.bool] nat_overload: Enable port translation(PAT)
                 - Default value: `true`
        :param pulumi.Input[_builtins.str] nat_overload_variable: Variable name
        :param pulumi.Input[_builtins.int] nat_pool_prefix_length: Ending IP address of NAT Pool Prefix Length
        :param pulumi.Input[_builtins.str] nat_pool_prefix_length_variable: Variable name
        :param pulumi.Input[_builtins.str] nat_pool_range_end: Ending IP address of NAT pool range
        :param pulumi.Input[_builtins.str] nat_pool_range_end_variable: Variable name
        :param pulumi.Input[_builtins.str] nat_pool_range_start: Starting IP address of NAT pool range
        :param pulumi.Input[_builtins.str] nat_pool_range_start_variable: Variable name
        :param pulumi.Input[_builtins.str] nat_type: NAT type
                 - Choices: `interface`, `pool`, `loopback`
                 - Default value: `interface`
        :param pulumi.Input[_builtins.str] nat_type_variable: Variable name
        :param pulumi.Input[_builtins.bool] poe: Configure interface as Power-over-Ethernet source
                 - Default value: `false`
        :param pulumi.Input[_builtins.str] poe_variable: Variable name
        :param pulumi.Input[_builtins.bool] propagate_sgt: Enable/Disable CTS SGT propagation on an interface.
                 - Default value: `true`
        :param pulumi.Input[_builtins.int] qos_adaptive_bandwidth_downstream: Adaptive QoS default downstream bandwidth
                 - Range: `8`-`100000000`
        :param pulumi.Input[_builtins.str] qos_adaptive_bandwidth_downstream_variable: Variable name
        :param pulumi.Input[_builtins.int] qos_adaptive_bandwidth_upstream: Adaptive QoS default upstream bandwidth
                 - Range: `8`-`100000000`
        :param pulumi.Input[_builtins.str] qos_adaptive_bandwidth_upstream_variable: Variable name
        :param pulumi.Input[_builtins.int] qos_adaptive_max_downstream: Downstream max bandwidth limit
                 - Range: `8`-`100000000`
        :param pulumi.Input[_builtins.str] qos_adaptive_max_downstream_variable: Variable name
        :param pulumi.Input[_builtins.int] qos_adaptive_max_upstream: Upstream max bandwidth limit
                 - Range: `8`-`100000000`
        :param pulumi.Input[_builtins.str] qos_adaptive_max_upstream_variable: Variable name
        :param pulumi.Input[_builtins.int] qos_adaptive_min_downstream: Downstream min bandwidth limit
                 - Range: `8`-`100000000`
        :param pulumi.Input[_builtins.str] qos_adaptive_min_downstream_variable: Variable name
        :param pulumi.Input[_builtins.int] qos_adaptive_min_upstream: Upstream min bandwidth limit
                 - Range: `8`-`100000000`
        :param pulumi.Input[_builtins.str] qos_adaptive_min_upstream_variable: Variable name
        :param pulumi.Input[_builtins.int] qos_adaptive_period: Periodic timer for adaptive QoS in minutes
                 - Range: `1`-`720`
                 - Default value: `15`
        :param pulumi.Input[_builtins.str] qos_adaptive_period_variable: Variable name
        :param pulumi.Input[_builtins.str] qos_map: Name of QoS map
        :param pulumi.Input[_builtins.str] qos_map_variable: Variable name
        :param pulumi.Input[_builtins.str] qos_map_vpn: Name of VPN QoS map
        :param pulumi.Input[_builtins.str] qos_map_vpn_variable: Variable name
        :param pulumi.Input[_builtins.str] rewrite_rule_name: Name of rewrite rule
        :param pulumi.Input[_builtins.str] rewrite_rule_name_variable: Variable name
        :param pulumi.Input[_builtins.str] secondary_region: Enable secondary region
                 - Choices: `off`, `secondary-only`, `secondary-shared`
                 - Default value: `off`
        :param pulumi.Input[_builtins.str] secondary_region_variable: Variable name
        :param pulumi.Input[_builtins.bool] sgt_enforcement: Enables the interface for CTS SGT authorization and forwarding.
                 - Default value: `false`
        :param pulumi.Input[_builtins.int] sgt_enforcement_sgt: SGT value between 2 and 65519.
                 - Range: `2`-`65519`
        :param pulumi.Input[_builtins.str] sgt_enforcement_sgt_variable: Variable name
        :param pulumi.Input[_builtins.int] shaping_rate: 1ge  interfaces: [0..1000000]kbps; 10ge interfaces: [0..10000000]kbps
                 - Range: `8`-`100000000`
        :param pulumi.Input[_builtins.str] shaping_rate_variable: Variable name
        :param pulumi.Input[_builtins.bool] shutdown: Administrative state
                 - Default value: `true`
        :param pulumi.Input[_builtins.str] shutdown_variable: Variable name
        :param pulumi.Input[_builtins.str] speed: Set interface speed
                 - Choices: `10`, `100`, `1000`, `2500`, `10000`
        :param pulumi.Input[_builtins.str] speed_variable: Variable name
        :param pulumi.Input[Sequence[pulumi.Input['CiscoVpnInterfaceFeatureTemplateStaticArpArgs']]] static_arps: Configure static ARP entries
        :param pulumi.Input[Sequence[pulumi.Input['CiscoVpnInterfaceFeatureTemplateStaticNat66EntryArgs']]] static_nat66_entries: static NAT
        :param pulumi.Input[Sequence[pulumi.Input['CiscoVpnInterfaceFeatureTemplateStaticNatEntryArgs']]] static_nat_entries: Configure static NAT entries
        :param pulumi.Input[Sequence[pulumi.Input['CiscoVpnInterfaceFeatureTemplateStaticPortForwardEntryArgs']]] static_port_forward_entries: Configure Port Forward entries
        :param pulumi.Input[_builtins.int] static_sgt: SGT value between 2 and 65519.
                 - Range: `2`-`65519`
        :param pulumi.Input[_builtins.bool] static_sgt_trusted: Indicates that the interface is trustworthy for CTS.
                 - Default value: `false`
        :param pulumi.Input[_builtins.str] static_sgt_variable: Variable name
        :param pulumi.Input[_builtins.int] tcp_mss_adjust: TCP MSS on SYN packets, in bytes
                 - Range: `500`-`1460`
        :param pulumi.Input[_builtins.str] tcp_mss_adjust_variable: Variable name
        :param pulumi.Input[_builtins.int] tcp_timeout: Set NAT TCP session timeout, in minutes
                 - Range: `1`-`8947`
                 - Default value: `60`
        :param pulumi.Input[_builtins.str] tcp_timeout_variable: Variable name
        :param pulumi.Input[_builtins.str] tloc_extension: Extends a local TLOC to a remote node only for vpn 0
        :param pulumi.Input[_builtins.str] tloc_extension_variable: Variable name
        :param pulumi.Input[_builtins.str] tracker_variable: Variable name
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] trackers: Enable tracker for this interface
        :param pulumi.Input[_builtins.int] tunnel_bandwidth: Tunnels Bandwidth Percent
                 - Range: `1`-`99`
                 - Default value: `50`
        :param pulumi.Input[_builtins.str] tunnel_bandwidth_variable: Variable name
        :param pulumi.Input[_builtins.bool] tunnel_interface_allow_all: Allow all traffic. Overrides all other allow-service options if allow-service all is set
                 - Default value: `false`
        :param pulumi.Input[_builtins.str] tunnel_interface_allow_all_variable: Variable name
        :param pulumi.Input[_builtins.bool] tunnel_interface_allow_bgp: Allow/deny BGP
                 - Default value: `false`
        :param pulumi.Input[_builtins.str] tunnel_interface_allow_bgp_variable: Variable name
        :param pulumi.Input[_builtins.bool] tunnel_interface_allow_dhcp: Allow/Deny DHCP
                 - Default value: `true`
        :param pulumi.Input[_builtins.str] tunnel_interface_allow_dhcp_variable: Variable name
        :param pulumi.Input[_builtins.bool] tunnel_interface_allow_dns: Allow/Deny DNS
                 - Default value: `true`
        :param pulumi.Input[_builtins.str] tunnel_interface_allow_dns_variable: Variable name
        :param pulumi.Input[_builtins.bool] tunnel_interface_allow_https: Allow/Deny Https
                 - Default value: `true`
        :param pulumi.Input[_builtins.str] tunnel_interface_allow_https_variable: Variable name
        :param pulumi.Input[_builtins.bool] tunnel_interface_allow_icmp: Allow/Deny ICMP
                 - Default value: `true`
        :param pulumi.Input[_builtins.str] tunnel_interface_allow_icmp_variable: Variable name
        :param pulumi.Input[_builtins.bool] tunnel_interface_allow_netconf: Allow/Deny NETCONF
                 - Default value: `false`
        :param pulumi.Input[_builtins.str] tunnel_interface_allow_netconf_variable: Variable name
        :param pulumi.Input[_builtins.bool] tunnel_interface_allow_ntp: Allow/Deny NTP
                 - Default value: `false`
        :param pulumi.Input[_builtins.str] tunnel_interface_allow_ntp_variable: Variable name
        :param pulumi.Input[_builtins.bool] tunnel_interface_allow_ospf: Allow/Deny OSPF
                 - Default value: `false`
        :param pulumi.Input[_builtins.str] tunnel_interface_allow_ospf_variable: Variable name
        :param pulumi.Input[_builtins.bool] tunnel_interface_allow_snmp: Allow/Deny SNMP
                 - Default value: `false`
        :param pulumi.Input[_builtins.str] tunnel_interface_allow_snmp_variable: Variable name
        :param pulumi.Input[_builtins.bool] tunnel_interface_allow_ssh: Allow/Deny SSH
                 - Default value: `false`
        :param pulumi.Input[_builtins.str] tunnel_interface_allow_ssh_variable: Variable name
        :param pulumi.Input[_builtins.bool] tunnel_interface_allow_stun: Allow/Deny STUN
                 - Default value: `false`
        :param pulumi.Input[_builtins.str] tunnel_interface_allow_stun_variable: Variable name
        :param pulumi.Input[_builtins.str] tunnel_interface_bind_loopback_tunnel: Bind loopback tunnel interface to a physical interface
        :param pulumi.Input[_builtins.str] tunnel_interface_bind_loopback_tunnel_variable: Variable name
        :param pulumi.Input[_builtins.bool] tunnel_interface_border: Set TLOC as border TLOC
                 - Default value: `false`
        :param pulumi.Input[_builtins.str] tunnel_interface_border_variable: Variable name
        :param pulumi.Input[_builtins.str] tunnel_interface_carrier: Set carrier for TLOC
                 - Choices: `default`, `carrier1`, `carrier2`, `carrier3`, `carrier4`, `carrier5`, `carrier6`, `carrier7`, `carrier8`
                 - Default value: `default`
        :param pulumi.Input[_builtins.str] tunnel_interface_carrier_variable: Variable name
        :param pulumi.Input[_builtins.bool] tunnel_interface_clear_dont_fragment: Enable clear dont fragment (Currently Only SDWAN Tunnel Interface)
                 - Default value: `false`
        :param pulumi.Input[_builtins.str] tunnel_interface_clear_dont_fragment_variable: Variable name
        :param pulumi.Input[_builtins.str] tunnel_interface_color: Set color for TLOC
                 - Choices: `default`, `mpls`, `metro-ethernet`, `biz-internet`, `public-internet`, `lte`, `3g`, `red`, `green`, `blue`, `gold`, `silver`, `bronze`, `custom1`, `custom2`, `custom3`, `private1`, `private2`, `private3`, `private4`, `private5`, `private6`
                 - Default value: `default`
        :param pulumi.Input[_builtins.bool] tunnel_interface_color_restrict: Restrict this TLOC behavior
                 - Default value: `false`
        :param pulumi.Input[_builtins.str] tunnel_interface_color_restrict_variable: Variable name
        :param pulumi.Input[_builtins.str] tunnel_interface_color_variable: Variable name
        :param pulumi.Input[_builtins.bool] tunnel_interface_control_connections: Allow Control Connection
                 - Default value: `true`
        :param pulumi.Input[_builtins.str] tunnel_interface_control_connections_variable: Variable name
        :param pulumi.Input[Sequence[pulumi.Input['CiscoVpnInterfaceFeatureTemplateTunnelInterfaceEncapsulationArgs']]] tunnel_interface_encapsulations: Encapsulation for TLOC
        :param pulumi.Input[_builtins.str] tunnel_interface_exclude_controller_group_list_variable: Variable name
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.int]]] tunnel_interface_exclude_controller_group_lists: Exclude the following controller groups defined in this list
        :param pulumi.Input[_builtins.str] tunnel_interface_gre_tunnel_destination_ip: Extend the TLOC to a remote node over GRE tunnel
        :param pulumi.Input[_builtins.str] tunnel_interface_gre_tunnel_destination_ip_variable: Variable name
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.int]]] tunnel_interface_groups: List of groups
        :param pulumi.Input[_builtins.str] tunnel_interface_groups_variable: Variable name
        :param pulumi.Input[_builtins.int] tunnel_interface_hello_interval: Set time period of control hello packets <100..600000> milli seconds
                 - Range: `100`-`600000`
                 - Default value: `1000`
        :param pulumi.Input[_builtins.str] tunnel_interface_hello_interval_variable: Variable name
        :param pulumi.Input[_builtins.int] tunnel_interface_hello_tolerance: Set tolerance of control hello packets <12..6000> seconds
                 - Range: `12`-`6000`
                 - Default value: `12`
        :param pulumi.Input[_builtins.str] tunnel_interface_hello_tolerance_variable: Variable name
        :param pulumi.Input[_builtins.bool] tunnel_interface_last_resort_circuit: Set TLOC as last resort
                 - Default value: `false`
        :param pulumi.Input[_builtins.str] tunnel_interface_last_resort_circuit_variable: Variable name
        :param pulumi.Input[_builtins.bool] tunnel_interface_low_bandwidth_link: Set the interface as a low-bandwidth circuit
                 - Default value: `false`
        :param pulumi.Input[_builtins.str] tunnel_interface_low_bandwidth_link_variable: Variable name
        :param pulumi.Input[_builtins.int] tunnel_interface_max_control_connections: Set the maximum number of control connections for this TLOC
                 - Range: `0`-`100`
        :param pulumi.Input[_builtins.str] tunnel_interface_max_control_connections_variable: Variable name
        :param pulumi.Input[_builtins.int] tunnel_interface_nat_refresh_interval: Set time period of nat refresh packets <1...60> seconds
                 - Range: `1`-`60`
                 - Default value: `5`
        :param pulumi.Input[_builtins.str] tunnel_interface_nat_refresh_interval_variable: Variable name
        :param pulumi.Input[_builtins.bool] tunnel_interface_network_broadcast: Accept and respond to network-prefix-directed broadcasts)
                 - Default value: `false`
        :param pulumi.Input[_builtins.str] tunnel_interface_network_broadcast_variable: Variable name
        :param pulumi.Input[_builtins.bool] tunnel_interface_port_hop: Disallow port hopping on the tunnel interface
                 - Default value: `true`
        :param pulumi.Input[_builtins.str] tunnel_interface_port_hop_variable: Variable name
        :param pulumi.Input[_builtins.bool] tunnel_interface_propagate_sgt: CTS SGT Propagation configuration
                 - Default value: `false`
        :param pulumi.Input[_builtins.str] tunnel_interface_propagate_sgt_variable: Variable name
        :param pulumi.Input[_builtins.int] tunnel_interface_tunnel_tcp_mss: Tunnel TCP MSS on SYN packets, in bytes
                 - Range: `500`-`1460`
        :param pulumi.Input[_builtins.str] tunnel_interface_tunnel_tcp_mss_variable: Variable name
        :param pulumi.Input[_builtins.bool] tunnel_interface_vbond_as_stun_server: Put this wan interface in STUN mode only
                 - Default value: `false`
        :param pulumi.Input[_builtins.str] tunnel_interface_vbond_as_stun_server_variable: Variable name
        :param pulumi.Input[_builtins.int] tunnel_interface_vmanage_connection_preference: Set interface preference for control connection to vManage <0..8>
                 - Range: `0`-`8`
                 - Default value: `5`
        :param pulumi.Input[_builtins.str] tunnel_interface_vmanage_connection_preference_variable: Variable name
        :param pulumi.Input[_builtins.str] tunnel_qos_mode: Set tunnel QoS mode
                 - Choices: `hub`, `spoke`
        :param pulumi.Input[_builtins.str] tunnel_qos_mode_variable: Variable name
        :param pulumi.Input[_builtins.int] udp_timeout: Set NAT UDP session timeout, in minutes
                 - Range: `1`-`8947`
                 - Default value: `1`
        :param pulumi.Input[_builtins.str] udp_timeout_variable: Variable name
        """
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "device_types", device_types)
        if access_lists is not None:
            pulumi.set(__self__, "access_lists", access_lists)
        if address is not None:
            pulumi.set(__self__, "address", address)
        if address_variable is not None:
            pulumi.set(__self__, "address_variable", address_variable)
        if arp_timeout is not None:
            pulumi.set(__self__, "arp_timeout", arp_timeout)
        if arp_timeout_variable is not None:
            pulumi.set(__self__, "arp_timeout_variable", arp_timeout_variable)
        if auto_bandwidth_detect is not None:
            pulumi.set(__self__, "auto_bandwidth_detect", auto_bandwidth_detect)
        if auto_bandwidth_detect_variable is not None:
            pulumi.set(__self__, "auto_bandwidth_detect_variable", auto_bandwidth_detect_variable)
        if autonegotiate is not None:
            pulumi.set(__self__, "autonegotiate", autonegotiate)
        if autonegotiate_variable is not None:
            pulumi.set(__self__, "autonegotiate_variable", autonegotiate_variable)
        if bandwidth_downstream is not None:
            pulumi.set(__self__, "bandwidth_downstream", bandwidth_downstream)
        if bandwidth_downstream_variable is not None:
            pulumi.set(__self__, "bandwidth_downstream_variable", bandwidth_downstream_variable)
        if bandwidth_upstream is not None:
            pulumi.set(__self__, "bandwidth_upstream", bandwidth_upstream)
        if bandwidth_upstream_variable is not None:
            pulumi.set(__self__, "bandwidth_upstream_variable", bandwidth_upstream_variable)
        if block_non_source_ip is not None:
            pulumi.set(__self__, "block_non_source_ip", block_non_source_ip)
        if block_non_source_ip_variable is not None:
            pulumi.set(__self__, "block_non_source_ip_variable", block_non_source_ip_variable)
        if core_region is not None:
            pulumi.set(__self__, "core_region", core_region)
        if core_region_variable is not None:
            pulumi.set(__self__, "core_region_variable", core_region_variable)
        if dhcp is not None:
            pulumi.set(__self__, "dhcp", dhcp)
        if dhcp_distance is not None:
            pulumi.set(__self__, "dhcp_distance", dhcp_distance)
        if dhcp_distance_variable is not None:
            pulumi.set(__self__, "dhcp_distance_variable", dhcp_distance_variable)
        if dhcp_variable is not None:
            pulumi.set(__self__, "dhcp_variable", dhcp_variable)
        if dhcpv6 is not None:
            pulumi.set(__self__, "dhcpv6", dhcpv6)
        if dhcpv6_variable is not None:
            pulumi.set(__self__, "dhcpv6_variable", dhcpv6_variable)
        if duplex is not None:
            pulumi.set(__self__, "duplex", duplex)
        if duplex_variable is not None:
            pulumi.set(__self__, "duplex_variable", duplex_variable)
        if enable_core_region is not None:
            pulumi.set(__self__, "enable_core_region", enable_core_region)
        if enable_sgt is not None:
            pulumi.set(__self__, "enable_sgt", enable_sgt)
        if gre_tunnel_source_ip is not None:
            pulumi.set(__self__, "gre_tunnel_source_ip", gre_tunnel_source_ip)
        if gre_tunnel_source_ip_variable is not None:
            pulumi.set(__self__, "gre_tunnel_source_ip_variable", gre_tunnel_source_ip_variable)
        if gre_tunnel_xconnect is not None:
            pulumi.set(__self__, "gre_tunnel_xconnect", gre_tunnel_xconnect)
        if gre_tunnel_xconnect_variable is not None:
            pulumi.set(__self__, "gre_tunnel_xconnect_variable", gre_tunnel_xconnect_variable)
        if icmp_redirect_disable is not None:
            pulumi.set(__self__, "icmp_redirect_disable", icmp_redirect_disable)
        if icmp_redirect_disable_variable is not None:
            pulumi.set(__self__, "icmp_redirect_disable_variable", icmp_redirect_disable_variable)
        if interface_description is not None:
            pulumi.set(__self__, "interface_description", interface_description)
        if interface_description_variable is not None:
            pulumi.set(__self__, "interface_description_variable", interface_description_variable)
        if interface_mtu is not None:
            pulumi.set(__self__, "interface_mtu", interface_mtu)
        if interface_mtu_variable is not None:
            pulumi.set(__self__, "interface_mtu_variable", interface_mtu_variable)
        if interface_name is not None:
            pulumi.set(__self__, "interface_name", interface_name)
        if interface_name_variable is not None:
            pulumi.set(__self__, "interface_name_variable", interface_name_variable)
        if ip_directed_broadcast is not None:
            pulumi.set(__self__, "ip_directed_broadcast", ip_directed_broadcast)
        if ip_directed_broadcast_variable is not None:
            pulumi.set(__self__, "ip_directed_broadcast_variable", ip_directed_broadcast_variable)
        if ip_mtu is not None:
            pulumi.set(__self__, "ip_mtu", ip_mtu)
        if ip_mtu_variable is not None:
            pulumi.set(__self__, "ip_mtu_variable", ip_mtu_variable)
        if iperf_server is not None:
            pulumi.set(__self__, "iperf_server", iperf_server)
        if iperf_server_variable is not None:
            pulumi.set(__self__, "iperf_server_variable", iperf_server_variable)
        if ipv4_dhcp_helper_variable is not None:
            pulumi.set(__self__, "ipv4_dhcp_helper_variable", ipv4_dhcp_helper_variable)
        if ipv4_dhcp_helpers is not None:
            pulumi.set(__self__, "ipv4_dhcp_helpers", ipv4_dhcp_helpers)
        if ipv4_secondary_addresses is not None:
            pulumi.set(__self__, "ipv4_secondary_addresses", ipv4_secondary_addresses)
        if ipv4_vrrps is not None:
            pulumi.set(__self__, "ipv4_vrrps", ipv4_vrrps)
        if ipv6_access_lists is not None:
            pulumi.set(__self__, "ipv6_access_lists", ipv6_access_lists)
        if ipv6_address is not None:
            pulumi.set(__self__, "ipv6_address", ipv6_address)
        if ipv6_address_variable is not None:
            pulumi.set(__self__, "ipv6_address_variable", ipv6_address_variable)
        if ipv6_dhcp_helpers is not None:
            pulumi.set(__self__, "ipv6_dhcp_helpers", ipv6_dhcp_helpers)
        if ipv6_nat is not None:
            pulumi.set(__self__, "ipv6_nat", ipv6_nat)
        if ipv6_nat_variable is not None:
            pulumi.set(__self__, "ipv6_nat_variable", ipv6_nat_variable)
        if ipv6_secondary_addresses is not None:
            pulumi.set(__self__, "ipv6_secondary_addresses", ipv6_secondary_addresses)
        if ipv6_vrrps is not None:
            pulumi.set(__self__, "ipv6_vrrps", ipv6_vrrps)
        if load_interval is not None:
            pulumi.set(__self__, "load_interval", load_interval)
        if load_interval_variable is not None:
            pulumi.set(__self__, "load_interval_variable", load_interval_variable)
        if mac_address is not None:
            pulumi.set(__self__, "mac_address", mac_address)
        if mac_address_variable is not None:
            pulumi.set(__self__, "mac_address_variable", mac_address_variable)
        if media_type is not None:
            pulumi.set(__self__, "media_type", media_type)
        if media_type_variable is not None:
            pulumi.set(__self__, "media_type_variable", media_type_variable)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if nat is not None:
            pulumi.set(__self__, "nat", nat)
        if nat64_interface is not None:
            pulumi.set(__self__, "nat64_interface", nat64_interface)
        if nat66_interface is not None:
            pulumi.set(__self__, "nat66_interface", nat66_interface)
        if nat_inside_source_loopback_interface is not None:
            pulumi.set(__self__, "nat_inside_source_loopback_interface", nat_inside_source_loopback_interface)
        if nat_inside_source_loopback_interface_variable is not None:
            pulumi.set(__self__, "nat_inside_source_loopback_interface_variable", nat_inside_source_loopback_interface_variable)
        if nat_overload is not None:
            pulumi.set(__self__, "nat_overload", nat_overload)
        if nat_overload_variable is not None:
            pulumi.set(__self__, "nat_overload_variable", nat_overload_variable)
        if nat_pool_prefix_length is not None:
            pulumi.set(__self__, "nat_pool_prefix_length", nat_pool_prefix_length)
        if nat_pool_prefix_length_variable is not None:
            pulumi.set(__self__, "nat_pool_prefix_length_variable", nat_pool_prefix_length_variable)
        if nat_pool_range_end is not None:
            pulumi.set(__self__, "nat_pool_range_end", nat_pool_range_end)
        if nat_pool_range_end_variable is not None:
            pulumi.set(__self__, "nat_pool_range_end_variable", nat_pool_range_end_variable)
        if nat_pool_range_start is not None:
            pulumi.set(__self__, "nat_pool_range_start", nat_pool_range_start)
        if nat_pool_range_start_variable is not None:
            pulumi.set(__self__, "nat_pool_range_start_variable", nat_pool_range_start_variable)
        if nat_type is not None:
            pulumi.set(__self__, "nat_type", nat_type)
        if nat_type_variable is not None:
            pulumi.set(__self__, "nat_type_variable", nat_type_variable)
        if poe is not None:
            pulumi.set(__self__, "poe", poe)
        if poe_variable is not None:
            pulumi.set(__self__, "poe_variable", poe_variable)
        if propagate_sgt is not None:
            pulumi.set(__self__, "propagate_sgt", propagate_sgt)
        if qos_adaptive_bandwidth_downstream is not None:
            pulumi.set(__self__, "qos_adaptive_bandwidth_downstream", qos_adaptive_bandwidth_downstream)
        if qos_adaptive_bandwidth_downstream_variable is not None:
            pulumi.set(__self__, "qos_adaptive_bandwidth_downstream_variable", qos_adaptive_bandwidth_downstream_variable)
        if qos_adaptive_bandwidth_upstream is not None:
            pulumi.set(__self__, "qos_adaptive_bandwidth_upstream", qos_adaptive_bandwidth_upstream)
        if qos_adaptive_bandwidth_upstream_variable is not None:
            pulumi.set(__self__, "qos_adaptive_bandwidth_upstream_variable", qos_adaptive_bandwidth_upstream_variable)
        if qos_adaptive_max_downstream is not None:
            pulumi.set(__self__, "qos_adaptive_max_downstream", qos_adaptive_max_downstream)
        if qos_adaptive_max_downstream_variable is not None:
            pulumi.set(__self__, "qos_adaptive_max_downstream_variable", qos_adaptive_max_downstream_variable)
        if qos_adaptive_max_upstream is not None:
            pulumi.set(__self__, "qos_adaptive_max_upstream", qos_adaptive_max_upstream)
        if qos_adaptive_max_upstream_variable is not None:
            pulumi.set(__self__, "qos_adaptive_max_upstream_variable", qos_adaptive_max_upstream_variable)
        if qos_adaptive_min_downstream is not None:
            pulumi.set(__self__, "qos_adaptive_min_downstream", qos_adaptive_min_downstream)
        if qos_adaptive_min_downstream_variable is not None:
            pulumi.set(__self__, "qos_adaptive_min_downstream_variable", qos_adaptive_min_downstream_variable)
        if qos_adaptive_min_upstream is not None:
            pulumi.set(__self__, "qos_adaptive_min_upstream", qos_adaptive_min_upstream)
        if qos_adaptive_min_upstream_variable is not None:
            pulumi.set(__self__, "qos_adaptive_min_upstream_variable", qos_adaptive_min_upstream_variable)
        if qos_adaptive_period is not None:
            pulumi.set(__self__, "qos_adaptive_period", qos_adaptive_period)
        if qos_adaptive_period_variable is not None:
            pulumi.set(__self__, "qos_adaptive_period_variable", qos_adaptive_period_variable)
        if qos_map is not None:
            pulumi.set(__self__, "qos_map", qos_map)
        if qos_map_variable is not None:
            pulumi.set(__self__, "qos_map_variable", qos_map_variable)
        if qos_map_vpn is not None:
            pulumi.set(__self__, "qos_map_vpn", qos_map_vpn)
        if qos_map_vpn_variable is not None:
            pulumi.set(__self__, "qos_map_vpn_variable", qos_map_vpn_variable)
        if rewrite_rule_name is not None:
            pulumi.set(__self__, "rewrite_rule_name", rewrite_rule_name)
        if rewrite_rule_name_variable is not None:
            pulumi.set(__self__, "rewrite_rule_name_variable", rewrite_rule_name_variable)
        if secondary_region is not None:
            pulumi.set(__self__, "secondary_region", secondary_region)
        if secondary_region_variable is not None:
            pulumi.set(__self__, "secondary_region_variable", secondary_region_variable)
        if sgt_enforcement is not None:
            pulumi.set(__self__, "sgt_enforcement", sgt_enforcement)
        if sgt_enforcement_sgt is not None:
            pulumi.set(__self__, "sgt_enforcement_sgt", sgt_enforcement_sgt)
        if sgt_enforcement_sgt_variable is not None:
            pulumi.set(__self__, "sgt_enforcement_sgt_variable", sgt_enforcement_sgt_variable)
        if shaping_rate is not None:
            pulumi.set(__self__, "shaping_rate", shaping_rate)
        if shaping_rate_variable is not None:
            pulumi.set(__self__, "shaping_rate_variable", shaping_rate_variable)
        if shutdown is not None:
            pulumi.set(__self__, "shutdown", shutdown)
        if shutdown_variable is not None:
            pulumi.set(__self__, "shutdown_variable", shutdown_variable)
        if speed is not None:
            pulumi.set(__self__, "speed", speed)
        if speed_variable is not None:
            pulumi.set(__self__, "speed_variable", speed_variable)
        if static_arps is not None:
            pulumi.set(__self__, "static_arps", static_arps)
        if static_nat66_entries is not None:
            pulumi.set(__self__, "static_nat66_entries", static_nat66_entries)
        if static_nat_entries is not None:
            pulumi.set(__self__, "static_nat_entries", static_nat_entries)
        if static_port_forward_entries is not None:
            pulumi.set(__self__, "static_port_forward_entries", static_port_forward_entries)
        if static_sgt is not None:
            pulumi.set(__self__, "static_sgt", static_sgt)
        if static_sgt_trusted is not None:
            pulumi.set(__self__, "static_sgt_trusted", static_sgt_trusted)
        if static_sgt_variable is not None:
            pulumi.set(__self__, "static_sgt_variable", static_sgt_variable)
        if tcp_mss_adjust is not None:
            pulumi.set(__self__, "tcp_mss_adjust", tcp_mss_adjust)
        if tcp_mss_adjust_variable is not None:
            pulumi.set(__self__, "tcp_mss_adjust_variable", tcp_mss_adjust_variable)
        if tcp_timeout is not None:
            pulumi.set(__self__, "tcp_timeout", tcp_timeout)
        if tcp_timeout_variable is not None:
            pulumi.set(__self__, "tcp_timeout_variable", tcp_timeout_variable)
        if tloc_extension is not None:
            pulumi.set(__self__, "tloc_extension", tloc_extension)
        if tloc_extension_variable is not None:
            pulumi.set(__self__, "tloc_extension_variable", tloc_extension_variable)
        if tracker_variable is not None:
            pulumi.set(__self__, "tracker_variable", tracker_variable)
        if trackers is not None:
            pulumi.set(__self__, "trackers", trackers)
        if tunnel_bandwidth is not None:
            pulumi.set(__self__, "tunnel_bandwidth", tunnel_bandwidth)
        if tunnel_bandwidth_variable is not None:
            pulumi.set(__self__, "tunnel_bandwidth_variable", tunnel_bandwidth_variable)
        if tunnel_interface_allow_all is not None:
            pulumi.set(__self__, "tunnel_interface_allow_all", tunnel_interface_allow_all)
        if tunnel_interface_allow_all_variable is not None:
            pulumi.set(__self__, "tunnel_interface_allow_all_variable", tunnel_interface_allow_all_variable)
        if tunnel_interface_allow_bgp is not None:
            pulumi.set(__self__, "tunnel_interface_allow_bgp", tunnel_interface_allow_bgp)
        if tunnel_interface_allow_bgp_variable is not None:
            pulumi.set(__self__, "tunnel_interface_allow_bgp_variable", tunnel_interface_allow_bgp_variable)
        if tunnel_interface_allow_dhcp is not None:
            pulumi.set(__self__, "tunnel_interface_allow_dhcp", tunnel_interface_allow_dhcp)
        if tunnel_interface_allow_dhcp_variable is not None:
            pulumi.set(__self__, "tunnel_interface_allow_dhcp_variable", tunnel_interface_allow_dhcp_variable)
        if tunnel_interface_allow_dns is not None:
            pulumi.set(__self__, "tunnel_interface_allow_dns", tunnel_interface_allow_dns)
        if tunnel_interface_allow_dns_variable is not None:
            pulumi.set(__self__, "tunnel_interface_allow_dns_variable", tunnel_interface_allow_dns_variable)
        if tunnel_interface_allow_https is not None:
            pulumi.set(__self__, "tunnel_interface_allow_https", tunnel_interface_allow_https)
        if tunnel_interface_allow_https_variable is not None:
            pulumi.set(__self__, "tunnel_interface_allow_https_variable", tunnel_interface_allow_https_variable)
        if tunnel_interface_allow_icmp is not None:
            pulumi.set(__self__, "tunnel_interface_allow_icmp", tunnel_interface_allow_icmp)
        if tunnel_interface_allow_icmp_variable is not None:
            pulumi.set(__self__, "tunnel_interface_allow_icmp_variable", tunnel_interface_allow_icmp_variable)
        if tunnel_interface_allow_netconf is not None:
            pulumi.set(__self__, "tunnel_interface_allow_netconf", tunnel_interface_allow_netconf)
        if tunnel_interface_allow_netconf_variable is not None:
            pulumi.set(__self__, "tunnel_interface_allow_netconf_variable", tunnel_interface_allow_netconf_variable)
        if tunnel_interface_allow_ntp is not None:
            pulumi.set(__self__, "tunnel_interface_allow_ntp", tunnel_interface_allow_ntp)
        if tunnel_interface_allow_ntp_variable is not None:
            pulumi.set(__self__, "tunnel_interface_allow_ntp_variable", tunnel_interface_allow_ntp_variable)
        if tunnel_interface_allow_ospf is not None:
            pulumi.set(__self__, "tunnel_interface_allow_ospf", tunnel_interface_allow_ospf)
        if tunnel_interface_allow_ospf_variable is not None:
            pulumi.set(__self__, "tunnel_interface_allow_ospf_variable", tunnel_interface_allow_ospf_variable)
        if tunnel_interface_allow_snmp is not None:
            pulumi.set(__self__, "tunnel_interface_allow_snmp", tunnel_interface_allow_snmp)
        if tunnel_interface_allow_snmp_variable is not None:
            pulumi.set(__self__, "tunnel_interface_allow_snmp_variable", tunnel_interface_allow_snmp_variable)
        if tunnel_interface_allow_ssh is not None:
            pulumi.set(__self__, "tunnel_interface_allow_ssh", tunnel_interface_allow_ssh)
        if tunnel_interface_allow_ssh_variable is not None:
            pulumi.set(__self__, "tunnel_interface_allow_ssh_variable", tunnel_interface_allow_ssh_variable)
        if tunnel_interface_allow_stun is not None:
            pulumi.set(__self__, "tunnel_interface_allow_stun", tunnel_interface_allow_stun)
        if tunnel_interface_allow_stun_variable is not None:
            pulumi.set(__self__, "tunnel_interface_allow_stun_variable", tunnel_interface_allow_stun_variable)
        if tunnel_interface_bind_loopback_tunnel is not None:
            pulumi.set(__self__, "tunnel_interface_bind_loopback_tunnel", tunnel_interface_bind_loopback_tunnel)
        if tunnel_interface_bind_loopback_tunnel_variable is not None:
            pulumi.set(__self__, "tunnel_interface_bind_loopback_tunnel_variable", tunnel_interface_bind_loopback_tunnel_variable)
        if tunnel_interface_border is not None:
            pulumi.set(__self__, "tunnel_interface_border", tunnel_interface_border)
        if tunnel_interface_border_variable is not None:
            pulumi.set(__self__, "tunnel_interface_border_variable", tunnel_interface_border_variable)
        if tunnel_interface_carrier is not None:
            pulumi.set(__self__, "tunnel_interface_carrier", tunnel_interface_carrier)
        if tunnel_interface_carrier_variable is not None:
            pulumi.set(__self__, "tunnel_interface_carrier_variable", tunnel_interface_carrier_variable)
        if tunnel_interface_clear_dont_fragment is not None:
            pulumi.set(__self__, "tunnel_interface_clear_dont_fragment", tunnel_interface_clear_dont_fragment)
        if tunnel_interface_clear_dont_fragment_variable is not None:
            pulumi.set(__self__, "tunnel_interface_clear_dont_fragment_variable", tunnel_interface_clear_dont_fragment_variable)
        if tunnel_interface_color is not None:
            pulumi.set(__self__, "tunnel_interface_color", tunnel_interface_color)
        if tunnel_interface_color_restrict is not None:
            pulumi.set(__self__, "tunnel_interface_color_restrict", tunnel_interface_color_restrict)
        if tunnel_interface_color_restrict_variable is not None:
            pulumi.set(__self__, "tunnel_interface_color_restrict_variable", tunnel_interface_color_restrict_variable)
        if tunnel_interface_color_variable is not None:
            pulumi.set(__self__, "tunnel_interface_color_variable", tunnel_interface_color_variable)
        if tunnel_interface_control_connections is not None:
            pulumi.set(__self__, "tunnel_interface_control_connections", tunnel_interface_control_connections)
        if tunnel_interface_control_connections_variable is not None:
            pulumi.set(__self__, "tunnel_interface_control_connections_variable", tunnel_interface_control_connections_variable)
        if tunnel_interface_encapsulations is not None:
            pulumi.set(__self__, "tunnel_interface_encapsulations", tunnel_interface_encapsulations)
        if tunnel_interface_exclude_controller_group_list_variable is not None:
            pulumi.set(__self__, "tunnel_interface_exclude_controller_group_list_variable", tunnel_interface_exclude_controller_group_list_variable)
        if tunnel_interface_exclude_controller_group_lists is not None:
            pulumi.set(__self__, "tunnel_interface_exclude_controller_group_lists", tunnel_interface_exclude_controller_group_lists)
        if tunnel_interface_gre_tunnel_destination_ip is not None:
            pulumi.set(__self__, "tunnel_interface_gre_tunnel_destination_ip", tunnel_interface_gre_tunnel_destination_ip)
        if tunnel_interface_gre_tunnel_destination_ip_variable is not None:
            pulumi.set(__self__, "tunnel_interface_gre_tunnel_destination_ip_variable", tunnel_interface_gre_tunnel_destination_ip_variable)
        if tunnel_interface_groups is not None:
            pulumi.set(__self__, "tunnel_interface_groups", tunnel_interface_groups)
        if tunnel_interface_groups_variable is not None:
            pulumi.set(__self__, "tunnel_interface_groups_variable", tunnel_interface_groups_variable)
        if tunnel_interface_hello_interval is not None:
            pulumi.set(__self__, "tunnel_interface_hello_interval", tunnel_interface_hello_interval)
        if tunnel_interface_hello_interval_variable is not None:
            pulumi.set(__self__, "tunnel_interface_hello_interval_variable", tunnel_interface_hello_interval_variable)
        if tunnel_interface_hello_tolerance is not None:
            pulumi.set(__self__, "tunnel_interface_hello_tolerance", tunnel_interface_hello_tolerance)
        if tunnel_interface_hello_tolerance_variable is not None:
            pulumi.set(__self__, "tunnel_interface_hello_tolerance_variable", tunnel_interface_hello_tolerance_variable)
        if tunnel_interface_last_resort_circuit is not None:
            pulumi.set(__self__, "tunnel_interface_last_resort_circuit", tunnel_interface_last_resort_circuit)
        if tunnel_interface_last_resort_circuit_variable is not None:
            pulumi.set(__self__, "tunnel_interface_last_resort_circuit_variable", tunnel_interface_last_resort_circuit_variable)
        if tunnel_interface_low_bandwidth_link is not None:
            pulumi.set(__self__, "tunnel_interface_low_bandwidth_link", tunnel_interface_low_bandwidth_link)
        if tunnel_interface_low_bandwidth_link_variable is not None:
            pulumi.set(__self__, "tunnel_interface_low_bandwidth_link_variable", tunnel_interface_low_bandwidth_link_variable)
        if tunnel_interface_max_control_connections is not None:
            pulumi.set(__self__, "tunnel_interface_max_control_connections", tunnel_interface_max_control_connections)
        if tunnel_interface_max_control_connections_variable is not None:
            pulumi.set(__self__, "tunnel_interface_max_control_connections_variable", tunnel_interface_max_control_connections_variable)
        if tunnel_interface_nat_refresh_interval is not None:
            pulumi.set(__self__, "tunnel_interface_nat_refresh_interval", tunnel_interface_nat_refresh_interval)
        if tunnel_interface_nat_refresh_interval_variable is not None:
            pulumi.set(__self__, "tunnel_interface_nat_refresh_interval_variable", tunnel_interface_nat_refresh_interval_variable)
        if tunnel_interface_network_broadcast is not None:
            pulumi.set(__self__, "tunnel_interface_network_broadcast", tunnel_interface_network_broadcast)
        if tunnel_interface_network_broadcast_variable is not None:
            pulumi.set(__self__, "tunnel_interface_network_broadcast_variable", tunnel_interface_network_broadcast_variable)
        if tunnel_interface_port_hop is not None:
            pulumi.set(__self__, "tunnel_interface_port_hop", tunnel_interface_port_hop)
        if tunnel_interface_port_hop_variable is not None:
            pulumi.set(__self__, "tunnel_interface_port_hop_variable", tunnel_interface_port_hop_variable)
        if tunnel_interface_propagate_sgt is not None:
            pulumi.set(__self__, "tunnel_interface_propagate_sgt", tunnel_interface_propagate_sgt)
        if tunnel_interface_propagate_sgt_variable is not None:
            pulumi.set(__self__, "tunnel_interface_propagate_sgt_variable", tunnel_interface_propagate_sgt_variable)
        if tunnel_interface_tunnel_tcp_mss is not None:
            pulumi.set(__self__, "tunnel_interface_tunnel_tcp_mss", tunnel_interface_tunnel_tcp_mss)
        if tunnel_interface_tunnel_tcp_mss_variable is not None:
            pulumi.set(__self__, "tunnel_interface_tunnel_tcp_mss_variable", tunnel_interface_tunnel_tcp_mss_variable)
        if tunnel_interface_vbond_as_stun_server is not None:
            pulumi.set(__self__, "tunnel_interface_vbond_as_stun_server", tunnel_interface_vbond_as_stun_server)
        if tunnel_interface_vbond_as_stun_server_variable is not None:
            pulumi.set(__self__, "tunnel_interface_vbond_as_stun_server_variable", tunnel_interface_vbond_as_stun_server_variable)
        if tunnel_interface_vmanage_connection_preference is not None:
            pulumi.set(__self__, "tunnel_interface_vmanage_connection_preference", tunnel_interface_vmanage_connection_preference)
        if tunnel_interface_vmanage_connection_preference_variable is not None:
            pulumi.set(__self__, "tunnel_interface_vmanage_connection_preference_variable", tunnel_interface_vmanage_connection_preference_variable)
        if tunnel_qos_mode is not None:
            pulumi.set(__self__, "tunnel_qos_mode", tunnel_qos_mode)
        if tunnel_qos_mode_variable is not None:
            pulumi.set(__self__, "tunnel_qos_mode_variable", tunnel_qos_mode_variable)
        if udp_timeout is not None:
            pulumi.set(__self__, "udp_timeout", udp_timeout)
        if udp_timeout_variable is not None:
            pulumi.set(__self__, "udp_timeout_variable", udp_timeout_variable)

    @_builtins.property
    @pulumi.getter
    def description(self) -> pulumi.Input[_builtins.str]:
        """
        The description of the feature template
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "description", value)

    @_builtins.property
    @pulumi.getter(name="deviceTypes")
    def device_types(self) -> pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]:
        """
        List of supported device types
          - Choices: `vedge-C8000V`, `vedge-C8300-1N1S-4T2X`, `vedge-C8300-1N1S-6T`, `vedge-C8300-2N2S-6T`, `vedge-C8300-2N2S-4T2X`, `vedge-C8500-12X4QC`, `vedge-C8500-12X`, `vedge-C8500-20X6C`, `vedge-C8500L-8S4X`, `vedge-C8200-1N-4T`, `vedge-C8200L-1N-4T`
        """
        return pulumi.get(self, "device_types")

    @device_types.setter
    def device_types(self, value: pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]):
        pulumi.set(self, "device_types", value)

    @_builtins.property
    @pulumi.getter(name="accessLists")
    def access_lists(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['CiscoVpnInterfaceFeatureTemplateAccessListArgs']]]]:
        """
        Apply ACL
        """
        return pulumi.get(self, "access_lists")

    @access_lists.setter
    def access_lists(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['CiscoVpnInterfaceFeatureTemplateAccessListArgs']]]]):
        pulumi.set(self, "access_lists", value)

    @_builtins.property
    @pulumi.getter
    def address(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Assign IPv4 address
        """
        return pulumi.get(self, "address")

    @address.setter
    def address(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "address", value)

    @_builtins.property
    @pulumi.getter(name="addressVariable")
    def address_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "address_variable")

    @address_variable.setter
    def address_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "address_variable", value)

    @_builtins.property
    @pulumi.getter(name="arpTimeout")
    def arp_timeout(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        Timeout value for dynamically learned ARP entries, <0..2678400> seconds
          - Range: `0`-`2147483`
          - Default value: `1200`
        """
        return pulumi.get(self, "arp_timeout")

    @arp_timeout.setter
    def arp_timeout(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "arp_timeout", value)

    @_builtins.property
    @pulumi.getter(name="arpTimeoutVariable")
    def arp_timeout_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "arp_timeout_variable")

    @arp_timeout_variable.setter
    def arp_timeout_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "arp_timeout_variable", value)

    @_builtins.property
    @pulumi.getter(name="autoBandwidthDetect")
    def auto_bandwidth_detect(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Interface auto detect bandwidth
          - Default value: `false`
        """
        return pulumi.get(self, "auto_bandwidth_detect")

    @auto_bandwidth_detect.setter
    def auto_bandwidth_detect(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "auto_bandwidth_detect", value)

    @_builtins.property
    @pulumi.getter(name="autoBandwidthDetectVariable")
    def auto_bandwidth_detect_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "auto_bandwidth_detect_variable")

    @auto_bandwidth_detect_variable.setter
    def auto_bandwidth_detect_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "auto_bandwidth_detect_variable", value)

    @_builtins.property
    @pulumi.getter
    def autonegotiate(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Link autonegotiation
        """
        return pulumi.get(self, "autonegotiate")

    @autonegotiate.setter
    def autonegotiate(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "autonegotiate", value)

    @_builtins.property
    @pulumi.getter(name="autonegotiateVariable")
    def autonegotiate_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "autonegotiate_variable")

    @autonegotiate_variable.setter
    def autonegotiate_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "autonegotiate_variable", value)

    @_builtins.property
    @pulumi.getter(name="bandwidthDownstream")
    def bandwidth_downstream(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        Interface downstream bandwidth capacity, in kbps
          - Range: `1`-`2147483647`
        """
        return pulumi.get(self, "bandwidth_downstream")

    @bandwidth_downstream.setter
    def bandwidth_downstream(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "bandwidth_downstream", value)

    @_builtins.property
    @pulumi.getter(name="bandwidthDownstreamVariable")
    def bandwidth_downstream_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "bandwidth_downstream_variable")

    @bandwidth_downstream_variable.setter
    def bandwidth_downstream_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "bandwidth_downstream_variable", value)

    @_builtins.property
    @pulumi.getter(name="bandwidthUpstream")
    def bandwidth_upstream(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        Interface upstream bandwidth capacity, in kbps
          - Range: `1`-`2147483647`
        """
        return pulumi.get(self, "bandwidth_upstream")

    @bandwidth_upstream.setter
    def bandwidth_upstream(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "bandwidth_upstream", value)

    @_builtins.property
    @pulumi.getter(name="bandwidthUpstreamVariable")
    def bandwidth_upstream_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "bandwidth_upstream_variable")

    @bandwidth_upstream_variable.setter
    def bandwidth_upstream_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "bandwidth_upstream_variable", value)

    @_builtins.property
    @pulumi.getter(name="blockNonSourceIp")
    def block_non_source_ip(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Block packets originating from IP address that is not from this source
          - Default value: `false`
        """
        return pulumi.get(self, "block_non_source_ip")

    @block_non_source_ip.setter
    def block_non_source_ip(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "block_non_source_ip", value)

    @_builtins.property
    @pulumi.getter(name="blockNonSourceIpVariable")
    def block_non_source_ip_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "block_non_source_ip_variable")

    @block_non_source_ip_variable.setter
    def block_non_source_ip_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "block_non_source_ip_variable", value)

    @_builtins.property
    @pulumi.getter(name="coreRegion")
    def core_region(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Enable core region
          - Choices: `core`, `core-shared`
          - Default value: `core`
        """
        return pulumi.get(self, "core_region")

    @core_region.setter
    def core_region(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "core_region", value)

    @_builtins.property
    @pulumi.getter(name="coreRegionVariable")
    def core_region_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "core_region_variable")

    @core_region_variable.setter
    def core_region_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "core_region_variable", value)

    @_builtins.property
    @pulumi.getter
    def dhcp(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Enable DHCP
          - Default value: `false`
        """
        return pulumi.get(self, "dhcp")

    @dhcp.setter
    def dhcp(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "dhcp", value)

    @_builtins.property
    @pulumi.getter(name="dhcpDistance")
    def dhcp_distance(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        Set administrative distance for DHCP default route
          - Range: `1`-`65536`
          - Default value: `1`
        """
        return pulumi.get(self, "dhcp_distance")

    @dhcp_distance.setter
    def dhcp_distance(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "dhcp_distance", value)

    @_builtins.property
    @pulumi.getter(name="dhcpDistanceVariable")
    def dhcp_distance_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "dhcp_distance_variable")

    @dhcp_distance_variable.setter
    def dhcp_distance_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "dhcp_distance_variable", value)

    @_builtins.property
    @pulumi.getter(name="dhcpVariable")
    def dhcp_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "dhcp_variable")

    @dhcp_variable.setter
    def dhcp_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "dhcp_variable", value)

    @_builtins.property
    @pulumi.getter
    def dhcpv6(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Enable DHCPv6
          - Default value: `false`
        """
        return pulumi.get(self, "dhcpv6")

    @dhcpv6.setter
    def dhcpv6(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "dhcpv6", value)

    @_builtins.property
    @pulumi.getter(name="dhcpv6Variable")
    def dhcpv6_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "dhcpv6_variable")

    @dhcpv6_variable.setter
    def dhcpv6_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "dhcpv6_variable", value)

    @_builtins.property
    @pulumi.getter
    def duplex(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Duplex mode
          - Choices: `full`, `half`, `auto`
        """
        return pulumi.get(self, "duplex")

    @duplex.setter
    def duplex(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "duplex", value)

    @_builtins.property
    @pulumi.getter(name="duplexVariable")
    def duplex_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "duplex_variable")

    @duplex_variable.setter
    def duplex_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "duplex_variable", value)

    @_builtins.property
    @pulumi.getter(name="enableCoreRegion")
    def enable_core_region(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Enable core region
          - Default value: `false`
        """
        return pulumi.get(self, "enable_core_region")

    @enable_core_region.setter
    def enable_core_region(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "enable_core_region", value)

    @_builtins.property
    @pulumi.getter(name="enableSgt")
    def enable_sgt(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Enables the interface for CTS SGT authorization and forwarding.
          - Default value: `false`
        """
        return pulumi.get(self, "enable_sgt")

    @enable_sgt.setter
    def enable_sgt(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "enable_sgt", value)

    @_builtins.property
    @pulumi.getter(name="greTunnelSourceIp")
    def gre_tunnel_source_ip(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Extend remote TLOC over a GRE tunnel to a local WAN interface
        """
        return pulumi.get(self, "gre_tunnel_source_ip")

    @gre_tunnel_source_ip.setter
    def gre_tunnel_source_ip(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "gre_tunnel_source_ip", value)

    @_builtins.property
    @pulumi.getter(name="greTunnelSourceIpVariable")
    def gre_tunnel_source_ip_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "gre_tunnel_source_ip_variable")

    @gre_tunnel_source_ip_variable.setter
    def gre_tunnel_source_ip_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "gre_tunnel_source_ip_variable", value)

    @_builtins.property
    @pulumi.getter(name="greTunnelXconnect")
    def gre_tunnel_xconnect(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Extend remote TLOC over a GRE tunnel to a local WAN interface
        """
        return pulumi.get(self, "gre_tunnel_xconnect")

    @gre_tunnel_xconnect.setter
    def gre_tunnel_xconnect(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "gre_tunnel_xconnect", value)

    @_builtins.property
    @pulumi.getter(name="greTunnelXconnectVariable")
    def gre_tunnel_xconnect_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "gre_tunnel_xconnect_variable")

    @gre_tunnel_xconnect_variable.setter
    def gre_tunnel_xconnect_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "gre_tunnel_xconnect_variable", value)

    @_builtins.property
    @pulumi.getter(name="icmpRedirectDisable")
    def icmp_redirect_disable(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Set this option to disable the icmp/icmpv6 redirect packets
          - Default value: `true`
        """
        return pulumi.get(self, "icmp_redirect_disable")

    @icmp_redirect_disable.setter
    def icmp_redirect_disable(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "icmp_redirect_disable", value)

    @_builtins.property
    @pulumi.getter(name="icmpRedirectDisableVariable")
    def icmp_redirect_disable_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "icmp_redirect_disable_variable")

    @icmp_redirect_disable_variable.setter
    def icmp_redirect_disable_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "icmp_redirect_disable_variable", value)

    @_builtins.property
    @pulumi.getter(name="interfaceDescription")
    def interface_description(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Interface description
        """
        return pulumi.get(self, "interface_description")

    @interface_description.setter
    def interface_description(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "interface_description", value)

    @_builtins.property
    @pulumi.getter(name="interfaceDescriptionVariable")
    def interface_description_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "interface_description_variable")

    @interface_description_variable.setter
    def interface_description_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "interface_description_variable", value)

    @_builtins.property
    @pulumi.getter(name="interfaceMtu")
    def interface_mtu(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        Interface MTU GigabitEthernet0 <1500..1518>, Other GigabitEthernet <1500..9216> in bytes
          - Range: `1500`-`9216`
          - Default value: `1500`
        """
        return pulumi.get(self, "interface_mtu")

    @interface_mtu.setter
    def interface_mtu(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "interface_mtu", value)

    @_builtins.property
    @pulumi.getter(name="interfaceMtuVariable")
    def interface_mtu_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "interface_mtu_variable")

    @interface_mtu_variable.setter
    def interface_mtu_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "interface_mtu_variable", value)

    @_builtins.property
    @pulumi.getter(name="interfaceName")
    def interface_name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Interface name: ge0/<0-..> or ge0/<0-..>.vlanid or irb<bridgeid:1-63> or loopback<string> or natpool-<1..31> when present
        """
        return pulumi.get(self, "interface_name")

    @interface_name.setter
    def interface_name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "interface_name", value)

    @_builtins.property
    @pulumi.getter(name="interfaceNameVariable")
    def interface_name_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "interface_name_variable")

    @interface_name_variable.setter
    def interface_name_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "interface_name_variable", value)

    @_builtins.property
    @pulumi.getter(name="ipDirectedBroadcast")
    def ip_directed_broadcast(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        IP Directed-Broadcast
          - Default value: `false`
        """
        return pulumi.get(self, "ip_directed_broadcast")

    @ip_directed_broadcast.setter
    def ip_directed_broadcast(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "ip_directed_broadcast", value)

    @_builtins.property
    @pulumi.getter(name="ipDirectedBroadcastVariable")
    def ip_directed_broadcast_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "ip_directed_broadcast_variable")

    @ip_directed_broadcast_variable.setter
    def ip_directed_broadcast_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "ip_directed_broadcast_variable", value)

    @_builtins.property
    @pulumi.getter(name="ipMtu")
    def ip_mtu(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        IP MTU for GigabitEthernet main <576..Interface MTU>, GigabitEthernet subinterface <576..9216>, Other Interfaces <576..2000> in bytes
          - Range: `576`-`9216`
          - Default value: `1500`
        """
        return pulumi.get(self, "ip_mtu")

    @ip_mtu.setter
    def ip_mtu(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "ip_mtu", value)

    @_builtins.property
    @pulumi.getter(name="ipMtuVariable")
    def ip_mtu_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "ip_mtu_variable")

    @ip_mtu_variable.setter
    def ip_mtu_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "ip_mtu_variable", value)

    @_builtins.property
    @pulumi.getter(name="iperfServer")
    def iperf_server(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Iperf server for auto bandwidth detect
        """
        return pulumi.get(self, "iperf_server")

    @iperf_server.setter
    def iperf_server(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "iperf_server", value)

    @_builtins.property
    @pulumi.getter(name="iperfServerVariable")
    def iperf_server_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "iperf_server_variable")

    @iperf_server_variable.setter
    def iperf_server_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "iperf_server_variable", value)

    @_builtins.property
    @pulumi.getter(name="ipv4DhcpHelperVariable")
    def ipv4_dhcp_helper_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "ipv4_dhcp_helper_variable")

    @ipv4_dhcp_helper_variable.setter
    def ipv4_dhcp_helper_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "ipv4_dhcp_helper_variable", value)

    @_builtins.property
    @pulumi.getter(name="ipv4DhcpHelpers")
    def ipv4_dhcp_helpers(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]:
        """
        List of DHCP IPv4 helper addresses
        """
        return pulumi.get(self, "ipv4_dhcp_helpers")

    @ipv4_dhcp_helpers.setter
    def ipv4_dhcp_helpers(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "ipv4_dhcp_helpers", value)

    @_builtins.property
    @pulumi.getter(name="ipv4SecondaryAddresses")
    def ipv4_secondary_addresses(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['CiscoVpnInterfaceFeatureTemplateIpv4SecondaryAddressArgs']]]]:
        """
        Assign secondary IP addresses
        """
        return pulumi.get(self, "ipv4_secondary_addresses")

    @ipv4_secondary_addresses.setter
    def ipv4_secondary_addresses(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['CiscoVpnInterfaceFeatureTemplateIpv4SecondaryAddressArgs']]]]):
        pulumi.set(self, "ipv4_secondary_addresses", value)

    @_builtins.property
    @pulumi.getter(name="ipv4Vrrps")
    def ipv4_vrrps(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['CiscoVpnInterfaceFeatureTemplateIpv4VrrpArgs']]]]:
        """
        Enable VRRP
        """
        return pulumi.get(self, "ipv4_vrrps")

    @ipv4_vrrps.setter
    def ipv4_vrrps(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['CiscoVpnInterfaceFeatureTemplateIpv4VrrpArgs']]]]):
        pulumi.set(self, "ipv4_vrrps", value)

    @_builtins.property
    @pulumi.getter(name="ipv6AccessLists")
    def ipv6_access_lists(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['CiscoVpnInterfaceFeatureTemplateIpv6AccessListArgs']]]]:
        """
        Apply IPv6 access list
        """
        return pulumi.get(self, "ipv6_access_lists")

    @ipv6_access_lists.setter
    def ipv6_access_lists(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['CiscoVpnInterfaceFeatureTemplateIpv6AccessListArgs']]]]):
        pulumi.set(self, "ipv6_access_lists", value)

    @_builtins.property
    @pulumi.getter(name="ipv6Address")
    def ipv6_address(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Assign IPv6 address
        """
        return pulumi.get(self, "ipv6_address")

    @ipv6_address.setter
    def ipv6_address(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "ipv6_address", value)

    @_builtins.property
    @pulumi.getter(name="ipv6AddressVariable")
    def ipv6_address_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "ipv6_address_variable")

    @ipv6_address_variable.setter
    def ipv6_address_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "ipv6_address_variable", value)

    @_builtins.property
    @pulumi.getter(name="ipv6DhcpHelpers")
    def ipv6_dhcp_helpers(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['CiscoVpnInterfaceFeatureTemplateIpv6DhcpHelperArgs']]]]:
        """
        DHCPv6 Helper
        """
        return pulumi.get(self, "ipv6_dhcp_helpers")

    @ipv6_dhcp_helpers.setter
    def ipv6_dhcp_helpers(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['CiscoVpnInterfaceFeatureTemplateIpv6DhcpHelperArgs']]]]):
        pulumi.set(self, "ipv6_dhcp_helpers", value)

    @_builtins.property
    @pulumi.getter(name="ipv6Nat")
    def ipv6_nat(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        NAT64 on this interface
          - Default value: `false`
        """
        return pulumi.get(self, "ipv6_nat")

    @ipv6_nat.setter
    def ipv6_nat(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "ipv6_nat", value)

    @_builtins.property
    @pulumi.getter(name="ipv6NatVariable")
    def ipv6_nat_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "ipv6_nat_variable")

    @ipv6_nat_variable.setter
    def ipv6_nat_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "ipv6_nat_variable", value)

    @_builtins.property
    @pulumi.getter(name="ipv6SecondaryAddresses")
    def ipv6_secondary_addresses(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['CiscoVpnInterfaceFeatureTemplateIpv6SecondaryAddressArgs']]]]:
        """
        Assign secondary IPv6 addresses
        """
        return pulumi.get(self, "ipv6_secondary_addresses")

    @ipv6_secondary_addresses.setter
    def ipv6_secondary_addresses(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['CiscoVpnInterfaceFeatureTemplateIpv6SecondaryAddressArgs']]]]):
        pulumi.set(self, "ipv6_secondary_addresses", value)

    @_builtins.property
    @pulumi.getter(name="ipv6Vrrps")
    def ipv6_vrrps(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['CiscoVpnInterfaceFeatureTemplateIpv6VrrpArgs']]]]:
        """
        Enable VRRP
        """
        return pulumi.get(self, "ipv6_vrrps")

    @ipv6_vrrps.setter
    def ipv6_vrrps(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['CiscoVpnInterfaceFeatureTemplateIpv6VrrpArgs']]]]):
        pulumi.set(self, "ipv6_vrrps", value)

    @_builtins.property
    @pulumi.getter(name="loadInterval")
    def load_interval(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        Interval for interface load calculation
          - Range: `30`-`600`
          - Default value: `30`
        """
        return pulumi.get(self, "load_interval")

    @load_interval.setter
    def load_interval(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "load_interval", value)

    @_builtins.property
    @pulumi.getter(name="loadIntervalVariable")
    def load_interval_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "load_interval_variable")

    @load_interval_variable.setter
    def load_interval_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "load_interval_variable", value)

    @_builtins.property
    @pulumi.getter(name="macAddress")
    def mac_address(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Set MAC-layer address
        """
        return pulumi.get(self, "mac_address")

    @mac_address.setter
    def mac_address(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "mac_address", value)

    @_builtins.property
    @pulumi.getter(name="macAddressVariable")
    def mac_address_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "mac_address_variable")

    @mac_address_variable.setter
    def mac_address_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "mac_address_variable", value)

    @_builtins.property
    @pulumi.getter(name="mediaType")
    def media_type(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Media type
          - Choices: `auto-select`, `rj45`, `sfp`
        """
        return pulumi.get(self, "media_type")

    @media_type.setter
    def media_type(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "media_type", value)

    @_builtins.property
    @pulumi.getter(name="mediaTypeVariable")
    def media_type_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "media_type_variable")

    @media_type_variable.setter
    def media_type_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "media_type_variable", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The name of the feature template
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "name", value)

    @_builtins.property
    @pulumi.getter
    def nat(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Network Address Translation on this interface
          - Default value: `false`
        """
        return pulumi.get(self, "nat")

    @nat.setter
    def nat(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "nat", value)

    @_builtins.property
    @pulumi.getter(name="nat64Interface")
    def nat64_interface(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        NAT64 on this interface
          - Default value: `false`
        """
        return pulumi.get(self, "nat64_interface")

    @nat64_interface.setter
    def nat64_interface(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "nat64_interface", value)

    @_builtins.property
    @pulumi.getter(name="nat66Interface")
    def nat66_interface(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        NAT66 on this interface
          - Default value: `false`
        """
        return pulumi.get(self, "nat66_interface")

    @nat66_interface.setter
    def nat66_interface(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "nat66_interface", value)

    @_builtins.property
    @pulumi.getter(name="natInsideSourceLoopbackInterface")
    def nat_inside_source_loopback_interface(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Configure NAT Inside Loopback Interface
        """
        return pulumi.get(self, "nat_inside_source_loopback_interface")

    @nat_inside_source_loopback_interface.setter
    def nat_inside_source_loopback_interface(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "nat_inside_source_loopback_interface", value)

    @_builtins.property
    @pulumi.getter(name="natInsideSourceLoopbackInterfaceVariable")
    def nat_inside_source_loopback_interface_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "nat_inside_source_loopback_interface_variable")

    @nat_inside_source_loopback_interface_variable.setter
    def nat_inside_source_loopback_interface_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "nat_inside_source_loopback_interface_variable", value)

    @_builtins.property
    @pulumi.getter(name="natOverload")
    def nat_overload(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Enable port translation(PAT)
          - Default value: `true`
        """
        return pulumi.get(self, "nat_overload")

    @nat_overload.setter
    def nat_overload(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "nat_overload", value)

    @_builtins.property
    @pulumi.getter(name="natOverloadVariable")
    def nat_overload_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "nat_overload_variable")

    @nat_overload_variable.setter
    def nat_overload_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "nat_overload_variable", value)

    @_builtins.property
    @pulumi.getter(name="natPoolPrefixLength")
    def nat_pool_prefix_length(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        Ending IP address of NAT Pool Prefix Length
        """
        return pulumi.get(self, "nat_pool_prefix_length")

    @nat_pool_prefix_length.setter
    def nat_pool_prefix_length(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "nat_pool_prefix_length", value)

    @_builtins.property
    @pulumi.getter(name="natPoolPrefixLengthVariable")
    def nat_pool_prefix_length_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "nat_pool_prefix_length_variable")

    @nat_pool_prefix_length_variable.setter
    def nat_pool_prefix_length_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "nat_pool_prefix_length_variable", value)

    @_builtins.property
    @pulumi.getter(name="natPoolRangeEnd")
    def nat_pool_range_end(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Ending IP address of NAT pool range
        """
        return pulumi.get(self, "nat_pool_range_end")

    @nat_pool_range_end.setter
    def nat_pool_range_end(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "nat_pool_range_end", value)

    @_builtins.property
    @pulumi.getter(name="natPoolRangeEndVariable")
    def nat_pool_range_end_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "nat_pool_range_end_variable")

    @nat_pool_range_end_variable.setter
    def nat_pool_range_end_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "nat_pool_range_end_variable", value)

    @_builtins.property
    @pulumi.getter(name="natPoolRangeStart")
    def nat_pool_range_start(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Starting IP address of NAT pool range
        """
        return pulumi.get(self, "nat_pool_range_start")

    @nat_pool_range_start.setter
    def nat_pool_range_start(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "nat_pool_range_start", value)

    @_builtins.property
    @pulumi.getter(name="natPoolRangeStartVariable")
    def nat_pool_range_start_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "nat_pool_range_start_variable")

    @nat_pool_range_start_variable.setter
    def nat_pool_range_start_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "nat_pool_range_start_variable", value)

    @_builtins.property
    @pulumi.getter(name="natType")
    def nat_type(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        NAT type
          - Choices: `interface`, `pool`, `loopback`
          - Default value: `interface`
        """
        return pulumi.get(self, "nat_type")

    @nat_type.setter
    def nat_type(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "nat_type", value)

    @_builtins.property
    @pulumi.getter(name="natTypeVariable")
    def nat_type_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "nat_type_variable")

    @nat_type_variable.setter
    def nat_type_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "nat_type_variable", value)

    @_builtins.property
    @pulumi.getter
    def poe(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Configure interface as Power-over-Ethernet source
          - Default value: `false`
        """
        return pulumi.get(self, "poe")

    @poe.setter
    def poe(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "poe", value)

    @_builtins.property
    @pulumi.getter(name="poeVariable")
    def poe_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "poe_variable")

    @poe_variable.setter
    def poe_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "poe_variable", value)

    @_builtins.property
    @pulumi.getter(name="propagateSgt")
    def propagate_sgt(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Enable/Disable CTS SGT propagation on an interface.
          - Default value: `true`
        """
        return pulumi.get(self, "propagate_sgt")

    @propagate_sgt.setter
    def propagate_sgt(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "propagate_sgt", value)

    @_builtins.property
    @pulumi.getter(name="qosAdaptiveBandwidthDownstream")
    def qos_adaptive_bandwidth_downstream(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        Adaptive QoS default downstream bandwidth
          - Range: `8`-`100000000`
        """
        return pulumi.get(self, "qos_adaptive_bandwidth_downstream")

    @qos_adaptive_bandwidth_downstream.setter
    def qos_adaptive_bandwidth_downstream(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "qos_adaptive_bandwidth_downstream", value)

    @_builtins.property
    @pulumi.getter(name="qosAdaptiveBandwidthDownstreamVariable")
    def qos_adaptive_bandwidth_downstream_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "qos_adaptive_bandwidth_downstream_variable")

    @qos_adaptive_bandwidth_downstream_variable.setter
    def qos_adaptive_bandwidth_downstream_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "qos_adaptive_bandwidth_downstream_variable", value)

    @_builtins.property
    @pulumi.getter(name="qosAdaptiveBandwidthUpstream")
    def qos_adaptive_bandwidth_upstream(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        Adaptive QoS default upstream bandwidth
          - Range: `8`-`100000000`
        """
        return pulumi.get(self, "qos_adaptive_bandwidth_upstream")

    @qos_adaptive_bandwidth_upstream.setter
    def qos_adaptive_bandwidth_upstream(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "qos_adaptive_bandwidth_upstream", value)

    @_builtins.property
    @pulumi.getter(name="qosAdaptiveBandwidthUpstreamVariable")
    def qos_adaptive_bandwidth_upstream_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "qos_adaptive_bandwidth_upstream_variable")

    @qos_adaptive_bandwidth_upstream_variable.setter
    def qos_adaptive_bandwidth_upstream_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "qos_adaptive_bandwidth_upstream_variable", value)

    @_builtins.property
    @pulumi.getter(name="qosAdaptiveMaxDownstream")
    def qos_adaptive_max_downstream(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        Downstream max bandwidth limit
          - Range: `8`-`100000000`
        """
        return pulumi.get(self, "qos_adaptive_max_downstream")

    @qos_adaptive_max_downstream.setter
    def qos_adaptive_max_downstream(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "qos_adaptive_max_downstream", value)

    @_builtins.property
    @pulumi.getter(name="qosAdaptiveMaxDownstreamVariable")
    def qos_adaptive_max_downstream_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "qos_adaptive_max_downstream_variable")

    @qos_adaptive_max_downstream_variable.setter
    def qos_adaptive_max_downstream_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "qos_adaptive_max_downstream_variable", value)

    @_builtins.property
    @pulumi.getter(name="qosAdaptiveMaxUpstream")
    def qos_adaptive_max_upstream(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        Upstream max bandwidth limit
          - Range: `8`-`100000000`
        """
        return pulumi.get(self, "qos_adaptive_max_upstream")

    @qos_adaptive_max_upstream.setter
    def qos_adaptive_max_upstream(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "qos_adaptive_max_upstream", value)

    @_builtins.property
    @pulumi.getter(name="qosAdaptiveMaxUpstreamVariable")
    def qos_adaptive_max_upstream_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "qos_adaptive_max_upstream_variable")

    @qos_adaptive_max_upstream_variable.setter
    def qos_adaptive_max_upstream_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "qos_adaptive_max_upstream_variable", value)

    @_builtins.property
    @pulumi.getter(name="qosAdaptiveMinDownstream")
    def qos_adaptive_min_downstream(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        Downstream min bandwidth limit
          - Range: `8`-`100000000`
        """
        return pulumi.get(self, "qos_adaptive_min_downstream")

    @qos_adaptive_min_downstream.setter
    def qos_adaptive_min_downstream(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "qos_adaptive_min_downstream", value)

    @_builtins.property
    @pulumi.getter(name="qosAdaptiveMinDownstreamVariable")
    def qos_adaptive_min_downstream_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "qos_adaptive_min_downstream_variable")

    @qos_adaptive_min_downstream_variable.setter
    def qos_adaptive_min_downstream_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "qos_adaptive_min_downstream_variable", value)

    @_builtins.property
    @pulumi.getter(name="qosAdaptiveMinUpstream")
    def qos_adaptive_min_upstream(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        Upstream min bandwidth limit
          - Range: `8`-`100000000`
        """
        return pulumi.get(self, "qos_adaptive_min_upstream")

    @qos_adaptive_min_upstream.setter
    def qos_adaptive_min_upstream(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "qos_adaptive_min_upstream", value)

    @_builtins.property
    @pulumi.getter(name="qosAdaptiveMinUpstreamVariable")
    def qos_adaptive_min_upstream_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "qos_adaptive_min_upstream_variable")

    @qos_adaptive_min_upstream_variable.setter
    def qos_adaptive_min_upstream_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "qos_adaptive_min_upstream_variable", value)

    @_builtins.property
    @pulumi.getter(name="qosAdaptivePeriod")
    def qos_adaptive_period(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        Periodic timer for adaptive QoS in minutes
          - Range: `1`-`720`
          - Default value: `15`
        """
        return pulumi.get(self, "qos_adaptive_period")

    @qos_adaptive_period.setter
    def qos_adaptive_period(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "qos_adaptive_period", value)

    @_builtins.property
    @pulumi.getter(name="qosAdaptivePeriodVariable")
    def qos_adaptive_period_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "qos_adaptive_period_variable")

    @qos_adaptive_period_variable.setter
    def qos_adaptive_period_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "qos_adaptive_period_variable", value)

    @_builtins.property
    @pulumi.getter(name="qosMap")
    def qos_map(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Name of QoS map
        """
        return pulumi.get(self, "qos_map")

    @qos_map.setter
    def qos_map(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "qos_map", value)

    @_builtins.property
    @pulumi.getter(name="qosMapVariable")
    def qos_map_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "qos_map_variable")

    @qos_map_variable.setter
    def qos_map_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "qos_map_variable", value)

    @_builtins.property
    @pulumi.getter(name="qosMapVpn")
    def qos_map_vpn(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Name of VPN QoS map
        """
        return pulumi.get(self, "qos_map_vpn")

    @qos_map_vpn.setter
    def qos_map_vpn(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "qos_map_vpn", value)

    @_builtins.property
    @pulumi.getter(name="qosMapVpnVariable")
    def qos_map_vpn_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "qos_map_vpn_variable")

    @qos_map_vpn_variable.setter
    def qos_map_vpn_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "qos_map_vpn_variable", value)

    @_builtins.property
    @pulumi.getter(name="rewriteRuleName")
    def rewrite_rule_name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Name of rewrite rule
        """
        return pulumi.get(self, "rewrite_rule_name")

    @rewrite_rule_name.setter
    def rewrite_rule_name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "rewrite_rule_name", value)

    @_builtins.property
    @pulumi.getter(name="rewriteRuleNameVariable")
    def rewrite_rule_name_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "rewrite_rule_name_variable")

    @rewrite_rule_name_variable.setter
    def rewrite_rule_name_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "rewrite_rule_name_variable", value)

    @_builtins.property
    @pulumi.getter(name="secondaryRegion")
    def secondary_region(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Enable secondary region
          - Choices: `off`, `secondary-only`, `secondary-shared`
          - Default value: `off`
        """
        return pulumi.get(self, "secondary_region")

    @secondary_region.setter
    def secondary_region(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "secondary_region", value)

    @_builtins.property
    @pulumi.getter(name="secondaryRegionVariable")
    def secondary_region_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "secondary_region_variable")

    @secondary_region_variable.setter
    def secondary_region_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "secondary_region_variable", value)

    @_builtins.property
    @pulumi.getter(name="sgtEnforcement")
    def sgt_enforcement(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Enables the interface for CTS SGT authorization and forwarding.
          - Default value: `false`
        """
        return pulumi.get(self, "sgt_enforcement")

    @sgt_enforcement.setter
    def sgt_enforcement(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "sgt_enforcement", value)

    @_builtins.property
    @pulumi.getter(name="sgtEnforcementSgt")
    def sgt_enforcement_sgt(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        SGT value between 2 and 65519.
          - Range: `2`-`65519`
        """
        return pulumi.get(self, "sgt_enforcement_sgt")

    @sgt_enforcement_sgt.setter
    def sgt_enforcement_sgt(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "sgt_enforcement_sgt", value)

    @_builtins.property
    @pulumi.getter(name="sgtEnforcementSgtVariable")
    def sgt_enforcement_sgt_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "sgt_enforcement_sgt_variable")

    @sgt_enforcement_sgt_variable.setter
    def sgt_enforcement_sgt_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "sgt_enforcement_sgt_variable", value)

    @_builtins.property
    @pulumi.getter(name="shapingRate")
    def shaping_rate(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        1ge  interfaces: [0..1000000]kbps; 10ge interfaces: [0..10000000]kbps
          - Range: `8`-`100000000`
        """
        return pulumi.get(self, "shaping_rate")

    @shaping_rate.setter
    def shaping_rate(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "shaping_rate", value)

    @_builtins.property
    @pulumi.getter(name="shapingRateVariable")
    def shaping_rate_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "shaping_rate_variable")

    @shaping_rate_variable.setter
    def shaping_rate_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "shaping_rate_variable", value)

    @_builtins.property
    @pulumi.getter
    def shutdown(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Administrative state
          - Default value: `true`
        """
        return pulumi.get(self, "shutdown")

    @shutdown.setter
    def shutdown(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "shutdown", value)

    @_builtins.property
    @pulumi.getter(name="shutdownVariable")
    def shutdown_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "shutdown_variable")

    @shutdown_variable.setter
    def shutdown_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "shutdown_variable", value)

    @_builtins.property
    @pulumi.getter
    def speed(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Set interface speed
          - Choices: `10`, `100`, `1000`, `2500`, `10000`
        """
        return pulumi.get(self, "speed")

    @speed.setter
    def speed(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "speed", value)

    @_builtins.property
    @pulumi.getter(name="speedVariable")
    def speed_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "speed_variable")

    @speed_variable.setter
    def speed_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "speed_variable", value)

    @_builtins.property
    @pulumi.getter(name="staticArps")
    def static_arps(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['CiscoVpnInterfaceFeatureTemplateStaticArpArgs']]]]:
        """
        Configure static ARP entries
        """
        return pulumi.get(self, "static_arps")

    @static_arps.setter
    def static_arps(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['CiscoVpnInterfaceFeatureTemplateStaticArpArgs']]]]):
        pulumi.set(self, "static_arps", value)

    @_builtins.property
    @pulumi.getter(name="staticNat66Entries")
    def static_nat66_entries(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['CiscoVpnInterfaceFeatureTemplateStaticNat66EntryArgs']]]]:
        """
        static NAT
        """
        return pulumi.get(self, "static_nat66_entries")

    @static_nat66_entries.setter
    def static_nat66_entries(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['CiscoVpnInterfaceFeatureTemplateStaticNat66EntryArgs']]]]):
        pulumi.set(self, "static_nat66_entries", value)

    @_builtins.property
    @pulumi.getter(name="staticNatEntries")
    def static_nat_entries(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['CiscoVpnInterfaceFeatureTemplateStaticNatEntryArgs']]]]:
        """
        Configure static NAT entries
        """
        return pulumi.get(self, "static_nat_entries")

    @static_nat_entries.setter
    def static_nat_entries(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['CiscoVpnInterfaceFeatureTemplateStaticNatEntryArgs']]]]):
        pulumi.set(self, "static_nat_entries", value)

    @_builtins.property
    @pulumi.getter(name="staticPortForwardEntries")
    def static_port_forward_entries(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['CiscoVpnInterfaceFeatureTemplateStaticPortForwardEntryArgs']]]]:
        """
        Configure Port Forward entries
        """
        return pulumi.get(self, "static_port_forward_entries")

    @static_port_forward_entries.setter
    def static_port_forward_entries(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['CiscoVpnInterfaceFeatureTemplateStaticPortForwardEntryArgs']]]]):
        pulumi.set(self, "static_port_forward_entries", value)

    @_builtins.property
    @pulumi.getter(name="staticSgt")
    def static_sgt(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        SGT value between 2 and 65519.
          - Range: `2`-`65519`
        """
        return pulumi.get(self, "static_sgt")

    @static_sgt.setter
    def static_sgt(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "static_sgt", value)

    @_builtins.property
    @pulumi.getter(name="staticSgtTrusted")
    def static_sgt_trusted(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Indicates that the interface is trustworthy for CTS.
          - Default value: `false`
        """
        return pulumi.get(self, "static_sgt_trusted")

    @static_sgt_trusted.setter
    def static_sgt_trusted(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "static_sgt_trusted", value)

    @_builtins.property
    @pulumi.getter(name="staticSgtVariable")
    def static_sgt_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "static_sgt_variable")

    @static_sgt_variable.setter
    def static_sgt_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "static_sgt_variable", value)

    @_builtins.property
    @pulumi.getter(name="tcpMssAdjust")
    def tcp_mss_adjust(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        TCP MSS on SYN packets, in bytes
          - Range: `500`-`1460`
        """
        return pulumi.get(self, "tcp_mss_adjust")

    @tcp_mss_adjust.setter
    def tcp_mss_adjust(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "tcp_mss_adjust", value)

    @_builtins.property
    @pulumi.getter(name="tcpMssAdjustVariable")
    def tcp_mss_adjust_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "tcp_mss_adjust_variable")

    @tcp_mss_adjust_variable.setter
    def tcp_mss_adjust_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "tcp_mss_adjust_variable", value)

    @_builtins.property
    @pulumi.getter(name="tcpTimeout")
    def tcp_timeout(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        Set NAT TCP session timeout, in minutes
          - Range: `1`-`8947`
          - Default value: `60`
        """
        return pulumi.get(self, "tcp_timeout")

    @tcp_timeout.setter
    def tcp_timeout(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "tcp_timeout", value)

    @_builtins.property
    @pulumi.getter(name="tcpTimeoutVariable")
    def tcp_timeout_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "tcp_timeout_variable")

    @tcp_timeout_variable.setter
    def tcp_timeout_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "tcp_timeout_variable", value)

    @_builtins.property
    @pulumi.getter(name="tlocExtension")
    def tloc_extension(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Extends a local TLOC to a remote node only for vpn 0
        """
        return pulumi.get(self, "tloc_extension")

    @tloc_extension.setter
    def tloc_extension(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "tloc_extension", value)

    @_builtins.property
    @pulumi.getter(name="tlocExtensionVariable")
    def tloc_extension_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "tloc_extension_variable")

    @tloc_extension_variable.setter
    def tloc_extension_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "tloc_extension_variable", value)

    @_builtins.property
    @pulumi.getter(name="trackerVariable")
    def tracker_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "tracker_variable")

    @tracker_variable.setter
    def tracker_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "tracker_variable", value)

    @_builtins.property
    @pulumi.getter
    def trackers(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]:
        """
        Enable tracker for this interface
        """
        return pulumi.get(self, "trackers")

    @trackers.setter
    def trackers(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "trackers", value)

    @_builtins.property
    @pulumi.getter(name="tunnelBandwidth")
    def tunnel_bandwidth(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        Tunnels Bandwidth Percent
          - Range: `1`-`99`
          - Default value: `50`
        """
        return pulumi.get(self, "tunnel_bandwidth")

    @tunnel_bandwidth.setter
    def tunnel_bandwidth(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "tunnel_bandwidth", value)

    @_builtins.property
    @pulumi.getter(name="tunnelBandwidthVariable")
    def tunnel_bandwidth_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "tunnel_bandwidth_variable")

    @tunnel_bandwidth_variable.setter
    def tunnel_bandwidth_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "tunnel_bandwidth_variable", value)

    @_builtins.property
    @pulumi.getter(name="tunnelInterfaceAllowAll")
    def tunnel_interface_allow_all(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Allow all traffic. Overrides all other allow-service options if allow-service all is set
          - Default value: `false`
        """
        return pulumi.get(self, "tunnel_interface_allow_all")

    @tunnel_interface_allow_all.setter
    def tunnel_interface_allow_all(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "tunnel_interface_allow_all", value)

    @_builtins.property
    @pulumi.getter(name="tunnelInterfaceAllowAllVariable")
    def tunnel_interface_allow_all_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "tunnel_interface_allow_all_variable")

    @tunnel_interface_allow_all_variable.setter
    def tunnel_interface_allow_all_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "tunnel_interface_allow_all_variable", value)

    @_builtins.property
    @pulumi.getter(name="tunnelInterfaceAllowBgp")
    def tunnel_interface_allow_bgp(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Allow/deny BGP
          - Default value: `false`
        """
        return pulumi.get(self, "tunnel_interface_allow_bgp")

    @tunnel_interface_allow_bgp.setter
    def tunnel_interface_allow_bgp(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "tunnel_interface_allow_bgp", value)

    @_builtins.property
    @pulumi.getter(name="tunnelInterfaceAllowBgpVariable")
    def tunnel_interface_allow_bgp_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "tunnel_interface_allow_bgp_variable")

    @tunnel_interface_allow_bgp_variable.setter
    def tunnel_interface_allow_bgp_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "tunnel_interface_allow_bgp_variable", value)

    @_builtins.property
    @pulumi.getter(name="tunnelInterfaceAllowDhcp")
    def tunnel_interface_allow_dhcp(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Allow/Deny DHCP
          - Default value: `true`
        """
        return pulumi.get(self, "tunnel_interface_allow_dhcp")

    @tunnel_interface_allow_dhcp.setter
    def tunnel_interface_allow_dhcp(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "tunnel_interface_allow_dhcp", value)

    @_builtins.property
    @pulumi.getter(name="tunnelInterfaceAllowDhcpVariable")
    def tunnel_interface_allow_dhcp_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "tunnel_interface_allow_dhcp_variable")

    @tunnel_interface_allow_dhcp_variable.setter
    def tunnel_interface_allow_dhcp_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "tunnel_interface_allow_dhcp_variable", value)

    @_builtins.property
    @pulumi.getter(name="tunnelInterfaceAllowDns")
    def tunnel_interface_allow_dns(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Allow/Deny DNS
          - Default value: `true`
        """
        return pulumi.get(self, "tunnel_interface_allow_dns")

    @tunnel_interface_allow_dns.setter
    def tunnel_interface_allow_dns(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "tunnel_interface_allow_dns", value)

    @_builtins.property
    @pulumi.getter(name="tunnelInterfaceAllowDnsVariable")
    def tunnel_interface_allow_dns_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "tunnel_interface_allow_dns_variable")

    @tunnel_interface_allow_dns_variable.setter
    def tunnel_interface_allow_dns_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "tunnel_interface_allow_dns_variable", value)

    @_builtins.property
    @pulumi.getter(name="tunnelInterfaceAllowHttps")
    def tunnel_interface_allow_https(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Allow/Deny Https
          - Default value: `true`
        """
        return pulumi.get(self, "tunnel_interface_allow_https")

    @tunnel_interface_allow_https.setter
    def tunnel_interface_allow_https(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "tunnel_interface_allow_https", value)

    @_builtins.property
    @pulumi.getter(name="tunnelInterfaceAllowHttpsVariable")
    def tunnel_interface_allow_https_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "tunnel_interface_allow_https_variable")

    @tunnel_interface_allow_https_variable.setter
    def tunnel_interface_allow_https_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "tunnel_interface_allow_https_variable", value)

    @_builtins.property
    @pulumi.getter(name="tunnelInterfaceAllowIcmp")
    def tunnel_interface_allow_icmp(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Allow/Deny ICMP
          - Default value: `true`
        """
        return pulumi.get(self, "tunnel_interface_allow_icmp")

    @tunnel_interface_allow_icmp.setter
    def tunnel_interface_allow_icmp(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "tunnel_interface_allow_icmp", value)

    @_builtins.property
    @pulumi.getter(name="tunnelInterfaceAllowIcmpVariable")
    def tunnel_interface_allow_icmp_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "tunnel_interface_allow_icmp_variable")

    @tunnel_interface_allow_icmp_variable.setter
    def tunnel_interface_allow_icmp_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "tunnel_interface_allow_icmp_variable", value)

    @_builtins.property
    @pulumi.getter(name="tunnelInterfaceAllowNetconf")
    def tunnel_interface_allow_netconf(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Allow/Deny NETCONF
          - Default value: `false`
        """
        return pulumi.get(self, "tunnel_interface_allow_netconf")

    @tunnel_interface_allow_netconf.setter
    def tunnel_interface_allow_netconf(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "tunnel_interface_allow_netconf", value)

    @_builtins.property
    @pulumi.getter(name="tunnelInterfaceAllowNetconfVariable")
    def tunnel_interface_allow_netconf_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "tunnel_interface_allow_netconf_variable")

    @tunnel_interface_allow_netconf_variable.setter
    def tunnel_interface_allow_netconf_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "tunnel_interface_allow_netconf_variable", value)

    @_builtins.property
    @pulumi.getter(name="tunnelInterfaceAllowNtp")
    def tunnel_interface_allow_ntp(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Allow/Deny NTP
          - Default value: `false`
        """
        return pulumi.get(self, "tunnel_interface_allow_ntp")

    @tunnel_interface_allow_ntp.setter
    def tunnel_interface_allow_ntp(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "tunnel_interface_allow_ntp", value)

    @_builtins.property
    @pulumi.getter(name="tunnelInterfaceAllowNtpVariable")
    def tunnel_interface_allow_ntp_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "tunnel_interface_allow_ntp_variable")

    @tunnel_interface_allow_ntp_variable.setter
    def tunnel_interface_allow_ntp_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "tunnel_interface_allow_ntp_variable", value)

    @_builtins.property
    @pulumi.getter(name="tunnelInterfaceAllowOspf")
    def tunnel_interface_allow_ospf(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Allow/Deny OSPF
          - Default value: `false`
        """
        return pulumi.get(self, "tunnel_interface_allow_ospf")

    @tunnel_interface_allow_ospf.setter
    def tunnel_interface_allow_ospf(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "tunnel_interface_allow_ospf", value)

    @_builtins.property
    @pulumi.getter(name="tunnelInterfaceAllowOspfVariable")
    def tunnel_interface_allow_ospf_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "tunnel_interface_allow_ospf_variable")

    @tunnel_interface_allow_ospf_variable.setter
    def tunnel_interface_allow_ospf_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "tunnel_interface_allow_ospf_variable", value)

    @_builtins.property
    @pulumi.getter(name="tunnelInterfaceAllowSnmp")
    def tunnel_interface_allow_snmp(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Allow/Deny SNMP
          - Default value: `false`
        """
        return pulumi.get(self, "tunnel_interface_allow_snmp")

    @tunnel_interface_allow_snmp.setter
    def tunnel_interface_allow_snmp(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "tunnel_interface_allow_snmp", value)

    @_builtins.property
    @pulumi.getter(name="tunnelInterfaceAllowSnmpVariable")
    def tunnel_interface_allow_snmp_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "tunnel_interface_allow_snmp_variable")

    @tunnel_interface_allow_snmp_variable.setter
    def tunnel_interface_allow_snmp_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "tunnel_interface_allow_snmp_variable", value)

    @_builtins.property
    @pulumi.getter(name="tunnelInterfaceAllowSsh")
    def tunnel_interface_allow_ssh(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Allow/Deny SSH
          - Default value: `false`
        """
        return pulumi.get(self, "tunnel_interface_allow_ssh")

    @tunnel_interface_allow_ssh.setter
    def tunnel_interface_allow_ssh(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "tunnel_interface_allow_ssh", value)

    @_builtins.property
    @pulumi.getter(name="tunnelInterfaceAllowSshVariable")
    def tunnel_interface_allow_ssh_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "tunnel_interface_allow_ssh_variable")

    @tunnel_interface_allow_ssh_variable.setter
    def tunnel_interface_allow_ssh_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "tunnel_interface_allow_ssh_variable", value)

    @_builtins.property
    @pulumi.getter(name="tunnelInterfaceAllowStun")
    def tunnel_interface_allow_stun(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Allow/Deny STUN
          - Default value: `false`
        """
        return pulumi.get(self, "tunnel_interface_allow_stun")

    @tunnel_interface_allow_stun.setter
    def tunnel_interface_allow_stun(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "tunnel_interface_allow_stun", value)

    @_builtins.property
    @pulumi.getter(name="tunnelInterfaceAllowStunVariable")
    def tunnel_interface_allow_stun_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "tunnel_interface_allow_stun_variable")

    @tunnel_interface_allow_stun_variable.setter
    def tunnel_interface_allow_stun_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "tunnel_interface_allow_stun_variable", value)

    @_builtins.property
    @pulumi.getter(name="tunnelInterfaceBindLoopbackTunnel")
    def tunnel_interface_bind_loopback_tunnel(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Bind loopback tunnel interface to a physical interface
        """
        return pulumi.get(self, "tunnel_interface_bind_loopback_tunnel")

    @tunnel_interface_bind_loopback_tunnel.setter
    def tunnel_interface_bind_loopback_tunnel(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "tunnel_interface_bind_loopback_tunnel", value)

    @_builtins.property
    @pulumi.getter(name="tunnelInterfaceBindLoopbackTunnelVariable")
    def tunnel_interface_bind_loopback_tunnel_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "tunnel_interface_bind_loopback_tunnel_variable")

    @tunnel_interface_bind_loopback_tunnel_variable.setter
    def tunnel_interface_bind_loopback_tunnel_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "tunnel_interface_bind_loopback_tunnel_variable", value)

    @_builtins.property
    @pulumi.getter(name="tunnelInterfaceBorder")
    def tunnel_interface_border(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Set TLOC as border TLOC
          - Default value: `false`
        """
        return pulumi.get(self, "tunnel_interface_border")

    @tunnel_interface_border.setter
    def tunnel_interface_border(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "tunnel_interface_border", value)

    @_builtins.property
    @pulumi.getter(name="tunnelInterfaceBorderVariable")
    def tunnel_interface_border_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "tunnel_interface_border_variable")

    @tunnel_interface_border_variable.setter
    def tunnel_interface_border_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "tunnel_interface_border_variable", value)

    @_builtins.property
    @pulumi.getter(name="tunnelInterfaceCarrier")
    def tunnel_interface_carrier(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Set carrier for TLOC
          - Choices: `default`, `carrier1`, `carrier2`, `carrier3`, `carrier4`, `carrier5`, `carrier6`, `carrier7`, `carrier8`
          - Default value: `default`
        """
        return pulumi.get(self, "tunnel_interface_carrier")

    @tunnel_interface_carrier.setter
    def tunnel_interface_carrier(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "tunnel_interface_carrier", value)

    @_builtins.property
    @pulumi.getter(name="tunnelInterfaceCarrierVariable")
    def tunnel_interface_carrier_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "tunnel_interface_carrier_variable")

    @tunnel_interface_carrier_variable.setter
    def tunnel_interface_carrier_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "tunnel_interface_carrier_variable", value)

    @_builtins.property
    @pulumi.getter(name="tunnelInterfaceClearDontFragment")
    def tunnel_interface_clear_dont_fragment(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Enable clear dont fragment (Currently Only SDWAN Tunnel Interface)
          - Default value: `false`
        """
        return pulumi.get(self, "tunnel_interface_clear_dont_fragment")

    @tunnel_interface_clear_dont_fragment.setter
    def tunnel_interface_clear_dont_fragment(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "tunnel_interface_clear_dont_fragment", value)

    @_builtins.property
    @pulumi.getter(name="tunnelInterfaceClearDontFragmentVariable")
    def tunnel_interface_clear_dont_fragment_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "tunnel_interface_clear_dont_fragment_variable")

    @tunnel_interface_clear_dont_fragment_variable.setter
    def tunnel_interface_clear_dont_fragment_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "tunnel_interface_clear_dont_fragment_variable", value)

    @_builtins.property
    @pulumi.getter(name="tunnelInterfaceColor")
    def tunnel_interface_color(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Set color for TLOC
          - Choices: `default`, `mpls`, `metro-ethernet`, `biz-internet`, `public-internet`, `lte`, `3g`, `red`, `green`, `blue`, `gold`, `silver`, `bronze`, `custom1`, `custom2`, `custom3`, `private1`, `private2`, `private3`, `private4`, `private5`, `private6`
          - Default value: `default`
        """
        return pulumi.get(self, "tunnel_interface_color")

    @tunnel_interface_color.setter
    def tunnel_interface_color(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "tunnel_interface_color", value)

    @_builtins.property
    @pulumi.getter(name="tunnelInterfaceColorRestrict")
    def tunnel_interface_color_restrict(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Restrict this TLOC behavior
          - Default value: `false`
        """
        return pulumi.get(self, "tunnel_interface_color_restrict")

    @tunnel_interface_color_restrict.setter
    def tunnel_interface_color_restrict(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "tunnel_interface_color_restrict", value)

    @_builtins.property
    @pulumi.getter(name="tunnelInterfaceColorRestrictVariable")
    def tunnel_interface_color_restrict_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "tunnel_interface_color_restrict_variable")

    @tunnel_interface_color_restrict_variable.setter
    def tunnel_interface_color_restrict_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "tunnel_interface_color_restrict_variable", value)

    @_builtins.property
    @pulumi.getter(name="tunnelInterfaceColorVariable")
    def tunnel_interface_color_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "tunnel_interface_color_variable")

    @tunnel_interface_color_variable.setter
    def tunnel_interface_color_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "tunnel_interface_color_variable", value)

    @_builtins.property
    @pulumi.getter(name="tunnelInterfaceControlConnections")
    def tunnel_interface_control_connections(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Allow Control Connection
          - Default value: `true`
        """
        return pulumi.get(self, "tunnel_interface_control_connections")

    @tunnel_interface_control_connections.setter
    def tunnel_interface_control_connections(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "tunnel_interface_control_connections", value)

    @_builtins.property
    @pulumi.getter(name="tunnelInterfaceControlConnectionsVariable")
    def tunnel_interface_control_connections_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "tunnel_interface_control_connections_variable")

    @tunnel_interface_control_connections_variable.setter
    def tunnel_interface_control_connections_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "tunnel_interface_control_connections_variable", value)

    @_builtins.property
    @pulumi.getter(name="tunnelInterfaceEncapsulations")
    def tunnel_interface_encapsulations(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['CiscoVpnInterfaceFeatureTemplateTunnelInterfaceEncapsulationArgs']]]]:
        """
        Encapsulation for TLOC
        """
        return pulumi.get(self, "tunnel_interface_encapsulations")

    @tunnel_interface_encapsulations.setter
    def tunnel_interface_encapsulations(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['CiscoVpnInterfaceFeatureTemplateTunnelInterfaceEncapsulationArgs']]]]):
        pulumi.set(self, "tunnel_interface_encapsulations", value)

    @_builtins.property
    @pulumi.getter(name="tunnelInterfaceExcludeControllerGroupListVariable")
    def tunnel_interface_exclude_controller_group_list_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "tunnel_interface_exclude_controller_group_list_variable")

    @tunnel_interface_exclude_controller_group_list_variable.setter
    def tunnel_interface_exclude_controller_group_list_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "tunnel_interface_exclude_controller_group_list_variable", value)

    @_builtins.property
    @pulumi.getter(name="tunnelInterfaceExcludeControllerGroupLists")
    def tunnel_interface_exclude_controller_group_lists(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.int]]]]:
        """
        Exclude the following controller groups defined in this list
        """
        return pulumi.get(self, "tunnel_interface_exclude_controller_group_lists")

    @tunnel_interface_exclude_controller_group_lists.setter
    def tunnel_interface_exclude_controller_group_lists(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.int]]]]):
        pulumi.set(self, "tunnel_interface_exclude_controller_group_lists", value)

    @_builtins.property
    @pulumi.getter(name="tunnelInterfaceGreTunnelDestinationIp")
    def tunnel_interface_gre_tunnel_destination_ip(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Extend the TLOC to a remote node over GRE tunnel
        """
        return pulumi.get(self, "tunnel_interface_gre_tunnel_destination_ip")

    @tunnel_interface_gre_tunnel_destination_ip.setter
    def tunnel_interface_gre_tunnel_destination_ip(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "tunnel_interface_gre_tunnel_destination_ip", value)

    @_builtins.property
    @pulumi.getter(name="tunnelInterfaceGreTunnelDestinationIpVariable")
    def tunnel_interface_gre_tunnel_destination_ip_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "tunnel_interface_gre_tunnel_destination_ip_variable")

    @tunnel_interface_gre_tunnel_destination_ip_variable.setter
    def tunnel_interface_gre_tunnel_destination_ip_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "tunnel_interface_gre_tunnel_destination_ip_variable", value)

    @_builtins.property
    @pulumi.getter(name="tunnelInterfaceGroups")
    def tunnel_interface_groups(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.int]]]]:
        """
        List of groups
        """
        return pulumi.get(self, "tunnel_interface_groups")

    @tunnel_interface_groups.setter
    def tunnel_interface_groups(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.int]]]]):
        pulumi.set(self, "tunnel_interface_groups", value)

    @_builtins.property
    @pulumi.getter(name="tunnelInterfaceGroupsVariable")
    def tunnel_interface_groups_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "tunnel_interface_groups_variable")

    @tunnel_interface_groups_variable.setter
    def tunnel_interface_groups_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "tunnel_interface_groups_variable", value)

    @_builtins.property
    @pulumi.getter(name="tunnelInterfaceHelloInterval")
    def tunnel_interface_hello_interval(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        Set time period of control hello packets <100..600000> milli seconds
          - Range: `100`-`600000`
          - Default value: `1000`
        """
        return pulumi.get(self, "tunnel_interface_hello_interval")

    @tunnel_interface_hello_interval.setter
    def tunnel_interface_hello_interval(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "tunnel_interface_hello_interval", value)

    @_builtins.property
    @pulumi.getter(name="tunnelInterfaceHelloIntervalVariable")
    def tunnel_interface_hello_interval_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "tunnel_interface_hello_interval_variable")

    @tunnel_interface_hello_interval_variable.setter
    def tunnel_interface_hello_interval_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "tunnel_interface_hello_interval_variable", value)

    @_builtins.property
    @pulumi.getter(name="tunnelInterfaceHelloTolerance")
    def tunnel_interface_hello_tolerance(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        Set tolerance of control hello packets <12..6000> seconds
          - Range: `12`-`6000`
          - Default value: `12`
        """
        return pulumi.get(self, "tunnel_interface_hello_tolerance")

    @tunnel_interface_hello_tolerance.setter
    def tunnel_interface_hello_tolerance(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "tunnel_interface_hello_tolerance", value)

    @_builtins.property
    @pulumi.getter(name="tunnelInterfaceHelloToleranceVariable")
    def tunnel_interface_hello_tolerance_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "tunnel_interface_hello_tolerance_variable")

    @tunnel_interface_hello_tolerance_variable.setter
    def tunnel_interface_hello_tolerance_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "tunnel_interface_hello_tolerance_variable", value)

    @_builtins.property
    @pulumi.getter(name="tunnelInterfaceLastResortCircuit")
    def tunnel_interface_last_resort_circuit(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Set TLOC as last resort
          - Default value: `false`
        """
        return pulumi.get(self, "tunnel_interface_last_resort_circuit")

    @tunnel_interface_last_resort_circuit.setter
    def tunnel_interface_last_resort_circuit(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "tunnel_interface_last_resort_circuit", value)

    @_builtins.property
    @pulumi.getter(name="tunnelInterfaceLastResortCircuitVariable")
    def tunnel_interface_last_resort_circuit_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "tunnel_interface_last_resort_circuit_variable")

    @tunnel_interface_last_resort_circuit_variable.setter
    def tunnel_interface_last_resort_circuit_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "tunnel_interface_last_resort_circuit_variable", value)

    @_builtins.property
    @pulumi.getter(name="tunnelInterfaceLowBandwidthLink")
    def tunnel_interface_low_bandwidth_link(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Set the interface as a low-bandwidth circuit
          - Default value: `false`
        """
        return pulumi.get(self, "tunnel_interface_low_bandwidth_link")

    @tunnel_interface_low_bandwidth_link.setter
    def tunnel_interface_low_bandwidth_link(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "tunnel_interface_low_bandwidth_link", value)

    @_builtins.property
    @pulumi.getter(name="tunnelInterfaceLowBandwidthLinkVariable")
    def tunnel_interface_low_bandwidth_link_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "tunnel_interface_low_bandwidth_link_variable")

    @tunnel_interface_low_bandwidth_link_variable.setter
    def tunnel_interface_low_bandwidth_link_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "tunnel_interface_low_bandwidth_link_variable", value)

    @_builtins.property
    @pulumi.getter(name="tunnelInterfaceMaxControlConnections")
    def tunnel_interface_max_control_connections(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        Set the maximum number of control connections for this TLOC
          - Range: `0`-`100`
        """
        return pulumi.get(self, "tunnel_interface_max_control_connections")

    @tunnel_interface_max_control_connections.setter
    def tunnel_interface_max_control_connections(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "tunnel_interface_max_control_connections", value)

    @_builtins.property
    @pulumi.getter(name="tunnelInterfaceMaxControlConnectionsVariable")
    def tunnel_interface_max_control_connections_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "tunnel_interface_max_control_connections_variable")

    @tunnel_interface_max_control_connections_variable.setter
    def tunnel_interface_max_control_connections_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "tunnel_interface_max_control_connections_variable", value)

    @_builtins.property
    @pulumi.getter(name="tunnelInterfaceNatRefreshInterval")
    def tunnel_interface_nat_refresh_interval(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        Set time period of nat refresh packets <1...60> seconds
          - Range: `1`-`60`
          - Default value: `5`
        """
        return pulumi.get(self, "tunnel_interface_nat_refresh_interval")

    @tunnel_interface_nat_refresh_interval.setter
    def tunnel_interface_nat_refresh_interval(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "tunnel_interface_nat_refresh_interval", value)

    @_builtins.property
    @pulumi.getter(name="tunnelInterfaceNatRefreshIntervalVariable")
    def tunnel_interface_nat_refresh_interval_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "tunnel_interface_nat_refresh_interval_variable")

    @tunnel_interface_nat_refresh_interval_variable.setter
    def tunnel_interface_nat_refresh_interval_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "tunnel_interface_nat_refresh_interval_variable", value)

    @_builtins.property
    @pulumi.getter(name="tunnelInterfaceNetworkBroadcast")
    def tunnel_interface_network_broadcast(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Accept and respond to network-prefix-directed broadcasts)
          - Default value: `false`
        """
        return pulumi.get(self, "tunnel_interface_network_broadcast")

    @tunnel_interface_network_broadcast.setter
    def tunnel_interface_network_broadcast(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "tunnel_interface_network_broadcast", value)

    @_builtins.property
    @pulumi.getter(name="tunnelInterfaceNetworkBroadcastVariable")
    def tunnel_interface_network_broadcast_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "tunnel_interface_network_broadcast_variable")

    @tunnel_interface_network_broadcast_variable.setter
    def tunnel_interface_network_broadcast_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "tunnel_interface_network_broadcast_variable", value)

    @_builtins.property
    @pulumi.getter(name="tunnelInterfacePortHop")
    def tunnel_interface_port_hop(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Disallow port hopping on the tunnel interface
          - Default value: `true`
        """
        return pulumi.get(self, "tunnel_interface_port_hop")

    @tunnel_interface_port_hop.setter
    def tunnel_interface_port_hop(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "tunnel_interface_port_hop", value)

    @_builtins.property
    @pulumi.getter(name="tunnelInterfacePortHopVariable")
    def tunnel_interface_port_hop_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "tunnel_interface_port_hop_variable")

    @tunnel_interface_port_hop_variable.setter
    def tunnel_interface_port_hop_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "tunnel_interface_port_hop_variable", value)

    @_builtins.property
    @pulumi.getter(name="tunnelInterfacePropagateSgt")
    def tunnel_interface_propagate_sgt(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        CTS SGT Propagation configuration
          - Default value: `false`
        """
        return pulumi.get(self, "tunnel_interface_propagate_sgt")

    @tunnel_interface_propagate_sgt.setter
    def tunnel_interface_propagate_sgt(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "tunnel_interface_propagate_sgt", value)

    @_builtins.property
    @pulumi.getter(name="tunnelInterfacePropagateSgtVariable")
    def tunnel_interface_propagate_sgt_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "tunnel_interface_propagate_sgt_variable")

    @tunnel_interface_propagate_sgt_variable.setter
    def tunnel_interface_propagate_sgt_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "tunnel_interface_propagate_sgt_variable", value)

    @_builtins.property
    @pulumi.getter(name="tunnelInterfaceTunnelTcpMss")
    def tunnel_interface_tunnel_tcp_mss(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        Tunnel TCP MSS on SYN packets, in bytes
          - Range: `500`-`1460`
        """
        return pulumi.get(self, "tunnel_interface_tunnel_tcp_mss")

    @tunnel_interface_tunnel_tcp_mss.setter
    def tunnel_interface_tunnel_tcp_mss(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "tunnel_interface_tunnel_tcp_mss", value)

    @_builtins.property
    @pulumi.getter(name="tunnelInterfaceTunnelTcpMssVariable")
    def tunnel_interface_tunnel_tcp_mss_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "tunnel_interface_tunnel_tcp_mss_variable")

    @tunnel_interface_tunnel_tcp_mss_variable.setter
    def tunnel_interface_tunnel_tcp_mss_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "tunnel_interface_tunnel_tcp_mss_variable", value)

    @_builtins.property
    @pulumi.getter(name="tunnelInterfaceVbondAsStunServer")
    def tunnel_interface_vbond_as_stun_server(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Put this wan interface in STUN mode only
          - Default value: `false`
        """
        return pulumi.get(self, "tunnel_interface_vbond_as_stun_server")

    @tunnel_interface_vbond_as_stun_server.setter
    def tunnel_interface_vbond_as_stun_server(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "tunnel_interface_vbond_as_stun_server", value)

    @_builtins.property
    @pulumi.getter(name="tunnelInterfaceVbondAsStunServerVariable")
    def tunnel_interface_vbond_as_stun_server_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "tunnel_interface_vbond_as_stun_server_variable")

    @tunnel_interface_vbond_as_stun_server_variable.setter
    def tunnel_interface_vbond_as_stun_server_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "tunnel_interface_vbond_as_stun_server_variable", value)

    @_builtins.property
    @pulumi.getter(name="tunnelInterfaceVmanageConnectionPreference")
    def tunnel_interface_vmanage_connection_preference(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        Set interface preference for control connection to vManage <0..8>
          - Range: `0`-`8`
          - Default value: `5`
        """
        return pulumi.get(self, "tunnel_interface_vmanage_connection_preference")

    @tunnel_interface_vmanage_connection_preference.setter
    def tunnel_interface_vmanage_connection_preference(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "tunnel_interface_vmanage_connection_preference", value)

    @_builtins.property
    @pulumi.getter(name="tunnelInterfaceVmanageConnectionPreferenceVariable")
    def tunnel_interface_vmanage_connection_preference_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "tunnel_interface_vmanage_connection_preference_variable")

    @tunnel_interface_vmanage_connection_preference_variable.setter
    def tunnel_interface_vmanage_connection_preference_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "tunnel_interface_vmanage_connection_preference_variable", value)

    @_builtins.property
    @pulumi.getter(name="tunnelQosMode")
    def tunnel_qos_mode(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Set tunnel QoS mode
          - Choices: `hub`, `spoke`
        """
        return pulumi.get(self, "tunnel_qos_mode")

    @tunnel_qos_mode.setter
    def tunnel_qos_mode(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "tunnel_qos_mode", value)

    @_builtins.property
    @pulumi.getter(name="tunnelQosModeVariable")
    def tunnel_qos_mode_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "tunnel_qos_mode_variable")

    @tunnel_qos_mode_variable.setter
    def tunnel_qos_mode_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "tunnel_qos_mode_variable", value)

    @_builtins.property
    @pulumi.getter(name="udpTimeout")
    def udp_timeout(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        Set NAT UDP session timeout, in minutes
          - Range: `1`-`8947`
          - Default value: `1`
        """
        return pulumi.get(self, "udp_timeout")

    @udp_timeout.setter
    def udp_timeout(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "udp_timeout", value)

    @_builtins.property
    @pulumi.getter(name="udpTimeoutVariable")
    def udp_timeout_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "udp_timeout_variable")

    @udp_timeout_variable.setter
    def udp_timeout_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "udp_timeout_variable", value)


@pulumi.input_type
class _CiscoVpnInterfaceFeatureTemplateState:
    def __init__(__self__, *,
                 access_lists: Optional[pulumi.Input[Sequence[pulumi.Input['CiscoVpnInterfaceFeatureTemplateAccessListArgs']]]] = None,
                 address: Optional[pulumi.Input[_builtins.str]] = None,
                 address_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 arp_timeout: Optional[pulumi.Input[_builtins.int]] = None,
                 arp_timeout_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 auto_bandwidth_detect: Optional[pulumi.Input[_builtins.bool]] = None,
                 auto_bandwidth_detect_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 autonegotiate: Optional[pulumi.Input[_builtins.bool]] = None,
                 autonegotiate_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 bandwidth_downstream: Optional[pulumi.Input[_builtins.int]] = None,
                 bandwidth_downstream_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 bandwidth_upstream: Optional[pulumi.Input[_builtins.int]] = None,
                 bandwidth_upstream_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 block_non_source_ip: Optional[pulumi.Input[_builtins.bool]] = None,
                 block_non_source_ip_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 core_region: Optional[pulumi.Input[_builtins.str]] = None,
                 core_region_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 description: Optional[pulumi.Input[_builtins.str]] = None,
                 device_types: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 dhcp: Optional[pulumi.Input[_builtins.bool]] = None,
                 dhcp_distance: Optional[pulumi.Input[_builtins.int]] = None,
                 dhcp_distance_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 dhcp_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 dhcpv6: Optional[pulumi.Input[_builtins.bool]] = None,
                 dhcpv6_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 duplex: Optional[pulumi.Input[_builtins.str]] = None,
                 duplex_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 enable_core_region: Optional[pulumi.Input[_builtins.bool]] = None,
                 enable_sgt: Optional[pulumi.Input[_builtins.bool]] = None,
                 gre_tunnel_source_ip: Optional[pulumi.Input[_builtins.str]] = None,
                 gre_tunnel_source_ip_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 gre_tunnel_xconnect: Optional[pulumi.Input[_builtins.str]] = None,
                 gre_tunnel_xconnect_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 icmp_redirect_disable: Optional[pulumi.Input[_builtins.bool]] = None,
                 icmp_redirect_disable_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 interface_description: Optional[pulumi.Input[_builtins.str]] = None,
                 interface_description_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 interface_mtu: Optional[pulumi.Input[_builtins.int]] = None,
                 interface_mtu_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 interface_name: Optional[pulumi.Input[_builtins.str]] = None,
                 interface_name_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 ip_directed_broadcast: Optional[pulumi.Input[_builtins.bool]] = None,
                 ip_directed_broadcast_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 ip_mtu: Optional[pulumi.Input[_builtins.int]] = None,
                 ip_mtu_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 iperf_server: Optional[pulumi.Input[_builtins.str]] = None,
                 iperf_server_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 ipv4_dhcp_helper_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 ipv4_dhcp_helpers: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 ipv4_secondary_addresses: Optional[pulumi.Input[Sequence[pulumi.Input['CiscoVpnInterfaceFeatureTemplateIpv4SecondaryAddressArgs']]]] = None,
                 ipv4_vrrps: Optional[pulumi.Input[Sequence[pulumi.Input['CiscoVpnInterfaceFeatureTemplateIpv4VrrpArgs']]]] = None,
                 ipv6_access_lists: Optional[pulumi.Input[Sequence[pulumi.Input['CiscoVpnInterfaceFeatureTemplateIpv6AccessListArgs']]]] = None,
                 ipv6_address: Optional[pulumi.Input[_builtins.str]] = None,
                 ipv6_address_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 ipv6_dhcp_helpers: Optional[pulumi.Input[Sequence[pulumi.Input['CiscoVpnInterfaceFeatureTemplateIpv6DhcpHelperArgs']]]] = None,
                 ipv6_nat: Optional[pulumi.Input[_builtins.bool]] = None,
                 ipv6_nat_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 ipv6_secondary_addresses: Optional[pulumi.Input[Sequence[pulumi.Input['CiscoVpnInterfaceFeatureTemplateIpv6SecondaryAddressArgs']]]] = None,
                 ipv6_vrrps: Optional[pulumi.Input[Sequence[pulumi.Input['CiscoVpnInterfaceFeatureTemplateIpv6VrrpArgs']]]] = None,
                 load_interval: Optional[pulumi.Input[_builtins.int]] = None,
                 load_interval_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 mac_address: Optional[pulumi.Input[_builtins.str]] = None,
                 mac_address_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 media_type: Optional[pulumi.Input[_builtins.str]] = None,
                 media_type_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 nat: Optional[pulumi.Input[_builtins.bool]] = None,
                 nat64_interface: Optional[pulumi.Input[_builtins.bool]] = None,
                 nat66_interface: Optional[pulumi.Input[_builtins.bool]] = None,
                 nat_inside_source_loopback_interface: Optional[pulumi.Input[_builtins.str]] = None,
                 nat_inside_source_loopback_interface_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 nat_overload: Optional[pulumi.Input[_builtins.bool]] = None,
                 nat_overload_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 nat_pool_prefix_length: Optional[pulumi.Input[_builtins.int]] = None,
                 nat_pool_prefix_length_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 nat_pool_range_end: Optional[pulumi.Input[_builtins.str]] = None,
                 nat_pool_range_end_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 nat_pool_range_start: Optional[pulumi.Input[_builtins.str]] = None,
                 nat_pool_range_start_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 nat_type: Optional[pulumi.Input[_builtins.str]] = None,
                 nat_type_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 poe: Optional[pulumi.Input[_builtins.bool]] = None,
                 poe_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 propagate_sgt: Optional[pulumi.Input[_builtins.bool]] = None,
                 qos_adaptive_bandwidth_downstream: Optional[pulumi.Input[_builtins.int]] = None,
                 qos_adaptive_bandwidth_downstream_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 qos_adaptive_bandwidth_upstream: Optional[pulumi.Input[_builtins.int]] = None,
                 qos_adaptive_bandwidth_upstream_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 qos_adaptive_max_downstream: Optional[pulumi.Input[_builtins.int]] = None,
                 qos_adaptive_max_downstream_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 qos_adaptive_max_upstream: Optional[pulumi.Input[_builtins.int]] = None,
                 qos_adaptive_max_upstream_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 qos_adaptive_min_downstream: Optional[pulumi.Input[_builtins.int]] = None,
                 qos_adaptive_min_downstream_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 qos_adaptive_min_upstream: Optional[pulumi.Input[_builtins.int]] = None,
                 qos_adaptive_min_upstream_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 qos_adaptive_period: Optional[pulumi.Input[_builtins.int]] = None,
                 qos_adaptive_period_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 qos_map: Optional[pulumi.Input[_builtins.str]] = None,
                 qos_map_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 qos_map_vpn: Optional[pulumi.Input[_builtins.str]] = None,
                 qos_map_vpn_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 rewrite_rule_name: Optional[pulumi.Input[_builtins.str]] = None,
                 rewrite_rule_name_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 secondary_region: Optional[pulumi.Input[_builtins.str]] = None,
                 secondary_region_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 sgt_enforcement: Optional[pulumi.Input[_builtins.bool]] = None,
                 sgt_enforcement_sgt: Optional[pulumi.Input[_builtins.int]] = None,
                 sgt_enforcement_sgt_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 shaping_rate: Optional[pulumi.Input[_builtins.int]] = None,
                 shaping_rate_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 shutdown: Optional[pulumi.Input[_builtins.bool]] = None,
                 shutdown_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 speed: Optional[pulumi.Input[_builtins.str]] = None,
                 speed_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 static_arps: Optional[pulumi.Input[Sequence[pulumi.Input['CiscoVpnInterfaceFeatureTemplateStaticArpArgs']]]] = None,
                 static_nat66_entries: Optional[pulumi.Input[Sequence[pulumi.Input['CiscoVpnInterfaceFeatureTemplateStaticNat66EntryArgs']]]] = None,
                 static_nat_entries: Optional[pulumi.Input[Sequence[pulumi.Input['CiscoVpnInterfaceFeatureTemplateStaticNatEntryArgs']]]] = None,
                 static_port_forward_entries: Optional[pulumi.Input[Sequence[pulumi.Input['CiscoVpnInterfaceFeatureTemplateStaticPortForwardEntryArgs']]]] = None,
                 static_sgt: Optional[pulumi.Input[_builtins.int]] = None,
                 static_sgt_trusted: Optional[pulumi.Input[_builtins.bool]] = None,
                 static_sgt_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 tcp_mss_adjust: Optional[pulumi.Input[_builtins.int]] = None,
                 tcp_mss_adjust_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 tcp_timeout: Optional[pulumi.Input[_builtins.int]] = None,
                 tcp_timeout_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 template_type: Optional[pulumi.Input[_builtins.str]] = None,
                 tloc_extension: Optional[pulumi.Input[_builtins.str]] = None,
                 tloc_extension_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 tracker_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 trackers: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 tunnel_bandwidth: Optional[pulumi.Input[_builtins.int]] = None,
                 tunnel_bandwidth_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 tunnel_interface_allow_all: Optional[pulumi.Input[_builtins.bool]] = None,
                 tunnel_interface_allow_all_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 tunnel_interface_allow_bgp: Optional[pulumi.Input[_builtins.bool]] = None,
                 tunnel_interface_allow_bgp_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 tunnel_interface_allow_dhcp: Optional[pulumi.Input[_builtins.bool]] = None,
                 tunnel_interface_allow_dhcp_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 tunnel_interface_allow_dns: Optional[pulumi.Input[_builtins.bool]] = None,
                 tunnel_interface_allow_dns_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 tunnel_interface_allow_https: Optional[pulumi.Input[_builtins.bool]] = None,
                 tunnel_interface_allow_https_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 tunnel_interface_allow_icmp: Optional[pulumi.Input[_builtins.bool]] = None,
                 tunnel_interface_allow_icmp_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 tunnel_interface_allow_netconf: Optional[pulumi.Input[_builtins.bool]] = None,
                 tunnel_interface_allow_netconf_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 tunnel_interface_allow_ntp: Optional[pulumi.Input[_builtins.bool]] = None,
                 tunnel_interface_allow_ntp_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 tunnel_interface_allow_ospf: Optional[pulumi.Input[_builtins.bool]] = None,
                 tunnel_interface_allow_ospf_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 tunnel_interface_allow_snmp: Optional[pulumi.Input[_builtins.bool]] = None,
                 tunnel_interface_allow_snmp_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 tunnel_interface_allow_ssh: Optional[pulumi.Input[_builtins.bool]] = None,
                 tunnel_interface_allow_ssh_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 tunnel_interface_allow_stun: Optional[pulumi.Input[_builtins.bool]] = None,
                 tunnel_interface_allow_stun_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 tunnel_interface_bind_loopback_tunnel: Optional[pulumi.Input[_builtins.str]] = None,
                 tunnel_interface_bind_loopback_tunnel_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 tunnel_interface_border: Optional[pulumi.Input[_builtins.bool]] = None,
                 tunnel_interface_border_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 tunnel_interface_carrier: Optional[pulumi.Input[_builtins.str]] = None,
                 tunnel_interface_carrier_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 tunnel_interface_clear_dont_fragment: Optional[pulumi.Input[_builtins.bool]] = None,
                 tunnel_interface_clear_dont_fragment_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 tunnel_interface_color: Optional[pulumi.Input[_builtins.str]] = None,
                 tunnel_interface_color_restrict: Optional[pulumi.Input[_builtins.bool]] = None,
                 tunnel_interface_color_restrict_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 tunnel_interface_color_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 tunnel_interface_control_connections: Optional[pulumi.Input[_builtins.bool]] = None,
                 tunnel_interface_control_connections_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 tunnel_interface_encapsulations: Optional[pulumi.Input[Sequence[pulumi.Input['CiscoVpnInterfaceFeatureTemplateTunnelInterfaceEncapsulationArgs']]]] = None,
                 tunnel_interface_exclude_controller_group_list_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 tunnel_interface_exclude_controller_group_lists: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.int]]]] = None,
                 tunnel_interface_gre_tunnel_destination_ip: Optional[pulumi.Input[_builtins.str]] = None,
                 tunnel_interface_gre_tunnel_destination_ip_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 tunnel_interface_groups: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.int]]]] = None,
                 tunnel_interface_groups_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 tunnel_interface_hello_interval: Optional[pulumi.Input[_builtins.int]] = None,
                 tunnel_interface_hello_interval_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 tunnel_interface_hello_tolerance: Optional[pulumi.Input[_builtins.int]] = None,
                 tunnel_interface_hello_tolerance_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 tunnel_interface_last_resort_circuit: Optional[pulumi.Input[_builtins.bool]] = None,
                 tunnel_interface_last_resort_circuit_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 tunnel_interface_low_bandwidth_link: Optional[pulumi.Input[_builtins.bool]] = None,
                 tunnel_interface_low_bandwidth_link_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 tunnel_interface_max_control_connections: Optional[pulumi.Input[_builtins.int]] = None,
                 tunnel_interface_max_control_connections_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 tunnel_interface_nat_refresh_interval: Optional[pulumi.Input[_builtins.int]] = None,
                 tunnel_interface_nat_refresh_interval_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 tunnel_interface_network_broadcast: Optional[pulumi.Input[_builtins.bool]] = None,
                 tunnel_interface_network_broadcast_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 tunnel_interface_port_hop: Optional[pulumi.Input[_builtins.bool]] = None,
                 tunnel_interface_port_hop_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 tunnel_interface_propagate_sgt: Optional[pulumi.Input[_builtins.bool]] = None,
                 tunnel_interface_propagate_sgt_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 tunnel_interface_tunnel_tcp_mss: Optional[pulumi.Input[_builtins.int]] = None,
                 tunnel_interface_tunnel_tcp_mss_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 tunnel_interface_vbond_as_stun_server: Optional[pulumi.Input[_builtins.bool]] = None,
                 tunnel_interface_vbond_as_stun_server_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 tunnel_interface_vmanage_connection_preference: Optional[pulumi.Input[_builtins.int]] = None,
                 tunnel_interface_vmanage_connection_preference_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 tunnel_qos_mode: Optional[pulumi.Input[_builtins.str]] = None,
                 tunnel_qos_mode_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 udp_timeout: Optional[pulumi.Input[_builtins.int]] = None,
                 udp_timeout_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 version: Optional[pulumi.Input[_builtins.int]] = None):
        """
        Input properties used for looking up and filtering CiscoVpnInterfaceFeatureTemplate resources.
        :param pulumi.Input[Sequence[pulumi.Input['CiscoVpnInterfaceFeatureTemplateAccessListArgs']]] access_lists: Apply ACL
        :param pulumi.Input[_builtins.str] address: Assign IPv4 address
        :param pulumi.Input[_builtins.str] address_variable: Variable name
        :param pulumi.Input[_builtins.int] arp_timeout: Timeout value for dynamically learned ARP entries, <0..2678400> seconds
                 - Range: `0`-`2147483`
                 - Default value: `1200`
        :param pulumi.Input[_builtins.str] arp_timeout_variable: Variable name
        :param pulumi.Input[_builtins.bool] auto_bandwidth_detect: Interface auto detect bandwidth
                 - Default value: `false`
        :param pulumi.Input[_builtins.str] auto_bandwidth_detect_variable: Variable name
        :param pulumi.Input[_builtins.bool] autonegotiate: Link autonegotiation
        :param pulumi.Input[_builtins.str] autonegotiate_variable: Variable name
        :param pulumi.Input[_builtins.int] bandwidth_downstream: Interface downstream bandwidth capacity, in kbps
                 - Range: `1`-`2147483647`
        :param pulumi.Input[_builtins.str] bandwidth_downstream_variable: Variable name
        :param pulumi.Input[_builtins.int] bandwidth_upstream: Interface upstream bandwidth capacity, in kbps
                 - Range: `1`-`2147483647`
        :param pulumi.Input[_builtins.str] bandwidth_upstream_variable: Variable name
        :param pulumi.Input[_builtins.bool] block_non_source_ip: Block packets originating from IP address that is not from this source
                 - Default value: `false`
        :param pulumi.Input[_builtins.str] block_non_source_ip_variable: Variable name
        :param pulumi.Input[_builtins.str] core_region: Enable core region
                 - Choices: `core`, `core-shared`
                 - Default value: `core`
        :param pulumi.Input[_builtins.str] core_region_variable: Variable name
        :param pulumi.Input[_builtins.str] description: The description of the feature template
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] device_types: List of supported device types
                 - Choices: `vedge-C8000V`, `vedge-C8300-1N1S-4T2X`, `vedge-C8300-1N1S-6T`, `vedge-C8300-2N2S-6T`, `vedge-C8300-2N2S-4T2X`, `vedge-C8500-12X4QC`, `vedge-C8500-12X`, `vedge-C8500-20X6C`, `vedge-C8500L-8S4X`, `vedge-C8200-1N-4T`, `vedge-C8200L-1N-4T`
        :param pulumi.Input[_builtins.bool] dhcp: Enable DHCP
                 - Default value: `false`
        :param pulumi.Input[_builtins.int] dhcp_distance: Set administrative distance for DHCP default route
                 - Range: `1`-`65536`
                 - Default value: `1`
        :param pulumi.Input[_builtins.str] dhcp_distance_variable: Variable name
        :param pulumi.Input[_builtins.str] dhcp_variable: Variable name
        :param pulumi.Input[_builtins.bool] dhcpv6: Enable DHCPv6
                 - Default value: `false`
        :param pulumi.Input[_builtins.str] dhcpv6_variable: Variable name
        :param pulumi.Input[_builtins.str] duplex: Duplex mode
                 - Choices: `full`, `half`, `auto`
        :param pulumi.Input[_builtins.str] duplex_variable: Variable name
        :param pulumi.Input[_builtins.bool] enable_core_region: Enable core region
                 - Default value: `false`
        :param pulumi.Input[_builtins.bool] enable_sgt: Enables the interface for CTS SGT authorization and forwarding.
                 - Default value: `false`
        :param pulumi.Input[_builtins.str] gre_tunnel_source_ip: Extend remote TLOC over a GRE tunnel to a local WAN interface
        :param pulumi.Input[_builtins.str] gre_tunnel_source_ip_variable: Variable name
        :param pulumi.Input[_builtins.str] gre_tunnel_xconnect: Extend remote TLOC over a GRE tunnel to a local WAN interface
        :param pulumi.Input[_builtins.str] gre_tunnel_xconnect_variable: Variable name
        :param pulumi.Input[_builtins.bool] icmp_redirect_disable: Set this option to disable the icmp/icmpv6 redirect packets
                 - Default value: `true`
        :param pulumi.Input[_builtins.str] icmp_redirect_disable_variable: Variable name
        :param pulumi.Input[_builtins.str] interface_description: Interface description
        :param pulumi.Input[_builtins.str] interface_description_variable: Variable name
        :param pulumi.Input[_builtins.int] interface_mtu: Interface MTU GigabitEthernet0 <1500..1518>, Other GigabitEthernet <1500..9216> in bytes
                 - Range: `1500`-`9216`
                 - Default value: `1500`
        :param pulumi.Input[_builtins.str] interface_mtu_variable: Variable name
        :param pulumi.Input[_builtins.str] interface_name: Interface name: ge0/<0-..> or ge0/<0-..>.vlanid or irb<bridgeid:1-63> or loopback<string> or natpool-<1..31> when present
        :param pulumi.Input[_builtins.str] interface_name_variable: Variable name
        :param pulumi.Input[_builtins.bool] ip_directed_broadcast: IP Directed-Broadcast
                 - Default value: `false`
        :param pulumi.Input[_builtins.str] ip_directed_broadcast_variable: Variable name
        :param pulumi.Input[_builtins.int] ip_mtu: IP MTU for GigabitEthernet main <576..Interface MTU>, GigabitEthernet subinterface <576..9216>, Other Interfaces <576..2000> in bytes
                 - Range: `576`-`9216`
                 - Default value: `1500`
        :param pulumi.Input[_builtins.str] ip_mtu_variable: Variable name
        :param pulumi.Input[_builtins.str] iperf_server: Iperf server for auto bandwidth detect
        :param pulumi.Input[_builtins.str] iperf_server_variable: Variable name
        :param pulumi.Input[_builtins.str] ipv4_dhcp_helper_variable: Variable name
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] ipv4_dhcp_helpers: List of DHCP IPv4 helper addresses
        :param pulumi.Input[Sequence[pulumi.Input['CiscoVpnInterfaceFeatureTemplateIpv4SecondaryAddressArgs']]] ipv4_secondary_addresses: Assign secondary IP addresses
        :param pulumi.Input[Sequence[pulumi.Input['CiscoVpnInterfaceFeatureTemplateIpv4VrrpArgs']]] ipv4_vrrps: Enable VRRP
        :param pulumi.Input[Sequence[pulumi.Input['CiscoVpnInterfaceFeatureTemplateIpv6AccessListArgs']]] ipv6_access_lists: Apply IPv6 access list
        :param pulumi.Input[_builtins.str] ipv6_address: Assign IPv6 address
        :param pulumi.Input[_builtins.str] ipv6_address_variable: Variable name
        :param pulumi.Input[Sequence[pulumi.Input['CiscoVpnInterfaceFeatureTemplateIpv6DhcpHelperArgs']]] ipv6_dhcp_helpers: DHCPv6 Helper
        :param pulumi.Input[_builtins.bool] ipv6_nat: NAT64 on this interface
                 - Default value: `false`
        :param pulumi.Input[_builtins.str] ipv6_nat_variable: Variable name
        :param pulumi.Input[Sequence[pulumi.Input['CiscoVpnInterfaceFeatureTemplateIpv6SecondaryAddressArgs']]] ipv6_secondary_addresses: Assign secondary IPv6 addresses
        :param pulumi.Input[Sequence[pulumi.Input['CiscoVpnInterfaceFeatureTemplateIpv6VrrpArgs']]] ipv6_vrrps: Enable VRRP
        :param pulumi.Input[_builtins.int] load_interval: Interval for interface load calculation
                 - Range: `30`-`600`
                 - Default value: `30`
        :param pulumi.Input[_builtins.str] load_interval_variable: Variable name
        :param pulumi.Input[_builtins.str] mac_address: Set MAC-layer address
        :param pulumi.Input[_builtins.str] mac_address_variable: Variable name
        :param pulumi.Input[_builtins.str] media_type: Media type
                 - Choices: `auto-select`, `rj45`, `sfp`
        :param pulumi.Input[_builtins.str] media_type_variable: Variable name
        :param pulumi.Input[_builtins.str] name: The name of the feature template
        :param pulumi.Input[_builtins.bool] nat: Network Address Translation on this interface
                 - Default value: `false`
        :param pulumi.Input[_builtins.bool] nat64_interface: NAT64 on this interface
                 - Default value: `false`
        :param pulumi.Input[_builtins.bool] nat66_interface: NAT66 on this interface
                 - Default value: `false`
        :param pulumi.Input[_builtins.str] nat_inside_source_loopback_interface: Configure NAT Inside Loopback Interface
        :param pulumi.Input[_builtins.str] nat_inside_source_loopback_interface_variable: Variable name
        :param pulumi.Input[_builtins.bool] nat_overload: Enable port translation(PAT)
                 - Default value: `true`
        :param pulumi.Input[_builtins.str] nat_overload_variable: Variable name
        :param pulumi.Input[_builtins.int] nat_pool_prefix_length: Ending IP address of NAT Pool Prefix Length
        :param pulumi.Input[_builtins.str] nat_pool_prefix_length_variable: Variable name
        :param pulumi.Input[_builtins.str] nat_pool_range_end: Ending IP address of NAT pool range
        :param pulumi.Input[_builtins.str] nat_pool_range_end_variable: Variable name
        :param pulumi.Input[_builtins.str] nat_pool_range_start: Starting IP address of NAT pool range
        :param pulumi.Input[_builtins.str] nat_pool_range_start_variable: Variable name
        :param pulumi.Input[_builtins.str] nat_type: NAT type
                 - Choices: `interface`, `pool`, `loopback`
                 - Default value: `interface`
        :param pulumi.Input[_builtins.str] nat_type_variable: Variable name
        :param pulumi.Input[_builtins.bool] poe: Configure interface as Power-over-Ethernet source
                 - Default value: `false`
        :param pulumi.Input[_builtins.str] poe_variable: Variable name
        :param pulumi.Input[_builtins.bool] propagate_sgt: Enable/Disable CTS SGT propagation on an interface.
                 - Default value: `true`
        :param pulumi.Input[_builtins.int] qos_adaptive_bandwidth_downstream: Adaptive QoS default downstream bandwidth
                 - Range: `8`-`100000000`
        :param pulumi.Input[_builtins.str] qos_adaptive_bandwidth_downstream_variable: Variable name
        :param pulumi.Input[_builtins.int] qos_adaptive_bandwidth_upstream: Adaptive QoS default upstream bandwidth
                 - Range: `8`-`100000000`
        :param pulumi.Input[_builtins.str] qos_adaptive_bandwidth_upstream_variable: Variable name
        :param pulumi.Input[_builtins.int] qos_adaptive_max_downstream: Downstream max bandwidth limit
                 - Range: `8`-`100000000`
        :param pulumi.Input[_builtins.str] qos_adaptive_max_downstream_variable: Variable name
        :param pulumi.Input[_builtins.int] qos_adaptive_max_upstream: Upstream max bandwidth limit
                 - Range: `8`-`100000000`
        :param pulumi.Input[_builtins.str] qos_adaptive_max_upstream_variable: Variable name
        :param pulumi.Input[_builtins.int] qos_adaptive_min_downstream: Downstream min bandwidth limit
                 - Range: `8`-`100000000`
        :param pulumi.Input[_builtins.str] qos_adaptive_min_downstream_variable: Variable name
        :param pulumi.Input[_builtins.int] qos_adaptive_min_upstream: Upstream min bandwidth limit
                 - Range: `8`-`100000000`
        :param pulumi.Input[_builtins.str] qos_adaptive_min_upstream_variable: Variable name
        :param pulumi.Input[_builtins.int] qos_adaptive_period: Periodic timer for adaptive QoS in minutes
                 - Range: `1`-`720`
                 - Default value: `15`
        :param pulumi.Input[_builtins.str] qos_adaptive_period_variable: Variable name
        :param pulumi.Input[_builtins.str] qos_map: Name of QoS map
        :param pulumi.Input[_builtins.str] qos_map_variable: Variable name
        :param pulumi.Input[_builtins.str] qos_map_vpn: Name of VPN QoS map
        :param pulumi.Input[_builtins.str] qos_map_vpn_variable: Variable name
        :param pulumi.Input[_builtins.str] rewrite_rule_name: Name of rewrite rule
        :param pulumi.Input[_builtins.str] rewrite_rule_name_variable: Variable name
        :param pulumi.Input[_builtins.str] secondary_region: Enable secondary region
                 - Choices: `off`, `secondary-only`, `secondary-shared`
                 - Default value: `off`
        :param pulumi.Input[_builtins.str] secondary_region_variable: Variable name
        :param pulumi.Input[_builtins.bool] sgt_enforcement: Enables the interface for CTS SGT authorization and forwarding.
                 - Default value: `false`
        :param pulumi.Input[_builtins.int] sgt_enforcement_sgt: SGT value between 2 and 65519.
                 - Range: `2`-`65519`
        :param pulumi.Input[_builtins.str] sgt_enforcement_sgt_variable: Variable name
        :param pulumi.Input[_builtins.int] shaping_rate: 1ge  interfaces: [0..1000000]kbps; 10ge interfaces: [0..10000000]kbps
                 - Range: `8`-`100000000`
        :param pulumi.Input[_builtins.str] shaping_rate_variable: Variable name
        :param pulumi.Input[_builtins.bool] shutdown: Administrative state
                 - Default value: `true`
        :param pulumi.Input[_builtins.str] shutdown_variable: Variable name
        :param pulumi.Input[_builtins.str] speed: Set interface speed
                 - Choices: `10`, `100`, `1000`, `2500`, `10000`
        :param pulumi.Input[_builtins.str] speed_variable: Variable name
        :param pulumi.Input[Sequence[pulumi.Input['CiscoVpnInterfaceFeatureTemplateStaticArpArgs']]] static_arps: Configure static ARP entries
        :param pulumi.Input[Sequence[pulumi.Input['CiscoVpnInterfaceFeatureTemplateStaticNat66EntryArgs']]] static_nat66_entries: static NAT
        :param pulumi.Input[Sequence[pulumi.Input['CiscoVpnInterfaceFeatureTemplateStaticNatEntryArgs']]] static_nat_entries: Configure static NAT entries
        :param pulumi.Input[Sequence[pulumi.Input['CiscoVpnInterfaceFeatureTemplateStaticPortForwardEntryArgs']]] static_port_forward_entries: Configure Port Forward entries
        :param pulumi.Input[_builtins.int] static_sgt: SGT value between 2 and 65519.
                 - Range: `2`-`65519`
        :param pulumi.Input[_builtins.bool] static_sgt_trusted: Indicates that the interface is trustworthy for CTS.
                 - Default value: `false`
        :param pulumi.Input[_builtins.str] static_sgt_variable: Variable name
        :param pulumi.Input[_builtins.int] tcp_mss_adjust: TCP MSS on SYN packets, in bytes
                 - Range: `500`-`1460`
        :param pulumi.Input[_builtins.str] tcp_mss_adjust_variable: Variable name
        :param pulumi.Input[_builtins.int] tcp_timeout: Set NAT TCP session timeout, in minutes
                 - Range: `1`-`8947`
                 - Default value: `60`
        :param pulumi.Input[_builtins.str] tcp_timeout_variable: Variable name
        :param pulumi.Input[_builtins.str] template_type: The template type
        :param pulumi.Input[_builtins.str] tloc_extension: Extends a local TLOC to a remote node only for vpn 0
        :param pulumi.Input[_builtins.str] tloc_extension_variable: Variable name
        :param pulumi.Input[_builtins.str] tracker_variable: Variable name
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] trackers: Enable tracker for this interface
        :param pulumi.Input[_builtins.int] tunnel_bandwidth: Tunnels Bandwidth Percent
                 - Range: `1`-`99`
                 - Default value: `50`
        :param pulumi.Input[_builtins.str] tunnel_bandwidth_variable: Variable name
        :param pulumi.Input[_builtins.bool] tunnel_interface_allow_all: Allow all traffic. Overrides all other allow-service options if allow-service all is set
                 - Default value: `false`
        :param pulumi.Input[_builtins.str] tunnel_interface_allow_all_variable: Variable name
        :param pulumi.Input[_builtins.bool] tunnel_interface_allow_bgp: Allow/deny BGP
                 - Default value: `false`
        :param pulumi.Input[_builtins.str] tunnel_interface_allow_bgp_variable: Variable name
        :param pulumi.Input[_builtins.bool] tunnel_interface_allow_dhcp: Allow/Deny DHCP
                 - Default value: `true`
        :param pulumi.Input[_builtins.str] tunnel_interface_allow_dhcp_variable: Variable name
        :param pulumi.Input[_builtins.bool] tunnel_interface_allow_dns: Allow/Deny DNS
                 - Default value: `true`
        :param pulumi.Input[_builtins.str] tunnel_interface_allow_dns_variable: Variable name
        :param pulumi.Input[_builtins.bool] tunnel_interface_allow_https: Allow/Deny Https
                 - Default value: `true`
        :param pulumi.Input[_builtins.str] tunnel_interface_allow_https_variable: Variable name
        :param pulumi.Input[_builtins.bool] tunnel_interface_allow_icmp: Allow/Deny ICMP
                 - Default value: `true`
        :param pulumi.Input[_builtins.str] tunnel_interface_allow_icmp_variable: Variable name
        :param pulumi.Input[_builtins.bool] tunnel_interface_allow_netconf: Allow/Deny NETCONF
                 - Default value: `false`
        :param pulumi.Input[_builtins.str] tunnel_interface_allow_netconf_variable: Variable name
        :param pulumi.Input[_builtins.bool] tunnel_interface_allow_ntp: Allow/Deny NTP
                 - Default value: `false`
        :param pulumi.Input[_builtins.str] tunnel_interface_allow_ntp_variable: Variable name
        :param pulumi.Input[_builtins.bool] tunnel_interface_allow_ospf: Allow/Deny OSPF
                 - Default value: `false`
        :param pulumi.Input[_builtins.str] tunnel_interface_allow_ospf_variable: Variable name
        :param pulumi.Input[_builtins.bool] tunnel_interface_allow_snmp: Allow/Deny SNMP
                 - Default value: `false`
        :param pulumi.Input[_builtins.str] tunnel_interface_allow_snmp_variable: Variable name
        :param pulumi.Input[_builtins.bool] tunnel_interface_allow_ssh: Allow/Deny SSH
                 - Default value: `false`
        :param pulumi.Input[_builtins.str] tunnel_interface_allow_ssh_variable: Variable name
        :param pulumi.Input[_builtins.bool] tunnel_interface_allow_stun: Allow/Deny STUN
                 - Default value: `false`
        :param pulumi.Input[_builtins.str] tunnel_interface_allow_stun_variable: Variable name
        :param pulumi.Input[_builtins.str] tunnel_interface_bind_loopback_tunnel: Bind loopback tunnel interface to a physical interface
        :param pulumi.Input[_builtins.str] tunnel_interface_bind_loopback_tunnel_variable: Variable name
        :param pulumi.Input[_builtins.bool] tunnel_interface_border: Set TLOC as border TLOC
                 - Default value: `false`
        :param pulumi.Input[_builtins.str] tunnel_interface_border_variable: Variable name
        :param pulumi.Input[_builtins.str] tunnel_interface_carrier: Set carrier for TLOC
                 - Choices: `default`, `carrier1`, `carrier2`, `carrier3`, `carrier4`, `carrier5`, `carrier6`, `carrier7`, `carrier8`
                 - Default value: `default`
        :param pulumi.Input[_builtins.str] tunnel_interface_carrier_variable: Variable name
        :param pulumi.Input[_builtins.bool] tunnel_interface_clear_dont_fragment: Enable clear dont fragment (Currently Only SDWAN Tunnel Interface)
                 - Default value: `false`
        :param pulumi.Input[_builtins.str] tunnel_interface_clear_dont_fragment_variable: Variable name
        :param pulumi.Input[_builtins.str] tunnel_interface_color: Set color for TLOC
                 - Choices: `default`, `mpls`, `metro-ethernet`, `biz-internet`, `public-internet`, `lte`, `3g`, `red`, `green`, `blue`, `gold`, `silver`, `bronze`, `custom1`, `custom2`, `custom3`, `private1`, `private2`, `private3`, `private4`, `private5`, `private6`
                 - Default value: `default`
        :param pulumi.Input[_builtins.bool] tunnel_interface_color_restrict: Restrict this TLOC behavior
                 - Default value: `false`
        :param pulumi.Input[_builtins.str] tunnel_interface_color_restrict_variable: Variable name
        :param pulumi.Input[_builtins.str] tunnel_interface_color_variable: Variable name
        :param pulumi.Input[_builtins.bool] tunnel_interface_control_connections: Allow Control Connection
                 - Default value: `true`
        :param pulumi.Input[_builtins.str] tunnel_interface_control_connections_variable: Variable name
        :param pulumi.Input[Sequence[pulumi.Input['CiscoVpnInterfaceFeatureTemplateTunnelInterfaceEncapsulationArgs']]] tunnel_interface_encapsulations: Encapsulation for TLOC
        :param pulumi.Input[_builtins.str] tunnel_interface_exclude_controller_group_list_variable: Variable name
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.int]]] tunnel_interface_exclude_controller_group_lists: Exclude the following controller groups defined in this list
        :param pulumi.Input[_builtins.str] tunnel_interface_gre_tunnel_destination_ip: Extend the TLOC to a remote node over GRE tunnel
        :param pulumi.Input[_builtins.str] tunnel_interface_gre_tunnel_destination_ip_variable: Variable name
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.int]]] tunnel_interface_groups: List of groups
        :param pulumi.Input[_builtins.str] tunnel_interface_groups_variable: Variable name
        :param pulumi.Input[_builtins.int] tunnel_interface_hello_interval: Set time period of control hello packets <100..600000> milli seconds
                 - Range: `100`-`600000`
                 - Default value: `1000`
        :param pulumi.Input[_builtins.str] tunnel_interface_hello_interval_variable: Variable name
        :param pulumi.Input[_builtins.int] tunnel_interface_hello_tolerance: Set tolerance of control hello packets <12..6000> seconds
                 - Range: `12`-`6000`
                 - Default value: `12`
        :param pulumi.Input[_builtins.str] tunnel_interface_hello_tolerance_variable: Variable name
        :param pulumi.Input[_builtins.bool] tunnel_interface_last_resort_circuit: Set TLOC as last resort
                 - Default value: `false`
        :param pulumi.Input[_builtins.str] tunnel_interface_last_resort_circuit_variable: Variable name
        :param pulumi.Input[_builtins.bool] tunnel_interface_low_bandwidth_link: Set the interface as a low-bandwidth circuit
                 - Default value: `false`
        :param pulumi.Input[_builtins.str] tunnel_interface_low_bandwidth_link_variable: Variable name
        :param pulumi.Input[_builtins.int] tunnel_interface_max_control_connections: Set the maximum number of control connections for this TLOC
                 - Range: `0`-`100`
        :param pulumi.Input[_builtins.str] tunnel_interface_max_control_connections_variable: Variable name
        :param pulumi.Input[_builtins.int] tunnel_interface_nat_refresh_interval: Set time period of nat refresh packets <1...60> seconds
                 - Range: `1`-`60`
                 - Default value: `5`
        :param pulumi.Input[_builtins.str] tunnel_interface_nat_refresh_interval_variable: Variable name
        :param pulumi.Input[_builtins.bool] tunnel_interface_network_broadcast: Accept and respond to network-prefix-directed broadcasts)
                 - Default value: `false`
        :param pulumi.Input[_builtins.str] tunnel_interface_network_broadcast_variable: Variable name
        :param pulumi.Input[_builtins.bool] tunnel_interface_port_hop: Disallow port hopping on the tunnel interface
                 - Default value: `true`
        :param pulumi.Input[_builtins.str] tunnel_interface_port_hop_variable: Variable name
        :param pulumi.Input[_builtins.bool] tunnel_interface_propagate_sgt: CTS SGT Propagation configuration
                 - Default value: `false`
        :param pulumi.Input[_builtins.str] tunnel_interface_propagate_sgt_variable: Variable name
        :param pulumi.Input[_builtins.int] tunnel_interface_tunnel_tcp_mss: Tunnel TCP MSS on SYN packets, in bytes
                 - Range: `500`-`1460`
        :param pulumi.Input[_builtins.str] tunnel_interface_tunnel_tcp_mss_variable: Variable name
        :param pulumi.Input[_builtins.bool] tunnel_interface_vbond_as_stun_server: Put this wan interface in STUN mode only
                 - Default value: `false`
        :param pulumi.Input[_builtins.str] tunnel_interface_vbond_as_stun_server_variable: Variable name
        :param pulumi.Input[_builtins.int] tunnel_interface_vmanage_connection_preference: Set interface preference for control connection to vManage <0..8>
                 - Range: `0`-`8`
                 - Default value: `5`
        :param pulumi.Input[_builtins.str] tunnel_interface_vmanage_connection_preference_variable: Variable name
        :param pulumi.Input[_builtins.str] tunnel_qos_mode: Set tunnel QoS mode
                 - Choices: `hub`, `spoke`
        :param pulumi.Input[_builtins.str] tunnel_qos_mode_variable: Variable name
        :param pulumi.Input[_builtins.int] udp_timeout: Set NAT UDP session timeout, in minutes
                 - Range: `1`-`8947`
                 - Default value: `1`
        :param pulumi.Input[_builtins.str] udp_timeout_variable: Variable name
        :param pulumi.Input[_builtins.int] version: The version of the feature template
        """
        if access_lists is not None:
            pulumi.set(__self__, "access_lists", access_lists)
        if address is not None:
            pulumi.set(__self__, "address", address)
        if address_variable is not None:
            pulumi.set(__self__, "address_variable", address_variable)
        if arp_timeout is not None:
            pulumi.set(__self__, "arp_timeout", arp_timeout)
        if arp_timeout_variable is not None:
            pulumi.set(__self__, "arp_timeout_variable", arp_timeout_variable)
        if auto_bandwidth_detect is not None:
            pulumi.set(__self__, "auto_bandwidth_detect", auto_bandwidth_detect)
        if auto_bandwidth_detect_variable is not None:
            pulumi.set(__self__, "auto_bandwidth_detect_variable", auto_bandwidth_detect_variable)
        if autonegotiate is not None:
            pulumi.set(__self__, "autonegotiate", autonegotiate)
        if autonegotiate_variable is not None:
            pulumi.set(__self__, "autonegotiate_variable", autonegotiate_variable)
        if bandwidth_downstream is not None:
            pulumi.set(__self__, "bandwidth_downstream", bandwidth_downstream)
        if bandwidth_downstream_variable is not None:
            pulumi.set(__self__, "bandwidth_downstream_variable", bandwidth_downstream_variable)
        if bandwidth_upstream is not None:
            pulumi.set(__self__, "bandwidth_upstream", bandwidth_upstream)
        if bandwidth_upstream_variable is not None:
            pulumi.set(__self__, "bandwidth_upstream_variable", bandwidth_upstream_variable)
        if block_non_source_ip is not None:
            pulumi.set(__self__, "block_non_source_ip", block_non_source_ip)
        if block_non_source_ip_variable is not None:
            pulumi.set(__self__, "block_non_source_ip_variable", block_non_source_ip_variable)
        if core_region is not None:
            pulumi.set(__self__, "core_region", core_region)
        if core_region_variable is not None:
            pulumi.set(__self__, "core_region_variable", core_region_variable)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if device_types is not None:
            pulumi.set(__self__, "device_types", device_types)
        if dhcp is not None:
            pulumi.set(__self__, "dhcp", dhcp)
        if dhcp_distance is not None:
            pulumi.set(__self__, "dhcp_distance", dhcp_distance)
        if dhcp_distance_variable is not None:
            pulumi.set(__self__, "dhcp_distance_variable", dhcp_distance_variable)
        if dhcp_variable is not None:
            pulumi.set(__self__, "dhcp_variable", dhcp_variable)
        if dhcpv6 is not None:
            pulumi.set(__self__, "dhcpv6", dhcpv6)
        if dhcpv6_variable is not None:
            pulumi.set(__self__, "dhcpv6_variable", dhcpv6_variable)
        if duplex is not None:
            pulumi.set(__self__, "duplex", duplex)
        if duplex_variable is not None:
            pulumi.set(__self__, "duplex_variable", duplex_variable)
        if enable_core_region is not None:
            pulumi.set(__self__, "enable_core_region", enable_core_region)
        if enable_sgt is not None:
            pulumi.set(__self__, "enable_sgt", enable_sgt)
        if gre_tunnel_source_ip is not None:
            pulumi.set(__self__, "gre_tunnel_source_ip", gre_tunnel_source_ip)
        if gre_tunnel_source_ip_variable is not None:
            pulumi.set(__self__, "gre_tunnel_source_ip_variable", gre_tunnel_source_ip_variable)
        if gre_tunnel_xconnect is not None:
            pulumi.set(__self__, "gre_tunnel_xconnect", gre_tunnel_xconnect)
        if gre_tunnel_xconnect_variable is not None:
            pulumi.set(__self__, "gre_tunnel_xconnect_variable", gre_tunnel_xconnect_variable)
        if icmp_redirect_disable is not None:
            pulumi.set(__self__, "icmp_redirect_disable", icmp_redirect_disable)
        if icmp_redirect_disable_variable is not None:
            pulumi.set(__self__, "icmp_redirect_disable_variable", icmp_redirect_disable_variable)
        if interface_description is not None:
            pulumi.set(__self__, "interface_description", interface_description)
        if interface_description_variable is not None:
            pulumi.set(__self__, "interface_description_variable", interface_description_variable)
        if interface_mtu is not None:
            pulumi.set(__self__, "interface_mtu", interface_mtu)
        if interface_mtu_variable is not None:
            pulumi.set(__self__, "interface_mtu_variable", interface_mtu_variable)
        if interface_name is not None:
            pulumi.set(__self__, "interface_name", interface_name)
        if interface_name_variable is not None:
            pulumi.set(__self__, "interface_name_variable", interface_name_variable)
        if ip_directed_broadcast is not None:
            pulumi.set(__self__, "ip_directed_broadcast", ip_directed_broadcast)
        if ip_directed_broadcast_variable is not None:
            pulumi.set(__self__, "ip_directed_broadcast_variable", ip_directed_broadcast_variable)
        if ip_mtu is not None:
            pulumi.set(__self__, "ip_mtu", ip_mtu)
        if ip_mtu_variable is not None:
            pulumi.set(__self__, "ip_mtu_variable", ip_mtu_variable)
        if iperf_server is not None:
            pulumi.set(__self__, "iperf_server", iperf_server)
        if iperf_server_variable is not None:
            pulumi.set(__self__, "iperf_server_variable", iperf_server_variable)
        if ipv4_dhcp_helper_variable is not None:
            pulumi.set(__self__, "ipv4_dhcp_helper_variable", ipv4_dhcp_helper_variable)
        if ipv4_dhcp_helpers is not None:
            pulumi.set(__self__, "ipv4_dhcp_helpers", ipv4_dhcp_helpers)
        if ipv4_secondary_addresses is not None:
            pulumi.set(__self__, "ipv4_secondary_addresses", ipv4_secondary_addresses)
        if ipv4_vrrps is not None:
            pulumi.set(__self__, "ipv4_vrrps", ipv4_vrrps)
        if ipv6_access_lists is not None:
            pulumi.set(__self__, "ipv6_access_lists", ipv6_access_lists)
        if ipv6_address is not None:
            pulumi.set(__self__, "ipv6_address", ipv6_address)
        if ipv6_address_variable is not None:
            pulumi.set(__self__, "ipv6_address_variable", ipv6_address_variable)
        if ipv6_dhcp_helpers is not None:
            pulumi.set(__self__, "ipv6_dhcp_helpers", ipv6_dhcp_helpers)
        if ipv6_nat is not None:
            pulumi.set(__self__, "ipv6_nat", ipv6_nat)
        if ipv6_nat_variable is not None:
            pulumi.set(__self__, "ipv6_nat_variable", ipv6_nat_variable)
        if ipv6_secondary_addresses is not None:
            pulumi.set(__self__, "ipv6_secondary_addresses", ipv6_secondary_addresses)
        if ipv6_vrrps is not None:
            pulumi.set(__self__, "ipv6_vrrps", ipv6_vrrps)
        if load_interval is not None:
            pulumi.set(__self__, "load_interval", load_interval)
        if load_interval_variable is not None:
            pulumi.set(__self__, "load_interval_variable", load_interval_variable)
        if mac_address is not None:
            pulumi.set(__self__, "mac_address", mac_address)
        if mac_address_variable is not None:
            pulumi.set(__self__, "mac_address_variable", mac_address_variable)
        if media_type is not None:
            pulumi.set(__self__, "media_type", media_type)
        if media_type_variable is not None:
            pulumi.set(__self__, "media_type_variable", media_type_variable)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if nat is not None:
            pulumi.set(__self__, "nat", nat)
        if nat64_interface is not None:
            pulumi.set(__self__, "nat64_interface", nat64_interface)
        if nat66_interface is not None:
            pulumi.set(__self__, "nat66_interface", nat66_interface)
        if nat_inside_source_loopback_interface is not None:
            pulumi.set(__self__, "nat_inside_source_loopback_interface", nat_inside_source_loopback_interface)
        if nat_inside_source_loopback_interface_variable is not None:
            pulumi.set(__self__, "nat_inside_source_loopback_interface_variable", nat_inside_source_loopback_interface_variable)
        if nat_overload is not None:
            pulumi.set(__self__, "nat_overload", nat_overload)
        if nat_overload_variable is not None:
            pulumi.set(__self__, "nat_overload_variable", nat_overload_variable)
        if nat_pool_prefix_length is not None:
            pulumi.set(__self__, "nat_pool_prefix_length", nat_pool_prefix_length)
        if nat_pool_prefix_length_variable is not None:
            pulumi.set(__self__, "nat_pool_prefix_length_variable", nat_pool_prefix_length_variable)
        if nat_pool_range_end is not None:
            pulumi.set(__self__, "nat_pool_range_end", nat_pool_range_end)
        if nat_pool_range_end_variable is not None:
            pulumi.set(__self__, "nat_pool_range_end_variable", nat_pool_range_end_variable)
        if nat_pool_range_start is not None:
            pulumi.set(__self__, "nat_pool_range_start", nat_pool_range_start)
        if nat_pool_range_start_variable is not None:
            pulumi.set(__self__, "nat_pool_range_start_variable", nat_pool_range_start_variable)
        if nat_type is not None:
            pulumi.set(__self__, "nat_type", nat_type)
        if nat_type_variable is not None:
            pulumi.set(__self__, "nat_type_variable", nat_type_variable)
        if poe is not None:
            pulumi.set(__self__, "poe", poe)
        if poe_variable is not None:
            pulumi.set(__self__, "poe_variable", poe_variable)
        if propagate_sgt is not None:
            pulumi.set(__self__, "propagate_sgt", propagate_sgt)
        if qos_adaptive_bandwidth_downstream is not None:
            pulumi.set(__self__, "qos_adaptive_bandwidth_downstream", qos_adaptive_bandwidth_downstream)
        if qos_adaptive_bandwidth_downstream_variable is not None:
            pulumi.set(__self__, "qos_adaptive_bandwidth_downstream_variable", qos_adaptive_bandwidth_downstream_variable)
        if qos_adaptive_bandwidth_upstream is not None:
            pulumi.set(__self__, "qos_adaptive_bandwidth_upstream", qos_adaptive_bandwidth_upstream)
        if qos_adaptive_bandwidth_upstream_variable is not None:
            pulumi.set(__self__, "qos_adaptive_bandwidth_upstream_variable", qos_adaptive_bandwidth_upstream_variable)
        if qos_adaptive_max_downstream is not None:
            pulumi.set(__self__, "qos_adaptive_max_downstream", qos_adaptive_max_downstream)
        if qos_adaptive_max_downstream_variable is not None:
            pulumi.set(__self__, "qos_adaptive_max_downstream_variable", qos_adaptive_max_downstream_variable)
        if qos_adaptive_max_upstream is not None:
            pulumi.set(__self__, "qos_adaptive_max_upstream", qos_adaptive_max_upstream)
        if qos_adaptive_max_upstream_variable is not None:
            pulumi.set(__self__, "qos_adaptive_max_upstream_variable", qos_adaptive_max_upstream_variable)
        if qos_adaptive_min_downstream is not None:
            pulumi.set(__self__, "qos_adaptive_min_downstream", qos_adaptive_min_downstream)
        if qos_adaptive_min_downstream_variable is not None:
            pulumi.set(__self__, "qos_adaptive_min_downstream_variable", qos_adaptive_min_downstream_variable)
        if qos_adaptive_min_upstream is not None:
            pulumi.set(__self__, "qos_adaptive_min_upstream", qos_adaptive_min_upstream)
        if qos_adaptive_min_upstream_variable is not None:
            pulumi.set(__self__, "qos_adaptive_min_upstream_variable", qos_adaptive_min_upstream_variable)
        if qos_adaptive_period is not None:
            pulumi.set(__self__, "qos_adaptive_period", qos_adaptive_period)
        if qos_adaptive_period_variable is not None:
            pulumi.set(__self__, "qos_adaptive_period_variable", qos_adaptive_period_variable)
        if qos_map is not None:
            pulumi.set(__self__, "qos_map", qos_map)
        if qos_map_variable is not None:
            pulumi.set(__self__, "qos_map_variable", qos_map_variable)
        if qos_map_vpn is not None:
            pulumi.set(__self__, "qos_map_vpn", qos_map_vpn)
        if qos_map_vpn_variable is not None:
            pulumi.set(__self__, "qos_map_vpn_variable", qos_map_vpn_variable)
        if rewrite_rule_name is not None:
            pulumi.set(__self__, "rewrite_rule_name", rewrite_rule_name)
        if rewrite_rule_name_variable is not None:
            pulumi.set(__self__, "rewrite_rule_name_variable", rewrite_rule_name_variable)
        if secondary_region is not None:
            pulumi.set(__self__, "secondary_region", secondary_region)
        if secondary_region_variable is not None:
            pulumi.set(__self__, "secondary_region_variable", secondary_region_variable)
        if sgt_enforcement is not None:
            pulumi.set(__self__, "sgt_enforcement", sgt_enforcement)
        if sgt_enforcement_sgt is not None:
            pulumi.set(__self__, "sgt_enforcement_sgt", sgt_enforcement_sgt)
        if sgt_enforcement_sgt_variable is not None:
            pulumi.set(__self__, "sgt_enforcement_sgt_variable", sgt_enforcement_sgt_variable)
        if shaping_rate is not None:
            pulumi.set(__self__, "shaping_rate", shaping_rate)
        if shaping_rate_variable is not None:
            pulumi.set(__self__, "shaping_rate_variable", shaping_rate_variable)
        if shutdown is not None:
            pulumi.set(__self__, "shutdown", shutdown)
        if shutdown_variable is not None:
            pulumi.set(__self__, "shutdown_variable", shutdown_variable)
        if speed is not None:
            pulumi.set(__self__, "speed", speed)
        if speed_variable is not None:
            pulumi.set(__self__, "speed_variable", speed_variable)
        if static_arps is not None:
            pulumi.set(__self__, "static_arps", static_arps)
        if static_nat66_entries is not None:
            pulumi.set(__self__, "static_nat66_entries", static_nat66_entries)
        if static_nat_entries is not None:
            pulumi.set(__self__, "static_nat_entries", static_nat_entries)
        if static_port_forward_entries is not None:
            pulumi.set(__self__, "static_port_forward_entries", static_port_forward_entries)
        if static_sgt is not None:
            pulumi.set(__self__, "static_sgt", static_sgt)
        if static_sgt_trusted is not None:
            pulumi.set(__self__, "static_sgt_trusted", static_sgt_trusted)
        if static_sgt_variable is not None:
            pulumi.set(__self__, "static_sgt_variable", static_sgt_variable)
        if tcp_mss_adjust is not None:
            pulumi.set(__self__, "tcp_mss_adjust", tcp_mss_adjust)
        if tcp_mss_adjust_variable is not None:
            pulumi.set(__self__, "tcp_mss_adjust_variable", tcp_mss_adjust_variable)
        if tcp_timeout is not None:
            pulumi.set(__self__, "tcp_timeout", tcp_timeout)
        if tcp_timeout_variable is not None:
            pulumi.set(__self__, "tcp_timeout_variable", tcp_timeout_variable)
        if template_type is not None:
            pulumi.set(__self__, "template_type", template_type)
        if tloc_extension is not None:
            pulumi.set(__self__, "tloc_extension", tloc_extension)
        if tloc_extension_variable is not None:
            pulumi.set(__self__, "tloc_extension_variable", tloc_extension_variable)
        if tracker_variable is not None:
            pulumi.set(__self__, "tracker_variable", tracker_variable)
        if trackers is not None:
            pulumi.set(__self__, "trackers", trackers)
        if tunnel_bandwidth is not None:
            pulumi.set(__self__, "tunnel_bandwidth", tunnel_bandwidth)
        if tunnel_bandwidth_variable is not None:
            pulumi.set(__self__, "tunnel_bandwidth_variable", tunnel_bandwidth_variable)
        if tunnel_interface_allow_all is not None:
            pulumi.set(__self__, "tunnel_interface_allow_all", tunnel_interface_allow_all)
        if tunnel_interface_allow_all_variable is not None:
            pulumi.set(__self__, "tunnel_interface_allow_all_variable", tunnel_interface_allow_all_variable)
        if tunnel_interface_allow_bgp is not None:
            pulumi.set(__self__, "tunnel_interface_allow_bgp", tunnel_interface_allow_bgp)
        if tunnel_interface_allow_bgp_variable is not None:
            pulumi.set(__self__, "tunnel_interface_allow_bgp_variable", tunnel_interface_allow_bgp_variable)
        if tunnel_interface_allow_dhcp is not None:
            pulumi.set(__self__, "tunnel_interface_allow_dhcp", tunnel_interface_allow_dhcp)
        if tunnel_interface_allow_dhcp_variable is not None:
            pulumi.set(__self__, "tunnel_interface_allow_dhcp_variable", tunnel_interface_allow_dhcp_variable)
        if tunnel_interface_allow_dns is not None:
            pulumi.set(__self__, "tunnel_interface_allow_dns", tunnel_interface_allow_dns)
        if tunnel_interface_allow_dns_variable is not None:
            pulumi.set(__self__, "tunnel_interface_allow_dns_variable", tunnel_interface_allow_dns_variable)
        if tunnel_interface_allow_https is not None:
            pulumi.set(__self__, "tunnel_interface_allow_https", tunnel_interface_allow_https)
        if tunnel_interface_allow_https_variable is not None:
            pulumi.set(__self__, "tunnel_interface_allow_https_variable", tunnel_interface_allow_https_variable)
        if tunnel_interface_allow_icmp is not None:
            pulumi.set(__self__, "tunnel_interface_allow_icmp", tunnel_interface_allow_icmp)
        if tunnel_interface_allow_icmp_variable is not None:
            pulumi.set(__self__, "tunnel_interface_allow_icmp_variable", tunnel_interface_allow_icmp_variable)
        if tunnel_interface_allow_netconf is not None:
            pulumi.set(__self__, "tunnel_interface_allow_netconf", tunnel_interface_allow_netconf)
        if tunnel_interface_allow_netconf_variable is not None:
            pulumi.set(__self__, "tunnel_interface_allow_netconf_variable", tunnel_interface_allow_netconf_variable)
        if tunnel_interface_allow_ntp is not None:
            pulumi.set(__self__, "tunnel_interface_allow_ntp", tunnel_interface_allow_ntp)
        if tunnel_interface_allow_ntp_variable is not None:
            pulumi.set(__self__, "tunnel_interface_allow_ntp_variable", tunnel_interface_allow_ntp_variable)
        if tunnel_interface_allow_ospf is not None:
            pulumi.set(__self__, "tunnel_interface_allow_ospf", tunnel_interface_allow_ospf)
        if tunnel_interface_allow_ospf_variable is not None:
            pulumi.set(__self__, "tunnel_interface_allow_ospf_variable", tunnel_interface_allow_ospf_variable)
        if tunnel_interface_allow_snmp is not None:
            pulumi.set(__self__, "tunnel_interface_allow_snmp", tunnel_interface_allow_snmp)
        if tunnel_interface_allow_snmp_variable is not None:
            pulumi.set(__self__, "tunnel_interface_allow_snmp_variable", tunnel_interface_allow_snmp_variable)
        if tunnel_interface_allow_ssh is not None:
            pulumi.set(__self__, "tunnel_interface_allow_ssh", tunnel_interface_allow_ssh)
        if tunnel_interface_allow_ssh_variable is not None:
            pulumi.set(__self__, "tunnel_interface_allow_ssh_variable", tunnel_interface_allow_ssh_variable)
        if tunnel_interface_allow_stun is not None:
            pulumi.set(__self__, "tunnel_interface_allow_stun", tunnel_interface_allow_stun)
        if tunnel_interface_allow_stun_variable is not None:
            pulumi.set(__self__, "tunnel_interface_allow_stun_variable", tunnel_interface_allow_stun_variable)
        if tunnel_interface_bind_loopback_tunnel is not None:
            pulumi.set(__self__, "tunnel_interface_bind_loopback_tunnel", tunnel_interface_bind_loopback_tunnel)
        if tunnel_interface_bind_loopback_tunnel_variable is not None:
            pulumi.set(__self__, "tunnel_interface_bind_loopback_tunnel_variable", tunnel_interface_bind_loopback_tunnel_variable)
        if tunnel_interface_border is not None:
            pulumi.set(__self__, "tunnel_interface_border", tunnel_interface_border)
        if tunnel_interface_border_variable is not None:
            pulumi.set(__self__, "tunnel_interface_border_variable", tunnel_interface_border_variable)
        if tunnel_interface_carrier is not None:
            pulumi.set(__self__, "tunnel_interface_carrier", tunnel_interface_carrier)
        if tunnel_interface_carrier_variable is not None:
            pulumi.set(__self__, "tunnel_interface_carrier_variable", tunnel_interface_carrier_variable)
        if tunnel_interface_clear_dont_fragment is not None:
            pulumi.set(__self__, "tunnel_interface_clear_dont_fragment", tunnel_interface_clear_dont_fragment)
        if tunnel_interface_clear_dont_fragment_variable is not None:
            pulumi.set(__self__, "tunnel_interface_clear_dont_fragment_variable", tunnel_interface_clear_dont_fragment_variable)
        if tunnel_interface_color is not None:
            pulumi.set(__self__, "tunnel_interface_color", tunnel_interface_color)
        if tunnel_interface_color_restrict is not None:
            pulumi.set(__self__, "tunnel_interface_color_restrict", tunnel_interface_color_restrict)
        if tunnel_interface_color_restrict_variable is not None:
            pulumi.set(__self__, "tunnel_interface_color_restrict_variable", tunnel_interface_color_restrict_variable)
        if tunnel_interface_color_variable is not None:
            pulumi.set(__self__, "tunnel_interface_color_variable", tunnel_interface_color_variable)
        if tunnel_interface_control_connections is not None:
            pulumi.set(__self__, "tunnel_interface_control_connections", tunnel_interface_control_connections)
        if tunnel_interface_control_connections_variable is not None:
            pulumi.set(__self__, "tunnel_interface_control_connections_variable", tunnel_interface_control_connections_variable)
        if tunnel_interface_encapsulations is not None:
            pulumi.set(__self__, "tunnel_interface_encapsulations", tunnel_interface_encapsulations)
        if tunnel_interface_exclude_controller_group_list_variable is not None:
            pulumi.set(__self__, "tunnel_interface_exclude_controller_group_list_variable", tunnel_interface_exclude_controller_group_list_variable)
        if tunnel_interface_exclude_controller_group_lists is not None:
            pulumi.set(__self__, "tunnel_interface_exclude_controller_group_lists", tunnel_interface_exclude_controller_group_lists)
        if tunnel_interface_gre_tunnel_destination_ip is not None:
            pulumi.set(__self__, "tunnel_interface_gre_tunnel_destination_ip", tunnel_interface_gre_tunnel_destination_ip)
        if tunnel_interface_gre_tunnel_destination_ip_variable is not None:
            pulumi.set(__self__, "tunnel_interface_gre_tunnel_destination_ip_variable", tunnel_interface_gre_tunnel_destination_ip_variable)
        if tunnel_interface_groups is not None:
            pulumi.set(__self__, "tunnel_interface_groups", tunnel_interface_groups)
        if tunnel_interface_groups_variable is not None:
            pulumi.set(__self__, "tunnel_interface_groups_variable", tunnel_interface_groups_variable)
        if tunnel_interface_hello_interval is not None:
            pulumi.set(__self__, "tunnel_interface_hello_interval", tunnel_interface_hello_interval)
        if tunnel_interface_hello_interval_variable is not None:
            pulumi.set(__self__, "tunnel_interface_hello_interval_variable", tunnel_interface_hello_interval_variable)
        if tunnel_interface_hello_tolerance is not None:
            pulumi.set(__self__, "tunnel_interface_hello_tolerance", tunnel_interface_hello_tolerance)
        if tunnel_interface_hello_tolerance_variable is not None:
            pulumi.set(__self__, "tunnel_interface_hello_tolerance_variable", tunnel_interface_hello_tolerance_variable)
        if tunnel_interface_last_resort_circuit is not None:
            pulumi.set(__self__, "tunnel_interface_last_resort_circuit", tunnel_interface_last_resort_circuit)
        if tunnel_interface_last_resort_circuit_variable is not None:
            pulumi.set(__self__, "tunnel_interface_last_resort_circuit_variable", tunnel_interface_last_resort_circuit_variable)
        if tunnel_interface_low_bandwidth_link is not None:
            pulumi.set(__self__, "tunnel_interface_low_bandwidth_link", tunnel_interface_low_bandwidth_link)
        if tunnel_interface_low_bandwidth_link_variable is not None:
            pulumi.set(__self__, "tunnel_interface_low_bandwidth_link_variable", tunnel_interface_low_bandwidth_link_variable)
        if tunnel_interface_max_control_connections is not None:
            pulumi.set(__self__, "tunnel_interface_max_control_connections", tunnel_interface_max_control_connections)
        if tunnel_interface_max_control_connections_variable is not None:
            pulumi.set(__self__, "tunnel_interface_max_control_connections_variable", tunnel_interface_max_control_connections_variable)
        if tunnel_interface_nat_refresh_interval is not None:
            pulumi.set(__self__, "tunnel_interface_nat_refresh_interval", tunnel_interface_nat_refresh_interval)
        if tunnel_interface_nat_refresh_interval_variable is not None:
            pulumi.set(__self__, "tunnel_interface_nat_refresh_interval_variable", tunnel_interface_nat_refresh_interval_variable)
        if tunnel_interface_network_broadcast is not None:
            pulumi.set(__self__, "tunnel_interface_network_broadcast", tunnel_interface_network_broadcast)
        if tunnel_interface_network_broadcast_variable is not None:
            pulumi.set(__self__, "tunnel_interface_network_broadcast_variable", tunnel_interface_network_broadcast_variable)
        if tunnel_interface_port_hop is not None:
            pulumi.set(__self__, "tunnel_interface_port_hop", tunnel_interface_port_hop)
        if tunnel_interface_port_hop_variable is not None:
            pulumi.set(__self__, "tunnel_interface_port_hop_variable", tunnel_interface_port_hop_variable)
        if tunnel_interface_propagate_sgt is not None:
            pulumi.set(__self__, "tunnel_interface_propagate_sgt", tunnel_interface_propagate_sgt)
        if tunnel_interface_propagate_sgt_variable is not None:
            pulumi.set(__self__, "tunnel_interface_propagate_sgt_variable", tunnel_interface_propagate_sgt_variable)
        if tunnel_interface_tunnel_tcp_mss is not None:
            pulumi.set(__self__, "tunnel_interface_tunnel_tcp_mss", tunnel_interface_tunnel_tcp_mss)
        if tunnel_interface_tunnel_tcp_mss_variable is not None:
            pulumi.set(__self__, "tunnel_interface_tunnel_tcp_mss_variable", tunnel_interface_tunnel_tcp_mss_variable)
        if tunnel_interface_vbond_as_stun_server is not None:
            pulumi.set(__self__, "tunnel_interface_vbond_as_stun_server", tunnel_interface_vbond_as_stun_server)
        if tunnel_interface_vbond_as_stun_server_variable is not None:
            pulumi.set(__self__, "tunnel_interface_vbond_as_stun_server_variable", tunnel_interface_vbond_as_stun_server_variable)
        if tunnel_interface_vmanage_connection_preference is not None:
            pulumi.set(__self__, "tunnel_interface_vmanage_connection_preference", tunnel_interface_vmanage_connection_preference)
        if tunnel_interface_vmanage_connection_preference_variable is not None:
            pulumi.set(__self__, "tunnel_interface_vmanage_connection_preference_variable", tunnel_interface_vmanage_connection_preference_variable)
        if tunnel_qos_mode is not None:
            pulumi.set(__self__, "tunnel_qos_mode", tunnel_qos_mode)
        if tunnel_qos_mode_variable is not None:
            pulumi.set(__self__, "tunnel_qos_mode_variable", tunnel_qos_mode_variable)
        if udp_timeout is not None:
            pulumi.set(__self__, "udp_timeout", udp_timeout)
        if udp_timeout_variable is not None:
            pulumi.set(__self__, "udp_timeout_variable", udp_timeout_variable)
        if version is not None:
            pulumi.set(__self__, "version", version)

    @_builtins.property
    @pulumi.getter(name="accessLists")
    def access_lists(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['CiscoVpnInterfaceFeatureTemplateAccessListArgs']]]]:
        """
        Apply ACL
        """
        return pulumi.get(self, "access_lists")

    @access_lists.setter
    def access_lists(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['CiscoVpnInterfaceFeatureTemplateAccessListArgs']]]]):
        pulumi.set(self, "access_lists", value)

    @_builtins.property
    @pulumi.getter
    def address(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Assign IPv4 address
        """
        return pulumi.get(self, "address")

    @address.setter
    def address(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "address", value)

    @_builtins.property
    @pulumi.getter(name="addressVariable")
    def address_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "address_variable")

    @address_variable.setter
    def address_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "address_variable", value)

    @_builtins.property
    @pulumi.getter(name="arpTimeout")
    def arp_timeout(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        Timeout value for dynamically learned ARP entries, <0..2678400> seconds
          - Range: `0`-`2147483`
          - Default value: `1200`
        """
        return pulumi.get(self, "arp_timeout")

    @arp_timeout.setter
    def arp_timeout(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "arp_timeout", value)

    @_builtins.property
    @pulumi.getter(name="arpTimeoutVariable")
    def arp_timeout_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "arp_timeout_variable")

    @arp_timeout_variable.setter
    def arp_timeout_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "arp_timeout_variable", value)

    @_builtins.property
    @pulumi.getter(name="autoBandwidthDetect")
    def auto_bandwidth_detect(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Interface auto detect bandwidth
          - Default value: `false`
        """
        return pulumi.get(self, "auto_bandwidth_detect")

    @auto_bandwidth_detect.setter
    def auto_bandwidth_detect(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "auto_bandwidth_detect", value)

    @_builtins.property
    @pulumi.getter(name="autoBandwidthDetectVariable")
    def auto_bandwidth_detect_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "auto_bandwidth_detect_variable")

    @auto_bandwidth_detect_variable.setter
    def auto_bandwidth_detect_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "auto_bandwidth_detect_variable", value)

    @_builtins.property
    @pulumi.getter
    def autonegotiate(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Link autonegotiation
        """
        return pulumi.get(self, "autonegotiate")

    @autonegotiate.setter
    def autonegotiate(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "autonegotiate", value)

    @_builtins.property
    @pulumi.getter(name="autonegotiateVariable")
    def autonegotiate_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "autonegotiate_variable")

    @autonegotiate_variable.setter
    def autonegotiate_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "autonegotiate_variable", value)

    @_builtins.property
    @pulumi.getter(name="bandwidthDownstream")
    def bandwidth_downstream(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        Interface downstream bandwidth capacity, in kbps
          - Range: `1`-`2147483647`
        """
        return pulumi.get(self, "bandwidth_downstream")

    @bandwidth_downstream.setter
    def bandwidth_downstream(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "bandwidth_downstream", value)

    @_builtins.property
    @pulumi.getter(name="bandwidthDownstreamVariable")
    def bandwidth_downstream_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "bandwidth_downstream_variable")

    @bandwidth_downstream_variable.setter
    def bandwidth_downstream_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "bandwidth_downstream_variable", value)

    @_builtins.property
    @pulumi.getter(name="bandwidthUpstream")
    def bandwidth_upstream(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        Interface upstream bandwidth capacity, in kbps
          - Range: `1`-`2147483647`
        """
        return pulumi.get(self, "bandwidth_upstream")

    @bandwidth_upstream.setter
    def bandwidth_upstream(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "bandwidth_upstream", value)

    @_builtins.property
    @pulumi.getter(name="bandwidthUpstreamVariable")
    def bandwidth_upstream_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "bandwidth_upstream_variable")

    @bandwidth_upstream_variable.setter
    def bandwidth_upstream_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "bandwidth_upstream_variable", value)

    @_builtins.property
    @pulumi.getter(name="blockNonSourceIp")
    def block_non_source_ip(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Block packets originating from IP address that is not from this source
          - Default value: `false`
        """
        return pulumi.get(self, "block_non_source_ip")

    @block_non_source_ip.setter
    def block_non_source_ip(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "block_non_source_ip", value)

    @_builtins.property
    @pulumi.getter(name="blockNonSourceIpVariable")
    def block_non_source_ip_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "block_non_source_ip_variable")

    @block_non_source_ip_variable.setter
    def block_non_source_ip_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "block_non_source_ip_variable", value)

    @_builtins.property
    @pulumi.getter(name="coreRegion")
    def core_region(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Enable core region
          - Choices: `core`, `core-shared`
          - Default value: `core`
        """
        return pulumi.get(self, "core_region")

    @core_region.setter
    def core_region(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "core_region", value)

    @_builtins.property
    @pulumi.getter(name="coreRegionVariable")
    def core_region_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "core_region_variable")

    @core_region_variable.setter
    def core_region_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "core_region_variable", value)

    @_builtins.property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The description of the feature template
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "description", value)

    @_builtins.property
    @pulumi.getter(name="deviceTypes")
    def device_types(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]:
        """
        List of supported device types
          - Choices: `vedge-C8000V`, `vedge-C8300-1N1S-4T2X`, `vedge-C8300-1N1S-6T`, `vedge-C8300-2N2S-6T`, `vedge-C8300-2N2S-4T2X`, `vedge-C8500-12X4QC`, `vedge-C8500-12X`, `vedge-C8500-20X6C`, `vedge-C8500L-8S4X`, `vedge-C8200-1N-4T`, `vedge-C8200L-1N-4T`
        """
        return pulumi.get(self, "device_types")

    @device_types.setter
    def device_types(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "device_types", value)

    @_builtins.property
    @pulumi.getter
    def dhcp(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Enable DHCP
          - Default value: `false`
        """
        return pulumi.get(self, "dhcp")

    @dhcp.setter
    def dhcp(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "dhcp", value)

    @_builtins.property
    @pulumi.getter(name="dhcpDistance")
    def dhcp_distance(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        Set administrative distance for DHCP default route
          - Range: `1`-`65536`
          - Default value: `1`
        """
        return pulumi.get(self, "dhcp_distance")

    @dhcp_distance.setter
    def dhcp_distance(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "dhcp_distance", value)

    @_builtins.property
    @pulumi.getter(name="dhcpDistanceVariable")
    def dhcp_distance_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "dhcp_distance_variable")

    @dhcp_distance_variable.setter
    def dhcp_distance_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "dhcp_distance_variable", value)

    @_builtins.property
    @pulumi.getter(name="dhcpVariable")
    def dhcp_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "dhcp_variable")

    @dhcp_variable.setter
    def dhcp_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "dhcp_variable", value)

    @_builtins.property
    @pulumi.getter
    def dhcpv6(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Enable DHCPv6
          - Default value: `false`
        """
        return pulumi.get(self, "dhcpv6")

    @dhcpv6.setter
    def dhcpv6(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "dhcpv6", value)

    @_builtins.property
    @pulumi.getter(name="dhcpv6Variable")
    def dhcpv6_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "dhcpv6_variable")

    @dhcpv6_variable.setter
    def dhcpv6_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "dhcpv6_variable", value)

    @_builtins.property
    @pulumi.getter
    def duplex(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Duplex mode
          - Choices: `full`, `half`, `auto`
        """
        return pulumi.get(self, "duplex")

    @duplex.setter
    def duplex(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "duplex", value)

    @_builtins.property
    @pulumi.getter(name="duplexVariable")
    def duplex_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "duplex_variable")

    @duplex_variable.setter
    def duplex_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "duplex_variable", value)

    @_builtins.property
    @pulumi.getter(name="enableCoreRegion")
    def enable_core_region(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Enable core region
          - Default value: `false`
        """
        return pulumi.get(self, "enable_core_region")

    @enable_core_region.setter
    def enable_core_region(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "enable_core_region", value)

    @_builtins.property
    @pulumi.getter(name="enableSgt")
    def enable_sgt(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Enables the interface for CTS SGT authorization and forwarding.
          - Default value: `false`
        """
        return pulumi.get(self, "enable_sgt")

    @enable_sgt.setter
    def enable_sgt(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "enable_sgt", value)

    @_builtins.property
    @pulumi.getter(name="greTunnelSourceIp")
    def gre_tunnel_source_ip(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Extend remote TLOC over a GRE tunnel to a local WAN interface
        """
        return pulumi.get(self, "gre_tunnel_source_ip")

    @gre_tunnel_source_ip.setter
    def gre_tunnel_source_ip(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "gre_tunnel_source_ip", value)

    @_builtins.property
    @pulumi.getter(name="greTunnelSourceIpVariable")
    def gre_tunnel_source_ip_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "gre_tunnel_source_ip_variable")

    @gre_tunnel_source_ip_variable.setter
    def gre_tunnel_source_ip_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "gre_tunnel_source_ip_variable", value)

    @_builtins.property
    @pulumi.getter(name="greTunnelXconnect")
    def gre_tunnel_xconnect(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Extend remote TLOC over a GRE tunnel to a local WAN interface
        """
        return pulumi.get(self, "gre_tunnel_xconnect")

    @gre_tunnel_xconnect.setter
    def gre_tunnel_xconnect(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "gre_tunnel_xconnect", value)

    @_builtins.property
    @pulumi.getter(name="greTunnelXconnectVariable")
    def gre_tunnel_xconnect_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "gre_tunnel_xconnect_variable")

    @gre_tunnel_xconnect_variable.setter
    def gre_tunnel_xconnect_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "gre_tunnel_xconnect_variable", value)

    @_builtins.property
    @pulumi.getter(name="icmpRedirectDisable")
    def icmp_redirect_disable(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Set this option to disable the icmp/icmpv6 redirect packets
          - Default value: `true`
        """
        return pulumi.get(self, "icmp_redirect_disable")

    @icmp_redirect_disable.setter
    def icmp_redirect_disable(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "icmp_redirect_disable", value)

    @_builtins.property
    @pulumi.getter(name="icmpRedirectDisableVariable")
    def icmp_redirect_disable_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "icmp_redirect_disable_variable")

    @icmp_redirect_disable_variable.setter
    def icmp_redirect_disable_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "icmp_redirect_disable_variable", value)

    @_builtins.property
    @pulumi.getter(name="interfaceDescription")
    def interface_description(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Interface description
        """
        return pulumi.get(self, "interface_description")

    @interface_description.setter
    def interface_description(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "interface_description", value)

    @_builtins.property
    @pulumi.getter(name="interfaceDescriptionVariable")
    def interface_description_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "interface_description_variable")

    @interface_description_variable.setter
    def interface_description_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "interface_description_variable", value)

    @_builtins.property
    @pulumi.getter(name="interfaceMtu")
    def interface_mtu(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        Interface MTU GigabitEthernet0 <1500..1518>, Other GigabitEthernet <1500..9216> in bytes
          - Range: `1500`-`9216`
          - Default value: `1500`
        """
        return pulumi.get(self, "interface_mtu")

    @interface_mtu.setter
    def interface_mtu(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "interface_mtu", value)

    @_builtins.property
    @pulumi.getter(name="interfaceMtuVariable")
    def interface_mtu_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "interface_mtu_variable")

    @interface_mtu_variable.setter
    def interface_mtu_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "interface_mtu_variable", value)

    @_builtins.property
    @pulumi.getter(name="interfaceName")
    def interface_name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Interface name: ge0/<0-..> or ge0/<0-..>.vlanid or irb<bridgeid:1-63> or loopback<string> or natpool-<1..31> when present
        """
        return pulumi.get(self, "interface_name")

    @interface_name.setter
    def interface_name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "interface_name", value)

    @_builtins.property
    @pulumi.getter(name="interfaceNameVariable")
    def interface_name_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "interface_name_variable")

    @interface_name_variable.setter
    def interface_name_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "interface_name_variable", value)

    @_builtins.property
    @pulumi.getter(name="ipDirectedBroadcast")
    def ip_directed_broadcast(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        IP Directed-Broadcast
          - Default value: `false`
        """
        return pulumi.get(self, "ip_directed_broadcast")

    @ip_directed_broadcast.setter
    def ip_directed_broadcast(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "ip_directed_broadcast", value)

    @_builtins.property
    @pulumi.getter(name="ipDirectedBroadcastVariable")
    def ip_directed_broadcast_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "ip_directed_broadcast_variable")

    @ip_directed_broadcast_variable.setter
    def ip_directed_broadcast_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "ip_directed_broadcast_variable", value)

    @_builtins.property
    @pulumi.getter(name="ipMtu")
    def ip_mtu(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        IP MTU for GigabitEthernet main <576..Interface MTU>, GigabitEthernet subinterface <576..9216>, Other Interfaces <576..2000> in bytes
          - Range: `576`-`9216`
          - Default value: `1500`
        """
        return pulumi.get(self, "ip_mtu")

    @ip_mtu.setter
    def ip_mtu(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "ip_mtu", value)

    @_builtins.property
    @pulumi.getter(name="ipMtuVariable")
    def ip_mtu_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "ip_mtu_variable")

    @ip_mtu_variable.setter
    def ip_mtu_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "ip_mtu_variable", value)

    @_builtins.property
    @pulumi.getter(name="iperfServer")
    def iperf_server(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Iperf server for auto bandwidth detect
        """
        return pulumi.get(self, "iperf_server")

    @iperf_server.setter
    def iperf_server(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "iperf_server", value)

    @_builtins.property
    @pulumi.getter(name="iperfServerVariable")
    def iperf_server_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "iperf_server_variable")

    @iperf_server_variable.setter
    def iperf_server_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "iperf_server_variable", value)

    @_builtins.property
    @pulumi.getter(name="ipv4DhcpHelperVariable")
    def ipv4_dhcp_helper_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "ipv4_dhcp_helper_variable")

    @ipv4_dhcp_helper_variable.setter
    def ipv4_dhcp_helper_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "ipv4_dhcp_helper_variable", value)

    @_builtins.property
    @pulumi.getter(name="ipv4DhcpHelpers")
    def ipv4_dhcp_helpers(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]:
        """
        List of DHCP IPv4 helper addresses
        """
        return pulumi.get(self, "ipv4_dhcp_helpers")

    @ipv4_dhcp_helpers.setter
    def ipv4_dhcp_helpers(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "ipv4_dhcp_helpers", value)

    @_builtins.property
    @pulumi.getter(name="ipv4SecondaryAddresses")
    def ipv4_secondary_addresses(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['CiscoVpnInterfaceFeatureTemplateIpv4SecondaryAddressArgs']]]]:
        """
        Assign secondary IP addresses
        """
        return pulumi.get(self, "ipv4_secondary_addresses")

    @ipv4_secondary_addresses.setter
    def ipv4_secondary_addresses(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['CiscoVpnInterfaceFeatureTemplateIpv4SecondaryAddressArgs']]]]):
        pulumi.set(self, "ipv4_secondary_addresses", value)

    @_builtins.property
    @pulumi.getter(name="ipv4Vrrps")
    def ipv4_vrrps(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['CiscoVpnInterfaceFeatureTemplateIpv4VrrpArgs']]]]:
        """
        Enable VRRP
        """
        return pulumi.get(self, "ipv4_vrrps")

    @ipv4_vrrps.setter
    def ipv4_vrrps(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['CiscoVpnInterfaceFeatureTemplateIpv4VrrpArgs']]]]):
        pulumi.set(self, "ipv4_vrrps", value)

    @_builtins.property
    @pulumi.getter(name="ipv6AccessLists")
    def ipv6_access_lists(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['CiscoVpnInterfaceFeatureTemplateIpv6AccessListArgs']]]]:
        """
        Apply IPv6 access list
        """
        return pulumi.get(self, "ipv6_access_lists")

    @ipv6_access_lists.setter
    def ipv6_access_lists(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['CiscoVpnInterfaceFeatureTemplateIpv6AccessListArgs']]]]):
        pulumi.set(self, "ipv6_access_lists", value)

    @_builtins.property
    @pulumi.getter(name="ipv6Address")
    def ipv6_address(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Assign IPv6 address
        """
        return pulumi.get(self, "ipv6_address")

    @ipv6_address.setter
    def ipv6_address(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "ipv6_address", value)

    @_builtins.property
    @pulumi.getter(name="ipv6AddressVariable")
    def ipv6_address_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "ipv6_address_variable")

    @ipv6_address_variable.setter
    def ipv6_address_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "ipv6_address_variable", value)

    @_builtins.property
    @pulumi.getter(name="ipv6DhcpHelpers")
    def ipv6_dhcp_helpers(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['CiscoVpnInterfaceFeatureTemplateIpv6DhcpHelperArgs']]]]:
        """
        DHCPv6 Helper
        """
        return pulumi.get(self, "ipv6_dhcp_helpers")

    @ipv6_dhcp_helpers.setter
    def ipv6_dhcp_helpers(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['CiscoVpnInterfaceFeatureTemplateIpv6DhcpHelperArgs']]]]):
        pulumi.set(self, "ipv6_dhcp_helpers", value)

    @_builtins.property
    @pulumi.getter(name="ipv6Nat")
    def ipv6_nat(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        NAT64 on this interface
          - Default value: `false`
        """
        return pulumi.get(self, "ipv6_nat")

    @ipv6_nat.setter
    def ipv6_nat(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "ipv6_nat", value)

    @_builtins.property
    @pulumi.getter(name="ipv6NatVariable")
    def ipv6_nat_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "ipv6_nat_variable")

    @ipv6_nat_variable.setter
    def ipv6_nat_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "ipv6_nat_variable", value)

    @_builtins.property
    @pulumi.getter(name="ipv6SecondaryAddresses")
    def ipv6_secondary_addresses(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['CiscoVpnInterfaceFeatureTemplateIpv6SecondaryAddressArgs']]]]:
        """
        Assign secondary IPv6 addresses
        """
        return pulumi.get(self, "ipv6_secondary_addresses")

    @ipv6_secondary_addresses.setter
    def ipv6_secondary_addresses(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['CiscoVpnInterfaceFeatureTemplateIpv6SecondaryAddressArgs']]]]):
        pulumi.set(self, "ipv6_secondary_addresses", value)

    @_builtins.property
    @pulumi.getter(name="ipv6Vrrps")
    def ipv6_vrrps(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['CiscoVpnInterfaceFeatureTemplateIpv6VrrpArgs']]]]:
        """
        Enable VRRP
        """
        return pulumi.get(self, "ipv6_vrrps")

    @ipv6_vrrps.setter
    def ipv6_vrrps(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['CiscoVpnInterfaceFeatureTemplateIpv6VrrpArgs']]]]):
        pulumi.set(self, "ipv6_vrrps", value)

    @_builtins.property
    @pulumi.getter(name="loadInterval")
    def load_interval(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        Interval for interface load calculation
          - Range: `30`-`600`
          - Default value: `30`
        """
        return pulumi.get(self, "load_interval")

    @load_interval.setter
    def load_interval(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "load_interval", value)

    @_builtins.property
    @pulumi.getter(name="loadIntervalVariable")
    def load_interval_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "load_interval_variable")

    @load_interval_variable.setter
    def load_interval_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "load_interval_variable", value)

    @_builtins.property
    @pulumi.getter(name="macAddress")
    def mac_address(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Set MAC-layer address
        """
        return pulumi.get(self, "mac_address")

    @mac_address.setter
    def mac_address(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "mac_address", value)

    @_builtins.property
    @pulumi.getter(name="macAddressVariable")
    def mac_address_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "mac_address_variable")

    @mac_address_variable.setter
    def mac_address_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "mac_address_variable", value)

    @_builtins.property
    @pulumi.getter(name="mediaType")
    def media_type(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Media type
          - Choices: `auto-select`, `rj45`, `sfp`
        """
        return pulumi.get(self, "media_type")

    @media_type.setter
    def media_type(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "media_type", value)

    @_builtins.property
    @pulumi.getter(name="mediaTypeVariable")
    def media_type_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "media_type_variable")

    @media_type_variable.setter
    def media_type_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "media_type_variable", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The name of the feature template
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "name", value)

    @_builtins.property
    @pulumi.getter
    def nat(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Network Address Translation on this interface
          - Default value: `false`
        """
        return pulumi.get(self, "nat")

    @nat.setter
    def nat(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "nat", value)

    @_builtins.property
    @pulumi.getter(name="nat64Interface")
    def nat64_interface(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        NAT64 on this interface
          - Default value: `false`
        """
        return pulumi.get(self, "nat64_interface")

    @nat64_interface.setter
    def nat64_interface(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "nat64_interface", value)

    @_builtins.property
    @pulumi.getter(name="nat66Interface")
    def nat66_interface(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        NAT66 on this interface
          - Default value: `false`
        """
        return pulumi.get(self, "nat66_interface")

    @nat66_interface.setter
    def nat66_interface(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "nat66_interface", value)

    @_builtins.property
    @pulumi.getter(name="natInsideSourceLoopbackInterface")
    def nat_inside_source_loopback_interface(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Configure NAT Inside Loopback Interface
        """
        return pulumi.get(self, "nat_inside_source_loopback_interface")

    @nat_inside_source_loopback_interface.setter
    def nat_inside_source_loopback_interface(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "nat_inside_source_loopback_interface", value)

    @_builtins.property
    @pulumi.getter(name="natInsideSourceLoopbackInterfaceVariable")
    def nat_inside_source_loopback_interface_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "nat_inside_source_loopback_interface_variable")

    @nat_inside_source_loopback_interface_variable.setter
    def nat_inside_source_loopback_interface_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "nat_inside_source_loopback_interface_variable", value)

    @_builtins.property
    @pulumi.getter(name="natOverload")
    def nat_overload(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Enable port translation(PAT)
          - Default value: `true`
        """
        return pulumi.get(self, "nat_overload")

    @nat_overload.setter
    def nat_overload(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "nat_overload", value)

    @_builtins.property
    @pulumi.getter(name="natOverloadVariable")
    def nat_overload_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "nat_overload_variable")

    @nat_overload_variable.setter
    def nat_overload_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "nat_overload_variable", value)

    @_builtins.property
    @pulumi.getter(name="natPoolPrefixLength")
    def nat_pool_prefix_length(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        Ending IP address of NAT Pool Prefix Length
        """
        return pulumi.get(self, "nat_pool_prefix_length")

    @nat_pool_prefix_length.setter
    def nat_pool_prefix_length(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "nat_pool_prefix_length", value)

    @_builtins.property
    @pulumi.getter(name="natPoolPrefixLengthVariable")
    def nat_pool_prefix_length_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "nat_pool_prefix_length_variable")

    @nat_pool_prefix_length_variable.setter
    def nat_pool_prefix_length_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "nat_pool_prefix_length_variable", value)

    @_builtins.property
    @pulumi.getter(name="natPoolRangeEnd")
    def nat_pool_range_end(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Ending IP address of NAT pool range
        """
        return pulumi.get(self, "nat_pool_range_end")

    @nat_pool_range_end.setter
    def nat_pool_range_end(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "nat_pool_range_end", value)

    @_builtins.property
    @pulumi.getter(name="natPoolRangeEndVariable")
    def nat_pool_range_end_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "nat_pool_range_end_variable")

    @nat_pool_range_end_variable.setter
    def nat_pool_range_end_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "nat_pool_range_end_variable", value)

    @_builtins.property
    @pulumi.getter(name="natPoolRangeStart")
    def nat_pool_range_start(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Starting IP address of NAT pool range
        """
        return pulumi.get(self, "nat_pool_range_start")

    @nat_pool_range_start.setter
    def nat_pool_range_start(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "nat_pool_range_start", value)

    @_builtins.property
    @pulumi.getter(name="natPoolRangeStartVariable")
    def nat_pool_range_start_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "nat_pool_range_start_variable")

    @nat_pool_range_start_variable.setter
    def nat_pool_range_start_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "nat_pool_range_start_variable", value)

    @_builtins.property
    @pulumi.getter(name="natType")
    def nat_type(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        NAT type
          - Choices: `interface`, `pool`, `loopback`
          - Default value: `interface`
        """
        return pulumi.get(self, "nat_type")

    @nat_type.setter
    def nat_type(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "nat_type", value)

    @_builtins.property
    @pulumi.getter(name="natTypeVariable")
    def nat_type_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "nat_type_variable")

    @nat_type_variable.setter
    def nat_type_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "nat_type_variable", value)

    @_builtins.property
    @pulumi.getter
    def poe(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Configure interface as Power-over-Ethernet source
          - Default value: `false`
        """
        return pulumi.get(self, "poe")

    @poe.setter
    def poe(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "poe", value)

    @_builtins.property
    @pulumi.getter(name="poeVariable")
    def poe_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "poe_variable")

    @poe_variable.setter
    def poe_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "poe_variable", value)

    @_builtins.property
    @pulumi.getter(name="propagateSgt")
    def propagate_sgt(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Enable/Disable CTS SGT propagation on an interface.
          - Default value: `true`
        """
        return pulumi.get(self, "propagate_sgt")

    @propagate_sgt.setter
    def propagate_sgt(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "propagate_sgt", value)

    @_builtins.property
    @pulumi.getter(name="qosAdaptiveBandwidthDownstream")
    def qos_adaptive_bandwidth_downstream(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        Adaptive QoS default downstream bandwidth
          - Range: `8`-`100000000`
        """
        return pulumi.get(self, "qos_adaptive_bandwidth_downstream")

    @qos_adaptive_bandwidth_downstream.setter
    def qos_adaptive_bandwidth_downstream(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "qos_adaptive_bandwidth_downstream", value)

    @_builtins.property
    @pulumi.getter(name="qosAdaptiveBandwidthDownstreamVariable")
    def qos_adaptive_bandwidth_downstream_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "qos_adaptive_bandwidth_downstream_variable")

    @qos_adaptive_bandwidth_downstream_variable.setter
    def qos_adaptive_bandwidth_downstream_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "qos_adaptive_bandwidth_downstream_variable", value)

    @_builtins.property
    @pulumi.getter(name="qosAdaptiveBandwidthUpstream")
    def qos_adaptive_bandwidth_upstream(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        Adaptive QoS default upstream bandwidth
          - Range: `8`-`100000000`
        """
        return pulumi.get(self, "qos_adaptive_bandwidth_upstream")

    @qos_adaptive_bandwidth_upstream.setter
    def qos_adaptive_bandwidth_upstream(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "qos_adaptive_bandwidth_upstream", value)

    @_builtins.property
    @pulumi.getter(name="qosAdaptiveBandwidthUpstreamVariable")
    def qos_adaptive_bandwidth_upstream_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "qos_adaptive_bandwidth_upstream_variable")

    @qos_adaptive_bandwidth_upstream_variable.setter
    def qos_adaptive_bandwidth_upstream_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "qos_adaptive_bandwidth_upstream_variable", value)

    @_builtins.property
    @pulumi.getter(name="qosAdaptiveMaxDownstream")
    def qos_adaptive_max_downstream(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        Downstream max bandwidth limit
          - Range: `8`-`100000000`
        """
        return pulumi.get(self, "qos_adaptive_max_downstream")

    @qos_adaptive_max_downstream.setter
    def qos_adaptive_max_downstream(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "qos_adaptive_max_downstream", value)

    @_builtins.property
    @pulumi.getter(name="qosAdaptiveMaxDownstreamVariable")
    def qos_adaptive_max_downstream_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "qos_adaptive_max_downstream_variable")

    @qos_adaptive_max_downstream_variable.setter
    def qos_adaptive_max_downstream_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "qos_adaptive_max_downstream_variable", value)

    @_builtins.property
    @pulumi.getter(name="qosAdaptiveMaxUpstream")
    def qos_adaptive_max_upstream(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        Upstream max bandwidth limit
          - Range: `8`-`100000000`
        """
        return pulumi.get(self, "qos_adaptive_max_upstream")

    @qos_adaptive_max_upstream.setter
    def qos_adaptive_max_upstream(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "qos_adaptive_max_upstream", value)

    @_builtins.property
    @pulumi.getter(name="qosAdaptiveMaxUpstreamVariable")
    def qos_adaptive_max_upstream_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "qos_adaptive_max_upstream_variable")

    @qos_adaptive_max_upstream_variable.setter
    def qos_adaptive_max_upstream_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "qos_adaptive_max_upstream_variable", value)

    @_builtins.property
    @pulumi.getter(name="qosAdaptiveMinDownstream")
    def qos_adaptive_min_downstream(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        Downstream min bandwidth limit
          - Range: `8`-`100000000`
        """
        return pulumi.get(self, "qos_adaptive_min_downstream")

    @qos_adaptive_min_downstream.setter
    def qos_adaptive_min_downstream(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "qos_adaptive_min_downstream", value)

    @_builtins.property
    @pulumi.getter(name="qosAdaptiveMinDownstreamVariable")
    def qos_adaptive_min_downstream_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "qos_adaptive_min_downstream_variable")

    @qos_adaptive_min_downstream_variable.setter
    def qos_adaptive_min_downstream_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "qos_adaptive_min_downstream_variable", value)

    @_builtins.property
    @pulumi.getter(name="qosAdaptiveMinUpstream")
    def qos_adaptive_min_upstream(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        Upstream min bandwidth limit
          - Range: `8`-`100000000`
        """
        return pulumi.get(self, "qos_adaptive_min_upstream")

    @qos_adaptive_min_upstream.setter
    def qos_adaptive_min_upstream(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "qos_adaptive_min_upstream", value)

    @_builtins.property
    @pulumi.getter(name="qosAdaptiveMinUpstreamVariable")
    def qos_adaptive_min_upstream_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "qos_adaptive_min_upstream_variable")

    @qos_adaptive_min_upstream_variable.setter
    def qos_adaptive_min_upstream_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "qos_adaptive_min_upstream_variable", value)

    @_builtins.property
    @pulumi.getter(name="qosAdaptivePeriod")
    def qos_adaptive_period(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        Periodic timer for adaptive QoS in minutes
          - Range: `1`-`720`
          - Default value: `15`
        """
        return pulumi.get(self, "qos_adaptive_period")

    @qos_adaptive_period.setter
    def qos_adaptive_period(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "qos_adaptive_period", value)

    @_builtins.property
    @pulumi.getter(name="qosAdaptivePeriodVariable")
    def qos_adaptive_period_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "qos_adaptive_period_variable")

    @qos_adaptive_period_variable.setter
    def qos_adaptive_period_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "qos_adaptive_period_variable", value)

    @_builtins.property
    @pulumi.getter(name="qosMap")
    def qos_map(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Name of QoS map
        """
        return pulumi.get(self, "qos_map")

    @qos_map.setter
    def qos_map(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "qos_map", value)

    @_builtins.property
    @pulumi.getter(name="qosMapVariable")
    def qos_map_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "qos_map_variable")

    @qos_map_variable.setter
    def qos_map_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "qos_map_variable", value)

    @_builtins.property
    @pulumi.getter(name="qosMapVpn")
    def qos_map_vpn(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Name of VPN QoS map
        """
        return pulumi.get(self, "qos_map_vpn")

    @qos_map_vpn.setter
    def qos_map_vpn(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "qos_map_vpn", value)

    @_builtins.property
    @pulumi.getter(name="qosMapVpnVariable")
    def qos_map_vpn_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "qos_map_vpn_variable")

    @qos_map_vpn_variable.setter
    def qos_map_vpn_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "qos_map_vpn_variable", value)

    @_builtins.property
    @pulumi.getter(name="rewriteRuleName")
    def rewrite_rule_name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Name of rewrite rule
        """
        return pulumi.get(self, "rewrite_rule_name")

    @rewrite_rule_name.setter
    def rewrite_rule_name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "rewrite_rule_name", value)

    @_builtins.property
    @pulumi.getter(name="rewriteRuleNameVariable")
    def rewrite_rule_name_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "rewrite_rule_name_variable")

    @rewrite_rule_name_variable.setter
    def rewrite_rule_name_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "rewrite_rule_name_variable", value)

    @_builtins.property
    @pulumi.getter(name="secondaryRegion")
    def secondary_region(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Enable secondary region
          - Choices: `off`, `secondary-only`, `secondary-shared`
          - Default value: `off`
        """
        return pulumi.get(self, "secondary_region")

    @secondary_region.setter
    def secondary_region(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "secondary_region", value)

    @_builtins.property
    @pulumi.getter(name="secondaryRegionVariable")
    def secondary_region_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "secondary_region_variable")

    @secondary_region_variable.setter
    def secondary_region_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "secondary_region_variable", value)

    @_builtins.property
    @pulumi.getter(name="sgtEnforcement")
    def sgt_enforcement(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Enables the interface for CTS SGT authorization and forwarding.
          - Default value: `false`
        """
        return pulumi.get(self, "sgt_enforcement")

    @sgt_enforcement.setter
    def sgt_enforcement(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "sgt_enforcement", value)

    @_builtins.property
    @pulumi.getter(name="sgtEnforcementSgt")
    def sgt_enforcement_sgt(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        SGT value between 2 and 65519.
          - Range: `2`-`65519`
        """
        return pulumi.get(self, "sgt_enforcement_sgt")

    @sgt_enforcement_sgt.setter
    def sgt_enforcement_sgt(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "sgt_enforcement_sgt", value)

    @_builtins.property
    @pulumi.getter(name="sgtEnforcementSgtVariable")
    def sgt_enforcement_sgt_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "sgt_enforcement_sgt_variable")

    @sgt_enforcement_sgt_variable.setter
    def sgt_enforcement_sgt_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "sgt_enforcement_sgt_variable", value)

    @_builtins.property
    @pulumi.getter(name="shapingRate")
    def shaping_rate(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        1ge  interfaces: [0..1000000]kbps; 10ge interfaces: [0..10000000]kbps
          - Range: `8`-`100000000`
        """
        return pulumi.get(self, "shaping_rate")

    @shaping_rate.setter
    def shaping_rate(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "shaping_rate", value)

    @_builtins.property
    @pulumi.getter(name="shapingRateVariable")
    def shaping_rate_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "shaping_rate_variable")

    @shaping_rate_variable.setter
    def shaping_rate_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "shaping_rate_variable", value)

    @_builtins.property
    @pulumi.getter
    def shutdown(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Administrative state
          - Default value: `true`
        """
        return pulumi.get(self, "shutdown")

    @shutdown.setter
    def shutdown(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "shutdown", value)

    @_builtins.property
    @pulumi.getter(name="shutdownVariable")
    def shutdown_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "shutdown_variable")

    @shutdown_variable.setter
    def shutdown_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "shutdown_variable", value)

    @_builtins.property
    @pulumi.getter
    def speed(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Set interface speed
          - Choices: `10`, `100`, `1000`, `2500`, `10000`
        """
        return pulumi.get(self, "speed")

    @speed.setter
    def speed(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "speed", value)

    @_builtins.property
    @pulumi.getter(name="speedVariable")
    def speed_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "speed_variable")

    @speed_variable.setter
    def speed_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "speed_variable", value)

    @_builtins.property
    @pulumi.getter(name="staticArps")
    def static_arps(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['CiscoVpnInterfaceFeatureTemplateStaticArpArgs']]]]:
        """
        Configure static ARP entries
        """
        return pulumi.get(self, "static_arps")

    @static_arps.setter
    def static_arps(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['CiscoVpnInterfaceFeatureTemplateStaticArpArgs']]]]):
        pulumi.set(self, "static_arps", value)

    @_builtins.property
    @pulumi.getter(name="staticNat66Entries")
    def static_nat66_entries(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['CiscoVpnInterfaceFeatureTemplateStaticNat66EntryArgs']]]]:
        """
        static NAT
        """
        return pulumi.get(self, "static_nat66_entries")

    @static_nat66_entries.setter
    def static_nat66_entries(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['CiscoVpnInterfaceFeatureTemplateStaticNat66EntryArgs']]]]):
        pulumi.set(self, "static_nat66_entries", value)

    @_builtins.property
    @pulumi.getter(name="staticNatEntries")
    def static_nat_entries(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['CiscoVpnInterfaceFeatureTemplateStaticNatEntryArgs']]]]:
        """
        Configure static NAT entries
        """
        return pulumi.get(self, "static_nat_entries")

    @static_nat_entries.setter
    def static_nat_entries(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['CiscoVpnInterfaceFeatureTemplateStaticNatEntryArgs']]]]):
        pulumi.set(self, "static_nat_entries", value)

    @_builtins.property
    @pulumi.getter(name="staticPortForwardEntries")
    def static_port_forward_entries(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['CiscoVpnInterfaceFeatureTemplateStaticPortForwardEntryArgs']]]]:
        """
        Configure Port Forward entries
        """
        return pulumi.get(self, "static_port_forward_entries")

    @static_port_forward_entries.setter
    def static_port_forward_entries(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['CiscoVpnInterfaceFeatureTemplateStaticPortForwardEntryArgs']]]]):
        pulumi.set(self, "static_port_forward_entries", value)

    @_builtins.property
    @pulumi.getter(name="staticSgt")
    def static_sgt(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        SGT value between 2 and 65519.
          - Range: `2`-`65519`
        """
        return pulumi.get(self, "static_sgt")

    @static_sgt.setter
    def static_sgt(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "static_sgt", value)

    @_builtins.property
    @pulumi.getter(name="staticSgtTrusted")
    def static_sgt_trusted(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Indicates that the interface is trustworthy for CTS.
          - Default value: `false`
        """
        return pulumi.get(self, "static_sgt_trusted")

    @static_sgt_trusted.setter
    def static_sgt_trusted(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "static_sgt_trusted", value)

    @_builtins.property
    @pulumi.getter(name="staticSgtVariable")
    def static_sgt_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "static_sgt_variable")

    @static_sgt_variable.setter
    def static_sgt_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "static_sgt_variable", value)

    @_builtins.property
    @pulumi.getter(name="tcpMssAdjust")
    def tcp_mss_adjust(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        TCP MSS on SYN packets, in bytes
          - Range: `500`-`1460`
        """
        return pulumi.get(self, "tcp_mss_adjust")

    @tcp_mss_adjust.setter
    def tcp_mss_adjust(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "tcp_mss_adjust", value)

    @_builtins.property
    @pulumi.getter(name="tcpMssAdjustVariable")
    def tcp_mss_adjust_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "tcp_mss_adjust_variable")

    @tcp_mss_adjust_variable.setter
    def tcp_mss_adjust_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "tcp_mss_adjust_variable", value)

    @_builtins.property
    @pulumi.getter(name="tcpTimeout")
    def tcp_timeout(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        Set NAT TCP session timeout, in minutes
          - Range: `1`-`8947`
          - Default value: `60`
        """
        return pulumi.get(self, "tcp_timeout")

    @tcp_timeout.setter
    def tcp_timeout(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "tcp_timeout", value)

    @_builtins.property
    @pulumi.getter(name="tcpTimeoutVariable")
    def tcp_timeout_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "tcp_timeout_variable")

    @tcp_timeout_variable.setter
    def tcp_timeout_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "tcp_timeout_variable", value)

    @_builtins.property
    @pulumi.getter(name="templateType")
    def template_type(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The template type
        """
        return pulumi.get(self, "template_type")

    @template_type.setter
    def template_type(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "template_type", value)

    @_builtins.property
    @pulumi.getter(name="tlocExtension")
    def tloc_extension(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Extends a local TLOC to a remote node only for vpn 0
        """
        return pulumi.get(self, "tloc_extension")

    @tloc_extension.setter
    def tloc_extension(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "tloc_extension", value)

    @_builtins.property
    @pulumi.getter(name="tlocExtensionVariable")
    def tloc_extension_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "tloc_extension_variable")

    @tloc_extension_variable.setter
    def tloc_extension_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "tloc_extension_variable", value)

    @_builtins.property
    @pulumi.getter(name="trackerVariable")
    def tracker_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "tracker_variable")

    @tracker_variable.setter
    def tracker_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "tracker_variable", value)

    @_builtins.property
    @pulumi.getter
    def trackers(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]:
        """
        Enable tracker for this interface
        """
        return pulumi.get(self, "trackers")

    @trackers.setter
    def trackers(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "trackers", value)

    @_builtins.property
    @pulumi.getter(name="tunnelBandwidth")
    def tunnel_bandwidth(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        Tunnels Bandwidth Percent
          - Range: `1`-`99`
          - Default value: `50`
        """
        return pulumi.get(self, "tunnel_bandwidth")

    @tunnel_bandwidth.setter
    def tunnel_bandwidth(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "tunnel_bandwidth", value)

    @_builtins.property
    @pulumi.getter(name="tunnelBandwidthVariable")
    def tunnel_bandwidth_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "tunnel_bandwidth_variable")

    @tunnel_bandwidth_variable.setter
    def tunnel_bandwidth_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "tunnel_bandwidth_variable", value)

    @_builtins.property
    @pulumi.getter(name="tunnelInterfaceAllowAll")
    def tunnel_interface_allow_all(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Allow all traffic. Overrides all other allow-service options if allow-service all is set
          - Default value: `false`
        """
        return pulumi.get(self, "tunnel_interface_allow_all")

    @tunnel_interface_allow_all.setter
    def tunnel_interface_allow_all(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "tunnel_interface_allow_all", value)

    @_builtins.property
    @pulumi.getter(name="tunnelInterfaceAllowAllVariable")
    def tunnel_interface_allow_all_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "tunnel_interface_allow_all_variable")

    @tunnel_interface_allow_all_variable.setter
    def tunnel_interface_allow_all_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "tunnel_interface_allow_all_variable", value)

    @_builtins.property
    @pulumi.getter(name="tunnelInterfaceAllowBgp")
    def tunnel_interface_allow_bgp(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Allow/deny BGP
          - Default value: `false`
        """
        return pulumi.get(self, "tunnel_interface_allow_bgp")

    @tunnel_interface_allow_bgp.setter
    def tunnel_interface_allow_bgp(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "tunnel_interface_allow_bgp", value)

    @_builtins.property
    @pulumi.getter(name="tunnelInterfaceAllowBgpVariable")
    def tunnel_interface_allow_bgp_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "tunnel_interface_allow_bgp_variable")

    @tunnel_interface_allow_bgp_variable.setter
    def tunnel_interface_allow_bgp_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "tunnel_interface_allow_bgp_variable", value)

    @_builtins.property
    @pulumi.getter(name="tunnelInterfaceAllowDhcp")
    def tunnel_interface_allow_dhcp(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Allow/Deny DHCP
          - Default value: `true`
        """
        return pulumi.get(self, "tunnel_interface_allow_dhcp")

    @tunnel_interface_allow_dhcp.setter
    def tunnel_interface_allow_dhcp(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "tunnel_interface_allow_dhcp", value)

    @_builtins.property
    @pulumi.getter(name="tunnelInterfaceAllowDhcpVariable")
    def tunnel_interface_allow_dhcp_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "tunnel_interface_allow_dhcp_variable")

    @tunnel_interface_allow_dhcp_variable.setter
    def tunnel_interface_allow_dhcp_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "tunnel_interface_allow_dhcp_variable", value)

    @_builtins.property
    @pulumi.getter(name="tunnelInterfaceAllowDns")
    def tunnel_interface_allow_dns(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Allow/Deny DNS
          - Default value: `true`
        """
        return pulumi.get(self, "tunnel_interface_allow_dns")

    @tunnel_interface_allow_dns.setter
    def tunnel_interface_allow_dns(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "tunnel_interface_allow_dns", value)

    @_builtins.property
    @pulumi.getter(name="tunnelInterfaceAllowDnsVariable")
    def tunnel_interface_allow_dns_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "tunnel_interface_allow_dns_variable")

    @tunnel_interface_allow_dns_variable.setter
    def tunnel_interface_allow_dns_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "tunnel_interface_allow_dns_variable", value)

    @_builtins.property
    @pulumi.getter(name="tunnelInterfaceAllowHttps")
    def tunnel_interface_allow_https(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Allow/Deny Https
          - Default value: `true`
        """
        return pulumi.get(self, "tunnel_interface_allow_https")

    @tunnel_interface_allow_https.setter
    def tunnel_interface_allow_https(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "tunnel_interface_allow_https", value)

    @_builtins.property
    @pulumi.getter(name="tunnelInterfaceAllowHttpsVariable")
    def tunnel_interface_allow_https_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "tunnel_interface_allow_https_variable")

    @tunnel_interface_allow_https_variable.setter
    def tunnel_interface_allow_https_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "tunnel_interface_allow_https_variable", value)

    @_builtins.property
    @pulumi.getter(name="tunnelInterfaceAllowIcmp")
    def tunnel_interface_allow_icmp(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Allow/Deny ICMP
          - Default value: `true`
        """
        return pulumi.get(self, "tunnel_interface_allow_icmp")

    @tunnel_interface_allow_icmp.setter
    def tunnel_interface_allow_icmp(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "tunnel_interface_allow_icmp", value)

    @_builtins.property
    @pulumi.getter(name="tunnelInterfaceAllowIcmpVariable")
    def tunnel_interface_allow_icmp_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "tunnel_interface_allow_icmp_variable")

    @tunnel_interface_allow_icmp_variable.setter
    def tunnel_interface_allow_icmp_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "tunnel_interface_allow_icmp_variable", value)

    @_builtins.property
    @pulumi.getter(name="tunnelInterfaceAllowNetconf")
    def tunnel_interface_allow_netconf(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Allow/Deny NETCONF
          - Default value: `false`
        """
        return pulumi.get(self, "tunnel_interface_allow_netconf")

    @tunnel_interface_allow_netconf.setter
    def tunnel_interface_allow_netconf(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "tunnel_interface_allow_netconf", value)

    @_builtins.property
    @pulumi.getter(name="tunnelInterfaceAllowNetconfVariable")
    def tunnel_interface_allow_netconf_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "tunnel_interface_allow_netconf_variable")

    @tunnel_interface_allow_netconf_variable.setter
    def tunnel_interface_allow_netconf_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "tunnel_interface_allow_netconf_variable", value)

    @_builtins.property
    @pulumi.getter(name="tunnelInterfaceAllowNtp")
    def tunnel_interface_allow_ntp(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Allow/Deny NTP
          - Default value: `false`
        """
        return pulumi.get(self, "tunnel_interface_allow_ntp")

    @tunnel_interface_allow_ntp.setter
    def tunnel_interface_allow_ntp(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "tunnel_interface_allow_ntp", value)

    @_builtins.property
    @pulumi.getter(name="tunnelInterfaceAllowNtpVariable")
    def tunnel_interface_allow_ntp_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "tunnel_interface_allow_ntp_variable")

    @tunnel_interface_allow_ntp_variable.setter
    def tunnel_interface_allow_ntp_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "tunnel_interface_allow_ntp_variable", value)

    @_builtins.property
    @pulumi.getter(name="tunnelInterfaceAllowOspf")
    def tunnel_interface_allow_ospf(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Allow/Deny OSPF
          - Default value: `false`
        """
        return pulumi.get(self, "tunnel_interface_allow_ospf")

    @tunnel_interface_allow_ospf.setter
    def tunnel_interface_allow_ospf(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "tunnel_interface_allow_ospf", value)

    @_builtins.property
    @pulumi.getter(name="tunnelInterfaceAllowOspfVariable")
    def tunnel_interface_allow_ospf_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "tunnel_interface_allow_ospf_variable")

    @tunnel_interface_allow_ospf_variable.setter
    def tunnel_interface_allow_ospf_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "tunnel_interface_allow_ospf_variable", value)

    @_builtins.property
    @pulumi.getter(name="tunnelInterfaceAllowSnmp")
    def tunnel_interface_allow_snmp(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Allow/Deny SNMP
          - Default value: `false`
        """
        return pulumi.get(self, "tunnel_interface_allow_snmp")

    @tunnel_interface_allow_snmp.setter
    def tunnel_interface_allow_snmp(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "tunnel_interface_allow_snmp", value)

    @_builtins.property
    @pulumi.getter(name="tunnelInterfaceAllowSnmpVariable")
    def tunnel_interface_allow_snmp_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "tunnel_interface_allow_snmp_variable")

    @tunnel_interface_allow_snmp_variable.setter
    def tunnel_interface_allow_snmp_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "tunnel_interface_allow_snmp_variable", value)

    @_builtins.property
    @pulumi.getter(name="tunnelInterfaceAllowSsh")
    def tunnel_interface_allow_ssh(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Allow/Deny SSH
          - Default value: `false`
        """
        return pulumi.get(self, "tunnel_interface_allow_ssh")

    @tunnel_interface_allow_ssh.setter
    def tunnel_interface_allow_ssh(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "tunnel_interface_allow_ssh", value)

    @_builtins.property
    @pulumi.getter(name="tunnelInterfaceAllowSshVariable")
    def tunnel_interface_allow_ssh_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "tunnel_interface_allow_ssh_variable")

    @tunnel_interface_allow_ssh_variable.setter
    def tunnel_interface_allow_ssh_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "tunnel_interface_allow_ssh_variable", value)

    @_builtins.property
    @pulumi.getter(name="tunnelInterfaceAllowStun")
    def tunnel_interface_allow_stun(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Allow/Deny STUN
          - Default value: `false`
        """
        return pulumi.get(self, "tunnel_interface_allow_stun")

    @tunnel_interface_allow_stun.setter
    def tunnel_interface_allow_stun(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "tunnel_interface_allow_stun", value)

    @_builtins.property
    @pulumi.getter(name="tunnelInterfaceAllowStunVariable")
    def tunnel_interface_allow_stun_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "tunnel_interface_allow_stun_variable")

    @tunnel_interface_allow_stun_variable.setter
    def tunnel_interface_allow_stun_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "tunnel_interface_allow_stun_variable", value)

    @_builtins.property
    @pulumi.getter(name="tunnelInterfaceBindLoopbackTunnel")
    def tunnel_interface_bind_loopback_tunnel(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Bind loopback tunnel interface to a physical interface
        """
        return pulumi.get(self, "tunnel_interface_bind_loopback_tunnel")

    @tunnel_interface_bind_loopback_tunnel.setter
    def tunnel_interface_bind_loopback_tunnel(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "tunnel_interface_bind_loopback_tunnel", value)

    @_builtins.property
    @pulumi.getter(name="tunnelInterfaceBindLoopbackTunnelVariable")
    def tunnel_interface_bind_loopback_tunnel_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "tunnel_interface_bind_loopback_tunnel_variable")

    @tunnel_interface_bind_loopback_tunnel_variable.setter
    def tunnel_interface_bind_loopback_tunnel_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "tunnel_interface_bind_loopback_tunnel_variable", value)

    @_builtins.property
    @pulumi.getter(name="tunnelInterfaceBorder")
    def tunnel_interface_border(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Set TLOC as border TLOC
          - Default value: `false`
        """
        return pulumi.get(self, "tunnel_interface_border")

    @tunnel_interface_border.setter
    def tunnel_interface_border(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "tunnel_interface_border", value)

    @_builtins.property
    @pulumi.getter(name="tunnelInterfaceBorderVariable")
    def tunnel_interface_border_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "tunnel_interface_border_variable")

    @tunnel_interface_border_variable.setter
    def tunnel_interface_border_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "tunnel_interface_border_variable", value)

    @_builtins.property
    @pulumi.getter(name="tunnelInterfaceCarrier")
    def tunnel_interface_carrier(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Set carrier for TLOC
          - Choices: `default`, `carrier1`, `carrier2`, `carrier3`, `carrier4`, `carrier5`, `carrier6`, `carrier7`, `carrier8`
          - Default value: `default`
        """
        return pulumi.get(self, "tunnel_interface_carrier")

    @tunnel_interface_carrier.setter
    def tunnel_interface_carrier(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "tunnel_interface_carrier", value)

    @_builtins.property
    @pulumi.getter(name="tunnelInterfaceCarrierVariable")
    def tunnel_interface_carrier_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "tunnel_interface_carrier_variable")

    @tunnel_interface_carrier_variable.setter
    def tunnel_interface_carrier_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "tunnel_interface_carrier_variable", value)

    @_builtins.property
    @pulumi.getter(name="tunnelInterfaceClearDontFragment")
    def tunnel_interface_clear_dont_fragment(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Enable clear dont fragment (Currently Only SDWAN Tunnel Interface)
          - Default value: `false`
        """
        return pulumi.get(self, "tunnel_interface_clear_dont_fragment")

    @tunnel_interface_clear_dont_fragment.setter
    def tunnel_interface_clear_dont_fragment(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "tunnel_interface_clear_dont_fragment", value)

    @_builtins.property
    @pulumi.getter(name="tunnelInterfaceClearDontFragmentVariable")
    def tunnel_interface_clear_dont_fragment_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "tunnel_interface_clear_dont_fragment_variable")

    @tunnel_interface_clear_dont_fragment_variable.setter
    def tunnel_interface_clear_dont_fragment_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "tunnel_interface_clear_dont_fragment_variable", value)

    @_builtins.property
    @pulumi.getter(name="tunnelInterfaceColor")
    def tunnel_interface_color(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Set color for TLOC
          - Choices: `default`, `mpls`, `metro-ethernet`, `biz-internet`, `public-internet`, `lte`, `3g`, `red`, `green`, `blue`, `gold`, `silver`, `bronze`, `custom1`, `custom2`, `custom3`, `private1`, `private2`, `private3`, `private4`, `private5`, `private6`
          - Default value: `default`
        """
        return pulumi.get(self, "tunnel_interface_color")

    @tunnel_interface_color.setter
    def tunnel_interface_color(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "tunnel_interface_color", value)

    @_builtins.property
    @pulumi.getter(name="tunnelInterfaceColorRestrict")
    def tunnel_interface_color_restrict(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Restrict this TLOC behavior
          - Default value: `false`
        """
        return pulumi.get(self, "tunnel_interface_color_restrict")

    @tunnel_interface_color_restrict.setter
    def tunnel_interface_color_restrict(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "tunnel_interface_color_restrict", value)

    @_builtins.property
    @pulumi.getter(name="tunnelInterfaceColorRestrictVariable")
    def tunnel_interface_color_restrict_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "tunnel_interface_color_restrict_variable")

    @tunnel_interface_color_restrict_variable.setter
    def tunnel_interface_color_restrict_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "tunnel_interface_color_restrict_variable", value)

    @_builtins.property
    @pulumi.getter(name="tunnelInterfaceColorVariable")
    def tunnel_interface_color_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "tunnel_interface_color_variable")

    @tunnel_interface_color_variable.setter
    def tunnel_interface_color_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "tunnel_interface_color_variable", value)

    @_builtins.property
    @pulumi.getter(name="tunnelInterfaceControlConnections")
    def tunnel_interface_control_connections(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Allow Control Connection
          - Default value: `true`
        """
        return pulumi.get(self, "tunnel_interface_control_connections")

    @tunnel_interface_control_connections.setter
    def tunnel_interface_control_connections(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "tunnel_interface_control_connections", value)

    @_builtins.property
    @pulumi.getter(name="tunnelInterfaceControlConnectionsVariable")
    def tunnel_interface_control_connections_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "tunnel_interface_control_connections_variable")

    @tunnel_interface_control_connections_variable.setter
    def tunnel_interface_control_connections_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "tunnel_interface_control_connections_variable", value)

    @_builtins.property
    @pulumi.getter(name="tunnelInterfaceEncapsulations")
    def tunnel_interface_encapsulations(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['CiscoVpnInterfaceFeatureTemplateTunnelInterfaceEncapsulationArgs']]]]:
        """
        Encapsulation for TLOC
        """
        return pulumi.get(self, "tunnel_interface_encapsulations")

    @tunnel_interface_encapsulations.setter
    def tunnel_interface_encapsulations(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['CiscoVpnInterfaceFeatureTemplateTunnelInterfaceEncapsulationArgs']]]]):
        pulumi.set(self, "tunnel_interface_encapsulations", value)

    @_builtins.property
    @pulumi.getter(name="tunnelInterfaceExcludeControllerGroupListVariable")
    def tunnel_interface_exclude_controller_group_list_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "tunnel_interface_exclude_controller_group_list_variable")

    @tunnel_interface_exclude_controller_group_list_variable.setter
    def tunnel_interface_exclude_controller_group_list_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "tunnel_interface_exclude_controller_group_list_variable", value)

    @_builtins.property
    @pulumi.getter(name="tunnelInterfaceExcludeControllerGroupLists")
    def tunnel_interface_exclude_controller_group_lists(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.int]]]]:
        """
        Exclude the following controller groups defined in this list
        """
        return pulumi.get(self, "tunnel_interface_exclude_controller_group_lists")

    @tunnel_interface_exclude_controller_group_lists.setter
    def tunnel_interface_exclude_controller_group_lists(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.int]]]]):
        pulumi.set(self, "tunnel_interface_exclude_controller_group_lists", value)

    @_builtins.property
    @pulumi.getter(name="tunnelInterfaceGreTunnelDestinationIp")
    def tunnel_interface_gre_tunnel_destination_ip(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Extend the TLOC to a remote node over GRE tunnel
        """
        return pulumi.get(self, "tunnel_interface_gre_tunnel_destination_ip")

    @tunnel_interface_gre_tunnel_destination_ip.setter
    def tunnel_interface_gre_tunnel_destination_ip(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "tunnel_interface_gre_tunnel_destination_ip", value)

    @_builtins.property
    @pulumi.getter(name="tunnelInterfaceGreTunnelDestinationIpVariable")
    def tunnel_interface_gre_tunnel_destination_ip_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "tunnel_interface_gre_tunnel_destination_ip_variable")

    @tunnel_interface_gre_tunnel_destination_ip_variable.setter
    def tunnel_interface_gre_tunnel_destination_ip_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "tunnel_interface_gre_tunnel_destination_ip_variable", value)

    @_builtins.property
    @pulumi.getter(name="tunnelInterfaceGroups")
    def tunnel_interface_groups(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.int]]]]:
        """
        List of groups
        """
        return pulumi.get(self, "tunnel_interface_groups")

    @tunnel_interface_groups.setter
    def tunnel_interface_groups(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.int]]]]):
        pulumi.set(self, "tunnel_interface_groups", value)

    @_builtins.property
    @pulumi.getter(name="tunnelInterfaceGroupsVariable")
    def tunnel_interface_groups_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "tunnel_interface_groups_variable")

    @tunnel_interface_groups_variable.setter
    def tunnel_interface_groups_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "tunnel_interface_groups_variable", value)

    @_builtins.property
    @pulumi.getter(name="tunnelInterfaceHelloInterval")
    def tunnel_interface_hello_interval(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        Set time period of control hello packets <100..600000> milli seconds
          - Range: `100`-`600000`
          - Default value: `1000`
        """
        return pulumi.get(self, "tunnel_interface_hello_interval")

    @tunnel_interface_hello_interval.setter
    def tunnel_interface_hello_interval(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "tunnel_interface_hello_interval", value)

    @_builtins.property
    @pulumi.getter(name="tunnelInterfaceHelloIntervalVariable")
    def tunnel_interface_hello_interval_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "tunnel_interface_hello_interval_variable")

    @tunnel_interface_hello_interval_variable.setter
    def tunnel_interface_hello_interval_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "tunnel_interface_hello_interval_variable", value)

    @_builtins.property
    @pulumi.getter(name="tunnelInterfaceHelloTolerance")
    def tunnel_interface_hello_tolerance(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        Set tolerance of control hello packets <12..6000> seconds
          - Range: `12`-`6000`
          - Default value: `12`
        """
        return pulumi.get(self, "tunnel_interface_hello_tolerance")

    @tunnel_interface_hello_tolerance.setter
    def tunnel_interface_hello_tolerance(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "tunnel_interface_hello_tolerance", value)

    @_builtins.property
    @pulumi.getter(name="tunnelInterfaceHelloToleranceVariable")
    def tunnel_interface_hello_tolerance_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "tunnel_interface_hello_tolerance_variable")

    @tunnel_interface_hello_tolerance_variable.setter
    def tunnel_interface_hello_tolerance_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "tunnel_interface_hello_tolerance_variable", value)

    @_builtins.property
    @pulumi.getter(name="tunnelInterfaceLastResortCircuit")
    def tunnel_interface_last_resort_circuit(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Set TLOC as last resort
          - Default value: `false`
        """
        return pulumi.get(self, "tunnel_interface_last_resort_circuit")

    @tunnel_interface_last_resort_circuit.setter
    def tunnel_interface_last_resort_circuit(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "tunnel_interface_last_resort_circuit", value)

    @_builtins.property
    @pulumi.getter(name="tunnelInterfaceLastResortCircuitVariable")
    def tunnel_interface_last_resort_circuit_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "tunnel_interface_last_resort_circuit_variable")

    @tunnel_interface_last_resort_circuit_variable.setter
    def tunnel_interface_last_resort_circuit_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "tunnel_interface_last_resort_circuit_variable", value)

    @_builtins.property
    @pulumi.getter(name="tunnelInterfaceLowBandwidthLink")
    def tunnel_interface_low_bandwidth_link(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Set the interface as a low-bandwidth circuit
          - Default value: `false`
        """
        return pulumi.get(self, "tunnel_interface_low_bandwidth_link")

    @tunnel_interface_low_bandwidth_link.setter
    def tunnel_interface_low_bandwidth_link(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "tunnel_interface_low_bandwidth_link", value)

    @_builtins.property
    @pulumi.getter(name="tunnelInterfaceLowBandwidthLinkVariable")
    def tunnel_interface_low_bandwidth_link_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "tunnel_interface_low_bandwidth_link_variable")

    @tunnel_interface_low_bandwidth_link_variable.setter
    def tunnel_interface_low_bandwidth_link_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "tunnel_interface_low_bandwidth_link_variable", value)

    @_builtins.property
    @pulumi.getter(name="tunnelInterfaceMaxControlConnections")
    def tunnel_interface_max_control_connections(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        Set the maximum number of control connections for this TLOC
          - Range: `0`-`100`
        """
        return pulumi.get(self, "tunnel_interface_max_control_connections")

    @tunnel_interface_max_control_connections.setter
    def tunnel_interface_max_control_connections(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "tunnel_interface_max_control_connections", value)

    @_builtins.property
    @pulumi.getter(name="tunnelInterfaceMaxControlConnectionsVariable")
    def tunnel_interface_max_control_connections_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "tunnel_interface_max_control_connections_variable")

    @tunnel_interface_max_control_connections_variable.setter
    def tunnel_interface_max_control_connections_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "tunnel_interface_max_control_connections_variable", value)

    @_builtins.property
    @pulumi.getter(name="tunnelInterfaceNatRefreshInterval")
    def tunnel_interface_nat_refresh_interval(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        Set time period of nat refresh packets <1...60> seconds
          - Range: `1`-`60`
          - Default value: `5`
        """
        return pulumi.get(self, "tunnel_interface_nat_refresh_interval")

    @tunnel_interface_nat_refresh_interval.setter
    def tunnel_interface_nat_refresh_interval(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "tunnel_interface_nat_refresh_interval", value)

    @_builtins.property
    @pulumi.getter(name="tunnelInterfaceNatRefreshIntervalVariable")
    def tunnel_interface_nat_refresh_interval_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "tunnel_interface_nat_refresh_interval_variable")

    @tunnel_interface_nat_refresh_interval_variable.setter
    def tunnel_interface_nat_refresh_interval_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "tunnel_interface_nat_refresh_interval_variable", value)

    @_builtins.property
    @pulumi.getter(name="tunnelInterfaceNetworkBroadcast")
    def tunnel_interface_network_broadcast(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Accept and respond to network-prefix-directed broadcasts)
          - Default value: `false`
        """
        return pulumi.get(self, "tunnel_interface_network_broadcast")

    @tunnel_interface_network_broadcast.setter
    def tunnel_interface_network_broadcast(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "tunnel_interface_network_broadcast", value)

    @_builtins.property
    @pulumi.getter(name="tunnelInterfaceNetworkBroadcastVariable")
    def tunnel_interface_network_broadcast_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "tunnel_interface_network_broadcast_variable")

    @tunnel_interface_network_broadcast_variable.setter
    def tunnel_interface_network_broadcast_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "tunnel_interface_network_broadcast_variable", value)

    @_builtins.property
    @pulumi.getter(name="tunnelInterfacePortHop")
    def tunnel_interface_port_hop(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Disallow port hopping on the tunnel interface
          - Default value: `true`
        """
        return pulumi.get(self, "tunnel_interface_port_hop")

    @tunnel_interface_port_hop.setter
    def tunnel_interface_port_hop(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "tunnel_interface_port_hop", value)

    @_builtins.property
    @pulumi.getter(name="tunnelInterfacePortHopVariable")
    def tunnel_interface_port_hop_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "tunnel_interface_port_hop_variable")

    @tunnel_interface_port_hop_variable.setter
    def tunnel_interface_port_hop_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "tunnel_interface_port_hop_variable", value)

    @_builtins.property
    @pulumi.getter(name="tunnelInterfacePropagateSgt")
    def tunnel_interface_propagate_sgt(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        CTS SGT Propagation configuration
          - Default value: `false`
        """
        return pulumi.get(self, "tunnel_interface_propagate_sgt")

    @tunnel_interface_propagate_sgt.setter
    def tunnel_interface_propagate_sgt(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "tunnel_interface_propagate_sgt", value)

    @_builtins.property
    @pulumi.getter(name="tunnelInterfacePropagateSgtVariable")
    def tunnel_interface_propagate_sgt_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "tunnel_interface_propagate_sgt_variable")

    @tunnel_interface_propagate_sgt_variable.setter
    def tunnel_interface_propagate_sgt_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "tunnel_interface_propagate_sgt_variable", value)

    @_builtins.property
    @pulumi.getter(name="tunnelInterfaceTunnelTcpMss")
    def tunnel_interface_tunnel_tcp_mss(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        Tunnel TCP MSS on SYN packets, in bytes
          - Range: `500`-`1460`
        """
        return pulumi.get(self, "tunnel_interface_tunnel_tcp_mss")

    @tunnel_interface_tunnel_tcp_mss.setter
    def tunnel_interface_tunnel_tcp_mss(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "tunnel_interface_tunnel_tcp_mss", value)

    @_builtins.property
    @pulumi.getter(name="tunnelInterfaceTunnelTcpMssVariable")
    def tunnel_interface_tunnel_tcp_mss_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "tunnel_interface_tunnel_tcp_mss_variable")

    @tunnel_interface_tunnel_tcp_mss_variable.setter
    def tunnel_interface_tunnel_tcp_mss_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "tunnel_interface_tunnel_tcp_mss_variable", value)

    @_builtins.property
    @pulumi.getter(name="tunnelInterfaceVbondAsStunServer")
    def tunnel_interface_vbond_as_stun_server(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Put this wan interface in STUN mode only
          - Default value: `false`
        """
        return pulumi.get(self, "tunnel_interface_vbond_as_stun_server")

    @tunnel_interface_vbond_as_stun_server.setter
    def tunnel_interface_vbond_as_stun_server(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "tunnel_interface_vbond_as_stun_server", value)

    @_builtins.property
    @pulumi.getter(name="tunnelInterfaceVbondAsStunServerVariable")
    def tunnel_interface_vbond_as_stun_server_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "tunnel_interface_vbond_as_stun_server_variable")

    @tunnel_interface_vbond_as_stun_server_variable.setter
    def tunnel_interface_vbond_as_stun_server_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "tunnel_interface_vbond_as_stun_server_variable", value)

    @_builtins.property
    @pulumi.getter(name="tunnelInterfaceVmanageConnectionPreference")
    def tunnel_interface_vmanage_connection_preference(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        Set interface preference for control connection to vManage <0..8>
          - Range: `0`-`8`
          - Default value: `5`
        """
        return pulumi.get(self, "tunnel_interface_vmanage_connection_preference")

    @tunnel_interface_vmanage_connection_preference.setter
    def tunnel_interface_vmanage_connection_preference(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "tunnel_interface_vmanage_connection_preference", value)

    @_builtins.property
    @pulumi.getter(name="tunnelInterfaceVmanageConnectionPreferenceVariable")
    def tunnel_interface_vmanage_connection_preference_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "tunnel_interface_vmanage_connection_preference_variable")

    @tunnel_interface_vmanage_connection_preference_variable.setter
    def tunnel_interface_vmanage_connection_preference_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "tunnel_interface_vmanage_connection_preference_variable", value)

    @_builtins.property
    @pulumi.getter(name="tunnelQosMode")
    def tunnel_qos_mode(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Set tunnel QoS mode
          - Choices: `hub`, `spoke`
        """
        return pulumi.get(self, "tunnel_qos_mode")

    @tunnel_qos_mode.setter
    def tunnel_qos_mode(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "tunnel_qos_mode", value)

    @_builtins.property
    @pulumi.getter(name="tunnelQosModeVariable")
    def tunnel_qos_mode_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "tunnel_qos_mode_variable")

    @tunnel_qos_mode_variable.setter
    def tunnel_qos_mode_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "tunnel_qos_mode_variable", value)

    @_builtins.property
    @pulumi.getter(name="udpTimeout")
    def udp_timeout(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        Set NAT UDP session timeout, in minutes
          - Range: `1`-`8947`
          - Default value: `1`
        """
        return pulumi.get(self, "udp_timeout")

    @udp_timeout.setter
    def udp_timeout(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "udp_timeout", value)

    @_builtins.property
    @pulumi.getter(name="udpTimeoutVariable")
    def udp_timeout_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "udp_timeout_variable")

    @udp_timeout_variable.setter
    def udp_timeout_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "udp_timeout_variable", value)

    @_builtins.property
    @pulumi.getter
    def version(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        The version of the feature template
        """
        return pulumi.get(self, "version")

    @version.setter
    def version(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "version", value)


@pulumi.type_token("sdwan:index/ciscoVpnInterfaceFeatureTemplate:CiscoVpnInterfaceFeatureTemplate")
class CiscoVpnInterfaceFeatureTemplate(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 access_lists: Optional[pulumi.Input[Sequence[pulumi.Input[Union['CiscoVpnInterfaceFeatureTemplateAccessListArgs', 'CiscoVpnInterfaceFeatureTemplateAccessListArgsDict']]]]] = None,
                 address: Optional[pulumi.Input[_builtins.str]] = None,
                 address_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 arp_timeout: Optional[pulumi.Input[_builtins.int]] = None,
                 arp_timeout_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 auto_bandwidth_detect: Optional[pulumi.Input[_builtins.bool]] = None,
                 auto_bandwidth_detect_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 autonegotiate: Optional[pulumi.Input[_builtins.bool]] = None,
                 autonegotiate_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 bandwidth_downstream: Optional[pulumi.Input[_builtins.int]] = None,
                 bandwidth_downstream_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 bandwidth_upstream: Optional[pulumi.Input[_builtins.int]] = None,
                 bandwidth_upstream_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 block_non_source_ip: Optional[pulumi.Input[_builtins.bool]] = None,
                 block_non_source_ip_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 core_region: Optional[pulumi.Input[_builtins.str]] = None,
                 core_region_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 description: Optional[pulumi.Input[_builtins.str]] = None,
                 device_types: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 dhcp: Optional[pulumi.Input[_builtins.bool]] = None,
                 dhcp_distance: Optional[pulumi.Input[_builtins.int]] = None,
                 dhcp_distance_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 dhcp_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 dhcpv6: Optional[pulumi.Input[_builtins.bool]] = None,
                 dhcpv6_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 duplex: Optional[pulumi.Input[_builtins.str]] = None,
                 duplex_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 enable_core_region: Optional[pulumi.Input[_builtins.bool]] = None,
                 enable_sgt: Optional[pulumi.Input[_builtins.bool]] = None,
                 gre_tunnel_source_ip: Optional[pulumi.Input[_builtins.str]] = None,
                 gre_tunnel_source_ip_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 gre_tunnel_xconnect: Optional[pulumi.Input[_builtins.str]] = None,
                 gre_tunnel_xconnect_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 icmp_redirect_disable: Optional[pulumi.Input[_builtins.bool]] = None,
                 icmp_redirect_disable_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 interface_description: Optional[pulumi.Input[_builtins.str]] = None,
                 interface_description_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 interface_mtu: Optional[pulumi.Input[_builtins.int]] = None,
                 interface_mtu_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 interface_name: Optional[pulumi.Input[_builtins.str]] = None,
                 interface_name_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 ip_directed_broadcast: Optional[pulumi.Input[_builtins.bool]] = None,
                 ip_directed_broadcast_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 ip_mtu: Optional[pulumi.Input[_builtins.int]] = None,
                 ip_mtu_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 iperf_server: Optional[pulumi.Input[_builtins.str]] = None,
                 iperf_server_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 ipv4_dhcp_helper_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 ipv4_dhcp_helpers: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 ipv4_secondary_addresses: Optional[pulumi.Input[Sequence[pulumi.Input[Union['CiscoVpnInterfaceFeatureTemplateIpv4SecondaryAddressArgs', 'CiscoVpnInterfaceFeatureTemplateIpv4SecondaryAddressArgsDict']]]]] = None,
                 ipv4_vrrps: Optional[pulumi.Input[Sequence[pulumi.Input[Union['CiscoVpnInterfaceFeatureTemplateIpv4VrrpArgs', 'CiscoVpnInterfaceFeatureTemplateIpv4VrrpArgsDict']]]]] = None,
                 ipv6_access_lists: Optional[pulumi.Input[Sequence[pulumi.Input[Union['CiscoVpnInterfaceFeatureTemplateIpv6AccessListArgs', 'CiscoVpnInterfaceFeatureTemplateIpv6AccessListArgsDict']]]]] = None,
                 ipv6_address: Optional[pulumi.Input[_builtins.str]] = None,
                 ipv6_address_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 ipv6_dhcp_helpers: Optional[pulumi.Input[Sequence[pulumi.Input[Union['CiscoVpnInterfaceFeatureTemplateIpv6DhcpHelperArgs', 'CiscoVpnInterfaceFeatureTemplateIpv6DhcpHelperArgsDict']]]]] = None,
                 ipv6_nat: Optional[pulumi.Input[_builtins.bool]] = None,
                 ipv6_nat_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 ipv6_secondary_addresses: Optional[pulumi.Input[Sequence[pulumi.Input[Union['CiscoVpnInterfaceFeatureTemplateIpv6SecondaryAddressArgs', 'CiscoVpnInterfaceFeatureTemplateIpv6SecondaryAddressArgsDict']]]]] = None,
                 ipv6_vrrps: Optional[pulumi.Input[Sequence[pulumi.Input[Union['CiscoVpnInterfaceFeatureTemplateIpv6VrrpArgs', 'CiscoVpnInterfaceFeatureTemplateIpv6VrrpArgsDict']]]]] = None,
                 load_interval: Optional[pulumi.Input[_builtins.int]] = None,
                 load_interval_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 mac_address: Optional[pulumi.Input[_builtins.str]] = None,
                 mac_address_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 media_type: Optional[pulumi.Input[_builtins.str]] = None,
                 media_type_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 nat: Optional[pulumi.Input[_builtins.bool]] = None,
                 nat64_interface: Optional[pulumi.Input[_builtins.bool]] = None,
                 nat66_interface: Optional[pulumi.Input[_builtins.bool]] = None,
                 nat_inside_source_loopback_interface: Optional[pulumi.Input[_builtins.str]] = None,
                 nat_inside_source_loopback_interface_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 nat_overload: Optional[pulumi.Input[_builtins.bool]] = None,
                 nat_overload_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 nat_pool_prefix_length: Optional[pulumi.Input[_builtins.int]] = None,
                 nat_pool_prefix_length_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 nat_pool_range_end: Optional[pulumi.Input[_builtins.str]] = None,
                 nat_pool_range_end_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 nat_pool_range_start: Optional[pulumi.Input[_builtins.str]] = None,
                 nat_pool_range_start_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 nat_type: Optional[pulumi.Input[_builtins.str]] = None,
                 nat_type_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 poe: Optional[pulumi.Input[_builtins.bool]] = None,
                 poe_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 propagate_sgt: Optional[pulumi.Input[_builtins.bool]] = None,
                 qos_adaptive_bandwidth_downstream: Optional[pulumi.Input[_builtins.int]] = None,
                 qos_adaptive_bandwidth_downstream_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 qos_adaptive_bandwidth_upstream: Optional[pulumi.Input[_builtins.int]] = None,
                 qos_adaptive_bandwidth_upstream_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 qos_adaptive_max_downstream: Optional[pulumi.Input[_builtins.int]] = None,
                 qos_adaptive_max_downstream_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 qos_adaptive_max_upstream: Optional[pulumi.Input[_builtins.int]] = None,
                 qos_adaptive_max_upstream_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 qos_adaptive_min_downstream: Optional[pulumi.Input[_builtins.int]] = None,
                 qos_adaptive_min_downstream_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 qos_adaptive_min_upstream: Optional[pulumi.Input[_builtins.int]] = None,
                 qos_adaptive_min_upstream_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 qos_adaptive_period: Optional[pulumi.Input[_builtins.int]] = None,
                 qos_adaptive_period_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 qos_map: Optional[pulumi.Input[_builtins.str]] = None,
                 qos_map_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 qos_map_vpn: Optional[pulumi.Input[_builtins.str]] = None,
                 qos_map_vpn_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 rewrite_rule_name: Optional[pulumi.Input[_builtins.str]] = None,
                 rewrite_rule_name_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 secondary_region: Optional[pulumi.Input[_builtins.str]] = None,
                 secondary_region_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 sgt_enforcement: Optional[pulumi.Input[_builtins.bool]] = None,
                 sgt_enforcement_sgt: Optional[pulumi.Input[_builtins.int]] = None,
                 sgt_enforcement_sgt_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 shaping_rate: Optional[pulumi.Input[_builtins.int]] = None,
                 shaping_rate_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 shutdown: Optional[pulumi.Input[_builtins.bool]] = None,
                 shutdown_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 speed: Optional[pulumi.Input[_builtins.str]] = None,
                 speed_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 static_arps: Optional[pulumi.Input[Sequence[pulumi.Input[Union['CiscoVpnInterfaceFeatureTemplateStaticArpArgs', 'CiscoVpnInterfaceFeatureTemplateStaticArpArgsDict']]]]] = None,
                 static_nat66_entries: Optional[pulumi.Input[Sequence[pulumi.Input[Union['CiscoVpnInterfaceFeatureTemplateStaticNat66EntryArgs', 'CiscoVpnInterfaceFeatureTemplateStaticNat66EntryArgsDict']]]]] = None,
                 static_nat_entries: Optional[pulumi.Input[Sequence[pulumi.Input[Union['CiscoVpnInterfaceFeatureTemplateStaticNatEntryArgs', 'CiscoVpnInterfaceFeatureTemplateStaticNatEntryArgsDict']]]]] = None,
                 static_port_forward_entries: Optional[pulumi.Input[Sequence[pulumi.Input[Union['CiscoVpnInterfaceFeatureTemplateStaticPortForwardEntryArgs', 'CiscoVpnInterfaceFeatureTemplateStaticPortForwardEntryArgsDict']]]]] = None,
                 static_sgt: Optional[pulumi.Input[_builtins.int]] = None,
                 static_sgt_trusted: Optional[pulumi.Input[_builtins.bool]] = None,
                 static_sgt_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 tcp_mss_adjust: Optional[pulumi.Input[_builtins.int]] = None,
                 tcp_mss_adjust_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 tcp_timeout: Optional[pulumi.Input[_builtins.int]] = None,
                 tcp_timeout_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 tloc_extension: Optional[pulumi.Input[_builtins.str]] = None,
                 tloc_extension_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 tracker_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 trackers: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 tunnel_bandwidth: Optional[pulumi.Input[_builtins.int]] = None,
                 tunnel_bandwidth_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 tunnel_interface_allow_all: Optional[pulumi.Input[_builtins.bool]] = None,
                 tunnel_interface_allow_all_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 tunnel_interface_allow_bgp: Optional[pulumi.Input[_builtins.bool]] = None,
                 tunnel_interface_allow_bgp_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 tunnel_interface_allow_dhcp: Optional[pulumi.Input[_builtins.bool]] = None,
                 tunnel_interface_allow_dhcp_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 tunnel_interface_allow_dns: Optional[pulumi.Input[_builtins.bool]] = None,
                 tunnel_interface_allow_dns_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 tunnel_interface_allow_https: Optional[pulumi.Input[_builtins.bool]] = None,
                 tunnel_interface_allow_https_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 tunnel_interface_allow_icmp: Optional[pulumi.Input[_builtins.bool]] = None,
                 tunnel_interface_allow_icmp_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 tunnel_interface_allow_netconf: Optional[pulumi.Input[_builtins.bool]] = None,
                 tunnel_interface_allow_netconf_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 tunnel_interface_allow_ntp: Optional[pulumi.Input[_builtins.bool]] = None,
                 tunnel_interface_allow_ntp_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 tunnel_interface_allow_ospf: Optional[pulumi.Input[_builtins.bool]] = None,
                 tunnel_interface_allow_ospf_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 tunnel_interface_allow_snmp: Optional[pulumi.Input[_builtins.bool]] = None,
                 tunnel_interface_allow_snmp_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 tunnel_interface_allow_ssh: Optional[pulumi.Input[_builtins.bool]] = None,
                 tunnel_interface_allow_ssh_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 tunnel_interface_allow_stun: Optional[pulumi.Input[_builtins.bool]] = None,
                 tunnel_interface_allow_stun_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 tunnel_interface_bind_loopback_tunnel: Optional[pulumi.Input[_builtins.str]] = None,
                 tunnel_interface_bind_loopback_tunnel_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 tunnel_interface_border: Optional[pulumi.Input[_builtins.bool]] = None,
                 tunnel_interface_border_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 tunnel_interface_carrier: Optional[pulumi.Input[_builtins.str]] = None,
                 tunnel_interface_carrier_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 tunnel_interface_clear_dont_fragment: Optional[pulumi.Input[_builtins.bool]] = None,
                 tunnel_interface_clear_dont_fragment_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 tunnel_interface_color: Optional[pulumi.Input[_builtins.str]] = None,
                 tunnel_interface_color_restrict: Optional[pulumi.Input[_builtins.bool]] = None,
                 tunnel_interface_color_restrict_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 tunnel_interface_color_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 tunnel_interface_control_connections: Optional[pulumi.Input[_builtins.bool]] = None,
                 tunnel_interface_control_connections_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 tunnel_interface_encapsulations: Optional[pulumi.Input[Sequence[pulumi.Input[Union['CiscoVpnInterfaceFeatureTemplateTunnelInterfaceEncapsulationArgs', 'CiscoVpnInterfaceFeatureTemplateTunnelInterfaceEncapsulationArgsDict']]]]] = None,
                 tunnel_interface_exclude_controller_group_list_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 tunnel_interface_exclude_controller_group_lists: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.int]]]] = None,
                 tunnel_interface_gre_tunnel_destination_ip: Optional[pulumi.Input[_builtins.str]] = None,
                 tunnel_interface_gre_tunnel_destination_ip_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 tunnel_interface_groups: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.int]]]] = None,
                 tunnel_interface_groups_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 tunnel_interface_hello_interval: Optional[pulumi.Input[_builtins.int]] = None,
                 tunnel_interface_hello_interval_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 tunnel_interface_hello_tolerance: Optional[pulumi.Input[_builtins.int]] = None,
                 tunnel_interface_hello_tolerance_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 tunnel_interface_last_resort_circuit: Optional[pulumi.Input[_builtins.bool]] = None,
                 tunnel_interface_last_resort_circuit_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 tunnel_interface_low_bandwidth_link: Optional[pulumi.Input[_builtins.bool]] = None,
                 tunnel_interface_low_bandwidth_link_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 tunnel_interface_max_control_connections: Optional[pulumi.Input[_builtins.int]] = None,
                 tunnel_interface_max_control_connections_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 tunnel_interface_nat_refresh_interval: Optional[pulumi.Input[_builtins.int]] = None,
                 tunnel_interface_nat_refresh_interval_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 tunnel_interface_network_broadcast: Optional[pulumi.Input[_builtins.bool]] = None,
                 tunnel_interface_network_broadcast_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 tunnel_interface_port_hop: Optional[pulumi.Input[_builtins.bool]] = None,
                 tunnel_interface_port_hop_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 tunnel_interface_propagate_sgt: Optional[pulumi.Input[_builtins.bool]] = None,
                 tunnel_interface_propagate_sgt_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 tunnel_interface_tunnel_tcp_mss: Optional[pulumi.Input[_builtins.int]] = None,
                 tunnel_interface_tunnel_tcp_mss_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 tunnel_interface_vbond_as_stun_server: Optional[pulumi.Input[_builtins.bool]] = None,
                 tunnel_interface_vbond_as_stun_server_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 tunnel_interface_vmanage_connection_preference: Optional[pulumi.Input[_builtins.int]] = None,
                 tunnel_interface_vmanage_connection_preference_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 tunnel_qos_mode: Optional[pulumi.Input[_builtins.str]] = None,
                 tunnel_qos_mode_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 udp_timeout: Optional[pulumi.Input[_builtins.int]] = None,
                 udp_timeout_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 __props__=None):
        """
        This resource can manage a Cisco VPN Interface feature template.
          - Minimum SD-WAN Manager version: `15.0.0`

        ## Example Usage

        ## Import

        The `pulumi import` command can be used, for example:

        ```sh
        $ pulumi import sdwan:index/ciscoVpnInterfaceFeatureTemplate:CiscoVpnInterfaceFeatureTemplate example "f6b2c44c-693c-4763-b010-895aa3d236bd"
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[Sequence[pulumi.Input[Union['CiscoVpnInterfaceFeatureTemplateAccessListArgs', 'CiscoVpnInterfaceFeatureTemplateAccessListArgsDict']]]] access_lists: Apply ACL
        :param pulumi.Input[_builtins.str] address: Assign IPv4 address
        :param pulumi.Input[_builtins.str] address_variable: Variable name
        :param pulumi.Input[_builtins.int] arp_timeout: Timeout value for dynamically learned ARP entries, <0..2678400> seconds
                 - Range: `0`-`2147483`
                 - Default value: `1200`
        :param pulumi.Input[_builtins.str] arp_timeout_variable: Variable name
        :param pulumi.Input[_builtins.bool] auto_bandwidth_detect: Interface auto detect bandwidth
                 - Default value: `false`
        :param pulumi.Input[_builtins.str] auto_bandwidth_detect_variable: Variable name
        :param pulumi.Input[_builtins.bool] autonegotiate: Link autonegotiation
        :param pulumi.Input[_builtins.str] autonegotiate_variable: Variable name
        :param pulumi.Input[_builtins.int] bandwidth_downstream: Interface downstream bandwidth capacity, in kbps
                 - Range: `1`-`2147483647`
        :param pulumi.Input[_builtins.str] bandwidth_downstream_variable: Variable name
        :param pulumi.Input[_builtins.int] bandwidth_upstream: Interface upstream bandwidth capacity, in kbps
                 - Range: `1`-`2147483647`
        :param pulumi.Input[_builtins.str] bandwidth_upstream_variable: Variable name
        :param pulumi.Input[_builtins.bool] block_non_source_ip: Block packets originating from IP address that is not from this source
                 - Default value: `false`
        :param pulumi.Input[_builtins.str] block_non_source_ip_variable: Variable name
        :param pulumi.Input[_builtins.str] core_region: Enable core region
                 - Choices: `core`, `core-shared`
                 - Default value: `core`
        :param pulumi.Input[_builtins.str] core_region_variable: Variable name
        :param pulumi.Input[_builtins.str] description: The description of the feature template
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] device_types: List of supported device types
                 - Choices: `vedge-C8000V`, `vedge-C8300-1N1S-4T2X`, `vedge-C8300-1N1S-6T`, `vedge-C8300-2N2S-6T`, `vedge-C8300-2N2S-4T2X`, `vedge-C8500-12X4QC`, `vedge-C8500-12X`, `vedge-C8500-20X6C`, `vedge-C8500L-8S4X`, `vedge-C8200-1N-4T`, `vedge-C8200L-1N-4T`
        :param pulumi.Input[_builtins.bool] dhcp: Enable DHCP
                 - Default value: `false`
        :param pulumi.Input[_builtins.int] dhcp_distance: Set administrative distance for DHCP default route
                 - Range: `1`-`65536`
                 - Default value: `1`
        :param pulumi.Input[_builtins.str] dhcp_distance_variable: Variable name
        :param pulumi.Input[_builtins.str] dhcp_variable: Variable name
        :param pulumi.Input[_builtins.bool] dhcpv6: Enable DHCPv6
                 - Default value: `false`
        :param pulumi.Input[_builtins.str] dhcpv6_variable: Variable name
        :param pulumi.Input[_builtins.str] duplex: Duplex mode
                 - Choices: `full`, `half`, `auto`
        :param pulumi.Input[_builtins.str] duplex_variable: Variable name
        :param pulumi.Input[_builtins.bool] enable_core_region: Enable core region
                 - Default value: `false`
        :param pulumi.Input[_builtins.bool] enable_sgt: Enables the interface for CTS SGT authorization and forwarding.
                 - Default value: `false`
        :param pulumi.Input[_builtins.str] gre_tunnel_source_ip: Extend remote TLOC over a GRE tunnel to a local WAN interface
        :param pulumi.Input[_builtins.str] gre_tunnel_source_ip_variable: Variable name
        :param pulumi.Input[_builtins.str] gre_tunnel_xconnect: Extend remote TLOC over a GRE tunnel to a local WAN interface
        :param pulumi.Input[_builtins.str] gre_tunnel_xconnect_variable: Variable name
        :param pulumi.Input[_builtins.bool] icmp_redirect_disable: Set this option to disable the icmp/icmpv6 redirect packets
                 - Default value: `true`
        :param pulumi.Input[_builtins.str] icmp_redirect_disable_variable: Variable name
        :param pulumi.Input[_builtins.str] interface_description: Interface description
        :param pulumi.Input[_builtins.str] interface_description_variable: Variable name
        :param pulumi.Input[_builtins.int] interface_mtu: Interface MTU GigabitEthernet0 <1500..1518>, Other GigabitEthernet <1500..9216> in bytes
                 - Range: `1500`-`9216`
                 - Default value: `1500`
        :param pulumi.Input[_builtins.str] interface_mtu_variable: Variable name
        :param pulumi.Input[_builtins.str] interface_name: Interface name: ge0/<0-..> or ge0/<0-..>.vlanid or irb<bridgeid:1-63> or loopback<string> or natpool-<1..31> when present
        :param pulumi.Input[_builtins.str] interface_name_variable: Variable name
        :param pulumi.Input[_builtins.bool] ip_directed_broadcast: IP Directed-Broadcast
                 - Default value: `false`
        :param pulumi.Input[_builtins.str] ip_directed_broadcast_variable: Variable name
        :param pulumi.Input[_builtins.int] ip_mtu: IP MTU for GigabitEthernet main <576..Interface MTU>, GigabitEthernet subinterface <576..9216>, Other Interfaces <576..2000> in bytes
                 - Range: `576`-`9216`
                 - Default value: `1500`
        :param pulumi.Input[_builtins.str] ip_mtu_variable: Variable name
        :param pulumi.Input[_builtins.str] iperf_server: Iperf server for auto bandwidth detect
        :param pulumi.Input[_builtins.str] iperf_server_variable: Variable name
        :param pulumi.Input[_builtins.str] ipv4_dhcp_helper_variable: Variable name
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] ipv4_dhcp_helpers: List of DHCP IPv4 helper addresses
        :param pulumi.Input[Sequence[pulumi.Input[Union['CiscoVpnInterfaceFeatureTemplateIpv4SecondaryAddressArgs', 'CiscoVpnInterfaceFeatureTemplateIpv4SecondaryAddressArgsDict']]]] ipv4_secondary_addresses: Assign secondary IP addresses
        :param pulumi.Input[Sequence[pulumi.Input[Union['CiscoVpnInterfaceFeatureTemplateIpv4VrrpArgs', 'CiscoVpnInterfaceFeatureTemplateIpv4VrrpArgsDict']]]] ipv4_vrrps: Enable VRRP
        :param pulumi.Input[Sequence[pulumi.Input[Union['CiscoVpnInterfaceFeatureTemplateIpv6AccessListArgs', 'CiscoVpnInterfaceFeatureTemplateIpv6AccessListArgsDict']]]] ipv6_access_lists: Apply IPv6 access list
        :param pulumi.Input[_builtins.str] ipv6_address: Assign IPv6 address
        :param pulumi.Input[_builtins.str] ipv6_address_variable: Variable name
        :param pulumi.Input[Sequence[pulumi.Input[Union['CiscoVpnInterfaceFeatureTemplateIpv6DhcpHelperArgs', 'CiscoVpnInterfaceFeatureTemplateIpv6DhcpHelperArgsDict']]]] ipv6_dhcp_helpers: DHCPv6 Helper
        :param pulumi.Input[_builtins.bool] ipv6_nat: NAT64 on this interface
                 - Default value: `false`
        :param pulumi.Input[_builtins.str] ipv6_nat_variable: Variable name
        :param pulumi.Input[Sequence[pulumi.Input[Union['CiscoVpnInterfaceFeatureTemplateIpv6SecondaryAddressArgs', 'CiscoVpnInterfaceFeatureTemplateIpv6SecondaryAddressArgsDict']]]] ipv6_secondary_addresses: Assign secondary IPv6 addresses
        :param pulumi.Input[Sequence[pulumi.Input[Union['CiscoVpnInterfaceFeatureTemplateIpv6VrrpArgs', 'CiscoVpnInterfaceFeatureTemplateIpv6VrrpArgsDict']]]] ipv6_vrrps: Enable VRRP
        :param pulumi.Input[_builtins.int] load_interval: Interval for interface load calculation
                 - Range: `30`-`600`
                 - Default value: `30`
        :param pulumi.Input[_builtins.str] load_interval_variable: Variable name
        :param pulumi.Input[_builtins.str] mac_address: Set MAC-layer address
        :param pulumi.Input[_builtins.str] mac_address_variable: Variable name
        :param pulumi.Input[_builtins.str] media_type: Media type
                 - Choices: `auto-select`, `rj45`, `sfp`
        :param pulumi.Input[_builtins.str] media_type_variable: Variable name
        :param pulumi.Input[_builtins.str] name: The name of the feature template
        :param pulumi.Input[_builtins.bool] nat: Network Address Translation on this interface
                 - Default value: `false`
        :param pulumi.Input[_builtins.bool] nat64_interface: NAT64 on this interface
                 - Default value: `false`
        :param pulumi.Input[_builtins.bool] nat66_interface: NAT66 on this interface
                 - Default value: `false`
        :param pulumi.Input[_builtins.str] nat_inside_source_loopback_interface: Configure NAT Inside Loopback Interface
        :param pulumi.Input[_builtins.str] nat_inside_source_loopback_interface_variable: Variable name
        :param pulumi.Input[_builtins.bool] nat_overload: Enable port translation(PAT)
                 - Default value: `true`
        :param pulumi.Input[_builtins.str] nat_overload_variable: Variable name
        :param pulumi.Input[_builtins.int] nat_pool_prefix_length: Ending IP address of NAT Pool Prefix Length
        :param pulumi.Input[_builtins.str] nat_pool_prefix_length_variable: Variable name
        :param pulumi.Input[_builtins.str] nat_pool_range_end: Ending IP address of NAT pool range
        :param pulumi.Input[_builtins.str] nat_pool_range_end_variable: Variable name
        :param pulumi.Input[_builtins.str] nat_pool_range_start: Starting IP address of NAT pool range
        :param pulumi.Input[_builtins.str] nat_pool_range_start_variable: Variable name
        :param pulumi.Input[_builtins.str] nat_type: NAT type
                 - Choices: `interface`, `pool`, `loopback`
                 - Default value: `interface`
        :param pulumi.Input[_builtins.str] nat_type_variable: Variable name
        :param pulumi.Input[_builtins.bool] poe: Configure interface as Power-over-Ethernet source
                 - Default value: `false`
        :param pulumi.Input[_builtins.str] poe_variable: Variable name
        :param pulumi.Input[_builtins.bool] propagate_sgt: Enable/Disable CTS SGT propagation on an interface.
                 - Default value: `true`
        :param pulumi.Input[_builtins.int] qos_adaptive_bandwidth_downstream: Adaptive QoS default downstream bandwidth
                 - Range: `8`-`100000000`
        :param pulumi.Input[_builtins.str] qos_adaptive_bandwidth_downstream_variable: Variable name
        :param pulumi.Input[_builtins.int] qos_adaptive_bandwidth_upstream: Adaptive QoS default upstream bandwidth
                 - Range: `8`-`100000000`
        :param pulumi.Input[_builtins.str] qos_adaptive_bandwidth_upstream_variable: Variable name
        :param pulumi.Input[_builtins.int] qos_adaptive_max_downstream: Downstream max bandwidth limit
                 - Range: `8`-`100000000`
        :param pulumi.Input[_builtins.str] qos_adaptive_max_downstream_variable: Variable name
        :param pulumi.Input[_builtins.int] qos_adaptive_max_upstream: Upstream max bandwidth limit
                 - Range: `8`-`100000000`
        :param pulumi.Input[_builtins.str] qos_adaptive_max_upstream_variable: Variable name
        :param pulumi.Input[_builtins.int] qos_adaptive_min_downstream: Downstream min bandwidth limit
                 - Range: `8`-`100000000`
        :param pulumi.Input[_builtins.str] qos_adaptive_min_downstream_variable: Variable name
        :param pulumi.Input[_builtins.int] qos_adaptive_min_upstream: Upstream min bandwidth limit
                 - Range: `8`-`100000000`
        :param pulumi.Input[_builtins.str] qos_adaptive_min_upstream_variable: Variable name
        :param pulumi.Input[_builtins.int] qos_adaptive_period: Periodic timer for adaptive QoS in minutes
                 - Range: `1`-`720`
                 - Default value: `15`
        :param pulumi.Input[_builtins.str] qos_adaptive_period_variable: Variable name
        :param pulumi.Input[_builtins.str] qos_map: Name of QoS map
        :param pulumi.Input[_builtins.str] qos_map_variable: Variable name
        :param pulumi.Input[_builtins.str] qos_map_vpn: Name of VPN QoS map
        :param pulumi.Input[_builtins.str] qos_map_vpn_variable: Variable name
        :param pulumi.Input[_builtins.str] rewrite_rule_name: Name of rewrite rule
        :param pulumi.Input[_builtins.str] rewrite_rule_name_variable: Variable name
        :param pulumi.Input[_builtins.str] secondary_region: Enable secondary region
                 - Choices: `off`, `secondary-only`, `secondary-shared`
                 - Default value: `off`
        :param pulumi.Input[_builtins.str] secondary_region_variable: Variable name
        :param pulumi.Input[_builtins.bool] sgt_enforcement: Enables the interface for CTS SGT authorization and forwarding.
                 - Default value: `false`
        :param pulumi.Input[_builtins.int] sgt_enforcement_sgt: SGT value between 2 and 65519.
                 - Range: `2`-`65519`
        :param pulumi.Input[_builtins.str] sgt_enforcement_sgt_variable: Variable name
        :param pulumi.Input[_builtins.int] shaping_rate: 1ge  interfaces: [0..1000000]kbps; 10ge interfaces: [0..10000000]kbps
                 - Range: `8`-`100000000`
        :param pulumi.Input[_builtins.str] shaping_rate_variable: Variable name
        :param pulumi.Input[_builtins.bool] shutdown: Administrative state
                 - Default value: `true`
        :param pulumi.Input[_builtins.str] shutdown_variable: Variable name
        :param pulumi.Input[_builtins.str] speed: Set interface speed
                 - Choices: `10`, `100`, `1000`, `2500`, `10000`
        :param pulumi.Input[_builtins.str] speed_variable: Variable name
        :param pulumi.Input[Sequence[pulumi.Input[Union['CiscoVpnInterfaceFeatureTemplateStaticArpArgs', 'CiscoVpnInterfaceFeatureTemplateStaticArpArgsDict']]]] static_arps: Configure static ARP entries
        :param pulumi.Input[Sequence[pulumi.Input[Union['CiscoVpnInterfaceFeatureTemplateStaticNat66EntryArgs', 'CiscoVpnInterfaceFeatureTemplateStaticNat66EntryArgsDict']]]] static_nat66_entries: static NAT
        :param pulumi.Input[Sequence[pulumi.Input[Union['CiscoVpnInterfaceFeatureTemplateStaticNatEntryArgs', 'CiscoVpnInterfaceFeatureTemplateStaticNatEntryArgsDict']]]] static_nat_entries: Configure static NAT entries
        :param pulumi.Input[Sequence[pulumi.Input[Union['CiscoVpnInterfaceFeatureTemplateStaticPortForwardEntryArgs', 'CiscoVpnInterfaceFeatureTemplateStaticPortForwardEntryArgsDict']]]] static_port_forward_entries: Configure Port Forward entries
        :param pulumi.Input[_builtins.int] static_sgt: SGT value between 2 and 65519.
                 - Range: `2`-`65519`
        :param pulumi.Input[_builtins.bool] static_sgt_trusted: Indicates that the interface is trustworthy for CTS.
                 - Default value: `false`
        :param pulumi.Input[_builtins.str] static_sgt_variable: Variable name
        :param pulumi.Input[_builtins.int] tcp_mss_adjust: TCP MSS on SYN packets, in bytes
                 - Range: `500`-`1460`
        :param pulumi.Input[_builtins.str] tcp_mss_adjust_variable: Variable name
        :param pulumi.Input[_builtins.int] tcp_timeout: Set NAT TCP session timeout, in minutes
                 - Range: `1`-`8947`
                 - Default value: `60`
        :param pulumi.Input[_builtins.str] tcp_timeout_variable: Variable name
        :param pulumi.Input[_builtins.str] tloc_extension: Extends a local TLOC to a remote node only for vpn 0
        :param pulumi.Input[_builtins.str] tloc_extension_variable: Variable name
        :param pulumi.Input[_builtins.str] tracker_variable: Variable name
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] trackers: Enable tracker for this interface
        :param pulumi.Input[_builtins.int] tunnel_bandwidth: Tunnels Bandwidth Percent
                 - Range: `1`-`99`
                 - Default value: `50`
        :param pulumi.Input[_builtins.str] tunnel_bandwidth_variable: Variable name
        :param pulumi.Input[_builtins.bool] tunnel_interface_allow_all: Allow all traffic. Overrides all other allow-service options if allow-service all is set
                 - Default value: `false`
        :param pulumi.Input[_builtins.str] tunnel_interface_allow_all_variable: Variable name
        :param pulumi.Input[_builtins.bool] tunnel_interface_allow_bgp: Allow/deny BGP
                 - Default value: `false`
        :param pulumi.Input[_builtins.str] tunnel_interface_allow_bgp_variable: Variable name
        :param pulumi.Input[_builtins.bool] tunnel_interface_allow_dhcp: Allow/Deny DHCP
                 - Default value: `true`
        :param pulumi.Input[_builtins.str] tunnel_interface_allow_dhcp_variable: Variable name
        :param pulumi.Input[_builtins.bool] tunnel_interface_allow_dns: Allow/Deny DNS
                 - Default value: `true`
        :param pulumi.Input[_builtins.str] tunnel_interface_allow_dns_variable: Variable name
        :param pulumi.Input[_builtins.bool] tunnel_interface_allow_https: Allow/Deny Https
                 - Default value: `true`
        :param pulumi.Input[_builtins.str] tunnel_interface_allow_https_variable: Variable name
        :param pulumi.Input[_builtins.bool] tunnel_interface_allow_icmp: Allow/Deny ICMP
                 - Default value: `true`
        :param pulumi.Input[_builtins.str] tunnel_interface_allow_icmp_variable: Variable name
        :param pulumi.Input[_builtins.bool] tunnel_interface_allow_netconf: Allow/Deny NETCONF
                 - Default value: `false`
        :param pulumi.Input[_builtins.str] tunnel_interface_allow_netconf_variable: Variable name
        :param pulumi.Input[_builtins.bool] tunnel_interface_allow_ntp: Allow/Deny NTP
                 - Default value: `false`
        :param pulumi.Input[_builtins.str] tunnel_interface_allow_ntp_variable: Variable name
        :param pulumi.Input[_builtins.bool] tunnel_interface_allow_ospf: Allow/Deny OSPF
                 - Default value: `false`
        :param pulumi.Input[_builtins.str] tunnel_interface_allow_ospf_variable: Variable name
        :param pulumi.Input[_builtins.bool] tunnel_interface_allow_snmp: Allow/Deny SNMP
                 - Default value: `false`
        :param pulumi.Input[_builtins.str] tunnel_interface_allow_snmp_variable: Variable name
        :param pulumi.Input[_builtins.bool] tunnel_interface_allow_ssh: Allow/Deny SSH
                 - Default value: `false`
        :param pulumi.Input[_builtins.str] tunnel_interface_allow_ssh_variable: Variable name
        :param pulumi.Input[_builtins.bool] tunnel_interface_allow_stun: Allow/Deny STUN
                 - Default value: `false`
        :param pulumi.Input[_builtins.str] tunnel_interface_allow_stun_variable: Variable name
        :param pulumi.Input[_builtins.str] tunnel_interface_bind_loopback_tunnel: Bind loopback tunnel interface to a physical interface
        :param pulumi.Input[_builtins.str] tunnel_interface_bind_loopback_tunnel_variable: Variable name
        :param pulumi.Input[_builtins.bool] tunnel_interface_border: Set TLOC as border TLOC
                 - Default value: `false`
        :param pulumi.Input[_builtins.str] tunnel_interface_border_variable: Variable name
        :param pulumi.Input[_builtins.str] tunnel_interface_carrier: Set carrier for TLOC
                 - Choices: `default`, `carrier1`, `carrier2`, `carrier3`, `carrier4`, `carrier5`, `carrier6`, `carrier7`, `carrier8`
                 - Default value: `default`
        :param pulumi.Input[_builtins.str] tunnel_interface_carrier_variable: Variable name
        :param pulumi.Input[_builtins.bool] tunnel_interface_clear_dont_fragment: Enable clear dont fragment (Currently Only SDWAN Tunnel Interface)
                 - Default value: `false`
        :param pulumi.Input[_builtins.str] tunnel_interface_clear_dont_fragment_variable: Variable name
        :param pulumi.Input[_builtins.str] tunnel_interface_color: Set color for TLOC
                 - Choices: `default`, `mpls`, `metro-ethernet`, `biz-internet`, `public-internet`, `lte`, `3g`, `red`, `green`, `blue`, `gold`, `silver`, `bronze`, `custom1`, `custom2`, `custom3`, `private1`, `private2`, `private3`, `private4`, `private5`, `private6`
                 - Default value: `default`
        :param pulumi.Input[_builtins.bool] tunnel_interface_color_restrict: Restrict this TLOC behavior
                 - Default value: `false`
        :param pulumi.Input[_builtins.str] tunnel_interface_color_restrict_variable: Variable name
        :param pulumi.Input[_builtins.str] tunnel_interface_color_variable: Variable name
        :param pulumi.Input[_builtins.bool] tunnel_interface_control_connections: Allow Control Connection
                 - Default value: `true`
        :param pulumi.Input[_builtins.str] tunnel_interface_control_connections_variable: Variable name
        :param pulumi.Input[Sequence[pulumi.Input[Union['CiscoVpnInterfaceFeatureTemplateTunnelInterfaceEncapsulationArgs', 'CiscoVpnInterfaceFeatureTemplateTunnelInterfaceEncapsulationArgsDict']]]] tunnel_interface_encapsulations: Encapsulation for TLOC
        :param pulumi.Input[_builtins.str] tunnel_interface_exclude_controller_group_list_variable: Variable name
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.int]]] tunnel_interface_exclude_controller_group_lists: Exclude the following controller groups defined in this list
        :param pulumi.Input[_builtins.str] tunnel_interface_gre_tunnel_destination_ip: Extend the TLOC to a remote node over GRE tunnel
        :param pulumi.Input[_builtins.str] tunnel_interface_gre_tunnel_destination_ip_variable: Variable name
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.int]]] tunnel_interface_groups: List of groups
        :param pulumi.Input[_builtins.str] tunnel_interface_groups_variable: Variable name
        :param pulumi.Input[_builtins.int] tunnel_interface_hello_interval: Set time period of control hello packets <100..600000> milli seconds
                 - Range: `100`-`600000`
                 - Default value: `1000`
        :param pulumi.Input[_builtins.str] tunnel_interface_hello_interval_variable: Variable name
        :param pulumi.Input[_builtins.int] tunnel_interface_hello_tolerance: Set tolerance of control hello packets <12..6000> seconds
                 - Range: `12`-`6000`
                 - Default value: `12`
        :param pulumi.Input[_builtins.str] tunnel_interface_hello_tolerance_variable: Variable name
        :param pulumi.Input[_builtins.bool] tunnel_interface_last_resort_circuit: Set TLOC as last resort
                 - Default value: `false`
        :param pulumi.Input[_builtins.str] tunnel_interface_last_resort_circuit_variable: Variable name
        :param pulumi.Input[_builtins.bool] tunnel_interface_low_bandwidth_link: Set the interface as a low-bandwidth circuit
                 - Default value: `false`
        :param pulumi.Input[_builtins.str] tunnel_interface_low_bandwidth_link_variable: Variable name
        :param pulumi.Input[_builtins.int] tunnel_interface_max_control_connections: Set the maximum number of control connections for this TLOC
                 - Range: `0`-`100`
        :param pulumi.Input[_builtins.str] tunnel_interface_max_control_connections_variable: Variable name
        :param pulumi.Input[_builtins.int] tunnel_interface_nat_refresh_interval: Set time period of nat refresh packets <1...60> seconds
                 - Range: `1`-`60`
                 - Default value: `5`
        :param pulumi.Input[_builtins.str] tunnel_interface_nat_refresh_interval_variable: Variable name
        :param pulumi.Input[_builtins.bool] tunnel_interface_network_broadcast: Accept and respond to network-prefix-directed broadcasts)
                 - Default value: `false`
        :param pulumi.Input[_builtins.str] tunnel_interface_network_broadcast_variable: Variable name
        :param pulumi.Input[_builtins.bool] tunnel_interface_port_hop: Disallow port hopping on the tunnel interface
                 - Default value: `true`
        :param pulumi.Input[_builtins.str] tunnel_interface_port_hop_variable: Variable name
        :param pulumi.Input[_builtins.bool] tunnel_interface_propagate_sgt: CTS SGT Propagation configuration
                 - Default value: `false`
        :param pulumi.Input[_builtins.str] tunnel_interface_propagate_sgt_variable: Variable name
        :param pulumi.Input[_builtins.int] tunnel_interface_tunnel_tcp_mss: Tunnel TCP MSS on SYN packets, in bytes
                 - Range: `500`-`1460`
        :param pulumi.Input[_builtins.str] tunnel_interface_tunnel_tcp_mss_variable: Variable name
        :param pulumi.Input[_builtins.bool] tunnel_interface_vbond_as_stun_server: Put this wan interface in STUN mode only
                 - Default value: `false`
        :param pulumi.Input[_builtins.str] tunnel_interface_vbond_as_stun_server_variable: Variable name
        :param pulumi.Input[_builtins.int] tunnel_interface_vmanage_connection_preference: Set interface preference for control connection to vManage <0..8>
                 - Range: `0`-`8`
                 - Default value: `5`
        :param pulumi.Input[_builtins.str] tunnel_interface_vmanage_connection_preference_variable: Variable name
        :param pulumi.Input[_builtins.str] tunnel_qos_mode: Set tunnel QoS mode
                 - Choices: `hub`, `spoke`
        :param pulumi.Input[_builtins.str] tunnel_qos_mode_variable: Variable name
        :param pulumi.Input[_builtins.int] udp_timeout: Set NAT UDP session timeout, in minutes
                 - Range: `1`-`8947`
                 - Default value: `1`
        :param pulumi.Input[_builtins.str] udp_timeout_variable: Variable name
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: CiscoVpnInterfaceFeatureTemplateArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        This resource can manage a Cisco VPN Interface feature template.
          - Minimum SD-WAN Manager version: `15.0.0`

        ## Example Usage

        ## Import

        The `pulumi import` command can be used, for example:

        ```sh
        $ pulumi import sdwan:index/ciscoVpnInterfaceFeatureTemplate:CiscoVpnInterfaceFeatureTemplate example "f6b2c44c-693c-4763-b010-895aa3d236bd"
        ```

        :param str resource_name: The name of the resource.
        :param CiscoVpnInterfaceFeatureTemplateArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(CiscoVpnInterfaceFeatureTemplateArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 access_lists: Optional[pulumi.Input[Sequence[pulumi.Input[Union['CiscoVpnInterfaceFeatureTemplateAccessListArgs', 'CiscoVpnInterfaceFeatureTemplateAccessListArgsDict']]]]] = None,
                 address: Optional[pulumi.Input[_builtins.str]] = None,
                 address_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 arp_timeout: Optional[pulumi.Input[_builtins.int]] = None,
                 arp_timeout_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 auto_bandwidth_detect: Optional[pulumi.Input[_builtins.bool]] = None,
                 auto_bandwidth_detect_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 autonegotiate: Optional[pulumi.Input[_builtins.bool]] = None,
                 autonegotiate_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 bandwidth_downstream: Optional[pulumi.Input[_builtins.int]] = None,
                 bandwidth_downstream_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 bandwidth_upstream: Optional[pulumi.Input[_builtins.int]] = None,
                 bandwidth_upstream_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 block_non_source_ip: Optional[pulumi.Input[_builtins.bool]] = None,
                 block_non_source_ip_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 core_region: Optional[pulumi.Input[_builtins.str]] = None,
                 core_region_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 description: Optional[pulumi.Input[_builtins.str]] = None,
                 device_types: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 dhcp: Optional[pulumi.Input[_builtins.bool]] = None,
                 dhcp_distance: Optional[pulumi.Input[_builtins.int]] = None,
                 dhcp_distance_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 dhcp_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 dhcpv6: Optional[pulumi.Input[_builtins.bool]] = None,
                 dhcpv6_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 duplex: Optional[pulumi.Input[_builtins.str]] = None,
                 duplex_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 enable_core_region: Optional[pulumi.Input[_builtins.bool]] = None,
                 enable_sgt: Optional[pulumi.Input[_builtins.bool]] = None,
                 gre_tunnel_source_ip: Optional[pulumi.Input[_builtins.str]] = None,
                 gre_tunnel_source_ip_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 gre_tunnel_xconnect: Optional[pulumi.Input[_builtins.str]] = None,
                 gre_tunnel_xconnect_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 icmp_redirect_disable: Optional[pulumi.Input[_builtins.bool]] = None,
                 icmp_redirect_disable_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 interface_description: Optional[pulumi.Input[_builtins.str]] = None,
                 interface_description_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 interface_mtu: Optional[pulumi.Input[_builtins.int]] = None,
                 interface_mtu_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 interface_name: Optional[pulumi.Input[_builtins.str]] = None,
                 interface_name_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 ip_directed_broadcast: Optional[pulumi.Input[_builtins.bool]] = None,
                 ip_directed_broadcast_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 ip_mtu: Optional[pulumi.Input[_builtins.int]] = None,
                 ip_mtu_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 iperf_server: Optional[pulumi.Input[_builtins.str]] = None,
                 iperf_server_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 ipv4_dhcp_helper_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 ipv4_dhcp_helpers: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 ipv4_secondary_addresses: Optional[pulumi.Input[Sequence[pulumi.Input[Union['CiscoVpnInterfaceFeatureTemplateIpv4SecondaryAddressArgs', 'CiscoVpnInterfaceFeatureTemplateIpv4SecondaryAddressArgsDict']]]]] = None,
                 ipv4_vrrps: Optional[pulumi.Input[Sequence[pulumi.Input[Union['CiscoVpnInterfaceFeatureTemplateIpv4VrrpArgs', 'CiscoVpnInterfaceFeatureTemplateIpv4VrrpArgsDict']]]]] = None,
                 ipv6_access_lists: Optional[pulumi.Input[Sequence[pulumi.Input[Union['CiscoVpnInterfaceFeatureTemplateIpv6AccessListArgs', 'CiscoVpnInterfaceFeatureTemplateIpv6AccessListArgsDict']]]]] = None,
                 ipv6_address: Optional[pulumi.Input[_builtins.str]] = None,
                 ipv6_address_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 ipv6_dhcp_helpers: Optional[pulumi.Input[Sequence[pulumi.Input[Union['CiscoVpnInterfaceFeatureTemplateIpv6DhcpHelperArgs', 'CiscoVpnInterfaceFeatureTemplateIpv6DhcpHelperArgsDict']]]]] = None,
                 ipv6_nat: Optional[pulumi.Input[_builtins.bool]] = None,
                 ipv6_nat_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 ipv6_secondary_addresses: Optional[pulumi.Input[Sequence[pulumi.Input[Union['CiscoVpnInterfaceFeatureTemplateIpv6SecondaryAddressArgs', 'CiscoVpnInterfaceFeatureTemplateIpv6SecondaryAddressArgsDict']]]]] = None,
                 ipv6_vrrps: Optional[pulumi.Input[Sequence[pulumi.Input[Union['CiscoVpnInterfaceFeatureTemplateIpv6VrrpArgs', 'CiscoVpnInterfaceFeatureTemplateIpv6VrrpArgsDict']]]]] = None,
                 load_interval: Optional[pulumi.Input[_builtins.int]] = None,
                 load_interval_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 mac_address: Optional[pulumi.Input[_builtins.str]] = None,
                 mac_address_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 media_type: Optional[pulumi.Input[_builtins.str]] = None,
                 media_type_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 nat: Optional[pulumi.Input[_builtins.bool]] = None,
                 nat64_interface: Optional[pulumi.Input[_builtins.bool]] = None,
                 nat66_interface: Optional[pulumi.Input[_builtins.bool]] = None,
                 nat_inside_source_loopback_interface: Optional[pulumi.Input[_builtins.str]] = None,
                 nat_inside_source_loopback_interface_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 nat_overload: Optional[pulumi.Input[_builtins.bool]] = None,
                 nat_overload_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 nat_pool_prefix_length: Optional[pulumi.Input[_builtins.int]] = None,
                 nat_pool_prefix_length_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 nat_pool_range_end: Optional[pulumi.Input[_builtins.str]] = None,
                 nat_pool_range_end_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 nat_pool_range_start: Optional[pulumi.Input[_builtins.str]] = None,
                 nat_pool_range_start_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 nat_type: Optional[pulumi.Input[_builtins.str]] = None,
                 nat_type_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 poe: Optional[pulumi.Input[_builtins.bool]] = None,
                 poe_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 propagate_sgt: Optional[pulumi.Input[_builtins.bool]] = None,
                 qos_adaptive_bandwidth_downstream: Optional[pulumi.Input[_builtins.int]] = None,
                 qos_adaptive_bandwidth_downstream_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 qos_adaptive_bandwidth_upstream: Optional[pulumi.Input[_builtins.int]] = None,
                 qos_adaptive_bandwidth_upstream_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 qos_adaptive_max_downstream: Optional[pulumi.Input[_builtins.int]] = None,
                 qos_adaptive_max_downstream_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 qos_adaptive_max_upstream: Optional[pulumi.Input[_builtins.int]] = None,
                 qos_adaptive_max_upstream_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 qos_adaptive_min_downstream: Optional[pulumi.Input[_builtins.int]] = None,
                 qos_adaptive_min_downstream_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 qos_adaptive_min_upstream: Optional[pulumi.Input[_builtins.int]] = None,
                 qos_adaptive_min_upstream_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 qos_adaptive_period: Optional[pulumi.Input[_builtins.int]] = None,
                 qos_adaptive_period_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 qos_map: Optional[pulumi.Input[_builtins.str]] = None,
                 qos_map_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 qos_map_vpn: Optional[pulumi.Input[_builtins.str]] = None,
                 qos_map_vpn_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 rewrite_rule_name: Optional[pulumi.Input[_builtins.str]] = None,
                 rewrite_rule_name_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 secondary_region: Optional[pulumi.Input[_builtins.str]] = None,
                 secondary_region_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 sgt_enforcement: Optional[pulumi.Input[_builtins.bool]] = None,
                 sgt_enforcement_sgt: Optional[pulumi.Input[_builtins.int]] = None,
                 sgt_enforcement_sgt_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 shaping_rate: Optional[pulumi.Input[_builtins.int]] = None,
                 shaping_rate_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 shutdown: Optional[pulumi.Input[_builtins.bool]] = None,
                 shutdown_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 speed: Optional[pulumi.Input[_builtins.str]] = None,
                 speed_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 static_arps: Optional[pulumi.Input[Sequence[pulumi.Input[Union['CiscoVpnInterfaceFeatureTemplateStaticArpArgs', 'CiscoVpnInterfaceFeatureTemplateStaticArpArgsDict']]]]] = None,
                 static_nat66_entries: Optional[pulumi.Input[Sequence[pulumi.Input[Union['CiscoVpnInterfaceFeatureTemplateStaticNat66EntryArgs', 'CiscoVpnInterfaceFeatureTemplateStaticNat66EntryArgsDict']]]]] = None,
                 static_nat_entries: Optional[pulumi.Input[Sequence[pulumi.Input[Union['CiscoVpnInterfaceFeatureTemplateStaticNatEntryArgs', 'CiscoVpnInterfaceFeatureTemplateStaticNatEntryArgsDict']]]]] = None,
                 static_port_forward_entries: Optional[pulumi.Input[Sequence[pulumi.Input[Union['CiscoVpnInterfaceFeatureTemplateStaticPortForwardEntryArgs', 'CiscoVpnInterfaceFeatureTemplateStaticPortForwardEntryArgsDict']]]]] = None,
                 static_sgt: Optional[pulumi.Input[_builtins.int]] = None,
                 static_sgt_trusted: Optional[pulumi.Input[_builtins.bool]] = None,
                 static_sgt_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 tcp_mss_adjust: Optional[pulumi.Input[_builtins.int]] = None,
                 tcp_mss_adjust_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 tcp_timeout: Optional[pulumi.Input[_builtins.int]] = None,
                 tcp_timeout_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 tloc_extension: Optional[pulumi.Input[_builtins.str]] = None,
                 tloc_extension_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 tracker_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 trackers: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 tunnel_bandwidth: Optional[pulumi.Input[_builtins.int]] = None,
                 tunnel_bandwidth_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 tunnel_interface_allow_all: Optional[pulumi.Input[_builtins.bool]] = None,
                 tunnel_interface_allow_all_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 tunnel_interface_allow_bgp: Optional[pulumi.Input[_builtins.bool]] = None,
                 tunnel_interface_allow_bgp_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 tunnel_interface_allow_dhcp: Optional[pulumi.Input[_builtins.bool]] = None,
                 tunnel_interface_allow_dhcp_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 tunnel_interface_allow_dns: Optional[pulumi.Input[_builtins.bool]] = None,
                 tunnel_interface_allow_dns_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 tunnel_interface_allow_https: Optional[pulumi.Input[_builtins.bool]] = None,
                 tunnel_interface_allow_https_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 tunnel_interface_allow_icmp: Optional[pulumi.Input[_builtins.bool]] = None,
                 tunnel_interface_allow_icmp_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 tunnel_interface_allow_netconf: Optional[pulumi.Input[_builtins.bool]] = None,
                 tunnel_interface_allow_netconf_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 tunnel_interface_allow_ntp: Optional[pulumi.Input[_builtins.bool]] = None,
                 tunnel_interface_allow_ntp_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 tunnel_interface_allow_ospf: Optional[pulumi.Input[_builtins.bool]] = None,
                 tunnel_interface_allow_ospf_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 tunnel_interface_allow_snmp: Optional[pulumi.Input[_builtins.bool]] = None,
                 tunnel_interface_allow_snmp_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 tunnel_interface_allow_ssh: Optional[pulumi.Input[_builtins.bool]] = None,
                 tunnel_interface_allow_ssh_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 tunnel_interface_allow_stun: Optional[pulumi.Input[_builtins.bool]] = None,
                 tunnel_interface_allow_stun_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 tunnel_interface_bind_loopback_tunnel: Optional[pulumi.Input[_builtins.str]] = None,
                 tunnel_interface_bind_loopback_tunnel_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 tunnel_interface_border: Optional[pulumi.Input[_builtins.bool]] = None,
                 tunnel_interface_border_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 tunnel_interface_carrier: Optional[pulumi.Input[_builtins.str]] = None,
                 tunnel_interface_carrier_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 tunnel_interface_clear_dont_fragment: Optional[pulumi.Input[_builtins.bool]] = None,
                 tunnel_interface_clear_dont_fragment_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 tunnel_interface_color: Optional[pulumi.Input[_builtins.str]] = None,
                 tunnel_interface_color_restrict: Optional[pulumi.Input[_builtins.bool]] = None,
                 tunnel_interface_color_restrict_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 tunnel_interface_color_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 tunnel_interface_control_connections: Optional[pulumi.Input[_builtins.bool]] = None,
                 tunnel_interface_control_connections_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 tunnel_interface_encapsulations: Optional[pulumi.Input[Sequence[pulumi.Input[Union['CiscoVpnInterfaceFeatureTemplateTunnelInterfaceEncapsulationArgs', 'CiscoVpnInterfaceFeatureTemplateTunnelInterfaceEncapsulationArgsDict']]]]] = None,
                 tunnel_interface_exclude_controller_group_list_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 tunnel_interface_exclude_controller_group_lists: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.int]]]] = None,
                 tunnel_interface_gre_tunnel_destination_ip: Optional[pulumi.Input[_builtins.str]] = None,
                 tunnel_interface_gre_tunnel_destination_ip_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 tunnel_interface_groups: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.int]]]] = None,
                 tunnel_interface_groups_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 tunnel_interface_hello_interval: Optional[pulumi.Input[_builtins.int]] = None,
                 tunnel_interface_hello_interval_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 tunnel_interface_hello_tolerance: Optional[pulumi.Input[_builtins.int]] = None,
                 tunnel_interface_hello_tolerance_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 tunnel_interface_last_resort_circuit: Optional[pulumi.Input[_builtins.bool]] = None,
                 tunnel_interface_last_resort_circuit_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 tunnel_interface_low_bandwidth_link: Optional[pulumi.Input[_builtins.bool]] = None,
                 tunnel_interface_low_bandwidth_link_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 tunnel_interface_max_control_connections: Optional[pulumi.Input[_builtins.int]] = None,
                 tunnel_interface_max_control_connections_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 tunnel_interface_nat_refresh_interval: Optional[pulumi.Input[_builtins.int]] = None,
                 tunnel_interface_nat_refresh_interval_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 tunnel_interface_network_broadcast: Optional[pulumi.Input[_builtins.bool]] = None,
                 tunnel_interface_network_broadcast_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 tunnel_interface_port_hop: Optional[pulumi.Input[_builtins.bool]] = None,
                 tunnel_interface_port_hop_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 tunnel_interface_propagate_sgt: Optional[pulumi.Input[_builtins.bool]] = None,
                 tunnel_interface_propagate_sgt_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 tunnel_interface_tunnel_tcp_mss: Optional[pulumi.Input[_builtins.int]] = None,
                 tunnel_interface_tunnel_tcp_mss_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 tunnel_interface_vbond_as_stun_server: Optional[pulumi.Input[_builtins.bool]] = None,
                 tunnel_interface_vbond_as_stun_server_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 tunnel_interface_vmanage_connection_preference: Optional[pulumi.Input[_builtins.int]] = None,
                 tunnel_interface_vmanage_connection_preference_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 tunnel_qos_mode: Optional[pulumi.Input[_builtins.str]] = None,
                 tunnel_qos_mode_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 udp_timeout: Optional[pulumi.Input[_builtins.int]] = None,
                 udp_timeout_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = CiscoVpnInterfaceFeatureTemplateArgs.__new__(CiscoVpnInterfaceFeatureTemplateArgs)

            __props__.__dict__["access_lists"] = access_lists
            __props__.__dict__["address"] = address
            __props__.__dict__["address_variable"] = address_variable
            __props__.__dict__["arp_timeout"] = arp_timeout
            __props__.__dict__["arp_timeout_variable"] = arp_timeout_variable
            __props__.__dict__["auto_bandwidth_detect"] = auto_bandwidth_detect
            __props__.__dict__["auto_bandwidth_detect_variable"] = auto_bandwidth_detect_variable
            __props__.__dict__["autonegotiate"] = autonegotiate
            __props__.__dict__["autonegotiate_variable"] = autonegotiate_variable
            __props__.__dict__["bandwidth_downstream"] = bandwidth_downstream
            __props__.__dict__["bandwidth_downstream_variable"] = bandwidth_downstream_variable
            __props__.__dict__["bandwidth_upstream"] = bandwidth_upstream
            __props__.__dict__["bandwidth_upstream_variable"] = bandwidth_upstream_variable
            __props__.__dict__["block_non_source_ip"] = block_non_source_ip
            __props__.__dict__["block_non_source_ip_variable"] = block_non_source_ip_variable
            __props__.__dict__["core_region"] = core_region
            __props__.__dict__["core_region_variable"] = core_region_variable
            if description is None and not opts.urn:
                raise TypeError("Missing required property 'description'")
            __props__.__dict__["description"] = description
            if device_types is None and not opts.urn:
                raise TypeError("Missing required property 'device_types'")
            __props__.__dict__["device_types"] = device_types
            __props__.__dict__["dhcp"] = dhcp
            __props__.__dict__["dhcp_distance"] = dhcp_distance
            __props__.__dict__["dhcp_distance_variable"] = dhcp_distance_variable
            __props__.__dict__["dhcp_variable"] = dhcp_variable
            __props__.__dict__["dhcpv6"] = dhcpv6
            __props__.__dict__["dhcpv6_variable"] = dhcpv6_variable
            __props__.__dict__["duplex"] = duplex
            __props__.__dict__["duplex_variable"] = duplex_variable
            __props__.__dict__["enable_core_region"] = enable_core_region
            __props__.__dict__["enable_sgt"] = enable_sgt
            __props__.__dict__["gre_tunnel_source_ip"] = gre_tunnel_source_ip
            __props__.__dict__["gre_tunnel_source_ip_variable"] = gre_tunnel_source_ip_variable
            __props__.__dict__["gre_tunnel_xconnect"] = gre_tunnel_xconnect
            __props__.__dict__["gre_tunnel_xconnect_variable"] = gre_tunnel_xconnect_variable
            __props__.__dict__["icmp_redirect_disable"] = icmp_redirect_disable
            __props__.__dict__["icmp_redirect_disable_variable"] = icmp_redirect_disable_variable
            __props__.__dict__["interface_description"] = interface_description
            __props__.__dict__["interface_description_variable"] = interface_description_variable
            __props__.__dict__["interface_mtu"] = interface_mtu
            __props__.__dict__["interface_mtu_variable"] = interface_mtu_variable
            __props__.__dict__["interface_name"] = interface_name
            __props__.__dict__["interface_name_variable"] = interface_name_variable
            __props__.__dict__["ip_directed_broadcast"] = ip_directed_broadcast
            __props__.__dict__["ip_directed_broadcast_variable"] = ip_directed_broadcast_variable
            __props__.__dict__["ip_mtu"] = ip_mtu
            __props__.__dict__["ip_mtu_variable"] = ip_mtu_variable
            __props__.__dict__["iperf_server"] = iperf_server
            __props__.__dict__["iperf_server_variable"] = iperf_server_variable
            __props__.__dict__["ipv4_dhcp_helper_variable"] = ipv4_dhcp_helper_variable
            __props__.__dict__["ipv4_dhcp_helpers"] = ipv4_dhcp_helpers
            __props__.__dict__["ipv4_secondary_addresses"] = ipv4_secondary_addresses
            __props__.__dict__["ipv4_vrrps"] = ipv4_vrrps
            __props__.__dict__["ipv6_access_lists"] = ipv6_access_lists
            __props__.__dict__["ipv6_address"] = ipv6_address
            __props__.__dict__["ipv6_address_variable"] = ipv6_address_variable
            __props__.__dict__["ipv6_dhcp_helpers"] = ipv6_dhcp_helpers
            __props__.__dict__["ipv6_nat"] = ipv6_nat
            __props__.__dict__["ipv6_nat_variable"] = ipv6_nat_variable
            __props__.__dict__["ipv6_secondary_addresses"] = ipv6_secondary_addresses
            __props__.__dict__["ipv6_vrrps"] = ipv6_vrrps
            __props__.__dict__["load_interval"] = load_interval
            __props__.__dict__["load_interval_variable"] = load_interval_variable
            __props__.__dict__["mac_address"] = mac_address
            __props__.__dict__["mac_address_variable"] = mac_address_variable
            __props__.__dict__["media_type"] = media_type
            __props__.__dict__["media_type_variable"] = media_type_variable
            __props__.__dict__["name"] = name
            __props__.__dict__["nat"] = nat
            __props__.__dict__["nat64_interface"] = nat64_interface
            __props__.__dict__["nat66_interface"] = nat66_interface
            __props__.__dict__["nat_inside_source_loopback_interface"] = nat_inside_source_loopback_interface
            __props__.__dict__["nat_inside_source_loopback_interface_variable"] = nat_inside_source_loopback_interface_variable
            __props__.__dict__["nat_overload"] = nat_overload
            __props__.__dict__["nat_overload_variable"] = nat_overload_variable
            __props__.__dict__["nat_pool_prefix_length"] = nat_pool_prefix_length
            __props__.__dict__["nat_pool_prefix_length_variable"] = nat_pool_prefix_length_variable
            __props__.__dict__["nat_pool_range_end"] = nat_pool_range_end
            __props__.__dict__["nat_pool_range_end_variable"] = nat_pool_range_end_variable
            __props__.__dict__["nat_pool_range_start"] = nat_pool_range_start
            __props__.__dict__["nat_pool_range_start_variable"] = nat_pool_range_start_variable
            __props__.__dict__["nat_type"] = nat_type
            __props__.__dict__["nat_type_variable"] = nat_type_variable
            __props__.__dict__["poe"] = poe
            __props__.__dict__["poe_variable"] = poe_variable
            __props__.__dict__["propagate_sgt"] = propagate_sgt
            __props__.__dict__["qos_adaptive_bandwidth_downstream"] = qos_adaptive_bandwidth_downstream
            __props__.__dict__["qos_adaptive_bandwidth_downstream_variable"] = qos_adaptive_bandwidth_downstream_variable
            __props__.__dict__["qos_adaptive_bandwidth_upstream"] = qos_adaptive_bandwidth_upstream
            __props__.__dict__["qos_adaptive_bandwidth_upstream_variable"] = qos_adaptive_bandwidth_upstream_variable
            __props__.__dict__["qos_adaptive_max_downstream"] = qos_adaptive_max_downstream
            __props__.__dict__["qos_adaptive_max_downstream_variable"] = qos_adaptive_max_downstream_variable
            __props__.__dict__["qos_adaptive_max_upstream"] = qos_adaptive_max_upstream
            __props__.__dict__["qos_adaptive_max_upstream_variable"] = qos_adaptive_max_upstream_variable
            __props__.__dict__["qos_adaptive_min_downstream"] = qos_adaptive_min_downstream
            __props__.__dict__["qos_adaptive_min_downstream_variable"] = qos_adaptive_min_downstream_variable
            __props__.__dict__["qos_adaptive_min_upstream"] = qos_adaptive_min_upstream
            __props__.__dict__["qos_adaptive_min_upstream_variable"] = qos_adaptive_min_upstream_variable
            __props__.__dict__["qos_adaptive_period"] = qos_adaptive_period
            __props__.__dict__["qos_adaptive_period_variable"] = qos_adaptive_period_variable
            __props__.__dict__["qos_map"] = qos_map
            __props__.__dict__["qos_map_variable"] = qos_map_variable
            __props__.__dict__["qos_map_vpn"] = qos_map_vpn
            __props__.__dict__["qos_map_vpn_variable"] = qos_map_vpn_variable
            __props__.__dict__["rewrite_rule_name"] = rewrite_rule_name
            __props__.__dict__["rewrite_rule_name_variable"] = rewrite_rule_name_variable
            __props__.__dict__["secondary_region"] = secondary_region
            __props__.__dict__["secondary_region_variable"] = secondary_region_variable
            __props__.__dict__["sgt_enforcement"] = sgt_enforcement
            __props__.__dict__["sgt_enforcement_sgt"] = sgt_enforcement_sgt
            __props__.__dict__["sgt_enforcement_sgt_variable"] = sgt_enforcement_sgt_variable
            __props__.__dict__["shaping_rate"] = shaping_rate
            __props__.__dict__["shaping_rate_variable"] = shaping_rate_variable
            __props__.__dict__["shutdown"] = shutdown
            __props__.__dict__["shutdown_variable"] = shutdown_variable
            __props__.__dict__["speed"] = speed
            __props__.__dict__["speed_variable"] = speed_variable
            __props__.__dict__["static_arps"] = static_arps
            __props__.__dict__["static_nat66_entries"] = static_nat66_entries
            __props__.__dict__["static_nat_entries"] = static_nat_entries
            __props__.__dict__["static_port_forward_entries"] = static_port_forward_entries
            __props__.__dict__["static_sgt"] = static_sgt
            __props__.__dict__["static_sgt_trusted"] = static_sgt_trusted
            __props__.__dict__["static_sgt_variable"] = static_sgt_variable
            __props__.__dict__["tcp_mss_adjust"] = tcp_mss_adjust
            __props__.__dict__["tcp_mss_adjust_variable"] = tcp_mss_adjust_variable
            __props__.__dict__["tcp_timeout"] = tcp_timeout
            __props__.__dict__["tcp_timeout_variable"] = tcp_timeout_variable
            __props__.__dict__["tloc_extension"] = tloc_extension
            __props__.__dict__["tloc_extension_variable"] = tloc_extension_variable
            __props__.__dict__["tracker_variable"] = tracker_variable
            __props__.__dict__["trackers"] = trackers
            __props__.__dict__["tunnel_bandwidth"] = tunnel_bandwidth
            __props__.__dict__["tunnel_bandwidth_variable"] = tunnel_bandwidth_variable
            __props__.__dict__["tunnel_interface_allow_all"] = tunnel_interface_allow_all
            __props__.__dict__["tunnel_interface_allow_all_variable"] = tunnel_interface_allow_all_variable
            __props__.__dict__["tunnel_interface_allow_bgp"] = tunnel_interface_allow_bgp
            __props__.__dict__["tunnel_interface_allow_bgp_variable"] = tunnel_interface_allow_bgp_variable
            __props__.__dict__["tunnel_interface_allow_dhcp"] = tunnel_interface_allow_dhcp
            __props__.__dict__["tunnel_interface_allow_dhcp_variable"] = tunnel_interface_allow_dhcp_variable
            __props__.__dict__["tunnel_interface_allow_dns"] = tunnel_interface_allow_dns
            __props__.__dict__["tunnel_interface_allow_dns_variable"] = tunnel_interface_allow_dns_variable
            __props__.__dict__["tunnel_interface_allow_https"] = tunnel_interface_allow_https
            __props__.__dict__["tunnel_interface_allow_https_variable"] = tunnel_interface_allow_https_variable
            __props__.__dict__["tunnel_interface_allow_icmp"] = tunnel_interface_allow_icmp
            __props__.__dict__["tunnel_interface_allow_icmp_variable"] = tunnel_interface_allow_icmp_variable
            __props__.__dict__["tunnel_interface_allow_netconf"] = tunnel_interface_allow_netconf
            __props__.__dict__["tunnel_interface_allow_netconf_variable"] = tunnel_interface_allow_netconf_variable
            __props__.__dict__["tunnel_interface_allow_ntp"] = tunnel_interface_allow_ntp
            __props__.__dict__["tunnel_interface_allow_ntp_variable"] = tunnel_interface_allow_ntp_variable
            __props__.__dict__["tunnel_interface_allow_ospf"] = tunnel_interface_allow_ospf
            __props__.__dict__["tunnel_interface_allow_ospf_variable"] = tunnel_interface_allow_ospf_variable
            __props__.__dict__["tunnel_interface_allow_snmp"] = tunnel_interface_allow_snmp
            __props__.__dict__["tunnel_interface_allow_snmp_variable"] = tunnel_interface_allow_snmp_variable
            __props__.__dict__["tunnel_interface_allow_ssh"] = tunnel_interface_allow_ssh
            __props__.__dict__["tunnel_interface_allow_ssh_variable"] = tunnel_interface_allow_ssh_variable
            __props__.__dict__["tunnel_interface_allow_stun"] = tunnel_interface_allow_stun
            __props__.__dict__["tunnel_interface_allow_stun_variable"] = tunnel_interface_allow_stun_variable
            __props__.__dict__["tunnel_interface_bind_loopback_tunnel"] = tunnel_interface_bind_loopback_tunnel
            __props__.__dict__["tunnel_interface_bind_loopback_tunnel_variable"] = tunnel_interface_bind_loopback_tunnel_variable
            __props__.__dict__["tunnel_interface_border"] = tunnel_interface_border
            __props__.__dict__["tunnel_interface_border_variable"] = tunnel_interface_border_variable
            __props__.__dict__["tunnel_interface_carrier"] = tunnel_interface_carrier
            __props__.__dict__["tunnel_interface_carrier_variable"] = tunnel_interface_carrier_variable
            __props__.__dict__["tunnel_interface_clear_dont_fragment"] = tunnel_interface_clear_dont_fragment
            __props__.__dict__["tunnel_interface_clear_dont_fragment_variable"] = tunnel_interface_clear_dont_fragment_variable
            __props__.__dict__["tunnel_interface_color"] = tunnel_interface_color
            __props__.__dict__["tunnel_interface_color_restrict"] = tunnel_interface_color_restrict
            __props__.__dict__["tunnel_interface_color_restrict_variable"] = tunnel_interface_color_restrict_variable
            __props__.__dict__["tunnel_interface_color_variable"] = tunnel_interface_color_variable
            __props__.__dict__["tunnel_interface_control_connections"] = tunnel_interface_control_connections
            __props__.__dict__["tunnel_interface_control_connections_variable"] = tunnel_interface_control_connections_variable
            __props__.__dict__["tunnel_interface_encapsulations"] = tunnel_interface_encapsulations
            __props__.__dict__["tunnel_interface_exclude_controller_group_list_variable"] = tunnel_interface_exclude_controller_group_list_variable
            __props__.__dict__["tunnel_interface_exclude_controller_group_lists"] = tunnel_interface_exclude_controller_group_lists
            __props__.__dict__["tunnel_interface_gre_tunnel_destination_ip"] = tunnel_interface_gre_tunnel_destination_ip
            __props__.__dict__["tunnel_interface_gre_tunnel_destination_ip_variable"] = tunnel_interface_gre_tunnel_destination_ip_variable
            __props__.__dict__["tunnel_interface_groups"] = tunnel_interface_groups
            __props__.__dict__["tunnel_interface_groups_variable"] = tunnel_interface_groups_variable
            __props__.__dict__["tunnel_interface_hello_interval"] = tunnel_interface_hello_interval
            __props__.__dict__["tunnel_interface_hello_interval_variable"] = tunnel_interface_hello_interval_variable
            __props__.__dict__["tunnel_interface_hello_tolerance"] = tunnel_interface_hello_tolerance
            __props__.__dict__["tunnel_interface_hello_tolerance_variable"] = tunnel_interface_hello_tolerance_variable
            __props__.__dict__["tunnel_interface_last_resort_circuit"] = tunnel_interface_last_resort_circuit
            __props__.__dict__["tunnel_interface_last_resort_circuit_variable"] = tunnel_interface_last_resort_circuit_variable
            __props__.__dict__["tunnel_interface_low_bandwidth_link"] = tunnel_interface_low_bandwidth_link
            __props__.__dict__["tunnel_interface_low_bandwidth_link_variable"] = tunnel_interface_low_bandwidth_link_variable
            __props__.__dict__["tunnel_interface_max_control_connections"] = tunnel_interface_max_control_connections
            __props__.__dict__["tunnel_interface_max_control_connections_variable"] = tunnel_interface_max_control_connections_variable
            __props__.__dict__["tunnel_interface_nat_refresh_interval"] = tunnel_interface_nat_refresh_interval
            __props__.__dict__["tunnel_interface_nat_refresh_interval_variable"] = tunnel_interface_nat_refresh_interval_variable
            __props__.__dict__["tunnel_interface_network_broadcast"] = tunnel_interface_network_broadcast
            __props__.__dict__["tunnel_interface_network_broadcast_variable"] = tunnel_interface_network_broadcast_variable
            __props__.__dict__["tunnel_interface_port_hop"] = tunnel_interface_port_hop
            __props__.__dict__["tunnel_interface_port_hop_variable"] = tunnel_interface_port_hop_variable
            __props__.__dict__["tunnel_interface_propagate_sgt"] = tunnel_interface_propagate_sgt
            __props__.__dict__["tunnel_interface_propagate_sgt_variable"] = tunnel_interface_propagate_sgt_variable
            __props__.__dict__["tunnel_interface_tunnel_tcp_mss"] = tunnel_interface_tunnel_tcp_mss
            __props__.__dict__["tunnel_interface_tunnel_tcp_mss_variable"] = tunnel_interface_tunnel_tcp_mss_variable
            __props__.__dict__["tunnel_interface_vbond_as_stun_server"] = tunnel_interface_vbond_as_stun_server
            __props__.__dict__["tunnel_interface_vbond_as_stun_server_variable"] = tunnel_interface_vbond_as_stun_server_variable
            __props__.__dict__["tunnel_interface_vmanage_connection_preference"] = tunnel_interface_vmanage_connection_preference
            __props__.__dict__["tunnel_interface_vmanage_connection_preference_variable"] = tunnel_interface_vmanage_connection_preference_variable
            __props__.__dict__["tunnel_qos_mode"] = tunnel_qos_mode
            __props__.__dict__["tunnel_qos_mode_variable"] = tunnel_qos_mode_variable
            __props__.__dict__["udp_timeout"] = udp_timeout
            __props__.__dict__["udp_timeout_variable"] = udp_timeout_variable
            __props__.__dict__["template_type"] = None
            __props__.__dict__["version"] = None
        super(CiscoVpnInterfaceFeatureTemplate, __self__).__init__(
            'sdwan:index/ciscoVpnInterfaceFeatureTemplate:CiscoVpnInterfaceFeatureTemplate',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            access_lists: Optional[pulumi.Input[Sequence[pulumi.Input[Union['CiscoVpnInterfaceFeatureTemplateAccessListArgs', 'CiscoVpnInterfaceFeatureTemplateAccessListArgsDict']]]]] = None,
            address: Optional[pulumi.Input[_builtins.str]] = None,
            address_variable: Optional[pulumi.Input[_builtins.str]] = None,
            arp_timeout: Optional[pulumi.Input[_builtins.int]] = None,
            arp_timeout_variable: Optional[pulumi.Input[_builtins.str]] = None,
            auto_bandwidth_detect: Optional[pulumi.Input[_builtins.bool]] = None,
            auto_bandwidth_detect_variable: Optional[pulumi.Input[_builtins.str]] = None,
            autonegotiate: Optional[pulumi.Input[_builtins.bool]] = None,
            autonegotiate_variable: Optional[pulumi.Input[_builtins.str]] = None,
            bandwidth_downstream: Optional[pulumi.Input[_builtins.int]] = None,
            bandwidth_downstream_variable: Optional[pulumi.Input[_builtins.str]] = None,
            bandwidth_upstream: Optional[pulumi.Input[_builtins.int]] = None,
            bandwidth_upstream_variable: Optional[pulumi.Input[_builtins.str]] = None,
            block_non_source_ip: Optional[pulumi.Input[_builtins.bool]] = None,
            block_non_source_ip_variable: Optional[pulumi.Input[_builtins.str]] = None,
            core_region: Optional[pulumi.Input[_builtins.str]] = None,
            core_region_variable: Optional[pulumi.Input[_builtins.str]] = None,
            description: Optional[pulumi.Input[_builtins.str]] = None,
            device_types: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
            dhcp: Optional[pulumi.Input[_builtins.bool]] = None,
            dhcp_distance: Optional[pulumi.Input[_builtins.int]] = None,
            dhcp_distance_variable: Optional[pulumi.Input[_builtins.str]] = None,
            dhcp_variable: Optional[pulumi.Input[_builtins.str]] = None,
            dhcpv6: Optional[pulumi.Input[_builtins.bool]] = None,
            dhcpv6_variable: Optional[pulumi.Input[_builtins.str]] = None,
            duplex: Optional[pulumi.Input[_builtins.str]] = None,
            duplex_variable: Optional[pulumi.Input[_builtins.str]] = None,
            enable_core_region: Optional[pulumi.Input[_builtins.bool]] = None,
            enable_sgt: Optional[pulumi.Input[_builtins.bool]] = None,
            gre_tunnel_source_ip: Optional[pulumi.Input[_builtins.str]] = None,
            gre_tunnel_source_ip_variable: Optional[pulumi.Input[_builtins.str]] = None,
            gre_tunnel_xconnect: Optional[pulumi.Input[_builtins.str]] = None,
            gre_tunnel_xconnect_variable: Optional[pulumi.Input[_builtins.str]] = None,
            icmp_redirect_disable: Optional[pulumi.Input[_builtins.bool]] = None,
            icmp_redirect_disable_variable: Optional[pulumi.Input[_builtins.str]] = None,
            interface_description: Optional[pulumi.Input[_builtins.str]] = None,
            interface_description_variable: Optional[pulumi.Input[_builtins.str]] = None,
            interface_mtu: Optional[pulumi.Input[_builtins.int]] = None,
            interface_mtu_variable: Optional[pulumi.Input[_builtins.str]] = None,
            interface_name: Optional[pulumi.Input[_builtins.str]] = None,
            interface_name_variable: Optional[pulumi.Input[_builtins.str]] = None,
            ip_directed_broadcast: Optional[pulumi.Input[_builtins.bool]] = None,
            ip_directed_broadcast_variable: Optional[pulumi.Input[_builtins.str]] = None,
            ip_mtu: Optional[pulumi.Input[_builtins.int]] = None,
            ip_mtu_variable: Optional[pulumi.Input[_builtins.str]] = None,
            iperf_server: Optional[pulumi.Input[_builtins.str]] = None,
            iperf_server_variable: Optional[pulumi.Input[_builtins.str]] = None,
            ipv4_dhcp_helper_variable: Optional[pulumi.Input[_builtins.str]] = None,
            ipv4_dhcp_helpers: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
            ipv4_secondary_addresses: Optional[pulumi.Input[Sequence[pulumi.Input[Union['CiscoVpnInterfaceFeatureTemplateIpv4SecondaryAddressArgs', 'CiscoVpnInterfaceFeatureTemplateIpv4SecondaryAddressArgsDict']]]]] = None,
            ipv4_vrrps: Optional[pulumi.Input[Sequence[pulumi.Input[Union['CiscoVpnInterfaceFeatureTemplateIpv4VrrpArgs', 'CiscoVpnInterfaceFeatureTemplateIpv4VrrpArgsDict']]]]] = None,
            ipv6_access_lists: Optional[pulumi.Input[Sequence[pulumi.Input[Union['CiscoVpnInterfaceFeatureTemplateIpv6AccessListArgs', 'CiscoVpnInterfaceFeatureTemplateIpv6AccessListArgsDict']]]]] = None,
            ipv6_address: Optional[pulumi.Input[_builtins.str]] = None,
            ipv6_address_variable: Optional[pulumi.Input[_builtins.str]] = None,
            ipv6_dhcp_helpers: Optional[pulumi.Input[Sequence[pulumi.Input[Union['CiscoVpnInterfaceFeatureTemplateIpv6DhcpHelperArgs', 'CiscoVpnInterfaceFeatureTemplateIpv6DhcpHelperArgsDict']]]]] = None,
            ipv6_nat: Optional[pulumi.Input[_builtins.bool]] = None,
            ipv6_nat_variable: Optional[pulumi.Input[_builtins.str]] = None,
            ipv6_secondary_addresses: Optional[pulumi.Input[Sequence[pulumi.Input[Union['CiscoVpnInterfaceFeatureTemplateIpv6SecondaryAddressArgs', 'CiscoVpnInterfaceFeatureTemplateIpv6SecondaryAddressArgsDict']]]]] = None,
            ipv6_vrrps: Optional[pulumi.Input[Sequence[pulumi.Input[Union['CiscoVpnInterfaceFeatureTemplateIpv6VrrpArgs', 'CiscoVpnInterfaceFeatureTemplateIpv6VrrpArgsDict']]]]] = None,
            load_interval: Optional[pulumi.Input[_builtins.int]] = None,
            load_interval_variable: Optional[pulumi.Input[_builtins.str]] = None,
            mac_address: Optional[pulumi.Input[_builtins.str]] = None,
            mac_address_variable: Optional[pulumi.Input[_builtins.str]] = None,
            media_type: Optional[pulumi.Input[_builtins.str]] = None,
            media_type_variable: Optional[pulumi.Input[_builtins.str]] = None,
            name: Optional[pulumi.Input[_builtins.str]] = None,
            nat: Optional[pulumi.Input[_builtins.bool]] = None,
            nat64_interface: Optional[pulumi.Input[_builtins.bool]] = None,
            nat66_interface: Optional[pulumi.Input[_builtins.bool]] = None,
            nat_inside_source_loopback_interface: Optional[pulumi.Input[_builtins.str]] = None,
            nat_inside_source_loopback_interface_variable: Optional[pulumi.Input[_builtins.str]] = None,
            nat_overload: Optional[pulumi.Input[_builtins.bool]] = None,
            nat_overload_variable: Optional[pulumi.Input[_builtins.str]] = None,
            nat_pool_prefix_length: Optional[pulumi.Input[_builtins.int]] = None,
            nat_pool_prefix_length_variable: Optional[pulumi.Input[_builtins.str]] = None,
            nat_pool_range_end: Optional[pulumi.Input[_builtins.str]] = None,
            nat_pool_range_end_variable: Optional[pulumi.Input[_builtins.str]] = None,
            nat_pool_range_start: Optional[pulumi.Input[_builtins.str]] = None,
            nat_pool_range_start_variable: Optional[pulumi.Input[_builtins.str]] = None,
            nat_type: Optional[pulumi.Input[_builtins.str]] = None,
            nat_type_variable: Optional[pulumi.Input[_builtins.str]] = None,
            poe: Optional[pulumi.Input[_builtins.bool]] = None,
            poe_variable: Optional[pulumi.Input[_builtins.str]] = None,
            propagate_sgt: Optional[pulumi.Input[_builtins.bool]] = None,
            qos_adaptive_bandwidth_downstream: Optional[pulumi.Input[_builtins.int]] = None,
            qos_adaptive_bandwidth_downstream_variable: Optional[pulumi.Input[_builtins.str]] = None,
            qos_adaptive_bandwidth_upstream: Optional[pulumi.Input[_builtins.int]] = None,
            qos_adaptive_bandwidth_upstream_variable: Optional[pulumi.Input[_builtins.str]] = None,
            qos_adaptive_max_downstream: Optional[pulumi.Input[_builtins.int]] = None,
            qos_adaptive_max_downstream_variable: Optional[pulumi.Input[_builtins.str]] = None,
            qos_adaptive_max_upstream: Optional[pulumi.Input[_builtins.int]] = None,
            qos_adaptive_max_upstream_variable: Optional[pulumi.Input[_builtins.str]] = None,
            qos_adaptive_min_downstream: Optional[pulumi.Input[_builtins.int]] = None,
            qos_adaptive_min_downstream_variable: Optional[pulumi.Input[_builtins.str]] = None,
            qos_adaptive_min_upstream: Optional[pulumi.Input[_builtins.int]] = None,
            qos_adaptive_min_upstream_variable: Optional[pulumi.Input[_builtins.str]] = None,
            qos_adaptive_period: Optional[pulumi.Input[_builtins.int]] = None,
            qos_adaptive_period_variable: Optional[pulumi.Input[_builtins.str]] = None,
            qos_map: Optional[pulumi.Input[_builtins.str]] = None,
            qos_map_variable: Optional[pulumi.Input[_builtins.str]] = None,
            qos_map_vpn: Optional[pulumi.Input[_builtins.str]] = None,
            qos_map_vpn_variable: Optional[pulumi.Input[_builtins.str]] = None,
            rewrite_rule_name: Optional[pulumi.Input[_builtins.str]] = None,
            rewrite_rule_name_variable: Optional[pulumi.Input[_builtins.str]] = None,
            secondary_region: Optional[pulumi.Input[_builtins.str]] = None,
            secondary_region_variable: Optional[pulumi.Input[_builtins.str]] = None,
            sgt_enforcement: Optional[pulumi.Input[_builtins.bool]] = None,
            sgt_enforcement_sgt: Optional[pulumi.Input[_builtins.int]] = None,
            sgt_enforcement_sgt_variable: Optional[pulumi.Input[_builtins.str]] = None,
            shaping_rate: Optional[pulumi.Input[_builtins.int]] = None,
            shaping_rate_variable: Optional[pulumi.Input[_builtins.str]] = None,
            shutdown: Optional[pulumi.Input[_builtins.bool]] = None,
            shutdown_variable: Optional[pulumi.Input[_builtins.str]] = None,
            speed: Optional[pulumi.Input[_builtins.str]] = None,
            speed_variable: Optional[pulumi.Input[_builtins.str]] = None,
            static_arps: Optional[pulumi.Input[Sequence[pulumi.Input[Union['CiscoVpnInterfaceFeatureTemplateStaticArpArgs', 'CiscoVpnInterfaceFeatureTemplateStaticArpArgsDict']]]]] = None,
            static_nat66_entries: Optional[pulumi.Input[Sequence[pulumi.Input[Union['CiscoVpnInterfaceFeatureTemplateStaticNat66EntryArgs', 'CiscoVpnInterfaceFeatureTemplateStaticNat66EntryArgsDict']]]]] = None,
            static_nat_entries: Optional[pulumi.Input[Sequence[pulumi.Input[Union['CiscoVpnInterfaceFeatureTemplateStaticNatEntryArgs', 'CiscoVpnInterfaceFeatureTemplateStaticNatEntryArgsDict']]]]] = None,
            static_port_forward_entries: Optional[pulumi.Input[Sequence[pulumi.Input[Union['CiscoVpnInterfaceFeatureTemplateStaticPortForwardEntryArgs', 'CiscoVpnInterfaceFeatureTemplateStaticPortForwardEntryArgsDict']]]]] = None,
            static_sgt: Optional[pulumi.Input[_builtins.int]] = None,
            static_sgt_trusted: Optional[pulumi.Input[_builtins.bool]] = None,
            static_sgt_variable: Optional[pulumi.Input[_builtins.str]] = None,
            tcp_mss_adjust: Optional[pulumi.Input[_builtins.int]] = None,
            tcp_mss_adjust_variable: Optional[pulumi.Input[_builtins.str]] = None,
            tcp_timeout: Optional[pulumi.Input[_builtins.int]] = None,
            tcp_timeout_variable: Optional[pulumi.Input[_builtins.str]] = None,
            template_type: Optional[pulumi.Input[_builtins.str]] = None,
            tloc_extension: Optional[pulumi.Input[_builtins.str]] = None,
            tloc_extension_variable: Optional[pulumi.Input[_builtins.str]] = None,
            tracker_variable: Optional[pulumi.Input[_builtins.str]] = None,
            trackers: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
            tunnel_bandwidth: Optional[pulumi.Input[_builtins.int]] = None,
            tunnel_bandwidth_variable: Optional[pulumi.Input[_builtins.str]] = None,
            tunnel_interface_allow_all: Optional[pulumi.Input[_builtins.bool]] = None,
            tunnel_interface_allow_all_variable: Optional[pulumi.Input[_builtins.str]] = None,
            tunnel_interface_allow_bgp: Optional[pulumi.Input[_builtins.bool]] = None,
            tunnel_interface_allow_bgp_variable: Optional[pulumi.Input[_builtins.str]] = None,
            tunnel_interface_allow_dhcp: Optional[pulumi.Input[_builtins.bool]] = None,
            tunnel_interface_allow_dhcp_variable: Optional[pulumi.Input[_builtins.str]] = None,
            tunnel_interface_allow_dns: Optional[pulumi.Input[_builtins.bool]] = None,
            tunnel_interface_allow_dns_variable: Optional[pulumi.Input[_builtins.str]] = None,
            tunnel_interface_allow_https: Optional[pulumi.Input[_builtins.bool]] = None,
            tunnel_interface_allow_https_variable: Optional[pulumi.Input[_builtins.str]] = None,
            tunnel_interface_allow_icmp: Optional[pulumi.Input[_builtins.bool]] = None,
            tunnel_interface_allow_icmp_variable: Optional[pulumi.Input[_builtins.str]] = None,
            tunnel_interface_allow_netconf: Optional[pulumi.Input[_builtins.bool]] = None,
            tunnel_interface_allow_netconf_variable: Optional[pulumi.Input[_builtins.str]] = None,
            tunnel_interface_allow_ntp: Optional[pulumi.Input[_builtins.bool]] = None,
            tunnel_interface_allow_ntp_variable: Optional[pulumi.Input[_builtins.str]] = None,
            tunnel_interface_allow_ospf: Optional[pulumi.Input[_builtins.bool]] = None,
            tunnel_interface_allow_ospf_variable: Optional[pulumi.Input[_builtins.str]] = None,
            tunnel_interface_allow_snmp: Optional[pulumi.Input[_builtins.bool]] = None,
            tunnel_interface_allow_snmp_variable: Optional[pulumi.Input[_builtins.str]] = None,
            tunnel_interface_allow_ssh: Optional[pulumi.Input[_builtins.bool]] = None,
            tunnel_interface_allow_ssh_variable: Optional[pulumi.Input[_builtins.str]] = None,
            tunnel_interface_allow_stun: Optional[pulumi.Input[_builtins.bool]] = None,
            tunnel_interface_allow_stun_variable: Optional[pulumi.Input[_builtins.str]] = None,
            tunnel_interface_bind_loopback_tunnel: Optional[pulumi.Input[_builtins.str]] = None,
            tunnel_interface_bind_loopback_tunnel_variable: Optional[pulumi.Input[_builtins.str]] = None,
            tunnel_interface_border: Optional[pulumi.Input[_builtins.bool]] = None,
            tunnel_interface_border_variable: Optional[pulumi.Input[_builtins.str]] = None,
            tunnel_interface_carrier: Optional[pulumi.Input[_builtins.str]] = None,
            tunnel_interface_carrier_variable: Optional[pulumi.Input[_builtins.str]] = None,
            tunnel_interface_clear_dont_fragment: Optional[pulumi.Input[_builtins.bool]] = None,
            tunnel_interface_clear_dont_fragment_variable: Optional[pulumi.Input[_builtins.str]] = None,
            tunnel_interface_color: Optional[pulumi.Input[_builtins.str]] = None,
            tunnel_interface_color_restrict: Optional[pulumi.Input[_builtins.bool]] = None,
            tunnel_interface_color_restrict_variable: Optional[pulumi.Input[_builtins.str]] = None,
            tunnel_interface_color_variable: Optional[pulumi.Input[_builtins.str]] = None,
            tunnel_interface_control_connections: Optional[pulumi.Input[_builtins.bool]] = None,
            tunnel_interface_control_connections_variable: Optional[pulumi.Input[_builtins.str]] = None,
            tunnel_interface_encapsulations: Optional[pulumi.Input[Sequence[pulumi.Input[Union['CiscoVpnInterfaceFeatureTemplateTunnelInterfaceEncapsulationArgs', 'CiscoVpnInterfaceFeatureTemplateTunnelInterfaceEncapsulationArgsDict']]]]] = None,
            tunnel_interface_exclude_controller_group_list_variable: Optional[pulumi.Input[_builtins.str]] = None,
            tunnel_interface_exclude_controller_group_lists: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.int]]]] = None,
            tunnel_interface_gre_tunnel_destination_ip: Optional[pulumi.Input[_builtins.str]] = None,
            tunnel_interface_gre_tunnel_destination_ip_variable: Optional[pulumi.Input[_builtins.str]] = None,
            tunnel_interface_groups: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.int]]]] = None,
            tunnel_interface_groups_variable: Optional[pulumi.Input[_builtins.str]] = None,
            tunnel_interface_hello_interval: Optional[pulumi.Input[_builtins.int]] = None,
            tunnel_interface_hello_interval_variable: Optional[pulumi.Input[_builtins.str]] = None,
            tunnel_interface_hello_tolerance: Optional[pulumi.Input[_builtins.int]] = None,
            tunnel_interface_hello_tolerance_variable: Optional[pulumi.Input[_builtins.str]] = None,
            tunnel_interface_last_resort_circuit: Optional[pulumi.Input[_builtins.bool]] = None,
            tunnel_interface_last_resort_circuit_variable: Optional[pulumi.Input[_builtins.str]] = None,
            tunnel_interface_low_bandwidth_link: Optional[pulumi.Input[_builtins.bool]] = None,
            tunnel_interface_low_bandwidth_link_variable: Optional[pulumi.Input[_builtins.str]] = None,
            tunnel_interface_max_control_connections: Optional[pulumi.Input[_builtins.int]] = None,
            tunnel_interface_max_control_connections_variable: Optional[pulumi.Input[_builtins.str]] = None,
            tunnel_interface_nat_refresh_interval: Optional[pulumi.Input[_builtins.int]] = None,
            tunnel_interface_nat_refresh_interval_variable: Optional[pulumi.Input[_builtins.str]] = None,
            tunnel_interface_network_broadcast: Optional[pulumi.Input[_builtins.bool]] = None,
            tunnel_interface_network_broadcast_variable: Optional[pulumi.Input[_builtins.str]] = None,
            tunnel_interface_port_hop: Optional[pulumi.Input[_builtins.bool]] = None,
            tunnel_interface_port_hop_variable: Optional[pulumi.Input[_builtins.str]] = None,
            tunnel_interface_propagate_sgt: Optional[pulumi.Input[_builtins.bool]] = None,
            tunnel_interface_propagate_sgt_variable: Optional[pulumi.Input[_builtins.str]] = None,
            tunnel_interface_tunnel_tcp_mss: Optional[pulumi.Input[_builtins.int]] = None,
            tunnel_interface_tunnel_tcp_mss_variable: Optional[pulumi.Input[_builtins.str]] = None,
            tunnel_interface_vbond_as_stun_server: Optional[pulumi.Input[_builtins.bool]] = None,
            tunnel_interface_vbond_as_stun_server_variable: Optional[pulumi.Input[_builtins.str]] = None,
            tunnel_interface_vmanage_connection_preference: Optional[pulumi.Input[_builtins.int]] = None,
            tunnel_interface_vmanage_connection_preference_variable: Optional[pulumi.Input[_builtins.str]] = None,
            tunnel_qos_mode: Optional[pulumi.Input[_builtins.str]] = None,
            tunnel_qos_mode_variable: Optional[pulumi.Input[_builtins.str]] = None,
            udp_timeout: Optional[pulumi.Input[_builtins.int]] = None,
            udp_timeout_variable: Optional[pulumi.Input[_builtins.str]] = None,
            version: Optional[pulumi.Input[_builtins.int]] = None) -> 'CiscoVpnInterfaceFeatureTemplate':
        """
        Get an existing CiscoVpnInterfaceFeatureTemplate resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[Sequence[pulumi.Input[Union['CiscoVpnInterfaceFeatureTemplateAccessListArgs', 'CiscoVpnInterfaceFeatureTemplateAccessListArgsDict']]]] access_lists: Apply ACL
        :param pulumi.Input[_builtins.str] address: Assign IPv4 address
        :param pulumi.Input[_builtins.str] address_variable: Variable name
        :param pulumi.Input[_builtins.int] arp_timeout: Timeout value for dynamically learned ARP entries, <0..2678400> seconds
                 - Range: `0`-`2147483`
                 - Default value: `1200`
        :param pulumi.Input[_builtins.str] arp_timeout_variable: Variable name
        :param pulumi.Input[_builtins.bool] auto_bandwidth_detect: Interface auto detect bandwidth
                 - Default value: `false`
        :param pulumi.Input[_builtins.str] auto_bandwidth_detect_variable: Variable name
        :param pulumi.Input[_builtins.bool] autonegotiate: Link autonegotiation
        :param pulumi.Input[_builtins.str] autonegotiate_variable: Variable name
        :param pulumi.Input[_builtins.int] bandwidth_downstream: Interface downstream bandwidth capacity, in kbps
                 - Range: `1`-`2147483647`
        :param pulumi.Input[_builtins.str] bandwidth_downstream_variable: Variable name
        :param pulumi.Input[_builtins.int] bandwidth_upstream: Interface upstream bandwidth capacity, in kbps
                 - Range: `1`-`2147483647`
        :param pulumi.Input[_builtins.str] bandwidth_upstream_variable: Variable name
        :param pulumi.Input[_builtins.bool] block_non_source_ip: Block packets originating from IP address that is not from this source
                 - Default value: `false`
        :param pulumi.Input[_builtins.str] block_non_source_ip_variable: Variable name
        :param pulumi.Input[_builtins.str] core_region: Enable core region
                 - Choices: `core`, `core-shared`
                 - Default value: `core`
        :param pulumi.Input[_builtins.str] core_region_variable: Variable name
        :param pulumi.Input[_builtins.str] description: The description of the feature template
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] device_types: List of supported device types
                 - Choices: `vedge-C8000V`, `vedge-C8300-1N1S-4T2X`, `vedge-C8300-1N1S-6T`, `vedge-C8300-2N2S-6T`, `vedge-C8300-2N2S-4T2X`, `vedge-C8500-12X4QC`, `vedge-C8500-12X`, `vedge-C8500-20X6C`, `vedge-C8500L-8S4X`, `vedge-C8200-1N-4T`, `vedge-C8200L-1N-4T`
        :param pulumi.Input[_builtins.bool] dhcp: Enable DHCP
                 - Default value: `false`
        :param pulumi.Input[_builtins.int] dhcp_distance: Set administrative distance for DHCP default route
                 - Range: `1`-`65536`
                 - Default value: `1`
        :param pulumi.Input[_builtins.str] dhcp_distance_variable: Variable name
        :param pulumi.Input[_builtins.str] dhcp_variable: Variable name
        :param pulumi.Input[_builtins.bool] dhcpv6: Enable DHCPv6
                 - Default value: `false`
        :param pulumi.Input[_builtins.str] dhcpv6_variable: Variable name
        :param pulumi.Input[_builtins.str] duplex: Duplex mode
                 - Choices: `full`, `half`, `auto`
        :param pulumi.Input[_builtins.str] duplex_variable: Variable name
        :param pulumi.Input[_builtins.bool] enable_core_region: Enable core region
                 - Default value: `false`
        :param pulumi.Input[_builtins.bool] enable_sgt: Enables the interface for CTS SGT authorization and forwarding.
                 - Default value: `false`
        :param pulumi.Input[_builtins.str] gre_tunnel_source_ip: Extend remote TLOC over a GRE tunnel to a local WAN interface
        :param pulumi.Input[_builtins.str] gre_tunnel_source_ip_variable: Variable name
        :param pulumi.Input[_builtins.str] gre_tunnel_xconnect: Extend remote TLOC over a GRE tunnel to a local WAN interface
        :param pulumi.Input[_builtins.str] gre_tunnel_xconnect_variable: Variable name
        :param pulumi.Input[_builtins.bool] icmp_redirect_disable: Set this option to disable the icmp/icmpv6 redirect packets
                 - Default value: `true`
        :param pulumi.Input[_builtins.str] icmp_redirect_disable_variable: Variable name
        :param pulumi.Input[_builtins.str] interface_description: Interface description
        :param pulumi.Input[_builtins.str] interface_description_variable: Variable name
        :param pulumi.Input[_builtins.int] interface_mtu: Interface MTU GigabitEthernet0 <1500..1518>, Other GigabitEthernet <1500..9216> in bytes
                 - Range: `1500`-`9216`
                 - Default value: `1500`
        :param pulumi.Input[_builtins.str] interface_mtu_variable: Variable name
        :param pulumi.Input[_builtins.str] interface_name: Interface name: ge0/<0-..> or ge0/<0-..>.vlanid or irb<bridgeid:1-63> or loopback<string> or natpool-<1..31> when present
        :param pulumi.Input[_builtins.str] interface_name_variable: Variable name
        :param pulumi.Input[_builtins.bool] ip_directed_broadcast: IP Directed-Broadcast
                 - Default value: `false`
        :param pulumi.Input[_builtins.str] ip_directed_broadcast_variable: Variable name
        :param pulumi.Input[_builtins.int] ip_mtu: IP MTU for GigabitEthernet main <576..Interface MTU>, GigabitEthernet subinterface <576..9216>, Other Interfaces <576..2000> in bytes
                 - Range: `576`-`9216`
                 - Default value: `1500`
        :param pulumi.Input[_builtins.str] ip_mtu_variable: Variable name
        :param pulumi.Input[_builtins.str] iperf_server: Iperf server for auto bandwidth detect
        :param pulumi.Input[_builtins.str] iperf_server_variable: Variable name
        :param pulumi.Input[_builtins.str] ipv4_dhcp_helper_variable: Variable name
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] ipv4_dhcp_helpers: List of DHCP IPv4 helper addresses
        :param pulumi.Input[Sequence[pulumi.Input[Union['CiscoVpnInterfaceFeatureTemplateIpv4SecondaryAddressArgs', 'CiscoVpnInterfaceFeatureTemplateIpv4SecondaryAddressArgsDict']]]] ipv4_secondary_addresses: Assign secondary IP addresses
        :param pulumi.Input[Sequence[pulumi.Input[Union['CiscoVpnInterfaceFeatureTemplateIpv4VrrpArgs', 'CiscoVpnInterfaceFeatureTemplateIpv4VrrpArgsDict']]]] ipv4_vrrps: Enable VRRP
        :param pulumi.Input[Sequence[pulumi.Input[Union['CiscoVpnInterfaceFeatureTemplateIpv6AccessListArgs', 'CiscoVpnInterfaceFeatureTemplateIpv6AccessListArgsDict']]]] ipv6_access_lists: Apply IPv6 access list
        :param pulumi.Input[_builtins.str] ipv6_address: Assign IPv6 address
        :param pulumi.Input[_builtins.str] ipv6_address_variable: Variable name
        :param pulumi.Input[Sequence[pulumi.Input[Union['CiscoVpnInterfaceFeatureTemplateIpv6DhcpHelperArgs', 'CiscoVpnInterfaceFeatureTemplateIpv6DhcpHelperArgsDict']]]] ipv6_dhcp_helpers: DHCPv6 Helper
        :param pulumi.Input[_builtins.bool] ipv6_nat: NAT64 on this interface
                 - Default value: `false`
        :param pulumi.Input[_builtins.str] ipv6_nat_variable: Variable name
        :param pulumi.Input[Sequence[pulumi.Input[Union['CiscoVpnInterfaceFeatureTemplateIpv6SecondaryAddressArgs', 'CiscoVpnInterfaceFeatureTemplateIpv6SecondaryAddressArgsDict']]]] ipv6_secondary_addresses: Assign secondary IPv6 addresses
        :param pulumi.Input[Sequence[pulumi.Input[Union['CiscoVpnInterfaceFeatureTemplateIpv6VrrpArgs', 'CiscoVpnInterfaceFeatureTemplateIpv6VrrpArgsDict']]]] ipv6_vrrps: Enable VRRP
        :param pulumi.Input[_builtins.int] load_interval: Interval for interface load calculation
                 - Range: `30`-`600`
                 - Default value: `30`
        :param pulumi.Input[_builtins.str] load_interval_variable: Variable name
        :param pulumi.Input[_builtins.str] mac_address: Set MAC-layer address
        :param pulumi.Input[_builtins.str] mac_address_variable: Variable name
        :param pulumi.Input[_builtins.str] media_type: Media type
                 - Choices: `auto-select`, `rj45`, `sfp`
        :param pulumi.Input[_builtins.str] media_type_variable: Variable name
        :param pulumi.Input[_builtins.str] name: The name of the feature template
        :param pulumi.Input[_builtins.bool] nat: Network Address Translation on this interface
                 - Default value: `false`
        :param pulumi.Input[_builtins.bool] nat64_interface: NAT64 on this interface
                 - Default value: `false`
        :param pulumi.Input[_builtins.bool] nat66_interface: NAT66 on this interface
                 - Default value: `false`
        :param pulumi.Input[_builtins.str] nat_inside_source_loopback_interface: Configure NAT Inside Loopback Interface
        :param pulumi.Input[_builtins.str] nat_inside_source_loopback_interface_variable: Variable name
        :param pulumi.Input[_builtins.bool] nat_overload: Enable port translation(PAT)
                 - Default value: `true`
        :param pulumi.Input[_builtins.str] nat_overload_variable: Variable name
        :param pulumi.Input[_builtins.int] nat_pool_prefix_length: Ending IP address of NAT Pool Prefix Length
        :param pulumi.Input[_builtins.str] nat_pool_prefix_length_variable: Variable name
        :param pulumi.Input[_builtins.str] nat_pool_range_end: Ending IP address of NAT pool range
        :param pulumi.Input[_builtins.str] nat_pool_range_end_variable: Variable name
        :param pulumi.Input[_builtins.str] nat_pool_range_start: Starting IP address of NAT pool range
        :param pulumi.Input[_builtins.str] nat_pool_range_start_variable: Variable name
        :param pulumi.Input[_builtins.str] nat_type: NAT type
                 - Choices: `interface`, `pool`, `loopback`
                 - Default value: `interface`
        :param pulumi.Input[_builtins.str] nat_type_variable: Variable name
        :param pulumi.Input[_builtins.bool] poe: Configure interface as Power-over-Ethernet source
                 - Default value: `false`
        :param pulumi.Input[_builtins.str] poe_variable: Variable name
        :param pulumi.Input[_builtins.bool] propagate_sgt: Enable/Disable CTS SGT propagation on an interface.
                 - Default value: `true`
        :param pulumi.Input[_builtins.int] qos_adaptive_bandwidth_downstream: Adaptive QoS default downstream bandwidth
                 - Range: `8`-`100000000`
        :param pulumi.Input[_builtins.str] qos_adaptive_bandwidth_downstream_variable: Variable name
        :param pulumi.Input[_builtins.int] qos_adaptive_bandwidth_upstream: Adaptive QoS default upstream bandwidth
                 - Range: `8`-`100000000`
        :param pulumi.Input[_builtins.str] qos_adaptive_bandwidth_upstream_variable: Variable name
        :param pulumi.Input[_builtins.int] qos_adaptive_max_downstream: Downstream max bandwidth limit
                 - Range: `8`-`100000000`
        :param pulumi.Input[_builtins.str] qos_adaptive_max_downstream_variable: Variable name
        :param pulumi.Input[_builtins.int] qos_adaptive_max_upstream: Upstream max bandwidth limit
                 - Range: `8`-`100000000`
        :param pulumi.Input[_builtins.str] qos_adaptive_max_upstream_variable: Variable name
        :param pulumi.Input[_builtins.int] qos_adaptive_min_downstream: Downstream min bandwidth limit
                 - Range: `8`-`100000000`
        :param pulumi.Input[_builtins.str] qos_adaptive_min_downstream_variable: Variable name
        :param pulumi.Input[_builtins.int] qos_adaptive_min_upstream: Upstream min bandwidth limit
                 - Range: `8`-`100000000`
        :param pulumi.Input[_builtins.str] qos_adaptive_min_upstream_variable: Variable name
        :param pulumi.Input[_builtins.int] qos_adaptive_period: Periodic timer for adaptive QoS in minutes
                 - Range: `1`-`720`
                 - Default value: `15`
        :param pulumi.Input[_builtins.str] qos_adaptive_period_variable: Variable name
        :param pulumi.Input[_builtins.str] qos_map: Name of QoS map
        :param pulumi.Input[_builtins.str] qos_map_variable: Variable name
        :param pulumi.Input[_builtins.str] qos_map_vpn: Name of VPN QoS map
        :param pulumi.Input[_builtins.str] qos_map_vpn_variable: Variable name
        :param pulumi.Input[_builtins.str] rewrite_rule_name: Name of rewrite rule
        :param pulumi.Input[_builtins.str] rewrite_rule_name_variable: Variable name
        :param pulumi.Input[_builtins.str] secondary_region: Enable secondary region
                 - Choices: `off`, `secondary-only`, `secondary-shared`
                 - Default value: `off`
        :param pulumi.Input[_builtins.str] secondary_region_variable: Variable name
        :param pulumi.Input[_builtins.bool] sgt_enforcement: Enables the interface for CTS SGT authorization and forwarding.
                 - Default value: `false`
        :param pulumi.Input[_builtins.int] sgt_enforcement_sgt: SGT value between 2 and 65519.
                 - Range: `2`-`65519`
        :param pulumi.Input[_builtins.str] sgt_enforcement_sgt_variable: Variable name
        :param pulumi.Input[_builtins.int] shaping_rate: 1ge  interfaces: [0..1000000]kbps; 10ge interfaces: [0..10000000]kbps
                 - Range: `8`-`100000000`
        :param pulumi.Input[_builtins.str] shaping_rate_variable: Variable name
        :param pulumi.Input[_builtins.bool] shutdown: Administrative state
                 - Default value: `true`
        :param pulumi.Input[_builtins.str] shutdown_variable: Variable name
        :param pulumi.Input[_builtins.str] speed: Set interface speed
                 - Choices: `10`, `100`, `1000`, `2500`, `10000`
        :param pulumi.Input[_builtins.str] speed_variable: Variable name
        :param pulumi.Input[Sequence[pulumi.Input[Union['CiscoVpnInterfaceFeatureTemplateStaticArpArgs', 'CiscoVpnInterfaceFeatureTemplateStaticArpArgsDict']]]] static_arps: Configure static ARP entries
        :param pulumi.Input[Sequence[pulumi.Input[Union['CiscoVpnInterfaceFeatureTemplateStaticNat66EntryArgs', 'CiscoVpnInterfaceFeatureTemplateStaticNat66EntryArgsDict']]]] static_nat66_entries: static NAT
        :param pulumi.Input[Sequence[pulumi.Input[Union['CiscoVpnInterfaceFeatureTemplateStaticNatEntryArgs', 'CiscoVpnInterfaceFeatureTemplateStaticNatEntryArgsDict']]]] static_nat_entries: Configure static NAT entries
        :param pulumi.Input[Sequence[pulumi.Input[Union['CiscoVpnInterfaceFeatureTemplateStaticPortForwardEntryArgs', 'CiscoVpnInterfaceFeatureTemplateStaticPortForwardEntryArgsDict']]]] static_port_forward_entries: Configure Port Forward entries
        :param pulumi.Input[_builtins.int] static_sgt: SGT value between 2 and 65519.
                 - Range: `2`-`65519`
        :param pulumi.Input[_builtins.bool] static_sgt_trusted: Indicates that the interface is trustworthy for CTS.
                 - Default value: `false`
        :param pulumi.Input[_builtins.str] static_sgt_variable: Variable name
        :param pulumi.Input[_builtins.int] tcp_mss_adjust: TCP MSS on SYN packets, in bytes
                 - Range: `500`-`1460`
        :param pulumi.Input[_builtins.str] tcp_mss_adjust_variable: Variable name
        :param pulumi.Input[_builtins.int] tcp_timeout: Set NAT TCP session timeout, in minutes
                 - Range: `1`-`8947`
                 - Default value: `60`
        :param pulumi.Input[_builtins.str] tcp_timeout_variable: Variable name
        :param pulumi.Input[_builtins.str] template_type: The template type
        :param pulumi.Input[_builtins.str] tloc_extension: Extends a local TLOC to a remote node only for vpn 0
        :param pulumi.Input[_builtins.str] tloc_extension_variable: Variable name
        :param pulumi.Input[_builtins.str] tracker_variable: Variable name
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] trackers: Enable tracker for this interface
        :param pulumi.Input[_builtins.int] tunnel_bandwidth: Tunnels Bandwidth Percent
                 - Range: `1`-`99`
                 - Default value: `50`
        :param pulumi.Input[_builtins.str] tunnel_bandwidth_variable: Variable name
        :param pulumi.Input[_builtins.bool] tunnel_interface_allow_all: Allow all traffic. Overrides all other allow-service options if allow-service all is set
                 - Default value: `false`
        :param pulumi.Input[_builtins.str] tunnel_interface_allow_all_variable: Variable name
        :param pulumi.Input[_builtins.bool] tunnel_interface_allow_bgp: Allow/deny BGP
                 - Default value: `false`
        :param pulumi.Input[_builtins.str] tunnel_interface_allow_bgp_variable: Variable name
        :param pulumi.Input[_builtins.bool] tunnel_interface_allow_dhcp: Allow/Deny DHCP
                 - Default value: `true`
        :param pulumi.Input[_builtins.str] tunnel_interface_allow_dhcp_variable: Variable name
        :param pulumi.Input[_builtins.bool] tunnel_interface_allow_dns: Allow/Deny DNS
                 - Default value: `true`
        :param pulumi.Input[_builtins.str] tunnel_interface_allow_dns_variable: Variable name
        :param pulumi.Input[_builtins.bool] tunnel_interface_allow_https: Allow/Deny Https
                 - Default value: `true`
        :param pulumi.Input[_builtins.str] tunnel_interface_allow_https_variable: Variable name
        :param pulumi.Input[_builtins.bool] tunnel_interface_allow_icmp: Allow/Deny ICMP
                 - Default value: `true`
        :param pulumi.Input[_builtins.str] tunnel_interface_allow_icmp_variable: Variable name
        :param pulumi.Input[_builtins.bool] tunnel_interface_allow_netconf: Allow/Deny NETCONF
                 - Default value: `false`
        :param pulumi.Input[_builtins.str] tunnel_interface_allow_netconf_variable: Variable name
        :param pulumi.Input[_builtins.bool] tunnel_interface_allow_ntp: Allow/Deny NTP
                 - Default value: `false`
        :param pulumi.Input[_builtins.str] tunnel_interface_allow_ntp_variable: Variable name
        :param pulumi.Input[_builtins.bool] tunnel_interface_allow_ospf: Allow/Deny OSPF
                 - Default value: `false`
        :param pulumi.Input[_builtins.str] tunnel_interface_allow_ospf_variable: Variable name
        :param pulumi.Input[_builtins.bool] tunnel_interface_allow_snmp: Allow/Deny SNMP
                 - Default value: `false`
        :param pulumi.Input[_builtins.str] tunnel_interface_allow_snmp_variable: Variable name
        :param pulumi.Input[_builtins.bool] tunnel_interface_allow_ssh: Allow/Deny SSH
                 - Default value: `false`
        :param pulumi.Input[_builtins.str] tunnel_interface_allow_ssh_variable: Variable name
        :param pulumi.Input[_builtins.bool] tunnel_interface_allow_stun: Allow/Deny STUN
                 - Default value: `false`
        :param pulumi.Input[_builtins.str] tunnel_interface_allow_stun_variable: Variable name
        :param pulumi.Input[_builtins.str] tunnel_interface_bind_loopback_tunnel: Bind loopback tunnel interface to a physical interface
        :param pulumi.Input[_builtins.str] tunnel_interface_bind_loopback_tunnel_variable: Variable name
        :param pulumi.Input[_builtins.bool] tunnel_interface_border: Set TLOC as border TLOC
                 - Default value: `false`
        :param pulumi.Input[_builtins.str] tunnel_interface_border_variable: Variable name
        :param pulumi.Input[_builtins.str] tunnel_interface_carrier: Set carrier for TLOC
                 - Choices: `default`, `carrier1`, `carrier2`, `carrier3`, `carrier4`, `carrier5`, `carrier6`, `carrier7`, `carrier8`
                 - Default value: `default`
        :param pulumi.Input[_builtins.str] tunnel_interface_carrier_variable: Variable name
        :param pulumi.Input[_builtins.bool] tunnel_interface_clear_dont_fragment: Enable clear dont fragment (Currently Only SDWAN Tunnel Interface)
                 - Default value: `false`
        :param pulumi.Input[_builtins.str] tunnel_interface_clear_dont_fragment_variable: Variable name
        :param pulumi.Input[_builtins.str] tunnel_interface_color: Set color for TLOC
                 - Choices: `default`, `mpls`, `metro-ethernet`, `biz-internet`, `public-internet`, `lte`, `3g`, `red`, `green`, `blue`, `gold`, `silver`, `bronze`, `custom1`, `custom2`, `custom3`, `private1`, `private2`, `private3`, `private4`, `private5`, `private6`
                 - Default value: `default`
        :param pulumi.Input[_builtins.bool] tunnel_interface_color_restrict: Restrict this TLOC behavior
                 - Default value: `false`
        :param pulumi.Input[_builtins.str] tunnel_interface_color_restrict_variable: Variable name
        :param pulumi.Input[_builtins.str] tunnel_interface_color_variable: Variable name
        :param pulumi.Input[_builtins.bool] tunnel_interface_control_connections: Allow Control Connection
                 - Default value: `true`
        :param pulumi.Input[_builtins.str] tunnel_interface_control_connections_variable: Variable name
        :param pulumi.Input[Sequence[pulumi.Input[Union['CiscoVpnInterfaceFeatureTemplateTunnelInterfaceEncapsulationArgs', 'CiscoVpnInterfaceFeatureTemplateTunnelInterfaceEncapsulationArgsDict']]]] tunnel_interface_encapsulations: Encapsulation for TLOC
        :param pulumi.Input[_builtins.str] tunnel_interface_exclude_controller_group_list_variable: Variable name
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.int]]] tunnel_interface_exclude_controller_group_lists: Exclude the following controller groups defined in this list
        :param pulumi.Input[_builtins.str] tunnel_interface_gre_tunnel_destination_ip: Extend the TLOC to a remote node over GRE tunnel
        :param pulumi.Input[_builtins.str] tunnel_interface_gre_tunnel_destination_ip_variable: Variable name
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.int]]] tunnel_interface_groups: List of groups
        :param pulumi.Input[_builtins.str] tunnel_interface_groups_variable: Variable name
        :param pulumi.Input[_builtins.int] tunnel_interface_hello_interval: Set time period of control hello packets <100..600000> milli seconds
                 - Range: `100`-`600000`
                 - Default value: `1000`
        :param pulumi.Input[_builtins.str] tunnel_interface_hello_interval_variable: Variable name
        :param pulumi.Input[_builtins.int] tunnel_interface_hello_tolerance: Set tolerance of control hello packets <12..6000> seconds
                 - Range: `12`-`6000`
                 - Default value: `12`
        :param pulumi.Input[_builtins.str] tunnel_interface_hello_tolerance_variable: Variable name
        :param pulumi.Input[_builtins.bool] tunnel_interface_last_resort_circuit: Set TLOC as last resort
                 - Default value: `false`
        :param pulumi.Input[_builtins.str] tunnel_interface_last_resort_circuit_variable: Variable name
        :param pulumi.Input[_builtins.bool] tunnel_interface_low_bandwidth_link: Set the interface as a low-bandwidth circuit
                 - Default value: `false`
        :param pulumi.Input[_builtins.str] tunnel_interface_low_bandwidth_link_variable: Variable name
        :param pulumi.Input[_builtins.int] tunnel_interface_max_control_connections: Set the maximum number of control connections for this TLOC
                 - Range: `0`-`100`
        :param pulumi.Input[_builtins.str] tunnel_interface_max_control_connections_variable: Variable name
        :param pulumi.Input[_builtins.int] tunnel_interface_nat_refresh_interval: Set time period of nat refresh packets <1...60> seconds
                 - Range: `1`-`60`
                 - Default value: `5`
        :param pulumi.Input[_builtins.str] tunnel_interface_nat_refresh_interval_variable: Variable name
        :param pulumi.Input[_builtins.bool] tunnel_interface_network_broadcast: Accept and respond to network-prefix-directed broadcasts)
                 - Default value: `false`
        :param pulumi.Input[_builtins.str] tunnel_interface_network_broadcast_variable: Variable name
        :param pulumi.Input[_builtins.bool] tunnel_interface_port_hop: Disallow port hopping on the tunnel interface
                 - Default value: `true`
        :param pulumi.Input[_builtins.str] tunnel_interface_port_hop_variable: Variable name
        :param pulumi.Input[_builtins.bool] tunnel_interface_propagate_sgt: CTS SGT Propagation configuration
                 - Default value: `false`
        :param pulumi.Input[_builtins.str] tunnel_interface_propagate_sgt_variable: Variable name
        :param pulumi.Input[_builtins.int] tunnel_interface_tunnel_tcp_mss: Tunnel TCP MSS on SYN packets, in bytes
                 - Range: `500`-`1460`
        :param pulumi.Input[_builtins.str] tunnel_interface_tunnel_tcp_mss_variable: Variable name
        :param pulumi.Input[_builtins.bool] tunnel_interface_vbond_as_stun_server: Put this wan interface in STUN mode only
                 - Default value: `false`
        :param pulumi.Input[_builtins.str] tunnel_interface_vbond_as_stun_server_variable: Variable name
        :param pulumi.Input[_builtins.int] tunnel_interface_vmanage_connection_preference: Set interface preference for control connection to vManage <0..8>
                 - Range: `0`-`8`
                 - Default value: `5`
        :param pulumi.Input[_builtins.str] tunnel_interface_vmanage_connection_preference_variable: Variable name
        :param pulumi.Input[_builtins.str] tunnel_qos_mode: Set tunnel QoS mode
                 - Choices: `hub`, `spoke`
        :param pulumi.Input[_builtins.str] tunnel_qos_mode_variable: Variable name
        :param pulumi.Input[_builtins.int] udp_timeout: Set NAT UDP session timeout, in minutes
                 - Range: `1`-`8947`
                 - Default value: `1`
        :param pulumi.Input[_builtins.str] udp_timeout_variable: Variable name
        :param pulumi.Input[_builtins.int] version: The version of the feature template
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _CiscoVpnInterfaceFeatureTemplateState.__new__(_CiscoVpnInterfaceFeatureTemplateState)

        __props__.__dict__["access_lists"] = access_lists
        __props__.__dict__["address"] = address
        __props__.__dict__["address_variable"] = address_variable
        __props__.__dict__["arp_timeout"] = arp_timeout
        __props__.__dict__["arp_timeout_variable"] = arp_timeout_variable
        __props__.__dict__["auto_bandwidth_detect"] = auto_bandwidth_detect
        __props__.__dict__["auto_bandwidth_detect_variable"] = auto_bandwidth_detect_variable
        __props__.__dict__["autonegotiate"] = autonegotiate
        __props__.__dict__["autonegotiate_variable"] = autonegotiate_variable
        __props__.__dict__["bandwidth_downstream"] = bandwidth_downstream
        __props__.__dict__["bandwidth_downstream_variable"] = bandwidth_downstream_variable
        __props__.__dict__["bandwidth_upstream"] = bandwidth_upstream
        __props__.__dict__["bandwidth_upstream_variable"] = bandwidth_upstream_variable
        __props__.__dict__["block_non_source_ip"] = block_non_source_ip
        __props__.__dict__["block_non_source_ip_variable"] = block_non_source_ip_variable
        __props__.__dict__["core_region"] = core_region
        __props__.__dict__["core_region_variable"] = core_region_variable
        __props__.__dict__["description"] = description
        __props__.__dict__["device_types"] = device_types
        __props__.__dict__["dhcp"] = dhcp
        __props__.__dict__["dhcp_distance"] = dhcp_distance
        __props__.__dict__["dhcp_distance_variable"] = dhcp_distance_variable
        __props__.__dict__["dhcp_variable"] = dhcp_variable
        __props__.__dict__["dhcpv6"] = dhcpv6
        __props__.__dict__["dhcpv6_variable"] = dhcpv6_variable
        __props__.__dict__["duplex"] = duplex
        __props__.__dict__["duplex_variable"] = duplex_variable
        __props__.__dict__["enable_core_region"] = enable_core_region
        __props__.__dict__["enable_sgt"] = enable_sgt
        __props__.__dict__["gre_tunnel_source_ip"] = gre_tunnel_source_ip
        __props__.__dict__["gre_tunnel_source_ip_variable"] = gre_tunnel_source_ip_variable
        __props__.__dict__["gre_tunnel_xconnect"] = gre_tunnel_xconnect
        __props__.__dict__["gre_tunnel_xconnect_variable"] = gre_tunnel_xconnect_variable
        __props__.__dict__["icmp_redirect_disable"] = icmp_redirect_disable
        __props__.__dict__["icmp_redirect_disable_variable"] = icmp_redirect_disable_variable
        __props__.__dict__["interface_description"] = interface_description
        __props__.__dict__["interface_description_variable"] = interface_description_variable
        __props__.__dict__["interface_mtu"] = interface_mtu
        __props__.__dict__["interface_mtu_variable"] = interface_mtu_variable
        __props__.__dict__["interface_name"] = interface_name
        __props__.__dict__["interface_name_variable"] = interface_name_variable
        __props__.__dict__["ip_directed_broadcast"] = ip_directed_broadcast
        __props__.__dict__["ip_directed_broadcast_variable"] = ip_directed_broadcast_variable
        __props__.__dict__["ip_mtu"] = ip_mtu
        __props__.__dict__["ip_mtu_variable"] = ip_mtu_variable
        __props__.__dict__["iperf_server"] = iperf_server
        __props__.__dict__["iperf_server_variable"] = iperf_server_variable
        __props__.__dict__["ipv4_dhcp_helper_variable"] = ipv4_dhcp_helper_variable
        __props__.__dict__["ipv4_dhcp_helpers"] = ipv4_dhcp_helpers
        __props__.__dict__["ipv4_secondary_addresses"] = ipv4_secondary_addresses
        __props__.__dict__["ipv4_vrrps"] = ipv4_vrrps
        __props__.__dict__["ipv6_access_lists"] = ipv6_access_lists
        __props__.__dict__["ipv6_address"] = ipv6_address
        __props__.__dict__["ipv6_address_variable"] = ipv6_address_variable
        __props__.__dict__["ipv6_dhcp_helpers"] = ipv6_dhcp_helpers
        __props__.__dict__["ipv6_nat"] = ipv6_nat
        __props__.__dict__["ipv6_nat_variable"] = ipv6_nat_variable
        __props__.__dict__["ipv6_secondary_addresses"] = ipv6_secondary_addresses
        __props__.__dict__["ipv6_vrrps"] = ipv6_vrrps
        __props__.__dict__["load_interval"] = load_interval
        __props__.__dict__["load_interval_variable"] = load_interval_variable
        __props__.__dict__["mac_address"] = mac_address
        __props__.__dict__["mac_address_variable"] = mac_address_variable
        __props__.__dict__["media_type"] = media_type
        __props__.__dict__["media_type_variable"] = media_type_variable
        __props__.__dict__["name"] = name
        __props__.__dict__["nat"] = nat
        __props__.__dict__["nat64_interface"] = nat64_interface
        __props__.__dict__["nat66_interface"] = nat66_interface
        __props__.__dict__["nat_inside_source_loopback_interface"] = nat_inside_source_loopback_interface
        __props__.__dict__["nat_inside_source_loopback_interface_variable"] = nat_inside_source_loopback_interface_variable
        __props__.__dict__["nat_overload"] = nat_overload
        __props__.__dict__["nat_overload_variable"] = nat_overload_variable
        __props__.__dict__["nat_pool_prefix_length"] = nat_pool_prefix_length
        __props__.__dict__["nat_pool_prefix_length_variable"] = nat_pool_prefix_length_variable
        __props__.__dict__["nat_pool_range_end"] = nat_pool_range_end
        __props__.__dict__["nat_pool_range_end_variable"] = nat_pool_range_end_variable
        __props__.__dict__["nat_pool_range_start"] = nat_pool_range_start
        __props__.__dict__["nat_pool_range_start_variable"] = nat_pool_range_start_variable
        __props__.__dict__["nat_type"] = nat_type
        __props__.__dict__["nat_type_variable"] = nat_type_variable
        __props__.__dict__["poe"] = poe
        __props__.__dict__["poe_variable"] = poe_variable
        __props__.__dict__["propagate_sgt"] = propagate_sgt
        __props__.__dict__["qos_adaptive_bandwidth_downstream"] = qos_adaptive_bandwidth_downstream
        __props__.__dict__["qos_adaptive_bandwidth_downstream_variable"] = qos_adaptive_bandwidth_downstream_variable
        __props__.__dict__["qos_adaptive_bandwidth_upstream"] = qos_adaptive_bandwidth_upstream
        __props__.__dict__["qos_adaptive_bandwidth_upstream_variable"] = qos_adaptive_bandwidth_upstream_variable
        __props__.__dict__["qos_adaptive_max_downstream"] = qos_adaptive_max_downstream
        __props__.__dict__["qos_adaptive_max_downstream_variable"] = qos_adaptive_max_downstream_variable
        __props__.__dict__["qos_adaptive_max_upstream"] = qos_adaptive_max_upstream
        __props__.__dict__["qos_adaptive_max_upstream_variable"] = qos_adaptive_max_upstream_variable
        __props__.__dict__["qos_adaptive_min_downstream"] = qos_adaptive_min_downstream
        __props__.__dict__["qos_adaptive_min_downstream_variable"] = qos_adaptive_min_downstream_variable
        __props__.__dict__["qos_adaptive_min_upstream"] = qos_adaptive_min_upstream
        __props__.__dict__["qos_adaptive_min_upstream_variable"] = qos_adaptive_min_upstream_variable
        __props__.__dict__["qos_adaptive_period"] = qos_adaptive_period
        __props__.__dict__["qos_adaptive_period_variable"] = qos_adaptive_period_variable
        __props__.__dict__["qos_map"] = qos_map
        __props__.__dict__["qos_map_variable"] = qos_map_variable
        __props__.__dict__["qos_map_vpn"] = qos_map_vpn
        __props__.__dict__["qos_map_vpn_variable"] = qos_map_vpn_variable
        __props__.__dict__["rewrite_rule_name"] = rewrite_rule_name
        __props__.__dict__["rewrite_rule_name_variable"] = rewrite_rule_name_variable
        __props__.__dict__["secondary_region"] = secondary_region
        __props__.__dict__["secondary_region_variable"] = secondary_region_variable
        __props__.__dict__["sgt_enforcement"] = sgt_enforcement
        __props__.__dict__["sgt_enforcement_sgt"] = sgt_enforcement_sgt
        __props__.__dict__["sgt_enforcement_sgt_variable"] = sgt_enforcement_sgt_variable
        __props__.__dict__["shaping_rate"] = shaping_rate
        __props__.__dict__["shaping_rate_variable"] = shaping_rate_variable
        __props__.__dict__["shutdown"] = shutdown
        __props__.__dict__["shutdown_variable"] = shutdown_variable
        __props__.__dict__["speed"] = speed
        __props__.__dict__["speed_variable"] = speed_variable
        __props__.__dict__["static_arps"] = static_arps
        __props__.__dict__["static_nat66_entries"] = static_nat66_entries
        __props__.__dict__["static_nat_entries"] = static_nat_entries
        __props__.__dict__["static_port_forward_entries"] = static_port_forward_entries
        __props__.__dict__["static_sgt"] = static_sgt
        __props__.__dict__["static_sgt_trusted"] = static_sgt_trusted
        __props__.__dict__["static_sgt_variable"] = static_sgt_variable
        __props__.__dict__["tcp_mss_adjust"] = tcp_mss_adjust
        __props__.__dict__["tcp_mss_adjust_variable"] = tcp_mss_adjust_variable
        __props__.__dict__["tcp_timeout"] = tcp_timeout
        __props__.__dict__["tcp_timeout_variable"] = tcp_timeout_variable
        __props__.__dict__["template_type"] = template_type
        __props__.__dict__["tloc_extension"] = tloc_extension
        __props__.__dict__["tloc_extension_variable"] = tloc_extension_variable
        __props__.__dict__["tracker_variable"] = tracker_variable
        __props__.__dict__["trackers"] = trackers
        __props__.__dict__["tunnel_bandwidth"] = tunnel_bandwidth
        __props__.__dict__["tunnel_bandwidth_variable"] = tunnel_bandwidth_variable
        __props__.__dict__["tunnel_interface_allow_all"] = tunnel_interface_allow_all
        __props__.__dict__["tunnel_interface_allow_all_variable"] = tunnel_interface_allow_all_variable
        __props__.__dict__["tunnel_interface_allow_bgp"] = tunnel_interface_allow_bgp
        __props__.__dict__["tunnel_interface_allow_bgp_variable"] = tunnel_interface_allow_bgp_variable
        __props__.__dict__["tunnel_interface_allow_dhcp"] = tunnel_interface_allow_dhcp
        __props__.__dict__["tunnel_interface_allow_dhcp_variable"] = tunnel_interface_allow_dhcp_variable
        __props__.__dict__["tunnel_interface_allow_dns"] = tunnel_interface_allow_dns
        __props__.__dict__["tunnel_interface_allow_dns_variable"] = tunnel_interface_allow_dns_variable
        __props__.__dict__["tunnel_interface_allow_https"] = tunnel_interface_allow_https
        __props__.__dict__["tunnel_interface_allow_https_variable"] = tunnel_interface_allow_https_variable
        __props__.__dict__["tunnel_interface_allow_icmp"] = tunnel_interface_allow_icmp
        __props__.__dict__["tunnel_interface_allow_icmp_variable"] = tunnel_interface_allow_icmp_variable
        __props__.__dict__["tunnel_interface_allow_netconf"] = tunnel_interface_allow_netconf
        __props__.__dict__["tunnel_interface_allow_netconf_variable"] = tunnel_interface_allow_netconf_variable
        __props__.__dict__["tunnel_interface_allow_ntp"] = tunnel_interface_allow_ntp
        __props__.__dict__["tunnel_interface_allow_ntp_variable"] = tunnel_interface_allow_ntp_variable
        __props__.__dict__["tunnel_interface_allow_ospf"] = tunnel_interface_allow_ospf
        __props__.__dict__["tunnel_interface_allow_ospf_variable"] = tunnel_interface_allow_ospf_variable
        __props__.__dict__["tunnel_interface_allow_snmp"] = tunnel_interface_allow_snmp
        __props__.__dict__["tunnel_interface_allow_snmp_variable"] = tunnel_interface_allow_snmp_variable
        __props__.__dict__["tunnel_interface_allow_ssh"] = tunnel_interface_allow_ssh
        __props__.__dict__["tunnel_interface_allow_ssh_variable"] = tunnel_interface_allow_ssh_variable
        __props__.__dict__["tunnel_interface_allow_stun"] = tunnel_interface_allow_stun
        __props__.__dict__["tunnel_interface_allow_stun_variable"] = tunnel_interface_allow_stun_variable
        __props__.__dict__["tunnel_interface_bind_loopback_tunnel"] = tunnel_interface_bind_loopback_tunnel
        __props__.__dict__["tunnel_interface_bind_loopback_tunnel_variable"] = tunnel_interface_bind_loopback_tunnel_variable
        __props__.__dict__["tunnel_interface_border"] = tunnel_interface_border
        __props__.__dict__["tunnel_interface_border_variable"] = tunnel_interface_border_variable
        __props__.__dict__["tunnel_interface_carrier"] = tunnel_interface_carrier
        __props__.__dict__["tunnel_interface_carrier_variable"] = tunnel_interface_carrier_variable
        __props__.__dict__["tunnel_interface_clear_dont_fragment"] = tunnel_interface_clear_dont_fragment
        __props__.__dict__["tunnel_interface_clear_dont_fragment_variable"] = tunnel_interface_clear_dont_fragment_variable
        __props__.__dict__["tunnel_interface_color"] = tunnel_interface_color
        __props__.__dict__["tunnel_interface_color_restrict"] = tunnel_interface_color_restrict
        __props__.__dict__["tunnel_interface_color_restrict_variable"] = tunnel_interface_color_restrict_variable
        __props__.__dict__["tunnel_interface_color_variable"] = tunnel_interface_color_variable
        __props__.__dict__["tunnel_interface_control_connections"] = tunnel_interface_control_connections
        __props__.__dict__["tunnel_interface_control_connections_variable"] = tunnel_interface_control_connections_variable
        __props__.__dict__["tunnel_interface_encapsulations"] = tunnel_interface_encapsulations
        __props__.__dict__["tunnel_interface_exclude_controller_group_list_variable"] = tunnel_interface_exclude_controller_group_list_variable
        __props__.__dict__["tunnel_interface_exclude_controller_group_lists"] = tunnel_interface_exclude_controller_group_lists
        __props__.__dict__["tunnel_interface_gre_tunnel_destination_ip"] = tunnel_interface_gre_tunnel_destination_ip
        __props__.__dict__["tunnel_interface_gre_tunnel_destination_ip_variable"] = tunnel_interface_gre_tunnel_destination_ip_variable
        __props__.__dict__["tunnel_interface_groups"] = tunnel_interface_groups
        __props__.__dict__["tunnel_interface_groups_variable"] = tunnel_interface_groups_variable
        __props__.__dict__["tunnel_interface_hello_interval"] = tunnel_interface_hello_interval
        __props__.__dict__["tunnel_interface_hello_interval_variable"] = tunnel_interface_hello_interval_variable
        __props__.__dict__["tunnel_interface_hello_tolerance"] = tunnel_interface_hello_tolerance
        __props__.__dict__["tunnel_interface_hello_tolerance_variable"] = tunnel_interface_hello_tolerance_variable
        __props__.__dict__["tunnel_interface_last_resort_circuit"] = tunnel_interface_last_resort_circuit
        __props__.__dict__["tunnel_interface_last_resort_circuit_variable"] = tunnel_interface_last_resort_circuit_variable
        __props__.__dict__["tunnel_interface_low_bandwidth_link"] = tunnel_interface_low_bandwidth_link
        __props__.__dict__["tunnel_interface_low_bandwidth_link_variable"] = tunnel_interface_low_bandwidth_link_variable
        __props__.__dict__["tunnel_interface_max_control_connections"] = tunnel_interface_max_control_connections
        __props__.__dict__["tunnel_interface_max_control_connections_variable"] = tunnel_interface_max_control_connections_variable
        __props__.__dict__["tunnel_interface_nat_refresh_interval"] = tunnel_interface_nat_refresh_interval
        __props__.__dict__["tunnel_interface_nat_refresh_interval_variable"] = tunnel_interface_nat_refresh_interval_variable
        __props__.__dict__["tunnel_interface_network_broadcast"] = tunnel_interface_network_broadcast
        __props__.__dict__["tunnel_interface_network_broadcast_variable"] = tunnel_interface_network_broadcast_variable
        __props__.__dict__["tunnel_interface_port_hop"] = tunnel_interface_port_hop
        __props__.__dict__["tunnel_interface_port_hop_variable"] = tunnel_interface_port_hop_variable
        __props__.__dict__["tunnel_interface_propagate_sgt"] = tunnel_interface_propagate_sgt
        __props__.__dict__["tunnel_interface_propagate_sgt_variable"] = tunnel_interface_propagate_sgt_variable
        __props__.__dict__["tunnel_interface_tunnel_tcp_mss"] = tunnel_interface_tunnel_tcp_mss
        __props__.__dict__["tunnel_interface_tunnel_tcp_mss_variable"] = tunnel_interface_tunnel_tcp_mss_variable
        __props__.__dict__["tunnel_interface_vbond_as_stun_server"] = tunnel_interface_vbond_as_stun_server
        __props__.__dict__["tunnel_interface_vbond_as_stun_server_variable"] = tunnel_interface_vbond_as_stun_server_variable
        __props__.__dict__["tunnel_interface_vmanage_connection_preference"] = tunnel_interface_vmanage_connection_preference
        __props__.__dict__["tunnel_interface_vmanage_connection_preference_variable"] = tunnel_interface_vmanage_connection_preference_variable
        __props__.__dict__["tunnel_qos_mode"] = tunnel_qos_mode
        __props__.__dict__["tunnel_qos_mode_variable"] = tunnel_qos_mode_variable
        __props__.__dict__["udp_timeout"] = udp_timeout
        __props__.__dict__["udp_timeout_variable"] = udp_timeout_variable
        __props__.__dict__["version"] = version
        return CiscoVpnInterfaceFeatureTemplate(resource_name, opts=opts, __props__=__props__)

    @_builtins.property
    @pulumi.getter(name="accessLists")
    def access_lists(self) -> pulumi.Output[Optional[Sequence['outputs.CiscoVpnInterfaceFeatureTemplateAccessList']]]:
        """
        Apply ACL
        """
        return pulumi.get(self, "access_lists")

    @_builtins.property
    @pulumi.getter
    def address(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        Assign IPv4 address
        """
        return pulumi.get(self, "address")

    @_builtins.property
    @pulumi.getter(name="addressVariable")
    def address_variable(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "address_variable")

    @_builtins.property
    @pulumi.getter(name="arpTimeout")
    def arp_timeout(self) -> pulumi.Output[Optional[_builtins.int]]:
        """
        Timeout value for dynamically learned ARP entries, <0..2678400> seconds
          - Range: `0`-`2147483`
          - Default value: `1200`
        """
        return pulumi.get(self, "arp_timeout")

    @_builtins.property
    @pulumi.getter(name="arpTimeoutVariable")
    def arp_timeout_variable(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "arp_timeout_variable")

    @_builtins.property
    @pulumi.getter(name="autoBandwidthDetect")
    def auto_bandwidth_detect(self) -> pulumi.Output[Optional[_builtins.bool]]:
        """
        Interface auto detect bandwidth
          - Default value: `false`
        """
        return pulumi.get(self, "auto_bandwidth_detect")

    @_builtins.property
    @pulumi.getter(name="autoBandwidthDetectVariable")
    def auto_bandwidth_detect_variable(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "auto_bandwidth_detect_variable")

    @_builtins.property
    @pulumi.getter
    def autonegotiate(self) -> pulumi.Output[Optional[_builtins.bool]]:
        """
        Link autonegotiation
        """
        return pulumi.get(self, "autonegotiate")

    @_builtins.property
    @pulumi.getter(name="autonegotiateVariable")
    def autonegotiate_variable(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "autonegotiate_variable")

    @_builtins.property
    @pulumi.getter(name="bandwidthDownstream")
    def bandwidth_downstream(self) -> pulumi.Output[Optional[_builtins.int]]:
        """
        Interface downstream bandwidth capacity, in kbps
          - Range: `1`-`2147483647`
        """
        return pulumi.get(self, "bandwidth_downstream")

    @_builtins.property
    @pulumi.getter(name="bandwidthDownstreamVariable")
    def bandwidth_downstream_variable(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "bandwidth_downstream_variable")

    @_builtins.property
    @pulumi.getter(name="bandwidthUpstream")
    def bandwidth_upstream(self) -> pulumi.Output[Optional[_builtins.int]]:
        """
        Interface upstream bandwidth capacity, in kbps
          - Range: `1`-`2147483647`
        """
        return pulumi.get(self, "bandwidth_upstream")

    @_builtins.property
    @pulumi.getter(name="bandwidthUpstreamVariable")
    def bandwidth_upstream_variable(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "bandwidth_upstream_variable")

    @_builtins.property
    @pulumi.getter(name="blockNonSourceIp")
    def block_non_source_ip(self) -> pulumi.Output[Optional[_builtins.bool]]:
        """
        Block packets originating from IP address that is not from this source
          - Default value: `false`
        """
        return pulumi.get(self, "block_non_source_ip")

    @_builtins.property
    @pulumi.getter(name="blockNonSourceIpVariable")
    def block_non_source_ip_variable(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "block_non_source_ip_variable")

    @_builtins.property
    @pulumi.getter(name="coreRegion")
    def core_region(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        Enable core region
          - Choices: `core`, `core-shared`
          - Default value: `core`
        """
        return pulumi.get(self, "core_region")

    @_builtins.property
    @pulumi.getter(name="coreRegionVariable")
    def core_region_variable(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "core_region_variable")

    @_builtins.property
    @pulumi.getter
    def description(self) -> pulumi.Output[_builtins.str]:
        """
        The description of the feature template
        """
        return pulumi.get(self, "description")

    @_builtins.property
    @pulumi.getter(name="deviceTypes")
    def device_types(self) -> pulumi.Output[Sequence[_builtins.str]]:
        """
        List of supported device types
          - Choices: `vedge-C8000V`, `vedge-C8300-1N1S-4T2X`, `vedge-C8300-1N1S-6T`, `vedge-C8300-2N2S-6T`, `vedge-C8300-2N2S-4T2X`, `vedge-C8500-12X4QC`, `vedge-C8500-12X`, `vedge-C8500-20X6C`, `vedge-C8500L-8S4X`, `vedge-C8200-1N-4T`, `vedge-C8200L-1N-4T`
        """
        return pulumi.get(self, "device_types")

    @_builtins.property
    @pulumi.getter
    def dhcp(self) -> pulumi.Output[Optional[_builtins.bool]]:
        """
        Enable DHCP
          - Default value: `false`
        """
        return pulumi.get(self, "dhcp")

    @_builtins.property
    @pulumi.getter(name="dhcpDistance")
    def dhcp_distance(self) -> pulumi.Output[Optional[_builtins.int]]:
        """
        Set administrative distance for DHCP default route
          - Range: `1`-`65536`
          - Default value: `1`
        """
        return pulumi.get(self, "dhcp_distance")

    @_builtins.property
    @pulumi.getter(name="dhcpDistanceVariable")
    def dhcp_distance_variable(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "dhcp_distance_variable")

    @_builtins.property
    @pulumi.getter(name="dhcpVariable")
    def dhcp_variable(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "dhcp_variable")

    @_builtins.property
    @pulumi.getter
    def dhcpv6(self) -> pulumi.Output[Optional[_builtins.bool]]:
        """
        Enable DHCPv6
          - Default value: `false`
        """
        return pulumi.get(self, "dhcpv6")

    @_builtins.property
    @pulumi.getter(name="dhcpv6Variable")
    def dhcpv6_variable(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "dhcpv6_variable")

    @_builtins.property
    @pulumi.getter
    def duplex(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        Duplex mode
          - Choices: `full`, `half`, `auto`
        """
        return pulumi.get(self, "duplex")

    @_builtins.property
    @pulumi.getter(name="duplexVariable")
    def duplex_variable(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "duplex_variable")

    @_builtins.property
    @pulumi.getter(name="enableCoreRegion")
    def enable_core_region(self) -> pulumi.Output[Optional[_builtins.bool]]:
        """
        Enable core region
          - Default value: `false`
        """
        return pulumi.get(self, "enable_core_region")

    @_builtins.property
    @pulumi.getter(name="enableSgt")
    def enable_sgt(self) -> pulumi.Output[Optional[_builtins.bool]]:
        """
        Enables the interface for CTS SGT authorization and forwarding.
          - Default value: `false`
        """
        return pulumi.get(self, "enable_sgt")

    @_builtins.property
    @pulumi.getter(name="greTunnelSourceIp")
    def gre_tunnel_source_ip(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        Extend remote TLOC over a GRE tunnel to a local WAN interface
        """
        return pulumi.get(self, "gre_tunnel_source_ip")

    @_builtins.property
    @pulumi.getter(name="greTunnelSourceIpVariable")
    def gre_tunnel_source_ip_variable(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "gre_tunnel_source_ip_variable")

    @_builtins.property
    @pulumi.getter(name="greTunnelXconnect")
    def gre_tunnel_xconnect(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        Extend remote TLOC over a GRE tunnel to a local WAN interface
        """
        return pulumi.get(self, "gre_tunnel_xconnect")

    @_builtins.property
    @pulumi.getter(name="greTunnelXconnectVariable")
    def gre_tunnel_xconnect_variable(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "gre_tunnel_xconnect_variable")

    @_builtins.property
    @pulumi.getter(name="icmpRedirectDisable")
    def icmp_redirect_disable(self) -> pulumi.Output[Optional[_builtins.bool]]:
        """
        Set this option to disable the icmp/icmpv6 redirect packets
          - Default value: `true`
        """
        return pulumi.get(self, "icmp_redirect_disable")

    @_builtins.property
    @pulumi.getter(name="icmpRedirectDisableVariable")
    def icmp_redirect_disable_variable(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "icmp_redirect_disable_variable")

    @_builtins.property
    @pulumi.getter(name="interfaceDescription")
    def interface_description(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        Interface description
        """
        return pulumi.get(self, "interface_description")

    @_builtins.property
    @pulumi.getter(name="interfaceDescriptionVariable")
    def interface_description_variable(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "interface_description_variable")

    @_builtins.property
    @pulumi.getter(name="interfaceMtu")
    def interface_mtu(self) -> pulumi.Output[Optional[_builtins.int]]:
        """
        Interface MTU GigabitEthernet0 <1500..1518>, Other GigabitEthernet <1500..9216> in bytes
          - Range: `1500`-`9216`
          - Default value: `1500`
        """
        return pulumi.get(self, "interface_mtu")

    @_builtins.property
    @pulumi.getter(name="interfaceMtuVariable")
    def interface_mtu_variable(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "interface_mtu_variable")

    @_builtins.property
    @pulumi.getter(name="interfaceName")
    def interface_name(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        Interface name: ge0/<0-..> or ge0/<0-..>.vlanid or irb<bridgeid:1-63> or loopback<string> or natpool-<1..31> when present
        """
        return pulumi.get(self, "interface_name")

    @_builtins.property
    @pulumi.getter(name="interfaceNameVariable")
    def interface_name_variable(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "interface_name_variable")

    @_builtins.property
    @pulumi.getter(name="ipDirectedBroadcast")
    def ip_directed_broadcast(self) -> pulumi.Output[Optional[_builtins.bool]]:
        """
        IP Directed-Broadcast
          - Default value: `false`
        """
        return pulumi.get(self, "ip_directed_broadcast")

    @_builtins.property
    @pulumi.getter(name="ipDirectedBroadcastVariable")
    def ip_directed_broadcast_variable(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "ip_directed_broadcast_variable")

    @_builtins.property
    @pulumi.getter(name="ipMtu")
    def ip_mtu(self) -> pulumi.Output[Optional[_builtins.int]]:
        """
        IP MTU for GigabitEthernet main <576..Interface MTU>, GigabitEthernet subinterface <576..9216>, Other Interfaces <576..2000> in bytes
          - Range: `576`-`9216`
          - Default value: `1500`
        """
        return pulumi.get(self, "ip_mtu")

    @_builtins.property
    @pulumi.getter(name="ipMtuVariable")
    def ip_mtu_variable(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "ip_mtu_variable")

    @_builtins.property
    @pulumi.getter(name="iperfServer")
    def iperf_server(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        Iperf server for auto bandwidth detect
        """
        return pulumi.get(self, "iperf_server")

    @_builtins.property
    @pulumi.getter(name="iperfServerVariable")
    def iperf_server_variable(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "iperf_server_variable")

    @_builtins.property
    @pulumi.getter(name="ipv4DhcpHelperVariable")
    def ipv4_dhcp_helper_variable(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "ipv4_dhcp_helper_variable")

    @_builtins.property
    @pulumi.getter(name="ipv4DhcpHelpers")
    def ipv4_dhcp_helpers(self) -> pulumi.Output[Optional[Sequence[_builtins.str]]]:
        """
        List of DHCP IPv4 helper addresses
        """
        return pulumi.get(self, "ipv4_dhcp_helpers")

    @_builtins.property
    @pulumi.getter(name="ipv4SecondaryAddresses")
    def ipv4_secondary_addresses(self) -> pulumi.Output[Optional[Sequence['outputs.CiscoVpnInterfaceFeatureTemplateIpv4SecondaryAddress']]]:
        """
        Assign secondary IP addresses
        """
        return pulumi.get(self, "ipv4_secondary_addresses")

    @_builtins.property
    @pulumi.getter(name="ipv4Vrrps")
    def ipv4_vrrps(self) -> pulumi.Output[Optional[Sequence['outputs.CiscoVpnInterfaceFeatureTemplateIpv4Vrrp']]]:
        """
        Enable VRRP
        """
        return pulumi.get(self, "ipv4_vrrps")

    @_builtins.property
    @pulumi.getter(name="ipv6AccessLists")
    def ipv6_access_lists(self) -> pulumi.Output[Optional[Sequence['outputs.CiscoVpnInterfaceFeatureTemplateIpv6AccessList']]]:
        """
        Apply IPv6 access list
        """
        return pulumi.get(self, "ipv6_access_lists")

    @_builtins.property
    @pulumi.getter(name="ipv6Address")
    def ipv6_address(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        Assign IPv6 address
        """
        return pulumi.get(self, "ipv6_address")

    @_builtins.property
    @pulumi.getter(name="ipv6AddressVariable")
    def ipv6_address_variable(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "ipv6_address_variable")

    @_builtins.property
    @pulumi.getter(name="ipv6DhcpHelpers")
    def ipv6_dhcp_helpers(self) -> pulumi.Output[Optional[Sequence['outputs.CiscoVpnInterfaceFeatureTemplateIpv6DhcpHelper']]]:
        """
        DHCPv6 Helper
        """
        return pulumi.get(self, "ipv6_dhcp_helpers")

    @_builtins.property
    @pulumi.getter(name="ipv6Nat")
    def ipv6_nat(self) -> pulumi.Output[Optional[_builtins.bool]]:
        """
        NAT64 on this interface
          - Default value: `false`
        """
        return pulumi.get(self, "ipv6_nat")

    @_builtins.property
    @pulumi.getter(name="ipv6NatVariable")
    def ipv6_nat_variable(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "ipv6_nat_variable")

    @_builtins.property
    @pulumi.getter(name="ipv6SecondaryAddresses")
    def ipv6_secondary_addresses(self) -> pulumi.Output[Optional[Sequence['outputs.CiscoVpnInterfaceFeatureTemplateIpv6SecondaryAddress']]]:
        """
        Assign secondary IPv6 addresses
        """
        return pulumi.get(self, "ipv6_secondary_addresses")

    @_builtins.property
    @pulumi.getter(name="ipv6Vrrps")
    def ipv6_vrrps(self) -> pulumi.Output[Optional[Sequence['outputs.CiscoVpnInterfaceFeatureTemplateIpv6Vrrp']]]:
        """
        Enable VRRP
        """
        return pulumi.get(self, "ipv6_vrrps")

    @_builtins.property
    @pulumi.getter(name="loadInterval")
    def load_interval(self) -> pulumi.Output[Optional[_builtins.int]]:
        """
        Interval for interface load calculation
          - Range: `30`-`600`
          - Default value: `30`
        """
        return pulumi.get(self, "load_interval")

    @_builtins.property
    @pulumi.getter(name="loadIntervalVariable")
    def load_interval_variable(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "load_interval_variable")

    @_builtins.property
    @pulumi.getter(name="macAddress")
    def mac_address(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        Set MAC-layer address
        """
        return pulumi.get(self, "mac_address")

    @_builtins.property
    @pulumi.getter(name="macAddressVariable")
    def mac_address_variable(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "mac_address_variable")

    @_builtins.property
    @pulumi.getter(name="mediaType")
    def media_type(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        Media type
          - Choices: `auto-select`, `rj45`, `sfp`
        """
        return pulumi.get(self, "media_type")

    @_builtins.property
    @pulumi.getter(name="mediaTypeVariable")
    def media_type_variable(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "media_type_variable")

    @_builtins.property
    @pulumi.getter
    def name(self) -> pulumi.Output[_builtins.str]:
        """
        The name of the feature template
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def nat(self) -> pulumi.Output[Optional[_builtins.bool]]:
        """
        Network Address Translation on this interface
          - Default value: `false`
        """
        return pulumi.get(self, "nat")

    @_builtins.property
    @pulumi.getter(name="nat64Interface")
    def nat64_interface(self) -> pulumi.Output[Optional[_builtins.bool]]:
        """
        NAT64 on this interface
          - Default value: `false`
        """
        return pulumi.get(self, "nat64_interface")

    @_builtins.property
    @pulumi.getter(name="nat66Interface")
    def nat66_interface(self) -> pulumi.Output[Optional[_builtins.bool]]:
        """
        NAT66 on this interface
          - Default value: `false`
        """
        return pulumi.get(self, "nat66_interface")

    @_builtins.property
    @pulumi.getter(name="natInsideSourceLoopbackInterface")
    def nat_inside_source_loopback_interface(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        Configure NAT Inside Loopback Interface
        """
        return pulumi.get(self, "nat_inside_source_loopback_interface")

    @_builtins.property
    @pulumi.getter(name="natInsideSourceLoopbackInterfaceVariable")
    def nat_inside_source_loopback_interface_variable(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "nat_inside_source_loopback_interface_variable")

    @_builtins.property
    @pulumi.getter(name="natOverload")
    def nat_overload(self) -> pulumi.Output[Optional[_builtins.bool]]:
        """
        Enable port translation(PAT)
          - Default value: `true`
        """
        return pulumi.get(self, "nat_overload")

    @_builtins.property
    @pulumi.getter(name="natOverloadVariable")
    def nat_overload_variable(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "nat_overload_variable")

    @_builtins.property
    @pulumi.getter(name="natPoolPrefixLength")
    def nat_pool_prefix_length(self) -> pulumi.Output[Optional[_builtins.int]]:
        """
        Ending IP address of NAT Pool Prefix Length
        """
        return pulumi.get(self, "nat_pool_prefix_length")

    @_builtins.property
    @pulumi.getter(name="natPoolPrefixLengthVariable")
    def nat_pool_prefix_length_variable(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "nat_pool_prefix_length_variable")

    @_builtins.property
    @pulumi.getter(name="natPoolRangeEnd")
    def nat_pool_range_end(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        Ending IP address of NAT pool range
        """
        return pulumi.get(self, "nat_pool_range_end")

    @_builtins.property
    @pulumi.getter(name="natPoolRangeEndVariable")
    def nat_pool_range_end_variable(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "nat_pool_range_end_variable")

    @_builtins.property
    @pulumi.getter(name="natPoolRangeStart")
    def nat_pool_range_start(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        Starting IP address of NAT pool range
        """
        return pulumi.get(self, "nat_pool_range_start")

    @_builtins.property
    @pulumi.getter(name="natPoolRangeStartVariable")
    def nat_pool_range_start_variable(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "nat_pool_range_start_variable")

    @_builtins.property
    @pulumi.getter(name="natType")
    def nat_type(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        NAT type
          - Choices: `interface`, `pool`, `loopback`
          - Default value: `interface`
        """
        return pulumi.get(self, "nat_type")

    @_builtins.property
    @pulumi.getter(name="natTypeVariable")
    def nat_type_variable(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "nat_type_variable")

    @_builtins.property
    @pulumi.getter
    def poe(self) -> pulumi.Output[Optional[_builtins.bool]]:
        """
        Configure interface as Power-over-Ethernet source
          - Default value: `false`
        """
        return pulumi.get(self, "poe")

    @_builtins.property
    @pulumi.getter(name="poeVariable")
    def poe_variable(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "poe_variable")

    @_builtins.property
    @pulumi.getter(name="propagateSgt")
    def propagate_sgt(self) -> pulumi.Output[Optional[_builtins.bool]]:
        """
        Enable/Disable CTS SGT propagation on an interface.
          - Default value: `true`
        """
        return pulumi.get(self, "propagate_sgt")

    @_builtins.property
    @pulumi.getter(name="qosAdaptiveBandwidthDownstream")
    def qos_adaptive_bandwidth_downstream(self) -> pulumi.Output[Optional[_builtins.int]]:
        """
        Adaptive QoS default downstream bandwidth
          - Range: `8`-`100000000`
        """
        return pulumi.get(self, "qos_adaptive_bandwidth_downstream")

    @_builtins.property
    @pulumi.getter(name="qosAdaptiveBandwidthDownstreamVariable")
    def qos_adaptive_bandwidth_downstream_variable(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "qos_adaptive_bandwidth_downstream_variable")

    @_builtins.property
    @pulumi.getter(name="qosAdaptiveBandwidthUpstream")
    def qos_adaptive_bandwidth_upstream(self) -> pulumi.Output[Optional[_builtins.int]]:
        """
        Adaptive QoS default upstream bandwidth
          - Range: `8`-`100000000`
        """
        return pulumi.get(self, "qos_adaptive_bandwidth_upstream")

    @_builtins.property
    @pulumi.getter(name="qosAdaptiveBandwidthUpstreamVariable")
    def qos_adaptive_bandwidth_upstream_variable(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "qos_adaptive_bandwidth_upstream_variable")

    @_builtins.property
    @pulumi.getter(name="qosAdaptiveMaxDownstream")
    def qos_adaptive_max_downstream(self) -> pulumi.Output[Optional[_builtins.int]]:
        """
        Downstream max bandwidth limit
          - Range: `8`-`100000000`
        """
        return pulumi.get(self, "qos_adaptive_max_downstream")

    @_builtins.property
    @pulumi.getter(name="qosAdaptiveMaxDownstreamVariable")
    def qos_adaptive_max_downstream_variable(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "qos_adaptive_max_downstream_variable")

    @_builtins.property
    @pulumi.getter(name="qosAdaptiveMaxUpstream")
    def qos_adaptive_max_upstream(self) -> pulumi.Output[Optional[_builtins.int]]:
        """
        Upstream max bandwidth limit
          - Range: `8`-`100000000`
        """
        return pulumi.get(self, "qos_adaptive_max_upstream")

    @_builtins.property
    @pulumi.getter(name="qosAdaptiveMaxUpstreamVariable")
    def qos_adaptive_max_upstream_variable(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "qos_adaptive_max_upstream_variable")

    @_builtins.property
    @pulumi.getter(name="qosAdaptiveMinDownstream")
    def qos_adaptive_min_downstream(self) -> pulumi.Output[Optional[_builtins.int]]:
        """
        Downstream min bandwidth limit
          - Range: `8`-`100000000`
        """
        return pulumi.get(self, "qos_adaptive_min_downstream")

    @_builtins.property
    @pulumi.getter(name="qosAdaptiveMinDownstreamVariable")
    def qos_adaptive_min_downstream_variable(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "qos_adaptive_min_downstream_variable")

    @_builtins.property
    @pulumi.getter(name="qosAdaptiveMinUpstream")
    def qos_adaptive_min_upstream(self) -> pulumi.Output[Optional[_builtins.int]]:
        """
        Upstream min bandwidth limit
          - Range: `8`-`100000000`
        """
        return pulumi.get(self, "qos_adaptive_min_upstream")

    @_builtins.property
    @pulumi.getter(name="qosAdaptiveMinUpstreamVariable")
    def qos_adaptive_min_upstream_variable(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "qos_adaptive_min_upstream_variable")

    @_builtins.property
    @pulumi.getter(name="qosAdaptivePeriod")
    def qos_adaptive_period(self) -> pulumi.Output[Optional[_builtins.int]]:
        """
        Periodic timer for adaptive QoS in minutes
          - Range: `1`-`720`
          - Default value: `15`
        """
        return pulumi.get(self, "qos_adaptive_period")

    @_builtins.property
    @pulumi.getter(name="qosAdaptivePeriodVariable")
    def qos_adaptive_period_variable(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "qos_adaptive_period_variable")

    @_builtins.property
    @pulumi.getter(name="qosMap")
    def qos_map(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        Name of QoS map
        """
        return pulumi.get(self, "qos_map")

    @_builtins.property
    @pulumi.getter(name="qosMapVariable")
    def qos_map_variable(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "qos_map_variable")

    @_builtins.property
    @pulumi.getter(name="qosMapVpn")
    def qos_map_vpn(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        Name of VPN QoS map
        """
        return pulumi.get(self, "qos_map_vpn")

    @_builtins.property
    @pulumi.getter(name="qosMapVpnVariable")
    def qos_map_vpn_variable(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "qos_map_vpn_variable")

    @_builtins.property
    @pulumi.getter(name="rewriteRuleName")
    def rewrite_rule_name(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        Name of rewrite rule
        """
        return pulumi.get(self, "rewrite_rule_name")

    @_builtins.property
    @pulumi.getter(name="rewriteRuleNameVariable")
    def rewrite_rule_name_variable(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "rewrite_rule_name_variable")

    @_builtins.property
    @pulumi.getter(name="secondaryRegion")
    def secondary_region(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        Enable secondary region
          - Choices: `off`, `secondary-only`, `secondary-shared`
          - Default value: `off`
        """
        return pulumi.get(self, "secondary_region")

    @_builtins.property
    @pulumi.getter(name="secondaryRegionVariable")
    def secondary_region_variable(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "secondary_region_variable")

    @_builtins.property
    @pulumi.getter(name="sgtEnforcement")
    def sgt_enforcement(self) -> pulumi.Output[Optional[_builtins.bool]]:
        """
        Enables the interface for CTS SGT authorization and forwarding.
          - Default value: `false`
        """
        return pulumi.get(self, "sgt_enforcement")

    @_builtins.property
    @pulumi.getter(name="sgtEnforcementSgt")
    def sgt_enforcement_sgt(self) -> pulumi.Output[Optional[_builtins.int]]:
        """
        SGT value between 2 and 65519.
          - Range: `2`-`65519`
        """
        return pulumi.get(self, "sgt_enforcement_sgt")

    @_builtins.property
    @pulumi.getter(name="sgtEnforcementSgtVariable")
    def sgt_enforcement_sgt_variable(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "sgt_enforcement_sgt_variable")

    @_builtins.property
    @pulumi.getter(name="shapingRate")
    def shaping_rate(self) -> pulumi.Output[Optional[_builtins.int]]:
        """
        1ge  interfaces: [0..1000000]kbps; 10ge interfaces: [0..10000000]kbps
          - Range: `8`-`100000000`
        """
        return pulumi.get(self, "shaping_rate")

    @_builtins.property
    @pulumi.getter(name="shapingRateVariable")
    def shaping_rate_variable(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "shaping_rate_variable")

    @_builtins.property
    @pulumi.getter
    def shutdown(self) -> pulumi.Output[Optional[_builtins.bool]]:
        """
        Administrative state
          - Default value: `true`
        """
        return pulumi.get(self, "shutdown")

    @_builtins.property
    @pulumi.getter(name="shutdownVariable")
    def shutdown_variable(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "shutdown_variable")

    @_builtins.property
    @pulumi.getter
    def speed(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        Set interface speed
          - Choices: `10`, `100`, `1000`, `2500`, `10000`
        """
        return pulumi.get(self, "speed")

    @_builtins.property
    @pulumi.getter(name="speedVariable")
    def speed_variable(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "speed_variable")

    @_builtins.property
    @pulumi.getter(name="staticArps")
    def static_arps(self) -> pulumi.Output[Optional[Sequence['outputs.CiscoVpnInterfaceFeatureTemplateStaticArp']]]:
        """
        Configure static ARP entries
        """
        return pulumi.get(self, "static_arps")

    @_builtins.property
    @pulumi.getter(name="staticNat66Entries")
    def static_nat66_entries(self) -> pulumi.Output[Optional[Sequence['outputs.CiscoVpnInterfaceFeatureTemplateStaticNat66Entry']]]:
        """
        static NAT
        """
        return pulumi.get(self, "static_nat66_entries")

    @_builtins.property
    @pulumi.getter(name="staticNatEntries")
    def static_nat_entries(self) -> pulumi.Output[Optional[Sequence['outputs.CiscoVpnInterfaceFeatureTemplateStaticNatEntry']]]:
        """
        Configure static NAT entries
        """
        return pulumi.get(self, "static_nat_entries")

    @_builtins.property
    @pulumi.getter(name="staticPortForwardEntries")
    def static_port_forward_entries(self) -> pulumi.Output[Optional[Sequence['outputs.CiscoVpnInterfaceFeatureTemplateStaticPortForwardEntry']]]:
        """
        Configure Port Forward entries
        """
        return pulumi.get(self, "static_port_forward_entries")

    @_builtins.property
    @pulumi.getter(name="staticSgt")
    def static_sgt(self) -> pulumi.Output[Optional[_builtins.int]]:
        """
        SGT value between 2 and 65519.
          - Range: `2`-`65519`
        """
        return pulumi.get(self, "static_sgt")

    @_builtins.property
    @pulumi.getter(name="staticSgtTrusted")
    def static_sgt_trusted(self) -> pulumi.Output[Optional[_builtins.bool]]:
        """
        Indicates that the interface is trustworthy for CTS.
          - Default value: `false`
        """
        return pulumi.get(self, "static_sgt_trusted")

    @_builtins.property
    @pulumi.getter(name="staticSgtVariable")
    def static_sgt_variable(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "static_sgt_variable")

    @_builtins.property
    @pulumi.getter(name="tcpMssAdjust")
    def tcp_mss_adjust(self) -> pulumi.Output[Optional[_builtins.int]]:
        """
        TCP MSS on SYN packets, in bytes
          - Range: `500`-`1460`
        """
        return pulumi.get(self, "tcp_mss_adjust")

    @_builtins.property
    @pulumi.getter(name="tcpMssAdjustVariable")
    def tcp_mss_adjust_variable(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "tcp_mss_adjust_variable")

    @_builtins.property
    @pulumi.getter(name="tcpTimeout")
    def tcp_timeout(self) -> pulumi.Output[Optional[_builtins.int]]:
        """
        Set NAT TCP session timeout, in minutes
          - Range: `1`-`8947`
          - Default value: `60`
        """
        return pulumi.get(self, "tcp_timeout")

    @_builtins.property
    @pulumi.getter(name="tcpTimeoutVariable")
    def tcp_timeout_variable(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "tcp_timeout_variable")

    @_builtins.property
    @pulumi.getter(name="templateType")
    def template_type(self) -> pulumi.Output[_builtins.str]:
        """
        The template type
        """
        return pulumi.get(self, "template_type")

    @_builtins.property
    @pulumi.getter(name="tlocExtension")
    def tloc_extension(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        Extends a local TLOC to a remote node only for vpn 0
        """
        return pulumi.get(self, "tloc_extension")

    @_builtins.property
    @pulumi.getter(name="tlocExtensionVariable")
    def tloc_extension_variable(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "tloc_extension_variable")

    @_builtins.property
    @pulumi.getter(name="trackerVariable")
    def tracker_variable(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "tracker_variable")

    @_builtins.property
    @pulumi.getter
    def trackers(self) -> pulumi.Output[Optional[Sequence[_builtins.str]]]:
        """
        Enable tracker for this interface
        """
        return pulumi.get(self, "trackers")

    @_builtins.property
    @pulumi.getter(name="tunnelBandwidth")
    def tunnel_bandwidth(self) -> pulumi.Output[Optional[_builtins.int]]:
        """
        Tunnels Bandwidth Percent
          - Range: `1`-`99`
          - Default value: `50`
        """
        return pulumi.get(self, "tunnel_bandwidth")

    @_builtins.property
    @pulumi.getter(name="tunnelBandwidthVariable")
    def tunnel_bandwidth_variable(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "tunnel_bandwidth_variable")

    @_builtins.property
    @pulumi.getter(name="tunnelInterfaceAllowAll")
    def tunnel_interface_allow_all(self) -> pulumi.Output[Optional[_builtins.bool]]:
        """
        Allow all traffic. Overrides all other allow-service options if allow-service all is set
          - Default value: `false`
        """
        return pulumi.get(self, "tunnel_interface_allow_all")

    @_builtins.property
    @pulumi.getter(name="tunnelInterfaceAllowAllVariable")
    def tunnel_interface_allow_all_variable(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "tunnel_interface_allow_all_variable")

    @_builtins.property
    @pulumi.getter(name="tunnelInterfaceAllowBgp")
    def tunnel_interface_allow_bgp(self) -> pulumi.Output[Optional[_builtins.bool]]:
        """
        Allow/deny BGP
          - Default value: `false`
        """
        return pulumi.get(self, "tunnel_interface_allow_bgp")

    @_builtins.property
    @pulumi.getter(name="tunnelInterfaceAllowBgpVariable")
    def tunnel_interface_allow_bgp_variable(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "tunnel_interface_allow_bgp_variable")

    @_builtins.property
    @pulumi.getter(name="tunnelInterfaceAllowDhcp")
    def tunnel_interface_allow_dhcp(self) -> pulumi.Output[Optional[_builtins.bool]]:
        """
        Allow/Deny DHCP
          - Default value: `true`
        """
        return pulumi.get(self, "tunnel_interface_allow_dhcp")

    @_builtins.property
    @pulumi.getter(name="tunnelInterfaceAllowDhcpVariable")
    def tunnel_interface_allow_dhcp_variable(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "tunnel_interface_allow_dhcp_variable")

    @_builtins.property
    @pulumi.getter(name="tunnelInterfaceAllowDns")
    def tunnel_interface_allow_dns(self) -> pulumi.Output[Optional[_builtins.bool]]:
        """
        Allow/Deny DNS
          - Default value: `true`
        """
        return pulumi.get(self, "tunnel_interface_allow_dns")

    @_builtins.property
    @pulumi.getter(name="tunnelInterfaceAllowDnsVariable")
    def tunnel_interface_allow_dns_variable(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "tunnel_interface_allow_dns_variable")

    @_builtins.property
    @pulumi.getter(name="tunnelInterfaceAllowHttps")
    def tunnel_interface_allow_https(self) -> pulumi.Output[Optional[_builtins.bool]]:
        """
        Allow/Deny Https
          - Default value: `true`
        """
        return pulumi.get(self, "tunnel_interface_allow_https")

    @_builtins.property
    @pulumi.getter(name="tunnelInterfaceAllowHttpsVariable")
    def tunnel_interface_allow_https_variable(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "tunnel_interface_allow_https_variable")

    @_builtins.property
    @pulumi.getter(name="tunnelInterfaceAllowIcmp")
    def tunnel_interface_allow_icmp(self) -> pulumi.Output[Optional[_builtins.bool]]:
        """
        Allow/Deny ICMP
          - Default value: `true`
        """
        return pulumi.get(self, "tunnel_interface_allow_icmp")

    @_builtins.property
    @pulumi.getter(name="tunnelInterfaceAllowIcmpVariable")
    def tunnel_interface_allow_icmp_variable(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "tunnel_interface_allow_icmp_variable")

    @_builtins.property
    @pulumi.getter(name="tunnelInterfaceAllowNetconf")
    def tunnel_interface_allow_netconf(self) -> pulumi.Output[Optional[_builtins.bool]]:
        """
        Allow/Deny NETCONF
          - Default value: `false`
        """
        return pulumi.get(self, "tunnel_interface_allow_netconf")

    @_builtins.property
    @pulumi.getter(name="tunnelInterfaceAllowNetconfVariable")
    def tunnel_interface_allow_netconf_variable(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "tunnel_interface_allow_netconf_variable")

    @_builtins.property
    @pulumi.getter(name="tunnelInterfaceAllowNtp")
    def tunnel_interface_allow_ntp(self) -> pulumi.Output[Optional[_builtins.bool]]:
        """
        Allow/Deny NTP
          - Default value: `false`
        """
        return pulumi.get(self, "tunnel_interface_allow_ntp")

    @_builtins.property
    @pulumi.getter(name="tunnelInterfaceAllowNtpVariable")
    def tunnel_interface_allow_ntp_variable(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "tunnel_interface_allow_ntp_variable")

    @_builtins.property
    @pulumi.getter(name="tunnelInterfaceAllowOspf")
    def tunnel_interface_allow_ospf(self) -> pulumi.Output[Optional[_builtins.bool]]:
        """
        Allow/Deny OSPF
          - Default value: `false`
        """
        return pulumi.get(self, "tunnel_interface_allow_ospf")

    @_builtins.property
    @pulumi.getter(name="tunnelInterfaceAllowOspfVariable")
    def tunnel_interface_allow_ospf_variable(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "tunnel_interface_allow_ospf_variable")

    @_builtins.property
    @pulumi.getter(name="tunnelInterfaceAllowSnmp")
    def tunnel_interface_allow_snmp(self) -> pulumi.Output[Optional[_builtins.bool]]:
        """
        Allow/Deny SNMP
          - Default value: `false`
        """
        return pulumi.get(self, "tunnel_interface_allow_snmp")

    @_builtins.property
    @pulumi.getter(name="tunnelInterfaceAllowSnmpVariable")
    def tunnel_interface_allow_snmp_variable(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "tunnel_interface_allow_snmp_variable")

    @_builtins.property
    @pulumi.getter(name="tunnelInterfaceAllowSsh")
    def tunnel_interface_allow_ssh(self) -> pulumi.Output[Optional[_builtins.bool]]:
        """
        Allow/Deny SSH
          - Default value: `false`
        """
        return pulumi.get(self, "tunnel_interface_allow_ssh")

    @_builtins.property
    @pulumi.getter(name="tunnelInterfaceAllowSshVariable")
    def tunnel_interface_allow_ssh_variable(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "tunnel_interface_allow_ssh_variable")

    @_builtins.property
    @pulumi.getter(name="tunnelInterfaceAllowStun")
    def tunnel_interface_allow_stun(self) -> pulumi.Output[Optional[_builtins.bool]]:
        """
        Allow/Deny STUN
          - Default value: `false`
        """
        return pulumi.get(self, "tunnel_interface_allow_stun")

    @_builtins.property
    @pulumi.getter(name="tunnelInterfaceAllowStunVariable")
    def tunnel_interface_allow_stun_variable(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "tunnel_interface_allow_stun_variable")

    @_builtins.property
    @pulumi.getter(name="tunnelInterfaceBindLoopbackTunnel")
    def tunnel_interface_bind_loopback_tunnel(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        Bind loopback tunnel interface to a physical interface
        """
        return pulumi.get(self, "tunnel_interface_bind_loopback_tunnel")

    @_builtins.property
    @pulumi.getter(name="tunnelInterfaceBindLoopbackTunnelVariable")
    def tunnel_interface_bind_loopback_tunnel_variable(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "tunnel_interface_bind_loopback_tunnel_variable")

    @_builtins.property
    @pulumi.getter(name="tunnelInterfaceBorder")
    def tunnel_interface_border(self) -> pulumi.Output[Optional[_builtins.bool]]:
        """
        Set TLOC as border TLOC
          - Default value: `false`
        """
        return pulumi.get(self, "tunnel_interface_border")

    @_builtins.property
    @pulumi.getter(name="tunnelInterfaceBorderVariable")
    def tunnel_interface_border_variable(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "tunnel_interface_border_variable")

    @_builtins.property
    @pulumi.getter(name="tunnelInterfaceCarrier")
    def tunnel_interface_carrier(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        Set carrier for TLOC
          - Choices: `default`, `carrier1`, `carrier2`, `carrier3`, `carrier4`, `carrier5`, `carrier6`, `carrier7`, `carrier8`
          - Default value: `default`
        """
        return pulumi.get(self, "tunnel_interface_carrier")

    @_builtins.property
    @pulumi.getter(name="tunnelInterfaceCarrierVariable")
    def tunnel_interface_carrier_variable(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "tunnel_interface_carrier_variable")

    @_builtins.property
    @pulumi.getter(name="tunnelInterfaceClearDontFragment")
    def tunnel_interface_clear_dont_fragment(self) -> pulumi.Output[Optional[_builtins.bool]]:
        """
        Enable clear dont fragment (Currently Only SDWAN Tunnel Interface)
          - Default value: `false`
        """
        return pulumi.get(self, "tunnel_interface_clear_dont_fragment")

    @_builtins.property
    @pulumi.getter(name="tunnelInterfaceClearDontFragmentVariable")
    def tunnel_interface_clear_dont_fragment_variable(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "tunnel_interface_clear_dont_fragment_variable")

    @_builtins.property
    @pulumi.getter(name="tunnelInterfaceColor")
    def tunnel_interface_color(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        Set color for TLOC
          - Choices: `default`, `mpls`, `metro-ethernet`, `biz-internet`, `public-internet`, `lte`, `3g`, `red`, `green`, `blue`, `gold`, `silver`, `bronze`, `custom1`, `custom2`, `custom3`, `private1`, `private2`, `private3`, `private4`, `private5`, `private6`
          - Default value: `default`
        """
        return pulumi.get(self, "tunnel_interface_color")

    @_builtins.property
    @pulumi.getter(name="tunnelInterfaceColorRestrict")
    def tunnel_interface_color_restrict(self) -> pulumi.Output[Optional[_builtins.bool]]:
        """
        Restrict this TLOC behavior
          - Default value: `false`
        """
        return pulumi.get(self, "tunnel_interface_color_restrict")

    @_builtins.property
    @pulumi.getter(name="tunnelInterfaceColorRestrictVariable")
    def tunnel_interface_color_restrict_variable(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "tunnel_interface_color_restrict_variable")

    @_builtins.property
    @pulumi.getter(name="tunnelInterfaceColorVariable")
    def tunnel_interface_color_variable(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "tunnel_interface_color_variable")

    @_builtins.property
    @pulumi.getter(name="tunnelInterfaceControlConnections")
    def tunnel_interface_control_connections(self) -> pulumi.Output[Optional[_builtins.bool]]:
        """
        Allow Control Connection
          - Default value: `true`
        """
        return pulumi.get(self, "tunnel_interface_control_connections")

    @_builtins.property
    @pulumi.getter(name="tunnelInterfaceControlConnectionsVariable")
    def tunnel_interface_control_connections_variable(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "tunnel_interface_control_connections_variable")

    @_builtins.property
    @pulumi.getter(name="tunnelInterfaceEncapsulations")
    def tunnel_interface_encapsulations(self) -> pulumi.Output[Optional[Sequence['outputs.CiscoVpnInterfaceFeatureTemplateTunnelInterfaceEncapsulation']]]:
        """
        Encapsulation for TLOC
        """
        return pulumi.get(self, "tunnel_interface_encapsulations")

    @_builtins.property
    @pulumi.getter(name="tunnelInterfaceExcludeControllerGroupListVariable")
    def tunnel_interface_exclude_controller_group_list_variable(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "tunnel_interface_exclude_controller_group_list_variable")

    @_builtins.property
    @pulumi.getter(name="tunnelInterfaceExcludeControllerGroupLists")
    def tunnel_interface_exclude_controller_group_lists(self) -> pulumi.Output[Optional[Sequence[_builtins.int]]]:
        """
        Exclude the following controller groups defined in this list
        """
        return pulumi.get(self, "tunnel_interface_exclude_controller_group_lists")

    @_builtins.property
    @pulumi.getter(name="tunnelInterfaceGreTunnelDestinationIp")
    def tunnel_interface_gre_tunnel_destination_ip(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        Extend the TLOC to a remote node over GRE tunnel
        """
        return pulumi.get(self, "tunnel_interface_gre_tunnel_destination_ip")

    @_builtins.property
    @pulumi.getter(name="tunnelInterfaceGreTunnelDestinationIpVariable")
    def tunnel_interface_gre_tunnel_destination_ip_variable(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "tunnel_interface_gre_tunnel_destination_ip_variable")

    @_builtins.property
    @pulumi.getter(name="tunnelInterfaceGroups")
    def tunnel_interface_groups(self) -> pulumi.Output[Optional[Sequence[_builtins.int]]]:
        """
        List of groups
        """
        return pulumi.get(self, "tunnel_interface_groups")

    @_builtins.property
    @pulumi.getter(name="tunnelInterfaceGroupsVariable")
    def tunnel_interface_groups_variable(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "tunnel_interface_groups_variable")

    @_builtins.property
    @pulumi.getter(name="tunnelInterfaceHelloInterval")
    def tunnel_interface_hello_interval(self) -> pulumi.Output[Optional[_builtins.int]]:
        """
        Set time period of control hello packets <100..600000> milli seconds
          - Range: `100`-`600000`
          - Default value: `1000`
        """
        return pulumi.get(self, "tunnel_interface_hello_interval")

    @_builtins.property
    @pulumi.getter(name="tunnelInterfaceHelloIntervalVariable")
    def tunnel_interface_hello_interval_variable(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "tunnel_interface_hello_interval_variable")

    @_builtins.property
    @pulumi.getter(name="tunnelInterfaceHelloTolerance")
    def tunnel_interface_hello_tolerance(self) -> pulumi.Output[Optional[_builtins.int]]:
        """
        Set tolerance of control hello packets <12..6000> seconds
          - Range: `12`-`6000`
          - Default value: `12`
        """
        return pulumi.get(self, "tunnel_interface_hello_tolerance")

    @_builtins.property
    @pulumi.getter(name="tunnelInterfaceHelloToleranceVariable")
    def tunnel_interface_hello_tolerance_variable(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "tunnel_interface_hello_tolerance_variable")

    @_builtins.property
    @pulumi.getter(name="tunnelInterfaceLastResortCircuit")
    def tunnel_interface_last_resort_circuit(self) -> pulumi.Output[Optional[_builtins.bool]]:
        """
        Set TLOC as last resort
          - Default value: `false`
        """
        return pulumi.get(self, "tunnel_interface_last_resort_circuit")

    @_builtins.property
    @pulumi.getter(name="tunnelInterfaceLastResortCircuitVariable")
    def tunnel_interface_last_resort_circuit_variable(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "tunnel_interface_last_resort_circuit_variable")

    @_builtins.property
    @pulumi.getter(name="tunnelInterfaceLowBandwidthLink")
    def tunnel_interface_low_bandwidth_link(self) -> pulumi.Output[Optional[_builtins.bool]]:
        """
        Set the interface as a low-bandwidth circuit
          - Default value: `false`
        """
        return pulumi.get(self, "tunnel_interface_low_bandwidth_link")

    @_builtins.property
    @pulumi.getter(name="tunnelInterfaceLowBandwidthLinkVariable")
    def tunnel_interface_low_bandwidth_link_variable(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "tunnel_interface_low_bandwidth_link_variable")

    @_builtins.property
    @pulumi.getter(name="tunnelInterfaceMaxControlConnections")
    def tunnel_interface_max_control_connections(self) -> pulumi.Output[Optional[_builtins.int]]:
        """
        Set the maximum number of control connections for this TLOC
          - Range: `0`-`100`
        """
        return pulumi.get(self, "tunnel_interface_max_control_connections")

    @_builtins.property
    @pulumi.getter(name="tunnelInterfaceMaxControlConnectionsVariable")
    def tunnel_interface_max_control_connections_variable(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "tunnel_interface_max_control_connections_variable")

    @_builtins.property
    @pulumi.getter(name="tunnelInterfaceNatRefreshInterval")
    def tunnel_interface_nat_refresh_interval(self) -> pulumi.Output[Optional[_builtins.int]]:
        """
        Set time period of nat refresh packets <1...60> seconds
          - Range: `1`-`60`
          - Default value: `5`
        """
        return pulumi.get(self, "tunnel_interface_nat_refresh_interval")

    @_builtins.property
    @pulumi.getter(name="tunnelInterfaceNatRefreshIntervalVariable")
    def tunnel_interface_nat_refresh_interval_variable(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "tunnel_interface_nat_refresh_interval_variable")

    @_builtins.property
    @pulumi.getter(name="tunnelInterfaceNetworkBroadcast")
    def tunnel_interface_network_broadcast(self) -> pulumi.Output[Optional[_builtins.bool]]:
        """
        Accept and respond to network-prefix-directed broadcasts)
          - Default value: `false`
        """
        return pulumi.get(self, "tunnel_interface_network_broadcast")

    @_builtins.property
    @pulumi.getter(name="tunnelInterfaceNetworkBroadcastVariable")
    def tunnel_interface_network_broadcast_variable(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "tunnel_interface_network_broadcast_variable")

    @_builtins.property
    @pulumi.getter(name="tunnelInterfacePortHop")
    def tunnel_interface_port_hop(self) -> pulumi.Output[Optional[_builtins.bool]]:
        """
        Disallow port hopping on the tunnel interface
          - Default value: `true`
        """
        return pulumi.get(self, "tunnel_interface_port_hop")

    @_builtins.property
    @pulumi.getter(name="tunnelInterfacePortHopVariable")
    def tunnel_interface_port_hop_variable(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "tunnel_interface_port_hop_variable")

    @_builtins.property
    @pulumi.getter(name="tunnelInterfacePropagateSgt")
    def tunnel_interface_propagate_sgt(self) -> pulumi.Output[Optional[_builtins.bool]]:
        """
        CTS SGT Propagation configuration
          - Default value: `false`
        """
        return pulumi.get(self, "tunnel_interface_propagate_sgt")

    @_builtins.property
    @pulumi.getter(name="tunnelInterfacePropagateSgtVariable")
    def tunnel_interface_propagate_sgt_variable(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "tunnel_interface_propagate_sgt_variable")

    @_builtins.property
    @pulumi.getter(name="tunnelInterfaceTunnelTcpMss")
    def tunnel_interface_tunnel_tcp_mss(self) -> pulumi.Output[Optional[_builtins.int]]:
        """
        Tunnel TCP MSS on SYN packets, in bytes
          - Range: `500`-`1460`
        """
        return pulumi.get(self, "tunnel_interface_tunnel_tcp_mss")

    @_builtins.property
    @pulumi.getter(name="tunnelInterfaceTunnelTcpMssVariable")
    def tunnel_interface_tunnel_tcp_mss_variable(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "tunnel_interface_tunnel_tcp_mss_variable")

    @_builtins.property
    @pulumi.getter(name="tunnelInterfaceVbondAsStunServer")
    def tunnel_interface_vbond_as_stun_server(self) -> pulumi.Output[Optional[_builtins.bool]]:
        """
        Put this wan interface in STUN mode only
          - Default value: `false`
        """
        return pulumi.get(self, "tunnel_interface_vbond_as_stun_server")

    @_builtins.property
    @pulumi.getter(name="tunnelInterfaceVbondAsStunServerVariable")
    def tunnel_interface_vbond_as_stun_server_variable(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "tunnel_interface_vbond_as_stun_server_variable")

    @_builtins.property
    @pulumi.getter(name="tunnelInterfaceVmanageConnectionPreference")
    def tunnel_interface_vmanage_connection_preference(self) -> pulumi.Output[Optional[_builtins.int]]:
        """
        Set interface preference for control connection to vManage <0..8>
          - Range: `0`-`8`
          - Default value: `5`
        """
        return pulumi.get(self, "tunnel_interface_vmanage_connection_preference")

    @_builtins.property
    @pulumi.getter(name="tunnelInterfaceVmanageConnectionPreferenceVariable")
    def tunnel_interface_vmanage_connection_preference_variable(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "tunnel_interface_vmanage_connection_preference_variable")

    @_builtins.property
    @pulumi.getter(name="tunnelQosMode")
    def tunnel_qos_mode(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        Set tunnel QoS mode
          - Choices: `hub`, `spoke`
        """
        return pulumi.get(self, "tunnel_qos_mode")

    @_builtins.property
    @pulumi.getter(name="tunnelQosModeVariable")
    def tunnel_qos_mode_variable(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "tunnel_qos_mode_variable")

    @_builtins.property
    @pulumi.getter(name="udpTimeout")
    def udp_timeout(self) -> pulumi.Output[Optional[_builtins.int]]:
        """
        Set NAT UDP session timeout, in minutes
          - Range: `1`-`8947`
          - Default value: `1`
        """
        return pulumi.get(self, "udp_timeout")

    @_builtins.property
    @pulumi.getter(name="udpTimeoutVariable")
    def udp_timeout_variable(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "udp_timeout_variable")

    @_builtins.property
    @pulumi.getter
    def version(self) -> pulumi.Output[_builtins.int]:
        """
        The version of the feature template
        """
        return pulumi.get(self, "version")

