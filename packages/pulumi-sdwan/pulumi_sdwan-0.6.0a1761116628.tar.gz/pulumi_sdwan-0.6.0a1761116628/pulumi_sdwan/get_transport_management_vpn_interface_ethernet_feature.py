# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities
from . import outputs

__all__ = [
    'GetTransportManagementVpnInterfaceEthernetFeatureResult',
    'AwaitableGetTransportManagementVpnInterfaceEthernetFeatureResult',
    'get_transport_management_vpn_interface_ethernet_feature',
    'get_transport_management_vpn_interface_ethernet_feature_output',
]

@pulumi.output_type
class GetTransportManagementVpnInterfaceEthernetFeatureResult:
    """
    A collection of values returned by getTransportManagementVpnInterfaceEthernetFeature.
    """
    def __init__(__self__, arp_entries=None, arp_timeout=None, arp_timeout_variable=None, autonegotiate=None, autonegotiate_variable=None, description=None, duplex=None, duplex_variable=None, enable_dhcpv6=None, feature_profile_id=None, icmp_redirect_disable=None, icmp_redirect_disable_variable=None, id=None, interface_description=None, interface_description_variable=None, interface_mtu=None, interface_mtu_variable=None, interface_name=None, interface_name_variable=None, ip_directed_broadcast=None, ip_directed_broadcast_variable=None, ip_mtu=None, ip_mtu_variable=None, ipv4_address=None, ipv4_address_variable=None, ipv4_auto_detect_bandwidth=None, ipv4_auto_detect_bandwidth_variable=None, ipv4_configuration_type=None, ipv4_dhcp_distance=None, ipv4_dhcp_distance_variable=None, ipv4_dhcp_helper_variable=None, ipv4_dhcp_helpers=None, ipv4_iperf_server=None, ipv4_iperf_server_variable=None, ipv4_secondary_addresses=None, ipv4_subnet_mask=None, ipv4_subnet_mask_variable=None, ipv6_address=None, ipv6_address_variable=None, ipv6_configuration_type=None, load_interval=None, load_interval_variable=None, mac_address=None, mac_address_variable=None, media_type=None, media_type_variable=None, name=None, shutdown=None, shutdown_variable=None, speed=None, speed_variable=None, tcp_mss=None, tcp_mss_variable=None, transport_management_vpn_feature_id=None, version=None):
        if arp_entries and not isinstance(arp_entries, list):
            raise TypeError("Expected argument 'arp_entries' to be a list")
        pulumi.set(__self__, "arp_entries", arp_entries)
        if arp_timeout and not isinstance(arp_timeout, int):
            raise TypeError("Expected argument 'arp_timeout' to be a int")
        pulumi.set(__self__, "arp_timeout", arp_timeout)
        if arp_timeout_variable and not isinstance(arp_timeout_variable, str):
            raise TypeError("Expected argument 'arp_timeout_variable' to be a str")
        pulumi.set(__self__, "arp_timeout_variable", arp_timeout_variable)
        if autonegotiate and not isinstance(autonegotiate, bool):
            raise TypeError("Expected argument 'autonegotiate' to be a bool")
        pulumi.set(__self__, "autonegotiate", autonegotiate)
        if autonegotiate_variable and not isinstance(autonegotiate_variable, str):
            raise TypeError("Expected argument 'autonegotiate_variable' to be a str")
        pulumi.set(__self__, "autonegotiate_variable", autonegotiate_variable)
        if description and not isinstance(description, str):
            raise TypeError("Expected argument 'description' to be a str")
        pulumi.set(__self__, "description", description)
        if duplex and not isinstance(duplex, str):
            raise TypeError("Expected argument 'duplex' to be a str")
        pulumi.set(__self__, "duplex", duplex)
        if duplex_variable and not isinstance(duplex_variable, str):
            raise TypeError("Expected argument 'duplex_variable' to be a str")
        pulumi.set(__self__, "duplex_variable", duplex_variable)
        if enable_dhcpv6 and not isinstance(enable_dhcpv6, bool):
            raise TypeError("Expected argument 'enable_dhcpv6' to be a bool")
        pulumi.set(__self__, "enable_dhcpv6", enable_dhcpv6)
        if feature_profile_id and not isinstance(feature_profile_id, str):
            raise TypeError("Expected argument 'feature_profile_id' to be a str")
        pulumi.set(__self__, "feature_profile_id", feature_profile_id)
        if icmp_redirect_disable and not isinstance(icmp_redirect_disable, bool):
            raise TypeError("Expected argument 'icmp_redirect_disable' to be a bool")
        pulumi.set(__self__, "icmp_redirect_disable", icmp_redirect_disable)
        if icmp_redirect_disable_variable and not isinstance(icmp_redirect_disable_variable, str):
            raise TypeError("Expected argument 'icmp_redirect_disable_variable' to be a str")
        pulumi.set(__self__, "icmp_redirect_disable_variable", icmp_redirect_disable_variable)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if interface_description and not isinstance(interface_description, str):
            raise TypeError("Expected argument 'interface_description' to be a str")
        pulumi.set(__self__, "interface_description", interface_description)
        if interface_description_variable and not isinstance(interface_description_variable, str):
            raise TypeError("Expected argument 'interface_description_variable' to be a str")
        pulumi.set(__self__, "interface_description_variable", interface_description_variable)
        if interface_mtu and not isinstance(interface_mtu, int):
            raise TypeError("Expected argument 'interface_mtu' to be a int")
        pulumi.set(__self__, "interface_mtu", interface_mtu)
        if interface_mtu_variable and not isinstance(interface_mtu_variable, str):
            raise TypeError("Expected argument 'interface_mtu_variable' to be a str")
        pulumi.set(__self__, "interface_mtu_variable", interface_mtu_variable)
        if interface_name and not isinstance(interface_name, str):
            raise TypeError("Expected argument 'interface_name' to be a str")
        pulumi.set(__self__, "interface_name", interface_name)
        if interface_name_variable and not isinstance(interface_name_variable, str):
            raise TypeError("Expected argument 'interface_name_variable' to be a str")
        pulumi.set(__self__, "interface_name_variable", interface_name_variable)
        if ip_directed_broadcast and not isinstance(ip_directed_broadcast, bool):
            raise TypeError("Expected argument 'ip_directed_broadcast' to be a bool")
        pulumi.set(__self__, "ip_directed_broadcast", ip_directed_broadcast)
        if ip_directed_broadcast_variable and not isinstance(ip_directed_broadcast_variable, str):
            raise TypeError("Expected argument 'ip_directed_broadcast_variable' to be a str")
        pulumi.set(__self__, "ip_directed_broadcast_variable", ip_directed_broadcast_variable)
        if ip_mtu and not isinstance(ip_mtu, int):
            raise TypeError("Expected argument 'ip_mtu' to be a int")
        pulumi.set(__self__, "ip_mtu", ip_mtu)
        if ip_mtu_variable and not isinstance(ip_mtu_variable, str):
            raise TypeError("Expected argument 'ip_mtu_variable' to be a str")
        pulumi.set(__self__, "ip_mtu_variable", ip_mtu_variable)
        if ipv4_address and not isinstance(ipv4_address, str):
            raise TypeError("Expected argument 'ipv4_address' to be a str")
        pulumi.set(__self__, "ipv4_address", ipv4_address)
        if ipv4_address_variable and not isinstance(ipv4_address_variable, str):
            raise TypeError("Expected argument 'ipv4_address_variable' to be a str")
        pulumi.set(__self__, "ipv4_address_variable", ipv4_address_variable)
        if ipv4_auto_detect_bandwidth and not isinstance(ipv4_auto_detect_bandwidth, bool):
            raise TypeError("Expected argument 'ipv4_auto_detect_bandwidth' to be a bool")
        pulumi.set(__self__, "ipv4_auto_detect_bandwidth", ipv4_auto_detect_bandwidth)
        if ipv4_auto_detect_bandwidth_variable and not isinstance(ipv4_auto_detect_bandwidth_variable, str):
            raise TypeError("Expected argument 'ipv4_auto_detect_bandwidth_variable' to be a str")
        pulumi.set(__self__, "ipv4_auto_detect_bandwidth_variable", ipv4_auto_detect_bandwidth_variable)
        if ipv4_configuration_type and not isinstance(ipv4_configuration_type, str):
            raise TypeError("Expected argument 'ipv4_configuration_type' to be a str")
        pulumi.set(__self__, "ipv4_configuration_type", ipv4_configuration_type)
        if ipv4_dhcp_distance and not isinstance(ipv4_dhcp_distance, int):
            raise TypeError("Expected argument 'ipv4_dhcp_distance' to be a int")
        pulumi.set(__self__, "ipv4_dhcp_distance", ipv4_dhcp_distance)
        if ipv4_dhcp_distance_variable and not isinstance(ipv4_dhcp_distance_variable, str):
            raise TypeError("Expected argument 'ipv4_dhcp_distance_variable' to be a str")
        pulumi.set(__self__, "ipv4_dhcp_distance_variable", ipv4_dhcp_distance_variable)
        if ipv4_dhcp_helper_variable and not isinstance(ipv4_dhcp_helper_variable, str):
            raise TypeError("Expected argument 'ipv4_dhcp_helper_variable' to be a str")
        pulumi.set(__self__, "ipv4_dhcp_helper_variable", ipv4_dhcp_helper_variable)
        if ipv4_dhcp_helpers and not isinstance(ipv4_dhcp_helpers, list):
            raise TypeError("Expected argument 'ipv4_dhcp_helpers' to be a list")
        pulumi.set(__self__, "ipv4_dhcp_helpers", ipv4_dhcp_helpers)
        if ipv4_iperf_server and not isinstance(ipv4_iperf_server, str):
            raise TypeError("Expected argument 'ipv4_iperf_server' to be a str")
        pulumi.set(__self__, "ipv4_iperf_server", ipv4_iperf_server)
        if ipv4_iperf_server_variable and not isinstance(ipv4_iperf_server_variable, str):
            raise TypeError("Expected argument 'ipv4_iperf_server_variable' to be a str")
        pulumi.set(__self__, "ipv4_iperf_server_variable", ipv4_iperf_server_variable)
        if ipv4_secondary_addresses and not isinstance(ipv4_secondary_addresses, list):
            raise TypeError("Expected argument 'ipv4_secondary_addresses' to be a list")
        pulumi.set(__self__, "ipv4_secondary_addresses", ipv4_secondary_addresses)
        if ipv4_subnet_mask and not isinstance(ipv4_subnet_mask, str):
            raise TypeError("Expected argument 'ipv4_subnet_mask' to be a str")
        pulumi.set(__self__, "ipv4_subnet_mask", ipv4_subnet_mask)
        if ipv4_subnet_mask_variable and not isinstance(ipv4_subnet_mask_variable, str):
            raise TypeError("Expected argument 'ipv4_subnet_mask_variable' to be a str")
        pulumi.set(__self__, "ipv4_subnet_mask_variable", ipv4_subnet_mask_variable)
        if ipv6_address and not isinstance(ipv6_address, str):
            raise TypeError("Expected argument 'ipv6_address' to be a str")
        pulumi.set(__self__, "ipv6_address", ipv6_address)
        if ipv6_address_variable and not isinstance(ipv6_address_variable, str):
            raise TypeError("Expected argument 'ipv6_address_variable' to be a str")
        pulumi.set(__self__, "ipv6_address_variable", ipv6_address_variable)
        if ipv6_configuration_type and not isinstance(ipv6_configuration_type, str):
            raise TypeError("Expected argument 'ipv6_configuration_type' to be a str")
        pulumi.set(__self__, "ipv6_configuration_type", ipv6_configuration_type)
        if load_interval and not isinstance(load_interval, int):
            raise TypeError("Expected argument 'load_interval' to be a int")
        pulumi.set(__self__, "load_interval", load_interval)
        if load_interval_variable and not isinstance(load_interval_variable, str):
            raise TypeError("Expected argument 'load_interval_variable' to be a str")
        pulumi.set(__self__, "load_interval_variable", load_interval_variable)
        if mac_address and not isinstance(mac_address, str):
            raise TypeError("Expected argument 'mac_address' to be a str")
        pulumi.set(__self__, "mac_address", mac_address)
        if mac_address_variable and not isinstance(mac_address_variable, str):
            raise TypeError("Expected argument 'mac_address_variable' to be a str")
        pulumi.set(__self__, "mac_address_variable", mac_address_variable)
        if media_type and not isinstance(media_type, str):
            raise TypeError("Expected argument 'media_type' to be a str")
        pulumi.set(__self__, "media_type", media_type)
        if media_type_variable and not isinstance(media_type_variable, str):
            raise TypeError("Expected argument 'media_type_variable' to be a str")
        pulumi.set(__self__, "media_type_variable", media_type_variable)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)
        if shutdown and not isinstance(shutdown, bool):
            raise TypeError("Expected argument 'shutdown' to be a bool")
        pulumi.set(__self__, "shutdown", shutdown)
        if shutdown_variable and not isinstance(shutdown_variable, str):
            raise TypeError("Expected argument 'shutdown_variable' to be a str")
        pulumi.set(__self__, "shutdown_variable", shutdown_variable)
        if speed and not isinstance(speed, str):
            raise TypeError("Expected argument 'speed' to be a str")
        pulumi.set(__self__, "speed", speed)
        if speed_variable and not isinstance(speed_variable, str):
            raise TypeError("Expected argument 'speed_variable' to be a str")
        pulumi.set(__self__, "speed_variable", speed_variable)
        if tcp_mss and not isinstance(tcp_mss, int):
            raise TypeError("Expected argument 'tcp_mss' to be a int")
        pulumi.set(__self__, "tcp_mss", tcp_mss)
        if tcp_mss_variable and not isinstance(tcp_mss_variable, str):
            raise TypeError("Expected argument 'tcp_mss_variable' to be a str")
        pulumi.set(__self__, "tcp_mss_variable", tcp_mss_variable)
        if transport_management_vpn_feature_id and not isinstance(transport_management_vpn_feature_id, str):
            raise TypeError("Expected argument 'transport_management_vpn_feature_id' to be a str")
        pulumi.set(__self__, "transport_management_vpn_feature_id", transport_management_vpn_feature_id)
        if version and not isinstance(version, int):
            raise TypeError("Expected argument 'version' to be a int")
        pulumi.set(__self__, "version", version)

    @_builtins.property
    @pulumi.getter(name="arpEntries")
    def arp_entries(self) -> Sequence['outputs.GetTransportManagementVpnInterfaceEthernetFeatureArpEntryResult']:
        """
        Configure ARP entries
        """
        return pulumi.get(self, "arp_entries")

    @_builtins.property
    @pulumi.getter(name="arpTimeout")
    def arp_timeout(self) -> _builtins.int:
        """
        Timeout value for dynamically learned ARP entries, \\n\\n seconds
        """
        return pulumi.get(self, "arp_timeout")

    @_builtins.property
    @pulumi.getter(name="arpTimeoutVariable")
    def arp_timeout_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "arp_timeout_variable")

    @_builtins.property
    @pulumi.getter
    def autonegotiate(self) -> _builtins.bool:
        """
        Link autonegotiation
        """
        return pulumi.get(self, "autonegotiate")

    @_builtins.property
    @pulumi.getter(name="autonegotiateVariable")
    def autonegotiate_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "autonegotiate_variable")

    @_builtins.property
    @pulumi.getter
    def description(self) -> _builtins.str:
        """
        The description of the Feature
        """
        return pulumi.get(self, "description")

    @_builtins.property
    @pulumi.getter
    def duplex(self) -> _builtins.str:
        """
        Duplex mode
        """
        return pulumi.get(self, "duplex")

    @_builtins.property
    @pulumi.getter(name="duplexVariable")
    def duplex_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "duplex_variable")

    @_builtins.property
    @pulumi.getter(name="enableDhcpv6")
    def enable_dhcpv6(self) -> _builtins.bool:
        """
        Enable DHCPv6
        """
        return pulumi.get(self, "enable_dhcpv6")

    @_builtins.property
    @pulumi.getter(name="featureProfileId")
    def feature_profile_id(self) -> _builtins.str:
        """
        Feature Profile ID
        """
        return pulumi.get(self, "feature_profile_id")

    @_builtins.property
    @pulumi.getter(name="icmpRedirectDisable")
    def icmp_redirect_disable(self) -> _builtins.bool:
        """
        ICMP/ICMPv6 Redirect Disable
        """
        return pulumi.get(self, "icmp_redirect_disable")

    @_builtins.property
    @pulumi.getter(name="icmpRedirectDisableVariable")
    def icmp_redirect_disable_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "icmp_redirect_disable_variable")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        The id of the Feature
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter(name="interfaceDescription")
    def interface_description(self) -> _builtins.str:
        return pulumi.get(self, "interface_description")

    @_builtins.property
    @pulumi.getter(name="interfaceDescriptionVariable")
    def interface_description_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "interface_description_variable")

    @_builtins.property
    @pulumi.getter(name="interfaceMtu")
    def interface_mtu(self) -> _builtins.int:
        """
        Interface MTU
        """
        return pulumi.get(self, "interface_mtu")

    @_builtins.property
    @pulumi.getter(name="interfaceMtuVariable")
    def interface_mtu_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "interface_mtu_variable")

    @_builtins.property
    @pulumi.getter(name="interfaceName")
    def interface_name(self) -> _builtins.str:
        return pulumi.get(self, "interface_name")

    @_builtins.property
    @pulumi.getter(name="interfaceNameVariable")
    def interface_name_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "interface_name_variable")

    @_builtins.property
    @pulumi.getter(name="ipDirectedBroadcast")
    def ip_directed_broadcast(self) -> _builtins.bool:
        """
        IP Directed-Broadcast
        """
        return pulumi.get(self, "ip_directed_broadcast")

    @_builtins.property
    @pulumi.getter(name="ipDirectedBroadcastVariable")
    def ip_directed_broadcast_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "ip_directed_broadcast_variable")

    @_builtins.property
    @pulumi.getter(name="ipMtu")
    def ip_mtu(self) -> _builtins.int:
        """
        IP MTU for GigabitEthernet main \\n\\n, GigabitEthernet subinterface \\n\\n, Other Interfaces \\n\\n in bytes
        """
        return pulumi.get(self, "ip_mtu")

    @_builtins.property
    @pulumi.getter(name="ipMtuVariable")
    def ip_mtu_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "ip_mtu_variable")

    @_builtins.property
    @pulumi.getter(name="ipv4Address")
    def ipv4_address(self) -> _builtins.str:
        """
        IP Address
        """
        return pulumi.get(self, "ipv4_address")

    @_builtins.property
    @pulumi.getter(name="ipv4AddressVariable")
    def ipv4_address_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "ipv4_address_variable")

    @_builtins.property
    @pulumi.getter(name="ipv4AutoDetectBandwidth")
    def ipv4_auto_detect_bandwidth(self) -> _builtins.bool:
        """
        Interface auto detect bandwidth
        """
        return pulumi.get(self, "ipv4_auto_detect_bandwidth")

    @_builtins.property
    @pulumi.getter(name="ipv4AutoDetectBandwidthVariable")
    def ipv4_auto_detect_bandwidth_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "ipv4_auto_detect_bandwidth_variable")

    @_builtins.property
    @pulumi.getter(name="ipv4ConfigurationType")
    def ipv4_configuration_type(self) -> _builtins.str:
        """
        IPv4 Configuration Type
        """
        return pulumi.get(self, "ipv4_configuration_type")

    @_builtins.property
    @pulumi.getter(name="ipv4DhcpDistance")
    def ipv4_dhcp_distance(self) -> _builtins.int:
        """
        DHCP Distance
        """
        return pulumi.get(self, "ipv4_dhcp_distance")

    @_builtins.property
    @pulumi.getter(name="ipv4DhcpDistanceVariable")
    def ipv4_dhcp_distance_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "ipv4_dhcp_distance_variable")

    @_builtins.property
    @pulumi.getter(name="ipv4DhcpHelperVariable")
    def ipv4_dhcp_helper_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "ipv4_dhcp_helper_variable")

    @_builtins.property
    @pulumi.getter(name="ipv4DhcpHelpers")
    def ipv4_dhcp_helpers(self) -> Sequence[_builtins.str]:
        """
        List of DHCP IPv4 helper addresses (min 1, max 8)
        """
        return pulumi.get(self, "ipv4_dhcp_helpers")

    @_builtins.property
    @pulumi.getter(name="ipv4IperfServer")
    def ipv4_iperf_server(self) -> _builtins.str:
        """
        Iperf server for auto bandwidth detect
        """
        return pulumi.get(self, "ipv4_iperf_server")

    @_builtins.property
    @pulumi.getter(name="ipv4IperfServerVariable")
    def ipv4_iperf_server_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "ipv4_iperf_server_variable")

    @_builtins.property
    @pulumi.getter(name="ipv4SecondaryAddresses")
    def ipv4_secondary_addresses(self) -> Sequence['outputs.GetTransportManagementVpnInterfaceEthernetFeatureIpv4SecondaryAddressResult']:
        """
        Secondary IpV4 Addresses
        """
        return pulumi.get(self, "ipv4_secondary_addresses")

    @_builtins.property
    @pulumi.getter(name="ipv4SubnetMask")
    def ipv4_subnet_mask(self) -> _builtins.str:
        """
        Subnet Mask
        """
        return pulumi.get(self, "ipv4_subnet_mask")

    @_builtins.property
    @pulumi.getter(name="ipv4SubnetMaskVariable")
    def ipv4_subnet_mask_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "ipv4_subnet_mask_variable")

    @_builtins.property
    @pulumi.getter(name="ipv6Address")
    def ipv6_address(self) -> _builtins.str:
        """
        IPv6 Address Secondary
        """
        return pulumi.get(self, "ipv6_address")

    @_builtins.property
    @pulumi.getter(name="ipv6AddressVariable")
    def ipv6_address_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "ipv6_address_variable")

    @_builtins.property
    @pulumi.getter(name="ipv6ConfigurationType")
    def ipv6_configuration_type(self) -> _builtins.str:
        """
        IPv6 Configuration Type
        """
        return pulumi.get(self, "ipv6_configuration_type")

    @_builtins.property
    @pulumi.getter(name="loadInterval")
    def load_interval(self) -> _builtins.int:
        """
        Interval for interface load calculation
        """
        return pulumi.get(self, "load_interval")

    @_builtins.property
    @pulumi.getter(name="loadIntervalVariable")
    def load_interval_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "load_interval_variable")

    @_builtins.property
    @pulumi.getter(name="macAddress")
    def mac_address(self) -> _builtins.str:
        """
        MAC Address
        """
        return pulumi.get(self, "mac_address")

    @_builtins.property
    @pulumi.getter(name="macAddressVariable")
    def mac_address_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "mac_address_variable")

    @_builtins.property
    @pulumi.getter(name="mediaType")
    def media_type(self) -> _builtins.str:
        """
        Media type
        """
        return pulumi.get(self, "media_type")

    @_builtins.property
    @pulumi.getter(name="mediaTypeVariable")
    def media_type_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "media_type_variable")

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        """
        The name of the Feature
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def shutdown(self) -> _builtins.bool:
        return pulumi.get(self, "shutdown")

    @_builtins.property
    @pulumi.getter(name="shutdownVariable")
    def shutdown_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "shutdown_variable")

    @_builtins.property
    @pulumi.getter
    def speed(self) -> _builtins.str:
        """
        Set interface speed
        """
        return pulumi.get(self, "speed")

    @_builtins.property
    @pulumi.getter(name="speedVariable")
    def speed_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "speed_variable")

    @_builtins.property
    @pulumi.getter(name="tcpMss")
    def tcp_mss(self) -> _builtins.int:
        """
        TCP MSS on SYN packets, in bytes
        """
        return pulumi.get(self, "tcp_mss")

    @_builtins.property
    @pulumi.getter(name="tcpMssVariable")
    def tcp_mss_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "tcp_mss_variable")

    @_builtins.property
    @pulumi.getter(name="transportManagementVpnFeatureId")
    def transport_management_vpn_feature_id(self) -> _builtins.str:
        """
        Transport Management VPN Feature ID
        """
        return pulumi.get(self, "transport_management_vpn_feature_id")

    @_builtins.property
    @pulumi.getter
    def version(self) -> _builtins.int:
        """
        The version of the Feature
        """
        return pulumi.get(self, "version")


class AwaitableGetTransportManagementVpnInterfaceEthernetFeatureResult(GetTransportManagementVpnInterfaceEthernetFeatureResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetTransportManagementVpnInterfaceEthernetFeatureResult(
            arp_entries=self.arp_entries,
            arp_timeout=self.arp_timeout,
            arp_timeout_variable=self.arp_timeout_variable,
            autonegotiate=self.autonegotiate,
            autonegotiate_variable=self.autonegotiate_variable,
            description=self.description,
            duplex=self.duplex,
            duplex_variable=self.duplex_variable,
            enable_dhcpv6=self.enable_dhcpv6,
            feature_profile_id=self.feature_profile_id,
            icmp_redirect_disable=self.icmp_redirect_disable,
            icmp_redirect_disable_variable=self.icmp_redirect_disable_variable,
            id=self.id,
            interface_description=self.interface_description,
            interface_description_variable=self.interface_description_variable,
            interface_mtu=self.interface_mtu,
            interface_mtu_variable=self.interface_mtu_variable,
            interface_name=self.interface_name,
            interface_name_variable=self.interface_name_variable,
            ip_directed_broadcast=self.ip_directed_broadcast,
            ip_directed_broadcast_variable=self.ip_directed_broadcast_variable,
            ip_mtu=self.ip_mtu,
            ip_mtu_variable=self.ip_mtu_variable,
            ipv4_address=self.ipv4_address,
            ipv4_address_variable=self.ipv4_address_variable,
            ipv4_auto_detect_bandwidth=self.ipv4_auto_detect_bandwidth,
            ipv4_auto_detect_bandwidth_variable=self.ipv4_auto_detect_bandwidth_variable,
            ipv4_configuration_type=self.ipv4_configuration_type,
            ipv4_dhcp_distance=self.ipv4_dhcp_distance,
            ipv4_dhcp_distance_variable=self.ipv4_dhcp_distance_variable,
            ipv4_dhcp_helper_variable=self.ipv4_dhcp_helper_variable,
            ipv4_dhcp_helpers=self.ipv4_dhcp_helpers,
            ipv4_iperf_server=self.ipv4_iperf_server,
            ipv4_iperf_server_variable=self.ipv4_iperf_server_variable,
            ipv4_secondary_addresses=self.ipv4_secondary_addresses,
            ipv4_subnet_mask=self.ipv4_subnet_mask,
            ipv4_subnet_mask_variable=self.ipv4_subnet_mask_variable,
            ipv6_address=self.ipv6_address,
            ipv6_address_variable=self.ipv6_address_variable,
            ipv6_configuration_type=self.ipv6_configuration_type,
            load_interval=self.load_interval,
            load_interval_variable=self.load_interval_variable,
            mac_address=self.mac_address,
            mac_address_variable=self.mac_address_variable,
            media_type=self.media_type,
            media_type_variable=self.media_type_variable,
            name=self.name,
            shutdown=self.shutdown,
            shutdown_variable=self.shutdown_variable,
            speed=self.speed,
            speed_variable=self.speed_variable,
            tcp_mss=self.tcp_mss,
            tcp_mss_variable=self.tcp_mss_variable,
            transport_management_vpn_feature_id=self.transport_management_vpn_feature_id,
            version=self.version)


def get_transport_management_vpn_interface_ethernet_feature(feature_profile_id: Optional[_builtins.str] = None,
                                                            id: Optional[_builtins.str] = None,
                                                            transport_management_vpn_feature_id: Optional[_builtins.str] = None,
                                                            opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetTransportManagementVpnInterfaceEthernetFeatureResult:
    """
    This data source can read the Transport Management VPN Interface Ethernet Feature.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_sdwan as sdwan

    example = sdwan.get_transport_management_vpn_interface_ethernet_feature(id="f6b2c44c-693c-4763-b010-895aa3d236bd",
        feature_profile_id="f6dd22c8-0b4f-496c-9a0b-6813d1f8b8ac",
        transport_management_vpn_feature_id="140331f6-5418-4755-a059-13c77eb96037")
    ```


    :param _builtins.str feature_profile_id: Feature Profile ID
    :param _builtins.str id: The id of the Feature
    :param _builtins.str transport_management_vpn_feature_id: Transport Management VPN Feature ID
    """
    __args__ = dict()
    __args__['featureProfileId'] = feature_profile_id
    __args__['id'] = id
    __args__['transportManagementVpnFeatureId'] = transport_management_vpn_feature_id
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('sdwan:index/getTransportManagementVpnInterfaceEthernetFeature:getTransportManagementVpnInterfaceEthernetFeature', __args__, opts=opts, typ=GetTransportManagementVpnInterfaceEthernetFeatureResult).value

    return AwaitableGetTransportManagementVpnInterfaceEthernetFeatureResult(
        arp_entries=pulumi.get(__ret__, 'arp_entries'),
        arp_timeout=pulumi.get(__ret__, 'arp_timeout'),
        arp_timeout_variable=pulumi.get(__ret__, 'arp_timeout_variable'),
        autonegotiate=pulumi.get(__ret__, 'autonegotiate'),
        autonegotiate_variable=pulumi.get(__ret__, 'autonegotiate_variable'),
        description=pulumi.get(__ret__, 'description'),
        duplex=pulumi.get(__ret__, 'duplex'),
        duplex_variable=pulumi.get(__ret__, 'duplex_variable'),
        enable_dhcpv6=pulumi.get(__ret__, 'enable_dhcpv6'),
        feature_profile_id=pulumi.get(__ret__, 'feature_profile_id'),
        icmp_redirect_disable=pulumi.get(__ret__, 'icmp_redirect_disable'),
        icmp_redirect_disable_variable=pulumi.get(__ret__, 'icmp_redirect_disable_variable'),
        id=pulumi.get(__ret__, 'id'),
        interface_description=pulumi.get(__ret__, 'interface_description'),
        interface_description_variable=pulumi.get(__ret__, 'interface_description_variable'),
        interface_mtu=pulumi.get(__ret__, 'interface_mtu'),
        interface_mtu_variable=pulumi.get(__ret__, 'interface_mtu_variable'),
        interface_name=pulumi.get(__ret__, 'interface_name'),
        interface_name_variable=pulumi.get(__ret__, 'interface_name_variable'),
        ip_directed_broadcast=pulumi.get(__ret__, 'ip_directed_broadcast'),
        ip_directed_broadcast_variable=pulumi.get(__ret__, 'ip_directed_broadcast_variable'),
        ip_mtu=pulumi.get(__ret__, 'ip_mtu'),
        ip_mtu_variable=pulumi.get(__ret__, 'ip_mtu_variable'),
        ipv4_address=pulumi.get(__ret__, 'ipv4_address'),
        ipv4_address_variable=pulumi.get(__ret__, 'ipv4_address_variable'),
        ipv4_auto_detect_bandwidth=pulumi.get(__ret__, 'ipv4_auto_detect_bandwidth'),
        ipv4_auto_detect_bandwidth_variable=pulumi.get(__ret__, 'ipv4_auto_detect_bandwidth_variable'),
        ipv4_configuration_type=pulumi.get(__ret__, 'ipv4_configuration_type'),
        ipv4_dhcp_distance=pulumi.get(__ret__, 'ipv4_dhcp_distance'),
        ipv4_dhcp_distance_variable=pulumi.get(__ret__, 'ipv4_dhcp_distance_variable'),
        ipv4_dhcp_helper_variable=pulumi.get(__ret__, 'ipv4_dhcp_helper_variable'),
        ipv4_dhcp_helpers=pulumi.get(__ret__, 'ipv4_dhcp_helpers'),
        ipv4_iperf_server=pulumi.get(__ret__, 'ipv4_iperf_server'),
        ipv4_iperf_server_variable=pulumi.get(__ret__, 'ipv4_iperf_server_variable'),
        ipv4_secondary_addresses=pulumi.get(__ret__, 'ipv4_secondary_addresses'),
        ipv4_subnet_mask=pulumi.get(__ret__, 'ipv4_subnet_mask'),
        ipv4_subnet_mask_variable=pulumi.get(__ret__, 'ipv4_subnet_mask_variable'),
        ipv6_address=pulumi.get(__ret__, 'ipv6_address'),
        ipv6_address_variable=pulumi.get(__ret__, 'ipv6_address_variable'),
        ipv6_configuration_type=pulumi.get(__ret__, 'ipv6_configuration_type'),
        load_interval=pulumi.get(__ret__, 'load_interval'),
        load_interval_variable=pulumi.get(__ret__, 'load_interval_variable'),
        mac_address=pulumi.get(__ret__, 'mac_address'),
        mac_address_variable=pulumi.get(__ret__, 'mac_address_variable'),
        media_type=pulumi.get(__ret__, 'media_type'),
        media_type_variable=pulumi.get(__ret__, 'media_type_variable'),
        name=pulumi.get(__ret__, 'name'),
        shutdown=pulumi.get(__ret__, 'shutdown'),
        shutdown_variable=pulumi.get(__ret__, 'shutdown_variable'),
        speed=pulumi.get(__ret__, 'speed'),
        speed_variable=pulumi.get(__ret__, 'speed_variable'),
        tcp_mss=pulumi.get(__ret__, 'tcp_mss'),
        tcp_mss_variable=pulumi.get(__ret__, 'tcp_mss_variable'),
        transport_management_vpn_feature_id=pulumi.get(__ret__, 'transport_management_vpn_feature_id'),
        version=pulumi.get(__ret__, 'version'))
def get_transport_management_vpn_interface_ethernet_feature_output(feature_profile_id: Optional[pulumi.Input[_builtins.str]] = None,
                                                                   id: Optional[pulumi.Input[_builtins.str]] = None,
                                                                   transport_management_vpn_feature_id: Optional[pulumi.Input[_builtins.str]] = None,
                                                                   opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetTransportManagementVpnInterfaceEthernetFeatureResult]:
    """
    This data source can read the Transport Management VPN Interface Ethernet Feature.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_sdwan as sdwan

    example = sdwan.get_transport_management_vpn_interface_ethernet_feature(id="f6b2c44c-693c-4763-b010-895aa3d236bd",
        feature_profile_id="f6dd22c8-0b4f-496c-9a0b-6813d1f8b8ac",
        transport_management_vpn_feature_id="140331f6-5418-4755-a059-13c77eb96037")
    ```


    :param _builtins.str feature_profile_id: Feature Profile ID
    :param _builtins.str id: The id of the Feature
    :param _builtins.str transport_management_vpn_feature_id: Transport Management VPN Feature ID
    """
    __args__ = dict()
    __args__['featureProfileId'] = feature_profile_id
    __args__['id'] = id
    __args__['transportManagementVpnFeatureId'] = transport_management_vpn_feature_id
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('sdwan:index/getTransportManagementVpnInterfaceEthernetFeature:getTransportManagementVpnInterfaceEthernetFeature', __args__, opts=opts, typ=GetTransportManagementVpnInterfaceEthernetFeatureResult)
    return __ret__.apply(lambda __response__: GetTransportManagementVpnInterfaceEthernetFeatureResult(
        arp_entries=pulumi.get(__response__, 'arp_entries'),
        arp_timeout=pulumi.get(__response__, 'arp_timeout'),
        arp_timeout_variable=pulumi.get(__response__, 'arp_timeout_variable'),
        autonegotiate=pulumi.get(__response__, 'autonegotiate'),
        autonegotiate_variable=pulumi.get(__response__, 'autonegotiate_variable'),
        description=pulumi.get(__response__, 'description'),
        duplex=pulumi.get(__response__, 'duplex'),
        duplex_variable=pulumi.get(__response__, 'duplex_variable'),
        enable_dhcpv6=pulumi.get(__response__, 'enable_dhcpv6'),
        feature_profile_id=pulumi.get(__response__, 'feature_profile_id'),
        icmp_redirect_disable=pulumi.get(__response__, 'icmp_redirect_disable'),
        icmp_redirect_disable_variable=pulumi.get(__response__, 'icmp_redirect_disable_variable'),
        id=pulumi.get(__response__, 'id'),
        interface_description=pulumi.get(__response__, 'interface_description'),
        interface_description_variable=pulumi.get(__response__, 'interface_description_variable'),
        interface_mtu=pulumi.get(__response__, 'interface_mtu'),
        interface_mtu_variable=pulumi.get(__response__, 'interface_mtu_variable'),
        interface_name=pulumi.get(__response__, 'interface_name'),
        interface_name_variable=pulumi.get(__response__, 'interface_name_variable'),
        ip_directed_broadcast=pulumi.get(__response__, 'ip_directed_broadcast'),
        ip_directed_broadcast_variable=pulumi.get(__response__, 'ip_directed_broadcast_variable'),
        ip_mtu=pulumi.get(__response__, 'ip_mtu'),
        ip_mtu_variable=pulumi.get(__response__, 'ip_mtu_variable'),
        ipv4_address=pulumi.get(__response__, 'ipv4_address'),
        ipv4_address_variable=pulumi.get(__response__, 'ipv4_address_variable'),
        ipv4_auto_detect_bandwidth=pulumi.get(__response__, 'ipv4_auto_detect_bandwidth'),
        ipv4_auto_detect_bandwidth_variable=pulumi.get(__response__, 'ipv4_auto_detect_bandwidth_variable'),
        ipv4_configuration_type=pulumi.get(__response__, 'ipv4_configuration_type'),
        ipv4_dhcp_distance=pulumi.get(__response__, 'ipv4_dhcp_distance'),
        ipv4_dhcp_distance_variable=pulumi.get(__response__, 'ipv4_dhcp_distance_variable'),
        ipv4_dhcp_helper_variable=pulumi.get(__response__, 'ipv4_dhcp_helper_variable'),
        ipv4_dhcp_helpers=pulumi.get(__response__, 'ipv4_dhcp_helpers'),
        ipv4_iperf_server=pulumi.get(__response__, 'ipv4_iperf_server'),
        ipv4_iperf_server_variable=pulumi.get(__response__, 'ipv4_iperf_server_variable'),
        ipv4_secondary_addresses=pulumi.get(__response__, 'ipv4_secondary_addresses'),
        ipv4_subnet_mask=pulumi.get(__response__, 'ipv4_subnet_mask'),
        ipv4_subnet_mask_variable=pulumi.get(__response__, 'ipv4_subnet_mask_variable'),
        ipv6_address=pulumi.get(__response__, 'ipv6_address'),
        ipv6_address_variable=pulumi.get(__response__, 'ipv6_address_variable'),
        ipv6_configuration_type=pulumi.get(__response__, 'ipv6_configuration_type'),
        load_interval=pulumi.get(__response__, 'load_interval'),
        load_interval_variable=pulumi.get(__response__, 'load_interval_variable'),
        mac_address=pulumi.get(__response__, 'mac_address'),
        mac_address_variable=pulumi.get(__response__, 'mac_address_variable'),
        media_type=pulumi.get(__response__, 'media_type'),
        media_type_variable=pulumi.get(__response__, 'media_type_variable'),
        name=pulumi.get(__response__, 'name'),
        shutdown=pulumi.get(__response__, 'shutdown'),
        shutdown_variable=pulumi.get(__response__, 'shutdown_variable'),
        speed=pulumi.get(__response__, 'speed'),
        speed_variable=pulumi.get(__response__, 'speed_variable'),
        tcp_mss=pulumi.get(__response__, 'tcp_mss'),
        tcp_mss_variable=pulumi.get(__response__, 'tcp_mss_variable'),
        transport_management_vpn_feature_id=pulumi.get(__response__, 'transport_management_vpn_feature_id'),
        version=pulumi.get(__response__, 'version')))
