# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities
from . import outputs

__all__ = [
    'GetCflowdPolicyDefinitionResult',
    'AwaitableGetCflowdPolicyDefinitionResult',
    'get_cflowd_policy_definition',
    'get_cflowd_policy_definition_output',
]

@pulumi.output_type
class GetCflowdPolicyDefinitionResult:
    """
    A collection of values returned by getCflowdPolicyDefinition.
    """
    def __init__(__self__, active_flow_timeout=None, collectors=None, description=None, flow_refresh=None, id=None, inactive_flow_timeout=None, name=None, protocol=None, remarked_dscp=None, sampling_interval=None, tos=None, type=None, version=None):
        if active_flow_timeout and not isinstance(active_flow_timeout, int):
            raise TypeError("Expected argument 'active_flow_timeout' to be a int")
        pulumi.set(__self__, "active_flow_timeout", active_flow_timeout)
        if collectors and not isinstance(collectors, list):
            raise TypeError("Expected argument 'collectors' to be a list")
        pulumi.set(__self__, "collectors", collectors)
        if description and not isinstance(description, str):
            raise TypeError("Expected argument 'description' to be a str")
        pulumi.set(__self__, "description", description)
        if flow_refresh and not isinstance(flow_refresh, int):
            raise TypeError("Expected argument 'flow_refresh' to be a int")
        pulumi.set(__self__, "flow_refresh", flow_refresh)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if inactive_flow_timeout and not isinstance(inactive_flow_timeout, int):
            raise TypeError("Expected argument 'inactive_flow_timeout' to be a int")
        pulumi.set(__self__, "inactive_flow_timeout", inactive_flow_timeout)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)
        if protocol and not isinstance(protocol, str):
            raise TypeError("Expected argument 'protocol' to be a str")
        pulumi.set(__self__, "protocol", protocol)
        if remarked_dscp and not isinstance(remarked_dscp, bool):
            raise TypeError("Expected argument 'remarked_dscp' to be a bool")
        pulumi.set(__self__, "remarked_dscp", remarked_dscp)
        if sampling_interval and not isinstance(sampling_interval, int):
            raise TypeError("Expected argument 'sampling_interval' to be a int")
        pulumi.set(__self__, "sampling_interval", sampling_interval)
        if tos and not isinstance(tos, bool):
            raise TypeError("Expected argument 'tos' to be a bool")
        pulumi.set(__self__, "tos", tos)
        if type and not isinstance(type, str):
            raise TypeError("Expected argument 'type' to be a str")
        pulumi.set(__self__, "type", type)
        if version and not isinstance(version, int):
            raise TypeError("Expected argument 'version' to be a int")
        pulumi.set(__self__, "version", version)

    @_builtins.property
    @pulumi.getter(name="activeFlowTimeout")
    def active_flow_timeout(self) -> _builtins.int:
        """
        Active flow timeout in seconds
        """
        return pulumi.get(self, "active_flow_timeout")

    @_builtins.property
    @pulumi.getter
    def collectors(self) -> Sequence['outputs.GetCflowdPolicyDefinitionCollectorResult']:
        """
        List of collectors
        """
        return pulumi.get(self, "collectors")

    @_builtins.property
    @pulumi.getter
    def description(self) -> _builtins.str:
        """
        The description of the policy definition
        """
        return pulumi.get(self, "description")

    @_builtins.property
    @pulumi.getter(name="flowRefresh")
    def flow_refresh(self) -> _builtins.int:
        """
        Flow refresh in seconds
        """
        return pulumi.get(self, "flow_refresh")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        The id of the object
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter(name="inactiveFlowTimeout")
    def inactive_flow_timeout(self) -> _builtins.int:
        """
        Inactive flow timeout in seconds
        """
        return pulumi.get(self, "inactive_flow_timeout")

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        """
        The name of the policy definition
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def protocol(self) -> _builtins.str:
        """
        Protocol, either `ipv4`, `ipv6` or `all`
        """
        return pulumi.get(self, "protocol")

    @_builtins.property
    @pulumi.getter(name="remarkedDscp")
    def remarked_dscp(self) -> _builtins.bool:
        """
        Collect remarked DSCP
        """
        return pulumi.get(self, "remarked_dscp")

    @_builtins.property
    @pulumi.getter(name="samplingInterval")
    def sampling_interval(self) -> _builtins.int:
        """
        Flow sampling interval
        """
        return pulumi.get(self, "sampling_interval")

    @_builtins.property
    @pulumi.getter
    def tos(self) -> _builtins.bool:
        """
        Collect TOS record field
        """
        return pulumi.get(self, "tos")

    @_builtins.property
    @pulumi.getter
    def type(self) -> _builtins.str:
        """
        Type
        """
        return pulumi.get(self, "type")

    @_builtins.property
    @pulumi.getter
    def version(self) -> _builtins.int:
        """
        The version of the object
        """
        return pulumi.get(self, "version")


class AwaitableGetCflowdPolicyDefinitionResult(GetCflowdPolicyDefinitionResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetCflowdPolicyDefinitionResult(
            active_flow_timeout=self.active_flow_timeout,
            collectors=self.collectors,
            description=self.description,
            flow_refresh=self.flow_refresh,
            id=self.id,
            inactive_flow_timeout=self.inactive_flow_timeout,
            name=self.name,
            protocol=self.protocol,
            remarked_dscp=self.remarked_dscp,
            sampling_interval=self.sampling_interval,
            tos=self.tos,
            type=self.type,
            version=self.version)


def get_cflowd_policy_definition(id: Optional[_builtins.str] = None,
                                 opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetCflowdPolicyDefinitionResult:
    """
    This data source can read the Cflowd Policy Definition .

    ## Example Usage

    ```python
    import pulumi
    import pulumi_sdwan as sdwan

    example = sdwan.get_cflowd_policy_definition(id="f6b2c44c-693c-4763-b010-895aa3d236bd")
    ```


    :param _builtins.str id: The id of the object
    """
    __args__ = dict()
    __args__['id'] = id
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('sdwan:index/getCflowdPolicyDefinition:getCflowdPolicyDefinition', __args__, opts=opts, typ=GetCflowdPolicyDefinitionResult).value

    return AwaitableGetCflowdPolicyDefinitionResult(
        active_flow_timeout=pulumi.get(__ret__, 'active_flow_timeout'),
        collectors=pulumi.get(__ret__, 'collectors'),
        description=pulumi.get(__ret__, 'description'),
        flow_refresh=pulumi.get(__ret__, 'flow_refresh'),
        id=pulumi.get(__ret__, 'id'),
        inactive_flow_timeout=pulumi.get(__ret__, 'inactive_flow_timeout'),
        name=pulumi.get(__ret__, 'name'),
        protocol=pulumi.get(__ret__, 'protocol'),
        remarked_dscp=pulumi.get(__ret__, 'remarked_dscp'),
        sampling_interval=pulumi.get(__ret__, 'sampling_interval'),
        tos=pulumi.get(__ret__, 'tos'),
        type=pulumi.get(__ret__, 'type'),
        version=pulumi.get(__ret__, 'version'))
def get_cflowd_policy_definition_output(id: Optional[pulumi.Input[_builtins.str]] = None,
                                        opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetCflowdPolicyDefinitionResult]:
    """
    This data source can read the Cflowd Policy Definition .

    ## Example Usage

    ```python
    import pulumi
    import pulumi_sdwan as sdwan

    example = sdwan.get_cflowd_policy_definition(id="f6b2c44c-693c-4763-b010-895aa3d236bd")
    ```


    :param _builtins.str id: The id of the object
    """
    __args__ = dict()
    __args__['id'] = id
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('sdwan:index/getCflowdPolicyDefinition:getCflowdPolicyDefinition', __args__, opts=opts, typ=GetCflowdPolicyDefinitionResult)
    return __ret__.apply(lambda __response__: GetCflowdPolicyDefinitionResult(
        active_flow_timeout=pulumi.get(__response__, 'active_flow_timeout'),
        collectors=pulumi.get(__response__, 'collectors'),
        description=pulumi.get(__response__, 'description'),
        flow_refresh=pulumi.get(__response__, 'flow_refresh'),
        id=pulumi.get(__response__, 'id'),
        inactive_flow_timeout=pulumi.get(__response__, 'inactive_flow_timeout'),
        name=pulumi.get(__response__, 'name'),
        protocol=pulumi.get(__response__, 'protocol'),
        remarked_dscp=pulumi.get(__response__, 'remarked_dscp'),
        sampling_interval=pulumi.get(__response__, 'sampling_interval'),
        tos=pulumi.get(__response__, 'tos'),
        type=pulumi.get(__response__, 'type'),
        version=pulumi.get(__response__, 'version')))
