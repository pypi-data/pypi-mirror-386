# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities

__all__ = [
    'GetAdvancedMalwareProtectionPolicyDefinitionResult',
    'AwaitableGetAdvancedMalwareProtectionPolicyDefinitionResult',
    'get_advanced_malware_protection_policy_definition',
    'get_advanced_malware_protection_policy_definition_output',
]

@pulumi.output_type
class GetAdvancedMalwareProtectionPolicyDefinitionResult:
    """
    A collection of values returned by getAdvancedMalwareProtectionPolicyDefinition.
    """
    def __init__(__self__, alert_log_level=None, amp_cloud_region=None, amp_cloud_region_est_server=None, description=None, file_analysis=None, file_analysis_alert_log_level=None, file_analysis_cloud_region=None, file_analysis_file_types=None, id=None, match_all_vpn=None, mode=None, name=None, target_vpns=None, version=None):
        if alert_log_level and not isinstance(alert_log_level, str):
            raise TypeError("Expected argument 'alert_log_level' to be a str")
        pulumi.set(__self__, "alert_log_level", alert_log_level)
        if amp_cloud_region and not isinstance(amp_cloud_region, str):
            raise TypeError("Expected argument 'amp_cloud_region' to be a str")
        pulumi.set(__self__, "amp_cloud_region", amp_cloud_region)
        if amp_cloud_region_est_server and not isinstance(amp_cloud_region_est_server, str):
            raise TypeError("Expected argument 'amp_cloud_region_est_server' to be a str")
        pulumi.set(__self__, "amp_cloud_region_est_server", amp_cloud_region_est_server)
        if description and not isinstance(description, str):
            raise TypeError("Expected argument 'description' to be a str")
        pulumi.set(__self__, "description", description)
        if file_analysis and not isinstance(file_analysis, bool):
            raise TypeError("Expected argument 'file_analysis' to be a bool")
        pulumi.set(__self__, "file_analysis", file_analysis)
        if file_analysis_alert_log_level and not isinstance(file_analysis_alert_log_level, str):
            raise TypeError("Expected argument 'file_analysis_alert_log_level' to be a str")
        pulumi.set(__self__, "file_analysis_alert_log_level", file_analysis_alert_log_level)
        if file_analysis_cloud_region and not isinstance(file_analysis_cloud_region, str):
            raise TypeError("Expected argument 'file_analysis_cloud_region' to be a str")
        pulumi.set(__self__, "file_analysis_cloud_region", file_analysis_cloud_region)
        if file_analysis_file_types and not isinstance(file_analysis_file_types, list):
            raise TypeError("Expected argument 'file_analysis_file_types' to be a list")
        pulumi.set(__self__, "file_analysis_file_types", file_analysis_file_types)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if match_all_vpn and not isinstance(match_all_vpn, bool):
            raise TypeError("Expected argument 'match_all_vpn' to be a bool")
        pulumi.set(__self__, "match_all_vpn", match_all_vpn)
        if mode and not isinstance(mode, str):
            raise TypeError("Expected argument 'mode' to be a str")
        pulumi.set(__self__, "mode", mode)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)
        if target_vpns and not isinstance(target_vpns, list):
            raise TypeError("Expected argument 'target_vpns' to be a list")
        pulumi.set(__self__, "target_vpns", target_vpns)
        if version and not isinstance(version, int):
            raise TypeError("Expected argument 'version' to be a int")
        pulumi.set(__self__, "version", version)

    @_builtins.property
    @pulumi.getter(name="alertLogLevel")
    def alert_log_level(self) -> _builtins.str:
        """
        File reputation alerts Log level
        """
        return pulumi.get(self, "alert_log_level")

    @_builtins.property
    @pulumi.getter(name="ampCloudRegion")
    def amp_cloud_region(self) -> _builtins.str:
        """
        AMP Cloud Region
        """
        return pulumi.get(self, "amp_cloud_region")

    @_builtins.property
    @pulumi.getter(name="ampCloudRegionEstServer")
    def amp_cloud_region_est_server(self) -> _builtins.str:
        """
        AMP Cloud Region
        """
        return pulumi.get(self, "amp_cloud_region_est_server")

    @_builtins.property
    @pulumi.getter
    def description(self) -> _builtins.str:
        """
        The description of the policy definition
        """
        return pulumi.get(self, "description")

    @_builtins.property
    @pulumi.getter(name="fileAnalysis")
    def file_analysis(self) -> _builtins.bool:
        """
        Should file analysis be enabled
        """
        return pulumi.get(self, "file_analysis")

    @_builtins.property
    @pulumi.getter(name="fileAnalysisAlertLogLevel")
    def file_analysis_alert_log_level(self) -> _builtins.str:
        """
        File analysis alerts Log level
        """
        return pulumi.get(self, "file_analysis_alert_log_level")

    @_builtins.property
    @pulumi.getter(name="fileAnalysisCloudRegion")
    def file_analysis_cloud_region(self) -> _builtins.str:
        """
        TG Cloud Region
        """
        return pulumi.get(self, "file_analysis_cloud_region")

    @_builtins.property
    @pulumi.getter(name="fileAnalysisFileTypes")
    def file_analysis_file_types(self) -> Sequence[_builtins.str]:
        """
        List of file type
        """
        return pulumi.get(self, "file_analysis_file_types")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        The id of the object
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter(name="matchAllVpn")
    def match_all_vpn(self) -> _builtins.bool:
        """
        Should match all VPNs
        """
        return pulumi.get(self, "match_all_vpn")

    @_builtins.property
    @pulumi.getter
    def mode(self) -> _builtins.str:
        """
        The policy mode
        """
        return pulumi.get(self, "mode")

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        """
        The name of the policy definition
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter(name="targetVpns")
    def target_vpns(self) -> Sequence[_builtins.str]:
        """
        List of VPN IDs
        """
        return pulumi.get(self, "target_vpns")

    @_builtins.property
    @pulumi.getter
    def version(self) -> _builtins.int:
        """
        The version of the object
        """
        return pulumi.get(self, "version")


class AwaitableGetAdvancedMalwareProtectionPolicyDefinitionResult(GetAdvancedMalwareProtectionPolicyDefinitionResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetAdvancedMalwareProtectionPolicyDefinitionResult(
            alert_log_level=self.alert_log_level,
            amp_cloud_region=self.amp_cloud_region,
            amp_cloud_region_est_server=self.amp_cloud_region_est_server,
            description=self.description,
            file_analysis=self.file_analysis,
            file_analysis_alert_log_level=self.file_analysis_alert_log_level,
            file_analysis_cloud_region=self.file_analysis_cloud_region,
            file_analysis_file_types=self.file_analysis_file_types,
            id=self.id,
            match_all_vpn=self.match_all_vpn,
            mode=self.mode,
            name=self.name,
            target_vpns=self.target_vpns,
            version=self.version)


def get_advanced_malware_protection_policy_definition(id: Optional[_builtins.str] = None,
                                                      opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetAdvancedMalwareProtectionPolicyDefinitionResult:
    """
    This data source can read the Advanced Malware Protection Policy Definition .

    ## Example Usage

    ```python
    import pulumi
    import pulumi_sdwan as sdwan

    example = sdwan.get_advanced_malware_protection_policy_definition(id="f6b2c44c-693c-4763-b010-895aa3d236bd")
    ```


    :param _builtins.str id: The id of the object
    """
    __args__ = dict()
    __args__['id'] = id
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('sdwan:index/getAdvancedMalwareProtectionPolicyDefinition:getAdvancedMalwareProtectionPolicyDefinition', __args__, opts=opts, typ=GetAdvancedMalwareProtectionPolicyDefinitionResult).value

    return AwaitableGetAdvancedMalwareProtectionPolicyDefinitionResult(
        alert_log_level=pulumi.get(__ret__, 'alert_log_level'),
        amp_cloud_region=pulumi.get(__ret__, 'amp_cloud_region'),
        amp_cloud_region_est_server=pulumi.get(__ret__, 'amp_cloud_region_est_server'),
        description=pulumi.get(__ret__, 'description'),
        file_analysis=pulumi.get(__ret__, 'file_analysis'),
        file_analysis_alert_log_level=pulumi.get(__ret__, 'file_analysis_alert_log_level'),
        file_analysis_cloud_region=pulumi.get(__ret__, 'file_analysis_cloud_region'),
        file_analysis_file_types=pulumi.get(__ret__, 'file_analysis_file_types'),
        id=pulumi.get(__ret__, 'id'),
        match_all_vpn=pulumi.get(__ret__, 'match_all_vpn'),
        mode=pulumi.get(__ret__, 'mode'),
        name=pulumi.get(__ret__, 'name'),
        target_vpns=pulumi.get(__ret__, 'target_vpns'),
        version=pulumi.get(__ret__, 'version'))
def get_advanced_malware_protection_policy_definition_output(id: Optional[pulumi.Input[_builtins.str]] = None,
                                                             opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetAdvancedMalwareProtectionPolicyDefinitionResult]:
    """
    This data source can read the Advanced Malware Protection Policy Definition .

    ## Example Usage

    ```python
    import pulumi
    import pulumi_sdwan as sdwan

    example = sdwan.get_advanced_malware_protection_policy_definition(id="f6b2c44c-693c-4763-b010-895aa3d236bd")
    ```


    :param _builtins.str id: The id of the object
    """
    __args__ = dict()
    __args__['id'] = id
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('sdwan:index/getAdvancedMalwareProtectionPolicyDefinition:getAdvancedMalwareProtectionPolicyDefinition', __args__, opts=opts, typ=GetAdvancedMalwareProtectionPolicyDefinitionResult)
    return __ret__.apply(lambda __response__: GetAdvancedMalwareProtectionPolicyDefinitionResult(
        alert_log_level=pulumi.get(__response__, 'alert_log_level'),
        amp_cloud_region=pulumi.get(__response__, 'amp_cloud_region'),
        amp_cloud_region_est_server=pulumi.get(__response__, 'amp_cloud_region_est_server'),
        description=pulumi.get(__response__, 'description'),
        file_analysis=pulumi.get(__response__, 'file_analysis'),
        file_analysis_alert_log_level=pulumi.get(__response__, 'file_analysis_alert_log_level'),
        file_analysis_cloud_region=pulumi.get(__response__, 'file_analysis_cloud_region'),
        file_analysis_file_types=pulumi.get(__response__, 'file_analysis_file_types'),
        id=pulumi.get(__response__, 'id'),
        match_all_vpn=pulumi.get(__response__, 'match_all_vpn'),
        mode=pulumi.get(__response__, 'mode'),
        name=pulumi.get(__response__, 'name'),
        target_vpns=pulumi.get(__response__, 'target_vpns'),
        version=pulumi.get(__response__, 'version')))
