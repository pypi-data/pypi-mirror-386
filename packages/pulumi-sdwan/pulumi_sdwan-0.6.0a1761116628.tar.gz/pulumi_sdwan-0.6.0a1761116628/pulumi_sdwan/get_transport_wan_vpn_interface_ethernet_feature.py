# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities
from . import outputs

__all__ = [
    'GetTransportWanVpnInterfaceEthernetFeatureResult',
    'AwaitableGetTransportWanVpnInterfaceEthernetFeatureResult',
    'get_transport_wan_vpn_interface_ethernet_feature',
    'get_transport_wan_vpn_interface_ethernet_feature_output',
]

@pulumi.output_type
class GetTransportWanVpnInterfaceEthernetFeatureResult:
    """
    A collection of values returned by getTransportWanVpnInterfaceEthernetFeature.
    """
    def __init__(__self__, acl_ipv4_egress_feature_id=None, acl_ipv4_ingress_feature_id=None, acl_ipv6_egress_feature_id=None, acl_ipv6_ingress_feature_id=None, arp_timeout=None, arp_timeout_variable=None, arps=None, auto_detect_bandwidth=None, auto_detect_bandwidth_variable=None, autonegotiate=None, autonegotiate_variable=None, bandwidth_downstream=None, bandwidth_downstream_variable=None, bandwidth_upstream=None, bandwidth_upstream_variable=None, block_non_source_ip=None, block_non_source_ip_variable=None, description=None, duplex=None, duplex_variable=None, enable_dhcpv6=None, feature_profile_id=None, gre_tunnel_source_ip=None, gre_tunnel_source_ip_variable=None, icmp_redirect_disable=None, icmp_redirect_disable_variable=None, id=None, interface_description=None, interface_description_variable=None, interface_mtu=None, interface_mtu_variable=None, interface_name=None, interface_name_variable=None, ip_directed_broadcast=None, ip_directed_broadcast_variable=None, ip_mtu=None, ip_mtu_variable=None, iperf_server=None, iperf_server_variable=None, ipv4_address=None, ipv4_address_variable=None, ipv4_configuration_type=None, ipv4_dhcp_distance=None, ipv4_dhcp_distance_variable=None, ipv4_dhcp_helper_variable=None, ipv4_dhcp_helpers=None, ipv4_secondary_addresses=None, ipv4_subnet_mask=None, ipv4_subnet_mask_variable=None, ipv6_address=None, ipv6_address_variable=None, ipv6_configuration_type=None, ipv6_dhcp_secondary_addresses=None, ipv6_secondary_addresses=None, load_interval=None, load_interval_variable=None, mac_address=None, mac_address_variable=None, media_type=None, media_type_variable=None, name=None, nat64=None, nat66=None, nat_ipv4=None, nat_ipv4_variable=None, nat_ipv6=None, nat_ipv6_variable=None, nat_loopback=None, nat_loopback_variable=None, nat_overload=None, nat_overload_variable=None, nat_prefix_length=None, nat_prefix_length_variable=None, nat_range_end=None, nat_range_end_variable=None, nat_range_start=None, nat_range_start_variable=None, nat_tcp_timeout=None, nat_tcp_timeout_variable=None, nat_type=None, nat_type_variable=None, nat_udp_timeout=None, nat_udp_timeout_variable=None, new_static_nats=None, per_tunnel_qos=None, per_tunnel_qos_variable=None, qos_adaptive=None, qos_adaptive_bandwidth_downstream=None, qos_adaptive_bandwidth_upstream=None, qos_adaptive_default_downstream=None, qos_adaptive_default_downstream_variable=None, qos_adaptive_default_upstream=None, qos_adaptive_default_upstream_variable=None, qos_adaptive_max_downstream=None, qos_adaptive_max_downstream_variable=None, qos_adaptive_max_upstream=None, qos_adaptive_max_upstream_variable=None, qos_adaptive_min_downstream=None, qos_adaptive_min_downstream_variable=None, qos_adaptive_min_upstream=None, qos_adaptive_min_upstream_variable=None, qos_adaptive_period=None, qos_adaptive_period_variable=None, qos_shaping_rate=None, qos_shaping_rate_variable=None, service_provider=None, service_provider_variable=None, shutdown=None, shutdown_variable=None, speed=None, speed_variable=None, static_nat66s=None, tcp_mss=None, tcp_mss_variable=None, tloc_extension=None, tloc_extension_variable=None, tracker=None, tracker_variable=None, transport_wan_vpn_feature_id=None, tunnel_bandwidth_percent=None, tunnel_bandwidth_percent_variable=None, tunnel_interface=None, tunnel_interface_allow_all=None, tunnel_interface_allow_all_variable=None, tunnel_interface_allow_bfd=None, tunnel_interface_allow_bfd_variable=None, tunnel_interface_allow_bgp=None, tunnel_interface_allow_bgp_variable=None, tunnel_interface_allow_dhcp=None, tunnel_interface_allow_dhcp_variable=None, tunnel_interface_allow_dns=None, tunnel_interface_allow_dns_variable=None, tunnel_interface_allow_https=None, tunnel_interface_allow_https_variable=None, tunnel_interface_allow_icmp=None, tunnel_interface_allow_icmp_variable=None, tunnel_interface_allow_netconf=None, tunnel_interface_allow_netconf_variable=None, tunnel_interface_allow_ntp=None, tunnel_interface_allow_ntp_variable=None, tunnel_interface_allow_ospf=None, tunnel_interface_allow_ospf_variable=None, tunnel_interface_allow_snmp=None, tunnel_interface_allow_snmp_variable=None, tunnel_interface_allow_ssh=None, tunnel_interface_allow_ssh_variable=None, tunnel_interface_allow_stun=None, tunnel_interface_allow_stun_variable=None, tunnel_interface_bind_loopback_tunnel=None, tunnel_interface_bind_loopback_tunnel_variable=None, tunnel_interface_border=None, tunnel_interface_border_variable=None, tunnel_interface_carrier=None, tunnel_interface_carrier_variable=None, tunnel_interface_clear_dont_fragment=None, tunnel_interface_clear_dont_fragment_variable=None, tunnel_interface_color=None, tunnel_interface_color_restrict=None, tunnel_interface_color_restrict_variable=None, tunnel_interface_color_variable=None, tunnel_interface_cts_sgt_propagation=None, tunnel_interface_cts_sgt_propagation_variable=None, tunnel_interface_encapsulations=None, tunnel_interface_exclude_controller_group_list_variable=None, tunnel_interface_exclude_controller_group_lists=None, tunnel_interface_gre_tunnel_destination_ip=None, tunnel_interface_gre_tunnel_destination_ip_variable=None, tunnel_interface_groups=None, tunnel_interface_groups_variable=None, tunnel_interface_hello_interval=None, tunnel_interface_hello_interval_variable=None, tunnel_interface_hello_tolerance=None, tunnel_interface_hello_tolerance_variable=None, tunnel_interface_last_resort_circuit=None, tunnel_interface_last_resort_circuit_variable=None, tunnel_interface_low_bandwidth_link=None, tunnel_interface_low_bandwidth_link_variable=None, tunnel_interface_max_control_connections=None, tunnel_interface_max_control_connections_variable=None, tunnel_interface_nat_refresh_interval=None, tunnel_interface_nat_refresh_interval_variable=None, tunnel_interface_network_broadcast=None, tunnel_interface_network_broadcast_variable=None, tunnel_interface_port_hop=None, tunnel_interface_port_hop_variable=None, tunnel_interface_tunnel_tcp_mss=None, tunnel_interface_tunnel_tcp_mss_variable=None, tunnel_interface_vbond_as_stun_server=None, tunnel_interface_vbond_as_stun_server_variable=None, tunnel_interface_vmanage_connection_preference=None, tunnel_interface_vmanage_connection_preference_variable=None, tunnel_qos_mode=None, tunnel_qos_mode_variable=None, version=None, xconnect=None, xconnect_variable=None):
        if acl_ipv4_egress_feature_id and not isinstance(acl_ipv4_egress_feature_id, str):
            raise TypeError("Expected argument 'acl_ipv4_egress_feature_id' to be a str")
        pulumi.set(__self__, "acl_ipv4_egress_feature_id", acl_ipv4_egress_feature_id)
        if acl_ipv4_ingress_feature_id and not isinstance(acl_ipv4_ingress_feature_id, str):
            raise TypeError("Expected argument 'acl_ipv4_ingress_feature_id' to be a str")
        pulumi.set(__self__, "acl_ipv4_ingress_feature_id", acl_ipv4_ingress_feature_id)
        if acl_ipv6_egress_feature_id and not isinstance(acl_ipv6_egress_feature_id, str):
            raise TypeError("Expected argument 'acl_ipv6_egress_feature_id' to be a str")
        pulumi.set(__self__, "acl_ipv6_egress_feature_id", acl_ipv6_egress_feature_id)
        if acl_ipv6_ingress_feature_id and not isinstance(acl_ipv6_ingress_feature_id, str):
            raise TypeError("Expected argument 'acl_ipv6_ingress_feature_id' to be a str")
        pulumi.set(__self__, "acl_ipv6_ingress_feature_id", acl_ipv6_ingress_feature_id)
        if arp_timeout and not isinstance(arp_timeout, int):
            raise TypeError("Expected argument 'arp_timeout' to be a int")
        pulumi.set(__self__, "arp_timeout", arp_timeout)
        if arp_timeout_variable and not isinstance(arp_timeout_variable, str):
            raise TypeError("Expected argument 'arp_timeout_variable' to be a str")
        pulumi.set(__self__, "arp_timeout_variable", arp_timeout_variable)
        if arps and not isinstance(arps, list):
            raise TypeError("Expected argument 'arps' to be a list")
        pulumi.set(__self__, "arps", arps)
        if auto_detect_bandwidth and not isinstance(auto_detect_bandwidth, bool):
            raise TypeError("Expected argument 'auto_detect_bandwidth' to be a bool")
        pulumi.set(__self__, "auto_detect_bandwidth", auto_detect_bandwidth)
        if auto_detect_bandwidth_variable and not isinstance(auto_detect_bandwidth_variable, str):
            raise TypeError("Expected argument 'auto_detect_bandwidth_variable' to be a str")
        pulumi.set(__self__, "auto_detect_bandwidth_variable", auto_detect_bandwidth_variable)
        if autonegotiate and not isinstance(autonegotiate, bool):
            raise TypeError("Expected argument 'autonegotiate' to be a bool")
        pulumi.set(__self__, "autonegotiate", autonegotiate)
        if autonegotiate_variable and not isinstance(autonegotiate_variable, str):
            raise TypeError("Expected argument 'autonegotiate_variable' to be a str")
        pulumi.set(__self__, "autonegotiate_variable", autonegotiate_variable)
        if bandwidth_downstream and not isinstance(bandwidth_downstream, int):
            raise TypeError("Expected argument 'bandwidth_downstream' to be a int")
        pulumi.set(__self__, "bandwidth_downstream", bandwidth_downstream)
        if bandwidth_downstream_variable and not isinstance(bandwidth_downstream_variable, str):
            raise TypeError("Expected argument 'bandwidth_downstream_variable' to be a str")
        pulumi.set(__self__, "bandwidth_downstream_variable", bandwidth_downstream_variable)
        if bandwidth_upstream and not isinstance(bandwidth_upstream, int):
            raise TypeError("Expected argument 'bandwidth_upstream' to be a int")
        pulumi.set(__self__, "bandwidth_upstream", bandwidth_upstream)
        if bandwidth_upstream_variable and not isinstance(bandwidth_upstream_variable, str):
            raise TypeError("Expected argument 'bandwidth_upstream_variable' to be a str")
        pulumi.set(__self__, "bandwidth_upstream_variable", bandwidth_upstream_variable)
        if block_non_source_ip and not isinstance(block_non_source_ip, bool):
            raise TypeError("Expected argument 'block_non_source_ip' to be a bool")
        pulumi.set(__self__, "block_non_source_ip", block_non_source_ip)
        if block_non_source_ip_variable and not isinstance(block_non_source_ip_variable, str):
            raise TypeError("Expected argument 'block_non_source_ip_variable' to be a str")
        pulumi.set(__self__, "block_non_source_ip_variable", block_non_source_ip_variable)
        if description and not isinstance(description, str):
            raise TypeError("Expected argument 'description' to be a str")
        pulumi.set(__self__, "description", description)
        if duplex and not isinstance(duplex, str):
            raise TypeError("Expected argument 'duplex' to be a str")
        pulumi.set(__self__, "duplex", duplex)
        if duplex_variable and not isinstance(duplex_variable, str):
            raise TypeError("Expected argument 'duplex_variable' to be a str")
        pulumi.set(__self__, "duplex_variable", duplex_variable)
        if enable_dhcpv6 and not isinstance(enable_dhcpv6, bool):
            raise TypeError("Expected argument 'enable_dhcpv6' to be a bool")
        pulumi.set(__self__, "enable_dhcpv6", enable_dhcpv6)
        if feature_profile_id and not isinstance(feature_profile_id, str):
            raise TypeError("Expected argument 'feature_profile_id' to be a str")
        pulumi.set(__self__, "feature_profile_id", feature_profile_id)
        if gre_tunnel_source_ip and not isinstance(gre_tunnel_source_ip, str):
            raise TypeError("Expected argument 'gre_tunnel_source_ip' to be a str")
        pulumi.set(__self__, "gre_tunnel_source_ip", gre_tunnel_source_ip)
        if gre_tunnel_source_ip_variable and not isinstance(gre_tunnel_source_ip_variable, str):
            raise TypeError("Expected argument 'gre_tunnel_source_ip_variable' to be a str")
        pulumi.set(__self__, "gre_tunnel_source_ip_variable", gre_tunnel_source_ip_variable)
        if icmp_redirect_disable and not isinstance(icmp_redirect_disable, bool):
            raise TypeError("Expected argument 'icmp_redirect_disable' to be a bool")
        pulumi.set(__self__, "icmp_redirect_disable", icmp_redirect_disable)
        if icmp_redirect_disable_variable and not isinstance(icmp_redirect_disable_variable, str):
            raise TypeError("Expected argument 'icmp_redirect_disable_variable' to be a str")
        pulumi.set(__self__, "icmp_redirect_disable_variable", icmp_redirect_disable_variable)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if interface_description and not isinstance(interface_description, str):
            raise TypeError("Expected argument 'interface_description' to be a str")
        pulumi.set(__self__, "interface_description", interface_description)
        if interface_description_variable and not isinstance(interface_description_variable, str):
            raise TypeError("Expected argument 'interface_description_variable' to be a str")
        pulumi.set(__self__, "interface_description_variable", interface_description_variable)
        if interface_mtu and not isinstance(interface_mtu, int):
            raise TypeError("Expected argument 'interface_mtu' to be a int")
        pulumi.set(__self__, "interface_mtu", interface_mtu)
        if interface_mtu_variable and not isinstance(interface_mtu_variable, str):
            raise TypeError("Expected argument 'interface_mtu_variable' to be a str")
        pulumi.set(__self__, "interface_mtu_variable", interface_mtu_variable)
        if interface_name and not isinstance(interface_name, str):
            raise TypeError("Expected argument 'interface_name' to be a str")
        pulumi.set(__self__, "interface_name", interface_name)
        if interface_name_variable and not isinstance(interface_name_variable, str):
            raise TypeError("Expected argument 'interface_name_variable' to be a str")
        pulumi.set(__self__, "interface_name_variable", interface_name_variable)
        if ip_directed_broadcast and not isinstance(ip_directed_broadcast, bool):
            raise TypeError("Expected argument 'ip_directed_broadcast' to be a bool")
        pulumi.set(__self__, "ip_directed_broadcast", ip_directed_broadcast)
        if ip_directed_broadcast_variable and not isinstance(ip_directed_broadcast_variable, str):
            raise TypeError("Expected argument 'ip_directed_broadcast_variable' to be a str")
        pulumi.set(__self__, "ip_directed_broadcast_variable", ip_directed_broadcast_variable)
        if ip_mtu and not isinstance(ip_mtu, int):
            raise TypeError("Expected argument 'ip_mtu' to be a int")
        pulumi.set(__self__, "ip_mtu", ip_mtu)
        if ip_mtu_variable and not isinstance(ip_mtu_variable, str):
            raise TypeError("Expected argument 'ip_mtu_variable' to be a str")
        pulumi.set(__self__, "ip_mtu_variable", ip_mtu_variable)
        if iperf_server and not isinstance(iperf_server, str):
            raise TypeError("Expected argument 'iperf_server' to be a str")
        pulumi.set(__self__, "iperf_server", iperf_server)
        if iperf_server_variable and not isinstance(iperf_server_variable, str):
            raise TypeError("Expected argument 'iperf_server_variable' to be a str")
        pulumi.set(__self__, "iperf_server_variable", iperf_server_variable)
        if ipv4_address and not isinstance(ipv4_address, str):
            raise TypeError("Expected argument 'ipv4_address' to be a str")
        pulumi.set(__self__, "ipv4_address", ipv4_address)
        if ipv4_address_variable and not isinstance(ipv4_address_variable, str):
            raise TypeError("Expected argument 'ipv4_address_variable' to be a str")
        pulumi.set(__self__, "ipv4_address_variable", ipv4_address_variable)
        if ipv4_configuration_type and not isinstance(ipv4_configuration_type, str):
            raise TypeError("Expected argument 'ipv4_configuration_type' to be a str")
        pulumi.set(__self__, "ipv4_configuration_type", ipv4_configuration_type)
        if ipv4_dhcp_distance and not isinstance(ipv4_dhcp_distance, int):
            raise TypeError("Expected argument 'ipv4_dhcp_distance' to be a int")
        pulumi.set(__self__, "ipv4_dhcp_distance", ipv4_dhcp_distance)
        if ipv4_dhcp_distance_variable and not isinstance(ipv4_dhcp_distance_variable, str):
            raise TypeError("Expected argument 'ipv4_dhcp_distance_variable' to be a str")
        pulumi.set(__self__, "ipv4_dhcp_distance_variable", ipv4_dhcp_distance_variable)
        if ipv4_dhcp_helper_variable and not isinstance(ipv4_dhcp_helper_variable, str):
            raise TypeError("Expected argument 'ipv4_dhcp_helper_variable' to be a str")
        pulumi.set(__self__, "ipv4_dhcp_helper_variable", ipv4_dhcp_helper_variable)
        if ipv4_dhcp_helpers and not isinstance(ipv4_dhcp_helpers, list):
            raise TypeError("Expected argument 'ipv4_dhcp_helpers' to be a list")
        pulumi.set(__self__, "ipv4_dhcp_helpers", ipv4_dhcp_helpers)
        if ipv4_secondary_addresses and not isinstance(ipv4_secondary_addresses, list):
            raise TypeError("Expected argument 'ipv4_secondary_addresses' to be a list")
        pulumi.set(__self__, "ipv4_secondary_addresses", ipv4_secondary_addresses)
        if ipv4_subnet_mask and not isinstance(ipv4_subnet_mask, str):
            raise TypeError("Expected argument 'ipv4_subnet_mask' to be a str")
        pulumi.set(__self__, "ipv4_subnet_mask", ipv4_subnet_mask)
        if ipv4_subnet_mask_variable and not isinstance(ipv4_subnet_mask_variable, str):
            raise TypeError("Expected argument 'ipv4_subnet_mask_variable' to be a str")
        pulumi.set(__self__, "ipv4_subnet_mask_variable", ipv4_subnet_mask_variable)
        if ipv6_address and not isinstance(ipv6_address, str):
            raise TypeError("Expected argument 'ipv6_address' to be a str")
        pulumi.set(__self__, "ipv6_address", ipv6_address)
        if ipv6_address_variable and not isinstance(ipv6_address_variable, str):
            raise TypeError("Expected argument 'ipv6_address_variable' to be a str")
        pulumi.set(__self__, "ipv6_address_variable", ipv6_address_variable)
        if ipv6_configuration_type and not isinstance(ipv6_configuration_type, str):
            raise TypeError("Expected argument 'ipv6_configuration_type' to be a str")
        pulumi.set(__self__, "ipv6_configuration_type", ipv6_configuration_type)
        if ipv6_dhcp_secondary_addresses and not isinstance(ipv6_dhcp_secondary_addresses, list):
            raise TypeError("Expected argument 'ipv6_dhcp_secondary_addresses' to be a list")
        pulumi.set(__self__, "ipv6_dhcp_secondary_addresses", ipv6_dhcp_secondary_addresses)
        if ipv6_secondary_addresses and not isinstance(ipv6_secondary_addresses, list):
            raise TypeError("Expected argument 'ipv6_secondary_addresses' to be a list")
        pulumi.set(__self__, "ipv6_secondary_addresses", ipv6_secondary_addresses)
        if load_interval and not isinstance(load_interval, int):
            raise TypeError("Expected argument 'load_interval' to be a int")
        pulumi.set(__self__, "load_interval", load_interval)
        if load_interval_variable and not isinstance(load_interval_variable, str):
            raise TypeError("Expected argument 'load_interval_variable' to be a str")
        pulumi.set(__self__, "load_interval_variable", load_interval_variable)
        if mac_address and not isinstance(mac_address, str):
            raise TypeError("Expected argument 'mac_address' to be a str")
        pulumi.set(__self__, "mac_address", mac_address)
        if mac_address_variable and not isinstance(mac_address_variable, str):
            raise TypeError("Expected argument 'mac_address_variable' to be a str")
        pulumi.set(__self__, "mac_address_variable", mac_address_variable)
        if media_type and not isinstance(media_type, str):
            raise TypeError("Expected argument 'media_type' to be a str")
        pulumi.set(__self__, "media_type", media_type)
        if media_type_variable and not isinstance(media_type_variable, str):
            raise TypeError("Expected argument 'media_type_variable' to be a str")
        pulumi.set(__self__, "media_type_variable", media_type_variable)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)
        if nat64 and not isinstance(nat64, bool):
            raise TypeError("Expected argument 'nat64' to be a bool")
        pulumi.set(__self__, "nat64", nat64)
        if nat66 and not isinstance(nat66, bool):
            raise TypeError("Expected argument 'nat66' to be a bool")
        pulumi.set(__self__, "nat66", nat66)
        if nat_ipv4 and not isinstance(nat_ipv4, bool):
            raise TypeError("Expected argument 'nat_ipv4' to be a bool")
        pulumi.set(__self__, "nat_ipv4", nat_ipv4)
        if nat_ipv4_variable and not isinstance(nat_ipv4_variable, str):
            raise TypeError("Expected argument 'nat_ipv4_variable' to be a str")
        pulumi.set(__self__, "nat_ipv4_variable", nat_ipv4_variable)
        if nat_ipv6 and not isinstance(nat_ipv6, bool):
            raise TypeError("Expected argument 'nat_ipv6' to be a bool")
        pulumi.set(__self__, "nat_ipv6", nat_ipv6)
        if nat_ipv6_variable and not isinstance(nat_ipv6_variable, str):
            raise TypeError("Expected argument 'nat_ipv6_variable' to be a str")
        pulumi.set(__self__, "nat_ipv6_variable", nat_ipv6_variable)
        if nat_loopback and not isinstance(nat_loopback, str):
            raise TypeError("Expected argument 'nat_loopback' to be a str")
        pulumi.set(__self__, "nat_loopback", nat_loopback)
        if nat_loopback_variable and not isinstance(nat_loopback_variable, str):
            raise TypeError("Expected argument 'nat_loopback_variable' to be a str")
        pulumi.set(__self__, "nat_loopback_variable", nat_loopback_variable)
        if nat_overload and not isinstance(nat_overload, bool):
            raise TypeError("Expected argument 'nat_overload' to be a bool")
        pulumi.set(__self__, "nat_overload", nat_overload)
        if nat_overload_variable and not isinstance(nat_overload_variable, str):
            raise TypeError("Expected argument 'nat_overload_variable' to be a str")
        pulumi.set(__self__, "nat_overload_variable", nat_overload_variable)
        if nat_prefix_length and not isinstance(nat_prefix_length, int):
            raise TypeError("Expected argument 'nat_prefix_length' to be a int")
        pulumi.set(__self__, "nat_prefix_length", nat_prefix_length)
        if nat_prefix_length_variable and not isinstance(nat_prefix_length_variable, str):
            raise TypeError("Expected argument 'nat_prefix_length_variable' to be a str")
        pulumi.set(__self__, "nat_prefix_length_variable", nat_prefix_length_variable)
        if nat_range_end and not isinstance(nat_range_end, str):
            raise TypeError("Expected argument 'nat_range_end' to be a str")
        pulumi.set(__self__, "nat_range_end", nat_range_end)
        if nat_range_end_variable and not isinstance(nat_range_end_variable, str):
            raise TypeError("Expected argument 'nat_range_end_variable' to be a str")
        pulumi.set(__self__, "nat_range_end_variable", nat_range_end_variable)
        if nat_range_start and not isinstance(nat_range_start, str):
            raise TypeError("Expected argument 'nat_range_start' to be a str")
        pulumi.set(__self__, "nat_range_start", nat_range_start)
        if nat_range_start_variable and not isinstance(nat_range_start_variable, str):
            raise TypeError("Expected argument 'nat_range_start_variable' to be a str")
        pulumi.set(__self__, "nat_range_start_variable", nat_range_start_variable)
        if nat_tcp_timeout and not isinstance(nat_tcp_timeout, int):
            raise TypeError("Expected argument 'nat_tcp_timeout' to be a int")
        pulumi.set(__self__, "nat_tcp_timeout", nat_tcp_timeout)
        if nat_tcp_timeout_variable and not isinstance(nat_tcp_timeout_variable, str):
            raise TypeError("Expected argument 'nat_tcp_timeout_variable' to be a str")
        pulumi.set(__self__, "nat_tcp_timeout_variable", nat_tcp_timeout_variable)
        if nat_type and not isinstance(nat_type, str):
            raise TypeError("Expected argument 'nat_type' to be a str")
        pulumi.set(__self__, "nat_type", nat_type)
        if nat_type_variable and not isinstance(nat_type_variable, str):
            raise TypeError("Expected argument 'nat_type_variable' to be a str")
        pulumi.set(__self__, "nat_type_variable", nat_type_variable)
        if nat_udp_timeout and not isinstance(nat_udp_timeout, int):
            raise TypeError("Expected argument 'nat_udp_timeout' to be a int")
        pulumi.set(__self__, "nat_udp_timeout", nat_udp_timeout)
        if nat_udp_timeout_variable and not isinstance(nat_udp_timeout_variable, str):
            raise TypeError("Expected argument 'nat_udp_timeout_variable' to be a str")
        pulumi.set(__self__, "nat_udp_timeout_variable", nat_udp_timeout_variable)
        if new_static_nats and not isinstance(new_static_nats, list):
            raise TypeError("Expected argument 'new_static_nats' to be a list")
        pulumi.set(__self__, "new_static_nats", new_static_nats)
        if per_tunnel_qos and not isinstance(per_tunnel_qos, bool):
            raise TypeError("Expected argument 'per_tunnel_qos' to be a bool")
        pulumi.set(__self__, "per_tunnel_qos", per_tunnel_qos)
        if per_tunnel_qos_variable and not isinstance(per_tunnel_qos_variable, str):
            raise TypeError("Expected argument 'per_tunnel_qos_variable' to be a str")
        pulumi.set(__self__, "per_tunnel_qos_variable", per_tunnel_qos_variable)
        if qos_adaptive and not isinstance(qos_adaptive, bool):
            raise TypeError("Expected argument 'qos_adaptive' to be a bool")
        pulumi.set(__self__, "qos_adaptive", qos_adaptive)
        if qos_adaptive_bandwidth_downstream and not isinstance(qos_adaptive_bandwidth_downstream, bool):
            raise TypeError("Expected argument 'qos_adaptive_bandwidth_downstream' to be a bool")
        pulumi.set(__self__, "qos_adaptive_bandwidth_downstream", qos_adaptive_bandwidth_downstream)
        if qos_adaptive_bandwidth_upstream and not isinstance(qos_adaptive_bandwidth_upstream, bool):
            raise TypeError("Expected argument 'qos_adaptive_bandwidth_upstream' to be a bool")
        pulumi.set(__self__, "qos_adaptive_bandwidth_upstream", qos_adaptive_bandwidth_upstream)
        if qos_adaptive_default_downstream and not isinstance(qos_adaptive_default_downstream, int):
            raise TypeError("Expected argument 'qos_adaptive_default_downstream' to be a int")
        pulumi.set(__self__, "qos_adaptive_default_downstream", qos_adaptive_default_downstream)
        if qos_adaptive_default_downstream_variable and not isinstance(qos_adaptive_default_downstream_variable, str):
            raise TypeError("Expected argument 'qos_adaptive_default_downstream_variable' to be a str")
        pulumi.set(__self__, "qos_adaptive_default_downstream_variable", qos_adaptive_default_downstream_variable)
        if qos_adaptive_default_upstream and not isinstance(qos_adaptive_default_upstream, int):
            raise TypeError("Expected argument 'qos_adaptive_default_upstream' to be a int")
        pulumi.set(__self__, "qos_adaptive_default_upstream", qos_adaptive_default_upstream)
        if qos_adaptive_default_upstream_variable and not isinstance(qos_adaptive_default_upstream_variable, str):
            raise TypeError("Expected argument 'qos_adaptive_default_upstream_variable' to be a str")
        pulumi.set(__self__, "qos_adaptive_default_upstream_variable", qos_adaptive_default_upstream_variable)
        if qos_adaptive_max_downstream and not isinstance(qos_adaptive_max_downstream, int):
            raise TypeError("Expected argument 'qos_adaptive_max_downstream' to be a int")
        pulumi.set(__self__, "qos_adaptive_max_downstream", qos_adaptive_max_downstream)
        if qos_adaptive_max_downstream_variable and not isinstance(qos_adaptive_max_downstream_variable, str):
            raise TypeError("Expected argument 'qos_adaptive_max_downstream_variable' to be a str")
        pulumi.set(__self__, "qos_adaptive_max_downstream_variable", qos_adaptive_max_downstream_variable)
        if qos_adaptive_max_upstream and not isinstance(qos_adaptive_max_upstream, int):
            raise TypeError("Expected argument 'qos_adaptive_max_upstream' to be a int")
        pulumi.set(__self__, "qos_adaptive_max_upstream", qos_adaptive_max_upstream)
        if qos_adaptive_max_upstream_variable and not isinstance(qos_adaptive_max_upstream_variable, str):
            raise TypeError("Expected argument 'qos_adaptive_max_upstream_variable' to be a str")
        pulumi.set(__self__, "qos_adaptive_max_upstream_variable", qos_adaptive_max_upstream_variable)
        if qos_adaptive_min_downstream and not isinstance(qos_adaptive_min_downstream, int):
            raise TypeError("Expected argument 'qos_adaptive_min_downstream' to be a int")
        pulumi.set(__self__, "qos_adaptive_min_downstream", qos_adaptive_min_downstream)
        if qos_adaptive_min_downstream_variable and not isinstance(qos_adaptive_min_downstream_variable, str):
            raise TypeError("Expected argument 'qos_adaptive_min_downstream_variable' to be a str")
        pulumi.set(__self__, "qos_adaptive_min_downstream_variable", qos_adaptive_min_downstream_variable)
        if qos_adaptive_min_upstream and not isinstance(qos_adaptive_min_upstream, int):
            raise TypeError("Expected argument 'qos_adaptive_min_upstream' to be a int")
        pulumi.set(__self__, "qos_adaptive_min_upstream", qos_adaptive_min_upstream)
        if qos_adaptive_min_upstream_variable and not isinstance(qos_adaptive_min_upstream_variable, str):
            raise TypeError("Expected argument 'qos_adaptive_min_upstream_variable' to be a str")
        pulumi.set(__self__, "qos_adaptive_min_upstream_variable", qos_adaptive_min_upstream_variable)
        if qos_adaptive_period and not isinstance(qos_adaptive_period, int):
            raise TypeError("Expected argument 'qos_adaptive_period' to be a int")
        pulumi.set(__self__, "qos_adaptive_period", qos_adaptive_period)
        if qos_adaptive_period_variable and not isinstance(qos_adaptive_period_variable, str):
            raise TypeError("Expected argument 'qos_adaptive_period_variable' to be a str")
        pulumi.set(__self__, "qos_adaptive_period_variable", qos_adaptive_period_variable)
        if qos_shaping_rate and not isinstance(qos_shaping_rate, int):
            raise TypeError("Expected argument 'qos_shaping_rate' to be a int")
        pulumi.set(__self__, "qos_shaping_rate", qos_shaping_rate)
        if qos_shaping_rate_variable and not isinstance(qos_shaping_rate_variable, str):
            raise TypeError("Expected argument 'qos_shaping_rate_variable' to be a str")
        pulumi.set(__self__, "qos_shaping_rate_variable", qos_shaping_rate_variable)
        if service_provider and not isinstance(service_provider, str):
            raise TypeError("Expected argument 'service_provider' to be a str")
        pulumi.set(__self__, "service_provider", service_provider)
        if service_provider_variable and not isinstance(service_provider_variable, str):
            raise TypeError("Expected argument 'service_provider_variable' to be a str")
        pulumi.set(__self__, "service_provider_variable", service_provider_variable)
        if shutdown and not isinstance(shutdown, bool):
            raise TypeError("Expected argument 'shutdown' to be a bool")
        pulumi.set(__self__, "shutdown", shutdown)
        if shutdown_variable and not isinstance(shutdown_variable, str):
            raise TypeError("Expected argument 'shutdown_variable' to be a str")
        pulumi.set(__self__, "shutdown_variable", shutdown_variable)
        if speed and not isinstance(speed, str):
            raise TypeError("Expected argument 'speed' to be a str")
        pulumi.set(__self__, "speed", speed)
        if speed_variable and not isinstance(speed_variable, str):
            raise TypeError("Expected argument 'speed_variable' to be a str")
        pulumi.set(__self__, "speed_variable", speed_variable)
        if static_nat66s and not isinstance(static_nat66s, list):
            raise TypeError("Expected argument 'static_nat66s' to be a list")
        pulumi.set(__self__, "static_nat66s", static_nat66s)
        if tcp_mss and not isinstance(tcp_mss, int):
            raise TypeError("Expected argument 'tcp_mss' to be a int")
        pulumi.set(__self__, "tcp_mss", tcp_mss)
        if tcp_mss_variable and not isinstance(tcp_mss_variable, str):
            raise TypeError("Expected argument 'tcp_mss_variable' to be a str")
        pulumi.set(__self__, "tcp_mss_variable", tcp_mss_variable)
        if tloc_extension and not isinstance(tloc_extension, str):
            raise TypeError("Expected argument 'tloc_extension' to be a str")
        pulumi.set(__self__, "tloc_extension", tloc_extension)
        if tloc_extension_variable and not isinstance(tloc_extension_variable, str):
            raise TypeError("Expected argument 'tloc_extension_variable' to be a str")
        pulumi.set(__self__, "tloc_extension_variable", tloc_extension_variable)
        if tracker and not isinstance(tracker, str):
            raise TypeError("Expected argument 'tracker' to be a str")
        pulumi.set(__self__, "tracker", tracker)
        if tracker_variable and not isinstance(tracker_variable, str):
            raise TypeError("Expected argument 'tracker_variable' to be a str")
        pulumi.set(__self__, "tracker_variable", tracker_variable)
        if transport_wan_vpn_feature_id and not isinstance(transport_wan_vpn_feature_id, str):
            raise TypeError("Expected argument 'transport_wan_vpn_feature_id' to be a str")
        pulumi.set(__self__, "transport_wan_vpn_feature_id", transport_wan_vpn_feature_id)
        if tunnel_bandwidth_percent and not isinstance(tunnel_bandwidth_percent, int):
            raise TypeError("Expected argument 'tunnel_bandwidth_percent' to be a int")
        pulumi.set(__self__, "tunnel_bandwidth_percent", tunnel_bandwidth_percent)
        if tunnel_bandwidth_percent_variable and not isinstance(tunnel_bandwidth_percent_variable, str):
            raise TypeError("Expected argument 'tunnel_bandwidth_percent_variable' to be a str")
        pulumi.set(__self__, "tunnel_bandwidth_percent_variable", tunnel_bandwidth_percent_variable)
        if tunnel_interface and not isinstance(tunnel_interface, bool):
            raise TypeError("Expected argument 'tunnel_interface' to be a bool")
        pulumi.set(__self__, "tunnel_interface", tunnel_interface)
        if tunnel_interface_allow_all and not isinstance(tunnel_interface_allow_all, bool):
            raise TypeError("Expected argument 'tunnel_interface_allow_all' to be a bool")
        pulumi.set(__self__, "tunnel_interface_allow_all", tunnel_interface_allow_all)
        if tunnel_interface_allow_all_variable and not isinstance(tunnel_interface_allow_all_variable, str):
            raise TypeError("Expected argument 'tunnel_interface_allow_all_variable' to be a str")
        pulumi.set(__self__, "tunnel_interface_allow_all_variable", tunnel_interface_allow_all_variable)
        if tunnel_interface_allow_bfd and not isinstance(tunnel_interface_allow_bfd, bool):
            raise TypeError("Expected argument 'tunnel_interface_allow_bfd' to be a bool")
        pulumi.set(__self__, "tunnel_interface_allow_bfd", tunnel_interface_allow_bfd)
        if tunnel_interface_allow_bfd_variable and not isinstance(tunnel_interface_allow_bfd_variable, str):
            raise TypeError("Expected argument 'tunnel_interface_allow_bfd_variable' to be a str")
        pulumi.set(__self__, "tunnel_interface_allow_bfd_variable", tunnel_interface_allow_bfd_variable)
        if tunnel_interface_allow_bgp and not isinstance(tunnel_interface_allow_bgp, bool):
            raise TypeError("Expected argument 'tunnel_interface_allow_bgp' to be a bool")
        pulumi.set(__self__, "tunnel_interface_allow_bgp", tunnel_interface_allow_bgp)
        if tunnel_interface_allow_bgp_variable and not isinstance(tunnel_interface_allow_bgp_variable, str):
            raise TypeError("Expected argument 'tunnel_interface_allow_bgp_variable' to be a str")
        pulumi.set(__self__, "tunnel_interface_allow_bgp_variable", tunnel_interface_allow_bgp_variable)
        if tunnel_interface_allow_dhcp and not isinstance(tunnel_interface_allow_dhcp, bool):
            raise TypeError("Expected argument 'tunnel_interface_allow_dhcp' to be a bool")
        pulumi.set(__self__, "tunnel_interface_allow_dhcp", tunnel_interface_allow_dhcp)
        if tunnel_interface_allow_dhcp_variable and not isinstance(tunnel_interface_allow_dhcp_variable, str):
            raise TypeError("Expected argument 'tunnel_interface_allow_dhcp_variable' to be a str")
        pulumi.set(__self__, "tunnel_interface_allow_dhcp_variable", tunnel_interface_allow_dhcp_variable)
        if tunnel_interface_allow_dns and not isinstance(tunnel_interface_allow_dns, bool):
            raise TypeError("Expected argument 'tunnel_interface_allow_dns' to be a bool")
        pulumi.set(__self__, "tunnel_interface_allow_dns", tunnel_interface_allow_dns)
        if tunnel_interface_allow_dns_variable and not isinstance(tunnel_interface_allow_dns_variable, str):
            raise TypeError("Expected argument 'tunnel_interface_allow_dns_variable' to be a str")
        pulumi.set(__self__, "tunnel_interface_allow_dns_variable", tunnel_interface_allow_dns_variable)
        if tunnel_interface_allow_https and not isinstance(tunnel_interface_allow_https, bool):
            raise TypeError("Expected argument 'tunnel_interface_allow_https' to be a bool")
        pulumi.set(__self__, "tunnel_interface_allow_https", tunnel_interface_allow_https)
        if tunnel_interface_allow_https_variable and not isinstance(tunnel_interface_allow_https_variable, str):
            raise TypeError("Expected argument 'tunnel_interface_allow_https_variable' to be a str")
        pulumi.set(__self__, "tunnel_interface_allow_https_variable", tunnel_interface_allow_https_variable)
        if tunnel_interface_allow_icmp and not isinstance(tunnel_interface_allow_icmp, bool):
            raise TypeError("Expected argument 'tunnel_interface_allow_icmp' to be a bool")
        pulumi.set(__self__, "tunnel_interface_allow_icmp", tunnel_interface_allow_icmp)
        if tunnel_interface_allow_icmp_variable and not isinstance(tunnel_interface_allow_icmp_variable, str):
            raise TypeError("Expected argument 'tunnel_interface_allow_icmp_variable' to be a str")
        pulumi.set(__self__, "tunnel_interface_allow_icmp_variable", tunnel_interface_allow_icmp_variable)
        if tunnel_interface_allow_netconf and not isinstance(tunnel_interface_allow_netconf, bool):
            raise TypeError("Expected argument 'tunnel_interface_allow_netconf' to be a bool")
        pulumi.set(__self__, "tunnel_interface_allow_netconf", tunnel_interface_allow_netconf)
        if tunnel_interface_allow_netconf_variable and not isinstance(tunnel_interface_allow_netconf_variable, str):
            raise TypeError("Expected argument 'tunnel_interface_allow_netconf_variable' to be a str")
        pulumi.set(__self__, "tunnel_interface_allow_netconf_variable", tunnel_interface_allow_netconf_variable)
        if tunnel_interface_allow_ntp and not isinstance(tunnel_interface_allow_ntp, bool):
            raise TypeError("Expected argument 'tunnel_interface_allow_ntp' to be a bool")
        pulumi.set(__self__, "tunnel_interface_allow_ntp", tunnel_interface_allow_ntp)
        if tunnel_interface_allow_ntp_variable and not isinstance(tunnel_interface_allow_ntp_variable, str):
            raise TypeError("Expected argument 'tunnel_interface_allow_ntp_variable' to be a str")
        pulumi.set(__self__, "tunnel_interface_allow_ntp_variable", tunnel_interface_allow_ntp_variable)
        if tunnel_interface_allow_ospf and not isinstance(tunnel_interface_allow_ospf, bool):
            raise TypeError("Expected argument 'tunnel_interface_allow_ospf' to be a bool")
        pulumi.set(__self__, "tunnel_interface_allow_ospf", tunnel_interface_allow_ospf)
        if tunnel_interface_allow_ospf_variable and not isinstance(tunnel_interface_allow_ospf_variable, str):
            raise TypeError("Expected argument 'tunnel_interface_allow_ospf_variable' to be a str")
        pulumi.set(__self__, "tunnel_interface_allow_ospf_variable", tunnel_interface_allow_ospf_variable)
        if tunnel_interface_allow_snmp and not isinstance(tunnel_interface_allow_snmp, bool):
            raise TypeError("Expected argument 'tunnel_interface_allow_snmp' to be a bool")
        pulumi.set(__self__, "tunnel_interface_allow_snmp", tunnel_interface_allow_snmp)
        if tunnel_interface_allow_snmp_variable and not isinstance(tunnel_interface_allow_snmp_variable, str):
            raise TypeError("Expected argument 'tunnel_interface_allow_snmp_variable' to be a str")
        pulumi.set(__self__, "tunnel_interface_allow_snmp_variable", tunnel_interface_allow_snmp_variable)
        if tunnel_interface_allow_ssh and not isinstance(tunnel_interface_allow_ssh, bool):
            raise TypeError("Expected argument 'tunnel_interface_allow_ssh' to be a bool")
        pulumi.set(__self__, "tunnel_interface_allow_ssh", tunnel_interface_allow_ssh)
        if tunnel_interface_allow_ssh_variable and not isinstance(tunnel_interface_allow_ssh_variable, str):
            raise TypeError("Expected argument 'tunnel_interface_allow_ssh_variable' to be a str")
        pulumi.set(__self__, "tunnel_interface_allow_ssh_variable", tunnel_interface_allow_ssh_variable)
        if tunnel_interface_allow_stun and not isinstance(tunnel_interface_allow_stun, bool):
            raise TypeError("Expected argument 'tunnel_interface_allow_stun' to be a bool")
        pulumi.set(__self__, "tunnel_interface_allow_stun", tunnel_interface_allow_stun)
        if tunnel_interface_allow_stun_variable and not isinstance(tunnel_interface_allow_stun_variable, str):
            raise TypeError("Expected argument 'tunnel_interface_allow_stun_variable' to be a str")
        pulumi.set(__self__, "tunnel_interface_allow_stun_variable", tunnel_interface_allow_stun_variable)
        if tunnel_interface_bind_loopback_tunnel and not isinstance(tunnel_interface_bind_loopback_tunnel, str):
            raise TypeError("Expected argument 'tunnel_interface_bind_loopback_tunnel' to be a str")
        pulumi.set(__self__, "tunnel_interface_bind_loopback_tunnel", tunnel_interface_bind_loopback_tunnel)
        if tunnel_interface_bind_loopback_tunnel_variable and not isinstance(tunnel_interface_bind_loopback_tunnel_variable, str):
            raise TypeError("Expected argument 'tunnel_interface_bind_loopback_tunnel_variable' to be a str")
        pulumi.set(__self__, "tunnel_interface_bind_loopback_tunnel_variable", tunnel_interface_bind_loopback_tunnel_variable)
        if tunnel_interface_border and not isinstance(tunnel_interface_border, bool):
            raise TypeError("Expected argument 'tunnel_interface_border' to be a bool")
        pulumi.set(__self__, "tunnel_interface_border", tunnel_interface_border)
        if tunnel_interface_border_variable and not isinstance(tunnel_interface_border_variable, str):
            raise TypeError("Expected argument 'tunnel_interface_border_variable' to be a str")
        pulumi.set(__self__, "tunnel_interface_border_variable", tunnel_interface_border_variable)
        if tunnel_interface_carrier and not isinstance(tunnel_interface_carrier, str):
            raise TypeError("Expected argument 'tunnel_interface_carrier' to be a str")
        pulumi.set(__self__, "tunnel_interface_carrier", tunnel_interface_carrier)
        if tunnel_interface_carrier_variable and not isinstance(tunnel_interface_carrier_variable, str):
            raise TypeError("Expected argument 'tunnel_interface_carrier_variable' to be a str")
        pulumi.set(__self__, "tunnel_interface_carrier_variable", tunnel_interface_carrier_variable)
        if tunnel_interface_clear_dont_fragment and not isinstance(tunnel_interface_clear_dont_fragment, bool):
            raise TypeError("Expected argument 'tunnel_interface_clear_dont_fragment' to be a bool")
        pulumi.set(__self__, "tunnel_interface_clear_dont_fragment", tunnel_interface_clear_dont_fragment)
        if tunnel_interface_clear_dont_fragment_variable and not isinstance(tunnel_interface_clear_dont_fragment_variable, str):
            raise TypeError("Expected argument 'tunnel_interface_clear_dont_fragment_variable' to be a str")
        pulumi.set(__self__, "tunnel_interface_clear_dont_fragment_variable", tunnel_interface_clear_dont_fragment_variable)
        if tunnel_interface_color and not isinstance(tunnel_interface_color, str):
            raise TypeError("Expected argument 'tunnel_interface_color' to be a str")
        pulumi.set(__self__, "tunnel_interface_color", tunnel_interface_color)
        if tunnel_interface_color_restrict and not isinstance(tunnel_interface_color_restrict, bool):
            raise TypeError("Expected argument 'tunnel_interface_color_restrict' to be a bool")
        pulumi.set(__self__, "tunnel_interface_color_restrict", tunnel_interface_color_restrict)
        if tunnel_interface_color_restrict_variable and not isinstance(tunnel_interface_color_restrict_variable, str):
            raise TypeError("Expected argument 'tunnel_interface_color_restrict_variable' to be a str")
        pulumi.set(__self__, "tunnel_interface_color_restrict_variable", tunnel_interface_color_restrict_variable)
        if tunnel_interface_color_variable and not isinstance(tunnel_interface_color_variable, str):
            raise TypeError("Expected argument 'tunnel_interface_color_variable' to be a str")
        pulumi.set(__self__, "tunnel_interface_color_variable", tunnel_interface_color_variable)
        if tunnel_interface_cts_sgt_propagation and not isinstance(tunnel_interface_cts_sgt_propagation, bool):
            raise TypeError("Expected argument 'tunnel_interface_cts_sgt_propagation' to be a bool")
        pulumi.set(__self__, "tunnel_interface_cts_sgt_propagation", tunnel_interface_cts_sgt_propagation)
        if tunnel_interface_cts_sgt_propagation_variable and not isinstance(tunnel_interface_cts_sgt_propagation_variable, str):
            raise TypeError("Expected argument 'tunnel_interface_cts_sgt_propagation_variable' to be a str")
        pulumi.set(__self__, "tunnel_interface_cts_sgt_propagation_variable", tunnel_interface_cts_sgt_propagation_variable)
        if tunnel_interface_encapsulations and not isinstance(tunnel_interface_encapsulations, list):
            raise TypeError("Expected argument 'tunnel_interface_encapsulations' to be a list")
        pulumi.set(__self__, "tunnel_interface_encapsulations", tunnel_interface_encapsulations)
        if tunnel_interface_exclude_controller_group_list_variable and not isinstance(tunnel_interface_exclude_controller_group_list_variable, str):
            raise TypeError("Expected argument 'tunnel_interface_exclude_controller_group_list_variable' to be a str")
        pulumi.set(__self__, "tunnel_interface_exclude_controller_group_list_variable", tunnel_interface_exclude_controller_group_list_variable)
        if tunnel_interface_exclude_controller_group_lists and not isinstance(tunnel_interface_exclude_controller_group_lists, list):
            raise TypeError("Expected argument 'tunnel_interface_exclude_controller_group_lists' to be a list")
        pulumi.set(__self__, "tunnel_interface_exclude_controller_group_lists", tunnel_interface_exclude_controller_group_lists)
        if tunnel_interface_gre_tunnel_destination_ip and not isinstance(tunnel_interface_gre_tunnel_destination_ip, str):
            raise TypeError("Expected argument 'tunnel_interface_gre_tunnel_destination_ip' to be a str")
        pulumi.set(__self__, "tunnel_interface_gre_tunnel_destination_ip", tunnel_interface_gre_tunnel_destination_ip)
        if tunnel_interface_gre_tunnel_destination_ip_variable and not isinstance(tunnel_interface_gre_tunnel_destination_ip_variable, str):
            raise TypeError("Expected argument 'tunnel_interface_gre_tunnel_destination_ip_variable' to be a str")
        pulumi.set(__self__, "tunnel_interface_gre_tunnel_destination_ip_variable", tunnel_interface_gre_tunnel_destination_ip_variable)
        if tunnel_interface_groups and not isinstance(tunnel_interface_groups, int):
            raise TypeError("Expected argument 'tunnel_interface_groups' to be a int")
        pulumi.set(__self__, "tunnel_interface_groups", tunnel_interface_groups)
        if tunnel_interface_groups_variable and not isinstance(tunnel_interface_groups_variable, str):
            raise TypeError("Expected argument 'tunnel_interface_groups_variable' to be a str")
        pulumi.set(__self__, "tunnel_interface_groups_variable", tunnel_interface_groups_variable)
        if tunnel_interface_hello_interval and not isinstance(tunnel_interface_hello_interval, int):
            raise TypeError("Expected argument 'tunnel_interface_hello_interval' to be a int")
        pulumi.set(__self__, "tunnel_interface_hello_interval", tunnel_interface_hello_interval)
        if tunnel_interface_hello_interval_variable and not isinstance(tunnel_interface_hello_interval_variable, str):
            raise TypeError("Expected argument 'tunnel_interface_hello_interval_variable' to be a str")
        pulumi.set(__self__, "tunnel_interface_hello_interval_variable", tunnel_interface_hello_interval_variable)
        if tunnel_interface_hello_tolerance and not isinstance(tunnel_interface_hello_tolerance, int):
            raise TypeError("Expected argument 'tunnel_interface_hello_tolerance' to be a int")
        pulumi.set(__self__, "tunnel_interface_hello_tolerance", tunnel_interface_hello_tolerance)
        if tunnel_interface_hello_tolerance_variable and not isinstance(tunnel_interface_hello_tolerance_variable, str):
            raise TypeError("Expected argument 'tunnel_interface_hello_tolerance_variable' to be a str")
        pulumi.set(__self__, "tunnel_interface_hello_tolerance_variable", tunnel_interface_hello_tolerance_variable)
        if tunnel_interface_last_resort_circuit and not isinstance(tunnel_interface_last_resort_circuit, bool):
            raise TypeError("Expected argument 'tunnel_interface_last_resort_circuit' to be a bool")
        pulumi.set(__self__, "tunnel_interface_last_resort_circuit", tunnel_interface_last_resort_circuit)
        if tunnel_interface_last_resort_circuit_variable and not isinstance(tunnel_interface_last_resort_circuit_variable, str):
            raise TypeError("Expected argument 'tunnel_interface_last_resort_circuit_variable' to be a str")
        pulumi.set(__self__, "tunnel_interface_last_resort_circuit_variable", tunnel_interface_last_resort_circuit_variable)
        if tunnel_interface_low_bandwidth_link and not isinstance(tunnel_interface_low_bandwidth_link, bool):
            raise TypeError("Expected argument 'tunnel_interface_low_bandwidth_link' to be a bool")
        pulumi.set(__self__, "tunnel_interface_low_bandwidth_link", tunnel_interface_low_bandwidth_link)
        if tunnel_interface_low_bandwidth_link_variable and not isinstance(tunnel_interface_low_bandwidth_link_variable, str):
            raise TypeError("Expected argument 'tunnel_interface_low_bandwidth_link_variable' to be a str")
        pulumi.set(__self__, "tunnel_interface_low_bandwidth_link_variable", tunnel_interface_low_bandwidth_link_variable)
        if tunnel_interface_max_control_connections and not isinstance(tunnel_interface_max_control_connections, int):
            raise TypeError("Expected argument 'tunnel_interface_max_control_connections' to be a int")
        pulumi.set(__self__, "tunnel_interface_max_control_connections", tunnel_interface_max_control_connections)
        if tunnel_interface_max_control_connections_variable and not isinstance(tunnel_interface_max_control_connections_variable, str):
            raise TypeError("Expected argument 'tunnel_interface_max_control_connections_variable' to be a str")
        pulumi.set(__self__, "tunnel_interface_max_control_connections_variable", tunnel_interface_max_control_connections_variable)
        if tunnel_interface_nat_refresh_interval and not isinstance(tunnel_interface_nat_refresh_interval, int):
            raise TypeError("Expected argument 'tunnel_interface_nat_refresh_interval' to be a int")
        pulumi.set(__self__, "tunnel_interface_nat_refresh_interval", tunnel_interface_nat_refresh_interval)
        if tunnel_interface_nat_refresh_interval_variable and not isinstance(tunnel_interface_nat_refresh_interval_variable, str):
            raise TypeError("Expected argument 'tunnel_interface_nat_refresh_interval_variable' to be a str")
        pulumi.set(__self__, "tunnel_interface_nat_refresh_interval_variable", tunnel_interface_nat_refresh_interval_variable)
        if tunnel_interface_network_broadcast and not isinstance(tunnel_interface_network_broadcast, bool):
            raise TypeError("Expected argument 'tunnel_interface_network_broadcast' to be a bool")
        pulumi.set(__self__, "tunnel_interface_network_broadcast", tunnel_interface_network_broadcast)
        if tunnel_interface_network_broadcast_variable and not isinstance(tunnel_interface_network_broadcast_variable, str):
            raise TypeError("Expected argument 'tunnel_interface_network_broadcast_variable' to be a str")
        pulumi.set(__self__, "tunnel_interface_network_broadcast_variable", tunnel_interface_network_broadcast_variable)
        if tunnel_interface_port_hop and not isinstance(tunnel_interface_port_hop, bool):
            raise TypeError("Expected argument 'tunnel_interface_port_hop' to be a bool")
        pulumi.set(__self__, "tunnel_interface_port_hop", tunnel_interface_port_hop)
        if tunnel_interface_port_hop_variable and not isinstance(tunnel_interface_port_hop_variable, str):
            raise TypeError("Expected argument 'tunnel_interface_port_hop_variable' to be a str")
        pulumi.set(__self__, "tunnel_interface_port_hop_variable", tunnel_interface_port_hop_variable)
        if tunnel_interface_tunnel_tcp_mss and not isinstance(tunnel_interface_tunnel_tcp_mss, int):
            raise TypeError("Expected argument 'tunnel_interface_tunnel_tcp_mss' to be a int")
        pulumi.set(__self__, "tunnel_interface_tunnel_tcp_mss", tunnel_interface_tunnel_tcp_mss)
        if tunnel_interface_tunnel_tcp_mss_variable and not isinstance(tunnel_interface_tunnel_tcp_mss_variable, str):
            raise TypeError("Expected argument 'tunnel_interface_tunnel_tcp_mss_variable' to be a str")
        pulumi.set(__self__, "tunnel_interface_tunnel_tcp_mss_variable", tunnel_interface_tunnel_tcp_mss_variable)
        if tunnel_interface_vbond_as_stun_server and not isinstance(tunnel_interface_vbond_as_stun_server, bool):
            raise TypeError("Expected argument 'tunnel_interface_vbond_as_stun_server' to be a bool")
        pulumi.set(__self__, "tunnel_interface_vbond_as_stun_server", tunnel_interface_vbond_as_stun_server)
        if tunnel_interface_vbond_as_stun_server_variable and not isinstance(tunnel_interface_vbond_as_stun_server_variable, str):
            raise TypeError("Expected argument 'tunnel_interface_vbond_as_stun_server_variable' to be a str")
        pulumi.set(__self__, "tunnel_interface_vbond_as_stun_server_variable", tunnel_interface_vbond_as_stun_server_variable)
        if tunnel_interface_vmanage_connection_preference and not isinstance(tunnel_interface_vmanage_connection_preference, int):
            raise TypeError("Expected argument 'tunnel_interface_vmanage_connection_preference' to be a int")
        pulumi.set(__self__, "tunnel_interface_vmanage_connection_preference", tunnel_interface_vmanage_connection_preference)
        if tunnel_interface_vmanage_connection_preference_variable and not isinstance(tunnel_interface_vmanage_connection_preference_variable, str):
            raise TypeError("Expected argument 'tunnel_interface_vmanage_connection_preference_variable' to be a str")
        pulumi.set(__self__, "tunnel_interface_vmanage_connection_preference_variable", tunnel_interface_vmanage_connection_preference_variable)
        if tunnel_qos_mode and not isinstance(tunnel_qos_mode, str):
            raise TypeError("Expected argument 'tunnel_qos_mode' to be a str")
        pulumi.set(__self__, "tunnel_qos_mode", tunnel_qos_mode)
        if tunnel_qos_mode_variable and not isinstance(tunnel_qos_mode_variable, str):
            raise TypeError("Expected argument 'tunnel_qos_mode_variable' to be a str")
        pulumi.set(__self__, "tunnel_qos_mode_variable", tunnel_qos_mode_variable)
        if version and not isinstance(version, int):
            raise TypeError("Expected argument 'version' to be a int")
        pulumi.set(__self__, "version", version)
        if xconnect and not isinstance(xconnect, str):
            raise TypeError("Expected argument 'xconnect' to be a str")
        pulumi.set(__self__, "xconnect", xconnect)
        if xconnect_variable and not isinstance(xconnect_variable, str):
            raise TypeError("Expected argument 'xconnect_variable' to be a str")
        pulumi.set(__self__, "xconnect_variable", xconnect_variable)

    @_builtins.property
    @pulumi.getter(name="aclIpv4EgressFeatureId")
    def acl_ipv4_egress_feature_id(self) -> _builtins.str:
        return pulumi.get(self, "acl_ipv4_egress_feature_id")

    @_builtins.property
    @pulumi.getter(name="aclIpv4IngressFeatureId")
    def acl_ipv4_ingress_feature_id(self) -> _builtins.str:
        return pulumi.get(self, "acl_ipv4_ingress_feature_id")

    @_builtins.property
    @pulumi.getter(name="aclIpv6EgressFeatureId")
    def acl_ipv6_egress_feature_id(self) -> _builtins.str:
        return pulumi.get(self, "acl_ipv6_egress_feature_id")

    @_builtins.property
    @pulumi.getter(name="aclIpv6IngressFeatureId")
    def acl_ipv6_ingress_feature_id(self) -> _builtins.str:
        return pulumi.get(self, "acl_ipv6_ingress_feature_id")

    @_builtins.property
    @pulumi.getter(name="arpTimeout")
    def arp_timeout(self) -> _builtins.int:
        """
        Timeout value for dynamically learned ARP entries, \\n\\n seconds
        """
        return pulumi.get(self, "arp_timeout")

    @_builtins.property
    @pulumi.getter(name="arpTimeoutVariable")
    def arp_timeout_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "arp_timeout_variable")

    @_builtins.property
    @pulumi.getter
    def arps(self) -> Sequence['outputs.GetTransportWanVpnInterfaceEthernetFeatureArpResult']:
        """
        Configure ARP entries
        """
        return pulumi.get(self, "arps")

    @_builtins.property
    @pulumi.getter(name="autoDetectBandwidth")
    def auto_detect_bandwidth(self) -> _builtins.bool:
        """
        Interface auto detect bandwidth
        """
        return pulumi.get(self, "auto_detect_bandwidth")

    @_builtins.property
    @pulumi.getter(name="autoDetectBandwidthVariable")
    def auto_detect_bandwidth_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "auto_detect_bandwidth_variable")

    @_builtins.property
    @pulumi.getter
    def autonegotiate(self) -> _builtins.bool:
        """
        Link autonegotiation
        """
        return pulumi.get(self, "autonegotiate")

    @_builtins.property
    @pulumi.getter(name="autonegotiateVariable")
    def autonegotiate_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "autonegotiate_variable")

    @_builtins.property
    @pulumi.getter(name="bandwidthDownstream")
    def bandwidth_downstream(self) -> _builtins.int:
        """
        Interface downstream bandwidth capacity, in kbps
        """
        return pulumi.get(self, "bandwidth_downstream")

    @_builtins.property
    @pulumi.getter(name="bandwidthDownstreamVariable")
    def bandwidth_downstream_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "bandwidth_downstream_variable")

    @_builtins.property
    @pulumi.getter(name="bandwidthUpstream")
    def bandwidth_upstream(self) -> _builtins.int:
        """
        Interface upstream bandwidth capacity, in kbps
        """
        return pulumi.get(self, "bandwidth_upstream")

    @_builtins.property
    @pulumi.getter(name="bandwidthUpstreamVariable")
    def bandwidth_upstream_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "bandwidth_upstream_variable")

    @_builtins.property
    @pulumi.getter(name="blockNonSourceIp")
    def block_non_source_ip(self) -> _builtins.bool:
        """
        Block packets originating from IP address that is not from this source
        """
        return pulumi.get(self, "block_non_source_ip")

    @_builtins.property
    @pulumi.getter(name="blockNonSourceIpVariable")
    def block_non_source_ip_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "block_non_source_ip_variable")

    @_builtins.property
    @pulumi.getter
    def description(self) -> _builtins.str:
        """
        The description of the Feature
        """
        return pulumi.get(self, "description")

    @_builtins.property
    @pulumi.getter
    def duplex(self) -> _builtins.str:
        """
        Duplex mode
        """
        return pulumi.get(self, "duplex")

    @_builtins.property
    @pulumi.getter(name="duplexVariable")
    def duplex_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "duplex_variable")

    @_builtins.property
    @pulumi.getter(name="enableDhcpv6")
    def enable_dhcpv6(self) -> _builtins.bool:
        """
        Enable DHCPv6
        """
        return pulumi.get(self, "enable_dhcpv6")

    @_builtins.property
    @pulumi.getter(name="featureProfileId")
    def feature_profile_id(self) -> _builtins.str:
        """
        Feature Profile ID
        """
        return pulumi.get(self, "feature_profile_id")

    @_builtins.property
    @pulumi.getter(name="greTunnelSourceIp")
    def gre_tunnel_source_ip(self) -> _builtins.str:
        """
        GRE tunnel source IP
        """
        return pulumi.get(self, "gre_tunnel_source_ip")

    @_builtins.property
    @pulumi.getter(name="greTunnelSourceIpVariable")
    def gre_tunnel_source_ip_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "gre_tunnel_source_ip_variable")

    @_builtins.property
    @pulumi.getter(name="icmpRedirectDisable")
    def icmp_redirect_disable(self) -> _builtins.bool:
        """
        ICMP/ICMPv6 Redirect Disable
        """
        return pulumi.get(self, "icmp_redirect_disable")

    @_builtins.property
    @pulumi.getter(name="icmpRedirectDisableVariable")
    def icmp_redirect_disable_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "icmp_redirect_disable_variable")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        The id of the Feature
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter(name="interfaceDescription")
    def interface_description(self) -> _builtins.str:
        return pulumi.get(self, "interface_description")

    @_builtins.property
    @pulumi.getter(name="interfaceDescriptionVariable")
    def interface_description_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "interface_description_variable")

    @_builtins.property
    @pulumi.getter(name="interfaceMtu")
    def interface_mtu(self) -> _builtins.int:
        """
        Interface MTU GigabitEthernet0 \\n\\n, Other GigabitEthernet \\n\\n in bytes
        """
        return pulumi.get(self, "interface_mtu")

    @_builtins.property
    @pulumi.getter(name="interfaceMtuVariable")
    def interface_mtu_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "interface_mtu_variable")

    @_builtins.property
    @pulumi.getter(name="interfaceName")
    def interface_name(self) -> _builtins.str:
        return pulumi.get(self, "interface_name")

    @_builtins.property
    @pulumi.getter(name="interfaceNameVariable")
    def interface_name_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "interface_name_variable")

    @_builtins.property
    @pulumi.getter(name="ipDirectedBroadcast")
    def ip_directed_broadcast(self) -> _builtins.bool:
        """
        IP Directed-Broadcast
        """
        return pulumi.get(self, "ip_directed_broadcast")

    @_builtins.property
    @pulumi.getter(name="ipDirectedBroadcastVariable")
    def ip_directed_broadcast_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "ip_directed_broadcast_variable")

    @_builtins.property
    @pulumi.getter(name="ipMtu")
    def ip_mtu(self) -> _builtins.int:
        """
        IP MTU for GigabitEthernet main \\n\\n, GigabitEthernet subinterface \\n\\n, Other Interfaces \\n\\n in bytes
        """
        return pulumi.get(self, "ip_mtu")

    @_builtins.property
    @pulumi.getter(name="ipMtuVariable")
    def ip_mtu_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "ip_mtu_variable")

    @_builtins.property
    @pulumi.getter(name="iperfServer")
    def iperf_server(self) -> _builtins.str:
        """
        Iperf server for auto bandwidth detect
        """
        return pulumi.get(self, "iperf_server")

    @_builtins.property
    @pulumi.getter(name="iperfServerVariable")
    def iperf_server_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "iperf_server_variable")

    @_builtins.property
    @pulumi.getter(name="ipv4Address")
    def ipv4_address(self) -> _builtins.str:
        """
        IP Address
        """
        return pulumi.get(self, "ipv4_address")

    @_builtins.property
    @pulumi.getter(name="ipv4AddressVariable")
    def ipv4_address_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "ipv4_address_variable")

    @_builtins.property
    @pulumi.getter(name="ipv4ConfigurationType")
    def ipv4_configuration_type(self) -> _builtins.str:
        """
        IPv4 Configuration Type
        """
        return pulumi.get(self, "ipv4_configuration_type")

    @_builtins.property
    @pulumi.getter(name="ipv4DhcpDistance")
    def ipv4_dhcp_distance(self) -> _builtins.int:
        """
        DHCP Distance
        """
        return pulumi.get(self, "ipv4_dhcp_distance")

    @_builtins.property
    @pulumi.getter(name="ipv4DhcpDistanceVariable")
    def ipv4_dhcp_distance_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "ipv4_dhcp_distance_variable")

    @_builtins.property
    @pulumi.getter(name="ipv4DhcpHelperVariable")
    def ipv4_dhcp_helper_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "ipv4_dhcp_helper_variable")

    @_builtins.property
    @pulumi.getter(name="ipv4DhcpHelpers")
    def ipv4_dhcp_helpers(self) -> Sequence[_builtins.str]:
        """
        List of DHCP IPv4 helper addresses (min 1, max 8)
        """
        return pulumi.get(self, "ipv4_dhcp_helpers")

    @_builtins.property
    @pulumi.getter(name="ipv4SecondaryAddresses")
    def ipv4_secondary_addresses(self) -> Sequence['outputs.GetTransportWanVpnInterfaceEthernetFeatureIpv4SecondaryAddressResult']:
        """
        Secondary IpV4 Addresses
        """
        return pulumi.get(self, "ipv4_secondary_addresses")

    @_builtins.property
    @pulumi.getter(name="ipv4SubnetMask")
    def ipv4_subnet_mask(self) -> _builtins.str:
        """
        Subnet Mask
        """
        return pulumi.get(self, "ipv4_subnet_mask")

    @_builtins.property
    @pulumi.getter(name="ipv4SubnetMaskVariable")
    def ipv4_subnet_mask_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "ipv4_subnet_mask_variable")

    @_builtins.property
    @pulumi.getter(name="ipv6Address")
    def ipv6_address(self) -> _builtins.str:
        """
        IPv6 Address Secondary
        """
        return pulumi.get(self, "ipv6_address")

    @_builtins.property
    @pulumi.getter(name="ipv6AddressVariable")
    def ipv6_address_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "ipv6_address_variable")

    @_builtins.property
    @pulumi.getter(name="ipv6ConfigurationType")
    def ipv6_configuration_type(self) -> _builtins.str:
        """
        IPv6 Configuration Type
        """
        return pulumi.get(self, "ipv6_configuration_type")

    @_builtins.property
    @pulumi.getter(name="ipv6DhcpSecondaryAddresses")
    def ipv6_dhcp_secondary_addresses(self) -> Sequence['outputs.GetTransportWanVpnInterfaceEthernetFeatureIpv6DhcpSecondaryAddressResult']:
        """
        secondary IPv6 addresses
        """
        return pulumi.get(self, "ipv6_dhcp_secondary_addresses")

    @_builtins.property
    @pulumi.getter(name="ipv6SecondaryAddresses")
    def ipv6_secondary_addresses(self) -> Sequence['outputs.GetTransportWanVpnInterfaceEthernetFeatureIpv6SecondaryAddressResult']:
        """
        Static secondary IPv6 addresses
        """
        return pulumi.get(self, "ipv6_secondary_addresses")

    @_builtins.property
    @pulumi.getter(name="loadInterval")
    def load_interval(self) -> _builtins.int:
        """
        Interval for interface load calculation
        """
        return pulumi.get(self, "load_interval")

    @_builtins.property
    @pulumi.getter(name="loadIntervalVariable")
    def load_interval_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "load_interval_variable")

    @_builtins.property
    @pulumi.getter(name="macAddress")
    def mac_address(self) -> _builtins.str:
        """
        MAC Address
        """
        return pulumi.get(self, "mac_address")

    @_builtins.property
    @pulumi.getter(name="macAddressVariable")
    def mac_address_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "mac_address_variable")

    @_builtins.property
    @pulumi.getter(name="mediaType")
    def media_type(self) -> _builtins.str:
        """
        Media type
        """
        return pulumi.get(self, "media_type")

    @_builtins.property
    @pulumi.getter(name="mediaTypeVariable")
    def media_type_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "media_type_variable")

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        """
        The name of the Feature
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def nat64(self) -> _builtins.bool:
        """
        NAT64 on this interface
        """
        return pulumi.get(self, "nat64")

    @_builtins.property
    @pulumi.getter
    def nat66(self) -> _builtins.bool:
        """
        NAT66 on this interface
        """
        return pulumi.get(self, "nat66")

    @_builtins.property
    @pulumi.getter(name="natIpv4")
    def nat_ipv4(self) -> _builtins.bool:
        """
        enable Network Address Translation on this interface
        """
        return pulumi.get(self, "nat_ipv4")

    @_builtins.property
    @pulumi.getter(name="natIpv4Variable")
    def nat_ipv4_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "nat_ipv4_variable")

    @_builtins.property
    @pulumi.getter(name="natIpv6")
    def nat_ipv6(self) -> _builtins.bool:
        """
        enable Network Address Translation ipv6 on this interface
        """
        return pulumi.get(self, "nat_ipv6")

    @_builtins.property
    @pulumi.getter(name="natIpv6Variable")
    def nat_ipv6_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "nat_ipv6_variable")

    @_builtins.property
    @pulumi.getter(name="natLoopback")
    def nat_loopback(self) -> _builtins.str:
        """
        NAT Inside Source Loopback Interface
        """
        return pulumi.get(self, "nat_loopback")

    @_builtins.property
    @pulumi.getter(name="natLoopbackVariable")
    def nat_loopback_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "nat_loopback_variable")

    @_builtins.property
    @pulumi.getter(name="natOverload")
    def nat_overload(self) -> _builtins.bool:
        """
        NAT Overload
        """
        return pulumi.get(self, "nat_overload")

    @_builtins.property
    @pulumi.getter(name="natOverloadVariable")
    def nat_overload_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "nat_overload_variable")

    @_builtins.property
    @pulumi.getter(name="natPrefixLength")
    def nat_prefix_length(self) -> _builtins.int:
        """
        NAT Pool Prefix Length
        """
        return pulumi.get(self, "nat_prefix_length")

    @_builtins.property
    @pulumi.getter(name="natPrefixLengthVariable")
    def nat_prefix_length_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "nat_prefix_length_variable")

    @_builtins.property
    @pulumi.getter(name="natRangeEnd")
    def nat_range_end(self) -> _builtins.str:
        """
        NAT Pool Range End
        """
        return pulumi.get(self, "nat_range_end")

    @_builtins.property
    @pulumi.getter(name="natRangeEndVariable")
    def nat_range_end_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "nat_range_end_variable")

    @_builtins.property
    @pulumi.getter(name="natRangeStart")
    def nat_range_start(self) -> _builtins.str:
        """
        NAT Pool Range Start
        """
        return pulumi.get(self, "nat_range_start")

    @_builtins.property
    @pulumi.getter(name="natRangeStartVariable")
    def nat_range_start_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "nat_range_start_variable")

    @_builtins.property
    @pulumi.getter(name="natTcpTimeout")
    def nat_tcp_timeout(self) -> _builtins.int:
        """
        Set NAT TCP session timeout, in minutes
        """
        return pulumi.get(self, "nat_tcp_timeout")

    @_builtins.property
    @pulumi.getter(name="natTcpTimeoutVariable")
    def nat_tcp_timeout_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "nat_tcp_timeout_variable")

    @_builtins.property
    @pulumi.getter(name="natType")
    def nat_type(self) -> _builtins.str:
        """
        NAT Type
        """
        return pulumi.get(self, "nat_type")

    @_builtins.property
    @pulumi.getter(name="natTypeVariable")
    def nat_type_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "nat_type_variable")

    @_builtins.property
    @pulumi.getter(name="natUdpTimeout")
    def nat_udp_timeout(self) -> _builtins.int:
        """
        Set NAT UDP session timeout, in minutes
        """
        return pulumi.get(self, "nat_udp_timeout")

    @_builtins.property
    @pulumi.getter(name="natUdpTimeoutVariable")
    def nat_udp_timeout_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "nat_udp_timeout_variable")

    @_builtins.property
    @pulumi.getter(name="newStaticNats")
    def new_static_nats(self) -> Sequence['outputs.GetTransportWanVpnInterfaceEthernetFeatureNewStaticNatResult']:
        """
        static NAT
        """
        return pulumi.get(self, "new_static_nats")

    @_builtins.property
    @pulumi.getter(name="perTunnelQos")
    def per_tunnel_qos(self) -> _builtins.bool:
        """
        Per-tunnel Qos
        """
        return pulumi.get(self, "per_tunnel_qos")

    @_builtins.property
    @pulumi.getter(name="perTunnelQosVariable")
    def per_tunnel_qos_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "per_tunnel_qos_variable")

    @_builtins.property
    @pulumi.getter(name="qosAdaptive")
    def qos_adaptive(self) -> _builtins.bool:
        """
        Adaptive QoS
        """
        return pulumi.get(self, "qos_adaptive")

    @_builtins.property
    @pulumi.getter(name="qosAdaptiveBandwidthDownstream")
    def qos_adaptive_bandwidth_downstream(self) -> _builtins.bool:
        """
        Shaping Rate Downstream
        """
        return pulumi.get(self, "qos_adaptive_bandwidth_downstream")

    @_builtins.property
    @pulumi.getter(name="qosAdaptiveBandwidthUpstream")
    def qos_adaptive_bandwidth_upstream(self) -> _builtins.bool:
        """
        Shaping Rate Upstream
        """
        return pulumi.get(self, "qos_adaptive_bandwidth_upstream")

    @_builtins.property
    @pulumi.getter(name="qosAdaptiveDefaultDownstream")
    def qos_adaptive_default_downstream(self) -> _builtins.int:
        """
        Adaptive QoS default downstream bandwidth (kbps)
        """
        return pulumi.get(self, "qos_adaptive_default_downstream")

    @_builtins.property
    @pulumi.getter(name="qosAdaptiveDefaultDownstreamVariable")
    def qos_adaptive_default_downstream_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "qos_adaptive_default_downstream_variable")

    @_builtins.property
    @pulumi.getter(name="qosAdaptiveDefaultUpstream")
    def qos_adaptive_default_upstream(self) -> _builtins.int:
        """
        Adaptive QoS default upstream bandwidth (kbps)
        """
        return pulumi.get(self, "qos_adaptive_default_upstream")

    @_builtins.property
    @pulumi.getter(name="qosAdaptiveDefaultUpstreamVariable")
    def qos_adaptive_default_upstream_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "qos_adaptive_default_upstream_variable")

    @_builtins.property
    @pulumi.getter(name="qosAdaptiveMaxDownstream")
    def qos_adaptive_max_downstream(self) -> _builtins.int:
        """
        Downstream max bandwidth limit (kbps)
        """
        return pulumi.get(self, "qos_adaptive_max_downstream")

    @_builtins.property
    @pulumi.getter(name="qosAdaptiveMaxDownstreamVariable")
    def qos_adaptive_max_downstream_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "qos_adaptive_max_downstream_variable")

    @_builtins.property
    @pulumi.getter(name="qosAdaptiveMaxUpstream")
    def qos_adaptive_max_upstream(self) -> _builtins.int:
        """
        Upstream max bandwidth limit (kbps)
        """
        return pulumi.get(self, "qos_adaptive_max_upstream")

    @_builtins.property
    @pulumi.getter(name="qosAdaptiveMaxUpstreamVariable")
    def qos_adaptive_max_upstream_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "qos_adaptive_max_upstream_variable")

    @_builtins.property
    @pulumi.getter(name="qosAdaptiveMinDownstream")
    def qos_adaptive_min_downstream(self) -> _builtins.int:
        """
        Downstream min bandwidth limit (kbps)
        """
        return pulumi.get(self, "qos_adaptive_min_downstream")

    @_builtins.property
    @pulumi.getter(name="qosAdaptiveMinDownstreamVariable")
    def qos_adaptive_min_downstream_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "qos_adaptive_min_downstream_variable")

    @_builtins.property
    @pulumi.getter(name="qosAdaptiveMinUpstream")
    def qos_adaptive_min_upstream(self) -> _builtins.int:
        """
        Upstream min bandwidth limit (kbps)
        """
        return pulumi.get(self, "qos_adaptive_min_upstream")

    @_builtins.property
    @pulumi.getter(name="qosAdaptiveMinUpstreamVariable")
    def qos_adaptive_min_upstream_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "qos_adaptive_min_upstream_variable")

    @_builtins.property
    @pulumi.getter(name="qosAdaptivePeriod")
    def qos_adaptive_period(self) -> _builtins.int:
        """
        Adapt Period(Minutes)
        """
        return pulumi.get(self, "qos_adaptive_period")

    @_builtins.property
    @pulumi.getter(name="qosAdaptivePeriodVariable")
    def qos_adaptive_period_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "qos_adaptive_period_variable")

    @_builtins.property
    @pulumi.getter(name="qosShapingRate")
    def qos_shaping_rate(self) -> _builtins.int:
        """
        Shaping Rate (Kbps)
        """
        return pulumi.get(self, "qos_shaping_rate")

    @_builtins.property
    @pulumi.getter(name="qosShapingRateVariable")
    def qos_shaping_rate_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "qos_shaping_rate_variable")

    @_builtins.property
    @pulumi.getter(name="serviceProvider")
    def service_provider(self) -> _builtins.str:
        """
        Service Provider Name
        """
        return pulumi.get(self, "service_provider")

    @_builtins.property
    @pulumi.getter(name="serviceProviderVariable")
    def service_provider_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "service_provider_variable")

    @_builtins.property
    @pulumi.getter
    def shutdown(self) -> _builtins.bool:
        return pulumi.get(self, "shutdown")

    @_builtins.property
    @pulumi.getter(name="shutdownVariable")
    def shutdown_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "shutdown_variable")

    @_builtins.property
    @pulumi.getter
    def speed(self) -> _builtins.str:
        """
        Set interface speed
        """
        return pulumi.get(self, "speed")

    @_builtins.property
    @pulumi.getter(name="speedVariable")
    def speed_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "speed_variable")

    @_builtins.property
    @pulumi.getter(name="staticNat66s")
    def static_nat66s(self) -> Sequence['outputs.GetTransportWanVpnInterfaceEthernetFeatureStaticNat66Result']:
        """
        static NAT66
        """
        return pulumi.get(self, "static_nat66s")

    @_builtins.property
    @pulumi.getter(name="tcpMss")
    def tcp_mss(self) -> _builtins.int:
        """
        TCP MSS on SYN packets, in bytes
        """
        return pulumi.get(self, "tcp_mss")

    @_builtins.property
    @pulumi.getter(name="tcpMssVariable")
    def tcp_mss_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "tcp_mss_variable")

    @_builtins.property
    @pulumi.getter(name="tlocExtension")
    def tloc_extension(self) -> _builtins.str:
        """
        Extends a local TLOC to a remote node only for vpn 0
        """
        return pulumi.get(self, "tloc_extension")

    @_builtins.property
    @pulumi.getter(name="tlocExtensionVariable")
    def tloc_extension_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "tloc_extension_variable")

    @_builtins.property
    @pulumi.getter
    def tracker(self) -> _builtins.str:
        """
        Enable tracker for this interface
        """
        return pulumi.get(self, "tracker")

    @_builtins.property
    @pulumi.getter(name="trackerVariable")
    def tracker_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "tracker_variable")

    @_builtins.property
    @pulumi.getter(name="transportWanVpnFeatureId")
    def transport_wan_vpn_feature_id(self) -> _builtins.str:
        """
        Transport WAN VPN Feature ID
        """
        return pulumi.get(self, "transport_wan_vpn_feature_id")

    @_builtins.property
    @pulumi.getter(name="tunnelBandwidthPercent")
    def tunnel_bandwidth_percent(self) -> _builtins.int:
        """
        Tunnels Bandwidth Percent
        """
        return pulumi.get(self, "tunnel_bandwidth_percent")

    @_builtins.property
    @pulumi.getter(name="tunnelBandwidthPercentVariable")
    def tunnel_bandwidth_percent_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "tunnel_bandwidth_percent_variable")

    @_builtins.property
    @pulumi.getter(name="tunnelInterface")
    def tunnel_interface(self) -> _builtins.bool:
        """
        Tunnel Interface on/off
        """
        return pulumi.get(self, "tunnel_interface")

    @_builtins.property
    @pulumi.getter(name="tunnelInterfaceAllowAll")
    def tunnel_interface_allow_all(self) -> _builtins.bool:
        """
        Allow all traffic. Overrides all other allow-service options if allow-service all is set
        """
        return pulumi.get(self, "tunnel_interface_allow_all")

    @_builtins.property
    @pulumi.getter(name="tunnelInterfaceAllowAllVariable")
    def tunnel_interface_allow_all_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "tunnel_interface_allow_all_variable")

    @_builtins.property
    @pulumi.getter(name="tunnelInterfaceAllowBfd")
    def tunnel_interface_allow_bfd(self) -> _builtins.bool:
        """
        Allow/Deny BFD
        """
        return pulumi.get(self, "tunnel_interface_allow_bfd")

    @_builtins.property
    @pulumi.getter(name="tunnelInterfaceAllowBfdVariable")
    def tunnel_interface_allow_bfd_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "tunnel_interface_allow_bfd_variable")

    @_builtins.property
    @pulumi.getter(name="tunnelInterfaceAllowBgp")
    def tunnel_interface_allow_bgp(self) -> _builtins.bool:
        """
        Allow/deny BGP
        """
        return pulumi.get(self, "tunnel_interface_allow_bgp")

    @_builtins.property
    @pulumi.getter(name="tunnelInterfaceAllowBgpVariable")
    def tunnel_interface_allow_bgp_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "tunnel_interface_allow_bgp_variable")

    @_builtins.property
    @pulumi.getter(name="tunnelInterfaceAllowDhcp")
    def tunnel_interface_allow_dhcp(self) -> _builtins.bool:
        """
        Allow/Deny DHCP
        """
        return pulumi.get(self, "tunnel_interface_allow_dhcp")

    @_builtins.property
    @pulumi.getter(name="tunnelInterfaceAllowDhcpVariable")
    def tunnel_interface_allow_dhcp_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "tunnel_interface_allow_dhcp_variable")

    @_builtins.property
    @pulumi.getter(name="tunnelInterfaceAllowDns")
    def tunnel_interface_allow_dns(self) -> _builtins.bool:
        """
        Allow/Deny DNS
        """
        return pulumi.get(self, "tunnel_interface_allow_dns")

    @_builtins.property
    @pulumi.getter(name="tunnelInterfaceAllowDnsVariable")
    def tunnel_interface_allow_dns_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "tunnel_interface_allow_dns_variable")

    @_builtins.property
    @pulumi.getter(name="tunnelInterfaceAllowHttps")
    def tunnel_interface_allow_https(self) -> _builtins.bool:
        """
        Allow/Deny HTTPS
        """
        return pulumi.get(self, "tunnel_interface_allow_https")

    @_builtins.property
    @pulumi.getter(name="tunnelInterfaceAllowHttpsVariable")
    def tunnel_interface_allow_https_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "tunnel_interface_allow_https_variable")

    @_builtins.property
    @pulumi.getter(name="tunnelInterfaceAllowIcmp")
    def tunnel_interface_allow_icmp(self) -> _builtins.bool:
        """
        Allow/Deny ICMP
        """
        return pulumi.get(self, "tunnel_interface_allow_icmp")

    @_builtins.property
    @pulumi.getter(name="tunnelInterfaceAllowIcmpVariable")
    def tunnel_interface_allow_icmp_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "tunnel_interface_allow_icmp_variable")

    @_builtins.property
    @pulumi.getter(name="tunnelInterfaceAllowNetconf")
    def tunnel_interface_allow_netconf(self) -> _builtins.bool:
        """
        Allow/Deny NETCONF
        """
        return pulumi.get(self, "tunnel_interface_allow_netconf")

    @_builtins.property
    @pulumi.getter(name="tunnelInterfaceAllowNetconfVariable")
    def tunnel_interface_allow_netconf_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "tunnel_interface_allow_netconf_variable")

    @_builtins.property
    @pulumi.getter(name="tunnelInterfaceAllowNtp")
    def tunnel_interface_allow_ntp(self) -> _builtins.bool:
        """
        Allow/Deny NTP
        """
        return pulumi.get(self, "tunnel_interface_allow_ntp")

    @_builtins.property
    @pulumi.getter(name="tunnelInterfaceAllowNtpVariable")
    def tunnel_interface_allow_ntp_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "tunnel_interface_allow_ntp_variable")

    @_builtins.property
    @pulumi.getter(name="tunnelInterfaceAllowOspf")
    def tunnel_interface_allow_ospf(self) -> _builtins.bool:
        """
        Allow/Deny OSPF
        """
        return pulumi.get(self, "tunnel_interface_allow_ospf")

    @_builtins.property
    @pulumi.getter(name="tunnelInterfaceAllowOspfVariable")
    def tunnel_interface_allow_ospf_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "tunnel_interface_allow_ospf_variable")

    @_builtins.property
    @pulumi.getter(name="tunnelInterfaceAllowSnmp")
    def tunnel_interface_allow_snmp(self) -> _builtins.bool:
        """
        Allow/Deny SNMP
        """
        return pulumi.get(self, "tunnel_interface_allow_snmp")

    @_builtins.property
    @pulumi.getter(name="tunnelInterfaceAllowSnmpVariable")
    def tunnel_interface_allow_snmp_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "tunnel_interface_allow_snmp_variable")

    @_builtins.property
    @pulumi.getter(name="tunnelInterfaceAllowSsh")
    def tunnel_interface_allow_ssh(self) -> _builtins.bool:
        """
        Allow/Deny SSH
        """
        return pulumi.get(self, "tunnel_interface_allow_ssh")

    @_builtins.property
    @pulumi.getter(name="tunnelInterfaceAllowSshVariable")
    def tunnel_interface_allow_ssh_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "tunnel_interface_allow_ssh_variable")

    @_builtins.property
    @pulumi.getter(name="tunnelInterfaceAllowStun")
    def tunnel_interface_allow_stun(self) -> _builtins.bool:
        """
        Allow/Deny STUN
        """
        return pulumi.get(self, "tunnel_interface_allow_stun")

    @_builtins.property
    @pulumi.getter(name="tunnelInterfaceAllowStunVariable")
    def tunnel_interface_allow_stun_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "tunnel_interface_allow_stun_variable")

    @_builtins.property
    @pulumi.getter(name="tunnelInterfaceBindLoopbackTunnel")
    def tunnel_interface_bind_loopback_tunnel(self) -> _builtins.str:
        """
        Bind loopback tunnel interface to a physical interface
        """
        return pulumi.get(self, "tunnel_interface_bind_loopback_tunnel")

    @_builtins.property
    @pulumi.getter(name="tunnelInterfaceBindLoopbackTunnelVariable")
    def tunnel_interface_bind_loopback_tunnel_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "tunnel_interface_bind_loopback_tunnel_variable")

    @_builtins.property
    @pulumi.getter(name="tunnelInterfaceBorder")
    def tunnel_interface_border(self) -> _builtins.bool:
        """
        Set TLOC as border TLOC
        """
        return pulumi.get(self, "tunnel_interface_border")

    @_builtins.property
    @pulumi.getter(name="tunnelInterfaceBorderVariable")
    def tunnel_interface_border_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "tunnel_interface_border_variable")

    @_builtins.property
    @pulumi.getter(name="tunnelInterfaceCarrier")
    def tunnel_interface_carrier(self) -> _builtins.str:
        """
        Set carrier for TLOC
        """
        return pulumi.get(self, "tunnel_interface_carrier")

    @_builtins.property
    @pulumi.getter(name="tunnelInterfaceCarrierVariable")
    def tunnel_interface_carrier_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "tunnel_interface_carrier_variable")

    @_builtins.property
    @pulumi.getter(name="tunnelInterfaceClearDontFragment")
    def tunnel_interface_clear_dont_fragment(self) -> _builtins.bool:
        """
        Enable clear dont fragment (Currently Only SDWAN Tunnel Interface)
        """
        return pulumi.get(self, "tunnel_interface_clear_dont_fragment")

    @_builtins.property
    @pulumi.getter(name="tunnelInterfaceClearDontFragmentVariable")
    def tunnel_interface_clear_dont_fragment_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "tunnel_interface_clear_dont_fragment_variable")

    @_builtins.property
    @pulumi.getter(name="tunnelInterfaceColor")
    def tunnel_interface_color(self) -> _builtins.str:
        """
        Set color for TLOC
        """
        return pulumi.get(self, "tunnel_interface_color")

    @_builtins.property
    @pulumi.getter(name="tunnelInterfaceColorRestrict")
    def tunnel_interface_color_restrict(self) -> _builtins.bool:
        """
        Restrict this TLOC behavior
        """
        return pulumi.get(self, "tunnel_interface_color_restrict")

    @_builtins.property
    @pulumi.getter(name="tunnelInterfaceColorRestrictVariable")
    def tunnel_interface_color_restrict_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "tunnel_interface_color_restrict_variable")

    @_builtins.property
    @pulumi.getter(name="tunnelInterfaceColorVariable")
    def tunnel_interface_color_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "tunnel_interface_color_variable")

    @_builtins.property
    @pulumi.getter(name="tunnelInterfaceCtsSgtPropagation")
    def tunnel_interface_cts_sgt_propagation(self) -> _builtins.bool:
        """
        CTS SGT Propagation configuration
        """
        return pulumi.get(self, "tunnel_interface_cts_sgt_propagation")

    @_builtins.property
    @pulumi.getter(name="tunnelInterfaceCtsSgtPropagationVariable")
    def tunnel_interface_cts_sgt_propagation_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "tunnel_interface_cts_sgt_propagation_variable")

    @_builtins.property
    @pulumi.getter(name="tunnelInterfaceEncapsulations")
    def tunnel_interface_encapsulations(self) -> Sequence['outputs.GetTransportWanVpnInterfaceEthernetFeatureTunnelInterfaceEncapsulationResult']:
        """
        Encapsulation for TLOC
        """
        return pulumi.get(self, "tunnel_interface_encapsulations")

    @_builtins.property
    @pulumi.getter(name="tunnelInterfaceExcludeControllerGroupListVariable")
    def tunnel_interface_exclude_controller_group_list_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "tunnel_interface_exclude_controller_group_list_variable")

    @_builtins.property
    @pulumi.getter(name="tunnelInterfaceExcludeControllerGroupLists")
    def tunnel_interface_exclude_controller_group_lists(self) -> Sequence[_builtins.int]:
        """
        Exclude the following controller groups defined in this list.
        """
        return pulumi.get(self, "tunnel_interface_exclude_controller_group_lists")

    @_builtins.property
    @pulumi.getter(name="tunnelInterfaceGreTunnelDestinationIp")
    def tunnel_interface_gre_tunnel_destination_ip(self) -> _builtins.str:
        """
        GRE tunnel destination IP
        """
        return pulumi.get(self, "tunnel_interface_gre_tunnel_destination_ip")

    @_builtins.property
    @pulumi.getter(name="tunnelInterfaceGreTunnelDestinationIpVariable")
    def tunnel_interface_gre_tunnel_destination_ip_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "tunnel_interface_gre_tunnel_destination_ip_variable")

    @_builtins.property
    @pulumi.getter(name="tunnelInterfaceGroups")
    def tunnel_interface_groups(self) -> _builtins.int:
        """
        List of groups
        """
        return pulumi.get(self, "tunnel_interface_groups")

    @_builtins.property
    @pulumi.getter(name="tunnelInterfaceGroupsVariable")
    def tunnel_interface_groups_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "tunnel_interface_groups_variable")

    @_builtins.property
    @pulumi.getter(name="tunnelInterfaceHelloInterval")
    def tunnel_interface_hello_interval(self) -> _builtins.int:
        """
        Set time period of control hello packets \\n\\n milli seconds
        """
        return pulumi.get(self, "tunnel_interface_hello_interval")

    @_builtins.property
    @pulumi.getter(name="tunnelInterfaceHelloIntervalVariable")
    def tunnel_interface_hello_interval_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "tunnel_interface_hello_interval_variable")

    @_builtins.property
    @pulumi.getter(name="tunnelInterfaceHelloTolerance")
    def tunnel_interface_hello_tolerance(self) -> _builtins.int:
        """
        Set tolerance of control hello packets \\n\\n seconds
        """
        return pulumi.get(self, "tunnel_interface_hello_tolerance")

    @_builtins.property
    @pulumi.getter(name="tunnelInterfaceHelloToleranceVariable")
    def tunnel_interface_hello_tolerance_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "tunnel_interface_hello_tolerance_variable")

    @_builtins.property
    @pulumi.getter(name="tunnelInterfaceLastResortCircuit")
    def tunnel_interface_last_resort_circuit(self) -> _builtins.bool:
        """
        Set TLOC as last resort
        """
        return pulumi.get(self, "tunnel_interface_last_resort_circuit")

    @_builtins.property
    @pulumi.getter(name="tunnelInterfaceLastResortCircuitVariable")
    def tunnel_interface_last_resort_circuit_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "tunnel_interface_last_resort_circuit_variable")

    @_builtins.property
    @pulumi.getter(name="tunnelInterfaceLowBandwidthLink")
    def tunnel_interface_low_bandwidth_link(self) -> _builtins.bool:
        """
        Set the interface as a low-bandwidth circuit
        """
        return pulumi.get(self, "tunnel_interface_low_bandwidth_link")

    @_builtins.property
    @pulumi.getter(name="tunnelInterfaceLowBandwidthLinkVariable")
    def tunnel_interface_low_bandwidth_link_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "tunnel_interface_low_bandwidth_link_variable")

    @_builtins.property
    @pulumi.getter(name="tunnelInterfaceMaxControlConnections")
    def tunnel_interface_max_control_connections(self) -> _builtins.int:
        """
        Maximum Control Connections
        """
        return pulumi.get(self, "tunnel_interface_max_control_connections")

    @_builtins.property
    @pulumi.getter(name="tunnelInterfaceMaxControlConnectionsVariable")
    def tunnel_interface_max_control_connections_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "tunnel_interface_max_control_connections_variable")

    @_builtins.property
    @pulumi.getter(name="tunnelInterfaceNatRefreshInterval")
    def tunnel_interface_nat_refresh_interval(self) -> _builtins.int:
        """
        Set time period of nat refresh packets \\n\\n seconds
        """
        return pulumi.get(self, "tunnel_interface_nat_refresh_interval")

    @_builtins.property
    @pulumi.getter(name="tunnelInterfaceNatRefreshIntervalVariable")
    def tunnel_interface_nat_refresh_interval_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "tunnel_interface_nat_refresh_interval_variable")

    @_builtins.property
    @pulumi.getter(name="tunnelInterfaceNetworkBroadcast")
    def tunnel_interface_network_broadcast(self) -> _builtins.bool:
        """
        Accept and respond to network-prefix-directed broadcasts
        """
        return pulumi.get(self, "tunnel_interface_network_broadcast")

    @_builtins.property
    @pulumi.getter(name="tunnelInterfaceNetworkBroadcastVariable")
    def tunnel_interface_network_broadcast_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "tunnel_interface_network_broadcast_variable")

    @_builtins.property
    @pulumi.getter(name="tunnelInterfacePortHop")
    def tunnel_interface_port_hop(self) -> _builtins.bool:
        """
        Disallow port hopping on the tunnel interface
        """
        return pulumi.get(self, "tunnel_interface_port_hop")

    @_builtins.property
    @pulumi.getter(name="tunnelInterfacePortHopVariable")
    def tunnel_interface_port_hop_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "tunnel_interface_port_hop_variable")

    @_builtins.property
    @pulumi.getter(name="tunnelInterfaceTunnelTcpMss")
    def tunnel_interface_tunnel_tcp_mss(self) -> _builtins.int:
        """
        Tunnel TCP MSS on SYN packets, in bytes
        """
        return pulumi.get(self, "tunnel_interface_tunnel_tcp_mss")

    @_builtins.property
    @pulumi.getter(name="tunnelInterfaceTunnelTcpMssVariable")
    def tunnel_interface_tunnel_tcp_mss_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "tunnel_interface_tunnel_tcp_mss_variable")

    @_builtins.property
    @pulumi.getter(name="tunnelInterfaceVbondAsStunServer")
    def tunnel_interface_vbond_as_stun_server(self) -> _builtins.bool:
        """
        Put this wan interface in STUN mode only
        """
        return pulumi.get(self, "tunnel_interface_vbond_as_stun_server")

    @_builtins.property
    @pulumi.getter(name="tunnelInterfaceVbondAsStunServerVariable")
    def tunnel_interface_vbond_as_stun_server_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "tunnel_interface_vbond_as_stun_server_variable")

    @_builtins.property
    @pulumi.getter(name="tunnelInterfaceVmanageConnectionPreference")
    def tunnel_interface_vmanage_connection_preference(self) -> _builtins.int:
        """
        Set interface preference for control connection to vManage \\n\\n
        """
        return pulumi.get(self, "tunnel_interface_vmanage_connection_preference")

    @_builtins.property
    @pulumi.getter(name="tunnelInterfaceVmanageConnectionPreferenceVariable")
    def tunnel_interface_vmanage_connection_preference_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "tunnel_interface_vmanage_connection_preference_variable")

    @_builtins.property
    @pulumi.getter(name="tunnelQosMode")
    def tunnel_qos_mode(self) -> _builtins.str:
        """
        Set tunnel QoS mode
        """
        return pulumi.get(self, "tunnel_qos_mode")

    @_builtins.property
    @pulumi.getter(name="tunnelQosModeVariable")
    def tunnel_qos_mode_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "tunnel_qos_mode_variable")

    @_builtins.property
    @pulumi.getter
    def version(self) -> _builtins.int:
        """
        The version of the Feature
        """
        return pulumi.get(self, "version")

    @_builtins.property
    @pulumi.getter
    def xconnect(self) -> _builtins.str:
        """
        Extend remote TLOC over a GRE tunnel to a local WAN interface
        """
        return pulumi.get(self, "xconnect")

    @_builtins.property
    @pulumi.getter(name="xconnectVariable")
    def xconnect_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "xconnect_variable")


class AwaitableGetTransportWanVpnInterfaceEthernetFeatureResult(GetTransportWanVpnInterfaceEthernetFeatureResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetTransportWanVpnInterfaceEthernetFeatureResult(
            acl_ipv4_egress_feature_id=self.acl_ipv4_egress_feature_id,
            acl_ipv4_ingress_feature_id=self.acl_ipv4_ingress_feature_id,
            acl_ipv6_egress_feature_id=self.acl_ipv6_egress_feature_id,
            acl_ipv6_ingress_feature_id=self.acl_ipv6_ingress_feature_id,
            arp_timeout=self.arp_timeout,
            arp_timeout_variable=self.arp_timeout_variable,
            arps=self.arps,
            auto_detect_bandwidth=self.auto_detect_bandwidth,
            auto_detect_bandwidth_variable=self.auto_detect_bandwidth_variable,
            autonegotiate=self.autonegotiate,
            autonegotiate_variable=self.autonegotiate_variable,
            bandwidth_downstream=self.bandwidth_downstream,
            bandwidth_downstream_variable=self.bandwidth_downstream_variable,
            bandwidth_upstream=self.bandwidth_upstream,
            bandwidth_upstream_variable=self.bandwidth_upstream_variable,
            block_non_source_ip=self.block_non_source_ip,
            block_non_source_ip_variable=self.block_non_source_ip_variable,
            description=self.description,
            duplex=self.duplex,
            duplex_variable=self.duplex_variable,
            enable_dhcpv6=self.enable_dhcpv6,
            feature_profile_id=self.feature_profile_id,
            gre_tunnel_source_ip=self.gre_tunnel_source_ip,
            gre_tunnel_source_ip_variable=self.gre_tunnel_source_ip_variable,
            icmp_redirect_disable=self.icmp_redirect_disable,
            icmp_redirect_disable_variable=self.icmp_redirect_disable_variable,
            id=self.id,
            interface_description=self.interface_description,
            interface_description_variable=self.interface_description_variable,
            interface_mtu=self.interface_mtu,
            interface_mtu_variable=self.interface_mtu_variable,
            interface_name=self.interface_name,
            interface_name_variable=self.interface_name_variable,
            ip_directed_broadcast=self.ip_directed_broadcast,
            ip_directed_broadcast_variable=self.ip_directed_broadcast_variable,
            ip_mtu=self.ip_mtu,
            ip_mtu_variable=self.ip_mtu_variable,
            iperf_server=self.iperf_server,
            iperf_server_variable=self.iperf_server_variable,
            ipv4_address=self.ipv4_address,
            ipv4_address_variable=self.ipv4_address_variable,
            ipv4_configuration_type=self.ipv4_configuration_type,
            ipv4_dhcp_distance=self.ipv4_dhcp_distance,
            ipv4_dhcp_distance_variable=self.ipv4_dhcp_distance_variable,
            ipv4_dhcp_helper_variable=self.ipv4_dhcp_helper_variable,
            ipv4_dhcp_helpers=self.ipv4_dhcp_helpers,
            ipv4_secondary_addresses=self.ipv4_secondary_addresses,
            ipv4_subnet_mask=self.ipv4_subnet_mask,
            ipv4_subnet_mask_variable=self.ipv4_subnet_mask_variable,
            ipv6_address=self.ipv6_address,
            ipv6_address_variable=self.ipv6_address_variable,
            ipv6_configuration_type=self.ipv6_configuration_type,
            ipv6_dhcp_secondary_addresses=self.ipv6_dhcp_secondary_addresses,
            ipv6_secondary_addresses=self.ipv6_secondary_addresses,
            load_interval=self.load_interval,
            load_interval_variable=self.load_interval_variable,
            mac_address=self.mac_address,
            mac_address_variable=self.mac_address_variable,
            media_type=self.media_type,
            media_type_variable=self.media_type_variable,
            name=self.name,
            nat64=self.nat64,
            nat66=self.nat66,
            nat_ipv4=self.nat_ipv4,
            nat_ipv4_variable=self.nat_ipv4_variable,
            nat_ipv6=self.nat_ipv6,
            nat_ipv6_variable=self.nat_ipv6_variable,
            nat_loopback=self.nat_loopback,
            nat_loopback_variable=self.nat_loopback_variable,
            nat_overload=self.nat_overload,
            nat_overload_variable=self.nat_overload_variable,
            nat_prefix_length=self.nat_prefix_length,
            nat_prefix_length_variable=self.nat_prefix_length_variable,
            nat_range_end=self.nat_range_end,
            nat_range_end_variable=self.nat_range_end_variable,
            nat_range_start=self.nat_range_start,
            nat_range_start_variable=self.nat_range_start_variable,
            nat_tcp_timeout=self.nat_tcp_timeout,
            nat_tcp_timeout_variable=self.nat_tcp_timeout_variable,
            nat_type=self.nat_type,
            nat_type_variable=self.nat_type_variable,
            nat_udp_timeout=self.nat_udp_timeout,
            nat_udp_timeout_variable=self.nat_udp_timeout_variable,
            new_static_nats=self.new_static_nats,
            per_tunnel_qos=self.per_tunnel_qos,
            per_tunnel_qos_variable=self.per_tunnel_qos_variable,
            qos_adaptive=self.qos_adaptive,
            qos_adaptive_bandwidth_downstream=self.qos_adaptive_bandwidth_downstream,
            qos_adaptive_bandwidth_upstream=self.qos_adaptive_bandwidth_upstream,
            qos_adaptive_default_downstream=self.qos_adaptive_default_downstream,
            qos_adaptive_default_downstream_variable=self.qos_adaptive_default_downstream_variable,
            qos_adaptive_default_upstream=self.qos_adaptive_default_upstream,
            qos_adaptive_default_upstream_variable=self.qos_adaptive_default_upstream_variable,
            qos_adaptive_max_downstream=self.qos_adaptive_max_downstream,
            qos_adaptive_max_downstream_variable=self.qos_adaptive_max_downstream_variable,
            qos_adaptive_max_upstream=self.qos_adaptive_max_upstream,
            qos_adaptive_max_upstream_variable=self.qos_adaptive_max_upstream_variable,
            qos_adaptive_min_downstream=self.qos_adaptive_min_downstream,
            qos_adaptive_min_downstream_variable=self.qos_adaptive_min_downstream_variable,
            qos_adaptive_min_upstream=self.qos_adaptive_min_upstream,
            qos_adaptive_min_upstream_variable=self.qos_adaptive_min_upstream_variable,
            qos_adaptive_period=self.qos_adaptive_period,
            qos_adaptive_period_variable=self.qos_adaptive_period_variable,
            qos_shaping_rate=self.qos_shaping_rate,
            qos_shaping_rate_variable=self.qos_shaping_rate_variable,
            service_provider=self.service_provider,
            service_provider_variable=self.service_provider_variable,
            shutdown=self.shutdown,
            shutdown_variable=self.shutdown_variable,
            speed=self.speed,
            speed_variable=self.speed_variable,
            static_nat66s=self.static_nat66s,
            tcp_mss=self.tcp_mss,
            tcp_mss_variable=self.tcp_mss_variable,
            tloc_extension=self.tloc_extension,
            tloc_extension_variable=self.tloc_extension_variable,
            tracker=self.tracker,
            tracker_variable=self.tracker_variable,
            transport_wan_vpn_feature_id=self.transport_wan_vpn_feature_id,
            tunnel_bandwidth_percent=self.tunnel_bandwidth_percent,
            tunnel_bandwidth_percent_variable=self.tunnel_bandwidth_percent_variable,
            tunnel_interface=self.tunnel_interface,
            tunnel_interface_allow_all=self.tunnel_interface_allow_all,
            tunnel_interface_allow_all_variable=self.tunnel_interface_allow_all_variable,
            tunnel_interface_allow_bfd=self.tunnel_interface_allow_bfd,
            tunnel_interface_allow_bfd_variable=self.tunnel_interface_allow_bfd_variable,
            tunnel_interface_allow_bgp=self.tunnel_interface_allow_bgp,
            tunnel_interface_allow_bgp_variable=self.tunnel_interface_allow_bgp_variable,
            tunnel_interface_allow_dhcp=self.tunnel_interface_allow_dhcp,
            tunnel_interface_allow_dhcp_variable=self.tunnel_interface_allow_dhcp_variable,
            tunnel_interface_allow_dns=self.tunnel_interface_allow_dns,
            tunnel_interface_allow_dns_variable=self.tunnel_interface_allow_dns_variable,
            tunnel_interface_allow_https=self.tunnel_interface_allow_https,
            tunnel_interface_allow_https_variable=self.tunnel_interface_allow_https_variable,
            tunnel_interface_allow_icmp=self.tunnel_interface_allow_icmp,
            tunnel_interface_allow_icmp_variable=self.tunnel_interface_allow_icmp_variable,
            tunnel_interface_allow_netconf=self.tunnel_interface_allow_netconf,
            tunnel_interface_allow_netconf_variable=self.tunnel_interface_allow_netconf_variable,
            tunnel_interface_allow_ntp=self.tunnel_interface_allow_ntp,
            tunnel_interface_allow_ntp_variable=self.tunnel_interface_allow_ntp_variable,
            tunnel_interface_allow_ospf=self.tunnel_interface_allow_ospf,
            tunnel_interface_allow_ospf_variable=self.tunnel_interface_allow_ospf_variable,
            tunnel_interface_allow_snmp=self.tunnel_interface_allow_snmp,
            tunnel_interface_allow_snmp_variable=self.tunnel_interface_allow_snmp_variable,
            tunnel_interface_allow_ssh=self.tunnel_interface_allow_ssh,
            tunnel_interface_allow_ssh_variable=self.tunnel_interface_allow_ssh_variable,
            tunnel_interface_allow_stun=self.tunnel_interface_allow_stun,
            tunnel_interface_allow_stun_variable=self.tunnel_interface_allow_stun_variable,
            tunnel_interface_bind_loopback_tunnel=self.tunnel_interface_bind_loopback_tunnel,
            tunnel_interface_bind_loopback_tunnel_variable=self.tunnel_interface_bind_loopback_tunnel_variable,
            tunnel_interface_border=self.tunnel_interface_border,
            tunnel_interface_border_variable=self.tunnel_interface_border_variable,
            tunnel_interface_carrier=self.tunnel_interface_carrier,
            tunnel_interface_carrier_variable=self.tunnel_interface_carrier_variable,
            tunnel_interface_clear_dont_fragment=self.tunnel_interface_clear_dont_fragment,
            tunnel_interface_clear_dont_fragment_variable=self.tunnel_interface_clear_dont_fragment_variable,
            tunnel_interface_color=self.tunnel_interface_color,
            tunnel_interface_color_restrict=self.tunnel_interface_color_restrict,
            tunnel_interface_color_restrict_variable=self.tunnel_interface_color_restrict_variable,
            tunnel_interface_color_variable=self.tunnel_interface_color_variable,
            tunnel_interface_cts_sgt_propagation=self.tunnel_interface_cts_sgt_propagation,
            tunnel_interface_cts_sgt_propagation_variable=self.tunnel_interface_cts_sgt_propagation_variable,
            tunnel_interface_encapsulations=self.tunnel_interface_encapsulations,
            tunnel_interface_exclude_controller_group_list_variable=self.tunnel_interface_exclude_controller_group_list_variable,
            tunnel_interface_exclude_controller_group_lists=self.tunnel_interface_exclude_controller_group_lists,
            tunnel_interface_gre_tunnel_destination_ip=self.tunnel_interface_gre_tunnel_destination_ip,
            tunnel_interface_gre_tunnel_destination_ip_variable=self.tunnel_interface_gre_tunnel_destination_ip_variable,
            tunnel_interface_groups=self.tunnel_interface_groups,
            tunnel_interface_groups_variable=self.tunnel_interface_groups_variable,
            tunnel_interface_hello_interval=self.tunnel_interface_hello_interval,
            tunnel_interface_hello_interval_variable=self.tunnel_interface_hello_interval_variable,
            tunnel_interface_hello_tolerance=self.tunnel_interface_hello_tolerance,
            tunnel_interface_hello_tolerance_variable=self.tunnel_interface_hello_tolerance_variable,
            tunnel_interface_last_resort_circuit=self.tunnel_interface_last_resort_circuit,
            tunnel_interface_last_resort_circuit_variable=self.tunnel_interface_last_resort_circuit_variable,
            tunnel_interface_low_bandwidth_link=self.tunnel_interface_low_bandwidth_link,
            tunnel_interface_low_bandwidth_link_variable=self.tunnel_interface_low_bandwidth_link_variable,
            tunnel_interface_max_control_connections=self.tunnel_interface_max_control_connections,
            tunnel_interface_max_control_connections_variable=self.tunnel_interface_max_control_connections_variable,
            tunnel_interface_nat_refresh_interval=self.tunnel_interface_nat_refresh_interval,
            tunnel_interface_nat_refresh_interval_variable=self.tunnel_interface_nat_refresh_interval_variable,
            tunnel_interface_network_broadcast=self.tunnel_interface_network_broadcast,
            tunnel_interface_network_broadcast_variable=self.tunnel_interface_network_broadcast_variable,
            tunnel_interface_port_hop=self.tunnel_interface_port_hop,
            tunnel_interface_port_hop_variable=self.tunnel_interface_port_hop_variable,
            tunnel_interface_tunnel_tcp_mss=self.tunnel_interface_tunnel_tcp_mss,
            tunnel_interface_tunnel_tcp_mss_variable=self.tunnel_interface_tunnel_tcp_mss_variable,
            tunnel_interface_vbond_as_stun_server=self.tunnel_interface_vbond_as_stun_server,
            tunnel_interface_vbond_as_stun_server_variable=self.tunnel_interface_vbond_as_stun_server_variable,
            tunnel_interface_vmanage_connection_preference=self.tunnel_interface_vmanage_connection_preference,
            tunnel_interface_vmanage_connection_preference_variable=self.tunnel_interface_vmanage_connection_preference_variable,
            tunnel_qos_mode=self.tunnel_qos_mode,
            tunnel_qos_mode_variable=self.tunnel_qos_mode_variable,
            version=self.version,
            xconnect=self.xconnect,
            xconnect_variable=self.xconnect_variable)


def get_transport_wan_vpn_interface_ethernet_feature(feature_profile_id: Optional[_builtins.str] = None,
                                                     id: Optional[_builtins.str] = None,
                                                     transport_wan_vpn_feature_id: Optional[_builtins.str] = None,
                                                     opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetTransportWanVpnInterfaceEthernetFeatureResult:
    """
    This data source can read the Transport WAN VPN Interface Ethernet Feature.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_sdwan as sdwan

    example = sdwan.get_transport_wan_vpn_interface_ethernet_feature(id="f6b2c44c-693c-4763-b010-895aa3d236bd",
        feature_profile_id="f6dd22c8-0b4f-496c-9a0b-6813d1f8b8ac",
        transport_wan_vpn_feature_id="140331f6-5418-4755-a059-13c77eb96037")
    ```


    :param _builtins.str feature_profile_id: Feature Profile ID
    :param _builtins.str id: The id of the Feature
    :param _builtins.str transport_wan_vpn_feature_id: Transport WAN VPN Feature ID
    """
    __args__ = dict()
    __args__['featureProfileId'] = feature_profile_id
    __args__['id'] = id
    __args__['transportWanVpnFeatureId'] = transport_wan_vpn_feature_id
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('sdwan:index/getTransportWanVpnInterfaceEthernetFeature:getTransportWanVpnInterfaceEthernetFeature', __args__, opts=opts, typ=GetTransportWanVpnInterfaceEthernetFeatureResult).value

    return AwaitableGetTransportWanVpnInterfaceEthernetFeatureResult(
        acl_ipv4_egress_feature_id=pulumi.get(__ret__, 'acl_ipv4_egress_feature_id'),
        acl_ipv4_ingress_feature_id=pulumi.get(__ret__, 'acl_ipv4_ingress_feature_id'),
        acl_ipv6_egress_feature_id=pulumi.get(__ret__, 'acl_ipv6_egress_feature_id'),
        acl_ipv6_ingress_feature_id=pulumi.get(__ret__, 'acl_ipv6_ingress_feature_id'),
        arp_timeout=pulumi.get(__ret__, 'arp_timeout'),
        arp_timeout_variable=pulumi.get(__ret__, 'arp_timeout_variable'),
        arps=pulumi.get(__ret__, 'arps'),
        auto_detect_bandwidth=pulumi.get(__ret__, 'auto_detect_bandwidth'),
        auto_detect_bandwidth_variable=pulumi.get(__ret__, 'auto_detect_bandwidth_variable'),
        autonegotiate=pulumi.get(__ret__, 'autonegotiate'),
        autonegotiate_variable=pulumi.get(__ret__, 'autonegotiate_variable'),
        bandwidth_downstream=pulumi.get(__ret__, 'bandwidth_downstream'),
        bandwidth_downstream_variable=pulumi.get(__ret__, 'bandwidth_downstream_variable'),
        bandwidth_upstream=pulumi.get(__ret__, 'bandwidth_upstream'),
        bandwidth_upstream_variable=pulumi.get(__ret__, 'bandwidth_upstream_variable'),
        block_non_source_ip=pulumi.get(__ret__, 'block_non_source_ip'),
        block_non_source_ip_variable=pulumi.get(__ret__, 'block_non_source_ip_variable'),
        description=pulumi.get(__ret__, 'description'),
        duplex=pulumi.get(__ret__, 'duplex'),
        duplex_variable=pulumi.get(__ret__, 'duplex_variable'),
        enable_dhcpv6=pulumi.get(__ret__, 'enable_dhcpv6'),
        feature_profile_id=pulumi.get(__ret__, 'feature_profile_id'),
        gre_tunnel_source_ip=pulumi.get(__ret__, 'gre_tunnel_source_ip'),
        gre_tunnel_source_ip_variable=pulumi.get(__ret__, 'gre_tunnel_source_ip_variable'),
        icmp_redirect_disable=pulumi.get(__ret__, 'icmp_redirect_disable'),
        icmp_redirect_disable_variable=pulumi.get(__ret__, 'icmp_redirect_disable_variable'),
        id=pulumi.get(__ret__, 'id'),
        interface_description=pulumi.get(__ret__, 'interface_description'),
        interface_description_variable=pulumi.get(__ret__, 'interface_description_variable'),
        interface_mtu=pulumi.get(__ret__, 'interface_mtu'),
        interface_mtu_variable=pulumi.get(__ret__, 'interface_mtu_variable'),
        interface_name=pulumi.get(__ret__, 'interface_name'),
        interface_name_variable=pulumi.get(__ret__, 'interface_name_variable'),
        ip_directed_broadcast=pulumi.get(__ret__, 'ip_directed_broadcast'),
        ip_directed_broadcast_variable=pulumi.get(__ret__, 'ip_directed_broadcast_variable'),
        ip_mtu=pulumi.get(__ret__, 'ip_mtu'),
        ip_mtu_variable=pulumi.get(__ret__, 'ip_mtu_variable'),
        iperf_server=pulumi.get(__ret__, 'iperf_server'),
        iperf_server_variable=pulumi.get(__ret__, 'iperf_server_variable'),
        ipv4_address=pulumi.get(__ret__, 'ipv4_address'),
        ipv4_address_variable=pulumi.get(__ret__, 'ipv4_address_variable'),
        ipv4_configuration_type=pulumi.get(__ret__, 'ipv4_configuration_type'),
        ipv4_dhcp_distance=pulumi.get(__ret__, 'ipv4_dhcp_distance'),
        ipv4_dhcp_distance_variable=pulumi.get(__ret__, 'ipv4_dhcp_distance_variable'),
        ipv4_dhcp_helper_variable=pulumi.get(__ret__, 'ipv4_dhcp_helper_variable'),
        ipv4_dhcp_helpers=pulumi.get(__ret__, 'ipv4_dhcp_helpers'),
        ipv4_secondary_addresses=pulumi.get(__ret__, 'ipv4_secondary_addresses'),
        ipv4_subnet_mask=pulumi.get(__ret__, 'ipv4_subnet_mask'),
        ipv4_subnet_mask_variable=pulumi.get(__ret__, 'ipv4_subnet_mask_variable'),
        ipv6_address=pulumi.get(__ret__, 'ipv6_address'),
        ipv6_address_variable=pulumi.get(__ret__, 'ipv6_address_variable'),
        ipv6_configuration_type=pulumi.get(__ret__, 'ipv6_configuration_type'),
        ipv6_dhcp_secondary_addresses=pulumi.get(__ret__, 'ipv6_dhcp_secondary_addresses'),
        ipv6_secondary_addresses=pulumi.get(__ret__, 'ipv6_secondary_addresses'),
        load_interval=pulumi.get(__ret__, 'load_interval'),
        load_interval_variable=pulumi.get(__ret__, 'load_interval_variable'),
        mac_address=pulumi.get(__ret__, 'mac_address'),
        mac_address_variable=pulumi.get(__ret__, 'mac_address_variable'),
        media_type=pulumi.get(__ret__, 'media_type'),
        media_type_variable=pulumi.get(__ret__, 'media_type_variable'),
        name=pulumi.get(__ret__, 'name'),
        nat64=pulumi.get(__ret__, 'nat64'),
        nat66=pulumi.get(__ret__, 'nat66'),
        nat_ipv4=pulumi.get(__ret__, 'nat_ipv4'),
        nat_ipv4_variable=pulumi.get(__ret__, 'nat_ipv4_variable'),
        nat_ipv6=pulumi.get(__ret__, 'nat_ipv6'),
        nat_ipv6_variable=pulumi.get(__ret__, 'nat_ipv6_variable'),
        nat_loopback=pulumi.get(__ret__, 'nat_loopback'),
        nat_loopback_variable=pulumi.get(__ret__, 'nat_loopback_variable'),
        nat_overload=pulumi.get(__ret__, 'nat_overload'),
        nat_overload_variable=pulumi.get(__ret__, 'nat_overload_variable'),
        nat_prefix_length=pulumi.get(__ret__, 'nat_prefix_length'),
        nat_prefix_length_variable=pulumi.get(__ret__, 'nat_prefix_length_variable'),
        nat_range_end=pulumi.get(__ret__, 'nat_range_end'),
        nat_range_end_variable=pulumi.get(__ret__, 'nat_range_end_variable'),
        nat_range_start=pulumi.get(__ret__, 'nat_range_start'),
        nat_range_start_variable=pulumi.get(__ret__, 'nat_range_start_variable'),
        nat_tcp_timeout=pulumi.get(__ret__, 'nat_tcp_timeout'),
        nat_tcp_timeout_variable=pulumi.get(__ret__, 'nat_tcp_timeout_variable'),
        nat_type=pulumi.get(__ret__, 'nat_type'),
        nat_type_variable=pulumi.get(__ret__, 'nat_type_variable'),
        nat_udp_timeout=pulumi.get(__ret__, 'nat_udp_timeout'),
        nat_udp_timeout_variable=pulumi.get(__ret__, 'nat_udp_timeout_variable'),
        new_static_nats=pulumi.get(__ret__, 'new_static_nats'),
        per_tunnel_qos=pulumi.get(__ret__, 'per_tunnel_qos'),
        per_tunnel_qos_variable=pulumi.get(__ret__, 'per_tunnel_qos_variable'),
        qos_adaptive=pulumi.get(__ret__, 'qos_adaptive'),
        qos_adaptive_bandwidth_downstream=pulumi.get(__ret__, 'qos_adaptive_bandwidth_downstream'),
        qos_adaptive_bandwidth_upstream=pulumi.get(__ret__, 'qos_adaptive_bandwidth_upstream'),
        qos_adaptive_default_downstream=pulumi.get(__ret__, 'qos_adaptive_default_downstream'),
        qos_adaptive_default_downstream_variable=pulumi.get(__ret__, 'qos_adaptive_default_downstream_variable'),
        qos_adaptive_default_upstream=pulumi.get(__ret__, 'qos_adaptive_default_upstream'),
        qos_adaptive_default_upstream_variable=pulumi.get(__ret__, 'qos_adaptive_default_upstream_variable'),
        qos_adaptive_max_downstream=pulumi.get(__ret__, 'qos_adaptive_max_downstream'),
        qos_adaptive_max_downstream_variable=pulumi.get(__ret__, 'qos_adaptive_max_downstream_variable'),
        qos_adaptive_max_upstream=pulumi.get(__ret__, 'qos_adaptive_max_upstream'),
        qos_adaptive_max_upstream_variable=pulumi.get(__ret__, 'qos_adaptive_max_upstream_variable'),
        qos_adaptive_min_downstream=pulumi.get(__ret__, 'qos_adaptive_min_downstream'),
        qos_adaptive_min_downstream_variable=pulumi.get(__ret__, 'qos_adaptive_min_downstream_variable'),
        qos_adaptive_min_upstream=pulumi.get(__ret__, 'qos_adaptive_min_upstream'),
        qos_adaptive_min_upstream_variable=pulumi.get(__ret__, 'qos_adaptive_min_upstream_variable'),
        qos_adaptive_period=pulumi.get(__ret__, 'qos_adaptive_period'),
        qos_adaptive_period_variable=pulumi.get(__ret__, 'qos_adaptive_period_variable'),
        qos_shaping_rate=pulumi.get(__ret__, 'qos_shaping_rate'),
        qos_shaping_rate_variable=pulumi.get(__ret__, 'qos_shaping_rate_variable'),
        service_provider=pulumi.get(__ret__, 'service_provider'),
        service_provider_variable=pulumi.get(__ret__, 'service_provider_variable'),
        shutdown=pulumi.get(__ret__, 'shutdown'),
        shutdown_variable=pulumi.get(__ret__, 'shutdown_variable'),
        speed=pulumi.get(__ret__, 'speed'),
        speed_variable=pulumi.get(__ret__, 'speed_variable'),
        static_nat66s=pulumi.get(__ret__, 'static_nat66s'),
        tcp_mss=pulumi.get(__ret__, 'tcp_mss'),
        tcp_mss_variable=pulumi.get(__ret__, 'tcp_mss_variable'),
        tloc_extension=pulumi.get(__ret__, 'tloc_extension'),
        tloc_extension_variable=pulumi.get(__ret__, 'tloc_extension_variable'),
        tracker=pulumi.get(__ret__, 'tracker'),
        tracker_variable=pulumi.get(__ret__, 'tracker_variable'),
        transport_wan_vpn_feature_id=pulumi.get(__ret__, 'transport_wan_vpn_feature_id'),
        tunnel_bandwidth_percent=pulumi.get(__ret__, 'tunnel_bandwidth_percent'),
        tunnel_bandwidth_percent_variable=pulumi.get(__ret__, 'tunnel_bandwidth_percent_variable'),
        tunnel_interface=pulumi.get(__ret__, 'tunnel_interface'),
        tunnel_interface_allow_all=pulumi.get(__ret__, 'tunnel_interface_allow_all'),
        tunnel_interface_allow_all_variable=pulumi.get(__ret__, 'tunnel_interface_allow_all_variable'),
        tunnel_interface_allow_bfd=pulumi.get(__ret__, 'tunnel_interface_allow_bfd'),
        tunnel_interface_allow_bfd_variable=pulumi.get(__ret__, 'tunnel_interface_allow_bfd_variable'),
        tunnel_interface_allow_bgp=pulumi.get(__ret__, 'tunnel_interface_allow_bgp'),
        tunnel_interface_allow_bgp_variable=pulumi.get(__ret__, 'tunnel_interface_allow_bgp_variable'),
        tunnel_interface_allow_dhcp=pulumi.get(__ret__, 'tunnel_interface_allow_dhcp'),
        tunnel_interface_allow_dhcp_variable=pulumi.get(__ret__, 'tunnel_interface_allow_dhcp_variable'),
        tunnel_interface_allow_dns=pulumi.get(__ret__, 'tunnel_interface_allow_dns'),
        tunnel_interface_allow_dns_variable=pulumi.get(__ret__, 'tunnel_interface_allow_dns_variable'),
        tunnel_interface_allow_https=pulumi.get(__ret__, 'tunnel_interface_allow_https'),
        tunnel_interface_allow_https_variable=pulumi.get(__ret__, 'tunnel_interface_allow_https_variable'),
        tunnel_interface_allow_icmp=pulumi.get(__ret__, 'tunnel_interface_allow_icmp'),
        tunnel_interface_allow_icmp_variable=pulumi.get(__ret__, 'tunnel_interface_allow_icmp_variable'),
        tunnel_interface_allow_netconf=pulumi.get(__ret__, 'tunnel_interface_allow_netconf'),
        tunnel_interface_allow_netconf_variable=pulumi.get(__ret__, 'tunnel_interface_allow_netconf_variable'),
        tunnel_interface_allow_ntp=pulumi.get(__ret__, 'tunnel_interface_allow_ntp'),
        tunnel_interface_allow_ntp_variable=pulumi.get(__ret__, 'tunnel_interface_allow_ntp_variable'),
        tunnel_interface_allow_ospf=pulumi.get(__ret__, 'tunnel_interface_allow_ospf'),
        tunnel_interface_allow_ospf_variable=pulumi.get(__ret__, 'tunnel_interface_allow_ospf_variable'),
        tunnel_interface_allow_snmp=pulumi.get(__ret__, 'tunnel_interface_allow_snmp'),
        tunnel_interface_allow_snmp_variable=pulumi.get(__ret__, 'tunnel_interface_allow_snmp_variable'),
        tunnel_interface_allow_ssh=pulumi.get(__ret__, 'tunnel_interface_allow_ssh'),
        tunnel_interface_allow_ssh_variable=pulumi.get(__ret__, 'tunnel_interface_allow_ssh_variable'),
        tunnel_interface_allow_stun=pulumi.get(__ret__, 'tunnel_interface_allow_stun'),
        tunnel_interface_allow_stun_variable=pulumi.get(__ret__, 'tunnel_interface_allow_stun_variable'),
        tunnel_interface_bind_loopback_tunnel=pulumi.get(__ret__, 'tunnel_interface_bind_loopback_tunnel'),
        tunnel_interface_bind_loopback_tunnel_variable=pulumi.get(__ret__, 'tunnel_interface_bind_loopback_tunnel_variable'),
        tunnel_interface_border=pulumi.get(__ret__, 'tunnel_interface_border'),
        tunnel_interface_border_variable=pulumi.get(__ret__, 'tunnel_interface_border_variable'),
        tunnel_interface_carrier=pulumi.get(__ret__, 'tunnel_interface_carrier'),
        tunnel_interface_carrier_variable=pulumi.get(__ret__, 'tunnel_interface_carrier_variable'),
        tunnel_interface_clear_dont_fragment=pulumi.get(__ret__, 'tunnel_interface_clear_dont_fragment'),
        tunnel_interface_clear_dont_fragment_variable=pulumi.get(__ret__, 'tunnel_interface_clear_dont_fragment_variable'),
        tunnel_interface_color=pulumi.get(__ret__, 'tunnel_interface_color'),
        tunnel_interface_color_restrict=pulumi.get(__ret__, 'tunnel_interface_color_restrict'),
        tunnel_interface_color_restrict_variable=pulumi.get(__ret__, 'tunnel_interface_color_restrict_variable'),
        tunnel_interface_color_variable=pulumi.get(__ret__, 'tunnel_interface_color_variable'),
        tunnel_interface_cts_sgt_propagation=pulumi.get(__ret__, 'tunnel_interface_cts_sgt_propagation'),
        tunnel_interface_cts_sgt_propagation_variable=pulumi.get(__ret__, 'tunnel_interface_cts_sgt_propagation_variable'),
        tunnel_interface_encapsulations=pulumi.get(__ret__, 'tunnel_interface_encapsulations'),
        tunnel_interface_exclude_controller_group_list_variable=pulumi.get(__ret__, 'tunnel_interface_exclude_controller_group_list_variable'),
        tunnel_interface_exclude_controller_group_lists=pulumi.get(__ret__, 'tunnel_interface_exclude_controller_group_lists'),
        tunnel_interface_gre_tunnel_destination_ip=pulumi.get(__ret__, 'tunnel_interface_gre_tunnel_destination_ip'),
        tunnel_interface_gre_tunnel_destination_ip_variable=pulumi.get(__ret__, 'tunnel_interface_gre_tunnel_destination_ip_variable'),
        tunnel_interface_groups=pulumi.get(__ret__, 'tunnel_interface_groups'),
        tunnel_interface_groups_variable=pulumi.get(__ret__, 'tunnel_interface_groups_variable'),
        tunnel_interface_hello_interval=pulumi.get(__ret__, 'tunnel_interface_hello_interval'),
        tunnel_interface_hello_interval_variable=pulumi.get(__ret__, 'tunnel_interface_hello_interval_variable'),
        tunnel_interface_hello_tolerance=pulumi.get(__ret__, 'tunnel_interface_hello_tolerance'),
        tunnel_interface_hello_tolerance_variable=pulumi.get(__ret__, 'tunnel_interface_hello_tolerance_variable'),
        tunnel_interface_last_resort_circuit=pulumi.get(__ret__, 'tunnel_interface_last_resort_circuit'),
        tunnel_interface_last_resort_circuit_variable=pulumi.get(__ret__, 'tunnel_interface_last_resort_circuit_variable'),
        tunnel_interface_low_bandwidth_link=pulumi.get(__ret__, 'tunnel_interface_low_bandwidth_link'),
        tunnel_interface_low_bandwidth_link_variable=pulumi.get(__ret__, 'tunnel_interface_low_bandwidth_link_variable'),
        tunnel_interface_max_control_connections=pulumi.get(__ret__, 'tunnel_interface_max_control_connections'),
        tunnel_interface_max_control_connections_variable=pulumi.get(__ret__, 'tunnel_interface_max_control_connections_variable'),
        tunnel_interface_nat_refresh_interval=pulumi.get(__ret__, 'tunnel_interface_nat_refresh_interval'),
        tunnel_interface_nat_refresh_interval_variable=pulumi.get(__ret__, 'tunnel_interface_nat_refresh_interval_variable'),
        tunnel_interface_network_broadcast=pulumi.get(__ret__, 'tunnel_interface_network_broadcast'),
        tunnel_interface_network_broadcast_variable=pulumi.get(__ret__, 'tunnel_interface_network_broadcast_variable'),
        tunnel_interface_port_hop=pulumi.get(__ret__, 'tunnel_interface_port_hop'),
        tunnel_interface_port_hop_variable=pulumi.get(__ret__, 'tunnel_interface_port_hop_variable'),
        tunnel_interface_tunnel_tcp_mss=pulumi.get(__ret__, 'tunnel_interface_tunnel_tcp_mss'),
        tunnel_interface_tunnel_tcp_mss_variable=pulumi.get(__ret__, 'tunnel_interface_tunnel_tcp_mss_variable'),
        tunnel_interface_vbond_as_stun_server=pulumi.get(__ret__, 'tunnel_interface_vbond_as_stun_server'),
        tunnel_interface_vbond_as_stun_server_variable=pulumi.get(__ret__, 'tunnel_interface_vbond_as_stun_server_variable'),
        tunnel_interface_vmanage_connection_preference=pulumi.get(__ret__, 'tunnel_interface_vmanage_connection_preference'),
        tunnel_interface_vmanage_connection_preference_variable=pulumi.get(__ret__, 'tunnel_interface_vmanage_connection_preference_variable'),
        tunnel_qos_mode=pulumi.get(__ret__, 'tunnel_qos_mode'),
        tunnel_qos_mode_variable=pulumi.get(__ret__, 'tunnel_qos_mode_variable'),
        version=pulumi.get(__ret__, 'version'),
        xconnect=pulumi.get(__ret__, 'xconnect'),
        xconnect_variable=pulumi.get(__ret__, 'xconnect_variable'))
def get_transport_wan_vpn_interface_ethernet_feature_output(feature_profile_id: Optional[pulumi.Input[_builtins.str]] = None,
                                                            id: Optional[pulumi.Input[_builtins.str]] = None,
                                                            transport_wan_vpn_feature_id: Optional[pulumi.Input[_builtins.str]] = None,
                                                            opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetTransportWanVpnInterfaceEthernetFeatureResult]:
    """
    This data source can read the Transport WAN VPN Interface Ethernet Feature.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_sdwan as sdwan

    example = sdwan.get_transport_wan_vpn_interface_ethernet_feature(id="f6b2c44c-693c-4763-b010-895aa3d236bd",
        feature_profile_id="f6dd22c8-0b4f-496c-9a0b-6813d1f8b8ac",
        transport_wan_vpn_feature_id="140331f6-5418-4755-a059-13c77eb96037")
    ```


    :param _builtins.str feature_profile_id: Feature Profile ID
    :param _builtins.str id: The id of the Feature
    :param _builtins.str transport_wan_vpn_feature_id: Transport WAN VPN Feature ID
    """
    __args__ = dict()
    __args__['featureProfileId'] = feature_profile_id
    __args__['id'] = id
    __args__['transportWanVpnFeatureId'] = transport_wan_vpn_feature_id
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('sdwan:index/getTransportWanVpnInterfaceEthernetFeature:getTransportWanVpnInterfaceEthernetFeature', __args__, opts=opts, typ=GetTransportWanVpnInterfaceEthernetFeatureResult)
    return __ret__.apply(lambda __response__: GetTransportWanVpnInterfaceEthernetFeatureResult(
        acl_ipv4_egress_feature_id=pulumi.get(__response__, 'acl_ipv4_egress_feature_id'),
        acl_ipv4_ingress_feature_id=pulumi.get(__response__, 'acl_ipv4_ingress_feature_id'),
        acl_ipv6_egress_feature_id=pulumi.get(__response__, 'acl_ipv6_egress_feature_id'),
        acl_ipv6_ingress_feature_id=pulumi.get(__response__, 'acl_ipv6_ingress_feature_id'),
        arp_timeout=pulumi.get(__response__, 'arp_timeout'),
        arp_timeout_variable=pulumi.get(__response__, 'arp_timeout_variable'),
        arps=pulumi.get(__response__, 'arps'),
        auto_detect_bandwidth=pulumi.get(__response__, 'auto_detect_bandwidth'),
        auto_detect_bandwidth_variable=pulumi.get(__response__, 'auto_detect_bandwidth_variable'),
        autonegotiate=pulumi.get(__response__, 'autonegotiate'),
        autonegotiate_variable=pulumi.get(__response__, 'autonegotiate_variable'),
        bandwidth_downstream=pulumi.get(__response__, 'bandwidth_downstream'),
        bandwidth_downstream_variable=pulumi.get(__response__, 'bandwidth_downstream_variable'),
        bandwidth_upstream=pulumi.get(__response__, 'bandwidth_upstream'),
        bandwidth_upstream_variable=pulumi.get(__response__, 'bandwidth_upstream_variable'),
        block_non_source_ip=pulumi.get(__response__, 'block_non_source_ip'),
        block_non_source_ip_variable=pulumi.get(__response__, 'block_non_source_ip_variable'),
        description=pulumi.get(__response__, 'description'),
        duplex=pulumi.get(__response__, 'duplex'),
        duplex_variable=pulumi.get(__response__, 'duplex_variable'),
        enable_dhcpv6=pulumi.get(__response__, 'enable_dhcpv6'),
        feature_profile_id=pulumi.get(__response__, 'feature_profile_id'),
        gre_tunnel_source_ip=pulumi.get(__response__, 'gre_tunnel_source_ip'),
        gre_tunnel_source_ip_variable=pulumi.get(__response__, 'gre_tunnel_source_ip_variable'),
        icmp_redirect_disable=pulumi.get(__response__, 'icmp_redirect_disable'),
        icmp_redirect_disable_variable=pulumi.get(__response__, 'icmp_redirect_disable_variable'),
        id=pulumi.get(__response__, 'id'),
        interface_description=pulumi.get(__response__, 'interface_description'),
        interface_description_variable=pulumi.get(__response__, 'interface_description_variable'),
        interface_mtu=pulumi.get(__response__, 'interface_mtu'),
        interface_mtu_variable=pulumi.get(__response__, 'interface_mtu_variable'),
        interface_name=pulumi.get(__response__, 'interface_name'),
        interface_name_variable=pulumi.get(__response__, 'interface_name_variable'),
        ip_directed_broadcast=pulumi.get(__response__, 'ip_directed_broadcast'),
        ip_directed_broadcast_variable=pulumi.get(__response__, 'ip_directed_broadcast_variable'),
        ip_mtu=pulumi.get(__response__, 'ip_mtu'),
        ip_mtu_variable=pulumi.get(__response__, 'ip_mtu_variable'),
        iperf_server=pulumi.get(__response__, 'iperf_server'),
        iperf_server_variable=pulumi.get(__response__, 'iperf_server_variable'),
        ipv4_address=pulumi.get(__response__, 'ipv4_address'),
        ipv4_address_variable=pulumi.get(__response__, 'ipv4_address_variable'),
        ipv4_configuration_type=pulumi.get(__response__, 'ipv4_configuration_type'),
        ipv4_dhcp_distance=pulumi.get(__response__, 'ipv4_dhcp_distance'),
        ipv4_dhcp_distance_variable=pulumi.get(__response__, 'ipv4_dhcp_distance_variable'),
        ipv4_dhcp_helper_variable=pulumi.get(__response__, 'ipv4_dhcp_helper_variable'),
        ipv4_dhcp_helpers=pulumi.get(__response__, 'ipv4_dhcp_helpers'),
        ipv4_secondary_addresses=pulumi.get(__response__, 'ipv4_secondary_addresses'),
        ipv4_subnet_mask=pulumi.get(__response__, 'ipv4_subnet_mask'),
        ipv4_subnet_mask_variable=pulumi.get(__response__, 'ipv4_subnet_mask_variable'),
        ipv6_address=pulumi.get(__response__, 'ipv6_address'),
        ipv6_address_variable=pulumi.get(__response__, 'ipv6_address_variable'),
        ipv6_configuration_type=pulumi.get(__response__, 'ipv6_configuration_type'),
        ipv6_dhcp_secondary_addresses=pulumi.get(__response__, 'ipv6_dhcp_secondary_addresses'),
        ipv6_secondary_addresses=pulumi.get(__response__, 'ipv6_secondary_addresses'),
        load_interval=pulumi.get(__response__, 'load_interval'),
        load_interval_variable=pulumi.get(__response__, 'load_interval_variable'),
        mac_address=pulumi.get(__response__, 'mac_address'),
        mac_address_variable=pulumi.get(__response__, 'mac_address_variable'),
        media_type=pulumi.get(__response__, 'media_type'),
        media_type_variable=pulumi.get(__response__, 'media_type_variable'),
        name=pulumi.get(__response__, 'name'),
        nat64=pulumi.get(__response__, 'nat64'),
        nat66=pulumi.get(__response__, 'nat66'),
        nat_ipv4=pulumi.get(__response__, 'nat_ipv4'),
        nat_ipv4_variable=pulumi.get(__response__, 'nat_ipv4_variable'),
        nat_ipv6=pulumi.get(__response__, 'nat_ipv6'),
        nat_ipv6_variable=pulumi.get(__response__, 'nat_ipv6_variable'),
        nat_loopback=pulumi.get(__response__, 'nat_loopback'),
        nat_loopback_variable=pulumi.get(__response__, 'nat_loopback_variable'),
        nat_overload=pulumi.get(__response__, 'nat_overload'),
        nat_overload_variable=pulumi.get(__response__, 'nat_overload_variable'),
        nat_prefix_length=pulumi.get(__response__, 'nat_prefix_length'),
        nat_prefix_length_variable=pulumi.get(__response__, 'nat_prefix_length_variable'),
        nat_range_end=pulumi.get(__response__, 'nat_range_end'),
        nat_range_end_variable=pulumi.get(__response__, 'nat_range_end_variable'),
        nat_range_start=pulumi.get(__response__, 'nat_range_start'),
        nat_range_start_variable=pulumi.get(__response__, 'nat_range_start_variable'),
        nat_tcp_timeout=pulumi.get(__response__, 'nat_tcp_timeout'),
        nat_tcp_timeout_variable=pulumi.get(__response__, 'nat_tcp_timeout_variable'),
        nat_type=pulumi.get(__response__, 'nat_type'),
        nat_type_variable=pulumi.get(__response__, 'nat_type_variable'),
        nat_udp_timeout=pulumi.get(__response__, 'nat_udp_timeout'),
        nat_udp_timeout_variable=pulumi.get(__response__, 'nat_udp_timeout_variable'),
        new_static_nats=pulumi.get(__response__, 'new_static_nats'),
        per_tunnel_qos=pulumi.get(__response__, 'per_tunnel_qos'),
        per_tunnel_qos_variable=pulumi.get(__response__, 'per_tunnel_qos_variable'),
        qos_adaptive=pulumi.get(__response__, 'qos_adaptive'),
        qos_adaptive_bandwidth_downstream=pulumi.get(__response__, 'qos_adaptive_bandwidth_downstream'),
        qos_adaptive_bandwidth_upstream=pulumi.get(__response__, 'qos_adaptive_bandwidth_upstream'),
        qos_adaptive_default_downstream=pulumi.get(__response__, 'qos_adaptive_default_downstream'),
        qos_adaptive_default_downstream_variable=pulumi.get(__response__, 'qos_adaptive_default_downstream_variable'),
        qos_adaptive_default_upstream=pulumi.get(__response__, 'qos_adaptive_default_upstream'),
        qos_adaptive_default_upstream_variable=pulumi.get(__response__, 'qos_adaptive_default_upstream_variable'),
        qos_adaptive_max_downstream=pulumi.get(__response__, 'qos_adaptive_max_downstream'),
        qos_adaptive_max_downstream_variable=pulumi.get(__response__, 'qos_adaptive_max_downstream_variable'),
        qos_adaptive_max_upstream=pulumi.get(__response__, 'qos_adaptive_max_upstream'),
        qos_adaptive_max_upstream_variable=pulumi.get(__response__, 'qos_adaptive_max_upstream_variable'),
        qos_adaptive_min_downstream=pulumi.get(__response__, 'qos_adaptive_min_downstream'),
        qos_adaptive_min_downstream_variable=pulumi.get(__response__, 'qos_adaptive_min_downstream_variable'),
        qos_adaptive_min_upstream=pulumi.get(__response__, 'qos_adaptive_min_upstream'),
        qos_adaptive_min_upstream_variable=pulumi.get(__response__, 'qos_adaptive_min_upstream_variable'),
        qos_adaptive_period=pulumi.get(__response__, 'qos_adaptive_period'),
        qos_adaptive_period_variable=pulumi.get(__response__, 'qos_adaptive_period_variable'),
        qos_shaping_rate=pulumi.get(__response__, 'qos_shaping_rate'),
        qos_shaping_rate_variable=pulumi.get(__response__, 'qos_shaping_rate_variable'),
        service_provider=pulumi.get(__response__, 'service_provider'),
        service_provider_variable=pulumi.get(__response__, 'service_provider_variable'),
        shutdown=pulumi.get(__response__, 'shutdown'),
        shutdown_variable=pulumi.get(__response__, 'shutdown_variable'),
        speed=pulumi.get(__response__, 'speed'),
        speed_variable=pulumi.get(__response__, 'speed_variable'),
        static_nat66s=pulumi.get(__response__, 'static_nat66s'),
        tcp_mss=pulumi.get(__response__, 'tcp_mss'),
        tcp_mss_variable=pulumi.get(__response__, 'tcp_mss_variable'),
        tloc_extension=pulumi.get(__response__, 'tloc_extension'),
        tloc_extension_variable=pulumi.get(__response__, 'tloc_extension_variable'),
        tracker=pulumi.get(__response__, 'tracker'),
        tracker_variable=pulumi.get(__response__, 'tracker_variable'),
        transport_wan_vpn_feature_id=pulumi.get(__response__, 'transport_wan_vpn_feature_id'),
        tunnel_bandwidth_percent=pulumi.get(__response__, 'tunnel_bandwidth_percent'),
        tunnel_bandwidth_percent_variable=pulumi.get(__response__, 'tunnel_bandwidth_percent_variable'),
        tunnel_interface=pulumi.get(__response__, 'tunnel_interface'),
        tunnel_interface_allow_all=pulumi.get(__response__, 'tunnel_interface_allow_all'),
        tunnel_interface_allow_all_variable=pulumi.get(__response__, 'tunnel_interface_allow_all_variable'),
        tunnel_interface_allow_bfd=pulumi.get(__response__, 'tunnel_interface_allow_bfd'),
        tunnel_interface_allow_bfd_variable=pulumi.get(__response__, 'tunnel_interface_allow_bfd_variable'),
        tunnel_interface_allow_bgp=pulumi.get(__response__, 'tunnel_interface_allow_bgp'),
        tunnel_interface_allow_bgp_variable=pulumi.get(__response__, 'tunnel_interface_allow_bgp_variable'),
        tunnel_interface_allow_dhcp=pulumi.get(__response__, 'tunnel_interface_allow_dhcp'),
        tunnel_interface_allow_dhcp_variable=pulumi.get(__response__, 'tunnel_interface_allow_dhcp_variable'),
        tunnel_interface_allow_dns=pulumi.get(__response__, 'tunnel_interface_allow_dns'),
        tunnel_interface_allow_dns_variable=pulumi.get(__response__, 'tunnel_interface_allow_dns_variable'),
        tunnel_interface_allow_https=pulumi.get(__response__, 'tunnel_interface_allow_https'),
        tunnel_interface_allow_https_variable=pulumi.get(__response__, 'tunnel_interface_allow_https_variable'),
        tunnel_interface_allow_icmp=pulumi.get(__response__, 'tunnel_interface_allow_icmp'),
        tunnel_interface_allow_icmp_variable=pulumi.get(__response__, 'tunnel_interface_allow_icmp_variable'),
        tunnel_interface_allow_netconf=pulumi.get(__response__, 'tunnel_interface_allow_netconf'),
        tunnel_interface_allow_netconf_variable=pulumi.get(__response__, 'tunnel_interface_allow_netconf_variable'),
        tunnel_interface_allow_ntp=pulumi.get(__response__, 'tunnel_interface_allow_ntp'),
        tunnel_interface_allow_ntp_variable=pulumi.get(__response__, 'tunnel_interface_allow_ntp_variable'),
        tunnel_interface_allow_ospf=pulumi.get(__response__, 'tunnel_interface_allow_ospf'),
        tunnel_interface_allow_ospf_variable=pulumi.get(__response__, 'tunnel_interface_allow_ospf_variable'),
        tunnel_interface_allow_snmp=pulumi.get(__response__, 'tunnel_interface_allow_snmp'),
        tunnel_interface_allow_snmp_variable=pulumi.get(__response__, 'tunnel_interface_allow_snmp_variable'),
        tunnel_interface_allow_ssh=pulumi.get(__response__, 'tunnel_interface_allow_ssh'),
        tunnel_interface_allow_ssh_variable=pulumi.get(__response__, 'tunnel_interface_allow_ssh_variable'),
        tunnel_interface_allow_stun=pulumi.get(__response__, 'tunnel_interface_allow_stun'),
        tunnel_interface_allow_stun_variable=pulumi.get(__response__, 'tunnel_interface_allow_stun_variable'),
        tunnel_interface_bind_loopback_tunnel=pulumi.get(__response__, 'tunnel_interface_bind_loopback_tunnel'),
        tunnel_interface_bind_loopback_tunnel_variable=pulumi.get(__response__, 'tunnel_interface_bind_loopback_tunnel_variable'),
        tunnel_interface_border=pulumi.get(__response__, 'tunnel_interface_border'),
        tunnel_interface_border_variable=pulumi.get(__response__, 'tunnel_interface_border_variable'),
        tunnel_interface_carrier=pulumi.get(__response__, 'tunnel_interface_carrier'),
        tunnel_interface_carrier_variable=pulumi.get(__response__, 'tunnel_interface_carrier_variable'),
        tunnel_interface_clear_dont_fragment=pulumi.get(__response__, 'tunnel_interface_clear_dont_fragment'),
        tunnel_interface_clear_dont_fragment_variable=pulumi.get(__response__, 'tunnel_interface_clear_dont_fragment_variable'),
        tunnel_interface_color=pulumi.get(__response__, 'tunnel_interface_color'),
        tunnel_interface_color_restrict=pulumi.get(__response__, 'tunnel_interface_color_restrict'),
        tunnel_interface_color_restrict_variable=pulumi.get(__response__, 'tunnel_interface_color_restrict_variable'),
        tunnel_interface_color_variable=pulumi.get(__response__, 'tunnel_interface_color_variable'),
        tunnel_interface_cts_sgt_propagation=pulumi.get(__response__, 'tunnel_interface_cts_sgt_propagation'),
        tunnel_interface_cts_sgt_propagation_variable=pulumi.get(__response__, 'tunnel_interface_cts_sgt_propagation_variable'),
        tunnel_interface_encapsulations=pulumi.get(__response__, 'tunnel_interface_encapsulations'),
        tunnel_interface_exclude_controller_group_list_variable=pulumi.get(__response__, 'tunnel_interface_exclude_controller_group_list_variable'),
        tunnel_interface_exclude_controller_group_lists=pulumi.get(__response__, 'tunnel_interface_exclude_controller_group_lists'),
        tunnel_interface_gre_tunnel_destination_ip=pulumi.get(__response__, 'tunnel_interface_gre_tunnel_destination_ip'),
        tunnel_interface_gre_tunnel_destination_ip_variable=pulumi.get(__response__, 'tunnel_interface_gre_tunnel_destination_ip_variable'),
        tunnel_interface_groups=pulumi.get(__response__, 'tunnel_interface_groups'),
        tunnel_interface_groups_variable=pulumi.get(__response__, 'tunnel_interface_groups_variable'),
        tunnel_interface_hello_interval=pulumi.get(__response__, 'tunnel_interface_hello_interval'),
        tunnel_interface_hello_interval_variable=pulumi.get(__response__, 'tunnel_interface_hello_interval_variable'),
        tunnel_interface_hello_tolerance=pulumi.get(__response__, 'tunnel_interface_hello_tolerance'),
        tunnel_interface_hello_tolerance_variable=pulumi.get(__response__, 'tunnel_interface_hello_tolerance_variable'),
        tunnel_interface_last_resort_circuit=pulumi.get(__response__, 'tunnel_interface_last_resort_circuit'),
        tunnel_interface_last_resort_circuit_variable=pulumi.get(__response__, 'tunnel_interface_last_resort_circuit_variable'),
        tunnel_interface_low_bandwidth_link=pulumi.get(__response__, 'tunnel_interface_low_bandwidth_link'),
        tunnel_interface_low_bandwidth_link_variable=pulumi.get(__response__, 'tunnel_interface_low_bandwidth_link_variable'),
        tunnel_interface_max_control_connections=pulumi.get(__response__, 'tunnel_interface_max_control_connections'),
        tunnel_interface_max_control_connections_variable=pulumi.get(__response__, 'tunnel_interface_max_control_connections_variable'),
        tunnel_interface_nat_refresh_interval=pulumi.get(__response__, 'tunnel_interface_nat_refresh_interval'),
        tunnel_interface_nat_refresh_interval_variable=pulumi.get(__response__, 'tunnel_interface_nat_refresh_interval_variable'),
        tunnel_interface_network_broadcast=pulumi.get(__response__, 'tunnel_interface_network_broadcast'),
        tunnel_interface_network_broadcast_variable=pulumi.get(__response__, 'tunnel_interface_network_broadcast_variable'),
        tunnel_interface_port_hop=pulumi.get(__response__, 'tunnel_interface_port_hop'),
        tunnel_interface_port_hop_variable=pulumi.get(__response__, 'tunnel_interface_port_hop_variable'),
        tunnel_interface_tunnel_tcp_mss=pulumi.get(__response__, 'tunnel_interface_tunnel_tcp_mss'),
        tunnel_interface_tunnel_tcp_mss_variable=pulumi.get(__response__, 'tunnel_interface_tunnel_tcp_mss_variable'),
        tunnel_interface_vbond_as_stun_server=pulumi.get(__response__, 'tunnel_interface_vbond_as_stun_server'),
        tunnel_interface_vbond_as_stun_server_variable=pulumi.get(__response__, 'tunnel_interface_vbond_as_stun_server_variable'),
        tunnel_interface_vmanage_connection_preference=pulumi.get(__response__, 'tunnel_interface_vmanage_connection_preference'),
        tunnel_interface_vmanage_connection_preference_variable=pulumi.get(__response__, 'tunnel_interface_vmanage_connection_preference_variable'),
        tunnel_qos_mode=pulumi.get(__response__, 'tunnel_qos_mode'),
        tunnel_qos_mode_variable=pulumi.get(__response__, 'tunnel_qos_mode_variable'),
        version=pulumi.get(__response__, 'version'),
        xconnect=pulumi.get(__response__, 'xconnect'),
        xconnect_variable=pulumi.get(__response__, 'xconnect_variable')))
