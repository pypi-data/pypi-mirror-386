# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities

__all__ = ['SystemMrfFeatureArgs', 'SystemMrfFeature']

@pulumi.input_type
class SystemMrfFeatureArgs:
    def __init__(__self__, *,
                 feature_profile_id: pulumi.Input[_builtins.str],
                 description: Optional[pulumi.Input[_builtins.str]] = None,
                 enable_migration_to_mrf: Optional[pulumi.Input[_builtins.str]] = None,
                 migration_bgp_community: Optional[pulumi.Input[_builtins.int]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 region_id: Optional[pulumi.Input[_builtins.int]] = None,
                 role: Optional[pulumi.Input[_builtins.str]] = None,
                 role_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 secondary_region_id: Optional[pulumi.Input[_builtins.int]] = None,
                 secondary_region_id_variable: Optional[pulumi.Input[_builtins.str]] = None):
        """
        The set of arguments for constructing a SystemMrfFeature resource.
        :param pulumi.Input[_builtins.str] feature_profile_id: Feature Profile ID
        :param pulumi.Input[_builtins.str] description: The description of the Feature
        :param pulumi.Input[_builtins.str] enable_migration_to_mrf: Enable migration mode to Multi-Region Fabric
                 - Choices: `enabled`, `enabled-from-bgp-core`
        :param pulumi.Input[_builtins.int] migration_bgp_community: Set BGP community during migration from BGP-core based network
                 - Range: `1`-`4294967295`
        :param pulumi.Input[_builtins.str] name: The name of the Feature
        :param pulumi.Input[_builtins.int] region_id: Set region ID
                 - Range: `1`-`63`
        :param pulumi.Input[_builtins.str] role: Set the role for router
                 - Choices: `edge-router`, `border-router`
        :param pulumi.Input[_builtins.str] role_variable: Variable name
        :param pulumi.Input[_builtins.int] secondary_region_id: Set secondary region ID
                 - Range: `1`-`63`
        :param pulumi.Input[_builtins.str] secondary_region_id_variable: Variable name
        """
        pulumi.set(__self__, "feature_profile_id", feature_profile_id)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if enable_migration_to_mrf is not None:
            pulumi.set(__self__, "enable_migration_to_mrf", enable_migration_to_mrf)
        if migration_bgp_community is not None:
            pulumi.set(__self__, "migration_bgp_community", migration_bgp_community)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if region_id is not None:
            pulumi.set(__self__, "region_id", region_id)
        if role is not None:
            pulumi.set(__self__, "role", role)
        if role_variable is not None:
            pulumi.set(__self__, "role_variable", role_variable)
        if secondary_region_id is not None:
            pulumi.set(__self__, "secondary_region_id", secondary_region_id)
        if secondary_region_id_variable is not None:
            pulumi.set(__self__, "secondary_region_id_variable", secondary_region_id_variable)

    @_builtins.property
    @pulumi.getter(name="featureProfileId")
    def feature_profile_id(self) -> pulumi.Input[_builtins.str]:
        """
        Feature Profile ID
        """
        return pulumi.get(self, "feature_profile_id")

    @feature_profile_id.setter
    def feature_profile_id(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "feature_profile_id", value)

    @_builtins.property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The description of the Feature
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "description", value)

    @_builtins.property
    @pulumi.getter(name="enableMigrationToMrf")
    def enable_migration_to_mrf(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Enable migration mode to Multi-Region Fabric
          - Choices: `enabled`, `enabled-from-bgp-core`
        """
        return pulumi.get(self, "enable_migration_to_mrf")

    @enable_migration_to_mrf.setter
    def enable_migration_to_mrf(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "enable_migration_to_mrf", value)

    @_builtins.property
    @pulumi.getter(name="migrationBgpCommunity")
    def migration_bgp_community(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        Set BGP community during migration from BGP-core based network
          - Range: `1`-`4294967295`
        """
        return pulumi.get(self, "migration_bgp_community")

    @migration_bgp_community.setter
    def migration_bgp_community(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "migration_bgp_community", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The name of the Feature
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "name", value)

    @_builtins.property
    @pulumi.getter(name="regionId")
    def region_id(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        Set region ID
          - Range: `1`-`63`
        """
        return pulumi.get(self, "region_id")

    @region_id.setter
    def region_id(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "region_id", value)

    @_builtins.property
    @pulumi.getter
    def role(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Set the role for router
          - Choices: `edge-router`, `border-router`
        """
        return pulumi.get(self, "role")

    @role.setter
    def role(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "role", value)

    @_builtins.property
    @pulumi.getter(name="roleVariable")
    def role_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "role_variable")

    @role_variable.setter
    def role_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "role_variable", value)

    @_builtins.property
    @pulumi.getter(name="secondaryRegionId")
    def secondary_region_id(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        Set secondary region ID
          - Range: `1`-`63`
        """
        return pulumi.get(self, "secondary_region_id")

    @secondary_region_id.setter
    def secondary_region_id(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "secondary_region_id", value)

    @_builtins.property
    @pulumi.getter(name="secondaryRegionIdVariable")
    def secondary_region_id_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "secondary_region_id_variable")

    @secondary_region_id_variable.setter
    def secondary_region_id_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "secondary_region_id_variable", value)


@pulumi.input_type
class _SystemMrfFeatureState:
    def __init__(__self__, *,
                 description: Optional[pulumi.Input[_builtins.str]] = None,
                 enable_migration_to_mrf: Optional[pulumi.Input[_builtins.str]] = None,
                 feature_profile_id: Optional[pulumi.Input[_builtins.str]] = None,
                 migration_bgp_community: Optional[pulumi.Input[_builtins.int]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 region_id: Optional[pulumi.Input[_builtins.int]] = None,
                 role: Optional[pulumi.Input[_builtins.str]] = None,
                 role_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 secondary_region_id: Optional[pulumi.Input[_builtins.int]] = None,
                 secondary_region_id_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 version: Optional[pulumi.Input[_builtins.int]] = None):
        """
        Input properties used for looking up and filtering SystemMrfFeature resources.
        :param pulumi.Input[_builtins.str] description: The description of the Feature
        :param pulumi.Input[_builtins.str] enable_migration_to_mrf: Enable migration mode to Multi-Region Fabric
                 - Choices: `enabled`, `enabled-from-bgp-core`
        :param pulumi.Input[_builtins.str] feature_profile_id: Feature Profile ID
        :param pulumi.Input[_builtins.int] migration_bgp_community: Set BGP community during migration from BGP-core based network
                 - Range: `1`-`4294967295`
        :param pulumi.Input[_builtins.str] name: The name of the Feature
        :param pulumi.Input[_builtins.int] region_id: Set region ID
                 - Range: `1`-`63`
        :param pulumi.Input[_builtins.str] role: Set the role for router
                 - Choices: `edge-router`, `border-router`
        :param pulumi.Input[_builtins.str] role_variable: Variable name
        :param pulumi.Input[_builtins.int] secondary_region_id: Set secondary region ID
                 - Range: `1`-`63`
        :param pulumi.Input[_builtins.str] secondary_region_id_variable: Variable name
        :param pulumi.Input[_builtins.int] version: The version of the Feature
        """
        if description is not None:
            pulumi.set(__self__, "description", description)
        if enable_migration_to_mrf is not None:
            pulumi.set(__self__, "enable_migration_to_mrf", enable_migration_to_mrf)
        if feature_profile_id is not None:
            pulumi.set(__self__, "feature_profile_id", feature_profile_id)
        if migration_bgp_community is not None:
            pulumi.set(__self__, "migration_bgp_community", migration_bgp_community)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if region_id is not None:
            pulumi.set(__self__, "region_id", region_id)
        if role is not None:
            pulumi.set(__self__, "role", role)
        if role_variable is not None:
            pulumi.set(__self__, "role_variable", role_variable)
        if secondary_region_id is not None:
            pulumi.set(__self__, "secondary_region_id", secondary_region_id)
        if secondary_region_id_variable is not None:
            pulumi.set(__self__, "secondary_region_id_variable", secondary_region_id_variable)
        if version is not None:
            pulumi.set(__self__, "version", version)

    @_builtins.property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The description of the Feature
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "description", value)

    @_builtins.property
    @pulumi.getter(name="enableMigrationToMrf")
    def enable_migration_to_mrf(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Enable migration mode to Multi-Region Fabric
          - Choices: `enabled`, `enabled-from-bgp-core`
        """
        return pulumi.get(self, "enable_migration_to_mrf")

    @enable_migration_to_mrf.setter
    def enable_migration_to_mrf(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "enable_migration_to_mrf", value)

    @_builtins.property
    @pulumi.getter(name="featureProfileId")
    def feature_profile_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Feature Profile ID
        """
        return pulumi.get(self, "feature_profile_id")

    @feature_profile_id.setter
    def feature_profile_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "feature_profile_id", value)

    @_builtins.property
    @pulumi.getter(name="migrationBgpCommunity")
    def migration_bgp_community(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        Set BGP community during migration from BGP-core based network
          - Range: `1`-`4294967295`
        """
        return pulumi.get(self, "migration_bgp_community")

    @migration_bgp_community.setter
    def migration_bgp_community(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "migration_bgp_community", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The name of the Feature
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "name", value)

    @_builtins.property
    @pulumi.getter(name="regionId")
    def region_id(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        Set region ID
          - Range: `1`-`63`
        """
        return pulumi.get(self, "region_id")

    @region_id.setter
    def region_id(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "region_id", value)

    @_builtins.property
    @pulumi.getter
    def role(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Set the role for router
          - Choices: `edge-router`, `border-router`
        """
        return pulumi.get(self, "role")

    @role.setter
    def role(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "role", value)

    @_builtins.property
    @pulumi.getter(name="roleVariable")
    def role_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "role_variable")

    @role_variable.setter
    def role_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "role_variable", value)

    @_builtins.property
    @pulumi.getter(name="secondaryRegionId")
    def secondary_region_id(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        Set secondary region ID
          - Range: `1`-`63`
        """
        return pulumi.get(self, "secondary_region_id")

    @secondary_region_id.setter
    def secondary_region_id(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "secondary_region_id", value)

    @_builtins.property
    @pulumi.getter(name="secondaryRegionIdVariable")
    def secondary_region_id_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "secondary_region_id_variable")

    @secondary_region_id_variable.setter
    def secondary_region_id_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "secondary_region_id_variable", value)

    @_builtins.property
    @pulumi.getter
    def version(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        The version of the Feature
        """
        return pulumi.get(self, "version")

    @version.setter
    def version(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "version", value)


@pulumi.type_token("sdwan:index/systemMrfFeature:SystemMrfFeature")
class SystemMrfFeature(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 description: Optional[pulumi.Input[_builtins.str]] = None,
                 enable_migration_to_mrf: Optional[pulumi.Input[_builtins.str]] = None,
                 feature_profile_id: Optional[pulumi.Input[_builtins.str]] = None,
                 migration_bgp_community: Optional[pulumi.Input[_builtins.int]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 region_id: Optional[pulumi.Input[_builtins.int]] = None,
                 role: Optional[pulumi.Input[_builtins.str]] = None,
                 role_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 secondary_region_id: Optional[pulumi.Input[_builtins.int]] = None,
                 secondary_region_id_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 __props__=None):
        """
        This resource can manage a System MRF Feature.
          - Minimum SD-WAN Manager version: `20.12.0`

        ## Example Usage

        ```python
        import pulumi
        import pulumi_sdwan as sdwan

        example = sdwan.SystemMrfFeature("example",
            name="Example",
            description="My Example",
            feature_profile_id="f6dd22c8-0b4f-496c-9a0b-6813d1f8b8ac",
            region_id=1,
            secondary_region_id=2,
            role="edge-router",
            enable_migration_to_mrf="enabled",
            migration_bgp_community=100)
        ```

        ## Import

        The `pulumi import` command can be used, for example:

        Expected import identifier with the format: "system_mrf_feature_id,feature_profile_id"

        ```sh
        $ pulumi import sdwan:index/systemMrfFeature:SystemMrfFeature example "f6b2c44c-693c-4763-b010-895aa3d236bd,f6dd22c8-0b4f-496c-9a0b-6813d1f8b8ac"
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.str] description: The description of the Feature
        :param pulumi.Input[_builtins.str] enable_migration_to_mrf: Enable migration mode to Multi-Region Fabric
                 - Choices: `enabled`, `enabled-from-bgp-core`
        :param pulumi.Input[_builtins.str] feature_profile_id: Feature Profile ID
        :param pulumi.Input[_builtins.int] migration_bgp_community: Set BGP community during migration from BGP-core based network
                 - Range: `1`-`4294967295`
        :param pulumi.Input[_builtins.str] name: The name of the Feature
        :param pulumi.Input[_builtins.int] region_id: Set region ID
                 - Range: `1`-`63`
        :param pulumi.Input[_builtins.str] role: Set the role for router
                 - Choices: `edge-router`, `border-router`
        :param pulumi.Input[_builtins.str] role_variable: Variable name
        :param pulumi.Input[_builtins.int] secondary_region_id: Set secondary region ID
                 - Range: `1`-`63`
        :param pulumi.Input[_builtins.str] secondary_region_id_variable: Variable name
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: SystemMrfFeatureArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        This resource can manage a System MRF Feature.
          - Minimum SD-WAN Manager version: `20.12.0`

        ## Example Usage

        ```python
        import pulumi
        import pulumi_sdwan as sdwan

        example = sdwan.SystemMrfFeature("example",
            name="Example",
            description="My Example",
            feature_profile_id="f6dd22c8-0b4f-496c-9a0b-6813d1f8b8ac",
            region_id=1,
            secondary_region_id=2,
            role="edge-router",
            enable_migration_to_mrf="enabled",
            migration_bgp_community=100)
        ```

        ## Import

        The `pulumi import` command can be used, for example:

        Expected import identifier with the format: "system_mrf_feature_id,feature_profile_id"

        ```sh
        $ pulumi import sdwan:index/systemMrfFeature:SystemMrfFeature example "f6b2c44c-693c-4763-b010-895aa3d236bd,f6dd22c8-0b4f-496c-9a0b-6813d1f8b8ac"
        ```

        :param str resource_name: The name of the resource.
        :param SystemMrfFeatureArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(SystemMrfFeatureArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 description: Optional[pulumi.Input[_builtins.str]] = None,
                 enable_migration_to_mrf: Optional[pulumi.Input[_builtins.str]] = None,
                 feature_profile_id: Optional[pulumi.Input[_builtins.str]] = None,
                 migration_bgp_community: Optional[pulumi.Input[_builtins.int]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 region_id: Optional[pulumi.Input[_builtins.int]] = None,
                 role: Optional[pulumi.Input[_builtins.str]] = None,
                 role_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 secondary_region_id: Optional[pulumi.Input[_builtins.int]] = None,
                 secondary_region_id_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = SystemMrfFeatureArgs.__new__(SystemMrfFeatureArgs)

            __props__.__dict__["description"] = description
            __props__.__dict__["enable_migration_to_mrf"] = enable_migration_to_mrf
            if feature_profile_id is None and not opts.urn:
                raise TypeError("Missing required property 'feature_profile_id'")
            __props__.__dict__["feature_profile_id"] = feature_profile_id
            __props__.__dict__["migration_bgp_community"] = migration_bgp_community
            __props__.__dict__["name"] = name
            __props__.__dict__["region_id"] = region_id
            __props__.__dict__["role"] = role
            __props__.__dict__["role_variable"] = role_variable
            __props__.__dict__["secondary_region_id"] = secondary_region_id
            __props__.__dict__["secondary_region_id_variable"] = secondary_region_id_variable
            __props__.__dict__["version"] = None
        super(SystemMrfFeature, __self__).__init__(
            'sdwan:index/systemMrfFeature:SystemMrfFeature',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            description: Optional[pulumi.Input[_builtins.str]] = None,
            enable_migration_to_mrf: Optional[pulumi.Input[_builtins.str]] = None,
            feature_profile_id: Optional[pulumi.Input[_builtins.str]] = None,
            migration_bgp_community: Optional[pulumi.Input[_builtins.int]] = None,
            name: Optional[pulumi.Input[_builtins.str]] = None,
            region_id: Optional[pulumi.Input[_builtins.int]] = None,
            role: Optional[pulumi.Input[_builtins.str]] = None,
            role_variable: Optional[pulumi.Input[_builtins.str]] = None,
            secondary_region_id: Optional[pulumi.Input[_builtins.int]] = None,
            secondary_region_id_variable: Optional[pulumi.Input[_builtins.str]] = None,
            version: Optional[pulumi.Input[_builtins.int]] = None) -> 'SystemMrfFeature':
        """
        Get an existing SystemMrfFeature resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.str] description: The description of the Feature
        :param pulumi.Input[_builtins.str] enable_migration_to_mrf: Enable migration mode to Multi-Region Fabric
                 - Choices: `enabled`, `enabled-from-bgp-core`
        :param pulumi.Input[_builtins.str] feature_profile_id: Feature Profile ID
        :param pulumi.Input[_builtins.int] migration_bgp_community: Set BGP community during migration from BGP-core based network
                 - Range: `1`-`4294967295`
        :param pulumi.Input[_builtins.str] name: The name of the Feature
        :param pulumi.Input[_builtins.int] region_id: Set region ID
                 - Range: `1`-`63`
        :param pulumi.Input[_builtins.str] role: Set the role for router
                 - Choices: `edge-router`, `border-router`
        :param pulumi.Input[_builtins.str] role_variable: Variable name
        :param pulumi.Input[_builtins.int] secondary_region_id: Set secondary region ID
                 - Range: `1`-`63`
        :param pulumi.Input[_builtins.str] secondary_region_id_variable: Variable name
        :param pulumi.Input[_builtins.int] version: The version of the Feature
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _SystemMrfFeatureState.__new__(_SystemMrfFeatureState)

        __props__.__dict__["description"] = description
        __props__.__dict__["enable_migration_to_mrf"] = enable_migration_to_mrf
        __props__.__dict__["feature_profile_id"] = feature_profile_id
        __props__.__dict__["migration_bgp_community"] = migration_bgp_community
        __props__.__dict__["name"] = name
        __props__.__dict__["region_id"] = region_id
        __props__.__dict__["role"] = role
        __props__.__dict__["role_variable"] = role_variable
        __props__.__dict__["secondary_region_id"] = secondary_region_id
        __props__.__dict__["secondary_region_id_variable"] = secondary_region_id_variable
        __props__.__dict__["version"] = version
        return SystemMrfFeature(resource_name, opts=opts, __props__=__props__)

    @_builtins.property
    @pulumi.getter
    def description(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        The description of the Feature
        """
        return pulumi.get(self, "description")

    @_builtins.property
    @pulumi.getter(name="enableMigrationToMrf")
    def enable_migration_to_mrf(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        Enable migration mode to Multi-Region Fabric
          - Choices: `enabled`, `enabled-from-bgp-core`
        """
        return pulumi.get(self, "enable_migration_to_mrf")

    @_builtins.property
    @pulumi.getter(name="featureProfileId")
    def feature_profile_id(self) -> pulumi.Output[_builtins.str]:
        """
        Feature Profile ID
        """
        return pulumi.get(self, "feature_profile_id")

    @_builtins.property
    @pulumi.getter(name="migrationBgpCommunity")
    def migration_bgp_community(self) -> pulumi.Output[Optional[_builtins.int]]:
        """
        Set BGP community during migration from BGP-core based network
          - Range: `1`-`4294967295`
        """
        return pulumi.get(self, "migration_bgp_community")

    @_builtins.property
    @pulumi.getter
    def name(self) -> pulumi.Output[_builtins.str]:
        """
        The name of the Feature
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter(name="regionId")
    def region_id(self) -> pulumi.Output[Optional[_builtins.int]]:
        """
        Set region ID
          - Range: `1`-`63`
        """
        return pulumi.get(self, "region_id")

    @_builtins.property
    @pulumi.getter
    def role(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        Set the role for router
          - Choices: `edge-router`, `border-router`
        """
        return pulumi.get(self, "role")

    @_builtins.property
    @pulumi.getter(name="roleVariable")
    def role_variable(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "role_variable")

    @_builtins.property
    @pulumi.getter(name="secondaryRegionId")
    def secondary_region_id(self) -> pulumi.Output[Optional[_builtins.int]]:
        """
        Set secondary region ID
          - Range: `1`-`63`
        """
        return pulumi.get(self, "secondary_region_id")

    @_builtins.property
    @pulumi.getter(name="secondaryRegionIdVariable")
    def secondary_region_id_variable(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "secondary_region_id_variable")

    @_builtins.property
    @pulumi.getter
    def version(self) -> pulumi.Output[_builtins.int]:
        """
        The version of the Feature
        """
        return pulumi.get(self, "version")

