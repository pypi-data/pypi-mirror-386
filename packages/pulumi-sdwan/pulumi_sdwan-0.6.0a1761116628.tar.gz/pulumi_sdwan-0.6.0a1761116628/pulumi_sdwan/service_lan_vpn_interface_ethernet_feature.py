# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities
from . import outputs
from ._inputs import *

__all__ = ['ServiceLanVpnInterfaceEthernetFeatureArgs', 'ServiceLanVpnInterfaceEthernetFeature']

@pulumi.input_type
class ServiceLanVpnInterfaceEthernetFeatureArgs:
    def __init__(__self__, *,
                 feature_profile_id: pulumi.Input[_builtins.str],
                 service_lan_vpn_feature_id: pulumi.Input[_builtins.str],
                 acl_ipv4_egress_policy_id: Optional[pulumi.Input[_builtins.str]] = None,
                 acl_ipv4_ingress_policy_id: Optional[pulumi.Input[_builtins.str]] = None,
                 acl_ipv6_egress_policy_id: Optional[pulumi.Input[_builtins.str]] = None,
                 acl_ipv6_ingress_policy_id: Optional[pulumi.Input[_builtins.str]] = None,
                 acl_shaping_rate: Optional[pulumi.Input[_builtins.int]] = None,
                 acl_shaping_rate_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 arp_timeout: Optional[pulumi.Input[_builtins.int]] = None,
                 arp_timeout_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 arps: Optional[pulumi.Input[Sequence[pulumi.Input['ServiceLanVpnInterfaceEthernetFeatureArpArgs']]]] = None,
                 autonegotiate: Optional[pulumi.Input[_builtins.bool]] = None,
                 autonegotiate_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 description: Optional[pulumi.Input[_builtins.str]] = None,
                 duplex: Optional[pulumi.Input[_builtins.str]] = None,
                 duplex_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 enable_dhcpv6: Optional[pulumi.Input[_builtins.bool]] = None,
                 icmp_redirect_disable: Optional[pulumi.Input[_builtins.bool]] = None,
                 icmp_redirect_disable_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 interface_description: Optional[pulumi.Input[_builtins.str]] = None,
                 interface_description_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 interface_mtu: Optional[pulumi.Input[_builtins.int]] = None,
                 interface_mtu_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 interface_name: Optional[pulumi.Input[_builtins.str]] = None,
                 interface_name_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 ip_directed_broadcast: Optional[pulumi.Input[_builtins.bool]] = None,
                 ip_directed_broadcast_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 ip_mtu: Optional[pulumi.Input[_builtins.int]] = None,
                 ip_mtu_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 ipv4_address: Optional[pulumi.Input[_builtins.str]] = None,
                 ipv4_address_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 ipv4_configuration_type: Optional[pulumi.Input[_builtins.str]] = None,
                 ipv4_dhcp_distance: Optional[pulumi.Input[_builtins.int]] = None,
                 ipv4_dhcp_distance_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 ipv4_dhcp_helper_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 ipv4_dhcp_helpers: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 ipv4_nat: Optional[pulumi.Input[_builtins.bool]] = None,
                 ipv4_nat_loopback: Optional[pulumi.Input[_builtins.str]] = None,
                 ipv4_nat_loopback_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 ipv4_nat_overload: Optional[pulumi.Input[_builtins.bool]] = None,
                 ipv4_nat_overload_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 ipv4_nat_prefix_length: Optional[pulumi.Input[_builtins.int]] = None,
                 ipv4_nat_prefix_length_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 ipv4_nat_range_end: Optional[pulumi.Input[_builtins.str]] = None,
                 ipv4_nat_range_end_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 ipv4_nat_range_start: Optional[pulumi.Input[_builtins.str]] = None,
                 ipv4_nat_range_start_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 ipv4_nat_tcp_timeout: Optional[pulumi.Input[_builtins.int]] = None,
                 ipv4_nat_tcp_timeout_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 ipv4_nat_udp_timeout: Optional[pulumi.Input[_builtins.int]] = None,
                 ipv4_nat_udp_timeout_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 ipv4_secondary_addresses: Optional[pulumi.Input[Sequence[pulumi.Input['ServiceLanVpnInterfaceEthernetFeatureIpv4SecondaryAddressArgs']]]] = None,
                 ipv4_subnet_mask: Optional[pulumi.Input[_builtins.str]] = None,
                 ipv4_subnet_mask_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 ipv4_vrrps: Optional[pulumi.Input[Sequence[pulumi.Input['ServiceLanVpnInterfaceEthernetFeatureIpv4VrrpArgs']]]] = None,
                 ipv6_address: Optional[pulumi.Input[_builtins.str]] = None,
                 ipv6_address_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 ipv6_configuration_type: Optional[pulumi.Input[_builtins.str]] = None,
                 ipv6_dhcp_helpers: Optional[pulumi.Input[Sequence[pulumi.Input['ServiceLanVpnInterfaceEthernetFeatureIpv6DhcpHelperArgs']]]] = None,
                 ipv6_dhcp_secondary_addresses: Optional[pulumi.Input[Sequence[pulumi.Input['ServiceLanVpnInterfaceEthernetFeatureIpv6DhcpSecondaryAddressArgs']]]] = None,
                 ipv6_nat: Optional[pulumi.Input[_builtins.bool]] = None,
                 ipv6_secondary_addresses: Optional[pulumi.Input[Sequence[pulumi.Input['ServiceLanVpnInterfaceEthernetFeatureIpv6SecondaryAddressArgs']]]] = None,
                 ipv6_vrrps: Optional[pulumi.Input[Sequence[pulumi.Input['ServiceLanVpnInterfaceEthernetFeatureIpv6VrrpArgs']]]] = None,
                 load_interval: Optional[pulumi.Input[_builtins.int]] = None,
                 load_interval_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 mac_address: Optional[pulumi.Input[_builtins.str]] = None,
                 mac_address_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 media_type: Optional[pulumi.Input[_builtins.str]] = None,
                 media_type_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 nat64: Optional[pulumi.Input[_builtins.bool]] = None,
                 shutdown: Optional[pulumi.Input[_builtins.bool]] = None,
                 shutdown_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 speed: Optional[pulumi.Input[_builtins.str]] = None,
                 speed_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 static_nats: Optional[pulumi.Input[Sequence[pulumi.Input['ServiceLanVpnInterfaceEthernetFeatureStaticNatArgs']]]] = None,
                 tcp_mss: Optional[pulumi.Input[_builtins.int]] = None,
                 tcp_mss_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 tracker: Optional[pulumi.Input[_builtins.str]] = None,
                 tracker_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 trustsec_enable_enforced_propogation: Optional[pulumi.Input[_builtins.bool]] = None,
                 trustsec_enable_sgt_propogation: Optional[pulumi.Input[_builtins.bool]] = None,
                 trustsec_enforced_security_group_tag: Optional[pulumi.Input[_builtins.int]] = None,
                 trustsec_enforced_security_group_tag_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 trustsec_propogate: Optional[pulumi.Input[_builtins.bool]] = None,
                 trustsec_security_group_tag: Optional[pulumi.Input[_builtins.int]] = None,
                 trustsec_security_group_tag_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 xconnect: Optional[pulumi.Input[_builtins.str]] = None,
                 xconnect_variable: Optional[pulumi.Input[_builtins.str]] = None):
        """
        The set of arguments for constructing a ServiceLanVpnInterfaceEthernetFeature resource.
        :param pulumi.Input[_builtins.str] feature_profile_id: Feature Profile ID
        :param pulumi.Input[_builtins.str] service_lan_vpn_feature_id: Service LAN VPN Feature ID
        :param pulumi.Input[_builtins.int] acl_shaping_rate: Shaping Rate (Kbps)
                 - Range: `8`-`100000000`
        :param pulumi.Input[_builtins.str] acl_shaping_rate_variable: Variable name
        :param pulumi.Input[_builtins.int] arp_timeout: Timeout value for dynamically learned ARP entries, <0..2678400> seconds
                 - Range: `0`-`2147483`
                 - Default value: `1200`
        :param pulumi.Input[_builtins.str] arp_timeout_variable: Variable name
        :param pulumi.Input[Sequence[pulumi.Input['ServiceLanVpnInterfaceEthernetFeatureArpArgs']]] arps: Configure ARP entries
        :param pulumi.Input[_builtins.bool] autonegotiate: Link autonegotiation
        :param pulumi.Input[_builtins.str] autonegotiate_variable: Variable name
        :param pulumi.Input[_builtins.str] description: The description of the Feature
        :param pulumi.Input[_builtins.str] duplex: Duplex mode
                 - Choices: `full`, `half`, `auto`
        :param pulumi.Input[_builtins.str] duplex_variable: Variable name
        :param pulumi.Input[_builtins.bool] enable_dhcpv6: Enable DHCPv6, Attribute conditional on `ipv6_configuration_type` being equal to `dynamic`
        :param pulumi.Input[_builtins.bool] icmp_redirect_disable: ICMP/ICMPv6 Redirect Disable
                 - Default value: `true`
        :param pulumi.Input[_builtins.str] icmp_redirect_disable_variable: Variable name
        :param pulumi.Input[_builtins.str] interface_description_variable: Variable name
        :param pulumi.Input[_builtins.int] interface_mtu: Interface MTU
                 - Range: `1500`-`9216`
                 - Default value: `1500`
        :param pulumi.Input[_builtins.str] interface_mtu_variable: Variable name
        :param pulumi.Input[_builtins.str] interface_name_variable: Variable name
        :param pulumi.Input[_builtins.bool] ip_directed_broadcast: IP Directed-Broadcast
                 - Default value: `false`
        :param pulumi.Input[_builtins.str] ip_directed_broadcast_variable: Variable name
        :param pulumi.Input[_builtins.int] ip_mtu: IP MTU for GigabitEthernet main <576..Interface MTU>, GigabitEthernet subinterface <576..9216>, Other Interfaces <576..2000> in bytes
                 - Range: `576`-`9216`
                 - Default value: `1500`
        :param pulumi.Input[_builtins.str] ip_mtu_variable: Variable name
        :param pulumi.Input[_builtins.str] ipv4_address: IP Address, Attribute conditional on `ipv4_configuration_type` being equal to `static`
        :param pulumi.Input[_builtins.str] ipv4_address_variable: Variable name, Attribute conditional on `ipv4_configuration_type` being equal to `static`
        :param pulumi.Input[_builtins.str] ipv4_configuration_type: IPv4 Configuration Type
                 - Choices: `dynamic`, `static`
                 - Default value: `dynamic`
        :param pulumi.Input[_builtins.int] ipv4_dhcp_distance: DHCP Distance, Attribute conditional on `ipv4_configuration_type` being equal to `dynamic`
                 - Range: `1`-`65536`
                 - Default value: `1`
        :param pulumi.Input[_builtins.str] ipv4_dhcp_distance_variable: Variable name, Attribute conditional on `ipv4_configuration_type` being equal to `dynamic`
        :param pulumi.Input[_builtins.str] ipv4_dhcp_helper_variable: Variable name
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] ipv4_dhcp_helpers: List of DHCP IPv4 helper addresses (min 1, max 8)
        :param pulumi.Input[_builtins.bool] ipv4_nat: enable Network Address Translation on this interface
                 - Default value: `false`
        :param pulumi.Input[_builtins.str] ipv4_nat_loopback: NAT Inside Source Loopback Interface
        :param pulumi.Input[_builtins.str] ipv4_nat_loopback_variable: Variable name
        :param pulumi.Input[_builtins.bool] ipv4_nat_overload: NAT Overload
                 - Default value: `true`
        :param pulumi.Input[_builtins.str] ipv4_nat_overload_variable: Variable name
        :param pulumi.Input[_builtins.int] ipv4_nat_prefix_length: NAT Pool Prefix Length
                 - Range: `1`-`32`
        :param pulumi.Input[_builtins.str] ipv4_nat_prefix_length_variable: Variable name
        :param pulumi.Input[_builtins.str] ipv4_nat_range_end: NAT Pool Range End
        :param pulumi.Input[_builtins.str] ipv4_nat_range_end_variable: Variable name
        :param pulumi.Input[_builtins.str] ipv4_nat_range_start: NAT Pool Range Start
        :param pulumi.Input[_builtins.str] ipv4_nat_range_start_variable: Variable name
        :param pulumi.Input[_builtins.int] ipv4_nat_tcp_timeout: Set NAT TCP session timeout, in minutes
                 - Range: `1`-`8947`
                 - Default value: `60`
        :param pulumi.Input[_builtins.str] ipv4_nat_tcp_timeout_variable: Variable name
        :param pulumi.Input[_builtins.int] ipv4_nat_udp_timeout: Set NAT UDP session timeout, in minutes
                 - Range: `1`-`8947`
                 - Default value: `1`
        :param pulumi.Input[_builtins.str] ipv4_nat_udp_timeout_variable: Variable name
        :param pulumi.Input[Sequence[pulumi.Input['ServiceLanVpnInterfaceEthernetFeatureIpv4SecondaryAddressArgs']]] ipv4_secondary_addresses: Secondary IpV4 Addresses, Attribute conditional on `ipv4_configuration_type` being equal to `static`
        :param pulumi.Input[_builtins.str] ipv4_subnet_mask: Subnet Mask, Attribute conditional on `ipv4_configuration_type` being equal to `static`
                 - Choices: `255.255.255.255`, `255.255.255.254`, `255.255.255.252`, `255.255.255.248`, `255.255.255.240`, `255.255.255.224`, `255.255.255.192`, `255.255.255.128`, `255.255.255.0`, `255.255.254.0`, `255.255.252.0`, `255.255.248.0`, `255.255.240.0`, `255.255.224.0`, `255.255.192.0`, `255.255.128.0`, `255.255.0.0`, `255.254.0.0`, `255.252.0.0`, `255.240.0.0`, `255.224.0.0`, `255.192.0.0`, `255.128.0.0`, `255.0.0.0`, `254.0.0.0`, `252.0.0.0`, `248.0.0.0`, `240.0.0.0`, `224.0.0.0`, `192.0.0.0`, `128.0.0.0`, `0.0.0.0`
        :param pulumi.Input[_builtins.str] ipv4_subnet_mask_variable: Variable name, Attribute conditional on `ipv4_configuration_type` being equal to `static`
        :param pulumi.Input[Sequence[pulumi.Input['ServiceLanVpnInterfaceEthernetFeatureIpv4VrrpArgs']]] ipv4_vrrps: Enable VRRP
        :param pulumi.Input[_builtins.str] ipv6_address: IPv6 Address Secondary, Attribute conditional on `ipv6_configuration_type` being equal to `static`
        :param pulumi.Input[_builtins.str] ipv6_address_variable: Variable name, Attribute conditional on `ipv6_configuration_type` being equal to `static`
        :param pulumi.Input[_builtins.str] ipv6_configuration_type: IPv6 Configuration Type
                 - Choices: `dynamic`, `static`, `none`
                 - Default value: `none`
        :param pulumi.Input[Sequence[pulumi.Input['ServiceLanVpnInterfaceEthernetFeatureIpv6DhcpHelperArgs']]] ipv6_dhcp_helpers: DHCPv6 Helper, Attribute conditional on `ipv6_configuration_type` being equal to `static`
        :param pulumi.Input[Sequence[pulumi.Input['ServiceLanVpnInterfaceEthernetFeatureIpv6DhcpSecondaryAddressArgs']]] ipv6_dhcp_secondary_addresses: secondary IPv6 addresses, Attribute conditional on `ipv6_configuration_type` being equal to `dynamic`
        :param pulumi.Input[_builtins.bool] ipv6_nat: enable Network Address Translation ipv6 on this interface
                 - Default value: `false`
        :param pulumi.Input[Sequence[pulumi.Input['ServiceLanVpnInterfaceEthernetFeatureIpv6SecondaryAddressArgs']]] ipv6_secondary_addresses: Static secondary IPv6 addresses, Attribute conditional on `ipv6_configuration_type` being equal to `static`
        :param pulumi.Input[Sequence[pulumi.Input['ServiceLanVpnInterfaceEthernetFeatureIpv6VrrpArgs']]] ipv6_vrrps: Enable VRRP Ipv6
        :param pulumi.Input[_builtins.int] load_interval: Interval for interface load calculation
                 - Range: `30`-`600`
                 - Default value: `30`
        :param pulumi.Input[_builtins.str] load_interval_variable: Variable name
        :param pulumi.Input[_builtins.str] mac_address: MAC Address
        :param pulumi.Input[_builtins.str] mac_address_variable: Variable name
        :param pulumi.Input[_builtins.str] media_type: Media type
                 - Choices: `auto-select`, `rj45`, `sfp`
        :param pulumi.Input[_builtins.str] media_type_variable: Variable name
        :param pulumi.Input[_builtins.str] name: The name of the Feature
        :param pulumi.Input[_builtins.bool] nat64: NAT64 on this interface
                 - Default value: `false`
        :param pulumi.Input[_builtins.bool] shutdown: - Default value: `true`
        :param pulumi.Input[_builtins.str] shutdown_variable: Variable name
        :param pulumi.Input[_builtins.str] speed: Set interface speed
                 - Choices: `10`, `100`, `1000`, `2500`, `10000`
        :param pulumi.Input[_builtins.str] speed_variable: Variable name
        :param pulumi.Input[Sequence[pulumi.Input['ServiceLanVpnInterfaceEthernetFeatureStaticNatArgs']]] static_nats: static NAT
        :param pulumi.Input[_builtins.int] tcp_mss: TCP MSS on SYN packets, in bytes
                 - Range: `500`-`1460`
        :param pulumi.Input[_builtins.str] tcp_mss_variable: Variable name
        :param pulumi.Input[_builtins.str] tracker: Enable tracker for this interface
        :param pulumi.Input[_builtins.str] tracker_variable: Variable name
        :param pulumi.Input[_builtins.bool] trustsec_enable_enforced_propogation: Enable/Disable SGT Enforcement on an interface
        :param pulumi.Input[_builtins.bool] trustsec_enable_sgt_propogation: Indicates that the interface is trustworthy for CTS
                 - Default value: `false`
        :param pulumi.Input[_builtins.int] trustsec_enforced_security_group_tag: SGT value between 2 and 65519
                 - Range: `2`-`65519`
        :param pulumi.Input[_builtins.str] trustsec_enforced_security_group_tag_variable: Variable name
        :param pulumi.Input[_builtins.bool] trustsec_propogate: Enables the interface for CTS SGT authorization and forwarding
                 - Default value: `true`
        :param pulumi.Input[_builtins.int] trustsec_security_group_tag: SGT value between 2 and 65519
                 - Range: `2`-`65519`
        :param pulumi.Input[_builtins.str] trustsec_security_group_tag_variable: Variable name
        :param pulumi.Input[_builtins.str] xconnect: Extend remote TLOC over a GRE tunnel to a local LAN interface
        :param pulumi.Input[_builtins.str] xconnect_variable: Variable name
        """
        pulumi.set(__self__, "feature_profile_id", feature_profile_id)
        pulumi.set(__self__, "service_lan_vpn_feature_id", service_lan_vpn_feature_id)
        if acl_ipv4_egress_policy_id is not None:
            pulumi.set(__self__, "acl_ipv4_egress_policy_id", acl_ipv4_egress_policy_id)
        if acl_ipv4_ingress_policy_id is not None:
            pulumi.set(__self__, "acl_ipv4_ingress_policy_id", acl_ipv4_ingress_policy_id)
        if acl_ipv6_egress_policy_id is not None:
            pulumi.set(__self__, "acl_ipv6_egress_policy_id", acl_ipv6_egress_policy_id)
        if acl_ipv6_ingress_policy_id is not None:
            pulumi.set(__self__, "acl_ipv6_ingress_policy_id", acl_ipv6_ingress_policy_id)
        if acl_shaping_rate is not None:
            pulumi.set(__self__, "acl_shaping_rate", acl_shaping_rate)
        if acl_shaping_rate_variable is not None:
            pulumi.set(__self__, "acl_shaping_rate_variable", acl_shaping_rate_variable)
        if arp_timeout is not None:
            pulumi.set(__self__, "arp_timeout", arp_timeout)
        if arp_timeout_variable is not None:
            pulumi.set(__self__, "arp_timeout_variable", arp_timeout_variable)
        if arps is not None:
            pulumi.set(__self__, "arps", arps)
        if autonegotiate is not None:
            pulumi.set(__self__, "autonegotiate", autonegotiate)
        if autonegotiate_variable is not None:
            pulumi.set(__self__, "autonegotiate_variable", autonegotiate_variable)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if duplex is not None:
            pulumi.set(__self__, "duplex", duplex)
        if duplex_variable is not None:
            pulumi.set(__self__, "duplex_variable", duplex_variable)
        if enable_dhcpv6 is not None:
            pulumi.set(__self__, "enable_dhcpv6", enable_dhcpv6)
        if icmp_redirect_disable is not None:
            pulumi.set(__self__, "icmp_redirect_disable", icmp_redirect_disable)
        if icmp_redirect_disable_variable is not None:
            pulumi.set(__self__, "icmp_redirect_disable_variable", icmp_redirect_disable_variable)
        if interface_description is not None:
            pulumi.set(__self__, "interface_description", interface_description)
        if interface_description_variable is not None:
            pulumi.set(__self__, "interface_description_variable", interface_description_variable)
        if interface_mtu is not None:
            pulumi.set(__self__, "interface_mtu", interface_mtu)
        if interface_mtu_variable is not None:
            pulumi.set(__self__, "interface_mtu_variable", interface_mtu_variable)
        if interface_name is not None:
            pulumi.set(__self__, "interface_name", interface_name)
        if interface_name_variable is not None:
            pulumi.set(__self__, "interface_name_variable", interface_name_variable)
        if ip_directed_broadcast is not None:
            pulumi.set(__self__, "ip_directed_broadcast", ip_directed_broadcast)
        if ip_directed_broadcast_variable is not None:
            pulumi.set(__self__, "ip_directed_broadcast_variable", ip_directed_broadcast_variable)
        if ip_mtu is not None:
            pulumi.set(__self__, "ip_mtu", ip_mtu)
        if ip_mtu_variable is not None:
            pulumi.set(__self__, "ip_mtu_variable", ip_mtu_variable)
        if ipv4_address is not None:
            pulumi.set(__self__, "ipv4_address", ipv4_address)
        if ipv4_address_variable is not None:
            pulumi.set(__self__, "ipv4_address_variable", ipv4_address_variable)
        if ipv4_configuration_type is not None:
            pulumi.set(__self__, "ipv4_configuration_type", ipv4_configuration_type)
        if ipv4_dhcp_distance is not None:
            pulumi.set(__self__, "ipv4_dhcp_distance", ipv4_dhcp_distance)
        if ipv4_dhcp_distance_variable is not None:
            pulumi.set(__self__, "ipv4_dhcp_distance_variable", ipv4_dhcp_distance_variable)
        if ipv4_dhcp_helper_variable is not None:
            pulumi.set(__self__, "ipv4_dhcp_helper_variable", ipv4_dhcp_helper_variable)
        if ipv4_dhcp_helpers is not None:
            pulumi.set(__self__, "ipv4_dhcp_helpers", ipv4_dhcp_helpers)
        if ipv4_nat is not None:
            pulumi.set(__self__, "ipv4_nat", ipv4_nat)
        if ipv4_nat_loopback is not None:
            pulumi.set(__self__, "ipv4_nat_loopback", ipv4_nat_loopback)
        if ipv4_nat_loopback_variable is not None:
            pulumi.set(__self__, "ipv4_nat_loopback_variable", ipv4_nat_loopback_variable)
        if ipv4_nat_overload is not None:
            pulumi.set(__self__, "ipv4_nat_overload", ipv4_nat_overload)
        if ipv4_nat_overload_variable is not None:
            pulumi.set(__self__, "ipv4_nat_overload_variable", ipv4_nat_overload_variable)
        if ipv4_nat_prefix_length is not None:
            pulumi.set(__self__, "ipv4_nat_prefix_length", ipv4_nat_prefix_length)
        if ipv4_nat_prefix_length_variable is not None:
            pulumi.set(__self__, "ipv4_nat_prefix_length_variable", ipv4_nat_prefix_length_variable)
        if ipv4_nat_range_end is not None:
            pulumi.set(__self__, "ipv4_nat_range_end", ipv4_nat_range_end)
        if ipv4_nat_range_end_variable is not None:
            pulumi.set(__self__, "ipv4_nat_range_end_variable", ipv4_nat_range_end_variable)
        if ipv4_nat_range_start is not None:
            pulumi.set(__self__, "ipv4_nat_range_start", ipv4_nat_range_start)
        if ipv4_nat_range_start_variable is not None:
            pulumi.set(__self__, "ipv4_nat_range_start_variable", ipv4_nat_range_start_variable)
        if ipv4_nat_tcp_timeout is not None:
            pulumi.set(__self__, "ipv4_nat_tcp_timeout", ipv4_nat_tcp_timeout)
        if ipv4_nat_tcp_timeout_variable is not None:
            pulumi.set(__self__, "ipv4_nat_tcp_timeout_variable", ipv4_nat_tcp_timeout_variable)
        if ipv4_nat_udp_timeout is not None:
            pulumi.set(__self__, "ipv4_nat_udp_timeout", ipv4_nat_udp_timeout)
        if ipv4_nat_udp_timeout_variable is not None:
            pulumi.set(__self__, "ipv4_nat_udp_timeout_variable", ipv4_nat_udp_timeout_variable)
        if ipv4_secondary_addresses is not None:
            pulumi.set(__self__, "ipv4_secondary_addresses", ipv4_secondary_addresses)
        if ipv4_subnet_mask is not None:
            pulumi.set(__self__, "ipv4_subnet_mask", ipv4_subnet_mask)
        if ipv4_subnet_mask_variable is not None:
            pulumi.set(__self__, "ipv4_subnet_mask_variable", ipv4_subnet_mask_variable)
        if ipv4_vrrps is not None:
            pulumi.set(__self__, "ipv4_vrrps", ipv4_vrrps)
        if ipv6_address is not None:
            pulumi.set(__self__, "ipv6_address", ipv6_address)
        if ipv6_address_variable is not None:
            pulumi.set(__self__, "ipv6_address_variable", ipv6_address_variable)
        if ipv6_configuration_type is not None:
            pulumi.set(__self__, "ipv6_configuration_type", ipv6_configuration_type)
        if ipv6_dhcp_helpers is not None:
            pulumi.set(__self__, "ipv6_dhcp_helpers", ipv6_dhcp_helpers)
        if ipv6_dhcp_secondary_addresses is not None:
            pulumi.set(__self__, "ipv6_dhcp_secondary_addresses", ipv6_dhcp_secondary_addresses)
        if ipv6_nat is not None:
            pulumi.set(__self__, "ipv6_nat", ipv6_nat)
        if ipv6_secondary_addresses is not None:
            pulumi.set(__self__, "ipv6_secondary_addresses", ipv6_secondary_addresses)
        if ipv6_vrrps is not None:
            pulumi.set(__self__, "ipv6_vrrps", ipv6_vrrps)
        if load_interval is not None:
            pulumi.set(__self__, "load_interval", load_interval)
        if load_interval_variable is not None:
            pulumi.set(__self__, "load_interval_variable", load_interval_variable)
        if mac_address is not None:
            pulumi.set(__self__, "mac_address", mac_address)
        if mac_address_variable is not None:
            pulumi.set(__self__, "mac_address_variable", mac_address_variable)
        if media_type is not None:
            pulumi.set(__self__, "media_type", media_type)
        if media_type_variable is not None:
            pulumi.set(__self__, "media_type_variable", media_type_variable)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if nat64 is not None:
            pulumi.set(__self__, "nat64", nat64)
        if shutdown is not None:
            pulumi.set(__self__, "shutdown", shutdown)
        if shutdown_variable is not None:
            pulumi.set(__self__, "shutdown_variable", shutdown_variable)
        if speed is not None:
            pulumi.set(__self__, "speed", speed)
        if speed_variable is not None:
            pulumi.set(__self__, "speed_variable", speed_variable)
        if static_nats is not None:
            pulumi.set(__self__, "static_nats", static_nats)
        if tcp_mss is not None:
            pulumi.set(__self__, "tcp_mss", tcp_mss)
        if tcp_mss_variable is not None:
            pulumi.set(__self__, "tcp_mss_variable", tcp_mss_variable)
        if tracker is not None:
            pulumi.set(__self__, "tracker", tracker)
        if tracker_variable is not None:
            pulumi.set(__self__, "tracker_variable", tracker_variable)
        if trustsec_enable_enforced_propogation is not None:
            pulumi.set(__self__, "trustsec_enable_enforced_propogation", trustsec_enable_enforced_propogation)
        if trustsec_enable_sgt_propogation is not None:
            pulumi.set(__self__, "trustsec_enable_sgt_propogation", trustsec_enable_sgt_propogation)
        if trustsec_enforced_security_group_tag is not None:
            pulumi.set(__self__, "trustsec_enforced_security_group_tag", trustsec_enforced_security_group_tag)
        if trustsec_enforced_security_group_tag_variable is not None:
            pulumi.set(__self__, "trustsec_enforced_security_group_tag_variable", trustsec_enforced_security_group_tag_variable)
        if trustsec_propogate is not None:
            pulumi.set(__self__, "trustsec_propogate", trustsec_propogate)
        if trustsec_security_group_tag is not None:
            pulumi.set(__self__, "trustsec_security_group_tag", trustsec_security_group_tag)
        if trustsec_security_group_tag_variable is not None:
            pulumi.set(__self__, "trustsec_security_group_tag_variable", trustsec_security_group_tag_variable)
        if xconnect is not None:
            pulumi.set(__self__, "xconnect", xconnect)
        if xconnect_variable is not None:
            pulumi.set(__self__, "xconnect_variable", xconnect_variable)

    @_builtins.property
    @pulumi.getter(name="featureProfileId")
    def feature_profile_id(self) -> pulumi.Input[_builtins.str]:
        """
        Feature Profile ID
        """
        return pulumi.get(self, "feature_profile_id")

    @feature_profile_id.setter
    def feature_profile_id(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "feature_profile_id", value)

    @_builtins.property
    @pulumi.getter(name="serviceLanVpnFeatureId")
    def service_lan_vpn_feature_id(self) -> pulumi.Input[_builtins.str]:
        """
        Service LAN VPN Feature ID
        """
        return pulumi.get(self, "service_lan_vpn_feature_id")

    @service_lan_vpn_feature_id.setter
    def service_lan_vpn_feature_id(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "service_lan_vpn_feature_id", value)

    @_builtins.property
    @pulumi.getter(name="aclIpv4EgressPolicyId")
    def acl_ipv4_egress_policy_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "acl_ipv4_egress_policy_id")

    @acl_ipv4_egress_policy_id.setter
    def acl_ipv4_egress_policy_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "acl_ipv4_egress_policy_id", value)

    @_builtins.property
    @pulumi.getter(name="aclIpv4IngressPolicyId")
    def acl_ipv4_ingress_policy_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "acl_ipv4_ingress_policy_id")

    @acl_ipv4_ingress_policy_id.setter
    def acl_ipv4_ingress_policy_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "acl_ipv4_ingress_policy_id", value)

    @_builtins.property
    @pulumi.getter(name="aclIpv6EgressPolicyId")
    def acl_ipv6_egress_policy_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "acl_ipv6_egress_policy_id")

    @acl_ipv6_egress_policy_id.setter
    def acl_ipv6_egress_policy_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "acl_ipv6_egress_policy_id", value)

    @_builtins.property
    @pulumi.getter(name="aclIpv6IngressPolicyId")
    def acl_ipv6_ingress_policy_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "acl_ipv6_ingress_policy_id")

    @acl_ipv6_ingress_policy_id.setter
    def acl_ipv6_ingress_policy_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "acl_ipv6_ingress_policy_id", value)

    @_builtins.property
    @pulumi.getter(name="aclShapingRate")
    def acl_shaping_rate(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        Shaping Rate (Kbps)
          - Range: `8`-`100000000`
        """
        return pulumi.get(self, "acl_shaping_rate")

    @acl_shaping_rate.setter
    def acl_shaping_rate(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "acl_shaping_rate", value)

    @_builtins.property
    @pulumi.getter(name="aclShapingRateVariable")
    def acl_shaping_rate_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "acl_shaping_rate_variable")

    @acl_shaping_rate_variable.setter
    def acl_shaping_rate_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "acl_shaping_rate_variable", value)

    @_builtins.property
    @pulumi.getter(name="arpTimeout")
    def arp_timeout(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        Timeout value for dynamically learned ARP entries, <0..2678400> seconds
          - Range: `0`-`2147483`
          - Default value: `1200`
        """
        return pulumi.get(self, "arp_timeout")

    @arp_timeout.setter
    def arp_timeout(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "arp_timeout", value)

    @_builtins.property
    @pulumi.getter(name="arpTimeoutVariable")
    def arp_timeout_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "arp_timeout_variable")

    @arp_timeout_variable.setter
    def arp_timeout_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "arp_timeout_variable", value)

    @_builtins.property
    @pulumi.getter
    def arps(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ServiceLanVpnInterfaceEthernetFeatureArpArgs']]]]:
        """
        Configure ARP entries
        """
        return pulumi.get(self, "arps")

    @arps.setter
    def arps(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ServiceLanVpnInterfaceEthernetFeatureArpArgs']]]]):
        pulumi.set(self, "arps", value)

    @_builtins.property
    @pulumi.getter
    def autonegotiate(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Link autonegotiation
        """
        return pulumi.get(self, "autonegotiate")

    @autonegotiate.setter
    def autonegotiate(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "autonegotiate", value)

    @_builtins.property
    @pulumi.getter(name="autonegotiateVariable")
    def autonegotiate_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "autonegotiate_variable")

    @autonegotiate_variable.setter
    def autonegotiate_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "autonegotiate_variable", value)

    @_builtins.property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The description of the Feature
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "description", value)

    @_builtins.property
    @pulumi.getter
    def duplex(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Duplex mode
          - Choices: `full`, `half`, `auto`
        """
        return pulumi.get(self, "duplex")

    @duplex.setter
    def duplex(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "duplex", value)

    @_builtins.property
    @pulumi.getter(name="duplexVariable")
    def duplex_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "duplex_variable")

    @duplex_variable.setter
    def duplex_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "duplex_variable", value)

    @_builtins.property
    @pulumi.getter(name="enableDhcpv6")
    def enable_dhcpv6(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Enable DHCPv6, Attribute conditional on `ipv6_configuration_type` being equal to `dynamic`
        """
        return pulumi.get(self, "enable_dhcpv6")

    @enable_dhcpv6.setter
    def enable_dhcpv6(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "enable_dhcpv6", value)

    @_builtins.property
    @pulumi.getter(name="icmpRedirectDisable")
    def icmp_redirect_disable(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        ICMP/ICMPv6 Redirect Disable
          - Default value: `true`
        """
        return pulumi.get(self, "icmp_redirect_disable")

    @icmp_redirect_disable.setter
    def icmp_redirect_disable(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "icmp_redirect_disable", value)

    @_builtins.property
    @pulumi.getter(name="icmpRedirectDisableVariable")
    def icmp_redirect_disable_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "icmp_redirect_disable_variable")

    @icmp_redirect_disable_variable.setter
    def icmp_redirect_disable_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "icmp_redirect_disable_variable", value)

    @_builtins.property
    @pulumi.getter(name="interfaceDescription")
    def interface_description(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "interface_description")

    @interface_description.setter
    def interface_description(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "interface_description", value)

    @_builtins.property
    @pulumi.getter(name="interfaceDescriptionVariable")
    def interface_description_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "interface_description_variable")

    @interface_description_variable.setter
    def interface_description_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "interface_description_variable", value)

    @_builtins.property
    @pulumi.getter(name="interfaceMtu")
    def interface_mtu(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        Interface MTU
          - Range: `1500`-`9216`
          - Default value: `1500`
        """
        return pulumi.get(self, "interface_mtu")

    @interface_mtu.setter
    def interface_mtu(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "interface_mtu", value)

    @_builtins.property
    @pulumi.getter(name="interfaceMtuVariable")
    def interface_mtu_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "interface_mtu_variable")

    @interface_mtu_variable.setter
    def interface_mtu_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "interface_mtu_variable", value)

    @_builtins.property
    @pulumi.getter(name="interfaceName")
    def interface_name(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "interface_name")

    @interface_name.setter
    def interface_name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "interface_name", value)

    @_builtins.property
    @pulumi.getter(name="interfaceNameVariable")
    def interface_name_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "interface_name_variable")

    @interface_name_variable.setter
    def interface_name_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "interface_name_variable", value)

    @_builtins.property
    @pulumi.getter(name="ipDirectedBroadcast")
    def ip_directed_broadcast(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        IP Directed-Broadcast
          - Default value: `false`
        """
        return pulumi.get(self, "ip_directed_broadcast")

    @ip_directed_broadcast.setter
    def ip_directed_broadcast(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "ip_directed_broadcast", value)

    @_builtins.property
    @pulumi.getter(name="ipDirectedBroadcastVariable")
    def ip_directed_broadcast_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "ip_directed_broadcast_variable")

    @ip_directed_broadcast_variable.setter
    def ip_directed_broadcast_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "ip_directed_broadcast_variable", value)

    @_builtins.property
    @pulumi.getter(name="ipMtu")
    def ip_mtu(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        IP MTU for GigabitEthernet main <576..Interface MTU>, GigabitEthernet subinterface <576..9216>, Other Interfaces <576..2000> in bytes
          - Range: `576`-`9216`
          - Default value: `1500`
        """
        return pulumi.get(self, "ip_mtu")

    @ip_mtu.setter
    def ip_mtu(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "ip_mtu", value)

    @_builtins.property
    @pulumi.getter(name="ipMtuVariable")
    def ip_mtu_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "ip_mtu_variable")

    @ip_mtu_variable.setter
    def ip_mtu_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "ip_mtu_variable", value)

    @_builtins.property
    @pulumi.getter(name="ipv4Address")
    def ipv4_address(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        IP Address, Attribute conditional on `ipv4_configuration_type` being equal to `static`
        """
        return pulumi.get(self, "ipv4_address")

    @ipv4_address.setter
    def ipv4_address(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "ipv4_address", value)

    @_builtins.property
    @pulumi.getter(name="ipv4AddressVariable")
    def ipv4_address_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name, Attribute conditional on `ipv4_configuration_type` being equal to `static`
        """
        return pulumi.get(self, "ipv4_address_variable")

    @ipv4_address_variable.setter
    def ipv4_address_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "ipv4_address_variable", value)

    @_builtins.property
    @pulumi.getter(name="ipv4ConfigurationType")
    def ipv4_configuration_type(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        IPv4 Configuration Type
          - Choices: `dynamic`, `static`
          - Default value: `dynamic`
        """
        return pulumi.get(self, "ipv4_configuration_type")

    @ipv4_configuration_type.setter
    def ipv4_configuration_type(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "ipv4_configuration_type", value)

    @_builtins.property
    @pulumi.getter(name="ipv4DhcpDistance")
    def ipv4_dhcp_distance(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        DHCP Distance, Attribute conditional on `ipv4_configuration_type` being equal to `dynamic`
          - Range: `1`-`65536`
          - Default value: `1`
        """
        return pulumi.get(self, "ipv4_dhcp_distance")

    @ipv4_dhcp_distance.setter
    def ipv4_dhcp_distance(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "ipv4_dhcp_distance", value)

    @_builtins.property
    @pulumi.getter(name="ipv4DhcpDistanceVariable")
    def ipv4_dhcp_distance_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name, Attribute conditional on `ipv4_configuration_type` being equal to `dynamic`
        """
        return pulumi.get(self, "ipv4_dhcp_distance_variable")

    @ipv4_dhcp_distance_variable.setter
    def ipv4_dhcp_distance_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "ipv4_dhcp_distance_variable", value)

    @_builtins.property
    @pulumi.getter(name="ipv4DhcpHelperVariable")
    def ipv4_dhcp_helper_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "ipv4_dhcp_helper_variable")

    @ipv4_dhcp_helper_variable.setter
    def ipv4_dhcp_helper_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "ipv4_dhcp_helper_variable", value)

    @_builtins.property
    @pulumi.getter(name="ipv4DhcpHelpers")
    def ipv4_dhcp_helpers(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]:
        """
        List of DHCP IPv4 helper addresses (min 1, max 8)
        """
        return pulumi.get(self, "ipv4_dhcp_helpers")

    @ipv4_dhcp_helpers.setter
    def ipv4_dhcp_helpers(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "ipv4_dhcp_helpers", value)

    @_builtins.property
    @pulumi.getter(name="ipv4Nat")
    def ipv4_nat(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        enable Network Address Translation on this interface
          - Default value: `false`
        """
        return pulumi.get(self, "ipv4_nat")

    @ipv4_nat.setter
    def ipv4_nat(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "ipv4_nat", value)

    @_builtins.property
    @pulumi.getter(name="ipv4NatLoopback")
    def ipv4_nat_loopback(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        NAT Inside Source Loopback Interface
        """
        return pulumi.get(self, "ipv4_nat_loopback")

    @ipv4_nat_loopback.setter
    def ipv4_nat_loopback(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "ipv4_nat_loopback", value)

    @_builtins.property
    @pulumi.getter(name="ipv4NatLoopbackVariable")
    def ipv4_nat_loopback_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "ipv4_nat_loopback_variable")

    @ipv4_nat_loopback_variable.setter
    def ipv4_nat_loopback_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "ipv4_nat_loopback_variable", value)

    @_builtins.property
    @pulumi.getter(name="ipv4NatOverload")
    def ipv4_nat_overload(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        NAT Overload
          - Default value: `true`
        """
        return pulumi.get(self, "ipv4_nat_overload")

    @ipv4_nat_overload.setter
    def ipv4_nat_overload(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "ipv4_nat_overload", value)

    @_builtins.property
    @pulumi.getter(name="ipv4NatOverloadVariable")
    def ipv4_nat_overload_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "ipv4_nat_overload_variable")

    @ipv4_nat_overload_variable.setter
    def ipv4_nat_overload_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "ipv4_nat_overload_variable", value)

    @_builtins.property
    @pulumi.getter(name="ipv4NatPrefixLength")
    def ipv4_nat_prefix_length(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        NAT Pool Prefix Length
          - Range: `1`-`32`
        """
        return pulumi.get(self, "ipv4_nat_prefix_length")

    @ipv4_nat_prefix_length.setter
    def ipv4_nat_prefix_length(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "ipv4_nat_prefix_length", value)

    @_builtins.property
    @pulumi.getter(name="ipv4NatPrefixLengthVariable")
    def ipv4_nat_prefix_length_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "ipv4_nat_prefix_length_variable")

    @ipv4_nat_prefix_length_variable.setter
    def ipv4_nat_prefix_length_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "ipv4_nat_prefix_length_variable", value)

    @_builtins.property
    @pulumi.getter(name="ipv4NatRangeEnd")
    def ipv4_nat_range_end(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        NAT Pool Range End
        """
        return pulumi.get(self, "ipv4_nat_range_end")

    @ipv4_nat_range_end.setter
    def ipv4_nat_range_end(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "ipv4_nat_range_end", value)

    @_builtins.property
    @pulumi.getter(name="ipv4NatRangeEndVariable")
    def ipv4_nat_range_end_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "ipv4_nat_range_end_variable")

    @ipv4_nat_range_end_variable.setter
    def ipv4_nat_range_end_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "ipv4_nat_range_end_variable", value)

    @_builtins.property
    @pulumi.getter(name="ipv4NatRangeStart")
    def ipv4_nat_range_start(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        NAT Pool Range Start
        """
        return pulumi.get(self, "ipv4_nat_range_start")

    @ipv4_nat_range_start.setter
    def ipv4_nat_range_start(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "ipv4_nat_range_start", value)

    @_builtins.property
    @pulumi.getter(name="ipv4NatRangeStartVariable")
    def ipv4_nat_range_start_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "ipv4_nat_range_start_variable")

    @ipv4_nat_range_start_variable.setter
    def ipv4_nat_range_start_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "ipv4_nat_range_start_variable", value)

    @_builtins.property
    @pulumi.getter(name="ipv4NatTcpTimeout")
    def ipv4_nat_tcp_timeout(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        Set NAT TCP session timeout, in minutes
          - Range: `1`-`8947`
          - Default value: `60`
        """
        return pulumi.get(self, "ipv4_nat_tcp_timeout")

    @ipv4_nat_tcp_timeout.setter
    def ipv4_nat_tcp_timeout(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "ipv4_nat_tcp_timeout", value)

    @_builtins.property
    @pulumi.getter(name="ipv4NatTcpTimeoutVariable")
    def ipv4_nat_tcp_timeout_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "ipv4_nat_tcp_timeout_variable")

    @ipv4_nat_tcp_timeout_variable.setter
    def ipv4_nat_tcp_timeout_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "ipv4_nat_tcp_timeout_variable", value)

    @_builtins.property
    @pulumi.getter(name="ipv4NatUdpTimeout")
    def ipv4_nat_udp_timeout(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        Set NAT UDP session timeout, in minutes
          - Range: `1`-`8947`
          - Default value: `1`
        """
        return pulumi.get(self, "ipv4_nat_udp_timeout")

    @ipv4_nat_udp_timeout.setter
    def ipv4_nat_udp_timeout(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "ipv4_nat_udp_timeout", value)

    @_builtins.property
    @pulumi.getter(name="ipv4NatUdpTimeoutVariable")
    def ipv4_nat_udp_timeout_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "ipv4_nat_udp_timeout_variable")

    @ipv4_nat_udp_timeout_variable.setter
    def ipv4_nat_udp_timeout_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "ipv4_nat_udp_timeout_variable", value)

    @_builtins.property
    @pulumi.getter(name="ipv4SecondaryAddresses")
    def ipv4_secondary_addresses(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ServiceLanVpnInterfaceEthernetFeatureIpv4SecondaryAddressArgs']]]]:
        """
        Secondary IpV4 Addresses, Attribute conditional on `ipv4_configuration_type` being equal to `static`
        """
        return pulumi.get(self, "ipv4_secondary_addresses")

    @ipv4_secondary_addresses.setter
    def ipv4_secondary_addresses(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ServiceLanVpnInterfaceEthernetFeatureIpv4SecondaryAddressArgs']]]]):
        pulumi.set(self, "ipv4_secondary_addresses", value)

    @_builtins.property
    @pulumi.getter(name="ipv4SubnetMask")
    def ipv4_subnet_mask(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Subnet Mask, Attribute conditional on `ipv4_configuration_type` being equal to `static`
          - Choices: `255.255.255.255`, `255.255.255.254`, `255.255.255.252`, `255.255.255.248`, `255.255.255.240`, `255.255.255.224`, `255.255.255.192`, `255.255.255.128`, `255.255.255.0`, `255.255.254.0`, `255.255.252.0`, `255.255.248.0`, `255.255.240.0`, `255.255.224.0`, `255.255.192.0`, `255.255.128.0`, `255.255.0.0`, `255.254.0.0`, `255.252.0.0`, `255.240.0.0`, `255.224.0.0`, `255.192.0.0`, `255.128.0.0`, `255.0.0.0`, `254.0.0.0`, `252.0.0.0`, `248.0.0.0`, `240.0.0.0`, `224.0.0.0`, `192.0.0.0`, `128.0.0.0`, `0.0.0.0`
        """
        return pulumi.get(self, "ipv4_subnet_mask")

    @ipv4_subnet_mask.setter
    def ipv4_subnet_mask(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "ipv4_subnet_mask", value)

    @_builtins.property
    @pulumi.getter(name="ipv4SubnetMaskVariable")
    def ipv4_subnet_mask_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name, Attribute conditional on `ipv4_configuration_type` being equal to `static`
        """
        return pulumi.get(self, "ipv4_subnet_mask_variable")

    @ipv4_subnet_mask_variable.setter
    def ipv4_subnet_mask_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "ipv4_subnet_mask_variable", value)

    @_builtins.property
    @pulumi.getter(name="ipv4Vrrps")
    def ipv4_vrrps(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ServiceLanVpnInterfaceEthernetFeatureIpv4VrrpArgs']]]]:
        """
        Enable VRRP
        """
        return pulumi.get(self, "ipv4_vrrps")

    @ipv4_vrrps.setter
    def ipv4_vrrps(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ServiceLanVpnInterfaceEthernetFeatureIpv4VrrpArgs']]]]):
        pulumi.set(self, "ipv4_vrrps", value)

    @_builtins.property
    @pulumi.getter(name="ipv6Address")
    def ipv6_address(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        IPv6 Address Secondary, Attribute conditional on `ipv6_configuration_type` being equal to `static`
        """
        return pulumi.get(self, "ipv6_address")

    @ipv6_address.setter
    def ipv6_address(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "ipv6_address", value)

    @_builtins.property
    @pulumi.getter(name="ipv6AddressVariable")
    def ipv6_address_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name, Attribute conditional on `ipv6_configuration_type` being equal to `static`
        """
        return pulumi.get(self, "ipv6_address_variable")

    @ipv6_address_variable.setter
    def ipv6_address_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "ipv6_address_variable", value)

    @_builtins.property
    @pulumi.getter(name="ipv6ConfigurationType")
    def ipv6_configuration_type(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        IPv6 Configuration Type
          - Choices: `dynamic`, `static`, `none`
          - Default value: `none`
        """
        return pulumi.get(self, "ipv6_configuration_type")

    @ipv6_configuration_type.setter
    def ipv6_configuration_type(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "ipv6_configuration_type", value)

    @_builtins.property
    @pulumi.getter(name="ipv6DhcpHelpers")
    def ipv6_dhcp_helpers(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ServiceLanVpnInterfaceEthernetFeatureIpv6DhcpHelperArgs']]]]:
        """
        DHCPv6 Helper, Attribute conditional on `ipv6_configuration_type` being equal to `static`
        """
        return pulumi.get(self, "ipv6_dhcp_helpers")

    @ipv6_dhcp_helpers.setter
    def ipv6_dhcp_helpers(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ServiceLanVpnInterfaceEthernetFeatureIpv6DhcpHelperArgs']]]]):
        pulumi.set(self, "ipv6_dhcp_helpers", value)

    @_builtins.property
    @pulumi.getter(name="ipv6DhcpSecondaryAddresses")
    def ipv6_dhcp_secondary_addresses(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ServiceLanVpnInterfaceEthernetFeatureIpv6DhcpSecondaryAddressArgs']]]]:
        """
        secondary IPv6 addresses, Attribute conditional on `ipv6_configuration_type` being equal to `dynamic`
        """
        return pulumi.get(self, "ipv6_dhcp_secondary_addresses")

    @ipv6_dhcp_secondary_addresses.setter
    def ipv6_dhcp_secondary_addresses(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ServiceLanVpnInterfaceEthernetFeatureIpv6DhcpSecondaryAddressArgs']]]]):
        pulumi.set(self, "ipv6_dhcp_secondary_addresses", value)

    @_builtins.property
    @pulumi.getter(name="ipv6Nat")
    def ipv6_nat(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        enable Network Address Translation ipv6 on this interface
          - Default value: `false`
        """
        return pulumi.get(self, "ipv6_nat")

    @ipv6_nat.setter
    def ipv6_nat(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "ipv6_nat", value)

    @_builtins.property
    @pulumi.getter(name="ipv6SecondaryAddresses")
    def ipv6_secondary_addresses(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ServiceLanVpnInterfaceEthernetFeatureIpv6SecondaryAddressArgs']]]]:
        """
        Static secondary IPv6 addresses, Attribute conditional on `ipv6_configuration_type` being equal to `static`
        """
        return pulumi.get(self, "ipv6_secondary_addresses")

    @ipv6_secondary_addresses.setter
    def ipv6_secondary_addresses(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ServiceLanVpnInterfaceEthernetFeatureIpv6SecondaryAddressArgs']]]]):
        pulumi.set(self, "ipv6_secondary_addresses", value)

    @_builtins.property
    @pulumi.getter(name="ipv6Vrrps")
    def ipv6_vrrps(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ServiceLanVpnInterfaceEthernetFeatureIpv6VrrpArgs']]]]:
        """
        Enable VRRP Ipv6
        """
        return pulumi.get(self, "ipv6_vrrps")

    @ipv6_vrrps.setter
    def ipv6_vrrps(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ServiceLanVpnInterfaceEthernetFeatureIpv6VrrpArgs']]]]):
        pulumi.set(self, "ipv6_vrrps", value)

    @_builtins.property
    @pulumi.getter(name="loadInterval")
    def load_interval(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        Interval for interface load calculation
          - Range: `30`-`600`
          - Default value: `30`
        """
        return pulumi.get(self, "load_interval")

    @load_interval.setter
    def load_interval(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "load_interval", value)

    @_builtins.property
    @pulumi.getter(name="loadIntervalVariable")
    def load_interval_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "load_interval_variable")

    @load_interval_variable.setter
    def load_interval_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "load_interval_variable", value)

    @_builtins.property
    @pulumi.getter(name="macAddress")
    def mac_address(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        MAC Address
        """
        return pulumi.get(self, "mac_address")

    @mac_address.setter
    def mac_address(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "mac_address", value)

    @_builtins.property
    @pulumi.getter(name="macAddressVariable")
    def mac_address_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "mac_address_variable")

    @mac_address_variable.setter
    def mac_address_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "mac_address_variable", value)

    @_builtins.property
    @pulumi.getter(name="mediaType")
    def media_type(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Media type
          - Choices: `auto-select`, `rj45`, `sfp`
        """
        return pulumi.get(self, "media_type")

    @media_type.setter
    def media_type(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "media_type", value)

    @_builtins.property
    @pulumi.getter(name="mediaTypeVariable")
    def media_type_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "media_type_variable")

    @media_type_variable.setter
    def media_type_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "media_type_variable", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The name of the Feature
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "name", value)

    @_builtins.property
    @pulumi.getter
    def nat64(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        NAT64 on this interface
          - Default value: `false`
        """
        return pulumi.get(self, "nat64")

    @nat64.setter
    def nat64(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "nat64", value)

    @_builtins.property
    @pulumi.getter
    def shutdown(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        - Default value: `true`
        """
        return pulumi.get(self, "shutdown")

    @shutdown.setter
    def shutdown(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "shutdown", value)

    @_builtins.property
    @pulumi.getter(name="shutdownVariable")
    def shutdown_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "shutdown_variable")

    @shutdown_variable.setter
    def shutdown_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "shutdown_variable", value)

    @_builtins.property
    @pulumi.getter
    def speed(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Set interface speed
          - Choices: `10`, `100`, `1000`, `2500`, `10000`
        """
        return pulumi.get(self, "speed")

    @speed.setter
    def speed(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "speed", value)

    @_builtins.property
    @pulumi.getter(name="speedVariable")
    def speed_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "speed_variable")

    @speed_variable.setter
    def speed_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "speed_variable", value)

    @_builtins.property
    @pulumi.getter(name="staticNats")
    def static_nats(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ServiceLanVpnInterfaceEthernetFeatureStaticNatArgs']]]]:
        """
        static NAT
        """
        return pulumi.get(self, "static_nats")

    @static_nats.setter
    def static_nats(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ServiceLanVpnInterfaceEthernetFeatureStaticNatArgs']]]]):
        pulumi.set(self, "static_nats", value)

    @_builtins.property
    @pulumi.getter(name="tcpMss")
    def tcp_mss(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        TCP MSS on SYN packets, in bytes
          - Range: `500`-`1460`
        """
        return pulumi.get(self, "tcp_mss")

    @tcp_mss.setter
    def tcp_mss(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "tcp_mss", value)

    @_builtins.property
    @pulumi.getter(name="tcpMssVariable")
    def tcp_mss_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "tcp_mss_variable")

    @tcp_mss_variable.setter
    def tcp_mss_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "tcp_mss_variable", value)

    @_builtins.property
    @pulumi.getter
    def tracker(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Enable tracker for this interface
        """
        return pulumi.get(self, "tracker")

    @tracker.setter
    def tracker(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "tracker", value)

    @_builtins.property
    @pulumi.getter(name="trackerVariable")
    def tracker_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "tracker_variable")

    @tracker_variable.setter
    def tracker_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "tracker_variable", value)

    @_builtins.property
    @pulumi.getter(name="trustsecEnableEnforcedPropogation")
    def trustsec_enable_enforced_propogation(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Enable/Disable SGT Enforcement on an interface
        """
        return pulumi.get(self, "trustsec_enable_enforced_propogation")

    @trustsec_enable_enforced_propogation.setter
    def trustsec_enable_enforced_propogation(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "trustsec_enable_enforced_propogation", value)

    @_builtins.property
    @pulumi.getter(name="trustsecEnableSgtPropogation")
    def trustsec_enable_sgt_propogation(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Indicates that the interface is trustworthy for CTS
          - Default value: `false`
        """
        return pulumi.get(self, "trustsec_enable_sgt_propogation")

    @trustsec_enable_sgt_propogation.setter
    def trustsec_enable_sgt_propogation(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "trustsec_enable_sgt_propogation", value)

    @_builtins.property
    @pulumi.getter(name="trustsecEnforcedSecurityGroupTag")
    def trustsec_enforced_security_group_tag(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        SGT value between 2 and 65519
          - Range: `2`-`65519`
        """
        return pulumi.get(self, "trustsec_enforced_security_group_tag")

    @trustsec_enforced_security_group_tag.setter
    def trustsec_enforced_security_group_tag(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "trustsec_enforced_security_group_tag", value)

    @_builtins.property
    @pulumi.getter(name="trustsecEnforcedSecurityGroupTagVariable")
    def trustsec_enforced_security_group_tag_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "trustsec_enforced_security_group_tag_variable")

    @trustsec_enforced_security_group_tag_variable.setter
    def trustsec_enforced_security_group_tag_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "trustsec_enforced_security_group_tag_variable", value)

    @_builtins.property
    @pulumi.getter(name="trustsecPropogate")
    def trustsec_propogate(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Enables the interface for CTS SGT authorization and forwarding
          - Default value: `true`
        """
        return pulumi.get(self, "trustsec_propogate")

    @trustsec_propogate.setter
    def trustsec_propogate(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "trustsec_propogate", value)

    @_builtins.property
    @pulumi.getter(name="trustsecSecurityGroupTag")
    def trustsec_security_group_tag(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        SGT value between 2 and 65519
          - Range: `2`-`65519`
        """
        return pulumi.get(self, "trustsec_security_group_tag")

    @trustsec_security_group_tag.setter
    def trustsec_security_group_tag(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "trustsec_security_group_tag", value)

    @_builtins.property
    @pulumi.getter(name="trustsecSecurityGroupTagVariable")
    def trustsec_security_group_tag_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "trustsec_security_group_tag_variable")

    @trustsec_security_group_tag_variable.setter
    def trustsec_security_group_tag_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "trustsec_security_group_tag_variable", value)

    @_builtins.property
    @pulumi.getter
    def xconnect(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Extend remote TLOC over a GRE tunnel to a local LAN interface
        """
        return pulumi.get(self, "xconnect")

    @xconnect.setter
    def xconnect(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "xconnect", value)

    @_builtins.property
    @pulumi.getter(name="xconnectVariable")
    def xconnect_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "xconnect_variable")

    @xconnect_variable.setter
    def xconnect_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "xconnect_variable", value)


@pulumi.input_type
class _ServiceLanVpnInterfaceEthernetFeatureState:
    def __init__(__self__, *,
                 acl_ipv4_egress_policy_id: Optional[pulumi.Input[_builtins.str]] = None,
                 acl_ipv4_ingress_policy_id: Optional[pulumi.Input[_builtins.str]] = None,
                 acl_ipv6_egress_policy_id: Optional[pulumi.Input[_builtins.str]] = None,
                 acl_ipv6_ingress_policy_id: Optional[pulumi.Input[_builtins.str]] = None,
                 acl_shaping_rate: Optional[pulumi.Input[_builtins.int]] = None,
                 acl_shaping_rate_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 arp_timeout: Optional[pulumi.Input[_builtins.int]] = None,
                 arp_timeout_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 arps: Optional[pulumi.Input[Sequence[pulumi.Input['ServiceLanVpnInterfaceEthernetFeatureArpArgs']]]] = None,
                 autonegotiate: Optional[pulumi.Input[_builtins.bool]] = None,
                 autonegotiate_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 description: Optional[pulumi.Input[_builtins.str]] = None,
                 duplex: Optional[pulumi.Input[_builtins.str]] = None,
                 duplex_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 enable_dhcpv6: Optional[pulumi.Input[_builtins.bool]] = None,
                 feature_profile_id: Optional[pulumi.Input[_builtins.str]] = None,
                 icmp_redirect_disable: Optional[pulumi.Input[_builtins.bool]] = None,
                 icmp_redirect_disable_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 interface_description: Optional[pulumi.Input[_builtins.str]] = None,
                 interface_description_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 interface_mtu: Optional[pulumi.Input[_builtins.int]] = None,
                 interface_mtu_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 interface_name: Optional[pulumi.Input[_builtins.str]] = None,
                 interface_name_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 ip_directed_broadcast: Optional[pulumi.Input[_builtins.bool]] = None,
                 ip_directed_broadcast_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 ip_mtu: Optional[pulumi.Input[_builtins.int]] = None,
                 ip_mtu_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 ipv4_address: Optional[pulumi.Input[_builtins.str]] = None,
                 ipv4_address_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 ipv4_configuration_type: Optional[pulumi.Input[_builtins.str]] = None,
                 ipv4_dhcp_distance: Optional[pulumi.Input[_builtins.int]] = None,
                 ipv4_dhcp_distance_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 ipv4_dhcp_helper_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 ipv4_dhcp_helpers: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 ipv4_nat: Optional[pulumi.Input[_builtins.bool]] = None,
                 ipv4_nat_loopback: Optional[pulumi.Input[_builtins.str]] = None,
                 ipv4_nat_loopback_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 ipv4_nat_overload: Optional[pulumi.Input[_builtins.bool]] = None,
                 ipv4_nat_overload_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 ipv4_nat_prefix_length: Optional[pulumi.Input[_builtins.int]] = None,
                 ipv4_nat_prefix_length_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 ipv4_nat_range_end: Optional[pulumi.Input[_builtins.str]] = None,
                 ipv4_nat_range_end_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 ipv4_nat_range_start: Optional[pulumi.Input[_builtins.str]] = None,
                 ipv4_nat_range_start_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 ipv4_nat_tcp_timeout: Optional[pulumi.Input[_builtins.int]] = None,
                 ipv4_nat_tcp_timeout_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 ipv4_nat_udp_timeout: Optional[pulumi.Input[_builtins.int]] = None,
                 ipv4_nat_udp_timeout_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 ipv4_secondary_addresses: Optional[pulumi.Input[Sequence[pulumi.Input['ServiceLanVpnInterfaceEthernetFeatureIpv4SecondaryAddressArgs']]]] = None,
                 ipv4_subnet_mask: Optional[pulumi.Input[_builtins.str]] = None,
                 ipv4_subnet_mask_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 ipv4_vrrps: Optional[pulumi.Input[Sequence[pulumi.Input['ServiceLanVpnInterfaceEthernetFeatureIpv4VrrpArgs']]]] = None,
                 ipv6_address: Optional[pulumi.Input[_builtins.str]] = None,
                 ipv6_address_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 ipv6_configuration_type: Optional[pulumi.Input[_builtins.str]] = None,
                 ipv6_dhcp_helpers: Optional[pulumi.Input[Sequence[pulumi.Input['ServiceLanVpnInterfaceEthernetFeatureIpv6DhcpHelperArgs']]]] = None,
                 ipv6_dhcp_secondary_addresses: Optional[pulumi.Input[Sequence[pulumi.Input['ServiceLanVpnInterfaceEthernetFeatureIpv6DhcpSecondaryAddressArgs']]]] = None,
                 ipv6_nat: Optional[pulumi.Input[_builtins.bool]] = None,
                 ipv6_secondary_addresses: Optional[pulumi.Input[Sequence[pulumi.Input['ServiceLanVpnInterfaceEthernetFeatureIpv6SecondaryAddressArgs']]]] = None,
                 ipv6_vrrps: Optional[pulumi.Input[Sequence[pulumi.Input['ServiceLanVpnInterfaceEthernetFeatureIpv6VrrpArgs']]]] = None,
                 load_interval: Optional[pulumi.Input[_builtins.int]] = None,
                 load_interval_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 mac_address: Optional[pulumi.Input[_builtins.str]] = None,
                 mac_address_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 media_type: Optional[pulumi.Input[_builtins.str]] = None,
                 media_type_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 nat64: Optional[pulumi.Input[_builtins.bool]] = None,
                 service_lan_vpn_feature_id: Optional[pulumi.Input[_builtins.str]] = None,
                 shutdown: Optional[pulumi.Input[_builtins.bool]] = None,
                 shutdown_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 speed: Optional[pulumi.Input[_builtins.str]] = None,
                 speed_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 static_nats: Optional[pulumi.Input[Sequence[pulumi.Input['ServiceLanVpnInterfaceEthernetFeatureStaticNatArgs']]]] = None,
                 tcp_mss: Optional[pulumi.Input[_builtins.int]] = None,
                 tcp_mss_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 tracker: Optional[pulumi.Input[_builtins.str]] = None,
                 tracker_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 trustsec_enable_enforced_propogation: Optional[pulumi.Input[_builtins.bool]] = None,
                 trustsec_enable_sgt_propogation: Optional[pulumi.Input[_builtins.bool]] = None,
                 trustsec_enforced_security_group_tag: Optional[pulumi.Input[_builtins.int]] = None,
                 trustsec_enforced_security_group_tag_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 trustsec_propogate: Optional[pulumi.Input[_builtins.bool]] = None,
                 trustsec_security_group_tag: Optional[pulumi.Input[_builtins.int]] = None,
                 trustsec_security_group_tag_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 version: Optional[pulumi.Input[_builtins.int]] = None,
                 xconnect: Optional[pulumi.Input[_builtins.str]] = None,
                 xconnect_variable: Optional[pulumi.Input[_builtins.str]] = None):
        """
        Input properties used for looking up and filtering ServiceLanVpnInterfaceEthernetFeature resources.
        :param pulumi.Input[_builtins.int] acl_shaping_rate: Shaping Rate (Kbps)
                 - Range: `8`-`100000000`
        :param pulumi.Input[_builtins.str] acl_shaping_rate_variable: Variable name
        :param pulumi.Input[_builtins.int] arp_timeout: Timeout value for dynamically learned ARP entries, <0..2678400> seconds
                 - Range: `0`-`2147483`
                 - Default value: `1200`
        :param pulumi.Input[_builtins.str] arp_timeout_variable: Variable name
        :param pulumi.Input[Sequence[pulumi.Input['ServiceLanVpnInterfaceEthernetFeatureArpArgs']]] arps: Configure ARP entries
        :param pulumi.Input[_builtins.bool] autonegotiate: Link autonegotiation
        :param pulumi.Input[_builtins.str] autonegotiate_variable: Variable name
        :param pulumi.Input[_builtins.str] description: The description of the Feature
        :param pulumi.Input[_builtins.str] duplex: Duplex mode
                 - Choices: `full`, `half`, `auto`
        :param pulumi.Input[_builtins.str] duplex_variable: Variable name
        :param pulumi.Input[_builtins.bool] enable_dhcpv6: Enable DHCPv6, Attribute conditional on `ipv6_configuration_type` being equal to `dynamic`
        :param pulumi.Input[_builtins.str] feature_profile_id: Feature Profile ID
        :param pulumi.Input[_builtins.bool] icmp_redirect_disable: ICMP/ICMPv6 Redirect Disable
                 - Default value: `true`
        :param pulumi.Input[_builtins.str] icmp_redirect_disable_variable: Variable name
        :param pulumi.Input[_builtins.str] interface_description_variable: Variable name
        :param pulumi.Input[_builtins.int] interface_mtu: Interface MTU
                 - Range: `1500`-`9216`
                 - Default value: `1500`
        :param pulumi.Input[_builtins.str] interface_mtu_variable: Variable name
        :param pulumi.Input[_builtins.str] interface_name_variable: Variable name
        :param pulumi.Input[_builtins.bool] ip_directed_broadcast: IP Directed-Broadcast
                 - Default value: `false`
        :param pulumi.Input[_builtins.str] ip_directed_broadcast_variable: Variable name
        :param pulumi.Input[_builtins.int] ip_mtu: IP MTU for GigabitEthernet main <576..Interface MTU>, GigabitEthernet subinterface <576..9216>, Other Interfaces <576..2000> in bytes
                 - Range: `576`-`9216`
                 - Default value: `1500`
        :param pulumi.Input[_builtins.str] ip_mtu_variable: Variable name
        :param pulumi.Input[_builtins.str] ipv4_address: IP Address, Attribute conditional on `ipv4_configuration_type` being equal to `static`
        :param pulumi.Input[_builtins.str] ipv4_address_variable: Variable name, Attribute conditional on `ipv4_configuration_type` being equal to `static`
        :param pulumi.Input[_builtins.str] ipv4_configuration_type: IPv4 Configuration Type
                 - Choices: `dynamic`, `static`
                 - Default value: `dynamic`
        :param pulumi.Input[_builtins.int] ipv4_dhcp_distance: DHCP Distance, Attribute conditional on `ipv4_configuration_type` being equal to `dynamic`
                 - Range: `1`-`65536`
                 - Default value: `1`
        :param pulumi.Input[_builtins.str] ipv4_dhcp_distance_variable: Variable name, Attribute conditional on `ipv4_configuration_type` being equal to `dynamic`
        :param pulumi.Input[_builtins.str] ipv4_dhcp_helper_variable: Variable name
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] ipv4_dhcp_helpers: List of DHCP IPv4 helper addresses (min 1, max 8)
        :param pulumi.Input[_builtins.bool] ipv4_nat: enable Network Address Translation on this interface
                 - Default value: `false`
        :param pulumi.Input[_builtins.str] ipv4_nat_loopback: NAT Inside Source Loopback Interface
        :param pulumi.Input[_builtins.str] ipv4_nat_loopback_variable: Variable name
        :param pulumi.Input[_builtins.bool] ipv4_nat_overload: NAT Overload
                 - Default value: `true`
        :param pulumi.Input[_builtins.str] ipv4_nat_overload_variable: Variable name
        :param pulumi.Input[_builtins.int] ipv4_nat_prefix_length: NAT Pool Prefix Length
                 - Range: `1`-`32`
        :param pulumi.Input[_builtins.str] ipv4_nat_prefix_length_variable: Variable name
        :param pulumi.Input[_builtins.str] ipv4_nat_range_end: NAT Pool Range End
        :param pulumi.Input[_builtins.str] ipv4_nat_range_end_variable: Variable name
        :param pulumi.Input[_builtins.str] ipv4_nat_range_start: NAT Pool Range Start
        :param pulumi.Input[_builtins.str] ipv4_nat_range_start_variable: Variable name
        :param pulumi.Input[_builtins.int] ipv4_nat_tcp_timeout: Set NAT TCP session timeout, in minutes
                 - Range: `1`-`8947`
                 - Default value: `60`
        :param pulumi.Input[_builtins.str] ipv4_nat_tcp_timeout_variable: Variable name
        :param pulumi.Input[_builtins.int] ipv4_nat_udp_timeout: Set NAT UDP session timeout, in minutes
                 - Range: `1`-`8947`
                 - Default value: `1`
        :param pulumi.Input[_builtins.str] ipv4_nat_udp_timeout_variable: Variable name
        :param pulumi.Input[Sequence[pulumi.Input['ServiceLanVpnInterfaceEthernetFeatureIpv4SecondaryAddressArgs']]] ipv4_secondary_addresses: Secondary IpV4 Addresses, Attribute conditional on `ipv4_configuration_type` being equal to `static`
        :param pulumi.Input[_builtins.str] ipv4_subnet_mask: Subnet Mask, Attribute conditional on `ipv4_configuration_type` being equal to `static`
                 - Choices: `255.255.255.255`, `255.255.255.254`, `255.255.255.252`, `255.255.255.248`, `255.255.255.240`, `255.255.255.224`, `255.255.255.192`, `255.255.255.128`, `255.255.255.0`, `255.255.254.0`, `255.255.252.0`, `255.255.248.0`, `255.255.240.0`, `255.255.224.0`, `255.255.192.0`, `255.255.128.0`, `255.255.0.0`, `255.254.0.0`, `255.252.0.0`, `255.240.0.0`, `255.224.0.0`, `255.192.0.0`, `255.128.0.0`, `255.0.0.0`, `254.0.0.0`, `252.0.0.0`, `248.0.0.0`, `240.0.0.0`, `224.0.0.0`, `192.0.0.0`, `128.0.0.0`, `0.0.0.0`
        :param pulumi.Input[_builtins.str] ipv4_subnet_mask_variable: Variable name, Attribute conditional on `ipv4_configuration_type` being equal to `static`
        :param pulumi.Input[Sequence[pulumi.Input['ServiceLanVpnInterfaceEthernetFeatureIpv4VrrpArgs']]] ipv4_vrrps: Enable VRRP
        :param pulumi.Input[_builtins.str] ipv6_address: IPv6 Address Secondary, Attribute conditional on `ipv6_configuration_type` being equal to `static`
        :param pulumi.Input[_builtins.str] ipv6_address_variable: Variable name, Attribute conditional on `ipv6_configuration_type` being equal to `static`
        :param pulumi.Input[_builtins.str] ipv6_configuration_type: IPv6 Configuration Type
                 - Choices: `dynamic`, `static`, `none`
                 - Default value: `none`
        :param pulumi.Input[Sequence[pulumi.Input['ServiceLanVpnInterfaceEthernetFeatureIpv6DhcpHelperArgs']]] ipv6_dhcp_helpers: DHCPv6 Helper, Attribute conditional on `ipv6_configuration_type` being equal to `static`
        :param pulumi.Input[Sequence[pulumi.Input['ServiceLanVpnInterfaceEthernetFeatureIpv6DhcpSecondaryAddressArgs']]] ipv6_dhcp_secondary_addresses: secondary IPv6 addresses, Attribute conditional on `ipv6_configuration_type` being equal to `dynamic`
        :param pulumi.Input[_builtins.bool] ipv6_nat: enable Network Address Translation ipv6 on this interface
                 - Default value: `false`
        :param pulumi.Input[Sequence[pulumi.Input['ServiceLanVpnInterfaceEthernetFeatureIpv6SecondaryAddressArgs']]] ipv6_secondary_addresses: Static secondary IPv6 addresses, Attribute conditional on `ipv6_configuration_type` being equal to `static`
        :param pulumi.Input[Sequence[pulumi.Input['ServiceLanVpnInterfaceEthernetFeatureIpv6VrrpArgs']]] ipv6_vrrps: Enable VRRP Ipv6
        :param pulumi.Input[_builtins.int] load_interval: Interval for interface load calculation
                 - Range: `30`-`600`
                 - Default value: `30`
        :param pulumi.Input[_builtins.str] load_interval_variable: Variable name
        :param pulumi.Input[_builtins.str] mac_address: MAC Address
        :param pulumi.Input[_builtins.str] mac_address_variable: Variable name
        :param pulumi.Input[_builtins.str] media_type: Media type
                 - Choices: `auto-select`, `rj45`, `sfp`
        :param pulumi.Input[_builtins.str] media_type_variable: Variable name
        :param pulumi.Input[_builtins.str] name: The name of the Feature
        :param pulumi.Input[_builtins.bool] nat64: NAT64 on this interface
                 - Default value: `false`
        :param pulumi.Input[_builtins.str] service_lan_vpn_feature_id: Service LAN VPN Feature ID
        :param pulumi.Input[_builtins.bool] shutdown: - Default value: `true`
        :param pulumi.Input[_builtins.str] shutdown_variable: Variable name
        :param pulumi.Input[_builtins.str] speed: Set interface speed
                 - Choices: `10`, `100`, `1000`, `2500`, `10000`
        :param pulumi.Input[_builtins.str] speed_variable: Variable name
        :param pulumi.Input[Sequence[pulumi.Input['ServiceLanVpnInterfaceEthernetFeatureStaticNatArgs']]] static_nats: static NAT
        :param pulumi.Input[_builtins.int] tcp_mss: TCP MSS on SYN packets, in bytes
                 - Range: `500`-`1460`
        :param pulumi.Input[_builtins.str] tcp_mss_variable: Variable name
        :param pulumi.Input[_builtins.str] tracker: Enable tracker for this interface
        :param pulumi.Input[_builtins.str] tracker_variable: Variable name
        :param pulumi.Input[_builtins.bool] trustsec_enable_enforced_propogation: Enable/Disable SGT Enforcement on an interface
        :param pulumi.Input[_builtins.bool] trustsec_enable_sgt_propogation: Indicates that the interface is trustworthy for CTS
                 - Default value: `false`
        :param pulumi.Input[_builtins.int] trustsec_enforced_security_group_tag: SGT value between 2 and 65519
                 - Range: `2`-`65519`
        :param pulumi.Input[_builtins.str] trustsec_enforced_security_group_tag_variable: Variable name
        :param pulumi.Input[_builtins.bool] trustsec_propogate: Enables the interface for CTS SGT authorization and forwarding
                 - Default value: `true`
        :param pulumi.Input[_builtins.int] trustsec_security_group_tag: SGT value between 2 and 65519
                 - Range: `2`-`65519`
        :param pulumi.Input[_builtins.str] trustsec_security_group_tag_variable: Variable name
        :param pulumi.Input[_builtins.int] version: The version of the Feature
        :param pulumi.Input[_builtins.str] xconnect: Extend remote TLOC over a GRE tunnel to a local LAN interface
        :param pulumi.Input[_builtins.str] xconnect_variable: Variable name
        """
        if acl_ipv4_egress_policy_id is not None:
            pulumi.set(__self__, "acl_ipv4_egress_policy_id", acl_ipv4_egress_policy_id)
        if acl_ipv4_ingress_policy_id is not None:
            pulumi.set(__self__, "acl_ipv4_ingress_policy_id", acl_ipv4_ingress_policy_id)
        if acl_ipv6_egress_policy_id is not None:
            pulumi.set(__self__, "acl_ipv6_egress_policy_id", acl_ipv6_egress_policy_id)
        if acl_ipv6_ingress_policy_id is not None:
            pulumi.set(__self__, "acl_ipv6_ingress_policy_id", acl_ipv6_ingress_policy_id)
        if acl_shaping_rate is not None:
            pulumi.set(__self__, "acl_shaping_rate", acl_shaping_rate)
        if acl_shaping_rate_variable is not None:
            pulumi.set(__self__, "acl_shaping_rate_variable", acl_shaping_rate_variable)
        if arp_timeout is not None:
            pulumi.set(__self__, "arp_timeout", arp_timeout)
        if arp_timeout_variable is not None:
            pulumi.set(__self__, "arp_timeout_variable", arp_timeout_variable)
        if arps is not None:
            pulumi.set(__self__, "arps", arps)
        if autonegotiate is not None:
            pulumi.set(__self__, "autonegotiate", autonegotiate)
        if autonegotiate_variable is not None:
            pulumi.set(__self__, "autonegotiate_variable", autonegotiate_variable)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if duplex is not None:
            pulumi.set(__self__, "duplex", duplex)
        if duplex_variable is not None:
            pulumi.set(__self__, "duplex_variable", duplex_variable)
        if enable_dhcpv6 is not None:
            pulumi.set(__self__, "enable_dhcpv6", enable_dhcpv6)
        if feature_profile_id is not None:
            pulumi.set(__self__, "feature_profile_id", feature_profile_id)
        if icmp_redirect_disable is not None:
            pulumi.set(__self__, "icmp_redirect_disable", icmp_redirect_disable)
        if icmp_redirect_disable_variable is not None:
            pulumi.set(__self__, "icmp_redirect_disable_variable", icmp_redirect_disable_variable)
        if interface_description is not None:
            pulumi.set(__self__, "interface_description", interface_description)
        if interface_description_variable is not None:
            pulumi.set(__self__, "interface_description_variable", interface_description_variable)
        if interface_mtu is not None:
            pulumi.set(__self__, "interface_mtu", interface_mtu)
        if interface_mtu_variable is not None:
            pulumi.set(__self__, "interface_mtu_variable", interface_mtu_variable)
        if interface_name is not None:
            pulumi.set(__self__, "interface_name", interface_name)
        if interface_name_variable is not None:
            pulumi.set(__self__, "interface_name_variable", interface_name_variable)
        if ip_directed_broadcast is not None:
            pulumi.set(__self__, "ip_directed_broadcast", ip_directed_broadcast)
        if ip_directed_broadcast_variable is not None:
            pulumi.set(__self__, "ip_directed_broadcast_variable", ip_directed_broadcast_variable)
        if ip_mtu is not None:
            pulumi.set(__self__, "ip_mtu", ip_mtu)
        if ip_mtu_variable is not None:
            pulumi.set(__self__, "ip_mtu_variable", ip_mtu_variable)
        if ipv4_address is not None:
            pulumi.set(__self__, "ipv4_address", ipv4_address)
        if ipv4_address_variable is not None:
            pulumi.set(__self__, "ipv4_address_variable", ipv4_address_variable)
        if ipv4_configuration_type is not None:
            pulumi.set(__self__, "ipv4_configuration_type", ipv4_configuration_type)
        if ipv4_dhcp_distance is not None:
            pulumi.set(__self__, "ipv4_dhcp_distance", ipv4_dhcp_distance)
        if ipv4_dhcp_distance_variable is not None:
            pulumi.set(__self__, "ipv4_dhcp_distance_variable", ipv4_dhcp_distance_variable)
        if ipv4_dhcp_helper_variable is not None:
            pulumi.set(__self__, "ipv4_dhcp_helper_variable", ipv4_dhcp_helper_variable)
        if ipv4_dhcp_helpers is not None:
            pulumi.set(__self__, "ipv4_dhcp_helpers", ipv4_dhcp_helpers)
        if ipv4_nat is not None:
            pulumi.set(__self__, "ipv4_nat", ipv4_nat)
        if ipv4_nat_loopback is not None:
            pulumi.set(__self__, "ipv4_nat_loopback", ipv4_nat_loopback)
        if ipv4_nat_loopback_variable is not None:
            pulumi.set(__self__, "ipv4_nat_loopback_variable", ipv4_nat_loopback_variable)
        if ipv4_nat_overload is not None:
            pulumi.set(__self__, "ipv4_nat_overload", ipv4_nat_overload)
        if ipv4_nat_overload_variable is not None:
            pulumi.set(__self__, "ipv4_nat_overload_variable", ipv4_nat_overload_variable)
        if ipv4_nat_prefix_length is not None:
            pulumi.set(__self__, "ipv4_nat_prefix_length", ipv4_nat_prefix_length)
        if ipv4_nat_prefix_length_variable is not None:
            pulumi.set(__self__, "ipv4_nat_prefix_length_variable", ipv4_nat_prefix_length_variable)
        if ipv4_nat_range_end is not None:
            pulumi.set(__self__, "ipv4_nat_range_end", ipv4_nat_range_end)
        if ipv4_nat_range_end_variable is not None:
            pulumi.set(__self__, "ipv4_nat_range_end_variable", ipv4_nat_range_end_variable)
        if ipv4_nat_range_start is not None:
            pulumi.set(__self__, "ipv4_nat_range_start", ipv4_nat_range_start)
        if ipv4_nat_range_start_variable is not None:
            pulumi.set(__self__, "ipv4_nat_range_start_variable", ipv4_nat_range_start_variable)
        if ipv4_nat_tcp_timeout is not None:
            pulumi.set(__self__, "ipv4_nat_tcp_timeout", ipv4_nat_tcp_timeout)
        if ipv4_nat_tcp_timeout_variable is not None:
            pulumi.set(__self__, "ipv4_nat_tcp_timeout_variable", ipv4_nat_tcp_timeout_variable)
        if ipv4_nat_udp_timeout is not None:
            pulumi.set(__self__, "ipv4_nat_udp_timeout", ipv4_nat_udp_timeout)
        if ipv4_nat_udp_timeout_variable is not None:
            pulumi.set(__self__, "ipv4_nat_udp_timeout_variable", ipv4_nat_udp_timeout_variable)
        if ipv4_secondary_addresses is not None:
            pulumi.set(__self__, "ipv4_secondary_addresses", ipv4_secondary_addresses)
        if ipv4_subnet_mask is not None:
            pulumi.set(__self__, "ipv4_subnet_mask", ipv4_subnet_mask)
        if ipv4_subnet_mask_variable is not None:
            pulumi.set(__self__, "ipv4_subnet_mask_variable", ipv4_subnet_mask_variable)
        if ipv4_vrrps is not None:
            pulumi.set(__self__, "ipv4_vrrps", ipv4_vrrps)
        if ipv6_address is not None:
            pulumi.set(__self__, "ipv6_address", ipv6_address)
        if ipv6_address_variable is not None:
            pulumi.set(__self__, "ipv6_address_variable", ipv6_address_variable)
        if ipv6_configuration_type is not None:
            pulumi.set(__self__, "ipv6_configuration_type", ipv6_configuration_type)
        if ipv6_dhcp_helpers is not None:
            pulumi.set(__self__, "ipv6_dhcp_helpers", ipv6_dhcp_helpers)
        if ipv6_dhcp_secondary_addresses is not None:
            pulumi.set(__self__, "ipv6_dhcp_secondary_addresses", ipv6_dhcp_secondary_addresses)
        if ipv6_nat is not None:
            pulumi.set(__self__, "ipv6_nat", ipv6_nat)
        if ipv6_secondary_addresses is not None:
            pulumi.set(__self__, "ipv6_secondary_addresses", ipv6_secondary_addresses)
        if ipv6_vrrps is not None:
            pulumi.set(__self__, "ipv6_vrrps", ipv6_vrrps)
        if load_interval is not None:
            pulumi.set(__self__, "load_interval", load_interval)
        if load_interval_variable is not None:
            pulumi.set(__self__, "load_interval_variable", load_interval_variable)
        if mac_address is not None:
            pulumi.set(__self__, "mac_address", mac_address)
        if mac_address_variable is not None:
            pulumi.set(__self__, "mac_address_variable", mac_address_variable)
        if media_type is not None:
            pulumi.set(__self__, "media_type", media_type)
        if media_type_variable is not None:
            pulumi.set(__self__, "media_type_variable", media_type_variable)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if nat64 is not None:
            pulumi.set(__self__, "nat64", nat64)
        if service_lan_vpn_feature_id is not None:
            pulumi.set(__self__, "service_lan_vpn_feature_id", service_lan_vpn_feature_id)
        if shutdown is not None:
            pulumi.set(__self__, "shutdown", shutdown)
        if shutdown_variable is not None:
            pulumi.set(__self__, "shutdown_variable", shutdown_variable)
        if speed is not None:
            pulumi.set(__self__, "speed", speed)
        if speed_variable is not None:
            pulumi.set(__self__, "speed_variable", speed_variable)
        if static_nats is not None:
            pulumi.set(__self__, "static_nats", static_nats)
        if tcp_mss is not None:
            pulumi.set(__self__, "tcp_mss", tcp_mss)
        if tcp_mss_variable is not None:
            pulumi.set(__self__, "tcp_mss_variable", tcp_mss_variable)
        if tracker is not None:
            pulumi.set(__self__, "tracker", tracker)
        if tracker_variable is not None:
            pulumi.set(__self__, "tracker_variable", tracker_variable)
        if trustsec_enable_enforced_propogation is not None:
            pulumi.set(__self__, "trustsec_enable_enforced_propogation", trustsec_enable_enforced_propogation)
        if trustsec_enable_sgt_propogation is not None:
            pulumi.set(__self__, "trustsec_enable_sgt_propogation", trustsec_enable_sgt_propogation)
        if trustsec_enforced_security_group_tag is not None:
            pulumi.set(__self__, "trustsec_enforced_security_group_tag", trustsec_enforced_security_group_tag)
        if trustsec_enforced_security_group_tag_variable is not None:
            pulumi.set(__self__, "trustsec_enforced_security_group_tag_variable", trustsec_enforced_security_group_tag_variable)
        if trustsec_propogate is not None:
            pulumi.set(__self__, "trustsec_propogate", trustsec_propogate)
        if trustsec_security_group_tag is not None:
            pulumi.set(__self__, "trustsec_security_group_tag", trustsec_security_group_tag)
        if trustsec_security_group_tag_variable is not None:
            pulumi.set(__self__, "trustsec_security_group_tag_variable", trustsec_security_group_tag_variable)
        if version is not None:
            pulumi.set(__self__, "version", version)
        if xconnect is not None:
            pulumi.set(__self__, "xconnect", xconnect)
        if xconnect_variable is not None:
            pulumi.set(__self__, "xconnect_variable", xconnect_variable)

    @_builtins.property
    @pulumi.getter(name="aclIpv4EgressPolicyId")
    def acl_ipv4_egress_policy_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "acl_ipv4_egress_policy_id")

    @acl_ipv4_egress_policy_id.setter
    def acl_ipv4_egress_policy_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "acl_ipv4_egress_policy_id", value)

    @_builtins.property
    @pulumi.getter(name="aclIpv4IngressPolicyId")
    def acl_ipv4_ingress_policy_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "acl_ipv4_ingress_policy_id")

    @acl_ipv4_ingress_policy_id.setter
    def acl_ipv4_ingress_policy_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "acl_ipv4_ingress_policy_id", value)

    @_builtins.property
    @pulumi.getter(name="aclIpv6EgressPolicyId")
    def acl_ipv6_egress_policy_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "acl_ipv6_egress_policy_id")

    @acl_ipv6_egress_policy_id.setter
    def acl_ipv6_egress_policy_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "acl_ipv6_egress_policy_id", value)

    @_builtins.property
    @pulumi.getter(name="aclIpv6IngressPolicyId")
    def acl_ipv6_ingress_policy_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "acl_ipv6_ingress_policy_id")

    @acl_ipv6_ingress_policy_id.setter
    def acl_ipv6_ingress_policy_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "acl_ipv6_ingress_policy_id", value)

    @_builtins.property
    @pulumi.getter(name="aclShapingRate")
    def acl_shaping_rate(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        Shaping Rate (Kbps)
          - Range: `8`-`100000000`
        """
        return pulumi.get(self, "acl_shaping_rate")

    @acl_shaping_rate.setter
    def acl_shaping_rate(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "acl_shaping_rate", value)

    @_builtins.property
    @pulumi.getter(name="aclShapingRateVariable")
    def acl_shaping_rate_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "acl_shaping_rate_variable")

    @acl_shaping_rate_variable.setter
    def acl_shaping_rate_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "acl_shaping_rate_variable", value)

    @_builtins.property
    @pulumi.getter(name="arpTimeout")
    def arp_timeout(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        Timeout value for dynamically learned ARP entries, <0..2678400> seconds
          - Range: `0`-`2147483`
          - Default value: `1200`
        """
        return pulumi.get(self, "arp_timeout")

    @arp_timeout.setter
    def arp_timeout(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "arp_timeout", value)

    @_builtins.property
    @pulumi.getter(name="arpTimeoutVariable")
    def arp_timeout_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "arp_timeout_variable")

    @arp_timeout_variable.setter
    def arp_timeout_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "arp_timeout_variable", value)

    @_builtins.property
    @pulumi.getter
    def arps(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ServiceLanVpnInterfaceEthernetFeatureArpArgs']]]]:
        """
        Configure ARP entries
        """
        return pulumi.get(self, "arps")

    @arps.setter
    def arps(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ServiceLanVpnInterfaceEthernetFeatureArpArgs']]]]):
        pulumi.set(self, "arps", value)

    @_builtins.property
    @pulumi.getter
    def autonegotiate(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Link autonegotiation
        """
        return pulumi.get(self, "autonegotiate")

    @autonegotiate.setter
    def autonegotiate(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "autonegotiate", value)

    @_builtins.property
    @pulumi.getter(name="autonegotiateVariable")
    def autonegotiate_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "autonegotiate_variable")

    @autonegotiate_variable.setter
    def autonegotiate_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "autonegotiate_variable", value)

    @_builtins.property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The description of the Feature
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "description", value)

    @_builtins.property
    @pulumi.getter
    def duplex(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Duplex mode
          - Choices: `full`, `half`, `auto`
        """
        return pulumi.get(self, "duplex")

    @duplex.setter
    def duplex(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "duplex", value)

    @_builtins.property
    @pulumi.getter(name="duplexVariable")
    def duplex_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "duplex_variable")

    @duplex_variable.setter
    def duplex_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "duplex_variable", value)

    @_builtins.property
    @pulumi.getter(name="enableDhcpv6")
    def enable_dhcpv6(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Enable DHCPv6, Attribute conditional on `ipv6_configuration_type` being equal to `dynamic`
        """
        return pulumi.get(self, "enable_dhcpv6")

    @enable_dhcpv6.setter
    def enable_dhcpv6(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "enable_dhcpv6", value)

    @_builtins.property
    @pulumi.getter(name="featureProfileId")
    def feature_profile_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Feature Profile ID
        """
        return pulumi.get(self, "feature_profile_id")

    @feature_profile_id.setter
    def feature_profile_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "feature_profile_id", value)

    @_builtins.property
    @pulumi.getter(name="icmpRedirectDisable")
    def icmp_redirect_disable(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        ICMP/ICMPv6 Redirect Disable
          - Default value: `true`
        """
        return pulumi.get(self, "icmp_redirect_disable")

    @icmp_redirect_disable.setter
    def icmp_redirect_disable(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "icmp_redirect_disable", value)

    @_builtins.property
    @pulumi.getter(name="icmpRedirectDisableVariable")
    def icmp_redirect_disable_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "icmp_redirect_disable_variable")

    @icmp_redirect_disable_variable.setter
    def icmp_redirect_disable_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "icmp_redirect_disable_variable", value)

    @_builtins.property
    @pulumi.getter(name="interfaceDescription")
    def interface_description(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "interface_description")

    @interface_description.setter
    def interface_description(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "interface_description", value)

    @_builtins.property
    @pulumi.getter(name="interfaceDescriptionVariable")
    def interface_description_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "interface_description_variable")

    @interface_description_variable.setter
    def interface_description_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "interface_description_variable", value)

    @_builtins.property
    @pulumi.getter(name="interfaceMtu")
    def interface_mtu(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        Interface MTU
          - Range: `1500`-`9216`
          - Default value: `1500`
        """
        return pulumi.get(self, "interface_mtu")

    @interface_mtu.setter
    def interface_mtu(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "interface_mtu", value)

    @_builtins.property
    @pulumi.getter(name="interfaceMtuVariable")
    def interface_mtu_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "interface_mtu_variable")

    @interface_mtu_variable.setter
    def interface_mtu_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "interface_mtu_variable", value)

    @_builtins.property
    @pulumi.getter(name="interfaceName")
    def interface_name(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "interface_name")

    @interface_name.setter
    def interface_name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "interface_name", value)

    @_builtins.property
    @pulumi.getter(name="interfaceNameVariable")
    def interface_name_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "interface_name_variable")

    @interface_name_variable.setter
    def interface_name_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "interface_name_variable", value)

    @_builtins.property
    @pulumi.getter(name="ipDirectedBroadcast")
    def ip_directed_broadcast(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        IP Directed-Broadcast
          - Default value: `false`
        """
        return pulumi.get(self, "ip_directed_broadcast")

    @ip_directed_broadcast.setter
    def ip_directed_broadcast(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "ip_directed_broadcast", value)

    @_builtins.property
    @pulumi.getter(name="ipDirectedBroadcastVariable")
    def ip_directed_broadcast_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "ip_directed_broadcast_variable")

    @ip_directed_broadcast_variable.setter
    def ip_directed_broadcast_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "ip_directed_broadcast_variable", value)

    @_builtins.property
    @pulumi.getter(name="ipMtu")
    def ip_mtu(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        IP MTU for GigabitEthernet main <576..Interface MTU>, GigabitEthernet subinterface <576..9216>, Other Interfaces <576..2000> in bytes
          - Range: `576`-`9216`
          - Default value: `1500`
        """
        return pulumi.get(self, "ip_mtu")

    @ip_mtu.setter
    def ip_mtu(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "ip_mtu", value)

    @_builtins.property
    @pulumi.getter(name="ipMtuVariable")
    def ip_mtu_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "ip_mtu_variable")

    @ip_mtu_variable.setter
    def ip_mtu_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "ip_mtu_variable", value)

    @_builtins.property
    @pulumi.getter(name="ipv4Address")
    def ipv4_address(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        IP Address, Attribute conditional on `ipv4_configuration_type` being equal to `static`
        """
        return pulumi.get(self, "ipv4_address")

    @ipv4_address.setter
    def ipv4_address(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "ipv4_address", value)

    @_builtins.property
    @pulumi.getter(name="ipv4AddressVariable")
    def ipv4_address_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name, Attribute conditional on `ipv4_configuration_type` being equal to `static`
        """
        return pulumi.get(self, "ipv4_address_variable")

    @ipv4_address_variable.setter
    def ipv4_address_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "ipv4_address_variable", value)

    @_builtins.property
    @pulumi.getter(name="ipv4ConfigurationType")
    def ipv4_configuration_type(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        IPv4 Configuration Type
          - Choices: `dynamic`, `static`
          - Default value: `dynamic`
        """
        return pulumi.get(self, "ipv4_configuration_type")

    @ipv4_configuration_type.setter
    def ipv4_configuration_type(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "ipv4_configuration_type", value)

    @_builtins.property
    @pulumi.getter(name="ipv4DhcpDistance")
    def ipv4_dhcp_distance(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        DHCP Distance, Attribute conditional on `ipv4_configuration_type` being equal to `dynamic`
          - Range: `1`-`65536`
          - Default value: `1`
        """
        return pulumi.get(self, "ipv4_dhcp_distance")

    @ipv4_dhcp_distance.setter
    def ipv4_dhcp_distance(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "ipv4_dhcp_distance", value)

    @_builtins.property
    @pulumi.getter(name="ipv4DhcpDistanceVariable")
    def ipv4_dhcp_distance_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name, Attribute conditional on `ipv4_configuration_type` being equal to `dynamic`
        """
        return pulumi.get(self, "ipv4_dhcp_distance_variable")

    @ipv4_dhcp_distance_variable.setter
    def ipv4_dhcp_distance_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "ipv4_dhcp_distance_variable", value)

    @_builtins.property
    @pulumi.getter(name="ipv4DhcpHelperVariable")
    def ipv4_dhcp_helper_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "ipv4_dhcp_helper_variable")

    @ipv4_dhcp_helper_variable.setter
    def ipv4_dhcp_helper_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "ipv4_dhcp_helper_variable", value)

    @_builtins.property
    @pulumi.getter(name="ipv4DhcpHelpers")
    def ipv4_dhcp_helpers(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]:
        """
        List of DHCP IPv4 helper addresses (min 1, max 8)
        """
        return pulumi.get(self, "ipv4_dhcp_helpers")

    @ipv4_dhcp_helpers.setter
    def ipv4_dhcp_helpers(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "ipv4_dhcp_helpers", value)

    @_builtins.property
    @pulumi.getter(name="ipv4Nat")
    def ipv4_nat(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        enable Network Address Translation on this interface
          - Default value: `false`
        """
        return pulumi.get(self, "ipv4_nat")

    @ipv4_nat.setter
    def ipv4_nat(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "ipv4_nat", value)

    @_builtins.property
    @pulumi.getter(name="ipv4NatLoopback")
    def ipv4_nat_loopback(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        NAT Inside Source Loopback Interface
        """
        return pulumi.get(self, "ipv4_nat_loopback")

    @ipv4_nat_loopback.setter
    def ipv4_nat_loopback(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "ipv4_nat_loopback", value)

    @_builtins.property
    @pulumi.getter(name="ipv4NatLoopbackVariable")
    def ipv4_nat_loopback_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "ipv4_nat_loopback_variable")

    @ipv4_nat_loopback_variable.setter
    def ipv4_nat_loopback_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "ipv4_nat_loopback_variable", value)

    @_builtins.property
    @pulumi.getter(name="ipv4NatOverload")
    def ipv4_nat_overload(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        NAT Overload
          - Default value: `true`
        """
        return pulumi.get(self, "ipv4_nat_overload")

    @ipv4_nat_overload.setter
    def ipv4_nat_overload(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "ipv4_nat_overload", value)

    @_builtins.property
    @pulumi.getter(name="ipv4NatOverloadVariable")
    def ipv4_nat_overload_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "ipv4_nat_overload_variable")

    @ipv4_nat_overload_variable.setter
    def ipv4_nat_overload_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "ipv4_nat_overload_variable", value)

    @_builtins.property
    @pulumi.getter(name="ipv4NatPrefixLength")
    def ipv4_nat_prefix_length(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        NAT Pool Prefix Length
          - Range: `1`-`32`
        """
        return pulumi.get(self, "ipv4_nat_prefix_length")

    @ipv4_nat_prefix_length.setter
    def ipv4_nat_prefix_length(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "ipv4_nat_prefix_length", value)

    @_builtins.property
    @pulumi.getter(name="ipv4NatPrefixLengthVariable")
    def ipv4_nat_prefix_length_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "ipv4_nat_prefix_length_variable")

    @ipv4_nat_prefix_length_variable.setter
    def ipv4_nat_prefix_length_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "ipv4_nat_prefix_length_variable", value)

    @_builtins.property
    @pulumi.getter(name="ipv4NatRangeEnd")
    def ipv4_nat_range_end(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        NAT Pool Range End
        """
        return pulumi.get(self, "ipv4_nat_range_end")

    @ipv4_nat_range_end.setter
    def ipv4_nat_range_end(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "ipv4_nat_range_end", value)

    @_builtins.property
    @pulumi.getter(name="ipv4NatRangeEndVariable")
    def ipv4_nat_range_end_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "ipv4_nat_range_end_variable")

    @ipv4_nat_range_end_variable.setter
    def ipv4_nat_range_end_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "ipv4_nat_range_end_variable", value)

    @_builtins.property
    @pulumi.getter(name="ipv4NatRangeStart")
    def ipv4_nat_range_start(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        NAT Pool Range Start
        """
        return pulumi.get(self, "ipv4_nat_range_start")

    @ipv4_nat_range_start.setter
    def ipv4_nat_range_start(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "ipv4_nat_range_start", value)

    @_builtins.property
    @pulumi.getter(name="ipv4NatRangeStartVariable")
    def ipv4_nat_range_start_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "ipv4_nat_range_start_variable")

    @ipv4_nat_range_start_variable.setter
    def ipv4_nat_range_start_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "ipv4_nat_range_start_variable", value)

    @_builtins.property
    @pulumi.getter(name="ipv4NatTcpTimeout")
    def ipv4_nat_tcp_timeout(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        Set NAT TCP session timeout, in minutes
          - Range: `1`-`8947`
          - Default value: `60`
        """
        return pulumi.get(self, "ipv4_nat_tcp_timeout")

    @ipv4_nat_tcp_timeout.setter
    def ipv4_nat_tcp_timeout(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "ipv4_nat_tcp_timeout", value)

    @_builtins.property
    @pulumi.getter(name="ipv4NatTcpTimeoutVariable")
    def ipv4_nat_tcp_timeout_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "ipv4_nat_tcp_timeout_variable")

    @ipv4_nat_tcp_timeout_variable.setter
    def ipv4_nat_tcp_timeout_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "ipv4_nat_tcp_timeout_variable", value)

    @_builtins.property
    @pulumi.getter(name="ipv4NatUdpTimeout")
    def ipv4_nat_udp_timeout(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        Set NAT UDP session timeout, in minutes
          - Range: `1`-`8947`
          - Default value: `1`
        """
        return pulumi.get(self, "ipv4_nat_udp_timeout")

    @ipv4_nat_udp_timeout.setter
    def ipv4_nat_udp_timeout(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "ipv4_nat_udp_timeout", value)

    @_builtins.property
    @pulumi.getter(name="ipv4NatUdpTimeoutVariable")
    def ipv4_nat_udp_timeout_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "ipv4_nat_udp_timeout_variable")

    @ipv4_nat_udp_timeout_variable.setter
    def ipv4_nat_udp_timeout_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "ipv4_nat_udp_timeout_variable", value)

    @_builtins.property
    @pulumi.getter(name="ipv4SecondaryAddresses")
    def ipv4_secondary_addresses(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ServiceLanVpnInterfaceEthernetFeatureIpv4SecondaryAddressArgs']]]]:
        """
        Secondary IpV4 Addresses, Attribute conditional on `ipv4_configuration_type` being equal to `static`
        """
        return pulumi.get(self, "ipv4_secondary_addresses")

    @ipv4_secondary_addresses.setter
    def ipv4_secondary_addresses(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ServiceLanVpnInterfaceEthernetFeatureIpv4SecondaryAddressArgs']]]]):
        pulumi.set(self, "ipv4_secondary_addresses", value)

    @_builtins.property
    @pulumi.getter(name="ipv4SubnetMask")
    def ipv4_subnet_mask(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Subnet Mask, Attribute conditional on `ipv4_configuration_type` being equal to `static`
          - Choices: `255.255.255.255`, `255.255.255.254`, `255.255.255.252`, `255.255.255.248`, `255.255.255.240`, `255.255.255.224`, `255.255.255.192`, `255.255.255.128`, `255.255.255.0`, `255.255.254.0`, `255.255.252.0`, `255.255.248.0`, `255.255.240.0`, `255.255.224.0`, `255.255.192.0`, `255.255.128.0`, `255.255.0.0`, `255.254.0.0`, `255.252.0.0`, `255.240.0.0`, `255.224.0.0`, `255.192.0.0`, `255.128.0.0`, `255.0.0.0`, `254.0.0.0`, `252.0.0.0`, `248.0.0.0`, `240.0.0.0`, `224.0.0.0`, `192.0.0.0`, `128.0.0.0`, `0.0.0.0`
        """
        return pulumi.get(self, "ipv4_subnet_mask")

    @ipv4_subnet_mask.setter
    def ipv4_subnet_mask(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "ipv4_subnet_mask", value)

    @_builtins.property
    @pulumi.getter(name="ipv4SubnetMaskVariable")
    def ipv4_subnet_mask_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name, Attribute conditional on `ipv4_configuration_type` being equal to `static`
        """
        return pulumi.get(self, "ipv4_subnet_mask_variable")

    @ipv4_subnet_mask_variable.setter
    def ipv4_subnet_mask_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "ipv4_subnet_mask_variable", value)

    @_builtins.property
    @pulumi.getter(name="ipv4Vrrps")
    def ipv4_vrrps(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ServiceLanVpnInterfaceEthernetFeatureIpv4VrrpArgs']]]]:
        """
        Enable VRRP
        """
        return pulumi.get(self, "ipv4_vrrps")

    @ipv4_vrrps.setter
    def ipv4_vrrps(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ServiceLanVpnInterfaceEthernetFeatureIpv4VrrpArgs']]]]):
        pulumi.set(self, "ipv4_vrrps", value)

    @_builtins.property
    @pulumi.getter(name="ipv6Address")
    def ipv6_address(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        IPv6 Address Secondary, Attribute conditional on `ipv6_configuration_type` being equal to `static`
        """
        return pulumi.get(self, "ipv6_address")

    @ipv6_address.setter
    def ipv6_address(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "ipv6_address", value)

    @_builtins.property
    @pulumi.getter(name="ipv6AddressVariable")
    def ipv6_address_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name, Attribute conditional on `ipv6_configuration_type` being equal to `static`
        """
        return pulumi.get(self, "ipv6_address_variable")

    @ipv6_address_variable.setter
    def ipv6_address_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "ipv6_address_variable", value)

    @_builtins.property
    @pulumi.getter(name="ipv6ConfigurationType")
    def ipv6_configuration_type(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        IPv6 Configuration Type
          - Choices: `dynamic`, `static`, `none`
          - Default value: `none`
        """
        return pulumi.get(self, "ipv6_configuration_type")

    @ipv6_configuration_type.setter
    def ipv6_configuration_type(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "ipv6_configuration_type", value)

    @_builtins.property
    @pulumi.getter(name="ipv6DhcpHelpers")
    def ipv6_dhcp_helpers(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ServiceLanVpnInterfaceEthernetFeatureIpv6DhcpHelperArgs']]]]:
        """
        DHCPv6 Helper, Attribute conditional on `ipv6_configuration_type` being equal to `static`
        """
        return pulumi.get(self, "ipv6_dhcp_helpers")

    @ipv6_dhcp_helpers.setter
    def ipv6_dhcp_helpers(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ServiceLanVpnInterfaceEthernetFeatureIpv6DhcpHelperArgs']]]]):
        pulumi.set(self, "ipv6_dhcp_helpers", value)

    @_builtins.property
    @pulumi.getter(name="ipv6DhcpSecondaryAddresses")
    def ipv6_dhcp_secondary_addresses(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ServiceLanVpnInterfaceEthernetFeatureIpv6DhcpSecondaryAddressArgs']]]]:
        """
        secondary IPv6 addresses, Attribute conditional on `ipv6_configuration_type` being equal to `dynamic`
        """
        return pulumi.get(self, "ipv6_dhcp_secondary_addresses")

    @ipv6_dhcp_secondary_addresses.setter
    def ipv6_dhcp_secondary_addresses(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ServiceLanVpnInterfaceEthernetFeatureIpv6DhcpSecondaryAddressArgs']]]]):
        pulumi.set(self, "ipv6_dhcp_secondary_addresses", value)

    @_builtins.property
    @pulumi.getter(name="ipv6Nat")
    def ipv6_nat(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        enable Network Address Translation ipv6 on this interface
          - Default value: `false`
        """
        return pulumi.get(self, "ipv6_nat")

    @ipv6_nat.setter
    def ipv6_nat(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "ipv6_nat", value)

    @_builtins.property
    @pulumi.getter(name="ipv6SecondaryAddresses")
    def ipv6_secondary_addresses(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ServiceLanVpnInterfaceEthernetFeatureIpv6SecondaryAddressArgs']]]]:
        """
        Static secondary IPv6 addresses, Attribute conditional on `ipv6_configuration_type` being equal to `static`
        """
        return pulumi.get(self, "ipv6_secondary_addresses")

    @ipv6_secondary_addresses.setter
    def ipv6_secondary_addresses(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ServiceLanVpnInterfaceEthernetFeatureIpv6SecondaryAddressArgs']]]]):
        pulumi.set(self, "ipv6_secondary_addresses", value)

    @_builtins.property
    @pulumi.getter(name="ipv6Vrrps")
    def ipv6_vrrps(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ServiceLanVpnInterfaceEthernetFeatureIpv6VrrpArgs']]]]:
        """
        Enable VRRP Ipv6
        """
        return pulumi.get(self, "ipv6_vrrps")

    @ipv6_vrrps.setter
    def ipv6_vrrps(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ServiceLanVpnInterfaceEthernetFeatureIpv6VrrpArgs']]]]):
        pulumi.set(self, "ipv6_vrrps", value)

    @_builtins.property
    @pulumi.getter(name="loadInterval")
    def load_interval(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        Interval for interface load calculation
          - Range: `30`-`600`
          - Default value: `30`
        """
        return pulumi.get(self, "load_interval")

    @load_interval.setter
    def load_interval(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "load_interval", value)

    @_builtins.property
    @pulumi.getter(name="loadIntervalVariable")
    def load_interval_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "load_interval_variable")

    @load_interval_variable.setter
    def load_interval_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "load_interval_variable", value)

    @_builtins.property
    @pulumi.getter(name="macAddress")
    def mac_address(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        MAC Address
        """
        return pulumi.get(self, "mac_address")

    @mac_address.setter
    def mac_address(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "mac_address", value)

    @_builtins.property
    @pulumi.getter(name="macAddressVariable")
    def mac_address_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "mac_address_variable")

    @mac_address_variable.setter
    def mac_address_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "mac_address_variable", value)

    @_builtins.property
    @pulumi.getter(name="mediaType")
    def media_type(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Media type
          - Choices: `auto-select`, `rj45`, `sfp`
        """
        return pulumi.get(self, "media_type")

    @media_type.setter
    def media_type(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "media_type", value)

    @_builtins.property
    @pulumi.getter(name="mediaTypeVariable")
    def media_type_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "media_type_variable")

    @media_type_variable.setter
    def media_type_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "media_type_variable", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The name of the Feature
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "name", value)

    @_builtins.property
    @pulumi.getter
    def nat64(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        NAT64 on this interface
          - Default value: `false`
        """
        return pulumi.get(self, "nat64")

    @nat64.setter
    def nat64(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "nat64", value)

    @_builtins.property
    @pulumi.getter(name="serviceLanVpnFeatureId")
    def service_lan_vpn_feature_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Service LAN VPN Feature ID
        """
        return pulumi.get(self, "service_lan_vpn_feature_id")

    @service_lan_vpn_feature_id.setter
    def service_lan_vpn_feature_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "service_lan_vpn_feature_id", value)

    @_builtins.property
    @pulumi.getter
    def shutdown(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        - Default value: `true`
        """
        return pulumi.get(self, "shutdown")

    @shutdown.setter
    def shutdown(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "shutdown", value)

    @_builtins.property
    @pulumi.getter(name="shutdownVariable")
    def shutdown_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "shutdown_variable")

    @shutdown_variable.setter
    def shutdown_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "shutdown_variable", value)

    @_builtins.property
    @pulumi.getter
    def speed(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Set interface speed
          - Choices: `10`, `100`, `1000`, `2500`, `10000`
        """
        return pulumi.get(self, "speed")

    @speed.setter
    def speed(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "speed", value)

    @_builtins.property
    @pulumi.getter(name="speedVariable")
    def speed_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "speed_variable")

    @speed_variable.setter
    def speed_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "speed_variable", value)

    @_builtins.property
    @pulumi.getter(name="staticNats")
    def static_nats(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ServiceLanVpnInterfaceEthernetFeatureStaticNatArgs']]]]:
        """
        static NAT
        """
        return pulumi.get(self, "static_nats")

    @static_nats.setter
    def static_nats(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ServiceLanVpnInterfaceEthernetFeatureStaticNatArgs']]]]):
        pulumi.set(self, "static_nats", value)

    @_builtins.property
    @pulumi.getter(name="tcpMss")
    def tcp_mss(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        TCP MSS on SYN packets, in bytes
          - Range: `500`-`1460`
        """
        return pulumi.get(self, "tcp_mss")

    @tcp_mss.setter
    def tcp_mss(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "tcp_mss", value)

    @_builtins.property
    @pulumi.getter(name="tcpMssVariable")
    def tcp_mss_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "tcp_mss_variable")

    @tcp_mss_variable.setter
    def tcp_mss_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "tcp_mss_variable", value)

    @_builtins.property
    @pulumi.getter
    def tracker(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Enable tracker for this interface
        """
        return pulumi.get(self, "tracker")

    @tracker.setter
    def tracker(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "tracker", value)

    @_builtins.property
    @pulumi.getter(name="trackerVariable")
    def tracker_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "tracker_variable")

    @tracker_variable.setter
    def tracker_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "tracker_variable", value)

    @_builtins.property
    @pulumi.getter(name="trustsecEnableEnforcedPropogation")
    def trustsec_enable_enforced_propogation(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Enable/Disable SGT Enforcement on an interface
        """
        return pulumi.get(self, "trustsec_enable_enforced_propogation")

    @trustsec_enable_enforced_propogation.setter
    def trustsec_enable_enforced_propogation(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "trustsec_enable_enforced_propogation", value)

    @_builtins.property
    @pulumi.getter(name="trustsecEnableSgtPropogation")
    def trustsec_enable_sgt_propogation(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Indicates that the interface is trustworthy for CTS
          - Default value: `false`
        """
        return pulumi.get(self, "trustsec_enable_sgt_propogation")

    @trustsec_enable_sgt_propogation.setter
    def trustsec_enable_sgt_propogation(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "trustsec_enable_sgt_propogation", value)

    @_builtins.property
    @pulumi.getter(name="trustsecEnforcedSecurityGroupTag")
    def trustsec_enforced_security_group_tag(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        SGT value between 2 and 65519
          - Range: `2`-`65519`
        """
        return pulumi.get(self, "trustsec_enforced_security_group_tag")

    @trustsec_enforced_security_group_tag.setter
    def trustsec_enforced_security_group_tag(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "trustsec_enforced_security_group_tag", value)

    @_builtins.property
    @pulumi.getter(name="trustsecEnforcedSecurityGroupTagVariable")
    def trustsec_enforced_security_group_tag_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "trustsec_enforced_security_group_tag_variable")

    @trustsec_enforced_security_group_tag_variable.setter
    def trustsec_enforced_security_group_tag_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "trustsec_enforced_security_group_tag_variable", value)

    @_builtins.property
    @pulumi.getter(name="trustsecPropogate")
    def trustsec_propogate(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Enables the interface for CTS SGT authorization and forwarding
          - Default value: `true`
        """
        return pulumi.get(self, "trustsec_propogate")

    @trustsec_propogate.setter
    def trustsec_propogate(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "trustsec_propogate", value)

    @_builtins.property
    @pulumi.getter(name="trustsecSecurityGroupTag")
    def trustsec_security_group_tag(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        SGT value between 2 and 65519
          - Range: `2`-`65519`
        """
        return pulumi.get(self, "trustsec_security_group_tag")

    @trustsec_security_group_tag.setter
    def trustsec_security_group_tag(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "trustsec_security_group_tag", value)

    @_builtins.property
    @pulumi.getter(name="trustsecSecurityGroupTagVariable")
    def trustsec_security_group_tag_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "trustsec_security_group_tag_variable")

    @trustsec_security_group_tag_variable.setter
    def trustsec_security_group_tag_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "trustsec_security_group_tag_variable", value)

    @_builtins.property
    @pulumi.getter
    def version(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        The version of the Feature
        """
        return pulumi.get(self, "version")

    @version.setter
    def version(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "version", value)

    @_builtins.property
    @pulumi.getter
    def xconnect(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Extend remote TLOC over a GRE tunnel to a local LAN interface
        """
        return pulumi.get(self, "xconnect")

    @xconnect.setter
    def xconnect(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "xconnect", value)

    @_builtins.property
    @pulumi.getter(name="xconnectVariable")
    def xconnect_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "xconnect_variable")

    @xconnect_variable.setter
    def xconnect_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "xconnect_variable", value)


@pulumi.type_token("sdwan:index/serviceLanVpnInterfaceEthernetFeature:ServiceLanVpnInterfaceEthernetFeature")
class ServiceLanVpnInterfaceEthernetFeature(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 acl_ipv4_egress_policy_id: Optional[pulumi.Input[_builtins.str]] = None,
                 acl_ipv4_ingress_policy_id: Optional[pulumi.Input[_builtins.str]] = None,
                 acl_ipv6_egress_policy_id: Optional[pulumi.Input[_builtins.str]] = None,
                 acl_ipv6_ingress_policy_id: Optional[pulumi.Input[_builtins.str]] = None,
                 acl_shaping_rate: Optional[pulumi.Input[_builtins.int]] = None,
                 acl_shaping_rate_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 arp_timeout: Optional[pulumi.Input[_builtins.int]] = None,
                 arp_timeout_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 arps: Optional[pulumi.Input[Sequence[pulumi.Input[Union['ServiceLanVpnInterfaceEthernetFeatureArpArgs', 'ServiceLanVpnInterfaceEthernetFeatureArpArgsDict']]]]] = None,
                 autonegotiate: Optional[pulumi.Input[_builtins.bool]] = None,
                 autonegotiate_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 description: Optional[pulumi.Input[_builtins.str]] = None,
                 duplex: Optional[pulumi.Input[_builtins.str]] = None,
                 duplex_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 enable_dhcpv6: Optional[pulumi.Input[_builtins.bool]] = None,
                 feature_profile_id: Optional[pulumi.Input[_builtins.str]] = None,
                 icmp_redirect_disable: Optional[pulumi.Input[_builtins.bool]] = None,
                 icmp_redirect_disable_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 interface_description: Optional[pulumi.Input[_builtins.str]] = None,
                 interface_description_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 interface_mtu: Optional[pulumi.Input[_builtins.int]] = None,
                 interface_mtu_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 interface_name: Optional[pulumi.Input[_builtins.str]] = None,
                 interface_name_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 ip_directed_broadcast: Optional[pulumi.Input[_builtins.bool]] = None,
                 ip_directed_broadcast_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 ip_mtu: Optional[pulumi.Input[_builtins.int]] = None,
                 ip_mtu_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 ipv4_address: Optional[pulumi.Input[_builtins.str]] = None,
                 ipv4_address_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 ipv4_configuration_type: Optional[pulumi.Input[_builtins.str]] = None,
                 ipv4_dhcp_distance: Optional[pulumi.Input[_builtins.int]] = None,
                 ipv4_dhcp_distance_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 ipv4_dhcp_helper_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 ipv4_dhcp_helpers: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 ipv4_nat: Optional[pulumi.Input[_builtins.bool]] = None,
                 ipv4_nat_loopback: Optional[pulumi.Input[_builtins.str]] = None,
                 ipv4_nat_loopback_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 ipv4_nat_overload: Optional[pulumi.Input[_builtins.bool]] = None,
                 ipv4_nat_overload_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 ipv4_nat_prefix_length: Optional[pulumi.Input[_builtins.int]] = None,
                 ipv4_nat_prefix_length_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 ipv4_nat_range_end: Optional[pulumi.Input[_builtins.str]] = None,
                 ipv4_nat_range_end_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 ipv4_nat_range_start: Optional[pulumi.Input[_builtins.str]] = None,
                 ipv4_nat_range_start_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 ipv4_nat_tcp_timeout: Optional[pulumi.Input[_builtins.int]] = None,
                 ipv4_nat_tcp_timeout_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 ipv4_nat_udp_timeout: Optional[pulumi.Input[_builtins.int]] = None,
                 ipv4_nat_udp_timeout_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 ipv4_secondary_addresses: Optional[pulumi.Input[Sequence[pulumi.Input[Union['ServiceLanVpnInterfaceEthernetFeatureIpv4SecondaryAddressArgs', 'ServiceLanVpnInterfaceEthernetFeatureIpv4SecondaryAddressArgsDict']]]]] = None,
                 ipv4_subnet_mask: Optional[pulumi.Input[_builtins.str]] = None,
                 ipv4_subnet_mask_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 ipv4_vrrps: Optional[pulumi.Input[Sequence[pulumi.Input[Union['ServiceLanVpnInterfaceEthernetFeatureIpv4VrrpArgs', 'ServiceLanVpnInterfaceEthernetFeatureIpv4VrrpArgsDict']]]]] = None,
                 ipv6_address: Optional[pulumi.Input[_builtins.str]] = None,
                 ipv6_address_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 ipv6_configuration_type: Optional[pulumi.Input[_builtins.str]] = None,
                 ipv6_dhcp_helpers: Optional[pulumi.Input[Sequence[pulumi.Input[Union['ServiceLanVpnInterfaceEthernetFeatureIpv6DhcpHelperArgs', 'ServiceLanVpnInterfaceEthernetFeatureIpv6DhcpHelperArgsDict']]]]] = None,
                 ipv6_dhcp_secondary_addresses: Optional[pulumi.Input[Sequence[pulumi.Input[Union['ServiceLanVpnInterfaceEthernetFeatureIpv6DhcpSecondaryAddressArgs', 'ServiceLanVpnInterfaceEthernetFeatureIpv6DhcpSecondaryAddressArgsDict']]]]] = None,
                 ipv6_nat: Optional[pulumi.Input[_builtins.bool]] = None,
                 ipv6_secondary_addresses: Optional[pulumi.Input[Sequence[pulumi.Input[Union['ServiceLanVpnInterfaceEthernetFeatureIpv6SecondaryAddressArgs', 'ServiceLanVpnInterfaceEthernetFeatureIpv6SecondaryAddressArgsDict']]]]] = None,
                 ipv6_vrrps: Optional[pulumi.Input[Sequence[pulumi.Input[Union['ServiceLanVpnInterfaceEthernetFeatureIpv6VrrpArgs', 'ServiceLanVpnInterfaceEthernetFeatureIpv6VrrpArgsDict']]]]] = None,
                 load_interval: Optional[pulumi.Input[_builtins.int]] = None,
                 load_interval_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 mac_address: Optional[pulumi.Input[_builtins.str]] = None,
                 mac_address_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 media_type: Optional[pulumi.Input[_builtins.str]] = None,
                 media_type_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 nat64: Optional[pulumi.Input[_builtins.bool]] = None,
                 service_lan_vpn_feature_id: Optional[pulumi.Input[_builtins.str]] = None,
                 shutdown: Optional[pulumi.Input[_builtins.bool]] = None,
                 shutdown_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 speed: Optional[pulumi.Input[_builtins.str]] = None,
                 speed_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 static_nats: Optional[pulumi.Input[Sequence[pulumi.Input[Union['ServiceLanVpnInterfaceEthernetFeatureStaticNatArgs', 'ServiceLanVpnInterfaceEthernetFeatureStaticNatArgsDict']]]]] = None,
                 tcp_mss: Optional[pulumi.Input[_builtins.int]] = None,
                 tcp_mss_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 tracker: Optional[pulumi.Input[_builtins.str]] = None,
                 tracker_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 trustsec_enable_enforced_propogation: Optional[pulumi.Input[_builtins.bool]] = None,
                 trustsec_enable_sgt_propogation: Optional[pulumi.Input[_builtins.bool]] = None,
                 trustsec_enforced_security_group_tag: Optional[pulumi.Input[_builtins.int]] = None,
                 trustsec_enforced_security_group_tag_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 trustsec_propogate: Optional[pulumi.Input[_builtins.bool]] = None,
                 trustsec_security_group_tag: Optional[pulumi.Input[_builtins.int]] = None,
                 trustsec_security_group_tag_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 xconnect: Optional[pulumi.Input[_builtins.str]] = None,
                 xconnect_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 __props__=None):
        """
        This resource can manage a Service LAN VPN Interface Ethernet Feature.
          - Minimum SD-WAN Manager version: `20.12.0`

        ## Example Usage

        ## Import

        The `pulumi import` command can be used, for example:

        Expected import identifier with the format: "service_lan_vpn_interface_ethernet_feature_id,feature_profile_id,service_lan_vpn_feature_id"

        ```sh
        $ pulumi import sdwan:index/serviceLanVpnInterfaceEthernetFeature:ServiceLanVpnInterfaceEthernetFeature example "f6b2c44c-693c-4763-b010-895aa3d236bd,f6dd22c8-0b4f-496c-9a0b-6813d1f8b8ac,140331f6-5418-4755-a059-13c77eb96037"
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.int] acl_shaping_rate: Shaping Rate (Kbps)
                 - Range: `8`-`100000000`
        :param pulumi.Input[_builtins.str] acl_shaping_rate_variable: Variable name
        :param pulumi.Input[_builtins.int] arp_timeout: Timeout value for dynamically learned ARP entries, <0..2678400> seconds
                 - Range: `0`-`2147483`
                 - Default value: `1200`
        :param pulumi.Input[_builtins.str] arp_timeout_variable: Variable name
        :param pulumi.Input[Sequence[pulumi.Input[Union['ServiceLanVpnInterfaceEthernetFeatureArpArgs', 'ServiceLanVpnInterfaceEthernetFeatureArpArgsDict']]]] arps: Configure ARP entries
        :param pulumi.Input[_builtins.bool] autonegotiate: Link autonegotiation
        :param pulumi.Input[_builtins.str] autonegotiate_variable: Variable name
        :param pulumi.Input[_builtins.str] description: The description of the Feature
        :param pulumi.Input[_builtins.str] duplex: Duplex mode
                 - Choices: `full`, `half`, `auto`
        :param pulumi.Input[_builtins.str] duplex_variable: Variable name
        :param pulumi.Input[_builtins.bool] enable_dhcpv6: Enable DHCPv6, Attribute conditional on `ipv6_configuration_type` being equal to `dynamic`
        :param pulumi.Input[_builtins.str] feature_profile_id: Feature Profile ID
        :param pulumi.Input[_builtins.bool] icmp_redirect_disable: ICMP/ICMPv6 Redirect Disable
                 - Default value: `true`
        :param pulumi.Input[_builtins.str] icmp_redirect_disable_variable: Variable name
        :param pulumi.Input[_builtins.str] interface_description_variable: Variable name
        :param pulumi.Input[_builtins.int] interface_mtu: Interface MTU
                 - Range: `1500`-`9216`
                 - Default value: `1500`
        :param pulumi.Input[_builtins.str] interface_mtu_variable: Variable name
        :param pulumi.Input[_builtins.str] interface_name_variable: Variable name
        :param pulumi.Input[_builtins.bool] ip_directed_broadcast: IP Directed-Broadcast
                 - Default value: `false`
        :param pulumi.Input[_builtins.str] ip_directed_broadcast_variable: Variable name
        :param pulumi.Input[_builtins.int] ip_mtu: IP MTU for GigabitEthernet main <576..Interface MTU>, GigabitEthernet subinterface <576..9216>, Other Interfaces <576..2000> in bytes
                 - Range: `576`-`9216`
                 - Default value: `1500`
        :param pulumi.Input[_builtins.str] ip_mtu_variable: Variable name
        :param pulumi.Input[_builtins.str] ipv4_address: IP Address, Attribute conditional on `ipv4_configuration_type` being equal to `static`
        :param pulumi.Input[_builtins.str] ipv4_address_variable: Variable name, Attribute conditional on `ipv4_configuration_type` being equal to `static`
        :param pulumi.Input[_builtins.str] ipv4_configuration_type: IPv4 Configuration Type
                 - Choices: `dynamic`, `static`
                 - Default value: `dynamic`
        :param pulumi.Input[_builtins.int] ipv4_dhcp_distance: DHCP Distance, Attribute conditional on `ipv4_configuration_type` being equal to `dynamic`
                 - Range: `1`-`65536`
                 - Default value: `1`
        :param pulumi.Input[_builtins.str] ipv4_dhcp_distance_variable: Variable name, Attribute conditional on `ipv4_configuration_type` being equal to `dynamic`
        :param pulumi.Input[_builtins.str] ipv4_dhcp_helper_variable: Variable name
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] ipv4_dhcp_helpers: List of DHCP IPv4 helper addresses (min 1, max 8)
        :param pulumi.Input[_builtins.bool] ipv4_nat: enable Network Address Translation on this interface
                 - Default value: `false`
        :param pulumi.Input[_builtins.str] ipv4_nat_loopback: NAT Inside Source Loopback Interface
        :param pulumi.Input[_builtins.str] ipv4_nat_loopback_variable: Variable name
        :param pulumi.Input[_builtins.bool] ipv4_nat_overload: NAT Overload
                 - Default value: `true`
        :param pulumi.Input[_builtins.str] ipv4_nat_overload_variable: Variable name
        :param pulumi.Input[_builtins.int] ipv4_nat_prefix_length: NAT Pool Prefix Length
                 - Range: `1`-`32`
        :param pulumi.Input[_builtins.str] ipv4_nat_prefix_length_variable: Variable name
        :param pulumi.Input[_builtins.str] ipv4_nat_range_end: NAT Pool Range End
        :param pulumi.Input[_builtins.str] ipv4_nat_range_end_variable: Variable name
        :param pulumi.Input[_builtins.str] ipv4_nat_range_start: NAT Pool Range Start
        :param pulumi.Input[_builtins.str] ipv4_nat_range_start_variable: Variable name
        :param pulumi.Input[_builtins.int] ipv4_nat_tcp_timeout: Set NAT TCP session timeout, in minutes
                 - Range: `1`-`8947`
                 - Default value: `60`
        :param pulumi.Input[_builtins.str] ipv4_nat_tcp_timeout_variable: Variable name
        :param pulumi.Input[_builtins.int] ipv4_nat_udp_timeout: Set NAT UDP session timeout, in minutes
                 - Range: `1`-`8947`
                 - Default value: `1`
        :param pulumi.Input[_builtins.str] ipv4_nat_udp_timeout_variable: Variable name
        :param pulumi.Input[Sequence[pulumi.Input[Union['ServiceLanVpnInterfaceEthernetFeatureIpv4SecondaryAddressArgs', 'ServiceLanVpnInterfaceEthernetFeatureIpv4SecondaryAddressArgsDict']]]] ipv4_secondary_addresses: Secondary IpV4 Addresses, Attribute conditional on `ipv4_configuration_type` being equal to `static`
        :param pulumi.Input[_builtins.str] ipv4_subnet_mask: Subnet Mask, Attribute conditional on `ipv4_configuration_type` being equal to `static`
                 - Choices: `255.255.255.255`, `255.255.255.254`, `255.255.255.252`, `255.255.255.248`, `255.255.255.240`, `255.255.255.224`, `255.255.255.192`, `255.255.255.128`, `255.255.255.0`, `255.255.254.0`, `255.255.252.0`, `255.255.248.0`, `255.255.240.0`, `255.255.224.0`, `255.255.192.0`, `255.255.128.0`, `255.255.0.0`, `255.254.0.0`, `255.252.0.0`, `255.240.0.0`, `255.224.0.0`, `255.192.0.0`, `255.128.0.0`, `255.0.0.0`, `254.0.0.0`, `252.0.0.0`, `248.0.0.0`, `240.0.0.0`, `224.0.0.0`, `192.0.0.0`, `128.0.0.0`, `0.0.0.0`
        :param pulumi.Input[_builtins.str] ipv4_subnet_mask_variable: Variable name, Attribute conditional on `ipv4_configuration_type` being equal to `static`
        :param pulumi.Input[Sequence[pulumi.Input[Union['ServiceLanVpnInterfaceEthernetFeatureIpv4VrrpArgs', 'ServiceLanVpnInterfaceEthernetFeatureIpv4VrrpArgsDict']]]] ipv4_vrrps: Enable VRRP
        :param pulumi.Input[_builtins.str] ipv6_address: IPv6 Address Secondary, Attribute conditional on `ipv6_configuration_type` being equal to `static`
        :param pulumi.Input[_builtins.str] ipv6_address_variable: Variable name, Attribute conditional on `ipv6_configuration_type` being equal to `static`
        :param pulumi.Input[_builtins.str] ipv6_configuration_type: IPv6 Configuration Type
                 - Choices: `dynamic`, `static`, `none`
                 - Default value: `none`
        :param pulumi.Input[Sequence[pulumi.Input[Union['ServiceLanVpnInterfaceEthernetFeatureIpv6DhcpHelperArgs', 'ServiceLanVpnInterfaceEthernetFeatureIpv6DhcpHelperArgsDict']]]] ipv6_dhcp_helpers: DHCPv6 Helper, Attribute conditional on `ipv6_configuration_type` being equal to `static`
        :param pulumi.Input[Sequence[pulumi.Input[Union['ServiceLanVpnInterfaceEthernetFeatureIpv6DhcpSecondaryAddressArgs', 'ServiceLanVpnInterfaceEthernetFeatureIpv6DhcpSecondaryAddressArgsDict']]]] ipv6_dhcp_secondary_addresses: secondary IPv6 addresses, Attribute conditional on `ipv6_configuration_type` being equal to `dynamic`
        :param pulumi.Input[_builtins.bool] ipv6_nat: enable Network Address Translation ipv6 on this interface
                 - Default value: `false`
        :param pulumi.Input[Sequence[pulumi.Input[Union['ServiceLanVpnInterfaceEthernetFeatureIpv6SecondaryAddressArgs', 'ServiceLanVpnInterfaceEthernetFeatureIpv6SecondaryAddressArgsDict']]]] ipv6_secondary_addresses: Static secondary IPv6 addresses, Attribute conditional on `ipv6_configuration_type` being equal to `static`
        :param pulumi.Input[Sequence[pulumi.Input[Union['ServiceLanVpnInterfaceEthernetFeatureIpv6VrrpArgs', 'ServiceLanVpnInterfaceEthernetFeatureIpv6VrrpArgsDict']]]] ipv6_vrrps: Enable VRRP Ipv6
        :param pulumi.Input[_builtins.int] load_interval: Interval for interface load calculation
                 - Range: `30`-`600`
                 - Default value: `30`
        :param pulumi.Input[_builtins.str] load_interval_variable: Variable name
        :param pulumi.Input[_builtins.str] mac_address: MAC Address
        :param pulumi.Input[_builtins.str] mac_address_variable: Variable name
        :param pulumi.Input[_builtins.str] media_type: Media type
                 - Choices: `auto-select`, `rj45`, `sfp`
        :param pulumi.Input[_builtins.str] media_type_variable: Variable name
        :param pulumi.Input[_builtins.str] name: The name of the Feature
        :param pulumi.Input[_builtins.bool] nat64: NAT64 on this interface
                 - Default value: `false`
        :param pulumi.Input[_builtins.str] service_lan_vpn_feature_id: Service LAN VPN Feature ID
        :param pulumi.Input[_builtins.bool] shutdown: - Default value: `true`
        :param pulumi.Input[_builtins.str] shutdown_variable: Variable name
        :param pulumi.Input[_builtins.str] speed: Set interface speed
                 - Choices: `10`, `100`, `1000`, `2500`, `10000`
        :param pulumi.Input[_builtins.str] speed_variable: Variable name
        :param pulumi.Input[Sequence[pulumi.Input[Union['ServiceLanVpnInterfaceEthernetFeatureStaticNatArgs', 'ServiceLanVpnInterfaceEthernetFeatureStaticNatArgsDict']]]] static_nats: static NAT
        :param pulumi.Input[_builtins.int] tcp_mss: TCP MSS on SYN packets, in bytes
                 - Range: `500`-`1460`
        :param pulumi.Input[_builtins.str] tcp_mss_variable: Variable name
        :param pulumi.Input[_builtins.str] tracker: Enable tracker for this interface
        :param pulumi.Input[_builtins.str] tracker_variable: Variable name
        :param pulumi.Input[_builtins.bool] trustsec_enable_enforced_propogation: Enable/Disable SGT Enforcement on an interface
        :param pulumi.Input[_builtins.bool] trustsec_enable_sgt_propogation: Indicates that the interface is trustworthy for CTS
                 - Default value: `false`
        :param pulumi.Input[_builtins.int] trustsec_enforced_security_group_tag: SGT value between 2 and 65519
                 - Range: `2`-`65519`
        :param pulumi.Input[_builtins.str] trustsec_enforced_security_group_tag_variable: Variable name
        :param pulumi.Input[_builtins.bool] trustsec_propogate: Enables the interface for CTS SGT authorization and forwarding
                 - Default value: `true`
        :param pulumi.Input[_builtins.int] trustsec_security_group_tag: SGT value between 2 and 65519
                 - Range: `2`-`65519`
        :param pulumi.Input[_builtins.str] trustsec_security_group_tag_variable: Variable name
        :param pulumi.Input[_builtins.str] xconnect: Extend remote TLOC over a GRE tunnel to a local LAN interface
        :param pulumi.Input[_builtins.str] xconnect_variable: Variable name
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: ServiceLanVpnInterfaceEthernetFeatureArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        This resource can manage a Service LAN VPN Interface Ethernet Feature.
          - Minimum SD-WAN Manager version: `20.12.0`

        ## Example Usage

        ## Import

        The `pulumi import` command can be used, for example:

        Expected import identifier with the format: "service_lan_vpn_interface_ethernet_feature_id,feature_profile_id,service_lan_vpn_feature_id"

        ```sh
        $ pulumi import sdwan:index/serviceLanVpnInterfaceEthernetFeature:ServiceLanVpnInterfaceEthernetFeature example "f6b2c44c-693c-4763-b010-895aa3d236bd,f6dd22c8-0b4f-496c-9a0b-6813d1f8b8ac,140331f6-5418-4755-a059-13c77eb96037"
        ```

        :param str resource_name: The name of the resource.
        :param ServiceLanVpnInterfaceEthernetFeatureArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(ServiceLanVpnInterfaceEthernetFeatureArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 acl_ipv4_egress_policy_id: Optional[pulumi.Input[_builtins.str]] = None,
                 acl_ipv4_ingress_policy_id: Optional[pulumi.Input[_builtins.str]] = None,
                 acl_ipv6_egress_policy_id: Optional[pulumi.Input[_builtins.str]] = None,
                 acl_ipv6_ingress_policy_id: Optional[pulumi.Input[_builtins.str]] = None,
                 acl_shaping_rate: Optional[pulumi.Input[_builtins.int]] = None,
                 acl_shaping_rate_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 arp_timeout: Optional[pulumi.Input[_builtins.int]] = None,
                 arp_timeout_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 arps: Optional[pulumi.Input[Sequence[pulumi.Input[Union['ServiceLanVpnInterfaceEthernetFeatureArpArgs', 'ServiceLanVpnInterfaceEthernetFeatureArpArgsDict']]]]] = None,
                 autonegotiate: Optional[pulumi.Input[_builtins.bool]] = None,
                 autonegotiate_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 description: Optional[pulumi.Input[_builtins.str]] = None,
                 duplex: Optional[pulumi.Input[_builtins.str]] = None,
                 duplex_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 enable_dhcpv6: Optional[pulumi.Input[_builtins.bool]] = None,
                 feature_profile_id: Optional[pulumi.Input[_builtins.str]] = None,
                 icmp_redirect_disable: Optional[pulumi.Input[_builtins.bool]] = None,
                 icmp_redirect_disable_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 interface_description: Optional[pulumi.Input[_builtins.str]] = None,
                 interface_description_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 interface_mtu: Optional[pulumi.Input[_builtins.int]] = None,
                 interface_mtu_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 interface_name: Optional[pulumi.Input[_builtins.str]] = None,
                 interface_name_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 ip_directed_broadcast: Optional[pulumi.Input[_builtins.bool]] = None,
                 ip_directed_broadcast_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 ip_mtu: Optional[pulumi.Input[_builtins.int]] = None,
                 ip_mtu_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 ipv4_address: Optional[pulumi.Input[_builtins.str]] = None,
                 ipv4_address_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 ipv4_configuration_type: Optional[pulumi.Input[_builtins.str]] = None,
                 ipv4_dhcp_distance: Optional[pulumi.Input[_builtins.int]] = None,
                 ipv4_dhcp_distance_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 ipv4_dhcp_helper_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 ipv4_dhcp_helpers: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 ipv4_nat: Optional[pulumi.Input[_builtins.bool]] = None,
                 ipv4_nat_loopback: Optional[pulumi.Input[_builtins.str]] = None,
                 ipv4_nat_loopback_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 ipv4_nat_overload: Optional[pulumi.Input[_builtins.bool]] = None,
                 ipv4_nat_overload_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 ipv4_nat_prefix_length: Optional[pulumi.Input[_builtins.int]] = None,
                 ipv4_nat_prefix_length_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 ipv4_nat_range_end: Optional[pulumi.Input[_builtins.str]] = None,
                 ipv4_nat_range_end_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 ipv4_nat_range_start: Optional[pulumi.Input[_builtins.str]] = None,
                 ipv4_nat_range_start_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 ipv4_nat_tcp_timeout: Optional[pulumi.Input[_builtins.int]] = None,
                 ipv4_nat_tcp_timeout_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 ipv4_nat_udp_timeout: Optional[pulumi.Input[_builtins.int]] = None,
                 ipv4_nat_udp_timeout_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 ipv4_secondary_addresses: Optional[pulumi.Input[Sequence[pulumi.Input[Union['ServiceLanVpnInterfaceEthernetFeatureIpv4SecondaryAddressArgs', 'ServiceLanVpnInterfaceEthernetFeatureIpv4SecondaryAddressArgsDict']]]]] = None,
                 ipv4_subnet_mask: Optional[pulumi.Input[_builtins.str]] = None,
                 ipv4_subnet_mask_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 ipv4_vrrps: Optional[pulumi.Input[Sequence[pulumi.Input[Union['ServiceLanVpnInterfaceEthernetFeatureIpv4VrrpArgs', 'ServiceLanVpnInterfaceEthernetFeatureIpv4VrrpArgsDict']]]]] = None,
                 ipv6_address: Optional[pulumi.Input[_builtins.str]] = None,
                 ipv6_address_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 ipv6_configuration_type: Optional[pulumi.Input[_builtins.str]] = None,
                 ipv6_dhcp_helpers: Optional[pulumi.Input[Sequence[pulumi.Input[Union['ServiceLanVpnInterfaceEthernetFeatureIpv6DhcpHelperArgs', 'ServiceLanVpnInterfaceEthernetFeatureIpv6DhcpHelperArgsDict']]]]] = None,
                 ipv6_dhcp_secondary_addresses: Optional[pulumi.Input[Sequence[pulumi.Input[Union['ServiceLanVpnInterfaceEthernetFeatureIpv6DhcpSecondaryAddressArgs', 'ServiceLanVpnInterfaceEthernetFeatureIpv6DhcpSecondaryAddressArgsDict']]]]] = None,
                 ipv6_nat: Optional[pulumi.Input[_builtins.bool]] = None,
                 ipv6_secondary_addresses: Optional[pulumi.Input[Sequence[pulumi.Input[Union['ServiceLanVpnInterfaceEthernetFeatureIpv6SecondaryAddressArgs', 'ServiceLanVpnInterfaceEthernetFeatureIpv6SecondaryAddressArgsDict']]]]] = None,
                 ipv6_vrrps: Optional[pulumi.Input[Sequence[pulumi.Input[Union['ServiceLanVpnInterfaceEthernetFeatureIpv6VrrpArgs', 'ServiceLanVpnInterfaceEthernetFeatureIpv6VrrpArgsDict']]]]] = None,
                 load_interval: Optional[pulumi.Input[_builtins.int]] = None,
                 load_interval_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 mac_address: Optional[pulumi.Input[_builtins.str]] = None,
                 mac_address_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 media_type: Optional[pulumi.Input[_builtins.str]] = None,
                 media_type_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 nat64: Optional[pulumi.Input[_builtins.bool]] = None,
                 service_lan_vpn_feature_id: Optional[pulumi.Input[_builtins.str]] = None,
                 shutdown: Optional[pulumi.Input[_builtins.bool]] = None,
                 shutdown_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 speed: Optional[pulumi.Input[_builtins.str]] = None,
                 speed_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 static_nats: Optional[pulumi.Input[Sequence[pulumi.Input[Union['ServiceLanVpnInterfaceEthernetFeatureStaticNatArgs', 'ServiceLanVpnInterfaceEthernetFeatureStaticNatArgsDict']]]]] = None,
                 tcp_mss: Optional[pulumi.Input[_builtins.int]] = None,
                 tcp_mss_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 tracker: Optional[pulumi.Input[_builtins.str]] = None,
                 tracker_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 trustsec_enable_enforced_propogation: Optional[pulumi.Input[_builtins.bool]] = None,
                 trustsec_enable_sgt_propogation: Optional[pulumi.Input[_builtins.bool]] = None,
                 trustsec_enforced_security_group_tag: Optional[pulumi.Input[_builtins.int]] = None,
                 trustsec_enforced_security_group_tag_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 trustsec_propogate: Optional[pulumi.Input[_builtins.bool]] = None,
                 trustsec_security_group_tag: Optional[pulumi.Input[_builtins.int]] = None,
                 trustsec_security_group_tag_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 xconnect: Optional[pulumi.Input[_builtins.str]] = None,
                 xconnect_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = ServiceLanVpnInterfaceEthernetFeatureArgs.__new__(ServiceLanVpnInterfaceEthernetFeatureArgs)

            __props__.__dict__["acl_ipv4_egress_policy_id"] = acl_ipv4_egress_policy_id
            __props__.__dict__["acl_ipv4_ingress_policy_id"] = acl_ipv4_ingress_policy_id
            __props__.__dict__["acl_ipv6_egress_policy_id"] = acl_ipv6_egress_policy_id
            __props__.__dict__["acl_ipv6_ingress_policy_id"] = acl_ipv6_ingress_policy_id
            __props__.__dict__["acl_shaping_rate"] = acl_shaping_rate
            __props__.__dict__["acl_shaping_rate_variable"] = acl_shaping_rate_variable
            __props__.__dict__["arp_timeout"] = arp_timeout
            __props__.__dict__["arp_timeout_variable"] = arp_timeout_variable
            __props__.__dict__["arps"] = arps
            __props__.__dict__["autonegotiate"] = autonegotiate
            __props__.__dict__["autonegotiate_variable"] = autonegotiate_variable
            __props__.__dict__["description"] = description
            __props__.__dict__["duplex"] = duplex
            __props__.__dict__["duplex_variable"] = duplex_variable
            __props__.__dict__["enable_dhcpv6"] = enable_dhcpv6
            if feature_profile_id is None and not opts.urn:
                raise TypeError("Missing required property 'feature_profile_id'")
            __props__.__dict__["feature_profile_id"] = feature_profile_id
            __props__.__dict__["icmp_redirect_disable"] = icmp_redirect_disable
            __props__.__dict__["icmp_redirect_disable_variable"] = icmp_redirect_disable_variable
            __props__.__dict__["interface_description"] = interface_description
            __props__.__dict__["interface_description_variable"] = interface_description_variable
            __props__.__dict__["interface_mtu"] = interface_mtu
            __props__.__dict__["interface_mtu_variable"] = interface_mtu_variable
            __props__.__dict__["interface_name"] = interface_name
            __props__.__dict__["interface_name_variable"] = interface_name_variable
            __props__.__dict__["ip_directed_broadcast"] = ip_directed_broadcast
            __props__.__dict__["ip_directed_broadcast_variable"] = ip_directed_broadcast_variable
            __props__.__dict__["ip_mtu"] = ip_mtu
            __props__.__dict__["ip_mtu_variable"] = ip_mtu_variable
            __props__.__dict__["ipv4_address"] = ipv4_address
            __props__.__dict__["ipv4_address_variable"] = ipv4_address_variable
            __props__.__dict__["ipv4_configuration_type"] = ipv4_configuration_type
            __props__.__dict__["ipv4_dhcp_distance"] = ipv4_dhcp_distance
            __props__.__dict__["ipv4_dhcp_distance_variable"] = ipv4_dhcp_distance_variable
            __props__.__dict__["ipv4_dhcp_helper_variable"] = ipv4_dhcp_helper_variable
            __props__.__dict__["ipv4_dhcp_helpers"] = ipv4_dhcp_helpers
            __props__.__dict__["ipv4_nat"] = ipv4_nat
            __props__.__dict__["ipv4_nat_loopback"] = ipv4_nat_loopback
            __props__.__dict__["ipv4_nat_loopback_variable"] = ipv4_nat_loopback_variable
            __props__.__dict__["ipv4_nat_overload"] = ipv4_nat_overload
            __props__.__dict__["ipv4_nat_overload_variable"] = ipv4_nat_overload_variable
            __props__.__dict__["ipv4_nat_prefix_length"] = ipv4_nat_prefix_length
            __props__.__dict__["ipv4_nat_prefix_length_variable"] = ipv4_nat_prefix_length_variable
            __props__.__dict__["ipv4_nat_range_end"] = ipv4_nat_range_end
            __props__.__dict__["ipv4_nat_range_end_variable"] = ipv4_nat_range_end_variable
            __props__.__dict__["ipv4_nat_range_start"] = ipv4_nat_range_start
            __props__.__dict__["ipv4_nat_range_start_variable"] = ipv4_nat_range_start_variable
            __props__.__dict__["ipv4_nat_tcp_timeout"] = ipv4_nat_tcp_timeout
            __props__.__dict__["ipv4_nat_tcp_timeout_variable"] = ipv4_nat_tcp_timeout_variable
            __props__.__dict__["ipv4_nat_udp_timeout"] = ipv4_nat_udp_timeout
            __props__.__dict__["ipv4_nat_udp_timeout_variable"] = ipv4_nat_udp_timeout_variable
            __props__.__dict__["ipv4_secondary_addresses"] = ipv4_secondary_addresses
            __props__.__dict__["ipv4_subnet_mask"] = ipv4_subnet_mask
            __props__.__dict__["ipv4_subnet_mask_variable"] = ipv4_subnet_mask_variable
            __props__.__dict__["ipv4_vrrps"] = ipv4_vrrps
            __props__.__dict__["ipv6_address"] = ipv6_address
            __props__.__dict__["ipv6_address_variable"] = ipv6_address_variable
            __props__.__dict__["ipv6_configuration_type"] = ipv6_configuration_type
            __props__.__dict__["ipv6_dhcp_helpers"] = ipv6_dhcp_helpers
            __props__.__dict__["ipv6_dhcp_secondary_addresses"] = ipv6_dhcp_secondary_addresses
            __props__.__dict__["ipv6_nat"] = ipv6_nat
            __props__.__dict__["ipv6_secondary_addresses"] = ipv6_secondary_addresses
            __props__.__dict__["ipv6_vrrps"] = ipv6_vrrps
            __props__.__dict__["load_interval"] = load_interval
            __props__.__dict__["load_interval_variable"] = load_interval_variable
            __props__.__dict__["mac_address"] = mac_address
            __props__.__dict__["mac_address_variable"] = mac_address_variable
            __props__.__dict__["media_type"] = media_type
            __props__.__dict__["media_type_variable"] = media_type_variable
            __props__.__dict__["name"] = name
            __props__.__dict__["nat64"] = nat64
            if service_lan_vpn_feature_id is None and not opts.urn:
                raise TypeError("Missing required property 'service_lan_vpn_feature_id'")
            __props__.__dict__["service_lan_vpn_feature_id"] = service_lan_vpn_feature_id
            __props__.__dict__["shutdown"] = shutdown
            __props__.__dict__["shutdown_variable"] = shutdown_variable
            __props__.__dict__["speed"] = speed
            __props__.__dict__["speed_variable"] = speed_variable
            __props__.__dict__["static_nats"] = static_nats
            __props__.__dict__["tcp_mss"] = tcp_mss
            __props__.__dict__["tcp_mss_variable"] = tcp_mss_variable
            __props__.__dict__["tracker"] = tracker
            __props__.__dict__["tracker_variable"] = tracker_variable
            __props__.__dict__["trustsec_enable_enforced_propogation"] = trustsec_enable_enforced_propogation
            __props__.__dict__["trustsec_enable_sgt_propogation"] = trustsec_enable_sgt_propogation
            __props__.__dict__["trustsec_enforced_security_group_tag"] = trustsec_enforced_security_group_tag
            __props__.__dict__["trustsec_enforced_security_group_tag_variable"] = trustsec_enforced_security_group_tag_variable
            __props__.__dict__["trustsec_propogate"] = trustsec_propogate
            __props__.__dict__["trustsec_security_group_tag"] = trustsec_security_group_tag
            __props__.__dict__["trustsec_security_group_tag_variable"] = trustsec_security_group_tag_variable
            __props__.__dict__["xconnect"] = xconnect
            __props__.__dict__["xconnect_variable"] = xconnect_variable
            __props__.__dict__["version"] = None
        super(ServiceLanVpnInterfaceEthernetFeature, __self__).__init__(
            'sdwan:index/serviceLanVpnInterfaceEthernetFeature:ServiceLanVpnInterfaceEthernetFeature',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            acl_ipv4_egress_policy_id: Optional[pulumi.Input[_builtins.str]] = None,
            acl_ipv4_ingress_policy_id: Optional[pulumi.Input[_builtins.str]] = None,
            acl_ipv6_egress_policy_id: Optional[pulumi.Input[_builtins.str]] = None,
            acl_ipv6_ingress_policy_id: Optional[pulumi.Input[_builtins.str]] = None,
            acl_shaping_rate: Optional[pulumi.Input[_builtins.int]] = None,
            acl_shaping_rate_variable: Optional[pulumi.Input[_builtins.str]] = None,
            arp_timeout: Optional[pulumi.Input[_builtins.int]] = None,
            arp_timeout_variable: Optional[pulumi.Input[_builtins.str]] = None,
            arps: Optional[pulumi.Input[Sequence[pulumi.Input[Union['ServiceLanVpnInterfaceEthernetFeatureArpArgs', 'ServiceLanVpnInterfaceEthernetFeatureArpArgsDict']]]]] = None,
            autonegotiate: Optional[pulumi.Input[_builtins.bool]] = None,
            autonegotiate_variable: Optional[pulumi.Input[_builtins.str]] = None,
            description: Optional[pulumi.Input[_builtins.str]] = None,
            duplex: Optional[pulumi.Input[_builtins.str]] = None,
            duplex_variable: Optional[pulumi.Input[_builtins.str]] = None,
            enable_dhcpv6: Optional[pulumi.Input[_builtins.bool]] = None,
            feature_profile_id: Optional[pulumi.Input[_builtins.str]] = None,
            icmp_redirect_disable: Optional[pulumi.Input[_builtins.bool]] = None,
            icmp_redirect_disable_variable: Optional[pulumi.Input[_builtins.str]] = None,
            interface_description: Optional[pulumi.Input[_builtins.str]] = None,
            interface_description_variable: Optional[pulumi.Input[_builtins.str]] = None,
            interface_mtu: Optional[pulumi.Input[_builtins.int]] = None,
            interface_mtu_variable: Optional[pulumi.Input[_builtins.str]] = None,
            interface_name: Optional[pulumi.Input[_builtins.str]] = None,
            interface_name_variable: Optional[pulumi.Input[_builtins.str]] = None,
            ip_directed_broadcast: Optional[pulumi.Input[_builtins.bool]] = None,
            ip_directed_broadcast_variable: Optional[pulumi.Input[_builtins.str]] = None,
            ip_mtu: Optional[pulumi.Input[_builtins.int]] = None,
            ip_mtu_variable: Optional[pulumi.Input[_builtins.str]] = None,
            ipv4_address: Optional[pulumi.Input[_builtins.str]] = None,
            ipv4_address_variable: Optional[pulumi.Input[_builtins.str]] = None,
            ipv4_configuration_type: Optional[pulumi.Input[_builtins.str]] = None,
            ipv4_dhcp_distance: Optional[pulumi.Input[_builtins.int]] = None,
            ipv4_dhcp_distance_variable: Optional[pulumi.Input[_builtins.str]] = None,
            ipv4_dhcp_helper_variable: Optional[pulumi.Input[_builtins.str]] = None,
            ipv4_dhcp_helpers: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
            ipv4_nat: Optional[pulumi.Input[_builtins.bool]] = None,
            ipv4_nat_loopback: Optional[pulumi.Input[_builtins.str]] = None,
            ipv4_nat_loopback_variable: Optional[pulumi.Input[_builtins.str]] = None,
            ipv4_nat_overload: Optional[pulumi.Input[_builtins.bool]] = None,
            ipv4_nat_overload_variable: Optional[pulumi.Input[_builtins.str]] = None,
            ipv4_nat_prefix_length: Optional[pulumi.Input[_builtins.int]] = None,
            ipv4_nat_prefix_length_variable: Optional[pulumi.Input[_builtins.str]] = None,
            ipv4_nat_range_end: Optional[pulumi.Input[_builtins.str]] = None,
            ipv4_nat_range_end_variable: Optional[pulumi.Input[_builtins.str]] = None,
            ipv4_nat_range_start: Optional[pulumi.Input[_builtins.str]] = None,
            ipv4_nat_range_start_variable: Optional[pulumi.Input[_builtins.str]] = None,
            ipv4_nat_tcp_timeout: Optional[pulumi.Input[_builtins.int]] = None,
            ipv4_nat_tcp_timeout_variable: Optional[pulumi.Input[_builtins.str]] = None,
            ipv4_nat_udp_timeout: Optional[pulumi.Input[_builtins.int]] = None,
            ipv4_nat_udp_timeout_variable: Optional[pulumi.Input[_builtins.str]] = None,
            ipv4_secondary_addresses: Optional[pulumi.Input[Sequence[pulumi.Input[Union['ServiceLanVpnInterfaceEthernetFeatureIpv4SecondaryAddressArgs', 'ServiceLanVpnInterfaceEthernetFeatureIpv4SecondaryAddressArgsDict']]]]] = None,
            ipv4_subnet_mask: Optional[pulumi.Input[_builtins.str]] = None,
            ipv4_subnet_mask_variable: Optional[pulumi.Input[_builtins.str]] = None,
            ipv4_vrrps: Optional[pulumi.Input[Sequence[pulumi.Input[Union['ServiceLanVpnInterfaceEthernetFeatureIpv4VrrpArgs', 'ServiceLanVpnInterfaceEthernetFeatureIpv4VrrpArgsDict']]]]] = None,
            ipv6_address: Optional[pulumi.Input[_builtins.str]] = None,
            ipv6_address_variable: Optional[pulumi.Input[_builtins.str]] = None,
            ipv6_configuration_type: Optional[pulumi.Input[_builtins.str]] = None,
            ipv6_dhcp_helpers: Optional[pulumi.Input[Sequence[pulumi.Input[Union['ServiceLanVpnInterfaceEthernetFeatureIpv6DhcpHelperArgs', 'ServiceLanVpnInterfaceEthernetFeatureIpv6DhcpHelperArgsDict']]]]] = None,
            ipv6_dhcp_secondary_addresses: Optional[pulumi.Input[Sequence[pulumi.Input[Union['ServiceLanVpnInterfaceEthernetFeatureIpv6DhcpSecondaryAddressArgs', 'ServiceLanVpnInterfaceEthernetFeatureIpv6DhcpSecondaryAddressArgsDict']]]]] = None,
            ipv6_nat: Optional[pulumi.Input[_builtins.bool]] = None,
            ipv6_secondary_addresses: Optional[pulumi.Input[Sequence[pulumi.Input[Union['ServiceLanVpnInterfaceEthernetFeatureIpv6SecondaryAddressArgs', 'ServiceLanVpnInterfaceEthernetFeatureIpv6SecondaryAddressArgsDict']]]]] = None,
            ipv6_vrrps: Optional[pulumi.Input[Sequence[pulumi.Input[Union['ServiceLanVpnInterfaceEthernetFeatureIpv6VrrpArgs', 'ServiceLanVpnInterfaceEthernetFeatureIpv6VrrpArgsDict']]]]] = None,
            load_interval: Optional[pulumi.Input[_builtins.int]] = None,
            load_interval_variable: Optional[pulumi.Input[_builtins.str]] = None,
            mac_address: Optional[pulumi.Input[_builtins.str]] = None,
            mac_address_variable: Optional[pulumi.Input[_builtins.str]] = None,
            media_type: Optional[pulumi.Input[_builtins.str]] = None,
            media_type_variable: Optional[pulumi.Input[_builtins.str]] = None,
            name: Optional[pulumi.Input[_builtins.str]] = None,
            nat64: Optional[pulumi.Input[_builtins.bool]] = None,
            service_lan_vpn_feature_id: Optional[pulumi.Input[_builtins.str]] = None,
            shutdown: Optional[pulumi.Input[_builtins.bool]] = None,
            shutdown_variable: Optional[pulumi.Input[_builtins.str]] = None,
            speed: Optional[pulumi.Input[_builtins.str]] = None,
            speed_variable: Optional[pulumi.Input[_builtins.str]] = None,
            static_nats: Optional[pulumi.Input[Sequence[pulumi.Input[Union['ServiceLanVpnInterfaceEthernetFeatureStaticNatArgs', 'ServiceLanVpnInterfaceEthernetFeatureStaticNatArgsDict']]]]] = None,
            tcp_mss: Optional[pulumi.Input[_builtins.int]] = None,
            tcp_mss_variable: Optional[pulumi.Input[_builtins.str]] = None,
            tracker: Optional[pulumi.Input[_builtins.str]] = None,
            tracker_variable: Optional[pulumi.Input[_builtins.str]] = None,
            trustsec_enable_enforced_propogation: Optional[pulumi.Input[_builtins.bool]] = None,
            trustsec_enable_sgt_propogation: Optional[pulumi.Input[_builtins.bool]] = None,
            trustsec_enforced_security_group_tag: Optional[pulumi.Input[_builtins.int]] = None,
            trustsec_enforced_security_group_tag_variable: Optional[pulumi.Input[_builtins.str]] = None,
            trustsec_propogate: Optional[pulumi.Input[_builtins.bool]] = None,
            trustsec_security_group_tag: Optional[pulumi.Input[_builtins.int]] = None,
            trustsec_security_group_tag_variable: Optional[pulumi.Input[_builtins.str]] = None,
            version: Optional[pulumi.Input[_builtins.int]] = None,
            xconnect: Optional[pulumi.Input[_builtins.str]] = None,
            xconnect_variable: Optional[pulumi.Input[_builtins.str]] = None) -> 'ServiceLanVpnInterfaceEthernetFeature':
        """
        Get an existing ServiceLanVpnInterfaceEthernetFeature resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.int] acl_shaping_rate: Shaping Rate (Kbps)
                 - Range: `8`-`100000000`
        :param pulumi.Input[_builtins.str] acl_shaping_rate_variable: Variable name
        :param pulumi.Input[_builtins.int] arp_timeout: Timeout value for dynamically learned ARP entries, <0..2678400> seconds
                 - Range: `0`-`2147483`
                 - Default value: `1200`
        :param pulumi.Input[_builtins.str] arp_timeout_variable: Variable name
        :param pulumi.Input[Sequence[pulumi.Input[Union['ServiceLanVpnInterfaceEthernetFeatureArpArgs', 'ServiceLanVpnInterfaceEthernetFeatureArpArgsDict']]]] arps: Configure ARP entries
        :param pulumi.Input[_builtins.bool] autonegotiate: Link autonegotiation
        :param pulumi.Input[_builtins.str] autonegotiate_variable: Variable name
        :param pulumi.Input[_builtins.str] description: The description of the Feature
        :param pulumi.Input[_builtins.str] duplex: Duplex mode
                 - Choices: `full`, `half`, `auto`
        :param pulumi.Input[_builtins.str] duplex_variable: Variable name
        :param pulumi.Input[_builtins.bool] enable_dhcpv6: Enable DHCPv6, Attribute conditional on `ipv6_configuration_type` being equal to `dynamic`
        :param pulumi.Input[_builtins.str] feature_profile_id: Feature Profile ID
        :param pulumi.Input[_builtins.bool] icmp_redirect_disable: ICMP/ICMPv6 Redirect Disable
                 - Default value: `true`
        :param pulumi.Input[_builtins.str] icmp_redirect_disable_variable: Variable name
        :param pulumi.Input[_builtins.str] interface_description_variable: Variable name
        :param pulumi.Input[_builtins.int] interface_mtu: Interface MTU
                 - Range: `1500`-`9216`
                 - Default value: `1500`
        :param pulumi.Input[_builtins.str] interface_mtu_variable: Variable name
        :param pulumi.Input[_builtins.str] interface_name_variable: Variable name
        :param pulumi.Input[_builtins.bool] ip_directed_broadcast: IP Directed-Broadcast
                 - Default value: `false`
        :param pulumi.Input[_builtins.str] ip_directed_broadcast_variable: Variable name
        :param pulumi.Input[_builtins.int] ip_mtu: IP MTU for GigabitEthernet main <576..Interface MTU>, GigabitEthernet subinterface <576..9216>, Other Interfaces <576..2000> in bytes
                 - Range: `576`-`9216`
                 - Default value: `1500`
        :param pulumi.Input[_builtins.str] ip_mtu_variable: Variable name
        :param pulumi.Input[_builtins.str] ipv4_address: IP Address, Attribute conditional on `ipv4_configuration_type` being equal to `static`
        :param pulumi.Input[_builtins.str] ipv4_address_variable: Variable name, Attribute conditional on `ipv4_configuration_type` being equal to `static`
        :param pulumi.Input[_builtins.str] ipv4_configuration_type: IPv4 Configuration Type
                 - Choices: `dynamic`, `static`
                 - Default value: `dynamic`
        :param pulumi.Input[_builtins.int] ipv4_dhcp_distance: DHCP Distance, Attribute conditional on `ipv4_configuration_type` being equal to `dynamic`
                 - Range: `1`-`65536`
                 - Default value: `1`
        :param pulumi.Input[_builtins.str] ipv4_dhcp_distance_variable: Variable name, Attribute conditional on `ipv4_configuration_type` being equal to `dynamic`
        :param pulumi.Input[_builtins.str] ipv4_dhcp_helper_variable: Variable name
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] ipv4_dhcp_helpers: List of DHCP IPv4 helper addresses (min 1, max 8)
        :param pulumi.Input[_builtins.bool] ipv4_nat: enable Network Address Translation on this interface
                 - Default value: `false`
        :param pulumi.Input[_builtins.str] ipv4_nat_loopback: NAT Inside Source Loopback Interface
        :param pulumi.Input[_builtins.str] ipv4_nat_loopback_variable: Variable name
        :param pulumi.Input[_builtins.bool] ipv4_nat_overload: NAT Overload
                 - Default value: `true`
        :param pulumi.Input[_builtins.str] ipv4_nat_overload_variable: Variable name
        :param pulumi.Input[_builtins.int] ipv4_nat_prefix_length: NAT Pool Prefix Length
                 - Range: `1`-`32`
        :param pulumi.Input[_builtins.str] ipv4_nat_prefix_length_variable: Variable name
        :param pulumi.Input[_builtins.str] ipv4_nat_range_end: NAT Pool Range End
        :param pulumi.Input[_builtins.str] ipv4_nat_range_end_variable: Variable name
        :param pulumi.Input[_builtins.str] ipv4_nat_range_start: NAT Pool Range Start
        :param pulumi.Input[_builtins.str] ipv4_nat_range_start_variable: Variable name
        :param pulumi.Input[_builtins.int] ipv4_nat_tcp_timeout: Set NAT TCP session timeout, in minutes
                 - Range: `1`-`8947`
                 - Default value: `60`
        :param pulumi.Input[_builtins.str] ipv4_nat_tcp_timeout_variable: Variable name
        :param pulumi.Input[_builtins.int] ipv4_nat_udp_timeout: Set NAT UDP session timeout, in minutes
                 - Range: `1`-`8947`
                 - Default value: `1`
        :param pulumi.Input[_builtins.str] ipv4_nat_udp_timeout_variable: Variable name
        :param pulumi.Input[Sequence[pulumi.Input[Union['ServiceLanVpnInterfaceEthernetFeatureIpv4SecondaryAddressArgs', 'ServiceLanVpnInterfaceEthernetFeatureIpv4SecondaryAddressArgsDict']]]] ipv4_secondary_addresses: Secondary IpV4 Addresses, Attribute conditional on `ipv4_configuration_type` being equal to `static`
        :param pulumi.Input[_builtins.str] ipv4_subnet_mask: Subnet Mask, Attribute conditional on `ipv4_configuration_type` being equal to `static`
                 - Choices: `255.255.255.255`, `255.255.255.254`, `255.255.255.252`, `255.255.255.248`, `255.255.255.240`, `255.255.255.224`, `255.255.255.192`, `255.255.255.128`, `255.255.255.0`, `255.255.254.0`, `255.255.252.0`, `255.255.248.0`, `255.255.240.0`, `255.255.224.0`, `255.255.192.0`, `255.255.128.0`, `255.255.0.0`, `255.254.0.0`, `255.252.0.0`, `255.240.0.0`, `255.224.0.0`, `255.192.0.0`, `255.128.0.0`, `255.0.0.0`, `254.0.0.0`, `252.0.0.0`, `248.0.0.0`, `240.0.0.0`, `224.0.0.0`, `192.0.0.0`, `128.0.0.0`, `0.0.0.0`
        :param pulumi.Input[_builtins.str] ipv4_subnet_mask_variable: Variable name, Attribute conditional on `ipv4_configuration_type` being equal to `static`
        :param pulumi.Input[Sequence[pulumi.Input[Union['ServiceLanVpnInterfaceEthernetFeatureIpv4VrrpArgs', 'ServiceLanVpnInterfaceEthernetFeatureIpv4VrrpArgsDict']]]] ipv4_vrrps: Enable VRRP
        :param pulumi.Input[_builtins.str] ipv6_address: IPv6 Address Secondary, Attribute conditional on `ipv6_configuration_type` being equal to `static`
        :param pulumi.Input[_builtins.str] ipv6_address_variable: Variable name, Attribute conditional on `ipv6_configuration_type` being equal to `static`
        :param pulumi.Input[_builtins.str] ipv6_configuration_type: IPv6 Configuration Type
                 - Choices: `dynamic`, `static`, `none`
                 - Default value: `none`
        :param pulumi.Input[Sequence[pulumi.Input[Union['ServiceLanVpnInterfaceEthernetFeatureIpv6DhcpHelperArgs', 'ServiceLanVpnInterfaceEthernetFeatureIpv6DhcpHelperArgsDict']]]] ipv6_dhcp_helpers: DHCPv6 Helper, Attribute conditional on `ipv6_configuration_type` being equal to `static`
        :param pulumi.Input[Sequence[pulumi.Input[Union['ServiceLanVpnInterfaceEthernetFeatureIpv6DhcpSecondaryAddressArgs', 'ServiceLanVpnInterfaceEthernetFeatureIpv6DhcpSecondaryAddressArgsDict']]]] ipv6_dhcp_secondary_addresses: secondary IPv6 addresses, Attribute conditional on `ipv6_configuration_type` being equal to `dynamic`
        :param pulumi.Input[_builtins.bool] ipv6_nat: enable Network Address Translation ipv6 on this interface
                 - Default value: `false`
        :param pulumi.Input[Sequence[pulumi.Input[Union['ServiceLanVpnInterfaceEthernetFeatureIpv6SecondaryAddressArgs', 'ServiceLanVpnInterfaceEthernetFeatureIpv6SecondaryAddressArgsDict']]]] ipv6_secondary_addresses: Static secondary IPv6 addresses, Attribute conditional on `ipv6_configuration_type` being equal to `static`
        :param pulumi.Input[Sequence[pulumi.Input[Union['ServiceLanVpnInterfaceEthernetFeatureIpv6VrrpArgs', 'ServiceLanVpnInterfaceEthernetFeatureIpv6VrrpArgsDict']]]] ipv6_vrrps: Enable VRRP Ipv6
        :param pulumi.Input[_builtins.int] load_interval: Interval for interface load calculation
                 - Range: `30`-`600`
                 - Default value: `30`
        :param pulumi.Input[_builtins.str] load_interval_variable: Variable name
        :param pulumi.Input[_builtins.str] mac_address: MAC Address
        :param pulumi.Input[_builtins.str] mac_address_variable: Variable name
        :param pulumi.Input[_builtins.str] media_type: Media type
                 - Choices: `auto-select`, `rj45`, `sfp`
        :param pulumi.Input[_builtins.str] media_type_variable: Variable name
        :param pulumi.Input[_builtins.str] name: The name of the Feature
        :param pulumi.Input[_builtins.bool] nat64: NAT64 on this interface
                 - Default value: `false`
        :param pulumi.Input[_builtins.str] service_lan_vpn_feature_id: Service LAN VPN Feature ID
        :param pulumi.Input[_builtins.bool] shutdown: - Default value: `true`
        :param pulumi.Input[_builtins.str] shutdown_variable: Variable name
        :param pulumi.Input[_builtins.str] speed: Set interface speed
                 - Choices: `10`, `100`, `1000`, `2500`, `10000`
        :param pulumi.Input[_builtins.str] speed_variable: Variable name
        :param pulumi.Input[Sequence[pulumi.Input[Union['ServiceLanVpnInterfaceEthernetFeatureStaticNatArgs', 'ServiceLanVpnInterfaceEthernetFeatureStaticNatArgsDict']]]] static_nats: static NAT
        :param pulumi.Input[_builtins.int] tcp_mss: TCP MSS on SYN packets, in bytes
                 - Range: `500`-`1460`
        :param pulumi.Input[_builtins.str] tcp_mss_variable: Variable name
        :param pulumi.Input[_builtins.str] tracker: Enable tracker for this interface
        :param pulumi.Input[_builtins.str] tracker_variable: Variable name
        :param pulumi.Input[_builtins.bool] trustsec_enable_enforced_propogation: Enable/Disable SGT Enforcement on an interface
        :param pulumi.Input[_builtins.bool] trustsec_enable_sgt_propogation: Indicates that the interface is trustworthy for CTS
                 - Default value: `false`
        :param pulumi.Input[_builtins.int] trustsec_enforced_security_group_tag: SGT value between 2 and 65519
                 - Range: `2`-`65519`
        :param pulumi.Input[_builtins.str] trustsec_enforced_security_group_tag_variable: Variable name
        :param pulumi.Input[_builtins.bool] trustsec_propogate: Enables the interface for CTS SGT authorization and forwarding
                 - Default value: `true`
        :param pulumi.Input[_builtins.int] trustsec_security_group_tag: SGT value between 2 and 65519
                 - Range: `2`-`65519`
        :param pulumi.Input[_builtins.str] trustsec_security_group_tag_variable: Variable name
        :param pulumi.Input[_builtins.int] version: The version of the Feature
        :param pulumi.Input[_builtins.str] xconnect: Extend remote TLOC over a GRE tunnel to a local LAN interface
        :param pulumi.Input[_builtins.str] xconnect_variable: Variable name
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _ServiceLanVpnInterfaceEthernetFeatureState.__new__(_ServiceLanVpnInterfaceEthernetFeatureState)

        __props__.__dict__["acl_ipv4_egress_policy_id"] = acl_ipv4_egress_policy_id
        __props__.__dict__["acl_ipv4_ingress_policy_id"] = acl_ipv4_ingress_policy_id
        __props__.__dict__["acl_ipv6_egress_policy_id"] = acl_ipv6_egress_policy_id
        __props__.__dict__["acl_ipv6_ingress_policy_id"] = acl_ipv6_ingress_policy_id
        __props__.__dict__["acl_shaping_rate"] = acl_shaping_rate
        __props__.__dict__["acl_shaping_rate_variable"] = acl_shaping_rate_variable
        __props__.__dict__["arp_timeout"] = arp_timeout
        __props__.__dict__["arp_timeout_variable"] = arp_timeout_variable
        __props__.__dict__["arps"] = arps
        __props__.__dict__["autonegotiate"] = autonegotiate
        __props__.__dict__["autonegotiate_variable"] = autonegotiate_variable
        __props__.__dict__["description"] = description
        __props__.__dict__["duplex"] = duplex
        __props__.__dict__["duplex_variable"] = duplex_variable
        __props__.__dict__["enable_dhcpv6"] = enable_dhcpv6
        __props__.__dict__["feature_profile_id"] = feature_profile_id
        __props__.__dict__["icmp_redirect_disable"] = icmp_redirect_disable
        __props__.__dict__["icmp_redirect_disable_variable"] = icmp_redirect_disable_variable
        __props__.__dict__["interface_description"] = interface_description
        __props__.__dict__["interface_description_variable"] = interface_description_variable
        __props__.__dict__["interface_mtu"] = interface_mtu
        __props__.__dict__["interface_mtu_variable"] = interface_mtu_variable
        __props__.__dict__["interface_name"] = interface_name
        __props__.__dict__["interface_name_variable"] = interface_name_variable
        __props__.__dict__["ip_directed_broadcast"] = ip_directed_broadcast
        __props__.__dict__["ip_directed_broadcast_variable"] = ip_directed_broadcast_variable
        __props__.__dict__["ip_mtu"] = ip_mtu
        __props__.__dict__["ip_mtu_variable"] = ip_mtu_variable
        __props__.__dict__["ipv4_address"] = ipv4_address
        __props__.__dict__["ipv4_address_variable"] = ipv4_address_variable
        __props__.__dict__["ipv4_configuration_type"] = ipv4_configuration_type
        __props__.__dict__["ipv4_dhcp_distance"] = ipv4_dhcp_distance
        __props__.__dict__["ipv4_dhcp_distance_variable"] = ipv4_dhcp_distance_variable
        __props__.__dict__["ipv4_dhcp_helper_variable"] = ipv4_dhcp_helper_variable
        __props__.__dict__["ipv4_dhcp_helpers"] = ipv4_dhcp_helpers
        __props__.__dict__["ipv4_nat"] = ipv4_nat
        __props__.__dict__["ipv4_nat_loopback"] = ipv4_nat_loopback
        __props__.__dict__["ipv4_nat_loopback_variable"] = ipv4_nat_loopback_variable
        __props__.__dict__["ipv4_nat_overload"] = ipv4_nat_overload
        __props__.__dict__["ipv4_nat_overload_variable"] = ipv4_nat_overload_variable
        __props__.__dict__["ipv4_nat_prefix_length"] = ipv4_nat_prefix_length
        __props__.__dict__["ipv4_nat_prefix_length_variable"] = ipv4_nat_prefix_length_variable
        __props__.__dict__["ipv4_nat_range_end"] = ipv4_nat_range_end
        __props__.__dict__["ipv4_nat_range_end_variable"] = ipv4_nat_range_end_variable
        __props__.__dict__["ipv4_nat_range_start"] = ipv4_nat_range_start
        __props__.__dict__["ipv4_nat_range_start_variable"] = ipv4_nat_range_start_variable
        __props__.__dict__["ipv4_nat_tcp_timeout"] = ipv4_nat_tcp_timeout
        __props__.__dict__["ipv4_nat_tcp_timeout_variable"] = ipv4_nat_tcp_timeout_variable
        __props__.__dict__["ipv4_nat_udp_timeout"] = ipv4_nat_udp_timeout
        __props__.__dict__["ipv4_nat_udp_timeout_variable"] = ipv4_nat_udp_timeout_variable
        __props__.__dict__["ipv4_secondary_addresses"] = ipv4_secondary_addresses
        __props__.__dict__["ipv4_subnet_mask"] = ipv4_subnet_mask
        __props__.__dict__["ipv4_subnet_mask_variable"] = ipv4_subnet_mask_variable
        __props__.__dict__["ipv4_vrrps"] = ipv4_vrrps
        __props__.__dict__["ipv6_address"] = ipv6_address
        __props__.__dict__["ipv6_address_variable"] = ipv6_address_variable
        __props__.__dict__["ipv6_configuration_type"] = ipv6_configuration_type
        __props__.__dict__["ipv6_dhcp_helpers"] = ipv6_dhcp_helpers
        __props__.__dict__["ipv6_dhcp_secondary_addresses"] = ipv6_dhcp_secondary_addresses
        __props__.__dict__["ipv6_nat"] = ipv6_nat
        __props__.__dict__["ipv6_secondary_addresses"] = ipv6_secondary_addresses
        __props__.__dict__["ipv6_vrrps"] = ipv6_vrrps
        __props__.__dict__["load_interval"] = load_interval
        __props__.__dict__["load_interval_variable"] = load_interval_variable
        __props__.__dict__["mac_address"] = mac_address
        __props__.__dict__["mac_address_variable"] = mac_address_variable
        __props__.__dict__["media_type"] = media_type
        __props__.__dict__["media_type_variable"] = media_type_variable
        __props__.__dict__["name"] = name
        __props__.__dict__["nat64"] = nat64
        __props__.__dict__["service_lan_vpn_feature_id"] = service_lan_vpn_feature_id
        __props__.__dict__["shutdown"] = shutdown
        __props__.__dict__["shutdown_variable"] = shutdown_variable
        __props__.__dict__["speed"] = speed
        __props__.__dict__["speed_variable"] = speed_variable
        __props__.__dict__["static_nats"] = static_nats
        __props__.__dict__["tcp_mss"] = tcp_mss
        __props__.__dict__["tcp_mss_variable"] = tcp_mss_variable
        __props__.__dict__["tracker"] = tracker
        __props__.__dict__["tracker_variable"] = tracker_variable
        __props__.__dict__["trustsec_enable_enforced_propogation"] = trustsec_enable_enforced_propogation
        __props__.__dict__["trustsec_enable_sgt_propogation"] = trustsec_enable_sgt_propogation
        __props__.__dict__["trustsec_enforced_security_group_tag"] = trustsec_enforced_security_group_tag
        __props__.__dict__["trustsec_enforced_security_group_tag_variable"] = trustsec_enforced_security_group_tag_variable
        __props__.__dict__["trustsec_propogate"] = trustsec_propogate
        __props__.__dict__["trustsec_security_group_tag"] = trustsec_security_group_tag
        __props__.__dict__["trustsec_security_group_tag_variable"] = trustsec_security_group_tag_variable
        __props__.__dict__["version"] = version
        __props__.__dict__["xconnect"] = xconnect
        __props__.__dict__["xconnect_variable"] = xconnect_variable
        return ServiceLanVpnInterfaceEthernetFeature(resource_name, opts=opts, __props__=__props__)

    @_builtins.property
    @pulumi.getter(name="aclIpv4EgressPolicyId")
    def acl_ipv4_egress_policy_id(self) -> pulumi.Output[Optional[_builtins.str]]:
        return pulumi.get(self, "acl_ipv4_egress_policy_id")

    @_builtins.property
    @pulumi.getter(name="aclIpv4IngressPolicyId")
    def acl_ipv4_ingress_policy_id(self) -> pulumi.Output[Optional[_builtins.str]]:
        return pulumi.get(self, "acl_ipv4_ingress_policy_id")

    @_builtins.property
    @pulumi.getter(name="aclIpv6EgressPolicyId")
    def acl_ipv6_egress_policy_id(self) -> pulumi.Output[Optional[_builtins.str]]:
        return pulumi.get(self, "acl_ipv6_egress_policy_id")

    @_builtins.property
    @pulumi.getter(name="aclIpv6IngressPolicyId")
    def acl_ipv6_ingress_policy_id(self) -> pulumi.Output[Optional[_builtins.str]]:
        return pulumi.get(self, "acl_ipv6_ingress_policy_id")

    @_builtins.property
    @pulumi.getter(name="aclShapingRate")
    def acl_shaping_rate(self) -> pulumi.Output[Optional[_builtins.int]]:
        """
        Shaping Rate (Kbps)
          - Range: `8`-`100000000`
        """
        return pulumi.get(self, "acl_shaping_rate")

    @_builtins.property
    @pulumi.getter(name="aclShapingRateVariable")
    def acl_shaping_rate_variable(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "acl_shaping_rate_variable")

    @_builtins.property
    @pulumi.getter(name="arpTimeout")
    def arp_timeout(self) -> pulumi.Output[Optional[_builtins.int]]:
        """
        Timeout value for dynamically learned ARP entries, <0..2678400> seconds
          - Range: `0`-`2147483`
          - Default value: `1200`
        """
        return pulumi.get(self, "arp_timeout")

    @_builtins.property
    @pulumi.getter(name="arpTimeoutVariable")
    def arp_timeout_variable(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "arp_timeout_variable")

    @_builtins.property
    @pulumi.getter
    def arps(self) -> pulumi.Output[Optional[Sequence['outputs.ServiceLanVpnInterfaceEthernetFeatureArp']]]:
        """
        Configure ARP entries
        """
        return pulumi.get(self, "arps")

    @_builtins.property
    @pulumi.getter
    def autonegotiate(self) -> pulumi.Output[Optional[_builtins.bool]]:
        """
        Link autonegotiation
        """
        return pulumi.get(self, "autonegotiate")

    @_builtins.property
    @pulumi.getter(name="autonegotiateVariable")
    def autonegotiate_variable(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "autonegotiate_variable")

    @_builtins.property
    @pulumi.getter
    def description(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        The description of the Feature
        """
        return pulumi.get(self, "description")

    @_builtins.property
    @pulumi.getter
    def duplex(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        Duplex mode
          - Choices: `full`, `half`, `auto`
        """
        return pulumi.get(self, "duplex")

    @_builtins.property
    @pulumi.getter(name="duplexVariable")
    def duplex_variable(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "duplex_variable")

    @_builtins.property
    @pulumi.getter(name="enableDhcpv6")
    def enable_dhcpv6(self) -> pulumi.Output[Optional[_builtins.bool]]:
        """
        Enable DHCPv6, Attribute conditional on `ipv6_configuration_type` being equal to `dynamic`
        """
        return pulumi.get(self, "enable_dhcpv6")

    @_builtins.property
    @pulumi.getter(name="featureProfileId")
    def feature_profile_id(self) -> pulumi.Output[_builtins.str]:
        """
        Feature Profile ID
        """
        return pulumi.get(self, "feature_profile_id")

    @_builtins.property
    @pulumi.getter(name="icmpRedirectDisable")
    def icmp_redirect_disable(self) -> pulumi.Output[Optional[_builtins.bool]]:
        """
        ICMP/ICMPv6 Redirect Disable
          - Default value: `true`
        """
        return pulumi.get(self, "icmp_redirect_disable")

    @_builtins.property
    @pulumi.getter(name="icmpRedirectDisableVariable")
    def icmp_redirect_disable_variable(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "icmp_redirect_disable_variable")

    @_builtins.property
    @pulumi.getter(name="interfaceDescription")
    def interface_description(self) -> pulumi.Output[Optional[_builtins.str]]:
        return pulumi.get(self, "interface_description")

    @_builtins.property
    @pulumi.getter(name="interfaceDescriptionVariable")
    def interface_description_variable(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "interface_description_variable")

    @_builtins.property
    @pulumi.getter(name="interfaceMtu")
    def interface_mtu(self) -> pulumi.Output[Optional[_builtins.int]]:
        """
        Interface MTU
          - Range: `1500`-`9216`
          - Default value: `1500`
        """
        return pulumi.get(self, "interface_mtu")

    @_builtins.property
    @pulumi.getter(name="interfaceMtuVariable")
    def interface_mtu_variable(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "interface_mtu_variable")

    @_builtins.property
    @pulumi.getter(name="interfaceName")
    def interface_name(self) -> pulumi.Output[Optional[_builtins.str]]:
        return pulumi.get(self, "interface_name")

    @_builtins.property
    @pulumi.getter(name="interfaceNameVariable")
    def interface_name_variable(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "interface_name_variable")

    @_builtins.property
    @pulumi.getter(name="ipDirectedBroadcast")
    def ip_directed_broadcast(self) -> pulumi.Output[Optional[_builtins.bool]]:
        """
        IP Directed-Broadcast
          - Default value: `false`
        """
        return pulumi.get(self, "ip_directed_broadcast")

    @_builtins.property
    @pulumi.getter(name="ipDirectedBroadcastVariable")
    def ip_directed_broadcast_variable(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "ip_directed_broadcast_variable")

    @_builtins.property
    @pulumi.getter(name="ipMtu")
    def ip_mtu(self) -> pulumi.Output[Optional[_builtins.int]]:
        """
        IP MTU for GigabitEthernet main <576..Interface MTU>, GigabitEthernet subinterface <576..9216>, Other Interfaces <576..2000> in bytes
          - Range: `576`-`9216`
          - Default value: `1500`
        """
        return pulumi.get(self, "ip_mtu")

    @_builtins.property
    @pulumi.getter(name="ipMtuVariable")
    def ip_mtu_variable(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "ip_mtu_variable")

    @_builtins.property
    @pulumi.getter(name="ipv4Address")
    def ipv4_address(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        IP Address, Attribute conditional on `ipv4_configuration_type` being equal to `static`
        """
        return pulumi.get(self, "ipv4_address")

    @_builtins.property
    @pulumi.getter(name="ipv4AddressVariable")
    def ipv4_address_variable(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        Variable name, Attribute conditional on `ipv4_configuration_type` being equal to `static`
        """
        return pulumi.get(self, "ipv4_address_variable")

    @_builtins.property
    @pulumi.getter(name="ipv4ConfigurationType")
    def ipv4_configuration_type(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        IPv4 Configuration Type
          - Choices: `dynamic`, `static`
          - Default value: `dynamic`
        """
        return pulumi.get(self, "ipv4_configuration_type")

    @_builtins.property
    @pulumi.getter(name="ipv4DhcpDistance")
    def ipv4_dhcp_distance(self) -> pulumi.Output[Optional[_builtins.int]]:
        """
        DHCP Distance, Attribute conditional on `ipv4_configuration_type` being equal to `dynamic`
          - Range: `1`-`65536`
          - Default value: `1`
        """
        return pulumi.get(self, "ipv4_dhcp_distance")

    @_builtins.property
    @pulumi.getter(name="ipv4DhcpDistanceVariable")
    def ipv4_dhcp_distance_variable(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        Variable name, Attribute conditional on `ipv4_configuration_type` being equal to `dynamic`
        """
        return pulumi.get(self, "ipv4_dhcp_distance_variable")

    @_builtins.property
    @pulumi.getter(name="ipv4DhcpHelperVariable")
    def ipv4_dhcp_helper_variable(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "ipv4_dhcp_helper_variable")

    @_builtins.property
    @pulumi.getter(name="ipv4DhcpHelpers")
    def ipv4_dhcp_helpers(self) -> pulumi.Output[Optional[Sequence[_builtins.str]]]:
        """
        List of DHCP IPv4 helper addresses (min 1, max 8)
        """
        return pulumi.get(self, "ipv4_dhcp_helpers")

    @_builtins.property
    @pulumi.getter(name="ipv4Nat")
    def ipv4_nat(self) -> pulumi.Output[Optional[_builtins.bool]]:
        """
        enable Network Address Translation on this interface
          - Default value: `false`
        """
        return pulumi.get(self, "ipv4_nat")

    @_builtins.property
    @pulumi.getter(name="ipv4NatLoopback")
    def ipv4_nat_loopback(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        NAT Inside Source Loopback Interface
        """
        return pulumi.get(self, "ipv4_nat_loopback")

    @_builtins.property
    @pulumi.getter(name="ipv4NatLoopbackVariable")
    def ipv4_nat_loopback_variable(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "ipv4_nat_loopback_variable")

    @_builtins.property
    @pulumi.getter(name="ipv4NatOverload")
    def ipv4_nat_overload(self) -> pulumi.Output[Optional[_builtins.bool]]:
        """
        NAT Overload
          - Default value: `true`
        """
        return pulumi.get(self, "ipv4_nat_overload")

    @_builtins.property
    @pulumi.getter(name="ipv4NatOverloadVariable")
    def ipv4_nat_overload_variable(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "ipv4_nat_overload_variable")

    @_builtins.property
    @pulumi.getter(name="ipv4NatPrefixLength")
    def ipv4_nat_prefix_length(self) -> pulumi.Output[Optional[_builtins.int]]:
        """
        NAT Pool Prefix Length
          - Range: `1`-`32`
        """
        return pulumi.get(self, "ipv4_nat_prefix_length")

    @_builtins.property
    @pulumi.getter(name="ipv4NatPrefixLengthVariable")
    def ipv4_nat_prefix_length_variable(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "ipv4_nat_prefix_length_variable")

    @_builtins.property
    @pulumi.getter(name="ipv4NatRangeEnd")
    def ipv4_nat_range_end(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        NAT Pool Range End
        """
        return pulumi.get(self, "ipv4_nat_range_end")

    @_builtins.property
    @pulumi.getter(name="ipv4NatRangeEndVariable")
    def ipv4_nat_range_end_variable(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "ipv4_nat_range_end_variable")

    @_builtins.property
    @pulumi.getter(name="ipv4NatRangeStart")
    def ipv4_nat_range_start(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        NAT Pool Range Start
        """
        return pulumi.get(self, "ipv4_nat_range_start")

    @_builtins.property
    @pulumi.getter(name="ipv4NatRangeStartVariable")
    def ipv4_nat_range_start_variable(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "ipv4_nat_range_start_variable")

    @_builtins.property
    @pulumi.getter(name="ipv4NatTcpTimeout")
    def ipv4_nat_tcp_timeout(self) -> pulumi.Output[Optional[_builtins.int]]:
        """
        Set NAT TCP session timeout, in minutes
          - Range: `1`-`8947`
          - Default value: `60`
        """
        return pulumi.get(self, "ipv4_nat_tcp_timeout")

    @_builtins.property
    @pulumi.getter(name="ipv4NatTcpTimeoutVariable")
    def ipv4_nat_tcp_timeout_variable(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "ipv4_nat_tcp_timeout_variable")

    @_builtins.property
    @pulumi.getter(name="ipv4NatUdpTimeout")
    def ipv4_nat_udp_timeout(self) -> pulumi.Output[Optional[_builtins.int]]:
        """
        Set NAT UDP session timeout, in minutes
          - Range: `1`-`8947`
          - Default value: `1`
        """
        return pulumi.get(self, "ipv4_nat_udp_timeout")

    @_builtins.property
    @pulumi.getter(name="ipv4NatUdpTimeoutVariable")
    def ipv4_nat_udp_timeout_variable(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "ipv4_nat_udp_timeout_variable")

    @_builtins.property
    @pulumi.getter(name="ipv4SecondaryAddresses")
    def ipv4_secondary_addresses(self) -> pulumi.Output[Optional[Sequence['outputs.ServiceLanVpnInterfaceEthernetFeatureIpv4SecondaryAddress']]]:
        """
        Secondary IpV4 Addresses, Attribute conditional on `ipv4_configuration_type` being equal to `static`
        """
        return pulumi.get(self, "ipv4_secondary_addresses")

    @_builtins.property
    @pulumi.getter(name="ipv4SubnetMask")
    def ipv4_subnet_mask(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        Subnet Mask, Attribute conditional on `ipv4_configuration_type` being equal to `static`
          - Choices: `255.255.255.255`, `255.255.255.254`, `255.255.255.252`, `255.255.255.248`, `255.255.255.240`, `255.255.255.224`, `255.255.255.192`, `255.255.255.128`, `255.255.255.0`, `255.255.254.0`, `255.255.252.0`, `255.255.248.0`, `255.255.240.0`, `255.255.224.0`, `255.255.192.0`, `255.255.128.0`, `255.255.0.0`, `255.254.0.0`, `255.252.0.0`, `255.240.0.0`, `255.224.0.0`, `255.192.0.0`, `255.128.0.0`, `255.0.0.0`, `254.0.0.0`, `252.0.0.0`, `248.0.0.0`, `240.0.0.0`, `224.0.0.0`, `192.0.0.0`, `128.0.0.0`, `0.0.0.0`
        """
        return pulumi.get(self, "ipv4_subnet_mask")

    @_builtins.property
    @pulumi.getter(name="ipv4SubnetMaskVariable")
    def ipv4_subnet_mask_variable(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        Variable name, Attribute conditional on `ipv4_configuration_type` being equal to `static`
        """
        return pulumi.get(self, "ipv4_subnet_mask_variable")

    @_builtins.property
    @pulumi.getter(name="ipv4Vrrps")
    def ipv4_vrrps(self) -> pulumi.Output[Optional[Sequence['outputs.ServiceLanVpnInterfaceEthernetFeatureIpv4Vrrp']]]:
        """
        Enable VRRP
        """
        return pulumi.get(self, "ipv4_vrrps")

    @_builtins.property
    @pulumi.getter(name="ipv6Address")
    def ipv6_address(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        IPv6 Address Secondary, Attribute conditional on `ipv6_configuration_type` being equal to `static`
        """
        return pulumi.get(self, "ipv6_address")

    @_builtins.property
    @pulumi.getter(name="ipv6AddressVariable")
    def ipv6_address_variable(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        Variable name, Attribute conditional on `ipv6_configuration_type` being equal to `static`
        """
        return pulumi.get(self, "ipv6_address_variable")

    @_builtins.property
    @pulumi.getter(name="ipv6ConfigurationType")
    def ipv6_configuration_type(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        IPv6 Configuration Type
          - Choices: `dynamic`, `static`, `none`
          - Default value: `none`
        """
        return pulumi.get(self, "ipv6_configuration_type")

    @_builtins.property
    @pulumi.getter(name="ipv6DhcpHelpers")
    def ipv6_dhcp_helpers(self) -> pulumi.Output[Optional[Sequence['outputs.ServiceLanVpnInterfaceEthernetFeatureIpv6DhcpHelper']]]:
        """
        DHCPv6 Helper, Attribute conditional on `ipv6_configuration_type` being equal to `static`
        """
        return pulumi.get(self, "ipv6_dhcp_helpers")

    @_builtins.property
    @pulumi.getter(name="ipv6DhcpSecondaryAddresses")
    def ipv6_dhcp_secondary_addresses(self) -> pulumi.Output[Optional[Sequence['outputs.ServiceLanVpnInterfaceEthernetFeatureIpv6DhcpSecondaryAddress']]]:
        """
        secondary IPv6 addresses, Attribute conditional on `ipv6_configuration_type` being equal to `dynamic`
        """
        return pulumi.get(self, "ipv6_dhcp_secondary_addresses")

    @_builtins.property
    @pulumi.getter(name="ipv6Nat")
    def ipv6_nat(self) -> pulumi.Output[Optional[_builtins.bool]]:
        """
        enable Network Address Translation ipv6 on this interface
          - Default value: `false`
        """
        return pulumi.get(self, "ipv6_nat")

    @_builtins.property
    @pulumi.getter(name="ipv6SecondaryAddresses")
    def ipv6_secondary_addresses(self) -> pulumi.Output[Optional[Sequence['outputs.ServiceLanVpnInterfaceEthernetFeatureIpv6SecondaryAddress']]]:
        """
        Static secondary IPv6 addresses, Attribute conditional on `ipv6_configuration_type` being equal to `static`
        """
        return pulumi.get(self, "ipv6_secondary_addresses")

    @_builtins.property
    @pulumi.getter(name="ipv6Vrrps")
    def ipv6_vrrps(self) -> pulumi.Output[Optional[Sequence['outputs.ServiceLanVpnInterfaceEthernetFeatureIpv6Vrrp']]]:
        """
        Enable VRRP Ipv6
        """
        return pulumi.get(self, "ipv6_vrrps")

    @_builtins.property
    @pulumi.getter(name="loadInterval")
    def load_interval(self) -> pulumi.Output[Optional[_builtins.int]]:
        """
        Interval for interface load calculation
          - Range: `30`-`600`
          - Default value: `30`
        """
        return pulumi.get(self, "load_interval")

    @_builtins.property
    @pulumi.getter(name="loadIntervalVariable")
    def load_interval_variable(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "load_interval_variable")

    @_builtins.property
    @pulumi.getter(name="macAddress")
    def mac_address(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        MAC Address
        """
        return pulumi.get(self, "mac_address")

    @_builtins.property
    @pulumi.getter(name="macAddressVariable")
    def mac_address_variable(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "mac_address_variable")

    @_builtins.property
    @pulumi.getter(name="mediaType")
    def media_type(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        Media type
          - Choices: `auto-select`, `rj45`, `sfp`
        """
        return pulumi.get(self, "media_type")

    @_builtins.property
    @pulumi.getter(name="mediaTypeVariable")
    def media_type_variable(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "media_type_variable")

    @_builtins.property
    @pulumi.getter
    def name(self) -> pulumi.Output[_builtins.str]:
        """
        The name of the Feature
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def nat64(self) -> pulumi.Output[Optional[_builtins.bool]]:
        """
        NAT64 on this interface
          - Default value: `false`
        """
        return pulumi.get(self, "nat64")

    @_builtins.property
    @pulumi.getter(name="serviceLanVpnFeatureId")
    def service_lan_vpn_feature_id(self) -> pulumi.Output[_builtins.str]:
        """
        Service LAN VPN Feature ID
        """
        return pulumi.get(self, "service_lan_vpn_feature_id")

    @_builtins.property
    @pulumi.getter
    def shutdown(self) -> pulumi.Output[Optional[_builtins.bool]]:
        """
        - Default value: `true`
        """
        return pulumi.get(self, "shutdown")

    @_builtins.property
    @pulumi.getter(name="shutdownVariable")
    def shutdown_variable(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "shutdown_variable")

    @_builtins.property
    @pulumi.getter
    def speed(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        Set interface speed
          - Choices: `10`, `100`, `1000`, `2500`, `10000`
        """
        return pulumi.get(self, "speed")

    @_builtins.property
    @pulumi.getter(name="speedVariable")
    def speed_variable(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "speed_variable")

    @_builtins.property
    @pulumi.getter(name="staticNats")
    def static_nats(self) -> pulumi.Output[Optional[Sequence['outputs.ServiceLanVpnInterfaceEthernetFeatureStaticNat']]]:
        """
        static NAT
        """
        return pulumi.get(self, "static_nats")

    @_builtins.property
    @pulumi.getter(name="tcpMss")
    def tcp_mss(self) -> pulumi.Output[Optional[_builtins.int]]:
        """
        TCP MSS on SYN packets, in bytes
          - Range: `500`-`1460`
        """
        return pulumi.get(self, "tcp_mss")

    @_builtins.property
    @pulumi.getter(name="tcpMssVariable")
    def tcp_mss_variable(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "tcp_mss_variable")

    @_builtins.property
    @pulumi.getter
    def tracker(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        Enable tracker for this interface
        """
        return pulumi.get(self, "tracker")

    @_builtins.property
    @pulumi.getter(name="trackerVariable")
    def tracker_variable(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "tracker_variable")

    @_builtins.property
    @pulumi.getter(name="trustsecEnableEnforcedPropogation")
    def trustsec_enable_enforced_propogation(self) -> pulumi.Output[Optional[_builtins.bool]]:
        """
        Enable/Disable SGT Enforcement on an interface
        """
        return pulumi.get(self, "trustsec_enable_enforced_propogation")

    @_builtins.property
    @pulumi.getter(name="trustsecEnableSgtPropogation")
    def trustsec_enable_sgt_propogation(self) -> pulumi.Output[Optional[_builtins.bool]]:
        """
        Indicates that the interface is trustworthy for CTS
          - Default value: `false`
        """
        return pulumi.get(self, "trustsec_enable_sgt_propogation")

    @_builtins.property
    @pulumi.getter(name="trustsecEnforcedSecurityGroupTag")
    def trustsec_enforced_security_group_tag(self) -> pulumi.Output[Optional[_builtins.int]]:
        """
        SGT value between 2 and 65519
          - Range: `2`-`65519`
        """
        return pulumi.get(self, "trustsec_enforced_security_group_tag")

    @_builtins.property
    @pulumi.getter(name="trustsecEnforcedSecurityGroupTagVariable")
    def trustsec_enforced_security_group_tag_variable(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "trustsec_enforced_security_group_tag_variable")

    @_builtins.property
    @pulumi.getter(name="trustsecPropogate")
    def trustsec_propogate(self) -> pulumi.Output[Optional[_builtins.bool]]:
        """
        Enables the interface for CTS SGT authorization and forwarding
          - Default value: `true`
        """
        return pulumi.get(self, "trustsec_propogate")

    @_builtins.property
    @pulumi.getter(name="trustsecSecurityGroupTag")
    def trustsec_security_group_tag(self) -> pulumi.Output[Optional[_builtins.int]]:
        """
        SGT value between 2 and 65519
          - Range: `2`-`65519`
        """
        return pulumi.get(self, "trustsec_security_group_tag")

    @_builtins.property
    @pulumi.getter(name="trustsecSecurityGroupTagVariable")
    def trustsec_security_group_tag_variable(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "trustsec_security_group_tag_variable")

    @_builtins.property
    @pulumi.getter
    def version(self) -> pulumi.Output[_builtins.int]:
        """
        The version of the Feature
        """
        return pulumi.get(self, "version")

    @_builtins.property
    @pulumi.getter
    def xconnect(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        Extend remote TLOC over a GRE tunnel to a local LAN interface
        """
        return pulumi.get(self, "xconnect")

    @_builtins.property
    @pulumi.getter(name="xconnectVariable")
    def xconnect_variable(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "xconnect_variable")

