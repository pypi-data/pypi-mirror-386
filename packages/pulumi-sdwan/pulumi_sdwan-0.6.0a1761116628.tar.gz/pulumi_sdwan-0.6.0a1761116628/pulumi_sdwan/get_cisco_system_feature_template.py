# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities
from . import outputs

__all__ = [
    'GetCiscoSystemFeatureTemplateResult',
    'AwaitableGetCiscoSystemFeatureTemplateResult',
    'get_cisco_system_feature_template',
    'get_cisco_system_feature_template_output',
]

@pulumi.output_type
class GetCiscoSystemFeatureTemplateResult:
    """
    A collection of values returned by getCiscoSystemFeatureTemplate.
    """
    def __init__(__self__, admin_tech_on_failure=None, admin_tech_on_failure_variable=None, affinity_group_number=None, affinity_group_number_variable=None, affinity_group_preference_variable=None, affinity_group_preferences=None, console_baud_rate=None, console_baud_rate_variable=None, control_session_pps=None, control_session_pps_variable=None, controller_group_list_variable=None, controller_group_lists=None, description=None, device_groups=None, device_groups_variable=None, device_types=None, enable_mrf_migration=None, enhanced_app_aware_routing=None, enhanced_app_aware_routing_variable=None, geo_fencing=None, geo_fencing_range=None, geo_fencing_range_variable=None, geo_fencing_sms=None, geo_fencing_sms_phone_numbers=None, hostname=None, hostname_variable=None, id=None, idle_timeout=None, idle_timeout_variable=None, latitude=None, latitude_variable=None, location=None, location_variable=None, longitude=None, longitude_variable=None, max_omp_sessions=None, max_omp_sessions_variable=None, migration_bgp_community=None, multi_tenant=None, multi_tenant_variable=None, name=None, object_trackers=None, on_demand_tunnel=None, on_demand_tunnel_idle_timeout=None, on_demand_tunnel_idle_timeout_variable=None, on_demand_tunnel_variable=None, overlay_id=None, overlay_id_variable=None, port_hopping=None, port_hopping_variable=None, port_offset=None, port_offset_variable=None, region_id=None, region_id_variable=None, role=None, role_variable=None, secondary_region_id=None, secondary_region_id_variable=None, site_id=None, site_id_variable=None, system_description=None, system_description_variable=None, system_ip=None, system_ip_variable=None, template_type=None, timezone=None, timezone_variable=None, track_default_gateway=None, track_default_gateway_variable=None, track_interface_tag=None, track_interface_tag_variable=None, track_transport=None, track_transport_variable=None, trackers=None, transport_gateway=None, transport_gateway_variable=None, version=None):
        if admin_tech_on_failure and not isinstance(admin_tech_on_failure, bool):
            raise TypeError("Expected argument 'admin_tech_on_failure' to be a bool")
        pulumi.set(__self__, "admin_tech_on_failure", admin_tech_on_failure)
        if admin_tech_on_failure_variable and not isinstance(admin_tech_on_failure_variable, str):
            raise TypeError("Expected argument 'admin_tech_on_failure_variable' to be a str")
        pulumi.set(__self__, "admin_tech_on_failure_variable", admin_tech_on_failure_variable)
        if affinity_group_number and not isinstance(affinity_group_number, int):
            raise TypeError("Expected argument 'affinity_group_number' to be a int")
        pulumi.set(__self__, "affinity_group_number", affinity_group_number)
        if affinity_group_number_variable and not isinstance(affinity_group_number_variable, str):
            raise TypeError("Expected argument 'affinity_group_number_variable' to be a str")
        pulumi.set(__self__, "affinity_group_number_variable", affinity_group_number_variable)
        if affinity_group_preference_variable and not isinstance(affinity_group_preference_variable, str):
            raise TypeError("Expected argument 'affinity_group_preference_variable' to be a str")
        pulumi.set(__self__, "affinity_group_preference_variable", affinity_group_preference_variable)
        if affinity_group_preferences and not isinstance(affinity_group_preferences, list):
            raise TypeError("Expected argument 'affinity_group_preferences' to be a list")
        pulumi.set(__self__, "affinity_group_preferences", affinity_group_preferences)
        if console_baud_rate and not isinstance(console_baud_rate, str):
            raise TypeError("Expected argument 'console_baud_rate' to be a str")
        pulumi.set(__self__, "console_baud_rate", console_baud_rate)
        if console_baud_rate_variable and not isinstance(console_baud_rate_variable, str):
            raise TypeError("Expected argument 'console_baud_rate_variable' to be a str")
        pulumi.set(__self__, "console_baud_rate_variable", console_baud_rate_variable)
        if control_session_pps and not isinstance(control_session_pps, int):
            raise TypeError("Expected argument 'control_session_pps' to be a int")
        pulumi.set(__self__, "control_session_pps", control_session_pps)
        if control_session_pps_variable and not isinstance(control_session_pps_variable, str):
            raise TypeError("Expected argument 'control_session_pps_variable' to be a str")
        pulumi.set(__self__, "control_session_pps_variable", control_session_pps_variable)
        if controller_group_list_variable and not isinstance(controller_group_list_variable, str):
            raise TypeError("Expected argument 'controller_group_list_variable' to be a str")
        pulumi.set(__self__, "controller_group_list_variable", controller_group_list_variable)
        if controller_group_lists and not isinstance(controller_group_lists, list):
            raise TypeError("Expected argument 'controller_group_lists' to be a list")
        pulumi.set(__self__, "controller_group_lists", controller_group_lists)
        if description and not isinstance(description, str):
            raise TypeError("Expected argument 'description' to be a str")
        pulumi.set(__self__, "description", description)
        if device_groups and not isinstance(device_groups, list):
            raise TypeError("Expected argument 'device_groups' to be a list")
        pulumi.set(__self__, "device_groups", device_groups)
        if device_groups_variable and not isinstance(device_groups_variable, str):
            raise TypeError("Expected argument 'device_groups_variable' to be a str")
        pulumi.set(__self__, "device_groups_variable", device_groups_variable)
        if device_types and not isinstance(device_types, list):
            raise TypeError("Expected argument 'device_types' to be a list")
        pulumi.set(__self__, "device_types", device_types)
        if enable_mrf_migration and not isinstance(enable_mrf_migration, str):
            raise TypeError("Expected argument 'enable_mrf_migration' to be a str")
        pulumi.set(__self__, "enable_mrf_migration", enable_mrf_migration)
        if enhanced_app_aware_routing and not isinstance(enhanced_app_aware_routing, str):
            raise TypeError("Expected argument 'enhanced_app_aware_routing' to be a str")
        pulumi.set(__self__, "enhanced_app_aware_routing", enhanced_app_aware_routing)
        if enhanced_app_aware_routing_variable and not isinstance(enhanced_app_aware_routing_variable, str):
            raise TypeError("Expected argument 'enhanced_app_aware_routing_variable' to be a str")
        pulumi.set(__self__, "enhanced_app_aware_routing_variable", enhanced_app_aware_routing_variable)
        if geo_fencing and not isinstance(geo_fencing, bool):
            raise TypeError("Expected argument 'geo_fencing' to be a bool")
        pulumi.set(__self__, "geo_fencing", geo_fencing)
        if geo_fencing_range and not isinstance(geo_fencing_range, int):
            raise TypeError("Expected argument 'geo_fencing_range' to be a int")
        pulumi.set(__self__, "geo_fencing_range", geo_fencing_range)
        if geo_fencing_range_variable and not isinstance(geo_fencing_range_variable, str):
            raise TypeError("Expected argument 'geo_fencing_range_variable' to be a str")
        pulumi.set(__self__, "geo_fencing_range_variable", geo_fencing_range_variable)
        if geo_fencing_sms and not isinstance(geo_fencing_sms, bool):
            raise TypeError("Expected argument 'geo_fencing_sms' to be a bool")
        pulumi.set(__self__, "geo_fencing_sms", geo_fencing_sms)
        if geo_fencing_sms_phone_numbers and not isinstance(geo_fencing_sms_phone_numbers, list):
            raise TypeError("Expected argument 'geo_fencing_sms_phone_numbers' to be a list")
        pulumi.set(__self__, "geo_fencing_sms_phone_numbers", geo_fencing_sms_phone_numbers)
        if hostname and not isinstance(hostname, str):
            raise TypeError("Expected argument 'hostname' to be a str")
        pulumi.set(__self__, "hostname", hostname)
        if hostname_variable and not isinstance(hostname_variable, str):
            raise TypeError("Expected argument 'hostname_variable' to be a str")
        pulumi.set(__self__, "hostname_variable", hostname_variable)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if idle_timeout and not isinstance(idle_timeout, int):
            raise TypeError("Expected argument 'idle_timeout' to be a int")
        pulumi.set(__self__, "idle_timeout", idle_timeout)
        if idle_timeout_variable and not isinstance(idle_timeout_variable, str):
            raise TypeError("Expected argument 'idle_timeout_variable' to be a str")
        pulumi.set(__self__, "idle_timeout_variable", idle_timeout_variable)
        if latitude and not isinstance(latitude, float):
            raise TypeError("Expected argument 'latitude' to be a float")
        pulumi.set(__self__, "latitude", latitude)
        if latitude_variable and not isinstance(latitude_variable, str):
            raise TypeError("Expected argument 'latitude_variable' to be a str")
        pulumi.set(__self__, "latitude_variable", latitude_variable)
        if location and not isinstance(location, str):
            raise TypeError("Expected argument 'location' to be a str")
        pulumi.set(__self__, "location", location)
        if location_variable and not isinstance(location_variable, str):
            raise TypeError("Expected argument 'location_variable' to be a str")
        pulumi.set(__self__, "location_variable", location_variable)
        if longitude and not isinstance(longitude, float):
            raise TypeError("Expected argument 'longitude' to be a float")
        pulumi.set(__self__, "longitude", longitude)
        if longitude_variable and not isinstance(longitude_variable, str):
            raise TypeError("Expected argument 'longitude_variable' to be a str")
        pulumi.set(__self__, "longitude_variable", longitude_variable)
        if max_omp_sessions and not isinstance(max_omp_sessions, int):
            raise TypeError("Expected argument 'max_omp_sessions' to be a int")
        pulumi.set(__self__, "max_omp_sessions", max_omp_sessions)
        if max_omp_sessions_variable and not isinstance(max_omp_sessions_variable, str):
            raise TypeError("Expected argument 'max_omp_sessions_variable' to be a str")
        pulumi.set(__self__, "max_omp_sessions_variable", max_omp_sessions_variable)
        if migration_bgp_community and not isinstance(migration_bgp_community, int):
            raise TypeError("Expected argument 'migration_bgp_community' to be a int")
        pulumi.set(__self__, "migration_bgp_community", migration_bgp_community)
        if multi_tenant and not isinstance(multi_tenant, bool):
            raise TypeError("Expected argument 'multi_tenant' to be a bool")
        pulumi.set(__self__, "multi_tenant", multi_tenant)
        if multi_tenant_variable and not isinstance(multi_tenant_variable, str):
            raise TypeError("Expected argument 'multi_tenant_variable' to be a str")
        pulumi.set(__self__, "multi_tenant_variable", multi_tenant_variable)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)
        if object_trackers and not isinstance(object_trackers, list):
            raise TypeError("Expected argument 'object_trackers' to be a list")
        pulumi.set(__self__, "object_trackers", object_trackers)
        if on_demand_tunnel and not isinstance(on_demand_tunnel, bool):
            raise TypeError("Expected argument 'on_demand_tunnel' to be a bool")
        pulumi.set(__self__, "on_demand_tunnel", on_demand_tunnel)
        if on_demand_tunnel_idle_timeout and not isinstance(on_demand_tunnel_idle_timeout, int):
            raise TypeError("Expected argument 'on_demand_tunnel_idle_timeout' to be a int")
        pulumi.set(__self__, "on_demand_tunnel_idle_timeout", on_demand_tunnel_idle_timeout)
        if on_demand_tunnel_idle_timeout_variable and not isinstance(on_demand_tunnel_idle_timeout_variable, str):
            raise TypeError("Expected argument 'on_demand_tunnel_idle_timeout_variable' to be a str")
        pulumi.set(__self__, "on_demand_tunnel_idle_timeout_variable", on_demand_tunnel_idle_timeout_variable)
        if on_demand_tunnel_variable and not isinstance(on_demand_tunnel_variable, str):
            raise TypeError("Expected argument 'on_demand_tunnel_variable' to be a str")
        pulumi.set(__self__, "on_demand_tunnel_variable", on_demand_tunnel_variable)
        if overlay_id and not isinstance(overlay_id, int):
            raise TypeError("Expected argument 'overlay_id' to be a int")
        pulumi.set(__self__, "overlay_id", overlay_id)
        if overlay_id_variable and not isinstance(overlay_id_variable, str):
            raise TypeError("Expected argument 'overlay_id_variable' to be a str")
        pulumi.set(__self__, "overlay_id_variable", overlay_id_variable)
        if port_hopping and not isinstance(port_hopping, bool):
            raise TypeError("Expected argument 'port_hopping' to be a bool")
        pulumi.set(__self__, "port_hopping", port_hopping)
        if port_hopping_variable and not isinstance(port_hopping_variable, str):
            raise TypeError("Expected argument 'port_hopping_variable' to be a str")
        pulumi.set(__self__, "port_hopping_variable", port_hopping_variable)
        if port_offset and not isinstance(port_offset, int):
            raise TypeError("Expected argument 'port_offset' to be a int")
        pulumi.set(__self__, "port_offset", port_offset)
        if port_offset_variable and not isinstance(port_offset_variable, str):
            raise TypeError("Expected argument 'port_offset_variable' to be a str")
        pulumi.set(__self__, "port_offset_variable", port_offset_variable)
        if region_id and not isinstance(region_id, int):
            raise TypeError("Expected argument 'region_id' to be a int")
        pulumi.set(__self__, "region_id", region_id)
        if region_id_variable and not isinstance(region_id_variable, str):
            raise TypeError("Expected argument 'region_id_variable' to be a str")
        pulumi.set(__self__, "region_id_variable", region_id_variable)
        if role and not isinstance(role, str):
            raise TypeError("Expected argument 'role' to be a str")
        pulumi.set(__self__, "role", role)
        if role_variable and not isinstance(role_variable, str):
            raise TypeError("Expected argument 'role_variable' to be a str")
        pulumi.set(__self__, "role_variable", role_variable)
        if secondary_region_id and not isinstance(secondary_region_id, int):
            raise TypeError("Expected argument 'secondary_region_id' to be a int")
        pulumi.set(__self__, "secondary_region_id", secondary_region_id)
        if secondary_region_id_variable and not isinstance(secondary_region_id_variable, str):
            raise TypeError("Expected argument 'secondary_region_id_variable' to be a str")
        pulumi.set(__self__, "secondary_region_id_variable", secondary_region_id_variable)
        if site_id and not isinstance(site_id, int):
            raise TypeError("Expected argument 'site_id' to be a int")
        pulumi.set(__self__, "site_id", site_id)
        if site_id_variable and not isinstance(site_id_variable, str):
            raise TypeError("Expected argument 'site_id_variable' to be a str")
        pulumi.set(__self__, "site_id_variable", site_id_variable)
        if system_description and not isinstance(system_description, str):
            raise TypeError("Expected argument 'system_description' to be a str")
        pulumi.set(__self__, "system_description", system_description)
        if system_description_variable and not isinstance(system_description_variable, str):
            raise TypeError("Expected argument 'system_description_variable' to be a str")
        pulumi.set(__self__, "system_description_variable", system_description_variable)
        if system_ip and not isinstance(system_ip, str):
            raise TypeError("Expected argument 'system_ip' to be a str")
        pulumi.set(__self__, "system_ip", system_ip)
        if system_ip_variable and not isinstance(system_ip_variable, str):
            raise TypeError("Expected argument 'system_ip_variable' to be a str")
        pulumi.set(__self__, "system_ip_variable", system_ip_variable)
        if template_type and not isinstance(template_type, str):
            raise TypeError("Expected argument 'template_type' to be a str")
        pulumi.set(__self__, "template_type", template_type)
        if timezone and not isinstance(timezone, str):
            raise TypeError("Expected argument 'timezone' to be a str")
        pulumi.set(__self__, "timezone", timezone)
        if timezone_variable and not isinstance(timezone_variable, str):
            raise TypeError("Expected argument 'timezone_variable' to be a str")
        pulumi.set(__self__, "timezone_variable", timezone_variable)
        if track_default_gateway and not isinstance(track_default_gateway, bool):
            raise TypeError("Expected argument 'track_default_gateway' to be a bool")
        pulumi.set(__self__, "track_default_gateway", track_default_gateway)
        if track_default_gateway_variable and not isinstance(track_default_gateway_variable, str):
            raise TypeError("Expected argument 'track_default_gateway_variable' to be a str")
        pulumi.set(__self__, "track_default_gateway_variable", track_default_gateway_variable)
        if track_interface_tag and not isinstance(track_interface_tag, int):
            raise TypeError("Expected argument 'track_interface_tag' to be a int")
        pulumi.set(__self__, "track_interface_tag", track_interface_tag)
        if track_interface_tag_variable and not isinstance(track_interface_tag_variable, str):
            raise TypeError("Expected argument 'track_interface_tag_variable' to be a str")
        pulumi.set(__self__, "track_interface_tag_variable", track_interface_tag_variable)
        if track_transport and not isinstance(track_transport, bool):
            raise TypeError("Expected argument 'track_transport' to be a bool")
        pulumi.set(__self__, "track_transport", track_transport)
        if track_transport_variable and not isinstance(track_transport_variable, str):
            raise TypeError("Expected argument 'track_transport_variable' to be a str")
        pulumi.set(__self__, "track_transport_variable", track_transport_variable)
        if trackers and not isinstance(trackers, list):
            raise TypeError("Expected argument 'trackers' to be a list")
        pulumi.set(__self__, "trackers", trackers)
        if transport_gateway and not isinstance(transport_gateway, bool):
            raise TypeError("Expected argument 'transport_gateway' to be a bool")
        pulumi.set(__self__, "transport_gateway", transport_gateway)
        if transport_gateway_variable and not isinstance(transport_gateway_variable, str):
            raise TypeError("Expected argument 'transport_gateway_variable' to be a str")
        pulumi.set(__self__, "transport_gateway_variable", transport_gateway_variable)
        if version and not isinstance(version, int):
            raise TypeError("Expected argument 'version' to be a int")
        pulumi.set(__self__, "version", version)

    @_builtins.property
    @pulumi.getter(name="adminTechOnFailure")
    def admin_tech_on_failure(self) -> _builtins.bool:
        """
        Collect admin-tech before reboot due to daemon failure
        """
        return pulumi.get(self, "admin_tech_on_failure")

    @_builtins.property
    @pulumi.getter(name="adminTechOnFailureVariable")
    def admin_tech_on_failure_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "admin_tech_on_failure_variable")

    @_builtins.property
    @pulumi.getter(name="affinityGroupNumber")
    def affinity_group_number(self) -> _builtins.int:
        """
        Set the affinity group number for router
        """
        return pulumi.get(self, "affinity_group_number")

    @_builtins.property
    @pulumi.getter(name="affinityGroupNumberVariable")
    def affinity_group_number_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "affinity_group_number_variable")

    @_builtins.property
    @pulumi.getter(name="affinityGroupPreferenceVariable")
    def affinity_group_preference_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "affinity_group_preference_variable")

    @_builtins.property
    @pulumi.getter(name="affinityGroupPreferences")
    def affinity_group_preferences(self) -> Sequence[_builtins.int]:
        """
        Set the affinity group preference
        """
        return pulumi.get(self, "affinity_group_preferences")

    @_builtins.property
    @pulumi.getter(name="consoleBaudRate")
    def console_baud_rate(self) -> _builtins.str:
        """
        Set the console baud rate
        """
        return pulumi.get(self, "console_baud_rate")

    @_builtins.property
    @pulumi.getter(name="consoleBaudRateVariable")
    def console_baud_rate_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "console_baud_rate_variable")

    @_builtins.property
    @pulumi.getter(name="controlSessionPps")
    def control_session_pps(self) -> _builtins.int:
        """
        Set the policer rate for control sessions
        """
        return pulumi.get(self, "control_session_pps")

    @_builtins.property
    @pulumi.getter(name="controlSessionPpsVariable")
    def control_session_pps_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "control_session_pps_variable")

    @_builtins.property
    @pulumi.getter(name="controllerGroupListVariable")
    def controller_group_list_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "controller_group_list_variable")

    @_builtins.property
    @pulumi.getter(name="controllerGroupLists")
    def controller_group_lists(self) -> Sequence[_builtins.int]:
        """
        Configure a list of comma-separated device groups
        """
        return pulumi.get(self, "controller_group_lists")

    @_builtins.property
    @pulumi.getter
    def description(self) -> _builtins.str:
        """
        The description of the feature template
        """
        return pulumi.get(self, "description")

    @_builtins.property
    @pulumi.getter(name="deviceGroups")
    def device_groups(self) -> Sequence[_builtins.str]:
        """
        Device groups (Use comma(,) for multiple groups)
        """
        return pulumi.get(self, "device_groups")

    @_builtins.property
    @pulumi.getter(name="deviceGroupsVariable")
    def device_groups_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "device_groups_variable")

    @_builtins.property
    @pulumi.getter(name="deviceTypes")
    def device_types(self) -> Sequence[_builtins.str]:
        """
        List of supported device types
        """
        return pulumi.get(self, "device_types")

    @_builtins.property
    @pulumi.getter(name="enableMrfMigration")
    def enable_mrf_migration(self) -> _builtins.str:
        """
        Enable migration mode to Multi-Region Fabric
        """
        return pulumi.get(self, "enable_mrf_migration")

    @_builtins.property
    @pulumi.getter(name="enhancedAppAwareRouting")
    def enhanced_app_aware_routing(self) -> _builtins.str:
        """
        Enhanced App Aware Routing
        """
        return pulumi.get(self, "enhanced_app_aware_routing")

    @_builtins.property
    @pulumi.getter(name="enhancedAppAwareRoutingVariable")
    def enhanced_app_aware_routing_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "enhanced_app_aware_routing_variable")

    @_builtins.property
    @pulumi.getter(name="geoFencing")
    def geo_fencing(self) -> _builtins.bool:
        """
        Enable Geo fencing
        """
        return pulumi.get(self, "geo_fencing")

    @_builtins.property
    @pulumi.getter(name="geoFencingRange")
    def geo_fencing_range(self) -> _builtins.int:
        """
        Set the device’s geo fencing range
        """
        return pulumi.get(self, "geo_fencing_range")

    @_builtins.property
    @pulumi.getter(name="geoFencingRangeVariable")
    def geo_fencing_range_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "geo_fencing_range_variable")

    @_builtins.property
    @pulumi.getter(name="geoFencingSms")
    def geo_fencing_sms(self) -> _builtins.bool:
        """
        Enable Geo fencing
        """
        return pulumi.get(self, "geo_fencing_sms")

    @_builtins.property
    @pulumi.getter(name="geoFencingSmsPhoneNumbers")
    def geo_fencing_sms_phone_numbers(self) -> Sequence['outputs.GetCiscoSystemFeatureTemplateGeoFencingSmsPhoneNumberResult']:
        """
        Set device’s geo fencing SMS phone number
        """
        return pulumi.get(self, "geo_fencing_sms_phone_numbers")

    @_builtins.property
    @pulumi.getter
    def hostname(self) -> _builtins.str:
        """
        Set the hostname
        """
        return pulumi.get(self, "hostname")

    @_builtins.property
    @pulumi.getter(name="hostnameVariable")
    def hostname_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "hostname_variable")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        The id of the feature template
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter(name="idleTimeout")
    def idle_timeout(self) -> _builtins.int:
        """
        Idle CLI timeout in minutes
        """
        return pulumi.get(self, "idle_timeout")

    @_builtins.property
    @pulumi.getter(name="idleTimeoutVariable")
    def idle_timeout_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "idle_timeout_variable")

    @_builtins.property
    @pulumi.getter
    def latitude(self) -> _builtins.float:
        """
        Set the device’s physical latitude
        """
        return pulumi.get(self, "latitude")

    @_builtins.property
    @pulumi.getter(name="latitudeVariable")
    def latitude_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "latitude_variable")

    @_builtins.property
    @pulumi.getter
    def location(self) -> _builtins.str:
        """
        Set the location of the device
        """
        return pulumi.get(self, "location")

    @_builtins.property
    @pulumi.getter(name="locationVariable")
    def location_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "location_variable")

    @_builtins.property
    @pulumi.getter
    def longitude(self) -> _builtins.float:
        """
        Set the device’s physical longitude
        """
        return pulumi.get(self, "longitude")

    @_builtins.property
    @pulumi.getter(name="longitudeVariable")
    def longitude_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "longitude_variable")

    @_builtins.property
    @pulumi.getter(name="maxOmpSessions")
    def max_omp_sessions(self) -> _builtins.int:
        """
        Set the maximum number of OMP sessions \\n\\n the device can have
        """
        return pulumi.get(self, "max_omp_sessions")

    @_builtins.property
    @pulumi.getter(name="maxOmpSessionsVariable")
    def max_omp_sessions_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "max_omp_sessions_variable")

    @_builtins.property
    @pulumi.getter(name="migrationBgpCommunity")
    def migration_bgp_community(self) -> _builtins.int:
        """
        Set BGP community during migration from BGP-core based network
        """
        return pulumi.get(self, "migration_bgp_community")

    @_builtins.property
    @pulumi.getter(name="multiTenant")
    def multi_tenant(self) -> _builtins.bool:
        """
        Device is multi-tenant
        """
        return pulumi.get(self, "multi_tenant")

    @_builtins.property
    @pulumi.getter(name="multiTenantVariable")
    def multi_tenant_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "multi_tenant_variable")

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        """
        The name of the feature template
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter(name="objectTrackers")
    def object_trackers(self) -> Sequence['outputs.GetCiscoSystemFeatureTemplateObjectTrackerResult']:
        """
        Object Track configuration
        """
        return pulumi.get(self, "object_trackers")

    @_builtins.property
    @pulumi.getter(name="onDemandTunnel")
    def on_demand_tunnel(self) -> _builtins.bool:
        """
        Enable or disable On-demand Tunnel
        """
        return pulumi.get(self, "on_demand_tunnel")

    @_builtins.property
    @pulumi.getter(name="onDemandTunnelIdleTimeout")
    def on_demand_tunnel_idle_timeout(self) -> _builtins.int:
        """
        Idle CLI timeout in minutes
        """
        return pulumi.get(self, "on_demand_tunnel_idle_timeout")

    @_builtins.property
    @pulumi.getter(name="onDemandTunnelIdleTimeoutVariable")
    def on_demand_tunnel_idle_timeout_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "on_demand_tunnel_idle_timeout_variable")

    @_builtins.property
    @pulumi.getter(name="onDemandTunnelVariable")
    def on_demand_tunnel_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "on_demand_tunnel_variable")

    @_builtins.property
    @pulumi.getter(name="overlayId")
    def overlay_id(self) -> _builtins.int:
        """
        Set the Overlay ID
        """
        return pulumi.get(self, "overlay_id")

    @_builtins.property
    @pulumi.getter(name="overlayIdVariable")
    def overlay_id_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "overlay_id_variable")

    @_builtins.property
    @pulumi.getter(name="portHopping")
    def port_hopping(self) -> _builtins.bool:
        """
        Enable port hopping
        """
        return pulumi.get(self, "port_hopping")

    @_builtins.property
    @pulumi.getter(name="portHoppingVariable")
    def port_hopping_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "port_hopping_variable")

    @_builtins.property
    @pulumi.getter(name="portOffset")
    def port_offset(self) -> _builtins.int:
        """
        Set the TLOC port offset when multiple devices are behind a NAT
        """
        return pulumi.get(self, "port_offset")

    @_builtins.property
    @pulumi.getter(name="portOffsetVariable")
    def port_offset_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "port_offset_variable")

    @_builtins.property
    @pulumi.getter(name="regionId")
    def region_id(self) -> _builtins.int:
        """
        Set region ID
        """
        return pulumi.get(self, "region_id")

    @_builtins.property
    @pulumi.getter(name="regionIdVariable")
    def region_id_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "region_id_variable")

    @_builtins.property
    @pulumi.getter
    def role(self) -> _builtins.str:
        """
        Set the role for router
        """
        return pulumi.get(self, "role")

    @_builtins.property
    @pulumi.getter(name="roleVariable")
    def role_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "role_variable")

    @_builtins.property
    @pulumi.getter(name="secondaryRegionId")
    def secondary_region_id(self) -> _builtins.int:
        """
        Set secondary region ID
        """
        return pulumi.get(self, "secondary_region_id")

    @_builtins.property
    @pulumi.getter(name="secondaryRegionIdVariable")
    def secondary_region_id_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "secondary_region_id_variable")

    @_builtins.property
    @pulumi.getter(name="siteId")
    def site_id(self) -> _builtins.int:
        """
        Set the site identifier
        """
        return pulumi.get(self, "site_id")

    @_builtins.property
    @pulumi.getter(name="siteIdVariable")
    def site_id_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "site_id_variable")

    @_builtins.property
    @pulumi.getter(name="systemDescription")
    def system_description(self) -> _builtins.str:
        """
        Set a text description of the device
        """
        return pulumi.get(self, "system_description")

    @_builtins.property
    @pulumi.getter(name="systemDescriptionVariable")
    def system_description_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "system_description_variable")

    @_builtins.property
    @pulumi.getter(name="systemIp")
    def system_ip(self) -> _builtins.str:
        """
        Set the system IP address
        """
        return pulumi.get(self, "system_ip")

    @_builtins.property
    @pulumi.getter(name="systemIpVariable")
    def system_ip_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "system_ip_variable")

    @_builtins.property
    @pulumi.getter(name="templateType")
    def template_type(self) -> _builtins.str:
        """
        The template type
        """
        return pulumi.get(self, "template_type")

    @_builtins.property
    @pulumi.getter
    def timezone(self) -> _builtins.str:
        """
        Set the timezone
        """
        return pulumi.get(self, "timezone")

    @_builtins.property
    @pulumi.getter(name="timezoneVariable")
    def timezone_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "timezone_variable")

    @_builtins.property
    @pulumi.getter(name="trackDefaultGateway")
    def track_default_gateway(self) -> _builtins.bool:
        """
        Enable or disable default gateway tracking
        """
        return pulumi.get(self, "track_default_gateway")

    @_builtins.property
    @pulumi.getter(name="trackDefaultGatewayVariable")
    def track_default_gateway_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "track_default_gateway_variable")

    @_builtins.property
    @pulumi.getter(name="trackInterfaceTag")
    def track_interface_tag(self) -> _builtins.int:
        """
        OMP Tag attached to routes based on interface tracking
        """
        return pulumi.get(self, "track_interface_tag")

    @_builtins.property
    @pulumi.getter(name="trackInterfaceTagVariable")
    def track_interface_tag_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "track_interface_tag_variable")

    @_builtins.property
    @pulumi.getter(name="trackTransport")
    def track_transport(self) -> _builtins.bool:
        """
        Configure tracking of transport
        """
        return pulumi.get(self, "track_transport")

    @_builtins.property
    @pulumi.getter(name="trackTransportVariable")
    def track_transport_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "track_transport_variable")

    @_builtins.property
    @pulumi.getter
    def trackers(self) -> Sequence['outputs.GetCiscoSystemFeatureTemplateTrackerResult']:
        """
        Tracker configuration
        """
        return pulumi.get(self, "trackers")

    @_builtins.property
    @pulumi.getter(name="transportGateway")
    def transport_gateway(self) -> _builtins.bool:
        """
        Enable transport gateway
        """
        return pulumi.get(self, "transport_gateway")

    @_builtins.property
    @pulumi.getter(name="transportGatewayVariable")
    def transport_gateway_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "transport_gateway_variable")

    @_builtins.property
    @pulumi.getter
    def version(self) -> _builtins.int:
        """
        The version of the feature template
        """
        return pulumi.get(self, "version")


class AwaitableGetCiscoSystemFeatureTemplateResult(GetCiscoSystemFeatureTemplateResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetCiscoSystemFeatureTemplateResult(
            admin_tech_on_failure=self.admin_tech_on_failure,
            admin_tech_on_failure_variable=self.admin_tech_on_failure_variable,
            affinity_group_number=self.affinity_group_number,
            affinity_group_number_variable=self.affinity_group_number_variable,
            affinity_group_preference_variable=self.affinity_group_preference_variable,
            affinity_group_preferences=self.affinity_group_preferences,
            console_baud_rate=self.console_baud_rate,
            console_baud_rate_variable=self.console_baud_rate_variable,
            control_session_pps=self.control_session_pps,
            control_session_pps_variable=self.control_session_pps_variable,
            controller_group_list_variable=self.controller_group_list_variable,
            controller_group_lists=self.controller_group_lists,
            description=self.description,
            device_groups=self.device_groups,
            device_groups_variable=self.device_groups_variable,
            device_types=self.device_types,
            enable_mrf_migration=self.enable_mrf_migration,
            enhanced_app_aware_routing=self.enhanced_app_aware_routing,
            enhanced_app_aware_routing_variable=self.enhanced_app_aware_routing_variable,
            geo_fencing=self.geo_fencing,
            geo_fencing_range=self.geo_fencing_range,
            geo_fencing_range_variable=self.geo_fencing_range_variable,
            geo_fencing_sms=self.geo_fencing_sms,
            geo_fencing_sms_phone_numbers=self.geo_fencing_sms_phone_numbers,
            hostname=self.hostname,
            hostname_variable=self.hostname_variable,
            id=self.id,
            idle_timeout=self.idle_timeout,
            idle_timeout_variable=self.idle_timeout_variable,
            latitude=self.latitude,
            latitude_variable=self.latitude_variable,
            location=self.location,
            location_variable=self.location_variable,
            longitude=self.longitude,
            longitude_variable=self.longitude_variable,
            max_omp_sessions=self.max_omp_sessions,
            max_omp_sessions_variable=self.max_omp_sessions_variable,
            migration_bgp_community=self.migration_bgp_community,
            multi_tenant=self.multi_tenant,
            multi_tenant_variable=self.multi_tenant_variable,
            name=self.name,
            object_trackers=self.object_trackers,
            on_demand_tunnel=self.on_demand_tunnel,
            on_demand_tunnel_idle_timeout=self.on_demand_tunnel_idle_timeout,
            on_demand_tunnel_idle_timeout_variable=self.on_demand_tunnel_idle_timeout_variable,
            on_demand_tunnel_variable=self.on_demand_tunnel_variable,
            overlay_id=self.overlay_id,
            overlay_id_variable=self.overlay_id_variable,
            port_hopping=self.port_hopping,
            port_hopping_variable=self.port_hopping_variable,
            port_offset=self.port_offset,
            port_offset_variable=self.port_offset_variable,
            region_id=self.region_id,
            region_id_variable=self.region_id_variable,
            role=self.role,
            role_variable=self.role_variable,
            secondary_region_id=self.secondary_region_id,
            secondary_region_id_variable=self.secondary_region_id_variable,
            site_id=self.site_id,
            site_id_variable=self.site_id_variable,
            system_description=self.system_description,
            system_description_variable=self.system_description_variable,
            system_ip=self.system_ip,
            system_ip_variable=self.system_ip_variable,
            template_type=self.template_type,
            timezone=self.timezone,
            timezone_variable=self.timezone_variable,
            track_default_gateway=self.track_default_gateway,
            track_default_gateway_variable=self.track_default_gateway_variable,
            track_interface_tag=self.track_interface_tag,
            track_interface_tag_variable=self.track_interface_tag_variable,
            track_transport=self.track_transport,
            track_transport_variable=self.track_transport_variable,
            trackers=self.trackers,
            transport_gateway=self.transport_gateway,
            transport_gateway_variable=self.transport_gateway_variable,
            version=self.version)


def get_cisco_system_feature_template(id: Optional[_builtins.str] = None,
                                      name: Optional[_builtins.str] = None,
                                      opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetCiscoSystemFeatureTemplateResult:
    """
    This data source can read the Cisco System feature template.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_sdwan as sdwan

    example = sdwan.get_cisco_system_feature_template(id="f6b2c44c-693c-4763-b010-895aa3d236bd")
    ```


    :param _builtins.str id: The id of the feature template
    :param _builtins.str name: The name of the feature template
    """
    __args__ = dict()
    __args__['id'] = id
    __args__['name'] = name
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('sdwan:index/getCiscoSystemFeatureTemplate:getCiscoSystemFeatureTemplate', __args__, opts=opts, typ=GetCiscoSystemFeatureTemplateResult).value

    return AwaitableGetCiscoSystemFeatureTemplateResult(
        admin_tech_on_failure=pulumi.get(__ret__, 'admin_tech_on_failure'),
        admin_tech_on_failure_variable=pulumi.get(__ret__, 'admin_tech_on_failure_variable'),
        affinity_group_number=pulumi.get(__ret__, 'affinity_group_number'),
        affinity_group_number_variable=pulumi.get(__ret__, 'affinity_group_number_variable'),
        affinity_group_preference_variable=pulumi.get(__ret__, 'affinity_group_preference_variable'),
        affinity_group_preferences=pulumi.get(__ret__, 'affinity_group_preferences'),
        console_baud_rate=pulumi.get(__ret__, 'console_baud_rate'),
        console_baud_rate_variable=pulumi.get(__ret__, 'console_baud_rate_variable'),
        control_session_pps=pulumi.get(__ret__, 'control_session_pps'),
        control_session_pps_variable=pulumi.get(__ret__, 'control_session_pps_variable'),
        controller_group_list_variable=pulumi.get(__ret__, 'controller_group_list_variable'),
        controller_group_lists=pulumi.get(__ret__, 'controller_group_lists'),
        description=pulumi.get(__ret__, 'description'),
        device_groups=pulumi.get(__ret__, 'device_groups'),
        device_groups_variable=pulumi.get(__ret__, 'device_groups_variable'),
        device_types=pulumi.get(__ret__, 'device_types'),
        enable_mrf_migration=pulumi.get(__ret__, 'enable_mrf_migration'),
        enhanced_app_aware_routing=pulumi.get(__ret__, 'enhanced_app_aware_routing'),
        enhanced_app_aware_routing_variable=pulumi.get(__ret__, 'enhanced_app_aware_routing_variable'),
        geo_fencing=pulumi.get(__ret__, 'geo_fencing'),
        geo_fencing_range=pulumi.get(__ret__, 'geo_fencing_range'),
        geo_fencing_range_variable=pulumi.get(__ret__, 'geo_fencing_range_variable'),
        geo_fencing_sms=pulumi.get(__ret__, 'geo_fencing_sms'),
        geo_fencing_sms_phone_numbers=pulumi.get(__ret__, 'geo_fencing_sms_phone_numbers'),
        hostname=pulumi.get(__ret__, 'hostname'),
        hostname_variable=pulumi.get(__ret__, 'hostname_variable'),
        id=pulumi.get(__ret__, 'id'),
        idle_timeout=pulumi.get(__ret__, 'idle_timeout'),
        idle_timeout_variable=pulumi.get(__ret__, 'idle_timeout_variable'),
        latitude=pulumi.get(__ret__, 'latitude'),
        latitude_variable=pulumi.get(__ret__, 'latitude_variable'),
        location=pulumi.get(__ret__, 'location'),
        location_variable=pulumi.get(__ret__, 'location_variable'),
        longitude=pulumi.get(__ret__, 'longitude'),
        longitude_variable=pulumi.get(__ret__, 'longitude_variable'),
        max_omp_sessions=pulumi.get(__ret__, 'max_omp_sessions'),
        max_omp_sessions_variable=pulumi.get(__ret__, 'max_omp_sessions_variable'),
        migration_bgp_community=pulumi.get(__ret__, 'migration_bgp_community'),
        multi_tenant=pulumi.get(__ret__, 'multi_tenant'),
        multi_tenant_variable=pulumi.get(__ret__, 'multi_tenant_variable'),
        name=pulumi.get(__ret__, 'name'),
        object_trackers=pulumi.get(__ret__, 'object_trackers'),
        on_demand_tunnel=pulumi.get(__ret__, 'on_demand_tunnel'),
        on_demand_tunnel_idle_timeout=pulumi.get(__ret__, 'on_demand_tunnel_idle_timeout'),
        on_demand_tunnel_idle_timeout_variable=pulumi.get(__ret__, 'on_demand_tunnel_idle_timeout_variable'),
        on_demand_tunnel_variable=pulumi.get(__ret__, 'on_demand_tunnel_variable'),
        overlay_id=pulumi.get(__ret__, 'overlay_id'),
        overlay_id_variable=pulumi.get(__ret__, 'overlay_id_variable'),
        port_hopping=pulumi.get(__ret__, 'port_hopping'),
        port_hopping_variable=pulumi.get(__ret__, 'port_hopping_variable'),
        port_offset=pulumi.get(__ret__, 'port_offset'),
        port_offset_variable=pulumi.get(__ret__, 'port_offset_variable'),
        region_id=pulumi.get(__ret__, 'region_id'),
        region_id_variable=pulumi.get(__ret__, 'region_id_variable'),
        role=pulumi.get(__ret__, 'role'),
        role_variable=pulumi.get(__ret__, 'role_variable'),
        secondary_region_id=pulumi.get(__ret__, 'secondary_region_id'),
        secondary_region_id_variable=pulumi.get(__ret__, 'secondary_region_id_variable'),
        site_id=pulumi.get(__ret__, 'site_id'),
        site_id_variable=pulumi.get(__ret__, 'site_id_variable'),
        system_description=pulumi.get(__ret__, 'system_description'),
        system_description_variable=pulumi.get(__ret__, 'system_description_variable'),
        system_ip=pulumi.get(__ret__, 'system_ip'),
        system_ip_variable=pulumi.get(__ret__, 'system_ip_variable'),
        template_type=pulumi.get(__ret__, 'template_type'),
        timezone=pulumi.get(__ret__, 'timezone'),
        timezone_variable=pulumi.get(__ret__, 'timezone_variable'),
        track_default_gateway=pulumi.get(__ret__, 'track_default_gateway'),
        track_default_gateway_variable=pulumi.get(__ret__, 'track_default_gateway_variable'),
        track_interface_tag=pulumi.get(__ret__, 'track_interface_tag'),
        track_interface_tag_variable=pulumi.get(__ret__, 'track_interface_tag_variable'),
        track_transport=pulumi.get(__ret__, 'track_transport'),
        track_transport_variable=pulumi.get(__ret__, 'track_transport_variable'),
        trackers=pulumi.get(__ret__, 'trackers'),
        transport_gateway=pulumi.get(__ret__, 'transport_gateway'),
        transport_gateway_variable=pulumi.get(__ret__, 'transport_gateway_variable'),
        version=pulumi.get(__ret__, 'version'))
def get_cisco_system_feature_template_output(id: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                             name: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                             opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetCiscoSystemFeatureTemplateResult]:
    """
    This data source can read the Cisco System feature template.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_sdwan as sdwan

    example = sdwan.get_cisco_system_feature_template(id="f6b2c44c-693c-4763-b010-895aa3d236bd")
    ```


    :param _builtins.str id: The id of the feature template
    :param _builtins.str name: The name of the feature template
    """
    __args__ = dict()
    __args__['id'] = id
    __args__['name'] = name
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('sdwan:index/getCiscoSystemFeatureTemplate:getCiscoSystemFeatureTemplate', __args__, opts=opts, typ=GetCiscoSystemFeatureTemplateResult)
    return __ret__.apply(lambda __response__: GetCiscoSystemFeatureTemplateResult(
        admin_tech_on_failure=pulumi.get(__response__, 'admin_tech_on_failure'),
        admin_tech_on_failure_variable=pulumi.get(__response__, 'admin_tech_on_failure_variable'),
        affinity_group_number=pulumi.get(__response__, 'affinity_group_number'),
        affinity_group_number_variable=pulumi.get(__response__, 'affinity_group_number_variable'),
        affinity_group_preference_variable=pulumi.get(__response__, 'affinity_group_preference_variable'),
        affinity_group_preferences=pulumi.get(__response__, 'affinity_group_preferences'),
        console_baud_rate=pulumi.get(__response__, 'console_baud_rate'),
        console_baud_rate_variable=pulumi.get(__response__, 'console_baud_rate_variable'),
        control_session_pps=pulumi.get(__response__, 'control_session_pps'),
        control_session_pps_variable=pulumi.get(__response__, 'control_session_pps_variable'),
        controller_group_list_variable=pulumi.get(__response__, 'controller_group_list_variable'),
        controller_group_lists=pulumi.get(__response__, 'controller_group_lists'),
        description=pulumi.get(__response__, 'description'),
        device_groups=pulumi.get(__response__, 'device_groups'),
        device_groups_variable=pulumi.get(__response__, 'device_groups_variable'),
        device_types=pulumi.get(__response__, 'device_types'),
        enable_mrf_migration=pulumi.get(__response__, 'enable_mrf_migration'),
        enhanced_app_aware_routing=pulumi.get(__response__, 'enhanced_app_aware_routing'),
        enhanced_app_aware_routing_variable=pulumi.get(__response__, 'enhanced_app_aware_routing_variable'),
        geo_fencing=pulumi.get(__response__, 'geo_fencing'),
        geo_fencing_range=pulumi.get(__response__, 'geo_fencing_range'),
        geo_fencing_range_variable=pulumi.get(__response__, 'geo_fencing_range_variable'),
        geo_fencing_sms=pulumi.get(__response__, 'geo_fencing_sms'),
        geo_fencing_sms_phone_numbers=pulumi.get(__response__, 'geo_fencing_sms_phone_numbers'),
        hostname=pulumi.get(__response__, 'hostname'),
        hostname_variable=pulumi.get(__response__, 'hostname_variable'),
        id=pulumi.get(__response__, 'id'),
        idle_timeout=pulumi.get(__response__, 'idle_timeout'),
        idle_timeout_variable=pulumi.get(__response__, 'idle_timeout_variable'),
        latitude=pulumi.get(__response__, 'latitude'),
        latitude_variable=pulumi.get(__response__, 'latitude_variable'),
        location=pulumi.get(__response__, 'location'),
        location_variable=pulumi.get(__response__, 'location_variable'),
        longitude=pulumi.get(__response__, 'longitude'),
        longitude_variable=pulumi.get(__response__, 'longitude_variable'),
        max_omp_sessions=pulumi.get(__response__, 'max_omp_sessions'),
        max_omp_sessions_variable=pulumi.get(__response__, 'max_omp_sessions_variable'),
        migration_bgp_community=pulumi.get(__response__, 'migration_bgp_community'),
        multi_tenant=pulumi.get(__response__, 'multi_tenant'),
        multi_tenant_variable=pulumi.get(__response__, 'multi_tenant_variable'),
        name=pulumi.get(__response__, 'name'),
        object_trackers=pulumi.get(__response__, 'object_trackers'),
        on_demand_tunnel=pulumi.get(__response__, 'on_demand_tunnel'),
        on_demand_tunnel_idle_timeout=pulumi.get(__response__, 'on_demand_tunnel_idle_timeout'),
        on_demand_tunnel_idle_timeout_variable=pulumi.get(__response__, 'on_demand_tunnel_idle_timeout_variable'),
        on_demand_tunnel_variable=pulumi.get(__response__, 'on_demand_tunnel_variable'),
        overlay_id=pulumi.get(__response__, 'overlay_id'),
        overlay_id_variable=pulumi.get(__response__, 'overlay_id_variable'),
        port_hopping=pulumi.get(__response__, 'port_hopping'),
        port_hopping_variable=pulumi.get(__response__, 'port_hopping_variable'),
        port_offset=pulumi.get(__response__, 'port_offset'),
        port_offset_variable=pulumi.get(__response__, 'port_offset_variable'),
        region_id=pulumi.get(__response__, 'region_id'),
        region_id_variable=pulumi.get(__response__, 'region_id_variable'),
        role=pulumi.get(__response__, 'role'),
        role_variable=pulumi.get(__response__, 'role_variable'),
        secondary_region_id=pulumi.get(__response__, 'secondary_region_id'),
        secondary_region_id_variable=pulumi.get(__response__, 'secondary_region_id_variable'),
        site_id=pulumi.get(__response__, 'site_id'),
        site_id_variable=pulumi.get(__response__, 'site_id_variable'),
        system_description=pulumi.get(__response__, 'system_description'),
        system_description_variable=pulumi.get(__response__, 'system_description_variable'),
        system_ip=pulumi.get(__response__, 'system_ip'),
        system_ip_variable=pulumi.get(__response__, 'system_ip_variable'),
        template_type=pulumi.get(__response__, 'template_type'),
        timezone=pulumi.get(__response__, 'timezone'),
        timezone_variable=pulumi.get(__response__, 'timezone_variable'),
        track_default_gateway=pulumi.get(__response__, 'track_default_gateway'),
        track_default_gateway_variable=pulumi.get(__response__, 'track_default_gateway_variable'),
        track_interface_tag=pulumi.get(__response__, 'track_interface_tag'),
        track_interface_tag_variable=pulumi.get(__response__, 'track_interface_tag_variable'),
        track_transport=pulumi.get(__response__, 'track_transport'),
        track_transport_variable=pulumi.get(__response__, 'track_transport_variable'),
        trackers=pulumi.get(__response__, 'trackers'),
        transport_gateway=pulumi.get(__response__, 'transport_gateway'),
        transport_gateway_variable=pulumi.get(__response__, 'transport_gateway_variable'),
        version=pulumi.get(__response__, 'version')))
