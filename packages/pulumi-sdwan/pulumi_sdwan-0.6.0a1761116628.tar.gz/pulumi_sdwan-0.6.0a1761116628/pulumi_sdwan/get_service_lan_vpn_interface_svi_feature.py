# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities
from . import outputs

__all__ = [
    'GetServiceLanVpnInterfaceSviFeatureResult',
    'AwaitableGetServiceLanVpnInterfaceSviFeatureResult',
    'get_service_lan_vpn_interface_svi_feature',
    'get_service_lan_vpn_interface_svi_feature_output',
]

@pulumi.output_type
class GetServiceLanVpnInterfaceSviFeatureResult:
    """
    A collection of values returned by getServiceLanVpnInterfaceSviFeature.
    """
    def __init__(__self__, acl_ipv4_egress_feature_id=None, acl_ipv4_ingress_feature_id=None, acl_ipv6_egress_feature_id=None, acl_ipv6_ingress_feature_id=None, arp_timeout=None, arp_timeout_variable=None, arps=None, description=None, enable_dhcpv6=None, enable_dhcpv6_variable=None, feature_profile_id=None, icmp_redirect_disable=None, icmp_redirect_disable_variable=None, id=None, interface_description=None, interface_description_variable=None, interface_mtu=None, interface_mtu_variable=None, interface_name=None, interface_name_variable=None, ip_directed_broadcast=None, ip_directed_broadcast_variable=None, ip_mtu=None, ip_mtu_variable=None, ipv4_address=None, ipv4_address_variable=None, ipv4_dhcp_helpers=None, ipv4_dhcp_helpers_variable=None, ipv4_secondary_addresses=None, ipv4_subnet_mask=None, ipv4_subnet_mask_variable=None, ipv4_vrrps=None, ipv6_address=None, ipv6_address_variable=None, ipv6_dhcp_helpers=None, ipv6_secondary_addresses=None, ipv6_vrrps=None, name=None, service_lan_vpn_feature_id=None, shutdown=None, shutdown_variable=None, tcp_mss=None, tcp_mss_variable=None, version=None):
        if acl_ipv4_egress_feature_id and not isinstance(acl_ipv4_egress_feature_id, str):
            raise TypeError("Expected argument 'acl_ipv4_egress_feature_id' to be a str")
        pulumi.set(__self__, "acl_ipv4_egress_feature_id", acl_ipv4_egress_feature_id)
        if acl_ipv4_ingress_feature_id and not isinstance(acl_ipv4_ingress_feature_id, str):
            raise TypeError("Expected argument 'acl_ipv4_ingress_feature_id' to be a str")
        pulumi.set(__self__, "acl_ipv4_ingress_feature_id", acl_ipv4_ingress_feature_id)
        if acl_ipv6_egress_feature_id and not isinstance(acl_ipv6_egress_feature_id, str):
            raise TypeError("Expected argument 'acl_ipv6_egress_feature_id' to be a str")
        pulumi.set(__self__, "acl_ipv6_egress_feature_id", acl_ipv6_egress_feature_id)
        if acl_ipv6_ingress_feature_id and not isinstance(acl_ipv6_ingress_feature_id, str):
            raise TypeError("Expected argument 'acl_ipv6_ingress_feature_id' to be a str")
        pulumi.set(__self__, "acl_ipv6_ingress_feature_id", acl_ipv6_ingress_feature_id)
        if arp_timeout and not isinstance(arp_timeout, int):
            raise TypeError("Expected argument 'arp_timeout' to be a int")
        pulumi.set(__self__, "arp_timeout", arp_timeout)
        if arp_timeout_variable and not isinstance(arp_timeout_variable, str):
            raise TypeError("Expected argument 'arp_timeout_variable' to be a str")
        pulumi.set(__self__, "arp_timeout_variable", arp_timeout_variable)
        if arps and not isinstance(arps, list):
            raise TypeError("Expected argument 'arps' to be a list")
        pulumi.set(__self__, "arps", arps)
        if description and not isinstance(description, str):
            raise TypeError("Expected argument 'description' to be a str")
        pulumi.set(__self__, "description", description)
        if enable_dhcpv6 and not isinstance(enable_dhcpv6, bool):
            raise TypeError("Expected argument 'enable_dhcpv6' to be a bool")
        pulumi.set(__self__, "enable_dhcpv6", enable_dhcpv6)
        if enable_dhcpv6_variable and not isinstance(enable_dhcpv6_variable, str):
            raise TypeError("Expected argument 'enable_dhcpv6_variable' to be a str")
        pulumi.set(__self__, "enable_dhcpv6_variable", enable_dhcpv6_variable)
        if feature_profile_id and not isinstance(feature_profile_id, str):
            raise TypeError("Expected argument 'feature_profile_id' to be a str")
        pulumi.set(__self__, "feature_profile_id", feature_profile_id)
        if icmp_redirect_disable and not isinstance(icmp_redirect_disable, bool):
            raise TypeError("Expected argument 'icmp_redirect_disable' to be a bool")
        pulumi.set(__self__, "icmp_redirect_disable", icmp_redirect_disable)
        if icmp_redirect_disable_variable and not isinstance(icmp_redirect_disable_variable, str):
            raise TypeError("Expected argument 'icmp_redirect_disable_variable' to be a str")
        pulumi.set(__self__, "icmp_redirect_disable_variable", icmp_redirect_disable_variable)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if interface_description and not isinstance(interface_description, str):
            raise TypeError("Expected argument 'interface_description' to be a str")
        pulumi.set(__self__, "interface_description", interface_description)
        if interface_description_variable and not isinstance(interface_description_variable, str):
            raise TypeError("Expected argument 'interface_description_variable' to be a str")
        pulumi.set(__self__, "interface_description_variable", interface_description_variable)
        if interface_mtu and not isinstance(interface_mtu, int):
            raise TypeError("Expected argument 'interface_mtu' to be a int")
        pulumi.set(__self__, "interface_mtu", interface_mtu)
        if interface_mtu_variable and not isinstance(interface_mtu_variable, str):
            raise TypeError("Expected argument 'interface_mtu_variable' to be a str")
        pulumi.set(__self__, "interface_mtu_variable", interface_mtu_variable)
        if interface_name and not isinstance(interface_name, str):
            raise TypeError("Expected argument 'interface_name' to be a str")
        pulumi.set(__self__, "interface_name", interface_name)
        if interface_name_variable and not isinstance(interface_name_variable, str):
            raise TypeError("Expected argument 'interface_name_variable' to be a str")
        pulumi.set(__self__, "interface_name_variable", interface_name_variable)
        if ip_directed_broadcast and not isinstance(ip_directed_broadcast, bool):
            raise TypeError("Expected argument 'ip_directed_broadcast' to be a bool")
        pulumi.set(__self__, "ip_directed_broadcast", ip_directed_broadcast)
        if ip_directed_broadcast_variable and not isinstance(ip_directed_broadcast_variable, str):
            raise TypeError("Expected argument 'ip_directed_broadcast_variable' to be a str")
        pulumi.set(__self__, "ip_directed_broadcast_variable", ip_directed_broadcast_variable)
        if ip_mtu and not isinstance(ip_mtu, int):
            raise TypeError("Expected argument 'ip_mtu' to be a int")
        pulumi.set(__self__, "ip_mtu", ip_mtu)
        if ip_mtu_variable and not isinstance(ip_mtu_variable, str):
            raise TypeError("Expected argument 'ip_mtu_variable' to be a str")
        pulumi.set(__self__, "ip_mtu_variable", ip_mtu_variable)
        if ipv4_address and not isinstance(ipv4_address, str):
            raise TypeError("Expected argument 'ipv4_address' to be a str")
        pulumi.set(__self__, "ipv4_address", ipv4_address)
        if ipv4_address_variable and not isinstance(ipv4_address_variable, str):
            raise TypeError("Expected argument 'ipv4_address_variable' to be a str")
        pulumi.set(__self__, "ipv4_address_variable", ipv4_address_variable)
        if ipv4_dhcp_helpers and not isinstance(ipv4_dhcp_helpers, list):
            raise TypeError("Expected argument 'ipv4_dhcp_helpers' to be a list")
        pulumi.set(__self__, "ipv4_dhcp_helpers", ipv4_dhcp_helpers)
        if ipv4_dhcp_helpers_variable and not isinstance(ipv4_dhcp_helpers_variable, str):
            raise TypeError("Expected argument 'ipv4_dhcp_helpers_variable' to be a str")
        pulumi.set(__self__, "ipv4_dhcp_helpers_variable", ipv4_dhcp_helpers_variable)
        if ipv4_secondary_addresses and not isinstance(ipv4_secondary_addresses, list):
            raise TypeError("Expected argument 'ipv4_secondary_addresses' to be a list")
        pulumi.set(__self__, "ipv4_secondary_addresses", ipv4_secondary_addresses)
        if ipv4_subnet_mask and not isinstance(ipv4_subnet_mask, str):
            raise TypeError("Expected argument 'ipv4_subnet_mask' to be a str")
        pulumi.set(__self__, "ipv4_subnet_mask", ipv4_subnet_mask)
        if ipv4_subnet_mask_variable and not isinstance(ipv4_subnet_mask_variable, str):
            raise TypeError("Expected argument 'ipv4_subnet_mask_variable' to be a str")
        pulumi.set(__self__, "ipv4_subnet_mask_variable", ipv4_subnet_mask_variable)
        if ipv4_vrrps and not isinstance(ipv4_vrrps, list):
            raise TypeError("Expected argument 'ipv4_vrrps' to be a list")
        pulumi.set(__self__, "ipv4_vrrps", ipv4_vrrps)
        if ipv6_address and not isinstance(ipv6_address, str):
            raise TypeError("Expected argument 'ipv6_address' to be a str")
        pulumi.set(__self__, "ipv6_address", ipv6_address)
        if ipv6_address_variable and not isinstance(ipv6_address_variable, str):
            raise TypeError("Expected argument 'ipv6_address_variable' to be a str")
        pulumi.set(__self__, "ipv6_address_variable", ipv6_address_variable)
        if ipv6_dhcp_helpers and not isinstance(ipv6_dhcp_helpers, list):
            raise TypeError("Expected argument 'ipv6_dhcp_helpers' to be a list")
        pulumi.set(__self__, "ipv6_dhcp_helpers", ipv6_dhcp_helpers)
        if ipv6_secondary_addresses and not isinstance(ipv6_secondary_addresses, list):
            raise TypeError("Expected argument 'ipv6_secondary_addresses' to be a list")
        pulumi.set(__self__, "ipv6_secondary_addresses", ipv6_secondary_addresses)
        if ipv6_vrrps and not isinstance(ipv6_vrrps, list):
            raise TypeError("Expected argument 'ipv6_vrrps' to be a list")
        pulumi.set(__self__, "ipv6_vrrps", ipv6_vrrps)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)
        if service_lan_vpn_feature_id and not isinstance(service_lan_vpn_feature_id, str):
            raise TypeError("Expected argument 'service_lan_vpn_feature_id' to be a str")
        pulumi.set(__self__, "service_lan_vpn_feature_id", service_lan_vpn_feature_id)
        if shutdown and not isinstance(shutdown, bool):
            raise TypeError("Expected argument 'shutdown' to be a bool")
        pulumi.set(__self__, "shutdown", shutdown)
        if shutdown_variable and not isinstance(shutdown_variable, str):
            raise TypeError("Expected argument 'shutdown_variable' to be a str")
        pulumi.set(__self__, "shutdown_variable", shutdown_variable)
        if tcp_mss and not isinstance(tcp_mss, int):
            raise TypeError("Expected argument 'tcp_mss' to be a int")
        pulumi.set(__self__, "tcp_mss", tcp_mss)
        if tcp_mss_variable and not isinstance(tcp_mss_variable, str):
            raise TypeError("Expected argument 'tcp_mss_variable' to be a str")
        pulumi.set(__self__, "tcp_mss_variable", tcp_mss_variable)
        if version and not isinstance(version, int):
            raise TypeError("Expected argument 'version' to be a int")
        pulumi.set(__self__, "version", version)

    @_builtins.property
    @pulumi.getter(name="aclIpv4EgressFeatureId")
    def acl_ipv4_egress_feature_id(self) -> _builtins.str:
        return pulumi.get(self, "acl_ipv4_egress_feature_id")

    @_builtins.property
    @pulumi.getter(name="aclIpv4IngressFeatureId")
    def acl_ipv4_ingress_feature_id(self) -> _builtins.str:
        return pulumi.get(self, "acl_ipv4_ingress_feature_id")

    @_builtins.property
    @pulumi.getter(name="aclIpv6EgressFeatureId")
    def acl_ipv6_egress_feature_id(self) -> _builtins.str:
        return pulumi.get(self, "acl_ipv6_egress_feature_id")

    @_builtins.property
    @pulumi.getter(name="aclIpv6IngressFeatureId")
    def acl_ipv6_ingress_feature_id(self) -> _builtins.str:
        return pulumi.get(self, "acl_ipv6_ingress_feature_id")

    @_builtins.property
    @pulumi.getter(name="arpTimeout")
    def arp_timeout(self) -> _builtins.int:
        """
        Timeout value for dynamically learned ARP entries, \\n\\n seconds
        """
        return pulumi.get(self, "arp_timeout")

    @_builtins.property
    @pulumi.getter(name="arpTimeoutVariable")
    def arp_timeout_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "arp_timeout_variable")

    @_builtins.property
    @pulumi.getter
    def arps(self) -> Sequence['outputs.GetServiceLanVpnInterfaceSviFeatureArpResult']:
        """
        Configure static ARP entries
        """
        return pulumi.get(self, "arps")

    @_builtins.property
    @pulumi.getter
    def description(self) -> _builtins.str:
        """
        The description of the Feature
        """
        return pulumi.get(self, "description")

    @_builtins.property
    @pulumi.getter(name="enableDhcpv6")
    def enable_dhcpv6(self) -> _builtins.bool:
        """
        Enable DHCPv6
        """
        return pulumi.get(self, "enable_dhcpv6")

    @_builtins.property
    @pulumi.getter(name="enableDhcpv6Variable")
    def enable_dhcpv6_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "enable_dhcpv6_variable")

    @_builtins.property
    @pulumi.getter(name="featureProfileId")
    def feature_profile_id(self) -> _builtins.str:
        """
        Feature Profile ID
        """
        return pulumi.get(self, "feature_profile_id")

    @_builtins.property
    @pulumi.getter(name="icmpRedirectDisable")
    def icmp_redirect_disable(self) -> _builtins.bool:
        """
        ICMP/ICMPv6 Redirect Disable
        """
        return pulumi.get(self, "icmp_redirect_disable")

    @_builtins.property
    @pulumi.getter(name="icmpRedirectDisableVariable")
    def icmp_redirect_disable_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "icmp_redirect_disable_variable")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        The id of the Feature
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter(name="interfaceDescription")
    def interface_description(self) -> _builtins.str:
        """
        Interface description
        """
        return pulumi.get(self, "interface_description")

    @_builtins.property
    @pulumi.getter(name="interfaceDescriptionVariable")
    def interface_description_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "interface_description_variable")

    @_builtins.property
    @pulumi.getter(name="interfaceMtu")
    def interface_mtu(self) -> _builtins.int:
        """
        Interface MTU \\n\\n in bytes
        """
        return pulumi.get(self, "interface_mtu")

    @_builtins.property
    @pulumi.getter(name="interfaceMtuVariable")
    def interface_mtu_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "interface_mtu_variable")

    @_builtins.property
    @pulumi.getter(name="interfaceName")
    def interface_name(self) -> _builtins.str:
        """
        Interface name: VLAN 1 - VLAN 4094 when present
        """
        return pulumi.get(self, "interface_name")

    @_builtins.property
    @pulumi.getter(name="interfaceNameVariable")
    def interface_name_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "interface_name_variable")

    @_builtins.property
    @pulumi.getter(name="ipDirectedBroadcast")
    def ip_directed_broadcast(self) -> _builtins.bool:
        """
        IP Directed-Broadcast
        """
        return pulumi.get(self, "ip_directed_broadcast")

    @_builtins.property
    @pulumi.getter(name="ipDirectedBroadcastVariable")
    def ip_directed_broadcast_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "ip_directed_broadcast_variable")

    @_builtins.property
    @pulumi.getter(name="ipMtu")
    def ip_mtu(self) -> _builtins.int:
        """
        IP MTU \\n\\n, in bytes
        """
        return pulumi.get(self, "ip_mtu")

    @_builtins.property
    @pulumi.getter(name="ipMtuVariable")
    def ip_mtu_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "ip_mtu_variable")

    @_builtins.property
    @pulumi.getter(name="ipv4Address")
    def ipv4_address(self) -> _builtins.str:
        """
        IP Address
        """
        return pulumi.get(self, "ipv4_address")

    @_builtins.property
    @pulumi.getter(name="ipv4AddressVariable")
    def ipv4_address_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "ipv4_address_variable")

    @_builtins.property
    @pulumi.getter(name="ipv4DhcpHelpers")
    def ipv4_dhcp_helpers(self) -> Sequence[_builtins.str]:
        """
        List of DHCP helper addresses
        """
        return pulumi.get(self, "ipv4_dhcp_helpers")

    @_builtins.property
    @pulumi.getter(name="ipv4DhcpHelpersVariable")
    def ipv4_dhcp_helpers_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "ipv4_dhcp_helpers_variable")

    @_builtins.property
    @pulumi.getter(name="ipv4SecondaryAddresses")
    def ipv4_secondary_addresses(self) -> Sequence['outputs.GetServiceLanVpnInterfaceSviFeatureIpv4SecondaryAddressResult']:
        """
        Assign secondary IP addresses
        """
        return pulumi.get(self, "ipv4_secondary_addresses")

    @_builtins.property
    @pulumi.getter(name="ipv4SubnetMask")
    def ipv4_subnet_mask(self) -> _builtins.str:
        """
        Subnet Mask
        """
        return pulumi.get(self, "ipv4_subnet_mask")

    @_builtins.property
    @pulumi.getter(name="ipv4SubnetMaskVariable")
    def ipv4_subnet_mask_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "ipv4_subnet_mask_variable")

    @_builtins.property
    @pulumi.getter(name="ipv4Vrrps")
    def ipv4_vrrps(self) -> Sequence['outputs.GetServiceLanVpnInterfaceSviFeatureIpv4VrrpResult']:
        """
        Enable ipv4 VRRP
        """
        return pulumi.get(self, "ipv4_vrrps")

    @_builtins.property
    @pulumi.getter(name="ipv6Address")
    def ipv6_address(self) -> _builtins.str:
        """
        Assign IPv6 address
        """
        return pulumi.get(self, "ipv6_address")

    @_builtins.property
    @pulumi.getter(name="ipv6AddressVariable")
    def ipv6_address_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "ipv6_address_variable")

    @_builtins.property
    @pulumi.getter(name="ipv6DhcpHelpers")
    def ipv6_dhcp_helpers(self) -> Sequence['outputs.GetServiceLanVpnInterfaceSviFeatureIpv6DhcpHelperResult']:
        """
        DHCPv6 Helper
        """
        return pulumi.get(self, "ipv6_dhcp_helpers")

    @_builtins.property
    @pulumi.getter(name="ipv6SecondaryAddresses")
    def ipv6_secondary_addresses(self) -> Sequence['outputs.GetServiceLanVpnInterfaceSviFeatureIpv6SecondaryAddressResult']:
        """
        Assign secondary IPv6 addresses
        """
        return pulumi.get(self, "ipv6_secondary_addresses")

    @_builtins.property
    @pulumi.getter(name="ipv6Vrrps")
    def ipv6_vrrps(self) -> Sequence['outputs.GetServiceLanVpnInterfaceSviFeatureIpv6VrrpResult']:
        """
        Enable ipv6 VRRP
        """
        return pulumi.get(self, "ipv6_vrrps")

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        """
        The name of the Feature
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter(name="serviceLanVpnFeatureId")
    def service_lan_vpn_feature_id(self) -> _builtins.str:
        """
        Service LAN VPN Feature ID
        """
        return pulumi.get(self, "service_lan_vpn_feature_id")

    @_builtins.property
    @pulumi.getter
    def shutdown(self) -> _builtins.bool:
        """
        Administrative state
        """
        return pulumi.get(self, "shutdown")

    @_builtins.property
    @pulumi.getter(name="shutdownVariable")
    def shutdown_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "shutdown_variable")

    @_builtins.property
    @pulumi.getter(name="tcpMss")
    def tcp_mss(self) -> _builtins.int:
        """
        TCP MSS on SYN packets, in bytes
        """
        return pulumi.get(self, "tcp_mss")

    @_builtins.property
    @pulumi.getter(name="tcpMssVariable")
    def tcp_mss_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "tcp_mss_variable")

    @_builtins.property
    @pulumi.getter
    def version(self) -> _builtins.int:
        """
        The version of the Feature
        """
        return pulumi.get(self, "version")


class AwaitableGetServiceLanVpnInterfaceSviFeatureResult(GetServiceLanVpnInterfaceSviFeatureResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetServiceLanVpnInterfaceSviFeatureResult(
            acl_ipv4_egress_feature_id=self.acl_ipv4_egress_feature_id,
            acl_ipv4_ingress_feature_id=self.acl_ipv4_ingress_feature_id,
            acl_ipv6_egress_feature_id=self.acl_ipv6_egress_feature_id,
            acl_ipv6_ingress_feature_id=self.acl_ipv6_ingress_feature_id,
            arp_timeout=self.arp_timeout,
            arp_timeout_variable=self.arp_timeout_variable,
            arps=self.arps,
            description=self.description,
            enable_dhcpv6=self.enable_dhcpv6,
            enable_dhcpv6_variable=self.enable_dhcpv6_variable,
            feature_profile_id=self.feature_profile_id,
            icmp_redirect_disable=self.icmp_redirect_disable,
            icmp_redirect_disable_variable=self.icmp_redirect_disable_variable,
            id=self.id,
            interface_description=self.interface_description,
            interface_description_variable=self.interface_description_variable,
            interface_mtu=self.interface_mtu,
            interface_mtu_variable=self.interface_mtu_variable,
            interface_name=self.interface_name,
            interface_name_variable=self.interface_name_variable,
            ip_directed_broadcast=self.ip_directed_broadcast,
            ip_directed_broadcast_variable=self.ip_directed_broadcast_variable,
            ip_mtu=self.ip_mtu,
            ip_mtu_variable=self.ip_mtu_variable,
            ipv4_address=self.ipv4_address,
            ipv4_address_variable=self.ipv4_address_variable,
            ipv4_dhcp_helpers=self.ipv4_dhcp_helpers,
            ipv4_dhcp_helpers_variable=self.ipv4_dhcp_helpers_variable,
            ipv4_secondary_addresses=self.ipv4_secondary_addresses,
            ipv4_subnet_mask=self.ipv4_subnet_mask,
            ipv4_subnet_mask_variable=self.ipv4_subnet_mask_variable,
            ipv4_vrrps=self.ipv4_vrrps,
            ipv6_address=self.ipv6_address,
            ipv6_address_variable=self.ipv6_address_variable,
            ipv6_dhcp_helpers=self.ipv6_dhcp_helpers,
            ipv6_secondary_addresses=self.ipv6_secondary_addresses,
            ipv6_vrrps=self.ipv6_vrrps,
            name=self.name,
            service_lan_vpn_feature_id=self.service_lan_vpn_feature_id,
            shutdown=self.shutdown,
            shutdown_variable=self.shutdown_variable,
            tcp_mss=self.tcp_mss,
            tcp_mss_variable=self.tcp_mss_variable,
            version=self.version)


def get_service_lan_vpn_interface_svi_feature(feature_profile_id: Optional[_builtins.str] = None,
                                              id: Optional[_builtins.str] = None,
                                              service_lan_vpn_feature_id: Optional[_builtins.str] = None,
                                              opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetServiceLanVpnInterfaceSviFeatureResult:
    """
    This data source can read the Service LAN VPN Interface SVI Feature.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_sdwan as sdwan

    example = sdwan.get_service_lan_vpn_interface_svi_feature(id="f6b2c44c-693c-4763-b010-895aa3d236bd",
        feature_profile_id="f6dd22c8-0b4f-496c-9a0b-6813d1f8b8ac",
        service_lan_vpn_feature_id="140331f6-5418-4755-a059-13c77eb96037")
    ```


    :param _builtins.str feature_profile_id: Feature Profile ID
    :param _builtins.str id: The id of the Feature
    :param _builtins.str service_lan_vpn_feature_id: Service LAN VPN Feature ID
    """
    __args__ = dict()
    __args__['featureProfileId'] = feature_profile_id
    __args__['id'] = id
    __args__['serviceLanVpnFeatureId'] = service_lan_vpn_feature_id
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('sdwan:index/getServiceLanVpnInterfaceSviFeature:getServiceLanVpnInterfaceSviFeature', __args__, opts=opts, typ=GetServiceLanVpnInterfaceSviFeatureResult).value

    return AwaitableGetServiceLanVpnInterfaceSviFeatureResult(
        acl_ipv4_egress_feature_id=pulumi.get(__ret__, 'acl_ipv4_egress_feature_id'),
        acl_ipv4_ingress_feature_id=pulumi.get(__ret__, 'acl_ipv4_ingress_feature_id'),
        acl_ipv6_egress_feature_id=pulumi.get(__ret__, 'acl_ipv6_egress_feature_id'),
        acl_ipv6_ingress_feature_id=pulumi.get(__ret__, 'acl_ipv6_ingress_feature_id'),
        arp_timeout=pulumi.get(__ret__, 'arp_timeout'),
        arp_timeout_variable=pulumi.get(__ret__, 'arp_timeout_variable'),
        arps=pulumi.get(__ret__, 'arps'),
        description=pulumi.get(__ret__, 'description'),
        enable_dhcpv6=pulumi.get(__ret__, 'enable_dhcpv6'),
        enable_dhcpv6_variable=pulumi.get(__ret__, 'enable_dhcpv6_variable'),
        feature_profile_id=pulumi.get(__ret__, 'feature_profile_id'),
        icmp_redirect_disable=pulumi.get(__ret__, 'icmp_redirect_disable'),
        icmp_redirect_disable_variable=pulumi.get(__ret__, 'icmp_redirect_disable_variable'),
        id=pulumi.get(__ret__, 'id'),
        interface_description=pulumi.get(__ret__, 'interface_description'),
        interface_description_variable=pulumi.get(__ret__, 'interface_description_variable'),
        interface_mtu=pulumi.get(__ret__, 'interface_mtu'),
        interface_mtu_variable=pulumi.get(__ret__, 'interface_mtu_variable'),
        interface_name=pulumi.get(__ret__, 'interface_name'),
        interface_name_variable=pulumi.get(__ret__, 'interface_name_variable'),
        ip_directed_broadcast=pulumi.get(__ret__, 'ip_directed_broadcast'),
        ip_directed_broadcast_variable=pulumi.get(__ret__, 'ip_directed_broadcast_variable'),
        ip_mtu=pulumi.get(__ret__, 'ip_mtu'),
        ip_mtu_variable=pulumi.get(__ret__, 'ip_mtu_variable'),
        ipv4_address=pulumi.get(__ret__, 'ipv4_address'),
        ipv4_address_variable=pulumi.get(__ret__, 'ipv4_address_variable'),
        ipv4_dhcp_helpers=pulumi.get(__ret__, 'ipv4_dhcp_helpers'),
        ipv4_dhcp_helpers_variable=pulumi.get(__ret__, 'ipv4_dhcp_helpers_variable'),
        ipv4_secondary_addresses=pulumi.get(__ret__, 'ipv4_secondary_addresses'),
        ipv4_subnet_mask=pulumi.get(__ret__, 'ipv4_subnet_mask'),
        ipv4_subnet_mask_variable=pulumi.get(__ret__, 'ipv4_subnet_mask_variable'),
        ipv4_vrrps=pulumi.get(__ret__, 'ipv4_vrrps'),
        ipv6_address=pulumi.get(__ret__, 'ipv6_address'),
        ipv6_address_variable=pulumi.get(__ret__, 'ipv6_address_variable'),
        ipv6_dhcp_helpers=pulumi.get(__ret__, 'ipv6_dhcp_helpers'),
        ipv6_secondary_addresses=pulumi.get(__ret__, 'ipv6_secondary_addresses'),
        ipv6_vrrps=pulumi.get(__ret__, 'ipv6_vrrps'),
        name=pulumi.get(__ret__, 'name'),
        service_lan_vpn_feature_id=pulumi.get(__ret__, 'service_lan_vpn_feature_id'),
        shutdown=pulumi.get(__ret__, 'shutdown'),
        shutdown_variable=pulumi.get(__ret__, 'shutdown_variable'),
        tcp_mss=pulumi.get(__ret__, 'tcp_mss'),
        tcp_mss_variable=pulumi.get(__ret__, 'tcp_mss_variable'),
        version=pulumi.get(__ret__, 'version'))
def get_service_lan_vpn_interface_svi_feature_output(feature_profile_id: Optional[pulumi.Input[_builtins.str]] = None,
                                                     id: Optional[pulumi.Input[_builtins.str]] = None,
                                                     service_lan_vpn_feature_id: Optional[pulumi.Input[_builtins.str]] = None,
                                                     opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetServiceLanVpnInterfaceSviFeatureResult]:
    """
    This data source can read the Service LAN VPN Interface SVI Feature.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_sdwan as sdwan

    example = sdwan.get_service_lan_vpn_interface_svi_feature(id="f6b2c44c-693c-4763-b010-895aa3d236bd",
        feature_profile_id="f6dd22c8-0b4f-496c-9a0b-6813d1f8b8ac",
        service_lan_vpn_feature_id="140331f6-5418-4755-a059-13c77eb96037")
    ```


    :param _builtins.str feature_profile_id: Feature Profile ID
    :param _builtins.str id: The id of the Feature
    :param _builtins.str service_lan_vpn_feature_id: Service LAN VPN Feature ID
    """
    __args__ = dict()
    __args__['featureProfileId'] = feature_profile_id
    __args__['id'] = id
    __args__['serviceLanVpnFeatureId'] = service_lan_vpn_feature_id
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('sdwan:index/getServiceLanVpnInterfaceSviFeature:getServiceLanVpnInterfaceSviFeature', __args__, opts=opts, typ=GetServiceLanVpnInterfaceSviFeatureResult)
    return __ret__.apply(lambda __response__: GetServiceLanVpnInterfaceSviFeatureResult(
        acl_ipv4_egress_feature_id=pulumi.get(__response__, 'acl_ipv4_egress_feature_id'),
        acl_ipv4_ingress_feature_id=pulumi.get(__response__, 'acl_ipv4_ingress_feature_id'),
        acl_ipv6_egress_feature_id=pulumi.get(__response__, 'acl_ipv6_egress_feature_id'),
        acl_ipv6_ingress_feature_id=pulumi.get(__response__, 'acl_ipv6_ingress_feature_id'),
        arp_timeout=pulumi.get(__response__, 'arp_timeout'),
        arp_timeout_variable=pulumi.get(__response__, 'arp_timeout_variable'),
        arps=pulumi.get(__response__, 'arps'),
        description=pulumi.get(__response__, 'description'),
        enable_dhcpv6=pulumi.get(__response__, 'enable_dhcpv6'),
        enable_dhcpv6_variable=pulumi.get(__response__, 'enable_dhcpv6_variable'),
        feature_profile_id=pulumi.get(__response__, 'feature_profile_id'),
        icmp_redirect_disable=pulumi.get(__response__, 'icmp_redirect_disable'),
        icmp_redirect_disable_variable=pulumi.get(__response__, 'icmp_redirect_disable_variable'),
        id=pulumi.get(__response__, 'id'),
        interface_description=pulumi.get(__response__, 'interface_description'),
        interface_description_variable=pulumi.get(__response__, 'interface_description_variable'),
        interface_mtu=pulumi.get(__response__, 'interface_mtu'),
        interface_mtu_variable=pulumi.get(__response__, 'interface_mtu_variable'),
        interface_name=pulumi.get(__response__, 'interface_name'),
        interface_name_variable=pulumi.get(__response__, 'interface_name_variable'),
        ip_directed_broadcast=pulumi.get(__response__, 'ip_directed_broadcast'),
        ip_directed_broadcast_variable=pulumi.get(__response__, 'ip_directed_broadcast_variable'),
        ip_mtu=pulumi.get(__response__, 'ip_mtu'),
        ip_mtu_variable=pulumi.get(__response__, 'ip_mtu_variable'),
        ipv4_address=pulumi.get(__response__, 'ipv4_address'),
        ipv4_address_variable=pulumi.get(__response__, 'ipv4_address_variable'),
        ipv4_dhcp_helpers=pulumi.get(__response__, 'ipv4_dhcp_helpers'),
        ipv4_dhcp_helpers_variable=pulumi.get(__response__, 'ipv4_dhcp_helpers_variable'),
        ipv4_secondary_addresses=pulumi.get(__response__, 'ipv4_secondary_addresses'),
        ipv4_subnet_mask=pulumi.get(__response__, 'ipv4_subnet_mask'),
        ipv4_subnet_mask_variable=pulumi.get(__response__, 'ipv4_subnet_mask_variable'),
        ipv4_vrrps=pulumi.get(__response__, 'ipv4_vrrps'),
        ipv6_address=pulumi.get(__response__, 'ipv6_address'),
        ipv6_address_variable=pulumi.get(__response__, 'ipv6_address_variable'),
        ipv6_dhcp_helpers=pulumi.get(__response__, 'ipv6_dhcp_helpers'),
        ipv6_secondary_addresses=pulumi.get(__response__, 'ipv6_secondary_addresses'),
        ipv6_vrrps=pulumi.get(__response__, 'ipv6_vrrps'),
        name=pulumi.get(__response__, 'name'),
        service_lan_vpn_feature_id=pulumi.get(__response__, 'service_lan_vpn_feature_id'),
        shutdown=pulumi.get(__response__, 'shutdown'),
        shutdown_variable=pulumi.get(__response__, 'shutdown_variable'),
        tcp_mss=pulumi.get(__response__, 'tcp_mss'),
        tcp_mss_variable=pulumi.get(__response__, 'tcp_mss_variable'),
        version=pulumi.get(__response__, 'version')))
