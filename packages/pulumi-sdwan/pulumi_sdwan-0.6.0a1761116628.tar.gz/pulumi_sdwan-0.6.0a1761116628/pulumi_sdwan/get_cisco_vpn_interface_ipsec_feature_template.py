# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities

__all__ = [
    'GetCiscoVpnInterfaceIpsecFeatureTemplateResult',
    'AwaitableGetCiscoVpnInterfaceIpsecFeatureTemplateResult',
    'get_cisco_vpn_interface_ipsec_feature_template',
    'get_cisco_vpn_interface_ipsec_feature_template_output',
]

@pulumi.output_type
class GetCiscoVpnInterfaceIpsecFeatureTemplateResult:
    """
    A collection of values returned by getCiscoVpnInterfaceIpsecFeatureTemplate.
    """
    def __init__(__self__, application=None, application_variable=None, clear_dont_fragment=None, clear_dont_fragment_variable=None, dead_peer_detection_interval=None, dead_peer_detection_interval_variable=None, dead_peer_detection_retries=None, dead_peer_detection_retries_variable=None, description=None, device_types=None, id=None, ike_ciphersuite=None, ike_ciphersuite_variable=None, ike_group=None, ike_group_variable=None, ike_mode=None, ike_mode_variable=None, ike_pre_shared_key=None, ike_pre_shared_key_local_id=None, ike_pre_shared_key_local_id_variable=None, ike_pre_shared_key_remote_id=None, ike_pre_shared_key_remote_id_variable=None, ike_pre_shared_key_variable=None, ike_rekey_interval=None, ike_rekey_interval_variable=None, ike_version=None, interface_description=None, interface_description_variable=None, interface_name=None, interface_name_variable=None, ip_address=None, ip_address_variable=None, ipsec_ciphersuite=None, ipsec_ciphersuite_variable=None, ipsec_perfect_forward_secrecy=None, ipsec_perfect_forward_secrecy_variable=None, ipsec_rekey_interval=None, ipsec_rekey_interval_variable=None, ipsec_replay_window=None, ipsec_replay_window_variable=None, mtu=None, mtu_variable=None, name=None, shutdown=None, shutdown_variable=None, tcp_mss_adjust=None, tcp_mss_adjust_variable=None, template_type=None, tracker_variable=None, trackers=None, tunnel_destination=None, tunnel_destination_variable=None, tunnel_route_via=None, tunnel_route_via_variable=None, tunnel_source=None, tunnel_source_interface=None, tunnel_source_interface_variable=None, tunnel_source_variable=None, version=None):
        if application and not isinstance(application, str):
            raise TypeError("Expected argument 'application' to be a str")
        pulumi.set(__self__, "application", application)
        if application_variable and not isinstance(application_variable, str):
            raise TypeError("Expected argument 'application_variable' to be a str")
        pulumi.set(__self__, "application_variable", application_variable)
        if clear_dont_fragment and not isinstance(clear_dont_fragment, bool):
            raise TypeError("Expected argument 'clear_dont_fragment' to be a bool")
        pulumi.set(__self__, "clear_dont_fragment", clear_dont_fragment)
        if clear_dont_fragment_variable and not isinstance(clear_dont_fragment_variable, str):
            raise TypeError("Expected argument 'clear_dont_fragment_variable' to be a str")
        pulumi.set(__self__, "clear_dont_fragment_variable", clear_dont_fragment_variable)
        if dead_peer_detection_interval and not isinstance(dead_peer_detection_interval, int):
            raise TypeError("Expected argument 'dead_peer_detection_interval' to be a int")
        pulumi.set(__self__, "dead_peer_detection_interval", dead_peer_detection_interval)
        if dead_peer_detection_interval_variable and not isinstance(dead_peer_detection_interval_variable, str):
            raise TypeError("Expected argument 'dead_peer_detection_interval_variable' to be a str")
        pulumi.set(__self__, "dead_peer_detection_interval_variable", dead_peer_detection_interval_variable)
        if dead_peer_detection_retries and not isinstance(dead_peer_detection_retries, int):
            raise TypeError("Expected argument 'dead_peer_detection_retries' to be a int")
        pulumi.set(__self__, "dead_peer_detection_retries", dead_peer_detection_retries)
        if dead_peer_detection_retries_variable and not isinstance(dead_peer_detection_retries_variable, str):
            raise TypeError("Expected argument 'dead_peer_detection_retries_variable' to be a str")
        pulumi.set(__self__, "dead_peer_detection_retries_variable", dead_peer_detection_retries_variable)
        if description and not isinstance(description, str):
            raise TypeError("Expected argument 'description' to be a str")
        pulumi.set(__self__, "description", description)
        if device_types and not isinstance(device_types, list):
            raise TypeError("Expected argument 'device_types' to be a list")
        pulumi.set(__self__, "device_types", device_types)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if ike_ciphersuite and not isinstance(ike_ciphersuite, str):
            raise TypeError("Expected argument 'ike_ciphersuite' to be a str")
        pulumi.set(__self__, "ike_ciphersuite", ike_ciphersuite)
        if ike_ciphersuite_variable and not isinstance(ike_ciphersuite_variable, str):
            raise TypeError("Expected argument 'ike_ciphersuite_variable' to be a str")
        pulumi.set(__self__, "ike_ciphersuite_variable", ike_ciphersuite_variable)
        if ike_group and not isinstance(ike_group, str):
            raise TypeError("Expected argument 'ike_group' to be a str")
        pulumi.set(__self__, "ike_group", ike_group)
        if ike_group_variable and not isinstance(ike_group_variable, str):
            raise TypeError("Expected argument 'ike_group_variable' to be a str")
        pulumi.set(__self__, "ike_group_variable", ike_group_variable)
        if ike_mode and not isinstance(ike_mode, str):
            raise TypeError("Expected argument 'ike_mode' to be a str")
        pulumi.set(__self__, "ike_mode", ike_mode)
        if ike_mode_variable and not isinstance(ike_mode_variable, str):
            raise TypeError("Expected argument 'ike_mode_variable' to be a str")
        pulumi.set(__self__, "ike_mode_variable", ike_mode_variable)
        if ike_pre_shared_key and not isinstance(ike_pre_shared_key, str):
            raise TypeError("Expected argument 'ike_pre_shared_key' to be a str")
        pulumi.set(__self__, "ike_pre_shared_key", ike_pre_shared_key)
        if ike_pre_shared_key_local_id and not isinstance(ike_pre_shared_key_local_id, str):
            raise TypeError("Expected argument 'ike_pre_shared_key_local_id' to be a str")
        pulumi.set(__self__, "ike_pre_shared_key_local_id", ike_pre_shared_key_local_id)
        if ike_pre_shared_key_local_id_variable and not isinstance(ike_pre_shared_key_local_id_variable, str):
            raise TypeError("Expected argument 'ike_pre_shared_key_local_id_variable' to be a str")
        pulumi.set(__self__, "ike_pre_shared_key_local_id_variable", ike_pre_shared_key_local_id_variable)
        if ike_pre_shared_key_remote_id and not isinstance(ike_pre_shared_key_remote_id, str):
            raise TypeError("Expected argument 'ike_pre_shared_key_remote_id' to be a str")
        pulumi.set(__self__, "ike_pre_shared_key_remote_id", ike_pre_shared_key_remote_id)
        if ike_pre_shared_key_remote_id_variable and not isinstance(ike_pre_shared_key_remote_id_variable, str):
            raise TypeError("Expected argument 'ike_pre_shared_key_remote_id_variable' to be a str")
        pulumi.set(__self__, "ike_pre_shared_key_remote_id_variable", ike_pre_shared_key_remote_id_variable)
        if ike_pre_shared_key_variable and not isinstance(ike_pre_shared_key_variable, str):
            raise TypeError("Expected argument 'ike_pre_shared_key_variable' to be a str")
        pulumi.set(__self__, "ike_pre_shared_key_variable", ike_pre_shared_key_variable)
        if ike_rekey_interval and not isinstance(ike_rekey_interval, int):
            raise TypeError("Expected argument 'ike_rekey_interval' to be a int")
        pulumi.set(__self__, "ike_rekey_interval", ike_rekey_interval)
        if ike_rekey_interval_variable and not isinstance(ike_rekey_interval_variable, str):
            raise TypeError("Expected argument 'ike_rekey_interval_variable' to be a str")
        pulumi.set(__self__, "ike_rekey_interval_variable", ike_rekey_interval_variable)
        if ike_version and not isinstance(ike_version, int):
            raise TypeError("Expected argument 'ike_version' to be a int")
        pulumi.set(__self__, "ike_version", ike_version)
        if interface_description and not isinstance(interface_description, str):
            raise TypeError("Expected argument 'interface_description' to be a str")
        pulumi.set(__self__, "interface_description", interface_description)
        if interface_description_variable and not isinstance(interface_description_variable, str):
            raise TypeError("Expected argument 'interface_description_variable' to be a str")
        pulumi.set(__self__, "interface_description_variable", interface_description_variable)
        if interface_name and not isinstance(interface_name, str):
            raise TypeError("Expected argument 'interface_name' to be a str")
        pulumi.set(__self__, "interface_name", interface_name)
        if interface_name_variable and not isinstance(interface_name_variable, str):
            raise TypeError("Expected argument 'interface_name_variable' to be a str")
        pulumi.set(__self__, "interface_name_variable", interface_name_variable)
        if ip_address and not isinstance(ip_address, str):
            raise TypeError("Expected argument 'ip_address' to be a str")
        pulumi.set(__self__, "ip_address", ip_address)
        if ip_address_variable and not isinstance(ip_address_variable, str):
            raise TypeError("Expected argument 'ip_address_variable' to be a str")
        pulumi.set(__self__, "ip_address_variable", ip_address_variable)
        if ipsec_ciphersuite and not isinstance(ipsec_ciphersuite, str):
            raise TypeError("Expected argument 'ipsec_ciphersuite' to be a str")
        pulumi.set(__self__, "ipsec_ciphersuite", ipsec_ciphersuite)
        if ipsec_ciphersuite_variable and not isinstance(ipsec_ciphersuite_variable, str):
            raise TypeError("Expected argument 'ipsec_ciphersuite_variable' to be a str")
        pulumi.set(__self__, "ipsec_ciphersuite_variable", ipsec_ciphersuite_variable)
        if ipsec_perfect_forward_secrecy and not isinstance(ipsec_perfect_forward_secrecy, str):
            raise TypeError("Expected argument 'ipsec_perfect_forward_secrecy' to be a str")
        pulumi.set(__self__, "ipsec_perfect_forward_secrecy", ipsec_perfect_forward_secrecy)
        if ipsec_perfect_forward_secrecy_variable and not isinstance(ipsec_perfect_forward_secrecy_variable, str):
            raise TypeError("Expected argument 'ipsec_perfect_forward_secrecy_variable' to be a str")
        pulumi.set(__self__, "ipsec_perfect_forward_secrecy_variable", ipsec_perfect_forward_secrecy_variable)
        if ipsec_rekey_interval and not isinstance(ipsec_rekey_interval, int):
            raise TypeError("Expected argument 'ipsec_rekey_interval' to be a int")
        pulumi.set(__self__, "ipsec_rekey_interval", ipsec_rekey_interval)
        if ipsec_rekey_interval_variable and not isinstance(ipsec_rekey_interval_variable, str):
            raise TypeError("Expected argument 'ipsec_rekey_interval_variable' to be a str")
        pulumi.set(__self__, "ipsec_rekey_interval_variable", ipsec_rekey_interval_variable)
        if ipsec_replay_window and not isinstance(ipsec_replay_window, int):
            raise TypeError("Expected argument 'ipsec_replay_window' to be a int")
        pulumi.set(__self__, "ipsec_replay_window", ipsec_replay_window)
        if ipsec_replay_window_variable and not isinstance(ipsec_replay_window_variable, str):
            raise TypeError("Expected argument 'ipsec_replay_window_variable' to be a str")
        pulumi.set(__self__, "ipsec_replay_window_variable", ipsec_replay_window_variable)
        if mtu and not isinstance(mtu, int):
            raise TypeError("Expected argument 'mtu' to be a int")
        pulumi.set(__self__, "mtu", mtu)
        if mtu_variable and not isinstance(mtu_variable, str):
            raise TypeError("Expected argument 'mtu_variable' to be a str")
        pulumi.set(__self__, "mtu_variable", mtu_variable)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)
        if shutdown and not isinstance(shutdown, bool):
            raise TypeError("Expected argument 'shutdown' to be a bool")
        pulumi.set(__self__, "shutdown", shutdown)
        if shutdown_variable and not isinstance(shutdown_variable, str):
            raise TypeError("Expected argument 'shutdown_variable' to be a str")
        pulumi.set(__self__, "shutdown_variable", shutdown_variable)
        if tcp_mss_adjust and not isinstance(tcp_mss_adjust, int):
            raise TypeError("Expected argument 'tcp_mss_adjust' to be a int")
        pulumi.set(__self__, "tcp_mss_adjust", tcp_mss_adjust)
        if tcp_mss_adjust_variable and not isinstance(tcp_mss_adjust_variable, str):
            raise TypeError("Expected argument 'tcp_mss_adjust_variable' to be a str")
        pulumi.set(__self__, "tcp_mss_adjust_variable", tcp_mss_adjust_variable)
        if template_type and not isinstance(template_type, str):
            raise TypeError("Expected argument 'template_type' to be a str")
        pulumi.set(__self__, "template_type", template_type)
        if tracker_variable and not isinstance(tracker_variable, str):
            raise TypeError("Expected argument 'tracker_variable' to be a str")
        pulumi.set(__self__, "tracker_variable", tracker_variable)
        if trackers and not isinstance(trackers, list):
            raise TypeError("Expected argument 'trackers' to be a list")
        pulumi.set(__self__, "trackers", trackers)
        if tunnel_destination and not isinstance(tunnel_destination, str):
            raise TypeError("Expected argument 'tunnel_destination' to be a str")
        pulumi.set(__self__, "tunnel_destination", tunnel_destination)
        if tunnel_destination_variable and not isinstance(tunnel_destination_variable, str):
            raise TypeError("Expected argument 'tunnel_destination_variable' to be a str")
        pulumi.set(__self__, "tunnel_destination_variable", tunnel_destination_variable)
        if tunnel_route_via and not isinstance(tunnel_route_via, str):
            raise TypeError("Expected argument 'tunnel_route_via' to be a str")
        pulumi.set(__self__, "tunnel_route_via", tunnel_route_via)
        if tunnel_route_via_variable and not isinstance(tunnel_route_via_variable, str):
            raise TypeError("Expected argument 'tunnel_route_via_variable' to be a str")
        pulumi.set(__self__, "tunnel_route_via_variable", tunnel_route_via_variable)
        if tunnel_source and not isinstance(tunnel_source, str):
            raise TypeError("Expected argument 'tunnel_source' to be a str")
        pulumi.set(__self__, "tunnel_source", tunnel_source)
        if tunnel_source_interface and not isinstance(tunnel_source_interface, str):
            raise TypeError("Expected argument 'tunnel_source_interface' to be a str")
        pulumi.set(__self__, "tunnel_source_interface", tunnel_source_interface)
        if tunnel_source_interface_variable and not isinstance(tunnel_source_interface_variable, str):
            raise TypeError("Expected argument 'tunnel_source_interface_variable' to be a str")
        pulumi.set(__self__, "tunnel_source_interface_variable", tunnel_source_interface_variable)
        if tunnel_source_variable and not isinstance(tunnel_source_variable, str):
            raise TypeError("Expected argument 'tunnel_source_variable' to be a str")
        pulumi.set(__self__, "tunnel_source_variable", tunnel_source_variable)
        if version and not isinstance(version, int):
            raise TypeError("Expected argument 'version' to be a int")
        pulumi.set(__self__, "version", version)

    @_builtins.property
    @pulumi.getter
    def application(self) -> _builtins.str:
        """
        Enable Application Tunnel Type
        """
        return pulumi.get(self, "application")

    @_builtins.property
    @pulumi.getter(name="applicationVariable")
    def application_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "application_variable")

    @_builtins.property
    @pulumi.getter(name="clearDontFragment")
    def clear_dont_fragment(self) -> _builtins.bool:
        """
        Enable clear dont fragment (Currently Only SDWAN Tunnel Interface)
        """
        return pulumi.get(self, "clear_dont_fragment")

    @_builtins.property
    @pulumi.getter(name="clearDontFragmentVariable")
    def clear_dont_fragment_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "clear_dont_fragment_variable")

    @_builtins.property
    @pulumi.getter(name="deadPeerDetectionInterval")
    def dead_peer_detection_interval(self) -> _builtins.int:
        """
        IKE keepalive interval (seconds)
        """
        return pulumi.get(self, "dead_peer_detection_interval")

    @_builtins.property
    @pulumi.getter(name="deadPeerDetectionIntervalVariable")
    def dead_peer_detection_interval_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "dead_peer_detection_interval_variable")

    @_builtins.property
    @pulumi.getter(name="deadPeerDetectionRetries")
    def dead_peer_detection_retries(self) -> _builtins.int:
        """
        IKE keepalive retries
        """
        return pulumi.get(self, "dead_peer_detection_retries")

    @_builtins.property
    @pulumi.getter(name="deadPeerDetectionRetriesVariable")
    def dead_peer_detection_retries_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "dead_peer_detection_retries_variable")

    @_builtins.property
    @pulumi.getter
    def description(self) -> _builtins.str:
        """
        The description of the feature template
        """
        return pulumi.get(self, "description")

    @_builtins.property
    @pulumi.getter(name="deviceTypes")
    def device_types(self) -> Sequence[_builtins.str]:
        """
        List of supported device types
        """
        return pulumi.get(self, "device_types")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        The id of the feature template
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter(name="ikeCiphersuite")
    def ike_ciphersuite(self) -> _builtins.str:
        """
        IKE identity the IKE preshared secret belongs to
        """
        return pulumi.get(self, "ike_ciphersuite")

    @_builtins.property
    @pulumi.getter(name="ikeCiphersuiteVariable")
    def ike_ciphersuite_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "ike_ciphersuite_variable")

    @_builtins.property
    @pulumi.getter(name="ikeGroup")
    def ike_group(self) -> _builtins.str:
        """
        IKE Diffie Hellman Groups
        """
        return pulumi.get(self, "ike_group")

    @_builtins.property
    @pulumi.getter(name="ikeGroupVariable")
    def ike_group_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "ike_group_variable")

    @_builtins.property
    @pulumi.getter(name="ikeMode")
    def ike_mode(self) -> _builtins.str:
        """
        IKE integrity protocol
        """
        return pulumi.get(self, "ike_mode")

    @_builtins.property
    @pulumi.getter(name="ikeModeVariable")
    def ike_mode_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "ike_mode_variable")

    @_builtins.property
    @pulumi.getter(name="ikePreSharedKey")
    def ike_pre_shared_key(self) -> _builtins.str:
        """
        Use preshared key to authenticate IKE peer
        """
        return pulumi.get(self, "ike_pre_shared_key")

    @_builtins.property
    @pulumi.getter(name="ikePreSharedKeyLocalId")
    def ike_pre_shared_key_local_id(self) -> _builtins.str:
        """
        IKE ID for the local endpoint. Input IPv4 address, domain name, or email address
        """
        return pulumi.get(self, "ike_pre_shared_key_local_id")

    @_builtins.property
    @pulumi.getter(name="ikePreSharedKeyLocalIdVariable")
    def ike_pre_shared_key_local_id_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "ike_pre_shared_key_local_id_variable")

    @_builtins.property
    @pulumi.getter(name="ikePreSharedKeyRemoteId")
    def ike_pre_shared_key_remote_id(self) -> _builtins.str:
        """
        IKE ID for the remote endpoint. Input IPv4 address, domain name, or email address
        """
        return pulumi.get(self, "ike_pre_shared_key_remote_id")

    @_builtins.property
    @pulumi.getter(name="ikePreSharedKeyRemoteIdVariable")
    def ike_pre_shared_key_remote_id_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "ike_pre_shared_key_remote_id_variable")

    @_builtins.property
    @pulumi.getter(name="ikePreSharedKeyVariable")
    def ike_pre_shared_key_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "ike_pre_shared_key_variable")

    @_builtins.property
    @pulumi.getter(name="ikeRekeyInterval")
    def ike_rekey_interval(self) -> _builtins.int:
        """
        IKE rekey interval \\n\\n seconds
        """
        return pulumi.get(self, "ike_rekey_interval")

    @_builtins.property
    @pulumi.getter(name="ikeRekeyIntervalVariable")
    def ike_rekey_interval_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "ike_rekey_interval_variable")

    @_builtins.property
    @pulumi.getter(name="ikeVersion")
    def ike_version(self) -> _builtins.int:
        """
        IKE Version \\n\\n
        """
        return pulumi.get(self, "ike_version")

    @_builtins.property
    @pulumi.getter(name="interfaceDescription")
    def interface_description(self) -> _builtins.str:
        """
        Interface description
        """
        return pulumi.get(self, "interface_description")

    @_builtins.property
    @pulumi.getter(name="interfaceDescriptionVariable")
    def interface_description_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "interface_description_variable")

    @_builtins.property
    @pulumi.getter(name="interfaceName")
    def interface_name(self) -> _builtins.str:
        """
        Interface name: IPsec when present
        """
        return pulumi.get(self, "interface_name")

    @_builtins.property
    @pulumi.getter(name="interfaceNameVariable")
    def interface_name_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "interface_name_variable")

    @_builtins.property
    @pulumi.getter(name="ipAddress")
    def ip_address(self) -> _builtins.str:
        """
        Assign IPv4 address
        """
        return pulumi.get(self, "ip_address")

    @_builtins.property
    @pulumi.getter(name="ipAddressVariable")
    def ip_address_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "ip_address_variable")

    @_builtins.property
    @pulumi.getter(name="ipsecCiphersuite")
    def ipsec_ciphersuite(self) -> _builtins.str:
        """
        IPsec(ESP) encryption and integrity protocol
        """
        return pulumi.get(self, "ipsec_ciphersuite")

    @_builtins.property
    @pulumi.getter(name="ipsecCiphersuiteVariable")
    def ipsec_ciphersuite_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "ipsec_ciphersuite_variable")

    @_builtins.property
    @pulumi.getter(name="ipsecPerfectForwardSecrecy")
    def ipsec_perfect_forward_secrecy(self) -> _builtins.str:
        """
        IPsec perfect forward secrecy settings
        """
        return pulumi.get(self, "ipsec_perfect_forward_secrecy")

    @_builtins.property
    @pulumi.getter(name="ipsecPerfectForwardSecrecyVariable")
    def ipsec_perfect_forward_secrecy_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "ipsec_perfect_forward_secrecy_variable")

    @_builtins.property
    @pulumi.getter(name="ipsecRekeyInterval")
    def ipsec_rekey_interval(self) -> _builtins.int:
        """
        IPsec rekey interval \\n\\n seconds
        """
        return pulumi.get(self, "ipsec_rekey_interval")

    @_builtins.property
    @pulumi.getter(name="ipsecRekeyIntervalVariable")
    def ipsec_rekey_interval_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "ipsec_rekey_interval_variable")

    @_builtins.property
    @pulumi.getter(name="ipsecReplayWindow")
    def ipsec_replay_window(self) -> _builtins.int:
        """
        Replay window size 32..8192 (must be a power of 2)
        """
        return pulumi.get(self, "ipsec_replay_window")

    @_builtins.property
    @pulumi.getter(name="ipsecReplayWindowVariable")
    def ipsec_replay_window_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "ipsec_replay_window_variable")

    @_builtins.property
    @pulumi.getter
    def mtu(self) -> _builtins.int:
        """
        Interface MTU \\n\\n, in bytes
        """
        return pulumi.get(self, "mtu")

    @_builtins.property
    @pulumi.getter(name="mtuVariable")
    def mtu_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "mtu_variable")

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        """
        The name of the feature template
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def shutdown(self) -> _builtins.bool:
        """
        Administrative state
        """
        return pulumi.get(self, "shutdown")

    @_builtins.property
    @pulumi.getter(name="shutdownVariable")
    def shutdown_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "shutdown_variable")

    @_builtins.property
    @pulumi.getter(name="tcpMssAdjust")
    def tcp_mss_adjust(self) -> _builtins.int:
        """
        TCP MSS on SYN packets, in bytes
        """
        return pulumi.get(self, "tcp_mss_adjust")

    @_builtins.property
    @pulumi.getter(name="tcpMssAdjustVariable")
    def tcp_mss_adjust_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "tcp_mss_adjust_variable")

    @_builtins.property
    @pulumi.getter(name="templateType")
    def template_type(self) -> _builtins.str:
        """
        The template type
        """
        return pulumi.get(self, "template_type")

    @_builtins.property
    @pulumi.getter(name="trackerVariable")
    def tracker_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "tracker_variable")

    @_builtins.property
    @pulumi.getter
    def trackers(self) -> Sequence[_builtins.str]:
        """
        Enable tracker for this interface
        """
        return pulumi.get(self, "trackers")

    @_builtins.property
    @pulumi.getter(name="tunnelDestination")
    def tunnel_destination(self) -> _builtins.str:
        """
        Tunnel destination IP address
        """
        return pulumi.get(self, "tunnel_destination")

    @_builtins.property
    @pulumi.getter(name="tunnelDestinationVariable")
    def tunnel_destination_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "tunnel_destination_variable")

    @_builtins.property
    @pulumi.getter(name="tunnelRouteVia")
    def tunnel_route_via(self) -> _builtins.str:
        """
        \\n\\n Interface name: ge0/\\n\\n or ge0/\\n\\n.vlanid
        """
        return pulumi.get(self, "tunnel_route_via")

    @_builtins.property
    @pulumi.getter(name="tunnelRouteViaVariable")
    def tunnel_route_via_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "tunnel_route_via_variable")

    @_builtins.property
    @pulumi.getter(name="tunnelSource")
    def tunnel_source(self) -> _builtins.str:
        """
        Tunnel source IP Address
        """
        return pulumi.get(self, "tunnel_source")

    @_builtins.property
    @pulumi.getter(name="tunnelSourceInterface")
    def tunnel_source_interface(self) -> _builtins.str:
        """
        \\n\\n Interface name: ge0/\\n\\n or ge0/\\n\\n.vlanid
        """
        return pulumi.get(self, "tunnel_source_interface")

    @_builtins.property
    @pulumi.getter(name="tunnelSourceInterfaceVariable")
    def tunnel_source_interface_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "tunnel_source_interface_variable")

    @_builtins.property
    @pulumi.getter(name="tunnelSourceVariable")
    def tunnel_source_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "tunnel_source_variable")

    @_builtins.property
    @pulumi.getter
    def version(self) -> _builtins.int:
        """
        The version of the feature template
        """
        return pulumi.get(self, "version")


class AwaitableGetCiscoVpnInterfaceIpsecFeatureTemplateResult(GetCiscoVpnInterfaceIpsecFeatureTemplateResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetCiscoVpnInterfaceIpsecFeatureTemplateResult(
            application=self.application,
            application_variable=self.application_variable,
            clear_dont_fragment=self.clear_dont_fragment,
            clear_dont_fragment_variable=self.clear_dont_fragment_variable,
            dead_peer_detection_interval=self.dead_peer_detection_interval,
            dead_peer_detection_interval_variable=self.dead_peer_detection_interval_variable,
            dead_peer_detection_retries=self.dead_peer_detection_retries,
            dead_peer_detection_retries_variable=self.dead_peer_detection_retries_variable,
            description=self.description,
            device_types=self.device_types,
            id=self.id,
            ike_ciphersuite=self.ike_ciphersuite,
            ike_ciphersuite_variable=self.ike_ciphersuite_variable,
            ike_group=self.ike_group,
            ike_group_variable=self.ike_group_variable,
            ike_mode=self.ike_mode,
            ike_mode_variable=self.ike_mode_variable,
            ike_pre_shared_key=self.ike_pre_shared_key,
            ike_pre_shared_key_local_id=self.ike_pre_shared_key_local_id,
            ike_pre_shared_key_local_id_variable=self.ike_pre_shared_key_local_id_variable,
            ike_pre_shared_key_remote_id=self.ike_pre_shared_key_remote_id,
            ike_pre_shared_key_remote_id_variable=self.ike_pre_shared_key_remote_id_variable,
            ike_pre_shared_key_variable=self.ike_pre_shared_key_variable,
            ike_rekey_interval=self.ike_rekey_interval,
            ike_rekey_interval_variable=self.ike_rekey_interval_variable,
            ike_version=self.ike_version,
            interface_description=self.interface_description,
            interface_description_variable=self.interface_description_variable,
            interface_name=self.interface_name,
            interface_name_variable=self.interface_name_variable,
            ip_address=self.ip_address,
            ip_address_variable=self.ip_address_variable,
            ipsec_ciphersuite=self.ipsec_ciphersuite,
            ipsec_ciphersuite_variable=self.ipsec_ciphersuite_variable,
            ipsec_perfect_forward_secrecy=self.ipsec_perfect_forward_secrecy,
            ipsec_perfect_forward_secrecy_variable=self.ipsec_perfect_forward_secrecy_variable,
            ipsec_rekey_interval=self.ipsec_rekey_interval,
            ipsec_rekey_interval_variable=self.ipsec_rekey_interval_variable,
            ipsec_replay_window=self.ipsec_replay_window,
            ipsec_replay_window_variable=self.ipsec_replay_window_variable,
            mtu=self.mtu,
            mtu_variable=self.mtu_variable,
            name=self.name,
            shutdown=self.shutdown,
            shutdown_variable=self.shutdown_variable,
            tcp_mss_adjust=self.tcp_mss_adjust,
            tcp_mss_adjust_variable=self.tcp_mss_adjust_variable,
            template_type=self.template_type,
            tracker_variable=self.tracker_variable,
            trackers=self.trackers,
            tunnel_destination=self.tunnel_destination,
            tunnel_destination_variable=self.tunnel_destination_variable,
            tunnel_route_via=self.tunnel_route_via,
            tunnel_route_via_variable=self.tunnel_route_via_variable,
            tunnel_source=self.tunnel_source,
            tunnel_source_interface=self.tunnel_source_interface,
            tunnel_source_interface_variable=self.tunnel_source_interface_variable,
            tunnel_source_variable=self.tunnel_source_variable,
            version=self.version)


def get_cisco_vpn_interface_ipsec_feature_template(id: Optional[_builtins.str] = None,
                                                   name: Optional[_builtins.str] = None,
                                                   opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetCiscoVpnInterfaceIpsecFeatureTemplateResult:
    """
    This data source can read the Cisco VPN Interface IPSec feature template.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_sdwan as sdwan

    example = sdwan.get_cisco_vpn_interface_ipsec_feature_template(id="f6b2c44c-693c-4763-b010-895aa3d236bd")
    ```


    :param _builtins.str id: The id of the feature template
    :param _builtins.str name: The name of the feature template
    """
    __args__ = dict()
    __args__['id'] = id
    __args__['name'] = name
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('sdwan:index/getCiscoVpnInterfaceIpsecFeatureTemplate:getCiscoVpnInterfaceIpsecFeatureTemplate', __args__, opts=opts, typ=GetCiscoVpnInterfaceIpsecFeatureTemplateResult).value

    return AwaitableGetCiscoVpnInterfaceIpsecFeatureTemplateResult(
        application=pulumi.get(__ret__, 'application'),
        application_variable=pulumi.get(__ret__, 'application_variable'),
        clear_dont_fragment=pulumi.get(__ret__, 'clear_dont_fragment'),
        clear_dont_fragment_variable=pulumi.get(__ret__, 'clear_dont_fragment_variable'),
        dead_peer_detection_interval=pulumi.get(__ret__, 'dead_peer_detection_interval'),
        dead_peer_detection_interval_variable=pulumi.get(__ret__, 'dead_peer_detection_interval_variable'),
        dead_peer_detection_retries=pulumi.get(__ret__, 'dead_peer_detection_retries'),
        dead_peer_detection_retries_variable=pulumi.get(__ret__, 'dead_peer_detection_retries_variable'),
        description=pulumi.get(__ret__, 'description'),
        device_types=pulumi.get(__ret__, 'device_types'),
        id=pulumi.get(__ret__, 'id'),
        ike_ciphersuite=pulumi.get(__ret__, 'ike_ciphersuite'),
        ike_ciphersuite_variable=pulumi.get(__ret__, 'ike_ciphersuite_variable'),
        ike_group=pulumi.get(__ret__, 'ike_group'),
        ike_group_variable=pulumi.get(__ret__, 'ike_group_variable'),
        ike_mode=pulumi.get(__ret__, 'ike_mode'),
        ike_mode_variable=pulumi.get(__ret__, 'ike_mode_variable'),
        ike_pre_shared_key=pulumi.get(__ret__, 'ike_pre_shared_key'),
        ike_pre_shared_key_local_id=pulumi.get(__ret__, 'ike_pre_shared_key_local_id'),
        ike_pre_shared_key_local_id_variable=pulumi.get(__ret__, 'ike_pre_shared_key_local_id_variable'),
        ike_pre_shared_key_remote_id=pulumi.get(__ret__, 'ike_pre_shared_key_remote_id'),
        ike_pre_shared_key_remote_id_variable=pulumi.get(__ret__, 'ike_pre_shared_key_remote_id_variable'),
        ike_pre_shared_key_variable=pulumi.get(__ret__, 'ike_pre_shared_key_variable'),
        ike_rekey_interval=pulumi.get(__ret__, 'ike_rekey_interval'),
        ike_rekey_interval_variable=pulumi.get(__ret__, 'ike_rekey_interval_variable'),
        ike_version=pulumi.get(__ret__, 'ike_version'),
        interface_description=pulumi.get(__ret__, 'interface_description'),
        interface_description_variable=pulumi.get(__ret__, 'interface_description_variable'),
        interface_name=pulumi.get(__ret__, 'interface_name'),
        interface_name_variable=pulumi.get(__ret__, 'interface_name_variable'),
        ip_address=pulumi.get(__ret__, 'ip_address'),
        ip_address_variable=pulumi.get(__ret__, 'ip_address_variable'),
        ipsec_ciphersuite=pulumi.get(__ret__, 'ipsec_ciphersuite'),
        ipsec_ciphersuite_variable=pulumi.get(__ret__, 'ipsec_ciphersuite_variable'),
        ipsec_perfect_forward_secrecy=pulumi.get(__ret__, 'ipsec_perfect_forward_secrecy'),
        ipsec_perfect_forward_secrecy_variable=pulumi.get(__ret__, 'ipsec_perfect_forward_secrecy_variable'),
        ipsec_rekey_interval=pulumi.get(__ret__, 'ipsec_rekey_interval'),
        ipsec_rekey_interval_variable=pulumi.get(__ret__, 'ipsec_rekey_interval_variable'),
        ipsec_replay_window=pulumi.get(__ret__, 'ipsec_replay_window'),
        ipsec_replay_window_variable=pulumi.get(__ret__, 'ipsec_replay_window_variable'),
        mtu=pulumi.get(__ret__, 'mtu'),
        mtu_variable=pulumi.get(__ret__, 'mtu_variable'),
        name=pulumi.get(__ret__, 'name'),
        shutdown=pulumi.get(__ret__, 'shutdown'),
        shutdown_variable=pulumi.get(__ret__, 'shutdown_variable'),
        tcp_mss_adjust=pulumi.get(__ret__, 'tcp_mss_adjust'),
        tcp_mss_adjust_variable=pulumi.get(__ret__, 'tcp_mss_adjust_variable'),
        template_type=pulumi.get(__ret__, 'template_type'),
        tracker_variable=pulumi.get(__ret__, 'tracker_variable'),
        trackers=pulumi.get(__ret__, 'trackers'),
        tunnel_destination=pulumi.get(__ret__, 'tunnel_destination'),
        tunnel_destination_variable=pulumi.get(__ret__, 'tunnel_destination_variable'),
        tunnel_route_via=pulumi.get(__ret__, 'tunnel_route_via'),
        tunnel_route_via_variable=pulumi.get(__ret__, 'tunnel_route_via_variable'),
        tunnel_source=pulumi.get(__ret__, 'tunnel_source'),
        tunnel_source_interface=pulumi.get(__ret__, 'tunnel_source_interface'),
        tunnel_source_interface_variable=pulumi.get(__ret__, 'tunnel_source_interface_variable'),
        tunnel_source_variable=pulumi.get(__ret__, 'tunnel_source_variable'),
        version=pulumi.get(__ret__, 'version'))
def get_cisco_vpn_interface_ipsec_feature_template_output(id: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                                          name: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                                          opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetCiscoVpnInterfaceIpsecFeatureTemplateResult]:
    """
    This data source can read the Cisco VPN Interface IPSec feature template.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_sdwan as sdwan

    example = sdwan.get_cisco_vpn_interface_ipsec_feature_template(id="f6b2c44c-693c-4763-b010-895aa3d236bd")
    ```


    :param _builtins.str id: The id of the feature template
    :param _builtins.str name: The name of the feature template
    """
    __args__ = dict()
    __args__['id'] = id
    __args__['name'] = name
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('sdwan:index/getCiscoVpnInterfaceIpsecFeatureTemplate:getCiscoVpnInterfaceIpsecFeatureTemplate', __args__, opts=opts, typ=GetCiscoVpnInterfaceIpsecFeatureTemplateResult)
    return __ret__.apply(lambda __response__: GetCiscoVpnInterfaceIpsecFeatureTemplateResult(
        application=pulumi.get(__response__, 'application'),
        application_variable=pulumi.get(__response__, 'application_variable'),
        clear_dont_fragment=pulumi.get(__response__, 'clear_dont_fragment'),
        clear_dont_fragment_variable=pulumi.get(__response__, 'clear_dont_fragment_variable'),
        dead_peer_detection_interval=pulumi.get(__response__, 'dead_peer_detection_interval'),
        dead_peer_detection_interval_variable=pulumi.get(__response__, 'dead_peer_detection_interval_variable'),
        dead_peer_detection_retries=pulumi.get(__response__, 'dead_peer_detection_retries'),
        dead_peer_detection_retries_variable=pulumi.get(__response__, 'dead_peer_detection_retries_variable'),
        description=pulumi.get(__response__, 'description'),
        device_types=pulumi.get(__response__, 'device_types'),
        id=pulumi.get(__response__, 'id'),
        ike_ciphersuite=pulumi.get(__response__, 'ike_ciphersuite'),
        ike_ciphersuite_variable=pulumi.get(__response__, 'ike_ciphersuite_variable'),
        ike_group=pulumi.get(__response__, 'ike_group'),
        ike_group_variable=pulumi.get(__response__, 'ike_group_variable'),
        ike_mode=pulumi.get(__response__, 'ike_mode'),
        ike_mode_variable=pulumi.get(__response__, 'ike_mode_variable'),
        ike_pre_shared_key=pulumi.get(__response__, 'ike_pre_shared_key'),
        ike_pre_shared_key_local_id=pulumi.get(__response__, 'ike_pre_shared_key_local_id'),
        ike_pre_shared_key_local_id_variable=pulumi.get(__response__, 'ike_pre_shared_key_local_id_variable'),
        ike_pre_shared_key_remote_id=pulumi.get(__response__, 'ike_pre_shared_key_remote_id'),
        ike_pre_shared_key_remote_id_variable=pulumi.get(__response__, 'ike_pre_shared_key_remote_id_variable'),
        ike_pre_shared_key_variable=pulumi.get(__response__, 'ike_pre_shared_key_variable'),
        ike_rekey_interval=pulumi.get(__response__, 'ike_rekey_interval'),
        ike_rekey_interval_variable=pulumi.get(__response__, 'ike_rekey_interval_variable'),
        ike_version=pulumi.get(__response__, 'ike_version'),
        interface_description=pulumi.get(__response__, 'interface_description'),
        interface_description_variable=pulumi.get(__response__, 'interface_description_variable'),
        interface_name=pulumi.get(__response__, 'interface_name'),
        interface_name_variable=pulumi.get(__response__, 'interface_name_variable'),
        ip_address=pulumi.get(__response__, 'ip_address'),
        ip_address_variable=pulumi.get(__response__, 'ip_address_variable'),
        ipsec_ciphersuite=pulumi.get(__response__, 'ipsec_ciphersuite'),
        ipsec_ciphersuite_variable=pulumi.get(__response__, 'ipsec_ciphersuite_variable'),
        ipsec_perfect_forward_secrecy=pulumi.get(__response__, 'ipsec_perfect_forward_secrecy'),
        ipsec_perfect_forward_secrecy_variable=pulumi.get(__response__, 'ipsec_perfect_forward_secrecy_variable'),
        ipsec_rekey_interval=pulumi.get(__response__, 'ipsec_rekey_interval'),
        ipsec_rekey_interval_variable=pulumi.get(__response__, 'ipsec_rekey_interval_variable'),
        ipsec_replay_window=pulumi.get(__response__, 'ipsec_replay_window'),
        ipsec_replay_window_variable=pulumi.get(__response__, 'ipsec_replay_window_variable'),
        mtu=pulumi.get(__response__, 'mtu'),
        mtu_variable=pulumi.get(__response__, 'mtu_variable'),
        name=pulumi.get(__response__, 'name'),
        shutdown=pulumi.get(__response__, 'shutdown'),
        shutdown_variable=pulumi.get(__response__, 'shutdown_variable'),
        tcp_mss_adjust=pulumi.get(__response__, 'tcp_mss_adjust'),
        tcp_mss_adjust_variable=pulumi.get(__response__, 'tcp_mss_adjust_variable'),
        template_type=pulumi.get(__response__, 'template_type'),
        tracker_variable=pulumi.get(__response__, 'tracker_variable'),
        trackers=pulumi.get(__response__, 'trackers'),
        tunnel_destination=pulumi.get(__response__, 'tunnel_destination'),
        tunnel_destination_variable=pulumi.get(__response__, 'tunnel_destination_variable'),
        tunnel_route_via=pulumi.get(__response__, 'tunnel_route_via'),
        tunnel_route_via_variable=pulumi.get(__response__, 'tunnel_route_via_variable'),
        tunnel_source=pulumi.get(__response__, 'tunnel_source'),
        tunnel_source_interface=pulumi.get(__response__, 'tunnel_source_interface'),
        tunnel_source_interface_variable=pulumi.get(__response__, 'tunnel_source_interface_variable'),
        tunnel_source_variable=pulumi.get(__response__, 'tunnel_source_variable'),
        version=pulumi.get(__response__, 'version')))
