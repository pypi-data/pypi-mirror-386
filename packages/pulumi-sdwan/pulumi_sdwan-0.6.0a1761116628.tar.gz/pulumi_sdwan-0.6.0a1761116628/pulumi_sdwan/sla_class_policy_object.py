# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities

__all__ = ['SlaClassPolicyObjectArgs', 'SlaClassPolicyObject']

@pulumi.input_type
class SlaClassPolicyObjectArgs:
    def __init__(__self__, *,
                 app_probe_class_id: Optional[pulumi.Input[_builtins.str]] = None,
                 app_probe_class_version: Optional[pulumi.Input[_builtins.int]] = None,
                 fallback_best_tunnel_criteria: Optional[pulumi.Input[_builtins.str]] = None,
                 fallback_best_tunnel_jitter: Optional[pulumi.Input[_builtins.int]] = None,
                 fallback_best_tunnel_latency: Optional[pulumi.Input[_builtins.int]] = None,
                 fallback_best_tunnel_loss: Optional[pulumi.Input[_builtins.int]] = None,
                 jitter: Optional[pulumi.Input[_builtins.int]] = None,
                 latency: Optional[pulumi.Input[_builtins.int]] = None,
                 loss: Optional[pulumi.Input[_builtins.int]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None):
        """
        The set of arguments for constructing a SlaClassPolicyObject resource.
        :param pulumi.Input[_builtins.str] app_probe_class_id: App Probe Class Policy Object ID
        :param pulumi.Input[_builtins.int] app_probe_class_version: App Probe Class Policy Object version
        :param pulumi.Input[_builtins.str] fallback_best_tunnel_criteria: - Choices: `loss`, `latency`, `jitter`, `loss-latency`, `loss-jitter`, `latency-loss`, `latency-jitter`, `jitter-latency`, `jitter-loss`, `loss-latency-jitter`, `loss-jitter-latency`, `latency-loss-jitter`, `latency-jitter-loss`, `jitter-latency-loss`, `jitter-loss-latency`
        :param pulumi.Input[_builtins.int] fallback_best_tunnel_jitter: Jitter variance in ms
                 - Range: `1`-`1000`
        :param pulumi.Input[_builtins.int] fallback_best_tunnel_latency: Latency variance in ms
                 - Range: `1`-`1000`
        :param pulumi.Input[_builtins.int] fallback_best_tunnel_loss: Loss variance in percent
                 - Range: `1`-`100`
        :param pulumi.Input[_builtins.int] jitter: Jitter in ms
                 - Range: `1`-`1000`
        :param pulumi.Input[_builtins.int] latency: Latency in ms
                 - Range: `1`-`1000`
        :param pulumi.Input[_builtins.int] loss: Loss in percent
                 - Range: `1`-`100`
        :param pulumi.Input[_builtins.str] name: The name of the policy object
        """
        if app_probe_class_id is not None:
            pulumi.set(__self__, "app_probe_class_id", app_probe_class_id)
        if app_probe_class_version is not None:
            pulumi.set(__self__, "app_probe_class_version", app_probe_class_version)
        if fallback_best_tunnel_criteria is not None:
            pulumi.set(__self__, "fallback_best_tunnel_criteria", fallback_best_tunnel_criteria)
        if fallback_best_tunnel_jitter is not None:
            pulumi.set(__self__, "fallback_best_tunnel_jitter", fallback_best_tunnel_jitter)
        if fallback_best_tunnel_latency is not None:
            pulumi.set(__self__, "fallback_best_tunnel_latency", fallback_best_tunnel_latency)
        if fallback_best_tunnel_loss is not None:
            pulumi.set(__self__, "fallback_best_tunnel_loss", fallback_best_tunnel_loss)
        if jitter is not None:
            pulumi.set(__self__, "jitter", jitter)
        if latency is not None:
            pulumi.set(__self__, "latency", latency)
        if loss is not None:
            pulumi.set(__self__, "loss", loss)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @_builtins.property
    @pulumi.getter(name="appProbeClassId")
    def app_probe_class_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        App Probe Class Policy Object ID
        """
        return pulumi.get(self, "app_probe_class_id")

    @app_probe_class_id.setter
    def app_probe_class_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "app_probe_class_id", value)

    @_builtins.property
    @pulumi.getter(name="appProbeClassVersion")
    def app_probe_class_version(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        App Probe Class Policy Object version
        """
        return pulumi.get(self, "app_probe_class_version")

    @app_probe_class_version.setter
    def app_probe_class_version(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "app_probe_class_version", value)

    @_builtins.property
    @pulumi.getter(name="fallbackBestTunnelCriteria")
    def fallback_best_tunnel_criteria(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        - Choices: `loss`, `latency`, `jitter`, `loss-latency`, `loss-jitter`, `latency-loss`, `latency-jitter`, `jitter-latency`, `jitter-loss`, `loss-latency-jitter`, `loss-jitter-latency`, `latency-loss-jitter`, `latency-jitter-loss`, `jitter-latency-loss`, `jitter-loss-latency`
        """
        return pulumi.get(self, "fallback_best_tunnel_criteria")

    @fallback_best_tunnel_criteria.setter
    def fallback_best_tunnel_criteria(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "fallback_best_tunnel_criteria", value)

    @_builtins.property
    @pulumi.getter(name="fallbackBestTunnelJitter")
    def fallback_best_tunnel_jitter(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        Jitter variance in ms
          - Range: `1`-`1000`
        """
        return pulumi.get(self, "fallback_best_tunnel_jitter")

    @fallback_best_tunnel_jitter.setter
    def fallback_best_tunnel_jitter(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "fallback_best_tunnel_jitter", value)

    @_builtins.property
    @pulumi.getter(name="fallbackBestTunnelLatency")
    def fallback_best_tunnel_latency(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        Latency variance in ms
          - Range: `1`-`1000`
        """
        return pulumi.get(self, "fallback_best_tunnel_latency")

    @fallback_best_tunnel_latency.setter
    def fallback_best_tunnel_latency(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "fallback_best_tunnel_latency", value)

    @_builtins.property
    @pulumi.getter(name="fallbackBestTunnelLoss")
    def fallback_best_tunnel_loss(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        Loss variance in percent
          - Range: `1`-`100`
        """
        return pulumi.get(self, "fallback_best_tunnel_loss")

    @fallback_best_tunnel_loss.setter
    def fallback_best_tunnel_loss(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "fallback_best_tunnel_loss", value)

    @_builtins.property
    @pulumi.getter
    def jitter(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        Jitter in ms
          - Range: `1`-`1000`
        """
        return pulumi.get(self, "jitter")

    @jitter.setter
    def jitter(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "jitter", value)

    @_builtins.property
    @pulumi.getter
    def latency(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        Latency in ms
          - Range: `1`-`1000`
        """
        return pulumi.get(self, "latency")

    @latency.setter
    def latency(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "latency", value)

    @_builtins.property
    @pulumi.getter
    def loss(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        Loss in percent
          - Range: `1`-`100`
        """
        return pulumi.get(self, "loss")

    @loss.setter
    def loss(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "loss", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The name of the policy object
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class _SlaClassPolicyObjectState:
    def __init__(__self__, *,
                 app_probe_class_id: Optional[pulumi.Input[_builtins.str]] = None,
                 app_probe_class_version: Optional[pulumi.Input[_builtins.int]] = None,
                 fallback_best_tunnel_criteria: Optional[pulumi.Input[_builtins.str]] = None,
                 fallback_best_tunnel_jitter: Optional[pulumi.Input[_builtins.int]] = None,
                 fallback_best_tunnel_latency: Optional[pulumi.Input[_builtins.int]] = None,
                 fallback_best_tunnel_loss: Optional[pulumi.Input[_builtins.int]] = None,
                 jitter: Optional[pulumi.Input[_builtins.int]] = None,
                 latency: Optional[pulumi.Input[_builtins.int]] = None,
                 loss: Optional[pulumi.Input[_builtins.int]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 version: Optional[pulumi.Input[_builtins.int]] = None):
        """
        Input properties used for looking up and filtering SlaClassPolicyObject resources.
        :param pulumi.Input[_builtins.str] app_probe_class_id: App Probe Class Policy Object ID
        :param pulumi.Input[_builtins.int] app_probe_class_version: App Probe Class Policy Object version
        :param pulumi.Input[_builtins.str] fallback_best_tunnel_criteria: - Choices: `loss`, `latency`, `jitter`, `loss-latency`, `loss-jitter`, `latency-loss`, `latency-jitter`, `jitter-latency`, `jitter-loss`, `loss-latency-jitter`, `loss-jitter-latency`, `latency-loss-jitter`, `latency-jitter-loss`, `jitter-latency-loss`, `jitter-loss-latency`
        :param pulumi.Input[_builtins.int] fallback_best_tunnel_jitter: Jitter variance in ms
                 - Range: `1`-`1000`
        :param pulumi.Input[_builtins.int] fallback_best_tunnel_latency: Latency variance in ms
                 - Range: `1`-`1000`
        :param pulumi.Input[_builtins.int] fallback_best_tunnel_loss: Loss variance in percent
                 - Range: `1`-`100`
        :param pulumi.Input[_builtins.int] jitter: Jitter in ms
                 - Range: `1`-`1000`
        :param pulumi.Input[_builtins.int] latency: Latency in ms
                 - Range: `1`-`1000`
        :param pulumi.Input[_builtins.int] loss: Loss in percent
                 - Range: `1`-`100`
        :param pulumi.Input[_builtins.str] name: The name of the policy object
        :param pulumi.Input[_builtins.int] version: The version of the object
        """
        if app_probe_class_id is not None:
            pulumi.set(__self__, "app_probe_class_id", app_probe_class_id)
        if app_probe_class_version is not None:
            pulumi.set(__self__, "app_probe_class_version", app_probe_class_version)
        if fallback_best_tunnel_criteria is not None:
            pulumi.set(__self__, "fallback_best_tunnel_criteria", fallback_best_tunnel_criteria)
        if fallback_best_tunnel_jitter is not None:
            pulumi.set(__self__, "fallback_best_tunnel_jitter", fallback_best_tunnel_jitter)
        if fallback_best_tunnel_latency is not None:
            pulumi.set(__self__, "fallback_best_tunnel_latency", fallback_best_tunnel_latency)
        if fallback_best_tunnel_loss is not None:
            pulumi.set(__self__, "fallback_best_tunnel_loss", fallback_best_tunnel_loss)
        if jitter is not None:
            pulumi.set(__self__, "jitter", jitter)
        if latency is not None:
            pulumi.set(__self__, "latency", latency)
        if loss is not None:
            pulumi.set(__self__, "loss", loss)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if version is not None:
            pulumi.set(__self__, "version", version)

    @_builtins.property
    @pulumi.getter(name="appProbeClassId")
    def app_probe_class_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        App Probe Class Policy Object ID
        """
        return pulumi.get(self, "app_probe_class_id")

    @app_probe_class_id.setter
    def app_probe_class_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "app_probe_class_id", value)

    @_builtins.property
    @pulumi.getter(name="appProbeClassVersion")
    def app_probe_class_version(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        App Probe Class Policy Object version
        """
        return pulumi.get(self, "app_probe_class_version")

    @app_probe_class_version.setter
    def app_probe_class_version(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "app_probe_class_version", value)

    @_builtins.property
    @pulumi.getter(name="fallbackBestTunnelCriteria")
    def fallback_best_tunnel_criteria(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        - Choices: `loss`, `latency`, `jitter`, `loss-latency`, `loss-jitter`, `latency-loss`, `latency-jitter`, `jitter-latency`, `jitter-loss`, `loss-latency-jitter`, `loss-jitter-latency`, `latency-loss-jitter`, `latency-jitter-loss`, `jitter-latency-loss`, `jitter-loss-latency`
        """
        return pulumi.get(self, "fallback_best_tunnel_criteria")

    @fallback_best_tunnel_criteria.setter
    def fallback_best_tunnel_criteria(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "fallback_best_tunnel_criteria", value)

    @_builtins.property
    @pulumi.getter(name="fallbackBestTunnelJitter")
    def fallback_best_tunnel_jitter(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        Jitter variance in ms
          - Range: `1`-`1000`
        """
        return pulumi.get(self, "fallback_best_tunnel_jitter")

    @fallback_best_tunnel_jitter.setter
    def fallback_best_tunnel_jitter(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "fallback_best_tunnel_jitter", value)

    @_builtins.property
    @pulumi.getter(name="fallbackBestTunnelLatency")
    def fallback_best_tunnel_latency(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        Latency variance in ms
          - Range: `1`-`1000`
        """
        return pulumi.get(self, "fallback_best_tunnel_latency")

    @fallback_best_tunnel_latency.setter
    def fallback_best_tunnel_latency(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "fallback_best_tunnel_latency", value)

    @_builtins.property
    @pulumi.getter(name="fallbackBestTunnelLoss")
    def fallback_best_tunnel_loss(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        Loss variance in percent
          - Range: `1`-`100`
        """
        return pulumi.get(self, "fallback_best_tunnel_loss")

    @fallback_best_tunnel_loss.setter
    def fallback_best_tunnel_loss(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "fallback_best_tunnel_loss", value)

    @_builtins.property
    @pulumi.getter
    def jitter(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        Jitter in ms
          - Range: `1`-`1000`
        """
        return pulumi.get(self, "jitter")

    @jitter.setter
    def jitter(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "jitter", value)

    @_builtins.property
    @pulumi.getter
    def latency(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        Latency in ms
          - Range: `1`-`1000`
        """
        return pulumi.get(self, "latency")

    @latency.setter
    def latency(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "latency", value)

    @_builtins.property
    @pulumi.getter
    def loss(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        Loss in percent
          - Range: `1`-`100`
        """
        return pulumi.get(self, "loss")

    @loss.setter
    def loss(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "loss", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The name of the policy object
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "name", value)

    @_builtins.property
    @pulumi.getter
    def version(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        The version of the object
        """
        return pulumi.get(self, "version")

    @version.setter
    def version(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "version", value)


@pulumi.type_token("sdwan:index/slaClassPolicyObject:SlaClassPolicyObject")
class SlaClassPolicyObject(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 app_probe_class_id: Optional[pulumi.Input[_builtins.str]] = None,
                 app_probe_class_version: Optional[pulumi.Input[_builtins.int]] = None,
                 fallback_best_tunnel_criteria: Optional[pulumi.Input[_builtins.str]] = None,
                 fallback_best_tunnel_jitter: Optional[pulumi.Input[_builtins.int]] = None,
                 fallback_best_tunnel_latency: Optional[pulumi.Input[_builtins.int]] = None,
                 fallback_best_tunnel_loss: Optional[pulumi.Input[_builtins.int]] = None,
                 jitter: Optional[pulumi.Input[_builtins.int]] = None,
                 latency: Optional[pulumi.Input[_builtins.int]] = None,
                 loss: Optional[pulumi.Input[_builtins.int]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 __props__=None):
        """
        This resource can manage a SLA Class Policy Object .

        ## Example Usage

        ```python
        import pulumi
        import pulumi_sdwan as sdwan

        example = sdwan.SlaClassPolicyObject("example",
            name="Example",
            jitter=100,
            latency=10,
            loss=1,
            fallback_best_tunnel_criteria="jitter-loss-latency",
            fallback_best_tunnel_jitter=100,
            fallback_best_tunnel_latency=10,
            fallback_best_tunnel_loss=1)
        ```

        ## Import

        The `pulumi import` command can be used, for example:

        ```sh
        $ pulumi import sdwan:index/slaClassPolicyObject:SlaClassPolicyObject example "f6b2c44c-693c-4763-b010-895aa3d236bd"
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.str] app_probe_class_id: App Probe Class Policy Object ID
        :param pulumi.Input[_builtins.int] app_probe_class_version: App Probe Class Policy Object version
        :param pulumi.Input[_builtins.str] fallback_best_tunnel_criteria: - Choices: `loss`, `latency`, `jitter`, `loss-latency`, `loss-jitter`, `latency-loss`, `latency-jitter`, `jitter-latency`, `jitter-loss`, `loss-latency-jitter`, `loss-jitter-latency`, `latency-loss-jitter`, `latency-jitter-loss`, `jitter-latency-loss`, `jitter-loss-latency`
        :param pulumi.Input[_builtins.int] fallback_best_tunnel_jitter: Jitter variance in ms
                 - Range: `1`-`1000`
        :param pulumi.Input[_builtins.int] fallback_best_tunnel_latency: Latency variance in ms
                 - Range: `1`-`1000`
        :param pulumi.Input[_builtins.int] fallback_best_tunnel_loss: Loss variance in percent
                 - Range: `1`-`100`
        :param pulumi.Input[_builtins.int] jitter: Jitter in ms
                 - Range: `1`-`1000`
        :param pulumi.Input[_builtins.int] latency: Latency in ms
                 - Range: `1`-`1000`
        :param pulumi.Input[_builtins.int] loss: Loss in percent
                 - Range: `1`-`100`
        :param pulumi.Input[_builtins.str] name: The name of the policy object
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: Optional[SlaClassPolicyObjectArgs] = None,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        This resource can manage a SLA Class Policy Object .

        ## Example Usage

        ```python
        import pulumi
        import pulumi_sdwan as sdwan

        example = sdwan.SlaClassPolicyObject("example",
            name="Example",
            jitter=100,
            latency=10,
            loss=1,
            fallback_best_tunnel_criteria="jitter-loss-latency",
            fallback_best_tunnel_jitter=100,
            fallback_best_tunnel_latency=10,
            fallback_best_tunnel_loss=1)
        ```

        ## Import

        The `pulumi import` command can be used, for example:

        ```sh
        $ pulumi import sdwan:index/slaClassPolicyObject:SlaClassPolicyObject example "f6b2c44c-693c-4763-b010-895aa3d236bd"
        ```

        :param str resource_name: The name of the resource.
        :param SlaClassPolicyObjectArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(SlaClassPolicyObjectArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 app_probe_class_id: Optional[pulumi.Input[_builtins.str]] = None,
                 app_probe_class_version: Optional[pulumi.Input[_builtins.int]] = None,
                 fallback_best_tunnel_criteria: Optional[pulumi.Input[_builtins.str]] = None,
                 fallback_best_tunnel_jitter: Optional[pulumi.Input[_builtins.int]] = None,
                 fallback_best_tunnel_latency: Optional[pulumi.Input[_builtins.int]] = None,
                 fallback_best_tunnel_loss: Optional[pulumi.Input[_builtins.int]] = None,
                 jitter: Optional[pulumi.Input[_builtins.int]] = None,
                 latency: Optional[pulumi.Input[_builtins.int]] = None,
                 loss: Optional[pulumi.Input[_builtins.int]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = SlaClassPolicyObjectArgs.__new__(SlaClassPolicyObjectArgs)

            __props__.__dict__["app_probe_class_id"] = app_probe_class_id
            __props__.__dict__["app_probe_class_version"] = app_probe_class_version
            __props__.__dict__["fallback_best_tunnel_criteria"] = fallback_best_tunnel_criteria
            __props__.__dict__["fallback_best_tunnel_jitter"] = fallback_best_tunnel_jitter
            __props__.__dict__["fallback_best_tunnel_latency"] = fallback_best_tunnel_latency
            __props__.__dict__["fallback_best_tunnel_loss"] = fallback_best_tunnel_loss
            __props__.__dict__["jitter"] = jitter
            __props__.__dict__["latency"] = latency
            __props__.__dict__["loss"] = loss
            __props__.__dict__["name"] = name
            __props__.__dict__["version"] = None
        super(SlaClassPolicyObject, __self__).__init__(
            'sdwan:index/slaClassPolicyObject:SlaClassPolicyObject',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            app_probe_class_id: Optional[pulumi.Input[_builtins.str]] = None,
            app_probe_class_version: Optional[pulumi.Input[_builtins.int]] = None,
            fallback_best_tunnel_criteria: Optional[pulumi.Input[_builtins.str]] = None,
            fallback_best_tunnel_jitter: Optional[pulumi.Input[_builtins.int]] = None,
            fallback_best_tunnel_latency: Optional[pulumi.Input[_builtins.int]] = None,
            fallback_best_tunnel_loss: Optional[pulumi.Input[_builtins.int]] = None,
            jitter: Optional[pulumi.Input[_builtins.int]] = None,
            latency: Optional[pulumi.Input[_builtins.int]] = None,
            loss: Optional[pulumi.Input[_builtins.int]] = None,
            name: Optional[pulumi.Input[_builtins.str]] = None,
            version: Optional[pulumi.Input[_builtins.int]] = None) -> 'SlaClassPolicyObject':
        """
        Get an existing SlaClassPolicyObject resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.str] app_probe_class_id: App Probe Class Policy Object ID
        :param pulumi.Input[_builtins.int] app_probe_class_version: App Probe Class Policy Object version
        :param pulumi.Input[_builtins.str] fallback_best_tunnel_criteria: - Choices: `loss`, `latency`, `jitter`, `loss-latency`, `loss-jitter`, `latency-loss`, `latency-jitter`, `jitter-latency`, `jitter-loss`, `loss-latency-jitter`, `loss-jitter-latency`, `latency-loss-jitter`, `latency-jitter-loss`, `jitter-latency-loss`, `jitter-loss-latency`
        :param pulumi.Input[_builtins.int] fallback_best_tunnel_jitter: Jitter variance in ms
                 - Range: `1`-`1000`
        :param pulumi.Input[_builtins.int] fallback_best_tunnel_latency: Latency variance in ms
                 - Range: `1`-`1000`
        :param pulumi.Input[_builtins.int] fallback_best_tunnel_loss: Loss variance in percent
                 - Range: `1`-`100`
        :param pulumi.Input[_builtins.int] jitter: Jitter in ms
                 - Range: `1`-`1000`
        :param pulumi.Input[_builtins.int] latency: Latency in ms
                 - Range: `1`-`1000`
        :param pulumi.Input[_builtins.int] loss: Loss in percent
                 - Range: `1`-`100`
        :param pulumi.Input[_builtins.str] name: The name of the policy object
        :param pulumi.Input[_builtins.int] version: The version of the object
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _SlaClassPolicyObjectState.__new__(_SlaClassPolicyObjectState)

        __props__.__dict__["app_probe_class_id"] = app_probe_class_id
        __props__.__dict__["app_probe_class_version"] = app_probe_class_version
        __props__.__dict__["fallback_best_tunnel_criteria"] = fallback_best_tunnel_criteria
        __props__.__dict__["fallback_best_tunnel_jitter"] = fallback_best_tunnel_jitter
        __props__.__dict__["fallback_best_tunnel_latency"] = fallback_best_tunnel_latency
        __props__.__dict__["fallback_best_tunnel_loss"] = fallback_best_tunnel_loss
        __props__.__dict__["jitter"] = jitter
        __props__.__dict__["latency"] = latency
        __props__.__dict__["loss"] = loss
        __props__.__dict__["name"] = name
        __props__.__dict__["version"] = version
        return SlaClassPolicyObject(resource_name, opts=opts, __props__=__props__)

    @_builtins.property
    @pulumi.getter(name="appProbeClassId")
    def app_probe_class_id(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        App Probe Class Policy Object ID
        """
        return pulumi.get(self, "app_probe_class_id")

    @_builtins.property
    @pulumi.getter(name="appProbeClassVersion")
    def app_probe_class_version(self) -> pulumi.Output[Optional[_builtins.int]]:
        """
        App Probe Class Policy Object version
        """
        return pulumi.get(self, "app_probe_class_version")

    @_builtins.property
    @pulumi.getter(name="fallbackBestTunnelCriteria")
    def fallback_best_tunnel_criteria(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        - Choices: `loss`, `latency`, `jitter`, `loss-latency`, `loss-jitter`, `latency-loss`, `latency-jitter`, `jitter-latency`, `jitter-loss`, `loss-latency-jitter`, `loss-jitter-latency`, `latency-loss-jitter`, `latency-jitter-loss`, `jitter-latency-loss`, `jitter-loss-latency`
        """
        return pulumi.get(self, "fallback_best_tunnel_criteria")

    @_builtins.property
    @pulumi.getter(name="fallbackBestTunnelJitter")
    def fallback_best_tunnel_jitter(self) -> pulumi.Output[Optional[_builtins.int]]:
        """
        Jitter variance in ms
          - Range: `1`-`1000`
        """
        return pulumi.get(self, "fallback_best_tunnel_jitter")

    @_builtins.property
    @pulumi.getter(name="fallbackBestTunnelLatency")
    def fallback_best_tunnel_latency(self) -> pulumi.Output[Optional[_builtins.int]]:
        """
        Latency variance in ms
          - Range: `1`-`1000`
        """
        return pulumi.get(self, "fallback_best_tunnel_latency")

    @_builtins.property
    @pulumi.getter(name="fallbackBestTunnelLoss")
    def fallback_best_tunnel_loss(self) -> pulumi.Output[Optional[_builtins.int]]:
        """
        Loss variance in percent
          - Range: `1`-`100`
        """
        return pulumi.get(self, "fallback_best_tunnel_loss")

    @_builtins.property
    @pulumi.getter
    def jitter(self) -> pulumi.Output[Optional[_builtins.int]]:
        """
        Jitter in ms
          - Range: `1`-`1000`
        """
        return pulumi.get(self, "jitter")

    @_builtins.property
    @pulumi.getter
    def latency(self) -> pulumi.Output[Optional[_builtins.int]]:
        """
        Latency in ms
          - Range: `1`-`1000`
        """
        return pulumi.get(self, "latency")

    @_builtins.property
    @pulumi.getter
    def loss(self) -> pulumi.Output[Optional[_builtins.int]]:
        """
        Loss in percent
          - Range: `1`-`100`
        """
        return pulumi.get(self, "loss")

    @_builtins.property
    @pulumi.getter
    def name(self) -> pulumi.Output[_builtins.str]:
        """
        The name of the policy object
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def version(self) -> pulumi.Output[_builtins.int]:
        """
        The version of the object
        """
        return pulumi.get(self, "version")

