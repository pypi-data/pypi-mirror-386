# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities
from . import outputs
from ._inputs import *

__all__ = ['TransportRoutingOspfv3Ipv4FeatureArgs', 'TransportRoutingOspfv3Ipv4Feature']

@pulumi.input_type
class TransportRoutingOspfv3Ipv4FeatureArgs:
    def __init__(__self__, *,
                 feature_profile_id: pulumi.Input[_builtins.str],
                 areas: Optional[pulumi.Input[Sequence[pulumi.Input['TransportRoutingOspfv3Ipv4FeatureAreaArgs']]]] = None,
                 default_information_originate: Optional[pulumi.Input[_builtins.bool]] = None,
                 default_information_originate_always: Optional[pulumi.Input[_builtins.bool]] = None,
                 default_information_originate_always_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 default_information_originate_metric: Optional[pulumi.Input[_builtins.int]] = None,
                 default_information_originate_metric_type: Optional[pulumi.Input[_builtins.str]] = None,
                 default_information_originate_metric_type_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 default_information_originate_metric_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 description: Optional[pulumi.Input[_builtins.str]] = None,
                 distance: Optional[pulumi.Input[_builtins.int]] = None,
                 distance_external: Optional[pulumi.Input[_builtins.int]] = None,
                 distance_external_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 distance_inter_area: Optional[pulumi.Input[_builtins.int]] = None,
                 distance_inter_area_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 distance_intra_area: Optional[pulumi.Input[_builtins.int]] = None,
                 distance_intra_area_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 distance_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 filter: Optional[pulumi.Input[_builtins.bool]] = None,
                 filter_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 redistributes: Optional[pulumi.Input[Sequence[pulumi.Input['TransportRoutingOspfv3Ipv4FeatureRedistributeArgs']]]] = None,
                 reference_bandwidth: Optional[pulumi.Input[_builtins.int]] = None,
                 reference_bandwidth_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 rfc1583_compatible: Optional[pulumi.Input[_builtins.bool]] = None,
                 rfc1583_compatible_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 route_policy_id: Optional[pulumi.Input[_builtins.str]] = None,
                 router_id: Optional[pulumi.Input[_builtins.str]] = None,
                 router_id_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 router_lsa_action: Optional[pulumi.Input[_builtins.str]] = None,
                 router_lsa_on_startup_time: Optional[pulumi.Input[_builtins.int]] = None,
                 router_lsa_on_startup_time_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 spf_calculation_delay: Optional[pulumi.Input[_builtins.int]] = None,
                 spf_calculation_delay_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 spf_initial_hold_time: Optional[pulumi.Input[_builtins.int]] = None,
                 spf_initial_hold_time_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 spf_maximum_hold_time: Optional[pulumi.Input[_builtins.int]] = None,
                 spf_maximum_hold_time_variable: Optional[pulumi.Input[_builtins.str]] = None):
        """
        The set of arguments for constructing a TransportRoutingOspfv3Ipv4Feature resource.
        :param pulumi.Input[_builtins.str] feature_profile_id: Feature Profile ID
        :param pulumi.Input[Sequence[pulumi.Input['TransportRoutingOspfv3Ipv4FeatureAreaArgs']]] areas: Configure OSPFv3 IPv4 area
        :param pulumi.Input[_builtins.bool] default_information_originate: Distribute default external route into OSPF disabled
        :param pulumi.Input[_builtins.bool] default_information_originate_always: Always advertise default route
        :param pulumi.Input[_builtins.str] default_information_originate_always_variable: Variable name
        :param pulumi.Input[_builtins.int] default_information_originate_metric: Set metric used to generate default route <0..16777214>
                 - Range: `0`-`16777214`
        :param pulumi.Input[_builtins.str] default_information_originate_metric_type: Set default route metric type
                 - Choices: `type1`, `type2`
        :param pulumi.Input[_builtins.str] default_information_originate_metric_type_variable: Variable name
        :param pulumi.Input[_builtins.str] default_information_originate_metric_variable: Variable name
        :param pulumi.Input[_builtins.str] description: The description of the Feature
        :param pulumi.Input[_builtins.int] distance: Distance
                 - Range: `1`-`255`
                 - Default value: `110`
        :param pulumi.Input[_builtins.int] distance_external: Set distance for external routes
                 - Range: `1`-`254`
                 - Default value: `110`
        :param pulumi.Input[_builtins.str] distance_external_variable: Variable name
        :param pulumi.Input[_builtins.int] distance_inter_area: Set distance for inter-area routes
                 - Range: `1`-`254`
                 - Default value: `110`
        :param pulumi.Input[_builtins.str] distance_inter_area_variable: Variable name
        :param pulumi.Input[_builtins.int] distance_intra_area: Set distance for intra-area routes
                 - Range: `1`-`254`
                 - Default value: `110`
        :param pulumi.Input[_builtins.str] distance_intra_area_variable: Variable name
        :param pulumi.Input[_builtins.str] distance_variable: Variable name
        :param pulumi.Input[_builtins.bool] filter: Table map filtered or not
                 - Default value: `false`
        :param pulumi.Input[_builtins.str] filter_variable: Variable name
        :param pulumi.Input[_builtins.str] name: The name of the Feature
        :param pulumi.Input[Sequence[pulumi.Input['TransportRoutingOspfv3Ipv4FeatureRedistributeArgs']]] redistributes: Redistribute routes
        :param pulumi.Input[_builtins.int] reference_bandwidth: Set reference bandwidth method to assign OSPF cost
                 - Range: `1`-`4294967`
                 - Default value: `100`
        :param pulumi.Input[_builtins.str] reference_bandwidth_variable: Variable name
        :param pulumi.Input[_builtins.bool] rfc1583_compatible: Calculate summary route cost based on RFC 1583
                 - Default value: `true`
        :param pulumi.Input[_builtins.str] rfc1583_compatible_variable: Variable name
        :param pulumi.Input[_builtins.str] router_id: Set OSPF router ID to override system IP address
        :param pulumi.Input[_builtins.str] router_id_variable: Variable name
        :param pulumi.Input[_builtins.str] router_lsa_action: Not advertise maximum metric Router LSA policy by default
        :param pulumi.Input[_builtins.int] router_lsa_on_startup_time: Set how long to advertise maximum metric after router boot up
                 - Range: `5`-`86400`
        :param pulumi.Input[_builtins.str] router_lsa_on_startup_time_variable: Variable name
        :param pulumi.Input[_builtins.int] spf_calculation_delay: Set delay from first change received until performing SPF calculation
                 - Range: `1`-`600000`
                 - Default value: `200`
        :param pulumi.Input[_builtins.str] spf_calculation_delay_variable: Variable name
        :param pulumi.Input[_builtins.int] spf_initial_hold_time: Set initial hold time between consecutive SPF calculations
                 - Range: `1`-`600000`
                 - Default value: `1000`
        :param pulumi.Input[_builtins.str] spf_initial_hold_time_variable: Variable name
        :param pulumi.Input[_builtins.int] spf_maximum_hold_time: Set maximum hold time between consecutive SPF calculations
                 - Range: `1`-`600000`
                 - Default value: `10000`
        :param pulumi.Input[_builtins.str] spf_maximum_hold_time_variable: Variable name
        """
        pulumi.set(__self__, "feature_profile_id", feature_profile_id)
        if areas is not None:
            pulumi.set(__self__, "areas", areas)
        if default_information_originate is not None:
            pulumi.set(__self__, "default_information_originate", default_information_originate)
        if default_information_originate_always is not None:
            pulumi.set(__self__, "default_information_originate_always", default_information_originate_always)
        if default_information_originate_always_variable is not None:
            pulumi.set(__self__, "default_information_originate_always_variable", default_information_originate_always_variable)
        if default_information_originate_metric is not None:
            pulumi.set(__self__, "default_information_originate_metric", default_information_originate_metric)
        if default_information_originate_metric_type is not None:
            pulumi.set(__self__, "default_information_originate_metric_type", default_information_originate_metric_type)
        if default_information_originate_metric_type_variable is not None:
            pulumi.set(__self__, "default_information_originate_metric_type_variable", default_information_originate_metric_type_variable)
        if default_information_originate_metric_variable is not None:
            pulumi.set(__self__, "default_information_originate_metric_variable", default_information_originate_metric_variable)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if distance is not None:
            pulumi.set(__self__, "distance", distance)
        if distance_external is not None:
            pulumi.set(__self__, "distance_external", distance_external)
        if distance_external_variable is not None:
            pulumi.set(__self__, "distance_external_variable", distance_external_variable)
        if distance_inter_area is not None:
            pulumi.set(__self__, "distance_inter_area", distance_inter_area)
        if distance_inter_area_variable is not None:
            pulumi.set(__self__, "distance_inter_area_variable", distance_inter_area_variable)
        if distance_intra_area is not None:
            pulumi.set(__self__, "distance_intra_area", distance_intra_area)
        if distance_intra_area_variable is not None:
            pulumi.set(__self__, "distance_intra_area_variable", distance_intra_area_variable)
        if distance_variable is not None:
            pulumi.set(__self__, "distance_variable", distance_variable)
        if filter is not None:
            pulumi.set(__self__, "filter", filter)
        if filter_variable is not None:
            pulumi.set(__self__, "filter_variable", filter_variable)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if redistributes is not None:
            pulumi.set(__self__, "redistributes", redistributes)
        if reference_bandwidth is not None:
            pulumi.set(__self__, "reference_bandwidth", reference_bandwidth)
        if reference_bandwidth_variable is not None:
            pulumi.set(__self__, "reference_bandwidth_variable", reference_bandwidth_variable)
        if rfc1583_compatible is not None:
            pulumi.set(__self__, "rfc1583_compatible", rfc1583_compatible)
        if rfc1583_compatible_variable is not None:
            pulumi.set(__self__, "rfc1583_compatible_variable", rfc1583_compatible_variable)
        if route_policy_id is not None:
            pulumi.set(__self__, "route_policy_id", route_policy_id)
        if router_id is not None:
            pulumi.set(__self__, "router_id", router_id)
        if router_id_variable is not None:
            pulumi.set(__self__, "router_id_variable", router_id_variable)
        if router_lsa_action is not None:
            pulumi.set(__self__, "router_lsa_action", router_lsa_action)
        if router_lsa_on_startup_time is not None:
            pulumi.set(__self__, "router_lsa_on_startup_time", router_lsa_on_startup_time)
        if router_lsa_on_startup_time_variable is not None:
            pulumi.set(__self__, "router_lsa_on_startup_time_variable", router_lsa_on_startup_time_variable)
        if spf_calculation_delay is not None:
            pulumi.set(__self__, "spf_calculation_delay", spf_calculation_delay)
        if spf_calculation_delay_variable is not None:
            pulumi.set(__self__, "spf_calculation_delay_variable", spf_calculation_delay_variable)
        if spf_initial_hold_time is not None:
            pulumi.set(__self__, "spf_initial_hold_time", spf_initial_hold_time)
        if spf_initial_hold_time_variable is not None:
            pulumi.set(__self__, "spf_initial_hold_time_variable", spf_initial_hold_time_variable)
        if spf_maximum_hold_time is not None:
            pulumi.set(__self__, "spf_maximum_hold_time", spf_maximum_hold_time)
        if spf_maximum_hold_time_variable is not None:
            pulumi.set(__self__, "spf_maximum_hold_time_variable", spf_maximum_hold_time_variable)

    @_builtins.property
    @pulumi.getter(name="featureProfileId")
    def feature_profile_id(self) -> pulumi.Input[_builtins.str]:
        """
        Feature Profile ID
        """
        return pulumi.get(self, "feature_profile_id")

    @feature_profile_id.setter
    def feature_profile_id(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "feature_profile_id", value)

    @_builtins.property
    @pulumi.getter
    def areas(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['TransportRoutingOspfv3Ipv4FeatureAreaArgs']]]]:
        """
        Configure OSPFv3 IPv4 area
        """
        return pulumi.get(self, "areas")

    @areas.setter
    def areas(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['TransportRoutingOspfv3Ipv4FeatureAreaArgs']]]]):
        pulumi.set(self, "areas", value)

    @_builtins.property
    @pulumi.getter(name="defaultInformationOriginate")
    def default_information_originate(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Distribute default external route into OSPF disabled
        """
        return pulumi.get(self, "default_information_originate")

    @default_information_originate.setter
    def default_information_originate(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "default_information_originate", value)

    @_builtins.property
    @pulumi.getter(name="defaultInformationOriginateAlways")
    def default_information_originate_always(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Always advertise default route
        """
        return pulumi.get(self, "default_information_originate_always")

    @default_information_originate_always.setter
    def default_information_originate_always(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "default_information_originate_always", value)

    @_builtins.property
    @pulumi.getter(name="defaultInformationOriginateAlwaysVariable")
    def default_information_originate_always_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "default_information_originate_always_variable")

    @default_information_originate_always_variable.setter
    def default_information_originate_always_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "default_information_originate_always_variable", value)

    @_builtins.property
    @pulumi.getter(name="defaultInformationOriginateMetric")
    def default_information_originate_metric(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        Set metric used to generate default route <0..16777214>
          - Range: `0`-`16777214`
        """
        return pulumi.get(self, "default_information_originate_metric")

    @default_information_originate_metric.setter
    def default_information_originate_metric(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "default_information_originate_metric", value)

    @_builtins.property
    @pulumi.getter(name="defaultInformationOriginateMetricType")
    def default_information_originate_metric_type(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Set default route metric type
          - Choices: `type1`, `type2`
        """
        return pulumi.get(self, "default_information_originate_metric_type")

    @default_information_originate_metric_type.setter
    def default_information_originate_metric_type(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "default_information_originate_metric_type", value)

    @_builtins.property
    @pulumi.getter(name="defaultInformationOriginateMetricTypeVariable")
    def default_information_originate_metric_type_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "default_information_originate_metric_type_variable")

    @default_information_originate_metric_type_variable.setter
    def default_information_originate_metric_type_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "default_information_originate_metric_type_variable", value)

    @_builtins.property
    @pulumi.getter(name="defaultInformationOriginateMetricVariable")
    def default_information_originate_metric_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "default_information_originate_metric_variable")

    @default_information_originate_metric_variable.setter
    def default_information_originate_metric_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "default_information_originate_metric_variable", value)

    @_builtins.property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The description of the Feature
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "description", value)

    @_builtins.property
    @pulumi.getter
    def distance(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        Distance
          - Range: `1`-`255`
          - Default value: `110`
        """
        return pulumi.get(self, "distance")

    @distance.setter
    def distance(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "distance", value)

    @_builtins.property
    @pulumi.getter(name="distanceExternal")
    def distance_external(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        Set distance for external routes
          - Range: `1`-`254`
          - Default value: `110`
        """
        return pulumi.get(self, "distance_external")

    @distance_external.setter
    def distance_external(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "distance_external", value)

    @_builtins.property
    @pulumi.getter(name="distanceExternalVariable")
    def distance_external_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "distance_external_variable")

    @distance_external_variable.setter
    def distance_external_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "distance_external_variable", value)

    @_builtins.property
    @pulumi.getter(name="distanceInterArea")
    def distance_inter_area(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        Set distance for inter-area routes
          - Range: `1`-`254`
          - Default value: `110`
        """
        return pulumi.get(self, "distance_inter_area")

    @distance_inter_area.setter
    def distance_inter_area(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "distance_inter_area", value)

    @_builtins.property
    @pulumi.getter(name="distanceInterAreaVariable")
    def distance_inter_area_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "distance_inter_area_variable")

    @distance_inter_area_variable.setter
    def distance_inter_area_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "distance_inter_area_variable", value)

    @_builtins.property
    @pulumi.getter(name="distanceIntraArea")
    def distance_intra_area(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        Set distance for intra-area routes
          - Range: `1`-`254`
          - Default value: `110`
        """
        return pulumi.get(self, "distance_intra_area")

    @distance_intra_area.setter
    def distance_intra_area(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "distance_intra_area", value)

    @_builtins.property
    @pulumi.getter(name="distanceIntraAreaVariable")
    def distance_intra_area_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "distance_intra_area_variable")

    @distance_intra_area_variable.setter
    def distance_intra_area_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "distance_intra_area_variable", value)

    @_builtins.property
    @pulumi.getter(name="distanceVariable")
    def distance_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "distance_variable")

    @distance_variable.setter
    def distance_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "distance_variable", value)

    @_builtins.property
    @pulumi.getter
    def filter(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Table map filtered or not
          - Default value: `false`
        """
        return pulumi.get(self, "filter")

    @filter.setter
    def filter(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "filter", value)

    @_builtins.property
    @pulumi.getter(name="filterVariable")
    def filter_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "filter_variable")

    @filter_variable.setter
    def filter_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "filter_variable", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The name of the Feature
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "name", value)

    @_builtins.property
    @pulumi.getter
    def redistributes(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['TransportRoutingOspfv3Ipv4FeatureRedistributeArgs']]]]:
        """
        Redistribute routes
        """
        return pulumi.get(self, "redistributes")

    @redistributes.setter
    def redistributes(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['TransportRoutingOspfv3Ipv4FeatureRedistributeArgs']]]]):
        pulumi.set(self, "redistributes", value)

    @_builtins.property
    @pulumi.getter(name="referenceBandwidth")
    def reference_bandwidth(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        Set reference bandwidth method to assign OSPF cost
          - Range: `1`-`4294967`
          - Default value: `100`
        """
        return pulumi.get(self, "reference_bandwidth")

    @reference_bandwidth.setter
    def reference_bandwidth(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "reference_bandwidth", value)

    @_builtins.property
    @pulumi.getter(name="referenceBandwidthVariable")
    def reference_bandwidth_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "reference_bandwidth_variable")

    @reference_bandwidth_variable.setter
    def reference_bandwidth_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "reference_bandwidth_variable", value)

    @_builtins.property
    @pulumi.getter(name="rfc1583Compatible")
    def rfc1583_compatible(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Calculate summary route cost based on RFC 1583
          - Default value: `true`
        """
        return pulumi.get(self, "rfc1583_compatible")

    @rfc1583_compatible.setter
    def rfc1583_compatible(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "rfc1583_compatible", value)

    @_builtins.property
    @pulumi.getter(name="rfc1583CompatibleVariable")
    def rfc1583_compatible_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "rfc1583_compatible_variable")

    @rfc1583_compatible_variable.setter
    def rfc1583_compatible_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "rfc1583_compatible_variable", value)

    @_builtins.property
    @pulumi.getter(name="routePolicyId")
    def route_policy_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "route_policy_id")

    @route_policy_id.setter
    def route_policy_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "route_policy_id", value)

    @_builtins.property
    @pulumi.getter(name="routerId")
    def router_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Set OSPF router ID to override system IP address
        """
        return pulumi.get(self, "router_id")

    @router_id.setter
    def router_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "router_id", value)

    @_builtins.property
    @pulumi.getter(name="routerIdVariable")
    def router_id_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "router_id_variable")

    @router_id_variable.setter
    def router_id_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "router_id_variable", value)

    @_builtins.property
    @pulumi.getter(name="routerLsaAction")
    def router_lsa_action(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Not advertise maximum metric Router LSA policy by default
        """
        return pulumi.get(self, "router_lsa_action")

    @router_lsa_action.setter
    def router_lsa_action(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "router_lsa_action", value)

    @_builtins.property
    @pulumi.getter(name="routerLsaOnStartupTime")
    def router_lsa_on_startup_time(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        Set how long to advertise maximum metric after router boot up
          - Range: `5`-`86400`
        """
        return pulumi.get(self, "router_lsa_on_startup_time")

    @router_lsa_on_startup_time.setter
    def router_lsa_on_startup_time(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "router_lsa_on_startup_time", value)

    @_builtins.property
    @pulumi.getter(name="routerLsaOnStartupTimeVariable")
    def router_lsa_on_startup_time_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "router_lsa_on_startup_time_variable")

    @router_lsa_on_startup_time_variable.setter
    def router_lsa_on_startup_time_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "router_lsa_on_startup_time_variable", value)

    @_builtins.property
    @pulumi.getter(name="spfCalculationDelay")
    def spf_calculation_delay(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        Set delay from first change received until performing SPF calculation
          - Range: `1`-`600000`
          - Default value: `200`
        """
        return pulumi.get(self, "spf_calculation_delay")

    @spf_calculation_delay.setter
    def spf_calculation_delay(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "spf_calculation_delay", value)

    @_builtins.property
    @pulumi.getter(name="spfCalculationDelayVariable")
    def spf_calculation_delay_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "spf_calculation_delay_variable")

    @spf_calculation_delay_variable.setter
    def spf_calculation_delay_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "spf_calculation_delay_variable", value)

    @_builtins.property
    @pulumi.getter(name="spfInitialHoldTime")
    def spf_initial_hold_time(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        Set initial hold time between consecutive SPF calculations
          - Range: `1`-`600000`
          - Default value: `1000`
        """
        return pulumi.get(self, "spf_initial_hold_time")

    @spf_initial_hold_time.setter
    def spf_initial_hold_time(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "spf_initial_hold_time", value)

    @_builtins.property
    @pulumi.getter(name="spfInitialHoldTimeVariable")
    def spf_initial_hold_time_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "spf_initial_hold_time_variable")

    @spf_initial_hold_time_variable.setter
    def spf_initial_hold_time_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "spf_initial_hold_time_variable", value)

    @_builtins.property
    @pulumi.getter(name="spfMaximumHoldTime")
    def spf_maximum_hold_time(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        Set maximum hold time between consecutive SPF calculations
          - Range: `1`-`600000`
          - Default value: `10000`
        """
        return pulumi.get(self, "spf_maximum_hold_time")

    @spf_maximum_hold_time.setter
    def spf_maximum_hold_time(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "spf_maximum_hold_time", value)

    @_builtins.property
    @pulumi.getter(name="spfMaximumHoldTimeVariable")
    def spf_maximum_hold_time_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "spf_maximum_hold_time_variable")

    @spf_maximum_hold_time_variable.setter
    def spf_maximum_hold_time_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "spf_maximum_hold_time_variable", value)


@pulumi.input_type
class _TransportRoutingOspfv3Ipv4FeatureState:
    def __init__(__self__, *,
                 areas: Optional[pulumi.Input[Sequence[pulumi.Input['TransportRoutingOspfv3Ipv4FeatureAreaArgs']]]] = None,
                 default_information_originate: Optional[pulumi.Input[_builtins.bool]] = None,
                 default_information_originate_always: Optional[pulumi.Input[_builtins.bool]] = None,
                 default_information_originate_always_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 default_information_originate_metric: Optional[pulumi.Input[_builtins.int]] = None,
                 default_information_originate_metric_type: Optional[pulumi.Input[_builtins.str]] = None,
                 default_information_originate_metric_type_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 default_information_originate_metric_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 description: Optional[pulumi.Input[_builtins.str]] = None,
                 distance: Optional[pulumi.Input[_builtins.int]] = None,
                 distance_external: Optional[pulumi.Input[_builtins.int]] = None,
                 distance_external_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 distance_inter_area: Optional[pulumi.Input[_builtins.int]] = None,
                 distance_inter_area_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 distance_intra_area: Optional[pulumi.Input[_builtins.int]] = None,
                 distance_intra_area_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 distance_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 feature_profile_id: Optional[pulumi.Input[_builtins.str]] = None,
                 filter: Optional[pulumi.Input[_builtins.bool]] = None,
                 filter_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 redistributes: Optional[pulumi.Input[Sequence[pulumi.Input['TransportRoutingOspfv3Ipv4FeatureRedistributeArgs']]]] = None,
                 reference_bandwidth: Optional[pulumi.Input[_builtins.int]] = None,
                 reference_bandwidth_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 rfc1583_compatible: Optional[pulumi.Input[_builtins.bool]] = None,
                 rfc1583_compatible_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 route_policy_id: Optional[pulumi.Input[_builtins.str]] = None,
                 router_id: Optional[pulumi.Input[_builtins.str]] = None,
                 router_id_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 router_lsa_action: Optional[pulumi.Input[_builtins.str]] = None,
                 router_lsa_on_startup_time: Optional[pulumi.Input[_builtins.int]] = None,
                 router_lsa_on_startup_time_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 spf_calculation_delay: Optional[pulumi.Input[_builtins.int]] = None,
                 spf_calculation_delay_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 spf_initial_hold_time: Optional[pulumi.Input[_builtins.int]] = None,
                 spf_initial_hold_time_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 spf_maximum_hold_time: Optional[pulumi.Input[_builtins.int]] = None,
                 spf_maximum_hold_time_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 version: Optional[pulumi.Input[_builtins.int]] = None):
        """
        Input properties used for looking up and filtering TransportRoutingOspfv3Ipv4Feature resources.
        :param pulumi.Input[Sequence[pulumi.Input['TransportRoutingOspfv3Ipv4FeatureAreaArgs']]] areas: Configure OSPFv3 IPv4 area
        :param pulumi.Input[_builtins.bool] default_information_originate: Distribute default external route into OSPF disabled
        :param pulumi.Input[_builtins.bool] default_information_originate_always: Always advertise default route
        :param pulumi.Input[_builtins.str] default_information_originate_always_variable: Variable name
        :param pulumi.Input[_builtins.int] default_information_originate_metric: Set metric used to generate default route <0..16777214>
                 - Range: `0`-`16777214`
        :param pulumi.Input[_builtins.str] default_information_originate_metric_type: Set default route metric type
                 - Choices: `type1`, `type2`
        :param pulumi.Input[_builtins.str] default_information_originate_metric_type_variable: Variable name
        :param pulumi.Input[_builtins.str] default_information_originate_metric_variable: Variable name
        :param pulumi.Input[_builtins.str] description: The description of the Feature
        :param pulumi.Input[_builtins.int] distance: Distance
                 - Range: `1`-`255`
                 - Default value: `110`
        :param pulumi.Input[_builtins.int] distance_external: Set distance for external routes
                 - Range: `1`-`254`
                 - Default value: `110`
        :param pulumi.Input[_builtins.str] distance_external_variable: Variable name
        :param pulumi.Input[_builtins.int] distance_inter_area: Set distance for inter-area routes
                 - Range: `1`-`254`
                 - Default value: `110`
        :param pulumi.Input[_builtins.str] distance_inter_area_variable: Variable name
        :param pulumi.Input[_builtins.int] distance_intra_area: Set distance for intra-area routes
                 - Range: `1`-`254`
                 - Default value: `110`
        :param pulumi.Input[_builtins.str] distance_intra_area_variable: Variable name
        :param pulumi.Input[_builtins.str] distance_variable: Variable name
        :param pulumi.Input[_builtins.str] feature_profile_id: Feature Profile ID
        :param pulumi.Input[_builtins.bool] filter: Table map filtered or not
                 - Default value: `false`
        :param pulumi.Input[_builtins.str] filter_variable: Variable name
        :param pulumi.Input[_builtins.str] name: The name of the Feature
        :param pulumi.Input[Sequence[pulumi.Input['TransportRoutingOspfv3Ipv4FeatureRedistributeArgs']]] redistributes: Redistribute routes
        :param pulumi.Input[_builtins.int] reference_bandwidth: Set reference bandwidth method to assign OSPF cost
                 - Range: `1`-`4294967`
                 - Default value: `100`
        :param pulumi.Input[_builtins.str] reference_bandwidth_variable: Variable name
        :param pulumi.Input[_builtins.bool] rfc1583_compatible: Calculate summary route cost based on RFC 1583
                 - Default value: `true`
        :param pulumi.Input[_builtins.str] rfc1583_compatible_variable: Variable name
        :param pulumi.Input[_builtins.str] router_id: Set OSPF router ID to override system IP address
        :param pulumi.Input[_builtins.str] router_id_variable: Variable name
        :param pulumi.Input[_builtins.str] router_lsa_action: Not advertise maximum metric Router LSA policy by default
        :param pulumi.Input[_builtins.int] router_lsa_on_startup_time: Set how long to advertise maximum metric after router boot up
                 - Range: `5`-`86400`
        :param pulumi.Input[_builtins.str] router_lsa_on_startup_time_variable: Variable name
        :param pulumi.Input[_builtins.int] spf_calculation_delay: Set delay from first change received until performing SPF calculation
                 - Range: `1`-`600000`
                 - Default value: `200`
        :param pulumi.Input[_builtins.str] spf_calculation_delay_variable: Variable name
        :param pulumi.Input[_builtins.int] spf_initial_hold_time: Set initial hold time between consecutive SPF calculations
                 - Range: `1`-`600000`
                 - Default value: `1000`
        :param pulumi.Input[_builtins.str] spf_initial_hold_time_variable: Variable name
        :param pulumi.Input[_builtins.int] spf_maximum_hold_time: Set maximum hold time between consecutive SPF calculations
                 - Range: `1`-`600000`
                 - Default value: `10000`
        :param pulumi.Input[_builtins.str] spf_maximum_hold_time_variable: Variable name
        :param pulumi.Input[_builtins.int] version: The version of the Feature
        """
        if areas is not None:
            pulumi.set(__self__, "areas", areas)
        if default_information_originate is not None:
            pulumi.set(__self__, "default_information_originate", default_information_originate)
        if default_information_originate_always is not None:
            pulumi.set(__self__, "default_information_originate_always", default_information_originate_always)
        if default_information_originate_always_variable is not None:
            pulumi.set(__self__, "default_information_originate_always_variable", default_information_originate_always_variable)
        if default_information_originate_metric is not None:
            pulumi.set(__self__, "default_information_originate_metric", default_information_originate_metric)
        if default_information_originate_metric_type is not None:
            pulumi.set(__self__, "default_information_originate_metric_type", default_information_originate_metric_type)
        if default_information_originate_metric_type_variable is not None:
            pulumi.set(__self__, "default_information_originate_metric_type_variable", default_information_originate_metric_type_variable)
        if default_information_originate_metric_variable is not None:
            pulumi.set(__self__, "default_information_originate_metric_variable", default_information_originate_metric_variable)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if distance is not None:
            pulumi.set(__self__, "distance", distance)
        if distance_external is not None:
            pulumi.set(__self__, "distance_external", distance_external)
        if distance_external_variable is not None:
            pulumi.set(__self__, "distance_external_variable", distance_external_variable)
        if distance_inter_area is not None:
            pulumi.set(__self__, "distance_inter_area", distance_inter_area)
        if distance_inter_area_variable is not None:
            pulumi.set(__self__, "distance_inter_area_variable", distance_inter_area_variable)
        if distance_intra_area is not None:
            pulumi.set(__self__, "distance_intra_area", distance_intra_area)
        if distance_intra_area_variable is not None:
            pulumi.set(__self__, "distance_intra_area_variable", distance_intra_area_variable)
        if distance_variable is not None:
            pulumi.set(__self__, "distance_variable", distance_variable)
        if feature_profile_id is not None:
            pulumi.set(__self__, "feature_profile_id", feature_profile_id)
        if filter is not None:
            pulumi.set(__self__, "filter", filter)
        if filter_variable is not None:
            pulumi.set(__self__, "filter_variable", filter_variable)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if redistributes is not None:
            pulumi.set(__self__, "redistributes", redistributes)
        if reference_bandwidth is not None:
            pulumi.set(__self__, "reference_bandwidth", reference_bandwidth)
        if reference_bandwidth_variable is not None:
            pulumi.set(__self__, "reference_bandwidth_variable", reference_bandwidth_variable)
        if rfc1583_compatible is not None:
            pulumi.set(__self__, "rfc1583_compatible", rfc1583_compatible)
        if rfc1583_compatible_variable is not None:
            pulumi.set(__self__, "rfc1583_compatible_variable", rfc1583_compatible_variable)
        if route_policy_id is not None:
            pulumi.set(__self__, "route_policy_id", route_policy_id)
        if router_id is not None:
            pulumi.set(__self__, "router_id", router_id)
        if router_id_variable is not None:
            pulumi.set(__self__, "router_id_variable", router_id_variable)
        if router_lsa_action is not None:
            pulumi.set(__self__, "router_lsa_action", router_lsa_action)
        if router_lsa_on_startup_time is not None:
            pulumi.set(__self__, "router_lsa_on_startup_time", router_lsa_on_startup_time)
        if router_lsa_on_startup_time_variable is not None:
            pulumi.set(__self__, "router_lsa_on_startup_time_variable", router_lsa_on_startup_time_variable)
        if spf_calculation_delay is not None:
            pulumi.set(__self__, "spf_calculation_delay", spf_calculation_delay)
        if spf_calculation_delay_variable is not None:
            pulumi.set(__self__, "spf_calculation_delay_variable", spf_calculation_delay_variable)
        if spf_initial_hold_time is not None:
            pulumi.set(__self__, "spf_initial_hold_time", spf_initial_hold_time)
        if spf_initial_hold_time_variable is not None:
            pulumi.set(__self__, "spf_initial_hold_time_variable", spf_initial_hold_time_variable)
        if spf_maximum_hold_time is not None:
            pulumi.set(__self__, "spf_maximum_hold_time", spf_maximum_hold_time)
        if spf_maximum_hold_time_variable is not None:
            pulumi.set(__self__, "spf_maximum_hold_time_variable", spf_maximum_hold_time_variable)
        if version is not None:
            pulumi.set(__self__, "version", version)

    @_builtins.property
    @pulumi.getter
    def areas(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['TransportRoutingOspfv3Ipv4FeatureAreaArgs']]]]:
        """
        Configure OSPFv3 IPv4 area
        """
        return pulumi.get(self, "areas")

    @areas.setter
    def areas(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['TransportRoutingOspfv3Ipv4FeatureAreaArgs']]]]):
        pulumi.set(self, "areas", value)

    @_builtins.property
    @pulumi.getter(name="defaultInformationOriginate")
    def default_information_originate(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Distribute default external route into OSPF disabled
        """
        return pulumi.get(self, "default_information_originate")

    @default_information_originate.setter
    def default_information_originate(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "default_information_originate", value)

    @_builtins.property
    @pulumi.getter(name="defaultInformationOriginateAlways")
    def default_information_originate_always(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Always advertise default route
        """
        return pulumi.get(self, "default_information_originate_always")

    @default_information_originate_always.setter
    def default_information_originate_always(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "default_information_originate_always", value)

    @_builtins.property
    @pulumi.getter(name="defaultInformationOriginateAlwaysVariable")
    def default_information_originate_always_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "default_information_originate_always_variable")

    @default_information_originate_always_variable.setter
    def default_information_originate_always_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "default_information_originate_always_variable", value)

    @_builtins.property
    @pulumi.getter(name="defaultInformationOriginateMetric")
    def default_information_originate_metric(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        Set metric used to generate default route <0..16777214>
          - Range: `0`-`16777214`
        """
        return pulumi.get(self, "default_information_originate_metric")

    @default_information_originate_metric.setter
    def default_information_originate_metric(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "default_information_originate_metric", value)

    @_builtins.property
    @pulumi.getter(name="defaultInformationOriginateMetricType")
    def default_information_originate_metric_type(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Set default route metric type
          - Choices: `type1`, `type2`
        """
        return pulumi.get(self, "default_information_originate_metric_type")

    @default_information_originate_metric_type.setter
    def default_information_originate_metric_type(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "default_information_originate_metric_type", value)

    @_builtins.property
    @pulumi.getter(name="defaultInformationOriginateMetricTypeVariable")
    def default_information_originate_metric_type_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "default_information_originate_metric_type_variable")

    @default_information_originate_metric_type_variable.setter
    def default_information_originate_metric_type_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "default_information_originate_metric_type_variable", value)

    @_builtins.property
    @pulumi.getter(name="defaultInformationOriginateMetricVariable")
    def default_information_originate_metric_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "default_information_originate_metric_variable")

    @default_information_originate_metric_variable.setter
    def default_information_originate_metric_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "default_information_originate_metric_variable", value)

    @_builtins.property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The description of the Feature
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "description", value)

    @_builtins.property
    @pulumi.getter
    def distance(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        Distance
          - Range: `1`-`255`
          - Default value: `110`
        """
        return pulumi.get(self, "distance")

    @distance.setter
    def distance(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "distance", value)

    @_builtins.property
    @pulumi.getter(name="distanceExternal")
    def distance_external(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        Set distance for external routes
          - Range: `1`-`254`
          - Default value: `110`
        """
        return pulumi.get(self, "distance_external")

    @distance_external.setter
    def distance_external(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "distance_external", value)

    @_builtins.property
    @pulumi.getter(name="distanceExternalVariable")
    def distance_external_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "distance_external_variable")

    @distance_external_variable.setter
    def distance_external_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "distance_external_variable", value)

    @_builtins.property
    @pulumi.getter(name="distanceInterArea")
    def distance_inter_area(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        Set distance for inter-area routes
          - Range: `1`-`254`
          - Default value: `110`
        """
        return pulumi.get(self, "distance_inter_area")

    @distance_inter_area.setter
    def distance_inter_area(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "distance_inter_area", value)

    @_builtins.property
    @pulumi.getter(name="distanceInterAreaVariable")
    def distance_inter_area_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "distance_inter_area_variable")

    @distance_inter_area_variable.setter
    def distance_inter_area_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "distance_inter_area_variable", value)

    @_builtins.property
    @pulumi.getter(name="distanceIntraArea")
    def distance_intra_area(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        Set distance for intra-area routes
          - Range: `1`-`254`
          - Default value: `110`
        """
        return pulumi.get(self, "distance_intra_area")

    @distance_intra_area.setter
    def distance_intra_area(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "distance_intra_area", value)

    @_builtins.property
    @pulumi.getter(name="distanceIntraAreaVariable")
    def distance_intra_area_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "distance_intra_area_variable")

    @distance_intra_area_variable.setter
    def distance_intra_area_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "distance_intra_area_variable", value)

    @_builtins.property
    @pulumi.getter(name="distanceVariable")
    def distance_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "distance_variable")

    @distance_variable.setter
    def distance_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "distance_variable", value)

    @_builtins.property
    @pulumi.getter(name="featureProfileId")
    def feature_profile_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Feature Profile ID
        """
        return pulumi.get(self, "feature_profile_id")

    @feature_profile_id.setter
    def feature_profile_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "feature_profile_id", value)

    @_builtins.property
    @pulumi.getter
    def filter(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Table map filtered or not
          - Default value: `false`
        """
        return pulumi.get(self, "filter")

    @filter.setter
    def filter(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "filter", value)

    @_builtins.property
    @pulumi.getter(name="filterVariable")
    def filter_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "filter_variable")

    @filter_variable.setter
    def filter_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "filter_variable", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The name of the Feature
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "name", value)

    @_builtins.property
    @pulumi.getter
    def redistributes(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['TransportRoutingOspfv3Ipv4FeatureRedistributeArgs']]]]:
        """
        Redistribute routes
        """
        return pulumi.get(self, "redistributes")

    @redistributes.setter
    def redistributes(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['TransportRoutingOspfv3Ipv4FeatureRedistributeArgs']]]]):
        pulumi.set(self, "redistributes", value)

    @_builtins.property
    @pulumi.getter(name="referenceBandwidth")
    def reference_bandwidth(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        Set reference bandwidth method to assign OSPF cost
          - Range: `1`-`4294967`
          - Default value: `100`
        """
        return pulumi.get(self, "reference_bandwidth")

    @reference_bandwidth.setter
    def reference_bandwidth(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "reference_bandwidth", value)

    @_builtins.property
    @pulumi.getter(name="referenceBandwidthVariable")
    def reference_bandwidth_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "reference_bandwidth_variable")

    @reference_bandwidth_variable.setter
    def reference_bandwidth_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "reference_bandwidth_variable", value)

    @_builtins.property
    @pulumi.getter(name="rfc1583Compatible")
    def rfc1583_compatible(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Calculate summary route cost based on RFC 1583
          - Default value: `true`
        """
        return pulumi.get(self, "rfc1583_compatible")

    @rfc1583_compatible.setter
    def rfc1583_compatible(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "rfc1583_compatible", value)

    @_builtins.property
    @pulumi.getter(name="rfc1583CompatibleVariable")
    def rfc1583_compatible_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "rfc1583_compatible_variable")

    @rfc1583_compatible_variable.setter
    def rfc1583_compatible_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "rfc1583_compatible_variable", value)

    @_builtins.property
    @pulumi.getter(name="routePolicyId")
    def route_policy_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "route_policy_id")

    @route_policy_id.setter
    def route_policy_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "route_policy_id", value)

    @_builtins.property
    @pulumi.getter(name="routerId")
    def router_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Set OSPF router ID to override system IP address
        """
        return pulumi.get(self, "router_id")

    @router_id.setter
    def router_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "router_id", value)

    @_builtins.property
    @pulumi.getter(name="routerIdVariable")
    def router_id_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "router_id_variable")

    @router_id_variable.setter
    def router_id_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "router_id_variable", value)

    @_builtins.property
    @pulumi.getter(name="routerLsaAction")
    def router_lsa_action(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Not advertise maximum metric Router LSA policy by default
        """
        return pulumi.get(self, "router_lsa_action")

    @router_lsa_action.setter
    def router_lsa_action(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "router_lsa_action", value)

    @_builtins.property
    @pulumi.getter(name="routerLsaOnStartupTime")
    def router_lsa_on_startup_time(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        Set how long to advertise maximum metric after router boot up
          - Range: `5`-`86400`
        """
        return pulumi.get(self, "router_lsa_on_startup_time")

    @router_lsa_on_startup_time.setter
    def router_lsa_on_startup_time(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "router_lsa_on_startup_time", value)

    @_builtins.property
    @pulumi.getter(name="routerLsaOnStartupTimeVariable")
    def router_lsa_on_startup_time_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "router_lsa_on_startup_time_variable")

    @router_lsa_on_startup_time_variable.setter
    def router_lsa_on_startup_time_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "router_lsa_on_startup_time_variable", value)

    @_builtins.property
    @pulumi.getter(name="spfCalculationDelay")
    def spf_calculation_delay(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        Set delay from first change received until performing SPF calculation
          - Range: `1`-`600000`
          - Default value: `200`
        """
        return pulumi.get(self, "spf_calculation_delay")

    @spf_calculation_delay.setter
    def spf_calculation_delay(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "spf_calculation_delay", value)

    @_builtins.property
    @pulumi.getter(name="spfCalculationDelayVariable")
    def spf_calculation_delay_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "spf_calculation_delay_variable")

    @spf_calculation_delay_variable.setter
    def spf_calculation_delay_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "spf_calculation_delay_variable", value)

    @_builtins.property
    @pulumi.getter(name="spfInitialHoldTime")
    def spf_initial_hold_time(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        Set initial hold time between consecutive SPF calculations
          - Range: `1`-`600000`
          - Default value: `1000`
        """
        return pulumi.get(self, "spf_initial_hold_time")

    @spf_initial_hold_time.setter
    def spf_initial_hold_time(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "spf_initial_hold_time", value)

    @_builtins.property
    @pulumi.getter(name="spfInitialHoldTimeVariable")
    def spf_initial_hold_time_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "spf_initial_hold_time_variable")

    @spf_initial_hold_time_variable.setter
    def spf_initial_hold_time_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "spf_initial_hold_time_variable", value)

    @_builtins.property
    @pulumi.getter(name="spfMaximumHoldTime")
    def spf_maximum_hold_time(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        Set maximum hold time between consecutive SPF calculations
          - Range: `1`-`600000`
          - Default value: `10000`
        """
        return pulumi.get(self, "spf_maximum_hold_time")

    @spf_maximum_hold_time.setter
    def spf_maximum_hold_time(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "spf_maximum_hold_time", value)

    @_builtins.property
    @pulumi.getter(name="spfMaximumHoldTimeVariable")
    def spf_maximum_hold_time_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "spf_maximum_hold_time_variable")

    @spf_maximum_hold_time_variable.setter
    def spf_maximum_hold_time_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "spf_maximum_hold_time_variable", value)

    @_builtins.property
    @pulumi.getter
    def version(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        The version of the Feature
        """
        return pulumi.get(self, "version")

    @version.setter
    def version(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "version", value)


@pulumi.type_token("sdwan:index/transportRoutingOspfv3Ipv4Feature:TransportRoutingOspfv3Ipv4Feature")
class TransportRoutingOspfv3Ipv4Feature(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 areas: Optional[pulumi.Input[Sequence[pulumi.Input[Union['TransportRoutingOspfv3Ipv4FeatureAreaArgs', 'TransportRoutingOspfv3Ipv4FeatureAreaArgsDict']]]]] = None,
                 default_information_originate: Optional[pulumi.Input[_builtins.bool]] = None,
                 default_information_originate_always: Optional[pulumi.Input[_builtins.bool]] = None,
                 default_information_originate_always_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 default_information_originate_metric: Optional[pulumi.Input[_builtins.int]] = None,
                 default_information_originate_metric_type: Optional[pulumi.Input[_builtins.str]] = None,
                 default_information_originate_metric_type_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 default_information_originate_metric_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 description: Optional[pulumi.Input[_builtins.str]] = None,
                 distance: Optional[pulumi.Input[_builtins.int]] = None,
                 distance_external: Optional[pulumi.Input[_builtins.int]] = None,
                 distance_external_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 distance_inter_area: Optional[pulumi.Input[_builtins.int]] = None,
                 distance_inter_area_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 distance_intra_area: Optional[pulumi.Input[_builtins.int]] = None,
                 distance_intra_area_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 distance_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 feature_profile_id: Optional[pulumi.Input[_builtins.str]] = None,
                 filter: Optional[pulumi.Input[_builtins.bool]] = None,
                 filter_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 redistributes: Optional[pulumi.Input[Sequence[pulumi.Input[Union['TransportRoutingOspfv3Ipv4FeatureRedistributeArgs', 'TransportRoutingOspfv3Ipv4FeatureRedistributeArgsDict']]]]] = None,
                 reference_bandwidth: Optional[pulumi.Input[_builtins.int]] = None,
                 reference_bandwidth_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 rfc1583_compatible: Optional[pulumi.Input[_builtins.bool]] = None,
                 rfc1583_compatible_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 route_policy_id: Optional[pulumi.Input[_builtins.str]] = None,
                 router_id: Optional[pulumi.Input[_builtins.str]] = None,
                 router_id_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 router_lsa_action: Optional[pulumi.Input[_builtins.str]] = None,
                 router_lsa_on_startup_time: Optional[pulumi.Input[_builtins.int]] = None,
                 router_lsa_on_startup_time_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 spf_calculation_delay: Optional[pulumi.Input[_builtins.int]] = None,
                 spf_calculation_delay_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 spf_initial_hold_time: Optional[pulumi.Input[_builtins.int]] = None,
                 spf_initial_hold_time_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 spf_maximum_hold_time: Optional[pulumi.Input[_builtins.int]] = None,
                 spf_maximum_hold_time_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 __props__=None):
        """
        This resource can manage a Transport Routing OSPFv3 IPv4 Feature.
          - Minimum SD-WAN Manager version: `20.12.0`

        ## Example Usage

        ## Import

        The `pulumi import` command can be used, for example:

        Expected import identifier with the format: "transport_routing_ospfv3_ipv4_feature_id,feature_profile_id"

        ```sh
        $ pulumi import sdwan:index/transportRoutingOspfv3Ipv4Feature:TransportRoutingOspfv3Ipv4Feature example "f6b2c44c-693c-4763-b010-895aa3d236bd,f6dd22c8-0b4f-496c-9a0b-6813d1f8b8ac"
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[Sequence[pulumi.Input[Union['TransportRoutingOspfv3Ipv4FeatureAreaArgs', 'TransportRoutingOspfv3Ipv4FeatureAreaArgsDict']]]] areas: Configure OSPFv3 IPv4 area
        :param pulumi.Input[_builtins.bool] default_information_originate: Distribute default external route into OSPF disabled
        :param pulumi.Input[_builtins.bool] default_information_originate_always: Always advertise default route
        :param pulumi.Input[_builtins.str] default_information_originate_always_variable: Variable name
        :param pulumi.Input[_builtins.int] default_information_originate_metric: Set metric used to generate default route <0..16777214>
                 - Range: `0`-`16777214`
        :param pulumi.Input[_builtins.str] default_information_originate_metric_type: Set default route metric type
                 - Choices: `type1`, `type2`
        :param pulumi.Input[_builtins.str] default_information_originate_metric_type_variable: Variable name
        :param pulumi.Input[_builtins.str] default_information_originate_metric_variable: Variable name
        :param pulumi.Input[_builtins.str] description: The description of the Feature
        :param pulumi.Input[_builtins.int] distance: Distance
                 - Range: `1`-`255`
                 - Default value: `110`
        :param pulumi.Input[_builtins.int] distance_external: Set distance for external routes
                 - Range: `1`-`254`
                 - Default value: `110`
        :param pulumi.Input[_builtins.str] distance_external_variable: Variable name
        :param pulumi.Input[_builtins.int] distance_inter_area: Set distance for inter-area routes
                 - Range: `1`-`254`
                 - Default value: `110`
        :param pulumi.Input[_builtins.str] distance_inter_area_variable: Variable name
        :param pulumi.Input[_builtins.int] distance_intra_area: Set distance for intra-area routes
                 - Range: `1`-`254`
                 - Default value: `110`
        :param pulumi.Input[_builtins.str] distance_intra_area_variable: Variable name
        :param pulumi.Input[_builtins.str] distance_variable: Variable name
        :param pulumi.Input[_builtins.str] feature_profile_id: Feature Profile ID
        :param pulumi.Input[_builtins.bool] filter: Table map filtered or not
                 - Default value: `false`
        :param pulumi.Input[_builtins.str] filter_variable: Variable name
        :param pulumi.Input[_builtins.str] name: The name of the Feature
        :param pulumi.Input[Sequence[pulumi.Input[Union['TransportRoutingOspfv3Ipv4FeatureRedistributeArgs', 'TransportRoutingOspfv3Ipv4FeatureRedistributeArgsDict']]]] redistributes: Redistribute routes
        :param pulumi.Input[_builtins.int] reference_bandwidth: Set reference bandwidth method to assign OSPF cost
                 - Range: `1`-`4294967`
                 - Default value: `100`
        :param pulumi.Input[_builtins.str] reference_bandwidth_variable: Variable name
        :param pulumi.Input[_builtins.bool] rfc1583_compatible: Calculate summary route cost based on RFC 1583
                 - Default value: `true`
        :param pulumi.Input[_builtins.str] rfc1583_compatible_variable: Variable name
        :param pulumi.Input[_builtins.str] router_id: Set OSPF router ID to override system IP address
        :param pulumi.Input[_builtins.str] router_id_variable: Variable name
        :param pulumi.Input[_builtins.str] router_lsa_action: Not advertise maximum metric Router LSA policy by default
        :param pulumi.Input[_builtins.int] router_lsa_on_startup_time: Set how long to advertise maximum metric after router boot up
                 - Range: `5`-`86400`
        :param pulumi.Input[_builtins.str] router_lsa_on_startup_time_variable: Variable name
        :param pulumi.Input[_builtins.int] spf_calculation_delay: Set delay from first change received until performing SPF calculation
                 - Range: `1`-`600000`
                 - Default value: `200`
        :param pulumi.Input[_builtins.str] spf_calculation_delay_variable: Variable name
        :param pulumi.Input[_builtins.int] spf_initial_hold_time: Set initial hold time between consecutive SPF calculations
                 - Range: `1`-`600000`
                 - Default value: `1000`
        :param pulumi.Input[_builtins.str] spf_initial_hold_time_variable: Variable name
        :param pulumi.Input[_builtins.int] spf_maximum_hold_time: Set maximum hold time between consecutive SPF calculations
                 - Range: `1`-`600000`
                 - Default value: `10000`
        :param pulumi.Input[_builtins.str] spf_maximum_hold_time_variable: Variable name
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: TransportRoutingOspfv3Ipv4FeatureArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        This resource can manage a Transport Routing OSPFv3 IPv4 Feature.
          - Minimum SD-WAN Manager version: `20.12.0`

        ## Example Usage

        ## Import

        The `pulumi import` command can be used, for example:

        Expected import identifier with the format: "transport_routing_ospfv3_ipv4_feature_id,feature_profile_id"

        ```sh
        $ pulumi import sdwan:index/transportRoutingOspfv3Ipv4Feature:TransportRoutingOspfv3Ipv4Feature example "f6b2c44c-693c-4763-b010-895aa3d236bd,f6dd22c8-0b4f-496c-9a0b-6813d1f8b8ac"
        ```

        :param str resource_name: The name of the resource.
        :param TransportRoutingOspfv3Ipv4FeatureArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(TransportRoutingOspfv3Ipv4FeatureArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 areas: Optional[pulumi.Input[Sequence[pulumi.Input[Union['TransportRoutingOspfv3Ipv4FeatureAreaArgs', 'TransportRoutingOspfv3Ipv4FeatureAreaArgsDict']]]]] = None,
                 default_information_originate: Optional[pulumi.Input[_builtins.bool]] = None,
                 default_information_originate_always: Optional[pulumi.Input[_builtins.bool]] = None,
                 default_information_originate_always_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 default_information_originate_metric: Optional[pulumi.Input[_builtins.int]] = None,
                 default_information_originate_metric_type: Optional[pulumi.Input[_builtins.str]] = None,
                 default_information_originate_metric_type_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 default_information_originate_metric_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 description: Optional[pulumi.Input[_builtins.str]] = None,
                 distance: Optional[pulumi.Input[_builtins.int]] = None,
                 distance_external: Optional[pulumi.Input[_builtins.int]] = None,
                 distance_external_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 distance_inter_area: Optional[pulumi.Input[_builtins.int]] = None,
                 distance_inter_area_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 distance_intra_area: Optional[pulumi.Input[_builtins.int]] = None,
                 distance_intra_area_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 distance_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 feature_profile_id: Optional[pulumi.Input[_builtins.str]] = None,
                 filter: Optional[pulumi.Input[_builtins.bool]] = None,
                 filter_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 redistributes: Optional[pulumi.Input[Sequence[pulumi.Input[Union['TransportRoutingOspfv3Ipv4FeatureRedistributeArgs', 'TransportRoutingOspfv3Ipv4FeatureRedistributeArgsDict']]]]] = None,
                 reference_bandwidth: Optional[pulumi.Input[_builtins.int]] = None,
                 reference_bandwidth_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 rfc1583_compatible: Optional[pulumi.Input[_builtins.bool]] = None,
                 rfc1583_compatible_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 route_policy_id: Optional[pulumi.Input[_builtins.str]] = None,
                 router_id: Optional[pulumi.Input[_builtins.str]] = None,
                 router_id_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 router_lsa_action: Optional[pulumi.Input[_builtins.str]] = None,
                 router_lsa_on_startup_time: Optional[pulumi.Input[_builtins.int]] = None,
                 router_lsa_on_startup_time_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 spf_calculation_delay: Optional[pulumi.Input[_builtins.int]] = None,
                 spf_calculation_delay_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 spf_initial_hold_time: Optional[pulumi.Input[_builtins.int]] = None,
                 spf_initial_hold_time_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 spf_maximum_hold_time: Optional[pulumi.Input[_builtins.int]] = None,
                 spf_maximum_hold_time_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = TransportRoutingOspfv3Ipv4FeatureArgs.__new__(TransportRoutingOspfv3Ipv4FeatureArgs)

            __props__.__dict__["areas"] = areas
            __props__.__dict__["default_information_originate"] = default_information_originate
            __props__.__dict__["default_information_originate_always"] = default_information_originate_always
            __props__.__dict__["default_information_originate_always_variable"] = default_information_originate_always_variable
            __props__.__dict__["default_information_originate_metric"] = default_information_originate_metric
            __props__.__dict__["default_information_originate_metric_type"] = default_information_originate_metric_type
            __props__.__dict__["default_information_originate_metric_type_variable"] = default_information_originate_metric_type_variable
            __props__.__dict__["default_information_originate_metric_variable"] = default_information_originate_metric_variable
            __props__.__dict__["description"] = description
            __props__.__dict__["distance"] = distance
            __props__.__dict__["distance_external"] = distance_external
            __props__.__dict__["distance_external_variable"] = distance_external_variable
            __props__.__dict__["distance_inter_area"] = distance_inter_area
            __props__.__dict__["distance_inter_area_variable"] = distance_inter_area_variable
            __props__.__dict__["distance_intra_area"] = distance_intra_area
            __props__.__dict__["distance_intra_area_variable"] = distance_intra_area_variable
            __props__.__dict__["distance_variable"] = distance_variable
            if feature_profile_id is None and not opts.urn:
                raise TypeError("Missing required property 'feature_profile_id'")
            __props__.__dict__["feature_profile_id"] = feature_profile_id
            __props__.__dict__["filter"] = filter
            __props__.__dict__["filter_variable"] = filter_variable
            __props__.__dict__["name"] = name
            __props__.__dict__["redistributes"] = redistributes
            __props__.__dict__["reference_bandwidth"] = reference_bandwidth
            __props__.__dict__["reference_bandwidth_variable"] = reference_bandwidth_variable
            __props__.__dict__["rfc1583_compatible"] = rfc1583_compatible
            __props__.__dict__["rfc1583_compatible_variable"] = rfc1583_compatible_variable
            __props__.__dict__["route_policy_id"] = route_policy_id
            __props__.__dict__["router_id"] = router_id
            __props__.__dict__["router_id_variable"] = router_id_variable
            __props__.__dict__["router_lsa_action"] = router_lsa_action
            __props__.__dict__["router_lsa_on_startup_time"] = router_lsa_on_startup_time
            __props__.__dict__["router_lsa_on_startup_time_variable"] = router_lsa_on_startup_time_variable
            __props__.__dict__["spf_calculation_delay"] = spf_calculation_delay
            __props__.__dict__["spf_calculation_delay_variable"] = spf_calculation_delay_variable
            __props__.__dict__["spf_initial_hold_time"] = spf_initial_hold_time
            __props__.__dict__["spf_initial_hold_time_variable"] = spf_initial_hold_time_variable
            __props__.__dict__["spf_maximum_hold_time"] = spf_maximum_hold_time
            __props__.__dict__["spf_maximum_hold_time_variable"] = spf_maximum_hold_time_variable
            __props__.__dict__["version"] = None
        super(TransportRoutingOspfv3Ipv4Feature, __self__).__init__(
            'sdwan:index/transportRoutingOspfv3Ipv4Feature:TransportRoutingOspfv3Ipv4Feature',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            areas: Optional[pulumi.Input[Sequence[pulumi.Input[Union['TransportRoutingOspfv3Ipv4FeatureAreaArgs', 'TransportRoutingOspfv3Ipv4FeatureAreaArgsDict']]]]] = None,
            default_information_originate: Optional[pulumi.Input[_builtins.bool]] = None,
            default_information_originate_always: Optional[pulumi.Input[_builtins.bool]] = None,
            default_information_originate_always_variable: Optional[pulumi.Input[_builtins.str]] = None,
            default_information_originate_metric: Optional[pulumi.Input[_builtins.int]] = None,
            default_information_originate_metric_type: Optional[pulumi.Input[_builtins.str]] = None,
            default_information_originate_metric_type_variable: Optional[pulumi.Input[_builtins.str]] = None,
            default_information_originate_metric_variable: Optional[pulumi.Input[_builtins.str]] = None,
            description: Optional[pulumi.Input[_builtins.str]] = None,
            distance: Optional[pulumi.Input[_builtins.int]] = None,
            distance_external: Optional[pulumi.Input[_builtins.int]] = None,
            distance_external_variable: Optional[pulumi.Input[_builtins.str]] = None,
            distance_inter_area: Optional[pulumi.Input[_builtins.int]] = None,
            distance_inter_area_variable: Optional[pulumi.Input[_builtins.str]] = None,
            distance_intra_area: Optional[pulumi.Input[_builtins.int]] = None,
            distance_intra_area_variable: Optional[pulumi.Input[_builtins.str]] = None,
            distance_variable: Optional[pulumi.Input[_builtins.str]] = None,
            feature_profile_id: Optional[pulumi.Input[_builtins.str]] = None,
            filter: Optional[pulumi.Input[_builtins.bool]] = None,
            filter_variable: Optional[pulumi.Input[_builtins.str]] = None,
            name: Optional[pulumi.Input[_builtins.str]] = None,
            redistributes: Optional[pulumi.Input[Sequence[pulumi.Input[Union['TransportRoutingOspfv3Ipv4FeatureRedistributeArgs', 'TransportRoutingOspfv3Ipv4FeatureRedistributeArgsDict']]]]] = None,
            reference_bandwidth: Optional[pulumi.Input[_builtins.int]] = None,
            reference_bandwidth_variable: Optional[pulumi.Input[_builtins.str]] = None,
            rfc1583_compatible: Optional[pulumi.Input[_builtins.bool]] = None,
            rfc1583_compatible_variable: Optional[pulumi.Input[_builtins.str]] = None,
            route_policy_id: Optional[pulumi.Input[_builtins.str]] = None,
            router_id: Optional[pulumi.Input[_builtins.str]] = None,
            router_id_variable: Optional[pulumi.Input[_builtins.str]] = None,
            router_lsa_action: Optional[pulumi.Input[_builtins.str]] = None,
            router_lsa_on_startup_time: Optional[pulumi.Input[_builtins.int]] = None,
            router_lsa_on_startup_time_variable: Optional[pulumi.Input[_builtins.str]] = None,
            spf_calculation_delay: Optional[pulumi.Input[_builtins.int]] = None,
            spf_calculation_delay_variable: Optional[pulumi.Input[_builtins.str]] = None,
            spf_initial_hold_time: Optional[pulumi.Input[_builtins.int]] = None,
            spf_initial_hold_time_variable: Optional[pulumi.Input[_builtins.str]] = None,
            spf_maximum_hold_time: Optional[pulumi.Input[_builtins.int]] = None,
            spf_maximum_hold_time_variable: Optional[pulumi.Input[_builtins.str]] = None,
            version: Optional[pulumi.Input[_builtins.int]] = None) -> 'TransportRoutingOspfv3Ipv4Feature':
        """
        Get an existing TransportRoutingOspfv3Ipv4Feature resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[Sequence[pulumi.Input[Union['TransportRoutingOspfv3Ipv4FeatureAreaArgs', 'TransportRoutingOspfv3Ipv4FeatureAreaArgsDict']]]] areas: Configure OSPFv3 IPv4 area
        :param pulumi.Input[_builtins.bool] default_information_originate: Distribute default external route into OSPF disabled
        :param pulumi.Input[_builtins.bool] default_information_originate_always: Always advertise default route
        :param pulumi.Input[_builtins.str] default_information_originate_always_variable: Variable name
        :param pulumi.Input[_builtins.int] default_information_originate_metric: Set metric used to generate default route <0..16777214>
                 - Range: `0`-`16777214`
        :param pulumi.Input[_builtins.str] default_information_originate_metric_type: Set default route metric type
                 - Choices: `type1`, `type2`
        :param pulumi.Input[_builtins.str] default_information_originate_metric_type_variable: Variable name
        :param pulumi.Input[_builtins.str] default_information_originate_metric_variable: Variable name
        :param pulumi.Input[_builtins.str] description: The description of the Feature
        :param pulumi.Input[_builtins.int] distance: Distance
                 - Range: `1`-`255`
                 - Default value: `110`
        :param pulumi.Input[_builtins.int] distance_external: Set distance for external routes
                 - Range: `1`-`254`
                 - Default value: `110`
        :param pulumi.Input[_builtins.str] distance_external_variable: Variable name
        :param pulumi.Input[_builtins.int] distance_inter_area: Set distance for inter-area routes
                 - Range: `1`-`254`
                 - Default value: `110`
        :param pulumi.Input[_builtins.str] distance_inter_area_variable: Variable name
        :param pulumi.Input[_builtins.int] distance_intra_area: Set distance for intra-area routes
                 - Range: `1`-`254`
                 - Default value: `110`
        :param pulumi.Input[_builtins.str] distance_intra_area_variable: Variable name
        :param pulumi.Input[_builtins.str] distance_variable: Variable name
        :param pulumi.Input[_builtins.str] feature_profile_id: Feature Profile ID
        :param pulumi.Input[_builtins.bool] filter: Table map filtered or not
                 - Default value: `false`
        :param pulumi.Input[_builtins.str] filter_variable: Variable name
        :param pulumi.Input[_builtins.str] name: The name of the Feature
        :param pulumi.Input[Sequence[pulumi.Input[Union['TransportRoutingOspfv3Ipv4FeatureRedistributeArgs', 'TransportRoutingOspfv3Ipv4FeatureRedistributeArgsDict']]]] redistributes: Redistribute routes
        :param pulumi.Input[_builtins.int] reference_bandwidth: Set reference bandwidth method to assign OSPF cost
                 - Range: `1`-`4294967`
                 - Default value: `100`
        :param pulumi.Input[_builtins.str] reference_bandwidth_variable: Variable name
        :param pulumi.Input[_builtins.bool] rfc1583_compatible: Calculate summary route cost based on RFC 1583
                 - Default value: `true`
        :param pulumi.Input[_builtins.str] rfc1583_compatible_variable: Variable name
        :param pulumi.Input[_builtins.str] router_id: Set OSPF router ID to override system IP address
        :param pulumi.Input[_builtins.str] router_id_variable: Variable name
        :param pulumi.Input[_builtins.str] router_lsa_action: Not advertise maximum metric Router LSA policy by default
        :param pulumi.Input[_builtins.int] router_lsa_on_startup_time: Set how long to advertise maximum metric after router boot up
                 - Range: `5`-`86400`
        :param pulumi.Input[_builtins.str] router_lsa_on_startup_time_variable: Variable name
        :param pulumi.Input[_builtins.int] spf_calculation_delay: Set delay from first change received until performing SPF calculation
                 - Range: `1`-`600000`
                 - Default value: `200`
        :param pulumi.Input[_builtins.str] spf_calculation_delay_variable: Variable name
        :param pulumi.Input[_builtins.int] spf_initial_hold_time: Set initial hold time between consecutive SPF calculations
                 - Range: `1`-`600000`
                 - Default value: `1000`
        :param pulumi.Input[_builtins.str] spf_initial_hold_time_variable: Variable name
        :param pulumi.Input[_builtins.int] spf_maximum_hold_time: Set maximum hold time between consecutive SPF calculations
                 - Range: `1`-`600000`
                 - Default value: `10000`
        :param pulumi.Input[_builtins.str] spf_maximum_hold_time_variable: Variable name
        :param pulumi.Input[_builtins.int] version: The version of the Feature
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _TransportRoutingOspfv3Ipv4FeatureState.__new__(_TransportRoutingOspfv3Ipv4FeatureState)

        __props__.__dict__["areas"] = areas
        __props__.__dict__["default_information_originate"] = default_information_originate
        __props__.__dict__["default_information_originate_always"] = default_information_originate_always
        __props__.__dict__["default_information_originate_always_variable"] = default_information_originate_always_variable
        __props__.__dict__["default_information_originate_metric"] = default_information_originate_metric
        __props__.__dict__["default_information_originate_metric_type"] = default_information_originate_metric_type
        __props__.__dict__["default_information_originate_metric_type_variable"] = default_information_originate_metric_type_variable
        __props__.__dict__["default_information_originate_metric_variable"] = default_information_originate_metric_variable
        __props__.__dict__["description"] = description
        __props__.__dict__["distance"] = distance
        __props__.__dict__["distance_external"] = distance_external
        __props__.__dict__["distance_external_variable"] = distance_external_variable
        __props__.__dict__["distance_inter_area"] = distance_inter_area
        __props__.__dict__["distance_inter_area_variable"] = distance_inter_area_variable
        __props__.__dict__["distance_intra_area"] = distance_intra_area
        __props__.__dict__["distance_intra_area_variable"] = distance_intra_area_variable
        __props__.__dict__["distance_variable"] = distance_variable
        __props__.__dict__["feature_profile_id"] = feature_profile_id
        __props__.__dict__["filter"] = filter
        __props__.__dict__["filter_variable"] = filter_variable
        __props__.__dict__["name"] = name
        __props__.__dict__["redistributes"] = redistributes
        __props__.__dict__["reference_bandwidth"] = reference_bandwidth
        __props__.__dict__["reference_bandwidth_variable"] = reference_bandwidth_variable
        __props__.__dict__["rfc1583_compatible"] = rfc1583_compatible
        __props__.__dict__["rfc1583_compatible_variable"] = rfc1583_compatible_variable
        __props__.__dict__["route_policy_id"] = route_policy_id
        __props__.__dict__["router_id"] = router_id
        __props__.__dict__["router_id_variable"] = router_id_variable
        __props__.__dict__["router_lsa_action"] = router_lsa_action
        __props__.__dict__["router_lsa_on_startup_time"] = router_lsa_on_startup_time
        __props__.__dict__["router_lsa_on_startup_time_variable"] = router_lsa_on_startup_time_variable
        __props__.__dict__["spf_calculation_delay"] = spf_calculation_delay
        __props__.__dict__["spf_calculation_delay_variable"] = spf_calculation_delay_variable
        __props__.__dict__["spf_initial_hold_time"] = spf_initial_hold_time
        __props__.__dict__["spf_initial_hold_time_variable"] = spf_initial_hold_time_variable
        __props__.__dict__["spf_maximum_hold_time"] = spf_maximum_hold_time
        __props__.__dict__["spf_maximum_hold_time_variable"] = spf_maximum_hold_time_variable
        __props__.__dict__["version"] = version
        return TransportRoutingOspfv3Ipv4Feature(resource_name, opts=opts, __props__=__props__)

    @_builtins.property
    @pulumi.getter
    def areas(self) -> pulumi.Output[Optional[Sequence['outputs.TransportRoutingOspfv3Ipv4FeatureArea']]]:
        """
        Configure OSPFv3 IPv4 area
        """
        return pulumi.get(self, "areas")

    @_builtins.property
    @pulumi.getter(name="defaultInformationOriginate")
    def default_information_originate(self) -> pulumi.Output[Optional[_builtins.bool]]:
        """
        Distribute default external route into OSPF disabled
        """
        return pulumi.get(self, "default_information_originate")

    @_builtins.property
    @pulumi.getter(name="defaultInformationOriginateAlways")
    def default_information_originate_always(self) -> pulumi.Output[Optional[_builtins.bool]]:
        """
        Always advertise default route
        """
        return pulumi.get(self, "default_information_originate_always")

    @_builtins.property
    @pulumi.getter(name="defaultInformationOriginateAlwaysVariable")
    def default_information_originate_always_variable(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "default_information_originate_always_variable")

    @_builtins.property
    @pulumi.getter(name="defaultInformationOriginateMetric")
    def default_information_originate_metric(self) -> pulumi.Output[Optional[_builtins.int]]:
        """
        Set metric used to generate default route <0..16777214>
          - Range: `0`-`16777214`
        """
        return pulumi.get(self, "default_information_originate_metric")

    @_builtins.property
    @pulumi.getter(name="defaultInformationOriginateMetricType")
    def default_information_originate_metric_type(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        Set default route metric type
          - Choices: `type1`, `type2`
        """
        return pulumi.get(self, "default_information_originate_metric_type")

    @_builtins.property
    @pulumi.getter(name="defaultInformationOriginateMetricTypeVariable")
    def default_information_originate_metric_type_variable(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "default_information_originate_metric_type_variable")

    @_builtins.property
    @pulumi.getter(name="defaultInformationOriginateMetricVariable")
    def default_information_originate_metric_variable(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "default_information_originate_metric_variable")

    @_builtins.property
    @pulumi.getter
    def description(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        The description of the Feature
        """
        return pulumi.get(self, "description")

    @_builtins.property
    @pulumi.getter
    def distance(self) -> pulumi.Output[Optional[_builtins.int]]:
        """
        Distance
          - Range: `1`-`255`
          - Default value: `110`
        """
        return pulumi.get(self, "distance")

    @_builtins.property
    @pulumi.getter(name="distanceExternal")
    def distance_external(self) -> pulumi.Output[Optional[_builtins.int]]:
        """
        Set distance for external routes
          - Range: `1`-`254`
          - Default value: `110`
        """
        return pulumi.get(self, "distance_external")

    @_builtins.property
    @pulumi.getter(name="distanceExternalVariable")
    def distance_external_variable(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "distance_external_variable")

    @_builtins.property
    @pulumi.getter(name="distanceInterArea")
    def distance_inter_area(self) -> pulumi.Output[Optional[_builtins.int]]:
        """
        Set distance for inter-area routes
          - Range: `1`-`254`
          - Default value: `110`
        """
        return pulumi.get(self, "distance_inter_area")

    @_builtins.property
    @pulumi.getter(name="distanceInterAreaVariable")
    def distance_inter_area_variable(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "distance_inter_area_variable")

    @_builtins.property
    @pulumi.getter(name="distanceIntraArea")
    def distance_intra_area(self) -> pulumi.Output[Optional[_builtins.int]]:
        """
        Set distance for intra-area routes
          - Range: `1`-`254`
          - Default value: `110`
        """
        return pulumi.get(self, "distance_intra_area")

    @_builtins.property
    @pulumi.getter(name="distanceIntraAreaVariable")
    def distance_intra_area_variable(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "distance_intra_area_variable")

    @_builtins.property
    @pulumi.getter(name="distanceVariable")
    def distance_variable(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "distance_variable")

    @_builtins.property
    @pulumi.getter(name="featureProfileId")
    def feature_profile_id(self) -> pulumi.Output[_builtins.str]:
        """
        Feature Profile ID
        """
        return pulumi.get(self, "feature_profile_id")

    @_builtins.property
    @pulumi.getter
    def filter(self) -> pulumi.Output[Optional[_builtins.bool]]:
        """
        Table map filtered or not
          - Default value: `false`
        """
        return pulumi.get(self, "filter")

    @_builtins.property
    @pulumi.getter(name="filterVariable")
    def filter_variable(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "filter_variable")

    @_builtins.property
    @pulumi.getter
    def name(self) -> pulumi.Output[_builtins.str]:
        """
        The name of the Feature
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def redistributes(self) -> pulumi.Output[Optional[Sequence['outputs.TransportRoutingOspfv3Ipv4FeatureRedistribute']]]:
        """
        Redistribute routes
        """
        return pulumi.get(self, "redistributes")

    @_builtins.property
    @pulumi.getter(name="referenceBandwidth")
    def reference_bandwidth(self) -> pulumi.Output[Optional[_builtins.int]]:
        """
        Set reference bandwidth method to assign OSPF cost
          - Range: `1`-`4294967`
          - Default value: `100`
        """
        return pulumi.get(self, "reference_bandwidth")

    @_builtins.property
    @pulumi.getter(name="referenceBandwidthVariable")
    def reference_bandwidth_variable(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "reference_bandwidth_variable")

    @_builtins.property
    @pulumi.getter(name="rfc1583Compatible")
    def rfc1583_compatible(self) -> pulumi.Output[Optional[_builtins.bool]]:
        """
        Calculate summary route cost based on RFC 1583
          - Default value: `true`
        """
        return pulumi.get(self, "rfc1583_compatible")

    @_builtins.property
    @pulumi.getter(name="rfc1583CompatibleVariable")
    def rfc1583_compatible_variable(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "rfc1583_compatible_variable")

    @_builtins.property
    @pulumi.getter(name="routePolicyId")
    def route_policy_id(self) -> pulumi.Output[Optional[_builtins.str]]:
        return pulumi.get(self, "route_policy_id")

    @_builtins.property
    @pulumi.getter(name="routerId")
    def router_id(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        Set OSPF router ID to override system IP address
        """
        return pulumi.get(self, "router_id")

    @_builtins.property
    @pulumi.getter(name="routerIdVariable")
    def router_id_variable(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "router_id_variable")

    @_builtins.property
    @pulumi.getter(name="routerLsaAction")
    def router_lsa_action(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        Not advertise maximum metric Router LSA policy by default
        """
        return pulumi.get(self, "router_lsa_action")

    @_builtins.property
    @pulumi.getter(name="routerLsaOnStartupTime")
    def router_lsa_on_startup_time(self) -> pulumi.Output[Optional[_builtins.int]]:
        """
        Set how long to advertise maximum metric after router boot up
          - Range: `5`-`86400`
        """
        return pulumi.get(self, "router_lsa_on_startup_time")

    @_builtins.property
    @pulumi.getter(name="routerLsaOnStartupTimeVariable")
    def router_lsa_on_startup_time_variable(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "router_lsa_on_startup_time_variable")

    @_builtins.property
    @pulumi.getter(name="spfCalculationDelay")
    def spf_calculation_delay(self) -> pulumi.Output[Optional[_builtins.int]]:
        """
        Set delay from first change received until performing SPF calculation
          - Range: `1`-`600000`
          - Default value: `200`
        """
        return pulumi.get(self, "spf_calculation_delay")

    @_builtins.property
    @pulumi.getter(name="spfCalculationDelayVariable")
    def spf_calculation_delay_variable(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "spf_calculation_delay_variable")

    @_builtins.property
    @pulumi.getter(name="spfInitialHoldTime")
    def spf_initial_hold_time(self) -> pulumi.Output[Optional[_builtins.int]]:
        """
        Set initial hold time between consecutive SPF calculations
          - Range: `1`-`600000`
          - Default value: `1000`
        """
        return pulumi.get(self, "spf_initial_hold_time")

    @_builtins.property
    @pulumi.getter(name="spfInitialHoldTimeVariable")
    def spf_initial_hold_time_variable(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "spf_initial_hold_time_variable")

    @_builtins.property
    @pulumi.getter(name="spfMaximumHoldTime")
    def spf_maximum_hold_time(self) -> pulumi.Output[Optional[_builtins.int]]:
        """
        Set maximum hold time between consecutive SPF calculations
          - Range: `1`-`600000`
          - Default value: `10000`
        """
        return pulumi.get(self, "spf_maximum_hold_time")

    @_builtins.property
    @pulumi.getter(name="spfMaximumHoldTimeVariable")
    def spf_maximum_hold_time_variable(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "spf_maximum_hold_time_variable")

    @_builtins.property
    @pulumi.getter
    def version(self) -> pulumi.Output[_builtins.int]:
        """
        The version of the Feature
        """
        return pulumi.get(self, "version")

