# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities
from . import outputs

__all__ = [
    'GetTransportWanVpnFeatureResult',
    'AwaitableGetTransportWanVpnFeatureResult',
    'get_transport_wan_vpn_feature',
    'get_transport_wan_vpn_feature_output',
]

@pulumi.output_type
class GetTransportWanVpnFeatureResult:
    """
    A collection of values returned by getTransportWanVpnFeature.
    """
    def __init__(__self__, description=None, enhance_ecmp_keying=None, enhance_ecmp_keying_variable=None, feature_profile_id=None, id=None, ipv4_static_routes=None, ipv6_static_routes=None, name=None, nat64_v4_pools=None, new_host_mappings=None, primary_dns_address_ipv4=None, primary_dns_address_ipv4_variable=None, primary_dns_address_ipv6=None, primary_dns_address_ipv6_variable=None, secondary_dns_address_ipv4=None, secondary_dns_address_ipv4_variable=None, secondary_dns_address_ipv6=None, secondary_dns_address_ipv6_variable=None, services=None, version=None, vpn=None):
        if description and not isinstance(description, str):
            raise TypeError("Expected argument 'description' to be a str")
        pulumi.set(__self__, "description", description)
        if enhance_ecmp_keying and not isinstance(enhance_ecmp_keying, bool):
            raise TypeError("Expected argument 'enhance_ecmp_keying' to be a bool")
        pulumi.set(__self__, "enhance_ecmp_keying", enhance_ecmp_keying)
        if enhance_ecmp_keying_variable and not isinstance(enhance_ecmp_keying_variable, str):
            raise TypeError("Expected argument 'enhance_ecmp_keying_variable' to be a str")
        pulumi.set(__self__, "enhance_ecmp_keying_variable", enhance_ecmp_keying_variable)
        if feature_profile_id and not isinstance(feature_profile_id, str):
            raise TypeError("Expected argument 'feature_profile_id' to be a str")
        pulumi.set(__self__, "feature_profile_id", feature_profile_id)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if ipv4_static_routes and not isinstance(ipv4_static_routes, list):
            raise TypeError("Expected argument 'ipv4_static_routes' to be a list")
        pulumi.set(__self__, "ipv4_static_routes", ipv4_static_routes)
        if ipv6_static_routes and not isinstance(ipv6_static_routes, list):
            raise TypeError("Expected argument 'ipv6_static_routes' to be a list")
        pulumi.set(__self__, "ipv6_static_routes", ipv6_static_routes)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)
        if nat64_v4_pools and not isinstance(nat64_v4_pools, list):
            raise TypeError("Expected argument 'nat64_v4_pools' to be a list")
        pulumi.set(__self__, "nat64_v4_pools", nat64_v4_pools)
        if new_host_mappings and not isinstance(new_host_mappings, list):
            raise TypeError("Expected argument 'new_host_mappings' to be a list")
        pulumi.set(__self__, "new_host_mappings", new_host_mappings)
        if primary_dns_address_ipv4 and not isinstance(primary_dns_address_ipv4, str):
            raise TypeError("Expected argument 'primary_dns_address_ipv4' to be a str")
        pulumi.set(__self__, "primary_dns_address_ipv4", primary_dns_address_ipv4)
        if primary_dns_address_ipv4_variable and not isinstance(primary_dns_address_ipv4_variable, str):
            raise TypeError("Expected argument 'primary_dns_address_ipv4_variable' to be a str")
        pulumi.set(__self__, "primary_dns_address_ipv4_variable", primary_dns_address_ipv4_variable)
        if primary_dns_address_ipv6 and not isinstance(primary_dns_address_ipv6, str):
            raise TypeError("Expected argument 'primary_dns_address_ipv6' to be a str")
        pulumi.set(__self__, "primary_dns_address_ipv6", primary_dns_address_ipv6)
        if primary_dns_address_ipv6_variable and not isinstance(primary_dns_address_ipv6_variable, str):
            raise TypeError("Expected argument 'primary_dns_address_ipv6_variable' to be a str")
        pulumi.set(__self__, "primary_dns_address_ipv6_variable", primary_dns_address_ipv6_variable)
        if secondary_dns_address_ipv4 and not isinstance(secondary_dns_address_ipv4, str):
            raise TypeError("Expected argument 'secondary_dns_address_ipv4' to be a str")
        pulumi.set(__self__, "secondary_dns_address_ipv4", secondary_dns_address_ipv4)
        if secondary_dns_address_ipv4_variable and not isinstance(secondary_dns_address_ipv4_variable, str):
            raise TypeError("Expected argument 'secondary_dns_address_ipv4_variable' to be a str")
        pulumi.set(__self__, "secondary_dns_address_ipv4_variable", secondary_dns_address_ipv4_variable)
        if secondary_dns_address_ipv6 and not isinstance(secondary_dns_address_ipv6, str):
            raise TypeError("Expected argument 'secondary_dns_address_ipv6' to be a str")
        pulumi.set(__self__, "secondary_dns_address_ipv6", secondary_dns_address_ipv6)
        if secondary_dns_address_ipv6_variable and not isinstance(secondary_dns_address_ipv6_variable, str):
            raise TypeError("Expected argument 'secondary_dns_address_ipv6_variable' to be a str")
        pulumi.set(__self__, "secondary_dns_address_ipv6_variable", secondary_dns_address_ipv6_variable)
        if services and not isinstance(services, list):
            raise TypeError("Expected argument 'services' to be a list")
        pulumi.set(__self__, "services", services)
        if version and not isinstance(version, int):
            raise TypeError("Expected argument 'version' to be a int")
        pulumi.set(__self__, "version", version)
        if vpn and not isinstance(vpn, int):
            raise TypeError("Expected argument 'vpn' to be a int")
        pulumi.set(__self__, "vpn", vpn)

    @_builtins.property
    @pulumi.getter
    def description(self) -> _builtins.str:
        """
        The description of the Feature
        """
        return pulumi.get(self, "description")

    @_builtins.property
    @pulumi.getter(name="enhanceEcmpKeying")
    def enhance_ecmp_keying(self) -> _builtins.bool:
        """
        Enhance ECMP Keying
        """
        return pulumi.get(self, "enhance_ecmp_keying")

    @_builtins.property
    @pulumi.getter(name="enhanceEcmpKeyingVariable")
    def enhance_ecmp_keying_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "enhance_ecmp_keying_variable")

    @_builtins.property
    @pulumi.getter(name="featureProfileId")
    def feature_profile_id(self) -> _builtins.str:
        """
        Feature Profile ID
        """
        return pulumi.get(self, "feature_profile_id")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        The id of the Feature
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter(name="ipv4StaticRoutes")
    def ipv4_static_routes(self) -> Sequence['outputs.GetTransportWanVpnFeatureIpv4StaticRouteResult']:
        """
        IPv4 Static Route
        """
        return pulumi.get(self, "ipv4_static_routes")

    @_builtins.property
    @pulumi.getter(name="ipv6StaticRoutes")
    def ipv6_static_routes(self) -> Sequence['outputs.GetTransportWanVpnFeatureIpv6StaticRouteResult']:
        """
        IPv6 Static Route
        """
        return pulumi.get(self, "ipv6_static_routes")

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        """
        The name of the Feature
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter(name="nat64V4Pools")
    def nat64_v4_pools(self) -> Sequence['outputs.GetTransportWanVpnFeatureNat64V4PoolResult']:
        """
        NAT64 V4 Pool
        """
        return pulumi.get(self, "nat64_v4_pools")

    @_builtins.property
    @pulumi.getter(name="newHostMappings")
    def new_host_mappings(self) -> Sequence['outputs.GetTransportWanVpnFeatureNewHostMappingResult']:
        return pulumi.get(self, "new_host_mappings")

    @_builtins.property
    @pulumi.getter(name="primaryDnsAddressIpv4")
    def primary_dns_address_ipv4(self) -> _builtins.str:
        """
        Primary DNS Address (IPv4)
        """
        return pulumi.get(self, "primary_dns_address_ipv4")

    @_builtins.property
    @pulumi.getter(name="primaryDnsAddressIpv4Variable")
    def primary_dns_address_ipv4_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "primary_dns_address_ipv4_variable")

    @_builtins.property
    @pulumi.getter(name="primaryDnsAddressIpv6")
    def primary_dns_address_ipv6(self) -> _builtins.str:
        """
        Primary DNS Address (IPv6)
        """
        return pulumi.get(self, "primary_dns_address_ipv6")

    @_builtins.property
    @pulumi.getter(name="primaryDnsAddressIpv6Variable")
    def primary_dns_address_ipv6_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "primary_dns_address_ipv6_variable")

    @_builtins.property
    @pulumi.getter(name="secondaryDnsAddressIpv4")
    def secondary_dns_address_ipv4(self) -> _builtins.str:
        """
        Secondary DNS Address (IPv4)
        """
        return pulumi.get(self, "secondary_dns_address_ipv4")

    @_builtins.property
    @pulumi.getter(name="secondaryDnsAddressIpv4Variable")
    def secondary_dns_address_ipv4_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "secondary_dns_address_ipv4_variable")

    @_builtins.property
    @pulumi.getter(name="secondaryDnsAddressIpv6")
    def secondary_dns_address_ipv6(self) -> _builtins.str:
        """
        Secondary DNS Address (IPv6)
        """
        return pulumi.get(self, "secondary_dns_address_ipv6")

    @_builtins.property
    @pulumi.getter(name="secondaryDnsAddressIpv6Variable")
    def secondary_dns_address_ipv6_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "secondary_dns_address_ipv6_variable")

    @_builtins.property
    @pulumi.getter
    def services(self) -> Sequence['outputs.GetTransportWanVpnFeatureServiceResult']:
        """
        Service
        """
        return pulumi.get(self, "services")

    @_builtins.property
    @pulumi.getter
    def version(self) -> _builtins.int:
        """
        The version of the Feature
        """
        return pulumi.get(self, "version")

    @_builtins.property
    @pulumi.getter
    def vpn(self) -> _builtins.int:
        """
        VPN
        """
        return pulumi.get(self, "vpn")


class AwaitableGetTransportWanVpnFeatureResult(GetTransportWanVpnFeatureResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetTransportWanVpnFeatureResult(
            description=self.description,
            enhance_ecmp_keying=self.enhance_ecmp_keying,
            enhance_ecmp_keying_variable=self.enhance_ecmp_keying_variable,
            feature_profile_id=self.feature_profile_id,
            id=self.id,
            ipv4_static_routes=self.ipv4_static_routes,
            ipv6_static_routes=self.ipv6_static_routes,
            name=self.name,
            nat64_v4_pools=self.nat64_v4_pools,
            new_host_mappings=self.new_host_mappings,
            primary_dns_address_ipv4=self.primary_dns_address_ipv4,
            primary_dns_address_ipv4_variable=self.primary_dns_address_ipv4_variable,
            primary_dns_address_ipv6=self.primary_dns_address_ipv6,
            primary_dns_address_ipv6_variable=self.primary_dns_address_ipv6_variable,
            secondary_dns_address_ipv4=self.secondary_dns_address_ipv4,
            secondary_dns_address_ipv4_variable=self.secondary_dns_address_ipv4_variable,
            secondary_dns_address_ipv6=self.secondary_dns_address_ipv6,
            secondary_dns_address_ipv6_variable=self.secondary_dns_address_ipv6_variable,
            services=self.services,
            version=self.version,
            vpn=self.vpn)


def get_transport_wan_vpn_feature(feature_profile_id: Optional[_builtins.str] = None,
                                  id: Optional[_builtins.str] = None,
                                  opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetTransportWanVpnFeatureResult:
    """
    This data source can read the Transport WAN VPN Feature.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_sdwan as sdwan

    example = sdwan.get_transport_wan_vpn_feature(id="f6b2c44c-693c-4763-b010-895aa3d236bd",
        feature_profile_id="f6dd22c8-0b4f-496c-9a0b-6813d1f8b8ac")
    ```


    :param _builtins.str feature_profile_id: Feature Profile ID
    :param _builtins.str id: The id of the Feature
    """
    __args__ = dict()
    __args__['featureProfileId'] = feature_profile_id
    __args__['id'] = id
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('sdwan:index/getTransportWanVpnFeature:getTransportWanVpnFeature', __args__, opts=opts, typ=GetTransportWanVpnFeatureResult).value

    return AwaitableGetTransportWanVpnFeatureResult(
        description=pulumi.get(__ret__, 'description'),
        enhance_ecmp_keying=pulumi.get(__ret__, 'enhance_ecmp_keying'),
        enhance_ecmp_keying_variable=pulumi.get(__ret__, 'enhance_ecmp_keying_variable'),
        feature_profile_id=pulumi.get(__ret__, 'feature_profile_id'),
        id=pulumi.get(__ret__, 'id'),
        ipv4_static_routes=pulumi.get(__ret__, 'ipv4_static_routes'),
        ipv6_static_routes=pulumi.get(__ret__, 'ipv6_static_routes'),
        name=pulumi.get(__ret__, 'name'),
        nat64_v4_pools=pulumi.get(__ret__, 'nat64_v4_pools'),
        new_host_mappings=pulumi.get(__ret__, 'new_host_mappings'),
        primary_dns_address_ipv4=pulumi.get(__ret__, 'primary_dns_address_ipv4'),
        primary_dns_address_ipv4_variable=pulumi.get(__ret__, 'primary_dns_address_ipv4_variable'),
        primary_dns_address_ipv6=pulumi.get(__ret__, 'primary_dns_address_ipv6'),
        primary_dns_address_ipv6_variable=pulumi.get(__ret__, 'primary_dns_address_ipv6_variable'),
        secondary_dns_address_ipv4=pulumi.get(__ret__, 'secondary_dns_address_ipv4'),
        secondary_dns_address_ipv4_variable=pulumi.get(__ret__, 'secondary_dns_address_ipv4_variable'),
        secondary_dns_address_ipv6=pulumi.get(__ret__, 'secondary_dns_address_ipv6'),
        secondary_dns_address_ipv6_variable=pulumi.get(__ret__, 'secondary_dns_address_ipv6_variable'),
        services=pulumi.get(__ret__, 'services'),
        version=pulumi.get(__ret__, 'version'),
        vpn=pulumi.get(__ret__, 'vpn'))
def get_transport_wan_vpn_feature_output(feature_profile_id: Optional[pulumi.Input[_builtins.str]] = None,
                                         id: Optional[pulumi.Input[_builtins.str]] = None,
                                         opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetTransportWanVpnFeatureResult]:
    """
    This data source can read the Transport WAN VPN Feature.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_sdwan as sdwan

    example = sdwan.get_transport_wan_vpn_feature(id="f6b2c44c-693c-4763-b010-895aa3d236bd",
        feature_profile_id="f6dd22c8-0b4f-496c-9a0b-6813d1f8b8ac")
    ```


    :param _builtins.str feature_profile_id: Feature Profile ID
    :param _builtins.str id: The id of the Feature
    """
    __args__ = dict()
    __args__['featureProfileId'] = feature_profile_id
    __args__['id'] = id
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('sdwan:index/getTransportWanVpnFeature:getTransportWanVpnFeature', __args__, opts=opts, typ=GetTransportWanVpnFeatureResult)
    return __ret__.apply(lambda __response__: GetTransportWanVpnFeatureResult(
        description=pulumi.get(__response__, 'description'),
        enhance_ecmp_keying=pulumi.get(__response__, 'enhance_ecmp_keying'),
        enhance_ecmp_keying_variable=pulumi.get(__response__, 'enhance_ecmp_keying_variable'),
        feature_profile_id=pulumi.get(__response__, 'feature_profile_id'),
        id=pulumi.get(__response__, 'id'),
        ipv4_static_routes=pulumi.get(__response__, 'ipv4_static_routes'),
        ipv6_static_routes=pulumi.get(__response__, 'ipv6_static_routes'),
        name=pulumi.get(__response__, 'name'),
        nat64_v4_pools=pulumi.get(__response__, 'nat64_v4_pools'),
        new_host_mappings=pulumi.get(__response__, 'new_host_mappings'),
        primary_dns_address_ipv4=pulumi.get(__response__, 'primary_dns_address_ipv4'),
        primary_dns_address_ipv4_variable=pulumi.get(__response__, 'primary_dns_address_ipv4_variable'),
        primary_dns_address_ipv6=pulumi.get(__response__, 'primary_dns_address_ipv6'),
        primary_dns_address_ipv6_variable=pulumi.get(__response__, 'primary_dns_address_ipv6_variable'),
        secondary_dns_address_ipv4=pulumi.get(__response__, 'secondary_dns_address_ipv4'),
        secondary_dns_address_ipv4_variable=pulumi.get(__response__, 'secondary_dns_address_ipv4_variable'),
        secondary_dns_address_ipv6=pulumi.get(__response__, 'secondary_dns_address_ipv6'),
        secondary_dns_address_ipv6_variable=pulumi.get(__response__, 'secondary_dns_address_ipv6_variable'),
        services=pulumi.get(__response__, 'services'),
        version=pulumi.get(__response__, 'version'),
        vpn=pulumi.get(__response__, 'vpn')))
