# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities

__all__ = [
    'GetTlsSslProfilePolicyDefinitionResult',
    'AwaitableGetTlsSslProfilePolicyDefinitionResult',
    'get_tls_ssl_profile_policy_definition',
    'get_tls_ssl_profile_policy_definition_output',
]

@pulumi.output_type
class GetTlsSslProfilePolicyDefinitionResult:
    """
    A collection of values returned by getTlsSslProfilePolicyDefinition.
    """
    def __init__(__self__, allow_url_list_id=None, allow_url_list_version=None, block_url_list_id=None, block_url_list_version=None, decrypt_categories=None, decrypt_threshold=None, description=None, fail_decrypt=None, id=None, mode=None, name=None, never_decrypt_categories=None, reputation=None, skip_decrypt_categories=None, version=None):
        if allow_url_list_id and not isinstance(allow_url_list_id, str):
            raise TypeError("Expected argument 'allow_url_list_id' to be a str")
        pulumi.set(__self__, "allow_url_list_id", allow_url_list_id)
        if allow_url_list_version and not isinstance(allow_url_list_version, int):
            raise TypeError("Expected argument 'allow_url_list_version' to be a int")
        pulumi.set(__self__, "allow_url_list_version", allow_url_list_version)
        if block_url_list_id and not isinstance(block_url_list_id, str):
            raise TypeError("Expected argument 'block_url_list_id' to be a str")
        pulumi.set(__self__, "block_url_list_id", block_url_list_id)
        if block_url_list_version and not isinstance(block_url_list_version, int):
            raise TypeError("Expected argument 'block_url_list_version' to be a int")
        pulumi.set(__self__, "block_url_list_version", block_url_list_version)
        if decrypt_categories and not isinstance(decrypt_categories, list):
            raise TypeError("Expected argument 'decrypt_categories' to be a list")
        pulumi.set(__self__, "decrypt_categories", decrypt_categories)
        if decrypt_threshold and not isinstance(decrypt_threshold, str):
            raise TypeError("Expected argument 'decrypt_threshold' to be a str")
        pulumi.set(__self__, "decrypt_threshold", decrypt_threshold)
        if description and not isinstance(description, str):
            raise TypeError("Expected argument 'description' to be a str")
        pulumi.set(__self__, "description", description)
        if fail_decrypt and not isinstance(fail_decrypt, bool):
            raise TypeError("Expected argument 'fail_decrypt' to be a bool")
        pulumi.set(__self__, "fail_decrypt", fail_decrypt)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if mode and not isinstance(mode, str):
            raise TypeError("Expected argument 'mode' to be a str")
        pulumi.set(__self__, "mode", mode)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)
        if never_decrypt_categories and not isinstance(never_decrypt_categories, list):
            raise TypeError("Expected argument 'never_decrypt_categories' to be a list")
        pulumi.set(__self__, "never_decrypt_categories", never_decrypt_categories)
        if reputation and not isinstance(reputation, bool):
            raise TypeError("Expected argument 'reputation' to be a bool")
        pulumi.set(__self__, "reputation", reputation)
        if skip_decrypt_categories and not isinstance(skip_decrypt_categories, list):
            raise TypeError("Expected argument 'skip_decrypt_categories' to be a list")
        pulumi.set(__self__, "skip_decrypt_categories", skip_decrypt_categories)
        if version and not isinstance(version, int):
            raise TypeError("Expected argument 'version' to be a int")
        pulumi.set(__self__, "version", version)

    @_builtins.property
    @pulumi.getter(name="allowUrlListId")
    def allow_url_list_id(self) -> _builtins.str:
        """
        Allow URL list ID
        """
        return pulumi.get(self, "allow_url_list_id")

    @_builtins.property
    @pulumi.getter(name="allowUrlListVersion")
    def allow_url_list_version(self) -> _builtins.int:
        """
        Allow URL list version
        """
        return pulumi.get(self, "allow_url_list_version")

    @_builtins.property
    @pulumi.getter(name="blockUrlListId")
    def block_url_list_id(self) -> _builtins.str:
        """
        Block URL list ID
        """
        return pulumi.get(self, "block_url_list_id")

    @_builtins.property
    @pulumi.getter(name="blockUrlListVersion")
    def block_url_list_version(self) -> _builtins.int:
        """
        Block URL list version
        """
        return pulumi.get(self, "block_url_list_version")

    @_builtins.property
    @pulumi.getter(name="decryptCategories")
    def decrypt_categories(self) -> Sequence[_builtins.str]:
        """
        Categories that should be decrypted
        """
        return pulumi.get(self, "decrypt_categories")

    @_builtins.property
    @pulumi.getter(name="decryptThreshold")
    def decrypt_threshold(self) -> _builtins.str:
        """
        Decrypt threshold
        """
        return pulumi.get(self, "decrypt_threshold")

    @_builtins.property
    @pulumi.getter
    def description(self) -> _builtins.str:
        """
        The description of the policy definition.
        """
        return pulumi.get(self, "description")

    @_builtins.property
    @pulumi.getter(name="failDecrypt")
    def fail_decrypt(self) -> _builtins.bool:
        """
        Fail decrypt enabled
        """
        return pulumi.get(self, "fail_decrypt")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        The id of the object
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter
    def mode(self) -> _builtins.str:
        """
        The policy mode
        """
        return pulumi.get(self, "mode")

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        """
        The name of the policy definition.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter(name="neverDecryptCategories")
    def never_decrypt_categories(self) -> Sequence[_builtins.str]:
        """
        Categories that should never be decrypted
        """
        return pulumi.get(self, "never_decrypt_categories")

    @_builtins.property
    @pulumi.getter
    def reputation(self) -> _builtins.bool:
        """
        Reputation enabled
        """
        return pulumi.get(self, "reputation")

    @_builtins.property
    @pulumi.getter(name="skipDecryptCategories")
    def skip_decrypt_categories(self) -> Sequence[_builtins.str]:
        """
        Categories that should skipped
        """
        return pulumi.get(self, "skip_decrypt_categories")

    @_builtins.property
    @pulumi.getter
    def version(self) -> _builtins.int:
        """
        The version of the object
        """
        return pulumi.get(self, "version")


class AwaitableGetTlsSslProfilePolicyDefinitionResult(GetTlsSslProfilePolicyDefinitionResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetTlsSslProfilePolicyDefinitionResult(
            allow_url_list_id=self.allow_url_list_id,
            allow_url_list_version=self.allow_url_list_version,
            block_url_list_id=self.block_url_list_id,
            block_url_list_version=self.block_url_list_version,
            decrypt_categories=self.decrypt_categories,
            decrypt_threshold=self.decrypt_threshold,
            description=self.description,
            fail_decrypt=self.fail_decrypt,
            id=self.id,
            mode=self.mode,
            name=self.name,
            never_decrypt_categories=self.never_decrypt_categories,
            reputation=self.reputation,
            skip_decrypt_categories=self.skip_decrypt_categories,
            version=self.version)


def get_tls_ssl_profile_policy_definition(id: Optional[_builtins.str] = None,
                                          opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetTlsSslProfilePolicyDefinitionResult:
    """
    This data source can read the TLS SSL Profile Policy Definition .

    ## Example Usage

    ```python
    import pulumi
    import pulumi_sdwan as sdwan

    example = sdwan.get_tls_ssl_profile_policy_definition(id="f6b2c44c-693c-4763-b010-895aa3d236bd")
    ```


    :param _builtins.str id: The id of the object
    """
    __args__ = dict()
    __args__['id'] = id
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('sdwan:index/getTlsSslProfilePolicyDefinition:getTlsSslProfilePolicyDefinition', __args__, opts=opts, typ=GetTlsSslProfilePolicyDefinitionResult).value

    return AwaitableGetTlsSslProfilePolicyDefinitionResult(
        allow_url_list_id=pulumi.get(__ret__, 'allow_url_list_id'),
        allow_url_list_version=pulumi.get(__ret__, 'allow_url_list_version'),
        block_url_list_id=pulumi.get(__ret__, 'block_url_list_id'),
        block_url_list_version=pulumi.get(__ret__, 'block_url_list_version'),
        decrypt_categories=pulumi.get(__ret__, 'decrypt_categories'),
        decrypt_threshold=pulumi.get(__ret__, 'decrypt_threshold'),
        description=pulumi.get(__ret__, 'description'),
        fail_decrypt=pulumi.get(__ret__, 'fail_decrypt'),
        id=pulumi.get(__ret__, 'id'),
        mode=pulumi.get(__ret__, 'mode'),
        name=pulumi.get(__ret__, 'name'),
        never_decrypt_categories=pulumi.get(__ret__, 'never_decrypt_categories'),
        reputation=pulumi.get(__ret__, 'reputation'),
        skip_decrypt_categories=pulumi.get(__ret__, 'skip_decrypt_categories'),
        version=pulumi.get(__ret__, 'version'))
def get_tls_ssl_profile_policy_definition_output(id: Optional[pulumi.Input[_builtins.str]] = None,
                                                 opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetTlsSslProfilePolicyDefinitionResult]:
    """
    This data source can read the TLS SSL Profile Policy Definition .

    ## Example Usage

    ```python
    import pulumi
    import pulumi_sdwan as sdwan

    example = sdwan.get_tls_ssl_profile_policy_definition(id="f6b2c44c-693c-4763-b010-895aa3d236bd")
    ```


    :param _builtins.str id: The id of the object
    """
    __args__ = dict()
    __args__['id'] = id
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('sdwan:index/getTlsSslProfilePolicyDefinition:getTlsSslProfilePolicyDefinition', __args__, opts=opts, typ=GetTlsSslProfilePolicyDefinitionResult)
    return __ret__.apply(lambda __response__: GetTlsSslProfilePolicyDefinitionResult(
        allow_url_list_id=pulumi.get(__response__, 'allow_url_list_id'),
        allow_url_list_version=pulumi.get(__response__, 'allow_url_list_version'),
        block_url_list_id=pulumi.get(__response__, 'block_url_list_id'),
        block_url_list_version=pulumi.get(__response__, 'block_url_list_version'),
        decrypt_categories=pulumi.get(__response__, 'decrypt_categories'),
        decrypt_threshold=pulumi.get(__response__, 'decrypt_threshold'),
        description=pulumi.get(__response__, 'description'),
        fail_decrypt=pulumi.get(__response__, 'fail_decrypt'),
        id=pulumi.get(__response__, 'id'),
        mode=pulumi.get(__response__, 'mode'),
        name=pulumi.get(__response__, 'name'),
        never_decrypt_categories=pulumi.get(__response__, 'never_decrypt_categories'),
        reputation=pulumi.get(__response__, 'reputation'),
        skip_decrypt_categories=pulumi.get(__response__, 'skip_decrypt_categories'),
        version=pulumi.get(__response__, 'version')))
