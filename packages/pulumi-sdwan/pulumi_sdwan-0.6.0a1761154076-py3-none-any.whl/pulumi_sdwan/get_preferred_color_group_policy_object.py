# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities

__all__ = [
    'GetPreferredColorGroupPolicyObjectResult',
    'AwaitableGetPreferredColorGroupPolicyObjectResult',
    'get_preferred_color_group_policy_object',
    'get_preferred_color_group_policy_object_output',
]

@pulumi.output_type
class GetPreferredColorGroupPolicyObjectResult:
    """
    A collection of values returned by getPreferredColorGroupPolicyObject.
    """
    def __init__(__self__, id=None, name=None, primary_color_preference=None, primary_path_preference=None, secondary_color_preference=None, secondary_path_preference=None, tertiary_color_preference=None, tertiary_path_preference=None, version=None):
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)
        if primary_color_preference and not isinstance(primary_color_preference, str):
            raise TypeError("Expected argument 'primary_color_preference' to be a str")
        pulumi.set(__self__, "primary_color_preference", primary_color_preference)
        if primary_path_preference and not isinstance(primary_path_preference, str):
            raise TypeError("Expected argument 'primary_path_preference' to be a str")
        pulumi.set(__self__, "primary_path_preference", primary_path_preference)
        if secondary_color_preference and not isinstance(secondary_color_preference, str):
            raise TypeError("Expected argument 'secondary_color_preference' to be a str")
        pulumi.set(__self__, "secondary_color_preference", secondary_color_preference)
        if secondary_path_preference and not isinstance(secondary_path_preference, str):
            raise TypeError("Expected argument 'secondary_path_preference' to be a str")
        pulumi.set(__self__, "secondary_path_preference", secondary_path_preference)
        if tertiary_color_preference and not isinstance(tertiary_color_preference, str):
            raise TypeError("Expected argument 'tertiary_color_preference' to be a str")
        pulumi.set(__self__, "tertiary_color_preference", tertiary_color_preference)
        if tertiary_path_preference and not isinstance(tertiary_path_preference, str):
            raise TypeError("Expected argument 'tertiary_path_preference' to be a str")
        pulumi.set(__self__, "tertiary_path_preference", tertiary_path_preference)
        if version and not isinstance(version, int):
            raise TypeError("Expected argument 'version' to be a int")
        pulumi.set(__self__, "version", version)

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        The id of the object
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        """
        The name of the policy object
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter(name="primaryColorPreference")
    def primary_color_preference(self) -> _builtins.str:
        """
        Color or space separated list of colors
        """
        return pulumi.get(self, "primary_color_preference")

    @_builtins.property
    @pulumi.getter(name="primaryPathPreference")
    def primary_path_preference(self) -> _builtins.str:
        """
        Path preference
        """
        return pulumi.get(self, "primary_path_preference")

    @_builtins.property
    @pulumi.getter(name="secondaryColorPreference")
    def secondary_color_preference(self) -> _builtins.str:
        """
        Color or space separated list of colors
        """
        return pulumi.get(self, "secondary_color_preference")

    @_builtins.property
    @pulumi.getter(name="secondaryPathPreference")
    def secondary_path_preference(self) -> _builtins.str:
        """
        Path preference
        """
        return pulumi.get(self, "secondary_path_preference")

    @_builtins.property
    @pulumi.getter(name="tertiaryColorPreference")
    def tertiary_color_preference(self) -> _builtins.str:
        """
        Color or space separated list of colors
        """
        return pulumi.get(self, "tertiary_color_preference")

    @_builtins.property
    @pulumi.getter(name="tertiaryPathPreference")
    def tertiary_path_preference(self) -> _builtins.str:
        """
        Path preference
        """
        return pulumi.get(self, "tertiary_path_preference")

    @_builtins.property
    @pulumi.getter
    def version(self) -> _builtins.int:
        """
        The version of the object
        """
        return pulumi.get(self, "version")


class AwaitableGetPreferredColorGroupPolicyObjectResult(GetPreferredColorGroupPolicyObjectResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetPreferredColorGroupPolicyObjectResult(
            id=self.id,
            name=self.name,
            primary_color_preference=self.primary_color_preference,
            primary_path_preference=self.primary_path_preference,
            secondary_color_preference=self.secondary_color_preference,
            secondary_path_preference=self.secondary_path_preference,
            tertiary_color_preference=self.tertiary_color_preference,
            tertiary_path_preference=self.tertiary_path_preference,
            version=self.version)


def get_preferred_color_group_policy_object(id: Optional[_builtins.str] = None,
                                            opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetPreferredColorGroupPolicyObjectResult:
    """
    This data source can read the Preferred Color Group Policy Object .

    ## Example Usage

    ```python
    import pulumi
    import pulumi_sdwan as sdwan

    example = sdwan.get_preferred_color_group_policy_object(id="f6b2c44c-693c-4763-b010-895aa3d236bd")
    ```


    :param _builtins.str id: The id of the object
    """
    __args__ = dict()
    __args__['id'] = id
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('sdwan:index/getPreferredColorGroupPolicyObject:getPreferredColorGroupPolicyObject', __args__, opts=opts, typ=GetPreferredColorGroupPolicyObjectResult).value

    return AwaitableGetPreferredColorGroupPolicyObjectResult(
        id=pulumi.get(__ret__, 'id'),
        name=pulumi.get(__ret__, 'name'),
        primary_color_preference=pulumi.get(__ret__, 'primary_color_preference'),
        primary_path_preference=pulumi.get(__ret__, 'primary_path_preference'),
        secondary_color_preference=pulumi.get(__ret__, 'secondary_color_preference'),
        secondary_path_preference=pulumi.get(__ret__, 'secondary_path_preference'),
        tertiary_color_preference=pulumi.get(__ret__, 'tertiary_color_preference'),
        tertiary_path_preference=pulumi.get(__ret__, 'tertiary_path_preference'),
        version=pulumi.get(__ret__, 'version'))
def get_preferred_color_group_policy_object_output(id: Optional[pulumi.Input[_builtins.str]] = None,
                                                   opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetPreferredColorGroupPolicyObjectResult]:
    """
    This data source can read the Preferred Color Group Policy Object .

    ## Example Usage

    ```python
    import pulumi
    import pulumi_sdwan as sdwan

    example = sdwan.get_preferred_color_group_policy_object(id="f6b2c44c-693c-4763-b010-895aa3d236bd")
    ```


    :param _builtins.str id: The id of the object
    """
    __args__ = dict()
    __args__['id'] = id
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('sdwan:index/getPreferredColorGroupPolicyObject:getPreferredColorGroupPolicyObject', __args__, opts=opts, typ=GetPreferredColorGroupPolicyObjectResult)
    return __ret__.apply(lambda __response__: GetPreferredColorGroupPolicyObjectResult(
        id=pulumi.get(__response__, 'id'),
        name=pulumi.get(__response__, 'name'),
        primary_color_preference=pulumi.get(__response__, 'primary_color_preference'),
        primary_path_preference=pulumi.get(__response__, 'primary_path_preference'),
        secondary_color_preference=pulumi.get(__response__, 'secondary_color_preference'),
        secondary_path_preference=pulumi.get(__response__, 'secondary_path_preference'),
        tertiary_color_preference=pulumi.get(__response__, 'tertiary_color_preference'),
        tertiary_path_preference=pulumi.get(__response__, 'tertiary_path_preference'),
        version=pulumi.get(__response__, 'version')))
