# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities
from . import outputs

__all__ = [
    'GetIntrusionPreventionPolicyDefinitionResult',
    'AwaitableGetIntrusionPreventionPolicyDefinitionResult',
    'get_intrusion_prevention_policy_definition',
    'get_intrusion_prevention_policy_definition_output',
]

@pulumi.output_type
class GetIntrusionPreventionPolicyDefinitionResult:
    """
    A collection of values returned by getIntrusionPreventionPolicyDefinition.
    """
    def __init__(__self__, custom_signature=None, description=None, id=None, inspection_mode=None, ips_signature_list_id=None, ips_signature_list_version=None, log_level=None, loggings=None, mode=None, name=None, signature_set=None, target_vpns=None, version=None):
        if custom_signature and not isinstance(custom_signature, bool):
            raise TypeError("Expected argument 'custom_signature' to be a bool")
        pulumi.set(__self__, "custom_signature", custom_signature)
        if description and not isinstance(description, str):
            raise TypeError("Expected argument 'description' to be a str")
        pulumi.set(__self__, "description", description)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if inspection_mode and not isinstance(inspection_mode, str):
            raise TypeError("Expected argument 'inspection_mode' to be a str")
        pulumi.set(__self__, "inspection_mode", inspection_mode)
        if ips_signature_list_id and not isinstance(ips_signature_list_id, str):
            raise TypeError("Expected argument 'ips_signature_list_id' to be a str")
        pulumi.set(__self__, "ips_signature_list_id", ips_signature_list_id)
        if ips_signature_list_version and not isinstance(ips_signature_list_version, int):
            raise TypeError("Expected argument 'ips_signature_list_version' to be a int")
        pulumi.set(__self__, "ips_signature_list_version", ips_signature_list_version)
        if log_level and not isinstance(log_level, str):
            raise TypeError("Expected argument 'log_level' to be a str")
        pulumi.set(__self__, "log_level", log_level)
        if loggings and not isinstance(loggings, list):
            raise TypeError("Expected argument 'loggings' to be a list")
        pulumi.set(__self__, "loggings", loggings)
        if mode and not isinstance(mode, str):
            raise TypeError("Expected argument 'mode' to be a str")
        pulumi.set(__self__, "mode", mode)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)
        if signature_set and not isinstance(signature_set, str):
            raise TypeError("Expected argument 'signature_set' to be a str")
        pulumi.set(__self__, "signature_set", signature_set)
        if target_vpns and not isinstance(target_vpns, list):
            raise TypeError("Expected argument 'target_vpns' to be a list")
        pulumi.set(__self__, "target_vpns", target_vpns)
        if version and not isinstance(version, int):
            raise TypeError("Expected argument 'version' to be a int")
        pulumi.set(__self__, "version", version)

    @_builtins.property
    @pulumi.getter(name="customSignature")
    def custom_signature(self) -> _builtins.bool:
        """
        Custom signature
        """
        return pulumi.get(self, "custom_signature")

    @_builtins.property
    @pulumi.getter
    def description(self) -> _builtins.str:
        """
        The description of the policy definition
        """
        return pulumi.get(self, "description")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        The id of the object
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter(name="inspectionMode")
    def inspection_mode(self) -> _builtins.str:
        """
        The inspection mode
        """
        return pulumi.get(self, "inspection_mode")

    @_builtins.property
    @pulumi.getter(name="ipsSignatureListId")
    def ips_signature_list_id(self) -> _builtins.str:
        """
        IPS signature list ID
        """
        return pulumi.get(self, "ips_signature_list_id")

    @_builtins.property
    @pulumi.getter(name="ipsSignatureListVersion")
    def ips_signature_list_version(self) -> _builtins.int:
        """
        IPS signature list version
        """
        return pulumi.get(self, "ips_signature_list_version")

    @_builtins.property
    @pulumi.getter(name="logLevel")
    def log_level(self) -> _builtins.str:
        """
        Log level
        """
        return pulumi.get(self, "log_level")

    @_builtins.property
    @pulumi.getter
    def loggings(self) -> Sequence['outputs.GetIntrusionPreventionPolicyDefinitionLoggingResult']:
        return pulumi.get(self, "loggings")

    @_builtins.property
    @pulumi.getter
    def mode(self) -> _builtins.str:
        """
        The policy mode
        """
        return pulumi.get(self, "mode")

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        """
        The name of the policy definition
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter(name="signatureSet")
    def signature_set(self) -> _builtins.str:
        """
        Signature set
        """
        return pulumi.get(self, "signature_set")

    @_builtins.property
    @pulumi.getter(name="targetVpns")
    def target_vpns(self) -> Sequence[_builtins.str]:
        """
        List of VPN IDs
        """
        return pulumi.get(self, "target_vpns")

    @_builtins.property
    @pulumi.getter
    def version(self) -> _builtins.int:
        """
        The version of the object
        """
        return pulumi.get(self, "version")


class AwaitableGetIntrusionPreventionPolicyDefinitionResult(GetIntrusionPreventionPolicyDefinitionResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetIntrusionPreventionPolicyDefinitionResult(
            custom_signature=self.custom_signature,
            description=self.description,
            id=self.id,
            inspection_mode=self.inspection_mode,
            ips_signature_list_id=self.ips_signature_list_id,
            ips_signature_list_version=self.ips_signature_list_version,
            log_level=self.log_level,
            loggings=self.loggings,
            mode=self.mode,
            name=self.name,
            signature_set=self.signature_set,
            target_vpns=self.target_vpns,
            version=self.version)


def get_intrusion_prevention_policy_definition(id: Optional[_builtins.str] = None,
                                               opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetIntrusionPreventionPolicyDefinitionResult:
    """
    This data source can read the Intrusion Prevention Policy Definition .

    ## Example Usage

    ```python
    import pulumi
    import pulumi_sdwan as sdwan

    example = sdwan.get_intrusion_prevention_policy_definition(id="f6b2c44c-693c-4763-b010-895aa3d236bd")
    ```


    :param _builtins.str id: The id of the object
    """
    __args__ = dict()
    __args__['id'] = id
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('sdwan:index/getIntrusionPreventionPolicyDefinition:getIntrusionPreventionPolicyDefinition', __args__, opts=opts, typ=GetIntrusionPreventionPolicyDefinitionResult).value

    return AwaitableGetIntrusionPreventionPolicyDefinitionResult(
        custom_signature=pulumi.get(__ret__, 'custom_signature'),
        description=pulumi.get(__ret__, 'description'),
        id=pulumi.get(__ret__, 'id'),
        inspection_mode=pulumi.get(__ret__, 'inspection_mode'),
        ips_signature_list_id=pulumi.get(__ret__, 'ips_signature_list_id'),
        ips_signature_list_version=pulumi.get(__ret__, 'ips_signature_list_version'),
        log_level=pulumi.get(__ret__, 'log_level'),
        loggings=pulumi.get(__ret__, 'loggings'),
        mode=pulumi.get(__ret__, 'mode'),
        name=pulumi.get(__ret__, 'name'),
        signature_set=pulumi.get(__ret__, 'signature_set'),
        target_vpns=pulumi.get(__ret__, 'target_vpns'),
        version=pulumi.get(__ret__, 'version'))
def get_intrusion_prevention_policy_definition_output(id: Optional[pulumi.Input[_builtins.str]] = None,
                                                      opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetIntrusionPreventionPolicyDefinitionResult]:
    """
    This data source can read the Intrusion Prevention Policy Definition .

    ## Example Usage

    ```python
    import pulumi
    import pulumi_sdwan as sdwan

    example = sdwan.get_intrusion_prevention_policy_definition(id="f6b2c44c-693c-4763-b010-895aa3d236bd")
    ```


    :param _builtins.str id: The id of the object
    """
    __args__ = dict()
    __args__['id'] = id
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('sdwan:index/getIntrusionPreventionPolicyDefinition:getIntrusionPreventionPolicyDefinition', __args__, opts=opts, typ=GetIntrusionPreventionPolicyDefinitionResult)
    return __ret__.apply(lambda __response__: GetIntrusionPreventionPolicyDefinitionResult(
        custom_signature=pulumi.get(__response__, 'custom_signature'),
        description=pulumi.get(__response__, 'description'),
        id=pulumi.get(__response__, 'id'),
        inspection_mode=pulumi.get(__response__, 'inspection_mode'),
        ips_signature_list_id=pulumi.get(__response__, 'ips_signature_list_id'),
        ips_signature_list_version=pulumi.get(__response__, 'ips_signature_list_version'),
        log_level=pulumi.get(__response__, 'log_level'),
        loggings=pulumi.get(__response__, 'loggings'),
        mode=pulumi.get(__response__, 'mode'),
        name=pulumi.get(__response__, 'name'),
        signature_set=pulumi.get(__response__, 'signature_set'),
        target_vpns=pulumi.get(__response__, 'target_vpns'),
        version=pulumi.get(__response__, 'version')))
