# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities
from . import outputs

__all__ = [
    'GetServiceWirelessLanFeatureResult',
    'AwaitableGetServiceWirelessLanFeatureResult',
    'get_service_wireless_lan_feature',
    'get_service_wireless_lan_feature_output',
]

@pulumi.output_type
class GetServiceWirelessLanFeatureResult:
    """
    A collection of values returned by getServiceWirelessLanFeature.
    """
    def __init__(__self__, country=None, country_variable=None, description=None, enable24g=None, enable24g_variable=None, enable5g=None, enable5g_variable=None, feature_profile_id=None, id=None, me_default_gateway=None, me_default_gateway_variable=None, me_dynamic_ip_enabled=None, me_ipv4_address=None, me_ipv4_address_variable=None, me_subnet_mask=None, me_subnet_mask_variable=None, name=None, password=None, password_variable=None, ssids=None, username=None, username_variable=None, version=None):
        if country and not isinstance(country, str):
            raise TypeError("Expected argument 'country' to be a str")
        pulumi.set(__self__, "country", country)
        if country_variable and not isinstance(country_variable, str):
            raise TypeError("Expected argument 'country_variable' to be a str")
        pulumi.set(__self__, "country_variable", country_variable)
        if description and not isinstance(description, str):
            raise TypeError("Expected argument 'description' to be a str")
        pulumi.set(__self__, "description", description)
        if enable24g and not isinstance(enable24g, bool):
            raise TypeError("Expected argument 'enable24g' to be a bool")
        pulumi.set(__self__, "enable24g", enable24g)
        if enable24g_variable and not isinstance(enable24g_variable, str):
            raise TypeError("Expected argument 'enable24g_variable' to be a str")
        pulumi.set(__self__, "enable24g_variable", enable24g_variable)
        if enable5g and not isinstance(enable5g, bool):
            raise TypeError("Expected argument 'enable5g' to be a bool")
        pulumi.set(__self__, "enable5g", enable5g)
        if enable5g_variable and not isinstance(enable5g_variable, str):
            raise TypeError("Expected argument 'enable5g_variable' to be a str")
        pulumi.set(__self__, "enable5g_variable", enable5g_variable)
        if feature_profile_id and not isinstance(feature_profile_id, str):
            raise TypeError("Expected argument 'feature_profile_id' to be a str")
        pulumi.set(__self__, "feature_profile_id", feature_profile_id)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if me_default_gateway and not isinstance(me_default_gateway, str):
            raise TypeError("Expected argument 'me_default_gateway' to be a str")
        pulumi.set(__self__, "me_default_gateway", me_default_gateway)
        if me_default_gateway_variable and not isinstance(me_default_gateway_variable, str):
            raise TypeError("Expected argument 'me_default_gateway_variable' to be a str")
        pulumi.set(__self__, "me_default_gateway_variable", me_default_gateway_variable)
        if me_dynamic_ip_enabled and not isinstance(me_dynamic_ip_enabled, bool):
            raise TypeError("Expected argument 'me_dynamic_ip_enabled' to be a bool")
        pulumi.set(__self__, "me_dynamic_ip_enabled", me_dynamic_ip_enabled)
        if me_ipv4_address and not isinstance(me_ipv4_address, str):
            raise TypeError("Expected argument 'me_ipv4_address' to be a str")
        pulumi.set(__self__, "me_ipv4_address", me_ipv4_address)
        if me_ipv4_address_variable and not isinstance(me_ipv4_address_variable, str):
            raise TypeError("Expected argument 'me_ipv4_address_variable' to be a str")
        pulumi.set(__self__, "me_ipv4_address_variable", me_ipv4_address_variable)
        if me_subnet_mask and not isinstance(me_subnet_mask, str):
            raise TypeError("Expected argument 'me_subnet_mask' to be a str")
        pulumi.set(__self__, "me_subnet_mask", me_subnet_mask)
        if me_subnet_mask_variable and not isinstance(me_subnet_mask_variable, str):
            raise TypeError("Expected argument 'me_subnet_mask_variable' to be a str")
        pulumi.set(__self__, "me_subnet_mask_variable", me_subnet_mask_variable)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)
        if password and not isinstance(password, str):
            raise TypeError("Expected argument 'password' to be a str")
        pulumi.set(__self__, "password", password)
        if password_variable and not isinstance(password_variable, str):
            raise TypeError("Expected argument 'password_variable' to be a str")
        pulumi.set(__self__, "password_variable", password_variable)
        if ssids and not isinstance(ssids, list):
            raise TypeError("Expected argument 'ssids' to be a list")
        pulumi.set(__self__, "ssids", ssids)
        if username and not isinstance(username, str):
            raise TypeError("Expected argument 'username' to be a str")
        pulumi.set(__self__, "username", username)
        if username_variable and not isinstance(username_variable, str):
            raise TypeError("Expected argument 'username_variable' to be a str")
        pulumi.set(__self__, "username_variable", username_variable)
        if version and not isinstance(version, int):
            raise TypeError("Expected argument 'version' to be a int")
        pulumi.set(__self__, "version", version)

    @_builtins.property
    @pulumi.getter
    def country(self) -> _builtins.str:
        """
        Select country
        """
        return pulumi.get(self, "country")

    @_builtins.property
    @pulumi.getter(name="countryVariable")
    def country_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "country_variable")

    @_builtins.property
    @pulumi.getter
    def description(self) -> _builtins.str:
        """
        The description of the Feature
        """
        return pulumi.get(self, "description")

    @_builtins.property
    @pulumi.getter
    def enable24g(self) -> _builtins.bool:
        """
        2.4GHz Enabled
        """
        return pulumi.get(self, "enable24g")

    @_builtins.property
    @pulumi.getter(name="enable24gVariable")
    def enable24g_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "enable24g_variable")

    @_builtins.property
    @pulumi.getter
    def enable5g(self) -> _builtins.bool:
        """
        5GHz Enabled
        """
        return pulumi.get(self, "enable5g")

    @_builtins.property
    @pulumi.getter(name="enable5gVariable")
    def enable5g_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "enable5g_variable")

    @_builtins.property
    @pulumi.getter(name="featureProfileId")
    def feature_profile_id(self) -> _builtins.str:
        """
        Feature Profile ID
        """
        return pulumi.get(self, "feature_profile_id")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        The id of the Feature
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter(name="meDefaultGateway")
    def me_default_gateway(self) -> _builtins.str:
        """
        Set mobile express default gateway
        """
        return pulumi.get(self, "me_default_gateway")

    @_builtins.property
    @pulumi.getter(name="meDefaultGatewayVariable")
    def me_default_gateway_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "me_default_gateway_variable")

    @_builtins.property
    @pulumi.getter(name="meDynamicIpEnabled")
    def me_dynamic_ip_enabled(self) -> _builtins.bool:
        """
        ME management IP dynamic allocated by DHCP
        """
        return pulumi.get(self, "me_dynamic_ip_enabled")

    @_builtins.property
    @pulumi.getter(name="meIpv4Address")
    def me_ipv4_address(self) -> _builtins.str:
        """
        Set mobile express controller address
        """
        return pulumi.get(self, "me_ipv4_address")

    @_builtins.property
    @pulumi.getter(name="meIpv4AddressVariable")
    def me_ipv4_address_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "me_ipv4_address_variable")

    @_builtins.property
    @pulumi.getter(name="meSubnetMask")
    def me_subnet_mask(self) -> _builtins.str:
        """
        Set mobile express controller subnet mask
        """
        return pulumi.get(self, "me_subnet_mask")

    @_builtins.property
    @pulumi.getter(name="meSubnetMaskVariable")
    def me_subnet_mask_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "me_subnet_mask_variable")

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        """
        The name of the Feature
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def password(self) -> _builtins.str:
        """
        Set management password,the password must contains characters from all of the following classes,lowercase letters,uppercase letters,digits,and special characters. No character in the password can be repeated more than three times consecutively. The password must not be the same as the associated username or the username reversed. The password must not be cisco,ocsic,or any variant obtained by changing the capitalization of the letters in word cisco. In addition,you can't substitute 1,l,or ! for i,0 for o,$ for s.
        """
        return pulumi.get(self, "password")

    @_builtins.property
    @pulumi.getter(name="passwordVariable")
    def password_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "password_variable")

    @_builtins.property
    @pulumi.getter
    def ssids(self) -> Sequence['outputs.GetServiceWirelessLanFeatureSsidResult']:
        """
        Configure Wi-Fi SSID profile
        """
        return pulumi.get(self, "ssids")

    @_builtins.property
    @pulumi.getter
    def username(self) -> _builtins.str:
        """
        Set management username
        """
        return pulumi.get(self, "username")

    @_builtins.property
    @pulumi.getter(name="usernameVariable")
    def username_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "username_variable")

    @_builtins.property
    @pulumi.getter
    def version(self) -> _builtins.int:
        """
        The version of the Feature
        """
        return pulumi.get(self, "version")


class AwaitableGetServiceWirelessLanFeatureResult(GetServiceWirelessLanFeatureResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetServiceWirelessLanFeatureResult(
            country=self.country,
            country_variable=self.country_variable,
            description=self.description,
            enable24g=self.enable24g,
            enable24g_variable=self.enable24g_variable,
            enable5g=self.enable5g,
            enable5g_variable=self.enable5g_variable,
            feature_profile_id=self.feature_profile_id,
            id=self.id,
            me_default_gateway=self.me_default_gateway,
            me_default_gateway_variable=self.me_default_gateway_variable,
            me_dynamic_ip_enabled=self.me_dynamic_ip_enabled,
            me_ipv4_address=self.me_ipv4_address,
            me_ipv4_address_variable=self.me_ipv4_address_variable,
            me_subnet_mask=self.me_subnet_mask,
            me_subnet_mask_variable=self.me_subnet_mask_variable,
            name=self.name,
            password=self.password,
            password_variable=self.password_variable,
            ssids=self.ssids,
            username=self.username,
            username_variable=self.username_variable,
            version=self.version)


def get_service_wireless_lan_feature(feature_profile_id: Optional[_builtins.str] = None,
                                     id: Optional[_builtins.str] = None,
                                     opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetServiceWirelessLanFeatureResult:
    """
    This data source can read the Service Wireless LAN Feature.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_sdwan as sdwan

    example = sdwan.get_service_wireless_lan_feature(id="f6b2c44c-693c-4763-b010-895aa3d236bd",
        feature_profile_id="f6dd22c8-0b4f-496c-9a0b-6813d1f8b8ac")
    ```


    :param _builtins.str feature_profile_id: Feature Profile ID
    :param _builtins.str id: The id of the Feature
    """
    __args__ = dict()
    __args__['featureProfileId'] = feature_profile_id
    __args__['id'] = id
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('sdwan:index/getServiceWirelessLanFeature:getServiceWirelessLanFeature', __args__, opts=opts, typ=GetServiceWirelessLanFeatureResult).value

    return AwaitableGetServiceWirelessLanFeatureResult(
        country=pulumi.get(__ret__, 'country'),
        country_variable=pulumi.get(__ret__, 'country_variable'),
        description=pulumi.get(__ret__, 'description'),
        enable24g=pulumi.get(__ret__, 'enable24g'),
        enable24g_variable=pulumi.get(__ret__, 'enable24g_variable'),
        enable5g=pulumi.get(__ret__, 'enable5g'),
        enable5g_variable=pulumi.get(__ret__, 'enable5g_variable'),
        feature_profile_id=pulumi.get(__ret__, 'feature_profile_id'),
        id=pulumi.get(__ret__, 'id'),
        me_default_gateway=pulumi.get(__ret__, 'me_default_gateway'),
        me_default_gateway_variable=pulumi.get(__ret__, 'me_default_gateway_variable'),
        me_dynamic_ip_enabled=pulumi.get(__ret__, 'me_dynamic_ip_enabled'),
        me_ipv4_address=pulumi.get(__ret__, 'me_ipv4_address'),
        me_ipv4_address_variable=pulumi.get(__ret__, 'me_ipv4_address_variable'),
        me_subnet_mask=pulumi.get(__ret__, 'me_subnet_mask'),
        me_subnet_mask_variable=pulumi.get(__ret__, 'me_subnet_mask_variable'),
        name=pulumi.get(__ret__, 'name'),
        password=pulumi.get(__ret__, 'password'),
        password_variable=pulumi.get(__ret__, 'password_variable'),
        ssids=pulumi.get(__ret__, 'ssids'),
        username=pulumi.get(__ret__, 'username'),
        username_variable=pulumi.get(__ret__, 'username_variable'),
        version=pulumi.get(__ret__, 'version'))
def get_service_wireless_lan_feature_output(feature_profile_id: Optional[pulumi.Input[_builtins.str]] = None,
                                            id: Optional[pulumi.Input[_builtins.str]] = None,
                                            opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetServiceWirelessLanFeatureResult]:
    """
    This data source can read the Service Wireless LAN Feature.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_sdwan as sdwan

    example = sdwan.get_service_wireless_lan_feature(id="f6b2c44c-693c-4763-b010-895aa3d236bd",
        feature_profile_id="f6dd22c8-0b4f-496c-9a0b-6813d1f8b8ac")
    ```


    :param _builtins.str feature_profile_id: Feature Profile ID
    :param _builtins.str id: The id of the Feature
    """
    __args__ = dict()
    __args__['featureProfileId'] = feature_profile_id
    __args__['id'] = id
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('sdwan:index/getServiceWirelessLanFeature:getServiceWirelessLanFeature', __args__, opts=opts, typ=GetServiceWirelessLanFeatureResult)
    return __ret__.apply(lambda __response__: GetServiceWirelessLanFeatureResult(
        country=pulumi.get(__response__, 'country'),
        country_variable=pulumi.get(__response__, 'country_variable'),
        description=pulumi.get(__response__, 'description'),
        enable24g=pulumi.get(__response__, 'enable24g'),
        enable24g_variable=pulumi.get(__response__, 'enable24g_variable'),
        enable5g=pulumi.get(__response__, 'enable5g'),
        enable5g_variable=pulumi.get(__response__, 'enable5g_variable'),
        feature_profile_id=pulumi.get(__response__, 'feature_profile_id'),
        id=pulumi.get(__response__, 'id'),
        me_default_gateway=pulumi.get(__response__, 'me_default_gateway'),
        me_default_gateway_variable=pulumi.get(__response__, 'me_default_gateway_variable'),
        me_dynamic_ip_enabled=pulumi.get(__response__, 'me_dynamic_ip_enabled'),
        me_ipv4_address=pulumi.get(__response__, 'me_ipv4_address'),
        me_ipv4_address_variable=pulumi.get(__response__, 'me_ipv4_address_variable'),
        me_subnet_mask=pulumi.get(__response__, 'me_subnet_mask'),
        me_subnet_mask_variable=pulumi.get(__response__, 'me_subnet_mask_variable'),
        name=pulumi.get(__response__, 'name'),
        password=pulumi.get(__response__, 'password'),
        password_variable=pulumi.get(__response__, 'password_variable'),
        ssids=pulumi.get(__response__, 'ssids'),
        username=pulumi.get(__response__, 'username'),
        username_variable=pulumi.get(__response__, 'username_variable'),
        version=pulumi.get(__response__, 'version')))
