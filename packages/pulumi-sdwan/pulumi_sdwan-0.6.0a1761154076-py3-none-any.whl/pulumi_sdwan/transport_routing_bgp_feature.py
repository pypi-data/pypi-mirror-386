# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities
from . import outputs
from ._inputs import *

__all__ = ['TransportRoutingBgpFeatureArgs', 'TransportRoutingBgpFeature']

@pulumi.input_type
class TransportRoutingBgpFeatureArgs:
    def __init__(__self__, *,
                 feature_profile_id: pulumi.Input[_builtins.str],
                 always_compare_med: Optional[pulumi.Input[_builtins.bool]] = None,
                 always_compare_med_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 as_number: Optional[pulumi.Input[_builtins.int]] = None,
                 as_number_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 compare_router_id: Optional[pulumi.Input[_builtins.bool]] = None,
                 compare_router_id_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 description: Optional[pulumi.Input[_builtins.str]] = None,
                 deterministic_med: Optional[pulumi.Input[_builtins.bool]] = None,
                 deterministic_med_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 external_routes_distance: Optional[pulumi.Input[_builtins.int]] = None,
                 external_routes_distance_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 hold_time: Optional[pulumi.Input[_builtins.int]] = None,
                 hold_time_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 internal_routes_distance: Optional[pulumi.Input[_builtins.int]] = None,
                 internal_routes_distance_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 ipv4_aggregate_addresses: Optional[pulumi.Input[Sequence[pulumi.Input['TransportRoutingBgpFeatureIpv4AggregateAddressArgs']]]] = None,
                 ipv4_eibgp_maximum_paths: Optional[pulumi.Input[_builtins.int]] = None,
                 ipv4_eibgp_maximum_paths_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 ipv4_neighbors: Optional[pulumi.Input[Sequence[pulumi.Input['TransportRoutingBgpFeatureIpv4NeighborArgs']]]] = None,
                 ipv4_networks: Optional[pulumi.Input[Sequence[pulumi.Input['TransportRoutingBgpFeatureIpv4NetworkArgs']]]] = None,
                 ipv4_originate: Optional[pulumi.Input[_builtins.bool]] = None,
                 ipv4_originate_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 ipv4_redistributes: Optional[pulumi.Input[Sequence[pulumi.Input['TransportRoutingBgpFeatureIpv4RedistributeArgs']]]] = None,
                 ipv4_table_map_filter: Optional[pulumi.Input[_builtins.bool]] = None,
                 ipv4_table_map_filter_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 ipv4_table_map_route_policy_id: Optional[pulumi.Input[_builtins.str]] = None,
                 ipv6_aggregate_addresses: Optional[pulumi.Input[Sequence[pulumi.Input['TransportRoutingBgpFeatureIpv6AggregateAddressArgs']]]] = None,
                 ipv6_eibgp_maximum_paths: Optional[pulumi.Input[_builtins.int]] = None,
                 ipv6_eibgp_maximum_paths_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 ipv6_neighbors: Optional[pulumi.Input[Sequence[pulumi.Input['TransportRoutingBgpFeatureIpv6NeighborArgs']]]] = None,
                 ipv6_networks: Optional[pulumi.Input[Sequence[pulumi.Input['TransportRoutingBgpFeatureIpv6NetworkArgs']]]] = None,
                 ipv6_originate: Optional[pulumi.Input[_builtins.bool]] = None,
                 ipv6_originate_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 ipv6_redistributes: Optional[pulumi.Input[Sequence[pulumi.Input['TransportRoutingBgpFeatureIpv6RedistributeArgs']]]] = None,
                 ipv6_table_map_filter: Optional[pulumi.Input[_builtins.bool]] = None,
                 ipv6_table_map_filter_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 ipv6_table_map_route_policy_id: Optional[pulumi.Input[_builtins.str]] = None,
                 keepalive_time: Optional[pulumi.Input[_builtins.int]] = None,
                 keepalive_time_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 local_routes_distance: Optional[pulumi.Input[_builtins.int]] = None,
                 local_routes_distance_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 missing_med_as_worst: Optional[pulumi.Input[_builtins.bool]] = None,
                 missing_med_as_worst_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 mpls_interfaces: Optional[pulumi.Input[Sequence[pulumi.Input['TransportRoutingBgpFeatureMplsInterfaceArgs']]]] = None,
                 multipath_relax: Optional[pulumi.Input[_builtins.bool]] = None,
                 multipath_relax_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 propagate_as_path: Optional[pulumi.Input[_builtins.bool]] = None,
                 propagate_as_path_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 propagate_community: Optional[pulumi.Input[_builtins.bool]] = None,
                 propagate_community_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 router_id: Optional[pulumi.Input[_builtins.str]] = None,
                 router_id_variable: Optional[pulumi.Input[_builtins.str]] = None):
        """
        The set of arguments for constructing a TransportRoutingBgpFeature resource.
        :param pulumi.Input[_builtins.str] feature_profile_id: Feature Profile ID
        :param pulumi.Input[_builtins.bool] always_compare_med: Compare MEDs from all ASs when selecting active BGP paths
                 - Default value: `false`
        :param pulumi.Input[_builtins.str] always_compare_med_variable: Variable name
        :param pulumi.Input[_builtins.int] as_number: Set autonomous system number <1..4294967295> or <XX.YY>
        :param pulumi.Input[_builtins.str] as_number_variable: Variable name
        :param pulumi.Input[_builtins.bool] compare_router_id: Compare router IDs when selecting active BGP paths
                 - Default value: `false`
        :param pulumi.Input[_builtins.str] compare_router_id_variable: Variable name
        :param pulumi.Input[_builtins.str] description: The description of the Feature
        :param pulumi.Input[_builtins.bool] deterministic_med: Compare MEDs from all routes from same AS when selecting active BGP paths
                 - Default value: `false`
        :param pulumi.Input[_builtins.str] deterministic_med_variable: Variable name
        :param pulumi.Input[_builtins.int] external_routes_distance: Set administrative distance for external BGP routes
                 - Range: `1`-`255`
                 - Default value: `20`
        :param pulumi.Input[_builtins.str] external_routes_distance_variable: Variable name
        :param pulumi.Input[_builtins.int] hold_time: Interval (seconds) not receiving a keepalive message declares a BGP peer down
                 - Range: `0`-`65535`
                 - Default value: `180`
        :param pulumi.Input[_builtins.str] hold_time_variable: Variable name
        :param pulumi.Input[_builtins.int] internal_routes_distance: Set administrative distance for internal BGP routes
                 - Range: `1`-`255`
                 - Default value: `200`
        :param pulumi.Input[_builtins.str] internal_routes_distance_variable: Variable name
        :param pulumi.Input[Sequence[pulumi.Input['TransportRoutingBgpFeatureIpv4AggregateAddressArgs']]] ipv4_aggregate_addresses: Aggregate prefixes in specific range
        :param pulumi.Input[_builtins.int] ipv4_eibgp_maximum_paths: Set maximum number of parallel IBGP paths for multipath load sharing
                 - Range: `1`-`32`
        :param pulumi.Input[_builtins.str] ipv4_eibgp_maximum_paths_variable: Variable name
        :param pulumi.Input[Sequence[pulumi.Input['TransportRoutingBgpFeatureIpv4NeighborArgs']]] ipv4_neighbors: Set BGP IPv4 neighbors
        :param pulumi.Input[Sequence[pulumi.Input['TransportRoutingBgpFeatureIpv4NetworkArgs']]] ipv4_networks: Configure the networks for BGP to advertise
        :param pulumi.Input[_builtins.bool] ipv4_originate: BGP Default Information Originate
                 - Default value: `false`
        :param pulumi.Input[_builtins.str] ipv4_originate_variable: Variable name
        :param pulumi.Input[Sequence[pulumi.Input['TransportRoutingBgpFeatureIpv4RedistributeArgs']]] ipv4_redistributes: Redistribute routes into BGP
        :param pulumi.Input[_builtins.bool] ipv4_table_map_filter: Table map filtered or not
                 - Default value: `false`
        :param pulumi.Input[_builtins.str] ipv4_table_map_filter_variable: Variable name
        :param pulumi.Input[Sequence[pulumi.Input['TransportRoutingBgpFeatureIpv6AggregateAddressArgs']]] ipv6_aggregate_addresses: IPv6 Aggregate prefixes in specific range
        :param pulumi.Input[_builtins.int] ipv6_eibgp_maximum_paths: Set maximum number of parallel IBGP paths for multipath load sharing
                 - Range: `1`-`32`
        :param pulumi.Input[_builtins.str] ipv6_eibgp_maximum_paths_variable: Variable name
        :param pulumi.Input[Sequence[pulumi.Input['TransportRoutingBgpFeatureIpv6NeighborArgs']]] ipv6_neighbors: Set BGP IPv6 neighbors
        :param pulumi.Input[Sequence[pulumi.Input['TransportRoutingBgpFeatureIpv6NetworkArgs']]] ipv6_networks: Configure the networks for BGP to advertise
        :param pulumi.Input[_builtins.bool] ipv6_originate: BGP Default Information Originate
                 - Default value: `false`
        :param pulumi.Input[_builtins.str] ipv6_originate_variable: Variable name
        :param pulumi.Input[Sequence[pulumi.Input['TransportRoutingBgpFeatureIpv6RedistributeArgs']]] ipv6_redistributes: Redistribute routes into BGP
        :param pulumi.Input[_builtins.bool] ipv6_table_map_filter: Table map filtered or not
                 - Default value: `false`
        :param pulumi.Input[_builtins.str] ipv6_table_map_filter_variable: Variable name
        :param pulumi.Input[_builtins.int] keepalive_time: Interval (seconds) of keepalive messages sent to its BGP peer
                 - Range: `0`-`65535`
                 - Default value: `60`
        :param pulumi.Input[_builtins.str] keepalive_time_variable: Variable name
        :param pulumi.Input[_builtins.int] local_routes_distance: Set administrative distance for local BGP routes
                 - Range: `1`-`255`
                 - Default value: `20`
        :param pulumi.Input[_builtins.str] local_routes_distance_variable: Variable name
        :param pulumi.Input[_builtins.bool] missing_med_as_worst: If path has no MED, consider it to be worst path when selecting active BGP paths
                 - Default value: `false`
        :param pulumi.Input[_builtins.str] missing_med_as_worst_variable: Variable name
        :param pulumi.Input[Sequence[pulumi.Input['TransportRoutingBgpFeatureMplsInterfaceArgs']]] mpls_interfaces: MPLS BGP Interface
        :param pulumi.Input[_builtins.bool] multipath_relax: Ignore AS for multipath selection
                 - Default value: `false`
        :param pulumi.Input[_builtins.str] multipath_relax_variable: Variable name
        :param pulumi.Input[_builtins.str] name: The name of the Feature
        :param pulumi.Input[_builtins.bool] propagate_as_path: Propagate AS Path
                 - Default value: `false`
        :param pulumi.Input[_builtins.str] propagate_as_path_variable: Variable name
        :param pulumi.Input[_builtins.bool] propagate_community: Propagate Community
                 - Default value: `false`
        :param pulumi.Input[_builtins.str] propagate_community_variable: Variable name
        :param pulumi.Input[_builtins.str] router_id: Configure BGP router identifier
        :param pulumi.Input[_builtins.str] router_id_variable: Variable name
        """
        pulumi.set(__self__, "feature_profile_id", feature_profile_id)
        if always_compare_med is not None:
            pulumi.set(__self__, "always_compare_med", always_compare_med)
        if always_compare_med_variable is not None:
            pulumi.set(__self__, "always_compare_med_variable", always_compare_med_variable)
        if as_number is not None:
            pulumi.set(__self__, "as_number", as_number)
        if as_number_variable is not None:
            pulumi.set(__self__, "as_number_variable", as_number_variable)
        if compare_router_id is not None:
            pulumi.set(__self__, "compare_router_id", compare_router_id)
        if compare_router_id_variable is not None:
            pulumi.set(__self__, "compare_router_id_variable", compare_router_id_variable)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if deterministic_med is not None:
            pulumi.set(__self__, "deterministic_med", deterministic_med)
        if deterministic_med_variable is not None:
            pulumi.set(__self__, "deterministic_med_variable", deterministic_med_variable)
        if external_routes_distance is not None:
            pulumi.set(__self__, "external_routes_distance", external_routes_distance)
        if external_routes_distance_variable is not None:
            pulumi.set(__self__, "external_routes_distance_variable", external_routes_distance_variable)
        if hold_time is not None:
            pulumi.set(__self__, "hold_time", hold_time)
        if hold_time_variable is not None:
            pulumi.set(__self__, "hold_time_variable", hold_time_variable)
        if internal_routes_distance is not None:
            pulumi.set(__self__, "internal_routes_distance", internal_routes_distance)
        if internal_routes_distance_variable is not None:
            pulumi.set(__self__, "internal_routes_distance_variable", internal_routes_distance_variable)
        if ipv4_aggregate_addresses is not None:
            pulumi.set(__self__, "ipv4_aggregate_addresses", ipv4_aggregate_addresses)
        if ipv4_eibgp_maximum_paths is not None:
            pulumi.set(__self__, "ipv4_eibgp_maximum_paths", ipv4_eibgp_maximum_paths)
        if ipv4_eibgp_maximum_paths_variable is not None:
            pulumi.set(__self__, "ipv4_eibgp_maximum_paths_variable", ipv4_eibgp_maximum_paths_variable)
        if ipv4_neighbors is not None:
            pulumi.set(__self__, "ipv4_neighbors", ipv4_neighbors)
        if ipv4_networks is not None:
            pulumi.set(__self__, "ipv4_networks", ipv4_networks)
        if ipv4_originate is not None:
            pulumi.set(__self__, "ipv4_originate", ipv4_originate)
        if ipv4_originate_variable is not None:
            pulumi.set(__self__, "ipv4_originate_variable", ipv4_originate_variable)
        if ipv4_redistributes is not None:
            pulumi.set(__self__, "ipv4_redistributes", ipv4_redistributes)
        if ipv4_table_map_filter is not None:
            pulumi.set(__self__, "ipv4_table_map_filter", ipv4_table_map_filter)
        if ipv4_table_map_filter_variable is not None:
            pulumi.set(__self__, "ipv4_table_map_filter_variable", ipv4_table_map_filter_variable)
        if ipv4_table_map_route_policy_id is not None:
            pulumi.set(__self__, "ipv4_table_map_route_policy_id", ipv4_table_map_route_policy_id)
        if ipv6_aggregate_addresses is not None:
            pulumi.set(__self__, "ipv6_aggregate_addresses", ipv6_aggregate_addresses)
        if ipv6_eibgp_maximum_paths is not None:
            pulumi.set(__self__, "ipv6_eibgp_maximum_paths", ipv6_eibgp_maximum_paths)
        if ipv6_eibgp_maximum_paths_variable is not None:
            pulumi.set(__self__, "ipv6_eibgp_maximum_paths_variable", ipv6_eibgp_maximum_paths_variable)
        if ipv6_neighbors is not None:
            pulumi.set(__self__, "ipv6_neighbors", ipv6_neighbors)
        if ipv6_networks is not None:
            pulumi.set(__self__, "ipv6_networks", ipv6_networks)
        if ipv6_originate is not None:
            pulumi.set(__self__, "ipv6_originate", ipv6_originate)
        if ipv6_originate_variable is not None:
            pulumi.set(__self__, "ipv6_originate_variable", ipv6_originate_variable)
        if ipv6_redistributes is not None:
            pulumi.set(__self__, "ipv6_redistributes", ipv6_redistributes)
        if ipv6_table_map_filter is not None:
            pulumi.set(__self__, "ipv6_table_map_filter", ipv6_table_map_filter)
        if ipv6_table_map_filter_variable is not None:
            pulumi.set(__self__, "ipv6_table_map_filter_variable", ipv6_table_map_filter_variable)
        if ipv6_table_map_route_policy_id is not None:
            pulumi.set(__self__, "ipv6_table_map_route_policy_id", ipv6_table_map_route_policy_id)
        if keepalive_time is not None:
            pulumi.set(__self__, "keepalive_time", keepalive_time)
        if keepalive_time_variable is not None:
            pulumi.set(__self__, "keepalive_time_variable", keepalive_time_variable)
        if local_routes_distance is not None:
            pulumi.set(__self__, "local_routes_distance", local_routes_distance)
        if local_routes_distance_variable is not None:
            pulumi.set(__self__, "local_routes_distance_variable", local_routes_distance_variable)
        if missing_med_as_worst is not None:
            pulumi.set(__self__, "missing_med_as_worst", missing_med_as_worst)
        if missing_med_as_worst_variable is not None:
            pulumi.set(__self__, "missing_med_as_worst_variable", missing_med_as_worst_variable)
        if mpls_interfaces is not None:
            pulumi.set(__self__, "mpls_interfaces", mpls_interfaces)
        if multipath_relax is not None:
            pulumi.set(__self__, "multipath_relax", multipath_relax)
        if multipath_relax_variable is not None:
            pulumi.set(__self__, "multipath_relax_variable", multipath_relax_variable)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if propagate_as_path is not None:
            pulumi.set(__self__, "propagate_as_path", propagate_as_path)
        if propagate_as_path_variable is not None:
            pulumi.set(__self__, "propagate_as_path_variable", propagate_as_path_variable)
        if propagate_community is not None:
            pulumi.set(__self__, "propagate_community", propagate_community)
        if propagate_community_variable is not None:
            pulumi.set(__self__, "propagate_community_variable", propagate_community_variable)
        if router_id is not None:
            pulumi.set(__self__, "router_id", router_id)
        if router_id_variable is not None:
            pulumi.set(__self__, "router_id_variable", router_id_variable)

    @_builtins.property
    @pulumi.getter(name="featureProfileId")
    def feature_profile_id(self) -> pulumi.Input[_builtins.str]:
        """
        Feature Profile ID
        """
        return pulumi.get(self, "feature_profile_id")

    @feature_profile_id.setter
    def feature_profile_id(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "feature_profile_id", value)

    @_builtins.property
    @pulumi.getter(name="alwaysCompareMed")
    def always_compare_med(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Compare MEDs from all ASs when selecting active BGP paths
          - Default value: `false`
        """
        return pulumi.get(self, "always_compare_med")

    @always_compare_med.setter
    def always_compare_med(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "always_compare_med", value)

    @_builtins.property
    @pulumi.getter(name="alwaysCompareMedVariable")
    def always_compare_med_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "always_compare_med_variable")

    @always_compare_med_variable.setter
    def always_compare_med_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "always_compare_med_variable", value)

    @_builtins.property
    @pulumi.getter(name="asNumber")
    def as_number(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        Set autonomous system number <1..4294967295> or <XX.YY>
        """
        return pulumi.get(self, "as_number")

    @as_number.setter
    def as_number(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "as_number", value)

    @_builtins.property
    @pulumi.getter(name="asNumberVariable")
    def as_number_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "as_number_variable")

    @as_number_variable.setter
    def as_number_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "as_number_variable", value)

    @_builtins.property
    @pulumi.getter(name="compareRouterId")
    def compare_router_id(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Compare router IDs when selecting active BGP paths
          - Default value: `false`
        """
        return pulumi.get(self, "compare_router_id")

    @compare_router_id.setter
    def compare_router_id(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "compare_router_id", value)

    @_builtins.property
    @pulumi.getter(name="compareRouterIdVariable")
    def compare_router_id_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "compare_router_id_variable")

    @compare_router_id_variable.setter
    def compare_router_id_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "compare_router_id_variable", value)

    @_builtins.property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The description of the Feature
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "description", value)

    @_builtins.property
    @pulumi.getter(name="deterministicMed")
    def deterministic_med(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Compare MEDs from all routes from same AS when selecting active BGP paths
          - Default value: `false`
        """
        return pulumi.get(self, "deterministic_med")

    @deterministic_med.setter
    def deterministic_med(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "deterministic_med", value)

    @_builtins.property
    @pulumi.getter(name="deterministicMedVariable")
    def deterministic_med_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "deterministic_med_variable")

    @deterministic_med_variable.setter
    def deterministic_med_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "deterministic_med_variable", value)

    @_builtins.property
    @pulumi.getter(name="externalRoutesDistance")
    def external_routes_distance(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        Set administrative distance for external BGP routes
          - Range: `1`-`255`
          - Default value: `20`
        """
        return pulumi.get(self, "external_routes_distance")

    @external_routes_distance.setter
    def external_routes_distance(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "external_routes_distance", value)

    @_builtins.property
    @pulumi.getter(name="externalRoutesDistanceVariable")
    def external_routes_distance_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "external_routes_distance_variable")

    @external_routes_distance_variable.setter
    def external_routes_distance_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "external_routes_distance_variable", value)

    @_builtins.property
    @pulumi.getter(name="holdTime")
    def hold_time(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        Interval (seconds) not receiving a keepalive message declares a BGP peer down
          - Range: `0`-`65535`
          - Default value: `180`
        """
        return pulumi.get(self, "hold_time")

    @hold_time.setter
    def hold_time(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "hold_time", value)

    @_builtins.property
    @pulumi.getter(name="holdTimeVariable")
    def hold_time_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "hold_time_variable")

    @hold_time_variable.setter
    def hold_time_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "hold_time_variable", value)

    @_builtins.property
    @pulumi.getter(name="internalRoutesDistance")
    def internal_routes_distance(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        Set administrative distance for internal BGP routes
          - Range: `1`-`255`
          - Default value: `200`
        """
        return pulumi.get(self, "internal_routes_distance")

    @internal_routes_distance.setter
    def internal_routes_distance(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "internal_routes_distance", value)

    @_builtins.property
    @pulumi.getter(name="internalRoutesDistanceVariable")
    def internal_routes_distance_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "internal_routes_distance_variable")

    @internal_routes_distance_variable.setter
    def internal_routes_distance_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "internal_routes_distance_variable", value)

    @_builtins.property
    @pulumi.getter(name="ipv4AggregateAddresses")
    def ipv4_aggregate_addresses(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['TransportRoutingBgpFeatureIpv4AggregateAddressArgs']]]]:
        """
        Aggregate prefixes in specific range
        """
        return pulumi.get(self, "ipv4_aggregate_addresses")

    @ipv4_aggregate_addresses.setter
    def ipv4_aggregate_addresses(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['TransportRoutingBgpFeatureIpv4AggregateAddressArgs']]]]):
        pulumi.set(self, "ipv4_aggregate_addresses", value)

    @_builtins.property
    @pulumi.getter(name="ipv4EibgpMaximumPaths")
    def ipv4_eibgp_maximum_paths(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        Set maximum number of parallel IBGP paths for multipath load sharing
          - Range: `1`-`32`
        """
        return pulumi.get(self, "ipv4_eibgp_maximum_paths")

    @ipv4_eibgp_maximum_paths.setter
    def ipv4_eibgp_maximum_paths(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "ipv4_eibgp_maximum_paths", value)

    @_builtins.property
    @pulumi.getter(name="ipv4EibgpMaximumPathsVariable")
    def ipv4_eibgp_maximum_paths_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "ipv4_eibgp_maximum_paths_variable")

    @ipv4_eibgp_maximum_paths_variable.setter
    def ipv4_eibgp_maximum_paths_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "ipv4_eibgp_maximum_paths_variable", value)

    @_builtins.property
    @pulumi.getter(name="ipv4Neighbors")
    def ipv4_neighbors(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['TransportRoutingBgpFeatureIpv4NeighborArgs']]]]:
        """
        Set BGP IPv4 neighbors
        """
        return pulumi.get(self, "ipv4_neighbors")

    @ipv4_neighbors.setter
    def ipv4_neighbors(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['TransportRoutingBgpFeatureIpv4NeighborArgs']]]]):
        pulumi.set(self, "ipv4_neighbors", value)

    @_builtins.property
    @pulumi.getter(name="ipv4Networks")
    def ipv4_networks(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['TransportRoutingBgpFeatureIpv4NetworkArgs']]]]:
        """
        Configure the networks for BGP to advertise
        """
        return pulumi.get(self, "ipv4_networks")

    @ipv4_networks.setter
    def ipv4_networks(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['TransportRoutingBgpFeatureIpv4NetworkArgs']]]]):
        pulumi.set(self, "ipv4_networks", value)

    @_builtins.property
    @pulumi.getter(name="ipv4Originate")
    def ipv4_originate(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        BGP Default Information Originate
          - Default value: `false`
        """
        return pulumi.get(self, "ipv4_originate")

    @ipv4_originate.setter
    def ipv4_originate(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "ipv4_originate", value)

    @_builtins.property
    @pulumi.getter(name="ipv4OriginateVariable")
    def ipv4_originate_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "ipv4_originate_variable")

    @ipv4_originate_variable.setter
    def ipv4_originate_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "ipv4_originate_variable", value)

    @_builtins.property
    @pulumi.getter(name="ipv4Redistributes")
    def ipv4_redistributes(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['TransportRoutingBgpFeatureIpv4RedistributeArgs']]]]:
        """
        Redistribute routes into BGP
        """
        return pulumi.get(self, "ipv4_redistributes")

    @ipv4_redistributes.setter
    def ipv4_redistributes(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['TransportRoutingBgpFeatureIpv4RedistributeArgs']]]]):
        pulumi.set(self, "ipv4_redistributes", value)

    @_builtins.property
    @pulumi.getter(name="ipv4TableMapFilter")
    def ipv4_table_map_filter(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Table map filtered or not
          - Default value: `false`
        """
        return pulumi.get(self, "ipv4_table_map_filter")

    @ipv4_table_map_filter.setter
    def ipv4_table_map_filter(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "ipv4_table_map_filter", value)

    @_builtins.property
    @pulumi.getter(name="ipv4TableMapFilterVariable")
    def ipv4_table_map_filter_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "ipv4_table_map_filter_variable")

    @ipv4_table_map_filter_variable.setter
    def ipv4_table_map_filter_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "ipv4_table_map_filter_variable", value)

    @_builtins.property
    @pulumi.getter(name="ipv4TableMapRoutePolicyId")
    def ipv4_table_map_route_policy_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "ipv4_table_map_route_policy_id")

    @ipv4_table_map_route_policy_id.setter
    def ipv4_table_map_route_policy_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "ipv4_table_map_route_policy_id", value)

    @_builtins.property
    @pulumi.getter(name="ipv6AggregateAddresses")
    def ipv6_aggregate_addresses(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['TransportRoutingBgpFeatureIpv6AggregateAddressArgs']]]]:
        """
        IPv6 Aggregate prefixes in specific range
        """
        return pulumi.get(self, "ipv6_aggregate_addresses")

    @ipv6_aggregate_addresses.setter
    def ipv6_aggregate_addresses(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['TransportRoutingBgpFeatureIpv6AggregateAddressArgs']]]]):
        pulumi.set(self, "ipv6_aggregate_addresses", value)

    @_builtins.property
    @pulumi.getter(name="ipv6EibgpMaximumPaths")
    def ipv6_eibgp_maximum_paths(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        Set maximum number of parallel IBGP paths for multipath load sharing
          - Range: `1`-`32`
        """
        return pulumi.get(self, "ipv6_eibgp_maximum_paths")

    @ipv6_eibgp_maximum_paths.setter
    def ipv6_eibgp_maximum_paths(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "ipv6_eibgp_maximum_paths", value)

    @_builtins.property
    @pulumi.getter(name="ipv6EibgpMaximumPathsVariable")
    def ipv6_eibgp_maximum_paths_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "ipv6_eibgp_maximum_paths_variable")

    @ipv6_eibgp_maximum_paths_variable.setter
    def ipv6_eibgp_maximum_paths_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "ipv6_eibgp_maximum_paths_variable", value)

    @_builtins.property
    @pulumi.getter(name="ipv6Neighbors")
    def ipv6_neighbors(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['TransportRoutingBgpFeatureIpv6NeighborArgs']]]]:
        """
        Set BGP IPv6 neighbors
        """
        return pulumi.get(self, "ipv6_neighbors")

    @ipv6_neighbors.setter
    def ipv6_neighbors(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['TransportRoutingBgpFeatureIpv6NeighborArgs']]]]):
        pulumi.set(self, "ipv6_neighbors", value)

    @_builtins.property
    @pulumi.getter(name="ipv6Networks")
    def ipv6_networks(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['TransportRoutingBgpFeatureIpv6NetworkArgs']]]]:
        """
        Configure the networks for BGP to advertise
        """
        return pulumi.get(self, "ipv6_networks")

    @ipv6_networks.setter
    def ipv6_networks(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['TransportRoutingBgpFeatureIpv6NetworkArgs']]]]):
        pulumi.set(self, "ipv6_networks", value)

    @_builtins.property
    @pulumi.getter(name="ipv6Originate")
    def ipv6_originate(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        BGP Default Information Originate
          - Default value: `false`
        """
        return pulumi.get(self, "ipv6_originate")

    @ipv6_originate.setter
    def ipv6_originate(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "ipv6_originate", value)

    @_builtins.property
    @pulumi.getter(name="ipv6OriginateVariable")
    def ipv6_originate_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "ipv6_originate_variable")

    @ipv6_originate_variable.setter
    def ipv6_originate_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "ipv6_originate_variable", value)

    @_builtins.property
    @pulumi.getter(name="ipv6Redistributes")
    def ipv6_redistributes(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['TransportRoutingBgpFeatureIpv6RedistributeArgs']]]]:
        """
        Redistribute routes into BGP
        """
        return pulumi.get(self, "ipv6_redistributes")

    @ipv6_redistributes.setter
    def ipv6_redistributes(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['TransportRoutingBgpFeatureIpv6RedistributeArgs']]]]):
        pulumi.set(self, "ipv6_redistributes", value)

    @_builtins.property
    @pulumi.getter(name="ipv6TableMapFilter")
    def ipv6_table_map_filter(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Table map filtered or not
          - Default value: `false`
        """
        return pulumi.get(self, "ipv6_table_map_filter")

    @ipv6_table_map_filter.setter
    def ipv6_table_map_filter(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "ipv6_table_map_filter", value)

    @_builtins.property
    @pulumi.getter(name="ipv6TableMapFilterVariable")
    def ipv6_table_map_filter_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "ipv6_table_map_filter_variable")

    @ipv6_table_map_filter_variable.setter
    def ipv6_table_map_filter_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "ipv6_table_map_filter_variable", value)

    @_builtins.property
    @pulumi.getter(name="ipv6TableMapRoutePolicyId")
    def ipv6_table_map_route_policy_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "ipv6_table_map_route_policy_id")

    @ipv6_table_map_route_policy_id.setter
    def ipv6_table_map_route_policy_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "ipv6_table_map_route_policy_id", value)

    @_builtins.property
    @pulumi.getter(name="keepaliveTime")
    def keepalive_time(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        Interval (seconds) of keepalive messages sent to its BGP peer
          - Range: `0`-`65535`
          - Default value: `60`
        """
        return pulumi.get(self, "keepalive_time")

    @keepalive_time.setter
    def keepalive_time(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "keepalive_time", value)

    @_builtins.property
    @pulumi.getter(name="keepaliveTimeVariable")
    def keepalive_time_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "keepalive_time_variable")

    @keepalive_time_variable.setter
    def keepalive_time_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "keepalive_time_variable", value)

    @_builtins.property
    @pulumi.getter(name="localRoutesDistance")
    def local_routes_distance(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        Set administrative distance for local BGP routes
          - Range: `1`-`255`
          - Default value: `20`
        """
        return pulumi.get(self, "local_routes_distance")

    @local_routes_distance.setter
    def local_routes_distance(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "local_routes_distance", value)

    @_builtins.property
    @pulumi.getter(name="localRoutesDistanceVariable")
    def local_routes_distance_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "local_routes_distance_variable")

    @local_routes_distance_variable.setter
    def local_routes_distance_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "local_routes_distance_variable", value)

    @_builtins.property
    @pulumi.getter(name="missingMedAsWorst")
    def missing_med_as_worst(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        If path has no MED, consider it to be worst path when selecting active BGP paths
          - Default value: `false`
        """
        return pulumi.get(self, "missing_med_as_worst")

    @missing_med_as_worst.setter
    def missing_med_as_worst(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "missing_med_as_worst", value)

    @_builtins.property
    @pulumi.getter(name="missingMedAsWorstVariable")
    def missing_med_as_worst_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "missing_med_as_worst_variable")

    @missing_med_as_worst_variable.setter
    def missing_med_as_worst_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "missing_med_as_worst_variable", value)

    @_builtins.property
    @pulumi.getter(name="mplsInterfaces")
    def mpls_interfaces(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['TransportRoutingBgpFeatureMplsInterfaceArgs']]]]:
        """
        MPLS BGP Interface
        """
        return pulumi.get(self, "mpls_interfaces")

    @mpls_interfaces.setter
    def mpls_interfaces(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['TransportRoutingBgpFeatureMplsInterfaceArgs']]]]):
        pulumi.set(self, "mpls_interfaces", value)

    @_builtins.property
    @pulumi.getter(name="multipathRelax")
    def multipath_relax(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Ignore AS for multipath selection
          - Default value: `false`
        """
        return pulumi.get(self, "multipath_relax")

    @multipath_relax.setter
    def multipath_relax(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "multipath_relax", value)

    @_builtins.property
    @pulumi.getter(name="multipathRelaxVariable")
    def multipath_relax_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "multipath_relax_variable")

    @multipath_relax_variable.setter
    def multipath_relax_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "multipath_relax_variable", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The name of the Feature
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "name", value)

    @_builtins.property
    @pulumi.getter(name="propagateAsPath")
    def propagate_as_path(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Propagate AS Path
          - Default value: `false`
        """
        return pulumi.get(self, "propagate_as_path")

    @propagate_as_path.setter
    def propagate_as_path(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "propagate_as_path", value)

    @_builtins.property
    @pulumi.getter(name="propagateAsPathVariable")
    def propagate_as_path_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "propagate_as_path_variable")

    @propagate_as_path_variable.setter
    def propagate_as_path_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "propagate_as_path_variable", value)

    @_builtins.property
    @pulumi.getter(name="propagateCommunity")
    def propagate_community(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Propagate Community
          - Default value: `false`
        """
        return pulumi.get(self, "propagate_community")

    @propagate_community.setter
    def propagate_community(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "propagate_community", value)

    @_builtins.property
    @pulumi.getter(name="propagateCommunityVariable")
    def propagate_community_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "propagate_community_variable")

    @propagate_community_variable.setter
    def propagate_community_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "propagate_community_variable", value)

    @_builtins.property
    @pulumi.getter(name="routerId")
    def router_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Configure BGP router identifier
        """
        return pulumi.get(self, "router_id")

    @router_id.setter
    def router_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "router_id", value)

    @_builtins.property
    @pulumi.getter(name="routerIdVariable")
    def router_id_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "router_id_variable")

    @router_id_variable.setter
    def router_id_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "router_id_variable", value)


@pulumi.input_type
class _TransportRoutingBgpFeatureState:
    def __init__(__self__, *,
                 always_compare_med: Optional[pulumi.Input[_builtins.bool]] = None,
                 always_compare_med_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 as_number: Optional[pulumi.Input[_builtins.int]] = None,
                 as_number_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 compare_router_id: Optional[pulumi.Input[_builtins.bool]] = None,
                 compare_router_id_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 description: Optional[pulumi.Input[_builtins.str]] = None,
                 deterministic_med: Optional[pulumi.Input[_builtins.bool]] = None,
                 deterministic_med_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 external_routes_distance: Optional[pulumi.Input[_builtins.int]] = None,
                 external_routes_distance_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 feature_profile_id: Optional[pulumi.Input[_builtins.str]] = None,
                 hold_time: Optional[pulumi.Input[_builtins.int]] = None,
                 hold_time_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 internal_routes_distance: Optional[pulumi.Input[_builtins.int]] = None,
                 internal_routes_distance_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 ipv4_aggregate_addresses: Optional[pulumi.Input[Sequence[pulumi.Input['TransportRoutingBgpFeatureIpv4AggregateAddressArgs']]]] = None,
                 ipv4_eibgp_maximum_paths: Optional[pulumi.Input[_builtins.int]] = None,
                 ipv4_eibgp_maximum_paths_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 ipv4_neighbors: Optional[pulumi.Input[Sequence[pulumi.Input['TransportRoutingBgpFeatureIpv4NeighborArgs']]]] = None,
                 ipv4_networks: Optional[pulumi.Input[Sequence[pulumi.Input['TransportRoutingBgpFeatureIpv4NetworkArgs']]]] = None,
                 ipv4_originate: Optional[pulumi.Input[_builtins.bool]] = None,
                 ipv4_originate_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 ipv4_redistributes: Optional[pulumi.Input[Sequence[pulumi.Input['TransportRoutingBgpFeatureIpv4RedistributeArgs']]]] = None,
                 ipv4_table_map_filter: Optional[pulumi.Input[_builtins.bool]] = None,
                 ipv4_table_map_filter_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 ipv4_table_map_route_policy_id: Optional[pulumi.Input[_builtins.str]] = None,
                 ipv6_aggregate_addresses: Optional[pulumi.Input[Sequence[pulumi.Input['TransportRoutingBgpFeatureIpv6AggregateAddressArgs']]]] = None,
                 ipv6_eibgp_maximum_paths: Optional[pulumi.Input[_builtins.int]] = None,
                 ipv6_eibgp_maximum_paths_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 ipv6_neighbors: Optional[pulumi.Input[Sequence[pulumi.Input['TransportRoutingBgpFeatureIpv6NeighborArgs']]]] = None,
                 ipv6_networks: Optional[pulumi.Input[Sequence[pulumi.Input['TransportRoutingBgpFeatureIpv6NetworkArgs']]]] = None,
                 ipv6_originate: Optional[pulumi.Input[_builtins.bool]] = None,
                 ipv6_originate_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 ipv6_redistributes: Optional[pulumi.Input[Sequence[pulumi.Input['TransportRoutingBgpFeatureIpv6RedistributeArgs']]]] = None,
                 ipv6_table_map_filter: Optional[pulumi.Input[_builtins.bool]] = None,
                 ipv6_table_map_filter_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 ipv6_table_map_route_policy_id: Optional[pulumi.Input[_builtins.str]] = None,
                 keepalive_time: Optional[pulumi.Input[_builtins.int]] = None,
                 keepalive_time_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 local_routes_distance: Optional[pulumi.Input[_builtins.int]] = None,
                 local_routes_distance_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 missing_med_as_worst: Optional[pulumi.Input[_builtins.bool]] = None,
                 missing_med_as_worst_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 mpls_interfaces: Optional[pulumi.Input[Sequence[pulumi.Input['TransportRoutingBgpFeatureMplsInterfaceArgs']]]] = None,
                 multipath_relax: Optional[pulumi.Input[_builtins.bool]] = None,
                 multipath_relax_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 propagate_as_path: Optional[pulumi.Input[_builtins.bool]] = None,
                 propagate_as_path_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 propagate_community: Optional[pulumi.Input[_builtins.bool]] = None,
                 propagate_community_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 router_id: Optional[pulumi.Input[_builtins.str]] = None,
                 router_id_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 version: Optional[pulumi.Input[_builtins.int]] = None):
        """
        Input properties used for looking up and filtering TransportRoutingBgpFeature resources.
        :param pulumi.Input[_builtins.bool] always_compare_med: Compare MEDs from all ASs when selecting active BGP paths
                 - Default value: `false`
        :param pulumi.Input[_builtins.str] always_compare_med_variable: Variable name
        :param pulumi.Input[_builtins.int] as_number: Set autonomous system number <1..4294967295> or <XX.YY>
        :param pulumi.Input[_builtins.str] as_number_variable: Variable name
        :param pulumi.Input[_builtins.bool] compare_router_id: Compare router IDs when selecting active BGP paths
                 - Default value: `false`
        :param pulumi.Input[_builtins.str] compare_router_id_variable: Variable name
        :param pulumi.Input[_builtins.str] description: The description of the Feature
        :param pulumi.Input[_builtins.bool] deterministic_med: Compare MEDs from all routes from same AS when selecting active BGP paths
                 - Default value: `false`
        :param pulumi.Input[_builtins.str] deterministic_med_variable: Variable name
        :param pulumi.Input[_builtins.int] external_routes_distance: Set administrative distance for external BGP routes
                 - Range: `1`-`255`
                 - Default value: `20`
        :param pulumi.Input[_builtins.str] external_routes_distance_variable: Variable name
        :param pulumi.Input[_builtins.str] feature_profile_id: Feature Profile ID
        :param pulumi.Input[_builtins.int] hold_time: Interval (seconds) not receiving a keepalive message declares a BGP peer down
                 - Range: `0`-`65535`
                 - Default value: `180`
        :param pulumi.Input[_builtins.str] hold_time_variable: Variable name
        :param pulumi.Input[_builtins.int] internal_routes_distance: Set administrative distance for internal BGP routes
                 - Range: `1`-`255`
                 - Default value: `200`
        :param pulumi.Input[_builtins.str] internal_routes_distance_variable: Variable name
        :param pulumi.Input[Sequence[pulumi.Input['TransportRoutingBgpFeatureIpv4AggregateAddressArgs']]] ipv4_aggregate_addresses: Aggregate prefixes in specific range
        :param pulumi.Input[_builtins.int] ipv4_eibgp_maximum_paths: Set maximum number of parallel IBGP paths for multipath load sharing
                 - Range: `1`-`32`
        :param pulumi.Input[_builtins.str] ipv4_eibgp_maximum_paths_variable: Variable name
        :param pulumi.Input[Sequence[pulumi.Input['TransportRoutingBgpFeatureIpv4NeighborArgs']]] ipv4_neighbors: Set BGP IPv4 neighbors
        :param pulumi.Input[Sequence[pulumi.Input['TransportRoutingBgpFeatureIpv4NetworkArgs']]] ipv4_networks: Configure the networks for BGP to advertise
        :param pulumi.Input[_builtins.bool] ipv4_originate: BGP Default Information Originate
                 - Default value: `false`
        :param pulumi.Input[_builtins.str] ipv4_originate_variable: Variable name
        :param pulumi.Input[Sequence[pulumi.Input['TransportRoutingBgpFeatureIpv4RedistributeArgs']]] ipv4_redistributes: Redistribute routes into BGP
        :param pulumi.Input[_builtins.bool] ipv4_table_map_filter: Table map filtered or not
                 - Default value: `false`
        :param pulumi.Input[_builtins.str] ipv4_table_map_filter_variable: Variable name
        :param pulumi.Input[Sequence[pulumi.Input['TransportRoutingBgpFeatureIpv6AggregateAddressArgs']]] ipv6_aggregate_addresses: IPv6 Aggregate prefixes in specific range
        :param pulumi.Input[_builtins.int] ipv6_eibgp_maximum_paths: Set maximum number of parallel IBGP paths for multipath load sharing
                 - Range: `1`-`32`
        :param pulumi.Input[_builtins.str] ipv6_eibgp_maximum_paths_variable: Variable name
        :param pulumi.Input[Sequence[pulumi.Input['TransportRoutingBgpFeatureIpv6NeighborArgs']]] ipv6_neighbors: Set BGP IPv6 neighbors
        :param pulumi.Input[Sequence[pulumi.Input['TransportRoutingBgpFeatureIpv6NetworkArgs']]] ipv6_networks: Configure the networks for BGP to advertise
        :param pulumi.Input[_builtins.bool] ipv6_originate: BGP Default Information Originate
                 - Default value: `false`
        :param pulumi.Input[_builtins.str] ipv6_originate_variable: Variable name
        :param pulumi.Input[Sequence[pulumi.Input['TransportRoutingBgpFeatureIpv6RedistributeArgs']]] ipv6_redistributes: Redistribute routes into BGP
        :param pulumi.Input[_builtins.bool] ipv6_table_map_filter: Table map filtered or not
                 - Default value: `false`
        :param pulumi.Input[_builtins.str] ipv6_table_map_filter_variable: Variable name
        :param pulumi.Input[_builtins.int] keepalive_time: Interval (seconds) of keepalive messages sent to its BGP peer
                 - Range: `0`-`65535`
                 - Default value: `60`
        :param pulumi.Input[_builtins.str] keepalive_time_variable: Variable name
        :param pulumi.Input[_builtins.int] local_routes_distance: Set administrative distance for local BGP routes
                 - Range: `1`-`255`
                 - Default value: `20`
        :param pulumi.Input[_builtins.str] local_routes_distance_variable: Variable name
        :param pulumi.Input[_builtins.bool] missing_med_as_worst: If path has no MED, consider it to be worst path when selecting active BGP paths
                 - Default value: `false`
        :param pulumi.Input[_builtins.str] missing_med_as_worst_variable: Variable name
        :param pulumi.Input[Sequence[pulumi.Input['TransportRoutingBgpFeatureMplsInterfaceArgs']]] mpls_interfaces: MPLS BGP Interface
        :param pulumi.Input[_builtins.bool] multipath_relax: Ignore AS for multipath selection
                 - Default value: `false`
        :param pulumi.Input[_builtins.str] multipath_relax_variable: Variable name
        :param pulumi.Input[_builtins.str] name: The name of the Feature
        :param pulumi.Input[_builtins.bool] propagate_as_path: Propagate AS Path
                 - Default value: `false`
        :param pulumi.Input[_builtins.str] propagate_as_path_variable: Variable name
        :param pulumi.Input[_builtins.bool] propagate_community: Propagate Community
                 - Default value: `false`
        :param pulumi.Input[_builtins.str] propagate_community_variable: Variable name
        :param pulumi.Input[_builtins.str] router_id: Configure BGP router identifier
        :param pulumi.Input[_builtins.str] router_id_variable: Variable name
        :param pulumi.Input[_builtins.int] version: The version of the Feature
        """
        if always_compare_med is not None:
            pulumi.set(__self__, "always_compare_med", always_compare_med)
        if always_compare_med_variable is not None:
            pulumi.set(__self__, "always_compare_med_variable", always_compare_med_variable)
        if as_number is not None:
            pulumi.set(__self__, "as_number", as_number)
        if as_number_variable is not None:
            pulumi.set(__self__, "as_number_variable", as_number_variable)
        if compare_router_id is not None:
            pulumi.set(__self__, "compare_router_id", compare_router_id)
        if compare_router_id_variable is not None:
            pulumi.set(__self__, "compare_router_id_variable", compare_router_id_variable)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if deterministic_med is not None:
            pulumi.set(__self__, "deterministic_med", deterministic_med)
        if deterministic_med_variable is not None:
            pulumi.set(__self__, "deterministic_med_variable", deterministic_med_variable)
        if external_routes_distance is not None:
            pulumi.set(__self__, "external_routes_distance", external_routes_distance)
        if external_routes_distance_variable is not None:
            pulumi.set(__self__, "external_routes_distance_variable", external_routes_distance_variable)
        if feature_profile_id is not None:
            pulumi.set(__self__, "feature_profile_id", feature_profile_id)
        if hold_time is not None:
            pulumi.set(__self__, "hold_time", hold_time)
        if hold_time_variable is not None:
            pulumi.set(__self__, "hold_time_variable", hold_time_variable)
        if internal_routes_distance is not None:
            pulumi.set(__self__, "internal_routes_distance", internal_routes_distance)
        if internal_routes_distance_variable is not None:
            pulumi.set(__self__, "internal_routes_distance_variable", internal_routes_distance_variable)
        if ipv4_aggregate_addresses is not None:
            pulumi.set(__self__, "ipv4_aggregate_addresses", ipv4_aggregate_addresses)
        if ipv4_eibgp_maximum_paths is not None:
            pulumi.set(__self__, "ipv4_eibgp_maximum_paths", ipv4_eibgp_maximum_paths)
        if ipv4_eibgp_maximum_paths_variable is not None:
            pulumi.set(__self__, "ipv4_eibgp_maximum_paths_variable", ipv4_eibgp_maximum_paths_variable)
        if ipv4_neighbors is not None:
            pulumi.set(__self__, "ipv4_neighbors", ipv4_neighbors)
        if ipv4_networks is not None:
            pulumi.set(__self__, "ipv4_networks", ipv4_networks)
        if ipv4_originate is not None:
            pulumi.set(__self__, "ipv4_originate", ipv4_originate)
        if ipv4_originate_variable is not None:
            pulumi.set(__self__, "ipv4_originate_variable", ipv4_originate_variable)
        if ipv4_redistributes is not None:
            pulumi.set(__self__, "ipv4_redistributes", ipv4_redistributes)
        if ipv4_table_map_filter is not None:
            pulumi.set(__self__, "ipv4_table_map_filter", ipv4_table_map_filter)
        if ipv4_table_map_filter_variable is not None:
            pulumi.set(__self__, "ipv4_table_map_filter_variable", ipv4_table_map_filter_variable)
        if ipv4_table_map_route_policy_id is not None:
            pulumi.set(__self__, "ipv4_table_map_route_policy_id", ipv4_table_map_route_policy_id)
        if ipv6_aggregate_addresses is not None:
            pulumi.set(__self__, "ipv6_aggregate_addresses", ipv6_aggregate_addresses)
        if ipv6_eibgp_maximum_paths is not None:
            pulumi.set(__self__, "ipv6_eibgp_maximum_paths", ipv6_eibgp_maximum_paths)
        if ipv6_eibgp_maximum_paths_variable is not None:
            pulumi.set(__self__, "ipv6_eibgp_maximum_paths_variable", ipv6_eibgp_maximum_paths_variable)
        if ipv6_neighbors is not None:
            pulumi.set(__self__, "ipv6_neighbors", ipv6_neighbors)
        if ipv6_networks is not None:
            pulumi.set(__self__, "ipv6_networks", ipv6_networks)
        if ipv6_originate is not None:
            pulumi.set(__self__, "ipv6_originate", ipv6_originate)
        if ipv6_originate_variable is not None:
            pulumi.set(__self__, "ipv6_originate_variable", ipv6_originate_variable)
        if ipv6_redistributes is not None:
            pulumi.set(__self__, "ipv6_redistributes", ipv6_redistributes)
        if ipv6_table_map_filter is not None:
            pulumi.set(__self__, "ipv6_table_map_filter", ipv6_table_map_filter)
        if ipv6_table_map_filter_variable is not None:
            pulumi.set(__self__, "ipv6_table_map_filter_variable", ipv6_table_map_filter_variable)
        if ipv6_table_map_route_policy_id is not None:
            pulumi.set(__self__, "ipv6_table_map_route_policy_id", ipv6_table_map_route_policy_id)
        if keepalive_time is not None:
            pulumi.set(__self__, "keepalive_time", keepalive_time)
        if keepalive_time_variable is not None:
            pulumi.set(__self__, "keepalive_time_variable", keepalive_time_variable)
        if local_routes_distance is not None:
            pulumi.set(__self__, "local_routes_distance", local_routes_distance)
        if local_routes_distance_variable is not None:
            pulumi.set(__self__, "local_routes_distance_variable", local_routes_distance_variable)
        if missing_med_as_worst is not None:
            pulumi.set(__self__, "missing_med_as_worst", missing_med_as_worst)
        if missing_med_as_worst_variable is not None:
            pulumi.set(__self__, "missing_med_as_worst_variable", missing_med_as_worst_variable)
        if mpls_interfaces is not None:
            pulumi.set(__self__, "mpls_interfaces", mpls_interfaces)
        if multipath_relax is not None:
            pulumi.set(__self__, "multipath_relax", multipath_relax)
        if multipath_relax_variable is not None:
            pulumi.set(__self__, "multipath_relax_variable", multipath_relax_variable)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if propagate_as_path is not None:
            pulumi.set(__self__, "propagate_as_path", propagate_as_path)
        if propagate_as_path_variable is not None:
            pulumi.set(__self__, "propagate_as_path_variable", propagate_as_path_variable)
        if propagate_community is not None:
            pulumi.set(__self__, "propagate_community", propagate_community)
        if propagate_community_variable is not None:
            pulumi.set(__self__, "propagate_community_variable", propagate_community_variable)
        if router_id is not None:
            pulumi.set(__self__, "router_id", router_id)
        if router_id_variable is not None:
            pulumi.set(__self__, "router_id_variable", router_id_variable)
        if version is not None:
            pulumi.set(__self__, "version", version)

    @_builtins.property
    @pulumi.getter(name="alwaysCompareMed")
    def always_compare_med(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Compare MEDs from all ASs when selecting active BGP paths
          - Default value: `false`
        """
        return pulumi.get(self, "always_compare_med")

    @always_compare_med.setter
    def always_compare_med(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "always_compare_med", value)

    @_builtins.property
    @pulumi.getter(name="alwaysCompareMedVariable")
    def always_compare_med_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "always_compare_med_variable")

    @always_compare_med_variable.setter
    def always_compare_med_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "always_compare_med_variable", value)

    @_builtins.property
    @pulumi.getter(name="asNumber")
    def as_number(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        Set autonomous system number <1..4294967295> or <XX.YY>
        """
        return pulumi.get(self, "as_number")

    @as_number.setter
    def as_number(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "as_number", value)

    @_builtins.property
    @pulumi.getter(name="asNumberVariable")
    def as_number_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "as_number_variable")

    @as_number_variable.setter
    def as_number_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "as_number_variable", value)

    @_builtins.property
    @pulumi.getter(name="compareRouterId")
    def compare_router_id(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Compare router IDs when selecting active BGP paths
          - Default value: `false`
        """
        return pulumi.get(self, "compare_router_id")

    @compare_router_id.setter
    def compare_router_id(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "compare_router_id", value)

    @_builtins.property
    @pulumi.getter(name="compareRouterIdVariable")
    def compare_router_id_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "compare_router_id_variable")

    @compare_router_id_variable.setter
    def compare_router_id_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "compare_router_id_variable", value)

    @_builtins.property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The description of the Feature
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "description", value)

    @_builtins.property
    @pulumi.getter(name="deterministicMed")
    def deterministic_med(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Compare MEDs from all routes from same AS when selecting active BGP paths
          - Default value: `false`
        """
        return pulumi.get(self, "deterministic_med")

    @deterministic_med.setter
    def deterministic_med(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "deterministic_med", value)

    @_builtins.property
    @pulumi.getter(name="deterministicMedVariable")
    def deterministic_med_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "deterministic_med_variable")

    @deterministic_med_variable.setter
    def deterministic_med_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "deterministic_med_variable", value)

    @_builtins.property
    @pulumi.getter(name="externalRoutesDistance")
    def external_routes_distance(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        Set administrative distance for external BGP routes
          - Range: `1`-`255`
          - Default value: `20`
        """
        return pulumi.get(self, "external_routes_distance")

    @external_routes_distance.setter
    def external_routes_distance(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "external_routes_distance", value)

    @_builtins.property
    @pulumi.getter(name="externalRoutesDistanceVariable")
    def external_routes_distance_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "external_routes_distance_variable")

    @external_routes_distance_variable.setter
    def external_routes_distance_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "external_routes_distance_variable", value)

    @_builtins.property
    @pulumi.getter(name="featureProfileId")
    def feature_profile_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Feature Profile ID
        """
        return pulumi.get(self, "feature_profile_id")

    @feature_profile_id.setter
    def feature_profile_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "feature_profile_id", value)

    @_builtins.property
    @pulumi.getter(name="holdTime")
    def hold_time(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        Interval (seconds) not receiving a keepalive message declares a BGP peer down
          - Range: `0`-`65535`
          - Default value: `180`
        """
        return pulumi.get(self, "hold_time")

    @hold_time.setter
    def hold_time(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "hold_time", value)

    @_builtins.property
    @pulumi.getter(name="holdTimeVariable")
    def hold_time_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "hold_time_variable")

    @hold_time_variable.setter
    def hold_time_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "hold_time_variable", value)

    @_builtins.property
    @pulumi.getter(name="internalRoutesDistance")
    def internal_routes_distance(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        Set administrative distance for internal BGP routes
          - Range: `1`-`255`
          - Default value: `200`
        """
        return pulumi.get(self, "internal_routes_distance")

    @internal_routes_distance.setter
    def internal_routes_distance(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "internal_routes_distance", value)

    @_builtins.property
    @pulumi.getter(name="internalRoutesDistanceVariable")
    def internal_routes_distance_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "internal_routes_distance_variable")

    @internal_routes_distance_variable.setter
    def internal_routes_distance_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "internal_routes_distance_variable", value)

    @_builtins.property
    @pulumi.getter(name="ipv4AggregateAddresses")
    def ipv4_aggregate_addresses(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['TransportRoutingBgpFeatureIpv4AggregateAddressArgs']]]]:
        """
        Aggregate prefixes in specific range
        """
        return pulumi.get(self, "ipv4_aggregate_addresses")

    @ipv4_aggregate_addresses.setter
    def ipv4_aggregate_addresses(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['TransportRoutingBgpFeatureIpv4AggregateAddressArgs']]]]):
        pulumi.set(self, "ipv4_aggregate_addresses", value)

    @_builtins.property
    @pulumi.getter(name="ipv4EibgpMaximumPaths")
    def ipv4_eibgp_maximum_paths(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        Set maximum number of parallel IBGP paths for multipath load sharing
          - Range: `1`-`32`
        """
        return pulumi.get(self, "ipv4_eibgp_maximum_paths")

    @ipv4_eibgp_maximum_paths.setter
    def ipv4_eibgp_maximum_paths(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "ipv4_eibgp_maximum_paths", value)

    @_builtins.property
    @pulumi.getter(name="ipv4EibgpMaximumPathsVariable")
    def ipv4_eibgp_maximum_paths_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "ipv4_eibgp_maximum_paths_variable")

    @ipv4_eibgp_maximum_paths_variable.setter
    def ipv4_eibgp_maximum_paths_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "ipv4_eibgp_maximum_paths_variable", value)

    @_builtins.property
    @pulumi.getter(name="ipv4Neighbors")
    def ipv4_neighbors(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['TransportRoutingBgpFeatureIpv4NeighborArgs']]]]:
        """
        Set BGP IPv4 neighbors
        """
        return pulumi.get(self, "ipv4_neighbors")

    @ipv4_neighbors.setter
    def ipv4_neighbors(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['TransportRoutingBgpFeatureIpv4NeighborArgs']]]]):
        pulumi.set(self, "ipv4_neighbors", value)

    @_builtins.property
    @pulumi.getter(name="ipv4Networks")
    def ipv4_networks(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['TransportRoutingBgpFeatureIpv4NetworkArgs']]]]:
        """
        Configure the networks for BGP to advertise
        """
        return pulumi.get(self, "ipv4_networks")

    @ipv4_networks.setter
    def ipv4_networks(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['TransportRoutingBgpFeatureIpv4NetworkArgs']]]]):
        pulumi.set(self, "ipv4_networks", value)

    @_builtins.property
    @pulumi.getter(name="ipv4Originate")
    def ipv4_originate(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        BGP Default Information Originate
          - Default value: `false`
        """
        return pulumi.get(self, "ipv4_originate")

    @ipv4_originate.setter
    def ipv4_originate(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "ipv4_originate", value)

    @_builtins.property
    @pulumi.getter(name="ipv4OriginateVariable")
    def ipv4_originate_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "ipv4_originate_variable")

    @ipv4_originate_variable.setter
    def ipv4_originate_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "ipv4_originate_variable", value)

    @_builtins.property
    @pulumi.getter(name="ipv4Redistributes")
    def ipv4_redistributes(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['TransportRoutingBgpFeatureIpv4RedistributeArgs']]]]:
        """
        Redistribute routes into BGP
        """
        return pulumi.get(self, "ipv4_redistributes")

    @ipv4_redistributes.setter
    def ipv4_redistributes(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['TransportRoutingBgpFeatureIpv4RedistributeArgs']]]]):
        pulumi.set(self, "ipv4_redistributes", value)

    @_builtins.property
    @pulumi.getter(name="ipv4TableMapFilter")
    def ipv4_table_map_filter(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Table map filtered or not
          - Default value: `false`
        """
        return pulumi.get(self, "ipv4_table_map_filter")

    @ipv4_table_map_filter.setter
    def ipv4_table_map_filter(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "ipv4_table_map_filter", value)

    @_builtins.property
    @pulumi.getter(name="ipv4TableMapFilterVariable")
    def ipv4_table_map_filter_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "ipv4_table_map_filter_variable")

    @ipv4_table_map_filter_variable.setter
    def ipv4_table_map_filter_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "ipv4_table_map_filter_variable", value)

    @_builtins.property
    @pulumi.getter(name="ipv4TableMapRoutePolicyId")
    def ipv4_table_map_route_policy_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "ipv4_table_map_route_policy_id")

    @ipv4_table_map_route_policy_id.setter
    def ipv4_table_map_route_policy_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "ipv4_table_map_route_policy_id", value)

    @_builtins.property
    @pulumi.getter(name="ipv6AggregateAddresses")
    def ipv6_aggregate_addresses(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['TransportRoutingBgpFeatureIpv6AggregateAddressArgs']]]]:
        """
        IPv6 Aggregate prefixes in specific range
        """
        return pulumi.get(self, "ipv6_aggregate_addresses")

    @ipv6_aggregate_addresses.setter
    def ipv6_aggregate_addresses(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['TransportRoutingBgpFeatureIpv6AggregateAddressArgs']]]]):
        pulumi.set(self, "ipv6_aggregate_addresses", value)

    @_builtins.property
    @pulumi.getter(name="ipv6EibgpMaximumPaths")
    def ipv6_eibgp_maximum_paths(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        Set maximum number of parallel IBGP paths for multipath load sharing
          - Range: `1`-`32`
        """
        return pulumi.get(self, "ipv6_eibgp_maximum_paths")

    @ipv6_eibgp_maximum_paths.setter
    def ipv6_eibgp_maximum_paths(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "ipv6_eibgp_maximum_paths", value)

    @_builtins.property
    @pulumi.getter(name="ipv6EibgpMaximumPathsVariable")
    def ipv6_eibgp_maximum_paths_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "ipv6_eibgp_maximum_paths_variable")

    @ipv6_eibgp_maximum_paths_variable.setter
    def ipv6_eibgp_maximum_paths_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "ipv6_eibgp_maximum_paths_variable", value)

    @_builtins.property
    @pulumi.getter(name="ipv6Neighbors")
    def ipv6_neighbors(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['TransportRoutingBgpFeatureIpv6NeighborArgs']]]]:
        """
        Set BGP IPv6 neighbors
        """
        return pulumi.get(self, "ipv6_neighbors")

    @ipv6_neighbors.setter
    def ipv6_neighbors(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['TransportRoutingBgpFeatureIpv6NeighborArgs']]]]):
        pulumi.set(self, "ipv6_neighbors", value)

    @_builtins.property
    @pulumi.getter(name="ipv6Networks")
    def ipv6_networks(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['TransportRoutingBgpFeatureIpv6NetworkArgs']]]]:
        """
        Configure the networks for BGP to advertise
        """
        return pulumi.get(self, "ipv6_networks")

    @ipv6_networks.setter
    def ipv6_networks(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['TransportRoutingBgpFeatureIpv6NetworkArgs']]]]):
        pulumi.set(self, "ipv6_networks", value)

    @_builtins.property
    @pulumi.getter(name="ipv6Originate")
    def ipv6_originate(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        BGP Default Information Originate
          - Default value: `false`
        """
        return pulumi.get(self, "ipv6_originate")

    @ipv6_originate.setter
    def ipv6_originate(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "ipv6_originate", value)

    @_builtins.property
    @pulumi.getter(name="ipv6OriginateVariable")
    def ipv6_originate_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "ipv6_originate_variable")

    @ipv6_originate_variable.setter
    def ipv6_originate_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "ipv6_originate_variable", value)

    @_builtins.property
    @pulumi.getter(name="ipv6Redistributes")
    def ipv6_redistributes(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['TransportRoutingBgpFeatureIpv6RedistributeArgs']]]]:
        """
        Redistribute routes into BGP
        """
        return pulumi.get(self, "ipv6_redistributes")

    @ipv6_redistributes.setter
    def ipv6_redistributes(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['TransportRoutingBgpFeatureIpv6RedistributeArgs']]]]):
        pulumi.set(self, "ipv6_redistributes", value)

    @_builtins.property
    @pulumi.getter(name="ipv6TableMapFilter")
    def ipv6_table_map_filter(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Table map filtered or not
          - Default value: `false`
        """
        return pulumi.get(self, "ipv6_table_map_filter")

    @ipv6_table_map_filter.setter
    def ipv6_table_map_filter(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "ipv6_table_map_filter", value)

    @_builtins.property
    @pulumi.getter(name="ipv6TableMapFilterVariable")
    def ipv6_table_map_filter_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "ipv6_table_map_filter_variable")

    @ipv6_table_map_filter_variable.setter
    def ipv6_table_map_filter_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "ipv6_table_map_filter_variable", value)

    @_builtins.property
    @pulumi.getter(name="ipv6TableMapRoutePolicyId")
    def ipv6_table_map_route_policy_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "ipv6_table_map_route_policy_id")

    @ipv6_table_map_route_policy_id.setter
    def ipv6_table_map_route_policy_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "ipv6_table_map_route_policy_id", value)

    @_builtins.property
    @pulumi.getter(name="keepaliveTime")
    def keepalive_time(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        Interval (seconds) of keepalive messages sent to its BGP peer
          - Range: `0`-`65535`
          - Default value: `60`
        """
        return pulumi.get(self, "keepalive_time")

    @keepalive_time.setter
    def keepalive_time(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "keepalive_time", value)

    @_builtins.property
    @pulumi.getter(name="keepaliveTimeVariable")
    def keepalive_time_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "keepalive_time_variable")

    @keepalive_time_variable.setter
    def keepalive_time_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "keepalive_time_variable", value)

    @_builtins.property
    @pulumi.getter(name="localRoutesDistance")
    def local_routes_distance(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        Set administrative distance for local BGP routes
          - Range: `1`-`255`
          - Default value: `20`
        """
        return pulumi.get(self, "local_routes_distance")

    @local_routes_distance.setter
    def local_routes_distance(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "local_routes_distance", value)

    @_builtins.property
    @pulumi.getter(name="localRoutesDistanceVariable")
    def local_routes_distance_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "local_routes_distance_variable")

    @local_routes_distance_variable.setter
    def local_routes_distance_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "local_routes_distance_variable", value)

    @_builtins.property
    @pulumi.getter(name="missingMedAsWorst")
    def missing_med_as_worst(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        If path has no MED, consider it to be worst path when selecting active BGP paths
          - Default value: `false`
        """
        return pulumi.get(self, "missing_med_as_worst")

    @missing_med_as_worst.setter
    def missing_med_as_worst(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "missing_med_as_worst", value)

    @_builtins.property
    @pulumi.getter(name="missingMedAsWorstVariable")
    def missing_med_as_worst_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "missing_med_as_worst_variable")

    @missing_med_as_worst_variable.setter
    def missing_med_as_worst_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "missing_med_as_worst_variable", value)

    @_builtins.property
    @pulumi.getter(name="mplsInterfaces")
    def mpls_interfaces(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['TransportRoutingBgpFeatureMplsInterfaceArgs']]]]:
        """
        MPLS BGP Interface
        """
        return pulumi.get(self, "mpls_interfaces")

    @mpls_interfaces.setter
    def mpls_interfaces(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['TransportRoutingBgpFeatureMplsInterfaceArgs']]]]):
        pulumi.set(self, "mpls_interfaces", value)

    @_builtins.property
    @pulumi.getter(name="multipathRelax")
    def multipath_relax(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Ignore AS for multipath selection
          - Default value: `false`
        """
        return pulumi.get(self, "multipath_relax")

    @multipath_relax.setter
    def multipath_relax(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "multipath_relax", value)

    @_builtins.property
    @pulumi.getter(name="multipathRelaxVariable")
    def multipath_relax_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "multipath_relax_variable")

    @multipath_relax_variable.setter
    def multipath_relax_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "multipath_relax_variable", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The name of the Feature
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "name", value)

    @_builtins.property
    @pulumi.getter(name="propagateAsPath")
    def propagate_as_path(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Propagate AS Path
          - Default value: `false`
        """
        return pulumi.get(self, "propagate_as_path")

    @propagate_as_path.setter
    def propagate_as_path(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "propagate_as_path", value)

    @_builtins.property
    @pulumi.getter(name="propagateAsPathVariable")
    def propagate_as_path_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "propagate_as_path_variable")

    @propagate_as_path_variable.setter
    def propagate_as_path_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "propagate_as_path_variable", value)

    @_builtins.property
    @pulumi.getter(name="propagateCommunity")
    def propagate_community(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Propagate Community
          - Default value: `false`
        """
        return pulumi.get(self, "propagate_community")

    @propagate_community.setter
    def propagate_community(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "propagate_community", value)

    @_builtins.property
    @pulumi.getter(name="propagateCommunityVariable")
    def propagate_community_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "propagate_community_variable")

    @propagate_community_variable.setter
    def propagate_community_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "propagate_community_variable", value)

    @_builtins.property
    @pulumi.getter(name="routerId")
    def router_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Configure BGP router identifier
        """
        return pulumi.get(self, "router_id")

    @router_id.setter
    def router_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "router_id", value)

    @_builtins.property
    @pulumi.getter(name="routerIdVariable")
    def router_id_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "router_id_variable")

    @router_id_variable.setter
    def router_id_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "router_id_variable", value)

    @_builtins.property
    @pulumi.getter
    def version(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        The version of the Feature
        """
        return pulumi.get(self, "version")

    @version.setter
    def version(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "version", value)


@pulumi.type_token("sdwan:index/transportRoutingBgpFeature:TransportRoutingBgpFeature")
class TransportRoutingBgpFeature(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 always_compare_med: Optional[pulumi.Input[_builtins.bool]] = None,
                 always_compare_med_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 as_number: Optional[pulumi.Input[_builtins.int]] = None,
                 as_number_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 compare_router_id: Optional[pulumi.Input[_builtins.bool]] = None,
                 compare_router_id_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 description: Optional[pulumi.Input[_builtins.str]] = None,
                 deterministic_med: Optional[pulumi.Input[_builtins.bool]] = None,
                 deterministic_med_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 external_routes_distance: Optional[pulumi.Input[_builtins.int]] = None,
                 external_routes_distance_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 feature_profile_id: Optional[pulumi.Input[_builtins.str]] = None,
                 hold_time: Optional[pulumi.Input[_builtins.int]] = None,
                 hold_time_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 internal_routes_distance: Optional[pulumi.Input[_builtins.int]] = None,
                 internal_routes_distance_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 ipv4_aggregate_addresses: Optional[pulumi.Input[Sequence[pulumi.Input[Union['TransportRoutingBgpFeatureIpv4AggregateAddressArgs', 'TransportRoutingBgpFeatureIpv4AggregateAddressArgsDict']]]]] = None,
                 ipv4_eibgp_maximum_paths: Optional[pulumi.Input[_builtins.int]] = None,
                 ipv4_eibgp_maximum_paths_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 ipv4_neighbors: Optional[pulumi.Input[Sequence[pulumi.Input[Union['TransportRoutingBgpFeatureIpv4NeighborArgs', 'TransportRoutingBgpFeatureIpv4NeighborArgsDict']]]]] = None,
                 ipv4_networks: Optional[pulumi.Input[Sequence[pulumi.Input[Union['TransportRoutingBgpFeatureIpv4NetworkArgs', 'TransportRoutingBgpFeatureIpv4NetworkArgsDict']]]]] = None,
                 ipv4_originate: Optional[pulumi.Input[_builtins.bool]] = None,
                 ipv4_originate_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 ipv4_redistributes: Optional[pulumi.Input[Sequence[pulumi.Input[Union['TransportRoutingBgpFeatureIpv4RedistributeArgs', 'TransportRoutingBgpFeatureIpv4RedistributeArgsDict']]]]] = None,
                 ipv4_table_map_filter: Optional[pulumi.Input[_builtins.bool]] = None,
                 ipv4_table_map_filter_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 ipv4_table_map_route_policy_id: Optional[pulumi.Input[_builtins.str]] = None,
                 ipv6_aggregate_addresses: Optional[pulumi.Input[Sequence[pulumi.Input[Union['TransportRoutingBgpFeatureIpv6AggregateAddressArgs', 'TransportRoutingBgpFeatureIpv6AggregateAddressArgsDict']]]]] = None,
                 ipv6_eibgp_maximum_paths: Optional[pulumi.Input[_builtins.int]] = None,
                 ipv6_eibgp_maximum_paths_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 ipv6_neighbors: Optional[pulumi.Input[Sequence[pulumi.Input[Union['TransportRoutingBgpFeatureIpv6NeighborArgs', 'TransportRoutingBgpFeatureIpv6NeighborArgsDict']]]]] = None,
                 ipv6_networks: Optional[pulumi.Input[Sequence[pulumi.Input[Union['TransportRoutingBgpFeatureIpv6NetworkArgs', 'TransportRoutingBgpFeatureIpv6NetworkArgsDict']]]]] = None,
                 ipv6_originate: Optional[pulumi.Input[_builtins.bool]] = None,
                 ipv6_originate_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 ipv6_redistributes: Optional[pulumi.Input[Sequence[pulumi.Input[Union['TransportRoutingBgpFeatureIpv6RedistributeArgs', 'TransportRoutingBgpFeatureIpv6RedistributeArgsDict']]]]] = None,
                 ipv6_table_map_filter: Optional[pulumi.Input[_builtins.bool]] = None,
                 ipv6_table_map_filter_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 ipv6_table_map_route_policy_id: Optional[pulumi.Input[_builtins.str]] = None,
                 keepalive_time: Optional[pulumi.Input[_builtins.int]] = None,
                 keepalive_time_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 local_routes_distance: Optional[pulumi.Input[_builtins.int]] = None,
                 local_routes_distance_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 missing_med_as_worst: Optional[pulumi.Input[_builtins.bool]] = None,
                 missing_med_as_worst_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 mpls_interfaces: Optional[pulumi.Input[Sequence[pulumi.Input[Union['TransportRoutingBgpFeatureMplsInterfaceArgs', 'TransportRoutingBgpFeatureMplsInterfaceArgsDict']]]]] = None,
                 multipath_relax: Optional[pulumi.Input[_builtins.bool]] = None,
                 multipath_relax_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 propagate_as_path: Optional[pulumi.Input[_builtins.bool]] = None,
                 propagate_as_path_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 propagate_community: Optional[pulumi.Input[_builtins.bool]] = None,
                 propagate_community_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 router_id: Optional[pulumi.Input[_builtins.str]] = None,
                 router_id_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 __props__=None):
        """
        This resource can manage a Transport Routing BGP Feature.
          - Minimum SD-WAN Manager version: `20.12.0`

        ## Example Usage

        ## Import

        The `pulumi import` command can be used, for example:

        Expected import identifier with the format: "transport_routing_bgp_feature_id,feature_profile_id"

        ```sh
        $ pulumi import sdwan:index/transportRoutingBgpFeature:TransportRoutingBgpFeature example "f6b2c44c-693c-4763-b010-895aa3d236bd,f6dd22c8-0b4f-496c-9a0b-6813d1f8b8ac"
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.bool] always_compare_med: Compare MEDs from all ASs when selecting active BGP paths
                 - Default value: `false`
        :param pulumi.Input[_builtins.str] always_compare_med_variable: Variable name
        :param pulumi.Input[_builtins.int] as_number: Set autonomous system number <1..4294967295> or <XX.YY>
        :param pulumi.Input[_builtins.str] as_number_variable: Variable name
        :param pulumi.Input[_builtins.bool] compare_router_id: Compare router IDs when selecting active BGP paths
                 - Default value: `false`
        :param pulumi.Input[_builtins.str] compare_router_id_variable: Variable name
        :param pulumi.Input[_builtins.str] description: The description of the Feature
        :param pulumi.Input[_builtins.bool] deterministic_med: Compare MEDs from all routes from same AS when selecting active BGP paths
                 - Default value: `false`
        :param pulumi.Input[_builtins.str] deterministic_med_variable: Variable name
        :param pulumi.Input[_builtins.int] external_routes_distance: Set administrative distance for external BGP routes
                 - Range: `1`-`255`
                 - Default value: `20`
        :param pulumi.Input[_builtins.str] external_routes_distance_variable: Variable name
        :param pulumi.Input[_builtins.str] feature_profile_id: Feature Profile ID
        :param pulumi.Input[_builtins.int] hold_time: Interval (seconds) not receiving a keepalive message declares a BGP peer down
                 - Range: `0`-`65535`
                 - Default value: `180`
        :param pulumi.Input[_builtins.str] hold_time_variable: Variable name
        :param pulumi.Input[_builtins.int] internal_routes_distance: Set administrative distance for internal BGP routes
                 - Range: `1`-`255`
                 - Default value: `200`
        :param pulumi.Input[_builtins.str] internal_routes_distance_variable: Variable name
        :param pulumi.Input[Sequence[pulumi.Input[Union['TransportRoutingBgpFeatureIpv4AggregateAddressArgs', 'TransportRoutingBgpFeatureIpv4AggregateAddressArgsDict']]]] ipv4_aggregate_addresses: Aggregate prefixes in specific range
        :param pulumi.Input[_builtins.int] ipv4_eibgp_maximum_paths: Set maximum number of parallel IBGP paths for multipath load sharing
                 - Range: `1`-`32`
        :param pulumi.Input[_builtins.str] ipv4_eibgp_maximum_paths_variable: Variable name
        :param pulumi.Input[Sequence[pulumi.Input[Union['TransportRoutingBgpFeatureIpv4NeighborArgs', 'TransportRoutingBgpFeatureIpv4NeighborArgsDict']]]] ipv4_neighbors: Set BGP IPv4 neighbors
        :param pulumi.Input[Sequence[pulumi.Input[Union['TransportRoutingBgpFeatureIpv4NetworkArgs', 'TransportRoutingBgpFeatureIpv4NetworkArgsDict']]]] ipv4_networks: Configure the networks for BGP to advertise
        :param pulumi.Input[_builtins.bool] ipv4_originate: BGP Default Information Originate
                 - Default value: `false`
        :param pulumi.Input[_builtins.str] ipv4_originate_variable: Variable name
        :param pulumi.Input[Sequence[pulumi.Input[Union['TransportRoutingBgpFeatureIpv4RedistributeArgs', 'TransportRoutingBgpFeatureIpv4RedistributeArgsDict']]]] ipv4_redistributes: Redistribute routes into BGP
        :param pulumi.Input[_builtins.bool] ipv4_table_map_filter: Table map filtered or not
                 - Default value: `false`
        :param pulumi.Input[_builtins.str] ipv4_table_map_filter_variable: Variable name
        :param pulumi.Input[Sequence[pulumi.Input[Union['TransportRoutingBgpFeatureIpv6AggregateAddressArgs', 'TransportRoutingBgpFeatureIpv6AggregateAddressArgsDict']]]] ipv6_aggregate_addresses: IPv6 Aggregate prefixes in specific range
        :param pulumi.Input[_builtins.int] ipv6_eibgp_maximum_paths: Set maximum number of parallel IBGP paths for multipath load sharing
                 - Range: `1`-`32`
        :param pulumi.Input[_builtins.str] ipv6_eibgp_maximum_paths_variable: Variable name
        :param pulumi.Input[Sequence[pulumi.Input[Union['TransportRoutingBgpFeatureIpv6NeighborArgs', 'TransportRoutingBgpFeatureIpv6NeighborArgsDict']]]] ipv6_neighbors: Set BGP IPv6 neighbors
        :param pulumi.Input[Sequence[pulumi.Input[Union['TransportRoutingBgpFeatureIpv6NetworkArgs', 'TransportRoutingBgpFeatureIpv6NetworkArgsDict']]]] ipv6_networks: Configure the networks for BGP to advertise
        :param pulumi.Input[_builtins.bool] ipv6_originate: BGP Default Information Originate
                 - Default value: `false`
        :param pulumi.Input[_builtins.str] ipv6_originate_variable: Variable name
        :param pulumi.Input[Sequence[pulumi.Input[Union['TransportRoutingBgpFeatureIpv6RedistributeArgs', 'TransportRoutingBgpFeatureIpv6RedistributeArgsDict']]]] ipv6_redistributes: Redistribute routes into BGP
        :param pulumi.Input[_builtins.bool] ipv6_table_map_filter: Table map filtered or not
                 - Default value: `false`
        :param pulumi.Input[_builtins.str] ipv6_table_map_filter_variable: Variable name
        :param pulumi.Input[_builtins.int] keepalive_time: Interval (seconds) of keepalive messages sent to its BGP peer
                 - Range: `0`-`65535`
                 - Default value: `60`
        :param pulumi.Input[_builtins.str] keepalive_time_variable: Variable name
        :param pulumi.Input[_builtins.int] local_routes_distance: Set administrative distance for local BGP routes
                 - Range: `1`-`255`
                 - Default value: `20`
        :param pulumi.Input[_builtins.str] local_routes_distance_variable: Variable name
        :param pulumi.Input[_builtins.bool] missing_med_as_worst: If path has no MED, consider it to be worst path when selecting active BGP paths
                 - Default value: `false`
        :param pulumi.Input[_builtins.str] missing_med_as_worst_variable: Variable name
        :param pulumi.Input[Sequence[pulumi.Input[Union['TransportRoutingBgpFeatureMplsInterfaceArgs', 'TransportRoutingBgpFeatureMplsInterfaceArgsDict']]]] mpls_interfaces: MPLS BGP Interface
        :param pulumi.Input[_builtins.bool] multipath_relax: Ignore AS for multipath selection
                 - Default value: `false`
        :param pulumi.Input[_builtins.str] multipath_relax_variable: Variable name
        :param pulumi.Input[_builtins.str] name: The name of the Feature
        :param pulumi.Input[_builtins.bool] propagate_as_path: Propagate AS Path
                 - Default value: `false`
        :param pulumi.Input[_builtins.str] propagate_as_path_variable: Variable name
        :param pulumi.Input[_builtins.bool] propagate_community: Propagate Community
                 - Default value: `false`
        :param pulumi.Input[_builtins.str] propagate_community_variable: Variable name
        :param pulumi.Input[_builtins.str] router_id: Configure BGP router identifier
        :param pulumi.Input[_builtins.str] router_id_variable: Variable name
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: TransportRoutingBgpFeatureArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        This resource can manage a Transport Routing BGP Feature.
          - Minimum SD-WAN Manager version: `20.12.0`

        ## Example Usage

        ## Import

        The `pulumi import` command can be used, for example:

        Expected import identifier with the format: "transport_routing_bgp_feature_id,feature_profile_id"

        ```sh
        $ pulumi import sdwan:index/transportRoutingBgpFeature:TransportRoutingBgpFeature example "f6b2c44c-693c-4763-b010-895aa3d236bd,f6dd22c8-0b4f-496c-9a0b-6813d1f8b8ac"
        ```

        :param str resource_name: The name of the resource.
        :param TransportRoutingBgpFeatureArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(TransportRoutingBgpFeatureArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 always_compare_med: Optional[pulumi.Input[_builtins.bool]] = None,
                 always_compare_med_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 as_number: Optional[pulumi.Input[_builtins.int]] = None,
                 as_number_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 compare_router_id: Optional[pulumi.Input[_builtins.bool]] = None,
                 compare_router_id_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 description: Optional[pulumi.Input[_builtins.str]] = None,
                 deterministic_med: Optional[pulumi.Input[_builtins.bool]] = None,
                 deterministic_med_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 external_routes_distance: Optional[pulumi.Input[_builtins.int]] = None,
                 external_routes_distance_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 feature_profile_id: Optional[pulumi.Input[_builtins.str]] = None,
                 hold_time: Optional[pulumi.Input[_builtins.int]] = None,
                 hold_time_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 internal_routes_distance: Optional[pulumi.Input[_builtins.int]] = None,
                 internal_routes_distance_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 ipv4_aggregate_addresses: Optional[pulumi.Input[Sequence[pulumi.Input[Union['TransportRoutingBgpFeatureIpv4AggregateAddressArgs', 'TransportRoutingBgpFeatureIpv4AggregateAddressArgsDict']]]]] = None,
                 ipv4_eibgp_maximum_paths: Optional[pulumi.Input[_builtins.int]] = None,
                 ipv4_eibgp_maximum_paths_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 ipv4_neighbors: Optional[pulumi.Input[Sequence[pulumi.Input[Union['TransportRoutingBgpFeatureIpv4NeighborArgs', 'TransportRoutingBgpFeatureIpv4NeighborArgsDict']]]]] = None,
                 ipv4_networks: Optional[pulumi.Input[Sequence[pulumi.Input[Union['TransportRoutingBgpFeatureIpv4NetworkArgs', 'TransportRoutingBgpFeatureIpv4NetworkArgsDict']]]]] = None,
                 ipv4_originate: Optional[pulumi.Input[_builtins.bool]] = None,
                 ipv4_originate_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 ipv4_redistributes: Optional[pulumi.Input[Sequence[pulumi.Input[Union['TransportRoutingBgpFeatureIpv4RedistributeArgs', 'TransportRoutingBgpFeatureIpv4RedistributeArgsDict']]]]] = None,
                 ipv4_table_map_filter: Optional[pulumi.Input[_builtins.bool]] = None,
                 ipv4_table_map_filter_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 ipv4_table_map_route_policy_id: Optional[pulumi.Input[_builtins.str]] = None,
                 ipv6_aggregate_addresses: Optional[pulumi.Input[Sequence[pulumi.Input[Union['TransportRoutingBgpFeatureIpv6AggregateAddressArgs', 'TransportRoutingBgpFeatureIpv6AggregateAddressArgsDict']]]]] = None,
                 ipv6_eibgp_maximum_paths: Optional[pulumi.Input[_builtins.int]] = None,
                 ipv6_eibgp_maximum_paths_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 ipv6_neighbors: Optional[pulumi.Input[Sequence[pulumi.Input[Union['TransportRoutingBgpFeatureIpv6NeighborArgs', 'TransportRoutingBgpFeatureIpv6NeighborArgsDict']]]]] = None,
                 ipv6_networks: Optional[pulumi.Input[Sequence[pulumi.Input[Union['TransportRoutingBgpFeatureIpv6NetworkArgs', 'TransportRoutingBgpFeatureIpv6NetworkArgsDict']]]]] = None,
                 ipv6_originate: Optional[pulumi.Input[_builtins.bool]] = None,
                 ipv6_originate_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 ipv6_redistributes: Optional[pulumi.Input[Sequence[pulumi.Input[Union['TransportRoutingBgpFeatureIpv6RedistributeArgs', 'TransportRoutingBgpFeatureIpv6RedistributeArgsDict']]]]] = None,
                 ipv6_table_map_filter: Optional[pulumi.Input[_builtins.bool]] = None,
                 ipv6_table_map_filter_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 ipv6_table_map_route_policy_id: Optional[pulumi.Input[_builtins.str]] = None,
                 keepalive_time: Optional[pulumi.Input[_builtins.int]] = None,
                 keepalive_time_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 local_routes_distance: Optional[pulumi.Input[_builtins.int]] = None,
                 local_routes_distance_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 missing_med_as_worst: Optional[pulumi.Input[_builtins.bool]] = None,
                 missing_med_as_worst_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 mpls_interfaces: Optional[pulumi.Input[Sequence[pulumi.Input[Union['TransportRoutingBgpFeatureMplsInterfaceArgs', 'TransportRoutingBgpFeatureMplsInterfaceArgsDict']]]]] = None,
                 multipath_relax: Optional[pulumi.Input[_builtins.bool]] = None,
                 multipath_relax_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 propagate_as_path: Optional[pulumi.Input[_builtins.bool]] = None,
                 propagate_as_path_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 propagate_community: Optional[pulumi.Input[_builtins.bool]] = None,
                 propagate_community_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 router_id: Optional[pulumi.Input[_builtins.str]] = None,
                 router_id_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = TransportRoutingBgpFeatureArgs.__new__(TransportRoutingBgpFeatureArgs)

            __props__.__dict__["always_compare_med"] = always_compare_med
            __props__.__dict__["always_compare_med_variable"] = always_compare_med_variable
            __props__.__dict__["as_number"] = as_number
            __props__.__dict__["as_number_variable"] = as_number_variable
            __props__.__dict__["compare_router_id"] = compare_router_id
            __props__.__dict__["compare_router_id_variable"] = compare_router_id_variable
            __props__.__dict__["description"] = description
            __props__.__dict__["deterministic_med"] = deterministic_med
            __props__.__dict__["deterministic_med_variable"] = deterministic_med_variable
            __props__.__dict__["external_routes_distance"] = external_routes_distance
            __props__.__dict__["external_routes_distance_variable"] = external_routes_distance_variable
            if feature_profile_id is None and not opts.urn:
                raise TypeError("Missing required property 'feature_profile_id'")
            __props__.__dict__["feature_profile_id"] = feature_profile_id
            __props__.__dict__["hold_time"] = hold_time
            __props__.__dict__["hold_time_variable"] = hold_time_variable
            __props__.__dict__["internal_routes_distance"] = internal_routes_distance
            __props__.__dict__["internal_routes_distance_variable"] = internal_routes_distance_variable
            __props__.__dict__["ipv4_aggregate_addresses"] = ipv4_aggregate_addresses
            __props__.__dict__["ipv4_eibgp_maximum_paths"] = ipv4_eibgp_maximum_paths
            __props__.__dict__["ipv4_eibgp_maximum_paths_variable"] = ipv4_eibgp_maximum_paths_variable
            __props__.__dict__["ipv4_neighbors"] = ipv4_neighbors
            __props__.__dict__["ipv4_networks"] = ipv4_networks
            __props__.__dict__["ipv4_originate"] = ipv4_originate
            __props__.__dict__["ipv4_originate_variable"] = ipv4_originate_variable
            __props__.__dict__["ipv4_redistributes"] = ipv4_redistributes
            __props__.__dict__["ipv4_table_map_filter"] = ipv4_table_map_filter
            __props__.__dict__["ipv4_table_map_filter_variable"] = ipv4_table_map_filter_variable
            __props__.__dict__["ipv4_table_map_route_policy_id"] = ipv4_table_map_route_policy_id
            __props__.__dict__["ipv6_aggregate_addresses"] = ipv6_aggregate_addresses
            __props__.__dict__["ipv6_eibgp_maximum_paths"] = ipv6_eibgp_maximum_paths
            __props__.__dict__["ipv6_eibgp_maximum_paths_variable"] = ipv6_eibgp_maximum_paths_variable
            __props__.__dict__["ipv6_neighbors"] = ipv6_neighbors
            __props__.__dict__["ipv6_networks"] = ipv6_networks
            __props__.__dict__["ipv6_originate"] = ipv6_originate
            __props__.__dict__["ipv6_originate_variable"] = ipv6_originate_variable
            __props__.__dict__["ipv6_redistributes"] = ipv6_redistributes
            __props__.__dict__["ipv6_table_map_filter"] = ipv6_table_map_filter
            __props__.__dict__["ipv6_table_map_filter_variable"] = ipv6_table_map_filter_variable
            __props__.__dict__["ipv6_table_map_route_policy_id"] = ipv6_table_map_route_policy_id
            __props__.__dict__["keepalive_time"] = keepalive_time
            __props__.__dict__["keepalive_time_variable"] = keepalive_time_variable
            __props__.__dict__["local_routes_distance"] = local_routes_distance
            __props__.__dict__["local_routes_distance_variable"] = local_routes_distance_variable
            __props__.__dict__["missing_med_as_worst"] = missing_med_as_worst
            __props__.__dict__["missing_med_as_worst_variable"] = missing_med_as_worst_variable
            __props__.__dict__["mpls_interfaces"] = mpls_interfaces
            __props__.__dict__["multipath_relax"] = multipath_relax
            __props__.__dict__["multipath_relax_variable"] = multipath_relax_variable
            __props__.__dict__["name"] = name
            __props__.__dict__["propagate_as_path"] = propagate_as_path
            __props__.__dict__["propagate_as_path_variable"] = propagate_as_path_variable
            __props__.__dict__["propagate_community"] = propagate_community
            __props__.__dict__["propagate_community_variable"] = propagate_community_variable
            __props__.__dict__["router_id"] = router_id
            __props__.__dict__["router_id_variable"] = router_id_variable
            __props__.__dict__["version"] = None
        super(TransportRoutingBgpFeature, __self__).__init__(
            'sdwan:index/transportRoutingBgpFeature:TransportRoutingBgpFeature',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            always_compare_med: Optional[pulumi.Input[_builtins.bool]] = None,
            always_compare_med_variable: Optional[pulumi.Input[_builtins.str]] = None,
            as_number: Optional[pulumi.Input[_builtins.int]] = None,
            as_number_variable: Optional[pulumi.Input[_builtins.str]] = None,
            compare_router_id: Optional[pulumi.Input[_builtins.bool]] = None,
            compare_router_id_variable: Optional[pulumi.Input[_builtins.str]] = None,
            description: Optional[pulumi.Input[_builtins.str]] = None,
            deterministic_med: Optional[pulumi.Input[_builtins.bool]] = None,
            deterministic_med_variable: Optional[pulumi.Input[_builtins.str]] = None,
            external_routes_distance: Optional[pulumi.Input[_builtins.int]] = None,
            external_routes_distance_variable: Optional[pulumi.Input[_builtins.str]] = None,
            feature_profile_id: Optional[pulumi.Input[_builtins.str]] = None,
            hold_time: Optional[pulumi.Input[_builtins.int]] = None,
            hold_time_variable: Optional[pulumi.Input[_builtins.str]] = None,
            internal_routes_distance: Optional[pulumi.Input[_builtins.int]] = None,
            internal_routes_distance_variable: Optional[pulumi.Input[_builtins.str]] = None,
            ipv4_aggregate_addresses: Optional[pulumi.Input[Sequence[pulumi.Input[Union['TransportRoutingBgpFeatureIpv4AggregateAddressArgs', 'TransportRoutingBgpFeatureIpv4AggregateAddressArgsDict']]]]] = None,
            ipv4_eibgp_maximum_paths: Optional[pulumi.Input[_builtins.int]] = None,
            ipv4_eibgp_maximum_paths_variable: Optional[pulumi.Input[_builtins.str]] = None,
            ipv4_neighbors: Optional[pulumi.Input[Sequence[pulumi.Input[Union['TransportRoutingBgpFeatureIpv4NeighborArgs', 'TransportRoutingBgpFeatureIpv4NeighborArgsDict']]]]] = None,
            ipv4_networks: Optional[pulumi.Input[Sequence[pulumi.Input[Union['TransportRoutingBgpFeatureIpv4NetworkArgs', 'TransportRoutingBgpFeatureIpv4NetworkArgsDict']]]]] = None,
            ipv4_originate: Optional[pulumi.Input[_builtins.bool]] = None,
            ipv4_originate_variable: Optional[pulumi.Input[_builtins.str]] = None,
            ipv4_redistributes: Optional[pulumi.Input[Sequence[pulumi.Input[Union['TransportRoutingBgpFeatureIpv4RedistributeArgs', 'TransportRoutingBgpFeatureIpv4RedistributeArgsDict']]]]] = None,
            ipv4_table_map_filter: Optional[pulumi.Input[_builtins.bool]] = None,
            ipv4_table_map_filter_variable: Optional[pulumi.Input[_builtins.str]] = None,
            ipv4_table_map_route_policy_id: Optional[pulumi.Input[_builtins.str]] = None,
            ipv6_aggregate_addresses: Optional[pulumi.Input[Sequence[pulumi.Input[Union['TransportRoutingBgpFeatureIpv6AggregateAddressArgs', 'TransportRoutingBgpFeatureIpv6AggregateAddressArgsDict']]]]] = None,
            ipv6_eibgp_maximum_paths: Optional[pulumi.Input[_builtins.int]] = None,
            ipv6_eibgp_maximum_paths_variable: Optional[pulumi.Input[_builtins.str]] = None,
            ipv6_neighbors: Optional[pulumi.Input[Sequence[pulumi.Input[Union['TransportRoutingBgpFeatureIpv6NeighborArgs', 'TransportRoutingBgpFeatureIpv6NeighborArgsDict']]]]] = None,
            ipv6_networks: Optional[pulumi.Input[Sequence[pulumi.Input[Union['TransportRoutingBgpFeatureIpv6NetworkArgs', 'TransportRoutingBgpFeatureIpv6NetworkArgsDict']]]]] = None,
            ipv6_originate: Optional[pulumi.Input[_builtins.bool]] = None,
            ipv6_originate_variable: Optional[pulumi.Input[_builtins.str]] = None,
            ipv6_redistributes: Optional[pulumi.Input[Sequence[pulumi.Input[Union['TransportRoutingBgpFeatureIpv6RedistributeArgs', 'TransportRoutingBgpFeatureIpv6RedistributeArgsDict']]]]] = None,
            ipv6_table_map_filter: Optional[pulumi.Input[_builtins.bool]] = None,
            ipv6_table_map_filter_variable: Optional[pulumi.Input[_builtins.str]] = None,
            ipv6_table_map_route_policy_id: Optional[pulumi.Input[_builtins.str]] = None,
            keepalive_time: Optional[pulumi.Input[_builtins.int]] = None,
            keepalive_time_variable: Optional[pulumi.Input[_builtins.str]] = None,
            local_routes_distance: Optional[pulumi.Input[_builtins.int]] = None,
            local_routes_distance_variable: Optional[pulumi.Input[_builtins.str]] = None,
            missing_med_as_worst: Optional[pulumi.Input[_builtins.bool]] = None,
            missing_med_as_worst_variable: Optional[pulumi.Input[_builtins.str]] = None,
            mpls_interfaces: Optional[pulumi.Input[Sequence[pulumi.Input[Union['TransportRoutingBgpFeatureMplsInterfaceArgs', 'TransportRoutingBgpFeatureMplsInterfaceArgsDict']]]]] = None,
            multipath_relax: Optional[pulumi.Input[_builtins.bool]] = None,
            multipath_relax_variable: Optional[pulumi.Input[_builtins.str]] = None,
            name: Optional[pulumi.Input[_builtins.str]] = None,
            propagate_as_path: Optional[pulumi.Input[_builtins.bool]] = None,
            propagate_as_path_variable: Optional[pulumi.Input[_builtins.str]] = None,
            propagate_community: Optional[pulumi.Input[_builtins.bool]] = None,
            propagate_community_variable: Optional[pulumi.Input[_builtins.str]] = None,
            router_id: Optional[pulumi.Input[_builtins.str]] = None,
            router_id_variable: Optional[pulumi.Input[_builtins.str]] = None,
            version: Optional[pulumi.Input[_builtins.int]] = None) -> 'TransportRoutingBgpFeature':
        """
        Get an existing TransportRoutingBgpFeature resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.bool] always_compare_med: Compare MEDs from all ASs when selecting active BGP paths
                 - Default value: `false`
        :param pulumi.Input[_builtins.str] always_compare_med_variable: Variable name
        :param pulumi.Input[_builtins.int] as_number: Set autonomous system number <1..4294967295> or <XX.YY>
        :param pulumi.Input[_builtins.str] as_number_variable: Variable name
        :param pulumi.Input[_builtins.bool] compare_router_id: Compare router IDs when selecting active BGP paths
                 - Default value: `false`
        :param pulumi.Input[_builtins.str] compare_router_id_variable: Variable name
        :param pulumi.Input[_builtins.str] description: The description of the Feature
        :param pulumi.Input[_builtins.bool] deterministic_med: Compare MEDs from all routes from same AS when selecting active BGP paths
                 - Default value: `false`
        :param pulumi.Input[_builtins.str] deterministic_med_variable: Variable name
        :param pulumi.Input[_builtins.int] external_routes_distance: Set administrative distance for external BGP routes
                 - Range: `1`-`255`
                 - Default value: `20`
        :param pulumi.Input[_builtins.str] external_routes_distance_variable: Variable name
        :param pulumi.Input[_builtins.str] feature_profile_id: Feature Profile ID
        :param pulumi.Input[_builtins.int] hold_time: Interval (seconds) not receiving a keepalive message declares a BGP peer down
                 - Range: `0`-`65535`
                 - Default value: `180`
        :param pulumi.Input[_builtins.str] hold_time_variable: Variable name
        :param pulumi.Input[_builtins.int] internal_routes_distance: Set administrative distance for internal BGP routes
                 - Range: `1`-`255`
                 - Default value: `200`
        :param pulumi.Input[_builtins.str] internal_routes_distance_variable: Variable name
        :param pulumi.Input[Sequence[pulumi.Input[Union['TransportRoutingBgpFeatureIpv4AggregateAddressArgs', 'TransportRoutingBgpFeatureIpv4AggregateAddressArgsDict']]]] ipv4_aggregate_addresses: Aggregate prefixes in specific range
        :param pulumi.Input[_builtins.int] ipv4_eibgp_maximum_paths: Set maximum number of parallel IBGP paths for multipath load sharing
                 - Range: `1`-`32`
        :param pulumi.Input[_builtins.str] ipv4_eibgp_maximum_paths_variable: Variable name
        :param pulumi.Input[Sequence[pulumi.Input[Union['TransportRoutingBgpFeatureIpv4NeighborArgs', 'TransportRoutingBgpFeatureIpv4NeighborArgsDict']]]] ipv4_neighbors: Set BGP IPv4 neighbors
        :param pulumi.Input[Sequence[pulumi.Input[Union['TransportRoutingBgpFeatureIpv4NetworkArgs', 'TransportRoutingBgpFeatureIpv4NetworkArgsDict']]]] ipv4_networks: Configure the networks for BGP to advertise
        :param pulumi.Input[_builtins.bool] ipv4_originate: BGP Default Information Originate
                 - Default value: `false`
        :param pulumi.Input[_builtins.str] ipv4_originate_variable: Variable name
        :param pulumi.Input[Sequence[pulumi.Input[Union['TransportRoutingBgpFeatureIpv4RedistributeArgs', 'TransportRoutingBgpFeatureIpv4RedistributeArgsDict']]]] ipv4_redistributes: Redistribute routes into BGP
        :param pulumi.Input[_builtins.bool] ipv4_table_map_filter: Table map filtered or not
                 - Default value: `false`
        :param pulumi.Input[_builtins.str] ipv4_table_map_filter_variable: Variable name
        :param pulumi.Input[Sequence[pulumi.Input[Union['TransportRoutingBgpFeatureIpv6AggregateAddressArgs', 'TransportRoutingBgpFeatureIpv6AggregateAddressArgsDict']]]] ipv6_aggregate_addresses: IPv6 Aggregate prefixes in specific range
        :param pulumi.Input[_builtins.int] ipv6_eibgp_maximum_paths: Set maximum number of parallel IBGP paths for multipath load sharing
                 - Range: `1`-`32`
        :param pulumi.Input[_builtins.str] ipv6_eibgp_maximum_paths_variable: Variable name
        :param pulumi.Input[Sequence[pulumi.Input[Union['TransportRoutingBgpFeatureIpv6NeighborArgs', 'TransportRoutingBgpFeatureIpv6NeighborArgsDict']]]] ipv6_neighbors: Set BGP IPv6 neighbors
        :param pulumi.Input[Sequence[pulumi.Input[Union['TransportRoutingBgpFeatureIpv6NetworkArgs', 'TransportRoutingBgpFeatureIpv6NetworkArgsDict']]]] ipv6_networks: Configure the networks for BGP to advertise
        :param pulumi.Input[_builtins.bool] ipv6_originate: BGP Default Information Originate
                 - Default value: `false`
        :param pulumi.Input[_builtins.str] ipv6_originate_variable: Variable name
        :param pulumi.Input[Sequence[pulumi.Input[Union['TransportRoutingBgpFeatureIpv6RedistributeArgs', 'TransportRoutingBgpFeatureIpv6RedistributeArgsDict']]]] ipv6_redistributes: Redistribute routes into BGP
        :param pulumi.Input[_builtins.bool] ipv6_table_map_filter: Table map filtered or not
                 - Default value: `false`
        :param pulumi.Input[_builtins.str] ipv6_table_map_filter_variable: Variable name
        :param pulumi.Input[_builtins.int] keepalive_time: Interval (seconds) of keepalive messages sent to its BGP peer
                 - Range: `0`-`65535`
                 - Default value: `60`
        :param pulumi.Input[_builtins.str] keepalive_time_variable: Variable name
        :param pulumi.Input[_builtins.int] local_routes_distance: Set administrative distance for local BGP routes
                 - Range: `1`-`255`
                 - Default value: `20`
        :param pulumi.Input[_builtins.str] local_routes_distance_variable: Variable name
        :param pulumi.Input[_builtins.bool] missing_med_as_worst: If path has no MED, consider it to be worst path when selecting active BGP paths
                 - Default value: `false`
        :param pulumi.Input[_builtins.str] missing_med_as_worst_variable: Variable name
        :param pulumi.Input[Sequence[pulumi.Input[Union['TransportRoutingBgpFeatureMplsInterfaceArgs', 'TransportRoutingBgpFeatureMplsInterfaceArgsDict']]]] mpls_interfaces: MPLS BGP Interface
        :param pulumi.Input[_builtins.bool] multipath_relax: Ignore AS for multipath selection
                 - Default value: `false`
        :param pulumi.Input[_builtins.str] multipath_relax_variable: Variable name
        :param pulumi.Input[_builtins.str] name: The name of the Feature
        :param pulumi.Input[_builtins.bool] propagate_as_path: Propagate AS Path
                 - Default value: `false`
        :param pulumi.Input[_builtins.str] propagate_as_path_variable: Variable name
        :param pulumi.Input[_builtins.bool] propagate_community: Propagate Community
                 - Default value: `false`
        :param pulumi.Input[_builtins.str] propagate_community_variable: Variable name
        :param pulumi.Input[_builtins.str] router_id: Configure BGP router identifier
        :param pulumi.Input[_builtins.str] router_id_variable: Variable name
        :param pulumi.Input[_builtins.int] version: The version of the Feature
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _TransportRoutingBgpFeatureState.__new__(_TransportRoutingBgpFeatureState)

        __props__.__dict__["always_compare_med"] = always_compare_med
        __props__.__dict__["always_compare_med_variable"] = always_compare_med_variable
        __props__.__dict__["as_number"] = as_number
        __props__.__dict__["as_number_variable"] = as_number_variable
        __props__.__dict__["compare_router_id"] = compare_router_id
        __props__.__dict__["compare_router_id_variable"] = compare_router_id_variable
        __props__.__dict__["description"] = description
        __props__.__dict__["deterministic_med"] = deterministic_med
        __props__.__dict__["deterministic_med_variable"] = deterministic_med_variable
        __props__.__dict__["external_routes_distance"] = external_routes_distance
        __props__.__dict__["external_routes_distance_variable"] = external_routes_distance_variable
        __props__.__dict__["feature_profile_id"] = feature_profile_id
        __props__.__dict__["hold_time"] = hold_time
        __props__.__dict__["hold_time_variable"] = hold_time_variable
        __props__.__dict__["internal_routes_distance"] = internal_routes_distance
        __props__.__dict__["internal_routes_distance_variable"] = internal_routes_distance_variable
        __props__.__dict__["ipv4_aggregate_addresses"] = ipv4_aggregate_addresses
        __props__.__dict__["ipv4_eibgp_maximum_paths"] = ipv4_eibgp_maximum_paths
        __props__.__dict__["ipv4_eibgp_maximum_paths_variable"] = ipv4_eibgp_maximum_paths_variable
        __props__.__dict__["ipv4_neighbors"] = ipv4_neighbors
        __props__.__dict__["ipv4_networks"] = ipv4_networks
        __props__.__dict__["ipv4_originate"] = ipv4_originate
        __props__.__dict__["ipv4_originate_variable"] = ipv4_originate_variable
        __props__.__dict__["ipv4_redistributes"] = ipv4_redistributes
        __props__.__dict__["ipv4_table_map_filter"] = ipv4_table_map_filter
        __props__.__dict__["ipv4_table_map_filter_variable"] = ipv4_table_map_filter_variable
        __props__.__dict__["ipv4_table_map_route_policy_id"] = ipv4_table_map_route_policy_id
        __props__.__dict__["ipv6_aggregate_addresses"] = ipv6_aggregate_addresses
        __props__.__dict__["ipv6_eibgp_maximum_paths"] = ipv6_eibgp_maximum_paths
        __props__.__dict__["ipv6_eibgp_maximum_paths_variable"] = ipv6_eibgp_maximum_paths_variable
        __props__.__dict__["ipv6_neighbors"] = ipv6_neighbors
        __props__.__dict__["ipv6_networks"] = ipv6_networks
        __props__.__dict__["ipv6_originate"] = ipv6_originate
        __props__.__dict__["ipv6_originate_variable"] = ipv6_originate_variable
        __props__.__dict__["ipv6_redistributes"] = ipv6_redistributes
        __props__.__dict__["ipv6_table_map_filter"] = ipv6_table_map_filter
        __props__.__dict__["ipv6_table_map_filter_variable"] = ipv6_table_map_filter_variable
        __props__.__dict__["ipv6_table_map_route_policy_id"] = ipv6_table_map_route_policy_id
        __props__.__dict__["keepalive_time"] = keepalive_time
        __props__.__dict__["keepalive_time_variable"] = keepalive_time_variable
        __props__.__dict__["local_routes_distance"] = local_routes_distance
        __props__.__dict__["local_routes_distance_variable"] = local_routes_distance_variable
        __props__.__dict__["missing_med_as_worst"] = missing_med_as_worst
        __props__.__dict__["missing_med_as_worst_variable"] = missing_med_as_worst_variable
        __props__.__dict__["mpls_interfaces"] = mpls_interfaces
        __props__.__dict__["multipath_relax"] = multipath_relax
        __props__.__dict__["multipath_relax_variable"] = multipath_relax_variable
        __props__.__dict__["name"] = name
        __props__.__dict__["propagate_as_path"] = propagate_as_path
        __props__.__dict__["propagate_as_path_variable"] = propagate_as_path_variable
        __props__.__dict__["propagate_community"] = propagate_community
        __props__.__dict__["propagate_community_variable"] = propagate_community_variable
        __props__.__dict__["router_id"] = router_id
        __props__.__dict__["router_id_variable"] = router_id_variable
        __props__.__dict__["version"] = version
        return TransportRoutingBgpFeature(resource_name, opts=opts, __props__=__props__)

    @_builtins.property
    @pulumi.getter(name="alwaysCompareMed")
    def always_compare_med(self) -> pulumi.Output[Optional[_builtins.bool]]:
        """
        Compare MEDs from all ASs when selecting active BGP paths
          - Default value: `false`
        """
        return pulumi.get(self, "always_compare_med")

    @_builtins.property
    @pulumi.getter(name="alwaysCompareMedVariable")
    def always_compare_med_variable(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "always_compare_med_variable")

    @_builtins.property
    @pulumi.getter(name="asNumber")
    def as_number(self) -> pulumi.Output[Optional[_builtins.int]]:
        """
        Set autonomous system number <1..4294967295> or <XX.YY>
        """
        return pulumi.get(self, "as_number")

    @_builtins.property
    @pulumi.getter(name="asNumberVariable")
    def as_number_variable(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "as_number_variable")

    @_builtins.property
    @pulumi.getter(name="compareRouterId")
    def compare_router_id(self) -> pulumi.Output[Optional[_builtins.bool]]:
        """
        Compare router IDs when selecting active BGP paths
          - Default value: `false`
        """
        return pulumi.get(self, "compare_router_id")

    @_builtins.property
    @pulumi.getter(name="compareRouterIdVariable")
    def compare_router_id_variable(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "compare_router_id_variable")

    @_builtins.property
    @pulumi.getter
    def description(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        The description of the Feature
        """
        return pulumi.get(self, "description")

    @_builtins.property
    @pulumi.getter(name="deterministicMed")
    def deterministic_med(self) -> pulumi.Output[Optional[_builtins.bool]]:
        """
        Compare MEDs from all routes from same AS when selecting active BGP paths
          - Default value: `false`
        """
        return pulumi.get(self, "deterministic_med")

    @_builtins.property
    @pulumi.getter(name="deterministicMedVariable")
    def deterministic_med_variable(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "deterministic_med_variable")

    @_builtins.property
    @pulumi.getter(name="externalRoutesDistance")
    def external_routes_distance(self) -> pulumi.Output[Optional[_builtins.int]]:
        """
        Set administrative distance for external BGP routes
          - Range: `1`-`255`
          - Default value: `20`
        """
        return pulumi.get(self, "external_routes_distance")

    @_builtins.property
    @pulumi.getter(name="externalRoutesDistanceVariable")
    def external_routes_distance_variable(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "external_routes_distance_variable")

    @_builtins.property
    @pulumi.getter(name="featureProfileId")
    def feature_profile_id(self) -> pulumi.Output[_builtins.str]:
        """
        Feature Profile ID
        """
        return pulumi.get(self, "feature_profile_id")

    @_builtins.property
    @pulumi.getter(name="holdTime")
    def hold_time(self) -> pulumi.Output[Optional[_builtins.int]]:
        """
        Interval (seconds) not receiving a keepalive message declares a BGP peer down
          - Range: `0`-`65535`
          - Default value: `180`
        """
        return pulumi.get(self, "hold_time")

    @_builtins.property
    @pulumi.getter(name="holdTimeVariable")
    def hold_time_variable(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "hold_time_variable")

    @_builtins.property
    @pulumi.getter(name="internalRoutesDistance")
    def internal_routes_distance(self) -> pulumi.Output[Optional[_builtins.int]]:
        """
        Set administrative distance for internal BGP routes
          - Range: `1`-`255`
          - Default value: `200`
        """
        return pulumi.get(self, "internal_routes_distance")

    @_builtins.property
    @pulumi.getter(name="internalRoutesDistanceVariable")
    def internal_routes_distance_variable(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "internal_routes_distance_variable")

    @_builtins.property
    @pulumi.getter(name="ipv4AggregateAddresses")
    def ipv4_aggregate_addresses(self) -> pulumi.Output[Optional[Sequence['outputs.TransportRoutingBgpFeatureIpv4AggregateAddress']]]:
        """
        Aggregate prefixes in specific range
        """
        return pulumi.get(self, "ipv4_aggregate_addresses")

    @_builtins.property
    @pulumi.getter(name="ipv4EibgpMaximumPaths")
    def ipv4_eibgp_maximum_paths(self) -> pulumi.Output[Optional[_builtins.int]]:
        """
        Set maximum number of parallel IBGP paths for multipath load sharing
          - Range: `1`-`32`
        """
        return pulumi.get(self, "ipv4_eibgp_maximum_paths")

    @_builtins.property
    @pulumi.getter(name="ipv4EibgpMaximumPathsVariable")
    def ipv4_eibgp_maximum_paths_variable(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "ipv4_eibgp_maximum_paths_variable")

    @_builtins.property
    @pulumi.getter(name="ipv4Neighbors")
    def ipv4_neighbors(self) -> pulumi.Output[Optional[Sequence['outputs.TransportRoutingBgpFeatureIpv4Neighbor']]]:
        """
        Set BGP IPv4 neighbors
        """
        return pulumi.get(self, "ipv4_neighbors")

    @_builtins.property
    @pulumi.getter(name="ipv4Networks")
    def ipv4_networks(self) -> pulumi.Output[Optional[Sequence['outputs.TransportRoutingBgpFeatureIpv4Network']]]:
        """
        Configure the networks for BGP to advertise
        """
        return pulumi.get(self, "ipv4_networks")

    @_builtins.property
    @pulumi.getter(name="ipv4Originate")
    def ipv4_originate(self) -> pulumi.Output[Optional[_builtins.bool]]:
        """
        BGP Default Information Originate
          - Default value: `false`
        """
        return pulumi.get(self, "ipv4_originate")

    @_builtins.property
    @pulumi.getter(name="ipv4OriginateVariable")
    def ipv4_originate_variable(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "ipv4_originate_variable")

    @_builtins.property
    @pulumi.getter(name="ipv4Redistributes")
    def ipv4_redistributes(self) -> pulumi.Output[Optional[Sequence['outputs.TransportRoutingBgpFeatureIpv4Redistribute']]]:
        """
        Redistribute routes into BGP
        """
        return pulumi.get(self, "ipv4_redistributes")

    @_builtins.property
    @pulumi.getter(name="ipv4TableMapFilter")
    def ipv4_table_map_filter(self) -> pulumi.Output[Optional[_builtins.bool]]:
        """
        Table map filtered or not
          - Default value: `false`
        """
        return pulumi.get(self, "ipv4_table_map_filter")

    @_builtins.property
    @pulumi.getter(name="ipv4TableMapFilterVariable")
    def ipv4_table_map_filter_variable(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "ipv4_table_map_filter_variable")

    @_builtins.property
    @pulumi.getter(name="ipv4TableMapRoutePolicyId")
    def ipv4_table_map_route_policy_id(self) -> pulumi.Output[Optional[_builtins.str]]:
        return pulumi.get(self, "ipv4_table_map_route_policy_id")

    @_builtins.property
    @pulumi.getter(name="ipv6AggregateAddresses")
    def ipv6_aggregate_addresses(self) -> pulumi.Output[Optional[Sequence['outputs.TransportRoutingBgpFeatureIpv6AggregateAddress']]]:
        """
        IPv6 Aggregate prefixes in specific range
        """
        return pulumi.get(self, "ipv6_aggregate_addresses")

    @_builtins.property
    @pulumi.getter(name="ipv6EibgpMaximumPaths")
    def ipv6_eibgp_maximum_paths(self) -> pulumi.Output[Optional[_builtins.int]]:
        """
        Set maximum number of parallel IBGP paths for multipath load sharing
          - Range: `1`-`32`
        """
        return pulumi.get(self, "ipv6_eibgp_maximum_paths")

    @_builtins.property
    @pulumi.getter(name="ipv6EibgpMaximumPathsVariable")
    def ipv6_eibgp_maximum_paths_variable(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "ipv6_eibgp_maximum_paths_variable")

    @_builtins.property
    @pulumi.getter(name="ipv6Neighbors")
    def ipv6_neighbors(self) -> pulumi.Output[Optional[Sequence['outputs.TransportRoutingBgpFeatureIpv6Neighbor']]]:
        """
        Set BGP IPv6 neighbors
        """
        return pulumi.get(self, "ipv6_neighbors")

    @_builtins.property
    @pulumi.getter(name="ipv6Networks")
    def ipv6_networks(self) -> pulumi.Output[Optional[Sequence['outputs.TransportRoutingBgpFeatureIpv6Network']]]:
        """
        Configure the networks for BGP to advertise
        """
        return pulumi.get(self, "ipv6_networks")

    @_builtins.property
    @pulumi.getter(name="ipv6Originate")
    def ipv6_originate(self) -> pulumi.Output[Optional[_builtins.bool]]:
        """
        BGP Default Information Originate
          - Default value: `false`
        """
        return pulumi.get(self, "ipv6_originate")

    @_builtins.property
    @pulumi.getter(name="ipv6OriginateVariable")
    def ipv6_originate_variable(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "ipv6_originate_variable")

    @_builtins.property
    @pulumi.getter(name="ipv6Redistributes")
    def ipv6_redistributes(self) -> pulumi.Output[Optional[Sequence['outputs.TransportRoutingBgpFeatureIpv6Redistribute']]]:
        """
        Redistribute routes into BGP
        """
        return pulumi.get(self, "ipv6_redistributes")

    @_builtins.property
    @pulumi.getter(name="ipv6TableMapFilter")
    def ipv6_table_map_filter(self) -> pulumi.Output[Optional[_builtins.bool]]:
        """
        Table map filtered or not
          - Default value: `false`
        """
        return pulumi.get(self, "ipv6_table_map_filter")

    @_builtins.property
    @pulumi.getter(name="ipv6TableMapFilterVariable")
    def ipv6_table_map_filter_variable(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "ipv6_table_map_filter_variable")

    @_builtins.property
    @pulumi.getter(name="ipv6TableMapRoutePolicyId")
    def ipv6_table_map_route_policy_id(self) -> pulumi.Output[Optional[_builtins.str]]:
        return pulumi.get(self, "ipv6_table_map_route_policy_id")

    @_builtins.property
    @pulumi.getter(name="keepaliveTime")
    def keepalive_time(self) -> pulumi.Output[Optional[_builtins.int]]:
        """
        Interval (seconds) of keepalive messages sent to its BGP peer
          - Range: `0`-`65535`
          - Default value: `60`
        """
        return pulumi.get(self, "keepalive_time")

    @_builtins.property
    @pulumi.getter(name="keepaliveTimeVariable")
    def keepalive_time_variable(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "keepalive_time_variable")

    @_builtins.property
    @pulumi.getter(name="localRoutesDistance")
    def local_routes_distance(self) -> pulumi.Output[Optional[_builtins.int]]:
        """
        Set administrative distance for local BGP routes
          - Range: `1`-`255`
          - Default value: `20`
        """
        return pulumi.get(self, "local_routes_distance")

    @_builtins.property
    @pulumi.getter(name="localRoutesDistanceVariable")
    def local_routes_distance_variable(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "local_routes_distance_variable")

    @_builtins.property
    @pulumi.getter(name="missingMedAsWorst")
    def missing_med_as_worst(self) -> pulumi.Output[Optional[_builtins.bool]]:
        """
        If path has no MED, consider it to be worst path when selecting active BGP paths
          - Default value: `false`
        """
        return pulumi.get(self, "missing_med_as_worst")

    @_builtins.property
    @pulumi.getter(name="missingMedAsWorstVariable")
    def missing_med_as_worst_variable(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "missing_med_as_worst_variable")

    @_builtins.property
    @pulumi.getter(name="mplsInterfaces")
    def mpls_interfaces(self) -> pulumi.Output[Optional[Sequence['outputs.TransportRoutingBgpFeatureMplsInterface']]]:
        """
        MPLS BGP Interface
        """
        return pulumi.get(self, "mpls_interfaces")

    @_builtins.property
    @pulumi.getter(name="multipathRelax")
    def multipath_relax(self) -> pulumi.Output[Optional[_builtins.bool]]:
        """
        Ignore AS for multipath selection
          - Default value: `false`
        """
        return pulumi.get(self, "multipath_relax")

    @_builtins.property
    @pulumi.getter(name="multipathRelaxVariable")
    def multipath_relax_variable(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "multipath_relax_variable")

    @_builtins.property
    @pulumi.getter
    def name(self) -> pulumi.Output[_builtins.str]:
        """
        The name of the Feature
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter(name="propagateAsPath")
    def propagate_as_path(self) -> pulumi.Output[Optional[_builtins.bool]]:
        """
        Propagate AS Path
          - Default value: `false`
        """
        return pulumi.get(self, "propagate_as_path")

    @_builtins.property
    @pulumi.getter(name="propagateAsPathVariable")
    def propagate_as_path_variable(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "propagate_as_path_variable")

    @_builtins.property
    @pulumi.getter(name="propagateCommunity")
    def propagate_community(self) -> pulumi.Output[Optional[_builtins.bool]]:
        """
        Propagate Community
          - Default value: `false`
        """
        return pulumi.get(self, "propagate_community")

    @_builtins.property
    @pulumi.getter(name="propagateCommunityVariable")
    def propagate_community_variable(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "propagate_community_variable")

    @_builtins.property
    @pulumi.getter(name="routerId")
    def router_id(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        Configure BGP router identifier
        """
        return pulumi.get(self, "router_id")

    @_builtins.property
    @pulumi.getter(name="routerIdVariable")
    def router_id_variable(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "router_id_variable")

    @_builtins.property
    @pulumi.getter
    def version(self) -> pulumi.Output[_builtins.int]:
        """
        The version of the Feature
        """
        return pulumi.get(self, "version")

