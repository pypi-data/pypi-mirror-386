# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities
from . import outputs

__all__ = [
    'GetVpnInterfaceSviFeatureTemplateResult',
    'AwaitableGetVpnInterfaceSviFeatureTemplateResult',
    'get_vpn_interface_svi_feature_template',
    'get_vpn_interface_svi_feature_template_output',
]

@pulumi.output_type
class GetVpnInterfaceSviFeatureTemplateResult:
    """
    A collection of values returned by getVpnInterfaceSviFeatureTemplate.
    """
    def __init__(__self__, arp_timeout=None, arp_timeout_variable=None, description=None, device_types=None, id=None, if_name=None, if_name_variable=None, interface_description=None, interface_description_variable=None, ip_directed_broadcast=None, ip_directed_broadcast_variable=None, ip_mtu=None, ip_mtu_variable=None, ipv4_access_lists=None, ipv4_address=None, ipv4_address_variable=None, ipv4_dhcp_helper_variable=None, ipv4_dhcp_helpers=None, ipv4_secondary_addresses=None, ipv4_vrrps=None, ipv6_access_lists=None, ipv6_address=None, ipv6_address_variable=None, ipv6_dhcp_client=None, ipv6_dhcp_client_variable=None, ipv6_dhcp_distance=None, ipv6_dhcp_distance_variable=None, ipv6_dhcp_helpers=None, ipv6_dhcp_rapid_commit=None, ipv6_dhcp_rapid_commit_variable=None, ipv6_secondary_addresses=None, ipv6_vrrps=None, mtu=None, mtu_variable=None, name=None, policers=None, shutdown=None, shutdown_variable=None, static_arp_entries=None, tcp_mss_adjust=None, tcp_mss_adjust_variable=None, template_type=None, version=None):
        if arp_timeout and not isinstance(arp_timeout, int):
            raise TypeError("Expected argument 'arp_timeout' to be a int")
        pulumi.set(__self__, "arp_timeout", arp_timeout)
        if arp_timeout_variable and not isinstance(arp_timeout_variable, str):
            raise TypeError("Expected argument 'arp_timeout_variable' to be a str")
        pulumi.set(__self__, "arp_timeout_variable", arp_timeout_variable)
        if description and not isinstance(description, str):
            raise TypeError("Expected argument 'description' to be a str")
        pulumi.set(__self__, "description", description)
        if device_types and not isinstance(device_types, list):
            raise TypeError("Expected argument 'device_types' to be a list")
        pulumi.set(__self__, "device_types", device_types)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if if_name and not isinstance(if_name, str):
            raise TypeError("Expected argument 'if_name' to be a str")
        pulumi.set(__self__, "if_name", if_name)
        if if_name_variable and not isinstance(if_name_variable, str):
            raise TypeError("Expected argument 'if_name_variable' to be a str")
        pulumi.set(__self__, "if_name_variable", if_name_variable)
        if interface_description and not isinstance(interface_description, str):
            raise TypeError("Expected argument 'interface_description' to be a str")
        pulumi.set(__self__, "interface_description", interface_description)
        if interface_description_variable and not isinstance(interface_description_variable, str):
            raise TypeError("Expected argument 'interface_description_variable' to be a str")
        pulumi.set(__self__, "interface_description_variable", interface_description_variable)
        if ip_directed_broadcast and not isinstance(ip_directed_broadcast, bool):
            raise TypeError("Expected argument 'ip_directed_broadcast' to be a bool")
        pulumi.set(__self__, "ip_directed_broadcast", ip_directed_broadcast)
        if ip_directed_broadcast_variable and not isinstance(ip_directed_broadcast_variable, str):
            raise TypeError("Expected argument 'ip_directed_broadcast_variable' to be a str")
        pulumi.set(__self__, "ip_directed_broadcast_variable", ip_directed_broadcast_variable)
        if ip_mtu and not isinstance(ip_mtu, int):
            raise TypeError("Expected argument 'ip_mtu' to be a int")
        pulumi.set(__self__, "ip_mtu", ip_mtu)
        if ip_mtu_variable and not isinstance(ip_mtu_variable, str):
            raise TypeError("Expected argument 'ip_mtu_variable' to be a str")
        pulumi.set(__self__, "ip_mtu_variable", ip_mtu_variable)
        if ipv4_access_lists and not isinstance(ipv4_access_lists, list):
            raise TypeError("Expected argument 'ipv4_access_lists' to be a list")
        pulumi.set(__self__, "ipv4_access_lists", ipv4_access_lists)
        if ipv4_address and not isinstance(ipv4_address, str):
            raise TypeError("Expected argument 'ipv4_address' to be a str")
        pulumi.set(__self__, "ipv4_address", ipv4_address)
        if ipv4_address_variable and not isinstance(ipv4_address_variable, str):
            raise TypeError("Expected argument 'ipv4_address_variable' to be a str")
        pulumi.set(__self__, "ipv4_address_variable", ipv4_address_variable)
        if ipv4_dhcp_helper_variable and not isinstance(ipv4_dhcp_helper_variable, str):
            raise TypeError("Expected argument 'ipv4_dhcp_helper_variable' to be a str")
        pulumi.set(__self__, "ipv4_dhcp_helper_variable", ipv4_dhcp_helper_variable)
        if ipv4_dhcp_helpers and not isinstance(ipv4_dhcp_helpers, list):
            raise TypeError("Expected argument 'ipv4_dhcp_helpers' to be a list")
        pulumi.set(__self__, "ipv4_dhcp_helpers", ipv4_dhcp_helpers)
        if ipv4_secondary_addresses and not isinstance(ipv4_secondary_addresses, list):
            raise TypeError("Expected argument 'ipv4_secondary_addresses' to be a list")
        pulumi.set(__self__, "ipv4_secondary_addresses", ipv4_secondary_addresses)
        if ipv4_vrrps and not isinstance(ipv4_vrrps, list):
            raise TypeError("Expected argument 'ipv4_vrrps' to be a list")
        pulumi.set(__self__, "ipv4_vrrps", ipv4_vrrps)
        if ipv6_access_lists and not isinstance(ipv6_access_lists, list):
            raise TypeError("Expected argument 'ipv6_access_lists' to be a list")
        pulumi.set(__self__, "ipv6_access_lists", ipv6_access_lists)
        if ipv6_address and not isinstance(ipv6_address, str):
            raise TypeError("Expected argument 'ipv6_address' to be a str")
        pulumi.set(__self__, "ipv6_address", ipv6_address)
        if ipv6_address_variable and not isinstance(ipv6_address_variable, str):
            raise TypeError("Expected argument 'ipv6_address_variable' to be a str")
        pulumi.set(__self__, "ipv6_address_variable", ipv6_address_variable)
        if ipv6_dhcp_client and not isinstance(ipv6_dhcp_client, bool):
            raise TypeError("Expected argument 'ipv6_dhcp_client' to be a bool")
        pulumi.set(__self__, "ipv6_dhcp_client", ipv6_dhcp_client)
        if ipv6_dhcp_client_variable and not isinstance(ipv6_dhcp_client_variable, str):
            raise TypeError("Expected argument 'ipv6_dhcp_client_variable' to be a str")
        pulumi.set(__self__, "ipv6_dhcp_client_variable", ipv6_dhcp_client_variable)
        if ipv6_dhcp_distance and not isinstance(ipv6_dhcp_distance, int):
            raise TypeError("Expected argument 'ipv6_dhcp_distance' to be a int")
        pulumi.set(__self__, "ipv6_dhcp_distance", ipv6_dhcp_distance)
        if ipv6_dhcp_distance_variable and not isinstance(ipv6_dhcp_distance_variable, str):
            raise TypeError("Expected argument 'ipv6_dhcp_distance_variable' to be a str")
        pulumi.set(__self__, "ipv6_dhcp_distance_variable", ipv6_dhcp_distance_variable)
        if ipv6_dhcp_helpers and not isinstance(ipv6_dhcp_helpers, list):
            raise TypeError("Expected argument 'ipv6_dhcp_helpers' to be a list")
        pulumi.set(__self__, "ipv6_dhcp_helpers", ipv6_dhcp_helpers)
        if ipv6_dhcp_rapid_commit and not isinstance(ipv6_dhcp_rapid_commit, bool):
            raise TypeError("Expected argument 'ipv6_dhcp_rapid_commit' to be a bool")
        pulumi.set(__self__, "ipv6_dhcp_rapid_commit", ipv6_dhcp_rapid_commit)
        if ipv6_dhcp_rapid_commit_variable and not isinstance(ipv6_dhcp_rapid_commit_variable, str):
            raise TypeError("Expected argument 'ipv6_dhcp_rapid_commit_variable' to be a str")
        pulumi.set(__self__, "ipv6_dhcp_rapid_commit_variable", ipv6_dhcp_rapid_commit_variable)
        if ipv6_secondary_addresses and not isinstance(ipv6_secondary_addresses, list):
            raise TypeError("Expected argument 'ipv6_secondary_addresses' to be a list")
        pulumi.set(__self__, "ipv6_secondary_addresses", ipv6_secondary_addresses)
        if ipv6_vrrps and not isinstance(ipv6_vrrps, list):
            raise TypeError("Expected argument 'ipv6_vrrps' to be a list")
        pulumi.set(__self__, "ipv6_vrrps", ipv6_vrrps)
        if mtu and not isinstance(mtu, int):
            raise TypeError("Expected argument 'mtu' to be a int")
        pulumi.set(__self__, "mtu", mtu)
        if mtu_variable and not isinstance(mtu_variable, str):
            raise TypeError("Expected argument 'mtu_variable' to be a str")
        pulumi.set(__self__, "mtu_variable", mtu_variable)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)
        if policers and not isinstance(policers, list):
            raise TypeError("Expected argument 'policers' to be a list")
        pulumi.set(__self__, "policers", policers)
        if shutdown and not isinstance(shutdown, bool):
            raise TypeError("Expected argument 'shutdown' to be a bool")
        pulumi.set(__self__, "shutdown", shutdown)
        if shutdown_variable and not isinstance(shutdown_variable, str):
            raise TypeError("Expected argument 'shutdown_variable' to be a str")
        pulumi.set(__self__, "shutdown_variable", shutdown_variable)
        if static_arp_entries and not isinstance(static_arp_entries, list):
            raise TypeError("Expected argument 'static_arp_entries' to be a list")
        pulumi.set(__self__, "static_arp_entries", static_arp_entries)
        if tcp_mss_adjust and not isinstance(tcp_mss_adjust, int):
            raise TypeError("Expected argument 'tcp_mss_adjust' to be a int")
        pulumi.set(__self__, "tcp_mss_adjust", tcp_mss_adjust)
        if tcp_mss_adjust_variable and not isinstance(tcp_mss_adjust_variable, str):
            raise TypeError("Expected argument 'tcp_mss_adjust_variable' to be a str")
        pulumi.set(__self__, "tcp_mss_adjust_variable", tcp_mss_adjust_variable)
        if template_type and not isinstance(template_type, str):
            raise TypeError("Expected argument 'template_type' to be a str")
        pulumi.set(__self__, "template_type", template_type)
        if version and not isinstance(version, int):
            raise TypeError("Expected argument 'version' to be a int")
        pulumi.set(__self__, "version", version)

    @_builtins.property
    @pulumi.getter(name="arpTimeout")
    def arp_timeout(self) -> _builtins.int:
        """
        Timeout value for dynamically learned ARP entries, \\n\\n seconds
        """
        return pulumi.get(self, "arp_timeout")

    @_builtins.property
    @pulumi.getter(name="arpTimeoutVariable")
    def arp_timeout_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "arp_timeout_variable")

    @_builtins.property
    @pulumi.getter
    def description(self) -> _builtins.str:
        """
        The description of the feature template
        """
        return pulumi.get(self, "description")

    @_builtins.property
    @pulumi.getter(name="deviceTypes")
    def device_types(self) -> Sequence[_builtins.str]:
        """
        List of supported device types
        """
        return pulumi.get(self, "device_types")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        The id of the feature template
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter(name="ifName")
    def if_name(self) -> _builtins.str:
        """
        Interface name: VLAN 1 - VLAN 4094 when present
        """
        return pulumi.get(self, "if_name")

    @_builtins.property
    @pulumi.getter(name="ifNameVariable")
    def if_name_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "if_name_variable")

    @_builtins.property
    @pulumi.getter(name="interfaceDescription")
    def interface_description(self) -> _builtins.str:
        """
        Interface description
        """
        return pulumi.get(self, "interface_description")

    @_builtins.property
    @pulumi.getter(name="interfaceDescriptionVariable")
    def interface_description_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "interface_description_variable")

    @_builtins.property
    @pulumi.getter(name="ipDirectedBroadcast")
    def ip_directed_broadcast(self) -> _builtins.bool:
        """
        IP Directed-Broadcast
        """
        return pulumi.get(self, "ip_directed_broadcast")

    @_builtins.property
    @pulumi.getter(name="ipDirectedBroadcastVariable")
    def ip_directed_broadcast_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "ip_directed_broadcast_variable")

    @_builtins.property
    @pulumi.getter(name="ipMtu")
    def ip_mtu(self) -> _builtins.int:
        """
        IP MTU \\n\\n, in bytes
        """
        return pulumi.get(self, "ip_mtu")

    @_builtins.property
    @pulumi.getter(name="ipMtuVariable")
    def ip_mtu_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "ip_mtu_variable")

    @_builtins.property
    @pulumi.getter(name="ipv4AccessLists")
    def ipv4_access_lists(self) -> Sequence['outputs.GetVpnInterfaceSviFeatureTemplateIpv4AccessListResult']:
        """
        Apply ACL
        """
        return pulumi.get(self, "ipv4_access_lists")

    @_builtins.property
    @pulumi.getter(name="ipv4Address")
    def ipv4_address(self) -> _builtins.str:
        """
        Assign IPv4 address
        """
        return pulumi.get(self, "ipv4_address")

    @_builtins.property
    @pulumi.getter(name="ipv4AddressVariable")
    def ipv4_address_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "ipv4_address_variable")

    @_builtins.property
    @pulumi.getter(name="ipv4DhcpHelperVariable")
    def ipv4_dhcp_helper_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "ipv4_dhcp_helper_variable")

    @_builtins.property
    @pulumi.getter(name="ipv4DhcpHelpers")
    def ipv4_dhcp_helpers(self) -> Sequence[_builtins.str]:
        """
        List of DHCP helper addresses
        """
        return pulumi.get(self, "ipv4_dhcp_helpers")

    @_builtins.property
    @pulumi.getter(name="ipv4SecondaryAddresses")
    def ipv4_secondary_addresses(self) -> Sequence['outputs.GetVpnInterfaceSviFeatureTemplateIpv4SecondaryAddressResult']:
        """
        Assign secondary IP addresses
        """
        return pulumi.get(self, "ipv4_secondary_addresses")

    @_builtins.property
    @pulumi.getter(name="ipv4Vrrps")
    def ipv4_vrrps(self) -> Sequence['outputs.GetVpnInterfaceSviFeatureTemplateIpv4VrrpResult']:
        """
        Enable VRRP
        """
        return pulumi.get(self, "ipv4_vrrps")

    @_builtins.property
    @pulumi.getter(name="ipv6AccessLists")
    def ipv6_access_lists(self) -> Sequence['outputs.GetVpnInterfaceSviFeatureTemplateIpv6AccessListResult']:
        """
        Apply ACL
        """
        return pulumi.get(self, "ipv6_access_lists")

    @_builtins.property
    @pulumi.getter(name="ipv6Address")
    def ipv6_address(self) -> _builtins.str:
        """
        Assign IPv6 address
        """
        return pulumi.get(self, "ipv6_address")

    @_builtins.property
    @pulumi.getter(name="ipv6AddressVariable")
    def ipv6_address_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "ipv6_address_variable")

    @_builtins.property
    @pulumi.getter(name="ipv6DhcpClient")
    def ipv6_dhcp_client(self) -> _builtins.bool:
        """
        Enable DHCPv6
        """
        return pulumi.get(self, "ipv6_dhcp_client")

    @_builtins.property
    @pulumi.getter(name="ipv6DhcpClientVariable")
    def ipv6_dhcp_client_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "ipv6_dhcp_client_variable")

    @_builtins.property
    @pulumi.getter(name="ipv6DhcpDistance")
    def ipv6_dhcp_distance(self) -> _builtins.int:
        """
        Set administrative distance for DHCP default route
        """
        return pulumi.get(self, "ipv6_dhcp_distance")

    @_builtins.property
    @pulumi.getter(name="ipv6DhcpDistanceVariable")
    def ipv6_dhcp_distance_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "ipv6_dhcp_distance_variable")

    @_builtins.property
    @pulumi.getter(name="ipv6DhcpHelpers")
    def ipv6_dhcp_helpers(self) -> Sequence['outputs.GetVpnInterfaceSviFeatureTemplateIpv6DhcpHelperResult']:
        """
        DHCPv6 Helper
        """
        return pulumi.get(self, "ipv6_dhcp_helpers")

    @_builtins.property
    @pulumi.getter(name="ipv6DhcpRapidCommit")
    def ipv6_dhcp_rapid_commit(self) -> _builtins.bool:
        """
        Enable DHCPv6 rapid commit
        """
        return pulumi.get(self, "ipv6_dhcp_rapid_commit")

    @_builtins.property
    @pulumi.getter(name="ipv6DhcpRapidCommitVariable")
    def ipv6_dhcp_rapid_commit_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "ipv6_dhcp_rapid_commit_variable")

    @_builtins.property
    @pulumi.getter(name="ipv6SecondaryAddresses")
    def ipv6_secondary_addresses(self) -> Sequence['outputs.GetVpnInterfaceSviFeatureTemplateIpv6SecondaryAddressResult']:
        """
        Assign secondary IPv6 addresses
        """
        return pulumi.get(self, "ipv6_secondary_addresses")

    @_builtins.property
    @pulumi.getter(name="ipv6Vrrps")
    def ipv6_vrrps(self) -> Sequence['outputs.GetVpnInterfaceSviFeatureTemplateIpv6VrrpResult']:
        """
        Enable VRRP
        """
        return pulumi.get(self, "ipv6_vrrps")

    @_builtins.property
    @pulumi.getter
    def mtu(self) -> _builtins.int:
        """
        Interface MTU \\n\\n in bytes
        """
        return pulumi.get(self, "mtu")

    @_builtins.property
    @pulumi.getter(name="mtuVariable")
    def mtu_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "mtu_variable")

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        """
        The name of the feature template
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def policers(self) -> Sequence['outputs.GetVpnInterfaceSviFeatureTemplatePolicerResult']:
        """
        Enable policer
        """
        return pulumi.get(self, "policers")

    @_builtins.property
    @pulumi.getter
    def shutdown(self) -> _builtins.bool:
        """
        Administrative state
        """
        return pulumi.get(self, "shutdown")

    @_builtins.property
    @pulumi.getter(name="shutdownVariable")
    def shutdown_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "shutdown_variable")

    @_builtins.property
    @pulumi.getter(name="staticArpEntries")
    def static_arp_entries(self) -> Sequence['outputs.GetVpnInterfaceSviFeatureTemplateStaticArpEntryResult']:
        """
        Configure static ARP entries
        """
        return pulumi.get(self, "static_arp_entries")

    @_builtins.property
    @pulumi.getter(name="tcpMssAdjust")
    def tcp_mss_adjust(self) -> _builtins.int:
        """
        TCP MSS on SYN packets, in bytes
        """
        return pulumi.get(self, "tcp_mss_adjust")

    @_builtins.property
    @pulumi.getter(name="tcpMssAdjustVariable")
    def tcp_mss_adjust_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "tcp_mss_adjust_variable")

    @_builtins.property
    @pulumi.getter(name="templateType")
    def template_type(self) -> _builtins.str:
        """
        The template type
        """
        return pulumi.get(self, "template_type")

    @_builtins.property
    @pulumi.getter
    def version(self) -> _builtins.int:
        """
        The version of the feature template
        """
        return pulumi.get(self, "version")


class AwaitableGetVpnInterfaceSviFeatureTemplateResult(GetVpnInterfaceSviFeatureTemplateResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetVpnInterfaceSviFeatureTemplateResult(
            arp_timeout=self.arp_timeout,
            arp_timeout_variable=self.arp_timeout_variable,
            description=self.description,
            device_types=self.device_types,
            id=self.id,
            if_name=self.if_name,
            if_name_variable=self.if_name_variable,
            interface_description=self.interface_description,
            interface_description_variable=self.interface_description_variable,
            ip_directed_broadcast=self.ip_directed_broadcast,
            ip_directed_broadcast_variable=self.ip_directed_broadcast_variable,
            ip_mtu=self.ip_mtu,
            ip_mtu_variable=self.ip_mtu_variable,
            ipv4_access_lists=self.ipv4_access_lists,
            ipv4_address=self.ipv4_address,
            ipv4_address_variable=self.ipv4_address_variable,
            ipv4_dhcp_helper_variable=self.ipv4_dhcp_helper_variable,
            ipv4_dhcp_helpers=self.ipv4_dhcp_helpers,
            ipv4_secondary_addresses=self.ipv4_secondary_addresses,
            ipv4_vrrps=self.ipv4_vrrps,
            ipv6_access_lists=self.ipv6_access_lists,
            ipv6_address=self.ipv6_address,
            ipv6_address_variable=self.ipv6_address_variable,
            ipv6_dhcp_client=self.ipv6_dhcp_client,
            ipv6_dhcp_client_variable=self.ipv6_dhcp_client_variable,
            ipv6_dhcp_distance=self.ipv6_dhcp_distance,
            ipv6_dhcp_distance_variable=self.ipv6_dhcp_distance_variable,
            ipv6_dhcp_helpers=self.ipv6_dhcp_helpers,
            ipv6_dhcp_rapid_commit=self.ipv6_dhcp_rapid_commit,
            ipv6_dhcp_rapid_commit_variable=self.ipv6_dhcp_rapid_commit_variable,
            ipv6_secondary_addresses=self.ipv6_secondary_addresses,
            ipv6_vrrps=self.ipv6_vrrps,
            mtu=self.mtu,
            mtu_variable=self.mtu_variable,
            name=self.name,
            policers=self.policers,
            shutdown=self.shutdown,
            shutdown_variable=self.shutdown_variable,
            static_arp_entries=self.static_arp_entries,
            tcp_mss_adjust=self.tcp_mss_adjust,
            tcp_mss_adjust_variable=self.tcp_mss_adjust_variable,
            template_type=self.template_type,
            version=self.version)


def get_vpn_interface_svi_feature_template(id: Optional[_builtins.str] = None,
                                           name: Optional[_builtins.str] = None,
                                           opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetVpnInterfaceSviFeatureTemplateResult:
    """
    This data source can read the VPN Interface SVI feature template.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_sdwan as sdwan

    example = sdwan.get_vpn_interface_svi_feature_template(id="f6b2c44c-693c-4763-b010-895aa3d236bd")
    ```


    :param _builtins.str id: The id of the feature template
    :param _builtins.str name: The name of the feature template
    """
    __args__ = dict()
    __args__['id'] = id
    __args__['name'] = name
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('sdwan:index/getVpnInterfaceSviFeatureTemplate:getVpnInterfaceSviFeatureTemplate', __args__, opts=opts, typ=GetVpnInterfaceSviFeatureTemplateResult).value

    return AwaitableGetVpnInterfaceSviFeatureTemplateResult(
        arp_timeout=pulumi.get(__ret__, 'arp_timeout'),
        arp_timeout_variable=pulumi.get(__ret__, 'arp_timeout_variable'),
        description=pulumi.get(__ret__, 'description'),
        device_types=pulumi.get(__ret__, 'device_types'),
        id=pulumi.get(__ret__, 'id'),
        if_name=pulumi.get(__ret__, 'if_name'),
        if_name_variable=pulumi.get(__ret__, 'if_name_variable'),
        interface_description=pulumi.get(__ret__, 'interface_description'),
        interface_description_variable=pulumi.get(__ret__, 'interface_description_variable'),
        ip_directed_broadcast=pulumi.get(__ret__, 'ip_directed_broadcast'),
        ip_directed_broadcast_variable=pulumi.get(__ret__, 'ip_directed_broadcast_variable'),
        ip_mtu=pulumi.get(__ret__, 'ip_mtu'),
        ip_mtu_variable=pulumi.get(__ret__, 'ip_mtu_variable'),
        ipv4_access_lists=pulumi.get(__ret__, 'ipv4_access_lists'),
        ipv4_address=pulumi.get(__ret__, 'ipv4_address'),
        ipv4_address_variable=pulumi.get(__ret__, 'ipv4_address_variable'),
        ipv4_dhcp_helper_variable=pulumi.get(__ret__, 'ipv4_dhcp_helper_variable'),
        ipv4_dhcp_helpers=pulumi.get(__ret__, 'ipv4_dhcp_helpers'),
        ipv4_secondary_addresses=pulumi.get(__ret__, 'ipv4_secondary_addresses'),
        ipv4_vrrps=pulumi.get(__ret__, 'ipv4_vrrps'),
        ipv6_access_lists=pulumi.get(__ret__, 'ipv6_access_lists'),
        ipv6_address=pulumi.get(__ret__, 'ipv6_address'),
        ipv6_address_variable=pulumi.get(__ret__, 'ipv6_address_variable'),
        ipv6_dhcp_client=pulumi.get(__ret__, 'ipv6_dhcp_client'),
        ipv6_dhcp_client_variable=pulumi.get(__ret__, 'ipv6_dhcp_client_variable'),
        ipv6_dhcp_distance=pulumi.get(__ret__, 'ipv6_dhcp_distance'),
        ipv6_dhcp_distance_variable=pulumi.get(__ret__, 'ipv6_dhcp_distance_variable'),
        ipv6_dhcp_helpers=pulumi.get(__ret__, 'ipv6_dhcp_helpers'),
        ipv6_dhcp_rapid_commit=pulumi.get(__ret__, 'ipv6_dhcp_rapid_commit'),
        ipv6_dhcp_rapid_commit_variable=pulumi.get(__ret__, 'ipv6_dhcp_rapid_commit_variable'),
        ipv6_secondary_addresses=pulumi.get(__ret__, 'ipv6_secondary_addresses'),
        ipv6_vrrps=pulumi.get(__ret__, 'ipv6_vrrps'),
        mtu=pulumi.get(__ret__, 'mtu'),
        mtu_variable=pulumi.get(__ret__, 'mtu_variable'),
        name=pulumi.get(__ret__, 'name'),
        policers=pulumi.get(__ret__, 'policers'),
        shutdown=pulumi.get(__ret__, 'shutdown'),
        shutdown_variable=pulumi.get(__ret__, 'shutdown_variable'),
        static_arp_entries=pulumi.get(__ret__, 'static_arp_entries'),
        tcp_mss_adjust=pulumi.get(__ret__, 'tcp_mss_adjust'),
        tcp_mss_adjust_variable=pulumi.get(__ret__, 'tcp_mss_adjust_variable'),
        template_type=pulumi.get(__ret__, 'template_type'),
        version=pulumi.get(__ret__, 'version'))
def get_vpn_interface_svi_feature_template_output(id: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                                  name: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                                  opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetVpnInterfaceSviFeatureTemplateResult]:
    """
    This data source can read the VPN Interface SVI feature template.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_sdwan as sdwan

    example = sdwan.get_vpn_interface_svi_feature_template(id="f6b2c44c-693c-4763-b010-895aa3d236bd")
    ```


    :param _builtins.str id: The id of the feature template
    :param _builtins.str name: The name of the feature template
    """
    __args__ = dict()
    __args__['id'] = id
    __args__['name'] = name
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('sdwan:index/getVpnInterfaceSviFeatureTemplate:getVpnInterfaceSviFeatureTemplate', __args__, opts=opts, typ=GetVpnInterfaceSviFeatureTemplateResult)
    return __ret__.apply(lambda __response__: GetVpnInterfaceSviFeatureTemplateResult(
        arp_timeout=pulumi.get(__response__, 'arp_timeout'),
        arp_timeout_variable=pulumi.get(__response__, 'arp_timeout_variable'),
        description=pulumi.get(__response__, 'description'),
        device_types=pulumi.get(__response__, 'device_types'),
        id=pulumi.get(__response__, 'id'),
        if_name=pulumi.get(__response__, 'if_name'),
        if_name_variable=pulumi.get(__response__, 'if_name_variable'),
        interface_description=pulumi.get(__response__, 'interface_description'),
        interface_description_variable=pulumi.get(__response__, 'interface_description_variable'),
        ip_directed_broadcast=pulumi.get(__response__, 'ip_directed_broadcast'),
        ip_directed_broadcast_variable=pulumi.get(__response__, 'ip_directed_broadcast_variable'),
        ip_mtu=pulumi.get(__response__, 'ip_mtu'),
        ip_mtu_variable=pulumi.get(__response__, 'ip_mtu_variable'),
        ipv4_access_lists=pulumi.get(__response__, 'ipv4_access_lists'),
        ipv4_address=pulumi.get(__response__, 'ipv4_address'),
        ipv4_address_variable=pulumi.get(__response__, 'ipv4_address_variable'),
        ipv4_dhcp_helper_variable=pulumi.get(__response__, 'ipv4_dhcp_helper_variable'),
        ipv4_dhcp_helpers=pulumi.get(__response__, 'ipv4_dhcp_helpers'),
        ipv4_secondary_addresses=pulumi.get(__response__, 'ipv4_secondary_addresses'),
        ipv4_vrrps=pulumi.get(__response__, 'ipv4_vrrps'),
        ipv6_access_lists=pulumi.get(__response__, 'ipv6_access_lists'),
        ipv6_address=pulumi.get(__response__, 'ipv6_address'),
        ipv6_address_variable=pulumi.get(__response__, 'ipv6_address_variable'),
        ipv6_dhcp_client=pulumi.get(__response__, 'ipv6_dhcp_client'),
        ipv6_dhcp_client_variable=pulumi.get(__response__, 'ipv6_dhcp_client_variable'),
        ipv6_dhcp_distance=pulumi.get(__response__, 'ipv6_dhcp_distance'),
        ipv6_dhcp_distance_variable=pulumi.get(__response__, 'ipv6_dhcp_distance_variable'),
        ipv6_dhcp_helpers=pulumi.get(__response__, 'ipv6_dhcp_helpers'),
        ipv6_dhcp_rapid_commit=pulumi.get(__response__, 'ipv6_dhcp_rapid_commit'),
        ipv6_dhcp_rapid_commit_variable=pulumi.get(__response__, 'ipv6_dhcp_rapid_commit_variable'),
        ipv6_secondary_addresses=pulumi.get(__response__, 'ipv6_secondary_addresses'),
        ipv6_vrrps=pulumi.get(__response__, 'ipv6_vrrps'),
        mtu=pulumi.get(__response__, 'mtu'),
        mtu_variable=pulumi.get(__response__, 'mtu_variable'),
        name=pulumi.get(__response__, 'name'),
        policers=pulumi.get(__response__, 'policers'),
        shutdown=pulumi.get(__response__, 'shutdown'),
        shutdown_variable=pulumi.get(__response__, 'shutdown_variable'),
        static_arp_entries=pulumi.get(__response__, 'static_arp_entries'),
        tcp_mss_adjust=pulumi.get(__response__, 'tcp_mss_adjust'),
        tcp_mss_adjust_variable=pulumi.get(__response__, 'tcp_mss_adjust_variable'),
        template_type=pulumi.get(__response__, 'template_type'),
        version=pulumi.get(__response__, 'version')))
