# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities

__all__ = [
    'GetTransportWanVpnInterfaceIpsecFeatureResult',
    'AwaitableGetTransportWanVpnInterfaceIpsecFeatureResult',
    'get_transport_wan_vpn_interface_ipsec_feature',
    'get_transport_wan_vpn_interface_ipsec_feature_output',
]

@pulumi.output_type
class GetTransportWanVpnInterfaceIpsecFeatureResult:
    """
    A collection of values returned by getTransportWanVpnInterfaceIpsecFeature.
    """
    def __init__(__self__, application_tunnel_type=None, application_tunnel_type_variable=None, clear_dont_fragment=None, clear_dont_fragment_variable=None, description=None, dpd_interval=None, dpd_interval_variable=None, dpd_retries=None, dpd_retries_variable=None, feature_profile_id=None, id=None, ike_ciphersuite=None, ike_ciphersuite_variable=None, ike_diffie_hellman_group=None, ike_diffie_hellman_group_variable=None, ike_id_local_end_point=None, ike_id_local_end_point_variable=None, ike_id_remote_end_point=None, ike_id_remote_end_point_variable=None, ike_integrity_protocol=None, ike_integrity_protocol_variable=None, ike_preshared_key=None, ike_preshared_key_variable=None, ike_rekey_interval=None, ike_rekey_interval_variable=None, ike_version=None, interface_description=None, interface_description_variable=None, interface_name=None, interface_name_variable=None, ip_mtu=None, ip_mtu_variable=None, ipsec_ciphersuite=None, ipsec_ciphersuite_variable=None, ipsec_rekey_interval=None, ipsec_rekey_interval_variable=None, ipsec_replay_window=None, ipsec_replay_window_variable=None, ipv4_address=None, ipv4_address_variable=None, ipv4_subnet_mask=None, ipv4_subnet_mask_variable=None, name=None, perfect_forward_secrecy=None, perfect_forward_secrecy_variable=None, shutdown=None, shutdown_variable=None, tcp_mss=None, tcp_mss_variable=None, tracker_id=None, tracker_id_variable=None, transport_wan_vpn_feature_id=None, tunnel_destination_ipv4_address=None, tunnel_destination_ipv4_address_variable=None, tunnel_destination_ipv4_subnet_mask=None, tunnel_destination_ipv4_subnet_mask_variable=None, tunnel_route_via=None, tunnel_route_via_variable=None, tunnel_source_interface=None, tunnel_source_interface_variable=None, tunnel_source_ipv4_address=None, tunnel_source_ipv4_address_variable=None, tunnel_source_ipv4_subnet_mask=None, tunnel_source_ipv4_subnet_mask_variable=None, version=None):
        if application_tunnel_type and not isinstance(application_tunnel_type, str):
            raise TypeError("Expected argument 'application_tunnel_type' to be a str")
        pulumi.set(__self__, "application_tunnel_type", application_tunnel_type)
        if application_tunnel_type_variable and not isinstance(application_tunnel_type_variable, str):
            raise TypeError("Expected argument 'application_tunnel_type_variable' to be a str")
        pulumi.set(__self__, "application_tunnel_type_variable", application_tunnel_type_variable)
        if clear_dont_fragment and not isinstance(clear_dont_fragment, bool):
            raise TypeError("Expected argument 'clear_dont_fragment' to be a bool")
        pulumi.set(__self__, "clear_dont_fragment", clear_dont_fragment)
        if clear_dont_fragment_variable and not isinstance(clear_dont_fragment_variable, str):
            raise TypeError("Expected argument 'clear_dont_fragment_variable' to be a str")
        pulumi.set(__self__, "clear_dont_fragment_variable", clear_dont_fragment_variable)
        if description and not isinstance(description, str):
            raise TypeError("Expected argument 'description' to be a str")
        pulumi.set(__self__, "description", description)
        if dpd_interval and not isinstance(dpd_interval, int):
            raise TypeError("Expected argument 'dpd_interval' to be a int")
        pulumi.set(__self__, "dpd_interval", dpd_interval)
        if dpd_interval_variable and not isinstance(dpd_interval_variable, str):
            raise TypeError("Expected argument 'dpd_interval_variable' to be a str")
        pulumi.set(__self__, "dpd_interval_variable", dpd_interval_variable)
        if dpd_retries and not isinstance(dpd_retries, int):
            raise TypeError("Expected argument 'dpd_retries' to be a int")
        pulumi.set(__self__, "dpd_retries", dpd_retries)
        if dpd_retries_variable and not isinstance(dpd_retries_variable, str):
            raise TypeError("Expected argument 'dpd_retries_variable' to be a str")
        pulumi.set(__self__, "dpd_retries_variable", dpd_retries_variable)
        if feature_profile_id and not isinstance(feature_profile_id, str):
            raise TypeError("Expected argument 'feature_profile_id' to be a str")
        pulumi.set(__self__, "feature_profile_id", feature_profile_id)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if ike_ciphersuite and not isinstance(ike_ciphersuite, str):
            raise TypeError("Expected argument 'ike_ciphersuite' to be a str")
        pulumi.set(__self__, "ike_ciphersuite", ike_ciphersuite)
        if ike_ciphersuite_variable and not isinstance(ike_ciphersuite_variable, str):
            raise TypeError("Expected argument 'ike_ciphersuite_variable' to be a str")
        pulumi.set(__self__, "ike_ciphersuite_variable", ike_ciphersuite_variable)
        if ike_diffie_hellman_group and not isinstance(ike_diffie_hellman_group, str):
            raise TypeError("Expected argument 'ike_diffie_hellman_group' to be a str")
        pulumi.set(__self__, "ike_diffie_hellman_group", ike_diffie_hellman_group)
        if ike_diffie_hellman_group_variable and not isinstance(ike_diffie_hellman_group_variable, str):
            raise TypeError("Expected argument 'ike_diffie_hellman_group_variable' to be a str")
        pulumi.set(__self__, "ike_diffie_hellman_group_variable", ike_diffie_hellman_group_variable)
        if ike_id_local_end_point and not isinstance(ike_id_local_end_point, str):
            raise TypeError("Expected argument 'ike_id_local_end_point' to be a str")
        pulumi.set(__self__, "ike_id_local_end_point", ike_id_local_end_point)
        if ike_id_local_end_point_variable and not isinstance(ike_id_local_end_point_variable, str):
            raise TypeError("Expected argument 'ike_id_local_end_point_variable' to be a str")
        pulumi.set(__self__, "ike_id_local_end_point_variable", ike_id_local_end_point_variable)
        if ike_id_remote_end_point and not isinstance(ike_id_remote_end_point, str):
            raise TypeError("Expected argument 'ike_id_remote_end_point' to be a str")
        pulumi.set(__self__, "ike_id_remote_end_point", ike_id_remote_end_point)
        if ike_id_remote_end_point_variable and not isinstance(ike_id_remote_end_point_variable, str):
            raise TypeError("Expected argument 'ike_id_remote_end_point_variable' to be a str")
        pulumi.set(__self__, "ike_id_remote_end_point_variable", ike_id_remote_end_point_variable)
        if ike_integrity_protocol and not isinstance(ike_integrity_protocol, str):
            raise TypeError("Expected argument 'ike_integrity_protocol' to be a str")
        pulumi.set(__self__, "ike_integrity_protocol", ike_integrity_protocol)
        if ike_integrity_protocol_variable and not isinstance(ike_integrity_protocol_variable, str):
            raise TypeError("Expected argument 'ike_integrity_protocol_variable' to be a str")
        pulumi.set(__self__, "ike_integrity_protocol_variable", ike_integrity_protocol_variable)
        if ike_preshared_key and not isinstance(ike_preshared_key, str):
            raise TypeError("Expected argument 'ike_preshared_key' to be a str")
        pulumi.set(__self__, "ike_preshared_key", ike_preshared_key)
        if ike_preshared_key_variable and not isinstance(ike_preshared_key_variable, str):
            raise TypeError("Expected argument 'ike_preshared_key_variable' to be a str")
        pulumi.set(__self__, "ike_preshared_key_variable", ike_preshared_key_variable)
        if ike_rekey_interval and not isinstance(ike_rekey_interval, int):
            raise TypeError("Expected argument 'ike_rekey_interval' to be a int")
        pulumi.set(__self__, "ike_rekey_interval", ike_rekey_interval)
        if ike_rekey_interval_variable and not isinstance(ike_rekey_interval_variable, str):
            raise TypeError("Expected argument 'ike_rekey_interval_variable' to be a str")
        pulumi.set(__self__, "ike_rekey_interval_variable", ike_rekey_interval_variable)
        if ike_version and not isinstance(ike_version, int):
            raise TypeError("Expected argument 'ike_version' to be a int")
        pulumi.set(__self__, "ike_version", ike_version)
        if interface_description and not isinstance(interface_description, str):
            raise TypeError("Expected argument 'interface_description' to be a str")
        pulumi.set(__self__, "interface_description", interface_description)
        if interface_description_variable and not isinstance(interface_description_variable, str):
            raise TypeError("Expected argument 'interface_description_variable' to be a str")
        pulumi.set(__self__, "interface_description_variable", interface_description_variable)
        if interface_name and not isinstance(interface_name, str):
            raise TypeError("Expected argument 'interface_name' to be a str")
        pulumi.set(__self__, "interface_name", interface_name)
        if interface_name_variable and not isinstance(interface_name_variable, str):
            raise TypeError("Expected argument 'interface_name_variable' to be a str")
        pulumi.set(__self__, "interface_name_variable", interface_name_variable)
        if ip_mtu and not isinstance(ip_mtu, int):
            raise TypeError("Expected argument 'ip_mtu' to be a int")
        pulumi.set(__self__, "ip_mtu", ip_mtu)
        if ip_mtu_variable and not isinstance(ip_mtu_variable, str):
            raise TypeError("Expected argument 'ip_mtu_variable' to be a str")
        pulumi.set(__self__, "ip_mtu_variable", ip_mtu_variable)
        if ipsec_ciphersuite and not isinstance(ipsec_ciphersuite, str):
            raise TypeError("Expected argument 'ipsec_ciphersuite' to be a str")
        pulumi.set(__self__, "ipsec_ciphersuite", ipsec_ciphersuite)
        if ipsec_ciphersuite_variable and not isinstance(ipsec_ciphersuite_variable, str):
            raise TypeError("Expected argument 'ipsec_ciphersuite_variable' to be a str")
        pulumi.set(__self__, "ipsec_ciphersuite_variable", ipsec_ciphersuite_variable)
        if ipsec_rekey_interval and not isinstance(ipsec_rekey_interval, int):
            raise TypeError("Expected argument 'ipsec_rekey_interval' to be a int")
        pulumi.set(__self__, "ipsec_rekey_interval", ipsec_rekey_interval)
        if ipsec_rekey_interval_variable and not isinstance(ipsec_rekey_interval_variable, str):
            raise TypeError("Expected argument 'ipsec_rekey_interval_variable' to be a str")
        pulumi.set(__self__, "ipsec_rekey_interval_variable", ipsec_rekey_interval_variable)
        if ipsec_replay_window and not isinstance(ipsec_replay_window, int):
            raise TypeError("Expected argument 'ipsec_replay_window' to be a int")
        pulumi.set(__self__, "ipsec_replay_window", ipsec_replay_window)
        if ipsec_replay_window_variable and not isinstance(ipsec_replay_window_variable, str):
            raise TypeError("Expected argument 'ipsec_replay_window_variable' to be a str")
        pulumi.set(__self__, "ipsec_replay_window_variable", ipsec_replay_window_variable)
        if ipv4_address and not isinstance(ipv4_address, str):
            raise TypeError("Expected argument 'ipv4_address' to be a str")
        pulumi.set(__self__, "ipv4_address", ipv4_address)
        if ipv4_address_variable and not isinstance(ipv4_address_variable, str):
            raise TypeError("Expected argument 'ipv4_address_variable' to be a str")
        pulumi.set(__self__, "ipv4_address_variable", ipv4_address_variable)
        if ipv4_subnet_mask and not isinstance(ipv4_subnet_mask, str):
            raise TypeError("Expected argument 'ipv4_subnet_mask' to be a str")
        pulumi.set(__self__, "ipv4_subnet_mask", ipv4_subnet_mask)
        if ipv4_subnet_mask_variable and not isinstance(ipv4_subnet_mask_variable, str):
            raise TypeError("Expected argument 'ipv4_subnet_mask_variable' to be a str")
        pulumi.set(__self__, "ipv4_subnet_mask_variable", ipv4_subnet_mask_variable)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)
        if perfect_forward_secrecy and not isinstance(perfect_forward_secrecy, str):
            raise TypeError("Expected argument 'perfect_forward_secrecy' to be a str")
        pulumi.set(__self__, "perfect_forward_secrecy", perfect_forward_secrecy)
        if perfect_forward_secrecy_variable and not isinstance(perfect_forward_secrecy_variable, str):
            raise TypeError("Expected argument 'perfect_forward_secrecy_variable' to be a str")
        pulumi.set(__self__, "perfect_forward_secrecy_variable", perfect_forward_secrecy_variable)
        if shutdown and not isinstance(shutdown, bool):
            raise TypeError("Expected argument 'shutdown' to be a bool")
        pulumi.set(__self__, "shutdown", shutdown)
        if shutdown_variable and not isinstance(shutdown_variable, str):
            raise TypeError("Expected argument 'shutdown_variable' to be a str")
        pulumi.set(__self__, "shutdown_variable", shutdown_variable)
        if tcp_mss and not isinstance(tcp_mss, int):
            raise TypeError("Expected argument 'tcp_mss' to be a int")
        pulumi.set(__self__, "tcp_mss", tcp_mss)
        if tcp_mss_variable and not isinstance(tcp_mss_variable, str):
            raise TypeError("Expected argument 'tcp_mss_variable' to be a str")
        pulumi.set(__self__, "tcp_mss_variable", tcp_mss_variable)
        if tracker_id and not isinstance(tracker_id, str):
            raise TypeError("Expected argument 'tracker_id' to be a str")
        pulumi.set(__self__, "tracker_id", tracker_id)
        if tracker_id_variable and not isinstance(tracker_id_variable, str):
            raise TypeError("Expected argument 'tracker_id_variable' to be a str")
        pulumi.set(__self__, "tracker_id_variable", tracker_id_variable)
        if transport_wan_vpn_feature_id and not isinstance(transport_wan_vpn_feature_id, str):
            raise TypeError("Expected argument 'transport_wan_vpn_feature_id' to be a str")
        pulumi.set(__self__, "transport_wan_vpn_feature_id", transport_wan_vpn_feature_id)
        if tunnel_destination_ipv4_address and not isinstance(tunnel_destination_ipv4_address, str):
            raise TypeError("Expected argument 'tunnel_destination_ipv4_address' to be a str")
        pulumi.set(__self__, "tunnel_destination_ipv4_address", tunnel_destination_ipv4_address)
        if tunnel_destination_ipv4_address_variable and not isinstance(tunnel_destination_ipv4_address_variable, str):
            raise TypeError("Expected argument 'tunnel_destination_ipv4_address_variable' to be a str")
        pulumi.set(__self__, "tunnel_destination_ipv4_address_variable", tunnel_destination_ipv4_address_variable)
        if tunnel_destination_ipv4_subnet_mask and not isinstance(tunnel_destination_ipv4_subnet_mask, str):
            raise TypeError("Expected argument 'tunnel_destination_ipv4_subnet_mask' to be a str")
        pulumi.set(__self__, "tunnel_destination_ipv4_subnet_mask", tunnel_destination_ipv4_subnet_mask)
        if tunnel_destination_ipv4_subnet_mask_variable and not isinstance(tunnel_destination_ipv4_subnet_mask_variable, str):
            raise TypeError("Expected argument 'tunnel_destination_ipv4_subnet_mask_variable' to be a str")
        pulumi.set(__self__, "tunnel_destination_ipv4_subnet_mask_variable", tunnel_destination_ipv4_subnet_mask_variable)
        if tunnel_route_via and not isinstance(tunnel_route_via, str):
            raise TypeError("Expected argument 'tunnel_route_via' to be a str")
        pulumi.set(__self__, "tunnel_route_via", tunnel_route_via)
        if tunnel_route_via_variable and not isinstance(tunnel_route_via_variable, str):
            raise TypeError("Expected argument 'tunnel_route_via_variable' to be a str")
        pulumi.set(__self__, "tunnel_route_via_variable", tunnel_route_via_variable)
        if tunnel_source_interface and not isinstance(tunnel_source_interface, str):
            raise TypeError("Expected argument 'tunnel_source_interface' to be a str")
        pulumi.set(__self__, "tunnel_source_interface", tunnel_source_interface)
        if tunnel_source_interface_variable and not isinstance(tunnel_source_interface_variable, str):
            raise TypeError("Expected argument 'tunnel_source_interface_variable' to be a str")
        pulumi.set(__self__, "tunnel_source_interface_variable", tunnel_source_interface_variable)
        if tunnel_source_ipv4_address and not isinstance(tunnel_source_ipv4_address, str):
            raise TypeError("Expected argument 'tunnel_source_ipv4_address' to be a str")
        pulumi.set(__self__, "tunnel_source_ipv4_address", tunnel_source_ipv4_address)
        if tunnel_source_ipv4_address_variable and not isinstance(tunnel_source_ipv4_address_variable, str):
            raise TypeError("Expected argument 'tunnel_source_ipv4_address_variable' to be a str")
        pulumi.set(__self__, "tunnel_source_ipv4_address_variable", tunnel_source_ipv4_address_variable)
        if tunnel_source_ipv4_subnet_mask and not isinstance(tunnel_source_ipv4_subnet_mask, str):
            raise TypeError("Expected argument 'tunnel_source_ipv4_subnet_mask' to be a str")
        pulumi.set(__self__, "tunnel_source_ipv4_subnet_mask", tunnel_source_ipv4_subnet_mask)
        if tunnel_source_ipv4_subnet_mask_variable and not isinstance(tunnel_source_ipv4_subnet_mask_variable, str):
            raise TypeError("Expected argument 'tunnel_source_ipv4_subnet_mask_variable' to be a str")
        pulumi.set(__self__, "tunnel_source_ipv4_subnet_mask_variable", tunnel_source_ipv4_subnet_mask_variable)
        if version and not isinstance(version, int):
            raise TypeError("Expected argument 'version' to be a int")
        pulumi.set(__self__, "version", version)

    @_builtins.property
    @pulumi.getter(name="applicationTunnelType")
    def application_tunnel_type(self) -> _builtins.str:
        """
        Enable Application Tunnel Type
        """
        return pulumi.get(self, "application_tunnel_type")

    @_builtins.property
    @pulumi.getter(name="applicationTunnelTypeVariable")
    def application_tunnel_type_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "application_tunnel_type_variable")

    @_builtins.property
    @pulumi.getter(name="clearDontFragment")
    def clear_dont_fragment(self) -> _builtins.bool:
        """
        Enable clear dont fragment (Currently Only SDWAN Tunnel Interface)
        """
        return pulumi.get(self, "clear_dont_fragment")

    @_builtins.property
    @pulumi.getter(name="clearDontFragmentVariable")
    def clear_dont_fragment_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "clear_dont_fragment_variable")

    @_builtins.property
    @pulumi.getter
    def description(self) -> _builtins.str:
        """
        The description of the Feature
        """
        return pulumi.get(self, "description")

    @_builtins.property
    @pulumi.getter(name="dpdInterval")
    def dpd_interval(self) -> _builtins.int:
        """
        IKE keepalive interval (seconds)
        """
        return pulumi.get(self, "dpd_interval")

    @_builtins.property
    @pulumi.getter(name="dpdIntervalVariable")
    def dpd_interval_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "dpd_interval_variable")

    @_builtins.property
    @pulumi.getter(name="dpdRetries")
    def dpd_retries(self) -> _builtins.int:
        """
        IKE keepalive retries
        """
        return pulumi.get(self, "dpd_retries")

    @_builtins.property
    @pulumi.getter(name="dpdRetriesVariable")
    def dpd_retries_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "dpd_retries_variable")

    @_builtins.property
    @pulumi.getter(name="featureProfileId")
    def feature_profile_id(self) -> _builtins.str:
        """
        Feature Profile ID
        """
        return pulumi.get(self, "feature_profile_id")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        The id of the Feature
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter(name="ikeCiphersuite")
    def ike_ciphersuite(self) -> _builtins.str:
        """
        IKE identity the IKE preshared secret belongs to
        """
        return pulumi.get(self, "ike_ciphersuite")

    @_builtins.property
    @pulumi.getter(name="ikeCiphersuiteVariable")
    def ike_ciphersuite_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "ike_ciphersuite_variable")

    @_builtins.property
    @pulumi.getter(name="ikeDiffieHellmanGroup")
    def ike_diffie_hellman_group(self) -> _builtins.str:
        """
        IKE Diffie Hellman Groups
        """
        return pulumi.get(self, "ike_diffie_hellman_group")

    @_builtins.property
    @pulumi.getter(name="ikeDiffieHellmanGroupVariable")
    def ike_diffie_hellman_group_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "ike_diffie_hellman_group_variable")

    @_builtins.property
    @pulumi.getter(name="ikeIdLocalEndPoint")
    def ike_id_local_end_point(self) -> _builtins.str:
        """
        IKE ID for the local endpoint. Input IPv4 address, domain name, or email address
        """
        return pulumi.get(self, "ike_id_local_end_point")

    @_builtins.property
    @pulumi.getter(name="ikeIdLocalEndPointVariable")
    def ike_id_local_end_point_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "ike_id_local_end_point_variable")

    @_builtins.property
    @pulumi.getter(name="ikeIdRemoteEndPoint")
    def ike_id_remote_end_point(self) -> _builtins.str:
        """
        IKE ID for the remote endpoint. Input IPv4 address, domain name, or email address
        """
        return pulumi.get(self, "ike_id_remote_end_point")

    @_builtins.property
    @pulumi.getter(name="ikeIdRemoteEndPointVariable")
    def ike_id_remote_end_point_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "ike_id_remote_end_point_variable")

    @_builtins.property
    @pulumi.getter(name="ikeIntegrityProtocol")
    def ike_integrity_protocol(self) -> _builtins.str:
        """
        IKE integrity protocol
        """
        return pulumi.get(self, "ike_integrity_protocol")

    @_builtins.property
    @pulumi.getter(name="ikeIntegrityProtocolVariable")
    def ike_integrity_protocol_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "ike_integrity_protocol_variable")

    @_builtins.property
    @pulumi.getter(name="ikePresharedKey")
    def ike_preshared_key(self) -> _builtins.str:
        """
        Use preshared key to authenticate IKE peer
        """
        return pulumi.get(self, "ike_preshared_key")

    @_builtins.property
    @pulumi.getter(name="ikePresharedKeyVariable")
    def ike_preshared_key_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "ike_preshared_key_variable")

    @_builtins.property
    @pulumi.getter(name="ikeRekeyInterval")
    def ike_rekey_interval(self) -> _builtins.int:
        """
        IKE rekey interval \\n\\n seconds
        """
        return pulumi.get(self, "ike_rekey_interval")

    @_builtins.property
    @pulumi.getter(name="ikeRekeyIntervalVariable")
    def ike_rekey_interval_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "ike_rekey_interval_variable")

    @_builtins.property
    @pulumi.getter(name="ikeVersion")
    def ike_version(self) -> _builtins.int:
        """
        IKE Version \\n\\n
        """
        return pulumi.get(self, "ike_version")

    @_builtins.property
    @pulumi.getter(name="interfaceDescription")
    def interface_description(self) -> _builtins.str:
        """
        Interface description
        """
        return pulumi.get(self, "interface_description")

    @_builtins.property
    @pulumi.getter(name="interfaceDescriptionVariable")
    def interface_description_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "interface_description_variable")

    @_builtins.property
    @pulumi.getter(name="interfaceName")
    def interface_name(self) -> _builtins.str:
        """
        Interface name: IPsec when present
        """
        return pulumi.get(self, "interface_name")

    @_builtins.property
    @pulumi.getter(name="interfaceNameVariable")
    def interface_name_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "interface_name_variable")

    @_builtins.property
    @pulumi.getter(name="ipMtu")
    def ip_mtu(self) -> _builtins.int:
        """
        Interface MTU \\n\\n, in bytes
        """
        return pulumi.get(self, "ip_mtu")

    @_builtins.property
    @pulumi.getter(name="ipMtuVariable")
    def ip_mtu_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "ip_mtu_variable")

    @_builtins.property
    @pulumi.getter(name="ipsecCiphersuite")
    def ipsec_ciphersuite(self) -> _builtins.str:
        """
        IPsec(ESP) encryption and integrity protocol
        """
        return pulumi.get(self, "ipsec_ciphersuite")

    @_builtins.property
    @pulumi.getter(name="ipsecCiphersuiteVariable")
    def ipsec_ciphersuite_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "ipsec_ciphersuite_variable")

    @_builtins.property
    @pulumi.getter(name="ipsecRekeyInterval")
    def ipsec_rekey_interval(self) -> _builtins.int:
        """
        IPsec rekey interval \\n\\n seconds
        """
        return pulumi.get(self, "ipsec_rekey_interval")

    @_builtins.property
    @pulumi.getter(name="ipsecRekeyIntervalVariable")
    def ipsec_rekey_interval_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "ipsec_rekey_interval_variable")

    @_builtins.property
    @pulumi.getter(name="ipsecReplayWindow")
    def ipsec_replay_window(self) -> _builtins.int:
        """
        Replay window size 32..8192 (must be a power of 2)
        """
        return pulumi.get(self, "ipsec_replay_window")

    @_builtins.property
    @pulumi.getter(name="ipsecReplayWindowVariable")
    def ipsec_replay_window_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "ipsec_replay_window_variable")

    @_builtins.property
    @pulumi.getter(name="ipv4Address")
    def ipv4_address(self) -> _builtins.str:
        return pulumi.get(self, "ipv4_address")

    @_builtins.property
    @pulumi.getter(name="ipv4AddressVariable")
    def ipv4_address_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "ipv4_address_variable")

    @_builtins.property
    @pulumi.getter(name="ipv4SubnetMask")
    def ipv4_subnet_mask(self) -> _builtins.str:
        return pulumi.get(self, "ipv4_subnet_mask")

    @_builtins.property
    @pulumi.getter(name="ipv4SubnetMaskVariable")
    def ipv4_subnet_mask_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "ipv4_subnet_mask_variable")

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        """
        The name of the Feature
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter(name="perfectForwardSecrecy")
    def perfect_forward_secrecy(self) -> _builtins.str:
        """
        IPsec perfect forward secrecy settings
        """
        return pulumi.get(self, "perfect_forward_secrecy")

    @_builtins.property
    @pulumi.getter(name="perfectForwardSecrecyVariable")
    def perfect_forward_secrecy_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "perfect_forward_secrecy_variable")

    @_builtins.property
    @pulumi.getter
    def shutdown(self) -> _builtins.bool:
        """
        Administrative state
        """
        return pulumi.get(self, "shutdown")

    @_builtins.property
    @pulumi.getter(name="shutdownVariable")
    def shutdown_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "shutdown_variable")

    @_builtins.property
    @pulumi.getter(name="tcpMss")
    def tcp_mss(self) -> _builtins.int:
        """
        TCP MSS on SYN packets, in bytes
        """
        return pulumi.get(self, "tcp_mss")

    @_builtins.property
    @pulumi.getter(name="tcpMssVariable")
    def tcp_mss_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "tcp_mss_variable")

    @_builtins.property
    @pulumi.getter(name="trackerId")
    def tracker_id(self) -> _builtins.str:
        """
        Enable tracker for this interface
        """
        return pulumi.get(self, "tracker_id")

    @_builtins.property
    @pulumi.getter(name="trackerIdVariable")
    def tracker_id_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "tracker_id_variable")

    @_builtins.property
    @pulumi.getter(name="transportWanVpnFeatureId")
    def transport_wan_vpn_feature_id(self) -> _builtins.str:
        """
        Transport WAN VPN Feature ID
        """
        return pulumi.get(self, "transport_wan_vpn_feature_id")

    @_builtins.property
    @pulumi.getter(name="tunnelDestinationIpv4Address")
    def tunnel_destination_ipv4_address(self) -> _builtins.str:
        return pulumi.get(self, "tunnel_destination_ipv4_address")

    @_builtins.property
    @pulumi.getter(name="tunnelDestinationIpv4AddressVariable")
    def tunnel_destination_ipv4_address_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "tunnel_destination_ipv4_address_variable")

    @_builtins.property
    @pulumi.getter(name="tunnelDestinationIpv4SubnetMask")
    def tunnel_destination_ipv4_subnet_mask(self) -> _builtins.str:
        return pulumi.get(self, "tunnel_destination_ipv4_subnet_mask")

    @_builtins.property
    @pulumi.getter(name="tunnelDestinationIpv4SubnetMaskVariable")
    def tunnel_destination_ipv4_subnet_mask_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "tunnel_destination_ipv4_subnet_mask_variable")

    @_builtins.property
    @pulumi.getter(name="tunnelRouteVia")
    def tunnel_route_via(self) -> _builtins.str:
        """
        \\n\\n Interface name: ge0/\\n\\n or ge0/\\n\\n.vlanid
        """
        return pulumi.get(self, "tunnel_route_via")

    @_builtins.property
    @pulumi.getter(name="tunnelRouteViaVariable")
    def tunnel_route_via_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "tunnel_route_via_variable")

    @_builtins.property
    @pulumi.getter(name="tunnelSourceInterface")
    def tunnel_source_interface(self) -> _builtins.str:
        """
        \\n\\n Interface name: ge0/\\n\\n or ge0/\\n\\n.vlanid
        """
        return pulumi.get(self, "tunnel_source_interface")

    @_builtins.property
    @pulumi.getter(name="tunnelSourceInterfaceVariable")
    def tunnel_source_interface_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "tunnel_source_interface_variable")

    @_builtins.property
    @pulumi.getter(name="tunnelSourceIpv4Address")
    def tunnel_source_ipv4_address(self) -> _builtins.str:
        return pulumi.get(self, "tunnel_source_ipv4_address")

    @_builtins.property
    @pulumi.getter(name="tunnelSourceIpv4AddressVariable")
    def tunnel_source_ipv4_address_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "tunnel_source_ipv4_address_variable")

    @_builtins.property
    @pulumi.getter(name="tunnelSourceIpv4SubnetMask")
    def tunnel_source_ipv4_subnet_mask(self) -> _builtins.str:
        return pulumi.get(self, "tunnel_source_ipv4_subnet_mask")

    @_builtins.property
    @pulumi.getter(name="tunnelSourceIpv4SubnetMaskVariable")
    def tunnel_source_ipv4_subnet_mask_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "tunnel_source_ipv4_subnet_mask_variable")

    @_builtins.property
    @pulumi.getter
    def version(self) -> _builtins.int:
        """
        The version of the Feature
        """
        return pulumi.get(self, "version")


class AwaitableGetTransportWanVpnInterfaceIpsecFeatureResult(GetTransportWanVpnInterfaceIpsecFeatureResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetTransportWanVpnInterfaceIpsecFeatureResult(
            application_tunnel_type=self.application_tunnel_type,
            application_tunnel_type_variable=self.application_tunnel_type_variable,
            clear_dont_fragment=self.clear_dont_fragment,
            clear_dont_fragment_variable=self.clear_dont_fragment_variable,
            description=self.description,
            dpd_interval=self.dpd_interval,
            dpd_interval_variable=self.dpd_interval_variable,
            dpd_retries=self.dpd_retries,
            dpd_retries_variable=self.dpd_retries_variable,
            feature_profile_id=self.feature_profile_id,
            id=self.id,
            ike_ciphersuite=self.ike_ciphersuite,
            ike_ciphersuite_variable=self.ike_ciphersuite_variable,
            ike_diffie_hellman_group=self.ike_diffie_hellman_group,
            ike_diffie_hellman_group_variable=self.ike_diffie_hellman_group_variable,
            ike_id_local_end_point=self.ike_id_local_end_point,
            ike_id_local_end_point_variable=self.ike_id_local_end_point_variable,
            ike_id_remote_end_point=self.ike_id_remote_end_point,
            ike_id_remote_end_point_variable=self.ike_id_remote_end_point_variable,
            ike_integrity_protocol=self.ike_integrity_protocol,
            ike_integrity_protocol_variable=self.ike_integrity_protocol_variable,
            ike_preshared_key=self.ike_preshared_key,
            ike_preshared_key_variable=self.ike_preshared_key_variable,
            ike_rekey_interval=self.ike_rekey_interval,
            ike_rekey_interval_variable=self.ike_rekey_interval_variable,
            ike_version=self.ike_version,
            interface_description=self.interface_description,
            interface_description_variable=self.interface_description_variable,
            interface_name=self.interface_name,
            interface_name_variable=self.interface_name_variable,
            ip_mtu=self.ip_mtu,
            ip_mtu_variable=self.ip_mtu_variable,
            ipsec_ciphersuite=self.ipsec_ciphersuite,
            ipsec_ciphersuite_variable=self.ipsec_ciphersuite_variable,
            ipsec_rekey_interval=self.ipsec_rekey_interval,
            ipsec_rekey_interval_variable=self.ipsec_rekey_interval_variable,
            ipsec_replay_window=self.ipsec_replay_window,
            ipsec_replay_window_variable=self.ipsec_replay_window_variable,
            ipv4_address=self.ipv4_address,
            ipv4_address_variable=self.ipv4_address_variable,
            ipv4_subnet_mask=self.ipv4_subnet_mask,
            ipv4_subnet_mask_variable=self.ipv4_subnet_mask_variable,
            name=self.name,
            perfect_forward_secrecy=self.perfect_forward_secrecy,
            perfect_forward_secrecy_variable=self.perfect_forward_secrecy_variable,
            shutdown=self.shutdown,
            shutdown_variable=self.shutdown_variable,
            tcp_mss=self.tcp_mss,
            tcp_mss_variable=self.tcp_mss_variable,
            tracker_id=self.tracker_id,
            tracker_id_variable=self.tracker_id_variable,
            transport_wan_vpn_feature_id=self.transport_wan_vpn_feature_id,
            tunnel_destination_ipv4_address=self.tunnel_destination_ipv4_address,
            tunnel_destination_ipv4_address_variable=self.tunnel_destination_ipv4_address_variable,
            tunnel_destination_ipv4_subnet_mask=self.tunnel_destination_ipv4_subnet_mask,
            tunnel_destination_ipv4_subnet_mask_variable=self.tunnel_destination_ipv4_subnet_mask_variable,
            tunnel_route_via=self.tunnel_route_via,
            tunnel_route_via_variable=self.tunnel_route_via_variable,
            tunnel_source_interface=self.tunnel_source_interface,
            tunnel_source_interface_variable=self.tunnel_source_interface_variable,
            tunnel_source_ipv4_address=self.tunnel_source_ipv4_address,
            tunnel_source_ipv4_address_variable=self.tunnel_source_ipv4_address_variable,
            tunnel_source_ipv4_subnet_mask=self.tunnel_source_ipv4_subnet_mask,
            tunnel_source_ipv4_subnet_mask_variable=self.tunnel_source_ipv4_subnet_mask_variable,
            version=self.version)


def get_transport_wan_vpn_interface_ipsec_feature(feature_profile_id: Optional[_builtins.str] = None,
                                                  id: Optional[_builtins.str] = None,
                                                  transport_wan_vpn_feature_id: Optional[_builtins.str] = None,
                                                  opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetTransportWanVpnInterfaceIpsecFeatureResult:
    """
    This data source can read the Transport WAN VPN Interface IPSEC Feature.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_sdwan as sdwan

    example = sdwan.get_transport_wan_vpn_interface_ipsec_feature(id="f6b2c44c-693c-4763-b010-895aa3d236bd",
        feature_profile_id="f6dd22c8-0b4f-496c-9a0b-6813d1f8b8ac",
        transport_wan_vpn_feature_id="140331f6-5418-4755-a059-13c77eb96037")
    ```


    :param _builtins.str feature_profile_id: Feature Profile ID
    :param _builtins.str id: The id of the Feature
    :param _builtins.str transport_wan_vpn_feature_id: Transport WAN VPN Feature ID
    """
    __args__ = dict()
    __args__['featureProfileId'] = feature_profile_id
    __args__['id'] = id
    __args__['transportWanVpnFeatureId'] = transport_wan_vpn_feature_id
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('sdwan:index/getTransportWanVpnInterfaceIpsecFeature:getTransportWanVpnInterfaceIpsecFeature', __args__, opts=opts, typ=GetTransportWanVpnInterfaceIpsecFeatureResult).value

    return AwaitableGetTransportWanVpnInterfaceIpsecFeatureResult(
        application_tunnel_type=pulumi.get(__ret__, 'application_tunnel_type'),
        application_tunnel_type_variable=pulumi.get(__ret__, 'application_tunnel_type_variable'),
        clear_dont_fragment=pulumi.get(__ret__, 'clear_dont_fragment'),
        clear_dont_fragment_variable=pulumi.get(__ret__, 'clear_dont_fragment_variable'),
        description=pulumi.get(__ret__, 'description'),
        dpd_interval=pulumi.get(__ret__, 'dpd_interval'),
        dpd_interval_variable=pulumi.get(__ret__, 'dpd_interval_variable'),
        dpd_retries=pulumi.get(__ret__, 'dpd_retries'),
        dpd_retries_variable=pulumi.get(__ret__, 'dpd_retries_variable'),
        feature_profile_id=pulumi.get(__ret__, 'feature_profile_id'),
        id=pulumi.get(__ret__, 'id'),
        ike_ciphersuite=pulumi.get(__ret__, 'ike_ciphersuite'),
        ike_ciphersuite_variable=pulumi.get(__ret__, 'ike_ciphersuite_variable'),
        ike_diffie_hellman_group=pulumi.get(__ret__, 'ike_diffie_hellman_group'),
        ike_diffie_hellman_group_variable=pulumi.get(__ret__, 'ike_diffie_hellman_group_variable'),
        ike_id_local_end_point=pulumi.get(__ret__, 'ike_id_local_end_point'),
        ike_id_local_end_point_variable=pulumi.get(__ret__, 'ike_id_local_end_point_variable'),
        ike_id_remote_end_point=pulumi.get(__ret__, 'ike_id_remote_end_point'),
        ike_id_remote_end_point_variable=pulumi.get(__ret__, 'ike_id_remote_end_point_variable'),
        ike_integrity_protocol=pulumi.get(__ret__, 'ike_integrity_protocol'),
        ike_integrity_protocol_variable=pulumi.get(__ret__, 'ike_integrity_protocol_variable'),
        ike_preshared_key=pulumi.get(__ret__, 'ike_preshared_key'),
        ike_preshared_key_variable=pulumi.get(__ret__, 'ike_preshared_key_variable'),
        ike_rekey_interval=pulumi.get(__ret__, 'ike_rekey_interval'),
        ike_rekey_interval_variable=pulumi.get(__ret__, 'ike_rekey_interval_variable'),
        ike_version=pulumi.get(__ret__, 'ike_version'),
        interface_description=pulumi.get(__ret__, 'interface_description'),
        interface_description_variable=pulumi.get(__ret__, 'interface_description_variable'),
        interface_name=pulumi.get(__ret__, 'interface_name'),
        interface_name_variable=pulumi.get(__ret__, 'interface_name_variable'),
        ip_mtu=pulumi.get(__ret__, 'ip_mtu'),
        ip_mtu_variable=pulumi.get(__ret__, 'ip_mtu_variable'),
        ipsec_ciphersuite=pulumi.get(__ret__, 'ipsec_ciphersuite'),
        ipsec_ciphersuite_variable=pulumi.get(__ret__, 'ipsec_ciphersuite_variable'),
        ipsec_rekey_interval=pulumi.get(__ret__, 'ipsec_rekey_interval'),
        ipsec_rekey_interval_variable=pulumi.get(__ret__, 'ipsec_rekey_interval_variable'),
        ipsec_replay_window=pulumi.get(__ret__, 'ipsec_replay_window'),
        ipsec_replay_window_variable=pulumi.get(__ret__, 'ipsec_replay_window_variable'),
        ipv4_address=pulumi.get(__ret__, 'ipv4_address'),
        ipv4_address_variable=pulumi.get(__ret__, 'ipv4_address_variable'),
        ipv4_subnet_mask=pulumi.get(__ret__, 'ipv4_subnet_mask'),
        ipv4_subnet_mask_variable=pulumi.get(__ret__, 'ipv4_subnet_mask_variable'),
        name=pulumi.get(__ret__, 'name'),
        perfect_forward_secrecy=pulumi.get(__ret__, 'perfect_forward_secrecy'),
        perfect_forward_secrecy_variable=pulumi.get(__ret__, 'perfect_forward_secrecy_variable'),
        shutdown=pulumi.get(__ret__, 'shutdown'),
        shutdown_variable=pulumi.get(__ret__, 'shutdown_variable'),
        tcp_mss=pulumi.get(__ret__, 'tcp_mss'),
        tcp_mss_variable=pulumi.get(__ret__, 'tcp_mss_variable'),
        tracker_id=pulumi.get(__ret__, 'tracker_id'),
        tracker_id_variable=pulumi.get(__ret__, 'tracker_id_variable'),
        transport_wan_vpn_feature_id=pulumi.get(__ret__, 'transport_wan_vpn_feature_id'),
        tunnel_destination_ipv4_address=pulumi.get(__ret__, 'tunnel_destination_ipv4_address'),
        tunnel_destination_ipv4_address_variable=pulumi.get(__ret__, 'tunnel_destination_ipv4_address_variable'),
        tunnel_destination_ipv4_subnet_mask=pulumi.get(__ret__, 'tunnel_destination_ipv4_subnet_mask'),
        tunnel_destination_ipv4_subnet_mask_variable=pulumi.get(__ret__, 'tunnel_destination_ipv4_subnet_mask_variable'),
        tunnel_route_via=pulumi.get(__ret__, 'tunnel_route_via'),
        tunnel_route_via_variable=pulumi.get(__ret__, 'tunnel_route_via_variable'),
        tunnel_source_interface=pulumi.get(__ret__, 'tunnel_source_interface'),
        tunnel_source_interface_variable=pulumi.get(__ret__, 'tunnel_source_interface_variable'),
        tunnel_source_ipv4_address=pulumi.get(__ret__, 'tunnel_source_ipv4_address'),
        tunnel_source_ipv4_address_variable=pulumi.get(__ret__, 'tunnel_source_ipv4_address_variable'),
        tunnel_source_ipv4_subnet_mask=pulumi.get(__ret__, 'tunnel_source_ipv4_subnet_mask'),
        tunnel_source_ipv4_subnet_mask_variable=pulumi.get(__ret__, 'tunnel_source_ipv4_subnet_mask_variable'),
        version=pulumi.get(__ret__, 'version'))
def get_transport_wan_vpn_interface_ipsec_feature_output(feature_profile_id: Optional[pulumi.Input[_builtins.str]] = None,
                                                         id: Optional[pulumi.Input[_builtins.str]] = None,
                                                         transport_wan_vpn_feature_id: Optional[pulumi.Input[_builtins.str]] = None,
                                                         opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetTransportWanVpnInterfaceIpsecFeatureResult]:
    """
    This data source can read the Transport WAN VPN Interface IPSEC Feature.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_sdwan as sdwan

    example = sdwan.get_transport_wan_vpn_interface_ipsec_feature(id="f6b2c44c-693c-4763-b010-895aa3d236bd",
        feature_profile_id="f6dd22c8-0b4f-496c-9a0b-6813d1f8b8ac",
        transport_wan_vpn_feature_id="140331f6-5418-4755-a059-13c77eb96037")
    ```


    :param _builtins.str feature_profile_id: Feature Profile ID
    :param _builtins.str id: The id of the Feature
    :param _builtins.str transport_wan_vpn_feature_id: Transport WAN VPN Feature ID
    """
    __args__ = dict()
    __args__['featureProfileId'] = feature_profile_id
    __args__['id'] = id
    __args__['transportWanVpnFeatureId'] = transport_wan_vpn_feature_id
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('sdwan:index/getTransportWanVpnInterfaceIpsecFeature:getTransportWanVpnInterfaceIpsecFeature', __args__, opts=opts, typ=GetTransportWanVpnInterfaceIpsecFeatureResult)
    return __ret__.apply(lambda __response__: GetTransportWanVpnInterfaceIpsecFeatureResult(
        application_tunnel_type=pulumi.get(__response__, 'application_tunnel_type'),
        application_tunnel_type_variable=pulumi.get(__response__, 'application_tunnel_type_variable'),
        clear_dont_fragment=pulumi.get(__response__, 'clear_dont_fragment'),
        clear_dont_fragment_variable=pulumi.get(__response__, 'clear_dont_fragment_variable'),
        description=pulumi.get(__response__, 'description'),
        dpd_interval=pulumi.get(__response__, 'dpd_interval'),
        dpd_interval_variable=pulumi.get(__response__, 'dpd_interval_variable'),
        dpd_retries=pulumi.get(__response__, 'dpd_retries'),
        dpd_retries_variable=pulumi.get(__response__, 'dpd_retries_variable'),
        feature_profile_id=pulumi.get(__response__, 'feature_profile_id'),
        id=pulumi.get(__response__, 'id'),
        ike_ciphersuite=pulumi.get(__response__, 'ike_ciphersuite'),
        ike_ciphersuite_variable=pulumi.get(__response__, 'ike_ciphersuite_variable'),
        ike_diffie_hellman_group=pulumi.get(__response__, 'ike_diffie_hellman_group'),
        ike_diffie_hellman_group_variable=pulumi.get(__response__, 'ike_diffie_hellman_group_variable'),
        ike_id_local_end_point=pulumi.get(__response__, 'ike_id_local_end_point'),
        ike_id_local_end_point_variable=pulumi.get(__response__, 'ike_id_local_end_point_variable'),
        ike_id_remote_end_point=pulumi.get(__response__, 'ike_id_remote_end_point'),
        ike_id_remote_end_point_variable=pulumi.get(__response__, 'ike_id_remote_end_point_variable'),
        ike_integrity_protocol=pulumi.get(__response__, 'ike_integrity_protocol'),
        ike_integrity_protocol_variable=pulumi.get(__response__, 'ike_integrity_protocol_variable'),
        ike_preshared_key=pulumi.get(__response__, 'ike_preshared_key'),
        ike_preshared_key_variable=pulumi.get(__response__, 'ike_preshared_key_variable'),
        ike_rekey_interval=pulumi.get(__response__, 'ike_rekey_interval'),
        ike_rekey_interval_variable=pulumi.get(__response__, 'ike_rekey_interval_variable'),
        ike_version=pulumi.get(__response__, 'ike_version'),
        interface_description=pulumi.get(__response__, 'interface_description'),
        interface_description_variable=pulumi.get(__response__, 'interface_description_variable'),
        interface_name=pulumi.get(__response__, 'interface_name'),
        interface_name_variable=pulumi.get(__response__, 'interface_name_variable'),
        ip_mtu=pulumi.get(__response__, 'ip_mtu'),
        ip_mtu_variable=pulumi.get(__response__, 'ip_mtu_variable'),
        ipsec_ciphersuite=pulumi.get(__response__, 'ipsec_ciphersuite'),
        ipsec_ciphersuite_variable=pulumi.get(__response__, 'ipsec_ciphersuite_variable'),
        ipsec_rekey_interval=pulumi.get(__response__, 'ipsec_rekey_interval'),
        ipsec_rekey_interval_variable=pulumi.get(__response__, 'ipsec_rekey_interval_variable'),
        ipsec_replay_window=pulumi.get(__response__, 'ipsec_replay_window'),
        ipsec_replay_window_variable=pulumi.get(__response__, 'ipsec_replay_window_variable'),
        ipv4_address=pulumi.get(__response__, 'ipv4_address'),
        ipv4_address_variable=pulumi.get(__response__, 'ipv4_address_variable'),
        ipv4_subnet_mask=pulumi.get(__response__, 'ipv4_subnet_mask'),
        ipv4_subnet_mask_variable=pulumi.get(__response__, 'ipv4_subnet_mask_variable'),
        name=pulumi.get(__response__, 'name'),
        perfect_forward_secrecy=pulumi.get(__response__, 'perfect_forward_secrecy'),
        perfect_forward_secrecy_variable=pulumi.get(__response__, 'perfect_forward_secrecy_variable'),
        shutdown=pulumi.get(__response__, 'shutdown'),
        shutdown_variable=pulumi.get(__response__, 'shutdown_variable'),
        tcp_mss=pulumi.get(__response__, 'tcp_mss'),
        tcp_mss_variable=pulumi.get(__response__, 'tcp_mss_variable'),
        tracker_id=pulumi.get(__response__, 'tracker_id'),
        tracker_id_variable=pulumi.get(__response__, 'tracker_id_variable'),
        transport_wan_vpn_feature_id=pulumi.get(__response__, 'transport_wan_vpn_feature_id'),
        tunnel_destination_ipv4_address=pulumi.get(__response__, 'tunnel_destination_ipv4_address'),
        tunnel_destination_ipv4_address_variable=pulumi.get(__response__, 'tunnel_destination_ipv4_address_variable'),
        tunnel_destination_ipv4_subnet_mask=pulumi.get(__response__, 'tunnel_destination_ipv4_subnet_mask'),
        tunnel_destination_ipv4_subnet_mask_variable=pulumi.get(__response__, 'tunnel_destination_ipv4_subnet_mask_variable'),
        tunnel_route_via=pulumi.get(__response__, 'tunnel_route_via'),
        tunnel_route_via_variable=pulumi.get(__response__, 'tunnel_route_via_variable'),
        tunnel_source_interface=pulumi.get(__response__, 'tunnel_source_interface'),
        tunnel_source_interface_variable=pulumi.get(__response__, 'tunnel_source_interface_variable'),
        tunnel_source_ipv4_address=pulumi.get(__response__, 'tunnel_source_ipv4_address'),
        tunnel_source_ipv4_address_variable=pulumi.get(__response__, 'tunnel_source_ipv4_address_variable'),
        tunnel_source_ipv4_subnet_mask=pulumi.get(__response__, 'tunnel_source_ipv4_subnet_mask'),
        tunnel_source_ipv4_subnet_mask_variable=pulumi.get(__response__, 'tunnel_source_ipv4_subnet_mask_variable'),
        version=pulumi.get(__response__, 'version')))
