# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities
from . import outputs

__all__ = [
    'GetApplicationPriorityQosPolicyResult',
    'AwaitableGetApplicationPriorityQosPolicyResult',
    'get_application_priority_qos_policy',
    'get_application_priority_qos_policy_output',
]

@pulumi.output_type
class GetApplicationPriorityQosPolicyResult:
    """
    A collection of values returned by getApplicationPriorityQosPolicy.
    """
    def __init__(__self__, description=None, feature_profile_id=None, id=None, name=None, qos_schedulers=None, target_interfaces=None, target_interfaces_variable=None, version=None):
        if description and not isinstance(description, str):
            raise TypeError("Expected argument 'description' to be a str")
        pulumi.set(__self__, "description", description)
        if feature_profile_id and not isinstance(feature_profile_id, str):
            raise TypeError("Expected argument 'feature_profile_id' to be a str")
        pulumi.set(__self__, "feature_profile_id", feature_profile_id)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)
        if qos_schedulers and not isinstance(qos_schedulers, list):
            raise TypeError("Expected argument 'qos_schedulers' to be a list")
        pulumi.set(__self__, "qos_schedulers", qos_schedulers)
        if target_interfaces and not isinstance(target_interfaces, list):
            raise TypeError("Expected argument 'target_interfaces' to be a list")
        pulumi.set(__self__, "target_interfaces", target_interfaces)
        if target_interfaces_variable and not isinstance(target_interfaces_variable, str):
            raise TypeError("Expected argument 'target_interfaces_variable' to be a str")
        pulumi.set(__self__, "target_interfaces_variable", target_interfaces_variable)
        if version and not isinstance(version, int):
            raise TypeError("Expected argument 'version' to be a int")
        pulumi.set(__self__, "version", version)

    @_builtins.property
    @pulumi.getter
    def description(self) -> _builtins.str:
        """
        The description of the Policy
        """
        return pulumi.get(self, "description")

    @_builtins.property
    @pulumi.getter(name="featureProfileId")
    def feature_profile_id(self) -> _builtins.str:
        """
        Feature Profile ID
        """
        return pulumi.get(self, "feature_profile_id")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        The id of the Policy
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        """
        The name of the Policy
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter(name="qosSchedulers")
    def qos_schedulers(self) -> Sequence['outputs.GetApplicationPriorityQosPolicyQosSchedulerResult']:
        """
        qosSchedulers
        """
        return pulumi.get(self, "qos_schedulers")

    @_builtins.property
    @pulumi.getter(name="targetInterfaces")
    def target_interfaces(self) -> Sequence[_builtins.str]:
        """
        interfaces
        """
        return pulumi.get(self, "target_interfaces")

    @_builtins.property
    @pulumi.getter(name="targetInterfacesVariable")
    def target_interfaces_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "target_interfaces_variable")

    @_builtins.property
    @pulumi.getter
    def version(self) -> _builtins.int:
        """
        The version of the Policy
        """
        return pulumi.get(self, "version")


class AwaitableGetApplicationPriorityQosPolicyResult(GetApplicationPriorityQosPolicyResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetApplicationPriorityQosPolicyResult(
            description=self.description,
            feature_profile_id=self.feature_profile_id,
            id=self.id,
            name=self.name,
            qos_schedulers=self.qos_schedulers,
            target_interfaces=self.target_interfaces,
            target_interfaces_variable=self.target_interfaces_variable,
            version=self.version)


def get_application_priority_qos_policy(feature_profile_id: Optional[_builtins.str] = None,
                                        id: Optional[_builtins.str] = None,
                                        opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetApplicationPriorityQosPolicyResult:
    """
    This data source can read the Application Priority QoS Policy.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_sdwan as sdwan

    example = sdwan.get_application_priority_qos_policy(id="f6b2c44c-693c-4763-b010-895aa3d236bd",
        feature_profile_id="f6dd22c8-0b4f-496c-9a0b-6813d1f8b8ac")
    ```


    :param _builtins.str feature_profile_id: Feature Profile ID
    :param _builtins.str id: The id of the Policy
    """
    __args__ = dict()
    __args__['featureProfileId'] = feature_profile_id
    __args__['id'] = id
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('sdwan:index/getApplicationPriorityQosPolicy:getApplicationPriorityQosPolicy', __args__, opts=opts, typ=GetApplicationPriorityQosPolicyResult).value

    return AwaitableGetApplicationPriorityQosPolicyResult(
        description=pulumi.get(__ret__, 'description'),
        feature_profile_id=pulumi.get(__ret__, 'feature_profile_id'),
        id=pulumi.get(__ret__, 'id'),
        name=pulumi.get(__ret__, 'name'),
        qos_schedulers=pulumi.get(__ret__, 'qos_schedulers'),
        target_interfaces=pulumi.get(__ret__, 'target_interfaces'),
        target_interfaces_variable=pulumi.get(__ret__, 'target_interfaces_variable'),
        version=pulumi.get(__ret__, 'version'))
def get_application_priority_qos_policy_output(feature_profile_id: Optional[pulumi.Input[_builtins.str]] = None,
                                               id: Optional[pulumi.Input[_builtins.str]] = None,
                                               opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetApplicationPriorityQosPolicyResult]:
    """
    This data source can read the Application Priority QoS Policy.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_sdwan as sdwan

    example = sdwan.get_application_priority_qos_policy(id="f6b2c44c-693c-4763-b010-895aa3d236bd",
        feature_profile_id="f6dd22c8-0b4f-496c-9a0b-6813d1f8b8ac")
    ```


    :param _builtins.str feature_profile_id: Feature Profile ID
    :param _builtins.str id: The id of the Policy
    """
    __args__ = dict()
    __args__['featureProfileId'] = feature_profile_id
    __args__['id'] = id
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('sdwan:index/getApplicationPriorityQosPolicy:getApplicationPriorityQosPolicy', __args__, opts=opts, typ=GetApplicationPriorityQosPolicyResult)
    return __ret__.apply(lambda __response__: GetApplicationPriorityQosPolicyResult(
        description=pulumi.get(__response__, 'description'),
        feature_profile_id=pulumi.get(__response__, 'feature_profile_id'),
        id=pulumi.get(__response__, 'id'),
        name=pulumi.get(__response__, 'name'),
        qos_schedulers=pulumi.get(__response__, 'qos_schedulers'),
        target_interfaces=pulumi.get(__response__, 'target_interfaces'),
        target_interfaces_variable=pulumi.get(__response__, 'target_interfaces_variable'),
        version=pulumi.get(__response__, 'version')))
