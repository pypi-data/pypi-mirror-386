# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities

__all__ = [
    'GetCedgeGlobalFeatureTemplateResult',
    'AwaitableGetCedgeGlobalFeatureTemplateResult',
    'get_cedge_global_feature_template',
    'get_cedge_global_feature_template_output',
]

@pulumi.output_type
class GetCedgeGlobalFeatureTemplateResult:
    """
    A collection of values returned by getCedgeGlobalFeatureTemplate.
    """
    def __init__(__self__, arp_proxy=None, arp_proxy_variable=None, bootp=None, bootp_variable=None, cdp=None, cdp_variable=None, console_logging=None, console_logging_variable=None, description=None, device_types=None, domain_lookup=None, domain_lookup_variable=None, ftp_passive=None, ftp_passive_variable=None, http_authentication=None, http_authentication_variable=None, http_server=None, http_server_variable=None, https_server=None, https_server_variable=None, id=None, ip_source_routing=None, ip_source_routing_variable=None, line_vty=None, line_vty_variable=None, lldp=None, lldp_variable=None, name=None, nat64_tcp_timeout=None, nat64_tcp_timeout_variable=None, nat64_udp_timeout=None, nat64_udp_timeout_variable=None, rsh_rcp=None, rsh_rcp_variable=None, snmp_ifindex_persist=None, snmp_ifindex_persist_variable=None, source_interface=None, source_interface_variable=None, ssh_version=None, ssh_version_variable=None, tcp_keepalives_in=None, tcp_keepalives_in_variable=None, tcp_keepalives_out=None, tcp_keepalives_out_variable=None, tcp_small_servers=None, tcp_small_servers_variable=None, template_type=None, udp_small_servers=None, udp_small_servers_variable=None, version=None, vty_logging=None, vty_logging_variable=None):
        if arp_proxy and not isinstance(arp_proxy, bool):
            raise TypeError("Expected argument 'arp_proxy' to be a bool")
        pulumi.set(__self__, "arp_proxy", arp_proxy)
        if arp_proxy_variable and not isinstance(arp_proxy_variable, str):
            raise TypeError("Expected argument 'arp_proxy_variable' to be a str")
        pulumi.set(__self__, "arp_proxy_variable", arp_proxy_variable)
        if bootp and not isinstance(bootp, bool):
            raise TypeError("Expected argument 'bootp' to be a bool")
        pulumi.set(__self__, "bootp", bootp)
        if bootp_variable and not isinstance(bootp_variable, str):
            raise TypeError("Expected argument 'bootp_variable' to be a str")
        pulumi.set(__self__, "bootp_variable", bootp_variable)
        if cdp and not isinstance(cdp, bool):
            raise TypeError("Expected argument 'cdp' to be a bool")
        pulumi.set(__self__, "cdp", cdp)
        if cdp_variable and not isinstance(cdp_variable, str):
            raise TypeError("Expected argument 'cdp_variable' to be a str")
        pulumi.set(__self__, "cdp_variable", cdp_variable)
        if console_logging and not isinstance(console_logging, bool):
            raise TypeError("Expected argument 'console_logging' to be a bool")
        pulumi.set(__self__, "console_logging", console_logging)
        if console_logging_variable and not isinstance(console_logging_variable, str):
            raise TypeError("Expected argument 'console_logging_variable' to be a str")
        pulumi.set(__self__, "console_logging_variable", console_logging_variable)
        if description and not isinstance(description, str):
            raise TypeError("Expected argument 'description' to be a str")
        pulumi.set(__self__, "description", description)
        if device_types and not isinstance(device_types, list):
            raise TypeError("Expected argument 'device_types' to be a list")
        pulumi.set(__self__, "device_types", device_types)
        if domain_lookup and not isinstance(domain_lookup, bool):
            raise TypeError("Expected argument 'domain_lookup' to be a bool")
        pulumi.set(__self__, "domain_lookup", domain_lookup)
        if domain_lookup_variable and not isinstance(domain_lookup_variable, str):
            raise TypeError("Expected argument 'domain_lookup_variable' to be a str")
        pulumi.set(__self__, "domain_lookup_variable", domain_lookup_variable)
        if ftp_passive and not isinstance(ftp_passive, bool):
            raise TypeError("Expected argument 'ftp_passive' to be a bool")
        pulumi.set(__self__, "ftp_passive", ftp_passive)
        if ftp_passive_variable and not isinstance(ftp_passive_variable, str):
            raise TypeError("Expected argument 'ftp_passive_variable' to be a str")
        pulumi.set(__self__, "ftp_passive_variable", ftp_passive_variable)
        if http_authentication and not isinstance(http_authentication, str):
            raise TypeError("Expected argument 'http_authentication' to be a str")
        pulumi.set(__self__, "http_authentication", http_authentication)
        if http_authentication_variable and not isinstance(http_authentication_variable, str):
            raise TypeError("Expected argument 'http_authentication_variable' to be a str")
        pulumi.set(__self__, "http_authentication_variable", http_authentication_variable)
        if http_server and not isinstance(http_server, bool):
            raise TypeError("Expected argument 'http_server' to be a bool")
        pulumi.set(__self__, "http_server", http_server)
        if http_server_variable and not isinstance(http_server_variable, str):
            raise TypeError("Expected argument 'http_server_variable' to be a str")
        pulumi.set(__self__, "http_server_variable", http_server_variable)
        if https_server and not isinstance(https_server, bool):
            raise TypeError("Expected argument 'https_server' to be a bool")
        pulumi.set(__self__, "https_server", https_server)
        if https_server_variable and not isinstance(https_server_variable, str):
            raise TypeError("Expected argument 'https_server_variable' to be a str")
        pulumi.set(__self__, "https_server_variable", https_server_variable)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if ip_source_routing and not isinstance(ip_source_routing, bool):
            raise TypeError("Expected argument 'ip_source_routing' to be a bool")
        pulumi.set(__self__, "ip_source_routing", ip_source_routing)
        if ip_source_routing_variable and not isinstance(ip_source_routing_variable, str):
            raise TypeError("Expected argument 'ip_source_routing_variable' to be a str")
        pulumi.set(__self__, "ip_source_routing_variable", ip_source_routing_variable)
        if line_vty and not isinstance(line_vty, bool):
            raise TypeError("Expected argument 'line_vty' to be a bool")
        pulumi.set(__self__, "line_vty", line_vty)
        if line_vty_variable and not isinstance(line_vty_variable, str):
            raise TypeError("Expected argument 'line_vty_variable' to be a str")
        pulumi.set(__self__, "line_vty_variable", line_vty_variable)
        if lldp and not isinstance(lldp, bool):
            raise TypeError("Expected argument 'lldp' to be a bool")
        pulumi.set(__self__, "lldp", lldp)
        if lldp_variable and not isinstance(lldp_variable, str):
            raise TypeError("Expected argument 'lldp_variable' to be a str")
        pulumi.set(__self__, "lldp_variable", lldp_variable)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)
        if nat64_tcp_timeout and not isinstance(nat64_tcp_timeout, int):
            raise TypeError("Expected argument 'nat64_tcp_timeout' to be a int")
        pulumi.set(__self__, "nat64_tcp_timeout", nat64_tcp_timeout)
        if nat64_tcp_timeout_variable and not isinstance(nat64_tcp_timeout_variable, str):
            raise TypeError("Expected argument 'nat64_tcp_timeout_variable' to be a str")
        pulumi.set(__self__, "nat64_tcp_timeout_variable", nat64_tcp_timeout_variable)
        if nat64_udp_timeout and not isinstance(nat64_udp_timeout, int):
            raise TypeError("Expected argument 'nat64_udp_timeout' to be a int")
        pulumi.set(__self__, "nat64_udp_timeout", nat64_udp_timeout)
        if nat64_udp_timeout_variable and not isinstance(nat64_udp_timeout_variable, str):
            raise TypeError("Expected argument 'nat64_udp_timeout_variable' to be a str")
        pulumi.set(__self__, "nat64_udp_timeout_variable", nat64_udp_timeout_variable)
        if rsh_rcp and not isinstance(rsh_rcp, bool):
            raise TypeError("Expected argument 'rsh_rcp' to be a bool")
        pulumi.set(__self__, "rsh_rcp", rsh_rcp)
        if rsh_rcp_variable and not isinstance(rsh_rcp_variable, str):
            raise TypeError("Expected argument 'rsh_rcp_variable' to be a str")
        pulumi.set(__self__, "rsh_rcp_variable", rsh_rcp_variable)
        if snmp_ifindex_persist and not isinstance(snmp_ifindex_persist, bool):
            raise TypeError("Expected argument 'snmp_ifindex_persist' to be a bool")
        pulumi.set(__self__, "snmp_ifindex_persist", snmp_ifindex_persist)
        if snmp_ifindex_persist_variable and not isinstance(snmp_ifindex_persist_variable, str):
            raise TypeError("Expected argument 'snmp_ifindex_persist_variable' to be a str")
        pulumi.set(__self__, "snmp_ifindex_persist_variable", snmp_ifindex_persist_variable)
        if source_interface and not isinstance(source_interface, str):
            raise TypeError("Expected argument 'source_interface' to be a str")
        pulumi.set(__self__, "source_interface", source_interface)
        if source_interface_variable and not isinstance(source_interface_variable, str):
            raise TypeError("Expected argument 'source_interface_variable' to be a str")
        pulumi.set(__self__, "source_interface_variable", source_interface_variable)
        if ssh_version and not isinstance(ssh_version, int):
            raise TypeError("Expected argument 'ssh_version' to be a int")
        pulumi.set(__self__, "ssh_version", ssh_version)
        if ssh_version_variable and not isinstance(ssh_version_variable, str):
            raise TypeError("Expected argument 'ssh_version_variable' to be a str")
        pulumi.set(__self__, "ssh_version_variable", ssh_version_variable)
        if tcp_keepalives_in and not isinstance(tcp_keepalives_in, bool):
            raise TypeError("Expected argument 'tcp_keepalives_in' to be a bool")
        pulumi.set(__self__, "tcp_keepalives_in", tcp_keepalives_in)
        if tcp_keepalives_in_variable and not isinstance(tcp_keepalives_in_variable, str):
            raise TypeError("Expected argument 'tcp_keepalives_in_variable' to be a str")
        pulumi.set(__self__, "tcp_keepalives_in_variable", tcp_keepalives_in_variable)
        if tcp_keepalives_out and not isinstance(tcp_keepalives_out, bool):
            raise TypeError("Expected argument 'tcp_keepalives_out' to be a bool")
        pulumi.set(__self__, "tcp_keepalives_out", tcp_keepalives_out)
        if tcp_keepalives_out_variable and not isinstance(tcp_keepalives_out_variable, str):
            raise TypeError("Expected argument 'tcp_keepalives_out_variable' to be a str")
        pulumi.set(__self__, "tcp_keepalives_out_variable", tcp_keepalives_out_variable)
        if tcp_small_servers and not isinstance(tcp_small_servers, bool):
            raise TypeError("Expected argument 'tcp_small_servers' to be a bool")
        pulumi.set(__self__, "tcp_small_servers", tcp_small_servers)
        if tcp_small_servers_variable and not isinstance(tcp_small_servers_variable, str):
            raise TypeError("Expected argument 'tcp_small_servers_variable' to be a str")
        pulumi.set(__self__, "tcp_small_servers_variable", tcp_small_servers_variable)
        if template_type and not isinstance(template_type, str):
            raise TypeError("Expected argument 'template_type' to be a str")
        pulumi.set(__self__, "template_type", template_type)
        if udp_small_servers and not isinstance(udp_small_servers, bool):
            raise TypeError("Expected argument 'udp_small_servers' to be a bool")
        pulumi.set(__self__, "udp_small_servers", udp_small_servers)
        if udp_small_servers_variable and not isinstance(udp_small_servers_variable, str):
            raise TypeError("Expected argument 'udp_small_servers_variable' to be a str")
        pulumi.set(__self__, "udp_small_servers_variable", udp_small_servers_variable)
        if version and not isinstance(version, int):
            raise TypeError("Expected argument 'version' to be a int")
        pulumi.set(__self__, "version", version)
        if vty_logging and not isinstance(vty_logging, bool):
            raise TypeError("Expected argument 'vty_logging' to be a bool")
        pulumi.set(__self__, "vty_logging", vty_logging)
        if vty_logging_variable and not isinstance(vty_logging_variable, str):
            raise TypeError("Expected argument 'vty_logging_variable' to be a str")
        pulumi.set(__self__, "vty_logging_variable", vty_logging_variable)

    @_builtins.property
    @pulumi.getter(name="arpProxy")
    def arp_proxy(self) -> _builtins.bool:
        """
        Set ARP Proxy
        """
        return pulumi.get(self, "arp_proxy")

    @_builtins.property
    @pulumi.getter(name="arpProxyVariable")
    def arp_proxy_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "arp_proxy_variable")

    @_builtins.property
    @pulumi.getter
    def bootp(self) -> _builtins.bool:
        """
        Configure Ignore BOOTP
        """
        return pulumi.get(self, "bootp")

    @_builtins.property
    @pulumi.getter(name="bootpVariable")
    def bootp_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "bootp_variable")

    @_builtins.property
    @pulumi.getter
    def cdp(self) -> _builtins.bool:
        """
        Configure CDP
        """
        return pulumi.get(self, "cdp")

    @_builtins.property
    @pulumi.getter(name="cdpVariable")
    def cdp_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "cdp_variable")

    @_builtins.property
    @pulumi.getter(name="consoleLogging")
    def console_logging(self) -> _builtins.bool:
        """
        Configure Console Logging
        """
        return pulumi.get(self, "console_logging")

    @_builtins.property
    @pulumi.getter(name="consoleLoggingVariable")
    def console_logging_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "console_logging_variable")

    @_builtins.property
    @pulumi.getter
    def description(self) -> _builtins.str:
        """
        The description of the feature template
        """
        return pulumi.get(self, "description")

    @_builtins.property
    @pulumi.getter(name="deviceTypes")
    def device_types(self) -> Sequence[_builtins.str]:
        """
        List of supported device types
        """
        return pulumi.get(self, "device_types")

    @_builtins.property
    @pulumi.getter(name="domainLookup")
    def domain_lookup(self) -> _builtins.bool:
        """
        Configure Domain-Lookup
        """
        return pulumi.get(self, "domain_lookup")

    @_builtins.property
    @pulumi.getter(name="domainLookupVariable")
    def domain_lookup_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "domain_lookup_variable")

    @_builtins.property
    @pulumi.getter(name="ftpPassive")
    def ftp_passive(self) -> _builtins.bool:
        """
        Set Passive FTP
        """
        return pulumi.get(self, "ftp_passive")

    @_builtins.property
    @pulumi.getter(name="ftpPassiveVariable")
    def ftp_passive_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "ftp_passive_variable")

    @_builtins.property
    @pulumi.getter(name="httpAuthentication")
    def http_authentication(self) -> _builtins.str:
        """
        Set preference for HTTP Authentication
        """
        return pulumi.get(self, "http_authentication")

    @_builtins.property
    @pulumi.getter(name="httpAuthenticationVariable")
    def http_authentication_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "http_authentication_variable")

    @_builtins.property
    @pulumi.getter(name="httpServer")
    def http_server(self) -> _builtins.bool:
        """
        Set HTTP Server
        """
        return pulumi.get(self, "http_server")

    @_builtins.property
    @pulumi.getter(name="httpServerVariable")
    def http_server_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "http_server_variable")

    @_builtins.property
    @pulumi.getter(name="httpsServer")
    def https_server(self) -> _builtins.bool:
        """
        Set HTTPS Server
        """
        return pulumi.get(self, "https_server")

    @_builtins.property
    @pulumi.getter(name="httpsServerVariable")
    def https_server_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "https_server_variable")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        The id of the feature template
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter(name="ipSourceRouting")
    def ip_source_routing(self) -> _builtins.bool:
        """
        Set Source Route
        """
        return pulumi.get(self, "ip_source_routing")

    @_builtins.property
    @pulumi.getter(name="ipSourceRoutingVariable")
    def ip_source_routing_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "ip_source_routing_variable")

    @_builtins.property
    @pulumi.getter(name="lineVty")
    def line_vty(self) -> _builtins.bool:
        """
        Configure Telnet (Outbound)
        """
        return pulumi.get(self, "line_vty")

    @_builtins.property
    @pulumi.getter(name="lineVtyVariable")
    def line_vty_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "line_vty_variable")

    @_builtins.property
    @pulumi.getter
    def lldp(self) -> _builtins.bool:
        """
        Configure LLDP
        """
        return pulumi.get(self, "lldp")

    @_builtins.property
    @pulumi.getter(name="lldpVariable")
    def lldp_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "lldp_variable")

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        """
        The name of the feature template
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter(name="nat64TcpTimeout")
    def nat64_tcp_timeout(self) -> _builtins.int:
        """
        Set NAT64 TCP session timeout, in seconds
        """
        return pulumi.get(self, "nat64_tcp_timeout")

    @_builtins.property
    @pulumi.getter(name="nat64TcpTimeoutVariable")
    def nat64_tcp_timeout_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "nat64_tcp_timeout_variable")

    @_builtins.property
    @pulumi.getter(name="nat64UdpTimeout")
    def nat64_udp_timeout(self) -> _builtins.int:
        """
        Set NAT64 UDP session timeout, in seconds
        """
        return pulumi.get(self, "nat64_udp_timeout")

    @_builtins.property
    @pulumi.getter(name="nat64UdpTimeoutVariable")
    def nat64_udp_timeout_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "nat64_udp_timeout_variable")

    @_builtins.property
    @pulumi.getter(name="rshRcp")
    def rsh_rcp(self) -> _builtins.bool:
        """
        Set RSH/RCP
        """
        return pulumi.get(self, "rsh_rcp")

    @_builtins.property
    @pulumi.getter(name="rshRcpVariable")
    def rsh_rcp_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "rsh_rcp_variable")

    @_builtins.property
    @pulumi.getter(name="snmpIfindexPersist")
    def snmp_ifindex_persist(self) -> _builtins.bool:
        """
        Configure SNMP Ifindex Persist
        """
        return pulumi.get(self, "snmp_ifindex_persist")

    @_builtins.property
    @pulumi.getter(name="snmpIfindexPersistVariable")
    def snmp_ifindex_persist_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "snmp_ifindex_persist_variable")

    @_builtins.property
    @pulumi.getter(name="sourceInterface")
    def source_interface(self) -> _builtins.str:
        """
        Specify interface for source address in all HTTP(S) client connections
        """
        return pulumi.get(self, "source_interface")

    @_builtins.property
    @pulumi.getter(name="sourceInterfaceVariable")
    def source_interface_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "source_interface_variable")

    @_builtins.property
    @pulumi.getter(name="sshVersion")
    def ssh_version(self) -> _builtins.int:
        """
        Set SSH version
        """
        return pulumi.get(self, "ssh_version")

    @_builtins.property
    @pulumi.getter(name="sshVersionVariable")
    def ssh_version_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "ssh_version_variable")

    @_builtins.property
    @pulumi.getter(name="tcpKeepalivesIn")
    def tcp_keepalives_in(self) -> _builtins.bool:
        """
        Configure tcp-keepalives-in
        """
        return pulumi.get(self, "tcp_keepalives_in")

    @_builtins.property
    @pulumi.getter(name="tcpKeepalivesInVariable")
    def tcp_keepalives_in_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "tcp_keepalives_in_variable")

    @_builtins.property
    @pulumi.getter(name="tcpKeepalivesOut")
    def tcp_keepalives_out(self) -> _builtins.bool:
        """
        Configure tcp-keepalives-out
        """
        return pulumi.get(self, "tcp_keepalives_out")

    @_builtins.property
    @pulumi.getter(name="tcpKeepalivesOutVariable")
    def tcp_keepalives_out_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "tcp_keepalives_out_variable")

    @_builtins.property
    @pulumi.getter(name="tcpSmallServers")
    def tcp_small_servers(self) -> _builtins.bool:
        """
        Configure tcp-small-servers
        """
        return pulumi.get(self, "tcp_small_servers")

    @_builtins.property
    @pulumi.getter(name="tcpSmallServersVariable")
    def tcp_small_servers_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "tcp_small_servers_variable")

    @_builtins.property
    @pulumi.getter(name="templateType")
    def template_type(self) -> _builtins.str:
        """
        The template type
        """
        return pulumi.get(self, "template_type")

    @_builtins.property
    @pulumi.getter(name="udpSmallServers")
    def udp_small_servers(self) -> _builtins.bool:
        """
        Configure udp-small-servers
        """
        return pulumi.get(self, "udp_small_servers")

    @_builtins.property
    @pulumi.getter(name="udpSmallServersVariable")
    def udp_small_servers_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "udp_small_servers_variable")

    @_builtins.property
    @pulumi.getter
    def version(self) -> _builtins.int:
        """
        The version of the feature template
        """
        return pulumi.get(self, "version")

    @_builtins.property
    @pulumi.getter(name="vtyLogging")
    def vty_logging(self) -> _builtins.bool:
        """
        Configure VTY Line Logging
        """
        return pulumi.get(self, "vty_logging")

    @_builtins.property
    @pulumi.getter(name="vtyLoggingVariable")
    def vty_logging_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "vty_logging_variable")


class AwaitableGetCedgeGlobalFeatureTemplateResult(GetCedgeGlobalFeatureTemplateResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetCedgeGlobalFeatureTemplateResult(
            arp_proxy=self.arp_proxy,
            arp_proxy_variable=self.arp_proxy_variable,
            bootp=self.bootp,
            bootp_variable=self.bootp_variable,
            cdp=self.cdp,
            cdp_variable=self.cdp_variable,
            console_logging=self.console_logging,
            console_logging_variable=self.console_logging_variable,
            description=self.description,
            device_types=self.device_types,
            domain_lookup=self.domain_lookup,
            domain_lookup_variable=self.domain_lookup_variable,
            ftp_passive=self.ftp_passive,
            ftp_passive_variable=self.ftp_passive_variable,
            http_authentication=self.http_authentication,
            http_authentication_variable=self.http_authentication_variable,
            http_server=self.http_server,
            http_server_variable=self.http_server_variable,
            https_server=self.https_server,
            https_server_variable=self.https_server_variable,
            id=self.id,
            ip_source_routing=self.ip_source_routing,
            ip_source_routing_variable=self.ip_source_routing_variable,
            line_vty=self.line_vty,
            line_vty_variable=self.line_vty_variable,
            lldp=self.lldp,
            lldp_variable=self.lldp_variable,
            name=self.name,
            nat64_tcp_timeout=self.nat64_tcp_timeout,
            nat64_tcp_timeout_variable=self.nat64_tcp_timeout_variable,
            nat64_udp_timeout=self.nat64_udp_timeout,
            nat64_udp_timeout_variable=self.nat64_udp_timeout_variable,
            rsh_rcp=self.rsh_rcp,
            rsh_rcp_variable=self.rsh_rcp_variable,
            snmp_ifindex_persist=self.snmp_ifindex_persist,
            snmp_ifindex_persist_variable=self.snmp_ifindex_persist_variable,
            source_interface=self.source_interface,
            source_interface_variable=self.source_interface_variable,
            ssh_version=self.ssh_version,
            ssh_version_variable=self.ssh_version_variable,
            tcp_keepalives_in=self.tcp_keepalives_in,
            tcp_keepalives_in_variable=self.tcp_keepalives_in_variable,
            tcp_keepalives_out=self.tcp_keepalives_out,
            tcp_keepalives_out_variable=self.tcp_keepalives_out_variable,
            tcp_small_servers=self.tcp_small_servers,
            tcp_small_servers_variable=self.tcp_small_servers_variable,
            template_type=self.template_type,
            udp_small_servers=self.udp_small_servers,
            udp_small_servers_variable=self.udp_small_servers_variable,
            version=self.version,
            vty_logging=self.vty_logging,
            vty_logging_variable=self.vty_logging_variable)


def get_cedge_global_feature_template(id: Optional[_builtins.str] = None,
                                      name: Optional[_builtins.str] = None,
                                      opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetCedgeGlobalFeatureTemplateResult:
    """
    This data source can read the cEdge Global feature template.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_sdwan as sdwan

    example = sdwan.get_cedge_global_feature_template(id="f6b2c44c-693c-4763-b010-895aa3d236bd")
    ```


    :param _builtins.str id: The id of the feature template
    :param _builtins.str name: The name of the feature template
    """
    __args__ = dict()
    __args__['id'] = id
    __args__['name'] = name
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('sdwan:index/getCedgeGlobalFeatureTemplate:getCedgeGlobalFeatureTemplate', __args__, opts=opts, typ=GetCedgeGlobalFeatureTemplateResult).value

    return AwaitableGetCedgeGlobalFeatureTemplateResult(
        arp_proxy=pulumi.get(__ret__, 'arp_proxy'),
        arp_proxy_variable=pulumi.get(__ret__, 'arp_proxy_variable'),
        bootp=pulumi.get(__ret__, 'bootp'),
        bootp_variable=pulumi.get(__ret__, 'bootp_variable'),
        cdp=pulumi.get(__ret__, 'cdp'),
        cdp_variable=pulumi.get(__ret__, 'cdp_variable'),
        console_logging=pulumi.get(__ret__, 'console_logging'),
        console_logging_variable=pulumi.get(__ret__, 'console_logging_variable'),
        description=pulumi.get(__ret__, 'description'),
        device_types=pulumi.get(__ret__, 'device_types'),
        domain_lookup=pulumi.get(__ret__, 'domain_lookup'),
        domain_lookup_variable=pulumi.get(__ret__, 'domain_lookup_variable'),
        ftp_passive=pulumi.get(__ret__, 'ftp_passive'),
        ftp_passive_variable=pulumi.get(__ret__, 'ftp_passive_variable'),
        http_authentication=pulumi.get(__ret__, 'http_authentication'),
        http_authentication_variable=pulumi.get(__ret__, 'http_authentication_variable'),
        http_server=pulumi.get(__ret__, 'http_server'),
        http_server_variable=pulumi.get(__ret__, 'http_server_variable'),
        https_server=pulumi.get(__ret__, 'https_server'),
        https_server_variable=pulumi.get(__ret__, 'https_server_variable'),
        id=pulumi.get(__ret__, 'id'),
        ip_source_routing=pulumi.get(__ret__, 'ip_source_routing'),
        ip_source_routing_variable=pulumi.get(__ret__, 'ip_source_routing_variable'),
        line_vty=pulumi.get(__ret__, 'line_vty'),
        line_vty_variable=pulumi.get(__ret__, 'line_vty_variable'),
        lldp=pulumi.get(__ret__, 'lldp'),
        lldp_variable=pulumi.get(__ret__, 'lldp_variable'),
        name=pulumi.get(__ret__, 'name'),
        nat64_tcp_timeout=pulumi.get(__ret__, 'nat64_tcp_timeout'),
        nat64_tcp_timeout_variable=pulumi.get(__ret__, 'nat64_tcp_timeout_variable'),
        nat64_udp_timeout=pulumi.get(__ret__, 'nat64_udp_timeout'),
        nat64_udp_timeout_variable=pulumi.get(__ret__, 'nat64_udp_timeout_variable'),
        rsh_rcp=pulumi.get(__ret__, 'rsh_rcp'),
        rsh_rcp_variable=pulumi.get(__ret__, 'rsh_rcp_variable'),
        snmp_ifindex_persist=pulumi.get(__ret__, 'snmp_ifindex_persist'),
        snmp_ifindex_persist_variable=pulumi.get(__ret__, 'snmp_ifindex_persist_variable'),
        source_interface=pulumi.get(__ret__, 'source_interface'),
        source_interface_variable=pulumi.get(__ret__, 'source_interface_variable'),
        ssh_version=pulumi.get(__ret__, 'ssh_version'),
        ssh_version_variable=pulumi.get(__ret__, 'ssh_version_variable'),
        tcp_keepalives_in=pulumi.get(__ret__, 'tcp_keepalives_in'),
        tcp_keepalives_in_variable=pulumi.get(__ret__, 'tcp_keepalives_in_variable'),
        tcp_keepalives_out=pulumi.get(__ret__, 'tcp_keepalives_out'),
        tcp_keepalives_out_variable=pulumi.get(__ret__, 'tcp_keepalives_out_variable'),
        tcp_small_servers=pulumi.get(__ret__, 'tcp_small_servers'),
        tcp_small_servers_variable=pulumi.get(__ret__, 'tcp_small_servers_variable'),
        template_type=pulumi.get(__ret__, 'template_type'),
        udp_small_servers=pulumi.get(__ret__, 'udp_small_servers'),
        udp_small_servers_variable=pulumi.get(__ret__, 'udp_small_servers_variable'),
        version=pulumi.get(__ret__, 'version'),
        vty_logging=pulumi.get(__ret__, 'vty_logging'),
        vty_logging_variable=pulumi.get(__ret__, 'vty_logging_variable'))
def get_cedge_global_feature_template_output(id: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                             name: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                             opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetCedgeGlobalFeatureTemplateResult]:
    """
    This data source can read the cEdge Global feature template.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_sdwan as sdwan

    example = sdwan.get_cedge_global_feature_template(id="f6b2c44c-693c-4763-b010-895aa3d236bd")
    ```


    :param _builtins.str id: The id of the feature template
    :param _builtins.str name: The name of the feature template
    """
    __args__ = dict()
    __args__['id'] = id
    __args__['name'] = name
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('sdwan:index/getCedgeGlobalFeatureTemplate:getCedgeGlobalFeatureTemplate', __args__, opts=opts, typ=GetCedgeGlobalFeatureTemplateResult)
    return __ret__.apply(lambda __response__: GetCedgeGlobalFeatureTemplateResult(
        arp_proxy=pulumi.get(__response__, 'arp_proxy'),
        arp_proxy_variable=pulumi.get(__response__, 'arp_proxy_variable'),
        bootp=pulumi.get(__response__, 'bootp'),
        bootp_variable=pulumi.get(__response__, 'bootp_variable'),
        cdp=pulumi.get(__response__, 'cdp'),
        cdp_variable=pulumi.get(__response__, 'cdp_variable'),
        console_logging=pulumi.get(__response__, 'console_logging'),
        console_logging_variable=pulumi.get(__response__, 'console_logging_variable'),
        description=pulumi.get(__response__, 'description'),
        device_types=pulumi.get(__response__, 'device_types'),
        domain_lookup=pulumi.get(__response__, 'domain_lookup'),
        domain_lookup_variable=pulumi.get(__response__, 'domain_lookup_variable'),
        ftp_passive=pulumi.get(__response__, 'ftp_passive'),
        ftp_passive_variable=pulumi.get(__response__, 'ftp_passive_variable'),
        http_authentication=pulumi.get(__response__, 'http_authentication'),
        http_authentication_variable=pulumi.get(__response__, 'http_authentication_variable'),
        http_server=pulumi.get(__response__, 'http_server'),
        http_server_variable=pulumi.get(__response__, 'http_server_variable'),
        https_server=pulumi.get(__response__, 'https_server'),
        https_server_variable=pulumi.get(__response__, 'https_server_variable'),
        id=pulumi.get(__response__, 'id'),
        ip_source_routing=pulumi.get(__response__, 'ip_source_routing'),
        ip_source_routing_variable=pulumi.get(__response__, 'ip_source_routing_variable'),
        line_vty=pulumi.get(__response__, 'line_vty'),
        line_vty_variable=pulumi.get(__response__, 'line_vty_variable'),
        lldp=pulumi.get(__response__, 'lldp'),
        lldp_variable=pulumi.get(__response__, 'lldp_variable'),
        name=pulumi.get(__response__, 'name'),
        nat64_tcp_timeout=pulumi.get(__response__, 'nat64_tcp_timeout'),
        nat64_tcp_timeout_variable=pulumi.get(__response__, 'nat64_tcp_timeout_variable'),
        nat64_udp_timeout=pulumi.get(__response__, 'nat64_udp_timeout'),
        nat64_udp_timeout_variable=pulumi.get(__response__, 'nat64_udp_timeout_variable'),
        rsh_rcp=pulumi.get(__response__, 'rsh_rcp'),
        rsh_rcp_variable=pulumi.get(__response__, 'rsh_rcp_variable'),
        snmp_ifindex_persist=pulumi.get(__response__, 'snmp_ifindex_persist'),
        snmp_ifindex_persist_variable=pulumi.get(__response__, 'snmp_ifindex_persist_variable'),
        source_interface=pulumi.get(__response__, 'source_interface'),
        source_interface_variable=pulumi.get(__response__, 'source_interface_variable'),
        ssh_version=pulumi.get(__response__, 'ssh_version'),
        ssh_version_variable=pulumi.get(__response__, 'ssh_version_variable'),
        tcp_keepalives_in=pulumi.get(__response__, 'tcp_keepalives_in'),
        tcp_keepalives_in_variable=pulumi.get(__response__, 'tcp_keepalives_in_variable'),
        tcp_keepalives_out=pulumi.get(__response__, 'tcp_keepalives_out'),
        tcp_keepalives_out_variable=pulumi.get(__response__, 'tcp_keepalives_out_variable'),
        tcp_small_servers=pulumi.get(__response__, 'tcp_small_servers'),
        tcp_small_servers_variable=pulumi.get(__response__, 'tcp_small_servers_variable'),
        template_type=pulumi.get(__response__, 'template_type'),
        udp_small_servers=pulumi.get(__response__, 'udp_small_servers'),
        udp_small_servers_variable=pulumi.get(__response__, 'udp_small_servers_variable'),
        version=pulumi.get(__response__, 'version'),
        vty_logging=pulumi.get(__response__, 'vty_logging'),
        vty_logging_variable=pulumi.get(__response__, 'vty_logging_variable')))
