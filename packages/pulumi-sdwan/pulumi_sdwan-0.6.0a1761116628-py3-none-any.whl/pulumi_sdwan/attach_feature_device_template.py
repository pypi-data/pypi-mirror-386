# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities
from . import outputs
from ._inputs import *

__all__ = ['AttachFeatureDeviceTemplateArgs', 'AttachFeatureDeviceTemplate']

@pulumi.input_type
class AttachFeatureDeviceTemplateArgs:
    def __init__(__self__, *,
                 devices: pulumi.Input[Sequence[pulumi.Input['AttachFeatureDeviceTemplateDeviceArgs']]],
                 version: Optional[pulumi.Input[_builtins.int]] = None):
        """
        The set of arguments for constructing a AttachFeatureDeviceTemplate resource.
        :param pulumi.Input[Sequence[pulumi.Input['AttachFeatureDeviceTemplateDeviceArgs']]] devices: Devices
        :param pulumi.Input[_builtins.int] version: The version of the device template
        """
        pulumi.set(__self__, "devices", devices)
        if version is not None:
            pulumi.set(__self__, "version", version)

    @_builtins.property
    @pulumi.getter
    def devices(self) -> pulumi.Input[Sequence[pulumi.Input['AttachFeatureDeviceTemplateDeviceArgs']]]:
        """
        Devices
        """
        return pulumi.get(self, "devices")

    @devices.setter
    def devices(self, value: pulumi.Input[Sequence[pulumi.Input['AttachFeatureDeviceTemplateDeviceArgs']]]):
        pulumi.set(self, "devices", value)

    @_builtins.property
    @pulumi.getter
    def version(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        The version of the device template
        """
        return pulumi.get(self, "version")

    @version.setter
    def version(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "version", value)


@pulumi.input_type
class _AttachFeatureDeviceTemplateState:
    def __init__(__self__, *,
                 devices: Optional[pulumi.Input[Sequence[pulumi.Input['AttachFeatureDeviceTemplateDeviceArgs']]]] = None,
                 version: Optional[pulumi.Input[_builtins.int]] = None):
        """
        Input properties used for looking up and filtering AttachFeatureDeviceTemplate resources.
        :param pulumi.Input[Sequence[pulumi.Input['AttachFeatureDeviceTemplateDeviceArgs']]] devices: Devices
        :param pulumi.Input[_builtins.int] version: The version of the device template
        """
        if devices is not None:
            pulumi.set(__self__, "devices", devices)
        if version is not None:
            pulumi.set(__self__, "version", version)

    @_builtins.property
    @pulumi.getter
    def devices(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['AttachFeatureDeviceTemplateDeviceArgs']]]]:
        """
        Devices
        """
        return pulumi.get(self, "devices")

    @devices.setter
    def devices(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['AttachFeatureDeviceTemplateDeviceArgs']]]]):
        pulumi.set(self, "devices", value)

    @_builtins.property
    @pulumi.getter
    def version(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        The version of the device template
        """
        return pulumi.get(self, "version")

    @version.setter
    def version(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "version", value)


@pulumi.type_token("sdwan:index/attachFeatureDeviceTemplate:AttachFeatureDeviceTemplate")
class AttachFeatureDeviceTemplate(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 devices: Optional[pulumi.Input[Sequence[pulumi.Input[Union['AttachFeatureDeviceTemplateDeviceArgs', 'AttachFeatureDeviceTemplateDeviceArgsDict']]]]] = None,
                 version: Optional[pulumi.Input[_builtins.int]] = None,
                 __props__=None):
        """
        This resource can attach a feature device template. Due to limitations of the API, once a device template is attached to a device, only one change can be applied per `pulumi up` operation. More information is available here.

        ## Example Usage

        ## Import

        The `pulumi import` command can be used, for example:

        One feature device template ID and a comma separated list containing at least one device ID must be included:

        ```sh
        $ pulumi import sdwan:index/attachFeatureDeviceTemplate:AttachFeatureDeviceTemplate example "f6b2c44c-693c-4763-b010-895aa3d236bd,[C8K-83E4B5EE-52AC-075F-B5E4-0050110680F3,C8K-C38D156C-34E4-909A-15BB-96D0E9D0E808]"
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[Sequence[pulumi.Input[Union['AttachFeatureDeviceTemplateDeviceArgs', 'AttachFeatureDeviceTemplateDeviceArgsDict']]]] devices: Devices
        :param pulumi.Input[_builtins.int] version: The version of the device template
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: AttachFeatureDeviceTemplateArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        This resource can attach a feature device template. Due to limitations of the API, once a device template is attached to a device, only one change can be applied per `pulumi up` operation. More information is available here.

        ## Example Usage

        ## Import

        The `pulumi import` command can be used, for example:

        One feature device template ID and a comma separated list containing at least one device ID must be included:

        ```sh
        $ pulumi import sdwan:index/attachFeatureDeviceTemplate:AttachFeatureDeviceTemplate example "f6b2c44c-693c-4763-b010-895aa3d236bd,[C8K-83E4B5EE-52AC-075F-B5E4-0050110680F3,C8K-C38D156C-34E4-909A-15BB-96D0E9D0E808]"
        ```

        :param str resource_name: The name of the resource.
        :param AttachFeatureDeviceTemplateArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(AttachFeatureDeviceTemplateArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 devices: Optional[pulumi.Input[Sequence[pulumi.Input[Union['AttachFeatureDeviceTemplateDeviceArgs', 'AttachFeatureDeviceTemplateDeviceArgsDict']]]]] = None,
                 version: Optional[pulumi.Input[_builtins.int]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = AttachFeatureDeviceTemplateArgs.__new__(AttachFeatureDeviceTemplateArgs)

            if devices is None and not opts.urn:
                raise TypeError("Missing required property 'devices'")
            __props__.__dict__["devices"] = devices
            __props__.__dict__["version"] = version
        super(AttachFeatureDeviceTemplate, __self__).__init__(
            'sdwan:index/attachFeatureDeviceTemplate:AttachFeatureDeviceTemplate',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            devices: Optional[pulumi.Input[Sequence[pulumi.Input[Union['AttachFeatureDeviceTemplateDeviceArgs', 'AttachFeatureDeviceTemplateDeviceArgsDict']]]]] = None,
            version: Optional[pulumi.Input[_builtins.int]] = None) -> 'AttachFeatureDeviceTemplate':
        """
        Get an existing AttachFeatureDeviceTemplate resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[Sequence[pulumi.Input[Union['AttachFeatureDeviceTemplateDeviceArgs', 'AttachFeatureDeviceTemplateDeviceArgsDict']]]] devices: Devices
        :param pulumi.Input[_builtins.int] version: The version of the device template
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _AttachFeatureDeviceTemplateState.__new__(_AttachFeatureDeviceTemplateState)

        __props__.__dict__["devices"] = devices
        __props__.__dict__["version"] = version
        return AttachFeatureDeviceTemplate(resource_name, opts=opts, __props__=__props__)

    @_builtins.property
    @pulumi.getter
    def devices(self) -> pulumi.Output[Sequence['outputs.AttachFeatureDeviceTemplateDevice']]:
        """
        Devices
        """
        return pulumi.get(self, "devices")

    @_builtins.property
    @pulumi.getter
    def version(self) -> pulumi.Output[Optional[_builtins.int]]:
        """
        The version of the device template
        """
        return pulumi.get(self, "version")

