# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities
from . import outputs
from ._inputs import *

__all__ = ['VpnInterfaceDslPppoeFeatureTemplateArgs', 'VpnInterfaceDslPppoeFeatureTemplate']

@pulumi.input_type
class VpnInterfaceDslPppoeFeatureTemplateArgs:
    def __init__(__self__, *,
                 description: pulumi.Input[_builtins.str],
                 device_types: pulumi.Input[Sequence[pulumi.Input[_builtins.str]]],
                 access_lists: Optional[pulumi.Input[Sequence[pulumi.Input['VpnInterfaceDslPppoeFeatureTemplateAccessListArgs']]]] = None,
                 bandwidth_downstream: Optional[pulumi.Input[_builtins.int]] = None,
                 bandwidth_downstream_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 bandwidth_upstream: Optional[pulumi.Input[_builtins.int]] = None,
                 bandwidth_upstream_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 chap_hostname: Optional[pulumi.Input[_builtins.str]] = None,
                 chap_hostname_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 chap_ppp_auth_password: Optional[pulumi.Input[_builtins.str]] = None,
                 chap_ppp_auth_password_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 core_region: Optional[pulumi.Input[_builtins.str]] = None,
                 core_region_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 enable_core_region: Optional[pulumi.Input[_builtins.bool]] = None,
                 enable_core_region_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 ethernet_description: Optional[pulumi.Input[_builtins.str]] = None,
                 ethernet_description_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 ethernet_dialer_address_negotiated: Optional[pulumi.Input[_builtins.bool]] = None,
                 ethernet_dialer_pool_number: Optional[pulumi.Input[_builtins.int]] = None,
                 ethernet_dialer_pool_number_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 ethernet_interface_name: Optional[pulumi.Input[_builtins.str]] = None,
                 ethernet_interface_name_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 ethernet_ppp_maximum_payload: Optional[pulumi.Input[_builtins.int]] = None,
                 ethernet_ppp_maximum_payload_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 ethernet_unnumbered_loopback_interface: Optional[pulumi.Input[_builtins.str]] = None,
                 ethernet_unnumbered_loopback_interface_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 ethernet_vlan_id: Optional[pulumi.Input[_builtins.int]] = None,
                 ethernet_vlan_id_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 ip_directed_broadcast: Optional[pulumi.Input[_builtins.bool]] = None,
                 ip_directed_broadcast_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 ip_mtu: Optional[pulumi.Input[_builtins.int]] = None,
                 ip_mtu_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 nat: Optional[pulumi.Input[_builtins.bool]] = None,
                 nat_block_icmp_error: Optional[pulumi.Input[_builtins.bool]] = None,
                 nat_block_icmp_error_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 nat_port_forwards: Optional[pulumi.Input[Sequence[pulumi.Input['VpnInterfaceDslPppoeFeatureTemplateNatPortForwardArgs']]]] = None,
                 nat_refresh_mode: Optional[pulumi.Input[_builtins.str]] = None,
                 nat_refresh_mode_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 nat_response_to_ping: Optional[pulumi.Input[_builtins.bool]] = None,
                 nat_response_to_ping_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 nat_tcp_timeout: Optional[pulumi.Input[_builtins.int]] = None,
                 nat_tcp_timeout_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 nat_udp_timeout: Optional[pulumi.Input[_builtins.int]] = None,
                 nat_udp_timeout_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 pap_password: Optional[pulumi.Input[_builtins.bool]] = None,
                 pap_ppp_auth_password: Optional[pulumi.Input[_builtins.str]] = None,
                 pap_ppp_auth_password_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 pap_username: Optional[pulumi.Input[_builtins.str]] = None,
                 pap_username_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 per_tunnel_qos: Optional[pulumi.Input[_builtins.bool]] = None,
                 per_tunnel_qos_aggregator: Optional[pulumi.Input[_builtins.bool]] = None,
                 per_tunnel_qos_aggregator_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 per_tunnel_qos_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 policers: Optional[pulumi.Input[Sequence[pulumi.Input['VpnInterfaceDslPppoeFeatureTemplatePolicerArgs']]]] = None,
                 ppp_authentication_protocol: Optional[pulumi.Input[_builtins.str]] = None,
                 ppp_authentication_protocol_pap: Optional[pulumi.Input[_builtins.bool]] = None,
                 ppp_authentication_protocol_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 ppp_authentication_type: Optional[pulumi.Input[_builtins.str]] = None,
                 qos_adaptive_bandwidth_downstream: Optional[pulumi.Input[_builtins.int]] = None,
                 qos_adaptive_bandwidth_downstream_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 qos_adaptive_bandwidth_upstream: Optional[pulumi.Input[_builtins.int]] = None,
                 qos_adaptive_bandwidth_upstream_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 qos_adaptive_max_downstream: Optional[pulumi.Input[_builtins.int]] = None,
                 qos_adaptive_max_downstream_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 qos_adaptive_max_upstream: Optional[pulumi.Input[_builtins.int]] = None,
                 qos_adaptive_max_upstream_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 qos_adaptive_min_downstream: Optional[pulumi.Input[_builtins.int]] = None,
                 qos_adaptive_min_downstream_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 qos_adaptive_min_upstream: Optional[pulumi.Input[_builtins.int]] = None,
                 qos_adaptive_min_upstream_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 qos_adaptive_period: Optional[pulumi.Input[_builtins.int]] = None,
                 qos_adaptive_period_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 qos_map: Optional[pulumi.Input[_builtins.str]] = None,
                 qos_map_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 secondary_region: Optional[pulumi.Input[_builtins.str]] = None,
                 secondary_region_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 shaping_rate: Optional[pulumi.Input[_builtins.int]] = None,
                 shaping_rate_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 shutdown: Optional[pulumi.Input[_builtins.bool]] = None,
                 shutdown_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 tcp_mss: Optional[pulumi.Input[_builtins.int]] = None,
                 tcp_mss_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 tloc_extension: Optional[pulumi.Input[_builtins.str]] = None,
                 tloc_extension_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 tracker_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 trackers: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 tunnel_interface_allow_all: Optional[pulumi.Input[_builtins.bool]] = None,
                 tunnel_interface_allow_all_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 tunnel_interface_allow_bgp: Optional[pulumi.Input[_builtins.bool]] = None,
                 tunnel_interface_allow_bgp_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 tunnel_interface_allow_dhcp: Optional[pulumi.Input[_builtins.bool]] = None,
                 tunnel_interface_allow_dhcp_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 tunnel_interface_allow_dns: Optional[pulumi.Input[_builtins.bool]] = None,
                 tunnel_interface_allow_dns_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 tunnel_interface_allow_https: Optional[pulumi.Input[_builtins.bool]] = None,
                 tunnel_interface_allow_https_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 tunnel_interface_allow_icmp: Optional[pulumi.Input[_builtins.bool]] = None,
                 tunnel_interface_allow_icmp_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 tunnel_interface_allow_netconf: Optional[pulumi.Input[_builtins.bool]] = None,
                 tunnel_interface_allow_netconf_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 tunnel_interface_allow_ntp: Optional[pulumi.Input[_builtins.bool]] = None,
                 tunnel_interface_allow_ntp_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 tunnel_interface_allow_ospf: Optional[pulumi.Input[_builtins.bool]] = None,
                 tunnel_interface_allow_ospf_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 tunnel_interface_allow_snmp: Optional[pulumi.Input[_builtins.bool]] = None,
                 tunnel_interface_allow_snmp_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 tunnel_interface_allow_ssh: Optional[pulumi.Input[_builtins.bool]] = None,
                 tunnel_interface_allow_ssh_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 tunnel_interface_allow_stun: Optional[pulumi.Input[_builtins.bool]] = None,
                 tunnel_interface_allow_stun_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 tunnel_interface_bind_loopback_tunnel: Optional[pulumi.Input[_builtins.str]] = None,
                 tunnel_interface_bind_loopback_tunnel_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 tunnel_interface_border: Optional[pulumi.Input[_builtins.bool]] = None,
                 tunnel_interface_border_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 tunnel_interface_carrier: Optional[pulumi.Input[_builtins.str]] = None,
                 tunnel_interface_carrier_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 tunnel_interface_clear_dont_fragment: Optional[pulumi.Input[_builtins.bool]] = None,
                 tunnel_interface_clear_dont_fragment_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 tunnel_interface_color: Optional[pulumi.Input[_builtins.str]] = None,
                 tunnel_interface_color_restrict: Optional[pulumi.Input[_builtins.bool]] = None,
                 tunnel_interface_color_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 tunnel_interface_control_connections: Optional[pulumi.Input[_builtins.bool]] = None,
                 tunnel_interface_control_connections_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 tunnel_interface_encapsulations: Optional[pulumi.Input[Sequence[pulumi.Input['VpnInterfaceDslPppoeFeatureTemplateTunnelInterfaceEncapsulationArgs']]]] = None,
                 tunnel_interface_exclude_controller_group_list_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 tunnel_interface_exclude_controller_group_lists: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.int]]]] = None,
                 tunnel_interface_groups: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.int]]]] = None,
                 tunnel_interface_groups_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 tunnel_interface_hello_interval: Optional[pulumi.Input[_builtins.int]] = None,
                 tunnel_interface_hello_interval_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 tunnel_interface_hello_tolerance: Optional[pulumi.Input[_builtins.int]] = None,
                 tunnel_interface_hello_tolerance_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 tunnel_interface_last_resort_circuit: Optional[pulumi.Input[_builtins.bool]] = None,
                 tunnel_interface_last_resort_circuit_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 tunnel_interface_low_bandwidth_link: Optional[pulumi.Input[_builtins.bool]] = None,
                 tunnel_interface_low_bandwidth_link_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 tunnel_interface_max_control_connections: Optional[pulumi.Input[_builtins.int]] = None,
                 tunnel_interface_max_control_connections_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 tunnel_interface_nat_refresh_interval: Optional[pulumi.Input[_builtins.int]] = None,
                 tunnel_interface_nat_refresh_interval_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 tunnel_interface_network_broadcast: Optional[pulumi.Input[_builtins.bool]] = None,
                 tunnel_interface_network_broadcast_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 tunnel_interface_port_hop: Optional[pulumi.Input[_builtins.bool]] = None,
                 tunnel_interface_port_hop_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 tunnel_interface_tunnel_tcp_mss: Optional[pulumi.Input[_builtins.int]] = None,
                 tunnel_interface_tunnel_tcp_mss_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 tunnel_interface_vbond_as_stun_server: Optional[pulumi.Input[_builtins.bool]] = None,
                 tunnel_interface_vbond_as_stun_server_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 tunnel_interface_vmanage_connection_preference: Optional[pulumi.Input[_builtins.int]] = None,
                 tunnel_interface_vmanage_connection_preference_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 tunnel_qos_mode: Optional[pulumi.Input[_builtins.str]] = None,
                 tunnel_qos_mode_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 vdsl_configurations: Optional[pulumi.Input[Sequence[pulumi.Input['VpnInterfaceDslPppoeFeatureTemplateVdslConfigurationArgs']]]] = None,
                 vpn_qos_map: Optional[pulumi.Input[_builtins.str]] = None,
                 vpn_qos_map_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 write_rule: Optional[pulumi.Input[_builtins.str]] = None,
                 write_rule_variable: Optional[pulumi.Input[_builtins.str]] = None):
        """
        The set of arguments for constructing a VpnInterfaceDslPppoeFeatureTemplate resource.
        :param pulumi.Input[_builtins.str] description: The description of the feature template
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] device_types: List of supported device types
                 - Choices: `vedge-C8000V`, `vedge-C8300-1N1S-4T2X`, `vedge-C8300-1N1S-6T`, `vedge-C8300-2N2S-6T`, `vedge-C8300-2N2S-4T2X`, `vedge-C8500-12X4QC`, `vedge-C8500-12X`, `vedge-C8500-20X6C`, `vedge-C8500L-8S4X`, `vedge-C8200-1N-4T`, `vedge-C8200L-1N-4T`
        :param pulumi.Input[Sequence[pulumi.Input['VpnInterfaceDslPppoeFeatureTemplateAccessListArgs']]] access_lists: Apply ACL
        :param pulumi.Input[_builtins.int] bandwidth_downstream: Interface downstream bandwidth capacity, in kbps
                 - Range: `1`-`2147483647`
        :param pulumi.Input[_builtins.str] bandwidth_downstream_variable: Variable name
        :param pulumi.Input[_builtins.int] bandwidth_upstream: Interface upstream bandwidth capacity, in kbps
                 - Range: `1`-`2147483647`
        :param pulumi.Input[_builtins.str] bandwidth_upstream_variable: Variable name
        :param pulumi.Input[_builtins.str] chap_hostname: CHAP Hostname
        :param pulumi.Input[_builtins.str] chap_hostname_variable: Variable name
        :param pulumi.Input[_builtins.str] chap_ppp_auth_password: Specify ppp chap authentication Password
        :param pulumi.Input[_builtins.str] chap_ppp_auth_password_variable: Variable name
        :param pulumi.Input[_builtins.str] core_region: Enable core region
                 - Choices: `core`, `core-shared`
                 - Default value: `core`
        :param pulumi.Input[_builtins.str] core_region_variable: Variable name
        :param pulumi.Input[_builtins.bool] enable_core_region: Enable core region
                 - Default value: `false`
        :param pulumi.Input[_builtins.str] enable_core_region_variable: Variable name
        :param pulumi.Input[_builtins.str] ethernet_description: Interface description
        :param pulumi.Input[_builtins.str] ethernet_description_variable: Variable name
        :param pulumi.Input[_builtins.bool] ethernet_dialer_address_negotiated: Dialer IP Negotiated
                 - Default value: `false`
        :param pulumi.Input[_builtins.int] ethernet_dialer_pool_number: Dialer pool number
                 - Range: `1`-`255`
        :param pulumi.Input[_builtins.str] ethernet_dialer_pool_number_variable: Variable name
        :param pulumi.Input[_builtins.str] ethernet_interface_name: Ethernet Interface/Sub Interface Name including sub interface number
        :param pulumi.Input[_builtins.str] ethernet_interface_name_variable: Variable name
        :param pulumi.Input[_builtins.int] ethernet_ppp_maximum_payload: Maximum MRU to be negotiated during PPP LCP negotiation
                 - Range: `64`-`1792`
        :param pulumi.Input[_builtins.str] ethernet_ppp_maximum_payload_variable: Variable name
        :param pulumi.Input[_builtins.str] ethernet_unnumbered_loopback_interface: Dialer IP Unnumbered Loopback interface name
        :param pulumi.Input[_builtins.str] ethernet_unnumbered_loopback_interface_variable: Variable name
        :param pulumi.Input[_builtins.int] ethernet_vlan_id: Encapsulation VLAN id
                 - Range: `1`-`4094`
        :param pulumi.Input[_builtins.str] ethernet_vlan_id_variable: Variable name
        :param pulumi.Input[_builtins.bool] ip_directed_broadcast: IP Directed-Broadcast
                 - Default value: `false`
        :param pulumi.Input[_builtins.str] ip_directed_broadcast_variable: Variable name
        :param pulumi.Input[_builtins.int] ip_mtu: Interface MTU <576..2000>, in bytes
                 - Range: `576`-`2000`
                 - Default value: `1500`
        :param pulumi.Input[_builtins.str] ip_mtu_variable: Variable name
        :param pulumi.Input[_builtins.str] name: The name of the feature template
        :param pulumi.Input[_builtins.bool] nat: Network Address Translation on this interface
                 - Default value: `false`
        :param pulumi.Input[_builtins.bool] nat_block_icmp_error: Block inbound ICMP error messages
                 - Default value: `true`
        :param pulumi.Input[_builtins.str] nat_block_icmp_error_variable: Variable name
        :param pulumi.Input[Sequence[pulumi.Input['VpnInterfaceDslPppoeFeatureTemplateNatPortForwardArgs']]] nat_port_forwards: Set port-forwarding rules for NAT on this interface
        :param pulumi.Input[_builtins.str] nat_refresh_mode: Set NAT refresh mode
                 - Choices: `outbound`, `bi-directional`
                 - Default value: `outbound`
        :param pulumi.Input[_builtins.str] nat_refresh_mode_variable: Variable name
        :param pulumi.Input[_builtins.bool] nat_response_to_ping: Respond to ping requests to NAT interface ip address from the public side
                 - Default value: `false`
        :param pulumi.Input[_builtins.str] nat_response_to_ping_variable: Variable name
        :param pulumi.Input[_builtins.int] nat_tcp_timeout: Set NAT TCP session timeout, in minutes
                 - Range: `1`-`8947`
                 - Default value: `60`
        :param pulumi.Input[_builtins.str] nat_tcp_timeout_variable: Variable name
        :param pulumi.Input[_builtins.int] nat_udp_timeout: Set NAT UDP session timeout, in minutes
                 - Range: `1`-`8947`
                 - Default value: `1`
        :param pulumi.Input[_builtins.str] nat_udp_timeout_variable: Variable name
        :param pulumi.Input[_builtins.bool] pap_password: PAP outbound Password
        :param pulumi.Input[_builtins.str] pap_ppp_auth_password: Specify ppp pap authentication Password
        :param pulumi.Input[_builtins.str] pap_ppp_auth_password_variable: Variable name
        :param pulumi.Input[_builtins.str] pap_username: PAP outbound Sent Username
        :param pulumi.Input[_builtins.str] pap_username_variable: Variable name
        :param pulumi.Input[_builtins.bool] per_tunnel_qos: Per-tunnel Qos
                 - Default value: `false`
        :param pulumi.Input[_builtins.bool] per_tunnel_qos_aggregator: Per-tunnel QoS Aggregator
                 - Default value: `false`
        :param pulumi.Input[_builtins.str] per_tunnel_qos_aggregator_variable: Variable name
        :param pulumi.Input[_builtins.str] per_tunnel_qos_variable: Variable name
        :param pulumi.Input[Sequence[pulumi.Input['VpnInterfaceDslPppoeFeatureTemplatePolicerArgs']]] policers: Enable policer
        :param pulumi.Input[_builtins.str] ppp_authentication_protocol: PPP Link Authentication Protocol
                 - Choices: `chap`, `pap`
        :param pulumi.Input[_builtins.bool] ppp_authentication_protocol_pap: PPP Authentication Protocol PAP
                 - Default value: `false`
        :param pulumi.Input[_builtins.str] ppp_authentication_protocol_variable: Variable name
        :param pulumi.Input[_builtins.str] ppp_authentication_type: Authenticate remote on incoming call only
                 - Choices: `callin`, `false`
                 - Default value: `callin`
        :param pulumi.Input[_builtins.int] qos_adaptive_bandwidth_downstream: Adaptive QoS default downstream bandwidth
                 - Range: `8`-`100000000`
        :param pulumi.Input[_builtins.str] qos_adaptive_bandwidth_downstream_variable: Variable name
        :param pulumi.Input[_builtins.int] qos_adaptive_bandwidth_upstream: Adaptive QoS default upstream bandwidth
                 - Range: `8`-`100000000`
        :param pulumi.Input[_builtins.str] qos_adaptive_bandwidth_upstream_variable: Variable name
        :param pulumi.Input[_builtins.int] qos_adaptive_max_downstream: Downstream max bandwidth limit
                 - Range: `8`-`100000000`
        :param pulumi.Input[_builtins.str] qos_adaptive_max_downstream_variable: Variable name
        :param pulumi.Input[_builtins.int] qos_adaptive_max_upstream: Upstream max bandwidth limit
                 - Range: `8`-`100000000`
        :param pulumi.Input[_builtins.str] qos_adaptive_max_upstream_variable: Variable name
        :param pulumi.Input[_builtins.int] qos_adaptive_min_downstream: Downstream min bandwidth limit
                 - Range: `8`-`100000000`
        :param pulumi.Input[_builtins.str] qos_adaptive_min_downstream_variable: Variable name
        :param pulumi.Input[_builtins.int] qos_adaptive_min_upstream: Upstream min bandwidth limit
                 - Range: `8`-`100000000`
        :param pulumi.Input[_builtins.str] qos_adaptive_min_upstream_variable: Variable name
        :param pulumi.Input[_builtins.int] qos_adaptive_period: Periodic timer for adaptive QoS in minutes
                 - Range: `1`-`720`
                 - Default value: `15`
        :param pulumi.Input[_builtins.str] qos_adaptive_period_variable: Variable name
        :param pulumi.Input[_builtins.str] qos_map: Name of QoS map
        :param pulumi.Input[_builtins.str] qos_map_variable: Variable name
        :param pulumi.Input[_builtins.str] secondary_region: Enable secondary region
                 - Choices: `off`, `secondary-only`, `secondary-shared`
                 - Default value: `off`
        :param pulumi.Input[_builtins.str] secondary_region_variable: Variable name
        :param pulumi.Input[_builtins.int] shaping_rate: 1ge  interfaces: [0..1000000]kbps; 10ge interfaces: [0..10000000]kbps
                 - Range: `8`-`100000000`
        :param pulumi.Input[_builtins.str] shaping_rate_variable: Variable name
        :param pulumi.Input[_builtins.bool] shutdown: Administrative state
                 - Default value: `true`
        :param pulumi.Input[_builtins.str] shutdown_variable: Variable name
        :param pulumi.Input[_builtins.int] tcp_mss: TCP MSS on SYN packets, in bytes
                 - Range: `552`-`1960`
        :param pulumi.Input[_builtins.str] tcp_mss_variable: Variable name
        :param pulumi.Input[_builtins.str] tloc_extension: Extends a local TLOC to a remote node only for vpn 0
        :param pulumi.Input[_builtins.str] tloc_extension_variable: Variable name
        :param pulumi.Input[_builtins.str] tracker_variable: Variable name
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] trackers: Enable tracker for this interface
        :param pulumi.Input[_builtins.bool] tunnel_interface_allow_all: Allow all traffic. Overrides all other allow-service options if allow-service all is set
                 - Default value: `false`
        :param pulumi.Input[_builtins.str] tunnel_interface_allow_all_variable: Variable name
        :param pulumi.Input[_builtins.bool] tunnel_interface_allow_bgp: Allow/deny BGP
                 - Default value: `false`
        :param pulumi.Input[_builtins.str] tunnel_interface_allow_bgp_variable: Variable name
        :param pulumi.Input[_builtins.bool] tunnel_interface_allow_dhcp: Allow/Deny DHCP
                 - Default value: `true`
        :param pulumi.Input[_builtins.str] tunnel_interface_allow_dhcp_variable: Variable name
        :param pulumi.Input[_builtins.bool] tunnel_interface_allow_dns: Allow/Deny DNS
                 - Default value: `true`
        :param pulumi.Input[_builtins.str] tunnel_interface_allow_dns_variable: Variable name
        :param pulumi.Input[_builtins.bool] tunnel_interface_allow_https: Allow/Deny Https
                 - Default value: `false`
        :param pulumi.Input[_builtins.str] tunnel_interface_allow_https_variable: Variable name
        :param pulumi.Input[_builtins.bool] tunnel_interface_allow_icmp: Allow/Deny ICMP
                 - Default value: `true`
        :param pulumi.Input[_builtins.str] tunnel_interface_allow_icmp_variable: Variable name
        :param pulumi.Input[_builtins.bool] tunnel_interface_allow_netconf: Allow/Deny NETCONF
                 - Default value: `false`
        :param pulumi.Input[_builtins.str] tunnel_interface_allow_netconf_variable: Variable name
        :param pulumi.Input[_builtins.bool] tunnel_interface_allow_ntp: Allow/Deny NTP
                 - Default value: `false`
        :param pulumi.Input[_builtins.str] tunnel_interface_allow_ntp_variable: Variable name
        :param pulumi.Input[_builtins.bool] tunnel_interface_allow_ospf: Allow/Deny OSPF
                 - Default value: `false`
        :param pulumi.Input[_builtins.str] tunnel_interface_allow_ospf_variable: Variable name
        :param pulumi.Input[_builtins.bool] tunnel_interface_allow_snmp: Allow/Deny SNMP
                 - Default value: `false`
        :param pulumi.Input[_builtins.str] tunnel_interface_allow_snmp_variable: Variable name
        :param pulumi.Input[_builtins.bool] tunnel_interface_allow_ssh: Allow/Deny SSH
                 - Default value: `false`
        :param pulumi.Input[_builtins.str] tunnel_interface_allow_ssh_variable: Variable name
        :param pulumi.Input[_builtins.bool] tunnel_interface_allow_stun: Allow/Deny STUN
                 - Default value: `false`
        :param pulumi.Input[_builtins.str] tunnel_interface_allow_stun_variable: Variable name
        :param pulumi.Input[_builtins.str] tunnel_interface_bind_loopback_tunnel: Bind loopback tunnel interface to a physical interface
        :param pulumi.Input[_builtins.str] tunnel_interface_bind_loopback_tunnel_variable: Variable name
        :param pulumi.Input[_builtins.bool] tunnel_interface_border: Set TLOC as border TLOC
                 - Default value: `false`
        :param pulumi.Input[_builtins.str] tunnel_interface_border_variable: Variable name
        :param pulumi.Input[_builtins.str] tunnel_interface_carrier: Set carrier for TLOC
                 - Choices: `default`, `carrier1`, `carrier2`, `carrier3`, `carrier4`, `carrier5`, `carrier6`, `carrier7`, `carrier8`
                 - Default value: `default`
        :param pulumi.Input[_builtins.str] tunnel_interface_carrier_variable: Variable name
        :param pulumi.Input[_builtins.bool] tunnel_interface_clear_dont_fragment: Enable clear dont fragment (Currently Only SDWAN Tunnel Interface)
                 - Default value: `false`
        :param pulumi.Input[_builtins.str] tunnel_interface_clear_dont_fragment_variable: Variable name
        :param pulumi.Input[_builtins.str] tunnel_interface_color: Set color for TLOC
                 - Choices: `default`, `mpls`, `metro-ethernet`, `biz-internet`, `public-internet`, `lte`, `3g`, `red`, `green`, `blue`, `gold`, `silver`, `bronze`, `custom1`, `custom2`, `custom3`, `private1`, `private2`, `private3`, `private4`, `private5`, `private6`
                 - Default value: `default`
        :param pulumi.Input[_builtins.bool] tunnel_interface_color_restrict: Restrict this TLOC behavior
                 - Default value: `false`
        :param pulumi.Input[_builtins.str] tunnel_interface_color_variable: Variable name
        :param pulumi.Input[_builtins.bool] tunnel_interface_control_connections: Allow Control Connection
                 - Default value: `true`
        :param pulumi.Input[_builtins.str] tunnel_interface_control_connections_variable: Variable name
        :param pulumi.Input[Sequence[pulumi.Input['VpnInterfaceDslPppoeFeatureTemplateTunnelInterfaceEncapsulationArgs']]] tunnel_interface_encapsulations: Encapsulation for TLOC
        :param pulumi.Input[_builtins.str] tunnel_interface_exclude_controller_group_list_variable: Variable name
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.int]]] tunnel_interface_exclude_controller_group_lists: Exclude the following controller groups defined in this list
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.int]]] tunnel_interface_groups: List of groups
        :param pulumi.Input[_builtins.str] tunnel_interface_groups_variable: Variable name
        :param pulumi.Input[_builtins.int] tunnel_interface_hello_interval: Set time period of control hello packets <100..600000> milli seconds
                 - Range: `100`-`600000`
                 - Default value: `1000`
        :param pulumi.Input[_builtins.str] tunnel_interface_hello_interval_variable: Variable name
        :param pulumi.Input[_builtins.int] tunnel_interface_hello_tolerance: Set tolerance of control hello packets <12..6000> seconds
                 - Range: `12`-`6000`
                 - Default value: `12`
        :param pulumi.Input[_builtins.str] tunnel_interface_hello_tolerance_variable: Variable name
        :param pulumi.Input[_builtins.bool] tunnel_interface_last_resort_circuit: Set TLOC as last resort
                 - Default value: `false`
        :param pulumi.Input[_builtins.str] tunnel_interface_last_resort_circuit_variable: Variable name
        :param pulumi.Input[_builtins.bool] tunnel_interface_low_bandwidth_link: Set the interface as a low-bandwidth circuit
                 - Default value: `false`
        :param pulumi.Input[_builtins.str] tunnel_interface_low_bandwidth_link_variable: Variable name
        :param pulumi.Input[_builtins.int] tunnel_interface_max_control_connections: Set the maximum number of control connections for this TLOC
                 - Range: `0`-`8`
        :param pulumi.Input[_builtins.str] tunnel_interface_max_control_connections_variable: Variable name
        :param pulumi.Input[_builtins.int] tunnel_interface_nat_refresh_interval: Set time period of nat refresh packets <1...60> seconds
                 - Range: `1`-`60`
                 - Default value: `5`
        :param pulumi.Input[_builtins.str] tunnel_interface_nat_refresh_interval_variable: Variable name
        :param pulumi.Input[_builtins.bool] tunnel_interface_network_broadcast: Accept and respond to network-prefix-directed broadcasts)
                 - Default value: `false`
        :param pulumi.Input[_builtins.str] tunnel_interface_network_broadcast_variable: Variable name
        :param pulumi.Input[_builtins.bool] tunnel_interface_port_hop: Disallow port hopping on the tunnel interface
                 - Default value: `true`
        :param pulumi.Input[_builtins.str] tunnel_interface_port_hop_variable: Variable name
        :param pulumi.Input[_builtins.int] tunnel_interface_tunnel_tcp_mss: Tunnel TCP MSS on SYN packets, in bytes
                 - Range: `500`-`1460`
        :param pulumi.Input[_builtins.str] tunnel_interface_tunnel_tcp_mss_variable: Variable name
        :param pulumi.Input[_builtins.bool] tunnel_interface_vbond_as_stun_server: Put this wan interface in STUN mode only
                 - Default value: `false`
        :param pulumi.Input[_builtins.str] tunnel_interface_vbond_as_stun_server_variable: Variable name
        :param pulumi.Input[_builtins.int] tunnel_interface_vmanage_connection_preference: Set interface preference for control connection to vManage <0..8>
                 - Range: `0`-`8`
                 - Default value: `5`
        :param pulumi.Input[_builtins.str] tunnel_interface_vmanage_connection_preference_variable: Variable name
        :param pulumi.Input[_builtins.str] tunnel_qos_mode: Set tunnel QoS mode
                 - Choices: `spoke`
        :param pulumi.Input[_builtins.str] tunnel_qos_mode_variable: Variable name
        :param pulumi.Input[Sequence[pulumi.Input['VpnInterfaceDslPppoeFeatureTemplateVdslConfigurationArgs']]] vdsl_configurations: vdsl
        :param pulumi.Input[_builtins.str] vpn_qos_map: Name of VPN QoS map
        :param pulumi.Input[_builtins.str] vpn_qos_map_variable: Variable name
        :param pulumi.Input[_builtins.str] write_rule: Name of rewrite rule
        :param pulumi.Input[_builtins.str] write_rule_variable: Variable name
        """
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "device_types", device_types)
        if access_lists is not None:
            pulumi.set(__self__, "access_lists", access_lists)
        if bandwidth_downstream is not None:
            pulumi.set(__self__, "bandwidth_downstream", bandwidth_downstream)
        if bandwidth_downstream_variable is not None:
            pulumi.set(__self__, "bandwidth_downstream_variable", bandwidth_downstream_variable)
        if bandwidth_upstream is not None:
            pulumi.set(__self__, "bandwidth_upstream", bandwidth_upstream)
        if bandwidth_upstream_variable is not None:
            pulumi.set(__self__, "bandwidth_upstream_variable", bandwidth_upstream_variable)
        if chap_hostname is not None:
            pulumi.set(__self__, "chap_hostname", chap_hostname)
        if chap_hostname_variable is not None:
            pulumi.set(__self__, "chap_hostname_variable", chap_hostname_variable)
        if chap_ppp_auth_password is not None:
            pulumi.set(__self__, "chap_ppp_auth_password", chap_ppp_auth_password)
        if chap_ppp_auth_password_variable is not None:
            pulumi.set(__self__, "chap_ppp_auth_password_variable", chap_ppp_auth_password_variable)
        if core_region is not None:
            pulumi.set(__self__, "core_region", core_region)
        if core_region_variable is not None:
            pulumi.set(__self__, "core_region_variable", core_region_variable)
        if enable_core_region is not None:
            pulumi.set(__self__, "enable_core_region", enable_core_region)
        if enable_core_region_variable is not None:
            pulumi.set(__self__, "enable_core_region_variable", enable_core_region_variable)
        if ethernet_description is not None:
            pulumi.set(__self__, "ethernet_description", ethernet_description)
        if ethernet_description_variable is not None:
            pulumi.set(__self__, "ethernet_description_variable", ethernet_description_variable)
        if ethernet_dialer_address_negotiated is not None:
            pulumi.set(__self__, "ethernet_dialer_address_negotiated", ethernet_dialer_address_negotiated)
        if ethernet_dialer_pool_number is not None:
            pulumi.set(__self__, "ethernet_dialer_pool_number", ethernet_dialer_pool_number)
        if ethernet_dialer_pool_number_variable is not None:
            pulumi.set(__self__, "ethernet_dialer_pool_number_variable", ethernet_dialer_pool_number_variable)
        if ethernet_interface_name is not None:
            pulumi.set(__self__, "ethernet_interface_name", ethernet_interface_name)
        if ethernet_interface_name_variable is not None:
            pulumi.set(__self__, "ethernet_interface_name_variable", ethernet_interface_name_variable)
        if ethernet_ppp_maximum_payload is not None:
            pulumi.set(__self__, "ethernet_ppp_maximum_payload", ethernet_ppp_maximum_payload)
        if ethernet_ppp_maximum_payload_variable is not None:
            pulumi.set(__self__, "ethernet_ppp_maximum_payload_variable", ethernet_ppp_maximum_payload_variable)
        if ethernet_unnumbered_loopback_interface is not None:
            pulumi.set(__self__, "ethernet_unnumbered_loopback_interface", ethernet_unnumbered_loopback_interface)
        if ethernet_unnumbered_loopback_interface_variable is not None:
            pulumi.set(__self__, "ethernet_unnumbered_loopback_interface_variable", ethernet_unnumbered_loopback_interface_variable)
        if ethernet_vlan_id is not None:
            pulumi.set(__self__, "ethernet_vlan_id", ethernet_vlan_id)
        if ethernet_vlan_id_variable is not None:
            pulumi.set(__self__, "ethernet_vlan_id_variable", ethernet_vlan_id_variable)
        if ip_directed_broadcast is not None:
            pulumi.set(__self__, "ip_directed_broadcast", ip_directed_broadcast)
        if ip_directed_broadcast_variable is not None:
            pulumi.set(__self__, "ip_directed_broadcast_variable", ip_directed_broadcast_variable)
        if ip_mtu is not None:
            pulumi.set(__self__, "ip_mtu", ip_mtu)
        if ip_mtu_variable is not None:
            pulumi.set(__self__, "ip_mtu_variable", ip_mtu_variable)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if nat is not None:
            pulumi.set(__self__, "nat", nat)
        if nat_block_icmp_error is not None:
            pulumi.set(__self__, "nat_block_icmp_error", nat_block_icmp_error)
        if nat_block_icmp_error_variable is not None:
            pulumi.set(__self__, "nat_block_icmp_error_variable", nat_block_icmp_error_variable)
        if nat_port_forwards is not None:
            pulumi.set(__self__, "nat_port_forwards", nat_port_forwards)
        if nat_refresh_mode is not None:
            pulumi.set(__self__, "nat_refresh_mode", nat_refresh_mode)
        if nat_refresh_mode_variable is not None:
            pulumi.set(__self__, "nat_refresh_mode_variable", nat_refresh_mode_variable)
        if nat_response_to_ping is not None:
            pulumi.set(__self__, "nat_response_to_ping", nat_response_to_ping)
        if nat_response_to_ping_variable is not None:
            pulumi.set(__self__, "nat_response_to_ping_variable", nat_response_to_ping_variable)
        if nat_tcp_timeout is not None:
            pulumi.set(__self__, "nat_tcp_timeout", nat_tcp_timeout)
        if nat_tcp_timeout_variable is not None:
            pulumi.set(__self__, "nat_tcp_timeout_variable", nat_tcp_timeout_variable)
        if nat_udp_timeout is not None:
            pulumi.set(__self__, "nat_udp_timeout", nat_udp_timeout)
        if nat_udp_timeout_variable is not None:
            pulumi.set(__self__, "nat_udp_timeout_variable", nat_udp_timeout_variable)
        if pap_password is not None:
            pulumi.set(__self__, "pap_password", pap_password)
        if pap_ppp_auth_password is not None:
            pulumi.set(__self__, "pap_ppp_auth_password", pap_ppp_auth_password)
        if pap_ppp_auth_password_variable is not None:
            pulumi.set(__self__, "pap_ppp_auth_password_variable", pap_ppp_auth_password_variable)
        if pap_username is not None:
            pulumi.set(__self__, "pap_username", pap_username)
        if pap_username_variable is not None:
            pulumi.set(__self__, "pap_username_variable", pap_username_variable)
        if per_tunnel_qos is not None:
            pulumi.set(__self__, "per_tunnel_qos", per_tunnel_qos)
        if per_tunnel_qos_aggregator is not None:
            pulumi.set(__self__, "per_tunnel_qos_aggregator", per_tunnel_qos_aggregator)
        if per_tunnel_qos_aggregator_variable is not None:
            pulumi.set(__self__, "per_tunnel_qos_aggregator_variable", per_tunnel_qos_aggregator_variable)
        if per_tunnel_qos_variable is not None:
            pulumi.set(__self__, "per_tunnel_qos_variable", per_tunnel_qos_variable)
        if policers is not None:
            pulumi.set(__self__, "policers", policers)
        if ppp_authentication_protocol is not None:
            pulumi.set(__self__, "ppp_authentication_protocol", ppp_authentication_protocol)
        if ppp_authentication_protocol_pap is not None:
            pulumi.set(__self__, "ppp_authentication_protocol_pap", ppp_authentication_protocol_pap)
        if ppp_authentication_protocol_variable is not None:
            pulumi.set(__self__, "ppp_authentication_protocol_variable", ppp_authentication_protocol_variable)
        if ppp_authentication_type is not None:
            pulumi.set(__self__, "ppp_authentication_type", ppp_authentication_type)
        if qos_adaptive_bandwidth_downstream is not None:
            pulumi.set(__self__, "qos_adaptive_bandwidth_downstream", qos_adaptive_bandwidth_downstream)
        if qos_adaptive_bandwidth_downstream_variable is not None:
            pulumi.set(__self__, "qos_adaptive_bandwidth_downstream_variable", qos_adaptive_bandwidth_downstream_variable)
        if qos_adaptive_bandwidth_upstream is not None:
            pulumi.set(__self__, "qos_adaptive_bandwidth_upstream", qos_adaptive_bandwidth_upstream)
        if qos_adaptive_bandwidth_upstream_variable is not None:
            pulumi.set(__self__, "qos_adaptive_bandwidth_upstream_variable", qos_adaptive_bandwidth_upstream_variable)
        if qos_adaptive_max_downstream is not None:
            pulumi.set(__self__, "qos_adaptive_max_downstream", qos_adaptive_max_downstream)
        if qos_adaptive_max_downstream_variable is not None:
            pulumi.set(__self__, "qos_adaptive_max_downstream_variable", qos_adaptive_max_downstream_variable)
        if qos_adaptive_max_upstream is not None:
            pulumi.set(__self__, "qos_adaptive_max_upstream", qos_adaptive_max_upstream)
        if qos_adaptive_max_upstream_variable is not None:
            pulumi.set(__self__, "qos_adaptive_max_upstream_variable", qos_adaptive_max_upstream_variable)
        if qos_adaptive_min_downstream is not None:
            pulumi.set(__self__, "qos_adaptive_min_downstream", qos_adaptive_min_downstream)
        if qos_adaptive_min_downstream_variable is not None:
            pulumi.set(__self__, "qos_adaptive_min_downstream_variable", qos_adaptive_min_downstream_variable)
        if qos_adaptive_min_upstream is not None:
            pulumi.set(__self__, "qos_adaptive_min_upstream", qos_adaptive_min_upstream)
        if qos_adaptive_min_upstream_variable is not None:
            pulumi.set(__self__, "qos_adaptive_min_upstream_variable", qos_adaptive_min_upstream_variable)
        if qos_adaptive_period is not None:
            pulumi.set(__self__, "qos_adaptive_period", qos_adaptive_period)
        if qos_adaptive_period_variable is not None:
            pulumi.set(__self__, "qos_adaptive_period_variable", qos_adaptive_period_variable)
        if qos_map is not None:
            pulumi.set(__self__, "qos_map", qos_map)
        if qos_map_variable is not None:
            pulumi.set(__self__, "qos_map_variable", qos_map_variable)
        if secondary_region is not None:
            pulumi.set(__self__, "secondary_region", secondary_region)
        if secondary_region_variable is not None:
            pulumi.set(__self__, "secondary_region_variable", secondary_region_variable)
        if shaping_rate is not None:
            pulumi.set(__self__, "shaping_rate", shaping_rate)
        if shaping_rate_variable is not None:
            pulumi.set(__self__, "shaping_rate_variable", shaping_rate_variable)
        if shutdown is not None:
            pulumi.set(__self__, "shutdown", shutdown)
        if shutdown_variable is not None:
            pulumi.set(__self__, "shutdown_variable", shutdown_variable)
        if tcp_mss is not None:
            pulumi.set(__self__, "tcp_mss", tcp_mss)
        if tcp_mss_variable is not None:
            pulumi.set(__self__, "tcp_mss_variable", tcp_mss_variable)
        if tloc_extension is not None:
            pulumi.set(__self__, "tloc_extension", tloc_extension)
        if tloc_extension_variable is not None:
            pulumi.set(__self__, "tloc_extension_variable", tloc_extension_variable)
        if tracker_variable is not None:
            pulumi.set(__self__, "tracker_variable", tracker_variable)
        if trackers is not None:
            pulumi.set(__self__, "trackers", trackers)
        if tunnel_interface_allow_all is not None:
            pulumi.set(__self__, "tunnel_interface_allow_all", tunnel_interface_allow_all)
        if tunnel_interface_allow_all_variable is not None:
            pulumi.set(__self__, "tunnel_interface_allow_all_variable", tunnel_interface_allow_all_variable)
        if tunnel_interface_allow_bgp is not None:
            pulumi.set(__self__, "tunnel_interface_allow_bgp", tunnel_interface_allow_bgp)
        if tunnel_interface_allow_bgp_variable is not None:
            pulumi.set(__self__, "tunnel_interface_allow_bgp_variable", tunnel_interface_allow_bgp_variable)
        if tunnel_interface_allow_dhcp is not None:
            pulumi.set(__self__, "tunnel_interface_allow_dhcp", tunnel_interface_allow_dhcp)
        if tunnel_interface_allow_dhcp_variable is not None:
            pulumi.set(__self__, "tunnel_interface_allow_dhcp_variable", tunnel_interface_allow_dhcp_variable)
        if tunnel_interface_allow_dns is not None:
            pulumi.set(__self__, "tunnel_interface_allow_dns", tunnel_interface_allow_dns)
        if tunnel_interface_allow_dns_variable is not None:
            pulumi.set(__self__, "tunnel_interface_allow_dns_variable", tunnel_interface_allow_dns_variable)
        if tunnel_interface_allow_https is not None:
            pulumi.set(__self__, "tunnel_interface_allow_https", tunnel_interface_allow_https)
        if tunnel_interface_allow_https_variable is not None:
            pulumi.set(__self__, "tunnel_interface_allow_https_variable", tunnel_interface_allow_https_variable)
        if tunnel_interface_allow_icmp is not None:
            pulumi.set(__self__, "tunnel_interface_allow_icmp", tunnel_interface_allow_icmp)
        if tunnel_interface_allow_icmp_variable is not None:
            pulumi.set(__self__, "tunnel_interface_allow_icmp_variable", tunnel_interface_allow_icmp_variable)
        if tunnel_interface_allow_netconf is not None:
            pulumi.set(__self__, "tunnel_interface_allow_netconf", tunnel_interface_allow_netconf)
        if tunnel_interface_allow_netconf_variable is not None:
            pulumi.set(__self__, "tunnel_interface_allow_netconf_variable", tunnel_interface_allow_netconf_variable)
        if tunnel_interface_allow_ntp is not None:
            pulumi.set(__self__, "tunnel_interface_allow_ntp", tunnel_interface_allow_ntp)
        if tunnel_interface_allow_ntp_variable is not None:
            pulumi.set(__self__, "tunnel_interface_allow_ntp_variable", tunnel_interface_allow_ntp_variable)
        if tunnel_interface_allow_ospf is not None:
            pulumi.set(__self__, "tunnel_interface_allow_ospf", tunnel_interface_allow_ospf)
        if tunnel_interface_allow_ospf_variable is not None:
            pulumi.set(__self__, "tunnel_interface_allow_ospf_variable", tunnel_interface_allow_ospf_variable)
        if tunnel_interface_allow_snmp is not None:
            pulumi.set(__self__, "tunnel_interface_allow_snmp", tunnel_interface_allow_snmp)
        if tunnel_interface_allow_snmp_variable is not None:
            pulumi.set(__self__, "tunnel_interface_allow_snmp_variable", tunnel_interface_allow_snmp_variable)
        if tunnel_interface_allow_ssh is not None:
            pulumi.set(__self__, "tunnel_interface_allow_ssh", tunnel_interface_allow_ssh)
        if tunnel_interface_allow_ssh_variable is not None:
            pulumi.set(__self__, "tunnel_interface_allow_ssh_variable", tunnel_interface_allow_ssh_variable)
        if tunnel_interface_allow_stun is not None:
            pulumi.set(__self__, "tunnel_interface_allow_stun", tunnel_interface_allow_stun)
        if tunnel_interface_allow_stun_variable is not None:
            pulumi.set(__self__, "tunnel_interface_allow_stun_variable", tunnel_interface_allow_stun_variable)
        if tunnel_interface_bind_loopback_tunnel is not None:
            pulumi.set(__self__, "tunnel_interface_bind_loopback_tunnel", tunnel_interface_bind_loopback_tunnel)
        if tunnel_interface_bind_loopback_tunnel_variable is not None:
            pulumi.set(__self__, "tunnel_interface_bind_loopback_tunnel_variable", tunnel_interface_bind_loopback_tunnel_variable)
        if tunnel_interface_border is not None:
            pulumi.set(__self__, "tunnel_interface_border", tunnel_interface_border)
        if tunnel_interface_border_variable is not None:
            pulumi.set(__self__, "tunnel_interface_border_variable", tunnel_interface_border_variable)
        if tunnel_interface_carrier is not None:
            pulumi.set(__self__, "tunnel_interface_carrier", tunnel_interface_carrier)
        if tunnel_interface_carrier_variable is not None:
            pulumi.set(__self__, "tunnel_interface_carrier_variable", tunnel_interface_carrier_variable)
        if tunnel_interface_clear_dont_fragment is not None:
            pulumi.set(__self__, "tunnel_interface_clear_dont_fragment", tunnel_interface_clear_dont_fragment)
        if tunnel_interface_clear_dont_fragment_variable is not None:
            pulumi.set(__self__, "tunnel_interface_clear_dont_fragment_variable", tunnel_interface_clear_dont_fragment_variable)
        if tunnel_interface_color is not None:
            pulumi.set(__self__, "tunnel_interface_color", tunnel_interface_color)
        if tunnel_interface_color_restrict is not None:
            pulumi.set(__self__, "tunnel_interface_color_restrict", tunnel_interface_color_restrict)
        if tunnel_interface_color_variable is not None:
            pulumi.set(__self__, "tunnel_interface_color_variable", tunnel_interface_color_variable)
        if tunnel_interface_control_connections is not None:
            pulumi.set(__self__, "tunnel_interface_control_connections", tunnel_interface_control_connections)
        if tunnel_interface_control_connections_variable is not None:
            pulumi.set(__self__, "tunnel_interface_control_connections_variable", tunnel_interface_control_connections_variable)
        if tunnel_interface_encapsulations is not None:
            pulumi.set(__self__, "tunnel_interface_encapsulations", tunnel_interface_encapsulations)
        if tunnel_interface_exclude_controller_group_list_variable is not None:
            pulumi.set(__self__, "tunnel_interface_exclude_controller_group_list_variable", tunnel_interface_exclude_controller_group_list_variable)
        if tunnel_interface_exclude_controller_group_lists is not None:
            pulumi.set(__self__, "tunnel_interface_exclude_controller_group_lists", tunnel_interface_exclude_controller_group_lists)
        if tunnel_interface_groups is not None:
            pulumi.set(__self__, "tunnel_interface_groups", tunnel_interface_groups)
        if tunnel_interface_groups_variable is not None:
            pulumi.set(__self__, "tunnel_interface_groups_variable", tunnel_interface_groups_variable)
        if tunnel_interface_hello_interval is not None:
            pulumi.set(__self__, "tunnel_interface_hello_interval", tunnel_interface_hello_interval)
        if tunnel_interface_hello_interval_variable is not None:
            pulumi.set(__self__, "tunnel_interface_hello_interval_variable", tunnel_interface_hello_interval_variable)
        if tunnel_interface_hello_tolerance is not None:
            pulumi.set(__self__, "tunnel_interface_hello_tolerance", tunnel_interface_hello_tolerance)
        if tunnel_interface_hello_tolerance_variable is not None:
            pulumi.set(__self__, "tunnel_interface_hello_tolerance_variable", tunnel_interface_hello_tolerance_variable)
        if tunnel_interface_last_resort_circuit is not None:
            pulumi.set(__self__, "tunnel_interface_last_resort_circuit", tunnel_interface_last_resort_circuit)
        if tunnel_interface_last_resort_circuit_variable is not None:
            pulumi.set(__self__, "tunnel_interface_last_resort_circuit_variable", tunnel_interface_last_resort_circuit_variable)
        if tunnel_interface_low_bandwidth_link is not None:
            pulumi.set(__self__, "tunnel_interface_low_bandwidth_link", tunnel_interface_low_bandwidth_link)
        if tunnel_interface_low_bandwidth_link_variable is not None:
            pulumi.set(__self__, "tunnel_interface_low_bandwidth_link_variable", tunnel_interface_low_bandwidth_link_variable)
        if tunnel_interface_max_control_connections is not None:
            pulumi.set(__self__, "tunnel_interface_max_control_connections", tunnel_interface_max_control_connections)
        if tunnel_interface_max_control_connections_variable is not None:
            pulumi.set(__self__, "tunnel_interface_max_control_connections_variable", tunnel_interface_max_control_connections_variable)
        if tunnel_interface_nat_refresh_interval is not None:
            pulumi.set(__self__, "tunnel_interface_nat_refresh_interval", tunnel_interface_nat_refresh_interval)
        if tunnel_interface_nat_refresh_interval_variable is not None:
            pulumi.set(__self__, "tunnel_interface_nat_refresh_interval_variable", tunnel_interface_nat_refresh_interval_variable)
        if tunnel_interface_network_broadcast is not None:
            pulumi.set(__self__, "tunnel_interface_network_broadcast", tunnel_interface_network_broadcast)
        if tunnel_interface_network_broadcast_variable is not None:
            pulumi.set(__self__, "tunnel_interface_network_broadcast_variable", tunnel_interface_network_broadcast_variable)
        if tunnel_interface_port_hop is not None:
            pulumi.set(__self__, "tunnel_interface_port_hop", tunnel_interface_port_hop)
        if tunnel_interface_port_hop_variable is not None:
            pulumi.set(__self__, "tunnel_interface_port_hop_variable", tunnel_interface_port_hop_variable)
        if tunnel_interface_tunnel_tcp_mss is not None:
            pulumi.set(__self__, "tunnel_interface_tunnel_tcp_mss", tunnel_interface_tunnel_tcp_mss)
        if tunnel_interface_tunnel_tcp_mss_variable is not None:
            pulumi.set(__self__, "tunnel_interface_tunnel_tcp_mss_variable", tunnel_interface_tunnel_tcp_mss_variable)
        if tunnel_interface_vbond_as_stun_server is not None:
            pulumi.set(__self__, "tunnel_interface_vbond_as_stun_server", tunnel_interface_vbond_as_stun_server)
        if tunnel_interface_vbond_as_stun_server_variable is not None:
            pulumi.set(__self__, "tunnel_interface_vbond_as_stun_server_variable", tunnel_interface_vbond_as_stun_server_variable)
        if tunnel_interface_vmanage_connection_preference is not None:
            pulumi.set(__self__, "tunnel_interface_vmanage_connection_preference", tunnel_interface_vmanage_connection_preference)
        if tunnel_interface_vmanage_connection_preference_variable is not None:
            pulumi.set(__self__, "tunnel_interface_vmanage_connection_preference_variable", tunnel_interface_vmanage_connection_preference_variable)
        if tunnel_qos_mode is not None:
            pulumi.set(__self__, "tunnel_qos_mode", tunnel_qos_mode)
        if tunnel_qos_mode_variable is not None:
            pulumi.set(__self__, "tunnel_qos_mode_variable", tunnel_qos_mode_variable)
        if vdsl_configurations is not None:
            pulumi.set(__self__, "vdsl_configurations", vdsl_configurations)
        if vpn_qos_map is not None:
            pulumi.set(__self__, "vpn_qos_map", vpn_qos_map)
        if vpn_qos_map_variable is not None:
            pulumi.set(__self__, "vpn_qos_map_variable", vpn_qos_map_variable)
        if write_rule is not None:
            pulumi.set(__self__, "write_rule", write_rule)
        if write_rule_variable is not None:
            pulumi.set(__self__, "write_rule_variable", write_rule_variable)

    @_builtins.property
    @pulumi.getter
    def description(self) -> pulumi.Input[_builtins.str]:
        """
        The description of the feature template
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "description", value)

    @_builtins.property
    @pulumi.getter(name="deviceTypes")
    def device_types(self) -> pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]:
        """
        List of supported device types
          - Choices: `vedge-C8000V`, `vedge-C8300-1N1S-4T2X`, `vedge-C8300-1N1S-6T`, `vedge-C8300-2N2S-6T`, `vedge-C8300-2N2S-4T2X`, `vedge-C8500-12X4QC`, `vedge-C8500-12X`, `vedge-C8500-20X6C`, `vedge-C8500L-8S4X`, `vedge-C8200-1N-4T`, `vedge-C8200L-1N-4T`
        """
        return pulumi.get(self, "device_types")

    @device_types.setter
    def device_types(self, value: pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]):
        pulumi.set(self, "device_types", value)

    @_builtins.property
    @pulumi.getter(name="accessLists")
    def access_lists(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['VpnInterfaceDslPppoeFeatureTemplateAccessListArgs']]]]:
        """
        Apply ACL
        """
        return pulumi.get(self, "access_lists")

    @access_lists.setter
    def access_lists(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['VpnInterfaceDslPppoeFeatureTemplateAccessListArgs']]]]):
        pulumi.set(self, "access_lists", value)

    @_builtins.property
    @pulumi.getter(name="bandwidthDownstream")
    def bandwidth_downstream(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        Interface downstream bandwidth capacity, in kbps
          - Range: `1`-`2147483647`
        """
        return pulumi.get(self, "bandwidth_downstream")

    @bandwidth_downstream.setter
    def bandwidth_downstream(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "bandwidth_downstream", value)

    @_builtins.property
    @pulumi.getter(name="bandwidthDownstreamVariable")
    def bandwidth_downstream_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "bandwidth_downstream_variable")

    @bandwidth_downstream_variable.setter
    def bandwidth_downstream_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "bandwidth_downstream_variable", value)

    @_builtins.property
    @pulumi.getter(name="bandwidthUpstream")
    def bandwidth_upstream(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        Interface upstream bandwidth capacity, in kbps
          - Range: `1`-`2147483647`
        """
        return pulumi.get(self, "bandwidth_upstream")

    @bandwidth_upstream.setter
    def bandwidth_upstream(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "bandwidth_upstream", value)

    @_builtins.property
    @pulumi.getter(name="bandwidthUpstreamVariable")
    def bandwidth_upstream_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "bandwidth_upstream_variable")

    @bandwidth_upstream_variable.setter
    def bandwidth_upstream_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "bandwidth_upstream_variable", value)

    @_builtins.property
    @pulumi.getter(name="chapHostname")
    def chap_hostname(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        CHAP Hostname
        """
        return pulumi.get(self, "chap_hostname")

    @chap_hostname.setter
    def chap_hostname(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "chap_hostname", value)

    @_builtins.property
    @pulumi.getter(name="chapHostnameVariable")
    def chap_hostname_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "chap_hostname_variable")

    @chap_hostname_variable.setter
    def chap_hostname_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "chap_hostname_variable", value)

    @_builtins.property
    @pulumi.getter(name="chapPppAuthPassword")
    def chap_ppp_auth_password(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specify ppp chap authentication Password
        """
        return pulumi.get(self, "chap_ppp_auth_password")

    @chap_ppp_auth_password.setter
    def chap_ppp_auth_password(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "chap_ppp_auth_password", value)

    @_builtins.property
    @pulumi.getter(name="chapPppAuthPasswordVariable")
    def chap_ppp_auth_password_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "chap_ppp_auth_password_variable")

    @chap_ppp_auth_password_variable.setter
    def chap_ppp_auth_password_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "chap_ppp_auth_password_variable", value)

    @_builtins.property
    @pulumi.getter(name="coreRegion")
    def core_region(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Enable core region
          - Choices: `core`, `core-shared`
          - Default value: `core`
        """
        return pulumi.get(self, "core_region")

    @core_region.setter
    def core_region(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "core_region", value)

    @_builtins.property
    @pulumi.getter(name="coreRegionVariable")
    def core_region_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "core_region_variable")

    @core_region_variable.setter
    def core_region_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "core_region_variable", value)

    @_builtins.property
    @pulumi.getter(name="enableCoreRegion")
    def enable_core_region(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Enable core region
          - Default value: `false`
        """
        return pulumi.get(self, "enable_core_region")

    @enable_core_region.setter
    def enable_core_region(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "enable_core_region", value)

    @_builtins.property
    @pulumi.getter(name="enableCoreRegionVariable")
    def enable_core_region_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "enable_core_region_variable")

    @enable_core_region_variable.setter
    def enable_core_region_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "enable_core_region_variable", value)

    @_builtins.property
    @pulumi.getter(name="ethernetDescription")
    def ethernet_description(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Interface description
        """
        return pulumi.get(self, "ethernet_description")

    @ethernet_description.setter
    def ethernet_description(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "ethernet_description", value)

    @_builtins.property
    @pulumi.getter(name="ethernetDescriptionVariable")
    def ethernet_description_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "ethernet_description_variable")

    @ethernet_description_variable.setter
    def ethernet_description_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "ethernet_description_variable", value)

    @_builtins.property
    @pulumi.getter(name="ethernetDialerAddressNegotiated")
    def ethernet_dialer_address_negotiated(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Dialer IP Negotiated
          - Default value: `false`
        """
        return pulumi.get(self, "ethernet_dialer_address_negotiated")

    @ethernet_dialer_address_negotiated.setter
    def ethernet_dialer_address_negotiated(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "ethernet_dialer_address_negotiated", value)

    @_builtins.property
    @pulumi.getter(name="ethernetDialerPoolNumber")
    def ethernet_dialer_pool_number(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        Dialer pool number
          - Range: `1`-`255`
        """
        return pulumi.get(self, "ethernet_dialer_pool_number")

    @ethernet_dialer_pool_number.setter
    def ethernet_dialer_pool_number(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "ethernet_dialer_pool_number", value)

    @_builtins.property
    @pulumi.getter(name="ethernetDialerPoolNumberVariable")
    def ethernet_dialer_pool_number_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "ethernet_dialer_pool_number_variable")

    @ethernet_dialer_pool_number_variable.setter
    def ethernet_dialer_pool_number_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "ethernet_dialer_pool_number_variable", value)

    @_builtins.property
    @pulumi.getter(name="ethernetInterfaceName")
    def ethernet_interface_name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Ethernet Interface/Sub Interface Name including sub interface number
        """
        return pulumi.get(self, "ethernet_interface_name")

    @ethernet_interface_name.setter
    def ethernet_interface_name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "ethernet_interface_name", value)

    @_builtins.property
    @pulumi.getter(name="ethernetInterfaceNameVariable")
    def ethernet_interface_name_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "ethernet_interface_name_variable")

    @ethernet_interface_name_variable.setter
    def ethernet_interface_name_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "ethernet_interface_name_variable", value)

    @_builtins.property
    @pulumi.getter(name="ethernetPppMaximumPayload")
    def ethernet_ppp_maximum_payload(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        Maximum MRU to be negotiated during PPP LCP negotiation
          - Range: `64`-`1792`
        """
        return pulumi.get(self, "ethernet_ppp_maximum_payload")

    @ethernet_ppp_maximum_payload.setter
    def ethernet_ppp_maximum_payload(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "ethernet_ppp_maximum_payload", value)

    @_builtins.property
    @pulumi.getter(name="ethernetPppMaximumPayloadVariable")
    def ethernet_ppp_maximum_payload_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "ethernet_ppp_maximum_payload_variable")

    @ethernet_ppp_maximum_payload_variable.setter
    def ethernet_ppp_maximum_payload_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "ethernet_ppp_maximum_payload_variable", value)

    @_builtins.property
    @pulumi.getter(name="ethernetUnnumberedLoopbackInterface")
    def ethernet_unnumbered_loopback_interface(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Dialer IP Unnumbered Loopback interface name
        """
        return pulumi.get(self, "ethernet_unnumbered_loopback_interface")

    @ethernet_unnumbered_loopback_interface.setter
    def ethernet_unnumbered_loopback_interface(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "ethernet_unnumbered_loopback_interface", value)

    @_builtins.property
    @pulumi.getter(name="ethernetUnnumberedLoopbackInterfaceVariable")
    def ethernet_unnumbered_loopback_interface_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "ethernet_unnumbered_loopback_interface_variable")

    @ethernet_unnumbered_loopback_interface_variable.setter
    def ethernet_unnumbered_loopback_interface_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "ethernet_unnumbered_loopback_interface_variable", value)

    @_builtins.property
    @pulumi.getter(name="ethernetVlanId")
    def ethernet_vlan_id(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        Encapsulation VLAN id
          - Range: `1`-`4094`
        """
        return pulumi.get(self, "ethernet_vlan_id")

    @ethernet_vlan_id.setter
    def ethernet_vlan_id(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "ethernet_vlan_id", value)

    @_builtins.property
    @pulumi.getter(name="ethernetVlanIdVariable")
    def ethernet_vlan_id_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "ethernet_vlan_id_variable")

    @ethernet_vlan_id_variable.setter
    def ethernet_vlan_id_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "ethernet_vlan_id_variable", value)

    @_builtins.property
    @pulumi.getter(name="ipDirectedBroadcast")
    def ip_directed_broadcast(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        IP Directed-Broadcast
          - Default value: `false`
        """
        return pulumi.get(self, "ip_directed_broadcast")

    @ip_directed_broadcast.setter
    def ip_directed_broadcast(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "ip_directed_broadcast", value)

    @_builtins.property
    @pulumi.getter(name="ipDirectedBroadcastVariable")
    def ip_directed_broadcast_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "ip_directed_broadcast_variable")

    @ip_directed_broadcast_variable.setter
    def ip_directed_broadcast_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "ip_directed_broadcast_variable", value)

    @_builtins.property
    @pulumi.getter(name="ipMtu")
    def ip_mtu(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        Interface MTU <576..2000>, in bytes
          - Range: `576`-`2000`
          - Default value: `1500`
        """
        return pulumi.get(self, "ip_mtu")

    @ip_mtu.setter
    def ip_mtu(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "ip_mtu", value)

    @_builtins.property
    @pulumi.getter(name="ipMtuVariable")
    def ip_mtu_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "ip_mtu_variable")

    @ip_mtu_variable.setter
    def ip_mtu_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "ip_mtu_variable", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The name of the feature template
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "name", value)

    @_builtins.property
    @pulumi.getter
    def nat(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Network Address Translation on this interface
          - Default value: `false`
        """
        return pulumi.get(self, "nat")

    @nat.setter
    def nat(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "nat", value)

    @_builtins.property
    @pulumi.getter(name="natBlockIcmpError")
    def nat_block_icmp_error(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Block inbound ICMP error messages
          - Default value: `true`
        """
        return pulumi.get(self, "nat_block_icmp_error")

    @nat_block_icmp_error.setter
    def nat_block_icmp_error(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "nat_block_icmp_error", value)

    @_builtins.property
    @pulumi.getter(name="natBlockIcmpErrorVariable")
    def nat_block_icmp_error_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "nat_block_icmp_error_variable")

    @nat_block_icmp_error_variable.setter
    def nat_block_icmp_error_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "nat_block_icmp_error_variable", value)

    @_builtins.property
    @pulumi.getter(name="natPortForwards")
    def nat_port_forwards(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['VpnInterfaceDslPppoeFeatureTemplateNatPortForwardArgs']]]]:
        """
        Set port-forwarding rules for NAT on this interface
        """
        return pulumi.get(self, "nat_port_forwards")

    @nat_port_forwards.setter
    def nat_port_forwards(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['VpnInterfaceDslPppoeFeatureTemplateNatPortForwardArgs']]]]):
        pulumi.set(self, "nat_port_forwards", value)

    @_builtins.property
    @pulumi.getter(name="natRefreshMode")
    def nat_refresh_mode(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Set NAT refresh mode
          - Choices: `outbound`, `bi-directional`
          - Default value: `outbound`
        """
        return pulumi.get(self, "nat_refresh_mode")

    @nat_refresh_mode.setter
    def nat_refresh_mode(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "nat_refresh_mode", value)

    @_builtins.property
    @pulumi.getter(name="natRefreshModeVariable")
    def nat_refresh_mode_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "nat_refresh_mode_variable")

    @nat_refresh_mode_variable.setter
    def nat_refresh_mode_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "nat_refresh_mode_variable", value)

    @_builtins.property
    @pulumi.getter(name="natResponseToPing")
    def nat_response_to_ping(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Respond to ping requests to NAT interface ip address from the public side
          - Default value: `false`
        """
        return pulumi.get(self, "nat_response_to_ping")

    @nat_response_to_ping.setter
    def nat_response_to_ping(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "nat_response_to_ping", value)

    @_builtins.property
    @pulumi.getter(name="natResponseToPingVariable")
    def nat_response_to_ping_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "nat_response_to_ping_variable")

    @nat_response_to_ping_variable.setter
    def nat_response_to_ping_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "nat_response_to_ping_variable", value)

    @_builtins.property
    @pulumi.getter(name="natTcpTimeout")
    def nat_tcp_timeout(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        Set NAT TCP session timeout, in minutes
          - Range: `1`-`8947`
          - Default value: `60`
        """
        return pulumi.get(self, "nat_tcp_timeout")

    @nat_tcp_timeout.setter
    def nat_tcp_timeout(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "nat_tcp_timeout", value)

    @_builtins.property
    @pulumi.getter(name="natTcpTimeoutVariable")
    def nat_tcp_timeout_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "nat_tcp_timeout_variable")

    @nat_tcp_timeout_variable.setter
    def nat_tcp_timeout_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "nat_tcp_timeout_variable", value)

    @_builtins.property
    @pulumi.getter(name="natUdpTimeout")
    def nat_udp_timeout(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        Set NAT UDP session timeout, in minutes
          - Range: `1`-`8947`
          - Default value: `1`
        """
        return pulumi.get(self, "nat_udp_timeout")

    @nat_udp_timeout.setter
    def nat_udp_timeout(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "nat_udp_timeout", value)

    @_builtins.property
    @pulumi.getter(name="natUdpTimeoutVariable")
    def nat_udp_timeout_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "nat_udp_timeout_variable")

    @nat_udp_timeout_variable.setter
    def nat_udp_timeout_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "nat_udp_timeout_variable", value)

    @_builtins.property
    @pulumi.getter(name="papPassword")
    def pap_password(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        PAP outbound Password
        """
        return pulumi.get(self, "pap_password")

    @pap_password.setter
    def pap_password(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "pap_password", value)

    @_builtins.property
    @pulumi.getter(name="papPppAuthPassword")
    def pap_ppp_auth_password(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specify ppp pap authentication Password
        """
        return pulumi.get(self, "pap_ppp_auth_password")

    @pap_ppp_auth_password.setter
    def pap_ppp_auth_password(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "pap_ppp_auth_password", value)

    @_builtins.property
    @pulumi.getter(name="papPppAuthPasswordVariable")
    def pap_ppp_auth_password_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "pap_ppp_auth_password_variable")

    @pap_ppp_auth_password_variable.setter
    def pap_ppp_auth_password_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "pap_ppp_auth_password_variable", value)

    @_builtins.property
    @pulumi.getter(name="papUsername")
    def pap_username(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        PAP outbound Sent Username
        """
        return pulumi.get(self, "pap_username")

    @pap_username.setter
    def pap_username(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "pap_username", value)

    @_builtins.property
    @pulumi.getter(name="papUsernameVariable")
    def pap_username_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "pap_username_variable")

    @pap_username_variable.setter
    def pap_username_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "pap_username_variable", value)

    @_builtins.property
    @pulumi.getter(name="perTunnelQos")
    def per_tunnel_qos(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Per-tunnel Qos
          - Default value: `false`
        """
        return pulumi.get(self, "per_tunnel_qos")

    @per_tunnel_qos.setter
    def per_tunnel_qos(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "per_tunnel_qos", value)

    @_builtins.property
    @pulumi.getter(name="perTunnelQosAggregator")
    def per_tunnel_qos_aggregator(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Per-tunnel QoS Aggregator
          - Default value: `false`
        """
        return pulumi.get(self, "per_tunnel_qos_aggregator")

    @per_tunnel_qos_aggregator.setter
    def per_tunnel_qos_aggregator(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "per_tunnel_qos_aggregator", value)

    @_builtins.property
    @pulumi.getter(name="perTunnelQosAggregatorVariable")
    def per_tunnel_qos_aggregator_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "per_tunnel_qos_aggregator_variable")

    @per_tunnel_qos_aggregator_variable.setter
    def per_tunnel_qos_aggregator_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "per_tunnel_qos_aggregator_variable", value)

    @_builtins.property
    @pulumi.getter(name="perTunnelQosVariable")
    def per_tunnel_qos_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "per_tunnel_qos_variable")

    @per_tunnel_qos_variable.setter
    def per_tunnel_qos_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "per_tunnel_qos_variable", value)

    @_builtins.property
    @pulumi.getter
    def policers(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['VpnInterfaceDslPppoeFeatureTemplatePolicerArgs']]]]:
        """
        Enable policer
        """
        return pulumi.get(self, "policers")

    @policers.setter
    def policers(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['VpnInterfaceDslPppoeFeatureTemplatePolicerArgs']]]]):
        pulumi.set(self, "policers", value)

    @_builtins.property
    @pulumi.getter(name="pppAuthenticationProtocol")
    def ppp_authentication_protocol(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        PPP Link Authentication Protocol
          - Choices: `chap`, `pap`
        """
        return pulumi.get(self, "ppp_authentication_protocol")

    @ppp_authentication_protocol.setter
    def ppp_authentication_protocol(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "ppp_authentication_protocol", value)

    @_builtins.property
    @pulumi.getter(name="pppAuthenticationProtocolPap")
    def ppp_authentication_protocol_pap(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        PPP Authentication Protocol PAP
          - Default value: `false`
        """
        return pulumi.get(self, "ppp_authentication_protocol_pap")

    @ppp_authentication_protocol_pap.setter
    def ppp_authentication_protocol_pap(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "ppp_authentication_protocol_pap", value)

    @_builtins.property
    @pulumi.getter(name="pppAuthenticationProtocolVariable")
    def ppp_authentication_protocol_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "ppp_authentication_protocol_variable")

    @ppp_authentication_protocol_variable.setter
    def ppp_authentication_protocol_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "ppp_authentication_protocol_variable", value)

    @_builtins.property
    @pulumi.getter(name="pppAuthenticationType")
    def ppp_authentication_type(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Authenticate remote on incoming call only
          - Choices: `callin`, `false`
          - Default value: `callin`
        """
        return pulumi.get(self, "ppp_authentication_type")

    @ppp_authentication_type.setter
    def ppp_authentication_type(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "ppp_authentication_type", value)

    @_builtins.property
    @pulumi.getter(name="qosAdaptiveBandwidthDownstream")
    def qos_adaptive_bandwidth_downstream(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        Adaptive QoS default downstream bandwidth
          - Range: `8`-`100000000`
        """
        return pulumi.get(self, "qos_adaptive_bandwidth_downstream")

    @qos_adaptive_bandwidth_downstream.setter
    def qos_adaptive_bandwidth_downstream(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "qos_adaptive_bandwidth_downstream", value)

    @_builtins.property
    @pulumi.getter(name="qosAdaptiveBandwidthDownstreamVariable")
    def qos_adaptive_bandwidth_downstream_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "qos_adaptive_bandwidth_downstream_variable")

    @qos_adaptive_bandwidth_downstream_variable.setter
    def qos_adaptive_bandwidth_downstream_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "qos_adaptive_bandwidth_downstream_variable", value)

    @_builtins.property
    @pulumi.getter(name="qosAdaptiveBandwidthUpstream")
    def qos_adaptive_bandwidth_upstream(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        Adaptive QoS default upstream bandwidth
          - Range: `8`-`100000000`
        """
        return pulumi.get(self, "qos_adaptive_bandwidth_upstream")

    @qos_adaptive_bandwidth_upstream.setter
    def qos_adaptive_bandwidth_upstream(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "qos_adaptive_bandwidth_upstream", value)

    @_builtins.property
    @pulumi.getter(name="qosAdaptiveBandwidthUpstreamVariable")
    def qos_adaptive_bandwidth_upstream_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "qos_adaptive_bandwidth_upstream_variable")

    @qos_adaptive_bandwidth_upstream_variable.setter
    def qos_adaptive_bandwidth_upstream_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "qos_adaptive_bandwidth_upstream_variable", value)

    @_builtins.property
    @pulumi.getter(name="qosAdaptiveMaxDownstream")
    def qos_adaptive_max_downstream(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        Downstream max bandwidth limit
          - Range: `8`-`100000000`
        """
        return pulumi.get(self, "qos_adaptive_max_downstream")

    @qos_adaptive_max_downstream.setter
    def qos_adaptive_max_downstream(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "qos_adaptive_max_downstream", value)

    @_builtins.property
    @pulumi.getter(name="qosAdaptiveMaxDownstreamVariable")
    def qos_adaptive_max_downstream_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "qos_adaptive_max_downstream_variable")

    @qos_adaptive_max_downstream_variable.setter
    def qos_adaptive_max_downstream_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "qos_adaptive_max_downstream_variable", value)

    @_builtins.property
    @pulumi.getter(name="qosAdaptiveMaxUpstream")
    def qos_adaptive_max_upstream(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        Upstream max bandwidth limit
          - Range: `8`-`100000000`
        """
        return pulumi.get(self, "qos_adaptive_max_upstream")

    @qos_adaptive_max_upstream.setter
    def qos_adaptive_max_upstream(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "qos_adaptive_max_upstream", value)

    @_builtins.property
    @pulumi.getter(name="qosAdaptiveMaxUpstreamVariable")
    def qos_adaptive_max_upstream_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "qos_adaptive_max_upstream_variable")

    @qos_adaptive_max_upstream_variable.setter
    def qos_adaptive_max_upstream_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "qos_adaptive_max_upstream_variable", value)

    @_builtins.property
    @pulumi.getter(name="qosAdaptiveMinDownstream")
    def qos_adaptive_min_downstream(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        Downstream min bandwidth limit
          - Range: `8`-`100000000`
        """
        return pulumi.get(self, "qos_adaptive_min_downstream")

    @qos_adaptive_min_downstream.setter
    def qos_adaptive_min_downstream(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "qos_adaptive_min_downstream", value)

    @_builtins.property
    @pulumi.getter(name="qosAdaptiveMinDownstreamVariable")
    def qos_adaptive_min_downstream_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "qos_adaptive_min_downstream_variable")

    @qos_adaptive_min_downstream_variable.setter
    def qos_adaptive_min_downstream_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "qos_adaptive_min_downstream_variable", value)

    @_builtins.property
    @pulumi.getter(name="qosAdaptiveMinUpstream")
    def qos_adaptive_min_upstream(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        Upstream min bandwidth limit
          - Range: `8`-`100000000`
        """
        return pulumi.get(self, "qos_adaptive_min_upstream")

    @qos_adaptive_min_upstream.setter
    def qos_adaptive_min_upstream(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "qos_adaptive_min_upstream", value)

    @_builtins.property
    @pulumi.getter(name="qosAdaptiveMinUpstreamVariable")
    def qos_adaptive_min_upstream_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "qos_adaptive_min_upstream_variable")

    @qos_adaptive_min_upstream_variable.setter
    def qos_adaptive_min_upstream_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "qos_adaptive_min_upstream_variable", value)

    @_builtins.property
    @pulumi.getter(name="qosAdaptivePeriod")
    def qos_adaptive_period(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        Periodic timer for adaptive QoS in minutes
          - Range: `1`-`720`
          - Default value: `15`
        """
        return pulumi.get(self, "qos_adaptive_period")

    @qos_adaptive_period.setter
    def qos_adaptive_period(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "qos_adaptive_period", value)

    @_builtins.property
    @pulumi.getter(name="qosAdaptivePeriodVariable")
    def qos_adaptive_period_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "qos_adaptive_period_variable")

    @qos_adaptive_period_variable.setter
    def qos_adaptive_period_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "qos_adaptive_period_variable", value)

    @_builtins.property
    @pulumi.getter(name="qosMap")
    def qos_map(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Name of QoS map
        """
        return pulumi.get(self, "qos_map")

    @qos_map.setter
    def qos_map(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "qos_map", value)

    @_builtins.property
    @pulumi.getter(name="qosMapVariable")
    def qos_map_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "qos_map_variable")

    @qos_map_variable.setter
    def qos_map_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "qos_map_variable", value)

    @_builtins.property
    @pulumi.getter(name="secondaryRegion")
    def secondary_region(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Enable secondary region
          - Choices: `off`, `secondary-only`, `secondary-shared`
          - Default value: `off`
        """
        return pulumi.get(self, "secondary_region")

    @secondary_region.setter
    def secondary_region(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "secondary_region", value)

    @_builtins.property
    @pulumi.getter(name="secondaryRegionVariable")
    def secondary_region_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "secondary_region_variable")

    @secondary_region_variable.setter
    def secondary_region_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "secondary_region_variable", value)

    @_builtins.property
    @pulumi.getter(name="shapingRate")
    def shaping_rate(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        1ge  interfaces: [0..1000000]kbps; 10ge interfaces: [0..10000000]kbps
          - Range: `8`-`100000000`
        """
        return pulumi.get(self, "shaping_rate")

    @shaping_rate.setter
    def shaping_rate(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "shaping_rate", value)

    @_builtins.property
    @pulumi.getter(name="shapingRateVariable")
    def shaping_rate_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "shaping_rate_variable")

    @shaping_rate_variable.setter
    def shaping_rate_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "shaping_rate_variable", value)

    @_builtins.property
    @pulumi.getter
    def shutdown(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Administrative state
          - Default value: `true`
        """
        return pulumi.get(self, "shutdown")

    @shutdown.setter
    def shutdown(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "shutdown", value)

    @_builtins.property
    @pulumi.getter(name="shutdownVariable")
    def shutdown_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "shutdown_variable")

    @shutdown_variable.setter
    def shutdown_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "shutdown_variable", value)

    @_builtins.property
    @pulumi.getter(name="tcpMss")
    def tcp_mss(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        TCP MSS on SYN packets, in bytes
          - Range: `552`-`1960`
        """
        return pulumi.get(self, "tcp_mss")

    @tcp_mss.setter
    def tcp_mss(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "tcp_mss", value)

    @_builtins.property
    @pulumi.getter(name="tcpMssVariable")
    def tcp_mss_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "tcp_mss_variable")

    @tcp_mss_variable.setter
    def tcp_mss_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "tcp_mss_variable", value)

    @_builtins.property
    @pulumi.getter(name="tlocExtension")
    def tloc_extension(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Extends a local TLOC to a remote node only for vpn 0
        """
        return pulumi.get(self, "tloc_extension")

    @tloc_extension.setter
    def tloc_extension(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "tloc_extension", value)

    @_builtins.property
    @pulumi.getter(name="tlocExtensionVariable")
    def tloc_extension_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "tloc_extension_variable")

    @tloc_extension_variable.setter
    def tloc_extension_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "tloc_extension_variable", value)

    @_builtins.property
    @pulumi.getter(name="trackerVariable")
    def tracker_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "tracker_variable")

    @tracker_variable.setter
    def tracker_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "tracker_variable", value)

    @_builtins.property
    @pulumi.getter
    def trackers(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]:
        """
        Enable tracker for this interface
        """
        return pulumi.get(self, "trackers")

    @trackers.setter
    def trackers(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "trackers", value)

    @_builtins.property
    @pulumi.getter(name="tunnelInterfaceAllowAll")
    def tunnel_interface_allow_all(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Allow all traffic. Overrides all other allow-service options if allow-service all is set
          - Default value: `false`
        """
        return pulumi.get(self, "tunnel_interface_allow_all")

    @tunnel_interface_allow_all.setter
    def tunnel_interface_allow_all(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "tunnel_interface_allow_all", value)

    @_builtins.property
    @pulumi.getter(name="tunnelInterfaceAllowAllVariable")
    def tunnel_interface_allow_all_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "tunnel_interface_allow_all_variable")

    @tunnel_interface_allow_all_variable.setter
    def tunnel_interface_allow_all_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "tunnel_interface_allow_all_variable", value)

    @_builtins.property
    @pulumi.getter(name="tunnelInterfaceAllowBgp")
    def tunnel_interface_allow_bgp(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Allow/deny BGP
          - Default value: `false`
        """
        return pulumi.get(self, "tunnel_interface_allow_bgp")

    @tunnel_interface_allow_bgp.setter
    def tunnel_interface_allow_bgp(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "tunnel_interface_allow_bgp", value)

    @_builtins.property
    @pulumi.getter(name="tunnelInterfaceAllowBgpVariable")
    def tunnel_interface_allow_bgp_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "tunnel_interface_allow_bgp_variable")

    @tunnel_interface_allow_bgp_variable.setter
    def tunnel_interface_allow_bgp_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "tunnel_interface_allow_bgp_variable", value)

    @_builtins.property
    @pulumi.getter(name="tunnelInterfaceAllowDhcp")
    def tunnel_interface_allow_dhcp(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Allow/Deny DHCP
          - Default value: `true`
        """
        return pulumi.get(self, "tunnel_interface_allow_dhcp")

    @tunnel_interface_allow_dhcp.setter
    def tunnel_interface_allow_dhcp(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "tunnel_interface_allow_dhcp", value)

    @_builtins.property
    @pulumi.getter(name="tunnelInterfaceAllowDhcpVariable")
    def tunnel_interface_allow_dhcp_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "tunnel_interface_allow_dhcp_variable")

    @tunnel_interface_allow_dhcp_variable.setter
    def tunnel_interface_allow_dhcp_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "tunnel_interface_allow_dhcp_variable", value)

    @_builtins.property
    @pulumi.getter(name="tunnelInterfaceAllowDns")
    def tunnel_interface_allow_dns(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Allow/Deny DNS
          - Default value: `true`
        """
        return pulumi.get(self, "tunnel_interface_allow_dns")

    @tunnel_interface_allow_dns.setter
    def tunnel_interface_allow_dns(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "tunnel_interface_allow_dns", value)

    @_builtins.property
    @pulumi.getter(name="tunnelInterfaceAllowDnsVariable")
    def tunnel_interface_allow_dns_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "tunnel_interface_allow_dns_variable")

    @tunnel_interface_allow_dns_variable.setter
    def tunnel_interface_allow_dns_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "tunnel_interface_allow_dns_variable", value)

    @_builtins.property
    @pulumi.getter(name="tunnelInterfaceAllowHttps")
    def tunnel_interface_allow_https(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Allow/Deny Https
          - Default value: `false`
        """
        return pulumi.get(self, "tunnel_interface_allow_https")

    @tunnel_interface_allow_https.setter
    def tunnel_interface_allow_https(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "tunnel_interface_allow_https", value)

    @_builtins.property
    @pulumi.getter(name="tunnelInterfaceAllowHttpsVariable")
    def tunnel_interface_allow_https_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "tunnel_interface_allow_https_variable")

    @tunnel_interface_allow_https_variable.setter
    def tunnel_interface_allow_https_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "tunnel_interface_allow_https_variable", value)

    @_builtins.property
    @pulumi.getter(name="tunnelInterfaceAllowIcmp")
    def tunnel_interface_allow_icmp(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Allow/Deny ICMP
          - Default value: `true`
        """
        return pulumi.get(self, "tunnel_interface_allow_icmp")

    @tunnel_interface_allow_icmp.setter
    def tunnel_interface_allow_icmp(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "tunnel_interface_allow_icmp", value)

    @_builtins.property
    @pulumi.getter(name="tunnelInterfaceAllowIcmpVariable")
    def tunnel_interface_allow_icmp_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "tunnel_interface_allow_icmp_variable")

    @tunnel_interface_allow_icmp_variable.setter
    def tunnel_interface_allow_icmp_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "tunnel_interface_allow_icmp_variable", value)

    @_builtins.property
    @pulumi.getter(name="tunnelInterfaceAllowNetconf")
    def tunnel_interface_allow_netconf(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Allow/Deny NETCONF
          - Default value: `false`
        """
        return pulumi.get(self, "tunnel_interface_allow_netconf")

    @tunnel_interface_allow_netconf.setter
    def tunnel_interface_allow_netconf(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "tunnel_interface_allow_netconf", value)

    @_builtins.property
    @pulumi.getter(name="tunnelInterfaceAllowNetconfVariable")
    def tunnel_interface_allow_netconf_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "tunnel_interface_allow_netconf_variable")

    @tunnel_interface_allow_netconf_variable.setter
    def tunnel_interface_allow_netconf_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "tunnel_interface_allow_netconf_variable", value)

    @_builtins.property
    @pulumi.getter(name="tunnelInterfaceAllowNtp")
    def tunnel_interface_allow_ntp(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Allow/Deny NTP
          - Default value: `false`
        """
        return pulumi.get(self, "tunnel_interface_allow_ntp")

    @tunnel_interface_allow_ntp.setter
    def tunnel_interface_allow_ntp(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "tunnel_interface_allow_ntp", value)

    @_builtins.property
    @pulumi.getter(name="tunnelInterfaceAllowNtpVariable")
    def tunnel_interface_allow_ntp_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "tunnel_interface_allow_ntp_variable")

    @tunnel_interface_allow_ntp_variable.setter
    def tunnel_interface_allow_ntp_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "tunnel_interface_allow_ntp_variable", value)

    @_builtins.property
    @pulumi.getter(name="tunnelInterfaceAllowOspf")
    def tunnel_interface_allow_ospf(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Allow/Deny OSPF
          - Default value: `false`
        """
        return pulumi.get(self, "tunnel_interface_allow_ospf")

    @tunnel_interface_allow_ospf.setter
    def tunnel_interface_allow_ospf(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "tunnel_interface_allow_ospf", value)

    @_builtins.property
    @pulumi.getter(name="tunnelInterfaceAllowOspfVariable")
    def tunnel_interface_allow_ospf_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "tunnel_interface_allow_ospf_variable")

    @tunnel_interface_allow_ospf_variable.setter
    def tunnel_interface_allow_ospf_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "tunnel_interface_allow_ospf_variable", value)

    @_builtins.property
    @pulumi.getter(name="tunnelInterfaceAllowSnmp")
    def tunnel_interface_allow_snmp(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Allow/Deny SNMP
          - Default value: `false`
        """
        return pulumi.get(self, "tunnel_interface_allow_snmp")

    @tunnel_interface_allow_snmp.setter
    def tunnel_interface_allow_snmp(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "tunnel_interface_allow_snmp", value)

    @_builtins.property
    @pulumi.getter(name="tunnelInterfaceAllowSnmpVariable")
    def tunnel_interface_allow_snmp_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "tunnel_interface_allow_snmp_variable")

    @tunnel_interface_allow_snmp_variable.setter
    def tunnel_interface_allow_snmp_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "tunnel_interface_allow_snmp_variable", value)

    @_builtins.property
    @pulumi.getter(name="tunnelInterfaceAllowSsh")
    def tunnel_interface_allow_ssh(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Allow/Deny SSH
          - Default value: `false`
        """
        return pulumi.get(self, "tunnel_interface_allow_ssh")

    @tunnel_interface_allow_ssh.setter
    def tunnel_interface_allow_ssh(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "tunnel_interface_allow_ssh", value)

    @_builtins.property
    @pulumi.getter(name="tunnelInterfaceAllowSshVariable")
    def tunnel_interface_allow_ssh_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "tunnel_interface_allow_ssh_variable")

    @tunnel_interface_allow_ssh_variable.setter
    def tunnel_interface_allow_ssh_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "tunnel_interface_allow_ssh_variable", value)

    @_builtins.property
    @pulumi.getter(name="tunnelInterfaceAllowStun")
    def tunnel_interface_allow_stun(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Allow/Deny STUN
          - Default value: `false`
        """
        return pulumi.get(self, "tunnel_interface_allow_stun")

    @tunnel_interface_allow_stun.setter
    def tunnel_interface_allow_stun(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "tunnel_interface_allow_stun", value)

    @_builtins.property
    @pulumi.getter(name="tunnelInterfaceAllowStunVariable")
    def tunnel_interface_allow_stun_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "tunnel_interface_allow_stun_variable")

    @tunnel_interface_allow_stun_variable.setter
    def tunnel_interface_allow_stun_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "tunnel_interface_allow_stun_variable", value)

    @_builtins.property
    @pulumi.getter(name="tunnelInterfaceBindLoopbackTunnel")
    def tunnel_interface_bind_loopback_tunnel(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Bind loopback tunnel interface to a physical interface
        """
        return pulumi.get(self, "tunnel_interface_bind_loopback_tunnel")

    @tunnel_interface_bind_loopback_tunnel.setter
    def tunnel_interface_bind_loopback_tunnel(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "tunnel_interface_bind_loopback_tunnel", value)

    @_builtins.property
    @pulumi.getter(name="tunnelInterfaceBindLoopbackTunnelVariable")
    def tunnel_interface_bind_loopback_tunnel_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "tunnel_interface_bind_loopback_tunnel_variable")

    @tunnel_interface_bind_loopback_tunnel_variable.setter
    def tunnel_interface_bind_loopback_tunnel_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "tunnel_interface_bind_loopback_tunnel_variable", value)

    @_builtins.property
    @pulumi.getter(name="tunnelInterfaceBorder")
    def tunnel_interface_border(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Set TLOC as border TLOC
          - Default value: `false`
        """
        return pulumi.get(self, "tunnel_interface_border")

    @tunnel_interface_border.setter
    def tunnel_interface_border(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "tunnel_interface_border", value)

    @_builtins.property
    @pulumi.getter(name="tunnelInterfaceBorderVariable")
    def tunnel_interface_border_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "tunnel_interface_border_variable")

    @tunnel_interface_border_variable.setter
    def tunnel_interface_border_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "tunnel_interface_border_variable", value)

    @_builtins.property
    @pulumi.getter(name="tunnelInterfaceCarrier")
    def tunnel_interface_carrier(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Set carrier for TLOC
          - Choices: `default`, `carrier1`, `carrier2`, `carrier3`, `carrier4`, `carrier5`, `carrier6`, `carrier7`, `carrier8`
          - Default value: `default`
        """
        return pulumi.get(self, "tunnel_interface_carrier")

    @tunnel_interface_carrier.setter
    def tunnel_interface_carrier(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "tunnel_interface_carrier", value)

    @_builtins.property
    @pulumi.getter(name="tunnelInterfaceCarrierVariable")
    def tunnel_interface_carrier_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "tunnel_interface_carrier_variable")

    @tunnel_interface_carrier_variable.setter
    def tunnel_interface_carrier_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "tunnel_interface_carrier_variable", value)

    @_builtins.property
    @pulumi.getter(name="tunnelInterfaceClearDontFragment")
    def tunnel_interface_clear_dont_fragment(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Enable clear dont fragment (Currently Only SDWAN Tunnel Interface)
          - Default value: `false`
        """
        return pulumi.get(self, "tunnel_interface_clear_dont_fragment")

    @tunnel_interface_clear_dont_fragment.setter
    def tunnel_interface_clear_dont_fragment(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "tunnel_interface_clear_dont_fragment", value)

    @_builtins.property
    @pulumi.getter(name="tunnelInterfaceClearDontFragmentVariable")
    def tunnel_interface_clear_dont_fragment_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "tunnel_interface_clear_dont_fragment_variable")

    @tunnel_interface_clear_dont_fragment_variable.setter
    def tunnel_interface_clear_dont_fragment_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "tunnel_interface_clear_dont_fragment_variable", value)

    @_builtins.property
    @pulumi.getter(name="tunnelInterfaceColor")
    def tunnel_interface_color(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Set color for TLOC
          - Choices: `default`, `mpls`, `metro-ethernet`, `biz-internet`, `public-internet`, `lte`, `3g`, `red`, `green`, `blue`, `gold`, `silver`, `bronze`, `custom1`, `custom2`, `custom3`, `private1`, `private2`, `private3`, `private4`, `private5`, `private6`
          - Default value: `default`
        """
        return pulumi.get(self, "tunnel_interface_color")

    @tunnel_interface_color.setter
    def tunnel_interface_color(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "tunnel_interface_color", value)

    @_builtins.property
    @pulumi.getter(name="tunnelInterfaceColorRestrict")
    def tunnel_interface_color_restrict(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Restrict this TLOC behavior
          - Default value: `false`
        """
        return pulumi.get(self, "tunnel_interface_color_restrict")

    @tunnel_interface_color_restrict.setter
    def tunnel_interface_color_restrict(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "tunnel_interface_color_restrict", value)

    @_builtins.property
    @pulumi.getter(name="tunnelInterfaceColorVariable")
    def tunnel_interface_color_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "tunnel_interface_color_variable")

    @tunnel_interface_color_variable.setter
    def tunnel_interface_color_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "tunnel_interface_color_variable", value)

    @_builtins.property
    @pulumi.getter(name="tunnelInterfaceControlConnections")
    def tunnel_interface_control_connections(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Allow Control Connection
          - Default value: `true`
        """
        return pulumi.get(self, "tunnel_interface_control_connections")

    @tunnel_interface_control_connections.setter
    def tunnel_interface_control_connections(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "tunnel_interface_control_connections", value)

    @_builtins.property
    @pulumi.getter(name="tunnelInterfaceControlConnectionsVariable")
    def tunnel_interface_control_connections_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "tunnel_interface_control_connections_variable")

    @tunnel_interface_control_connections_variable.setter
    def tunnel_interface_control_connections_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "tunnel_interface_control_connections_variable", value)

    @_builtins.property
    @pulumi.getter(name="tunnelInterfaceEncapsulations")
    def tunnel_interface_encapsulations(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['VpnInterfaceDslPppoeFeatureTemplateTunnelInterfaceEncapsulationArgs']]]]:
        """
        Encapsulation for TLOC
        """
        return pulumi.get(self, "tunnel_interface_encapsulations")

    @tunnel_interface_encapsulations.setter
    def tunnel_interface_encapsulations(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['VpnInterfaceDslPppoeFeatureTemplateTunnelInterfaceEncapsulationArgs']]]]):
        pulumi.set(self, "tunnel_interface_encapsulations", value)

    @_builtins.property
    @pulumi.getter(name="tunnelInterfaceExcludeControllerGroupListVariable")
    def tunnel_interface_exclude_controller_group_list_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "tunnel_interface_exclude_controller_group_list_variable")

    @tunnel_interface_exclude_controller_group_list_variable.setter
    def tunnel_interface_exclude_controller_group_list_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "tunnel_interface_exclude_controller_group_list_variable", value)

    @_builtins.property
    @pulumi.getter(name="tunnelInterfaceExcludeControllerGroupLists")
    def tunnel_interface_exclude_controller_group_lists(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.int]]]]:
        """
        Exclude the following controller groups defined in this list
        """
        return pulumi.get(self, "tunnel_interface_exclude_controller_group_lists")

    @tunnel_interface_exclude_controller_group_lists.setter
    def tunnel_interface_exclude_controller_group_lists(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.int]]]]):
        pulumi.set(self, "tunnel_interface_exclude_controller_group_lists", value)

    @_builtins.property
    @pulumi.getter(name="tunnelInterfaceGroups")
    def tunnel_interface_groups(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.int]]]]:
        """
        List of groups
        """
        return pulumi.get(self, "tunnel_interface_groups")

    @tunnel_interface_groups.setter
    def tunnel_interface_groups(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.int]]]]):
        pulumi.set(self, "tunnel_interface_groups", value)

    @_builtins.property
    @pulumi.getter(name="tunnelInterfaceGroupsVariable")
    def tunnel_interface_groups_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "tunnel_interface_groups_variable")

    @tunnel_interface_groups_variable.setter
    def tunnel_interface_groups_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "tunnel_interface_groups_variable", value)

    @_builtins.property
    @pulumi.getter(name="tunnelInterfaceHelloInterval")
    def tunnel_interface_hello_interval(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        Set time period of control hello packets <100..600000> milli seconds
          - Range: `100`-`600000`
          - Default value: `1000`
        """
        return pulumi.get(self, "tunnel_interface_hello_interval")

    @tunnel_interface_hello_interval.setter
    def tunnel_interface_hello_interval(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "tunnel_interface_hello_interval", value)

    @_builtins.property
    @pulumi.getter(name="tunnelInterfaceHelloIntervalVariable")
    def tunnel_interface_hello_interval_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "tunnel_interface_hello_interval_variable")

    @tunnel_interface_hello_interval_variable.setter
    def tunnel_interface_hello_interval_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "tunnel_interface_hello_interval_variable", value)

    @_builtins.property
    @pulumi.getter(name="tunnelInterfaceHelloTolerance")
    def tunnel_interface_hello_tolerance(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        Set tolerance of control hello packets <12..6000> seconds
          - Range: `12`-`6000`
          - Default value: `12`
        """
        return pulumi.get(self, "tunnel_interface_hello_tolerance")

    @tunnel_interface_hello_tolerance.setter
    def tunnel_interface_hello_tolerance(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "tunnel_interface_hello_tolerance", value)

    @_builtins.property
    @pulumi.getter(name="tunnelInterfaceHelloToleranceVariable")
    def tunnel_interface_hello_tolerance_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "tunnel_interface_hello_tolerance_variable")

    @tunnel_interface_hello_tolerance_variable.setter
    def tunnel_interface_hello_tolerance_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "tunnel_interface_hello_tolerance_variable", value)

    @_builtins.property
    @pulumi.getter(name="tunnelInterfaceLastResortCircuit")
    def tunnel_interface_last_resort_circuit(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Set TLOC as last resort
          - Default value: `false`
        """
        return pulumi.get(self, "tunnel_interface_last_resort_circuit")

    @tunnel_interface_last_resort_circuit.setter
    def tunnel_interface_last_resort_circuit(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "tunnel_interface_last_resort_circuit", value)

    @_builtins.property
    @pulumi.getter(name="tunnelInterfaceLastResortCircuitVariable")
    def tunnel_interface_last_resort_circuit_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "tunnel_interface_last_resort_circuit_variable")

    @tunnel_interface_last_resort_circuit_variable.setter
    def tunnel_interface_last_resort_circuit_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "tunnel_interface_last_resort_circuit_variable", value)

    @_builtins.property
    @pulumi.getter(name="tunnelInterfaceLowBandwidthLink")
    def tunnel_interface_low_bandwidth_link(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Set the interface as a low-bandwidth circuit
          - Default value: `false`
        """
        return pulumi.get(self, "tunnel_interface_low_bandwidth_link")

    @tunnel_interface_low_bandwidth_link.setter
    def tunnel_interface_low_bandwidth_link(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "tunnel_interface_low_bandwidth_link", value)

    @_builtins.property
    @pulumi.getter(name="tunnelInterfaceLowBandwidthLinkVariable")
    def tunnel_interface_low_bandwidth_link_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "tunnel_interface_low_bandwidth_link_variable")

    @tunnel_interface_low_bandwidth_link_variable.setter
    def tunnel_interface_low_bandwidth_link_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "tunnel_interface_low_bandwidth_link_variable", value)

    @_builtins.property
    @pulumi.getter(name="tunnelInterfaceMaxControlConnections")
    def tunnel_interface_max_control_connections(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        Set the maximum number of control connections for this TLOC
          - Range: `0`-`8`
        """
        return pulumi.get(self, "tunnel_interface_max_control_connections")

    @tunnel_interface_max_control_connections.setter
    def tunnel_interface_max_control_connections(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "tunnel_interface_max_control_connections", value)

    @_builtins.property
    @pulumi.getter(name="tunnelInterfaceMaxControlConnectionsVariable")
    def tunnel_interface_max_control_connections_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "tunnel_interface_max_control_connections_variable")

    @tunnel_interface_max_control_connections_variable.setter
    def tunnel_interface_max_control_connections_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "tunnel_interface_max_control_connections_variable", value)

    @_builtins.property
    @pulumi.getter(name="tunnelInterfaceNatRefreshInterval")
    def tunnel_interface_nat_refresh_interval(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        Set time period of nat refresh packets <1...60> seconds
          - Range: `1`-`60`
          - Default value: `5`
        """
        return pulumi.get(self, "tunnel_interface_nat_refresh_interval")

    @tunnel_interface_nat_refresh_interval.setter
    def tunnel_interface_nat_refresh_interval(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "tunnel_interface_nat_refresh_interval", value)

    @_builtins.property
    @pulumi.getter(name="tunnelInterfaceNatRefreshIntervalVariable")
    def tunnel_interface_nat_refresh_interval_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "tunnel_interface_nat_refresh_interval_variable")

    @tunnel_interface_nat_refresh_interval_variable.setter
    def tunnel_interface_nat_refresh_interval_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "tunnel_interface_nat_refresh_interval_variable", value)

    @_builtins.property
    @pulumi.getter(name="tunnelInterfaceNetworkBroadcast")
    def tunnel_interface_network_broadcast(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Accept and respond to network-prefix-directed broadcasts)
          - Default value: `false`
        """
        return pulumi.get(self, "tunnel_interface_network_broadcast")

    @tunnel_interface_network_broadcast.setter
    def tunnel_interface_network_broadcast(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "tunnel_interface_network_broadcast", value)

    @_builtins.property
    @pulumi.getter(name="tunnelInterfaceNetworkBroadcastVariable")
    def tunnel_interface_network_broadcast_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "tunnel_interface_network_broadcast_variable")

    @tunnel_interface_network_broadcast_variable.setter
    def tunnel_interface_network_broadcast_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "tunnel_interface_network_broadcast_variable", value)

    @_builtins.property
    @pulumi.getter(name="tunnelInterfacePortHop")
    def tunnel_interface_port_hop(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Disallow port hopping on the tunnel interface
          - Default value: `true`
        """
        return pulumi.get(self, "tunnel_interface_port_hop")

    @tunnel_interface_port_hop.setter
    def tunnel_interface_port_hop(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "tunnel_interface_port_hop", value)

    @_builtins.property
    @pulumi.getter(name="tunnelInterfacePortHopVariable")
    def tunnel_interface_port_hop_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "tunnel_interface_port_hop_variable")

    @tunnel_interface_port_hop_variable.setter
    def tunnel_interface_port_hop_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "tunnel_interface_port_hop_variable", value)

    @_builtins.property
    @pulumi.getter(name="tunnelInterfaceTunnelTcpMss")
    def tunnel_interface_tunnel_tcp_mss(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        Tunnel TCP MSS on SYN packets, in bytes
          - Range: `500`-`1460`
        """
        return pulumi.get(self, "tunnel_interface_tunnel_tcp_mss")

    @tunnel_interface_tunnel_tcp_mss.setter
    def tunnel_interface_tunnel_tcp_mss(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "tunnel_interface_tunnel_tcp_mss", value)

    @_builtins.property
    @pulumi.getter(name="tunnelInterfaceTunnelTcpMssVariable")
    def tunnel_interface_tunnel_tcp_mss_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "tunnel_interface_tunnel_tcp_mss_variable")

    @tunnel_interface_tunnel_tcp_mss_variable.setter
    def tunnel_interface_tunnel_tcp_mss_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "tunnel_interface_tunnel_tcp_mss_variable", value)

    @_builtins.property
    @pulumi.getter(name="tunnelInterfaceVbondAsStunServer")
    def tunnel_interface_vbond_as_stun_server(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Put this wan interface in STUN mode only
          - Default value: `false`
        """
        return pulumi.get(self, "tunnel_interface_vbond_as_stun_server")

    @tunnel_interface_vbond_as_stun_server.setter
    def tunnel_interface_vbond_as_stun_server(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "tunnel_interface_vbond_as_stun_server", value)

    @_builtins.property
    @pulumi.getter(name="tunnelInterfaceVbondAsStunServerVariable")
    def tunnel_interface_vbond_as_stun_server_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "tunnel_interface_vbond_as_stun_server_variable")

    @tunnel_interface_vbond_as_stun_server_variable.setter
    def tunnel_interface_vbond_as_stun_server_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "tunnel_interface_vbond_as_stun_server_variable", value)

    @_builtins.property
    @pulumi.getter(name="tunnelInterfaceVmanageConnectionPreference")
    def tunnel_interface_vmanage_connection_preference(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        Set interface preference for control connection to vManage <0..8>
          - Range: `0`-`8`
          - Default value: `5`
        """
        return pulumi.get(self, "tunnel_interface_vmanage_connection_preference")

    @tunnel_interface_vmanage_connection_preference.setter
    def tunnel_interface_vmanage_connection_preference(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "tunnel_interface_vmanage_connection_preference", value)

    @_builtins.property
    @pulumi.getter(name="tunnelInterfaceVmanageConnectionPreferenceVariable")
    def tunnel_interface_vmanage_connection_preference_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "tunnel_interface_vmanage_connection_preference_variable")

    @tunnel_interface_vmanage_connection_preference_variable.setter
    def tunnel_interface_vmanage_connection_preference_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "tunnel_interface_vmanage_connection_preference_variable", value)

    @_builtins.property
    @pulumi.getter(name="tunnelQosMode")
    def tunnel_qos_mode(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Set tunnel QoS mode
          - Choices: `spoke`
        """
        return pulumi.get(self, "tunnel_qos_mode")

    @tunnel_qos_mode.setter
    def tunnel_qos_mode(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "tunnel_qos_mode", value)

    @_builtins.property
    @pulumi.getter(name="tunnelQosModeVariable")
    def tunnel_qos_mode_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "tunnel_qos_mode_variable")

    @tunnel_qos_mode_variable.setter
    def tunnel_qos_mode_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "tunnel_qos_mode_variable", value)

    @_builtins.property
    @pulumi.getter(name="vdslConfigurations")
    def vdsl_configurations(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['VpnInterfaceDslPppoeFeatureTemplateVdslConfigurationArgs']]]]:
        """
        vdsl
        """
        return pulumi.get(self, "vdsl_configurations")

    @vdsl_configurations.setter
    def vdsl_configurations(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['VpnInterfaceDslPppoeFeatureTemplateVdslConfigurationArgs']]]]):
        pulumi.set(self, "vdsl_configurations", value)

    @_builtins.property
    @pulumi.getter(name="vpnQosMap")
    def vpn_qos_map(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Name of VPN QoS map
        """
        return pulumi.get(self, "vpn_qos_map")

    @vpn_qos_map.setter
    def vpn_qos_map(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "vpn_qos_map", value)

    @_builtins.property
    @pulumi.getter(name="vpnQosMapVariable")
    def vpn_qos_map_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "vpn_qos_map_variable")

    @vpn_qos_map_variable.setter
    def vpn_qos_map_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "vpn_qos_map_variable", value)

    @_builtins.property
    @pulumi.getter(name="writeRule")
    def write_rule(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Name of rewrite rule
        """
        return pulumi.get(self, "write_rule")

    @write_rule.setter
    def write_rule(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "write_rule", value)

    @_builtins.property
    @pulumi.getter(name="writeRuleVariable")
    def write_rule_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "write_rule_variable")

    @write_rule_variable.setter
    def write_rule_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "write_rule_variable", value)


@pulumi.input_type
class _VpnInterfaceDslPppoeFeatureTemplateState:
    def __init__(__self__, *,
                 access_lists: Optional[pulumi.Input[Sequence[pulumi.Input['VpnInterfaceDslPppoeFeatureTemplateAccessListArgs']]]] = None,
                 bandwidth_downstream: Optional[pulumi.Input[_builtins.int]] = None,
                 bandwidth_downstream_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 bandwidth_upstream: Optional[pulumi.Input[_builtins.int]] = None,
                 bandwidth_upstream_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 chap_hostname: Optional[pulumi.Input[_builtins.str]] = None,
                 chap_hostname_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 chap_ppp_auth_password: Optional[pulumi.Input[_builtins.str]] = None,
                 chap_ppp_auth_password_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 core_region: Optional[pulumi.Input[_builtins.str]] = None,
                 core_region_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 description: Optional[pulumi.Input[_builtins.str]] = None,
                 device_types: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 enable_core_region: Optional[pulumi.Input[_builtins.bool]] = None,
                 enable_core_region_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 ethernet_description: Optional[pulumi.Input[_builtins.str]] = None,
                 ethernet_description_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 ethernet_dialer_address_negotiated: Optional[pulumi.Input[_builtins.bool]] = None,
                 ethernet_dialer_pool_number: Optional[pulumi.Input[_builtins.int]] = None,
                 ethernet_dialer_pool_number_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 ethernet_interface_name: Optional[pulumi.Input[_builtins.str]] = None,
                 ethernet_interface_name_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 ethernet_ppp_maximum_payload: Optional[pulumi.Input[_builtins.int]] = None,
                 ethernet_ppp_maximum_payload_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 ethernet_unnumbered_loopback_interface: Optional[pulumi.Input[_builtins.str]] = None,
                 ethernet_unnumbered_loopback_interface_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 ethernet_vlan_id: Optional[pulumi.Input[_builtins.int]] = None,
                 ethernet_vlan_id_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 ip_directed_broadcast: Optional[pulumi.Input[_builtins.bool]] = None,
                 ip_directed_broadcast_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 ip_mtu: Optional[pulumi.Input[_builtins.int]] = None,
                 ip_mtu_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 nat: Optional[pulumi.Input[_builtins.bool]] = None,
                 nat_block_icmp_error: Optional[pulumi.Input[_builtins.bool]] = None,
                 nat_block_icmp_error_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 nat_port_forwards: Optional[pulumi.Input[Sequence[pulumi.Input['VpnInterfaceDslPppoeFeatureTemplateNatPortForwardArgs']]]] = None,
                 nat_refresh_mode: Optional[pulumi.Input[_builtins.str]] = None,
                 nat_refresh_mode_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 nat_response_to_ping: Optional[pulumi.Input[_builtins.bool]] = None,
                 nat_response_to_ping_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 nat_tcp_timeout: Optional[pulumi.Input[_builtins.int]] = None,
                 nat_tcp_timeout_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 nat_udp_timeout: Optional[pulumi.Input[_builtins.int]] = None,
                 nat_udp_timeout_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 pap_password: Optional[pulumi.Input[_builtins.bool]] = None,
                 pap_ppp_auth_password: Optional[pulumi.Input[_builtins.str]] = None,
                 pap_ppp_auth_password_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 pap_username: Optional[pulumi.Input[_builtins.str]] = None,
                 pap_username_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 per_tunnel_qos: Optional[pulumi.Input[_builtins.bool]] = None,
                 per_tunnel_qos_aggregator: Optional[pulumi.Input[_builtins.bool]] = None,
                 per_tunnel_qos_aggregator_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 per_tunnel_qos_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 policers: Optional[pulumi.Input[Sequence[pulumi.Input['VpnInterfaceDslPppoeFeatureTemplatePolicerArgs']]]] = None,
                 ppp_authentication_protocol: Optional[pulumi.Input[_builtins.str]] = None,
                 ppp_authentication_protocol_pap: Optional[pulumi.Input[_builtins.bool]] = None,
                 ppp_authentication_protocol_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 ppp_authentication_type: Optional[pulumi.Input[_builtins.str]] = None,
                 qos_adaptive_bandwidth_downstream: Optional[pulumi.Input[_builtins.int]] = None,
                 qos_adaptive_bandwidth_downstream_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 qos_adaptive_bandwidth_upstream: Optional[pulumi.Input[_builtins.int]] = None,
                 qos_adaptive_bandwidth_upstream_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 qos_adaptive_max_downstream: Optional[pulumi.Input[_builtins.int]] = None,
                 qos_adaptive_max_downstream_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 qos_adaptive_max_upstream: Optional[pulumi.Input[_builtins.int]] = None,
                 qos_adaptive_max_upstream_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 qos_adaptive_min_downstream: Optional[pulumi.Input[_builtins.int]] = None,
                 qos_adaptive_min_downstream_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 qos_adaptive_min_upstream: Optional[pulumi.Input[_builtins.int]] = None,
                 qos_adaptive_min_upstream_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 qos_adaptive_period: Optional[pulumi.Input[_builtins.int]] = None,
                 qos_adaptive_period_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 qos_map: Optional[pulumi.Input[_builtins.str]] = None,
                 qos_map_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 secondary_region: Optional[pulumi.Input[_builtins.str]] = None,
                 secondary_region_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 shaping_rate: Optional[pulumi.Input[_builtins.int]] = None,
                 shaping_rate_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 shutdown: Optional[pulumi.Input[_builtins.bool]] = None,
                 shutdown_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 tcp_mss: Optional[pulumi.Input[_builtins.int]] = None,
                 tcp_mss_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 template_type: Optional[pulumi.Input[_builtins.str]] = None,
                 tloc_extension: Optional[pulumi.Input[_builtins.str]] = None,
                 tloc_extension_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 tracker_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 trackers: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 tunnel_interface_allow_all: Optional[pulumi.Input[_builtins.bool]] = None,
                 tunnel_interface_allow_all_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 tunnel_interface_allow_bgp: Optional[pulumi.Input[_builtins.bool]] = None,
                 tunnel_interface_allow_bgp_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 tunnel_interface_allow_dhcp: Optional[pulumi.Input[_builtins.bool]] = None,
                 tunnel_interface_allow_dhcp_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 tunnel_interface_allow_dns: Optional[pulumi.Input[_builtins.bool]] = None,
                 tunnel_interface_allow_dns_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 tunnel_interface_allow_https: Optional[pulumi.Input[_builtins.bool]] = None,
                 tunnel_interface_allow_https_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 tunnel_interface_allow_icmp: Optional[pulumi.Input[_builtins.bool]] = None,
                 tunnel_interface_allow_icmp_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 tunnel_interface_allow_netconf: Optional[pulumi.Input[_builtins.bool]] = None,
                 tunnel_interface_allow_netconf_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 tunnel_interface_allow_ntp: Optional[pulumi.Input[_builtins.bool]] = None,
                 tunnel_interface_allow_ntp_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 tunnel_interface_allow_ospf: Optional[pulumi.Input[_builtins.bool]] = None,
                 tunnel_interface_allow_ospf_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 tunnel_interface_allow_snmp: Optional[pulumi.Input[_builtins.bool]] = None,
                 tunnel_interface_allow_snmp_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 tunnel_interface_allow_ssh: Optional[pulumi.Input[_builtins.bool]] = None,
                 tunnel_interface_allow_ssh_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 tunnel_interface_allow_stun: Optional[pulumi.Input[_builtins.bool]] = None,
                 tunnel_interface_allow_stun_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 tunnel_interface_bind_loopback_tunnel: Optional[pulumi.Input[_builtins.str]] = None,
                 tunnel_interface_bind_loopback_tunnel_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 tunnel_interface_border: Optional[pulumi.Input[_builtins.bool]] = None,
                 tunnel_interface_border_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 tunnel_interface_carrier: Optional[pulumi.Input[_builtins.str]] = None,
                 tunnel_interface_carrier_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 tunnel_interface_clear_dont_fragment: Optional[pulumi.Input[_builtins.bool]] = None,
                 tunnel_interface_clear_dont_fragment_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 tunnel_interface_color: Optional[pulumi.Input[_builtins.str]] = None,
                 tunnel_interface_color_restrict: Optional[pulumi.Input[_builtins.bool]] = None,
                 tunnel_interface_color_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 tunnel_interface_control_connections: Optional[pulumi.Input[_builtins.bool]] = None,
                 tunnel_interface_control_connections_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 tunnel_interface_encapsulations: Optional[pulumi.Input[Sequence[pulumi.Input['VpnInterfaceDslPppoeFeatureTemplateTunnelInterfaceEncapsulationArgs']]]] = None,
                 tunnel_interface_exclude_controller_group_list_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 tunnel_interface_exclude_controller_group_lists: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.int]]]] = None,
                 tunnel_interface_groups: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.int]]]] = None,
                 tunnel_interface_groups_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 tunnel_interface_hello_interval: Optional[pulumi.Input[_builtins.int]] = None,
                 tunnel_interface_hello_interval_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 tunnel_interface_hello_tolerance: Optional[pulumi.Input[_builtins.int]] = None,
                 tunnel_interface_hello_tolerance_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 tunnel_interface_last_resort_circuit: Optional[pulumi.Input[_builtins.bool]] = None,
                 tunnel_interface_last_resort_circuit_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 tunnel_interface_low_bandwidth_link: Optional[pulumi.Input[_builtins.bool]] = None,
                 tunnel_interface_low_bandwidth_link_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 tunnel_interface_max_control_connections: Optional[pulumi.Input[_builtins.int]] = None,
                 tunnel_interface_max_control_connections_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 tunnel_interface_nat_refresh_interval: Optional[pulumi.Input[_builtins.int]] = None,
                 tunnel_interface_nat_refresh_interval_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 tunnel_interface_network_broadcast: Optional[pulumi.Input[_builtins.bool]] = None,
                 tunnel_interface_network_broadcast_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 tunnel_interface_port_hop: Optional[pulumi.Input[_builtins.bool]] = None,
                 tunnel_interface_port_hop_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 tunnel_interface_tunnel_tcp_mss: Optional[pulumi.Input[_builtins.int]] = None,
                 tunnel_interface_tunnel_tcp_mss_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 tunnel_interface_vbond_as_stun_server: Optional[pulumi.Input[_builtins.bool]] = None,
                 tunnel_interface_vbond_as_stun_server_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 tunnel_interface_vmanage_connection_preference: Optional[pulumi.Input[_builtins.int]] = None,
                 tunnel_interface_vmanage_connection_preference_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 tunnel_qos_mode: Optional[pulumi.Input[_builtins.str]] = None,
                 tunnel_qos_mode_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 vdsl_configurations: Optional[pulumi.Input[Sequence[pulumi.Input['VpnInterfaceDslPppoeFeatureTemplateVdslConfigurationArgs']]]] = None,
                 version: Optional[pulumi.Input[_builtins.int]] = None,
                 vpn_qos_map: Optional[pulumi.Input[_builtins.str]] = None,
                 vpn_qos_map_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 write_rule: Optional[pulumi.Input[_builtins.str]] = None,
                 write_rule_variable: Optional[pulumi.Input[_builtins.str]] = None):
        """
        Input properties used for looking up and filtering VpnInterfaceDslPppoeFeatureTemplate resources.
        :param pulumi.Input[Sequence[pulumi.Input['VpnInterfaceDslPppoeFeatureTemplateAccessListArgs']]] access_lists: Apply ACL
        :param pulumi.Input[_builtins.int] bandwidth_downstream: Interface downstream bandwidth capacity, in kbps
                 - Range: `1`-`2147483647`
        :param pulumi.Input[_builtins.str] bandwidth_downstream_variable: Variable name
        :param pulumi.Input[_builtins.int] bandwidth_upstream: Interface upstream bandwidth capacity, in kbps
                 - Range: `1`-`2147483647`
        :param pulumi.Input[_builtins.str] bandwidth_upstream_variable: Variable name
        :param pulumi.Input[_builtins.str] chap_hostname: CHAP Hostname
        :param pulumi.Input[_builtins.str] chap_hostname_variable: Variable name
        :param pulumi.Input[_builtins.str] chap_ppp_auth_password: Specify ppp chap authentication Password
        :param pulumi.Input[_builtins.str] chap_ppp_auth_password_variable: Variable name
        :param pulumi.Input[_builtins.str] core_region: Enable core region
                 - Choices: `core`, `core-shared`
                 - Default value: `core`
        :param pulumi.Input[_builtins.str] core_region_variable: Variable name
        :param pulumi.Input[_builtins.str] description: The description of the feature template
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] device_types: List of supported device types
                 - Choices: `vedge-C8000V`, `vedge-C8300-1N1S-4T2X`, `vedge-C8300-1N1S-6T`, `vedge-C8300-2N2S-6T`, `vedge-C8300-2N2S-4T2X`, `vedge-C8500-12X4QC`, `vedge-C8500-12X`, `vedge-C8500-20X6C`, `vedge-C8500L-8S4X`, `vedge-C8200-1N-4T`, `vedge-C8200L-1N-4T`
        :param pulumi.Input[_builtins.bool] enable_core_region: Enable core region
                 - Default value: `false`
        :param pulumi.Input[_builtins.str] enable_core_region_variable: Variable name
        :param pulumi.Input[_builtins.str] ethernet_description: Interface description
        :param pulumi.Input[_builtins.str] ethernet_description_variable: Variable name
        :param pulumi.Input[_builtins.bool] ethernet_dialer_address_negotiated: Dialer IP Negotiated
                 - Default value: `false`
        :param pulumi.Input[_builtins.int] ethernet_dialer_pool_number: Dialer pool number
                 - Range: `1`-`255`
        :param pulumi.Input[_builtins.str] ethernet_dialer_pool_number_variable: Variable name
        :param pulumi.Input[_builtins.str] ethernet_interface_name: Ethernet Interface/Sub Interface Name including sub interface number
        :param pulumi.Input[_builtins.str] ethernet_interface_name_variable: Variable name
        :param pulumi.Input[_builtins.int] ethernet_ppp_maximum_payload: Maximum MRU to be negotiated during PPP LCP negotiation
                 - Range: `64`-`1792`
        :param pulumi.Input[_builtins.str] ethernet_ppp_maximum_payload_variable: Variable name
        :param pulumi.Input[_builtins.str] ethernet_unnumbered_loopback_interface: Dialer IP Unnumbered Loopback interface name
        :param pulumi.Input[_builtins.str] ethernet_unnumbered_loopback_interface_variable: Variable name
        :param pulumi.Input[_builtins.int] ethernet_vlan_id: Encapsulation VLAN id
                 - Range: `1`-`4094`
        :param pulumi.Input[_builtins.str] ethernet_vlan_id_variable: Variable name
        :param pulumi.Input[_builtins.bool] ip_directed_broadcast: IP Directed-Broadcast
                 - Default value: `false`
        :param pulumi.Input[_builtins.str] ip_directed_broadcast_variable: Variable name
        :param pulumi.Input[_builtins.int] ip_mtu: Interface MTU <576..2000>, in bytes
                 - Range: `576`-`2000`
                 - Default value: `1500`
        :param pulumi.Input[_builtins.str] ip_mtu_variable: Variable name
        :param pulumi.Input[_builtins.str] name: The name of the feature template
        :param pulumi.Input[_builtins.bool] nat: Network Address Translation on this interface
                 - Default value: `false`
        :param pulumi.Input[_builtins.bool] nat_block_icmp_error: Block inbound ICMP error messages
                 - Default value: `true`
        :param pulumi.Input[_builtins.str] nat_block_icmp_error_variable: Variable name
        :param pulumi.Input[Sequence[pulumi.Input['VpnInterfaceDslPppoeFeatureTemplateNatPortForwardArgs']]] nat_port_forwards: Set port-forwarding rules for NAT on this interface
        :param pulumi.Input[_builtins.str] nat_refresh_mode: Set NAT refresh mode
                 - Choices: `outbound`, `bi-directional`
                 - Default value: `outbound`
        :param pulumi.Input[_builtins.str] nat_refresh_mode_variable: Variable name
        :param pulumi.Input[_builtins.bool] nat_response_to_ping: Respond to ping requests to NAT interface ip address from the public side
                 - Default value: `false`
        :param pulumi.Input[_builtins.str] nat_response_to_ping_variable: Variable name
        :param pulumi.Input[_builtins.int] nat_tcp_timeout: Set NAT TCP session timeout, in minutes
                 - Range: `1`-`8947`
                 - Default value: `60`
        :param pulumi.Input[_builtins.str] nat_tcp_timeout_variable: Variable name
        :param pulumi.Input[_builtins.int] nat_udp_timeout: Set NAT UDP session timeout, in minutes
                 - Range: `1`-`8947`
                 - Default value: `1`
        :param pulumi.Input[_builtins.str] nat_udp_timeout_variable: Variable name
        :param pulumi.Input[_builtins.bool] pap_password: PAP outbound Password
        :param pulumi.Input[_builtins.str] pap_ppp_auth_password: Specify ppp pap authentication Password
        :param pulumi.Input[_builtins.str] pap_ppp_auth_password_variable: Variable name
        :param pulumi.Input[_builtins.str] pap_username: PAP outbound Sent Username
        :param pulumi.Input[_builtins.str] pap_username_variable: Variable name
        :param pulumi.Input[_builtins.bool] per_tunnel_qos: Per-tunnel Qos
                 - Default value: `false`
        :param pulumi.Input[_builtins.bool] per_tunnel_qos_aggregator: Per-tunnel QoS Aggregator
                 - Default value: `false`
        :param pulumi.Input[_builtins.str] per_tunnel_qos_aggregator_variable: Variable name
        :param pulumi.Input[_builtins.str] per_tunnel_qos_variable: Variable name
        :param pulumi.Input[Sequence[pulumi.Input['VpnInterfaceDslPppoeFeatureTemplatePolicerArgs']]] policers: Enable policer
        :param pulumi.Input[_builtins.str] ppp_authentication_protocol: PPP Link Authentication Protocol
                 - Choices: `chap`, `pap`
        :param pulumi.Input[_builtins.bool] ppp_authentication_protocol_pap: PPP Authentication Protocol PAP
                 - Default value: `false`
        :param pulumi.Input[_builtins.str] ppp_authentication_protocol_variable: Variable name
        :param pulumi.Input[_builtins.str] ppp_authentication_type: Authenticate remote on incoming call only
                 - Choices: `callin`, `false`
                 - Default value: `callin`
        :param pulumi.Input[_builtins.int] qos_adaptive_bandwidth_downstream: Adaptive QoS default downstream bandwidth
                 - Range: `8`-`100000000`
        :param pulumi.Input[_builtins.str] qos_adaptive_bandwidth_downstream_variable: Variable name
        :param pulumi.Input[_builtins.int] qos_adaptive_bandwidth_upstream: Adaptive QoS default upstream bandwidth
                 - Range: `8`-`100000000`
        :param pulumi.Input[_builtins.str] qos_adaptive_bandwidth_upstream_variable: Variable name
        :param pulumi.Input[_builtins.int] qos_adaptive_max_downstream: Downstream max bandwidth limit
                 - Range: `8`-`100000000`
        :param pulumi.Input[_builtins.str] qos_adaptive_max_downstream_variable: Variable name
        :param pulumi.Input[_builtins.int] qos_adaptive_max_upstream: Upstream max bandwidth limit
                 - Range: `8`-`100000000`
        :param pulumi.Input[_builtins.str] qos_adaptive_max_upstream_variable: Variable name
        :param pulumi.Input[_builtins.int] qos_adaptive_min_downstream: Downstream min bandwidth limit
                 - Range: `8`-`100000000`
        :param pulumi.Input[_builtins.str] qos_adaptive_min_downstream_variable: Variable name
        :param pulumi.Input[_builtins.int] qos_adaptive_min_upstream: Upstream min bandwidth limit
                 - Range: `8`-`100000000`
        :param pulumi.Input[_builtins.str] qos_adaptive_min_upstream_variable: Variable name
        :param pulumi.Input[_builtins.int] qos_adaptive_period: Periodic timer for adaptive QoS in minutes
                 - Range: `1`-`720`
                 - Default value: `15`
        :param pulumi.Input[_builtins.str] qos_adaptive_period_variable: Variable name
        :param pulumi.Input[_builtins.str] qos_map: Name of QoS map
        :param pulumi.Input[_builtins.str] qos_map_variable: Variable name
        :param pulumi.Input[_builtins.str] secondary_region: Enable secondary region
                 - Choices: `off`, `secondary-only`, `secondary-shared`
                 - Default value: `off`
        :param pulumi.Input[_builtins.str] secondary_region_variable: Variable name
        :param pulumi.Input[_builtins.int] shaping_rate: 1ge  interfaces: [0..1000000]kbps; 10ge interfaces: [0..10000000]kbps
                 - Range: `8`-`100000000`
        :param pulumi.Input[_builtins.str] shaping_rate_variable: Variable name
        :param pulumi.Input[_builtins.bool] shutdown: Administrative state
                 - Default value: `true`
        :param pulumi.Input[_builtins.str] shutdown_variable: Variable name
        :param pulumi.Input[_builtins.int] tcp_mss: TCP MSS on SYN packets, in bytes
                 - Range: `552`-`1960`
        :param pulumi.Input[_builtins.str] tcp_mss_variable: Variable name
        :param pulumi.Input[_builtins.str] template_type: The template type
        :param pulumi.Input[_builtins.str] tloc_extension: Extends a local TLOC to a remote node only for vpn 0
        :param pulumi.Input[_builtins.str] tloc_extension_variable: Variable name
        :param pulumi.Input[_builtins.str] tracker_variable: Variable name
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] trackers: Enable tracker for this interface
        :param pulumi.Input[_builtins.bool] tunnel_interface_allow_all: Allow all traffic. Overrides all other allow-service options if allow-service all is set
                 - Default value: `false`
        :param pulumi.Input[_builtins.str] tunnel_interface_allow_all_variable: Variable name
        :param pulumi.Input[_builtins.bool] tunnel_interface_allow_bgp: Allow/deny BGP
                 - Default value: `false`
        :param pulumi.Input[_builtins.str] tunnel_interface_allow_bgp_variable: Variable name
        :param pulumi.Input[_builtins.bool] tunnel_interface_allow_dhcp: Allow/Deny DHCP
                 - Default value: `true`
        :param pulumi.Input[_builtins.str] tunnel_interface_allow_dhcp_variable: Variable name
        :param pulumi.Input[_builtins.bool] tunnel_interface_allow_dns: Allow/Deny DNS
                 - Default value: `true`
        :param pulumi.Input[_builtins.str] tunnel_interface_allow_dns_variable: Variable name
        :param pulumi.Input[_builtins.bool] tunnel_interface_allow_https: Allow/Deny Https
                 - Default value: `false`
        :param pulumi.Input[_builtins.str] tunnel_interface_allow_https_variable: Variable name
        :param pulumi.Input[_builtins.bool] tunnel_interface_allow_icmp: Allow/Deny ICMP
                 - Default value: `true`
        :param pulumi.Input[_builtins.str] tunnel_interface_allow_icmp_variable: Variable name
        :param pulumi.Input[_builtins.bool] tunnel_interface_allow_netconf: Allow/Deny NETCONF
                 - Default value: `false`
        :param pulumi.Input[_builtins.str] tunnel_interface_allow_netconf_variable: Variable name
        :param pulumi.Input[_builtins.bool] tunnel_interface_allow_ntp: Allow/Deny NTP
                 - Default value: `false`
        :param pulumi.Input[_builtins.str] tunnel_interface_allow_ntp_variable: Variable name
        :param pulumi.Input[_builtins.bool] tunnel_interface_allow_ospf: Allow/Deny OSPF
                 - Default value: `false`
        :param pulumi.Input[_builtins.str] tunnel_interface_allow_ospf_variable: Variable name
        :param pulumi.Input[_builtins.bool] tunnel_interface_allow_snmp: Allow/Deny SNMP
                 - Default value: `false`
        :param pulumi.Input[_builtins.str] tunnel_interface_allow_snmp_variable: Variable name
        :param pulumi.Input[_builtins.bool] tunnel_interface_allow_ssh: Allow/Deny SSH
                 - Default value: `false`
        :param pulumi.Input[_builtins.str] tunnel_interface_allow_ssh_variable: Variable name
        :param pulumi.Input[_builtins.bool] tunnel_interface_allow_stun: Allow/Deny STUN
                 - Default value: `false`
        :param pulumi.Input[_builtins.str] tunnel_interface_allow_stun_variable: Variable name
        :param pulumi.Input[_builtins.str] tunnel_interface_bind_loopback_tunnel: Bind loopback tunnel interface to a physical interface
        :param pulumi.Input[_builtins.str] tunnel_interface_bind_loopback_tunnel_variable: Variable name
        :param pulumi.Input[_builtins.bool] tunnel_interface_border: Set TLOC as border TLOC
                 - Default value: `false`
        :param pulumi.Input[_builtins.str] tunnel_interface_border_variable: Variable name
        :param pulumi.Input[_builtins.str] tunnel_interface_carrier: Set carrier for TLOC
                 - Choices: `default`, `carrier1`, `carrier2`, `carrier3`, `carrier4`, `carrier5`, `carrier6`, `carrier7`, `carrier8`
                 - Default value: `default`
        :param pulumi.Input[_builtins.str] tunnel_interface_carrier_variable: Variable name
        :param pulumi.Input[_builtins.bool] tunnel_interface_clear_dont_fragment: Enable clear dont fragment (Currently Only SDWAN Tunnel Interface)
                 - Default value: `false`
        :param pulumi.Input[_builtins.str] tunnel_interface_clear_dont_fragment_variable: Variable name
        :param pulumi.Input[_builtins.str] tunnel_interface_color: Set color for TLOC
                 - Choices: `default`, `mpls`, `metro-ethernet`, `biz-internet`, `public-internet`, `lte`, `3g`, `red`, `green`, `blue`, `gold`, `silver`, `bronze`, `custom1`, `custom2`, `custom3`, `private1`, `private2`, `private3`, `private4`, `private5`, `private6`
                 - Default value: `default`
        :param pulumi.Input[_builtins.bool] tunnel_interface_color_restrict: Restrict this TLOC behavior
                 - Default value: `false`
        :param pulumi.Input[_builtins.str] tunnel_interface_color_variable: Variable name
        :param pulumi.Input[_builtins.bool] tunnel_interface_control_connections: Allow Control Connection
                 - Default value: `true`
        :param pulumi.Input[_builtins.str] tunnel_interface_control_connections_variable: Variable name
        :param pulumi.Input[Sequence[pulumi.Input['VpnInterfaceDslPppoeFeatureTemplateTunnelInterfaceEncapsulationArgs']]] tunnel_interface_encapsulations: Encapsulation for TLOC
        :param pulumi.Input[_builtins.str] tunnel_interface_exclude_controller_group_list_variable: Variable name
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.int]]] tunnel_interface_exclude_controller_group_lists: Exclude the following controller groups defined in this list
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.int]]] tunnel_interface_groups: List of groups
        :param pulumi.Input[_builtins.str] tunnel_interface_groups_variable: Variable name
        :param pulumi.Input[_builtins.int] tunnel_interface_hello_interval: Set time period of control hello packets <100..600000> milli seconds
                 - Range: `100`-`600000`
                 - Default value: `1000`
        :param pulumi.Input[_builtins.str] tunnel_interface_hello_interval_variable: Variable name
        :param pulumi.Input[_builtins.int] tunnel_interface_hello_tolerance: Set tolerance of control hello packets <12..6000> seconds
                 - Range: `12`-`6000`
                 - Default value: `12`
        :param pulumi.Input[_builtins.str] tunnel_interface_hello_tolerance_variable: Variable name
        :param pulumi.Input[_builtins.bool] tunnel_interface_last_resort_circuit: Set TLOC as last resort
                 - Default value: `false`
        :param pulumi.Input[_builtins.str] tunnel_interface_last_resort_circuit_variable: Variable name
        :param pulumi.Input[_builtins.bool] tunnel_interface_low_bandwidth_link: Set the interface as a low-bandwidth circuit
                 - Default value: `false`
        :param pulumi.Input[_builtins.str] tunnel_interface_low_bandwidth_link_variable: Variable name
        :param pulumi.Input[_builtins.int] tunnel_interface_max_control_connections: Set the maximum number of control connections for this TLOC
                 - Range: `0`-`8`
        :param pulumi.Input[_builtins.str] tunnel_interface_max_control_connections_variable: Variable name
        :param pulumi.Input[_builtins.int] tunnel_interface_nat_refresh_interval: Set time period of nat refresh packets <1...60> seconds
                 - Range: `1`-`60`
                 - Default value: `5`
        :param pulumi.Input[_builtins.str] tunnel_interface_nat_refresh_interval_variable: Variable name
        :param pulumi.Input[_builtins.bool] tunnel_interface_network_broadcast: Accept and respond to network-prefix-directed broadcasts)
                 - Default value: `false`
        :param pulumi.Input[_builtins.str] tunnel_interface_network_broadcast_variable: Variable name
        :param pulumi.Input[_builtins.bool] tunnel_interface_port_hop: Disallow port hopping on the tunnel interface
                 - Default value: `true`
        :param pulumi.Input[_builtins.str] tunnel_interface_port_hop_variable: Variable name
        :param pulumi.Input[_builtins.int] tunnel_interface_tunnel_tcp_mss: Tunnel TCP MSS on SYN packets, in bytes
                 - Range: `500`-`1460`
        :param pulumi.Input[_builtins.str] tunnel_interface_tunnel_tcp_mss_variable: Variable name
        :param pulumi.Input[_builtins.bool] tunnel_interface_vbond_as_stun_server: Put this wan interface in STUN mode only
                 - Default value: `false`
        :param pulumi.Input[_builtins.str] tunnel_interface_vbond_as_stun_server_variable: Variable name
        :param pulumi.Input[_builtins.int] tunnel_interface_vmanage_connection_preference: Set interface preference for control connection to vManage <0..8>
                 - Range: `0`-`8`
                 - Default value: `5`
        :param pulumi.Input[_builtins.str] tunnel_interface_vmanage_connection_preference_variable: Variable name
        :param pulumi.Input[_builtins.str] tunnel_qos_mode: Set tunnel QoS mode
                 - Choices: `spoke`
        :param pulumi.Input[_builtins.str] tunnel_qos_mode_variable: Variable name
        :param pulumi.Input[Sequence[pulumi.Input['VpnInterfaceDslPppoeFeatureTemplateVdslConfigurationArgs']]] vdsl_configurations: vdsl
        :param pulumi.Input[_builtins.int] version: The version of the feature template
        :param pulumi.Input[_builtins.str] vpn_qos_map: Name of VPN QoS map
        :param pulumi.Input[_builtins.str] vpn_qos_map_variable: Variable name
        :param pulumi.Input[_builtins.str] write_rule: Name of rewrite rule
        :param pulumi.Input[_builtins.str] write_rule_variable: Variable name
        """
        if access_lists is not None:
            pulumi.set(__self__, "access_lists", access_lists)
        if bandwidth_downstream is not None:
            pulumi.set(__self__, "bandwidth_downstream", bandwidth_downstream)
        if bandwidth_downstream_variable is not None:
            pulumi.set(__self__, "bandwidth_downstream_variable", bandwidth_downstream_variable)
        if bandwidth_upstream is not None:
            pulumi.set(__self__, "bandwidth_upstream", bandwidth_upstream)
        if bandwidth_upstream_variable is not None:
            pulumi.set(__self__, "bandwidth_upstream_variable", bandwidth_upstream_variable)
        if chap_hostname is not None:
            pulumi.set(__self__, "chap_hostname", chap_hostname)
        if chap_hostname_variable is not None:
            pulumi.set(__self__, "chap_hostname_variable", chap_hostname_variable)
        if chap_ppp_auth_password is not None:
            pulumi.set(__self__, "chap_ppp_auth_password", chap_ppp_auth_password)
        if chap_ppp_auth_password_variable is not None:
            pulumi.set(__self__, "chap_ppp_auth_password_variable", chap_ppp_auth_password_variable)
        if core_region is not None:
            pulumi.set(__self__, "core_region", core_region)
        if core_region_variable is not None:
            pulumi.set(__self__, "core_region_variable", core_region_variable)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if device_types is not None:
            pulumi.set(__self__, "device_types", device_types)
        if enable_core_region is not None:
            pulumi.set(__self__, "enable_core_region", enable_core_region)
        if enable_core_region_variable is not None:
            pulumi.set(__self__, "enable_core_region_variable", enable_core_region_variable)
        if ethernet_description is not None:
            pulumi.set(__self__, "ethernet_description", ethernet_description)
        if ethernet_description_variable is not None:
            pulumi.set(__self__, "ethernet_description_variable", ethernet_description_variable)
        if ethernet_dialer_address_negotiated is not None:
            pulumi.set(__self__, "ethernet_dialer_address_negotiated", ethernet_dialer_address_negotiated)
        if ethernet_dialer_pool_number is not None:
            pulumi.set(__self__, "ethernet_dialer_pool_number", ethernet_dialer_pool_number)
        if ethernet_dialer_pool_number_variable is not None:
            pulumi.set(__self__, "ethernet_dialer_pool_number_variable", ethernet_dialer_pool_number_variable)
        if ethernet_interface_name is not None:
            pulumi.set(__self__, "ethernet_interface_name", ethernet_interface_name)
        if ethernet_interface_name_variable is not None:
            pulumi.set(__self__, "ethernet_interface_name_variable", ethernet_interface_name_variable)
        if ethernet_ppp_maximum_payload is not None:
            pulumi.set(__self__, "ethernet_ppp_maximum_payload", ethernet_ppp_maximum_payload)
        if ethernet_ppp_maximum_payload_variable is not None:
            pulumi.set(__self__, "ethernet_ppp_maximum_payload_variable", ethernet_ppp_maximum_payload_variable)
        if ethernet_unnumbered_loopback_interface is not None:
            pulumi.set(__self__, "ethernet_unnumbered_loopback_interface", ethernet_unnumbered_loopback_interface)
        if ethernet_unnumbered_loopback_interface_variable is not None:
            pulumi.set(__self__, "ethernet_unnumbered_loopback_interface_variable", ethernet_unnumbered_loopback_interface_variable)
        if ethernet_vlan_id is not None:
            pulumi.set(__self__, "ethernet_vlan_id", ethernet_vlan_id)
        if ethernet_vlan_id_variable is not None:
            pulumi.set(__self__, "ethernet_vlan_id_variable", ethernet_vlan_id_variable)
        if ip_directed_broadcast is not None:
            pulumi.set(__self__, "ip_directed_broadcast", ip_directed_broadcast)
        if ip_directed_broadcast_variable is not None:
            pulumi.set(__self__, "ip_directed_broadcast_variable", ip_directed_broadcast_variable)
        if ip_mtu is not None:
            pulumi.set(__self__, "ip_mtu", ip_mtu)
        if ip_mtu_variable is not None:
            pulumi.set(__self__, "ip_mtu_variable", ip_mtu_variable)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if nat is not None:
            pulumi.set(__self__, "nat", nat)
        if nat_block_icmp_error is not None:
            pulumi.set(__self__, "nat_block_icmp_error", nat_block_icmp_error)
        if nat_block_icmp_error_variable is not None:
            pulumi.set(__self__, "nat_block_icmp_error_variable", nat_block_icmp_error_variable)
        if nat_port_forwards is not None:
            pulumi.set(__self__, "nat_port_forwards", nat_port_forwards)
        if nat_refresh_mode is not None:
            pulumi.set(__self__, "nat_refresh_mode", nat_refresh_mode)
        if nat_refresh_mode_variable is not None:
            pulumi.set(__self__, "nat_refresh_mode_variable", nat_refresh_mode_variable)
        if nat_response_to_ping is not None:
            pulumi.set(__self__, "nat_response_to_ping", nat_response_to_ping)
        if nat_response_to_ping_variable is not None:
            pulumi.set(__self__, "nat_response_to_ping_variable", nat_response_to_ping_variable)
        if nat_tcp_timeout is not None:
            pulumi.set(__self__, "nat_tcp_timeout", nat_tcp_timeout)
        if nat_tcp_timeout_variable is not None:
            pulumi.set(__self__, "nat_tcp_timeout_variable", nat_tcp_timeout_variable)
        if nat_udp_timeout is not None:
            pulumi.set(__self__, "nat_udp_timeout", nat_udp_timeout)
        if nat_udp_timeout_variable is not None:
            pulumi.set(__self__, "nat_udp_timeout_variable", nat_udp_timeout_variable)
        if pap_password is not None:
            pulumi.set(__self__, "pap_password", pap_password)
        if pap_ppp_auth_password is not None:
            pulumi.set(__self__, "pap_ppp_auth_password", pap_ppp_auth_password)
        if pap_ppp_auth_password_variable is not None:
            pulumi.set(__self__, "pap_ppp_auth_password_variable", pap_ppp_auth_password_variable)
        if pap_username is not None:
            pulumi.set(__self__, "pap_username", pap_username)
        if pap_username_variable is not None:
            pulumi.set(__self__, "pap_username_variable", pap_username_variable)
        if per_tunnel_qos is not None:
            pulumi.set(__self__, "per_tunnel_qos", per_tunnel_qos)
        if per_tunnel_qos_aggregator is not None:
            pulumi.set(__self__, "per_tunnel_qos_aggregator", per_tunnel_qos_aggregator)
        if per_tunnel_qos_aggregator_variable is not None:
            pulumi.set(__self__, "per_tunnel_qos_aggregator_variable", per_tunnel_qos_aggregator_variable)
        if per_tunnel_qos_variable is not None:
            pulumi.set(__self__, "per_tunnel_qos_variable", per_tunnel_qos_variable)
        if policers is not None:
            pulumi.set(__self__, "policers", policers)
        if ppp_authentication_protocol is not None:
            pulumi.set(__self__, "ppp_authentication_protocol", ppp_authentication_protocol)
        if ppp_authentication_protocol_pap is not None:
            pulumi.set(__self__, "ppp_authentication_protocol_pap", ppp_authentication_protocol_pap)
        if ppp_authentication_protocol_variable is not None:
            pulumi.set(__self__, "ppp_authentication_protocol_variable", ppp_authentication_protocol_variable)
        if ppp_authentication_type is not None:
            pulumi.set(__self__, "ppp_authentication_type", ppp_authentication_type)
        if qos_adaptive_bandwidth_downstream is not None:
            pulumi.set(__self__, "qos_adaptive_bandwidth_downstream", qos_adaptive_bandwidth_downstream)
        if qos_adaptive_bandwidth_downstream_variable is not None:
            pulumi.set(__self__, "qos_adaptive_bandwidth_downstream_variable", qos_adaptive_bandwidth_downstream_variable)
        if qos_adaptive_bandwidth_upstream is not None:
            pulumi.set(__self__, "qos_adaptive_bandwidth_upstream", qos_adaptive_bandwidth_upstream)
        if qos_adaptive_bandwidth_upstream_variable is not None:
            pulumi.set(__self__, "qos_adaptive_bandwidth_upstream_variable", qos_adaptive_bandwidth_upstream_variable)
        if qos_adaptive_max_downstream is not None:
            pulumi.set(__self__, "qos_adaptive_max_downstream", qos_adaptive_max_downstream)
        if qos_adaptive_max_downstream_variable is not None:
            pulumi.set(__self__, "qos_adaptive_max_downstream_variable", qos_adaptive_max_downstream_variable)
        if qos_adaptive_max_upstream is not None:
            pulumi.set(__self__, "qos_adaptive_max_upstream", qos_adaptive_max_upstream)
        if qos_adaptive_max_upstream_variable is not None:
            pulumi.set(__self__, "qos_adaptive_max_upstream_variable", qos_adaptive_max_upstream_variable)
        if qos_adaptive_min_downstream is not None:
            pulumi.set(__self__, "qos_adaptive_min_downstream", qos_adaptive_min_downstream)
        if qos_adaptive_min_downstream_variable is not None:
            pulumi.set(__self__, "qos_adaptive_min_downstream_variable", qos_adaptive_min_downstream_variable)
        if qos_adaptive_min_upstream is not None:
            pulumi.set(__self__, "qos_adaptive_min_upstream", qos_adaptive_min_upstream)
        if qos_adaptive_min_upstream_variable is not None:
            pulumi.set(__self__, "qos_adaptive_min_upstream_variable", qos_adaptive_min_upstream_variable)
        if qos_adaptive_period is not None:
            pulumi.set(__self__, "qos_adaptive_period", qos_adaptive_period)
        if qos_adaptive_period_variable is not None:
            pulumi.set(__self__, "qos_adaptive_period_variable", qos_adaptive_period_variable)
        if qos_map is not None:
            pulumi.set(__self__, "qos_map", qos_map)
        if qos_map_variable is not None:
            pulumi.set(__self__, "qos_map_variable", qos_map_variable)
        if secondary_region is not None:
            pulumi.set(__self__, "secondary_region", secondary_region)
        if secondary_region_variable is not None:
            pulumi.set(__self__, "secondary_region_variable", secondary_region_variable)
        if shaping_rate is not None:
            pulumi.set(__self__, "shaping_rate", shaping_rate)
        if shaping_rate_variable is not None:
            pulumi.set(__self__, "shaping_rate_variable", shaping_rate_variable)
        if shutdown is not None:
            pulumi.set(__self__, "shutdown", shutdown)
        if shutdown_variable is not None:
            pulumi.set(__self__, "shutdown_variable", shutdown_variable)
        if tcp_mss is not None:
            pulumi.set(__self__, "tcp_mss", tcp_mss)
        if tcp_mss_variable is not None:
            pulumi.set(__self__, "tcp_mss_variable", tcp_mss_variable)
        if template_type is not None:
            pulumi.set(__self__, "template_type", template_type)
        if tloc_extension is not None:
            pulumi.set(__self__, "tloc_extension", tloc_extension)
        if tloc_extension_variable is not None:
            pulumi.set(__self__, "tloc_extension_variable", tloc_extension_variable)
        if tracker_variable is not None:
            pulumi.set(__self__, "tracker_variable", tracker_variable)
        if trackers is not None:
            pulumi.set(__self__, "trackers", trackers)
        if tunnel_interface_allow_all is not None:
            pulumi.set(__self__, "tunnel_interface_allow_all", tunnel_interface_allow_all)
        if tunnel_interface_allow_all_variable is not None:
            pulumi.set(__self__, "tunnel_interface_allow_all_variable", tunnel_interface_allow_all_variable)
        if tunnel_interface_allow_bgp is not None:
            pulumi.set(__self__, "tunnel_interface_allow_bgp", tunnel_interface_allow_bgp)
        if tunnel_interface_allow_bgp_variable is not None:
            pulumi.set(__self__, "tunnel_interface_allow_bgp_variable", tunnel_interface_allow_bgp_variable)
        if tunnel_interface_allow_dhcp is not None:
            pulumi.set(__self__, "tunnel_interface_allow_dhcp", tunnel_interface_allow_dhcp)
        if tunnel_interface_allow_dhcp_variable is not None:
            pulumi.set(__self__, "tunnel_interface_allow_dhcp_variable", tunnel_interface_allow_dhcp_variable)
        if tunnel_interface_allow_dns is not None:
            pulumi.set(__self__, "tunnel_interface_allow_dns", tunnel_interface_allow_dns)
        if tunnel_interface_allow_dns_variable is not None:
            pulumi.set(__self__, "tunnel_interface_allow_dns_variable", tunnel_interface_allow_dns_variable)
        if tunnel_interface_allow_https is not None:
            pulumi.set(__self__, "tunnel_interface_allow_https", tunnel_interface_allow_https)
        if tunnel_interface_allow_https_variable is not None:
            pulumi.set(__self__, "tunnel_interface_allow_https_variable", tunnel_interface_allow_https_variable)
        if tunnel_interface_allow_icmp is not None:
            pulumi.set(__self__, "tunnel_interface_allow_icmp", tunnel_interface_allow_icmp)
        if tunnel_interface_allow_icmp_variable is not None:
            pulumi.set(__self__, "tunnel_interface_allow_icmp_variable", tunnel_interface_allow_icmp_variable)
        if tunnel_interface_allow_netconf is not None:
            pulumi.set(__self__, "tunnel_interface_allow_netconf", tunnel_interface_allow_netconf)
        if tunnel_interface_allow_netconf_variable is not None:
            pulumi.set(__self__, "tunnel_interface_allow_netconf_variable", tunnel_interface_allow_netconf_variable)
        if tunnel_interface_allow_ntp is not None:
            pulumi.set(__self__, "tunnel_interface_allow_ntp", tunnel_interface_allow_ntp)
        if tunnel_interface_allow_ntp_variable is not None:
            pulumi.set(__self__, "tunnel_interface_allow_ntp_variable", tunnel_interface_allow_ntp_variable)
        if tunnel_interface_allow_ospf is not None:
            pulumi.set(__self__, "tunnel_interface_allow_ospf", tunnel_interface_allow_ospf)
        if tunnel_interface_allow_ospf_variable is not None:
            pulumi.set(__self__, "tunnel_interface_allow_ospf_variable", tunnel_interface_allow_ospf_variable)
        if tunnel_interface_allow_snmp is not None:
            pulumi.set(__self__, "tunnel_interface_allow_snmp", tunnel_interface_allow_snmp)
        if tunnel_interface_allow_snmp_variable is not None:
            pulumi.set(__self__, "tunnel_interface_allow_snmp_variable", tunnel_interface_allow_snmp_variable)
        if tunnel_interface_allow_ssh is not None:
            pulumi.set(__self__, "tunnel_interface_allow_ssh", tunnel_interface_allow_ssh)
        if tunnel_interface_allow_ssh_variable is not None:
            pulumi.set(__self__, "tunnel_interface_allow_ssh_variable", tunnel_interface_allow_ssh_variable)
        if tunnel_interface_allow_stun is not None:
            pulumi.set(__self__, "tunnel_interface_allow_stun", tunnel_interface_allow_stun)
        if tunnel_interface_allow_stun_variable is not None:
            pulumi.set(__self__, "tunnel_interface_allow_stun_variable", tunnel_interface_allow_stun_variable)
        if tunnel_interface_bind_loopback_tunnel is not None:
            pulumi.set(__self__, "tunnel_interface_bind_loopback_tunnel", tunnel_interface_bind_loopback_tunnel)
        if tunnel_interface_bind_loopback_tunnel_variable is not None:
            pulumi.set(__self__, "tunnel_interface_bind_loopback_tunnel_variable", tunnel_interface_bind_loopback_tunnel_variable)
        if tunnel_interface_border is not None:
            pulumi.set(__self__, "tunnel_interface_border", tunnel_interface_border)
        if tunnel_interface_border_variable is not None:
            pulumi.set(__self__, "tunnel_interface_border_variable", tunnel_interface_border_variable)
        if tunnel_interface_carrier is not None:
            pulumi.set(__self__, "tunnel_interface_carrier", tunnel_interface_carrier)
        if tunnel_interface_carrier_variable is not None:
            pulumi.set(__self__, "tunnel_interface_carrier_variable", tunnel_interface_carrier_variable)
        if tunnel_interface_clear_dont_fragment is not None:
            pulumi.set(__self__, "tunnel_interface_clear_dont_fragment", tunnel_interface_clear_dont_fragment)
        if tunnel_interface_clear_dont_fragment_variable is not None:
            pulumi.set(__self__, "tunnel_interface_clear_dont_fragment_variable", tunnel_interface_clear_dont_fragment_variable)
        if tunnel_interface_color is not None:
            pulumi.set(__self__, "tunnel_interface_color", tunnel_interface_color)
        if tunnel_interface_color_restrict is not None:
            pulumi.set(__self__, "tunnel_interface_color_restrict", tunnel_interface_color_restrict)
        if tunnel_interface_color_variable is not None:
            pulumi.set(__self__, "tunnel_interface_color_variable", tunnel_interface_color_variable)
        if tunnel_interface_control_connections is not None:
            pulumi.set(__self__, "tunnel_interface_control_connections", tunnel_interface_control_connections)
        if tunnel_interface_control_connections_variable is not None:
            pulumi.set(__self__, "tunnel_interface_control_connections_variable", tunnel_interface_control_connections_variable)
        if tunnel_interface_encapsulations is not None:
            pulumi.set(__self__, "tunnel_interface_encapsulations", tunnel_interface_encapsulations)
        if tunnel_interface_exclude_controller_group_list_variable is not None:
            pulumi.set(__self__, "tunnel_interface_exclude_controller_group_list_variable", tunnel_interface_exclude_controller_group_list_variable)
        if tunnel_interface_exclude_controller_group_lists is not None:
            pulumi.set(__self__, "tunnel_interface_exclude_controller_group_lists", tunnel_interface_exclude_controller_group_lists)
        if tunnel_interface_groups is not None:
            pulumi.set(__self__, "tunnel_interface_groups", tunnel_interface_groups)
        if tunnel_interface_groups_variable is not None:
            pulumi.set(__self__, "tunnel_interface_groups_variable", tunnel_interface_groups_variable)
        if tunnel_interface_hello_interval is not None:
            pulumi.set(__self__, "tunnel_interface_hello_interval", tunnel_interface_hello_interval)
        if tunnel_interface_hello_interval_variable is not None:
            pulumi.set(__self__, "tunnel_interface_hello_interval_variable", tunnel_interface_hello_interval_variable)
        if tunnel_interface_hello_tolerance is not None:
            pulumi.set(__self__, "tunnel_interface_hello_tolerance", tunnel_interface_hello_tolerance)
        if tunnel_interface_hello_tolerance_variable is not None:
            pulumi.set(__self__, "tunnel_interface_hello_tolerance_variable", tunnel_interface_hello_tolerance_variable)
        if tunnel_interface_last_resort_circuit is not None:
            pulumi.set(__self__, "tunnel_interface_last_resort_circuit", tunnel_interface_last_resort_circuit)
        if tunnel_interface_last_resort_circuit_variable is not None:
            pulumi.set(__self__, "tunnel_interface_last_resort_circuit_variable", tunnel_interface_last_resort_circuit_variable)
        if tunnel_interface_low_bandwidth_link is not None:
            pulumi.set(__self__, "tunnel_interface_low_bandwidth_link", tunnel_interface_low_bandwidth_link)
        if tunnel_interface_low_bandwidth_link_variable is not None:
            pulumi.set(__self__, "tunnel_interface_low_bandwidth_link_variable", tunnel_interface_low_bandwidth_link_variable)
        if tunnel_interface_max_control_connections is not None:
            pulumi.set(__self__, "tunnel_interface_max_control_connections", tunnel_interface_max_control_connections)
        if tunnel_interface_max_control_connections_variable is not None:
            pulumi.set(__self__, "tunnel_interface_max_control_connections_variable", tunnel_interface_max_control_connections_variable)
        if tunnel_interface_nat_refresh_interval is not None:
            pulumi.set(__self__, "tunnel_interface_nat_refresh_interval", tunnel_interface_nat_refresh_interval)
        if tunnel_interface_nat_refresh_interval_variable is not None:
            pulumi.set(__self__, "tunnel_interface_nat_refresh_interval_variable", tunnel_interface_nat_refresh_interval_variable)
        if tunnel_interface_network_broadcast is not None:
            pulumi.set(__self__, "tunnel_interface_network_broadcast", tunnel_interface_network_broadcast)
        if tunnel_interface_network_broadcast_variable is not None:
            pulumi.set(__self__, "tunnel_interface_network_broadcast_variable", tunnel_interface_network_broadcast_variable)
        if tunnel_interface_port_hop is not None:
            pulumi.set(__self__, "tunnel_interface_port_hop", tunnel_interface_port_hop)
        if tunnel_interface_port_hop_variable is not None:
            pulumi.set(__self__, "tunnel_interface_port_hop_variable", tunnel_interface_port_hop_variable)
        if tunnel_interface_tunnel_tcp_mss is not None:
            pulumi.set(__self__, "tunnel_interface_tunnel_tcp_mss", tunnel_interface_tunnel_tcp_mss)
        if tunnel_interface_tunnel_tcp_mss_variable is not None:
            pulumi.set(__self__, "tunnel_interface_tunnel_tcp_mss_variable", tunnel_interface_tunnel_tcp_mss_variable)
        if tunnel_interface_vbond_as_stun_server is not None:
            pulumi.set(__self__, "tunnel_interface_vbond_as_stun_server", tunnel_interface_vbond_as_stun_server)
        if tunnel_interface_vbond_as_stun_server_variable is not None:
            pulumi.set(__self__, "tunnel_interface_vbond_as_stun_server_variable", tunnel_interface_vbond_as_stun_server_variable)
        if tunnel_interface_vmanage_connection_preference is not None:
            pulumi.set(__self__, "tunnel_interface_vmanage_connection_preference", tunnel_interface_vmanage_connection_preference)
        if tunnel_interface_vmanage_connection_preference_variable is not None:
            pulumi.set(__self__, "tunnel_interface_vmanage_connection_preference_variable", tunnel_interface_vmanage_connection_preference_variable)
        if tunnel_qos_mode is not None:
            pulumi.set(__self__, "tunnel_qos_mode", tunnel_qos_mode)
        if tunnel_qos_mode_variable is not None:
            pulumi.set(__self__, "tunnel_qos_mode_variable", tunnel_qos_mode_variable)
        if vdsl_configurations is not None:
            pulumi.set(__self__, "vdsl_configurations", vdsl_configurations)
        if version is not None:
            pulumi.set(__self__, "version", version)
        if vpn_qos_map is not None:
            pulumi.set(__self__, "vpn_qos_map", vpn_qos_map)
        if vpn_qos_map_variable is not None:
            pulumi.set(__self__, "vpn_qos_map_variable", vpn_qos_map_variable)
        if write_rule is not None:
            pulumi.set(__self__, "write_rule", write_rule)
        if write_rule_variable is not None:
            pulumi.set(__self__, "write_rule_variable", write_rule_variable)

    @_builtins.property
    @pulumi.getter(name="accessLists")
    def access_lists(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['VpnInterfaceDslPppoeFeatureTemplateAccessListArgs']]]]:
        """
        Apply ACL
        """
        return pulumi.get(self, "access_lists")

    @access_lists.setter
    def access_lists(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['VpnInterfaceDslPppoeFeatureTemplateAccessListArgs']]]]):
        pulumi.set(self, "access_lists", value)

    @_builtins.property
    @pulumi.getter(name="bandwidthDownstream")
    def bandwidth_downstream(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        Interface downstream bandwidth capacity, in kbps
          - Range: `1`-`2147483647`
        """
        return pulumi.get(self, "bandwidth_downstream")

    @bandwidth_downstream.setter
    def bandwidth_downstream(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "bandwidth_downstream", value)

    @_builtins.property
    @pulumi.getter(name="bandwidthDownstreamVariable")
    def bandwidth_downstream_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "bandwidth_downstream_variable")

    @bandwidth_downstream_variable.setter
    def bandwidth_downstream_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "bandwidth_downstream_variable", value)

    @_builtins.property
    @pulumi.getter(name="bandwidthUpstream")
    def bandwidth_upstream(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        Interface upstream bandwidth capacity, in kbps
          - Range: `1`-`2147483647`
        """
        return pulumi.get(self, "bandwidth_upstream")

    @bandwidth_upstream.setter
    def bandwidth_upstream(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "bandwidth_upstream", value)

    @_builtins.property
    @pulumi.getter(name="bandwidthUpstreamVariable")
    def bandwidth_upstream_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "bandwidth_upstream_variable")

    @bandwidth_upstream_variable.setter
    def bandwidth_upstream_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "bandwidth_upstream_variable", value)

    @_builtins.property
    @pulumi.getter(name="chapHostname")
    def chap_hostname(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        CHAP Hostname
        """
        return pulumi.get(self, "chap_hostname")

    @chap_hostname.setter
    def chap_hostname(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "chap_hostname", value)

    @_builtins.property
    @pulumi.getter(name="chapHostnameVariable")
    def chap_hostname_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "chap_hostname_variable")

    @chap_hostname_variable.setter
    def chap_hostname_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "chap_hostname_variable", value)

    @_builtins.property
    @pulumi.getter(name="chapPppAuthPassword")
    def chap_ppp_auth_password(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specify ppp chap authentication Password
        """
        return pulumi.get(self, "chap_ppp_auth_password")

    @chap_ppp_auth_password.setter
    def chap_ppp_auth_password(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "chap_ppp_auth_password", value)

    @_builtins.property
    @pulumi.getter(name="chapPppAuthPasswordVariable")
    def chap_ppp_auth_password_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "chap_ppp_auth_password_variable")

    @chap_ppp_auth_password_variable.setter
    def chap_ppp_auth_password_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "chap_ppp_auth_password_variable", value)

    @_builtins.property
    @pulumi.getter(name="coreRegion")
    def core_region(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Enable core region
          - Choices: `core`, `core-shared`
          - Default value: `core`
        """
        return pulumi.get(self, "core_region")

    @core_region.setter
    def core_region(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "core_region", value)

    @_builtins.property
    @pulumi.getter(name="coreRegionVariable")
    def core_region_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "core_region_variable")

    @core_region_variable.setter
    def core_region_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "core_region_variable", value)

    @_builtins.property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The description of the feature template
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "description", value)

    @_builtins.property
    @pulumi.getter(name="deviceTypes")
    def device_types(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]:
        """
        List of supported device types
          - Choices: `vedge-C8000V`, `vedge-C8300-1N1S-4T2X`, `vedge-C8300-1N1S-6T`, `vedge-C8300-2N2S-6T`, `vedge-C8300-2N2S-4T2X`, `vedge-C8500-12X4QC`, `vedge-C8500-12X`, `vedge-C8500-20X6C`, `vedge-C8500L-8S4X`, `vedge-C8200-1N-4T`, `vedge-C8200L-1N-4T`
        """
        return pulumi.get(self, "device_types")

    @device_types.setter
    def device_types(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "device_types", value)

    @_builtins.property
    @pulumi.getter(name="enableCoreRegion")
    def enable_core_region(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Enable core region
          - Default value: `false`
        """
        return pulumi.get(self, "enable_core_region")

    @enable_core_region.setter
    def enable_core_region(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "enable_core_region", value)

    @_builtins.property
    @pulumi.getter(name="enableCoreRegionVariable")
    def enable_core_region_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "enable_core_region_variable")

    @enable_core_region_variable.setter
    def enable_core_region_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "enable_core_region_variable", value)

    @_builtins.property
    @pulumi.getter(name="ethernetDescription")
    def ethernet_description(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Interface description
        """
        return pulumi.get(self, "ethernet_description")

    @ethernet_description.setter
    def ethernet_description(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "ethernet_description", value)

    @_builtins.property
    @pulumi.getter(name="ethernetDescriptionVariable")
    def ethernet_description_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "ethernet_description_variable")

    @ethernet_description_variable.setter
    def ethernet_description_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "ethernet_description_variable", value)

    @_builtins.property
    @pulumi.getter(name="ethernetDialerAddressNegotiated")
    def ethernet_dialer_address_negotiated(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Dialer IP Negotiated
          - Default value: `false`
        """
        return pulumi.get(self, "ethernet_dialer_address_negotiated")

    @ethernet_dialer_address_negotiated.setter
    def ethernet_dialer_address_negotiated(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "ethernet_dialer_address_negotiated", value)

    @_builtins.property
    @pulumi.getter(name="ethernetDialerPoolNumber")
    def ethernet_dialer_pool_number(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        Dialer pool number
          - Range: `1`-`255`
        """
        return pulumi.get(self, "ethernet_dialer_pool_number")

    @ethernet_dialer_pool_number.setter
    def ethernet_dialer_pool_number(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "ethernet_dialer_pool_number", value)

    @_builtins.property
    @pulumi.getter(name="ethernetDialerPoolNumberVariable")
    def ethernet_dialer_pool_number_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "ethernet_dialer_pool_number_variable")

    @ethernet_dialer_pool_number_variable.setter
    def ethernet_dialer_pool_number_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "ethernet_dialer_pool_number_variable", value)

    @_builtins.property
    @pulumi.getter(name="ethernetInterfaceName")
    def ethernet_interface_name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Ethernet Interface/Sub Interface Name including sub interface number
        """
        return pulumi.get(self, "ethernet_interface_name")

    @ethernet_interface_name.setter
    def ethernet_interface_name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "ethernet_interface_name", value)

    @_builtins.property
    @pulumi.getter(name="ethernetInterfaceNameVariable")
    def ethernet_interface_name_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "ethernet_interface_name_variable")

    @ethernet_interface_name_variable.setter
    def ethernet_interface_name_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "ethernet_interface_name_variable", value)

    @_builtins.property
    @pulumi.getter(name="ethernetPppMaximumPayload")
    def ethernet_ppp_maximum_payload(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        Maximum MRU to be negotiated during PPP LCP negotiation
          - Range: `64`-`1792`
        """
        return pulumi.get(self, "ethernet_ppp_maximum_payload")

    @ethernet_ppp_maximum_payload.setter
    def ethernet_ppp_maximum_payload(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "ethernet_ppp_maximum_payload", value)

    @_builtins.property
    @pulumi.getter(name="ethernetPppMaximumPayloadVariable")
    def ethernet_ppp_maximum_payload_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "ethernet_ppp_maximum_payload_variable")

    @ethernet_ppp_maximum_payload_variable.setter
    def ethernet_ppp_maximum_payload_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "ethernet_ppp_maximum_payload_variable", value)

    @_builtins.property
    @pulumi.getter(name="ethernetUnnumberedLoopbackInterface")
    def ethernet_unnumbered_loopback_interface(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Dialer IP Unnumbered Loopback interface name
        """
        return pulumi.get(self, "ethernet_unnumbered_loopback_interface")

    @ethernet_unnumbered_loopback_interface.setter
    def ethernet_unnumbered_loopback_interface(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "ethernet_unnumbered_loopback_interface", value)

    @_builtins.property
    @pulumi.getter(name="ethernetUnnumberedLoopbackInterfaceVariable")
    def ethernet_unnumbered_loopback_interface_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "ethernet_unnumbered_loopback_interface_variable")

    @ethernet_unnumbered_loopback_interface_variable.setter
    def ethernet_unnumbered_loopback_interface_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "ethernet_unnumbered_loopback_interface_variable", value)

    @_builtins.property
    @pulumi.getter(name="ethernetVlanId")
    def ethernet_vlan_id(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        Encapsulation VLAN id
          - Range: `1`-`4094`
        """
        return pulumi.get(self, "ethernet_vlan_id")

    @ethernet_vlan_id.setter
    def ethernet_vlan_id(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "ethernet_vlan_id", value)

    @_builtins.property
    @pulumi.getter(name="ethernetVlanIdVariable")
    def ethernet_vlan_id_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "ethernet_vlan_id_variable")

    @ethernet_vlan_id_variable.setter
    def ethernet_vlan_id_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "ethernet_vlan_id_variable", value)

    @_builtins.property
    @pulumi.getter(name="ipDirectedBroadcast")
    def ip_directed_broadcast(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        IP Directed-Broadcast
          - Default value: `false`
        """
        return pulumi.get(self, "ip_directed_broadcast")

    @ip_directed_broadcast.setter
    def ip_directed_broadcast(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "ip_directed_broadcast", value)

    @_builtins.property
    @pulumi.getter(name="ipDirectedBroadcastVariable")
    def ip_directed_broadcast_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "ip_directed_broadcast_variable")

    @ip_directed_broadcast_variable.setter
    def ip_directed_broadcast_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "ip_directed_broadcast_variable", value)

    @_builtins.property
    @pulumi.getter(name="ipMtu")
    def ip_mtu(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        Interface MTU <576..2000>, in bytes
          - Range: `576`-`2000`
          - Default value: `1500`
        """
        return pulumi.get(self, "ip_mtu")

    @ip_mtu.setter
    def ip_mtu(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "ip_mtu", value)

    @_builtins.property
    @pulumi.getter(name="ipMtuVariable")
    def ip_mtu_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "ip_mtu_variable")

    @ip_mtu_variable.setter
    def ip_mtu_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "ip_mtu_variable", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The name of the feature template
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "name", value)

    @_builtins.property
    @pulumi.getter
    def nat(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Network Address Translation on this interface
          - Default value: `false`
        """
        return pulumi.get(self, "nat")

    @nat.setter
    def nat(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "nat", value)

    @_builtins.property
    @pulumi.getter(name="natBlockIcmpError")
    def nat_block_icmp_error(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Block inbound ICMP error messages
          - Default value: `true`
        """
        return pulumi.get(self, "nat_block_icmp_error")

    @nat_block_icmp_error.setter
    def nat_block_icmp_error(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "nat_block_icmp_error", value)

    @_builtins.property
    @pulumi.getter(name="natBlockIcmpErrorVariable")
    def nat_block_icmp_error_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "nat_block_icmp_error_variable")

    @nat_block_icmp_error_variable.setter
    def nat_block_icmp_error_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "nat_block_icmp_error_variable", value)

    @_builtins.property
    @pulumi.getter(name="natPortForwards")
    def nat_port_forwards(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['VpnInterfaceDslPppoeFeatureTemplateNatPortForwardArgs']]]]:
        """
        Set port-forwarding rules for NAT on this interface
        """
        return pulumi.get(self, "nat_port_forwards")

    @nat_port_forwards.setter
    def nat_port_forwards(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['VpnInterfaceDslPppoeFeatureTemplateNatPortForwardArgs']]]]):
        pulumi.set(self, "nat_port_forwards", value)

    @_builtins.property
    @pulumi.getter(name="natRefreshMode")
    def nat_refresh_mode(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Set NAT refresh mode
          - Choices: `outbound`, `bi-directional`
          - Default value: `outbound`
        """
        return pulumi.get(self, "nat_refresh_mode")

    @nat_refresh_mode.setter
    def nat_refresh_mode(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "nat_refresh_mode", value)

    @_builtins.property
    @pulumi.getter(name="natRefreshModeVariable")
    def nat_refresh_mode_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "nat_refresh_mode_variable")

    @nat_refresh_mode_variable.setter
    def nat_refresh_mode_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "nat_refresh_mode_variable", value)

    @_builtins.property
    @pulumi.getter(name="natResponseToPing")
    def nat_response_to_ping(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Respond to ping requests to NAT interface ip address from the public side
          - Default value: `false`
        """
        return pulumi.get(self, "nat_response_to_ping")

    @nat_response_to_ping.setter
    def nat_response_to_ping(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "nat_response_to_ping", value)

    @_builtins.property
    @pulumi.getter(name="natResponseToPingVariable")
    def nat_response_to_ping_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "nat_response_to_ping_variable")

    @nat_response_to_ping_variable.setter
    def nat_response_to_ping_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "nat_response_to_ping_variable", value)

    @_builtins.property
    @pulumi.getter(name="natTcpTimeout")
    def nat_tcp_timeout(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        Set NAT TCP session timeout, in minutes
          - Range: `1`-`8947`
          - Default value: `60`
        """
        return pulumi.get(self, "nat_tcp_timeout")

    @nat_tcp_timeout.setter
    def nat_tcp_timeout(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "nat_tcp_timeout", value)

    @_builtins.property
    @pulumi.getter(name="natTcpTimeoutVariable")
    def nat_tcp_timeout_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "nat_tcp_timeout_variable")

    @nat_tcp_timeout_variable.setter
    def nat_tcp_timeout_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "nat_tcp_timeout_variable", value)

    @_builtins.property
    @pulumi.getter(name="natUdpTimeout")
    def nat_udp_timeout(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        Set NAT UDP session timeout, in minutes
          - Range: `1`-`8947`
          - Default value: `1`
        """
        return pulumi.get(self, "nat_udp_timeout")

    @nat_udp_timeout.setter
    def nat_udp_timeout(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "nat_udp_timeout", value)

    @_builtins.property
    @pulumi.getter(name="natUdpTimeoutVariable")
    def nat_udp_timeout_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "nat_udp_timeout_variable")

    @nat_udp_timeout_variable.setter
    def nat_udp_timeout_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "nat_udp_timeout_variable", value)

    @_builtins.property
    @pulumi.getter(name="papPassword")
    def pap_password(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        PAP outbound Password
        """
        return pulumi.get(self, "pap_password")

    @pap_password.setter
    def pap_password(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "pap_password", value)

    @_builtins.property
    @pulumi.getter(name="papPppAuthPassword")
    def pap_ppp_auth_password(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specify ppp pap authentication Password
        """
        return pulumi.get(self, "pap_ppp_auth_password")

    @pap_ppp_auth_password.setter
    def pap_ppp_auth_password(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "pap_ppp_auth_password", value)

    @_builtins.property
    @pulumi.getter(name="papPppAuthPasswordVariable")
    def pap_ppp_auth_password_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "pap_ppp_auth_password_variable")

    @pap_ppp_auth_password_variable.setter
    def pap_ppp_auth_password_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "pap_ppp_auth_password_variable", value)

    @_builtins.property
    @pulumi.getter(name="papUsername")
    def pap_username(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        PAP outbound Sent Username
        """
        return pulumi.get(self, "pap_username")

    @pap_username.setter
    def pap_username(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "pap_username", value)

    @_builtins.property
    @pulumi.getter(name="papUsernameVariable")
    def pap_username_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "pap_username_variable")

    @pap_username_variable.setter
    def pap_username_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "pap_username_variable", value)

    @_builtins.property
    @pulumi.getter(name="perTunnelQos")
    def per_tunnel_qos(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Per-tunnel Qos
          - Default value: `false`
        """
        return pulumi.get(self, "per_tunnel_qos")

    @per_tunnel_qos.setter
    def per_tunnel_qos(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "per_tunnel_qos", value)

    @_builtins.property
    @pulumi.getter(name="perTunnelQosAggregator")
    def per_tunnel_qos_aggregator(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Per-tunnel QoS Aggregator
          - Default value: `false`
        """
        return pulumi.get(self, "per_tunnel_qos_aggregator")

    @per_tunnel_qos_aggregator.setter
    def per_tunnel_qos_aggregator(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "per_tunnel_qos_aggregator", value)

    @_builtins.property
    @pulumi.getter(name="perTunnelQosAggregatorVariable")
    def per_tunnel_qos_aggregator_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "per_tunnel_qos_aggregator_variable")

    @per_tunnel_qos_aggregator_variable.setter
    def per_tunnel_qos_aggregator_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "per_tunnel_qos_aggregator_variable", value)

    @_builtins.property
    @pulumi.getter(name="perTunnelQosVariable")
    def per_tunnel_qos_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "per_tunnel_qos_variable")

    @per_tunnel_qos_variable.setter
    def per_tunnel_qos_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "per_tunnel_qos_variable", value)

    @_builtins.property
    @pulumi.getter
    def policers(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['VpnInterfaceDslPppoeFeatureTemplatePolicerArgs']]]]:
        """
        Enable policer
        """
        return pulumi.get(self, "policers")

    @policers.setter
    def policers(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['VpnInterfaceDslPppoeFeatureTemplatePolicerArgs']]]]):
        pulumi.set(self, "policers", value)

    @_builtins.property
    @pulumi.getter(name="pppAuthenticationProtocol")
    def ppp_authentication_protocol(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        PPP Link Authentication Protocol
          - Choices: `chap`, `pap`
        """
        return pulumi.get(self, "ppp_authentication_protocol")

    @ppp_authentication_protocol.setter
    def ppp_authentication_protocol(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "ppp_authentication_protocol", value)

    @_builtins.property
    @pulumi.getter(name="pppAuthenticationProtocolPap")
    def ppp_authentication_protocol_pap(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        PPP Authentication Protocol PAP
          - Default value: `false`
        """
        return pulumi.get(self, "ppp_authentication_protocol_pap")

    @ppp_authentication_protocol_pap.setter
    def ppp_authentication_protocol_pap(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "ppp_authentication_protocol_pap", value)

    @_builtins.property
    @pulumi.getter(name="pppAuthenticationProtocolVariable")
    def ppp_authentication_protocol_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "ppp_authentication_protocol_variable")

    @ppp_authentication_protocol_variable.setter
    def ppp_authentication_protocol_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "ppp_authentication_protocol_variable", value)

    @_builtins.property
    @pulumi.getter(name="pppAuthenticationType")
    def ppp_authentication_type(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Authenticate remote on incoming call only
          - Choices: `callin`, `false`
          - Default value: `callin`
        """
        return pulumi.get(self, "ppp_authentication_type")

    @ppp_authentication_type.setter
    def ppp_authentication_type(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "ppp_authentication_type", value)

    @_builtins.property
    @pulumi.getter(name="qosAdaptiveBandwidthDownstream")
    def qos_adaptive_bandwidth_downstream(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        Adaptive QoS default downstream bandwidth
          - Range: `8`-`100000000`
        """
        return pulumi.get(self, "qos_adaptive_bandwidth_downstream")

    @qos_adaptive_bandwidth_downstream.setter
    def qos_adaptive_bandwidth_downstream(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "qos_adaptive_bandwidth_downstream", value)

    @_builtins.property
    @pulumi.getter(name="qosAdaptiveBandwidthDownstreamVariable")
    def qos_adaptive_bandwidth_downstream_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "qos_adaptive_bandwidth_downstream_variable")

    @qos_adaptive_bandwidth_downstream_variable.setter
    def qos_adaptive_bandwidth_downstream_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "qos_adaptive_bandwidth_downstream_variable", value)

    @_builtins.property
    @pulumi.getter(name="qosAdaptiveBandwidthUpstream")
    def qos_adaptive_bandwidth_upstream(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        Adaptive QoS default upstream bandwidth
          - Range: `8`-`100000000`
        """
        return pulumi.get(self, "qos_adaptive_bandwidth_upstream")

    @qos_adaptive_bandwidth_upstream.setter
    def qos_adaptive_bandwidth_upstream(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "qos_adaptive_bandwidth_upstream", value)

    @_builtins.property
    @pulumi.getter(name="qosAdaptiveBandwidthUpstreamVariable")
    def qos_adaptive_bandwidth_upstream_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "qos_adaptive_bandwidth_upstream_variable")

    @qos_adaptive_bandwidth_upstream_variable.setter
    def qos_adaptive_bandwidth_upstream_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "qos_adaptive_bandwidth_upstream_variable", value)

    @_builtins.property
    @pulumi.getter(name="qosAdaptiveMaxDownstream")
    def qos_adaptive_max_downstream(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        Downstream max bandwidth limit
          - Range: `8`-`100000000`
        """
        return pulumi.get(self, "qos_adaptive_max_downstream")

    @qos_adaptive_max_downstream.setter
    def qos_adaptive_max_downstream(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "qos_adaptive_max_downstream", value)

    @_builtins.property
    @pulumi.getter(name="qosAdaptiveMaxDownstreamVariable")
    def qos_adaptive_max_downstream_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "qos_adaptive_max_downstream_variable")

    @qos_adaptive_max_downstream_variable.setter
    def qos_adaptive_max_downstream_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "qos_adaptive_max_downstream_variable", value)

    @_builtins.property
    @pulumi.getter(name="qosAdaptiveMaxUpstream")
    def qos_adaptive_max_upstream(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        Upstream max bandwidth limit
          - Range: `8`-`100000000`
        """
        return pulumi.get(self, "qos_adaptive_max_upstream")

    @qos_adaptive_max_upstream.setter
    def qos_adaptive_max_upstream(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "qos_adaptive_max_upstream", value)

    @_builtins.property
    @pulumi.getter(name="qosAdaptiveMaxUpstreamVariable")
    def qos_adaptive_max_upstream_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "qos_adaptive_max_upstream_variable")

    @qos_adaptive_max_upstream_variable.setter
    def qos_adaptive_max_upstream_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "qos_adaptive_max_upstream_variable", value)

    @_builtins.property
    @pulumi.getter(name="qosAdaptiveMinDownstream")
    def qos_adaptive_min_downstream(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        Downstream min bandwidth limit
          - Range: `8`-`100000000`
        """
        return pulumi.get(self, "qos_adaptive_min_downstream")

    @qos_adaptive_min_downstream.setter
    def qos_adaptive_min_downstream(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "qos_adaptive_min_downstream", value)

    @_builtins.property
    @pulumi.getter(name="qosAdaptiveMinDownstreamVariable")
    def qos_adaptive_min_downstream_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "qos_adaptive_min_downstream_variable")

    @qos_adaptive_min_downstream_variable.setter
    def qos_adaptive_min_downstream_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "qos_adaptive_min_downstream_variable", value)

    @_builtins.property
    @pulumi.getter(name="qosAdaptiveMinUpstream")
    def qos_adaptive_min_upstream(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        Upstream min bandwidth limit
          - Range: `8`-`100000000`
        """
        return pulumi.get(self, "qos_adaptive_min_upstream")

    @qos_adaptive_min_upstream.setter
    def qos_adaptive_min_upstream(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "qos_adaptive_min_upstream", value)

    @_builtins.property
    @pulumi.getter(name="qosAdaptiveMinUpstreamVariable")
    def qos_adaptive_min_upstream_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "qos_adaptive_min_upstream_variable")

    @qos_adaptive_min_upstream_variable.setter
    def qos_adaptive_min_upstream_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "qos_adaptive_min_upstream_variable", value)

    @_builtins.property
    @pulumi.getter(name="qosAdaptivePeriod")
    def qos_adaptive_period(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        Periodic timer for adaptive QoS in minutes
          - Range: `1`-`720`
          - Default value: `15`
        """
        return pulumi.get(self, "qos_adaptive_period")

    @qos_adaptive_period.setter
    def qos_adaptive_period(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "qos_adaptive_period", value)

    @_builtins.property
    @pulumi.getter(name="qosAdaptivePeriodVariable")
    def qos_adaptive_period_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "qos_adaptive_period_variable")

    @qos_adaptive_period_variable.setter
    def qos_adaptive_period_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "qos_adaptive_period_variable", value)

    @_builtins.property
    @pulumi.getter(name="qosMap")
    def qos_map(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Name of QoS map
        """
        return pulumi.get(self, "qos_map")

    @qos_map.setter
    def qos_map(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "qos_map", value)

    @_builtins.property
    @pulumi.getter(name="qosMapVariable")
    def qos_map_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "qos_map_variable")

    @qos_map_variable.setter
    def qos_map_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "qos_map_variable", value)

    @_builtins.property
    @pulumi.getter(name="secondaryRegion")
    def secondary_region(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Enable secondary region
          - Choices: `off`, `secondary-only`, `secondary-shared`
          - Default value: `off`
        """
        return pulumi.get(self, "secondary_region")

    @secondary_region.setter
    def secondary_region(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "secondary_region", value)

    @_builtins.property
    @pulumi.getter(name="secondaryRegionVariable")
    def secondary_region_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "secondary_region_variable")

    @secondary_region_variable.setter
    def secondary_region_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "secondary_region_variable", value)

    @_builtins.property
    @pulumi.getter(name="shapingRate")
    def shaping_rate(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        1ge  interfaces: [0..1000000]kbps; 10ge interfaces: [0..10000000]kbps
          - Range: `8`-`100000000`
        """
        return pulumi.get(self, "shaping_rate")

    @shaping_rate.setter
    def shaping_rate(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "shaping_rate", value)

    @_builtins.property
    @pulumi.getter(name="shapingRateVariable")
    def shaping_rate_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "shaping_rate_variable")

    @shaping_rate_variable.setter
    def shaping_rate_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "shaping_rate_variable", value)

    @_builtins.property
    @pulumi.getter
    def shutdown(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Administrative state
          - Default value: `true`
        """
        return pulumi.get(self, "shutdown")

    @shutdown.setter
    def shutdown(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "shutdown", value)

    @_builtins.property
    @pulumi.getter(name="shutdownVariable")
    def shutdown_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "shutdown_variable")

    @shutdown_variable.setter
    def shutdown_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "shutdown_variable", value)

    @_builtins.property
    @pulumi.getter(name="tcpMss")
    def tcp_mss(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        TCP MSS on SYN packets, in bytes
          - Range: `552`-`1960`
        """
        return pulumi.get(self, "tcp_mss")

    @tcp_mss.setter
    def tcp_mss(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "tcp_mss", value)

    @_builtins.property
    @pulumi.getter(name="tcpMssVariable")
    def tcp_mss_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "tcp_mss_variable")

    @tcp_mss_variable.setter
    def tcp_mss_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "tcp_mss_variable", value)

    @_builtins.property
    @pulumi.getter(name="templateType")
    def template_type(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The template type
        """
        return pulumi.get(self, "template_type")

    @template_type.setter
    def template_type(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "template_type", value)

    @_builtins.property
    @pulumi.getter(name="tlocExtension")
    def tloc_extension(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Extends a local TLOC to a remote node only for vpn 0
        """
        return pulumi.get(self, "tloc_extension")

    @tloc_extension.setter
    def tloc_extension(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "tloc_extension", value)

    @_builtins.property
    @pulumi.getter(name="tlocExtensionVariable")
    def tloc_extension_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "tloc_extension_variable")

    @tloc_extension_variable.setter
    def tloc_extension_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "tloc_extension_variable", value)

    @_builtins.property
    @pulumi.getter(name="trackerVariable")
    def tracker_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "tracker_variable")

    @tracker_variable.setter
    def tracker_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "tracker_variable", value)

    @_builtins.property
    @pulumi.getter
    def trackers(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]:
        """
        Enable tracker for this interface
        """
        return pulumi.get(self, "trackers")

    @trackers.setter
    def trackers(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "trackers", value)

    @_builtins.property
    @pulumi.getter(name="tunnelInterfaceAllowAll")
    def tunnel_interface_allow_all(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Allow all traffic. Overrides all other allow-service options if allow-service all is set
          - Default value: `false`
        """
        return pulumi.get(self, "tunnel_interface_allow_all")

    @tunnel_interface_allow_all.setter
    def tunnel_interface_allow_all(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "tunnel_interface_allow_all", value)

    @_builtins.property
    @pulumi.getter(name="tunnelInterfaceAllowAllVariable")
    def tunnel_interface_allow_all_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "tunnel_interface_allow_all_variable")

    @tunnel_interface_allow_all_variable.setter
    def tunnel_interface_allow_all_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "tunnel_interface_allow_all_variable", value)

    @_builtins.property
    @pulumi.getter(name="tunnelInterfaceAllowBgp")
    def tunnel_interface_allow_bgp(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Allow/deny BGP
          - Default value: `false`
        """
        return pulumi.get(self, "tunnel_interface_allow_bgp")

    @tunnel_interface_allow_bgp.setter
    def tunnel_interface_allow_bgp(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "tunnel_interface_allow_bgp", value)

    @_builtins.property
    @pulumi.getter(name="tunnelInterfaceAllowBgpVariable")
    def tunnel_interface_allow_bgp_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "tunnel_interface_allow_bgp_variable")

    @tunnel_interface_allow_bgp_variable.setter
    def tunnel_interface_allow_bgp_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "tunnel_interface_allow_bgp_variable", value)

    @_builtins.property
    @pulumi.getter(name="tunnelInterfaceAllowDhcp")
    def tunnel_interface_allow_dhcp(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Allow/Deny DHCP
          - Default value: `true`
        """
        return pulumi.get(self, "tunnel_interface_allow_dhcp")

    @tunnel_interface_allow_dhcp.setter
    def tunnel_interface_allow_dhcp(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "tunnel_interface_allow_dhcp", value)

    @_builtins.property
    @pulumi.getter(name="tunnelInterfaceAllowDhcpVariable")
    def tunnel_interface_allow_dhcp_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "tunnel_interface_allow_dhcp_variable")

    @tunnel_interface_allow_dhcp_variable.setter
    def tunnel_interface_allow_dhcp_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "tunnel_interface_allow_dhcp_variable", value)

    @_builtins.property
    @pulumi.getter(name="tunnelInterfaceAllowDns")
    def tunnel_interface_allow_dns(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Allow/Deny DNS
          - Default value: `true`
        """
        return pulumi.get(self, "tunnel_interface_allow_dns")

    @tunnel_interface_allow_dns.setter
    def tunnel_interface_allow_dns(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "tunnel_interface_allow_dns", value)

    @_builtins.property
    @pulumi.getter(name="tunnelInterfaceAllowDnsVariable")
    def tunnel_interface_allow_dns_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "tunnel_interface_allow_dns_variable")

    @tunnel_interface_allow_dns_variable.setter
    def tunnel_interface_allow_dns_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "tunnel_interface_allow_dns_variable", value)

    @_builtins.property
    @pulumi.getter(name="tunnelInterfaceAllowHttps")
    def tunnel_interface_allow_https(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Allow/Deny Https
          - Default value: `false`
        """
        return pulumi.get(self, "tunnel_interface_allow_https")

    @tunnel_interface_allow_https.setter
    def tunnel_interface_allow_https(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "tunnel_interface_allow_https", value)

    @_builtins.property
    @pulumi.getter(name="tunnelInterfaceAllowHttpsVariable")
    def tunnel_interface_allow_https_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "tunnel_interface_allow_https_variable")

    @tunnel_interface_allow_https_variable.setter
    def tunnel_interface_allow_https_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "tunnel_interface_allow_https_variable", value)

    @_builtins.property
    @pulumi.getter(name="tunnelInterfaceAllowIcmp")
    def tunnel_interface_allow_icmp(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Allow/Deny ICMP
          - Default value: `true`
        """
        return pulumi.get(self, "tunnel_interface_allow_icmp")

    @tunnel_interface_allow_icmp.setter
    def tunnel_interface_allow_icmp(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "tunnel_interface_allow_icmp", value)

    @_builtins.property
    @pulumi.getter(name="tunnelInterfaceAllowIcmpVariable")
    def tunnel_interface_allow_icmp_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "tunnel_interface_allow_icmp_variable")

    @tunnel_interface_allow_icmp_variable.setter
    def tunnel_interface_allow_icmp_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "tunnel_interface_allow_icmp_variable", value)

    @_builtins.property
    @pulumi.getter(name="tunnelInterfaceAllowNetconf")
    def tunnel_interface_allow_netconf(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Allow/Deny NETCONF
          - Default value: `false`
        """
        return pulumi.get(self, "tunnel_interface_allow_netconf")

    @tunnel_interface_allow_netconf.setter
    def tunnel_interface_allow_netconf(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "tunnel_interface_allow_netconf", value)

    @_builtins.property
    @pulumi.getter(name="tunnelInterfaceAllowNetconfVariable")
    def tunnel_interface_allow_netconf_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "tunnel_interface_allow_netconf_variable")

    @tunnel_interface_allow_netconf_variable.setter
    def tunnel_interface_allow_netconf_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "tunnel_interface_allow_netconf_variable", value)

    @_builtins.property
    @pulumi.getter(name="tunnelInterfaceAllowNtp")
    def tunnel_interface_allow_ntp(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Allow/Deny NTP
          - Default value: `false`
        """
        return pulumi.get(self, "tunnel_interface_allow_ntp")

    @tunnel_interface_allow_ntp.setter
    def tunnel_interface_allow_ntp(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "tunnel_interface_allow_ntp", value)

    @_builtins.property
    @pulumi.getter(name="tunnelInterfaceAllowNtpVariable")
    def tunnel_interface_allow_ntp_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "tunnel_interface_allow_ntp_variable")

    @tunnel_interface_allow_ntp_variable.setter
    def tunnel_interface_allow_ntp_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "tunnel_interface_allow_ntp_variable", value)

    @_builtins.property
    @pulumi.getter(name="tunnelInterfaceAllowOspf")
    def tunnel_interface_allow_ospf(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Allow/Deny OSPF
          - Default value: `false`
        """
        return pulumi.get(self, "tunnel_interface_allow_ospf")

    @tunnel_interface_allow_ospf.setter
    def tunnel_interface_allow_ospf(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "tunnel_interface_allow_ospf", value)

    @_builtins.property
    @pulumi.getter(name="tunnelInterfaceAllowOspfVariable")
    def tunnel_interface_allow_ospf_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "tunnel_interface_allow_ospf_variable")

    @tunnel_interface_allow_ospf_variable.setter
    def tunnel_interface_allow_ospf_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "tunnel_interface_allow_ospf_variable", value)

    @_builtins.property
    @pulumi.getter(name="tunnelInterfaceAllowSnmp")
    def tunnel_interface_allow_snmp(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Allow/Deny SNMP
          - Default value: `false`
        """
        return pulumi.get(self, "tunnel_interface_allow_snmp")

    @tunnel_interface_allow_snmp.setter
    def tunnel_interface_allow_snmp(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "tunnel_interface_allow_snmp", value)

    @_builtins.property
    @pulumi.getter(name="tunnelInterfaceAllowSnmpVariable")
    def tunnel_interface_allow_snmp_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "tunnel_interface_allow_snmp_variable")

    @tunnel_interface_allow_snmp_variable.setter
    def tunnel_interface_allow_snmp_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "tunnel_interface_allow_snmp_variable", value)

    @_builtins.property
    @pulumi.getter(name="tunnelInterfaceAllowSsh")
    def tunnel_interface_allow_ssh(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Allow/Deny SSH
          - Default value: `false`
        """
        return pulumi.get(self, "tunnel_interface_allow_ssh")

    @tunnel_interface_allow_ssh.setter
    def tunnel_interface_allow_ssh(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "tunnel_interface_allow_ssh", value)

    @_builtins.property
    @pulumi.getter(name="tunnelInterfaceAllowSshVariable")
    def tunnel_interface_allow_ssh_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "tunnel_interface_allow_ssh_variable")

    @tunnel_interface_allow_ssh_variable.setter
    def tunnel_interface_allow_ssh_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "tunnel_interface_allow_ssh_variable", value)

    @_builtins.property
    @pulumi.getter(name="tunnelInterfaceAllowStun")
    def tunnel_interface_allow_stun(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Allow/Deny STUN
          - Default value: `false`
        """
        return pulumi.get(self, "tunnel_interface_allow_stun")

    @tunnel_interface_allow_stun.setter
    def tunnel_interface_allow_stun(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "tunnel_interface_allow_stun", value)

    @_builtins.property
    @pulumi.getter(name="tunnelInterfaceAllowStunVariable")
    def tunnel_interface_allow_stun_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "tunnel_interface_allow_stun_variable")

    @tunnel_interface_allow_stun_variable.setter
    def tunnel_interface_allow_stun_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "tunnel_interface_allow_stun_variable", value)

    @_builtins.property
    @pulumi.getter(name="tunnelInterfaceBindLoopbackTunnel")
    def tunnel_interface_bind_loopback_tunnel(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Bind loopback tunnel interface to a physical interface
        """
        return pulumi.get(self, "tunnel_interface_bind_loopback_tunnel")

    @tunnel_interface_bind_loopback_tunnel.setter
    def tunnel_interface_bind_loopback_tunnel(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "tunnel_interface_bind_loopback_tunnel", value)

    @_builtins.property
    @pulumi.getter(name="tunnelInterfaceBindLoopbackTunnelVariable")
    def tunnel_interface_bind_loopback_tunnel_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "tunnel_interface_bind_loopback_tunnel_variable")

    @tunnel_interface_bind_loopback_tunnel_variable.setter
    def tunnel_interface_bind_loopback_tunnel_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "tunnel_interface_bind_loopback_tunnel_variable", value)

    @_builtins.property
    @pulumi.getter(name="tunnelInterfaceBorder")
    def tunnel_interface_border(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Set TLOC as border TLOC
          - Default value: `false`
        """
        return pulumi.get(self, "tunnel_interface_border")

    @tunnel_interface_border.setter
    def tunnel_interface_border(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "tunnel_interface_border", value)

    @_builtins.property
    @pulumi.getter(name="tunnelInterfaceBorderVariable")
    def tunnel_interface_border_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "tunnel_interface_border_variable")

    @tunnel_interface_border_variable.setter
    def tunnel_interface_border_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "tunnel_interface_border_variable", value)

    @_builtins.property
    @pulumi.getter(name="tunnelInterfaceCarrier")
    def tunnel_interface_carrier(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Set carrier for TLOC
          - Choices: `default`, `carrier1`, `carrier2`, `carrier3`, `carrier4`, `carrier5`, `carrier6`, `carrier7`, `carrier8`
          - Default value: `default`
        """
        return pulumi.get(self, "tunnel_interface_carrier")

    @tunnel_interface_carrier.setter
    def tunnel_interface_carrier(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "tunnel_interface_carrier", value)

    @_builtins.property
    @pulumi.getter(name="tunnelInterfaceCarrierVariable")
    def tunnel_interface_carrier_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "tunnel_interface_carrier_variable")

    @tunnel_interface_carrier_variable.setter
    def tunnel_interface_carrier_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "tunnel_interface_carrier_variable", value)

    @_builtins.property
    @pulumi.getter(name="tunnelInterfaceClearDontFragment")
    def tunnel_interface_clear_dont_fragment(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Enable clear dont fragment (Currently Only SDWAN Tunnel Interface)
          - Default value: `false`
        """
        return pulumi.get(self, "tunnel_interface_clear_dont_fragment")

    @tunnel_interface_clear_dont_fragment.setter
    def tunnel_interface_clear_dont_fragment(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "tunnel_interface_clear_dont_fragment", value)

    @_builtins.property
    @pulumi.getter(name="tunnelInterfaceClearDontFragmentVariable")
    def tunnel_interface_clear_dont_fragment_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "tunnel_interface_clear_dont_fragment_variable")

    @tunnel_interface_clear_dont_fragment_variable.setter
    def tunnel_interface_clear_dont_fragment_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "tunnel_interface_clear_dont_fragment_variable", value)

    @_builtins.property
    @pulumi.getter(name="tunnelInterfaceColor")
    def tunnel_interface_color(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Set color for TLOC
          - Choices: `default`, `mpls`, `metro-ethernet`, `biz-internet`, `public-internet`, `lte`, `3g`, `red`, `green`, `blue`, `gold`, `silver`, `bronze`, `custom1`, `custom2`, `custom3`, `private1`, `private2`, `private3`, `private4`, `private5`, `private6`
          - Default value: `default`
        """
        return pulumi.get(self, "tunnel_interface_color")

    @tunnel_interface_color.setter
    def tunnel_interface_color(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "tunnel_interface_color", value)

    @_builtins.property
    @pulumi.getter(name="tunnelInterfaceColorRestrict")
    def tunnel_interface_color_restrict(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Restrict this TLOC behavior
          - Default value: `false`
        """
        return pulumi.get(self, "tunnel_interface_color_restrict")

    @tunnel_interface_color_restrict.setter
    def tunnel_interface_color_restrict(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "tunnel_interface_color_restrict", value)

    @_builtins.property
    @pulumi.getter(name="tunnelInterfaceColorVariable")
    def tunnel_interface_color_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "tunnel_interface_color_variable")

    @tunnel_interface_color_variable.setter
    def tunnel_interface_color_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "tunnel_interface_color_variable", value)

    @_builtins.property
    @pulumi.getter(name="tunnelInterfaceControlConnections")
    def tunnel_interface_control_connections(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Allow Control Connection
          - Default value: `true`
        """
        return pulumi.get(self, "tunnel_interface_control_connections")

    @tunnel_interface_control_connections.setter
    def tunnel_interface_control_connections(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "tunnel_interface_control_connections", value)

    @_builtins.property
    @pulumi.getter(name="tunnelInterfaceControlConnectionsVariable")
    def tunnel_interface_control_connections_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "tunnel_interface_control_connections_variable")

    @tunnel_interface_control_connections_variable.setter
    def tunnel_interface_control_connections_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "tunnel_interface_control_connections_variable", value)

    @_builtins.property
    @pulumi.getter(name="tunnelInterfaceEncapsulations")
    def tunnel_interface_encapsulations(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['VpnInterfaceDslPppoeFeatureTemplateTunnelInterfaceEncapsulationArgs']]]]:
        """
        Encapsulation for TLOC
        """
        return pulumi.get(self, "tunnel_interface_encapsulations")

    @tunnel_interface_encapsulations.setter
    def tunnel_interface_encapsulations(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['VpnInterfaceDslPppoeFeatureTemplateTunnelInterfaceEncapsulationArgs']]]]):
        pulumi.set(self, "tunnel_interface_encapsulations", value)

    @_builtins.property
    @pulumi.getter(name="tunnelInterfaceExcludeControllerGroupListVariable")
    def tunnel_interface_exclude_controller_group_list_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "tunnel_interface_exclude_controller_group_list_variable")

    @tunnel_interface_exclude_controller_group_list_variable.setter
    def tunnel_interface_exclude_controller_group_list_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "tunnel_interface_exclude_controller_group_list_variable", value)

    @_builtins.property
    @pulumi.getter(name="tunnelInterfaceExcludeControllerGroupLists")
    def tunnel_interface_exclude_controller_group_lists(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.int]]]]:
        """
        Exclude the following controller groups defined in this list
        """
        return pulumi.get(self, "tunnel_interface_exclude_controller_group_lists")

    @tunnel_interface_exclude_controller_group_lists.setter
    def tunnel_interface_exclude_controller_group_lists(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.int]]]]):
        pulumi.set(self, "tunnel_interface_exclude_controller_group_lists", value)

    @_builtins.property
    @pulumi.getter(name="tunnelInterfaceGroups")
    def tunnel_interface_groups(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.int]]]]:
        """
        List of groups
        """
        return pulumi.get(self, "tunnel_interface_groups")

    @tunnel_interface_groups.setter
    def tunnel_interface_groups(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.int]]]]):
        pulumi.set(self, "tunnel_interface_groups", value)

    @_builtins.property
    @pulumi.getter(name="tunnelInterfaceGroupsVariable")
    def tunnel_interface_groups_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "tunnel_interface_groups_variable")

    @tunnel_interface_groups_variable.setter
    def tunnel_interface_groups_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "tunnel_interface_groups_variable", value)

    @_builtins.property
    @pulumi.getter(name="tunnelInterfaceHelloInterval")
    def tunnel_interface_hello_interval(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        Set time period of control hello packets <100..600000> milli seconds
          - Range: `100`-`600000`
          - Default value: `1000`
        """
        return pulumi.get(self, "tunnel_interface_hello_interval")

    @tunnel_interface_hello_interval.setter
    def tunnel_interface_hello_interval(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "tunnel_interface_hello_interval", value)

    @_builtins.property
    @pulumi.getter(name="tunnelInterfaceHelloIntervalVariable")
    def tunnel_interface_hello_interval_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "tunnel_interface_hello_interval_variable")

    @tunnel_interface_hello_interval_variable.setter
    def tunnel_interface_hello_interval_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "tunnel_interface_hello_interval_variable", value)

    @_builtins.property
    @pulumi.getter(name="tunnelInterfaceHelloTolerance")
    def tunnel_interface_hello_tolerance(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        Set tolerance of control hello packets <12..6000> seconds
          - Range: `12`-`6000`
          - Default value: `12`
        """
        return pulumi.get(self, "tunnel_interface_hello_tolerance")

    @tunnel_interface_hello_tolerance.setter
    def tunnel_interface_hello_tolerance(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "tunnel_interface_hello_tolerance", value)

    @_builtins.property
    @pulumi.getter(name="tunnelInterfaceHelloToleranceVariable")
    def tunnel_interface_hello_tolerance_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "tunnel_interface_hello_tolerance_variable")

    @tunnel_interface_hello_tolerance_variable.setter
    def tunnel_interface_hello_tolerance_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "tunnel_interface_hello_tolerance_variable", value)

    @_builtins.property
    @pulumi.getter(name="tunnelInterfaceLastResortCircuit")
    def tunnel_interface_last_resort_circuit(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Set TLOC as last resort
          - Default value: `false`
        """
        return pulumi.get(self, "tunnel_interface_last_resort_circuit")

    @tunnel_interface_last_resort_circuit.setter
    def tunnel_interface_last_resort_circuit(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "tunnel_interface_last_resort_circuit", value)

    @_builtins.property
    @pulumi.getter(name="tunnelInterfaceLastResortCircuitVariable")
    def tunnel_interface_last_resort_circuit_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "tunnel_interface_last_resort_circuit_variable")

    @tunnel_interface_last_resort_circuit_variable.setter
    def tunnel_interface_last_resort_circuit_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "tunnel_interface_last_resort_circuit_variable", value)

    @_builtins.property
    @pulumi.getter(name="tunnelInterfaceLowBandwidthLink")
    def tunnel_interface_low_bandwidth_link(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Set the interface as a low-bandwidth circuit
          - Default value: `false`
        """
        return pulumi.get(self, "tunnel_interface_low_bandwidth_link")

    @tunnel_interface_low_bandwidth_link.setter
    def tunnel_interface_low_bandwidth_link(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "tunnel_interface_low_bandwidth_link", value)

    @_builtins.property
    @pulumi.getter(name="tunnelInterfaceLowBandwidthLinkVariable")
    def tunnel_interface_low_bandwidth_link_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "tunnel_interface_low_bandwidth_link_variable")

    @tunnel_interface_low_bandwidth_link_variable.setter
    def tunnel_interface_low_bandwidth_link_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "tunnel_interface_low_bandwidth_link_variable", value)

    @_builtins.property
    @pulumi.getter(name="tunnelInterfaceMaxControlConnections")
    def tunnel_interface_max_control_connections(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        Set the maximum number of control connections for this TLOC
          - Range: `0`-`8`
        """
        return pulumi.get(self, "tunnel_interface_max_control_connections")

    @tunnel_interface_max_control_connections.setter
    def tunnel_interface_max_control_connections(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "tunnel_interface_max_control_connections", value)

    @_builtins.property
    @pulumi.getter(name="tunnelInterfaceMaxControlConnectionsVariable")
    def tunnel_interface_max_control_connections_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "tunnel_interface_max_control_connections_variable")

    @tunnel_interface_max_control_connections_variable.setter
    def tunnel_interface_max_control_connections_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "tunnel_interface_max_control_connections_variable", value)

    @_builtins.property
    @pulumi.getter(name="tunnelInterfaceNatRefreshInterval")
    def tunnel_interface_nat_refresh_interval(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        Set time period of nat refresh packets <1...60> seconds
          - Range: `1`-`60`
          - Default value: `5`
        """
        return pulumi.get(self, "tunnel_interface_nat_refresh_interval")

    @tunnel_interface_nat_refresh_interval.setter
    def tunnel_interface_nat_refresh_interval(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "tunnel_interface_nat_refresh_interval", value)

    @_builtins.property
    @pulumi.getter(name="tunnelInterfaceNatRefreshIntervalVariable")
    def tunnel_interface_nat_refresh_interval_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "tunnel_interface_nat_refresh_interval_variable")

    @tunnel_interface_nat_refresh_interval_variable.setter
    def tunnel_interface_nat_refresh_interval_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "tunnel_interface_nat_refresh_interval_variable", value)

    @_builtins.property
    @pulumi.getter(name="tunnelInterfaceNetworkBroadcast")
    def tunnel_interface_network_broadcast(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Accept and respond to network-prefix-directed broadcasts)
          - Default value: `false`
        """
        return pulumi.get(self, "tunnel_interface_network_broadcast")

    @tunnel_interface_network_broadcast.setter
    def tunnel_interface_network_broadcast(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "tunnel_interface_network_broadcast", value)

    @_builtins.property
    @pulumi.getter(name="tunnelInterfaceNetworkBroadcastVariable")
    def tunnel_interface_network_broadcast_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "tunnel_interface_network_broadcast_variable")

    @tunnel_interface_network_broadcast_variable.setter
    def tunnel_interface_network_broadcast_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "tunnel_interface_network_broadcast_variable", value)

    @_builtins.property
    @pulumi.getter(name="tunnelInterfacePortHop")
    def tunnel_interface_port_hop(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Disallow port hopping on the tunnel interface
          - Default value: `true`
        """
        return pulumi.get(self, "tunnel_interface_port_hop")

    @tunnel_interface_port_hop.setter
    def tunnel_interface_port_hop(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "tunnel_interface_port_hop", value)

    @_builtins.property
    @pulumi.getter(name="tunnelInterfacePortHopVariable")
    def tunnel_interface_port_hop_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "tunnel_interface_port_hop_variable")

    @tunnel_interface_port_hop_variable.setter
    def tunnel_interface_port_hop_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "tunnel_interface_port_hop_variable", value)

    @_builtins.property
    @pulumi.getter(name="tunnelInterfaceTunnelTcpMss")
    def tunnel_interface_tunnel_tcp_mss(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        Tunnel TCP MSS on SYN packets, in bytes
          - Range: `500`-`1460`
        """
        return pulumi.get(self, "tunnel_interface_tunnel_tcp_mss")

    @tunnel_interface_tunnel_tcp_mss.setter
    def tunnel_interface_tunnel_tcp_mss(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "tunnel_interface_tunnel_tcp_mss", value)

    @_builtins.property
    @pulumi.getter(name="tunnelInterfaceTunnelTcpMssVariable")
    def tunnel_interface_tunnel_tcp_mss_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "tunnel_interface_tunnel_tcp_mss_variable")

    @tunnel_interface_tunnel_tcp_mss_variable.setter
    def tunnel_interface_tunnel_tcp_mss_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "tunnel_interface_tunnel_tcp_mss_variable", value)

    @_builtins.property
    @pulumi.getter(name="tunnelInterfaceVbondAsStunServer")
    def tunnel_interface_vbond_as_stun_server(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Put this wan interface in STUN mode only
          - Default value: `false`
        """
        return pulumi.get(self, "tunnel_interface_vbond_as_stun_server")

    @tunnel_interface_vbond_as_stun_server.setter
    def tunnel_interface_vbond_as_stun_server(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "tunnel_interface_vbond_as_stun_server", value)

    @_builtins.property
    @pulumi.getter(name="tunnelInterfaceVbondAsStunServerVariable")
    def tunnel_interface_vbond_as_stun_server_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "tunnel_interface_vbond_as_stun_server_variable")

    @tunnel_interface_vbond_as_stun_server_variable.setter
    def tunnel_interface_vbond_as_stun_server_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "tunnel_interface_vbond_as_stun_server_variable", value)

    @_builtins.property
    @pulumi.getter(name="tunnelInterfaceVmanageConnectionPreference")
    def tunnel_interface_vmanage_connection_preference(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        Set interface preference for control connection to vManage <0..8>
          - Range: `0`-`8`
          - Default value: `5`
        """
        return pulumi.get(self, "tunnel_interface_vmanage_connection_preference")

    @tunnel_interface_vmanage_connection_preference.setter
    def tunnel_interface_vmanage_connection_preference(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "tunnel_interface_vmanage_connection_preference", value)

    @_builtins.property
    @pulumi.getter(name="tunnelInterfaceVmanageConnectionPreferenceVariable")
    def tunnel_interface_vmanage_connection_preference_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "tunnel_interface_vmanage_connection_preference_variable")

    @tunnel_interface_vmanage_connection_preference_variable.setter
    def tunnel_interface_vmanage_connection_preference_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "tunnel_interface_vmanage_connection_preference_variable", value)

    @_builtins.property
    @pulumi.getter(name="tunnelQosMode")
    def tunnel_qos_mode(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Set tunnel QoS mode
          - Choices: `spoke`
        """
        return pulumi.get(self, "tunnel_qos_mode")

    @tunnel_qos_mode.setter
    def tunnel_qos_mode(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "tunnel_qos_mode", value)

    @_builtins.property
    @pulumi.getter(name="tunnelQosModeVariable")
    def tunnel_qos_mode_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "tunnel_qos_mode_variable")

    @tunnel_qos_mode_variable.setter
    def tunnel_qos_mode_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "tunnel_qos_mode_variable", value)

    @_builtins.property
    @pulumi.getter(name="vdslConfigurations")
    def vdsl_configurations(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['VpnInterfaceDslPppoeFeatureTemplateVdslConfigurationArgs']]]]:
        """
        vdsl
        """
        return pulumi.get(self, "vdsl_configurations")

    @vdsl_configurations.setter
    def vdsl_configurations(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['VpnInterfaceDslPppoeFeatureTemplateVdslConfigurationArgs']]]]):
        pulumi.set(self, "vdsl_configurations", value)

    @_builtins.property
    @pulumi.getter
    def version(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        The version of the feature template
        """
        return pulumi.get(self, "version")

    @version.setter
    def version(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "version", value)

    @_builtins.property
    @pulumi.getter(name="vpnQosMap")
    def vpn_qos_map(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Name of VPN QoS map
        """
        return pulumi.get(self, "vpn_qos_map")

    @vpn_qos_map.setter
    def vpn_qos_map(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "vpn_qos_map", value)

    @_builtins.property
    @pulumi.getter(name="vpnQosMapVariable")
    def vpn_qos_map_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "vpn_qos_map_variable")

    @vpn_qos_map_variable.setter
    def vpn_qos_map_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "vpn_qos_map_variable", value)

    @_builtins.property
    @pulumi.getter(name="writeRule")
    def write_rule(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Name of rewrite rule
        """
        return pulumi.get(self, "write_rule")

    @write_rule.setter
    def write_rule(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "write_rule", value)

    @_builtins.property
    @pulumi.getter(name="writeRuleVariable")
    def write_rule_variable(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "write_rule_variable")

    @write_rule_variable.setter
    def write_rule_variable(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "write_rule_variable", value)


@pulumi.type_token("sdwan:index/vpnInterfaceDslPppoeFeatureTemplate:VpnInterfaceDslPppoeFeatureTemplate")
class VpnInterfaceDslPppoeFeatureTemplate(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 access_lists: Optional[pulumi.Input[Sequence[pulumi.Input[Union['VpnInterfaceDslPppoeFeatureTemplateAccessListArgs', 'VpnInterfaceDslPppoeFeatureTemplateAccessListArgsDict']]]]] = None,
                 bandwidth_downstream: Optional[pulumi.Input[_builtins.int]] = None,
                 bandwidth_downstream_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 bandwidth_upstream: Optional[pulumi.Input[_builtins.int]] = None,
                 bandwidth_upstream_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 chap_hostname: Optional[pulumi.Input[_builtins.str]] = None,
                 chap_hostname_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 chap_ppp_auth_password: Optional[pulumi.Input[_builtins.str]] = None,
                 chap_ppp_auth_password_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 core_region: Optional[pulumi.Input[_builtins.str]] = None,
                 core_region_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 description: Optional[pulumi.Input[_builtins.str]] = None,
                 device_types: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 enable_core_region: Optional[pulumi.Input[_builtins.bool]] = None,
                 enable_core_region_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 ethernet_description: Optional[pulumi.Input[_builtins.str]] = None,
                 ethernet_description_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 ethernet_dialer_address_negotiated: Optional[pulumi.Input[_builtins.bool]] = None,
                 ethernet_dialer_pool_number: Optional[pulumi.Input[_builtins.int]] = None,
                 ethernet_dialer_pool_number_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 ethernet_interface_name: Optional[pulumi.Input[_builtins.str]] = None,
                 ethernet_interface_name_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 ethernet_ppp_maximum_payload: Optional[pulumi.Input[_builtins.int]] = None,
                 ethernet_ppp_maximum_payload_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 ethernet_unnumbered_loopback_interface: Optional[pulumi.Input[_builtins.str]] = None,
                 ethernet_unnumbered_loopback_interface_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 ethernet_vlan_id: Optional[pulumi.Input[_builtins.int]] = None,
                 ethernet_vlan_id_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 ip_directed_broadcast: Optional[pulumi.Input[_builtins.bool]] = None,
                 ip_directed_broadcast_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 ip_mtu: Optional[pulumi.Input[_builtins.int]] = None,
                 ip_mtu_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 nat: Optional[pulumi.Input[_builtins.bool]] = None,
                 nat_block_icmp_error: Optional[pulumi.Input[_builtins.bool]] = None,
                 nat_block_icmp_error_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 nat_port_forwards: Optional[pulumi.Input[Sequence[pulumi.Input[Union['VpnInterfaceDslPppoeFeatureTemplateNatPortForwardArgs', 'VpnInterfaceDslPppoeFeatureTemplateNatPortForwardArgsDict']]]]] = None,
                 nat_refresh_mode: Optional[pulumi.Input[_builtins.str]] = None,
                 nat_refresh_mode_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 nat_response_to_ping: Optional[pulumi.Input[_builtins.bool]] = None,
                 nat_response_to_ping_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 nat_tcp_timeout: Optional[pulumi.Input[_builtins.int]] = None,
                 nat_tcp_timeout_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 nat_udp_timeout: Optional[pulumi.Input[_builtins.int]] = None,
                 nat_udp_timeout_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 pap_password: Optional[pulumi.Input[_builtins.bool]] = None,
                 pap_ppp_auth_password: Optional[pulumi.Input[_builtins.str]] = None,
                 pap_ppp_auth_password_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 pap_username: Optional[pulumi.Input[_builtins.str]] = None,
                 pap_username_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 per_tunnel_qos: Optional[pulumi.Input[_builtins.bool]] = None,
                 per_tunnel_qos_aggregator: Optional[pulumi.Input[_builtins.bool]] = None,
                 per_tunnel_qos_aggregator_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 per_tunnel_qos_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 policers: Optional[pulumi.Input[Sequence[pulumi.Input[Union['VpnInterfaceDslPppoeFeatureTemplatePolicerArgs', 'VpnInterfaceDslPppoeFeatureTemplatePolicerArgsDict']]]]] = None,
                 ppp_authentication_protocol: Optional[pulumi.Input[_builtins.str]] = None,
                 ppp_authentication_protocol_pap: Optional[pulumi.Input[_builtins.bool]] = None,
                 ppp_authentication_protocol_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 ppp_authentication_type: Optional[pulumi.Input[_builtins.str]] = None,
                 qos_adaptive_bandwidth_downstream: Optional[pulumi.Input[_builtins.int]] = None,
                 qos_adaptive_bandwidth_downstream_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 qos_adaptive_bandwidth_upstream: Optional[pulumi.Input[_builtins.int]] = None,
                 qos_adaptive_bandwidth_upstream_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 qos_adaptive_max_downstream: Optional[pulumi.Input[_builtins.int]] = None,
                 qos_adaptive_max_downstream_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 qos_adaptive_max_upstream: Optional[pulumi.Input[_builtins.int]] = None,
                 qos_adaptive_max_upstream_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 qos_adaptive_min_downstream: Optional[pulumi.Input[_builtins.int]] = None,
                 qos_adaptive_min_downstream_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 qos_adaptive_min_upstream: Optional[pulumi.Input[_builtins.int]] = None,
                 qos_adaptive_min_upstream_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 qos_adaptive_period: Optional[pulumi.Input[_builtins.int]] = None,
                 qos_adaptive_period_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 qos_map: Optional[pulumi.Input[_builtins.str]] = None,
                 qos_map_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 secondary_region: Optional[pulumi.Input[_builtins.str]] = None,
                 secondary_region_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 shaping_rate: Optional[pulumi.Input[_builtins.int]] = None,
                 shaping_rate_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 shutdown: Optional[pulumi.Input[_builtins.bool]] = None,
                 shutdown_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 tcp_mss: Optional[pulumi.Input[_builtins.int]] = None,
                 tcp_mss_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 tloc_extension: Optional[pulumi.Input[_builtins.str]] = None,
                 tloc_extension_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 tracker_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 trackers: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 tunnel_interface_allow_all: Optional[pulumi.Input[_builtins.bool]] = None,
                 tunnel_interface_allow_all_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 tunnel_interface_allow_bgp: Optional[pulumi.Input[_builtins.bool]] = None,
                 tunnel_interface_allow_bgp_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 tunnel_interface_allow_dhcp: Optional[pulumi.Input[_builtins.bool]] = None,
                 tunnel_interface_allow_dhcp_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 tunnel_interface_allow_dns: Optional[pulumi.Input[_builtins.bool]] = None,
                 tunnel_interface_allow_dns_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 tunnel_interface_allow_https: Optional[pulumi.Input[_builtins.bool]] = None,
                 tunnel_interface_allow_https_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 tunnel_interface_allow_icmp: Optional[pulumi.Input[_builtins.bool]] = None,
                 tunnel_interface_allow_icmp_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 tunnel_interface_allow_netconf: Optional[pulumi.Input[_builtins.bool]] = None,
                 tunnel_interface_allow_netconf_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 tunnel_interface_allow_ntp: Optional[pulumi.Input[_builtins.bool]] = None,
                 tunnel_interface_allow_ntp_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 tunnel_interface_allow_ospf: Optional[pulumi.Input[_builtins.bool]] = None,
                 tunnel_interface_allow_ospf_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 tunnel_interface_allow_snmp: Optional[pulumi.Input[_builtins.bool]] = None,
                 tunnel_interface_allow_snmp_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 tunnel_interface_allow_ssh: Optional[pulumi.Input[_builtins.bool]] = None,
                 tunnel_interface_allow_ssh_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 tunnel_interface_allow_stun: Optional[pulumi.Input[_builtins.bool]] = None,
                 tunnel_interface_allow_stun_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 tunnel_interface_bind_loopback_tunnel: Optional[pulumi.Input[_builtins.str]] = None,
                 tunnel_interface_bind_loopback_tunnel_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 tunnel_interface_border: Optional[pulumi.Input[_builtins.bool]] = None,
                 tunnel_interface_border_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 tunnel_interface_carrier: Optional[pulumi.Input[_builtins.str]] = None,
                 tunnel_interface_carrier_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 tunnel_interface_clear_dont_fragment: Optional[pulumi.Input[_builtins.bool]] = None,
                 tunnel_interface_clear_dont_fragment_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 tunnel_interface_color: Optional[pulumi.Input[_builtins.str]] = None,
                 tunnel_interface_color_restrict: Optional[pulumi.Input[_builtins.bool]] = None,
                 tunnel_interface_color_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 tunnel_interface_control_connections: Optional[pulumi.Input[_builtins.bool]] = None,
                 tunnel_interface_control_connections_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 tunnel_interface_encapsulations: Optional[pulumi.Input[Sequence[pulumi.Input[Union['VpnInterfaceDslPppoeFeatureTemplateTunnelInterfaceEncapsulationArgs', 'VpnInterfaceDslPppoeFeatureTemplateTunnelInterfaceEncapsulationArgsDict']]]]] = None,
                 tunnel_interface_exclude_controller_group_list_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 tunnel_interface_exclude_controller_group_lists: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.int]]]] = None,
                 tunnel_interface_groups: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.int]]]] = None,
                 tunnel_interface_groups_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 tunnel_interface_hello_interval: Optional[pulumi.Input[_builtins.int]] = None,
                 tunnel_interface_hello_interval_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 tunnel_interface_hello_tolerance: Optional[pulumi.Input[_builtins.int]] = None,
                 tunnel_interface_hello_tolerance_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 tunnel_interface_last_resort_circuit: Optional[pulumi.Input[_builtins.bool]] = None,
                 tunnel_interface_last_resort_circuit_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 tunnel_interface_low_bandwidth_link: Optional[pulumi.Input[_builtins.bool]] = None,
                 tunnel_interface_low_bandwidth_link_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 tunnel_interface_max_control_connections: Optional[pulumi.Input[_builtins.int]] = None,
                 tunnel_interface_max_control_connections_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 tunnel_interface_nat_refresh_interval: Optional[pulumi.Input[_builtins.int]] = None,
                 tunnel_interface_nat_refresh_interval_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 tunnel_interface_network_broadcast: Optional[pulumi.Input[_builtins.bool]] = None,
                 tunnel_interface_network_broadcast_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 tunnel_interface_port_hop: Optional[pulumi.Input[_builtins.bool]] = None,
                 tunnel_interface_port_hop_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 tunnel_interface_tunnel_tcp_mss: Optional[pulumi.Input[_builtins.int]] = None,
                 tunnel_interface_tunnel_tcp_mss_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 tunnel_interface_vbond_as_stun_server: Optional[pulumi.Input[_builtins.bool]] = None,
                 tunnel_interface_vbond_as_stun_server_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 tunnel_interface_vmanage_connection_preference: Optional[pulumi.Input[_builtins.int]] = None,
                 tunnel_interface_vmanage_connection_preference_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 tunnel_qos_mode: Optional[pulumi.Input[_builtins.str]] = None,
                 tunnel_qos_mode_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 vdsl_configurations: Optional[pulumi.Input[Sequence[pulumi.Input[Union['VpnInterfaceDslPppoeFeatureTemplateVdslConfigurationArgs', 'VpnInterfaceDslPppoeFeatureTemplateVdslConfigurationArgsDict']]]]] = None,
                 vpn_qos_map: Optional[pulumi.Input[_builtins.str]] = None,
                 vpn_qos_map_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 write_rule: Optional[pulumi.Input[_builtins.str]] = None,
                 write_rule_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 __props__=None):
        """
        This resource can manage a VPN Interface DSL PPPoE feature template.
          - Minimum SD-WAN Manager version: `15.0.0`

        ## Example Usage

        ## Import

        The `pulumi import` command can be used, for example:

        ```sh
        $ pulumi import sdwan:index/vpnInterfaceDslPppoeFeatureTemplate:VpnInterfaceDslPppoeFeatureTemplate example "f6b2c44c-693c-4763-b010-895aa3d236bd"
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[Sequence[pulumi.Input[Union['VpnInterfaceDslPppoeFeatureTemplateAccessListArgs', 'VpnInterfaceDslPppoeFeatureTemplateAccessListArgsDict']]]] access_lists: Apply ACL
        :param pulumi.Input[_builtins.int] bandwidth_downstream: Interface downstream bandwidth capacity, in kbps
                 - Range: `1`-`2147483647`
        :param pulumi.Input[_builtins.str] bandwidth_downstream_variable: Variable name
        :param pulumi.Input[_builtins.int] bandwidth_upstream: Interface upstream bandwidth capacity, in kbps
                 - Range: `1`-`2147483647`
        :param pulumi.Input[_builtins.str] bandwidth_upstream_variable: Variable name
        :param pulumi.Input[_builtins.str] chap_hostname: CHAP Hostname
        :param pulumi.Input[_builtins.str] chap_hostname_variable: Variable name
        :param pulumi.Input[_builtins.str] chap_ppp_auth_password: Specify ppp chap authentication Password
        :param pulumi.Input[_builtins.str] chap_ppp_auth_password_variable: Variable name
        :param pulumi.Input[_builtins.str] core_region: Enable core region
                 - Choices: `core`, `core-shared`
                 - Default value: `core`
        :param pulumi.Input[_builtins.str] core_region_variable: Variable name
        :param pulumi.Input[_builtins.str] description: The description of the feature template
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] device_types: List of supported device types
                 - Choices: `vedge-C8000V`, `vedge-C8300-1N1S-4T2X`, `vedge-C8300-1N1S-6T`, `vedge-C8300-2N2S-6T`, `vedge-C8300-2N2S-4T2X`, `vedge-C8500-12X4QC`, `vedge-C8500-12X`, `vedge-C8500-20X6C`, `vedge-C8500L-8S4X`, `vedge-C8200-1N-4T`, `vedge-C8200L-1N-4T`
        :param pulumi.Input[_builtins.bool] enable_core_region: Enable core region
                 - Default value: `false`
        :param pulumi.Input[_builtins.str] enable_core_region_variable: Variable name
        :param pulumi.Input[_builtins.str] ethernet_description: Interface description
        :param pulumi.Input[_builtins.str] ethernet_description_variable: Variable name
        :param pulumi.Input[_builtins.bool] ethernet_dialer_address_negotiated: Dialer IP Negotiated
                 - Default value: `false`
        :param pulumi.Input[_builtins.int] ethernet_dialer_pool_number: Dialer pool number
                 - Range: `1`-`255`
        :param pulumi.Input[_builtins.str] ethernet_dialer_pool_number_variable: Variable name
        :param pulumi.Input[_builtins.str] ethernet_interface_name: Ethernet Interface/Sub Interface Name including sub interface number
        :param pulumi.Input[_builtins.str] ethernet_interface_name_variable: Variable name
        :param pulumi.Input[_builtins.int] ethernet_ppp_maximum_payload: Maximum MRU to be negotiated during PPP LCP negotiation
                 - Range: `64`-`1792`
        :param pulumi.Input[_builtins.str] ethernet_ppp_maximum_payload_variable: Variable name
        :param pulumi.Input[_builtins.str] ethernet_unnumbered_loopback_interface: Dialer IP Unnumbered Loopback interface name
        :param pulumi.Input[_builtins.str] ethernet_unnumbered_loopback_interface_variable: Variable name
        :param pulumi.Input[_builtins.int] ethernet_vlan_id: Encapsulation VLAN id
                 - Range: `1`-`4094`
        :param pulumi.Input[_builtins.str] ethernet_vlan_id_variable: Variable name
        :param pulumi.Input[_builtins.bool] ip_directed_broadcast: IP Directed-Broadcast
                 - Default value: `false`
        :param pulumi.Input[_builtins.str] ip_directed_broadcast_variable: Variable name
        :param pulumi.Input[_builtins.int] ip_mtu: Interface MTU <576..2000>, in bytes
                 - Range: `576`-`2000`
                 - Default value: `1500`
        :param pulumi.Input[_builtins.str] ip_mtu_variable: Variable name
        :param pulumi.Input[_builtins.str] name: The name of the feature template
        :param pulumi.Input[_builtins.bool] nat: Network Address Translation on this interface
                 - Default value: `false`
        :param pulumi.Input[_builtins.bool] nat_block_icmp_error: Block inbound ICMP error messages
                 - Default value: `true`
        :param pulumi.Input[_builtins.str] nat_block_icmp_error_variable: Variable name
        :param pulumi.Input[Sequence[pulumi.Input[Union['VpnInterfaceDslPppoeFeatureTemplateNatPortForwardArgs', 'VpnInterfaceDslPppoeFeatureTemplateNatPortForwardArgsDict']]]] nat_port_forwards: Set port-forwarding rules for NAT on this interface
        :param pulumi.Input[_builtins.str] nat_refresh_mode: Set NAT refresh mode
                 - Choices: `outbound`, `bi-directional`
                 - Default value: `outbound`
        :param pulumi.Input[_builtins.str] nat_refresh_mode_variable: Variable name
        :param pulumi.Input[_builtins.bool] nat_response_to_ping: Respond to ping requests to NAT interface ip address from the public side
                 - Default value: `false`
        :param pulumi.Input[_builtins.str] nat_response_to_ping_variable: Variable name
        :param pulumi.Input[_builtins.int] nat_tcp_timeout: Set NAT TCP session timeout, in minutes
                 - Range: `1`-`8947`
                 - Default value: `60`
        :param pulumi.Input[_builtins.str] nat_tcp_timeout_variable: Variable name
        :param pulumi.Input[_builtins.int] nat_udp_timeout: Set NAT UDP session timeout, in minutes
                 - Range: `1`-`8947`
                 - Default value: `1`
        :param pulumi.Input[_builtins.str] nat_udp_timeout_variable: Variable name
        :param pulumi.Input[_builtins.bool] pap_password: PAP outbound Password
        :param pulumi.Input[_builtins.str] pap_ppp_auth_password: Specify ppp pap authentication Password
        :param pulumi.Input[_builtins.str] pap_ppp_auth_password_variable: Variable name
        :param pulumi.Input[_builtins.str] pap_username: PAP outbound Sent Username
        :param pulumi.Input[_builtins.str] pap_username_variable: Variable name
        :param pulumi.Input[_builtins.bool] per_tunnel_qos: Per-tunnel Qos
                 - Default value: `false`
        :param pulumi.Input[_builtins.bool] per_tunnel_qos_aggregator: Per-tunnel QoS Aggregator
                 - Default value: `false`
        :param pulumi.Input[_builtins.str] per_tunnel_qos_aggregator_variable: Variable name
        :param pulumi.Input[_builtins.str] per_tunnel_qos_variable: Variable name
        :param pulumi.Input[Sequence[pulumi.Input[Union['VpnInterfaceDslPppoeFeatureTemplatePolicerArgs', 'VpnInterfaceDslPppoeFeatureTemplatePolicerArgsDict']]]] policers: Enable policer
        :param pulumi.Input[_builtins.str] ppp_authentication_protocol: PPP Link Authentication Protocol
                 - Choices: `chap`, `pap`
        :param pulumi.Input[_builtins.bool] ppp_authentication_protocol_pap: PPP Authentication Protocol PAP
                 - Default value: `false`
        :param pulumi.Input[_builtins.str] ppp_authentication_protocol_variable: Variable name
        :param pulumi.Input[_builtins.str] ppp_authentication_type: Authenticate remote on incoming call only
                 - Choices: `callin`, `false`
                 - Default value: `callin`
        :param pulumi.Input[_builtins.int] qos_adaptive_bandwidth_downstream: Adaptive QoS default downstream bandwidth
                 - Range: `8`-`100000000`
        :param pulumi.Input[_builtins.str] qos_adaptive_bandwidth_downstream_variable: Variable name
        :param pulumi.Input[_builtins.int] qos_adaptive_bandwidth_upstream: Adaptive QoS default upstream bandwidth
                 - Range: `8`-`100000000`
        :param pulumi.Input[_builtins.str] qos_adaptive_bandwidth_upstream_variable: Variable name
        :param pulumi.Input[_builtins.int] qos_adaptive_max_downstream: Downstream max bandwidth limit
                 - Range: `8`-`100000000`
        :param pulumi.Input[_builtins.str] qos_adaptive_max_downstream_variable: Variable name
        :param pulumi.Input[_builtins.int] qos_adaptive_max_upstream: Upstream max bandwidth limit
                 - Range: `8`-`100000000`
        :param pulumi.Input[_builtins.str] qos_adaptive_max_upstream_variable: Variable name
        :param pulumi.Input[_builtins.int] qos_adaptive_min_downstream: Downstream min bandwidth limit
                 - Range: `8`-`100000000`
        :param pulumi.Input[_builtins.str] qos_adaptive_min_downstream_variable: Variable name
        :param pulumi.Input[_builtins.int] qos_adaptive_min_upstream: Upstream min bandwidth limit
                 - Range: `8`-`100000000`
        :param pulumi.Input[_builtins.str] qos_adaptive_min_upstream_variable: Variable name
        :param pulumi.Input[_builtins.int] qos_adaptive_period: Periodic timer for adaptive QoS in minutes
                 - Range: `1`-`720`
                 - Default value: `15`
        :param pulumi.Input[_builtins.str] qos_adaptive_period_variable: Variable name
        :param pulumi.Input[_builtins.str] qos_map: Name of QoS map
        :param pulumi.Input[_builtins.str] qos_map_variable: Variable name
        :param pulumi.Input[_builtins.str] secondary_region: Enable secondary region
                 - Choices: `off`, `secondary-only`, `secondary-shared`
                 - Default value: `off`
        :param pulumi.Input[_builtins.str] secondary_region_variable: Variable name
        :param pulumi.Input[_builtins.int] shaping_rate: 1ge  interfaces: [0..1000000]kbps; 10ge interfaces: [0..10000000]kbps
                 - Range: `8`-`100000000`
        :param pulumi.Input[_builtins.str] shaping_rate_variable: Variable name
        :param pulumi.Input[_builtins.bool] shutdown: Administrative state
                 - Default value: `true`
        :param pulumi.Input[_builtins.str] shutdown_variable: Variable name
        :param pulumi.Input[_builtins.int] tcp_mss: TCP MSS on SYN packets, in bytes
                 - Range: `552`-`1960`
        :param pulumi.Input[_builtins.str] tcp_mss_variable: Variable name
        :param pulumi.Input[_builtins.str] tloc_extension: Extends a local TLOC to a remote node only for vpn 0
        :param pulumi.Input[_builtins.str] tloc_extension_variable: Variable name
        :param pulumi.Input[_builtins.str] tracker_variable: Variable name
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] trackers: Enable tracker for this interface
        :param pulumi.Input[_builtins.bool] tunnel_interface_allow_all: Allow all traffic. Overrides all other allow-service options if allow-service all is set
                 - Default value: `false`
        :param pulumi.Input[_builtins.str] tunnel_interface_allow_all_variable: Variable name
        :param pulumi.Input[_builtins.bool] tunnel_interface_allow_bgp: Allow/deny BGP
                 - Default value: `false`
        :param pulumi.Input[_builtins.str] tunnel_interface_allow_bgp_variable: Variable name
        :param pulumi.Input[_builtins.bool] tunnel_interface_allow_dhcp: Allow/Deny DHCP
                 - Default value: `true`
        :param pulumi.Input[_builtins.str] tunnel_interface_allow_dhcp_variable: Variable name
        :param pulumi.Input[_builtins.bool] tunnel_interface_allow_dns: Allow/Deny DNS
                 - Default value: `true`
        :param pulumi.Input[_builtins.str] tunnel_interface_allow_dns_variable: Variable name
        :param pulumi.Input[_builtins.bool] tunnel_interface_allow_https: Allow/Deny Https
                 - Default value: `false`
        :param pulumi.Input[_builtins.str] tunnel_interface_allow_https_variable: Variable name
        :param pulumi.Input[_builtins.bool] tunnel_interface_allow_icmp: Allow/Deny ICMP
                 - Default value: `true`
        :param pulumi.Input[_builtins.str] tunnel_interface_allow_icmp_variable: Variable name
        :param pulumi.Input[_builtins.bool] tunnel_interface_allow_netconf: Allow/Deny NETCONF
                 - Default value: `false`
        :param pulumi.Input[_builtins.str] tunnel_interface_allow_netconf_variable: Variable name
        :param pulumi.Input[_builtins.bool] tunnel_interface_allow_ntp: Allow/Deny NTP
                 - Default value: `false`
        :param pulumi.Input[_builtins.str] tunnel_interface_allow_ntp_variable: Variable name
        :param pulumi.Input[_builtins.bool] tunnel_interface_allow_ospf: Allow/Deny OSPF
                 - Default value: `false`
        :param pulumi.Input[_builtins.str] tunnel_interface_allow_ospf_variable: Variable name
        :param pulumi.Input[_builtins.bool] tunnel_interface_allow_snmp: Allow/Deny SNMP
                 - Default value: `false`
        :param pulumi.Input[_builtins.str] tunnel_interface_allow_snmp_variable: Variable name
        :param pulumi.Input[_builtins.bool] tunnel_interface_allow_ssh: Allow/Deny SSH
                 - Default value: `false`
        :param pulumi.Input[_builtins.str] tunnel_interface_allow_ssh_variable: Variable name
        :param pulumi.Input[_builtins.bool] tunnel_interface_allow_stun: Allow/Deny STUN
                 - Default value: `false`
        :param pulumi.Input[_builtins.str] tunnel_interface_allow_stun_variable: Variable name
        :param pulumi.Input[_builtins.str] tunnel_interface_bind_loopback_tunnel: Bind loopback tunnel interface to a physical interface
        :param pulumi.Input[_builtins.str] tunnel_interface_bind_loopback_tunnel_variable: Variable name
        :param pulumi.Input[_builtins.bool] tunnel_interface_border: Set TLOC as border TLOC
                 - Default value: `false`
        :param pulumi.Input[_builtins.str] tunnel_interface_border_variable: Variable name
        :param pulumi.Input[_builtins.str] tunnel_interface_carrier: Set carrier for TLOC
                 - Choices: `default`, `carrier1`, `carrier2`, `carrier3`, `carrier4`, `carrier5`, `carrier6`, `carrier7`, `carrier8`
                 - Default value: `default`
        :param pulumi.Input[_builtins.str] tunnel_interface_carrier_variable: Variable name
        :param pulumi.Input[_builtins.bool] tunnel_interface_clear_dont_fragment: Enable clear dont fragment (Currently Only SDWAN Tunnel Interface)
                 - Default value: `false`
        :param pulumi.Input[_builtins.str] tunnel_interface_clear_dont_fragment_variable: Variable name
        :param pulumi.Input[_builtins.str] tunnel_interface_color: Set color for TLOC
                 - Choices: `default`, `mpls`, `metro-ethernet`, `biz-internet`, `public-internet`, `lte`, `3g`, `red`, `green`, `blue`, `gold`, `silver`, `bronze`, `custom1`, `custom2`, `custom3`, `private1`, `private2`, `private3`, `private4`, `private5`, `private6`
                 - Default value: `default`
        :param pulumi.Input[_builtins.bool] tunnel_interface_color_restrict: Restrict this TLOC behavior
                 - Default value: `false`
        :param pulumi.Input[_builtins.str] tunnel_interface_color_variable: Variable name
        :param pulumi.Input[_builtins.bool] tunnel_interface_control_connections: Allow Control Connection
                 - Default value: `true`
        :param pulumi.Input[_builtins.str] tunnel_interface_control_connections_variable: Variable name
        :param pulumi.Input[Sequence[pulumi.Input[Union['VpnInterfaceDslPppoeFeatureTemplateTunnelInterfaceEncapsulationArgs', 'VpnInterfaceDslPppoeFeatureTemplateTunnelInterfaceEncapsulationArgsDict']]]] tunnel_interface_encapsulations: Encapsulation for TLOC
        :param pulumi.Input[_builtins.str] tunnel_interface_exclude_controller_group_list_variable: Variable name
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.int]]] tunnel_interface_exclude_controller_group_lists: Exclude the following controller groups defined in this list
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.int]]] tunnel_interface_groups: List of groups
        :param pulumi.Input[_builtins.str] tunnel_interface_groups_variable: Variable name
        :param pulumi.Input[_builtins.int] tunnel_interface_hello_interval: Set time period of control hello packets <100..600000> milli seconds
                 - Range: `100`-`600000`
                 - Default value: `1000`
        :param pulumi.Input[_builtins.str] tunnel_interface_hello_interval_variable: Variable name
        :param pulumi.Input[_builtins.int] tunnel_interface_hello_tolerance: Set tolerance of control hello packets <12..6000> seconds
                 - Range: `12`-`6000`
                 - Default value: `12`
        :param pulumi.Input[_builtins.str] tunnel_interface_hello_tolerance_variable: Variable name
        :param pulumi.Input[_builtins.bool] tunnel_interface_last_resort_circuit: Set TLOC as last resort
                 - Default value: `false`
        :param pulumi.Input[_builtins.str] tunnel_interface_last_resort_circuit_variable: Variable name
        :param pulumi.Input[_builtins.bool] tunnel_interface_low_bandwidth_link: Set the interface as a low-bandwidth circuit
                 - Default value: `false`
        :param pulumi.Input[_builtins.str] tunnel_interface_low_bandwidth_link_variable: Variable name
        :param pulumi.Input[_builtins.int] tunnel_interface_max_control_connections: Set the maximum number of control connections for this TLOC
                 - Range: `0`-`8`
        :param pulumi.Input[_builtins.str] tunnel_interface_max_control_connections_variable: Variable name
        :param pulumi.Input[_builtins.int] tunnel_interface_nat_refresh_interval: Set time period of nat refresh packets <1...60> seconds
                 - Range: `1`-`60`
                 - Default value: `5`
        :param pulumi.Input[_builtins.str] tunnel_interface_nat_refresh_interval_variable: Variable name
        :param pulumi.Input[_builtins.bool] tunnel_interface_network_broadcast: Accept and respond to network-prefix-directed broadcasts)
                 - Default value: `false`
        :param pulumi.Input[_builtins.str] tunnel_interface_network_broadcast_variable: Variable name
        :param pulumi.Input[_builtins.bool] tunnel_interface_port_hop: Disallow port hopping on the tunnel interface
                 - Default value: `true`
        :param pulumi.Input[_builtins.str] tunnel_interface_port_hop_variable: Variable name
        :param pulumi.Input[_builtins.int] tunnel_interface_tunnel_tcp_mss: Tunnel TCP MSS on SYN packets, in bytes
                 - Range: `500`-`1460`
        :param pulumi.Input[_builtins.str] tunnel_interface_tunnel_tcp_mss_variable: Variable name
        :param pulumi.Input[_builtins.bool] tunnel_interface_vbond_as_stun_server: Put this wan interface in STUN mode only
                 - Default value: `false`
        :param pulumi.Input[_builtins.str] tunnel_interface_vbond_as_stun_server_variable: Variable name
        :param pulumi.Input[_builtins.int] tunnel_interface_vmanage_connection_preference: Set interface preference for control connection to vManage <0..8>
                 - Range: `0`-`8`
                 - Default value: `5`
        :param pulumi.Input[_builtins.str] tunnel_interface_vmanage_connection_preference_variable: Variable name
        :param pulumi.Input[_builtins.str] tunnel_qos_mode: Set tunnel QoS mode
                 - Choices: `spoke`
        :param pulumi.Input[_builtins.str] tunnel_qos_mode_variable: Variable name
        :param pulumi.Input[Sequence[pulumi.Input[Union['VpnInterfaceDslPppoeFeatureTemplateVdslConfigurationArgs', 'VpnInterfaceDslPppoeFeatureTemplateVdslConfigurationArgsDict']]]] vdsl_configurations: vdsl
        :param pulumi.Input[_builtins.str] vpn_qos_map: Name of VPN QoS map
        :param pulumi.Input[_builtins.str] vpn_qos_map_variable: Variable name
        :param pulumi.Input[_builtins.str] write_rule: Name of rewrite rule
        :param pulumi.Input[_builtins.str] write_rule_variable: Variable name
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: VpnInterfaceDslPppoeFeatureTemplateArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        This resource can manage a VPN Interface DSL PPPoE feature template.
          - Minimum SD-WAN Manager version: `15.0.0`

        ## Example Usage

        ## Import

        The `pulumi import` command can be used, for example:

        ```sh
        $ pulumi import sdwan:index/vpnInterfaceDslPppoeFeatureTemplate:VpnInterfaceDslPppoeFeatureTemplate example "f6b2c44c-693c-4763-b010-895aa3d236bd"
        ```

        :param str resource_name: The name of the resource.
        :param VpnInterfaceDslPppoeFeatureTemplateArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(VpnInterfaceDslPppoeFeatureTemplateArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 access_lists: Optional[pulumi.Input[Sequence[pulumi.Input[Union['VpnInterfaceDslPppoeFeatureTemplateAccessListArgs', 'VpnInterfaceDslPppoeFeatureTemplateAccessListArgsDict']]]]] = None,
                 bandwidth_downstream: Optional[pulumi.Input[_builtins.int]] = None,
                 bandwidth_downstream_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 bandwidth_upstream: Optional[pulumi.Input[_builtins.int]] = None,
                 bandwidth_upstream_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 chap_hostname: Optional[pulumi.Input[_builtins.str]] = None,
                 chap_hostname_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 chap_ppp_auth_password: Optional[pulumi.Input[_builtins.str]] = None,
                 chap_ppp_auth_password_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 core_region: Optional[pulumi.Input[_builtins.str]] = None,
                 core_region_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 description: Optional[pulumi.Input[_builtins.str]] = None,
                 device_types: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 enable_core_region: Optional[pulumi.Input[_builtins.bool]] = None,
                 enable_core_region_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 ethernet_description: Optional[pulumi.Input[_builtins.str]] = None,
                 ethernet_description_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 ethernet_dialer_address_negotiated: Optional[pulumi.Input[_builtins.bool]] = None,
                 ethernet_dialer_pool_number: Optional[pulumi.Input[_builtins.int]] = None,
                 ethernet_dialer_pool_number_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 ethernet_interface_name: Optional[pulumi.Input[_builtins.str]] = None,
                 ethernet_interface_name_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 ethernet_ppp_maximum_payload: Optional[pulumi.Input[_builtins.int]] = None,
                 ethernet_ppp_maximum_payload_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 ethernet_unnumbered_loopback_interface: Optional[pulumi.Input[_builtins.str]] = None,
                 ethernet_unnumbered_loopback_interface_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 ethernet_vlan_id: Optional[pulumi.Input[_builtins.int]] = None,
                 ethernet_vlan_id_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 ip_directed_broadcast: Optional[pulumi.Input[_builtins.bool]] = None,
                 ip_directed_broadcast_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 ip_mtu: Optional[pulumi.Input[_builtins.int]] = None,
                 ip_mtu_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 nat: Optional[pulumi.Input[_builtins.bool]] = None,
                 nat_block_icmp_error: Optional[pulumi.Input[_builtins.bool]] = None,
                 nat_block_icmp_error_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 nat_port_forwards: Optional[pulumi.Input[Sequence[pulumi.Input[Union['VpnInterfaceDslPppoeFeatureTemplateNatPortForwardArgs', 'VpnInterfaceDslPppoeFeatureTemplateNatPortForwardArgsDict']]]]] = None,
                 nat_refresh_mode: Optional[pulumi.Input[_builtins.str]] = None,
                 nat_refresh_mode_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 nat_response_to_ping: Optional[pulumi.Input[_builtins.bool]] = None,
                 nat_response_to_ping_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 nat_tcp_timeout: Optional[pulumi.Input[_builtins.int]] = None,
                 nat_tcp_timeout_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 nat_udp_timeout: Optional[pulumi.Input[_builtins.int]] = None,
                 nat_udp_timeout_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 pap_password: Optional[pulumi.Input[_builtins.bool]] = None,
                 pap_ppp_auth_password: Optional[pulumi.Input[_builtins.str]] = None,
                 pap_ppp_auth_password_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 pap_username: Optional[pulumi.Input[_builtins.str]] = None,
                 pap_username_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 per_tunnel_qos: Optional[pulumi.Input[_builtins.bool]] = None,
                 per_tunnel_qos_aggregator: Optional[pulumi.Input[_builtins.bool]] = None,
                 per_tunnel_qos_aggregator_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 per_tunnel_qos_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 policers: Optional[pulumi.Input[Sequence[pulumi.Input[Union['VpnInterfaceDslPppoeFeatureTemplatePolicerArgs', 'VpnInterfaceDslPppoeFeatureTemplatePolicerArgsDict']]]]] = None,
                 ppp_authentication_protocol: Optional[pulumi.Input[_builtins.str]] = None,
                 ppp_authentication_protocol_pap: Optional[pulumi.Input[_builtins.bool]] = None,
                 ppp_authentication_protocol_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 ppp_authentication_type: Optional[pulumi.Input[_builtins.str]] = None,
                 qos_adaptive_bandwidth_downstream: Optional[pulumi.Input[_builtins.int]] = None,
                 qos_adaptive_bandwidth_downstream_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 qos_adaptive_bandwidth_upstream: Optional[pulumi.Input[_builtins.int]] = None,
                 qos_adaptive_bandwidth_upstream_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 qos_adaptive_max_downstream: Optional[pulumi.Input[_builtins.int]] = None,
                 qos_adaptive_max_downstream_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 qos_adaptive_max_upstream: Optional[pulumi.Input[_builtins.int]] = None,
                 qos_adaptive_max_upstream_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 qos_adaptive_min_downstream: Optional[pulumi.Input[_builtins.int]] = None,
                 qos_adaptive_min_downstream_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 qos_adaptive_min_upstream: Optional[pulumi.Input[_builtins.int]] = None,
                 qos_adaptive_min_upstream_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 qos_adaptive_period: Optional[pulumi.Input[_builtins.int]] = None,
                 qos_adaptive_period_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 qos_map: Optional[pulumi.Input[_builtins.str]] = None,
                 qos_map_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 secondary_region: Optional[pulumi.Input[_builtins.str]] = None,
                 secondary_region_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 shaping_rate: Optional[pulumi.Input[_builtins.int]] = None,
                 shaping_rate_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 shutdown: Optional[pulumi.Input[_builtins.bool]] = None,
                 shutdown_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 tcp_mss: Optional[pulumi.Input[_builtins.int]] = None,
                 tcp_mss_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 tloc_extension: Optional[pulumi.Input[_builtins.str]] = None,
                 tloc_extension_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 tracker_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 trackers: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 tunnel_interface_allow_all: Optional[pulumi.Input[_builtins.bool]] = None,
                 tunnel_interface_allow_all_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 tunnel_interface_allow_bgp: Optional[pulumi.Input[_builtins.bool]] = None,
                 tunnel_interface_allow_bgp_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 tunnel_interface_allow_dhcp: Optional[pulumi.Input[_builtins.bool]] = None,
                 tunnel_interface_allow_dhcp_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 tunnel_interface_allow_dns: Optional[pulumi.Input[_builtins.bool]] = None,
                 tunnel_interface_allow_dns_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 tunnel_interface_allow_https: Optional[pulumi.Input[_builtins.bool]] = None,
                 tunnel_interface_allow_https_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 tunnel_interface_allow_icmp: Optional[pulumi.Input[_builtins.bool]] = None,
                 tunnel_interface_allow_icmp_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 tunnel_interface_allow_netconf: Optional[pulumi.Input[_builtins.bool]] = None,
                 tunnel_interface_allow_netconf_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 tunnel_interface_allow_ntp: Optional[pulumi.Input[_builtins.bool]] = None,
                 tunnel_interface_allow_ntp_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 tunnel_interface_allow_ospf: Optional[pulumi.Input[_builtins.bool]] = None,
                 tunnel_interface_allow_ospf_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 tunnel_interface_allow_snmp: Optional[pulumi.Input[_builtins.bool]] = None,
                 tunnel_interface_allow_snmp_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 tunnel_interface_allow_ssh: Optional[pulumi.Input[_builtins.bool]] = None,
                 tunnel_interface_allow_ssh_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 tunnel_interface_allow_stun: Optional[pulumi.Input[_builtins.bool]] = None,
                 tunnel_interface_allow_stun_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 tunnel_interface_bind_loopback_tunnel: Optional[pulumi.Input[_builtins.str]] = None,
                 tunnel_interface_bind_loopback_tunnel_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 tunnel_interface_border: Optional[pulumi.Input[_builtins.bool]] = None,
                 tunnel_interface_border_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 tunnel_interface_carrier: Optional[pulumi.Input[_builtins.str]] = None,
                 tunnel_interface_carrier_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 tunnel_interface_clear_dont_fragment: Optional[pulumi.Input[_builtins.bool]] = None,
                 tunnel_interface_clear_dont_fragment_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 tunnel_interface_color: Optional[pulumi.Input[_builtins.str]] = None,
                 tunnel_interface_color_restrict: Optional[pulumi.Input[_builtins.bool]] = None,
                 tunnel_interface_color_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 tunnel_interface_control_connections: Optional[pulumi.Input[_builtins.bool]] = None,
                 tunnel_interface_control_connections_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 tunnel_interface_encapsulations: Optional[pulumi.Input[Sequence[pulumi.Input[Union['VpnInterfaceDslPppoeFeatureTemplateTunnelInterfaceEncapsulationArgs', 'VpnInterfaceDslPppoeFeatureTemplateTunnelInterfaceEncapsulationArgsDict']]]]] = None,
                 tunnel_interface_exclude_controller_group_list_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 tunnel_interface_exclude_controller_group_lists: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.int]]]] = None,
                 tunnel_interface_groups: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.int]]]] = None,
                 tunnel_interface_groups_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 tunnel_interface_hello_interval: Optional[pulumi.Input[_builtins.int]] = None,
                 tunnel_interface_hello_interval_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 tunnel_interface_hello_tolerance: Optional[pulumi.Input[_builtins.int]] = None,
                 tunnel_interface_hello_tolerance_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 tunnel_interface_last_resort_circuit: Optional[pulumi.Input[_builtins.bool]] = None,
                 tunnel_interface_last_resort_circuit_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 tunnel_interface_low_bandwidth_link: Optional[pulumi.Input[_builtins.bool]] = None,
                 tunnel_interface_low_bandwidth_link_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 tunnel_interface_max_control_connections: Optional[pulumi.Input[_builtins.int]] = None,
                 tunnel_interface_max_control_connections_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 tunnel_interface_nat_refresh_interval: Optional[pulumi.Input[_builtins.int]] = None,
                 tunnel_interface_nat_refresh_interval_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 tunnel_interface_network_broadcast: Optional[pulumi.Input[_builtins.bool]] = None,
                 tunnel_interface_network_broadcast_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 tunnel_interface_port_hop: Optional[pulumi.Input[_builtins.bool]] = None,
                 tunnel_interface_port_hop_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 tunnel_interface_tunnel_tcp_mss: Optional[pulumi.Input[_builtins.int]] = None,
                 tunnel_interface_tunnel_tcp_mss_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 tunnel_interface_vbond_as_stun_server: Optional[pulumi.Input[_builtins.bool]] = None,
                 tunnel_interface_vbond_as_stun_server_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 tunnel_interface_vmanage_connection_preference: Optional[pulumi.Input[_builtins.int]] = None,
                 tunnel_interface_vmanage_connection_preference_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 tunnel_qos_mode: Optional[pulumi.Input[_builtins.str]] = None,
                 tunnel_qos_mode_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 vdsl_configurations: Optional[pulumi.Input[Sequence[pulumi.Input[Union['VpnInterfaceDslPppoeFeatureTemplateVdslConfigurationArgs', 'VpnInterfaceDslPppoeFeatureTemplateVdslConfigurationArgsDict']]]]] = None,
                 vpn_qos_map: Optional[pulumi.Input[_builtins.str]] = None,
                 vpn_qos_map_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 write_rule: Optional[pulumi.Input[_builtins.str]] = None,
                 write_rule_variable: Optional[pulumi.Input[_builtins.str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = VpnInterfaceDslPppoeFeatureTemplateArgs.__new__(VpnInterfaceDslPppoeFeatureTemplateArgs)

            __props__.__dict__["access_lists"] = access_lists
            __props__.__dict__["bandwidth_downstream"] = bandwidth_downstream
            __props__.__dict__["bandwidth_downstream_variable"] = bandwidth_downstream_variable
            __props__.__dict__["bandwidth_upstream"] = bandwidth_upstream
            __props__.__dict__["bandwidth_upstream_variable"] = bandwidth_upstream_variable
            __props__.__dict__["chap_hostname"] = chap_hostname
            __props__.__dict__["chap_hostname_variable"] = chap_hostname_variable
            __props__.__dict__["chap_ppp_auth_password"] = chap_ppp_auth_password
            __props__.__dict__["chap_ppp_auth_password_variable"] = chap_ppp_auth_password_variable
            __props__.__dict__["core_region"] = core_region
            __props__.__dict__["core_region_variable"] = core_region_variable
            if description is None and not opts.urn:
                raise TypeError("Missing required property 'description'")
            __props__.__dict__["description"] = description
            if device_types is None and not opts.urn:
                raise TypeError("Missing required property 'device_types'")
            __props__.__dict__["device_types"] = device_types
            __props__.__dict__["enable_core_region"] = enable_core_region
            __props__.__dict__["enable_core_region_variable"] = enable_core_region_variable
            __props__.__dict__["ethernet_description"] = ethernet_description
            __props__.__dict__["ethernet_description_variable"] = ethernet_description_variable
            __props__.__dict__["ethernet_dialer_address_negotiated"] = ethernet_dialer_address_negotiated
            __props__.__dict__["ethernet_dialer_pool_number"] = ethernet_dialer_pool_number
            __props__.__dict__["ethernet_dialer_pool_number_variable"] = ethernet_dialer_pool_number_variable
            __props__.__dict__["ethernet_interface_name"] = ethernet_interface_name
            __props__.__dict__["ethernet_interface_name_variable"] = ethernet_interface_name_variable
            __props__.__dict__["ethernet_ppp_maximum_payload"] = ethernet_ppp_maximum_payload
            __props__.__dict__["ethernet_ppp_maximum_payload_variable"] = ethernet_ppp_maximum_payload_variable
            __props__.__dict__["ethernet_unnumbered_loopback_interface"] = ethernet_unnumbered_loopback_interface
            __props__.__dict__["ethernet_unnumbered_loopback_interface_variable"] = ethernet_unnumbered_loopback_interface_variable
            __props__.__dict__["ethernet_vlan_id"] = ethernet_vlan_id
            __props__.__dict__["ethernet_vlan_id_variable"] = ethernet_vlan_id_variable
            __props__.__dict__["ip_directed_broadcast"] = ip_directed_broadcast
            __props__.__dict__["ip_directed_broadcast_variable"] = ip_directed_broadcast_variable
            __props__.__dict__["ip_mtu"] = ip_mtu
            __props__.__dict__["ip_mtu_variable"] = ip_mtu_variable
            __props__.__dict__["name"] = name
            __props__.__dict__["nat"] = nat
            __props__.__dict__["nat_block_icmp_error"] = nat_block_icmp_error
            __props__.__dict__["nat_block_icmp_error_variable"] = nat_block_icmp_error_variable
            __props__.__dict__["nat_port_forwards"] = nat_port_forwards
            __props__.__dict__["nat_refresh_mode"] = nat_refresh_mode
            __props__.__dict__["nat_refresh_mode_variable"] = nat_refresh_mode_variable
            __props__.__dict__["nat_response_to_ping"] = nat_response_to_ping
            __props__.__dict__["nat_response_to_ping_variable"] = nat_response_to_ping_variable
            __props__.__dict__["nat_tcp_timeout"] = nat_tcp_timeout
            __props__.__dict__["nat_tcp_timeout_variable"] = nat_tcp_timeout_variable
            __props__.__dict__["nat_udp_timeout"] = nat_udp_timeout
            __props__.__dict__["nat_udp_timeout_variable"] = nat_udp_timeout_variable
            __props__.__dict__["pap_password"] = pap_password
            __props__.__dict__["pap_ppp_auth_password"] = pap_ppp_auth_password
            __props__.__dict__["pap_ppp_auth_password_variable"] = pap_ppp_auth_password_variable
            __props__.__dict__["pap_username"] = pap_username
            __props__.__dict__["pap_username_variable"] = pap_username_variable
            __props__.__dict__["per_tunnel_qos"] = per_tunnel_qos
            __props__.__dict__["per_tunnel_qos_aggregator"] = per_tunnel_qos_aggregator
            __props__.__dict__["per_tunnel_qos_aggregator_variable"] = per_tunnel_qos_aggregator_variable
            __props__.__dict__["per_tunnel_qos_variable"] = per_tunnel_qos_variable
            __props__.__dict__["policers"] = policers
            __props__.__dict__["ppp_authentication_protocol"] = ppp_authentication_protocol
            __props__.__dict__["ppp_authentication_protocol_pap"] = ppp_authentication_protocol_pap
            __props__.__dict__["ppp_authentication_protocol_variable"] = ppp_authentication_protocol_variable
            __props__.__dict__["ppp_authentication_type"] = ppp_authentication_type
            __props__.__dict__["qos_adaptive_bandwidth_downstream"] = qos_adaptive_bandwidth_downstream
            __props__.__dict__["qos_adaptive_bandwidth_downstream_variable"] = qos_adaptive_bandwidth_downstream_variable
            __props__.__dict__["qos_adaptive_bandwidth_upstream"] = qos_adaptive_bandwidth_upstream
            __props__.__dict__["qos_adaptive_bandwidth_upstream_variable"] = qos_adaptive_bandwidth_upstream_variable
            __props__.__dict__["qos_adaptive_max_downstream"] = qos_adaptive_max_downstream
            __props__.__dict__["qos_adaptive_max_downstream_variable"] = qos_adaptive_max_downstream_variable
            __props__.__dict__["qos_adaptive_max_upstream"] = qos_adaptive_max_upstream
            __props__.__dict__["qos_adaptive_max_upstream_variable"] = qos_adaptive_max_upstream_variable
            __props__.__dict__["qos_adaptive_min_downstream"] = qos_adaptive_min_downstream
            __props__.__dict__["qos_adaptive_min_downstream_variable"] = qos_adaptive_min_downstream_variable
            __props__.__dict__["qos_adaptive_min_upstream"] = qos_adaptive_min_upstream
            __props__.__dict__["qos_adaptive_min_upstream_variable"] = qos_adaptive_min_upstream_variable
            __props__.__dict__["qos_adaptive_period"] = qos_adaptive_period
            __props__.__dict__["qos_adaptive_period_variable"] = qos_adaptive_period_variable
            __props__.__dict__["qos_map"] = qos_map
            __props__.__dict__["qos_map_variable"] = qos_map_variable
            __props__.__dict__["secondary_region"] = secondary_region
            __props__.__dict__["secondary_region_variable"] = secondary_region_variable
            __props__.__dict__["shaping_rate"] = shaping_rate
            __props__.__dict__["shaping_rate_variable"] = shaping_rate_variable
            __props__.__dict__["shutdown"] = shutdown
            __props__.__dict__["shutdown_variable"] = shutdown_variable
            __props__.__dict__["tcp_mss"] = tcp_mss
            __props__.__dict__["tcp_mss_variable"] = tcp_mss_variable
            __props__.__dict__["tloc_extension"] = tloc_extension
            __props__.__dict__["tloc_extension_variable"] = tloc_extension_variable
            __props__.__dict__["tracker_variable"] = tracker_variable
            __props__.__dict__["trackers"] = trackers
            __props__.__dict__["tunnel_interface_allow_all"] = tunnel_interface_allow_all
            __props__.__dict__["tunnel_interface_allow_all_variable"] = tunnel_interface_allow_all_variable
            __props__.__dict__["tunnel_interface_allow_bgp"] = tunnel_interface_allow_bgp
            __props__.__dict__["tunnel_interface_allow_bgp_variable"] = tunnel_interface_allow_bgp_variable
            __props__.__dict__["tunnel_interface_allow_dhcp"] = tunnel_interface_allow_dhcp
            __props__.__dict__["tunnel_interface_allow_dhcp_variable"] = tunnel_interface_allow_dhcp_variable
            __props__.__dict__["tunnel_interface_allow_dns"] = tunnel_interface_allow_dns
            __props__.__dict__["tunnel_interface_allow_dns_variable"] = tunnel_interface_allow_dns_variable
            __props__.__dict__["tunnel_interface_allow_https"] = tunnel_interface_allow_https
            __props__.__dict__["tunnel_interface_allow_https_variable"] = tunnel_interface_allow_https_variable
            __props__.__dict__["tunnel_interface_allow_icmp"] = tunnel_interface_allow_icmp
            __props__.__dict__["tunnel_interface_allow_icmp_variable"] = tunnel_interface_allow_icmp_variable
            __props__.__dict__["tunnel_interface_allow_netconf"] = tunnel_interface_allow_netconf
            __props__.__dict__["tunnel_interface_allow_netconf_variable"] = tunnel_interface_allow_netconf_variable
            __props__.__dict__["tunnel_interface_allow_ntp"] = tunnel_interface_allow_ntp
            __props__.__dict__["tunnel_interface_allow_ntp_variable"] = tunnel_interface_allow_ntp_variable
            __props__.__dict__["tunnel_interface_allow_ospf"] = tunnel_interface_allow_ospf
            __props__.__dict__["tunnel_interface_allow_ospf_variable"] = tunnel_interface_allow_ospf_variable
            __props__.__dict__["tunnel_interface_allow_snmp"] = tunnel_interface_allow_snmp
            __props__.__dict__["tunnel_interface_allow_snmp_variable"] = tunnel_interface_allow_snmp_variable
            __props__.__dict__["tunnel_interface_allow_ssh"] = tunnel_interface_allow_ssh
            __props__.__dict__["tunnel_interface_allow_ssh_variable"] = tunnel_interface_allow_ssh_variable
            __props__.__dict__["tunnel_interface_allow_stun"] = tunnel_interface_allow_stun
            __props__.__dict__["tunnel_interface_allow_stun_variable"] = tunnel_interface_allow_stun_variable
            __props__.__dict__["tunnel_interface_bind_loopback_tunnel"] = tunnel_interface_bind_loopback_tunnel
            __props__.__dict__["tunnel_interface_bind_loopback_tunnel_variable"] = tunnel_interface_bind_loopback_tunnel_variable
            __props__.__dict__["tunnel_interface_border"] = tunnel_interface_border
            __props__.__dict__["tunnel_interface_border_variable"] = tunnel_interface_border_variable
            __props__.__dict__["tunnel_interface_carrier"] = tunnel_interface_carrier
            __props__.__dict__["tunnel_interface_carrier_variable"] = tunnel_interface_carrier_variable
            __props__.__dict__["tunnel_interface_clear_dont_fragment"] = tunnel_interface_clear_dont_fragment
            __props__.__dict__["tunnel_interface_clear_dont_fragment_variable"] = tunnel_interface_clear_dont_fragment_variable
            __props__.__dict__["tunnel_interface_color"] = tunnel_interface_color
            __props__.__dict__["tunnel_interface_color_restrict"] = tunnel_interface_color_restrict
            __props__.__dict__["tunnel_interface_color_variable"] = tunnel_interface_color_variable
            __props__.__dict__["tunnel_interface_control_connections"] = tunnel_interface_control_connections
            __props__.__dict__["tunnel_interface_control_connections_variable"] = tunnel_interface_control_connections_variable
            __props__.__dict__["tunnel_interface_encapsulations"] = tunnel_interface_encapsulations
            __props__.__dict__["tunnel_interface_exclude_controller_group_list_variable"] = tunnel_interface_exclude_controller_group_list_variable
            __props__.__dict__["tunnel_interface_exclude_controller_group_lists"] = tunnel_interface_exclude_controller_group_lists
            __props__.__dict__["tunnel_interface_groups"] = tunnel_interface_groups
            __props__.__dict__["tunnel_interface_groups_variable"] = tunnel_interface_groups_variable
            __props__.__dict__["tunnel_interface_hello_interval"] = tunnel_interface_hello_interval
            __props__.__dict__["tunnel_interface_hello_interval_variable"] = tunnel_interface_hello_interval_variable
            __props__.__dict__["tunnel_interface_hello_tolerance"] = tunnel_interface_hello_tolerance
            __props__.__dict__["tunnel_interface_hello_tolerance_variable"] = tunnel_interface_hello_tolerance_variable
            __props__.__dict__["tunnel_interface_last_resort_circuit"] = tunnel_interface_last_resort_circuit
            __props__.__dict__["tunnel_interface_last_resort_circuit_variable"] = tunnel_interface_last_resort_circuit_variable
            __props__.__dict__["tunnel_interface_low_bandwidth_link"] = tunnel_interface_low_bandwidth_link
            __props__.__dict__["tunnel_interface_low_bandwidth_link_variable"] = tunnel_interface_low_bandwidth_link_variable
            __props__.__dict__["tunnel_interface_max_control_connections"] = tunnel_interface_max_control_connections
            __props__.__dict__["tunnel_interface_max_control_connections_variable"] = tunnel_interface_max_control_connections_variable
            __props__.__dict__["tunnel_interface_nat_refresh_interval"] = tunnel_interface_nat_refresh_interval
            __props__.__dict__["tunnel_interface_nat_refresh_interval_variable"] = tunnel_interface_nat_refresh_interval_variable
            __props__.__dict__["tunnel_interface_network_broadcast"] = tunnel_interface_network_broadcast
            __props__.__dict__["tunnel_interface_network_broadcast_variable"] = tunnel_interface_network_broadcast_variable
            __props__.__dict__["tunnel_interface_port_hop"] = tunnel_interface_port_hop
            __props__.__dict__["tunnel_interface_port_hop_variable"] = tunnel_interface_port_hop_variable
            __props__.__dict__["tunnel_interface_tunnel_tcp_mss"] = tunnel_interface_tunnel_tcp_mss
            __props__.__dict__["tunnel_interface_tunnel_tcp_mss_variable"] = tunnel_interface_tunnel_tcp_mss_variable
            __props__.__dict__["tunnel_interface_vbond_as_stun_server"] = tunnel_interface_vbond_as_stun_server
            __props__.__dict__["tunnel_interface_vbond_as_stun_server_variable"] = tunnel_interface_vbond_as_stun_server_variable
            __props__.__dict__["tunnel_interface_vmanage_connection_preference"] = tunnel_interface_vmanage_connection_preference
            __props__.__dict__["tunnel_interface_vmanage_connection_preference_variable"] = tunnel_interface_vmanage_connection_preference_variable
            __props__.__dict__["tunnel_qos_mode"] = tunnel_qos_mode
            __props__.__dict__["tunnel_qos_mode_variable"] = tunnel_qos_mode_variable
            __props__.__dict__["vdsl_configurations"] = vdsl_configurations
            __props__.__dict__["vpn_qos_map"] = vpn_qos_map
            __props__.__dict__["vpn_qos_map_variable"] = vpn_qos_map_variable
            __props__.__dict__["write_rule"] = write_rule
            __props__.__dict__["write_rule_variable"] = write_rule_variable
            __props__.__dict__["template_type"] = None
            __props__.__dict__["version"] = None
        super(VpnInterfaceDslPppoeFeatureTemplate, __self__).__init__(
            'sdwan:index/vpnInterfaceDslPppoeFeatureTemplate:VpnInterfaceDslPppoeFeatureTemplate',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            access_lists: Optional[pulumi.Input[Sequence[pulumi.Input[Union['VpnInterfaceDslPppoeFeatureTemplateAccessListArgs', 'VpnInterfaceDslPppoeFeatureTemplateAccessListArgsDict']]]]] = None,
            bandwidth_downstream: Optional[pulumi.Input[_builtins.int]] = None,
            bandwidth_downstream_variable: Optional[pulumi.Input[_builtins.str]] = None,
            bandwidth_upstream: Optional[pulumi.Input[_builtins.int]] = None,
            bandwidth_upstream_variable: Optional[pulumi.Input[_builtins.str]] = None,
            chap_hostname: Optional[pulumi.Input[_builtins.str]] = None,
            chap_hostname_variable: Optional[pulumi.Input[_builtins.str]] = None,
            chap_ppp_auth_password: Optional[pulumi.Input[_builtins.str]] = None,
            chap_ppp_auth_password_variable: Optional[pulumi.Input[_builtins.str]] = None,
            core_region: Optional[pulumi.Input[_builtins.str]] = None,
            core_region_variable: Optional[pulumi.Input[_builtins.str]] = None,
            description: Optional[pulumi.Input[_builtins.str]] = None,
            device_types: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
            enable_core_region: Optional[pulumi.Input[_builtins.bool]] = None,
            enable_core_region_variable: Optional[pulumi.Input[_builtins.str]] = None,
            ethernet_description: Optional[pulumi.Input[_builtins.str]] = None,
            ethernet_description_variable: Optional[pulumi.Input[_builtins.str]] = None,
            ethernet_dialer_address_negotiated: Optional[pulumi.Input[_builtins.bool]] = None,
            ethernet_dialer_pool_number: Optional[pulumi.Input[_builtins.int]] = None,
            ethernet_dialer_pool_number_variable: Optional[pulumi.Input[_builtins.str]] = None,
            ethernet_interface_name: Optional[pulumi.Input[_builtins.str]] = None,
            ethernet_interface_name_variable: Optional[pulumi.Input[_builtins.str]] = None,
            ethernet_ppp_maximum_payload: Optional[pulumi.Input[_builtins.int]] = None,
            ethernet_ppp_maximum_payload_variable: Optional[pulumi.Input[_builtins.str]] = None,
            ethernet_unnumbered_loopback_interface: Optional[pulumi.Input[_builtins.str]] = None,
            ethernet_unnumbered_loopback_interface_variable: Optional[pulumi.Input[_builtins.str]] = None,
            ethernet_vlan_id: Optional[pulumi.Input[_builtins.int]] = None,
            ethernet_vlan_id_variable: Optional[pulumi.Input[_builtins.str]] = None,
            ip_directed_broadcast: Optional[pulumi.Input[_builtins.bool]] = None,
            ip_directed_broadcast_variable: Optional[pulumi.Input[_builtins.str]] = None,
            ip_mtu: Optional[pulumi.Input[_builtins.int]] = None,
            ip_mtu_variable: Optional[pulumi.Input[_builtins.str]] = None,
            name: Optional[pulumi.Input[_builtins.str]] = None,
            nat: Optional[pulumi.Input[_builtins.bool]] = None,
            nat_block_icmp_error: Optional[pulumi.Input[_builtins.bool]] = None,
            nat_block_icmp_error_variable: Optional[pulumi.Input[_builtins.str]] = None,
            nat_port_forwards: Optional[pulumi.Input[Sequence[pulumi.Input[Union['VpnInterfaceDslPppoeFeatureTemplateNatPortForwardArgs', 'VpnInterfaceDslPppoeFeatureTemplateNatPortForwardArgsDict']]]]] = None,
            nat_refresh_mode: Optional[pulumi.Input[_builtins.str]] = None,
            nat_refresh_mode_variable: Optional[pulumi.Input[_builtins.str]] = None,
            nat_response_to_ping: Optional[pulumi.Input[_builtins.bool]] = None,
            nat_response_to_ping_variable: Optional[pulumi.Input[_builtins.str]] = None,
            nat_tcp_timeout: Optional[pulumi.Input[_builtins.int]] = None,
            nat_tcp_timeout_variable: Optional[pulumi.Input[_builtins.str]] = None,
            nat_udp_timeout: Optional[pulumi.Input[_builtins.int]] = None,
            nat_udp_timeout_variable: Optional[pulumi.Input[_builtins.str]] = None,
            pap_password: Optional[pulumi.Input[_builtins.bool]] = None,
            pap_ppp_auth_password: Optional[pulumi.Input[_builtins.str]] = None,
            pap_ppp_auth_password_variable: Optional[pulumi.Input[_builtins.str]] = None,
            pap_username: Optional[pulumi.Input[_builtins.str]] = None,
            pap_username_variable: Optional[pulumi.Input[_builtins.str]] = None,
            per_tunnel_qos: Optional[pulumi.Input[_builtins.bool]] = None,
            per_tunnel_qos_aggregator: Optional[pulumi.Input[_builtins.bool]] = None,
            per_tunnel_qos_aggregator_variable: Optional[pulumi.Input[_builtins.str]] = None,
            per_tunnel_qos_variable: Optional[pulumi.Input[_builtins.str]] = None,
            policers: Optional[pulumi.Input[Sequence[pulumi.Input[Union['VpnInterfaceDslPppoeFeatureTemplatePolicerArgs', 'VpnInterfaceDslPppoeFeatureTemplatePolicerArgsDict']]]]] = None,
            ppp_authentication_protocol: Optional[pulumi.Input[_builtins.str]] = None,
            ppp_authentication_protocol_pap: Optional[pulumi.Input[_builtins.bool]] = None,
            ppp_authentication_protocol_variable: Optional[pulumi.Input[_builtins.str]] = None,
            ppp_authentication_type: Optional[pulumi.Input[_builtins.str]] = None,
            qos_adaptive_bandwidth_downstream: Optional[pulumi.Input[_builtins.int]] = None,
            qos_adaptive_bandwidth_downstream_variable: Optional[pulumi.Input[_builtins.str]] = None,
            qos_adaptive_bandwidth_upstream: Optional[pulumi.Input[_builtins.int]] = None,
            qos_adaptive_bandwidth_upstream_variable: Optional[pulumi.Input[_builtins.str]] = None,
            qos_adaptive_max_downstream: Optional[pulumi.Input[_builtins.int]] = None,
            qos_adaptive_max_downstream_variable: Optional[pulumi.Input[_builtins.str]] = None,
            qos_adaptive_max_upstream: Optional[pulumi.Input[_builtins.int]] = None,
            qos_adaptive_max_upstream_variable: Optional[pulumi.Input[_builtins.str]] = None,
            qos_adaptive_min_downstream: Optional[pulumi.Input[_builtins.int]] = None,
            qos_adaptive_min_downstream_variable: Optional[pulumi.Input[_builtins.str]] = None,
            qos_adaptive_min_upstream: Optional[pulumi.Input[_builtins.int]] = None,
            qos_adaptive_min_upstream_variable: Optional[pulumi.Input[_builtins.str]] = None,
            qos_adaptive_period: Optional[pulumi.Input[_builtins.int]] = None,
            qos_adaptive_period_variable: Optional[pulumi.Input[_builtins.str]] = None,
            qos_map: Optional[pulumi.Input[_builtins.str]] = None,
            qos_map_variable: Optional[pulumi.Input[_builtins.str]] = None,
            secondary_region: Optional[pulumi.Input[_builtins.str]] = None,
            secondary_region_variable: Optional[pulumi.Input[_builtins.str]] = None,
            shaping_rate: Optional[pulumi.Input[_builtins.int]] = None,
            shaping_rate_variable: Optional[pulumi.Input[_builtins.str]] = None,
            shutdown: Optional[pulumi.Input[_builtins.bool]] = None,
            shutdown_variable: Optional[pulumi.Input[_builtins.str]] = None,
            tcp_mss: Optional[pulumi.Input[_builtins.int]] = None,
            tcp_mss_variable: Optional[pulumi.Input[_builtins.str]] = None,
            template_type: Optional[pulumi.Input[_builtins.str]] = None,
            tloc_extension: Optional[pulumi.Input[_builtins.str]] = None,
            tloc_extension_variable: Optional[pulumi.Input[_builtins.str]] = None,
            tracker_variable: Optional[pulumi.Input[_builtins.str]] = None,
            trackers: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
            tunnel_interface_allow_all: Optional[pulumi.Input[_builtins.bool]] = None,
            tunnel_interface_allow_all_variable: Optional[pulumi.Input[_builtins.str]] = None,
            tunnel_interface_allow_bgp: Optional[pulumi.Input[_builtins.bool]] = None,
            tunnel_interface_allow_bgp_variable: Optional[pulumi.Input[_builtins.str]] = None,
            tunnel_interface_allow_dhcp: Optional[pulumi.Input[_builtins.bool]] = None,
            tunnel_interface_allow_dhcp_variable: Optional[pulumi.Input[_builtins.str]] = None,
            tunnel_interface_allow_dns: Optional[pulumi.Input[_builtins.bool]] = None,
            tunnel_interface_allow_dns_variable: Optional[pulumi.Input[_builtins.str]] = None,
            tunnel_interface_allow_https: Optional[pulumi.Input[_builtins.bool]] = None,
            tunnel_interface_allow_https_variable: Optional[pulumi.Input[_builtins.str]] = None,
            tunnel_interface_allow_icmp: Optional[pulumi.Input[_builtins.bool]] = None,
            tunnel_interface_allow_icmp_variable: Optional[pulumi.Input[_builtins.str]] = None,
            tunnel_interface_allow_netconf: Optional[pulumi.Input[_builtins.bool]] = None,
            tunnel_interface_allow_netconf_variable: Optional[pulumi.Input[_builtins.str]] = None,
            tunnel_interface_allow_ntp: Optional[pulumi.Input[_builtins.bool]] = None,
            tunnel_interface_allow_ntp_variable: Optional[pulumi.Input[_builtins.str]] = None,
            tunnel_interface_allow_ospf: Optional[pulumi.Input[_builtins.bool]] = None,
            tunnel_interface_allow_ospf_variable: Optional[pulumi.Input[_builtins.str]] = None,
            tunnel_interface_allow_snmp: Optional[pulumi.Input[_builtins.bool]] = None,
            tunnel_interface_allow_snmp_variable: Optional[pulumi.Input[_builtins.str]] = None,
            tunnel_interface_allow_ssh: Optional[pulumi.Input[_builtins.bool]] = None,
            tunnel_interface_allow_ssh_variable: Optional[pulumi.Input[_builtins.str]] = None,
            tunnel_interface_allow_stun: Optional[pulumi.Input[_builtins.bool]] = None,
            tunnel_interface_allow_stun_variable: Optional[pulumi.Input[_builtins.str]] = None,
            tunnel_interface_bind_loopback_tunnel: Optional[pulumi.Input[_builtins.str]] = None,
            tunnel_interface_bind_loopback_tunnel_variable: Optional[pulumi.Input[_builtins.str]] = None,
            tunnel_interface_border: Optional[pulumi.Input[_builtins.bool]] = None,
            tunnel_interface_border_variable: Optional[pulumi.Input[_builtins.str]] = None,
            tunnel_interface_carrier: Optional[pulumi.Input[_builtins.str]] = None,
            tunnel_interface_carrier_variable: Optional[pulumi.Input[_builtins.str]] = None,
            tunnel_interface_clear_dont_fragment: Optional[pulumi.Input[_builtins.bool]] = None,
            tunnel_interface_clear_dont_fragment_variable: Optional[pulumi.Input[_builtins.str]] = None,
            tunnel_interface_color: Optional[pulumi.Input[_builtins.str]] = None,
            tunnel_interface_color_restrict: Optional[pulumi.Input[_builtins.bool]] = None,
            tunnel_interface_color_variable: Optional[pulumi.Input[_builtins.str]] = None,
            tunnel_interface_control_connections: Optional[pulumi.Input[_builtins.bool]] = None,
            tunnel_interface_control_connections_variable: Optional[pulumi.Input[_builtins.str]] = None,
            tunnel_interface_encapsulations: Optional[pulumi.Input[Sequence[pulumi.Input[Union['VpnInterfaceDslPppoeFeatureTemplateTunnelInterfaceEncapsulationArgs', 'VpnInterfaceDslPppoeFeatureTemplateTunnelInterfaceEncapsulationArgsDict']]]]] = None,
            tunnel_interface_exclude_controller_group_list_variable: Optional[pulumi.Input[_builtins.str]] = None,
            tunnel_interface_exclude_controller_group_lists: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.int]]]] = None,
            tunnel_interface_groups: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.int]]]] = None,
            tunnel_interface_groups_variable: Optional[pulumi.Input[_builtins.str]] = None,
            tunnel_interface_hello_interval: Optional[pulumi.Input[_builtins.int]] = None,
            tunnel_interface_hello_interval_variable: Optional[pulumi.Input[_builtins.str]] = None,
            tunnel_interface_hello_tolerance: Optional[pulumi.Input[_builtins.int]] = None,
            tunnel_interface_hello_tolerance_variable: Optional[pulumi.Input[_builtins.str]] = None,
            tunnel_interface_last_resort_circuit: Optional[pulumi.Input[_builtins.bool]] = None,
            tunnel_interface_last_resort_circuit_variable: Optional[pulumi.Input[_builtins.str]] = None,
            tunnel_interface_low_bandwidth_link: Optional[pulumi.Input[_builtins.bool]] = None,
            tunnel_interface_low_bandwidth_link_variable: Optional[pulumi.Input[_builtins.str]] = None,
            tunnel_interface_max_control_connections: Optional[pulumi.Input[_builtins.int]] = None,
            tunnel_interface_max_control_connections_variable: Optional[pulumi.Input[_builtins.str]] = None,
            tunnel_interface_nat_refresh_interval: Optional[pulumi.Input[_builtins.int]] = None,
            tunnel_interface_nat_refresh_interval_variable: Optional[pulumi.Input[_builtins.str]] = None,
            tunnel_interface_network_broadcast: Optional[pulumi.Input[_builtins.bool]] = None,
            tunnel_interface_network_broadcast_variable: Optional[pulumi.Input[_builtins.str]] = None,
            tunnel_interface_port_hop: Optional[pulumi.Input[_builtins.bool]] = None,
            tunnel_interface_port_hop_variable: Optional[pulumi.Input[_builtins.str]] = None,
            tunnel_interface_tunnel_tcp_mss: Optional[pulumi.Input[_builtins.int]] = None,
            tunnel_interface_tunnel_tcp_mss_variable: Optional[pulumi.Input[_builtins.str]] = None,
            tunnel_interface_vbond_as_stun_server: Optional[pulumi.Input[_builtins.bool]] = None,
            tunnel_interface_vbond_as_stun_server_variable: Optional[pulumi.Input[_builtins.str]] = None,
            tunnel_interface_vmanage_connection_preference: Optional[pulumi.Input[_builtins.int]] = None,
            tunnel_interface_vmanage_connection_preference_variable: Optional[pulumi.Input[_builtins.str]] = None,
            tunnel_qos_mode: Optional[pulumi.Input[_builtins.str]] = None,
            tunnel_qos_mode_variable: Optional[pulumi.Input[_builtins.str]] = None,
            vdsl_configurations: Optional[pulumi.Input[Sequence[pulumi.Input[Union['VpnInterfaceDslPppoeFeatureTemplateVdslConfigurationArgs', 'VpnInterfaceDslPppoeFeatureTemplateVdslConfigurationArgsDict']]]]] = None,
            version: Optional[pulumi.Input[_builtins.int]] = None,
            vpn_qos_map: Optional[pulumi.Input[_builtins.str]] = None,
            vpn_qos_map_variable: Optional[pulumi.Input[_builtins.str]] = None,
            write_rule: Optional[pulumi.Input[_builtins.str]] = None,
            write_rule_variable: Optional[pulumi.Input[_builtins.str]] = None) -> 'VpnInterfaceDslPppoeFeatureTemplate':
        """
        Get an existing VpnInterfaceDslPppoeFeatureTemplate resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[Sequence[pulumi.Input[Union['VpnInterfaceDslPppoeFeatureTemplateAccessListArgs', 'VpnInterfaceDslPppoeFeatureTemplateAccessListArgsDict']]]] access_lists: Apply ACL
        :param pulumi.Input[_builtins.int] bandwidth_downstream: Interface downstream bandwidth capacity, in kbps
                 - Range: `1`-`2147483647`
        :param pulumi.Input[_builtins.str] bandwidth_downstream_variable: Variable name
        :param pulumi.Input[_builtins.int] bandwidth_upstream: Interface upstream bandwidth capacity, in kbps
                 - Range: `1`-`2147483647`
        :param pulumi.Input[_builtins.str] bandwidth_upstream_variable: Variable name
        :param pulumi.Input[_builtins.str] chap_hostname: CHAP Hostname
        :param pulumi.Input[_builtins.str] chap_hostname_variable: Variable name
        :param pulumi.Input[_builtins.str] chap_ppp_auth_password: Specify ppp chap authentication Password
        :param pulumi.Input[_builtins.str] chap_ppp_auth_password_variable: Variable name
        :param pulumi.Input[_builtins.str] core_region: Enable core region
                 - Choices: `core`, `core-shared`
                 - Default value: `core`
        :param pulumi.Input[_builtins.str] core_region_variable: Variable name
        :param pulumi.Input[_builtins.str] description: The description of the feature template
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] device_types: List of supported device types
                 - Choices: `vedge-C8000V`, `vedge-C8300-1N1S-4T2X`, `vedge-C8300-1N1S-6T`, `vedge-C8300-2N2S-6T`, `vedge-C8300-2N2S-4T2X`, `vedge-C8500-12X4QC`, `vedge-C8500-12X`, `vedge-C8500-20X6C`, `vedge-C8500L-8S4X`, `vedge-C8200-1N-4T`, `vedge-C8200L-1N-4T`
        :param pulumi.Input[_builtins.bool] enable_core_region: Enable core region
                 - Default value: `false`
        :param pulumi.Input[_builtins.str] enable_core_region_variable: Variable name
        :param pulumi.Input[_builtins.str] ethernet_description: Interface description
        :param pulumi.Input[_builtins.str] ethernet_description_variable: Variable name
        :param pulumi.Input[_builtins.bool] ethernet_dialer_address_negotiated: Dialer IP Negotiated
                 - Default value: `false`
        :param pulumi.Input[_builtins.int] ethernet_dialer_pool_number: Dialer pool number
                 - Range: `1`-`255`
        :param pulumi.Input[_builtins.str] ethernet_dialer_pool_number_variable: Variable name
        :param pulumi.Input[_builtins.str] ethernet_interface_name: Ethernet Interface/Sub Interface Name including sub interface number
        :param pulumi.Input[_builtins.str] ethernet_interface_name_variable: Variable name
        :param pulumi.Input[_builtins.int] ethernet_ppp_maximum_payload: Maximum MRU to be negotiated during PPP LCP negotiation
                 - Range: `64`-`1792`
        :param pulumi.Input[_builtins.str] ethernet_ppp_maximum_payload_variable: Variable name
        :param pulumi.Input[_builtins.str] ethernet_unnumbered_loopback_interface: Dialer IP Unnumbered Loopback interface name
        :param pulumi.Input[_builtins.str] ethernet_unnumbered_loopback_interface_variable: Variable name
        :param pulumi.Input[_builtins.int] ethernet_vlan_id: Encapsulation VLAN id
                 - Range: `1`-`4094`
        :param pulumi.Input[_builtins.str] ethernet_vlan_id_variable: Variable name
        :param pulumi.Input[_builtins.bool] ip_directed_broadcast: IP Directed-Broadcast
                 - Default value: `false`
        :param pulumi.Input[_builtins.str] ip_directed_broadcast_variable: Variable name
        :param pulumi.Input[_builtins.int] ip_mtu: Interface MTU <576..2000>, in bytes
                 - Range: `576`-`2000`
                 - Default value: `1500`
        :param pulumi.Input[_builtins.str] ip_mtu_variable: Variable name
        :param pulumi.Input[_builtins.str] name: The name of the feature template
        :param pulumi.Input[_builtins.bool] nat: Network Address Translation on this interface
                 - Default value: `false`
        :param pulumi.Input[_builtins.bool] nat_block_icmp_error: Block inbound ICMP error messages
                 - Default value: `true`
        :param pulumi.Input[_builtins.str] nat_block_icmp_error_variable: Variable name
        :param pulumi.Input[Sequence[pulumi.Input[Union['VpnInterfaceDslPppoeFeatureTemplateNatPortForwardArgs', 'VpnInterfaceDslPppoeFeatureTemplateNatPortForwardArgsDict']]]] nat_port_forwards: Set port-forwarding rules for NAT on this interface
        :param pulumi.Input[_builtins.str] nat_refresh_mode: Set NAT refresh mode
                 - Choices: `outbound`, `bi-directional`
                 - Default value: `outbound`
        :param pulumi.Input[_builtins.str] nat_refresh_mode_variable: Variable name
        :param pulumi.Input[_builtins.bool] nat_response_to_ping: Respond to ping requests to NAT interface ip address from the public side
                 - Default value: `false`
        :param pulumi.Input[_builtins.str] nat_response_to_ping_variable: Variable name
        :param pulumi.Input[_builtins.int] nat_tcp_timeout: Set NAT TCP session timeout, in minutes
                 - Range: `1`-`8947`
                 - Default value: `60`
        :param pulumi.Input[_builtins.str] nat_tcp_timeout_variable: Variable name
        :param pulumi.Input[_builtins.int] nat_udp_timeout: Set NAT UDP session timeout, in minutes
                 - Range: `1`-`8947`
                 - Default value: `1`
        :param pulumi.Input[_builtins.str] nat_udp_timeout_variable: Variable name
        :param pulumi.Input[_builtins.bool] pap_password: PAP outbound Password
        :param pulumi.Input[_builtins.str] pap_ppp_auth_password: Specify ppp pap authentication Password
        :param pulumi.Input[_builtins.str] pap_ppp_auth_password_variable: Variable name
        :param pulumi.Input[_builtins.str] pap_username: PAP outbound Sent Username
        :param pulumi.Input[_builtins.str] pap_username_variable: Variable name
        :param pulumi.Input[_builtins.bool] per_tunnel_qos: Per-tunnel Qos
                 - Default value: `false`
        :param pulumi.Input[_builtins.bool] per_tunnel_qos_aggregator: Per-tunnel QoS Aggregator
                 - Default value: `false`
        :param pulumi.Input[_builtins.str] per_tunnel_qos_aggregator_variable: Variable name
        :param pulumi.Input[_builtins.str] per_tunnel_qos_variable: Variable name
        :param pulumi.Input[Sequence[pulumi.Input[Union['VpnInterfaceDslPppoeFeatureTemplatePolicerArgs', 'VpnInterfaceDslPppoeFeatureTemplatePolicerArgsDict']]]] policers: Enable policer
        :param pulumi.Input[_builtins.str] ppp_authentication_protocol: PPP Link Authentication Protocol
                 - Choices: `chap`, `pap`
        :param pulumi.Input[_builtins.bool] ppp_authentication_protocol_pap: PPP Authentication Protocol PAP
                 - Default value: `false`
        :param pulumi.Input[_builtins.str] ppp_authentication_protocol_variable: Variable name
        :param pulumi.Input[_builtins.str] ppp_authentication_type: Authenticate remote on incoming call only
                 - Choices: `callin`, `false`
                 - Default value: `callin`
        :param pulumi.Input[_builtins.int] qos_adaptive_bandwidth_downstream: Adaptive QoS default downstream bandwidth
                 - Range: `8`-`100000000`
        :param pulumi.Input[_builtins.str] qos_adaptive_bandwidth_downstream_variable: Variable name
        :param pulumi.Input[_builtins.int] qos_adaptive_bandwidth_upstream: Adaptive QoS default upstream bandwidth
                 - Range: `8`-`100000000`
        :param pulumi.Input[_builtins.str] qos_adaptive_bandwidth_upstream_variable: Variable name
        :param pulumi.Input[_builtins.int] qos_adaptive_max_downstream: Downstream max bandwidth limit
                 - Range: `8`-`100000000`
        :param pulumi.Input[_builtins.str] qos_adaptive_max_downstream_variable: Variable name
        :param pulumi.Input[_builtins.int] qos_adaptive_max_upstream: Upstream max bandwidth limit
                 - Range: `8`-`100000000`
        :param pulumi.Input[_builtins.str] qos_adaptive_max_upstream_variable: Variable name
        :param pulumi.Input[_builtins.int] qos_adaptive_min_downstream: Downstream min bandwidth limit
                 - Range: `8`-`100000000`
        :param pulumi.Input[_builtins.str] qos_adaptive_min_downstream_variable: Variable name
        :param pulumi.Input[_builtins.int] qos_adaptive_min_upstream: Upstream min bandwidth limit
                 - Range: `8`-`100000000`
        :param pulumi.Input[_builtins.str] qos_adaptive_min_upstream_variable: Variable name
        :param pulumi.Input[_builtins.int] qos_adaptive_period: Periodic timer for adaptive QoS in minutes
                 - Range: `1`-`720`
                 - Default value: `15`
        :param pulumi.Input[_builtins.str] qos_adaptive_period_variable: Variable name
        :param pulumi.Input[_builtins.str] qos_map: Name of QoS map
        :param pulumi.Input[_builtins.str] qos_map_variable: Variable name
        :param pulumi.Input[_builtins.str] secondary_region: Enable secondary region
                 - Choices: `off`, `secondary-only`, `secondary-shared`
                 - Default value: `off`
        :param pulumi.Input[_builtins.str] secondary_region_variable: Variable name
        :param pulumi.Input[_builtins.int] shaping_rate: 1ge  interfaces: [0..1000000]kbps; 10ge interfaces: [0..10000000]kbps
                 - Range: `8`-`100000000`
        :param pulumi.Input[_builtins.str] shaping_rate_variable: Variable name
        :param pulumi.Input[_builtins.bool] shutdown: Administrative state
                 - Default value: `true`
        :param pulumi.Input[_builtins.str] shutdown_variable: Variable name
        :param pulumi.Input[_builtins.int] tcp_mss: TCP MSS on SYN packets, in bytes
                 - Range: `552`-`1960`
        :param pulumi.Input[_builtins.str] tcp_mss_variable: Variable name
        :param pulumi.Input[_builtins.str] template_type: The template type
        :param pulumi.Input[_builtins.str] tloc_extension: Extends a local TLOC to a remote node only for vpn 0
        :param pulumi.Input[_builtins.str] tloc_extension_variable: Variable name
        :param pulumi.Input[_builtins.str] tracker_variable: Variable name
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] trackers: Enable tracker for this interface
        :param pulumi.Input[_builtins.bool] tunnel_interface_allow_all: Allow all traffic. Overrides all other allow-service options if allow-service all is set
                 - Default value: `false`
        :param pulumi.Input[_builtins.str] tunnel_interface_allow_all_variable: Variable name
        :param pulumi.Input[_builtins.bool] tunnel_interface_allow_bgp: Allow/deny BGP
                 - Default value: `false`
        :param pulumi.Input[_builtins.str] tunnel_interface_allow_bgp_variable: Variable name
        :param pulumi.Input[_builtins.bool] tunnel_interface_allow_dhcp: Allow/Deny DHCP
                 - Default value: `true`
        :param pulumi.Input[_builtins.str] tunnel_interface_allow_dhcp_variable: Variable name
        :param pulumi.Input[_builtins.bool] tunnel_interface_allow_dns: Allow/Deny DNS
                 - Default value: `true`
        :param pulumi.Input[_builtins.str] tunnel_interface_allow_dns_variable: Variable name
        :param pulumi.Input[_builtins.bool] tunnel_interface_allow_https: Allow/Deny Https
                 - Default value: `false`
        :param pulumi.Input[_builtins.str] tunnel_interface_allow_https_variable: Variable name
        :param pulumi.Input[_builtins.bool] tunnel_interface_allow_icmp: Allow/Deny ICMP
                 - Default value: `true`
        :param pulumi.Input[_builtins.str] tunnel_interface_allow_icmp_variable: Variable name
        :param pulumi.Input[_builtins.bool] tunnel_interface_allow_netconf: Allow/Deny NETCONF
                 - Default value: `false`
        :param pulumi.Input[_builtins.str] tunnel_interface_allow_netconf_variable: Variable name
        :param pulumi.Input[_builtins.bool] tunnel_interface_allow_ntp: Allow/Deny NTP
                 - Default value: `false`
        :param pulumi.Input[_builtins.str] tunnel_interface_allow_ntp_variable: Variable name
        :param pulumi.Input[_builtins.bool] tunnel_interface_allow_ospf: Allow/Deny OSPF
                 - Default value: `false`
        :param pulumi.Input[_builtins.str] tunnel_interface_allow_ospf_variable: Variable name
        :param pulumi.Input[_builtins.bool] tunnel_interface_allow_snmp: Allow/Deny SNMP
                 - Default value: `false`
        :param pulumi.Input[_builtins.str] tunnel_interface_allow_snmp_variable: Variable name
        :param pulumi.Input[_builtins.bool] tunnel_interface_allow_ssh: Allow/Deny SSH
                 - Default value: `false`
        :param pulumi.Input[_builtins.str] tunnel_interface_allow_ssh_variable: Variable name
        :param pulumi.Input[_builtins.bool] tunnel_interface_allow_stun: Allow/Deny STUN
                 - Default value: `false`
        :param pulumi.Input[_builtins.str] tunnel_interface_allow_stun_variable: Variable name
        :param pulumi.Input[_builtins.str] tunnel_interface_bind_loopback_tunnel: Bind loopback tunnel interface to a physical interface
        :param pulumi.Input[_builtins.str] tunnel_interface_bind_loopback_tunnel_variable: Variable name
        :param pulumi.Input[_builtins.bool] tunnel_interface_border: Set TLOC as border TLOC
                 - Default value: `false`
        :param pulumi.Input[_builtins.str] tunnel_interface_border_variable: Variable name
        :param pulumi.Input[_builtins.str] tunnel_interface_carrier: Set carrier for TLOC
                 - Choices: `default`, `carrier1`, `carrier2`, `carrier3`, `carrier4`, `carrier5`, `carrier6`, `carrier7`, `carrier8`
                 - Default value: `default`
        :param pulumi.Input[_builtins.str] tunnel_interface_carrier_variable: Variable name
        :param pulumi.Input[_builtins.bool] tunnel_interface_clear_dont_fragment: Enable clear dont fragment (Currently Only SDWAN Tunnel Interface)
                 - Default value: `false`
        :param pulumi.Input[_builtins.str] tunnel_interface_clear_dont_fragment_variable: Variable name
        :param pulumi.Input[_builtins.str] tunnel_interface_color: Set color for TLOC
                 - Choices: `default`, `mpls`, `metro-ethernet`, `biz-internet`, `public-internet`, `lte`, `3g`, `red`, `green`, `blue`, `gold`, `silver`, `bronze`, `custom1`, `custom2`, `custom3`, `private1`, `private2`, `private3`, `private4`, `private5`, `private6`
                 - Default value: `default`
        :param pulumi.Input[_builtins.bool] tunnel_interface_color_restrict: Restrict this TLOC behavior
                 - Default value: `false`
        :param pulumi.Input[_builtins.str] tunnel_interface_color_variable: Variable name
        :param pulumi.Input[_builtins.bool] tunnel_interface_control_connections: Allow Control Connection
                 - Default value: `true`
        :param pulumi.Input[_builtins.str] tunnel_interface_control_connections_variable: Variable name
        :param pulumi.Input[Sequence[pulumi.Input[Union['VpnInterfaceDslPppoeFeatureTemplateTunnelInterfaceEncapsulationArgs', 'VpnInterfaceDslPppoeFeatureTemplateTunnelInterfaceEncapsulationArgsDict']]]] tunnel_interface_encapsulations: Encapsulation for TLOC
        :param pulumi.Input[_builtins.str] tunnel_interface_exclude_controller_group_list_variable: Variable name
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.int]]] tunnel_interface_exclude_controller_group_lists: Exclude the following controller groups defined in this list
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.int]]] tunnel_interface_groups: List of groups
        :param pulumi.Input[_builtins.str] tunnel_interface_groups_variable: Variable name
        :param pulumi.Input[_builtins.int] tunnel_interface_hello_interval: Set time period of control hello packets <100..600000> milli seconds
                 - Range: `100`-`600000`
                 - Default value: `1000`
        :param pulumi.Input[_builtins.str] tunnel_interface_hello_interval_variable: Variable name
        :param pulumi.Input[_builtins.int] tunnel_interface_hello_tolerance: Set tolerance of control hello packets <12..6000> seconds
                 - Range: `12`-`6000`
                 - Default value: `12`
        :param pulumi.Input[_builtins.str] tunnel_interface_hello_tolerance_variable: Variable name
        :param pulumi.Input[_builtins.bool] tunnel_interface_last_resort_circuit: Set TLOC as last resort
                 - Default value: `false`
        :param pulumi.Input[_builtins.str] tunnel_interface_last_resort_circuit_variable: Variable name
        :param pulumi.Input[_builtins.bool] tunnel_interface_low_bandwidth_link: Set the interface as a low-bandwidth circuit
                 - Default value: `false`
        :param pulumi.Input[_builtins.str] tunnel_interface_low_bandwidth_link_variable: Variable name
        :param pulumi.Input[_builtins.int] tunnel_interface_max_control_connections: Set the maximum number of control connections for this TLOC
                 - Range: `0`-`8`
        :param pulumi.Input[_builtins.str] tunnel_interface_max_control_connections_variable: Variable name
        :param pulumi.Input[_builtins.int] tunnel_interface_nat_refresh_interval: Set time period of nat refresh packets <1...60> seconds
                 - Range: `1`-`60`
                 - Default value: `5`
        :param pulumi.Input[_builtins.str] tunnel_interface_nat_refresh_interval_variable: Variable name
        :param pulumi.Input[_builtins.bool] tunnel_interface_network_broadcast: Accept and respond to network-prefix-directed broadcasts)
                 - Default value: `false`
        :param pulumi.Input[_builtins.str] tunnel_interface_network_broadcast_variable: Variable name
        :param pulumi.Input[_builtins.bool] tunnel_interface_port_hop: Disallow port hopping on the tunnel interface
                 - Default value: `true`
        :param pulumi.Input[_builtins.str] tunnel_interface_port_hop_variable: Variable name
        :param pulumi.Input[_builtins.int] tunnel_interface_tunnel_tcp_mss: Tunnel TCP MSS on SYN packets, in bytes
                 - Range: `500`-`1460`
        :param pulumi.Input[_builtins.str] tunnel_interface_tunnel_tcp_mss_variable: Variable name
        :param pulumi.Input[_builtins.bool] tunnel_interface_vbond_as_stun_server: Put this wan interface in STUN mode only
                 - Default value: `false`
        :param pulumi.Input[_builtins.str] tunnel_interface_vbond_as_stun_server_variable: Variable name
        :param pulumi.Input[_builtins.int] tunnel_interface_vmanage_connection_preference: Set interface preference for control connection to vManage <0..8>
                 - Range: `0`-`8`
                 - Default value: `5`
        :param pulumi.Input[_builtins.str] tunnel_interface_vmanage_connection_preference_variable: Variable name
        :param pulumi.Input[_builtins.str] tunnel_qos_mode: Set tunnel QoS mode
                 - Choices: `spoke`
        :param pulumi.Input[_builtins.str] tunnel_qos_mode_variable: Variable name
        :param pulumi.Input[Sequence[pulumi.Input[Union['VpnInterfaceDslPppoeFeatureTemplateVdslConfigurationArgs', 'VpnInterfaceDslPppoeFeatureTemplateVdslConfigurationArgsDict']]]] vdsl_configurations: vdsl
        :param pulumi.Input[_builtins.int] version: The version of the feature template
        :param pulumi.Input[_builtins.str] vpn_qos_map: Name of VPN QoS map
        :param pulumi.Input[_builtins.str] vpn_qos_map_variable: Variable name
        :param pulumi.Input[_builtins.str] write_rule: Name of rewrite rule
        :param pulumi.Input[_builtins.str] write_rule_variable: Variable name
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _VpnInterfaceDslPppoeFeatureTemplateState.__new__(_VpnInterfaceDslPppoeFeatureTemplateState)

        __props__.__dict__["access_lists"] = access_lists
        __props__.__dict__["bandwidth_downstream"] = bandwidth_downstream
        __props__.__dict__["bandwidth_downstream_variable"] = bandwidth_downstream_variable
        __props__.__dict__["bandwidth_upstream"] = bandwidth_upstream
        __props__.__dict__["bandwidth_upstream_variable"] = bandwidth_upstream_variable
        __props__.__dict__["chap_hostname"] = chap_hostname
        __props__.__dict__["chap_hostname_variable"] = chap_hostname_variable
        __props__.__dict__["chap_ppp_auth_password"] = chap_ppp_auth_password
        __props__.__dict__["chap_ppp_auth_password_variable"] = chap_ppp_auth_password_variable
        __props__.__dict__["core_region"] = core_region
        __props__.__dict__["core_region_variable"] = core_region_variable
        __props__.__dict__["description"] = description
        __props__.__dict__["device_types"] = device_types
        __props__.__dict__["enable_core_region"] = enable_core_region
        __props__.__dict__["enable_core_region_variable"] = enable_core_region_variable
        __props__.__dict__["ethernet_description"] = ethernet_description
        __props__.__dict__["ethernet_description_variable"] = ethernet_description_variable
        __props__.__dict__["ethernet_dialer_address_negotiated"] = ethernet_dialer_address_negotiated
        __props__.__dict__["ethernet_dialer_pool_number"] = ethernet_dialer_pool_number
        __props__.__dict__["ethernet_dialer_pool_number_variable"] = ethernet_dialer_pool_number_variable
        __props__.__dict__["ethernet_interface_name"] = ethernet_interface_name
        __props__.__dict__["ethernet_interface_name_variable"] = ethernet_interface_name_variable
        __props__.__dict__["ethernet_ppp_maximum_payload"] = ethernet_ppp_maximum_payload
        __props__.__dict__["ethernet_ppp_maximum_payload_variable"] = ethernet_ppp_maximum_payload_variable
        __props__.__dict__["ethernet_unnumbered_loopback_interface"] = ethernet_unnumbered_loopback_interface
        __props__.__dict__["ethernet_unnumbered_loopback_interface_variable"] = ethernet_unnumbered_loopback_interface_variable
        __props__.__dict__["ethernet_vlan_id"] = ethernet_vlan_id
        __props__.__dict__["ethernet_vlan_id_variable"] = ethernet_vlan_id_variable
        __props__.__dict__["ip_directed_broadcast"] = ip_directed_broadcast
        __props__.__dict__["ip_directed_broadcast_variable"] = ip_directed_broadcast_variable
        __props__.__dict__["ip_mtu"] = ip_mtu
        __props__.__dict__["ip_mtu_variable"] = ip_mtu_variable
        __props__.__dict__["name"] = name
        __props__.__dict__["nat"] = nat
        __props__.__dict__["nat_block_icmp_error"] = nat_block_icmp_error
        __props__.__dict__["nat_block_icmp_error_variable"] = nat_block_icmp_error_variable
        __props__.__dict__["nat_port_forwards"] = nat_port_forwards
        __props__.__dict__["nat_refresh_mode"] = nat_refresh_mode
        __props__.__dict__["nat_refresh_mode_variable"] = nat_refresh_mode_variable
        __props__.__dict__["nat_response_to_ping"] = nat_response_to_ping
        __props__.__dict__["nat_response_to_ping_variable"] = nat_response_to_ping_variable
        __props__.__dict__["nat_tcp_timeout"] = nat_tcp_timeout
        __props__.__dict__["nat_tcp_timeout_variable"] = nat_tcp_timeout_variable
        __props__.__dict__["nat_udp_timeout"] = nat_udp_timeout
        __props__.__dict__["nat_udp_timeout_variable"] = nat_udp_timeout_variable
        __props__.__dict__["pap_password"] = pap_password
        __props__.__dict__["pap_ppp_auth_password"] = pap_ppp_auth_password
        __props__.__dict__["pap_ppp_auth_password_variable"] = pap_ppp_auth_password_variable
        __props__.__dict__["pap_username"] = pap_username
        __props__.__dict__["pap_username_variable"] = pap_username_variable
        __props__.__dict__["per_tunnel_qos"] = per_tunnel_qos
        __props__.__dict__["per_tunnel_qos_aggregator"] = per_tunnel_qos_aggregator
        __props__.__dict__["per_tunnel_qos_aggregator_variable"] = per_tunnel_qos_aggregator_variable
        __props__.__dict__["per_tunnel_qos_variable"] = per_tunnel_qos_variable
        __props__.__dict__["policers"] = policers
        __props__.__dict__["ppp_authentication_protocol"] = ppp_authentication_protocol
        __props__.__dict__["ppp_authentication_protocol_pap"] = ppp_authentication_protocol_pap
        __props__.__dict__["ppp_authentication_protocol_variable"] = ppp_authentication_protocol_variable
        __props__.__dict__["ppp_authentication_type"] = ppp_authentication_type
        __props__.__dict__["qos_adaptive_bandwidth_downstream"] = qos_adaptive_bandwidth_downstream
        __props__.__dict__["qos_adaptive_bandwidth_downstream_variable"] = qos_adaptive_bandwidth_downstream_variable
        __props__.__dict__["qos_adaptive_bandwidth_upstream"] = qos_adaptive_bandwidth_upstream
        __props__.__dict__["qos_adaptive_bandwidth_upstream_variable"] = qos_adaptive_bandwidth_upstream_variable
        __props__.__dict__["qos_adaptive_max_downstream"] = qos_adaptive_max_downstream
        __props__.__dict__["qos_adaptive_max_downstream_variable"] = qos_adaptive_max_downstream_variable
        __props__.__dict__["qos_adaptive_max_upstream"] = qos_adaptive_max_upstream
        __props__.__dict__["qos_adaptive_max_upstream_variable"] = qos_adaptive_max_upstream_variable
        __props__.__dict__["qos_adaptive_min_downstream"] = qos_adaptive_min_downstream
        __props__.__dict__["qos_adaptive_min_downstream_variable"] = qos_adaptive_min_downstream_variable
        __props__.__dict__["qos_adaptive_min_upstream"] = qos_adaptive_min_upstream
        __props__.__dict__["qos_adaptive_min_upstream_variable"] = qos_adaptive_min_upstream_variable
        __props__.__dict__["qos_adaptive_period"] = qos_adaptive_period
        __props__.__dict__["qos_adaptive_period_variable"] = qos_adaptive_period_variable
        __props__.__dict__["qos_map"] = qos_map
        __props__.__dict__["qos_map_variable"] = qos_map_variable
        __props__.__dict__["secondary_region"] = secondary_region
        __props__.__dict__["secondary_region_variable"] = secondary_region_variable
        __props__.__dict__["shaping_rate"] = shaping_rate
        __props__.__dict__["shaping_rate_variable"] = shaping_rate_variable
        __props__.__dict__["shutdown"] = shutdown
        __props__.__dict__["shutdown_variable"] = shutdown_variable
        __props__.__dict__["tcp_mss"] = tcp_mss
        __props__.__dict__["tcp_mss_variable"] = tcp_mss_variable
        __props__.__dict__["template_type"] = template_type
        __props__.__dict__["tloc_extension"] = tloc_extension
        __props__.__dict__["tloc_extension_variable"] = tloc_extension_variable
        __props__.__dict__["tracker_variable"] = tracker_variable
        __props__.__dict__["trackers"] = trackers
        __props__.__dict__["tunnel_interface_allow_all"] = tunnel_interface_allow_all
        __props__.__dict__["tunnel_interface_allow_all_variable"] = tunnel_interface_allow_all_variable
        __props__.__dict__["tunnel_interface_allow_bgp"] = tunnel_interface_allow_bgp
        __props__.__dict__["tunnel_interface_allow_bgp_variable"] = tunnel_interface_allow_bgp_variable
        __props__.__dict__["tunnel_interface_allow_dhcp"] = tunnel_interface_allow_dhcp
        __props__.__dict__["tunnel_interface_allow_dhcp_variable"] = tunnel_interface_allow_dhcp_variable
        __props__.__dict__["tunnel_interface_allow_dns"] = tunnel_interface_allow_dns
        __props__.__dict__["tunnel_interface_allow_dns_variable"] = tunnel_interface_allow_dns_variable
        __props__.__dict__["tunnel_interface_allow_https"] = tunnel_interface_allow_https
        __props__.__dict__["tunnel_interface_allow_https_variable"] = tunnel_interface_allow_https_variable
        __props__.__dict__["tunnel_interface_allow_icmp"] = tunnel_interface_allow_icmp
        __props__.__dict__["tunnel_interface_allow_icmp_variable"] = tunnel_interface_allow_icmp_variable
        __props__.__dict__["tunnel_interface_allow_netconf"] = tunnel_interface_allow_netconf
        __props__.__dict__["tunnel_interface_allow_netconf_variable"] = tunnel_interface_allow_netconf_variable
        __props__.__dict__["tunnel_interface_allow_ntp"] = tunnel_interface_allow_ntp
        __props__.__dict__["tunnel_interface_allow_ntp_variable"] = tunnel_interface_allow_ntp_variable
        __props__.__dict__["tunnel_interface_allow_ospf"] = tunnel_interface_allow_ospf
        __props__.__dict__["tunnel_interface_allow_ospf_variable"] = tunnel_interface_allow_ospf_variable
        __props__.__dict__["tunnel_interface_allow_snmp"] = tunnel_interface_allow_snmp
        __props__.__dict__["tunnel_interface_allow_snmp_variable"] = tunnel_interface_allow_snmp_variable
        __props__.__dict__["tunnel_interface_allow_ssh"] = tunnel_interface_allow_ssh
        __props__.__dict__["tunnel_interface_allow_ssh_variable"] = tunnel_interface_allow_ssh_variable
        __props__.__dict__["tunnel_interface_allow_stun"] = tunnel_interface_allow_stun
        __props__.__dict__["tunnel_interface_allow_stun_variable"] = tunnel_interface_allow_stun_variable
        __props__.__dict__["tunnel_interface_bind_loopback_tunnel"] = tunnel_interface_bind_loopback_tunnel
        __props__.__dict__["tunnel_interface_bind_loopback_tunnel_variable"] = tunnel_interface_bind_loopback_tunnel_variable
        __props__.__dict__["tunnel_interface_border"] = tunnel_interface_border
        __props__.__dict__["tunnel_interface_border_variable"] = tunnel_interface_border_variable
        __props__.__dict__["tunnel_interface_carrier"] = tunnel_interface_carrier
        __props__.__dict__["tunnel_interface_carrier_variable"] = tunnel_interface_carrier_variable
        __props__.__dict__["tunnel_interface_clear_dont_fragment"] = tunnel_interface_clear_dont_fragment
        __props__.__dict__["tunnel_interface_clear_dont_fragment_variable"] = tunnel_interface_clear_dont_fragment_variable
        __props__.__dict__["tunnel_interface_color"] = tunnel_interface_color
        __props__.__dict__["tunnel_interface_color_restrict"] = tunnel_interface_color_restrict
        __props__.__dict__["tunnel_interface_color_variable"] = tunnel_interface_color_variable
        __props__.__dict__["tunnel_interface_control_connections"] = tunnel_interface_control_connections
        __props__.__dict__["tunnel_interface_control_connections_variable"] = tunnel_interface_control_connections_variable
        __props__.__dict__["tunnel_interface_encapsulations"] = tunnel_interface_encapsulations
        __props__.__dict__["tunnel_interface_exclude_controller_group_list_variable"] = tunnel_interface_exclude_controller_group_list_variable
        __props__.__dict__["tunnel_interface_exclude_controller_group_lists"] = tunnel_interface_exclude_controller_group_lists
        __props__.__dict__["tunnel_interface_groups"] = tunnel_interface_groups
        __props__.__dict__["tunnel_interface_groups_variable"] = tunnel_interface_groups_variable
        __props__.__dict__["tunnel_interface_hello_interval"] = tunnel_interface_hello_interval
        __props__.__dict__["tunnel_interface_hello_interval_variable"] = tunnel_interface_hello_interval_variable
        __props__.__dict__["tunnel_interface_hello_tolerance"] = tunnel_interface_hello_tolerance
        __props__.__dict__["tunnel_interface_hello_tolerance_variable"] = tunnel_interface_hello_tolerance_variable
        __props__.__dict__["tunnel_interface_last_resort_circuit"] = tunnel_interface_last_resort_circuit
        __props__.__dict__["tunnel_interface_last_resort_circuit_variable"] = tunnel_interface_last_resort_circuit_variable
        __props__.__dict__["tunnel_interface_low_bandwidth_link"] = tunnel_interface_low_bandwidth_link
        __props__.__dict__["tunnel_interface_low_bandwidth_link_variable"] = tunnel_interface_low_bandwidth_link_variable
        __props__.__dict__["tunnel_interface_max_control_connections"] = tunnel_interface_max_control_connections
        __props__.__dict__["tunnel_interface_max_control_connections_variable"] = tunnel_interface_max_control_connections_variable
        __props__.__dict__["tunnel_interface_nat_refresh_interval"] = tunnel_interface_nat_refresh_interval
        __props__.__dict__["tunnel_interface_nat_refresh_interval_variable"] = tunnel_interface_nat_refresh_interval_variable
        __props__.__dict__["tunnel_interface_network_broadcast"] = tunnel_interface_network_broadcast
        __props__.__dict__["tunnel_interface_network_broadcast_variable"] = tunnel_interface_network_broadcast_variable
        __props__.__dict__["tunnel_interface_port_hop"] = tunnel_interface_port_hop
        __props__.__dict__["tunnel_interface_port_hop_variable"] = tunnel_interface_port_hop_variable
        __props__.__dict__["tunnel_interface_tunnel_tcp_mss"] = tunnel_interface_tunnel_tcp_mss
        __props__.__dict__["tunnel_interface_tunnel_tcp_mss_variable"] = tunnel_interface_tunnel_tcp_mss_variable
        __props__.__dict__["tunnel_interface_vbond_as_stun_server"] = tunnel_interface_vbond_as_stun_server
        __props__.__dict__["tunnel_interface_vbond_as_stun_server_variable"] = tunnel_interface_vbond_as_stun_server_variable
        __props__.__dict__["tunnel_interface_vmanage_connection_preference"] = tunnel_interface_vmanage_connection_preference
        __props__.__dict__["tunnel_interface_vmanage_connection_preference_variable"] = tunnel_interface_vmanage_connection_preference_variable
        __props__.__dict__["tunnel_qos_mode"] = tunnel_qos_mode
        __props__.__dict__["tunnel_qos_mode_variable"] = tunnel_qos_mode_variable
        __props__.__dict__["vdsl_configurations"] = vdsl_configurations
        __props__.__dict__["version"] = version
        __props__.__dict__["vpn_qos_map"] = vpn_qos_map
        __props__.__dict__["vpn_qos_map_variable"] = vpn_qos_map_variable
        __props__.__dict__["write_rule"] = write_rule
        __props__.__dict__["write_rule_variable"] = write_rule_variable
        return VpnInterfaceDslPppoeFeatureTemplate(resource_name, opts=opts, __props__=__props__)

    @_builtins.property
    @pulumi.getter(name="accessLists")
    def access_lists(self) -> pulumi.Output[Optional[Sequence['outputs.VpnInterfaceDslPppoeFeatureTemplateAccessList']]]:
        """
        Apply ACL
        """
        return pulumi.get(self, "access_lists")

    @_builtins.property
    @pulumi.getter(name="bandwidthDownstream")
    def bandwidth_downstream(self) -> pulumi.Output[Optional[_builtins.int]]:
        """
        Interface downstream bandwidth capacity, in kbps
          - Range: `1`-`2147483647`
        """
        return pulumi.get(self, "bandwidth_downstream")

    @_builtins.property
    @pulumi.getter(name="bandwidthDownstreamVariable")
    def bandwidth_downstream_variable(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "bandwidth_downstream_variable")

    @_builtins.property
    @pulumi.getter(name="bandwidthUpstream")
    def bandwidth_upstream(self) -> pulumi.Output[Optional[_builtins.int]]:
        """
        Interface upstream bandwidth capacity, in kbps
          - Range: `1`-`2147483647`
        """
        return pulumi.get(self, "bandwidth_upstream")

    @_builtins.property
    @pulumi.getter(name="bandwidthUpstreamVariable")
    def bandwidth_upstream_variable(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "bandwidth_upstream_variable")

    @_builtins.property
    @pulumi.getter(name="chapHostname")
    def chap_hostname(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        CHAP Hostname
        """
        return pulumi.get(self, "chap_hostname")

    @_builtins.property
    @pulumi.getter(name="chapHostnameVariable")
    def chap_hostname_variable(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "chap_hostname_variable")

    @_builtins.property
    @pulumi.getter(name="chapPppAuthPassword")
    def chap_ppp_auth_password(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        Specify ppp chap authentication Password
        """
        return pulumi.get(self, "chap_ppp_auth_password")

    @_builtins.property
    @pulumi.getter(name="chapPppAuthPasswordVariable")
    def chap_ppp_auth_password_variable(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "chap_ppp_auth_password_variable")

    @_builtins.property
    @pulumi.getter(name="coreRegion")
    def core_region(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        Enable core region
          - Choices: `core`, `core-shared`
          - Default value: `core`
        """
        return pulumi.get(self, "core_region")

    @_builtins.property
    @pulumi.getter(name="coreRegionVariable")
    def core_region_variable(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "core_region_variable")

    @_builtins.property
    @pulumi.getter
    def description(self) -> pulumi.Output[_builtins.str]:
        """
        The description of the feature template
        """
        return pulumi.get(self, "description")

    @_builtins.property
    @pulumi.getter(name="deviceTypes")
    def device_types(self) -> pulumi.Output[Sequence[_builtins.str]]:
        """
        List of supported device types
          - Choices: `vedge-C8000V`, `vedge-C8300-1N1S-4T2X`, `vedge-C8300-1N1S-6T`, `vedge-C8300-2N2S-6T`, `vedge-C8300-2N2S-4T2X`, `vedge-C8500-12X4QC`, `vedge-C8500-12X`, `vedge-C8500-20X6C`, `vedge-C8500L-8S4X`, `vedge-C8200-1N-4T`, `vedge-C8200L-1N-4T`
        """
        return pulumi.get(self, "device_types")

    @_builtins.property
    @pulumi.getter(name="enableCoreRegion")
    def enable_core_region(self) -> pulumi.Output[Optional[_builtins.bool]]:
        """
        Enable core region
          - Default value: `false`
        """
        return pulumi.get(self, "enable_core_region")

    @_builtins.property
    @pulumi.getter(name="enableCoreRegionVariable")
    def enable_core_region_variable(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "enable_core_region_variable")

    @_builtins.property
    @pulumi.getter(name="ethernetDescription")
    def ethernet_description(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        Interface description
        """
        return pulumi.get(self, "ethernet_description")

    @_builtins.property
    @pulumi.getter(name="ethernetDescriptionVariable")
    def ethernet_description_variable(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "ethernet_description_variable")

    @_builtins.property
    @pulumi.getter(name="ethernetDialerAddressNegotiated")
    def ethernet_dialer_address_negotiated(self) -> pulumi.Output[Optional[_builtins.bool]]:
        """
        Dialer IP Negotiated
          - Default value: `false`
        """
        return pulumi.get(self, "ethernet_dialer_address_negotiated")

    @_builtins.property
    @pulumi.getter(name="ethernetDialerPoolNumber")
    def ethernet_dialer_pool_number(self) -> pulumi.Output[Optional[_builtins.int]]:
        """
        Dialer pool number
          - Range: `1`-`255`
        """
        return pulumi.get(self, "ethernet_dialer_pool_number")

    @_builtins.property
    @pulumi.getter(name="ethernetDialerPoolNumberVariable")
    def ethernet_dialer_pool_number_variable(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "ethernet_dialer_pool_number_variable")

    @_builtins.property
    @pulumi.getter(name="ethernetInterfaceName")
    def ethernet_interface_name(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        Ethernet Interface/Sub Interface Name including sub interface number
        """
        return pulumi.get(self, "ethernet_interface_name")

    @_builtins.property
    @pulumi.getter(name="ethernetInterfaceNameVariable")
    def ethernet_interface_name_variable(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "ethernet_interface_name_variable")

    @_builtins.property
    @pulumi.getter(name="ethernetPppMaximumPayload")
    def ethernet_ppp_maximum_payload(self) -> pulumi.Output[Optional[_builtins.int]]:
        """
        Maximum MRU to be negotiated during PPP LCP negotiation
          - Range: `64`-`1792`
        """
        return pulumi.get(self, "ethernet_ppp_maximum_payload")

    @_builtins.property
    @pulumi.getter(name="ethernetPppMaximumPayloadVariable")
    def ethernet_ppp_maximum_payload_variable(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "ethernet_ppp_maximum_payload_variable")

    @_builtins.property
    @pulumi.getter(name="ethernetUnnumberedLoopbackInterface")
    def ethernet_unnumbered_loopback_interface(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        Dialer IP Unnumbered Loopback interface name
        """
        return pulumi.get(self, "ethernet_unnumbered_loopback_interface")

    @_builtins.property
    @pulumi.getter(name="ethernetUnnumberedLoopbackInterfaceVariable")
    def ethernet_unnumbered_loopback_interface_variable(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "ethernet_unnumbered_loopback_interface_variable")

    @_builtins.property
    @pulumi.getter(name="ethernetVlanId")
    def ethernet_vlan_id(self) -> pulumi.Output[Optional[_builtins.int]]:
        """
        Encapsulation VLAN id
          - Range: `1`-`4094`
        """
        return pulumi.get(self, "ethernet_vlan_id")

    @_builtins.property
    @pulumi.getter(name="ethernetVlanIdVariable")
    def ethernet_vlan_id_variable(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "ethernet_vlan_id_variable")

    @_builtins.property
    @pulumi.getter(name="ipDirectedBroadcast")
    def ip_directed_broadcast(self) -> pulumi.Output[Optional[_builtins.bool]]:
        """
        IP Directed-Broadcast
          - Default value: `false`
        """
        return pulumi.get(self, "ip_directed_broadcast")

    @_builtins.property
    @pulumi.getter(name="ipDirectedBroadcastVariable")
    def ip_directed_broadcast_variable(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "ip_directed_broadcast_variable")

    @_builtins.property
    @pulumi.getter(name="ipMtu")
    def ip_mtu(self) -> pulumi.Output[Optional[_builtins.int]]:
        """
        Interface MTU <576..2000>, in bytes
          - Range: `576`-`2000`
          - Default value: `1500`
        """
        return pulumi.get(self, "ip_mtu")

    @_builtins.property
    @pulumi.getter(name="ipMtuVariable")
    def ip_mtu_variable(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "ip_mtu_variable")

    @_builtins.property
    @pulumi.getter
    def name(self) -> pulumi.Output[_builtins.str]:
        """
        The name of the feature template
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def nat(self) -> pulumi.Output[Optional[_builtins.bool]]:
        """
        Network Address Translation on this interface
          - Default value: `false`
        """
        return pulumi.get(self, "nat")

    @_builtins.property
    @pulumi.getter(name="natBlockIcmpError")
    def nat_block_icmp_error(self) -> pulumi.Output[Optional[_builtins.bool]]:
        """
        Block inbound ICMP error messages
          - Default value: `true`
        """
        return pulumi.get(self, "nat_block_icmp_error")

    @_builtins.property
    @pulumi.getter(name="natBlockIcmpErrorVariable")
    def nat_block_icmp_error_variable(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "nat_block_icmp_error_variable")

    @_builtins.property
    @pulumi.getter(name="natPortForwards")
    def nat_port_forwards(self) -> pulumi.Output[Optional[Sequence['outputs.VpnInterfaceDslPppoeFeatureTemplateNatPortForward']]]:
        """
        Set port-forwarding rules for NAT on this interface
        """
        return pulumi.get(self, "nat_port_forwards")

    @_builtins.property
    @pulumi.getter(name="natRefreshMode")
    def nat_refresh_mode(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        Set NAT refresh mode
          - Choices: `outbound`, `bi-directional`
          - Default value: `outbound`
        """
        return pulumi.get(self, "nat_refresh_mode")

    @_builtins.property
    @pulumi.getter(name="natRefreshModeVariable")
    def nat_refresh_mode_variable(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "nat_refresh_mode_variable")

    @_builtins.property
    @pulumi.getter(name="natResponseToPing")
    def nat_response_to_ping(self) -> pulumi.Output[Optional[_builtins.bool]]:
        """
        Respond to ping requests to NAT interface ip address from the public side
          - Default value: `false`
        """
        return pulumi.get(self, "nat_response_to_ping")

    @_builtins.property
    @pulumi.getter(name="natResponseToPingVariable")
    def nat_response_to_ping_variable(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "nat_response_to_ping_variable")

    @_builtins.property
    @pulumi.getter(name="natTcpTimeout")
    def nat_tcp_timeout(self) -> pulumi.Output[Optional[_builtins.int]]:
        """
        Set NAT TCP session timeout, in minutes
          - Range: `1`-`8947`
          - Default value: `60`
        """
        return pulumi.get(self, "nat_tcp_timeout")

    @_builtins.property
    @pulumi.getter(name="natTcpTimeoutVariable")
    def nat_tcp_timeout_variable(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "nat_tcp_timeout_variable")

    @_builtins.property
    @pulumi.getter(name="natUdpTimeout")
    def nat_udp_timeout(self) -> pulumi.Output[Optional[_builtins.int]]:
        """
        Set NAT UDP session timeout, in minutes
          - Range: `1`-`8947`
          - Default value: `1`
        """
        return pulumi.get(self, "nat_udp_timeout")

    @_builtins.property
    @pulumi.getter(name="natUdpTimeoutVariable")
    def nat_udp_timeout_variable(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "nat_udp_timeout_variable")

    @_builtins.property
    @pulumi.getter(name="papPassword")
    def pap_password(self) -> pulumi.Output[Optional[_builtins.bool]]:
        """
        PAP outbound Password
        """
        return pulumi.get(self, "pap_password")

    @_builtins.property
    @pulumi.getter(name="papPppAuthPassword")
    def pap_ppp_auth_password(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        Specify ppp pap authentication Password
        """
        return pulumi.get(self, "pap_ppp_auth_password")

    @_builtins.property
    @pulumi.getter(name="papPppAuthPasswordVariable")
    def pap_ppp_auth_password_variable(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "pap_ppp_auth_password_variable")

    @_builtins.property
    @pulumi.getter(name="papUsername")
    def pap_username(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        PAP outbound Sent Username
        """
        return pulumi.get(self, "pap_username")

    @_builtins.property
    @pulumi.getter(name="papUsernameVariable")
    def pap_username_variable(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "pap_username_variable")

    @_builtins.property
    @pulumi.getter(name="perTunnelQos")
    def per_tunnel_qos(self) -> pulumi.Output[Optional[_builtins.bool]]:
        """
        Per-tunnel Qos
          - Default value: `false`
        """
        return pulumi.get(self, "per_tunnel_qos")

    @_builtins.property
    @pulumi.getter(name="perTunnelQosAggregator")
    def per_tunnel_qos_aggregator(self) -> pulumi.Output[Optional[_builtins.bool]]:
        """
        Per-tunnel QoS Aggregator
          - Default value: `false`
        """
        return pulumi.get(self, "per_tunnel_qos_aggregator")

    @_builtins.property
    @pulumi.getter(name="perTunnelQosAggregatorVariable")
    def per_tunnel_qos_aggregator_variable(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "per_tunnel_qos_aggregator_variable")

    @_builtins.property
    @pulumi.getter(name="perTunnelQosVariable")
    def per_tunnel_qos_variable(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "per_tunnel_qos_variable")

    @_builtins.property
    @pulumi.getter
    def policers(self) -> pulumi.Output[Optional[Sequence['outputs.VpnInterfaceDslPppoeFeatureTemplatePolicer']]]:
        """
        Enable policer
        """
        return pulumi.get(self, "policers")

    @_builtins.property
    @pulumi.getter(name="pppAuthenticationProtocol")
    def ppp_authentication_protocol(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        PPP Link Authentication Protocol
          - Choices: `chap`, `pap`
        """
        return pulumi.get(self, "ppp_authentication_protocol")

    @_builtins.property
    @pulumi.getter(name="pppAuthenticationProtocolPap")
    def ppp_authentication_protocol_pap(self) -> pulumi.Output[Optional[_builtins.bool]]:
        """
        PPP Authentication Protocol PAP
          - Default value: `false`
        """
        return pulumi.get(self, "ppp_authentication_protocol_pap")

    @_builtins.property
    @pulumi.getter(name="pppAuthenticationProtocolVariable")
    def ppp_authentication_protocol_variable(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "ppp_authentication_protocol_variable")

    @_builtins.property
    @pulumi.getter(name="pppAuthenticationType")
    def ppp_authentication_type(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        Authenticate remote on incoming call only
          - Choices: `callin`, `false`
          - Default value: `callin`
        """
        return pulumi.get(self, "ppp_authentication_type")

    @_builtins.property
    @pulumi.getter(name="qosAdaptiveBandwidthDownstream")
    def qos_adaptive_bandwidth_downstream(self) -> pulumi.Output[Optional[_builtins.int]]:
        """
        Adaptive QoS default downstream bandwidth
          - Range: `8`-`100000000`
        """
        return pulumi.get(self, "qos_adaptive_bandwidth_downstream")

    @_builtins.property
    @pulumi.getter(name="qosAdaptiveBandwidthDownstreamVariable")
    def qos_adaptive_bandwidth_downstream_variable(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "qos_adaptive_bandwidth_downstream_variable")

    @_builtins.property
    @pulumi.getter(name="qosAdaptiveBandwidthUpstream")
    def qos_adaptive_bandwidth_upstream(self) -> pulumi.Output[Optional[_builtins.int]]:
        """
        Adaptive QoS default upstream bandwidth
          - Range: `8`-`100000000`
        """
        return pulumi.get(self, "qos_adaptive_bandwidth_upstream")

    @_builtins.property
    @pulumi.getter(name="qosAdaptiveBandwidthUpstreamVariable")
    def qos_adaptive_bandwidth_upstream_variable(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "qos_adaptive_bandwidth_upstream_variable")

    @_builtins.property
    @pulumi.getter(name="qosAdaptiveMaxDownstream")
    def qos_adaptive_max_downstream(self) -> pulumi.Output[Optional[_builtins.int]]:
        """
        Downstream max bandwidth limit
          - Range: `8`-`100000000`
        """
        return pulumi.get(self, "qos_adaptive_max_downstream")

    @_builtins.property
    @pulumi.getter(name="qosAdaptiveMaxDownstreamVariable")
    def qos_adaptive_max_downstream_variable(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "qos_adaptive_max_downstream_variable")

    @_builtins.property
    @pulumi.getter(name="qosAdaptiveMaxUpstream")
    def qos_adaptive_max_upstream(self) -> pulumi.Output[Optional[_builtins.int]]:
        """
        Upstream max bandwidth limit
          - Range: `8`-`100000000`
        """
        return pulumi.get(self, "qos_adaptive_max_upstream")

    @_builtins.property
    @pulumi.getter(name="qosAdaptiveMaxUpstreamVariable")
    def qos_adaptive_max_upstream_variable(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "qos_adaptive_max_upstream_variable")

    @_builtins.property
    @pulumi.getter(name="qosAdaptiveMinDownstream")
    def qos_adaptive_min_downstream(self) -> pulumi.Output[Optional[_builtins.int]]:
        """
        Downstream min bandwidth limit
          - Range: `8`-`100000000`
        """
        return pulumi.get(self, "qos_adaptive_min_downstream")

    @_builtins.property
    @pulumi.getter(name="qosAdaptiveMinDownstreamVariable")
    def qos_adaptive_min_downstream_variable(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "qos_adaptive_min_downstream_variable")

    @_builtins.property
    @pulumi.getter(name="qosAdaptiveMinUpstream")
    def qos_adaptive_min_upstream(self) -> pulumi.Output[Optional[_builtins.int]]:
        """
        Upstream min bandwidth limit
          - Range: `8`-`100000000`
        """
        return pulumi.get(self, "qos_adaptive_min_upstream")

    @_builtins.property
    @pulumi.getter(name="qosAdaptiveMinUpstreamVariable")
    def qos_adaptive_min_upstream_variable(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "qos_adaptive_min_upstream_variable")

    @_builtins.property
    @pulumi.getter(name="qosAdaptivePeriod")
    def qos_adaptive_period(self) -> pulumi.Output[Optional[_builtins.int]]:
        """
        Periodic timer for adaptive QoS in minutes
          - Range: `1`-`720`
          - Default value: `15`
        """
        return pulumi.get(self, "qos_adaptive_period")

    @_builtins.property
    @pulumi.getter(name="qosAdaptivePeriodVariable")
    def qos_adaptive_period_variable(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "qos_adaptive_period_variable")

    @_builtins.property
    @pulumi.getter(name="qosMap")
    def qos_map(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        Name of QoS map
        """
        return pulumi.get(self, "qos_map")

    @_builtins.property
    @pulumi.getter(name="qosMapVariable")
    def qos_map_variable(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "qos_map_variable")

    @_builtins.property
    @pulumi.getter(name="secondaryRegion")
    def secondary_region(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        Enable secondary region
          - Choices: `off`, `secondary-only`, `secondary-shared`
          - Default value: `off`
        """
        return pulumi.get(self, "secondary_region")

    @_builtins.property
    @pulumi.getter(name="secondaryRegionVariable")
    def secondary_region_variable(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "secondary_region_variable")

    @_builtins.property
    @pulumi.getter(name="shapingRate")
    def shaping_rate(self) -> pulumi.Output[Optional[_builtins.int]]:
        """
        1ge  interfaces: [0..1000000]kbps; 10ge interfaces: [0..10000000]kbps
          - Range: `8`-`100000000`
        """
        return pulumi.get(self, "shaping_rate")

    @_builtins.property
    @pulumi.getter(name="shapingRateVariable")
    def shaping_rate_variable(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "shaping_rate_variable")

    @_builtins.property
    @pulumi.getter
    def shutdown(self) -> pulumi.Output[Optional[_builtins.bool]]:
        """
        Administrative state
          - Default value: `true`
        """
        return pulumi.get(self, "shutdown")

    @_builtins.property
    @pulumi.getter(name="shutdownVariable")
    def shutdown_variable(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "shutdown_variable")

    @_builtins.property
    @pulumi.getter(name="tcpMss")
    def tcp_mss(self) -> pulumi.Output[Optional[_builtins.int]]:
        """
        TCP MSS on SYN packets, in bytes
          - Range: `552`-`1960`
        """
        return pulumi.get(self, "tcp_mss")

    @_builtins.property
    @pulumi.getter(name="tcpMssVariable")
    def tcp_mss_variable(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "tcp_mss_variable")

    @_builtins.property
    @pulumi.getter(name="templateType")
    def template_type(self) -> pulumi.Output[_builtins.str]:
        """
        The template type
        """
        return pulumi.get(self, "template_type")

    @_builtins.property
    @pulumi.getter(name="tlocExtension")
    def tloc_extension(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        Extends a local TLOC to a remote node only for vpn 0
        """
        return pulumi.get(self, "tloc_extension")

    @_builtins.property
    @pulumi.getter(name="tlocExtensionVariable")
    def tloc_extension_variable(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "tloc_extension_variable")

    @_builtins.property
    @pulumi.getter(name="trackerVariable")
    def tracker_variable(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "tracker_variable")

    @_builtins.property
    @pulumi.getter
    def trackers(self) -> pulumi.Output[Optional[Sequence[_builtins.str]]]:
        """
        Enable tracker for this interface
        """
        return pulumi.get(self, "trackers")

    @_builtins.property
    @pulumi.getter(name="tunnelInterfaceAllowAll")
    def tunnel_interface_allow_all(self) -> pulumi.Output[Optional[_builtins.bool]]:
        """
        Allow all traffic. Overrides all other allow-service options if allow-service all is set
          - Default value: `false`
        """
        return pulumi.get(self, "tunnel_interface_allow_all")

    @_builtins.property
    @pulumi.getter(name="tunnelInterfaceAllowAllVariable")
    def tunnel_interface_allow_all_variable(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "tunnel_interface_allow_all_variable")

    @_builtins.property
    @pulumi.getter(name="tunnelInterfaceAllowBgp")
    def tunnel_interface_allow_bgp(self) -> pulumi.Output[Optional[_builtins.bool]]:
        """
        Allow/deny BGP
          - Default value: `false`
        """
        return pulumi.get(self, "tunnel_interface_allow_bgp")

    @_builtins.property
    @pulumi.getter(name="tunnelInterfaceAllowBgpVariable")
    def tunnel_interface_allow_bgp_variable(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "tunnel_interface_allow_bgp_variable")

    @_builtins.property
    @pulumi.getter(name="tunnelInterfaceAllowDhcp")
    def tunnel_interface_allow_dhcp(self) -> pulumi.Output[Optional[_builtins.bool]]:
        """
        Allow/Deny DHCP
          - Default value: `true`
        """
        return pulumi.get(self, "tunnel_interface_allow_dhcp")

    @_builtins.property
    @pulumi.getter(name="tunnelInterfaceAllowDhcpVariable")
    def tunnel_interface_allow_dhcp_variable(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "tunnel_interface_allow_dhcp_variable")

    @_builtins.property
    @pulumi.getter(name="tunnelInterfaceAllowDns")
    def tunnel_interface_allow_dns(self) -> pulumi.Output[Optional[_builtins.bool]]:
        """
        Allow/Deny DNS
          - Default value: `true`
        """
        return pulumi.get(self, "tunnel_interface_allow_dns")

    @_builtins.property
    @pulumi.getter(name="tunnelInterfaceAllowDnsVariable")
    def tunnel_interface_allow_dns_variable(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "tunnel_interface_allow_dns_variable")

    @_builtins.property
    @pulumi.getter(name="tunnelInterfaceAllowHttps")
    def tunnel_interface_allow_https(self) -> pulumi.Output[Optional[_builtins.bool]]:
        """
        Allow/Deny Https
          - Default value: `false`
        """
        return pulumi.get(self, "tunnel_interface_allow_https")

    @_builtins.property
    @pulumi.getter(name="tunnelInterfaceAllowHttpsVariable")
    def tunnel_interface_allow_https_variable(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "tunnel_interface_allow_https_variable")

    @_builtins.property
    @pulumi.getter(name="tunnelInterfaceAllowIcmp")
    def tunnel_interface_allow_icmp(self) -> pulumi.Output[Optional[_builtins.bool]]:
        """
        Allow/Deny ICMP
          - Default value: `true`
        """
        return pulumi.get(self, "tunnel_interface_allow_icmp")

    @_builtins.property
    @pulumi.getter(name="tunnelInterfaceAllowIcmpVariable")
    def tunnel_interface_allow_icmp_variable(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "tunnel_interface_allow_icmp_variable")

    @_builtins.property
    @pulumi.getter(name="tunnelInterfaceAllowNetconf")
    def tunnel_interface_allow_netconf(self) -> pulumi.Output[Optional[_builtins.bool]]:
        """
        Allow/Deny NETCONF
          - Default value: `false`
        """
        return pulumi.get(self, "tunnel_interface_allow_netconf")

    @_builtins.property
    @pulumi.getter(name="tunnelInterfaceAllowNetconfVariable")
    def tunnel_interface_allow_netconf_variable(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "tunnel_interface_allow_netconf_variable")

    @_builtins.property
    @pulumi.getter(name="tunnelInterfaceAllowNtp")
    def tunnel_interface_allow_ntp(self) -> pulumi.Output[Optional[_builtins.bool]]:
        """
        Allow/Deny NTP
          - Default value: `false`
        """
        return pulumi.get(self, "tunnel_interface_allow_ntp")

    @_builtins.property
    @pulumi.getter(name="tunnelInterfaceAllowNtpVariable")
    def tunnel_interface_allow_ntp_variable(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "tunnel_interface_allow_ntp_variable")

    @_builtins.property
    @pulumi.getter(name="tunnelInterfaceAllowOspf")
    def tunnel_interface_allow_ospf(self) -> pulumi.Output[Optional[_builtins.bool]]:
        """
        Allow/Deny OSPF
          - Default value: `false`
        """
        return pulumi.get(self, "tunnel_interface_allow_ospf")

    @_builtins.property
    @pulumi.getter(name="tunnelInterfaceAllowOspfVariable")
    def tunnel_interface_allow_ospf_variable(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "tunnel_interface_allow_ospf_variable")

    @_builtins.property
    @pulumi.getter(name="tunnelInterfaceAllowSnmp")
    def tunnel_interface_allow_snmp(self) -> pulumi.Output[Optional[_builtins.bool]]:
        """
        Allow/Deny SNMP
          - Default value: `false`
        """
        return pulumi.get(self, "tunnel_interface_allow_snmp")

    @_builtins.property
    @pulumi.getter(name="tunnelInterfaceAllowSnmpVariable")
    def tunnel_interface_allow_snmp_variable(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "tunnel_interface_allow_snmp_variable")

    @_builtins.property
    @pulumi.getter(name="tunnelInterfaceAllowSsh")
    def tunnel_interface_allow_ssh(self) -> pulumi.Output[Optional[_builtins.bool]]:
        """
        Allow/Deny SSH
          - Default value: `false`
        """
        return pulumi.get(self, "tunnel_interface_allow_ssh")

    @_builtins.property
    @pulumi.getter(name="tunnelInterfaceAllowSshVariable")
    def tunnel_interface_allow_ssh_variable(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "tunnel_interface_allow_ssh_variable")

    @_builtins.property
    @pulumi.getter(name="tunnelInterfaceAllowStun")
    def tunnel_interface_allow_stun(self) -> pulumi.Output[Optional[_builtins.bool]]:
        """
        Allow/Deny STUN
          - Default value: `false`
        """
        return pulumi.get(self, "tunnel_interface_allow_stun")

    @_builtins.property
    @pulumi.getter(name="tunnelInterfaceAllowStunVariable")
    def tunnel_interface_allow_stun_variable(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "tunnel_interface_allow_stun_variable")

    @_builtins.property
    @pulumi.getter(name="tunnelInterfaceBindLoopbackTunnel")
    def tunnel_interface_bind_loopback_tunnel(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        Bind loopback tunnel interface to a physical interface
        """
        return pulumi.get(self, "tunnel_interface_bind_loopback_tunnel")

    @_builtins.property
    @pulumi.getter(name="tunnelInterfaceBindLoopbackTunnelVariable")
    def tunnel_interface_bind_loopback_tunnel_variable(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "tunnel_interface_bind_loopback_tunnel_variable")

    @_builtins.property
    @pulumi.getter(name="tunnelInterfaceBorder")
    def tunnel_interface_border(self) -> pulumi.Output[Optional[_builtins.bool]]:
        """
        Set TLOC as border TLOC
          - Default value: `false`
        """
        return pulumi.get(self, "tunnel_interface_border")

    @_builtins.property
    @pulumi.getter(name="tunnelInterfaceBorderVariable")
    def tunnel_interface_border_variable(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "tunnel_interface_border_variable")

    @_builtins.property
    @pulumi.getter(name="tunnelInterfaceCarrier")
    def tunnel_interface_carrier(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        Set carrier for TLOC
          - Choices: `default`, `carrier1`, `carrier2`, `carrier3`, `carrier4`, `carrier5`, `carrier6`, `carrier7`, `carrier8`
          - Default value: `default`
        """
        return pulumi.get(self, "tunnel_interface_carrier")

    @_builtins.property
    @pulumi.getter(name="tunnelInterfaceCarrierVariable")
    def tunnel_interface_carrier_variable(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "tunnel_interface_carrier_variable")

    @_builtins.property
    @pulumi.getter(name="tunnelInterfaceClearDontFragment")
    def tunnel_interface_clear_dont_fragment(self) -> pulumi.Output[Optional[_builtins.bool]]:
        """
        Enable clear dont fragment (Currently Only SDWAN Tunnel Interface)
          - Default value: `false`
        """
        return pulumi.get(self, "tunnel_interface_clear_dont_fragment")

    @_builtins.property
    @pulumi.getter(name="tunnelInterfaceClearDontFragmentVariable")
    def tunnel_interface_clear_dont_fragment_variable(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "tunnel_interface_clear_dont_fragment_variable")

    @_builtins.property
    @pulumi.getter(name="tunnelInterfaceColor")
    def tunnel_interface_color(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        Set color for TLOC
          - Choices: `default`, `mpls`, `metro-ethernet`, `biz-internet`, `public-internet`, `lte`, `3g`, `red`, `green`, `blue`, `gold`, `silver`, `bronze`, `custom1`, `custom2`, `custom3`, `private1`, `private2`, `private3`, `private4`, `private5`, `private6`
          - Default value: `default`
        """
        return pulumi.get(self, "tunnel_interface_color")

    @_builtins.property
    @pulumi.getter(name="tunnelInterfaceColorRestrict")
    def tunnel_interface_color_restrict(self) -> pulumi.Output[Optional[_builtins.bool]]:
        """
        Restrict this TLOC behavior
          - Default value: `false`
        """
        return pulumi.get(self, "tunnel_interface_color_restrict")

    @_builtins.property
    @pulumi.getter(name="tunnelInterfaceColorVariable")
    def tunnel_interface_color_variable(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "tunnel_interface_color_variable")

    @_builtins.property
    @pulumi.getter(name="tunnelInterfaceControlConnections")
    def tunnel_interface_control_connections(self) -> pulumi.Output[Optional[_builtins.bool]]:
        """
        Allow Control Connection
          - Default value: `true`
        """
        return pulumi.get(self, "tunnel_interface_control_connections")

    @_builtins.property
    @pulumi.getter(name="tunnelInterfaceControlConnectionsVariable")
    def tunnel_interface_control_connections_variable(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "tunnel_interface_control_connections_variable")

    @_builtins.property
    @pulumi.getter(name="tunnelInterfaceEncapsulations")
    def tunnel_interface_encapsulations(self) -> pulumi.Output[Optional[Sequence['outputs.VpnInterfaceDslPppoeFeatureTemplateTunnelInterfaceEncapsulation']]]:
        """
        Encapsulation for TLOC
        """
        return pulumi.get(self, "tunnel_interface_encapsulations")

    @_builtins.property
    @pulumi.getter(name="tunnelInterfaceExcludeControllerGroupListVariable")
    def tunnel_interface_exclude_controller_group_list_variable(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "tunnel_interface_exclude_controller_group_list_variable")

    @_builtins.property
    @pulumi.getter(name="tunnelInterfaceExcludeControllerGroupLists")
    def tunnel_interface_exclude_controller_group_lists(self) -> pulumi.Output[Optional[Sequence[_builtins.int]]]:
        """
        Exclude the following controller groups defined in this list
        """
        return pulumi.get(self, "tunnel_interface_exclude_controller_group_lists")

    @_builtins.property
    @pulumi.getter(name="tunnelInterfaceGroups")
    def tunnel_interface_groups(self) -> pulumi.Output[Optional[Sequence[_builtins.int]]]:
        """
        List of groups
        """
        return pulumi.get(self, "tunnel_interface_groups")

    @_builtins.property
    @pulumi.getter(name="tunnelInterfaceGroupsVariable")
    def tunnel_interface_groups_variable(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "tunnel_interface_groups_variable")

    @_builtins.property
    @pulumi.getter(name="tunnelInterfaceHelloInterval")
    def tunnel_interface_hello_interval(self) -> pulumi.Output[Optional[_builtins.int]]:
        """
        Set time period of control hello packets <100..600000> milli seconds
          - Range: `100`-`600000`
          - Default value: `1000`
        """
        return pulumi.get(self, "tunnel_interface_hello_interval")

    @_builtins.property
    @pulumi.getter(name="tunnelInterfaceHelloIntervalVariable")
    def tunnel_interface_hello_interval_variable(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "tunnel_interface_hello_interval_variable")

    @_builtins.property
    @pulumi.getter(name="tunnelInterfaceHelloTolerance")
    def tunnel_interface_hello_tolerance(self) -> pulumi.Output[Optional[_builtins.int]]:
        """
        Set tolerance of control hello packets <12..6000> seconds
          - Range: `12`-`6000`
          - Default value: `12`
        """
        return pulumi.get(self, "tunnel_interface_hello_tolerance")

    @_builtins.property
    @pulumi.getter(name="tunnelInterfaceHelloToleranceVariable")
    def tunnel_interface_hello_tolerance_variable(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "tunnel_interface_hello_tolerance_variable")

    @_builtins.property
    @pulumi.getter(name="tunnelInterfaceLastResortCircuit")
    def tunnel_interface_last_resort_circuit(self) -> pulumi.Output[Optional[_builtins.bool]]:
        """
        Set TLOC as last resort
          - Default value: `false`
        """
        return pulumi.get(self, "tunnel_interface_last_resort_circuit")

    @_builtins.property
    @pulumi.getter(name="tunnelInterfaceLastResortCircuitVariable")
    def tunnel_interface_last_resort_circuit_variable(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "tunnel_interface_last_resort_circuit_variable")

    @_builtins.property
    @pulumi.getter(name="tunnelInterfaceLowBandwidthLink")
    def tunnel_interface_low_bandwidth_link(self) -> pulumi.Output[Optional[_builtins.bool]]:
        """
        Set the interface as a low-bandwidth circuit
          - Default value: `false`
        """
        return pulumi.get(self, "tunnel_interface_low_bandwidth_link")

    @_builtins.property
    @pulumi.getter(name="tunnelInterfaceLowBandwidthLinkVariable")
    def tunnel_interface_low_bandwidth_link_variable(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "tunnel_interface_low_bandwidth_link_variable")

    @_builtins.property
    @pulumi.getter(name="tunnelInterfaceMaxControlConnections")
    def tunnel_interface_max_control_connections(self) -> pulumi.Output[Optional[_builtins.int]]:
        """
        Set the maximum number of control connections for this TLOC
          - Range: `0`-`8`
        """
        return pulumi.get(self, "tunnel_interface_max_control_connections")

    @_builtins.property
    @pulumi.getter(name="tunnelInterfaceMaxControlConnectionsVariable")
    def tunnel_interface_max_control_connections_variable(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "tunnel_interface_max_control_connections_variable")

    @_builtins.property
    @pulumi.getter(name="tunnelInterfaceNatRefreshInterval")
    def tunnel_interface_nat_refresh_interval(self) -> pulumi.Output[Optional[_builtins.int]]:
        """
        Set time period of nat refresh packets <1...60> seconds
          - Range: `1`-`60`
          - Default value: `5`
        """
        return pulumi.get(self, "tunnel_interface_nat_refresh_interval")

    @_builtins.property
    @pulumi.getter(name="tunnelInterfaceNatRefreshIntervalVariable")
    def tunnel_interface_nat_refresh_interval_variable(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "tunnel_interface_nat_refresh_interval_variable")

    @_builtins.property
    @pulumi.getter(name="tunnelInterfaceNetworkBroadcast")
    def tunnel_interface_network_broadcast(self) -> pulumi.Output[Optional[_builtins.bool]]:
        """
        Accept and respond to network-prefix-directed broadcasts)
          - Default value: `false`
        """
        return pulumi.get(self, "tunnel_interface_network_broadcast")

    @_builtins.property
    @pulumi.getter(name="tunnelInterfaceNetworkBroadcastVariable")
    def tunnel_interface_network_broadcast_variable(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "tunnel_interface_network_broadcast_variable")

    @_builtins.property
    @pulumi.getter(name="tunnelInterfacePortHop")
    def tunnel_interface_port_hop(self) -> pulumi.Output[Optional[_builtins.bool]]:
        """
        Disallow port hopping on the tunnel interface
          - Default value: `true`
        """
        return pulumi.get(self, "tunnel_interface_port_hop")

    @_builtins.property
    @pulumi.getter(name="tunnelInterfacePortHopVariable")
    def tunnel_interface_port_hop_variable(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "tunnel_interface_port_hop_variable")

    @_builtins.property
    @pulumi.getter(name="tunnelInterfaceTunnelTcpMss")
    def tunnel_interface_tunnel_tcp_mss(self) -> pulumi.Output[Optional[_builtins.int]]:
        """
        Tunnel TCP MSS on SYN packets, in bytes
          - Range: `500`-`1460`
        """
        return pulumi.get(self, "tunnel_interface_tunnel_tcp_mss")

    @_builtins.property
    @pulumi.getter(name="tunnelInterfaceTunnelTcpMssVariable")
    def tunnel_interface_tunnel_tcp_mss_variable(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "tunnel_interface_tunnel_tcp_mss_variable")

    @_builtins.property
    @pulumi.getter(name="tunnelInterfaceVbondAsStunServer")
    def tunnel_interface_vbond_as_stun_server(self) -> pulumi.Output[Optional[_builtins.bool]]:
        """
        Put this wan interface in STUN mode only
          - Default value: `false`
        """
        return pulumi.get(self, "tunnel_interface_vbond_as_stun_server")

    @_builtins.property
    @pulumi.getter(name="tunnelInterfaceVbondAsStunServerVariable")
    def tunnel_interface_vbond_as_stun_server_variable(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "tunnel_interface_vbond_as_stun_server_variable")

    @_builtins.property
    @pulumi.getter(name="tunnelInterfaceVmanageConnectionPreference")
    def tunnel_interface_vmanage_connection_preference(self) -> pulumi.Output[Optional[_builtins.int]]:
        """
        Set interface preference for control connection to vManage <0..8>
          - Range: `0`-`8`
          - Default value: `5`
        """
        return pulumi.get(self, "tunnel_interface_vmanage_connection_preference")

    @_builtins.property
    @pulumi.getter(name="tunnelInterfaceVmanageConnectionPreferenceVariable")
    def tunnel_interface_vmanage_connection_preference_variable(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "tunnel_interface_vmanage_connection_preference_variable")

    @_builtins.property
    @pulumi.getter(name="tunnelQosMode")
    def tunnel_qos_mode(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        Set tunnel QoS mode
          - Choices: `spoke`
        """
        return pulumi.get(self, "tunnel_qos_mode")

    @_builtins.property
    @pulumi.getter(name="tunnelQosModeVariable")
    def tunnel_qos_mode_variable(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "tunnel_qos_mode_variable")

    @_builtins.property
    @pulumi.getter(name="vdslConfigurations")
    def vdsl_configurations(self) -> pulumi.Output[Optional[Sequence['outputs.VpnInterfaceDslPppoeFeatureTemplateVdslConfiguration']]]:
        """
        vdsl
        """
        return pulumi.get(self, "vdsl_configurations")

    @_builtins.property
    @pulumi.getter
    def version(self) -> pulumi.Output[_builtins.int]:
        """
        The version of the feature template
        """
        return pulumi.get(self, "version")

    @_builtins.property
    @pulumi.getter(name="vpnQosMap")
    def vpn_qos_map(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        Name of VPN QoS map
        """
        return pulumi.get(self, "vpn_qos_map")

    @_builtins.property
    @pulumi.getter(name="vpnQosMapVariable")
    def vpn_qos_map_variable(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "vpn_qos_map_variable")

    @_builtins.property
    @pulumi.getter(name="writeRule")
    def write_rule(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        Name of rewrite rule
        """
        return pulumi.get(self, "write_rule")

    @_builtins.property
    @pulumi.getter(name="writeRuleVariable")
    def write_rule_variable(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        Variable name
        """
        return pulumi.get(self, "write_rule_variable")

