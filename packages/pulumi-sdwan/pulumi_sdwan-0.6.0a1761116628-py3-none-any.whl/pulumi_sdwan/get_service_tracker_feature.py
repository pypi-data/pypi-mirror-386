# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities

__all__ = [
    'GetServiceTrackerFeatureResult',
    'AwaitableGetServiceTrackerFeatureResult',
    'get_service_tracker_feature',
    'get_service_tracker_feature_output',
]

@pulumi.output_type
class GetServiceTrackerFeatureResult:
    """
    A collection of values returned by getServiceTrackerFeature.
    """
    def __init__(__self__, description=None, endpoint_api_url=None, endpoint_api_url_variable=None, endpoint_dns_name=None, endpoint_dns_name_variable=None, endpoint_ip=None, endpoint_ip_variable=None, endpoint_tracker_type=None, endpoint_tracker_type_variable=None, feature_profile_id=None, id=None, interval=None, interval_variable=None, multiplier=None, multiplier_variable=None, name=None, port=None, port_variable=None, protocol=None, protocol_variable=None, threshold=None, threshold_variable=None, tracker_name=None, tracker_name_variable=None, tracker_type=None, tracker_type_variable=None, version=None):
        if description and not isinstance(description, str):
            raise TypeError("Expected argument 'description' to be a str")
        pulumi.set(__self__, "description", description)
        if endpoint_api_url and not isinstance(endpoint_api_url, str):
            raise TypeError("Expected argument 'endpoint_api_url' to be a str")
        pulumi.set(__self__, "endpoint_api_url", endpoint_api_url)
        if endpoint_api_url_variable and not isinstance(endpoint_api_url_variable, str):
            raise TypeError("Expected argument 'endpoint_api_url_variable' to be a str")
        pulumi.set(__self__, "endpoint_api_url_variable", endpoint_api_url_variable)
        if endpoint_dns_name and not isinstance(endpoint_dns_name, str):
            raise TypeError("Expected argument 'endpoint_dns_name' to be a str")
        pulumi.set(__self__, "endpoint_dns_name", endpoint_dns_name)
        if endpoint_dns_name_variable and not isinstance(endpoint_dns_name_variable, str):
            raise TypeError("Expected argument 'endpoint_dns_name_variable' to be a str")
        pulumi.set(__self__, "endpoint_dns_name_variable", endpoint_dns_name_variable)
        if endpoint_ip and not isinstance(endpoint_ip, str):
            raise TypeError("Expected argument 'endpoint_ip' to be a str")
        pulumi.set(__self__, "endpoint_ip", endpoint_ip)
        if endpoint_ip_variable and not isinstance(endpoint_ip_variable, str):
            raise TypeError("Expected argument 'endpoint_ip_variable' to be a str")
        pulumi.set(__self__, "endpoint_ip_variable", endpoint_ip_variable)
        if endpoint_tracker_type and not isinstance(endpoint_tracker_type, str):
            raise TypeError("Expected argument 'endpoint_tracker_type' to be a str")
        pulumi.set(__self__, "endpoint_tracker_type", endpoint_tracker_type)
        if endpoint_tracker_type_variable and not isinstance(endpoint_tracker_type_variable, str):
            raise TypeError("Expected argument 'endpoint_tracker_type_variable' to be a str")
        pulumi.set(__self__, "endpoint_tracker_type_variable", endpoint_tracker_type_variable)
        if feature_profile_id and not isinstance(feature_profile_id, str):
            raise TypeError("Expected argument 'feature_profile_id' to be a str")
        pulumi.set(__self__, "feature_profile_id", feature_profile_id)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if interval and not isinstance(interval, int):
            raise TypeError("Expected argument 'interval' to be a int")
        pulumi.set(__self__, "interval", interval)
        if interval_variable and not isinstance(interval_variable, str):
            raise TypeError("Expected argument 'interval_variable' to be a str")
        pulumi.set(__self__, "interval_variable", interval_variable)
        if multiplier and not isinstance(multiplier, int):
            raise TypeError("Expected argument 'multiplier' to be a int")
        pulumi.set(__self__, "multiplier", multiplier)
        if multiplier_variable and not isinstance(multiplier_variable, str):
            raise TypeError("Expected argument 'multiplier_variable' to be a str")
        pulumi.set(__self__, "multiplier_variable", multiplier_variable)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)
        if port and not isinstance(port, int):
            raise TypeError("Expected argument 'port' to be a int")
        pulumi.set(__self__, "port", port)
        if port_variable and not isinstance(port_variable, str):
            raise TypeError("Expected argument 'port_variable' to be a str")
        pulumi.set(__self__, "port_variable", port_variable)
        if protocol and not isinstance(protocol, str):
            raise TypeError("Expected argument 'protocol' to be a str")
        pulumi.set(__self__, "protocol", protocol)
        if protocol_variable and not isinstance(protocol_variable, str):
            raise TypeError("Expected argument 'protocol_variable' to be a str")
        pulumi.set(__self__, "protocol_variable", protocol_variable)
        if threshold and not isinstance(threshold, int):
            raise TypeError("Expected argument 'threshold' to be a int")
        pulumi.set(__self__, "threshold", threshold)
        if threshold_variable and not isinstance(threshold_variable, str):
            raise TypeError("Expected argument 'threshold_variable' to be a str")
        pulumi.set(__self__, "threshold_variable", threshold_variable)
        if tracker_name and not isinstance(tracker_name, str):
            raise TypeError("Expected argument 'tracker_name' to be a str")
        pulumi.set(__self__, "tracker_name", tracker_name)
        if tracker_name_variable and not isinstance(tracker_name_variable, str):
            raise TypeError("Expected argument 'tracker_name_variable' to be a str")
        pulumi.set(__self__, "tracker_name_variable", tracker_name_variable)
        if tracker_type and not isinstance(tracker_type, str):
            raise TypeError("Expected argument 'tracker_type' to be a str")
        pulumi.set(__self__, "tracker_type", tracker_type)
        if tracker_type_variable and not isinstance(tracker_type_variable, str):
            raise TypeError("Expected argument 'tracker_type_variable' to be a str")
        pulumi.set(__self__, "tracker_type_variable", tracker_type_variable)
        if version and not isinstance(version, int):
            raise TypeError("Expected argument 'version' to be a int")
        pulumi.set(__self__, "version", version)

    @_builtins.property
    @pulumi.getter
    def description(self) -> _builtins.str:
        """
        The description of the Feature
        """
        return pulumi.get(self, "description")

    @_builtins.property
    @pulumi.getter(name="endpointApiUrl")
    def endpoint_api_url(self) -> _builtins.str:
        """
        API url of endpoint
        """
        return pulumi.get(self, "endpoint_api_url")

    @_builtins.property
    @pulumi.getter(name="endpointApiUrlVariable")
    def endpoint_api_url_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "endpoint_api_url_variable")

    @_builtins.property
    @pulumi.getter(name="endpointDnsName")
    def endpoint_dns_name(self) -> _builtins.str:
        """
        Endpoint DNS Name
        """
        return pulumi.get(self, "endpoint_dns_name")

    @_builtins.property
    @pulumi.getter(name="endpointDnsNameVariable")
    def endpoint_dns_name_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "endpoint_dns_name_variable")

    @_builtins.property
    @pulumi.getter(name="endpointIp")
    def endpoint_ip(self) -> _builtins.str:
        """
        Endpoint IP
        """
        return pulumi.get(self, "endpoint_ip")

    @_builtins.property
    @pulumi.getter(name="endpointIpVariable")
    def endpoint_ip_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "endpoint_ip_variable")

    @_builtins.property
    @pulumi.getter(name="endpointTrackerType")
    def endpoint_tracker_type(self) -> _builtins.str:
        """
        Endpoint Tracker Type
        """
        return pulumi.get(self, "endpoint_tracker_type")

    @_builtins.property
    @pulumi.getter(name="endpointTrackerTypeVariable")
    def endpoint_tracker_type_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "endpoint_tracker_type_variable")

    @_builtins.property
    @pulumi.getter(name="featureProfileId")
    def feature_profile_id(self) -> _builtins.str:
        """
        Feature Profile ID
        """
        return pulumi.get(self, "feature_profile_id")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        The id of the Feature
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter
    def interval(self) -> _builtins.int:
        """
        Interval
        """
        return pulumi.get(self, "interval")

    @_builtins.property
    @pulumi.getter(name="intervalVariable")
    def interval_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "interval_variable")

    @_builtins.property
    @pulumi.getter
    def multiplier(self) -> _builtins.int:
        """
        Multiplier
        """
        return pulumi.get(self, "multiplier")

    @_builtins.property
    @pulumi.getter(name="multiplierVariable")
    def multiplier_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "multiplier_variable")

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        """
        The name of the Feature
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def port(self) -> _builtins.int:
        return pulumi.get(self, "port")

    @_builtins.property
    @pulumi.getter(name="portVariable")
    def port_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "port_variable")

    @_builtins.property
    @pulumi.getter
    def protocol(self) -> _builtins.str:
        return pulumi.get(self, "protocol")

    @_builtins.property
    @pulumi.getter(name="protocolVariable")
    def protocol_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "protocol_variable")

    @_builtins.property
    @pulumi.getter
    def threshold(self) -> _builtins.int:
        """
        Threshold
        """
        return pulumi.get(self, "threshold")

    @_builtins.property
    @pulumi.getter(name="thresholdVariable")
    def threshold_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "threshold_variable")

    @_builtins.property
    @pulumi.getter(name="trackerName")
    def tracker_name(self) -> _builtins.str:
        """
        Tracker Name
        """
        return pulumi.get(self, "tracker_name")

    @_builtins.property
    @pulumi.getter(name="trackerNameVariable")
    def tracker_name_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "tracker_name_variable")

    @_builtins.property
    @pulumi.getter(name="trackerType")
    def tracker_type(self) -> _builtins.str:
        """
        Tracker Type
        """
        return pulumi.get(self, "tracker_type")

    @_builtins.property
    @pulumi.getter(name="trackerTypeVariable")
    def tracker_type_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "tracker_type_variable")

    @_builtins.property
    @pulumi.getter
    def version(self) -> _builtins.int:
        """
        The version of the Feature
        """
        return pulumi.get(self, "version")


class AwaitableGetServiceTrackerFeatureResult(GetServiceTrackerFeatureResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetServiceTrackerFeatureResult(
            description=self.description,
            endpoint_api_url=self.endpoint_api_url,
            endpoint_api_url_variable=self.endpoint_api_url_variable,
            endpoint_dns_name=self.endpoint_dns_name,
            endpoint_dns_name_variable=self.endpoint_dns_name_variable,
            endpoint_ip=self.endpoint_ip,
            endpoint_ip_variable=self.endpoint_ip_variable,
            endpoint_tracker_type=self.endpoint_tracker_type,
            endpoint_tracker_type_variable=self.endpoint_tracker_type_variable,
            feature_profile_id=self.feature_profile_id,
            id=self.id,
            interval=self.interval,
            interval_variable=self.interval_variable,
            multiplier=self.multiplier,
            multiplier_variable=self.multiplier_variable,
            name=self.name,
            port=self.port,
            port_variable=self.port_variable,
            protocol=self.protocol,
            protocol_variable=self.protocol_variable,
            threshold=self.threshold,
            threshold_variable=self.threshold_variable,
            tracker_name=self.tracker_name,
            tracker_name_variable=self.tracker_name_variable,
            tracker_type=self.tracker_type,
            tracker_type_variable=self.tracker_type_variable,
            version=self.version)


def get_service_tracker_feature(feature_profile_id: Optional[_builtins.str] = None,
                                id: Optional[_builtins.str] = None,
                                opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetServiceTrackerFeatureResult:
    """
    This data source can read the Service Tracker Feature.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_sdwan as sdwan

    example = sdwan.get_service_tracker_feature(id="f6b2c44c-693c-4763-b010-895aa3d236bd",
        feature_profile_id="f6dd22c8-0b4f-496c-9a0b-6813d1f8b8ac")
    ```


    :param _builtins.str feature_profile_id: Feature Profile ID
    :param _builtins.str id: The id of the Feature
    """
    __args__ = dict()
    __args__['featureProfileId'] = feature_profile_id
    __args__['id'] = id
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('sdwan:index/getServiceTrackerFeature:getServiceTrackerFeature', __args__, opts=opts, typ=GetServiceTrackerFeatureResult).value

    return AwaitableGetServiceTrackerFeatureResult(
        description=pulumi.get(__ret__, 'description'),
        endpoint_api_url=pulumi.get(__ret__, 'endpoint_api_url'),
        endpoint_api_url_variable=pulumi.get(__ret__, 'endpoint_api_url_variable'),
        endpoint_dns_name=pulumi.get(__ret__, 'endpoint_dns_name'),
        endpoint_dns_name_variable=pulumi.get(__ret__, 'endpoint_dns_name_variable'),
        endpoint_ip=pulumi.get(__ret__, 'endpoint_ip'),
        endpoint_ip_variable=pulumi.get(__ret__, 'endpoint_ip_variable'),
        endpoint_tracker_type=pulumi.get(__ret__, 'endpoint_tracker_type'),
        endpoint_tracker_type_variable=pulumi.get(__ret__, 'endpoint_tracker_type_variable'),
        feature_profile_id=pulumi.get(__ret__, 'feature_profile_id'),
        id=pulumi.get(__ret__, 'id'),
        interval=pulumi.get(__ret__, 'interval'),
        interval_variable=pulumi.get(__ret__, 'interval_variable'),
        multiplier=pulumi.get(__ret__, 'multiplier'),
        multiplier_variable=pulumi.get(__ret__, 'multiplier_variable'),
        name=pulumi.get(__ret__, 'name'),
        port=pulumi.get(__ret__, 'port'),
        port_variable=pulumi.get(__ret__, 'port_variable'),
        protocol=pulumi.get(__ret__, 'protocol'),
        protocol_variable=pulumi.get(__ret__, 'protocol_variable'),
        threshold=pulumi.get(__ret__, 'threshold'),
        threshold_variable=pulumi.get(__ret__, 'threshold_variable'),
        tracker_name=pulumi.get(__ret__, 'tracker_name'),
        tracker_name_variable=pulumi.get(__ret__, 'tracker_name_variable'),
        tracker_type=pulumi.get(__ret__, 'tracker_type'),
        tracker_type_variable=pulumi.get(__ret__, 'tracker_type_variable'),
        version=pulumi.get(__ret__, 'version'))
def get_service_tracker_feature_output(feature_profile_id: Optional[pulumi.Input[_builtins.str]] = None,
                                       id: Optional[pulumi.Input[_builtins.str]] = None,
                                       opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetServiceTrackerFeatureResult]:
    """
    This data source can read the Service Tracker Feature.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_sdwan as sdwan

    example = sdwan.get_service_tracker_feature(id="f6b2c44c-693c-4763-b010-895aa3d236bd",
        feature_profile_id="f6dd22c8-0b4f-496c-9a0b-6813d1f8b8ac")
    ```


    :param _builtins.str feature_profile_id: Feature Profile ID
    :param _builtins.str id: The id of the Feature
    """
    __args__ = dict()
    __args__['featureProfileId'] = feature_profile_id
    __args__['id'] = id
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('sdwan:index/getServiceTrackerFeature:getServiceTrackerFeature', __args__, opts=opts, typ=GetServiceTrackerFeatureResult)
    return __ret__.apply(lambda __response__: GetServiceTrackerFeatureResult(
        description=pulumi.get(__response__, 'description'),
        endpoint_api_url=pulumi.get(__response__, 'endpoint_api_url'),
        endpoint_api_url_variable=pulumi.get(__response__, 'endpoint_api_url_variable'),
        endpoint_dns_name=pulumi.get(__response__, 'endpoint_dns_name'),
        endpoint_dns_name_variable=pulumi.get(__response__, 'endpoint_dns_name_variable'),
        endpoint_ip=pulumi.get(__response__, 'endpoint_ip'),
        endpoint_ip_variable=pulumi.get(__response__, 'endpoint_ip_variable'),
        endpoint_tracker_type=pulumi.get(__response__, 'endpoint_tracker_type'),
        endpoint_tracker_type_variable=pulumi.get(__response__, 'endpoint_tracker_type_variable'),
        feature_profile_id=pulumi.get(__response__, 'feature_profile_id'),
        id=pulumi.get(__response__, 'id'),
        interval=pulumi.get(__response__, 'interval'),
        interval_variable=pulumi.get(__response__, 'interval_variable'),
        multiplier=pulumi.get(__response__, 'multiplier'),
        multiplier_variable=pulumi.get(__response__, 'multiplier_variable'),
        name=pulumi.get(__response__, 'name'),
        port=pulumi.get(__response__, 'port'),
        port_variable=pulumi.get(__response__, 'port_variable'),
        protocol=pulumi.get(__response__, 'protocol'),
        protocol_variable=pulumi.get(__response__, 'protocol_variable'),
        threshold=pulumi.get(__response__, 'threshold'),
        threshold_variable=pulumi.get(__response__, 'threshold_variable'),
        tracker_name=pulumi.get(__response__, 'tracker_name'),
        tracker_name_variable=pulumi.get(__response__, 'tracker_name_variable'),
        tracker_type=pulumi.get(__response__, 'tracker_type'),
        tracker_type_variable=pulumi.get(__response__, 'tracker_type_variable'),
        version=pulumi.get(__response__, 'version')))
