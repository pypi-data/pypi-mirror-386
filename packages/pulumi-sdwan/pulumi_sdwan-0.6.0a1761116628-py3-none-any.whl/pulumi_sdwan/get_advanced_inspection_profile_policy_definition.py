# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities

__all__ = [
    'GetAdvancedInspectionProfilePolicyDefinitionResult',
    'AwaitableGetAdvancedInspectionProfilePolicyDefinitionResult',
    'get_advanced_inspection_profile_policy_definition',
    'get_advanced_inspection_profile_policy_definition_output',
]

@pulumi.output_type
class GetAdvancedInspectionProfilePolicyDefinitionResult:
    """
    A collection of values returned by getAdvancedInspectionProfilePolicyDefinition.
    """
    def __init__(__self__, advanced_malware_protection_id=None, advanced_malware_protection_version=None, description=None, id=None, intrusion_prevention_id=None, intrusion_prevention_version=None, name=None, tls_action=None, tls_ssl_decryption_id=None, tls_ssl_decryption_version=None, url_filtering_id=None, url_filtering_version=None, version=None):
        if advanced_malware_protection_id and not isinstance(advanced_malware_protection_id, str):
            raise TypeError("Expected argument 'advanced_malware_protection_id' to be a str")
        pulumi.set(__self__, "advanced_malware_protection_id", advanced_malware_protection_id)
        if advanced_malware_protection_version and not isinstance(advanced_malware_protection_version, int):
            raise TypeError("Expected argument 'advanced_malware_protection_version' to be a int")
        pulumi.set(__self__, "advanced_malware_protection_version", advanced_malware_protection_version)
        if description and not isinstance(description, str):
            raise TypeError("Expected argument 'description' to be a str")
        pulumi.set(__self__, "description", description)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if intrusion_prevention_id and not isinstance(intrusion_prevention_id, str):
            raise TypeError("Expected argument 'intrusion_prevention_id' to be a str")
        pulumi.set(__self__, "intrusion_prevention_id", intrusion_prevention_id)
        if intrusion_prevention_version and not isinstance(intrusion_prevention_version, int):
            raise TypeError("Expected argument 'intrusion_prevention_version' to be a int")
        pulumi.set(__self__, "intrusion_prevention_version", intrusion_prevention_version)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)
        if tls_action and not isinstance(tls_action, str):
            raise TypeError("Expected argument 'tls_action' to be a str")
        pulumi.set(__self__, "tls_action", tls_action)
        if tls_ssl_decryption_id and not isinstance(tls_ssl_decryption_id, str):
            raise TypeError("Expected argument 'tls_ssl_decryption_id' to be a str")
        pulumi.set(__self__, "tls_ssl_decryption_id", tls_ssl_decryption_id)
        if tls_ssl_decryption_version and not isinstance(tls_ssl_decryption_version, int):
            raise TypeError("Expected argument 'tls_ssl_decryption_version' to be a int")
        pulumi.set(__self__, "tls_ssl_decryption_version", tls_ssl_decryption_version)
        if url_filtering_id and not isinstance(url_filtering_id, str):
            raise TypeError("Expected argument 'url_filtering_id' to be a str")
        pulumi.set(__self__, "url_filtering_id", url_filtering_id)
        if url_filtering_version and not isinstance(url_filtering_version, int):
            raise TypeError("Expected argument 'url_filtering_version' to be a int")
        pulumi.set(__self__, "url_filtering_version", url_filtering_version)
        if version and not isinstance(version, int):
            raise TypeError("Expected argument 'version' to be a int")
        pulumi.set(__self__, "version", version)

    @_builtins.property
    @pulumi.getter(name="advancedMalwareProtectionId")
    def advanced_malware_protection_id(self) -> _builtins.str:
        """
        Advanced malware protection ID
        """
        return pulumi.get(self, "advanced_malware_protection_id")

    @_builtins.property
    @pulumi.getter(name="advancedMalwareProtectionVersion")
    def advanced_malware_protection_version(self) -> _builtins.int:
        """
        Advanced malware protection version
        """
        return pulumi.get(self, "advanced_malware_protection_version")

    @_builtins.property
    @pulumi.getter
    def description(self) -> _builtins.str:
        """
        The description of the policy definition.
        """
        return pulumi.get(self, "description")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        The id of the object
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter(name="intrusionPreventionId")
    def intrusion_prevention_id(self) -> _builtins.str:
        """
        Intrusion prevention ID (unified mode)
        """
        return pulumi.get(self, "intrusion_prevention_id")

    @_builtins.property
    @pulumi.getter(name="intrusionPreventionVersion")
    def intrusion_prevention_version(self) -> _builtins.int:
        """
        Intrusion prevention version
        """
        return pulumi.get(self, "intrusion_prevention_version")

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        """
        The name of the policy definition.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter(name="tlsAction")
    def tls_action(self) -> _builtins.str:
        """
        TLS Action
        """
        return pulumi.get(self, "tls_action")

    @_builtins.property
    @pulumi.getter(name="tlsSslDecryptionId")
    def tls_ssl_decryption_id(self) -> _builtins.str:
        """
        TLS/SSL decryption ID
        """
        return pulumi.get(self, "tls_ssl_decryption_id")

    @_builtins.property
    @pulumi.getter(name="tlsSslDecryptionVersion")
    def tls_ssl_decryption_version(self) -> _builtins.int:
        """
        TLS/SSL decryption version
        """
        return pulumi.get(self, "tls_ssl_decryption_version")

    @_builtins.property
    @pulumi.getter(name="urlFilteringId")
    def url_filtering_id(self) -> _builtins.str:
        """
        URL filtering ID (unified mode)
        """
        return pulumi.get(self, "url_filtering_id")

    @_builtins.property
    @pulumi.getter(name="urlFilteringVersion")
    def url_filtering_version(self) -> _builtins.int:
        """
        URL filtering version
        """
        return pulumi.get(self, "url_filtering_version")

    @_builtins.property
    @pulumi.getter
    def version(self) -> _builtins.int:
        """
        The version of the object
        """
        return pulumi.get(self, "version")


class AwaitableGetAdvancedInspectionProfilePolicyDefinitionResult(GetAdvancedInspectionProfilePolicyDefinitionResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetAdvancedInspectionProfilePolicyDefinitionResult(
            advanced_malware_protection_id=self.advanced_malware_protection_id,
            advanced_malware_protection_version=self.advanced_malware_protection_version,
            description=self.description,
            id=self.id,
            intrusion_prevention_id=self.intrusion_prevention_id,
            intrusion_prevention_version=self.intrusion_prevention_version,
            name=self.name,
            tls_action=self.tls_action,
            tls_ssl_decryption_id=self.tls_ssl_decryption_id,
            tls_ssl_decryption_version=self.tls_ssl_decryption_version,
            url_filtering_id=self.url_filtering_id,
            url_filtering_version=self.url_filtering_version,
            version=self.version)


def get_advanced_inspection_profile_policy_definition(id: Optional[_builtins.str] = None,
                                                      opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetAdvancedInspectionProfilePolicyDefinitionResult:
    """
    This data source can read the Advanced Inspection Profile Policy Definition .

    ## Example Usage

    ```python
    import pulumi
    import pulumi_sdwan as sdwan

    example = sdwan.get_advanced_inspection_profile_policy_definition(id="f6b2c44c-693c-4763-b010-895aa3d236bd")
    ```


    :param _builtins.str id: The id of the object
    """
    __args__ = dict()
    __args__['id'] = id
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('sdwan:index/getAdvancedInspectionProfilePolicyDefinition:getAdvancedInspectionProfilePolicyDefinition', __args__, opts=opts, typ=GetAdvancedInspectionProfilePolicyDefinitionResult).value

    return AwaitableGetAdvancedInspectionProfilePolicyDefinitionResult(
        advanced_malware_protection_id=pulumi.get(__ret__, 'advanced_malware_protection_id'),
        advanced_malware_protection_version=pulumi.get(__ret__, 'advanced_malware_protection_version'),
        description=pulumi.get(__ret__, 'description'),
        id=pulumi.get(__ret__, 'id'),
        intrusion_prevention_id=pulumi.get(__ret__, 'intrusion_prevention_id'),
        intrusion_prevention_version=pulumi.get(__ret__, 'intrusion_prevention_version'),
        name=pulumi.get(__ret__, 'name'),
        tls_action=pulumi.get(__ret__, 'tls_action'),
        tls_ssl_decryption_id=pulumi.get(__ret__, 'tls_ssl_decryption_id'),
        tls_ssl_decryption_version=pulumi.get(__ret__, 'tls_ssl_decryption_version'),
        url_filtering_id=pulumi.get(__ret__, 'url_filtering_id'),
        url_filtering_version=pulumi.get(__ret__, 'url_filtering_version'),
        version=pulumi.get(__ret__, 'version'))
def get_advanced_inspection_profile_policy_definition_output(id: Optional[pulumi.Input[_builtins.str]] = None,
                                                             opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetAdvancedInspectionProfilePolicyDefinitionResult]:
    """
    This data source can read the Advanced Inspection Profile Policy Definition .

    ## Example Usage

    ```python
    import pulumi
    import pulumi_sdwan as sdwan

    example = sdwan.get_advanced_inspection_profile_policy_definition(id="f6b2c44c-693c-4763-b010-895aa3d236bd")
    ```


    :param _builtins.str id: The id of the object
    """
    __args__ = dict()
    __args__['id'] = id
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('sdwan:index/getAdvancedInspectionProfilePolicyDefinition:getAdvancedInspectionProfilePolicyDefinition', __args__, opts=opts, typ=GetAdvancedInspectionProfilePolicyDefinitionResult)
    return __ret__.apply(lambda __response__: GetAdvancedInspectionProfilePolicyDefinitionResult(
        advanced_malware_protection_id=pulumi.get(__response__, 'advanced_malware_protection_id'),
        advanced_malware_protection_version=pulumi.get(__response__, 'advanced_malware_protection_version'),
        description=pulumi.get(__response__, 'description'),
        id=pulumi.get(__response__, 'id'),
        intrusion_prevention_id=pulumi.get(__response__, 'intrusion_prevention_id'),
        intrusion_prevention_version=pulumi.get(__response__, 'intrusion_prevention_version'),
        name=pulumi.get(__response__, 'name'),
        tls_action=pulumi.get(__response__, 'tls_action'),
        tls_ssl_decryption_id=pulumi.get(__response__, 'tls_ssl_decryption_id'),
        tls_ssl_decryption_version=pulumi.get(__response__, 'tls_ssl_decryption_version'),
        url_filtering_id=pulumi.get(__response__, 'url_filtering_id'),
        url_filtering_version=pulumi.get(__response__, 'url_filtering_version'),
        version=pulumi.get(__response__, 'version')))
