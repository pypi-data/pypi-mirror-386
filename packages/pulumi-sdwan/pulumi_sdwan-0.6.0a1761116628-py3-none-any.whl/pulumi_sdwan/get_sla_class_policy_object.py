# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities

__all__ = [
    'GetSlaClassPolicyObjectResult',
    'AwaitableGetSlaClassPolicyObjectResult',
    'get_sla_class_policy_object',
    'get_sla_class_policy_object_output',
]

@pulumi.output_type
class GetSlaClassPolicyObjectResult:
    """
    A collection of values returned by getSlaClassPolicyObject.
    """
    def __init__(__self__, app_probe_class_id=None, app_probe_class_version=None, fallback_best_tunnel_criteria=None, fallback_best_tunnel_jitter=None, fallback_best_tunnel_latency=None, fallback_best_tunnel_loss=None, id=None, jitter=None, latency=None, loss=None, name=None, version=None):
        if app_probe_class_id and not isinstance(app_probe_class_id, str):
            raise TypeError("Expected argument 'app_probe_class_id' to be a str")
        pulumi.set(__self__, "app_probe_class_id", app_probe_class_id)
        if app_probe_class_version and not isinstance(app_probe_class_version, int):
            raise TypeError("Expected argument 'app_probe_class_version' to be a int")
        pulumi.set(__self__, "app_probe_class_version", app_probe_class_version)
        if fallback_best_tunnel_criteria and not isinstance(fallback_best_tunnel_criteria, str):
            raise TypeError("Expected argument 'fallback_best_tunnel_criteria' to be a str")
        pulumi.set(__self__, "fallback_best_tunnel_criteria", fallback_best_tunnel_criteria)
        if fallback_best_tunnel_jitter and not isinstance(fallback_best_tunnel_jitter, int):
            raise TypeError("Expected argument 'fallback_best_tunnel_jitter' to be a int")
        pulumi.set(__self__, "fallback_best_tunnel_jitter", fallback_best_tunnel_jitter)
        if fallback_best_tunnel_latency and not isinstance(fallback_best_tunnel_latency, int):
            raise TypeError("Expected argument 'fallback_best_tunnel_latency' to be a int")
        pulumi.set(__self__, "fallback_best_tunnel_latency", fallback_best_tunnel_latency)
        if fallback_best_tunnel_loss and not isinstance(fallback_best_tunnel_loss, int):
            raise TypeError("Expected argument 'fallback_best_tunnel_loss' to be a int")
        pulumi.set(__self__, "fallback_best_tunnel_loss", fallback_best_tunnel_loss)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if jitter and not isinstance(jitter, int):
            raise TypeError("Expected argument 'jitter' to be a int")
        pulumi.set(__self__, "jitter", jitter)
        if latency and not isinstance(latency, int):
            raise TypeError("Expected argument 'latency' to be a int")
        pulumi.set(__self__, "latency", latency)
        if loss and not isinstance(loss, int):
            raise TypeError("Expected argument 'loss' to be a int")
        pulumi.set(__self__, "loss", loss)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)
        if version and not isinstance(version, int):
            raise TypeError("Expected argument 'version' to be a int")
        pulumi.set(__self__, "version", version)

    @_builtins.property
    @pulumi.getter(name="appProbeClassId")
    def app_probe_class_id(self) -> _builtins.str:
        """
        App Probe Class Policy Object ID
        """
        return pulumi.get(self, "app_probe_class_id")

    @_builtins.property
    @pulumi.getter(name="appProbeClassVersion")
    def app_probe_class_version(self) -> _builtins.int:
        """
        App Probe Class Policy Object version
        """
        return pulumi.get(self, "app_probe_class_version")

    @_builtins.property
    @pulumi.getter(name="fallbackBestTunnelCriteria")
    def fallback_best_tunnel_criteria(self) -> _builtins.str:
        return pulumi.get(self, "fallback_best_tunnel_criteria")

    @_builtins.property
    @pulumi.getter(name="fallbackBestTunnelJitter")
    def fallback_best_tunnel_jitter(self) -> _builtins.int:
        """
        Jitter variance in ms
        """
        return pulumi.get(self, "fallback_best_tunnel_jitter")

    @_builtins.property
    @pulumi.getter(name="fallbackBestTunnelLatency")
    def fallback_best_tunnel_latency(self) -> _builtins.int:
        """
        Latency variance in ms
        """
        return pulumi.get(self, "fallback_best_tunnel_latency")

    @_builtins.property
    @pulumi.getter(name="fallbackBestTunnelLoss")
    def fallback_best_tunnel_loss(self) -> _builtins.int:
        """
        Loss variance in percent
        """
        return pulumi.get(self, "fallback_best_tunnel_loss")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        The id of the object
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter
    def jitter(self) -> _builtins.int:
        """
        Jitter in ms
        """
        return pulumi.get(self, "jitter")

    @_builtins.property
    @pulumi.getter
    def latency(self) -> _builtins.int:
        """
        Latency in ms
        """
        return pulumi.get(self, "latency")

    @_builtins.property
    @pulumi.getter
    def loss(self) -> _builtins.int:
        """
        Loss in percent
        """
        return pulumi.get(self, "loss")

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        """
        The name of the policy object
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def version(self) -> _builtins.int:
        """
        The version of the object
        """
        return pulumi.get(self, "version")


class AwaitableGetSlaClassPolicyObjectResult(GetSlaClassPolicyObjectResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetSlaClassPolicyObjectResult(
            app_probe_class_id=self.app_probe_class_id,
            app_probe_class_version=self.app_probe_class_version,
            fallback_best_tunnel_criteria=self.fallback_best_tunnel_criteria,
            fallback_best_tunnel_jitter=self.fallback_best_tunnel_jitter,
            fallback_best_tunnel_latency=self.fallback_best_tunnel_latency,
            fallback_best_tunnel_loss=self.fallback_best_tunnel_loss,
            id=self.id,
            jitter=self.jitter,
            latency=self.latency,
            loss=self.loss,
            name=self.name,
            version=self.version)


def get_sla_class_policy_object(id: Optional[_builtins.str] = None,
                                opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetSlaClassPolicyObjectResult:
    """
    This data source can read the SLA Class Policy Object .

    ## Example Usage

    ```python
    import pulumi
    import pulumi_sdwan as sdwan

    example = sdwan.get_sla_class_policy_object(id="f6b2c44c-693c-4763-b010-895aa3d236bd")
    ```


    :param _builtins.str id: The id of the object
    """
    __args__ = dict()
    __args__['id'] = id
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('sdwan:index/getSlaClassPolicyObject:getSlaClassPolicyObject', __args__, opts=opts, typ=GetSlaClassPolicyObjectResult).value

    return AwaitableGetSlaClassPolicyObjectResult(
        app_probe_class_id=pulumi.get(__ret__, 'app_probe_class_id'),
        app_probe_class_version=pulumi.get(__ret__, 'app_probe_class_version'),
        fallback_best_tunnel_criteria=pulumi.get(__ret__, 'fallback_best_tunnel_criteria'),
        fallback_best_tunnel_jitter=pulumi.get(__ret__, 'fallback_best_tunnel_jitter'),
        fallback_best_tunnel_latency=pulumi.get(__ret__, 'fallback_best_tunnel_latency'),
        fallback_best_tunnel_loss=pulumi.get(__ret__, 'fallback_best_tunnel_loss'),
        id=pulumi.get(__ret__, 'id'),
        jitter=pulumi.get(__ret__, 'jitter'),
        latency=pulumi.get(__ret__, 'latency'),
        loss=pulumi.get(__ret__, 'loss'),
        name=pulumi.get(__ret__, 'name'),
        version=pulumi.get(__ret__, 'version'))
def get_sla_class_policy_object_output(id: Optional[pulumi.Input[_builtins.str]] = None,
                                       opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetSlaClassPolicyObjectResult]:
    """
    This data source can read the SLA Class Policy Object .

    ## Example Usage

    ```python
    import pulumi
    import pulumi_sdwan as sdwan

    example = sdwan.get_sla_class_policy_object(id="f6b2c44c-693c-4763-b010-895aa3d236bd")
    ```


    :param _builtins.str id: The id of the object
    """
    __args__ = dict()
    __args__['id'] = id
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('sdwan:index/getSlaClassPolicyObject:getSlaClassPolicyObject', __args__, opts=opts, typ=GetSlaClassPolicyObjectResult)
    return __ret__.apply(lambda __response__: GetSlaClassPolicyObjectResult(
        app_probe_class_id=pulumi.get(__response__, 'app_probe_class_id'),
        app_probe_class_version=pulumi.get(__response__, 'app_probe_class_version'),
        fallback_best_tunnel_criteria=pulumi.get(__response__, 'fallback_best_tunnel_criteria'),
        fallback_best_tunnel_jitter=pulumi.get(__response__, 'fallback_best_tunnel_jitter'),
        fallback_best_tunnel_latency=pulumi.get(__response__, 'fallback_best_tunnel_latency'),
        fallback_best_tunnel_loss=pulumi.get(__response__, 'fallback_best_tunnel_loss'),
        id=pulumi.get(__response__, 'id'),
        jitter=pulumi.get(__response__, 'jitter'),
        latency=pulumi.get(__response__, 'latency'),
        loss=pulumi.get(__response__, 'loss'),
        name=pulumi.get(__response__, 'name'),
        version=pulumi.get(__response__, 'version')))
