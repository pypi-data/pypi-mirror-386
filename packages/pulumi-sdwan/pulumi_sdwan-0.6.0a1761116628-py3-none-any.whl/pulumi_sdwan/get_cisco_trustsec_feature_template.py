# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities
from . import outputs

__all__ = [
    'GetCiscoTrustsecFeatureTemplateResult',
    'AwaitableGetCiscoTrustsecFeatureTemplateResult',
    'get_cisco_trustsec_feature_template',
    'get_cisco_trustsec_feature_template_output',
]

@pulumi.output_type
class GetCiscoTrustsecFeatureTemplateResult:
    """
    A collection of values returned by getCiscoTrustsecFeatureTemplate.
    """
    def __init__(__self__, credentials_id=None, credentials_id_variable=None, credentials_password=None, credentials_password_variable=None, description=None, device_sgt=None, device_sgt_variable=None, device_types=None, enable_enforcement=None, enable_enforcement_variable=None, enable_sxp=None, id=None, maximum_listener_hold_time=None, maximum_listener_hold_time_variable=None, minimum_listener_hold_time=None, minimum_listener_hold_time_variable=None, name=None, speaker_hold_time=None, speaker_hold_time_variable=None, sxp_connections=None, sxp_default_password=None, sxp_default_password_variable=None, sxp_key_chain=None, sxp_key_chain_variable=None, sxp_log_binding_changes=None, sxp_log_binding_changes_variable=None, sxp_node_id=None, sxp_node_id_type=None, sxp_node_id_variable=None, sxp_reconciliation_period=None, sxp_reconciliation_period_variable=None, sxp_retry_period=None, sxp_retry_period_variable=None, sxp_source_ip=None, sxp_source_ip_variable=None, template_type=None, version=None):
        if credentials_id and not isinstance(credentials_id, str):
            raise TypeError("Expected argument 'credentials_id' to be a str")
        pulumi.set(__self__, "credentials_id", credentials_id)
        if credentials_id_variable and not isinstance(credentials_id_variable, str):
            raise TypeError("Expected argument 'credentials_id_variable' to be a str")
        pulumi.set(__self__, "credentials_id_variable", credentials_id_variable)
        if credentials_password and not isinstance(credentials_password, str):
            raise TypeError("Expected argument 'credentials_password' to be a str")
        pulumi.set(__self__, "credentials_password", credentials_password)
        if credentials_password_variable and not isinstance(credentials_password_variable, str):
            raise TypeError("Expected argument 'credentials_password_variable' to be a str")
        pulumi.set(__self__, "credentials_password_variable", credentials_password_variable)
        if description and not isinstance(description, str):
            raise TypeError("Expected argument 'description' to be a str")
        pulumi.set(__self__, "description", description)
        if device_sgt and not isinstance(device_sgt, int):
            raise TypeError("Expected argument 'device_sgt' to be a int")
        pulumi.set(__self__, "device_sgt", device_sgt)
        if device_sgt_variable and not isinstance(device_sgt_variable, str):
            raise TypeError("Expected argument 'device_sgt_variable' to be a str")
        pulumi.set(__self__, "device_sgt_variable", device_sgt_variable)
        if device_types and not isinstance(device_types, list):
            raise TypeError("Expected argument 'device_types' to be a list")
        pulumi.set(__self__, "device_types", device_types)
        if enable_enforcement and not isinstance(enable_enforcement, bool):
            raise TypeError("Expected argument 'enable_enforcement' to be a bool")
        pulumi.set(__self__, "enable_enforcement", enable_enforcement)
        if enable_enforcement_variable and not isinstance(enable_enforcement_variable, str):
            raise TypeError("Expected argument 'enable_enforcement_variable' to be a str")
        pulumi.set(__self__, "enable_enforcement_variable", enable_enforcement_variable)
        if enable_sxp and not isinstance(enable_sxp, bool):
            raise TypeError("Expected argument 'enable_sxp' to be a bool")
        pulumi.set(__self__, "enable_sxp", enable_sxp)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if maximum_listener_hold_time and not isinstance(maximum_listener_hold_time, int):
            raise TypeError("Expected argument 'maximum_listener_hold_time' to be a int")
        pulumi.set(__self__, "maximum_listener_hold_time", maximum_listener_hold_time)
        if maximum_listener_hold_time_variable and not isinstance(maximum_listener_hold_time_variable, str):
            raise TypeError("Expected argument 'maximum_listener_hold_time_variable' to be a str")
        pulumi.set(__self__, "maximum_listener_hold_time_variable", maximum_listener_hold_time_variable)
        if minimum_listener_hold_time and not isinstance(minimum_listener_hold_time, int):
            raise TypeError("Expected argument 'minimum_listener_hold_time' to be a int")
        pulumi.set(__self__, "minimum_listener_hold_time", minimum_listener_hold_time)
        if minimum_listener_hold_time_variable and not isinstance(minimum_listener_hold_time_variable, str):
            raise TypeError("Expected argument 'minimum_listener_hold_time_variable' to be a str")
        pulumi.set(__self__, "minimum_listener_hold_time_variable", minimum_listener_hold_time_variable)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)
        if speaker_hold_time and not isinstance(speaker_hold_time, int):
            raise TypeError("Expected argument 'speaker_hold_time' to be a int")
        pulumi.set(__self__, "speaker_hold_time", speaker_hold_time)
        if speaker_hold_time_variable and not isinstance(speaker_hold_time_variable, str):
            raise TypeError("Expected argument 'speaker_hold_time_variable' to be a str")
        pulumi.set(__self__, "speaker_hold_time_variable", speaker_hold_time_variable)
        if sxp_connections and not isinstance(sxp_connections, list):
            raise TypeError("Expected argument 'sxp_connections' to be a list")
        pulumi.set(__self__, "sxp_connections", sxp_connections)
        if sxp_default_password and not isinstance(sxp_default_password, str):
            raise TypeError("Expected argument 'sxp_default_password' to be a str")
        pulumi.set(__self__, "sxp_default_password", sxp_default_password)
        if sxp_default_password_variable and not isinstance(sxp_default_password_variable, str):
            raise TypeError("Expected argument 'sxp_default_password_variable' to be a str")
        pulumi.set(__self__, "sxp_default_password_variable", sxp_default_password_variable)
        if sxp_key_chain and not isinstance(sxp_key_chain, str):
            raise TypeError("Expected argument 'sxp_key_chain' to be a str")
        pulumi.set(__self__, "sxp_key_chain", sxp_key_chain)
        if sxp_key_chain_variable and not isinstance(sxp_key_chain_variable, str):
            raise TypeError("Expected argument 'sxp_key_chain_variable' to be a str")
        pulumi.set(__self__, "sxp_key_chain_variable", sxp_key_chain_variable)
        if sxp_log_binding_changes and not isinstance(sxp_log_binding_changes, bool):
            raise TypeError("Expected argument 'sxp_log_binding_changes' to be a bool")
        pulumi.set(__self__, "sxp_log_binding_changes", sxp_log_binding_changes)
        if sxp_log_binding_changes_variable and not isinstance(sxp_log_binding_changes_variable, str):
            raise TypeError("Expected argument 'sxp_log_binding_changes_variable' to be a str")
        pulumi.set(__self__, "sxp_log_binding_changes_variable", sxp_log_binding_changes_variable)
        if sxp_node_id and not isinstance(sxp_node_id, str):
            raise TypeError("Expected argument 'sxp_node_id' to be a str")
        pulumi.set(__self__, "sxp_node_id", sxp_node_id)
        if sxp_node_id_type and not isinstance(sxp_node_id_type, str):
            raise TypeError("Expected argument 'sxp_node_id_type' to be a str")
        pulumi.set(__self__, "sxp_node_id_type", sxp_node_id_type)
        if sxp_node_id_variable and not isinstance(sxp_node_id_variable, str):
            raise TypeError("Expected argument 'sxp_node_id_variable' to be a str")
        pulumi.set(__self__, "sxp_node_id_variable", sxp_node_id_variable)
        if sxp_reconciliation_period and not isinstance(sxp_reconciliation_period, int):
            raise TypeError("Expected argument 'sxp_reconciliation_period' to be a int")
        pulumi.set(__self__, "sxp_reconciliation_period", sxp_reconciliation_period)
        if sxp_reconciliation_period_variable and not isinstance(sxp_reconciliation_period_variable, str):
            raise TypeError("Expected argument 'sxp_reconciliation_period_variable' to be a str")
        pulumi.set(__self__, "sxp_reconciliation_period_variable", sxp_reconciliation_period_variable)
        if sxp_retry_period and not isinstance(sxp_retry_period, int):
            raise TypeError("Expected argument 'sxp_retry_period' to be a int")
        pulumi.set(__self__, "sxp_retry_period", sxp_retry_period)
        if sxp_retry_period_variable and not isinstance(sxp_retry_period_variable, str):
            raise TypeError("Expected argument 'sxp_retry_period_variable' to be a str")
        pulumi.set(__self__, "sxp_retry_period_variable", sxp_retry_period_variable)
        if sxp_source_ip and not isinstance(sxp_source_ip, str):
            raise TypeError("Expected argument 'sxp_source_ip' to be a str")
        pulumi.set(__self__, "sxp_source_ip", sxp_source_ip)
        if sxp_source_ip_variable and not isinstance(sxp_source_ip_variable, str):
            raise TypeError("Expected argument 'sxp_source_ip_variable' to be a str")
        pulumi.set(__self__, "sxp_source_ip_variable", sxp_source_ip_variable)
        if template_type and not isinstance(template_type, str):
            raise TypeError("Expected argument 'template_type' to be a str")
        pulumi.set(__self__, "template_type", template_type)
        if version and not isinstance(version, int):
            raise TypeError("Expected argument 'version' to be a int")
        pulumi.set(__self__, "version", version)

    @_builtins.property
    @pulumi.getter(name="credentialsId")
    def credentials_id(self) -> _builtins.str:
        """
        Specify the TrustSec Network Access Device ID, should be same as mentioned in the Identity Services Engine (upto 32 char)
        """
        return pulumi.get(self, "credentials_id")

    @_builtins.property
    @pulumi.getter(name="credentialsIdVariable")
    def credentials_id_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "credentials_id_variable")

    @_builtins.property
    @pulumi.getter(name="credentialsPassword")
    def credentials_password(self) -> _builtins.str:
        """
        Set the password for the device
        """
        return pulumi.get(self, "credentials_password")

    @_builtins.property
    @pulumi.getter(name="credentialsPasswordVariable")
    def credentials_password_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "credentials_password_variable")

    @_builtins.property
    @pulumi.getter
    def description(self) -> _builtins.str:
        """
        The description of the feature template
        """
        return pulumi.get(self, "description")

    @_builtins.property
    @pulumi.getter(name="deviceSgt")
    def device_sgt(self) -> _builtins.int:
        """
        Configure Local device security group \\n\\n
        """
        return pulumi.get(self, "device_sgt")

    @_builtins.property
    @pulumi.getter(name="deviceSgtVariable")
    def device_sgt_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "device_sgt_variable")

    @_builtins.property
    @pulumi.getter(name="deviceTypes")
    def device_types(self) -> Sequence[_builtins.str]:
        """
        List of supported device types
        """
        return pulumi.get(self, "device_types")

    @_builtins.property
    @pulumi.getter(name="enableEnforcement")
    def enable_enforcement(self) -> _builtins.bool:
        """
        Enable Role-based Access Control enforcement
        """
        return pulumi.get(self, "enable_enforcement")

    @_builtins.property
    @pulumi.getter(name="enableEnforcementVariable")
    def enable_enforcement_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "enable_enforcement_variable")

    @_builtins.property
    @pulumi.getter(name="enableSxp")
    def enable_sxp(self) -> _builtins.bool:
        """
        Enable CTS SXP support
        """
        return pulumi.get(self, "enable_sxp")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        The id of the feature template
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter(name="maximumListenerHoldTime")
    def maximum_listener_hold_time(self) -> _builtins.int:
        """
        Configure Maximum allowed hold-time for listener in seconds \\n\\n
        """
        return pulumi.get(self, "maximum_listener_hold_time")

    @_builtins.property
    @pulumi.getter(name="maximumListenerHoldTimeVariable")
    def maximum_listener_hold_time_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "maximum_listener_hold_time_variable")

    @_builtins.property
    @pulumi.getter(name="minimumListenerHoldTime")
    def minimum_listener_hold_time(self) -> _builtins.int:
        """
        Configure Minimum allowed hold-time for listener in seconds \\n\\n
        """
        return pulumi.get(self, "minimum_listener_hold_time")

    @_builtins.property
    @pulumi.getter(name="minimumListenerHoldTimeVariable")
    def minimum_listener_hold_time_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "minimum_listener_hold_time_variable")

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        """
        The name of the feature template
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter(name="speakerHoldTime")
    def speaker_hold_time(self) -> _builtins.int:
        """
        Configure Speaker hold-time in seconds \\n\\n
        """
        return pulumi.get(self, "speaker_hold_time")

    @_builtins.property
    @pulumi.getter(name="speakerHoldTimeVariable")
    def speaker_hold_time_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "speaker_hold_time_variable")

    @_builtins.property
    @pulumi.getter(name="sxpConnections")
    def sxp_connections(self) -> Sequence['outputs.GetCiscoTrustsecFeatureTemplateSxpConnectionResult']:
        """
        Configure SXP Connections
        """
        return pulumi.get(self, "sxp_connections")

    @_builtins.property
    @pulumi.getter(name="sxpDefaultPassword")
    def sxp_default_password(self) -> _builtins.str:
        """
        Configure SXP default password
        """
        return pulumi.get(self, "sxp_default_password")

    @_builtins.property
    @pulumi.getter(name="sxpDefaultPasswordVariable")
    def sxp_default_password_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "sxp_default_password_variable")

    @_builtins.property
    @pulumi.getter(name="sxpKeyChain")
    def sxp_key_chain(self) -> _builtins.str:
        """
        Configure SXP key-chain
        """
        return pulumi.get(self, "sxp_key_chain")

    @_builtins.property
    @pulumi.getter(name="sxpKeyChainVariable")
    def sxp_key_chain_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "sxp_key_chain_variable")

    @_builtins.property
    @pulumi.getter(name="sxpLogBindingChanges")
    def sxp_log_binding_changes(self) -> _builtins.bool:
        """
        Enables logging for IP-to-SGT binding changes
        """
        return pulumi.get(self, "sxp_log_binding_changes")

    @_builtins.property
    @pulumi.getter(name="sxpLogBindingChangesVariable")
    def sxp_log_binding_changes_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "sxp_log_binding_changes_variable")

    @_builtins.property
    @pulumi.getter(name="sxpNodeId")
    def sxp_node_id(self) -> _builtins.str:
        """
        Configure SXP Node ID \\n\\n
        """
        return pulumi.get(self, "sxp_node_id")

    @_builtins.property
    @pulumi.getter(name="sxpNodeIdType")
    def sxp_node_id_type(self) -> _builtins.str:
        """
        Define SXP Node ID type \\n\\n
        """
        return pulumi.get(self, "sxp_node_id_type")

    @_builtins.property
    @pulumi.getter(name="sxpNodeIdVariable")
    def sxp_node_id_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "sxp_node_id_variable")

    @_builtins.property
    @pulumi.getter(name="sxpReconciliationPeriod")
    def sxp_reconciliation_period(self) -> _builtins.int:
        """
        Configure the SXP reconciliation period in seconds \\n\\n
        """
        return pulumi.get(self, "sxp_reconciliation_period")

    @_builtins.property
    @pulumi.getter(name="sxpReconciliationPeriodVariable")
    def sxp_reconciliation_period_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "sxp_reconciliation_period_variable")

    @_builtins.property
    @pulumi.getter(name="sxpRetryPeriod")
    def sxp_retry_period(self) -> _builtins.int:
        """
        Configure Retry period for SXP connection in seconds \\n\\n
        """
        return pulumi.get(self, "sxp_retry_period")

    @_builtins.property
    @pulumi.getter(name="sxpRetryPeriodVariable")
    def sxp_retry_period_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "sxp_retry_period_variable")

    @_builtins.property
    @pulumi.getter(name="sxpSourceIp")
    def sxp_source_ip(self) -> _builtins.str:
        """
        SXP Source IP
        """
        return pulumi.get(self, "sxp_source_ip")

    @_builtins.property
    @pulumi.getter(name="sxpSourceIpVariable")
    def sxp_source_ip_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "sxp_source_ip_variable")

    @_builtins.property
    @pulumi.getter(name="templateType")
    def template_type(self) -> _builtins.str:
        """
        The template type
        """
        return pulumi.get(self, "template_type")

    @_builtins.property
    @pulumi.getter
    def version(self) -> _builtins.int:
        """
        The version of the feature template
        """
        return pulumi.get(self, "version")


class AwaitableGetCiscoTrustsecFeatureTemplateResult(GetCiscoTrustsecFeatureTemplateResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetCiscoTrustsecFeatureTemplateResult(
            credentials_id=self.credentials_id,
            credentials_id_variable=self.credentials_id_variable,
            credentials_password=self.credentials_password,
            credentials_password_variable=self.credentials_password_variable,
            description=self.description,
            device_sgt=self.device_sgt,
            device_sgt_variable=self.device_sgt_variable,
            device_types=self.device_types,
            enable_enforcement=self.enable_enforcement,
            enable_enforcement_variable=self.enable_enforcement_variable,
            enable_sxp=self.enable_sxp,
            id=self.id,
            maximum_listener_hold_time=self.maximum_listener_hold_time,
            maximum_listener_hold_time_variable=self.maximum_listener_hold_time_variable,
            minimum_listener_hold_time=self.minimum_listener_hold_time,
            minimum_listener_hold_time_variable=self.minimum_listener_hold_time_variable,
            name=self.name,
            speaker_hold_time=self.speaker_hold_time,
            speaker_hold_time_variable=self.speaker_hold_time_variable,
            sxp_connections=self.sxp_connections,
            sxp_default_password=self.sxp_default_password,
            sxp_default_password_variable=self.sxp_default_password_variable,
            sxp_key_chain=self.sxp_key_chain,
            sxp_key_chain_variable=self.sxp_key_chain_variable,
            sxp_log_binding_changes=self.sxp_log_binding_changes,
            sxp_log_binding_changes_variable=self.sxp_log_binding_changes_variable,
            sxp_node_id=self.sxp_node_id,
            sxp_node_id_type=self.sxp_node_id_type,
            sxp_node_id_variable=self.sxp_node_id_variable,
            sxp_reconciliation_period=self.sxp_reconciliation_period,
            sxp_reconciliation_period_variable=self.sxp_reconciliation_period_variable,
            sxp_retry_period=self.sxp_retry_period,
            sxp_retry_period_variable=self.sxp_retry_period_variable,
            sxp_source_ip=self.sxp_source_ip,
            sxp_source_ip_variable=self.sxp_source_ip_variable,
            template_type=self.template_type,
            version=self.version)


def get_cisco_trustsec_feature_template(id: Optional[_builtins.str] = None,
                                        name: Optional[_builtins.str] = None,
                                        opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetCiscoTrustsecFeatureTemplateResult:
    """
    This data source can read the Cisco TrustSec feature template.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_sdwan as sdwan

    example = sdwan.get_cisco_trustsec_feature_template(id="f6b2c44c-693c-4763-b010-895aa3d236bd")
    ```


    :param _builtins.str id: The id of the feature template
    :param _builtins.str name: The name of the feature template
    """
    __args__ = dict()
    __args__['id'] = id
    __args__['name'] = name
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('sdwan:index/getCiscoTrustsecFeatureTemplate:getCiscoTrustsecFeatureTemplate', __args__, opts=opts, typ=GetCiscoTrustsecFeatureTemplateResult).value

    return AwaitableGetCiscoTrustsecFeatureTemplateResult(
        credentials_id=pulumi.get(__ret__, 'credentials_id'),
        credentials_id_variable=pulumi.get(__ret__, 'credentials_id_variable'),
        credentials_password=pulumi.get(__ret__, 'credentials_password'),
        credentials_password_variable=pulumi.get(__ret__, 'credentials_password_variable'),
        description=pulumi.get(__ret__, 'description'),
        device_sgt=pulumi.get(__ret__, 'device_sgt'),
        device_sgt_variable=pulumi.get(__ret__, 'device_sgt_variable'),
        device_types=pulumi.get(__ret__, 'device_types'),
        enable_enforcement=pulumi.get(__ret__, 'enable_enforcement'),
        enable_enforcement_variable=pulumi.get(__ret__, 'enable_enforcement_variable'),
        enable_sxp=pulumi.get(__ret__, 'enable_sxp'),
        id=pulumi.get(__ret__, 'id'),
        maximum_listener_hold_time=pulumi.get(__ret__, 'maximum_listener_hold_time'),
        maximum_listener_hold_time_variable=pulumi.get(__ret__, 'maximum_listener_hold_time_variable'),
        minimum_listener_hold_time=pulumi.get(__ret__, 'minimum_listener_hold_time'),
        minimum_listener_hold_time_variable=pulumi.get(__ret__, 'minimum_listener_hold_time_variable'),
        name=pulumi.get(__ret__, 'name'),
        speaker_hold_time=pulumi.get(__ret__, 'speaker_hold_time'),
        speaker_hold_time_variable=pulumi.get(__ret__, 'speaker_hold_time_variable'),
        sxp_connections=pulumi.get(__ret__, 'sxp_connections'),
        sxp_default_password=pulumi.get(__ret__, 'sxp_default_password'),
        sxp_default_password_variable=pulumi.get(__ret__, 'sxp_default_password_variable'),
        sxp_key_chain=pulumi.get(__ret__, 'sxp_key_chain'),
        sxp_key_chain_variable=pulumi.get(__ret__, 'sxp_key_chain_variable'),
        sxp_log_binding_changes=pulumi.get(__ret__, 'sxp_log_binding_changes'),
        sxp_log_binding_changes_variable=pulumi.get(__ret__, 'sxp_log_binding_changes_variable'),
        sxp_node_id=pulumi.get(__ret__, 'sxp_node_id'),
        sxp_node_id_type=pulumi.get(__ret__, 'sxp_node_id_type'),
        sxp_node_id_variable=pulumi.get(__ret__, 'sxp_node_id_variable'),
        sxp_reconciliation_period=pulumi.get(__ret__, 'sxp_reconciliation_period'),
        sxp_reconciliation_period_variable=pulumi.get(__ret__, 'sxp_reconciliation_period_variable'),
        sxp_retry_period=pulumi.get(__ret__, 'sxp_retry_period'),
        sxp_retry_period_variable=pulumi.get(__ret__, 'sxp_retry_period_variable'),
        sxp_source_ip=pulumi.get(__ret__, 'sxp_source_ip'),
        sxp_source_ip_variable=pulumi.get(__ret__, 'sxp_source_ip_variable'),
        template_type=pulumi.get(__ret__, 'template_type'),
        version=pulumi.get(__ret__, 'version'))
def get_cisco_trustsec_feature_template_output(id: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                               name: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                               opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetCiscoTrustsecFeatureTemplateResult]:
    """
    This data source can read the Cisco TrustSec feature template.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_sdwan as sdwan

    example = sdwan.get_cisco_trustsec_feature_template(id="f6b2c44c-693c-4763-b010-895aa3d236bd")
    ```


    :param _builtins.str id: The id of the feature template
    :param _builtins.str name: The name of the feature template
    """
    __args__ = dict()
    __args__['id'] = id
    __args__['name'] = name
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('sdwan:index/getCiscoTrustsecFeatureTemplate:getCiscoTrustsecFeatureTemplate', __args__, opts=opts, typ=GetCiscoTrustsecFeatureTemplateResult)
    return __ret__.apply(lambda __response__: GetCiscoTrustsecFeatureTemplateResult(
        credentials_id=pulumi.get(__response__, 'credentials_id'),
        credentials_id_variable=pulumi.get(__response__, 'credentials_id_variable'),
        credentials_password=pulumi.get(__response__, 'credentials_password'),
        credentials_password_variable=pulumi.get(__response__, 'credentials_password_variable'),
        description=pulumi.get(__response__, 'description'),
        device_sgt=pulumi.get(__response__, 'device_sgt'),
        device_sgt_variable=pulumi.get(__response__, 'device_sgt_variable'),
        device_types=pulumi.get(__response__, 'device_types'),
        enable_enforcement=pulumi.get(__response__, 'enable_enforcement'),
        enable_enforcement_variable=pulumi.get(__response__, 'enable_enforcement_variable'),
        enable_sxp=pulumi.get(__response__, 'enable_sxp'),
        id=pulumi.get(__response__, 'id'),
        maximum_listener_hold_time=pulumi.get(__response__, 'maximum_listener_hold_time'),
        maximum_listener_hold_time_variable=pulumi.get(__response__, 'maximum_listener_hold_time_variable'),
        minimum_listener_hold_time=pulumi.get(__response__, 'minimum_listener_hold_time'),
        minimum_listener_hold_time_variable=pulumi.get(__response__, 'minimum_listener_hold_time_variable'),
        name=pulumi.get(__response__, 'name'),
        speaker_hold_time=pulumi.get(__response__, 'speaker_hold_time'),
        speaker_hold_time_variable=pulumi.get(__response__, 'speaker_hold_time_variable'),
        sxp_connections=pulumi.get(__response__, 'sxp_connections'),
        sxp_default_password=pulumi.get(__response__, 'sxp_default_password'),
        sxp_default_password_variable=pulumi.get(__response__, 'sxp_default_password_variable'),
        sxp_key_chain=pulumi.get(__response__, 'sxp_key_chain'),
        sxp_key_chain_variable=pulumi.get(__response__, 'sxp_key_chain_variable'),
        sxp_log_binding_changes=pulumi.get(__response__, 'sxp_log_binding_changes'),
        sxp_log_binding_changes_variable=pulumi.get(__response__, 'sxp_log_binding_changes_variable'),
        sxp_node_id=pulumi.get(__response__, 'sxp_node_id'),
        sxp_node_id_type=pulumi.get(__response__, 'sxp_node_id_type'),
        sxp_node_id_variable=pulumi.get(__response__, 'sxp_node_id_variable'),
        sxp_reconciliation_period=pulumi.get(__response__, 'sxp_reconciliation_period'),
        sxp_reconciliation_period_variable=pulumi.get(__response__, 'sxp_reconciliation_period_variable'),
        sxp_retry_period=pulumi.get(__response__, 'sxp_retry_period'),
        sxp_retry_period_variable=pulumi.get(__response__, 'sxp_retry_period_variable'),
        sxp_source_ip=pulumi.get(__response__, 'sxp_source_ip'),
        sxp_source_ip_variable=pulumi.get(__response__, 'sxp_source_ip_variable'),
        template_type=pulumi.get(__response__, 'template_type'),
        version=pulumi.get(__response__, 'version')))
