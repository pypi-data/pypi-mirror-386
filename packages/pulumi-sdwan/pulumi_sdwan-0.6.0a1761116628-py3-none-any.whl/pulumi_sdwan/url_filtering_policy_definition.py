# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities
from . import outputs
from ._inputs import *

__all__ = ['UrlFilteringPolicyDefinitionArgs', 'UrlFilteringPolicyDefinition']

@pulumi.input_type
class UrlFilteringPolicyDefinitionArgs:
    def __init__(__self__, *,
                 description: pulumi.Input[_builtins.str],
                 alerts: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 allow_url_list_id: Optional[pulumi.Input[_builtins.str]] = None,
                 allow_url_list_version: Optional[pulumi.Input[_builtins.int]] = None,
                 block_page_action: Optional[pulumi.Input[_builtins.str]] = None,
                 block_page_contents: Optional[pulumi.Input[_builtins.str]] = None,
                 block_url_list_id: Optional[pulumi.Input[_builtins.str]] = None,
                 block_url_list_version: Optional[pulumi.Input[_builtins.int]] = None,
                 loggings: Optional[pulumi.Input[Sequence[pulumi.Input['UrlFilteringPolicyDefinitionLoggingArgs']]]] = None,
                 mode: Optional[pulumi.Input[_builtins.str]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 target_vpns: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 web_categories: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 web_categories_action: Optional[pulumi.Input[_builtins.str]] = None,
                 web_reputation: Optional[pulumi.Input[_builtins.str]] = None):
        """
        The set of arguments for constructing a UrlFilteringPolicyDefinition resource.
        :param pulumi.Input[_builtins.str] description: The description of the policy definition.
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] alerts: List of alerts options that will be exported as syslog messages
        :param pulumi.Input[_builtins.str] allow_url_list_id: Allow URL list ID
        :param pulumi.Input[_builtins.int] allow_url_list_version: Allow URL list version
        :param pulumi.Input[_builtins.str] block_page_action: Redirect to a URL or display a message when a blocked page is accessed.
                 - Choices: `text`, `redirectUrl`
        :param pulumi.Input[_builtins.str] block_page_contents: The message displayed or URL redirected to when a blocked page is accessed.
        :param pulumi.Input[_builtins.str] block_url_list_id: Block URL list ID
        :param pulumi.Input[_builtins.int] block_url_list_version: Block URL list version
        :param pulumi.Input[_builtins.str] mode: The policy mode
                 - Choices: `security`, `unified`
        :param pulumi.Input[_builtins.str] name: The name of the policy definition.
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] target_vpns: List of VPN IDs
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] web_categories: List of categories to block or allow
        :param pulumi.Input[_builtins.str] web_categories_action: whether the selected web categories should be blocked or allowed.
                 - Choices: `block`, `allow`
        :param pulumi.Input[_builtins.str] web_reputation: The web reputation of the policy definition
                 - Choices: `high-risk`, `suspicious`, `moderate-risk`, `low-risk`, `trustworthy`
        """
        pulumi.set(__self__, "description", description)
        if alerts is not None:
            pulumi.set(__self__, "alerts", alerts)
        if allow_url_list_id is not None:
            pulumi.set(__self__, "allow_url_list_id", allow_url_list_id)
        if allow_url_list_version is not None:
            pulumi.set(__self__, "allow_url_list_version", allow_url_list_version)
        if block_page_action is not None:
            pulumi.set(__self__, "block_page_action", block_page_action)
        if block_page_contents is not None:
            pulumi.set(__self__, "block_page_contents", block_page_contents)
        if block_url_list_id is not None:
            pulumi.set(__self__, "block_url_list_id", block_url_list_id)
        if block_url_list_version is not None:
            pulumi.set(__self__, "block_url_list_version", block_url_list_version)
        if loggings is not None:
            pulumi.set(__self__, "loggings", loggings)
        if mode is not None:
            pulumi.set(__self__, "mode", mode)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if target_vpns is not None:
            pulumi.set(__self__, "target_vpns", target_vpns)
        if web_categories is not None:
            pulumi.set(__self__, "web_categories", web_categories)
        if web_categories_action is not None:
            pulumi.set(__self__, "web_categories_action", web_categories_action)
        if web_reputation is not None:
            pulumi.set(__self__, "web_reputation", web_reputation)

    @_builtins.property
    @pulumi.getter
    def description(self) -> pulumi.Input[_builtins.str]:
        """
        The description of the policy definition.
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "description", value)

    @_builtins.property
    @pulumi.getter
    def alerts(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]:
        """
        List of alerts options that will be exported as syslog messages
        """
        return pulumi.get(self, "alerts")

    @alerts.setter
    def alerts(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "alerts", value)

    @_builtins.property
    @pulumi.getter(name="allowUrlListId")
    def allow_url_list_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Allow URL list ID
        """
        return pulumi.get(self, "allow_url_list_id")

    @allow_url_list_id.setter
    def allow_url_list_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "allow_url_list_id", value)

    @_builtins.property
    @pulumi.getter(name="allowUrlListVersion")
    def allow_url_list_version(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        Allow URL list version
        """
        return pulumi.get(self, "allow_url_list_version")

    @allow_url_list_version.setter
    def allow_url_list_version(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "allow_url_list_version", value)

    @_builtins.property
    @pulumi.getter(name="blockPageAction")
    def block_page_action(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Redirect to a URL or display a message when a blocked page is accessed.
          - Choices: `text`, `redirectUrl`
        """
        return pulumi.get(self, "block_page_action")

    @block_page_action.setter
    def block_page_action(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "block_page_action", value)

    @_builtins.property
    @pulumi.getter(name="blockPageContents")
    def block_page_contents(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The message displayed or URL redirected to when a blocked page is accessed.
        """
        return pulumi.get(self, "block_page_contents")

    @block_page_contents.setter
    def block_page_contents(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "block_page_contents", value)

    @_builtins.property
    @pulumi.getter(name="blockUrlListId")
    def block_url_list_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Block URL list ID
        """
        return pulumi.get(self, "block_url_list_id")

    @block_url_list_id.setter
    def block_url_list_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "block_url_list_id", value)

    @_builtins.property
    @pulumi.getter(name="blockUrlListVersion")
    def block_url_list_version(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        Block URL list version
        """
        return pulumi.get(self, "block_url_list_version")

    @block_url_list_version.setter
    def block_url_list_version(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "block_url_list_version", value)

    @_builtins.property
    @pulumi.getter
    def loggings(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['UrlFilteringPolicyDefinitionLoggingArgs']]]]:
        return pulumi.get(self, "loggings")

    @loggings.setter
    def loggings(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['UrlFilteringPolicyDefinitionLoggingArgs']]]]):
        pulumi.set(self, "loggings", value)

    @_builtins.property
    @pulumi.getter
    def mode(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The policy mode
          - Choices: `security`, `unified`
        """
        return pulumi.get(self, "mode")

    @mode.setter
    def mode(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "mode", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The name of the policy definition.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "name", value)

    @_builtins.property
    @pulumi.getter(name="targetVpns")
    def target_vpns(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]:
        """
        List of VPN IDs
        """
        return pulumi.get(self, "target_vpns")

    @target_vpns.setter
    def target_vpns(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "target_vpns", value)

    @_builtins.property
    @pulumi.getter(name="webCategories")
    def web_categories(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]:
        """
        List of categories to block or allow
        """
        return pulumi.get(self, "web_categories")

    @web_categories.setter
    def web_categories(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "web_categories", value)

    @_builtins.property
    @pulumi.getter(name="webCategoriesAction")
    def web_categories_action(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        whether the selected web categories should be blocked or allowed.
          - Choices: `block`, `allow`
        """
        return pulumi.get(self, "web_categories_action")

    @web_categories_action.setter
    def web_categories_action(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "web_categories_action", value)

    @_builtins.property
    @pulumi.getter(name="webReputation")
    def web_reputation(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The web reputation of the policy definition
          - Choices: `high-risk`, `suspicious`, `moderate-risk`, `low-risk`, `trustworthy`
        """
        return pulumi.get(self, "web_reputation")

    @web_reputation.setter
    def web_reputation(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "web_reputation", value)


@pulumi.input_type
class _UrlFilteringPolicyDefinitionState:
    def __init__(__self__, *,
                 alerts: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 allow_url_list_id: Optional[pulumi.Input[_builtins.str]] = None,
                 allow_url_list_version: Optional[pulumi.Input[_builtins.int]] = None,
                 block_page_action: Optional[pulumi.Input[_builtins.str]] = None,
                 block_page_contents: Optional[pulumi.Input[_builtins.str]] = None,
                 block_url_list_id: Optional[pulumi.Input[_builtins.str]] = None,
                 block_url_list_version: Optional[pulumi.Input[_builtins.int]] = None,
                 description: Optional[pulumi.Input[_builtins.str]] = None,
                 loggings: Optional[pulumi.Input[Sequence[pulumi.Input['UrlFilteringPolicyDefinitionLoggingArgs']]]] = None,
                 mode: Optional[pulumi.Input[_builtins.str]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 target_vpns: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 version: Optional[pulumi.Input[_builtins.int]] = None,
                 web_categories: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 web_categories_action: Optional[pulumi.Input[_builtins.str]] = None,
                 web_reputation: Optional[pulumi.Input[_builtins.str]] = None):
        """
        Input properties used for looking up and filtering UrlFilteringPolicyDefinition resources.
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] alerts: List of alerts options that will be exported as syslog messages
        :param pulumi.Input[_builtins.str] allow_url_list_id: Allow URL list ID
        :param pulumi.Input[_builtins.int] allow_url_list_version: Allow URL list version
        :param pulumi.Input[_builtins.str] block_page_action: Redirect to a URL or display a message when a blocked page is accessed.
                 - Choices: `text`, `redirectUrl`
        :param pulumi.Input[_builtins.str] block_page_contents: The message displayed or URL redirected to when a blocked page is accessed.
        :param pulumi.Input[_builtins.str] block_url_list_id: Block URL list ID
        :param pulumi.Input[_builtins.int] block_url_list_version: Block URL list version
        :param pulumi.Input[_builtins.str] description: The description of the policy definition.
        :param pulumi.Input[_builtins.str] mode: The policy mode
                 - Choices: `security`, `unified`
        :param pulumi.Input[_builtins.str] name: The name of the policy definition.
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] target_vpns: List of VPN IDs
        :param pulumi.Input[_builtins.int] version: The version of the object
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] web_categories: List of categories to block or allow
        :param pulumi.Input[_builtins.str] web_categories_action: whether the selected web categories should be blocked or allowed.
                 - Choices: `block`, `allow`
        :param pulumi.Input[_builtins.str] web_reputation: The web reputation of the policy definition
                 - Choices: `high-risk`, `suspicious`, `moderate-risk`, `low-risk`, `trustworthy`
        """
        if alerts is not None:
            pulumi.set(__self__, "alerts", alerts)
        if allow_url_list_id is not None:
            pulumi.set(__self__, "allow_url_list_id", allow_url_list_id)
        if allow_url_list_version is not None:
            pulumi.set(__self__, "allow_url_list_version", allow_url_list_version)
        if block_page_action is not None:
            pulumi.set(__self__, "block_page_action", block_page_action)
        if block_page_contents is not None:
            pulumi.set(__self__, "block_page_contents", block_page_contents)
        if block_url_list_id is not None:
            pulumi.set(__self__, "block_url_list_id", block_url_list_id)
        if block_url_list_version is not None:
            pulumi.set(__self__, "block_url_list_version", block_url_list_version)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if loggings is not None:
            pulumi.set(__self__, "loggings", loggings)
        if mode is not None:
            pulumi.set(__self__, "mode", mode)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if target_vpns is not None:
            pulumi.set(__self__, "target_vpns", target_vpns)
        if version is not None:
            pulumi.set(__self__, "version", version)
        if web_categories is not None:
            pulumi.set(__self__, "web_categories", web_categories)
        if web_categories_action is not None:
            pulumi.set(__self__, "web_categories_action", web_categories_action)
        if web_reputation is not None:
            pulumi.set(__self__, "web_reputation", web_reputation)

    @_builtins.property
    @pulumi.getter
    def alerts(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]:
        """
        List of alerts options that will be exported as syslog messages
        """
        return pulumi.get(self, "alerts")

    @alerts.setter
    def alerts(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "alerts", value)

    @_builtins.property
    @pulumi.getter(name="allowUrlListId")
    def allow_url_list_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Allow URL list ID
        """
        return pulumi.get(self, "allow_url_list_id")

    @allow_url_list_id.setter
    def allow_url_list_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "allow_url_list_id", value)

    @_builtins.property
    @pulumi.getter(name="allowUrlListVersion")
    def allow_url_list_version(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        Allow URL list version
        """
        return pulumi.get(self, "allow_url_list_version")

    @allow_url_list_version.setter
    def allow_url_list_version(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "allow_url_list_version", value)

    @_builtins.property
    @pulumi.getter(name="blockPageAction")
    def block_page_action(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Redirect to a URL or display a message when a blocked page is accessed.
          - Choices: `text`, `redirectUrl`
        """
        return pulumi.get(self, "block_page_action")

    @block_page_action.setter
    def block_page_action(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "block_page_action", value)

    @_builtins.property
    @pulumi.getter(name="blockPageContents")
    def block_page_contents(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The message displayed or URL redirected to when a blocked page is accessed.
        """
        return pulumi.get(self, "block_page_contents")

    @block_page_contents.setter
    def block_page_contents(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "block_page_contents", value)

    @_builtins.property
    @pulumi.getter(name="blockUrlListId")
    def block_url_list_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Block URL list ID
        """
        return pulumi.get(self, "block_url_list_id")

    @block_url_list_id.setter
    def block_url_list_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "block_url_list_id", value)

    @_builtins.property
    @pulumi.getter(name="blockUrlListVersion")
    def block_url_list_version(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        Block URL list version
        """
        return pulumi.get(self, "block_url_list_version")

    @block_url_list_version.setter
    def block_url_list_version(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "block_url_list_version", value)

    @_builtins.property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The description of the policy definition.
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "description", value)

    @_builtins.property
    @pulumi.getter
    def loggings(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['UrlFilteringPolicyDefinitionLoggingArgs']]]]:
        return pulumi.get(self, "loggings")

    @loggings.setter
    def loggings(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['UrlFilteringPolicyDefinitionLoggingArgs']]]]):
        pulumi.set(self, "loggings", value)

    @_builtins.property
    @pulumi.getter
    def mode(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The policy mode
          - Choices: `security`, `unified`
        """
        return pulumi.get(self, "mode")

    @mode.setter
    def mode(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "mode", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The name of the policy definition.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "name", value)

    @_builtins.property
    @pulumi.getter(name="targetVpns")
    def target_vpns(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]:
        """
        List of VPN IDs
        """
        return pulumi.get(self, "target_vpns")

    @target_vpns.setter
    def target_vpns(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "target_vpns", value)

    @_builtins.property
    @pulumi.getter
    def version(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        The version of the object
        """
        return pulumi.get(self, "version")

    @version.setter
    def version(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "version", value)

    @_builtins.property
    @pulumi.getter(name="webCategories")
    def web_categories(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]:
        """
        List of categories to block or allow
        """
        return pulumi.get(self, "web_categories")

    @web_categories.setter
    def web_categories(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "web_categories", value)

    @_builtins.property
    @pulumi.getter(name="webCategoriesAction")
    def web_categories_action(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        whether the selected web categories should be blocked or allowed.
          - Choices: `block`, `allow`
        """
        return pulumi.get(self, "web_categories_action")

    @web_categories_action.setter
    def web_categories_action(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "web_categories_action", value)

    @_builtins.property
    @pulumi.getter(name="webReputation")
    def web_reputation(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The web reputation of the policy definition
          - Choices: `high-risk`, `suspicious`, `moderate-risk`, `low-risk`, `trustworthy`
        """
        return pulumi.get(self, "web_reputation")

    @web_reputation.setter
    def web_reputation(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "web_reputation", value)


@pulumi.type_token("sdwan:index/urlFilteringPolicyDefinition:UrlFilteringPolicyDefinition")
class UrlFilteringPolicyDefinition(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 alerts: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 allow_url_list_id: Optional[pulumi.Input[_builtins.str]] = None,
                 allow_url_list_version: Optional[pulumi.Input[_builtins.int]] = None,
                 block_page_action: Optional[pulumi.Input[_builtins.str]] = None,
                 block_page_contents: Optional[pulumi.Input[_builtins.str]] = None,
                 block_url_list_id: Optional[pulumi.Input[_builtins.str]] = None,
                 block_url_list_version: Optional[pulumi.Input[_builtins.int]] = None,
                 description: Optional[pulumi.Input[_builtins.str]] = None,
                 loggings: Optional[pulumi.Input[Sequence[pulumi.Input[Union['UrlFilteringPolicyDefinitionLoggingArgs', 'UrlFilteringPolicyDefinitionLoggingArgsDict']]]]] = None,
                 mode: Optional[pulumi.Input[_builtins.str]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 target_vpns: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 web_categories: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 web_categories_action: Optional[pulumi.Input[_builtins.str]] = None,
                 web_reputation: Optional[pulumi.Input[_builtins.str]] = None,
                 __props__=None):
        """
        This resource can manage a URL Filtering Policy Definition .

        ## Example Usage

        ## Import

        The `pulumi import` command can be used, for example:

        ```sh
        $ pulumi import sdwan:index/urlFilteringPolicyDefinition:UrlFilteringPolicyDefinition example "f6b2c44c-693c-4763-b010-895aa3d236bd"
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] alerts: List of alerts options that will be exported as syslog messages
        :param pulumi.Input[_builtins.str] allow_url_list_id: Allow URL list ID
        :param pulumi.Input[_builtins.int] allow_url_list_version: Allow URL list version
        :param pulumi.Input[_builtins.str] block_page_action: Redirect to a URL or display a message when a blocked page is accessed.
                 - Choices: `text`, `redirectUrl`
        :param pulumi.Input[_builtins.str] block_page_contents: The message displayed or URL redirected to when a blocked page is accessed.
        :param pulumi.Input[_builtins.str] block_url_list_id: Block URL list ID
        :param pulumi.Input[_builtins.int] block_url_list_version: Block URL list version
        :param pulumi.Input[_builtins.str] description: The description of the policy definition.
        :param pulumi.Input[_builtins.str] mode: The policy mode
                 - Choices: `security`, `unified`
        :param pulumi.Input[_builtins.str] name: The name of the policy definition.
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] target_vpns: List of VPN IDs
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] web_categories: List of categories to block or allow
        :param pulumi.Input[_builtins.str] web_categories_action: whether the selected web categories should be blocked or allowed.
                 - Choices: `block`, `allow`
        :param pulumi.Input[_builtins.str] web_reputation: The web reputation of the policy definition
                 - Choices: `high-risk`, `suspicious`, `moderate-risk`, `low-risk`, `trustworthy`
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: UrlFilteringPolicyDefinitionArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        This resource can manage a URL Filtering Policy Definition .

        ## Example Usage

        ## Import

        The `pulumi import` command can be used, for example:

        ```sh
        $ pulumi import sdwan:index/urlFilteringPolicyDefinition:UrlFilteringPolicyDefinition example "f6b2c44c-693c-4763-b010-895aa3d236bd"
        ```

        :param str resource_name: The name of the resource.
        :param UrlFilteringPolicyDefinitionArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(UrlFilteringPolicyDefinitionArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 alerts: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 allow_url_list_id: Optional[pulumi.Input[_builtins.str]] = None,
                 allow_url_list_version: Optional[pulumi.Input[_builtins.int]] = None,
                 block_page_action: Optional[pulumi.Input[_builtins.str]] = None,
                 block_page_contents: Optional[pulumi.Input[_builtins.str]] = None,
                 block_url_list_id: Optional[pulumi.Input[_builtins.str]] = None,
                 block_url_list_version: Optional[pulumi.Input[_builtins.int]] = None,
                 description: Optional[pulumi.Input[_builtins.str]] = None,
                 loggings: Optional[pulumi.Input[Sequence[pulumi.Input[Union['UrlFilteringPolicyDefinitionLoggingArgs', 'UrlFilteringPolicyDefinitionLoggingArgsDict']]]]] = None,
                 mode: Optional[pulumi.Input[_builtins.str]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 target_vpns: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 web_categories: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 web_categories_action: Optional[pulumi.Input[_builtins.str]] = None,
                 web_reputation: Optional[pulumi.Input[_builtins.str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = UrlFilteringPolicyDefinitionArgs.__new__(UrlFilteringPolicyDefinitionArgs)

            __props__.__dict__["alerts"] = alerts
            __props__.__dict__["allow_url_list_id"] = allow_url_list_id
            __props__.__dict__["allow_url_list_version"] = allow_url_list_version
            __props__.__dict__["block_page_action"] = block_page_action
            __props__.__dict__["block_page_contents"] = block_page_contents
            __props__.__dict__["block_url_list_id"] = block_url_list_id
            __props__.__dict__["block_url_list_version"] = block_url_list_version
            if description is None and not opts.urn:
                raise TypeError("Missing required property 'description'")
            __props__.__dict__["description"] = description
            __props__.__dict__["loggings"] = loggings
            __props__.__dict__["mode"] = mode
            __props__.__dict__["name"] = name
            __props__.__dict__["target_vpns"] = target_vpns
            __props__.__dict__["web_categories"] = web_categories
            __props__.__dict__["web_categories_action"] = web_categories_action
            __props__.__dict__["web_reputation"] = web_reputation
            __props__.__dict__["version"] = None
        super(UrlFilteringPolicyDefinition, __self__).__init__(
            'sdwan:index/urlFilteringPolicyDefinition:UrlFilteringPolicyDefinition',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            alerts: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
            allow_url_list_id: Optional[pulumi.Input[_builtins.str]] = None,
            allow_url_list_version: Optional[pulumi.Input[_builtins.int]] = None,
            block_page_action: Optional[pulumi.Input[_builtins.str]] = None,
            block_page_contents: Optional[pulumi.Input[_builtins.str]] = None,
            block_url_list_id: Optional[pulumi.Input[_builtins.str]] = None,
            block_url_list_version: Optional[pulumi.Input[_builtins.int]] = None,
            description: Optional[pulumi.Input[_builtins.str]] = None,
            loggings: Optional[pulumi.Input[Sequence[pulumi.Input[Union['UrlFilteringPolicyDefinitionLoggingArgs', 'UrlFilteringPolicyDefinitionLoggingArgsDict']]]]] = None,
            mode: Optional[pulumi.Input[_builtins.str]] = None,
            name: Optional[pulumi.Input[_builtins.str]] = None,
            target_vpns: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
            version: Optional[pulumi.Input[_builtins.int]] = None,
            web_categories: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
            web_categories_action: Optional[pulumi.Input[_builtins.str]] = None,
            web_reputation: Optional[pulumi.Input[_builtins.str]] = None) -> 'UrlFilteringPolicyDefinition':
        """
        Get an existing UrlFilteringPolicyDefinition resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] alerts: List of alerts options that will be exported as syslog messages
        :param pulumi.Input[_builtins.str] allow_url_list_id: Allow URL list ID
        :param pulumi.Input[_builtins.int] allow_url_list_version: Allow URL list version
        :param pulumi.Input[_builtins.str] block_page_action: Redirect to a URL or display a message when a blocked page is accessed.
                 - Choices: `text`, `redirectUrl`
        :param pulumi.Input[_builtins.str] block_page_contents: The message displayed or URL redirected to when a blocked page is accessed.
        :param pulumi.Input[_builtins.str] block_url_list_id: Block URL list ID
        :param pulumi.Input[_builtins.int] block_url_list_version: Block URL list version
        :param pulumi.Input[_builtins.str] description: The description of the policy definition.
        :param pulumi.Input[_builtins.str] mode: The policy mode
                 - Choices: `security`, `unified`
        :param pulumi.Input[_builtins.str] name: The name of the policy definition.
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] target_vpns: List of VPN IDs
        :param pulumi.Input[_builtins.int] version: The version of the object
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] web_categories: List of categories to block or allow
        :param pulumi.Input[_builtins.str] web_categories_action: whether the selected web categories should be blocked or allowed.
                 - Choices: `block`, `allow`
        :param pulumi.Input[_builtins.str] web_reputation: The web reputation of the policy definition
                 - Choices: `high-risk`, `suspicious`, `moderate-risk`, `low-risk`, `trustworthy`
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _UrlFilteringPolicyDefinitionState.__new__(_UrlFilteringPolicyDefinitionState)

        __props__.__dict__["alerts"] = alerts
        __props__.__dict__["allow_url_list_id"] = allow_url_list_id
        __props__.__dict__["allow_url_list_version"] = allow_url_list_version
        __props__.__dict__["block_page_action"] = block_page_action
        __props__.__dict__["block_page_contents"] = block_page_contents
        __props__.__dict__["block_url_list_id"] = block_url_list_id
        __props__.__dict__["block_url_list_version"] = block_url_list_version
        __props__.__dict__["description"] = description
        __props__.__dict__["loggings"] = loggings
        __props__.__dict__["mode"] = mode
        __props__.__dict__["name"] = name
        __props__.__dict__["target_vpns"] = target_vpns
        __props__.__dict__["version"] = version
        __props__.__dict__["web_categories"] = web_categories
        __props__.__dict__["web_categories_action"] = web_categories_action
        __props__.__dict__["web_reputation"] = web_reputation
        return UrlFilteringPolicyDefinition(resource_name, opts=opts, __props__=__props__)

    @_builtins.property
    @pulumi.getter
    def alerts(self) -> pulumi.Output[Optional[Sequence[_builtins.str]]]:
        """
        List of alerts options that will be exported as syslog messages
        """
        return pulumi.get(self, "alerts")

    @_builtins.property
    @pulumi.getter(name="allowUrlListId")
    def allow_url_list_id(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        Allow URL list ID
        """
        return pulumi.get(self, "allow_url_list_id")

    @_builtins.property
    @pulumi.getter(name="allowUrlListVersion")
    def allow_url_list_version(self) -> pulumi.Output[Optional[_builtins.int]]:
        """
        Allow URL list version
        """
        return pulumi.get(self, "allow_url_list_version")

    @_builtins.property
    @pulumi.getter(name="blockPageAction")
    def block_page_action(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        Redirect to a URL or display a message when a blocked page is accessed.
          - Choices: `text`, `redirectUrl`
        """
        return pulumi.get(self, "block_page_action")

    @_builtins.property
    @pulumi.getter(name="blockPageContents")
    def block_page_contents(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        The message displayed or URL redirected to when a blocked page is accessed.
        """
        return pulumi.get(self, "block_page_contents")

    @_builtins.property
    @pulumi.getter(name="blockUrlListId")
    def block_url_list_id(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        Block URL list ID
        """
        return pulumi.get(self, "block_url_list_id")

    @_builtins.property
    @pulumi.getter(name="blockUrlListVersion")
    def block_url_list_version(self) -> pulumi.Output[Optional[_builtins.int]]:
        """
        Block URL list version
        """
        return pulumi.get(self, "block_url_list_version")

    @_builtins.property
    @pulumi.getter
    def description(self) -> pulumi.Output[_builtins.str]:
        """
        The description of the policy definition.
        """
        return pulumi.get(self, "description")

    @_builtins.property
    @pulumi.getter
    def loggings(self) -> pulumi.Output[Optional[Sequence['outputs.UrlFilteringPolicyDefinitionLogging']]]:
        return pulumi.get(self, "loggings")

    @_builtins.property
    @pulumi.getter
    def mode(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        The policy mode
          - Choices: `security`, `unified`
        """
        return pulumi.get(self, "mode")

    @_builtins.property
    @pulumi.getter
    def name(self) -> pulumi.Output[_builtins.str]:
        """
        The name of the policy definition.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter(name="targetVpns")
    def target_vpns(self) -> pulumi.Output[Optional[Sequence[_builtins.str]]]:
        """
        List of VPN IDs
        """
        return pulumi.get(self, "target_vpns")

    @_builtins.property
    @pulumi.getter
    def version(self) -> pulumi.Output[_builtins.int]:
        """
        The version of the object
        """
        return pulumi.get(self, "version")

    @_builtins.property
    @pulumi.getter(name="webCategories")
    def web_categories(self) -> pulumi.Output[Optional[Sequence[_builtins.str]]]:
        """
        List of categories to block or allow
        """
        return pulumi.get(self, "web_categories")

    @_builtins.property
    @pulumi.getter(name="webCategoriesAction")
    def web_categories_action(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        whether the selected web categories should be blocked or allowed.
          - Choices: `block`, `allow`
        """
        return pulumi.get(self, "web_categories_action")

    @_builtins.property
    @pulumi.getter(name="webReputation")
    def web_reputation(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        The web reputation of the policy definition
          - Choices: `high-risk`, `suspicious`, `moderate-risk`, `low-risk`, `trustworthy`
        """
        return pulumi.get(self, "web_reputation")

