# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities

__all__ = [
    'GetSystemOmpFeatureResult',
    'AwaitableGetSystemOmpFeatureResult',
    'get_system_omp_feature',
    'get_system_omp_feature_output',
]

@pulumi.output_type
class GetSystemOmpFeatureResult:
    """
    A collection of values returned by getSystemOmpFeature.
    """
    def __init__(__self__, advertise_ipv4_bgp=None, advertise_ipv4_bgp_variable=None, advertise_ipv4_connected=None, advertise_ipv4_connected_variable=None, advertise_ipv4_eigrp=None, advertise_ipv4_eigrp_variable=None, advertise_ipv4_isis=None, advertise_ipv4_isis_variable=None, advertise_ipv4_lisp=None, advertise_ipv4_lisp_variable=None, advertise_ipv4_ospf=None, advertise_ipv4_ospf_v3=None, advertise_ipv4_ospf_v3_variable=None, advertise_ipv4_ospf_variable=None, advertise_ipv4_static=None, advertise_ipv4_static_variable=None, advertise_ipv6_bgp=None, advertise_ipv6_bgp_variable=None, advertise_ipv6_connected=None, advertise_ipv6_connected_variable=None, advertise_ipv6_eigrp=None, advertise_ipv6_eigrp_variable=None, advertise_ipv6_isis=None, advertise_ipv6_isis_variable=None, advertise_ipv6_lisp=None, advertise_ipv6_lisp_variable=None, advertise_ipv6_ospf=None, advertise_ipv6_ospf_variable=None, advertise_ipv6_static=None, advertise_ipv6_static_variable=None, advertisement_interval=None, advertisement_interval_variable=None, description=None, ecmp_limit=None, ecmp_limit_variable=None, eor_timer=None, eor_timer_variable=None, feature_profile_id=None, graceful_restart=None, graceful_restart_timer=None, graceful_restart_timer_variable=None, graceful_restart_variable=None, holdtime=None, holdtime_variable=None, id=None, ignore_region_path_length=None, ignore_region_path_length_variable=None, name=None, omp_admin_distance_ipv4=None, omp_admin_distance_ipv4_variable=None, omp_admin_distance_ipv6=None, omp_admin_distance_ipv6_variable=None, overlay_as=None, overlay_as_variable=None, paths_advertised_per_prefix=None, paths_advertised_per_prefix_variable=None, shutdown=None, shutdown_variable=None, site_types=None, site_types_variable=None, transport_gateway=None, transport_gateway_variable=None, version=None):
        if advertise_ipv4_bgp and not isinstance(advertise_ipv4_bgp, bool):
            raise TypeError("Expected argument 'advertise_ipv4_bgp' to be a bool")
        pulumi.set(__self__, "advertise_ipv4_bgp", advertise_ipv4_bgp)
        if advertise_ipv4_bgp_variable and not isinstance(advertise_ipv4_bgp_variable, str):
            raise TypeError("Expected argument 'advertise_ipv4_bgp_variable' to be a str")
        pulumi.set(__self__, "advertise_ipv4_bgp_variable", advertise_ipv4_bgp_variable)
        if advertise_ipv4_connected and not isinstance(advertise_ipv4_connected, bool):
            raise TypeError("Expected argument 'advertise_ipv4_connected' to be a bool")
        pulumi.set(__self__, "advertise_ipv4_connected", advertise_ipv4_connected)
        if advertise_ipv4_connected_variable and not isinstance(advertise_ipv4_connected_variable, str):
            raise TypeError("Expected argument 'advertise_ipv4_connected_variable' to be a str")
        pulumi.set(__self__, "advertise_ipv4_connected_variable", advertise_ipv4_connected_variable)
        if advertise_ipv4_eigrp and not isinstance(advertise_ipv4_eigrp, bool):
            raise TypeError("Expected argument 'advertise_ipv4_eigrp' to be a bool")
        pulumi.set(__self__, "advertise_ipv4_eigrp", advertise_ipv4_eigrp)
        if advertise_ipv4_eigrp_variable and not isinstance(advertise_ipv4_eigrp_variable, str):
            raise TypeError("Expected argument 'advertise_ipv4_eigrp_variable' to be a str")
        pulumi.set(__self__, "advertise_ipv4_eigrp_variable", advertise_ipv4_eigrp_variable)
        if advertise_ipv4_isis and not isinstance(advertise_ipv4_isis, bool):
            raise TypeError("Expected argument 'advertise_ipv4_isis' to be a bool")
        pulumi.set(__self__, "advertise_ipv4_isis", advertise_ipv4_isis)
        if advertise_ipv4_isis_variable and not isinstance(advertise_ipv4_isis_variable, str):
            raise TypeError("Expected argument 'advertise_ipv4_isis_variable' to be a str")
        pulumi.set(__self__, "advertise_ipv4_isis_variable", advertise_ipv4_isis_variable)
        if advertise_ipv4_lisp and not isinstance(advertise_ipv4_lisp, bool):
            raise TypeError("Expected argument 'advertise_ipv4_lisp' to be a bool")
        pulumi.set(__self__, "advertise_ipv4_lisp", advertise_ipv4_lisp)
        if advertise_ipv4_lisp_variable and not isinstance(advertise_ipv4_lisp_variable, str):
            raise TypeError("Expected argument 'advertise_ipv4_lisp_variable' to be a str")
        pulumi.set(__self__, "advertise_ipv4_lisp_variable", advertise_ipv4_lisp_variable)
        if advertise_ipv4_ospf and not isinstance(advertise_ipv4_ospf, bool):
            raise TypeError("Expected argument 'advertise_ipv4_ospf' to be a bool")
        pulumi.set(__self__, "advertise_ipv4_ospf", advertise_ipv4_ospf)
        if advertise_ipv4_ospf_v3 and not isinstance(advertise_ipv4_ospf_v3, bool):
            raise TypeError("Expected argument 'advertise_ipv4_ospf_v3' to be a bool")
        pulumi.set(__self__, "advertise_ipv4_ospf_v3", advertise_ipv4_ospf_v3)
        if advertise_ipv4_ospf_v3_variable and not isinstance(advertise_ipv4_ospf_v3_variable, str):
            raise TypeError("Expected argument 'advertise_ipv4_ospf_v3_variable' to be a str")
        pulumi.set(__self__, "advertise_ipv4_ospf_v3_variable", advertise_ipv4_ospf_v3_variable)
        if advertise_ipv4_ospf_variable and not isinstance(advertise_ipv4_ospf_variable, str):
            raise TypeError("Expected argument 'advertise_ipv4_ospf_variable' to be a str")
        pulumi.set(__self__, "advertise_ipv4_ospf_variable", advertise_ipv4_ospf_variable)
        if advertise_ipv4_static and not isinstance(advertise_ipv4_static, bool):
            raise TypeError("Expected argument 'advertise_ipv4_static' to be a bool")
        pulumi.set(__self__, "advertise_ipv4_static", advertise_ipv4_static)
        if advertise_ipv4_static_variable and not isinstance(advertise_ipv4_static_variable, str):
            raise TypeError("Expected argument 'advertise_ipv4_static_variable' to be a str")
        pulumi.set(__self__, "advertise_ipv4_static_variable", advertise_ipv4_static_variable)
        if advertise_ipv6_bgp and not isinstance(advertise_ipv6_bgp, bool):
            raise TypeError("Expected argument 'advertise_ipv6_bgp' to be a bool")
        pulumi.set(__self__, "advertise_ipv6_bgp", advertise_ipv6_bgp)
        if advertise_ipv6_bgp_variable and not isinstance(advertise_ipv6_bgp_variable, str):
            raise TypeError("Expected argument 'advertise_ipv6_bgp_variable' to be a str")
        pulumi.set(__self__, "advertise_ipv6_bgp_variable", advertise_ipv6_bgp_variable)
        if advertise_ipv6_connected and not isinstance(advertise_ipv6_connected, bool):
            raise TypeError("Expected argument 'advertise_ipv6_connected' to be a bool")
        pulumi.set(__self__, "advertise_ipv6_connected", advertise_ipv6_connected)
        if advertise_ipv6_connected_variable and not isinstance(advertise_ipv6_connected_variable, str):
            raise TypeError("Expected argument 'advertise_ipv6_connected_variable' to be a str")
        pulumi.set(__self__, "advertise_ipv6_connected_variable", advertise_ipv6_connected_variable)
        if advertise_ipv6_eigrp and not isinstance(advertise_ipv6_eigrp, bool):
            raise TypeError("Expected argument 'advertise_ipv6_eigrp' to be a bool")
        pulumi.set(__self__, "advertise_ipv6_eigrp", advertise_ipv6_eigrp)
        if advertise_ipv6_eigrp_variable and not isinstance(advertise_ipv6_eigrp_variable, str):
            raise TypeError("Expected argument 'advertise_ipv6_eigrp_variable' to be a str")
        pulumi.set(__self__, "advertise_ipv6_eigrp_variable", advertise_ipv6_eigrp_variable)
        if advertise_ipv6_isis and not isinstance(advertise_ipv6_isis, bool):
            raise TypeError("Expected argument 'advertise_ipv6_isis' to be a bool")
        pulumi.set(__self__, "advertise_ipv6_isis", advertise_ipv6_isis)
        if advertise_ipv6_isis_variable and not isinstance(advertise_ipv6_isis_variable, str):
            raise TypeError("Expected argument 'advertise_ipv6_isis_variable' to be a str")
        pulumi.set(__self__, "advertise_ipv6_isis_variable", advertise_ipv6_isis_variable)
        if advertise_ipv6_lisp and not isinstance(advertise_ipv6_lisp, bool):
            raise TypeError("Expected argument 'advertise_ipv6_lisp' to be a bool")
        pulumi.set(__self__, "advertise_ipv6_lisp", advertise_ipv6_lisp)
        if advertise_ipv6_lisp_variable and not isinstance(advertise_ipv6_lisp_variable, str):
            raise TypeError("Expected argument 'advertise_ipv6_lisp_variable' to be a str")
        pulumi.set(__self__, "advertise_ipv6_lisp_variable", advertise_ipv6_lisp_variable)
        if advertise_ipv6_ospf and not isinstance(advertise_ipv6_ospf, bool):
            raise TypeError("Expected argument 'advertise_ipv6_ospf' to be a bool")
        pulumi.set(__self__, "advertise_ipv6_ospf", advertise_ipv6_ospf)
        if advertise_ipv6_ospf_variable and not isinstance(advertise_ipv6_ospf_variable, str):
            raise TypeError("Expected argument 'advertise_ipv6_ospf_variable' to be a str")
        pulumi.set(__self__, "advertise_ipv6_ospf_variable", advertise_ipv6_ospf_variable)
        if advertise_ipv6_static and not isinstance(advertise_ipv6_static, bool):
            raise TypeError("Expected argument 'advertise_ipv6_static' to be a bool")
        pulumi.set(__self__, "advertise_ipv6_static", advertise_ipv6_static)
        if advertise_ipv6_static_variable and not isinstance(advertise_ipv6_static_variable, str):
            raise TypeError("Expected argument 'advertise_ipv6_static_variable' to be a str")
        pulumi.set(__self__, "advertise_ipv6_static_variable", advertise_ipv6_static_variable)
        if advertisement_interval and not isinstance(advertisement_interval, int):
            raise TypeError("Expected argument 'advertisement_interval' to be a int")
        pulumi.set(__self__, "advertisement_interval", advertisement_interval)
        if advertisement_interval_variable and not isinstance(advertisement_interval_variable, str):
            raise TypeError("Expected argument 'advertisement_interval_variable' to be a str")
        pulumi.set(__self__, "advertisement_interval_variable", advertisement_interval_variable)
        if description and not isinstance(description, str):
            raise TypeError("Expected argument 'description' to be a str")
        pulumi.set(__self__, "description", description)
        if ecmp_limit and not isinstance(ecmp_limit, int):
            raise TypeError("Expected argument 'ecmp_limit' to be a int")
        pulumi.set(__self__, "ecmp_limit", ecmp_limit)
        if ecmp_limit_variable and not isinstance(ecmp_limit_variable, str):
            raise TypeError("Expected argument 'ecmp_limit_variable' to be a str")
        pulumi.set(__self__, "ecmp_limit_variable", ecmp_limit_variable)
        if eor_timer and not isinstance(eor_timer, int):
            raise TypeError("Expected argument 'eor_timer' to be a int")
        pulumi.set(__self__, "eor_timer", eor_timer)
        if eor_timer_variable and not isinstance(eor_timer_variable, str):
            raise TypeError("Expected argument 'eor_timer_variable' to be a str")
        pulumi.set(__self__, "eor_timer_variable", eor_timer_variable)
        if feature_profile_id and not isinstance(feature_profile_id, str):
            raise TypeError("Expected argument 'feature_profile_id' to be a str")
        pulumi.set(__self__, "feature_profile_id", feature_profile_id)
        if graceful_restart and not isinstance(graceful_restart, bool):
            raise TypeError("Expected argument 'graceful_restart' to be a bool")
        pulumi.set(__self__, "graceful_restart", graceful_restart)
        if graceful_restart_timer and not isinstance(graceful_restart_timer, int):
            raise TypeError("Expected argument 'graceful_restart_timer' to be a int")
        pulumi.set(__self__, "graceful_restart_timer", graceful_restart_timer)
        if graceful_restart_timer_variable and not isinstance(graceful_restart_timer_variable, str):
            raise TypeError("Expected argument 'graceful_restart_timer_variable' to be a str")
        pulumi.set(__self__, "graceful_restart_timer_variable", graceful_restart_timer_variable)
        if graceful_restart_variable and not isinstance(graceful_restart_variable, str):
            raise TypeError("Expected argument 'graceful_restart_variable' to be a str")
        pulumi.set(__self__, "graceful_restart_variable", graceful_restart_variable)
        if holdtime and not isinstance(holdtime, int):
            raise TypeError("Expected argument 'holdtime' to be a int")
        pulumi.set(__self__, "holdtime", holdtime)
        if holdtime_variable and not isinstance(holdtime_variable, str):
            raise TypeError("Expected argument 'holdtime_variable' to be a str")
        pulumi.set(__self__, "holdtime_variable", holdtime_variable)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if ignore_region_path_length and not isinstance(ignore_region_path_length, bool):
            raise TypeError("Expected argument 'ignore_region_path_length' to be a bool")
        pulumi.set(__self__, "ignore_region_path_length", ignore_region_path_length)
        if ignore_region_path_length_variable and not isinstance(ignore_region_path_length_variable, str):
            raise TypeError("Expected argument 'ignore_region_path_length_variable' to be a str")
        pulumi.set(__self__, "ignore_region_path_length_variable", ignore_region_path_length_variable)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)
        if omp_admin_distance_ipv4 and not isinstance(omp_admin_distance_ipv4, int):
            raise TypeError("Expected argument 'omp_admin_distance_ipv4' to be a int")
        pulumi.set(__self__, "omp_admin_distance_ipv4", omp_admin_distance_ipv4)
        if omp_admin_distance_ipv4_variable and not isinstance(omp_admin_distance_ipv4_variable, str):
            raise TypeError("Expected argument 'omp_admin_distance_ipv4_variable' to be a str")
        pulumi.set(__self__, "omp_admin_distance_ipv4_variable", omp_admin_distance_ipv4_variable)
        if omp_admin_distance_ipv6 and not isinstance(omp_admin_distance_ipv6, int):
            raise TypeError("Expected argument 'omp_admin_distance_ipv6' to be a int")
        pulumi.set(__self__, "omp_admin_distance_ipv6", omp_admin_distance_ipv6)
        if omp_admin_distance_ipv6_variable and not isinstance(omp_admin_distance_ipv6_variable, str):
            raise TypeError("Expected argument 'omp_admin_distance_ipv6_variable' to be a str")
        pulumi.set(__self__, "omp_admin_distance_ipv6_variable", omp_admin_distance_ipv6_variable)
        if overlay_as and not isinstance(overlay_as, int):
            raise TypeError("Expected argument 'overlay_as' to be a int")
        pulumi.set(__self__, "overlay_as", overlay_as)
        if overlay_as_variable and not isinstance(overlay_as_variable, str):
            raise TypeError("Expected argument 'overlay_as_variable' to be a str")
        pulumi.set(__self__, "overlay_as_variable", overlay_as_variable)
        if paths_advertised_per_prefix and not isinstance(paths_advertised_per_prefix, int):
            raise TypeError("Expected argument 'paths_advertised_per_prefix' to be a int")
        pulumi.set(__self__, "paths_advertised_per_prefix", paths_advertised_per_prefix)
        if paths_advertised_per_prefix_variable and not isinstance(paths_advertised_per_prefix_variable, str):
            raise TypeError("Expected argument 'paths_advertised_per_prefix_variable' to be a str")
        pulumi.set(__self__, "paths_advertised_per_prefix_variable", paths_advertised_per_prefix_variable)
        if shutdown and not isinstance(shutdown, bool):
            raise TypeError("Expected argument 'shutdown' to be a bool")
        pulumi.set(__self__, "shutdown", shutdown)
        if shutdown_variable and not isinstance(shutdown_variable, str):
            raise TypeError("Expected argument 'shutdown_variable' to be a str")
        pulumi.set(__self__, "shutdown_variable", shutdown_variable)
        if site_types and not isinstance(site_types, list):
            raise TypeError("Expected argument 'site_types' to be a list")
        pulumi.set(__self__, "site_types", site_types)
        if site_types_variable and not isinstance(site_types_variable, str):
            raise TypeError("Expected argument 'site_types_variable' to be a str")
        pulumi.set(__self__, "site_types_variable", site_types_variable)
        if transport_gateway and not isinstance(transport_gateway, str):
            raise TypeError("Expected argument 'transport_gateway' to be a str")
        pulumi.set(__self__, "transport_gateway", transport_gateway)
        if transport_gateway_variable and not isinstance(transport_gateway_variable, str):
            raise TypeError("Expected argument 'transport_gateway_variable' to be a str")
        pulumi.set(__self__, "transport_gateway_variable", transport_gateway_variable)
        if version and not isinstance(version, int):
            raise TypeError("Expected argument 'version' to be a int")
        pulumi.set(__self__, "version", version)

    @_builtins.property
    @pulumi.getter(name="advertiseIpv4Bgp")
    def advertise_ipv4_bgp(self) -> _builtins.bool:
        """
        BGP
        """
        return pulumi.get(self, "advertise_ipv4_bgp")

    @_builtins.property
    @pulumi.getter(name="advertiseIpv4BgpVariable")
    def advertise_ipv4_bgp_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "advertise_ipv4_bgp_variable")

    @_builtins.property
    @pulumi.getter(name="advertiseIpv4Connected")
    def advertise_ipv4_connected(self) -> _builtins.bool:
        """
        Connected
        """
        return pulumi.get(self, "advertise_ipv4_connected")

    @_builtins.property
    @pulumi.getter(name="advertiseIpv4ConnectedVariable")
    def advertise_ipv4_connected_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "advertise_ipv4_connected_variable")

    @_builtins.property
    @pulumi.getter(name="advertiseIpv4Eigrp")
    def advertise_ipv4_eigrp(self) -> _builtins.bool:
        """
        EIGRP
        """
        return pulumi.get(self, "advertise_ipv4_eigrp")

    @_builtins.property
    @pulumi.getter(name="advertiseIpv4EigrpVariable")
    def advertise_ipv4_eigrp_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "advertise_ipv4_eigrp_variable")

    @_builtins.property
    @pulumi.getter(name="advertiseIpv4Isis")
    def advertise_ipv4_isis(self) -> _builtins.bool:
        """
        ISIS
        """
        return pulumi.get(self, "advertise_ipv4_isis")

    @_builtins.property
    @pulumi.getter(name="advertiseIpv4IsisVariable")
    def advertise_ipv4_isis_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "advertise_ipv4_isis_variable")

    @_builtins.property
    @pulumi.getter(name="advertiseIpv4Lisp")
    def advertise_ipv4_lisp(self) -> _builtins.bool:
        """
        LISP
        """
        return pulumi.get(self, "advertise_ipv4_lisp")

    @_builtins.property
    @pulumi.getter(name="advertiseIpv4LispVariable")
    def advertise_ipv4_lisp_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "advertise_ipv4_lisp_variable")

    @_builtins.property
    @pulumi.getter(name="advertiseIpv4Ospf")
    def advertise_ipv4_ospf(self) -> _builtins.bool:
        """
        OSPF
        """
        return pulumi.get(self, "advertise_ipv4_ospf")

    @_builtins.property
    @pulumi.getter(name="advertiseIpv4OspfV3")
    def advertise_ipv4_ospf_v3(self) -> _builtins.bool:
        """
        OSPFV3
        """
        return pulumi.get(self, "advertise_ipv4_ospf_v3")

    @_builtins.property
    @pulumi.getter(name="advertiseIpv4OspfV3Variable")
    def advertise_ipv4_ospf_v3_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "advertise_ipv4_ospf_v3_variable")

    @_builtins.property
    @pulumi.getter(name="advertiseIpv4OspfVariable")
    def advertise_ipv4_ospf_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "advertise_ipv4_ospf_variable")

    @_builtins.property
    @pulumi.getter(name="advertiseIpv4Static")
    def advertise_ipv4_static(self) -> _builtins.bool:
        """
        Static
        """
        return pulumi.get(self, "advertise_ipv4_static")

    @_builtins.property
    @pulumi.getter(name="advertiseIpv4StaticVariable")
    def advertise_ipv4_static_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "advertise_ipv4_static_variable")

    @_builtins.property
    @pulumi.getter(name="advertiseIpv6Bgp")
    def advertise_ipv6_bgp(self) -> _builtins.bool:
        """
        BGP
        """
        return pulumi.get(self, "advertise_ipv6_bgp")

    @_builtins.property
    @pulumi.getter(name="advertiseIpv6BgpVariable")
    def advertise_ipv6_bgp_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "advertise_ipv6_bgp_variable")

    @_builtins.property
    @pulumi.getter(name="advertiseIpv6Connected")
    def advertise_ipv6_connected(self) -> _builtins.bool:
        """
        Connected
        """
        return pulumi.get(self, "advertise_ipv6_connected")

    @_builtins.property
    @pulumi.getter(name="advertiseIpv6ConnectedVariable")
    def advertise_ipv6_connected_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "advertise_ipv6_connected_variable")

    @_builtins.property
    @pulumi.getter(name="advertiseIpv6Eigrp")
    def advertise_ipv6_eigrp(self) -> _builtins.bool:
        """
        EIGRP
        """
        return pulumi.get(self, "advertise_ipv6_eigrp")

    @_builtins.property
    @pulumi.getter(name="advertiseIpv6EigrpVariable")
    def advertise_ipv6_eigrp_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "advertise_ipv6_eigrp_variable")

    @_builtins.property
    @pulumi.getter(name="advertiseIpv6Isis")
    def advertise_ipv6_isis(self) -> _builtins.bool:
        """
        ISIS
        """
        return pulumi.get(self, "advertise_ipv6_isis")

    @_builtins.property
    @pulumi.getter(name="advertiseIpv6IsisVariable")
    def advertise_ipv6_isis_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "advertise_ipv6_isis_variable")

    @_builtins.property
    @pulumi.getter(name="advertiseIpv6Lisp")
    def advertise_ipv6_lisp(self) -> _builtins.bool:
        """
        LISP
        """
        return pulumi.get(self, "advertise_ipv6_lisp")

    @_builtins.property
    @pulumi.getter(name="advertiseIpv6LispVariable")
    def advertise_ipv6_lisp_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "advertise_ipv6_lisp_variable")

    @_builtins.property
    @pulumi.getter(name="advertiseIpv6Ospf")
    def advertise_ipv6_ospf(self) -> _builtins.bool:
        """
        OSPF
        """
        return pulumi.get(self, "advertise_ipv6_ospf")

    @_builtins.property
    @pulumi.getter(name="advertiseIpv6OspfVariable")
    def advertise_ipv6_ospf_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "advertise_ipv6_ospf_variable")

    @_builtins.property
    @pulumi.getter(name="advertiseIpv6Static")
    def advertise_ipv6_static(self) -> _builtins.bool:
        """
        Static
        """
        return pulumi.get(self, "advertise_ipv6_static")

    @_builtins.property
    @pulumi.getter(name="advertiseIpv6StaticVariable")
    def advertise_ipv6_static_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "advertise_ipv6_static_variable")

    @_builtins.property
    @pulumi.getter(name="advertisementInterval")
    def advertisement_interval(self) -> _builtins.int:
        """
        Advertisement Interval (seconds)
        """
        return pulumi.get(self, "advertisement_interval")

    @_builtins.property
    @pulumi.getter(name="advertisementIntervalVariable")
    def advertisement_interval_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "advertisement_interval_variable")

    @_builtins.property
    @pulumi.getter
    def description(self) -> _builtins.str:
        """
        The description of the Feature
        """
        return pulumi.get(self, "description")

    @_builtins.property
    @pulumi.getter(name="ecmpLimit")
    def ecmp_limit(self) -> _builtins.int:
        """
        Set maximum number of OMP paths to install in cEdge route table
        """
        return pulumi.get(self, "ecmp_limit")

    @_builtins.property
    @pulumi.getter(name="ecmpLimitVariable")
    def ecmp_limit_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "ecmp_limit_variable")

    @_builtins.property
    @pulumi.getter(name="eorTimer")
    def eor_timer(self) -> _builtins.int:
        """
        EOR Timer
        """
        return pulumi.get(self, "eor_timer")

    @_builtins.property
    @pulumi.getter(name="eorTimerVariable")
    def eor_timer_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "eor_timer_variable")

    @_builtins.property
    @pulumi.getter(name="featureProfileId")
    def feature_profile_id(self) -> _builtins.str:
        """
        Feature Profile ID
        """
        return pulumi.get(self, "feature_profile_id")

    @_builtins.property
    @pulumi.getter(name="gracefulRestart")
    def graceful_restart(self) -> _builtins.bool:
        """
        Graceful Restart for OMP
        """
        return pulumi.get(self, "graceful_restart")

    @_builtins.property
    @pulumi.getter(name="gracefulRestartTimer")
    def graceful_restart_timer(self) -> _builtins.int:
        """
        Graceful Restart Timer (seconds)
        """
        return pulumi.get(self, "graceful_restart_timer")

    @_builtins.property
    @pulumi.getter(name="gracefulRestartTimerVariable")
    def graceful_restart_timer_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "graceful_restart_timer_variable")

    @_builtins.property
    @pulumi.getter(name="gracefulRestartVariable")
    def graceful_restart_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "graceful_restart_variable")

    @_builtins.property
    @pulumi.getter
    def holdtime(self) -> _builtins.int:
        """
        Hold Time (seconds)
        """
        return pulumi.get(self, "holdtime")

    @_builtins.property
    @pulumi.getter(name="holdtimeVariable")
    def holdtime_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "holdtime_variable")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        The id of the Feature
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter(name="ignoreRegionPathLength")
    def ignore_region_path_length(self) -> _builtins.bool:
        """
        Treat hierarchical and direct (secondary region) paths equally
        """
        return pulumi.get(self, "ignore_region_path_length")

    @_builtins.property
    @pulumi.getter(name="ignoreRegionPathLengthVariable")
    def ignore_region_path_length_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "ignore_region_path_length_variable")

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        """
        The name of the Feature
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter(name="ompAdminDistanceIpv4")
    def omp_admin_distance_ipv4(self) -> _builtins.int:
        """
        OMP Admin Distance IPv4
        """
        return pulumi.get(self, "omp_admin_distance_ipv4")

    @_builtins.property
    @pulumi.getter(name="ompAdminDistanceIpv4Variable")
    def omp_admin_distance_ipv4_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "omp_admin_distance_ipv4_variable")

    @_builtins.property
    @pulumi.getter(name="ompAdminDistanceIpv6")
    def omp_admin_distance_ipv6(self) -> _builtins.int:
        """
        OMP Admin Distance IPv6
        """
        return pulumi.get(self, "omp_admin_distance_ipv6")

    @_builtins.property
    @pulumi.getter(name="ompAdminDistanceIpv6Variable")
    def omp_admin_distance_ipv6_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "omp_admin_distance_ipv6_variable")

    @_builtins.property
    @pulumi.getter(name="overlayAs")
    def overlay_as(self) -> _builtins.int:
        """
        Overlay AS Number
        """
        return pulumi.get(self, "overlay_as")

    @_builtins.property
    @pulumi.getter(name="overlayAsVariable")
    def overlay_as_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "overlay_as_variable")

    @_builtins.property
    @pulumi.getter(name="pathsAdvertisedPerPrefix")
    def paths_advertised_per_prefix(self) -> _builtins.int:
        """
        Number of Paths Advertised per Prefix
        """
        return pulumi.get(self, "paths_advertised_per_prefix")

    @_builtins.property
    @pulumi.getter(name="pathsAdvertisedPerPrefixVariable")
    def paths_advertised_per_prefix_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "paths_advertised_per_prefix_variable")

    @_builtins.property
    @pulumi.getter
    def shutdown(self) -> _builtins.bool:
        """
        Shutdown
        """
        return pulumi.get(self, "shutdown")

    @_builtins.property
    @pulumi.getter(name="shutdownVariable")
    def shutdown_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "shutdown_variable")

    @_builtins.property
    @pulumi.getter(name="siteTypes")
    def site_types(self) -> Sequence[_builtins.str]:
        """
        Site Types
        """
        return pulumi.get(self, "site_types")

    @_builtins.property
    @pulumi.getter(name="siteTypesVariable")
    def site_types_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "site_types_variable")

    @_builtins.property
    @pulumi.getter(name="transportGateway")
    def transport_gateway(self) -> _builtins.str:
        """
        Transport Gateway Path Behavior
        """
        return pulumi.get(self, "transport_gateway")

    @_builtins.property
    @pulumi.getter(name="transportGatewayVariable")
    def transport_gateway_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "transport_gateway_variable")

    @_builtins.property
    @pulumi.getter
    def version(self) -> _builtins.int:
        """
        The version of the Feature
        """
        return pulumi.get(self, "version")


class AwaitableGetSystemOmpFeatureResult(GetSystemOmpFeatureResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetSystemOmpFeatureResult(
            advertise_ipv4_bgp=self.advertise_ipv4_bgp,
            advertise_ipv4_bgp_variable=self.advertise_ipv4_bgp_variable,
            advertise_ipv4_connected=self.advertise_ipv4_connected,
            advertise_ipv4_connected_variable=self.advertise_ipv4_connected_variable,
            advertise_ipv4_eigrp=self.advertise_ipv4_eigrp,
            advertise_ipv4_eigrp_variable=self.advertise_ipv4_eigrp_variable,
            advertise_ipv4_isis=self.advertise_ipv4_isis,
            advertise_ipv4_isis_variable=self.advertise_ipv4_isis_variable,
            advertise_ipv4_lisp=self.advertise_ipv4_lisp,
            advertise_ipv4_lisp_variable=self.advertise_ipv4_lisp_variable,
            advertise_ipv4_ospf=self.advertise_ipv4_ospf,
            advertise_ipv4_ospf_v3=self.advertise_ipv4_ospf_v3,
            advertise_ipv4_ospf_v3_variable=self.advertise_ipv4_ospf_v3_variable,
            advertise_ipv4_ospf_variable=self.advertise_ipv4_ospf_variable,
            advertise_ipv4_static=self.advertise_ipv4_static,
            advertise_ipv4_static_variable=self.advertise_ipv4_static_variable,
            advertise_ipv6_bgp=self.advertise_ipv6_bgp,
            advertise_ipv6_bgp_variable=self.advertise_ipv6_bgp_variable,
            advertise_ipv6_connected=self.advertise_ipv6_connected,
            advertise_ipv6_connected_variable=self.advertise_ipv6_connected_variable,
            advertise_ipv6_eigrp=self.advertise_ipv6_eigrp,
            advertise_ipv6_eigrp_variable=self.advertise_ipv6_eigrp_variable,
            advertise_ipv6_isis=self.advertise_ipv6_isis,
            advertise_ipv6_isis_variable=self.advertise_ipv6_isis_variable,
            advertise_ipv6_lisp=self.advertise_ipv6_lisp,
            advertise_ipv6_lisp_variable=self.advertise_ipv6_lisp_variable,
            advertise_ipv6_ospf=self.advertise_ipv6_ospf,
            advertise_ipv6_ospf_variable=self.advertise_ipv6_ospf_variable,
            advertise_ipv6_static=self.advertise_ipv6_static,
            advertise_ipv6_static_variable=self.advertise_ipv6_static_variable,
            advertisement_interval=self.advertisement_interval,
            advertisement_interval_variable=self.advertisement_interval_variable,
            description=self.description,
            ecmp_limit=self.ecmp_limit,
            ecmp_limit_variable=self.ecmp_limit_variable,
            eor_timer=self.eor_timer,
            eor_timer_variable=self.eor_timer_variable,
            feature_profile_id=self.feature_profile_id,
            graceful_restart=self.graceful_restart,
            graceful_restart_timer=self.graceful_restart_timer,
            graceful_restart_timer_variable=self.graceful_restart_timer_variable,
            graceful_restart_variable=self.graceful_restart_variable,
            holdtime=self.holdtime,
            holdtime_variable=self.holdtime_variable,
            id=self.id,
            ignore_region_path_length=self.ignore_region_path_length,
            ignore_region_path_length_variable=self.ignore_region_path_length_variable,
            name=self.name,
            omp_admin_distance_ipv4=self.omp_admin_distance_ipv4,
            omp_admin_distance_ipv4_variable=self.omp_admin_distance_ipv4_variable,
            omp_admin_distance_ipv6=self.omp_admin_distance_ipv6,
            omp_admin_distance_ipv6_variable=self.omp_admin_distance_ipv6_variable,
            overlay_as=self.overlay_as,
            overlay_as_variable=self.overlay_as_variable,
            paths_advertised_per_prefix=self.paths_advertised_per_prefix,
            paths_advertised_per_prefix_variable=self.paths_advertised_per_prefix_variable,
            shutdown=self.shutdown,
            shutdown_variable=self.shutdown_variable,
            site_types=self.site_types,
            site_types_variable=self.site_types_variable,
            transport_gateway=self.transport_gateway,
            transport_gateway_variable=self.transport_gateway_variable,
            version=self.version)


def get_system_omp_feature(feature_profile_id: Optional[_builtins.str] = None,
                           id: Optional[_builtins.str] = None,
                           opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetSystemOmpFeatureResult:
    """
    This data source can read the System OMP Feature.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_sdwan as sdwan

    example = sdwan.get_system_omp_feature(id="f6b2c44c-693c-4763-b010-895aa3d236bd",
        feature_profile_id="f6dd22c8-0b4f-496c-9a0b-6813d1f8b8ac")
    ```


    :param _builtins.str feature_profile_id: Feature Profile ID
    :param _builtins.str id: The id of the Feature
    """
    __args__ = dict()
    __args__['featureProfileId'] = feature_profile_id
    __args__['id'] = id
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('sdwan:index/getSystemOmpFeature:getSystemOmpFeature', __args__, opts=opts, typ=GetSystemOmpFeatureResult).value

    return AwaitableGetSystemOmpFeatureResult(
        advertise_ipv4_bgp=pulumi.get(__ret__, 'advertise_ipv4_bgp'),
        advertise_ipv4_bgp_variable=pulumi.get(__ret__, 'advertise_ipv4_bgp_variable'),
        advertise_ipv4_connected=pulumi.get(__ret__, 'advertise_ipv4_connected'),
        advertise_ipv4_connected_variable=pulumi.get(__ret__, 'advertise_ipv4_connected_variable'),
        advertise_ipv4_eigrp=pulumi.get(__ret__, 'advertise_ipv4_eigrp'),
        advertise_ipv4_eigrp_variable=pulumi.get(__ret__, 'advertise_ipv4_eigrp_variable'),
        advertise_ipv4_isis=pulumi.get(__ret__, 'advertise_ipv4_isis'),
        advertise_ipv4_isis_variable=pulumi.get(__ret__, 'advertise_ipv4_isis_variable'),
        advertise_ipv4_lisp=pulumi.get(__ret__, 'advertise_ipv4_lisp'),
        advertise_ipv4_lisp_variable=pulumi.get(__ret__, 'advertise_ipv4_lisp_variable'),
        advertise_ipv4_ospf=pulumi.get(__ret__, 'advertise_ipv4_ospf'),
        advertise_ipv4_ospf_v3=pulumi.get(__ret__, 'advertise_ipv4_ospf_v3'),
        advertise_ipv4_ospf_v3_variable=pulumi.get(__ret__, 'advertise_ipv4_ospf_v3_variable'),
        advertise_ipv4_ospf_variable=pulumi.get(__ret__, 'advertise_ipv4_ospf_variable'),
        advertise_ipv4_static=pulumi.get(__ret__, 'advertise_ipv4_static'),
        advertise_ipv4_static_variable=pulumi.get(__ret__, 'advertise_ipv4_static_variable'),
        advertise_ipv6_bgp=pulumi.get(__ret__, 'advertise_ipv6_bgp'),
        advertise_ipv6_bgp_variable=pulumi.get(__ret__, 'advertise_ipv6_bgp_variable'),
        advertise_ipv6_connected=pulumi.get(__ret__, 'advertise_ipv6_connected'),
        advertise_ipv6_connected_variable=pulumi.get(__ret__, 'advertise_ipv6_connected_variable'),
        advertise_ipv6_eigrp=pulumi.get(__ret__, 'advertise_ipv6_eigrp'),
        advertise_ipv6_eigrp_variable=pulumi.get(__ret__, 'advertise_ipv6_eigrp_variable'),
        advertise_ipv6_isis=pulumi.get(__ret__, 'advertise_ipv6_isis'),
        advertise_ipv6_isis_variable=pulumi.get(__ret__, 'advertise_ipv6_isis_variable'),
        advertise_ipv6_lisp=pulumi.get(__ret__, 'advertise_ipv6_lisp'),
        advertise_ipv6_lisp_variable=pulumi.get(__ret__, 'advertise_ipv6_lisp_variable'),
        advertise_ipv6_ospf=pulumi.get(__ret__, 'advertise_ipv6_ospf'),
        advertise_ipv6_ospf_variable=pulumi.get(__ret__, 'advertise_ipv6_ospf_variable'),
        advertise_ipv6_static=pulumi.get(__ret__, 'advertise_ipv6_static'),
        advertise_ipv6_static_variable=pulumi.get(__ret__, 'advertise_ipv6_static_variable'),
        advertisement_interval=pulumi.get(__ret__, 'advertisement_interval'),
        advertisement_interval_variable=pulumi.get(__ret__, 'advertisement_interval_variable'),
        description=pulumi.get(__ret__, 'description'),
        ecmp_limit=pulumi.get(__ret__, 'ecmp_limit'),
        ecmp_limit_variable=pulumi.get(__ret__, 'ecmp_limit_variable'),
        eor_timer=pulumi.get(__ret__, 'eor_timer'),
        eor_timer_variable=pulumi.get(__ret__, 'eor_timer_variable'),
        feature_profile_id=pulumi.get(__ret__, 'feature_profile_id'),
        graceful_restart=pulumi.get(__ret__, 'graceful_restart'),
        graceful_restart_timer=pulumi.get(__ret__, 'graceful_restart_timer'),
        graceful_restart_timer_variable=pulumi.get(__ret__, 'graceful_restart_timer_variable'),
        graceful_restart_variable=pulumi.get(__ret__, 'graceful_restart_variable'),
        holdtime=pulumi.get(__ret__, 'holdtime'),
        holdtime_variable=pulumi.get(__ret__, 'holdtime_variable'),
        id=pulumi.get(__ret__, 'id'),
        ignore_region_path_length=pulumi.get(__ret__, 'ignore_region_path_length'),
        ignore_region_path_length_variable=pulumi.get(__ret__, 'ignore_region_path_length_variable'),
        name=pulumi.get(__ret__, 'name'),
        omp_admin_distance_ipv4=pulumi.get(__ret__, 'omp_admin_distance_ipv4'),
        omp_admin_distance_ipv4_variable=pulumi.get(__ret__, 'omp_admin_distance_ipv4_variable'),
        omp_admin_distance_ipv6=pulumi.get(__ret__, 'omp_admin_distance_ipv6'),
        omp_admin_distance_ipv6_variable=pulumi.get(__ret__, 'omp_admin_distance_ipv6_variable'),
        overlay_as=pulumi.get(__ret__, 'overlay_as'),
        overlay_as_variable=pulumi.get(__ret__, 'overlay_as_variable'),
        paths_advertised_per_prefix=pulumi.get(__ret__, 'paths_advertised_per_prefix'),
        paths_advertised_per_prefix_variable=pulumi.get(__ret__, 'paths_advertised_per_prefix_variable'),
        shutdown=pulumi.get(__ret__, 'shutdown'),
        shutdown_variable=pulumi.get(__ret__, 'shutdown_variable'),
        site_types=pulumi.get(__ret__, 'site_types'),
        site_types_variable=pulumi.get(__ret__, 'site_types_variable'),
        transport_gateway=pulumi.get(__ret__, 'transport_gateway'),
        transport_gateway_variable=pulumi.get(__ret__, 'transport_gateway_variable'),
        version=pulumi.get(__ret__, 'version'))
def get_system_omp_feature_output(feature_profile_id: Optional[pulumi.Input[_builtins.str]] = None,
                                  id: Optional[pulumi.Input[_builtins.str]] = None,
                                  opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetSystemOmpFeatureResult]:
    """
    This data source can read the System OMP Feature.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_sdwan as sdwan

    example = sdwan.get_system_omp_feature(id="f6b2c44c-693c-4763-b010-895aa3d236bd",
        feature_profile_id="f6dd22c8-0b4f-496c-9a0b-6813d1f8b8ac")
    ```


    :param _builtins.str feature_profile_id: Feature Profile ID
    :param _builtins.str id: The id of the Feature
    """
    __args__ = dict()
    __args__['featureProfileId'] = feature_profile_id
    __args__['id'] = id
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('sdwan:index/getSystemOmpFeature:getSystemOmpFeature', __args__, opts=opts, typ=GetSystemOmpFeatureResult)
    return __ret__.apply(lambda __response__: GetSystemOmpFeatureResult(
        advertise_ipv4_bgp=pulumi.get(__response__, 'advertise_ipv4_bgp'),
        advertise_ipv4_bgp_variable=pulumi.get(__response__, 'advertise_ipv4_bgp_variable'),
        advertise_ipv4_connected=pulumi.get(__response__, 'advertise_ipv4_connected'),
        advertise_ipv4_connected_variable=pulumi.get(__response__, 'advertise_ipv4_connected_variable'),
        advertise_ipv4_eigrp=pulumi.get(__response__, 'advertise_ipv4_eigrp'),
        advertise_ipv4_eigrp_variable=pulumi.get(__response__, 'advertise_ipv4_eigrp_variable'),
        advertise_ipv4_isis=pulumi.get(__response__, 'advertise_ipv4_isis'),
        advertise_ipv4_isis_variable=pulumi.get(__response__, 'advertise_ipv4_isis_variable'),
        advertise_ipv4_lisp=pulumi.get(__response__, 'advertise_ipv4_lisp'),
        advertise_ipv4_lisp_variable=pulumi.get(__response__, 'advertise_ipv4_lisp_variable'),
        advertise_ipv4_ospf=pulumi.get(__response__, 'advertise_ipv4_ospf'),
        advertise_ipv4_ospf_v3=pulumi.get(__response__, 'advertise_ipv4_ospf_v3'),
        advertise_ipv4_ospf_v3_variable=pulumi.get(__response__, 'advertise_ipv4_ospf_v3_variable'),
        advertise_ipv4_ospf_variable=pulumi.get(__response__, 'advertise_ipv4_ospf_variable'),
        advertise_ipv4_static=pulumi.get(__response__, 'advertise_ipv4_static'),
        advertise_ipv4_static_variable=pulumi.get(__response__, 'advertise_ipv4_static_variable'),
        advertise_ipv6_bgp=pulumi.get(__response__, 'advertise_ipv6_bgp'),
        advertise_ipv6_bgp_variable=pulumi.get(__response__, 'advertise_ipv6_bgp_variable'),
        advertise_ipv6_connected=pulumi.get(__response__, 'advertise_ipv6_connected'),
        advertise_ipv6_connected_variable=pulumi.get(__response__, 'advertise_ipv6_connected_variable'),
        advertise_ipv6_eigrp=pulumi.get(__response__, 'advertise_ipv6_eigrp'),
        advertise_ipv6_eigrp_variable=pulumi.get(__response__, 'advertise_ipv6_eigrp_variable'),
        advertise_ipv6_isis=pulumi.get(__response__, 'advertise_ipv6_isis'),
        advertise_ipv6_isis_variable=pulumi.get(__response__, 'advertise_ipv6_isis_variable'),
        advertise_ipv6_lisp=pulumi.get(__response__, 'advertise_ipv6_lisp'),
        advertise_ipv6_lisp_variable=pulumi.get(__response__, 'advertise_ipv6_lisp_variable'),
        advertise_ipv6_ospf=pulumi.get(__response__, 'advertise_ipv6_ospf'),
        advertise_ipv6_ospf_variable=pulumi.get(__response__, 'advertise_ipv6_ospf_variable'),
        advertise_ipv6_static=pulumi.get(__response__, 'advertise_ipv6_static'),
        advertise_ipv6_static_variable=pulumi.get(__response__, 'advertise_ipv6_static_variable'),
        advertisement_interval=pulumi.get(__response__, 'advertisement_interval'),
        advertisement_interval_variable=pulumi.get(__response__, 'advertisement_interval_variable'),
        description=pulumi.get(__response__, 'description'),
        ecmp_limit=pulumi.get(__response__, 'ecmp_limit'),
        ecmp_limit_variable=pulumi.get(__response__, 'ecmp_limit_variable'),
        eor_timer=pulumi.get(__response__, 'eor_timer'),
        eor_timer_variable=pulumi.get(__response__, 'eor_timer_variable'),
        feature_profile_id=pulumi.get(__response__, 'feature_profile_id'),
        graceful_restart=pulumi.get(__response__, 'graceful_restart'),
        graceful_restart_timer=pulumi.get(__response__, 'graceful_restart_timer'),
        graceful_restart_timer_variable=pulumi.get(__response__, 'graceful_restart_timer_variable'),
        graceful_restart_variable=pulumi.get(__response__, 'graceful_restart_variable'),
        holdtime=pulumi.get(__response__, 'holdtime'),
        holdtime_variable=pulumi.get(__response__, 'holdtime_variable'),
        id=pulumi.get(__response__, 'id'),
        ignore_region_path_length=pulumi.get(__response__, 'ignore_region_path_length'),
        ignore_region_path_length_variable=pulumi.get(__response__, 'ignore_region_path_length_variable'),
        name=pulumi.get(__response__, 'name'),
        omp_admin_distance_ipv4=pulumi.get(__response__, 'omp_admin_distance_ipv4'),
        omp_admin_distance_ipv4_variable=pulumi.get(__response__, 'omp_admin_distance_ipv4_variable'),
        omp_admin_distance_ipv6=pulumi.get(__response__, 'omp_admin_distance_ipv6'),
        omp_admin_distance_ipv6_variable=pulumi.get(__response__, 'omp_admin_distance_ipv6_variable'),
        overlay_as=pulumi.get(__response__, 'overlay_as'),
        overlay_as_variable=pulumi.get(__response__, 'overlay_as_variable'),
        paths_advertised_per_prefix=pulumi.get(__response__, 'paths_advertised_per_prefix'),
        paths_advertised_per_prefix_variable=pulumi.get(__response__, 'paths_advertised_per_prefix_variable'),
        shutdown=pulumi.get(__response__, 'shutdown'),
        shutdown_variable=pulumi.get(__response__, 'shutdown_variable'),
        site_types=pulumi.get(__response__, 'site_types'),
        site_types_variable=pulumi.get(__response__, 'site_types_variable'),
        transport_gateway=pulumi.get(__response__, 'transport_gateway'),
        transport_gateway_variable=pulumi.get(__response__, 'transport_gateway_variable'),
        version=pulumi.get(__response__, 'version')))
