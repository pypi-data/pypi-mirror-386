# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities

__all__ = [
    'GetServiceObjectTrackerFeatureResult',
    'AwaitableGetServiceObjectTrackerFeatureResult',
    'get_service_object_tracker_feature',
    'get_service_object_tracker_feature_output',
]

@pulumi.output_type
class GetServiceObjectTrackerFeatureResult:
    """
    A collection of values returned by getServiceObjectTrackerFeature.
    """
    def __init__(__self__, description=None, feature_profile_id=None, id=None, interface=None, interface_variable=None, name=None, object_tracker_id=None, object_tracker_id_variable=None, object_tracker_type=None, route_ip=None, route_ip_variable=None, route_mask=None, route_mask_variable=None, version=None, vpn=None, vpn_variable=None):
        if description and not isinstance(description, str):
            raise TypeError("Expected argument 'description' to be a str")
        pulumi.set(__self__, "description", description)
        if feature_profile_id and not isinstance(feature_profile_id, str):
            raise TypeError("Expected argument 'feature_profile_id' to be a str")
        pulumi.set(__self__, "feature_profile_id", feature_profile_id)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if interface and not isinstance(interface, str):
            raise TypeError("Expected argument 'interface' to be a str")
        pulumi.set(__self__, "interface", interface)
        if interface_variable and not isinstance(interface_variable, str):
            raise TypeError("Expected argument 'interface_variable' to be a str")
        pulumi.set(__self__, "interface_variable", interface_variable)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)
        if object_tracker_id and not isinstance(object_tracker_id, int):
            raise TypeError("Expected argument 'object_tracker_id' to be a int")
        pulumi.set(__self__, "object_tracker_id", object_tracker_id)
        if object_tracker_id_variable and not isinstance(object_tracker_id_variable, str):
            raise TypeError("Expected argument 'object_tracker_id_variable' to be a str")
        pulumi.set(__self__, "object_tracker_id_variable", object_tracker_id_variable)
        if object_tracker_type and not isinstance(object_tracker_type, str):
            raise TypeError("Expected argument 'object_tracker_type' to be a str")
        pulumi.set(__self__, "object_tracker_type", object_tracker_type)
        if route_ip and not isinstance(route_ip, str):
            raise TypeError("Expected argument 'route_ip' to be a str")
        pulumi.set(__self__, "route_ip", route_ip)
        if route_ip_variable and not isinstance(route_ip_variable, str):
            raise TypeError("Expected argument 'route_ip_variable' to be a str")
        pulumi.set(__self__, "route_ip_variable", route_ip_variable)
        if route_mask and not isinstance(route_mask, str):
            raise TypeError("Expected argument 'route_mask' to be a str")
        pulumi.set(__self__, "route_mask", route_mask)
        if route_mask_variable and not isinstance(route_mask_variable, str):
            raise TypeError("Expected argument 'route_mask_variable' to be a str")
        pulumi.set(__self__, "route_mask_variable", route_mask_variable)
        if version and not isinstance(version, int):
            raise TypeError("Expected argument 'version' to be a int")
        pulumi.set(__self__, "version", version)
        if vpn and not isinstance(vpn, int):
            raise TypeError("Expected argument 'vpn' to be a int")
        pulumi.set(__self__, "vpn", vpn)
        if vpn_variable and not isinstance(vpn_variable, str):
            raise TypeError("Expected argument 'vpn_variable' to be a str")
        pulumi.set(__self__, "vpn_variable", vpn_variable)

    @_builtins.property
    @pulumi.getter
    def description(self) -> _builtins.str:
        """
        The description of the Feature
        """
        return pulumi.get(self, "description")

    @_builtins.property
    @pulumi.getter(name="featureProfileId")
    def feature_profile_id(self) -> _builtins.str:
        """
        Feature Profile ID
        """
        return pulumi.get(self, "feature_profile_id")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        The id of the Feature
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter
    def interface(self) -> _builtins.str:
        """
        interface name
        """
        return pulumi.get(self, "interface")

    @_builtins.property
    @pulumi.getter(name="interfaceVariable")
    def interface_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "interface_variable")

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        """
        The name of the Feature
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter(name="objectTrackerId")
    def object_tracker_id(self) -> _builtins.int:
        """
        Object tracker ID
        """
        return pulumi.get(self, "object_tracker_id")

    @_builtins.property
    @pulumi.getter(name="objectTrackerIdVariable")
    def object_tracker_id_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "object_tracker_id_variable")

    @_builtins.property
    @pulumi.getter(name="objectTrackerType")
    def object_tracker_type(self) -> _builtins.str:
        """
        objectTrackerType:Interface SIG Route
        """
        return pulumi.get(self, "object_tracker_type")

    @_builtins.property
    @pulumi.getter(name="routeIp")
    def route_ip(self) -> _builtins.str:
        """
        IP address
        """
        return pulumi.get(self, "route_ip")

    @_builtins.property
    @pulumi.getter(name="routeIpVariable")
    def route_ip_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "route_ip_variable")

    @_builtins.property
    @pulumi.getter(name="routeMask")
    def route_mask(self) -> _builtins.str:
        """
        IP mask
        """
        return pulumi.get(self, "route_mask")

    @_builtins.property
    @pulumi.getter(name="routeMaskVariable")
    def route_mask_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "route_mask_variable")

    @_builtins.property
    @pulumi.getter
    def version(self) -> _builtins.int:
        """
        The version of the Feature
        """
        return pulumi.get(self, "version")

    @_builtins.property
    @pulumi.getter
    def vpn(self) -> _builtins.int:
        """
        VPN
        """
        return pulumi.get(self, "vpn")

    @_builtins.property
    @pulumi.getter(name="vpnVariable")
    def vpn_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "vpn_variable")


class AwaitableGetServiceObjectTrackerFeatureResult(GetServiceObjectTrackerFeatureResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetServiceObjectTrackerFeatureResult(
            description=self.description,
            feature_profile_id=self.feature_profile_id,
            id=self.id,
            interface=self.interface,
            interface_variable=self.interface_variable,
            name=self.name,
            object_tracker_id=self.object_tracker_id,
            object_tracker_id_variable=self.object_tracker_id_variable,
            object_tracker_type=self.object_tracker_type,
            route_ip=self.route_ip,
            route_ip_variable=self.route_ip_variable,
            route_mask=self.route_mask,
            route_mask_variable=self.route_mask_variable,
            version=self.version,
            vpn=self.vpn,
            vpn_variable=self.vpn_variable)


def get_service_object_tracker_feature(feature_profile_id: Optional[_builtins.str] = None,
                                       id: Optional[_builtins.str] = None,
                                       opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetServiceObjectTrackerFeatureResult:
    """
    This data source can read the Service Object Tracker Feature.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_sdwan as sdwan

    example = sdwan.get_service_object_tracker_feature(id="f6b2c44c-693c-4763-b010-895aa3d236bd",
        feature_profile_id="f6dd22c8-0b4f-496c-9a0b-6813d1f8b8ac")
    ```


    :param _builtins.str feature_profile_id: Feature Profile ID
    :param _builtins.str id: The id of the Feature
    """
    __args__ = dict()
    __args__['featureProfileId'] = feature_profile_id
    __args__['id'] = id
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('sdwan:index/getServiceObjectTrackerFeature:getServiceObjectTrackerFeature', __args__, opts=opts, typ=GetServiceObjectTrackerFeatureResult).value

    return AwaitableGetServiceObjectTrackerFeatureResult(
        description=pulumi.get(__ret__, 'description'),
        feature_profile_id=pulumi.get(__ret__, 'feature_profile_id'),
        id=pulumi.get(__ret__, 'id'),
        interface=pulumi.get(__ret__, 'interface'),
        interface_variable=pulumi.get(__ret__, 'interface_variable'),
        name=pulumi.get(__ret__, 'name'),
        object_tracker_id=pulumi.get(__ret__, 'object_tracker_id'),
        object_tracker_id_variable=pulumi.get(__ret__, 'object_tracker_id_variable'),
        object_tracker_type=pulumi.get(__ret__, 'object_tracker_type'),
        route_ip=pulumi.get(__ret__, 'route_ip'),
        route_ip_variable=pulumi.get(__ret__, 'route_ip_variable'),
        route_mask=pulumi.get(__ret__, 'route_mask'),
        route_mask_variable=pulumi.get(__ret__, 'route_mask_variable'),
        version=pulumi.get(__ret__, 'version'),
        vpn=pulumi.get(__ret__, 'vpn'),
        vpn_variable=pulumi.get(__ret__, 'vpn_variable'))
def get_service_object_tracker_feature_output(feature_profile_id: Optional[pulumi.Input[_builtins.str]] = None,
                                              id: Optional[pulumi.Input[_builtins.str]] = None,
                                              opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetServiceObjectTrackerFeatureResult]:
    """
    This data source can read the Service Object Tracker Feature.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_sdwan as sdwan

    example = sdwan.get_service_object_tracker_feature(id="f6b2c44c-693c-4763-b010-895aa3d236bd",
        feature_profile_id="f6dd22c8-0b4f-496c-9a0b-6813d1f8b8ac")
    ```


    :param _builtins.str feature_profile_id: Feature Profile ID
    :param _builtins.str id: The id of the Feature
    """
    __args__ = dict()
    __args__['featureProfileId'] = feature_profile_id
    __args__['id'] = id
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('sdwan:index/getServiceObjectTrackerFeature:getServiceObjectTrackerFeature', __args__, opts=opts, typ=GetServiceObjectTrackerFeatureResult)
    return __ret__.apply(lambda __response__: GetServiceObjectTrackerFeatureResult(
        description=pulumi.get(__response__, 'description'),
        feature_profile_id=pulumi.get(__response__, 'feature_profile_id'),
        id=pulumi.get(__response__, 'id'),
        interface=pulumi.get(__response__, 'interface'),
        interface_variable=pulumi.get(__response__, 'interface_variable'),
        name=pulumi.get(__response__, 'name'),
        object_tracker_id=pulumi.get(__response__, 'object_tracker_id'),
        object_tracker_id_variable=pulumi.get(__response__, 'object_tracker_id_variable'),
        object_tracker_type=pulumi.get(__response__, 'object_tracker_type'),
        route_ip=pulumi.get(__response__, 'route_ip'),
        route_ip_variable=pulumi.get(__response__, 'route_ip_variable'),
        route_mask=pulumi.get(__response__, 'route_mask'),
        route_mask_variable=pulumi.get(__response__, 'route_mask_variable'),
        version=pulumi.get(__response__, 'version'),
        vpn=pulumi.get(__response__, 'vpn'),
        vpn_variable=pulumi.get(__response__, 'vpn_variable')))
