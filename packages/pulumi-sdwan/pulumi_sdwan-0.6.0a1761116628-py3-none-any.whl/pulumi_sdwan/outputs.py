# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities
from . import outputs

__all__ = [
    'AllowUrlListPolicyObjectEntry',
    'AppProbeClassPolicyObjectMapping',
    'ApplicationAwareRoutingPolicyDefinitionSequence',
    'ApplicationAwareRoutingPolicyDefinitionSequenceActionEntry',
    'ApplicationAwareRoutingPolicyDefinitionSequenceActionEntrySlaClassParameter',
    'ApplicationAwareRoutingPolicyDefinitionSequenceMatchEntry',
    'ApplicationListPolicyObjectEntry',
    'ApplicationPriorityQosPolicyQosScheduler',
    'ApplicationPriorityTrafficPolicyPolicySequence',
    'ApplicationPriorityTrafficPolicyPolicySequenceAction',
    'ApplicationPriorityTrafficPolicyPolicySequenceActionSetParameter',
    'ApplicationPriorityTrafficPolicyPolicySequenceActionSlaClass',
    'ApplicationPriorityTrafficPolicyPolicySequenceMatchEntry',
    'AsPathListPolicyObjectEntry',
    'AttachFeatureDeviceTemplateDevice',
    'BlockUrlListPolicyObjectEntry',
    'CedgeAaaFeatureTemplateAccountingRule',
    'CedgeAaaFeatureTemplateAuthorizationRule',
    'CedgeAaaFeatureTemplateRadiusClient',
    'CedgeAaaFeatureTemplateRadiusClientVpnConfiguration',
    'CedgeAaaFeatureTemplateRadiusServerGroup',
    'CedgeAaaFeatureTemplateRadiusServerGroupServer',
    'CedgeAaaFeatureTemplateTacacsServerGroup',
    'CedgeAaaFeatureTemplateTacacsServerGroupServer',
    'CedgeAaaFeatureTemplateUser',
    'CedgeAaaFeatureTemplateUserSshPubkey',
    'CedgeIgmpFeatureTemplateInterface',
    'CedgeIgmpFeatureTemplateInterfaceJoinGroup',
    'CedgePimFeatureTemplateInterface',
    'CedgePimFeatureTemplateRpAddress',
    'CedgePimFeatureTemplateRpAnnounceField',
    'CedgePimFeatureTemplateRpCandidate',
    'CellularControllerFeatureTemplateDataProfile',
    'CentralizedPolicyDefinition',
    'CentralizedPolicyDefinitionEntry',
    'CflowdPolicyDefinitionCollector',
    'CiscoBfdFeatureTemplateColor',
    'CiscoBgpFeatureTemplateAddressFamily',
    'CiscoBgpFeatureTemplateAddressFamilyIpv4AggregateAddress',
    'CiscoBgpFeatureTemplateAddressFamilyIpv4Network',
    'CiscoBgpFeatureTemplateAddressFamilyIpv6AggregateAddress',
    'CiscoBgpFeatureTemplateAddressFamilyIpv6Network',
    'CiscoBgpFeatureTemplateAddressFamilyRedistributeRoute',
    'CiscoBgpFeatureTemplateIpv4Neighbor',
    'CiscoBgpFeatureTemplateIpv4NeighborAddressFamily',
    'CiscoBgpFeatureTemplateIpv4NeighborAddressFamilyRoutePolicy',
    'CiscoBgpFeatureTemplateIpv4RouteTarget',
    'CiscoBgpFeatureTemplateIpv4RouteTargetExport',
    'CiscoBgpFeatureTemplateIpv4RouteTargetImport',
    'CiscoBgpFeatureTemplateIpv6Neighbor',
    'CiscoBgpFeatureTemplateIpv6NeighborAddressFamily',
    'CiscoBgpFeatureTemplateIpv6NeighborAddressFamilyRoutePolicy',
    'CiscoBgpFeatureTemplateIpv6RouteTarget',
    'CiscoBgpFeatureTemplateIpv6RouteTargetExport',
    'CiscoBgpFeatureTemplateIpv6RouteTargetImport',
    'CiscoBgpFeatureTemplateMplsInterface',
    'CiscoDhcpServerFeatureTemplateOption',
    'CiscoDhcpServerFeatureTemplateStaticLease',
    'CiscoLoggingFeatureTemplateIpv4Server',
    'CiscoLoggingFeatureTemplateIpv6Server',
    'CiscoLoggingFeatureTemplateTlsProfile',
    'CiscoNtpFeatureTemplateAuthenticationKey',
    'CiscoNtpFeatureTemplateServer',
    'CiscoOmpFeatureTemplateAdvertiseIpv4Route',
    'CiscoOmpFeatureTemplateAdvertiseIpv6Route',
    'CiscoOspfFeatureTemplateArea',
    'CiscoOspfFeatureTemplateAreaInterface',
    'CiscoOspfFeatureTemplateAreaRange',
    'CiscoOspfFeatureTemplateMaxMetricRouterLsa',
    'CiscoOspfFeatureTemplateRedistribute',
    'CiscoOspfFeatureTemplateRoutePolicy',
    'CiscoOspfv3FeatureTemplateIpv4Area',
    'CiscoOspfv3FeatureTemplateIpv4AreaInterface',
    'CiscoOspfv3FeatureTemplateIpv4AreaRange',
    'CiscoOspfv3FeatureTemplateIpv4MaxMetricRouterLsa',
    'CiscoOspfv3FeatureTemplateIpv4Redistribute',
    'CiscoOspfv3FeatureTemplateIpv6Area',
    'CiscoOspfv3FeatureTemplateIpv6AreaInterface',
    'CiscoOspfv3FeatureTemplateIpv6AreaRange',
    'CiscoOspfv3FeatureTemplateIpv6MaxMetricRouterLsa',
    'CiscoOspfv3FeatureTemplateIpv6Redistribute',
    'CiscoSecureInternetGatewayFeatureTemplateInterface',
    'CiscoSecureInternetGatewayFeatureTemplateService',
    'CiscoSecureInternetGatewayFeatureTemplateServiceInterfacePair',
    'CiscoSecureInternetGatewayFeatureTemplateTracker',
    'CiscoSecurityFeatureTemplateKey',
    'CiscoSecurityFeatureTemplateKeychain',
    'CiscoSnmpFeatureTemplateCommunity',
    'CiscoSnmpFeatureTemplateGroup',
    'CiscoSnmpFeatureTemplateTrapTarget',
    'CiscoSnmpFeatureTemplateUser',
    'CiscoSnmpFeatureTemplateView',
    'CiscoSnmpFeatureTemplateViewObjectIdentifier',
    'CiscoSystemFeatureTemplateGeoFencingSmsPhoneNumber',
    'CiscoSystemFeatureTemplateObjectTracker',
    'CiscoSystemFeatureTemplateObjectTrackerGroupTracksId',
    'CiscoSystemFeatureTemplateTracker',
    'CiscoThousandeyesFeatureTemplateVirtualApplication',
    'CiscoTrustsecFeatureTemplateSxpConnection',
    'CiscoVpnFeatureTemplateDnsHost',
    'CiscoVpnFeatureTemplateDnsIpv4Server',
    'CiscoVpnFeatureTemplateDnsIpv6Server',
    'CiscoVpnFeatureTemplateIpv4StaticGreRoute',
    'CiscoVpnFeatureTemplateIpv4StaticIpsecRoute',
    'CiscoVpnFeatureTemplateIpv4StaticRoute',
    'CiscoVpnFeatureTemplateIpv4StaticRouteNextHop',
    'CiscoVpnFeatureTemplateIpv4StaticRouteTrackNextHop',
    'CiscoVpnFeatureTemplateIpv4StaticServiceRoute',
    'CiscoVpnFeatureTemplateIpv6StaticRoute',
    'CiscoVpnFeatureTemplateIpv6StaticRouteNextHop',
    'CiscoVpnFeatureTemplateNat64Pool',
    'CiscoVpnFeatureTemplateNatPool',
    'CiscoVpnFeatureTemplateOmpAdvertiseIpv4Route',
    'CiscoVpnFeatureTemplateOmpAdvertiseIpv4RoutePrefix',
    'CiscoVpnFeatureTemplateOmpAdvertiseIpv6Route',
    'CiscoVpnFeatureTemplateOmpAdvertiseIpv6RoutePrefix',
    'CiscoVpnFeatureTemplatePortForwardRule',
    'CiscoVpnFeatureTemplateRouteGlobalExport',
    'CiscoVpnFeatureTemplateRouteGlobalExportRedistribute',
    'CiscoVpnFeatureTemplateRouteGlobalImport',
    'CiscoVpnFeatureTemplateRouteGlobalImportRedistribute',
    'CiscoVpnFeatureTemplateRouteVpnImport',
    'CiscoVpnFeatureTemplateRouteVpnImportRedistribute',
    'CiscoVpnFeatureTemplateService',
    'CiscoVpnFeatureTemplateStaticNatRule',
    'CiscoVpnFeatureTemplateStaticNatSubnetRule',
    'CiscoVpnInterfaceFeatureTemplateAccessList',
    'CiscoVpnInterfaceFeatureTemplateIpv4SecondaryAddress',
    'CiscoVpnInterfaceFeatureTemplateIpv4Vrrp',
    'CiscoVpnInterfaceFeatureTemplateIpv4VrrpIpv4SecondaryAddress',
    'CiscoVpnInterfaceFeatureTemplateIpv4VrrpTrackingObject',
    'CiscoVpnInterfaceFeatureTemplateIpv6AccessList',
    'CiscoVpnInterfaceFeatureTemplateIpv6DhcpHelper',
    'CiscoVpnInterfaceFeatureTemplateIpv6SecondaryAddress',
    'CiscoVpnInterfaceFeatureTemplateIpv6Vrrp',
    'CiscoVpnInterfaceFeatureTemplateIpv6VrrpIpv6Address',
    'CiscoVpnInterfaceFeatureTemplateStaticArp',
    'CiscoVpnInterfaceFeatureTemplateStaticNat66Entry',
    'CiscoVpnInterfaceFeatureTemplateStaticNatEntry',
    'CiscoVpnInterfaceFeatureTemplateStaticPortForwardEntry',
    'CiscoVpnInterfaceFeatureTemplateTunnelInterfaceEncapsulation',
    'CiscoVpnInterfaceGreFeatureTemplateAccessList',
    'CiscoWirelessLanFeatureTemplateSsid',
    'ColorListPolicyObjectEntry',
    'ConfigurationGroupDevice',
    'ConfigurationGroupDeviceVariable',
    'ConfigurationGroupTopologyDevice',
    'ConfigurationGroupTopologyDeviceUnsupportedFeature',
    'CustomControlTopologyPolicyDefinitionSequence',
    'CustomControlTopologyPolicyDefinitionSequenceActionEntry',
    'CustomControlTopologyPolicyDefinitionSequenceActionEntrySetParameter',
    'CustomControlTopologyPolicyDefinitionSequenceMatchEntry',
    'DataFqdnPrefixListPolicyObjectEntry',
    'DataIpv4PrefixListPolicyObjectEntry',
    'DataIpv6PrefixListPolicyObjectEntry',
    'DnsSecurityPolicyDefinitionTargetVpn',
    'DnsSecurityPolicyTargetVpn',
    'DomainListPolicyObjectEntry',
    'EigrpFeatureTemplateAddressFamily',
    'EigrpFeatureTemplateAddressFamilyNetwork',
    'EigrpFeatureTemplateAddressFamilyRedistribute',
    'EigrpFeatureTemplateInterface',
    'EigrpFeatureTemplateInterfaceSummaryAddress',
    'EigrpFeatureTemplateKey',
    'ExpandedCommunityListPolicyObjectEntry',
    'ExtendedCommunityListPolicyObjectEntry',
    'FeatureDeviceTemplateGeneralTemplate',
    'FeatureDeviceTemplateGeneralTemplateSubTemplate',
    'FeatureDeviceTemplateGeneralTemplateSubTemplateSubTemplate',
    'GeoLocationListPolicyObjectEntry',
    'HubAndSpokeTopologyPolicyDefinitionTopology',
    'HubAndSpokeTopologyPolicyDefinitionTopologySpoke',
    'HubAndSpokeTopologyPolicyDefinitionTopologySpokeHub',
    'IntrusionPreventionPolicyDefinitionLogging',
    'IpsSignatureListPolicyObjectEntry',
    'Ipv4AclPolicyDefinitionSequence',
    'Ipv4AclPolicyDefinitionSequenceActionEntry',
    'Ipv4AclPolicyDefinitionSequenceActionEntrySetParameter',
    'Ipv4AclPolicyDefinitionSequenceMatchEntry',
    'Ipv4DeviceAclPolicyDefinitionSequence',
    'Ipv4DeviceAclPolicyDefinitionSequenceActionEntry',
    'Ipv4DeviceAclPolicyDefinitionSequenceMatchEntry',
    'Ipv4PrefixListPolicyObjectEntry',
    'Ipv6AclPolicyDefinitionSequence',
    'Ipv6AclPolicyDefinitionSequenceActionEntry',
    'Ipv6AclPolicyDefinitionSequenceActionEntrySetParameter',
    'Ipv6AclPolicyDefinitionSequenceMatchEntry',
    'Ipv6DeviceAclPolicyDefinitionSequence',
    'Ipv6DeviceAclPolicyDefinitionSequenceActionEntry',
    'Ipv6DeviceAclPolicyDefinitionSequenceMatchEntry',
    'Ipv6PrefixListPolicyObjectEntry',
    'LocalApplicationListPolicyObjectEntry',
    'LocalizedPolicyDefinition',
    'MeshTopologyPolicyDefinitionRegion',
    'OtherThousandeyesFeatureVirtualApplication',
    'OtherUcseFeatureInterface',
    'PolicyGroupDevice',
    'PolicyGroupDeviceVariable',
    'PolicyObjectAppProbeClassEntry',
    'PolicyObjectAppProbeClassEntryMap',
    'PolicyObjectApplicationListEntry',
    'PolicyObjectAsPathListEntry',
    'PolicyObjectClassMapEntry',
    'PolicyObjectColorListEntry',
    'PolicyObjectDataIpv4PrefixListEntry',
    'PolicyObjectDataIpv6PrefixListEntry',
    'PolicyObjectExtendedCommunityListEntry',
    'PolicyObjectIpv4PrefixListEntry',
    'PolicyObjectIpv6PrefixListEntry',
    'PolicyObjectMirrorEntry',
    'PolicyObjectPolicerEntry',
    'PolicyObjectPreferredColorGroupEntry',
    'PolicyObjectSecurityDataIpv4PrefixListEntry',
    'PolicyObjectSecurityFqdnListEntry',
    'PolicyObjectSecurityGeolocationListEntry',
    'PolicyObjectSecurityIdentityListEntry',
    'PolicyObjectSecurityIpsSignatureEntry',
    'PolicyObjectSecurityLocalApplicationListEntry',
    'PolicyObjectSecurityLocalDomainListEntry',
    'PolicyObjectSecurityPortListEntry',
    'PolicyObjectSecurityScalableGroupTagListEntry',
    'PolicyObjectSecurityUrlAllowListEntry',
    'PolicyObjectSecurityUrlBlockListEntry',
    'PolicyObjectSlaClassListEntry',
    'PolicyObjectStandardCommunityListEntry',
    'PolicyObjectTlocListEntry',
    'PolicyObjectVpnGroupEntry',
    'PortListPolicyObjectEntry',
    'ProtocolListPolicyObjectEntry',
    'QosMapPolicyDefinitionQosScheduler',
    'RegionListPolicyObjectEntry',
    'RewriteRulePolicyDefinitionRule',
    'RoutePolicyDefinitionSequence',
    'RoutePolicyDefinitionSequenceActionEntry',
    'RoutePolicyDefinitionSequenceMatchEntry',
    'RuleSetPolicyDefinitionRule',
    'SecurityAppHostingFeatureTemplateVirtualApplication',
    'SecurityPolicyDefinition',
    'SecurityPolicyDefinitionEntry',
    'SecurityPolicyLogging',
    'ServiceDhcpServerFeatureOptionCode',
    'ServiceDhcpServerFeatureStaticLease',
    'ServiceIpv4AclFeatureSequence',
    'ServiceIpv4AclFeatureSequenceAction',
    'ServiceIpv4AclFeatureSequenceMatchEntry',
    'ServiceIpv4AclFeatureSequenceMatchEntryDestinationPort',
    'ServiceIpv4AclFeatureSequenceMatchEntrySourcePort',
    'ServiceIpv6AclFeatureSequence',
    'ServiceIpv6AclFeatureSequenceAction',
    'ServiceIpv6AclFeatureSequenceMatchEntry',
    'ServiceIpv6AclFeatureSequenceMatchEntryDestinationPort',
    'ServiceIpv6AclFeatureSequenceMatchEntrySourcePort',
    'ServiceLanVpnFeatureAdvertiseOmpIpv4',
    'ServiceLanVpnFeatureAdvertiseOmpIpv4Prefix',
    'ServiceLanVpnFeatureAdvertiseOmpIpv6',
    'ServiceLanVpnFeatureAdvertiseOmpIpv6Prefix',
    'ServiceLanVpnFeatureGreRoute',
    'ServiceLanVpnFeatureHostMapping',
    'ServiceLanVpnFeatureIpsecRoute',
    'ServiceLanVpnFeatureIpv4ExportRouteTarget',
    'ServiceLanVpnFeatureIpv4ImportRouteTarget',
    'ServiceLanVpnFeatureIpv4StaticRoute',
    'ServiceLanVpnFeatureIpv4StaticRouteNextHop',
    'ServiceLanVpnFeatureIpv4StaticRouteNextHopWithTracker',
    'ServiceLanVpnFeatureIpv6ExportRouteTarget',
    'ServiceLanVpnFeatureIpv6ImportRouteTarget',
    'ServiceLanVpnFeatureIpv6StaticRoute',
    'ServiceLanVpnFeatureIpv6StaticRouteNextHop',
    'ServiceLanVpnFeatureNat64V4Pool',
    'ServiceLanVpnFeatureNatPool',
    'ServiceLanVpnFeatureNatPortForward',
    'ServiceLanVpnFeatureRouteLeakFromGlobalVpn',
    'ServiceLanVpnFeatureRouteLeakFromGlobalVpnRedistribution',
    'ServiceLanVpnFeatureRouteLeakFromOtherService',
    'ServiceLanVpnFeatureRouteLeakFromOtherServiceRedistribution',
    'ServiceLanVpnFeatureRouteLeakToGlobalVpn',
    'ServiceLanVpnFeatureRouteLeakToGlobalVpnRedistribution',
    'ServiceLanVpnFeatureService',
    'ServiceLanVpnFeatureServiceRoute',
    'ServiceLanVpnFeatureStaticNat',
    'ServiceLanVpnInterfaceEthernetFeatureArp',
    'ServiceLanVpnInterfaceEthernetFeatureIpv4SecondaryAddress',
    'ServiceLanVpnInterfaceEthernetFeatureIpv4Vrrp',
    'ServiceLanVpnInterfaceEthernetFeatureIpv4VrrpSecondaryAddress',
    'ServiceLanVpnInterfaceEthernetFeatureIpv4VrrpTrackingObject',
    'ServiceLanVpnInterfaceEthernetFeatureIpv6DhcpHelper',
    'ServiceLanVpnInterfaceEthernetFeatureIpv6DhcpSecondaryAddress',
    'ServiceLanVpnInterfaceEthernetFeatureIpv6SecondaryAddress',
    'ServiceLanVpnInterfaceEthernetFeatureIpv6Vrrp',
    'ServiceLanVpnInterfaceEthernetFeatureIpv6VrrpIpv6Address',
    'ServiceLanVpnInterfaceEthernetFeatureStaticNat',
    'ServiceLanVpnInterfaceSviFeatureArp',
    'ServiceLanVpnInterfaceSviFeatureIpv4SecondaryAddress',
    'ServiceLanVpnInterfaceSviFeatureIpv4Vrrp',
    'ServiceLanVpnInterfaceSviFeatureIpv4VrrpSecondaryAddress',
    'ServiceLanVpnInterfaceSviFeatureIpv4VrrpTrackingObject',
    'ServiceLanVpnInterfaceSviFeatureIpv6DhcpHelper',
    'ServiceLanVpnInterfaceSviFeatureIpv6SecondaryAddress',
    'ServiceLanVpnInterfaceSviFeatureIpv6Vrrp',
    'ServiceLanVpnInterfaceSviFeatureIpv6VrrpAddress',
    'ServiceLanVpnInterfaceSviFeatureIpv6VrrpSecondaryAddress',
    'ServiceMulticastFeatureAutoRpAnnounce',
    'ServiceMulticastFeatureAutoRpDiscovery',
    'ServiceMulticastFeatureIgmpInterface',
    'ServiceMulticastFeatureIgmpInterfaceJoinGroup',
    'ServiceMulticastFeatureMsdpGroup',
    'ServiceMulticastFeatureMsdpGroupPeer',
    'ServiceMulticastFeaturePimBsrCandidate',
    'ServiceMulticastFeaturePimBsrRpCandidate',
    'ServiceMulticastFeaturePimInterface',
    'ServiceMulticastFeatureStaticRpAddress',
    'ServiceObjectTrackerGroupFeatureTrackerElement',
    'ServiceRoutePolicyFeatureSequence',
    'ServiceRoutePolicyFeatureSequenceAction',
    'ServiceRoutePolicyFeatureSequenceMatchEntry',
    'ServiceRoutePolicyFeatureSequenceMatchEntryStandardCommunityList',
    'ServiceRoutingBgpFeatureIpv4AggregateAddress',
    'ServiceRoutingBgpFeatureIpv4Neighbor',
    'ServiceRoutingBgpFeatureIpv4NeighborAddressFamily',
    'ServiceRoutingBgpFeatureIpv4Network',
    'ServiceRoutingBgpFeatureIpv4Redistribute',
    'ServiceRoutingBgpFeatureIpv6AggregateAddress',
    'ServiceRoutingBgpFeatureIpv6Neighbor',
    'ServiceRoutingBgpFeatureIpv6NeighborAddressFamily',
    'ServiceRoutingBgpFeatureIpv6Network',
    'ServiceRoutingBgpFeatureIpv6Redistribute',
    'ServiceRoutingEigrpFeatureInterface',
    'ServiceRoutingEigrpFeatureInterfaceSummaryAddress',
    'ServiceRoutingEigrpFeatureMd5Key',
    'ServiceRoutingEigrpFeatureNetwork',
    'ServiceRoutingEigrpFeatureRedistribute',
    'ServiceRoutingOspfFeatureArea',
    'ServiceRoutingOspfFeatureAreaInterface',
    'ServiceRoutingOspfFeatureAreaRange',
    'ServiceRoutingOspfFeatureRedistribute',
    'ServiceRoutingOspfFeatureRouterLsa',
    'ServiceRoutingOspfv3Ipv4FeatureArea',
    'ServiceRoutingOspfv3Ipv4FeatureAreaInterface',
    'ServiceRoutingOspfv3Ipv4FeatureAreaRange',
    'ServiceRoutingOspfv3Ipv4FeatureRedistribute',
    'ServiceRoutingOspfv3Ipv6FeatureArea',
    'ServiceRoutingOspfv3Ipv6FeatureAreaInterface',
    'ServiceRoutingOspfv3Ipv6FeatureAreaRange',
    'ServiceRoutingOspfv3Ipv6FeatureRedistribute',
    'ServiceSwitchportFeatureInterface',
    'ServiceSwitchportFeatureStaticMacAddress',
    'ServiceTrackerGroupFeatureTrackerElement',
    'ServiceWirelessLanFeatureSsid',
    'SiteListPolicyObjectEntry',
    'StandardCommunityListPolicyObjectEntry',
    'SwitchportFeatureTemplateInterface',
    'SwitchportFeatureTemplateStaticMacAddress',
    'SystemAaaFeatureAccountingRule',
    'SystemAaaFeatureAuthorizationRule',
    'SystemAaaFeatureRadiusGroup',
    'SystemAaaFeatureRadiusGroupServer',
    'SystemAaaFeatureTacacsGroup',
    'SystemAaaFeatureTacacsGroupServer',
    'SystemAaaFeatureUser',
    'SystemAaaFeatureUserPublicKey',
    'SystemBasicFeatureAffinityPerVrf',
    'SystemBasicFeatureGpsSmsMobileNumber',
    'SystemBfdFeatureColor',
    'SystemIpv4DeviceAccessFeatureSequence',
    'SystemIpv6DeviceAccessFeatureSequence',
    'SystemLoggingFeatureIpv4Server',
    'SystemLoggingFeatureIpv6Server',
    'SystemLoggingFeatureTlsProfile',
    'SystemNtpFeatureAuthenticationKey',
    'SystemNtpFeatureServer',
    'SystemSecurityFeatureKey',
    'SystemSecurityFeatureKeychain',
    'SystemSnmpFeatureCommunity',
    'SystemSnmpFeatureGroup',
    'SystemSnmpFeatureTrapTargetServer',
    'SystemSnmpFeatureUser',
    'SystemSnmpFeatureView',
    'SystemSnmpFeatureViewOid',
    'TlocListPolicyObjectEntry',
    'TlsSslDecryptionPolicyDefinitionNetworkRule',
    'TlsSslDecryptionPolicyDefinitionNetworkRuleSourceAndDestinationConfiguration',
    'TlsSslDecryptionPolicyDefinitionUrlRule',
    'TrafficDataPolicyDefinitionSequence',
    'TrafficDataPolicyDefinitionSequenceActionEntry',
    'TrafficDataPolicyDefinitionSequenceActionEntryNatParameter',
    'TrafficDataPolicyDefinitionSequenceActionEntrySetParameter',
    'TrafficDataPolicyDefinitionSequenceMatchEntry',
    'TransportIpv4AclFeatureSequence',
    'TransportIpv4AclFeatureSequenceAction',
    'TransportIpv4AclFeatureSequenceMatchEntry',
    'TransportIpv4AclFeatureSequenceMatchEntryDestinationPort',
    'TransportIpv4AclFeatureSequenceMatchEntrySourcePort',
    'TransportIpv6AclFeatureSequence',
    'TransportIpv6AclFeatureSequenceAction',
    'TransportIpv6AclFeatureSequenceMatchEntry',
    'TransportIpv6AclFeatureSequenceMatchEntryDestinationPort',
    'TransportIpv6AclFeatureSequenceMatchEntrySourcePort',
    'TransportIpv6TrackerGroupFeatureTrackerElement',
    'TransportManagementVpnFeatureIpv4StaticRoute',
    'TransportManagementVpnFeatureIpv4StaticRouteNextHop',
    'TransportManagementVpnFeatureIpv6StaticRoute',
    'TransportManagementVpnFeatureIpv6StaticRouteNextHop',
    'TransportManagementVpnFeatureNewHostMapping',
    'TransportManagementVpnInterfaceEthernetFeatureArpEntry',
    'TransportManagementVpnInterfaceEthernetFeatureIpv4SecondaryAddress',
    'TransportRoutePolicyFeatureSequence',
    'TransportRoutePolicyFeatureSequenceAction',
    'TransportRoutePolicyFeatureSequenceMatchEntry',
    'TransportRoutePolicyFeatureSequenceMatchEntryStandardCommunityList',
    'TransportRoutingBgpFeatureIpv4AggregateAddress',
    'TransportRoutingBgpFeatureIpv4Neighbor',
    'TransportRoutingBgpFeatureIpv4NeighborAddressFamily',
    'TransportRoutingBgpFeatureIpv4Network',
    'TransportRoutingBgpFeatureIpv4Redistribute',
    'TransportRoutingBgpFeatureIpv6AggregateAddress',
    'TransportRoutingBgpFeatureIpv6Neighbor',
    'TransportRoutingBgpFeatureIpv6NeighborAddressFamily',
    'TransportRoutingBgpFeatureIpv6Network',
    'TransportRoutingBgpFeatureIpv6Redistribute',
    'TransportRoutingBgpFeatureMplsInterface',
    'TransportRoutingOspfFeatureArea',
    'TransportRoutingOspfFeatureAreaInterface',
    'TransportRoutingOspfFeatureAreaRange',
    'TransportRoutingOspfFeatureRedistribute',
    'TransportRoutingOspfFeatureRouterLsa',
    'TransportRoutingOspfv3Ipv4FeatureArea',
    'TransportRoutingOspfv3Ipv4FeatureAreaInterface',
    'TransportRoutingOspfv3Ipv4FeatureAreaRange',
    'TransportRoutingOspfv3Ipv4FeatureRedistribute',
    'TransportRoutingOspfv3Ipv6FeatureArea',
    'TransportRoutingOspfv3Ipv6FeatureAreaInterface',
    'TransportRoutingOspfv3Ipv6FeatureAreaRange',
    'TransportRoutingOspfv3Ipv6FeatureRedistribute',
    'TransportT1E1ControllerFeatureEntry',
    'TransportT1E1ControllerFeatureEntryChannelGroup',
    'TransportTrackerGroupFeatureTrackerElement',
    'TransportWanVpnFeatureIpv4StaticRoute',
    'TransportWanVpnFeatureIpv4StaticRouteNextHop',
    'TransportWanVpnFeatureIpv6StaticRoute',
    'TransportWanVpnFeatureIpv6StaticRouteNextHop',
    'TransportWanVpnFeatureNat64V4Pool',
    'TransportWanVpnFeatureNewHostMapping',
    'TransportWanVpnFeatureService',
    'TransportWanVpnInterfaceCellularFeatureArp',
    'TransportWanVpnInterfaceCellularFeatureTunnelInterfaceEncapsulation',
    'TransportWanVpnInterfaceEthernetFeatureArp',
    'TransportWanVpnInterfaceEthernetFeatureIpv4SecondaryAddress',
    'TransportWanVpnInterfaceEthernetFeatureIpv6DhcpSecondaryAddress',
    'TransportWanVpnInterfaceEthernetFeatureIpv6SecondaryAddress',
    'TransportWanVpnInterfaceEthernetFeatureNewStaticNat',
    'TransportWanVpnInterfaceEthernetFeatureStaticNat66',
    'TransportWanVpnInterfaceEthernetFeatureTunnelInterfaceEncapsulation',
    'TransportWanVpnInterfaceT1E1SerialFeatureTunnelInterfaceEncapsulation',
    'UrlFilteringPolicyDefinitionLogging',
    'VpnInterfaceCellularFeatureTemplateIpv4AccessList',
    'VpnInterfaceCellularFeatureTemplateIpv6AccessList',
    'VpnInterfaceCellularFeatureTemplateNatPortForward',
    'VpnInterfaceCellularFeatureTemplatePolicer',
    'VpnInterfaceCellularFeatureTemplateStaticArp',
    'VpnInterfaceCellularFeatureTemplateTunnelInterfaceEncapsulation',
    'VpnInterfaceDslIpoeFeatureTemplateAccessList',
    'VpnInterfaceDslIpoeFeatureTemplateNatPortForward',
    'VpnInterfaceDslIpoeFeatureTemplatePolicer',
    'VpnInterfaceDslIpoeFeatureTemplateTunnelInterfaceEncapsulation',
    'VpnInterfaceDslIpoeFeatureTemplateVdslConfiguration',
    'VpnInterfaceDslPppoaFeatureTemplateAccessList',
    'VpnInterfaceDslPppoaFeatureTemplateNatPortForward',
    'VpnInterfaceDslPppoaFeatureTemplatePolicer',
    'VpnInterfaceDslPppoaFeatureTemplatePvc',
    'VpnInterfaceDslPppoaFeatureTemplateTunnelInterfaceEncapsulation',
    'VpnInterfaceDslPppoaFeatureTemplateVdslConfiguration',
    'VpnInterfaceDslPppoeFeatureTemplateAccessList',
    'VpnInterfaceDslPppoeFeatureTemplateNatPortForward',
    'VpnInterfaceDslPppoeFeatureTemplatePolicer',
    'VpnInterfaceDslPppoeFeatureTemplateTunnelInterfaceEncapsulation',
    'VpnInterfaceDslPppoeFeatureTemplateVdslConfiguration',
    'VpnInterfaceEthernetPppoeFeatureTemplateAccessList',
    'VpnInterfaceEthernetPppoeFeatureTemplateNatPortForward',
    'VpnInterfaceEthernetPppoeFeatureTemplatePolicer',
    'VpnInterfaceEthernetPppoeFeatureTemplateTunnelInterfaceEncapsulation',
    'VpnInterfaceMultilinkFeatureTemplateAccessList',
    'VpnInterfaceMultilinkFeatureTemplateIpv6AccessList',
    'VpnInterfaceMultilinkFeatureTemplateMultilinkInterface',
    'VpnInterfaceMultilinkFeatureTemplateMultilinkInterfaceChannelGroupList',
    'VpnInterfaceMultilinkFeatureTemplateNimInterfaceList',
    'VpnInterfaceMultilinkFeatureTemplateTunnelInterfaceEncapsulation',
    'VpnInterfaceSviFeatureTemplateIpv4AccessList',
    'VpnInterfaceSviFeatureTemplateIpv4SecondaryAddress',
    'VpnInterfaceSviFeatureTemplateIpv4Vrrp',
    'VpnInterfaceSviFeatureTemplateIpv4VrrpIpv4SecondaryAddress',
    'VpnInterfaceSviFeatureTemplateIpv4VrrpTrackingObject',
    'VpnInterfaceSviFeatureTemplateIpv6AccessList',
    'VpnInterfaceSviFeatureTemplateIpv6DhcpHelper',
    'VpnInterfaceSviFeatureTemplateIpv6SecondaryAddress',
    'VpnInterfaceSviFeatureTemplateIpv6Vrrp',
    'VpnInterfaceSviFeatureTemplateIpv6VrrpIpv6Address',
    'VpnInterfaceSviFeatureTemplateIpv6VrrpIpv6SecondaryAddress',
    'VpnInterfaceSviFeatureTemplatePolicer',
    'VpnInterfaceSviFeatureTemplateStaticArpEntry',
    'VpnInterfaceT1E1SerialFeatureTemplateIpv4AccessList',
    'VpnInterfaceT1E1SerialFeatureTemplateIpv6AccessList',
    'VpnInterfaceT1E1SerialFeatureTemplateTunnelInterfaceEncapsulation',
    'VpnListPolicyObjectEntry',
    'VpnMembershipPolicyDefinitionSite',
    'ZoneBasedFirewallPolicyDefinitionApplyZonePair',
    'ZoneBasedFirewallPolicyDefinitionRule',
    'ZoneBasedFirewallPolicyDefinitionRuleActionEntry',
    'ZoneBasedFirewallPolicyDefinitionRuleMatchEntry',
    'ZoneListPolicyObjectEntry',
    'GetAllowUrlListPolicyObjectEntryResult',
    'GetAppProbeClassPolicyObjectMappingResult',
    'GetApplicationAwareRoutingPolicyDefinitionSequenceResult',
    'GetApplicationAwareRoutingPolicyDefinitionSequenceActionEntryResult',
    'GetApplicationAwareRoutingPolicyDefinitionSequenceActionEntrySlaClassParameterResult',
    'GetApplicationAwareRoutingPolicyDefinitionSequenceMatchEntryResult',
    'GetApplicationListPolicyObjectEntryResult',
    'GetApplicationPriorityQosPolicyQosSchedulerResult',
    'GetApplicationPriorityTrafficPolicyPolicySequenceResult',
    'GetApplicationPriorityTrafficPolicyPolicySequenceActionResult',
    'GetApplicationPriorityTrafficPolicyPolicySequenceActionSetParameterResult',
    'GetApplicationPriorityTrafficPolicyPolicySequenceActionSlaClassResult',
    'GetApplicationPriorityTrafficPolicyPolicySequenceMatchEntryResult',
    'GetAsPathListPolicyObjectEntryResult',
    'GetBlockUrlListPolicyObjectEntryResult',
    'GetCedgeAaaFeatureTemplateAccountingRuleResult',
    'GetCedgeAaaFeatureTemplateAuthorizationRuleResult',
    'GetCedgeAaaFeatureTemplateRadiusClientResult',
    'GetCedgeAaaFeatureTemplateRadiusClientVpnConfigurationResult',
    'GetCedgeAaaFeatureTemplateRadiusServerGroupResult',
    'GetCedgeAaaFeatureTemplateRadiusServerGroupServerResult',
    'GetCedgeAaaFeatureTemplateTacacsServerGroupResult',
    'GetCedgeAaaFeatureTemplateTacacsServerGroupServerResult',
    'GetCedgeAaaFeatureTemplateUserResult',
    'GetCedgeAaaFeatureTemplateUserSshPubkeyResult',
    'GetCedgeIgmpFeatureTemplateInterfaceResult',
    'GetCedgeIgmpFeatureTemplateInterfaceJoinGroupResult',
    'GetCedgePimFeatureTemplateInterfaceResult',
    'GetCedgePimFeatureTemplateRpAddressResult',
    'GetCedgePimFeatureTemplateRpAnnounceFieldResult',
    'GetCedgePimFeatureTemplateRpCandidateResult',
    'GetCellularControllerFeatureTemplateDataProfileResult',
    'GetCentralizedPolicyDefinitionResult',
    'GetCentralizedPolicyDefinitionEntryResult',
    'GetCflowdPolicyDefinitionCollectorResult',
    'GetCiscoBfdFeatureTemplateColorResult',
    'GetCiscoBgpFeatureTemplateAddressFamilyResult',
    'GetCiscoBgpFeatureTemplateAddressFamilyIpv4AggregateAddressResult',
    'GetCiscoBgpFeatureTemplateAddressFamilyIpv4NetworkResult',
    'GetCiscoBgpFeatureTemplateAddressFamilyIpv6AggregateAddressResult',
    'GetCiscoBgpFeatureTemplateAddressFamilyIpv6NetworkResult',
    'GetCiscoBgpFeatureTemplateAddressFamilyRedistributeRouteResult',
    'GetCiscoBgpFeatureTemplateIpv4NeighborResult',
    'GetCiscoBgpFeatureTemplateIpv4NeighborAddressFamilyResult',
    'GetCiscoBgpFeatureTemplateIpv4NeighborAddressFamilyRoutePolicyResult',
    'GetCiscoBgpFeatureTemplateIpv4RouteTargetResult',
    'GetCiscoBgpFeatureTemplateIpv4RouteTargetExportResult',
    'GetCiscoBgpFeatureTemplateIpv4RouteTargetImportResult',
    'GetCiscoBgpFeatureTemplateIpv6NeighborResult',
    'GetCiscoBgpFeatureTemplateIpv6NeighborAddressFamilyResult',
    'GetCiscoBgpFeatureTemplateIpv6NeighborAddressFamilyRoutePolicyResult',
    'GetCiscoBgpFeatureTemplateIpv6RouteTargetResult',
    'GetCiscoBgpFeatureTemplateIpv6RouteTargetExportResult',
    'GetCiscoBgpFeatureTemplateIpv6RouteTargetImportResult',
    'GetCiscoBgpFeatureTemplateMplsInterfaceResult',
    'GetCiscoDhcpServerFeatureTemplateOptionResult',
    'GetCiscoDhcpServerFeatureTemplateStaticLeaseResult',
    'GetCiscoLoggingFeatureTemplateIpv4ServerResult',
    'GetCiscoLoggingFeatureTemplateIpv6ServerResult',
    'GetCiscoLoggingFeatureTemplateTlsProfileResult',
    'GetCiscoNtpFeatureTemplateAuthenticationKeyResult',
    'GetCiscoNtpFeatureTemplateServerResult',
    'GetCiscoOmpFeatureTemplateAdvertiseIpv4RouteResult',
    'GetCiscoOmpFeatureTemplateAdvertiseIpv6RouteResult',
    'GetCiscoOspfFeatureTemplateAreaResult',
    'GetCiscoOspfFeatureTemplateAreaInterfaceResult',
    'GetCiscoOspfFeatureTemplateAreaRangeResult',
    'GetCiscoOspfFeatureTemplateMaxMetricRouterLsaResult',
    'GetCiscoOspfFeatureTemplateRedistributeResult',
    'GetCiscoOspfFeatureTemplateRoutePolicyResult',
    'GetCiscoOspfv3FeatureTemplateIpv4AreaResult',
    'GetCiscoOspfv3FeatureTemplateIpv4AreaInterfaceResult',
    'GetCiscoOspfv3FeatureTemplateIpv4AreaRangeResult',
    'GetCiscoOspfv3FeatureTemplateIpv4MaxMetricRouterLsaResult',
    'GetCiscoOspfv3FeatureTemplateIpv4RedistributeResult',
    'GetCiscoOspfv3FeatureTemplateIpv6AreaResult',
    'GetCiscoOspfv3FeatureTemplateIpv6AreaInterfaceResult',
    'GetCiscoOspfv3FeatureTemplateIpv6AreaRangeResult',
    'GetCiscoOspfv3FeatureTemplateIpv6MaxMetricRouterLsaResult',
    'GetCiscoOspfv3FeatureTemplateIpv6RedistributeResult',
    'GetCiscoSecureInternetGatewayFeatureTemplateInterfaceResult',
    'GetCiscoSecureInternetGatewayFeatureTemplateServiceResult',
    'GetCiscoSecureInternetGatewayFeatureTemplateServiceInterfacePairResult',
    'GetCiscoSecureInternetGatewayFeatureTemplateTrackerResult',
    'GetCiscoSecurityFeatureTemplateKeyResult',
    'GetCiscoSecurityFeatureTemplateKeychainResult',
    'GetCiscoSnmpFeatureTemplateCommunityResult',
    'GetCiscoSnmpFeatureTemplateGroupResult',
    'GetCiscoSnmpFeatureTemplateTrapTargetResult',
    'GetCiscoSnmpFeatureTemplateUserResult',
    'GetCiscoSnmpFeatureTemplateViewResult',
    'GetCiscoSnmpFeatureTemplateViewObjectIdentifierResult',
    'GetCiscoSystemFeatureTemplateGeoFencingSmsPhoneNumberResult',
    'GetCiscoSystemFeatureTemplateObjectTrackerResult',
    'GetCiscoSystemFeatureTemplateObjectTrackerGroupTracksIdResult',
    'GetCiscoSystemFeatureTemplateTrackerResult',
    'GetCiscoThousandeyesFeatureTemplateVirtualApplicationResult',
    'GetCiscoTrustsecFeatureTemplateSxpConnectionResult',
    'GetCiscoVpnFeatureTemplateDnsHostResult',
    'GetCiscoVpnFeatureTemplateDnsIpv4ServerResult',
    'GetCiscoVpnFeatureTemplateDnsIpv6ServerResult',
    'GetCiscoVpnFeatureTemplateIpv4StaticGreRouteResult',
    'GetCiscoVpnFeatureTemplateIpv4StaticIpsecRouteResult',
    'GetCiscoVpnFeatureTemplateIpv4StaticRouteResult',
    'GetCiscoVpnFeatureTemplateIpv4StaticRouteNextHopResult',
    'GetCiscoVpnFeatureTemplateIpv4StaticRouteTrackNextHopResult',
    'GetCiscoVpnFeatureTemplateIpv4StaticServiceRouteResult',
    'GetCiscoVpnFeatureTemplateIpv6StaticRouteResult',
    'GetCiscoVpnFeatureTemplateIpv6StaticRouteNextHopResult',
    'GetCiscoVpnFeatureTemplateNat64PoolResult',
    'GetCiscoVpnFeatureTemplateNatPoolResult',
    'GetCiscoVpnFeatureTemplateOmpAdvertiseIpv4RouteResult',
    'GetCiscoVpnFeatureTemplateOmpAdvertiseIpv4RoutePrefixResult',
    'GetCiscoVpnFeatureTemplateOmpAdvertiseIpv6RouteResult',
    'GetCiscoVpnFeatureTemplateOmpAdvertiseIpv6RoutePrefixResult',
    'GetCiscoVpnFeatureTemplatePortForwardRuleResult',
    'GetCiscoVpnFeatureTemplateRouteGlobalExportResult',
    'GetCiscoVpnFeatureTemplateRouteGlobalExportRedistributeResult',
    'GetCiscoVpnFeatureTemplateRouteGlobalImportResult',
    'GetCiscoVpnFeatureTemplateRouteGlobalImportRedistributeResult',
    'GetCiscoVpnFeatureTemplateRouteVpnImportResult',
    'GetCiscoVpnFeatureTemplateRouteVpnImportRedistributeResult',
    'GetCiscoVpnFeatureTemplateServiceResult',
    'GetCiscoVpnFeatureTemplateStaticNatRuleResult',
    'GetCiscoVpnFeatureTemplateStaticNatSubnetRuleResult',
    'GetCiscoVpnInterfaceFeatureTemplateAccessListResult',
    'GetCiscoVpnInterfaceFeatureTemplateIpv4SecondaryAddressResult',
    'GetCiscoVpnInterfaceFeatureTemplateIpv4VrrpResult',
    'GetCiscoVpnInterfaceFeatureTemplateIpv4VrrpIpv4SecondaryAddressResult',
    'GetCiscoVpnInterfaceFeatureTemplateIpv4VrrpTrackingObjectResult',
    'GetCiscoVpnInterfaceFeatureTemplateIpv6AccessListResult',
    'GetCiscoVpnInterfaceFeatureTemplateIpv6DhcpHelperResult',
    'GetCiscoVpnInterfaceFeatureTemplateIpv6SecondaryAddressResult',
    'GetCiscoVpnInterfaceFeatureTemplateIpv6VrrpResult',
    'GetCiscoVpnInterfaceFeatureTemplateIpv6VrrpIpv6AddressResult',
    'GetCiscoVpnInterfaceFeatureTemplateStaticArpResult',
    'GetCiscoVpnInterfaceFeatureTemplateStaticNat66EntryResult',
    'GetCiscoVpnInterfaceFeatureTemplateStaticNatEntryResult',
    'GetCiscoVpnInterfaceFeatureTemplateStaticPortForwardEntryResult',
    'GetCiscoVpnInterfaceFeatureTemplateTunnelInterfaceEncapsulationResult',
    'GetCiscoVpnInterfaceGreFeatureTemplateAccessListResult',
    'GetCiscoWirelessLanFeatureTemplateSsidResult',
    'GetColorListPolicyObjectEntryResult',
    'GetConfigurationGroupDeviceResult',
    'GetConfigurationGroupDeviceVariableResult',
    'GetConfigurationGroupTopologyDeviceResult',
    'GetConfigurationGroupTopologyDeviceUnsupportedFeatureResult',
    'GetCustomControlTopologyPolicyDefinitionSequenceResult',
    'GetCustomControlTopologyPolicyDefinitionSequenceActionEntryResult',
    'GetCustomControlTopologyPolicyDefinitionSequenceActionEntrySetParameterResult',
    'GetCustomControlTopologyPolicyDefinitionSequenceMatchEntryResult',
    'GetDataFqdnPrefixListPolicyObjectEntryResult',
    'GetDataIpv4PrefixListPolicyObjectEntryResult',
    'GetDataIpv6PrefixListPolicyObjectEntryResult',
    'GetDeviceDeviceResult',
    'GetDnsSecurityPolicyDefinitionTargetVpnResult',
    'GetDnsSecurityPolicyTargetVpnResult',
    'GetDomainListPolicyObjectEntryResult',
    'GetEigrpFeatureTemplateAddressFamilyResult',
    'GetEigrpFeatureTemplateAddressFamilyNetworkResult',
    'GetEigrpFeatureTemplateAddressFamilyRedistributeResult',
    'GetEigrpFeatureTemplateInterfaceResult',
    'GetEigrpFeatureTemplateInterfaceSummaryAddressResult',
    'GetEigrpFeatureTemplateKeyResult',
    'GetExpandedCommunityListPolicyObjectEntryResult',
    'GetExtendedCommunityListPolicyObjectEntryResult',
    'GetFeatureDeviceTemplateGeneralTemplateResult',
    'GetFeatureDeviceTemplateGeneralTemplateSubTemplateResult',
    'GetFeatureDeviceTemplateGeneralTemplateSubTemplateSubTemplateResult',
    'GetGeoLocationListPolicyObjectEntryResult',
    'GetHubAndSpokeTopologyPolicyDefinitionTopologyResult',
    'GetHubAndSpokeTopologyPolicyDefinitionTopologySpokeResult',
    'GetHubAndSpokeTopologyPolicyDefinitionTopologySpokeHubResult',
    'GetIntrusionPreventionPolicyDefinitionLoggingResult',
    'GetIpsSignatureListPolicyObjectEntryResult',
    'GetIpv4AclPolicyDefinitionSequenceResult',
    'GetIpv4AclPolicyDefinitionSequenceActionEntryResult',
    'GetIpv4AclPolicyDefinitionSequenceActionEntrySetParameterResult',
    'GetIpv4AclPolicyDefinitionSequenceMatchEntryResult',
    'GetIpv4DeviceAclPolicyDefinitionSequenceResult',
    'GetIpv4DeviceAclPolicyDefinitionSequenceActionEntryResult',
    'GetIpv4DeviceAclPolicyDefinitionSequenceMatchEntryResult',
    'GetIpv4PrefixListPolicyObjectEntryResult',
    'GetIpv6AclPolicyDefinitionSequenceResult',
    'GetIpv6AclPolicyDefinitionSequenceActionEntryResult',
    'GetIpv6AclPolicyDefinitionSequenceActionEntrySetParameterResult',
    'GetIpv6AclPolicyDefinitionSequenceMatchEntryResult',
    'GetIpv6DeviceAclPolicyDefinitionSequenceResult',
    'GetIpv6DeviceAclPolicyDefinitionSequenceActionEntryResult',
    'GetIpv6DeviceAclPolicyDefinitionSequenceMatchEntryResult',
    'GetIpv6PrefixListPolicyObjectEntryResult',
    'GetLocalApplicationListPolicyObjectEntryResult',
    'GetLocalizedPolicyDefinitionResult',
    'GetMeshTopologyPolicyDefinitionRegionResult',
    'GetOtherThousandeyesFeatureVirtualApplicationResult',
    'GetOtherUcseFeatureInterfaceResult',
    'GetPolicyGroupDeviceResult',
    'GetPolicyGroupDeviceVariableResult',
    'GetPolicyObjectAppProbeClassEntryResult',
    'GetPolicyObjectAppProbeClassEntryMapResult',
    'GetPolicyObjectApplicationListEntryResult',
    'GetPolicyObjectAsPathListEntryResult',
    'GetPolicyObjectClassMapEntryResult',
    'GetPolicyObjectColorListEntryResult',
    'GetPolicyObjectDataIpv4PrefixListEntryResult',
    'GetPolicyObjectDataIpv6PrefixListEntryResult',
    'GetPolicyObjectExtendedCommunityListEntryResult',
    'GetPolicyObjectIpv4PrefixListEntryResult',
    'GetPolicyObjectIpv6PrefixListEntryResult',
    'GetPolicyObjectMirrorEntryResult',
    'GetPolicyObjectPolicerEntryResult',
    'GetPolicyObjectPreferredColorGroupEntryResult',
    'GetPolicyObjectSecurityDataIpv4PrefixListEntryResult',
    'GetPolicyObjectSecurityFqdnListEntryResult',
    'GetPolicyObjectSecurityGeolocationListEntryResult',
    'GetPolicyObjectSecurityIdentityListEntryResult',
    'GetPolicyObjectSecurityIpsSignatureEntryResult',
    'GetPolicyObjectSecurityLocalApplicationListEntryResult',
    'GetPolicyObjectSecurityLocalDomainListEntryResult',
    'GetPolicyObjectSecurityPortListEntryResult',
    'GetPolicyObjectSecurityScalableGroupTagListEntryResult',
    'GetPolicyObjectSecurityUrlAllowListEntryResult',
    'GetPolicyObjectSecurityUrlBlockListEntryResult',
    'GetPolicyObjectSlaClassListEntryResult',
    'GetPolicyObjectStandardCommunityListEntryResult',
    'GetPolicyObjectTlocListEntryResult',
    'GetPolicyObjectVpnGroupEntryResult',
    'GetPortListPolicyObjectEntryResult',
    'GetProtocolListPolicyObjectEntryResult',
    'GetQosMapPolicyDefinitionQosSchedulerResult',
    'GetRegionListPolicyObjectEntryResult',
    'GetRewriteRulePolicyDefinitionRuleResult',
    'GetRoutePolicyDefinitionSequenceResult',
    'GetRoutePolicyDefinitionSequenceActionEntryResult',
    'GetRoutePolicyDefinitionSequenceMatchEntryResult',
    'GetRuleSetPolicyDefinitionRuleResult',
    'GetSecurityAppHostingFeatureTemplateVirtualApplicationResult',
    'GetSecurityPolicyDefinitionResult',
    'GetSecurityPolicyDefinitionEntryResult',
    'GetSecurityPolicyLoggingResult',
    'GetServiceDhcpServerFeatureOptionCodeResult',
    'GetServiceDhcpServerFeatureStaticLeaseResult',
    'GetServiceIpv4AclFeatureSequenceResult',
    'GetServiceIpv4AclFeatureSequenceActionResult',
    'GetServiceIpv4AclFeatureSequenceMatchEntryResult',
    'GetServiceIpv4AclFeatureSequenceMatchEntryDestinationPortResult',
    'GetServiceIpv4AclFeatureSequenceMatchEntrySourcePortResult',
    'GetServiceIpv6AclFeatureSequenceResult',
    'GetServiceIpv6AclFeatureSequenceActionResult',
    'GetServiceIpv6AclFeatureSequenceMatchEntryResult',
    'GetServiceIpv6AclFeatureSequenceMatchEntryDestinationPortResult',
    'GetServiceIpv6AclFeatureSequenceMatchEntrySourcePortResult',
    'GetServiceLanVpnFeatureAdvertiseOmpIpv4Result',
    'GetServiceLanVpnFeatureAdvertiseOmpIpv4PrefixResult',
    'GetServiceLanVpnFeatureAdvertiseOmpIpv6Result',
    'GetServiceLanVpnFeatureAdvertiseOmpIpv6PrefixResult',
    'GetServiceLanVpnFeatureGreRouteResult',
    'GetServiceLanVpnFeatureHostMappingResult',
    'GetServiceLanVpnFeatureIpsecRouteResult',
    'GetServiceLanVpnFeatureIpv4ExportRouteTargetResult',
    'GetServiceLanVpnFeatureIpv4ImportRouteTargetResult',
    'GetServiceLanVpnFeatureIpv4StaticRouteResult',
    'GetServiceLanVpnFeatureIpv4StaticRouteNextHopResult',
    'GetServiceLanVpnFeatureIpv4StaticRouteNextHopWithTrackerResult',
    'GetServiceLanVpnFeatureIpv6ExportRouteTargetResult',
    'GetServiceLanVpnFeatureIpv6ImportRouteTargetResult',
    'GetServiceLanVpnFeatureIpv6StaticRouteResult',
    'GetServiceLanVpnFeatureIpv6StaticRouteNextHopResult',
    'GetServiceLanVpnFeatureNat64V4PoolResult',
    'GetServiceLanVpnFeatureNatPoolResult',
    'GetServiceLanVpnFeatureNatPortForwardResult',
    'GetServiceLanVpnFeatureRouteLeakFromGlobalVpnResult',
    'GetServiceLanVpnFeatureRouteLeakFromGlobalVpnRedistributionResult',
    'GetServiceLanVpnFeatureRouteLeakFromOtherServiceResult',
    'GetServiceLanVpnFeatureRouteLeakFromOtherServiceRedistributionResult',
    'GetServiceLanVpnFeatureRouteLeakToGlobalVpnResult',
    'GetServiceLanVpnFeatureRouteLeakToGlobalVpnRedistributionResult',
    'GetServiceLanVpnFeatureServiceResult',
    'GetServiceLanVpnFeatureServiceRouteResult',
    'GetServiceLanVpnFeatureStaticNatResult',
    'GetServiceLanVpnInterfaceEthernetFeatureArpResult',
    'GetServiceLanVpnInterfaceEthernetFeatureIpv4SecondaryAddressResult',
    'GetServiceLanVpnInterfaceEthernetFeatureIpv4VrrpResult',
    'GetServiceLanVpnInterfaceEthernetFeatureIpv4VrrpSecondaryAddressResult',
    'GetServiceLanVpnInterfaceEthernetFeatureIpv4VrrpTrackingObjectResult',
    'GetServiceLanVpnInterfaceEthernetFeatureIpv6DhcpHelperResult',
    'GetServiceLanVpnInterfaceEthernetFeatureIpv6DhcpSecondaryAddressResult',
    'GetServiceLanVpnInterfaceEthernetFeatureIpv6SecondaryAddressResult',
    'GetServiceLanVpnInterfaceEthernetFeatureIpv6VrrpResult',
    'GetServiceLanVpnInterfaceEthernetFeatureIpv6VrrpIpv6AddressResult',
    'GetServiceLanVpnInterfaceEthernetFeatureStaticNatResult',
    'GetServiceLanVpnInterfaceSviFeatureArpResult',
    'GetServiceLanVpnInterfaceSviFeatureIpv4SecondaryAddressResult',
    'GetServiceLanVpnInterfaceSviFeatureIpv4VrrpResult',
    'GetServiceLanVpnInterfaceSviFeatureIpv4VrrpSecondaryAddressResult',
    'GetServiceLanVpnInterfaceSviFeatureIpv4VrrpTrackingObjectResult',
    'GetServiceLanVpnInterfaceSviFeatureIpv6DhcpHelperResult',
    'GetServiceLanVpnInterfaceSviFeatureIpv6SecondaryAddressResult',
    'GetServiceLanVpnInterfaceSviFeatureIpv6VrrpResult',
    'GetServiceLanVpnInterfaceSviFeatureIpv6VrrpAddressResult',
    'GetServiceLanVpnInterfaceSviFeatureIpv6VrrpSecondaryAddressResult',
    'GetServiceMulticastFeatureAutoRpAnnounceResult',
    'GetServiceMulticastFeatureAutoRpDiscoveryResult',
    'GetServiceMulticastFeatureIgmpInterfaceResult',
    'GetServiceMulticastFeatureIgmpInterfaceJoinGroupResult',
    'GetServiceMulticastFeatureMsdpGroupResult',
    'GetServiceMulticastFeatureMsdpGroupPeerResult',
    'GetServiceMulticastFeaturePimBsrCandidateResult',
    'GetServiceMulticastFeaturePimBsrRpCandidateResult',
    'GetServiceMulticastFeaturePimInterfaceResult',
    'GetServiceMulticastFeatureStaticRpAddressResult',
    'GetServiceObjectTrackerGroupFeatureTrackerElementResult',
    'GetServiceRoutePolicyFeatureSequenceResult',
    'GetServiceRoutePolicyFeatureSequenceActionResult',
    'GetServiceRoutePolicyFeatureSequenceMatchEntryResult',
    'GetServiceRoutePolicyFeatureSequenceMatchEntryStandardCommunityListResult',
    'GetServiceRoutingBgpFeatureIpv4AggregateAddressResult',
    'GetServiceRoutingBgpFeatureIpv4NeighborResult',
    'GetServiceRoutingBgpFeatureIpv4NeighborAddressFamilyResult',
    'GetServiceRoutingBgpFeatureIpv4NetworkResult',
    'GetServiceRoutingBgpFeatureIpv4RedistributeResult',
    'GetServiceRoutingBgpFeatureIpv6AggregateAddressResult',
    'GetServiceRoutingBgpFeatureIpv6NeighborResult',
    'GetServiceRoutingBgpFeatureIpv6NeighborAddressFamilyResult',
    'GetServiceRoutingBgpFeatureIpv6NetworkResult',
    'GetServiceRoutingBgpFeatureIpv6RedistributeResult',
    'GetServiceRoutingEigrpFeatureInterfaceResult',
    'GetServiceRoutingEigrpFeatureInterfaceSummaryAddressResult',
    'GetServiceRoutingEigrpFeatureMd5KeyResult',
    'GetServiceRoutingEigrpFeatureNetworkResult',
    'GetServiceRoutingEigrpFeatureRedistributeResult',
    'GetServiceRoutingOspfFeatureAreaResult',
    'GetServiceRoutingOspfFeatureAreaInterfaceResult',
    'GetServiceRoutingOspfFeatureAreaRangeResult',
    'GetServiceRoutingOspfFeatureRedistributeResult',
    'GetServiceRoutingOspfFeatureRouterLsaResult',
    'GetServiceRoutingOspfv3Ipv4FeatureAreaResult',
    'GetServiceRoutingOspfv3Ipv4FeatureAreaInterfaceResult',
    'GetServiceRoutingOspfv3Ipv4FeatureAreaRangeResult',
    'GetServiceRoutingOspfv3Ipv4FeatureRedistributeResult',
    'GetServiceRoutingOspfv3Ipv6FeatureAreaResult',
    'GetServiceRoutingOspfv3Ipv6FeatureAreaInterfaceResult',
    'GetServiceRoutingOspfv3Ipv6FeatureAreaRangeResult',
    'GetServiceRoutingOspfv3Ipv6FeatureRedistributeResult',
    'GetServiceSwitchportFeatureInterfaceResult',
    'GetServiceSwitchportFeatureStaticMacAddressResult',
    'GetServiceTrackerGroupFeatureTrackerElementResult',
    'GetServiceWirelessLanFeatureSsidResult',
    'GetSiteListPolicyObjectEntryResult',
    'GetStandardCommunityListPolicyObjectEntryResult',
    'GetSwitchportFeatureTemplateInterfaceResult',
    'GetSwitchportFeatureTemplateStaticMacAddressResult',
    'GetSystemAaaFeatureAccountingRuleResult',
    'GetSystemAaaFeatureAuthorizationRuleResult',
    'GetSystemAaaFeatureRadiusGroupResult',
    'GetSystemAaaFeatureRadiusGroupServerResult',
    'GetSystemAaaFeatureTacacsGroupResult',
    'GetSystemAaaFeatureTacacsGroupServerResult',
    'GetSystemAaaFeatureUserResult',
    'GetSystemAaaFeatureUserPublicKeyResult',
    'GetSystemBasicFeatureAffinityPerVrfResult',
    'GetSystemBasicFeatureGpsSmsMobileNumberResult',
    'GetSystemBfdFeatureColorResult',
    'GetSystemIpv4DeviceAccessFeatureSequenceResult',
    'GetSystemIpv6DeviceAccessFeatureSequenceResult',
    'GetSystemLoggingFeatureIpv4ServerResult',
    'GetSystemLoggingFeatureIpv6ServerResult',
    'GetSystemLoggingFeatureTlsProfileResult',
    'GetSystemNtpFeatureAuthenticationKeyResult',
    'GetSystemNtpFeatureServerResult',
    'GetSystemSecurityFeatureKeyResult',
    'GetSystemSecurityFeatureKeychainResult',
    'GetSystemSnmpFeatureCommunityResult',
    'GetSystemSnmpFeatureGroupResult',
    'GetSystemSnmpFeatureTrapTargetServerResult',
    'GetSystemSnmpFeatureUserResult',
    'GetSystemSnmpFeatureViewResult',
    'GetSystemSnmpFeatureViewOidResult',
    'GetTlocListPolicyObjectEntryResult',
    'GetTlsSslDecryptionPolicyDefinitionNetworkRuleResult',
    'GetTlsSslDecryptionPolicyDefinitionNetworkRuleSourceAndDestinationConfigurationResult',
    'GetTlsSslDecryptionPolicyDefinitionUrlRuleResult',
    'GetTrafficDataPolicyDefinitionSequenceResult',
    'GetTrafficDataPolicyDefinitionSequenceActionEntryResult',
    'GetTrafficDataPolicyDefinitionSequenceActionEntryNatParameterResult',
    'GetTrafficDataPolicyDefinitionSequenceActionEntrySetParameterResult',
    'GetTrafficDataPolicyDefinitionSequenceMatchEntryResult',
    'GetTransportIpv4AclFeatureSequenceResult',
    'GetTransportIpv4AclFeatureSequenceActionResult',
    'GetTransportIpv4AclFeatureSequenceMatchEntryResult',
    'GetTransportIpv4AclFeatureSequenceMatchEntryDestinationPortResult',
    'GetTransportIpv4AclFeatureSequenceMatchEntrySourcePortResult',
    'GetTransportIpv6AclFeatureSequenceResult',
    'GetTransportIpv6AclFeatureSequenceActionResult',
    'GetTransportIpv6AclFeatureSequenceMatchEntryResult',
    'GetTransportIpv6AclFeatureSequenceMatchEntryDestinationPortResult',
    'GetTransportIpv6AclFeatureSequenceMatchEntrySourcePortResult',
    'GetTransportIpv6TrackerGroupFeatureTrackerElementResult',
    'GetTransportManagementVpnFeatureIpv4StaticRouteResult',
    'GetTransportManagementVpnFeatureIpv4StaticRouteNextHopResult',
    'GetTransportManagementVpnFeatureIpv6StaticRouteResult',
    'GetTransportManagementVpnFeatureIpv6StaticRouteNextHopResult',
    'GetTransportManagementVpnFeatureNewHostMappingResult',
    'GetTransportManagementVpnInterfaceEthernetFeatureArpEntryResult',
    'GetTransportManagementVpnInterfaceEthernetFeatureIpv4SecondaryAddressResult',
    'GetTransportRoutePolicyFeatureSequenceResult',
    'GetTransportRoutePolicyFeatureSequenceActionResult',
    'GetTransportRoutePolicyFeatureSequenceMatchEntryResult',
    'GetTransportRoutePolicyFeatureSequenceMatchEntryStandardCommunityListResult',
    'GetTransportRoutingBgpFeatureIpv4AggregateAddressResult',
    'GetTransportRoutingBgpFeatureIpv4NeighborResult',
    'GetTransportRoutingBgpFeatureIpv4NeighborAddressFamilyResult',
    'GetTransportRoutingBgpFeatureIpv4NetworkResult',
    'GetTransportRoutingBgpFeatureIpv4RedistributeResult',
    'GetTransportRoutingBgpFeatureIpv6AggregateAddressResult',
    'GetTransportRoutingBgpFeatureIpv6NeighborResult',
    'GetTransportRoutingBgpFeatureIpv6NeighborAddressFamilyResult',
    'GetTransportRoutingBgpFeatureIpv6NetworkResult',
    'GetTransportRoutingBgpFeatureIpv6RedistributeResult',
    'GetTransportRoutingBgpFeatureMplsInterfaceResult',
    'GetTransportRoutingOspfFeatureAreaResult',
    'GetTransportRoutingOspfFeatureAreaInterfaceResult',
    'GetTransportRoutingOspfFeatureAreaRangeResult',
    'GetTransportRoutingOspfFeatureRedistributeResult',
    'GetTransportRoutingOspfFeatureRouterLsaResult',
    'GetTransportRoutingOspfv3Ipv4FeatureAreaResult',
    'GetTransportRoutingOspfv3Ipv4FeatureAreaInterfaceResult',
    'GetTransportRoutingOspfv3Ipv4FeatureAreaRangeResult',
    'GetTransportRoutingOspfv3Ipv4FeatureRedistributeResult',
    'GetTransportRoutingOspfv3Ipv6FeatureAreaResult',
    'GetTransportRoutingOspfv3Ipv6FeatureAreaInterfaceResult',
    'GetTransportRoutingOspfv3Ipv6FeatureAreaRangeResult',
    'GetTransportRoutingOspfv3Ipv6FeatureRedistributeResult',
    'GetTransportT1E1ControllerFeatureEntryResult',
    'GetTransportT1E1ControllerFeatureEntryChannelGroupResult',
    'GetTransportTrackerGroupFeatureTrackerElementResult',
    'GetTransportWanVpnFeatureIpv4StaticRouteResult',
    'GetTransportWanVpnFeatureIpv4StaticRouteNextHopResult',
    'GetTransportWanVpnFeatureIpv6StaticRouteResult',
    'GetTransportWanVpnFeatureIpv6StaticRouteNextHopResult',
    'GetTransportWanVpnFeatureNat64V4PoolResult',
    'GetTransportWanVpnFeatureNewHostMappingResult',
    'GetTransportWanVpnFeatureServiceResult',
    'GetTransportWanVpnInterfaceCellularFeatureArpResult',
    'GetTransportWanVpnInterfaceCellularFeatureTunnelInterfaceEncapsulationResult',
    'GetTransportWanVpnInterfaceEthernetFeatureArpResult',
    'GetTransportWanVpnInterfaceEthernetFeatureIpv4SecondaryAddressResult',
    'GetTransportWanVpnInterfaceEthernetFeatureIpv6DhcpSecondaryAddressResult',
    'GetTransportWanVpnInterfaceEthernetFeatureIpv6SecondaryAddressResult',
    'GetTransportWanVpnInterfaceEthernetFeatureNewStaticNatResult',
    'GetTransportWanVpnInterfaceEthernetFeatureStaticNat66Result',
    'GetTransportWanVpnInterfaceEthernetFeatureTunnelInterfaceEncapsulationResult',
    'GetTransportWanVpnInterfaceT1E1SerialFeatureTunnelInterfaceEncapsulationResult',
    'GetUrlFilteringPolicyDefinitionLoggingResult',
    'GetVedgeInventoryDeviceResult',
    'GetVpnInterfaceCellularFeatureTemplateIpv4AccessListResult',
    'GetVpnInterfaceCellularFeatureTemplateIpv6AccessListResult',
    'GetVpnInterfaceCellularFeatureTemplateNatPortForwardResult',
    'GetVpnInterfaceCellularFeatureTemplatePolicerResult',
    'GetVpnInterfaceCellularFeatureTemplateStaticArpResult',
    'GetVpnInterfaceCellularFeatureTemplateTunnelInterfaceEncapsulationResult',
    'GetVpnInterfaceDslIpoeFeatureTemplateAccessListResult',
    'GetVpnInterfaceDslIpoeFeatureTemplateNatPortForwardResult',
    'GetVpnInterfaceDslIpoeFeatureTemplatePolicerResult',
    'GetVpnInterfaceDslIpoeFeatureTemplateTunnelInterfaceEncapsulationResult',
    'GetVpnInterfaceDslIpoeFeatureTemplateVdslConfigurationResult',
    'GetVpnInterfaceDslPppoaFeatureTemplateAccessListResult',
    'GetVpnInterfaceDslPppoaFeatureTemplateNatPortForwardResult',
    'GetVpnInterfaceDslPppoaFeatureTemplatePolicerResult',
    'GetVpnInterfaceDslPppoaFeatureTemplatePvcResult',
    'GetVpnInterfaceDslPppoaFeatureTemplateTunnelInterfaceEncapsulationResult',
    'GetVpnInterfaceDslPppoaFeatureTemplateVdslConfigurationResult',
    'GetVpnInterfaceDslPppoeFeatureTemplateAccessListResult',
    'GetVpnInterfaceDslPppoeFeatureTemplateNatPortForwardResult',
    'GetVpnInterfaceDslPppoeFeatureTemplatePolicerResult',
    'GetVpnInterfaceDslPppoeFeatureTemplateTunnelInterfaceEncapsulationResult',
    'GetVpnInterfaceDslPppoeFeatureTemplateVdslConfigurationResult',
    'GetVpnInterfaceEthernetPppoeFeatureTemplateAccessListResult',
    'GetVpnInterfaceEthernetPppoeFeatureTemplateNatPortForwardResult',
    'GetVpnInterfaceEthernetPppoeFeatureTemplatePolicerResult',
    'GetVpnInterfaceEthernetPppoeFeatureTemplateTunnelInterfaceEncapsulationResult',
    'GetVpnInterfaceMultilinkFeatureTemplateAccessListResult',
    'GetVpnInterfaceMultilinkFeatureTemplateIpv6AccessListResult',
    'GetVpnInterfaceMultilinkFeatureTemplateMultilinkInterfaceResult',
    'GetVpnInterfaceMultilinkFeatureTemplateMultilinkInterfaceChannelGroupListResult',
    'GetVpnInterfaceMultilinkFeatureTemplateNimInterfaceListResult',
    'GetVpnInterfaceMultilinkFeatureTemplateTunnelInterfaceEncapsulationResult',
    'GetVpnInterfaceSviFeatureTemplateIpv4AccessListResult',
    'GetVpnInterfaceSviFeatureTemplateIpv4SecondaryAddressResult',
    'GetVpnInterfaceSviFeatureTemplateIpv4VrrpResult',
    'GetVpnInterfaceSviFeatureTemplateIpv4VrrpIpv4SecondaryAddressResult',
    'GetVpnInterfaceSviFeatureTemplateIpv4VrrpTrackingObjectResult',
    'GetVpnInterfaceSviFeatureTemplateIpv6AccessListResult',
    'GetVpnInterfaceSviFeatureTemplateIpv6DhcpHelperResult',
    'GetVpnInterfaceSviFeatureTemplateIpv6SecondaryAddressResult',
    'GetVpnInterfaceSviFeatureTemplateIpv6VrrpResult',
    'GetVpnInterfaceSviFeatureTemplateIpv6VrrpIpv6AddressResult',
    'GetVpnInterfaceSviFeatureTemplateIpv6VrrpIpv6SecondaryAddressResult',
    'GetVpnInterfaceSviFeatureTemplatePolicerResult',
    'GetVpnInterfaceSviFeatureTemplateStaticArpEntryResult',
    'GetVpnInterfaceT1E1SerialFeatureTemplateIpv4AccessListResult',
    'GetVpnInterfaceT1E1SerialFeatureTemplateIpv6AccessListResult',
    'GetVpnInterfaceT1E1SerialFeatureTemplateTunnelInterfaceEncapsulationResult',
    'GetVpnListPolicyObjectEntryResult',
    'GetVpnMembershipPolicyDefinitionSiteResult',
    'GetZoneBasedFirewallPolicyDefinitionApplyZonePairResult',
    'GetZoneBasedFirewallPolicyDefinitionRuleResult',
    'GetZoneBasedFirewallPolicyDefinitionRuleActionEntryResult',
    'GetZoneBasedFirewallPolicyDefinitionRuleMatchEntryResult',
    'GetZoneListPolicyObjectEntryResult',
]

@pulumi.output_type
class AllowUrlListPolicyObjectEntry(dict):
    def __init__(__self__, *,
                 url: Optional[_builtins.str] = None):
        """
        :param _builtins.str url: URL
        """
        if url is not None:
            pulumi.set(__self__, "url", url)

    @_builtins.property
    @pulumi.getter
    def url(self) -> Optional[_builtins.str]:
        """
        URL
        """
        return pulumi.get(self, "url")


@pulumi.output_type
class AppProbeClassPolicyObjectMapping(dict):
    def __init__(__self__, *,
                 color: _builtins.str,
                 dscp: Optional[_builtins.int] = None):
        """
        :param _builtins.str color: Color
                 - Choices: `default`, `3g`, `biz-internet`, `blue`, `bronze`, `custom1`, `custom2`, `custom3`, `gold`, `green`, `lte`, `metro-ethernet`, `mpls`, `private1`, `private2`, `private3`, `private4`, `private5`, `private6`, `public-internet`, `red`, `silver`
        :param _builtins.int dscp: DSCP
                 - Range: `0`-`63`
        """
        pulumi.set(__self__, "color", color)
        if dscp is not None:
            pulumi.set(__self__, "dscp", dscp)

    @_builtins.property
    @pulumi.getter
    def color(self) -> _builtins.str:
        """
        Color
          - Choices: `default`, `3g`, `biz-internet`, `blue`, `bronze`, `custom1`, `custom2`, `custom3`, `gold`, `green`, `lte`, `metro-ethernet`, `mpls`, `private1`, `private2`, `private3`, `private4`, `private5`, `private6`, `public-internet`, `red`, `silver`
        """
        return pulumi.get(self, "color")

    @_builtins.property
    @pulumi.getter
    def dscp(self) -> Optional[_builtins.int]:
        """
        DSCP
          - Range: `0`-`63`
        """
        return pulumi.get(self, "dscp")


@pulumi.output_type
class ApplicationAwareRoutingPolicyDefinitionSequence(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "actionEntries":
            suggest = "action_entries"
        elif key == "ipType":
            suggest = "ip_type"
        elif key == "matchEntries":
            suggest = "match_entries"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ApplicationAwareRoutingPolicyDefinitionSequence. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ApplicationAwareRoutingPolicyDefinitionSequence.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ApplicationAwareRoutingPolicyDefinitionSequence.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 id: _builtins.int,
                 name: _builtins.str,
                 action_entries: Optional[Sequence['outputs.ApplicationAwareRoutingPolicyDefinitionSequenceActionEntry']] = None,
                 ip_type: Optional[_builtins.str] = None,
                 match_entries: Optional[Sequence['outputs.ApplicationAwareRoutingPolicyDefinitionSequenceMatchEntry']] = None):
        """
        :param _builtins.int id: Sequence ID
        :param _builtins.str name: Sequence name
        :param Sequence['ApplicationAwareRoutingPolicyDefinitionSequenceActionEntryArgs'] action_entries: List of action entries
        :param _builtins.str ip_type: Sequence IP type, either `ipv4`, `ipv6` or `all`
                 - Choices: `ipv4`, `ipv6`, `all`
        :param Sequence['ApplicationAwareRoutingPolicyDefinitionSequenceMatchEntryArgs'] match_entries: List of match entries
        """
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "name", name)
        if action_entries is not None:
            pulumi.set(__self__, "action_entries", action_entries)
        if ip_type is not None:
            pulumi.set(__self__, "ip_type", ip_type)
        if match_entries is not None:
            pulumi.set(__self__, "match_entries", match_entries)

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.int:
        """
        Sequence ID
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        """
        Sequence name
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter(name="actionEntries")
    def action_entries(self) -> Optional[Sequence['outputs.ApplicationAwareRoutingPolicyDefinitionSequenceActionEntry']]:
        """
        List of action entries
        """
        return pulumi.get(self, "action_entries")

    @_builtins.property
    @pulumi.getter(name="ipType")
    def ip_type(self) -> Optional[_builtins.str]:
        """
        Sequence IP type, either `ipv4`, `ipv6` or `all`
          - Choices: `ipv4`, `ipv6`, `all`
        """
        return pulumi.get(self, "ip_type")

    @_builtins.property
    @pulumi.getter(name="matchEntries")
    def match_entries(self) -> Optional[Sequence['outputs.ApplicationAwareRoutingPolicyDefinitionSequenceMatchEntry']]:
        """
        List of match entries
        """
        return pulumi.get(self, "match_entries")


@pulumi.output_type
class ApplicationAwareRoutingPolicyDefinitionSequenceActionEntry(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "backupSlaPreferredColor":
            suggest = "backup_sla_preferred_color"
        elif key == "cloudSla":
            suggest = "cloud_sla"
        elif key == "slaClassParameters":
            suggest = "sla_class_parameters"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ApplicationAwareRoutingPolicyDefinitionSequenceActionEntry. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ApplicationAwareRoutingPolicyDefinitionSequenceActionEntry.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ApplicationAwareRoutingPolicyDefinitionSequenceActionEntry.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 type: _builtins.str,
                 backup_sla_preferred_color: Optional[_builtins.str] = None,
                 cloud_sla: Optional[_builtins.bool] = None,
                 counter: Optional[_builtins.str] = None,
                 log: Optional[_builtins.bool] = None,
                 sla_class_parameters: Optional[Sequence['outputs.ApplicationAwareRoutingPolicyDefinitionSequenceActionEntrySlaClassParameter']] = None):
        """
        :param _builtins.str type: Type of action entry
                 - Choices: `backupSlaPreferredColor`, `count`, `log`, `slaClass`, `cloudSaas`
        :param _builtins.str backup_sla_preferred_color: Backup SLA preferred color (Single value or multiple values separated by spaces), Attribute conditional on `type` being equal to `backupSlaPreferredColor`
        :param _builtins.bool cloud_sla: Cloud SLA, Attribute conditional on `type` being equal to `cloudSaas`
        :param _builtins.str counter: Counter name, Attribute conditional on `type` being equal to `count`
        :param _builtins.bool log: Enable logging, Attribute conditional on `type` being equal to `log`
        :param Sequence['ApplicationAwareRoutingPolicyDefinitionSequenceActionEntrySlaClassParameterArgs'] sla_class_parameters: List of SLA class parameters, Attribute conditional on `type` being equal to `slaClass`
        """
        pulumi.set(__self__, "type", type)
        if backup_sla_preferred_color is not None:
            pulumi.set(__self__, "backup_sla_preferred_color", backup_sla_preferred_color)
        if cloud_sla is not None:
            pulumi.set(__self__, "cloud_sla", cloud_sla)
        if counter is not None:
            pulumi.set(__self__, "counter", counter)
        if log is not None:
            pulumi.set(__self__, "log", log)
        if sla_class_parameters is not None:
            pulumi.set(__self__, "sla_class_parameters", sla_class_parameters)

    @_builtins.property
    @pulumi.getter
    def type(self) -> _builtins.str:
        """
        Type of action entry
          - Choices: `backupSlaPreferredColor`, `count`, `log`, `slaClass`, `cloudSaas`
        """
        return pulumi.get(self, "type")

    @_builtins.property
    @pulumi.getter(name="backupSlaPreferredColor")
    def backup_sla_preferred_color(self) -> Optional[_builtins.str]:
        """
        Backup SLA preferred color (Single value or multiple values separated by spaces), Attribute conditional on `type` being equal to `backupSlaPreferredColor`
        """
        return pulumi.get(self, "backup_sla_preferred_color")

    @_builtins.property
    @pulumi.getter(name="cloudSla")
    def cloud_sla(self) -> Optional[_builtins.bool]:
        """
        Cloud SLA, Attribute conditional on `type` being equal to `cloudSaas`
        """
        return pulumi.get(self, "cloud_sla")

    @_builtins.property
    @pulumi.getter
    def counter(self) -> Optional[_builtins.str]:
        """
        Counter name, Attribute conditional on `type` being equal to `count`
        """
        return pulumi.get(self, "counter")

    @_builtins.property
    @pulumi.getter
    def log(self) -> Optional[_builtins.bool]:
        """
        Enable logging, Attribute conditional on `type` being equal to `log`
        """
        return pulumi.get(self, "log")

    @_builtins.property
    @pulumi.getter(name="slaClassParameters")
    def sla_class_parameters(self) -> Optional[Sequence['outputs.ApplicationAwareRoutingPolicyDefinitionSequenceActionEntrySlaClassParameter']]:
        """
        List of SLA class parameters, Attribute conditional on `type` being equal to `slaClass`
        """
        return pulumi.get(self, "sla_class_parameters")


@pulumi.output_type
class ApplicationAwareRoutingPolicyDefinitionSequenceActionEntrySlaClassParameter(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "preferredColor":
            suggest = "preferred_color"
        elif key == "preferredColorGroupListId":
            suggest = "preferred_color_group_list_id"
        elif key == "preferredColorGroupListVersion":
            suggest = "preferred_color_group_list_version"
        elif key == "slaClassListId":
            suggest = "sla_class_list_id"
        elif key == "slaClassListVersion":
            suggest = "sla_class_list_version"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ApplicationAwareRoutingPolicyDefinitionSequenceActionEntrySlaClassParameter. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ApplicationAwareRoutingPolicyDefinitionSequenceActionEntrySlaClassParameter.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ApplicationAwareRoutingPolicyDefinitionSequenceActionEntrySlaClassParameter.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 type: _builtins.str,
                 preferred_color: Optional[_builtins.str] = None,
                 preferred_color_group_list_id: Optional[_builtins.str] = None,
                 preferred_color_group_list_version: Optional[_builtins.int] = None,
                 sla_class_list_id: Optional[_builtins.str] = None,
                 sla_class_list_version: Optional[_builtins.int] = None):
        """
        :param _builtins.str type: Type of SLA class parameter
                 - Choices: `name`, `preferredColor`, `preferredColorGroup`, `strict`, `fallbackToBestPath`
        :param _builtins.str preferred_color: preferred color (Single value or multiple values separated by spaces), Attribute conditional on `type` being equal to `preferredColor`
        :param _builtins.str preferred_color_group_list_id: Preferred color group list ID, Attribute conditional on `type` being equal to `preferredColorGroup`
        :param _builtins.int preferred_color_group_list_version: Preferred color group list version
        :param _builtins.str sla_class_list_id: SLA class list ID, Attribute conditional on `type` being equal to `name`
        :param _builtins.int sla_class_list_version: SLA class list version
        """
        pulumi.set(__self__, "type", type)
        if preferred_color is not None:
            pulumi.set(__self__, "preferred_color", preferred_color)
        if preferred_color_group_list_id is not None:
            pulumi.set(__self__, "preferred_color_group_list_id", preferred_color_group_list_id)
        if preferred_color_group_list_version is not None:
            pulumi.set(__self__, "preferred_color_group_list_version", preferred_color_group_list_version)
        if sla_class_list_id is not None:
            pulumi.set(__self__, "sla_class_list_id", sla_class_list_id)
        if sla_class_list_version is not None:
            pulumi.set(__self__, "sla_class_list_version", sla_class_list_version)

    @_builtins.property
    @pulumi.getter
    def type(self) -> _builtins.str:
        """
        Type of SLA class parameter
          - Choices: `name`, `preferredColor`, `preferredColorGroup`, `strict`, `fallbackToBestPath`
        """
        return pulumi.get(self, "type")

    @_builtins.property
    @pulumi.getter(name="preferredColor")
    def preferred_color(self) -> Optional[_builtins.str]:
        """
        preferred color (Single value or multiple values separated by spaces), Attribute conditional on `type` being equal to `preferredColor`
        """
        return pulumi.get(self, "preferred_color")

    @_builtins.property
    @pulumi.getter(name="preferredColorGroupListId")
    def preferred_color_group_list_id(self) -> Optional[_builtins.str]:
        """
        Preferred color group list ID, Attribute conditional on `type` being equal to `preferredColorGroup`
        """
        return pulumi.get(self, "preferred_color_group_list_id")

    @_builtins.property
    @pulumi.getter(name="preferredColorGroupListVersion")
    def preferred_color_group_list_version(self) -> Optional[_builtins.int]:
        """
        Preferred color group list version
        """
        return pulumi.get(self, "preferred_color_group_list_version")

    @_builtins.property
    @pulumi.getter(name="slaClassListId")
    def sla_class_list_id(self) -> Optional[_builtins.str]:
        """
        SLA class list ID, Attribute conditional on `type` being equal to `name`
        """
        return pulumi.get(self, "sla_class_list_id")

    @_builtins.property
    @pulumi.getter(name="slaClassListVersion")
    def sla_class_list_version(self) -> Optional[_builtins.int]:
        """
        SLA class list version
        """
        return pulumi.get(self, "sla_class_list_version")


@pulumi.output_type
class ApplicationAwareRoutingPolicyDefinitionSequenceMatchEntry(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "applicationListId":
            suggest = "application_list_id"
        elif key == "applicationListVersion":
            suggest = "application_list_version"
        elif key == "destinationDataPrefixListId":
            suggest = "destination_data_prefix_list_id"
        elif key == "destinationDataPrefixListVersion":
            suggest = "destination_data_prefix_list_version"
        elif key == "destinationIp":
            suggest = "destination_ip"
        elif key == "destinationPort":
            suggest = "destination_port"
        elif key == "destinationRegion":
            suggest = "destination_region"
        elif key == "dnsApplicationListId":
            suggest = "dns_application_list_id"
        elif key == "dnsApplicationListVersion":
            suggest = "dns_application_list_version"
        elif key == "icmpMessage":
            suggest = "icmp_message"
        elif key == "sourceDataPrefixListId":
            suggest = "source_data_prefix_list_id"
        elif key == "sourceDataPrefixListVersion":
            suggest = "source_data_prefix_list_version"
        elif key == "sourceIp":
            suggest = "source_ip"
        elif key == "sourcePort":
            suggest = "source_port"
        elif key == "trafficTo":
            suggest = "traffic_to"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ApplicationAwareRoutingPolicyDefinitionSequenceMatchEntry. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ApplicationAwareRoutingPolicyDefinitionSequenceMatchEntry.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ApplicationAwareRoutingPolicyDefinitionSequenceMatchEntry.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 type: _builtins.str,
                 application_list_id: Optional[_builtins.str] = None,
                 application_list_version: Optional[_builtins.int] = None,
                 destination_data_prefix_list_id: Optional[_builtins.str] = None,
                 destination_data_prefix_list_version: Optional[_builtins.int] = None,
                 destination_ip: Optional[_builtins.str] = None,
                 destination_port: Optional[_builtins.str] = None,
                 destination_region: Optional[_builtins.str] = None,
                 dns: Optional[_builtins.str] = None,
                 dns_application_list_id: Optional[_builtins.str] = None,
                 dns_application_list_version: Optional[_builtins.int] = None,
                 dscp: Optional[_builtins.str] = None,
                 icmp_message: Optional[_builtins.str] = None,
                 plp: Optional[_builtins.str] = None,
                 protocol: Optional[_builtins.str] = None,
                 source_data_prefix_list_id: Optional[_builtins.str] = None,
                 source_data_prefix_list_version: Optional[_builtins.int] = None,
                 source_ip: Optional[_builtins.str] = None,
                 source_port: Optional[_builtins.str] = None,
                 traffic_to: Optional[_builtins.str] = None):
        """
        :param _builtins.str type: Type of match entry
                 - Choices: `appList`, `dnsAppList`, `dns`, `dscp`, `plp`, `protocol`, `sourceDataPrefixList`, `sourceIp`, `sourcePort`, `destinationDataPrefixList`, `destinationIp`, `destinationRegion`, `destinationPort`, `trafficTo`, `icmpMessage`
        :param _builtins.str application_list_id: Application list ID, Attribute conditional on `type` being equal to `appList`
        :param _builtins.int application_list_version: Application list version
        :param _builtins.str destination_data_prefix_list_id: Destination Data Prefix list ID, Attribute conditional on `type` being equal to `destinationDataPrefixList`
        :param _builtins.int destination_data_prefix_list_version: Destination Data Prefix list version
        :param _builtins.str destination_ip: Destination IP, Attribute conditional on `type` being equal to `destinationIp`
        :param _builtins.str destination_port: Destination port, 0-65535 (Single value, range or multiple values separated by spaces), Attribute conditional on `type` being equal to `destinationPort`
        :param _builtins.str destination_region: Destination region, Attribute conditional on `type` being equal to `destinationRegion`
                 - Choices: `primary-region`, `secondary-region`, `other-region`
        :param _builtins.str dns: DNS request or response, Attribute conditional on `type` being equal to `dns`
                 - Choices: `request`, `response`
        :param _builtins.str dns_application_list_id: DNS Application list ID, Attribute conditional on `type` being equal to `dnsAppList`
        :param _builtins.int dns_application_list_version: DNS Application list version
        :param _builtins.str dscp: DSCP value, Attribute conditional on `type` being equal to `dscp`
        :param _builtins.str icmp_message: ICMP Message, Attribute conditional on `type` being equal to `icmpMessage`
        :param _builtins.str plp: PLP, Attribute conditional on `type` being equal to `plp`
                 - Choices: `low`, `high`
        :param _builtins.str protocol: IP Protocol, 0-255 (Single value or multiple values separated by spaces), Attribute conditional on `type` being equal to `protocol`
        :param _builtins.str source_data_prefix_list_id: Source Data Prefix list ID, Attribute conditional on `type` being equal to `sourceDataPrefixList`
        :param _builtins.int source_data_prefix_list_version: Source Data Prefix list version
        :param _builtins.str source_ip: Source IP, Attribute conditional on `type` being equal to `sourceIp`
        :param _builtins.str source_port: Source port, 0-65535 (Single value, range or multiple values separated by spaces), Attribute conditional on `type` being equal to `sourcePort`
        :param _builtins.str traffic_to: Traffic to, Attribute conditional on `type` being equal to `trafficTo`
                 - Choices: `access`, `core`, `service`
        """
        pulumi.set(__self__, "type", type)
        if application_list_id is not None:
            pulumi.set(__self__, "application_list_id", application_list_id)
        if application_list_version is not None:
            pulumi.set(__self__, "application_list_version", application_list_version)
        if destination_data_prefix_list_id is not None:
            pulumi.set(__self__, "destination_data_prefix_list_id", destination_data_prefix_list_id)
        if destination_data_prefix_list_version is not None:
            pulumi.set(__self__, "destination_data_prefix_list_version", destination_data_prefix_list_version)
        if destination_ip is not None:
            pulumi.set(__self__, "destination_ip", destination_ip)
        if destination_port is not None:
            pulumi.set(__self__, "destination_port", destination_port)
        if destination_region is not None:
            pulumi.set(__self__, "destination_region", destination_region)
        if dns is not None:
            pulumi.set(__self__, "dns", dns)
        if dns_application_list_id is not None:
            pulumi.set(__self__, "dns_application_list_id", dns_application_list_id)
        if dns_application_list_version is not None:
            pulumi.set(__self__, "dns_application_list_version", dns_application_list_version)
        if dscp is not None:
            pulumi.set(__self__, "dscp", dscp)
        if icmp_message is not None:
            pulumi.set(__self__, "icmp_message", icmp_message)
        if plp is not None:
            pulumi.set(__self__, "plp", plp)
        if protocol is not None:
            pulumi.set(__self__, "protocol", protocol)
        if source_data_prefix_list_id is not None:
            pulumi.set(__self__, "source_data_prefix_list_id", source_data_prefix_list_id)
        if source_data_prefix_list_version is not None:
            pulumi.set(__self__, "source_data_prefix_list_version", source_data_prefix_list_version)
        if source_ip is not None:
            pulumi.set(__self__, "source_ip", source_ip)
        if source_port is not None:
            pulumi.set(__self__, "source_port", source_port)
        if traffic_to is not None:
            pulumi.set(__self__, "traffic_to", traffic_to)

    @_builtins.property
    @pulumi.getter
    def type(self) -> _builtins.str:
        """
        Type of match entry
          - Choices: `appList`, `dnsAppList`, `dns`, `dscp`, `plp`, `protocol`, `sourceDataPrefixList`, `sourceIp`, `sourcePort`, `destinationDataPrefixList`, `destinationIp`, `destinationRegion`, `destinationPort`, `trafficTo`, `icmpMessage`
        """
        return pulumi.get(self, "type")

    @_builtins.property
    @pulumi.getter(name="applicationListId")
    def application_list_id(self) -> Optional[_builtins.str]:
        """
        Application list ID, Attribute conditional on `type` being equal to `appList`
        """
        return pulumi.get(self, "application_list_id")

    @_builtins.property
    @pulumi.getter(name="applicationListVersion")
    def application_list_version(self) -> Optional[_builtins.int]:
        """
        Application list version
        """
        return pulumi.get(self, "application_list_version")

    @_builtins.property
    @pulumi.getter(name="destinationDataPrefixListId")
    def destination_data_prefix_list_id(self) -> Optional[_builtins.str]:
        """
        Destination Data Prefix list ID, Attribute conditional on `type` being equal to `destinationDataPrefixList`
        """
        return pulumi.get(self, "destination_data_prefix_list_id")

    @_builtins.property
    @pulumi.getter(name="destinationDataPrefixListVersion")
    def destination_data_prefix_list_version(self) -> Optional[_builtins.int]:
        """
        Destination Data Prefix list version
        """
        return pulumi.get(self, "destination_data_prefix_list_version")

    @_builtins.property
    @pulumi.getter(name="destinationIp")
    def destination_ip(self) -> Optional[_builtins.str]:
        """
        Destination IP, Attribute conditional on `type` being equal to `destinationIp`
        """
        return pulumi.get(self, "destination_ip")

    @_builtins.property
    @pulumi.getter(name="destinationPort")
    def destination_port(self) -> Optional[_builtins.str]:
        """
        Destination port, 0-65535 (Single value, range or multiple values separated by spaces), Attribute conditional on `type` being equal to `destinationPort`
        """
        return pulumi.get(self, "destination_port")

    @_builtins.property
    @pulumi.getter(name="destinationRegion")
    def destination_region(self) -> Optional[_builtins.str]:
        """
        Destination region, Attribute conditional on `type` being equal to `destinationRegion`
          - Choices: `primary-region`, `secondary-region`, `other-region`
        """
        return pulumi.get(self, "destination_region")

    @_builtins.property
    @pulumi.getter
    def dns(self) -> Optional[_builtins.str]:
        """
        DNS request or response, Attribute conditional on `type` being equal to `dns`
          - Choices: `request`, `response`
        """
        return pulumi.get(self, "dns")

    @_builtins.property
    @pulumi.getter(name="dnsApplicationListId")
    def dns_application_list_id(self) -> Optional[_builtins.str]:
        """
        DNS Application list ID, Attribute conditional on `type` being equal to `dnsAppList`
        """
        return pulumi.get(self, "dns_application_list_id")

    @_builtins.property
    @pulumi.getter(name="dnsApplicationListVersion")
    def dns_application_list_version(self) -> Optional[_builtins.int]:
        """
        DNS Application list version
        """
        return pulumi.get(self, "dns_application_list_version")

    @_builtins.property
    @pulumi.getter
    def dscp(self) -> Optional[_builtins.str]:
        """
        DSCP value, Attribute conditional on `type` being equal to `dscp`
        """
        return pulumi.get(self, "dscp")

    @_builtins.property
    @pulumi.getter(name="icmpMessage")
    def icmp_message(self) -> Optional[_builtins.str]:
        """
        ICMP Message, Attribute conditional on `type` being equal to `icmpMessage`
        """
        return pulumi.get(self, "icmp_message")

    @_builtins.property
    @pulumi.getter
    def plp(self) -> Optional[_builtins.str]:
        """
        PLP, Attribute conditional on `type` being equal to `plp`
          - Choices: `low`, `high`
        """
        return pulumi.get(self, "plp")

    @_builtins.property
    @pulumi.getter
    def protocol(self) -> Optional[_builtins.str]:
        """
        IP Protocol, 0-255 (Single value or multiple values separated by spaces), Attribute conditional on `type` being equal to `protocol`
        """
        return pulumi.get(self, "protocol")

    @_builtins.property
    @pulumi.getter(name="sourceDataPrefixListId")
    def source_data_prefix_list_id(self) -> Optional[_builtins.str]:
        """
        Source Data Prefix list ID, Attribute conditional on `type` being equal to `sourceDataPrefixList`
        """
        return pulumi.get(self, "source_data_prefix_list_id")

    @_builtins.property
    @pulumi.getter(name="sourceDataPrefixListVersion")
    def source_data_prefix_list_version(self) -> Optional[_builtins.int]:
        """
        Source Data Prefix list version
        """
        return pulumi.get(self, "source_data_prefix_list_version")

    @_builtins.property
    @pulumi.getter(name="sourceIp")
    def source_ip(self) -> Optional[_builtins.str]:
        """
        Source IP, Attribute conditional on `type` being equal to `sourceIp`
        """
        return pulumi.get(self, "source_ip")

    @_builtins.property
    @pulumi.getter(name="sourcePort")
    def source_port(self) -> Optional[_builtins.str]:
        """
        Source port, 0-65535 (Single value, range or multiple values separated by spaces), Attribute conditional on `type` being equal to `sourcePort`
        """
        return pulumi.get(self, "source_port")

    @_builtins.property
    @pulumi.getter(name="trafficTo")
    def traffic_to(self) -> Optional[_builtins.str]:
        """
        Traffic to, Attribute conditional on `type` being equal to `trafficTo`
          - Choices: `access`, `core`, `service`
        """
        return pulumi.get(self, "traffic_to")


@pulumi.output_type
class ApplicationListPolicyObjectEntry(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "applicationFamily":
            suggest = "application_family"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ApplicationListPolicyObjectEntry. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ApplicationListPolicyObjectEntry.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ApplicationListPolicyObjectEntry.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 application: Optional[_builtins.str] = None,
                 application_family: Optional[_builtins.str] = None):
        """
        :param _builtins.str application: Application name
        :param _builtins.str application_family: Application family name
        """
        if application is not None:
            pulumi.set(__self__, "application", application)
        if application_family is not None:
            pulumi.set(__self__, "application_family", application_family)

    @_builtins.property
    @pulumi.getter
    def application(self) -> Optional[_builtins.str]:
        """
        Application name
        """
        return pulumi.get(self, "application")

    @_builtins.property
    @pulumi.getter(name="applicationFamily")
    def application_family(self) -> Optional[_builtins.str]:
        """
        Application family name
        """
        return pulumi.get(self, "application_family")


@pulumi.output_type
class ApplicationPriorityQosPolicyQosScheduler(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "forwardingClassId":
            suggest = "forwarding_class_id"
        elif key == "schedulingType":
            suggest = "scheduling_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ApplicationPriorityQosPolicyQosScheduler. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ApplicationPriorityQosPolicyQosScheduler.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ApplicationPriorityQosPolicyQosScheduler.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 bandwidth: Optional[_builtins.str] = None,
                 drops: Optional[_builtins.str] = None,
                 forwarding_class_id: Optional[_builtins.str] = None,
                 queue: Optional[_builtins.str] = None,
                 scheduling_type: Optional[_builtins.str] = None):
        """
        :param _builtins.str bandwidth: bandwidthPercent
        :param _builtins.str drops: drops
        :param _builtins.str queue: queue
        :param _builtins.str scheduling_type: scheduling
        """
        if bandwidth is not None:
            pulumi.set(__self__, "bandwidth", bandwidth)
        if drops is not None:
            pulumi.set(__self__, "drops", drops)
        if forwarding_class_id is not None:
            pulumi.set(__self__, "forwarding_class_id", forwarding_class_id)
        if queue is not None:
            pulumi.set(__self__, "queue", queue)
        if scheduling_type is not None:
            pulumi.set(__self__, "scheduling_type", scheduling_type)

    @_builtins.property
    @pulumi.getter
    def bandwidth(self) -> Optional[_builtins.str]:
        """
        bandwidthPercent
        """
        return pulumi.get(self, "bandwidth")

    @_builtins.property
    @pulumi.getter
    def drops(self) -> Optional[_builtins.str]:
        """
        drops
        """
        return pulumi.get(self, "drops")

    @_builtins.property
    @pulumi.getter(name="forwardingClassId")
    def forwarding_class_id(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "forwarding_class_id")

    @_builtins.property
    @pulumi.getter
    def queue(self) -> Optional[_builtins.str]:
        """
        queue
        """
        return pulumi.get(self, "queue")

    @_builtins.property
    @pulumi.getter(name="schedulingType")
    def scheduling_type(self) -> Optional[_builtins.str]:
        """
        scheduling
        """
        return pulumi.get(self, "scheduling_type")


@pulumi.output_type
class ApplicationPriorityTrafficPolicyPolicySequence(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "baseAction":
            suggest = "base_action"
        elif key == "matchEntries":
            suggest = "match_entries"
        elif key == "sequenceId":
            suggest = "sequence_id"
        elif key == "sequenceName":
            suggest = "sequence_name"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ApplicationPriorityTrafficPolicyPolicySequence. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ApplicationPriorityTrafficPolicyPolicySequence.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ApplicationPriorityTrafficPolicyPolicySequence.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 actions: Optional[Sequence['outputs.ApplicationPriorityTrafficPolicyPolicySequenceAction']] = None,
                 base_action: Optional[_builtins.str] = None,
                 match_entries: Optional[Sequence['outputs.ApplicationPriorityTrafficPolicyPolicySequenceMatchEntry']] = None,
                 protocol: Optional[_builtins.str] = None,
                 sequence_id: Optional[_builtins.int] = None,
                 sequence_name: Optional[_builtins.str] = None):
        """
        :param _builtins.str base_action: Base Action
                 - Choices: `drop`, `accept`
        :param _builtins.str protocol: Sequence IP Type
                 - Choices: `ipv4`, `ipv6`, `all`
        :param _builtins.int sequence_id: Sequence Id
                 - Range: `1`-`65536`
        :param _builtins.str sequence_name: Sequence Name
        """
        if actions is not None:
            pulumi.set(__self__, "actions", actions)
        if base_action is not None:
            pulumi.set(__self__, "base_action", base_action)
        if match_entries is not None:
            pulumi.set(__self__, "match_entries", match_entries)
        if protocol is not None:
            pulumi.set(__self__, "protocol", protocol)
        if sequence_id is not None:
            pulumi.set(__self__, "sequence_id", sequence_id)
        if sequence_name is not None:
            pulumi.set(__self__, "sequence_name", sequence_name)

    @_builtins.property
    @pulumi.getter
    def actions(self) -> Optional[Sequence['outputs.ApplicationPriorityTrafficPolicyPolicySequenceAction']]:
        return pulumi.get(self, "actions")

    @_builtins.property
    @pulumi.getter(name="baseAction")
    def base_action(self) -> Optional[_builtins.str]:
        """
        Base Action
          - Choices: `drop`, `accept`
        """
        return pulumi.get(self, "base_action")

    @_builtins.property
    @pulumi.getter(name="matchEntries")
    def match_entries(self) -> Optional[Sequence['outputs.ApplicationPriorityTrafficPolicyPolicySequenceMatchEntry']]:
        return pulumi.get(self, "match_entries")

    @_builtins.property
    @pulumi.getter
    def protocol(self) -> Optional[_builtins.str]:
        """
        Sequence IP Type
          - Choices: `ipv4`, `ipv6`, `all`
        """
        return pulumi.get(self, "protocol")

    @_builtins.property
    @pulumi.getter(name="sequenceId")
    def sequence_id(self) -> Optional[_builtins.int]:
        """
        Sequence Id
          - Range: `1`-`65536`
        """
        return pulumi.get(self, "sequence_id")

    @_builtins.property
    @pulumi.getter(name="sequenceName")
    def sequence_name(self) -> Optional[_builtins.str]:
        """
        Sequence Name
        """
        return pulumi.get(self, "sequence_name")


@pulumi.output_type
class ApplicationPriorityTrafficPolicyPolicySequenceAction(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "backupSlaPreferredColors":
            suggest = "backup_sla_preferred_colors"
        elif key == "cloudProbe":
            suggest = "cloud_probe"
        elif key == "cloudSaas":
            suggest = "cloud_saas"
        elif key == "fallbackToRouting":
            suggest = "fallback_to_routing"
        elif key == "lossCorrectFecThreshold":
            suggest = "loss_correct_fec_threshold"
        elif key == "lossCorrectType":
            suggest = "loss_correct_type"
        elif key == "natBypass":
            suggest = "nat_bypass"
        elif key == "natDiaInterfaces":
            suggest = "nat_dia_interfaces"
        elif key == "natDiaPools":
            suggest = "nat_dia_pools"
        elif key == "natFallback":
            suggest = "nat_fallback"
        elif key == "natPool":
            suggest = "nat_pool"
        elif key == "natVpn":
            suggest = "nat_vpn"
        elif key == "redirectDnsField":
            suggest = "redirect_dns_field"
        elif key == "redirectDnsValue":
            suggest = "redirect_dns_value"
        elif key == "secureInternetGateway":
            suggest = "secure_internet_gateway"
        elif key == "setParameters":
            suggest = "set_parameters"
        elif key == "slaClasses":
            suggest = "sla_classes"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ApplicationPriorityTrafficPolicyPolicySequenceAction. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ApplicationPriorityTrafficPolicyPolicySequenceAction.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ApplicationPriorityTrafficPolicyPolicySequenceAction.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 backup_sla_preferred_colors: Optional[Sequence[_builtins.str]] = None,
                 cloud_probe: Optional[_builtins.bool] = None,
                 cloud_saas: Optional[_builtins.bool] = None,
                 count: Optional[_builtins.str] = None,
                 fallback_to_routing: Optional[_builtins.bool] = None,
                 log: Optional[_builtins.bool] = None,
                 loss_correct_fec_threshold: Optional[_builtins.int] = None,
                 loss_correct_type: Optional[_builtins.str] = None,
                 nat_bypass: Optional[_builtins.bool] = None,
                 nat_dia_interfaces: Optional[Sequence[_builtins.str]] = None,
                 nat_dia_pools: Optional[Sequence[_builtins.int]] = None,
                 nat_fallback: Optional[_builtins.bool] = None,
                 nat_pool: Optional[_builtins.int] = None,
                 nat_vpn: Optional[_builtins.bool] = None,
                 redirect_dns_field: Optional[_builtins.str] = None,
                 redirect_dns_value: Optional[_builtins.str] = None,
                 secure_internet_gateway: Optional[_builtins.bool] = None,
                 set_parameters: Optional[Sequence['outputs.ApplicationPriorityTrafficPolicyPolicySequenceActionSetParameter']] = None,
                 sla_classes: Optional[Sequence['outputs.ApplicationPriorityTrafficPolicyPolicySequenceActionSlaClass']] = None):
        """
        :param Sequence[_builtins.str] backup_sla_preferred_colors: Backup SLA perferred color
        :param _builtins.int loss_correct_fec_threshold: - Range: `1`-`5`
        :param _builtins.str loss_correct_type: - Choices: `fecAdaptive`, `fecAlways`, `packetDuplication`
        :param _builtins.int nat_pool: - Range: `1`-`31`
        :param _builtins.str redirect_dns_field: - Choices: `ipAddress`, `redirectDns`
        :param Sequence['ApplicationPriorityTrafficPolicyPolicySequenceActionSlaClassArgs'] sla_classes: slaClass
        """
        if backup_sla_preferred_colors is not None:
            pulumi.set(__self__, "backup_sla_preferred_colors", backup_sla_preferred_colors)
        if cloud_probe is not None:
            pulumi.set(__self__, "cloud_probe", cloud_probe)
        if cloud_saas is not None:
            pulumi.set(__self__, "cloud_saas", cloud_saas)
        if count is not None:
            pulumi.set(__self__, "count", count)
        if fallback_to_routing is not None:
            pulumi.set(__self__, "fallback_to_routing", fallback_to_routing)
        if log is not None:
            pulumi.set(__self__, "log", log)
        if loss_correct_fec_threshold is not None:
            pulumi.set(__self__, "loss_correct_fec_threshold", loss_correct_fec_threshold)
        if loss_correct_type is not None:
            pulumi.set(__self__, "loss_correct_type", loss_correct_type)
        if nat_bypass is not None:
            pulumi.set(__self__, "nat_bypass", nat_bypass)
        if nat_dia_interfaces is not None:
            pulumi.set(__self__, "nat_dia_interfaces", nat_dia_interfaces)
        if nat_dia_pools is not None:
            pulumi.set(__self__, "nat_dia_pools", nat_dia_pools)
        if nat_fallback is not None:
            pulumi.set(__self__, "nat_fallback", nat_fallback)
        if nat_pool is not None:
            pulumi.set(__self__, "nat_pool", nat_pool)
        if nat_vpn is not None:
            pulumi.set(__self__, "nat_vpn", nat_vpn)
        if redirect_dns_field is not None:
            pulumi.set(__self__, "redirect_dns_field", redirect_dns_field)
        if redirect_dns_value is not None:
            pulumi.set(__self__, "redirect_dns_value", redirect_dns_value)
        if secure_internet_gateway is not None:
            pulumi.set(__self__, "secure_internet_gateway", secure_internet_gateway)
        if set_parameters is not None:
            pulumi.set(__self__, "set_parameters", set_parameters)
        if sla_classes is not None:
            pulumi.set(__self__, "sla_classes", sla_classes)

    @_builtins.property
    @pulumi.getter(name="backupSlaPreferredColors")
    def backup_sla_preferred_colors(self) -> Optional[Sequence[_builtins.str]]:
        """
        Backup SLA perferred color
        """
        return pulumi.get(self, "backup_sla_preferred_colors")

    @_builtins.property
    @pulumi.getter(name="cloudProbe")
    def cloud_probe(self) -> Optional[_builtins.bool]:
        return pulumi.get(self, "cloud_probe")

    @_builtins.property
    @pulumi.getter(name="cloudSaas")
    def cloud_saas(self) -> Optional[_builtins.bool]:
        return pulumi.get(self, "cloud_saas")

    @_builtins.property
    @pulumi.getter
    def count(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "count")

    @_builtins.property
    @pulumi.getter(name="fallbackToRouting")
    def fallback_to_routing(self) -> Optional[_builtins.bool]:
        return pulumi.get(self, "fallback_to_routing")

    @_builtins.property
    @pulumi.getter
    def log(self) -> Optional[_builtins.bool]:
        return pulumi.get(self, "log")

    @_builtins.property
    @pulumi.getter(name="lossCorrectFecThreshold")
    def loss_correct_fec_threshold(self) -> Optional[_builtins.int]:
        """
        - Range: `1`-`5`
        """
        return pulumi.get(self, "loss_correct_fec_threshold")

    @_builtins.property
    @pulumi.getter(name="lossCorrectType")
    def loss_correct_type(self) -> Optional[_builtins.str]:
        """
        - Choices: `fecAdaptive`, `fecAlways`, `packetDuplication`
        """
        return pulumi.get(self, "loss_correct_type")

    @_builtins.property
    @pulumi.getter(name="natBypass")
    def nat_bypass(self) -> Optional[_builtins.bool]:
        return pulumi.get(self, "nat_bypass")

    @_builtins.property
    @pulumi.getter(name="natDiaInterfaces")
    def nat_dia_interfaces(self) -> Optional[Sequence[_builtins.str]]:
        return pulumi.get(self, "nat_dia_interfaces")

    @_builtins.property
    @pulumi.getter(name="natDiaPools")
    def nat_dia_pools(self) -> Optional[Sequence[_builtins.int]]:
        return pulumi.get(self, "nat_dia_pools")

    @_builtins.property
    @pulumi.getter(name="natFallback")
    def nat_fallback(self) -> Optional[_builtins.bool]:
        return pulumi.get(self, "nat_fallback")

    @_builtins.property
    @pulumi.getter(name="natPool")
    def nat_pool(self) -> Optional[_builtins.int]:
        """
        - Range: `1`-`31`
        """
        return pulumi.get(self, "nat_pool")

    @_builtins.property
    @pulumi.getter(name="natVpn")
    def nat_vpn(self) -> Optional[_builtins.bool]:
        return pulumi.get(self, "nat_vpn")

    @_builtins.property
    @pulumi.getter(name="redirectDnsField")
    def redirect_dns_field(self) -> Optional[_builtins.str]:
        """
        - Choices: `ipAddress`, `redirectDns`
        """
        return pulumi.get(self, "redirect_dns_field")

    @_builtins.property
    @pulumi.getter(name="redirectDnsValue")
    def redirect_dns_value(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "redirect_dns_value")

    @_builtins.property
    @pulumi.getter(name="secureInternetGateway")
    def secure_internet_gateway(self) -> Optional[_builtins.bool]:
        return pulumi.get(self, "secure_internet_gateway")

    @_builtins.property
    @pulumi.getter(name="setParameters")
    def set_parameters(self) -> Optional[Sequence['outputs.ApplicationPriorityTrafficPolicyPolicySequenceActionSetParameter']]:
        return pulumi.get(self, "set_parameters")

    @_builtins.property
    @pulumi.getter(name="slaClasses")
    def sla_classes(self) -> Optional[Sequence['outputs.ApplicationPriorityTrafficPolicyPolicySequenceActionSlaClass']]:
        """
        slaClass
        """
        return pulumi.get(self, "sla_classes")


@pulumi.output_type
class ApplicationPriorityTrafficPolicyPolicySequenceActionSetParameter(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "forwardingClassListId":
            suggest = "forwarding_class_list_id"
        elif key == "localTlocListColors":
            suggest = "local_tloc_list_colors"
        elif key == "localTlocListEncapsulation":
            suggest = "local_tloc_list_encapsulation"
        elif key == "localTlocListRestrict":
            suggest = "local_tloc_list_restrict"
        elif key == "nextHopIpv4":
            suggest = "next_hop_ipv4"
        elif key == "nextHopIpv6":
            suggest = "next_hop_ipv6"
        elif key == "nextHopLoose":
            suggest = "next_hop_loose"
        elif key == "policerId":
            suggest = "policer_id"
        elif key == "preferredColorGroupId":
            suggest = "preferred_color_group_id"
        elif key == "preferredRemoteColorIds":
            suggest = "preferred_remote_color_ids"
        elif key == "preferredRemoteColorRestrict":
            suggest = "preferred_remote_color_restrict"
        elif key == "serviceChainFallbackToRouting":
            suggest = "service_chain_fallback_to_routing"
        elif key == "serviceChainLocal":
            suggest = "service_chain_local"
        elif key == "serviceChainTlocColors":
            suggest = "service_chain_tloc_colors"
        elif key == "serviceChainTlocEncapsulation":
            suggest = "service_chain_tloc_encapsulation"
        elif key == "serviceChainTlocIp":
            suggest = "service_chain_tloc_ip"
        elif key == "serviceChainTlocListId":
            suggest = "service_chain_tloc_list_id"
        elif key == "serviceChainType":
            suggest = "service_chain_type"
        elif key == "serviceChainVpn":
            suggest = "service_chain_vpn"
        elif key == "serviceTlocColors":
            suggest = "service_tloc_colors"
        elif key == "serviceTlocEncapsulation":
            suggest = "service_tloc_encapsulation"
        elif key == "serviceTlocIp":
            suggest = "service_tloc_ip"
        elif key == "serviceTlocListId":
            suggest = "service_tloc_list_id"
        elif key == "serviceType":
            suggest = "service_type"
        elif key == "serviceVpn":
            suggest = "service_vpn"
        elif key == "tlocColors":
            suggest = "tloc_colors"
        elif key == "tlocEncapsulation":
            suggest = "tloc_encapsulation"
        elif key == "tlocIp":
            suggest = "tloc_ip"
        elif key == "tlocListId":
            suggest = "tloc_list_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ApplicationPriorityTrafficPolicyPolicySequenceActionSetParameter. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ApplicationPriorityTrafficPolicyPolicySequenceActionSetParameter.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ApplicationPriorityTrafficPolicyPolicySequenceActionSetParameter.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 dscp: Optional[_builtins.int] = None,
                 forwarding_class_list_id: Optional[_builtins.str] = None,
                 local_tloc_list_colors: Optional[Sequence[_builtins.str]] = None,
                 local_tloc_list_encapsulation: Optional[_builtins.str] = None,
                 local_tloc_list_restrict: Optional[_builtins.str] = None,
                 next_hop_ipv4: Optional[_builtins.str] = None,
                 next_hop_ipv6: Optional[_builtins.str] = None,
                 next_hop_loose: Optional[_builtins.bool] = None,
                 policer_id: Optional[_builtins.str] = None,
                 preferred_color_group_id: Optional[_builtins.str] = None,
                 preferred_remote_color_ids: Optional[Sequence[_builtins.str]] = None,
                 preferred_remote_color_restrict: Optional[_builtins.str] = None,
                 service_chain_fallback_to_routing: Optional[_builtins.bool] = None,
                 service_chain_local: Optional[_builtins.bool] = None,
                 service_chain_tloc_colors: Optional[Sequence[_builtins.str]] = None,
                 service_chain_tloc_encapsulation: Optional[_builtins.str] = None,
                 service_chain_tloc_ip: Optional[_builtins.str] = None,
                 service_chain_tloc_list_id: Optional[_builtins.str] = None,
                 service_chain_type: Optional[_builtins.str] = None,
                 service_chain_vpn: Optional[_builtins.int] = None,
                 service_tloc_colors: Optional[Sequence[_builtins.str]] = None,
                 service_tloc_encapsulation: Optional[_builtins.str] = None,
                 service_tloc_ip: Optional[_builtins.str] = None,
                 service_tloc_list_id: Optional[_builtins.str] = None,
                 service_type: Optional[_builtins.str] = None,
                 service_vpn: Optional[_builtins.str] = None,
                 tloc_colors: Optional[Sequence[_builtins.str]] = None,
                 tloc_encapsulation: Optional[_builtins.str] = None,
                 tloc_ip: Optional[_builtins.str] = None,
                 tloc_list_id: Optional[_builtins.str] = None,
                 vpn: Optional[_builtins.str] = None):
        """
        :param _builtins.int dscp: - Range: `0`-`63`
        :param _builtins.str local_tloc_list_encapsulation: - Choices: `ipsec`, `gre`
        :param _builtins.str service_chain_tloc_encapsulation: - Choices: `ipsec`, `gre`
        :param _builtins.str service_chain_type: - Choices: `SC1`, `SC2`, `SC4`, `SC5`, `SC6`, `SC7`, `SC8`, `SC9`, `SC10`, `SC11`, `SC12`, `SC13`, `SC14`, `SC15`, `SC16`
        :param _builtins.int service_chain_vpn: - Range: `0`-`65530`
        :param _builtins.str service_tloc_encapsulation: - Choices: `ipsec`, `gre`
        :param _builtins.str service_type: - Choices: `FW`, `IDS`, `IDP`, `netsvc1`, `netsvc2`, `netsvc3`, `netsvc4`, `appqoe`
        :param _builtins.str tloc_encapsulation: - Choices: `ipsec`, `gre`
        """
        if dscp is not None:
            pulumi.set(__self__, "dscp", dscp)
        if forwarding_class_list_id is not None:
            pulumi.set(__self__, "forwarding_class_list_id", forwarding_class_list_id)
        if local_tloc_list_colors is not None:
            pulumi.set(__self__, "local_tloc_list_colors", local_tloc_list_colors)
        if local_tloc_list_encapsulation is not None:
            pulumi.set(__self__, "local_tloc_list_encapsulation", local_tloc_list_encapsulation)
        if local_tloc_list_restrict is not None:
            pulumi.set(__self__, "local_tloc_list_restrict", local_tloc_list_restrict)
        if next_hop_ipv4 is not None:
            pulumi.set(__self__, "next_hop_ipv4", next_hop_ipv4)
        if next_hop_ipv6 is not None:
            pulumi.set(__self__, "next_hop_ipv6", next_hop_ipv6)
        if next_hop_loose is not None:
            pulumi.set(__self__, "next_hop_loose", next_hop_loose)
        if policer_id is not None:
            pulumi.set(__self__, "policer_id", policer_id)
        if preferred_color_group_id is not None:
            pulumi.set(__self__, "preferred_color_group_id", preferred_color_group_id)
        if preferred_remote_color_ids is not None:
            pulumi.set(__self__, "preferred_remote_color_ids", preferred_remote_color_ids)
        if preferred_remote_color_restrict is not None:
            pulumi.set(__self__, "preferred_remote_color_restrict", preferred_remote_color_restrict)
        if service_chain_fallback_to_routing is not None:
            pulumi.set(__self__, "service_chain_fallback_to_routing", service_chain_fallback_to_routing)
        if service_chain_local is not None:
            pulumi.set(__self__, "service_chain_local", service_chain_local)
        if service_chain_tloc_colors is not None:
            pulumi.set(__self__, "service_chain_tloc_colors", service_chain_tloc_colors)
        if service_chain_tloc_encapsulation is not None:
            pulumi.set(__self__, "service_chain_tloc_encapsulation", service_chain_tloc_encapsulation)
        if service_chain_tloc_ip is not None:
            pulumi.set(__self__, "service_chain_tloc_ip", service_chain_tloc_ip)
        if service_chain_tloc_list_id is not None:
            pulumi.set(__self__, "service_chain_tloc_list_id", service_chain_tloc_list_id)
        if service_chain_type is not None:
            pulumi.set(__self__, "service_chain_type", service_chain_type)
        if service_chain_vpn is not None:
            pulumi.set(__self__, "service_chain_vpn", service_chain_vpn)
        if service_tloc_colors is not None:
            pulumi.set(__self__, "service_tloc_colors", service_tloc_colors)
        if service_tloc_encapsulation is not None:
            pulumi.set(__self__, "service_tloc_encapsulation", service_tloc_encapsulation)
        if service_tloc_ip is not None:
            pulumi.set(__self__, "service_tloc_ip", service_tloc_ip)
        if service_tloc_list_id is not None:
            pulumi.set(__self__, "service_tloc_list_id", service_tloc_list_id)
        if service_type is not None:
            pulumi.set(__self__, "service_type", service_type)
        if service_vpn is not None:
            pulumi.set(__self__, "service_vpn", service_vpn)
        if tloc_colors is not None:
            pulumi.set(__self__, "tloc_colors", tloc_colors)
        if tloc_encapsulation is not None:
            pulumi.set(__self__, "tloc_encapsulation", tloc_encapsulation)
        if tloc_ip is not None:
            pulumi.set(__self__, "tloc_ip", tloc_ip)
        if tloc_list_id is not None:
            pulumi.set(__self__, "tloc_list_id", tloc_list_id)
        if vpn is not None:
            pulumi.set(__self__, "vpn", vpn)

    @_builtins.property
    @pulumi.getter
    def dscp(self) -> Optional[_builtins.int]:
        """
        - Range: `0`-`63`
        """
        return pulumi.get(self, "dscp")

    @_builtins.property
    @pulumi.getter(name="forwardingClassListId")
    def forwarding_class_list_id(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "forwarding_class_list_id")

    @_builtins.property
    @pulumi.getter(name="localTlocListColors")
    def local_tloc_list_colors(self) -> Optional[Sequence[_builtins.str]]:
        return pulumi.get(self, "local_tloc_list_colors")

    @_builtins.property
    @pulumi.getter(name="localTlocListEncapsulation")
    def local_tloc_list_encapsulation(self) -> Optional[_builtins.str]:
        """
        - Choices: `ipsec`, `gre`
        """
        return pulumi.get(self, "local_tloc_list_encapsulation")

    @_builtins.property
    @pulumi.getter(name="localTlocListRestrict")
    def local_tloc_list_restrict(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "local_tloc_list_restrict")

    @_builtins.property
    @pulumi.getter(name="nextHopIpv4")
    def next_hop_ipv4(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "next_hop_ipv4")

    @_builtins.property
    @pulumi.getter(name="nextHopIpv6")
    def next_hop_ipv6(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "next_hop_ipv6")

    @_builtins.property
    @pulumi.getter(name="nextHopLoose")
    def next_hop_loose(self) -> Optional[_builtins.bool]:
        return pulumi.get(self, "next_hop_loose")

    @_builtins.property
    @pulumi.getter(name="policerId")
    def policer_id(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "policer_id")

    @_builtins.property
    @pulumi.getter(name="preferredColorGroupId")
    def preferred_color_group_id(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "preferred_color_group_id")

    @_builtins.property
    @pulumi.getter(name="preferredRemoteColorIds")
    def preferred_remote_color_ids(self) -> Optional[Sequence[_builtins.str]]:
        return pulumi.get(self, "preferred_remote_color_ids")

    @_builtins.property
    @pulumi.getter(name="preferredRemoteColorRestrict")
    def preferred_remote_color_restrict(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "preferred_remote_color_restrict")

    @_builtins.property
    @pulumi.getter(name="serviceChainFallbackToRouting")
    def service_chain_fallback_to_routing(self) -> Optional[_builtins.bool]:
        return pulumi.get(self, "service_chain_fallback_to_routing")

    @_builtins.property
    @pulumi.getter(name="serviceChainLocal")
    def service_chain_local(self) -> Optional[_builtins.bool]:
        return pulumi.get(self, "service_chain_local")

    @_builtins.property
    @pulumi.getter(name="serviceChainTlocColors")
    def service_chain_tloc_colors(self) -> Optional[Sequence[_builtins.str]]:
        return pulumi.get(self, "service_chain_tloc_colors")

    @_builtins.property
    @pulumi.getter(name="serviceChainTlocEncapsulation")
    def service_chain_tloc_encapsulation(self) -> Optional[_builtins.str]:
        """
        - Choices: `ipsec`, `gre`
        """
        return pulumi.get(self, "service_chain_tloc_encapsulation")

    @_builtins.property
    @pulumi.getter(name="serviceChainTlocIp")
    def service_chain_tloc_ip(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "service_chain_tloc_ip")

    @_builtins.property
    @pulumi.getter(name="serviceChainTlocListId")
    def service_chain_tloc_list_id(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "service_chain_tloc_list_id")

    @_builtins.property
    @pulumi.getter(name="serviceChainType")
    def service_chain_type(self) -> Optional[_builtins.str]:
        """
        - Choices: `SC1`, `SC2`, `SC4`, `SC5`, `SC6`, `SC7`, `SC8`, `SC9`, `SC10`, `SC11`, `SC12`, `SC13`, `SC14`, `SC15`, `SC16`
        """
        return pulumi.get(self, "service_chain_type")

    @_builtins.property
    @pulumi.getter(name="serviceChainVpn")
    def service_chain_vpn(self) -> Optional[_builtins.int]:
        """
        - Range: `0`-`65530`
        """
        return pulumi.get(self, "service_chain_vpn")

    @_builtins.property
    @pulumi.getter(name="serviceTlocColors")
    def service_tloc_colors(self) -> Optional[Sequence[_builtins.str]]:
        return pulumi.get(self, "service_tloc_colors")

    @_builtins.property
    @pulumi.getter(name="serviceTlocEncapsulation")
    def service_tloc_encapsulation(self) -> Optional[_builtins.str]:
        """
        - Choices: `ipsec`, `gre`
        """
        return pulumi.get(self, "service_tloc_encapsulation")

    @_builtins.property
    @pulumi.getter(name="serviceTlocIp")
    def service_tloc_ip(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "service_tloc_ip")

    @_builtins.property
    @pulumi.getter(name="serviceTlocListId")
    def service_tloc_list_id(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "service_tloc_list_id")

    @_builtins.property
    @pulumi.getter(name="serviceType")
    def service_type(self) -> Optional[_builtins.str]:
        """
        - Choices: `FW`, `IDS`, `IDP`, `netsvc1`, `netsvc2`, `netsvc3`, `netsvc4`, `appqoe`
        """
        return pulumi.get(self, "service_type")

    @_builtins.property
    @pulumi.getter(name="serviceVpn")
    def service_vpn(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "service_vpn")

    @_builtins.property
    @pulumi.getter(name="tlocColors")
    def tloc_colors(self) -> Optional[Sequence[_builtins.str]]:
        return pulumi.get(self, "tloc_colors")

    @_builtins.property
    @pulumi.getter(name="tlocEncapsulation")
    def tloc_encapsulation(self) -> Optional[_builtins.str]:
        """
        - Choices: `ipsec`, `gre`
        """
        return pulumi.get(self, "tloc_encapsulation")

    @_builtins.property
    @pulumi.getter(name="tlocIp")
    def tloc_ip(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "tloc_ip")

    @_builtins.property
    @pulumi.getter(name="tlocListId")
    def tloc_list_id(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "tloc_list_id")

    @_builtins.property
    @pulumi.getter
    def vpn(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "vpn")


@pulumi.output_type
class ApplicationPriorityTrafficPolicyPolicySequenceActionSlaClass(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "fallbackToBestPath":
            suggest = "fallback_to_best_path"
        elif key == "preferredColorGroupListId":
            suggest = "preferred_color_group_list_id"
        elif key == "preferredColors":
            suggest = "preferred_colors"
        elif key == "preferredRemoteColors":
            suggest = "preferred_remote_colors"
        elif key == "remoteColorRestrict":
            suggest = "remote_color_restrict"
        elif key == "slaClassListId":
            suggest = "sla_class_list_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ApplicationPriorityTrafficPolicyPolicySequenceActionSlaClass. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ApplicationPriorityTrafficPolicyPolicySequenceActionSlaClass.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ApplicationPriorityTrafficPolicyPolicySequenceActionSlaClass.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 fallback_to_best_path: Optional[_builtins.bool] = None,
                 preferred_color_group_list_id: Optional[_builtins.str] = None,
                 preferred_colors: Optional[Sequence[_builtins.str]] = None,
                 preferred_remote_colors: Optional[Sequence[_builtins.str]] = None,
                 remote_color_restrict: Optional[_builtins.bool] = None,
                 sla_class_list_id: Optional[_builtins.str] = None,
                 strict: Optional[_builtins.bool] = None):
        if fallback_to_best_path is not None:
            pulumi.set(__self__, "fallback_to_best_path", fallback_to_best_path)
        if preferred_color_group_list_id is not None:
            pulumi.set(__self__, "preferred_color_group_list_id", preferred_color_group_list_id)
        if preferred_colors is not None:
            pulumi.set(__self__, "preferred_colors", preferred_colors)
        if preferred_remote_colors is not None:
            pulumi.set(__self__, "preferred_remote_colors", preferred_remote_colors)
        if remote_color_restrict is not None:
            pulumi.set(__self__, "remote_color_restrict", remote_color_restrict)
        if sla_class_list_id is not None:
            pulumi.set(__self__, "sla_class_list_id", sla_class_list_id)
        if strict is not None:
            pulumi.set(__self__, "strict", strict)

    @_builtins.property
    @pulumi.getter(name="fallbackToBestPath")
    def fallback_to_best_path(self) -> Optional[_builtins.bool]:
        return pulumi.get(self, "fallback_to_best_path")

    @_builtins.property
    @pulumi.getter(name="preferredColorGroupListId")
    def preferred_color_group_list_id(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "preferred_color_group_list_id")

    @_builtins.property
    @pulumi.getter(name="preferredColors")
    def preferred_colors(self) -> Optional[Sequence[_builtins.str]]:
        return pulumi.get(self, "preferred_colors")

    @_builtins.property
    @pulumi.getter(name="preferredRemoteColors")
    def preferred_remote_colors(self) -> Optional[Sequence[_builtins.str]]:
        return pulumi.get(self, "preferred_remote_colors")

    @_builtins.property
    @pulumi.getter(name="remoteColorRestrict")
    def remote_color_restrict(self) -> Optional[_builtins.bool]:
        return pulumi.get(self, "remote_color_restrict")

    @_builtins.property
    @pulumi.getter(name="slaClassListId")
    def sla_class_list_id(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "sla_class_list_id")

    @_builtins.property
    @pulumi.getter
    def strict(self) -> Optional[_builtins.bool]:
        return pulumi.get(self, "strict")


@pulumi.output_type
class ApplicationPriorityTrafficPolicyPolicySequenceMatchEntry(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "applicationListId":
            suggest = "application_list_id"
        elif key == "destinationDataIpv4PrefixListId":
            suggest = "destination_data_ipv4_prefix_list_id"
        elif key == "destinationDataIpv6PrefixListId":
            suggest = "destination_data_ipv6_prefix_list_id"
        elif key == "destinationIpv4Prefix":
            suggest = "destination_ipv4_prefix"
        elif key == "destinationIpv6Prefix":
            suggest = "destination_ipv6_prefix"
        elif key == "destinationPorts":
            suggest = "destination_ports"
        elif key == "destinationRegion":
            suggest = "destination_region"
        elif key == "dnsApplicationListId":
            suggest = "dns_application_list_id"
        elif key == "icmp6Messages":
            suggest = "icmp6_messages"
        elif key == "icmpMessages":
            suggest = "icmp_messages"
        elif key == "packetLength":
            suggest = "packet_length"
        elif key == "saasApplicationListId":
            suggest = "saas_application_list_id"
        elif key == "serviceAreas":
            suggest = "service_areas"
        elif key == "sourceDataIpv4PrefxListId":
            suggest = "source_data_ipv4_prefx_list_id"
        elif key == "sourceDataIpv6PrefxListId":
            suggest = "source_data_ipv6_prefx_list_id"
        elif key == "sourceIpv4Prefix":
            suggest = "source_ipv4_prefix"
        elif key == "sourceIpv6Prefix":
            suggest = "source_ipv6_prefix"
        elif key == "sourcePorts":
            suggest = "source_ports"
        elif key == "trafficCategory":
            suggest = "traffic_category"
        elif key == "trafficClass":
            suggest = "traffic_class"
        elif key == "trafficTo":
            suggest = "traffic_to"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ApplicationPriorityTrafficPolicyPolicySequenceMatchEntry. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ApplicationPriorityTrafficPolicyPolicySequenceMatchEntry.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ApplicationPriorityTrafficPolicyPolicySequenceMatchEntry.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 application_list_id: Optional[_builtins.str] = None,
                 destination_data_ipv4_prefix_list_id: Optional[_builtins.str] = None,
                 destination_data_ipv6_prefix_list_id: Optional[_builtins.str] = None,
                 destination_ipv4_prefix: Optional[_builtins.str] = None,
                 destination_ipv6_prefix: Optional[_builtins.str] = None,
                 destination_ports: Optional[Sequence[_builtins.str]] = None,
                 destination_region: Optional[_builtins.str] = None,
                 dns: Optional[_builtins.str] = None,
                 dns_application_list_id: Optional[_builtins.str] = None,
                 dscp: Optional[_builtins.int] = None,
                 icmp6_messages: Optional[Sequence[_builtins.str]] = None,
                 icmp_messages: Optional[Sequence[_builtins.str]] = None,
                 packet_length: Optional[_builtins.str] = None,
                 protocols: Optional[Sequence[_builtins.str]] = None,
                 saas_application_list_id: Optional[_builtins.str] = None,
                 service_areas: Optional[Sequence[_builtins.str]] = None,
                 source_data_ipv4_prefx_list_id: Optional[_builtins.str] = None,
                 source_data_ipv6_prefx_list_id: Optional[_builtins.str] = None,
                 source_ipv4_prefix: Optional[_builtins.str] = None,
                 source_ipv6_prefix: Optional[_builtins.str] = None,
                 source_ports: Optional[Sequence[_builtins.str]] = None,
                 tcp: Optional[_builtins.str] = None,
                 traffic_category: Optional[_builtins.str] = None,
                 traffic_class: Optional[_builtins.str] = None,
                 traffic_to: Optional[_builtins.str] = None):
        """
        :param _builtins.str destination_ipv4_prefix: Destination Data IP Prefix
        :param _builtins.str destination_ipv6_prefix: Destination Data IP Prefix
        :param Sequence[_builtins.str] destination_ports: Destination Port (0-65535) range or individual number separated by space
        :param _builtins.str destination_region: Destination Region
                 - Choices: `primary-region`, `secondary-region`, `other-region`
        :param _builtins.str dns: Dns
                 - Choices: `request`, `response`
        :param _builtins.int dscp: DSCP number
                 - Range: `0`-`63`
        :param Sequence[_builtins.str] icmp6_messages: ICMP6 Message
        :param Sequence[_builtins.str] icmp_messages: ICMP Message
        :param _builtins.str packet_length: Packet Length
        :param Sequence[_builtins.str] protocols: protocol (0-255) range or individual number separated by space
        :param Sequence[_builtins.str] service_areas: M365 Service Area
        :param _builtins.str source_ipv4_prefix: Source Data IP Prefix
        :param _builtins.str source_ipv6_prefix: Source Data IP Prefix
        :param Sequence[_builtins.str] source_ports: Source Port (0-65535) range or individual number separated by space
        :param _builtins.str tcp: TCP States
                 - Choices: `syn`
        :param _builtins.str traffic_category: M365 Traffic Category
                 - Choices: `optimize-allow`, `optimize`, `all`
        :param _builtins.str traffic_class: Traffic Class
                 - Choices: `gold-voip-telephony`, `gold-broadcast-video`, `gold-real-time-interactive`, `gold-multimedia-conferencing`, `gold-multimedia-streaming`, `gold-network-control`, `gold-signaling`, `gold-ops-admin-mgmt`, `gold-transactional-data`, `gold-bulk-data`, `silver`, `bronze`
        :param _builtins.str traffic_to: Traffic to
                 - Choices: `core`, `service`, `access`
        """
        if application_list_id is not None:
            pulumi.set(__self__, "application_list_id", application_list_id)
        if destination_data_ipv4_prefix_list_id is not None:
            pulumi.set(__self__, "destination_data_ipv4_prefix_list_id", destination_data_ipv4_prefix_list_id)
        if destination_data_ipv6_prefix_list_id is not None:
            pulumi.set(__self__, "destination_data_ipv6_prefix_list_id", destination_data_ipv6_prefix_list_id)
        if destination_ipv4_prefix is not None:
            pulumi.set(__self__, "destination_ipv4_prefix", destination_ipv4_prefix)
        if destination_ipv6_prefix is not None:
            pulumi.set(__self__, "destination_ipv6_prefix", destination_ipv6_prefix)
        if destination_ports is not None:
            pulumi.set(__self__, "destination_ports", destination_ports)
        if destination_region is not None:
            pulumi.set(__self__, "destination_region", destination_region)
        if dns is not None:
            pulumi.set(__self__, "dns", dns)
        if dns_application_list_id is not None:
            pulumi.set(__self__, "dns_application_list_id", dns_application_list_id)
        if dscp is not None:
            pulumi.set(__self__, "dscp", dscp)
        if icmp6_messages is not None:
            pulumi.set(__self__, "icmp6_messages", icmp6_messages)
        if icmp_messages is not None:
            pulumi.set(__self__, "icmp_messages", icmp_messages)
        if packet_length is not None:
            pulumi.set(__self__, "packet_length", packet_length)
        if protocols is not None:
            pulumi.set(__self__, "protocols", protocols)
        if saas_application_list_id is not None:
            pulumi.set(__self__, "saas_application_list_id", saas_application_list_id)
        if service_areas is not None:
            pulumi.set(__self__, "service_areas", service_areas)
        if source_data_ipv4_prefx_list_id is not None:
            pulumi.set(__self__, "source_data_ipv4_prefx_list_id", source_data_ipv4_prefx_list_id)
        if source_data_ipv6_prefx_list_id is not None:
            pulumi.set(__self__, "source_data_ipv6_prefx_list_id", source_data_ipv6_prefx_list_id)
        if source_ipv4_prefix is not None:
            pulumi.set(__self__, "source_ipv4_prefix", source_ipv4_prefix)
        if source_ipv6_prefix is not None:
            pulumi.set(__self__, "source_ipv6_prefix", source_ipv6_prefix)
        if source_ports is not None:
            pulumi.set(__self__, "source_ports", source_ports)
        if tcp is not None:
            pulumi.set(__self__, "tcp", tcp)
        if traffic_category is not None:
            pulumi.set(__self__, "traffic_category", traffic_category)
        if traffic_class is not None:
            pulumi.set(__self__, "traffic_class", traffic_class)
        if traffic_to is not None:
            pulumi.set(__self__, "traffic_to", traffic_to)

    @_builtins.property
    @pulumi.getter(name="applicationListId")
    def application_list_id(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "application_list_id")

    @_builtins.property
    @pulumi.getter(name="destinationDataIpv4PrefixListId")
    def destination_data_ipv4_prefix_list_id(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "destination_data_ipv4_prefix_list_id")

    @_builtins.property
    @pulumi.getter(name="destinationDataIpv6PrefixListId")
    def destination_data_ipv6_prefix_list_id(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "destination_data_ipv6_prefix_list_id")

    @_builtins.property
    @pulumi.getter(name="destinationIpv4Prefix")
    def destination_ipv4_prefix(self) -> Optional[_builtins.str]:
        """
        Destination Data IP Prefix
        """
        return pulumi.get(self, "destination_ipv4_prefix")

    @_builtins.property
    @pulumi.getter(name="destinationIpv6Prefix")
    def destination_ipv6_prefix(self) -> Optional[_builtins.str]:
        """
        Destination Data IP Prefix
        """
        return pulumi.get(self, "destination_ipv6_prefix")

    @_builtins.property
    @pulumi.getter(name="destinationPorts")
    def destination_ports(self) -> Optional[Sequence[_builtins.str]]:
        """
        Destination Port (0-65535) range or individual number separated by space
        """
        return pulumi.get(self, "destination_ports")

    @_builtins.property
    @pulumi.getter(name="destinationRegion")
    def destination_region(self) -> Optional[_builtins.str]:
        """
        Destination Region
          - Choices: `primary-region`, `secondary-region`, `other-region`
        """
        return pulumi.get(self, "destination_region")

    @_builtins.property
    @pulumi.getter
    def dns(self) -> Optional[_builtins.str]:
        """
        Dns
          - Choices: `request`, `response`
        """
        return pulumi.get(self, "dns")

    @_builtins.property
    @pulumi.getter(name="dnsApplicationListId")
    def dns_application_list_id(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "dns_application_list_id")

    @_builtins.property
    @pulumi.getter
    def dscp(self) -> Optional[_builtins.int]:
        """
        DSCP number
          - Range: `0`-`63`
        """
        return pulumi.get(self, "dscp")

    @_builtins.property
    @pulumi.getter(name="icmp6Messages")
    def icmp6_messages(self) -> Optional[Sequence[_builtins.str]]:
        """
        ICMP6 Message
        """
        return pulumi.get(self, "icmp6_messages")

    @_builtins.property
    @pulumi.getter(name="icmpMessages")
    def icmp_messages(self) -> Optional[Sequence[_builtins.str]]:
        """
        ICMP Message
        """
        return pulumi.get(self, "icmp_messages")

    @_builtins.property
    @pulumi.getter(name="packetLength")
    def packet_length(self) -> Optional[_builtins.str]:
        """
        Packet Length
        """
        return pulumi.get(self, "packet_length")

    @_builtins.property
    @pulumi.getter
    def protocols(self) -> Optional[Sequence[_builtins.str]]:
        """
        protocol (0-255) range or individual number separated by space
        """
        return pulumi.get(self, "protocols")

    @_builtins.property
    @pulumi.getter(name="saasApplicationListId")
    def saas_application_list_id(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "saas_application_list_id")

    @_builtins.property
    @pulumi.getter(name="serviceAreas")
    def service_areas(self) -> Optional[Sequence[_builtins.str]]:
        """
        M365 Service Area
        """
        return pulumi.get(self, "service_areas")

    @_builtins.property
    @pulumi.getter(name="sourceDataIpv4PrefxListId")
    def source_data_ipv4_prefx_list_id(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "source_data_ipv4_prefx_list_id")

    @_builtins.property
    @pulumi.getter(name="sourceDataIpv6PrefxListId")
    def source_data_ipv6_prefx_list_id(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "source_data_ipv6_prefx_list_id")

    @_builtins.property
    @pulumi.getter(name="sourceIpv4Prefix")
    def source_ipv4_prefix(self) -> Optional[_builtins.str]:
        """
        Source Data IP Prefix
        """
        return pulumi.get(self, "source_ipv4_prefix")

    @_builtins.property
    @pulumi.getter(name="sourceIpv6Prefix")
    def source_ipv6_prefix(self) -> Optional[_builtins.str]:
        """
        Source Data IP Prefix
        """
        return pulumi.get(self, "source_ipv6_prefix")

    @_builtins.property
    @pulumi.getter(name="sourcePorts")
    def source_ports(self) -> Optional[Sequence[_builtins.str]]:
        """
        Source Port (0-65535) range or individual number separated by space
        """
        return pulumi.get(self, "source_ports")

    @_builtins.property
    @pulumi.getter
    def tcp(self) -> Optional[_builtins.str]:
        """
        TCP States
          - Choices: `syn`
        """
        return pulumi.get(self, "tcp")

    @_builtins.property
    @pulumi.getter(name="trafficCategory")
    def traffic_category(self) -> Optional[_builtins.str]:
        """
        M365 Traffic Category
          - Choices: `optimize-allow`, `optimize`, `all`
        """
        return pulumi.get(self, "traffic_category")

    @_builtins.property
    @pulumi.getter(name="trafficClass")
    def traffic_class(self) -> Optional[_builtins.str]:
        """
        Traffic Class
          - Choices: `gold-voip-telephony`, `gold-broadcast-video`, `gold-real-time-interactive`, `gold-multimedia-conferencing`, `gold-multimedia-streaming`, `gold-network-control`, `gold-signaling`, `gold-ops-admin-mgmt`, `gold-transactional-data`, `gold-bulk-data`, `silver`, `bronze`
        """
        return pulumi.get(self, "traffic_class")

    @_builtins.property
    @pulumi.getter(name="trafficTo")
    def traffic_to(self) -> Optional[_builtins.str]:
        """
        Traffic to
          - Choices: `core`, `service`, `access`
        """
        return pulumi.get(self, "traffic_to")


@pulumi.output_type
class AsPathListPolicyObjectEntry(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "asPath":
            suggest = "as_path"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in AsPathListPolicyObjectEntry. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        AsPathListPolicyObjectEntry.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        AsPathListPolicyObjectEntry.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 as_path: _builtins.str):
        """
        :param _builtins.str as_path: Regular expression to match the BGP AS paths e.g., `^1239_[0-9]*$`
        """
        pulumi.set(__self__, "as_path", as_path)

    @_builtins.property
    @pulumi.getter(name="asPath")
    def as_path(self) -> _builtins.str:
        """
        Regular expression to match the BGP AS paths e.g., `^1239_[0-9]*$`
        """
        return pulumi.get(self, "as_path")


@pulumi.output_type
class AttachFeatureDeviceTemplateDevice(dict):
    def __init__(__self__, *,
                 id: _builtins.str,
                 variables: Mapping[str, _builtins.str]):
        """
        :param _builtins.str id: Device ID
        :param Mapping[str, _builtins.str] variables: Device variables
        """
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "variables", variables)

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        Device ID
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter
    def variables(self) -> Mapping[str, _builtins.str]:
        """
        Device variables
        """
        return pulumi.get(self, "variables")


@pulumi.output_type
class BlockUrlListPolicyObjectEntry(dict):
    def __init__(__self__, *,
                 url: Optional[_builtins.str] = None):
        """
        :param _builtins.str url: URL
        """
        if url is not None:
            pulumi.set(__self__, "url", url)

    @_builtins.property
    @pulumi.getter
    def url(self) -> Optional[_builtins.str]:
        """
        URL
        """
        return pulumi.get(self, "url")


@pulumi.output_type
class CedgeAaaFeatureTemplateAccountingRule(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "privilegeLevel":
            suggest = "privilege_level"
        elif key == "startStop":
            suggest = "start_stop"
        elif key == "startStopVariable":
            suggest = "start_stop_variable"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in CedgeAaaFeatureTemplateAccountingRule. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        CedgeAaaFeatureTemplateAccountingRule.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        CedgeAaaFeatureTemplateAccountingRule.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 groups: Optional[_builtins.str] = None,
                 method: Optional[_builtins.str] = None,
                 name: Optional[_builtins.str] = None,
                 optional: Optional[_builtins.bool] = None,
                 privilege_level: Optional[_builtins.str] = None,
                 start_stop: Optional[_builtins.bool] = None,
                 start_stop_variable: Optional[_builtins.str] = None):
        """
        :param _builtins.str groups: Comma separated list of groups
        :param _builtins.str method: Configure Accounting Method
                 - Choices: `commands`, `exec`, `network`, `system`
        :param _builtins.str name: Configure Accounting Rule ID
        :param _builtins.bool optional: Indicates if list item is considered optional.
        :param _builtins.str privilege_level: Privilege level when method is commands
                 - Choices: `1`, `15`
        :param _builtins.bool start_stop: Record start and stop without waiting
                 - Default value: `true`
        :param _builtins.str start_stop_variable: Variable name
        """
        if groups is not None:
            pulumi.set(__self__, "groups", groups)
        if method is not None:
            pulumi.set(__self__, "method", method)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if optional is not None:
            pulumi.set(__self__, "optional", optional)
        if privilege_level is not None:
            pulumi.set(__self__, "privilege_level", privilege_level)
        if start_stop is not None:
            pulumi.set(__self__, "start_stop", start_stop)
        if start_stop_variable is not None:
            pulumi.set(__self__, "start_stop_variable", start_stop_variable)

    @_builtins.property
    @pulumi.getter
    def groups(self) -> Optional[_builtins.str]:
        """
        Comma separated list of groups
        """
        return pulumi.get(self, "groups")

    @_builtins.property
    @pulumi.getter
    def method(self) -> Optional[_builtins.str]:
        """
        Configure Accounting Method
          - Choices: `commands`, `exec`, `network`, `system`
        """
        return pulumi.get(self, "method")

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[_builtins.str]:
        """
        Configure Accounting Rule ID
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def optional(self) -> Optional[_builtins.bool]:
        """
        Indicates if list item is considered optional.
        """
        return pulumi.get(self, "optional")

    @_builtins.property
    @pulumi.getter(name="privilegeLevel")
    def privilege_level(self) -> Optional[_builtins.str]:
        """
        Privilege level when method is commands
          - Choices: `1`, `15`
        """
        return pulumi.get(self, "privilege_level")

    @_builtins.property
    @pulumi.getter(name="startStop")
    def start_stop(self) -> Optional[_builtins.bool]:
        """
        Record start and stop without waiting
          - Default value: `true`
        """
        return pulumi.get(self, "start_stop")

    @_builtins.property
    @pulumi.getter(name="startStopVariable")
    def start_stop_variable(self) -> Optional[_builtins.str]:
        """
        Variable name
        """
        return pulumi.get(self, "start_stop_variable")


@pulumi.output_type
class CedgeAaaFeatureTemplateAuthorizationRule(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "privilegeLevel":
            suggest = "privilege_level"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in CedgeAaaFeatureTemplateAuthorizationRule. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        CedgeAaaFeatureTemplateAuthorizationRule.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        CedgeAaaFeatureTemplateAuthorizationRule.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 authenticated: Optional[_builtins.bool] = None,
                 groups: Optional[_builtins.str] = None,
                 method: Optional[_builtins.str] = None,
                 name: Optional[_builtins.str] = None,
                 optional: Optional[_builtins.bool] = None,
                 privilege_level: Optional[_builtins.str] = None):
        """
        :param _builtins.bool authenticated: Succeed if user has authenticated
                 - Default value: `false`
        :param _builtins.str groups: Comma separated list of groups
        :param _builtins.str method: Method
                 - Choices: `commands`
        :param _builtins.str name: Configure Authorization Rule ID
        :param _builtins.bool optional: Indicates if list item is considered optional.
        :param _builtins.str privilege_level: Privilege level when method is commands
                 - Choices: `1`, `15`
        """
        if authenticated is not None:
            pulumi.set(__self__, "authenticated", authenticated)
        if groups is not None:
            pulumi.set(__self__, "groups", groups)
        if method is not None:
            pulumi.set(__self__, "method", method)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if optional is not None:
            pulumi.set(__self__, "optional", optional)
        if privilege_level is not None:
            pulumi.set(__self__, "privilege_level", privilege_level)

    @_builtins.property
    @pulumi.getter
    def authenticated(self) -> Optional[_builtins.bool]:
        """
        Succeed if user has authenticated
          - Default value: `false`
        """
        return pulumi.get(self, "authenticated")

    @_builtins.property
    @pulumi.getter
    def groups(self) -> Optional[_builtins.str]:
        """
        Comma separated list of groups
        """
        return pulumi.get(self, "groups")

    @_builtins.property
    @pulumi.getter
    def method(self) -> Optional[_builtins.str]:
        """
        Method
          - Choices: `commands`
        """
        return pulumi.get(self, "method")

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[_builtins.str]:
        """
        Configure Authorization Rule ID
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def optional(self) -> Optional[_builtins.bool]:
        """
        Indicates if list item is considered optional.
        """
        return pulumi.get(self, "optional")

    @_builtins.property
    @pulumi.getter(name="privilegeLevel")
    def privilege_level(self) -> Optional[_builtins.str]:
        """
        Privilege level when method is commands
          - Choices: `1`, `15`
        """
        return pulumi.get(self, "privilege_level")


@pulumi.output_type
class CedgeAaaFeatureTemplateRadiusClient(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "clientIp":
            suggest = "client_ip"
        elif key == "clientIpVariable":
            suggest = "client_ip_variable"
        elif key == "vpnConfigurations":
            suggest = "vpn_configurations"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in CedgeAaaFeatureTemplateRadiusClient. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        CedgeAaaFeatureTemplateRadiusClient.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        CedgeAaaFeatureTemplateRadiusClient.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 client_ip: Optional[_builtins.str] = None,
                 client_ip_variable: Optional[_builtins.str] = None,
                 optional: Optional[_builtins.bool] = None,
                 vpn_configurations: Optional[Sequence['outputs.CedgeAaaFeatureTemplateRadiusClientVpnConfiguration']] = None):
        """
        :param _builtins.str client_ip: Client IP
        :param _builtins.str client_ip_variable: Variable name
        :param _builtins.bool optional: Indicates if list item is considered optional.
        :param Sequence['CedgeAaaFeatureTemplateRadiusClientVpnConfigurationArgs'] vpn_configurations: VPN configuration
        """
        if client_ip is not None:
            pulumi.set(__self__, "client_ip", client_ip)
        if client_ip_variable is not None:
            pulumi.set(__self__, "client_ip_variable", client_ip_variable)
        if optional is not None:
            pulumi.set(__self__, "optional", optional)
        if vpn_configurations is not None:
            pulumi.set(__self__, "vpn_configurations", vpn_configurations)

    @_builtins.property
    @pulumi.getter(name="clientIp")
    def client_ip(self) -> Optional[_builtins.str]:
        """
        Client IP
        """
        return pulumi.get(self, "client_ip")

    @_builtins.property
    @pulumi.getter(name="clientIpVariable")
    def client_ip_variable(self) -> Optional[_builtins.str]:
        """
        Variable name
        """
        return pulumi.get(self, "client_ip_variable")

    @_builtins.property
    @pulumi.getter
    def optional(self) -> Optional[_builtins.bool]:
        """
        Indicates if list item is considered optional.
        """
        return pulumi.get(self, "optional")

    @_builtins.property
    @pulumi.getter(name="vpnConfigurations")
    def vpn_configurations(self) -> Optional[Sequence['outputs.CedgeAaaFeatureTemplateRadiusClientVpnConfiguration']]:
        """
        VPN configuration
        """
        return pulumi.get(self, "vpn_configurations")


@pulumi.output_type
class CedgeAaaFeatureTemplateRadiusClientVpnConfiguration(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "serverKey":
            suggest = "server_key"
        elif key == "serverKeyVariable":
            suggest = "server_key_variable"
        elif key == "vpnId":
            suggest = "vpn_id"
        elif key == "vpnIdVariable":
            suggest = "vpn_id_variable"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in CedgeAaaFeatureTemplateRadiusClientVpnConfiguration. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        CedgeAaaFeatureTemplateRadiusClientVpnConfiguration.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        CedgeAaaFeatureTemplateRadiusClientVpnConfiguration.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 optional: Optional[_builtins.bool] = None,
                 server_key: Optional[_builtins.str] = None,
                 server_key_variable: Optional[_builtins.str] = None,
                 vpn_id: Optional[_builtins.int] = None,
                 vpn_id_variable: Optional[_builtins.str] = None):
        """
        :param _builtins.bool optional: Indicates if list item is considered optional.
        :param _builtins.str server_key: Specify a RADIUS client server-key
        :param _builtins.str server_key_variable: Variable name
        :param _builtins.int vpn_id: VPN ID
        :param _builtins.str vpn_id_variable: Variable name
        """
        if optional is not None:
            pulumi.set(__self__, "optional", optional)
        if server_key is not None:
            pulumi.set(__self__, "server_key", server_key)
        if server_key_variable is not None:
            pulumi.set(__self__, "server_key_variable", server_key_variable)
        if vpn_id is not None:
            pulumi.set(__self__, "vpn_id", vpn_id)
        if vpn_id_variable is not None:
            pulumi.set(__self__, "vpn_id_variable", vpn_id_variable)

    @_builtins.property
    @pulumi.getter
    def optional(self) -> Optional[_builtins.bool]:
        """
        Indicates if list item is considered optional.
        """
        return pulumi.get(self, "optional")

    @_builtins.property
    @pulumi.getter(name="serverKey")
    def server_key(self) -> Optional[_builtins.str]:
        """
        Specify a RADIUS client server-key
        """
        return pulumi.get(self, "server_key")

    @_builtins.property
    @pulumi.getter(name="serverKeyVariable")
    def server_key_variable(self) -> Optional[_builtins.str]:
        """
        Variable name
        """
        return pulumi.get(self, "server_key_variable")

    @_builtins.property
    @pulumi.getter(name="vpnId")
    def vpn_id(self) -> Optional[_builtins.int]:
        """
        VPN ID
        """
        return pulumi.get(self, "vpn_id")

    @_builtins.property
    @pulumi.getter(name="vpnIdVariable")
    def vpn_id_variable(self) -> Optional[_builtins.str]:
        """
        Variable name
        """
        return pulumi.get(self, "vpn_id_variable")


@pulumi.output_type
class CedgeAaaFeatureTemplateRadiusServerGroup(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "groupName":
            suggest = "group_name"
        elif key == "sourceInterface":
            suggest = "source_interface"
        elif key == "sourceInterfaceVariable":
            suggest = "source_interface_variable"
        elif key == "vpnId":
            suggest = "vpn_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in CedgeAaaFeatureTemplateRadiusServerGroup. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        CedgeAaaFeatureTemplateRadiusServerGroup.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        CedgeAaaFeatureTemplateRadiusServerGroup.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 group_name: Optional[_builtins.str] = None,
                 optional: Optional[_builtins.bool] = None,
                 servers: Optional[Sequence['outputs.CedgeAaaFeatureTemplateRadiusServerGroupServer']] = None,
                 source_interface: Optional[_builtins.str] = None,
                 source_interface_variable: Optional[_builtins.str] = None,
                 vpn_id: Optional[_builtins.int] = None):
        """
        :param _builtins.str group_name: Set Radius server Group Name
        :param _builtins.bool optional: Indicates if list item is considered optional.
        :param Sequence['CedgeAaaFeatureTemplateRadiusServerGroupServerArgs'] servers: Configure the Radius server
        :param _builtins.str source_interface: Set interface to use to reach Radius server
        :param _builtins.str source_interface_variable: Variable name
        :param _builtins.int vpn_id: Set VPN in which Radius server is located
                 - Range: `0`-`65530`
                 - Default value: `0`
        """
        if group_name is not None:
            pulumi.set(__self__, "group_name", group_name)
        if optional is not None:
            pulumi.set(__self__, "optional", optional)
        if servers is not None:
            pulumi.set(__self__, "servers", servers)
        if source_interface is not None:
            pulumi.set(__self__, "source_interface", source_interface)
        if source_interface_variable is not None:
            pulumi.set(__self__, "source_interface_variable", source_interface_variable)
        if vpn_id is not None:
            pulumi.set(__self__, "vpn_id", vpn_id)

    @_builtins.property
    @pulumi.getter(name="groupName")
    def group_name(self) -> Optional[_builtins.str]:
        """
        Set Radius server Group Name
        """
        return pulumi.get(self, "group_name")

    @_builtins.property
    @pulumi.getter
    def optional(self) -> Optional[_builtins.bool]:
        """
        Indicates if list item is considered optional.
        """
        return pulumi.get(self, "optional")

    @_builtins.property
    @pulumi.getter
    def servers(self) -> Optional[Sequence['outputs.CedgeAaaFeatureTemplateRadiusServerGroupServer']]:
        """
        Configure the Radius server
        """
        return pulumi.get(self, "servers")

    @_builtins.property
    @pulumi.getter(name="sourceInterface")
    def source_interface(self) -> Optional[_builtins.str]:
        """
        Set interface to use to reach Radius server
        """
        return pulumi.get(self, "source_interface")

    @_builtins.property
    @pulumi.getter(name="sourceInterfaceVariable")
    def source_interface_variable(self) -> Optional[_builtins.str]:
        """
        Variable name
        """
        return pulumi.get(self, "source_interface_variable")

    @_builtins.property
    @pulumi.getter(name="vpnId")
    def vpn_id(self) -> Optional[_builtins.int]:
        """
        Set VPN in which Radius server is located
          - Range: `0`-`65530`
          - Default value: `0`
        """
        return pulumi.get(self, "vpn_id")


@pulumi.output_type
class CedgeAaaFeatureTemplateRadiusServerGroupServer(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "accountingPort":
            suggest = "accounting_port"
        elif key == "accountingPortVariable":
            suggest = "accounting_port_variable"
        elif key == "authenticationPort":
            suggest = "authentication_port"
        elif key == "authenticationPortVariable":
            suggest = "authentication_port_variable"
        elif key == "encryptionType":
            suggest = "encryption_type"
        elif key == "keyType":
            suggest = "key_type"
        elif key == "keyTypeVariable":
            suggest = "key_type_variable"
        elif key == "retransmitVariable":
            suggest = "retransmit_variable"
        elif key == "secretKey":
            suggest = "secret_key"
        elif key == "secretKeyVariable":
            suggest = "secret_key_variable"
        elif key == "timeoutVariable":
            suggest = "timeout_variable"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in CedgeAaaFeatureTemplateRadiusServerGroupServer. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        CedgeAaaFeatureTemplateRadiusServerGroupServer.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        CedgeAaaFeatureTemplateRadiusServerGroupServer.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 accounting_port: Optional[_builtins.int] = None,
                 accounting_port_variable: Optional[_builtins.str] = None,
                 address: Optional[_builtins.str] = None,
                 authentication_port: Optional[_builtins.int] = None,
                 authentication_port_variable: Optional[_builtins.str] = None,
                 encryption_type: Optional[_builtins.str] = None,
                 key: Optional[_builtins.str] = None,
                 key_type: Optional[_builtins.str] = None,
                 key_type_variable: Optional[_builtins.str] = None,
                 optional: Optional[_builtins.bool] = None,
                 retransmit: Optional[_builtins.int] = None,
                 retransmit_variable: Optional[_builtins.str] = None,
                 secret_key: Optional[_builtins.str] = None,
                 secret_key_variable: Optional[_builtins.str] = None,
                 timeout: Optional[_builtins.int] = None,
                 timeout_variable: Optional[_builtins.str] = None):
        """
        :param _builtins.int accounting_port: Set Accounting port to use to connect to Radius server
                 - Range: `1`-`65534`
                 - Default value: `1813`
        :param _builtins.str accounting_port_variable: Variable name
        :param _builtins.str address: Set IP address of Radius server
        :param _builtins.int authentication_port: Set Authentication port to use to connect to Radius server
                 - Range: `1`-`65534`
                 - Default value: `1812`
        :param _builtins.str authentication_port_variable: Variable name
        :param _builtins.str encryption_type: Type of encyption. To be used for type 6
                 - Choices: `6`, `7`
        :param _builtins.str key: Set the Radius server shared key
        :param _builtins.str key_type: key type
                 - Choices: `key`, `pac`
                 - Default value: `key`
        :param _builtins.str key_type_variable: Variable name
        :param _builtins.bool optional: Indicates if list item is considered optional.
        :param _builtins.int retransmit: Configure how many times to contact this Radius server
                 - Range: `1`-`100`
                 - Default value: `3`
        :param _builtins.str retransmit_variable: Variable name
        :param _builtins.str secret_key: Set the Radius server shared type 7 encrypted key
        :param _builtins.str secret_key_variable: Variable name
        :param _builtins.int timeout: Configure how long to wait for replies from the Radius server
                 - Range: `1`-`1000`
                 - Default value: `5`
        :param _builtins.str timeout_variable: Variable name
        """
        if accounting_port is not None:
            pulumi.set(__self__, "accounting_port", accounting_port)
        if accounting_port_variable is not None:
            pulumi.set(__self__, "accounting_port_variable", accounting_port_variable)
        if address is not None:
            pulumi.set(__self__, "address", address)
        if authentication_port is not None:
            pulumi.set(__self__, "authentication_port", authentication_port)
        if authentication_port_variable is not None:
            pulumi.set(__self__, "authentication_port_variable", authentication_port_variable)
        if encryption_type is not None:
            pulumi.set(__self__, "encryption_type", encryption_type)
        if key is not None:
            pulumi.set(__self__, "key", key)
        if key_type is not None:
            pulumi.set(__self__, "key_type", key_type)
        if key_type_variable is not None:
            pulumi.set(__self__, "key_type_variable", key_type_variable)
        if optional is not None:
            pulumi.set(__self__, "optional", optional)
        if retransmit is not None:
            pulumi.set(__self__, "retransmit", retransmit)
        if retransmit_variable is not None:
            pulumi.set(__self__, "retransmit_variable", retransmit_variable)
        if secret_key is not None:
            pulumi.set(__self__, "secret_key", secret_key)
        if secret_key_variable is not None:
            pulumi.set(__self__, "secret_key_variable", secret_key_variable)
        if timeout is not None:
            pulumi.set(__self__, "timeout", timeout)
        if timeout_variable is not None:
            pulumi.set(__self__, "timeout_variable", timeout_variable)

    @_builtins.property
    @pulumi.getter(name="accountingPort")
    def accounting_port(self) -> Optional[_builtins.int]:
        """
        Set Accounting port to use to connect to Radius server
          - Range: `1`-`65534`
          - Default value: `1813`
        """
        return pulumi.get(self, "accounting_port")

    @_builtins.property
    @pulumi.getter(name="accountingPortVariable")
    def accounting_port_variable(self) -> Optional[_builtins.str]:
        """
        Variable name
        """
        return pulumi.get(self, "accounting_port_variable")

    @_builtins.property
    @pulumi.getter
    def address(self) -> Optional[_builtins.str]:
        """
        Set IP address of Radius server
        """
        return pulumi.get(self, "address")

    @_builtins.property
    @pulumi.getter(name="authenticationPort")
    def authentication_port(self) -> Optional[_builtins.int]:
        """
        Set Authentication port to use to connect to Radius server
          - Range: `1`-`65534`
          - Default value: `1812`
        """
        return pulumi.get(self, "authentication_port")

    @_builtins.property
    @pulumi.getter(name="authenticationPortVariable")
    def authentication_port_variable(self) -> Optional[_builtins.str]:
        """
        Variable name
        """
        return pulumi.get(self, "authentication_port_variable")

    @_builtins.property
    @pulumi.getter(name="encryptionType")
    def encryption_type(self) -> Optional[_builtins.str]:
        """
        Type of encyption. To be used for type 6
          - Choices: `6`, `7`
        """
        return pulumi.get(self, "encryption_type")

    @_builtins.property
    @pulumi.getter
    def key(self) -> Optional[_builtins.str]:
        """
        Set the Radius server shared key
        """
        return pulumi.get(self, "key")

    @_builtins.property
    @pulumi.getter(name="keyType")
    def key_type(self) -> Optional[_builtins.str]:
        """
        key type
          - Choices: `key`, `pac`
          - Default value: `key`
        """
        return pulumi.get(self, "key_type")

    @_builtins.property
    @pulumi.getter(name="keyTypeVariable")
    def key_type_variable(self) -> Optional[_builtins.str]:
        """
        Variable name
        """
        return pulumi.get(self, "key_type_variable")

    @_builtins.property
    @pulumi.getter
    def optional(self) -> Optional[_builtins.bool]:
        """
        Indicates if list item is considered optional.
        """
        return pulumi.get(self, "optional")

    @_builtins.property
    @pulumi.getter
    def retransmit(self) -> Optional[_builtins.int]:
        """
        Configure how many times to contact this Radius server
          - Range: `1`-`100`
          - Default value: `3`
        """
        return pulumi.get(self, "retransmit")

    @_builtins.property
    @pulumi.getter(name="retransmitVariable")
    def retransmit_variable(self) -> Optional[_builtins.str]:
        """
        Variable name
        """
        return pulumi.get(self, "retransmit_variable")

    @_builtins.property
    @pulumi.getter(name="secretKey")
    def secret_key(self) -> Optional[_builtins.str]:
        """
        Set the Radius server shared type 7 encrypted key
        """
        return pulumi.get(self, "secret_key")

    @_builtins.property
    @pulumi.getter(name="secretKeyVariable")
    def secret_key_variable(self) -> Optional[_builtins.str]:
        """
        Variable name
        """
        return pulumi.get(self, "secret_key_variable")

    @_builtins.property
    @pulumi.getter
    def timeout(self) -> Optional[_builtins.int]:
        """
        Configure how long to wait for replies from the Radius server
          - Range: `1`-`1000`
          - Default value: `5`
        """
        return pulumi.get(self, "timeout")

    @_builtins.property
    @pulumi.getter(name="timeoutVariable")
    def timeout_variable(self) -> Optional[_builtins.str]:
        """
        Variable name
        """
        return pulumi.get(self, "timeout_variable")


@pulumi.output_type
class CedgeAaaFeatureTemplateTacacsServerGroup(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "groupName":
            suggest = "group_name"
        elif key == "sourceInterface":
            suggest = "source_interface"
        elif key == "sourceInterfaceVariable":
            suggest = "source_interface_variable"
        elif key == "vpnId":
            suggest = "vpn_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in CedgeAaaFeatureTemplateTacacsServerGroup. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        CedgeAaaFeatureTemplateTacacsServerGroup.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        CedgeAaaFeatureTemplateTacacsServerGroup.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 group_name: Optional[_builtins.str] = None,
                 optional: Optional[_builtins.bool] = None,
                 servers: Optional[Sequence['outputs.CedgeAaaFeatureTemplateTacacsServerGroupServer']] = None,
                 source_interface: Optional[_builtins.str] = None,
                 source_interface_variable: Optional[_builtins.str] = None,
                 vpn_id: Optional[_builtins.int] = None):
        """
        :param _builtins.str group_name: Set TACACS server Group Name
        :param _builtins.bool optional: Indicates if list item is considered optional.
        :param Sequence['CedgeAaaFeatureTemplateTacacsServerGroupServerArgs'] servers: Configure the TACACS server
        :param _builtins.str source_interface: Set interface to use to reach TACACS server
        :param _builtins.str source_interface_variable: Variable name
        :param _builtins.int vpn_id: Set VPN in which TACACS server is located
                 - Range: `0`-`65530`
                 - Default value: `0`
        """
        if group_name is not None:
            pulumi.set(__self__, "group_name", group_name)
        if optional is not None:
            pulumi.set(__self__, "optional", optional)
        if servers is not None:
            pulumi.set(__self__, "servers", servers)
        if source_interface is not None:
            pulumi.set(__self__, "source_interface", source_interface)
        if source_interface_variable is not None:
            pulumi.set(__self__, "source_interface_variable", source_interface_variable)
        if vpn_id is not None:
            pulumi.set(__self__, "vpn_id", vpn_id)

    @_builtins.property
    @pulumi.getter(name="groupName")
    def group_name(self) -> Optional[_builtins.str]:
        """
        Set TACACS server Group Name
        """
        return pulumi.get(self, "group_name")

    @_builtins.property
    @pulumi.getter
    def optional(self) -> Optional[_builtins.bool]:
        """
        Indicates if list item is considered optional.
        """
        return pulumi.get(self, "optional")

    @_builtins.property
    @pulumi.getter
    def servers(self) -> Optional[Sequence['outputs.CedgeAaaFeatureTemplateTacacsServerGroupServer']]:
        """
        Configure the TACACS server
        """
        return pulumi.get(self, "servers")

    @_builtins.property
    @pulumi.getter(name="sourceInterface")
    def source_interface(self) -> Optional[_builtins.str]:
        """
        Set interface to use to reach TACACS server
        """
        return pulumi.get(self, "source_interface")

    @_builtins.property
    @pulumi.getter(name="sourceInterfaceVariable")
    def source_interface_variable(self) -> Optional[_builtins.str]:
        """
        Variable name
        """
        return pulumi.get(self, "source_interface_variable")

    @_builtins.property
    @pulumi.getter(name="vpnId")
    def vpn_id(self) -> Optional[_builtins.int]:
        """
        Set VPN in which TACACS server is located
          - Range: `0`-`65530`
          - Default value: `0`
        """
        return pulumi.get(self, "vpn_id")


@pulumi.output_type
class CedgeAaaFeatureTemplateTacacsServerGroupServer(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "encryptionType":
            suggest = "encryption_type"
        elif key == "portVariable":
            suggest = "port_variable"
        elif key == "secretKey":
            suggest = "secret_key"
        elif key == "secretKeyVariable":
            suggest = "secret_key_variable"
        elif key == "timeoutVariable":
            suggest = "timeout_variable"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in CedgeAaaFeatureTemplateTacacsServerGroupServer. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        CedgeAaaFeatureTemplateTacacsServerGroupServer.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        CedgeAaaFeatureTemplateTacacsServerGroupServer.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 address: Optional[_builtins.str] = None,
                 encryption_type: Optional[_builtins.str] = None,
                 key: Optional[_builtins.str] = None,
                 optional: Optional[_builtins.bool] = None,
                 port: Optional[_builtins.int] = None,
                 port_variable: Optional[_builtins.str] = None,
                 secret_key: Optional[_builtins.str] = None,
                 secret_key_variable: Optional[_builtins.str] = None,
                 timeout: Optional[_builtins.int] = None,
                 timeout_variable: Optional[_builtins.str] = None):
        """
        :param _builtins.str address: Set IP address of TACACS server
        :param _builtins.str encryption_type: Type of encyption. To be used for type 6
                 - Choices: `6`, `7`
        :param _builtins.str key: Set the TACACS server shared key
        :param _builtins.bool optional: Indicates if list item is considered optional.
        :param _builtins.int port: TACACS Port
                 - Range: `1`-`65535`
                 - Default value: `49`
        :param _builtins.str port_variable: Variable name
        :param _builtins.str secret_key: Set the TACACS server shared type 7 encrypted key
        :param _builtins.str secret_key_variable: Variable name
        :param _builtins.int timeout: Configure how long to wait for replies from the TACACS server
                 - Range: `1`-`1000`
                 - Default value: `5`
        :param _builtins.str timeout_variable: Variable name
        """
        if address is not None:
            pulumi.set(__self__, "address", address)
        if encryption_type is not None:
            pulumi.set(__self__, "encryption_type", encryption_type)
        if key is not None:
            pulumi.set(__self__, "key", key)
        if optional is not None:
            pulumi.set(__self__, "optional", optional)
        if port is not None:
            pulumi.set(__self__, "port", port)
        if port_variable is not None:
            pulumi.set(__self__, "port_variable", port_variable)
        if secret_key is not None:
            pulumi.set(__self__, "secret_key", secret_key)
        if secret_key_variable is not None:
            pulumi.set(__self__, "secret_key_variable", secret_key_variable)
        if timeout is not None:
            pulumi.set(__self__, "timeout", timeout)
        if timeout_variable is not None:
            pulumi.set(__self__, "timeout_variable", timeout_variable)

    @_builtins.property
    @pulumi.getter
    def address(self) -> Optional[_builtins.str]:
        """
        Set IP address of TACACS server
        """
        return pulumi.get(self, "address")

    @_builtins.property
    @pulumi.getter(name="encryptionType")
    def encryption_type(self) -> Optional[_builtins.str]:
        """
        Type of encyption. To be used for type 6
          - Choices: `6`, `7`
        """
        return pulumi.get(self, "encryption_type")

    @_builtins.property
    @pulumi.getter
    def key(self) -> Optional[_builtins.str]:
        """
        Set the TACACS server shared key
        """
        return pulumi.get(self, "key")

    @_builtins.property
    @pulumi.getter
    def optional(self) -> Optional[_builtins.bool]:
        """
        Indicates if list item is considered optional.
        """
        return pulumi.get(self, "optional")

    @_builtins.property
    @pulumi.getter
    def port(self) -> Optional[_builtins.int]:
        """
        TACACS Port
          - Range: `1`-`65535`
          - Default value: `49`
        """
        return pulumi.get(self, "port")

    @_builtins.property
    @pulumi.getter(name="portVariable")
    def port_variable(self) -> Optional[_builtins.str]:
        """
        Variable name
        """
        return pulumi.get(self, "port_variable")

    @_builtins.property
    @pulumi.getter(name="secretKey")
    def secret_key(self) -> Optional[_builtins.str]:
        """
        Set the TACACS server shared type 7 encrypted key
        """
        return pulumi.get(self, "secret_key")

    @_builtins.property
    @pulumi.getter(name="secretKeyVariable")
    def secret_key_variable(self) -> Optional[_builtins.str]:
        """
        Variable name
        """
        return pulumi.get(self, "secret_key_variable")

    @_builtins.property
    @pulumi.getter
    def timeout(self) -> Optional[_builtins.int]:
        """
        Configure how long to wait for replies from the TACACS server
          - Range: `1`-`1000`
          - Default value: `5`
        """
        return pulumi.get(self, "timeout")

    @_builtins.property
    @pulumi.getter(name="timeoutVariable")
    def timeout_variable(self) -> Optional[_builtins.str]:
        """
        Variable name
        """
        return pulumi.get(self, "timeout_variable")


@pulumi.output_type
class CedgeAaaFeatureTemplateUser(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "nameVariable":
            suggest = "name_variable"
        elif key == "privilegeLevel":
            suggest = "privilege_level"
        elif key == "privilegeLevelVariable":
            suggest = "privilege_level_variable"
        elif key == "sshPubkeys":
            suggest = "ssh_pubkeys"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in CedgeAaaFeatureTemplateUser. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        CedgeAaaFeatureTemplateUser.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        CedgeAaaFeatureTemplateUser.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 name: Optional[_builtins.str] = None,
                 name_variable: Optional[_builtins.str] = None,
                 optional: Optional[_builtins.bool] = None,
                 password: Optional[_builtins.str] = None,
                 privilege_level: Optional[_builtins.str] = None,
                 privilege_level_variable: Optional[_builtins.str] = None,
                 secret: Optional[_builtins.str] = None,
                 ssh_pubkeys: Optional[Sequence['outputs.CedgeAaaFeatureTemplateUserSshPubkey']] = None):
        """
        :param _builtins.str name: Set the username
        :param _builtins.str name_variable: Variable name
        :param _builtins.bool optional: Indicates if list item is considered optional.
        :param _builtins.str password: Set the user password
        :param _builtins.str privilege_level: Set Privilege Level for this user
                 - Choices: `1`, `15`
                 - Default value: `15`
        :param _builtins.str privilege_level_variable: Variable name
        :param _builtins.str secret: Set the user scrypt password/hash
        :param Sequence['CedgeAaaFeatureTemplateUserSshPubkeyArgs'] ssh_pubkeys: List of RSA public-keys per user
        """
        if name is not None:
            pulumi.set(__self__, "name", name)
        if name_variable is not None:
            pulumi.set(__self__, "name_variable", name_variable)
        if optional is not None:
            pulumi.set(__self__, "optional", optional)
        if password is not None:
            pulumi.set(__self__, "password", password)
        if privilege_level is not None:
            pulumi.set(__self__, "privilege_level", privilege_level)
        if privilege_level_variable is not None:
            pulumi.set(__self__, "privilege_level_variable", privilege_level_variable)
        if secret is not None:
            pulumi.set(__self__, "secret", secret)
        if ssh_pubkeys is not None:
            pulumi.set(__self__, "ssh_pubkeys", ssh_pubkeys)

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[_builtins.str]:
        """
        Set the username
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter(name="nameVariable")
    def name_variable(self) -> Optional[_builtins.str]:
        """
        Variable name
        """
        return pulumi.get(self, "name_variable")

    @_builtins.property
    @pulumi.getter
    def optional(self) -> Optional[_builtins.bool]:
        """
        Indicates if list item is considered optional.
        """
        return pulumi.get(self, "optional")

    @_builtins.property
    @pulumi.getter
    def password(self) -> Optional[_builtins.str]:
        """
        Set the user password
        """
        return pulumi.get(self, "password")

    @_builtins.property
    @pulumi.getter(name="privilegeLevel")
    def privilege_level(self) -> Optional[_builtins.str]:
        """
        Set Privilege Level for this user
          - Choices: `1`, `15`
          - Default value: `15`
        """
        return pulumi.get(self, "privilege_level")

    @_builtins.property
    @pulumi.getter(name="privilegeLevelVariable")
    def privilege_level_variable(self) -> Optional[_builtins.str]:
        """
        Variable name
        """
        return pulumi.get(self, "privilege_level_variable")

    @_builtins.property
    @pulumi.getter
    def secret(self) -> Optional[_builtins.str]:
        """
        Set the user scrypt password/hash
        """
        return pulumi.get(self, "secret")

    @_builtins.property
    @pulumi.getter(name="sshPubkeys")
    def ssh_pubkeys(self) -> Optional[Sequence['outputs.CedgeAaaFeatureTemplateUserSshPubkey']]:
        """
        List of RSA public-keys per user
        """
        return pulumi.get(self, "ssh_pubkeys")


@pulumi.output_type
class CedgeAaaFeatureTemplateUserSshPubkey(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "keyString":
            suggest = "key_string"
        elif key == "keyType":
            suggest = "key_type"
        elif key == "keyTypeVariable":
            suggest = "key_type_variable"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in CedgeAaaFeatureTemplateUserSshPubkey. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        CedgeAaaFeatureTemplateUserSshPubkey.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        CedgeAaaFeatureTemplateUserSshPubkey.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 key_string: Optional[_builtins.str] = None,
                 key_type: Optional[_builtins.str] = None,
                 key_type_variable: Optional[_builtins.str] = None,
                 optional: Optional[_builtins.bool] = None):
        """
        :param _builtins.str key_string: Set the RSA key string
        :param _builtins.str key_type: Only RSA is supported
        :param _builtins.str key_type_variable: Variable name
        :param _builtins.bool optional: Indicates if list item is considered optional.
        """
        if key_string is not None:
            pulumi.set(__self__, "key_string", key_string)
        if key_type is not None:
            pulumi.set(__self__, "key_type", key_type)
        if key_type_variable is not None:
            pulumi.set(__self__, "key_type_variable", key_type_variable)
        if optional is not None:
            pulumi.set(__self__, "optional", optional)

    @_builtins.property
    @pulumi.getter(name="keyString")
    def key_string(self) -> Optional[_builtins.str]:
        """
        Set the RSA key string
        """
        return pulumi.get(self, "key_string")

    @_builtins.property
    @pulumi.getter(name="keyType")
    def key_type(self) -> Optional[_builtins.str]:
        """
        Only RSA is supported
        """
        return pulumi.get(self, "key_type")

    @_builtins.property
    @pulumi.getter(name="keyTypeVariable")
    def key_type_variable(self) -> Optional[_builtins.str]:
        """
        Variable name
        """
        return pulumi.get(self, "key_type_variable")

    @_builtins.property
    @pulumi.getter
    def optional(self) -> Optional[_builtins.bool]:
        """
        Indicates if list item is considered optional.
        """
        return pulumi.get(self, "optional")


@pulumi.output_type
class CedgeIgmpFeatureTemplateInterface(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "joinGroups":
            suggest = "join_groups"
        elif key == "nameVariable":
            suggest = "name_variable"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in CedgeIgmpFeatureTemplateInterface. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        CedgeIgmpFeatureTemplateInterface.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        CedgeIgmpFeatureTemplateInterface.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 join_groups: Optional[Sequence['outputs.CedgeIgmpFeatureTemplateInterfaceJoinGroup']] = None,
                 name: Optional[_builtins.str] = None,
                 name_variable: Optional[_builtins.str] = None,
                 optional: Optional[_builtins.bool] = None):
        """
        :param Sequence['CedgeIgmpFeatureTemplateInterfaceJoinGroupArgs'] join_groups: Configure static joins
        :param _builtins.str name: Set interface name
        :param _builtins.str name_variable: Variable name
        :param _builtins.bool optional: Indicates if list item is considered optional.
        """
        if join_groups is not None:
            pulumi.set(__self__, "join_groups", join_groups)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if name_variable is not None:
            pulumi.set(__self__, "name_variable", name_variable)
        if optional is not None:
            pulumi.set(__self__, "optional", optional)

    @_builtins.property
    @pulumi.getter(name="joinGroups")
    def join_groups(self) -> Optional[Sequence['outputs.CedgeIgmpFeatureTemplateInterfaceJoinGroup']]:
        """
        Configure static joins
        """
        return pulumi.get(self, "join_groups")

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[_builtins.str]:
        """
        Set interface name
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter(name="nameVariable")
    def name_variable(self) -> Optional[_builtins.str]:
        """
        Variable name
        """
        return pulumi.get(self, "name_variable")

    @_builtins.property
    @pulumi.getter
    def optional(self) -> Optional[_builtins.bool]:
        """
        Indicates if list item is considered optional.
        """
        return pulumi.get(self, "optional")


@pulumi.output_type
class CedgeIgmpFeatureTemplateInterfaceJoinGroup(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "groupAddress":
            suggest = "group_address"
        elif key == "groupAddressVariable":
            suggest = "group_address_variable"
        elif key == "sourceVariable":
            suggest = "source_variable"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in CedgeIgmpFeatureTemplateInterfaceJoinGroup. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        CedgeIgmpFeatureTemplateInterfaceJoinGroup.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        CedgeIgmpFeatureTemplateInterfaceJoinGroup.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 group_address: Optional[_builtins.str] = None,
                 group_address_variable: Optional[_builtins.str] = None,
                 optional: Optional[_builtins.bool] = None,
                 source: Optional[_builtins.str] = None,
                 source_variable: Optional[_builtins.str] = None):
        """
        :param _builtins.str group_address: Set group address
        :param _builtins.str group_address_variable: Variable name
        :param _builtins.bool optional: Indicates if list item is considered optional.
        :param _builtins.str source: Set source address
        :param _builtins.str source_variable: Variable name
        """
        if group_address is not None:
            pulumi.set(__self__, "group_address", group_address)
        if group_address_variable is not None:
            pulumi.set(__self__, "group_address_variable", group_address_variable)
        if optional is not None:
            pulumi.set(__self__, "optional", optional)
        if source is not None:
            pulumi.set(__self__, "source", source)
        if source_variable is not None:
            pulumi.set(__self__, "source_variable", source_variable)

    @_builtins.property
    @pulumi.getter(name="groupAddress")
    def group_address(self) -> Optional[_builtins.str]:
        """
        Set group address
        """
        return pulumi.get(self, "group_address")

    @_builtins.property
    @pulumi.getter(name="groupAddressVariable")
    def group_address_variable(self) -> Optional[_builtins.str]:
        """
        Variable name
        """
        return pulumi.get(self, "group_address_variable")

    @_builtins.property
    @pulumi.getter
    def optional(self) -> Optional[_builtins.bool]:
        """
        Indicates if list item is considered optional.
        """
        return pulumi.get(self, "optional")

    @_builtins.property
    @pulumi.getter
    def source(self) -> Optional[_builtins.str]:
        """
        Set source address
        """
        return pulumi.get(self, "source")

    @_builtins.property
    @pulumi.getter(name="sourceVariable")
    def source_variable(self) -> Optional[_builtins.str]:
        """
        Variable name
        """
        return pulumi.get(self, "source_variable")


@pulumi.output_type
class CedgePimFeatureTemplateInterface(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "interfaceName":
            suggest = "interface_name"
        elif key == "interfaceNameVariable":
            suggest = "interface_name_variable"
        elif key == "joinPruneInterval":
            suggest = "join_prune_interval"
        elif key == "joinPruneIntervalVariable":
            suggest = "join_prune_interval_variable"
        elif key == "queryInterval":
            suggest = "query_interval"
        elif key == "queryIntervalVariable":
            suggest = "query_interval_variable"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in CedgePimFeatureTemplateInterface. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        CedgePimFeatureTemplateInterface.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        CedgePimFeatureTemplateInterface.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 interface_name: Optional[_builtins.str] = None,
                 interface_name_variable: Optional[_builtins.str] = None,
                 join_prune_interval: Optional[_builtins.int] = None,
                 join_prune_interval_variable: Optional[_builtins.str] = None,
                 optional: Optional[_builtins.bool] = None,
                 query_interval: Optional[_builtins.int] = None,
                 query_interval_variable: Optional[_builtins.str] = None):
        """
        :param _builtins.str interface_name: Set interface name
        :param _builtins.str interface_name_variable: Variable name
        :param _builtins.int join_prune_interval: Set interval at which PIM multicast traffic can join or be removed from RPT or SPT
                 - Range: `10`-`600`
                 - Default value: `60`
        :param _builtins.str join_prune_interval_variable: Variable name
        :param _builtins.bool optional: Indicates if list item is considered optional.
        :param _builtins.int query_interval: Set PIM query interval
                 - Range: `1`-`18725`
                 - Default value: `30`
        :param _builtins.str query_interval_variable: Variable name
        """
        if interface_name is not None:
            pulumi.set(__self__, "interface_name", interface_name)
        if interface_name_variable is not None:
            pulumi.set(__self__, "interface_name_variable", interface_name_variable)
        if join_prune_interval is not None:
            pulumi.set(__self__, "join_prune_interval", join_prune_interval)
        if join_prune_interval_variable is not None:
            pulumi.set(__self__, "join_prune_interval_variable", join_prune_interval_variable)
        if optional is not None:
            pulumi.set(__self__, "optional", optional)
        if query_interval is not None:
            pulumi.set(__self__, "query_interval", query_interval)
        if query_interval_variable is not None:
            pulumi.set(__self__, "query_interval_variable", query_interval_variable)

    @_builtins.property
    @pulumi.getter(name="interfaceName")
    def interface_name(self) -> Optional[_builtins.str]:
        """
        Set interface name
        """
        return pulumi.get(self, "interface_name")

    @_builtins.property
    @pulumi.getter(name="interfaceNameVariable")
    def interface_name_variable(self) -> Optional[_builtins.str]:
        """
        Variable name
        """
        return pulumi.get(self, "interface_name_variable")

    @_builtins.property
    @pulumi.getter(name="joinPruneInterval")
    def join_prune_interval(self) -> Optional[_builtins.int]:
        """
        Set interval at which PIM multicast traffic can join or be removed from RPT or SPT
          - Range: `10`-`600`
          - Default value: `60`
        """
        return pulumi.get(self, "join_prune_interval")

    @_builtins.property
    @pulumi.getter(name="joinPruneIntervalVariable")
    def join_prune_interval_variable(self) -> Optional[_builtins.str]:
        """
        Variable name
        """
        return pulumi.get(self, "join_prune_interval_variable")

    @_builtins.property
    @pulumi.getter
    def optional(self) -> Optional[_builtins.bool]:
        """
        Indicates if list item is considered optional.
        """
        return pulumi.get(self, "optional")

    @_builtins.property
    @pulumi.getter(name="queryInterval")
    def query_interval(self) -> Optional[_builtins.int]:
        """
        Set PIM query interval
          - Range: `1`-`18725`
          - Default value: `30`
        """
        return pulumi.get(self, "query_interval")

    @_builtins.property
    @pulumi.getter(name="queryIntervalVariable")
    def query_interval_variable(self) -> Optional[_builtins.str]:
        """
        Variable name
        """
        return pulumi.get(self, "query_interval_variable")


@pulumi.output_type
class CedgePimFeatureTemplateRpAddress(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "accessList":
            suggest = "access_list"
        elif key == "accessListVariable":
            suggest = "access_list_variable"
        elif key == "ipAddress":
            suggest = "ip_address"
        elif key == "ipAddressVariable":
            suggest = "ip_address_variable"
        elif key == "overrideVariable":
            suggest = "override_variable"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in CedgePimFeatureTemplateRpAddress. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        CedgePimFeatureTemplateRpAddress.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        CedgePimFeatureTemplateRpAddress.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 access_list: Optional[_builtins.str] = None,
                 access_list_variable: Optional[_builtins.str] = None,
                 ip_address: Optional[_builtins.str] = None,
                 ip_address_variable: Optional[_builtins.str] = None,
                 optional: Optional[_builtins.bool] = None,
                 override: Optional[_builtins.bool] = None,
                 override_variable: Optional[_builtins.str] = None):
        """
        :param _builtins.str access_list: Set Static RP Access List
        :param _builtins.str access_list_variable: Variable name
        :param _builtins.str ip_address: Set Static RP IP Address
        :param _builtins.str ip_address_variable: Variable name
        :param _builtins.bool optional: Indicates if list item is considered optional.
        :param _builtins.bool override: Set override flag
                 - Default value: `false`
        :param _builtins.str override_variable: Variable name
        """
        if access_list is not None:
            pulumi.set(__self__, "access_list", access_list)
        if access_list_variable is not None:
            pulumi.set(__self__, "access_list_variable", access_list_variable)
        if ip_address is not None:
            pulumi.set(__self__, "ip_address", ip_address)
        if ip_address_variable is not None:
            pulumi.set(__self__, "ip_address_variable", ip_address_variable)
        if optional is not None:
            pulumi.set(__self__, "optional", optional)
        if override is not None:
            pulumi.set(__self__, "override", override)
        if override_variable is not None:
            pulumi.set(__self__, "override_variable", override_variable)

    @_builtins.property
    @pulumi.getter(name="accessList")
    def access_list(self) -> Optional[_builtins.str]:
        """
        Set Static RP Access List
        """
        return pulumi.get(self, "access_list")

    @_builtins.property
    @pulumi.getter(name="accessListVariable")
    def access_list_variable(self) -> Optional[_builtins.str]:
        """
        Variable name
        """
        return pulumi.get(self, "access_list_variable")

    @_builtins.property
    @pulumi.getter(name="ipAddress")
    def ip_address(self) -> Optional[_builtins.str]:
        """
        Set Static RP IP Address
        """
        return pulumi.get(self, "ip_address")

    @_builtins.property
    @pulumi.getter(name="ipAddressVariable")
    def ip_address_variable(self) -> Optional[_builtins.str]:
        """
        Variable name
        """
        return pulumi.get(self, "ip_address_variable")

    @_builtins.property
    @pulumi.getter
    def optional(self) -> Optional[_builtins.bool]:
        """
        Indicates if list item is considered optional.
        """
        return pulumi.get(self, "optional")

    @_builtins.property
    @pulumi.getter
    def override(self) -> Optional[_builtins.bool]:
        """
        Set override flag
          - Default value: `false`
        """
        return pulumi.get(self, "override")

    @_builtins.property
    @pulumi.getter(name="overrideVariable")
    def override_variable(self) -> Optional[_builtins.str]:
        """
        Variable name
        """
        return pulumi.get(self, "override_variable")


@pulumi.output_type
class CedgePimFeatureTemplateRpAnnounceField(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "interfaceName":
            suggest = "interface_name"
        elif key == "interfaceNameVariable":
            suggest = "interface_name_variable"
        elif key == "scopeVariable":
            suggest = "scope_variable"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in CedgePimFeatureTemplateRpAnnounceField. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        CedgePimFeatureTemplateRpAnnounceField.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        CedgePimFeatureTemplateRpAnnounceField.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 interface_name: Optional[_builtins.str] = None,
                 interface_name_variable: Optional[_builtins.str] = None,
                 optional: Optional[_builtins.bool] = None,
                 scope: Optional[_builtins.int] = None,
                 scope_variable: Optional[_builtins.str] = None):
        """
        :param _builtins.str interface_name: Set RP Announce Interface Name
        :param _builtins.str interface_name_variable: Variable name
        :param _builtins.bool optional: Indicates if list item is considered optional.
        :param _builtins.int scope: Set RP Announce Scope
                 - Range: `1`-`255`
        :param _builtins.str scope_variable: Variable name
        """
        if interface_name is not None:
            pulumi.set(__self__, "interface_name", interface_name)
        if interface_name_variable is not None:
            pulumi.set(__self__, "interface_name_variable", interface_name_variable)
        if optional is not None:
            pulumi.set(__self__, "optional", optional)
        if scope is not None:
            pulumi.set(__self__, "scope", scope)
        if scope_variable is not None:
            pulumi.set(__self__, "scope_variable", scope_variable)

    @_builtins.property
    @pulumi.getter(name="interfaceName")
    def interface_name(self) -> Optional[_builtins.str]:
        """
        Set RP Announce Interface Name
        """
        return pulumi.get(self, "interface_name")

    @_builtins.property
    @pulumi.getter(name="interfaceNameVariable")
    def interface_name_variable(self) -> Optional[_builtins.str]:
        """
        Variable name
        """
        return pulumi.get(self, "interface_name_variable")

    @_builtins.property
    @pulumi.getter
    def optional(self) -> Optional[_builtins.bool]:
        """
        Indicates if list item is considered optional.
        """
        return pulumi.get(self, "optional")

    @_builtins.property
    @pulumi.getter
    def scope(self) -> Optional[_builtins.int]:
        """
        Set RP Announce Scope
          - Range: `1`-`255`
        """
        return pulumi.get(self, "scope")

    @_builtins.property
    @pulumi.getter(name="scopeVariable")
    def scope_variable(self) -> Optional[_builtins.str]:
        """
        Variable name
        """
        return pulumi.get(self, "scope_variable")


@pulumi.output_type
class CedgePimFeatureTemplateRpCandidate(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "accessList":
            suggest = "access_list"
        elif key == "accessListVariable":
            suggest = "access_list_variable"
        elif key == "interfaceVariable":
            suggest = "interface_variable"
        elif key == "intervalVariable":
            suggest = "interval_variable"
        elif key == "priorityVariable":
            suggest = "priority_variable"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in CedgePimFeatureTemplateRpCandidate. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        CedgePimFeatureTemplateRpCandidate.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        CedgePimFeatureTemplateRpCandidate.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 access_list: Optional[_builtins.str] = None,
                 access_list_variable: Optional[_builtins.str] = None,
                 interface: Optional[_builtins.str] = None,
                 interface_variable: Optional[_builtins.str] = None,
                 interval: Optional[_builtins.int] = None,
                 interval_variable: Optional[_builtins.str] = None,
                 optional: Optional[_builtins.bool] = None,
                 priority: Optional[_builtins.int] = None,
                 priority_variable: Optional[_builtins.str] = None):
        """
        :param _builtins.str access_list: Set IP Access List for PIM RP Candidate
        :param _builtins.str access_list_variable: Variable name
        :param _builtins.str interface: Set Autonomic-Networking virtual interface
        :param _builtins.str interface_variable: Variable name
        :param _builtins.int interval: Set RP candidate advertisement interval
                 - Range: `1`-`16383`
        :param _builtins.str interval_variable: Variable name
        :param _builtins.bool optional: Indicates if list item is considered optional.
        :param _builtins.int priority: Set RP candidate priority
                 - Range: `0`-`255`
        :param _builtins.str priority_variable: Variable name
        """
        if access_list is not None:
            pulumi.set(__self__, "access_list", access_list)
        if access_list_variable is not None:
            pulumi.set(__self__, "access_list_variable", access_list_variable)
        if interface is not None:
            pulumi.set(__self__, "interface", interface)
        if interface_variable is not None:
            pulumi.set(__self__, "interface_variable", interface_variable)
        if interval is not None:
            pulumi.set(__self__, "interval", interval)
        if interval_variable is not None:
            pulumi.set(__self__, "interval_variable", interval_variable)
        if optional is not None:
            pulumi.set(__self__, "optional", optional)
        if priority is not None:
            pulumi.set(__self__, "priority", priority)
        if priority_variable is not None:
            pulumi.set(__self__, "priority_variable", priority_variable)

    @_builtins.property
    @pulumi.getter(name="accessList")
    def access_list(self) -> Optional[_builtins.str]:
        """
        Set IP Access List for PIM RP Candidate
        """
        return pulumi.get(self, "access_list")

    @_builtins.property
    @pulumi.getter(name="accessListVariable")
    def access_list_variable(self) -> Optional[_builtins.str]:
        """
        Variable name
        """
        return pulumi.get(self, "access_list_variable")

    @_builtins.property
    @pulumi.getter
    def interface(self) -> Optional[_builtins.str]:
        """
        Set Autonomic-Networking virtual interface
        """
        return pulumi.get(self, "interface")

    @_builtins.property
    @pulumi.getter(name="interfaceVariable")
    def interface_variable(self) -> Optional[_builtins.str]:
        """
        Variable name
        """
        return pulumi.get(self, "interface_variable")

    @_builtins.property
    @pulumi.getter
    def interval(self) -> Optional[_builtins.int]:
        """
        Set RP candidate advertisement interval
          - Range: `1`-`16383`
        """
        return pulumi.get(self, "interval")

    @_builtins.property
    @pulumi.getter(name="intervalVariable")
    def interval_variable(self) -> Optional[_builtins.str]:
        """
        Variable name
        """
        return pulumi.get(self, "interval_variable")

    @_builtins.property
    @pulumi.getter
    def optional(self) -> Optional[_builtins.bool]:
        """
        Indicates if list item is considered optional.
        """
        return pulumi.get(self, "optional")

    @_builtins.property
    @pulumi.getter
    def priority(self) -> Optional[_builtins.int]:
        """
        Set RP candidate priority
          - Range: `0`-`255`
        """
        return pulumi.get(self, "priority")

    @_builtins.property
    @pulumi.getter(name="priorityVariable")
    def priority_variable(self) -> Optional[_builtins.str]:
        """
        Variable name
        """
        return pulumi.get(self, "priority_variable")


@pulumi.output_type
class CellularControllerFeatureTemplateDataProfile(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "attachProfile":
            suggest = "attach_profile"
        elif key == "attachProfileVariable":
            suggest = "attach_profile_variable"
        elif key == "dataProfile":
            suggest = "data_profile"
        elif key == "dataProfileVariable":
            suggest = "data_profile_variable"
        elif key == "slotNumber":
            suggest = "slot_number"
        elif key == "slotNumberVariable":
            suggest = "slot_number_variable"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in CellularControllerFeatureTemplateDataProfile. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        CellularControllerFeatureTemplateDataProfile.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        CellularControllerFeatureTemplateDataProfile.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 attach_profile: Optional[_builtins.int] = None,
                 attach_profile_variable: Optional[_builtins.str] = None,
                 data_profile: Optional[_builtins.int] = None,
                 data_profile_variable: Optional[_builtins.str] = None,
                 optional: Optional[_builtins.bool] = None,
                 slot_number: Optional[_builtins.int] = None,
                 slot_number_variable: Optional[_builtins.str] = None):
        """
        :param _builtins.int attach_profile: Set attach profile
                 - Range: `1`-`16`
        :param _builtins.str attach_profile_variable: Variable name
        :param _builtins.int data_profile: Set data profile
                 - Range: `1`-`16`
        :param _builtins.str data_profile_variable: Variable name
        :param _builtins.bool optional: Indicates if list item is considered optional.
        :param _builtins.int slot_number: Set slot number
                 - Range: `0`-`1`
        :param _builtins.str slot_number_variable: Variable name
        """
        if attach_profile is not None:
            pulumi.set(__self__, "attach_profile", attach_profile)
        if attach_profile_variable is not None:
            pulumi.set(__self__, "attach_profile_variable", attach_profile_variable)
        if data_profile is not None:
            pulumi.set(__self__, "data_profile", data_profile)
        if data_profile_variable is not None:
            pulumi.set(__self__, "data_profile_variable", data_profile_variable)
        if optional is not None:
            pulumi.set(__self__, "optional", optional)
        if slot_number is not None:
            pulumi.set(__self__, "slot_number", slot_number)
        if slot_number_variable is not None:
            pulumi.set(__self__, "slot_number_variable", slot_number_variable)

    @_builtins.property
    @pulumi.getter(name="attachProfile")
    def attach_profile(self) -> Optional[_builtins.int]:
        """
        Set attach profile
          - Range: `1`-`16`
        """
        return pulumi.get(self, "attach_profile")

    @_builtins.property
    @pulumi.getter(name="attachProfileVariable")
    def attach_profile_variable(self) -> Optional[_builtins.str]:
        """
        Variable name
        """
        return pulumi.get(self, "attach_profile_variable")

    @_builtins.property
    @pulumi.getter(name="dataProfile")
    def data_profile(self) -> Optional[_builtins.int]:
        """
        Set data profile
          - Range: `1`-`16`
        """
        return pulumi.get(self, "data_profile")

    @_builtins.property
    @pulumi.getter(name="dataProfileVariable")
    def data_profile_variable(self) -> Optional[_builtins.str]:
        """
        Variable name
        """
        return pulumi.get(self, "data_profile_variable")

    @_builtins.property
    @pulumi.getter
    def optional(self) -> Optional[_builtins.bool]:
        """
        Indicates if list item is considered optional.
        """
        return pulumi.get(self, "optional")

    @_builtins.property
    @pulumi.getter(name="slotNumber")
    def slot_number(self) -> Optional[_builtins.int]:
        """
        Set slot number
          - Range: `0`-`1`
        """
        return pulumi.get(self, "slot_number")

    @_builtins.property
    @pulumi.getter(name="slotNumberVariable")
    def slot_number_variable(self) -> Optional[_builtins.str]:
        """
        Variable name
        """
        return pulumi.get(self, "slot_number_variable")


@pulumi.output_type
class CentralizedPolicyDefinition(dict):
    def __init__(__self__, *,
                 id: _builtins.str,
                 type: _builtins.str,
                 entries: Optional[Sequence['outputs.CentralizedPolicyDefinitionEntry']] = None,
                 version: Optional[_builtins.int] = None):
        """
        :param _builtins.str id: Policy definition ID
        :param _builtins.str type: Policy definition type
                 - Choices: `hubAndSpoke`, `mesh`, `control`, `vpnMembershipGroup`, `appRoute`, `cflowd`, `data`
        :param Sequence['CentralizedPolicyDefinitionEntryArgs'] entries: List of entries
        :param _builtins.int version: Policy definition version
        """
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "type", type)
        if entries is not None:
            pulumi.set(__self__, "entries", entries)
        if version is not None:
            pulumi.set(__self__, "version", version)

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        Policy definition ID
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter
    def type(self) -> _builtins.str:
        """
        Policy definition type
          - Choices: `hubAndSpoke`, `mesh`, `control`, `vpnMembershipGroup`, `appRoute`, `cflowd`, `data`
        """
        return pulumi.get(self, "type")

    @_builtins.property
    @pulumi.getter
    def entries(self) -> Optional[Sequence['outputs.CentralizedPolicyDefinitionEntry']]:
        """
        List of entries
        """
        return pulumi.get(self, "entries")

    @_builtins.property
    @pulumi.getter
    def version(self) -> Optional[_builtins.int]:
        """
        Policy definition version
        """
        return pulumi.get(self, "version")


@pulumi.output_type
class CentralizedPolicyDefinitionEntry(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "regionIds":
            suggest = "region_ids"
        elif key == "regionListIds":
            suggest = "region_list_ids"
        elif key == "regionListVersions":
            suggest = "region_list_versions"
        elif key == "siteListIds":
            suggest = "site_list_ids"
        elif key == "siteListVersions":
            suggest = "site_list_versions"
        elif key == "vpnListIds":
            suggest = "vpn_list_ids"
        elif key == "vpnListVersions":
            suggest = "vpn_list_versions"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in CentralizedPolicyDefinitionEntry. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        CentralizedPolicyDefinitionEntry.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        CentralizedPolicyDefinitionEntry.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 direction: Optional[_builtins.str] = None,
                 region_ids: Optional[Sequence[_builtins.str]] = None,
                 region_list_ids: Optional[Sequence[_builtins.str]] = None,
                 region_list_versions: Optional[Sequence[_builtins.str]] = None,
                 site_list_ids: Optional[Sequence[_builtins.str]] = None,
                 site_list_versions: Optional[Sequence[_builtins.str]] = None,
                 vpn_list_ids: Optional[Sequence[_builtins.str]] = None,
                 vpn_list_versions: Optional[Sequence[_builtins.str]] = None):
        """
        :param _builtins.str direction: Direction
                 - Choices: `service`, `tunnel`, `all`, `in`, `out`
        :param Sequence[_builtins.str] region_ids: List of region IDs
        :param Sequence[_builtins.str] region_list_ids: List of region list IDs
        :param Sequence[_builtins.str] region_list_versions: List of region list versions
        :param Sequence[_builtins.str] site_list_ids: List of site list IDs
        :param Sequence[_builtins.str] site_list_versions: List of site list versions
        :param Sequence[_builtins.str] vpn_list_ids: List of VPN list IDs
        :param Sequence[_builtins.str] vpn_list_versions: List of VPN list versions
        """
        if direction is not None:
            pulumi.set(__self__, "direction", direction)
        if region_ids is not None:
            pulumi.set(__self__, "region_ids", region_ids)
        if region_list_ids is not None:
            pulumi.set(__self__, "region_list_ids", region_list_ids)
        if region_list_versions is not None:
            pulumi.set(__self__, "region_list_versions", region_list_versions)
        if site_list_ids is not None:
            pulumi.set(__self__, "site_list_ids", site_list_ids)
        if site_list_versions is not None:
            pulumi.set(__self__, "site_list_versions", site_list_versions)
        if vpn_list_ids is not None:
            pulumi.set(__self__, "vpn_list_ids", vpn_list_ids)
        if vpn_list_versions is not None:
            pulumi.set(__self__, "vpn_list_versions", vpn_list_versions)

    @_builtins.property
    @pulumi.getter
    def direction(self) -> Optional[_builtins.str]:
        """
        Direction
          - Choices: `service`, `tunnel`, `all`, `in`, `out`
        """
        return pulumi.get(self, "direction")

    @_builtins.property
    @pulumi.getter(name="regionIds")
    def region_ids(self) -> Optional[Sequence[_builtins.str]]:
        """
        List of region IDs
        """
        return pulumi.get(self, "region_ids")

    @_builtins.property
    @pulumi.getter(name="regionListIds")
    def region_list_ids(self) -> Optional[Sequence[_builtins.str]]:
        """
        List of region list IDs
        """
        return pulumi.get(self, "region_list_ids")

    @_builtins.property
    @pulumi.getter(name="regionListVersions")
    def region_list_versions(self) -> Optional[Sequence[_builtins.str]]:
        """
        List of region list versions
        """
        return pulumi.get(self, "region_list_versions")

    @_builtins.property
    @pulumi.getter(name="siteListIds")
    def site_list_ids(self) -> Optional[Sequence[_builtins.str]]:
        """
        List of site list IDs
        """
        return pulumi.get(self, "site_list_ids")

    @_builtins.property
    @pulumi.getter(name="siteListVersions")
    def site_list_versions(self) -> Optional[Sequence[_builtins.str]]:
        """
        List of site list versions
        """
        return pulumi.get(self, "site_list_versions")

    @_builtins.property
    @pulumi.getter(name="vpnListIds")
    def vpn_list_ids(self) -> Optional[Sequence[_builtins.str]]:
        """
        List of VPN list IDs
        """
        return pulumi.get(self, "vpn_list_ids")

    @_builtins.property
    @pulumi.getter(name="vpnListVersions")
    def vpn_list_versions(self) -> Optional[Sequence[_builtins.str]]:
        """
        List of VPN list versions
        """
        return pulumi.get(self, "vpn_list_versions")


@pulumi.output_type
class CflowdPolicyDefinitionCollector(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "bfdMetricsExporting":
            suggest = "bfd_metrics_exporting"
        elif key == "exportSpreading":
            suggest = "export_spreading"
        elif key == "exportingInterval":
            suggest = "exporting_interval"
        elif key == "ipAddress":
            suggest = "ip_address"
        elif key == "sourceInterface":
            suggest = "source_interface"
        elif key == "vpnId":
            suggest = "vpn_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in CflowdPolicyDefinitionCollector. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        CflowdPolicyDefinitionCollector.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        CflowdPolicyDefinitionCollector.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 bfd_metrics_exporting: Optional[_builtins.bool] = None,
                 export_spreading: Optional[_builtins.str] = None,
                 exporting_interval: Optional[_builtins.int] = None,
                 ip_address: Optional[_builtins.str] = None,
                 port: Optional[_builtins.int] = None,
                 source_interface: Optional[_builtins.str] = None,
                 transport: Optional[_builtins.str] = None,
                 vpn_id: Optional[_builtins.int] = None):
        """
        :param _builtins.bool bfd_metrics_exporting: BFD metrics exporting
        :param _builtins.str export_spreading: Export spreading
                 - Choices: `enable`, `disable`
        :param _builtins.int exporting_interval: Exporting interval
        :param _builtins.str ip_address: IP address
        :param _builtins.int port: Port
                 - Range: `1024`-`65535`
        :param _builtins.str source_interface: Source interface
        :param _builtins.str transport: Transport protocol
                 - Choices: `transport_tcp`, `transport_udp`
        :param _builtins.int vpn_id: VPN ID
                 - Range: `1`-`65535`
        """
        if bfd_metrics_exporting is not None:
            pulumi.set(__self__, "bfd_metrics_exporting", bfd_metrics_exporting)
        if export_spreading is not None:
            pulumi.set(__self__, "export_spreading", export_spreading)
        if exporting_interval is not None:
            pulumi.set(__self__, "exporting_interval", exporting_interval)
        if ip_address is not None:
            pulumi.set(__self__, "ip_address", ip_address)
        if port is not None:
            pulumi.set(__self__, "port", port)
        if source_interface is not None:
            pulumi.set(__self__, "source_interface", source_interface)
        if transport is not None:
            pulumi.set(__self__, "transport", transport)
        if vpn_id is not None:
            pulumi.set(__self__, "vpn_id", vpn_id)

    @_builtins.property
    @pulumi.getter(name="bfdMetricsExporting")
    def bfd_metrics_exporting(self) -> Optional[_builtins.bool]:
        """
        BFD metrics exporting
        """
        return pulumi.get(self, "bfd_metrics_exporting")

    @_builtins.property
    @pulumi.getter(name="exportSpreading")
    def export_spreading(self) -> Optional[_builtins.str]:
        """
        Export spreading
          - Choices: `enable`, `disable`
        """
        return pulumi.get(self, "export_spreading")

    @_builtins.property
    @pulumi.getter(name="exportingInterval")
    def exporting_interval(self) -> Optional[_builtins.int]:
        """
        Exporting interval
        """
        return pulumi.get(self, "exporting_interval")

    @_builtins.property
    @pulumi.getter(name="ipAddress")
    def ip_address(self) -> Optional[_builtins.str]:
        """
        IP address
        """
        return pulumi.get(self, "ip_address")

    @_builtins.property
    @pulumi.getter
    def port(self) -> Optional[_builtins.int]:
        """
        Port
          - Range: `1024`-`65535`
        """
        return pulumi.get(self, "port")

    @_builtins.property
    @pulumi.getter(name="sourceInterface")
    def source_interface(self) -> Optional[_builtins.str]:
        """
        Source interface
        """
        return pulumi.get(self, "source_interface")

    @_builtins.property
    @pulumi.getter
    def transport(self) -> Optional[_builtins.str]:
        """
        Transport protocol
          - Choices: `transport_tcp`, `transport_udp`
        """
        return pulumi.get(self, "transport")

    @_builtins.property
    @pulumi.getter(name="vpnId")
    def vpn_id(self) -> Optional[_builtins.int]:
        """
        VPN ID
          - Range: `1`-`65535`
        """
        return pulumi.get(self, "vpn_id")


@pulumi.output_type
class CiscoBfdFeatureTemplateColor(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "colorVariable":
            suggest = "color_variable"
        elif key == "dscpVariable":
            suggest = "dscp_variable"
        elif key == "helloInterval":
            suggest = "hello_interval"
        elif key == "helloIntervalVariable":
            suggest = "hello_interval_variable"
        elif key == "multiplierVariable":
            suggest = "multiplier_variable"
        elif key == "pmtuDiscovery":
            suggest = "pmtu_discovery"
        elif key == "pmtuDiscoveryVariable":
            suggest = "pmtu_discovery_variable"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in CiscoBfdFeatureTemplateColor. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        CiscoBfdFeatureTemplateColor.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        CiscoBfdFeatureTemplateColor.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 color: Optional[_builtins.str] = None,
                 color_variable: Optional[_builtins.str] = None,
                 dscp: Optional[_builtins.int] = None,
                 dscp_variable: Optional[_builtins.str] = None,
                 hello_interval: Optional[_builtins.int] = None,
                 hello_interval_variable: Optional[_builtins.str] = None,
                 multiplier: Optional[_builtins.int] = None,
                 multiplier_variable: Optional[_builtins.str] = None,
                 optional: Optional[_builtins.bool] = None,
                 pmtu_discovery: Optional[_builtins.bool] = None,
                 pmtu_discovery_variable: Optional[_builtins.str] = None):
        """
        :param _builtins.str color: Set color that identifies the WAN transport tunnel
                 - Choices: `default`, `mpls`, `metro-ethernet`, `biz-internet`, `public-internet`, `lte`, `3g`, `red`, `green`, `blue`, `gold`, `silver`, `bronze`, `custom1`, `custom2`, `custom3`, `private1`, `private2`, `private3`, `private4`, `private5`, `private6`
        :param _builtins.str color_variable: Variable name
        :param _builtins.int dscp: Set BFD Default DSCP value for tloc color
                 - Range: `0`-`63`
                 - Default value: `48`
        :param _builtins.str dscp_variable: Variable name
        :param _builtins.int hello_interval: Set how often BFD sends Hello packets
                 - Range: `100`-`300000`
                 - Default value: `1000`
        :param _builtins.str hello_interval_variable: Variable name
        :param _builtins.int multiplier: Set how many Hello packet intervals to wait before declaring that a tunnel has failed
                 - Range: `1`-`60`
                 - Default value: `7`
        :param _builtins.str multiplier_variable: Variable name
        :param _builtins.bool optional: Indicates if list item is considered optional.
        :param _builtins.bool pmtu_discovery: Control automatic path MTU discovery
                 - Default value: `true`
        :param _builtins.str pmtu_discovery_variable: Variable name
        """
        if color is not None:
            pulumi.set(__self__, "color", color)
        if color_variable is not None:
            pulumi.set(__self__, "color_variable", color_variable)
        if dscp is not None:
            pulumi.set(__self__, "dscp", dscp)
        if dscp_variable is not None:
            pulumi.set(__self__, "dscp_variable", dscp_variable)
        if hello_interval is not None:
            pulumi.set(__self__, "hello_interval", hello_interval)
        if hello_interval_variable is not None:
            pulumi.set(__self__, "hello_interval_variable", hello_interval_variable)
        if multiplier is not None:
            pulumi.set(__self__, "multiplier", multiplier)
        if multiplier_variable is not None:
            pulumi.set(__self__, "multiplier_variable", multiplier_variable)
        if optional is not None:
            pulumi.set(__self__, "optional", optional)
        if pmtu_discovery is not None:
            pulumi.set(__self__, "pmtu_discovery", pmtu_discovery)
        if pmtu_discovery_variable is not None:
            pulumi.set(__self__, "pmtu_discovery_variable", pmtu_discovery_variable)

    @_builtins.property
    @pulumi.getter
    def color(self) -> Optional[_builtins.str]:
        """
        Set color that identifies the WAN transport tunnel
          - Choices: `default`, `mpls`, `metro-ethernet`, `biz-internet`, `public-internet`, `lte`, `3g`, `red`, `green`, `blue`, `gold`, `silver`, `bronze`, `custom1`, `custom2`, `custom3`, `private1`, `private2`, `private3`, `private4`, `private5`, `private6`
        """
        return pulumi.get(self, "color")

    @_builtins.property
    @pulumi.getter(name="colorVariable")
    def color_variable(self) -> Optional[_builtins.str]:
        """
        Variable name
        """
        return pulumi.get(self, "color_variable")

    @_builtins.property
    @pulumi.getter
    def dscp(self) -> Optional[_builtins.int]:
        """
        Set BFD Default DSCP value for tloc color
          - Range: `0`-`63`
          - Default value: `48`
        """
        return pulumi.get(self, "dscp")

    @_builtins.property
    @pulumi.getter(name="dscpVariable")
    def dscp_variable(self) -> Optional[_builtins.str]:
        """
        Variable name
        """
        return pulumi.get(self, "dscp_variable")

    @_builtins.property
    @pulumi.getter(name="helloInterval")
    def hello_interval(self) -> Optional[_builtins.int]:
        """
        Set how often BFD sends Hello packets
          - Range: `100`-`300000`
          - Default value: `1000`
        """
        return pulumi.get(self, "hello_interval")

    @_builtins.property
    @pulumi.getter(name="helloIntervalVariable")
    def hello_interval_variable(self) -> Optional[_builtins.str]:
        """
        Variable name
        """
        return pulumi.get(self, "hello_interval_variable")

    @_builtins.property
    @pulumi.getter
    def multiplier(self) -> Optional[_builtins.int]:
        """
        Set how many Hello packet intervals to wait before declaring that a tunnel has failed
          - Range: `1`-`60`
          - Default value: `7`
        """
        return pulumi.get(self, "multiplier")

    @_builtins.property
    @pulumi.getter(name="multiplierVariable")
    def multiplier_variable(self) -> Optional[_builtins.str]:
        """
        Variable name
        """
        return pulumi.get(self, "multiplier_variable")

    @_builtins.property
    @pulumi.getter
    def optional(self) -> Optional[_builtins.bool]:
        """
        Indicates if list item is considered optional.
        """
        return pulumi.get(self, "optional")

    @_builtins.property
    @pulumi.getter(name="pmtuDiscovery")
    def pmtu_discovery(self) -> Optional[_builtins.bool]:
        """
        Control automatic path MTU discovery
          - Default value: `true`
        """
        return pulumi.get(self, "pmtu_discovery")

    @_builtins.property
    @pulumi.getter(name="pmtuDiscoveryVariable")
    def pmtu_discovery_variable(self) -> Optional[_builtins.str]:
        """
        Variable name
        """
        return pulumi.get(self, "pmtu_discovery_variable")


@pulumi.output_type
class CiscoBgpFeatureTemplateAddressFamily(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "defaultInformationOriginate":
            suggest = "default_information_originate"
        elif key == "defaultInformationOriginateVariable":
            suggest = "default_information_originate_variable"
        elif key == "familyType":
            suggest = "family_type"
        elif key == "ipv4AggregateAddresses":
            suggest = "ipv4_aggregate_addresses"
        elif key == "ipv4Networks":
            suggest = "ipv4_networks"
        elif key == "ipv6AggregateAddresses":
            suggest = "ipv6_aggregate_addresses"
        elif key == "ipv6Networks":
            suggest = "ipv6_networks"
        elif key == "maximumPaths":
            suggest = "maximum_paths"
        elif key == "maximumPathsVariable":
            suggest = "maximum_paths_variable"
        elif key == "redistributeRoutes":
            suggest = "redistribute_routes"
        elif key == "tableMapFilter":
            suggest = "table_map_filter"
        elif key == "tableMapFilterVariable":
            suggest = "table_map_filter_variable"
        elif key == "tableMapPolicy":
            suggest = "table_map_policy"
        elif key == "tableMapPolicyVariable":
            suggest = "table_map_policy_variable"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in CiscoBgpFeatureTemplateAddressFamily. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        CiscoBgpFeatureTemplateAddressFamily.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        CiscoBgpFeatureTemplateAddressFamily.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 default_information_originate: Optional[_builtins.bool] = None,
                 default_information_originate_variable: Optional[_builtins.str] = None,
                 family_type: Optional[_builtins.str] = None,
                 ipv4_aggregate_addresses: Optional[Sequence['outputs.CiscoBgpFeatureTemplateAddressFamilyIpv4AggregateAddress']] = None,
                 ipv4_networks: Optional[Sequence['outputs.CiscoBgpFeatureTemplateAddressFamilyIpv4Network']] = None,
                 ipv6_aggregate_addresses: Optional[Sequence['outputs.CiscoBgpFeatureTemplateAddressFamilyIpv6AggregateAddress']] = None,
                 ipv6_networks: Optional[Sequence['outputs.CiscoBgpFeatureTemplateAddressFamilyIpv6Network']] = None,
                 maximum_paths: Optional[_builtins.int] = None,
                 maximum_paths_variable: Optional[_builtins.str] = None,
                 optional: Optional[_builtins.bool] = None,
                 redistribute_routes: Optional[Sequence['outputs.CiscoBgpFeatureTemplateAddressFamilyRedistributeRoute']] = None,
                 table_map_filter: Optional[_builtins.bool] = None,
                 table_map_filter_variable: Optional[_builtins.str] = None,
                 table_map_policy: Optional[_builtins.str] = None,
                 table_map_policy_variable: Optional[_builtins.str] = None):
        """
        :param _builtins.bool default_information_originate: BGP Default Information Originate
                 - Default value: `false`
        :param _builtins.str default_information_originate_variable: Variable name
        :param _builtins.str family_type: Set BGP address family
                 - Choices: `ipv4-unicast`, `ipv6-unicast`
        :param Sequence['CiscoBgpFeatureTemplateAddressFamilyIpv4AggregateAddressArgs'] ipv4_aggregate_addresses: Aggregate prefixes in specific range
        :param Sequence['CiscoBgpFeatureTemplateAddressFamilyIpv4NetworkArgs'] ipv4_networks: Configure the networks for BGP to advertise
        :param Sequence['CiscoBgpFeatureTemplateAddressFamilyIpv6AggregateAddressArgs'] ipv6_aggregate_addresses: IPv6 Aggregate prefixes in specific range
        :param Sequence['CiscoBgpFeatureTemplateAddressFamilyIpv6NetworkArgs'] ipv6_networks: Configure the networks for BGP to advertise
        :param _builtins.int maximum_paths: Set maximum number of parallel IBGP paths for multipath load sharing
                 - Range: `0`-`32`
        :param _builtins.str maximum_paths_variable: Variable name
        :param _builtins.bool optional: Indicates if list item is considered optional.
        :param Sequence['CiscoBgpFeatureTemplateAddressFamilyRedistributeRouteArgs'] redistribute_routes: Redistribute routes into BGP
        :param _builtins.bool table_map_filter: Filter
                 - Default value: `false`
        :param _builtins.str table_map_filter_variable: Variable name
        :param _builtins.str table_map_policy: Map external entry attributes into routing table
        :param _builtins.str table_map_policy_variable: Variable name
        """
        if default_information_originate is not None:
            pulumi.set(__self__, "default_information_originate", default_information_originate)
        if default_information_originate_variable is not None:
            pulumi.set(__self__, "default_information_originate_variable", default_information_originate_variable)
        if family_type is not None:
            pulumi.set(__self__, "family_type", family_type)
        if ipv4_aggregate_addresses is not None:
            pulumi.set(__self__, "ipv4_aggregate_addresses", ipv4_aggregate_addresses)
        if ipv4_networks is not None:
            pulumi.set(__self__, "ipv4_networks", ipv4_networks)
        if ipv6_aggregate_addresses is not None:
            pulumi.set(__self__, "ipv6_aggregate_addresses", ipv6_aggregate_addresses)
        if ipv6_networks is not None:
            pulumi.set(__self__, "ipv6_networks", ipv6_networks)
        if maximum_paths is not None:
            pulumi.set(__self__, "maximum_paths", maximum_paths)
        if maximum_paths_variable is not None:
            pulumi.set(__self__, "maximum_paths_variable", maximum_paths_variable)
        if optional is not None:
            pulumi.set(__self__, "optional", optional)
        if redistribute_routes is not None:
            pulumi.set(__self__, "redistribute_routes", redistribute_routes)
        if table_map_filter is not None:
            pulumi.set(__self__, "table_map_filter", table_map_filter)
        if table_map_filter_variable is not None:
            pulumi.set(__self__, "table_map_filter_variable", table_map_filter_variable)
        if table_map_policy is not None:
            pulumi.set(__self__, "table_map_policy", table_map_policy)
        if table_map_policy_variable is not None:
            pulumi.set(__self__, "table_map_policy_variable", table_map_policy_variable)

    @_builtins.property
    @pulumi.getter(name="defaultInformationOriginate")
    def default_information_originate(self) -> Optional[_builtins.bool]:
        """
        BGP Default Information Originate
          - Default value: `false`
        """
        return pulumi.get(self, "default_information_originate")

    @_builtins.property
    @pulumi.getter(name="defaultInformationOriginateVariable")
    def default_information_originate_variable(self) -> Optional[_builtins.str]:
        """
        Variable name
        """
        return pulumi.get(self, "default_information_originate_variable")

    @_builtins.property
    @pulumi.getter(name="familyType")
    def family_type(self) -> Optional[_builtins.str]:
        """
        Set BGP address family
          - Choices: `ipv4-unicast`, `ipv6-unicast`
        """
        return pulumi.get(self, "family_type")

    @_builtins.property
    @pulumi.getter(name="ipv4AggregateAddresses")
    def ipv4_aggregate_addresses(self) -> Optional[Sequence['outputs.CiscoBgpFeatureTemplateAddressFamilyIpv4AggregateAddress']]:
        """
        Aggregate prefixes in specific range
        """
        return pulumi.get(self, "ipv4_aggregate_addresses")

    @_builtins.property
    @pulumi.getter(name="ipv4Networks")
    def ipv4_networks(self) -> Optional[Sequence['outputs.CiscoBgpFeatureTemplateAddressFamilyIpv4Network']]:
        """
        Configure the networks for BGP to advertise
        """
        return pulumi.get(self, "ipv4_networks")

    @_builtins.property
    @pulumi.getter(name="ipv6AggregateAddresses")
    def ipv6_aggregate_addresses(self) -> Optional[Sequence['outputs.CiscoBgpFeatureTemplateAddressFamilyIpv6AggregateAddress']]:
        """
        IPv6 Aggregate prefixes in specific range
        """
        return pulumi.get(self, "ipv6_aggregate_addresses")

    @_builtins.property
    @pulumi.getter(name="ipv6Networks")
    def ipv6_networks(self) -> Optional[Sequence['outputs.CiscoBgpFeatureTemplateAddressFamilyIpv6Network']]:
        """
        Configure the networks for BGP to advertise
        """
        return pulumi.get(self, "ipv6_networks")

    @_builtins.property
    @pulumi.getter(name="maximumPaths")
    def maximum_paths(self) -> Optional[_builtins.int]:
        """
        Set maximum number of parallel IBGP paths for multipath load sharing
          - Range: `0`-`32`
        """
        return pulumi.get(self, "maximum_paths")

    @_builtins.property
    @pulumi.getter(name="maximumPathsVariable")
    def maximum_paths_variable(self) -> Optional[_builtins.str]:
        """
        Variable name
        """
        return pulumi.get(self, "maximum_paths_variable")

    @_builtins.property
    @pulumi.getter
    def optional(self) -> Optional[_builtins.bool]:
        """
        Indicates if list item is considered optional.
        """
        return pulumi.get(self, "optional")

    @_builtins.property
    @pulumi.getter(name="redistributeRoutes")
    def redistribute_routes(self) -> Optional[Sequence['outputs.CiscoBgpFeatureTemplateAddressFamilyRedistributeRoute']]:
        """
        Redistribute routes into BGP
        """
        return pulumi.get(self, "redistribute_routes")

    @_builtins.property
    @pulumi.getter(name="tableMapFilter")
    def table_map_filter(self) -> Optional[_builtins.bool]:
        """
        Filter
          - Default value: `false`
        """
        return pulumi.get(self, "table_map_filter")

    @_builtins.property
    @pulumi.getter(name="tableMapFilterVariable")
    def table_map_filter_variable(self) -> Optional[_builtins.str]:
        """
        Variable name
        """
        return pulumi.get(self, "table_map_filter_variable")

    @_builtins.property
    @pulumi.getter(name="tableMapPolicy")
    def table_map_policy(self) -> Optional[_builtins.str]:
        """
        Map external entry attributes into routing table
        """
        return pulumi.get(self, "table_map_policy")

    @_builtins.property
    @pulumi.getter(name="tableMapPolicyVariable")
    def table_map_policy_variable(self) -> Optional[_builtins.str]:
        """
        Variable name
        """
        return pulumi.get(self, "table_map_policy_variable")


@pulumi.output_type
class CiscoBgpFeatureTemplateAddressFamilyIpv4AggregateAddress(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "asSetPath":
            suggest = "as_set_path"
        elif key == "asSetPathVariable":
            suggest = "as_set_path_variable"
        elif key == "prefixVariable":
            suggest = "prefix_variable"
        elif key == "summaryOnly":
            suggest = "summary_only"
        elif key == "summaryOnlyVariable":
            suggest = "summary_only_variable"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in CiscoBgpFeatureTemplateAddressFamilyIpv4AggregateAddress. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        CiscoBgpFeatureTemplateAddressFamilyIpv4AggregateAddress.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        CiscoBgpFeatureTemplateAddressFamilyIpv4AggregateAddress.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 as_set_path: Optional[_builtins.bool] = None,
                 as_set_path_variable: Optional[_builtins.str] = None,
                 optional: Optional[_builtins.bool] = None,
                 prefix: Optional[_builtins.str] = None,
                 prefix_variable: Optional[_builtins.str] = None,
                 summary_only: Optional[_builtins.bool] = None,
                 summary_only_variable: Optional[_builtins.str] = None):
        """
        :param _builtins.bool as_set_path: Set AS set path information
                 - Default value: `false`
        :param _builtins.str as_set_path_variable: Variable name
        :param _builtins.bool optional: Indicates if list item is considered optional.
        :param _builtins.str prefix: Configure the prefixes to aggregate
        :param _builtins.str prefix_variable: Variable name
        :param _builtins.bool summary_only: Filter out more specific routes from updates
                 - Default value: `false`
        :param _builtins.str summary_only_variable: Variable name
        """
        if as_set_path is not None:
            pulumi.set(__self__, "as_set_path", as_set_path)
        if as_set_path_variable is not None:
            pulumi.set(__self__, "as_set_path_variable", as_set_path_variable)
        if optional is not None:
            pulumi.set(__self__, "optional", optional)
        if prefix is not None:
            pulumi.set(__self__, "prefix", prefix)
        if prefix_variable is not None:
            pulumi.set(__self__, "prefix_variable", prefix_variable)
        if summary_only is not None:
            pulumi.set(__self__, "summary_only", summary_only)
        if summary_only_variable is not None:
            pulumi.set(__self__, "summary_only_variable", summary_only_variable)

    @_builtins.property
    @pulumi.getter(name="asSetPath")
    def as_set_path(self) -> Optional[_builtins.bool]:
        """
        Set AS set path information
          - Default value: `false`
        """
        return pulumi.get(self, "as_set_path")

    @_builtins.property
    @pulumi.getter(name="asSetPathVariable")
    def as_set_path_variable(self) -> Optional[_builtins.str]:
        """
        Variable name
        """
        return pulumi.get(self, "as_set_path_variable")

    @_builtins.property
    @pulumi.getter
    def optional(self) -> Optional[_builtins.bool]:
        """
        Indicates if list item is considered optional.
        """
        return pulumi.get(self, "optional")

    @_builtins.property
    @pulumi.getter
    def prefix(self) -> Optional[_builtins.str]:
        """
        Configure the prefixes to aggregate
        """
        return pulumi.get(self, "prefix")

    @_builtins.property
    @pulumi.getter(name="prefixVariable")
    def prefix_variable(self) -> Optional[_builtins.str]:
        """
        Variable name
        """
        return pulumi.get(self, "prefix_variable")

    @_builtins.property
    @pulumi.getter(name="summaryOnly")
    def summary_only(self) -> Optional[_builtins.bool]:
        """
        Filter out more specific routes from updates
          - Default value: `false`
        """
        return pulumi.get(self, "summary_only")

    @_builtins.property
    @pulumi.getter(name="summaryOnlyVariable")
    def summary_only_variable(self) -> Optional[_builtins.str]:
        """
        Variable name
        """
        return pulumi.get(self, "summary_only_variable")


@pulumi.output_type
class CiscoBgpFeatureTemplateAddressFamilyIpv4Network(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "prefixVariable":
            suggest = "prefix_variable"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in CiscoBgpFeatureTemplateAddressFamilyIpv4Network. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        CiscoBgpFeatureTemplateAddressFamilyIpv4Network.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        CiscoBgpFeatureTemplateAddressFamilyIpv4Network.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 optional: Optional[_builtins.bool] = None,
                 prefix: Optional[_builtins.str] = None,
                 prefix_variable: Optional[_builtins.str] = None):
        """
        :param _builtins.bool optional: Indicates if list item is considered optional.
        :param _builtins.str prefix: Configure the prefixes for BGP to announce
        :param _builtins.str prefix_variable: Variable name
        """
        if optional is not None:
            pulumi.set(__self__, "optional", optional)
        if prefix is not None:
            pulumi.set(__self__, "prefix", prefix)
        if prefix_variable is not None:
            pulumi.set(__self__, "prefix_variable", prefix_variable)

    @_builtins.property
    @pulumi.getter
    def optional(self) -> Optional[_builtins.bool]:
        """
        Indicates if list item is considered optional.
        """
        return pulumi.get(self, "optional")

    @_builtins.property
    @pulumi.getter
    def prefix(self) -> Optional[_builtins.str]:
        """
        Configure the prefixes for BGP to announce
        """
        return pulumi.get(self, "prefix")

    @_builtins.property
    @pulumi.getter(name="prefixVariable")
    def prefix_variable(self) -> Optional[_builtins.str]:
        """
        Variable name
        """
        return pulumi.get(self, "prefix_variable")


@pulumi.output_type
class CiscoBgpFeatureTemplateAddressFamilyIpv6AggregateAddress(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "asSetPath":
            suggest = "as_set_path"
        elif key == "asSetPathVariable":
            suggest = "as_set_path_variable"
        elif key == "prefixVariable":
            suggest = "prefix_variable"
        elif key == "summaryOnly":
            suggest = "summary_only"
        elif key == "summaryOnlyVariable":
            suggest = "summary_only_variable"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in CiscoBgpFeatureTemplateAddressFamilyIpv6AggregateAddress. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        CiscoBgpFeatureTemplateAddressFamilyIpv6AggregateAddress.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        CiscoBgpFeatureTemplateAddressFamilyIpv6AggregateAddress.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 as_set_path: Optional[_builtins.bool] = None,
                 as_set_path_variable: Optional[_builtins.str] = None,
                 optional: Optional[_builtins.bool] = None,
                 prefix: Optional[_builtins.str] = None,
                 prefix_variable: Optional[_builtins.str] = None,
                 summary_only: Optional[_builtins.bool] = None,
                 summary_only_variable: Optional[_builtins.str] = None):
        """
        :param _builtins.bool as_set_path: Set AS set path information
                 - Default value: `false`
        :param _builtins.str as_set_path_variable: Variable name
        :param _builtins.bool optional: Indicates if list item is considered optional.
        :param _builtins.str prefix: Configure the IPv6 prefixes to aggregate
        :param _builtins.str prefix_variable: Variable name
        :param _builtins.bool summary_only: Filter out more specific routes from updates
                 - Default value: `false`
        :param _builtins.str summary_only_variable: Variable name
        """
        if as_set_path is not None:
            pulumi.set(__self__, "as_set_path", as_set_path)
        if as_set_path_variable is not None:
            pulumi.set(__self__, "as_set_path_variable", as_set_path_variable)
        if optional is not None:
            pulumi.set(__self__, "optional", optional)
        if prefix is not None:
            pulumi.set(__self__, "prefix", prefix)
        if prefix_variable is not None:
            pulumi.set(__self__, "prefix_variable", prefix_variable)
        if summary_only is not None:
            pulumi.set(__self__, "summary_only", summary_only)
        if summary_only_variable is not None:
            pulumi.set(__self__, "summary_only_variable", summary_only_variable)

    @_builtins.property
    @pulumi.getter(name="asSetPath")
    def as_set_path(self) -> Optional[_builtins.bool]:
        """
        Set AS set path information
          - Default value: `false`
        """
        return pulumi.get(self, "as_set_path")

    @_builtins.property
    @pulumi.getter(name="asSetPathVariable")
    def as_set_path_variable(self) -> Optional[_builtins.str]:
        """
        Variable name
        """
        return pulumi.get(self, "as_set_path_variable")

    @_builtins.property
    @pulumi.getter
    def optional(self) -> Optional[_builtins.bool]:
        """
        Indicates if list item is considered optional.
        """
        return pulumi.get(self, "optional")

    @_builtins.property
    @pulumi.getter
    def prefix(self) -> Optional[_builtins.str]:
        """
        Configure the IPv6 prefixes to aggregate
        """
        return pulumi.get(self, "prefix")

    @_builtins.property
    @pulumi.getter(name="prefixVariable")
    def prefix_variable(self) -> Optional[_builtins.str]:
        """
        Variable name
        """
        return pulumi.get(self, "prefix_variable")

    @_builtins.property
    @pulumi.getter(name="summaryOnly")
    def summary_only(self) -> Optional[_builtins.bool]:
        """
        Filter out more specific routes from updates
          - Default value: `false`
        """
        return pulumi.get(self, "summary_only")

    @_builtins.property
    @pulumi.getter(name="summaryOnlyVariable")
    def summary_only_variable(self) -> Optional[_builtins.str]:
        """
        Variable name
        """
        return pulumi.get(self, "summary_only_variable")


@pulumi.output_type
class CiscoBgpFeatureTemplateAddressFamilyIpv6Network(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "prefixVariable":
            suggest = "prefix_variable"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in CiscoBgpFeatureTemplateAddressFamilyIpv6Network. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        CiscoBgpFeatureTemplateAddressFamilyIpv6Network.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        CiscoBgpFeatureTemplateAddressFamilyIpv6Network.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 optional: Optional[_builtins.bool] = None,
                 prefix: Optional[_builtins.str] = None,
                 prefix_variable: Optional[_builtins.str] = None):
        """
        :param _builtins.bool optional: Indicates if list item is considered optional.
        :param _builtins.str prefix: Configure the prefixes for BGP to announce
        :param _builtins.str prefix_variable: Variable name
        """
        if optional is not None:
            pulumi.set(__self__, "optional", optional)
        if prefix is not None:
            pulumi.set(__self__, "prefix", prefix)
        if prefix_variable is not None:
            pulumi.set(__self__, "prefix_variable", prefix_variable)

    @_builtins.property
    @pulumi.getter
    def optional(self) -> Optional[_builtins.bool]:
        """
        Indicates if list item is considered optional.
        """
        return pulumi.get(self, "optional")

    @_builtins.property
    @pulumi.getter
    def prefix(self) -> Optional[_builtins.str]:
        """
        Configure the prefixes for BGP to announce
        """
        return pulumi.get(self, "prefix")

    @_builtins.property
    @pulumi.getter(name="prefixVariable")
    def prefix_variable(self) -> Optional[_builtins.str]:
        """
        Variable name
        """
        return pulumi.get(self, "prefix_variable")


@pulumi.output_type
class CiscoBgpFeatureTemplateAddressFamilyRedistributeRoute(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "protocolVariable":
            suggest = "protocol_variable"
        elif key == "routePolicy":
            suggest = "route_policy"
        elif key == "routePolicyVariable":
            suggest = "route_policy_variable"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in CiscoBgpFeatureTemplateAddressFamilyRedistributeRoute. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        CiscoBgpFeatureTemplateAddressFamilyRedistributeRoute.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        CiscoBgpFeatureTemplateAddressFamilyRedistributeRoute.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 optional: Optional[_builtins.bool] = None,
                 protocol: Optional[_builtins.str] = None,
                 protocol_variable: Optional[_builtins.str] = None,
                 route_policy: Optional[_builtins.str] = None,
                 route_policy_variable: Optional[_builtins.str] = None):
        """
        :param _builtins.bool optional: Indicates if list item is considered optional.
        :param _builtins.str protocol: Set the protocol to redistribute routes from
                 - Choices: `static`, `connected`, `ospf`, `ospfv3`, `omp`, `eigrp`, `nat`
        :param _builtins.str protocol_variable: Variable name
        :param _builtins.str route_policy: Configure policy to apply to prefixes received from BGP neighbor
        :param _builtins.str route_policy_variable: Variable name
        """
        if optional is not None:
            pulumi.set(__self__, "optional", optional)
        if protocol is not None:
            pulumi.set(__self__, "protocol", protocol)
        if protocol_variable is not None:
            pulumi.set(__self__, "protocol_variable", protocol_variable)
        if route_policy is not None:
            pulumi.set(__self__, "route_policy", route_policy)
        if route_policy_variable is not None:
            pulumi.set(__self__, "route_policy_variable", route_policy_variable)

    @_builtins.property
    @pulumi.getter
    def optional(self) -> Optional[_builtins.bool]:
        """
        Indicates if list item is considered optional.
        """
        return pulumi.get(self, "optional")

    @_builtins.property
    @pulumi.getter
    def protocol(self) -> Optional[_builtins.str]:
        """
        Set the protocol to redistribute routes from
          - Choices: `static`, `connected`, `ospf`, `ospfv3`, `omp`, `eigrp`, `nat`
        """
        return pulumi.get(self, "protocol")

    @_builtins.property
    @pulumi.getter(name="protocolVariable")
    def protocol_variable(self) -> Optional[_builtins.str]:
        """
        Variable name
        """
        return pulumi.get(self, "protocol_variable")

    @_builtins.property
    @pulumi.getter(name="routePolicy")
    def route_policy(self) -> Optional[_builtins.str]:
        """
        Configure policy to apply to prefixes received from BGP neighbor
        """
        return pulumi.get(self, "route_policy")

    @_builtins.property
    @pulumi.getter(name="routePolicyVariable")
    def route_policy_variable(self) -> Optional[_builtins.str]:
        """
        Variable name
        """
        return pulumi.get(self, "route_policy_variable")


@pulumi.output_type
class CiscoBgpFeatureTemplateIpv4Neighbor(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "addressFamilies":
            suggest = "address_families"
        elif key == "addressVariable":
            suggest = "address_variable"
        elif key == "allowAsIn":
            suggest = "allow_as_in"
        elif key == "allowAsInVariable":
            suggest = "allow_as_in_variable"
        elif key == "asOverride":
            suggest = "as_override"
        elif key == "asOverrideVariable":
            suggest = "as_override_variable"
        elif key == "descriptionVariable":
            suggest = "description_variable"
        elif key == "ebgpMultihop":
            suggest = "ebgp_multihop"
        elif key == "ebgpMultihopVariable":
            suggest = "ebgp_multihop_variable"
        elif key == "holdtimeVariable":
            suggest = "holdtime_variable"
        elif key == "keepaliveVariable":
            suggest = "keepalive_variable"
        elif key == "nextHopSelf":
            suggest = "next_hop_self"
        elif key == "nextHopSelfVariable":
            suggest = "next_hop_self_variable"
        elif key == "passwordVariable":
            suggest = "password_variable"
        elif key == "remoteAs":
            suggest = "remote_as"
        elif key == "remoteAsVariable":
            suggest = "remote_as_variable"
        elif key == "sendCommunity":
            suggest = "send_community"
        elif key == "sendCommunityVariable":
            suggest = "send_community_variable"
        elif key == "sendExtCommunity":
            suggest = "send_ext_community"
        elif key == "sendExtCommunityVariable":
            suggest = "send_ext_community_variable"
        elif key == "sendLabel":
            suggest = "send_label"
        elif key == "sendLabelExplicit":
            suggest = "send_label_explicit"
        elif key == "sendLabelExplicitVariable":
            suggest = "send_label_explicit_variable"
        elif key == "sendLabelVariable":
            suggest = "send_label_variable"
        elif key == "shutdownVariable":
            suggest = "shutdown_variable"
        elif key == "sourceInterface":
            suggest = "source_interface"
        elif key == "sourceInterfaceVariable":
            suggest = "source_interface_variable"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in CiscoBgpFeatureTemplateIpv4Neighbor. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        CiscoBgpFeatureTemplateIpv4Neighbor.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        CiscoBgpFeatureTemplateIpv4Neighbor.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 address: Optional[_builtins.str] = None,
                 address_families: Optional[Sequence['outputs.CiscoBgpFeatureTemplateIpv4NeighborAddressFamily']] = None,
                 address_variable: Optional[_builtins.str] = None,
                 allow_as_in: Optional[_builtins.int] = None,
                 allow_as_in_variable: Optional[_builtins.str] = None,
                 as_override: Optional[_builtins.bool] = None,
                 as_override_variable: Optional[_builtins.str] = None,
                 description: Optional[_builtins.str] = None,
                 description_variable: Optional[_builtins.str] = None,
                 ebgp_multihop: Optional[_builtins.int] = None,
                 ebgp_multihop_variable: Optional[_builtins.str] = None,
                 holdtime: Optional[_builtins.int] = None,
                 holdtime_variable: Optional[_builtins.str] = None,
                 keepalive: Optional[_builtins.int] = None,
                 keepalive_variable: Optional[_builtins.str] = None,
                 next_hop_self: Optional[_builtins.bool] = None,
                 next_hop_self_variable: Optional[_builtins.str] = None,
                 optional: Optional[_builtins.bool] = None,
                 password: Optional[_builtins.str] = None,
                 password_variable: Optional[_builtins.str] = None,
                 remote_as: Optional[_builtins.str] = None,
                 remote_as_variable: Optional[_builtins.str] = None,
                 send_community: Optional[_builtins.bool] = None,
                 send_community_variable: Optional[_builtins.str] = None,
                 send_ext_community: Optional[_builtins.bool] = None,
                 send_ext_community_variable: Optional[_builtins.str] = None,
                 send_label: Optional[_builtins.bool] = None,
                 send_label_explicit: Optional[_builtins.bool] = None,
                 send_label_explicit_variable: Optional[_builtins.str] = None,
                 send_label_variable: Optional[_builtins.str] = None,
                 shutdown: Optional[_builtins.bool] = None,
                 shutdown_variable: Optional[_builtins.str] = None,
                 source_interface: Optional[_builtins.str] = None,
                 source_interface_variable: Optional[_builtins.str] = None):
        """
        :param _builtins.str address: Set neighbor address
        :param Sequence['CiscoBgpFeatureTemplateIpv4NeighborAddressFamilyArgs'] address_families: Set BGP address family
        :param _builtins.str address_variable: Variable name
        :param _builtins.int allow_as_in: As Number
                 - Range: `1`-`10`
        :param _builtins.str allow_as_in_variable: Variable name
        :param _builtins.bool as_override: As Override
                 - Default value: `false`
        :param _builtins.str as_override_variable: Variable name
        :param _builtins.str description: Set description
        :param _builtins.str description_variable: Variable name
        :param _builtins.int ebgp_multihop: Set TTL value for peers that are not directly connected
                 - Range: `1`-`255`
                 - Default value: `1`
        :param _builtins.str ebgp_multihop_variable: Variable name
        :param _builtins.int holdtime: Set how long to wait since receiving a keepalive message to consider BGP peer unavailable
                 - Range: `0`-`65535`
        :param _builtins.str holdtime_variable: Variable name
        :param _builtins.int keepalive: Set how often to advertise keepalive messages to BGP peer
                 - Range: `0`-`65535`
        :param _builtins.str keepalive_variable: Variable name
        :param _builtins.bool next_hop_self: Set router to be next hop for routes advertised to neighbor
                 - Default value: `false`
        :param _builtins.str next_hop_self_variable: Variable name
        :param _builtins.bool optional: Indicates if list item is considered optional.
        :param _builtins.str password: Set MD5 password on TCP connection with BGP peer
        :param _builtins.str password_variable: Variable name
        :param _builtins.str remote_as: Set remote autonomous system number
        :param _builtins.str remote_as_variable: Variable name
        :param _builtins.bool send_community: Send community attribute
                 - Default value: `true`
        :param _builtins.str send_community_variable: Variable name
        :param _builtins.bool send_ext_community: Send extended community attribute
                 - Default value: `true`
        :param _builtins.str send_ext_community_variable: Variable name
        :param _builtins.bool send_label: Send label
                 - Default value: `false`
        :param _builtins.bool send_label_explicit: Send label
                 - Default value: `false`
        :param _builtins.str send_label_explicit_variable: Variable name
        :param _builtins.str send_label_variable: Variable name
        :param _builtins.bool shutdown: Enable or disable a BGP neighbor
                 - Default value: `false`
        :param _builtins.str shutdown_variable: Variable name
        :param _builtins.str source_interface: Set IP address of interface for TCP connection to BGP neighbor
        :param _builtins.str source_interface_variable: Variable name
        """
        if address is not None:
            pulumi.set(__self__, "address", address)
        if address_families is not None:
            pulumi.set(__self__, "address_families", address_families)
        if address_variable is not None:
            pulumi.set(__self__, "address_variable", address_variable)
        if allow_as_in is not None:
            pulumi.set(__self__, "allow_as_in", allow_as_in)
        if allow_as_in_variable is not None:
            pulumi.set(__self__, "allow_as_in_variable", allow_as_in_variable)
        if as_override is not None:
            pulumi.set(__self__, "as_override", as_override)
        if as_override_variable is not None:
            pulumi.set(__self__, "as_override_variable", as_override_variable)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if description_variable is not None:
            pulumi.set(__self__, "description_variable", description_variable)
        if ebgp_multihop is not None:
            pulumi.set(__self__, "ebgp_multihop", ebgp_multihop)
        if ebgp_multihop_variable is not None:
            pulumi.set(__self__, "ebgp_multihop_variable", ebgp_multihop_variable)
        if holdtime is not None:
            pulumi.set(__self__, "holdtime", holdtime)
        if holdtime_variable is not None:
            pulumi.set(__self__, "holdtime_variable", holdtime_variable)
        if keepalive is not None:
            pulumi.set(__self__, "keepalive", keepalive)
        if keepalive_variable is not None:
            pulumi.set(__self__, "keepalive_variable", keepalive_variable)
        if next_hop_self is not None:
            pulumi.set(__self__, "next_hop_self", next_hop_self)
        if next_hop_self_variable is not None:
            pulumi.set(__self__, "next_hop_self_variable", next_hop_self_variable)
        if optional is not None:
            pulumi.set(__self__, "optional", optional)
        if password is not None:
            pulumi.set(__self__, "password", password)
        if password_variable is not None:
            pulumi.set(__self__, "password_variable", password_variable)
        if remote_as is not None:
            pulumi.set(__self__, "remote_as", remote_as)
        if remote_as_variable is not None:
            pulumi.set(__self__, "remote_as_variable", remote_as_variable)
        if send_community is not None:
            pulumi.set(__self__, "send_community", send_community)
        if send_community_variable is not None:
            pulumi.set(__self__, "send_community_variable", send_community_variable)
        if send_ext_community is not None:
            pulumi.set(__self__, "send_ext_community", send_ext_community)
        if send_ext_community_variable is not None:
            pulumi.set(__self__, "send_ext_community_variable", send_ext_community_variable)
        if send_label is not None:
            pulumi.set(__self__, "send_label", send_label)
        if send_label_explicit is not None:
            pulumi.set(__self__, "send_label_explicit", send_label_explicit)
        if send_label_explicit_variable is not None:
            pulumi.set(__self__, "send_label_explicit_variable", send_label_explicit_variable)
        if send_label_variable is not None:
            pulumi.set(__self__, "send_label_variable", send_label_variable)
        if shutdown is not None:
            pulumi.set(__self__, "shutdown", shutdown)
        if shutdown_variable is not None:
            pulumi.set(__self__, "shutdown_variable", shutdown_variable)
        if source_interface is not None:
            pulumi.set(__self__, "source_interface", source_interface)
        if source_interface_variable is not None:
            pulumi.set(__self__, "source_interface_variable", source_interface_variable)

    @_builtins.property
    @pulumi.getter
    def address(self) -> Optional[_builtins.str]:
        """
        Set neighbor address
        """
        return pulumi.get(self, "address")

    @_builtins.property
    @pulumi.getter(name="addressFamilies")
    def address_families(self) -> Optional[Sequence['outputs.CiscoBgpFeatureTemplateIpv4NeighborAddressFamily']]:
        """
        Set BGP address family
        """
        return pulumi.get(self, "address_families")

    @_builtins.property
    @pulumi.getter(name="addressVariable")
    def address_variable(self) -> Optional[_builtins.str]:
        """
        Variable name
        """
        return pulumi.get(self, "address_variable")

    @_builtins.property
    @pulumi.getter(name="allowAsIn")
    def allow_as_in(self) -> Optional[_builtins.int]:
        """
        As Number
          - Range: `1`-`10`
        """
        return pulumi.get(self, "allow_as_in")

    @_builtins.property
    @pulumi.getter(name="allowAsInVariable")
    def allow_as_in_variable(self) -> Optional[_builtins.str]:
        """
        Variable name
        """
        return pulumi.get(self, "allow_as_in_variable")

    @_builtins.property
    @pulumi.getter(name="asOverride")
    def as_override(self) -> Optional[_builtins.bool]:
        """
        As Override
          - Default value: `false`
        """
        return pulumi.get(self, "as_override")

    @_builtins.property
    @pulumi.getter(name="asOverrideVariable")
    def as_override_variable(self) -> Optional[_builtins.str]:
        """
        Variable name
        """
        return pulumi.get(self, "as_override_variable")

    @_builtins.property
    @pulumi.getter
    def description(self) -> Optional[_builtins.str]:
        """
        Set description
        """
        return pulumi.get(self, "description")

    @_builtins.property
    @pulumi.getter(name="descriptionVariable")
    def description_variable(self) -> Optional[_builtins.str]:
        """
        Variable name
        """
        return pulumi.get(self, "description_variable")

    @_builtins.property
    @pulumi.getter(name="ebgpMultihop")
    def ebgp_multihop(self) -> Optional[_builtins.int]:
        """
        Set TTL value for peers that are not directly connected
          - Range: `1`-`255`
          - Default value: `1`
        """
        return pulumi.get(self, "ebgp_multihop")

    @_builtins.property
    @pulumi.getter(name="ebgpMultihopVariable")
    def ebgp_multihop_variable(self) -> Optional[_builtins.str]:
        """
        Variable name
        """
        return pulumi.get(self, "ebgp_multihop_variable")

    @_builtins.property
    @pulumi.getter
    def holdtime(self) -> Optional[_builtins.int]:
        """
        Set how long to wait since receiving a keepalive message to consider BGP peer unavailable
          - Range: `0`-`65535`
        """
        return pulumi.get(self, "holdtime")

    @_builtins.property
    @pulumi.getter(name="holdtimeVariable")
    def holdtime_variable(self) -> Optional[_builtins.str]:
        """
        Variable name
        """
        return pulumi.get(self, "holdtime_variable")

    @_builtins.property
    @pulumi.getter
    def keepalive(self) -> Optional[_builtins.int]:
        """
        Set how often to advertise keepalive messages to BGP peer
          - Range: `0`-`65535`
        """
        return pulumi.get(self, "keepalive")

    @_builtins.property
    @pulumi.getter(name="keepaliveVariable")
    def keepalive_variable(self) -> Optional[_builtins.str]:
        """
        Variable name
        """
        return pulumi.get(self, "keepalive_variable")

    @_builtins.property
    @pulumi.getter(name="nextHopSelf")
    def next_hop_self(self) -> Optional[_builtins.bool]:
        """
        Set router to be next hop for routes advertised to neighbor
          - Default value: `false`
        """
        return pulumi.get(self, "next_hop_self")

    @_builtins.property
    @pulumi.getter(name="nextHopSelfVariable")
    def next_hop_self_variable(self) -> Optional[_builtins.str]:
        """
        Variable name
        """
        return pulumi.get(self, "next_hop_self_variable")

    @_builtins.property
    @pulumi.getter
    def optional(self) -> Optional[_builtins.bool]:
        """
        Indicates if list item is considered optional.
        """
        return pulumi.get(self, "optional")

    @_builtins.property
    @pulumi.getter
    def password(self) -> Optional[_builtins.str]:
        """
        Set MD5 password on TCP connection with BGP peer
        """
        return pulumi.get(self, "password")

    @_builtins.property
    @pulumi.getter(name="passwordVariable")
    def password_variable(self) -> Optional[_builtins.str]:
        """
        Variable name
        """
        return pulumi.get(self, "password_variable")

    @_builtins.property
    @pulumi.getter(name="remoteAs")
    def remote_as(self) -> Optional[_builtins.str]:
        """
        Set remote autonomous system number
        """
        return pulumi.get(self, "remote_as")

    @_builtins.property
    @pulumi.getter(name="remoteAsVariable")
    def remote_as_variable(self) -> Optional[_builtins.str]:
        """
        Variable name
        """
        return pulumi.get(self, "remote_as_variable")

    @_builtins.property
    @pulumi.getter(name="sendCommunity")
    def send_community(self) -> Optional[_builtins.bool]:
        """
        Send community attribute
          - Default value: `true`
        """
        return pulumi.get(self, "send_community")

    @_builtins.property
    @pulumi.getter(name="sendCommunityVariable")
    def send_community_variable(self) -> Optional[_builtins.str]:
        """
        Variable name
        """
        return pulumi.get(self, "send_community_variable")

    @_builtins.property
    @pulumi.getter(name="sendExtCommunity")
    def send_ext_community(self) -> Optional[_builtins.bool]:
        """
        Send extended community attribute
          - Default value: `true`
        """
        return pulumi.get(self, "send_ext_community")

    @_builtins.property
    @pulumi.getter(name="sendExtCommunityVariable")
    def send_ext_community_variable(self) -> Optional[_builtins.str]:
        """
        Variable name
        """
        return pulumi.get(self, "send_ext_community_variable")

    @_builtins.property
    @pulumi.getter(name="sendLabel")
    def send_label(self) -> Optional[_builtins.bool]:
        """
        Send label
          - Default value: `false`
        """
        return pulumi.get(self, "send_label")

    @_builtins.property
    @pulumi.getter(name="sendLabelExplicit")
    def send_label_explicit(self) -> Optional[_builtins.bool]:
        """
        Send label
          - Default value: `false`
        """
        return pulumi.get(self, "send_label_explicit")

    @_builtins.property
    @pulumi.getter(name="sendLabelExplicitVariable")
    def send_label_explicit_variable(self) -> Optional[_builtins.str]:
        """
        Variable name
        """
        return pulumi.get(self, "send_label_explicit_variable")

    @_builtins.property
    @pulumi.getter(name="sendLabelVariable")
    def send_label_variable(self) -> Optional[_builtins.str]:
        """
        Variable name
        """
        return pulumi.get(self, "send_label_variable")

    @_builtins.property
    @pulumi.getter
    def shutdown(self) -> Optional[_builtins.bool]:
        """
        Enable or disable a BGP neighbor
          - Default value: `false`
        """
        return pulumi.get(self, "shutdown")

    @_builtins.property
    @pulumi.getter(name="shutdownVariable")
    def shutdown_variable(self) -> Optional[_builtins.str]:
        """
        Variable name
        """
        return pulumi.get(self, "shutdown_variable")

    @_builtins.property
    @pulumi.getter(name="sourceInterface")
    def source_interface(self) -> Optional[_builtins.str]:
        """
        Set IP address of interface for TCP connection to BGP neighbor
        """
        return pulumi.get(self, "source_interface")

    @_builtins.property
    @pulumi.getter(name="sourceInterfaceVariable")
    def source_interface_variable(self) -> Optional[_builtins.str]:
        """
        Variable name
        """
        return pulumi.get(self, "source_interface_variable")


@pulumi.output_type
class CiscoBgpFeatureTemplateIpv4NeighborAddressFamily(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "familyType":
            suggest = "family_type"
        elif key == "maximumPrefixes":
            suggest = "maximum_prefixes"
        elif key == "maximumPrefixesRestart":
            suggest = "maximum_prefixes_restart"
        elif key == "maximumPrefixesRestartVariable":
            suggest = "maximum_prefixes_restart_variable"
        elif key == "maximumPrefixesThreshold":
            suggest = "maximum_prefixes_threshold"
        elif key == "maximumPrefixesThresholdVariable":
            suggest = "maximum_prefixes_threshold_variable"
        elif key == "maximumPrefixesVariable":
            suggest = "maximum_prefixes_variable"
        elif key == "maximumPrefixesWarningOnly":
            suggest = "maximum_prefixes_warning_only"
        elif key == "maximumPrefixesWarningOnlyVariable":
            suggest = "maximum_prefixes_warning_only_variable"
        elif key == "routePolicies":
            suggest = "route_policies"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in CiscoBgpFeatureTemplateIpv4NeighborAddressFamily. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        CiscoBgpFeatureTemplateIpv4NeighborAddressFamily.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        CiscoBgpFeatureTemplateIpv4NeighborAddressFamily.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 family_type: Optional[_builtins.str] = None,
                 maximum_prefixes: Optional[_builtins.int] = None,
                 maximum_prefixes_restart: Optional[_builtins.int] = None,
                 maximum_prefixes_restart_variable: Optional[_builtins.str] = None,
                 maximum_prefixes_threshold: Optional[_builtins.int] = None,
                 maximum_prefixes_threshold_variable: Optional[_builtins.str] = None,
                 maximum_prefixes_variable: Optional[_builtins.str] = None,
                 maximum_prefixes_warning_only: Optional[_builtins.bool] = None,
                 maximum_prefixes_warning_only_variable: Optional[_builtins.str] = None,
                 optional: Optional[_builtins.bool] = None,
                 route_policies: Optional[Sequence['outputs.CiscoBgpFeatureTemplateIpv4NeighborAddressFamilyRoutePolicy']] = None):
        """
        :param _builtins.str family_type: Set BGP address family
                 - Choices: `ipv4-unicast`, `vpnv4-unicast`, `vpnv6-unicast`
        :param _builtins.int maximum_prefixes: Set maximum number of prefixes accepted from BGP peer
                 - Range: `0`-`4294967295`
        :param _builtins.int maximum_prefixes_restart: Set when to restart BGP connection if threshold is exceeded
                 - Range: `0`-`65535`
        :param _builtins.str maximum_prefixes_restart_variable: Variable name
        :param _builtins.int maximum_prefixes_threshold: Set threshold at which to generate a warning message
                 - Range: `0`-`100`
        :param _builtins.str maximum_prefixes_threshold_variable: Variable name
        :param _builtins.str maximum_prefixes_variable: Variable name
        :param _builtins.bool maximum_prefixes_warning_only: Display only a warning message when threshold is exceeded
                 - Default value: `false`
        :param _builtins.str maximum_prefixes_warning_only_variable: Variable name
        :param _builtins.bool optional: Indicates if list item is considered optional.
        :param Sequence['CiscoBgpFeatureTemplateIpv4NeighborAddressFamilyRoutePolicyArgs'] route_policies: Select route policy to apply to prefixes received from BGP neighbor
        """
        if family_type is not None:
            pulumi.set(__self__, "family_type", family_type)
        if maximum_prefixes is not None:
            pulumi.set(__self__, "maximum_prefixes", maximum_prefixes)
        if maximum_prefixes_restart is not None:
            pulumi.set(__self__, "maximum_prefixes_restart", maximum_prefixes_restart)
        if maximum_prefixes_restart_variable is not None:
            pulumi.set(__self__, "maximum_prefixes_restart_variable", maximum_prefixes_restart_variable)
        if maximum_prefixes_threshold is not None:
            pulumi.set(__self__, "maximum_prefixes_threshold", maximum_prefixes_threshold)
        if maximum_prefixes_threshold_variable is not None:
            pulumi.set(__self__, "maximum_prefixes_threshold_variable", maximum_prefixes_threshold_variable)
        if maximum_prefixes_variable is not None:
            pulumi.set(__self__, "maximum_prefixes_variable", maximum_prefixes_variable)
        if maximum_prefixes_warning_only is not None:
            pulumi.set(__self__, "maximum_prefixes_warning_only", maximum_prefixes_warning_only)
        if maximum_prefixes_warning_only_variable is not None:
            pulumi.set(__self__, "maximum_prefixes_warning_only_variable", maximum_prefixes_warning_only_variable)
        if optional is not None:
            pulumi.set(__self__, "optional", optional)
        if route_policies is not None:
            pulumi.set(__self__, "route_policies", route_policies)

    @_builtins.property
    @pulumi.getter(name="familyType")
    def family_type(self) -> Optional[_builtins.str]:
        """
        Set BGP address family
          - Choices: `ipv4-unicast`, `vpnv4-unicast`, `vpnv6-unicast`
        """
        return pulumi.get(self, "family_type")

    @_builtins.property
    @pulumi.getter(name="maximumPrefixes")
    def maximum_prefixes(self) -> Optional[_builtins.int]:
        """
        Set maximum number of prefixes accepted from BGP peer
          - Range: `0`-`4294967295`
        """
        return pulumi.get(self, "maximum_prefixes")

    @_builtins.property
    @pulumi.getter(name="maximumPrefixesRestart")
    def maximum_prefixes_restart(self) -> Optional[_builtins.int]:
        """
        Set when to restart BGP connection if threshold is exceeded
          - Range: `0`-`65535`
        """
        return pulumi.get(self, "maximum_prefixes_restart")

    @_builtins.property
    @pulumi.getter(name="maximumPrefixesRestartVariable")
    def maximum_prefixes_restart_variable(self) -> Optional[_builtins.str]:
        """
        Variable name
        """
        return pulumi.get(self, "maximum_prefixes_restart_variable")

    @_builtins.property
    @pulumi.getter(name="maximumPrefixesThreshold")
    def maximum_prefixes_threshold(self) -> Optional[_builtins.int]:
        """
        Set threshold at which to generate a warning message
          - Range: `0`-`100`
        """
        return pulumi.get(self, "maximum_prefixes_threshold")

    @_builtins.property
    @pulumi.getter(name="maximumPrefixesThresholdVariable")
    def maximum_prefixes_threshold_variable(self) -> Optional[_builtins.str]:
        """
        Variable name
        """
        return pulumi.get(self, "maximum_prefixes_threshold_variable")

    @_builtins.property
    @pulumi.getter(name="maximumPrefixesVariable")
    def maximum_prefixes_variable(self) -> Optional[_builtins.str]:
        """
        Variable name
        """
        return pulumi.get(self, "maximum_prefixes_variable")

    @_builtins.property
    @pulumi.getter(name="maximumPrefixesWarningOnly")
    def maximum_prefixes_warning_only(self) -> Optional[_builtins.bool]:
        """
        Display only a warning message when threshold is exceeded
          - Default value: `false`
        """
        return pulumi.get(self, "maximum_prefixes_warning_only")

    @_builtins.property
    @pulumi.getter(name="maximumPrefixesWarningOnlyVariable")
    def maximum_prefixes_warning_only_variable(self) -> Optional[_builtins.str]:
        """
        Variable name
        """
        return pulumi.get(self, "maximum_prefixes_warning_only_variable")

    @_builtins.property
    @pulumi.getter
    def optional(self) -> Optional[_builtins.bool]:
        """
        Indicates if list item is considered optional.
        """
        return pulumi.get(self, "optional")

    @_builtins.property
    @pulumi.getter(name="routePolicies")
    def route_policies(self) -> Optional[Sequence['outputs.CiscoBgpFeatureTemplateIpv4NeighborAddressFamilyRoutePolicy']]:
        """
        Select route policy to apply to prefixes received from BGP neighbor
        """
        return pulumi.get(self, "route_policies")


@pulumi.output_type
class CiscoBgpFeatureTemplateIpv4NeighborAddressFamilyRoutePolicy(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "policyName":
            suggest = "policy_name"
        elif key == "policyNameVariable":
            suggest = "policy_name_variable"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in CiscoBgpFeatureTemplateIpv4NeighborAddressFamilyRoutePolicy. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        CiscoBgpFeatureTemplateIpv4NeighborAddressFamilyRoutePolicy.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        CiscoBgpFeatureTemplateIpv4NeighborAddressFamilyRoutePolicy.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 direction: Optional[_builtins.str] = None,
                 optional: Optional[_builtins.bool] = None,
                 policy_name: Optional[_builtins.str] = None,
                 policy_name_variable: Optional[_builtins.str] = None):
        """
        :param _builtins.str direction: Set direction for applying route policy
                 - Choices: `in`, `out`
        :param _builtins.bool optional: Indicates if list item is considered optional.
        :param _builtins.str policy_name: Configure name of route policy
        :param _builtins.str policy_name_variable: Variable name
        """
        if direction is not None:
            pulumi.set(__self__, "direction", direction)
        if optional is not None:
            pulumi.set(__self__, "optional", optional)
        if policy_name is not None:
            pulumi.set(__self__, "policy_name", policy_name)
        if policy_name_variable is not None:
            pulumi.set(__self__, "policy_name_variable", policy_name_variable)

    @_builtins.property
    @pulumi.getter
    def direction(self) -> Optional[_builtins.str]:
        """
        Set direction for applying route policy
          - Choices: `in`, `out`
        """
        return pulumi.get(self, "direction")

    @_builtins.property
    @pulumi.getter
    def optional(self) -> Optional[_builtins.bool]:
        """
        Indicates if list item is considered optional.
        """
        return pulumi.get(self, "optional")

    @_builtins.property
    @pulumi.getter(name="policyName")
    def policy_name(self) -> Optional[_builtins.str]:
        """
        Configure name of route policy
        """
        return pulumi.get(self, "policy_name")

    @_builtins.property
    @pulumi.getter(name="policyNameVariable")
    def policy_name_variable(self) -> Optional[_builtins.str]:
        """
        Variable name
        """
        return pulumi.get(self, "policy_name_variable")


@pulumi.output_type
class CiscoBgpFeatureTemplateIpv4RouteTarget(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "vpnId":
            suggest = "vpn_id"
        elif key == "vpnIdVariable":
            suggest = "vpn_id_variable"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in CiscoBgpFeatureTemplateIpv4RouteTarget. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        CiscoBgpFeatureTemplateIpv4RouteTarget.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        CiscoBgpFeatureTemplateIpv4RouteTarget.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 exports: Optional[Sequence['outputs.CiscoBgpFeatureTemplateIpv4RouteTargetExport']] = None,
                 imports: Optional[Sequence['outputs.CiscoBgpFeatureTemplateIpv4RouteTargetImport']] = None,
                 optional: Optional[_builtins.bool] = None,
                 vpn_id: Optional[_builtins.int] = None,
                 vpn_id_variable: Optional[_builtins.str] = None):
        """
        :param Sequence['CiscoBgpFeatureTemplateIpv4RouteTargetExportArgs'] exports: Export Target-VPN community for IPV4
        :param Sequence['CiscoBgpFeatureTemplateIpv4RouteTargetImportArgs'] imports: Import Target-VPN community for IPV4
        :param _builtins.bool optional: Indicates if list item is considered optional.
        :param _builtins.int vpn_id: VPN ID for IPv4
                 - Range: `1`-`65527`
        :param _builtins.str vpn_id_variable: Variable name
        """
        if exports is not None:
            pulumi.set(__self__, "exports", exports)
        if imports is not None:
            pulumi.set(__self__, "imports", imports)
        if optional is not None:
            pulumi.set(__self__, "optional", optional)
        if vpn_id is not None:
            pulumi.set(__self__, "vpn_id", vpn_id)
        if vpn_id_variable is not None:
            pulumi.set(__self__, "vpn_id_variable", vpn_id_variable)

    @_builtins.property
    @pulumi.getter
    def exports(self) -> Optional[Sequence['outputs.CiscoBgpFeatureTemplateIpv4RouteTargetExport']]:
        """
        Export Target-VPN community for IPV4
        """
        return pulumi.get(self, "exports")

    @_builtins.property
    @pulumi.getter
    def imports(self) -> Optional[Sequence['outputs.CiscoBgpFeatureTemplateIpv4RouteTargetImport']]:
        """
        Import Target-VPN community for IPV4
        """
        return pulumi.get(self, "imports")

    @_builtins.property
    @pulumi.getter
    def optional(self) -> Optional[_builtins.bool]:
        """
        Indicates if list item is considered optional.
        """
        return pulumi.get(self, "optional")

    @_builtins.property
    @pulumi.getter(name="vpnId")
    def vpn_id(self) -> Optional[_builtins.int]:
        """
        VPN ID for IPv4
          - Range: `1`-`65527`
        """
        return pulumi.get(self, "vpn_id")

    @_builtins.property
    @pulumi.getter(name="vpnIdVariable")
    def vpn_id_variable(self) -> Optional[_builtins.str]:
        """
        Variable name
        """
        return pulumi.get(self, "vpn_id_variable")


@pulumi.output_type
class CiscoBgpFeatureTemplateIpv4RouteTargetExport(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "asnIp":
            suggest = "asn_ip"
        elif key == "asnIpVariable":
            suggest = "asn_ip_variable"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in CiscoBgpFeatureTemplateIpv4RouteTargetExport. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        CiscoBgpFeatureTemplateIpv4RouteTargetExport.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        CiscoBgpFeatureTemplateIpv4RouteTargetExport.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 asn_ip: Optional[_builtins.str] = None,
                 asn_ip_variable: Optional[_builtins.str] = None,
                 optional: Optional[_builtins.bool] = None):
        """
        :param _builtins.str asn_ip: asn-ip
        :param _builtins.str asn_ip_variable: Variable name
        :param _builtins.bool optional: Indicates if list item is considered optional.
        """
        if asn_ip is not None:
            pulumi.set(__self__, "asn_ip", asn_ip)
        if asn_ip_variable is not None:
            pulumi.set(__self__, "asn_ip_variable", asn_ip_variable)
        if optional is not None:
            pulumi.set(__self__, "optional", optional)

    @_builtins.property
    @pulumi.getter(name="asnIp")
    def asn_ip(self) -> Optional[_builtins.str]:
        """
        asn-ip
        """
        return pulumi.get(self, "asn_ip")

    @_builtins.property
    @pulumi.getter(name="asnIpVariable")
    def asn_ip_variable(self) -> Optional[_builtins.str]:
        """
        Variable name
        """
        return pulumi.get(self, "asn_ip_variable")

    @_builtins.property
    @pulumi.getter
    def optional(self) -> Optional[_builtins.bool]:
        """
        Indicates if list item is considered optional.
        """
        return pulumi.get(self, "optional")


@pulumi.output_type
class CiscoBgpFeatureTemplateIpv4RouteTargetImport(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "asnIp":
            suggest = "asn_ip"
        elif key == "asnIpVariable":
            suggest = "asn_ip_variable"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in CiscoBgpFeatureTemplateIpv4RouteTargetImport. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        CiscoBgpFeatureTemplateIpv4RouteTargetImport.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        CiscoBgpFeatureTemplateIpv4RouteTargetImport.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 asn_ip: Optional[_builtins.str] = None,
                 asn_ip_variable: Optional[_builtins.str] = None,
                 optional: Optional[_builtins.bool] = None):
        """
        :param _builtins.str asn_ip: asn-ip
        :param _builtins.str asn_ip_variable: Variable name
        :param _builtins.bool optional: Indicates if list item is considered optional.
        """
        if asn_ip is not None:
            pulumi.set(__self__, "asn_ip", asn_ip)
        if asn_ip_variable is not None:
            pulumi.set(__self__, "asn_ip_variable", asn_ip_variable)
        if optional is not None:
            pulumi.set(__self__, "optional", optional)

    @_builtins.property
    @pulumi.getter(name="asnIp")
    def asn_ip(self) -> Optional[_builtins.str]:
        """
        asn-ip
        """
        return pulumi.get(self, "asn_ip")

    @_builtins.property
    @pulumi.getter(name="asnIpVariable")
    def asn_ip_variable(self) -> Optional[_builtins.str]:
        """
        Variable name
        """
        return pulumi.get(self, "asn_ip_variable")

    @_builtins.property
    @pulumi.getter
    def optional(self) -> Optional[_builtins.bool]:
        """
        Indicates if list item is considered optional.
        """
        return pulumi.get(self, "optional")


@pulumi.output_type
class CiscoBgpFeatureTemplateIpv6Neighbor(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "addressFamilies":
            suggest = "address_families"
        elif key == "addressVariable":
            suggest = "address_variable"
        elif key == "allowAsIn":
            suggest = "allow_as_in"
        elif key == "allowAsInVariable":
            suggest = "allow_as_in_variable"
        elif key == "asOverride":
            suggest = "as_override"
        elif key == "asOverrideVariable":
            suggest = "as_override_variable"
        elif key == "descriptionVariable":
            suggest = "description_variable"
        elif key == "ebgpMultihop":
            suggest = "ebgp_multihop"
        elif key == "ebgpMultihopVariable":
            suggest = "ebgp_multihop_variable"
        elif key == "holdtimeVariable":
            suggest = "holdtime_variable"
        elif key == "keepaliveVariable":
            suggest = "keepalive_variable"
        elif key == "nextHopSelf":
            suggest = "next_hop_self"
        elif key == "nextHopSelfVariable":
            suggest = "next_hop_self_variable"
        elif key == "passwordVariable":
            suggest = "password_variable"
        elif key == "remoteAs":
            suggest = "remote_as"
        elif key == "remoteAsVariable":
            suggest = "remote_as_variable"
        elif key == "sendCommunity":
            suggest = "send_community"
        elif key == "sendCommunityVariable":
            suggest = "send_community_variable"
        elif key == "sendExtCommunity":
            suggest = "send_ext_community"
        elif key == "sendExtCommunityVariable":
            suggest = "send_ext_community_variable"
        elif key == "sendLabel":
            suggest = "send_label"
        elif key == "sendLabelExplicit":
            suggest = "send_label_explicit"
        elif key == "sendLabelExplicitVariable":
            suggest = "send_label_explicit_variable"
        elif key == "sendLabelVariable":
            suggest = "send_label_variable"
        elif key == "shutdownVariable":
            suggest = "shutdown_variable"
        elif key == "sourceInterface":
            suggest = "source_interface"
        elif key == "sourceInterfaceVariable":
            suggest = "source_interface_variable"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in CiscoBgpFeatureTemplateIpv6Neighbor. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        CiscoBgpFeatureTemplateIpv6Neighbor.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        CiscoBgpFeatureTemplateIpv6Neighbor.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 address: Optional[_builtins.str] = None,
                 address_families: Optional[Sequence['outputs.CiscoBgpFeatureTemplateIpv6NeighborAddressFamily']] = None,
                 address_variable: Optional[_builtins.str] = None,
                 allow_as_in: Optional[_builtins.int] = None,
                 allow_as_in_variable: Optional[_builtins.str] = None,
                 as_override: Optional[_builtins.bool] = None,
                 as_override_variable: Optional[_builtins.str] = None,
                 description: Optional[_builtins.str] = None,
                 description_variable: Optional[_builtins.str] = None,
                 ebgp_multihop: Optional[_builtins.int] = None,
                 ebgp_multihop_variable: Optional[_builtins.str] = None,
                 holdtime: Optional[_builtins.int] = None,
                 holdtime_variable: Optional[_builtins.str] = None,
                 keepalive: Optional[_builtins.int] = None,
                 keepalive_variable: Optional[_builtins.str] = None,
                 next_hop_self: Optional[_builtins.bool] = None,
                 next_hop_self_variable: Optional[_builtins.str] = None,
                 optional: Optional[_builtins.bool] = None,
                 password: Optional[_builtins.str] = None,
                 password_variable: Optional[_builtins.str] = None,
                 remote_as: Optional[_builtins.str] = None,
                 remote_as_variable: Optional[_builtins.str] = None,
                 send_community: Optional[_builtins.bool] = None,
                 send_community_variable: Optional[_builtins.str] = None,
                 send_ext_community: Optional[_builtins.bool] = None,
                 send_ext_community_variable: Optional[_builtins.str] = None,
                 send_label: Optional[_builtins.bool] = None,
                 send_label_explicit: Optional[_builtins.bool] = None,
                 send_label_explicit_variable: Optional[_builtins.str] = None,
                 send_label_variable: Optional[_builtins.str] = None,
                 shutdown: Optional[_builtins.bool] = None,
                 shutdown_variable: Optional[_builtins.str] = None,
                 source_interface: Optional[_builtins.str] = None,
                 source_interface_variable: Optional[_builtins.str] = None):
        """
        :param _builtins.str address: Set neighbor address
        :param Sequence['CiscoBgpFeatureTemplateIpv6NeighborAddressFamilyArgs'] address_families: Set BGP address family
        :param _builtins.str address_variable: Variable name
        :param _builtins.int allow_as_in: As Number
                 - Range: `1`-`10`
        :param _builtins.str allow_as_in_variable: Variable name
        :param _builtins.bool as_override: As Override
                 - Default value: `false`
        :param _builtins.str as_override_variable: Variable name
        :param _builtins.str description: Set description
        :param _builtins.str description_variable: Variable name
        :param _builtins.int ebgp_multihop: Set TTL value for peers that are not directly connected
                 - Range: `1`-`255`
                 - Default value: `1`
        :param _builtins.str ebgp_multihop_variable: Variable name
        :param _builtins.int holdtime: Set how long to wait since receiving a keepalive message to consider BGP peer unavailable
                 - Range: `0`-`65535`
        :param _builtins.str holdtime_variable: Variable name
        :param _builtins.int keepalive: Set how often to advertise keepalive messages to BGP peer
                 - Range: `0`-`65535`
        :param _builtins.str keepalive_variable: Variable name
        :param _builtins.bool next_hop_self: Set router to be next hop for routes advertised to neighbor
                 - Default value: `false`
        :param _builtins.str next_hop_self_variable: Variable name
        :param _builtins.bool optional: Indicates if list item is considered optional.
        :param _builtins.str password: Set MD5 password on TCP connection with BGP peer
        :param _builtins.str password_variable: Variable name
        :param _builtins.str remote_as: Set remote autonomous system number
        :param _builtins.str remote_as_variable: Variable name
        :param _builtins.bool send_community: Send community attribute
                 - Default value: `true`
        :param _builtins.str send_community_variable: Variable name
        :param _builtins.bool send_ext_community: Send extended community attribute
                 - Default value: `true`
        :param _builtins.str send_ext_community_variable: Variable name
        :param _builtins.bool send_label: Send label
                 - Default value: `false`
        :param _builtins.bool send_label_explicit: Send label Explicit
                 - Default value: `false`
        :param _builtins.str send_label_explicit_variable: Variable name
        :param _builtins.str send_label_variable: Variable name
        :param _builtins.bool shutdown: Enable or disable a BGP neighbor
                 - Default value: `false`
        :param _builtins.str shutdown_variable: Variable name
        :param _builtins.str source_interface: Set IP address of interface for TCP connection to BGP neighbor
        :param _builtins.str source_interface_variable: Variable name
        """
        if address is not None:
            pulumi.set(__self__, "address", address)
        if address_families is not None:
            pulumi.set(__self__, "address_families", address_families)
        if address_variable is not None:
            pulumi.set(__self__, "address_variable", address_variable)
        if allow_as_in is not None:
            pulumi.set(__self__, "allow_as_in", allow_as_in)
        if allow_as_in_variable is not None:
            pulumi.set(__self__, "allow_as_in_variable", allow_as_in_variable)
        if as_override is not None:
            pulumi.set(__self__, "as_override", as_override)
        if as_override_variable is not None:
            pulumi.set(__self__, "as_override_variable", as_override_variable)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if description_variable is not None:
            pulumi.set(__self__, "description_variable", description_variable)
        if ebgp_multihop is not None:
            pulumi.set(__self__, "ebgp_multihop", ebgp_multihop)
        if ebgp_multihop_variable is not None:
            pulumi.set(__self__, "ebgp_multihop_variable", ebgp_multihop_variable)
        if holdtime is not None:
            pulumi.set(__self__, "holdtime", holdtime)
        if holdtime_variable is not None:
            pulumi.set(__self__, "holdtime_variable", holdtime_variable)
        if keepalive is not None:
            pulumi.set(__self__, "keepalive", keepalive)
        if keepalive_variable is not None:
            pulumi.set(__self__, "keepalive_variable", keepalive_variable)
        if next_hop_self is not None:
            pulumi.set(__self__, "next_hop_self", next_hop_self)
        if next_hop_self_variable is not None:
            pulumi.set(__self__, "next_hop_self_variable", next_hop_self_variable)
        if optional is not None:
            pulumi.set(__self__, "optional", optional)
        if password is not None:
            pulumi.set(__self__, "password", password)
        if password_variable is not None:
            pulumi.set(__self__, "password_variable", password_variable)
        if remote_as is not None:
            pulumi.set(__self__, "remote_as", remote_as)
        if remote_as_variable is not None:
            pulumi.set(__self__, "remote_as_variable", remote_as_variable)
        if send_community is not None:
            pulumi.set(__self__, "send_community", send_community)
        if send_community_variable is not None:
            pulumi.set(__self__, "send_community_variable", send_community_variable)
        if send_ext_community is not None:
            pulumi.set(__self__, "send_ext_community", send_ext_community)
        if send_ext_community_variable is not None:
            pulumi.set(__self__, "send_ext_community_variable", send_ext_community_variable)
        if send_label is not None:
            pulumi.set(__self__, "send_label", send_label)
        if send_label_explicit is not None:
            pulumi.set(__self__, "send_label_explicit", send_label_explicit)
        if send_label_explicit_variable is not None:
            pulumi.set(__self__, "send_label_explicit_variable", send_label_explicit_variable)
        if send_label_variable is not None:
            pulumi.set(__self__, "send_label_variable", send_label_variable)
        if shutdown is not None:
            pulumi.set(__self__, "shutdown", shutdown)
        if shutdown_variable is not None:
            pulumi.set(__self__, "shutdown_variable", shutdown_variable)
        if source_interface is not None:
            pulumi.set(__self__, "source_interface", source_interface)
        if source_interface_variable is not None:
            pulumi.set(__self__, "source_interface_variable", source_interface_variable)

    @_builtins.property
    @pulumi.getter
    def address(self) -> Optional[_builtins.str]:
        """
        Set neighbor address
        """
        return pulumi.get(self, "address")

    @_builtins.property
    @pulumi.getter(name="addressFamilies")
    def address_families(self) -> Optional[Sequence['outputs.CiscoBgpFeatureTemplateIpv6NeighborAddressFamily']]:
        """
        Set BGP address family
        """
        return pulumi.get(self, "address_families")

    @_builtins.property
    @pulumi.getter(name="addressVariable")
    def address_variable(self) -> Optional[_builtins.str]:
        """
        Variable name
        """
        return pulumi.get(self, "address_variable")

    @_builtins.property
    @pulumi.getter(name="allowAsIn")
    def allow_as_in(self) -> Optional[_builtins.int]:
        """
        As Number
          - Range: `1`-`10`
        """
        return pulumi.get(self, "allow_as_in")

    @_builtins.property
    @pulumi.getter(name="allowAsInVariable")
    def allow_as_in_variable(self) -> Optional[_builtins.str]:
        """
        Variable name
        """
        return pulumi.get(self, "allow_as_in_variable")

    @_builtins.property
    @pulumi.getter(name="asOverride")
    def as_override(self) -> Optional[_builtins.bool]:
        """
        As Override
          - Default value: `false`
        """
        return pulumi.get(self, "as_override")

    @_builtins.property
    @pulumi.getter(name="asOverrideVariable")
    def as_override_variable(self) -> Optional[_builtins.str]:
        """
        Variable name
        """
        return pulumi.get(self, "as_override_variable")

    @_builtins.property
    @pulumi.getter
    def description(self) -> Optional[_builtins.str]:
        """
        Set description
        """
        return pulumi.get(self, "description")

    @_builtins.property
    @pulumi.getter(name="descriptionVariable")
    def description_variable(self) -> Optional[_builtins.str]:
        """
        Variable name
        """
        return pulumi.get(self, "description_variable")

    @_builtins.property
    @pulumi.getter(name="ebgpMultihop")
    def ebgp_multihop(self) -> Optional[_builtins.int]:
        """
        Set TTL value for peers that are not directly connected
          - Range: `1`-`255`
          - Default value: `1`
        """
        return pulumi.get(self, "ebgp_multihop")

    @_builtins.property
    @pulumi.getter(name="ebgpMultihopVariable")
    def ebgp_multihop_variable(self) -> Optional[_builtins.str]:
        """
        Variable name
        """
        return pulumi.get(self, "ebgp_multihop_variable")

    @_builtins.property
    @pulumi.getter
    def holdtime(self) -> Optional[_builtins.int]:
        """
        Set how long to wait since receiving a keepalive message to consider BGP peer unavailable
          - Range: `0`-`65535`
        """
        return pulumi.get(self, "holdtime")

    @_builtins.property
    @pulumi.getter(name="holdtimeVariable")
    def holdtime_variable(self) -> Optional[_builtins.str]:
        """
        Variable name
        """
        return pulumi.get(self, "holdtime_variable")

    @_builtins.property
    @pulumi.getter
    def keepalive(self) -> Optional[_builtins.int]:
        """
        Set how often to advertise keepalive messages to BGP peer
          - Range: `0`-`65535`
        """
        return pulumi.get(self, "keepalive")

    @_builtins.property
    @pulumi.getter(name="keepaliveVariable")
    def keepalive_variable(self) -> Optional[_builtins.str]:
        """
        Variable name
        """
        return pulumi.get(self, "keepalive_variable")

    @_builtins.property
    @pulumi.getter(name="nextHopSelf")
    def next_hop_self(self) -> Optional[_builtins.bool]:
        """
        Set router to be next hop for routes advertised to neighbor
          - Default value: `false`
        """
        return pulumi.get(self, "next_hop_self")

    @_builtins.property
    @pulumi.getter(name="nextHopSelfVariable")
    def next_hop_self_variable(self) -> Optional[_builtins.str]:
        """
        Variable name
        """
        return pulumi.get(self, "next_hop_self_variable")

    @_builtins.property
    @pulumi.getter
    def optional(self) -> Optional[_builtins.bool]:
        """
        Indicates if list item is considered optional.
        """
        return pulumi.get(self, "optional")

    @_builtins.property
    @pulumi.getter
    def password(self) -> Optional[_builtins.str]:
        """
        Set MD5 password on TCP connection with BGP peer
        """
        return pulumi.get(self, "password")

    @_builtins.property
    @pulumi.getter(name="passwordVariable")
    def password_variable(self) -> Optional[_builtins.str]:
        """
        Variable name
        """
        return pulumi.get(self, "password_variable")

    @_builtins.property
    @pulumi.getter(name="remoteAs")
    def remote_as(self) -> Optional[_builtins.str]:
        """
        Set remote autonomous system number
        """
        return pulumi.get(self, "remote_as")

    @_builtins.property
    @pulumi.getter(name="remoteAsVariable")
    def remote_as_variable(self) -> Optional[_builtins.str]:
        """
        Variable name
        """
        return pulumi.get(self, "remote_as_variable")

    @_builtins.property
    @pulumi.getter(name="sendCommunity")
    def send_community(self) -> Optional[_builtins.bool]:
        """
        Send community attribute
          - Default value: `true`
        """
        return pulumi.get(self, "send_community")

    @_builtins.property
    @pulumi.getter(name="sendCommunityVariable")
    def send_community_variable(self) -> Optional[_builtins.str]:
        """
        Variable name
        """
        return pulumi.get(self, "send_community_variable")

    @_builtins.property
    @pulumi.getter(name="sendExtCommunity")
    def send_ext_community(self) -> Optional[_builtins.bool]:
        """
        Send extended community attribute
          - Default value: `true`
        """
        return pulumi.get(self, "send_ext_community")

    @_builtins.property
    @pulumi.getter(name="sendExtCommunityVariable")
    def send_ext_community_variable(self) -> Optional[_builtins.str]:
        """
        Variable name
        """
        return pulumi.get(self, "send_ext_community_variable")

    @_builtins.property
    @pulumi.getter(name="sendLabel")
    def send_label(self) -> Optional[_builtins.bool]:
        """
        Send label
          - Default value: `false`
        """
        return pulumi.get(self, "send_label")

    @_builtins.property
    @pulumi.getter(name="sendLabelExplicit")
    def send_label_explicit(self) -> Optional[_builtins.bool]:
        """
        Send label Explicit
          - Default value: `false`
        """
        return pulumi.get(self, "send_label_explicit")

    @_builtins.property
    @pulumi.getter(name="sendLabelExplicitVariable")
    def send_label_explicit_variable(self) -> Optional[_builtins.str]:
        """
        Variable name
        """
        return pulumi.get(self, "send_label_explicit_variable")

    @_builtins.property
    @pulumi.getter(name="sendLabelVariable")
    def send_label_variable(self) -> Optional[_builtins.str]:
        """
        Variable name
        """
        return pulumi.get(self, "send_label_variable")

    @_builtins.property
    @pulumi.getter
    def shutdown(self) -> Optional[_builtins.bool]:
        """
        Enable or disable a BGP neighbor
          - Default value: `false`
        """
        return pulumi.get(self, "shutdown")

    @_builtins.property
    @pulumi.getter(name="shutdownVariable")
    def shutdown_variable(self) -> Optional[_builtins.str]:
        """
        Variable name
        """
        return pulumi.get(self, "shutdown_variable")

    @_builtins.property
    @pulumi.getter(name="sourceInterface")
    def source_interface(self) -> Optional[_builtins.str]:
        """
        Set IP address of interface for TCP connection to BGP neighbor
        """
        return pulumi.get(self, "source_interface")

    @_builtins.property
    @pulumi.getter(name="sourceInterfaceVariable")
    def source_interface_variable(self) -> Optional[_builtins.str]:
        """
        Variable name
        """
        return pulumi.get(self, "source_interface_variable")


@pulumi.output_type
class CiscoBgpFeatureTemplateIpv6NeighborAddressFamily(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "familyType":
            suggest = "family_type"
        elif key == "maximumPrefixes":
            suggest = "maximum_prefixes"
        elif key == "maximumPrefixesRestart":
            suggest = "maximum_prefixes_restart"
        elif key == "maximumPrefixesRestartVariable":
            suggest = "maximum_prefixes_restart_variable"
        elif key == "maximumPrefixesThreshold":
            suggest = "maximum_prefixes_threshold"
        elif key == "maximumPrefixesThresholdVariable":
            suggest = "maximum_prefixes_threshold_variable"
        elif key == "maximumPrefixesVariable":
            suggest = "maximum_prefixes_variable"
        elif key == "maximumPrefixesWarningOnly":
            suggest = "maximum_prefixes_warning_only"
        elif key == "maximumPrefixesWarningOnlyVariable":
            suggest = "maximum_prefixes_warning_only_variable"
        elif key == "routePolicies":
            suggest = "route_policies"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in CiscoBgpFeatureTemplateIpv6NeighborAddressFamily. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        CiscoBgpFeatureTemplateIpv6NeighborAddressFamily.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        CiscoBgpFeatureTemplateIpv6NeighborAddressFamily.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 family_type: Optional[_builtins.str] = None,
                 maximum_prefixes: Optional[_builtins.int] = None,
                 maximum_prefixes_restart: Optional[_builtins.int] = None,
                 maximum_prefixes_restart_variable: Optional[_builtins.str] = None,
                 maximum_prefixes_threshold: Optional[_builtins.int] = None,
                 maximum_prefixes_threshold_variable: Optional[_builtins.str] = None,
                 maximum_prefixes_variable: Optional[_builtins.str] = None,
                 maximum_prefixes_warning_only: Optional[_builtins.bool] = None,
                 maximum_prefixes_warning_only_variable: Optional[_builtins.str] = None,
                 optional: Optional[_builtins.bool] = None,
                 route_policies: Optional[Sequence['outputs.CiscoBgpFeatureTemplateIpv6NeighborAddressFamilyRoutePolicy']] = None):
        """
        :param _builtins.str family_type: Set BGP address family
                 - Choices: `ipv6-unicast`
        :param _builtins.int maximum_prefixes: Set maximum number of prefixes accepted from BGP peer
                 - Range: `0`-`4294967295`
                 - Default value: `0`
        :param _builtins.int maximum_prefixes_restart: Set when to restart BGP connection if threshold is exceeded
                 - Range: `0`-`65535`
        :param _builtins.str maximum_prefixes_restart_variable: Variable name
        :param _builtins.int maximum_prefixes_threshold: Set threshold at which to generate a warning message
                 - Range: `0`-`100`
                 - Default value: `0`
        :param _builtins.str maximum_prefixes_threshold_variable: Variable name
        :param _builtins.str maximum_prefixes_variable: Variable name
        :param _builtins.bool maximum_prefixes_warning_only: Display only a warning message when threshold is exceeded
                 - Default value: `false`
        :param _builtins.str maximum_prefixes_warning_only_variable: Variable name
        :param _builtins.bool optional: Indicates if list item is considered optional.
        :param Sequence['CiscoBgpFeatureTemplateIpv6NeighborAddressFamilyRoutePolicyArgs'] route_policies: Select route policy to apply to prefixes received from BGP neighbor
        """
        if family_type is not None:
            pulumi.set(__self__, "family_type", family_type)
        if maximum_prefixes is not None:
            pulumi.set(__self__, "maximum_prefixes", maximum_prefixes)
        if maximum_prefixes_restart is not None:
            pulumi.set(__self__, "maximum_prefixes_restart", maximum_prefixes_restart)
        if maximum_prefixes_restart_variable is not None:
            pulumi.set(__self__, "maximum_prefixes_restart_variable", maximum_prefixes_restart_variable)
        if maximum_prefixes_threshold is not None:
            pulumi.set(__self__, "maximum_prefixes_threshold", maximum_prefixes_threshold)
        if maximum_prefixes_threshold_variable is not None:
            pulumi.set(__self__, "maximum_prefixes_threshold_variable", maximum_prefixes_threshold_variable)
        if maximum_prefixes_variable is not None:
            pulumi.set(__self__, "maximum_prefixes_variable", maximum_prefixes_variable)
        if maximum_prefixes_warning_only is not None:
            pulumi.set(__self__, "maximum_prefixes_warning_only", maximum_prefixes_warning_only)
        if maximum_prefixes_warning_only_variable is not None:
            pulumi.set(__self__, "maximum_prefixes_warning_only_variable", maximum_prefixes_warning_only_variable)
        if optional is not None:
            pulumi.set(__self__, "optional", optional)
        if route_policies is not None:
            pulumi.set(__self__, "route_policies", route_policies)

    @_builtins.property
    @pulumi.getter(name="familyType")
    def family_type(self) -> Optional[_builtins.str]:
        """
        Set BGP address family
          - Choices: `ipv6-unicast`
        """
        return pulumi.get(self, "family_type")

    @_builtins.property
    @pulumi.getter(name="maximumPrefixes")
    def maximum_prefixes(self) -> Optional[_builtins.int]:
        """
        Set maximum number of prefixes accepted from BGP peer
          - Range: `0`-`4294967295`
          - Default value: `0`
        """
        return pulumi.get(self, "maximum_prefixes")

    @_builtins.property
    @pulumi.getter(name="maximumPrefixesRestart")
    def maximum_prefixes_restart(self) -> Optional[_builtins.int]:
        """
        Set when to restart BGP connection if threshold is exceeded
          - Range: `0`-`65535`
        """
        return pulumi.get(self, "maximum_prefixes_restart")

    @_builtins.property
    @pulumi.getter(name="maximumPrefixesRestartVariable")
    def maximum_prefixes_restart_variable(self) -> Optional[_builtins.str]:
        """
        Variable name
        """
        return pulumi.get(self, "maximum_prefixes_restart_variable")

    @_builtins.property
    @pulumi.getter(name="maximumPrefixesThreshold")
    def maximum_prefixes_threshold(self) -> Optional[_builtins.int]:
        """
        Set threshold at which to generate a warning message
          - Range: `0`-`100`
          - Default value: `0`
        """
        return pulumi.get(self, "maximum_prefixes_threshold")

    @_builtins.property
    @pulumi.getter(name="maximumPrefixesThresholdVariable")
    def maximum_prefixes_threshold_variable(self) -> Optional[_builtins.str]:
        """
        Variable name
        """
        return pulumi.get(self, "maximum_prefixes_threshold_variable")

    @_builtins.property
    @pulumi.getter(name="maximumPrefixesVariable")
    def maximum_prefixes_variable(self) -> Optional[_builtins.str]:
        """
        Variable name
        """
        return pulumi.get(self, "maximum_prefixes_variable")

    @_builtins.property
    @pulumi.getter(name="maximumPrefixesWarningOnly")
    def maximum_prefixes_warning_only(self) -> Optional[_builtins.bool]:
        """
        Display only a warning message when threshold is exceeded
          - Default value: `false`
        """
        return pulumi.get(self, "maximum_prefixes_warning_only")

    @_builtins.property
    @pulumi.getter(name="maximumPrefixesWarningOnlyVariable")
    def maximum_prefixes_warning_only_variable(self) -> Optional[_builtins.str]:
        """
        Variable name
        """
        return pulumi.get(self, "maximum_prefixes_warning_only_variable")

    @_builtins.property
    @pulumi.getter
    def optional(self) -> Optional[_builtins.bool]:
        """
        Indicates if list item is considered optional.
        """
        return pulumi.get(self, "optional")

    @_builtins.property
    @pulumi.getter(name="routePolicies")
    def route_policies(self) -> Optional[Sequence['outputs.CiscoBgpFeatureTemplateIpv6NeighborAddressFamilyRoutePolicy']]:
        """
        Select route policy to apply to prefixes received from BGP neighbor
        """
        return pulumi.get(self, "route_policies")


@pulumi.output_type
class CiscoBgpFeatureTemplateIpv6NeighborAddressFamilyRoutePolicy(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "policyName":
            suggest = "policy_name"
        elif key == "policyNameVariable":
            suggest = "policy_name_variable"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in CiscoBgpFeatureTemplateIpv6NeighborAddressFamilyRoutePolicy. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        CiscoBgpFeatureTemplateIpv6NeighborAddressFamilyRoutePolicy.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        CiscoBgpFeatureTemplateIpv6NeighborAddressFamilyRoutePolicy.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 direction: Optional[_builtins.str] = None,
                 optional: Optional[_builtins.bool] = None,
                 policy_name: Optional[_builtins.str] = None,
                 policy_name_variable: Optional[_builtins.str] = None):
        """
        :param _builtins.str direction: Set direction for applying route policy
                 - Choices: `in`, `out`
        :param _builtins.bool optional: Indicates if list item is considered optional.
        :param _builtins.str policy_name: Configure name of route policy
        :param _builtins.str policy_name_variable: Variable name
        """
        if direction is not None:
            pulumi.set(__self__, "direction", direction)
        if optional is not None:
            pulumi.set(__self__, "optional", optional)
        if policy_name is not None:
            pulumi.set(__self__, "policy_name", policy_name)
        if policy_name_variable is not None:
            pulumi.set(__self__, "policy_name_variable", policy_name_variable)

    @_builtins.property
    @pulumi.getter
    def direction(self) -> Optional[_builtins.str]:
        """
        Set direction for applying route policy
          - Choices: `in`, `out`
        """
        return pulumi.get(self, "direction")

    @_builtins.property
    @pulumi.getter
    def optional(self) -> Optional[_builtins.bool]:
        """
        Indicates if list item is considered optional.
        """
        return pulumi.get(self, "optional")

    @_builtins.property
    @pulumi.getter(name="policyName")
    def policy_name(self) -> Optional[_builtins.str]:
        """
        Configure name of route policy
        """
        return pulumi.get(self, "policy_name")

    @_builtins.property
    @pulumi.getter(name="policyNameVariable")
    def policy_name_variable(self) -> Optional[_builtins.str]:
        """
        Variable name
        """
        return pulumi.get(self, "policy_name_variable")


@pulumi.output_type
class CiscoBgpFeatureTemplateIpv6RouteTarget(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "vpnId":
            suggest = "vpn_id"
        elif key == "vpnIdVariable":
            suggest = "vpn_id_variable"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in CiscoBgpFeatureTemplateIpv6RouteTarget. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        CiscoBgpFeatureTemplateIpv6RouteTarget.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        CiscoBgpFeatureTemplateIpv6RouteTarget.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 exports: Optional[Sequence['outputs.CiscoBgpFeatureTemplateIpv6RouteTargetExport']] = None,
                 imports: Optional[Sequence['outputs.CiscoBgpFeatureTemplateIpv6RouteTargetImport']] = None,
                 optional: Optional[_builtins.bool] = None,
                 vpn_id: Optional[_builtins.int] = None,
                 vpn_id_variable: Optional[_builtins.str] = None):
        """
        :param Sequence['CiscoBgpFeatureTemplateIpv6RouteTargetExportArgs'] exports: Export Target-VPN community for IPV6
        :param Sequence['CiscoBgpFeatureTemplateIpv6RouteTargetImportArgs'] imports: Import Target-VPN community for IPV6
        :param _builtins.bool optional: Indicates if list item is considered optional.
        :param _builtins.int vpn_id: VPN ID for IPv6
                 - Range: `1`-`65527`
        :param _builtins.str vpn_id_variable: Variable name
        """
        if exports is not None:
            pulumi.set(__self__, "exports", exports)
        if imports is not None:
            pulumi.set(__self__, "imports", imports)
        if optional is not None:
            pulumi.set(__self__, "optional", optional)
        if vpn_id is not None:
            pulumi.set(__self__, "vpn_id", vpn_id)
        if vpn_id_variable is not None:
            pulumi.set(__self__, "vpn_id_variable", vpn_id_variable)

    @_builtins.property
    @pulumi.getter
    def exports(self) -> Optional[Sequence['outputs.CiscoBgpFeatureTemplateIpv6RouteTargetExport']]:
        """
        Export Target-VPN community for IPV6
        """
        return pulumi.get(self, "exports")

    @_builtins.property
    @pulumi.getter
    def imports(self) -> Optional[Sequence['outputs.CiscoBgpFeatureTemplateIpv6RouteTargetImport']]:
        """
        Import Target-VPN community for IPV6
        """
        return pulumi.get(self, "imports")

    @_builtins.property
    @pulumi.getter
    def optional(self) -> Optional[_builtins.bool]:
        """
        Indicates if list item is considered optional.
        """
        return pulumi.get(self, "optional")

    @_builtins.property
    @pulumi.getter(name="vpnId")
    def vpn_id(self) -> Optional[_builtins.int]:
        """
        VPN ID for IPv6
          - Range: `1`-`65527`
        """
        return pulumi.get(self, "vpn_id")

    @_builtins.property
    @pulumi.getter(name="vpnIdVariable")
    def vpn_id_variable(self) -> Optional[_builtins.str]:
        """
        Variable name
        """
        return pulumi.get(self, "vpn_id_variable")


@pulumi.output_type
class CiscoBgpFeatureTemplateIpv6RouteTargetExport(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "asnIp":
            suggest = "asn_ip"
        elif key == "asnIpVariable":
            suggest = "asn_ip_variable"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in CiscoBgpFeatureTemplateIpv6RouteTargetExport. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        CiscoBgpFeatureTemplateIpv6RouteTargetExport.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        CiscoBgpFeatureTemplateIpv6RouteTargetExport.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 asn_ip: Optional[_builtins.str] = None,
                 asn_ip_variable: Optional[_builtins.str] = None,
                 optional: Optional[_builtins.bool] = None):
        """
        :param _builtins.str asn_ip: asn-ip
        :param _builtins.str asn_ip_variable: Variable name
        :param _builtins.bool optional: Indicates if list item is considered optional.
        """
        if asn_ip is not None:
            pulumi.set(__self__, "asn_ip", asn_ip)
        if asn_ip_variable is not None:
            pulumi.set(__self__, "asn_ip_variable", asn_ip_variable)
        if optional is not None:
            pulumi.set(__self__, "optional", optional)

    @_builtins.property
    @pulumi.getter(name="asnIp")
    def asn_ip(self) -> Optional[_builtins.str]:
        """
        asn-ip
        """
        return pulumi.get(self, "asn_ip")

    @_builtins.property
    @pulumi.getter(name="asnIpVariable")
    def asn_ip_variable(self) -> Optional[_builtins.str]:
        """
        Variable name
        """
        return pulumi.get(self, "asn_ip_variable")

    @_builtins.property
    @pulumi.getter
    def optional(self) -> Optional[_builtins.bool]:
        """
        Indicates if list item is considered optional.
        """
        return pulumi.get(self, "optional")


@pulumi.output_type
class CiscoBgpFeatureTemplateIpv6RouteTargetImport(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "asnIp":
            suggest = "asn_ip"
        elif key == "asnIpVariable":
            suggest = "asn_ip_variable"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in CiscoBgpFeatureTemplateIpv6RouteTargetImport. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        CiscoBgpFeatureTemplateIpv6RouteTargetImport.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        CiscoBgpFeatureTemplateIpv6RouteTargetImport.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 asn_ip: Optional[_builtins.str] = None,
                 asn_ip_variable: Optional[_builtins.str] = None,
                 optional: Optional[_builtins.bool] = None):
        """
        :param _builtins.str asn_ip: asn-ip
        :param _builtins.str asn_ip_variable: Variable name
        :param _builtins.bool optional: Indicates if list item is considered optional.
        """
        if asn_ip is not None:
            pulumi.set(__self__, "asn_ip", asn_ip)
        if asn_ip_variable is not None:
            pulumi.set(__self__, "asn_ip_variable", asn_ip_variable)
        if optional is not None:
            pulumi.set(__self__, "optional", optional)

    @_builtins.property
    @pulumi.getter(name="asnIp")
    def asn_ip(self) -> Optional[_builtins.str]:
        """
        asn-ip
        """
        return pulumi.get(self, "asn_ip")

    @_builtins.property
    @pulumi.getter(name="asnIpVariable")
    def asn_ip_variable(self) -> Optional[_builtins.str]:
        """
        Variable name
        """
        return pulumi.get(self, "asn_ip_variable")

    @_builtins.property
    @pulumi.getter
    def optional(self) -> Optional[_builtins.bool]:
        """
        Indicates if list item is considered optional.
        """
        return pulumi.get(self, "optional")


@pulumi.output_type
class CiscoBgpFeatureTemplateMplsInterface(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "interfaceName":
            suggest = "interface_name"
        elif key == "interfaceNameVariable":
            suggest = "interface_name_variable"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in CiscoBgpFeatureTemplateMplsInterface. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        CiscoBgpFeatureTemplateMplsInterface.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        CiscoBgpFeatureTemplateMplsInterface.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 interface_name: Optional[_builtins.str] = None,
                 interface_name_variable: Optional[_builtins.str] = None,
                 optional: Optional[_builtins.bool] = None):
        """
        :param _builtins.str interface_name: Interface Name
        :param _builtins.str interface_name_variable: Variable name
        :param _builtins.bool optional: Indicates if list item is considered optional.
        """
        if interface_name is not None:
            pulumi.set(__self__, "interface_name", interface_name)
        if interface_name_variable is not None:
            pulumi.set(__self__, "interface_name_variable", interface_name_variable)
        if optional is not None:
            pulumi.set(__self__, "optional", optional)

    @_builtins.property
    @pulumi.getter(name="interfaceName")
    def interface_name(self) -> Optional[_builtins.str]:
        """
        Interface Name
        """
        return pulumi.get(self, "interface_name")

    @_builtins.property
    @pulumi.getter(name="interfaceNameVariable")
    def interface_name_variable(self) -> Optional[_builtins.str]:
        """
        Variable name
        """
        return pulumi.get(self, "interface_name_variable")

    @_builtins.property
    @pulumi.getter
    def optional(self) -> Optional[_builtins.bool]:
        """
        Indicates if list item is considered optional.
        """
        return pulumi.get(self, "optional")


@pulumi.output_type
class CiscoDhcpServerFeatureTemplateOption(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "asciiVariable":
            suggest = "ascii_variable"
        elif key == "hexVariable":
            suggest = "hex_variable"
        elif key == "ipAddressVariable":
            suggest = "ip_address_variable"
        elif key == "ipAddresses":
            suggest = "ip_addresses"
        elif key == "optionCode":
            suggest = "option_code"
        elif key == "optionCodeVariable":
            suggest = "option_code_variable"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in CiscoDhcpServerFeatureTemplateOption. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        CiscoDhcpServerFeatureTemplateOption.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        CiscoDhcpServerFeatureTemplateOption.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 ascii: Optional[_builtins.str] = None,
                 ascii_variable: Optional[_builtins.str] = None,
                 hex: Optional[_builtins.str] = None,
                 hex_variable: Optional[_builtins.str] = None,
                 ip_address_variable: Optional[_builtins.str] = None,
                 ip_addresses: Optional[Sequence[_builtins.str]] = None,
                 option_code: Optional[_builtins.int] = None,
                 option_code_variable: Optional[_builtins.str] = None,
                 optional: Optional[_builtins.bool] = None):
        """
        :param _builtins.str ascii: Set ASCII value
        :param _builtins.str ascii_variable: Variable name
        :param _builtins.str hex: Set HEX value
        :param _builtins.str hex_variable: Variable name
        :param _builtins.str ip_address_variable: Variable name
        :param Sequence[_builtins.str] ip_addresses: Set ip address
        :param _builtins.int option_code: Set Option Code
                 - Range: `1`-`254`
        :param _builtins.str option_code_variable: Variable name
        :param _builtins.bool optional: Indicates if list item is considered optional.
        """
        if ascii is not None:
            pulumi.set(__self__, "ascii", ascii)
        if ascii_variable is not None:
            pulumi.set(__self__, "ascii_variable", ascii_variable)
        if hex is not None:
            pulumi.set(__self__, "hex", hex)
        if hex_variable is not None:
            pulumi.set(__self__, "hex_variable", hex_variable)
        if ip_address_variable is not None:
            pulumi.set(__self__, "ip_address_variable", ip_address_variable)
        if ip_addresses is not None:
            pulumi.set(__self__, "ip_addresses", ip_addresses)
        if option_code is not None:
            pulumi.set(__self__, "option_code", option_code)
        if option_code_variable is not None:
            pulumi.set(__self__, "option_code_variable", option_code_variable)
        if optional is not None:
            pulumi.set(__self__, "optional", optional)

    @_builtins.property
    @pulumi.getter
    def ascii(self) -> Optional[_builtins.str]:
        """
        Set ASCII value
        """
        return pulumi.get(self, "ascii")

    @_builtins.property
    @pulumi.getter(name="asciiVariable")
    def ascii_variable(self) -> Optional[_builtins.str]:
        """
        Variable name
        """
        return pulumi.get(self, "ascii_variable")

    @_builtins.property
    @pulumi.getter
    def hex(self) -> Optional[_builtins.str]:
        """
        Set HEX value
        """
        return pulumi.get(self, "hex")

    @_builtins.property
    @pulumi.getter(name="hexVariable")
    def hex_variable(self) -> Optional[_builtins.str]:
        """
        Variable name
        """
        return pulumi.get(self, "hex_variable")

    @_builtins.property
    @pulumi.getter(name="ipAddressVariable")
    def ip_address_variable(self) -> Optional[_builtins.str]:
        """
        Variable name
        """
        return pulumi.get(self, "ip_address_variable")

    @_builtins.property
    @pulumi.getter(name="ipAddresses")
    def ip_addresses(self) -> Optional[Sequence[_builtins.str]]:
        """
        Set ip address
        """
        return pulumi.get(self, "ip_addresses")

    @_builtins.property
    @pulumi.getter(name="optionCode")
    def option_code(self) -> Optional[_builtins.int]:
        """
        Set Option Code
          - Range: `1`-`254`
        """
        return pulumi.get(self, "option_code")

    @_builtins.property
    @pulumi.getter(name="optionCodeVariable")
    def option_code_variable(self) -> Optional[_builtins.str]:
        """
        Variable name
        """
        return pulumi.get(self, "option_code_variable")

    @_builtins.property
    @pulumi.getter
    def optional(self) -> Optional[_builtins.bool]:
        """
        Indicates if list item is considered optional.
        """
        return pulumi.get(self, "optional")


@pulumi.output_type
class CiscoDhcpServerFeatureTemplateStaticLease(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "hostnameVariable":
            suggest = "hostname_variable"
        elif key == "ipAddress":
            suggest = "ip_address"
        elif key == "ipAddressVariable":
            suggest = "ip_address_variable"
        elif key == "macAddress":
            suggest = "mac_address"
        elif key == "macAddressVariable":
            suggest = "mac_address_variable"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in CiscoDhcpServerFeatureTemplateStaticLease. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        CiscoDhcpServerFeatureTemplateStaticLease.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        CiscoDhcpServerFeatureTemplateStaticLease.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 hostname: Optional[_builtins.str] = None,
                 hostname_variable: Optional[_builtins.str] = None,
                 ip_address: Optional[_builtins.str] = None,
                 ip_address_variable: Optional[_builtins.str] = None,
                 mac_address: Optional[_builtins.str] = None,
                 mac_address_variable: Optional[_builtins.str] = None,
                 optional: Optional[_builtins.bool] = None):
        """
        :param _builtins.str hostname: Set client’s hostname
        :param _builtins.str hostname_variable: Variable name
        :param _builtins.str ip_address: Set client’s static IP address
        :param _builtins.str ip_address_variable: Variable name
        :param _builtins.str mac_address: Set MAC address of client
        :param _builtins.str mac_address_variable: Variable name
        :param _builtins.bool optional: Indicates if list item is considered optional.
        """
        if hostname is not None:
            pulumi.set(__self__, "hostname", hostname)
        if hostname_variable is not None:
            pulumi.set(__self__, "hostname_variable", hostname_variable)
        if ip_address is not None:
            pulumi.set(__self__, "ip_address", ip_address)
        if ip_address_variable is not None:
            pulumi.set(__self__, "ip_address_variable", ip_address_variable)
        if mac_address is not None:
            pulumi.set(__self__, "mac_address", mac_address)
        if mac_address_variable is not None:
            pulumi.set(__self__, "mac_address_variable", mac_address_variable)
        if optional is not None:
            pulumi.set(__self__, "optional", optional)

    @_builtins.property
    @pulumi.getter
    def hostname(self) -> Optional[_builtins.str]:
        """
        Set client’s hostname
        """
        return pulumi.get(self, "hostname")

    @_builtins.property
    @pulumi.getter(name="hostnameVariable")
    def hostname_variable(self) -> Optional[_builtins.str]:
        """
        Variable name
        """
        return pulumi.get(self, "hostname_variable")

    @_builtins.property
    @pulumi.getter(name="ipAddress")
    def ip_address(self) -> Optional[_builtins.str]:
        """
        Set client’s static IP address
        """
        return pulumi.get(self, "ip_address")

    @_builtins.property
    @pulumi.getter(name="ipAddressVariable")
    def ip_address_variable(self) -> Optional[_builtins.str]:
        """
        Variable name
        """
        return pulumi.get(self, "ip_address_variable")

    @_builtins.property
    @pulumi.getter(name="macAddress")
    def mac_address(self) -> Optional[_builtins.str]:
        """
        Set MAC address of client
        """
        return pulumi.get(self, "mac_address")

    @_builtins.property
    @pulumi.getter(name="macAddressVariable")
    def mac_address_variable(self) -> Optional[_builtins.str]:
        """
        Variable name
        """
        return pulumi.get(self, "mac_address_variable")

    @_builtins.property
    @pulumi.getter
    def optional(self) -> Optional[_builtins.bool]:
        """
        Indicates if list item is considered optional.
        """
        return pulumi.get(self, "optional")


@pulumi.output_type
class CiscoLoggingFeatureTemplateIpv4Server(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "customProfile":
            suggest = "custom_profile"
        elif key == "customProfileVariable":
            suggest = "custom_profile_variable"
        elif key == "enableTls":
            suggest = "enable_tls"
        elif key == "enableTlsVariable":
            suggest = "enable_tls_variable"
        elif key == "hostnameIp":
            suggest = "hostname_ip"
        elif key == "hostnameIpVariable":
            suggest = "hostname_ip_variable"
        elif key == "loggingLevel":
            suggest = "logging_level"
        elif key == "loggingLevelVariable":
            suggest = "logging_level_variable"
        elif key == "profileVariable":
            suggest = "profile_variable"
        elif key == "sourceInterface":
            suggest = "source_interface"
        elif key == "sourceInterfaceVariable":
            suggest = "source_interface_variable"
        elif key == "vpnId":
            suggest = "vpn_id"
        elif key == "vpnIdVariable":
            suggest = "vpn_id_variable"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in CiscoLoggingFeatureTemplateIpv4Server. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        CiscoLoggingFeatureTemplateIpv4Server.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        CiscoLoggingFeatureTemplateIpv4Server.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 custom_profile: Optional[_builtins.bool] = None,
                 custom_profile_variable: Optional[_builtins.str] = None,
                 enable_tls: Optional[_builtins.bool] = None,
                 enable_tls_variable: Optional[_builtins.str] = None,
                 hostname_ip: Optional[_builtins.str] = None,
                 hostname_ip_variable: Optional[_builtins.str] = None,
                 logging_level: Optional[_builtins.str] = None,
                 logging_level_variable: Optional[_builtins.str] = None,
                 optional: Optional[_builtins.bool] = None,
                 profile: Optional[_builtins.str] = None,
                 profile_variable: Optional[_builtins.str] = None,
                 source_interface: Optional[_builtins.str] = None,
                 source_interface_variable: Optional[_builtins.str] = None,
                 vpn_id: Optional[_builtins.int] = None,
                 vpn_id_variable: Optional[_builtins.str] = None):
        """
        :param _builtins.bool custom_profile: Define custom profile
                 - Default value: `false`
        :param _builtins.str custom_profile_variable: Variable name
        :param _builtins.bool enable_tls: Enable TLS
                 - Default value: `false`
        :param _builtins.str enable_tls_variable: Variable name
        :param _builtins.str hostname_ip: Set hostname or IPv4 address of server
        :param _builtins.str hostname_ip_variable: Variable name
        :param _builtins.str logging_level: Set logging level for messages logged to server
                 - Choices: `information`, `debugging`, `notice`, `warn`, `error`, `critical`, `alert`, `emergency`
                 - Default value: `information`
        :param _builtins.str logging_level_variable: Variable name
        :param _builtins.bool optional: Indicates if list item is considered optional.
        :param _builtins.str profile: Configure a TLS profile
        :param _builtins.str profile_variable: Variable name
        :param _builtins.str source_interface: Set interface to use to reach syslog server
        :param _builtins.str source_interface_variable: Variable name
        :param _builtins.int vpn_id: Set VPN in which syslog server is located
                 - Range: `0`-`65530`
                 - Default value: `0`
        :param _builtins.str vpn_id_variable: Variable name
        """
        if custom_profile is not None:
            pulumi.set(__self__, "custom_profile", custom_profile)
        if custom_profile_variable is not None:
            pulumi.set(__self__, "custom_profile_variable", custom_profile_variable)
        if enable_tls is not None:
            pulumi.set(__self__, "enable_tls", enable_tls)
        if enable_tls_variable is not None:
            pulumi.set(__self__, "enable_tls_variable", enable_tls_variable)
        if hostname_ip is not None:
            pulumi.set(__self__, "hostname_ip", hostname_ip)
        if hostname_ip_variable is not None:
            pulumi.set(__self__, "hostname_ip_variable", hostname_ip_variable)
        if logging_level is not None:
            pulumi.set(__self__, "logging_level", logging_level)
        if logging_level_variable is not None:
            pulumi.set(__self__, "logging_level_variable", logging_level_variable)
        if optional is not None:
            pulumi.set(__self__, "optional", optional)
        if profile is not None:
            pulumi.set(__self__, "profile", profile)
        if profile_variable is not None:
            pulumi.set(__self__, "profile_variable", profile_variable)
        if source_interface is not None:
            pulumi.set(__self__, "source_interface", source_interface)
        if source_interface_variable is not None:
            pulumi.set(__self__, "source_interface_variable", source_interface_variable)
        if vpn_id is not None:
            pulumi.set(__self__, "vpn_id", vpn_id)
        if vpn_id_variable is not None:
            pulumi.set(__self__, "vpn_id_variable", vpn_id_variable)

    @_builtins.property
    @pulumi.getter(name="customProfile")
    def custom_profile(self) -> Optional[_builtins.bool]:
        """
        Define custom profile
          - Default value: `false`
        """
        return pulumi.get(self, "custom_profile")

    @_builtins.property
    @pulumi.getter(name="customProfileVariable")
    def custom_profile_variable(self) -> Optional[_builtins.str]:
        """
        Variable name
        """
        return pulumi.get(self, "custom_profile_variable")

    @_builtins.property
    @pulumi.getter(name="enableTls")
    def enable_tls(self) -> Optional[_builtins.bool]:
        """
        Enable TLS
          - Default value: `false`
        """
        return pulumi.get(self, "enable_tls")

    @_builtins.property
    @pulumi.getter(name="enableTlsVariable")
    def enable_tls_variable(self) -> Optional[_builtins.str]:
        """
        Variable name
        """
        return pulumi.get(self, "enable_tls_variable")

    @_builtins.property
    @pulumi.getter(name="hostnameIp")
    def hostname_ip(self) -> Optional[_builtins.str]:
        """
        Set hostname or IPv4 address of server
        """
        return pulumi.get(self, "hostname_ip")

    @_builtins.property
    @pulumi.getter(name="hostnameIpVariable")
    def hostname_ip_variable(self) -> Optional[_builtins.str]:
        """
        Variable name
        """
        return pulumi.get(self, "hostname_ip_variable")

    @_builtins.property
    @pulumi.getter(name="loggingLevel")
    def logging_level(self) -> Optional[_builtins.str]:
        """
        Set logging level for messages logged to server
          - Choices: `information`, `debugging`, `notice`, `warn`, `error`, `critical`, `alert`, `emergency`
          - Default value: `information`
        """
        return pulumi.get(self, "logging_level")

    @_builtins.property
    @pulumi.getter(name="loggingLevelVariable")
    def logging_level_variable(self) -> Optional[_builtins.str]:
        """
        Variable name
        """
        return pulumi.get(self, "logging_level_variable")

    @_builtins.property
    @pulumi.getter
    def optional(self) -> Optional[_builtins.bool]:
        """
        Indicates if list item is considered optional.
        """
        return pulumi.get(self, "optional")

    @_builtins.property
    @pulumi.getter
    def profile(self) -> Optional[_builtins.str]:
        """
        Configure a TLS profile
        """
        return pulumi.get(self, "profile")

    @_builtins.property
    @pulumi.getter(name="profileVariable")
    def profile_variable(self) -> Optional[_builtins.str]:
        """
        Variable name
        """
        return pulumi.get(self, "profile_variable")

    @_builtins.property
    @pulumi.getter(name="sourceInterface")
    def source_interface(self) -> Optional[_builtins.str]:
        """
        Set interface to use to reach syslog server
        """
        return pulumi.get(self, "source_interface")

    @_builtins.property
    @pulumi.getter(name="sourceInterfaceVariable")
    def source_interface_variable(self) -> Optional[_builtins.str]:
        """
        Variable name
        """
        return pulumi.get(self, "source_interface_variable")

    @_builtins.property
    @pulumi.getter(name="vpnId")
    def vpn_id(self) -> Optional[_builtins.int]:
        """
        Set VPN in which syslog server is located
          - Range: `0`-`65530`
          - Default value: `0`
        """
        return pulumi.get(self, "vpn_id")

    @_builtins.property
    @pulumi.getter(name="vpnIdVariable")
    def vpn_id_variable(self) -> Optional[_builtins.str]:
        """
        Variable name
        """
        return pulumi.get(self, "vpn_id_variable")


@pulumi.output_type
class CiscoLoggingFeatureTemplateIpv6Server(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "customProfile":
            suggest = "custom_profile"
        elif key == "customProfileVariable":
            suggest = "custom_profile_variable"
        elif key == "enableTls":
            suggest = "enable_tls"
        elif key == "enableTlsVariable":
            suggest = "enable_tls_variable"
        elif key == "hostnameIp":
            suggest = "hostname_ip"
        elif key == "hostnameIpVariable":
            suggest = "hostname_ip_variable"
        elif key == "loggingLevel":
            suggest = "logging_level"
        elif key == "loggingLevelVariable":
            suggest = "logging_level_variable"
        elif key == "profileVariable":
            suggest = "profile_variable"
        elif key == "sourceInterface":
            suggest = "source_interface"
        elif key == "sourceInterfaceVariable":
            suggest = "source_interface_variable"
        elif key == "vpnId":
            suggest = "vpn_id"
        elif key == "vpnIdVariable":
            suggest = "vpn_id_variable"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in CiscoLoggingFeatureTemplateIpv6Server. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        CiscoLoggingFeatureTemplateIpv6Server.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        CiscoLoggingFeatureTemplateIpv6Server.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 custom_profile: Optional[_builtins.bool] = None,
                 custom_profile_variable: Optional[_builtins.str] = None,
                 enable_tls: Optional[_builtins.bool] = None,
                 enable_tls_variable: Optional[_builtins.str] = None,
                 hostname_ip: Optional[_builtins.str] = None,
                 hostname_ip_variable: Optional[_builtins.str] = None,
                 logging_level: Optional[_builtins.str] = None,
                 logging_level_variable: Optional[_builtins.str] = None,
                 optional: Optional[_builtins.bool] = None,
                 profile: Optional[_builtins.str] = None,
                 profile_variable: Optional[_builtins.str] = None,
                 source_interface: Optional[_builtins.str] = None,
                 source_interface_variable: Optional[_builtins.str] = None,
                 vpn_id: Optional[_builtins.int] = None,
                 vpn_id_variable: Optional[_builtins.str] = None):
        """
        :param _builtins.bool custom_profile: Define custom profile
                 - Default value: `false`
        :param _builtins.str custom_profile_variable: Variable name
        :param _builtins.bool enable_tls: Enable TLS
                 - Default value: `false`
        :param _builtins.str enable_tls_variable: Variable name
        :param _builtins.str hostname_ip: Set IPv6 hostname or IPv6 address of server
        :param _builtins.str hostname_ip_variable: Variable name
        :param _builtins.str logging_level: Set logging level for messages logged to server
                 - Choices: `information`, `debugging`, `notification`, `warn`, `error`, `critical`, `alert`, `emergency`
                 - Default value: `information`
        :param _builtins.str logging_level_variable: Variable name
        :param _builtins.bool optional: Indicates if list item is considered optional.
        :param _builtins.str profile: Configure a TLS profile
        :param _builtins.str profile_variable: Variable name
        :param _builtins.str source_interface: Set interface to use to reach syslog server
        :param _builtins.str source_interface_variable: Variable name
        :param _builtins.int vpn_id: Set VPN in which syslog server is located
                 - Range: `0`-`65530`
                 - Default value: `0`
        :param _builtins.str vpn_id_variable: Variable name
        """
        if custom_profile is not None:
            pulumi.set(__self__, "custom_profile", custom_profile)
        if custom_profile_variable is not None:
            pulumi.set(__self__, "custom_profile_variable", custom_profile_variable)
        if enable_tls is not None:
            pulumi.set(__self__, "enable_tls", enable_tls)
        if enable_tls_variable is not None:
            pulumi.set(__self__, "enable_tls_variable", enable_tls_variable)
        if hostname_ip is not None:
            pulumi.set(__self__, "hostname_ip", hostname_ip)
        if hostname_ip_variable is not None:
            pulumi.set(__self__, "hostname_ip_variable", hostname_ip_variable)
        if logging_level is not None:
            pulumi.set(__self__, "logging_level", logging_level)
        if logging_level_variable is not None:
            pulumi.set(__self__, "logging_level_variable", logging_level_variable)
        if optional is not None:
            pulumi.set(__self__, "optional", optional)
        if profile is not None:
            pulumi.set(__self__, "profile", profile)
        if profile_variable is not None:
            pulumi.set(__self__, "profile_variable", profile_variable)
        if source_interface is not None:
            pulumi.set(__self__, "source_interface", source_interface)
        if source_interface_variable is not None:
            pulumi.set(__self__, "source_interface_variable", source_interface_variable)
        if vpn_id is not None:
            pulumi.set(__self__, "vpn_id", vpn_id)
        if vpn_id_variable is not None:
            pulumi.set(__self__, "vpn_id_variable", vpn_id_variable)

    @_builtins.property
    @pulumi.getter(name="customProfile")
    def custom_profile(self) -> Optional[_builtins.bool]:
        """
        Define custom profile
          - Default value: `false`
        """
        return pulumi.get(self, "custom_profile")

    @_builtins.property
    @pulumi.getter(name="customProfileVariable")
    def custom_profile_variable(self) -> Optional[_builtins.str]:
        """
        Variable name
        """
        return pulumi.get(self, "custom_profile_variable")

    @_builtins.property
    @pulumi.getter(name="enableTls")
    def enable_tls(self) -> Optional[_builtins.bool]:
        """
        Enable TLS
          - Default value: `false`
        """
        return pulumi.get(self, "enable_tls")

    @_builtins.property
    @pulumi.getter(name="enableTlsVariable")
    def enable_tls_variable(self) -> Optional[_builtins.str]:
        """
        Variable name
        """
        return pulumi.get(self, "enable_tls_variable")

    @_builtins.property
    @pulumi.getter(name="hostnameIp")
    def hostname_ip(self) -> Optional[_builtins.str]:
        """
        Set IPv6 hostname or IPv6 address of server
        """
        return pulumi.get(self, "hostname_ip")

    @_builtins.property
    @pulumi.getter(name="hostnameIpVariable")
    def hostname_ip_variable(self) -> Optional[_builtins.str]:
        """
        Variable name
        """
        return pulumi.get(self, "hostname_ip_variable")

    @_builtins.property
    @pulumi.getter(name="loggingLevel")
    def logging_level(self) -> Optional[_builtins.str]:
        """
        Set logging level for messages logged to server
          - Choices: `information`, `debugging`, `notification`, `warn`, `error`, `critical`, `alert`, `emergency`
          - Default value: `information`
        """
        return pulumi.get(self, "logging_level")

    @_builtins.property
    @pulumi.getter(name="loggingLevelVariable")
    def logging_level_variable(self) -> Optional[_builtins.str]:
        """
        Variable name
        """
        return pulumi.get(self, "logging_level_variable")

    @_builtins.property
    @pulumi.getter
    def optional(self) -> Optional[_builtins.bool]:
        """
        Indicates if list item is considered optional.
        """
        return pulumi.get(self, "optional")

    @_builtins.property
    @pulumi.getter
    def profile(self) -> Optional[_builtins.str]:
        """
        Configure a TLS profile
        """
        return pulumi.get(self, "profile")

    @_builtins.property
    @pulumi.getter(name="profileVariable")
    def profile_variable(self) -> Optional[_builtins.str]:
        """
        Variable name
        """
        return pulumi.get(self, "profile_variable")

    @_builtins.property
    @pulumi.getter(name="sourceInterface")
    def source_interface(self) -> Optional[_builtins.str]:
        """
        Set interface to use to reach syslog server
        """
        return pulumi.get(self, "source_interface")

    @_builtins.property
    @pulumi.getter(name="sourceInterfaceVariable")
    def source_interface_variable(self) -> Optional[_builtins.str]:
        """
        Variable name
        """
        return pulumi.get(self, "source_interface_variable")

    @_builtins.property
    @pulumi.getter(name="vpnId")
    def vpn_id(self) -> Optional[_builtins.int]:
        """
        Set VPN in which syslog server is located
          - Range: `0`-`65530`
          - Default value: `0`
        """
        return pulumi.get(self, "vpn_id")

    @_builtins.property
    @pulumi.getter(name="vpnIdVariable")
    def vpn_id_variable(self) -> Optional[_builtins.str]:
        """
        Variable name
        """
        return pulumi.get(self, "vpn_id_variable")


@pulumi.output_type
class CiscoLoggingFeatureTemplateTlsProfile(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "authenticationType":
            suggest = "authentication_type"
        elif key == "ciphersuiteListVariable":
            suggest = "ciphersuite_list_variable"
        elif key == "ciphersuiteLists":
            suggest = "ciphersuite_lists"
        elif key == "nameVariable":
            suggest = "name_variable"
        elif key == "versionVariable":
            suggest = "version_variable"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in CiscoLoggingFeatureTemplateTlsProfile. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        CiscoLoggingFeatureTemplateTlsProfile.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        CiscoLoggingFeatureTemplateTlsProfile.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 authentication_type: Optional[_builtins.str] = None,
                 ciphersuite_list_variable: Optional[_builtins.str] = None,
                 ciphersuite_lists: Optional[Sequence[_builtins.str]] = None,
                 name: Optional[_builtins.str] = None,
                 name_variable: Optional[_builtins.str] = None,
                 optional: Optional[_builtins.bool] = None,
                 version: Optional[_builtins.str] = None,
                 version_variable: Optional[_builtins.str] = None):
        """
        :param _builtins.str authentication_type: Authentication Type
                 - Choices: `Server`, `Mutual`
        :param _builtins.str ciphersuite_list_variable: Variable name
        :param Sequence[_builtins.str] ciphersuite_lists: Syslog secure server ciphersuites. Possible values: `aes-128-cbc-sha`, `aes-256-cbc-sha`, `dhe-aes-cbc-sha2`, `dhe-aes-gcm-sha2`, `ecdhe-ecdsa-aes-gcm-sha2`, `ecdhe-rsa-aes-cbc-sha2`, `ecdhe-rsa-aes-gcm-sha2`, `rsa-aes-cbc-sha2`, `rsa-aes-gcm-sha2`
        :param _builtins.str name: Specify the name of the TLS profile
        :param _builtins.str name_variable: Variable name
        :param _builtins.bool optional: Indicates if list item is considered optional.
        :param _builtins.str version: TLS Version
                 - Choices: `TLSv1.1`, `TLSv1.2`
                 - Default value: `TLSv1.1`
        :param _builtins.str version_variable: Variable name
        """
        if authentication_type is not None:
            pulumi.set(__self__, "authentication_type", authentication_type)
        if ciphersuite_list_variable is not None:
            pulumi.set(__self__, "ciphersuite_list_variable", ciphersuite_list_variable)
        if ciphersuite_lists is not None:
            pulumi.set(__self__, "ciphersuite_lists", ciphersuite_lists)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if name_variable is not None:
            pulumi.set(__self__, "name_variable", name_variable)
        if optional is not None:
            pulumi.set(__self__, "optional", optional)
        if version is not None:
            pulumi.set(__self__, "version", version)
        if version_variable is not None:
            pulumi.set(__self__, "version_variable", version_variable)

    @_builtins.property
    @pulumi.getter(name="authenticationType")
    def authentication_type(self) -> Optional[_builtins.str]:
        """
        Authentication Type
          - Choices: `Server`, `Mutual`
        """
        return pulumi.get(self, "authentication_type")

    @_builtins.property
    @pulumi.getter(name="ciphersuiteListVariable")
    def ciphersuite_list_variable(self) -> Optional[_builtins.str]:
        """
        Variable name
        """
        return pulumi.get(self, "ciphersuite_list_variable")

    @_builtins.property
    @pulumi.getter(name="ciphersuiteLists")
    def ciphersuite_lists(self) -> Optional[Sequence[_builtins.str]]:
        """
        Syslog secure server ciphersuites. Possible values: `aes-128-cbc-sha`, `aes-256-cbc-sha`, `dhe-aes-cbc-sha2`, `dhe-aes-gcm-sha2`, `ecdhe-ecdsa-aes-gcm-sha2`, `ecdhe-rsa-aes-cbc-sha2`, `ecdhe-rsa-aes-gcm-sha2`, `rsa-aes-cbc-sha2`, `rsa-aes-gcm-sha2`
        """
        return pulumi.get(self, "ciphersuite_lists")

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[_builtins.str]:
        """
        Specify the name of the TLS profile
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter(name="nameVariable")
    def name_variable(self) -> Optional[_builtins.str]:
        """
        Variable name
        """
        return pulumi.get(self, "name_variable")

    @_builtins.property
    @pulumi.getter
    def optional(self) -> Optional[_builtins.bool]:
        """
        Indicates if list item is considered optional.
        """
        return pulumi.get(self, "optional")

    @_builtins.property
    @pulumi.getter
    def version(self) -> Optional[_builtins.str]:
        """
        TLS Version
          - Choices: `TLSv1.1`, `TLSv1.2`
          - Default value: `TLSv1.1`
        """
        return pulumi.get(self, "version")

    @_builtins.property
    @pulumi.getter(name="versionVariable")
    def version_variable(self) -> Optional[_builtins.str]:
        """
        Variable name
        """
        return pulumi.get(self, "version_variable")


@pulumi.output_type
class CiscoNtpFeatureTemplateAuthenticationKey(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "idVariable":
            suggest = "id_variable"
        elif key == "valueVariable":
            suggest = "value_variable"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in CiscoNtpFeatureTemplateAuthenticationKey. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        CiscoNtpFeatureTemplateAuthenticationKey.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        CiscoNtpFeatureTemplateAuthenticationKey.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 id: Optional[_builtins.int] = None,
                 id_variable: Optional[_builtins.str] = None,
                 optional: Optional[_builtins.bool] = None,
                 value: Optional[_builtins.str] = None,
                 value_variable: Optional[_builtins.str] = None):
        """
        :param _builtins.int id: MD5 authentication key ID
                 - Range: `1`-`65535`
        :param _builtins.str id_variable: Variable name
        :param _builtins.bool optional: Indicates if list item is considered optional.
        :param _builtins.str value: Enter cleartext or AES-encrypted MD5 authentication key
        :param _builtins.str value_variable: Variable name
        """
        if id is not None:
            pulumi.set(__self__, "id", id)
        if id_variable is not None:
            pulumi.set(__self__, "id_variable", id_variable)
        if optional is not None:
            pulumi.set(__self__, "optional", optional)
        if value is not None:
            pulumi.set(__self__, "value", value)
        if value_variable is not None:
            pulumi.set(__self__, "value_variable", value_variable)

    @_builtins.property
    @pulumi.getter
    def id(self) -> Optional[_builtins.int]:
        """
        MD5 authentication key ID
          - Range: `1`-`65535`
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter(name="idVariable")
    def id_variable(self) -> Optional[_builtins.str]:
        """
        Variable name
        """
        return pulumi.get(self, "id_variable")

    @_builtins.property
    @pulumi.getter
    def optional(self) -> Optional[_builtins.bool]:
        """
        Indicates if list item is considered optional.
        """
        return pulumi.get(self, "optional")

    @_builtins.property
    @pulumi.getter
    def value(self) -> Optional[_builtins.str]:
        """
        Enter cleartext or AES-encrypted MD5 authentication key
        """
        return pulumi.get(self, "value")

    @_builtins.property
    @pulumi.getter(name="valueVariable")
    def value_variable(self) -> Optional[_builtins.str]:
        """
        Variable name
        """
        return pulumi.get(self, "value_variable")


@pulumi.output_type
class CiscoNtpFeatureTemplateServer(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "authenticationKeyId":
            suggest = "authentication_key_id"
        elif key == "authenticationKeyIdVariable":
            suggest = "authentication_key_id_variable"
        elif key == "hostnameIp":
            suggest = "hostname_ip"
        elif key == "hostnameIpVariable":
            suggest = "hostname_ip_variable"
        elif key == "preferVariable":
            suggest = "prefer_variable"
        elif key == "sourceInterface":
            suggest = "source_interface"
        elif key == "sourceInterfaceVariable":
            suggest = "source_interface_variable"
        elif key == "versionVariable":
            suggest = "version_variable"
        elif key == "vpnId":
            suggest = "vpn_id"
        elif key == "vpnIdVariable":
            suggest = "vpn_id_variable"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in CiscoNtpFeatureTemplateServer. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        CiscoNtpFeatureTemplateServer.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        CiscoNtpFeatureTemplateServer.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 authentication_key_id: Optional[_builtins.int] = None,
                 authentication_key_id_variable: Optional[_builtins.str] = None,
                 hostname_ip: Optional[_builtins.str] = None,
                 hostname_ip_variable: Optional[_builtins.str] = None,
                 optional: Optional[_builtins.bool] = None,
                 prefer: Optional[_builtins.bool] = None,
                 prefer_variable: Optional[_builtins.str] = None,
                 source_interface: Optional[_builtins.str] = None,
                 source_interface_variable: Optional[_builtins.str] = None,
                 version: Optional[_builtins.int] = None,
                 version_variable: Optional[_builtins.str] = None,
                 vpn_id: Optional[_builtins.int] = None,
                 vpn_id_variable: Optional[_builtins.str] = None):
        """
        :param _builtins.int authentication_key_id: Set authentication key for the server
                 - Range: `1`-`65535`
        :param _builtins.str authentication_key_id_variable: Variable name
        :param _builtins.str hostname_ip: Set hostname or IP address of server
        :param _builtins.str hostname_ip_variable: Variable name
        :param _builtins.bool optional: Indicates if list item is considered optional.
        :param _builtins.bool prefer: Prefer this NTP server
                 - Default value: `false`
        :param _builtins.str prefer_variable: Variable name
        :param _builtins.str source_interface: Set interface to use to reach NTP server
        :param _builtins.str source_interface_variable: Variable name
        :param _builtins.int version: Set NTP version
                 - Range: `1`-`4`
                 - Default value: `4`
        :param _builtins.str version_variable: Variable name
        :param _builtins.int vpn_id: Set VPN in which NTP server is located
                 - Range: `0`-`65530`
                 - Default value: `0`
        :param _builtins.str vpn_id_variable: Variable name
        """
        if authentication_key_id is not None:
            pulumi.set(__self__, "authentication_key_id", authentication_key_id)
        if authentication_key_id_variable is not None:
            pulumi.set(__self__, "authentication_key_id_variable", authentication_key_id_variable)
        if hostname_ip is not None:
            pulumi.set(__self__, "hostname_ip", hostname_ip)
        if hostname_ip_variable is not None:
            pulumi.set(__self__, "hostname_ip_variable", hostname_ip_variable)
        if optional is not None:
            pulumi.set(__self__, "optional", optional)
        if prefer is not None:
            pulumi.set(__self__, "prefer", prefer)
        if prefer_variable is not None:
            pulumi.set(__self__, "prefer_variable", prefer_variable)
        if source_interface is not None:
            pulumi.set(__self__, "source_interface", source_interface)
        if source_interface_variable is not None:
            pulumi.set(__self__, "source_interface_variable", source_interface_variable)
        if version is not None:
            pulumi.set(__self__, "version", version)
        if version_variable is not None:
            pulumi.set(__self__, "version_variable", version_variable)
        if vpn_id is not None:
            pulumi.set(__self__, "vpn_id", vpn_id)
        if vpn_id_variable is not None:
            pulumi.set(__self__, "vpn_id_variable", vpn_id_variable)

    @_builtins.property
    @pulumi.getter(name="authenticationKeyId")
    def authentication_key_id(self) -> Optional[_builtins.int]:
        """
        Set authentication key for the server
          - Range: `1`-`65535`
        """
        return pulumi.get(self, "authentication_key_id")

    @_builtins.property
    @pulumi.getter(name="authenticationKeyIdVariable")
    def authentication_key_id_variable(self) -> Optional[_builtins.str]:
        """
        Variable name
        """
        return pulumi.get(self, "authentication_key_id_variable")

    @_builtins.property
    @pulumi.getter(name="hostnameIp")
    def hostname_ip(self) -> Optional[_builtins.str]:
        """
        Set hostname or IP address of server
        """
        return pulumi.get(self, "hostname_ip")

    @_builtins.property
    @pulumi.getter(name="hostnameIpVariable")
    def hostname_ip_variable(self) -> Optional[_builtins.str]:
        """
        Variable name
        """
        return pulumi.get(self, "hostname_ip_variable")

    @_builtins.property
    @pulumi.getter
    def optional(self) -> Optional[_builtins.bool]:
        """
        Indicates if list item is considered optional.
        """
        return pulumi.get(self, "optional")

    @_builtins.property
    @pulumi.getter
    def prefer(self) -> Optional[_builtins.bool]:
        """
        Prefer this NTP server
          - Default value: `false`
        """
        return pulumi.get(self, "prefer")

    @_builtins.property
    @pulumi.getter(name="preferVariable")
    def prefer_variable(self) -> Optional[_builtins.str]:
        """
        Variable name
        """
        return pulumi.get(self, "prefer_variable")

    @_builtins.property
    @pulumi.getter(name="sourceInterface")
    def source_interface(self) -> Optional[_builtins.str]:
        """
        Set interface to use to reach NTP server
        """
        return pulumi.get(self, "source_interface")

    @_builtins.property
    @pulumi.getter(name="sourceInterfaceVariable")
    def source_interface_variable(self) -> Optional[_builtins.str]:
        """
        Variable name
        """
        return pulumi.get(self, "source_interface_variable")

    @_builtins.property
    @pulumi.getter
    def version(self) -> Optional[_builtins.int]:
        """
        Set NTP version
          - Range: `1`-`4`
          - Default value: `4`
        """
        return pulumi.get(self, "version")

    @_builtins.property
    @pulumi.getter(name="versionVariable")
    def version_variable(self) -> Optional[_builtins.str]:
        """
        Variable name
        """
        return pulumi.get(self, "version_variable")

    @_builtins.property
    @pulumi.getter(name="vpnId")
    def vpn_id(self) -> Optional[_builtins.int]:
        """
        Set VPN in which NTP server is located
          - Range: `0`-`65530`
          - Default value: `0`
        """
        return pulumi.get(self, "vpn_id")

    @_builtins.property
    @pulumi.getter(name="vpnIdVariable")
    def vpn_id_variable(self) -> Optional[_builtins.str]:
        """
        Variable name
        """
        return pulumi.get(self, "vpn_id_variable")


@pulumi.output_type
class CiscoOmpFeatureTemplateAdvertiseIpv4Route(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "advertiseExternalOspf":
            suggest = "advertise_external_ospf"
        elif key == "advertiseExternalOspfVariable":
            suggest = "advertise_external_ospf_variable"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in CiscoOmpFeatureTemplateAdvertiseIpv4Route. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        CiscoOmpFeatureTemplateAdvertiseIpv4Route.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        CiscoOmpFeatureTemplateAdvertiseIpv4Route.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 advertise_external_ospf: Optional[_builtins.str] = None,
                 advertise_external_ospf_variable: Optional[_builtins.str] = None,
                 optional: Optional[_builtins.bool] = None,
                 protocol: Optional[_builtins.str] = None):
        """
        :param _builtins.str advertise_external_ospf: Advertise OSPF external routes
                 - Choices: `external`
        :param _builtins.str advertise_external_ospf_variable: Variable name
        :param _builtins.bool optional: Indicates if list item is considered optional.
        :param _builtins.str protocol: Set routes to advertise
                 - Choices: `bgp`, `ospf`, `ospfv3`, `connected`, `static`, `eigrp`, `lisp`, `isis`
        """
        if advertise_external_ospf is not None:
            pulumi.set(__self__, "advertise_external_ospf", advertise_external_ospf)
        if advertise_external_ospf_variable is not None:
            pulumi.set(__self__, "advertise_external_ospf_variable", advertise_external_ospf_variable)
        if optional is not None:
            pulumi.set(__self__, "optional", optional)
        if protocol is not None:
            pulumi.set(__self__, "protocol", protocol)

    @_builtins.property
    @pulumi.getter(name="advertiseExternalOspf")
    def advertise_external_ospf(self) -> Optional[_builtins.str]:
        """
        Advertise OSPF external routes
          - Choices: `external`
        """
        return pulumi.get(self, "advertise_external_ospf")

    @_builtins.property
    @pulumi.getter(name="advertiseExternalOspfVariable")
    def advertise_external_ospf_variable(self) -> Optional[_builtins.str]:
        """
        Variable name
        """
        return pulumi.get(self, "advertise_external_ospf_variable")

    @_builtins.property
    @pulumi.getter
    def optional(self) -> Optional[_builtins.bool]:
        """
        Indicates if list item is considered optional.
        """
        return pulumi.get(self, "optional")

    @_builtins.property
    @pulumi.getter
    def protocol(self) -> Optional[_builtins.str]:
        """
        Set routes to advertise
          - Choices: `bgp`, `ospf`, `ospfv3`, `connected`, `static`, `eigrp`, `lisp`, `isis`
        """
        return pulumi.get(self, "protocol")


@pulumi.output_type
class CiscoOmpFeatureTemplateAdvertiseIpv6Route(dict):
    def __init__(__self__, *,
                 optional: Optional[_builtins.bool] = None,
                 protocol: Optional[_builtins.str] = None):
        """
        :param _builtins.bool optional: Indicates if list item is considered optional.
        :param _builtins.str protocol: Set routes to advertise
                 - Choices: `bgp`, `ospf`, `connected`, `static`, `eigrp`, `lisp`, `isis`
        """
        if optional is not None:
            pulumi.set(__self__, "optional", optional)
        if protocol is not None:
            pulumi.set(__self__, "protocol", protocol)

    @_builtins.property
    @pulumi.getter
    def optional(self) -> Optional[_builtins.bool]:
        """
        Indicates if list item is considered optional.
        """
        return pulumi.get(self, "optional")

    @_builtins.property
    @pulumi.getter
    def protocol(self) -> Optional[_builtins.str]:
        """
        Set routes to advertise
          - Choices: `bgp`, `ospf`, `connected`, `static`, `eigrp`, `lisp`, `isis`
        """
        return pulumi.get(self, "protocol")


@pulumi.output_type
class CiscoOspfFeatureTemplateArea(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "areaNumber":
            suggest = "area_number"
        elif key == "areaNumberVariable":
            suggest = "area_number_variable"
        elif key == "nssaNoSummary":
            suggest = "nssa_no_summary"
        elif key == "nssaNoSummaryVariable":
            suggest = "nssa_no_summary_variable"
        elif key == "stubNoSummary":
            suggest = "stub_no_summary"
        elif key == "stubNoSummaryVariable":
            suggest = "stub_no_summary_variable"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in CiscoOspfFeatureTemplateArea. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        CiscoOspfFeatureTemplateArea.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        CiscoOspfFeatureTemplateArea.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 area_number: Optional[_builtins.int] = None,
                 area_number_variable: Optional[_builtins.str] = None,
                 interfaces: Optional[Sequence['outputs.CiscoOspfFeatureTemplateAreaInterface']] = None,
                 nssa: Optional[_builtins.bool] = None,
                 nssa_no_summary: Optional[_builtins.bool] = None,
                 nssa_no_summary_variable: Optional[_builtins.str] = None,
                 optional: Optional[_builtins.bool] = None,
                 ranges: Optional[Sequence['outputs.CiscoOspfFeatureTemplateAreaRange']] = None,
                 stub: Optional[_builtins.bool] = None,
                 stub_no_summary: Optional[_builtins.bool] = None,
                 stub_no_summary_variable: Optional[_builtins.str] = None):
        """
        :param _builtins.int area_number: Set OSPF area number
                 - Range: `0`-`4294967295`
        :param _builtins.str area_number_variable: Variable name
        :param Sequence['CiscoOspfFeatureTemplateAreaInterfaceArgs'] interfaces: Set OSPF interface parameters
        :param _builtins.bool nssa: NSSA area
        :param _builtins.bool nssa_no_summary: Do not inject interarea routes into NSSA
                 - Default value: `false`
        :param _builtins.str nssa_no_summary_variable: Variable name
        :param _builtins.bool optional: Indicates if list item is considered optional.
        :param Sequence['CiscoOspfFeatureTemplateAreaRangeArgs'] ranges: Summarize OSPF routes at an area boundary
        :param _builtins.bool stub: Stub area
        :param _builtins.bool stub_no_summary: Do not inject interarea routes into stub
                 - Default value: `false`
        :param _builtins.str stub_no_summary_variable: Variable name
        """
        if area_number is not None:
            pulumi.set(__self__, "area_number", area_number)
        if area_number_variable is not None:
            pulumi.set(__self__, "area_number_variable", area_number_variable)
        if interfaces is not None:
            pulumi.set(__self__, "interfaces", interfaces)
        if nssa is not None:
            pulumi.set(__self__, "nssa", nssa)
        if nssa_no_summary is not None:
            pulumi.set(__self__, "nssa_no_summary", nssa_no_summary)
        if nssa_no_summary_variable is not None:
            pulumi.set(__self__, "nssa_no_summary_variable", nssa_no_summary_variable)
        if optional is not None:
            pulumi.set(__self__, "optional", optional)
        if ranges is not None:
            pulumi.set(__self__, "ranges", ranges)
        if stub is not None:
            pulumi.set(__self__, "stub", stub)
        if stub_no_summary is not None:
            pulumi.set(__self__, "stub_no_summary", stub_no_summary)
        if stub_no_summary_variable is not None:
            pulumi.set(__self__, "stub_no_summary_variable", stub_no_summary_variable)

    @_builtins.property
    @pulumi.getter(name="areaNumber")
    def area_number(self) -> Optional[_builtins.int]:
        """
        Set OSPF area number
          - Range: `0`-`4294967295`
        """
        return pulumi.get(self, "area_number")

    @_builtins.property
    @pulumi.getter(name="areaNumberVariable")
    def area_number_variable(self) -> Optional[_builtins.str]:
        """
        Variable name
        """
        return pulumi.get(self, "area_number_variable")

    @_builtins.property
    @pulumi.getter
    def interfaces(self) -> Optional[Sequence['outputs.CiscoOspfFeatureTemplateAreaInterface']]:
        """
        Set OSPF interface parameters
        """
        return pulumi.get(self, "interfaces")

    @_builtins.property
    @pulumi.getter
    def nssa(self) -> Optional[_builtins.bool]:
        """
        NSSA area
        """
        return pulumi.get(self, "nssa")

    @_builtins.property
    @pulumi.getter(name="nssaNoSummary")
    def nssa_no_summary(self) -> Optional[_builtins.bool]:
        """
        Do not inject interarea routes into NSSA
          - Default value: `false`
        """
        return pulumi.get(self, "nssa_no_summary")

    @_builtins.property
    @pulumi.getter(name="nssaNoSummaryVariable")
    def nssa_no_summary_variable(self) -> Optional[_builtins.str]:
        """
        Variable name
        """
        return pulumi.get(self, "nssa_no_summary_variable")

    @_builtins.property
    @pulumi.getter
    def optional(self) -> Optional[_builtins.bool]:
        """
        Indicates if list item is considered optional.
        """
        return pulumi.get(self, "optional")

    @_builtins.property
    @pulumi.getter
    def ranges(self) -> Optional[Sequence['outputs.CiscoOspfFeatureTemplateAreaRange']]:
        """
        Summarize OSPF routes at an area boundary
        """
        return pulumi.get(self, "ranges")

    @_builtins.property
    @pulumi.getter
    def stub(self) -> Optional[_builtins.bool]:
        """
        Stub area
        """
        return pulumi.get(self, "stub")

    @_builtins.property
    @pulumi.getter(name="stubNoSummary")
    def stub_no_summary(self) -> Optional[_builtins.bool]:
        """
        Do not inject interarea routes into stub
          - Default value: `false`
        """
        return pulumi.get(self, "stub_no_summary")

    @_builtins.property
    @pulumi.getter(name="stubNoSummaryVariable")
    def stub_no_summary_variable(self) -> Optional[_builtins.str]:
        """
        Variable name
        """
        return pulumi.get(self, "stub_no_summary_variable")


@pulumi.output_type
class CiscoOspfFeatureTemplateAreaInterface(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "authenticationMessageDigestKey":
            suggest = "authentication_message_digest_key"
        elif key == "authenticationMessageDigestKeyId":
            suggest = "authentication_message_digest_key_id"
        elif key == "authenticationMessageDigestKeyIdVariable":
            suggest = "authentication_message_digest_key_id_variable"
        elif key == "authenticationMessageDigestKeyVariable":
            suggest = "authentication_message_digest_key_variable"
        elif key == "authenticationType":
            suggest = "authentication_type"
        elif key == "authenticationTypeVariable":
            suggest = "authentication_type_variable"
        elif key == "costVariable":
            suggest = "cost_variable"
        elif key == "deadInterval":
            suggest = "dead_interval"
        elif key == "deadIntervalVariable":
            suggest = "dead_interval_variable"
        elif key == "helloInterval":
            suggest = "hello_interval"
        elif key == "helloIntervalVariable":
            suggest = "hello_interval_variable"
        elif key == "nameVariable":
            suggest = "name_variable"
        elif key == "networkVariable":
            suggest = "network_variable"
        elif key == "passiveInterface":
            suggest = "passive_interface"
        elif key == "passiveInterfaceVariable":
            suggest = "passive_interface_variable"
        elif key == "priorityVariable":
            suggest = "priority_variable"
        elif key == "retransmitInterval":
            suggest = "retransmit_interval"
        elif key == "retransmitIntervalVariable":
            suggest = "retransmit_interval_variable"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in CiscoOspfFeatureTemplateAreaInterface. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        CiscoOspfFeatureTemplateAreaInterface.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        CiscoOspfFeatureTemplateAreaInterface.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 authentication_message_digest_key: Optional[_builtins.str] = None,
                 authentication_message_digest_key_id: Optional[_builtins.int] = None,
                 authentication_message_digest_key_id_variable: Optional[_builtins.str] = None,
                 authentication_message_digest_key_variable: Optional[_builtins.str] = None,
                 authentication_type: Optional[_builtins.str] = None,
                 authentication_type_variable: Optional[_builtins.str] = None,
                 cost: Optional[_builtins.int] = None,
                 cost_variable: Optional[_builtins.str] = None,
                 dead_interval: Optional[_builtins.int] = None,
                 dead_interval_variable: Optional[_builtins.str] = None,
                 hello_interval: Optional[_builtins.int] = None,
                 hello_interval_variable: Optional[_builtins.str] = None,
                 name: Optional[_builtins.str] = None,
                 name_variable: Optional[_builtins.str] = None,
                 network: Optional[_builtins.str] = None,
                 network_variable: Optional[_builtins.str] = None,
                 optional: Optional[_builtins.bool] = None,
                 passive_interface: Optional[_builtins.bool] = None,
                 passive_interface_variable: Optional[_builtins.str] = None,
                 priority: Optional[_builtins.int] = None,
                 priority_variable: Optional[_builtins.str] = None,
                 retransmit_interval: Optional[_builtins.int] = None,
                 retransmit_interval_variable: Optional[_builtins.str] = None):
        """
        :param _builtins.str authentication_message_digest_key: Set MD5 authentication key
        :param _builtins.int authentication_message_digest_key_id: Set MD5 message digest key
                 - Range: `1`-`255`
        :param _builtins.str authentication_message_digest_key_id_variable: Variable name
        :param _builtins.str authentication_message_digest_key_variable: Variable name
        :param _builtins.str authentication_type: Set OSPF interface authentication type
                 - Choices: `simple`, `message-digest`, `null`
        :param _builtins.str authentication_type_variable: Variable name
        :param _builtins.int cost: Set cost of OSPF interface
                 - Range: `1`-`65535`
        :param _builtins.str cost_variable: Variable name
        :param _builtins.int dead_interval: Set interval after which neighbor is declared to be down
                 - Range: `1`-`65535`
                 - Default value: `40`
        :param _builtins.str dead_interval_variable: Variable name
        :param _builtins.int hello_interval: Set interval between OSPF hello packets
                 - Range: `1`-`65535`
                 - Default value: `10`
        :param _builtins.str hello_interval_variable: Variable name
        :param _builtins.str name: Set interface name
        :param _builtins.str name_variable: Variable name
        :param _builtins.str network: Set the OSPF network type
                 - Choices: `broadcast`, `point-to-point`, `non-broadcast`, `point-to-multipoint`
                 - Default value: `broadcast`
        :param _builtins.str network_variable: Variable name
        :param _builtins.bool optional: Indicates if list item is considered optional.
        :param _builtins.bool passive_interface: Set the interface to advertise its address, but not to actively run OSPF
                 - Default value: `false`
        :param _builtins.str passive_interface_variable: Variable name
        :param _builtins.int priority: Set router’s priority to be elected as designated router
                 - Range: `0`-`255`
                 - Default value: `1`
        :param _builtins.str priority_variable: Variable name
        :param _builtins.int retransmit_interval: Set time between retransmitting LSAs
                 - Range: `1`-`65535`
                 - Default value: `5`
        :param _builtins.str retransmit_interval_variable: Variable name
        """
        if authentication_message_digest_key is not None:
            pulumi.set(__self__, "authentication_message_digest_key", authentication_message_digest_key)
        if authentication_message_digest_key_id is not None:
            pulumi.set(__self__, "authentication_message_digest_key_id", authentication_message_digest_key_id)
        if authentication_message_digest_key_id_variable is not None:
            pulumi.set(__self__, "authentication_message_digest_key_id_variable", authentication_message_digest_key_id_variable)
        if authentication_message_digest_key_variable is not None:
            pulumi.set(__self__, "authentication_message_digest_key_variable", authentication_message_digest_key_variable)
        if authentication_type is not None:
            pulumi.set(__self__, "authentication_type", authentication_type)
        if authentication_type_variable is not None:
            pulumi.set(__self__, "authentication_type_variable", authentication_type_variable)
        if cost is not None:
            pulumi.set(__self__, "cost", cost)
        if cost_variable is not None:
            pulumi.set(__self__, "cost_variable", cost_variable)
        if dead_interval is not None:
            pulumi.set(__self__, "dead_interval", dead_interval)
        if dead_interval_variable is not None:
            pulumi.set(__self__, "dead_interval_variable", dead_interval_variable)
        if hello_interval is not None:
            pulumi.set(__self__, "hello_interval", hello_interval)
        if hello_interval_variable is not None:
            pulumi.set(__self__, "hello_interval_variable", hello_interval_variable)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if name_variable is not None:
            pulumi.set(__self__, "name_variable", name_variable)
        if network is not None:
            pulumi.set(__self__, "network", network)
        if network_variable is not None:
            pulumi.set(__self__, "network_variable", network_variable)
        if optional is not None:
            pulumi.set(__self__, "optional", optional)
        if passive_interface is not None:
            pulumi.set(__self__, "passive_interface", passive_interface)
        if passive_interface_variable is not None:
            pulumi.set(__self__, "passive_interface_variable", passive_interface_variable)
        if priority is not None:
            pulumi.set(__self__, "priority", priority)
        if priority_variable is not None:
            pulumi.set(__self__, "priority_variable", priority_variable)
        if retransmit_interval is not None:
            pulumi.set(__self__, "retransmit_interval", retransmit_interval)
        if retransmit_interval_variable is not None:
            pulumi.set(__self__, "retransmit_interval_variable", retransmit_interval_variable)

    @_builtins.property
    @pulumi.getter(name="authenticationMessageDigestKey")
    def authentication_message_digest_key(self) -> Optional[_builtins.str]:
        """
        Set MD5 authentication key
        """
        return pulumi.get(self, "authentication_message_digest_key")

    @_builtins.property
    @pulumi.getter(name="authenticationMessageDigestKeyId")
    def authentication_message_digest_key_id(self) -> Optional[_builtins.int]:
        """
        Set MD5 message digest key
          - Range: `1`-`255`
        """
        return pulumi.get(self, "authentication_message_digest_key_id")

    @_builtins.property
    @pulumi.getter(name="authenticationMessageDigestKeyIdVariable")
    def authentication_message_digest_key_id_variable(self) -> Optional[_builtins.str]:
        """
        Variable name
        """
        return pulumi.get(self, "authentication_message_digest_key_id_variable")

    @_builtins.property
    @pulumi.getter(name="authenticationMessageDigestKeyVariable")
    def authentication_message_digest_key_variable(self) -> Optional[_builtins.str]:
        """
        Variable name
        """
        return pulumi.get(self, "authentication_message_digest_key_variable")

    @_builtins.property
    @pulumi.getter(name="authenticationType")
    def authentication_type(self) -> Optional[_builtins.str]:
        """
        Set OSPF interface authentication type
          - Choices: `simple`, `message-digest`, `null`
        """
        return pulumi.get(self, "authentication_type")

    @_builtins.property
    @pulumi.getter(name="authenticationTypeVariable")
    def authentication_type_variable(self) -> Optional[_builtins.str]:
        """
        Variable name
        """
        return pulumi.get(self, "authentication_type_variable")

    @_builtins.property
    @pulumi.getter
    def cost(self) -> Optional[_builtins.int]:
        """
        Set cost of OSPF interface
          - Range: `1`-`65535`
        """
        return pulumi.get(self, "cost")

    @_builtins.property
    @pulumi.getter(name="costVariable")
    def cost_variable(self) -> Optional[_builtins.str]:
        """
        Variable name
        """
        return pulumi.get(self, "cost_variable")

    @_builtins.property
    @pulumi.getter(name="deadInterval")
    def dead_interval(self) -> Optional[_builtins.int]:
        """
        Set interval after which neighbor is declared to be down
          - Range: `1`-`65535`
          - Default value: `40`
        """
        return pulumi.get(self, "dead_interval")

    @_builtins.property
    @pulumi.getter(name="deadIntervalVariable")
    def dead_interval_variable(self) -> Optional[_builtins.str]:
        """
        Variable name
        """
        return pulumi.get(self, "dead_interval_variable")

    @_builtins.property
    @pulumi.getter(name="helloInterval")
    def hello_interval(self) -> Optional[_builtins.int]:
        """
        Set interval between OSPF hello packets
          - Range: `1`-`65535`
          - Default value: `10`
        """
        return pulumi.get(self, "hello_interval")

    @_builtins.property
    @pulumi.getter(name="helloIntervalVariable")
    def hello_interval_variable(self) -> Optional[_builtins.str]:
        """
        Variable name
        """
        return pulumi.get(self, "hello_interval_variable")

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[_builtins.str]:
        """
        Set interface name
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter(name="nameVariable")
    def name_variable(self) -> Optional[_builtins.str]:
        """
        Variable name
        """
        return pulumi.get(self, "name_variable")

    @_builtins.property
    @pulumi.getter
    def network(self) -> Optional[_builtins.str]:
        """
        Set the OSPF network type
          - Choices: `broadcast`, `point-to-point`, `non-broadcast`, `point-to-multipoint`
          - Default value: `broadcast`
        """
        return pulumi.get(self, "network")

    @_builtins.property
    @pulumi.getter(name="networkVariable")
    def network_variable(self) -> Optional[_builtins.str]:
        """
        Variable name
        """
        return pulumi.get(self, "network_variable")

    @_builtins.property
    @pulumi.getter
    def optional(self) -> Optional[_builtins.bool]:
        """
        Indicates if list item is considered optional.
        """
        return pulumi.get(self, "optional")

    @_builtins.property
    @pulumi.getter(name="passiveInterface")
    def passive_interface(self) -> Optional[_builtins.bool]:
        """
        Set the interface to advertise its address, but not to actively run OSPF
          - Default value: `false`
        """
        return pulumi.get(self, "passive_interface")

    @_builtins.property
    @pulumi.getter(name="passiveInterfaceVariable")
    def passive_interface_variable(self) -> Optional[_builtins.str]:
        """
        Variable name
        """
        return pulumi.get(self, "passive_interface_variable")

    @_builtins.property
    @pulumi.getter
    def priority(self) -> Optional[_builtins.int]:
        """
        Set router’s priority to be elected as designated router
          - Range: `0`-`255`
          - Default value: `1`
        """
        return pulumi.get(self, "priority")

    @_builtins.property
    @pulumi.getter(name="priorityVariable")
    def priority_variable(self) -> Optional[_builtins.str]:
        """
        Variable name
        """
        return pulumi.get(self, "priority_variable")

    @_builtins.property
    @pulumi.getter(name="retransmitInterval")
    def retransmit_interval(self) -> Optional[_builtins.int]:
        """
        Set time between retransmitting LSAs
          - Range: `1`-`65535`
          - Default value: `5`
        """
        return pulumi.get(self, "retransmit_interval")

    @_builtins.property
    @pulumi.getter(name="retransmitIntervalVariable")
    def retransmit_interval_variable(self) -> Optional[_builtins.str]:
        """
        Variable name
        """
        return pulumi.get(self, "retransmit_interval_variable")


@pulumi.output_type
class CiscoOspfFeatureTemplateAreaRange(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "addressVariable":
            suggest = "address_variable"
        elif key == "costVariable":
            suggest = "cost_variable"
        elif key == "noAdvertise":
            suggest = "no_advertise"
        elif key == "noAdvertiseVariable":
            suggest = "no_advertise_variable"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in CiscoOspfFeatureTemplateAreaRange. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        CiscoOspfFeatureTemplateAreaRange.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        CiscoOspfFeatureTemplateAreaRange.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 address: Optional[_builtins.str] = None,
                 address_variable: Optional[_builtins.str] = None,
                 cost: Optional[_builtins.int] = None,
                 cost_variable: Optional[_builtins.str] = None,
                 no_advertise: Optional[_builtins.bool] = None,
                 no_advertise_variable: Optional[_builtins.str] = None,
                 optional: Optional[_builtins.bool] = None):
        """
        :param _builtins.str address: Set matching prefix
        :param _builtins.str address_variable: Variable name
        :param _builtins.int cost: Set cost for this range
                 - Range: `0`-`16777214`
        :param _builtins.str cost_variable: Variable name
        :param _builtins.bool no_advertise: Do not advertise this range
                 - Default value: `false`
        :param _builtins.str no_advertise_variable: Variable name
        :param _builtins.bool optional: Indicates if list item is considered optional.
        """
        if address is not None:
            pulumi.set(__self__, "address", address)
        if address_variable is not None:
            pulumi.set(__self__, "address_variable", address_variable)
        if cost is not None:
            pulumi.set(__self__, "cost", cost)
        if cost_variable is not None:
            pulumi.set(__self__, "cost_variable", cost_variable)
        if no_advertise is not None:
            pulumi.set(__self__, "no_advertise", no_advertise)
        if no_advertise_variable is not None:
            pulumi.set(__self__, "no_advertise_variable", no_advertise_variable)
        if optional is not None:
            pulumi.set(__self__, "optional", optional)

    @_builtins.property
    @pulumi.getter
    def address(self) -> Optional[_builtins.str]:
        """
        Set matching prefix
        """
        return pulumi.get(self, "address")

    @_builtins.property
    @pulumi.getter(name="addressVariable")
    def address_variable(self) -> Optional[_builtins.str]:
        """
        Variable name
        """
        return pulumi.get(self, "address_variable")

    @_builtins.property
    @pulumi.getter
    def cost(self) -> Optional[_builtins.int]:
        """
        Set cost for this range
          - Range: `0`-`16777214`
        """
        return pulumi.get(self, "cost")

    @_builtins.property
    @pulumi.getter(name="costVariable")
    def cost_variable(self) -> Optional[_builtins.str]:
        """
        Variable name
        """
        return pulumi.get(self, "cost_variable")

    @_builtins.property
    @pulumi.getter(name="noAdvertise")
    def no_advertise(self) -> Optional[_builtins.bool]:
        """
        Do not advertise this range
          - Default value: `false`
        """
        return pulumi.get(self, "no_advertise")

    @_builtins.property
    @pulumi.getter(name="noAdvertiseVariable")
    def no_advertise_variable(self) -> Optional[_builtins.str]:
        """
        Variable name
        """
        return pulumi.get(self, "no_advertise_variable")

    @_builtins.property
    @pulumi.getter
    def optional(self) -> Optional[_builtins.bool]:
        """
        Indicates if list item is considered optional.
        """
        return pulumi.get(self, "optional")


@pulumi.output_type
class CiscoOspfFeatureTemplateMaxMetricRouterLsa(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "adType":
            suggest = "ad_type"
        elif key == "timeVariable":
            suggest = "time_variable"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in CiscoOspfFeatureTemplateMaxMetricRouterLsa. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        CiscoOspfFeatureTemplateMaxMetricRouterLsa.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        CiscoOspfFeatureTemplateMaxMetricRouterLsa.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 ad_type: Optional[_builtins.str] = None,
                 optional: Optional[_builtins.bool] = None,
                 time: Optional[_builtins.int] = None,
                 time_variable: Optional[_builtins.str] = None):
        """
        :param _builtins.str ad_type: Set the router LSA advertisement type
                 - Choices: `administrative`, `on-startup`
        :param _builtins.bool optional: Indicates if list item is considered optional.
        :param _builtins.int time: Set how long to advertise maximum metric after router starts up
                 - Range: `5`-`86400`
        :param _builtins.str time_variable: Variable name
        """
        if ad_type is not None:
            pulumi.set(__self__, "ad_type", ad_type)
        if optional is not None:
            pulumi.set(__self__, "optional", optional)
        if time is not None:
            pulumi.set(__self__, "time", time)
        if time_variable is not None:
            pulumi.set(__self__, "time_variable", time_variable)

    @_builtins.property
    @pulumi.getter(name="adType")
    def ad_type(self) -> Optional[_builtins.str]:
        """
        Set the router LSA advertisement type
          - Choices: `administrative`, `on-startup`
        """
        return pulumi.get(self, "ad_type")

    @_builtins.property
    @pulumi.getter
    def optional(self) -> Optional[_builtins.bool]:
        """
        Indicates if list item is considered optional.
        """
        return pulumi.get(self, "optional")

    @_builtins.property
    @pulumi.getter
    def time(self) -> Optional[_builtins.int]:
        """
        Set how long to advertise maximum metric after router starts up
          - Range: `5`-`86400`
        """
        return pulumi.get(self, "time")

    @_builtins.property
    @pulumi.getter(name="timeVariable")
    def time_variable(self) -> Optional[_builtins.str]:
        """
        Variable name
        """
        return pulumi.get(self, "time_variable")


@pulumi.output_type
class CiscoOspfFeatureTemplateRedistribute(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "natDia":
            suggest = "nat_dia"
        elif key == "natDiaVariable":
            suggest = "nat_dia_variable"
        elif key == "protocolVariable":
            suggest = "protocol_variable"
        elif key == "routePolicy":
            suggest = "route_policy"
        elif key == "routePolicyVariable":
            suggest = "route_policy_variable"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in CiscoOspfFeatureTemplateRedistribute. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        CiscoOspfFeatureTemplateRedistribute.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        CiscoOspfFeatureTemplateRedistribute.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 nat_dia: Optional[_builtins.bool] = None,
                 nat_dia_variable: Optional[_builtins.str] = None,
                 optional: Optional[_builtins.bool] = None,
                 protocol: Optional[_builtins.str] = None,
                 protocol_variable: Optional[_builtins.str] = None,
                 route_policy: Optional[_builtins.str] = None,
                 route_policy_variable: Optional[_builtins.str] = None):
        """
        :param _builtins.bool nat_dia: Enable NAT DIA for redistributed routes
                 - Default value: `true`
        :param _builtins.str nat_dia_variable: Variable name
        :param _builtins.bool optional: Indicates if list item is considered optional.
        :param _builtins.str protocol: Set the protocol
                 - Choices: `static`, `connected`, `bgp`, `omp`, `nat`, `eigrp`
        :param _builtins.str protocol_variable: Variable name
        :param _builtins.str route_policy: Set route policy to apply to redistributed routes
        :param _builtins.str route_policy_variable: Variable name
        """
        if nat_dia is not None:
            pulumi.set(__self__, "nat_dia", nat_dia)
        if nat_dia_variable is not None:
            pulumi.set(__self__, "nat_dia_variable", nat_dia_variable)
        if optional is not None:
            pulumi.set(__self__, "optional", optional)
        if protocol is not None:
            pulumi.set(__self__, "protocol", protocol)
        if protocol_variable is not None:
            pulumi.set(__self__, "protocol_variable", protocol_variable)
        if route_policy is not None:
            pulumi.set(__self__, "route_policy", route_policy)
        if route_policy_variable is not None:
            pulumi.set(__self__, "route_policy_variable", route_policy_variable)

    @_builtins.property
    @pulumi.getter(name="natDia")
    def nat_dia(self) -> Optional[_builtins.bool]:
        """
        Enable NAT DIA for redistributed routes
          - Default value: `true`
        """
        return pulumi.get(self, "nat_dia")

    @_builtins.property
    @pulumi.getter(name="natDiaVariable")
    def nat_dia_variable(self) -> Optional[_builtins.str]:
        """
        Variable name
        """
        return pulumi.get(self, "nat_dia_variable")

    @_builtins.property
    @pulumi.getter
    def optional(self) -> Optional[_builtins.bool]:
        """
        Indicates if list item is considered optional.
        """
        return pulumi.get(self, "optional")

    @_builtins.property
    @pulumi.getter
    def protocol(self) -> Optional[_builtins.str]:
        """
        Set the protocol
          - Choices: `static`, `connected`, `bgp`, `omp`, `nat`, `eigrp`
        """
        return pulumi.get(self, "protocol")

    @_builtins.property
    @pulumi.getter(name="protocolVariable")
    def protocol_variable(self) -> Optional[_builtins.str]:
        """
        Variable name
        """
        return pulumi.get(self, "protocol_variable")

    @_builtins.property
    @pulumi.getter(name="routePolicy")
    def route_policy(self) -> Optional[_builtins.str]:
        """
        Set route policy to apply to redistributed routes
        """
        return pulumi.get(self, "route_policy")

    @_builtins.property
    @pulumi.getter(name="routePolicyVariable")
    def route_policy_variable(self) -> Optional[_builtins.str]:
        """
        Variable name
        """
        return pulumi.get(self, "route_policy_variable")


@pulumi.output_type
class CiscoOspfFeatureTemplateRoutePolicy(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "directionVariable":
            suggest = "direction_variable"
        elif key == "policyName":
            suggest = "policy_name"
        elif key == "policyNameVariable":
            suggest = "policy_name_variable"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in CiscoOspfFeatureTemplateRoutePolicy. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        CiscoOspfFeatureTemplateRoutePolicy.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        CiscoOspfFeatureTemplateRoutePolicy.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 direction: Optional[_builtins.str] = None,
                 direction_variable: Optional[_builtins.str] = None,
                 optional: Optional[_builtins.bool] = None,
                 policy_name: Optional[_builtins.str] = None,
                 policy_name_variable: Optional[_builtins.str] = None):
        """
        :param _builtins.str direction: Set direction to apply policy
                 - Choices: `in`
        :param _builtins.str direction_variable: Variable name
        :param _builtins.bool optional: Indicates if list item is considered optional.
        :param _builtins.str policy_name: Name of route policy
        :param _builtins.str policy_name_variable: Variable name
        """
        if direction is not None:
            pulumi.set(__self__, "direction", direction)
        if direction_variable is not None:
            pulumi.set(__self__, "direction_variable", direction_variable)
        if optional is not None:
            pulumi.set(__self__, "optional", optional)
        if policy_name is not None:
            pulumi.set(__self__, "policy_name", policy_name)
        if policy_name_variable is not None:
            pulumi.set(__self__, "policy_name_variable", policy_name_variable)

    @_builtins.property
    @pulumi.getter
    def direction(self) -> Optional[_builtins.str]:
        """
        Set direction to apply policy
          - Choices: `in`
        """
        return pulumi.get(self, "direction")

    @_builtins.property
    @pulumi.getter(name="directionVariable")
    def direction_variable(self) -> Optional[_builtins.str]:
        """
        Variable name
        """
        return pulumi.get(self, "direction_variable")

    @_builtins.property
    @pulumi.getter
    def optional(self) -> Optional[_builtins.bool]:
        """
        Indicates if list item is considered optional.
        """
        return pulumi.get(self, "optional")

    @_builtins.property
    @pulumi.getter(name="policyName")
    def policy_name(self) -> Optional[_builtins.str]:
        """
        Name of route policy
        """
        return pulumi.get(self, "policy_name")

    @_builtins.property
    @pulumi.getter(name="policyNameVariable")
    def policy_name_variable(self) -> Optional[_builtins.str]:
        """
        Variable name
        """
        return pulumi.get(self, "policy_name_variable")


@pulumi.output_type
class CiscoOspfv3FeatureTemplateIpv4Area(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "areaNumber":
            suggest = "area_number"
        elif key == "areaNumberVariable":
            suggest = "area_number_variable"
        elif key == "normalVariable":
            suggest = "normal_variable"
        elif key == "nssaNoSummary":
            suggest = "nssa_no_summary"
        elif key == "nssaNoSummaryVariable":
            suggest = "nssa_no_summary_variable"
        elif key == "stubNoSummary":
            suggest = "stub_no_summary"
        elif key == "stubNoSummaryVariable":
            suggest = "stub_no_summary_variable"
        elif key == "translateVariable":
            suggest = "translate_variable"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in CiscoOspfv3FeatureTemplateIpv4Area. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        CiscoOspfv3FeatureTemplateIpv4Area.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        CiscoOspfv3FeatureTemplateIpv4Area.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 area_number: Optional[_builtins.int] = None,
                 area_number_variable: Optional[_builtins.str] = None,
                 interfaces: Optional[Sequence['outputs.CiscoOspfv3FeatureTemplateIpv4AreaInterface']] = None,
                 normal: Optional[_builtins.bool] = None,
                 normal_variable: Optional[_builtins.str] = None,
                 nssa: Optional[_builtins.bool] = None,
                 nssa_no_summary: Optional[_builtins.bool] = None,
                 nssa_no_summary_variable: Optional[_builtins.str] = None,
                 optional: Optional[_builtins.bool] = None,
                 ranges: Optional[Sequence['outputs.CiscoOspfv3FeatureTemplateIpv4AreaRange']] = None,
                 stub: Optional[_builtins.bool] = None,
                 stub_no_summary: Optional[_builtins.bool] = None,
                 stub_no_summary_variable: Optional[_builtins.str] = None,
                 translate: Optional[_builtins.str] = None,
                 translate_variable: Optional[_builtins.str] = None):
        """
        :param _builtins.int area_number: Set OSPF area number
                 - Range: `0`-`4294967295`
        :param _builtins.str area_number_variable: Variable name
        :param Sequence['CiscoOspfv3FeatureTemplateIpv4AreaInterfaceArgs'] interfaces: Set OSPF interface parameters
        :param _builtins.bool normal: Area Type Normal
                 - Default value: `false`
        :param _builtins.str normal_variable: Variable name
        :param _builtins.bool nssa: NSSA area
        :param _builtins.bool nssa_no_summary: Do not inject interarea routes into NSSA
                 - Default value: `false`
        :param _builtins.str nssa_no_summary_variable: Variable name
        :param _builtins.bool optional: Indicates if list item is considered optional.
        :param Sequence['CiscoOspfv3FeatureTemplateIpv4AreaRangeArgs'] ranges: Summarize OSPF routes at an area boundary
        :param _builtins.bool stub: Stub area
        :param _builtins.bool stub_no_summary: Do not inject interarea routes into stub
                 - Default value: `false`
        :param _builtins.str stub_no_summary_variable: Variable name
        :param _builtins.str translate: Always Translate LSAs on this ABR
                 - Choices: `always`
        :param _builtins.str translate_variable: Variable name
        """
        if area_number is not None:
            pulumi.set(__self__, "area_number", area_number)
        if area_number_variable is not None:
            pulumi.set(__self__, "area_number_variable", area_number_variable)
        if interfaces is not None:
            pulumi.set(__self__, "interfaces", interfaces)
        if normal is not None:
            pulumi.set(__self__, "normal", normal)
        if normal_variable is not None:
            pulumi.set(__self__, "normal_variable", normal_variable)
        if nssa is not None:
            pulumi.set(__self__, "nssa", nssa)
        if nssa_no_summary is not None:
            pulumi.set(__self__, "nssa_no_summary", nssa_no_summary)
        if nssa_no_summary_variable is not None:
            pulumi.set(__self__, "nssa_no_summary_variable", nssa_no_summary_variable)
        if optional is not None:
            pulumi.set(__self__, "optional", optional)
        if ranges is not None:
            pulumi.set(__self__, "ranges", ranges)
        if stub is not None:
            pulumi.set(__self__, "stub", stub)
        if stub_no_summary is not None:
            pulumi.set(__self__, "stub_no_summary", stub_no_summary)
        if stub_no_summary_variable is not None:
            pulumi.set(__self__, "stub_no_summary_variable", stub_no_summary_variable)
        if translate is not None:
            pulumi.set(__self__, "translate", translate)
        if translate_variable is not None:
            pulumi.set(__self__, "translate_variable", translate_variable)

    @_builtins.property
    @pulumi.getter(name="areaNumber")
    def area_number(self) -> Optional[_builtins.int]:
        """
        Set OSPF area number
          - Range: `0`-`4294967295`
        """
        return pulumi.get(self, "area_number")

    @_builtins.property
    @pulumi.getter(name="areaNumberVariable")
    def area_number_variable(self) -> Optional[_builtins.str]:
        """
        Variable name
        """
        return pulumi.get(self, "area_number_variable")

    @_builtins.property
    @pulumi.getter
    def interfaces(self) -> Optional[Sequence['outputs.CiscoOspfv3FeatureTemplateIpv4AreaInterface']]:
        """
        Set OSPF interface parameters
        """
        return pulumi.get(self, "interfaces")

    @_builtins.property
    @pulumi.getter
    def normal(self) -> Optional[_builtins.bool]:
        """
        Area Type Normal
          - Default value: `false`
        """
        return pulumi.get(self, "normal")

    @_builtins.property
    @pulumi.getter(name="normalVariable")
    def normal_variable(self) -> Optional[_builtins.str]:
        """
        Variable name
        """
        return pulumi.get(self, "normal_variable")

    @_builtins.property
    @pulumi.getter
    def nssa(self) -> Optional[_builtins.bool]:
        """
        NSSA area
        """
        return pulumi.get(self, "nssa")

    @_builtins.property
    @pulumi.getter(name="nssaNoSummary")
    def nssa_no_summary(self) -> Optional[_builtins.bool]:
        """
        Do not inject interarea routes into NSSA
          - Default value: `false`
        """
        return pulumi.get(self, "nssa_no_summary")

    @_builtins.property
    @pulumi.getter(name="nssaNoSummaryVariable")
    def nssa_no_summary_variable(self) -> Optional[_builtins.str]:
        """
        Variable name
        """
        return pulumi.get(self, "nssa_no_summary_variable")

    @_builtins.property
    @pulumi.getter
    def optional(self) -> Optional[_builtins.bool]:
        """
        Indicates if list item is considered optional.
        """
        return pulumi.get(self, "optional")

    @_builtins.property
    @pulumi.getter
    def ranges(self) -> Optional[Sequence['outputs.CiscoOspfv3FeatureTemplateIpv4AreaRange']]:
        """
        Summarize OSPF routes at an area boundary
        """
        return pulumi.get(self, "ranges")

    @_builtins.property
    @pulumi.getter
    def stub(self) -> Optional[_builtins.bool]:
        """
        Stub area
        """
        return pulumi.get(self, "stub")

    @_builtins.property
    @pulumi.getter(name="stubNoSummary")
    def stub_no_summary(self) -> Optional[_builtins.bool]:
        """
        Do not inject interarea routes into stub
          - Default value: `false`
        """
        return pulumi.get(self, "stub_no_summary")

    @_builtins.property
    @pulumi.getter(name="stubNoSummaryVariable")
    def stub_no_summary_variable(self) -> Optional[_builtins.str]:
        """
        Variable name
        """
        return pulumi.get(self, "stub_no_summary_variable")

    @_builtins.property
    @pulumi.getter
    def translate(self) -> Optional[_builtins.str]:
        """
        Always Translate LSAs on this ABR
          - Choices: `always`
        """
        return pulumi.get(self, "translate")

    @_builtins.property
    @pulumi.getter(name="translateVariable")
    def translate_variable(self) -> Optional[_builtins.str]:
        """
        Variable name
        """
        return pulumi.get(self, "translate_variable")


@pulumi.output_type
class CiscoOspfv3FeatureTemplateIpv4AreaInterface(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "authenticationKey":
            suggest = "authentication_key"
        elif key == "authenticationKeyVariable":
            suggest = "authentication_key_variable"
        elif key == "authenticationType":
            suggest = "authentication_type"
        elif key == "authenticationTypeVariable":
            suggest = "authentication_type_variable"
        elif key == "costVariable":
            suggest = "cost_variable"
        elif key == "deadInterval":
            suggest = "dead_interval"
        elif key == "deadIntervalVariable":
            suggest = "dead_interval_variable"
        elif key == "helloInterval":
            suggest = "hello_interval"
        elif key == "helloIntervalVariable":
            suggest = "hello_interval_variable"
        elif key == "ipsecSpi":
            suggest = "ipsec_spi"
        elif key == "ipsecSpiVariable":
            suggest = "ipsec_spi_variable"
        elif key == "nameVariable":
            suggest = "name_variable"
        elif key == "networkVariable":
            suggest = "network_variable"
        elif key == "passiveInterface":
            suggest = "passive_interface"
        elif key == "passiveInterfaceVariable":
            suggest = "passive_interface_variable"
        elif key == "retransmitInterval":
            suggest = "retransmit_interval"
        elif key == "retransmitIntervalVariable":
            suggest = "retransmit_interval_variable"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in CiscoOspfv3FeatureTemplateIpv4AreaInterface. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        CiscoOspfv3FeatureTemplateIpv4AreaInterface.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        CiscoOspfv3FeatureTemplateIpv4AreaInterface.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 authentication_key: Optional[_builtins.str] = None,
                 authentication_key_variable: Optional[_builtins.str] = None,
                 authentication_type: Optional[_builtins.str] = None,
                 authentication_type_variable: Optional[_builtins.str] = None,
                 cost: Optional[_builtins.int] = None,
                 cost_variable: Optional[_builtins.str] = None,
                 dead_interval: Optional[_builtins.int] = None,
                 dead_interval_variable: Optional[_builtins.str] = None,
                 hello_interval: Optional[_builtins.int] = None,
                 hello_interval_variable: Optional[_builtins.str] = None,
                 ipsec_spi: Optional[_builtins.int] = None,
                 ipsec_spi_variable: Optional[_builtins.str] = None,
                 name: Optional[_builtins.str] = None,
                 name_variable: Optional[_builtins.str] = None,
                 network: Optional[_builtins.str] = None,
                 network_variable: Optional[_builtins.str] = None,
                 optional: Optional[_builtins.bool] = None,
                 passive_interface: Optional[_builtins.bool] = None,
                 passive_interface_variable: Optional[_builtins.str] = None,
                 retransmit_interval: Optional[_builtins.int] = None,
                 retransmit_interval_variable: Optional[_builtins.str] = None):
        """
        :param _builtins.str authentication_key: Set OSPF interface authentication key
        :param _builtins.str authentication_key_variable: Variable name
        :param _builtins.str authentication_type: Set OSPF interface authentication type
                 - Choices: `md5`, `sha1`
        :param _builtins.str authentication_type_variable: Variable name
        :param _builtins.int cost: Set cost of OSPF interface
                 - Range: `1`-`65535`
        :param _builtins.str cost_variable: Variable name
        :param _builtins.int dead_interval: Set interval after which neighbor is declared to be down
                 - Range: `1`-`65535`
                 - Default value: `40`
        :param _builtins.str dead_interval_variable: Variable name
        :param _builtins.int hello_interval: Set interval between OSPF hello packets
                 - Range: `1`-`65535`
                 - Default value: `10`
        :param _builtins.str hello_interval_variable: Variable name
        :param _builtins.int ipsec_spi: Set OSPF interface authentication IPSec SPI, range 256..4294967295
                 - Range: `256`-`4294967295`
        :param _builtins.str ipsec_spi_variable: Variable name
        :param _builtins.str name: Set interface name
        :param _builtins.str name_variable: Variable name
        :param _builtins.str network: Set the OSPF network type
                 - Choices: `broadcast`, `point-to-point`, `non-broadcast`, `point-to-multipoint`
                 - Default value: `broadcast`
        :param _builtins.str network_variable: Variable name
        :param _builtins.bool optional: Indicates if list item is considered optional.
        :param _builtins.bool passive_interface: Set the interface to advertise its address, but not to actively run OSPF
                 - Default value: `false`
        :param _builtins.str passive_interface_variable: Variable name
        :param _builtins.int retransmit_interval: Set time between retransmitting LSAs
                 - Range: `1`-`65535`
                 - Default value: `5`
        :param _builtins.str retransmit_interval_variable: Variable name
        """
        if authentication_key is not None:
            pulumi.set(__self__, "authentication_key", authentication_key)
        if authentication_key_variable is not None:
            pulumi.set(__self__, "authentication_key_variable", authentication_key_variable)
        if authentication_type is not None:
            pulumi.set(__self__, "authentication_type", authentication_type)
        if authentication_type_variable is not None:
            pulumi.set(__self__, "authentication_type_variable", authentication_type_variable)
        if cost is not None:
            pulumi.set(__self__, "cost", cost)
        if cost_variable is not None:
            pulumi.set(__self__, "cost_variable", cost_variable)
        if dead_interval is not None:
            pulumi.set(__self__, "dead_interval", dead_interval)
        if dead_interval_variable is not None:
            pulumi.set(__self__, "dead_interval_variable", dead_interval_variable)
        if hello_interval is not None:
            pulumi.set(__self__, "hello_interval", hello_interval)
        if hello_interval_variable is not None:
            pulumi.set(__self__, "hello_interval_variable", hello_interval_variable)
        if ipsec_spi is not None:
            pulumi.set(__self__, "ipsec_spi", ipsec_spi)
        if ipsec_spi_variable is not None:
            pulumi.set(__self__, "ipsec_spi_variable", ipsec_spi_variable)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if name_variable is not None:
            pulumi.set(__self__, "name_variable", name_variable)
        if network is not None:
            pulumi.set(__self__, "network", network)
        if network_variable is not None:
            pulumi.set(__self__, "network_variable", network_variable)
        if optional is not None:
            pulumi.set(__self__, "optional", optional)
        if passive_interface is not None:
            pulumi.set(__self__, "passive_interface", passive_interface)
        if passive_interface_variable is not None:
            pulumi.set(__self__, "passive_interface_variable", passive_interface_variable)
        if retransmit_interval is not None:
            pulumi.set(__self__, "retransmit_interval", retransmit_interval)
        if retransmit_interval_variable is not None:
            pulumi.set(__self__, "retransmit_interval_variable", retransmit_interval_variable)

    @_builtins.property
    @pulumi.getter(name="authenticationKey")
    def authentication_key(self) -> Optional[_builtins.str]:
        """
        Set OSPF interface authentication key
        """
        return pulumi.get(self, "authentication_key")

    @_builtins.property
    @pulumi.getter(name="authenticationKeyVariable")
    def authentication_key_variable(self) -> Optional[_builtins.str]:
        """
        Variable name
        """
        return pulumi.get(self, "authentication_key_variable")

    @_builtins.property
    @pulumi.getter(name="authenticationType")
    def authentication_type(self) -> Optional[_builtins.str]:
        """
        Set OSPF interface authentication type
          - Choices: `md5`, `sha1`
        """
        return pulumi.get(self, "authentication_type")

    @_builtins.property
    @pulumi.getter(name="authenticationTypeVariable")
    def authentication_type_variable(self) -> Optional[_builtins.str]:
        """
        Variable name
        """
        return pulumi.get(self, "authentication_type_variable")

    @_builtins.property
    @pulumi.getter
    def cost(self) -> Optional[_builtins.int]:
        """
        Set cost of OSPF interface
          - Range: `1`-`65535`
        """
        return pulumi.get(self, "cost")

    @_builtins.property
    @pulumi.getter(name="costVariable")
    def cost_variable(self) -> Optional[_builtins.str]:
        """
        Variable name
        """
        return pulumi.get(self, "cost_variable")

    @_builtins.property
    @pulumi.getter(name="deadInterval")
    def dead_interval(self) -> Optional[_builtins.int]:
        """
        Set interval after which neighbor is declared to be down
          - Range: `1`-`65535`
          - Default value: `40`
        """
        return pulumi.get(self, "dead_interval")

    @_builtins.property
    @pulumi.getter(name="deadIntervalVariable")
    def dead_interval_variable(self) -> Optional[_builtins.str]:
        """
        Variable name
        """
        return pulumi.get(self, "dead_interval_variable")

    @_builtins.property
    @pulumi.getter(name="helloInterval")
    def hello_interval(self) -> Optional[_builtins.int]:
        """
        Set interval between OSPF hello packets
          - Range: `1`-`65535`
          - Default value: `10`
        """
        return pulumi.get(self, "hello_interval")

    @_builtins.property
    @pulumi.getter(name="helloIntervalVariable")
    def hello_interval_variable(self) -> Optional[_builtins.str]:
        """
        Variable name
        """
        return pulumi.get(self, "hello_interval_variable")

    @_builtins.property
    @pulumi.getter(name="ipsecSpi")
    def ipsec_spi(self) -> Optional[_builtins.int]:
        """
        Set OSPF interface authentication IPSec SPI, range 256..4294967295
          - Range: `256`-`4294967295`
        """
        return pulumi.get(self, "ipsec_spi")

    @_builtins.property
    @pulumi.getter(name="ipsecSpiVariable")
    def ipsec_spi_variable(self) -> Optional[_builtins.str]:
        """
        Variable name
        """
        return pulumi.get(self, "ipsec_spi_variable")

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[_builtins.str]:
        """
        Set interface name
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter(name="nameVariable")
    def name_variable(self) -> Optional[_builtins.str]:
        """
        Variable name
        """
        return pulumi.get(self, "name_variable")

    @_builtins.property
    @pulumi.getter
    def network(self) -> Optional[_builtins.str]:
        """
        Set the OSPF network type
          - Choices: `broadcast`, `point-to-point`, `non-broadcast`, `point-to-multipoint`
          - Default value: `broadcast`
        """
        return pulumi.get(self, "network")

    @_builtins.property
    @pulumi.getter(name="networkVariable")
    def network_variable(self) -> Optional[_builtins.str]:
        """
        Variable name
        """
        return pulumi.get(self, "network_variable")

    @_builtins.property
    @pulumi.getter
    def optional(self) -> Optional[_builtins.bool]:
        """
        Indicates if list item is considered optional.
        """
        return pulumi.get(self, "optional")

    @_builtins.property
    @pulumi.getter(name="passiveInterface")
    def passive_interface(self) -> Optional[_builtins.bool]:
        """
        Set the interface to advertise its address, but not to actively run OSPF
          - Default value: `false`
        """
        return pulumi.get(self, "passive_interface")

    @_builtins.property
    @pulumi.getter(name="passiveInterfaceVariable")
    def passive_interface_variable(self) -> Optional[_builtins.str]:
        """
        Variable name
        """
        return pulumi.get(self, "passive_interface_variable")

    @_builtins.property
    @pulumi.getter(name="retransmitInterval")
    def retransmit_interval(self) -> Optional[_builtins.int]:
        """
        Set time between retransmitting LSAs
          - Range: `1`-`65535`
          - Default value: `5`
        """
        return pulumi.get(self, "retransmit_interval")

    @_builtins.property
    @pulumi.getter(name="retransmitIntervalVariable")
    def retransmit_interval_variable(self) -> Optional[_builtins.str]:
        """
        Variable name
        """
        return pulumi.get(self, "retransmit_interval_variable")


@pulumi.output_type
class CiscoOspfv3FeatureTemplateIpv4AreaRange(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "addressVariable":
            suggest = "address_variable"
        elif key == "costVariable":
            suggest = "cost_variable"
        elif key == "noAdvertise":
            suggest = "no_advertise"
        elif key == "noAdvertiseVariable":
            suggest = "no_advertise_variable"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in CiscoOspfv3FeatureTemplateIpv4AreaRange. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        CiscoOspfv3FeatureTemplateIpv4AreaRange.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        CiscoOspfv3FeatureTemplateIpv4AreaRange.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 address: Optional[_builtins.str] = None,
                 address_variable: Optional[_builtins.str] = None,
                 cost: Optional[_builtins.int] = None,
                 cost_variable: Optional[_builtins.str] = None,
                 no_advertise: Optional[_builtins.bool] = None,
                 no_advertise_variable: Optional[_builtins.str] = None,
                 optional: Optional[_builtins.bool] = None):
        """
        :param _builtins.str address: Set Matching Prefix
        :param _builtins.str address_variable: Variable name
        :param _builtins.int cost: Set cost for this range
                 - Range: `0`-`16777214`
        :param _builtins.str cost_variable: Variable name
        :param _builtins.bool no_advertise: Do not advertise this range
                 - Default value: `false`
        :param _builtins.str no_advertise_variable: Variable name
        :param _builtins.bool optional: Indicates if list item is considered optional.
        """
        if address is not None:
            pulumi.set(__self__, "address", address)
        if address_variable is not None:
            pulumi.set(__self__, "address_variable", address_variable)
        if cost is not None:
            pulumi.set(__self__, "cost", cost)
        if cost_variable is not None:
            pulumi.set(__self__, "cost_variable", cost_variable)
        if no_advertise is not None:
            pulumi.set(__self__, "no_advertise", no_advertise)
        if no_advertise_variable is not None:
            pulumi.set(__self__, "no_advertise_variable", no_advertise_variable)
        if optional is not None:
            pulumi.set(__self__, "optional", optional)

    @_builtins.property
    @pulumi.getter
    def address(self) -> Optional[_builtins.str]:
        """
        Set Matching Prefix
        """
        return pulumi.get(self, "address")

    @_builtins.property
    @pulumi.getter(name="addressVariable")
    def address_variable(self) -> Optional[_builtins.str]:
        """
        Variable name
        """
        return pulumi.get(self, "address_variable")

    @_builtins.property
    @pulumi.getter
    def cost(self) -> Optional[_builtins.int]:
        """
        Set cost for this range
          - Range: `0`-`16777214`
        """
        return pulumi.get(self, "cost")

    @_builtins.property
    @pulumi.getter(name="costVariable")
    def cost_variable(self) -> Optional[_builtins.str]:
        """
        Variable name
        """
        return pulumi.get(self, "cost_variable")

    @_builtins.property
    @pulumi.getter(name="noAdvertise")
    def no_advertise(self) -> Optional[_builtins.bool]:
        """
        Do not advertise this range
          - Default value: `false`
        """
        return pulumi.get(self, "no_advertise")

    @_builtins.property
    @pulumi.getter(name="noAdvertiseVariable")
    def no_advertise_variable(self) -> Optional[_builtins.str]:
        """
        Variable name
        """
        return pulumi.get(self, "no_advertise_variable")

    @_builtins.property
    @pulumi.getter
    def optional(self) -> Optional[_builtins.bool]:
        """
        Indicates if list item is considered optional.
        """
        return pulumi.get(self, "optional")


@pulumi.output_type
class CiscoOspfv3FeatureTemplateIpv4MaxMetricRouterLsa(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "adType":
            suggest = "ad_type"
        elif key == "timeVariable":
            suggest = "time_variable"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in CiscoOspfv3FeatureTemplateIpv4MaxMetricRouterLsa. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        CiscoOspfv3FeatureTemplateIpv4MaxMetricRouterLsa.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        CiscoOspfv3FeatureTemplateIpv4MaxMetricRouterLsa.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 ad_type: Optional[_builtins.str] = None,
                 optional: Optional[_builtins.bool] = None,
                 time: Optional[_builtins.int] = None,
                 time_variable: Optional[_builtins.str] = None):
        """
        :param _builtins.str ad_type: Set the router LSA advertisement type
                 - Choices: `on-startup`
        :param _builtins.bool optional: Indicates if list item is considered optional.
        :param _builtins.int time: Set how long to advertise maximum metric after router starts up
                 - Range: `5`-`86400`
        :param _builtins.str time_variable: Variable name
        """
        if ad_type is not None:
            pulumi.set(__self__, "ad_type", ad_type)
        if optional is not None:
            pulumi.set(__self__, "optional", optional)
        if time is not None:
            pulumi.set(__self__, "time", time)
        if time_variable is not None:
            pulumi.set(__self__, "time_variable", time_variable)

    @_builtins.property
    @pulumi.getter(name="adType")
    def ad_type(self) -> Optional[_builtins.str]:
        """
        Set the router LSA advertisement type
          - Choices: `on-startup`
        """
        return pulumi.get(self, "ad_type")

    @_builtins.property
    @pulumi.getter
    def optional(self) -> Optional[_builtins.bool]:
        """
        Indicates if list item is considered optional.
        """
        return pulumi.get(self, "optional")

    @_builtins.property
    @pulumi.getter
    def time(self) -> Optional[_builtins.int]:
        """
        Set how long to advertise maximum metric after router starts up
          - Range: `5`-`86400`
        """
        return pulumi.get(self, "time")

    @_builtins.property
    @pulumi.getter(name="timeVariable")
    def time_variable(self) -> Optional[_builtins.str]:
        """
        Variable name
        """
        return pulumi.get(self, "time_variable")


@pulumi.output_type
class CiscoOspfv3FeatureTemplateIpv4Redistribute(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "natDia":
            suggest = "nat_dia"
        elif key == "natDiaVariable":
            suggest = "nat_dia_variable"
        elif key == "protocolVariable":
            suggest = "protocol_variable"
        elif key == "routePolicy":
            suggest = "route_policy"
        elif key == "routePolicyVariable":
            suggest = "route_policy_variable"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in CiscoOspfv3FeatureTemplateIpv4Redistribute. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        CiscoOspfv3FeatureTemplateIpv4Redistribute.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        CiscoOspfv3FeatureTemplateIpv4Redistribute.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 nat_dia: Optional[_builtins.bool] = None,
                 nat_dia_variable: Optional[_builtins.str] = None,
                 optional: Optional[_builtins.bool] = None,
                 protocol: Optional[_builtins.str] = None,
                 protocol_variable: Optional[_builtins.str] = None,
                 route_policy: Optional[_builtins.str] = None,
                 route_policy_variable: Optional[_builtins.str] = None):
        """
        :param _builtins.bool nat_dia: Enable NAT DIA for redistributed routes
                 - Default value: `true`
        :param _builtins.str nat_dia_variable: Variable name
        :param _builtins.bool optional: Indicates if list item is considered optional.
        :param _builtins.str protocol: Set the protocol
                 - Choices: `bgp`, `connected`, `eigrp`, `isis`, `lisp`, `nat-route`, `omp`, `static`
        :param _builtins.str protocol_variable: Variable name
        :param _builtins.str route_policy: Set route policy to apply to redistributed routes
        :param _builtins.str route_policy_variable: Variable name
        """
        if nat_dia is not None:
            pulumi.set(__self__, "nat_dia", nat_dia)
        if nat_dia_variable is not None:
            pulumi.set(__self__, "nat_dia_variable", nat_dia_variable)
        if optional is not None:
            pulumi.set(__self__, "optional", optional)
        if protocol is not None:
            pulumi.set(__self__, "protocol", protocol)
        if protocol_variable is not None:
            pulumi.set(__self__, "protocol_variable", protocol_variable)
        if route_policy is not None:
            pulumi.set(__self__, "route_policy", route_policy)
        if route_policy_variable is not None:
            pulumi.set(__self__, "route_policy_variable", route_policy_variable)

    @_builtins.property
    @pulumi.getter(name="natDia")
    def nat_dia(self) -> Optional[_builtins.bool]:
        """
        Enable NAT DIA for redistributed routes
          - Default value: `true`
        """
        return pulumi.get(self, "nat_dia")

    @_builtins.property
    @pulumi.getter(name="natDiaVariable")
    def nat_dia_variable(self) -> Optional[_builtins.str]:
        """
        Variable name
        """
        return pulumi.get(self, "nat_dia_variable")

    @_builtins.property
    @pulumi.getter
    def optional(self) -> Optional[_builtins.bool]:
        """
        Indicates if list item is considered optional.
        """
        return pulumi.get(self, "optional")

    @_builtins.property
    @pulumi.getter
    def protocol(self) -> Optional[_builtins.str]:
        """
        Set the protocol
          - Choices: `bgp`, `connected`, `eigrp`, `isis`, `lisp`, `nat-route`, `omp`, `static`
        """
        return pulumi.get(self, "protocol")

    @_builtins.property
    @pulumi.getter(name="protocolVariable")
    def protocol_variable(self) -> Optional[_builtins.str]:
        """
        Variable name
        """
        return pulumi.get(self, "protocol_variable")

    @_builtins.property
    @pulumi.getter(name="routePolicy")
    def route_policy(self) -> Optional[_builtins.str]:
        """
        Set route policy to apply to redistributed routes
        """
        return pulumi.get(self, "route_policy")

    @_builtins.property
    @pulumi.getter(name="routePolicyVariable")
    def route_policy_variable(self) -> Optional[_builtins.str]:
        """
        Variable name
        """
        return pulumi.get(self, "route_policy_variable")


@pulumi.output_type
class CiscoOspfv3FeatureTemplateIpv6Area(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "areaNumber":
            suggest = "area_number"
        elif key == "areaNumberVariable":
            suggest = "area_number_variable"
        elif key == "normalVariable":
            suggest = "normal_variable"
        elif key == "nssaNoSummary":
            suggest = "nssa_no_summary"
        elif key == "nssaNoSummaryVariable":
            suggest = "nssa_no_summary_variable"
        elif key == "stubNoSummary":
            suggest = "stub_no_summary"
        elif key == "stubNoSummaryVariable":
            suggest = "stub_no_summary_variable"
        elif key == "translateVariable":
            suggest = "translate_variable"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in CiscoOspfv3FeatureTemplateIpv6Area. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        CiscoOspfv3FeatureTemplateIpv6Area.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        CiscoOspfv3FeatureTemplateIpv6Area.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 area_number: Optional[_builtins.int] = None,
                 area_number_variable: Optional[_builtins.str] = None,
                 interfaces: Optional[Sequence['outputs.CiscoOspfv3FeatureTemplateIpv6AreaInterface']] = None,
                 normal: Optional[_builtins.bool] = None,
                 normal_variable: Optional[_builtins.str] = None,
                 nssa: Optional[_builtins.bool] = None,
                 nssa_no_summary: Optional[_builtins.bool] = None,
                 nssa_no_summary_variable: Optional[_builtins.str] = None,
                 optional: Optional[_builtins.bool] = None,
                 ranges: Optional[Sequence['outputs.CiscoOspfv3FeatureTemplateIpv6AreaRange']] = None,
                 stub: Optional[_builtins.bool] = None,
                 stub_no_summary: Optional[_builtins.bool] = None,
                 stub_no_summary_variable: Optional[_builtins.str] = None,
                 translate: Optional[_builtins.str] = None,
                 translate_variable: Optional[_builtins.str] = None):
        """
        :param _builtins.int area_number: Set OSPF area number
                 - Range: `0`-`4294967295`
        :param _builtins.str area_number_variable: Variable name
        :param Sequence['CiscoOspfv3FeatureTemplateIpv6AreaInterfaceArgs'] interfaces: Set OSPF interface parameters
        :param _builtins.bool normal: Area Type Normal
                 - Default value: `false`
        :param _builtins.str normal_variable: Variable name
        :param _builtins.bool nssa: NSSA area
        :param _builtins.bool nssa_no_summary: Do not inject interarea routes into NSSA
                 - Default value: `false`
        :param _builtins.str nssa_no_summary_variable: Variable name
        :param _builtins.bool optional: Indicates if list item is considered optional.
        :param Sequence['CiscoOspfv3FeatureTemplateIpv6AreaRangeArgs'] ranges: Summarize OSPF routes at an area boundary
        :param _builtins.bool stub: Stub area
        :param _builtins.bool stub_no_summary: Do not inject interarea routes into stub
                 - Default value: `false`
        :param _builtins.str stub_no_summary_variable: Variable name
        :param _builtins.str translate: Always translate LSAs on this ABR
                 - Choices: `always`
        :param _builtins.str translate_variable: Variable name
        """
        if area_number is not None:
            pulumi.set(__self__, "area_number", area_number)
        if area_number_variable is not None:
            pulumi.set(__self__, "area_number_variable", area_number_variable)
        if interfaces is not None:
            pulumi.set(__self__, "interfaces", interfaces)
        if normal is not None:
            pulumi.set(__self__, "normal", normal)
        if normal_variable is not None:
            pulumi.set(__self__, "normal_variable", normal_variable)
        if nssa is not None:
            pulumi.set(__self__, "nssa", nssa)
        if nssa_no_summary is not None:
            pulumi.set(__self__, "nssa_no_summary", nssa_no_summary)
        if nssa_no_summary_variable is not None:
            pulumi.set(__self__, "nssa_no_summary_variable", nssa_no_summary_variable)
        if optional is not None:
            pulumi.set(__self__, "optional", optional)
        if ranges is not None:
            pulumi.set(__self__, "ranges", ranges)
        if stub is not None:
            pulumi.set(__self__, "stub", stub)
        if stub_no_summary is not None:
            pulumi.set(__self__, "stub_no_summary", stub_no_summary)
        if stub_no_summary_variable is not None:
            pulumi.set(__self__, "stub_no_summary_variable", stub_no_summary_variable)
        if translate is not None:
            pulumi.set(__self__, "translate", translate)
        if translate_variable is not None:
            pulumi.set(__self__, "translate_variable", translate_variable)

    @_builtins.property
    @pulumi.getter(name="areaNumber")
    def area_number(self) -> Optional[_builtins.int]:
        """
        Set OSPF area number
          - Range: `0`-`4294967295`
        """
        return pulumi.get(self, "area_number")

    @_builtins.property
    @pulumi.getter(name="areaNumberVariable")
    def area_number_variable(self) -> Optional[_builtins.str]:
        """
        Variable name
        """
        return pulumi.get(self, "area_number_variable")

    @_builtins.property
    @pulumi.getter
    def interfaces(self) -> Optional[Sequence['outputs.CiscoOspfv3FeatureTemplateIpv6AreaInterface']]:
        """
        Set OSPF interface parameters
        """
        return pulumi.get(self, "interfaces")

    @_builtins.property
    @pulumi.getter
    def normal(self) -> Optional[_builtins.bool]:
        """
        Area Type Normal
          - Default value: `false`
        """
        return pulumi.get(self, "normal")

    @_builtins.property
    @pulumi.getter(name="normalVariable")
    def normal_variable(self) -> Optional[_builtins.str]:
        """
        Variable name
        """
        return pulumi.get(self, "normal_variable")

    @_builtins.property
    @pulumi.getter
    def nssa(self) -> Optional[_builtins.bool]:
        """
        NSSA area
        """
        return pulumi.get(self, "nssa")

    @_builtins.property
    @pulumi.getter(name="nssaNoSummary")
    def nssa_no_summary(self) -> Optional[_builtins.bool]:
        """
        Do not inject interarea routes into NSSA
          - Default value: `false`
        """
        return pulumi.get(self, "nssa_no_summary")

    @_builtins.property
    @pulumi.getter(name="nssaNoSummaryVariable")
    def nssa_no_summary_variable(self) -> Optional[_builtins.str]:
        """
        Variable name
        """
        return pulumi.get(self, "nssa_no_summary_variable")

    @_builtins.property
    @pulumi.getter
    def optional(self) -> Optional[_builtins.bool]:
        """
        Indicates if list item is considered optional.
        """
        return pulumi.get(self, "optional")

    @_builtins.property
    @pulumi.getter
    def ranges(self) -> Optional[Sequence['outputs.CiscoOspfv3FeatureTemplateIpv6AreaRange']]:
        """
        Summarize OSPF routes at an area boundary
        """
        return pulumi.get(self, "ranges")

    @_builtins.property
    @pulumi.getter
    def stub(self) -> Optional[_builtins.bool]:
        """
        Stub area
        """
        return pulumi.get(self, "stub")

    @_builtins.property
    @pulumi.getter(name="stubNoSummary")
    def stub_no_summary(self) -> Optional[_builtins.bool]:
        """
        Do not inject interarea routes into stub
          - Default value: `false`
        """
        return pulumi.get(self, "stub_no_summary")

    @_builtins.property
    @pulumi.getter(name="stubNoSummaryVariable")
    def stub_no_summary_variable(self) -> Optional[_builtins.str]:
        """
        Variable name
        """
        return pulumi.get(self, "stub_no_summary_variable")

    @_builtins.property
    @pulumi.getter
    def translate(self) -> Optional[_builtins.str]:
        """
        Always translate LSAs on this ABR
          - Choices: `always`
        """
        return pulumi.get(self, "translate")

    @_builtins.property
    @pulumi.getter(name="translateVariable")
    def translate_variable(self) -> Optional[_builtins.str]:
        """
        Variable name
        """
        return pulumi.get(self, "translate_variable")


@pulumi.output_type
class CiscoOspfv3FeatureTemplateIpv6AreaInterface(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "authenticationKey":
            suggest = "authentication_key"
        elif key == "authenticationKeyVariable":
            suggest = "authentication_key_variable"
        elif key == "authenticationType":
            suggest = "authentication_type"
        elif key == "authenticationTypeVariable":
            suggest = "authentication_type_variable"
        elif key == "costVariable":
            suggest = "cost_variable"
        elif key == "deadInterval":
            suggest = "dead_interval"
        elif key == "deadIntervalVariable":
            suggest = "dead_interval_variable"
        elif key == "helloInterval":
            suggest = "hello_interval"
        elif key == "helloIntervalVariable":
            suggest = "hello_interval_variable"
        elif key == "ipsecSpi":
            suggest = "ipsec_spi"
        elif key == "ipsecSpiVariable":
            suggest = "ipsec_spi_variable"
        elif key == "nameVariable":
            suggest = "name_variable"
        elif key == "networkVariable":
            suggest = "network_variable"
        elif key == "passiveInterface":
            suggest = "passive_interface"
        elif key == "passiveInterfaceVariable":
            suggest = "passive_interface_variable"
        elif key == "retransmitInterval":
            suggest = "retransmit_interval"
        elif key == "retransmitIntervalVariable":
            suggest = "retransmit_interval_variable"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in CiscoOspfv3FeatureTemplateIpv6AreaInterface. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        CiscoOspfv3FeatureTemplateIpv6AreaInterface.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        CiscoOspfv3FeatureTemplateIpv6AreaInterface.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 authentication_key: Optional[_builtins.str] = None,
                 authentication_key_variable: Optional[_builtins.str] = None,
                 authentication_type: Optional[_builtins.str] = None,
                 authentication_type_variable: Optional[_builtins.str] = None,
                 cost: Optional[_builtins.int] = None,
                 cost_variable: Optional[_builtins.str] = None,
                 dead_interval: Optional[_builtins.int] = None,
                 dead_interval_variable: Optional[_builtins.str] = None,
                 hello_interval: Optional[_builtins.int] = None,
                 hello_interval_variable: Optional[_builtins.str] = None,
                 ipsec_spi: Optional[_builtins.int] = None,
                 ipsec_spi_variable: Optional[_builtins.str] = None,
                 name: Optional[_builtins.str] = None,
                 name_variable: Optional[_builtins.str] = None,
                 network: Optional[_builtins.str] = None,
                 network_variable: Optional[_builtins.str] = None,
                 optional: Optional[_builtins.bool] = None,
                 passive_interface: Optional[_builtins.bool] = None,
                 passive_interface_variable: Optional[_builtins.str] = None,
                 retransmit_interval: Optional[_builtins.int] = None,
                 retransmit_interval_variable: Optional[_builtins.str] = None):
        """
        :param _builtins.str authentication_key: Set OSPF interface authentication key
        :param _builtins.str authentication_key_variable: Variable name
        :param _builtins.str authentication_type: Set OSPF interface authentication type
                 - Choices: `md5`, `sha1`
        :param _builtins.str authentication_type_variable: Variable name
        :param _builtins.int cost: Set cost of OSPF interface
                 - Range: `1`-`65535`
        :param _builtins.str cost_variable: Variable name
        :param _builtins.int dead_interval: Set interval after which neighbor is declared to be down
                 - Range: `1`-`65535`
                 - Default value: `40`
        :param _builtins.str dead_interval_variable: Variable name
        :param _builtins.int hello_interval: Set interval between OSPF hello packets
                 - Range: `1`-`65535`
                 - Default value: `10`
        :param _builtins.str hello_interval_variable: Variable name
        :param _builtins.int ipsec_spi: Set OSPF interface authentication IPSec SPI, range 256..4294967295
                 - Range: `256`-`4294967295`
        :param _builtins.str ipsec_spi_variable: Variable name
        :param _builtins.str name: Set interface name
        :param _builtins.str name_variable: Variable name
        :param _builtins.str network: Set the OSPF network type
                 - Choices: `broadcast`, `point-to-point`, `non-broadcast`, `point-to-multipoint`
                 - Default value: `broadcast`
        :param _builtins.str network_variable: Variable name
        :param _builtins.bool optional: Indicates if list item is considered optional.
        :param _builtins.bool passive_interface: Set the interface to advertise its address, but not to actively run OSPF
                 - Default value: `false`
        :param _builtins.str passive_interface_variable: Variable name
        :param _builtins.int retransmit_interval: Set time between retransmitting LSAs
                 - Range: `1`-`65535`
                 - Default value: `5`
        :param _builtins.str retransmit_interval_variable: Variable name
        """
        if authentication_key is not None:
            pulumi.set(__self__, "authentication_key", authentication_key)
        if authentication_key_variable is not None:
            pulumi.set(__self__, "authentication_key_variable", authentication_key_variable)
        if authentication_type is not None:
            pulumi.set(__self__, "authentication_type", authentication_type)
        if authentication_type_variable is not None:
            pulumi.set(__self__, "authentication_type_variable", authentication_type_variable)
        if cost is not None:
            pulumi.set(__self__, "cost", cost)
        if cost_variable is not None:
            pulumi.set(__self__, "cost_variable", cost_variable)
        if dead_interval is not None:
            pulumi.set(__self__, "dead_interval", dead_interval)
        if dead_interval_variable is not None:
            pulumi.set(__self__, "dead_interval_variable", dead_interval_variable)
        if hello_interval is not None:
            pulumi.set(__self__, "hello_interval", hello_interval)
        if hello_interval_variable is not None:
            pulumi.set(__self__, "hello_interval_variable", hello_interval_variable)
        if ipsec_spi is not None:
            pulumi.set(__self__, "ipsec_spi", ipsec_spi)
        if ipsec_spi_variable is not None:
            pulumi.set(__self__, "ipsec_spi_variable", ipsec_spi_variable)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if name_variable is not None:
            pulumi.set(__self__, "name_variable", name_variable)
        if network is not None:
            pulumi.set(__self__, "network", network)
        if network_variable is not None:
            pulumi.set(__self__, "network_variable", network_variable)
        if optional is not None:
            pulumi.set(__self__, "optional", optional)
        if passive_interface is not None:
            pulumi.set(__self__, "passive_interface", passive_interface)
        if passive_interface_variable is not None:
            pulumi.set(__self__, "passive_interface_variable", passive_interface_variable)
        if retransmit_interval is not None:
            pulumi.set(__self__, "retransmit_interval", retransmit_interval)
        if retransmit_interval_variable is not None:
            pulumi.set(__self__, "retransmit_interval_variable", retransmit_interval_variable)

    @_builtins.property
    @pulumi.getter(name="authenticationKey")
    def authentication_key(self) -> Optional[_builtins.str]:
        """
        Set OSPF interface authentication key
        """
        return pulumi.get(self, "authentication_key")

    @_builtins.property
    @pulumi.getter(name="authenticationKeyVariable")
    def authentication_key_variable(self) -> Optional[_builtins.str]:
        """
        Variable name
        """
        return pulumi.get(self, "authentication_key_variable")

    @_builtins.property
    @pulumi.getter(name="authenticationType")
    def authentication_type(self) -> Optional[_builtins.str]:
        """
        Set OSPF interface authentication type
          - Choices: `md5`, `sha1`
        """
        return pulumi.get(self, "authentication_type")

    @_builtins.property
    @pulumi.getter(name="authenticationTypeVariable")
    def authentication_type_variable(self) -> Optional[_builtins.str]:
        """
        Variable name
        """
        return pulumi.get(self, "authentication_type_variable")

    @_builtins.property
    @pulumi.getter
    def cost(self) -> Optional[_builtins.int]:
        """
        Set cost of OSPF interface
          - Range: `1`-`65535`
        """
        return pulumi.get(self, "cost")

    @_builtins.property
    @pulumi.getter(name="costVariable")
    def cost_variable(self) -> Optional[_builtins.str]:
        """
        Variable name
        """
        return pulumi.get(self, "cost_variable")

    @_builtins.property
    @pulumi.getter(name="deadInterval")
    def dead_interval(self) -> Optional[_builtins.int]:
        """
        Set interval after which neighbor is declared to be down
          - Range: `1`-`65535`
          - Default value: `40`
        """
        return pulumi.get(self, "dead_interval")

    @_builtins.property
    @pulumi.getter(name="deadIntervalVariable")
    def dead_interval_variable(self) -> Optional[_builtins.str]:
        """
        Variable name
        """
        return pulumi.get(self, "dead_interval_variable")

    @_builtins.property
    @pulumi.getter(name="helloInterval")
    def hello_interval(self) -> Optional[_builtins.int]:
        """
        Set interval between OSPF hello packets
          - Range: `1`-`65535`
          - Default value: `10`
        """
        return pulumi.get(self, "hello_interval")

    @_builtins.property
    @pulumi.getter(name="helloIntervalVariable")
    def hello_interval_variable(self) -> Optional[_builtins.str]:
        """
        Variable name
        """
        return pulumi.get(self, "hello_interval_variable")

    @_builtins.property
    @pulumi.getter(name="ipsecSpi")
    def ipsec_spi(self) -> Optional[_builtins.int]:
        """
        Set OSPF interface authentication IPSec SPI, range 256..4294967295
          - Range: `256`-`4294967295`
        """
        return pulumi.get(self, "ipsec_spi")

    @_builtins.property
    @pulumi.getter(name="ipsecSpiVariable")
    def ipsec_spi_variable(self) -> Optional[_builtins.str]:
        """
        Variable name
        """
        return pulumi.get(self, "ipsec_spi_variable")

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[_builtins.str]:
        """
        Set interface name
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter(name="nameVariable")
    def name_variable(self) -> Optional[_builtins.str]:
        """
        Variable name
        """
        return pulumi.get(self, "name_variable")

    @_builtins.property
    @pulumi.getter
    def network(self) -> Optional[_builtins.str]:
        """
        Set the OSPF network type
          - Choices: `broadcast`, `point-to-point`, `non-broadcast`, `point-to-multipoint`
          - Default value: `broadcast`
        """
        return pulumi.get(self, "network")

    @_builtins.property
    @pulumi.getter(name="networkVariable")
    def network_variable(self) -> Optional[_builtins.str]:
        """
        Variable name
        """
        return pulumi.get(self, "network_variable")

    @_builtins.property
    @pulumi.getter
    def optional(self) -> Optional[_builtins.bool]:
        """
        Indicates if list item is considered optional.
        """
        return pulumi.get(self, "optional")

    @_builtins.property
    @pulumi.getter(name="passiveInterface")
    def passive_interface(self) -> Optional[_builtins.bool]:
        """
        Set the interface to advertise its address, but not to actively run OSPF
          - Default value: `false`
        """
        return pulumi.get(self, "passive_interface")

    @_builtins.property
    @pulumi.getter(name="passiveInterfaceVariable")
    def passive_interface_variable(self) -> Optional[_builtins.str]:
        """
        Variable name
        """
        return pulumi.get(self, "passive_interface_variable")

    @_builtins.property
    @pulumi.getter(name="retransmitInterval")
    def retransmit_interval(self) -> Optional[_builtins.int]:
        """
        Set time between retransmitting LSAs
          - Range: `1`-`65535`
          - Default value: `5`
        """
        return pulumi.get(self, "retransmit_interval")

    @_builtins.property
    @pulumi.getter(name="retransmitIntervalVariable")
    def retransmit_interval_variable(self) -> Optional[_builtins.str]:
        """
        Variable name
        """
        return pulumi.get(self, "retransmit_interval_variable")


@pulumi.output_type
class CiscoOspfv3FeatureTemplateIpv6AreaRange(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "addressVariable":
            suggest = "address_variable"
        elif key == "costVariable":
            suggest = "cost_variable"
        elif key == "noAdvertise":
            suggest = "no_advertise"
        elif key == "noAdvertiseVariable":
            suggest = "no_advertise_variable"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in CiscoOspfv3FeatureTemplateIpv6AreaRange. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        CiscoOspfv3FeatureTemplateIpv6AreaRange.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        CiscoOspfv3FeatureTemplateIpv6AreaRange.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 address: Optional[_builtins.str] = None,
                 address_variable: Optional[_builtins.str] = None,
                 cost: Optional[_builtins.int] = None,
                 cost_variable: Optional[_builtins.str] = None,
                 no_advertise: Optional[_builtins.bool] = None,
                 no_advertise_variable: Optional[_builtins.str] = None,
                 optional: Optional[_builtins.bool] = None):
        """
        :param _builtins.str address: Set Matching Prefix
        :param _builtins.str address_variable: Variable name
        :param _builtins.int cost: Set cost for this range
                 - Range: `0`-`16777214`
        :param _builtins.str cost_variable: Variable name
        :param _builtins.bool no_advertise: Do not advertise this range
                 - Default value: `false`
        :param _builtins.str no_advertise_variable: Variable name
        :param _builtins.bool optional: Indicates if list item is considered optional.
        """
        if address is not None:
            pulumi.set(__self__, "address", address)
        if address_variable is not None:
            pulumi.set(__self__, "address_variable", address_variable)
        if cost is not None:
            pulumi.set(__self__, "cost", cost)
        if cost_variable is not None:
            pulumi.set(__self__, "cost_variable", cost_variable)
        if no_advertise is not None:
            pulumi.set(__self__, "no_advertise", no_advertise)
        if no_advertise_variable is not None:
            pulumi.set(__self__, "no_advertise_variable", no_advertise_variable)
        if optional is not None:
            pulumi.set(__self__, "optional", optional)

    @_builtins.property
    @pulumi.getter
    def address(self) -> Optional[_builtins.str]:
        """
        Set Matching Prefix
        """
        return pulumi.get(self, "address")

    @_builtins.property
    @pulumi.getter(name="addressVariable")
    def address_variable(self) -> Optional[_builtins.str]:
        """
        Variable name
        """
        return pulumi.get(self, "address_variable")

    @_builtins.property
    @pulumi.getter
    def cost(self) -> Optional[_builtins.int]:
        """
        Set cost for this range
          - Range: `0`-`16777214`
        """
        return pulumi.get(self, "cost")

    @_builtins.property
    @pulumi.getter(name="costVariable")
    def cost_variable(self) -> Optional[_builtins.str]:
        """
        Variable name
        """
        return pulumi.get(self, "cost_variable")

    @_builtins.property
    @pulumi.getter(name="noAdvertise")
    def no_advertise(self) -> Optional[_builtins.bool]:
        """
        Do not advertise this range
          - Default value: `false`
        """
        return pulumi.get(self, "no_advertise")

    @_builtins.property
    @pulumi.getter(name="noAdvertiseVariable")
    def no_advertise_variable(self) -> Optional[_builtins.str]:
        """
        Variable name
        """
        return pulumi.get(self, "no_advertise_variable")

    @_builtins.property
    @pulumi.getter
    def optional(self) -> Optional[_builtins.bool]:
        """
        Indicates if list item is considered optional.
        """
        return pulumi.get(self, "optional")


@pulumi.output_type
class CiscoOspfv3FeatureTemplateIpv6MaxMetricRouterLsa(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "adType":
            suggest = "ad_type"
        elif key == "timeVariable":
            suggest = "time_variable"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in CiscoOspfv3FeatureTemplateIpv6MaxMetricRouterLsa. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        CiscoOspfv3FeatureTemplateIpv6MaxMetricRouterLsa.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        CiscoOspfv3FeatureTemplateIpv6MaxMetricRouterLsa.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 ad_type: Optional[_builtins.str] = None,
                 optional: Optional[_builtins.bool] = None,
                 time: Optional[_builtins.int] = None,
                 time_variable: Optional[_builtins.str] = None):
        """
        :param _builtins.str ad_type: Set the router LSA advertisement type
                 - Choices: `on-startup`
        :param _builtins.bool optional: Indicates if list item is considered optional.
        :param _builtins.int time: Set how long to advertise maximum metric after router starts up
        :param _builtins.str time_variable: Variable name
        """
        if ad_type is not None:
            pulumi.set(__self__, "ad_type", ad_type)
        if optional is not None:
            pulumi.set(__self__, "optional", optional)
        if time is not None:
            pulumi.set(__self__, "time", time)
        if time_variable is not None:
            pulumi.set(__self__, "time_variable", time_variable)

    @_builtins.property
    @pulumi.getter(name="adType")
    def ad_type(self) -> Optional[_builtins.str]:
        """
        Set the router LSA advertisement type
          - Choices: `on-startup`
        """
        return pulumi.get(self, "ad_type")

    @_builtins.property
    @pulumi.getter
    def optional(self) -> Optional[_builtins.bool]:
        """
        Indicates if list item is considered optional.
        """
        return pulumi.get(self, "optional")

    @_builtins.property
    @pulumi.getter
    def time(self) -> Optional[_builtins.int]:
        """
        Set how long to advertise maximum metric after router starts up
        """
        return pulumi.get(self, "time")

    @_builtins.property
    @pulumi.getter(name="timeVariable")
    def time_variable(self) -> Optional[_builtins.str]:
        """
        Variable name
        """
        return pulumi.get(self, "time_variable")


@pulumi.output_type
class CiscoOspfv3FeatureTemplateIpv6Redistribute(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "protocolVariable":
            suggest = "protocol_variable"
        elif key == "routePolicy":
            suggest = "route_policy"
        elif key == "routePolicyVariable":
            suggest = "route_policy_variable"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in CiscoOspfv3FeatureTemplateIpv6Redistribute. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        CiscoOspfv3FeatureTemplateIpv6Redistribute.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        CiscoOspfv3FeatureTemplateIpv6Redistribute.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 optional: Optional[_builtins.bool] = None,
                 protocol: Optional[_builtins.str] = None,
                 protocol_variable: Optional[_builtins.str] = None,
                 route_policy: Optional[_builtins.str] = None,
                 route_policy_variable: Optional[_builtins.str] = None):
        """
        :param _builtins.bool optional: Indicates if list item is considered optional.
        :param _builtins.str protocol: Set the protocol
                 - Choices: `bgp`, `connected`, `eigrp`, `isis`, `lisp`, `nat-route`, `omp`, `static`
        :param _builtins.str protocol_variable: Variable name
        :param _builtins.str route_policy: Set route policy to apply to redistributed routes
        :param _builtins.str route_policy_variable: Variable name
        """
        if optional is not None:
            pulumi.set(__self__, "optional", optional)
        if protocol is not None:
            pulumi.set(__self__, "protocol", protocol)
        if protocol_variable is not None:
            pulumi.set(__self__, "protocol_variable", protocol_variable)
        if route_policy is not None:
            pulumi.set(__self__, "route_policy", route_policy)
        if route_policy_variable is not None:
            pulumi.set(__self__, "route_policy_variable", route_policy_variable)

    @_builtins.property
    @pulumi.getter
    def optional(self) -> Optional[_builtins.bool]:
        """
        Indicates if list item is considered optional.
        """
        return pulumi.get(self, "optional")

    @_builtins.property
    @pulumi.getter
    def protocol(self) -> Optional[_builtins.str]:
        """
        Set the protocol
          - Choices: `bgp`, `connected`, `eigrp`, `isis`, `lisp`, `nat-route`, `omp`, `static`
        """
        return pulumi.get(self, "protocol")

    @_builtins.property
    @pulumi.getter(name="protocolVariable")
    def protocol_variable(self) -> Optional[_builtins.str]:
        """
        Variable name
        """
        return pulumi.get(self, "protocol_variable")

    @_builtins.property
    @pulumi.getter(name="routePolicy")
    def route_policy(self) -> Optional[_builtins.str]:
        """
        Set route policy to apply to redistributed routes
        """
        return pulumi.get(self, "route_policy")

    @_builtins.property
    @pulumi.getter(name="routePolicyVariable")
    def route_policy_variable(self) -> Optional[_builtins.str]:
        """
        Variable name
        """
        return pulumi.get(self, "route_policy_variable")


@pulumi.output_type
class CiscoSecureInternetGatewayFeatureTemplateInterface(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "autoTunnelMode":
            suggest = "auto_tunnel_mode"
        elif key == "deadPeerDetectionInterval":
            suggest = "dead_peer_detection_interval"
        elif key == "deadPeerDetectionIntervalVariable":
            suggest = "dead_peer_detection_interval_variable"
        elif key == "deadPeerDetectionRetries":
            suggest = "dead_peer_detection_retries"
        elif key == "deadPeerDetectionRetriesVariable":
            suggest = "dead_peer_detection_retries_variable"
        elif key == "descriptionVariable":
            suggest = "description_variable"
        elif key == "ikeCiphersuite":
            suggest = "ike_ciphersuite"
        elif key == "ikeCiphersuiteVariable":
            suggest = "ike_ciphersuite_variable"
        elif key == "ikeGroup":
            suggest = "ike_group"
        elif key == "ikeGroupVariable":
            suggest = "ike_group_variable"
        elif key == "ikePreSharedKey":
            suggest = "ike_pre_shared_key"
        elif key == "ikePreSharedKeyDynamic":
            suggest = "ike_pre_shared_key_dynamic"
        elif key == "ikePreSharedKeyLocalId":
            suggest = "ike_pre_shared_key_local_id"
        elif key == "ikePreSharedKeyLocalIdVariable":
            suggest = "ike_pre_shared_key_local_id_variable"
        elif key == "ikePreSharedKeyRemoteId":
            suggest = "ike_pre_shared_key_remote_id"
        elif key == "ikePreSharedKeyRemoteIdVariable":
            suggest = "ike_pre_shared_key_remote_id_variable"
        elif key == "ikePreSharedKeyVariable":
            suggest = "ike_pre_shared_key_variable"
        elif key == "ikeRekeyInterval":
            suggest = "ike_rekey_interval"
        elif key == "ikeRekeyIntervalVariable":
            suggest = "ike_rekey_interval_variable"
        elif key == "ikeVersion":
            suggest = "ike_version"
        elif key == "ikeVersionVariable":
            suggest = "ike_version_variable"
        elif key == "ipUnnumbered":
            suggest = "ip_unnumbered"
        elif key == "ipsecCiphersuite":
            suggest = "ipsec_ciphersuite"
        elif key == "ipsecCiphersuiteVariable":
            suggest = "ipsec_ciphersuite_variable"
        elif key == "ipsecPerfectForwardSecrecy":
            suggest = "ipsec_perfect_forward_secrecy"
        elif key == "ipsecPerfectForwardSecrecyVariable":
            suggest = "ipsec_perfect_forward_secrecy_variable"
        elif key == "ipsecRekeyInterval":
            suggest = "ipsec_rekey_interval"
        elif key == "ipsecRekeyIntervalVariable":
            suggest = "ipsec_rekey_interval_variable"
        elif key == "ipsecReplayWindow":
            suggest = "ipsec_replay_window"
        elif key == "ipsecReplayWindowVariable":
            suggest = "ipsec_replay_window_variable"
        elif key == "ipv4Address":
            suggest = "ipv4_address"
        elif key == "ipv4AddressVariable":
            suggest = "ipv4_address_variable"
        elif key == "mtuVariable":
            suggest = "mtu_variable"
        elif key == "nameVariable":
            suggest = "name_variable"
        elif key == "sigProvider":
            suggest = "sig_provider"
        elif key == "tcpMss":
            suggest = "tcp_mss"
        elif key == "tcpMssVariable":
            suggest = "tcp_mss_variable"
        elif key == "trackEnable":
            suggest = "track_enable"
        elif key == "tunnelDcPreference":
            suggest = "tunnel_dc_preference"
        elif key == "tunnelDestination":
            suggest = "tunnel_destination"
        elif key == "tunnelDestinationVariable":
            suggest = "tunnel_destination_variable"
        elif key == "tunnelPublicIp":
            suggest = "tunnel_public_ip"
        elif key == "tunnelPublicIpVariable":
            suggest = "tunnel_public_ip_variable"
        elif key == "tunnelRouteVia":
            suggest = "tunnel_route_via"
        elif key == "tunnelRouteViaVariable":
            suggest = "tunnel_route_via_variable"
        elif key == "tunnelSource":
            suggest = "tunnel_source"
        elif key == "tunnelSourceInterface":
            suggest = "tunnel_source_interface"
        elif key == "tunnelSourceInterfaceVariable":
            suggest = "tunnel_source_interface_variable"
        elif key == "tunnelSourceVariable":
            suggest = "tunnel_source_variable"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in CiscoSecureInternetGatewayFeatureTemplateInterface. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        CiscoSecureInternetGatewayFeatureTemplateInterface.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        CiscoSecureInternetGatewayFeatureTemplateInterface.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 application: Optional[_builtins.str] = None,
                 auto_tunnel_mode: Optional[_builtins.bool] = None,
                 dead_peer_detection_interval: Optional[_builtins.int] = None,
                 dead_peer_detection_interval_variable: Optional[_builtins.str] = None,
                 dead_peer_detection_retries: Optional[_builtins.int] = None,
                 dead_peer_detection_retries_variable: Optional[_builtins.str] = None,
                 description: Optional[_builtins.str] = None,
                 description_variable: Optional[_builtins.str] = None,
                 ike_ciphersuite: Optional[_builtins.str] = None,
                 ike_ciphersuite_variable: Optional[_builtins.str] = None,
                 ike_group: Optional[_builtins.str] = None,
                 ike_group_variable: Optional[_builtins.str] = None,
                 ike_pre_shared_key: Optional[_builtins.str] = None,
                 ike_pre_shared_key_dynamic: Optional[_builtins.bool] = None,
                 ike_pre_shared_key_local_id: Optional[_builtins.str] = None,
                 ike_pre_shared_key_local_id_variable: Optional[_builtins.str] = None,
                 ike_pre_shared_key_remote_id: Optional[_builtins.str] = None,
                 ike_pre_shared_key_remote_id_variable: Optional[_builtins.str] = None,
                 ike_pre_shared_key_variable: Optional[_builtins.str] = None,
                 ike_rekey_interval: Optional[_builtins.int] = None,
                 ike_rekey_interval_variable: Optional[_builtins.str] = None,
                 ike_version: Optional[_builtins.int] = None,
                 ike_version_variable: Optional[_builtins.str] = None,
                 ip_unnumbered: Optional[_builtins.bool] = None,
                 ipsec_ciphersuite: Optional[_builtins.str] = None,
                 ipsec_ciphersuite_variable: Optional[_builtins.str] = None,
                 ipsec_perfect_forward_secrecy: Optional[_builtins.str] = None,
                 ipsec_perfect_forward_secrecy_variable: Optional[_builtins.str] = None,
                 ipsec_rekey_interval: Optional[_builtins.int] = None,
                 ipsec_rekey_interval_variable: Optional[_builtins.str] = None,
                 ipsec_replay_window: Optional[_builtins.int] = None,
                 ipsec_replay_window_variable: Optional[_builtins.str] = None,
                 ipv4_address: Optional[_builtins.str] = None,
                 ipv4_address_variable: Optional[_builtins.str] = None,
                 mtu: Optional[_builtins.int] = None,
                 mtu_variable: Optional[_builtins.str] = None,
                 name: Optional[_builtins.str] = None,
                 name_variable: Optional[_builtins.str] = None,
                 optional: Optional[_builtins.bool] = None,
                 shutdown: Optional[_builtins.bool] = None,
                 sig_provider: Optional[_builtins.str] = None,
                 tcp_mss: Optional[_builtins.int] = None,
                 tcp_mss_variable: Optional[_builtins.str] = None,
                 track_enable: Optional[_builtins.bool] = None,
                 tracker: Optional[_builtins.str] = None,
                 tunnel_dc_preference: Optional[_builtins.str] = None,
                 tunnel_destination: Optional[_builtins.str] = None,
                 tunnel_destination_variable: Optional[_builtins.str] = None,
                 tunnel_public_ip: Optional[_builtins.str] = None,
                 tunnel_public_ip_variable: Optional[_builtins.str] = None,
                 tunnel_route_via: Optional[_builtins.str] = None,
                 tunnel_route_via_variable: Optional[_builtins.str] = None,
                 tunnel_source: Optional[_builtins.str] = None,
                 tunnel_source_interface: Optional[_builtins.str] = None,
                 tunnel_source_interface_variable: Optional[_builtins.str] = None,
                 tunnel_source_variable: Optional[_builtins.str] = None):
        """
        :param _builtins.str application: Enable Application Tunnel Type
                 - Choices: `sig`
                 - Default value: `sig`
        :param _builtins.bool auto_tunnel_mode: Auto Tunnel Mode
                 - Default value: `false`
        :param _builtins.int dead_peer_detection_interval: IKE keepalive interval (seconds)
                 - Range: `0`-`65535`
                 - Default value: `10`
        :param _builtins.str dead_peer_detection_interval_variable: Variable name
        :param _builtins.int dead_peer_detection_retries: IKE keepalive retries
                 - Range: `0`-`255`
                 - Default value: `3`
        :param _builtins.str dead_peer_detection_retries_variable: Variable name
        :param _builtins.str description: Interface description
        :param _builtins.str description_variable: Variable name
        :param _builtins.str ike_ciphersuite: IKE identity the IKE preshared secret belongs to
                 - Choices: `aes256-cbc-sha1`, `aes256-cbc-sha2`, `aes128-cbc-sha1`, `aes128-cbc-sha2`
                 - Default value: `aes256-cbc-sha1`
        :param _builtins.str ike_ciphersuite_variable: Variable name
        :param _builtins.str ike_group: IKE Diffie Hellman Groups
                 - Choices: `2`, `14`, `15`, `16`
                 - Default value: `14`
        :param _builtins.str ike_group_variable: Variable name
        :param _builtins.str ike_pre_shared_key: Use preshared key to authenticate IKE peer
        :param _builtins.bool ike_pre_shared_key_dynamic: Use preshared key to authenticate IKE peer
                 - Default value: `true`
        :param _builtins.str ike_pre_shared_key_local_id: IKE ID for the local endpoint. Input IPv4 address, domain name, or email address
        :param _builtins.str ike_pre_shared_key_local_id_variable: Variable name
        :param _builtins.str ike_pre_shared_key_remote_id: IKE ID for the remote endpoint. Input IPv4 address, domain name, or email address
        :param _builtins.str ike_pre_shared_key_remote_id_variable: Variable name
        :param _builtins.str ike_pre_shared_key_variable: Variable name
        :param _builtins.int ike_rekey_interval: IKE rekey interval <300..1209600> seconds
                 - Range: `300`-`1209600`
                 - Default value: `14400`
        :param _builtins.str ike_rekey_interval_variable: Variable name
        :param _builtins.int ike_version: IKE Version <1..2>
                 - Range: `1`-`2`
                 - Default value: `2`
        :param _builtins.str ike_version_variable: Variable name
        :param _builtins.bool ip_unnumbered: Unnumbered interface
                 - Default value: `true`
        :param _builtins.str ipsec_ciphersuite: IPsec(ESP) encryption and integrity protocol
                 - Choices: `aes256-cbc-sha1`, `aes256-cbc-sha384`, `aes256-cbc-sha256`, `aes256-cbc-sha512`, `aes256-gcm`, `null-sha1`, `null-sha384`, `null-sha256`, `null-sha512`
                 - Default value: `aes256-gcm`
        :param _builtins.str ipsec_ciphersuite_variable: Variable name
        :param _builtins.str ipsec_perfect_forward_secrecy: IPsec perfect forward secrecy settings
                 - Choices: `group-2`, `group-14`, `group-15`, `group-16`, `none`
                 - Default value: `none`
        :param _builtins.str ipsec_perfect_forward_secrecy_variable: Variable name
        :param _builtins.int ipsec_rekey_interval: IPsec rekey interval <300..1209600> seconds
                 - Range: `300`-`1209600`
                 - Default value: `3600`
        :param _builtins.str ipsec_rekey_interval_variable: Variable name
        :param _builtins.int ipsec_replay_window: Replay window size 32..8192 (must be a power of 2)
                 - Range: `64`-`4096`
                 - Default value: `512`
        :param _builtins.str ipsec_replay_window_variable: Variable name
        :param _builtins.str ipv4_address: Assign IPv4 address
        :param _builtins.str ipv4_address_variable: Variable name
        :param _builtins.int mtu: Interface MTU <576..2000>, in bytes
                 - Range: `576`-`2000`
                 - Default value: `1400`
        :param _builtins.str mtu_variable: Variable name
        :param _builtins.str name: Interface name: IPsec when present
        :param _builtins.str name_variable: Variable name
        :param _builtins.bool optional: Indicates if list item is considered optional.
        :param _builtins.bool shutdown: Administrative state
                 - Default value: `false`
        :param _builtins.str sig_provider: SIG Tunnel Provider
                 - Choices: `secure-internet-gateway-umbrella`, `secure-internet-gateway-zscaler`, `secure-internet-gateway-other`
                 - Default value: `secure-internet-gateway-umbrella`
        :param _builtins.int tcp_mss: TCP MSS on SYN packets, in bytes
                 - Range: `500`-`1460`
        :param _builtins.str tcp_mss_variable: Variable name
        :param _builtins.bool track_enable: Enable/disable SIG tracking
                 - Default value: `true`
        :param _builtins.str tracker: Enable tracker for this interface
        :param _builtins.str tunnel_dc_preference: SIG Tunnel Data Center
                 - Choices: `primary-dc`, `secondary-dc`
                 - Default value: `primary-dc`
        :param _builtins.str tunnel_destination: Tunnel destination IP address
        :param _builtins.str tunnel_destination_variable: Variable name
        :param _builtins.str tunnel_public_ip: Public IP required to setup GRE tunnel to Zscaler
                 - Default value: `Auto`
        :param _builtins.str tunnel_public_ip_variable: Variable name
        :param _builtins.str tunnel_route_via: <1..32 characters> Interface name: ge0/<0-..> or ge0/<0-..>.vlanid
        :param _builtins.str tunnel_route_via_variable: Variable name
        :param _builtins.str tunnel_source: Tunnel source IP Address
        :param _builtins.str tunnel_source_interface: <1..32 characters> Interface name: ge0/<0-..> or ge0/<0-..>.vlanid
        :param _builtins.str tunnel_source_interface_variable: Variable name
        :param _builtins.str tunnel_source_variable: Variable name
        """
        if application is not None:
            pulumi.set(__self__, "application", application)
        if auto_tunnel_mode is not None:
            pulumi.set(__self__, "auto_tunnel_mode", auto_tunnel_mode)
        if dead_peer_detection_interval is not None:
            pulumi.set(__self__, "dead_peer_detection_interval", dead_peer_detection_interval)
        if dead_peer_detection_interval_variable is not None:
            pulumi.set(__self__, "dead_peer_detection_interval_variable", dead_peer_detection_interval_variable)
        if dead_peer_detection_retries is not None:
            pulumi.set(__self__, "dead_peer_detection_retries", dead_peer_detection_retries)
        if dead_peer_detection_retries_variable is not None:
            pulumi.set(__self__, "dead_peer_detection_retries_variable", dead_peer_detection_retries_variable)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if description_variable is not None:
            pulumi.set(__self__, "description_variable", description_variable)
        if ike_ciphersuite is not None:
            pulumi.set(__self__, "ike_ciphersuite", ike_ciphersuite)
        if ike_ciphersuite_variable is not None:
            pulumi.set(__self__, "ike_ciphersuite_variable", ike_ciphersuite_variable)
        if ike_group is not None:
            pulumi.set(__self__, "ike_group", ike_group)
        if ike_group_variable is not None:
            pulumi.set(__self__, "ike_group_variable", ike_group_variable)
        if ike_pre_shared_key is not None:
            pulumi.set(__self__, "ike_pre_shared_key", ike_pre_shared_key)
        if ike_pre_shared_key_dynamic is not None:
            pulumi.set(__self__, "ike_pre_shared_key_dynamic", ike_pre_shared_key_dynamic)
        if ike_pre_shared_key_local_id is not None:
            pulumi.set(__self__, "ike_pre_shared_key_local_id", ike_pre_shared_key_local_id)
        if ike_pre_shared_key_local_id_variable is not None:
            pulumi.set(__self__, "ike_pre_shared_key_local_id_variable", ike_pre_shared_key_local_id_variable)
        if ike_pre_shared_key_remote_id is not None:
            pulumi.set(__self__, "ike_pre_shared_key_remote_id", ike_pre_shared_key_remote_id)
        if ike_pre_shared_key_remote_id_variable is not None:
            pulumi.set(__self__, "ike_pre_shared_key_remote_id_variable", ike_pre_shared_key_remote_id_variable)
        if ike_pre_shared_key_variable is not None:
            pulumi.set(__self__, "ike_pre_shared_key_variable", ike_pre_shared_key_variable)
        if ike_rekey_interval is not None:
            pulumi.set(__self__, "ike_rekey_interval", ike_rekey_interval)
        if ike_rekey_interval_variable is not None:
            pulumi.set(__self__, "ike_rekey_interval_variable", ike_rekey_interval_variable)
        if ike_version is not None:
            pulumi.set(__self__, "ike_version", ike_version)
        if ike_version_variable is not None:
            pulumi.set(__self__, "ike_version_variable", ike_version_variable)
        if ip_unnumbered is not None:
            pulumi.set(__self__, "ip_unnumbered", ip_unnumbered)
        if ipsec_ciphersuite is not None:
            pulumi.set(__self__, "ipsec_ciphersuite", ipsec_ciphersuite)
        if ipsec_ciphersuite_variable is not None:
            pulumi.set(__self__, "ipsec_ciphersuite_variable", ipsec_ciphersuite_variable)
        if ipsec_perfect_forward_secrecy is not None:
            pulumi.set(__self__, "ipsec_perfect_forward_secrecy", ipsec_perfect_forward_secrecy)
        if ipsec_perfect_forward_secrecy_variable is not None:
            pulumi.set(__self__, "ipsec_perfect_forward_secrecy_variable", ipsec_perfect_forward_secrecy_variable)
        if ipsec_rekey_interval is not None:
            pulumi.set(__self__, "ipsec_rekey_interval", ipsec_rekey_interval)
        if ipsec_rekey_interval_variable is not None:
            pulumi.set(__self__, "ipsec_rekey_interval_variable", ipsec_rekey_interval_variable)
        if ipsec_replay_window is not None:
            pulumi.set(__self__, "ipsec_replay_window", ipsec_replay_window)
        if ipsec_replay_window_variable is not None:
            pulumi.set(__self__, "ipsec_replay_window_variable", ipsec_replay_window_variable)
        if ipv4_address is not None:
            pulumi.set(__self__, "ipv4_address", ipv4_address)
        if ipv4_address_variable is not None:
            pulumi.set(__self__, "ipv4_address_variable", ipv4_address_variable)
        if mtu is not None:
            pulumi.set(__self__, "mtu", mtu)
        if mtu_variable is not None:
            pulumi.set(__self__, "mtu_variable", mtu_variable)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if name_variable is not None:
            pulumi.set(__self__, "name_variable", name_variable)
        if optional is not None:
            pulumi.set(__self__, "optional", optional)
        if shutdown is not None:
            pulumi.set(__self__, "shutdown", shutdown)
        if sig_provider is not None:
            pulumi.set(__self__, "sig_provider", sig_provider)
        if tcp_mss is not None:
            pulumi.set(__self__, "tcp_mss", tcp_mss)
        if tcp_mss_variable is not None:
            pulumi.set(__self__, "tcp_mss_variable", tcp_mss_variable)
        if track_enable is not None:
            pulumi.set(__self__, "track_enable", track_enable)
        if tracker is not None:
            pulumi.set(__self__, "tracker", tracker)
        if tunnel_dc_preference is not None:
            pulumi.set(__self__, "tunnel_dc_preference", tunnel_dc_preference)
        if tunnel_destination is not None:
            pulumi.set(__self__, "tunnel_destination", tunnel_destination)
        if tunnel_destination_variable is not None:
            pulumi.set(__self__, "tunnel_destination_variable", tunnel_destination_variable)
        if tunnel_public_ip is not None:
            pulumi.set(__self__, "tunnel_public_ip", tunnel_public_ip)
        if tunnel_public_ip_variable is not None:
            pulumi.set(__self__, "tunnel_public_ip_variable", tunnel_public_ip_variable)
        if tunnel_route_via is not None:
            pulumi.set(__self__, "tunnel_route_via", tunnel_route_via)
        if tunnel_route_via_variable is not None:
            pulumi.set(__self__, "tunnel_route_via_variable", tunnel_route_via_variable)
        if tunnel_source is not None:
            pulumi.set(__self__, "tunnel_source", tunnel_source)
        if tunnel_source_interface is not None:
            pulumi.set(__self__, "tunnel_source_interface", tunnel_source_interface)
        if tunnel_source_interface_variable is not None:
            pulumi.set(__self__, "tunnel_source_interface_variable", tunnel_source_interface_variable)
        if tunnel_source_variable is not None:
            pulumi.set(__self__, "tunnel_source_variable", tunnel_source_variable)

    @_builtins.property
    @pulumi.getter
    def application(self) -> Optional[_builtins.str]:
        """
        Enable Application Tunnel Type
          - Choices: `sig`
          - Default value: `sig`
        """
        return pulumi.get(self, "application")

    @_builtins.property
    @pulumi.getter(name="autoTunnelMode")
    def auto_tunnel_mode(self) -> Optional[_builtins.bool]:
        """
        Auto Tunnel Mode
          - Default value: `false`
        """
        return pulumi.get(self, "auto_tunnel_mode")

    @_builtins.property
    @pulumi.getter(name="deadPeerDetectionInterval")
    def dead_peer_detection_interval(self) -> Optional[_builtins.int]:
        """
        IKE keepalive interval (seconds)
          - Range: `0`-`65535`
          - Default value: `10`
        """
        return pulumi.get(self, "dead_peer_detection_interval")

    @_builtins.property
    @pulumi.getter(name="deadPeerDetectionIntervalVariable")
    def dead_peer_detection_interval_variable(self) -> Optional[_builtins.str]:
        """
        Variable name
        """
        return pulumi.get(self, "dead_peer_detection_interval_variable")

    @_builtins.property
    @pulumi.getter(name="deadPeerDetectionRetries")
    def dead_peer_detection_retries(self) -> Optional[_builtins.int]:
        """
        IKE keepalive retries
          - Range: `0`-`255`
          - Default value: `3`
        """
        return pulumi.get(self, "dead_peer_detection_retries")

    @_builtins.property
    @pulumi.getter(name="deadPeerDetectionRetriesVariable")
    def dead_peer_detection_retries_variable(self) -> Optional[_builtins.str]:
        """
        Variable name
        """
        return pulumi.get(self, "dead_peer_detection_retries_variable")

    @_builtins.property
    @pulumi.getter
    def description(self) -> Optional[_builtins.str]:
        """
        Interface description
        """
        return pulumi.get(self, "description")

    @_builtins.property
    @pulumi.getter(name="descriptionVariable")
    def description_variable(self) -> Optional[_builtins.str]:
        """
        Variable name
        """
        return pulumi.get(self, "description_variable")

    @_builtins.property
    @pulumi.getter(name="ikeCiphersuite")
    def ike_ciphersuite(self) -> Optional[_builtins.str]:
        """
        IKE identity the IKE preshared secret belongs to
          - Choices: `aes256-cbc-sha1`, `aes256-cbc-sha2`, `aes128-cbc-sha1`, `aes128-cbc-sha2`
          - Default value: `aes256-cbc-sha1`
        """
        return pulumi.get(self, "ike_ciphersuite")

    @_builtins.property
    @pulumi.getter(name="ikeCiphersuiteVariable")
    def ike_ciphersuite_variable(self) -> Optional[_builtins.str]:
        """
        Variable name
        """
        return pulumi.get(self, "ike_ciphersuite_variable")

    @_builtins.property
    @pulumi.getter(name="ikeGroup")
    def ike_group(self) -> Optional[_builtins.str]:
        """
        IKE Diffie Hellman Groups
          - Choices: `2`, `14`, `15`, `16`
          - Default value: `14`
        """
        return pulumi.get(self, "ike_group")

    @_builtins.property
    @pulumi.getter(name="ikeGroupVariable")
    def ike_group_variable(self) -> Optional[_builtins.str]:
        """
        Variable name
        """
        return pulumi.get(self, "ike_group_variable")

    @_builtins.property
    @pulumi.getter(name="ikePreSharedKey")
    def ike_pre_shared_key(self) -> Optional[_builtins.str]:
        """
        Use preshared key to authenticate IKE peer
        """
        return pulumi.get(self, "ike_pre_shared_key")

    @_builtins.property
    @pulumi.getter(name="ikePreSharedKeyDynamic")
    def ike_pre_shared_key_dynamic(self) -> Optional[_builtins.bool]:
        """
        Use preshared key to authenticate IKE peer
          - Default value: `true`
        """
        return pulumi.get(self, "ike_pre_shared_key_dynamic")

    @_builtins.property
    @pulumi.getter(name="ikePreSharedKeyLocalId")
    def ike_pre_shared_key_local_id(self) -> Optional[_builtins.str]:
        """
        IKE ID for the local endpoint. Input IPv4 address, domain name, or email address
        """
        return pulumi.get(self, "ike_pre_shared_key_local_id")

    @_builtins.property
    @pulumi.getter(name="ikePreSharedKeyLocalIdVariable")
    def ike_pre_shared_key_local_id_variable(self) -> Optional[_builtins.str]:
        """
        Variable name
        """
        return pulumi.get(self, "ike_pre_shared_key_local_id_variable")

    @_builtins.property
    @pulumi.getter(name="ikePreSharedKeyRemoteId")
    def ike_pre_shared_key_remote_id(self) -> Optional[_builtins.str]:
        """
        IKE ID for the remote endpoint. Input IPv4 address, domain name, or email address
        """
        return pulumi.get(self, "ike_pre_shared_key_remote_id")

    @_builtins.property
    @pulumi.getter(name="ikePreSharedKeyRemoteIdVariable")
    def ike_pre_shared_key_remote_id_variable(self) -> Optional[_builtins.str]:
        """
        Variable name
        """
        return pulumi.get(self, "ike_pre_shared_key_remote_id_variable")

    @_builtins.property
    @pulumi.getter(name="ikePreSharedKeyVariable")
    def ike_pre_shared_key_variable(self) -> Optional[_builtins.str]:
        """
        Variable name
        """
        return pulumi.get(self, "ike_pre_shared_key_variable")

    @_builtins.property
    @pulumi.getter(name="ikeRekeyInterval")
    def ike_rekey_interval(self) -> Optional[_builtins.int]:
        """
        IKE rekey interval <300..1209600> seconds
          - Range: `300`-`1209600`
          - Default value: `14400`
        """
        return pulumi.get(self, "ike_rekey_interval")

    @_builtins.property
    @pulumi.getter(name="ikeRekeyIntervalVariable")
    def ike_rekey_interval_variable(self) -> Optional[_builtins.str]:
        """
        Variable name
        """
        return pulumi.get(self, "ike_rekey_interval_variable")

    @_builtins.property
    @pulumi.getter(name="ikeVersion")
    def ike_version(self) -> Optional[_builtins.int]:
        """
        IKE Version <1..2>
          - Range: `1`-`2`
          - Default value: `2`
        """
        return pulumi.get(self, "ike_version")

    @_builtins.property
    @pulumi.getter(name="ikeVersionVariable")
    def ike_version_variable(self) -> Optional[_builtins.str]:
        """
        Variable name
        """
        return pulumi.get(self, "ike_version_variable")

    @_builtins.property
    @pulumi.getter(name="ipUnnumbered")
    def ip_unnumbered(self) -> Optional[_builtins.bool]:
        """
        Unnumbered interface
          - Default value: `true`
        """
        return pulumi.get(self, "ip_unnumbered")

    @_builtins.property
    @pulumi.getter(name="ipsecCiphersuite")
    def ipsec_ciphersuite(self) -> Optional[_builtins.str]:
        """
        IPsec(ESP) encryption and integrity protocol
          - Choices: `aes256-cbc-sha1`, `aes256-cbc-sha384`, `aes256-cbc-sha256`, `aes256-cbc-sha512`, `aes256-gcm`, `null-sha1`, `null-sha384`, `null-sha256`, `null-sha512`
          - Default value: `aes256-gcm`
        """
        return pulumi.get(self, "ipsec_ciphersuite")

    @_builtins.property
    @pulumi.getter(name="ipsecCiphersuiteVariable")
    def ipsec_ciphersuite_variable(self) -> Optional[_builtins.str]:
        """
        Variable name
        """
        return pulumi.get(self, "ipsec_ciphersuite_variable")

    @_builtins.property
    @pulumi.getter(name="ipsecPerfectForwardSecrecy")
    def ipsec_perfect_forward_secrecy(self) -> Optional[_builtins.str]:
        """
        IPsec perfect forward secrecy settings
          - Choices: `group-2`, `group-14`, `group-15`, `group-16`, `none`
          - Default value: `none`
        """
        return pulumi.get(self, "ipsec_perfect_forward_secrecy")

    @_builtins.property
    @pulumi.getter(name="ipsecPerfectForwardSecrecyVariable")
    def ipsec_perfect_forward_secrecy_variable(self) -> Optional[_builtins.str]:
        """
        Variable name
        """
        return pulumi.get(self, "ipsec_perfect_forward_secrecy_variable")

    @_builtins.property
    @pulumi.getter(name="ipsecRekeyInterval")
    def ipsec_rekey_interval(self) -> Optional[_builtins.int]:
        """
        IPsec rekey interval <300..1209600> seconds
          - Range: `300`-`1209600`
          - Default value: `3600`
        """
        return pulumi.get(self, "ipsec_rekey_interval")

    @_builtins.property
    @pulumi.getter(name="ipsecRekeyIntervalVariable")
    def ipsec_rekey_interval_variable(self) -> Optional[_builtins.str]:
        """
        Variable name
        """
        return pulumi.get(self, "ipsec_rekey_interval_variable")

    @_builtins.property
    @pulumi.getter(name="ipsecReplayWindow")
    def ipsec_replay_window(self) -> Optional[_builtins.int]:
        """
        Replay window size 32..8192 (must be a power of 2)
          - Range: `64`-`4096`
          - Default value: `512`
        """
        return pulumi.get(self, "ipsec_replay_window")

    @_builtins.property
    @pulumi.getter(name="ipsecReplayWindowVariable")
    def ipsec_replay_window_variable(self) -> Optional[_builtins.str]:
        """
        Variable name
        """
        return pulumi.get(self, "ipsec_replay_window_variable")

    @_builtins.property
    @pulumi.getter(name="ipv4Address")
    def ipv4_address(self) -> Optional[_builtins.str]:
        """
        Assign IPv4 address
        """
        return pulumi.get(self, "ipv4_address")

    @_builtins.property
    @pulumi.getter(name="ipv4AddressVariable")
    def ipv4_address_variable(self) -> Optional[_builtins.str]:
        """
        Variable name
        """
        return pulumi.get(self, "ipv4_address_variable")

    @_builtins.property
    @pulumi.getter
    def mtu(self) -> Optional[_builtins.int]:
        """
        Interface MTU <576..2000>, in bytes
          - Range: `576`-`2000`
          - Default value: `1400`
        """
        return pulumi.get(self, "mtu")

    @_builtins.property
    @pulumi.getter(name="mtuVariable")
    def mtu_variable(self) -> Optional[_builtins.str]:
        """
        Variable name
        """
        return pulumi.get(self, "mtu_variable")

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[_builtins.str]:
        """
        Interface name: IPsec when present
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter(name="nameVariable")
    def name_variable(self) -> Optional[_builtins.str]:
        """
        Variable name
        """
        return pulumi.get(self, "name_variable")

    @_builtins.property
    @pulumi.getter
    def optional(self) -> Optional[_builtins.bool]:
        """
        Indicates if list item is considered optional.
        """
        return pulumi.get(self, "optional")

    @_builtins.property
    @pulumi.getter
    def shutdown(self) -> Optional[_builtins.bool]:
        """
        Administrative state
          - Default value: `false`
        """
        return pulumi.get(self, "shutdown")

    @_builtins.property
    @pulumi.getter(name="sigProvider")
    def sig_provider(self) -> Optional[_builtins.str]:
        """
        SIG Tunnel Provider
          - Choices: `secure-internet-gateway-umbrella`, `secure-internet-gateway-zscaler`, `secure-internet-gateway-other`
          - Default value: `secure-internet-gateway-umbrella`
        """
        return pulumi.get(self, "sig_provider")

    @_builtins.property
    @pulumi.getter(name="tcpMss")
    def tcp_mss(self) -> Optional[_builtins.int]:
        """
        TCP MSS on SYN packets, in bytes
          - Range: `500`-`1460`
        """
        return pulumi.get(self, "tcp_mss")

    @_builtins.property
    @pulumi.getter(name="tcpMssVariable")
    def tcp_mss_variable(self) -> Optional[_builtins.str]:
        """
        Variable name
        """
        return pulumi.get(self, "tcp_mss_variable")

    @_builtins.property
    @pulumi.getter(name="trackEnable")
    def track_enable(self) -> Optional[_builtins.bool]:
        """
        Enable/disable SIG tracking
          - Default value: `true`
        """
        return pulumi.get(self, "track_enable")

    @_builtins.property
    @pulumi.getter
    def tracker(self) -> Optional[_builtins.str]:
        """
        Enable tracker for this interface
        """
        return pulumi.get(self, "tracker")

    @_builtins.property
    @pulumi.getter(name="tunnelDcPreference")
    def tunnel_dc_preference(self) -> Optional[_builtins.str]:
        """
        SIG Tunnel Data Center
          - Choices: `primary-dc`, `secondary-dc`
          - Default value: `primary-dc`
        """
        return pulumi.get(self, "tunnel_dc_preference")

    @_builtins.property
    @pulumi.getter(name="tunnelDestination")
    def tunnel_destination(self) -> Optional[_builtins.str]:
        """
        Tunnel destination IP address
        """
        return pulumi.get(self, "tunnel_destination")

    @_builtins.property
    @pulumi.getter(name="tunnelDestinationVariable")
    def tunnel_destination_variable(self) -> Optional[_builtins.str]:
        """
        Variable name
        """
        return pulumi.get(self, "tunnel_destination_variable")

    @_builtins.property
    @pulumi.getter(name="tunnelPublicIp")
    def tunnel_public_ip(self) -> Optional[_builtins.str]:
        """
        Public IP required to setup GRE tunnel to Zscaler
          - Default value: `Auto`
        """
        return pulumi.get(self, "tunnel_public_ip")

    @_builtins.property
    @pulumi.getter(name="tunnelPublicIpVariable")
    def tunnel_public_ip_variable(self) -> Optional[_builtins.str]:
        """
        Variable name
        """
        return pulumi.get(self, "tunnel_public_ip_variable")

    @_builtins.property
    @pulumi.getter(name="tunnelRouteVia")
    def tunnel_route_via(self) -> Optional[_builtins.str]:
        """
        <1..32 characters> Interface name: ge0/<0-..> or ge0/<0-..>.vlanid
        """
        return pulumi.get(self, "tunnel_route_via")

    @_builtins.property
    @pulumi.getter(name="tunnelRouteViaVariable")
    def tunnel_route_via_variable(self) -> Optional[_builtins.str]:
        """
        Variable name
        """
        return pulumi.get(self, "tunnel_route_via_variable")

    @_builtins.property
    @pulumi.getter(name="tunnelSource")
    def tunnel_source(self) -> Optional[_builtins.str]:
        """
        Tunnel source IP Address
        """
        return pulumi.get(self, "tunnel_source")

    @_builtins.property
    @pulumi.getter(name="tunnelSourceInterface")
    def tunnel_source_interface(self) -> Optional[_builtins.str]:
        """
        <1..32 characters> Interface name: ge0/<0-..> or ge0/<0-..>.vlanid
        """
        return pulumi.get(self, "tunnel_source_interface")

    @_builtins.property
    @pulumi.getter(name="tunnelSourceInterfaceVariable")
    def tunnel_source_interface_variable(self) -> Optional[_builtins.str]:
        """
        Variable name
        """
        return pulumi.get(self, "tunnel_source_interface_variable")

    @_builtins.property
    @pulumi.getter(name="tunnelSourceVariable")
    def tunnel_source_variable(self) -> Optional[_builtins.str]:
        """
        Variable name
        """
        return pulumi.get(self, "tunnel_source_variable")


@pulumi.output_type
class CiscoSecureInternetGatewayFeatureTemplateService(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "interfacePairs":
            suggest = "interface_pairs"
        elif key == "serviceType":
            suggest = "service_type"
        elif key == "umbrellaPrimaryDataCenter":
            suggest = "umbrella_primary_data_center"
        elif key == "umbrellaPrimaryDataCenterVariable":
            suggest = "umbrella_primary_data_center_variable"
        elif key == "umbrellaSecondaryDataCenter":
            suggest = "umbrella_secondary_data_center"
        elif key == "umbrellaSecondaryDataCenterVariable":
            suggest = "umbrella_secondary_data_center_variable"
        elif key == "zscalerAupBlockInternetUntilAccepted":
            suggest = "zscaler_aup_block_internet_until_accepted"
        elif key == "zscalerAupEnabled":
            suggest = "zscaler_aup_enabled"
        elif key == "zscalerAupForceSslInspection":
            suggest = "zscaler_aup_force_ssl_inspection"
        elif key == "zscalerAupTimeout":
            suggest = "zscaler_aup_timeout"
        elif key == "zscalerAuthenticationRequired":
            suggest = "zscaler_authentication_required"
        elif key == "zscalerCautionEnabled":
            suggest = "zscaler_caution_enabled"
        elif key == "zscalerFirewallEnabled":
            suggest = "zscaler_firewall_enabled"
        elif key == "zscalerIpsControlEnabled":
            suggest = "zscaler_ips_control_enabled"
        elif key == "zscalerLocationName":
            suggest = "zscaler_location_name"
        elif key == "zscalerLocationNameVariable":
            suggest = "zscaler_location_name_variable"
        elif key == "zscalerPrimaryDataCenter":
            suggest = "zscaler_primary_data_center"
        elif key == "zscalerPrimaryDataCenterVariable":
            suggest = "zscaler_primary_data_center_variable"
        elif key == "zscalerSecondaryDataCenter":
            suggest = "zscaler_secondary_data_center"
        elif key == "zscalerSecondaryDataCenterVariable":
            suggest = "zscaler_secondary_data_center_variable"
        elif key == "zscalerSurrogateDisplayTimeUnit":
            suggest = "zscaler_surrogate_display_time_unit"
        elif key == "zscalerSurrogateIdleTime":
            suggest = "zscaler_surrogate_idle_time"
        elif key == "zscalerSurrogateIp":
            suggest = "zscaler_surrogate_ip"
        elif key == "zscalerSurrogateIpEnforceForKnownBrowsers":
            suggest = "zscaler_surrogate_ip_enforce_for_known_browsers"
        elif key == "zscalerSurrogateRefreshTime":
            suggest = "zscaler_surrogate_refresh_time"
        elif key == "zscalerSurrogateRefreshTimeUnit":
            suggest = "zscaler_surrogate_refresh_time_unit"
        elif key == "zscalerXffForward":
            suggest = "zscaler_xff_forward"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in CiscoSecureInternetGatewayFeatureTemplateService. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        CiscoSecureInternetGatewayFeatureTemplateService.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        CiscoSecureInternetGatewayFeatureTemplateService.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 interface_pairs: Optional[Sequence['outputs.CiscoSecureInternetGatewayFeatureTemplateServiceInterfacePair']] = None,
                 optional: Optional[_builtins.bool] = None,
                 service_type: Optional[_builtins.str] = None,
                 umbrella_primary_data_center: Optional[_builtins.str] = None,
                 umbrella_primary_data_center_variable: Optional[_builtins.str] = None,
                 umbrella_secondary_data_center: Optional[_builtins.str] = None,
                 umbrella_secondary_data_center_variable: Optional[_builtins.str] = None,
                 zscaler_aup_block_internet_until_accepted: Optional[_builtins.bool] = None,
                 zscaler_aup_enabled: Optional[_builtins.bool] = None,
                 zscaler_aup_force_ssl_inspection: Optional[_builtins.bool] = None,
                 zscaler_aup_timeout: Optional[_builtins.int] = None,
                 zscaler_authentication_required: Optional[_builtins.bool] = None,
                 zscaler_caution_enabled: Optional[_builtins.bool] = None,
                 zscaler_firewall_enabled: Optional[_builtins.bool] = None,
                 zscaler_ips_control_enabled: Optional[_builtins.bool] = None,
                 zscaler_location_name: Optional[_builtins.str] = None,
                 zscaler_location_name_variable: Optional[_builtins.str] = None,
                 zscaler_primary_data_center: Optional[_builtins.str] = None,
                 zscaler_primary_data_center_variable: Optional[_builtins.str] = None,
                 zscaler_secondary_data_center: Optional[_builtins.str] = None,
                 zscaler_secondary_data_center_variable: Optional[_builtins.str] = None,
                 zscaler_surrogate_display_time_unit: Optional[_builtins.str] = None,
                 zscaler_surrogate_idle_time: Optional[_builtins.int] = None,
                 zscaler_surrogate_ip: Optional[_builtins.bool] = None,
                 zscaler_surrogate_ip_enforce_for_known_browsers: Optional[_builtins.bool] = None,
                 zscaler_surrogate_refresh_time: Optional[_builtins.int] = None,
                 zscaler_surrogate_refresh_time_unit: Optional[_builtins.str] = None,
                 zscaler_xff_forward: Optional[_builtins.bool] = None):
        """
        :param Sequence['CiscoSecureInternetGatewayFeatureTemplateServiceInterfacePairArgs'] interface_pairs: Interface Pair for active and backup
        :param _builtins.bool optional: Indicates if list item is considered optional.
        :param _builtins.str service_type: Service Type
                 - Choices: `sig`
                 - Default value: `sig`
        :param _builtins.str umbrella_primary_data_center: Umbrella Primary Datacenter
                 - Default value: `Auto`
        :param _builtins.str umbrella_primary_data_center_variable: Variable name
        :param _builtins.str umbrella_secondary_data_center: Umbrella Secondary Datacenter
                 - Default value: `Auto`
        :param _builtins.str umbrella_secondary_data_center_variable: Variable name
        :param _builtins.bool zscaler_aup_block_internet_until_accepted: For first-time Acceptable User Policy behavior, block Internet access
                 - Default value: `false`
        :param _builtins.bool zscaler_aup_enabled: Enable Acceptable User Policy
                 - Default value: `false`
        :param _builtins.bool zscaler_aup_force_ssl_inspection: For first-time Acceptable User Policy behavior, force SSL inspection
                 - Default value: `false`
        :param _builtins.int zscaler_aup_timeout: Custom Acceptable User Policy frequency in days
                 - Default value: `0`
        :param _builtins.bool zscaler_authentication_required: Enforce Authentication
                 - Default value: `false`
        :param _builtins.bool zscaler_caution_enabled: Enable Caution
                 - Default value: `false`
        :param _builtins.bool zscaler_firewall_enabled: Firewall enabled
                 - Default value: `false`
        :param _builtins.bool zscaler_ips_control_enabled: Enable IPS Control
                 - Default value: `false`
        :param _builtins.str zscaler_location_name: Zscaler location name (optional)
                 - Default value: `Auto`
        :param _builtins.str zscaler_location_name_variable: Variable name
        :param _builtins.str zscaler_primary_data_center: Custom Primary Datacenter
                 - Default value: `Auto`
        :param _builtins.str zscaler_primary_data_center_variable: Variable name
        :param _builtins.str zscaler_secondary_data_center: Custom Secondary Datacenter
                 - Default value: `Auto`
        :param _builtins.str zscaler_secondary_data_center_variable: Variable name
        :param _builtins.str zscaler_surrogate_display_time_unit: Display time unit
                 - Choices: `MINUTE`, `HOUR`, `DAY`
                 - Default value: `MINUTE`
        :param _builtins.int zscaler_surrogate_idle_time: Idle time to disassociation
                 - Default value: `0`
        :param _builtins.bool zscaler_surrogate_ip: Enable Surrogate IP
                 - Default value: `false`
        :param _builtins.bool zscaler_surrogate_ip_enforce_for_known_browsers: Enforce Surrogate IP for known browsers
                 - Default value: `false`
        :param _builtins.int zscaler_surrogate_refresh_time: Refresh time for re-validation of surrogacy in minutes
                 - Default value: `0`
        :param _builtins.str zscaler_surrogate_refresh_time_unit: Refresh Time unit
                 - Choices: `MINUTE`, `HOUR`, `DAY`
                 - Default value: `MINUTE`
        :param _builtins.bool zscaler_xff_forward: XFF forwarding enabled
                 - Default value: `false`
        """
        if interface_pairs is not None:
            pulumi.set(__self__, "interface_pairs", interface_pairs)
        if optional is not None:
            pulumi.set(__self__, "optional", optional)
        if service_type is not None:
            pulumi.set(__self__, "service_type", service_type)
        if umbrella_primary_data_center is not None:
            pulumi.set(__self__, "umbrella_primary_data_center", umbrella_primary_data_center)
        if umbrella_primary_data_center_variable is not None:
            pulumi.set(__self__, "umbrella_primary_data_center_variable", umbrella_primary_data_center_variable)
        if umbrella_secondary_data_center is not None:
            pulumi.set(__self__, "umbrella_secondary_data_center", umbrella_secondary_data_center)
        if umbrella_secondary_data_center_variable is not None:
            pulumi.set(__self__, "umbrella_secondary_data_center_variable", umbrella_secondary_data_center_variable)
        if zscaler_aup_block_internet_until_accepted is not None:
            pulumi.set(__self__, "zscaler_aup_block_internet_until_accepted", zscaler_aup_block_internet_until_accepted)
        if zscaler_aup_enabled is not None:
            pulumi.set(__self__, "zscaler_aup_enabled", zscaler_aup_enabled)
        if zscaler_aup_force_ssl_inspection is not None:
            pulumi.set(__self__, "zscaler_aup_force_ssl_inspection", zscaler_aup_force_ssl_inspection)
        if zscaler_aup_timeout is not None:
            pulumi.set(__self__, "zscaler_aup_timeout", zscaler_aup_timeout)
        if zscaler_authentication_required is not None:
            pulumi.set(__self__, "zscaler_authentication_required", zscaler_authentication_required)
        if zscaler_caution_enabled is not None:
            pulumi.set(__self__, "zscaler_caution_enabled", zscaler_caution_enabled)
        if zscaler_firewall_enabled is not None:
            pulumi.set(__self__, "zscaler_firewall_enabled", zscaler_firewall_enabled)
        if zscaler_ips_control_enabled is not None:
            pulumi.set(__self__, "zscaler_ips_control_enabled", zscaler_ips_control_enabled)
        if zscaler_location_name is not None:
            pulumi.set(__self__, "zscaler_location_name", zscaler_location_name)
        if zscaler_location_name_variable is not None:
            pulumi.set(__self__, "zscaler_location_name_variable", zscaler_location_name_variable)
        if zscaler_primary_data_center is not None:
            pulumi.set(__self__, "zscaler_primary_data_center", zscaler_primary_data_center)
        if zscaler_primary_data_center_variable is not None:
            pulumi.set(__self__, "zscaler_primary_data_center_variable", zscaler_primary_data_center_variable)
        if zscaler_secondary_data_center is not None:
            pulumi.set(__self__, "zscaler_secondary_data_center", zscaler_secondary_data_center)
        if zscaler_secondary_data_center_variable is not None:
            pulumi.set(__self__, "zscaler_secondary_data_center_variable", zscaler_secondary_data_center_variable)
        if zscaler_surrogate_display_time_unit is not None:
            pulumi.set(__self__, "zscaler_surrogate_display_time_unit", zscaler_surrogate_display_time_unit)
        if zscaler_surrogate_idle_time is not None:
            pulumi.set(__self__, "zscaler_surrogate_idle_time", zscaler_surrogate_idle_time)
        if zscaler_surrogate_ip is not None:
            pulumi.set(__self__, "zscaler_surrogate_ip", zscaler_surrogate_ip)
        if zscaler_surrogate_ip_enforce_for_known_browsers is not None:
            pulumi.set(__self__, "zscaler_surrogate_ip_enforce_for_known_browsers", zscaler_surrogate_ip_enforce_for_known_browsers)
        if zscaler_surrogate_refresh_time is not None:
            pulumi.set(__self__, "zscaler_surrogate_refresh_time", zscaler_surrogate_refresh_time)
        if zscaler_surrogate_refresh_time_unit is not None:
            pulumi.set(__self__, "zscaler_surrogate_refresh_time_unit", zscaler_surrogate_refresh_time_unit)
        if zscaler_xff_forward is not None:
            pulumi.set(__self__, "zscaler_xff_forward", zscaler_xff_forward)

    @_builtins.property
    @pulumi.getter(name="interfacePairs")
    def interface_pairs(self) -> Optional[Sequence['outputs.CiscoSecureInternetGatewayFeatureTemplateServiceInterfacePair']]:
        """
        Interface Pair for active and backup
        """
        return pulumi.get(self, "interface_pairs")

    @_builtins.property
    @pulumi.getter
    def optional(self) -> Optional[_builtins.bool]:
        """
        Indicates if list item is considered optional.
        """
        return pulumi.get(self, "optional")

    @_builtins.property
    @pulumi.getter(name="serviceType")
    def service_type(self) -> Optional[_builtins.str]:
        """
        Service Type
          - Choices: `sig`
          - Default value: `sig`
        """
        return pulumi.get(self, "service_type")

    @_builtins.property
    @pulumi.getter(name="umbrellaPrimaryDataCenter")
    def umbrella_primary_data_center(self) -> Optional[_builtins.str]:
        """
        Umbrella Primary Datacenter
          - Default value: `Auto`
        """
        return pulumi.get(self, "umbrella_primary_data_center")

    @_builtins.property
    @pulumi.getter(name="umbrellaPrimaryDataCenterVariable")
    def umbrella_primary_data_center_variable(self) -> Optional[_builtins.str]:
        """
        Variable name
        """
        return pulumi.get(self, "umbrella_primary_data_center_variable")

    @_builtins.property
    @pulumi.getter(name="umbrellaSecondaryDataCenter")
    def umbrella_secondary_data_center(self) -> Optional[_builtins.str]:
        """
        Umbrella Secondary Datacenter
          - Default value: `Auto`
        """
        return pulumi.get(self, "umbrella_secondary_data_center")

    @_builtins.property
    @pulumi.getter(name="umbrellaSecondaryDataCenterVariable")
    def umbrella_secondary_data_center_variable(self) -> Optional[_builtins.str]:
        """
        Variable name
        """
        return pulumi.get(self, "umbrella_secondary_data_center_variable")

    @_builtins.property
    @pulumi.getter(name="zscalerAupBlockInternetUntilAccepted")
    def zscaler_aup_block_internet_until_accepted(self) -> Optional[_builtins.bool]:
        """
        For first-time Acceptable User Policy behavior, block Internet access
          - Default value: `false`
        """
        return pulumi.get(self, "zscaler_aup_block_internet_until_accepted")

    @_builtins.property
    @pulumi.getter(name="zscalerAupEnabled")
    def zscaler_aup_enabled(self) -> Optional[_builtins.bool]:
        """
        Enable Acceptable User Policy
          - Default value: `false`
        """
        return pulumi.get(self, "zscaler_aup_enabled")

    @_builtins.property
    @pulumi.getter(name="zscalerAupForceSslInspection")
    def zscaler_aup_force_ssl_inspection(self) -> Optional[_builtins.bool]:
        """
        For first-time Acceptable User Policy behavior, force SSL inspection
          - Default value: `false`
        """
        return pulumi.get(self, "zscaler_aup_force_ssl_inspection")

    @_builtins.property
    @pulumi.getter(name="zscalerAupTimeout")
    def zscaler_aup_timeout(self) -> Optional[_builtins.int]:
        """
        Custom Acceptable User Policy frequency in days
          - Default value: `0`
        """
        return pulumi.get(self, "zscaler_aup_timeout")

    @_builtins.property
    @pulumi.getter(name="zscalerAuthenticationRequired")
    def zscaler_authentication_required(self) -> Optional[_builtins.bool]:
        """
        Enforce Authentication
          - Default value: `false`
        """
        return pulumi.get(self, "zscaler_authentication_required")

    @_builtins.property
    @pulumi.getter(name="zscalerCautionEnabled")
    def zscaler_caution_enabled(self) -> Optional[_builtins.bool]:
        """
        Enable Caution
          - Default value: `false`
        """
        return pulumi.get(self, "zscaler_caution_enabled")

    @_builtins.property
    @pulumi.getter(name="zscalerFirewallEnabled")
    def zscaler_firewall_enabled(self) -> Optional[_builtins.bool]:
        """
        Firewall enabled
          - Default value: `false`
        """
        return pulumi.get(self, "zscaler_firewall_enabled")

    @_builtins.property
    @pulumi.getter(name="zscalerIpsControlEnabled")
    def zscaler_ips_control_enabled(self) -> Optional[_builtins.bool]:
        """
        Enable IPS Control
          - Default value: `false`
        """
        return pulumi.get(self, "zscaler_ips_control_enabled")

    @_builtins.property
    @pulumi.getter(name="zscalerLocationName")
    def zscaler_location_name(self) -> Optional[_builtins.str]:
        """
        Zscaler location name (optional)
          - Default value: `Auto`
        """
        return pulumi.get(self, "zscaler_location_name")

    @_builtins.property
    @pulumi.getter(name="zscalerLocationNameVariable")
    def zscaler_location_name_variable(self) -> Optional[_builtins.str]:
        """
        Variable name
        """
        return pulumi.get(self, "zscaler_location_name_variable")

    @_builtins.property
    @pulumi.getter(name="zscalerPrimaryDataCenter")
    def zscaler_primary_data_center(self) -> Optional[_builtins.str]:
        """
        Custom Primary Datacenter
          - Default value: `Auto`
        """
        return pulumi.get(self, "zscaler_primary_data_center")

    @_builtins.property
    @pulumi.getter(name="zscalerPrimaryDataCenterVariable")
    def zscaler_primary_data_center_variable(self) -> Optional[_builtins.str]:
        """
        Variable name
        """
        return pulumi.get(self, "zscaler_primary_data_center_variable")

    @_builtins.property
    @pulumi.getter(name="zscalerSecondaryDataCenter")
    def zscaler_secondary_data_center(self) -> Optional[_builtins.str]:
        """
        Custom Secondary Datacenter
          - Default value: `Auto`
        """
        return pulumi.get(self, "zscaler_secondary_data_center")

    @_builtins.property
    @pulumi.getter(name="zscalerSecondaryDataCenterVariable")
    def zscaler_secondary_data_center_variable(self) -> Optional[_builtins.str]:
        """
        Variable name
        """
        return pulumi.get(self, "zscaler_secondary_data_center_variable")

    @_builtins.property
    @pulumi.getter(name="zscalerSurrogateDisplayTimeUnit")
    def zscaler_surrogate_display_time_unit(self) -> Optional[_builtins.str]:
        """
        Display time unit
          - Choices: `MINUTE`, `HOUR`, `DAY`
          - Default value: `MINUTE`
        """
        return pulumi.get(self, "zscaler_surrogate_display_time_unit")

    @_builtins.property
    @pulumi.getter(name="zscalerSurrogateIdleTime")
    def zscaler_surrogate_idle_time(self) -> Optional[_builtins.int]:
        """
        Idle time to disassociation
          - Default value: `0`
        """
        return pulumi.get(self, "zscaler_surrogate_idle_time")

    @_builtins.property
    @pulumi.getter(name="zscalerSurrogateIp")
    def zscaler_surrogate_ip(self) -> Optional[_builtins.bool]:
        """
        Enable Surrogate IP
          - Default value: `false`
        """
        return pulumi.get(self, "zscaler_surrogate_ip")

    @_builtins.property
    @pulumi.getter(name="zscalerSurrogateIpEnforceForKnownBrowsers")
    def zscaler_surrogate_ip_enforce_for_known_browsers(self) -> Optional[_builtins.bool]:
        """
        Enforce Surrogate IP for known browsers
          - Default value: `false`
        """
        return pulumi.get(self, "zscaler_surrogate_ip_enforce_for_known_browsers")

    @_builtins.property
    @pulumi.getter(name="zscalerSurrogateRefreshTime")
    def zscaler_surrogate_refresh_time(self) -> Optional[_builtins.int]:
        """
        Refresh time for re-validation of surrogacy in minutes
          - Default value: `0`
        """
        return pulumi.get(self, "zscaler_surrogate_refresh_time")

    @_builtins.property
    @pulumi.getter(name="zscalerSurrogateRefreshTimeUnit")
    def zscaler_surrogate_refresh_time_unit(self) -> Optional[_builtins.str]:
        """
        Refresh Time unit
          - Choices: `MINUTE`, `HOUR`, `DAY`
          - Default value: `MINUTE`
        """
        return pulumi.get(self, "zscaler_surrogate_refresh_time_unit")

    @_builtins.property
    @pulumi.getter(name="zscalerXffForward")
    def zscaler_xff_forward(self) -> Optional[_builtins.bool]:
        """
        XFF forwarding enabled
          - Default value: `false`
        """
        return pulumi.get(self, "zscaler_xff_forward")


@pulumi.output_type
class CiscoSecureInternetGatewayFeatureTemplateServiceInterfacePair(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "activeInterface":
            suggest = "active_interface"
        elif key == "activeInterfaceWeight":
            suggest = "active_interface_weight"
        elif key == "backupInterface":
            suggest = "backup_interface"
        elif key == "backupInterfaceWeight":
            suggest = "backup_interface_weight"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in CiscoSecureInternetGatewayFeatureTemplateServiceInterfacePair. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        CiscoSecureInternetGatewayFeatureTemplateServiceInterfacePair.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        CiscoSecureInternetGatewayFeatureTemplateServiceInterfacePair.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 active_interface: Optional[_builtins.str] = None,
                 active_interface_weight: Optional[_builtins.int] = None,
                 backup_interface: Optional[_builtins.str] = None,
                 backup_interface_weight: Optional[_builtins.int] = None,
                 optional: Optional[_builtins.bool] = None):
        """
        :param _builtins.str active_interface: Active Tunnel Interface for SIG
        :param _builtins.int active_interface_weight: Active Tunnel Interface Weight
                 - Range: `1`-`255`
                 - Default value: `1`
        :param _builtins.str backup_interface: Backup Tunnel Interface for SIG
        :param _builtins.int backup_interface_weight: Backup Tunnel Interface Weight
                 - Range: `1`-`255`
                 - Default value: `1`
        :param _builtins.bool optional: Indicates if list item is considered optional.
        """
        if active_interface is not None:
            pulumi.set(__self__, "active_interface", active_interface)
        if active_interface_weight is not None:
            pulumi.set(__self__, "active_interface_weight", active_interface_weight)
        if backup_interface is not None:
            pulumi.set(__self__, "backup_interface", backup_interface)
        if backup_interface_weight is not None:
            pulumi.set(__self__, "backup_interface_weight", backup_interface_weight)
        if optional is not None:
            pulumi.set(__self__, "optional", optional)

    @_builtins.property
    @pulumi.getter(name="activeInterface")
    def active_interface(self) -> Optional[_builtins.str]:
        """
        Active Tunnel Interface for SIG
        """
        return pulumi.get(self, "active_interface")

    @_builtins.property
    @pulumi.getter(name="activeInterfaceWeight")
    def active_interface_weight(self) -> Optional[_builtins.int]:
        """
        Active Tunnel Interface Weight
          - Range: `1`-`255`
          - Default value: `1`
        """
        return pulumi.get(self, "active_interface_weight")

    @_builtins.property
    @pulumi.getter(name="backupInterface")
    def backup_interface(self) -> Optional[_builtins.str]:
        """
        Backup Tunnel Interface for SIG
        """
        return pulumi.get(self, "backup_interface")

    @_builtins.property
    @pulumi.getter(name="backupInterfaceWeight")
    def backup_interface_weight(self) -> Optional[_builtins.int]:
        """
        Backup Tunnel Interface Weight
          - Range: `1`-`255`
          - Default value: `1`
        """
        return pulumi.get(self, "backup_interface_weight")

    @_builtins.property
    @pulumi.getter
    def optional(self) -> Optional[_builtins.bool]:
        """
        Indicates if list item is considered optional.
        """
        return pulumi.get(self, "optional")


@pulumi.output_type
class CiscoSecureInternetGatewayFeatureTemplateTracker(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "endpointApiUrl":
            suggest = "endpoint_api_url"
        elif key == "endpointApiUrlVariable":
            suggest = "endpoint_api_url_variable"
        elif key == "intervalVariable":
            suggest = "interval_variable"
        elif key == "multiplierVariable":
            suggest = "multiplier_variable"
        elif key == "nameVariable":
            suggest = "name_variable"
        elif key == "thresholdVariable":
            suggest = "threshold_variable"
        elif key == "trackerType":
            suggest = "tracker_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in CiscoSecureInternetGatewayFeatureTemplateTracker. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        CiscoSecureInternetGatewayFeatureTemplateTracker.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        CiscoSecureInternetGatewayFeatureTemplateTracker.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 endpoint_api_url: Optional[_builtins.str] = None,
                 endpoint_api_url_variable: Optional[_builtins.str] = None,
                 interval: Optional[_builtins.int] = None,
                 interval_variable: Optional[_builtins.str] = None,
                 multiplier: Optional[_builtins.int] = None,
                 multiplier_variable: Optional[_builtins.str] = None,
                 name: Optional[_builtins.str] = None,
                 name_variable: Optional[_builtins.str] = None,
                 optional: Optional[_builtins.bool] = None,
                 threshold: Optional[_builtins.int] = None,
                 threshold_variable: Optional[_builtins.str] = None,
                 tracker_type: Optional[_builtins.str] = None):
        """
        :param _builtins.str endpoint_api_url: API url of endpoint
        :param _builtins.str endpoint_api_url_variable: Variable name
        :param _builtins.int interval: Probe interval <10..600> seconds
                 - Range: `20`-`600`
                 - Default value: `60`
        :param _builtins.str interval_variable: Variable name
        :param _builtins.int multiplier: Probe failure multiplier <1..10> failed attempts
                 - Range: `1`-`10`
                 - Default value: `3`
        :param _builtins.str multiplier_variable: Variable name
        :param _builtins.str name: Tracker name
        :param _builtins.str name_variable: Variable name
        :param _builtins.bool optional: Indicates if list item is considered optional.
        :param _builtins.int threshold: Probe Timeout threshold <100..1000> milliseconds
                 - Range: `100`-`1000`
                 - Default value: `300`
        :param _builtins.str threshold_variable: Variable name
        :param _builtins.str tracker_type: - Choices: `SIG`
                 - Default value: ` SIG`
        """
        if endpoint_api_url is not None:
            pulumi.set(__self__, "endpoint_api_url", endpoint_api_url)
        if endpoint_api_url_variable is not None:
            pulumi.set(__self__, "endpoint_api_url_variable", endpoint_api_url_variable)
        if interval is not None:
            pulumi.set(__self__, "interval", interval)
        if interval_variable is not None:
            pulumi.set(__self__, "interval_variable", interval_variable)
        if multiplier is not None:
            pulumi.set(__self__, "multiplier", multiplier)
        if multiplier_variable is not None:
            pulumi.set(__self__, "multiplier_variable", multiplier_variable)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if name_variable is not None:
            pulumi.set(__self__, "name_variable", name_variable)
        if optional is not None:
            pulumi.set(__self__, "optional", optional)
        if threshold is not None:
            pulumi.set(__self__, "threshold", threshold)
        if threshold_variable is not None:
            pulumi.set(__self__, "threshold_variable", threshold_variable)
        if tracker_type is not None:
            pulumi.set(__self__, "tracker_type", tracker_type)

    @_builtins.property
    @pulumi.getter(name="endpointApiUrl")
    def endpoint_api_url(self) -> Optional[_builtins.str]:
        """
        API url of endpoint
        """
        return pulumi.get(self, "endpoint_api_url")

    @_builtins.property
    @pulumi.getter(name="endpointApiUrlVariable")
    def endpoint_api_url_variable(self) -> Optional[_builtins.str]:
        """
        Variable name
        """
        return pulumi.get(self, "endpoint_api_url_variable")

    @_builtins.property
    @pulumi.getter
    def interval(self) -> Optional[_builtins.int]:
        """
        Probe interval <10..600> seconds
          - Range: `20`-`600`
          - Default value: `60`
        """
        return pulumi.get(self, "interval")

    @_builtins.property
    @pulumi.getter(name="intervalVariable")
    def interval_variable(self) -> Optional[_builtins.str]:
        """
        Variable name
        """
        return pulumi.get(self, "interval_variable")

    @_builtins.property
    @pulumi.getter
    def multiplier(self) -> Optional[_builtins.int]:
        """
        Probe failure multiplier <1..10> failed attempts
          - Range: `1`-`10`
          - Default value: `3`
        """
        return pulumi.get(self, "multiplier")

    @_builtins.property
    @pulumi.getter(name="multiplierVariable")
    def multiplier_variable(self) -> Optional[_builtins.str]:
        """
        Variable name
        """
        return pulumi.get(self, "multiplier_variable")

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[_builtins.str]:
        """
        Tracker name
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter(name="nameVariable")
    def name_variable(self) -> Optional[_builtins.str]:
        """
        Variable name
        """
        return pulumi.get(self, "name_variable")

    @_builtins.property
    @pulumi.getter
    def optional(self) -> Optional[_builtins.bool]:
        """
        Indicates if list item is considered optional.
        """
        return pulumi.get(self, "optional")

    @_builtins.property
    @pulumi.getter
    def threshold(self) -> Optional[_builtins.int]:
        """
        Probe Timeout threshold <100..1000> milliseconds
          - Range: `100`-`1000`
          - Default value: `300`
        """
        return pulumi.get(self, "threshold")

    @_builtins.property
    @pulumi.getter(name="thresholdVariable")
    def threshold_variable(self) -> Optional[_builtins.str]:
        """
        Variable name
        """
        return pulumi.get(self, "threshold_variable")

    @_builtins.property
    @pulumi.getter(name="trackerType")
    def tracker_type(self) -> Optional[_builtins.str]:
        """
        - Choices: `SIG`
          - Default value: ` SIG`
        """
        return pulumi.get(self, "tracker_type")


@pulumi.output_type
class CiscoSecurityFeatureTemplateKey(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "acceptAoMismatch":
            suggest = "accept_ao_mismatch"
        elif key == "acceptAoMismatchVariable":
            suggest = "accept_ao_mismatch_variable"
        elif key == "acceptLifetimeDuration":
            suggest = "accept_lifetime_duration"
        elif key == "acceptLifetimeDurationVariable":
            suggest = "accept_lifetime_duration_variable"
        elif key == "acceptLifetimeEndTime":
            suggest = "accept_lifetime_end_time"
        elif key == "acceptLifetimeEndTimeFormat":
            suggest = "accept_lifetime_end_time_format"
        elif key == "acceptLifetimeInfinite":
            suggest = "accept_lifetime_infinite"
        elif key == "acceptLifetimeInfiniteVariable":
            suggest = "accept_lifetime_infinite_variable"
        elif key == "acceptLifetimeLocal":
            suggest = "accept_lifetime_local"
        elif key == "acceptLifetimeLocalVariable":
            suggest = "accept_lifetime_local_variable"
        elif key == "acceptLifetimeStartTime":
            suggest = "accept_lifetime_start_time"
        elif key == "chainName":
            suggest = "chain_name"
        elif key == "cryptoAlgorithm":
            suggest = "crypto_algorithm"
        elif key == "includeTcpOptions":
            suggest = "include_tcp_options"
        elif key == "includeTcpOptionsVariable":
            suggest = "include_tcp_options_variable"
        elif key == "keyString":
            suggest = "key_string"
        elif key == "keyStringVariable":
            suggest = "key_string_variable"
        elif key == "receiveId":
            suggest = "receive_id"
        elif key == "receiveIdVariable":
            suggest = "receive_id_variable"
        elif key == "sendId":
            suggest = "send_id"
        elif key == "sendIdVariable":
            suggest = "send_id_variable"
        elif key == "sendLifetimeDuration":
            suggest = "send_lifetime_duration"
        elif key == "sendLifetimeDurationVariable":
            suggest = "send_lifetime_duration_variable"
        elif key == "sendLifetimeEndTime":
            suggest = "send_lifetime_end_time"
        elif key == "sendLifetimeEndTimeFormat":
            suggest = "send_lifetime_end_time_format"
        elif key == "sendLifetimeInfinite":
            suggest = "send_lifetime_infinite"
        elif key == "sendLifetimeInfiniteVariable":
            suggest = "send_lifetime_infinite_variable"
        elif key == "sendLifetimeLocal":
            suggest = "send_lifetime_local"
        elif key == "sendLifetimeLocalVariable":
            suggest = "send_lifetime_local_variable"
        elif key == "sendLifetimeStartTime":
            suggest = "send_lifetime_start_time"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in CiscoSecurityFeatureTemplateKey. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        CiscoSecurityFeatureTemplateKey.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        CiscoSecurityFeatureTemplateKey.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 accept_ao_mismatch: Optional[_builtins.bool] = None,
                 accept_ao_mismatch_variable: Optional[_builtins.str] = None,
                 accept_lifetime_duration: Optional[_builtins.int] = None,
                 accept_lifetime_duration_variable: Optional[_builtins.str] = None,
                 accept_lifetime_end_time: Optional[_builtins.str] = None,
                 accept_lifetime_end_time_format: Optional[_builtins.str] = None,
                 accept_lifetime_infinite: Optional[_builtins.bool] = None,
                 accept_lifetime_infinite_variable: Optional[_builtins.str] = None,
                 accept_lifetime_local: Optional[_builtins.bool] = None,
                 accept_lifetime_local_variable: Optional[_builtins.str] = None,
                 accept_lifetime_start_time: Optional[_builtins.str] = None,
                 chain_name: Optional[_builtins.str] = None,
                 crypto_algorithm: Optional[_builtins.str] = None,
                 id: Optional[_builtins.str] = None,
                 include_tcp_options: Optional[_builtins.bool] = None,
                 include_tcp_options_variable: Optional[_builtins.str] = None,
                 key_string: Optional[_builtins.str] = None,
                 key_string_variable: Optional[_builtins.str] = None,
                 optional: Optional[_builtins.bool] = None,
                 receive_id: Optional[_builtins.int] = None,
                 receive_id_variable: Optional[_builtins.str] = None,
                 send_id: Optional[_builtins.int] = None,
                 send_id_variable: Optional[_builtins.str] = None,
                 send_lifetime_duration: Optional[_builtins.int] = None,
                 send_lifetime_duration_variable: Optional[_builtins.str] = None,
                 send_lifetime_end_time: Optional[_builtins.str] = None,
                 send_lifetime_end_time_format: Optional[_builtins.str] = None,
                 send_lifetime_infinite: Optional[_builtins.bool] = None,
                 send_lifetime_infinite_variable: Optional[_builtins.str] = None,
                 send_lifetime_local: Optional[_builtins.bool] = None,
                 send_lifetime_local_variable: Optional[_builtins.str] = None,
                 send_lifetime_start_time: Optional[_builtins.str] = None):
        """
        :param _builtins.bool accept_ao_mismatch: Configure Accept AO Mismatch
                 - Default value: `false`
        :param _builtins.str accept_ao_mismatch_variable: Variable name
        :param _builtins.int accept_lifetime_duration: Configure Accept lifetime Duration
                 - Range: `1`-`2147483646`
        :param _builtins.str accept_lifetime_duration_variable: Variable name
        :param _builtins.str accept_lifetime_end_time: Configure Key lifetime end time
        :param _builtins.str accept_lifetime_end_time_format: Configure Key lifetime end time
                 - Choices: `infinite`, `duration`, `end-epoch`
                 - Default value: `infinite`
        :param _builtins.bool accept_lifetime_infinite: Configure Key lifetime end time
        :param _builtins.str accept_lifetime_infinite_variable: Variable name
        :param _builtins.bool accept_lifetime_local: Configure Accept Lifetime Local
                 - Default value: `false`
        :param _builtins.str accept_lifetime_local_variable: Variable name
        :param _builtins.str accept_lifetime_start_time: Configure Key lifetime start time
        :param _builtins.str chain_name: Select the chain name
        :param _builtins.str crypto_algorithm: Crypto Algorithm
                 - Choices: `aes-128-cmac`, `hmac-sha-1`, `hmac-sha-256`
        :param _builtins.str id: Select the Key ID
        :param _builtins.bool include_tcp_options: Configure Include TCP Options
                 - Default value: `false`
        :param _builtins.str include_tcp_options_variable: Variable name
        :param _builtins.str key_string: Specify the Key String
        :param _builtins.str key_string_variable: Variable name
        :param _builtins.bool optional: Indicates if list item is considered optional.
        :param _builtins.int receive_id: Specify the Receiver ID
                 - Range: `0`-`255`
                 - Default value: `0`
        :param _builtins.str receive_id_variable: Variable name
        :param _builtins.int send_id: Specify the Send ID
                 - Range: `0`-`255`
                 - Default value: `0`
        :param _builtins.str send_id_variable: Variable name
        :param _builtins.int send_lifetime_duration: Configure Send lifetime Duration
                 - Range: `1`-`2147483646`
        :param _builtins.str send_lifetime_duration_variable: Variable name
        :param _builtins.str send_lifetime_end_time: Configure Key lifetime end time
        :param _builtins.str send_lifetime_end_time_format: Configure Key lifetime end time
                 - Choices: `infinite`, `duration`, `end-epoch`
                 - Default value: `infinite`
        :param _builtins.bool send_lifetime_infinite: Configure Key lifetime end time
        :param _builtins.str send_lifetime_infinite_variable: Variable name
        :param _builtins.bool send_lifetime_local: Configure Send lifetime Local
                 - Default value: `false`
        :param _builtins.str send_lifetime_local_variable: Variable name
        :param _builtins.str send_lifetime_start_time: Configure Key lifetime start time
        """
        if accept_ao_mismatch is not None:
            pulumi.set(__self__, "accept_ao_mismatch", accept_ao_mismatch)
        if accept_ao_mismatch_variable is not None:
            pulumi.set(__self__, "accept_ao_mismatch_variable", accept_ao_mismatch_variable)
        if accept_lifetime_duration is not None:
            pulumi.set(__self__, "accept_lifetime_duration", accept_lifetime_duration)
        if accept_lifetime_duration_variable is not None:
            pulumi.set(__self__, "accept_lifetime_duration_variable", accept_lifetime_duration_variable)
        if accept_lifetime_end_time is not None:
            pulumi.set(__self__, "accept_lifetime_end_time", accept_lifetime_end_time)
        if accept_lifetime_end_time_format is not None:
            pulumi.set(__self__, "accept_lifetime_end_time_format", accept_lifetime_end_time_format)
        if accept_lifetime_infinite is not None:
            pulumi.set(__self__, "accept_lifetime_infinite", accept_lifetime_infinite)
        if accept_lifetime_infinite_variable is not None:
            pulumi.set(__self__, "accept_lifetime_infinite_variable", accept_lifetime_infinite_variable)
        if accept_lifetime_local is not None:
            pulumi.set(__self__, "accept_lifetime_local", accept_lifetime_local)
        if accept_lifetime_local_variable is not None:
            pulumi.set(__self__, "accept_lifetime_local_variable", accept_lifetime_local_variable)
        if accept_lifetime_start_time is not None:
            pulumi.set(__self__, "accept_lifetime_start_time", accept_lifetime_start_time)
        if chain_name is not None:
            pulumi.set(__self__, "chain_name", chain_name)
        if crypto_algorithm is not None:
            pulumi.set(__self__, "crypto_algorithm", crypto_algorithm)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if include_tcp_options is not None:
            pulumi.set(__self__, "include_tcp_options", include_tcp_options)
        if include_tcp_options_variable is not None:
            pulumi.set(__self__, "include_tcp_options_variable", include_tcp_options_variable)
        if key_string is not None:
            pulumi.set(__self__, "key_string", key_string)
        if key_string_variable is not None:
            pulumi.set(__self__, "key_string_variable", key_string_variable)
        if optional is not None:
            pulumi.set(__self__, "optional", optional)
        if receive_id is not None:
            pulumi.set(__self__, "receive_id", receive_id)
        if receive_id_variable is not None:
            pulumi.set(__self__, "receive_id_variable", receive_id_variable)
        if send_id is not None:
            pulumi.set(__self__, "send_id", send_id)
        if send_id_variable is not None:
            pulumi.set(__self__, "send_id_variable", send_id_variable)
        if send_lifetime_duration is not None:
            pulumi.set(__self__, "send_lifetime_duration", send_lifetime_duration)
        if send_lifetime_duration_variable is not None:
            pulumi.set(__self__, "send_lifetime_duration_variable", send_lifetime_duration_variable)
        if send_lifetime_end_time is not None:
            pulumi.set(__self__, "send_lifetime_end_time", send_lifetime_end_time)
        if send_lifetime_end_time_format is not None:
            pulumi.set(__self__, "send_lifetime_end_time_format", send_lifetime_end_time_format)
        if send_lifetime_infinite is not None:
            pulumi.set(__self__, "send_lifetime_infinite", send_lifetime_infinite)
        if send_lifetime_infinite_variable is not None:
            pulumi.set(__self__, "send_lifetime_infinite_variable", send_lifetime_infinite_variable)
        if send_lifetime_local is not None:
            pulumi.set(__self__, "send_lifetime_local", send_lifetime_local)
        if send_lifetime_local_variable is not None:
            pulumi.set(__self__, "send_lifetime_local_variable", send_lifetime_local_variable)
        if send_lifetime_start_time is not None:
            pulumi.set(__self__, "send_lifetime_start_time", send_lifetime_start_time)

    @_builtins.property
    @pulumi.getter(name="acceptAoMismatch")
    def accept_ao_mismatch(self) -> Optional[_builtins.bool]:
        """
        Configure Accept AO Mismatch
          - Default value: `false`
        """
        return pulumi.get(self, "accept_ao_mismatch")

    @_builtins.property
    @pulumi.getter(name="acceptAoMismatchVariable")
    def accept_ao_mismatch_variable(self) -> Optional[_builtins.str]:
        """
        Variable name
        """
        return pulumi.get(self, "accept_ao_mismatch_variable")

    @_builtins.property
    @pulumi.getter(name="acceptLifetimeDuration")
    def accept_lifetime_duration(self) -> Optional[_builtins.int]:
        """
        Configure Accept lifetime Duration
          - Range: `1`-`2147483646`
        """
        return pulumi.get(self, "accept_lifetime_duration")

    @_builtins.property
    @pulumi.getter(name="acceptLifetimeDurationVariable")
    def accept_lifetime_duration_variable(self) -> Optional[_builtins.str]:
        """
        Variable name
        """
        return pulumi.get(self, "accept_lifetime_duration_variable")

    @_builtins.property
    @pulumi.getter(name="acceptLifetimeEndTime")
    def accept_lifetime_end_time(self) -> Optional[_builtins.str]:
        """
        Configure Key lifetime end time
        """
        return pulumi.get(self, "accept_lifetime_end_time")

    @_builtins.property
    @pulumi.getter(name="acceptLifetimeEndTimeFormat")
    def accept_lifetime_end_time_format(self) -> Optional[_builtins.str]:
        """
        Configure Key lifetime end time
          - Choices: `infinite`, `duration`, `end-epoch`
          - Default value: `infinite`
        """
        return pulumi.get(self, "accept_lifetime_end_time_format")

    @_builtins.property
    @pulumi.getter(name="acceptLifetimeInfinite")
    def accept_lifetime_infinite(self) -> Optional[_builtins.bool]:
        """
        Configure Key lifetime end time
        """
        return pulumi.get(self, "accept_lifetime_infinite")

    @_builtins.property
    @pulumi.getter(name="acceptLifetimeInfiniteVariable")
    def accept_lifetime_infinite_variable(self) -> Optional[_builtins.str]:
        """
        Variable name
        """
        return pulumi.get(self, "accept_lifetime_infinite_variable")

    @_builtins.property
    @pulumi.getter(name="acceptLifetimeLocal")
    def accept_lifetime_local(self) -> Optional[_builtins.bool]:
        """
        Configure Accept Lifetime Local
          - Default value: `false`
        """
        return pulumi.get(self, "accept_lifetime_local")

    @_builtins.property
    @pulumi.getter(name="acceptLifetimeLocalVariable")
    def accept_lifetime_local_variable(self) -> Optional[_builtins.str]:
        """
        Variable name
        """
        return pulumi.get(self, "accept_lifetime_local_variable")

    @_builtins.property
    @pulumi.getter(name="acceptLifetimeStartTime")
    def accept_lifetime_start_time(self) -> Optional[_builtins.str]:
        """
        Configure Key lifetime start time
        """
        return pulumi.get(self, "accept_lifetime_start_time")

    @_builtins.property
    @pulumi.getter(name="chainName")
    def chain_name(self) -> Optional[_builtins.str]:
        """
        Select the chain name
        """
        return pulumi.get(self, "chain_name")

    @_builtins.property
    @pulumi.getter(name="cryptoAlgorithm")
    def crypto_algorithm(self) -> Optional[_builtins.str]:
        """
        Crypto Algorithm
          - Choices: `aes-128-cmac`, `hmac-sha-1`, `hmac-sha-256`
        """
        return pulumi.get(self, "crypto_algorithm")

    @_builtins.property
    @pulumi.getter
    def id(self) -> Optional[_builtins.str]:
        """
        Select the Key ID
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter(name="includeTcpOptions")
    def include_tcp_options(self) -> Optional[_builtins.bool]:
        """
        Configure Include TCP Options
          - Default value: `false`
        """
        return pulumi.get(self, "include_tcp_options")

    @_builtins.property
    @pulumi.getter(name="includeTcpOptionsVariable")
    def include_tcp_options_variable(self) -> Optional[_builtins.str]:
        """
        Variable name
        """
        return pulumi.get(self, "include_tcp_options_variable")

    @_builtins.property
    @pulumi.getter(name="keyString")
    def key_string(self) -> Optional[_builtins.str]:
        """
        Specify the Key String
        """
        return pulumi.get(self, "key_string")

    @_builtins.property
    @pulumi.getter(name="keyStringVariable")
    def key_string_variable(self) -> Optional[_builtins.str]:
        """
        Variable name
        """
        return pulumi.get(self, "key_string_variable")

    @_builtins.property
    @pulumi.getter
    def optional(self) -> Optional[_builtins.bool]:
        """
        Indicates if list item is considered optional.
        """
        return pulumi.get(self, "optional")

    @_builtins.property
    @pulumi.getter(name="receiveId")
    def receive_id(self) -> Optional[_builtins.int]:
        """
        Specify the Receiver ID
          - Range: `0`-`255`
          - Default value: `0`
        """
        return pulumi.get(self, "receive_id")

    @_builtins.property
    @pulumi.getter(name="receiveIdVariable")
    def receive_id_variable(self) -> Optional[_builtins.str]:
        """
        Variable name
        """
        return pulumi.get(self, "receive_id_variable")

    @_builtins.property
    @pulumi.getter(name="sendId")
    def send_id(self) -> Optional[_builtins.int]:
        """
        Specify the Send ID
          - Range: `0`-`255`
          - Default value: `0`
        """
        return pulumi.get(self, "send_id")

    @_builtins.property
    @pulumi.getter(name="sendIdVariable")
    def send_id_variable(self) -> Optional[_builtins.str]:
        """
        Variable name
        """
        return pulumi.get(self, "send_id_variable")

    @_builtins.property
    @pulumi.getter(name="sendLifetimeDuration")
    def send_lifetime_duration(self) -> Optional[_builtins.int]:
        """
        Configure Send lifetime Duration
          - Range: `1`-`2147483646`
        """
        return pulumi.get(self, "send_lifetime_duration")

    @_builtins.property
    @pulumi.getter(name="sendLifetimeDurationVariable")
    def send_lifetime_duration_variable(self) -> Optional[_builtins.str]:
        """
        Variable name
        """
        return pulumi.get(self, "send_lifetime_duration_variable")

    @_builtins.property
    @pulumi.getter(name="sendLifetimeEndTime")
    def send_lifetime_end_time(self) -> Optional[_builtins.str]:
        """
        Configure Key lifetime end time
        """
        return pulumi.get(self, "send_lifetime_end_time")

    @_builtins.property
    @pulumi.getter(name="sendLifetimeEndTimeFormat")
    def send_lifetime_end_time_format(self) -> Optional[_builtins.str]:
        """
        Configure Key lifetime end time
          - Choices: `infinite`, `duration`, `end-epoch`
          - Default value: `infinite`
        """
        return pulumi.get(self, "send_lifetime_end_time_format")

    @_builtins.property
    @pulumi.getter(name="sendLifetimeInfinite")
    def send_lifetime_infinite(self) -> Optional[_builtins.bool]:
        """
        Configure Key lifetime end time
        """
        return pulumi.get(self, "send_lifetime_infinite")

    @_builtins.property
    @pulumi.getter(name="sendLifetimeInfiniteVariable")
    def send_lifetime_infinite_variable(self) -> Optional[_builtins.str]:
        """
        Variable name
        """
        return pulumi.get(self, "send_lifetime_infinite_variable")

    @_builtins.property
    @pulumi.getter(name="sendLifetimeLocal")
    def send_lifetime_local(self) -> Optional[_builtins.bool]:
        """
        Configure Send lifetime Local
          - Default value: `false`
        """
        return pulumi.get(self, "send_lifetime_local")

    @_builtins.property
    @pulumi.getter(name="sendLifetimeLocalVariable")
    def send_lifetime_local_variable(self) -> Optional[_builtins.str]:
        """
        Variable name
        """
        return pulumi.get(self, "send_lifetime_local_variable")

    @_builtins.property
    @pulumi.getter(name="sendLifetimeStartTime")
    def send_lifetime_start_time(self) -> Optional[_builtins.str]:
        """
        Configure Key lifetime start time
        """
        return pulumi.get(self, "send_lifetime_start_time")


@pulumi.output_type
class CiscoSecurityFeatureTemplateKeychain(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "keyId":
            suggest = "key_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in CiscoSecurityFeatureTemplateKeychain. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        CiscoSecurityFeatureTemplateKeychain.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        CiscoSecurityFeatureTemplateKeychain.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 key_id: Optional[_builtins.int] = None,
                 name: Optional[_builtins.str] = None,
                 optional: Optional[_builtins.bool] = None):
        """
        :param _builtins.int key_id: Specify the Key ID
                 - Range: `0`-`2147483647`
        :param _builtins.str name: Specify the name of the Keychain
        :param _builtins.bool optional: Indicates if list item is considered optional.
        """
        if key_id is not None:
            pulumi.set(__self__, "key_id", key_id)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if optional is not None:
            pulumi.set(__self__, "optional", optional)

    @_builtins.property
    @pulumi.getter(name="keyId")
    def key_id(self) -> Optional[_builtins.int]:
        """
        Specify the Key ID
          - Range: `0`-`2147483647`
        """
        return pulumi.get(self, "key_id")

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[_builtins.str]:
        """
        Specify the name of the Keychain
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def optional(self) -> Optional[_builtins.bool]:
        """
        Indicates if list item is considered optional.
        """
        return pulumi.get(self, "optional")


@pulumi.output_type
class CiscoSnmpFeatureTemplateCommunity(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "authorizationVariable":
            suggest = "authorization_variable"
        elif key == "viewVariable":
            suggest = "view_variable"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in CiscoSnmpFeatureTemplateCommunity. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        CiscoSnmpFeatureTemplateCommunity.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        CiscoSnmpFeatureTemplateCommunity.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 authorization: Optional[_builtins.str] = None,
                 authorization_variable: Optional[_builtins.str] = None,
                 name: Optional[_builtins.str] = None,
                 optional: Optional[_builtins.bool] = None,
                 view: Optional[_builtins.str] = None,
                 view_variable: Optional[_builtins.str] = None):
        """
        :param _builtins.str authorization: Configure access permissions
                 - Choices: `read-only`
        :param _builtins.str authorization_variable: Variable name
        :param _builtins.str name: Set name of the SNMP community
        :param _builtins.bool optional: Indicates if list item is considered optional.
        :param _builtins.str view: Set name of the SNMP view
        :param _builtins.str view_variable: Variable name
        """
        if authorization is not None:
            pulumi.set(__self__, "authorization", authorization)
        if authorization_variable is not None:
            pulumi.set(__self__, "authorization_variable", authorization_variable)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if optional is not None:
            pulumi.set(__self__, "optional", optional)
        if view is not None:
            pulumi.set(__self__, "view", view)
        if view_variable is not None:
            pulumi.set(__self__, "view_variable", view_variable)

    @_builtins.property
    @pulumi.getter
    def authorization(self) -> Optional[_builtins.str]:
        """
        Configure access permissions
          - Choices: `read-only`
        """
        return pulumi.get(self, "authorization")

    @_builtins.property
    @pulumi.getter(name="authorizationVariable")
    def authorization_variable(self) -> Optional[_builtins.str]:
        """
        Variable name
        """
        return pulumi.get(self, "authorization_variable")

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[_builtins.str]:
        """
        Set name of the SNMP community
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def optional(self) -> Optional[_builtins.bool]:
        """
        Indicates if list item is considered optional.
        """
        return pulumi.get(self, "optional")

    @_builtins.property
    @pulumi.getter
    def view(self) -> Optional[_builtins.str]:
        """
        Set name of the SNMP view
        """
        return pulumi.get(self, "view")

    @_builtins.property
    @pulumi.getter(name="viewVariable")
    def view_variable(self) -> Optional[_builtins.str]:
        """
        Variable name
        """
        return pulumi.get(self, "view_variable")


@pulumi.output_type
class CiscoSnmpFeatureTemplateGroup(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "securityLevel":
            suggest = "security_level"
        elif key == "viewVariable":
            suggest = "view_variable"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in CiscoSnmpFeatureTemplateGroup. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        CiscoSnmpFeatureTemplateGroup.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        CiscoSnmpFeatureTemplateGroup.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 name: Optional[_builtins.str] = None,
                 optional: Optional[_builtins.bool] = None,
                 security_level: Optional[_builtins.str] = None,
                 view: Optional[_builtins.str] = None,
                 view_variable: Optional[_builtins.str] = None):
        """
        :param _builtins.str name: Name of the SNMP group
        :param _builtins.bool optional: Indicates if list item is considered optional.
        :param _builtins.str security_level: Configure security level
                 - Choices: `no-auth-no-priv`, `auth-no-priv`, `auth-priv`
        :param _builtins.str view: Name of the SNMP view
        :param _builtins.str view_variable: Variable name
        """
        if name is not None:
            pulumi.set(__self__, "name", name)
        if optional is not None:
            pulumi.set(__self__, "optional", optional)
        if security_level is not None:
            pulumi.set(__self__, "security_level", security_level)
        if view is not None:
            pulumi.set(__self__, "view", view)
        if view_variable is not None:
            pulumi.set(__self__, "view_variable", view_variable)

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[_builtins.str]:
        """
        Name of the SNMP group
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def optional(self) -> Optional[_builtins.bool]:
        """
        Indicates if list item is considered optional.
        """
        return pulumi.get(self, "optional")

    @_builtins.property
    @pulumi.getter(name="securityLevel")
    def security_level(self) -> Optional[_builtins.str]:
        """
        Configure security level
          - Choices: `no-auth-no-priv`, `auth-no-priv`, `auth-priv`
        """
        return pulumi.get(self, "security_level")

    @_builtins.property
    @pulumi.getter
    def view(self) -> Optional[_builtins.str]:
        """
        Name of the SNMP view
        """
        return pulumi.get(self, "view")

    @_builtins.property
    @pulumi.getter(name="viewVariable")
    def view_variable(self) -> Optional[_builtins.str]:
        """
        Variable name
        """
        return pulumi.get(self, "view_variable")


@pulumi.output_type
class CiscoSnmpFeatureTemplateTrapTarget(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "communityName":
            suggest = "community_name"
        elif key == "communityNameVariable":
            suggest = "community_name_variable"
        elif key == "ipVariable":
            suggest = "ip_variable"
        elif key == "sourceInterface":
            suggest = "source_interface"
        elif key == "sourceInterfaceVariable":
            suggest = "source_interface_variable"
        elif key == "udpPort":
            suggest = "udp_port"
        elif key == "udpPortVariable":
            suggest = "udp_port_variable"
        elif key == "userVariable":
            suggest = "user_variable"
        elif key == "vpnId":
            suggest = "vpn_id"
        elif key == "vpnIdVariable":
            suggest = "vpn_id_variable"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in CiscoSnmpFeatureTemplateTrapTarget. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        CiscoSnmpFeatureTemplateTrapTarget.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        CiscoSnmpFeatureTemplateTrapTarget.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 community_name: Optional[_builtins.str] = None,
                 community_name_variable: Optional[_builtins.str] = None,
                 ip: Optional[_builtins.str] = None,
                 ip_variable: Optional[_builtins.str] = None,
                 optional: Optional[_builtins.bool] = None,
                 source_interface: Optional[_builtins.str] = None,
                 source_interface_variable: Optional[_builtins.str] = None,
                 udp_port: Optional[_builtins.int] = None,
                 udp_port_variable: Optional[_builtins.str] = None,
                 user: Optional[_builtins.str] = None,
                 user_variable: Optional[_builtins.str] = None,
                 vpn_id: Optional[_builtins.int] = None,
                 vpn_id_variable: Optional[_builtins.str] = None):
        """
        :param _builtins.str community_name: Set name of the SNMP community
        :param _builtins.str community_name_variable: Variable name
        :param _builtins.str ip: Set IPv4/IPv6 address of SNMP server
        :param _builtins.str ip_variable: Variable name
        :param _builtins.bool optional: Indicates if list item is considered optional.
        :param _builtins.str source_interface: Source interface for outgoing SNMP traps
        :param _builtins.str source_interface_variable: Variable name
        :param _builtins.int udp_port: Set UDP port number to connect to SNMP server
                 - Range: `1`-`65535`
        :param _builtins.str udp_port_variable: Variable name
        :param _builtins.str user: Set name of the SNMP user
        :param _builtins.str user_variable: Variable name
        :param _builtins.int vpn_id: Set VPN in which SNMP server is located
                 - Range: `0`-`65530`
        :param _builtins.str vpn_id_variable: Variable name
        """
        if community_name is not None:
            pulumi.set(__self__, "community_name", community_name)
        if community_name_variable is not None:
            pulumi.set(__self__, "community_name_variable", community_name_variable)
        if ip is not None:
            pulumi.set(__self__, "ip", ip)
        if ip_variable is not None:
            pulumi.set(__self__, "ip_variable", ip_variable)
        if optional is not None:
            pulumi.set(__self__, "optional", optional)
        if source_interface is not None:
            pulumi.set(__self__, "source_interface", source_interface)
        if source_interface_variable is not None:
            pulumi.set(__self__, "source_interface_variable", source_interface_variable)
        if udp_port is not None:
            pulumi.set(__self__, "udp_port", udp_port)
        if udp_port_variable is not None:
            pulumi.set(__self__, "udp_port_variable", udp_port_variable)
        if user is not None:
            pulumi.set(__self__, "user", user)
        if user_variable is not None:
            pulumi.set(__self__, "user_variable", user_variable)
        if vpn_id is not None:
            pulumi.set(__self__, "vpn_id", vpn_id)
        if vpn_id_variable is not None:
            pulumi.set(__self__, "vpn_id_variable", vpn_id_variable)

    @_builtins.property
    @pulumi.getter(name="communityName")
    def community_name(self) -> Optional[_builtins.str]:
        """
        Set name of the SNMP community
        """
        return pulumi.get(self, "community_name")

    @_builtins.property
    @pulumi.getter(name="communityNameVariable")
    def community_name_variable(self) -> Optional[_builtins.str]:
        """
        Variable name
        """
        return pulumi.get(self, "community_name_variable")

    @_builtins.property
    @pulumi.getter
    def ip(self) -> Optional[_builtins.str]:
        """
        Set IPv4/IPv6 address of SNMP server
        """
        return pulumi.get(self, "ip")

    @_builtins.property
    @pulumi.getter(name="ipVariable")
    def ip_variable(self) -> Optional[_builtins.str]:
        """
        Variable name
        """
        return pulumi.get(self, "ip_variable")

    @_builtins.property
    @pulumi.getter
    def optional(self) -> Optional[_builtins.bool]:
        """
        Indicates if list item is considered optional.
        """
        return pulumi.get(self, "optional")

    @_builtins.property
    @pulumi.getter(name="sourceInterface")
    def source_interface(self) -> Optional[_builtins.str]:
        """
        Source interface for outgoing SNMP traps
        """
        return pulumi.get(self, "source_interface")

    @_builtins.property
    @pulumi.getter(name="sourceInterfaceVariable")
    def source_interface_variable(self) -> Optional[_builtins.str]:
        """
        Variable name
        """
        return pulumi.get(self, "source_interface_variable")

    @_builtins.property
    @pulumi.getter(name="udpPort")
    def udp_port(self) -> Optional[_builtins.int]:
        """
        Set UDP port number to connect to SNMP server
          - Range: `1`-`65535`
        """
        return pulumi.get(self, "udp_port")

    @_builtins.property
    @pulumi.getter(name="udpPortVariable")
    def udp_port_variable(self) -> Optional[_builtins.str]:
        """
        Variable name
        """
        return pulumi.get(self, "udp_port_variable")

    @_builtins.property
    @pulumi.getter
    def user(self) -> Optional[_builtins.str]:
        """
        Set name of the SNMP user
        """
        return pulumi.get(self, "user")

    @_builtins.property
    @pulumi.getter(name="userVariable")
    def user_variable(self) -> Optional[_builtins.str]:
        """
        Variable name
        """
        return pulumi.get(self, "user_variable")

    @_builtins.property
    @pulumi.getter(name="vpnId")
    def vpn_id(self) -> Optional[_builtins.int]:
        """
        Set VPN in which SNMP server is located
          - Range: `0`-`65530`
        """
        return pulumi.get(self, "vpn_id")

    @_builtins.property
    @pulumi.getter(name="vpnIdVariable")
    def vpn_id_variable(self) -> Optional[_builtins.str]:
        """
        Variable name
        """
        return pulumi.get(self, "vpn_id_variable")


@pulumi.output_type
class CiscoSnmpFeatureTemplateUser(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "authenticationPassword":
            suggest = "authentication_password"
        elif key == "authenticationPasswordVariable":
            suggest = "authentication_password_variable"
        elif key == "authenticationProtocol":
            suggest = "authentication_protocol"
        elif key == "authenticationProtocolVariable":
            suggest = "authentication_protocol_variable"
        elif key == "groupVariable":
            suggest = "group_variable"
        elif key == "privacyPassword":
            suggest = "privacy_password"
        elif key == "privacyPasswordVariable":
            suggest = "privacy_password_variable"
        elif key == "privacyProtocol":
            suggest = "privacy_protocol"
        elif key == "privacyProtocolVariable":
            suggest = "privacy_protocol_variable"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in CiscoSnmpFeatureTemplateUser. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        CiscoSnmpFeatureTemplateUser.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        CiscoSnmpFeatureTemplateUser.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 authentication_password: Optional[_builtins.str] = None,
                 authentication_password_variable: Optional[_builtins.str] = None,
                 authentication_protocol: Optional[_builtins.str] = None,
                 authentication_protocol_variable: Optional[_builtins.str] = None,
                 group: Optional[_builtins.str] = None,
                 group_variable: Optional[_builtins.str] = None,
                 name: Optional[_builtins.str] = None,
                 optional: Optional[_builtins.bool] = None,
                 privacy_password: Optional[_builtins.str] = None,
                 privacy_password_variable: Optional[_builtins.str] = None,
                 privacy_protocol: Optional[_builtins.str] = None,
                 privacy_protocol_variable: Optional[_builtins.str] = None):
        """
        :param _builtins.str authentication_password: Specify authentication protocol password
        :param _builtins.str authentication_password_variable: Variable name
        :param _builtins.str authentication_protocol: Configure authentication protocol
                 - Choices: `md5`, `sha`
        :param _builtins.str authentication_protocol_variable: Variable name
        :param _builtins.str group: Name of the SNMP group
        :param _builtins.str group_variable: Variable name
        :param _builtins.str name: Name of the SNMP user
        :param _builtins.bool optional: Indicates if list item is considered optional.
        :param _builtins.str privacy_password: Specify privacy protocol password
        :param _builtins.str privacy_password_variable: Variable name
        :param _builtins.str privacy_protocol: Configure privacy protocol
                 - Choices: `aes-cfb-128`, `aes-256-cfb-128`
        :param _builtins.str privacy_protocol_variable: Variable name
        """
        if authentication_password is not None:
            pulumi.set(__self__, "authentication_password", authentication_password)
        if authentication_password_variable is not None:
            pulumi.set(__self__, "authentication_password_variable", authentication_password_variable)
        if authentication_protocol is not None:
            pulumi.set(__self__, "authentication_protocol", authentication_protocol)
        if authentication_protocol_variable is not None:
            pulumi.set(__self__, "authentication_protocol_variable", authentication_protocol_variable)
        if group is not None:
            pulumi.set(__self__, "group", group)
        if group_variable is not None:
            pulumi.set(__self__, "group_variable", group_variable)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if optional is not None:
            pulumi.set(__self__, "optional", optional)
        if privacy_password is not None:
            pulumi.set(__self__, "privacy_password", privacy_password)
        if privacy_password_variable is not None:
            pulumi.set(__self__, "privacy_password_variable", privacy_password_variable)
        if privacy_protocol is not None:
            pulumi.set(__self__, "privacy_protocol", privacy_protocol)
        if privacy_protocol_variable is not None:
            pulumi.set(__self__, "privacy_protocol_variable", privacy_protocol_variable)

    @_builtins.property
    @pulumi.getter(name="authenticationPassword")
    def authentication_password(self) -> Optional[_builtins.str]:
        """
        Specify authentication protocol password
        """
        return pulumi.get(self, "authentication_password")

    @_builtins.property
    @pulumi.getter(name="authenticationPasswordVariable")
    def authentication_password_variable(self) -> Optional[_builtins.str]:
        """
        Variable name
        """
        return pulumi.get(self, "authentication_password_variable")

    @_builtins.property
    @pulumi.getter(name="authenticationProtocol")
    def authentication_protocol(self) -> Optional[_builtins.str]:
        """
        Configure authentication protocol
          - Choices: `md5`, `sha`
        """
        return pulumi.get(self, "authentication_protocol")

    @_builtins.property
    @pulumi.getter(name="authenticationProtocolVariable")
    def authentication_protocol_variable(self) -> Optional[_builtins.str]:
        """
        Variable name
        """
        return pulumi.get(self, "authentication_protocol_variable")

    @_builtins.property
    @pulumi.getter
    def group(self) -> Optional[_builtins.str]:
        """
        Name of the SNMP group
        """
        return pulumi.get(self, "group")

    @_builtins.property
    @pulumi.getter(name="groupVariable")
    def group_variable(self) -> Optional[_builtins.str]:
        """
        Variable name
        """
        return pulumi.get(self, "group_variable")

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[_builtins.str]:
        """
        Name of the SNMP user
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def optional(self) -> Optional[_builtins.bool]:
        """
        Indicates if list item is considered optional.
        """
        return pulumi.get(self, "optional")

    @_builtins.property
    @pulumi.getter(name="privacyPassword")
    def privacy_password(self) -> Optional[_builtins.str]:
        """
        Specify privacy protocol password
        """
        return pulumi.get(self, "privacy_password")

    @_builtins.property
    @pulumi.getter(name="privacyPasswordVariable")
    def privacy_password_variable(self) -> Optional[_builtins.str]:
        """
        Variable name
        """
        return pulumi.get(self, "privacy_password_variable")

    @_builtins.property
    @pulumi.getter(name="privacyProtocol")
    def privacy_protocol(self) -> Optional[_builtins.str]:
        """
        Configure privacy protocol
          - Choices: `aes-cfb-128`, `aes-256-cfb-128`
        """
        return pulumi.get(self, "privacy_protocol")

    @_builtins.property
    @pulumi.getter(name="privacyProtocolVariable")
    def privacy_protocol_variable(self) -> Optional[_builtins.str]:
        """
        Variable name
        """
        return pulumi.get(self, "privacy_protocol_variable")


@pulumi.output_type
class CiscoSnmpFeatureTemplateView(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "objectIdentifiers":
            suggest = "object_identifiers"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in CiscoSnmpFeatureTemplateView. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        CiscoSnmpFeatureTemplateView.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        CiscoSnmpFeatureTemplateView.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 name: Optional[_builtins.str] = None,
                 object_identifiers: Optional[Sequence['outputs.CiscoSnmpFeatureTemplateViewObjectIdentifier']] = None,
                 optional: Optional[_builtins.bool] = None):
        """
        :param _builtins.str name: Set the name of the SNMP view
        :param Sequence['CiscoSnmpFeatureTemplateViewObjectIdentifierArgs'] object_identifiers: Configure SNMP object identifier
        :param _builtins.bool optional: Indicates if list item is considered optional.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)
        if object_identifiers is not None:
            pulumi.set(__self__, "object_identifiers", object_identifiers)
        if optional is not None:
            pulumi.set(__self__, "optional", optional)

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[_builtins.str]:
        """
        Set the name of the SNMP view
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter(name="objectIdentifiers")
    def object_identifiers(self) -> Optional[Sequence['outputs.CiscoSnmpFeatureTemplateViewObjectIdentifier']]:
        """
        Configure SNMP object identifier
        """
        return pulumi.get(self, "object_identifiers")

    @_builtins.property
    @pulumi.getter
    def optional(self) -> Optional[_builtins.bool]:
        """
        Indicates if list item is considered optional.
        """
        return pulumi.get(self, "optional")


@pulumi.output_type
class CiscoSnmpFeatureTemplateViewObjectIdentifier(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "excludeVariable":
            suggest = "exclude_variable"
        elif key == "idVariable":
            suggest = "id_variable"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in CiscoSnmpFeatureTemplateViewObjectIdentifier. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        CiscoSnmpFeatureTemplateViewObjectIdentifier.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        CiscoSnmpFeatureTemplateViewObjectIdentifier.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 exclude: Optional[_builtins.bool] = None,
                 exclude_variable: Optional[_builtins.str] = None,
                 id: Optional[_builtins.str] = None,
                 id_variable: Optional[_builtins.str] = None,
                 optional: Optional[_builtins.bool] = None):
        """
        :param _builtins.bool exclude: Exclude the OID
                 - Default value: `false`
        :param _builtins.str exclude_variable: Variable name
        :param _builtins.str id: Configure identifier of subtree of MIB objects
        :param _builtins.str id_variable: Variable name
        :param _builtins.bool optional: Indicates if list item is considered optional.
        """
        if exclude is not None:
            pulumi.set(__self__, "exclude", exclude)
        if exclude_variable is not None:
            pulumi.set(__self__, "exclude_variable", exclude_variable)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if id_variable is not None:
            pulumi.set(__self__, "id_variable", id_variable)
        if optional is not None:
            pulumi.set(__self__, "optional", optional)

    @_builtins.property
    @pulumi.getter
    def exclude(self) -> Optional[_builtins.bool]:
        """
        Exclude the OID
          - Default value: `false`
        """
        return pulumi.get(self, "exclude")

    @_builtins.property
    @pulumi.getter(name="excludeVariable")
    def exclude_variable(self) -> Optional[_builtins.str]:
        """
        Variable name
        """
        return pulumi.get(self, "exclude_variable")

    @_builtins.property
    @pulumi.getter
    def id(self) -> Optional[_builtins.str]:
        """
        Configure identifier of subtree of MIB objects
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter(name="idVariable")
    def id_variable(self) -> Optional[_builtins.str]:
        """
        Variable name
        """
        return pulumi.get(self, "id_variable")

    @_builtins.property
    @pulumi.getter
    def optional(self) -> Optional[_builtins.bool]:
        """
        Indicates if list item is considered optional.
        """
        return pulumi.get(self, "optional")


@pulumi.output_type
class CiscoSystemFeatureTemplateGeoFencingSmsPhoneNumber(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "numberVariable":
            suggest = "number_variable"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in CiscoSystemFeatureTemplateGeoFencingSmsPhoneNumber. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        CiscoSystemFeatureTemplateGeoFencingSmsPhoneNumber.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        CiscoSystemFeatureTemplateGeoFencingSmsPhoneNumber.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 number: Optional[_builtins.str] = None,
                 number_variable: Optional[_builtins.str] = None,
                 optional: Optional[_builtins.bool] = None):
        """
        :param _builtins.str number: Mobile number, ex: +1231234414
        :param _builtins.str number_variable: Variable name
        :param _builtins.bool optional: Indicates if list item is considered optional.
        """
        if number is not None:
            pulumi.set(__self__, "number", number)
        if number_variable is not None:
            pulumi.set(__self__, "number_variable", number_variable)
        if optional is not None:
            pulumi.set(__self__, "optional", optional)

    @_builtins.property
    @pulumi.getter
    def number(self) -> Optional[_builtins.str]:
        """
        Mobile number, ex: +1231234414
        """
        return pulumi.get(self, "number")

    @_builtins.property
    @pulumi.getter(name="numberVariable")
    def number_variable(self) -> Optional[_builtins.str]:
        """
        Variable name
        """
        return pulumi.get(self, "number_variable")

    @_builtins.property
    @pulumi.getter
    def optional(self) -> Optional[_builtins.bool]:
        """
        Indicates if list item is considered optional.
        """
        return pulumi.get(self, "optional")


@pulumi.output_type
class CiscoSystemFeatureTemplateObjectTracker(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "booleanVariable":
            suggest = "boolean_variable"
        elif key == "groupTracksIds":
            suggest = "group_tracks_ids"
        elif key == "interfaceVariable":
            suggest = "interface_variable"
        elif key == "ipVariable":
            suggest = "ip_variable"
        elif key == "maskVariable":
            suggest = "mask_variable"
        elif key == "objectNumber":
            suggest = "object_number"
        elif key == "objectNumberVariable":
            suggest = "object_number_variable"
        elif key == "sigVariable":
            suggest = "sig_variable"
        elif key == "vpnId":
            suggest = "vpn_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in CiscoSystemFeatureTemplateObjectTracker. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        CiscoSystemFeatureTemplateObjectTracker.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        CiscoSystemFeatureTemplateObjectTracker.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 boolean: Optional[_builtins.str] = None,
                 boolean_variable: Optional[_builtins.str] = None,
                 group_tracks_ids: Optional[Sequence['outputs.CiscoSystemFeatureTemplateObjectTrackerGroupTracksId']] = None,
                 interface: Optional[_builtins.str] = None,
                 interface_variable: Optional[_builtins.str] = None,
                 ip: Optional[_builtins.str] = None,
                 ip_variable: Optional[_builtins.str] = None,
                 mask: Optional[_builtins.str] = None,
                 mask_variable: Optional[_builtins.str] = None,
                 object_number: Optional[_builtins.int] = None,
                 object_number_variable: Optional[_builtins.str] = None,
                 optional: Optional[_builtins.bool] = None,
                 sig: Optional[_builtins.str] = None,
                 sig_variable: Optional[_builtins.str] = None,
                 vpn_id: Optional[_builtins.int] = None):
        """
        :param _builtins.str boolean: Type of grouping to be performed for tracker group
                 - Choices: `and`, `or`
        :param _builtins.str boolean_variable: Variable name
        :param Sequence['CiscoSystemFeatureTemplateObjectTrackerGroupTracksIdArgs'] group_tracks_ids: Tracks id in group configuration
        :param _builtins.str interface: interface name
        :param _builtins.str interface_variable: Variable name
        :param _builtins.str ip: IP address of route
        :param _builtins.str ip_variable: Variable name
        :param _builtins.str mask: Route Ip Mask
                 - Default value: `0.0.0.0`
        :param _builtins.str mask_variable: Variable name
        :param _builtins.int object_number: Object tracker ID
                 - Range: `1`-`1000`
        :param _builtins.str object_number_variable: Variable name
        :param _builtins.bool optional: Indicates if list item is considered optional.
        :param _builtins.str sig: service sig
        :param _builtins.str sig_variable: Variable name
        :param _builtins.int vpn_id: VPN
                 - Range: `0`-`65527`
                 - Default value: `0`
        """
        if boolean is not None:
            pulumi.set(__self__, "boolean", boolean)
        if boolean_variable is not None:
            pulumi.set(__self__, "boolean_variable", boolean_variable)
        if group_tracks_ids is not None:
            pulumi.set(__self__, "group_tracks_ids", group_tracks_ids)
        if interface is not None:
            pulumi.set(__self__, "interface", interface)
        if interface_variable is not None:
            pulumi.set(__self__, "interface_variable", interface_variable)
        if ip is not None:
            pulumi.set(__self__, "ip", ip)
        if ip_variable is not None:
            pulumi.set(__self__, "ip_variable", ip_variable)
        if mask is not None:
            pulumi.set(__self__, "mask", mask)
        if mask_variable is not None:
            pulumi.set(__self__, "mask_variable", mask_variable)
        if object_number is not None:
            pulumi.set(__self__, "object_number", object_number)
        if object_number_variable is not None:
            pulumi.set(__self__, "object_number_variable", object_number_variable)
        if optional is not None:
            pulumi.set(__self__, "optional", optional)
        if sig is not None:
            pulumi.set(__self__, "sig", sig)
        if sig_variable is not None:
            pulumi.set(__self__, "sig_variable", sig_variable)
        if vpn_id is not None:
            pulumi.set(__self__, "vpn_id", vpn_id)

    @_builtins.property
    @pulumi.getter
    def boolean(self) -> Optional[_builtins.str]:
        """
        Type of grouping to be performed for tracker group
          - Choices: `and`, `or`
        """
        return pulumi.get(self, "boolean")

    @_builtins.property
    @pulumi.getter(name="booleanVariable")
    def boolean_variable(self) -> Optional[_builtins.str]:
        """
        Variable name
        """
        return pulumi.get(self, "boolean_variable")

    @_builtins.property
    @pulumi.getter(name="groupTracksIds")
    def group_tracks_ids(self) -> Optional[Sequence['outputs.CiscoSystemFeatureTemplateObjectTrackerGroupTracksId']]:
        """
        Tracks id in group configuration
        """
        return pulumi.get(self, "group_tracks_ids")

    @_builtins.property
    @pulumi.getter
    def interface(self) -> Optional[_builtins.str]:
        """
        interface name
        """
        return pulumi.get(self, "interface")

    @_builtins.property
    @pulumi.getter(name="interfaceVariable")
    def interface_variable(self) -> Optional[_builtins.str]:
        """
        Variable name
        """
        return pulumi.get(self, "interface_variable")

    @_builtins.property
    @pulumi.getter
    def ip(self) -> Optional[_builtins.str]:
        """
        IP address of route
        """
        return pulumi.get(self, "ip")

    @_builtins.property
    @pulumi.getter(name="ipVariable")
    def ip_variable(self) -> Optional[_builtins.str]:
        """
        Variable name
        """
        return pulumi.get(self, "ip_variable")

    @_builtins.property
    @pulumi.getter
    def mask(self) -> Optional[_builtins.str]:
        """
        Route Ip Mask
          - Default value: `0.0.0.0`
        """
        return pulumi.get(self, "mask")

    @_builtins.property
    @pulumi.getter(name="maskVariable")
    def mask_variable(self) -> Optional[_builtins.str]:
        """
        Variable name
        """
        return pulumi.get(self, "mask_variable")

    @_builtins.property
    @pulumi.getter(name="objectNumber")
    def object_number(self) -> Optional[_builtins.int]:
        """
        Object tracker ID
          - Range: `1`-`1000`
        """
        return pulumi.get(self, "object_number")

    @_builtins.property
    @pulumi.getter(name="objectNumberVariable")
    def object_number_variable(self) -> Optional[_builtins.str]:
        """
        Variable name
        """
        return pulumi.get(self, "object_number_variable")

    @_builtins.property
    @pulumi.getter
    def optional(self) -> Optional[_builtins.bool]:
        """
        Indicates if list item is considered optional.
        """
        return pulumi.get(self, "optional")

    @_builtins.property
    @pulumi.getter
    def sig(self) -> Optional[_builtins.str]:
        """
        service sig
        """
        return pulumi.get(self, "sig")

    @_builtins.property
    @pulumi.getter(name="sigVariable")
    def sig_variable(self) -> Optional[_builtins.str]:
        """
        Variable name
        """
        return pulumi.get(self, "sig_variable")

    @_builtins.property
    @pulumi.getter(name="vpnId")
    def vpn_id(self) -> Optional[_builtins.int]:
        """
        VPN
          - Range: `0`-`65527`
          - Default value: `0`
        """
        return pulumi.get(self, "vpn_id")


@pulumi.output_type
class CiscoSystemFeatureTemplateObjectTrackerGroupTracksId(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "trackId":
            suggest = "track_id"
        elif key == "trackIdVariable":
            suggest = "track_id_variable"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in CiscoSystemFeatureTemplateObjectTrackerGroupTracksId. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        CiscoSystemFeatureTemplateObjectTrackerGroupTracksId.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        CiscoSystemFeatureTemplateObjectTrackerGroupTracksId.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 optional: Optional[_builtins.bool] = None,
                 track_id: Optional[_builtins.int] = None,
                 track_id_variable: Optional[_builtins.str] = None):
        """
        :param _builtins.bool optional: Indicates if list item is considered optional.
        :param _builtins.int track_id: Track id
                 - Range: `1`-`1000`
        :param _builtins.str track_id_variable: Variable name
        """
        if optional is not None:
            pulumi.set(__self__, "optional", optional)
        if track_id is not None:
            pulumi.set(__self__, "track_id", track_id)
        if track_id_variable is not None:
            pulumi.set(__self__, "track_id_variable", track_id_variable)

    @_builtins.property
    @pulumi.getter
    def optional(self) -> Optional[_builtins.bool]:
        """
        Indicates if list item is considered optional.
        """
        return pulumi.get(self, "optional")

    @_builtins.property
    @pulumi.getter(name="trackId")
    def track_id(self) -> Optional[_builtins.int]:
        """
        Track id
          - Range: `1`-`1000`
        """
        return pulumi.get(self, "track_id")

    @_builtins.property
    @pulumi.getter(name="trackIdVariable")
    def track_id_variable(self) -> Optional[_builtins.str]:
        """
        Variable name
        """
        return pulumi.get(self, "track_id_variable")


@pulumi.output_type
class CiscoSystemFeatureTemplateTracker(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "booleanVariable":
            suggest = "boolean_variable"
        elif key == "elementsVariable":
            suggest = "elements_variable"
        elif key == "endpointApiUrl":
            suggest = "endpoint_api_url"
        elif key == "endpointApiUrlVariable":
            suggest = "endpoint_api_url_variable"
        elif key == "endpointDnsName":
            suggest = "endpoint_dns_name"
        elif key == "endpointDnsNameVariable":
            suggest = "endpoint_dns_name_variable"
        elif key == "endpointIp":
            suggest = "endpoint_ip"
        elif key == "endpointIpVariable":
            suggest = "endpoint_ip_variable"
        elif key == "intervalVariable":
            suggest = "interval_variable"
        elif key == "multiplierVariable":
            suggest = "multiplier_variable"
        elif key == "nameVariable":
            suggest = "name_variable"
        elif key == "thresholdVariable":
            suggest = "threshold_variable"
        elif key == "typeVariable":
            suggest = "type_variable"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in CiscoSystemFeatureTemplateTracker. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        CiscoSystemFeatureTemplateTracker.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        CiscoSystemFeatureTemplateTracker.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 boolean: Optional[_builtins.str] = None,
                 boolean_variable: Optional[_builtins.str] = None,
                 elements: Optional[Sequence[_builtins.str]] = None,
                 elements_variable: Optional[_builtins.str] = None,
                 endpoint_api_url: Optional[_builtins.str] = None,
                 endpoint_api_url_variable: Optional[_builtins.str] = None,
                 endpoint_dns_name: Optional[_builtins.str] = None,
                 endpoint_dns_name_variable: Optional[_builtins.str] = None,
                 endpoint_ip: Optional[_builtins.str] = None,
                 endpoint_ip_variable: Optional[_builtins.str] = None,
                 interval: Optional[_builtins.int] = None,
                 interval_variable: Optional[_builtins.str] = None,
                 multiplier: Optional[_builtins.int] = None,
                 multiplier_variable: Optional[_builtins.str] = None,
                 name: Optional[_builtins.str] = None,
                 name_variable: Optional[_builtins.str] = None,
                 optional: Optional[_builtins.bool] = None,
                 threshold: Optional[_builtins.int] = None,
                 threshold_variable: Optional[_builtins.str] = None,
                 type: Optional[_builtins.str] = None,
                 type_variable: Optional[_builtins.str] = None):
        """
        :param _builtins.str boolean: Type of grouping to be performed for tracker group
                 - Choices: `or`, `and`
                 - Default value: `or`
        :param _builtins.str boolean_variable: Variable name
        :param Sequence[_builtins.str] elements: Tracker member names separated by space
        :param _builtins.str elements_variable: Variable name
        :param _builtins.str endpoint_api_url: API url of endpoint
        :param _builtins.str endpoint_api_url_variable: Variable name
        :param _builtins.str endpoint_dns_name: DNS name of endpoint
        :param _builtins.str endpoint_dns_name_variable: Variable name
        :param _builtins.str endpoint_ip: IP address of endpoint
        :param _builtins.str endpoint_ip_variable: Variable name
        :param _builtins.int interval: Probe interval <10..600> seconds
                 - Range: `20`-`600`
                 - Default value: `60`
        :param _builtins.str interval_variable: Variable name
        :param _builtins.int multiplier: Probe failure multiplier <1..10> failed attempts
                 - Range: `1`-`10`
                 - Default value: `3`
        :param _builtins.str multiplier_variable: Variable name
        :param _builtins.str name: Tracker name
        :param _builtins.str name_variable: Variable name
        :param _builtins.bool optional: Indicates if list item is considered optional.
        :param _builtins.int threshold: Probe Timeout threshold <100..1000> milliseconds
                 - Range: `100`-`1000`
                 - Default value: `300`
        :param _builtins.str threshold_variable: Variable name
        :param _builtins.str type: Default(Interface)
                 - Choices: `tracker-group`, `interface`, `static-route`
                 - Default value: `interface`
        :param _builtins.str type_variable: Variable name
        """
        if boolean is not None:
            pulumi.set(__self__, "boolean", boolean)
        if boolean_variable is not None:
            pulumi.set(__self__, "boolean_variable", boolean_variable)
        if elements is not None:
            pulumi.set(__self__, "elements", elements)
        if elements_variable is not None:
            pulumi.set(__self__, "elements_variable", elements_variable)
        if endpoint_api_url is not None:
            pulumi.set(__self__, "endpoint_api_url", endpoint_api_url)
        if endpoint_api_url_variable is not None:
            pulumi.set(__self__, "endpoint_api_url_variable", endpoint_api_url_variable)
        if endpoint_dns_name is not None:
            pulumi.set(__self__, "endpoint_dns_name", endpoint_dns_name)
        if endpoint_dns_name_variable is not None:
            pulumi.set(__self__, "endpoint_dns_name_variable", endpoint_dns_name_variable)
        if endpoint_ip is not None:
            pulumi.set(__self__, "endpoint_ip", endpoint_ip)
        if endpoint_ip_variable is not None:
            pulumi.set(__self__, "endpoint_ip_variable", endpoint_ip_variable)
        if interval is not None:
            pulumi.set(__self__, "interval", interval)
        if interval_variable is not None:
            pulumi.set(__self__, "interval_variable", interval_variable)
        if multiplier is not None:
            pulumi.set(__self__, "multiplier", multiplier)
        if multiplier_variable is not None:
            pulumi.set(__self__, "multiplier_variable", multiplier_variable)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if name_variable is not None:
            pulumi.set(__self__, "name_variable", name_variable)
        if optional is not None:
            pulumi.set(__self__, "optional", optional)
        if threshold is not None:
            pulumi.set(__self__, "threshold", threshold)
        if threshold_variable is not None:
            pulumi.set(__self__, "threshold_variable", threshold_variable)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if type_variable is not None:
            pulumi.set(__self__, "type_variable", type_variable)

    @_builtins.property
    @pulumi.getter
    def boolean(self) -> Optional[_builtins.str]:
        """
        Type of grouping to be performed for tracker group
          - Choices: `or`, `and`
          - Default value: `or`
        """
        return pulumi.get(self, "boolean")

    @_builtins.property
    @pulumi.getter(name="booleanVariable")
    def boolean_variable(self) -> Optional[_builtins.str]:
        """
        Variable name
        """
        return pulumi.get(self, "boolean_variable")

    @_builtins.property
    @pulumi.getter
    def elements(self) -> Optional[Sequence[_builtins.str]]:
        """
        Tracker member names separated by space
        """
        return pulumi.get(self, "elements")

    @_builtins.property
    @pulumi.getter(name="elementsVariable")
    def elements_variable(self) -> Optional[_builtins.str]:
        """
        Variable name
        """
        return pulumi.get(self, "elements_variable")

    @_builtins.property
    @pulumi.getter(name="endpointApiUrl")
    def endpoint_api_url(self) -> Optional[_builtins.str]:
        """
        API url of endpoint
        """
        return pulumi.get(self, "endpoint_api_url")

    @_builtins.property
    @pulumi.getter(name="endpointApiUrlVariable")
    def endpoint_api_url_variable(self) -> Optional[_builtins.str]:
        """
        Variable name
        """
        return pulumi.get(self, "endpoint_api_url_variable")

    @_builtins.property
    @pulumi.getter(name="endpointDnsName")
    def endpoint_dns_name(self) -> Optional[_builtins.str]:
        """
        DNS name of endpoint
        """
        return pulumi.get(self, "endpoint_dns_name")

    @_builtins.property
    @pulumi.getter(name="endpointDnsNameVariable")
    def endpoint_dns_name_variable(self) -> Optional[_builtins.str]:
        """
        Variable name
        """
        return pulumi.get(self, "endpoint_dns_name_variable")

    @_builtins.property
    @pulumi.getter(name="endpointIp")
    def endpoint_ip(self) -> Optional[_builtins.str]:
        """
        IP address of endpoint
        """
        return pulumi.get(self, "endpoint_ip")

    @_builtins.property
    @pulumi.getter(name="endpointIpVariable")
    def endpoint_ip_variable(self) -> Optional[_builtins.str]:
        """
        Variable name
        """
        return pulumi.get(self, "endpoint_ip_variable")

    @_builtins.property
    @pulumi.getter
    def interval(self) -> Optional[_builtins.int]:
        """
        Probe interval <10..600> seconds
          - Range: `20`-`600`
          - Default value: `60`
        """
        return pulumi.get(self, "interval")

    @_builtins.property
    @pulumi.getter(name="intervalVariable")
    def interval_variable(self) -> Optional[_builtins.str]:
        """
        Variable name
        """
        return pulumi.get(self, "interval_variable")

    @_builtins.property
    @pulumi.getter
    def multiplier(self) -> Optional[_builtins.int]:
        """
        Probe failure multiplier <1..10> failed attempts
          - Range: `1`-`10`
          - Default value: `3`
        """
        return pulumi.get(self, "multiplier")

    @_builtins.property
    @pulumi.getter(name="multiplierVariable")
    def multiplier_variable(self) -> Optional[_builtins.str]:
        """
        Variable name
        """
        return pulumi.get(self, "multiplier_variable")

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[_builtins.str]:
        """
        Tracker name
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter(name="nameVariable")
    def name_variable(self) -> Optional[_builtins.str]:
        """
        Variable name
        """
        return pulumi.get(self, "name_variable")

    @_builtins.property
    @pulumi.getter
    def optional(self) -> Optional[_builtins.bool]:
        """
        Indicates if list item is considered optional.
        """
        return pulumi.get(self, "optional")

    @_builtins.property
    @pulumi.getter
    def threshold(self) -> Optional[_builtins.int]:
        """
        Probe Timeout threshold <100..1000> milliseconds
          - Range: `100`-`1000`
          - Default value: `300`
        """
        return pulumi.get(self, "threshold")

    @_builtins.property
    @pulumi.getter(name="thresholdVariable")
    def threshold_variable(self) -> Optional[_builtins.str]:
        """
        Variable name
        """
        return pulumi.get(self, "threshold_variable")

    @_builtins.property
    @pulumi.getter
    def type(self) -> Optional[_builtins.str]:
        """
        Default(Interface)
          - Choices: `tracker-group`, `interface`, `static-route`
          - Default value: `interface`
        """
        return pulumi.get(self, "type")

    @_builtins.property
    @pulumi.getter(name="typeVariable")
    def type_variable(self) -> Optional[_builtins.str]:
        """
        Variable name
        """
        return pulumi.get(self, "type_variable")


@pulumi.output_type
class CiscoThousandeyesFeatureTemplateVirtualApplication(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "applicationType":
            suggest = "application_type"
        elif key == "instanceId":
            suggest = "instance_id"
        elif key == "teAccountGroupToken":
            suggest = "te_account_group_token"
        elif key == "teAccountGroupTokenVariable":
            suggest = "te_account_group_token_variable"
        elif key == "teAgentIp":
            suggest = "te_agent_ip"
        elif key == "teAgentIpVariable":
            suggest = "te_agent_ip_variable"
        elif key == "teDefaultGateway":
            suggest = "te_default_gateway"
        elif key == "teDefaultGatewayVariable":
            suggest = "te_default_gateway_variable"
        elif key == "teHostname":
            suggest = "te_hostname"
        elif key == "teHostnameVariable":
            suggest = "te_hostname_variable"
        elif key == "teNameServer":
            suggest = "te_name_server"
        elif key == "teNameServerVariable":
            suggest = "te_name_server_variable"
        elif key == "tePacUrl":
            suggest = "te_pac_url"
        elif key == "tePacUrlVariable":
            suggest = "te_pac_url_variable"
        elif key == "teProxyHost":
            suggest = "te_proxy_host"
        elif key == "teProxyHostVariable":
            suggest = "te_proxy_host_variable"
        elif key == "teProxyPort":
            suggest = "te_proxy_port"
        elif key == "teProxyPortVariable":
            suggest = "te_proxy_port_variable"
        elif key == "teVpn":
            suggest = "te_vpn"
        elif key == "teVpnVariable":
            suggest = "te_vpn_variable"
        elif key == "teWebProxyType":
            suggest = "te_web_proxy_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in CiscoThousandeyesFeatureTemplateVirtualApplication. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        CiscoThousandeyesFeatureTemplateVirtualApplication.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        CiscoThousandeyesFeatureTemplateVirtualApplication.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 application_type: Optional[_builtins.str] = None,
                 instance_id: Optional[_builtins.str] = None,
                 optional: Optional[_builtins.bool] = None,
                 te_account_group_token: Optional[_builtins.str] = None,
                 te_account_group_token_variable: Optional[_builtins.str] = None,
                 te_agent_ip: Optional[_builtins.str] = None,
                 te_agent_ip_variable: Optional[_builtins.str] = None,
                 te_default_gateway: Optional[_builtins.str] = None,
                 te_default_gateway_variable: Optional[_builtins.str] = None,
                 te_hostname: Optional[_builtins.str] = None,
                 te_hostname_variable: Optional[_builtins.str] = None,
                 te_name_server: Optional[_builtins.str] = None,
                 te_name_server_variable: Optional[_builtins.str] = None,
                 te_pac_url: Optional[_builtins.str] = None,
                 te_pac_url_variable: Optional[_builtins.str] = None,
                 te_proxy_host: Optional[_builtins.str] = None,
                 te_proxy_host_variable: Optional[_builtins.str] = None,
                 te_proxy_port: Optional[_builtins.int] = None,
                 te_proxy_port_variable: Optional[_builtins.str] = None,
                 te_vpn: Optional[_builtins.int] = None,
                 te_vpn_variable: Optional[_builtins.str] = None,
                 te_web_proxy_type: Optional[_builtins.str] = None):
        """
        :param _builtins.str application_type: List of Virtual applications
                 - Default value: `te`
        :param _builtins.str instance_id: List of Virtual applications
                 - Default value: `1`
        :param _builtins.bool optional: Indicates if list item is considered optional.
        :param _builtins.str te_account_group_token: Set the Account Group Token
        :param _builtins.str te_account_group_token_variable: Variable name
        :param _builtins.str te_agent_ip: Set the Agent IP Address
        :param _builtins.str te_agent_ip_variable: Variable name
        :param _builtins.str te_default_gateway: Set the Agent default gateway
        :param _builtins.str te_default_gateway_variable: Variable name
        :param _builtins.str te_hostname: Set the host name
        :param _builtins.str te_hostname_variable: Variable name
        :param _builtins.str te_name_server: Set the name server
        :param _builtins.str te_name_server_variable: Variable name
        :param _builtins.str te_pac_url: PAC URL
        :param _builtins.str te_pac_url_variable: Variable name
        :param _builtins.str te_proxy_host: Set the proxy host
        :param _builtins.str te_proxy_host_variable: Variable name
        :param _builtins.int te_proxy_port: Set the proxy port
                 - Range: `0`-`65535`
        :param _builtins.str te_proxy_port_variable: Variable name
        :param _builtins.int te_vpn: VPN number
                 - Range: `1`-`65535`
        :param _builtins.str te_vpn_variable: Variable name
        :param _builtins.str te_web_proxy_type: Web Proxy Type
                 - Choices: `none`, `static`, `pac`
                 - Default value: `none`
        """
        if application_type is not None:
            pulumi.set(__self__, "application_type", application_type)
        if instance_id is not None:
            pulumi.set(__self__, "instance_id", instance_id)
        if optional is not None:
            pulumi.set(__self__, "optional", optional)
        if te_account_group_token is not None:
            pulumi.set(__self__, "te_account_group_token", te_account_group_token)
        if te_account_group_token_variable is not None:
            pulumi.set(__self__, "te_account_group_token_variable", te_account_group_token_variable)
        if te_agent_ip is not None:
            pulumi.set(__self__, "te_agent_ip", te_agent_ip)
        if te_agent_ip_variable is not None:
            pulumi.set(__self__, "te_agent_ip_variable", te_agent_ip_variable)
        if te_default_gateway is not None:
            pulumi.set(__self__, "te_default_gateway", te_default_gateway)
        if te_default_gateway_variable is not None:
            pulumi.set(__self__, "te_default_gateway_variable", te_default_gateway_variable)
        if te_hostname is not None:
            pulumi.set(__self__, "te_hostname", te_hostname)
        if te_hostname_variable is not None:
            pulumi.set(__self__, "te_hostname_variable", te_hostname_variable)
        if te_name_server is not None:
            pulumi.set(__self__, "te_name_server", te_name_server)
        if te_name_server_variable is not None:
            pulumi.set(__self__, "te_name_server_variable", te_name_server_variable)
        if te_pac_url is not None:
            pulumi.set(__self__, "te_pac_url", te_pac_url)
        if te_pac_url_variable is not None:
            pulumi.set(__self__, "te_pac_url_variable", te_pac_url_variable)
        if te_proxy_host is not None:
            pulumi.set(__self__, "te_proxy_host", te_proxy_host)
        if te_proxy_host_variable is not None:
            pulumi.set(__self__, "te_proxy_host_variable", te_proxy_host_variable)
        if te_proxy_port is not None:
            pulumi.set(__self__, "te_proxy_port", te_proxy_port)
        if te_proxy_port_variable is not None:
            pulumi.set(__self__, "te_proxy_port_variable", te_proxy_port_variable)
        if te_vpn is not None:
            pulumi.set(__self__, "te_vpn", te_vpn)
        if te_vpn_variable is not None:
            pulumi.set(__self__, "te_vpn_variable", te_vpn_variable)
        if te_web_proxy_type is not None:
            pulumi.set(__self__, "te_web_proxy_type", te_web_proxy_type)

    @_builtins.property
    @pulumi.getter(name="applicationType")
    def application_type(self) -> Optional[_builtins.str]:
        """
        List of Virtual applications
          - Default value: `te`
        """
        return pulumi.get(self, "application_type")

    @_builtins.property
    @pulumi.getter(name="instanceId")
    def instance_id(self) -> Optional[_builtins.str]:
        """
        List of Virtual applications
          - Default value: `1`
        """
        return pulumi.get(self, "instance_id")

    @_builtins.property
    @pulumi.getter
    def optional(self) -> Optional[_builtins.bool]:
        """
        Indicates if list item is considered optional.
        """
        return pulumi.get(self, "optional")

    @_builtins.property
    @pulumi.getter(name="teAccountGroupToken")
    def te_account_group_token(self) -> Optional[_builtins.str]:
        """
        Set the Account Group Token
        """
        return pulumi.get(self, "te_account_group_token")

    @_builtins.property
    @pulumi.getter(name="teAccountGroupTokenVariable")
    def te_account_group_token_variable(self) -> Optional[_builtins.str]:
        """
        Variable name
        """
        return pulumi.get(self, "te_account_group_token_variable")

    @_builtins.property
    @pulumi.getter(name="teAgentIp")
    def te_agent_ip(self) -> Optional[_builtins.str]:
        """
        Set the Agent IP Address
        """
        return pulumi.get(self, "te_agent_ip")

    @_builtins.property
    @pulumi.getter(name="teAgentIpVariable")
    def te_agent_ip_variable(self) -> Optional[_builtins.str]:
        """
        Variable name
        """
        return pulumi.get(self, "te_agent_ip_variable")

    @_builtins.property
    @pulumi.getter(name="teDefaultGateway")
    def te_default_gateway(self) -> Optional[_builtins.str]:
        """
        Set the Agent default gateway
        """
        return pulumi.get(self, "te_default_gateway")

    @_builtins.property
    @pulumi.getter(name="teDefaultGatewayVariable")
    def te_default_gateway_variable(self) -> Optional[_builtins.str]:
        """
        Variable name
        """
        return pulumi.get(self, "te_default_gateway_variable")

    @_builtins.property
    @pulumi.getter(name="teHostname")
    def te_hostname(self) -> Optional[_builtins.str]:
        """
        Set the host name
        """
        return pulumi.get(self, "te_hostname")

    @_builtins.property
    @pulumi.getter(name="teHostnameVariable")
    def te_hostname_variable(self) -> Optional[_builtins.str]:
        """
        Variable name
        """
        return pulumi.get(self, "te_hostname_variable")

    @_builtins.property
    @pulumi.getter(name="teNameServer")
    def te_name_server(self) -> Optional[_builtins.str]:
        """
        Set the name server
        """
        return pulumi.get(self, "te_name_server")

    @_builtins.property
    @pulumi.getter(name="teNameServerVariable")
    def te_name_server_variable(self) -> Optional[_builtins.str]:
        """
        Variable name
        """
        return pulumi.get(self, "te_name_server_variable")

    @_builtins.property
    @pulumi.getter(name="tePacUrl")
    def te_pac_url(self) -> Optional[_builtins.str]:
        """
        PAC URL
        """
        return pulumi.get(self, "te_pac_url")

    @_builtins.property
    @pulumi.getter(name="tePacUrlVariable")
    def te_pac_url_variable(self) -> Optional[_builtins.str]:
        """
        Variable name
        """
        return pulumi.get(self, "te_pac_url_variable")

    @_builtins.property
    @pulumi.getter(name="teProxyHost")
    def te_proxy_host(self) -> Optional[_builtins.str]:
        """
        Set the proxy host
        """
        return pulumi.get(self, "te_proxy_host")

    @_builtins.property
    @pulumi.getter(name="teProxyHostVariable")
    def te_proxy_host_variable(self) -> Optional[_builtins.str]:
        """
        Variable name
        """
        return pulumi.get(self, "te_proxy_host_variable")

    @_builtins.property
    @pulumi.getter(name="teProxyPort")
    def te_proxy_port(self) -> Optional[_builtins.int]:
        """
        Set the proxy port
          - Range: `0`-`65535`
        """
        return pulumi.get(self, "te_proxy_port")

    @_builtins.property
    @pulumi.getter(name="teProxyPortVariable")
    def te_proxy_port_variable(self) -> Optional[_builtins.str]:
        """
        Variable name
        """
        return pulumi.get(self, "te_proxy_port_variable")

    @_builtins.property
    @pulumi.getter(name="teVpn")
    def te_vpn(self) -> Optional[_builtins.int]:
        """
        VPN number
          - Range: `1`-`65535`
        """
        return pulumi.get(self, "te_vpn")

    @_builtins.property
    @pulumi.getter(name="teVpnVariable")
    def te_vpn_variable(self) -> Optional[_builtins.str]:
        """
        Variable name
        """
        return pulumi.get(self, "te_vpn_variable")

    @_builtins.property
    @pulumi.getter(name="teWebProxyType")
    def te_web_proxy_type(self) -> Optional[_builtins.str]:
        """
        Web Proxy Type
          - Choices: `none`, `static`, `pac`
          - Default value: `none`
        """
        return pulumi.get(self, "te_web_proxy_type")


@pulumi.output_type
class CiscoTrustsecFeatureTemplateSxpConnection(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "maximumHoldTime":
            suggest = "maximum_hold_time"
        elif key == "maximumHoldTimeVariable":
            suggest = "maximum_hold_time_variable"
        elif key == "minimumHoldTime":
            suggest = "minimum_hold_time"
        elif key == "minimumHoldTimeVariable":
            suggest = "minimum_hold_time_variable"
        elif key == "modeType":
            suggest = "mode_type"
        elif key == "peerIp":
            suggest = "peer_ip"
        elif key == "presharedKey":
            suggest = "preshared_key"
        elif key == "sourceIp":
            suggest = "source_ip"
        elif key == "sourceIpVariable":
            suggest = "source_ip_variable"
        elif key == "vpnId":
            suggest = "vpn_id"
        elif key == "vpnIdVariable":
            suggest = "vpn_id_variable"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in CiscoTrustsecFeatureTemplateSxpConnection. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        CiscoTrustsecFeatureTemplateSxpConnection.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        CiscoTrustsecFeatureTemplateSxpConnection.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 maximum_hold_time: Optional[_builtins.int] = None,
                 maximum_hold_time_variable: Optional[_builtins.str] = None,
                 minimum_hold_time: Optional[_builtins.int] = None,
                 minimum_hold_time_variable: Optional[_builtins.str] = None,
                 mode: Optional[_builtins.str] = None,
                 mode_type: Optional[_builtins.str] = None,
                 optional: Optional[_builtins.bool] = None,
                 peer_ip: Optional[_builtins.str] = None,
                 preshared_key: Optional[_builtins.str] = None,
                 source_ip: Optional[_builtins.str] = None,
                 source_ip_variable: Optional[_builtins.str] = None,
                 vpn_id: Optional[_builtins.int] = None,
                 vpn_id_variable: Optional[_builtins.str] = None):
        """
        :param _builtins.int maximum_hold_time: Configure Connection Maximum hold time <0..65535>
                 - Range: `0`-`65535`
                 - Default value: `0`
        :param _builtins.str maximum_hold_time_variable: Variable name
        :param _builtins.int minimum_hold_time: Configure Connection Minimum hold time <0..65535>
                 - Range: `0`-`65535`
                 - Default value: `0`
        :param _builtins.str minimum_hold_time_variable: Variable name
        :param _builtins.str mode: Define Mode of connection
                 - Choices: `local`, `peer`
                 - Default value: `local`
        :param _builtins.str mode_type: Define Role of a device <speaker/listener/both>
                 - Choices: `listener`, `speaker`, `both`
                 - Default value: `speaker`
        :param _builtins.bool optional: Indicates if list item is considered optional.
        :param _builtins.str peer_ip: Configure SXP Peer IP address (IPv4)
        :param _builtins.str preshared_key: Define Preshared Key type
                 - Choices: `default`, `key-chain`, `none`
                 - Default value: `none`
        :param _builtins.str source_ip: Configure SXP Source IP address (IPv4)
        :param _builtins.str source_ip_variable: Variable name
        :param _builtins.int vpn_id: Configure Connection VPN (VRF) ID
                 - Range: `0`-`65527`
                 - Default value: `0`
        :param _builtins.str vpn_id_variable: Variable name
        """
        if maximum_hold_time is not None:
            pulumi.set(__self__, "maximum_hold_time", maximum_hold_time)
        if maximum_hold_time_variable is not None:
            pulumi.set(__self__, "maximum_hold_time_variable", maximum_hold_time_variable)
        if minimum_hold_time is not None:
            pulumi.set(__self__, "minimum_hold_time", minimum_hold_time)
        if minimum_hold_time_variable is not None:
            pulumi.set(__self__, "minimum_hold_time_variable", minimum_hold_time_variable)
        if mode is not None:
            pulumi.set(__self__, "mode", mode)
        if mode_type is not None:
            pulumi.set(__self__, "mode_type", mode_type)
        if optional is not None:
            pulumi.set(__self__, "optional", optional)
        if peer_ip is not None:
            pulumi.set(__self__, "peer_ip", peer_ip)
        if preshared_key is not None:
            pulumi.set(__self__, "preshared_key", preshared_key)
        if source_ip is not None:
            pulumi.set(__self__, "source_ip", source_ip)
        if source_ip_variable is not None:
            pulumi.set(__self__, "source_ip_variable", source_ip_variable)
        if vpn_id is not None:
            pulumi.set(__self__, "vpn_id", vpn_id)
        if vpn_id_variable is not None:
            pulumi.set(__self__, "vpn_id_variable", vpn_id_variable)

    @_builtins.property
    @pulumi.getter(name="maximumHoldTime")
    def maximum_hold_time(self) -> Optional[_builtins.int]:
        """
        Configure Connection Maximum hold time <0..65535>
          - Range: `0`-`65535`
          - Default value: `0`
        """
        return pulumi.get(self, "maximum_hold_time")

    @_builtins.property
    @pulumi.getter(name="maximumHoldTimeVariable")
    def maximum_hold_time_variable(self) -> Optional[_builtins.str]:
        """
        Variable name
        """
        return pulumi.get(self, "maximum_hold_time_variable")

    @_builtins.property
    @pulumi.getter(name="minimumHoldTime")
    def minimum_hold_time(self) -> Optional[_builtins.int]:
        """
        Configure Connection Minimum hold time <0..65535>
          - Range: `0`-`65535`
          - Default value: `0`
        """
        return pulumi.get(self, "minimum_hold_time")

    @_builtins.property
    @pulumi.getter(name="minimumHoldTimeVariable")
    def minimum_hold_time_variable(self) -> Optional[_builtins.str]:
        """
        Variable name
        """
        return pulumi.get(self, "minimum_hold_time_variable")

    @_builtins.property
    @pulumi.getter
    def mode(self) -> Optional[_builtins.str]:
        """
        Define Mode of connection
          - Choices: `local`, `peer`
          - Default value: `local`
        """
        return pulumi.get(self, "mode")

    @_builtins.property
    @pulumi.getter(name="modeType")
    def mode_type(self) -> Optional[_builtins.str]:
        """
        Define Role of a device <speaker/listener/both>
          - Choices: `listener`, `speaker`, `both`
          - Default value: `speaker`
        """
        return pulumi.get(self, "mode_type")

    @_builtins.property
    @pulumi.getter
    def optional(self) -> Optional[_builtins.bool]:
        """
        Indicates if list item is considered optional.
        """
        return pulumi.get(self, "optional")

    @_builtins.property
    @pulumi.getter(name="peerIp")
    def peer_ip(self) -> Optional[_builtins.str]:
        """
        Configure SXP Peer IP address (IPv4)
        """
        return pulumi.get(self, "peer_ip")

    @_builtins.property
    @pulumi.getter(name="presharedKey")
    def preshared_key(self) -> Optional[_builtins.str]:
        """
        Define Preshared Key type
          - Choices: `default`, `key-chain`, `none`
          - Default value: `none`
        """
        return pulumi.get(self, "preshared_key")

    @_builtins.property
    @pulumi.getter(name="sourceIp")
    def source_ip(self) -> Optional[_builtins.str]:
        """
        Configure SXP Source IP address (IPv4)
        """
        return pulumi.get(self, "source_ip")

    @_builtins.property
    @pulumi.getter(name="sourceIpVariable")
    def source_ip_variable(self) -> Optional[_builtins.str]:
        """
        Variable name
        """
        return pulumi.get(self, "source_ip_variable")

    @_builtins.property
    @pulumi.getter(name="vpnId")
    def vpn_id(self) -> Optional[_builtins.int]:
        """
        Configure Connection VPN (VRF) ID
          - Range: `0`-`65527`
          - Default value: `0`
        """
        return pulumi.get(self, "vpn_id")

    @_builtins.property
    @pulumi.getter(name="vpnIdVariable")
    def vpn_id_variable(self) -> Optional[_builtins.str]:
        """
        Variable name
        """
        return pulumi.get(self, "vpn_id_variable")


@pulumi.output_type
class CiscoVpnFeatureTemplateDnsHost(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "hostnameVariable":
            suggest = "hostname_variable"
        elif key == "ipVariable":
            suggest = "ip_variable"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in CiscoVpnFeatureTemplateDnsHost. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        CiscoVpnFeatureTemplateDnsHost.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        CiscoVpnFeatureTemplateDnsHost.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 hostname: Optional[_builtins.str] = None,
                 hostname_variable: Optional[_builtins.str] = None,
                 ip_variable: Optional[_builtins.str] = None,
                 ips: Optional[Sequence[_builtins.str]] = None,
                 optional: Optional[_builtins.bool] = None):
        """
        :param _builtins.str hostname: Hostname
        :param _builtins.str hostname_variable: Variable name
        :param _builtins.str ip_variable: Variable name
        :param Sequence[_builtins.str] ips: List of IP
        :param _builtins.bool optional: Indicates if list item is considered optional.
        """
        if hostname is not None:
            pulumi.set(__self__, "hostname", hostname)
        if hostname_variable is not None:
            pulumi.set(__self__, "hostname_variable", hostname_variable)
        if ip_variable is not None:
            pulumi.set(__self__, "ip_variable", ip_variable)
        if ips is not None:
            pulumi.set(__self__, "ips", ips)
        if optional is not None:
            pulumi.set(__self__, "optional", optional)

    @_builtins.property
    @pulumi.getter
    def hostname(self) -> Optional[_builtins.str]:
        """
        Hostname
        """
        return pulumi.get(self, "hostname")

    @_builtins.property
    @pulumi.getter(name="hostnameVariable")
    def hostname_variable(self) -> Optional[_builtins.str]:
        """
        Variable name
        """
        return pulumi.get(self, "hostname_variable")

    @_builtins.property
    @pulumi.getter(name="ipVariable")
    def ip_variable(self) -> Optional[_builtins.str]:
        """
        Variable name
        """
        return pulumi.get(self, "ip_variable")

    @_builtins.property
    @pulumi.getter
    def ips(self) -> Optional[Sequence[_builtins.str]]:
        """
        List of IP
        """
        return pulumi.get(self, "ips")

    @_builtins.property
    @pulumi.getter
    def optional(self) -> Optional[_builtins.bool]:
        """
        Indicates if list item is considered optional.
        """
        return pulumi.get(self, "optional")


@pulumi.output_type
class CiscoVpnFeatureTemplateDnsIpv4Server(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "addressVariable":
            suggest = "address_variable"
        elif key == "roleVariable":
            suggest = "role_variable"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in CiscoVpnFeatureTemplateDnsIpv4Server. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        CiscoVpnFeatureTemplateDnsIpv4Server.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        CiscoVpnFeatureTemplateDnsIpv4Server.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 address: Optional[_builtins.str] = None,
                 address_variable: Optional[_builtins.str] = None,
                 optional: Optional[_builtins.bool] = None,
                 role: Optional[_builtins.str] = None,
                 role_variable: Optional[_builtins.str] = None):
        """
        :param _builtins.str address: DNS Address
        :param _builtins.str address_variable: Variable name
        :param _builtins.bool optional: Indicates if list item is considered optional.
        :param _builtins.str role: Role
                 - Choices: `primary`, `secondary`
                 - Default value: `primary`
        :param _builtins.str role_variable: Variable name
        """
        if address is not None:
            pulumi.set(__self__, "address", address)
        if address_variable is not None:
            pulumi.set(__self__, "address_variable", address_variable)
        if optional is not None:
            pulumi.set(__self__, "optional", optional)
        if role is not None:
            pulumi.set(__self__, "role", role)
        if role_variable is not None:
            pulumi.set(__self__, "role_variable", role_variable)

    @_builtins.property
    @pulumi.getter
    def address(self) -> Optional[_builtins.str]:
        """
        DNS Address
        """
        return pulumi.get(self, "address")

    @_builtins.property
    @pulumi.getter(name="addressVariable")
    def address_variable(self) -> Optional[_builtins.str]:
        """
        Variable name
        """
        return pulumi.get(self, "address_variable")

    @_builtins.property
    @pulumi.getter
    def optional(self) -> Optional[_builtins.bool]:
        """
        Indicates if list item is considered optional.
        """
        return pulumi.get(self, "optional")

    @_builtins.property
    @pulumi.getter
    def role(self) -> Optional[_builtins.str]:
        """
        Role
          - Choices: `primary`, `secondary`
          - Default value: `primary`
        """
        return pulumi.get(self, "role")

    @_builtins.property
    @pulumi.getter(name="roleVariable")
    def role_variable(self) -> Optional[_builtins.str]:
        """
        Variable name
        """
        return pulumi.get(self, "role_variable")


@pulumi.output_type
class CiscoVpnFeatureTemplateDnsIpv6Server(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "roleVariable":
            suggest = "role_variable"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in CiscoVpnFeatureTemplateDnsIpv6Server. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        CiscoVpnFeatureTemplateDnsIpv6Server.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        CiscoVpnFeatureTemplateDnsIpv6Server.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 address: Optional[_builtins.str] = None,
                 optional: Optional[_builtins.bool] = None,
                 role: Optional[_builtins.str] = None,
                 role_variable: Optional[_builtins.str] = None):
        """
        :param _builtins.str address: DNS Address
        :param _builtins.bool optional: Indicates if list item is considered optional.
        :param _builtins.str role: Role
                 - Choices: `primary`, `secondary`
                 - Default value: `primary`
        :param _builtins.str role_variable: Variable name
        """
        if address is not None:
            pulumi.set(__self__, "address", address)
        if optional is not None:
            pulumi.set(__self__, "optional", optional)
        if role is not None:
            pulumi.set(__self__, "role", role)
        if role_variable is not None:
            pulumi.set(__self__, "role_variable", role_variable)

    @_builtins.property
    @pulumi.getter
    def address(self) -> Optional[_builtins.str]:
        """
        DNS Address
        """
        return pulumi.get(self, "address")

    @_builtins.property
    @pulumi.getter
    def optional(self) -> Optional[_builtins.bool]:
        """
        Indicates if list item is considered optional.
        """
        return pulumi.get(self, "optional")

    @_builtins.property
    @pulumi.getter
    def role(self) -> Optional[_builtins.str]:
        """
        Role
          - Choices: `primary`, `secondary`
          - Default value: `primary`
        """
        return pulumi.get(self, "role")

    @_builtins.property
    @pulumi.getter(name="roleVariable")
    def role_variable(self) -> Optional[_builtins.str]:
        """
        Variable name
        """
        return pulumi.get(self, "role_variable")


@pulumi.output_type
class CiscoVpnFeatureTemplateIpv4StaticGreRoute(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "interfacesVariable":
            suggest = "interfaces_variable"
        elif key == "prefixVariable":
            suggest = "prefix_variable"
        elif key == "vpnId":
            suggest = "vpn_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in CiscoVpnFeatureTemplateIpv4StaticGreRoute. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        CiscoVpnFeatureTemplateIpv4StaticGreRoute.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        CiscoVpnFeatureTemplateIpv4StaticGreRoute.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 interfaces: Optional[Sequence[_builtins.str]] = None,
                 interfaces_variable: Optional[_builtins.str] = None,
                 optional: Optional[_builtins.bool] = None,
                 prefix: Optional[_builtins.str] = None,
                 prefix_variable: Optional[_builtins.str] = None,
                 vpn_id: Optional[_builtins.int] = None):
        """
        :param Sequence[_builtins.str] interfaces: List of GRE Interfaces
        :param _builtins.str interfaces_variable: Variable name
        :param _builtins.bool optional: Indicates if list item is considered optional.
        :param _builtins.str prefix: Prefix
        :param _builtins.str prefix_variable: Variable name
        :param _builtins.int vpn_id: Destination VPN to resolve the prefix
                 - Default value: `0`
        """
        if interfaces is not None:
            pulumi.set(__self__, "interfaces", interfaces)
        if interfaces_variable is not None:
            pulumi.set(__self__, "interfaces_variable", interfaces_variable)
        if optional is not None:
            pulumi.set(__self__, "optional", optional)
        if prefix is not None:
            pulumi.set(__self__, "prefix", prefix)
        if prefix_variable is not None:
            pulumi.set(__self__, "prefix_variable", prefix_variable)
        if vpn_id is not None:
            pulumi.set(__self__, "vpn_id", vpn_id)

    @_builtins.property
    @pulumi.getter
    def interfaces(self) -> Optional[Sequence[_builtins.str]]:
        """
        List of GRE Interfaces
        """
        return pulumi.get(self, "interfaces")

    @_builtins.property
    @pulumi.getter(name="interfacesVariable")
    def interfaces_variable(self) -> Optional[_builtins.str]:
        """
        Variable name
        """
        return pulumi.get(self, "interfaces_variable")

    @_builtins.property
    @pulumi.getter
    def optional(self) -> Optional[_builtins.bool]:
        """
        Indicates if list item is considered optional.
        """
        return pulumi.get(self, "optional")

    @_builtins.property
    @pulumi.getter
    def prefix(self) -> Optional[_builtins.str]:
        """
        Prefix
        """
        return pulumi.get(self, "prefix")

    @_builtins.property
    @pulumi.getter(name="prefixVariable")
    def prefix_variable(self) -> Optional[_builtins.str]:
        """
        Variable name
        """
        return pulumi.get(self, "prefix_variable")

    @_builtins.property
    @pulumi.getter(name="vpnId")
    def vpn_id(self) -> Optional[_builtins.int]:
        """
        Destination VPN to resolve the prefix
          - Default value: `0`
        """
        return pulumi.get(self, "vpn_id")


@pulumi.output_type
class CiscoVpnFeatureTemplateIpv4StaticIpsecRoute(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "interfacesVariable":
            suggest = "interfaces_variable"
        elif key == "prefixVariable":
            suggest = "prefix_variable"
        elif key == "vpnId":
            suggest = "vpn_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in CiscoVpnFeatureTemplateIpv4StaticIpsecRoute. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        CiscoVpnFeatureTemplateIpv4StaticIpsecRoute.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        CiscoVpnFeatureTemplateIpv4StaticIpsecRoute.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 interfaces: Optional[Sequence[_builtins.str]] = None,
                 interfaces_variable: Optional[_builtins.str] = None,
                 optional: Optional[_builtins.bool] = None,
                 prefix: Optional[_builtins.str] = None,
                 prefix_variable: Optional[_builtins.str] = None,
                 vpn_id: Optional[_builtins.int] = None):
        """
        :param Sequence[_builtins.str] interfaces: List of IPSEC Interfaces (Separated by commas)
        :param _builtins.str interfaces_variable: Variable name
        :param _builtins.bool optional: Indicates if list item is considered optional.
        :param _builtins.str prefix: Prefix
        :param _builtins.str prefix_variable: Variable name
        :param _builtins.int vpn_id: Destination VPN to resolve the prefix
                 - Default value: `0`
        """
        if interfaces is not None:
            pulumi.set(__self__, "interfaces", interfaces)
        if interfaces_variable is not None:
            pulumi.set(__self__, "interfaces_variable", interfaces_variable)
        if optional is not None:
            pulumi.set(__self__, "optional", optional)
        if prefix is not None:
            pulumi.set(__self__, "prefix", prefix)
        if prefix_variable is not None:
            pulumi.set(__self__, "prefix_variable", prefix_variable)
        if vpn_id is not None:
            pulumi.set(__self__, "vpn_id", vpn_id)

    @_builtins.property
    @pulumi.getter
    def interfaces(self) -> Optional[Sequence[_builtins.str]]:
        """
        List of IPSEC Interfaces (Separated by commas)
        """
        return pulumi.get(self, "interfaces")

    @_builtins.property
    @pulumi.getter(name="interfacesVariable")
    def interfaces_variable(self) -> Optional[_builtins.str]:
        """
        Variable name
        """
        return pulumi.get(self, "interfaces_variable")

    @_builtins.property
    @pulumi.getter
    def optional(self) -> Optional[_builtins.bool]:
        """
        Indicates if list item is considered optional.
        """
        return pulumi.get(self, "optional")

    @_builtins.property
    @pulumi.getter
    def prefix(self) -> Optional[_builtins.str]:
        """
        Prefix
        """
        return pulumi.get(self, "prefix")

    @_builtins.property
    @pulumi.getter(name="prefixVariable")
    def prefix_variable(self) -> Optional[_builtins.str]:
        """
        Variable name
        """
        return pulumi.get(self, "prefix_variable")

    @_builtins.property
    @pulumi.getter(name="vpnId")
    def vpn_id(self) -> Optional[_builtins.int]:
        """
        Destination VPN to resolve the prefix
          - Default value: `0`
        """
        return pulumi.get(self, "vpn_id")


@pulumi.output_type
class CiscoVpnFeatureTemplateIpv4StaticRoute(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "dhcpVariable":
            suggest = "dhcp_variable"
        elif key == "distanceVariable":
            suggest = "distance_variable"
        elif key == "nextHops":
            suggest = "next_hops"
        elif key == "null0Variable":
            suggest = "null0_variable"
        elif key == "prefixVariable":
            suggest = "prefix_variable"
        elif key == "trackNextHops":
            suggest = "track_next_hops"
        elif key == "vpnId":
            suggest = "vpn_id"
        elif key == "vpnIdVariable":
            suggest = "vpn_id_variable"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in CiscoVpnFeatureTemplateIpv4StaticRoute. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        CiscoVpnFeatureTemplateIpv4StaticRoute.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        CiscoVpnFeatureTemplateIpv4StaticRoute.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 dhcp: Optional[_builtins.bool] = None,
                 dhcp_variable: Optional[_builtins.str] = None,
                 distance: Optional[_builtins.int] = None,
                 distance_variable: Optional[_builtins.str] = None,
                 next_hops: Optional[Sequence['outputs.CiscoVpnFeatureTemplateIpv4StaticRouteNextHop']] = None,
                 null0: Optional[_builtins.bool] = None,
                 null0_variable: Optional[_builtins.str] = None,
                 optional: Optional[_builtins.bool] = None,
                 prefix: Optional[_builtins.str] = None,
                 prefix_variable: Optional[_builtins.str] = None,
                 track_next_hops: Optional[Sequence['outputs.CiscoVpnFeatureTemplateIpv4StaticRouteTrackNextHop']] = None,
                 vpn_id: Optional[_builtins.int] = None,
                 vpn_id_variable: Optional[_builtins.str] = None):
        """
        :param _builtins.bool dhcp: Default Gateway obtained from DHCP
                 - Default value: `false`
        :param _builtins.str dhcp_variable: Variable name
        :param _builtins.int distance: Administrative distance
                 - Range: `1`-`255`
                 - Default value: `1`
        :param _builtins.str distance_variable: Variable name
        :param Sequence['CiscoVpnFeatureTemplateIpv4StaticRouteNextHopArgs'] next_hops: IP gateway address
        :param _builtins.bool null0: null0
                 - Default value: `false`
        :param _builtins.str null0_variable: Variable name
        :param _builtins.bool optional: Indicates if list item is considered optional.
        :param _builtins.str prefix: Prefix
        :param _builtins.str prefix_variable: Variable name
        :param Sequence['CiscoVpnFeatureTemplateIpv4StaticRouteTrackNextHopArgs'] track_next_hops: IP gateway address
        :param _builtins.int vpn_id: Destination VPN(!=0 or !=512) to resolve the prefix
                 - Default value: `0`
        :param _builtins.str vpn_id_variable: Variable name
        """
        if dhcp is not None:
            pulumi.set(__self__, "dhcp", dhcp)
        if dhcp_variable is not None:
            pulumi.set(__self__, "dhcp_variable", dhcp_variable)
        if distance is not None:
            pulumi.set(__self__, "distance", distance)
        if distance_variable is not None:
            pulumi.set(__self__, "distance_variable", distance_variable)
        if next_hops is not None:
            pulumi.set(__self__, "next_hops", next_hops)
        if null0 is not None:
            pulumi.set(__self__, "null0", null0)
        if null0_variable is not None:
            pulumi.set(__self__, "null0_variable", null0_variable)
        if optional is not None:
            pulumi.set(__self__, "optional", optional)
        if prefix is not None:
            pulumi.set(__self__, "prefix", prefix)
        if prefix_variable is not None:
            pulumi.set(__self__, "prefix_variable", prefix_variable)
        if track_next_hops is not None:
            pulumi.set(__self__, "track_next_hops", track_next_hops)
        if vpn_id is not None:
            pulumi.set(__self__, "vpn_id", vpn_id)
        if vpn_id_variable is not None:
            pulumi.set(__self__, "vpn_id_variable", vpn_id_variable)

    @_builtins.property
    @pulumi.getter
    def dhcp(self) -> Optional[_builtins.bool]:
        """
        Default Gateway obtained from DHCP
          - Default value: `false`
        """
        return pulumi.get(self, "dhcp")

    @_builtins.property
    @pulumi.getter(name="dhcpVariable")
    def dhcp_variable(self) -> Optional[_builtins.str]:
        """
        Variable name
        """
        return pulumi.get(self, "dhcp_variable")

    @_builtins.property
    @pulumi.getter
    def distance(self) -> Optional[_builtins.int]:
        """
        Administrative distance
          - Range: `1`-`255`
          - Default value: `1`
        """
        return pulumi.get(self, "distance")

    @_builtins.property
    @pulumi.getter(name="distanceVariable")
    def distance_variable(self) -> Optional[_builtins.str]:
        """
        Variable name
        """
        return pulumi.get(self, "distance_variable")

    @_builtins.property
    @pulumi.getter(name="nextHops")
    def next_hops(self) -> Optional[Sequence['outputs.CiscoVpnFeatureTemplateIpv4StaticRouteNextHop']]:
        """
        IP gateway address
        """
        return pulumi.get(self, "next_hops")

    @_builtins.property
    @pulumi.getter
    def null0(self) -> Optional[_builtins.bool]:
        """
        null0
          - Default value: `false`
        """
        return pulumi.get(self, "null0")

    @_builtins.property
    @pulumi.getter(name="null0Variable")
    def null0_variable(self) -> Optional[_builtins.str]:
        """
        Variable name
        """
        return pulumi.get(self, "null0_variable")

    @_builtins.property
    @pulumi.getter
    def optional(self) -> Optional[_builtins.bool]:
        """
        Indicates if list item is considered optional.
        """
        return pulumi.get(self, "optional")

    @_builtins.property
    @pulumi.getter
    def prefix(self) -> Optional[_builtins.str]:
        """
        Prefix
        """
        return pulumi.get(self, "prefix")

    @_builtins.property
    @pulumi.getter(name="prefixVariable")
    def prefix_variable(self) -> Optional[_builtins.str]:
        """
        Variable name
        """
        return pulumi.get(self, "prefix_variable")

    @_builtins.property
    @pulumi.getter(name="trackNextHops")
    def track_next_hops(self) -> Optional[Sequence['outputs.CiscoVpnFeatureTemplateIpv4StaticRouteTrackNextHop']]:
        """
        IP gateway address
        """
        return pulumi.get(self, "track_next_hops")

    @_builtins.property
    @pulumi.getter(name="vpnId")
    def vpn_id(self) -> Optional[_builtins.int]:
        """
        Destination VPN(!=0 or !=512) to resolve the prefix
          - Default value: `0`
        """
        return pulumi.get(self, "vpn_id")

    @_builtins.property
    @pulumi.getter(name="vpnIdVariable")
    def vpn_id_variable(self) -> Optional[_builtins.str]:
        """
        Variable name
        """
        return pulumi.get(self, "vpn_id_variable")


@pulumi.output_type
class CiscoVpnFeatureTemplateIpv4StaticRouteNextHop(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "addressVariable":
            suggest = "address_variable"
        elif key == "distanceVariable":
            suggest = "distance_variable"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in CiscoVpnFeatureTemplateIpv4StaticRouteNextHop. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        CiscoVpnFeatureTemplateIpv4StaticRouteNextHop.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        CiscoVpnFeatureTemplateIpv4StaticRouteNextHop.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 address: Optional[_builtins.str] = None,
                 address_variable: Optional[_builtins.str] = None,
                 distance: Optional[_builtins.int] = None,
                 distance_variable: Optional[_builtins.str] = None,
                 optional: Optional[_builtins.bool] = None):
        """
        :param _builtins.str address: IP Address
        :param _builtins.str address_variable: Variable name
        :param _builtins.int distance: Administrative distance
                 - Range: `1`-`255`
                 - Default value: `1`
        :param _builtins.str distance_variable: Variable name
        :param _builtins.bool optional: Indicates if list item is considered optional.
        """
        if address is not None:
            pulumi.set(__self__, "address", address)
        if address_variable is not None:
            pulumi.set(__self__, "address_variable", address_variable)
        if distance is not None:
            pulumi.set(__self__, "distance", distance)
        if distance_variable is not None:
            pulumi.set(__self__, "distance_variable", distance_variable)
        if optional is not None:
            pulumi.set(__self__, "optional", optional)

    @_builtins.property
    @pulumi.getter
    def address(self) -> Optional[_builtins.str]:
        """
        IP Address
        """
        return pulumi.get(self, "address")

    @_builtins.property
    @pulumi.getter(name="addressVariable")
    def address_variable(self) -> Optional[_builtins.str]:
        """
        Variable name
        """
        return pulumi.get(self, "address_variable")

    @_builtins.property
    @pulumi.getter
    def distance(self) -> Optional[_builtins.int]:
        """
        Administrative distance
          - Range: `1`-`255`
          - Default value: `1`
        """
        return pulumi.get(self, "distance")

    @_builtins.property
    @pulumi.getter(name="distanceVariable")
    def distance_variable(self) -> Optional[_builtins.str]:
        """
        Variable name
        """
        return pulumi.get(self, "distance_variable")

    @_builtins.property
    @pulumi.getter
    def optional(self) -> Optional[_builtins.bool]:
        """
        Indicates if list item is considered optional.
        """
        return pulumi.get(self, "optional")


@pulumi.output_type
class CiscoVpnFeatureTemplateIpv4StaticRouteTrackNextHop(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "addressVariable":
            suggest = "address_variable"
        elif key == "distanceVariable":
            suggest = "distance_variable"
        elif key == "trackerVariable":
            suggest = "tracker_variable"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in CiscoVpnFeatureTemplateIpv4StaticRouteTrackNextHop. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        CiscoVpnFeatureTemplateIpv4StaticRouteTrackNextHop.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        CiscoVpnFeatureTemplateIpv4StaticRouteTrackNextHop.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 address: Optional[_builtins.str] = None,
                 address_variable: Optional[_builtins.str] = None,
                 distance: Optional[_builtins.int] = None,
                 distance_variable: Optional[_builtins.str] = None,
                 optional: Optional[_builtins.bool] = None,
                 tracker: Optional[_builtins.str] = None,
                 tracker_variable: Optional[_builtins.str] = None):
        """
        :param _builtins.str address: IP Address
        :param _builtins.str address_variable: Variable name
        :param _builtins.int distance: Administrative distance
                 - Range: `1`-`255`
                 - Default value: `1`
        :param _builtins.str distance_variable: Variable name
        :param _builtins.bool optional: Indicates if list item is considered optional.
        :param _builtins.str tracker: Static route tracker
        :param _builtins.str tracker_variable: Variable name
        """
        if address is not None:
            pulumi.set(__self__, "address", address)
        if address_variable is not None:
            pulumi.set(__self__, "address_variable", address_variable)
        if distance is not None:
            pulumi.set(__self__, "distance", distance)
        if distance_variable is not None:
            pulumi.set(__self__, "distance_variable", distance_variable)
        if optional is not None:
            pulumi.set(__self__, "optional", optional)
        if tracker is not None:
            pulumi.set(__self__, "tracker", tracker)
        if tracker_variable is not None:
            pulumi.set(__self__, "tracker_variable", tracker_variable)

    @_builtins.property
    @pulumi.getter
    def address(self) -> Optional[_builtins.str]:
        """
        IP Address
        """
        return pulumi.get(self, "address")

    @_builtins.property
    @pulumi.getter(name="addressVariable")
    def address_variable(self) -> Optional[_builtins.str]:
        """
        Variable name
        """
        return pulumi.get(self, "address_variable")

    @_builtins.property
    @pulumi.getter
    def distance(self) -> Optional[_builtins.int]:
        """
        Administrative distance
          - Range: `1`-`255`
          - Default value: `1`
        """
        return pulumi.get(self, "distance")

    @_builtins.property
    @pulumi.getter(name="distanceVariable")
    def distance_variable(self) -> Optional[_builtins.str]:
        """
        Variable name
        """
        return pulumi.get(self, "distance_variable")

    @_builtins.property
    @pulumi.getter
    def optional(self) -> Optional[_builtins.bool]:
        """
        Indicates if list item is considered optional.
        """
        return pulumi.get(self, "optional")

    @_builtins.property
    @pulumi.getter
    def tracker(self) -> Optional[_builtins.str]:
        """
        Static route tracker
        """
        return pulumi.get(self, "tracker")

    @_builtins.property
    @pulumi.getter(name="trackerVariable")
    def tracker_variable(self) -> Optional[_builtins.str]:
        """
        Variable name
        """
        return pulumi.get(self, "tracker_variable")


@pulumi.output_type
class CiscoVpnFeatureTemplateIpv4StaticServiceRoute(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "prefixVariable":
            suggest = "prefix_variable"
        elif key == "vpnId":
            suggest = "vpn_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in CiscoVpnFeatureTemplateIpv4StaticServiceRoute. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        CiscoVpnFeatureTemplateIpv4StaticServiceRoute.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        CiscoVpnFeatureTemplateIpv4StaticServiceRoute.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 optional: Optional[_builtins.bool] = None,
                 prefix: Optional[_builtins.str] = None,
                 prefix_variable: Optional[_builtins.str] = None,
                 service: Optional[_builtins.str] = None,
                 vpn_id: Optional[_builtins.int] = None):
        """
        :param _builtins.bool optional: Indicates if list item is considered optional.
        :param _builtins.str prefix: Prefix
        :param _builtins.str prefix_variable: Variable name
        :param _builtins.str service: Service
                 - Choices: `sig`
                 - Default value: `sig`
        :param _builtins.int vpn_id: Destination VPN to resolve the prefix
                 - Default value: `0`
        """
        if optional is not None:
            pulumi.set(__self__, "optional", optional)
        if prefix is not None:
            pulumi.set(__self__, "prefix", prefix)
        if prefix_variable is not None:
            pulumi.set(__self__, "prefix_variable", prefix_variable)
        if service is not None:
            pulumi.set(__self__, "service", service)
        if vpn_id is not None:
            pulumi.set(__self__, "vpn_id", vpn_id)

    @_builtins.property
    @pulumi.getter
    def optional(self) -> Optional[_builtins.bool]:
        """
        Indicates if list item is considered optional.
        """
        return pulumi.get(self, "optional")

    @_builtins.property
    @pulumi.getter
    def prefix(self) -> Optional[_builtins.str]:
        """
        Prefix
        """
        return pulumi.get(self, "prefix")

    @_builtins.property
    @pulumi.getter(name="prefixVariable")
    def prefix_variable(self) -> Optional[_builtins.str]:
        """
        Variable name
        """
        return pulumi.get(self, "prefix_variable")

    @_builtins.property
    @pulumi.getter
    def service(self) -> Optional[_builtins.str]:
        """
        Service
          - Choices: `sig`
          - Default value: `sig`
        """
        return pulumi.get(self, "service")

    @_builtins.property
    @pulumi.getter(name="vpnId")
    def vpn_id(self) -> Optional[_builtins.int]:
        """
        Destination VPN to resolve the prefix
          - Default value: `0`
        """
        return pulumi.get(self, "vpn_id")


@pulumi.output_type
class CiscoVpnFeatureTemplateIpv6StaticRoute(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "natVariable":
            suggest = "nat_variable"
        elif key == "nextHops":
            suggest = "next_hops"
        elif key == "null0Variable":
            suggest = "null0_variable"
        elif key == "prefixVariable":
            suggest = "prefix_variable"
        elif key == "vpnId":
            suggest = "vpn_id"
        elif key == "vpnIdVariable":
            suggest = "vpn_id_variable"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in CiscoVpnFeatureTemplateIpv6StaticRoute. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        CiscoVpnFeatureTemplateIpv6StaticRoute.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        CiscoVpnFeatureTemplateIpv6StaticRoute.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 nat: Optional[_builtins.str] = None,
                 nat_variable: Optional[_builtins.str] = None,
                 next_hops: Optional[Sequence['outputs.CiscoVpnFeatureTemplateIpv6StaticRouteNextHop']] = None,
                 null0: Optional[_builtins.bool] = None,
                 null0_variable: Optional[_builtins.str] = None,
                 optional: Optional[_builtins.bool] = None,
                 prefix: Optional[_builtins.str] = None,
                 prefix_variable: Optional[_builtins.str] = None,
                 vpn_id: Optional[_builtins.int] = None,
                 vpn_id_variable: Optional[_builtins.str] = None):
        """
        :param _builtins.str nat: NAT
                 - Choices: `NAT64`, `NAT66`
                 - Default value: `NAT64`
        :param _builtins.str nat_variable: Variable name
        :param Sequence['CiscoVpnFeatureTemplateIpv6StaticRouteNextHopArgs'] next_hops: IP gateway address
        :param _builtins.bool null0: null0
                 - Default value: `false`
        :param _builtins.str null0_variable: Variable name
        :param _builtins.bool optional: Indicates if list item is considered optional.
        :param _builtins.str prefix: Prefix
        :param _builtins.str prefix_variable: Variable name
        :param _builtins.int vpn_id: Destination VPN(!=0 or !=512) to resolve the prefix
                 - Default value: `0`
        :param _builtins.str vpn_id_variable: Variable name
        """
        if nat is not None:
            pulumi.set(__self__, "nat", nat)
        if nat_variable is not None:
            pulumi.set(__self__, "nat_variable", nat_variable)
        if next_hops is not None:
            pulumi.set(__self__, "next_hops", next_hops)
        if null0 is not None:
            pulumi.set(__self__, "null0", null0)
        if null0_variable is not None:
            pulumi.set(__self__, "null0_variable", null0_variable)
        if optional is not None:
            pulumi.set(__self__, "optional", optional)
        if prefix is not None:
            pulumi.set(__self__, "prefix", prefix)
        if prefix_variable is not None:
            pulumi.set(__self__, "prefix_variable", prefix_variable)
        if vpn_id is not None:
            pulumi.set(__self__, "vpn_id", vpn_id)
        if vpn_id_variable is not None:
            pulumi.set(__self__, "vpn_id_variable", vpn_id_variable)

    @_builtins.property
    @pulumi.getter
    def nat(self) -> Optional[_builtins.str]:
        """
        NAT
          - Choices: `NAT64`, `NAT66`
          - Default value: `NAT64`
        """
        return pulumi.get(self, "nat")

    @_builtins.property
    @pulumi.getter(name="natVariable")
    def nat_variable(self) -> Optional[_builtins.str]:
        """
        Variable name
        """
        return pulumi.get(self, "nat_variable")

    @_builtins.property
    @pulumi.getter(name="nextHops")
    def next_hops(self) -> Optional[Sequence['outputs.CiscoVpnFeatureTemplateIpv6StaticRouteNextHop']]:
        """
        IP gateway address
        """
        return pulumi.get(self, "next_hops")

    @_builtins.property
    @pulumi.getter
    def null0(self) -> Optional[_builtins.bool]:
        """
        null0
          - Default value: `false`
        """
        return pulumi.get(self, "null0")

    @_builtins.property
    @pulumi.getter(name="null0Variable")
    def null0_variable(self) -> Optional[_builtins.str]:
        """
        Variable name
        """
        return pulumi.get(self, "null0_variable")

    @_builtins.property
    @pulumi.getter
    def optional(self) -> Optional[_builtins.bool]:
        """
        Indicates if list item is considered optional.
        """
        return pulumi.get(self, "optional")

    @_builtins.property
    @pulumi.getter
    def prefix(self) -> Optional[_builtins.str]:
        """
        Prefix
        """
        return pulumi.get(self, "prefix")

    @_builtins.property
    @pulumi.getter(name="prefixVariable")
    def prefix_variable(self) -> Optional[_builtins.str]:
        """
        Variable name
        """
        return pulumi.get(self, "prefix_variable")

    @_builtins.property
    @pulumi.getter(name="vpnId")
    def vpn_id(self) -> Optional[_builtins.int]:
        """
        Destination VPN(!=0 or !=512) to resolve the prefix
          - Default value: `0`
        """
        return pulumi.get(self, "vpn_id")

    @_builtins.property
    @pulumi.getter(name="vpnIdVariable")
    def vpn_id_variable(self) -> Optional[_builtins.str]:
        """
        Variable name
        """
        return pulumi.get(self, "vpn_id_variable")


@pulumi.output_type
class CiscoVpnFeatureTemplateIpv6StaticRouteNextHop(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "addressVariable":
            suggest = "address_variable"
        elif key == "distanceVariable":
            suggest = "distance_variable"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in CiscoVpnFeatureTemplateIpv6StaticRouteNextHop. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        CiscoVpnFeatureTemplateIpv6StaticRouteNextHop.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        CiscoVpnFeatureTemplateIpv6StaticRouteNextHop.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 address: Optional[_builtins.str] = None,
                 address_variable: Optional[_builtins.str] = None,
                 distance: Optional[_builtins.int] = None,
                 distance_variable: Optional[_builtins.str] = None,
                 optional: Optional[_builtins.bool] = None):
        """
        :param _builtins.str address: IP Address
        :param _builtins.str address_variable: Variable name
        :param _builtins.int distance: Administrative distance
                 - Range: `1`-`255`
                 - Default value: `1`
        :param _builtins.str distance_variable: Variable name
        :param _builtins.bool optional: Indicates if list item is considered optional.
        """
        if address is not None:
            pulumi.set(__self__, "address", address)
        if address_variable is not None:
            pulumi.set(__self__, "address_variable", address_variable)
        if distance is not None:
            pulumi.set(__self__, "distance", distance)
        if distance_variable is not None:
            pulumi.set(__self__, "distance_variable", distance_variable)
        if optional is not None:
            pulumi.set(__self__, "optional", optional)

    @_builtins.property
    @pulumi.getter
    def address(self) -> Optional[_builtins.str]:
        """
        IP Address
        """
        return pulumi.get(self, "address")

    @_builtins.property
    @pulumi.getter(name="addressVariable")
    def address_variable(self) -> Optional[_builtins.str]:
        """
        Variable name
        """
        return pulumi.get(self, "address_variable")

    @_builtins.property
    @pulumi.getter
    def distance(self) -> Optional[_builtins.int]:
        """
        Administrative distance
          - Range: `1`-`255`
          - Default value: `1`
        """
        return pulumi.get(self, "distance")

    @_builtins.property
    @pulumi.getter(name="distanceVariable")
    def distance_variable(self) -> Optional[_builtins.str]:
        """
        Variable name
        """
        return pulumi.get(self, "distance_variable")

    @_builtins.property
    @pulumi.getter
    def optional(self) -> Optional[_builtins.bool]:
        """
        Indicates if list item is considered optional.
        """
        return pulumi.get(self, "optional")


@pulumi.output_type
class CiscoVpnFeatureTemplateNat64Pool(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "endAddress":
            suggest = "end_address"
        elif key == "endAddressVariable":
            suggest = "end_address_variable"
        elif key == "leakFromGlobal":
            suggest = "leak_from_global"
        elif key == "leakFromGlobalProtocol":
            suggest = "leak_from_global_protocol"
        elif key == "leakToGlobal":
            suggest = "leak_to_global"
        elif key == "overloadVariable":
            suggest = "overload_variable"
        elif key == "startAddress":
            suggest = "start_address"
        elif key == "startAddressVariable":
            suggest = "start_address_variable"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in CiscoVpnFeatureTemplateNat64Pool. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        CiscoVpnFeatureTemplateNat64Pool.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        CiscoVpnFeatureTemplateNat64Pool.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 end_address: Optional[_builtins.str] = None,
                 end_address_variable: Optional[_builtins.str] = None,
                 leak_from_global: Optional[_builtins.bool] = None,
                 leak_from_global_protocol: Optional[_builtins.str] = None,
                 leak_to_global: Optional[_builtins.bool] = None,
                 name: Optional[_builtins.str] = None,
                 optional: Optional[_builtins.bool] = None,
                 overload: Optional[_builtins.bool] = None,
                 overload_variable: Optional[_builtins.str] = None,
                 start_address: Optional[_builtins.str] = None,
                 start_address_variable: Optional[_builtins.str] = None):
        """
        :param _builtins.str end_address: Ending IP address of NAT pool range
        :param _builtins.str end_address_variable: Variable name
        :param _builtins.bool leak_from_global: Enable Route Leaking from Global VPN to this Service VPN
                 - Default value: `false`
        :param _builtins.str leak_from_global_protocol: Select protocol for route leaking
                 - Choices: `all`, `static`, `mobile`, `connected`, `rip`, `odr`
        :param _builtins.bool leak_to_global: Enable Route Leaking from this Service VPN to Global VPN
                 - Default value: `false`
        :param _builtins.str name: NAT64 Pool name
        :param _builtins.bool optional: Indicates if list item is considered optional.
        :param _builtins.bool overload: NAT 64 Overload Option
                 - Default value: `false`
        :param _builtins.str overload_variable: Variable name
        :param _builtins.str start_address: Starting IP address of NAT pool range
        :param _builtins.str start_address_variable: Variable name
        """
        if end_address is not None:
            pulumi.set(__self__, "end_address", end_address)
        if end_address_variable is not None:
            pulumi.set(__self__, "end_address_variable", end_address_variable)
        if leak_from_global is not None:
            pulumi.set(__self__, "leak_from_global", leak_from_global)
        if leak_from_global_protocol is not None:
            pulumi.set(__self__, "leak_from_global_protocol", leak_from_global_protocol)
        if leak_to_global is not None:
            pulumi.set(__self__, "leak_to_global", leak_to_global)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if optional is not None:
            pulumi.set(__self__, "optional", optional)
        if overload is not None:
            pulumi.set(__self__, "overload", overload)
        if overload_variable is not None:
            pulumi.set(__self__, "overload_variable", overload_variable)
        if start_address is not None:
            pulumi.set(__self__, "start_address", start_address)
        if start_address_variable is not None:
            pulumi.set(__self__, "start_address_variable", start_address_variable)

    @_builtins.property
    @pulumi.getter(name="endAddress")
    def end_address(self) -> Optional[_builtins.str]:
        """
        Ending IP address of NAT pool range
        """
        return pulumi.get(self, "end_address")

    @_builtins.property
    @pulumi.getter(name="endAddressVariable")
    def end_address_variable(self) -> Optional[_builtins.str]:
        """
        Variable name
        """
        return pulumi.get(self, "end_address_variable")

    @_builtins.property
    @pulumi.getter(name="leakFromGlobal")
    def leak_from_global(self) -> Optional[_builtins.bool]:
        """
        Enable Route Leaking from Global VPN to this Service VPN
          - Default value: `false`
        """
        return pulumi.get(self, "leak_from_global")

    @_builtins.property
    @pulumi.getter(name="leakFromGlobalProtocol")
    def leak_from_global_protocol(self) -> Optional[_builtins.str]:
        """
        Select protocol for route leaking
          - Choices: `all`, `static`, `mobile`, `connected`, `rip`, `odr`
        """
        return pulumi.get(self, "leak_from_global_protocol")

    @_builtins.property
    @pulumi.getter(name="leakToGlobal")
    def leak_to_global(self) -> Optional[_builtins.bool]:
        """
        Enable Route Leaking from this Service VPN to Global VPN
          - Default value: `false`
        """
        return pulumi.get(self, "leak_to_global")

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[_builtins.str]:
        """
        NAT64 Pool name
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def optional(self) -> Optional[_builtins.bool]:
        """
        Indicates if list item is considered optional.
        """
        return pulumi.get(self, "optional")

    @_builtins.property
    @pulumi.getter
    def overload(self) -> Optional[_builtins.bool]:
        """
        NAT 64 Overload Option
          - Default value: `false`
        """
        return pulumi.get(self, "overload")

    @_builtins.property
    @pulumi.getter(name="overloadVariable")
    def overload_variable(self) -> Optional[_builtins.str]:
        """
        Variable name
        """
        return pulumi.get(self, "overload_variable")

    @_builtins.property
    @pulumi.getter(name="startAddress")
    def start_address(self) -> Optional[_builtins.str]:
        """
        Starting IP address of NAT pool range
        """
        return pulumi.get(self, "start_address")

    @_builtins.property
    @pulumi.getter(name="startAddressVariable")
    def start_address_variable(self) -> Optional[_builtins.str]:
        """
        Variable name
        """
        return pulumi.get(self, "start_address_variable")


@pulumi.output_type
class CiscoVpnFeatureTemplateNatPool(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "directionVariable":
            suggest = "direction_variable"
        elif key == "nameVariable":
            suggest = "name_variable"
        elif key == "overloadVariable":
            suggest = "overload_variable"
        elif key == "prefixLength":
            suggest = "prefix_length"
        elif key == "prefixLengthVariable":
            suggest = "prefix_length_variable"
        elif key == "rangeEnd":
            suggest = "range_end"
        elif key == "rangeEndVariable":
            suggest = "range_end_variable"
        elif key == "rangeStart":
            suggest = "range_start"
        elif key == "rangeStartVariable":
            suggest = "range_start_variable"
        elif key == "trackerId":
            suggest = "tracker_id"
        elif key == "trackerIdVariable":
            suggest = "tracker_id_variable"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in CiscoVpnFeatureTemplateNatPool. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        CiscoVpnFeatureTemplateNatPool.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        CiscoVpnFeatureTemplateNatPool.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 direction: Optional[_builtins.str] = None,
                 direction_variable: Optional[_builtins.str] = None,
                 name: Optional[_builtins.int] = None,
                 name_variable: Optional[_builtins.str] = None,
                 optional: Optional[_builtins.bool] = None,
                 overload: Optional[_builtins.bool] = None,
                 overload_variable: Optional[_builtins.str] = None,
                 prefix_length: Optional[_builtins.int] = None,
                 prefix_length_variable: Optional[_builtins.str] = None,
                 range_end: Optional[_builtins.str] = None,
                 range_end_variable: Optional[_builtins.str] = None,
                 range_start: Optional[_builtins.str] = None,
                 range_start_variable: Optional[_builtins.str] = None,
                 tracker_id: Optional[_builtins.int] = None,
                 tracker_id_variable: Optional[_builtins.str] = None):
        """
        :param _builtins.str direction: Direction of NAT translation
                 - Choices: `inside`, `outside`
        :param _builtins.str direction_variable: Variable name
        :param _builtins.int name: NAT Pool Name, natpool1..31
                 - Range: `1`-`31`
        :param _builtins.str name_variable: Variable name
        :param _builtins.bool optional: Indicates if list item is considered optional.
        :param _builtins.bool overload: Enable port translation(PAT)
                 - Default value: `true`
        :param _builtins.str overload_variable: Variable name
        :param _builtins.int prefix_length: Ending IP address of NAT Pool Prefix Length
                 - Range: `1`-`32`
        :param _builtins.str prefix_length_variable: Variable name
        :param _builtins.str range_end: Ending IP address of NAT pool range
        :param _builtins.str range_end_variable: Variable name
        :param _builtins.str range_start: Starting IP address of NAT pool range
        :param _builtins.str range_start_variable: Variable name
        :param _builtins.int tracker_id: Add Object/Object Group Tracker
                 - Range: `1`-`1000`
        :param _builtins.str tracker_id_variable: Variable name
        """
        if direction is not None:
            pulumi.set(__self__, "direction", direction)
        if direction_variable is not None:
            pulumi.set(__self__, "direction_variable", direction_variable)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if name_variable is not None:
            pulumi.set(__self__, "name_variable", name_variable)
        if optional is not None:
            pulumi.set(__self__, "optional", optional)
        if overload is not None:
            pulumi.set(__self__, "overload", overload)
        if overload_variable is not None:
            pulumi.set(__self__, "overload_variable", overload_variable)
        if prefix_length is not None:
            pulumi.set(__self__, "prefix_length", prefix_length)
        if prefix_length_variable is not None:
            pulumi.set(__self__, "prefix_length_variable", prefix_length_variable)
        if range_end is not None:
            pulumi.set(__self__, "range_end", range_end)
        if range_end_variable is not None:
            pulumi.set(__self__, "range_end_variable", range_end_variable)
        if range_start is not None:
            pulumi.set(__self__, "range_start", range_start)
        if range_start_variable is not None:
            pulumi.set(__self__, "range_start_variable", range_start_variable)
        if tracker_id is not None:
            pulumi.set(__self__, "tracker_id", tracker_id)
        if tracker_id_variable is not None:
            pulumi.set(__self__, "tracker_id_variable", tracker_id_variable)

    @_builtins.property
    @pulumi.getter
    def direction(self) -> Optional[_builtins.str]:
        """
        Direction of NAT translation
          - Choices: `inside`, `outside`
        """
        return pulumi.get(self, "direction")

    @_builtins.property
    @pulumi.getter(name="directionVariable")
    def direction_variable(self) -> Optional[_builtins.str]:
        """
        Variable name
        """
        return pulumi.get(self, "direction_variable")

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[_builtins.int]:
        """
        NAT Pool Name, natpool1..31
          - Range: `1`-`31`
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter(name="nameVariable")
    def name_variable(self) -> Optional[_builtins.str]:
        """
        Variable name
        """
        return pulumi.get(self, "name_variable")

    @_builtins.property
    @pulumi.getter
    def optional(self) -> Optional[_builtins.bool]:
        """
        Indicates if list item is considered optional.
        """
        return pulumi.get(self, "optional")

    @_builtins.property
    @pulumi.getter
    def overload(self) -> Optional[_builtins.bool]:
        """
        Enable port translation(PAT)
          - Default value: `true`
        """
        return pulumi.get(self, "overload")

    @_builtins.property
    @pulumi.getter(name="overloadVariable")
    def overload_variable(self) -> Optional[_builtins.str]:
        """
        Variable name
        """
        return pulumi.get(self, "overload_variable")

    @_builtins.property
    @pulumi.getter(name="prefixLength")
    def prefix_length(self) -> Optional[_builtins.int]:
        """
        Ending IP address of NAT Pool Prefix Length
          - Range: `1`-`32`
        """
        return pulumi.get(self, "prefix_length")

    @_builtins.property
    @pulumi.getter(name="prefixLengthVariable")
    def prefix_length_variable(self) -> Optional[_builtins.str]:
        """
        Variable name
        """
        return pulumi.get(self, "prefix_length_variable")

    @_builtins.property
    @pulumi.getter(name="rangeEnd")
    def range_end(self) -> Optional[_builtins.str]:
        """
        Ending IP address of NAT pool range
        """
        return pulumi.get(self, "range_end")

    @_builtins.property
    @pulumi.getter(name="rangeEndVariable")
    def range_end_variable(self) -> Optional[_builtins.str]:
        """
        Variable name
        """
        return pulumi.get(self, "range_end_variable")

    @_builtins.property
    @pulumi.getter(name="rangeStart")
    def range_start(self) -> Optional[_builtins.str]:
        """
        Starting IP address of NAT pool range
        """
        return pulumi.get(self, "range_start")

    @_builtins.property
    @pulumi.getter(name="rangeStartVariable")
    def range_start_variable(self) -> Optional[_builtins.str]:
        """
        Variable name
        """
        return pulumi.get(self, "range_start_variable")

    @_builtins.property
    @pulumi.getter(name="trackerId")
    def tracker_id(self) -> Optional[_builtins.int]:
        """
        Add Object/Object Group Tracker
          - Range: `1`-`1000`
        """
        return pulumi.get(self, "tracker_id")

    @_builtins.property
    @pulumi.getter(name="trackerIdVariable")
    def tracker_id_variable(self) -> Optional[_builtins.str]:
        """
        Variable name
        """
        return pulumi.get(self, "tracker_id_variable")


@pulumi.output_type
class CiscoVpnFeatureTemplateOmpAdvertiseIpv4Route(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "protocolSubTypeVariable":
            suggest = "protocol_sub_type_variable"
        elif key == "protocolSubTypes":
            suggest = "protocol_sub_types"
        elif key == "protocolVariable":
            suggest = "protocol_variable"
        elif key == "routePolicy":
            suggest = "route_policy"
        elif key == "routePolicyVariable":
            suggest = "route_policy_variable"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in CiscoVpnFeatureTemplateOmpAdvertiseIpv4Route. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        CiscoVpnFeatureTemplateOmpAdvertiseIpv4Route.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        CiscoVpnFeatureTemplateOmpAdvertiseIpv4Route.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 optional: Optional[_builtins.bool] = None,
                 prefixes: Optional[Sequence['outputs.CiscoVpnFeatureTemplateOmpAdvertiseIpv4RoutePrefix']] = None,
                 protocol: Optional[_builtins.str] = None,
                 protocol_sub_type_variable: Optional[_builtins.str] = None,
                 protocol_sub_types: Optional[Sequence[_builtins.str]] = None,
                 protocol_variable: Optional[_builtins.str] = None,
                 route_policy: Optional[_builtins.str] = None,
                 route_policy_variable: Optional[_builtins.str] = None):
        """
        :param _builtins.bool optional: Indicates if list item is considered optional.
        :param _builtins.str protocol: Advertised routes protocol
                 - Choices: `bgp`, `ospf`, `ospfv3`, `connected`, `static`, `network`, `aggregate`, `eigrp`, `lisp`, `isis`
        :param _builtins.str protocol_sub_type_variable: Variable name
        :param _builtins.str protocol_variable: Variable name
        :param _builtins.str route_policy: Set Route Policy to OMP
        :param _builtins.str route_policy_variable: Variable name
        """
        if optional is not None:
            pulumi.set(__self__, "optional", optional)
        if prefixes is not None:
            pulumi.set(__self__, "prefixes", prefixes)
        if protocol is not None:
            pulumi.set(__self__, "protocol", protocol)
        if protocol_sub_type_variable is not None:
            pulumi.set(__self__, "protocol_sub_type_variable", protocol_sub_type_variable)
        if protocol_sub_types is not None:
            pulumi.set(__self__, "protocol_sub_types", protocol_sub_types)
        if protocol_variable is not None:
            pulumi.set(__self__, "protocol_variable", protocol_variable)
        if route_policy is not None:
            pulumi.set(__self__, "route_policy", route_policy)
        if route_policy_variable is not None:
            pulumi.set(__self__, "route_policy_variable", route_policy_variable)

    @_builtins.property
    @pulumi.getter
    def optional(self) -> Optional[_builtins.bool]:
        """
        Indicates if list item is considered optional.
        """
        return pulumi.get(self, "optional")

    @_builtins.property
    @pulumi.getter
    def prefixes(self) -> Optional[Sequence['outputs.CiscoVpnFeatureTemplateOmpAdvertiseIpv4RoutePrefix']]:
        return pulumi.get(self, "prefixes")

    @_builtins.property
    @pulumi.getter
    def protocol(self) -> Optional[_builtins.str]:
        """
        Advertised routes protocol
          - Choices: `bgp`, `ospf`, `ospfv3`, `connected`, `static`, `network`, `aggregate`, `eigrp`, `lisp`, `isis`
        """
        return pulumi.get(self, "protocol")

    @_builtins.property
    @pulumi.getter(name="protocolSubTypeVariable")
    def protocol_sub_type_variable(self) -> Optional[_builtins.str]:
        """
        Variable name
        """
        return pulumi.get(self, "protocol_sub_type_variable")

    @_builtins.property
    @pulumi.getter(name="protocolSubTypes")
    def protocol_sub_types(self) -> Optional[Sequence[_builtins.str]]:
        return pulumi.get(self, "protocol_sub_types")

    @_builtins.property
    @pulumi.getter(name="protocolVariable")
    def protocol_variable(self) -> Optional[_builtins.str]:
        """
        Variable name
        """
        return pulumi.get(self, "protocol_variable")

    @_builtins.property
    @pulumi.getter(name="routePolicy")
    def route_policy(self) -> Optional[_builtins.str]:
        """
        Set Route Policy to OMP
        """
        return pulumi.get(self, "route_policy")

    @_builtins.property
    @pulumi.getter(name="routePolicyVariable")
    def route_policy_variable(self) -> Optional[_builtins.str]:
        """
        Variable name
        """
        return pulumi.get(self, "route_policy_variable")


@pulumi.output_type
class CiscoVpnFeatureTemplateOmpAdvertiseIpv4RoutePrefix(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "aggregateOnly":
            suggest = "aggregate_only"
        elif key == "aggregateOnlyVariable":
            suggest = "aggregate_only_variable"
        elif key == "prefixEntry":
            suggest = "prefix_entry"
        elif key == "prefixEntryVariable":
            suggest = "prefix_entry_variable"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in CiscoVpnFeatureTemplateOmpAdvertiseIpv4RoutePrefix. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        CiscoVpnFeatureTemplateOmpAdvertiseIpv4RoutePrefix.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        CiscoVpnFeatureTemplateOmpAdvertiseIpv4RoutePrefix.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 aggregate_only: Optional[_builtins.bool] = None,
                 aggregate_only_variable: Optional[_builtins.str] = None,
                 optional: Optional[_builtins.bool] = None,
                 prefix_entry: Optional[_builtins.str] = None,
                 prefix_entry_variable: Optional[_builtins.str] = None):
        """
        :param _builtins.bool aggregate_only: Aggregate Only
                 - Default value: `false`
        :param _builtins.str aggregate_only_variable: Variable name
        :param _builtins.bool optional: Indicates if list item is considered optional.
        :param _builtins.str prefix_entry: Prefix
        :param _builtins.str prefix_entry_variable: Variable name
        """
        if aggregate_only is not None:
            pulumi.set(__self__, "aggregate_only", aggregate_only)
        if aggregate_only_variable is not None:
            pulumi.set(__self__, "aggregate_only_variable", aggregate_only_variable)
        if optional is not None:
            pulumi.set(__self__, "optional", optional)
        if prefix_entry is not None:
            pulumi.set(__self__, "prefix_entry", prefix_entry)
        if prefix_entry_variable is not None:
            pulumi.set(__self__, "prefix_entry_variable", prefix_entry_variable)

    @_builtins.property
    @pulumi.getter(name="aggregateOnly")
    def aggregate_only(self) -> Optional[_builtins.bool]:
        """
        Aggregate Only
          - Default value: `false`
        """
        return pulumi.get(self, "aggregate_only")

    @_builtins.property
    @pulumi.getter(name="aggregateOnlyVariable")
    def aggregate_only_variable(self) -> Optional[_builtins.str]:
        """
        Variable name
        """
        return pulumi.get(self, "aggregate_only_variable")

    @_builtins.property
    @pulumi.getter
    def optional(self) -> Optional[_builtins.bool]:
        """
        Indicates if list item is considered optional.
        """
        return pulumi.get(self, "optional")

    @_builtins.property
    @pulumi.getter(name="prefixEntry")
    def prefix_entry(self) -> Optional[_builtins.str]:
        """
        Prefix
        """
        return pulumi.get(self, "prefix_entry")

    @_builtins.property
    @pulumi.getter(name="prefixEntryVariable")
    def prefix_entry_variable(self) -> Optional[_builtins.str]:
        """
        Variable name
        """
        return pulumi.get(self, "prefix_entry_variable")


@pulumi.output_type
class CiscoVpnFeatureTemplateOmpAdvertiseIpv6Route(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "protocolSubTypeVariable":
            suggest = "protocol_sub_type_variable"
        elif key == "protocolSubTypes":
            suggest = "protocol_sub_types"
        elif key == "protocolVariable":
            suggest = "protocol_variable"
        elif key == "routePolicy":
            suggest = "route_policy"
        elif key == "routePolicyVariable":
            suggest = "route_policy_variable"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in CiscoVpnFeatureTemplateOmpAdvertiseIpv6Route. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        CiscoVpnFeatureTemplateOmpAdvertiseIpv6Route.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        CiscoVpnFeatureTemplateOmpAdvertiseIpv6Route.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 optional: Optional[_builtins.bool] = None,
                 prefixes: Optional[Sequence['outputs.CiscoVpnFeatureTemplateOmpAdvertiseIpv6RoutePrefix']] = None,
                 protocol: Optional[_builtins.str] = None,
                 protocol_sub_type_variable: Optional[_builtins.str] = None,
                 protocol_sub_types: Optional[Sequence[_builtins.str]] = None,
                 protocol_variable: Optional[_builtins.str] = None,
                 route_policy: Optional[_builtins.str] = None,
                 route_policy_variable: Optional[_builtins.str] = None):
        """
        :param _builtins.bool optional: Indicates if list item is considered optional.
        :param _builtins.str protocol: Advertised routes protocol
                 - Choices: `bgp`, `ospf`, `connected`, `static`, `network`, `aggregate`
        :param _builtins.str protocol_sub_type_variable: Variable name
        :param _builtins.str protocol_variable: Variable name
        :param _builtins.str route_policy_variable: Variable name
        """
        if optional is not None:
            pulumi.set(__self__, "optional", optional)
        if prefixes is not None:
            pulumi.set(__self__, "prefixes", prefixes)
        if protocol is not None:
            pulumi.set(__self__, "protocol", protocol)
        if protocol_sub_type_variable is not None:
            pulumi.set(__self__, "protocol_sub_type_variable", protocol_sub_type_variable)
        if protocol_sub_types is not None:
            pulumi.set(__self__, "protocol_sub_types", protocol_sub_types)
        if protocol_variable is not None:
            pulumi.set(__self__, "protocol_variable", protocol_variable)
        if route_policy is not None:
            pulumi.set(__self__, "route_policy", route_policy)
        if route_policy_variable is not None:
            pulumi.set(__self__, "route_policy_variable", route_policy_variable)

    @_builtins.property
    @pulumi.getter
    def optional(self) -> Optional[_builtins.bool]:
        """
        Indicates if list item is considered optional.
        """
        return pulumi.get(self, "optional")

    @_builtins.property
    @pulumi.getter
    def prefixes(self) -> Optional[Sequence['outputs.CiscoVpnFeatureTemplateOmpAdvertiseIpv6RoutePrefix']]:
        return pulumi.get(self, "prefixes")

    @_builtins.property
    @pulumi.getter
    def protocol(self) -> Optional[_builtins.str]:
        """
        Advertised routes protocol
          - Choices: `bgp`, `ospf`, `connected`, `static`, `network`, `aggregate`
        """
        return pulumi.get(self, "protocol")

    @_builtins.property
    @pulumi.getter(name="protocolSubTypeVariable")
    def protocol_sub_type_variable(self) -> Optional[_builtins.str]:
        """
        Variable name
        """
        return pulumi.get(self, "protocol_sub_type_variable")

    @_builtins.property
    @pulumi.getter(name="protocolSubTypes")
    def protocol_sub_types(self) -> Optional[Sequence[_builtins.str]]:
        return pulumi.get(self, "protocol_sub_types")

    @_builtins.property
    @pulumi.getter(name="protocolVariable")
    def protocol_variable(self) -> Optional[_builtins.str]:
        """
        Variable name
        """
        return pulumi.get(self, "protocol_variable")

    @_builtins.property
    @pulumi.getter(name="routePolicy")
    def route_policy(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "route_policy")

    @_builtins.property
    @pulumi.getter(name="routePolicyVariable")
    def route_policy_variable(self) -> Optional[_builtins.str]:
        """
        Variable name
        """
        return pulumi.get(self, "route_policy_variable")


@pulumi.output_type
class CiscoVpnFeatureTemplateOmpAdvertiseIpv6RoutePrefix(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "aggregateOnly":
            suggest = "aggregate_only"
        elif key == "aggregateOnlyVariable":
            suggest = "aggregate_only_variable"
        elif key == "prefixEntry":
            suggest = "prefix_entry"
        elif key == "prefixEntryVariable":
            suggest = "prefix_entry_variable"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in CiscoVpnFeatureTemplateOmpAdvertiseIpv6RoutePrefix. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        CiscoVpnFeatureTemplateOmpAdvertiseIpv6RoutePrefix.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        CiscoVpnFeatureTemplateOmpAdvertiseIpv6RoutePrefix.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 aggregate_only: Optional[_builtins.bool] = None,
                 aggregate_only_variable: Optional[_builtins.str] = None,
                 optional: Optional[_builtins.bool] = None,
                 prefix_entry: Optional[_builtins.str] = None,
                 prefix_entry_variable: Optional[_builtins.str] = None):
        """
        :param _builtins.bool aggregate_only: Aggregate Only
                 - Default value: `false`
        :param _builtins.str aggregate_only_variable: Variable name
        :param _builtins.bool optional: Indicates if list item is considered optional.
        :param _builtins.str prefix_entry: Prefix
        :param _builtins.str prefix_entry_variable: Variable name
        """
        if aggregate_only is not None:
            pulumi.set(__self__, "aggregate_only", aggregate_only)
        if aggregate_only_variable is not None:
            pulumi.set(__self__, "aggregate_only_variable", aggregate_only_variable)
        if optional is not None:
            pulumi.set(__self__, "optional", optional)
        if prefix_entry is not None:
            pulumi.set(__self__, "prefix_entry", prefix_entry)
        if prefix_entry_variable is not None:
            pulumi.set(__self__, "prefix_entry_variable", prefix_entry_variable)

    @_builtins.property
    @pulumi.getter(name="aggregateOnly")
    def aggregate_only(self) -> Optional[_builtins.bool]:
        """
        Aggregate Only
          - Default value: `false`
        """
        return pulumi.get(self, "aggregate_only")

    @_builtins.property
    @pulumi.getter(name="aggregateOnlyVariable")
    def aggregate_only_variable(self) -> Optional[_builtins.str]:
        """
        Variable name
        """
        return pulumi.get(self, "aggregate_only_variable")

    @_builtins.property
    @pulumi.getter
    def optional(self) -> Optional[_builtins.bool]:
        """
        Indicates if list item is considered optional.
        """
        return pulumi.get(self, "optional")

    @_builtins.property
    @pulumi.getter(name="prefixEntry")
    def prefix_entry(self) -> Optional[_builtins.str]:
        """
        Prefix
        """
        return pulumi.get(self, "prefix_entry")

    @_builtins.property
    @pulumi.getter(name="prefixEntryVariable")
    def prefix_entry_variable(self) -> Optional[_builtins.str]:
        """
        Variable name
        """
        return pulumi.get(self, "prefix_entry_variable")


@pulumi.output_type
class CiscoVpnFeatureTemplatePortForwardRule(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "poolName":
            suggest = "pool_name"
        elif key == "poolNameVariable":
            suggest = "pool_name_variable"
        elif key == "protocolVariable":
            suggest = "protocol_variable"
        elif key == "sourceIp":
            suggest = "source_ip"
        elif key == "sourceIpVariable":
            suggest = "source_ip_variable"
        elif key == "sourcePort":
            suggest = "source_port"
        elif key == "sourcePortVariable":
            suggest = "source_port_variable"
        elif key == "translateIp":
            suggest = "translate_ip"
        elif key == "translateIpVariable":
            suggest = "translate_ip_variable"
        elif key == "translatePort":
            suggest = "translate_port"
        elif key == "translatePortVariable":
            suggest = "translate_port_variable"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in CiscoVpnFeatureTemplatePortForwardRule. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        CiscoVpnFeatureTemplatePortForwardRule.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        CiscoVpnFeatureTemplatePortForwardRule.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 optional: Optional[_builtins.bool] = None,
                 pool_name: Optional[_builtins.int] = None,
                 pool_name_variable: Optional[_builtins.str] = None,
                 protocol: Optional[_builtins.str] = None,
                 protocol_variable: Optional[_builtins.str] = None,
                 source_ip: Optional[_builtins.str] = None,
                 source_ip_variable: Optional[_builtins.str] = None,
                 source_port: Optional[_builtins.int] = None,
                 source_port_variable: Optional[_builtins.str] = None,
                 translate_ip: Optional[_builtins.str] = None,
                 translate_ip_variable: Optional[_builtins.str] = None,
                 translate_port: Optional[_builtins.int] = None,
                 translate_port_variable: Optional[_builtins.str] = None):
        """
        :param _builtins.bool optional: Indicates if list item is considered optional.
        :param _builtins.int pool_name: NAT Pool Name, natpool1..31
        :param _builtins.str pool_name_variable: Variable name
        :param _builtins.str protocol: Protocol
                 - Choices: `tcp`, `udp`
        :param _builtins.str protocol_variable: Variable name
        :param _builtins.str source_ip: Source IP address to be translated
        :param _builtins.str source_ip_variable: Variable name
        :param _builtins.int source_port: Source Port
                 - Default value: `0`
        :param _builtins.str source_port_variable: Variable name
        :param _builtins.str translate_ip: Statically translated source IP address
        :param _builtins.str translate_ip_variable: Variable name
        :param _builtins.int translate_port: Translate Port
                 - Default value: `0`
        :param _builtins.str translate_port_variable: Variable name
        """
        if optional is not None:
            pulumi.set(__self__, "optional", optional)
        if pool_name is not None:
            pulumi.set(__self__, "pool_name", pool_name)
        if pool_name_variable is not None:
            pulumi.set(__self__, "pool_name_variable", pool_name_variable)
        if protocol is not None:
            pulumi.set(__self__, "protocol", protocol)
        if protocol_variable is not None:
            pulumi.set(__self__, "protocol_variable", protocol_variable)
        if source_ip is not None:
            pulumi.set(__self__, "source_ip", source_ip)
        if source_ip_variable is not None:
            pulumi.set(__self__, "source_ip_variable", source_ip_variable)
        if source_port is not None:
            pulumi.set(__self__, "source_port", source_port)
        if source_port_variable is not None:
            pulumi.set(__self__, "source_port_variable", source_port_variable)
        if translate_ip is not None:
            pulumi.set(__self__, "translate_ip", translate_ip)
        if translate_ip_variable is not None:
            pulumi.set(__self__, "translate_ip_variable", translate_ip_variable)
        if translate_port is not None:
            pulumi.set(__self__, "translate_port", translate_port)
        if translate_port_variable is not None:
            pulumi.set(__self__, "translate_port_variable", translate_port_variable)

    @_builtins.property
    @pulumi.getter
    def optional(self) -> Optional[_builtins.bool]:
        """
        Indicates if list item is considered optional.
        """
        return pulumi.get(self, "optional")

    @_builtins.property
    @pulumi.getter(name="poolName")
    def pool_name(self) -> Optional[_builtins.int]:
        """
        NAT Pool Name, natpool1..31
        """
        return pulumi.get(self, "pool_name")

    @_builtins.property
    @pulumi.getter(name="poolNameVariable")
    def pool_name_variable(self) -> Optional[_builtins.str]:
        """
        Variable name
        """
        return pulumi.get(self, "pool_name_variable")

    @_builtins.property
    @pulumi.getter
    def protocol(self) -> Optional[_builtins.str]:
        """
        Protocol
          - Choices: `tcp`, `udp`
        """
        return pulumi.get(self, "protocol")

    @_builtins.property
    @pulumi.getter(name="protocolVariable")
    def protocol_variable(self) -> Optional[_builtins.str]:
        """
        Variable name
        """
        return pulumi.get(self, "protocol_variable")

    @_builtins.property
    @pulumi.getter(name="sourceIp")
    def source_ip(self) -> Optional[_builtins.str]:
        """
        Source IP address to be translated
        """
        return pulumi.get(self, "source_ip")

    @_builtins.property
    @pulumi.getter(name="sourceIpVariable")
    def source_ip_variable(self) -> Optional[_builtins.str]:
        """
        Variable name
        """
        return pulumi.get(self, "source_ip_variable")

    @_builtins.property
    @pulumi.getter(name="sourcePort")
    def source_port(self) -> Optional[_builtins.int]:
        """
        Source Port
          - Default value: `0`
        """
        return pulumi.get(self, "source_port")

    @_builtins.property
    @pulumi.getter(name="sourcePortVariable")
    def source_port_variable(self) -> Optional[_builtins.str]:
        """
        Variable name
        """
        return pulumi.get(self, "source_port_variable")

    @_builtins.property
    @pulumi.getter(name="translateIp")
    def translate_ip(self) -> Optional[_builtins.str]:
        """
        Statically translated source IP address
        """
        return pulumi.get(self, "translate_ip")

    @_builtins.property
    @pulumi.getter(name="translateIpVariable")
    def translate_ip_variable(self) -> Optional[_builtins.str]:
        """
        Variable name
        """
        return pulumi.get(self, "translate_ip_variable")

    @_builtins.property
    @pulumi.getter(name="translatePort")
    def translate_port(self) -> Optional[_builtins.int]:
        """
        Translate Port
          - Default value: `0`
        """
        return pulumi.get(self, "translate_port")

    @_builtins.property
    @pulumi.getter(name="translatePortVariable")
    def translate_port_variable(self) -> Optional[_builtins.str]:
        """
        Variable name
        """
        return pulumi.get(self, "translate_port_variable")


@pulumi.output_type
class CiscoVpnFeatureTemplateRouteGlobalExport(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "protocolSubTypeVariable":
            suggest = "protocol_sub_type_variable"
        elif key == "protocolSubTypes":
            suggest = "protocol_sub_types"
        elif key == "protocolVariable":
            suggest = "protocol_variable"
        elif key == "routePolicy":
            suggest = "route_policy"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in CiscoVpnFeatureTemplateRouteGlobalExport. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        CiscoVpnFeatureTemplateRouteGlobalExport.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        CiscoVpnFeatureTemplateRouteGlobalExport.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 optional: Optional[_builtins.bool] = None,
                 protocol: Optional[_builtins.str] = None,
                 protocol_sub_type_variable: Optional[_builtins.str] = None,
                 protocol_sub_types: Optional[Sequence[_builtins.str]] = None,
                 protocol_variable: Optional[_builtins.str] = None,
                 redistributes: Optional[Sequence['outputs.CiscoVpnFeatureTemplateRouteGlobalExportRedistribute']] = None,
                 route_policy: Optional[_builtins.str] = None):
        """
        :param _builtins.bool optional: Indicates if list item is considered optional.
        :param _builtins.str protocol: Select a Route Protocol to enable route leaking from this Service VPN to Global VPN
                 - Choices: `static`, `connected`, `bgp`, `eigrp`, `ospf`
        :param _builtins.str protocol_sub_type_variable: Variable name
        :param Sequence[_builtins.str] protocol_sub_types: - Default value: `external`
        :param _builtins.str protocol_variable: Variable name
        :param Sequence['CiscoVpnFeatureTemplateRouteGlobalExportRedistributeArgs'] redistributes: Enable redistribution of replicated route protocol
        :param _builtins.str route_policy: Select a Route Policy to enable route leaking from this Service VPN to Global VPN
        """
        if optional is not None:
            pulumi.set(__self__, "optional", optional)
        if protocol is not None:
            pulumi.set(__self__, "protocol", protocol)
        if protocol_sub_type_variable is not None:
            pulumi.set(__self__, "protocol_sub_type_variable", protocol_sub_type_variable)
        if protocol_sub_types is not None:
            pulumi.set(__self__, "protocol_sub_types", protocol_sub_types)
        if protocol_variable is not None:
            pulumi.set(__self__, "protocol_variable", protocol_variable)
        if redistributes is not None:
            pulumi.set(__self__, "redistributes", redistributes)
        if route_policy is not None:
            pulumi.set(__self__, "route_policy", route_policy)

    @_builtins.property
    @pulumi.getter
    def optional(self) -> Optional[_builtins.bool]:
        """
        Indicates if list item is considered optional.
        """
        return pulumi.get(self, "optional")

    @_builtins.property
    @pulumi.getter
    def protocol(self) -> Optional[_builtins.str]:
        """
        Select a Route Protocol to enable route leaking from this Service VPN to Global VPN
          - Choices: `static`, `connected`, `bgp`, `eigrp`, `ospf`
        """
        return pulumi.get(self, "protocol")

    @_builtins.property
    @pulumi.getter(name="protocolSubTypeVariable")
    def protocol_sub_type_variable(self) -> Optional[_builtins.str]:
        """
        Variable name
        """
        return pulumi.get(self, "protocol_sub_type_variable")

    @_builtins.property
    @pulumi.getter(name="protocolSubTypes")
    def protocol_sub_types(self) -> Optional[Sequence[_builtins.str]]:
        """
        - Default value: `external`
        """
        return pulumi.get(self, "protocol_sub_types")

    @_builtins.property
    @pulumi.getter(name="protocolVariable")
    def protocol_variable(self) -> Optional[_builtins.str]:
        """
        Variable name
        """
        return pulumi.get(self, "protocol_variable")

    @_builtins.property
    @pulumi.getter
    def redistributes(self) -> Optional[Sequence['outputs.CiscoVpnFeatureTemplateRouteGlobalExportRedistribute']]:
        """
        Enable redistribution of replicated route protocol
        """
        return pulumi.get(self, "redistributes")

    @_builtins.property
    @pulumi.getter(name="routePolicy")
    def route_policy(self) -> Optional[_builtins.str]:
        """
        Select a Route Policy to enable route leaking from this Service VPN to Global VPN
        """
        return pulumi.get(self, "route_policy")


@pulumi.output_type
class CiscoVpnFeatureTemplateRouteGlobalExportRedistribute(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "protocolVariable":
            suggest = "protocol_variable"
        elif key == "routePolicy":
            suggest = "route_policy"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in CiscoVpnFeatureTemplateRouteGlobalExportRedistribute. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        CiscoVpnFeatureTemplateRouteGlobalExportRedistribute.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        CiscoVpnFeatureTemplateRouteGlobalExportRedistribute.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 optional: Optional[_builtins.bool] = None,
                 protocol: Optional[_builtins.str] = None,
                 protocol_variable: Optional[_builtins.str] = None,
                 route_policy: Optional[_builtins.str] = None):
        """
        :param _builtins.bool optional: Indicates if list item is considered optional.
        :param _builtins.str protocol: Select a Route Protocol to enable redistribution
                 - Choices: `bgp`, `ospf`
        :param _builtins.str protocol_variable: Variable name
        :param _builtins.str route_policy: Select a Route Policy to enable redistribution
        """
        if optional is not None:
            pulumi.set(__self__, "optional", optional)
        if protocol is not None:
            pulumi.set(__self__, "protocol", protocol)
        if protocol_variable is not None:
            pulumi.set(__self__, "protocol_variable", protocol_variable)
        if route_policy is not None:
            pulumi.set(__self__, "route_policy", route_policy)

    @_builtins.property
    @pulumi.getter
    def optional(self) -> Optional[_builtins.bool]:
        """
        Indicates if list item is considered optional.
        """
        return pulumi.get(self, "optional")

    @_builtins.property
    @pulumi.getter
    def protocol(self) -> Optional[_builtins.str]:
        """
        Select a Route Protocol to enable redistribution
          - Choices: `bgp`, `ospf`
        """
        return pulumi.get(self, "protocol")

    @_builtins.property
    @pulumi.getter(name="protocolVariable")
    def protocol_variable(self) -> Optional[_builtins.str]:
        """
        Variable name
        """
        return pulumi.get(self, "protocol_variable")

    @_builtins.property
    @pulumi.getter(name="routePolicy")
    def route_policy(self) -> Optional[_builtins.str]:
        """
        Select a Route Policy to enable redistribution
        """
        return pulumi.get(self, "route_policy")


@pulumi.output_type
class CiscoVpnFeatureTemplateRouteGlobalImport(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "protocolSubTypeVariable":
            suggest = "protocol_sub_type_variable"
        elif key == "protocolSubTypes":
            suggest = "protocol_sub_types"
        elif key == "protocolVariable":
            suggest = "protocol_variable"
        elif key == "routePolicy":
            suggest = "route_policy"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in CiscoVpnFeatureTemplateRouteGlobalImport. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        CiscoVpnFeatureTemplateRouteGlobalImport.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        CiscoVpnFeatureTemplateRouteGlobalImport.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 optional: Optional[_builtins.bool] = None,
                 protocol: Optional[_builtins.str] = None,
                 protocol_sub_type_variable: Optional[_builtins.str] = None,
                 protocol_sub_types: Optional[Sequence[_builtins.str]] = None,
                 protocol_variable: Optional[_builtins.str] = None,
                 redistributes: Optional[Sequence['outputs.CiscoVpnFeatureTemplateRouteGlobalImportRedistribute']] = None,
                 route_policy: Optional[_builtins.str] = None):
        """
        :param _builtins.bool optional: Indicates if list item is considered optional.
        :param _builtins.str protocol: Select a Route Protocol to enable route leaking from Global VPN to this Service VPN
                 - Choices: `static`, `connected`, `bgp`, `ospf`
        :param _builtins.str protocol_sub_type_variable: Variable name
        :param Sequence[_builtins.str] protocol_sub_types: - Default value: `external`
        :param _builtins.str protocol_variable: Variable name
        :param Sequence['CiscoVpnFeatureTemplateRouteGlobalImportRedistributeArgs'] redistributes: Enable redistribution of replicated route protocol
        :param _builtins.str route_policy: Select a Route Policy to enable route leaking from Global VPN to this Service VPN
        """
        if optional is not None:
            pulumi.set(__self__, "optional", optional)
        if protocol is not None:
            pulumi.set(__self__, "protocol", protocol)
        if protocol_sub_type_variable is not None:
            pulumi.set(__self__, "protocol_sub_type_variable", protocol_sub_type_variable)
        if protocol_sub_types is not None:
            pulumi.set(__self__, "protocol_sub_types", protocol_sub_types)
        if protocol_variable is not None:
            pulumi.set(__self__, "protocol_variable", protocol_variable)
        if redistributes is not None:
            pulumi.set(__self__, "redistributes", redistributes)
        if route_policy is not None:
            pulumi.set(__self__, "route_policy", route_policy)

    @_builtins.property
    @pulumi.getter
    def optional(self) -> Optional[_builtins.bool]:
        """
        Indicates if list item is considered optional.
        """
        return pulumi.get(self, "optional")

    @_builtins.property
    @pulumi.getter
    def protocol(self) -> Optional[_builtins.str]:
        """
        Select a Route Protocol to enable route leaking from Global VPN to this Service VPN
          - Choices: `static`, `connected`, `bgp`, `ospf`
        """
        return pulumi.get(self, "protocol")

    @_builtins.property
    @pulumi.getter(name="protocolSubTypeVariable")
    def protocol_sub_type_variable(self) -> Optional[_builtins.str]:
        """
        Variable name
        """
        return pulumi.get(self, "protocol_sub_type_variable")

    @_builtins.property
    @pulumi.getter(name="protocolSubTypes")
    def protocol_sub_types(self) -> Optional[Sequence[_builtins.str]]:
        """
        - Default value: `external`
        """
        return pulumi.get(self, "protocol_sub_types")

    @_builtins.property
    @pulumi.getter(name="protocolVariable")
    def protocol_variable(self) -> Optional[_builtins.str]:
        """
        Variable name
        """
        return pulumi.get(self, "protocol_variable")

    @_builtins.property
    @pulumi.getter
    def redistributes(self) -> Optional[Sequence['outputs.CiscoVpnFeatureTemplateRouteGlobalImportRedistribute']]:
        """
        Enable redistribution of replicated route protocol
        """
        return pulumi.get(self, "redistributes")

    @_builtins.property
    @pulumi.getter(name="routePolicy")
    def route_policy(self) -> Optional[_builtins.str]:
        """
        Select a Route Policy to enable route leaking from Global VPN to this Service VPN
        """
        return pulumi.get(self, "route_policy")


@pulumi.output_type
class CiscoVpnFeatureTemplateRouteGlobalImportRedistribute(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "protocolVariable":
            suggest = "protocol_variable"
        elif key == "routePolicy":
            suggest = "route_policy"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in CiscoVpnFeatureTemplateRouteGlobalImportRedistribute. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        CiscoVpnFeatureTemplateRouteGlobalImportRedistribute.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        CiscoVpnFeatureTemplateRouteGlobalImportRedistribute.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 optional: Optional[_builtins.bool] = None,
                 protocol: Optional[_builtins.str] = None,
                 protocol_variable: Optional[_builtins.str] = None,
                 route_policy: Optional[_builtins.str] = None):
        """
        :param _builtins.bool optional: Indicates if list item is considered optional.
        :param _builtins.str protocol: Select a Route Protocol to enable redistribution
                 - Choices: `bgp`, `eigrp`, `ospf`
        :param _builtins.str protocol_variable: Variable name
        :param _builtins.str route_policy: Select a Route Policy to enable redistribution
        """
        if optional is not None:
            pulumi.set(__self__, "optional", optional)
        if protocol is not None:
            pulumi.set(__self__, "protocol", protocol)
        if protocol_variable is not None:
            pulumi.set(__self__, "protocol_variable", protocol_variable)
        if route_policy is not None:
            pulumi.set(__self__, "route_policy", route_policy)

    @_builtins.property
    @pulumi.getter
    def optional(self) -> Optional[_builtins.bool]:
        """
        Indicates if list item is considered optional.
        """
        return pulumi.get(self, "optional")

    @_builtins.property
    @pulumi.getter
    def protocol(self) -> Optional[_builtins.str]:
        """
        Select a Route Protocol to enable redistribution
          - Choices: `bgp`, `eigrp`, `ospf`
        """
        return pulumi.get(self, "protocol")

    @_builtins.property
    @pulumi.getter(name="protocolVariable")
    def protocol_variable(self) -> Optional[_builtins.str]:
        """
        Variable name
        """
        return pulumi.get(self, "protocol_variable")

    @_builtins.property
    @pulumi.getter(name="routePolicy")
    def route_policy(self) -> Optional[_builtins.str]:
        """
        Select a Route Policy to enable redistribution
        """
        return pulumi.get(self, "route_policy")


@pulumi.output_type
class CiscoVpnFeatureTemplateRouteVpnImport(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "protocolSubTypeVariable":
            suggest = "protocol_sub_type_variable"
        elif key == "protocolSubTypes":
            suggest = "protocol_sub_types"
        elif key == "protocolVariable":
            suggest = "protocol_variable"
        elif key == "routePolicy":
            suggest = "route_policy"
        elif key == "routePolicyVariable":
            suggest = "route_policy_variable"
        elif key == "sourceVpnId":
            suggest = "source_vpn_id"
        elif key == "sourceVpnIdVariable":
            suggest = "source_vpn_id_variable"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in CiscoVpnFeatureTemplateRouteVpnImport. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        CiscoVpnFeatureTemplateRouteVpnImport.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        CiscoVpnFeatureTemplateRouteVpnImport.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 optional: Optional[_builtins.bool] = None,
                 protocol: Optional[_builtins.str] = None,
                 protocol_sub_type_variable: Optional[_builtins.str] = None,
                 protocol_sub_types: Optional[Sequence[_builtins.str]] = None,
                 protocol_variable: Optional[_builtins.str] = None,
                 redistributes: Optional[Sequence['outputs.CiscoVpnFeatureTemplateRouteVpnImportRedistribute']] = None,
                 route_policy: Optional[_builtins.str] = None,
                 route_policy_variable: Optional[_builtins.str] = None,
                 source_vpn_id: Optional[_builtins.int] = None,
                 source_vpn_id_variable: Optional[_builtins.str] = None):
        """
        :param _builtins.bool optional: Indicates if list item is considered optional.
        :param _builtins.str protocol: Select a Route Protocol to enable route leaking to current VPN
                 - Choices: `static`, `connected`, `bgp`, `ospf`, `eigrp`
        :param _builtins.str protocol_sub_type_variable: Variable name
        :param Sequence[_builtins.str] protocol_sub_types: - Default value: `external`
        :param _builtins.str protocol_variable: Variable name
        :param Sequence['CiscoVpnFeatureTemplateRouteVpnImportRedistributeArgs'] redistributes: Enable redistribution of replicated route protocol
        :param _builtins.str route_policy: Select a Route Policy to enable route leaking to current VPN
        :param _builtins.str route_policy_variable: Variable name
        :param _builtins.int source_vpn_id: Select a Source VPN where route leaks from
                 - Range: `1`-`65530`
                 - Default value: `1`
        :param _builtins.str source_vpn_id_variable: Variable name
        """
        if optional is not None:
            pulumi.set(__self__, "optional", optional)
        if protocol is not None:
            pulumi.set(__self__, "protocol", protocol)
        if protocol_sub_type_variable is not None:
            pulumi.set(__self__, "protocol_sub_type_variable", protocol_sub_type_variable)
        if protocol_sub_types is not None:
            pulumi.set(__self__, "protocol_sub_types", protocol_sub_types)
        if protocol_variable is not None:
            pulumi.set(__self__, "protocol_variable", protocol_variable)
        if redistributes is not None:
            pulumi.set(__self__, "redistributes", redistributes)
        if route_policy is not None:
            pulumi.set(__self__, "route_policy", route_policy)
        if route_policy_variable is not None:
            pulumi.set(__self__, "route_policy_variable", route_policy_variable)
        if source_vpn_id is not None:
            pulumi.set(__self__, "source_vpn_id", source_vpn_id)
        if source_vpn_id_variable is not None:
            pulumi.set(__self__, "source_vpn_id_variable", source_vpn_id_variable)

    @_builtins.property
    @pulumi.getter
    def optional(self) -> Optional[_builtins.bool]:
        """
        Indicates if list item is considered optional.
        """
        return pulumi.get(self, "optional")

    @_builtins.property
    @pulumi.getter
    def protocol(self) -> Optional[_builtins.str]:
        """
        Select a Route Protocol to enable route leaking to current VPN
          - Choices: `static`, `connected`, `bgp`, `ospf`, `eigrp`
        """
        return pulumi.get(self, "protocol")

    @_builtins.property
    @pulumi.getter(name="protocolSubTypeVariable")
    def protocol_sub_type_variable(self) -> Optional[_builtins.str]:
        """
        Variable name
        """
        return pulumi.get(self, "protocol_sub_type_variable")

    @_builtins.property
    @pulumi.getter(name="protocolSubTypes")
    def protocol_sub_types(self) -> Optional[Sequence[_builtins.str]]:
        """
        - Default value: `external`
        """
        return pulumi.get(self, "protocol_sub_types")

    @_builtins.property
    @pulumi.getter(name="protocolVariable")
    def protocol_variable(self) -> Optional[_builtins.str]:
        """
        Variable name
        """
        return pulumi.get(self, "protocol_variable")

    @_builtins.property
    @pulumi.getter
    def redistributes(self) -> Optional[Sequence['outputs.CiscoVpnFeatureTemplateRouteVpnImportRedistribute']]:
        """
        Enable redistribution of replicated route protocol
        """
        return pulumi.get(self, "redistributes")

    @_builtins.property
    @pulumi.getter(name="routePolicy")
    def route_policy(self) -> Optional[_builtins.str]:
        """
        Select a Route Policy to enable route leaking to current VPN
        """
        return pulumi.get(self, "route_policy")

    @_builtins.property
    @pulumi.getter(name="routePolicyVariable")
    def route_policy_variable(self) -> Optional[_builtins.str]:
        """
        Variable name
        """
        return pulumi.get(self, "route_policy_variable")

    @_builtins.property
    @pulumi.getter(name="sourceVpnId")
    def source_vpn_id(self) -> Optional[_builtins.int]:
        """
        Select a Source VPN where route leaks from
          - Range: `1`-`65530`
          - Default value: `1`
        """
        return pulumi.get(self, "source_vpn_id")

    @_builtins.property
    @pulumi.getter(name="sourceVpnIdVariable")
    def source_vpn_id_variable(self) -> Optional[_builtins.str]:
        """
        Variable name
        """
        return pulumi.get(self, "source_vpn_id_variable")


@pulumi.output_type
class CiscoVpnFeatureTemplateRouteVpnImportRedistribute(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "protocolVariable":
            suggest = "protocol_variable"
        elif key == "routePolicy":
            suggest = "route_policy"
        elif key == "routePolicyVariable":
            suggest = "route_policy_variable"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in CiscoVpnFeatureTemplateRouteVpnImportRedistribute. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        CiscoVpnFeatureTemplateRouteVpnImportRedistribute.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        CiscoVpnFeatureTemplateRouteVpnImportRedistribute.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 optional: Optional[_builtins.bool] = None,
                 protocol: Optional[_builtins.str] = None,
                 protocol_variable: Optional[_builtins.str] = None,
                 route_policy: Optional[_builtins.str] = None,
                 route_policy_variable: Optional[_builtins.str] = None):
        """
        :param _builtins.bool optional: Indicates if list item is considered optional.
        :param _builtins.str protocol: Select a Route Protocol to enable redistribution
                 - Choices: `bgp`, `eigrp`, `ospf`
        :param _builtins.str protocol_variable: Variable name
        :param _builtins.str route_policy: Select a Route Policy to enable redistribution
        :param _builtins.str route_policy_variable: Variable name
        """
        if optional is not None:
            pulumi.set(__self__, "optional", optional)
        if protocol is not None:
            pulumi.set(__self__, "protocol", protocol)
        if protocol_variable is not None:
            pulumi.set(__self__, "protocol_variable", protocol_variable)
        if route_policy is not None:
            pulumi.set(__self__, "route_policy", route_policy)
        if route_policy_variable is not None:
            pulumi.set(__self__, "route_policy_variable", route_policy_variable)

    @_builtins.property
    @pulumi.getter
    def optional(self) -> Optional[_builtins.bool]:
        """
        Indicates if list item is considered optional.
        """
        return pulumi.get(self, "optional")

    @_builtins.property
    @pulumi.getter
    def protocol(self) -> Optional[_builtins.str]:
        """
        Select a Route Protocol to enable redistribution
          - Choices: `bgp`, `eigrp`, `ospf`
        """
        return pulumi.get(self, "protocol")

    @_builtins.property
    @pulumi.getter(name="protocolVariable")
    def protocol_variable(self) -> Optional[_builtins.str]:
        """
        Variable name
        """
        return pulumi.get(self, "protocol_variable")

    @_builtins.property
    @pulumi.getter(name="routePolicy")
    def route_policy(self) -> Optional[_builtins.str]:
        """
        Select a Route Policy to enable redistribution
        """
        return pulumi.get(self, "route_policy")

    @_builtins.property
    @pulumi.getter(name="routePolicyVariable")
    def route_policy_variable(self) -> Optional[_builtins.str]:
        """
        Variable name
        """
        return pulumi.get(self, "route_policy_variable")


@pulumi.output_type
class CiscoVpnFeatureTemplateService(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "addressVariable":
            suggest = "address_variable"
        elif key == "interfaceVariable":
            suggest = "interface_variable"
        elif key == "serviceTypes":
            suggest = "service_types"
        elif key == "trackEnable":
            suggest = "track_enable"
        elif key == "trackEnableVariable":
            suggest = "track_enable_variable"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in CiscoVpnFeatureTemplateService. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        CiscoVpnFeatureTemplateService.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        CiscoVpnFeatureTemplateService.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 address_variable: Optional[_builtins.str] = None,
                 addresses: Optional[Sequence[_builtins.str]] = None,
                 interface: Optional[_builtins.str] = None,
                 interface_variable: Optional[_builtins.str] = None,
                 optional: Optional[_builtins.bool] = None,
                 service_types: Optional[_builtins.str] = None,
                 track_enable: Optional[_builtins.bool] = None,
                 track_enable_variable: Optional[_builtins.str] = None):
        """
        :param _builtins.str address_variable: Variable name
        :param Sequence[_builtins.str] addresses: List of IPv4 address
        :param _builtins.str interface: Tracking Service
        :param _builtins.str interface_variable: Variable name
        :param _builtins.bool optional: Indicates if list item is considered optional.
        :param _builtins.str service_types: Service Type
                 - Choices: `FW`, `IDS`, `IDP`, `netsvc1`, `netsvc2`, `netsvc3`, `netsvc4`, `TE`, `appqoe`
        :param _builtins.bool track_enable: Tracking Service
                 - Default value: `true`
        :param _builtins.str track_enable_variable: Variable name
        """
        if address_variable is not None:
            pulumi.set(__self__, "address_variable", address_variable)
        if addresses is not None:
            pulumi.set(__self__, "addresses", addresses)
        if interface is not None:
            pulumi.set(__self__, "interface", interface)
        if interface_variable is not None:
            pulumi.set(__self__, "interface_variable", interface_variable)
        if optional is not None:
            pulumi.set(__self__, "optional", optional)
        if service_types is not None:
            pulumi.set(__self__, "service_types", service_types)
        if track_enable is not None:
            pulumi.set(__self__, "track_enable", track_enable)
        if track_enable_variable is not None:
            pulumi.set(__self__, "track_enable_variable", track_enable_variable)

    @_builtins.property
    @pulumi.getter(name="addressVariable")
    def address_variable(self) -> Optional[_builtins.str]:
        """
        Variable name
        """
        return pulumi.get(self, "address_variable")

    @_builtins.property
    @pulumi.getter
    def addresses(self) -> Optional[Sequence[_builtins.str]]:
        """
        List of IPv4 address
        """
        return pulumi.get(self, "addresses")

    @_builtins.property
    @pulumi.getter
    def interface(self) -> Optional[_builtins.str]:
        """
        Tracking Service
        """
        return pulumi.get(self, "interface")

    @_builtins.property
    @pulumi.getter(name="interfaceVariable")
    def interface_variable(self) -> Optional[_builtins.str]:
        """
        Variable name
        """
        return pulumi.get(self, "interface_variable")

    @_builtins.property
    @pulumi.getter
    def optional(self) -> Optional[_builtins.bool]:
        """
        Indicates if list item is considered optional.
        """
        return pulumi.get(self, "optional")

    @_builtins.property
    @pulumi.getter(name="serviceTypes")
    def service_types(self) -> Optional[_builtins.str]:
        """
        Service Type
          - Choices: `FW`, `IDS`, `IDP`, `netsvc1`, `netsvc2`, `netsvc3`, `netsvc4`, `TE`, `appqoe`
        """
        return pulumi.get(self, "service_types")

    @_builtins.property
    @pulumi.getter(name="trackEnable")
    def track_enable(self) -> Optional[_builtins.bool]:
        """
        Tracking Service
          - Default value: `true`
        """
        return pulumi.get(self, "track_enable")

    @_builtins.property
    @pulumi.getter(name="trackEnableVariable")
    def track_enable_variable(self) -> Optional[_builtins.str]:
        """
        Variable name
        """
        return pulumi.get(self, "track_enable_variable")


@pulumi.output_type
class CiscoVpnFeatureTemplateStaticNatRule(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "poolName":
            suggest = "pool_name"
        elif key == "poolNameVariable":
            suggest = "pool_name_variable"
        elif key == "sourceIp":
            suggest = "source_ip"
        elif key == "sourceIpVariable":
            suggest = "source_ip_variable"
        elif key == "staticNatDirection":
            suggest = "static_nat_direction"
        elif key == "staticNatDirectionVariable":
            suggest = "static_nat_direction_variable"
        elif key == "trackerId":
            suggest = "tracker_id"
        elif key == "trackerIdVariable":
            suggest = "tracker_id_variable"
        elif key == "translateIp":
            suggest = "translate_ip"
        elif key == "translateIpVariable":
            suggest = "translate_ip_variable"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in CiscoVpnFeatureTemplateStaticNatRule. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        CiscoVpnFeatureTemplateStaticNatRule.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        CiscoVpnFeatureTemplateStaticNatRule.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 optional: Optional[_builtins.bool] = None,
                 pool_name: Optional[_builtins.int] = None,
                 pool_name_variable: Optional[_builtins.str] = None,
                 source_ip: Optional[_builtins.str] = None,
                 source_ip_variable: Optional[_builtins.str] = None,
                 static_nat_direction: Optional[_builtins.str] = None,
                 static_nat_direction_variable: Optional[_builtins.str] = None,
                 tracker_id: Optional[_builtins.int] = None,
                 tracker_id_variable: Optional[_builtins.str] = None,
                 translate_ip: Optional[_builtins.str] = None,
                 translate_ip_variable: Optional[_builtins.str] = None):
        """
        :param _builtins.bool optional: Indicates if list item is considered optional.
        :param _builtins.int pool_name: NAT Pool Name, natpool1..31
        :param _builtins.str pool_name_variable: Variable name
        :param _builtins.str source_ip: Source IP address to be translated
        :param _builtins.str source_ip_variable: Variable name
        :param _builtins.str static_nat_direction: Direction of static NAT translation
                 - Choices: `inside`, `outside`
        :param _builtins.str static_nat_direction_variable: Variable name
        :param _builtins.int tracker_id: Add Object/Object Group Tracker
                 - Range: `1`-`1000`
        :param _builtins.str tracker_id_variable: Variable name
        :param _builtins.str translate_ip: Statically translated source IP address
        :param _builtins.str translate_ip_variable: Variable name
        """
        if optional is not None:
            pulumi.set(__self__, "optional", optional)
        if pool_name is not None:
            pulumi.set(__self__, "pool_name", pool_name)
        if pool_name_variable is not None:
            pulumi.set(__self__, "pool_name_variable", pool_name_variable)
        if source_ip is not None:
            pulumi.set(__self__, "source_ip", source_ip)
        if source_ip_variable is not None:
            pulumi.set(__self__, "source_ip_variable", source_ip_variable)
        if static_nat_direction is not None:
            pulumi.set(__self__, "static_nat_direction", static_nat_direction)
        if static_nat_direction_variable is not None:
            pulumi.set(__self__, "static_nat_direction_variable", static_nat_direction_variable)
        if tracker_id is not None:
            pulumi.set(__self__, "tracker_id", tracker_id)
        if tracker_id_variable is not None:
            pulumi.set(__self__, "tracker_id_variable", tracker_id_variable)
        if translate_ip is not None:
            pulumi.set(__self__, "translate_ip", translate_ip)
        if translate_ip_variable is not None:
            pulumi.set(__self__, "translate_ip_variable", translate_ip_variable)

    @_builtins.property
    @pulumi.getter
    def optional(self) -> Optional[_builtins.bool]:
        """
        Indicates if list item is considered optional.
        """
        return pulumi.get(self, "optional")

    @_builtins.property
    @pulumi.getter(name="poolName")
    def pool_name(self) -> Optional[_builtins.int]:
        """
        NAT Pool Name, natpool1..31
        """
        return pulumi.get(self, "pool_name")

    @_builtins.property
    @pulumi.getter(name="poolNameVariable")
    def pool_name_variable(self) -> Optional[_builtins.str]:
        """
        Variable name
        """
        return pulumi.get(self, "pool_name_variable")

    @_builtins.property
    @pulumi.getter(name="sourceIp")
    def source_ip(self) -> Optional[_builtins.str]:
        """
        Source IP address to be translated
        """
        return pulumi.get(self, "source_ip")

    @_builtins.property
    @pulumi.getter(name="sourceIpVariable")
    def source_ip_variable(self) -> Optional[_builtins.str]:
        """
        Variable name
        """
        return pulumi.get(self, "source_ip_variable")

    @_builtins.property
    @pulumi.getter(name="staticNatDirection")
    def static_nat_direction(self) -> Optional[_builtins.str]:
        """
        Direction of static NAT translation
          - Choices: `inside`, `outside`
        """
        return pulumi.get(self, "static_nat_direction")

    @_builtins.property
    @pulumi.getter(name="staticNatDirectionVariable")
    def static_nat_direction_variable(self) -> Optional[_builtins.str]:
        """
        Variable name
        """
        return pulumi.get(self, "static_nat_direction_variable")

    @_builtins.property
    @pulumi.getter(name="trackerId")
    def tracker_id(self) -> Optional[_builtins.int]:
        """
        Add Object/Object Group Tracker
          - Range: `1`-`1000`
        """
        return pulumi.get(self, "tracker_id")

    @_builtins.property
    @pulumi.getter(name="trackerIdVariable")
    def tracker_id_variable(self) -> Optional[_builtins.str]:
        """
        Variable name
        """
        return pulumi.get(self, "tracker_id_variable")

    @_builtins.property
    @pulumi.getter(name="translateIp")
    def translate_ip(self) -> Optional[_builtins.str]:
        """
        Statically translated source IP address
        """
        return pulumi.get(self, "translate_ip")

    @_builtins.property
    @pulumi.getter(name="translateIpVariable")
    def translate_ip_variable(self) -> Optional[_builtins.str]:
        """
        Variable name
        """
        return pulumi.get(self, "translate_ip_variable")


@pulumi.output_type
class CiscoVpnFeatureTemplateStaticNatSubnetRule(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "prefixLength":
            suggest = "prefix_length"
        elif key == "prefixLengthVariable":
            suggest = "prefix_length_variable"
        elif key == "sourceIpSubnet":
            suggest = "source_ip_subnet"
        elif key == "sourceIpSubnetVariable":
            suggest = "source_ip_subnet_variable"
        elif key == "staticNatDirection":
            suggest = "static_nat_direction"
        elif key == "staticNatDirectionVariable":
            suggest = "static_nat_direction_variable"
        elif key == "trackerId":
            suggest = "tracker_id"
        elif key == "trackerIdVariable":
            suggest = "tracker_id_variable"
        elif key == "translateIpSubnet":
            suggest = "translate_ip_subnet"
        elif key == "translateIpSubnetVariable":
            suggest = "translate_ip_subnet_variable"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in CiscoVpnFeatureTemplateStaticNatSubnetRule. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        CiscoVpnFeatureTemplateStaticNatSubnetRule.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        CiscoVpnFeatureTemplateStaticNatSubnetRule.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 optional: Optional[_builtins.bool] = None,
                 prefix_length: Optional[_builtins.int] = None,
                 prefix_length_variable: Optional[_builtins.str] = None,
                 source_ip_subnet: Optional[_builtins.str] = None,
                 source_ip_subnet_variable: Optional[_builtins.str] = None,
                 static_nat_direction: Optional[_builtins.str] = None,
                 static_nat_direction_variable: Optional[_builtins.str] = None,
                 tracker_id: Optional[_builtins.int] = None,
                 tracker_id_variable: Optional[_builtins.str] = None,
                 translate_ip_subnet: Optional[_builtins.str] = None,
                 translate_ip_subnet_variable: Optional[_builtins.str] = None):
        """
        :param _builtins.bool optional: Indicates if list item is considered optional.
        :param _builtins.int prefix_length: Network Prefix Length
                 - Range: `1`-`32`
        :param _builtins.str prefix_length_variable: Variable name
        :param _builtins.str source_ip_subnet: Source IP Subnet to be translated
        :param _builtins.str source_ip_subnet_variable: Variable name
        :param _builtins.str static_nat_direction: Direction of static NAT translation
                 - Choices: `inside`, `outside`
        :param _builtins.str static_nat_direction_variable: Variable name
        :param _builtins.int tracker_id: Add Object/Object Group Tracker
                 - Range: `1`-`1000`
        :param _builtins.str tracker_id_variable: Variable name
        :param _builtins.str translate_ip_subnet: Statically translated source IP Subnet
        :param _builtins.str translate_ip_subnet_variable: Variable name
        """
        if optional is not None:
            pulumi.set(__self__, "optional", optional)
        if prefix_length is not None:
            pulumi.set(__self__, "prefix_length", prefix_length)
        if prefix_length_variable is not None:
            pulumi.set(__self__, "prefix_length_variable", prefix_length_variable)
        if source_ip_subnet is not None:
            pulumi.set(__self__, "source_ip_subnet", source_ip_subnet)
        if source_ip_subnet_variable is not None:
            pulumi.set(__self__, "source_ip_subnet_variable", source_ip_subnet_variable)
        if static_nat_direction is not None:
            pulumi.set(__self__, "static_nat_direction", static_nat_direction)
        if static_nat_direction_variable is not None:
            pulumi.set(__self__, "static_nat_direction_variable", static_nat_direction_variable)
        if tracker_id is not None:
            pulumi.set(__self__, "tracker_id", tracker_id)
        if tracker_id_variable is not None:
            pulumi.set(__self__, "tracker_id_variable", tracker_id_variable)
        if translate_ip_subnet is not None:
            pulumi.set(__self__, "translate_ip_subnet", translate_ip_subnet)
        if translate_ip_subnet_variable is not None:
            pulumi.set(__self__, "translate_ip_subnet_variable", translate_ip_subnet_variable)

    @_builtins.property
    @pulumi.getter
    def optional(self) -> Optional[_builtins.bool]:
        """
        Indicates if list item is considered optional.
        """
        return pulumi.get(self, "optional")

    @_builtins.property
    @pulumi.getter(name="prefixLength")
    def prefix_length(self) -> Optional[_builtins.int]:
        """
        Network Prefix Length
          - Range: `1`-`32`
        """
        return pulumi.get(self, "prefix_length")

    @_builtins.property
    @pulumi.getter(name="prefixLengthVariable")
    def prefix_length_variable(self) -> Optional[_builtins.str]:
        """
        Variable name
        """
        return pulumi.get(self, "prefix_length_variable")

    @_builtins.property
    @pulumi.getter(name="sourceIpSubnet")
    def source_ip_subnet(self) -> Optional[_builtins.str]:
        """
        Source IP Subnet to be translated
        """
        return pulumi.get(self, "source_ip_subnet")

    @_builtins.property
    @pulumi.getter(name="sourceIpSubnetVariable")
    def source_ip_subnet_variable(self) -> Optional[_builtins.str]:
        """
        Variable name
        """
        return pulumi.get(self, "source_ip_subnet_variable")

    @_builtins.property
    @pulumi.getter(name="staticNatDirection")
    def static_nat_direction(self) -> Optional[_builtins.str]:
        """
        Direction of static NAT translation
          - Choices: `inside`, `outside`
        """
        return pulumi.get(self, "static_nat_direction")

    @_builtins.property
    @pulumi.getter(name="staticNatDirectionVariable")
    def static_nat_direction_variable(self) -> Optional[_builtins.str]:
        """
        Variable name
        """
        return pulumi.get(self, "static_nat_direction_variable")

    @_builtins.property
    @pulumi.getter(name="trackerId")
    def tracker_id(self) -> Optional[_builtins.int]:
        """
        Add Object/Object Group Tracker
          - Range: `1`-`1000`
        """
        return pulumi.get(self, "tracker_id")

    @_builtins.property
    @pulumi.getter(name="trackerIdVariable")
    def tracker_id_variable(self) -> Optional[_builtins.str]:
        """
        Variable name
        """
        return pulumi.get(self, "tracker_id_variable")

    @_builtins.property
    @pulumi.getter(name="translateIpSubnet")
    def translate_ip_subnet(self) -> Optional[_builtins.str]:
        """
        Statically translated source IP Subnet
        """
        return pulumi.get(self, "translate_ip_subnet")

    @_builtins.property
    @pulumi.getter(name="translateIpSubnetVariable")
    def translate_ip_subnet_variable(self) -> Optional[_builtins.str]:
        """
        Variable name
        """
        return pulumi.get(self, "translate_ip_subnet_variable")


@pulumi.output_type
class CiscoVpnInterfaceFeatureTemplateAccessList(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "aclName":
            suggest = "acl_name"
        elif key == "aclNameVariable":
            suggest = "acl_name_variable"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in CiscoVpnInterfaceFeatureTemplateAccessList. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        CiscoVpnInterfaceFeatureTemplateAccessList.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        CiscoVpnInterfaceFeatureTemplateAccessList.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 acl_name: Optional[_builtins.str] = None,
                 acl_name_variable: Optional[_builtins.str] = None,
                 direction: Optional[_builtins.str] = None,
                 optional: Optional[_builtins.bool] = None):
        """
        :param _builtins.str acl_name: Name of access list
        :param _builtins.str acl_name_variable: Variable name
        :param _builtins.str direction: Direction
                 - Choices: `in`, `out`
        :param _builtins.bool optional: Indicates if list item is considered optional.
        """
        if acl_name is not None:
            pulumi.set(__self__, "acl_name", acl_name)
        if acl_name_variable is not None:
            pulumi.set(__self__, "acl_name_variable", acl_name_variable)
        if direction is not None:
            pulumi.set(__self__, "direction", direction)
        if optional is not None:
            pulumi.set(__self__, "optional", optional)

    @_builtins.property
    @pulumi.getter(name="aclName")
    def acl_name(self) -> Optional[_builtins.str]:
        """
        Name of access list
        """
        return pulumi.get(self, "acl_name")

    @_builtins.property
    @pulumi.getter(name="aclNameVariable")
    def acl_name_variable(self) -> Optional[_builtins.str]:
        """
        Variable name
        """
        return pulumi.get(self, "acl_name_variable")

    @_builtins.property
    @pulumi.getter
    def direction(self) -> Optional[_builtins.str]:
        """
        Direction
          - Choices: `in`, `out`
        """
        return pulumi.get(self, "direction")

    @_builtins.property
    @pulumi.getter
    def optional(self) -> Optional[_builtins.bool]:
        """
        Indicates if list item is considered optional.
        """
        return pulumi.get(self, "optional")


@pulumi.output_type
class CiscoVpnInterfaceFeatureTemplateIpv4SecondaryAddress(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "addressVariable":
            suggest = "address_variable"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in CiscoVpnInterfaceFeatureTemplateIpv4SecondaryAddress. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        CiscoVpnInterfaceFeatureTemplateIpv4SecondaryAddress.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        CiscoVpnInterfaceFeatureTemplateIpv4SecondaryAddress.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 address: Optional[_builtins.str] = None,
                 address_variable: Optional[_builtins.str] = None,
                 optional: Optional[_builtins.bool] = None):
        """
        :param _builtins.str address: IP Address
        :param _builtins.str address_variable: Variable name
        :param _builtins.bool optional: Indicates if list item is considered optional.
        """
        if address is not None:
            pulumi.set(__self__, "address", address)
        if address_variable is not None:
            pulumi.set(__self__, "address_variable", address_variable)
        if optional is not None:
            pulumi.set(__self__, "optional", optional)

    @_builtins.property
    @pulumi.getter
    def address(self) -> Optional[_builtins.str]:
        """
        IP Address
        """
        return pulumi.get(self, "address")

    @_builtins.property
    @pulumi.getter(name="addressVariable")
    def address_variable(self) -> Optional[_builtins.str]:
        """
        Variable name
        """
        return pulumi.get(self, "address_variable")

    @_builtins.property
    @pulumi.getter
    def optional(self) -> Optional[_builtins.bool]:
        """
        Indicates if list item is considered optional.
        """
        return pulumi.get(self, "optional")


@pulumi.output_type
class CiscoVpnInterfaceFeatureTemplateIpv4Vrrp(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "groupId":
            suggest = "group_id"
        elif key == "groupIdVariable":
            suggest = "group_id_variable"
        elif key == "ipAddress":
            suggest = "ip_address"
        elif key == "ipAddressVariable":
            suggest = "ip_address_variable"
        elif key == "ipv4SecondaryAddresses":
            suggest = "ipv4_secondary_addresses"
        elif key == "priorityVariable":
            suggest = "priority_variable"
        elif key == "timerVariable":
            suggest = "timer_variable"
        elif key == "tlocPreferenceChange":
            suggest = "tloc_preference_change"
        elif key == "tlocPreferenceChangeValue":
            suggest = "tloc_preference_change_value"
        elif key == "tlocPreferenceChangeValueVariable":
            suggest = "tloc_preference_change_value_variable"
        elif key == "trackOmp":
            suggest = "track_omp"
        elif key == "trackPrefixList":
            suggest = "track_prefix_list"
        elif key == "trackPrefixListVariable":
            suggest = "track_prefix_list_variable"
        elif key == "trackingObjects":
            suggest = "tracking_objects"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in CiscoVpnInterfaceFeatureTemplateIpv4Vrrp. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        CiscoVpnInterfaceFeatureTemplateIpv4Vrrp.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        CiscoVpnInterfaceFeatureTemplateIpv4Vrrp.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 group_id: Optional[_builtins.int] = None,
                 group_id_variable: Optional[_builtins.str] = None,
                 ip_address: Optional[_builtins.str] = None,
                 ip_address_variable: Optional[_builtins.str] = None,
                 ipv4_secondary_addresses: Optional[Sequence['outputs.CiscoVpnInterfaceFeatureTemplateIpv4VrrpIpv4SecondaryAddress']] = None,
                 optional: Optional[_builtins.bool] = None,
                 priority: Optional[_builtins.int] = None,
                 priority_variable: Optional[_builtins.str] = None,
                 timer: Optional[_builtins.int] = None,
                 timer_variable: Optional[_builtins.str] = None,
                 tloc_preference_change: Optional[_builtins.bool] = None,
                 tloc_preference_change_value: Optional[_builtins.int] = None,
                 tloc_preference_change_value_variable: Optional[_builtins.str] = None,
                 track_omp: Optional[_builtins.bool] = None,
                 track_prefix_list: Optional[_builtins.str] = None,
                 track_prefix_list_variable: Optional[_builtins.str] = None,
                 tracking_objects: Optional[Sequence['outputs.CiscoVpnInterfaceFeatureTemplateIpv4VrrpTrackingObject']] = None):
        """
        :param _builtins.int group_id: Group ID
                 - Range: `1`-`255`
        :param _builtins.str group_id_variable: Variable name
        :param _builtins.str ip_address: Assign IP Address
        :param _builtins.str ip_address_variable: Variable name
        :param Sequence['CiscoVpnInterfaceFeatureTemplateIpv4VrrpIpv4SecondaryAddressArgs'] ipv4_secondary_addresses: VRRP Secondary IP address
        :param _builtins.bool optional: Indicates if list item is considered optional.
        :param _builtins.int priority: Set priority
                 - Range: `1`-`254`
                 - Default value: `100`
        :param _builtins.str priority_variable: Variable name
        :param _builtins.int timer: Timer interval for successive advertisements, in milliseconds
                 - Range: `100`-`40950`
                 - Default value: `100`
        :param _builtins.str timer_variable: Variable name
        :param _builtins.bool tloc_preference_change: change TLOC preference
                 - Default value: `false`
        :param _builtins.int tloc_preference_change_value: Set tloc preference change value
                 - Range: `1`-`4294967295`
        :param _builtins.str tloc_preference_change_value_variable: Variable name
        :param _builtins.bool track_omp: Track OMP status
                 - Default value: `false`
        :param _builtins.str track_prefix_list: Track Prefix List
        :param _builtins.str track_prefix_list_variable: Variable name
        :param Sequence['CiscoVpnInterfaceFeatureTemplateIpv4VrrpTrackingObjectArgs'] tracking_objects: tracking object for VRRP configuration
        """
        if group_id is not None:
            pulumi.set(__self__, "group_id", group_id)
        if group_id_variable is not None:
            pulumi.set(__self__, "group_id_variable", group_id_variable)
        if ip_address is not None:
            pulumi.set(__self__, "ip_address", ip_address)
        if ip_address_variable is not None:
            pulumi.set(__self__, "ip_address_variable", ip_address_variable)
        if ipv4_secondary_addresses is not None:
            pulumi.set(__self__, "ipv4_secondary_addresses", ipv4_secondary_addresses)
        if optional is not None:
            pulumi.set(__self__, "optional", optional)
        if priority is not None:
            pulumi.set(__self__, "priority", priority)
        if priority_variable is not None:
            pulumi.set(__self__, "priority_variable", priority_variable)
        if timer is not None:
            pulumi.set(__self__, "timer", timer)
        if timer_variable is not None:
            pulumi.set(__self__, "timer_variable", timer_variable)
        if tloc_preference_change is not None:
            pulumi.set(__self__, "tloc_preference_change", tloc_preference_change)
        if tloc_preference_change_value is not None:
            pulumi.set(__self__, "tloc_preference_change_value", tloc_preference_change_value)
        if tloc_preference_change_value_variable is not None:
            pulumi.set(__self__, "tloc_preference_change_value_variable", tloc_preference_change_value_variable)
        if track_omp is not None:
            pulumi.set(__self__, "track_omp", track_omp)
        if track_prefix_list is not None:
            pulumi.set(__self__, "track_prefix_list", track_prefix_list)
        if track_prefix_list_variable is not None:
            pulumi.set(__self__, "track_prefix_list_variable", track_prefix_list_variable)
        if tracking_objects is not None:
            pulumi.set(__self__, "tracking_objects", tracking_objects)

    @_builtins.property
    @pulumi.getter(name="groupId")
    def group_id(self) -> Optional[_builtins.int]:
        """
        Group ID
          - Range: `1`-`255`
        """
        return pulumi.get(self, "group_id")

    @_builtins.property
    @pulumi.getter(name="groupIdVariable")
    def group_id_variable(self) -> Optional[_builtins.str]:
        """
        Variable name
        """
        return pulumi.get(self, "group_id_variable")

    @_builtins.property
    @pulumi.getter(name="ipAddress")
    def ip_address(self) -> Optional[_builtins.str]:
        """
        Assign IP Address
        """
        return pulumi.get(self, "ip_address")

    @_builtins.property
    @pulumi.getter(name="ipAddressVariable")
    def ip_address_variable(self) -> Optional[_builtins.str]:
        """
        Variable name
        """
        return pulumi.get(self, "ip_address_variable")

    @_builtins.property
    @pulumi.getter(name="ipv4SecondaryAddresses")
    def ipv4_secondary_addresses(self) -> Optional[Sequence['outputs.CiscoVpnInterfaceFeatureTemplateIpv4VrrpIpv4SecondaryAddress']]:
        """
        VRRP Secondary IP address
        """
        return pulumi.get(self, "ipv4_secondary_addresses")

    @_builtins.property
    @pulumi.getter
    def optional(self) -> Optional[_builtins.bool]:
        """
        Indicates if list item is considered optional.
        """
        return pulumi.get(self, "optional")

    @_builtins.property
    @pulumi.getter
    def priority(self) -> Optional[_builtins.int]:
        """
        Set priority
          - Range: `1`-`254`
          - Default value: `100`
        """
        return pulumi.get(self, "priority")

    @_builtins.property
    @pulumi.getter(name="priorityVariable")
    def priority_variable(self) -> Optional[_builtins.str]:
        """
        Variable name
        """
        return pulumi.get(self, "priority_variable")

    @_builtins.property
    @pulumi.getter
    def timer(self) -> Optional[_builtins.int]:
        """
        Timer interval for successive advertisements, in milliseconds
          - Range: `100`-`40950`
          - Default value: `100`
        """
        return pulumi.get(self, "timer")

    @_builtins.property
    @pulumi.getter(name="timerVariable")
    def timer_variable(self) -> Optional[_builtins.str]:
        """
        Variable name
        """
        return pulumi.get(self, "timer_variable")

    @_builtins.property
    @pulumi.getter(name="tlocPreferenceChange")
    def tloc_preference_change(self) -> Optional[_builtins.bool]:
        """
        change TLOC preference
          - Default value: `false`
        """
        return pulumi.get(self, "tloc_preference_change")

    @_builtins.property
    @pulumi.getter(name="tlocPreferenceChangeValue")
    def tloc_preference_change_value(self) -> Optional[_builtins.int]:
        """
        Set tloc preference change value
          - Range: `1`-`4294967295`
        """
        return pulumi.get(self, "tloc_preference_change_value")

    @_builtins.property
    @pulumi.getter(name="tlocPreferenceChangeValueVariable")
    def tloc_preference_change_value_variable(self) -> Optional[_builtins.str]:
        """
        Variable name
        """
        return pulumi.get(self, "tloc_preference_change_value_variable")

    @_builtins.property
    @pulumi.getter(name="trackOmp")
    def track_omp(self) -> Optional[_builtins.bool]:
        """
        Track OMP status
          - Default value: `false`
        """
        return pulumi.get(self, "track_omp")

    @_builtins.property
    @pulumi.getter(name="trackPrefixList")
    def track_prefix_list(self) -> Optional[_builtins.str]:
        """
        Track Prefix List
        """
        return pulumi.get(self, "track_prefix_list")

    @_builtins.property
    @pulumi.getter(name="trackPrefixListVariable")
    def track_prefix_list_variable(self) -> Optional[_builtins.str]:
        """
        Variable name
        """
        return pulumi.get(self, "track_prefix_list_variable")

    @_builtins.property
    @pulumi.getter(name="trackingObjects")
    def tracking_objects(self) -> Optional[Sequence['outputs.CiscoVpnInterfaceFeatureTemplateIpv4VrrpTrackingObject']]:
        """
        tracking object for VRRP configuration
        """
        return pulumi.get(self, "tracking_objects")


@pulumi.output_type
class CiscoVpnInterfaceFeatureTemplateIpv4VrrpIpv4SecondaryAddress(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "ipAddress":
            suggest = "ip_address"
        elif key == "ipAddressVariable":
            suggest = "ip_address_variable"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in CiscoVpnInterfaceFeatureTemplateIpv4VrrpIpv4SecondaryAddress. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        CiscoVpnInterfaceFeatureTemplateIpv4VrrpIpv4SecondaryAddress.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        CiscoVpnInterfaceFeatureTemplateIpv4VrrpIpv4SecondaryAddress.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 ip_address: Optional[_builtins.str] = None,
                 ip_address_variable: Optional[_builtins.str] = None,
                 optional: Optional[_builtins.bool] = None):
        """
        :param _builtins.str ip_address: VRRP Secondary IP address
        :param _builtins.str ip_address_variable: Variable name
        :param _builtins.bool optional: Indicates if list item is considered optional.
        """
        if ip_address is not None:
            pulumi.set(__self__, "ip_address", ip_address)
        if ip_address_variable is not None:
            pulumi.set(__self__, "ip_address_variable", ip_address_variable)
        if optional is not None:
            pulumi.set(__self__, "optional", optional)

    @_builtins.property
    @pulumi.getter(name="ipAddress")
    def ip_address(self) -> Optional[_builtins.str]:
        """
        VRRP Secondary IP address
        """
        return pulumi.get(self, "ip_address")

    @_builtins.property
    @pulumi.getter(name="ipAddressVariable")
    def ip_address_variable(self) -> Optional[_builtins.str]:
        """
        Variable name
        """
        return pulumi.get(self, "ip_address_variable")

    @_builtins.property
    @pulumi.getter
    def optional(self) -> Optional[_builtins.bool]:
        """
        Indicates if list item is considered optional.
        """
        return pulumi.get(self, "optional")


@pulumi.output_type
class CiscoVpnInterfaceFeatureTemplateIpv4VrrpTrackingObject(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "decrementValue":
            suggest = "decrement_value"
        elif key == "decrementValueVariable":
            suggest = "decrement_value_variable"
        elif key == "trackAction":
            suggest = "track_action"
        elif key == "trackActionVariable":
            suggest = "track_action_variable"
        elif key == "trackerId":
            suggest = "tracker_id"
        elif key == "trackerIdVariable":
            suggest = "tracker_id_variable"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in CiscoVpnInterfaceFeatureTemplateIpv4VrrpTrackingObject. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        CiscoVpnInterfaceFeatureTemplateIpv4VrrpTrackingObject.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        CiscoVpnInterfaceFeatureTemplateIpv4VrrpTrackingObject.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 decrement_value: Optional[_builtins.int] = None,
                 decrement_value_variable: Optional[_builtins.str] = None,
                 optional: Optional[_builtins.bool] = None,
                 track_action: Optional[_builtins.str] = None,
                 track_action_variable: Optional[_builtins.str] = None,
                 tracker_id: Optional[_builtins.int] = None,
                 tracker_id_variable: Optional[_builtins.str] = None):
        """
        :param _builtins.int decrement_value: Decrement Value for VRRP priority
                 - Range: `1`-`255`
        :param _builtins.str decrement_value_variable: Variable name
        :param _builtins.bool optional: Indicates if list item is considered optional.
        :param _builtins.str track_action: Track Action
                 - Choices: `decrement`, `shutdown`
                 - Default value: `decrement`
        :param _builtins.str track_action_variable: Variable name
        :param _builtins.int tracker_id: Tracker ID
                 - Range: `1`-`1000`
        :param _builtins.str tracker_id_variable: Variable name
        """
        if decrement_value is not None:
            pulumi.set(__self__, "decrement_value", decrement_value)
        if decrement_value_variable is not None:
            pulumi.set(__self__, "decrement_value_variable", decrement_value_variable)
        if optional is not None:
            pulumi.set(__self__, "optional", optional)
        if track_action is not None:
            pulumi.set(__self__, "track_action", track_action)
        if track_action_variable is not None:
            pulumi.set(__self__, "track_action_variable", track_action_variable)
        if tracker_id is not None:
            pulumi.set(__self__, "tracker_id", tracker_id)
        if tracker_id_variable is not None:
            pulumi.set(__self__, "tracker_id_variable", tracker_id_variable)

    @_builtins.property
    @pulumi.getter(name="decrementValue")
    def decrement_value(self) -> Optional[_builtins.int]:
        """
        Decrement Value for VRRP priority
          - Range: `1`-`255`
        """
        return pulumi.get(self, "decrement_value")

    @_builtins.property
    @pulumi.getter(name="decrementValueVariable")
    def decrement_value_variable(self) -> Optional[_builtins.str]:
        """
        Variable name
        """
        return pulumi.get(self, "decrement_value_variable")

    @_builtins.property
    @pulumi.getter
    def optional(self) -> Optional[_builtins.bool]:
        """
        Indicates if list item is considered optional.
        """
        return pulumi.get(self, "optional")

    @_builtins.property
    @pulumi.getter(name="trackAction")
    def track_action(self) -> Optional[_builtins.str]:
        """
        Track Action
          - Choices: `decrement`, `shutdown`
          - Default value: `decrement`
        """
        return pulumi.get(self, "track_action")

    @_builtins.property
    @pulumi.getter(name="trackActionVariable")
    def track_action_variable(self) -> Optional[_builtins.str]:
        """
        Variable name
        """
        return pulumi.get(self, "track_action_variable")

    @_builtins.property
    @pulumi.getter(name="trackerId")
    def tracker_id(self) -> Optional[_builtins.int]:
        """
        Tracker ID
          - Range: `1`-`1000`
        """
        return pulumi.get(self, "tracker_id")

    @_builtins.property
    @pulumi.getter(name="trackerIdVariable")
    def tracker_id_variable(self) -> Optional[_builtins.str]:
        """
        Variable name
        """
        return pulumi.get(self, "tracker_id_variable")


@pulumi.output_type
class CiscoVpnInterfaceFeatureTemplateIpv6AccessList(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "aclName":
            suggest = "acl_name"
        elif key == "aclNameVariable":
            suggest = "acl_name_variable"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in CiscoVpnInterfaceFeatureTemplateIpv6AccessList. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        CiscoVpnInterfaceFeatureTemplateIpv6AccessList.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        CiscoVpnInterfaceFeatureTemplateIpv6AccessList.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 acl_name: Optional[_builtins.str] = None,
                 acl_name_variable: Optional[_builtins.str] = None,
                 direction: Optional[_builtins.str] = None,
                 optional: Optional[_builtins.bool] = None):
        """
        :param _builtins.str acl_name: Name of access list
        :param _builtins.str acl_name_variable: Variable name
        :param _builtins.str direction: Direction
                 - Choices: `in`, `out`
        :param _builtins.bool optional: Indicates if list item is considered optional.
        """
        if acl_name is not None:
            pulumi.set(__self__, "acl_name", acl_name)
        if acl_name_variable is not None:
            pulumi.set(__self__, "acl_name_variable", acl_name_variable)
        if direction is not None:
            pulumi.set(__self__, "direction", direction)
        if optional is not None:
            pulumi.set(__self__, "optional", optional)

    @_builtins.property
    @pulumi.getter(name="aclName")
    def acl_name(self) -> Optional[_builtins.str]:
        """
        Name of access list
        """
        return pulumi.get(self, "acl_name")

    @_builtins.property
    @pulumi.getter(name="aclNameVariable")
    def acl_name_variable(self) -> Optional[_builtins.str]:
        """
        Variable name
        """
        return pulumi.get(self, "acl_name_variable")

    @_builtins.property
    @pulumi.getter
    def direction(self) -> Optional[_builtins.str]:
        """
        Direction
          - Choices: `in`, `out`
        """
        return pulumi.get(self, "direction")

    @_builtins.property
    @pulumi.getter
    def optional(self) -> Optional[_builtins.bool]:
        """
        Indicates if list item is considered optional.
        """
        return pulumi.get(self, "optional")


@pulumi.output_type
class CiscoVpnInterfaceFeatureTemplateIpv6DhcpHelper(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "addressVariable":
            suggest = "address_variable"
        elif key == "vpnId":
            suggest = "vpn_id"
        elif key == "vpnIdVariable":
            suggest = "vpn_id_variable"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in CiscoVpnInterfaceFeatureTemplateIpv6DhcpHelper. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        CiscoVpnInterfaceFeatureTemplateIpv6DhcpHelper.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        CiscoVpnInterfaceFeatureTemplateIpv6DhcpHelper.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 address: Optional[_builtins.str] = None,
                 address_variable: Optional[_builtins.str] = None,
                 optional: Optional[_builtins.bool] = None,
                 vpn_id: Optional[_builtins.int] = None,
                 vpn_id_variable: Optional[_builtins.str] = None):
        """
        :param _builtins.str address: DHCPv6 Helper address
        :param _builtins.str address_variable: Variable name
        :param _builtins.bool optional: Indicates if list item is considered optional.
        :param _builtins.int vpn_id: DHCPv6 Helper VPN
                 - Range: `1`-`65536`
        :param _builtins.str vpn_id_variable: Variable name
        """
        if address is not None:
            pulumi.set(__self__, "address", address)
        if address_variable is not None:
            pulumi.set(__self__, "address_variable", address_variable)
        if optional is not None:
            pulumi.set(__self__, "optional", optional)
        if vpn_id is not None:
            pulumi.set(__self__, "vpn_id", vpn_id)
        if vpn_id_variable is not None:
            pulumi.set(__self__, "vpn_id_variable", vpn_id_variable)

    @_builtins.property
    @pulumi.getter
    def address(self) -> Optional[_builtins.str]:
        """
        DHCPv6 Helper address
        """
        return pulumi.get(self, "address")

    @_builtins.property
    @pulumi.getter(name="addressVariable")
    def address_variable(self) -> Optional[_builtins.str]:
        """
        Variable name
        """
        return pulumi.get(self, "address_variable")

    @_builtins.property
    @pulumi.getter
    def optional(self) -> Optional[_builtins.bool]:
        """
        Indicates if list item is considered optional.
        """
        return pulumi.get(self, "optional")

    @_builtins.property
    @pulumi.getter(name="vpnId")
    def vpn_id(self) -> Optional[_builtins.int]:
        """
        DHCPv6 Helper VPN
          - Range: `1`-`65536`
        """
        return pulumi.get(self, "vpn_id")

    @_builtins.property
    @pulumi.getter(name="vpnIdVariable")
    def vpn_id_variable(self) -> Optional[_builtins.str]:
        """
        Variable name
        """
        return pulumi.get(self, "vpn_id_variable")


@pulumi.output_type
class CiscoVpnInterfaceFeatureTemplateIpv6SecondaryAddress(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "addressVariable":
            suggest = "address_variable"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in CiscoVpnInterfaceFeatureTemplateIpv6SecondaryAddress. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        CiscoVpnInterfaceFeatureTemplateIpv6SecondaryAddress.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        CiscoVpnInterfaceFeatureTemplateIpv6SecondaryAddress.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 address: Optional[_builtins.str] = None,
                 address_variable: Optional[_builtins.str] = None,
                 optional: Optional[_builtins.bool] = None):
        """
        :param _builtins.str address: IPv6 Address
        :param _builtins.str address_variable: Variable name
        :param _builtins.bool optional: Indicates if list item is considered optional.
        """
        if address is not None:
            pulumi.set(__self__, "address", address)
        if address_variable is not None:
            pulumi.set(__self__, "address_variable", address_variable)
        if optional is not None:
            pulumi.set(__self__, "optional", optional)

    @_builtins.property
    @pulumi.getter
    def address(self) -> Optional[_builtins.str]:
        """
        IPv6 Address
        """
        return pulumi.get(self, "address")

    @_builtins.property
    @pulumi.getter(name="addressVariable")
    def address_variable(self) -> Optional[_builtins.str]:
        """
        Variable name
        """
        return pulumi.get(self, "address_variable")

    @_builtins.property
    @pulumi.getter
    def optional(self) -> Optional[_builtins.bool]:
        """
        Indicates if list item is considered optional.
        """
        return pulumi.get(self, "optional")


@pulumi.output_type
class CiscoVpnInterfaceFeatureTemplateIpv6Vrrp(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "groupId":
            suggest = "group_id"
        elif key == "groupIdVariable":
            suggest = "group_id_variable"
        elif key == "ipv6Addresses":
            suggest = "ipv6_addresses"
        elif key == "priorityVariable":
            suggest = "priority_variable"
        elif key == "timerVariable":
            suggest = "timer_variable"
        elif key == "trackOmp":
            suggest = "track_omp"
        elif key == "trackOmpVariable":
            suggest = "track_omp_variable"
        elif key == "trackPrefixList":
            suggest = "track_prefix_list"
        elif key == "trackPrefixListVariable":
            suggest = "track_prefix_list_variable"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in CiscoVpnInterfaceFeatureTemplateIpv6Vrrp. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        CiscoVpnInterfaceFeatureTemplateIpv6Vrrp.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        CiscoVpnInterfaceFeatureTemplateIpv6Vrrp.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 group_id: Optional[_builtins.int] = None,
                 group_id_variable: Optional[_builtins.str] = None,
                 ipv6_addresses: Optional[Sequence['outputs.CiscoVpnInterfaceFeatureTemplateIpv6VrrpIpv6Address']] = None,
                 optional: Optional[_builtins.bool] = None,
                 priority: Optional[_builtins.int] = None,
                 priority_variable: Optional[_builtins.str] = None,
                 timer: Optional[_builtins.int] = None,
                 timer_variable: Optional[_builtins.str] = None,
                 track_omp: Optional[_builtins.bool] = None,
                 track_omp_variable: Optional[_builtins.str] = None,
                 track_prefix_list: Optional[_builtins.str] = None,
                 track_prefix_list_variable: Optional[_builtins.str] = None):
        """
        :param _builtins.int group_id: Group ID
                 - Range: `1`-`255`
        :param _builtins.str group_id_variable: Variable name
        :param Sequence['CiscoVpnInterfaceFeatureTemplateIpv6VrrpIpv6AddressArgs'] ipv6_addresses: IPv6 VRRP
        :param _builtins.bool optional: Indicates if list item is considered optional.
        :param _builtins.int priority: Set priority
                 - Range: `1`-`254`
                 - Default value: `100`
        :param _builtins.str priority_variable: Variable name
        :param _builtins.int timer: Timer interval for successive advertisements, in milliseconds
                 - Range: `100`-`40950`
                 - Default value: `100`
        :param _builtins.str timer_variable: Variable name
        :param _builtins.bool track_omp: Track OMP status
                 - Default value: `false`
        :param _builtins.str track_omp_variable: Variable name
        :param _builtins.str track_prefix_list: Track Prefix List
        :param _builtins.str track_prefix_list_variable: Variable name
        """
        if group_id is not None:
            pulumi.set(__self__, "group_id", group_id)
        if group_id_variable is not None:
            pulumi.set(__self__, "group_id_variable", group_id_variable)
        if ipv6_addresses is not None:
            pulumi.set(__self__, "ipv6_addresses", ipv6_addresses)
        if optional is not None:
            pulumi.set(__self__, "optional", optional)
        if priority is not None:
            pulumi.set(__self__, "priority", priority)
        if priority_variable is not None:
            pulumi.set(__self__, "priority_variable", priority_variable)
        if timer is not None:
            pulumi.set(__self__, "timer", timer)
        if timer_variable is not None:
            pulumi.set(__self__, "timer_variable", timer_variable)
        if track_omp is not None:
            pulumi.set(__self__, "track_omp", track_omp)
        if track_omp_variable is not None:
            pulumi.set(__self__, "track_omp_variable", track_omp_variable)
        if track_prefix_list is not None:
            pulumi.set(__self__, "track_prefix_list", track_prefix_list)
        if track_prefix_list_variable is not None:
            pulumi.set(__self__, "track_prefix_list_variable", track_prefix_list_variable)

    @_builtins.property
    @pulumi.getter(name="groupId")
    def group_id(self) -> Optional[_builtins.int]:
        """
        Group ID
          - Range: `1`-`255`
        """
        return pulumi.get(self, "group_id")

    @_builtins.property
    @pulumi.getter(name="groupIdVariable")
    def group_id_variable(self) -> Optional[_builtins.str]:
        """
        Variable name
        """
        return pulumi.get(self, "group_id_variable")

    @_builtins.property
    @pulumi.getter(name="ipv6Addresses")
    def ipv6_addresses(self) -> Optional[Sequence['outputs.CiscoVpnInterfaceFeatureTemplateIpv6VrrpIpv6Address']]:
        """
        IPv6 VRRP
        """
        return pulumi.get(self, "ipv6_addresses")

    @_builtins.property
    @pulumi.getter
    def optional(self) -> Optional[_builtins.bool]:
        """
        Indicates if list item is considered optional.
        """
        return pulumi.get(self, "optional")

    @_builtins.property
    @pulumi.getter
    def priority(self) -> Optional[_builtins.int]:
        """
        Set priority
          - Range: `1`-`254`
          - Default value: `100`
        """
        return pulumi.get(self, "priority")

    @_builtins.property
    @pulumi.getter(name="priorityVariable")
    def priority_variable(self) -> Optional[_builtins.str]:
        """
        Variable name
        """
        return pulumi.get(self, "priority_variable")

    @_builtins.property
    @pulumi.getter
    def timer(self) -> Optional[_builtins.int]:
        """
        Timer interval for successive advertisements, in milliseconds
          - Range: `100`-`40950`
          - Default value: `100`
        """
        return pulumi.get(self, "timer")

    @_builtins.property
    @pulumi.getter(name="timerVariable")
    def timer_variable(self) -> Optional[_builtins.str]:
        """
        Variable name
        """
        return pulumi.get(self, "timer_variable")

    @_builtins.property
    @pulumi.getter(name="trackOmp")
    def track_omp(self) -> Optional[_builtins.bool]:
        """
        Track OMP status
          - Default value: `false`
        """
        return pulumi.get(self, "track_omp")

    @_builtins.property
    @pulumi.getter(name="trackOmpVariable")
    def track_omp_variable(self) -> Optional[_builtins.str]:
        """
        Variable name
        """
        return pulumi.get(self, "track_omp_variable")

    @_builtins.property
    @pulumi.getter(name="trackPrefixList")
    def track_prefix_list(self) -> Optional[_builtins.str]:
        """
        Track Prefix List
        """
        return pulumi.get(self, "track_prefix_list")

    @_builtins.property
    @pulumi.getter(name="trackPrefixListVariable")
    def track_prefix_list_variable(self) -> Optional[_builtins.str]:
        """
        Variable name
        """
        return pulumi.get(self, "track_prefix_list_variable")


@pulumi.output_type
class CiscoVpnInterfaceFeatureTemplateIpv6VrrpIpv6Address(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "ipv6LinkLocal":
            suggest = "ipv6_link_local"
        elif key == "ipv6LinkLocalVariable":
            suggest = "ipv6_link_local_variable"
        elif key == "prefixVariable":
            suggest = "prefix_variable"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in CiscoVpnInterfaceFeatureTemplateIpv6VrrpIpv6Address. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        CiscoVpnInterfaceFeatureTemplateIpv6VrrpIpv6Address.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        CiscoVpnInterfaceFeatureTemplateIpv6VrrpIpv6Address.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 ipv6_link_local: Optional[_builtins.str] = None,
                 ipv6_link_local_variable: Optional[_builtins.str] = None,
                 optional: Optional[_builtins.bool] = None,
                 prefix: Optional[_builtins.str] = None,
                 prefix_variable: Optional[_builtins.str] = None):
        """
        :param _builtins.str ipv6_link_local: Use link-local IPv6 Address
        :param _builtins.str ipv6_link_local_variable: Variable name
        :param _builtins.bool optional: Indicates if list item is considered optional.
        :param _builtins.str prefix: Assign Global IPv6 Prefix
        :param _builtins.str prefix_variable: Variable name
        """
        if ipv6_link_local is not None:
            pulumi.set(__self__, "ipv6_link_local", ipv6_link_local)
        if ipv6_link_local_variable is not None:
            pulumi.set(__self__, "ipv6_link_local_variable", ipv6_link_local_variable)
        if optional is not None:
            pulumi.set(__self__, "optional", optional)
        if prefix is not None:
            pulumi.set(__self__, "prefix", prefix)
        if prefix_variable is not None:
            pulumi.set(__self__, "prefix_variable", prefix_variable)

    @_builtins.property
    @pulumi.getter(name="ipv6LinkLocal")
    def ipv6_link_local(self) -> Optional[_builtins.str]:
        """
        Use link-local IPv6 Address
        """
        return pulumi.get(self, "ipv6_link_local")

    @_builtins.property
    @pulumi.getter(name="ipv6LinkLocalVariable")
    def ipv6_link_local_variable(self) -> Optional[_builtins.str]:
        """
        Variable name
        """
        return pulumi.get(self, "ipv6_link_local_variable")

    @_builtins.property
    @pulumi.getter
    def optional(self) -> Optional[_builtins.bool]:
        """
        Indicates if list item is considered optional.
        """
        return pulumi.get(self, "optional")

    @_builtins.property
    @pulumi.getter
    def prefix(self) -> Optional[_builtins.str]:
        """
        Assign Global IPv6 Prefix
        """
        return pulumi.get(self, "prefix")

    @_builtins.property
    @pulumi.getter(name="prefixVariable")
    def prefix_variable(self) -> Optional[_builtins.str]:
        """
        Variable name
        """
        return pulumi.get(self, "prefix_variable")


@pulumi.output_type
class CiscoVpnInterfaceFeatureTemplateStaticArp(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "ipAddress":
            suggest = "ip_address"
        elif key == "ipAddressVariable":
            suggest = "ip_address_variable"
        elif key == "macVariable":
            suggest = "mac_variable"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in CiscoVpnInterfaceFeatureTemplateStaticArp. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        CiscoVpnInterfaceFeatureTemplateStaticArp.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        CiscoVpnInterfaceFeatureTemplateStaticArp.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 ip_address: Optional[_builtins.str] = None,
                 ip_address_variable: Optional[_builtins.str] = None,
                 mac: Optional[_builtins.str] = None,
                 mac_variable: Optional[_builtins.str] = None,
                 optional: Optional[_builtins.bool] = None):
        """
        :param _builtins.str ip_address: IP Address
        :param _builtins.str ip_address_variable: Variable name
        :param _builtins.str mac: MAC address
        :param _builtins.str mac_variable: Variable name
        :param _builtins.bool optional: Indicates if list item is considered optional.
        """
        if ip_address is not None:
            pulumi.set(__self__, "ip_address", ip_address)
        if ip_address_variable is not None:
            pulumi.set(__self__, "ip_address_variable", ip_address_variable)
        if mac is not None:
            pulumi.set(__self__, "mac", mac)
        if mac_variable is not None:
            pulumi.set(__self__, "mac_variable", mac_variable)
        if optional is not None:
            pulumi.set(__self__, "optional", optional)

    @_builtins.property
    @pulumi.getter(name="ipAddress")
    def ip_address(self) -> Optional[_builtins.str]:
        """
        IP Address
        """
        return pulumi.get(self, "ip_address")

    @_builtins.property
    @pulumi.getter(name="ipAddressVariable")
    def ip_address_variable(self) -> Optional[_builtins.str]:
        """
        Variable name
        """
        return pulumi.get(self, "ip_address_variable")

    @_builtins.property
    @pulumi.getter
    def mac(self) -> Optional[_builtins.str]:
        """
        MAC address
        """
        return pulumi.get(self, "mac")

    @_builtins.property
    @pulumi.getter(name="macVariable")
    def mac_variable(self) -> Optional[_builtins.str]:
        """
        Variable name
        """
        return pulumi.get(self, "mac_variable")

    @_builtins.property
    @pulumi.getter
    def optional(self) -> Optional[_builtins.bool]:
        """
        Indicates if list item is considered optional.
        """
        return pulumi.get(self, "optional")


@pulumi.output_type
class CiscoVpnInterfaceFeatureTemplateStaticNat66Entry(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "sourcePrefix":
            suggest = "source_prefix"
        elif key == "sourcePrefixVariable":
            suggest = "source_prefix_variable"
        elif key == "sourceVpnId":
            suggest = "source_vpn_id"
        elif key == "sourceVpnIdVariable":
            suggest = "source_vpn_id_variable"
        elif key == "translatedSourcePrefix":
            suggest = "translated_source_prefix"
        elif key == "translatedSourcePrefixVariable":
            suggest = "translated_source_prefix_variable"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in CiscoVpnInterfaceFeatureTemplateStaticNat66Entry. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        CiscoVpnInterfaceFeatureTemplateStaticNat66Entry.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        CiscoVpnInterfaceFeatureTemplateStaticNat66Entry.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 optional: Optional[_builtins.bool] = None,
                 source_prefix: Optional[_builtins.str] = None,
                 source_prefix_variable: Optional[_builtins.str] = None,
                 source_vpn_id: Optional[_builtins.int] = None,
                 source_vpn_id_variable: Optional[_builtins.str] = None,
                 translated_source_prefix: Optional[_builtins.str] = None,
                 translated_source_prefix_variable: Optional[_builtins.str] = None):
        """
        :param _builtins.bool optional: Indicates if list item is considered optional.
        :param _builtins.str source_prefix: Source Prefix
        :param _builtins.str source_prefix_variable: Variable name
        :param _builtins.int source_vpn_id: Source VPN ID
                 - Range: `0`-`65530`
                 - Default value: `0`
        :param _builtins.str source_vpn_id_variable: Variable name
        :param _builtins.str translated_source_prefix: Translated Source Prefix
        :param _builtins.str translated_source_prefix_variable: Variable name
        """
        if optional is not None:
            pulumi.set(__self__, "optional", optional)
        if source_prefix is not None:
            pulumi.set(__self__, "source_prefix", source_prefix)
        if source_prefix_variable is not None:
            pulumi.set(__self__, "source_prefix_variable", source_prefix_variable)
        if source_vpn_id is not None:
            pulumi.set(__self__, "source_vpn_id", source_vpn_id)
        if source_vpn_id_variable is not None:
            pulumi.set(__self__, "source_vpn_id_variable", source_vpn_id_variable)
        if translated_source_prefix is not None:
            pulumi.set(__self__, "translated_source_prefix", translated_source_prefix)
        if translated_source_prefix_variable is not None:
            pulumi.set(__self__, "translated_source_prefix_variable", translated_source_prefix_variable)

    @_builtins.property
    @pulumi.getter
    def optional(self) -> Optional[_builtins.bool]:
        """
        Indicates if list item is considered optional.
        """
        return pulumi.get(self, "optional")

    @_builtins.property
    @pulumi.getter(name="sourcePrefix")
    def source_prefix(self) -> Optional[_builtins.str]:
        """
        Source Prefix
        """
        return pulumi.get(self, "source_prefix")

    @_builtins.property
    @pulumi.getter(name="sourcePrefixVariable")
    def source_prefix_variable(self) -> Optional[_builtins.str]:
        """
        Variable name
        """
        return pulumi.get(self, "source_prefix_variable")

    @_builtins.property
    @pulumi.getter(name="sourceVpnId")
    def source_vpn_id(self) -> Optional[_builtins.int]:
        """
        Source VPN ID
          - Range: `0`-`65530`
          - Default value: `0`
        """
        return pulumi.get(self, "source_vpn_id")

    @_builtins.property
    @pulumi.getter(name="sourceVpnIdVariable")
    def source_vpn_id_variable(self) -> Optional[_builtins.str]:
        """
        Variable name
        """
        return pulumi.get(self, "source_vpn_id_variable")

    @_builtins.property
    @pulumi.getter(name="translatedSourcePrefix")
    def translated_source_prefix(self) -> Optional[_builtins.str]:
        """
        Translated Source Prefix
        """
        return pulumi.get(self, "translated_source_prefix")

    @_builtins.property
    @pulumi.getter(name="translatedSourcePrefixVariable")
    def translated_source_prefix_variable(self) -> Optional[_builtins.str]:
        """
        Variable name
        """
        return pulumi.get(self, "translated_source_prefix_variable")


@pulumi.output_type
class CiscoVpnInterfaceFeatureTemplateStaticNatEntry(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "sourceIp":
            suggest = "source_ip"
        elif key == "sourceIpVariable":
            suggest = "source_ip_variable"
        elif key == "sourceVpnId":
            suggest = "source_vpn_id"
        elif key == "sourceVpnIdVariable":
            suggest = "source_vpn_id_variable"
        elif key == "staticNatDirection":
            suggest = "static_nat_direction"
        elif key == "staticNatDirectionVariable":
            suggest = "static_nat_direction_variable"
        elif key == "translateIp":
            suggest = "translate_ip"
        elif key == "translateIpVariable":
            suggest = "translate_ip_variable"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in CiscoVpnInterfaceFeatureTemplateStaticNatEntry. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        CiscoVpnInterfaceFeatureTemplateStaticNatEntry.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        CiscoVpnInterfaceFeatureTemplateStaticNatEntry.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 optional: Optional[_builtins.bool] = None,
                 source_ip: Optional[_builtins.str] = None,
                 source_ip_variable: Optional[_builtins.str] = None,
                 source_vpn_id: Optional[_builtins.int] = None,
                 source_vpn_id_variable: Optional[_builtins.str] = None,
                 static_nat_direction: Optional[_builtins.str] = None,
                 static_nat_direction_variable: Optional[_builtins.str] = None,
                 translate_ip: Optional[_builtins.str] = None,
                 translate_ip_variable: Optional[_builtins.str] = None):
        """
        :param _builtins.bool optional: Indicates if list item is considered optional.
        :param _builtins.str source_ip: Source IP address to be translated
        :param _builtins.str source_ip_variable: Variable name
        :param _builtins.int source_vpn_id: Configure VPN ID
                 - Range: `0`-`65530`
                 - Default value: `0`
        :param _builtins.str source_vpn_id_variable: Variable name
        :param _builtins.str static_nat_direction: Direction of static NAT translation
                 - Choices: `inside`, `outside`
                 - Default value: `inside`
        :param _builtins.str static_nat_direction_variable: Variable name
        :param _builtins.str translate_ip: Statically translated source IP address
        :param _builtins.str translate_ip_variable: Variable name
        """
        if optional is not None:
            pulumi.set(__self__, "optional", optional)
        if source_ip is not None:
            pulumi.set(__self__, "source_ip", source_ip)
        if source_ip_variable is not None:
            pulumi.set(__self__, "source_ip_variable", source_ip_variable)
        if source_vpn_id is not None:
            pulumi.set(__self__, "source_vpn_id", source_vpn_id)
        if source_vpn_id_variable is not None:
            pulumi.set(__self__, "source_vpn_id_variable", source_vpn_id_variable)
        if static_nat_direction is not None:
            pulumi.set(__self__, "static_nat_direction", static_nat_direction)
        if static_nat_direction_variable is not None:
            pulumi.set(__self__, "static_nat_direction_variable", static_nat_direction_variable)
        if translate_ip is not None:
            pulumi.set(__self__, "translate_ip", translate_ip)
        if translate_ip_variable is not None:
            pulumi.set(__self__, "translate_ip_variable", translate_ip_variable)

    @_builtins.property
    @pulumi.getter
    def optional(self) -> Optional[_builtins.bool]:
        """
        Indicates if list item is considered optional.
        """
        return pulumi.get(self, "optional")

    @_builtins.property
    @pulumi.getter(name="sourceIp")
    def source_ip(self) -> Optional[_builtins.str]:
        """
        Source IP address to be translated
        """
        return pulumi.get(self, "source_ip")

    @_builtins.property
    @pulumi.getter(name="sourceIpVariable")
    def source_ip_variable(self) -> Optional[_builtins.str]:
        """
        Variable name
        """
        return pulumi.get(self, "source_ip_variable")

    @_builtins.property
    @pulumi.getter(name="sourceVpnId")
    def source_vpn_id(self) -> Optional[_builtins.int]:
        """
        Configure VPN ID
          - Range: `0`-`65530`
          - Default value: `0`
        """
        return pulumi.get(self, "source_vpn_id")

    @_builtins.property
    @pulumi.getter(name="sourceVpnIdVariable")
    def source_vpn_id_variable(self) -> Optional[_builtins.str]:
        """
        Variable name
        """
        return pulumi.get(self, "source_vpn_id_variable")

    @_builtins.property
    @pulumi.getter(name="staticNatDirection")
    def static_nat_direction(self) -> Optional[_builtins.str]:
        """
        Direction of static NAT translation
          - Choices: `inside`, `outside`
          - Default value: `inside`
        """
        return pulumi.get(self, "static_nat_direction")

    @_builtins.property
    @pulumi.getter(name="staticNatDirectionVariable")
    def static_nat_direction_variable(self) -> Optional[_builtins.str]:
        """
        Variable name
        """
        return pulumi.get(self, "static_nat_direction_variable")

    @_builtins.property
    @pulumi.getter(name="translateIp")
    def translate_ip(self) -> Optional[_builtins.str]:
        """
        Statically translated source IP address
        """
        return pulumi.get(self, "translate_ip")

    @_builtins.property
    @pulumi.getter(name="translateIpVariable")
    def translate_ip_variable(self) -> Optional[_builtins.str]:
        """
        Variable name
        """
        return pulumi.get(self, "translate_ip_variable")


@pulumi.output_type
class CiscoVpnInterfaceFeatureTemplateStaticPortForwardEntry(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "protocolVariable":
            suggest = "protocol_variable"
        elif key == "sourceIp":
            suggest = "source_ip"
        elif key == "sourceIpVariable":
            suggest = "source_ip_variable"
        elif key == "sourcePort":
            suggest = "source_port"
        elif key == "sourcePortVariable":
            suggest = "source_port_variable"
        elif key == "sourceVpnId":
            suggest = "source_vpn_id"
        elif key == "sourceVpnIdVariable":
            suggest = "source_vpn_id_variable"
        elif key == "staticNatDirection":
            suggest = "static_nat_direction"
        elif key == "staticNatDirectionVariable":
            suggest = "static_nat_direction_variable"
        elif key == "translateIp":
            suggest = "translate_ip"
        elif key == "translateIpVariable":
            suggest = "translate_ip_variable"
        elif key == "translatePort":
            suggest = "translate_port"
        elif key == "translatePortVariable":
            suggest = "translate_port_variable"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in CiscoVpnInterfaceFeatureTemplateStaticPortForwardEntry. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        CiscoVpnInterfaceFeatureTemplateStaticPortForwardEntry.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        CiscoVpnInterfaceFeatureTemplateStaticPortForwardEntry.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 optional: Optional[_builtins.bool] = None,
                 protocol: Optional[_builtins.str] = None,
                 protocol_variable: Optional[_builtins.str] = None,
                 source_ip: Optional[_builtins.str] = None,
                 source_ip_variable: Optional[_builtins.str] = None,
                 source_port: Optional[_builtins.int] = None,
                 source_port_variable: Optional[_builtins.str] = None,
                 source_vpn_id: Optional[_builtins.int] = None,
                 source_vpn_id_variable: Optional[_builtins.str] = None,
                 static_nat_direction: Optional[_builtins.str] = None,
                 static_nat_direction_variable: Optional[_builtins.str] = None,
                 translate_ip: Optional[_builtins.str] = None,
                 translate_ip_variable: Optional[_builtins.str] = None,
                 translate_port: Optional[_builtins.int] = None,
                 translate_port_variable: Optional[_builtins.str] = None):
        """
        :param _builtins.bool optional: Indicates if list item is considered optional.
        :param _builtins.str protocol: Protocol
                 - Choices: `tcp`, `udp`
        :param _builtins.str protocol_variable: Variable name
        :param _builtins.str source_ip: Source IP address to be translated
        :param _builtins.str source_ip_variable: Variable name
        :param _builtins.int source_port: Source Port
                 - Range: `0`-`65535`
                 - Default value: `0`
        :param _builtins.str source_port_variable: Variable name
        :param _builtins.int source_vpn_id: Configure VPN ID
                 - Range: `0`-`65530`
                 - Default value: `0`
        :param _builtins.str source_vpn_id_variable: Variable name
        :param _builtins.str static_nat_direction: Direction of static NAT translation
                 - Choices: `inside`, `outside`
                 - Default value: `inside`
        :param _builtins.str static_nat_direction_variable: Variable name
        :param _builtins.str translate_ip: Statically translated source IP address
        :param _builtins.str translate_ip_variable: Variable name
        :param _builtins.int translate_port: Translate Port
                 - Range: `0`-`65535`
                 - Default value: `0`
        :param _builtins.str translate_port_variable: Variable name
        """
        if optional is not None:
            pulumi.set(__self__, "optional", optional)
        if protocol is not None:
            pulumi.set(__self__, "protocol", protocol)
        if protocol_variable is not None:
            pulumi.set(__self__, "protocol_variable", protocol_variable)
        if source_ip is not None:
            pulumi.set(__self__, "source_ip", source_ip)
        if source_ip_variable is not None:
            pulumi.set(__self__, "source_ip_variable", source_ip_variable)
        if source_port is not None:
            pulumi.set(__self__, "source_port", source_port)
        if source_port_variable is not None:
            pulumi.set(__self__, "source_port_variable", source_port_variable)
        if source_vpn_id is not None:
            pulumi.set(__self__, "source_vpn_id", source_vpn_id)
        if source_vpn_id_variable is not None:
            pulumi.set(__self__, "source_vpn_id_variable", source_vpn_id_variable)
        if static_nat_direction is not None:
            pulumi.set(__self__, "static_nat_direction", static_nat_direction)
        if static_nat_direction_variable is not None:
            pulumi.set(__self__, "static_nat_direction_variable", static_nat_direction_variable)
        if translate_ip is not None:
            pulumi.set(__self__, "translate_ip", translate_ip)
        if translate_ip_variable is not None:
            pulumi.set(__self__, "translate_ip_variable", translate_ip_variable)
        if translate_port is not None:
            pulumi.set(__self__, "translate_port", translate_port)
        if translate_port_variable is not None:
            pulumi.set(__self__, "translate_port_variable", translate_port_variable)

    @_builtins.property
    @pulumi.getter
    def optional(self) -> Optional[_builtins.bool]:
        """
        Indicates if list item is considered optional.
        """
        return pulumi.get(self, "optional")

    @_builtins.property
    @pulumi.getter
    def protocol(self) -> Optional[_builtins.str]:
        """
        Protocol
          - Choices: `tcp`, `udp`
        """
        return pulumi.get(self, "protocol")

    @_builtins.property
    @pulumi.getter(name="protocolVariable")
    def protocol_variable(self) -> Optional[_builtins.str]:
        """
        Variable name
        """
        return pulumi.get(self, "protocol_variable")

    @_builtins.property
    @pulumi.getter(name="sourceIp")
    def source_ip(self) -> Optional[_builtins.str]:
        """
        Source IP address to be translated
        """
        return pulumi.get(self, "source_ip")

    @_builtins.property
    @pulumi.getter(name="sourceIpVariable")
    def source_ip_variable(self) -> Optional[_builtins.str]:
        """
        Variable name
        """
        return pulumi.get(self, "source_ip_variable")

    @_builtins.property
    @pulumi.getter(name="sourcePort")
    def source_port(self) -> Optional[_builtins.int]:
        """
        Source Port
          - Range: `0`-`65535`
          - Default value: `0`
        """
        return pulumi.get(self, "source_port")

    @_builtins.property
    @pulumi.getter(name="sourcePortVariable")
    def source_port_variable(self) -> Optional[_builtins.str]:
        """
        Variable name
        """
        return pulumi.get(self, "source_port_variable")

    @_builtins.property
    @pulumi.getter(name="sourceVpnId")
    def source_vpn_id(self) -> Optional[_builtins.int]:
        """
        Configure VPN ID
          - Range: `0`-`65530`
          - Default value: `0`
        """
        return pulumi.get(self, "source_vpn_id")

    @_builtins.property
    @pulumi.getter(name="sourceVpnIdVariable")
    def source_vpn_id_variable(self) -> Optional[_builtins.str]:
        """
        Variable name
        """
        return pulumi.get(self, "source_vpn_id_variable")

    @_builtins.property
    @pulumi.getter(name="staticNatDirection")
    def static_nat_direction(self) -> Optional[_builtins.str]:
        """
        Direction of static NAT translation
          - Choices: `inside`, `outside`
          - Default value: `inside`
        """
        return pulumi.get(self, "static_nat_direction")

    @_builtins.property
    @pulumi.getter(name="staticNatDirectionVariable")
    def static_nat_direction_variable(self) -> Optional[_builtins.str]:
        """
        Variable name
        """
        return pulumi.get(self, "static_nat_direction_variable")

    @_builtins.property
    @pulumi.getter(name="translateIp")
    def translate_ip(self) -> Optional[_builtins.str]:
        """
        Statically translated source IP address
        """
        return pulumi.get(self, "translate_ip")

    @_builtins.property
    @pulumi.getter(name="translateIpVariable")
    def translate_ip_variable(self) -> Optional[_builtins.str]:
        """
        Variable name
        """
        return pulumi.get(self, "translate_ip_variable")

    @_builtins.property
    @pulumi.getter(name="translatePort")
    def translate_port(self) -> Optional[_builtins.int]:
        """
        Translate Port
          - Range: `0`-`65535`
          - Default value: `0`
        """
        return pulumi.get(self, "translate_port")

    @_builtins.property
    @pulumi.getter(name="translatePortVariable")
    def translate_port_variable(self) -> Optional[_builtins.str]:
        """
        Variable name
        """
        return pulumi.get(self, "translate_port_variable")


@pulumi.output_type
class CiscoVpnInterfaceFeatureTemplateTunnelInterfaceEncapsulation(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "preferenceVariable":
            suggest = "preference_variable"
        elif key == "weightVariable":
            suggest = "weight_variable"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in CiscoVpnInterfaceFeatureTemplateTunnelInterfaceEncapsulation. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        CiscoVpnInterfaceFeatureTemplateTunnelInterfaceEncapsulation.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        CiscoVpnInterfaceFeatureTemplateTunnelInterfaceEncapsulation.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 encapsulation: Optional[_builtins.str] = None,
                 optional: Optional[_builtins.bool] = None,
                 preference: Optional[_builtins.int] = None,
                 preference_variable: Optional[_builtins.str] = None,
                 weight: Optional[_builtins.int] = None,
                 weight_variable: Optional[_builtins.str] = None):
        """
        :param _builtins.str encapsulation: Encapsulation
                 - Choices: `gre`, `ipsec`
        :param _builtins.bool optional: Indicates if list item is considered optional.
        :param _builtins.int preference: Set preference for TLOC
                 - Range: `0`-`4294967295`
        :param _builtins.str preference_variable: Variable name
        :param _builtins.int weight: Set weight for TLOC
                 - Range: `1`-`255`
                 - Default value: `1`
        :param _builtins.str weight_variable: Variable name
        """
        if encapsulation is not None:
            pulumi.set(__self__, "encapsulation", encapsulation)
        if optional is not None:
            pulumi.set(__self__, "optional", optional)
        if preference is not None:
            pulumi.set(__self__, "preference", preference)
        if preference_variable is not None:
            pulumi.set(__self__, "preference_variable", preference_variable)
        if weight is not None:
            pulumi.set(__self__, "weight", weight)
        if weight_variable is not None:
            pulumi.set(__self__, "weight_variable", weight_variable)

    @_builtins.property
    @pulumi.getter
    def encapsulation(self) -> Optional[_builtins.str]:
        """
        Encapsulation
          - Choices: `gre`, `ipsec`
        """
        return pulumi.get(self, "encapsulation")

    @_builtins.property
    @pulumi.getter
    def optional(self) -> Optional[_builtins.bool]:
        """
        Indicates if list item is considered optional.
        """
        return pulumi.get(self, "optional")

    @_builtins.property
    @pulumi.getter
    def preference(self) -> Optional[_builtins.int]:
        """
        Set preference for TLOC
          - Range: `0`-`4294967295`
        """
        return pulumi.get(self, "preference")

    @_builtins.property
    @pulumi.getter(name="preferenceVariable")
    def preference_variable(self) -> Optional[_builtins.str]:
        """
        Variable name
        """
        return pulumi.get(self, "preference_variable")

    @_builtins.property
    @pulumi.getter
    def weight(self) -> Optional[_builtins.int]:
        """
        Set weight for TLOC
          - Range: `1`-`255`
          - Default value: `1`
        """
        return pulumi.get(self, "weight")

    @_builtins.property
    @pulumi.getter(name="weightVariable")
    def weight_variable(self) -> Optional[_builtins.str]:
        """
        Variable name
        """
        return pulumi.get(self, "weight_variable")


@pulumi.output_type
class CiscoVpnInterfaceGreFeatureTemplateAccessList(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "aclName":
            suggest = "acl_name"
        elif key == "aclNameVariable":
            suggest = "acl_name_variable"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in CiscoVpnInterfaceGreFeatureTemplateAccessList. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        CiscoVpnInterfaceGreFeatureTemplateAccessList.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        CiscoVpnInterfaceGreFeatureTemplateAccessList.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 acl_name: Optional[_builtins.str] = None,
                 acl_name_variable: Optional[_builtins.str] = None,
                 direction: Optional[_builtins.str] = None,
                 optional: Optional[_builtins.bool] = None):
        """
        :param _builtins.str acl_name: Name of access list
        :param _builtins.str acl_name_variable: Variable name
        :param _builtins.str direction: Direction
                 - Choices: `in`, `out`
        :param _builtins.bool optional: Indicates if list item is considered optional.
        """
        if acl_name is not None:
            pulumi.set(__self__, "acl_name", acl_name)
        if acl_name_variable is not None:
            pulumi.set(__self__, "acl_name_variable", acl_name_variable)
        if direction is not None:
            pulumi.set(__self__, "direction", direction)
        if optional is not None:
            pulumi.set(__self__, "optional", optional)

    @_builtins.property
    @pulumi.getter(name="aclName")
    def acl_name(self) -> Optional[_builtins.str]:
        """
        Name of access list
        """
        return pulumi.get(self, "acl_name")

    @_builtins.property
    @pulumi.getter(name="aclNameVariable")
    def acl_name_variable(self) -> Optional[_builtins.str]:
        """
        Variable name
        """
        return pulumi.get(self, "acl_name_variable")

    @_builtins.property
    @pulumi.getter
    def direction(self) -> Optional[_builtins.str]:
        """
        Direction
          - Choices: `in`, `out`
        """
        return pulumi.get(self, "direction")

    @_builtins.property
    @pulumi.getter
    def optional(self) -> Optional[_builtins.bool]:
        """
        Indicates if list item is considered optional.
        """
        return pulumi.get(self, "optional")


@pulumi.output_type
class CiscoWirelessLanFeatureTemplateSsid(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "adminState":
            suggest = "admin_state"
        elif key == "adminStateVariable":
            suggest = "admin_state_variable"
        elif key == "broadcastSsid":
            suggest = "broadcast_ssid"
        elif key == "passphraseVariable":
            suggest = "passphrase_variable"
        elif key == "qosProfile":
            suggest = "qos_profile"
        elif key == "qosProfileVariable":
            suggest = "qos_profile_variable"
        elif key == "radioType":
            suggest = "radio_type"
        elif key == "radioTypeVariable":
            suggest = "radio_type_variable"
        elif key == "radiusServerIp":
            suggest = "radius_server_ip"
        elif key == "radiusServerIpVariable":
            suggest = "radius_server_ip_variable"
        elif key == "radiusServerPort":
            suggest = "radius_server_port"
        elif key == "radiusServerPortVariable":
            suggest = "radius_server_port_variable"
        elif key == "radiusServerSecret":
            suggest = "radius_server_secret"
        elif key == "radiusServerSecretVariable":
            suggest = "radius_server_secret_variable"
        elif key == "securityType":
            suggest = "security_type"
        elif key == "securityTypeVariable":
            suggest = "security_type_variable"
        elif key == "vlanId":
            suggest = "vlan_id"
        elif key == "vlanIdVariable":
            suggest = "vlan_id_variable"
        elif key == "wirelessNetworkName":
            suggest = "wireless_network_name"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in CiscoWirelessLanFeatureTemplateSsid. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        CiscoWirelessLanFeatureTemplateSsid.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        CiscoWirelessLanFeatureTemplateSsid.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 admin_state: Optional[_builtins.bool] = None,
                 admin_state_variable: Optional[_builtins.str] = None,
                 broadcast_ssid: Optional[_builtins.bool] = None,
                 optional: Optional[_builtins.bool] = None,
                 passphrase: Optional[_builtins.str] = None,
                 passphrase_variable: Optional[_builtins.str] = None,
                 qos_profile: Optional[_builtins.str] = None,
                 qos_profile_variable: Optional[_builtins.str] = None,
                 radio_type: Optional[_builtins.str] = None,
                 radio_type_variable: Optional[_builtins.str] = None,
                 radius_server_ip: Optional[_builtins.str] = None,
                 radius_server_ip_variable: Optional[_builtins.str] = None,
                 radius_server_port: Optional[_builtins.int] = None,
                 radius_server_port_variable: Optional[_builtins.str] = None,
                 radius_server_secret: Optional[_builtins.str] = None,
                 radius_server_secret_variable: Optional[_builtins.str] = None,
                 security_type: Optional[_builtins.str] = None,
                 security_type_variable: Optional[_builtins.str] = None,
                 vlan_id: Optional[_builtins.int] = None,
                 vlan_id_variable: Optional[_builtins.str] = None,
                 wireless_network_name: Optional[_builtins.str] = None):
        """
        :param _builtins.bool admin_state: Set admin state
                 - Default value: `true`
        :param _builtins.str admin_state_variable: Variable name
        :param _builtins.bool broadcast_ssid: Enable broadcast SSID
                 - Default value: `true`
        :param _builtins.bool optional: Indicates if list item is considered optional.
        :param _builtins.str passphrase: Set passphrase
        :param _builtins.str passphrase_variable: Variable name
        :param _builtins.str qos_profile: Select QoS profile
                 - Choices: `platinum`, `gold`, `silver`, `bronze`
                 - Default value: `silver`
        :param _builtins.str qos_profile_variable: Variable name
        :param _builtins.str radio_type: Select radio type
                 - Choices: `24ghz`, `5ghz`, `all`
                 - Default value: `all`
        :param _builtins.str radio_type_variable: Variable name
        :param _builtins.str radius_server_ip: Set RADIUS server IP
        :param _builtins.str radius_server_ip_variable: Variable name
        :param _builtins.int radius_server_port: Set RADIUS server authentication port
                 - Range: `1`-`65535`
                 - Default value: `1812`
        :param _builtins.str radius_server_port_variable: Variable name
        :param _builtins.str radius_server_secret: Set RADIUS server shared secret
        :param _builtins.str radius_server_secret_variable: Variable name
        :param _builtins.str security_type: Select security type
                 - Choices: `enterprise`, `personal`, `open`
                 - Default value: `personal`
        :param _builtins.str security_type_variable: Variable name
        :param _builtins.int vlan_id: Set VLAN ID
                 - Range: `1`-`4094`
        :param _builtins.str vlan_id_variable: Variable name
        :param _builtins.str wireless_network_name: Configure wlan SSID
        """
        if admin_state is not None:
            pulumi.set(__self__, "admin_state", admin_state)
        if admin_state_variable is not None:
            pulumi.set(__self__, "admin_state_variable", admin_state_variable)
        if broadcast_ssid is not None:
            pulumi.set(__self__, "broadcast_ssid", broadcast_ssid)
        if optional is not None:
            pulumi.set(__self__, "optional", optional)
        if passphrase is not None:
            pulumi.set(__self__, "passphrase", passphrase)
        if passphrase_variable is not None:
            pulumi.set(__self__, "passphrase_variable", passphrase_variable)
        if qos_profile is not None:
            pulumi.set(__self__, "qos_profile", qos_profile)
        if qos_profile_variable is not None:
            pulumi.set(__self__, "qos_profile_variable", qos_profile_variable)
        if radio_type is not None:
            pulumi.set(__self__, "radio_type", radio_type)
        if radio_type_variable is not None:
            pulumi.set(__self__, "radio_type_variable", radio_type_variable)
        if radius_server_ip is not None:
            pulumi.set(__self__, "radius_server_ip", radius_server_ip)
        if radius_server_ip_variable is not None:
            pulumi.set(__self__, "radius_server_ip_variable", radius_server_ip_variable)
        if radius_server_port is not None:
            pulumi.set(__self__, "radius_server_port", radius_server_port)
        if radius_server_port_variable is not None:
            pulumi.set(__self__, "radius_server_port_variable", radius_server_port_variable)
        if radius_server_secret is not None:
            pulumi.set(__self__, "radius_server_secret", radius_server_secret)
        if radius_server_secret_variable is not None:
            pulumi.set(__self__, "radius_server_secret_variable", radius_server_secret_variable)
        if security_type is not None:
            pulumi.set(__self__, "security_type", security_type)
        if security_type_variable is not None:
            pulumi.set(__self__, "security_type_variable", security_type_variable)
        if vlan_id is not None:
            pulumi.set(__self__, "vlan_id", vlan_id)
        if vlan_id_variable is not None:
            pulumi.set(__self__, "vlan_id_variable", vlan_id_variable)
        if wireless_network_name is not None:
            pulumi.set(__self__, "wireless_network_name", wireless_network_name)

    @_builtins.property
    @pulumi.getter(name="adminState")
    def admin_state(self) -> Optional[_builtins.bool]:
        """
        Set admin state
          - Default value: `true`
        """
        return pulumi.get(self, "admin_state")

    @_builtins.property
    @pulumi.getter(name="adminStateVariable")
    def admin_state_variable(self) -> Optional[_builtins.str]:
        """
        Variable name
        """
        return pulumi.get(self, "admin_state_variable")

    @_builtins.property
    @pulumi.getter(name="broadcastSsid")
    def broadcast_ssid(self) -> Optional[_builtins.bool]:
        """
        Enable broadcast SSID
          - Default value: `true`
        """
        return pulumi.get(self, "broadcast_ssid")

    @_builtins.property
    @pulumi.getter
    def optional(self) -> Optional[_builtins.bool]:
        """
        Indicates if list item is considered optional.
        """
        return pulumi.get(self, "optional")

    @_builtins.property
    @pulumi.getter
    def passphrase(self) -> Optional[_builtins.str]:
        """
        Set passphrase
        """
        return pulumi.get(self, "passphrase")

    @_builtins.property
    @pulumi.getter(name="passphraseVariable")
    def passphrase_variable(self) -> Optional[_builtins.str]:
        """
        Variable name
        """
        return pulumi.get(self, "passphrase_variable")

    @_builtins.property
    @pulumi.getter(name="qosProfile")
    def qos_profile(self) -> Optional[_builtins.str]:
        """
        Select QoS profile
          - Choices: `platinum`, `gold`, `silver`, `bronze`
          - Default value: `silver`
        """
        return pulumi.get(self, "qos_profile")

    @_builtins.property
    @pulumi.getter(name="qosProfileVariable")
    def qos_profile_variable(self) -> Optional[_builtins.str]:
        """
        Variable name
        """
        return pulumi.get(self, "qos_profile_variable")

    @_builtins.property
    @pulumi.getter(name="radioType")
    def radio_type(self) -> Optional[_builtins.str]:
        """
        Select radio type
          - Choices: `24ghz`, `5ghz`, `all`
          - Default value: `all`
        """
        return pulumi.get(self, "radio_type")

    @_builtins.property
    @pulumi.getter(name="radioTypeVariable")
    def radio_type_variable(self) -> Optional[_builtins.str]:
        """
        Variable name
        """
        return pulumi.get(self, "radio_type_variable")

    @_builtins.property
    @pulumi.getter(name="radiusServerIp")
    def radius_server_ip(self) -> Optional[_builtins.str]:
        """
        Set RADIUS server IP
        """
        return pulumi.get(self, "radius_server_ip")

    @_builtins.property
    @pulumi.getter(name="radiusServerIpVariable")
    def radius_server_ip_variable(self) -> Optional[_builtins.str]:
        """
        Variable name
        """
        return pulumi.get(self, "radius_server_ip_variable")

    @_builtins.property
    @pulumi.getter(name="radiusServerPort")
    def radius_server_port(self) -> Optional[_builtins.int]:
        """
        Set RADIUS server authentication port
          - Range: `1`-`65535`
          - Default value: `1812`
        """
        return pulumi.get(self, "radius_server_port")

    @_builtins.property
    @pulumi.getter(name="radiusServerPortVariable")
    def radius_server_port_variable(self) -> Optional[_builtins.str]:
        """
        Variable name
        """
        return pulumi.get(self, "radius_server_port_variable")

    @_builtins.property
    @pulumi.getter(name="radiusServerSecret")
    def radius_server_secret(self) -> Optional[_builtins.str]:
        """
        Set RADIUS server shared secret
        """
        return pulumi.get(self, "radius_server_secret")

    @_builtins.property
    @pulumi.getter(name="radiusServerSecretVariable")
    def radius_server_secret_variable(self) -> Optional[_builtins.str]:
        """
        Variable name
        """
        return pulumi.get(self, "radius_server_secret_variable")

    @_builtins.property
    @pulumi.getter(name="securityType")
    def security_type(self) -> Optional[_builtins.str]:
        """
        Select security type
          - Choices: `enterprise`, `personal`, `open`
          - Default value: `personal`
        """
        return pulumi.get(self, "security_type")

    @_builtins.property
    @pulumi.getter(name="securityTypeVariable")
    def security_type_variable(self) -> Optional[_builtins.str]:
        """
        Variable name
        """
        return pulumi.get(self, "security_type_variable")

    @_builtins.property
    @pulumi.getter(name="vlanId")
    def vlan_id(self) -> Optional[_builtins.int]:
        """
        Set VLAN ID
          - Range: `1`-`4094`
        """
        return pulumi.get(self, "vlan_id")

    @_builtins.property
    @pulumi.getter(name="vlanIdVariable")
    def vlan_id_variable(self) -> Optional[_builtins.str]:
        """
        Variable name
        """
        return pulumi.get(self, "vlan_id_variable")

    @_builtins.property
    @pulumi.getter(name="wirelessNetworkName")
    def wireless_network_name(self) -> Optional[_builtins.str]:
        """
        Configure wlan SSID
        """
        return pulumi.get(self, "wireless_network_name")


@pulumi.output_type
class ColorListPolicyObjectEntry(dict):
    def __init__(__self__, *,
                 color: _builtins.str):
        """
        :param _builtins.str color: Color
                 - Choices: `default`, `3g`, `biz-internet`, `blue`, `bronze`, `custom1`, `custom2`, `custom3`, `gold`, `green`, `lte`, `metro-ethernet`, `mpls`, `private1`, `private2`, `private3`, `private4`, `private5`, `private6`, `public-internet`, `red`, `silver`
        """
        pulumi.set(__self__, "color", color)

    @_builtins.property
    @pulumi.getter
    def color(self) -> _builtins.str:
        """
        Color
          - Choices: `default`, `3g`, `biz-internet`, `blue`, `bronze`, `custom1`, `custom2`, `custom3`, `gold`, `green`, `lte`, `metro-ethernet`, `mpls`, `private1`, `private2`, `private3`, `private4`, `private5`, `private6`, `public-internet`, `red`, `silver`
        """
        return pulumi.get(self, "color")


@pulumi.output_type
class ConfigurationGroupDevice(dict):
    def __init__(__self__, *,
                 deploy: Optional[_builtins.bool] = None,
                 id: Optional[_builtins.str] = None,
                 variables: Optional[Sequence['outputs.ConfigurationGroupDeviceVariable']] = None):
        """
        :param _builtins.bool deploy: Deploy to device if enabled.
                 - Default value: `false`
        :param _builtins.str id: Device ID
        :param Sequence['ConfigurationGroupDeviceVariableArgs'] variables: List of variables
        """
        if deploy is not None:
            pulumi.set(__self__, "deploy", deploy)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if variables is not None:
            pulumi.set(__self__, "variables", variables)

    @_builtins.property
    @pulumi.getter
    def deploy(self) -> Optional[_builtins.bool]:
        """
        Deploy to device if enabled.
          - Default value: `false`
        """
        return pulumi.get(self, "deploy")

    @_builtins.property
    @pulumi.getter
    def id(self) -> Optional[_builtins.str]:
        """
        Device ID
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter
    def variables(self) -> Optional[Sequence['outputs.ConfigurationGroupDeviceVariable']]:
        """
        List of variables
        """
        return pulumi.get(self, "variables")


@pulumi.output_type
class ConfigurationGroupDeviceVariable(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "listValues":
            suggest = "list_values"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ConfigurationGroupDeviceVariable. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ConfigurationGroupDeviceVariable.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ConfigurationGroupDeviceVariable.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 name: _builtins.str,
                 list_values: Optional[Sequence[_builtins.str]] = None,
                 value: Optional[_builtins.str] = None):
        """
        :param _builtins.str name: Variable name
        :param Sequence[_builtins.str] list_values: Use this instead of `value` in case value is of type `List`.
        :param _builtins.str value: Variable value
        """
        pulumi.set(__self__, "name", name)
        if list_values is not None:
            pulumi.set(__self__, "list_values", list_values)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter(name="listValues")
    def list_values(self) -> Optional[Sequence[_builtins.str]]:
        """
        Use this instead of `value` in case value is of type `List`.
        """
        return pulumi.get(self, "list_values")

    @_builtins.property
    @pulumi.getter
    def value(self) -> Optional[_builtins.str]:
        """
        Variable value
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class ConfigurationGroupTopologyDevice(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "criteriaAttribute":
            suggest = "criteria_attribute"
        elif key == "criteriaValue":
            suggest = "criteria_value"
        elif key == "unsupportedFeatures":
            suggest = "unsupported_features"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ConfigurationGroupTopologyDevice. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ConfigurationGroupTopologyDevice.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ConfigurationGroupTopologyDevice.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 criteria_attribute: _builtins.str,
                 criteria_value: Optional[_builtins.str] = None,
                 unsupported_features: Optional[Sequence['outputs.ConfigurationGroupTopologyDeviceUnsupportedFeature']] = None):
        """
        :param _builtins.str criteria_attribute: Criteria attribute
                 - Choices: `tag`
        :param _builtins.str criteria_value: Criteria value
        :param Sequence['ConfigurationGroupTopologyDeviceUnsupportedFeatureArgs'] unsupported_features: List of unsupported features
        """
        pulumi.set(__self__, "criteria_attribute", criteria_attribute)
        if criteria_value is not None:
            pulumi.set(__self__, "criteria_value", criteria_value)
        if unsupported_features is not None:
            pulumi.set(__self__, "unsupported_features", unsupported_features)

    @_builtins.property
    @pulumi.getter(name="criteriaAttribute")
    def criteria_attribute(self) -> _builtins.str:
        """
        Criteria attribute
          - Choices: `tag`
        """
        return pulumi.get(self, "criteria_attribute")

    @_builtins.property
    @pulumi.getter(name="criteriaValue")
    def criteria_value(self) -> Optional[_builtins.str]:
        """
        Criteria value
        """
        return pulumi.get(self, "criteria_value")

    @_builtins.property
    @pulumi.getter(name="unsupportedFeatures")
    def unsupported_features(self) -> Optional[Sequence['outputs.ConfigurationGroupTopologyDeviceUnsupportedFeature']]:
        """
        List of unsupported features
        """
        return pulumi.get(self, "unsupported_features")


@pulumi.output_type
class ConfigurationGroupTopologyDeviceUnsupportedFeature(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "parcelId":
            suggest = "parcel_id"
        elif key == "parcelType":
            suggest = "parcel_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ConfigurationGroupTopologyDeviceUnsupportedFeature. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ConfigurationGroupTopologyDeviceUnsupportedFeature.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ConfigurationGroupTopologyDeviceUnsupportedFeature.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 parcel_id: Optional[_builtins.str] = None,
                 parcel_type: Optional[_builtins.str] = None):
        """
        :param _builtins.str parcel_id: Parcel ID
        :param _builtins.str parcel_type: Parcel type
                 - Choices: `wan/vpn/interface/gre`, `wan/vpn/interface/ethernet`, `wan/vpn/interface/cellular`, `wan/vpn/interface/ipsec`, `wan/vpn/interface/serial`, `route-policy`, `routing/bgp`, `routing/ospf`, `lan/vpn/interface/ethernet`, `lan/vpn/interface/svi`, `lan/vpn/interface/ipsec`, `lan/vpn`
        """
        if parcel_id is not None:
            pulumi.set(__self__, "parcel_id", parcel_id)
        if parcel_type is not None:
            pulumi.set(__self__, "parcel_type", parcel_type)

    @_builtins.property
    @pulumi.getter(name="parcelId")
    def parcel_id(self) -> Optional[_builtins.str]:
        """
        Parcel ID
        """
        return pulumi.get(self, "parcel_id")

    @_builtins.property
    @pulumi.getter(name="parcelType")
    def parcel_type(self) -> Optional[_builtins.str]:
        """
        Parcel type
          - Choices: `wan/vpn/interface/gre`, `wan/vpn/interface/ethernet`, `wan/vpn/interface/cellular`, `wan/vpn/interface/ipsec`, `wan/vpn/interface/serial`, `route-policy`, `routing/bgp`, `routing/ospf`, `lan/vpn/interface/ethernet`, `lan/vpn/interface/svi`, `lan/vpn/interface/ipsec`, `lan/vpn`
        """
        return pulumi.get(self, "parcel_type")


@pulumi.output_type
class CustomControlTopologyPolicyDefinitionSequence(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "actionEntries":
            suggest = "action_entries"
        elif key == "baseAction":
            suggest = "base_action"
        elif key == "ipType":
            suggest = "ip_type"
        elif key == "matchEntries":
            suggest = "match_entries"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in CustomControlTopologyPolicyDefinitionSequence. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        CustomControlTopologyPolicyDefinitionSequence.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        CustomControlTopologyPolicyDefinitionSequence.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 id: _builtins.int,
                 name: _builtins.str,
                 action_entries: Optional[Sequence['outputs.CustomControlTopologyPolicyDefinitionSequenceActionEntry']] = None,
                 base_action: Optional[_builtins.str] = None,
                 ip_type: Optional[_builtins.str] = None,
                 match_entries: Optional[Sequence['outputs.CustomControlTopologyPolicyDefinitionSequenceMatchEntry']] = None,
                 type: Optional[_builtins.str] = None):
        """
        :param _builtins.int id: Sequence ID
        :param _builtins.str name: Sequence name
        :param Sequence['CustomControlTopologyPolicyDefinitionSequenceActionEntryArgs'] action_entries: List of action entries
        :param _builtins.str base_action: Base action, either `accept` or `reject`
                 - Choices: `accept`, `reject`
        :param _builtins.str ip_type: Sequence IP type, either `ipv4`, `ipv6` or `all`
                 - Choices: `ipv4`, `ipv6`, `all`
        :param Sequence['CustomControlTopologyPolicyDefinitionSequenceMatchEntryArgs'] match_entries: List of match entries
        :param _builtins.str type: Sequence type, either `route` or `tloc`
                 - Choices: `route`, `tloc`
        """
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "name", name)
        if action_entries is not None:
            pulumi.set(__self__, "action_entries", action_entries)
        if base_action is not None:
            pulumi.set(__self__, "base_action", base_action)
        if ip_type is not None:
            pulumi.set(__self__, "ip_type", ip_type)
        if match_entries is not None:
            pulumi.set(__self__, "match_entries", match_entries)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.int:
        """
        Sequence ID
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        """
        Sequence name
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter(name="actionEntries")
    def action_entries(self) -> Optional[Sequence['outputs.CustomControlTopologyPolicyDefinitionSequenceActionEntry']]:
        """
        List of action entries
        """
        return pulumi.get(self, "action_entries")

    @_builtins.property
    @pulumi.getter(name="baseAction")
    def base_action(self) -> Optional[_builtins.str]:
        """
        Base action, either `accept` or `reject`
          - Choices: `accept`, `reject`
        """
        return pulumi.get(self, "base_action")

    @_builtins.property
    @pulumi.getter(name="ipType")
    def ip_type(self) -> Optional[_builtins.str]:
        """
        Sequence IP type, either `ipv4`, `ipv6` or `all`
          - Choices: `ipv4`, `ipv6`, `all`
        """
        return pulumi.get(self, "ip_type")

    @_builtins.property
    @pulumi.getter(name="matchEntries")
    def match_entries(self) -> Optional[Sequence['outputs.CustomControlTopologyPolicyDefinitionSequenceMatchEntry']]:
        """
        List of match entries
        """
        return pulumi.get(self, "match_entries")

    @_builtins.property
    @pulumi.getter
    def type(self) -> Optional[_builtins.str]:
        """
        Sequence type, either `route` or `tloc`
          - Choices: `route`, `tloc`
        """
        return pulumi.get(self, "type")


@pulumi.output_type
class CustomControlTopologyPolicyDefinitionSequenceActionEntry(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "exportToVpnListId":
            suggest = "export_to_vpn_list_id"
        elif key == "exportToVpnListVersion":
            suggest = "export_to_vpn_list_version"
        elif key == "setParameters":
            suggest = "set_parameters"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in CustomControlTopologyPolicyDefinitionSequenceActionEntry. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        CustomControlTopologyPolicyDefinitionSequenceActionEntry.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        CustomControlTopologyPolicyDefinitionSequenceActionEntry.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 type: _builtins.str,
                 export_to_vpn_list_id: Optional[_builtins.str] = None,
                 export_to_vpn_list_version: Optional[_builtins.int] = None,
                 set_parameters: Optional[Sequence['outputs.CustomControlTopologyPolicyDefinitionSequenceActionEntrySetParameter']] = None):
        """
        :param _builtins.str type: Type of action entry
                 - Choices: `set`, `exportTo`
        :param _builtins.str export_to_vpn_list_id: Export to VPN list ID, Attribute conditional on `type` being equal to `exportTo`
        :param _builtins.int export_to_vpn_list_version: Export to VPN list version
        :param Sequence['CustomControlTopologyPolicyDefinitionSequenceActionEntrySetParameterArgs'] set_parameters: List of set parameters, Attribute conditional on `type` being equal to `set`
        """
        pulumi.set(__self__, "type", type)
        if export_to_vpn_list_id is not None:
            pulumi.set(__self__, "export_to_vpn_list_id", export_to_vpn_list_id)
        if export_to_vpn_list_version is not None:
            pulumi.set(__self__, "export_to_vpn_list_version", export_to_vpn_list_version)
        if set_parameters is not None:
            pulumi.set(__self__, "set_parameters", set_parameters)

    @_builtins.property
    @pulumi.getter
    def type(self) -> _builtins.str:
        """
        Type of action entry
          - Choices: `set`, `exportTo`
        """
        return pulumi.get(self, "type")

    @_builtins.property
    @pulumi.getter(name="exportToVpnListId")
    def export_to_vpn_list_id(self) -> Optional[_builtins.str]:
        """
        Export to VPN list ID, Attribute conditional on `type` being equal to `exportTo`
        """
        return pulumi.get(self, "export_to_vpn_list_id")

    @_builtins.property
    @pulumi.getter(name="exportToVpnListVersion")
    def export_to_vpn_list_version(self) -> Optional[_builtins.int]:
        """
        Export to VPN list version
        """
        return pulumi.get(self, "export_to_vpn_list_version")

    @_builtins.property
    @pulumi.getter(name="setParameters")
    def set_parameters(self) -> Optional[Sequence['outputs.CustomControlTopologyPolicyDefinitionSequenceActionEntrySetParameter']]:
        """
        List of set parameters, Attribute conditional on `type` being equal to `set`
        """
        return pulumi.get(self, "set_parameters")


@pulumi.output_type
class CustomControlTopologyPolicyDefinitionSequenceActionEntrySetParameter(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "communityAdditive":
            suggest = "community_additive"
        elif key == "ompTag":
            suggest = "omp_tag"
        elif key == "serviceTlocColor":
            suggest = "service_tloc_color"
        elif key == "serviceTlocEncapsulation":
            suggest = "service_tloc_encapsulation"
        elif key == "serviceTlocIp":
            suggest = "service_tloc_ip"
        elif key == "serviceTlocListId":
            suggest = "service_tloc_list_id"
        elif key == "serviceTlocListVersion":
            suggest = "service_tloc_list_version"
        elif key == "serviceType":
            suggest = "service_type"
        elif key == "serviceVpnId":
            suggest = "service_vpn_id"
        elif key == "tlocAction":
            suggest = "tloc_action"
        elif key == "tlocColor":
            suggest = "tloc_color"
        elif key == "tlocEncapsulation":
            suggest = "tloc_encapsulation"
        elif key == "tlocIp":
            suggest = "tloc_ip"
        elif key == "tlocListId":
            suggest = "tloc_list_id"
        elif key == "tlocListVersion":
            suggest = "tloc_list_version"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in CustomControlTopologyPolicyDefinitionSequenceActionEntrySetParameter. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        CustomControlTopologyPolicyDefinitionSequenceActionEntrySetParameter.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        CustomControlTopologyPolicyDefinitionSequenceActionEntrySetParameter.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 type: _builtins.str,
                 community: Optional[_builtins.str] = None,
                 community_additive: Optional[_builtins.bool] = None,
                 omp_tag: Optional[_builtins.int] = None,
                 preference: Optional[_builtins.int] = None,
                 service_tloc_color: Optional[_builtins.str] = None,
                 service_tloc_encapsulation: Optional[_builtins.str] = None,
                 service_tloc_ip: Optional[_builtins.str] = None,
                 service_tloc_list_id: Optional[_builtins.str] = None,
                 service_tloc_list_version: Optional[_builtins.int] = None,
                 service_type: Optional[_builtins.str] = None,
                 service_vpn_id: Optional[_builtins.int] = None,
                 tloc_action: Optional[_builtins.str] = None,
                 tloc_color: Optional[_builtins.str] = None,
                 tloc_encapsulation: Optional[_builtins.str] = None,
                 tloc_ip: Optional[_builtins.str] = None,
                 tloc_list_id: Optional[_builtins.str] = None,
                 tloc_list_version: Optional[_builtins.int] = None):
        """
        :param _builtins.str type: Type of set parameter
                 - Choices: `tlocList`, `tloc`, `tlocAction`, `preference`, `ompTag`, `community`, `communityAdditive`, `service`
        :param _builtins.str community: Community value, e.g. `1000:10000` or `internet` or `local-AS`, Attribute conditional on `type` being equal to `community`
        :param _builtins.bool community_additive: Community additive, Attribute conditional on `type` being equal to `communityAdditive`
        :param _builtins.int omp_tag: OMP tag, Attribute conditional on `type` being equal to `ompTag`
                 - Range: `0`-`4294967295`
        :param _builtins.int preference: Preference, Attribute conditional on `type` being equal to `preference`
                 - Range: `0`-`4294967295`
        :param _builtins.str service_tloc_color: Service TLOC color, Attribute conditional on `type` being equal to `service`
        :param _builtins.str service_tloc_encapsulation: Service TLOC encapsulation, Attribute conditional on `type` being equal to `service`
                 - Choices: `ipsec`, `gre`
        :param _builtins.str service_tloc_ip: Service TLOC IP address, Attribute conditional on `type` being equal to `service`
        :param _builtins.str service_tloc_list_id: Service TLOC list ID, Attribute conditional on `type` being equal to `service`
        :param _builtins.int service_tloc_list_version: Service TLOC list version
        :param _builtins.str service_type: Service type, Attribute conditional on `type` being equal to `service`
                 - Choices: `FW`, `IDP`, `IDS`, `netsvc1`, `netsvc2`, `netsvc3`, `netsvc4`, `netsvc5`
        :param _builtins.int service_vpn_id: Service VPN ID, Attribute conditional on `type` being equal to `service`
                 - Range: `0`-`65536`
        :param _builtins.str tloc_action: TLOC action, Attribute conditional on `type` being equal to `tlocAction`
                 - Choices: `strict`, `primary`, `backup`, `ecmp`
        :param _builtins.str tloc_color: TLOC color, Attribute conditional on `type` being equal to `tloc`
        :param _builtins.str tloc_encapsulation: TLOC encapsulation, Attribute conditional on `type` being equal to `tloc`
                 - Choices: `ipsec`, `gre`
        :param _builtins.str tloc_ip: TLOC IP address, Attribute conditional on `type` being equal to `tloc`
        :param _builtins.str tloc_list_id: TLOC list ID, Attribute conditional on `type` being equal to `tlocList`
        :param _builtins.int tloc_list_version: TLOC list version
        """
        pulumi.set(__self__, "type", type)
        if community is not None:
            pulumi.set(__self__, "community", community)
        if community_additive is not None:
            pulumi.set(__self__, "community_additive", community_additive)
        if omp_tag is not None:
            pulumi.set(__self__, "omp_tag", omp_tag)
        if preference is not None:
            pulumi.set(__self__, "preference", preference)
        if service_tloc_color is not None:
            pulumi.set(__self__, "service_tloc_color", service_tloc_color)
        if service_tloc_encapsulation is not None:
            pulumi.set(__self__, "service_tloc_encapsulation", service_tloc_encapsulation)
        if service_tloc_ip is not None:
            pulumi.set(__self__, "service_tloc_ip", service_tloc_ip)
        if service_tloc_list_id is not None:
            pulumi.set(__self__, "service_tloc_list_id", service_tloc_list_id)
        if service_tloc_list_version is not None:
            pulumi.set(__self__, "service_tloc_list_version", service_tloc_list_version)
        if service_type is not None:
            pulumi.set(__self__, "service_type", service_type)
        if service_vpn_id is not None:
            pulumi.set(__self__, "service_vpn_id", service_vpn_id)
        if tloc_action is not None:
            pulumi.set(__self__, "tloc_action", tloc_action)
        if tloc_color is not None:
            pulumi.set(__self__, "tloc_color", tloc_color)
        if tloc_encapsulation is not None:
            pulumi.set(__self__, "tloc_encapsulation", tloc_encapsulation)
        if tloc_ip is not None:
            pulumi.set(__self__, "tloc_ip", tloc_ip)
        if tloc_list_id is not None:
            pulumi.set(__self__, "tloc_list_id", tloc_list_id)
        if tloc_list_version is not None:
            pulumi.set(__self__, "tloc_list_version", tloc_list_version)

    @_builtins.property
    @pulumi.getter
    def type(self) -> _builtins.str:
        """
        Type of set parameter
          - Choices: `tlocList`, `tloc`, `tlocAction`, `preference`, `ompTag`, `community`, `communityAdditive`, `service`
        """
        return pulumi.get(self, "type")

    @_builtins.property
    @pulumi.getter
    def community(self) -> Optional[_builtins.str]:
        """
        Community value, e.g. `1000:10000` or `internet` or `local-AS`, Attribute conditional on `type` being equal to `community`
        """
        return pulumi.get(self, "community")

    @_builtins.property
    @pulumi.getter(name="communityAdditive")
    def community_additive(self) -> Optional[_builtins.bool]:
        """
        Community additive, Attribute conditional on `type` being equal to `communityAdditive`
        """
        return pulumi.get(self, "community_additive")

    @_builtins.property
    @pulumi.getter(name="ompTag")
    def omp_tag(self) -> Optional[_builtins.int]:
        """
        OMP tag, Attribute conditional on `type` being equal to `ompTag`
          - Range: `0`-`4294967295`
        """
        return pulumi.get(self, "omp_tag")

    @_builtins.property
    @pulumi.getter
    def preference(self) -> Optional[_builtins.int]:
        """
        Preference, Attribute conditional on `type` being equal to `preference`
          - Range: `0`-`4294967295`
        """
        return pulumi.get(self, "preference")

    @_builtins.property
    @pulumi.getter(name="serviceTlocColor")
    def service_tloc_color(self) -> Optional[_builtins.str]:
        """
        Service TLOC color, Attribute conditional on `type` being equal to `service`
        """
        return pulumi.get(self, "service_tloc_color")

    @_builtins.property
    @pulumi.getter(name="serviceTlocEncapsulation")
    def service_tloc_encapsulation(self) -> Optional[_builtins.str]:
        """
        Service TLOC encapsulation, Attribute conditional on `type` being equal to `service`
          - Choices: `ipsec`, `gre`
        """
        return pulumi.get(self, "service_tloc_encapsulation")

    @_builtins.property
    @pulumi.getter(name="serviceTlocIp")
    def service_tloc_ip(self) -> Optional[_builtins.str]:
        """
        Service TLOC IP address, Attribute conditional on `type` being equal to `service`
        """
        return pulumi.get(self, "service_tloc_ip")

    @_builtins.property
    @pulumi.getter(name="serviceTlocListId")
    def service_tloc_list_id(self) -> Optional[_builtins.str]:
        """
        Service TLOC list ID, Attribute conditional on `type` being equal to `service`
        """
        return pulumi.get(self, "service_tloc_list_id")

    @_builtins.property
    @pulumi.getter(name="serviceTlocListVersion")
    def service_tloc_list_version(self) -> Optional[_builtins.int]:
        """
        Service TLOC list version
        """
        return pulumi.get(self, "service_tloc_list_version")

    @_builtins.property
    @pulumi.getter(name="serviceType")
    def service_type(self) -> Optional[_builtins.str]:
        """
        Service type, Attribute conditional on `type` being equal to `service`
          - Choices: `FW`, `IDP`, `IDS`, `netsvc1`, `netsvc2`, `netsvc3`, `netsvc4`, `netsvc5`
        """
        return pulumi.get(self, "service_type")

    @_builtins.property
    @pulumi.getter(name="serviceVpnId")
    def service_vpn_id(self) -> Optional[_builtins.int]:
        """
        Service VPN ID, Attribute conditional on `type` being equal to `service`
          - Range: `0`-`65536`
        """
        return pulumi.get(self, "service_vpn_id")

    @_builtins.property
    @pulumi.getter(name="tlocAction")
    def tloc_action(self) -> Optional[_builtins.str]:
        """
        TLOC action, Attribute conditional on `type` being equal to `tlocAction`
          - Choices: `strict`, `primary`, `backup`, `ecmp`
        """
        return pulumi.get(self, "tloc_action")

    @_builtins.property
    @pulumi.getter(name="tlocColor")
    def tloc_color(self) -> Optional[_builtins.str]:
        """
        TLOC color, Attribute conditional on `type` being equal to `tloc`
        """
        return pulumi.get(self, "tloc_color")

    @_builtins.property
    @pulumi.getter(name="tlocEncapsulation")
    def tloc_encapsulation(self) -> Optional[_builtins.str]:
        """
        TLOC encapsulation, Attribute conditional on `type` being equal to `tloc`
          - Choices: `ipsec`, `gre`
        """
        return pulumi.get(self, "tloc_encapsulation")

    @_builtins.property
    @pulumi.getter(name="tlocIp")
    def tloc_ip(self) -> Optional[_builtins.str]:
        """
        TLOC IP address, Attribute conditional on `type` being equal to `tloc`
        """
        return pulumi.get(self, "tloc_ip")

    @_builtins.property
    @pulumi.getter(name="tlocListId")
    def tloc_list_id(self) -> Optional[_builtins.str]:
        """
        TLOC list ID, Attribute conditional on `type` being equal to `tlocList`
        """
        return pulumi.get(self, "tloc_list_id")

    @_builtins.property
    @pulumi.getter(name="tlocListVersion")
    def tloc_list_version(self) -> Optional[_builtins.int]:
        """
        TLOC list version
        """
        return pulumi.get(self, "tloc_list_version")


@pulumi.output_type
class CustomControlTopologyPolicyDefinitionSequenceMatchEntry(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "colorListId":
            suggest = "color_list_id"
        elif key == "colorListVersion":
            suggest = "color_list_version"
        elif key == "communityListId":
            suggest = "community_list_id"
        elif key == "communityListVersion":
            suggest = "community_list_version"
        elif key == "domainId":
            suggest = "domain_id"
        elif key == "expandedCommunityListId":
            suggest = "expanded_community_list_id"
        elif key == "expandedCommunityListVersion":
            suggest = "expanded_community_list_version"
        elif key == "groupId":
            suggest = "group_id"
        elif key == "ompTag":
            suggest = "omp_tag"
        elif key == "pathType":
            suggest = "path_type"
        elif key == "prefixListId":
            suggest = "prefix_list_id"
        elif key == "prefixListVersion":
            suggest = "prefix_list_version"
        elif key == "siteId":
            suggest = "site_id"
        elif key == "siteListId":
            suggest = "site_list_id"
        elif key == "siteListVersion":
            suggest = "site_list_version"
        elif key == "tlocColor":
            suggest = "tloc_color"
        elif key == "tlocEncapsulation":
            suggest = "tloc_encapsulation"
        elif key == "tlocIp":
            suggest = "tloc_ip"
        elif key == "tlocListId":
            suggest = "tloc_list_id"
        elif key == "tlocListVersion":
            suggest = "tloc_list_version"
        elif key == "vpnId":
            suggest = "vpn_id"
        elif key == "vpnListId":
            suggest = "vpn_list_id"
        elif key == "vpnListVersion":
            suggest = "vpn_list_version"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in CustomControlTopologyPolicyDefinitionSequenceMatchEntry. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        CustomControlTopologyPolicyDefinitionSequenceMatchEntry.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        CustomControlTopologyPolicyDefinitionSequenceMatchEntry.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 type: _builtins.str,
                 carrier: Optional[_builtins.str] = None,
                 color_list_id: Optional[_builtins.str] = None,
                 color_list_version: Optional[_builtins.int] = None,
                 community_list_id: Optional[_builtins.str] = None,
                 community_list_version: Optional[_builtins.int] = None,
                 domain_id: Optional[_builtins.int] = None,
                 expanded_community_list_id: Optional[_builtins.str] = None,
                 expanded_community_list_version: Optional[_builtins.int] = None,
                 group_id: Optional[_builtins.int] = None,
                 omp_tag: Optional[_builtins.int] = None,
                 origin: Optional[_builtins.str] = None,
                 originator: Optional[_builtins.str] = None,
                 path_type: Optional[_builtins.str] = None,
                 preference: Optional[_builtins.int] = None,
                 prefix_list_id: Optional[_builtins.str] = None,
                 prefix_list_version: Optional[_builtins.int] = None,
                 site_id: Optional[_builtins.int] = None,
                 site_list_id: Optional[_builtins.str] = None,
                 site_list_version: Optional[_builtins.int] = None,
                 tloc_color: Optional[_builtins.str] = None,
                 tloc_encapsulation: Optional[_builtins.str] = None,
                 tloc_ip: Optional[_builtins.str] = None,
                 tloc_list_id: Optional[_builtins.str] = None,
                 tloc_list_version: Optional[_builtins.int] = None,
                 vpn_id: Optional[_builtins.int] = None,
                 vpn_list_id: Optional[_builtins.str] = None,
                 vpn_list_version: Optional[_builtins.int] = None):
        """
        :param _builtins.str type: Type of match entry
                 - Choices: `colorList`, `community`, `expandedCommunity`, `ompTag`, `origin`, `originator`, `preference`, `siteList`, `pathType`, `tlocList`, `vpnList`, `prefixList`, `vpn`, `tloc`, `siteId`, `carrier`, `domainId`, `groupId`
        :param _builtins.str carrier: Carrier, Attribute conditional on `type` being equal to `carrier`
                 - Choices: `default`, `carrier1`, `carrier2`, `carrier3`, `carrier4`, `carrier5`, `carrier6`, `carrier7`, `carrier8`
        :param _builtins.str color_list_id: Color list ID, Attribute conditional on `type` being equal to `colorList`
        :param _builtins.int color_list_version: Color list version
        :param _builtins.str community_list_id: Community list ID, Attribute conditional on `type` being equal to `community`
        :param _builtins.int community_list_version: Community list version
        :param _builtins.int domain_id: Domain ID, Attribute conditional on `type` being equal to `domainId`
                 - Range: `0`-`4294967295`
        :param _builtins.str expanded_community_list_id: Expanded community list ID, Attribute conditional on `type` being equal to `expandedCommunity`
        :param _builtins.int expanded_community_list_version: Expanded community list version
        :param _builtins.int group_id: Group ID, Attribute conditional on `type` being equal to `groupId`
                 - Range: `0`-`4294967295`
        :param _builtins.int omp_tag: OMP tag, Attribute conditional on `type` being equal to `ompTag`
                 - Range: `0`-`4294967295`
        :param _builtins.str origin: Origin, Attribute conditional on `type` being equal to `origin`
                 - Choices: `igp`, `egp`, `incomplete`, `aggregrate`, `bgp`, `bgp-external`, `bgp-internal`, `connected`, `eigrp`, `ospf`, `ospf-inter-area`, `ospf-intra-area`, `ospf-external1`, `ospf-external2`, `rip`, `static`, `eigrp-summary`, `eigrp-internal`, `eigrp-external`, `lisp`, `nat-dia`, `natpool`, `isis`, `isis-level1`, `isis-level2`
        :param _builtins.str originator: Originator IP, Attribute conditional on `type` being equal to `originator`
        :param _builtins.str path_type: Path type, Attribute conditional on `type` being equal to `pathType`
                 - Choices: `hierarchical-path`, `direct-path`, `transport-gateway-path`
        :param _builtins.int preference: Preference, Attribute conditional on `type` being equal to `preference`
                 - Range: `0`-`4294967295`
        :param _builtins.str prefix_list_id: Prefix list ID, Attribute conditional on `type` being equal to `prefixList`
        :param _builtins.int prefix_list_version: Prefix list version
        :param _builtins.int site_id: Site ID, Attribute conditional on `type` being equal to `siteId`
                 - Range: `0`-`4294967295`
        :param _builtins.str site_list_id: Site list ID, Attribute conditional on `type` being equal to `siteList`
        :param _builtins.int site_list_version: Site list version
        :param _builtins.str tloc_color: TLOC color, Attribute conditional on `type` being equal to `tloc`
        :param _builtins.str tloc_encapsulation: TLOC encapsulation, Attribute conditional on `type` being equal to `tloc`
                 - Choices: `ipsec`, `gre`
        :param _builtins.str tloc_ip: TLOC IP address, Attribute conditional on `type` being equal to `tloc`
        :param _builtins.str tloc_list_id: TLOC list ID, Attribute conditional on `type` being equal to `tlocList`
        :param _builtins.int tloc_list_version: TLOC list version
        :param _builtins.int vpn_id: VPN ID, Attribute conditional on `type` being equal to `vpn`
                 - Range: `0`-`65536`
        :param _builtins.str vpn_list_id: VPN list ID, Attribute conditional on `type` being equal to `vpnList`
        :param _builtins.int vpn_list_version: VPN list version
        """
        pulumi.set(__self__, "type", type)
        if carrier is not None:
            pulumi.set(__self__, "carrier", carrier)
        if color_list_id is not None:
            pulumi.set(__self__, "color_list_id", color_list_id)
        if color_list_version is not None:
            pulumi.set(__self__, "color_list_version", color_list_version)
        if community_list_id is not None:
            pulumi.set(__self__, "community_list_id", community_list_id)
        if community_list_version is not None:
            pulumi.set(__self__, "community_list_version", community_list_version)
        if domain_id is not None:
            pulumi.set(__self__, "domain_id", domain_id)
        if expanded_community_list_id is not None:
            pulumi.set(__self__, "expanded_community_list_id", expanded_community_list_id)
        if expanded_community_list_version is not None:
            pulumi.set(__self__, "expanded_community_list_version", expanded_community_list_version)
        if group_id is not None:
            pulumi.set(__self__, "group_id", group_id)
        if omp_tag is not None:
            pulumi.set(__self__, "omp_tag", omp_tag)
        if origin is not None:
            pulumi.set(__self__, "origin", origin)
        if originator is not None:
            pulumi.set(__self__, "originator", originator)
        if path_type is not None:
            pulumi.set(__self__, "path_type", path_type)
        if preference is not None:
            pulumi.set(__self__, "preference", preference)
        if prefix_list_id is not None:
            pulumi.set(__self__, "prefix_list_id", prefix_list_id)
        if prefix_list_version is not None:
            pulumi.set(__self__, "prefix_list_version", prefix_list_version)
        if site_id is not None:
            pulumi.set(__self__, "site_id", site_id)
        if site_list_id is not None:
            pulumi.set(__self__, "site_list_id", site_list_id)
        if site_list_version is not None:
            pulumi.set(__self__, "site_list_version", site_list_version)
        if tloc_color is not None:
            pulumi.set(__self__, "tloc_color", tloc_color)
        if tloc_encapsulation is not None:
            pulumi.set(__self__, "tloc_encapsulation", tloc_encapsulation)
        if tloc_ip is not None:
            pulumi.set(__self__, "tloc_ip", tloc_ip)
        if tloc_list_id is not None:
            pulumi.set(__self__, "tloc_list_id", tloc_list_id)
        if tloc_list_version is not None:
            pulumi.set(__self__, "tloc_list_version", tloc_list_version)
        if vpn_id is not None:
            pulumi.set(__self__, "vpn_id", vpn_id)
        if vpn_list_id is not None:
            pulumi.set(__self__, "vpn_list_id", vpn_list_id)
        if vpn_list_version is not None:
            pulumi.set(__self__, "vpn_list_version", vpn_list_version)

    @_builtins.property
    @pulumi.getter
    def type(self) -> _builtins.str:
        """
        Type of match entry
          - Choices: `colorList`, `community`, `expandedCommunity`, `ompTag`, `origin`, `originator`, `preference`, `siteList`, `pathType`, `tlocList`, `vpnList`, `prefixList`, `vpn`, `tloc`, `siteId`, `carrier`, `domainId`, `groupId`
        """
        return pulumi.get(self, "type")

    @_builtins.property
    @pulumi.getter
    def carrier(self) -> Optional[_builtins.str]:
        """
        Carrier, Attribute conditional on `type` being equal to `carrier`
          - Choices: `default`, `carrier1`, `carrier2`, `carrier3`, `carrier4`, `carrier5`, `carrier6`, `carrier7`, `carrier8`
        """
        return pulumi.get(self, "carrier")

    @_builtins.property
    @pulumi.getter(name="colorListId")
    def color_list_id(self) -> Optional[_builtins.str]:
        """
        Color list ID, Attribute conditional on `type` being equal to `colorList`
        """
        return pulumi.get(self, "color_list_id")

    @_builtins.property
    @pulumi.getter(name="colorListVersion")
    def color_list_version(self) -> Optional[_builtins.int]:
        """
        Color list version
        """
        return pulumi.get(self, "color_list_version")

    @_builtins.property
    @pulumi.getter(name="communityListId")
    def community_list_id(self) -> Optional[_builtins.str]:
        """
        Community list ID, Attribute conditional on `type` being equal to `community`
        """
        return pulumi.get(self, "community_list_id")

    @_builtins.property
    @pulumi.getter(name="communityListVersion")
    def community_list_version(self) -> Optional[_builtins.int]:
        """
        Community list version
        """
        return pulumi.get(self, "community_list_version")

    @_builtins.property
    @pulumi.getter(name="domainId")
    def domain_id(self) -> Optional[_builtins.int]:
        """
        Domain ID, Attribute conditional on `type` being equal to `domainId`
          - Range: `0`-`4294967295`
        """
        return pulumi.get(self, "domain_id")

    @_builtins.property
    @pulumi.getter(name="expandedCommunityListId")
    def expanded_community_list_id(self) -> Optional[_builtins.str]:
        """
        Expanded community list ID, Attribute conditional on `type` being equal to `expandedCommunity`
        """
        return pulumi.get(self, "expanded_community_list_id")

    @_builtins.property
    @pulumi.getter(name="expandedCommunityListVersion")
    def expanded_community_list_version(self) -> Optional[_builtins.int]:
        """
        Expanded community list version
        """
        return pulumi.get(self, "expanded_community_list_version")

    @_builtins.property
    @pulumi.getter(name="groupId")
    def group_id(self) -> Optional[_builtins.int]:
        """
        Group ID, Attribute conditional on `type` being equal to `groupId`
          - Range: `0`-`4294967295`
        """
        return pulumi.get(self, "group_id")

    @_builtins.property
    @pulumi.getter(name="ompTag")
    def omp_tag(self) -> Optional[_builtins.int]:
        """
        OMP tag, Attribute conditional on `type` being equal to `ompTag`
          - Range: `0`-`4294967295`
        """
        return pulumi.get(self, "omp_tag")

    @_builtins.property
    @pulumi.getter
    def origin(self) -> Optional[_builtins.str]:
        """
        Origin, Attribute conditional on `type` being equal to `origin`
          - Choices: `igp`, `egp`, `incomplete`, `aggregrate`, `bgp`, `bgp-external`, `bgp-internal`, `connected`, `eigrp`, `ospf`, `ospf-inter-area`, `ospf-intra-area`, `ospf-external1`, `ospf-external2`, `rip`, `static`, `eigrp-summary`, `eigrp-internal`, `eigrp-external`, `lisp`, `nat-dia`, `natpool`, `isis`, `isis-level1`, `isis-level2`
        """
        return pulumi.get(self, "origin")

    @_builtins.property
    @pulumi.getter
    def originator(self) -> Optional[_builtins.str]:
        """
        Originator IP, Attribute conditional on `type` being equal to `originator`
        """
        return pulumi.get(self, "originator")

    @_builtins.property
    @pulumi.getter(name="pathType")
    def path_type(self) -> Optional[_builtins.str]:
        """
        Path type, Attribute conditional on `type` being equal to `pathType`
          - Choices: `hierarchical-path`, `direct-path`, `transport-gateway-path`
        """
        return pulumi.get(self, "path_type")

    @_builtins.property
    @pulumi.getter
    def preference(self) -> Optional[_builtins.int]:
        """
        Preference, Attribute conditional on `type` being equal to `preference`
          - Range: `0`-`4294967295`
        """
        return pulumi.get(self, "preference")

    @_builtins.property
    @pulumi.getter(name="prefixListId")
    def prefix_list_id(self) -> Optional[_builtins.str]:
        """
        Prefix list ID, Attribute conditional on `type` being equal to `prefixList`
        """
        return pulumi.get(self, "prefix_list_id")

    @_builtins.property
    @pulumi.getter(name="prefixListVersion")
    def prefix_list_version(self) -> Optional[_builtins.int]:
        """
        Prefix list version
        """
        return pulumi.get(self, "prefix_list_version")

    @_builtins.property
    @pulumi.getter(name="siteId")
    def site_id(self) -> Optional[_builtins.int]:
        """
        Site ID, Attribute conditional on `type` being equal to `siteId`
          - Range: `0`-`4294967295`
        """
        return pulumi.get(self, "site_id")

    @_builtins.property
    @pulumi.getter(name="siteListId")
    def site_list_id(self) -> Optional[_builtins.str]:
        """
        Site list ID, Attribute conditional on `type` being equal to `siteList`
        """
        return pulumi.get(self, "site_list_id")

    @_builtins.property
    @pulumi.getter(name="siteListVersion")
    def site_list_version(self) -> Optional[_builtins.int]:
        """
        Site list version
        """
        return pulumi.get(self, "site_list_version")

    @_builtins.property
    @pulumi.getter(name="tlocColor")
    def tloc_color(self) -> Optional[_builtins.str]:
        """
        TLOC color, Attribute conditional on `type` being equal to `tloc`
        """
        return pulumi.get(self, "tloc_color")

    @_builtins.property
    @pulumi.getter(name="tlocEncapsulation")
    def tloc_encapsulation(self) -> Optional[_builtins.str]:
        """
        TLOC encapsulation, Attribute conditional on `type` being equal to `tloc`
          - Choices: `ipsec`, `gre`
        """
        return pulumi.get(self, "tloc_encapsulation")

    @_builtins.property
    @pulumi.getter(name="tlocIp")
    def tloc_ip(self) -> Optional[_builtins.str]:
        """
        TLOC IP address, Attribute conditional on `type` being equal to `tloc`
        """
        return pulumi.get(self, "tloc_ip")

    @_builtins.property
    @pulumi.getter(name="tlocListId")
    def tloc_list_id(self) -> Optional[_builtins.str]:
        """
        TLOC list ID, Attribute conditional on `type` being equal to `tlocList`
        """
        return pulumi.get(self, "tloc_list_id")

    @_builtins.property
    @pulumi.getter(name="tlocListVersion")
    def tloc_list_version(self) -> Optional[_builtins.int]:
        """
        TLOC list version
        """
        return pulumi.get(self, "tloc_list_version")

    @_builtins.property
    @pulumi.getter(name="vpnId")
    def vpn_id(self) -> Optional[_builtins.int]:
        """
        VPN ID, Attribute conditional on `type` being equal to `vpn`
          - Range: `0`-`65536`
        """
        return pulumi.get(self, "vpn_id")

    @_builtins.property
    @pulumi.getter(name="vpnListId")
    def vpn_list_id(self) -> Optional[_builtins.str]:
        """
        VPN list ID, Attribute conditional on `type` being equal to `vpnList`
        """
        return pulumi.get(self, "vpn_list_id")

    @_builtins.property
    @pulumi.getter(name="vpnListVersion")
    def vpn_list_version(self) -> Optional[_builtins.int]:
        """
        VPN list version
        """
        return pulumi.get(self, "vpn_list_version")


@pulumi.output_type
class DataFqdnPrefixListPolicyObjectEntry(dict):
    def __init__(__self__, *,
                 fqdn: _builtins.str):
        """
        :param _builtins.str fqdn: Fully qualified domain name
        """
        pulumi.set(__self__, "fqdn", fqdn)

    @_builtins.property
    @pulumi.getter
    def fqdn(self) -> _builtins.str:
        """
        Fully qualified domain name
        """
        return pulumi.get(self, "fqdn")


@pulumi.output_type
class DataIpv4PrefixListPolicyObjectEntry(dict):
    def __init__(__self__, *,
                 prefix: _builtins.str):
        """
        :param _builtins.str prefix: IP prefix list entry, e.g. `10.0.0.0/12`
        """
        pulumi.set(__self__, "prefix", prefix)

    @_builtins.property
    @pulumi.getter
    def prefix(self) -> _builtins.str:
        """
        IP prefix list entry, e.g. `10.0.0.0/12`
        """
        return pulumi.get(self, "prefix")


@pulumi.output_type
class DataIpv6PrefixListPolicyObjectEntry(dict):
    def __init__(__self__, *,
                 prefix: _builtins.str):
        """
        :param _builtins.str prefix: IP prefix list entry, e.g. `2001:0:0:1::/64`
        """
        pulumi.set(__self__, "prefix", prefix)

    @_builtins.property
    @pulumi.getter
    def prefix(self) -> _builtins.str:
        """
        IP prefix list entry, e.g. `2001:0:0:1::/64`
        """
        return pulumi.get(self, "prefix")


@pulumi.output_type
class DnsSecurityPolicyDefinitionTargetVpn(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "customDnsServerIp":
            suggest = "custom_dns_server_ip"
        elif key == "localDomainBypassEnabled":
            suggest = "local_domain_bypass_enabled"
        elif key == "umbrellaDnsDefault":
            suggest = "umbrella_dns_default"
        elif key == "vpnIds":
            suggest = "vpn_ids"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DnsSecurityPolicyDefinitionTargetVpn. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DnsSecurityPolicyDefinitionTargetVpn.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DnsSecurityPolicyDefinitionTargetVpn.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 custom_dns_server_ip: Optional[_builtins.str] = None,
                 local_domain_bypass_enabled: Optional[_builtins.bool] = None,
                 umbrella_dns_default: Optional[_builtins.bool] = None,
                 vpn_ids: Optional[Sequence[_builtins.str]] = None):
        """
        :param _builtins.str custom_dns_server_ip: Only relevant when `umbrella_dns_default` is `false`
        :param _builtins.bool local_domain_bypass_enabled: Should the local domain bypass list be enabled
        :param _builtins.bool umbrella_dns_default: Should use umbrella as DNS Server
        :param Sequence[_builtins.str] vpn_ids: VPN ID's separated by Comma
        """
        if custom_dns_server_ip is not None:
            pulumi.set(__self__, "custom_dns_server_ip", custom_dns_server_ip)
        if local_domain_bypass_enabled is not None:
            pulumi.set(__self__, "local_domain_bypass_enabled", local_domain_bypass_enabled)
        if umbrella_dns_default is not None:
            pulumi.set(__self__, "umbrella_dns_default", umbrella_dns_default)
        if vpn_ids is not None:
            pulumi.set(__self__, "vpn_ids", vpn_ids)

    @_builtins.property
    @pulumi.getter(name="customDnsServerIp")
    def custom_dns_server_ip(self) -> Optional[_builtins.str]:
        """
        Only relevant when `umbrella_dns_default` is `false`
        """
        return pulumi.get(self, "custom_dns_server_ip")

    @_builtins.property
    @pulumi.getter(name="localDomainBypassEnabled")
    def local_domain_bypass_enabled(self) -> Optional[_builtins.bool]:
        """
        Should the local domain bypass list be enabled
        """
        return pulumi.get(self, "local_domain_bypass_enabled")

    @_builtins.property
    @pulumi.getter(name="umbrellaDnsDefault")
    def umbrella_dns_default(self) -> Optional[_builtins.bool]:
        """
        Should use umbrella as DNS Server
        """
        return pulumi.get(self, "umbrella_dns_default")

    @_builtins.property
    @pulumi.getter(name="vpnIds")
    def vpn_ids(self) -> Optional[Sequence[_builtins.str]]:
        """
        VPN ID's separated by Comma
        """
        return pulumi.get(self, "vpn_ids")


@pulumi.output_type
class DnsSecurityPolicyTargetVpn(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "dnsServerIp":
            suggest = "dns_server_ip"
        elif key == "localDomainBypassEnabled":
            suggest = "local_domain_bypass_enabled"
        elif key == "umbrellaDefault":
            suggest = "umbrella_default"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DnsSecurityPolicyTargetVpn. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DnsSecurityPolicyTargetVpn.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DnsSecurityPolicyTargetVpn.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 dns_server_ip: Optional[_builtins.str] = None,
                 local_domain_bypass_enabled: Optional[_builtins.bool] = None,
                 uid: Optional[_builtins.str] = None,
                 umbrella_default: Optional[_builtins.bool] = None,
                 vpns: Optional[Sequence[_builtins.str]] = None):
        """
        :param _builtins.str dns_server_ip: Field will only be under data field if matchAllVpn is true, otherwise field will be under targetVpns and set per entry
        :param _builtins.bool local_domain_bypass_enabled: Field will only be under data field if matchAllVpn is true, otherwise field will be under targetVpns and set per entry
        :param _builtins.str uid: non empty interger string
        :param _builtins.bool umbrella_default: Field will only be under data field if matchAllVpn is true, otherwise field will be under targetVpns and set per entry
        """
        if dns_server_ip is not None:
            pulumi.set(__self__, "dns_server_ip", dns_server_ip)
        if local_domain_bypass_enabled is not None:
            pulumi.set(__self__, "local_domain_bypass_enabled", local_domain_bypass_enabled)
        if uid is not None:
            pulumi.set(__self__, "uid", uid)
        if umbrella_default is not None:
            pulumi.set(__self__, "umbrella_default", umbrella_default)
        if vpns is not None:
            pulumi.set(__self__, "vpns", vpns)

    @_builtins.property
    @pulumi.getter(name="dnsServerIp")
    def dns_server_ip(self) -> Optional[_builtins.str]:
        """
        Field will only be under data field if matchAllVpn is true, otherwise field will be under targetVpns and set per entry
        """
        return pulumi.get(self, "dns_server_ip")

    @_builtins.property
    @pulumi.getter(name="localDomainBypassEnabled")
    def local_domain_bypass_enabled(self) -> Optional[_builtins.bool]:
        """
        Field will only be under data field if matchAllVpn is true, otherwise field will be under targetVpns and set per entry
        """
        return pulumi.get(self, "local_domain_bypass_enabled")

    @_builtins.property
    @pulumi.getter
    def uid(self) -> Optional[_builtins.str]:
        """
        non empty interger string
        """
        return pulumi.get(self, "uid")

    @_builtins.property
    @pulumi.getter(name="umbrellaDefault")
    def umbrella_default(self) -> Optional[_builtins.bool]:
        """
        Field will only be under data field if matchAllVpn is true, otherwise field will be under targetVpns and set per entry
        """
        return pulumi.get(self, "umbrella_default")

    @_builtins.property
    @pulumi.getter
    def vpns(self) -> Optional[Sequence[_builtins.str]]:
        return pulumi.get(self, "vpns")


@pulumi.output_type
class DomainListPolicyObjectEntry(dict):
    def __init__(__self__, *,
                 domain: Optional[_builtins.str] = None):
        """
        :param _builtins.str domain: Domain name, must not start with `*`
        """
        if domain is not None:
            pulumi.set(__self__, "domain", domain)

    @_builtins.property
    @pulumi.getter
    def domain(self) -> Optional[_builtins.str]:
        """
        Domain name, must not start with `*`
        """
        return pulumi.get(self, "domain")


@pulumi.output_type
class EigrpFeatureTemplateAddressFamily(dict):
    def __init__(__self__, *,
                 networks: Optional[Sequence['outputs.EigrpFeatureTemplateAddressFamilyNetwork']] = None,
                 optional: Optional[_builtins.bool] = None,
                 redistributes: Optional[Sequence['outputs.EigrpFeatureTemplateAddressFamilyRedistribute']] = None,
                 type: Optional[_builtins.str] = None):
        """
        :param Sequence['EigrpFeatureTemplateAddressFamilyNetworkArgs'] networks: Configure the networks for EIGRP to advertise
        :param _builtins.bool optional: Indicates if list item is considered optional.
        :param Sequence['EigrpFeatureTemplateAddressFamilyRedistributeArgs'] redistributes: Redistribute routes into EIGRP
        :param _builtins.str type: Set EIGRP address family
                 - Choices: `ipv4`
                 - Default value: `ipv4`
        """
        if networks is not None:
            pulumi.set(__self__, "networks", networks)
        if optional is not None:
            pulumi.set(__self__, "optional", optional)
        if redistributes is not None:
            pulumi.set(__self__, "redistributes", redistributes)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @_builtins.property
    @pulumi.getter
    def networks(self) -> Optional[Sequence['outputs.EigrpFeatureTemplateAddressFamilyNetwork']]:
        """
        Configure the networks for EIGRP to advertise
        """
        return pulumi.get(self, "networks")

    @_builtins.property
    @pulumi.getter
    def optional(self) -> Optional[_builtins.bool]:
        """
        Indicates if list item is considered optional.
        """
        return pulumi.get(self, "optional")

    @_builtins.property
    @pulumi.getter
    def redistributes(self) -> Optional[Sequence['outputs.EigrpFeatureTemplateAddressFamilyRedistribute']]:
        """
        Redistribute routes into EIGRP
        """
        return pulumi.get(self, "redistributes")

    @_builtins.property
    @pulumi.getter
    def type(self) -> Optional[_builtins.str]:
        """
        Set EIGRP address family
          - Choices: `ipv4`
          - Default value: `ipv4`
        """
        return pulumi.get(self, "type")


@pulumi.output_type
class EigrpFeatureTemplateAddressFamilyNetwork(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "prefixVariable":
            suggest = "prefix_variable"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in EigrpFeatureTemplateAddressFamilyNetwork. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        EigrpFeatureTemplateAddressFamilyNetwork.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        EigrpFeatureTemplateAddressFamilyNetwork.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 optional: Optional[_builtins.bool] = None,
                 prefix: Optional[_builtins.str] = None,
                 prefix_variable: Optional[_builtins.str] = None):
        """
        :param _builtins.bool optional: Indicates if list item is considered optional.
        :param _builtins.str prefix: Configure the prefixes for EIGRP to announce
        :param _builtins.str prefix_variable: Variable name
        """
        if optional is not None:
            pulumi.set(__self__, "optional", optional)
        if prefix is not None:
            pulumi.set(__self__, "prefix", prefix)
        if prefix_variable is not None:
            pulumi.set(__self__, "prefix_variable", prefix_variable)

    @_builtins.property
    @pulumi.getter
    def optional(self) -> Optional[_builtins.bool]:
        """
        Indicates if list item is considered optional.
        """
        return pulumi.get(self, "optional")

    @_builtins.property
    @pulumi.getter
    def prefix(self) -> Optional[_builtins.str]:
        """
        Configure the prefixes for EIGRP to announce
        """
        return pulumi.get(self, "prefix")

    @_builtins.property
    @pulumi.getter(name="prefixVariable")
    def prefix_variable(self) -> Optional[_builtins.str]:
        """
        Variable name
        """
        return pulumi.get(self, "prefix_variable")


@pulumi.output_type
class EigrpFeatureTemplateAddressFamilyRedistribute(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "protocolVariable":
            suggest = "protocol_variable"
        elif key == "routePolicy":
            suggest = "route_policy"
        elif key == "routePolicyVariable":
            suggest = "route_policy_variable"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in EigrpFeatureTemplateAddressFamilyRedistribute. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        EigrpFeatureTemplateAddressFamilyRedistribute.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        EigrpFeatureTemplateAddressFamilyRedistribute.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 optional: Optional[_builtins.bool] = None,
                 protocol: Optional[_builtins.str] = None,
                 protocol_variable: Optional[_builtins.str] = None,
                 route_policy: Optional[_builtins.str] = None,
                 route_policy_variable: Optional[_builtins.str] = None):
        """
        :param _builtins.bool optional: Indicates if list item is considered optional.
        :param _builtins.str protocol: Set the protocol to redistribute routes from
                 - Choices: `bgp`, `connected`, `nat-route`, `omp`, `ospf`, `ospfv3`, `static`
        :param _builtins.str protocol_variable: Variable name
        :param _builtins.str route_policy: Configure policy to apply to prefixes received from EIGRP neighbor
        :param _builtins.str route_policy_variable: Variable name
        """
        if optional is not None:
            pulumi.set(__self__, "optional", optional)
        if protocol is not None:
            pulumi.set(__self__, "protocol", protocol)
        if protocol_variable is not None:
            pulumi.set(__self__, "protocol_variable", protocol_variable)
        if route_policy is not None:
            pulumi.set(__self__, "route_policy", route_policy)
        if route_policy_variable is not None:
            pulumi.set(__self__, "route_policy_variable", route_policy_variable)

    @_builtins.property
    @pulumi.getter
    def optional(self) -> Optional[_builtins.bool]:
        """
        Indicates if list item is considered optional.
        """
        return pulumi.get(self, "optional")

    @_builtins.property
    @pulumi.getter
    def protocol(self) -> Optional[_builtins.str]:
        """
        Set the protocol to redistribute routes from
          - Choices: `bgp`, `connected`, `nat-route`, `omp`, `ospf`, `ospfv3`, `static`
        """
        return pulumi.get(self, "protocol")

    @_builtins.property
    @pulumi.getter(name="protocolVariable")
    def protocol_variable(self) -> Optional[_builtins.str]:
        """
        Variable name
        """
        return pulumi.get(self, "protocol_variable")

    @_builtins.property
    @pulumi.getter(name="routePolicy")
    def route_policy(self) -> Optional[_builtins.str]:
        """
        Configure policy to apply to prefixes received from EIGRP neighbor
        """
        return pulumi.get(self, "route_policy")

    @_builtins.property
    @pulumi.getter(name="routePolicyVariable")
    def route_policy_variable(self) -> Optional[_builtins.str]:
        """
        Variable name
        """
        return pulumi.get(self, "route_policy_variable")


@pulumi.output_type
class EigrpFeatureTemplateInterface(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "interfaceName":
            suggest = "interface_name"
        elif key == "interfaceNameVariable":
            suggest = "interface_name_variable"
        elif key == "shutdownVariable":
            suggest = "shutdown_variable"
        elif key == "summaryAddresses":
            suggest = "summary_addresses"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in EigrpFeatureTemplateInterface. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        EigrpFeatureTemplateInterface.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        EigrpFeatureTemplateInterface.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 interface_name: Optional[_builtins.str] = None,
                 interface_name_variable: Optional[_builtins.str] = None,
                 optional: Optional[_builtins.bool] = None,
                 shutdown: Optional[_builtins.bool] = None,
                 shutdown_variable: Optional[_builtins.str] = None,
                 summary_addresses: Optional[Sequence['outputs.EigrpFeatureTemplateInterfaceSummaryAddress']] = None):
        """
        :param _builtins.str interface_name: Set interface name
        :param _builtins.str interface_name_variable: Variable name
        :param _builtins.bool optional: Indicates if list item is considered optional.
        :param _builtins.bool shutdown: Enable/disable EIGRP
                 - Default value: `false`
        :param _builtins.str shutdown_variable: Variable name
        :param Sequence['EigrpFeatureTemplateInterfaceSummaryAddressArgs'] summary_addresses: Set summary addresses
        """
        if interface_name is not None:
            pulumi.set(__self__, "interface_name", interface_name)
        if interface_name_variable is not None:
            pulumi.set(__self__, "interface_name_variable", interface_name_variable)
        if optional is not None:
            pulumi.set(__self__, "optional", optional)
        if shutdown is not None:
            pulumi.set(__self__, "shutdown", shutdown)
        if shutdown_variable is not None:
            pulumi.set(__self__, "shutdown_variable", shutdown_variable)
        if summary_addresses is not None:
            pulumi.set(__self__, "summary_addresses", summary_addresses)

    @_builtins.property
    @pulumi.getter(name="interfaceName")
    def interface_name(self) -> Optional[_builtins.str]:
        """
        Set interface name
        """
        return pulumi.get(self, "interface_name")

    @_builtins.property
    @pulumi.getter(name="interfaceNameVariable")
    def interface_name_variable(self) -> Optional[_builtins.str]:
        """
        Variable name
        """
        return pulumi.get(self, "interface_name_variable")

    @_builtins.property
    @pulumi.getter
    def optional(self) -> Optional[_builtins.bool]:
        """
        Indicates if list item is considered optional.
        """
        return pulumi.get(self, "optional")

    @_builtins.property
    @pulumi.getter
    def shutdown(self) -> Optional[_builtins.bool]:
        """
        Enable/disable EIGRP
          - Default value: `false`
        """
        return pulumi.get(self, "shutdown")

    @_builtins.property
    @pulumi.getter(name="shutdownVariable")
    def shutdown_variable(self) -> Optional[_builtins.str]:
        """
        Variable name
        """
        return pulumi.get(self, "shutdown_variable")

    @_builtins.property
    @pulumi.getter(name="summaryAddresses")
    def summary_addresses(self) -> Optional[Sequence['outputs.EigrpFeatureTemplateInterfaceSummaryAddress']]:
        """
        Set summary addresses
        """
        return pulumi.get(self, "summary_addresses")


@pulumi.output_type
class EigrpFeatureTemplateInterfaceSummaryAddress(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "prefixVariable":
            suggest = "prefix_variable"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in EigrpFeatureTemplateInterfaceSummaryAddress. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        EigrpFeatureTemplateInterfaceSummaryAddress.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        EigrpFeatureTemplateInterfaceSummaryAddress.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 optional: Optional[_builtins.bool] = None,
                 prefix: Optional[_builtins.str] = None,
                 prefix_variable: Optional[_builtins.str] = None):
        """
        :param _builtins.bool optional: Indicates if list item is considered optional.
        :param _builtins.str prefix: Set summary address prefix
        :param _builtins.str prefix_variable: Variable name
        """
        if optional is not None:
            pulumi.set(__self__, "optional", optional)
        if prefix is not None:
            pulumi.set(__self__, "prefix", prefix)
        if prefix_variable is not None:
            pulumi.set(__self__, "prefix_variable", prefix_variable)

    @_builtins.property
    @pulumi.getter
    def optional(self) -> Optional[_builtins.bool]:
        """
        Indicates if list item is considered optional.
        """
        return pulumi.get(self, "optional")

    @_builtins.property
    @pulumi.getter
    def prefix(self) -> Optional[_builtins.str]:
        """
        Set summary address prefix
        """
        return pulumi.get(self, "prefix")

    @_builtins.property
    @pulumi.getter(name="prefixVariable")
    def prefix_variable(self) -> Optional[_builtins.str]:
        """
        Variable name
        """
        return pulumi.get(self, "prefix_variable")


@pulumi.output_type
class EigrpFeatureTemplateKey(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "md5AuthenticationKey":
            suggest = "md5_authentication_key"
        elif key == "md5AuthenticationKeyVariable":
            suggest = "md5_authentication_key_variable"
        elif key == "md5KeyId":
            suggest = "md5_key_id"
        elif key == "md5KeyIdVariable":
            suggest = "md5_key_id_variable"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in EigrpFeatureTemplateKey. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        EigrpFeatureTemplateKey.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        EigrpFeatureTemplateKey.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 md5_authentication_key: Optional[_builtins.str] = None,
                 md5_authentication_key_variable: Optional[_builtins.str] = None,
                 md5_key_id: Optional[_builtins.int] = None,
                 md5_key_id_variable: Optional[_builtins.str] = None,
                 optional: Optional[_builtins.bool] = None):
        """
        :param _builtins.str md5_authentication_key: Set MD5 key
        :param _builtins.str md5_authentication_key_variable: Variable name
        :param _builtins.int md5_key_id: Set MD5 key ID
                 - Range: `1`-`255`
        :param _builtins.str md5_key_id_variable: Variable name
        :param _builtins.bool optional: Indicates if list item is considered optional.
        """
        if md5_authentication_key is not None:
            pulumi.set(__self__, "md5_authentication_key", md5_authentication_key)
        if md5_authentication_key_variable is not None:
            pulumi.set(__self__, "md5_authentication_key_variable", md5_authentication_key_variable)
        if md5_key_id is not None:
            pulumi.set(__self__, "md5_key_id", md5_key_id)
        if md5_key_id_variable is not None:
            pulumi.set(__self__, "md5_key_id_variable", md5_key_id_variable)
        if optional is not None:
            pulumi.set(__self__, "optional", optional)

    @_builtins.property
    @pulumi.getter(name="md5AuthenticationKey")
    def md5_authentication_key(self) -> Optional[_builtins.str]:
        """
        Set MD5 key
        """
        return pulumi.get(self, "md5_authentication_key")

    @_builtins.property
    @pulumi.getter(name="md5AuthenticationKeyVariable")
    def md5_authentication_key_variable(self) -> Optional[_builtins.str]:
        """
        Variable name
        """
        return pulumi.get(self, "md5_authentication_key_variable")

    @_builtins.property
    @pulumi.getter(name="md5KeyId")
    def md5_key_id(self) -> Optional[_builtins.int]:
        """
        Set MD5 key ID
          - Range: `1`-`255`
        """
        return pulumi.get(self, "md5_key_id")

    @_builtins.property
    @pulumi.getter(name="md5KeyIdVariable")
    def md5_key_id_variable(self) -> Optional[_builtins.str]:
        """
        Variable name
        """
        return pulumi.get(self, "md5_key_id_variable")

    @_builtins.property
    @pulumi.getter
    def optional(self) -> Optional[_builtins.bool]:
        """
        Indicates if list item is considered optional.
        """
        return pulumi.get(self, "optional")


@pulumi.output_type
class ExpandedCommunityListPolicyObjectEntry(dict):
    def __init__(__self__, *,
                 community: Optional[_builtins.str] = None):
        """
        :param _builtins.str community: Expanded community value, e.g. `100:1000`
        """
        if community is not None:
            pulumi.set(__self__, "community", community)

    @_builtins.property
    @pulumi.getter
    def community(self) -> Optional[_builtins.str]:
        """
        Expanded community value, e.g. `100:1000`
        """
        return pulumi.get(self, "community")


@pulumi.output_type
class ExtendedCommunityListPolicyObjectEntry(dict):
    def __init__(__self__, *,
                 community: _builtins.str):
        """
        :param _builtins.str community: Extended community value, e.g. `community soo 10.0.0.1:30` or `community rt 100:10`
        """
        pulumi.set(__self__, "community", community)

    @_builtins.property
    @pulumi.getter
    def community(self) -> _builtins.str:
        """
        Extended community value, e.g. `community soo 10.0.0.1:30` or `community rt 100:10`
        """
        return pulumi.get(self, "community")


@pulumi.output_type
class FeatureDeviceTemplateGeneralTemplate(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "subTemplates":
            suggest = "sub_templates"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in FeatureDeviceTemplateGeneralTemplate. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        FeatureDeviceTemplateGeneralTemplate.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        FeatureDeviceTemplateGeneralTemplate.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 id: _builtins.str,
                 type: _builtins.str,
                 sub_templates: Optional[Sequence['outputs.FeatureDeviceTemplateGeneralTemplateSubTemplate']] = None,
                 version: Optional[_builtins.int] = None):
        """
        :param _builtins.str id: Feature template ID
        :param _builtins.str type: Feature template type
                 - Choices: `cisco_system`, `cisco_logging`, `cedge_aaa`, `cisco_bfd`, `cisco_omp`, `cisco_security`, `cisco_banner`, `cisco_snmp`, `cedge_global`, `cli-template`, `cisco_sig_credentials`, `switchport`, `cisco_thousandeyes`, `cisco_vpn`, `virtual-application-utd`, `cellular-cedge-controller`
        :param Sequence['FeatureDeviceTemplateGeneralTemplateSubTemplateArgs'] sub_templates: List of sub templates
        :param _builtins.int version: Feature template version
        """
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "type", type)
        if sub_templates is not None:
            pulumi.set(__self__, "sub_templates", sub_templates)
        if version is not None:
            pulumi.set(__self__, "version", version)

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        Feature template ID
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter
    def type(self) -> _builtins.str:
        """
        Feature template type
          - Choices: `cisco_system`, `cisco_logging`, `cedge_aaa`, `cisco_bfd`, `cisco_omp`, `cisco_security`, `cisco_banner`, `cisco_snmp`, `cedge_global`, `cli-template`, `cisco_sig_credentials`, `switchport`, `cisco_thousandeyes`, `cisco_vpn`, `virtual-application-utd`, `cellular-cedge-controller`
        """
        return pulumi.get(self, "type")

    @_builtins.property
    @pulumi.getter(name="subTemplates")
    def sub_templates(self) -> Optional[Sequence['outputs.FeatureDeviceTemplateGeneralTemplateSubTemplate']]:
        """
        List of sub templates
        """
        return pulumi.get(self, "sub_templates")

    @_builtins.property
    @pulumi.getter
    def version(self) -> Optional[_builtins.int]:
        """
        Feature template version
        """
        return pulumi.get(self, "version")


@pulumi.output_type
class FeatureDeviceTemplateGeneralTemplateSubTemplate(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "subTemplates":
            suggest = "sub_templates"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in FeatureDeviceTemplateGeneralTemplateSubTemplate. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        FeatureDeviceTemplateGeneralTemplateSubTemplate.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        FeatureDeviceTemplateGeneralTemplateSubTemplate.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 id: _builtins.str,
                 type: _builtins.str,
                 sub_templates: Optional[Sequence['outputs.FeatureDeviceTemplateGeneralTemplateSubTemplateSubTemplate']] = None,
                 version: Optional[_builtins.int] = None):
        """
        :param _builtins.str id: Feature template ID
        :param _builtins.str type: Feature template type
                 - Choices: `cisco_logging`, `cisco_ntp`, `cisco_ospf`, `cisco_bgp`, `cisco_vpn_interface`, `cisco_vpn_interface_gre`, `cisco_vpn_interface_ipsec`, `vpn-interface-svi`, `vpn-cedge-interface-cellular`, `cisco_secure_internet_gateway`
        :param Sequence['FeatureDeviceTemplateGeneralTemplateSubTemplateSubTemplateArgs'] sub_templates: List of sub templates
        :param _builtins.int version: Feature template version
        """
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "type", type)
        if sub_templates is not None:
            pulumi.set(__self__, "sub_templates", sub_templates)
        if version is not None:
            pulumi.set(__self__, "version", version)

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        Feature template ID
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter
    def type(self) -> _builtins.str:
        """
        Feature template type
          - Choices: `cisco_logging`, `cisco_ntp`, `cisco_ospf`, `cisco_bgp`, `cisco_vpn_interface`, `cisco_vpn_interface_gre`, `cisco_vpn_interface_ipsec`, `vpn-interface-svi`, `vpn-cedge-interface-cellular`, `cisco_secure_internet_gateway`
        """
        return pulumi.get(self, "type")

    @_builtins.property
    @pulumi.getter(name="subTemplates")
    def sub_templates(self) -> Optional[Sequence['outputs.FeatureDeviceTemplateGeneralTemplateSubTemplateSubTemplate']]:
        """
        List of sub templates
        """
        return pulumi.get(self, "sub_templates")

    @_builtins.property
    @pulumi.getter
    def version(self) -> Optional[_builtins.int]:
        """
        Feature template version
        """
        return pulumi.get(self, "version")


@pulumi.output_type
class FeatureDeviceTemplateGeneralTemplateSubTemplateSubTemplate(dict):
    def __init__(__self__, *,
                 id: _builtins.str,
                 type: _builtins.str,
                 version: Optional[_builtins.int] = None):
        """
        :param _builtins.str id: Feature template ID
        :param _builtins.str type: Feature template type
                 - Choices: `cisco_dhcp_server`, `cellular-cedge-profile`
        :param _builtins.int version: Feature template version
        """
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "type", type)
        if version is not None:
            pulumi.set(__self__, "version", version)

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        Feature template ID
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter
    def type(self) -> _builtins.str:
        """
        Feature template type
          - Choices: `cisco_dhcp_server`, `cellular-cedge-profile`
        """
        return pulumi.get(self, "type")

    @_builtins.property
    @pulumi.getter
    def version(self) -> Optional[_builtins.int]:
        """
        Feature template version
        """
        return pulumi.get(self, "version")


@pulumi.output_type
class GeoLocationListPolicyObjectEntry(dict):
    def __init__(__self__, *,
                 continent: Optional[_builtins.str] = None,
                 country: Optional[_builtins.str] = None):
        """
        :param _builtins.str continent: Continent
                 - Choices: `AF`, `AN`, `AS`, `EU`, `NA`, `OC`, `SA`
        :param _builtins.str country: Country
        """
        if continent is not None:
            pulumi.set(__self__, "continent", continent)
        if country is not None:
            pulumi.set(__self__, "country", country)

    @_builtins.property
    @pulumi.getter
    def continent(self) -> Optional[_builtins.str]:
        """
        Continent
          - Choices: `AF`, `AN`, `AS`, `EU`, `NA`, `OC`, `SA`
        """
        return pulumi.get(self, "continent")

    @_builtins.property
    @pulumi.getter
    def country(self) -> Optional[_builtins.str]:
        """
        Country
        """
        return pulumi.get(self, "country")


@pulumi.output_type
class HubAndSpokeTopologyPolicyDefinitionTopology(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "advertiseHubTlocs":
            suggest = "advertise_hub_tlocs"
        elif key == "allHubsAreEqual":
            suggest = "all_hubs_are_equal"
        elif key == "tlocListId":
            suggest = "tloc_list_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in HubAndSpokeTopologyPolicyDefinitionTopology. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        HubAndSpokeTopologyPolicyDefinitionTopology.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        HubAndSpokeTopologyPolicyDefinitionTopology.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 name: _builtins.str,
                 advertise_hub_tlocs: Optional[_builtins.bool] = None,
                 all_hubs_are_equal: Optional[_builtins.bool] = None,
                 spokes: Optional[Sequence['outputs.HubAndSpokeTopologyPolicyDefinitionTopologySpoke']] = None,
                 tloc_list_id: Optional[_builtins.str] = None):
        """
        :param _builtins.str name: Topology name
        :param _builtins.bool advertise_hub_tlocs: Advertise Hub TLOCs
        :param _builtins.bool all_hubs_are_equal: All hubs are equal (All Spokes Sites connect to all Hubs)
        :param Sequence['HubAndSpokeTopologyPolicyDefinitionTopologySpokeArgs'] spokes: List of spokes
        :param _builtins.str tloc_list_id: TLOC list ID (required when `advertise_hub_tlocs` is 'true')
        """
        pulumi.set(__self__, "name", name)
        if advertise_hub_tlocs is not None:
            pulumi.set(__self__, "advertise_hub_tlocs", advertise_hub_tlocs)
        if all_hubs_are_equal is not None:
            pulumi.set(__self__, "all_hubs_are_equal", all_hubs_are_equal)
        if spokes is not None:
            pulumi.set(__self__, "spokes", spokes)
        if tloc_list_id is not None:
            pulumi.set(__self__, "tloc_list_id", tloc_list_id)

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        """
        Topology name
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter(name="advertiseHubTlocs")
    def advertise_hub_tlocs(self) -> Optional[_builtins.bool]:
        """
        Advertise Hub TLOCs
        """
        return pulumi.get(self, "advertise_hub_tlocs")

    @_builtins.property
    @pulumi.getter(name="allHubsAreEqual")
    def all_hubs_are_equal(self) -> Optional[_builtins.bool]:
        """
        All hubs are equal (All Spokes Sites connect to all Hubs)
        """
        return pulumi.get(self, "all_hubs_are_equal")

    @_builtins.property
    @pulumi.getter
    def spokes(self) -> Optional[Sequence['outputs.HubAndSpokeTopologyPolicyDefinitionTopologySpoke']]:
        """
        List of spokes
        """
        return pulumi.get(self, "spokes")

    @_builtins.property
    @pulumi.getter(name="tlocListId")
    def tloc_list_id(self) -> Optional[_builtins.str]:
        """
        TLOC list ID (required when `advertise_hub_tlocs` is 'true')
        """
        return pulumi.get(self, "tloc_list_id")


@pulumi.output_type
class HubAndSpokeTopologyPolicyDefinitionTopologySpoke(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "siteListId":
            suggest = "site_list_id"
        elif key == "siteListVersion":
            suggest = "site_list_version"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in HubAndSpokeTopologyPolicyDefinitionTopologySpoke. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        HubAndSpokeTopologyPolicyDefinitionTopologySpoke.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        HubAndSpokeTopologyPolicyDefinitionTopologySpoke.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 hubs: Optional[Sequence['outputs.HubAndSpokeTopologyPolicyDefinitionTopologySpokeHub']] = None,
                 site_list_id: Optional[_builtins.str] = None,
                 site_list_version: Optional[_builtins.int] = None):
        """
        :param Sequence['HubAndSpokeTopologyPolicyDefinitionTopologySpokeHubArgs'] hubs: List of hubs
        :param _builtins.str site_list_id: Site list ID
        :param _builtins.int site_list_version: Site list version
        """
        if hubs is not None:
            pulumi.set(__self__, "hubs", hubs)
        if site_list_id is not None:
            pulumi.set(__self__, "site_list_id", site_list_id)
        if site_list_version is not None:
            pulumi.set(__self__, "site_list_version", site_list_version)

    @_builtins.property
    @pulumi.getter
    def hubs(self) -> Optional[Sequence['outputs.HubAndSpokeTopologyPolicyDefinitionTopologySpokeHub']]:
        """
        List of hubs
        """
        return pulumi.get(self, "hubs")

    @_builtins.property
    @pulumi.getter(name="siteListId")
    def site_list_id(self) -> Optional[_builtins.str]:
        """
        Site list ID
        """
        return pulumi.get(self, "site_list_id")

    @_builtins.property
    @pulumi.getter(name="siteListVersion")
    def site_list_version(self) -> Optional[_builtins.int]:
        """
        Site list version
        """
        return pulumi.get(self, "site_list_version")


@pulumi.output_type
class HubAndSpokeTopologyPolicyDefinitionTopologySpokeHub(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "ipv4PrefixListIds":
            suggest = "ipv4_prefix_list_ids"
        elif key == "ipv6PrefixListIds":
            suggest = "ipv6_prefix_list_ids"
        elif key == "siteListId":
            suggest = "site_list_id"
        elif key == "siteListVersion":
            suggest = "site_list_version"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in HubAndSpokeTopologyPolicyDefinitionTopologySpokeHub. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        HubAndSpokeTopologyPolicyDefinitionTopologySpokeHub.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        HubAndSpokeTopologyPolicyDefinitionTopologySpokeHub.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 ipv4_prefix_list_ids: Optional[Sequence[_builtins.str]] = None,
                 ipv6_prefix_list_ids: Optional[Sequence[_builtins.str]] = None,
                 preference: Optional[_builtins.str] = None,
                 site_list_id: Optional[_builtins.str] = None,
                 site_list_version: Optional[_builtins.int] = None):
        """
        :param Sequence[_builtins.str] ipv4_prefix_list_ids: List of IPv4 prefix list IDs
        :param Sequence[_builtins.str] ipv6_prefix_list_ids: List of IPv6 prefix list IDs
        :param _builtins.str preference: Preference, multiple of 10 (for example 70, 80, 90, 100). The higher the value the higher the priority of the associated hub (required when `all_hubs_are_equal` is 'false')
        :param _builtins.str site_list_id: Site list ID
        :param _builtins.int site_list_version: Site list version
        """
        if ipv4_prefix_list_ids is not None:
            pulumi.set(__self__, "ipv4_prefix_list_ids", ipv4_prefix_list_ids)
        if ipv6_prefix_list_ids is not None:
            pulumi.set(__self__, "ipv6_prefix_list_ids", ipv6_prefix_list_ids)
        if preference is not None:
            pulumi.set(__self__, "preference", preference)
        if site_list_id is not None:
            pulumi.set(__self__, "site_list_id", site_list_id)
        if site_list_version is not None:
            pulumi.set(__self__, "site_list_version", site_list_version)

    @_builtins.property
    @pulumi.getter(name="ipv4PrefixListIds")
    def ipv4_prefix_list_ids(self) -> Optional[Sequence[_builtins.str]]:
        """
        List of IPv4 prefix list IDs
        """
        return pulumi.get(self, "ipv4_prefix_list_ids")

    @_builtins.property
    @pulumi.getter(name="ipv6PrefixListIds")
    def ipv6_prefix_list_ids(self) -> Optional[Sequence[_builtins.str]]:
        """
        List of IPv6 prefix list IDs
        """
        return pulumi.get(self, "ipv6_prefix_list_ids")

    @_builtins.property
    @pulumi.getter
    def preference(self) -> Optional[_builtins.str]:
        """
        Preference, multiple of 10 (for example 70, 80, 90, 100). The higher the value the higher the priority of the associated hub (required when `all_hubs_are_equal` is 'false')
        """
        return pulumi.get(self, "preference")

    @_builtins.property
    @pulumi.getter(name="siteListId")
    def site_list_id(self) -> Optional[_builtins.str]:
        """
        Site list ID
        """
        return pulumi.get(self, "site_list_id")

    @_builtins.property
    @pulumi.getter(name="siteListVersion")
    def site_list_version(self) -> Optional[_builtins.int]:
        """
        Site list version
        """
        return pulumi.get(self, "site_list_version")


@pulumi.output_type
class IntrusionPreventionPolicyDefinitionLogging(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "externalSyslogServerIp":
            suggest = "external_syslog_server_ip"
        elif key == "externalSyslogServerVpn":
            suggest = "external_syslog_server_vpn"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in IntrusionPreventionPolicyDefinitionLogging. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        IntrusionPreventionPolicyDefinitionLogging.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        IntrusionPreventionPolicyDefinitionLogging.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 external_syslog_server_ip: Optional[_builtins.str] = None,
                 external_syslog_server_vpn: Optional[_builtins.str] = None):
        """
        :param _builtins.str external_syslog_server_ip: External Syslog Server IP
        :param _builtins.str external_syslog_server_vpn: External Syslog Server VPN
        """
        if external_syslog_server_ip is not None:
            pulumi.set(__self__, "external_syslog_server_ip", external_syslog_server_ip)
        if external_syslog_server_vpn is not None:
            pulumi.set(__self__, "external_syslog_server_vpn", external_syslog_server_vpn)

    @_builtins.property
    @pulumi.getter(name="externalSyslogServerIp")
    def external_syslog_server_ip(self) -> Optional[_builtins.str]:
        """
        External Syslog Server IP
        """
        return pulumi.get(self, "external_syslog_server_ip")

    @_builtins.property
    @pulumi.getter(name="externalSyslogServerVpn")
    def external_syslog_server_vpn(self) -> Optional[_builtins.str]:
        """
        External Syslog Server VPN
        """
        return pulumi.get(self, "external_syslog_server_vpn")


@pulumi.output_type
class IpsSignatureListPolicyObjectEntry(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "generatorId":
            suggest = "generator_id"
        elif key == "signatureId":
            suggest = "signature_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in IpsSignatureListPolicyObjectEntry. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        IpsSignatureListPolicyObjectEntry.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        IpsSignatureListPolicyObjectEntry.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 generator_id: Optional[_builtins.int] = None,
                 signature_id: Optional[_builtins.int] = None):
        """
        :param _builtins.int generator_id: Signature generator ID
                 - Range: `0`-`4294967295`
        :param _builtins.int signature_id: Signature ID
                 - Range: `0`-`4294967295`
        """
        if generator_id is not None:
            pulumi.set(__self__, "generator_id", generator_id)
        if signature_id is not None:
            pulumi.set(__self__, "signature_id", signature_id)

    @_builtins.property
    @pulumi.getter(name="generatorId")
    def generator_id(self) -> Optional[_builtins.int]:
        """
        Signature generator ID
          - Range: `0`-`4294967295`
        """
        return pulumi.get(self, "generator_id")

    @_builtins.property
    @pulumi.getter(name="signatureId")
    def signature_id(self) -> Optional[_builtins.int]:
        """
        Signature ID
          - Range: `0`-`4294967295`
        """
        return pulumi.get(self, "signature_id")


@pulumi.output_type
class Ipv4AclPolicyDefinitionSequence(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "actionEntries":
            suggest = "action_entries"
        elif key == "baseAction":
            suggest = "base_action"
        elif key == "matchEntries":
            suggest = "match_entries"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in Ipv4AclPolicyDefinitionSequence. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        Ipv4AclPolicyDefinitionSequence.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        Ipv4AclPolicyDefinitionSequence.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 id: _builtins.int,
                 name: _builtins.str,
                 action_entries: Optional[Sequence['outputs.Ipv4AclPolicyDefinitionSequenceActionEntry']] = None,
                 base_action: Optional[_builtins.str] = None,
                 match_entries: Optional[Sequence['outputs.Ipv4AclPolicyDefinitionSequenceMatchEntry']] = None):
        """
        :param _builtins.int id: Sequence ID
                 - Range: `1`-`65534`
        :param _builtins.str name: Sequence name
        :param Sequence['Ipv4AclPolicyDefinitionSequenceActionEntryArgs'] action_entries: List of action entries
        :param _builtins.str base_action: Base action, either `accept` or `drop`
                 - Choices: `accept`, `drop`
        :param Sequence['Ipv4AclPolicyDefinitionSequenceMatchEntryArgs'] match_entries: List of match entries
        """
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "name", name)
        if action_entries is not None:
            pulumi.set(__self__, "action_entries", action_entries)
        if base_action is not None:
            pulumi.set(__self__, "base_action", base_action)
        if match_entries is not None:
            pulumi.set(__self__, "match_entries", match_entries)

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.int:
        """
        Sequence ID
          - Range: `1`-`65534`
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        """
        Sequence name
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter(name="actionEntries")
    def action_entries(self) -> Optional[Sequence['outputs.Ipv4AclPolicyDefinitionSequenceActionEntry']]:
        """
        List of action entries
        """
        return pulumi.get(self, "action_entries")

    @_builtins.property
    @pulumi.getter(name="baseAction")
    def base_action(self) -> Optional[_builtins.str]:
        """
        Base action, either `accept` or `drop`
          - Choices: `accept`, `drop`
        """
        return pulumi.get(self, "base_action")

    @_builtins.property
    @pulumi.getter(name="matchEntries")
    def match_entries(self) -> Optional[Sequence['outputs.Ipv4AclPolicyDefinitionSequenceMatchEntry']]:
        """
        List of match entries
        """
        return pulumi.get(self, "match_entries")


@pulumi.output_type
class Ipv4AclPolicyDefinitionSequenceActionEntry(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "classMapId":
            suggest = "class_map_id"
        elif key == "classMapVersion":
            suggest = "class_map_version"
        elif key == "counterName":
            suggest = "counter_name"
        elif key == "mirrorId":
            suggest = "mirror_id"
        elif key == "mirrorVersion":
            suggest = "mirror_version"
        elif key == "policerId":
            suggest = "policer_id"
        elif key == "policerVersion":
            suggest = "policer_version"
        elif key == "setParameters":
            suggest = "set_parameters"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in Ipv4AclPolicyDefinitionSequenceActionEntry. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        Ipv4AclPolicyDefinitionSequenceActionEntry.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        Ipv4AclPolicyDefinitionSequenceActionEntry.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 type: _builtins.str,
                 class_map_id: Optional[_builtins.str] = None,
                 class_map_version: Optional[_builtins.int] = None,
                 counter_name: Optional[_builtins.str] = None,
                 log: Optional[_builtins.bool] = None,
                 mirror_id: Optional[_builtins.str] = None,
                 mirror_version: Optional[_builtins.int] = None,
                 policer_id: Optional[_builtins.str] = None,
                 policer_version: Optional[_builtins.int] = None,
                 set_parameters: Optional[Sequence['outputs.Ipv4AclPolicyDefinitionSequenceActionEntrySetParameter']] = None):
        """
        :param _builtins.str type: Type of action entry
                 - Choices: `class`, `count`, `set`, `log`, `mirror`, `policer`
        :param _builtins.str class_map_id: Class map ID, Attribute conditional on `type` being equal to `class`
        :param _builtins.int class_map_version: Class map version
        :param _builtins.str counter_name: Counter name, Attribute conditional on `type` being equal to `count`
        :param _builtins.bool log: Enable logging, Attribute conditional on `type` being equal to `log`
        :param _builtins.str mirror_id: Mirror ID, Attribute conditional on `type` being equal to `mirror`
        :param _builtins.int mirror_version: Mirror version
        :param _builtins.str policer_id: Policer ID, Attribute conditional on `type` being equal to `policer`
        :param _builtins.int policer_version: Policer version
        :param Sequence['Ipv4AclPolicyDefinitionSequenceActionEntrySetParameterArgs'] set_parameters: List of set parameters, Attribute conditional on `type` being equal to `set`
        """
        pulumi.set(__self__, "type", type)
        if class_map_id is not None:
            pulumi.set(__self__, "class_map_id", class_map_id)
        if class_map_version is not None:
            pulumi.set(__self__, "class_map_version", class_map_version)
        if counter_name is not None:
            pulumi.set(__self__, "counter_name", counter_name)
        if log is not None:
            pulumi.set(__self__, "log", log)
        if mirror_id is not None:
            pulumi.set(__self__, "mirror_id", mirror_id)
        if mirror_version is not None:
            pulumi.set(__self__, "mirror_version", mirror_version)
        if policer_id is not None:
            pulumi.set(__self__, "policer_id", policer_id)
        if policer_version is not None:
            pulumi.set(__self__, "policer_version", policer_version)
        if set_parameters is not None:
            pulumi.set(__self__, "set_parameters", set_parameters)

    @_builtins.property
    @pulumi.getter
    def type(self) -> _builtins.str:
        """
        Type of action entry
          - Choices: `class`, `count`, `set`, `log`, `mirror`, `policer`
        """
        return pulumi.get(self, "type")

    @_builtins.property
    @pulumi.getter(name="classMapId")
    def class_map_id(self) -> Optional[_builtins.str]:
        """
        Class map ID, Attribute conditional on `type` being equal to `class`
        """
        return pulumi.get(self, "class_map_id")

    @_builtins.property
    @pulumi.getter(name="classMapVersion")
    def class_map_version(self) -> Optional[_builtins.int]:
        """
        Class map version
        """
        return pulumi.get(self, "class_map_version")

    @_builtins.property
    @pulumi.getter(name="counterName")
    def counter_name(self) -> Optional[_builtins.str]:
        """
        Counter name, Attribute conditional on `type` being equal to `count`
        """
        return pulumi.get(self, "counter_name")

    @_builtins.property
    @pulumi.getter
    def log(self) -> Optional[_builtins.bool]:
        """
        Enable logging, Attribute conditional on `type` being equal to `log`
        """
        return pulumi.get(self, "log")

    @_builtins.property
    @pulumi.getter(name="mirrorId")
    def mirror_id(self) -> Optional[_builtins.str]:
        """
        Mirror ID, Attribute conditional on `type` being equal to `mirror`
        """
        return pulumi.get(self, "mirror_id")

    @_builtins.property
    @pulumi.getter(name="mirrorVersion")
    def mirror_version(self) -> Optional[_builtins.int]:
        """
        Mirror version
        """
        return pulumi.get(self, "mirror_version")

    @_builtins.property
    @pulumi.getter(name="policerId")
    def policer_id(self) -> Optional[_builtins.str]:
        """
        Policer ID, Attribute conditional on `type` being equal to `policer`
        """
        return pulumi.get(self, "policer_id")

    @_builtins.property
    @pulumi.getter(name="policerVersion")
    def policer_version(self) -> Optional[_builtins.int]:
        """
        Policer version
        """
        return pulumi.get(self, "policer_version")

    @_builtins.property
    @pulumi.getter(name="setParameters")
    def set_parameters(self) -> Optional[Sequence['outputs.Ipv4AclPolicyDefinitionSequenceActionEntrySetParameter']]:
        """
        List of set parameters, Attribute conditional on `type` being equal to `set`
        """
        return pulumi.get(self, "set_parameters")


@pulumi.output_type
class Ipv4AclPolicyDefinitionSequenceActionEntrySetParameter(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "nextHop":
            suggest = "next_hop"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in Ipv4AclPolicyDefinitionSequenceActionEntrySetParameter. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        Ipv4AclPolicyDefinitionSequenceActionEntrySetParameter.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        Ipv4AclPolicyDefinitionSequenceActionEntrySetParameter.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 type: _builtins.str,
                 dscp: Optional[_builtins.int] = None,
                 next_hop: Optional[_builtins.str] = None):
        """
        :param _builtins.str type: Type of set parameter
                 - Choices: `dscp`, `nextHop`
        :param _builtins.int dscp: DSCP value, Attribute conditional on `type` being equal to `dscp`
                 - Range: `0`-`63`
        :param _builtins.str next_hop: Next hop IP, Attribute conditional on `type` being equal to `nextHop`
        """
        pulumi.set(__self__, "type", type)
        if dscp is not None:
            pulumi.set(__self__, "dscp", dscp)
        if next_hop is not None:
            pulumi.set(__self__, "next_hop", next_hop)

    @_builtins.property
    @pulumi.getter
    def type(self) -> _builtins.str:
        """
        Type of set parameter
          - Choices: `dscp`, `nextHop`
        """
        return pulumi.get(self, "type")

    @_builtins.property
    @pulumi.getter
    def dscp(self) -> Optional[_builtins.int]:
        """
        DSCP value, Attribute conditional on `type` being equal to `dscp`
          - Range: `0`-`63`
        """
        return pulumi.get(self, "dscp")

    @_builtins.property
    @pulumi.getter(name="nextHop")
    def next_hop(self) -> Optional[_builtins.str]:
        """
        Next hop IP, Attribute conditional on `type` being equal to `nextHop`
        """
        return pulumi.get(self, "next_hop")


@pulumi.output_type
class Ipv4AclPolicyDefinitionSequenceMatchEntry(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "classMapId":
            suggest = "class_map_id"
        elif key == "classMapVersion":
            suggest = "class_map_version"
        elif key == "destinationDataIpv4PrefixListId":
            suggest = "destination_data_ipv4_prefix_list_id"
        elif key == "destinationDataIpv4PrefixListVersion":
            suggest = "destination_data_ipv4_prefix_list_version"
        elif key == "destinationIp":
            suggest = "destination_ip"
        elif key == "destinationIpVariable":
            suggest = "destination_ip_variable"
        elif key == "destinationPorts":
            suggest = "destination_ports"
        elif key == "icmpMessage":
            suggest = "icmp_message"
        elif key == "packetLength":
            suggest = "packet_length"
        elif key == "sourceDataIpv4PrefixListId":
            suggest = "source_data_ipv4_prefix_list_id"
        elif key == "sourceDataIpv4PrefixListVersion":
            suggest = "source_data_ipv4_prefix_list_version"
        elif key == "sourceIp":
            suggest = "source_ip"
        elif key == "sourceIpVariable":
            suggest = "source_ip_variable"
        elif key == "sourcePorts":
            suggest = "source_ports"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in Ipv4AclPolicyDefinitionSequenceMatchEntry. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        Ipv4AclPolicyDefinitionSequenceMatchEntry.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        Ipv4AclPolicyDefinitionSequenceMatchEntry.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 type: _builtins.str,
                 class_map_id: Optional[_builtins.str] = None,
                 class_map_version: Optional[_builtins.int] = None,
                 destination_data_ipv4_prefix_list_id: Optional[_builtins.str] = None,
                 destination_data_ipv4_prefix_list_version: Optional[_builtins.int] = None,
                 destination_ip: Optional[_builtins.str] = None,
                 destination_ip_variable: Optional[_builtins.str] = None,
                 destination_ports: Optional[_builtins.str] = None,
                 dscp: Optional[_builtins.str] = None,
                 icmp_message: Optional[_builtins.str] = None,
                 packet_length: Optional[_builtins.int] = None,
                 priority: Optional[_builtins.str] = None,
                 protocol: Optional[_builtins.str] = None,
                 source_data_ipv4_prefix_list_id: Optional[_builtins.str] = None,
                 source_data_ipv4_prefix_list_version: Optional[_builtins.int] = None,
                 source_ip: Optional[_builtins.str] = None,
                 source_ip_variable: Optional[_builtins.str] = None,
                 source_ports: Optional[_builtins.str] = None,
                 tcp: Optional[_builtins.str] = None):
        """
        :param _builtins.str type: Type of match entry
                 - Choices: `dscp`, `sourceIp`, `destinationIp`, `class`, `packetLength`, `plp`, `sourcePort`, `destinationPort`, `sourceDataPrefixList`, `destinationDataPrefixList`, `protocol`, `tcp`, `icmpMessage`
        :param _builtins.str class_map_id: Class map ID, Attribute conditional on `type` being equal to `class`
        :param _builtins.int class_map_version: Class map version
        :param _builtins.str destination_data_ipv4_prefix_list_id: Destination data IPv4 prefix list ID, Attribute conditional on `type` being equal to `destinationDataPrefixList`
        :param _builtins.int destination_data_ipv4_prefix_list_version: Destination data IPv4 prefix list version
        :param _builtins.str destination_ip: Destination IP prefix, Attribute conditional on `type` being equal to `destinationIp`
        :param _builtins.str destination_ip_variable: Destination IP prefix variable, Attribute conditional on `type` being equal to `destinationIp`
        :param _builtins.str destination_ports: Destination ports. Single value (0-65535) or ranges separated by spaces., Attribute conditional on `type` being equal to `destinationPort`
        :param _builtins.str dscp: DSCP value, Attribute conditional on `type` being equal to `dscp`
        :param _builtins.str icmp_message: ICMP Message, Attribute conditional on `type` being equal to `icmpMessage`
        :param _builtins.int packet_length: Packet length, Attribute conditional on `type` being equal to `packetLength`
                 - Range: `0`-`65535`
        :param _builtins.str priority: PLP - priority, Attribute conditional on `type` being equal to `plp`
                 - Choices: `high`, `low`
        :param _builtins.str protocol: Single value (0-255) or multiple values separated by spaces, Attribute conditional on `type` being equal to `protocol`
        :param _builtins.str source_data_ipv4_prefix_list_id: Source data IPv4 prefix list ID, Attribute conditional on `type` being equal to `sourceDataPrefixList`
        :param _builtins.int source_data_ipv4_prefix_list_version: Source data IPv4 prefix list version
        :param _builtins.str source_ip: Source IP prefix, Attribute conditional on `type` being equal to `sourceIp`
        :param _builtins.str source_ip_variable: Source IP prefix variable, Attribute conditional on `type` being equal to `sourceIp`
        :param _builtins.str source_ports: Source ports. Single value (0-65535) or ranges separated by spaces., Attribute conditional on `type` being equal to `sourcePort`
        :param _builtins.str tcp: TCP parameters, Attribute conditional on `type` being equal to `tcp`
                 - Choices: `syn`
        """
        pulumi.set(__self__, "type", type)
        if class_map_id is not None:
            pulumi.set(__self__, "class_map_id", class_map_id)
        if class_map_version is not None:
            pulumi.set(__self__, "class_map_version", class_map_version)
        if destination_data_ipv4_prefix_list_id is not None:
            pulumi.set(__self__, "destination_data_ipv4_prefix_list_id", destination_data_ipv4_prefix_list_id)
        if destination_data_ipv4_prefix_list_version is not None:
            pulumi.set(__self__, "destination_data_ipv4_prefix_list_version", destination_data_ipv4_prefix_list_version)
        if destination_ip is not None:
            pulumi.set(__self__, "destination_ip", destination_ip)
        if destination_ip_variable is not None:
            pulumi.set(__self__, "destination_ip_variable", destination_ip_variable)
        if destination_ports is not None:
            pulumi.set(__self__, "destination_ports", destination_ports)
        if dscp is not None:
            pulumi.set(__self__, "dscp", dscp)
        if icmp_message is not None:
            pulumi.set(__self__, "icmp_message", icmp_message)
        if packet_length is not None:
            pulumi.set(__self__, "packet_length", packet_length)
        if priority is not None:
            pulumi.set(__self__, "priority", priority)
        if protocol is not None:
            pulumi.set(__self__, "protocol", protocol)
        if source_data_ipv4_prefix_list_id is not None:
            pulumi.set(__self__, "source_data_ipv4_prefix_list_id", source_data_ipv4_prefix_list_id)
        if source_data_ipv4_prefix_list_version is not None:
            pulumi.set(__self__, "source_data_ipv4_prefix_list_version", source_data_ipv4_prefix_list_version)
        if source_ip is not None:
            pulumi.set(__self__, "source_ip", source_ip)
        if source_ip_variable is not None:
            pulumi.set(__self__, "source_ip_variable", source_ip_variable)
        if source_ports is not None:
            pulumi.set(__self__, "source_ports", source_ports)
        if tcp is not None:
            pulumi.set(__self__, "tcp", tcp)

    @_builtins.property
    @pulumi.getter
    def type(self) -> _builtins.str:
        """
        Type of match entry
          - Choices: `dscp`, `sourceIp`, `destinationIp`, `class`, `packetLength`, `plp`, `sourcePort`, `destinationPort`, `sourceDataPrefixList`, `destinationDataPrefixList`, `protocol`, `tcp`, `icmpMessage`
        """
        return pulumi.get(self, "type")

    @_builtins.property
    @pulumi.getter(name="classMapId")
    def class_map_id(self) -> Optional[_builtins.str]:
        """
        Class map ID, Attribute conditional on `type` being equal to `class`
        """
        return pulumi.get(self, "class_map_id")

    @_builtins.property
    @pulumi.getter(name="classMapVersion")
    def class_map_version(self) -> Optional[_builtins.int]:
        """
        Class map version
        """
        return pulumi.get(self, "class_map_version")

    @_builtins.property
    @pulumi.getter(name="destinationDataIpv4PrefixListId")
    def destination_data_ipv4_prefix_list_id(self) -> Optional[_builtins.str]:
        """
        Destination data IPv4 prefix list ID, Attribute conditional on `type` being equal to `destinationDataPrefixList`
        """
        return pulumi.get(self, "destination_data_ipv4_prefix_list_id")

    @_builtins.property
    @pulumi.getter(name="destinationDataIpv4PrefixListVersion")
    def destination_data_ipv4_prefix_list_version(self) -> Optional[_builtins.int]:
        """
        Destination data IPv4 prefix list version
        """
        return pulumi.get(self, "destination_data_ipv4_prefix_list_version")

    @_builtins.property
    @pulumi.getter(name="destinationIp")
    def destination_ip(self) -> Optional[_builtins.str]:
        """
        Destination IP prefix, Attribute conditional on `type` being equal to `destinationIp`
        """
        return pulumi.get(self, "destination_ip")

    @_builtins.property
    @pulumi.getter(name="destinationIpVariable")
    def destination_ip_variable(self) -> Optional[_builtins.str]:
        """
        Destination IP prefix variable, Attribute conditional on `type` being equal to `destinationIp`
        """
        return pulumi.get(self, "destination_ip_variable")

    @_builtins.property
    @pulumi.getter(name="destinationPorts")
    def destination_ports(self) -> Optional[_builtins.str]:
        """
        Destination ports. Single value (0-65535) or ranges separated by spaces., Attribute conditional on `type` being equal to `destinationPort`
        """
        return pulumi.get(self, "destination_ports")

    @_builtins.property
    @pulumi.getter
    def dscp(self) -> Optional[_builtins.str]:
        """
        DSCP value, Attribute conditional on `type` being equal to `dscp`
        """
        return pulumi.get(self, "dscp")

    @_builtins.property
    @pulumi.getter(name="icmpMessage")
    def icmp_message(self) -> Optional[_builtins.str]:
        """
        ICMP Message, Attribute conditional on `type` being equal to `icmpMessage`
        """
        return pulumi.get(self, "icmp_message")

    @_builtins.property
    @pulumi.getter(name="packetLength")
    def packet_length(self) -> Optional[_builtins.int]:
        """
        Packet length, Attribute conditional on `type` being equal to `packetLength`
          - Range: `0`-`65535`
        """
        return pulumi.get(self, "packet_length")

    @_builtins.property
    @pulumi.getter
    def priority(self) -> Optional[_builtins.str]:
        """
        PLP - priority, Attribute conditional on `type` being equal to `plp`
          - Choices: `high`, `low`
        """
        return pulumi.get(self, "priority")

    @_builtins.property
    @pulumi.getter
    def protocol(self) -> Optional[_builtins.str]:
        """
        Single value (0-255) or multiple values separated by spaces, Attribute conditional on `type` being equal to `protocol`
        """
        return pulumi.get(self, "protocol")

    @_builtins.property
    @pulumi.getter(name="sourceDataIpv4PrefixListId")
    def source_data_ipv4_prefix_list_id(self) -> Optional[_builtins.str]:
        """
        Source data IPv4 prefix list ID, Attribute conditional on `type` being equal to `sourceDataPrefixList`
        """
        return pulumi.get(self, "source_data_ipv4_prefix_list_id")

    @_builtins.property
    @pulumi.getter(name="sourceDataIpv4PrefixListVersion")
    def source_data_ipv4_prefix_list_version(self) -> Optional[_builtins.int]:
        """
        Source data IPv4 prefix list version
        """
        return pulumi.get(self, "source_data_ipv4_prefix_list_version")

    @_builtins.property
    @pulumi.getter(name="sourceIp")
    def source_ip(self) -> Optional[_builtins.str]:
        """
        Source IP prefix, Attribute conditional on `type` being equal to `sourceIp`
        """
        return pulumi.get(self, "source_ip")

    @_builtins.property
    @pulumi.getter(name="sourceIpVariable")
    def source_ip_variable(self) -> Optional[_builtins.str]:
        """
        Source IP prefix variable, Attribute conditional on `type` being equal to `sourceIp`
        """
        return pulumi.get(self, "source_ip_variable")

    @_builtins.property
    @pulumi.getter(name="sourcePorts")
    def source_ports(self) -> Optional[_builtins.str]:
        """
        Source ports. Single value (0-65535) or ranges separated by spaces., Attribute conditional on `type` being equal to `sourcePort`
        """
        return pulumi.get(self, "source_ports")

    @_builtins.property
    @pulumi.getter
    def tcp(self) -> Optional[_builtins.str]:
        """
        TCP parameters, Attribute conditional on `type` being equal to `tcp`
          - Choices: `syn`
        """
        return pulumi.get(self, "tcp")


@pulumi.output_type
class Ipv4DeviceAclPolicyDefinitionSequence(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "actionEntries":
            suggest = "action_entries"
        elif key == "baseAction":
            suggest = "base_action"
        elif key == "matchEntries":
            suggest = "match_entries"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in Ipv4DeviceAclPolicyDefinitionSequence. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        Ipv4DeviceAclPolicyDefinitionSequence.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        Ipv4DeviceAclPolicyDefinitionSequence.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 id: _builtins.int,
                 name: _builtins.str,
                 action_entries: Optional[Sequence['outputs.Ipv4DeviceAclPolicyDefinitionSequenceActionEntry']] = None,
                 base_action: Optional[_builtins.str] = None,
                 match_entries: Optional[Sequence['outputs.Ipv4DeviceAclPolicyDefinitionSequenceMatchEntry']] = None):
        """
        :param _builtins.int id: Sequence ID
                 - Range: `1`-`65534`
        :param _builtins.str name: Sequence name
        :param Sequence['Ipv4DeviceAclPolicyDefinitionSequenceActionEntryArgs'] action_entries: List of action entries
        :param _builtins.str base_action: Base action, either `accept` or `drop`
                 - Choices: `accept`, `drop`
        :param Sequence['Ipv4DeviceAclPolicyDefinitionSequenceMatchEntryArgs'] match_entries: List of match entries
        """
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "name", name)
        if action_entries is not None:
            pulumi.set(__self__, "action_entries", action_entries)
        if base_action is not None:
            pulumi.set(__self__, "base_action", base_action)
        if match_entries is not None:
            pulumi.set(__self__, "match_entries", match_entries)

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.int:
        """
        Sequence ID
          - Range: `1`-`65534`
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        """
        Sequence name
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter(name="actionEntries")
    def action_entries(self) -> Optional[Sequence['outputs.Ipv4DeviceAclPolicyDefinitionSequenceActionEntry']]:
        """
        List of action entries
        """
        return pulumi.get(self, "action_entries")

    @_builtins.property
    @pulumi.getter(name="baseAction")
    def base_action(self) -> Optional[_builtins.str]:
        """
        Base action, either `accept` or `drop`
          - Choices: `accept`, `drop`
        """
        return pulumi.get(self, "base_action")

    @_builtins.property
    @pulumi.getter(name="matchEntries")
    def match_entries(self) -> Optional[Sequence['outputs.Ipv4DeviceAclPolicyDefinitionSequenceMatchEntry']]:
        """
        List of match entries
        """
        return pulumi.get(self, "match_entries")


@pulumi.output_type
class Ipv4DeviceAclPolicyDefinitionSequenceActionEntry(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "counterName":
            suggest = "counter_name"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in Ipv4DeviceAclPolicyDefinitionSequenceActionEntry. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        Ipv4DeviceAclPolicyDefinitionSequenceActionEntry.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        Ipv4DeviceAclPolicyDefinitionSequenceActionEntry.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 type: _builtins.str,
                 counter_name: Optional[_builtins.str] = None):
        """
        :param _builtins.str type: Type of action entry
                 - Choices: `count`
        :param _builtins.str counter_name: Counter name, Attribute conditional on `type` being equal to `count`
        """
        pulumi.set(__self__, "type", type)
        if counter_name is not None:
            pulumi.set(__self__, "counter_name", counter_name)

    @_builtins.property
    @pulumi.getter
    def type(self) -> _builtins.str:
        """
        Type of action entry
          - Choices: `count`
        """
        return pulumi.get(self, "type")

    @_builtins.property
    @pulumi.getter(name="counterName")
    def counter_name(self) -> Optional[_builtins.str]:
        """
        Counter name, Attribute conditional on `type` being equal to `count`
        """
        return pulumi.get(self, "counter_name")


@pulumi.output_type
class Ipv4DeviceAclPolicyDefinitionSequenceMatchEntry(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "destinationDataIpv4PrefixListId":
            suggest = "destination_data_ipv4_prefix_list_id"
        elif key == "destinationDataIpv4PrefixListVersion":
            suggest = "destination_data_ipv4_prefix_list_version"
        elif key == "destinationIp":
            suggest = "destination_ip"
        elif key == "destinationIpVariable":
            suggest = "destination_ip_variable"
        elif key == "destinationPort":
            suggest = "destination_port"
        elif key == "sourceDataIpv4PrefixListId":
            suggest = "source_data_ipv4_prefix_list_id"
        elif key == "sourceDataIpv4PrefixListVersion":
            suggest = "source_data_ipv4_prefix_list_version"
        elif key == "sourceIp":
            suggest = "source_ip"
        elif key == "sourceIpVariable":
            suggest = "source_ip_variable"
        elif key == "sourcePorts":
            suggest = "source_ports"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in Ipv4DeviceAclPolicyDefinitionSequenceMatchEntry. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        Ipv4DeviceAclPolicyDefinitionSequenceMatchEntry.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        Ipv4DeviceAclPolicyDefinitionSequenceMatchEntry.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 type: _builtins.str,
                 destination_data_ipv4_prefix_list_id: Optional[_builtins.str] = None,
                 destination_data_ipv4_prefix_list_version: Optional[_builtins.int] = None,
                 destination_ip: Optional[_builtins.str] = None,
                 destination_ip_variable: Optional[_builtins.str] = None,
                 destination_port: Optional[_builtins.int] = None,
                 source_data_ipv4_prefix_list_id: Optional[_builtins.str] = None,
                 source_data_ipv4_prefix_list_version: Optional[_builtins.int] = None,
                 source_ip: Optional[_builtins.str] = None,
                 source_ip_variable: Optional[_builtins.str] = None,
                 source_ports: Optional[_builtins.str] = None):
        """
        :param _builtins.str type: Type of match entry
                 - Choices: `sourceIp`, `destinationIp`, `sourcePort`, `destinationPort`, `sourceDataPrefixList`, `destinationDataPrefixList`
        :param _builtins.str destination_data_ipv4_prefix_list_id: Destination data IPv4 prefix list ID, Attribute conditional on `type` being equal to `destinationDataPrefixList`
        :param _builtins.int destination_data_ipv4_prefix_list_version: Destination data IPv4 prefix list version
        :param _builtins.str destination_ip: Destination IP prefix, Attribute conditional on `type` being equal to `destinationIp`
        :param _builtins.str destination_ip_variable: Destination IP prefix variable, Attribute conditional on `type` being equal to `destinationIp`
        :param _builtins.int destination_port: Destination port, only `22` and `161` supported, Attribute conditional on `type` being equal to `destinationPort`
                 - Range: `0`-`65535`
        :param _builtins.str source_data_ipv4_prefix_list_id: Source data IPv4 prefix list ID, Attribute conditional on `type` being equal to `sourceDataPrefixList`
        :param _builtins.int source_data_ipv4_prefix_list_version: Source data IPv4 prefix list version
        :param _builtins.str source_ip: Source IP prefix, Attribute conditional on `type` being equal to `sourceIp`
        :param _builtins.str source_ip_variable: Source IP prefix variable, Attribute conditional on `type` being equal to `sourceIp`
        :param _builtins.str source_ports: Source ports. Single value (0-65535) or ranges separated by spaces., Attribute conditional on `type` being equal to `sourcePort`
        """
        pulumi.set(__self__, "type", type)
        if destination_data_ipv4_prefix_list_id is not None:
            pulumi.set(__self__, "destination_data_ipv4_prefix_list_id", destination_data_ipv4_prefix_list_id)
        if destination_data_ipv4_prefix_list_version is not None:
            pulumi.set(__self__, "destination_data_ipv4_prefix_list_version", destination_data_ipv4_prefix_list_version)
        if destination_ip is not None:
            pulumi.set(__self__, "destination_ip", destination_ip)
        if destination_ip_variable is not None:
            pulumi.set(__self__, "destination_ip_variable", destination_ip_variable)
        if destination_port is not None:
            pulumi.set(__self__, "destination_port", destination_port)
        if source_data_ipv4_prefix_list_id is not None:
            pulumi.set(__self__, "source_data_ipv4_prefix_list_id", source_data_ipv4_prefix_list_id)
        if source_data_ipv4_prefix_list_version is not None:
            pulumi.set(__self__, "source_data_ipv4_prefix_list_version", source_data_ipv4_prefix_list_version)
        if source_ip is not None:
            pulumi.set(__self__, "source_ip", source_ip)
        if source_ip_variable is not None:
            pulumi.set(__self__, "source_ip_variable", source_ip_variable)
        if source_ports is not None:
            pulumi.set(__self__, "source_ports", source_ports)

    @_builtins.property
    @pulumi.getter
    def type(self) -> _builtins.str:
        """
        Type of match entry
          - Choices: `sourceIp`, `destinationIp`, `sourcePort`, `destinationPort`, `sourceDataPrefixList`, `destinationDataPrefixList`
        """
        return pulumi.get(self, "type")

    @_builtins.property
    @pulumi.getter(name="destinationDataIpv4PrefixListId")
    def destination_data_ipv4_prefix_list_id(self) -> Optional[_builtins.str]:
        """
        Destination data IPv4 prefix list ID, Attribute conditional on `type` being equal to `destinationDataPrefixList`
        """
        return pulumi.get(self, "destination_data_ipv4_prefix_list_id")

    @_builtins.property
    @pulumi.getter(name="destinationDataIpv4PrefixListVersion")
    def destination_data_ipv4_prefix_list_version(self) -> Optional[_builtins.int]:
        """
        Destination data IPv4 prefix list version
        """
        return pulumi.get(self, "destination_data_ipv4_prefix_list_version")

    @_builtins.property
    @pulumi.getter(name="destinationIp")
    def destination_ip(self) -> Optional[_builtins.str]:
        """
        Destination IP prefix, Attribute conditional on `type` being equal to `destinationIp`
        """
        return pulumi.get(self, "destination_ip")

    @_builtins.property
    @pulumi.getter(name="destinationIpVariable")
    def destination_ip_variable(self) -> Optional[_builtins.str]:
        """
        Destination IP prefix variable, Attribute conditional on `type` being equal to `destinationIp`
        """
        return pulumi.get(self, "destination_ip_variable")

    @_builtins.property
    @pulumi.getter(name="destinationPort")
    def destination_port(self) -> Optional[_builtins.int]:
        """
        Destination port, only `22` and `161` supported, Attribute conditional on `type` being equal to `destinationPort`
          - Range: `0`-`65535`
        """
        return pulumi.get(self, "destination_port")

    @_builtins.property
    @pulumi.getter(name="sourceDataIpv4PrefixListId")
    def source_data_ipv4_prefix_list_id(self) -> Optional[_builtins.str]:
        """
        Source data IPv4 prefix list ID, Attribute conditional on `type` being equal to `sourceDataPrefixList`
        """
        return pulumi.get(self, "source_data_ipv4_prefix_list_id")

    @_builtins.property
    @pulumi.getter(name="sourceDataIpv4PrefixListVersion")
    def source_data_ipv4_prefix_list_version(self) -> Optional[_builtins.int]:
        """
        Source data IPv4 prefix list version
        """
        return pulumi.get(self, "source_data_ipv4_prefix_list_version")

    @_builtins.property
    @pulumi.getter(name="sourceIp")
    def source_ip(self) -> Optional[_builtins.str]:
        """
        Source IP prefix, Attribute conditional on `type` being equal to `sourceIp`
        """
        return pulumi.get(self, "source_ip")

    @_builtins.property
    @pulumi.getter(name="sourceIpVariable")
    def source_ip_variable(self) -> Optional[_builtins.str]:
        """
        Source IP prefix variable, Attribute conditional on `type` being equal to `sourceIp`
        """
        return pulumi.get(self, "source_ip_variable")

    @_builtins.property
    @pulumi.getter(name="sourcePorts")
    def source_ports(self) -> Optional[_builtins.str]:
        """
        Source ports. Single value (0-65535) or ranges separated by spaces., Attribute conditional on `type` being equal to `sourcePort`
        """
        return pulumi.get(self, "source_ports")


@pulumi.output_type
class Ipv4PrefixListPolicyObjectEntry(dict):
    def __init__(__self__, *,
                 prefix: _builtins.str,
                 ge: Optional[_builtins.int] = None,
                 le: Optional[_builtins.int] = None):
        """
        :param _builtins.str prefix: IP prefix list entry e.g., `10.0.0.0/12`
        :param _builtins.int ge: Greater equal
        :param _builtins.int le: Lesser equal
        """
        pulumi.set(__self__, "prefix", prefix)
        if ge is not None:
            pulumi.set(__self__, "ge", ge)
        if le is not None:
            pulumi.set(__self__, "le", le)

    @_builtins.property
    @pulumi.getter
    def prefix(self) -> _builtins.str:
        """
        IP prefix list entry e.g., `10.0.0.0/12`
        """
        return pulumi.get(self, "prefix")

    @_builtins.property
    @pulumi.getter
    def ge(self) -> Optional[_builtins.int]:
        """
        Greater equal
        """
        return pulumi.get(self, "ge")

    @_builtins.property
    @pulumi.getter
    def le(self) -> Optional[_builtins.int]:
        """
        Lesser equal
        """
        return pulumi.get(self, "le")


@pulumi.output_type
class Ipv6AclPolicyDefinitionSequence(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "actionEntries":
            suggest = "action_entries"
        elif key == "baseAction":
            suggest = "base_action"
        elif key == "matchEntries":
            suggest = "match_entries"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in Ipv6AclPolicyDefinitionSequence. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        Ipv6AclPolicyDefinitionSequence.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        Ipv6AclPolicyDefinitionSequence.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 id: _builtins.int,
                 name: _builtins.str,
                 action_entries: Optional[Sequence['outputs.Ipv6AclPolicyDefinitionSequenceActionEntry']] = None,
                 base_action: Optional[_builtins.str] = None,
                 match_entries: Optional[Sequence['outputs.Ipv6AclPolicyDefinitionSequenceMatchEntry']] = None):
        """
        :param _builtins.int id: Sequence ID
                 - Range: `1`-`65534`
        :param _builtins.str name: Sequence name
        :param Sequence['Ipv6AclPolicyDefinitionSequenceActionEntryArgs'] action_entries: List of action entries
        :param _builtins.str base_action: Base action, either `accept` or `drop`
                 - Choices: `accept`, `drop`
        :param Sequence['Ipv6AclPolicyDefinitionSequenceMatchEntryArgs'] match_entries: List of match entries
        """
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "name", name)
        if action_entries is not None:
            pulumi.set(__self__, "action_entries", action_entries)
        if base_action is not None:
            pulumi.set(__self__, "base_action", base_action)
        if match_entries is not None:
            pulumi.set(__self__, "match_entries", match_entries)

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.int:
        """
        Sequence ID
          - Range: `1`-`65534`
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        """
        Sequence name
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter(name="actionEntries")
    def action_entries(self) -> Optional[Sequence['outputs.Ipv6AclPolicyDefinitionSequenceActionEntry']]:
        """
        List of action entries
        """
        return pulumi.get(self, "action_entries")

    @_builtins.property
    @pulumi.getter(name="baseAction")
    def base_action(self) -> Optional[_builtins.str]:
        """
        Base action, either `accept` or `drop`
          - Choices: `accept`, `drop`
        """
        return pulumi.get(self, "base_action")

    @_builtins.property
    @pulumi.getter(name="matchEntries")
    def match_entries(self) -> Optional[Sequence['outputs.Ipv6AclPolicyDefinitionSequenceMatchEntry']]:
        """
        List of match entries
        """
        return pulumi.get(self, "match_entries")


@pulumi.output_type
class Ipv6AclPolicyDefinitionSequenceActionEntry(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "classMapId":
            suggest = "class_map_id"
        elif key == "classMapVersion":
            suggest = "class_map_version"
        elif key == "counterName":
            suggest = "counter_name"
        elif key == "mirrorId":
            suggest = "mirror_id"
        elif key == "mirrorVersion":
            suggest = "mirror_version"
        elif key == "policerId":
            suggest = "policer_id"
        elif key == "policerVersion":
            suggest = "policer_version"
        elif key == "setParameters":
            suggest = "set_parameters"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in Ipv6AclPolicyDefinitionSequenceActionEntry. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        Ipv6AclPolicyDefinitionSequenceActionEntry.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        Ipv6AclPolicyDefinitionSequenceActionEntry.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 type: _builtins.str,
                 class_map_id: Optional[_builtins.str] = None,
                 class_map_version: Optional[_builtins.int] = None,
                 counter_name: Optional[_builtins.str] = None,
                 log: Optional[_builtins.bool] = None,
                 mirror_id: Optional[_builtins.str] = None,
                 mirror_version: Optional[_builtins.int] = None,
                 policer_id: Optional[_builtins.str] = None,
                 policer_version: Optional[_builtins.int] = None,
                 set_parameters: Optional[Sequence['outputs.Ipv6AclPolicyDefinitionSequenceActionEntrySetParameter']] = None):
        """
        :param _builtins.str type: Type of action entry
                 - Choices: `class`, `count`, `set`, `log`, `mirror`, `policer`
        :param _builtins.str class_map_id: Class map ID, Attribute conditional on `type` being equal to `class`
        :param _builtins.int class_map_version: Class map version
        :param _builtins.str counter_name: Counter name, Attribute conditional on `type` being equal to `count`
        :param _builtins.bool log: Enable logging, Attribute conditional on `type` being equal to `log`
        :param _builtins.str mirror_id: Mirror ID, Attribute conditional on `type` being equal to `mirror`
        :param _builtins.int mirror_version: Mirror version
        :param _builtins.str policer_id: Policer ID, Attribute conditional on `type` being equal to `policer`
        :param _builtins.int policer_version: Policer version
        :param Sequence['Ipv6AclPolicyDefinitionSequenceActionEntrySetParameterArgs'] set_parameters: List of set parameters, Attribute conditional on `type` being equal to `set`
        """
        pulumi.set(__self__, "type", type)
        if class_map_id is not None:
            pulumi.set(__self__, "class_map_id", class_map_id)
        if class_map_version is not None:
            pulumi.set(__self__, "class_map_version", class_map_version)
        if counter_name is not None:
            pulumi.set(__self__, "counter_name", counter_name)
        if log is not None:
            pulumi.set(__self__, "log", log)
        if mirror_id is not None:
            pulumi.set(__self__, "mirror_id", mirror_id)
        if mirror_version is not None:
            pulumi.set(__self__, "mirror_version", mirror_version)
        if policer_id is not None:
            pulumi.set(__self__, "policer_id", policer_id)
        if policer_version is not None:
            pulumi.set(__self__, "policer_version", policer_version)
        if set_parameters is not None:
            pulumi.set(__self__, "set_parameters", set_parameters)

    @_builtins.property
    @pulumi.getter
    def type(self) -> _builtins.str:
        """
        Type of action entry
          - Choices: `class`, `count`, `set`, `log`, `mirror`, `policer`
        """
        return pulumi.get(self, "type")

    @_builtins.property
    @pulumi.getter(name="classMapId")
    def class_map_id(self) -> Optional[_builtins.str]:
        """
        Class map ID, Attribute conditional on `type` being equal to `class`
        """
        return pulumi.get(self, "class_map_id")

    @_builtins.property
    @pulumi.getter(name="classMapVersion")
    def class_map_version(self) -> Optional[_builtins.int]:
        """
        Class map version
        """
        return pulumi.get(self, "class_map_version")

    @_builtins.property
    @pulumi.getter(name="counterName")
    def counter_name(self) -> Optional[_builtins.str]:
        """
        Counter name, Attribute conditional on `type` being equal to `count`
        """
        return pulumi.get(self, "counter_name")

    @_builtins.property
    @pulumi.getter
    def log(self) -> Optional[_builtins.bool]:
        """
        Enable logging, Attribute conditional on `type` being equal to `log`
        """
        return pulumi.get(self, "log")

    @_builtins.property
    @pulumi.getter(name="mirrorId")
    def mirror_id(self) -> Optional[_builtins.str]:
        """
        Mirror ID, Attribute conditional on `type` being equal to `mirror`
        """
        return pulumi.get(self, "mirror_id")

    @_builtins.property
    @pulumi.getter(name="mirrorVersion")
    def mirror_version(self) -> Optional[_builtins.int]:
        """
        Mirror version
        """
        return pulumi.get(self, "mirror_version")

    @_builtins.property
    @pulumi.getter(name="policerId")
    def policer_id(self) -> Optional[_builtins.str]:
        """
        Policer ID, Attribute conditional on `type` being equal to `policer`
        """
        return pulumi.get(self, "policer_id")

    @_builtins.property
    @pulumi.getter(name="policerVersion")
    def policer_version(self) -> Optional[_builtins.int]:
        """
        Policer version
        """
        return pulumi.get(self, "policer_version")

    @_builtins.property
    @pulumi.getter(name="setParameters")
    def set_parameters(self) -> Optional[Sequence['outputs.Ipv6AclPolicyDefinitionSequenceActionEntrySetParameter']]:
        """
        List of set parameters, Attribute conditional on `type` being equal to `set`
        """
        return pulumi.get(self, "set_parameters")


@pulumi.output_type
class Ipv6AclPolicyDefinitionSequenceActionEntrySetParameter(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "nextHop":
            suggest = "next_hop"
        elif key == "trafficClass":
            suggest = "traffic_class"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in Ipv6AclPolicyDefinitionSequenceActionEntrySetParameter. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        Ipv6AclPolicyDefinitionSequenceActionEntrySetParameter.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        Ipv6AclPolicyDefinitionSequenceActionEntrySetParameter.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 type: _builtins.str,
                 next_hop: Optional[_builtins.str] = None,
                 traffic_class: Optional[_builtins.int] = None):
        """
        :param _builtins.str type: Type of set parameter
                 - Choices: `trafficClass`, `nextHop`
        :param _builtins.str next_hop: Next hop IP, Attribute conditional on `type` being equal to `nextHop`
        :param _builtins.int traffic_class: Traffic class, Attribute conditional on `type` being equal to `trafficClass`
                 - Range: `0`-`63`
        """
        pulumi.set(__self__, "type", type)
        if next_hop is not None:
            pulumi.set(__self__, "next_hop", next_hop)
        if traffic_class is not None:
            pulumi.set(__self__, "traffic_class", traffic_class)

    @_builtins.property
    @pulumi.getter
    def type(self) -> _builtins.str:
        """
        Type of set parameter
          - Choices: `trafficClass`, `nextHop`
        """
        return pulumi.get(self, "type")

    @_builtins.property
    @pulumi.getter(name="nextHop")
    def next_hop(self) -> Optional[_builtins.str]:
        """
        Next hop IP, Attribute conditional on `type` being equal to `nextHop`
        """
        return pulumi.get(self, "next_hop")

    @_builtins.property
    @pulumi.getter(name="trafficClass")
    def traffic_class(self) -> Optional[_builtins.int]:
        """
        Traffic class, Attribute conditional on `type` being equal to `trafficClass`
          - Range: `0`-`63`
        """
        return pulumi.get(self, "traffic_class")


@pulumi.output_type
class Ipv6AclPolicyDefinitionSequenceMatchEntry(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "classMapId":
            suggest = "class_map_id"
        elif key == "classMapVersion":
            suggest = "class_map_version"
        elif key == "destinationDataIpv6PrefixListId":
            suggest = "destination_data_ipv6_prefix_list_id"
        elif key == "destinationDataIpv6PrefixListVersion":
            suggest = "destination_data_ipv6_prefix_list_version"
        elif key == "destinationIp":
            suggest = "destination_ip"
        elif key == "destinationPorts":
            suggest = "destination_ports"
        elif key == "nextHeader":
            suggest = "next_header"
        elif key == "packetLength":
            suggest = "packet_length"
        elif key == "sourceDataIpv6PrefixListId":
            suggest = "source_data_ipv6_prefix_list_id"
        elif key == "sourceDataIpv6PrefixListVersion":
            suggest = "source_data_ipv6_prefix_list_version"
        elif key == "sourceIp":
            suggest = "source_ip"
        elif key == "sourcePorts":
            suggest = "source_ports"
        elif key == "trafficClass":
            suggest = "traffic_class"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in Ipv6AclPolicyDefinitionSequenceMatchEntry. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        Ipv6AclPolicyDefinitionSequenceMatchEntry.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        Ipv6AclPolicyDefinitionSequenceMatchEntry.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 type: _builtins.str,
                 class_map_id: Optional[_builtins.str] = None,
                 class_map_version: Optional[_builtins.int] = None,
                 destination_data_ipv6_prefix_list_id: Optional[_builtins.str] = None,
                 destination_data_ipv6_prefix_list_version: Optional[_builtins.int] = None,
                 destination_ip: Optional[_builtins.str] = None,
                 destination_ports: Optional[_builtins.str] = None,
                 next_header: Optional[_builtins.int] = None,
                 packet_length: Optional[_builtins.int] = None,
                 priority: Optional[_builtins.str] = None,
                 source_data_ipv6_prefix_list_id: Optional[_builtins.str] = None,
                 source_data_ipv6_prefix_list_version: Optional[_builtins.int] = None,
                 source_ip: Optional[_builtins.str] = None,
                 source_ports: Optional[_builtins.str] = None,
                 tcp: Optional[_builtins.str] = None,
                 traffic_class: Optional[_builtins.int] = None):
        """
        :param _builtins.str type: Type of match entry
                 - Choices: `nextHeader`, `sourceIpv6`, `destinationIpv6`, `class`, `packetLength`, `plp`, `sourcePort`, `destinationPort`, `sourceDataIpv6PrefixList`, `destinationDataIpv6PrefixList`, `tcp`, `trafficClass`
        :param _builtins.str class_map_id: Class map ID, Attribute conditional on `type` being equal to `class`
        :param _builtins.int class_map_version: Class map version
        :param _builtins.str destination_data_ipv6_prefix_list_id: Destination dataIPv6 prefix list ID, Attribute conditional on `type` being equal to `destinationDataIpv6PrefixList`
        :param _builtins.int destination_data_ipv6_prefix_list_version: Destination data prefix list version
        :param _builtins.str destination_ip: Destination IPv6 prefix, Attribute conditional on `type` being equal to `destinationIpv6`
        :param _builtins.str destination_ports: Destination ports. Single value (0-65535) or ranges separated by spaces., Attribute conditional on `type` being equal to `destinationPort`
        :param _builtins.int next_header: Next header, Attribute conditional on `type` being equal to `nextHeader`
                 - Range: `0`-`255`
        :param _builtins.int packet_length: Packet length, Attribute conditional on `type` being equal to `packetLength`
                 - Range: `0`-`65535`
        :param _builtins.str priority: PLP - priority, Attribute conditional on `type` being equal to `plp`
                 - Choices: `high`, `low`
        :param _builtins.str source_data_ipv6_prefix_list_id: Source data IPv6 prefix list ID, Attribute conditional on `type` being equal to `sourceDataIpv6PrefixList`
        :param _builtins.int source_data_ipv6_prefix_list_version: Source data IPv6 prefix list version
        :param _builtins.str source_ip: Source IPv6 prefix, Attribute conditional on `type` being equal to `sourceIpv6`
        :param _builtins.str source_ports: Source ports. Single value (0-65535) or ranges separated by spaces., Attribute conditional on `type` being equal to `sourcePort`
        :param _builtins.str tcp: TCP parameters, Attribute conditional on `type` being equal to `tcp`
                 - Choices: `syn`
        :param _builtins.int traffic_class: Traffic class, Attribute conditional on `type` being equal to `trafficClass`
                 - Range: `0`-`63`
        """
        pulumi.set(__self__, "type", type)
        if class_map_id is not None:
            pulumi.set(__self__, "class_map_id", class_map_id)
        if class_map_version is not None:
            pulumi.set(__self__, "class_map_version", class_map_version)
        if destination_data_ipv6_prefix_list_id is not None:
            pulumi.set(__self__, "destination_data_ipv6_prefix_list_id", destination_data_ipv6_prefix_list_id)
        if destination_data_ipv6_prefix_list_version is not None:
            pulumi.set(__self__, "destination_data_ipv6_prefix_list_version", destination_data_ipv6_prefix_list_version)
        if destination_ip is not None:
            pulumi.set(__self__, "destination_ip", destination_ip)
        if destination_ports is not None:
            pulumi.set(__self__, "destination_ports", destination_ports)
        if next_header is not None:
            pulumi.set(__self__, "next_header", next_header)
        if packet_length is not None:
            pulumi.set(__self__, "packet_length", packet_length)
        if priority is not None:
            pulumi.set(__self__, "priority", priority)
        if source_data_ipv6_prefix_list_id is not None:
            pulumi.set(__self__, "source_data_ipv6_prefix_list_id", source_data_ipv6_prefix_list_id)
        if source_data_ipv6_prefix_list_version is not None:
            pulumi.set(__self__, "source_data_ipv6_prefix_list_version", source_data_ipv6_prefix_list_version)
        if source_ip is not None:
            pulumi.set(__self__, "source_ip", source_ip)
        if source_ports is not None:
            pulumi.set(__self__, "source_ports", source_ports)
        if tcp is not None:
            pulumi.set(__self__, "tcp", tcp)
        if traffic_class is not None:
            pulumi.set(__self__, "traffic_class", traffic_class)

    @_builtins.property
    @pulumi.getter
    def type(self) -> _builtins.str:
        """
        Type of match entry
          - Choices: `nextHeader`, `sourceIpv6`, `destinationIpv6`, `class`, `packetLength`, `plp`, `sourcePort`, `destinationPort`, `sourceDataIpv6PrefixList`, `destinationDataIpv6PrefixList`, `tcp`, `trafficClass`
        """
        return pulumi.get(self, "type")

    @_builtins.property
    @pulumi.getter(name="classMapId")
    def class_map_id(self) -> Optional[_builtins.str]:
        """
        Class map ID, Attribute conditional on `type` being equal to `class`
        """
        return pulumi.get(self, "class_map_id")

    @_builtins.property
    @pulumi.getter(name="classMapVersion")
    def class_map_version(self) -> Optional[_builtins.int]:
        """
        Class map version
        """
        return pulumi.get(self, "class_map_version")

    @_builtins.property
    @pulumi.getter(name="destinationDataIpv6PrefixListId")
    def destination_data_ipv6_prefix_list_id(self) -> Optional[_builtins.str]:
        """
        Destination dataIPv6 prefix list ID, Attribute conditional on `type` being equal to `destinationDataIpv6PrefixList`
        """
        return pulumi.get(self, "destination_data_ipv6_prefix_list_id")

    @_builtins.property
    @pulumi.getter(name="destinationDataIpv6PrefixListVersion")
    def destination_data_ipv6_prefix_list_version(self) -> Optional[_builtins.int]:
        """
        Destination data prefix list version
        """
        return pulumi.get(self, "destination_data_ipv6_prefix_list_version")

    @_builtins.property
    @pulumi.getter(name="destinationIp")
    def destination_ip(self) -> Optional[_builtins.str]:
        """
        Destination IPv6 prefix, Attribute conditional on `type` being equal to `destinationIpv6`
        """
        return pulumi.get(self, "destination_ip")

    @_builtins.property
    @pulumi.getter(name="destinationPorts")
    def destination_ports(self) -> Optional[_builtins.str]:
        """
        Destination ports. Single value (0-65535) or ranges separated by spaces., Attribute conditional on `type` being equal to `destinationPort`
        """
        return pulumi.get(self, "destination_ports")

    @_builtins.property
    @pulumi.getter(name="nextHeader")
    def next_header(self) -> Optional[_builtins.int]:
        """
        Next header, Attribute conditional on `type` being equal to `nextHeader`
          - Range: `0`-`255`
        """
        return pulumi.get(self, "next_header")

    @_builtins.property
    @pulumi.getter(name="packetLength")
    def packet_length(self) -> Optional[_builtins.int]:
        """
        Packet length, Attribute conditional on `type` being equal to `packetLength`
          - Range: `0`-`65535`
        """
        return pulumi.get(self, "packet_length")

    @_builtins.property
    @pulumi.getter
    def priority(self) -> Optional[_builtins.str]:
        """
        PLP - priority, Attribute conditional on `type` being equal to `plp`
          - Choices: `high`, `low`
        """
        return pulumi.get(self, "priority")

    @_builtins.property
    @pulumi.getter(name="sourceDataIpv6PrefixListId")
    def source_data_ipv6_prefix_list_id(self) -> Optional[_builtins.str]:
        """
        Source data IPv6 prefix list ID, Attribute conditional on `type` being equal to `sourceDataIpv6PrefixList`
        """
        return pulumi.get(self, "source_data_ipv6_prefix_list_id")

    @_builtins.property
    @pulumi.getter(name="sourceDataIpv6PrefixListVersion")
    def source_data_ipv6_prefix_list_version(self) -> Optional[_builtins.int]:
        """
        Source data IPv6 prefix list version
        """
        return pulumi.get(self, "source_data_ipv6_prefix_list_version")

    @_builtins.property
    @pulumi.getter(name="sourceIp")
    def source_ip(self) -> Optional[_builtins.str]:
        """
        Source IPv6 prefix, Attribute conditional on `type` being equal to `sourceIpv6`
        """
        return pulumi.get(self, "source_ip")

    @_builtins.property
    @pulumi.getter(name="sourcePorts")
    def source_ports(self) -> Optional[_builtins.str]:
        """
        Source ports. Single value (0-65535) or ranges separated by spaces., Attribute conditional on `type` being equal to `sourcePort`
        """
        return pulumi.get(self, "source_ports")

    @_builtins.property
    @pulumi.getter
    def tcp(self) -> Optional[_builtins.str]:
        """
        TCP parameters, Attribute conditional on `type` being equal to `tcp`
          - Choices: `syn`
        """
        return pulumi.get(self, "tcp")

    @_builtins.property
    @pulumi.getter(name="trafficClass")
    def traffic_class(self) -> Optional[_builtins.int]:
        """
        Traffic class, Attribute conditional on `type` being equal to `trafficClass`
          - Range: `0`-`63`
        """
        return pulumi.get(self, "traffic_class")


@pulumi.output_type
class Ipv6DeviceAclPolicyDefinitionSequence(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "actionEntries":
            suggest = "action_entries"
        elif key == "baseAction":
            suggest = "base_action"
        elif key == "matchEntries":
            suggest = "match_entries"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in Ipv6DeviceAclPolicyDefinitionSequence. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        Ipv6DeviceAclPolicyDefinitionSequence.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        Ipv6DeviceAclPolicyDefinitionSequence.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 id: _builtins.int,
                 name: _builtins.str,
                 action_entries: Optional[Sequence['outputs.Ipv6DeviceAclPolicyDefinitionSequenceActionEntry']] = None,
                 base_action: Optional[_builtins.str] = None,
                 match_entries: Optional[Sequence['outputs.Ipv6DeviceAclPolicyDefinitionSequenceMatchEntry']] = None):
        """
        :param _builtins.int id: Sequence ID
                 - Range: `1`-`65534`
        :param _builtins.str name: Sequence name
        :param Sequence['Ipv6DeviceAclPolicyDefinitionSequenceActionEntryArgs'] action_entries: List of action entries
        :param _builtins.str base_action: Base action, either `accept` or `drop`
                 - Choices: `accept`, `drop`
        :param Sequence['Ipv6DeviceAclPolicyDefinitionSequenceMatchEntryArgs'] match_entries: List of match entries
        """
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "name", name)
        if action_entries is not None:
            pulumi.set(__self__, "action_entries", action_entries)
        if base_action is not None:
            pulumi.set(__self__, "base_action", base_action)
        if match_entries is not None:
            pulumi.set(__self__, "match_entries", match_entries)

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.int:
        """
        Sequence ID
          - Range: `1`-`65534`
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        """
        Sequence name
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter(name="actionEntries")
    def action_entries(self) -> Optional[Sequence['outputs.Ipv6DeviceAclPolicyDefinitionSequenceActionEntry']]:
        """
        List of action entries
        """
        return pulumi.get(self, "action_entries")

    @_builtins.property
    @pulumi.getter(name="baseAction")
    def base_action(self) -> Optional[_builtins.str]:
        """
        Base action, either `accept` or `drop`
          - Choices: `accept`, `drop`
        """
        return pulumi.get(self, "base_action")

    @_builtins.property
    @pulumi.getter(name="matchEntries")
    def match_entries(self) -> Optional[Sequence['outputs.Ipv6DeviceAclPolicyDefinitionSequenceMatchEntry']]:
        """
        List of match entries
        """
        return pulumi.get(self, "match_entries")


@pulumi.output_type
class Ipv6DeviceAclPolicyDefinitionSequenceActionEntry(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "counterName":
            suggest = "counter_name"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in Ipv6DeviceAclPolicyDefinitionSequenceActionEntry. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        Ipv6DeviceAclPolicyDefinitionSequenceActionEntry.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        Ipv6DeviceAclPolicyDefinitionSequenceActionEntry.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 type: _builtins.str,
                 counter_name: Optional[_builtins.str] = None):
        """
        :param _builtins.str type: Type of action entry
                 - Choices: `count`
        :param _builtins.str counter_name: Counter name, Attribute conditional on `type` being equal to `count`
        """
        pulumi.set(__self__, "type", type)
        if counter_name is not None:
            pulumi.set(__self__, "counter_name", counter_name)

    @_builtins.property
    @pulumi.getter
    def type(self) -> _builtins.str:
        """
        Type of action entry
          - Choices: `count`
        """
        return pulumi.get(self, "type")

    @_builtins.property
    @pulumi.getter(name="counterName")
    def counter_name(self) -> Optional[_builtins.str]:
        """
        Counter name, Attribute conditional on `type` being equal to `count`
        """
        return pulumi.get(self, "counter_name")


@pulumi.output_type
class Ipv6DeviceAclPolicyDefinitionSequenceMatchEntry(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "destinationDataIpv6PrefixListId":
            suggest = "destination_data_ipv6_prefix_list_id"
        elif key == "destinationDataIpv6PrefixListVersion":
            suggest = "destination_data_ipv6_prefix_list_version"
        elif key == "destinationIp":
            suggest = "destination_ip"
        elif key == "destinationPort":
            suggest = "destination_port"
        elif key == "sourceDataIpv6PrefixListId":
            suggest = "source_data_ipv6_prefix_list_id"
        elif key == "sourceDataIpv6PrefixListVersion":
            suggest = "source_data_ipv6_prefix_list_version"
        elif key == "sourceIp":
            suggest = "source_ip"
        elif key == "sourcePorts":
            suggest = "source_ports"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in Ipv6DeviceAclPolicyDefinitionSequenceMatchEntry. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        Ipv6DeviceAclPolicyDefinitionSequenceMatchEntry.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        Ipv6DeviceAclPolicyDefinitionSequenceMatchEntry.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 type: _builtins.str,
                 destination_data_ipv6_prefix_list_id: Optional[_builtins.str] = None,
                 destination_data_ipv6_prefix_list_version: Optional[_builtins.int] = None,
                 destination_ip: Optional[_builtins.str] = None,
                 destination_port: Optional[_builtins.int] = None,
                 source_data_ipv6_prefix_list_id: Optional[_builtins.str] = None,
                 source_data_ipv6_prefix_list_version: Optional[_builtins.int] = None,
                 source_ip: Optional[_builtins.str] = None,
                 source_ports: Optional[_builtins.str] = None):
        """
        :param _builtins.str type: Type of match entry
                 - Choices: `sourceIpv6`, `destinationIpv6`, `sourcePort`, `destinationPort`, `sourceDataIpv6PrefixList`, `destinationDataIpv6PrefixList`
        :param _builtins.str destination_data_ipv6_prefix_list_id: Destination data IPv6 prefix list ID, Attribute conditional on `type` being equal to `destinationDataIpv6PrefixList`
        :param _builtins.int destination_data_ipv6_prefix_list_version: Destination data IPv6 prefix list version
        :param _builtins.str destination_ip: Destination IP prefix, Attribute conditional on `type` being equal to `destinationIpv6`
        :param _builtins.int destination_port: Destination port, only `22` and `161` supported, Attribute conditional on `type` being equal to `destinationPort`
                 - Range: `0`-`65535`
        :param _builtins.str source_data_ipv6_prefix_list_id: Source data IPv6 prefix list ID, Attribute conditional on `type` being equal to `sourceDataIpv6PrefixList`
        :param _builtins.int source_data_ipv6_prefix_list_version: Source data IPv6 prefix list version
        :param _builtins.str source_ip: Source IP prefix, Attribute conditional on `type` being equal to `sourceIpv6`
        :param _builtins.str source_ports: Source ports. Single value (0-65535) or ranges separated by spaces., Attribute conditional on `type` being equal to `sourcePort`
        """
        pulumi.set(__self__, "type", type)
        if destination_data_ipv6_prefix_list_id is not None:
            pulumi.set(__self__, "destination_data_ipv6_prefix_list_id", destination_data_ipv6_prefix_list_id)
        if destination_data_ipv6_prefix_list_version is not None:
            pulumi.set(__self__, "destination_data_ipv6_prefix_list_version", destination_data_ipv6_prefix_list_version)
        if destination_ip is not None:
            pulumi.set(__self__, "destination_ip", destination_ip)
        if destination_port is not None:
            pulumi.set(__self__, "destination_port", destination_port)
        if source_data_ipv6_prefix_list_id is not None:
            pulumi.set(__self__, "source_data_ipv6_prefix_list_id", source_data_ipv6_prefix_list_id)
        if source_data_ipv6_prefix_list_version is not None:
            pulumi.set(__self__, "source_data_ipv6_prefix_list_version", source_data_ipv6_prefix_list_version)
        if source_ip is not None:
            pulumi.set(__self__, "source_ip", source_ip)
        if source_ports is not None:
            pulumi.set(__self__, "source_ports", source_ports)

    @_builtins.property
    @pulumi.getter
    def type(self) -> _builtins.str:
        """
        Type of match entry
          - Choices: `sourceIpv6`, `destinationIpv6`, `sourcePort`, `destinationPort`, `sourceDataIpv6PrefixList`, `destinationDataIpv6PrefixList`
        """
        return pulumi.get(self, "type")

    @_builtins.property
    @pulumi.getter(name="destinationDataIpv6PrefixListId")
    def destination_data_ipv6_prefix_list_id(self) -> Optional[_builtins.str]:
        """
        Destination data IPv6 prefix list ID, Attribute conditional on `type` being equal to `destinationDataIpv6PrefixList`
        """
        return pulumi.get(self, "destination_data_ipv6_prefix_list_id")

    @_builtins.property
    @pulumi.getter(name="destinationDataIpv6PrefixListVersion")
    def destination_data_ipv6_prefix_list_version(self) -> Optional[_builtins.int]:
        """
        Destination data IPv6 prefix list version
        """
        return pulumi.get(self, "destination_data_ipv6_prefix_list_version")

    @_builtins.property
    @pulumi.getter(name="destinationIp")
    def destination_ip(self) -> Optional[_builtins.str]:
        """
        Destination IP prefix, Attribute conditional on `type` being equal to `destinationIpv6`
        """
        return pulumi.get(self, "destination_ip")

    @_builtins.property
    @pulumi.getter(name="destinationPort")
    def destination_port(self) -> Optional[_builtins.int]:
        """
        Destination port, only `22` and `161` supported, Attribute conditional on `type` being equal to `destinationPort`
          - Range: `0`-`65535`
        """
        return pulumi.get(self, "destination_port")

    @_builtins.property
    @pulumi.getter(name="sourceDataIpv6PrefixListId")
    def source_data_ipv6_prefix_list_id(self) -> Optional[_builtins.str]:
        """
        Source data IPv6 prefix list ID, Attribute conditional on `type` being equal to `sourceDataIpv6PrefixList`
        """
        return pulumi.get(self, "source_data_ipv6_prefix_list_id")

    @_builtins.property
    @pulumi.getter(name="sourceDataIpv6PrefixListVersion")
    def source_data_ipv6_prefix_list_version(self) -> Optional[_builtins.int]:
        """
        Source data IPv6 prefix list version
        """
        return pulumi.get(self, "source_data_ipv6_prefix_list_version")

    @_builtins.property
    @pulumi.getter(name="sourceIp")
    def source_ip(self) -> Optional[_builtins.str]:
        """
        Source IP prefix, Attribute conditional on `type` being equal to `sourceIpv6`
        """
        return pulumi.get(self, "source_ip")

    @_builtins.property
    @pulumi.getter(name="sourcePorts")
    def source_ports(self) -> Optional[_builtins.str]:
        """
        Source ports. Single value (0-65535) or ranges separated by spaces., Attribute conditional on `type` being equal to `sourcePort`
        """
        return pulumi.get(self, "source_ports")


@pulumi.output_type
class Ipv6PrefixListPolicyObjectEntry(dict):
    def __init__(__self__, *,
                 prefix: _builtins.str,
                 ge: Optional[_builtins.int] = None,
                 le: Optional[_builtins.int] = None):
        """
        :param _builtins.str prefix: IP prefix list entry, e.g. `2001:1:1:2::/64`
        :param _builtins.int ge: Greater equal
        :param _builtins.int le: Lesser equal
        """
        pulumi.set(__self__, "prefix", prefix)
        if ge is not None:
            pulumi.set(__self__, "ge", ge)
        if le is not None:
            pulumi.set(__self__, "le", le)

    @_builtins.property
    @pulumi.getter
    def prefix(self) -> _builtins.str:
        """
        IP prefix list entry, e.g. `2001:1:1:2::/64`
        """
        return pulumi.get(self, "prefix")

    @_builtins.property
    @pulumi.getter
    def ge(self) -> Optional[_builtins.int]:
        """
        Greater equal
        """
        return pulumi.get(self, "ge")

    @_builtins.property
    @pulumi.getter
    def le(self) -> Optional[_builtins.int]:
        """
        Lesser equal
        """
        return pulumi.get(self, "le")


@pulumi.output_type
class LocalApplicationListPolicyObjectEntry(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "applicationFamily":
            suggest = "application_family"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in LocalApplicationListPolicyObjectEntry. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        LocalApplicationListPolicyObjectEntry.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        LocalApplicationListPolicyObjectEntry.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 application: Optional[_builtins.str] = None,
                 application_family: Optional[_builtins.str] = None):
        """
        :param _builtins.str application: Application name
        :param _builtins.str application_family: Application family name
        """
        if application is not None:
            pulumi.set(__self__, "application", application)
        if application_family is not None:
            pulumi.set(__self__, "application_family", application_family)

    @_builtins.property
    @pulumi.getter
    def application(self) -> Optional[_builtins.str]:
        """
        Application name
        """
        return pulumi.get(self, "application")

    @_builtins.property
    @pulumi.getter(name="applicationFamily")
    def application_family(self) -> Optional[_builtins.str]:
        """
        Application family name
        """
        return pulumi.get(self, "application_family")


@pulumi.output_type
class LocalizedPolicyDefinition(dict):
    def __init__(__self__, *,
                 id: _builtins.str,
                 type: _builtins.str,
                 version: Optional[_builtins.int] = None):
        """
        :param _builtins.str id: Policy definition ID
        :param _builtins.str type: Policy definition type
                 - Choices: `qosMap`, `rewriteRule`, `vedgeRoute`, `acl`, `aclv6`, `deviceAccessPolicy`, `deviceAccessPolicyv6`
        :param _builtins.int version: Policy definition version
        """
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "type", type)
        if version is not None:
            pulumi.set(__self__, "version", version)

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        Policy definition ID
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter
    def type(self) -> _builtins.str:
        """
        Policy definition type
          - Choices: `qosMap`, `rewriteRule`, `vedgeRoute`, `acl`, `aclv6`, `deviceAccessPolicy`, `deviceAccessPolicyv6`
        """
        return pulumi.get(self, "type")

    @_builtins.property
    @pulumi.getter
    def version(self) -> Optional[_builtins.int]:
        """
        Policy definition version
        """
        return pulumi.get(self, "version")


@pulumi.output_type
class MeshTopologyPolicyDefinitionRegion(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "siteListIds":
            suggest = "site_list_ids"
        elif key == "siteListVersions":
            suggest = "site_list_versions"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in MeshTopologyPolicyDefinitionRegion. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        MeshTopologyPolicyDefinitionRegion.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        MeshTopologyPolicyDefinitionRegion.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 name: _builtins.str,
                 site_list_ids: Optional[Sequence[_builtins.str]] = None,
                 site_list_versions: Optional[Sequence[_builtins.str]] = None):
        """
        :param _builtins.str name: Region name
        :param Sequence[_builtins.str] site_list_ids: Site list IDs
        :param Sequence[_builtins.str] site_list_versions: Site list versions
        """
        pulumi.set(__self__, "name", name)
        if site_list_ids is not None:
            pulumi.set(__self__, "site_list_ids", site_list_ids)
        if site_list_versions is not None:
            pulumi.set(__self__, "site_list_versions", site_list_versions)

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        """
        Region name
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter(name="siteListIds")
    def site_list_ids(self) -> Optional[Sequence[_builtins.str]]:
        """
        Site list IDs
        """
        return pulumi.get(self, "site_list_ids")

    @_builtins.property
    @pulumi.getter(name="siteListVersions")
    def site_list_versions(self) -> Optional[Sequence[_builtins.str]]:
        """
        Site list versions
        """
        return pulumi.get(self, "site_list_versions")


@pulumi.output_type
class OtherThousandeyesFeatureVirtualApplication(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "accountGroupToken":
            suggest = "account_group_token"
        elif key == "accountGroupTokenVariable":
            suggest = "account_group_token_variable"
        elif key == "agentDefaultGateway":
            suggest = "agent_default_gateway"
        elif key == "agentDefaultGatewayVariable":
            suggest = "agent_default_gateway_variable"
        elif key == "hostnameVariable":
            suggest = "hostname_variable"
        elif key == "managementIp":
            suggest = "management_ip"
        elif key == "managementIpVariable":
            suggest = "management_ip_variable"
        elif key == "managementSubnetMask":
            suggest = "management_subnet_mask"
        elif key == "managementSubnetMaskVariable":
            suggest = "management_subnet_mask_variable"
        elif key == "nameServerIp":
            suggest = "name_server_ip"
        elif key == "nameServerIpVariable":
            suggest = "name_server_ip_variable"
        elif key == "pacUrl":
            suggest = "pac_url"
        elif key == "pacUrlVariable":
            suggest = "pac_url_variable"
        elif key == "proxyHost":
            suggest = "proxy_host"
        elif key == "proxyHostVariable":
            suggest = "proxy_host_variable"
        elif key == "proxyPort":
            suggest = "proxy_port"
        elif key == "proxyPortVariable":
            suggest = "proxy_port_variable"
        elif key == "proxyType":
            suggest = "proxy_type"
        elif key == "vpnVariable":
            suggest = "vpn_variable"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in OtherThousandeyesFeatureVirtualApplication. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        OtherThousandeyesFeatureVirtualApplication.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        OtherThousandeyesFeatureVirtualApplication.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 account_group_token: Optional[_builtins.str] = None,
                 account_group_token_variable: Optional[_builtins.str] = None,
                 agent_default_gateway: Optional[_builtins.str] = None,
                 agent_default_gateway_variable: Optional[_builtins.str] = None,
                 hostname: Optional[_builtins.str] = None,
                 hostname_variable: Optional[_builtins.str] = None,
                 management_ip: Optional[_builtins.str] = None,
                 management_ip_variable: Optional[_builtins.str] = None,
                 management_subnet_mask: Optional[_builtins.str] = None,
                 management_subnet_mask_variable: Optional[_builtins.str] = None,
                 name_server_ip: Optional[_builtins.str] = None,
                 name_server_ip_variable: Optional[_builtins.str] = None,
                 pac_url: Optional[_builtins.str] = None,
                 pac_url_variable: Optional[_builtins.str] = None,
                 proxy_host: Optional[_builtins.str] = None,
                 proxy_host_variable: Optional[_builtins.str] = None,
                 proxy_port: Optional[_builtins.int] = None,
                 proxy_port_variable: Optional[_builtins.str] = None,
                 proxy_type: Optional[_builtins.str] = None,
                 vpn: Optional[_builtins.int] = None,
                 vpn_variable: Optional[_builtins.str] = None):
        """
        :param _builtins.str account_group_token: Set the Account Group Token
        :param _builtins.str account_group_token_variable: Variable name
        :param _builtins.str agent_default_gateway: Set the Agent default gateway
        :param _builtins.str agent_default_gateway_variable: Variable name
        :param _builtins.str hostname: Set the host name
        :param _builtins.str hostname_variable: Variable name
        :param _builtins.str management_ip: Set the Agent IP Address
        :param _builtins.str management_ip_variable: Variable name
        :param _builtins.str management_subnet_mask: Set the Agent SubnetMask
                 - Choices: `255.255.255.255`, `255.255.255.254`, `255.255.255.252`, `255.255.255.248`, `255.255.255.240`, `255.255.255.224`, `255.255.255.192`, `255.255.255.128`, `255.255.255.0`, `255.255.254.0`, `255.255.252.0`, `255.255.248.0`, `255.255.240.0`, `255.255.224.0`, `255.255.192.0`, `255.255.128.0`, `255.255.0.0`, `255.254.0.0`, `255.252.0.0`, `255.240.0.0`, `255.224.0.0`, `255.192.0.0`, `255.128.0.0`, `255.0.0.0`, `254.0.0.0`, `252.0.0.0`, `248.0.0.0`, `240.0.0.0`, `224.0.0.0`, `192.0.0.0`, `128.0.0.0`, `0.0.0.0`
        :param _builtins.str management_subnet_mask_variable: Variable name
        :param _builtins.str name_server_ip: Set the name server
        :param _builtins.str name_server_ip_variable: Variable name
        :param _builtins.str pac_url: Set the proxy PAC url
        :param _builtins.str pac_url_variable: Variable name
        :param _builtins.str proxy_host: Set the Proxy Host
        :param _builtins.str proxy_host_variable: Variable name
        :param _builtins.int proxy_port: Set the Proxy Port
                 - Range: `1`-`65535`
        :param _builtins.str proxy_port_variable: Variable name
        :param _builtins.str proxy_type: Select Web Proxy Type
        :param _builtins.int vpn: VPN number
                 - Range: `0`-`65530`
        :param _builtins.str vpn_variable: Variable name
        """
        if account_group_token is not None:
            pulumi.set(__self__, "account_group_token", account_group_token)
        if account_group_token_variable is not None:
            pulumi.set(__self__, "account_group_token_variable", account_group_token_variable)
        if agent_default_gateway is not None:
            pulumi.set(__self__, "agent_default_gateway", agent_default_gateway)
        if agent_default_gateway_variable is not None:
            pulumi.set(__self__, "agent_default_gateway_variable", agent_default_gateway_variable)
        if hostname is not None:
            pulumi.set(__self__, "hostname", hostname)
        if hostname_variable is not None:
            pulumi.set(__self__, "hostname_variable", hostname_variable)
        if management_ip is not None:
            pulumi.set(__self__, "management_ip", management_ip)
        if management_ip_variable is not None:
            pulumi.set(__self__, "management_ip_variable", management_ip_variable)
        if management_subnet_mask is not None:
            pulumi.set(__self__, "management_subnet_mask", management_subnet_mask)
        if management_subnet_mask_variable is not None:
            pulumi.set(__self__, "management_subnet_mask_variable", management_subnet_mask_variable)
        if name_server_ip is not None:
            pulumi.set(__self__, "name_server_ip", name_server_ip)
        if name_server_ip_variable is not None:
            pulumi.set(__self__, "name_server_ip_variable", name_server_ip_variable)
        if pac_url is not None:
            pulumi.set(__self__, "pac_url", pac_url)
        if pac_url_variable is not None:
            pulumi.set(__self__, "pac_url_variable", pac_url_variable)
        if proxy_host is not None:
            pulumi.set(__self__, "proxy_host", proxy_host)
        if proxy_host_variable is not None:
            pulumi.set(__self__, "proxy_host_variable", proxy_host_variable)
        if proxy_port is not None:
            pulumi.set(__self__, "proxy_port", proxy_port)
        if proxy_port_variable is not None:
            pulumi.set(__self__, "proxy_port_variable", proxy_port_variable)
        if proxy_type is not None:
            pulumi.set(__self__, "proxy_type", proxy_type)
        if vpn is not None:
            pulumi.set(__self__, "vpn", vpn)
        if vpn_variable is not None:
            pulumi.set(__self__, "vpn_variable", vpn_variable)

    @_builtins.property
    @pulumi.getter(name="accountGroupToken")
    def account_group_token(self) -> Optional[_builtins.str]:
        """
        Set the Account Group Token
        """
        return pulumi.get(self, "account_group_token")

    @_builtins.property
    @pulumi.getter(name="accountGroupTokenVariable")
    def account_group_token_variable(self) -> Optional[_builtins.str]:
        """
        Variable name
        """
        return pulumi.get(self, "account_group_token_variable")

    @_builtins.property
    @pulumi.getter(name="agentDefaultGateway")
    def agent_default_gateway(self) -> Optional[_builtins.str]:
        """
        Set the Agent default gateway
        """
        return pulumi.get(self, "agent_default_gateway")

    @_builtins.property
    @pulumi.getter(name="agentDefaultGatewayVariable")
    def agent_default_gateway_variable(self) -> Optional[_builtins.str]:
        """
        Variable name
        """
        return pulumi.get(self, "agent_default_gateway_variable")

    @_builtins.property
    @pulumi.getter
    def hostname(self) -> Optional[_builtins.str]:
        """
        Set the host name
        """
        return pulumi.get(self, "hostname")

    @_builtins.property
    @pulumi.getter(name="hostnameVariable")
    def hostname_variable(self) -> Optional[_builtins.str]:
        """
        Variable name
        """
        return pulumi.get(self, "hostname_variable")

    @_builtins.property
    @pulumi.getter(name="managementIp")
    def management_ip(self) -> Optional[_builtins.str]:
        """
        Set the Agent IP Address
        """
        return pulumi.get(self, "management_ip")

    @_builtins.property
    @pulumi.getter(name="managementIpVariable")
    def management_ip_variable(self) -> Optional[_builtins.str]:
        """
        Variable name
        """
        return pulumi.get(self, "management_ip_variable")

    @_builtins.property
    @pulumi.getter(name="managementSubnetMask")
    def management_subnet_mask(self) -> Optional[_builtins.str]:
        """
        Set the Agent SubnetMask
          - Choices: `255.255.255.255`, `255.255.255.254`, `255.255.255.252`, `255.255.255.248`, `255.255.255.240`, `255.255.255.224`, `255.255.255.192`, `255.255.255.128`, `255.255.255.0`, `255.255.254.0`, `255.255.252.0`, `255.255.248.0`, `255.255.240.0`, `255.255.224.0`, `255.255.192.0`, `255.255.128.0`, `255.255.0.0`, `255.254.0.0`, `255.252.0.0`, `255.240.0.0`, `255.224.0.0`, `255.192.0.0`, `255.128.0.0`, `255.0.0.0`, `254.0.0.0`, `252.0.0.0`, `248.0.0.0`, `240.0.0.0`, `224.0.0.0`, `192.0.0.0`, `128.0.0.0`, `0.0.0.0`
        """
        return pulumi.get(self, "management_subnet_mask")

    @_builtins.property
    @pulumi.getter(name="managementSubnetMaskVariable")
    def management_subnet_mask_variable(self) -> Optional[_builtins.str]:
        """
        Variable name
        """
        return pulumi.get(self, "management_subnet_mask_variable")

    @_builtins.property
    @pulumi.getter(name="nameServerIp")
    def name_server_ip(self) -> Optional[_builtins.str]:
        """
        Set the name server
        """
        return pulumi.get(self, "name_server_ip")

    @_builtins.property
    @pulumi.getter(name="nameServerIpVariable")
    def name_server_ip_variable(self) -> Optional[_builtins.str]:
        """
        Variable name
        """
        return pulumi.get(self, "name_server_ip_variable")

    @_builtins.property
    @pulumi.getter(name="pacUrl")
    def pac_url(self) -> Optional[_builtins.str]:
        """
        Set the proxy PAC url
        """
        return pulumi.get(self, "pac_url")

    @_builtins.property
    @pulumi.getter(name="pacUrlVariable")
    def pac_url_variable(self) -> Optional[_builtins.str]:
        """
        Variable name
        """
        return pulumi.get(self, "pac_url_variable")

    @_builtins.property
    @pulumi.getter(name="proxyHost")
    def proxy_host(self) -> Optional[_builtins.str]:
        """
        Set the Proxy Host
        """
        return pulumi.get(self, "proxy_host")

    @_builtins.property
    @pulumi.getter(name="proxyHostVariable")
    def proxy_host_variable(self) -> Optional[_builtins.str]:
        """
        Variable name
        """
        return pulumi.get(self, "proxy_host_variable")

    @_builtins.property
    @pulumi.getter(name="proxyPort")
    def proxy_port(self) -> Optional[_builtins.int]:
        """
        Set the Proxy Port
          - Range: `1`-`65535`
        """
        return pulumi.get(self, "proxy_port")

    @_builtins.property
    @pulumi.getter(name="proxyPortVariable")
    def proxy_port_variable(self) -> Optional[_builtins.str]:
        """
        Variable name
        """
        return pulumi.get(self, "proxy_port_variable")

    @_builtins.property
    @pulumi.getter(name="proxyType")
    def proxy_type(self) -> Optional[_builtins.str]:
        """
        Select Web Proxy Type
        """
        return pulumi.get(self, "proxy_type")

    @_builtins.property
    @pulumi.getter
    def vpn(self) -> Optional[_builtins.int]:
        """
        VPN number
          - Range: `0`-`65530`
        """
        return pulumi.get(self, "vpn")

    @_builtins.property
    @pulumi.getter(name="vpnVariable")
    def vpn_variable(self) -> Optional[_builtins.str]:
        """
        Variable name
        """
        return pulumi.get(self, "vpn_variable")


@pulumi.output_type
class OtherUcseFeatureInterface(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "interfaceName":
            suggest = "interface_name"
        elif key == "interfaceNameVariable":
            suggest = "interface_name_variable"
        elif key == "ipv4Address":
            suggest = "ipv4_address"
        elif key == "ipv4AddressVariable":
            suggest = "ipv4_address_variable"
        elif key == "ucseInterfaceVpn":
            suggest = "ucse_interface_vpn"
        elif key == "ucseInterfaceVpnVariable":
            suggest = "ucse_interface_vpn_variable"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in OtherUcseFeatureInterface. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        OtherUcseFeatureInterface.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        OtherUcseFeatureInterface.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 interface_name: Optional[_builtins.str] = None,
                 interface_name_variable: Optional[_builtins.str] = None,
                 ipv4_address: Optional[_builtins.str] = None,
                 ipv4_address_variable: Optional[_builtins.str] = None,
                 ucse_interface_vpn: Optional[_builtins.int] = None,
                 ucse_interface_vpn_variable: Optional[_builtins.str] = None):
        """
        :param _builtins.str interface_name: Set Inteface name
        :param _builtins.str interface_name_variable: Variable name
        :param _builtins.str ipv4_address: Assign IPv4 address
        :param _builtins.str ipv4_address_variable: Variable name
        :param _builtins.int ucse_interface_vpn: UCSE Interface VPN
                 - Range: `1`-`65527`
        :param _builtins.str ucse_interface_vpn_variable: Variable name
        """
        if interface_name is not None:
            pulumi.set(__self__, "interface_name", interface_name)
        if interface_name_variable is not None:
            pulumi.set(__self__, "interface_name_variable", interface_name_variable)
        if ipv4_address is not None:
            pulumi.set(__self__, "ipv4_address", ipv4_address)
        if ipv4_address_variable is not None:
            pulumi.set(__self__, "ipv4_address_variable", ipv4_address_variable)
        if ucse_interface_vpn is not None:
            pulumi.set(__self__, "ucse_interface_vpn", ucse_interface_vpn)
        if ucse_interface_vpn_variable is not None:
            pulumi.set(__self__, "ucse_interface_vpn_variable", ucse_interface_vpn_variable)

    @_builtins.property
    @pulumi.getter(name="interfaceName")
    def interface_name(self) -> Optional[_builtins.str]:
        """
        Set Inteface name
        """
        return pulumi.get(self, "interface_name")

    @_builtins.property
    @pulumi.getter(name="interfaceNameVariable")
    def interface_name_variable(self) -> Optional[_builtins.str]:
        """
        Variable name
        """
        return pulumi.get(self, "interface_name_variable")

    @_builtins.property
    @pulumi.getter(name="ipv4Address")
    def ipv4_address(self) -> Optional[_builtins.str]:
        """
        Assign IPv4 address
        """
        return pulumi.get(self, "ipv4_address")

    @_builtins.property
    @pulumi.getter(name="ipv4AddressVariable")
    def ipv4_address_variable(self) -> Optional[_builtins.str]:
        """
        Variable name
        """
        return pulumi.get(self, "ipv4_address_variable")

    @_builtins.property
    @pulumi.getter(name="ucseInterfaceVpn")
    def ucse_interface_vpn(self) -> Optional[_builtins.int]:
        """
        UCSE Interface VPN
          - Range: `1`-`65527`
        """
        return pulumi.get(self, "ucse_interface_vpn")

    @_builtins.property
    @pulumi.getter(name="ucseInterfaceVpnVariable")
    def ucse_interface_vpn_variable(self) -> Optional[_builtins.str]:
        """
        Variable name
        """
        return pulumi.get(self, "ucse_interface_vpn_variable")


@pulumi.output_type
class PolicyGroupDevice(dict):
    def __init__(__self__, *,
                 deploy: Optional[_builtins.bool] = None,
                 id: Optional[_builtins.str] = None,
                 variables: Optional[Sequence['outputs.PolicyGroupDeviceVariable']] = None):
        """
        :param _builtins.bool deploy: Deploy to device if enabled.
                 - Default value: `false`
        :param _builtins.str id: Device ID
        :param Sequence['PolicyGroupDeviceVariableArgs'] variables: List of variables
        """
        if deploy is not None:
            pulumi.set(__self__, "deploy", deploy)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if variables is not None:
            pulumi.set(__self__, "variables", variables)

    @_builtins.property
    @pulumi.getter
    def deploy(self) -> Optional[_builtins.bool]:
        """
        Deploy to device if enabled.
          - Default value: `false`
        """
        return pulumi.get(self, "deploy")

    @_builtins.property
    @pulumi.getter
    def id(self) -> Optional[_builtins.str]:
        """
        Device ID
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter
    def variables(self) -> Optional[Sequence['outputs.PolicyGroupDeviceVariable']]:
        """
        List of variables
        """
        return pulumi.get(self, "variables")


@pulumi.output_type
class PolicyGroupDeviceVariable(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "listValues":
            suggest = "list_values"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in PolicyGroupDeviceVariable. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        PolicyGroupDeviceVariable.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        PolicyGroupDeviceVariable.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 name: _builtins.str,
                 list_values: Optional[Sequence[_builtins.str]] = None,
                 value: Optional[_builtins.str] = None):
        """
        :param _builtins.str name: Variable name
        :param Sequence[_builtins.str] list_values: Use this instead of `value` in case value is of type `List`.
        :param _builtins.str value: Variable value
        """
        pulumi.set(__self__, "name", name)
        if list_values is not None:
            pulumi.set(__self__, "list_values", list_values)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter(name="listValues")
    def list_values(self) -> Optional[Sequence[_builtins.str]]:
        """
        Use this instead of `value` in case value is of type `List`.
        """
        return pulumi.get(self, "list_values")

    @_builtins.property
    @pulumi.getter
    def value(self) -> Optional[_builtins.str]:
        """
        Variable value
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class PolicyObjectAppProbeClassEntry(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "forwardingClass":
            suggest = "forwarding_class"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in PolicyObjectAppProbeClassEntry. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        PolicyObjectAppProbeClassEntry.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        PolicyObjectAppProbeClassEntry.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 forwarding_class: Optional[_builtins.str] = None,
                 maps: Optional[Sequence['outputs.PolicyObjectAppProbeClassEntryMap']] = None):
        """
        :param _builtins.str forwarding_class: Forwarding Class Name
        :param Sequence['PolicyObjectAppProbeClassEntryMapArgs'] maps: Map
        """
        if forwarding_class is not None:
            pulumi.set(__self__, "forwarding_class", forwarding_class)
        if maps is not None:
            pulumi.set(__self__, "maps", maps)

    @_builtins.property
    @pulumi.getter(name="forwardingClass")
    def forwarding_class(self) -> Optional[_builtins.str]:
        """
        Forwarding Class Name
        """
        return pulumi.get(self, "forwarding_class")

    @_builtins.property
    @pulumi.getter
    def maps(self) -> Optional[Sequence['outputs.PolicyObjectAppProbeClassEntryMap']]:
        """
        Map
        """
        return pulumi.get(self, "maps")


@pulumi.output_type
class PolicyObjectAppProbeClassEntryMap(dict):
    def __init__(__self__, *,
                 color: Optional[_builtins.str] = None,
                 dscp: Optional[_builtins.int] = None):
        """
        :param _builtins.str color: Color
                 - Choices: `3g`, `biz-internet`, `blue`, `bronze`, `custom1`, `custom2`, `custom3`, `default`, `gold`, `green`, `lte`, `metro-ethernet`, `mpls`, `private1`, `private2`, `private3`, `private4`, `private5`, `private6`, `public-internet`, `red`, `silver`
        :param _builtins.int dscp: DSCP number
                 - Range: `0`-`63`
        """
        if color is not None:
            pulumi.set(__self__, "color", color)
        if dscp is not None:
            pulumi.set(__self__, "dscp", dscp)

    @_builtins.property
    @pulumi.getter
    def color(self) -> Optional[_builtins.str]:
        """
        Color
          - Choices: `3g`, `biz-internet`, `blue`, `bronze`, `custom1`, `custom2`, `custom3`, `default`, `gold`, `green`, `lte`, `metro-ethernet`, `mpls`, `private1`, `private2`, `private3`, `private4`, `private5`, `private6`, `public-internet`, `red`, `silver`
        """
        return pulumi.get(self, "color")

    @_builtins.property
    @pulumi.getter
    def dscp(self) -> Optional[_builtins.int]:
        """
        DSCP number
          - Range: `0`-`63`
        """
        return pulumi.get(self, "dscp")


@pulumi.output_type
class PolicyObjectApplicationListEntry(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "applicationFamily":
            suggest = "application_family"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in PolicyObjectApplicationListEntry. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        PolicyObjectApplicationListEntry.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        PolicyObjectApplicationListEntry.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 application: Optional[_builtins.str] = None,
                 application_family: Optional[_builtins.str] = None):
        if application is not None:
            pulumi.set(__self__, "application", application)
        if application_family is not None:
            pulumi.set(__self__, "application_family", application_family)

    @_builtins.property
    @pulumi.getter
    def application(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "application")

    @_builtins.property
    @pulumi.getter(name="applicationFamily")
    def application_family(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "application_family")


@pulumi.output_type
class PolicyObjectAsPathListEntry(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "asPathList":
            suggest = "as_path_list"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in PolicyObjectAsPathListEntry. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        PolicyObjectAsPathListEntry.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        PolicyObjectAsPathListEntry.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 as_path_list: Optional[_builtins.str] = None):
        if as_path_list is not None:
            pulumi.set(__self__, "as_path_list", as_path_list)

    @_builtins.property
    @pulumi.getter(name="asPathList")
    def as_path_list(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "as_path_list")


@pulumi.output_type
class PolicyObjectClassMapEntry(dict):
    def __init__(__self__, *,
                 queue: Optional[_builtins.str] = None):
        """
        :param _builtins.str queue: select a queue
                 - Choices: `0`, `1`, `2`, `3`, `4`, `5`, `6`, `7`
        """
        if queue is not None:
            pulumi.set(__self__, "queue", queue)

    @_builtins.property
    @pulumi.getter
    def queue(self) -> Optional[_builtins.str]:
        """
        select a queue
          - Choices: `0`, `1`, `2`, `3`, `4`, `5`, `6`, `7`
        """
        return pulumi.get(self, "queue")


@pulumi.output_type
class PolicyObjectColorListEntry(dict):
    def __init__(__self__, *,
                 color: Optional[_builtins.str] = None):
        """
        :param _builtins.str color: - Choices: `3g`, `biz-internet`, `blue`, `bronze`, `custom1`, `custom2`, `custom3`, `default`, `gold`, `green`, `lte`, `metro-ethernet`, `mpls`, `private1`, `private2`, `private3`, `private4`, `private5`, `private6`, `public-internet`, `red`, `silver`
        """
        if color is not None:
            pulumi.set(__self__, "color", color)

    @_builtins.property
    @pulumi.getter
    def color(self) -> Optional[_builtins.str]:
        """
        - Choices: `3g`, `biz-internet`, `blue`, `bronze`, `custom1`, `custom2`, `custom3`, `default`, `gold`, `green`, `lte`, `metro-ethernet`, `mpls`, `private1`, `private2`, `private3`, `private4`, `private5`, `private6`, `public-internet`, `red`, `silver`
        """
        return pulumi.get(self, "color")


@pulumi.output_type
class PolicyObjectDataIpv4PrefixListEntry(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "ipv4Address":
            suggest = "ipv4_address"
        elif key == "ipv4PrefixLength":
            suggest = "ipv4_prefix_length"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in PolicyObjectDataIpv4PrefixListEntry. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        PolicyObjectDataIpv4PrefixListEntry.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        PolicyObjectDataIpv4PrefixListEntry.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 ipv4_address: Optional[_builtins.str] = None,
                 ipv4_prefix_length: Optional[_builtins.int] = None):
        """
        :param _builtins.str ipv4_address: IPv4 address
        :param _builtins.int ipv4_prefix_length: IPv4 prefix Length
                 - Range: `0`-`32`
        """
        if ipv4_address is not None:
            pulumi.set(__self__, "ipv4_address", ipv4_address)
        if ipv4_prefix_length is not None:
            pulumi.set(__self__, "ipv4_prefix_length", ipv4_prefix_length)

    @_builtins.property
    @pulumi.getter(name="ipv4Address")
    def ipv4_address(self) -> Optional[_builtins.str]:
        """
        IPv4 address
        """
        return pulumi.get(self, "ipv4_address")

    @_builtins.property
    @pulumi.getter(name="ipv4PrefixLength")
    def ipv4_prefix_length(self) -> Optional[_builtins.int]:
        """
        IPv4 prefix Length
          - Range: `0`-`32`
        """
        return pulumi.get(self, "ipv4_prefix_length")


@pulumi.output_type
class PolicyObjectDataIpv6PrefixListEntry(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "ipv6Address":
            suggest = "ipv6_address"
        elif key == "ipv6PrefixLength":
            suggest = "ipv6_prefix_length"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in PolicyObjectDataIpv6PrefixListEntry. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        PolicyObjectDataIpv6PrefixListEntry.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        PolicyObjectDataIpv6PrefixListEntry.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 ipv6_address: Optional[_builtins.str] = None,
                 ipv6_prefix_length: Optional[_builtins.int] = None):
        """
        :param _builtins.str ipv6_address: IPv6 address
        :param _builtins.int ipv6_prefix_length: IPv6 prefix
                 - Range: `0`-`128`
        """
        if ipv6_address is not None:
            pulumi.set(__self__, "ipv6_address", ipv6_address)
        if ipv6_prefix_length is not None:
            pulumi.set(__self__, "ipv6_prefix_length", ipv6_prefix_length)

    @_builtins.property
    @pulumi.getter(name="ipv6Address")
    def ipv6_address(self) -> Optional[_builtins.str]:
        """
        IPv6 address
        """
        return pulumi.get(self, "ipv6_address")

    @_builtins.property
    @pulumi.getter(name="ipv6PrefixLength")
    def ipv6_prefix_length(self) -> Optional[_builtins.int]:
        """
        IPv6 prefix
          - Range: `0`-`128`
        """
        return pulumi.get(self, "ipv6_prefix_length")


@pulumi.output_type
class PolicyObjectExtendedCommunityListEntry(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "extendedCommunity":
            suggest = "extended_community"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in PolicyObjectExtendedCommunityListEntry. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        PolicyObjectExtendedCommunityListEntry.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        PolicyObjectExtendedCommunityListEntry.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 extended_community: Optional[_builtins.str] = None):
        """
        :param _builtins.str extended_community: can be soo 10.0.0.1:30 or rt 500:50 etc.
        """
        if extended_community is not None:
            pulumi.set(__self__, "extended_community", extended_community)

    @_builtins.property
    @pulumi.getter(name="extendedCommunity")
    def extended_community(self) -> Optional[_builtins.str]:
        """
        can be soo 10.0.0.1:30 or rt 500:50 etc.
        """
        return pulumi.get(self, "extended_community")


@pulumi.output_type
class PolicyObjectIpv4PrefixListEntry(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "ipv4Address":
            suggest = "ipv4_address"
        elif key == "ipv4PrefixLength":
            suggest = "ipv4_prefix_length"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in PolicyObjectIpv4PrefixListEntry. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        PolicyObjectIpv4PrefixListEntry.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        PolicyObjectIpv4PrefixListEntry.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 ge: Optional[_builtins.int] = None,
                 ipv4_address: Optional[_builtins.str] = None,
                 ipv4_prefix_length: Optional[_builtins.int] = None,
                 le: Optional[_builtins.int] = None):
        """
        :param _builtins.int ge: IPv4 prefix length with ge range operator
                 - Range: `1`-`32`
        :param _builtins.str ipv4_address: IPv4 address
        :param _builtins.int ipv4_prefix_length: IPv4 prefix length
                 - Range: `0`-`32`
        :param _builtins.int le: IPv4 prefix length with le range operator
                 - Range: `1`-`32`
        """
        if ge is not None:
            pulumi.set(__self__, "ge", ge)
        if ipv4_address is not None:
            pulumi.set(__self__, "ipv4_address", ipv4_address)
        if ipv4_prefix_length is not None:
            pulumi.set(__self__, "ipv4_prefix_length", ipv4_prefix_length)
        if le is not None:
            pulumi.set(__self__, "le", le)

    @_builtins.property
    @pulumi.getter
    def ge(self) -> Optional[_builtins.int]:
        """
        IPv4 prefix length with ge range operator
          - Range: `1`-`32`
        """
        return pulumi.get(self, "ge")

    @_builtins.property
    @pulumi.getter(name="ipv4Address")
    def ipv4_address(self) -> Optional[_builtins.str]:
        """
        IPv4 address
        """
        return pulumi.get(self, "ipv4_address")

    @_builtins.property
    @pulumi.getter(name="ipv4PrefixLength")
    def ipv4_prefix_length(self) -> Optional[_builtins.int]:
        """
        IPv4 prefix length
          - Range: `0`-`32`
        """
        return pulumi.get(self, "ipv4_prefix_length")

    @_builtins.property
    @pulumi.getter
    def le(self) -> Optional[_builtins.int]:
        """
        IPv4 prefix length with le range operator
          - Range: `1`-`32`
        """
        return pulumi.get(self, "le")


@pulumi.output_type
class PolicyObjectIpv6PrefixListEntry(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "ipv6Address":
            suggest = "ipv6_address"
        elif key == "ipv6PrefixLength":
            suggest = "ipv6_prefix_length"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in PolicyObjectIpv6PrefixListEntry. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        PolicyObjectIpv6PrefixListEntry.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        PolicyObjectIpv6PrefixListEntry.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 ge: Optional[_builtins.int] = None,
                 ipv6_address: Optional[_builtins.str] = None,
                 ipv6_prefix_length: Optional[_builtins.int] = None,
                 le: Optional[_builtins.int] = None):
        """
        :param _builtins.int ge: IPv6 prefix length with ge range operator
                 - Range: `1`-`128`
        :param _builtins.str ipv6_address: IPv6 address
        :param _builtins.int ipv6_prefix_length: IPv6 prefix length
                 - Range: `0`-`128`
        :param _builtins.int le: IPv6 prefix length with le range operator
                 - Range: `1`-`128`
        """
        if ge is not None:
            pulumi.set(__self__, "ge", ge)
        if ipv6_address is not None:
            pulumi.set(__self__, "ipv6_address", ipv6_address)
        if ipv6_prefix_length is not None:
            pulumi.set(__self__, "ipv6_prefix_length", ipv6_prefix_length)
        if le is not None:
            pulumi.set(__self__, "le", le)

    @_builtins.property
    @pulumi.getter
    def ge(self) -> Optional[_builtins.int]:
        """
        IPv6 prefix length with ge range operator
          - Range: `1`-`128`
        """
        return pulumi.get(self, "ge")

    @_builtins.property
    @pulumi.getter(name="ipv6Address")
    def ipv6_address(self) -> Optional[_builtins.str]:
        """
        IPv6 address
        """
        return pulumi.get(self, "ipv6_address")

    @_builtins.property
    @pulumi.getter(name="ipv6PrefixLength")
    def ipv6_prefix_length(self) -> Optional[_builtins.int]:
        """
        IPv6 prefix length
          - Range: `0`-`128`
        """
        return pulumi.get(self, "ipv6_prefix_length")

    @_builtins.property
    @pulumi.getter
    def le(self) -> Optional[_builtins.int]:
        """
        IPv6 prefix length with le range operator
          - Range: `1`-`128`
        """
        return pulumi.get(self, "le")


@pulumi.output_type
class PolicyObjectMirrorEntry(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "remoteDestinationIp":
            suggest = "remote_destination_ip"
        elif key == "sourceIp":
            suggest = "source_ip"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in PolicyObjectMirrorEntry. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        PolicyObjectMirrorEntry.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        PolicyObjectMirrorEntry.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 remote_destination_ip: Optional[_builtins.str] = None,
                 source_ip: Optional[_builtins.str] = None):
        """
        :param _builtins.str remote_destination_ip: remote destination ip address
        :param _builtins.str source_ip: source ip address
        """
        if remote_destination_ip is not None:
            pulumi.set(__self__, "remote_destination_ip", remote_destination_ip)
        if source_ip is not None:
            pulumi.set(__self__, "source_ip", source_ip)

    @_builtins.property
    @pulumi.getter(name="remoteDestinationIp")
    def remote_destination_ip(self) -> Optional[_builtins.str]:
        """
        remote destination ip address
        """
        return pulumi.get(self, "remote_destination_ip")

    @_builtins.property
    @pulumi.getter(name="sourceIp")
    def source_ip(self) -> Optional[_builtins.str]:
        """
        source ip address
        """
        return pulumi.get(self, "source_ip")


@pulumi.output_type
class PolicyObjectPolicerEntry(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "burstBytes":
            suggest = "burst_bytes"
        elif key == "exceedAction":
            suggest = "exceed_action"
        elif key == "rateBps":
            suggest = "rate_bps"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in PolicyObjectPolicerEntry. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        PolicyObjectPolicerEntry.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        PolicyObjectPolicerEntry.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 burst_bytes: Optional[_builtins.int] = None,
                 exceed_action: Optional[_builtins.str] = None,
                 rate_bps: Optional[_builtins.int] = None):
        """
        :param _builtins.int burst_bytes: Burst (Bytes)
                 - Range: `15000`-`10000000`
        :param _builtins.str exceed_action: Exceed options such as Drop or Remark
                 - Choices: `drop`, `remark`
        :param _builtins.int rate_bps: Rate (bps)
                 - Range: `8`-`100000000000`
        """
        if burst_bytes is not None:
            pulumi.set(__self__, "burst_bytes", burst_bytes)
        if exceed_action is not None:
            pulumi.set(__self__, "exceed_action", exceed_action)
        if rate_bps is not None:
            pulumi.set(__self__, "rate_bps", rate_bps)

    @_builtins.property
    @pulumi.getter(name="burstBytes")
    def burst_bytes(self) -> Optional[_builtins.int]:
        """
        Burst (Bytes)
          - Range: `15000`-`10000000`
        """
        return pulumi.get(self, "burst_bytes")

    @_builtins.property
    @pulumi.getter(name="exceedAction")
    def exceed_action(self) -> Optional[_builtins.str]:
        """
        Exceed options such as Drop or Remark
          - Choices: `drop`, `remark`
        """
        return pulumi.get(self, "exceed_action")

    @_builtins.property
    @pulumi.getter(name="rateBps")
    def rate_bps(self) -> Optional[_builtins.int]:
        """
        Rate (bps)
          - Range: `8`-`100000000000`
        """
        return pulumi.get(self, "rate_bps")


@pulumi.output_type
class PolicyObjectPreferredColorGroupEntry(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "primaryColorPreferences":
            suggest = "primary_color_preferences"
        elif key == "primaryPathPreference":
            suggest = "primary_path_preference"
        elif key == "secondaryColorPreferences":
            suggest = "secondary_color_preferences"
        elif key == "secondaryPathPreference":
            suggest = "secondary_path_preference"
        elif key == "tertiaryColorPreferences":
            suggest = "tertiary_color_preferences"
        elif key == "tertiaryPathPreference":
            suggest = "tertiary_path_preference"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in PolicyObjectPreferredColorGroupEntry. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        PolicyObjectPreferredColorGroupEntry.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        PolicyObjectPreferredColorGroupEntry.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 primary_color_preferences: Optional[Sequence[_builtins.str]] = None,
                 primary_path_preference: Optional[_builtins.str] = None,
                 secondary_color_preferences: Optional[Sequence[_builtins.str]] = None,
                 secondary_path_preference: Optional[_builtins.str] = None,
                 tertiary_color_preferences: Optional[Sequence[_builtins.str]] = None,
                 tertiary_path_preference: Optional[_builtins.str] = None):
        """
        :param _builtins.str primary_path_preference: - Choices: `all-paths`, `direct-path`, `multi-hop-path`
        :param _builtins.str secondary_path_preference: - Choices: `all-paths`, `direct-path`, `multi-hop-path`
        :param _builtins.str tertiary_path_preference: - Choices: `all-paths`, `direct-path`, `multi-hop-path`
        """
        if primary_color_preferences is not None:
            pulumi.set(__self__, "primary_color_preferences", primary_color_preferences)
        if primary_path_preference is not None:
            pulumi.set(__self__, "primary_path_preference", primary_path_preference)
        if secondary_color_preferences is not None:
            pulumi.set(__self__, "secondary_color_preferences", secondary_color_preferences)
        if secondary_path_preference is not None:
            pulumi.set(__self__, "secondary_path_preference", secondary_path_preference)
        if tertiary_color_preferences is not None:
            pulumi.set(__self__, "tertiary_color_preferences", tertiary_color_preferences)
        if tertiary_path_preference is not None:
            pulumi.set(__self__, "tertiary_path_preference", tertiary_path_preference)

    @_builtins.property
    @pulumi.getter(name="primaryColorPreferences")
    def primary_color_preferences(self) -> Optional[Sequence[_builtins.str]]:
        return pulumi.get(self, "primary_color_preferences")

    @_builtins.property
    @pulumi.getter(name="primaryPathPreference")
    def primary_path_preference(self) -> Optional[_builtins.str]:
        """
        - Choices: `all-paths`, `direct-path`, `multi-hop-path`
        """
        return pulumi.get(self, "primary_path_preference")

    @_builtins.property
    @pulumi.getter(name="secondaryColorPreferences")
    def secondary_color_preferences(self) -> Optional[Sequence[_builtins.str]]:
        return pulumi.get(self, "secondary_color_preferences")

    @_builtins.property
    @pulumi.getter(name="secondaryPathPreference")
    def secondary_path_preference(self) -> Optional[_builtins.str]:
        """
        - Choices: `all-paths`, `direct-path`, `multi-hop-path`
        """
        return pulumi.get(self, "secondary_path_preference")

    @_builtins.property
    @pulumi.getter(name="tertiaryColorPreferences")
    def tertiary_color_preferences(self) -> Optional[Sequence[_builtins.str]]:
        return pulumi.get(self, "tertiary_color_preferences")

    @_builtins.property
    @pulumi.getter(name="tertiaryPathPreference")
    def tertiary_path_preference(self) -> Optional[_builtins.str]:
        """
        - Choices: `all-paths`, `direct-path`, `multi-hop-path`
        """
        return pulumi.get(self, "tertiary_path_preference")


@pulumi.output_type
class PolicyObjectSecurityDataIpv4PrefixListEntry(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "ipPrefix":
            suggest = "ip_prefix"
        elif key == "ipPrefixVariable":
            suggest = "ip_prefix_variable"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in PolicyObjectSecurityDataIpv4PrefixListEntry. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        PolicyObjectSecurityDataIpv4PrefixListEntry.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        PolicyObjectSecurityDataIpv4PrefixListEntry.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 ip_prefix: Optional[_builtins.str] = None,
                 ip_prefix_variable: Optional[_builtins.str] = None):
        """
        :param _builtins.str ip_prefix_variable: Variable name
        """
        if ip_prefix is not None:
            pulumi.set(__self__, "ip_prefix", ip_prefix)
        if ip_prefix_variable is not None:
            pulumi.set(__self__, "ip_prefix_variable", ip_prefix_variable)

    @_builtins.property
    @pulumi.getter(name="ipPrefix")
    def ip_prefix(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "ip_prefix")

    @_builtins.property
    @pulumi.getter(name="ipPrefixVariable")
    def ip_prefix_variable(self) -> Optional[_builtins.str]:
        """
        Variable name
        """
        return pulumi.get(self, "ip_prefix_variable")


@pulumi.output_type
class PolicyObjectSecurityFqdnListEntry(dict):
    def __init__(__self__, *,
                 pattern: Optional[_builtins.str] = None):
        if pattern is not None:
            pulumi.set(__self__, "pattern", pattern)

    @_builtins.property
    @pulumi.getter
    def pattern(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "pattern")


@pulumi.output_type
class PolicyObjectSecurityGeolocationListEntry(dict):
    def __init__(__self__, *,
                 continent: Optional[_builtins.str] = None,
                 country: Optional[_builtins.str] = None):
        """
        :param _builtins.str continent: continent name
                 - Choices: `AF`, `AN`, `AS`, `EU`, `NA`, `OC`, `SA`
        :param _builtins.str country: country names
                 - Choices: `AFG`, `ALB`, `ATA`, `DZA`, `ASM`, `AND`, `AGO`, `ATG`, `AZE`, `ARG`, `AUS`, `AUT`, `BHS`, `BHR`, `BGD`, `ARM`, `BRB`, `BEL`, `BMU`, `BTN`, `BOL`, `BIH`, `BWA`, `BVT`, `BRA`, `BLZ`, `IOT`, `SLB`, `VGB`, `BRN`, `BGR`, `MMR`, `BDI`, `BLR`, `KHM`, `CMR`, `CAN`, `CPV`, `CYM`, `CAF`, `LKA`, `TCD`, `CHL`, `CHN`, `TWN`, `CXR`, `CCK`, `COL`, `COM`, `MYT`, `COG`, `COD`, `COK`, `CRI`, `HRV`, `CUB`, `CYP`, `CZE`, `BEN`, `DNK`, `DMA`, `DOM`, `ECU`, `SLV`, `GNQ`, `ETH`, `ERI`, `EST`, `FRO`, `FLK`, `SGS`, `FJI`, `FIN`, `ALA`, `FRA`, `GUF`, `PYF`, `ATF`, `DJI`, `GAB`, `GEO`, `GMB`, `PSE`, `DEU`, `GHA`, `GIB`, `KIR`, `GRC`, `GRL`, `GRD`, `GLP`, `GUM`, `GTM`, `GIN`, `GUY`, `HTI`, `HMD`, `VAT`, `HND`, `HKG`, `HUN`, `ISL`, `IND`, `IDN`, `IRN`, `IRQ`, `IRL`, `ISR`, `ITA`, `CIV`, `JAM`, `JPN`, `KAZ`, `JOR`, `KEN`, `PRK`, `KOR`, `KWT`, `KGZ`, `LAO`, `LBN`, `LSO`, `LVA`, `LBR`, `LBY`, `LIE`, `LTU`, `LUX`, `MAC`, `MDG`, `MWI`, `MYS`, `MDV`, `MLI`, `MLT`, `MTQ`, `MRT`, `MUS`, `MEX`, `MCO`, `MNG`, `MDA`, `MNE`, `MSR`, `MAR`, `MOZ`, `OMN`, `NAM`, `NRU`, `NPL`, `NLD`, `ANT`, `CUW`, `ABW`, `SXM`, `BES`, `NCL`, `VUT`, `NZL`, `NIC`, `NER`, `NGA`, `NIU`, `NFK`, `NOR`, `MNP`, `UMI`, `FSM`, `MHL`, `PLW`, `PAK`, `PAN`, `PNG`, `PRY`, `PER`, `PHL`, `PCN`, `POL`, `PRT`, `GNB`, `TLS`, `PRI`, `QAT`, `REU`, `ROU`, `RUS`, `RWA`, `BLM`, `SHN`, `KNA`, `AIA`, `LCA`, `MAF`, `SPM`, `VCT`, `SMR`, `STP`, `SAU`, `SEN`, `SRB`, `SYC`, `SLE`, `SGP`, `SVK`, `VNM`, `SVN`, `SOM`, `ZAF`, `ZWE`, `ESP`, `SSD`, `ESH`, `SDN`, `SUR`, `SJM`, `SWZ`, `SWE`, `CHE`, `SYR`, `TJK`, `THA`, `TGO`, `TKL`, `TON`, `TTO`, `ARE`, `TUN`, `TUR`, `TKM`, `TCA`, `TUV`, `UGA`, `UKR`, `MKD`, `EGY`, `GBR`, `GGY`, `JEY`, `IMN`, `TZA`, `USA`, `VIR`, `BFA`, `URY`, `UZB`, `VEN`, `WLF`, `WSM`, `YEM`, `ZMB`
        """
        if continent is not None:
            pulumi.set(__self__, "continent", continent)
        if country is not None:
            pulumi.set(__self__, "country", country)

    @_builtins.property
    @pulumi.getter
    def continent(self) -> Optional[_builtins.str]:
        """
        continent name
          - Choices: `AF`, `AN`, `AS`, `EU`, `NA`, `OC`, `SA`
        """
        return pulumi.get(self, "continent")

    @_builtins.property
    @pulumi.getter
    def country(self) -> Optional[_builtins.str]:
        """
        country names
          - Choices: `AFG`, `ALB`, `ATA`, `DZA`, `ASM`, `AND`, `AGO`, `ATG`, `AZE`, `ARG`, `AUS`, `AUT`, `BHS`, `BHR`, `BGD`, `ARM`, `BRB`, `BEL`, `BMU`, `BTN`, `BOL`, `BIH`, `BWA`, `BVT`, `BRA`, `BLZ`, `IOT`, `SLB`, `VGB`, `BRN`, `BGR`, `MMR`, `BDI`, `BLR`, `KHM`, `CMR`, `CAN`, `CPV`, `CYM`, `CAF`, `LKA`, `TCD`, `CHL`, `CHN`, `TWN`, `CXR`, `CCK`, `COL`, `COM`, `MYT`, `COG`, `COD`, `COK`, `CRI`, `HRV`, `CUB`, `CYP`, `CZE`, `BEN`, `DNK`, `DMA`, `DOM`, `ECU`, `SLV`, `GNQ`, `ETH`, `ERI`, `EST`, `FRO`, `FLK`, `SGS`, `FJI`, `FIN`, `ALA`, `FRA`, `GUF`, `PYF`, `ATF`, `DJI`, `GAB`, `GEO`, `GMB`, `PSE`, `DEU`, `GHA`, `GIB`, `KIR`, `GRC`, `GRL`, `GRD`, `GLP`, `GUM`, `GTM`, `GIN`, `GUY`, `HTI`, `HMD`, `VAT`, `HND`, `HKG`, `HUN`, `ISL`, `IND`, `IDN`, `IRN`, `IRQ`, `IRL`, `ISR`, `ITA`, `CIV`, `JAM`, `JPN`, `KAZ`, `JOR`, `KEN`, `PRK`, `KOR`, `KWT`, `KGZ`, `LAO`, `LBN`, `LSO`, `LVA`, `LBR`, `LBY`, `LIE`, `LTU`, `LUX`, `MAC`, `MDG`, `MWI`, `MYS`, `MDV`, `MLI`, `MLT`, `MTQ`, `MRT`, `MUS`, `MEX`, `MCO`, `MNG`, `MDA`, `MNE`, `MSR`, `MAR`, `MOZ`, `OMN`, `NAM`, `NRU`, `NPL`, `NLD`, `ANT`, `CUW`, `ABW`, `SXM`, `BES`, `NCL`, `VUT`, `NZL`, `NIC`, `NER`, `NGA`, `NIU`, `NFK`, `NOR`, `MNP`, `UMI`, `FSM`, `MHL`, `PLW`, `PAK`, `PAN`, `PNG`, `PRY`, `PER`, `PHL`, `PCN`, `POL`, `PRT`, `GNB`, `TLS`, `PRI`, `QAT`, `REU`, `ROU`, `RUS`, `RWA`, `BLM`, `SHN`, `KNA`, `AIA`, `LCA`, `MAF`, `SPM`, `VCT`, `SMR`, `STP`, `SAU`, `SEN`, `SRB`, `SYC`, `SLE`, `SGP`, `SVK`, `VNM`, `SVN`, `SOM`, `ZAF`, `ZWE`, `ESP`, `SSD`, `ESH`, `SDN`, `SUR`, `SJM`, `SWZ`, `SWE`, `CHE`, `SYR`, `TJK`, `THA`, `TGO`, `TKL`, `TON`, `TTO`, `ARE`, `TUN`, `TUR`, `TKM`, `TCA`, `TUV`, `UGA`, `UKR`, `MKD`, `EGY`, `GBR`, `GGY`, `JEY`, `IMN`, `TZA`, `USA`, `VIR`, `BFA`, `URY`, `UZB`, `VEN`, `WLF`, `WSM`, `YEM`, `ZMB`
        """
        return pulumi.get(self, "country")


@pulumi.output_type
class PolicyObjectSecurityIdentityListEntry(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "userGroup":
            suggest = "user_group"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in PolicyObjectSecurityIdentityListEntry. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        PolicyObjectSecurityIdentityListEntry.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        PolicyObjectSecurityIdentityListEntry.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 user: Optional[_builtins.str] = None,
                 user_group: Optional[_builtins.str] = None):
        if user is not None:
            pulumi.set(__self__, "user", user)
        if user_group is not None:
            pulumi.set(__self__, "user_group", user_group)

    @_builtins.property
    @pulumi.getter
    def user(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "user")

    @_builtins.property
    @pulumi.getter(name="userGroup")
    def user_group(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "user_group")


@pulumi.output_type
class PolicyObjectSecurityIpsSignatureEntry(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "generatorId":
            suggest = "generator_id"
        elif key == "signatureId":
            suggest = "signature_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in PolicyObjectSecurityIpsSignatureEntry. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        PolicyObjectSecurityIpsSignatureEntry.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        PolicyObjectSecurityIpsSignatureEntry.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 generator_id: Optional[_builtins.str] = None,
                 signature_id: Optional[_builtins.str] = None):
        if generator_id is not None:
            pulumi.set(__self__, "generator_id", generator_id)
        if signature_id is not None:
            pulumi.set(__self__, "signature_id", signature_id)

    @_builtins.property
    @pulumi.getter(name="generatorId")
    def generator_id(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "generator_id")

    @_builtins.property
    @pulumi.getter(name="signatureId")
    def signature_id(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "signature_id")


@pulumi.output_type
class PolicyObjectSecurityLocalApplicationListEntry(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "appFamily":
            suggest = "app_family"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in PolicyObjectSecurityLocalApplicationListEntry. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        PolicyObjectSecurityLocalApplicationListEntry.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        PolicyObjectSecurityLocalApplicationListEntry.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 app: Optional[_builtins.str] = None,
                 app_family: Optional[_builtins.str] = None):
        if app is not None:
            pulumi.set(__self__, "app", app)
        if app_family is not None:
            pulumi.set(__self__, "app_family", app_family)

    @_builtins.property
    @pulumi.getter
    def app(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "app")

    @_builtins.property
    @pulumi.getter(name="appFamily")
    def app_family(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "app_family")


@pulumi.output_type
class PolicyObjectSecurityLocalDomainListEntry(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "localDomain":
            suggest = "local_domain"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in PolicyObjectSecurityLocalDomainListEntry. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        PolicyObjectSecurityLocalDomainListEntry.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        PolicyObjectSecurityLocalDomainListEntry.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 local_domain: Optional[_builtins.str] = None):
        if local_domain is not None:
            pulumi.set(__self__, "local_domain", local_domain)

    @_builtins.property
    @pulumi.getter(name="localDomain")
    def local_domain(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "local_domain")


@pulumi.output_type
class PolicyObjectSecurityPortListEntry(dict):
    def __init__(__self__, *,
                 port: Optional[_builtins.str] = None):
        """
        :param _builtins.str port: can be single port or port range
        """
        if port is not None:
            pulumi.set(__self__, "port", port)

    @_builtins.property
    @pulumi.getter
    def port(self) -> Optional[_builtins.str]:
        """
        can be single port or port range
        """
        return pulumi.get(self, "port")


@pulumi.output_type
class PolicyObjectSecurityScalableGroupTagListEntry(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "sgtName":
            suggest = "sgt_name"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in PolicyObjectSecurityScalableGroupTagListEntry. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        PolicyObjectSecurityScalableGroupTagListEntry.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        PolicyObjectSecurityScalableGroupTagListEntry.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 sgt_name: Optional[_builtins.str] = None,
                 tag: Optional[_builtins.str] = None):
        if sgt_name is not None:
            pulumi.set(__self__, "sgt_name", sgt_name)
        if tag is not None:
            pulumi.set(__self__, "tag", tag)

    @_builtins.property
    @pulumi.getter(name="sgtName")
    def sgt_name(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "sgt_name")

    @_builtins.property
    @pulumi.getter
    def tag(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "tag")


@pulumi.output_type
class PolicyObjectSecurityUrlAllowListEntry(dict):
    def __init__(__self__, *,
                 pattern: Optional[_builtins.str] = None):
        """
        :param _builtins.str pattern: valid url pattern
        """
        if pattern is not None:
            pulumi.set(__self__, "pattern", pattern)

    @_builtins.property
    @pulumi.getter
    def pattern(self) -> Optional[_builtins.str]:
        """
        valid url pattern
        """
        return pulumi.get(self, "pattern")


@pulumi.output_type
class PolicyObjectSecurityUrlBlockListEntry(dict):
    def __init__(__self__, *,
                 pattern: Optional[_builtins.str] = None):
        """
        :param _builtins.str pattern: valid url pattern
        """
        if pattern is not None:
            pulumi.set(__self__, "pattern", pattern)

    @_builtins.property
    @pulumi.getter
    def pattern(self) -> Optional[_builtins.str]:
        """
        valid url pattern
        """
        return pulumi.get(self, "pattern")


@pulumi.output_type
class PolicyObjectSlaClassListEntry(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "appProbeClassListId":
            suggest = "app_probe_class_list_id"
        elif key == "fallbackBestTunnelCriteria":
            suggest = "fallback_best_tunnel_criteria"
        elif key == "fallbackBestTunnelJitterVariance":
            suggest = "fallback_best_tunnel_jitter_variance"
        elif key == "fallbackBestTunnelLatencyVariance":
            suggest = "fallback_best_tunnel_latency_variance"
        elif key == "fallbackBestTunnelLossVariance":
            suggest = "fallback_best_tunnel_loss_variance"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in PolicyObjectSlaClassListEntry. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        PolicyObjectSlaClassListEntry.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        PolicyObjectSlaClassListEntry.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 app_probe_class_list_id: Optional[_builtins.str] = None,
                 fallback_best_tunnel_criteria: Optional[_builtins.str] = None,
                 fallback_best_tunnel_jitter_variance: Optional[_builtins.int] = None,
                 fallback_best_tunnel_latency_variance: Optional[_builtins.int] = None,
                 fallback_best_tunnel_loss_variance: Optional[_builtins.int] = None,
                 jitter: Optional[_builtins.int] = None,
                 latency: Optional[_builtins.int] = None,
                 loss: Optional[_builtins.int] = None):
        """
        :param _builtins.str fallback_best_tunnel_criteria: - Choices: `jitter`, `latency`, `loss`, `loss-latency`, `loss-jitter`, `latency-loss`, `latency-jitter`, `jitter-latency`, `jitter-loss`, `loss-latency-jitter`, `loss-jitter-latency`, `latency-loss-jitter`, `latency-jitter-loss`, `jitter-latency-loss`, `jitter-loss-latency`
        :param _builtins.int fallback_best_tunnel_jitter_variance: - Range: `1`-`1000`
        :param _builtins.int fallback_best_tunnel_latency_variance: - Range: `1`-`1000`
        :param _builtins.int fallback_best_tunnel_loss_variance: - Range: `0`-`100`
        :param _builtins.int jitter: - Range: `1`-`1000`
        :param _builtins.int latency: - Range: `1`-`1000`
        :param _builtins.int loss: - Range: `0`-`100`
        """
        if app_probe_class_list_id is not None:
            pulumi.set(__self__, "app_probe_class_list_id", app_probe_class_list_id)
        if fallback_best_tunnel_criteria is not None:
            pulumi.set(__self__, "fallback_best_tunnel_criteria", fallback_best_tunnel_criteria)
        if fallback_best_tunnel_jitter_variance is not None:
            pulumi.set(__self__, "fallback_best_tunnel_jitter_variance", fallback_best_tunnel_jitter_variance)
        if fallback_best_tunnel_latency_variance is not None:
            pulumi.set(__self__, "fallback_best_tunnel_latency_variance", fallback_best_tunnel_latency_variance)
        if fallback_best_tunnel_loss_variance is not None:
            pulumi.set(__self__, "fallback_best_tunnel_loss_variance", fallback_best_tunnel_loss_variance)
        if jitter is not None:
            pulumi.set(__self__, "jitter", jitter)
        if latency is not None:
            pulumi.set(__self__, "latency", latency)
        if loss is not None:
            pulumi.set(__self__, "loss", loss)

    @_builtins.property
    @pulumi.getter(name="appProbeClassListId")
    def app_probe_class_list_id(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "app_probe_class_list_id")

    @_builtins.property
    @pulumi.getter(name="fallbackBestTunnelCriteria")
    def fallback_best_tunnel_criteria(self) -> Optional[_builtins.str]:
        """
        - Choices: `jitter`, `latency`, `loss`, `loss-latency`, `loss-jitter`, `latency-loss`, `latency-jitter`, `jitter-latency`, `jitter-loss`, `loss-latency-jitter`, `loss-jitter-latency`, `latency-loss-jitter`, `latency-jitter-loss`, `jitter-latency-loss`, `jitter-loss-latency`
        """
        return pulumi.get(self, "fallback_best_tunnel_criteria")

    @_builtins.property
    @pulumi.getter(name="fallbackBestTunnelJitterVariance")
    def fallback_best_tunnel_jitter_variance(self) -> Optional[_builtins.int]:
        """
        - Range: `1`-`1000`
        """
        return pulumi.get(self, "fallback_best_tunnel_jitter_variance")

    @_builtins.property
    @pulumi.getter(name="fallbackBestTunnelLatencyVariance")
    def fallback_best_tunnel_latency_variance(self) -> Optional[_builtins.int]:
        """
        - Range: `1`-`1000`
        """
        return pulumi.get(self, "fallback_best_tunnel_latency_variance")

    @_builtins.property
    @pulumi.getter(name="fallbackBestTunnelLossVariance")
    def fallback_best_tunnel_loss_variance(self) -> Optional[_builtins.int]:
        """
        - Range: `0`-`100`
        """
        return pulumi.get(self, "fallback_best_tunnel_loss_variance")

    @_builtins.property
    @pulumi.getter
    def jitter(self) -> Optional[_builtins.int]:
        """
        - Range: `1`-`1000`
        """
        return pulumi.get(self, "jitter")

    @_builtins.property
    @pulumi.getter
    def latency(self) -> Optional[_builtins.int]:
        """
        - Range: `1`-`1000`
        """
        return pulumi.get(self, "latency")

    @_builtins.property
    @pulumi.getter
    def loss(self) -> Optional[_builtins.int]:
        """
        - Range: `0`-`100`
        """
        return pulumi.get(self, "loss")


@pulumi.output_type
class PolicyObjectStandardCommunityListEntry(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "standardCommunity":
            suggest = "standard_community"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in PolicyObjectStandardCommunityListEntry. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        PolicyObjectStandardCommunityListEntry.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        PolicyObjectStandardCommunityListEntry.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 standard_community: Optional[_builtins.str] = None):
        """
        :param _builtins.str standard_community: Standard Community
        """
        if standard_community is not None:
            pulumi.set(__self__, "standard_community", standard_community)

    @_builtins.property
    @pulumi.getter(name="standardCommunity")
    def standard_community(self) -> Optional[_builtins.str]:
        """
        Standard Community
        """
        return pulumi.get(self, "standard_community")


@pulumi.output_type
class PolicyObjectTlocListEntry(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "tlocIp":
            suggest = "tloc_ip"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in PolicyObjectTlocListEntry. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        PolicyObjectTlocListEntry.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        PolicyObjectTlocListEntry.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 color: Optional[_builtins.str] = None,
                 encapsulation: Optional[_builtins.str] = None,
                 preference: Optional[_builtins.str] = None,
                 tloc_ip: Optional[_builtins.str] = None):
        """
        :param _builtins.str color: color
                 - Choices: `3g`, `biz-internet`, `blue`, `bronze`, `custom1`, `custom2`, `custom3`, `default`, `gold`, `green`, `lte`, `metro-ethernet`, `mpls`, `private1`, `private2`, `private3`, `private4`, `private5`, `private6`, `public-internet`, `red`, `silver`
        :param _builtins.str encapsulation: encapsulation
                 - Choices: `ipsec`, `gre`
        :param _builtins.str preference: Preference
        :param _builtins.str tloc_ip: tloc
        """
        if color is not None:
            pulumi.set(__self__, "color", color)
        if encapsulation is not None:
            pulumi.set(__self__, "encapsulation", encapsulation)
        if preference is not None:
            pulumi.set(__self__, "preference", preference)
        if tloc_ip is not None:
            pulumi.set(__self__, "tloc_ip", tloc_ip)

    @_builtins.property
    @pulumi.getter
    def color(self) -> Optional[_builtins.str]:
        """
        color
          - Choices: `3g`, `biz-internet`, `blue`, `bronze`, `custom1`, `custom2`, `custom3`, `default`, `gold`, `green`, `lte`, `metro-ethernet`, `mpls`, `private1`, `private2`, `private3`, `private4`, `private5`, `private6`, `public-internet`, `red`, `silver`
        """
        return pulumi.get(self, "color")

    @_builtins.property
    @pulumi.getter
    def encapsulation(self) -> Optional[_builtins.str]:
        """
        encapsulation
          - Choices: `ipsec`, `gre`
        """
        return pulumi.get(self, "encapsulation")

    @_builtins.property
    @pulumi.getter
    def preference(self) -> Optional[_builtins.str]:
        """
        Preference
        """
        return pulumi.get(self, "preference")

    @_builtins.property
    @pulumi.getter(name="tlocIp")
    def tloc_ip(self) -> Optional[_builtins.str]:
        """
        tloc
        """
        return pulumi.get(self, "tloc_ip")


@pulumi.output_type
class PolicyObjectVpnGroupEntry(dict):
    def __init__(__self__, *,
                 vpn: Optional[_builtins.int] = None):
        """
        :param _builtins.int vpn: can be single vpn id or vpn id range
        """
        if vpn is not None:
            pulumi.set(__self__, "vpn", vpn)

    @_builtins.property
    @pulumi.getter
    def vpn(self) -> Optional[_builtins.int]:
        """
        can be single vpn id or vpn id range
        """
        return pulumi.get(self, "vpn")


@pulumi.output_type
class PortListPolicyObjectEntry(dict):
    def __init__(__self__, *,
                 port: Optional[_builtins.str] = None):
        """
        :param _builtins.str port: Port number
        """
        if port is not None:
            pulumi.set(__self__, "port", port)

    @_builtins.property
    @pulumi.getter
    def port(self) -> Optional[_builtins.str]:
        """
        Port number
        """
        return pulumi.get(self, "port")


@pulumi.output_type
class ProtocolListPolicyObjectEntry(dict):
    def __init__(__self__, *,
                 protocol: Optional[_builtins.str] = None):
        """
        :param _builtins.str protocol: Protocol name
        """
        if protocol is not None:
            pulumi.set(__self__, "protocol", protocol)

    @_builtins.property
    @pulumi.getter
    def protocol(self) -> Optional[_builtins.str]:
        """
        Protocol name
        """
        return pulumi.get(self, "protocol")


@pulumi.output_type
class QosMapPolicyDefinitionQosScheduler(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "bandwidthPercent":
            suggest = "bandwidth_percent"
        elif key == "bufferPercent":
            suggest = "buffer_percent"
        elif key == "classMapId":
            suggest = "class_map_id"
        elif key == "dropType":
            suggest = "drop_type"
        elif key == "schedulingType":
            suggest = "scheduling_type"
        elif key == "classMapVersion":
            suggest = "class_map_version"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in QosMapPolicyDefinitionQosScheduler. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        QosMapPolicyDefinitionQosScheduler.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        QosMapPolicyDefinitionQosScheduler.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 bandwidth_percent: _builtins.int,
                 buffer_percent: _builtins.int,
                 class_map_id: _builtins.str,
                 drop_type: _builtins.str,
                 queue: _builtins.int,
                 scheduling_type: _builtins.str,
                 burst: Optional[_builtins.int] = None,
                 class_map_version: Optional[_builtins.int] = None):
        """
        :param _builtins.int bandwidth_percent: Bandwidth percent
                 - Range: `0`-`100`
        :param _builtins.int buffer_percent: Buffer percent
                 - Range: `0`-`100`
        :param _builtins.str class_map_id: Class map ID
        :param _builtins.str drop_type: Drop type
                 - Choices: `tail-drop`, `red-drop`
        :param _builtins.int queue: Queue number
                 - Range: `0`-`7`
        :param _builtins.str scheduling_type: Scheduling type
                 - Choices: `llq`, `wrr`
        :param _builtins.int burst: Burst size
                 - Range: `5000`-`10000000`
        :param _builtins.int class_map_version: Class map version
        """
        pulumi.set(__self__, "bandwidth_percent", bandwidth_percent)
        pulumi.set(__self__, "buffer_percent", buffer_percent)
        pulumi.set(__self__, "class_map_id", class_map_id)
        pulumi.set(__self__, "drop_type", drop_type)
        pulumi.set(__self__, "queue", queue)
        pulumi.set(__self__, "scheduling_type", scheduling_type)
        if burst is not None:
            pulumi.set(__self__, "burst", burst)
        if class_map_version is not None:
            pulumi.set(__self__, "class_map_version", class_map_version)

    @_builtins.property
    @pulumi.getter(name="bandwidthPercent")
    def bandwidth_percent(self) -> _builtins.int:
        """
        Bandwidth percent
          - Range: `0`-`100`
        """
        return pulumi.get(self, "bandwidth_percent")

    @_builtins.property
    @pulumi.getter(name="bufferPercent")
    def buffer_percent(self) -> _builtins.int:
        """
        Buffer percent
          - Range: `0`-`100`
        """
        return pulumi.get(self, "buffer_percent")

    @_builtins.property
    @pulumi.getter(name="classMapId")
    def class_map_id(self) -> _builtins.str:
        """
        Class map ID
        """
        return pulumi.get(self, "class_map_id")

    @_builtins.property
    @pulumi.getter(name="dropType")
    def drop_type(self) -> _builtins.str:
        """
        Drop type
          - Choices: `tail-drop`, `red-drop`
        """
        return pulumi.get(self, "drop_type")

    @_builtins.property
    @pulumi.getter
    def queue(self) -> _builtins.int:
        """
        Queue number
          - Range: `0`-`7`
        """
        return pulumi.get(self, "queue")

    @_builtins.property
    @pulumi.getter(name="schedulingType")
    def scheduling_type(self) -> _builtins.str:
        """
        Scheduling type
          - Choices: `llq`, `wrr`
        """
        return pulumi.get(self, "scheduling_type")

    @_builtins.property
    @pulumi.getter
    def burst(self) -> Optional[_builtins.int]:
        """
        Burst size
          - Range: `5000`-`10000000`
        """
        return pulumi.get(self, "burst")

    @_builtins.property
    @pulumi.getter(name="classMapVersion")
    def class_map_version(self) -> Optional[_builtins.int]:
        """
        Class map version
        """
        return pulumi.get(self, "class_map_version")


@pulumi.output_type
class RegionListPolicyObjectEntry(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "regionId":
            suggest = "region_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in RegionListPolicyObjectEntry. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        RegionListPolicyObjectEntry.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        RegionListPolicyObjectEntry.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 region_id: _builtins.str):
        """
        :param _builtins.str region_id: Region ID or range of Region IDs e.g., `2` or `3-6`
        """
        pulumi.set(__self__, "region_id", region_id)

    @_builtins.property
    @pulumi.getter(name="regionId")
    def region_id(self) -> _builtins.str:
        """
        Region ID or range of Region IDs e.g., `2` or `3-6`
        """
        return pulumi.get(self, "region_id")


@pulumi.output_type
class RewriteRulePolicyDefinitionRule(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "classMapId":
            suggest = "class_map_id"
        elif key == "classMapVersion":
            suggest = "class_map_version"
        elif key == "layer2Cos":
            suggest = "layer2_cos"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in RewriteRulePolicyDefinitionRule. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        RewriteRulePolicyDefinitionRule.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        RewriteRulePolicyDefinitionRule.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 class_map_id: _builtins.str,
                 dscp: _builtins.int,
                 priority: _builtins.str,
                 class_map_version: Optional[_builtins.int] = None,
                 layer2_cos: Optional[_builtins.int] = None):
        """
        :param _builtins.str class_map_id: Class map ID
        :param _builtins.int dscp: DSCP
                 - Range: `0`-`63`
        :param _builtins.str priority: Priority
                 - Choices: `high`, `low`
        :param _builtins.int class_map_version: Class map version
        :param _builtins.int layer2_cos: Layer2 CoS
                 - Range: `0`-`7`
        """
        pulumi.set(__self__, "class_map_id", class_map_id)
        pulumi.set(__self__, "dscp", dscp)
        pulumi.set(__self__, "priority", priority)
        if class_map_version is not None:
            pulumi.set(__self__, "class_map_version", class_map_version)
        if layer2_cos is not None:
            pulumi.set(__self__, "layer2_cos", layer2_cos)

    @_builtins.property
    @pulumi.getter(name="classMapId")
    def class_map_id(self) -> _builtins.str:
        """
        Class map ID
        """
        return pulumi.get(self, "class_map_id")

    @_builtins.property
    @pulumi.getter
    def dscp(self) -> _builtins.int:
        """
        DSCP
          - Range: `0`-`63`
        """
        return pulumi.get(self, "dscp")

    @_builtins.property
    @pulumi.getter
    def priority(self) -> _builtins.str:
        """
        Priority
          - Choices: `high`, `low`
        """
        return pulumi.get(self, "priority")

    @_builtins.property
    @pulumi.getter(name="classMapVersion")
    def class_map_version(self) -> Optional[_builtins.int]:
        """
        Class map version
        """
        return pulumi.get(self, "class_map_version")

    @_builtins.property
    @pulumi.getter(name="layer2Cos")
    def layer2_cos(self) -> Optional[_builtins.int]:
        """
        Layer2 CoS
          - Range: `0`-`7`
        """
        return pulumi.get(self, "layer2_cos")


@pulumi.output_type
class RoutePolicyDefinitionSequence(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "actionEntries":
            suggest = "action_entries"
        elif key == "baseAction":
            suggest = "base_action"
        elif key == "ipType":
            suggest = "ip_type"
        elif key == "matchEntries":
            suggest = "match_entries"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in RoutePolicyDefinitionSequence. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        RoutePolicyDefinitionSequence.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        RoutePolicyDefinitionSequence.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 id: _builtins.int,
                 name: _builtins.str,
                 action_entries: Optional[Sequence['outputs.RoutePolicyDefinitionSequenceActionEntry']] = None,
                 base_action: Optional[_builtins.str] = None,
                 ip_type: Optional[_builtins.str] = None,
                 match_entries: Optional[Sequence['outputs.RoutePolicyDefinitionSequenceMatchEntry']] = None):
        """
        :param _builtins.int id: Sequence ID
                 - Range: `1`-`65534`
        :param _builtins.str name: Sequence name
        :param Sequence['RoutePolicyDefinitionSequenceActionEntryArgs'] action_entries: List of action entries
        :param _builtins.str base_action: Base action, either `accept` or `reject`
                 - Choices: `accept`, `reject`
        :param _builtins.str ip_type: IP version, either `ipv4` or `ipv6`
                 - Choices: `ipv4`, `ipv6`
        :param Sequence['RoutePolicyDefinitionSequenceMatchEntryArgs'] match_entries: List of match entries
        """
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "name", name)
        if action_entries is not None:
            pulumi.set(__self__, "action_entries", action_entries)
        if base_action is not None:
            pulumi.set(__self__, "base_action", base_action)
        if ip_type is not None:
            pulumi.set(__self__, "ip_type", ip_type)
        if match_entries is not None:
            pulumi.set(__self__, "match_entries", match_entries)

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.int:
        """
        Sequence ID
          - Range: `1`-`65534`
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        """
        Sequence name
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter(name="actionEntries")
    def action_entries(self) -> Optional[Sequence['outputs.RoutePolicyDefinitionSequenceActionEntry']]:
        """
        List of action entries
        """
        return pulumi.get(self, "action_entries")

    @_builtins.property
    @pulumi.getter(name="baseAction")
    def base_action(self) -> Optional[_builtins.str]:
        """
        Base action, either `accept` or `reject`
          - Choices: `accept`, `reject`
        """
        return pulumi.get(self, "base_action")

    @_builtins.property
    @pulumi.getter(name="ipType")
    def ip_type(self) -> Optional[_builtins.str]:
        """
        IP version, either `ipv4` or `ipv6`
          - Choices: `ipv4`, `ipv6`
        """
        return pulumi.get(self, "ip_type")

    @_builtins.property
    @pulumi.getter(name="matchEntries")
    def match_entries(self) -> Optional[Sequence['outputs.RoutePolicyDefinitionSequenceMatchEntry']]:
        """
        List of match entries
        """
        return pulumi.get(self, "match_entries")


@pulumi.output_type
class RoutePolicyDefinitionSequenceActionEntry(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "aggregatorIpAddress":
            suggest = "aggregator_ip_address"
        elif key == "asPathExclude":
            suggest = "as_path_exclude"
        elif key == "asPathPrepend":
            suggest = "as_path_prepend"
        elif key == "atomicAggregate":
            suggest = "atomic_aggregate"
        elif key == "communityAdditive":
            suggest = "community_additive"
        elif key == "communityVariable":
            suggest = "community_variable"
        elif key == "localPreference":
            suggest = "local_preference"
        elif key == "metricType":
            suggest = "metric_type"
        elif key == "nextHop":
            suggest = "next_hop"
        elif key == "ompTag":
            suggest = "omp_tag"
        elif key == "ospfTag":
            suggest = "ospf_tag"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in RoutePolicyDefinitionSequenceActionEntry. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        RoutePolicyDefinitionSequenceActionEntry.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        RoutePolicyDefinitionSequenceActionEntry.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 type: _builtins.str,
                 aggregator: Optional[_builtins.int] = None,
                 aggregator_ip_address: Optional[_builtins.str] = None,
                 as_path_exclude: Optional[_builtins.str] = None,
                 as_path_prepend: Optional[_builtins.str] = None,
                 atomic_aggregate: Optional[_builtins.bool] = None,
                 community: Optional[_builtins.str] = None,
                 community_additive: Optional[_builtins.bool] = None,
                 community_variable: Optional[_builtins.str] = None,
                 local_preference: Optional[_builtins.int] = None,
                 metric: Optional[_builtins.int] = None,
                 metric_type: Optional[_builtins.str] = None,
                 next_hop: Optional[_builtins.str] = None,
                 omp_tag: Optional[_builtins.int] = None,
                 origin: Optional[_builtins.str] = None,
                 originator: Optional[_builtins.str] = None,
                 ospf_tag: Optional[_builtins.int] = None,
                 weight: Optional[_builtins.int] = None):
        """
        :param _builtins.str type: Type of action entry
                 - Choices: `aggregator`, `asPath`, `atomicAggregate`, `community`, `communityAdditive`, `localPreference`, `metric`, `weight`, `metricType`, `nextHop`, `ompTag`, `ospfTag`, `origin`, `originator`
        :param _builtins.int aggregator: Aggregator, Attribute conditional on `type` being equal to `aggregator`
                 - Range: `0`-`4294967295`
        :param _builtins.str aggregator_ip_address: IP address, Attribute conditional on `type` being equal to `aggregator`
        :param _builtins.str as_path_exclude: Space separated list of ASN to exclude, Attribute conditional on `type` being equal to `asPath`
        :param _builtins.str as_path_prepend: Space separated list of ASN to prepend, Attribute conditional on `type` being equal to `asPath`
        :param _builtins.bool atomic_aggregate: Atomic aggregate, Attribute conditional on `type` being equal to `atomicAggregate`
        :param _builtins.str community: Community value, e.g. `1000:10000` or `internet` or `local-AS`, Attribute conditional on `type` being equal to `community`
        :param _builtins.bool community_additive: Community additive, Attribute conditional on `type` being equal to `communityAdditive`
        :param _builtins.str community_variable: Community variable, Attribute conditional on `type` being equal to `community`
        :param _builtins.int local_preference: Local preference, Attribute conditional on `type` being equal to `localPreference`
                 - Range: `0`-`4294967295`
        :param _builtins.int metric: Metric, Attribute conditional on `type` being equal to `metric`
                 - Range: `0`-`4294967295`
        :param _builtins.str metric_type: Metric type, Attribute conditional on `type` being equal to `metricType`
                 - Choices: `type1`, `type2`
        :param _builtins.str next_hop: Next hop IP, Attribute conditional on `type` being equal to `nextHop`
        :param _builtins.int omp_tag: OMP tag, Attribute conditional on `type` being equal to `ompTag`
                 - Range: `0`-`4294967295`
        :param _builtins.str origin: Origin, Attribute conditional on `type` being equal to `origin`
                 - Choices: `igp`, `egp`, `incomplete`
        :param _builtins.str originator: Originator IP, Attribute conditional on `type` being equal to `originator`
        :param _builtins.int ospf_tag: OSPF tag, Attribute conditional on `type` being equal to `ospfTag`
                 - Range: `0`-`4294967295`
        :param _builtins.int weight: Weight, Attribute conditional on `type` being equal to `weight`
                 - Range: `0`-`4294967295`
        """
        pulumi.set(__self__, "type", type)
        if aggregator is not None:
            pulumi.set(__self__, "aggregator", aggregator)
        if aggregator_ip_address is not None:
            pulumi.set(__self__, "aggregator_ip_address", aggregator_ip_address)
        if as_path_exclude is not None:
            pulumi.set(__self__, "as_path_exclude", as_path_exclude)
        if as_path_prepend is not None:
            pulumi.set(__self__, "as_path_prepend", as_path_prepend)
        if atomic_aggregate is not None:
            pulumi.set(__self__, "atomic_aggregate", atomic_aggregate)
        if community is not None:
            pulumi.set(__self__, "community", community)
        if community_additive is not None:
            pulumi.set(__self__, "community_additive", community_additive)
        if community_variable is not None:
            pulumi.set(__self__, "community_variable", community_variable)
        if local_preference is not None:
            pulumi.set(__self__, "local_preference", local_preference)
        if metric is not None:
            pulumi.set(__self__, "metric", metric)
        if metric_type is not None:
            pulumi.set(__self__, "metric_type", metric_type)
        if next_hop is not None:
            pulumi.set(__self__, "next_hop", next_hop)
        if omp_tag is not None:
            pulumi.set(__self__, "omp_tag", omp_tag)
        if origin is not None:
            pulumi.set(__self__, "origin", origin)
        if originator is not None:
            pulumi.set(__self__, "originator", originator)
        if ospf_tag is not None:
            pulumi.set(__self__, "ospf_tag", ospf_tag)
        if weight is not None:
            pulumi.set(__self__, "weight", weight)

    @_builtins.property
    @pulumi.getter
    def type(self) -> _builtins.str:
        """
        Type of action entry
          - Choices: `aggregator`, `asPath`, `atomicAggregate`, `community`, `communityAdditive`, `localPreference`, `metric`, `weight`, `metricType`, `nextHop`, `ompTag`, `ospfTag`, `origin`, `originator`
        """
        return pulumi.get(self, "type")

    @_builtins.property
    @pulumi.getter
    def aggregator(self) -> Optional[_builtins.int]:
        """
        Aggregator, Attribute conditional on `type` being equal to `aggregator`
          - Range: `0`-`4294967295`
        """
        return pulumi.get(self, "aggregator")

    @_builtins.property
    @pulumi.getter(name="aggregatorIpAddress")
    def aggregator_ip_address(self) -> Optional[_builtins.str]:
        """
        IP address, Attribute conditional on `type` being equal to `aggregator`
        """
        return pulumi.get(self, "aggregator_ip_address")

    @_builtins.property
    @pulumi.getter(name="asPathExclude")
    def as_path_exclude(self) -> Optional[_builtins.str]:
        """
        Space separated list of ASN to exclude, Attribute conditional on `type` being equal to `asPath`
        """
        return pulumi.get(self, "as_path_exclude")

    @_builtins.property
    @pulumi.getter(name="asPathPrepend")
    def as_path_prepend(self) -> Optional[_builtins.str]:
        """
        Space separated list of ASN to prepend, Attribute conditional on `type` being equal to `asPath`
        """
        return pulumi.get(self, "as_path_prepend")

    @_builtins.property
    @pulumi.getter(name="atomicAggregate")
    def atomic_aggregate(self) -> Optional[_builtins.bool]:
        """
        Atomic aggregate, Attribute conditional on `type` being equal to `atomicAggregate`
        """
        return pulumi.get(self, "atomic_aggregate")

    @_builtins.property
    @pulumi.getter
    def community(self) -> Optional[_builtins.str]:
        """
        Community value, e.g. `1000:10000` or `internet` or `local-AS`, Attribute conditional on `type` being equal to `community`
        """
        return pulumi.get(self, "community")

    @_builtins.property
    @pulumi.getter(name="communityAdditive")
    def community_additive(self) -> Optional[_builtins.bool]:
        """
        Community additive, Attribute conditional on `type` being equal to `communityAdditive`
        """
        return pulumi.get(self, "community_additive")

    @_builtins.property
    @pulumi.getter(name="communityVariable")
    def community_variable(self) -> Optional[_builtins.str]:
        """
        Community variable, Attribute conditional on `type` being equal to `community`
        """
        return pulumi.get(self, "community_variable")

    @_builtins.property
    @pulumi.getter(name="localPreference")
    def local_preference(self) -> Optional[_builtins.int]:
        """
        Local preference, Attribute conditional on `type` being equal to `localPreference`
          - Range: `0`-`4294967295`
        """
        return pulumi.get(self, "local_preference")

    @_builtins.property
    @pulumi.getter
    def metric(self) -> Optional[_builtins.int]:
        """
        Metric, Attribute conditional on `type` being equal to `metric`
          - Range: `0`-`4294967295`
        """
        return pulumi.get(self, "metric")

    @_builtins.property
    @pulumi.getter(name="metricType")
    def metric_type(self) -> Optional[_builtins.str]:
        """
        Metric type, Attribute conditional on `type` being equal to `metricType`
          - Choices: `type1`, `type2`
        """
        return pulumi.get(self, "metric_type")

    @_builtins.property
    @pulumi.getter(name="nextHop")
    def next_hop(self) -> Optional[_builtins.str]:
        """
        Next hop IP, Attribute conditional on `type` being equal to `nextHop`
        """
        return pulumi.get(self, "next_hop")

    @_builtins.property
    @pulumi.getter(name="ompTag")
    def omp_tag(self) -> Optional[_builtins.int]:
        """
        OMP tag, Attribute conditional on `type` being equal to `ompTag`
          - Range: `0`-`4294967295`
        """
        return pulumi.get(self, "omp_tag")

    @_builtins.property
    @pulumi.getter
    def origin(self) -> Optional[_builtins.str]:
        """
        Origin, Attribute conditional on `type` being equal to `origin`
          - Choices: `igp`, `egp`, `incomplete`
        """
        return pulumi.get(self, "origin")

    @_builtins.property
    @pulumi.getter
    def originator(self) -> Optional[_builtins.str]:
        """
        Originator IP, Attribute conditional on `type` being equal to `originator`
        """
        return pulumi.get(self, "originator")

    @_builtins.property
    @pulumi.getter(name="ospfTag")
    def ospf_tag(self) -> Optional[_builtins.int]:
        """
        OSPF tag, Attribute conditional on `type` being equal to `ospfTag`
          - Range: `0`-`4294967295`
        """
        return pulumi.get(self, "ospf_tag")

    @_builtins.property
    @pulumi.getter
    def weight(self) -> Optional[_builtins.int]:
        """
        Weight, Attribute conditional on `type` being equal to `weight`
          - Range: `0`-`4294967295`
        """
        return pulumi.get(self, "weight")


@pulumi.output_type
class RoutePolicyDefinitionSequenceMatchEntry(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "asPathListId":
            suggest = "as_path_list_id"
        elif key == "asPathListVersion":
            suggest = "as_path_list_version"
        elif key == "communityListId":
            suggest = "community_list_id"
        elif key == "communityListIds":
            suggest = "community_list_ids"
        elif key == "communityListMatchFlag":
            suggest = "community_list_match_flag"
        elif key == "communityListVersion":
            suggest = "community_list_version"
        elif key == "communityListVersions":
            suggest = "community_list_versions"
        elif key == "expandedCommunityListId":
            suggest = "expanded_community_list_id"
        elif key == "expandedCommunityListVariable":
            suggest = "expanded_community_list_variable"
        elif key == "expandedCommunityListVersion":
            suggest = "expanded_community_list_version"
        elif key == "extendedCommunityListId":
            suggest = "extended_community_list_id"
        elif key == "extendedCommunityListVersion":
            suggest = "extended_community_list_version"
        elif key == "localPreference":
            suggest = "local_preference"
        elif key == "nextHopPrefixListId":
            suggest = "next_hop_prefix_list_id"
        elif key == "nextHopPrefixListVersion":
            suggest = "next_hop_prefix_list_version"
        elif key == "ompTag":
            suggest = "omp_tag"
        elif key == "ospfTag":
            suggest = "ospf_tag"
        elif key == "prefixListId":
            suggest = "prefix_list_id"
        elif key == "prefixListVersion":
            suggest = "prefix_list_version"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in RoutePolicyDefinitionSequenceMatchEntry. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        RoutePolicyDefinitionSequenceMatchEntry.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        RoutePolicyDefinitionSequenceMatchEntry.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 type: _builtins.str,
                 as_path_list_id: Optional[_builtins.str] = None,
                 as_path_list_version: Optional[_builtins.int] = None,
                 community_list_id: Optional[_builtins.str] = None,
                 community_list_ids: Optional[Sequence[_builtins.str]] = None,
                 community_list_match_flag: Optional[_builtins.str] = None,
                 community_list_version: Optional[_builtins.int] = None,
                 community_list_versions: Optional[Sequence[_builtins.str]] = None,
                 expanded_community_list_id: Optional[_builtins.str] = None,
                 expanded_community_list_variable: Optional[_builtins.str] = None,
                 expanded_community_list_version: Optional[_builtins.int] = None,
                 extended_community_list_id: Optional[_builtins.str] = None,
                 extended_community_list_version: Optional[_builtins.int] = None,
                 local_preference: Optional[_builtins.int] = None,
                 metric: Optional[_builtins.int] = None,
                 next_hop_prefix_list_id: Optional[_builtins.str] = None,
                 next_hop_prefix_list_version: Optional[_builtins.int] = None,
                 omp_tag: Optional[_builtins.int] = None,
                 origin: Optional[_builtins.str] = None,
                 ospf_tag: Optional[_builtins.int] = None,
                 peer: Optional[_builtins.str] = None,
                 prefix_list_id: Optional[_builtins.str] = None,
                 prefix_list_version: Optional[_builtins.int] = None):
        """
        :param _builtins.str type: Type of match entry
                 - Choices: `address`, `asPath`, `community`, `advancedCommunity`, `expandedCommunity`, `expandedCommunityInline`, `extCommunity`, `localPreference`, `metric`, `nextHop`, `origin`, `peer`, `ompTag`, `ospfTag`
        :param _builtins.str as_path_list_id: AS path list ID, Attribute conditional on `type` being equal to `asPath`
        :param _builtins.int as_path_list_version: AS path list version
        :param _builtins.str community_list_id: Community list ID, Attribute conditional on `type` being equal to `community`
        :param Sequence[_builtins.str] community_list_ids: Community list IDs, Attribute conditional on `type` being equal to `advancedCommunity`
        :param _builtins.str community_list_match_flag: Community list match flag
                 - Choices: `and`, `or`, `exact`
        :param _builtins.int community_list_version: Community list version
        :param Sequence[_builtins.str] community_list_versions: Community list versions
        :param _builtins.str expanded_community_list_id: Expanded community list ID, Attribute conditional on `type` being equal to `expandedCommunity`
        :param _builtins.str expanded_community_list_variable: Expanded community list variable, Attribute conditional on `type` being equal to `expandedCommunityInline`
        :param _builtins.int expanded_community_list_version: Expanded community list version
        :param _builtins.str extended_community_list_id: Extended community list ID, Attribute conditional on `type` being equal to `extCommunity`
        :param _builtins.int extended_community_list_version: Extended community list version
        :param _builtins.int local_preference: Local preference, Attribute conditional on `type` being equal to `localPreference`
                 - Range: `0`-`4294967295`
        :param _builtins.int metric: Metric, Attribute conditional on `type` being equal to `metric`
                 - Range: `0`-`4294967295`
        :param _builtins.str next_hop_prefix_list_id: Next hop prefix list ID, Attribute conditional on `type` being equal to `nextHop`
        :param _builtins.int next_hop_prefix_list_version: Next hop prefix list version
        :param _builtins.int omp_tag: OMP tag, Attribute conditional on `type` being equal to `ompTag`
                 - Range: `0`-`4294967295`
        :param _builtins.str origin: Origin, Attribute conditional on `type` being equal to `origin`
                 - Choices: `igp`, `egp`, `incomplete`
        :param _builtins.int ospf_tag: OSPF tag, Attribute conditional on `type` being equal to `ospfTag`
                 - Range: `0`-`4294967295`
        :param _builtins.str peer: Peer IP, Attribute conditional on `type` being equal to `peer`
        :param _builtins.str prefix_list_id: Prefix list ID, Attribute conditional on `type` being equal to `address`
        :param _builtins.int prefix_list_version: Prefix list version
        """
        pulumi.set(__self__, "type", type)
        if as_path_list_id is not None:
            pulumi.set(__self__, "as_path_list_id", as_path_list_id)
        if as_path_list_version is not None:
            pulumi.set(__self__, "as_path_list_version", as_path_list_version)
        if community_list_id is not None:
            pulumi.set(__self__, "community_list_id", community_list_id)
        if community_list_ids is not None:
            pulumi.set(__self__, "community_list_ids", community_list_ids)
        if community_list_match_flag is not None:
            pulumi.set(__self__, "community_list_match_flag", community_list_match_flag)
        if community_list_version is not None:
            pulumi.set(__self__, "community_list_version", community_list_version)
        if community_list_versions is not None:
            pulumi.set(__self__, "community_list_versions", community_list_versions)
        if expanded_community_list_id is not None:
            pulumi.set(__self__, "expanded_community_list_id", expanded_community_list_id)
        if expanded_community_list_variable is not None:
            pulumi.set(__self__, "expanded_community_list_variable", expanded_community_list_variable)
        if expanded_community_list_version is not None:
            pulumi.set(__self__, "expanded_community_list_version", expanded_community_list_version)
        if extended_community_list_id is not None:
            pulumi.set(__self__, "extended_community_list_id", extended_community_list_id)
        if extended_community_list_version is not None:
            pulumi.set(__self__, "extended_community_list_version", extended_community_list_version)
        if local_preference is not None:
            pulumi.set(__self__, "local_preference", local_preference)
        if metric is not None:
            pulumi.set(__self__, "metric", metric)
        if next_hop_prefix_list_id is not None:
            pulumi.set(__self__, "next_hop_prefix_list_id", next_hop_prefix_list_id)
        if next_hop_prefix_list_version is not None:
            pulumi.set(__self__, "next_hop_prefix_list_version", next_hop_prefix_list_version)
        if omp_tag is not None:
            pulumi.set(__self__, "omp_tag", omp_tag)
        if origin is not None:
            pulumi.set(__self__, "origin", origin)
        if ospf_tag is not None:
            pulumi.set(__self__, "ospf_tag", ospf_tag)
        if peer is not None:
            pulumi.set(__self__, "peer", peer)
        if prefix_list_id is not None:
            pulumi.set(__self__, "prefix_list_id", prefix_list_id)
        if prefix_list_version is not None:
            pulumi.set(__self__, "prefix_list_version", prefix_list_version)

    @_builtins.property
    @pulumi.getter
    def type(self) -> _builtins.str:
        """
        Type of match entry
          - Choices: `address`, `asPath`, `community`, `advancedCommunity`, `expandedCommunity`, `expandedCommunityInline`, `extCommunity`, `localPreference`, `metric`, `nextHop`, `origin`, `peer`, `ompTag`, `ospfTag`
        """
        return pulumi.get(self, "type")

    @_builtins.property
    @pulumi.getter(name="asPathListId")
    def as_path_list_id(self) -> Optional[_builtins.str]:
        """
        AS path list ID, Attribute conditional on `type` being equal to `asPath`
        """
        return pulumi.get(self, "as_path_list_id")

    @_builtins.property
    @pulumi.getter(name="asPathListVersion")
    def as_path_list_version(self) -> Optional[_builtins.int]:
        """
        AS path list version
        """
        return pulumi.get(self, "as_path_list_version")

    @_builtins.property
    @pulumi.getter(name="communityListId")
    def community_list_id(self) -> Optional[_builtins.str]:
        """
        Community list ID, Attribute conditional on `type` being equal to `community`
        """
        return pulumi.get(self, "community_list_id")

    @_builtins.property
    @pulumi.getter(name="communityListIds")
    def community_list_ids(self) -> Optional[Sequence[_builtins.str]]:
        """
        Community list IDs, Attribute conditional on `type` being equal to `advancedCommunity`
        """
        return pulumi.get(self, "community_list_ids")

    @_builtins.property
    @pulumi.getter(name="communityListMatchFlag")
    def community_list_match_flag(self) -> Optional[_builtins.str]:
        """
        Community list match flag
          - Choices: `and`, `or`, `exact`
        """
        return pulumi.get(self, "community_list_match_flag")

    @_builtins.property
    @pulumi.getter(name="communityListVersion")
    def community_list_version(self) -> Optional[_builtins.int]:
        """
        Community list version
        """
        return pulumi.get(self, "community_list_version")

    @_builtins.property
    @pulumi.getter(name="communityListVersions")
    def community_list_versions(self) -> Optional[Sequence[_builtins.str]]:
        """
        Community list versions
        """
        return pulumi.get(self, "community_list_versions")

    @_builtins.property
    @pulumi.getter(name="expandedCommunityListId")
    def expanded_community_list_id(self) -> Optional[_builtins.str]:
        """
        Expanded community list ID, Attribute conditional on `type` being equal to `expandedCommunity`
        """
        return pulumi.get(self, "expanded_community_list_id")

    @_builtins.property
    @pulumi.getter(name="expandedCommunityListVariable")
    def expanded_community_list_variable(self) -> Optional[_builtins.str]:
        """
        Expanded community list variable, Attribute conditional on `type` being equal to `expandedCommunityInline`
        """
        return pulumi.get(self, "expanded_community_list_variable")

    @_builtins.property
    @pulumi.getter(name="expandedCommunityListVersion")
    def expanded_community_list_version(self) -> Optional[_builtins.int]:
        """
        Expanded community list version
        """
        return pulumi.get(self, "expanded_community_list_version")

    @_builtins.property
    @pulumi.getter(name="extendedCommunityListId")
    def extended_community_list_id(self) -> Optional[_builtins.str]:
        """
        Extended community list ID, Attribute conditional on `type` being equal to `extCommunity`
        """
        return pulumi.get(self, "extended_community_list_id")

    @_builtins.property
    @pulumi.getter(name="extendedCommunityListVersion")
    def extended_community_list_version(self) -> Optional[_builtins.int]:
        """
        Extended community list version
        """
        return pulumi.get(self, "extended_community_list_version")

    @_builtins.property
    @pulumi.getter(name="localPreference")
    def local_preference(self) -> Optional[_builtins.int]:
        """
        Local preference, Attribute conditional on `type` being equal to `localPreference`
          - Range: `0`-`4294967295`
        """
        return pulumi.get(self, "local_preference")

    @_builtins.property
    @pulumi.getter
    def metric(self) -> Optional[_builtins.int]:
        """
        Metric, Attribute conditional on `type` being equal to `metric`
          - Range: `0`-`4294967295`
        """
        return pulumi.get(self, "metric")

    @_builtins.property
    @pulumi.getter(name="nextHopPrefixListId")
    def next_hop_prefix_list_id(self) -> Optional[_builtins.str]:
        """
        Next hop prefix list ID, Attribute conditional on `type` being equal to `nextHop`
        """
        return pulumi.get(self, "next_hop_prefix_list_id")

    @_builtins.property
    @pulumi.getter(name="nextHopPrefixListVersion")
    def next_hop_prefix_list_version(self) -> Optional[_builtins.int]:
        """
        Next hop prefix list version
        """
        return pulumi.get(self, "next_hop_prefix_list_version")

    @_builtins.property
    @pulumi.getter(name="ompTag")
    def omp_tag(self) -> Optional[_builtins.int]:
        """
        OMP tag, Attribute conditional on `type` being equal to `ompTag`
          - Range: `0`-`4294967295`
        """
        return pulumi.get(self, "omp_tag")

    @_builtins.property
    @pulumi.getter
    def origin(self) -> Optional[_builtins.str]:
        """
        Origin, Attribute conditional on `type` being equal to `origin`
          - Choices: `igp`, `egp`, `incomplete`
        """
        return pulumi.get(self, "origin")

    @_builtins.property
    @pulumi.getter(name="ospfTag")
    def ospf_tag(self) -> Optional[_builtins.int]:
        """
        OSPF tag, Attribute conditional on `type` being equal to `ospfTag`
          - Range: `0`-`4294967295`
        """
        return pulumi.get(self, "ospf_tag")

    @_builtins.property
    @pulumi.getter
    def peer(self) -> Optional[_builtins.str]:
        """
        Peer IP, Attribute conditional on `type` being equal to `peer`
        """
        return pulumi.get(self, "peer")

    @_builtins.property
    @pulumi.getter(name="prefixListId")
    def prefix_list_id(self) -> Optional[_builtins.str]:
        """
        Prefix list ID, Attribute conditional on `type` being equal to `address`
        """
        return pulumi.get(self, "prefix_list_id")

    @_builtins.property
    @pulumi.getter(name="prefixListVersion")
    def prefix_list_version(self) -> Optional[_builtins.int]:
        """
        Prefix list version
        """
        return pulumi.get(self, "prefix_list_version")


@pulumi.output_type
class RuleSetPolicyDefinitionRule(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "destinationDataFqdnPrefixListId":
            suggest = "destination_data_fqdn_prefix_list_id"
        elif key == "destinationDataFqdnPrefixListVersion":
            suggest = "destination_data_fqdn_prefix_list_version"
        elif key == "destinationDataIpv4PrefixListId":
            suggest = "destination_data_ipv4_prefix_list_id"
        elif key == "destinationDataIpv4PrefixListVersion":
            suggest = "destination_data_ipv4_prefix_list_version"
        elif key == "destinationFqdn":
            suggest = "destination_fqdn"
        elif key == "destinationGeoLocation":
            suggest = "destination_geo_location"
        elif key == "destinationGeoLocationListId":
            suggest = "destination_geo_location_list_id"
        elif key == "destinationGeoLocationListVersion":
            suggest = "destination_geo_location_list_version"
        elif key == "destinationIpv4Prefix":
            suggest = "destination_ipv4_prefix"
        elif key == "destinationIpv4PrefixVariable":
            suggest = "destination_ipv4_prefix_variable"
        elif key == "destinationObjectGroupId":
            suggest = "destination_object_group_id"
        elif key == "destinationObjectGroupVersion":
            suggest = "destination_object_group_version"
        elif key == "destinationPort":
            suggest = "destination_port"
        elif key == "destinationPortListId":
            suggest = "destination_port_list_id"
        elif key == "destinationPortListVersion":
            suggest = "destination_port_list_version"
        elif key == "protocolListId":
            suggest = "protocol_list_id"
        elif key == "protocolListVersion":
            suggest = "protocol_list_version"
        elif key == "protocolNumber":
            suggest = "protocol_number"
        elif key == "sourceDataFqdnPrefixListId":
            suggest = "source_data_fqdn_prefix_list_id"
        elif key == "sourceDataFqdnPrefixListVersion":
            suggest = "source_data_fqdn_prefix_list_version"
        elif key == "sourceDataIpv4PrefixListId":
            suggest = "source_data_ipv4_prefix_list_id"
        elif key == "sourceDataIpv4PrefixListVersion":
            suggest = "source_data_ipv4_prefix_list_version"
        elif key == "sourceFqdn":
            suggest = "source_fqdn"
        elif key == "sourceGeoLocation":
            suggest = "source_geo_location"
        elif key == "sourceGeoLocationListId":
            suggest = "source_geo_location_list_id"
        elif key == "sourceGeoLocationListVersion":
            suggest = "source_geo_location_list_version"
        elif key == "sourceIpv4Prefix":
            suggest = "source_ipv4_prefix"
        elif key == "sourceIpv4PrefixVariable":
            suggest = "source_ipv4_prefix_variable"
        elif key == "sourceObjectGroupId":
            suggest = "source_object_group_id"
        elif key == "sourceObjectGroupVersion":
            suggest = "source_object_group_version"
        elif key == "sourcePort":
            suggest = "source_port"
        elif key == "sourcePortListId":
            suggest = "source_port_list_id"
        elif key == "sourcePortListVersion":
            suggest = "source_port_list_version"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in RuleSetPolicyDefinitionRule. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        RuleSetPolicyDefinitionRule.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        RuleSetPolicyDefinitionRule.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 name: _builtins.str,
                 order: _builtins.int,
                 destination_data_fqdn_prefix_list_id: Optional[_builtins.str] = None,
                 destination_data_fqdn_prefix_list_version: Optional[_builtins.int] = None,
                 destination_data_ipv4_prefix_list_id: Optional[_builtins.str] = None,
                 destination_data_ipv4_prefix_list_version: Optional[_builtins.int] = None,
                 destination_fqdn: Optional[_builtins.str] = None,
                 destination_geo_location: Optional[_builtins.str] = None,
                 destination_geo_location_list_id: Optional[_builtins.str] = None,
                 destination_geo_location_list_version: Optional[_builtins.int] = None,
                 destination_ipv4_prefix: Optional[_builtins.str] = None,
                 destination_ipv4_prefix_variable: Optional[_builtins.str] = None,
                 destination_object_group_id: Optional[_builtins.str] = None,
                 destination_object_group_version: Optional[_builtins.int] = None,
                 destination_port: Optional[_builtins.str] = None,
                 destination_port_list_id: Optional[_builtins.str] = None,
                 destination_port_list_version: Optional[_builtins.int] = None,
                 protocol: Optional[_builtins.str] = None,
                 protocol_list_id: Optional[_builtins.str] = None,
                 protocol_list_version: Optional[_builtins.int] = None,
                 protocol_number: Optional[_builtins.int] = None,
                 source_data_fqdn_prefix_list_id: Optional[_builtins.str] = None,
                 source_data_fqdn_prefix_list_version: Optional[_builtins.int] = None,
                 source_data_ipv4_prefix_list_id: Optional[_builtins.str] = None,
                 source_data_ipv4_prefix_list_version: Optional[_builtins.int] = None,
                 source_fqdn: Optional[_builtins.str] = None,
                 source_geo_location: Optional[_builtins.str] = None,
                 source_geo_location_list_id: Optional[_builtins.str] = None,
                 source_geo_location_list_version: Optional[_builtins.int] = None,
                 source_ipv4_prefix: Optional[_builtins.str] = None,
                 source_ipv4_prefix_variable: Optional[_builtins.str] = None,
                 source_object_group_id: Optional[_builtins.str] = None,
                 source_object_group_version: Optional[_builtins.int] = None,
                 source_port: Optional[_builtins.str] = None,
                 source_port_list_id: Optional[_builtins.str] = None,
                 source_port_list_version: Optional[_builtins.int] = None):
        """
        :param _builtins.str name: The name of the rule
        :param _builtins.int order: The order of the rule
        :param _builtins.str destination_data_fqdn_prefix_list_id: Destination data FQDN prefix list ID
        :param _builtins.int destination_data_fqdn_prefix_list_version: Destination data FQDN prefix list version
        :param _builtins.str destination_data_ipv4_prefix_list_id: Destination data IPv4 prefix list ID
        :param _builtins.int destination_data_ipv4_prefix_list_version: Destination data IPv4 prefix list version
        :param _builtins.str destination_fqdn: Destination fully qualified domain name
        :param _builtins.str destination_geo_location: Destination geo location
        :param _builtins.str destination_geo_location_list_id: Destination geo location list ID
        :param _builtins.int destination_geo_location_list_version: Destination geo location list version
        :param _builtins.str destination_ipv4_prefix: Destination IPv4 prefix
        :param _builtins.str destination_ipv4_prefix_variable: Destination IPv4 prefix variable name
        :param _builtins.str destination_object_group_id: Destination object group ID
        :param _builtins.int destination_object_group_version: Destination object group version
        :param _builtins.str destination_port: Destination port or range of ports
        :param _builtins.str destination_port_list_id: Destination port list ID
        :param _builtins.int destination_port_list_version: Destination port list version
        :param _builtins.str protocol: Protocol name
        :param _builtins.str protocol_list_id: Protocol list ID
        :param _builtins.int protocol_list_version: Protocol list version
        :param _builtins.int protocol_number: Protocol number
                 - Range: `0`-`255`
        :param _builtins.str source_data_fqdn_prefix_list_id: Source data FQDN prefix list ID
        :param _builtins.int source_data_fqdn_prefix_list_version: Source data FQDN prefix list version
        :param _builtins.str source_data_ipv4_prefix_list_id: Source data IPv4 prefix list ID
        :param _builtins.int source_data_ipv4_prefix_list_version: Source data IPv4 prefix list version
        :param _builtins.str source_fqdn: Source fully qualified domain name
        :param _builtins.str source_geo_location: Source geo location
        :param _builtins.str source_geo_location_list_id: Source geo location list ID
        :param _builtins.int source_geo_location_list_version: Source geo location list version
        :param _builtins.str source_ipv4_prefix: Source IPv4 prefix
        :param _builtins.str source_ipv4_prefix_variable: Source IPv4 prefix variable name
        :param _builtins.str source_object_group_id: Source object group ID
        :param _builtins.int source_object_group_version: Source object group version
        :param _builtins.str source_port: Source port or range of ports
        :param _builtins.str source_port_list_id: Source port list ID
        :param _builtins.int source_port_list_version: Source port list version
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "order", order)
        if destination_data_fqdn_prefix_list_id is not None:
            pulumi.set(__self__, "destination_data_fqdn_prefix_list_id", destination_data_fqdn_prefix_list_id)
        if destination_data_fqdn_prefix_list_version is not None:
            pulumi.set(__self__, "destination_data_fqdn_prefix_list_version", destination_data_fqdn_prefix_list_version)
        if destination_data_ipv4_prefix_list_id is not None:
            pulumi.set(__self__, "destination_data_ipv4_prefix_list_id", destination_data_ipv4_prefix_list_id)
        if destination_data_ipv4_prefix_list_version is not None:
            pulumi.set(__self__, "destination_data_ipv4_prefix_list_version", destination_data_ipv4_prefix_list_version)
        if destination_fqdn is not None:
            pulumi.set(__self__, "destination_fqdn", destination_fqdn)
        if destination_geo_location is not None:
            pulumi.set(__self__, "destination_geo_location", destination_geo_location)
        if destination_geo_location_list_id is not None:
            pulumi.set(__self__, "destination_geo_location_list_id", destination_geo_location_list_id)
        if destination_geo_location_list_version is not None:
            pulumi.set(__self__, "destination_geo_location_list_version", destination_geo_location_list_version)
        if destination_ipv4_prefix is not None:
            pulumi.set(__self__, "destination_ipv4_prefix", destination_ipv4_prefix)
        if destination_ipv4_prefix_variable is not None:
            pulumi.set(__self__, "destination_ipv4_prefix_variable", destination_ipv4_prefix_variable)
        if destination_object_group_id is not None:
            pulumi.set(__self__, "destination_object_group_id", destination_object_group_id)
        if destination_object_group_version is not None:
            pulumi.set(__self__, "destination_object_group_version", destination_object_group_version)
        if destination_port is not None:
            pulumi.set(__self__, "destination_port", destination_port)
        if destination_port_list_id is not None:
            pulumi.set(__self__, "destination_port_list_id", destination_port_list_id)
        if destination_port_list_version is not None:
            pulumi.set(__self__, "destination_port_list_version", destination_port_list_version)
        if protocol is not None:
            pulumi.set(__self__, "protocol", protocol)
        if protocol_list_id is not None:
            pulumi.set(__self__, "protocol_list_id", protocol_list_id)
        if protocol_list_version is not None:
            pulumi.set(__self__, "protocol_list_version", protocol_list_version)
        if protocol_number is not None:
            pulumi.set(__self__, "protocol_number", protocol_number)
        if source_data_fqdn_prefix_list_id is not None:
            pulumi.set(__self__, "source_data_fqdn_prefix_list_id", source_data_fqdn_prefix_list_id)
        if source_data_fqdn_prefix_list_version is not None:
            pulumi.set(__self__, "source_data_fqdn_prefix_list_version", source_data_fqdn_prefix_list_version)
        if source_data_ipv4_prefix_list_id is not None:
            pulumi.set(__self__, "source_data_ipv4_prefix_list_id", source_data_ipv4_prefix_list_id)
        if source_data_ipv4_prefix_list_version is not None:
            pulumi.set(__self__, "source_data_ipv4_prefix_list_version", source_data_ipv4_prefix_list_version)
        if source_fqdn is not None:
            pulumi.set(__self__, "source_fqdn", source_fqdn)
        if source_geo_location is not None:
            pulumi.set(__self__, "source_geo_location", source_geo_location)
        if source_geo_location_list_id is not None:
            pulumi.set(__self__, "source_geo_location_list_id", source_geo_location_list_id)
        if source_geo_location_list_version is not None:
            pulumi.set(__self__, "source_geo_location_list_version", source_geo_location_list_version)
        if source_ipv4_prefix is not None:
            pulumi.set(__self__, "source_ipv4_prefix", source_ipv4_prefix)
        if source_ipv4_prefix_variable is not None:
            pulumi.set(__self__, "source_ipv4_prefix_variable", source_ipv4_prefix_variable)
        if source_object_group_id is not None:
            pulumi.set(__self__, "source_object_group_id", source_object_group_id)
        if source_object_group_version is not None:
            pulumi.set(__self__, "source_object_group_version", source_object_group_version)
        if source_port is not None:
            pulumi.set(__self__, "source_port", source_port)
        if source_port_list_id is not None:
            pulumi.set(__self__, "source_port_list_id", source_port_list_id)
        if source_port_list_version is not None:
            pulumi.set(__self__, "source_port_list_version", source_port_list_version)

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        """
        The name of the rule
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def order(self) -> _builtins.int:
        """
        The order of the rule
        """
        return pulumi.get(self, "order")

    @_builtins.property
    @pulumi.getter(name="destinationDataFqdnPrefixListId")
    def destination_data_fqdn_prefix_list_id(self) -> Optional[_builtins.str]:
        """
        Destination data FQDN prefix list ID
        """
        return pulumi.get(self, "destination_data_fqdn_prefix_list_id")

    @_builtins.property
    @pulumi.getter(name="destinationDataFqdnPrefixListVersion")
    def destination_data_fqdn_prefix_list_version(self) -> Optional[_builtins.int]:
        """
        Destination data FQDN prefix list version
        """
        return pulumi.get(self, "destination_data_fqdn_prefix_list_version")

    @_builtins.property
    @pulumi.getter(name="destinationDataIpv4PrefixListId")
    def destination_data_ipv4_prefix_list_id(self) -> Optional[_builtins.str]:
        """
        Destination data IPv4 prefix list ID
        """
        return pulumi.get(self, "destination_data_ipv4_prefix_list_id")

    @_builtins.property
    @pulumi.getter(name="destinationDataIpv4PrefixListVersion")
    def destination_data_ipv4_prefix_list_version(self) -> Optional[_builtins.int]:
        """
        Destination data IPv4 prefix list version
        """
        return pulumi.get(self, "destination_data_ipv4_prefix_list_version")

    @_builtins.property
    @pulumi.getter(name="destinationFqdn")
    def destination_fqdn(self) -> Optional[_builtins.str]:
        """
        Destination fully qualified domain name
        """
        return pulumi.get(self, "destination_fqdn")

    @_builtins.property
    @pulumi.getter(name="destinationGeoLocation")
    def destination_geo_location(self) -> Optional[_builtins.str]:
        """
        Destination geo location
        """
        return pulumi.get(self, "destination_geo_location")

    @_builtins.property
    @pulumi.getter(name="destinationGeoLocationListId")
    def destination_geo_location_list_id(self) -> Optional[_builtins.str]:
        """
        Destination geo location list ID
        """
        return pulumi.get(self, "destination_geo_location_list_id")

    @_builtins.property
    @pulumi.getter(name="destinationGeoLocationListVersion")
    def destination_geo_location_list_version(self) -> Optional[_builtins.int]:
        """
        Destination geo location list version
        """
        return pulumi.get(self, "destination_geo_location_list_version")

    @_builtins.property
    @pulumi.getter(name="destinationIpv4Prefix")
    def destination_ipv4_prefix(self) -> Optional[_builtins.str]:
        """
        Destination IPv4 prefix
        """
        return pulumi.get(self, "destination_ipv4_prefix")

    @_builtins.property
    @pulumi.getter(name="destinationIpv4PrefixVariable")
    def destination_ipv4_prefix_variable(self) -> Optional[_builtins.str]:
        """
        Destination IPv4 prefix variable name
        """
        return pulumi.get(self, "destination_ipv4_prefix_variable")

    @_builtins.property
    @pulumi.getter(name="destinationObjectGroupId")
    def destination_object_group_id(self) -> Optional[_builtins.str]:
        """
        Destination object group ID
        """
        return pulumi.get(self, "destination_object_group_id")

    @_builtins.property
    @pulumi.getter(name="destinationObjectGroupVersion")
    def destination_object_group_version(self) -> Optional[_builtins.int]:
        """
        Destination object group version
        """
        return pulumi.get(self, "destination_object_group_version")

    @_builtins.property
    @pulumi.getter(name="destinationPort")
    def destination_port(self) -> Optional[_builtins.str]:
        """
        Destination port or range of ports
        """
        return pulumi.get(self, "destination_port")

    @_builtins.property
    @pulumi.getter(name="destinationPortListId")
    def destination_port_list_id(self) -> Optional[_builtins.str]:
        """
        Destination port list ID
        """
        return pulumi.get(self, "destination_port_list_id")

    @_builtins.property
    @pulumi.getter(name="destinationPortListVersion")
    def destination_port_list_version(self) -> Optional[_builtins.int]:
        """
        Destination port list version
        """
        return pulumi.get(self, "destination_port_list_version")

    @_builtins.property
    @pulumi.getter
    def protocol(self) -> Optional[_builtins.str]:
        """
        Protocol name
        """
        return pulumi.get(self, "protocol")

    @_builtins.property
    @pulumi.getter(name="protocolListId")
    def protocol_list_id(self) -> Optional[_builtins.str]:
        """
        Protocol list ID
        """
        return pulumi.get(self, "protocol_list_id")

    @_builtins.property
    @pulumi.getter(name="protocolListVersion")
    def protocol_list_version(self) -> Optional[_builtins.int]:
        """
        Protocol list version
        """
        return pulumi.get(self, "protocol_list_version")

    @_builtins.property
    @pulumi.getter(name="protocolNumber")
    def protocol_number(self) -> Optional[_builtins.int]:
        """
        Protocol number
          - Range: `0`-`255`
        """
        return pulumi.get(self, "protocol_number")

    @_builtins.property
    @pulumi.getter(name="sourceDataFqdnPrefixListId")
    def source_data_fqdn_prefix_list_id(self) -> Optional[_builtins.str]:
        """
        Source data FQDN prefix list ID
        """
        return pulumi.get(self, "source_data_fqdn_prefix_list_id")

    @_builtins.property
    @pulumi.getter(name="sourceDataFqdnPrefixListVersion")
    def source_data_fqdn_prefix_list_version(self) -> Optional[_builtins.int]:
        """
        Source data FQDN prefix list version
        """
        return pulumi.get(self, "source_data_fqdn_prefix_list_version")

    @_builtins.property
    @pulumi.getter(name="sourceDataIpv4PrefixListId")
    def source_data_ipv4_prefix_list_id(self) -> Optional[_builtins.str]:
        """
        Source data IPv4 prefix list ID
        """
        return pulumi.get(self, "source_data_ipv4_prefix_list_id")

    @_builtins.property
    @pulumi.getter(name="sourceDataIpv4PrefixListVersion")
    def source_data_ipv4_prefix_list_version(self) -> Optional[_builtins.int]:
        """
        Source data IPv4 prefix list version
        """
        return pulumi.get(self, "source_data_ipv4_prefix_list_version")

    @_builtins.property
    @pulumi.getter(name="sourceFqdn")
    def source_fqdn(self) -> Optional[_builtins.str]:
        """
        Source fully qualified domain name
        """
        return pulumi.get(self, "source_fqdn")

    @_builtins.property
    @pulumi.getter(name="sourceGeoLocation")
    def source_geo_location(self) -> Optional[_builtins.str]:
        """
        Source geo location
        """
        return pulumi.get(self, "source_geo_location")

    @_builtins.property
    @pulumi.getter(name="sourceGeoLocationListId")
    def source_geo_location_list_id(self) -> Optional[_builtins.str]:
        """
        Source geo location list ID
        """
        return pulumi.get(self, "source_geo_location_list_id")

    @_builtins.property
    @pulumi.getter(name="sourceGeoLocationListVersion")
    def source_geo_location_list_version(self) -> Optional[_builtins.int]:
        """
        Source geo location list version
        """
        return pulumi.get(self, "source_geo_location_list_version")

    @_builtins.property
    @pulumi.getter(name="sourceIpv4Prefix")
    def source_ipv4_prefix(self) -> Optional[_builtins.str]:
        """
        Source IPv4 prefix
        """
        return pulumi.get(self, "source_ipv4_prefix")

    @_builtins.property
    @pulumi.getter(name="sourceIpv4PrefixVariable")
    def source_ipv4_prefix_variable(self) -> Optional[_builtins.str]:
        """
        Source IPv4 prefix variable name
        """
        return pulumi.get(self, "source_ipv4_prefix_variable")

    @_builtins.property
    @pulumi.getter(name="sourceObjectGroupId")
    def source_object_group_id(self) -> Optional[_builtins.str]:
        """
        Source object group ID
        """
        return pulumi.get(self, "source_object_group_id")

    @_builtins.property
    @pulumi.getter(name="sourceObjectGroupVersion")
    def source_object_group_version(self) -> Optional[_builtins.int]:
        """
        Source object group version
        """
        return pulumi.get(self, "source_object_group_version")

    @_builtins.property
    @pulumi.getter(name="sourcePort")
    def source_port(self) -> Optional[_builtins.str]:
        """
        Source port or range of ports
        """
        return pulumi.get(self, "source_port")

    @_builtins.property
    @pulumi.getter(name="sourcePortListId")
    def source_port_list_id(self) -> Optional[_builtins.str]:
        """
        Source port list ID
        """
        return pulumi.get(self, "source_port_list_id")

    @_builtins.property
    @pulumi.getter(name="sourcePortListVersion")
    def source_port_list_version(self) -> Optional[_builtins.int]:
        """
        Source port list version
        """
        return pulumi.get(self, "source_port_list_version")


@pulumi.output_type
class SecurityAppHostingFeatureTemplateVirtualApplication(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "applicationType":
            suggest = "application_type"
        elif key == "dataGatewayIp":
            suggest = "data_gateway_ip"
        elif key == "dataGatewayIpVariable":
            suggest = "data_gateway_ip_variable"
        elif key == "dataServiceIp":
            suggest = "data_service_ip"
        elif key == "dataServiceIpVariable":
            suggest = "data_service_ip_variable"
        elif key == "databaseUrl":
            suggest = "database_url"
        elif key == "databaseUrlVariable":
            suggest = "database_url_variable"
        elif key == "instanceId":
            suggest = "instance_id"
        elif key == "natVariable":
            suggest = "nat_variable"
        elif key == "resourceProfile":
            suggest = "resource_profile"
        elif key == "resourceProfileVariable":
            suggest = "resource_profile_variable"
        elif key == "serviceGatewayIp":
            suggest = "service_gateway_ip"
        elif key == "serviceGatewayIpVariable":
            suggest = "service_gateway_ip_variable"
        elif key == "serviceIp":
            suggest = "service_ip"
        elif key == "serviceIpVariable":
            suggest = "service_ip_variable"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SecurityAppHostingFeatureTemplateVirtualApplication. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SecurityAppHostingFeatureTemplateVirtualApplication.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SecurityAppHostingFeatureTemplateVirtualApplication.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 application_type: Optional[_builtins.str] = None,
                 data_gateway_ip: Optional[_builtins.str] = None,
                 data_gateway_ip_variable: Optional[_builtins.str] = None,
                 data_service_ip: Optional[_builtins.str] = None,
                 data_service_ip_variable: Optional[_builtins.str] = None,
                 database_url: Optional[_builtins.bool] = None,
                 database_url_variable: Optional[_builtins.str] = None,
                 instance_id: Optional[_builtins.str] = None,
                 nat: Optional[_builtins.bool] = None,
                 nat_variable: Optional[_builtins.str] = None,
                 optional: Optional[_builtins.bool] = None,
                 resource_profile: Optional[_builtins.str] = None,
                 resource_profile_variable: Optional[_builtins.str] = None,
                 service_gateway_ip: Optional[_builtins.str] = None,
                 service_gateway_ip_variable: Optional[_builtins.str] = None,
                 service_ip: Optional[_builtins.str] = None,
                 service_ip_variable: Optional[_builtins.str] = None):
        """
        :param _builtins.str application_type: List of Virtual applications
                 - Choices: `utd`
                 - Default value: `utd`
        :param _builtins.str data_gateway_ip: Data Gateway IP 
                 - Default value: `192.0.2.1/24`
        :param _builtins.str data_gateway_ip_variable: Variable name
        :param _builtins.str data_service_ip: Data Service IP
                 - Default value: `192.0.2.2/24`
        :param _builtins.str data_service_ip_variable: Variable name
        :param _builtins.bool database_url: Download URL Database on Device
                 - Default value: `false`
        :param _builtins.str database_url_variable: Variable name
        :param _builtins.str instance_id: List of Virtual applications
                 - Default value: `1`
        :param _builtins.bool nat: Is Nat enabled
                 - Default value: `true`
        :param _builtins.str nat_variable: Variable name
        :param _builtins.bool optional: Indicates if list item is considered optional.
        :param _builtins.str resource_profile: Resource Profile
                 - Choices: `low`, `medium`, `high`
                 - Default value: `low`
        :param _builtins.str resource_profile_variable: Variable name
        :param _builtins.str service_gateway_ip: Service Gateway IP (Management interface)
        :param _builtins.str service_gateway_ip_variable: Variable name
        :param _builtins.str service_ip: Service IP
        :param _builtins.str service_ip_variable: Variable name
        """
        if application_type is not None:
            pulumi.set(__self__, "application_type", application_type)
        if data_gateway_ip is not None:
            pulumi.set(__self__, "data_gateway_ip", data_gateway_ip)
        if data_gateway_ip_variable is not None:
            pulumi.set(__self__, "data_gateway_ip_variable", data_gateway_ip_variable)
        if data_service_ip is not None:
            pulumi.set(__self__, "data_service_ip", data_service_ip)
        if data_service_ip_variable is not None:
            pulumi.set(__self__, "data_service_ip_variable", data_service_ip_variable)
        if database_url is not None:
            pulumi.set(__self__, "database_url", database_url)
        if database_url_variable is not None:
            pulumi.set(__self__, "database_url_variable", database_url_variable)
        if instance_id is not None:
            pulumi.set(__self__, "instance_id", instance_id)
        if nat is not None:
            pulumi.set(__self__, "nat", nat)
        if nat_variable is not None:
            pulumi.set(__self__, "nat_variable", nat_variable)
        if optional is not None:
            pulumi.set(__self__, "optional", optional)
        if resource_profile is not None:
            pulumi.set(__self__, "resource_profile", resource_profile)
        if resource_profile_variable is not None:
            pulumi.set(__self__, "resource_profile_variable", resource_profile_variable)
        if service_gateway_ip is not None:
            pulumi.set(__self__, "service_gateway_ip", service_gateway_ip)
        if service_gateway_ip_variable is not None:
            pulumi.set(__self__, "service_gateway_ip_variable", service_gateway_ip_variable)
        if service_ip is not None:
            pulumi.set(__self__, "service_ip", service_ip)
        if service_ip_variable is not None:
            pulumi.set(__self__, "service_ip_variable", service_ip_variable)

    @_builtins.property
    @pulumi.getter(name="applicationType")
    def application_type(self) -> Optional[_builtins.str]:
        """
        List of Virtual applications
          - Choices: `utd`
          - Default value: `utd`
        """
        return pulumi.get(self, "application_type")

    @_builtins.property
    @pulumi.getter(name="dataGatewayIp")
    def data_gateway_ip(self) -> Optional[_builtins.str]:
        """
        Data Gateway IP 
          - Default value: `192.0.2.1/24`
        """
        return pulumi.get(self, "data_gateway_ip")

    @_builtins.property
    @pulumi.getter(name="dataGatewayIpVariable")
    def data_gateway_ip_variable(self) -> Optional[_builtins.str]:
        """
        Variable name
        """
        return pulumi.get(self, "data_gateway_ip_variable")

    @_builtins.property
    @pulumi.getter(name="dataServiceIp")
    def data_service_ip(self) -> Optional[_builtins.str]:
        """
        Data Service IP
          - Default value: `192.0.2.2/24`
        """
        return pulumi.get(self, "data_service_ip")

    @_builtins.property
    @pulumi.getter(name="dataServiceIpVariable")
    def data_service_ip_variable(self) -> Optional[_builtins.str]:
        """
        Variable name
        """
        return pulumi.get(self, "data_service_ip_variable")

    @_builtins.property
    @pulumi.getter(name="databaseUrl")
    def database_url(self) -> Optional[_builtins.bool]:
        """
        Download URL Database on Device
          - Default value: `false`
        """
        return pulumi.get(self, "database_url")

    @_builtins.property
    @pulumi.getter(name="databaseUrlVariable")
    def database_url_variable(self) -> Optional[_builtins.str]:
        """
        Variable name
        """
        return pulumi.get(self, "database_url_variable")

    @_builtins.property
    @pulumi.getter(name="instanceId")
    def instance_id(self) -> Optional[_builtins.str]:
        """
        List of Virtual applications
          - Default value: `1`
        """
        return pulumi.get(self, "instance_id")

    @_builtins.property
    @pulumi.getter
    def nat(self) -> Optional[_builtins.bool]:
        """
        Is Nat enabled
          - Default value: `true`
        """
        return pulumi.get(self, "nat")

    @_builtins.property
    @pulumi.getter(name="natVariable")
    def nat_variable(self) -> Optional[_builtins.str]:
        """
        Variable name
        """
        return pulumi.get(self, "nat_variable")

    @_builtins.property
    @pulumi.getter
    def optional(self) -> Optional[_builtins.bool]:
        """
        Indicates if list item is considered optional.
        """
        return pulumi.get(self, "optional")

    @_builtins.property
    @pulumi.getter(name="resourceProfile")
    def resource_profile(self) -> Optional[_builtins.str]:
        """
        Resource Profile
          - Choices: `low`, `medium`, `high`
          - Default value: `low`
        """
        return pulumi.get(self, "resource_profile")

    @_builtins.property
    @pulumi.getter(name="resourceProfileVariable")
    def resource_profile_variable(self) -> Optional[_builtins.str]:
        """
        Variable name
        """
        return pulumi.get(self, "resource_profile_variable")

    @_builtins.property
    @pulumi.getter(name="serviceGatewayIp")
    def service_gateway_ip(self) -> Optional[_builtins.str]:
        """
        Service Gateway IP (Management interface)
        """
        return pulumi.get(self, "service_gateway_ip")

    @_builtins.property
    @pulumi.getter(name="serviceGatewayIpVariable")
    def service_gateway_ip_variable(self) -> Optional[_builtins.str]:
        """
        Variable name
        """
        return pulumi.get(self, "service_gateway_ip_variable")

    @_builtins.property
    @pulumi.getter(name="serviceIp")
    def service_ip(self) -> Optional[_builtins.str]:
        """
        Service IP
        """
        return pulumi.get(self, "service_ip")

    @_builtins.property
    @pulumi.getter(name="serviceIpVariable")
    def service_ip_variable(self) -> Optional[_builtins.str]:
        """
        Variable name
        """
        return pulumi.get(self, "service_ip_variable")


@pulumi.output_type
class SecurityPolicyDefinition(dict):
    def __init__(__self__, *,
                 id: _builtins.str,
                 type: _builtins.str,
                 entries: Optional[Sequence['outputs.SecurityPolicyDefinitionEntry']] = None,
                 version: Optional[_builtins.int] = None):
        """
        :param _builtins.str id: Policy definition ID
        :param _builtins.str type: Policy definition type
                 - Choices: `urlFiltering`, `zoneBasedFW`, `intrusionPrevention`, `sslDecryption`, `advancedMalwareProtection`, `dnsSecurity`
        :param Sequence['SecurityPolicyDefinitionEntryArgs'] entries: List of zone pair definitions, Attribute conditional on `type` being equal to `zoneBasedFW`
        :param _builtins.int version: Policy definition version
        """
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "type", type)
        if entries is not None:
            pulumi.set(__self__, "entries", entries)
        if version is not None:
            pulumi.set(__self__, "version", version)

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        Policy definition ID
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter
    def type(self) -> _builtins.str:
        """
        Policy definition type
          - Choices: `urlFiltering`, `zoneBasedFW`, `intrusionPrevention`, `sslDecryption`, `advancedMalwareProtection`, `dnsSecurity`
        """
        return pulumi.get(self, "type")

    @_builtins.property
    @pulumi.getter
    def entries(self) -> Optional[Sequence['outputs.SecurityPolicyDefinitionEntry']]:
        """
        List of zone pair definitions, Attribute conditional on `type` being equal to `zoneBasedFW`
        """
        return pulumi.get(self, "entries")

    @_builtins.property
    @pulumi.getter
    def version(self) -> Optional[_builtins.int]:
        """
        Policy definition version
        """
        return pulumi.get(self, "version")


@pulumi.output_type
class SecurityPolicyDefinitionEntry(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "destinationZone":
            suggest = "destination_zone"
        elif key == "sourceZone":
            suggest = "source_zone"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SecurityPolicyDefinitionEntry. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SecurityPolicyDefinitionEntry.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SecurityPolicyDefinitionEntry.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 destination_zone: Optional[_builtins.str] = None,
                 source_zone: Optional[_builtins.str] = None):
        """
        :param _builtins.str destination_zone: Destination Zone
        :param _builtins.str source_zone: Source Zone
        """
        if destination_zone is not None:
            pulumi.set(__self__, "destination_zone", destination_zone)
        if source_zone is not None:
            pulumi.set(__self__, "source_zone", source_zone)

    @_builtins.property
    @pulumi.getter(name="destinationZone")
    def destination_zone(self) -> Optional[_builtins.str]:
        """
        Destination Zone
        """
        return pulumi.get(self, "destination_zone")

    @_builtins.property
    @pulumi.getter(name="sourceZone")
    def source_zone(self) -> Optional[_builtins.str]:
        """
        Source Zone
        """
        return pulumi.get(self, "source_zone")


@pulumi.output_type
class SecurityPolicyLogging(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "externalSyslogServerIp":
            suggest = "external_syslog_server_ip"
        elif key == "externalSyslogServerSourceInterface":
            suggest = "external_syslog_server_source_interface"
        elif key == "externalSyslogServerVpn":
            suggest = "external_syslog_server_vpn"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SecurityPolicyLogging. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SecurityPolicyLogging.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SecurityPolicyLogging.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 external_syslog_server_ip: Optional[_builtins.str] = None,
                 external_syslog_server_source_interface: Optional[_builtins.str] = None,
                 external_syslog_server_vpn: Optional[_builtins.str] = None):
        """
        :param _builtins.str external_syslog_server_ip: External Syslog Server IP
        :param _builtins.str external_syslog_server_source_interface: External Syslog Server Source Interface
        :param _builtins.str external_syslog_server_vpn: External Syslog Server VPN
        """
        if external_syslog_server_ip is not None:
            pulumi.set(__self__, "external_syslog_server_ip", external_syslog_server_ip)
        if external_syslog_server_source_interface is not None:
            pulumi.set(__self__, "external_syslog_server_source_interface", external_syslog_server_source_interface)
        if external_syslog_server_vpn is not None:
            pulumi.set(__self__, "external_syslog_server_vpn", external_syslog_server_vpn)

    @_builtins.property
    @pulumi.getter(name="externalSyslogServerIp")
    def external_syslog_server_ip(self) -> Optional[_builtins.str]:
        """
        External Syslog Server IP
        """
        return pulumi.get(self, "external_syslog_server_ip")

    @_builtins.property
    @pulumi.getter(name="externalSyslogServerSourceInterface")
    def external_syslog_server_source_interface(self) -> Optional[_builtins.str]:
        """
        External Syslog Server Source Interface
        """
        return pulumi.get(self, "external_syslog_server_source_interface")

    @_builtins.property
    @pulumi.getter(name="externalSyslogServerVpn")
    def external_syslog_server_vpn(self) -> Optional[_builtins.str]:
        """
        External Syslog Server VPN
        """
        return pulumi.get(self, "external_syslog_server_vpn")


@pulumi.output_type
class ServiceDhcpServerFeatureOptionCode(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "asciiVariable":
            suggest = "ascii_variable"
        elif key == "codeVariable":
            suggest = "code_variable"
        elif key == "hexVariable":
            suggest = "hex_variable"
        elif key == "ipVariable":
            suggest = "ip_variable"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ServiceDhcpServerFeatureOptionCode. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ServiceDhcpServerFeatureOptionCode.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ServiceDhcpServerFeatureOptionCode.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 ascii: Optional[_builtins.str] = None,
                 ascii_variable: Optional[_builtins.str] = None,
                 code: Optional[_builtins.int] = None,
                 code_variable: Optional[_builtins.str] = None,
                 hex: Optional[_builtins.str] = None,
                 hex_variable: Optional[_builtins.str] = None,
                 ip_variable: Optional[_builtins.str] = None,
                 ips: Optional[Sequence[_builtins.str]] = None):
        """
        :param _builtins.str ascii: Set ASCII value
        :param _builtins.str ascii_variable: Variable name
        :param _builtins.int code: Set Option Code
                 - Range: `1`-`254`
        :param _builtins.str code_variable: Variable name
        :param _builtins.str hex: Set HEX value
        :param _builtins.str hex_variable: Variable name
        :param _builtins.str ip_variable: Variable name
        :param Sequence[_builtins.str] ips: Set ip address
        """
        if ascii is not None:
            pulumi.set(__self__, "ascii", ascii)
        if ascii_variable is not None:
            pulumi.set(__self__, "ascii_variable", ascii_variable)
        if code is not None:
            pulumi.set(__self__, "code", code)
        if code_variable is not None:
            pulumi.set(__self__, "code_variable", code_variable)
        if hex is not None:
            pulumi.set(__self__, "hex", hex)
        if hex_variable is not None:
            pulumi.set(__self__, "hex_variable", hex_variable)
        if ip_variable is not None:
            pulumi.set(__self__, "ip_variable", ip_variable)
        if ips is not None:
            pulumi.set(__self__, "ips", ips)

    @_builtins.property
    @pulumi.getter
    def ascii(self) -> Optional[_builtins.str]:
        """
        Set ASCII value
        """
        return pulumi.get(self, "ascii")

    @_builtins.property
    @pulumi.getter(name="asciiVariable")
    def ascii_variable(self) -> Optional[_builtins.str]:
        """
        Variable name
        """
        return pulumi.get(self, "ascii_variable")

    @_builtins.property
    @pulumi.getter
    def code(self) -> Optional[_builtins.int]:
        """
        Set Option Code
          - Range: `1`-`254`
        """
        return pulumi.get(self, "code")

    @_builtins.property
    @pulumi.getter(name="codeVariable")
    def code_variable(self) -> Optional[_builtins.str]:
        """
        Variable name
        """
        return pulumi.get(self, "code_variable")

    @_builtins.property
    @pulumi.getter
    def hex(self) -> Optional[_builtins.str]:
        """
        Set HEX value
        """
        return pulumi.get(self, "hex")

    @_builtins.property
    @pulumi.getter(name="hexVariable")
    def hex_variable(self) -> Optional[_builtins.str]:
        """
        Variable name
        """
        return pulumi.get(self, "hex_variable")

    @_builtins.property
    @pulumi.getter(name="ipVariable")
    def ip_variable(self) -> Optional[_builtins.str]:
        """
        Variable name
        """
        return pulumi.get(self, "ip_variable")

    @_builtins.property
    @pulumi.getter
    def ips(self) -> Optional[Sequence[_builtins.str]]:
        """
        Set ip address
        """
        return pulumi.get(self, "ips")


@pulumi.output_type
class ServiceDhcpServerFeatureStaticLease(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "ipAddress":
            suggest = "ip_address"
        elif key == "ipAddressVariable":
            suggest = "ip_address_variable"
        elif key == "macAddress":
            suggest = "mac_address"
        elif key == "macAddressVariable":
            suggest = "mac_address_variable"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ServiceDhcpServerFeatureStaticLease. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ServiceDhcpServerFeatureStaticLease.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ServiceDhcpServerFeatureStaticLease.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 ip_address: Optional[_builtins.str] = None,
                 ip_address_variable: Optional[_builtins.str] = None,
                 mac_address: Optional[_builtins.str] = None,
                 mac_address_variable: Optional[_builtins.str] = None):
        """
        :param _builtins.str ip_address: Set client’s static IP address
        :param _builtins.str ip_address_variable: Variable name
        :param _builtins.str mac_address: Set MAC address of client
        :param _builtins.str mac_address_variable: Variable name
        """
        if ip_address is not None:
            pulumi.set(__self__, "ip_address", ip_address)
        if ip_address_variable is not None:
            pulumi.set(__self__, "ip_address_variable", ip_address_variable)
        if mac_address is not None:
            pulumi.set(__self__, "mac_address", mac_address)
        if mac_address_variable is not None:
            pulumi.set(__self__, "mac_address_variable", mac_address_variable)

    @_builtins.property
    @pulumi.getter(name="ipAddress")
    def ip_address(self) -> Optional[_builtins.str]:
        """
        Set client’s static IP address
        """
        return pulumi.get(self, "ip_address")

    @_builtins.property
    @pulumi.getter(name="ipAddressVariable")
    def ip_address_variable(self) -> Optional[_builtins.str]:
        """
        Variable name
        """
        return pulumi.get(self, "ip_address_variable")

    @_builtins.property
    @pulumi.getter(name="macAddress")
    def mac_address(self) -> Optional[_builtins.str]:
        """
        Set MAC address of client
        """
        return pulumi.get(self, "mac_address")

    @_builtins.property
    @pulumi.getter(name="macAddressVariable")
    def mac_address_variable(self) -> Optional[_builtins.str]:
        """
        Variable name
        """
        return pulumi.get(self, "mac_address_variable")


@pulumi.output_type
class ServiceIpv4AclFeatureSequence(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "baseAction":
            suggest = "base_action"
        elif key == "matchEntries":
            suggest = "match_entries"
        elif key == "sequenceId":
            suggest = "sequence_id"
        elif key == "sequenceName":
            suggest = "sequence_name"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ServiceIpv4AclFeatureSequence. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ServiceIpv4AclFeatureSequence.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ServiceIpv4AclFeatureSequence.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 actions: Optional[Sequence['outputs.ServiceIpv4AclFeatureSequenceAction']] = None,
                 base_action: Optional[_builtins.str] = None,
                 match_entries: Optional[Sequence['outputs.ServiceIpv4AclFeatureSequenceMatchEntry']] = None,
                 sequence_id: Optional[_builtins.int] = None,
                 sequence_name: Optional[_builtins.str] = None):
        """
        :param Sequence['ServiceIpv4AclFeatureSequenceActionArgs'] actions: Define list of actions
        :param _builtins.str base_action: Base Action
                 - Choices: `drop`, `accept`
                 - Default value: `accept`
        :param Sequence['ServiceIpv4AclFeatureSequenceMatchEntryArgs'] match_entries: Define match conditions
        :param _builtins.int sequence_id: Sequence Id
                 - Range: `1`-`65536`
        :param _builtins.str sequence_name: Sequence Name
        """
        if actions is not None:
            pulumi.set(__self__, "actions", actions)
        if base_action is not None:
            pulumi.set(__self__, "base_action", base_action)
        if match_entries is not None:
            pulumi.set(__self__, "match_entries", match_entries)
        if sequence_id is not None:
            pulumi.set(__self__, "sequence_id", sequence_id)
        if sequence_name is not None:
            pulumi.set(__self__, "sequence_name", sequence_name)

    @_builtins.property
    @pulumi.getter
    def actions(self) -> Optional[Sequence['outputs.ServiceIpv4AclFeatureSequenceAction']]:
        """
        Define list of actions
        """
        return pulumi.get(self, "actions")

    @_builtins.property
    @pulumi.getter(name="baseAction")
    def base_action(self) -> Optional[_builtins.str]:
        """
        Base Action
          - Choices: `drop`, `accept`
          - Default value: `accept`
        """
        return pulumi.get(self, "base_action")

    @_builtins.property
    @pulumi.getter(name="matchEntries")
    def match_entries(self) -> Optional[Sequence['outputs.ServiceIpv4AclFeatureSequenceMatchEntry']]:
        """
        Define match conditions
        """
        return pulumi.get(self, "match_entries")

    @_builtins.property
    @pulumi.getter(name="sequenceId")
    def sequence_id(self) -> Optional[_builtins.int]:
        """
        Sequence Id
          - Range: `1`-`65536`
        """
        return pulumi.get(self, "sequence_id")

    @_builtins.property
    @pulumi.getter(name="sequenceName")
    def sequence_name(self) -> Optional[_builtins.str]:
        """
        Sequence Name
        """
        return pulumi.get(self, "sequence_name")


@pulumi.output_type
class ServiceIpv4AclFeatureSequenceAction(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "acceptCounterName":
            suggest = "accept_counter_name"
        elif key == "acceptLog":
            suggest = "accept_log"
        elif key == "acceptMirrorListId":
            suggest = "accept_mirror_list_id"
        elif key == "acceptPolicerId":
            suggest = "accept_policer_id"
        elif key == "acceptSetDscp":
            suggest = "accept_set_dscp"
        elif key == "acceptSetNextHop":
            suggest = "accept_set_next_hop"
        elif key == "dropCounterName":
            suggest = "drop_counter_name"
        elif key == "dropLog":
            suggest = "drop_log"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ServiceIpv4AclFeatureSequenceAction. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ServiceIpv4AclFeatureSequenceAction.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ServiceIpv4AclFeatureSequenceAction.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 accept_counter_name: Optional[_builtins.str] = None,
                 accept_log: Optional[_builtins.bool] = None,
                 accept_mirror_list_id: Optional[_builtins.str] = None,
                 accept_policer_id: Optional[_builtins.str] = None,
                 accept_set_dscp: Optional[_builtins.int] = None,
                 accept_set_next_hop: Optional[_builtins.str] = None,
                 drop_counter_name: Optional[_builtins.str] = None,
                 drop_log: Optional[_builtins.bool] = None):
        """
        :param _builtins.str accept_counter_name: Counter Name
        :param _builtins.bool accept_log: Enable Log
                 - Default value: `false`
        :param _builtins.int accept_set_dscp: DSCP number
                 - Range: `0`-`63`
        :param _builtins.str accept_set_next_hop: Set Next Hop (IPV4 address)
        :param _builtins.str drop_counter_name: Counter Name
        :param _builtins.bool drop_log: Enable Log
                 - Default value: `false`
        """
        if accept_counter_name is not None:
            pulumi.set(__self__, "accept_counter_name", accept_counter_name)
        if accept_log is not None:
            pulumi.set(__self__, "accept_log", accept_log)
        if accept_mirror_list_id is not None:
            pulumi.set(__self__, "accept_mirror_list_id", accept_mirror_list_id)
        if accept_policer_id is not None:
            pulumi.set(__self__, "accept_policer_id", accept_policer_id)
        if accept_set_dscp is not None:
            pulumi.set(__self__, "accept_set_dscp", accept_set_dscp)
        if accept_set_next_hop is not None:
            pulumi.set(__self__, "accept_set_next_hop", accept_set_next_hop)
        if drop_counter_name is not None:
            pulumi.set(__self__, "drop_counter_name", drop_counter_name)
        if drop_log is not None:
            pulumi.set(__self__, "drop_log", drop_log)

    @_builtins.property
    @pulumi.getter(name="acceptCounterName")
    def accept_counter_name(self) -> Optional[_builtins.str]:
        """
        Counter Name
        """
        return pulumi.get(self, "accept_counter_name")

    @_builtins.property
    @pulumi.getter(name="acceptLog")
    def accept_log(self) -> Optional[_builtins.bool]:
        """
        Enable Log
          - Default value: `false`
        """
        return pulumi.get(self, "accept_log")

    @_builtins.property
    @pulumi.getter(name="acceptMirrorListId")
    def accept_mirror_list_id(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "accept_mirror_list_id")

    @_builtins.property
    @pulumi.getter(name="acceptPolicerId")
    def accept_policer_id(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "accept_policer_id")

    @_builtins.property
    @pulumi.getter(name="acceptSetDscp")
    def accept_set_dscp(self) -> Optional[_builtins.int]:
        """
        DSCP number
          - Range: `0`-`63`
        """
        return pulumi.get(self, "accept_set_dscp")

    @_builtins.property
    @pulumi.getter(name="acceptSetNextHop")
    def accept_set_next_hop(self) -> Optional[_builtins.str]:
        """
        Set Next Hop (IPV4 address)
        """
        return pulumi.get(self, "accept_set_next_hop")

    @_builtins.property
    @pulumi.getter(name="dropCounterName")
    def drop_counter_name(self) -> Optional[_builtins.str]:
        """
        Counter Name
        """
        return pulumi.get(self, "drop_counter_name")

    @_builtins.property
    @pulumi.getter(name="dropLog")
    def drop_log(self) -> Optional[_builtins.bool]:
        """
        Enable Log
          - Default value: `false`
        """
        return pulumi.get(self, "drop_log")


@pulumi.output_type
class ServiceIpv4AclFeatureSequenceMatchEntry(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "destinationDataPrefix":
            suggest = "destination_data_prefix"
        elif key == "destinationDataPrefixListId":
            suggest = "destination_data_prefix_list_id"
        elif key == "destinationDataPrefixVariable":
            suggest = "destination_data_prefix_variable"
        elif key == "destinationPorts":
            suggest = "destination_ports"
        elif key == "icmpMessages":
            suggest = "icmp_messages"
        elif key == "packetLength":
            suggest = "packet_length"
        elif key == "sourceDataPrefix":
            suggest = "source_data_prefix"
        elif key == "sourceDataPrefixListId":
            suggest = "source_data_prefix_list_id"
        elif key == "sourceDataPrefixVariable":
            suggest = "source_data_prefix_variable"
        elif key == "sourcePorts":
            suggest = "source_ports"
        elif key == "tcpState":
            suggest = "tcp_state"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ServiceIpv4AclFeatureSequenceMatchEntry. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ServiceIpv4AclFeatureSequenceMatchEntry.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ServiceIpv4AclFeatureSequenceMatchEntry.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 destination_data_prefix: Optional[_builtins.str] = None,
                 destination_data_prefix_list_id: Optional[_builtins.str] = None,
                 destination_data_prefix_variable: Optional[_builtins.str] = None,
                 destination_ports: Optional[Sequence['outputs.ServiceIpv4AclFeatureSequenceMatchEntryDestinationPort']] = None,
                 dscps: Optional[Sequence[_builtins.int]] = None,
                 icmp_messages: Optional[Sequence[_builtins.str]] = None,
                 packet_length: Optional[_builtins.str] = None,
                 protocols: Optional[Sequence[_builtins.int]] = None,
                 source_data_prefix: Optional[_builtins.str] = None,
                 source_data_prefix_list_id: Optional[_builtins.str] = None,
                 source_data_prefix_variable: Optional[_builtins.str] = None,
                 source_ports: Optional[Sequence['outputs.ServiceIpv4AclFeatureSequenceMatchEntrySourcePort']] = None,
                 tcp_state: Optional[_builtins.str] = None):
        """
        :param _builtins.str destination_data_prefix: Destination Data IP Prefix
        :param _builtins.str destination_data_prefix_variable: Variable name
        :param Sequence['ServiceIpv4AclFeatureSequenceMatchEntryDestinationPortArgs'] destination_ports: Destination Port List
        :param Sequence[_builtins.int] dscps: DSCP number
        :param Sequence[_builtins.str] icmp_messages: ICMP Message
        :param _builtins.str packet_length: Packet Length
        :param Sequence[_builtins.int] protocols: protocol number list with at least one item
        :param _builtins.str source_data_prefix: Source Data IP Prefix
        :param _builtins.str source_data_prefix_variable: Variable name
        :param Sequence['ServiceIpv4AclFeatureSequenceMatchEntrySourcePortArgs'] source_ports: Source Port List
        :param _builtins.str tcp_state: TCP States
                 - Choices: `syn`
        """
        if destination_data_prefix is not None:
            pulumi.set(__self__, "destination_data_prefix", destination_data_prefix)
        if destination_data_prefix_list_id is not None:
            pulumi.set(__self__, "destination_data_prefix_list_id", destination_data_prefix_list_id)
        if destination_data_prefix_variable is not None:
            pulumi.set(__self__, "destination_data_prefix_variable", destination_data_prefix_variable)
        if destination_ports is not None:
            pulumi.set(__self__, "destination_ports", destination_ports)
        if dscps is not None:
            pulumi.set(__self__, "dscps", dscps)
        if icmp_messages is not None:
            pulumi.set(__self__, "icmp_messages", icmp_messages)
        if packet_length is not None:
            pulumi.set(__self__, "packet_length", packet_length)
        if protocols is not None:
            pulumi.set(__self__, "protocols", protocols)
        if source_data_prefix is not None:
            pulumi.set(__self__, "source_data_prefix", source_data_prefix)
        if source_data_prefix_list_id is not None:
            pulumi.set(__self__, "source_data_prefix_list_id", source_data_prefix_list_id)
        if source_data_prefix_variable is not None:
            pulumi.set(__self__, "source_data_prefix_variable", source_data_prefix_variable)
        if source_ports is not None:
            pulumi.set(__self__, "source_ports", source_ports)
        if tcp_state is not None:
            pulumi.set(__self__, "tcp_state", tcp_state)

    @_builtins.property
    @pulumi.getter(name="destinationDataPrefix")
    def destination_data_prefix(self) -> Optional[_builtins.str]:
        """
        Destination Data IP Prefix
        """
        return pulumi.get(self, "destination_data_prefix")

    @_builtins.property
    @pulumi.getter(name="destinationDataPrefixListId")
    def destination_data_prefix_list_id(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "destination_data_prefix_list_id")

    @_builtins.property
    @pulumi.getter(name="destinationDataPrefixVariable")
    def destination_data_prefix_variable(self) -> Optional[_builtins.str]:
        """
        Variable name
        """
        return pulumi.get(self, "destination_data_prefix_variable")

    @_builtins.property
    @pulumi.getter(name="destinationPorts")
    def destination_ports(self) -> Optional[Sequence['outputs.ServiceIpv4AclFeatureSequenceMatchEntryDestinationPort']]:
        """
        Destination Port List
        """
        return pulumi.get(self, "destination_ports")

    @_builtins.property
    @pulumi.getter
    def dscps(self) -> Optional[Sequence[_builtins.int]]:
        """
        DSCP number
        """
        return pulumi.get(self, "dscps")

    @_builtins.property
    @pulumi.getter(name="icmpMessages")
    def icmp_messages(self) -> Optional[Sequence[_builtins.str]]:
        """
        ICMP Message
        """
        return pulumi.get(self, "icmp_messages")

    @_builtins.property
    @pulumi.getter(name="packetLength")
    def packet_length(self) -> Optional[_builtins.str]:
        """
        Packet Length
        """
        return pulumi.get(self, "packet_length")

    @_builtins.property
    @pulumi.getter
    def protocols(self) -> Optional[Sequence[_builtins.int]]:
        """
        protocol number list with at least one item
        """
        return pulumi.get(self, "protocols")

    @_builtins.property
    @pulumi.getter(name="sourceDataPrefix")
    def source_data_prefix(self) -> Optional[_builtins.str]:
        """
        Source Data IP Prefix
        """
        return pulumi.get(self, "source_data_prefix")

    @_builtins.property
    @pulumi.getter(name="sourceDataPrefixListId")
    def source_data_prefix_list_id(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "source_data_prefix_list_id")

    @_builtins.property
    @pulumi.getter(name="sourceDataPrefixVariable")
    def source_data_prefix_variable(self) -> Optional[_builtins.str]:
        """
        Variable name
        """
        return pulumi.get(self, "source_data_prefix_variable")

    @_builtins.property
    @pulumi.getter(name="sourcePorts")
    def source_ports(self) -> Optional[Sequence['outputs.ServiceIpv4AclFeatureSequenceMatchEntrySourcePort']]:
        """
        Source Port List
        """
        return pulumi.get(self, "source_ports")

    @_builtins.property
    @pulumi.getter(name="tcpState")
    def tcp_state(self) -> Optional[_builtins.str]:
        """
        TCP States
          - Choices: `syn`
        """
        return pulumi.get(self, "tcp_state")


@pulumi.output_type
class ServiceIpv4AclFeatureSequenceMatchEntryDestinationPort(dict):
    def __init__(__self__, *,
                 port: Optional[_builtins.str] = None):
        """
        :param _builtins.str port: destination port range or individual port number
        """
        if port is not None:
            pulumi.set(__self__, "port", port)

    @_builtins.property
    @pulumi.getter
    def port(self) -> Optional[_builtins.str]:
        """
        destination port range or individual port number
        """
        return pulumi.get(self, "port")


@pulumi.output_type
class ServiceIpv4AclFeatureSequenceMatchEntrySourcePort(dict):
    def __init__(__self__, *,
                 port: Optional[_builtins.str] = None):
        """
        :param _builtins.str port: source port range or individual port number
        """
        if port is not None:
            pulumi.set(__self__, "port", port)

    @_builtins.property
    @pulumi.getter
    def port(self) -> Optional[_builtins.str]:
        """
        source port range or individual port number
        """
        return pulumi.get(self, "port")


@pulumi.output_type
class ServiceIpv6AclFeatureSequence(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "baseAction":
            suggest = "base_action"
        elif key == "matchEntries":
            suggest = "match_entries"
        elif key == "sequenceId":
            suggest = "sequence_id"
        elif key == "sequenceName":
            suggest = "sequence_name"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ServiceIpv6AclFeatureSequence. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ServiceIpv6AclFeatureSequence.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ServiceIpv6AclFeatureSequence.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 actions: Optional[Sequence['outputs.ServiceIpv6AclFeatureSequenceAction']] = None,
                 base_action: Optional[_builtins.str] = None,
                 match_entries: Optional[Sequence['outputs.ServiceIpv6AclFeatureSequenceMatchEntry']] = None,
                 sequence_id: Optional[_builtins.int] = None,
                 sequence_name: Optional[_builtins.str] = None):
        """
        :param Sequence['ServiceIpv6AclFeatureSequenceActionArgs'] actions: Define list of actions
        :param _builtins.str base_action: Base Action
                 - Choices: `drop`, `accept`
                 - Default value: `accept`
        :param Sequence['ServiceIpv6AclFeatureSequenceMatchEntryArgs'] match_entries: Define match conditions
        :param _builtins.int sequence_id: Sequence Id
                 - Range: `1`-`65536`
        :param _builtins.str sequence_name: Sequence Name
        """
        if actions is not None:
            pulumi.set(__self__, "actions", actions)
        if base_action is not None:
            pulumi.set(__self__, "base_action", base_action)
        if match_entries is not None:
            pulumi.set(__self__, "match_entries", match_entries)
        if sequence_id is not None:
            pulumi.set(__self__, "sequence_id", sequence_id)
        if sequence_name is not None:
            pulumi.set(__self__, "sequence_name", sequence_name)

    @_builtins.property
    @pulumi.getter
    def actions(self) -> Optional[Sequence['outputs.ServiceIpv6AclFeatureSequenceAction']]:
        """
        Define list of actions
        """
        return pulumi.get(self, "actions")

    @_builtins.property
    @pulumi.getter(name="baseAction")
    def base_action(self) -> Optional[_builtins.str]:
        """
        Base Action
          - Choices: `drop`, `accept`
          - Default value: `accept`
        """
        return pulumi.get(self, "base_action")

    @_builtins.property
    @pulumi.getter(name="matchEntries")
    def match_entries(self) -> Optional[Sequence['outputs.ServiceIpv6AclFeatureSequenceMatchEntry']]:
        """
        Define match conditions
        """
        return pulumi.get(self, "match_entries")

    @_builtins.property
    @pulumi.getter(name="sequenceId")
    def sequence_id(self) -> Optional[_builtins.int]:
        """
        Sequence Id
          - Range: `1`-`65536`
        """
        return pulumi.get(self, "sequence_id")

    @_builtins.property
    @pulumi.getter(name="sequenceName")
    def sequence_name(self) -> Optional[_builtins.str]:
        """
        Sequence Name
        """
        return pulumi.get(self, "sequence_name")


@pulumi.output_type
class ServiceIpv6AclFeatureSequenceAction(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "acceptCounterName":
            suggest = "accept_counter_name"
        elif key == "acceptLog":
            suggest = "accept_log"
        elif key == "acceptMirrorListId":
            suggest = "accept_mirror_list_id"
        elif key == "acceptPolicerId":
            suggest = "accept_policer_id"
        elif key == "acceptSetNextHop":
            suggest = "accept_set_next_hop"
        elif key == "acceptTrafficClass":
            suggest = "accept_traffic_class"
        elif key == "dropCounterName":
            suggest = "drop_counter_name"
        elif key == "dropLog":
            suggest = "drop_log"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ServiceIpv6AclFeatureSequenceAction. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ServiceIpv6AclFeatureSequenceAction.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ServiceIpv6AclFeatureSequenceAction.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 accept_counter_name: Optional[_builtins.str] = None,
                 accept_log: Optional[_builtins.bool] = None,
                 accept_mirror_list_id: Optional[_builtins.str] = None,
                 accept_policer_id: Optional[_builtins.str] = None,
                 accept_set_next_hop: Optional[_builtins.str] = None,
                 accept_traffic_class: Optional[_builtins.int] = None,
                 drop_counter_name: Optional[_builtins.str] = None,
                 drop_log: Optional[_builtins.bool] = None):
        """
        :param _builtins.str accept_counter_name: Counter Name
        :param _builtins.bool accept_log: Enable Log
                 - Default value: `false`
        :param _builtins.str accept_set_next_hop: Set Next Hop (IPV6 address)
        :param _builtins.int accept_traffic_class: set traffic class number
                 - Range: `0`-`63`
        :param _builtins.str drop_counter_name: Counter Name
        :param _builtins.bool drop_log: Enable Log
                 - Default value: `false`
        """
        if accept_counter_name is not None:
            pulumi.set(__self__, "accept_counter_name", accept_counter_name)
        if accept_log is not None:
            pulumi.set(__self__, "accept_log", accept_log)
        if accept_mirror_list_id is not None:
            pulumi.set(__self__, "accept_mirror_list_id", accept_mirror_list_id)
        if accept_policer_id is not None:
            pulumi.set(__self__, "accept_policer_id", accept_policer_id)
        if accept_set_next_hop is not None:
            pulumi.set(__self__, "accept_set_next_hop", accept_set_next_hop)
        if accept_traffic_class is not None:
            pulumi.set(__self__, "accept_traffic_class", accept_traffic_class)
        if drop_counter_name is not None:
            pulumi.set(__self__, "drop_counter_name", drop_counter_name)
        if drop_log is not None:
            pulumi.set(__self__, "drop_log", drop_log)

    @_builtins.property
    @pulumi.getter(name="acceptCounterName")
    def accept_counter_name(self) -> Optional[_builtins.str]:
        """
        Counter Name
        """
        return pulumi.get(self, "accept_counter_name")

    @_builtins.property
    @pulumi.getter(name="acceptLog")
    def accept_log(self) -> Optional[_builtins.bool]:
        """
        Enable Log
          - Default value: `false`
        """
        return pulumi.get(self, "accept_log")

    @_builtins.property
    @pulumi.getter(name="acceptMirrorListId")
    def accept_mirror_list_id(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "accept_mirror_list_id")

    @_builtins.property
    @pulumi.getter(name="acceptPolicerId")
    def accept_policer_id(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "accept_policer_id")

    @_builtins.property
    @pulumi.getter(name="acceptSetNextHop")
    def accept_set_next_hop(self) -> Optional[_builtins.str]:
        """
        Set Next Hop (IPV6 address)
        """
        return pulumi.get(self, "accept_set_next_hop")

    @_builtins.property
    @pulumi.getter(name="acceptTrafficClass")
    def accept_traffic_class(self) -> Optional[_builtins.int]:
        """
        set traffic class number
          - Range: `0`-`63`
        """
        return pulumi.get(self, "accept_traffic_class")

    @_builtins.property
    @pulumi.getter(name="dropCounterName")
    def drop_counter_name(self) -> Optional[_builtins.str]:
        """
        Counter Name
        """
        return pulumi.get(self, "drop_counter_name")

    @_builtins.property
    @pulumi.getter(name="dropLog")
    def drop_log(self) -> Optional[_builtins.bool]:
        """
        Enable Log
          - Default value: `false`
        """
        return pulumi.get(self, "drop_log")


@pulumi.output_type
class ServiceIpv6AclFeatureSequenceMatchEntry(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "destinationDataPrefix":
            suggest = "destination_data_prefix"
        elif key == "destinationDataPrefixListId":
            suggest = "destination_data_prefix_list_id"
        elif key == "destinationPorts":
            suggest = "destination_ports"
        elif key == "icmpMessages":
            suggest = "icmp_messages"
        elif key == "nextHeader":
            suggest = "next_header"
        elif key == "packetLength":
            suggest = "packet_length"
        elif key == "sourceDataPrefix":
            suggest = "source_data_prefix"
        elif key == "sourceDataPrefixListId":
            suggest = "source_data_prefix_list_id"
        elif key == "sourcePorts":
            suggest = "source_ports"
        elif key == "tcpState":
            suggest = "tcp_state"
        elif key == "trafficClasses":
            suggest = "traffic_classes"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ServiceIpv6AclFeatureSequenceMatchEntry. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ServiceIpv6AclFeatureSequenceMatchEntry.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ServiceIpv6AclFeatureSequenceMatchEntry.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 destination_data_prefix: Optional[_builtins.str] = None,
                 destination_data_prefix_list_id: Optional[_builtins.str] = None,
                 destination_ports: Optional[Sequence['outputs.ServiceIpv6AclFeatureSequenceMatchEntryDestinationPort']] = None,
                 icmp_messages: Optional[Sequence[_builtins.str]] = None,
                 next_header: Optional[_builtins.int] = None,
                 packet_length: Optional[_builtins.str] = None,
                 source_data_prefix: Optional[_builtins.str] = None,
                 source_data_prefix_list_id: Optional[_builtins.str] = None,
                 source_ports: Optional[Sequence['outputs.ServiceIpv6AclFeatureSequenceMatchEntrySourcePort']] = None,
                 tcp_state: Optional[_builtins.str] = None,
                 traffic_classes: Optional[Sequence[_builtins.int]] = None):
        """
        :param _builtins.str destination_data_prefix: Destination Data IP Prefix
        :param Sequence['ServiceIpv6AclFeatureSequenceMatchEntryDestinationPortArgs'] destination_ports: Destination Port List
        :param Sequence[_builtins.str] icmp_messages: ICMP6 Message
        :param _builtins.int next_header: next header number
                 - Range: `0`-`255`
        :param _builtins.str packet_length: Packet Length
        :param _builtins.str source_data_prefix: Source Data IP Prefix
        :param Sequence['ServiceIpv6AclFeatureSequenceMatchEntrySourcePortArgs'] source_ports: Source Port List
        :param _builtins.str tcp_state: TCP States
                 - Choices: `syn`
        :param Sequence[_builtins.int] traffic_classes: Select Traffic Class
        """
        if destination_data_prefix is not None:
            pulumi.set(__self__, "destination_data_prefix", destination_data_prefix)
        if destination_data_prefix_list_id is not None:
            pulumi.set(__self__, "destination_data_prefix_list_id", destination_data_prefix_list_id)
        if destination_ports is not None:
            pulumi.set(__self__, "destination_ports", destination_ports)
        if icmp_messages is not None:
            pulumi.set(__self__, "icmp_messages", icmp_messages)
        if next_header is not None:
            pulumi.set(__self__, "next_header", next_header)
        if packet_length is not None:
            pulumi.set(__self__, "packet_length", packet_length)
        if source_data_prefix is not None:
            pulumi.set(__self__, "source_data_prefix", source_data_prefix)
        if source_data_prefix_list_id is not None:
            pulumi.set(__self__, "source_data_prefix_list_id", source_data_prefix_list_id)
        if source_ports is not None:
            pulumi.set(__self__, "source_ports", source_ports)
        if tcp_state is not None:
            pulumi.set(__self__, "tcp_state", tcp_state)
        if traffic_classes is not None:
            pulumi.set(__self__, "traffic_classes", traffic_classes)

    @_builtins.property
    @pulumi.getter(name="destinationDataPrefix")
    def destination_data_prefix(self) -> Optional[_builtins.str]:
        """
        Destination Data IP Prefix
        """
        return pulumi.get(self, "destination_data_prefix")

    @_builtins.property
    @pulumi.getter(name="destinationDataPrefixListId")
    def destination_data_prefix_list_id(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "destination_data_prefix_list_id")

    @_builtins.property
    @pulumi.getter(name="destinationPorts")
    def destination_ports(self) -> Optional[Sequence['outputs.ServiceIpv6AclFeatureSequenceMatchEntryDestinationPort']]:
        """
        Destination Port List
        """
        return pulumi.get(self, "destination_ports")

    @_builtins.property
    @pulumi.getter(name="icmpMessages")
    def icmp_messages(self) -> Optional[Sequence[_builtins.str]]:
        """
        ICMP6 Message
        """
        return pulumi.get(self, "icmp_messages")

    @_builtins.property
    @pulumi.getter(name="nextHeader")
    def next_header(self) -> Optional[_builtins.int]:
        """
        next header number
          - Range: `0`-`255`
        """
        return pulumi.get(self, "next_header")

    @_builtins.property
    @pulumi.getter(name="packetLength")
    def packet_length(self) -> Optional[_builtins.str]:
        """
        Packet Length
        """
        return pulumi.get(self, "packet_length")

    @_builtins.property
    @pulumi.getter(name="sourceDataPrefix")
    def source_data_prefix(self) -> Optional[_builtins.str]:
        """
        Source Data IP Prefix
        """
        return pulumi.get(self, "source_data_prefix")

    @_builtins.property
    @pulumi.getter(name="sourceDataPrefixListId")
    def source_data_prefix_list_id(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "source_data_prefix_list_id")

    @_builtins.property
    @pulumi.getter(name="sourcePorts")
    def source_ports(self) -> Optional[Sequence['outputs.ServiceIpv6AclFeatureSequenceMatchEntrySourcePort']]:
        """
        Source Port List
        """
        return pulumi.get(self, "source_ports")

    @_builtins.property
    @pulumi.getter(name="tcpState")
    def tcp_state(self) -> Optional[_builtins.str]:
        """
        TCP States
          - Choices: `syn`
        """
        return pulumi.get(self, "tcp_state")

    @_builtins.property
    @pulumi.getter(name="trafficClasses")
    def traffic_classes(self) -> Optional[Sequence[_builtins.int]]:
        """
        Select Traffic Class
        """
        return pulumi.get(self, "traffic_classes")


@pulumi.output_type
class ServiceIpv6AclFeatureSequenceMatchEntryDestinationPort(dict):
    def __init__(__self__, *,
                 port: Optional[_builtins.str] = None):
        """
        :param _builtins.str port: destination port range or individual port number
        """
        if port is not None:
            pulumi.set(__self__, "port", port)

    @_builtins.property
    @pulumi.getter
    def port(self) -> Optional[_builtins.str]:
        """
        destination port range or individual port number
        """
        return pulumi.get(self, "port")


@pulumi.output_type
class ServiceIpv6AclFeatureSequenceMatchEntrySourcePort(dict):
    def __init__(__self__, *,
                 port: Optional[_builtins.str] = None):
        """
        :param _builtins.str port: source port range or individual port number
        """
        if port is not None:
            pulumi.set(__self__, "port", port)

    @_builtins.property
    @pulumi.getter
    def port(self) -> Optional[_builtins.str]:
        """
        source port range or individual port number
        """
        return pulumi.get(self, "port")


@pulumi.output_type
class ServiceLanVpnFeatureAdvertiseOmpIpv4(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "protocolVariable":
            suggest = "protocol_variable"
        elif key == "routePolicyId":
            suggest = "route_policy_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ServiceLanVpnFeatureAdvertiseOmpIpv4. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ServiceLanVpnFeatureAdvertiseOmpIpv4.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ServiceLanVpnFeatureAdvertiseOmpIpv4.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 prefixes: Optional[Sequence['outputs.ServiceLanVpnFeatureAdvertiseOmpIpv4Prefix']] = None,
                 protocol: Optional[_builtins.str] = None,
                 protocol_variable: Optional[_builtins.str] = None,
                 route_policy_id: Optional[_builtins.str] = None):
        """
        :param Sequence['ServiceLanVpnFeatureAdvertiseOmpIpv4PrefixArgs'] prefixes: IPv4 Prefix List
        :param _builtins.str protocol: Protocol
                 - Choices: `bgp`, `ospf`, `ospfv3`, `connected`, `static`, `network`, `aggregate`, `eigrp`, `lisp`, `isis`
        :param _builtins.str protocol_variable: Variable name
        """
        if prefixes is not None:
            pulumi.set(__self__, "prefixes", prefixes)
        if protocol is not None:
            pulumi.set(__self__, "protocol", protocol)
        if protocol_variable is not None:
            pulumi.set(__self__, "protocol_variable", protocol_variable)
        if route_policy_id is not None:
            pulumi.set(__self__, "route_policy_id", route_policy_id)

    @_builtins.property
    @pulumi.getter
    def prefixes(self) -> Optional[Sequence['outputs.ServiceLanVpnFeatureAdvertiseOmpIpv4Prefix']]:
        """
        IPv4 Prefix List
        """
        return pulumi.get(self, "prefixes")

    @_builtins.property
    @pulumi.getter
    def protocol(self) -> Optional[_builtins.str]:
        """
        Protocol
          - Choices: `bgp`, `ospf`, `ospfv3`, `connected`, `static`, `network`, `aggregate`, `eigrp`, `lisp`, `isis`
        """
        return pulumi.get(self, "protocol")

    @_builtins.property
    @pulumi.getter(name="protocolVariable")
    def protocol_variable(self) -> Optional[_builtins.str]:
        """
        Variable name
        """
        return pulumi.get(self, "protocol_variable")

    @_builtins.property
    @pulumi.getter(name="routePolicyId")
    def route_policy_id(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "route_policy_id")


@pulumi.output_type
class ServiceLanVpnFeatureAdvertiseOmpIpv4Prefix(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "aggregateOnly":
            suggest = "aggregate_only"
        elif key == "networkAddress":
            suggest = "network_address"
        elif key == "networkAddressVariable":
            suggest = "network_address_variable"
        elif key == "regionVariable":
            suggest = "region_variable"
        elif key == "subnetMask":
            suggest = "subnet_mask"
        elif key == "subnetMaskVariable":
            suggest = "subnet_mask_variable"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ServiceLanVpnFeatureAdvertiseOmpIpv4Prefix. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ServiceLanVpnFeatureAdvertiseOmpIpv4Prefix.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ServiceLanVpnFeatureAdvertiseOmpIpv4Prefix.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 aggregate_only: Optional[_builtins.bool] = None,
                 network_address: Optional[_builtins.str] = None,
                 network_address_variable: Optional[_builtins.str] = None,
                 region: Optional[_builtins.str] = None,
                 region_variable: Optional[_builtins.str] = None,
                 subnet_mask: Optional[_builtins.str] = None,
                 subnet_mask_variable: Optional[_builtins.str] = None):
        """
        :param _builtins.bool aggregate_only: Aggregate Only
                 - Default value: `false`
        :param _builtins.str network_address_variable: Variable name
        :param _builtins.str region: Applied to Region
                 - Choices: `core-and-access`, `core`, `access`
                 - Default value: `core-and-access`
        :param _builtins.str region_variable: Variable name
        :param _builtins.str subnet_mask: - Choices: `255.255.255.255`, `255.255.255.254`, `255.255.255.252`, `255.255.255.248`, `255.255.255.240`, `255.255.255.224`, `255.255.255.192`, `255.255.255.128`, `255.255.255.0`, `255.255.254.0`, `255.255.252.0`, `255.255.248.0`, `255.255.240.0`, `255.255.224.0`, `255.255.192.0`, `255.255.128.0`, `255.255.0.0`, `255.254.0.0`, `255.252.0.0`, `255.240.0.0`, `255.224.0.0`, `255.192.0.0`, `255.128.0.0`, `255.0.0.0`, `254.0.0.0`, `252.0.0.0`, `248.0.0.0`, `240.0.0.0`, `224.0.0.0`, `192.0.0.0`, `128.0.0.0`, `0.0.0.0`
        :param _builtins.str subnet_mask_variable: Variable name
        """
        if aggregate_only is not None:
            pulumi.set(__self__, "aggregate_only", aggregate_only)
        if network_address is not None:
            pulumi.set(__self__, "network_address", network_address)
        if network_address_variable is not None:
            pulumi.set(__self__, "network_address_variable", network_address_variable)
        if region is not None:
            pulumi.set(__self__, "region", region)
        if region_variable is not None:
            pulumi.set(__self__, "region_variable", region_variable)
        if subnet_mask is not None:
            pulumi.set(__self__, "subnet_mask", subnet_mask)
        if subnet_mask_variable is not None:
            pulumi.set(__self__, "subnet_mask_variable", subnet_mask_variable)

    @_builtins.property
    @pulumi.getter(name="aggregateOnly")
    def aggregate_only(self) -> Optional[_builtins.bool]:
        """
        Aggregate Only
          - Default value: `false`
        """
        return pulumi.get(self, "aggregate_only")

    @_builtins.property
    @pulumi.getter(name="networkAddress")
    def network_address(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "network_address")

    @_builtins.property
    @pulumi.getter(name="networkAddressVariable")
    def network_address_variable(self) -> Optional[_builtins.str]:
        """
        Variable name
        """
        return pulumi.get(self, "network_address_variable")

    @_builtins.property
    @pulumi.getter
    def region(self) -> Optional[_builtins.str]:
        """
        Applied to Region
          - Choices: `core-and-access`, `core`, `access`
          - Default value: `core-and-access`
        """
        return pulumi.get(self, "region")

    @_builtins.property
    @pulumi.getter(name="regionVariable")
    def region_variable(self) -> Optional[_builtins.str]:
        """
        Variable name
        """
        return pulumi.get(self, "region_variable")

    @_builtins.property
    @pulumi.getter(name="subnetMask")
    def subnet_mask(self) -> Optional[_builtins.str]:
        """
        - Choices: `255.255.255.255`, `255.255.255.254`, `255.255.255.252`, `255.255.255.248`, `255.255.255.240`, `255.255.255.224`, `255.255.255.192`, `255.255.255.128`, `255.255.255.0`, `255.255.254.0`, `255.255.252.0`, `255.255.248.0`, `255.255.240.0`, `255.255.224.0`, `255.255.192.0`, `255.255.128.0`, `255.255.0.0`, `255.254.0.0`, `255.252.0.0`, `255.240.0.0`, `255.224.0.0`, `255.192.0.0`, `255.128.0.0`, `255.0.0.0`, `254.0.0.0`, `252.0.0.0`, `248.0.0.0`, `240.0.0.0`, `224.0.0.0`, `192.0.0.0`, `128.0.0.0`, `0.0.0.0`
        """
        return pulumi.get(self, "subnet_mask")

    @_builtins.property
    @pulumi.getter(name="subnetMaskVariable")
    def subnet_mask_variable(self) -> Optional[_builtins.str]:
        """
        Variable name
        """
        return pulumi.get(self, "subnet_mask_variable")


@pulumi.output_type
class ServiceLanVpnFeatureAdvertiseOmpIpv6(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "protocolSubType":
            suggest = "protocol_sub_type"
        elif key == "protocolSubTypeVariable":
            suggest = "protocol_sub_type_variable"
        elif key == "protocolVariable":
            suggest = "protocol_variable"
        elif key == "routePolicyId":
            suggest = "route_policy_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ServiceLanVpnFeatureAdvertiseOmpIpv6. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ServiceLanVpnFeatureAdvertiseOmpIpv6.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ServiceLanVpnFeatureAdvertiseOmpIpv6.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 prefixes: Optional[Sequence['outputs.ServiceLanVpnFeatureAdvertiseOmpIpv6Prefix']] = None,
                 protocol: Optional[_builtins.str] = None,
                 protocol_sub_type: Optional[_builtins.str] = None,
                 protocol_sub_type_variable: Optional[_builtins.str] = None,
                 protocol_variable: Optional[_builtins.str] = None,
                 route_policy_id: Optional[_builtins.str] = None):
        """
        :param Sequence['ServiceLanVpnFeatureAdvertiseOmpIpv6PrefixArgs'] prefixes: IPv6 Prefix List
        :param _builtins.str protocol: Protocol
                 - Choices: `BGP`, `OSPF`, `Connected`, `Static`, `Network`, `Aggregate`
        :param _builtins.str protocol_sub_type: Protocol Sub Type
                 - Choices: `External`
        :param _builtins.str protocol_sub_type_variable: Variable name
        :param _builtins.str protocol_variable: Variable name
        """
        if prefixes is not None:
            pulumi.set(__self__, "prefixes", prefixes)
        if protocol is not None:
            pulumi.set(__self__, "protocol", protocol)
        if protocol_sub_type is not None:
            pulumi.set(__self__, "protocol_sub_type", protocol_sub_type)
        if protocol_sub_type_variable is not None:
            pulumi.set(__self__, "protocol_sub_type_variable", protocol_sub_type_variable)
        if protocol_variable is not None:
            pulumi.set(__self__, "protocol_variable", protocol_variable)
        if route_policy_id is not None:
            pulumi.set(__self__, "route_policy_id", route_policy_id)

    @_builtins.property
    @pulumi.getter
    def prefixes(self) -> Optional[Sequence['outputs.ServiceLanVpnFeatureAdvertiseOmpIpv6Prefix']]:
        """
        IPv6 Prefix List
        """
        return pulumi.get(self, "prefixes")

    @_builtins.property
    @pulumi.getter
    def protocol(self) -> Optional[_builtins.str]:
        """
        Protocol
          - Choices: `BGP`, `OSPF`, `Connected`, `Static`, `Network`, `Aggregate`
        """
        return pulumi.get(self, "protocol")

    @_builtins.property
    @pulumi.getter(name="protocolSubType")
    def protocol_sub_type(self) -> Optional[_builtins.str]:
        """
        Protocol Sub Type
          - Choices: `External`
        """
        return pulumi.get(self, "protocol_sub_type")

    @_builtins.property
    @pulumi.getter(name="protocolSubTypeVariable")
    def protocol_sub_type_variable(self) -> Optional[_builtins.str]:
        """
        Variable name
        """
        return pulumi.get(self, "protocol_sub_type_variable")

    @_builtins.property
    @pulumi.getter(name="protocolVariable")
    def protocol_variable(self) -> Optional[_builtins.str]:
        """
        Variable name
        """
        return pulumi.get(self, "protocol_variable")

    @_builtins.property
    @pulumi.getter(name="routePolicyId")
    def route_policy_id(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "route_policy_id")


@pulumi.output_type
class ServiceLanVpnFeatureAdvertiseOmpIpv6Prefix(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "aggregateOnly":
            suggest = "aggregate_only"
        elif key == "prefixVariable":
            suggest = "prefix_variable"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ServiceLanVpnFeatureAdvertiseOmpIpv6Prefix. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ServiceLanVpnFeatureAdvertiseOmpIpv6Prefix.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ServiceLanVpnFeatureAdvertiseOmpIpv6Prefix.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 aggregate_only: Optional[_builtins.bool] = None,
                 prefix: Optional[_builtins.str] = None,
                 prefix_variable: Optional[_builtins.str] = None):
        """
        :param _builtins.bool aggregate_only: Aggregate Only
                 - Default value: `false`
        :param _builtins.str prefix: IPv6 Prefix
        :param _builtins.str prefix_variable: Variable name
        """
        if aggregate_only is not None:
            pulumi.set(__self__, "aggregate_only", aggregate_only)
        if prefix is not None:
            pulumi.set(__self__, "prefix", prefix)
        if prefix_variable is not None:
            pulumi.set(__self__, "prefix_variable", prefix_variable)

    @_builtins.property
    @pulumi.getter(name="aggregateOnly")
    def aggregate_only(self) -> Optional[_builtins.bool]:
        """
        Aggregate Only
          - Default value: `false`
        """
        return pulumi.get(self, "aggregate_only")

    @_builtins.property
    @pulumi.getter
    def prefix(self) -> Optional[_builtins.str]:
        """
        IPv6 Prefix
        """
        return pulumi.get(self, "prefix")

    @_builtins.property
    @pulumi.getter(name="prefixVariable")
    def prefix_variable(self) -> Optional[_builtins.str]:
        """
        Variable name
        """
        return pulumi.get(self, "prefix_variable")


@pulumi.output_type
class ServiceLanVpnFeatureGreRoute(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "interfaceVariable":
            suggest = "interface_variable"
        elif key == "networkAddress":
            suggest = "network_address"
        elif key == "networkAddressVariable":
            suggest = "network_address_variable"
        elif key == "subnetMask":
            suggest = "subnet_mask"
        elif key == "subnetMaskVariable":
            suggest = "subnet_mask_variable"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ServiceLanVpnFeatureGreRoute. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ServiceLanVpnFeatureGreRoute.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ServiceLanVpnFeatureGreRoute.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 interface_variable: Optional[_builtins.str] = None,
                 interfaces: Optional[Sequence[_builtins.str]] = None,
                 network_address: Optional[_builtins.str] = None,
                 network_address_variable: Optional[_builtins.str] = None,
                 subnet_mask: Optional[_builtins.str] = None,
                 subnet_mask_variable: Optional[_builtins.str] = None,
                 vpn: Optional[_builtins.int] = None):
        """
        :param _builtins.str interface_variable: Variable name
        :param Sequence[_builtins.str] interfaces: Interface
        :param _builtins.str network_address: IP Address
        :param _builtins.str network_address_variable: Variable name
        :param _builtins.str subnet_mask: Subnet Mask
                 - Choices: `255.255.255.255`, `255.255.255.254`, `255.255.255.252`, `255.255.255.248`, `255.255.255.240`, `255.255.255.224`, `255.255.255.192`, `255.255.255.128`, `255.255.255.0`, `255.255.254.0`, `255.255.252.0`, `255.255.248.0`, `255.255.240.0`, `255.255.224.0`, `255.255.192.0`, `255.255.128.0`, `255.255.0.0`, `255.254.0.0`, `255.252.0.0`, `255.240.0.0`, `255.224.0.0`, `255.192.0.0`, `255.128.0.0`, `255.0.0.0`, `254.0.0.0`, `252.0.0.0`, `248.0.0.0`, `240.0.0.0`, `224.0.0.0`, `192.0.0.0`, `128.0.0.0`, `0.0.0.0`
        :param _builtins.str subnet_mask_variable: Variable name
        :param _builtins.int vpn: Service
        """
        if interface_variable is not None:
            pulumi.set(__self__, "interface_variable", interface_variable)
        if interfaces is not None:
            pulumi.set(__self__, "interfaces", interfaces)
        if network_address is not None:
            pulumi.set(__self__, "network_address", network_address)
        if network_address_variable is not None:
            pulumi.set(__self__, "network_address_variable", network_address_variable)
        if subnet_mask is not None:
            pulumi.set(__self__, "subnet_mask", subnet_mask)
        if subnet_mask_variable is not None:
            pulumi.set(__self__, "subnet_mask_variable", subnet_mask_variable)
        if vpn is not None:
            pulumi.set(__self__, "vpn", vpn)

    @_builtins.property
    @pulumi.getter(name="interfaceVariable")
    def interface_variable(self) -> Optional[_builtins.str]:
        """
        Variable name
        """
        return pulumi.get(self, "interface_variable")

    @_builtins.property
    @pulumi.getter
    def interfaces(self) -> Optional[Sequence[_builtins.str]]:
        """
        Interface
        """
        return pulumi.get(self, "interfaces")

    @_builtins.property
    @pulumi.getter(name="networkAddress")
    def network_address(self) -> Optional[_builtins.str]:
        """
        IP Address
        """
        return pulumi.get(self, "network_address")

    @_builtins.property
    @pulumi.getter(name="networkAddressVariable")
    def network_address_variable(self) -> Optional[_builtins.str]:
        """
        Variable name
        """
        return pulumi.get(self, "network_address_variable")

    @_builtins.property
    @pulumi.getter(name="subnetMask")
    def subnet_mask(self) -> Optional[_builtins.str]:
        """
        Subnet Mask
          - Choices: `255.255.255.255`, `255.255.255.254`, `255.255.255.252`, `255.255.255.248`, `255.255.255.240`, `255.255.255.224`, `255.255.255.192`, `255.255.255.128`, `255.255.255.0`, `255.255.254.0`, `255.255.252.0`, `255.255.248.0`, `255.255.240.0`, `255.255.224.0`, `255.255.192.0`, `255.255.128.0`, `255.255.0.0`, `255.254.0.0`, `255.252.0.0`, `255.240.0.0`, `255.224.0.0`, `255.192.0.0`, `255.128.0.0`, `255.0.0.0`, `254.0.0.0`, `252.0.0.0`, `248.0.0.0`, `240.0.0.0`, `224.0.0.0`, `192.0.0.0`, `128.0.0.0`, `0.0.0.0`
        """
        return pulumi.get(self, "subnet_mask")

    @_builtins.property
    @pulumi.getter(name="subnetMaskVariable")
    def subnet_mask_variable(self) -> Optional[_builtins.str]:
        """
        Variable name
        """
        return pulumi.get(self, "subnet_mask_variable")

    @_builtins.property
    @pulumi.getter
    def vpn(self) -> Optional[_builtins.int]:
        """
        Service
        """
        return pulumi.get(self, "vpn")


@pulumi.output_type
class ServiceLanVpnFeatureHostMapping(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "hostName":
            suggest = "host_name"
        elif key == "hostNameVariable":
            suggest = "host_name_variable"
        elif key == "listOfIps":
            suggest = "list_of_ips"
        elif key == "listOfIpsVariable":
            suggest = "list_of_ips_variable"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ServiceLanVpnFeatureHostMapping. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ServiceLanVpnFeatureHostMapping.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ServiceLanVpnFeatureHostMapping.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 host_name: Optional[_builtins.str] = None,
                 host_name_variable: Optional[_builtins.str] = None,
                 list_of_ips: Optional[Sequence[_builtins.str]] = None,
                 list_of_ips_variable: Optional[_builtins.str] = None):
        """
        :param _builtins.str host_name: Hostname
        :param _builtins.str host_name_variable: Variable name
        :param Sequence[_builtins.str] list_of_ips: List of IP
        :param _builtins.str list_of_ips_variable: Variable name
        """
        if host_name is not None:
            pulumi.set(__self__, "host_name", host_name)
        if host_name_variable is not None:
            pulumi.set(__self__, "host_name_variable", host_name_variable)
        if list_of_ips is not None:
            pulumi.set(__self__, "list_of_ips", list_of_ips)
        if list_of_ips_variable is not None:
            pulumi.set(__self__, "list_of_ips_variable", list_of_ips_variable)

    @_builtins.property
    @pulumi.getter(name="hostName")
    def host_name(self) -> Optional[_builtins.str]:
        """
        Hostname
        """
        return pulumi.get(self, "host_name")

    @_builtins.property
    @pulumi.getter(name="hostNameVariable")
    def host_name_variable(self) -> Optional[_builtins.str]:
        """
        Variable name
        """
        return pulumi.get(self, "host_name_variable")

    @_builtins.property
    @pulumi.getter(name="listOfIps")
    def list_of_ips(self) -> Optional[Sequence[_builtins.str]]:
        """
        List of IP
        """
        return pulumi.get(self, "list_of_ips")

    @_builtins.property
    @pulumi.getter(name="listOfIpsVariable")
    def list_of_ips_variable(self) -> Optional[_builtins.str]:
        """
        Variable name
        """
        return pulumi.get(self, "list_of_ips_variable")


@pulumi.output_type
class ServiceLanVpnFeatureIpsecRoute(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "interfaceVariable":
            suggest = "interface_variable"
        elif key == "networkAddress":
            suggest = "network_address"
        elif key == "networkAddressVariable":
            suggest = "network_address_variable"
        elif key == "subnetMask":
            suggest = "subnet_mask"
        elif key == "subnetMaskVariable":
            suggest = "subnet_mask_variable"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ServiceLanVpnFeatureIpsecRoute. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ServiceLanVpnFeatureIpsecRoute.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ServiceLanVpnFeatureIpsecRoute.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 interface_variable: Optional[_builtins.str] = None,
                 interfaces: Optional[Sequence[_builtins.str]] = None,
                 network_address: Optional[_builtins.str] = None,
                 network_address_variable: Optional[_builtins.str] = None,
                 subnet_mask: Optional[_builtins.str] = None,
                 subnet_mask_variable: Optional[_builtins.str] = None):
        """
        :param _builtins.str interface_variable: Variable name
        :param Sequence[_builtins.str] interfaces: Interface
        :param _builtins.str network_address: IP Address
        :param _builtins.str network_address_variable: Variable name
        :param _builtins.str subnet_mask: Subnet Mask
                 - Choices: `255.255.255.255`, `255.255.255.254`, `255.255.255.252`, `255.255.255.248`, `255.255.255.240`, `255.255.255.224`, `255.255.255.192`, `255.255.255.128`, `255.255.255.0`, `255.255.254.0`, `255.255.252.0`, `255.255.248.0`, `255.255.240.0`, `255.255.224.0`, `255.255.192.0`, `255.255.128.0`, `255.255.0.0`, `255.254.0.0`, `255.252.0.0`, `255.240.0.0`, `255.224.0.0`, `255.192.0.0`, `255.128.0.0`, `255.0.0.0`, `254.0.0.0`, `252.0.0.0`, `248.0.0.0`, `240.0.0.0`, `224.0.0.0`, `192.0.0.0`, `128.0.0.0`, `0.0.0.0`
        :param _builtins.str subnet_mask_variable: Variable name
        """
        if interface_variable is not None:
            pulumi.set(__self__, "interface_variable", interface_variable)
        if interfaces is not None:
            pulumi.set(__self__, "interfaces", interfaces)
        if network_address is not None:
            pulumi.set(__self__, "network_address", network_address)
        if network_address_variable is not None:
            pulumi.set(__self__, "network_address_variable", network_address_variable)
        if subnet_mask is not None:
            pulumi.set(__self__, "subnet_mask", subnet_mask)
        if subnet_mask_variable is not None:
            pulumi.set(__self__, "subnet_mask_variable", subnet_mask_variable)

    @_builtins.property
    @pulumi.getter(name="interfaceVariable")
    def interface_variable(self) -> Optional[_builtins.str]:
        """
        Variable name
        """
        return pulumi.get(self, "interface_variable")

    @_builtins.property
    @pulumi.getter
    def interfaces(self) -> Optional[Sequence[_builtins.str]]:
        """
        Interface
        """
        return pulumi.get(self, "interfaces")

    @_builtins.property
    @pulumi.getter(name="networkAddress")
    def network_address(self) -> Optional[_builtins.str]:
        """
        IP Address
        """
        return pulumi.get(self, "network_address")

    @_builtins.property
    @pulumi.getter(name="networkAddressVariable")
    def network_address_variable(self) -> Optional[_builtins.str]:
        """
        Variable name
        """
        return pulumi.get(self, "network_address_variable")

    @_builtins.property
    @pulumi.getter(name="subnetMask")
    def subnet_mask(self) -> Optional[_builtins.str]:
        """
        Subnet Mask
          - Choices: `255.255.255.255`, `255.255.255.254`, `255.255.255.252`, `255.255.255.248`, `255.255.255.240`, `255.255.255.224`, `255.255.255.192`, `255.255.255.128`, `255.255.255.0`, `255.255.254.0`, `255.255.252.0`, `255.255.248.0`, `255.255.240.0`, `255.255.224.0`, `255.255.192.0`, `255.255.128.0`, `255.255.0.0`, `255.254.0.0`, `255.252.0.0`, `255.240.0.0`, `255.224.0.0`, `255.192.0.0`, `255.128.0.0`, `255.0.0.0`, `254.0.0.0`, `252.0.0.0`, `248.0.0.0`, `240.0.0.0`, `224.0.0.0`, `192.0.0.0`, `128.0.0.0`, `0.0.0.0`
        """
        return pulumi.get(self, "subnet_mask")

    @_builtins.property
    @pulumi.getter(name="subnetMaskVariable")
    def subnet_mask_variable(self) -> Optional[_builtins.str]:
        """
        Variable name
        """
        return pulumi.get(self, "subnet_mask_variable")


@pulumi.output_type
class ServiceLanVpnFeatureIpv4ExportRouteTarget(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "routeTarget":
            suggest = "route_target"
        elif key == "routeTargetVariable":
            suggest = "route_target_variable"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ServiceLanVpnFeatureIpv4ExportRouteTarget. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ServiceLanVpnFeatureIpv4ExportRouteTarget.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ServiceLanVpnFeatureIpv4ExportRouteTarget.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 route_target: Optional[_builtins.str] = None,
                 route_target_variable: Optional[_builtins.str] = None):
        """
        :param _builtins.str route_target: Route target
        :param _builtins.str route_target_variable: Variable name
        """
        if route_target is not None:
            pulumi.set(__self__, "route_target", route_target)
        if route_target_variable is not None:
            pulumi.set(__self__, "route_target_variable", route_target_variable)

    @_builtins.property
    @pulumi.getter(name="routeTarget")
    def route_target(self) -> Optional[_builtins.str]:
        """
        Route target
        """
        return pulumi.get(self, "route_target")

    @_builtins.property
    @pulumi.getter(name="routeTargetVariable")
    def route_target_variable(self) -> Optional[_builtins.str]:
        """
        Variable name
        """
        return pulumi.get(self, "route_target_variable")


@pulumi.output_type
class ServiceLanVpnFeatureIpv4ImportRouteTarget(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "routeTarget":
            suggest = "route_target"
        elif key == "routeTargetVariable":
            suggest = "route_target_variable"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ServiceLanVpnFeatureIpv4ImportRouteTarget. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ServiceLanVpnFeatureIpv4ImportRouteTarget.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ServiceLanVpnFeatureIpv4ImportRouteTarget.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 route_target: Optional[_builtins.str] = None,
                 route_target_variable: Optional[_builtins.str] = None):
        """
        :param _builtins.str route_target: Route target
        :param _builtins.str route_target_variable: Variable name
        """
        if route_target is not None:
            pulumi.set(__self__, "route_target", route_target)
        if route_target_variable is not None:
            pulumi.set(__self__, "route_target_variable", route_target_variable)

    @_builtins.property
    @pulumi.getter(name="routeTarget")
    def route_target(self) -> Optional[_builtins.str]:
        """
        Route target
        """
        return pulumi.get(self, "route_target")

    @_builtins.property
    @pulumi.getter(name="routeTargetVariable")
    def route_target_variable(self) -> Optional[_builtins.str]:
        """
        Variable name
        """
        return pulumi.get(self, "route_target_variable")


@pulumi.output_type
class ServiceLanVpnFeatureIpv4StaticRoute(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "networkAddress":
            suggest = "network_address"
        elif key == "networkAddressVariable":
            suggest = "network_address_variable"
        elif key == "nextHopWithTrackers":
            suggest = "next_hop_with_trackers"
        elif key == "nextHops":
            suggest = "next_hops"
        elif key == "subnetMask":
            suggest = "subnet_mask"
        elif key == "subnetMaskVariable":
            suggest = "subnet_mask_variable"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ServiceLanVpnFeatureIpv4StaticRoute. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ServiceLanVpnFeatureIpv4StaticRoute.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ServiceLanVpnFeatureIpv4StaticRoute.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 dhcp: Optional[_builtins.bool] = None,
                 gateway: Optional[_builtins.str] = None,
                 network_address: Optional[_builtins.str] = None,
                 network_address_variable: Optional[_builtins.str] = None,
                 next_hop_with_trackers: Optional[Sequence['outputs.ServiceLanVpnFeatureIpv4StaticRouteNextHopWithTracker']] = None,
                 next_hops: Optional[Sequence['outputs.ServiceLanVpnFeatureIpv4StaticRouteNextHop']] = None,
                 null0: Optional[_builtins.bool] = None,
                 subnet_mask: Optional[_builtins.str] = None,
                 subnet_mask_variable: Optional[_builtins.str] = None,
                 vpn: Optional[_builtins.bool] = None):
        """
        :param _builtins.bool dhcp: IPv4 Route Gateway DHCP, Attribute conditional on `gateway` being equal to `dhcp`
        :param _builtins.str gateway: Gateway type
                 - Choices: `nextHop`, `null0`, `vpn`, `dhcp`
        :param _builtins.str network_address: IP Address
        :param _builtins.str network_address_variable: Variable name
        :param Sequence['ServiceLanVpnFeatureIpv4StaticRouteNextHopWithTrackerArgs'] next_hop_with_trackers: IPv4 Route Gateway Next Hop with Tracker, Attribute conditional on `gateway` being equal to `nextHop`
        :param Sequence['ServiceLanVpnFeatureIpv4StaticRouteNextHopArgs'] next_hops: IPv4 Route Gateway Next Hop, Attribute conditional on `gateway` being equal to `nextHop`
        :param _builtins.bool null0: IPv4 Route Gateway Next Hop, Attribute conditional on `gateway` being equal to `null0`
        :param _builtins.str subnet_mask: Subnet Mask
                 - Choices: `255.255.255.255`, `255.255.255.254`, `255.255.255.252`, `255.255.255.248`, `255.255.255.240`, `255.255.255.224`, `255.255.255.192`, `255.255.255.128`, `255.255.255.0`, `255.255.254.0`, `255.255.252.0`, `255.255.248.0`, `255.255.240.0`, `255.255.224.0`, `255.255.192.0`, `255.255.128.0`, `255.255.0.0`, `255.254.0.0`, `255.252.0.0`, `255.240.0.0`, `255.224.0.0`, `255.192.0.0`, `255.128.0.0`, `255.0.0.0`, `254.0.0.0`, `252.0.0.0`, `248.0.0.0`, `240.0.0.0`, `224.0.0.0`, `192.0.0.0`, `128.0.0.0`, `0.0.0.0`
        :param _builtins.str subnet_mask_variable: Variable name
        :param _builtins.bool vpn: IPv4 Route Gateway VPN, Attribute conditional on `gateway` being equal to `vpn`
        """
        if dhcp is not None:
            pulumi.set(__self__, "dhcp", dhcp)
        if gateway is not None:
            pulumi.set(__self__, "gateway", gateway)
        if network_address is not None:
            pulumi.set(__self__, "network_address", network_address)
        if network_address_variable is not None:
            pulumi.set(__self__, "network_address_variable", network_address_variable)
        if next_hop_with_trackers is not None:
            pulumi.set(__self__, "next_hop_with_trackers", next_hop_with_trackers)
        if next_hops is not None:
            pulumi.set(__self__, "next_hops", next_hops)
        if null0 is not None:
            pulumi.set(__self__, "null0", null0)
        if subnet_mask is not None:
            pulumi.set(__self__, "subnet_mask", subnet_mask)
        if subnet_mask_variable is not None:
            pulumi.set(__self__, "subnet_mask_variable", subnet_mask_variable)
        if vpn is not None:
            pulumi.set(__self__, "vpn", vpn)

    @_builtins.property
    @pulumi.getter
    def dhcp(self) -> Optional[_builtins.bool]:
        """
        IPv4 Route Gateway DHCP, Attribute conditional on `gateway` being equal to `dhcp`
        """
        return pulumi.get(self, "dhcp")

    @_builtins.property
    @pulumi.getter
    def gateway(self) -> Optional[_builtins.str]:
        """
        Gateway type
          - Choices: `nextHop`, `null0`, `vpn`, `dhcp`
        """
        return pulumi.get(self, "gateway")

    @_builtins.property
    @pulumi.getter(name="networkAddress")
    def network_address(self) -> Optional[_builtins.str]:
        """
        IP Address
        """
        return pulumi.get(self, "network_address")

    @_builtins.property
    @pulumi.getter(name="networkAddressVariable")
    def network_address_variable(self) -> Optional[_builtins.str]:
        """
        Variable name
        """
        return pulumi.get(self, "network_address_variable")

    @_builtins.property
    @pulumi.getter(name="nextHopWithTrackers")
    def next_hop_with_trackers(self) -> Optional[Sequence['outputs.ServiceLanVpnFeatureIpv4StaticRouteNextHopWithTracker']]:
        """
        IPv4 Route Gateway Next Hop with Tracker, Attribute conditional on `gateway` being equal to `nextHop`
        """
        return pulumi.get(self, "next_hop_with_trackers")

    @_builtins.property
    @pulumi.getter(name="nextHops")
    def next_hops(self) -> Optional[Sequence['outputs.ServiceLanVpnFeatureIpv4StaticRouteNextHop']]:
        """
        IPv4 Route Gateway Next Hop, Attribute conditional on `gateway` being equal to `nextHop`
        """
        return pulumi.get(self, "next_hops")

    @_builtins.property
    @pulumi.getter
    def null0(self) -> Optional[_builtins.bool]:
        """
        IPv4 Route Gateway Next Hop, Attribute conditional on `gateway` being equal to `null0`
        """
        return pulumi.get(self, "null0")

    @_builtins.property
    @pulumi.getter(name="subnetMask")
    def subnet_mask(self) -> Optional[_builtins.str]:
        """
        Subnet Mask
          - Choices: `255.255.255.255`, `255.255.255.254`, `255.255.255.252`, `255.255.255.248`, `255.255.255.240`, `255.255.255.224`, `255.255.255.192`, `255.255.255.128`, `255.255.255.0`, `255.255.254.0`, `255.255.252.0`, `255.255.248.0`, `255.255.240.0`, `255.255.224.0`, `255.255.192.0`, `255.255.128.0`, `255.255.0.0`, `255.254.0.0`, `255.252.0.0`, `255.240.0.0`, `255.224.0.0`, `255.192.0.0`, `255.128.0.0`, `255.0.0.0`, `254.0.0.0`, `252.0.0.0`, `248.0.0.0`, `240.0.0.0`, `224.0.0.0`, `192.0.0.0`, `128.0.0.0`, `0.0.0.0`
        """
        return pulumi.get(self, "subnet_mask")

    @_builtins.property
    @pulumi.getter(name="subnetMaskVariable")
    def subnet_mask_variable(self) -> Optional[_builtins.str]:
        """
        Variable name
        """
        return pulumi.get(self, "subnet_mask_variable")

    @_builtins.property
    @pulumi.getter
    def vpn(self) -> Optional[_builtins.bool]:
        """
        IPv4 Route Gateway VPN, Attribute conditional on `gateway` being equal to `vpn`
        """
        return pulumi.get(self, "vpn")


@pulumi.output_type
class ServiceLanVpnFeatureIpv4StaticRouteNextHop(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "addressVariable":
            suggest = "address_variable"
        elif key == "administrativeDistance":
            suggest = "administrative_distance"
        elif key == "administrativeDistanceVariable":
            suggest = "administrative_distance_variable"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ServiceLanVpnFeatureIpv4StaticRouteNextHop. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ServiceLanVpnFeatureIpv4StaticRouteNextHop.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ServiceLanVpnFeatureIpv4StaticRouteNextHop.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 address: Optional[_builtins.str] = None,
                 address_variable: Optional[_builtins.str] = None,
                 administrative_distance: Optional[_builtins.int] = None,
                 administrative_distance_variable: Optional[_builtins.str] = None):
        """
        :param _builtins.str address: Address
        :param _builtins.str address_variable: Variable name
        :param _builtins.int administrative_distance: Administrative distance
                 - Range: `1`-`255`
                 - Default value: `1`
        :param _builtins.str administrative_distance_variable: Variable name
        """
        if address is not None:
            pulumi.set(__self__, "address", address)
        if address_variable is not None:
            pulumi.set(__self__, "address_variable", address_variable)
        if administrative_distance is not None:
            pulumi.set(__self__, "administrative_distance", administrative_distance)
        if administrative_distance_variable is not None:
            pulumi.set(__self__, "administrative_distance_variable", administrative_distance_variable)

    @_builtins.property
    @pulumi.getter
    def address(self) -> Optional[_builtins.str]:
        """
        Address
        """
        return pulumi.get(self, "address")

    @_builtins.property
    @pulumi.getter(name="addressVariable")
    def address_variable(self) -> Optional[_builtins.str]:
        """
        Variable name
        """
        return pulumi.get(self, "address_variable")

    @_builtins.property
    @pulumi.getter(name="administrativeDistance")
    def administrative_distance(self) -> Optional[_builtins.int]:
        """
        Administrative distance
          - Range: `1`-`255`
          - Default value: `1`
        """
        return pulumi.get(self, "administrative_distance")

    @_builtins.property
    @pulumi.getter(name="administrativeDistanceVariable")
    def administrative_distance_variable(self) -> Optional[_builtins.str]:
        """
        Variable name
        """
        return pulumi.get(self, "administrative_distance_variable")


@pulumi.output_type
class ServiceLanVpnFeatureIpv4StaticRouteNextHopWithTracker(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "addressVariable":
            suggest = "address_variable"
        elif key == "administrativeDistance":
            suggest = "administrative_distance"
        elif key == "administrativeDistanceVariable":
            suggest = "administrative_distance_variable"
        elif key == "trackerId":
            suggest = "tracker_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ServiceLanVpnFeatureIpv4StaticRouteNextHopWithTracker. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ServiceLanVpnFeatureIpv4StaticRouteNextHopWithTracker.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ServiceLanVpnFeatureIpv4StaticRouteNextHopWithTracker.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 address: Optional[_builtins.str] = None,
                 address_variable: Optional[_builtins.str] = None,
                 administrative_distance: Optional[_builtins.int] = None,
                 administrative_distance_variable: Optional[_builtins.str] = None,
                 tracker_id: Optional[_builtins.str] = None):
        """
        :param _builtins.str address: Address
        :param _builtins.str address_variable: Variable name
        :param _builtins.int administrative_distance: Administrative distance
                 - Range: `1`-`255`
                 - Default value: `1`
        :param _builtins.str administrative_distance_variable: Variable name
        """
        if address is not None:
            pulumi.set(__self__, "address", address)
        if address_variable is not None:
            pulumi.set(__self__, "address_variable", address_variable)
        if administrative_distance is not None:
            pulumi.set(__self__, "administrative_distance", administrative_distance)
        if administrative_distance_variable is not None:
            pulumi.set(__self__, "administrative_distance_variable", administrative_distance_variable)
        if tracker_id is not None:
            pulumi.set(__self__, "tracker_id", tracker_id)

    @_builtins.property
    @pulumi.getter
    def address(self) -> Optional[_builtins.str]:
        """
        Address
        """
        return pulumi.get(self, "address")

    @_builtins.property
    @pulumi.getter(name="addressVariable")
    def address_variable(self) -> Optional[_builtins.str]:
        """
        Variable name
        """
        return pulumi.get(self, "address_variable")

    @_builtins.property
    @pulumi.getter(name="administrativeDistance")
    def administrative_distance(self) -> Optional[_builtins.int]:
        """
        Administrative distance
          - Range: `1`-`255`
          - Default value: `1`
        """
        return pulumi.get(self, "administrative_distance")

    @_builtins.property
    @pulumi.getter(name="administrativeDistanceVariable")
    def administrative_distance_variable(self) -> Optional[_builtins.str]:
        """
        Variable name
        """
        return pulumi.get(self, "administrative_distance_variable")

    @_builtins.property
    @pulumi.getter(name="trackerId")
    def tracker_id(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "tracker_id")


@pulumi.output_type
class ServiceLanVpnFeatureIpv6ExportRouteTarget(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "routeTarget":
            suggest = "route_target"
        elif key == "routeTargetVariable":
            suggest = "route_target_variable"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ServiceLanVpnFeatureIpv6ExportRouteTarget. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ServiceLanVpnFeatureIpv6ExportRouteTarget.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ServiceLanVpnFeatureIpv6ExportRouteTarget.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 route_target: Optional[_builtins.str] = None,
                 route_target_variable: Optional[_builtins.str] = None):
        """
        :param _builtins.str route_target: Route target
        :param _builtins.str route_target_variable: Variable name
        """
        if route_target is not None:
            pulumi.set(__self__, "route_target", route_target)
        if route_target_variable is not None:
            pulumi.set(__self__, "route_target_variable", route_target_variable)

    @_builtins.property
    @pulumi.getter(name="routeTarget")
    def route_target(self) -> Optional[_builtins.str]:
        """
        Route target
        """
        return pulumi.get(self, "route_target")

    @_builtins.property
    @pulumi.getter(name="routeTargetVariable")
    def route_target_variable(self) -> Optional[_builtins.str]:
        """
        Variable name
        """
        return pulumi.get(self, "route_target_variable")


@pulumi.output_type
class ServiceLanVpnFeatureIpv6ImportRouteTarget(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "routeTarget":
            suggest = "route_target"
        elif key == "routeTargetVariable":
            suggest = "route_target_variable"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ServiceLanVpnFeatureIpv6ImportRouteTarget. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ServiceLanVpnFeatureIpv6ImportRouteTarget.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ServiceLanVpnFeatureIpv6ImportRouteTarget.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 route_target: Optional[_builtins.str] = None,
                 route_target_variable: Optional[_builtins.str] = None):
        """
        :param _builtins.str route_target: Route target
        :param _builtins.str route_target_variable: Variable name
        """
        if route_target is not None:
            pulumi.set(__self__, "route_target", route_target)
        if route_target_variable is not None:
            pulumi.set(__self__, "route_target_variable", route_target_variable)

    @_builtins.property
    @pulumi.getter(name="routeTarget")
    def route_target(self) -> Optional[_builtins.str]:
        """
        Route target
        """
        return pulumi.get(self, "route_target")

    @_builtins.property
    @pulumi.getter(name="routeTargetVariable")
    def route_target_variable(self) -> Optional[_builtins.str]:
        """
        Variable name
        """
        return pulumi.get(self, "route_target_variable")


@pulumi.output_type
class ServiceLanVpnFeatureIpv6StaticRoute(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "natVariable":
            suggest = "nat_variable"
        elif key == "nextHops":
            suggest = "next_hops"
        elif key == "prefixVariable":
            suggest = "prefix_variable"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ServiceLanVpnFeatureIpv6StaticRoute. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ServiceLanVpnFeatureIpv6StaticRoute.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ServiceLanVpnFeatureIpv6StaticRoute.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 gateway: Optional[_builtins.str] = None,
                 nat: Optional[_builtins.str] = None,
                 nat_variable: Optional[_builtins.str] = None,
                 next_hops: Optional[Sequence['outputs.ServiceLanVpnFeatureIpv6StaticRouteNextHop']] = None,
                 null0: Optional[_builtins.bool] = None,
                 prefix: Optional[_builtins.str] = None,
                 prefix_variable: Optional[_builtins.str] = None):
        """
        :param _builtins.str gateway: Gateway type
                 - Choices: `nextHop`, `null0`, `nat`
        :param _builtins.str nat: IPv6 Nat, Attribute conditional on `gateway` being equal to `nat`
                 - Choices: `NAT64`, `NAT66`
        :param _builtins.str nat_variable: Variable name, Attribute conditional on `gateway` being equal to `nat`
        :param Sequence['ServiceLanVpnFeatureIpv6StaticRouteNextHopArgs'] next_hops: IPv6 Route Gateway Next Hop, Attribute conditional on `gateway` being equal to `nextHop`
        :param _builtins.bool null0: IPv6 Route Gateway Next Hop, Attribute conditional on `gateway` being equal to `null0`
        :param _builtins.str prefix: Prefix
        :param _builtins.str prefix_variable: Variable name
        """
        if gateway is not None:
            pulumi.set(__self__, "gateway", gateway)
        if nat is not None:
            pulumi.set(__self__, "nat", nat)
        if nat_variable is not None:
            pulumi.set(__self__, "nat_variable", nat_variable)
        if next_hops is not None:
            pulumi.set(__self__, "next_hops", next_hops)
        if null0 is not None:
            pulumi.set(__self__, "null0", null0)
        if prefix is not None:
            pulumi.set(__self__, "prefix", prefix)
        if prefix_variable is not None:
            pulumi.set(__self__, "prefix_variable", prefix_variable)

    @_builtins.property
    @pulumi.getter
    def gateway(self) -> Optional[_builtins.str]:
        """
        Gateway type
          - Choices: `nextHop`, `null0`, `nat`
        """
        return pulumi.get(self, "gateway")

    @_builtins.property
    @pulumi.getter
    def nat(self) -> Optional[_builtins.str]:
        """
        IPv6 Nat, Attribute conditional on `gateway` being equal to `nat`
          - Choices: `NAT64`, `NAT66`
        """
        return pulumi.get(self, "nat")

    @_builtins.property
    @pulumi.getter(name="natVariable")
    def nat_variable(self) -> Optional[_builtins.str]:
        """
        Variable name, Attribute conditional on `gateway` being equal to `nat`
        """
        return pulumi.get(self, "nat_variable")

    @_builtins.property
    @pulumi.getter(name="nextHops")
    def next_hops(self) -> Optional[Sequence['outputs.ServiceLanVpnFeatureIpv6StaticRouteNextHop']]:
        """
        IPv6 Route Gateway Next Hop, Attribute conditional on `gateway` being equal to `nextHop`
        """
        return pulumi.get(self, "next_hops")

    @_builtins.property
    @pulumi.getter
    def null0(self) -> Optional[_builtins.bool]:
        """
        IPv6 Route Gateway Next Hop, Attribute conditional on `gateway` being equal to `null0`
        """
        return pulumi.get(self, "null0")

    @_builtins.property
    @pulumi.getter
    def prefix(self) -> Optional[_builtins.str]:
        """
        Prefix
        """
        return pulumi.get(self, "prefix")

    @_builtins.property
    @pulumi.getter(name="prefixVariable")
    def prefix_variable(self) -> Optional[_builtins.str]:
        """
        Variable name
        """
        return pulumi.get(self, "prefix_variable")


@pulumi.output_type
class ServiceLanVpnFeatureIpv6StaticRouteNextHop(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "addressVariable":
            suggest = "address_variable"
        elif key == "administrativeDistance":
            suggest = "administrative_distance"
        elif key == "administrativeDistanceVariable":
            suggest = "administrative_distance_variable"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ServiceLanVpnFeatureIpv6StaticRouteNextHop. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ServiceLanVpnFeatureIpv6StaticRouteNextHop.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ServiceLanVpnFeatureIpv6StaticRouteNextHop.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 address: Optional[_builtins.str] = None,
                 address_variable: Optional[_builtins.str] = None,
                 administrative_distance: Optional[_builtins.int] = None,
                 administrative_distance_variable: Optional[_builtins.str] = None):
        """
        :param _builtins.str address: Address
        :param _builtins.str address_variable: Variable name
        :param _builtins.int administrative_distance: Administrative distance
                 - Range: `1`-`254`
                 - Default value: `1`
        :param _builtins.str administrative_distance_variable: Variable name
        """
        if address is not None:
            pulumi.set(__self__, "address", address)
        if address_variable is not None:
            pulumi.set(__self__, "address_variable", address_variable)
        if administrative_distance is not None:
            pulumi.set(__self__, "administrative_distance", administrative_distance)
        if administrative_distance_variable is not None:
            pulumi.set(__self__, "administrative_distance_variable", administrative_distance_variable)

    @_builtins.property
    @pulumi.getter
    def address(self) -> Optional[_builtins.str]:
        """
        Address
        """
        return pulumi.get(self, "address")

    @_builtins.property
    @pulumi.getter(name="addressVariable")
    def address_variable(self) -> Optional[_builtins.str]:
        """
        Variable name
        """
        return pulumi.get(self, "address_variable")

    @_builtins.property
    @pulumi.getter(name="administrativeDistance")
    def administrative_distance(self) -> Optional[_builtins.int]:
        """
        Administrative distance
          - Range: `1`-`254`
          - Default value: `1`
        """
        return pulumi.get(self, "administrative_distance")

    @_builtins.property
    @pulumi.getter(name="administrativeDistanceVariable")
    def administrative_distance_variable(self) -> Optional[_builtins.str]:
        """
        Variable name
        """
        return pulumi.get(self, "administrative_distance_variable")


@pulumi.output_type
class ServiceLanVpnFeatureNat64V4Pool(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "nameVariable":
            suggest = "name_variable"
        elif key == "overloadVariable":
            suggest = "overload_variable"
        elif key == "rangeEnd":
            suggest = "range_end"
        elif key == "rangeEndVariable":
            suggest = "range_end_variable"
        elif key == "rangeStart":
            suggest = "range_start"
        elif key == "rangeStartVariable":
            suggest = "range_start_variable"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ServiceLanVpnFeatureNat64V4Pool. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ServiceLanVpnFeatureNat64V4Pool.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ServiceLanVpnFeatureNat64V4Pool.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 name: Optional[_builtins.str] = None,
                 name_variable: Optional[_builtins.str] = None,
                 overload: Optional[_builtins.bool] = None,
                 overload_variable: Optional[_builtins.str] = None,
                 range_end: Optional[_builtins.str] = None,
                 range_end_variable: Optional[_builtins.str] = None,
                 range_start: Optional[_builtins.str] = None,
                 range_start_variable: Optional[_builtins.str] = None):
        """
        :param _builtins.str name: NAT64 v4 Pool Name
        :param _builtins.str name_variable: Variable name
        :param _builtins.bool overload: NAT64 Overload
                 - Default value: `false`
        :param _builtins.str overload_variable: Variable name
        :param _builtins.str range_end: NAT64 Pool Range End
        :param _builtins.str range_end_variable: Variable name
        :param _builtins.str range_start: NAT64 Pool Range Start
        :param _builtins.str range_start_variable: Variable name
        """
        if name is not None:
            pulumi.set(__self__, "name", name)
        if name_variable is not None:
            pulumi.set(__self__, "name_variable", name_variable)
        if overload is not None:
            pulumi.set(__self__, "overload", overload)
        if overload_variable is not None:
            pulumi.set(__self__, "overload_variable", overload_variable)
        if range_end is not None:
            pulumi.set(__self__, "range_end", range_end)
        if range_end_variable is not None:
            pulumi.set(__self__, "range_end_variable", range_end_variable)
        if range_start is not None:
            pulumi.set(__self__, "range_start", range_start)
        if range_start_variable is not None:
            pulumi.set(__self__, "range_start_variable", range_start_variable)

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[_builtins.str]:
        """
        NAT64 v4 Pool Name
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter(name="nameVariable")
    def name_variable(self) -> Optional[_builtins.str]:
        """
        Variable name
        """
        return pulumi.get(self, "name_variable")

    @_builtins.property
    @pulumi.getter
    def overload(self) -> Optional[_builtins.bool]:
        """
        NAT64 Overload
          - Default value: `false`
        """
        return pulumi.get(self, "overload")

    @_builtins.property
    @pulumi.getter(name="overloadVariable")
    def overload_variable(self) -> Optional[_builtins.str]:
        """
        Variable name
        """
        return pulumi.get(self, "overload_variable")

    @_builtins.property
    @pulumi.getter(name="rangeEnd")
    def range_end(self) -> Optional[_builtins.str]:
        """
        NAT64 Pool Range End
        """
        return pulumi.get(self, "range_end")

    @_builtins.property
    @pulumi.getter(name="rangeEndVariable")
    def range_end_variable(self) -> Optional[_builtins.str]:
        """
        Variable name
        """
        return pulumi.get(self, "range_end_variable")

    @_builtins.property
    @pulumi.getter(name="rangeStart")
    def range_start(self) -> Optional[_builtins.str]:
        """
        NAT64 Pool Range Start
        """
        return pulumi.get(self, "range_start")

    @_builtins.property
    @pulumi.getter(name="rangeStartVariable")
    def range_start_variable(self) -> Optional[_builtins.str]:
        """
        Variable name
        """
        return pulumi.get(self, "range_start_variable")


@pulumi.output_type
class ServiceLanVpnFeatureNatPool(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "directionVariable":
            suggest = "direction_variable"
        elif key == "natPoolName":
            suggest = "nat_pool_name"
        elif key == "natPoolNameVariable":
            suggest = "nat_pool_name_variable"
        elif key == "overloadVariable":
            suggest = "overload_variable"
        elif key == "prefixLength":
            suggest = "prefix_length"
        elif key == "prefixLengthVariable":
            suggest = "prefix_length_variable"
        elif key == "rangeEnd":
            suggest = "range_end"
        elif key == "rangeEndVariable":
            suggest = "range_end_variable"
        elif key == "rangeStart":
            suggest = "range_start"
        elif key == "rangeStartVariable":
            suggest = "range_start_variable"
        elif key == "trackerObjectId":
            suggest = "tracker_object_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ServiceLanVpnFeatureNatPool. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ServiceLanVpnFeatureNatPool.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ServiceLanVpnFeatureNatPool.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 direction: Optional[_builtins.str] = None,
                 direction_variable: Optional[_builtins.str] = None,
                 nat_pool_name: Optional[_builtins.int] = None,
                 nat_pool_name_variable: Optional[_builtins.str] = None,
                 overload: Optional[_builtins.bool] = None,
                 overload_variable: Optional[_builtins.str] = None,
                 prefix_length: Optional[_builtins.int] = None,
                 prefix_length_variable: Optional[_builtins.str] = None,
                 range_end: Optional[_builtins.str] = None,
                 range_end_variable: Optional[_builtins.str] = None,
                 range_start: Optional[_builtins.str] = None,
                 range_start_variable: Optional[_builtins.str] = None,
                 tracker_object_id: Optional[_builtins.str] = None):
        """
        :param _builtins.str direction: NAT Direction
                 - Choices: `inside`, `outside`
        :param _builtins.str direction_variable: Variable name
        :param _builtins.int nat_pool_name: NAT Pool Name
                 - Range: `1`-`32`
        :param _builtins.str nat_pool_name_variable: Variable name
        :param _builtins.bool overload: NAT Overload
                 - Default value: `true`
        :param _builtins.str overload_variable: Variable name
        :param _builtins.int prefix_length: NAT Pool Prefix Length
                 - Range: `1`-`32`
        :param _builtins.str prefix_length_variable: Variable name
        :param _builtins.str range_end: NAT Pool Range End
        :param _builtins.str range_end_variable: Variable name
        :param _builtins.str range_start: NAT Pool Range Start
        :param _builtins.str range_start_variable: Variable name
        """
        if direction is not None:
            pulumi.set(__self__, "direction", direction)
        if direction_variable is not None:
            pulumi.set(__self__, "direction_variable", direction_variable)
        if nat_pool_name is not None:
            pulumi.set(__self__, "nat_pool_name", nat_pool_name)
        if nat_pool_name_variable is not None:
            pulumi.set(__self__, "nat_pool_name_variable", nat_pool_name_variable)
        if overload is not None:
            pulumi.set(__self__, "overload", overload)
        if overload_variable is not None:
            pulumi.set(__self__, "overload_variable", overload_variable)
        if prefix_length is not None:
            pulumi.set(__self__, "prefix_length", prefix_length)
        if prefix_length_variable is not None:
            pulumi.set(__self__, "prefix_length_variable", prefix_length_variable)
        if range_end is not None:
            pulumi.set(__self__, "range_end", range_end)
        if range_end_variable is not None:
            pulumi.set(__self__, "range_end_variable", range_end_variable)
        if range_start is not None:
            pulumi.set(__self__, "range_start", range_start)
        if range_start_variable is not None:
            pulumi.set(__self__, "range_start_variable", range_start_variable)
        if tracker_object_id is not None:
            pulumi.set(__self__, "tracker_object_id", tracker_object_id)

    @_builtins.property
    @pulumi.getter
    def direction(self) -> Optional[_builtins.str]:
        """
        NAT Direction
          - Choices: `inside`, `outside`
        """
        return pulumi.get(self, "direction")

    @_builtins.property
    @pulumi.getter(name="directionVariable")
    def direction_variable(self) -> Optional[_builtins.str]:
        """
        Variable name
        """
        return pulumi.get(self, "direction_variable")

    @_builtins.property
    @pulumi.getter(name="natPoolName")
    def nat_pool_name(self) -> Optional[_builtins.int]:
        """
        NAT Pool Name
          - Range: `1`-`32`
        """
        return pulumi.get(self, "nat_pool_name")

    @_builtins.property
    @pulumi.getter(name="natPoolNameVariable")
    def nat_pool_name_variable(self) -> Optional[_builtins.str]:
        """
        Variable name
        """
        return pulumi.get(self, "nat_pool_name_variable")

    @_builtins.property
    @pulumi.getter
    def overload(self) -> Optional[_builtins.bool]:
        """
        NAT Overload
          - Default value: `true`
        """
        return pulumi.get(self, "overload")

    @_builtins.property
    @pulumi.getter(name="overloadVariable")
    def overload_variable(self) -> Optional[_builtins.str]:
        """
        Variable name
        """
        return pulumi.get(self, "overload_variable")

    @_builtins.property
    @pulumi.getter(name="prefixLength")
    def prefix_length(self) -> Optional[_builtins.int]:
        """
        NAT Pool Prefix Length
          - Range: `1`-`32`
        """
        return pulumi.get(self, "prefix_length")

    @_builtins.property
    @pulumi.getter(name="prefixLengthVariable")
    def prefix_length_variable(self) -> Optional[_builtins.str]:
        """
        Variable name
        """
        return pulumi.get(self, "prefix_length_variable")

    @_builtins.property
    @pulumi.getter(name="rangeEnd")
    def range_end(self) -> Optional[_builtins.str]:
        """
        NAT Pool Range End
        """
        return pulumi.get(self, "range_end")

    @_builtins.property
    @pulumi.getter(name="rangeEndVariable")
    def range_end_variable(self) -> Optional[_builtins.str]:
        """
        Variable name
        """
        return pulumi.get(self, "range_end_variable")

    @_builtins.property
    @pulumi.getter(name="rangeStart")
    def range_start(self) -> Optional[_builtins.str]:
        """
        NAT Pool Range Start
        """
        return pulumi.get(self, "range_start")

    @_builtins.property
    @pulumi.getter(name="rangeStartVariable")
    def range_start_variable(self) -> Optional[_builtins.str]:
        """
        Variable name
        """
        return pulumi.get(self, "range_start_variable")

    @_builtins.property
    @pulumi.getter(name="trackerObjectId")
    def tracker_object_id(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "tracker_object_id")


@pulumi.output_type
class ServiceLanVpnFeatureNatPortForward(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "natPoolName":
            suggest = "nat_pool_name"
        elif key == "natPoolNameVariable":
            suggest = "nat_pool_name_variable"
        elif key == "protocolVariable":
            suggest = "protocol_variable"
        elif key == "sourceIp":
            suggest = "source_ip"
        elif key == "sourceIpVariable":
            suggest = "source_ip_variable"
        elif key == "sourcePort":
            suggest = "source_port"
        elif key == "sourcePortVariable":
            suggest = "source_port_variable"
        elif key == "translatePort":
            suggest = "translate_port"
        elif key == "translatePortVariable":
            suggest = "translate_port_variable"
        elif key == "translatedSourceIp":
            suggest = "translated_source_ip"
        elif key == "translatedSourceIpVariable":
            suggest = "translated_source_ip_variable"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ServiceLanVpnFeatureNatPortForward. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ServiceLanVpnFeatureNatPortForward.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ServiceLanVpnFeatureNatPortForward.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 nat_pool_name: Optional[_builtins.int] = None,
                 nat_pool_name_variable: Optional[_builtins.str] = None,
                 protocol: Optional[_builtins.str] = None,
                 protocol_variable: Optional[_builtins.str] = None,
                 source_ip: Optional[_builtins.str] = None,
                 source_ip_variable: Optional[_builtins.str] = None,
                 source_port: Optional[_builtins.int] = None,
                 source_port_variable: Optional[_builtins.str] = None,
                 translate_port: Optional[_builtins.int] = None,
                 translate_port_variable: Optional[_builtins.str] = None,
                 translated_source_ip: Optional[_builtins.str] = None,
                 translated_source_ip_variable: Optional[_builtins.str] = None):
        """
        :param _builtins.int nat_pool_name: NAT Pool Name
                 - Range: `1`-`32`
        :param _builtins.str nat_pool_name_variable: Variable name
        :param _builtins.str protocol: Protocol
                 - Choices: `TCP`, `UDP`
        :param _builtins.str protocol_variable: Variable name
        :param _builtins.str source_ip: Source IP Address
        :param _builtins.str source_ip_variable: Variable name
        :param _builtins.int source_port: Source Port
        :param _builtins.str source_port_variable: Variable name
        :param _builtins.int translate_port: Translate Port
        :param _builtins.str translate_port_variable: Variable name
        :param _builtins.str translated_source_ip: Translated Source IP Address
        :param _builtins.str translated_source_ip_variable: Variable name
        """
        if nat_pool_name is not None:
            pulumi.set(__self__, "nat_pool_name", nat_pool_name)
        if nat_pool_name_variable is not None:
            pulumi.set(__self__, "nat_pool_name_variable", nat_pool_name_variable)
        if protocol is not None:
            pulumi.set(__self__, "protocol", protocol)
        if protocol_variable is not None:
            pulumi.set(__self__, "protocol_variable", protocol_variable)
        if source_ip is not None:
            pulumi.set(__self__, "source_ip", source_ip)
        if source_ip_variable is not None:
            pulumi.set(__self__, "source_ip_variable", source_ip_variable)
        if source_port is not None:
            pulumi.set(__self__, "source_port", source_port)
        if source_port_variable is not None:
            pulumi.set(__self__, "source_port_variable", source_port_variable)
        if translate_port is not None:
            pulumi.set(__self__, "translate_port", translate_port)
        if translate_port_variable is not None:
            pulumi.set(__self__, "translate_port_variable", translate_port_variable)
        if translated_source_ip is not None:
            pulumi.set(__self__, "translated_source_ip", translated_source_ip)
        if translated_source_ip_variable is not None:
            pulumi.set(__self__, "translated_source_ip_variable", translated_source_ip_variable)

    @_builtins.property
    @pulumi.getter(name="natPoolName")
    def nat_pool_name(self) -> Optional[_builtins.int]:
        """
        NAT Pool Name
          - Range: `1`-`32`
        """
        return pulumi.get(self, "nat_pool_name")

    @_builtins.property
    @pulumi.getter(name="natPoolNameVariable")
    def nat_pool_name_variable(self) -> Optional[_builtins.str]:
        """
        Variable name
        """
        return pulumi.get(self, "nat_pool_name_variable")

    @_builtins.property
    @pulumi.getter
    def protocol(self) -> Optional[_builtins.str]:
        """
        Protocol
          - Choices: `TCP`, `UDP`
        """
        return pulumi.get(self, "protocol")

    @_builtins.property
    @pulumi.getter(name="protocolVariable")
    def protocol_variable(self) -> Optional[_builtins.str]:
        """
        Variable name
        """
        return pulumi.get(self, "protocol_variable")

    @_builtins.property
    @pulumi.getter(name="sourceIp")
    def source_ip(self) -> Optional[_builtins.str]:
        """
        Source IP Address
        """
        return pulumi.get(self, "source_ip")

    @_builtins.property
    @pulumi.getter(name="sourceIpVariable")
    def source_ip_variable(self) -> Optional[_builtins.str]:
        """
        Variable name
        """
        return pulumi.get(self, "source_ip_variable")

    @_builtins.property
    @pulumi.getter(name="sourcePort")
    def source_port(self) -> Optional[_builtins.int]:
        """
        Source Port
        """
        return pulumi.get(self, "source_port")

    @_builtins.property
    @pulumi.getter(name="sourcePortVariable")
    def source_port_variable(self) -> Optional[_builtins.str]:
        """
        Variable name
        """
        return pulumi.get(self, "source_port_variable")

    @_builtins.property
    @pulumi.getter(name="translatePort")
    def translate_port(self) -> Optional[_builtins.int]:
        """
        Translate Port
        """
        return pulumi.get(self, "translate_port")

    @_builtins.property
    @pulumi.getter(name="translatePortVariable")
    def translate_port_variable(self) -> Optional[_builtins.str]:
        """
        Variable name
        """
        return pulumi.get(self, "translate_port_variable")

    @_builtins.property
    @pulumi.getter(name="translatedSourceIp")
    def translated_source_ip(self) -> Optional[_builtins.str]:
        """
        Translated Source IP Address
        """
        return pulumi.get(self, "translated_source_ip")

    @_builtins.property
    @pulumi.getter(name="translatedSourceIpVariable")
    def translated_source_ip_variable(self) -> Optional[_builtins.str]:
        """
        Variable name
        """
        return pulumi.get(self, "translated_source_ip_variable")


@pulumi.output_type
class ServiceLanVpnFeatureRouteLeakFromGlobalVpn(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "routePolicyId":
            suggest = "route_policy_id"
        elif key == "routeProtocol":
            suggest = "route_protocol"
        elif key == "routeProtocolVariable":
            suggest = "route_protocol_variable"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ServiceLanVpnFeatureRouteLeakFromGlobalVpn. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ServiceLanVpnFeatureRouteLeakFromGlobalVpn.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ServiceLanVpnFeatureRouteLeakFromGlobalVpn.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 redistributions: Optional[Sequence['outputs.ServiceLanVpnFeatureRouteLeakFromGlobalVpnRedistribution']] = None,
                 route_policy_id: Optional[_builtins.str] = None,
                 route_protocol: Optional[_builtins.str] = None,
                 route_protocol_variable: Optional[_builtins.str] = None):
        """
        :param Sequence['ServiceLanVpnFeatureRouteLeakFromGlobalVpnRedistributionArgs'] redistributions: Redistribute Routes to specific Protocol on Service VPN
        :param _builtins.str route_protocol: Leak Routes of particular protocol from Global to Service VPN
                 - Choices: `static`, `connected`, `bgp`, `ospf`
        :param _builtins.str route_protocol_variable: Variable name
        """
        if redistributions is not None:
            pulumi.set(__self__, "redistributions", redistributions)
        if route_policy_id is not None:
            pulumi.set(__self__, "route_policy_id", route_policy_id)
        if route_protocol is not None:
            pulumi.set(__self__, "route_protocol", route_protocol)
        if route_protocol_variable is not None:
            pulumi.set(__self__, "route_protocol_variable", route_protocol_variable)

    @_builtins.property
    @pulumi.getter
    def redistributions(self) -> Optional[Sequence['outputs.ServiceLanVpnFeatureRouteLeakFromGlobalVpnRedistribution']]:
        """
        Redistribute Routes to specific Protocol on Service VPN
        """
        return pulumi.get(self, "redistributions")

    @_builtins.property
    @pulumi.getter(name="routePolicyId")
    def route_policy_id(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "route_policy_id")

    @_builtins.property
    @pulumi.getter(name="routeProtocol")
    def route_protocol(self) -> Optional[_builtins.str]:
        """
        Leak Routes of particular protocol from Global to Service VPN
          - Choices: `static`, `connected`, `bgp`, `ospf`
        """
        return pulumi.get(self, "route_protocol")

    @_builtins.property
    @pulumi.getter(name="routeProtocolVariable")
    def route_protocol_variable(self) -> Optional[_builtins.str]:
        """
        Variable name
        """
        return pulumi.get(self, "route_protocol_variable")


@pulumi.output_type
class ServiceLanVpnFeatureRouteLeakFromGlobalVpnRedistribution(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "protocolVariable":
            suggest = "protocol_variable"
        elif key == "redistributionPolicyId":
            suggest = "redistribution_policy_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ServiceLanVpnFeatureRouteLeakFromGlobalVpnRedistribution. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ServiceLanVpnFeatureRouteLeakFromGlobalVpnRedistribution.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ServiceLanVpnFeatureRouteLeakFromGlobalVpnRedistribution.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 protocol: Optional[_builtins.str] = None,
                 protocol_variable: Optional[_builtins.str] = None,
                 redistribution_policy_id: Optional[_builtins.str] = None):
        """
        :param _builtins.str protocol: Protocol to restributed leaked routes
                 - Choices: `bgp`, `ospf`
        :param _builtins.str protocol_variable: Variable name
        """
        if protocol is not None:
            pulumi.set(__self__, "protocol", protocol)
        if protocol_variable is not None:
            pulumi.set(__self__, "protocol_variable", protocol_variable)
        if redistribution_policy_id is not None:
            pulumi.set(__self__, "redistribution_policy_id", redistribution_policy_id)

    @_builtins.property
    @pulumi.getter
    def protocol(self) -> Optional[_builtins.str]:
        """
        Protocol to restributed leaked routes
          - Choices: `bgp`, `ospf`
        """
        return pulumi.get(self, "protocol")

    @_builtins.property
    @pulumi.getter(name="protocolVariable")
    def protocol_variable(self) -> Optional[_builtins.str]:
        """
        Variable name
        """
        return pulumi.get(self, "protocol_variable")

    @_builtins.property
    @pulumi.getter(name="redistributionPolicyId")
    def redistribution_policy_id(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "redistribution_policy_id")


@pulumi.output_type
class ServiceLanVpnFeatureRouteLeakFromOtherService(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "routePolicyId":
            suggest = "route_policy_id"
        elif key == "routeProtocol":
            suggest = "route_protocol"
        elif key == "routeProtocolVariable":
            suggest = "route_protocol_variable"
        elif key == "sourceVpn":
            suggest = "source_vpn"
        elif key == "sourceVpnVariable":
            suggest = "source_vpn_variable"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ServiceLanVpnFeatureRouteLeakFromOtherService. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ServiceLanVpnFeatureRouteLeakFromOtherService.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ServiceLanVpnFeatureRouteLeakFromOtherService.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 redistributions: Optional[Sequence['outputs.ServiceLanVpnFeatureRouteLeakFromOtherServiceRedistribution']] = None,
                 route_policy_id: Optional[_builtins.str] = None,
                 route_protocol: Optional[_builtins.str] = None,
                 route_protocol_variable: Optional[_builtins.str] = None,
                 source_vpn: Optional[_builtins.int] = None,
                 source_vpn_variable: Optional[_builtins.str] = None):
        """
        :param Sequence['ServiceLanVpnFeatureRouteLeakFromOtherServiceRedistributionArgs'] redistributions: Redistribute Route to specific Protocol on Current Service VPN
        :param _builtins.str route_protocol: Leak Route of particular protocol from Source Service VPN
                 - Choices: `static`, `connected`, `bgp`, `ospf`
        :param _builtins.str route_protocol_variable: Variable name
        :param _builtins.int source_vpn: Source Service VPN from where route are to be leaked
                 - Range: `1`-`65530`
        :param _builtins.str source_vpn_variable: Variable name
        """
        if redistributions is not None:
            pulumi.set(__self__, "redistributions", redistributions)
        if route_policy_id is not None:
            pulumi.set(__self__, "route_policy_id", route_policy_id)
        if route_protocol is not None:
            pulumi.set(__self__, "route_protocol", route_protocol)
        if route_protocol_variable is not None:
            pulumi.set(__self__, "route_protocol_variable", route_protocol_variable)
        if source_vpn is not None:
            pulumi.set(__self__, "source_vpn", source_vpn)
        if source_vpn_variable is not None:
            pulumi.set(__self__, "source_vpn_variable", source_vpn_variable)

    @_builtins.property
    @pulumi.getter
    def redistributions(self) -> Optional[Sequence['outputs.ServiceLanVpnFeatureRouteLeakFromOtherServiceRedistribution']]:
        """
        Redistribute Route to specific Protocol on Current Service VPN
        """
        return pulumi.get(self, "redistributions")

    @_builtins.property
    @pulumi.getter(name="routePolicyId")
    def route_policy_id(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "route_policy_id")

    @_builtins.property
    @pulumi.getter(name="routeProtocol")
    def route_protocol(self) -> Optional[_builtins.str]:
        """
        Leak Route of particular protocol from Source Service VPN
          - Choices: `static`, `connected`, `bgp`, `ospf`
        """
        return pulumi.get(self, "route_protocol")

    @_builtins.property
    @pulumi.getter(name="routeProtocolVariable")
    def route_protocol_variable(self) -> Optional[_builtins.str]:
        """
        Variable name
        """
        return pulumi.get(self, "route_protocol_variable")

    @_builtins.property
    @pulumi.getter(name="sourceVpn")
    def source_vpn(self) -> Optional[_builtins.int]:
        """
        Source Service VPN from where route are to be leaked
          - Range: `1`-`65530`
        """
        return pulumi.get(self, "source_vpn")

    @_builtins.property
    @pulumi.getter(name="sourceVpnVariable")
    def source_vpn_variable(self) -> Optional[_builtins.str]:
        """
        Variable name
        """
        return pulumi.get(self, "source_vpn_variable")


@pulumi.output_type
class ServiceLanVpnFeatureRouteLeakFromOtherServiceRedistribution(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "protocolVariable":
            suggest = "protocol_variable"
        elif key == "redistributionPolicyId":
            suggest = "redistribution_policy_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ServiceLanVpnFeatureRouteLeakFromOtherServiceRedistribution. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ServiceLanVpnFeatureRouteLeakFromOtherServiceRedistribution.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ServiceLanVpnFeatureRouteLeakFromOtherServiceRedistribution.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 protocol: Optional[_builtins.str] = None,
                 protocol_variable: Optional[_builtins.str] = None,
                 redistribution_policy_id: Optional[_builtins.str] = None):
        """
        :param _builtins.str protocol: Protocol to restributed leaked routes
                 - Choices: `bgp`, `ospf`
        :param _builtins.str protocol_variable: Variable name
        """
        if protocol is not None:
            pulumi.set(__self__, "protocol", protocol)
        if protocol_variable is not None:
            pulumi.set(__self__, "protocol_variable", protocol_variable)
        if redistribution_policy_id is not None:
            pulumi.set(__self__, "redistribution_policy_id", redistribution_policy_id)

    @_builtins.property
    @pulumi.getter
    def protocol(self) -> Optional[_builtins.str]:
        """
        Protocol to restributed leaked routes
          - Choices: `bgp`, `ospf`
        """
        return pulumi.get(self, "protocol")

    @_builtins.property
    @pulumi.getter(name="protocolVariable")
    def protocol_variable(self) -> Optional[_builtins.str]:
        """
        Variable name
        """
        return pulumi.get(self, "protocol_variable")

    @_builtins.property
    @pulumi.getter(name="redistributionPolicyId")
    def redistribution_policy_id(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "redistribution_policy_id")


@pulumi.output_type
class ServiceLanVpnFeatureRouteLeakToGlobalVpn(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "routePolicyId":
            suggest = "route_policy_id"
        elif key == "routeProtocol":
            suggest = "route_protocol"
        elif key == "routeProtocolVariable":
            suggest = "route_protocol_variable"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ServiceLanVpnFeatureRouteLeakToGlobalVpn. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ServiceLanVpnFeatureRouteLeakToGlobalVpn.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ServiceLanVpnFeatureRouteLeakToGlobalVpn.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 redistributions: Optional[Sequence['outputs.ServiceLanVpnFeatureRouteLeakToGlobalVpnRedistribution']] = None,
                 route_policy_id: Optional[_builtins.str] = None,
                 route_protocol: Optional[_builtins.str] = None,
                 route_protocol_variable: Optional[_builtins.str] = None):
        """
        :param Sequence['ServiceLanVpnFeatureRouteLeakToGlobalVpnRedistributionArgs'] redistributions: Redistribute Routes to specific Protocol on Global VPN
        :param _builtins.str route_protocol: Leak Routes of particular protocol from Service to Global VPN
                 - Choices: `static`, `connected`, `bgp`, `ospf`
        :param _builtins.str route_protocol_variable: Variable name
        """
        if redistributions is not None:
            pulumi.set(__self__, "redistributions", redistributions)
        if route_policy_id is not None:
            pulumi.set(__self__, "route_policy_id", route_policy_id)
        if route_protocol is not None:
            pulumi.set(__self__, "route_protocol", route_protocol)
        if route_protocol_variable is not None:
            pulumi.set(__self__, "route_protocol_variable", route_protocol_variable)

    @_builtins.property
    @pulumi.getter
    def redistributions(self) -> Optional[Sequence['outputs.ServiceLanVpnFeatureRouteLeakToGlobalVpnRedistribution']]:
        """
        Redistribute Routes to specific Protocol on Global VPN
        """
        return pulumi.get(self, "redistributions")

    @_builtins.property
    @pulumi.getter(name="routePolicyId")
    def route_policy_id(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "route_policy_id")

    @_builtins.property
    @pulumi.getter(name="routeProtocol")
    def route_protocol(self) -> Optional[_builtins.str]:
        """
        Leak Routes of particular protocol from Service to Global VPN
          - Choices: `static`, `connected`, `bgp`, `ospf`
        """
        return pulumi.get(self, "route_protocol")

    @_builtins.property
    @pulumi.getter(name="routeProtocolVariable")
    def route_protocol_variable(self) -> Optional[_builtins.str]:
        """
        Variable name
        """
        return pulumi.get(self, "route_protocol_variable")


@pulumi.output_type
class ServiceLanVpnFeatureRouteLeakToGlobalVpnRedistribution(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "protocolVariable":
            suggest = "protocol_variable"
        elif key == "redistributionPolicyId":
            suggest = "redistribution_policy_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ServiceLanVpnFeatureRouteLeakToGlobalVpnRedistribution. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ServiceLanVpnFeatureRouteLeakToGlobalVpnRedistribution.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ServiceLanVpnFeatureRouteLeakToGlobalVpnRedistribution.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 protocol: Optional[_builtins.str] = None,
                 protocol_variable: Optional[_builtins.str] = None,
                 redistribution_policy_id: Optional[_builtins.str] = None):
        """
        :param _builtins.str protocol: Protocol to restributed leaked routes
                 - Choices: `bgp`, `ospf`
        :param _builtins.str protocol_variable: Variable name
        """
        if protocol is not None:
            pulumi.set(__self__, "protocol", protocol)
        if protocol_variable is not None:
            pulumi.set(__self__, "protocol_variable", protocol_variable)
        if redistribution_policy_id is not None:
            pulumi.set(__self__, "redistribution_policy_id", redistribution_policy_id)

    @_builtins.property
    @pulumi.getter
    def protocol(self) -> Optional[_builtins.str]:
        """
        Protocol to restributed leaked routes
          - Choices: `bgp`, `ospf`
        """
        return pulumi.get(self, "protocol")

    @_builtins.property
    @pulumi.getter(name="protocolVariable")
    def protocol_variable(self) -> Optional[_builtins.str]:
        """
        Variable name
        """
        return pulumi.get(self, "protocol_variable")

    @_builtins.property
    @pulumi.getter(name="redistributionPolicyId")
    def redistribution_policy_id(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "redistribution_policy_id")


@pulumi.output_type
class ServiceLanVpnFeatureService(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "ipv4Addresses":
            suggest = "ipv4_addresses"
        elif key == "ipv4AddressesVariable":
            suggest = "ipv4_addresses_variable"
        elif key == "serviceType":
            suggest = "service_type"
        elif key == "serviceTypeVariable":
            suggest = "service_type_variable"
        elif key == "trackingVariable":
            suggest = "tracking_variable"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ServiceLanVpnFeatureService. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ServiceLanVpnFeatureService.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ServiceLanVpnFeatureService.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 ipv4_addresses: Optional[Sequence[_builtins.str]] = None,
                 ipv4_addresses_variable: Optional[_builtins.str] = None,
                 service_type: Optional[_builtins.str] = None,
                 service_type_variable: Optional[_builtins.str] = None,
                 tracking: Optional[_builtins.bool] = None,
                 tracking_variable: Optional[_builtins.str] = None):
        """
        :param Sequence[_builtins.str] ipv4_addresses: IPv4 Addresses (Maximum: 4)
        :param _builtins.str ipv4_addresses_variable: Variable name
        :param _builtins.str service_type: Service Type
                 - Choices: `FW`, `IDS`, `IDP`, `netsvc1`, `netsvc2`, `netsvc3`, `netsvc4`, `TE`, `appqoe`
        :param _builtins.str service_type_variable: Variable name
        :param _builtins.bool tracking: Tracking
                 - Default value: `true`
        :param _builtins.str tracking_variable: Variable name
        """
        if ipv4_addresses is not None:
            pulumi.set(__self__, "ipv4_addresses", ipv4_addresses)
        if ipv4_addresses_variable is not None:
            pulumi.set(__self__, "ipv4_addresses_variable", ipv4_addresses_variable)
        if service_type is not None:
            pulumi.set(__self__, "service_type", service_type)
        if service_type_variable is not None:
            pulumi.set(__self__, "service_type_variable", service_type_variable)
        if tracking is not None:
            pulumi.set(__self__, "tracking", tracking)
        if tracking_variable is not None:
            pulumi.set(__self__, "tracking_variable", tracking_variable)

    @_builtins.property
    @pulumi.getter(name="ipv4Addresses")
    def ipv4_addresses(self) -> Optional[Sequence[_builtins.str]]:
        """
        IPv4 Addresses (Maximum: 4)
        """
        return pulumi.get(self, "ipv4_addresses")

    @_builtins.property
    @pulumi.getter(name="ipv4AddressesVariable")
    def ipv4_addresses_variable(self) -> Optional[_builtins.str]:
        """
        Variable name
        """
        return pulumi.get(self, "ipv4_addresses_variable")

    @_builtins.property
    @pulumi.getter(name="serviceType")
    def service_type(self) -> Optional[_builtins.str]:
        """
        Service Type
          - Choices: `FW`, `IDS`, `IDP`, `netsvc1`, `netsvc2`, `netsvc3`, `netsvc4`, `TE`, `appqoe`
        """
        return pulumi.get(self, "service_type")

    @_builtins.property
    @pulumi.getter(name="serviceTypeVariable")
    def service_type_variable(self) -> Optional[_builtins.str]:
        """
        Variable name
        """
        return pulumi.get(self, "service_type_variable")

    @_builtins.property
    @pulumi.getter
    def tracking(self) -> Optional[_builtins.bool]:
        """
        Tracking
          - Default value: `true`
        """
        return pulumi.get(self, "tracking")

    @_builtins.property
    @pulumi.getter(name="trackingVariable")
    def tracking_variable(self) -> Optional[_builtins.str]:
        """
        Variable name
        """
        return pulumi.get(self, "tracking_variable")


@pulumi.output_type
class ServiceLanVpnFeatureServiceRoute(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "networkAddress":
            suggest = "network_address"
        elif key == "networkAddressVariable":
            suggest = "network_address_variable"
        elif key == "serviceVariable":
            suggest = "service_variable"
        elif key == "subnetMask":
            suggest = "subnet_mask"
        elif key == "subnetMaskVariable":
            suggest = "subnet_mask_variable"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ServiceLanVpnFeatureServiceRoute. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ServiceLanVpnFeatureServiceRoute.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ServiceLanVpnFeatureServiceRoute.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 network_address: Optional[_builtins.str] = None,
                 network_address_variable: Optional[_builtins.str] = None,
                 service: Optional[_builtins.str] = None,
                 service_variable: Optional[_builtins.str] = None,
                 subnet_mask: Optional[_builtins.str] = None,
                 subnet_mask_variable: Optional[_builtins.str] = None,
                 vpn: Optional[_builtins.int] = None):
        """
        :param _builtins.str network_address: IP Address
        :param _builtins.str network_address_variable: Variable name
        :param _builtins.str service: Service
                 - Choices: `SIG`
                 - Default value: `SIG`
        :param _builtins.str service_variable: Variable name
        :param _builtins.str subnet_mask: Subnet Mask
                 - Choices: `255.255.255.255`, `255.255.255.254`, `255.255.255.252`, `255.255.255.248`, `255.255.255.240`, `255.255.255.224`, `255.255.255.192`, `255.255.255.128`, `255.255.255.0`, `255.255.254.0`, `255.255.252.0`, `255.255.248.0`, `255.255.240.0`, `255.255.224.0`, `255.255.192.0`, `255.255.128.0`, `255.255.0.0`, `255.254.0.0`, `255.252.0.0`, `255.240.0.0`, `255.224.0.0`, `255.192.0.0`, `255.128.0.0`, `255.0.0.0`, `254.0.0.0`, `252.0.0.0`, `248.0.0.0`, `240.0.0.0`, `224.0.0.0`, `192.0.0.0`, `128.0.0.0`, `0.0.0.0`
        :param _builtins.str subnet_mask_variable: Variable name
        :param _builtins.int vpn: Service
        """
        if network_address is not None:
            pulumi.set(__self__, "network_address", network_address)
        if network_address_variable is not None:
            pulumi.set(__self__, "network_address_variable", network_address_variable)
        if service is not None:
            pulumi.set(__self__, "service", service)
        if service_variable is not None:
            pulumi.set(__self__, "service_variable", service_variable)
        if subnet_mask is not None:
            pulumi.set(__self__, "subnet_mask", subnet_mask)
        if subnet_mask_variable is not None:
            pulumi.set(__self__, "subnet_mask_variable", subnet_mask_variable)
        if vpn is not None:
            pulumi.set(__self__, "vpn", vpn)

    @_builtins.property
    @pulumi.getter(name="networkAddress")
    def network_address(self) -> Optional[_builtins.str]:
        """
        IP Address
        """
        return pulumi.get(self, "network_address")

    @_builtins.property
    @pulumi.getter(name="networkAddressVariable")
    def network_address_variable(self) -> Optional[_builtins.str]:
        """
        Variable name
        """
        return pulumi.get(self, "network_address_variable")

    @_builtins.property
    @pulumi.getter
    def service(self) -> Optional[_builtins.str]:
        """
        Service
          - Choices: `SIG`
          - Default value: `SIG`
        """
        return pulumi.get(self, "service")

    @_builtins.property
    @pulumi.getter(name="serviceVariable")
    def service_variable(self) -> Optional[_builtins.str]:
        """
        Variable name
        """
        return pulumi.get(self, "service_variable")

    @_builtins.property
    @pulumi.getter(name="subnetMask")
    def subnet_mask(self) -> Optional[_builtins.str]:
        """
        Subnet Mask
          - Choices: `255.255.255.255`, `255.255.255.254`, `255.255.255.252`, `255.255.255.248`, `255.255.255.240`, `255.255.255.224`, `255.255.255.192`, `255.255.255.128`, `255.255.255.0`, `255.255.254.0`, `255.255.252.0`, `255.255.248.0`, `255.255.240.0`, `255.255.224.0`, `255.255.192.0`, `255.255.128.0`, `255.255.0.0`, `255.254.0.0`, `255.252.0.0`, `255.240.0.0`, `255.224.0.0`, `255.192.0.0`, `255.128.0.0`, `255.0.0.0`, `254.0.0.0`, `252.0.0.0`, `248.0.0.0`, `240.0.0.0`, `224.0.0.0`, `192.0.0.0`, `128.0.0.0`, `0.0.0.0`
        """
        return pulumi.get(self, "subnet_mask")

    @_builtins.property
    @pulumi.getter(name="subnetMaskVariable")
    def subnet_mask_variable(self) -> Optional[_builtins.str]:
        """
        Variable name
        """
        return pulumi.get(self, "subnet_mask_variable")

    @_builtins.property
    @pulumi.getter
    def vpn(self) -> Optional[_builtins.int]:
        """
        Service
        """
        return pulumi.get(self, "vpn")


@pulumi.output_type
class ServiceLanVpnFeatureStaticNat(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "natPoolName":
            suggest = "nat_pool_name"
        elif key == "natPoolNameVariable":
            suggest = "nat_pool_name_variable"
        elif key == "sourceIp":
            suggest = "source_ip"
        elif key == "sourceIpVariable":
            suggest = "source_ip_variable"
        elif key == "staticNatDirection":
            suggest = "static_nat_direction"
        elif key == "staticNatDirectionVariable":
            suggest = "static_nat_direction_variable"
        elif key == "trackerObjectId":
            suggest = "tracker_object_id"
        elif key == "translatedSourceIp":
            suggest = "translated_source_ip"
        elif key == "translatedSourceIpVariable":
            suggest = "translated_source_ip_variable"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ServiceLanVpnFeatureStaticNat. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ServiceLanVpnFeatureStaticNat.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ServiceLanVpnFeatureStaticNat.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 nat_pool_name: Optional[_builtins.int] = None,
                 nat_pool_name_variable: Optional[_builtins.str] = None,
                 source_ip: Optional[_builtins.str] = None,
                 source_ip_variable: Optional[_builtins.str] = None,
                 static_nat_direction: Optional[_builtins.str] = None,
                 static_nat_direction_variable: Optional[_builtins.str] = None,
                 tracker_object_id: Optional[_builtins.str] = None,
                 translated_source_ip: Optional[_builtins.str] = None,
                 translated_source_ip_variable: Optional[_builtins.str] = None):
        """
        :param _builtins.int nat_pool_name: NAT Pool Name
                 - Range: `1`-`32`
        :param _builtins.str nat_pool_name_variable: Variable name
        :param _builtins.str source_ip: Source IP Address
        :param _builtins.str source_ip_variable: Variable name
        :param _builtins.str static_nat_direction: Static NAT Direction
                 - Choices: `inside`, `outside`
        :param _builtins.str static_nat_direction_variable: Variable name
        :param _builtins.str translated_source_ip: Translated Source IP Address
        :param _builtins.str translated_source_ip_variable: Variable name
        """
        if nat_pool_name is not None:
            pulumi.set(__self__, "nat_pool_name", nat_pool_name)
        if nat_pool_name_variable is not None:
            pulumi.set(__self__, "nat_pool_name_variable", nat_pool_name_variable)
        if source_ip is not None:
            pulumi.set(__self__, "source_ip", source_ip)
        if source_ip_variable is not None:
            pulumi.set(__self__, "source_ip_variable", source_ip_variable)
        if static_nat_direction is not None:
            pulumi.set(__self__, "static_nat_direction", static_nat_direction)
        if static_nat_direction_variable is not None:
            pulumi.set(__self__, "static_nat_direction_variable", static_nat_direction_variable)
        if tracker_object_id is not None:
            pulumi.set(__self__, "tracker_object_id", tracker_object_id)
        if translated_source_ip is not None:
            pulumi.set(__self__, "translated_source_ip", translated_source_ip)
        if translated_source_ip_variable is not None:
            pulumi.set(__self__, "translated_source_ip_variable", translated_source_ip_variable)

    @_builtins.property
    @pulumi.getter(name="natPoolName")
    def nat_pool_name(self) -> Optional[_builtins.int]:
        """
        NAT Pool Name
          - Range: `1`-`32`
        """
        return pulumi.get(self, "nat_pool_name")

    @_builtins.property
    @pulumi.getter(name="natPoolNameVariable")
    def nat_pool_name_variable(self) -> Optional[_builtins.str]:
        """
        Variable name
        """
        return pulumi.get(self, "nat_pool_name_variable")

    @_builtins.property
    @pulumi.getter(name="sourceIp")
    def source_ip(self) -> Optional[_builtins.str]:
        """
        Source IP Address
        """
        return pulumi.get(self, "source_ip")

    @_builtins.property
    @pulumi.getter(name="sourceIpVariable")
    def source_ip_variable(self) -> Optional[_builtins.str]:
        """
        Variable name
        """
        return pulumi.get(self, "source_ip_variable")

    @_builtins.property
    @pulumi.getter(name="staticNatDirection")
    def static_nat_direction(self) -> Optional[_builtins.str]:
        """
        Static NAT Direction
          - Choices: `inside`, `outside`
        """
        return pulumi.get(self, "static_nat_direction")

    @_builtins.property
    @pulumi.getter(name="staticNatDirectionVariable")
    def static_nat_direction_variable(self) -> Optional[_builtins.str]:
        """
        Variable name
        """
        return pulumi.get(self, "static_nat_direction_variable")

    @_builtins.property
    @pulumi.getter(name="trackerObjectId")
    def tracker_object_id(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "tracker_object_id")

    @_builtins.property
    @pulumi.getter(name="translatedSourceIp")
    def translated_source_ip(self) -> Optional[_builtins.str]:
        """
        Translated Source IP Address
        """
        return pulumi.get(self, "translated_source_ip")

    @_builtins.property
    @pulumi.getter(name="translatedSourceIpVariable")
    def translated_source_ip_variable(self) -> Optional[_builtins.str]:
        """
        Variable name
        """
        return pulumi.get(self, "translated_source_ip_variable")


@pulumi.output_type
class ServiceLanVpnInterfaceEthernetFeatureArp(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "ipAddress":
            suggest = "ip_address"
        elif key == "ipAddressVariable":
            suggest = "ip_address_variable"
        elif key == "macAddress":
            suggest = "mac_address"
        elif key == "macAddressVariable":
            suggest = "mac_address_variable"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ServiceLanVpnInterfaceEthernetFeatureArp. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ServiceLanVpnInterfaceEthernetFeatureArp.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ServiceLanVpnInterfaceEthernetFeatureArp.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 ip_address: Optional[_builtins.str] = None,
                 ip_address_variable: Optional[_builtins.str] = None,
                 mac_address: Optional[_builtins.str] = None,
                 mac_address_variable: Optional[_builtins.str] = None):
        """
        :param _builtins.str ip_address: IPV4 Address
        :param _builtins.str ip_address_variable: Variable name
        :param _builtins.str mac_address: MAC Address
        :param _builtins.str mac_address_variable: Variable name
        """
        if ip_address is not None:
            pulumi.set(__self__, "ip_address", ip_address)
        if ip_address_variable is not None:
            pulumi.set(__self__, "ip_address_variable", ip_address_variable)
        if mac_address is not None:
            pulumi.set(__self__, "mac_address", mac_address)
        if mac_address_variable is not None:
            pulumi.set(__self__, "mac_address_variable", mac_address_variable)

    @_builtins.property
    @pulumi.getter(name="ipAddress")
    def ip_address(self) -> Optional[_builtins.str]:
        """
        IPV4 Address
        """
        return pulumi.get(self, "ip_address")

    @_builtins.property
    @pulumi.getter(name="ipAddressVariable")
    def ip_address_variable(self) -> Optional[_builtins.str]:
        """
        Variable name
        """
        return pulumi.get(self, "ip_address_variable")

    @_builtins.property
    @pulumi.getter(name="macAddress")
    def mac_address(self) -> Optional[_builtins.str]:
        """
        MAC Address
        """
        return pulumi.get(self, "mac_address")

    @_builtins.property
    @pulumi.getter(name="macAddressVariable")
    def mac_address_variable(self) -> Optional[_builtins.str]:
        """
        Variable name
        """
        return pulumi.get(self, "mac_address_variable")


@pulumi.output_type
class ServiceLanVpnInterfaceEthernetFeatureIpv4SecondaryAddress(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "addressVariable":
            suggest = "address_variable"
        elif key == "subnetMask":
            suggest = "subnet_mask"
        elif key == "subnetMaskVariable":
            suggest = "subnet_mask_variable"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ServiceLanVpnInterfaceEthernetFeatureIpv4SecondaryAddress. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ServiceLanVpnInterfaceEthernetFeatureIpv4SecondaryAddress.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ServiceLanVpnInterfaceEthernetFeatureIpv4SecondaryAddress.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 address: Optional[_builtins.str] = None,
                 address_variable: Optional[_builtins.str] = None,
                 subnet_mask: Optional[_builtins.str] = None,
                 subnet_mask_variable: Optional[_builtins.str] = None):
        """
        :param _builtins.str address: IpV4 Address
        :param _builtins.str address_variable: Variable name
        :param _builtins.str subnet_mask: Subnet Mask
                 - Choices: `255.255.255.255`, `255.255.255.254`, `255.255.255.252`, `255.255.255.248`, `255.255.255.240`, `255.255.255.224`, `255.255.255.192`, `255.255.255.128`, `255.255.255.0`, `255.255.254.0`, `255.255.252.0`, `255.255.248.0`, `255.255.240.0`, `255.255.224.0`, `255.255.192.0`, `255.255.128.0`, `255.255.0.0`, `255.254.0.0`, `255.252.0.0`, `255.240.0.0`, `255.224.0.0`, `255.192.0.0`, `255.128.0.0`, `255.0.0.0`, `254.0.0.0`, `252.0.0.0`, `248.0.0.0`, `240.0.0.0`, `224.0.0.0`, `192.0.0.0`, `128.0.0.0`, `0.0.0.0`
        :param _builtins.str subnet_mask_variable: Variable name
        """
        if address is not None:
            pulumi.set(__self__, "address", address)
        if address_variable is not None:
            pulumi.set(__self__, "address_variable", address_variable)
        if subnet_mask is not None:
            pulumi.set(__self__, "subnet_mask", subnet_mask)
        if subnet_mask_variable is not None:
            pulumi.set(__self__, "subnet_mask_variable", subnet_mask_variable)

    @_builtins.property
    @pulumi.getter
    def address(self) -> Optional[_builtins.str]:
        """
        IpV4 Address
        """
        return pulumi.get(self, "address")

    @_builtins.property
    @pulumi.getter(name="addressVariable")
    def address_variable(self) -> Optional[_builtins.str]:
        """
        Variable name
        """
        return pulumi.get(self, "address_variable")

    @_builtins.property
    @pulumi.getter(name="subnetMask")
    def subnet_mask(self) -> Optional[_builtins.str]:
        """
        Subnet Mask
          - Choices: `255.255.255.255`, `255.255.255.254`, `255.255.255.252`, `255.255.255.248`, `255.255.255.240`, `255.255.255.224`, `255.255.255.192`, `255.255.255.128`, `255.255.255.0`, `255.255.254.0`, `255.255.252.0`, `255.255.248.0`, `255.255.240.0`, `255.255.224.0`, `255.255.192.0`, `255.255.128.0`, `255.255.0.0`, `255.254.0.0`, `255.252.0.0`, `255.240.0.0`, `255.224.0.0`, `255.192.0.0`, `255.128.0.0`, `255.0.0.0`, `254.0.0.0`, `252.0.0.0`, `248.0.0.0`, `240.0.0.0`, `224.0.0.0`, `192.0.0.0`, `128.0.0.0`, `0.0.0.0`
        """
        return pulumi.get(self, "subnet_mask")

    @_builtins.property
    @pulumi.getter(name="subnetMaskVariable")
    def subnet_mask_variable(self) -> Optional[_builtins.str]:
        """
        Variable name
        """
        return pulumi.get(self, "subnet_mask_variable")


@pulumi.output_type
class ServiceLanVpnInterfaceEthernetFeatureIpv4Vrrp(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "addressVariable":
            suggest = "address_variable"
        elif key == "groupId":
            suggest = "group_id"
        elif key == "groupIdVariable":
            suggest = "group_id_variable"
        elif key == "priorityVariable":
            suggest = "priority_variable"
        elif key == "secondaryAddresses":
            suggest = "secondary_addresses"
        elif key == "timerVariable":
            suggest = "timer_variable"
        elif key == "tlocPrefChangeValue":
            suggest = "tloc_pref_change_value"
        elif key == "tlocPrefixChange":
            suggest = "tloc_prefix_change"
        elif key == "trackOmp":
            suggest = "track_omp"
        elif key == "trackingObjects":
            suggest = "tracking_objects"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ServiceLanVpnInterfaceEthernetFeatureIpv4Vrrp. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ServiceLanVpnInterfaceEthernetFeatureIpv4Vrrp.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ServiceLanVpnInterfaceEthernetFeatureIpv4Vrrp.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 address: Optional[_builtins.str] = None,
                 address_variable: Optional[_builtins.str] = None,
                 group_id: Optional[_builtins.int] = None,
                 group_id_variable: Optional[_builtins.str] = None,
                 priority: Optional[_builtins.int] = None,
                 priority_variable: Optional[_builtins.str] = None,
                 secondary_addresses: Optional[Sequence['outputs.ServiceLanVpnInterfaceEthernetFeatureIpv4VrrpSecondaryAddress']] = None,
                 timer: Optional[_builtins.int] = None,
                 timer_variable: Optional[_builtins.str] = None,
                 tloc_pref_change_value: Optional[_builtins.int] = None,
                 tloc_prefix_change: Optional[_builtins.bool] = None,
                 track_omp: Optional[_builtins.bool] = None,
                 tracking_objects: Optional[Sequence['outputs.ServiceLanVpnInterfaceEthernetFeatureIpv4VrrpTrackingObject']] = None):
        """
        :param _builtins.str address: VRRP Ip Address
        :param _builtins.str address_variable: Variable name
        :param _builtins.int group_id: Group ID
                 - Range: `1`-`255`
        :param _builtins.str group_id_variable: Variable name
        :param _builtins.int priority: Set priority
                 - Range: `1`-`254`
                 - Default value: `100`
        :param _builtins.str priority_variable: Variable name
        :param Sequence['ServiceLanVpnInterfaceEthernetFeatureIpv4VrrpSecondaryAddressArgs'] secondary_addresses: VRRP Secondary Ip Addresses
        :param _builtins.int timer: Timer interval for successive advertisements, in milliseconds
                 - Range: `100`-`40950`
                 - Default value: `1000`
        :param _builtins.str timer_variable: Variable name
        :param _builtins.int tloc_pref_change_value: Timer interval for successive advertisements, in milliseconds
                 - Range: `100`-`4294967295`
        :param _builtins.bool tloc_prefix_change: Timer interval for successive advertisements, in milliseconds
                 - Default value: `false`
        :param _builtins.bool track_omp: Track OMP status
                 - Default value: `false`
        :param Sequence['ServiceLanVpnInterfaceEthernetFeatureIpv4VrrpTrackingObjectArgs'] tracking_objects: Tracking object for VRRP configuration
        """
        if address is not None:
            pulumi.set(__self__, "address", address)
        if address_variable is not None:
            pulumi.set(__self__, "address_variable", address_variable)
        if group_id is not None:
            pulumi.set(__self__, "group_id", group_id)
        if group_id_variable is not None:
            pulumi.set(__self__, "group_id_variable", group_id_variable)
        if priority is not None:
            pulumi.set(__self__, "priority", priority)
        if priority_variable is not None:
            pulumi.set(__self__, "priority_variable", priority_variable)
        if secondary_addresses is not None:
            pulumi.set(__self__, "secondary_addresses", secondary_addresses)
        if timer is not None:
            pulumi.set(__self__, "timer", timer)
        if timer_variable is not None:
            pulumi.set(__self__, "timer_variable", timer_variable)
        if tloc_pref_change_value is not None:
            pulumi.set(__self__, "tloc_pref_change_value", tloc_pref_change_value)
        if tloc_prefix_change is not None:
            pulumi.set(__self__, "tloc_prefix_change", tloc_prefix_change)
        if track_omp is not None:
            pulumi.set(__self__, "track_omp", track_omp)
        if tracking_objects is not None:
            pulumi.set(__self__, "tracking_objects", tracking_objects)

    @_builtins.property
    @pulumi.getter
    def address(self) -> Optional[_builtins.str]:
        """
        VRRP Ip Address
        """
        return pulumi.get(self, "address")

    @_builtins.property
    @pulumi.getter(name="addressVariable")
    def address_variable(self) -> Optional[_builtins.str]:
        """
        Variable name
        """
        return pulumi.get(self, "address_variable")

    @_builtins.property
    @pulumi.getter(name="groupId")
    def group_id(self) -> Optional[_builtins.int]:
        """
        Group ID
          - Range: `1`-`255`
        """
        return pulumi.get(self, "group_id")

    @_builtins.property
    @pulumi.getter(name="groupIdVariable")
    def group_id_variable(self) -> Optional[_builtins.str]:
        """
        Variable name
        """
        return pulumi.get(self, "group_id_variable")

    @_builtins.property
    @pulumi.getter
    def priority(self) -> Optional[_builtins.int]:
        """
        Set priority
          - Range: `1`-`254`
          - Default value: `100`
        """
        return pulumi.get(self, "priority")

    @_builtins.property
    @pulumi.getter(name="priorityVariable")
    def priority_variable(self) -> Optional[_builtins.str]:
        """
        Variable name
        """
        return pulumi.get(self, "priority_variable")

    @_builtins.property
    @pulumi.getter(name="secondaryAddresses")
    def secondary_addresses(self) -> Optional[Sequence['outputs.ServiceLanVpnInterfaceEthernetFeatureIpv4VrrpSecondaryAddress']]:
        """
        VRRP Secondary Ip Addresses
        """
        return pulumi.get(self, "secondary_addresses")

    @_builtins.property
    @pulumi.getter
    def timer(self) -> Optional[_builtins.int]:
        """
        Timer interval for successive advertisements, in milliseconds
          - Range: `100`-`40950`
          - Default value: `1000`
        """
        return pulumi.get(self, "timer")

    @_builtins.property
    @pulumi.getter(name="timerVariable")
    def timer_variable(self) -> Optional[_builtins.str]:
        """
        Variable name
        """
        return pulumi.get(self, "timer_variable")

    @_builtins.property
    @pulumi.getter(name="tlocPrefChangeValue")
    def tloc_pref_change_value(self) -> Optional[_builtins.int]:
        """
        Timer interval for successive advertisements, in milliseconds
          - Range: `100`-`4294967295`
        """
        return pulumi.get(self, "tloc_pref_change_value")

    @_builtins.property
    @pulumi.getter(name="tlocPrefixChange")
    def tloc_prefix_change(self) -> Optional[_builtins.bool]:
        """
        Timer interval for successive advertisements, in milliseconds
          - Default value: `false`
        """
        return pulumi.get(self, "tloc_prefix_change")

    @_builtins.property
    @pulumi.getter(name="trackOmp")
    def track_omp(self) -> Optional[_builtins.bool]:
        """
        Track OMP status
          - Default value: `false`
        """
        return pulumi.get(self, "track_omp")

    @_builtins.property
    @pulumi.getter(name="trackingObjects")
    def tracking_objects(self) -> Optional[Sequence['outputs.ServiceLanVpnInterfaceEthernetFeatureIpv4VrrpTrackingObject']]:
        """
        Tracking object for VRRP configuration
        """
        return pulumi.get(self, "tracking_objects")


@pulumi.output_type
class ServiceLanVpnInterfaceEthernetFeatureIpv4VrrpSecondaryAddress(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "addressVariable":
            suggest = "address_variable"
        elif key == "subnetMask":
            suggest = "subnet_mask"
        elif key == "subnetMaskVariable":
            suggest = "subnet_mask_variable"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ServiceLanVpnInterfaceEthernetFeatureIpv4VrrpSecondaryAddress. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ServiceLanVpnInterfaceEthernetFeatureIpv4VrrpSecondaryAddress.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ServiceLanVpnInterfaceEthernetFeatureIpv4VrrpSecondaryAddress.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 address: Optional[_builtins.str] = None,
                 address_variable: Optional[_builtins.str] = None,
                 subnet_mask: Optional[_builtins.str] = None,
                 subnet_mask_variable: Optional[_builtins.str] = None):
        """
        :param _builtins.str address: Ip Address
        :param _builtins.str address_variable: Variable name
        :param _builtins.str subnet_mask: Subnet Mask
                 - Choices: `255.255.255.255`, `255.255.255.254`, `255.255.255.252`, `255.255.255.248`, `255.255.255.240`, `255.255.255.224`, `255.255.255.192`, `255.255.255.128`, `255.255.255.0`, `255.255.254.0`, `255.255.252.0`, `255.255.248.0`, `255.255.240.0`, `255.255.224.0`, `255.255.192.0`, `255.255.128.0`, `255.255.0.0`, `255.254.0.0`, `255.252.0.0`, `255.240.0.0`, `255.224.0.0`, `255.192.0.0`, `255.128.0.0`, `255.0.0.0`, `254.0.0.0`, `252.0.0.0`, `248.0.0.0`, `240.0.0.0`, `224.0.0.0`, `192.0.0.0`, `128.0.0.0`, `0.0.0.0`
        :param _builtins.str subnet_mask_variable: Variable name
        """
        if address is not None:
            pulumi.set(__self__, "address", address)
        if address_variable is not None:
            pulumi.set(__self__, "address_variable", address_variable)
        if subnet_mask is not None:
            pulumi.set(__self__, "subnet_mask", subnet_mask)
        if subnet_mask_variable is not None:
            pulumi.set(__self__, "subnet_mask_variable", subnet_mask_variable)

    @_builtins.property
    @pulumi.getter
    def address(self) -> Optional[_builtins.str]:
        """
        Ip Address
        """
        return pulumi.get(self, "address")

    @_builtins.property
    @pulumi.getter(name="addressVariable")
    def address_variable(self) -> Optional[_builtins.str]:
        """
        Variable name
        """
        return pulumi.get(self, "address_variable")

    @_builtins.property
    @pulumi.getter(name="subnetMask")
    def subnet_mask(self) -> Optional[_builtins.str]:
        """
        Subnet Mask
          - Choices: `255.255.255.255`, `255.255.255.254`, `255.255.255.252`, `255.255.255.248`, `255.255.255.240`, `255.255.255.224`, `255.255.255.192`, `255.255.255.128`, `255.255.255.0`, `255.255.254.0`, `255.255.252.0`, `255.255.248.0`, `255.255.240.0`, `255.255.224.0`, `255.255.192.0`, `255.255.128.0`, `255.255.0.0`, `255.254.0.0`, `255.252.0.0`, `255.240.0.0`, `255.224.0.0`, `255.192.0.0`, `255.128.0.0`, `255.0.0.0`, `254.0.0.0`, `252.0.0.0`, `248.0.0.0`, `240.0.0.0`, `224.0.0.0`, `192.0.0.0`, `128.0.0.0`, `0.0.0.0`
        """
        return pulumi.get(self, "subnet_mask")

    @_builtins.property
    @pulumi.getter(name="subnetMaskVariable")
    def subnet_mask_variable(self) -> Optional[_builtins.str]:
        """
        Variable name
        """
        return pulumi.get(self, "subnet_mask_variable")


@pulumi.output_type
class ServiceLanVpnInterfaceEthernetFeatureIpv4VrrpTrackingObject(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "decrementValue":
            suggest = "decrement_value"
        elif key == "decrementValueVariable":
            suggest = "decrement_value_variable"
        elif key == "trackerAction":
            suggest = "tracker_action"
        elif key == "trackerActionVariable":
            suggest = "tracker_action_variable"
        elif key == "trackerId":
            suggest = "tracker_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ServiceLanVpnInterfaceEthernetFeatureIpv4VrrpTrackingObject. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ServiceLanVpnInterfaceEthernetFeatureIpv4VrrpTrackingObject.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ServiceLanVpnInterfaceEthernetFeatureIpv4VrrpTrackingObject.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 decrement_value: Optional[_builtins.int] = None,
                 decrement_value_variable: Optional[_builtins.str] = None,
                 tracker_action: Optional[_builtins.str] = None,
                 tracker_action_variable: Optional[_builtins.str] = None,
                 tracker_id: Optional[_builtins.str] = None):
        """
        :param _builtins.int decrement_value: Decrement Value for VRRP priority
                 - Range: `1`-`255`
        :param _builtins.str decrement_value_variable: Variable name
        :param _builtins.str tracker_action: Track Action
                 - Choices: `Decrement`, `Shutdown`
        :param _builtins.str tracker_action_variable: Variable name
        """
        if decrement_value is not None:
            pulumi.set(__self__, "decrement_value", decrement_value)
        if decrement_value_variable is not None:
            pulumi.set(__self__, "decrement_value_variable", decrement_value_variable)
        if tracker_action is not None:
            pulumi.set(__self__, "tracker_action", tracker_action)
        if tracker_action_variable is not None:
            pulumi.set(__self__, "tracker_action_variable", tracker_action_variable)
        if tracker_id is not None:
            pulumi.set(__self__, "tracker_id", tracker_id)

    @_builtins.property
    @pulumi.getter(name="decrementValue")
    def decrement_value(self) -> Optional[_builtins.int]:
        """
        Decrement Value for VRRP priority
          - Range: `1`-`255`
        """
        return pulumi.get(self, "decrement_value")

    @_builtins.property
    @pulumi.getter(name="decrementValueVariable")
    def decrement_value_variable(self) -> Optional[_builtins.str]:
        """
        Variable name
        """
        return pulumi.get(self, "decrement_value_variable")

    @_builtins.property
    @pulumi.getter(name="trackerAction")
    def tracker_action(self) -> Optional[_builtins.str]:
        """
        Track Action
          - Choices: `Decrement`, `Shutdown`
        """
        return pulumi.get(self, "tracker_action")

    @_builtins.property
    @pulumi.getter(name="trackerActionVariable")
    def tracker_action_variable(self) -> Optional[_builtins.str]:
        """
        Variable name
        """
        return pulumi.get(self, "tracker_action_variable")

    @_builtins.property
    @pulumi.getter(name="trackerId")
    def tracker_id(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "tracker_id")


@pulumi.output_type
class ServiceLanVpnInterfaceEthernetFeatureIpv6DhcpHelper(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "addressVariable":
            suggest = "address_variable"
        elif key == "dhcpv6HelperVpn":
            suggest = "dhcpv6_helper_vpn"
        elif key == "dhcpv6HelperVpnVariable":
            suggest = "dhcpv6_helper_vpn_variable"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ServiceLanVpnInterfaceEthernetFeatureIpv6DhcpHelper. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ServiceLanVpnInterfaceEthernetFeatureIpv6DhcpHelper.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ServiceLanVpnInterfaceEthernetFeatureIpv6DhcpHelper.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 address: Optional[_builtins.str] = None,
                 address_variable: Optional[_builtins.str] = None,
                 dhcpv6_helper_vpn: Optional[_builtins.int] = None,
                 dhcpv6_helper_vpn_variable: Optional[_builtins.str] = None):
        """
        :param _builtins.str address: DHCPv6 Helper address
        :param _builtins.str address_variable: Variable name
        :param _builtins.int dhcpv6_helper_vpn: DHCPv6 Helper VPN
                 - Range: `1`-`65536`
        :param _builtins.str dhcpv6_helper_vpn_variable: Variable name
        """
        if address is not None:
            pulumi.set(__self__, "address", address)
        if address_variable is not None:
            pulumi.set(__self__, "address_variable", address_variable)
        if dhcpv6_helper_vpn is not None:
            pulumi.set(__self__, "dhcpv6_helper_vpn", dhcpv6_helper_vpn)
        if dhcpv6_helper_vpn_variable is not None:
            pulumi.set(__self__, "dhcpv6_helper_vpn_variable", dhcpv6_helper_vpn_variable)

    @_builtins.property
    @pulumi.getter
    def address(self) -> Optional[_builtins.str]:
        """
        DHCPv6 Helper address
        """
        return pulumi.get(self, "address")

    @_builtins.property
    @pulumi.getter(name="addressVariable")
    def address_variable(self) -> Optional[_builtins.str]:
        """
        Variable name
        """
        return pulumi.get(self, "address_variable")

    @_builtins.property
    @pulumi.getter(name="dhcpv6HelperVpn")
    def dhcpv6_helper_vpn(self) -> Optional[_builtins.int]:
        """
        DHCPv6 Helper VPN
          - Range: `1`-`65536`
        """
        return pulumi.get(self, "dhcpv6_helper_vpn")

    @_builtins.property
    @pulumi.getter(name="dhcpv6HelperVpnVariable")
    def dhcpv6_helper_vpn_variable(self) -> Optional[_builtins.str]:
        """
        Variable name
        """
        return pulumi.get(self, "dhcpv6_helper_vpn_variable")


@pulumi.output_type
class ServiceLanVpnInterfaceEthernetFeatureIpv6DhcpSecondaryAddress(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "addressVariable":
            suggest = "address_variable"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ServiceLanVpnInterfaceEthernetFeatureIpv6DhcpSecondaryAddress. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ServiceLanVpnInterfaceEthernetFeatureIpv6DhcpSecondaryAddress.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ServiceLanVpnInterfaceEthernetFeatureIpv6DhcpSecondaryAddress.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 address: Optional[_builtins.str] = None,
                 address_variable: Optional[_builtins.str] = None):
        """
        :param _builtins.str address: IPv6 Address Secondary
        :param _builtins.str address_variable: Variable name
        """
        if address is not None:
            pulumi.set(__self__, "address", address)
        if address_variable is not None:
            pulumi.set(__self__, "address_variable", address_variable)

    @_builtins.property
    @pulumi.getter
    def address(self) -> Optional[_builtins.str]:
        """
        IPv6 Address Secondary
        """
        return pulumi.get(self, "address")

    @_builtins.property
    @pulumi.getter(name="addressVariable")
    def address_variable(self) -> Optional[_builtins.str]:
        """
        Variable name
        """
        return pulumi.get(self, "address_variable")


@pulumi.output_type
class ServiceLanVpnInterfaceEthernetFeatureIpv6SecondaryAddress(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "addressVariable":
            suggest = "address_variable"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ServiceLanVpnInterfaceEthernetFeatureIpv6SecondaryAddress. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ServiceLanVpnInterfaceEthernetFeatureIpv6SecondaryAddress.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ServiceLanVpnInterfaceEthernetFeatureIpv6SecondaryAddress.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 address: Optional[_builtins.str] = None,
                 address_variable: Optional[_builtins.str] = None):
        """
        :param _builtins.str address: IPv6 Address Secondary
        :param _builtins.str address_variable: Variable name
        """
        if address is not None:
            pulumi.set(__self__, "address", address)
        if address_variable is not None:
            pulumi.set(__self__, "address_variable", address_variable)

    @_builtins.property
    @pulumi.getter
    def address(self) -> Optional[_builtins.str]:
        """
        IPv6 Address Secondary
        """
        return pulumi.get(self, "address")

    @_builtins.property
    @pulumi.getter(name="addressVariable")
    def address_variable(self) -> Optional[_builtins.str]:
        """
        Variable name
        """
        return pulumi.get(self, "address_variable")


@pulumi.output_type
class ServiceLanVpnInterfaceEthernetFeatureIpv6Vrrp(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "groupId":
            suggest = "group_id"
        elif key == "groupIdVariable":
            suggest = "group_id_variable"
        elif key == "ipv6Addresses":
            suggest = "ipv6_addresses"
        elif key == "priorityVariable":
            suggest = "priority_variable"
        elif key == "timerVariable":
            suggest = "timer_variable"
        elif key == "trackOmp":
            suggest = "track_omp"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ServiceLanVpnInterfaceEthernetFeatureIpv6Vrrp. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ServiceLanVpnInterfaceEthernetFeatureIpv6Vrrp.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ServiceLanVpnInterfaceEthernetFeatureIpv6Vrrp.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 group_id: Optional[_builtins.int] = None,
                 group_id_variable: Optional[_builtins.str] = None,
                 ipv6_addresses: Optional[Sequence['outputs.ServiceLanVpnInterfaceEthernetFeatureIpv6VrrpIpv6Address']] = None,
                 priority: Optional[_builtins.int] = None,
                 priority_variable: Optional[_builtins.str] = None,
                 timer: Optional[_builtins.int] = None,
                 timer_variable: Optional[_builtins.str] = None,
                 track_omp: Optional[_builtins.bool] = None):
        """
        :param _builtins.int group_id: Group ID
                 - Range: `1`-`255`
        :param _builtins.str group_id_variable: Variable name
        :param Sequence['ServiceLanVpnInterfaceEthernetFeatureIpv6VrrpIpv6AddressArgs'] ipv6_addresses: IPv6 VRRP
        :param _builtins.int priority: Set priority
                 - Range: `1`-`254`
                 - Default value: `100`
        :param _builtins.str priority_variable: Variable name
        :param _builtins.int timer: Timer interval for successive advertisements, in milliseconds
                 - Range: `100`-`40950`
                 - Default value: `1000`
        :param _builtins.str timer_variable: Variable name
        :param _builtins.bool track_omp: Track OMP status
                 - Default value: `false`
        """
        if group_id is not None:
            pulumi.set(__self__, "group_id", group_id)
        if group_id_variable is not None:
            pulumi.set(__self__, "group_id_variable", group_id_variable)
        if ipv6_addresses is not None:
            pulumi.set(__self__, "ipv6_addresses", ipv6_addresses)
        if priority is not None:
            pulumi.set(__self__, "priority", priority)
        if priority_variable is not None:
            pulumi.set(__self__, "priority_variable", priority_variable)
        if timer is not None:
            pulumi.set(__self__, "timer", timer)
        if timer_variable is not None:
            pulumi.set(__self__, "timer_variable", timer_variable)
        if track_omp is not None:
            pulumi.set(__self__, "track_omp", track_omp)

    @_builtins.property
    @pulumi.getter(name="groupId")
    def group_id(self) -> Optional[_builtins.int]:
        """
        Group ID
          - Range: `1`-`255`
        """
        return pulumi.get(self, "group_id")

    @_builtins.property
    @pulumi.getter(name="groupIdVariable")
    def group_id_variable(self) -> Optional[_builtins.str]:
        """
        Variable name
        """
        return pulumi.get(self, "group_id_variable")

    @_builtins.property
    @pulumi.getter(name="ipv6Addresses")
    def ipv6_addresses(self) -> Optional[Sequence['outputs.ServiceLanVpnInterfaceEthernetFeatureIpv6VrrpIpv6Address']]:
        """
        IPv6 VRRP
        """
        return pulumi.get(self, "ipv6_addresses")

    @_builtins.property
    @pulumi.getter
    def priority(self) -> Optional[_builtins.int]:
        """
        Set priority
          - Range: `1`-`254`
          - Default value: `100`
        """
        return pulumi.get(self, "priority")

    @_builtins.property
    @pulumi.getter(name="priorityVariable")
    def priority_variable(self) -> Optional[_builtins.str]:
        """
        Variable name
        """
        return pulumi.get(self, "priority_variable")

    @_builtins.property
    @pulumi.getter
    def timer(self) -> Optional[_builtins.int]:
        """
        Timer interval for successive advertisements, in milliseconds
          - Range: `100`-`40950`
          - Default value: `1000`
        """
        return pulumi.get(self, "timer")

    @_builtins.property
    @pulumi.getter(name="timerVariable")
    def timer_variable(self) -> Optional[_builtins.str]:
        """
        Variable name
        """
        return pulumi.get(self, "timer_variable")

    @_builtins.property
    @pulumi.getter(name="trackOmp")
    def track_omp(self) -> Optional[_builtins.bool]:
        """
        Track OMP status
          - Default value: `false`
        """
        return pulumi.get(self, "track_omp")


@pulumi.output_type
class ServiceLanVpnInterfaceEthernetFeatureIpv6VrrpIpv6Address(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "globalAddress":
            suggest = "global_address"
        elif key == "globalAddressVariable":
            suggest = "global_address_variable"
        elif key == "linkLocalAddress":
            suggest = "link_local_address"
        elif key == "linkLocalAddressVariable":
            suggest = "link_local_address_variable"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ServiceLanVpnInterfaceEthernetFeatureIpv6VrrpIpv6Address. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ServiceLanVpnInterfaceEthernetFeatureIpv6VrrpIpv6Address.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ServiceLanVpnInterfaceEthernetFeatureIpv6VrrpIpv6Address.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 global_address: Optional[_builtins.str] = None,
                 global_address_variable: Optional[_builtins.str] = None,
                 link_local_address: Optional[_builtins.str] = None,
                 link_local_address_variable: Optional[_builtins.str] = None):
        """
        :param _builtins.str global_address: Assign Global IPv6 Prefix
        :param _builtins.str global_address_variable: Variable name
        :param _builtins.str link_local_address: Use link-local IPv6 Address
        :param _builtins.str link_local_address_variable: Variable name
        """
        if global_address is not None:
            pulumi.set(__self__, "global_address", global_address)
        if global_address_variable is not None:
            pulumi.set(__self__, "global_address_variable", global_address_variable)
        if link_local_address is not None:
            pulumi.set(__self__, "link_local_address", link_local_address)
        if link_local_address_variable is not None:
            pulumi.set(__self__, "link_local_address_variable", link_local_address_variable)

    @_builtins.property
    @pulumi.getter(name="globalAddress")
    def global_address(self) -> Optional[_builtins.str]:
        """
        Assign Global IPv6 Prefix
        """
        return pulumi.get(self, "global_address")

    @_builtins.property
    @pulumi.getter(name="globalAddressVariable")
    def global_address_variable(self) -> Optional[_builtins.str]:
        """
        Variable name
        """
        return pulumi.get(self, "global_address_variable")

    @_builtins.property
    @pulumi.getter(name="linkLocalAddress")
    def link_local_address(self) -> Optional[_builtins.str]:
        """
        Use link-local IPv6 Address
        """
        return pulumi.get(self, "link_local_address")

    @_builtins.property
    @pulumi.getter(name="linkLocalAddressVariable")
    def link_local_address_variable(self) -> Optional[_builtins.str]:
        """
        Variable name
        """
        return pulumi.get(self, "link_local_address_variable")


@pulumi.output_type
class ServiceLanVpnInterfaceEthernetFeatureStaticNat(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "sourceIp":
            suggest = "source_ip"
        elif key == "sourceIpVariable":
            suggest = "source_ip_variable"
        elif key == "sourceVpn":
            suggest = "source_vpn"
        elif key == "sourceVpnVariable":
            suggest = "source_vpn_variable"
        elif key == "translateIp":
            suggest = "translate_ip"
        elif key == "translateIpVariable":
            suggest = "translate_ip_variable"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ServiceLanVpnInterfaceEthernetFeatureStaticNat. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ServiceLanVpnInterfaceEthernetFeatureStaticNat.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ServiceLanVpnInterfaceEthernetFeatureStaticNat.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 direction: Optional[_builtins.str] = None,
                 source_ip: Optional[_builtins.str] = None,
                 source_ip_variable: Optional[_builtins.str] = None,
                 source_vpn: Optional[_builtins.int] = None,
                 source_vpn_variable: Optional[_builtins.str] = None,
                 translate_ip: Optional[_builtins.str] = None,
                 translate_ip_variable: Optional[_builtins.str] = None):
        """
        :param _builtins.str direction: Direction of static NAT translation
                 - Choices: `inside`, `outside`
                 - Default value: `inside`
        :param _builtins.str source_ip: Source IP address to be translated
        :param _builtins.str source_ip_variable: Variable name
        :param _builtins.int source_vpn: Source VPN ID
                 - Range: `0`-`65530`
                 - Default value: `0`
        :param _builtins.str source_vpn_variable: Variable name
        :param _builtins.str translate_ip: Statically translated source IP address
        :param _builtins.str translate_ip_variable: Variable name
        """
        if direction is not None:
            pulumi.set(__self__, "direction", direction)
        if source_ip is not None:
            pulumi.set(__self__, "source_ip", source_ip)
        if source_ip_variable is not None:
            pulumi.set(__self__, "source_ip_variable", source_ip_variable)
        if source_vpn is not None:
            pulumi.set(__self__, "source_vpn", source_vpn)
        if source_vpn_variable is not None:
            pulumi.set(__self__, "source_vpn_variable", source_vpn_variable)
        if translate_ip is not None:
            pulumi.set(__self__, "translate_ip", translate_ip)
        if translate_ip_variable is not None:
            pulumi.set(__self__, "translate_ip_variable", translate_ip_variable)

    @_builtins.property
    @pulumi.getter
    def direction(self) -> Optional[_builtins.str]:
        """
        Direction of static NAT translation
          - Choices: `inside`, `outside`
          - Default value: `inside`
        """
        return pulumi.get(self, "direction")

    @_builtins.property
    @pulumi.getter(name="sourceIp")
    def source_ip(self) -> Optional[_builtins.str]:
        """
        Source IP address to be translated
        """
        return pulumi.get(self, "source_ip")

    @_builtins.property
    @pulumi.getter(name="sourceIpVariable")
    def source_ip_variable(self) -> Optional[_builtins.str]:
        """
        Variable name
        """
        return pulumi.get(self, "source_ip_variable")

    @_builtins.property
    @pulumi.getter(name="sourceVpn")
    def source_vpn(self) -> Optional[_builtins.int]:
        """
        Source VPN ID
          - Range: `0`-`65530`
          - Default value: `0`
        """
        return pulumi.get(self, "source_vpn")

    @_builtins.property
    @pulumi.getter(name="sourceVpnVariable")
    def source_vpn_variable(self) -> Optional[_builtins.str]:
        """
        Variable name
        """
        return pulumi.get(self, "source_vpn_variable")

    @_builtins.property
    @pulumi.getter(name="translateIp")
    def translate_ip(self) -> Optional[_builtins.str]:
        """
        Statically translated source IP address
        """
        return pulumi.get(self, "translate_ip")

    @_builtins.property
    @pulumi.getter(name="translateIpVariable")
    def translate_ip_variable(self) -> Optional[_builtins.str]:
        """
        Variable name
        """
        return pulumi.get(self, "translate_ip_variable")


@pulumi.output_type
class ServiceLanVpnInterfaceSviFeatureArp(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "ipAddress":
            suggest = "ip_address"
        elif key == "ipAddressVariable":
            suggest = "ip_address_variable"
        elif key == "macAddress":
            suggest = "mac_address"
        elif key == "macAddressVariable":
            suggest = "mac_address_variable"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ServiceLanVpnInterfaceSviFeatureArp. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ServiceLanVpnInterfaceSviFeatureArp.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ServiceLanVpnInterfaceSviFeatureArp.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 ip_address: Optional[_builtins.str] = None,
                 ip_address_variable: Optional[_builtins.str] = None,
                 mac_address: Optional[_builtins.str] = None,
                 mac_address_variable: Optional[_builtins.str] = None):
        """
        :param _builtins.str ip_address: IP Address
        :param _builtins.str ip_address_variable: Variable name
        :param _builtins.str mac_address: MAC address
        :param _builtins.str mac_address_variable: Variable name
        """
        if ip_address is not None:
            pulumi.set(__self__, "ip_address", ip_address)
        if ip_address_variable is not None:
            pulumi.set(__self__, "ip_address_variable", ip_address_variable)
        if mac_address is not None:
            pulumi.set(__self__, "mac_address", mac_address)
        if mac_address_variable is not None:
            pulumi.set(__self__, "mac_address_variable", mac_address_variable)

    @_builtins.property
    @pulumi.getter(name="ipAddress")
    def ip_address(self) -> Optional[_builtins.str]:
        """
        IP Address
        """
        return pulumi.get(self, "ip_address")

    @_builtins.property
    @pulumi.getter(name="ipAddressVariable")
    def ip_address_variable(self) -> Optional[_builtins.str]:
        """
        Variable name
        """
        return pulumi.get(self, "ip_address_variable")

    @_builtins.property
    @pulumi.getter(name="macAddress")
    def mac_address(self) -> Optional[_builtins.str]:
        """
        MAC address
        """
        return pulumi.get(self, "mac_address")

    @_builtins.property
    @pulumi.getter(name="macAddressVariable")
    def mac_address_variable(self) -> Optional[_builtins.str]:
        """
        Variable name
        """
        return pulumi.get(self, "mac_address_variable")


@pulumi.output_type
class ServiceLanVpnInterfaceSviFeatureIpv4SecondaryAddress(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "addressVariable":
            suggest = "address_variable"
        elif key == "ipv4SubnetMask":
            suggest = "ipv4_subnet_mask"
        elif key == "ipv4SubnetMaskVariable":
            suggest = "ipv4_subnet_mask_variable"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ServiceLanVpnInterfaceSviFeatureIpv4SecondaryAddress. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ServiceLanVpnInterfaceSviFeatureIpv4SecondaryAddress.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ServiceLanVpnInterfaceSviFeatureIpv4SecondaryAddress.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 address: Optional[_builtins.str] = None,
                 address_variable: Optional[_builtins.str] = None,
                 ipv4_subnet_mask: Optional[_builtins.str] = None,
                 ipv4_subnet_mask_variable: Optional[_builtins.str] = None):
        """
        :param _builtins.str address: IpV4 Address
        :param _builtins.str address_variable: Variable name
        :param _builtins.str ipv4_subnet_mask: Subnet Mask
                 - Choices: `255.255.255.255`, `255.255.255.254`, `255.255.255.252`, `255.255.255.248`, `255.255.255.240`, `255.255.255.224`, `255.255.255.192`, `255.255.255.128`, `255.255.255.0`, `255.255.254.0`, `255.255.252.0`, `255.255.248.0`, `255.255.240.0`, `255.255.224.0`, `255.255.192.0`, `255.255.128.0`, `255.255.0.0`, `255.254.0.0`, `255.252.0.0`, `255.240.0.0`, `255.224.0.0`, `255.192.0.0`, `255.128.0.0`, `255.0.0.0`, `254.0.0.0`, `252.0.0.0`, `248.0.0.0`, `240.0.0.0`, `224.0.0.0`, `192.0.0.0`, `128.0.0.0`, `0.0.0.0`
        :param _builtins.str ipv4_subnet_mask_variable: Variable name
        """
        if address is not None:
            pulumi.set(__self__, "address", address)
        if address_variable is not None:
            pulumi.set(__self__, "address_variable", address_variable)
        if ipv4_subnet_mask is not None:
            pulumi.set(__self__, "ipv4_subnet_mask", ipv4_subnet_mask)
        if ipv4_subnet_mask_variable is not None:
            pulumi.set(__self__, "ipv4_subnet_mask_variable", ipv4_subnet_mask_variable)

    @_builtins.property
    @pulumi.getter
    def address(self) -> Optional[_builtins.str]:
        """
        IpV4 Address
        """
        return pulumi.get(self, "address")

    @_builtins.property
    @pulumi.getter(name="addressVariable")
    def address_variable(self) -> Optional[_builtins.str]:
        """
        Variable name
        """
        return pulumi.get(self, "address_variable")

    @_builtins.property
    @pulumi.getter(name="ipv4SubnetMask")
    def ipv4_subnet_mask(self) -> Optional[_builtins.str]:
        """
        Subnet Mask
          - Choices: `255.255.255.255`, `255.255.255.254`, `255.255.255.252`, `255.255.255.248`, `255.255.255.240`, `255.255.255.224`, `255.255.255.192`, `255.255.255.128`, `255.255.255.0`, `255.255.254.0`, `255.255.252.0`, `255.255.248.0`, `255.255.240.0`, `255.255.224.0`, `255.255.192.0`, `255.255.128.0`, `255.255.0.0`, `255.254.0.0`, `255.252.0.0`, `255.240.0.0`, `255.224.0.0`, `255.192.0.0`, `255.128.0.0`, `255.0.0.0`, `254.0.0.0`, `252.0.0.0`, `248.0.0.0`, `240.0.0.0`, `224.0.0.0`, `192.0.0.0`, `128.0.0.0`, `0.0.0.0`
        """
        return pulumi.get(self, "ipv4_subnet_mask")

    @_builtins.property
    @pulumi.getter(name="ipv4SubnetMaskVariable")
    def ipv4_subnet_mask_variable(self) -> Optional[_builtins.str]:
        """
        Variable name
        """
        return pulumi.get(self, "ipv4_subnet_mask_variable")


@pulumi.output_type
class ServiceLanVpnInterfaceSviFeatureIpv4Vrrp(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "addressVariable":
            suggest = "address_variable"
        elif key == "groupId":
            suggest = "group_id"
        elif key == "groupIdVariable":
            suggest = "group_id_variable"
        elif key == "prefixList":
            suggest = "prefix_list"
        elif key == "prefixListVariable":
            suggest = "prefix_list_variable"
        elif key == "priorityVariable":
            suggest = "priority_variable"
        elif key == "secondaryAddresses":
            suggest = "secondary_addresses"
        elif key == "timerVariable":
            suggest = "timer_variable"
        elif key == "tlocPrefixChange":
            suggest = "tloc_prefix_change"
        elif key == "tlocPrefixChangeValue":
            suggest = "tloc_prefix_change_value"
        elif key == "tlocPrefixChangeValueVariable":
            suggest = "tloc_prefix_change_value_variable"
        elif key == "trackOmp":
            suggest = "track_omp"
        elif key == "trackOmpVariable":
            suggest = "track_omp_variable"
        elif key == "trackingObjects":
            suggest = "tracking_objects"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ServiceLanVpnInterfaceSviFeatureIpv4Vrrp. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ServiceLanVpnInterfaceSviFeatureIpv4Vrrp.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ServiceLanVpnInterfaceSviFeatureIpv4Vrrp.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 address: Optional[_builtins.str] = None,
                 address_variable: Optional[_builtins.str] = None,
                 group_id: Optional[_builtins.int] = None,
                 group_id_variable: Optional[_builtins.str] = None,
                 prefix_list: Optional[_builtins.str] = None,
                 prefix_list_variable: Optional[_builtins.str] = None,
                 priority: Optional[_builtins.int] = None,
                 priority_variable: Optional[_builtins.str] = None,
                 secondary_addresses: Optional[Sequence['outputs.ServiceLanVpnInterfaceSviFeatureIpv4VrrpSecondaryAddress']] = None,
                 timer: Optional[_builtins.int] = None,
                 timer_variable: Optional[_builtins.str] = None,
                 tloc_prefix_change: Optional[_builtins.bool] = None,
                 tloc_prefix_change_value: Optional[_builtins.int] = None,
                 tloc_prefix_change_value_variable: Optional[_builtins.str] = None,
                 track_omp: Optional[_builtins.bool] = None,
                 track_omp_variable: Optional[_builtins.str] = None,
                 tracking_objects: Optional[Sequence['outputs.ServiceLanVpnInterfaceSviFeatureIpv4VrrpTrackingObject']] = None):
        """
        :param _builtins.str address: Assign IPV4 Address
        :param _builtins.str address_variable: Variable name
        :param _builtins.int group_id: Group ID
                 - Range: `1`-`255`
        :param _builtins.str group_id_variable: Variable name
        :param _builtins.str prefix_list: Track Prefix List
        :param _builtins.str prefix_list_variable: Variable name
        :param _builtins.int priority: Set priority
                 - Range: `1`-`254`
                 - Default value: `100`
        :param _builtins.str priority_variable: Variable name
        :param Sequence['ServiceLanVpnInterfaceSviFeatureIpv4VrrpSecondaryAddressArgs'] secondary_addresses: VRRP Secondary IPV4 address
        :param _builtins.int timer: Timer interval for successive advertisements, in milliseconds
                 - Range: `100`-`40950`
                 - Default value: `1000`
        :param _builtins.str timer_variable: Variable name
        :param _builtins.bool tloc_prefix_change: change TLOC preference
                 - Default value: `false`
        :param _builtins.int tloc_prefix_change_value: Set tloc preference change value
                 - Range: `1`-`4294967295`
        :param _builtins.str tloc_prefix_change_value_variable: Variable name
        :param _builtins.bool track_omp: Track OMP status
                 - Default value: `false`
        :param _builtins.str track_omp_variable: Variable name
        :param Sequence['ServiceLanVpnInterfaceSviFeatureIpv4VrrpTrackingObjectArgs'] tracking_objects: tracking object for VRRP configuration
        """
        if address is not None:
            pulumi.set(__self__, "address", address)
        if address_variable is not None:
            pulumi.set(__self__, "address_variable", address_variable)
        if group_id is not None:
            pulumi.set(__self__, "group_id", group_id)
        if group_id_variable is not None:
            pulumi.set(__self__, "group_id_variable", group_id_variable)
        if prefix_list is not None:
            pulumi.set(__self__, "prefix_list", prefix_list)
        if prefix_list_variable is not None:
            pulumi.set(__self__, "prefix_list_variable", prefix_list_variable)
        if priority is not None:
            pulumi.set(__self__, "priority", priority)
        if priority_variable is not None:
            pulumi.set(__self__, "priority_variable", priority_variable)
        if secondary_addresses is not None:
            pulumi.set(__self__, "secondary_addresses", secondary_addresses)
        if timer is not None:
            pulumi.set(__self__, "timer", timer)
        if timer_variable is not None:
            pulumi.set(__self__, "timer_variable", timer_variable)
        if tloc_prefix_change is not None:
            pulumi.set(__self__, "tloc_prefix_change", tloc_prefix_change)
        if tloc_prefix_change_value is not None:
            pulumi.set(__self__, "tloc_prefix_change_value", tloc_prefix_change_value)
        if tloc_prefix_change_value_variable is not None:
            pulumi.set(__self__, "tloc_prefix_change_value_variable", tloc_prefix_change_value_variable)
        if track_omp is not None:
            pulumi.set(__self__, "track_omp", track_omp)
        if track_omp_variable is not None:
            pulumi.set(__self__, "track_omp_variable", track_omp_variable)
        if tracking_objects is not None:
            pulumi.set(__self__, "tracking_objects", tracking_objects)

    @_builtins.property
    @pulumi.getter
    def address(self) -> Optional[_builtins.str]:
        """
        Assign IPV4 Address
        """
        return pulumi.get(self, "address")

    @_builtins.property
    @pulumi.getter(name="addressVariable")
    def address_variable(self) -> Optional[_builtins.str]:
        """
        Variable name
        """
        return pulumi.get(self, "address_variable")

    @_builtins.property
    @pulumi.getter(name="groupId")
    def group_id(self) -> Optional[_builtins.int]:
        """
        Group ID
          - Range: `1`-`255`
        """
        return pulumi.get(self, "group_id")

    @_builtins.property
    @pulumi.getter(name="groupIdVariable")
    def group_id_variable(self) -> Optional[_builtins.str]:
        """
        Variable name
        """
        return pulumi.get(self, "group_id_variable")

    @_builtins.property
    @pulumi.getter(name="prefixList")
    def prefix_list(self) -> Optional[_builtins.str]:
        """
        Track Prefix List
        """
        return pulumi.get(self, "prefix_list")

    @_builtins.property
    @pulumi.getter(name="prefixListVariable")
    def prefix_list_variable(self) -> Optional[_builtins.str]:
        """
        Variable name
        """
        return pulumi.get(self, "prefix_list_variable")

    @_builtins.property
    @pulumi.getter
    def priority(self) -> Optional[_builtins.int]:
        """
        Set priority
          - Range: `1`-`254`
          - Default value: `100`
        """
        return pulumi.get(self, "priority")

    @_builtins.property
    @pulumi.getter(name="priorityVariable")
    def priority_variable(self) -> Optional[_builtins.str]:
        """
        Variable name
        """
        return pulumi.get(self, "priority_variable")

    @_builtins.property
    @pulumi.getter(name="secondaryAddresses")
    def secondary_addresses(self) -> Optional[Sequence['outputs.ServiceLanVpnInterfaceSviFeatureIpv4VrrpSecondaryAddress']]:
        """
        VRRP Secondary IPV4 address
        """
        return pulumi.get(self, "secondary_addresses")

    @_builtins.property
    @pulumi.getter
    def timer(self) -> Optional[_builtins.int]:
        """
        Timer interval for successive advertisements, in milliseconds
          - Range: `100`-`40950`
          - Default value: `1000`
        """
        return pulumi.get(self, "timer")

    @_builtins.property
    @pulumi.getter(name="timerVariable")
    def timer_variable(self) -> Optional[_builtins.str]:
        """
        Variable name
        """
        return pulumi.get(self, "timer_variable")

    @_builtins.property
    @pulumi.getter(name="tlocPrefixChange")
    def tloc_prefix_change(self) -> Optional[_builtins.bool]:
        """
        change TLOC preference
          - Default value: `false`
        """
        return pulumi.get(self, "tloc_prefix_change")

    @_builtins.property
    @pulumi.getter(name="tlocPrefixChangeValue")
    def tloc_prefix_change_value(self) -> Optional[_builtins.int]:
        """
        Set tloc preference change value
          - Range: `1`-`4294967295`
        """
        return pulumi.get(self, "tloc_prefix_change_value")

    @_builtins.property
    @pulumi.getter(name="tlocPrefixChangeValueVariable")
    def tloc_prefix_change_value_variable(self) -> Optional[_builtins.str]:
        """
        Variable name
        """
        return pulumi.get(self, "tloc_prefix_change_value_variable")

    @_builtins.property
    @pulumi.getter(name="trackOmp")
    def track_omp(self) -> Optional[_builtins.bool]:
        """
        Track OMP status
          - Default value: `false`
        """
        return pulumi.get(self, "track_omp")

    @_builtins.property
    @pulumi.getter(name="trackOmpVariable")
    def track_omp_variable(self) -> Optional[_builtins.str]:
        """
        Variable name
        """
        return pulumi.get(self, "track_omp_variable")

    @_builtins.property
    @pulumi.getter(name="trackingObjects")
    def tracking_objects(self) -> Optional[Sequence['outputs.ServiceLanVpnInterfaceSviFeatureIpv4VrrpTrackingObject']]:
        """
        tracking object for VRRP configuration
        """
        return pulumi.get(self, "tracking_objects")


@pulumi.output_type
class ServiceLanVpnInterfaceSviFeatureIpv4VrrpSecondaryAddress(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "addressVariable":
            suggest = "address_variable"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ServiceLanVpnInterfaceSviFeatureIpv4VrrpSecondaryAddress. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ServiceLanVpnInterfaceSviFeatureIpv4VrrpSecondaryAddress.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ServiceLanVpnInterfaceSviFeatureIpv4VrrpSecondaryAddress.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 address: Optional[_builtins.str] = None,
                 address_variable: Optional[_builtins.str] = None):
        """
        :param _builtins.str address: VRRP Secondary IPV4 address
        :param _builtins.str address_variable: Variable name
        """
        if address is not None:
            pulumi.set(__self__, "address", address)
        if address_variable is not None:
            pulumi.set(__self__, "address_variable", address_variable)

    @_builtins.property
    @pulumi.getter
    def address(self) -> Optional[_builtins.str]:
        """
        VRRP Secondary IPV4 address
        """
        return pulumi.get(self, "address")

    @_builtins.property
    @pulumi.getter(name="addressVariable")
    def address_variable(self) -> Optional[_builtins.str]:
        """
        Variable name
        """
        return pulumi.get(self, "address_variable")


@pulumi.output_type
class ServiceLanVpnInterfaceSviFeatureIpv4VrrpTrackingObject(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "decrementValue":
            suggest = "decrement_value"
        elif key == "decrementValueVariable":
            suggest = "decrement_value_variable"
        elif key == "trackAction":
            suggest = "track_action"
        elif key == "trackActionVariable":
            suggest = "track_action_variable"
        elif key == "trackerId":
            suggest = "tracker_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ServiceLanVpnInterfaceSviFeatureIpv4VrrpTrackingObject. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ServiceLanVpnInterfaceSviFeatureIpv4VrrpTrackingObject.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ServiceLanVpnInterfaceSviFeatureIpv4VrrpTrackingObject.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 decrement_value: Optional[_builtins.int] = None,
                 decrement_value_variable: Optional[_builtins.str] = None,
                 track_action: Optional[_builtins.str] = None,
                 track_action_variable: Optional[_builtins.str] = None,
                 tracker_id: Optional[_builtins.str] = None):
        """
        :param _builtins.int decrement_value: Decrement Value for VRRP priority
                 - Range: `1`-`255`
        :param _builtins.str decrement_value_variable: Variable name
        :param _builtins.str track_action: Track Action
                 - Choices: `decrement`, `shutdown`
        :param _builtins.str track_action_variable: Variable name
        """
        if decrement_value is not None:
            pulumi.set(__self__, "decrement_value", decrement_value)
        if decrement_value_variable is not None:
            pulumi.set(__self__, "decrement_value_variable", decrement_value_variable)
        if track_action is not None:
            pulumi.set(__self__, "track_action", track_action)
        if track_action_variable is not None:
            pulumi.set(__self__, "track_action_variable", track_action_variable)
        if tracker_id is not None:
            pulumi.set(__self__, "tracker_id", tracker_id)

    @_builtins.property
    @pulumi.getter(name="decrementValue")
    def decrement_value(self) -> Optional[_builtins.int]:
        """
        Decrement Value for VRRP priority
          - Range: `1`-`255`
        """
        return pulumi.get(self, "decrement_value")

    @_builtins.property
    @pulumi.getter(name="decrementValueVariable")
    def decrement_value_variable(self) -> Optional[_builtins.str]:
        """
        Variable name
        """
        return pulumi.get(self, "decrement_value_variable")

    @_builtins.property
    @pulumi.getter(name="trackAction")
    def track_action(self) -> Optional[_builtins.str]:
        """
        Track Action
          - Choices: `decrement`, `shutdown`
        """
        return pulumi.get(self, "track_action")

    @_builtins.property
    @pulumi.getter(name="trackActionVariable")
    def track_action_variable(self) -> Optional[_builtins.str]:
        """
        Variable name
        """
        return pulumi.get(self, "track_action_variable")

    @_builtins.property
    @pulumi.getter(name="trackerId")
    def tracker_id(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "tracker_id")


@pulumi.output_type
class ServiceLanVpnInterfaceSviFeatureIpv6DhcpHelper(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "addressVariable":
            suggest = "address_variable"
        elif key == "vpnVariable":
            suggest = "vpn_variable"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ServiceLanVpnInterfaceSviFeatureIpv6DhcpHelper. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ServiceLanVpnInterfaceSviFeatureIpv6DhcpHelper.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ServiceLanVpnInterfaceSviFeatureIpv6DhcpHelper.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 address: Optional[_builtins.str] = None,
                 address_variable: Optional[_builtins.str] = None,
                 vpn: Optional[_builtins.int] = None,
                 vpn_variable: Optional[_builtins.str] = None):
        """
        :param _builtins.str address: DHCPv6 Helper address
        :param _builtins.str address_variable: Variable name
        :param _builtins.int vpn: DHCPv6 Helper VPN
                 - Range: `1`-`65536`
        :param _builtins.str vpn_variable: Variable name
        """
        if address is not None:
            pulumi.set(__self__, "address", address)
        if address_variable is not None:
            pulumi.set(__self__, "address_variable", address_variable)
        if vpn is not None:
            pulumi.set(__self__, "vpn", vpn)
        if vpn_variable is not None:
            pulumi.set(__self__, "vpn_variable", vpn_variable)

    @_builtins.property
    @pulumi.getter
    def address(self) -> Optional[_builtins.str]:
        """
        DHCPv6 Helper address
        """
        return pulumi.get(self, "address")

    @_builtins.property
    @pulumi.getter(name="addressVariable")
    def address_variable(self) -> Optional[_builtins.str]:
        """
        Variable name
        """
        return pulumi.get(self, "address_variable")

    @_builtins.property
    @pulumi.getter
    def vpn(self) -> Optional[_builtins.int]:
        """
        DHCPv6 Helper VPN
          - Range: `1`-`65536`
        """
        return pulumi.get(self, "vpn")

    @_builtins.property
    @pulumi.getter(name="vpnVariable")
    def vpn_variable(self) -> Optional[_builtins.str]:
        """
        Variable name
        """
        return pulumi.get(self, "vpn_variable")


@pulumi.output_type
class ServiceLanVpnInterfaceSviFeatureIpv6SecondaryAddress(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "addressVariable":
            suggest = "address_variable"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ServiceLanVpnInterfaceSviFeatureIpv6SecondaryAddress. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ServiceLanVpnInterfaceSviFeatureIpv6SecondaryAddress.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ServiceLanVpnInterfaceSviFeatureIpv6SecondaryAddress.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 address: Optional[_builtins.str] = None,
                 address_variable: Optional[_builtins.str] = None):
        """
        :param _builtins.str address: IPv6 Address
        :param _builtins.str address_variable: Variable name
        """
        if address is not None:
            pulumi.set(__self__, "address", address)
        if address_variable is not None:
            pulumi.set(__self__, "address_variable", address_variable)

    @_builtins.property
    @pulumi.getter
    def address(self) -> Optional[_builtins.str]:
        """
        IPv6 Address
        """
        return pulumi.get(self, "address")

    @_builtins.property
    @pulumi.getter(name="addressVariable")
    def address_variable(self) -> Optional[_builtins.str]:
        """
        Variable name
        """
        return pulumi.get(self, "address_variable")


@pulumi.output_type
class ServiceLanVpnInterfaceSviFeatureIpv6Vrrp(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "groupId":
            suggest = "group_id"
        elif key == "groupIdVariable":
            suggest = "group_id_variable"
        elif key == "priorityVariable":
            suggest = "priority_variable"
        elif key == "secondaryAddresses":
            suggest = "secondary_addresses"
        elif key == "timerVariable":
            suggest = "timer_variable"
        elif key == "trackOmp":
            suggest = "track_omp"
        elif key == "trackOmpVariable":
            suggest = "track_omp_variable"
        elif key == "trackPrefixList":
            suggest = "track_prefix_list"
        elif key == "trackPrefixListVariable":
            suggest = "track_prefix_list_variable"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ServiceLanVpnInterfaceSviFeatureIpv6Vrrp. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ServiceLanVpnInterfaceSviFeatureIpv6Vrrp.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ServiceLanVpnInterfaceSviFeatureIpv6Vrrp.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 addresses: Optional[Sequence['outputs.ServiceLanVpnInterfaceSviFeatureIpv6VrrpAddress']] = None,
                 group_id: Optional[_builtins.int] = None,
                 group_id_variable: Optional[_builtins.str] = None,
                 priority: Optional[_builtins.int] = None,
                 priority_variable: Optional[_builtins.str] = None,
                 secondary_addresses: Optional[Sequence['outputs.ServiceLanVpnInterfaceSviFeatureIpv6VrrpSecondaryAddress']] = None,
                 timer: Optional[_builtins.int] = None,
                 timer_variable: Optional[_builtins.str] = None,
                 track_omp: Optional[_builtins.bool] = None,
                 track_omp_variable: Optional[_builtins.str] = None,
                 track_prefix_list: Optional[_builtins.str] = None,
                 track_prefix_list_variable: Optional[_builtins.str] = None):
        """
        :param Sequence['ServiceLanVpnInterfaceSviFeatureIpv6VrrpAddressArgs'] addresses: IPv6 VRRP
        :param _builtins.int group_id: Group ID
                 - Range: `1`-`255`
        :param _builtins.str group_id_variable: Variable name
        :param _builtins.int priority: Set priority
                 - Range: `1`-`254`
                 - Default value: `100`
        :param _builtins.str priority_variable: Variable name
        :param Sequence['ServiceLanVpnInterfaceSviFeatureIpv6VrrpSecondaryAddressArgs'] secondary_addresses: IPv6 Secondary IP address
        :param _builtins.int timer: Timer interval for successive advertisements, in milliseconds
                 - Range: `100`-`40950`
                 - Default value: `1000`
        :param _builtins.str timer_variable: Variable name
        :param _builtins.bool track_omp: Track OMP status
                 - Default value: `false`
        :param _builtins.str track_omp_variable: Variable name
        :param _builtins.str track_prefix_list: Track Prefix List
        :param _builtins.str track_prefix_list_variable: Variable name
        """
        if addresses is not None:
            pulumi.set(__self__, "addresses", addresses)
        if group_id is not None:
            pulumi.set(__self__, "group_id", group_id)
        if group_id_variable is not None:
            pulumi.set(__self__, "group_id_variable", group_id_variable)
        if priority is not None:
            pulumi.set(__self__, "priority", priority)
        if priority_variable is not None:
            pulumi.set(__self__, "priority_variable", priority_variable)
        if secondary_addresses is not None:
            pulumi.set(__self__, "secondary_addresses", secondary_addresses)
        if timer is not None:
            pulumi.set(__self__, "timer", timer)
        if timer_variable is not None:
            pulumi.set(__self__, "timer_variable", timer_variable)
        if track_omp is not None:
            pulumi.set(__self__, "track_omp", track_omp)
        if track_omp_variable is not None:
            pulumi.set(__self__, "track_omp_variable", track_omp_variable)
        if track_prefix_list is not None:
            pulumi.set(__self__, "track_prefix_list", track_prefix_list)
        if track_prefix_list_variable is not None:
            pulumi.set(__self__, "track_prefix_list_variable", track_prefix_list_variable)

    @_builtins.property
    @pulumi.getter
    def addresses(self) -> Optional[Sequence['outputs.ServiceLanVpnInterfaceSviFeatureIpv6VrrpAddress']]:
        """
        IPv6 VRRP
        """
        return pulumi.get(self, "addresses")

    @_builtins.property
    @pulumi.getter(name="groupId")
    def group_id(self) -> Optional[_builtins.int]:
        """
        Group ID
          - Range: `1`-`255`
        """
        return pulumi.get(self, "group_id")

    @_builtins.property
    @pulumi.getter(name="groupIdVariable")
    def group_id_variable(self) -> Optional[_builtins.str]:
        """
        Variable name
        """
        return pulumi.get(self, "group_id_variable")

    @_builtins.property
    @pulumi.getter
    def priority(self) -> Optional[_builtins.int]:
        """
        Set priority
          - Range: `1`-`254`
          - Default value: `100`
        """
        return pulumi.get(self, "priority")

    @_builtins.property
    @pulumi.getter(name="priorityVariable")
    def priority_variable(self) -> Optional[_builtins.str]:
        """
        Variable name
        """
        return pulumi.get(self, "priority_variable")

    @_builtins.property
    @pulumi.getter(name="secondaryAddresses")
    def secondary_addresses(self) -> Optional[Sequence['outputs.ServiceLanVpnInterfaceSviFeatureIpv6VrrpSecondaryAddress']]:
        """
        IPv6 Secondary IP address
        """
        return pulumi.get(self, "secondary_addresses")

    @_builtins.property
    @pulumi.getter
    def timer(self) -> Optional[_builtins.int]:
        """
        Timer interval for successive advertisements, in milliseconds
          - Range: `100`-`40950`
          - Default value: `1000`
        """
        return pulumi.get(self, "timer")

    @_builtins.property
    @pulumi.getter(name="timerVariable")
    def timer_variable(self) -> Optional[_builtins.str]:
        """
        Variable name
        """
        return pulumi.get(self, "timer_variable")

    @_builtins.property
    @pulumi.getter(name="trackOmp")
    def track_omp(self) -> Optional[_builtins.bool]:
        """
        Track OMP status
          - Default value: `false`
        """
        return pulumi.get(self, "track_omp")

    @_builtins.property
    @pulumi.getter(name="trackOmpVariable")
    def track_omp_variable(self) -> Optional[_builtins.str]:
        """
        Variable name
        """
        return pulumi.get(self, "track_omp_variable")

    @_builtins.property
    @pulumi.getter(name="trackPrefixList")
    def track_prefix_list(self) -> Optional[_builtins.str]:
        """
        Track Prefix List
        """
        return pulumi.get(self, "track_prefix_list")

    @_builtins.property
    @pulumi.getter(name="trackPrefixListVariable")
    def track_prefix_list_variable(self) -> Optional[_builtins.str]:
        """
        Variable name
        """
        return pulumi.get(self, "track_prefix_list_variable")


@pulumi.output_type
class ServiceLanVpnInterfaceSviFeatureIpv6VrrpAddress(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "globalAddress":
            suggest = "global_address"
        elif key == "globalAddressVariable":
            suggest = "global_address_variable"
        elif key == "linkLocalAddress":
            suggest = "link_local_address"
        elif key == "linkLocalAddressVariable":
            suggest = "link_local_address_variable"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ServiceLanVpnInterfaceSviFeatureIpv6VrrpAddress. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ServiceLanVpnInterfaceSviFeatureIpv6VrrpAddress.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ServiceLanVpnInterfaceSviFeatureIpv6VrrpAddress.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 global_address: Optional[_builtins.str] = None,
                 global_address_variable: Optional[_builtins.str] = None,
                 link_local_address: Optional[_builtins.str] = None,
                 link_local_address_variable: Optional[_builtins.str] = None):
        """
        :param _builtins.str global_address: Assign Global IPv6 Prefix
        :param _builtins.str global_address_variable: Variable name
        :param _builtins.str link_local_address: Use link-local IPv6 Address
        :param _builtins.str link_local_address_variable: Variable name
        """
        if global_address is not None:
            pulumi.set(__self__, "global_address", global_address)
        if global_address_variable is not None:
            pulumi.set(__self__, "global_address_variable", global_address_variable)
        if link_local_address is not None:
            pulumi.set(__self__, "link_local_address", link_local_address)
        if link_local_address_variable is not None:
            pulumi.set(__self__, "link_local_address_variable", link_local_address_variable)

    @_builtins.property
    @pulumi.getter(name="globalAddress")
    def global_address(self) -> Optional[_builtins.str]:
        """
        Assign Global IPv6 Prefix
        """
        return pulumi.get(self, "global_address")

    @_builtins.property
    @pulumi.getter(name="globalAddressVariable")
    def global_address_variable(self) -> Optional[_builtins.str]:
        """
        Variable name
        """
        return pulumi.get(self, "global_address_variable")

    @_builtins.property
    @pulumi.getter(name="linkLocalAddress")
    def link_local_address(self) -> Optional[_builtins.str]:
        """
        Use link-local IPv6 Address
        """
        return pulumi.get(self, "link_local_address")

    @_builtins.property
    @pulumi.getter(name="linkLocalAddressVariable")
    def link_local_address_variable(self) -> Optional[_builtins.str]:
        """
        Variable name
        """
        return pulumi.get(self, "link_local_address_variable")


@pulumi.output_type
class ServiceLanVpnInterfaceSviFeatureIpv6VrrpSecondaryAddress(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "prefixVariable":
            suggest = "prefix_variable"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ServiceLanVpnInterfaceSviFeatureIpv6VrrpSecondaryAddress. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ServiceLanVpnInterfaceSviFeatureIpv6VrrpSecondaryAddress.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ServiceLanVpnInterfaceSviFeatureIpv6VrrpSecondaryAddress.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 prefix: Optional[_builtins.str] = None,
                 prefix_variable: Optional[_builtins.str] = None):
        """
        :param _builtins.str prefix: IPv6 Secondary IP address
        :param _builtins.str prefix_variable: Variable name
        """
        if prefix is not None:
            pulumi.set(__self__, "prefix", prefix)
        if prefix_variable is not None:
            pulumi.set(__self__, "prefix_variable", prefix_variable)

    @_builtins.property
    @pulumi.getter
    def prefix(self) -> Optional[_builtins.str]:
        """
        IPv6 Secondary IP address
        """
        return pulumi.get(self, "prefix")

    @_builtins.property
    @pulumi.getter(name="prefixVariable")
    def prefix_variable(self) -> Optional[_builtins.str]:
        """
        Variable name
        """
        return pulumi.get(self, "prefix_variable")


@pulumi.output_type
class ServiceMulticastFeatureAutoRpAnnounce(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "interfaceName":
            suggest = "interface_name"
        elif key == "interfaceNameVariable":
            suggest = "interface_name_variable"
        elif key == "scopeVariable":
            suggest = "scope_variable"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ServiceMulticastFeatureAutoRpAnnounce. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ServiceMulticastFeatureAutoRpAnnounce.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ServiceMulticastFeatureAutoRpAnnounce.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 interface_name: Optional[_builtins.str] = None,
                 interface_name_variable: Optional[_builtins.str] = None,
                 scope: Optional[_builtins.int] = None,
                 scope_variable: Optional[_builtins.str] = None):
        """
        :param _builtins.str interface_name: Set RP Announce Interface Name
        :param _builtins.str interface_name_variable: Variable name
        :param _builtins.int scope: Set RP Announce Scope
                 - Range: `1`-`255`
        :param _builtins.str scope_variable: Variable name
        """
        if interface_name is not None:
            pulumi.set(__self__, "interface_name", interface_name)
        if interface_name_variable is not None:
            pulumi.set(__self__, "interface_name_variable", interface_name_variable)
        if scope is not None:
            pulumi.set(__self__, "scope", scope)
        if scope_variable is not None:
            pulumi.set(__self__, "scope_variable", scope_variable)

    @_builtins.property
    @pulumi.getter(name="interfaceName")
    def interface_name(self) -> Optional[_builtins.str]:
        """
        Set RP Announce Interface Name
        """
        return pulumi.get(self, "interface_name")

    @_builtins.property
    @pulumi.getter(name="interfaceNameVariable")
    def interface_name_variable(self) -> Optional[_builtins.str]:
        """
        Variable name
        """
        return pulumi.get(self, "interface_name_variable")

    @_builtins.property
    @pulumi.getter
    def scope(self) -> Optional[_builtins.int]:
        """
        Set RP Announce Scope
          - Range: `1`-`255`
        """
        return pulumi.get(self, "scope")

    @_builtins.property
    @pulumi.getter(name="scopeVariable")
    def scope_variable(self) -> Optional[_builtins.str]:
        """
        Variable name
        """
        return pulumi.get(self, "scope_variable")


@pulumi.output_type
class ServiceMulticastFeatureAutoRpDiscovery(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "interfaceName":
            suggest = "interface_name"
        elif key == "interfaceNameVariable":
            suggest = "interface_name_variable"
        elif key == "scopeVariable":
            suggest = "scope_variable"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ServiceMulticastFeatureAutoRpDiscovery. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ServiceMulticastFeatureAutoRpDiscovery.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ServiceMulticastFeatureAutoRpDiscovery.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 interface_name: Optional[_builtins.str] = None,
                 interface_name_variable: Optional[_builtins.str] = None,
                 scope: Optional[_builtins.int] = None,
                 scope_variable: Optional[_builtins.str] = None):
        """
        :param _builtins.str interface_name: Set RP Discovery Interface Name
        :param _builtins.str interface_name_variable: Variable name
        :param _builtins.int scope: Set RP Discovery Scope
                 - Range: `1`-`255`
        :param _builtins.str scope_variable: Variable name
        """
        if interface_name is not None:
            pulumi.set(__self__, "interface_name", interface_name)
        if interface_name_variable is not None:
            pulumi.set(__self__, "interface_name_variable", interface_name_variable)
        if scope is not None:
            pulumi.set(__self__, "scope", scope)
        if scope_variable is not None:
            pulumi.set(__self__, "scope_variable", scope_variable)

    @_builtins.property
    @pulumi.getter(name="interfaceName")
    def interface_name(self) -> Optional[_builtins.str]:
        """
        Set RP Discovery Interface Name
        """
        return pulumi.get(self, "interface_name")

    @_builtins.property
    @pulumi.getter(name="interfaceNameVariable")
    def interface_name_variable(self) -> Optional[_builtins.str]:
        """
        Variable name
        """
        return pulumi.get(self, "interface_name_variable")

    @_builtins.property
    @pulumi.getter
    def scope(self) -> Optional[_builtins.int]:
        """
        Set RP Discovery Scope
          - Range: `1`-`255`
        """
        return pulumi.get(self, "scope")

    @_builtins.property
    @pulumi.getter(name="scopeVariable")
    def scope_variable(self) -> Optional[_builtins.str]:
        """
        Variable name
        """
        return pulumi.get(self, "scope_variable")


@pulumi.output_type
class ServiceMulticastFeatureIgmpInterface(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "interfaceName":
            suggest = "interface_name"
        elif key == "interfaceNameVariable":
            suggest = "interface_name_variable"
        elif key == "joinGroups":
            suggest = "join_groups"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ServiceMulticastFeatureIgmpInterface. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ServiceMulticastFeatureIgmpInterface.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ServiceMulticastFeatureIgmpInterface.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 interface_name: Optional[_builtins.str] = None,
                 interface_name_variable: Optional[_builtins.str] = None,
                 join_groups: Optional[Sequence['outputs.ServiceMulticastFeatureIgmpInterfaceJoinGroup']] = None,
                 version: Optional[_builtins.int] = None):
        """
        :param _builtins.str interface_name: Set interface name
        :param _builtins.str interface_name_variable: Variable name
        :param Sequence['ServiceMulticastFeatureIgmpInterfaceJoinGroupArgs'] join_groups: Configure static joins
        :param _builtins.int version: igmp Version <1..3>
                 - Range: `1`-`3`
                 - Default value: `2`
        """
        if interface_name is not None:
            pulumi.set(__self__, "interface_name", interface_name)
        if interface_name_variable is not None:
            pulumi.set(__self__, "interface_name_variable", interface_name_variable)
        if join_groups is not None:
            pulumi.set(__self__, "join_groups", join_groups)
        if version is not None:
            pulumi.set(__self__, "version", version)

    @_builtins.property
    @pulumi.getter(name="interfaceName")
    def interface_name(self) -> Optional[_builtins.str]:
        """
        Set interface name
        """
        return pulumi.get(self, "interface_name")

    @_builtins.property
    @pulumi.getter(name="interfaceNameVariable")
    def interface_name_variable(self) -> Optional[_builtins.str]:
        """
        Variable name
        """
        return pulumi.get(self, "interface_name_variable")

    @_builtins.property
    @pulumi.getter(name="joinGroups")
    def join_groups(self) -> Optional[Sequence['outputs.ServiceMulticastFeatureIgmpInterfaceJoinGroup']]:
        """
        Configure static joins
        """
        return pulumi.get(self, "join_groups")

    @_builtins.property
    @pulumi.getter
    def version(self) -> Optional[_builtins.int]:
        """
        igmp Version <1..3>
          - Range: `1`-`3`
          - Default value: `2`
        """
        return pulumi.get(self, "version")


@pulumi.output_type
class ServiceMulticastFeatureIgmpInterfaceJoinGroup(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "groupAddress":
            suggest = "group_address"
        elif key == "groupAddressVariable":
            suggest = "group_address_variable"
        elif key == "sourceAddress":
            suggest = "source_address"
        elif key == "sourceAddressVariable":
            suggest = "source_address_variable"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ServiceMulticastFeatureIgmpInterfaceJoinGroup. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ServiceMulticastFeatureIgmpInterfaceJoinGroup.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ServiceMulticastFeatureIgmpInterfaceJoinGroup.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 group_address: Optional[_builtins.str] = None,
                 group_address_variable: Optional[_builtins.str] = None,
                 source_address: Optional[_builtins.str] = None,
                 source_address_variable: Optional[_builtins.str] = None):
        """
        :param _builtins.str group_address: Set group address
        :param _builtins.str group_address_variable: Variable name
        :param _builtins.str source_address: Set source address
        :param _builtins.str source_address_variable: Variable name
        """
        if group_address is not None:
            pulumi.set(__self__, "group_address", group_address)
        if group_address_variable is not None:
            pulumi.set(__self__, "group_address_variable", group_address_variable)
        if source_address is not None:
            pulumi.set(__self__, "source_address", source_address)
        if source_address_variable is not None:
            pulumi.set(__self__, "source_address_variable", source_address_variable)

    @_builtins.property
    @pulumi.getter(name="groupAddress")
    def group_address(self) -> Optional[_builtins.str]:
        """
        Set group address
        """
        return pulumi.get(self, "group_address")

    @_builtins.property
    @pulumi.getter(name="groupAddressVariable")
    def group_address_variable(self) -> Optional[_builtins.str]:
        """
        Variable name
        """
        return pulumi.get(self, "group_address_variable")

    @_builtins.property
    @pulumi.getter(name="sourceAddress")
    def source_address(self) -> Optional[_builtins.str]:
        """
        Set source address
        """
        return pulumi.get(self, "source_address")

    @_builtins.property
    @pulumi.getter(name="sourceAddressVariable")
    def source_address_variable(self) -> Optional[_builtins.str]:
        """
        Variable name
        """
        return pulumi.get(self, "source_address_variable")


@pulumi.output_type
class ServiceMulticastFeatureMsdpGroup(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "meshGroupName":
            suggest = "mesh_group_name"
        elif key == "meshGroupNameVariable":
            suggest = "mesh_group_name_variable"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ServiceMulticastFeatureMsdpGroup. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ServiceMulticastFeatureMsdpGroup.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ServiceMulticastFeatureMsdpGroup.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 mesh_group_name: Optional[_builtins.str] = None,
                 mesh_group_name_variable: Optional[_builtins.str] = None,
                 peers: Optional[Sequence['outputs.ServiceMulticastFeatureMsdpGroupPeer']] = None):
        """
        :param _builtins.str mesh_group_name: Set MSDP mesh group
        :param _builtins.str mesh_group_name_variable: Variable name
        :param Sequence['ServiceMulticastFeatureMsdpGroupPeerArgs'] peers: Configure peer
        """
        if mesh_group_name is not None:
            pulumi.set(__self__, "mesh_group_name", mesh_group_name)
        if mesh_group_name_variable is not None:
            pulumi.set(__self__, "mesh_group_name_variable", mesh_group_name_variable)
        if peers is not None:
            pulumi.set(__self__, "peers", peers)

    @_builtins.property
    @pulumi.getter(name="meshGroupName")
    def mesh_group_name(self) -> Optional[_builtins.str]:
        """
        Set MSDP mesh group
        """
        return pulumi.get(self, "mesh_group_name")

    @_builtins.property
    @pulumi.getter(name="meshGroupNameVariable")
    def mesh_group_name_variable(self) -> Optional[_builtins.str]:
        """
        Variable name
        """
        return pulumi.get(self, "mesh_group_name_variable")

    @_builtins.property
    @pulumi.getter
    def peers(self) -> Optional[Sequence['outputs.ServiceMulticastFeatureMsdpGroupPeer']]:
        """
        Configure peer
        """
        return pulumi.get(self, "peers")


@pulumi.output_type
class ServiceMulticastFeatureMsdpGroupPeer(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "connectionSourceInterface":
            suggest = "connection_source_interface"
        elif key == "connectionSourceInterfaceVariable":
            suggest = "connection_source_interface_variable"
        elif key == "defaultPeer":
            suggest = "default_peer"
        elif key == "keepaliveHoldTime":
            suggest = "keepalive_hold_time"
        elif key == "keepaliveHoldTimeVariable":
            suggest = "keepalive_hold_time_variable"
        elif key == "keepaliveInterval":
            suggest = "keepalive_interval"
        elif key == "keepaliveIntervalVariable":
            suggest = "keepalive_interval_variable"
        elif key == "peerAuthenticationPassword":
            suggest = "peer_authentication_password"
        elif key == "peerAuthenticationPasswordVariable":
            suggest = "peer_authentication_password_variable"
        elif key == "peerIp":
            suggest = "peer_ip"
        elif key == "peerIpVariable":
            suggest = "peer_ip_variable"
        elif key == "prefixListId":
            suggest = "prefix_list_id"
        elif key == "remoteAs":
            suggest = "remote_as"
        elif key == "remoteAsVariable":
            suggest = "remote_as_variable"
        elif key == "saLimit":
            suggest = "sa_limit"
        elif key == "saLimitVariable":
            suggest = "sa_limit_variable"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ServiceMulticastFeatureMsdpGroupPeer. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ServiceMulticastFeatureMsdpGroupPeer.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ServiceMulticastFeatureMsdpGroupPeer.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 connection_source_interface: Optional[_builtins.str] = None,
                 connection_source_interface_variable: Optional[_builtins.str] = None,
                 default_peer: Optional[_builtins.bool] = None,
                 keepalive_hold_time: Optional[_builtins.int] = None,
                 keepalive_hold_time_variable: Optional[_builtins.str] = None,
                 keepalive_interval: Optional[_builtins.int] = None,
                 keepalive_interval_variable: Optional[_builtins.str] = None,
                 peer_authentication_password: Optional[_builtins.str] = None,
                 peer_authentication_password_variable: Optional[_builtins.str] = None,
                 peer_ip: Optional[_builtins.str] = None,
                 peer_ip_variable: Optional[_builtins.str] = None,
                 prefix_list_id: Optional[_builtins.str] = None,
                 remote_as: Optional[_builtins.int] = None,
                 remote_as_variable: Optional[_builtins.str] = None,
                 sa_limit: Optional[_builtins.int] = None,
                 sa_limit_variable: Optional[_builtins.str] = None):
        """
        :param _builtins.str connection_source_interface: Set MSDP peer ip connect-source interface
        :param _builtins.str connection_source_interface_variable: Variable name
        :param _builtins.bool default_peer: Set MSDP default peer
        :param _builtins.int keepalive_hold_time: Set MSDP peer ip keepalive hold time
                 - Range: `1`-`75`
        :param _builtins.str keepalive_hold_time_variable: Variable name
        :param _builtins.int keepalive_interval: Set MSDP peer ip keepalive interval
                 - Range: `1`-`60`
        :param _builtins.str keepalive_interval_variable: Variable name
        :param _builtins.str peer_authentication_password: Set MSDP peer ip password
        :param _builtins.str peer_authentication_password_variable: Variable name
        :param _builtins.str peer_ip: Set MSDP peer ip
        :param _builtins.str peer_ip_variable: Variable name
        :param _builtins.int remote_as: Set MSDP peer ip remote autonomous system number
                 - Range: `1`-`65535`
        :param _builtins.str remote_as_variable: Variable name
        :param _builtins.int sa_limit: Set MSDP peer ip SA limit message number
                 - Range: `1`-`2147483646`
        :param _builtins.str sa_limit_variable: Variable name
        """
        if connection_source_interface is not None:
            pulumi.set(__self__, "connection_source_interface", connection_source_interface)
        if connection_source_interface_variable is not None:
            pulumi.set(__self__, "connection_source_interface_variable", connection_source_interface_variable)
        if default_peer is not None:
            pulumi.set(__self__, "default_peer", default_peer)
        if keepalive_hold_time is not None:
            pulumi.set(__self__, "keepalive_hold_time", keepalive_hold_time)
        if keepalive_hold_time_variable is not None:
            pulumi.set(__self__, "keepalive_hold_time_variable", keepalive_hold_time_variable)
        if keepalive_interval is not None:
            pulumi.set(__self__, "keepalive_interval", keepalive_interval)
        if keepalive_interval_variable is not None:
            pulumi.set(__self__, "keepalive_interval_variable", keepalive_interval_variable)
        if peer_authentication_password is not None:
            pulumi.set(__self__, "peer_authentication_password", peer_authentication_password)
        if peer_authentication_password_variable is not None:
            pulumi.set(__self__, "peer_authentication_password_variable", peer_authentication_password_variable)
        if peer_ip is not None:
            pulumi.set(__self__, "peer_ip", peer_ip)
        if peer_ip_variable is not None:
            pulumi.set(__self__, "peer_ip_variable", peer_ip_variable)
        if prefix_list_id is not None:
            pulumi.set(__self__, "prefix_list_id", prefix_list_id)
        if remote_as is not None:
            pulumi.set(__self__, "remote_as", remote_as)
        if remote_as_variable is not None:
            pulumi.set(__self__, "remote_as_variable", remote_as_variable)
        if sa_limit is not None:
            pulumi.set(__self__, "sa_limit", sa_limit)
        if sa_limit_variable is not None:
            pulumi.set(__self__, "sa_limit_variable", sa_limit_variable)

    @_builtins.property
    @pulumi.getter(name="connectionSourceInterface")
    def connection_source_interface(self) -> Optional[_builtins.str]:
        """
        Set MSDP peer ip connect-source interface
        """
        return pulumi.get(self, "connection_source_interface")

    @_builtins.property
    @pulumi.getter(name="connectionSourceInterfaceVariable")
    def connection_source_interface_variable(self) -> Optional[_builtins.str]:
        """
        Variable name
        """
        return pulumi.get(self, "connection_source_interface_variable")

    @_builtins.property
    @pulumi.getter(name="defaultPeer")
    def default_peer(self) -> Optional[_builtins.bool]:
        """
        Set MSDP default peer
        """
        return pulumi.get(self, "default_peer")

    @_builtins.property
    @pulumi.getter(name="keepaliveHoldTime")
    def keepalive_hold_time(self) -> Optional[_builtins.int]:
        """
        Set MSDP peer ip keepalive hold time
          - Range: `1`-`75`
        """
        return pulumi.get(self, "keepalive_hold_time")

    @_builtins.property
    @pulumi.getter(name="keepaliveHoldTimeVariable")
    def keepalive_hold_time_variable(self) -> Optional[_builtins.str]:
        """
        Variable name
        """
        return pulumi.get(self, "keepalive_hold_time_variable")

    @_builtins.property
    @pulumi.getter(name="keepaliveInterval")
    def keepalive_interval(self) -> Optional[_builtins.int]:
        """
        Set MSDP peer ip keepalive interval
          - Range: `1`-`60`
        """
        return pulumi.get(self, "keepalive_interval")

    @_builtins.property
    @pulumi.getter(name="keepaliveIntervalVariable")
    def keepalive_interval_variable(self) -> Optional[_builtins.str]:
        """
        Variable name
        """
        return pulumi.get(self, "keepalive_interval_variable")

    @_builtins.property
    @pulumi.getter(name="peerAuthenticationPassword")
    def peer_authentication_password(self) -> Optional[_builtins.str]:
        """
        Set MSDP peer ip password
        """
        return pulumi.get(self, "peer_authentication_password")

    @_builtins.property
    @pulumi.getter(name="peerAuthenticationPasswordVariable")
    def peer_authentication_password_variable(self) -> Optional[_builtins.str]:
        """
        Variable name
        """
        return pulumi.get(self, "peer_authentication_password_variable")

    @_builtins.property
    @pulumi.getter(name="peerIp")
    def peer_ip(self) -> Optional[_builtins.str]:
        """
        Set MSDP peer ip
        """
        return pulumi.get(self, "peer_ip")

    @_builtins.property
    @pulumi.getter(name="peerIpVariable")
    def peer_ip_variable(self) -> Optional[_builtins.str]:
        """
        Variable name
        """
        return pulumi.get(self, "peer_ip_variable")

    @_builtins.property
    @pulumi.getter(name="prefixListId")
    def prefix_list_id(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "prefix_list_id")

    @_builtins.property
    @pulumi.getter(name="remoteAs")
    def remote_as(self) -> Optional[_builtins.int]:
        """
        Set MSDP peer ip remote autonomous system number
          - Range: `1`-`65535`
        """
        return pulumi.get(self, "remote_as")

    @_builtins.property
    @pulumi.getter(name="remoteAsVariable")
    def remote_as_variable(self) -> Optional[_builtins.str]:
        """
        Variable name
        """
        return pulumi.get(self, "remote_as_variable")

    @_builtins.property
    @pulumi.getter(name="saLimit")
    def sa_limit(self) -> Optional[_builtins.int]:
        """
        Set MSDP peer ip SA limit message number
          - Range: `1`-`2147483646`
        """
        return pulumi.get(self, "sa_limit")

    @_builtins.property
    @pulumi.getter(name="saLimitVariable")
    def sa_limit_variable(self) -> Optional[_builtins.str]:
        """
        Variable name
        """
        return pulumi.get(self, "sa_limit_variable")


@pulumi.output_type
class ServiceMulticastFeaturePimBsrCandidate(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "acceptCandidateAccessList":
            suggest = "accept_candidate_access_list"
        elif key == "acceptCandidateAccessListVariable":
            suggest = "accept_candidate_access_list_variable"
        elif key == "hashMaskLength":
            suggest = "hash_mask_length"
        elif key == "hashMaskLengthVariable":
            suggest = "hash_mask_length_variable"
        elif key == "interfaceName":
            suggest = "interface_name"
        elif key == "interfaceNameVariable":
            suggest = "interface_name_variable"
        elif key == "priorityVariable":
            suggest = "priority_variable"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ServiceMulticastFeaturePimBsrCandidate. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ServiceMulticastFeaturePimBsrCandidate.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ServiceMulticastFeaturePimBsrCandidate.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 accept_candidate_access_list: Optional[_builtins.str] = None,
                 accept_candidate_access_list_variable: Optional[_builtins.str] = None,
                 hash_mask_length: Optional[_builtins.int] = None,
                 hash_mask_length_variable: Optional[_builtins.str] = None,
                 interface_name: Optional[_builtins.str] = None,
                 interface_name_variable: Optional[_builtins.str] = None,
                 priority: Optional[_builtins.int] = None,
                 priority_variable: Optional[_builtins.str] = None):
        """
        :param _builtins.str accept_candidate_access_list: Set BSR RP candidate filter
        :param _builtins.str accept_candidate_access_list_variable: Variable name
        :param _builtins.int hash_mask_length: Hash Mask length for RP selection
                 - Range: `0`-`32`
        :param _builtins.str hash_mask_length_variable: Variable name
        :param _builtins.str interface_name: Set Autonomic-Networking virtual interface
        :param _builtins.str interface_name_variable: Variable name
        :param _builtins.int priority: Set RP candidate priority
                 - Range: `0`-`255`
        :param _builtins.str priority_variable: Variable name
        """
        if accept_candidate_access_list is not None:
            pulumi.set(__self__, "accept_candidate_access_list", accept_candidate_access_list)
        if accept_candidate_access_list_variable is not None:
            pulumi.set(__self__, "accept_candidate_access_list_variable", accept_candidate_access_list_variable)
        if hash_mask_length is not None:
            pulumi.set(__self__, "hash_mask_length", hash_mask_length)
        if hash_mask_length_variable is not None:
            pulumi.set(__self__, "hash_mask_length_variable", hash_mask_length_variable)
        if interface_name is not None:
            pulumi.set(__self__, "interface_name", interface_name)
        if interface_name_variable is not None:
            pulumi.set(__self__, "interface_name_variable", interface_name_variable)
        if priority is not None:
            pulumi.set(__self__, "priority", priority)
        if priority_variable is not None:
            pulumi.set(__self__, "priority_variable", priority_variable)

    @_builtins.property
    @pulumi.getter(name="acceptCandidateAccessList")
    def accept_candidate_access_list(self) -> Optional[_builtins.str]:
        """
        Set BSR RP candidate filter
        """
        return pulumi.get(self, "accept_candidate_access_list")

    @_builtins.property
    @pulumi.getter(name="acceptCandidateAccessListVariable")
    def accept_candidate_access_list_variable(self) -> Optional[_builtins.str]:
        """
        Variable name
        """
        return pulumi.get(self, "accept_candidate_access_list_variable")

    @_builtins.property
    @pulumi.getter(name="hashMaskLength")
    def hash_mask_length(self) -> Optional[_builtins.int]:
        """
        Hash Mask length for RP selection
          - Range: `0`-`32`
        """
        return pulumi.get(self, "hash_mask_length")

    @_builtins.property
    @pulumi.getter(name="hashMaskLengthVariable")
    def hash_mask_length_variable(self) -> Optional[_builtins.str]:
        """
        Variable name
        """
        return pulumi.get(self, "hash_mask_length_variable")

    @_builtins.property
    @pulumi.getter(name="interfaceName")
    def interface_name(self) -> Optional[_builtins.str]:
        """
        Set Autonomic-Networking virtual interface
        """
        return pulumi.get(self, "interface_name")

    @_builtins.property
    @pulumi.getter(name="interfaceNameVariable")
    def interface_name_variable(self) -> Optional[_builtins.str]:
        """
        Variable name
        """
        return pulumi.get(self, "interface_name_variable")

    @_builtins.property
    @pulumi.getter
    def priority(self) -> Optional[_builtins.int]:
        """
        Set RP candidate priority
          - Range: `0`-`255`
        """
        return pulumi.get(self, "priority")

    @_builtins.property
    @pulumi.getter(name="priorityVariable")
    def priority_variable(self) -> Optional[_builtins.str]:
        """
        Variable name
        """
        return pulumi.get(self, "priority_variable")


@pulumi.output_type
class ServiceMulticastFeaturePimBsrRpCandidate(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "accessListId":
            suggest = "access_list_id"
        elif key == "accessListIdVariable":
            suggest = "access_list_id_variable"
        elif key == "interfaceName":
            suggest = "interface_name"
        elif key == "interfaceNameVariable":
            suggest = "interface_name_variable"
        elif key == "intervalVariable":
            suggest = "interval_variable"
        elif key == "priorityVariable":
            suggest = "priority_variable"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ServiceMulticastFeaturePimBsrRpCandidate. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ServiceMulticastFeaturePimBsrRpCandidate.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ServiceMulticastFeaturePimBsrRpCandidate.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 access_list_id: Optional[_builtins.str] = None,
                 access_list_id_variable: Optional[_builtins.str] = None,
                 interface_name: Optional[_builtins.str] = None,
                 interface_name_variable: Optional[_builtins.str] = None,
                 interval: Optional[_builtins.int] = None,
                 interval_variable: Optional[_builtins.str] = None,
                 priority: Optional[_builtins.int] = None,
                 priority_variable: Optional[_builtins.str] = None):
        """
        :param _builtins.str access_list_id: Set IP Access List for PIM RP Candidate
        :param _builtins.str access_list_id_variable: Variable name
        :param _builtins.str interface_name: Set Autonomic-Networking virtual interface
        :param _builtins.str interface_name_variable: Variable name
        :param _builtins.int interval: Set RP candidate advertisement interval
                 - Range: `1`-`16383`
        :param _builtins.str interval_variable: Variable name
        :param _builtins.int priority: Set RP candidate priority
                 - Range: `0`-`255`
        :param _builtins.str priority_variable: Variable name
        """
        if access_list_id is not None:
            pulumi.set(__self__, "access_list_id", access_list_id)
        if access_list_id_variable is not None:
            pulumi.set(__self__, "access_list_id_variable", access_list_id_variable)
        if interface_name is not None:
            pulumi.set(__self__, "interface_name", interface_name)
        if interface_name_variable is not None:
            pulumi.set(__self__, "interface_name_variable", interface_name_variable)
        if interval is not None:
            pulumi.set(__self__, "interval", interval)
        if interval_variable is not None:
            pulumi.set(__self__, "interval_variable", interval_variable)
        if priority is not None:
            pulumi.set(__self__, "priority", priority)
        if priority_variable is not None:
            pulumi.set(__self__, "priority_variable", priority_variable)

    @_builtins.property
    @pulumi.getter(name="accessListId")
    def access_list_id(self) -> Optional[_builtins.str]:
        """
        Set IP Access List for PIM RP Candidate
        """
        return pulumi.get(self, "access_list_id")

    @_builtins.property
    @pulumi.getter(name="accessListIdVariable")
    def access_list_id_variable(self) -> Optional[_builtins.str]:
        """
        Variable name
        """
        return pulumi.get(self, "access_list_id_variable")

    @_builtins.property
    @pulumi.getter(name="interfaceName")
    def interface_name(self) -> Optional[_builtins.str]:
        """
        Set Autonomic-Networking virtual interface
        """
        return pulumi.get(self, "interface_name")

    @_builtins.property
    @pulumi.getter(name="interfaceNameVariable")
    def interface_name_variable(self) -> Optional[_builtins.str]:
        """
        Variable name
        """
        return pulumi.get(self, "interface_name_variable")

    @_builtins.property
    @pulumi.getter
    def interval(self) -> Optional[_builtins.int]:
        """
        Set RP candidate advertisement interval
          - Range: `1`-`16383`
        """
        return pulumi.get(self, "interval")

    @_builtins.property
    @pulumi.getter(name="intervalVariable")
    def interval_variable(self) -> Optional[_builtins.str]:
        """
        Variable name
        """
        return pulumi.get(self, "interval_variable")

    @_builtins.property
    @pulumi.getter
    def priority(self) -> Optional[_builtins.int]:
        """
        Set RP candidate priority
          - Range: `0`-`255`
        """
        return pulumi.get(self, "priority")

    @_builtins.property
    @pulumi.getter(name="priorityVariable")
    def priority_variable(self) -> Optional[_builtins.str]:
        """
        Variable name
        """
        return pulumi.get(self, "priority_variable")


@pulumi.output_type
class ServiceMulticastFeaturePimInterface(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "interfaceName":
            suggest = "interface_name"
        elif key == "interfaceNameVariable":
            suggest = "interface_name_variable"
        elif key == "joinPruneInterval":
            suggest = "join_prune_interval"
        elif key == "joinPruneIntervalVariable":
            suggest = "join_prune_interval_variable"
        elif key == "queryInterval":
            suggest = "query_interval"
        elif key == "queryIntervalVariable":
            suggest = "query_interval_variable"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ServiceMulticastFeaturePimInterface. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ServiceMulticastFeaturePimInterface.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ServiceMulticastFeaturePimInterface.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 interface_name: Optional[_builtins.str] = None,
                 interface_name_variable: Optional[_builtins.str] = None,
                 join_prune_interval: Optional[_builtins.int] = None,
                 join_prune_interval_variable: Optional[_builtins.str] = None,
                 query_interval: Optional[_builtins.int] = None,
                 query_interval_variable: Optional[_builtins.str] = None):
        """
        :param _builtins.str interface_name: Set interface name
        :param _builtins.str interface_name_variable: Variable name
        :param _builtins.int join_prune_interval: Set interval at which PIM multicast traffic can join or be removed from RPT or SPT
                 - Range: `10`-`600`
                 - Default value: `60`
        :param _builtins.str join_prune_interval_variable: Variable name
        :param _builtins.int query_interval: Set PIM query interval
                 - Range: `1`-`18725`
                 - Default value: `30`
        :param _builtins.str query_interval_variable: Variable name
        """
        if interface_name is not None:
            pulumi.set(__self__, "interface_name", interface_name)
        if interface_name_variable is not None:
            pulumi.set(__self__, "interface_name_variable", interface_name_variable)
        if join_prune_interval is not None:
            pulumi.set(__self__, "join_prune_interval", join_prune_interval)
        if join_prune_interval_variable is not None:
            pulumi.set(__self__, "join_prune_interval_variable", join_prune_interval_variable)
        if query_interval is not None:
            pulumi.set(__self__, "query_interval", query_interval)
        if query_interval_variable is not None:
            pulumi.set(__self__, "query_interval_variable", query_interval_variable)

    @_builtins.property
    @pulumi.getter(name="interfaceName")
    def interface_name(self) -> Optional[_builtins.str]:
        """
        Set interface name
        """
        return pulumi.get(self, "interface_name")

    @_builtins.property
    @pulumi.getter(name="interfaceNameVariable")
    def interface_name_variable(self) -> Optional[_builtins.str]:
        """
        Variable name
        """
        return pulumi.get(self, "interface_name_variable")

    @_builtins.property
    @pulumi.getter(name="joinPruneInterval")
    def join_prune_interval(self) -> Optional[_builtins.int]:
        """
        Set interval at which PIM multicast traffic can join or be removed from RPT or SPT
          - Range: `10`-`600`
          - Default value: `60`
        """
        return pulumi.get(self, "join_prune_interval")

    @_builtins.property
    @pulumi.getter(name="joinPruneIntervalVariable")
    def join_prune_interval_variable(self) -> Optional[_builtins.str]:
        """
        Variable name
        """
        return pulumi.get(self, "join_prune_interval_variable")

    @_builtins.property
    @pulumi.getter(name="queryInterval")
    def query_interval(self) -> Optional[_builtins.int]:
        """
        Set PIM query interval
          - Range: `1`-`18725`
          - Default value: `30`
        """
        return pulumi.get(self, "query_interval")

    @_builtins.property
    @pulumi.getter(name="queryIntervalVariable")
    def query_interval_variable(self) -> Optional[_builtins.str]:
        """
        Variable name
        """
        return pulumi.get(self, "query_interval_variable")


@pulumi.output_type
class ServiceMulticastFeatureStaticRpAddress(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "accessList":
            suggest = "access_list"
        elif key == "accessListVariable":
            suggest = "access_list_variable"
        elif key == "ipAddress":
            suggest = "ip_address"
        elif key == "ipAddressVariable":
            suggest = "ip_address_variable"
        elif key == "overrideVariable":
            suggest = "override_variable"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ServiceMulticastFeatureStaticRpAddress. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ServiceMulticastFeatureStaticRpAddress.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ServiceMulticastFeatureStaticRpAddress.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 access_list: Optional[_builtins.str] = None,
                 access_list_variable: Optional[_builtins.str] = None,
                 ip_address: Optional[_builtins.str] = None,
                 ip_address_variable: Optional[_builtins.str] = None,
                 override: Optional[_builtins.bool] = None,
                 override_variable: Optional[_builtins.str] = None):
        """
        :param _builtins.str access_list: Set Static RP Access List
        :param _builtins.str access_list_variable: Variable name
        :param _builtins.str ip_address: Set Static RP IP Address
        :param _builtins.str ip_address_variable: Variable name
        :param _builtins.bool override: Set override flag
                 - Default value: `false`
        :param _builtins.str override_variable: Variable name
        """
        if access_list is not None:
            pulumi.set(__self__, "access_list", access_list)
        if access_list_variable is not None:
            pulumi.set(__self__, "access_list_variable", access_list_variable)
        if ip_address is not None:
            pulumi.set(__self__, "ip_address", ip_address)
        if ip_address_variable is not None:
            pulumi.set(__self__, "ip_address_variable", ip_address_variable)
        if override is not None:
            pulumi.set(__self__, "override", override)
        if override_variable is not None:
            pulumi.set(__self__, "override_variable", override_variable)

    @_builtins.property
    @pulumi.getter(name="accessList")
    def access_list(self) -> Optional[_builtins.str]:
        """
        Set Static RP Access List
        """
        return pulumi.get(self, "access_list")

    @_builtins.property
    @pulumi.getter(name="accessListVariable")
    def access_list_variable(self) -> Optional[_builtins.str]:
        """
        Variable name
        """
        return pulumi.get(self, "access_list_variable")

    @_builtins.property
    @pulumi.getter(name="ipAddress")
    def ip_address(self) -> Optional[_builtins.str]:
        """
        Set Static RP IP Address
        """
        return pulumi.get(self, "ip_address")

    @_builtins.property
    @pulumi.getter(name="ipAddressVariable")
    def ip_address_variable(self) -> Optional[_builtins.str]:
        """
        Variable name
        """
        return pulumi.get(self, "ip_address_variable")

    @_builtins.property
    @pulumi.getter
    def override(self) -> Optional[_builtins.bool]:
        """
        Set override flag
          - Default value: `false`
        """
        return pulumi.get(self, "override")

    @_builtins.property
    @pulumi.getter(name="overrideVariable")
    def override_variable(self) -> Optional[_builtins.str]:
        """
        Variable name
        """
        return pulumi.get(self, "override_variable")


@pulumi.output_type
class ServiceObjectTrackerGroupFeatureTrackerElement(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "objectTrackerId":
            suggest = "object_tracker_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ServiceObjectTrackerGroupFeatureTrackerElement. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ServiceObjectTrackerGroupFeatureTrackerElement.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ServiceObjectTrackerGroupFeatureTrackerElement.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 object_tracker_id: Optional[_builtins.str] = None):
        if object_tracker_id is not None:
            pulumi.set(__self__, "object_tracker_id", object_tracker_id)

    @_builtins.property
    @pulumi.getter(name="objectTrackerId")
    def object_tracker_id(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "object_tracker_id")


@pulumi.output_type
class ServiceRoutePolicyFeatureSequence(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "baseAction":
            suggest = "base_action"
        elif key == "matchEntries":
            suggest = "match_entries"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ServiceRoutePolicyFeatureSequence. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ServiceRoutePolicyFeatureSequence.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ServiceRoutePolicyFeatureSequence.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 actions: Optional[Sequence['outputs.ServiceRoutePolicyFeatureSequenceAction']] = None,
                 base_action: Optional[_builtins.str] = None,
                 id: Optional[_builtins.int] = None,
                 match_entries: Optional[Sequence['outputs.ServiceRoutePolicyFeatureSequenceMatchEntry']] = None,
                 name: Optional[_builtins.str] = None,
                 protocol: Optional[_builtins.str] = None):
        """
        :param Sequence['ServiceRoutePolicyFeatureSequenceActionArgs'] actions: Define list of actions
        :param _builtins.str base_action: Base Action
                 - Choices: `reject`, `accept`
                 - Default value: `reject`
        :param _builtins.int id: Sequence Id
                 - Range: `1`-`65536`
        :param Sequence['ServiceRoutePolicyFeatureSequenceMatchEntryArgs'] match_entries: Define match conditions
        :param _builtins.str name: Sequence Name
        :param _builtins.str protocol: protocol such as IPV4, IPV6, or BOTH
                 - Choices: `IPV4`, `IPV6`, `BOTH`
                 - Default value: `IPV4`
        """
        if actions is not None:
            pulumi.set(__self__, "actions", actions)
        if base_action is not None:
            pulumi.set(__self__, "base_action", base_action)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if match_entries is not None:
            pulumi.set(__self__, "match_entries", match_entries)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if protocol is not None:
            pulumi.set(__self__, "protocol", protocol)

    @_builtins.property
    @pulumi.getter
    def actions(self) -> Optional[Sequence['outputs.ServiceRoutePolicyFeatureSequenceAction']]:
        """
        Define list of actions
        """
        return pulumi.get(self, "actions")

    @_builtins.property
    @pulumi.getter(name="baseAction")
    def base_action(self) -> Optional[_builtins.str]:
        """
        Base Action
          - Choices: `reject`, `accept`
          - Default value: `reject`
        """
        return pulumi.get(self, "base_action")

    @_builtins.property
    @pulumi.getter
    def id(self) -> Optional[_builtins.int]:
        """
        Sequence Id
          - Range: `1`-`65536`
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter(name="matchEntries")
    def match_entries(self) -> Optional[Sequence['outputs.ServiceRoutePolicyFeatureSequenceMatchEntry']]:
        """
        Define match conditions
        """
        return pulumi.get(self, "match_entries")

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[_builtins.str]:
        """
        Sequence Name
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def protocol(self) -> Optional[_builtins.str]:
        """
        protocol such as IPV4, IPV6, or BOTH
          - Choices: `IPV4`, `IPV6`, `BOTH`
          - Default value: `IPV4`
        """
        return pulumi.get(self, "protocol")


@pulumi.output_type
class ServiceRoutePolicyFeatureSequenceAction(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "asPathPrepends":
            suggest = "as_path_prepends"
        elif key == "communityAdditive":
            suggest = "community_additive"
        elif key == "communityVariable":
            suggest = "community_variable"
        elif key == "ipv4NextHop":
            suggest = "ipv4_next_hop"
        elif key == "ipv6NextHop":
            suggest = "ipv6_next_hop"
        elif key == "localPreference":
            suggest = "local_preference"
        elif key == "metricType":
            suggest = "metric_type"
        elif key == "ompTag":
            suggest = "omp_tag"
        elif key == "ospfTag":
            suggest = "ospf_tag"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ServiceRoutePolicyFeatureSequenceAction. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ServiceRoutePolicyFeatureSequenceAction.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ServiceRoutePolicyFeatureSequenceAction.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 as_path_prepends: Optional[Sequence[_builtins.int]] = None,
                 communities: Optional[Sequence[_builtins.str]] = None,
                 community_additive: Optional[_builtins.bool] = None,
                 community_variable: Optional[_builtins.str] = None,
                 ipv4_next_hop: Optional[_builtins.str] = None,
                 ipv6_next_hop: Optional[_builtins.str] = None,
                 local_preference: Optional[_builtins.int] = None,
                 metric: Optional[_builtins.int] = None,
                 metric_type: Optional[_builtins.str] = None,
                 omp_tag: Optional[_builtins.int] = None,
                 origin: Optional[_builtins.str] = None,
                 ospf_tag: Optional[_builtins.int] = None,
                 weight: Optional[_builtins.int] = None):
        """
        :param _builtins.bool community_additive: - Default value: `false`
        :param _builtins.str community_variable: Variable name
        :param _builtins.str ipv4_next_hop: Set Ipv4 Next Hop
        :param _builtins.str ipv6_next_hop: Set Ipv6 Next Hop
        :param _builtins.int local_preference: Set Local Preference
                 - Range: `0`-`4294967295`
        :param _builtins.int metric: Set Metric
                 - Range: `0`-`4294967295`
        :param _builtins.str metric_type: Set Metric Type
                 - Choices: `type1`, `type2`
        :param _builtins.int omp_tag: Set OMP Tag
                 - Range: `0`-`4294967295`
        :param _builtins.str origin: Set Origin
                 - Choices: `EGP`, `IGP`, `Incomplete`
        :param _builtins.int ospf_tag: Set OSPF Tag
                 - Range: `0`-`4294967295`
        :param _builtins.int weight: Set Weight
                 - Range: `0`-`65535`
        """
        if as_path_prepends is not None:
            pulumi.set(__self__, "as_path_prepends", as_path_prepends)
        if communities is not None:
            pulumi.set(__self__, "communities", communities)
        if community_additive is not None:
            pulumi.set(__self__, "community_additive", community_additive)
        if community_variable is not None:
            pulumi.set(__self__, "community_variable", community_variable)
        if ipv4_next_hop is not None:
            pulumi.set(__self__, "ipv4_next_hop", ipv4_next_hop)
        if ipv6_next_hop is not None:
            pulumi.set(__self__, "ipv6_next_hop", ipv6_next_hop)
        if local_preference is not None:
            pulumi.set(__self__, "local_preference", local_preference)
        if metric is not None:
            pulumi.set(__self__, "metric", metric)
        if metric_type is not None:
            pulumi.set(__self__, "metric_type", metric_type)
        if omp_tag is not None:
            pulumi.set(__self__, "omp_tag", omp_tag)
        if origin is not None:
            pulumi.set(__self__, "origin", origin)
        if ospf_tag is not None:
            pulumi.set(__self__, "ospf_tag", ospf_tag)
        if weight is not None:
            pulumi.set(__self__, "weight", weight)

    @_builtins.property
    @pulumi.getter(name="asPathPrepends")
    def as_path_prepends(self) -> Optional[Sequence[_builtins.int]]:
        return pulumi.get(self, "as_path_prepends")

    @_builtins.property
    @pulumi.getter
    def communities(self) -> Optional[Sequence[_builtins.str]]:
        return pulumi.get(self, "communities")

    @_builtins.property
    @pulumi.getter(name="communityAdditive")
    def community_additive(self) -> Optional[_builtins.bool]:
        """
        - Default value: `false`
        """
        return pulumi.get(self, "community_additive")

    @_builtins.property
    @pulumi.getter(name="communityVariable")
    def community_variable(self) -> Optional[_builtins.str]:
        """
        Variable name
        """
        return pulumi.get(self, "community_variable")

    @_builtins.property
    @pulumi.getter(name="ipv4NextHop")
    def ipv4_next_hop(self) -> Optional[_builtins.str]:
        """
        Set Ipv4 Next Hop
        """
        return pulumi.get(self, "ipv4_next_hop")

    @_builtins.property
    @pulumi.getter(name="ipv6NextHop")
    def ipv6_next_hop(self) -> Optional[_builtins.str]:
        """
        Set Ipv6 Next Hop
        """
        return pulumi.get(self, "ipv6_next_hop")

    @_builtins.property
    @pulumi.getter(name="localPreference")
    def local_preference(self) -> Optional[_builtins.int]:
        """
        Set Local Preference
          - Range: `0`-`4294967295`
        """
        return pulumi.get(self, "local_preference")

    @_builtins.property
    @pulumi.getter
    def metric(self) -> Optional[_builtins.int]:
        """
        Set Metric
          - Range: `0`-`4294967295`
        """
        return pulumi.get(self, "metric")

    @_builtins.property
    @pulumi.getter(name="metricType")
    def metric_type(self) -> Optional[_builtins.str]:
        """
        Set Metric Type
          - Choices: `type1`, `type2`
        """
        return pulumi.get(self, "metric_type")

    @_builtins.property
    @pulumi.getter(name="ompTag")
    def omp_tag(self) -> Optional[_builtins.int]:
        """
        Set OMP Tag
          - Range: `0`-`4294967295`
        """
        return pulumi.get(self, "omp_tag")

    @_builtins.property
    @pulumi.getter
    def origin(self) -> Optional[_builtins.str]:
        """
        Set Origin
          - Choices: `EGP`, `IGP`, `Incomplete`
        """
        return pulumi.get(self, "origin")

    @_builtins.property
    @pulumi.getter(name="ospfTag")
    def ospf_tag(self) -> Optional[_builtins.int]:
        """
        Set OSPF Tag
          - Range: `0`-`4294967295`
        """
        return pulumi.get(self, "ospf_tag")

    @_builtins.property
    @pulumi.getter
    def weight(self) -> Optional[_builtins.int]:
        """
        Set Weight
          - Range: `0`-`65535`
        """
        return pulumi.get(self, "weight")


@pulumi.output_type
class ServiceRoutePolicyFeatureSequenceMatchEntry(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "asPathListId":
            suggest = "as_path_list_id"
        elif key == "bgpLocalPreference":
            suggest = "bgp_local_preference"
        elif key == "expandedCommunityListId":
            suggest = "expanded_community_list_id"
        elif key == "extendedCommunityListId":
            suggest = "extended_community_list_id"
        elif key == "ipv4AddressPrefixListId":
            suggest = "ipv4_address_prefix_list_id"
        elif key == "ipv4NextHopPrefixListId":
            suggest = "ipv4_next_hop_prefix_list_id"
        elif key == "ipv6AddressPrefixListId":
            suggest = "ipv6_address_prefix_list_id"
        elif key == "ipv6NextHopPrefixListId":
            suggest = "ipv6_next_hop_prefix_list_id"
        elif key == "ompTag":
            suggest = "omp_tag"
        elif key == "ospfTag":
            suggest = "ospf_tag"
        elif key == "standardCommunityListCriteria":
            suggest = "standard_community_list_criteria"
        elif key == "standardCommunityLists":
            suggest = "standard_community_lists"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ServiceRoutePolicyFeatureSequenceMatchEntry. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ServiceRoutePolicyFeatureSequenceMatchEntry.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ServiceRoutePolicyFeatureSequenceMatchEntry.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 as_path_list_id: Optional[_builtins.str] = None,
                 bgp_local_preference: Optional[_builtins.int] = None,
                 expanded_community_list_id: Optional[_builtins.str] = None,
                 extended_community_list_id: Optional[_builtins.str] = None,
                 ipv4_address_prefix_list_id: Optional[_builtins.str] = None,
                 ipv4_next_hop_prefix_list_id: Optional[_builtins.str] = None,
                 ipv6_address_prefix_list_id: Optional[_builtins.str] = None,
                 ipv6_next_hop_prefix_list_id: Optional[_builtins.str] = None,
                 metric: Optional[_builtins.int] = None,
                 omp_tag: Optional[_builtins.int] = None,
                 ospf_tag: Optional[_builtins.int] = None,
                 standard_community_list_criteria: Optional[_builtins.str] = None,
                 standard_community_lists: Optional[Sequence['outputs.ServiceRoutePolicyFeatureSequenceMatchEntryStandardCommunityList']] = None):
        """
        :param _builtins.int bgp_local_preference: BGP Local Preference
                 - Range: `0`-`4294967295`
        :param _builtins.int metric: Select Metric
                 - Range: `0`-`4294967295`
        :param _builtins.int omp_tag: Select OMP Tag
                 - Range: `0`-`4294967295`
        :param _builtins.int ospf_tag: Select OSPF Tag
                 - Range: `0`-`4294967295`
        :param _builtins.str standard_community_list_criteria: Select a condition such as OR, AND or EXACT
                 - Choices: `OR`, `AND`, `EXACT`
        :param Sequence['ServiceRoutePolicyFeatureSequenceMatchEntryStandardCommunityListArgs'] standard_community_lists: Select a standard community list
        """
        if as_path_list_id is not None:
            pulumi.set(__self__, "as_path_list_id", as_path_list_id)
        if bgp_local_preference is not None:
            pulumi.set(__self__, "bgp_local_preference", bgp_local_preference)
        if expanded_community_list_id is not None:
            pulumi.set(__self__, "expanded_community_list_id", expanded_community_list_id)
        if extended_community_list_id is not None:
            pulumi.set(__self__, "extended_community_list_id", extended_community_list_id)
        if ipv4_address_prefix_list_id is not None:
            pulumi.set(__self__, "ipv4_address_prefix_list_id", ipv4_address_prefix_list_id)
        if ipv4_next_hop_prefix_list_id is not None:
            pulumi.set(__self__, "ipv4_next_hop_prefix_list_id", ipv4_next_hop_prefix_list_id)
        if ipv6_address_prefix_list_id is not None:
            pulumi.set(__self__, "ipv6_address_prefix_list_id", ipv6_address_prefix_list_id)
        if ipv6_next_hop_prefix_list_id is not None:
            pulumi.set(__self__, "ipv6_next_hop_prefix_list_id", ipv6_next_hop_prefix_list_id)
        if metric is not None:
            pulumi.set(__self__, "metric", metric)
        if omp_tag is not None:
            pulumi.set(__self__, "omp_tag", omp_tag)
        if ospf_tag is not None:
            pulumi.set(__self__, "ospf_tag", ospf_tag)
        if standard_community_list_criteria is not None:
            pulumi.set(__self__, "standard_community_list_criteria", standard_community_list_criteria)
        if standard_community_lists is not None:
            pulumi.set(__self__, "standard_community_lists", standard_community_lists)

    @_builtins.property
    @pulumi.getter(name="asPathListId")
    def as_path_list_id(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "as_path_list_id")

    @_builtins.property
    @pulumi.getter(name="bgpLocalPreference")
    def bgp_local_preference(self) -> Optional[_builtins.int]:
        """
        BGP Local Preference
          - Range: `0`-`4294967295`
        """
        return pulumi.get(self, "bgp_local_preference")

    @_builtins.property
    @pulumi.getter(name="expandedCommunityListId")
    def expanded_community_list_id(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "expanded_community_list_id")

    @_builtins.property
    @pulumi.getter(name="extendedCommunityListId")
    def extended_community_list_id(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "extended_community_list_id")

    @_builtins.property
    @pulumi.getter(name="ipv4AddressPrefixListId")
    def ipv4_address_prefix_list_id(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "ipv4_address_prefix_list_id")

    @_builtins.property
    @pulumi.getter(name="ipv4NextHopPrefixListId")
    def ipv4_next_hop_prefix_list_id(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "ipv4_next_hop_prefix_list_id")

    @_builtins.property
    @pulumi.getter(name="ipv6AddressPrefixListId")
    def ipv6_address_prefix_list_id(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "ipv6_address_prefix_list_id")

    @_builtins.property
    @pulumi.getter(name="ipv6NextHopPrefixListId")
    def ipv6_next_hop_prefix_list_id(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "ipv6_next_hop_prefix_list_id")

    @_builtins.property
    @pulumi.getter
    def metric(self) -> Optional[_builtins.int]:
        """
        Select Metric
          - Range: `0`-`4294967295`
        """
        return pulumi.get(self, "metric")

    @_builtins.property
    @pulumi.getter(name="ompTag")
    def omp_tag(self) -> Optional[_builtins.int]:
        """
        Select OMP Tag
          - Range: `0`-`4294967295`
        """
        return pulumi.get(self, "omp_tag")

    @_builtins.property
    @pulumi.getter(name="ospfTag")
    def ospf_tag(self) -> Optional[_builtins.int]:
        """
        Select OSPF Tag
          - Range: `0`-`4294967295`
        """
        return pulumi.get(self, "ospf_tag")

    @_builtins.property
    @pulumi.getter(name="standardCommunityListCriteria")
    def standard_community_list_criteria(self) -> Optional[_builtins.str]:
        """
        Select a condition such as OR, AND or EXACT
          - Choices: `OR`, `AND`, `EXACT`
        """
        return pulumi.get(self, "standard_community_list_criteria")

    @_builtins.property
    @pulumi.getter(name="standardCommunityLists")
    def standard_community_lists(self) -> Optional[Sequence['outputs.ServiceRoutePolicyFeatureSequenceMatchEntryStandardCommunityList']]:
        """
        Select a standard community list
        """
        return pulumi.get(self, "standard_community_lists")


@pulumi.output_type
class ServiceRoutePolicyFeatureSequenceMatchEntryStandardCommunityList(dict):
    def __init__(__self__, *,
                 id: Optional[_builtins.str] = None):
        if id is not None:
            pulumi.set(__self__, "id", id)

    @_builtins.property
    @pulumi.getter
    def id(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "id")


@pulumi.output_type
class ServiceRoutingBgpFeatureIpv4AggregateAddress(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "asSetPath":
            suggest = "as_set_path"
        elif key == "asSetPathVariable":
            suggest = "as_set_path_variable"
        elif key == "networkAddress":
            suggest = "network_address"
        elif key == "networkAddressVariable":
            suggest = "network_address_variable"
        elif key == "subnetMask":
            suggest = "subnet_mask"
        elif key == "subnetMaskVariable":
            suggest = "subnet_mask_variable"
        elif key == "summaryOnly":
            suggest = "summary_only"
        elif key == "summaryOnlyVariable":
            suggest = "summary_only_variable"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ServiceRoutingBgpFeatureIpv4AggregateAddress. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ServiceRoutingBgpFeatureIpv4AggregateAddress.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ServiceRoutingBgpFeatureIpv4AggregateAddress.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 as_set_path: Optional[_builtins.bool] = None,
                 as_set_path_variable: Optional[_builtins.str] = None,
                 network_address: Optional[_builtins.str] = None,
                 network_address_variable: Optional[_builtins.str] = None,
                 subnet_mask: Optional[_builtins.str] = None,
                 subnet_mask_variable: Optional[_builtins.str] = None,
                 summary_only: Optional[_builtins.bool] = None,
                 summary_only_variable: Optional[_builtins.str] = None):
        """
        :param _builtins.bool as_set_path: Set AS set path information
                 - Default value: `false`
        :param _builtins.str as_set_path_variable: Variable name
        :param _builtins.str network_address_variable: Variable name
        :param _builtins.str subnet_mask: - Choices: `255.255.255.255`, `255.255.255.254`, `255.255.255.252`, `255.255.255.248`, `255.255.255.240`, `255.255.255.224`, `255.255.255.192`, `255.255.255.128`, `255.255.255.0`, `255.255.254.0`, `255.255.252.0`, `255.255.248.0`, `255.255.240.0`, `255.255.224.0`, `255.255.192.0`, `255.255.128.0`, `255.255.0.0`, `255.254.0.0`, `255.252.0.0`, `255.240.0.0`, `255.224.0.0`, `255.192.0.0`, `255.128.0.0`, `255.0.0.0`, `254.0.0.0`, `252.0.0.0`, `248.0.0.0`, `240.0.0.0`, `224.0.0.0`, `192.0.0.0`, `128.0.0.0`, `0.0.0.0`
        :param _builtins.str subnet_mask_variable: Variable name
        :param _builtins.bool summary_only: Filter out more specific routes from updates
                 - Default value: `false`
        :param _builtins.str summary_only_variable: Variable name
        """
        if as_set_path is not None:
            pulumi.set(__self__, "as_set_path", as_set_path)
        if as_set_path_variable is not None:
            pulumi.set(__self__, "as_set_path_variable", as_set_path_variable)
        if network_address is not None:
            pulumi.set(__self__, "network_address", network_address)
        if network_address_variable is not None:
            pulumi.set(__self__, "network_address_variable", network_address_variable)
        if subnet_mask is not None:
            pulumi.set(__self__, "subnet_mask", subnet_mask)
        if subnet_mask_variable is not None:
            pulumi.set(__self__, "subnet_mask_variable", subnet_mask_variable)
        if summary_only is not None:
            pulumi.set(__self__, "summary_only", summary_only)
        if summary_only_variable is not None:
            pulumi.set(__self__, "summary_only_variable", summary_only_variable)

    @_builtins.property
    @pulumi.getter(name="asSetPath")
    def as_set_path(self) -> Optional[_builtins.bool]:
        """
        Set AS set path information
          - Default value: `false`
        """
        return pulumi.get(self, "as_set_path")

    @_builtins.property
    @pulumi.getter(name="asSetPathVariable")
    def as_set_path_variable(self) -> Optional[_builtins.str]:
        """
        Variable name
        """
        return pulumi.get(self, "as_set_path_variable")

    @_builtins.property
    @pulumi.getter(name="networkAddress")
    def network_address(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "network_address")

    @_builtins.property
    @pulumi.getter(name="networkAddressVariable")
    def network_address_variable(self) -> Optional[_builtins.str]:
        """
        Variable name
        """
        return pulumi.get(self, "network_address_variable")

    @_builtins.property
    @pulumi.getter(name="subnetMask")
    def subnet_mask(self) -> Optional[_builtins.str]:
        """
        - Choices: `255.255.255.255`, `255.255.255.254`, `255.255.255.252`, `255.255.255.248`, `255.255.255.240`, `255.255.255.224`, `255.255.255.192`, `255.255.255.128`, `255.255.255.0`, `255.255.254.0`, `255.255.252.0`, `255.255.248.0`, `255.255.240.0`, `255.255.224.0`, `255.255.192.0`, `255.255.128.0`, `255.255.0.0`, `255.254.0.0`, `255.252.0.0`, `255.240.0.0`, `255.224.0.0`, `255.192.0.0`, `255.128.0.0`, `255.0.0.0`, `254.0.0.0`, `252.0.0.0`, `248.0.0.0`, `240.0.0.0`, `224.0.0.0`, `192.0.0.0`, `128.0.0.0`, `0.0.0.0`
        """
        return pulumi.get(self, "subnet_mask")

    @_builtins.property
    @pulumi.getter(name="subnetMaskVariable")
    def subnet_mask_variable(self) -> Optional[_builtins.str]:
        """
        Variable name
        """
        return pulumi.get(self, "subnet_mask_variable")

    @_builtins.property
    @pulumi.getter(name="summaryOnly")
    def summary_only(self) -> Optional[_builtins.bool]:
        """
        Filter out more specific routes from updates
          - Default value: `false`
        """
        return pulumi.get(self, "summary_only")

    @_builtins.property
    @pulumi.getter(name="summaryOnlyVariable")
    def summary_only_variable(self) -> Optional[_builtins.str]:
        """
        Variable name
        """
        return pulumi.get(self, "summary_only_variable")


@pulumi.output_type
class ServiceRoutingBgpFeatureIpv4Neighbor(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "addressFamilies":
            suggest = "address_families"
        elif key == "addressVariable":
            suggest = "address_variable"
        elif key == "allowasInNumber":
            suggest = "allowas_in_number"
        elif key == "allowasInNumberVariable":
            suggest = "allowas_in_number_variable"
        elif key == "asOverride":
            suggest = "as_override"
        elif key == "asOverrideVariable":
            suggest = "as_override_variable"
        elif key == "descriptionVariable":
            suggest = "description_variable"
        elif key == "ebgpMultihop":
            suggest = "ebgp_multihop"
        elif key == "ebgpMultihopVariable":
            suggest = "ebgp_multihop_variable"
        elif key == "holdTime":
            suggest = "hold_time"
        elif key == "holdTimeVariable":
            suggest = "hold_time_variable"
        elif key == "keepaliveTime":
            suggest = "keepalive_time"
        elif key == "keepaliveTimeVariable":
            suggest = "keepalive_time_variable"
        elif key == "localAs":
            suggest = "local_as"
        elif key == "localAsVariable":
            suggest = "local_as_variable"
        elif key == "nextHopSelf":
            suggest = "next_hop_self"
        elif key == "nextHopSelfVariable":
            suggest = "next_hop_self_variable"
        elif key == "passwordVariable":
            suggest = "password_variable"
        elif key == "remoteAs":
            suggest = "remote_as"
        elif key == "remoteAsVariable":
            suggest = "remote_as_variable"
        elif key == "sendCommunity":
            suggest = "send_community"
        elif key == "sendCommunityVariable":
            suggest = "send_community_variable"
        elif key == "sendExtendedCommunity":
            suggest = "send_extended_community"
        elif key == "sendExtendedCommunityVariable":
            suggest = "send_extended_community_variable"
        elif key == "sendLabel":
            suggest = "send_label"
        elif key == "sendLabelVariable":
            suggest = "send_label_variable"
        elif key == "shutdownVariable":
            suggest = "shutdown_variable"
        elif key == "updateSourceInterface":
            suggest = "update_source_interface"
        elif key == "updateSourceInterfaceVariable":
            suggest = "update_source_interface_variable"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ServiceRoutingBgpFeatureIpv4Neighbor. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ServiceRoutingBgpFeatureIpv4Neighbor.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ServiceRoutingBgpFeatureIpv4Neighbor.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 address: Optional[_builtins.str] = None,
                 address_families: Optional[Sequence['outputs.ServiceRoutingBgpFeatureIpv4NeighborAddressFamily']] = None,
                 address_variable: Optional[_builtins.str] = None,
                 allowas_in_number: Optional[_builtins.int] = None,
                 allowas_in_number_variable: Optional[_builtins.str] = None,
                 as_override: Optional[_builtins.bool] = None,
                 as_override_variable: Optional[_builtins.str] = None,
                 description: Optional[_builtins.str] = None,
                 description_variable: Optional[_builtins.str] = None,
                 ebgp_multihop: Optional[_builtins.int] = None,
                 ebgp_multihop_variable: Optional[_builtins.str] = None,
                 hold_time: Optional[_builtins.int] = None,
                 hold_time_variable: Optional[_builtins.str] = None,
                 keepalive_time: Optional[_builtins.int] = None,
                 keepalive_time_variable: Optional[_builtins.str] = None,
                 local_as: Optional[_builtins.int] = None,
                 local_as_variable: Optional[_builtins.str] = None,
                 next_hop_self: Optional[_builtins.bool] = None,
                 next_hop_self_variable: Optional[_builtins.str] = None,
                 password: Optional[_builtins.str] = None,
                 password_variable: Optional[_builtins.str] = None,
                 remote_as: Optional[_builtins.int] = None,
                 remote_as_variable: Optional[_builtins.str] = None,
                 send_community: Optional[_builtins.bool] = None,
                 send_community_variable: Optional[_builtins.str] = None,
                 send_extended_community: Optional[_builtins.bool] = None,
                 send_extended_community_variable: Optional[_builtins.str] = None,
                 send_label: Optional[_builtins.bool] = None,
                 send_label_variable: Optional[_builtins.str] = None,
                 shutdown: Optional[_builtins.bool] = None,
                 shutdown_variable: Optional[_builtins.str] = None,
                 update_source_interface: Optional[_builtins.str] = None,
                 update_source_interface_variable: Optional[_builtins.str] = None):
        """
        :param _builtins.str address: Set neighbor address
        :param Sequence['ServiceRoutingBgpFeatureIpv4NeighborAddressFamilyArgs'] address_families: Set BGP address family
        :param _builtins.str address_variable: Variable name
        :param _builtins.int allowas_in_number: The number of accept as-path with my AS present in it
                 - Range: `1`-`10`
        :param _builtins.str allowas_in_number_variable: Variable name
        :param _builtins.bool as_override: Override matching AS-number while sending update
                 - Default value: `false`
        :param _builtins.str as_override_variable: Variable name
        :param _builtins.str description: Set description
        :param _builtins.str description_variable: Variable name
        :param _builtins.int ebgp_multihop: Set TTL value for peers that are not directly connected
                 - Range: `1`-`255`
                 - Default value: `1`
        :param _builtins.str ebgp_multihop_variable: Variable name
        :param _builtins.int hold_time: Interval (seconds) not receiving a keepalive message declares a BGP peer down
                 - Range: `0`-`65535`
                 - Default value: `180`
        :param _builtins.str hold_time_variable: Variable name
        :param _builtins.int keepalive_time: Interval (seconds) of keepalive messages sent to its BGP peer
                 - Range: `0`-`65535`
                 - Default value: `60`
        :param _builtins.str keepalive_time_variable: Variable name
        :param _builtins.int local_as: Set local autonomous number,Local-AS cannot have the local BGP protocol AS number or the AS number of the remote peer.The local-as is valid only if the peer is a true eBGP peer. It does not work for two peers in different sub-ASs in a confederation.
        :param _builtins.str local_as_variable: Variable name
        :param _builtins.bool next_hop_self: Set router to be next hop for routes advertised to neighbor
                 - Default value: `false`
        :param _builtins.str next_hop_self_variable: Variable name
        :param _builtins.str password: Set MD5 password on TCP connection with BGP peer
        :param _builtins.str password_variable: Variable name
        :param _builtins.int remote_as: Set remote autonomous system number
        :param _builtins.str remote_as_variable: Variable name
        :param _builtins.bool send_community: Send community attribute
                 - Default value: `true`
        :param _builtins.str send_community_variable: Variable name
        :param _builtins.bool send_extended_community: Send extended community attribute
                 - Default value: `true`
        :param _builtins.str send_extended_community_variable: Variable name
        :param _builtins.bool send_label: Send label
                 - Default value: `false`
        :param _builtins.str send_label_variable: Variable name
        :param _builtins.bool shutdown: Enable or disable a BGP neighbor
                 - Default value: `false`
        :param _builtins.str shutdown_variable: Variable name
        :param _builtins.str update_source_interface: Source interface name for BGP neighbor
        :param _builtins.str update_source_interface_variable: Variable name
        """
        if address is not None:
            pulumi.set(__self__, "address", address)
        if address_families is not None:
            pulumi.set(__self__, "address_families", address_families)
        if address_variable is not None:
            pulumi.set(__self__, "address_variable", address_variable)
        if allowas_in_number is not None:
            pulumi.set(__self__, "allowas_in_number", allowas_in_number)
        if allowas_in_number_variable is not None:
            pulumi.set(__self__, "allowas_in_number_variable", allowas_in_number_variable)
        if as_override is not None:
            pulumi.set(__self__, "as_override", as_override)
        if as_override_variable is not None:
            pulumi.set(__self__, "as_override_variable", as_override_variable)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if description_variable is not None:
            pulumi.set(__self__, "description_variable", description_variable)
        if ebgp_multihop is not None:
            pulumi.set(__self__, "ebgp_multihop", ebgp_multihop)
        if ebgp_multihop_variable is not None:
            pulumi.set(__self__, "ebgp_multihop_variable", ebgp_multihop_variable)
        if hold_time is not None:
            pulumi.set(__self__, "hold_time", hold_time)
        if hold_time_variable is not None:
            pulumi.set(__self__, "hold_time_variable", hold_time_variable)
        if keepalive_time is not None:
            pulumi.set(__self__, "keepalive_time", keepalive_time)
        if keepalive_time_variable is not None:
            pulumi.set(__self__, "keepalive_time_variable", keepalive_time_variable)
        if local_as is not None:
            pulumi.set(__self__, "local_as", local_as)
        if local_as_variable is not None:
            pulumi.set(__self__, "local_as_variable", local_as_variable)
        if next_hop_self is not None:
            pulumi.set(__self__, "next_hop_self", next_hop_self)
        if next_hop_self_variable is not None:
            pulumi.set(__self__, "next_hop_self_variable", next_hop_self_variable)
        if password is not None:
            pulumi.set(__self__, "password", password)
        if password_variable is not None:
            pulumi.set(__self__, "password_variable", password_variable)
        if remote_as is not None:
            pulumi.set(__self__, "remote_as", remote_as)
        if remote_as_variable is not None:
            pulumi.set(__self__, "remote_as_variable", remote_as_variable)
        if send_community is not None:
            pulumi.set(__self__, "send_community", send_community)
        if send_community_variable is not None:
            pulumi.set(__self__, "send_community_variable", send_community_variable)
        if send_extended_community is not None:
            pulumi.set(__self__, "send_extended_community", send_extended_community)
        if send_extended_community_variable is not None:
            pulumi.set(__self__, "send_extended_community_variable", send_extended_community_variable)
        if send_label is not None:
            pulumi.set(__self__, "send_label", send_label)
        if send_label_variable is not None:
            pulumi.set(__self__, "send_label_variable", send_label_variable)
        if shutdown is not None:
            pulumi.set(__self__, "shutdown", shutdown)
        if shutdown_variable is not None:
            pulumi.set(__self__, "shutdown_variable", shutdown_variable)
        if update_source_interface is not None:
            pulumi.set(__self__, "update_source_interface", update_source_interface)
        if update_source_interface_variable is not None:
            pulumi.set(__self__, "update_source_interface_variable", update_source_interface_variable)

    @_builtins.property
    @pulumi.getter
    def address(self) -> Optional[_builtins.str]:
        """
        Set neighbor address
        """
        return pulumi.get(self, "address")

    @_builtins.property
    @pulumi.getter(name="addressFamilies")
    def address_families(self) -> Optional[Sequence['outputs.ServiceRoutingBgpFeatureIpv4NeighborAddressFamily']]:
        """
        Set BGP address family
        """
        return pulumi.get(self, "address_families")

    @_builtins.property
    @pulumi.getter(name="addressVariable")
    def address_variable(self) -> Optional[_builtins.str]:
        """
        Variable name
        """
        return pulumi.get(self, "address_variable")

    @_builtins.property
    @pulumi.getter(name="allowasInNumber")
    def allowas_in_number(self) -> Optional[_builtins.int]:
        """
        The number of accept as-path with my AS present in it
          - Range: `1`-`10`
        """
        return pulumi.get(self, "allowas_in_number")

    @_builtins.property
    @pulumi.getter(name="allowasInNumberVariable")
    def allowas_in_number_variable(self) -> Optional[_builtins.str]:
        """
        Variable name
        """
        return pulumi.get(self, "allowas_in_number_variable")

    @_builtins.property
    @pulumi.getter(name="asOverride")
    def as_override(self) -> Optional[_builtins.bool]:
        """
        Override matching AS-number while sending update
          - Default value: `false`
        """
        return pulumi.get(self, "as_override")

    @_builtins.property
    @pulumi.getter(name="asOverrideVariable")
    def as_override_variable(self) -> Optional[_builtins.str]:
        """
        Variable name
        """
        return pulumi.get(self, "as_override_variable")

    @_builtins.property
    @pulumi.getter
    def description(self) -> Optional[_builtins.str]:
        """
        Set description
        """
        return pulumi.get(self, "description")

    @_builtins.property
    @pulumi.getter(name="descriptionVariable")
    def description_variable(self) -> Optional[_builtins.str]:
        """
        Variable name
        """
        return pulumi.get(self, "description_variable")

    @_builtins.property
    @pulumi.getter(name="ebgpMultihop")
    def ebgp_multihop(self) -> Optional[_builtins.int]:
        """
        Set TTL value for peers that are not directly connected
          - Range: `1`-`255`
          - Default value: `1`
        """
        return pulumi.get(self, "ebgp_multihop")

    @_builtins.property
    @pulumi.getter(name="ebgpMultihopVariable")
    def ebgp_multihop_variable(self) -> Optional[_builtins.str]:
        """
        Variable name
        """
        return pulumi.get(self, "ebgp_multihop_variable")

    @_builtins.property
    @pulumi.getter(name="holdTime")
    def hold_time(self) -> Optional[_builtins.int]:
        """
        Interval (seconds) not receiving a keepalive message declares a BGP peer down
          - Range: `0`-`65535`
          - Default value: `180`
        """
        return pulumi.get(self, "hold_time")

    @_builtins.property
    @pulumi.getter(name="holdTimeVariable")
    def hold_time_variable(self) -> Optional[_builtins.str]:
        """
        Variable name
        """
        return pulumi.get(self, "hold_time_variable")

    @_builtins.property
    @pulumi.getter(name="keepaliveTime")
    def keepalive_time(self) -> Optional[_builtins.int]:
        """
        Interval (seconds) of keepalive messages sent to its BGP peer
          - Range: `0`-`65535`
          - Default value: `60`
        """
        return pulumi.get(self, "keepalive_time")

    @_builtins.property
    @pulumi.getter(name="keepaliveTimeVariable")
    def keepalive_time_variable(self) -> Optional[_builtins.str]:
        """
        Variable name
        """
        return pulumi.get(self, "keepalive_time_variable")

    @_builtins.property
    @pulumi.getter(name="localAs")
    def local_as(self) -> Optional[_builtins.int]:
        """
        Set local autonomous number,Local-AS cannot have the local BGP protocol AS number or the AS number of the remote peer.The local-as is valid only if the peer is a true eBGP peer. It does not work for two peers in different sub-ASs in a confederation.
        """
        return pulumi.get(self, "local_as")

    @_builtins.property
    @pulumi.getter(name="localAsVariable")
    def local_as_variable(self) -> Optional[_builtins.str]:
        """
        Variable name
        """
        return pulumi.get(self, "local_as_variable")

    @_builtins.property
    @pulumi.getter(name="nextHopSelf")
    def next_hop_self(self) -> Optional[_builtins.bool]:
        """
        Set router to be next hop for routes advertised to neighbor
          - Default value: `false`
        """
        return pulumi.get(self, "next_hop_self")

    @_builtins.property
    @pulumi.getter(name="nextHopSelfVariable")
    def next_hop_self_variable(self) -> Optional[_builtins.str]:
        """
        Variable name
        """
        return pulumi.get(self, "next_hop_self_variable")

    @_builtins.property
    @pulumi.getter
    def password(self) -> Optional[_builtins.str]:
        """
        Set MD5 password on TCP connection with BGP peer
        """
        return pulumi.get(self, "password")

    @_builtins.property
    @pulumi.getter(name="passwordVariable")
    def password_variable(self) -> Optional[_builtins.str]:
        """
        Variable name
        """
        return pulumi.get(self, "password_variable")

    @_builtins.property
    @pulumi.getter(name="remoteAs")
    def remote_as(self) -> Optional[_builtins.int]:
        """
        Set remote autonomous system number
        """
        return pulumi.get(self, "remote_as")

    @_builtins.property
    @pulumi.getter(name="remoteAsVariable")
    def remote_as_variable(self) -> Optional[_builtins.str]:
        """
        Variable name
        """
        return pulumi.get(self, "remote_as_variable")

    @_builtins.property
    @pulumi.getter(name="sendCommunity")
    def send_community(self) -> Optional[_builtins.bool]:
        """
        Send community attribute
          - Default value: `true`
        """
        return pulumi.get(self, "send_community")

    @_builtins.property
    @pulumi.getter(name="sendCommunityVariable")
    def send_community_variable(self) -> Optional[_builtins.str]:
        """
        Variable name
        """
        return pulumi.get(self, "send_community_variable")

    @_builtins.property
    @pulumi.getter(name="sendExtendedCommunity")
    def send_extended_community(self) -> Optional[_builtins.bool]:
        """
        Send extended community attribute
          - Default value: `true`
        """
        return pulumi.get(self, "send_extended_community")

    @_builtins.property
    @pulumi.getter(name="sendExtendedCommunityVariable")
    def send_extended_community_variable(self) -> Optional[_builtins.str]:
        """
        Variable name
        """
        return pulumi.get(self, "send_extended_community_variable")

    @_builtins.property
    @pulumi.getter(name="sendLabel")
    def send_label(self) -> Optional[_builtins.bool]:
        """
        Send label
          - Default value: `false`
        """
        return pulumi.get(self, "send_label")

    @_builtins.property
    @pulumi.getter(name="sendLabelVariable")
    def send_label_variable(self) -> Optional[_builtins.str]:
        """
        Variable name
        """
        return pulumi.get(self, "send_label_variable")

    @_builtins.property
    @pulumi.getter
    def shutdown(self) -> Optional[_builtins.bool]:
        """
        Enable or disable a BGP neighbor
          - Default value: `false`
        """
        return pulumi.get(self, "shutdown")

    @_builtins.property
    @pulumi.getter(name="shutdownVariable")
    def shutdown_variable(self) -> Optional[_builtins.str]:
        """
        Variable name
        """
        return pulumi.get(self, "shutdown_variable")

    @_builtins.property
    @pulumi.getter(name="updateSourceInterface")
    def update_source_interface(self) -> Optional[_builtins.str]:
        """
        Source interface name for BGP neighbor
        """
        return pulumi.get(self, "update_source_interface")

    @_builtins.property
    @pulumi.getter(name="updateSourceInterfaceVariable")
    def update_source_interface_variable(self) -> Optional[_builtins.str]:
        """
        Variable name
        """
        return pulumi.get(self, "update_source_interface_variable")


@pulumi.output_type
class ServiceRoutingBgpFeatureIpv4NeighborAddressFamily(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "disablePeerMaxNumberOfPrefixes":
            suggest = "disable_peer_max_number_of_prefixes"
        elif key == "disablePeerMaxNumberOfPrefixesVariable":
            suggest = "disable_peer_max_number_of_prefixes_variable"
        elif key == "disablePeerThreshold":
            suggest = "disable_peer_threshold"
        elif key == "disablePeerThresholdVariable":
            suggest = "disable_peer_threshold_variable"
        elif key == "familyType":
            suggest = "family_type"
        elif key == "inRoutePolicyId":
            suggest = "in_route_policy_id"
        elif key == "outRoutePolicyId":
            suggest = "out_route_policy_id"
        elif key == "policyType":
            suggest = "policy_type"
        elif key == "restartInterval":
            suggest = "restart_interval"
        elif key == "restartIntervalVariable":
            suggest = "restart_interval_variable"
        elif key == "restartMaxNumberOfPrefixes":
            suggest = "restart_max_number_of_prefixes"
        elif key == "restartMaxNumberOfPrefixesVariable":
            suggest = "restart_max_number_of_prefixes_variable"
        elif key == "restartThreshold":
            suggest = "restart_threshold"
        elif key == "restartThresholdVariable":
            suggest = "restart_threshold_variable"
        elif key == "warningMessageMaxNumberOfPrefixes":
            suggest = "warning_message_max_number_of_prefixes"
        elif key == "warningMessageMaxNumberOfPrefixesVariable":
            suggest = "warning_message_max_number_of_prefixes_variable"
        elif key == "warningMessageThreshold":
            suggest = "warning_message_threshold"
        elif key == "warningMessageThresholdVariable":
            suggest = "warning_message_threshold_variable"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ServiceRoutingBgpFeatureIpv4NeighborAddressFamily. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ServiceRoutingBgpFeatureIpv4NeighborAddressFamily.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ServiceRoutingBgpFeatureIpv4NeighborAddressFamily.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 disable_peer_max_number_of_prefixes: Optional[_builtins.int] = None,
                 disable_peer_max_number_of_prefixes_variable: Optional[_builtins.str] = None,
                 disable_peer_threshold: Optional[_builtins.int] = None,
                 disable_peer_threshold_variable: Optional[_builtins.str] = None,
                 family_type: Optional[_builtins.str] = None,
                 in_route_policy_id: Optional[_builtins.str] = None,
                 out_route_policy_id: Optional[_builtins.str] = None,
                 policy_type: Optional[_builtins.str] = None,
                 restart_interval: Optional[_builtins.int] = None,
                 restart_interval_variable: Optional[_builtins.str] = None,
                 restart_max_number_of_prefixes: Optional[_builtins.int] = None,
                 restart_max_number_of_prefixes_variable: Optional[_builtins.str] = None,
                 restart_threshold: Optional[_builtins.int] = None,
                 restart_threshold_variable: Optional[_builtins.str] = None,
                 warning_message_max_number_of_prefixes: Optional[_builtins.int] = None,
                 warning_message_max_number_of_prefixes_variable: Optional[_builtins.str] = None,
                 warning_message_threshold: Optional[_builtins.int] = None,
                 warning_message_threshold_variable: Optional[_builtins.str] = None):
        """
        :param _builtins.int disable_peer_max_number_of_prefixes: Set maximum number of prefixes accepted from BGP peer, Attribute conditional on `policy_type` being equal to `disable-peer`
                 - Range: `1`-`4294967295`
        :param _builtins.str disable_peer_max_number_of_prefixes_variable: Variable name, Attribute conditional on `policy_type` being equal to `disable-peer`
        :param _builtins.int disable_peer_threshold: Set threshold(1 to 100) at which to generate a warning message, Attribute conditional on `policy_type` being equal to `disable-peer`
                 - Range: `1`-`100`
                 - Default value: `75`
        :param _builtins.str disable_peer_threshold_variable: Variable name, Attribute conditional on `policy_type` being equal to `disable-peer`
        :param _builtins.str family_type: Set IPv4 unicast address family
        :param _builtins.str policy_type: Neighbor received maximum prefix policy is disabled.
                 - Choices: `restart`, `off`, `warning-only`, `disable-peer`
        :param _builtins.int restart_interval: Set the restart interval(minutes) when to restart BGP connection if threshold is exceeded, Attribute conditional on `policy_type` being equal to `restart`
                 - Range: `1`-`65535`
        :param _builtins.str restart_interval_variable: Variable name, Attribute conditional on `policy_type` being equal to `restart`
        :param _builtins.int restart_max_number_of_prefixes: Set maximum number of prefixes accepted from BGP peer, Attribute conditional on `policy_type` being equal to `restart`
                 - Range: `1`-`4294967295`
        :param _builtins.str restart_max_number_of_prefixes_variable: Variable name, Attribute conditional on `policy_type` being equal to `restart`
        :param _builtins.int restart_threshold: Set threshold(1 to 100) at which to generate a warning message, Attribute conditional on `policy_type` being equal to `restart`
                 - Range: `1`-`100`
                 - Default value: `75`
        :param _builtins.str restart_threshold_variable: Variable name, Attribute conditional on `policy_type` being equal to `restart`
        :param _builtins.int warning_message_max_number_of_prefixes: Set maximum number of prefixes accepted from BGP peer, Attribute conditional on `policy_type` being equal to `warning-only`
                 - Range: `1`-`4294967295`
        :param _builtins.str warning_message_max_number_of_prefixes_variable: Variable name, Attribute conditional on `policy_type` being equal to `warning-only`
        :param _builtins.int warning_message_threshold: Set threshold(1 to 100) at which to generate a warning message, Attribute conditional on `policy_type` being equal to `warning-only`
                 - Range: `1`-`100`
                 - Default value: `75`
        :param _builtins.str warning_message_threshold_variable: Variable name, Attribute conditional on `policy_type` being equal to `warning-only`
        """
        if disable_peer_max_number_of_prefixes is not None:
            pulumi.set(__self__, "disable_peer_max_number_of_prefixes", disable_peer_max_number_of_prefixes)
        if disable_peer_max_number_of_prefixes_variable is not None:
            pulumi.set(__self__, "disable_peer_max_number_of_prefixes_variable", disable_peer_max_number_of_prefixes_variable)
        if disable_peer_threshold is not None:
            pulumi.set(__self__, "disable_peer_threshold", disable_peer_threshold)
        if disable_peer_threshold_variable is not None:
            pulumi.set(__self__, "disable_peer_threshold_variable", disable_peer_threshold_variable)
        if family_type is not None:
            pulumi.set(__self__, "family_type", family_type)
        if in_route_policy_id is not None:
            pulumi.set(__self__, "in_route_policy_id", in_route_policy_id)
        if out_route_policy_id is not None:
            pulumi.set(__self__, "out_route_policy_id", out_route_policy_id)
        if policy_type is not None:
            pulumi.set(__self__, "policy_type", policy_type)
        if restart_interval is not None:
            pulumi.set(__self__, "restart_interval", restart_interval)
        if restart_interval_variable is not None:
            pulumi.set(__self__, "restart_interval_variable", restart_interval_variable)
        if restart_max_number_of_prefixes is not None:
            pulumi.set(__self__, "restart_max_number_of_prefixes", restart_max_number_of_prefixes)
        if restart_max_number_of_prefixes_variable is not None:
            pulumi.set(__self__, "restart_max_number_of_prefixes_variable", restart_max_number_of_prefixes_variable)
        if restart_threshold is not None:
            pulumi.set(__self__, "restart_threshold", restart_threshold)
        if restart_threshold_variable is not None:
            pulumi.set(__self__, "restart_threshold_variable", restart_threshold_variable)
        if warning_message_max_number_of_prefixes is not None:
            pulumi.set(__self__, "warning_message_max_number_of_prefixes", warning_message_max_number_of_prefixes)
        if warning_message_max_number_of_prefixes_variable is not None:
            pulumi.set(__self__, "warning_message_max_number_of_prefixes_variable", warning_message_max_number_of_prefixes_variable)
        if warning_message_threshold is not None:
            pulumi.set(__self__, "warning_message_threshold", warning_message_threshold)
        if warning_message_threshold_variable is not None:
            pulumi.set(__self__, "warning_message_threshold_variable", warning_message_threshold_variable)

    @_builtins.property
    @pulumi.getter(name="disablePeerMaxNumberOfPrefixes")
    def disable_peer_max_number_of_prefixes(self) -> Optional[_builtins.int]:
        """
        Set maximum number of prefixes accepted from BGP peer, Attribute conditional on `policy_type` being equal to `disable-peer`
          - Range: `1`-`4294967295`
        """
        return pulumi.get(self, "disable_peer_max_number_of_prefixes")

    @_builtins.property
    @pulumi.getter(name="disablePeerMaxNumberOfPrefixesVariable")
    def disable_peer_max_number_of_prefixes_variable(self) -> Optional[_builtins.str]:
        """
        Variable name, Attribute conditional on `policy_type` being equal to `disable-peer`
        """
        return pulumi.get(self, "disable_peer_max_number_of_prefixes_variable")

    @_builtins.property
    @pulumi.getter(name="disablePeerThreshold")
    def disable_peer_threshold(self) -> Optional[_builtins.int]:
        """
        Set threshold(1 to 100) at which to generate a warning message, Attribute conditional on `policy_type` being equal to `disable-peer`
          - Range: `1`-`100`
          - Default value: `75`
        """
        return pulumi.get(self, "disable_peer_threshold")

    @_builtins.property
    @pulumi.getter(name="disablePeerThresholdVariable")
    def disable_peer_threshold_variable(self) -> Optional[_builtins.str]:
        """
        Variable name, Attribute conditional on `policy_type` being equal to `disable-peer`
        """
        return pulumi.get(self, "disable_peer_threshold_variable")

    @_builtins.property
    @pulumi.getter(name="familyType")
    def family_type(self) -> Optional[_builtins.str]:
        """
        Set IPv4 unicast address family
        """
        return pulumi.get(self, "family_type")

    @_builtins.property
    @pulumi.getter(name="inRoutePolicyId")
    def in_route_policy_id(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "in_route_policy_id")

    @_builtins.property
    @pulumi.getter(name="outRoutePolicyId")
    def out_route_policy_id(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "out_route_policy_id")

    @_builtins.property
    @pulumi.getter(name="policyType")
    def policy_type(self) -> Optional[_builtins.str]:
        """
        Neighbor received maximum prefix policy is disabled.
          - Choices: `restart`, `off`, `warning-only`, `disable-peer`
        """
        return pulumi.get(self, "policy_type")

    @_builtins.property
    @pulumi.getter(name="restartInterval")
    def restart_interval(self) -> Optional[_builtins.int]:
        """
        Set the restart interval(minutes) when to restart BGP connection if threshold is exceeded, Attribute conditional on `policy_type` being equal to `restart`
          - Range: `1`-`65535`
        """
        return pulumi.get(self, "restart_interval")

    @_builtins.property
    @pulumi.getter(name="restartIntervalVariable")
    def restart_interval_variable(self) -> Optional[_builtins.str]:
        """
        Variable name, Attribute conditional on `policy_type` being equal to `restart`
        """
        return pulumi.get(self, "restart_interval_variable")

    @_builtins.property
    @pulumi.getter(name="restartMaxNumberOfPrefixes")
    def restart_max_number_of_prefixes(self) -> Optional[_builtins.int]:
        """
        Set maximum number of prefixes accepted from BGP peer, Attribute conditional on `policy_type` being equal to `restart`
          - Range: `1`-`4294967295`
        """
        return pulumi.get(self, "restart_max_number_of_prefixes")

    @_builtins.property
    @pulumi.getter(name="restartMaxNumberOfPrefixesVariable")
    def restart_max_number_of_prefixes_variable(self) -> Optional[_builtins.str]:
        """
        Variable name, Attribute conditional on `policy_type` being equal to `restart`
        """
        return pulumi.get(self, "restart_max_number_of_prefixes_variable")

    @_builtins.property
    @pulumi.getter(name="restartThreshold")
    def restart_threshold(self) -> Optional[_builtins.int]:
        """
        Set threshold(1 to 100) at which to generate a warning message, Attribute conditional on `policy_type` being equal to `restart`
          - Range: `1`-`100`
          - Default value: `75`
        """
        return pulumi.get(self, "restart_threshold")

    @_builtins.property
    @pulumi.getter(name="restartThresholdVariable")
    def restart_threshold_variable(self) -> Optional[_builtins.str]:
        """
        Variable name, Attribute conditional on `policy_type` being equal to `restart`
        """
        return pulumi.get(self, "restart_threshold_variable")

    @_builtins.property
    @pulumi.getter(name="warningMessageMaxNumberOfPrefixes")
    def warning_message_max_number_of_prefixes(self) -> Optional[_builtins.int]:
        """
        Set maximum number of prefixes accepted from BGP peer, Attribute conditional on `policy_type` being equal to `warning-only`
          - Range: `1`-`4294967295`
        """
        return pulumi.get(self, "warning_message_max_number_of_prefixes")

    @_builtins.property
    @pulumi.getter(name="warningMessageMaxNumberOfPrefixesVariable")
    def warning_message_max_number_of_prefixes_variable(self) -> Optional[_builtins.str]:
        """
        Variable name, Attribute conditional on `policy_type` being equal to `warning-only`
        """
        return pulumi.get(self, "warning_message_max_number_of_prefixes_variable")

    @_builtins.property
    @pulumi.getter(name="warningMessageThreshold")
    def warning_message_threshold(self) -> Optional[_builtins.int]:
        """
        Set threshold(1 to 100) at which to generate a warning message, Attribute conditional on `policy_type` being equal to `warning-only`
          - Range: `1`-`100`
          - Default value: `75`
        """
        return pulumi.get(self, "warning_message_threshold")

    @_builtins.property
    @pulumi.getter(name="warningMessageThresholdVariable")
    def warning_message_threshold_variable(self) -> Optional[_builtins.str]:
        """
        Variable name, Attribute conditional on `policy_type` being equal to `warning-only`
        """
        return pulumi.get(self, "warning_message_threshold_variable")


@pulumi.output_type
class ServiceRoutingBgpFeatureIpv4Network(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "networkAddress":
            suggest = "network_address"
        elif key == "networkAddressVariable":
            suggest = "network_address_variable"
        elif key == "subnetMask":
            suggest = "subnet_mask"
        elif key == "subnetMaskVariable":
            suggest = "subnet_mask_variable"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ServiceRoutingBgpFeatureIpv4Network. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ServiceRoutingBgpFeatureIpv4Network.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ServiceRoutingBgpFeatureIpv4Network.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 network_address: Optional[_builtins.str] = None,
                 network_address_variable: Optional[_builtins.str] = None,
                 subnet_mask: Optional[_builtins.str] = None,
                 subnet_mask_variable: Optional[_builtins.str] = None):
        """
        :param _builtins.str network_address_variable: Variable name
        :param _builtins.str subnet_mask: - Choices: `255.255.255.255`, `255.255.255.254`, `255.255.255.252`, `255.255.255.248`, `255.255.255.240`, `255.255.255.224`, `255.255.255.192`, `255.255.255.128`, `255.255.255.0`, `255.255.254.0`, `255.255.252.0`, `255.255.248.0`, `255.255.240.0`, `255.255.224.0`, `255.255.192.0`, `255.255.128.0`, `255.255.0.0`, `255.254.0.0`, `255.252.0.0`, `255.240.0.0`, `255.224.0.0`, `255.192.0.0`, `255.128.0.0`, `255.0.0.0`, `254.0.0.0`, `252.0.0.0`, `248.0.0.0`, `240.0.0.0`, `224.0.0.0`, `192.0.0.0`, `128.0.0.0`, `0.0.0.0`
        :param _builtins.str subnet_mask_variable: Variable name
        """
        if network_address is not None:
            pulumi.set(__self__, "network_address", network_address)
        if network_address_variable is not None:
            pulumi.set(__self__, "network_address_variable", network_address_variable)
        if subnet_mask is not None:
            pulumi.set(__self__, "subnet_mask", subnet_mask)
        if subnet_mask_variable is not None:
            pulumi.set(__self__, "subnet_mask_variable", subnet_mask_variable)

    @_builtins.property
    @pulumi.getter(name="networkAddress")
    def network_address(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "network_address")

    @_builtins.property
    @pulumi.getter(name="networkAddressVariable")
    def network_address_variable(self) -> Optional[_builtins.str]:
        """
        Variable name
        """
        return pulumi.get(self, "network_address_variable")

    @_builtins.property
    @pulumi.getter(name="subnetMask")
    def subnet_mask(self) -> Optional[_builtins.str]:
        """
        - Choices: `255.255.255.255`, `255.255.255.254`, `255.255.255.252`, `255.255.255.248`, `255.255.255.240`, `255.255.255.224`, `255.255.255.192`, `255.255.255.128`, `255.255.255.0`, `255.255.254.0`, `255.255.252.0`, `255.255.248.0`, `255.255.240.0`, `255.255.224.0`, `255.255.192.0`, `255.255.128.0`, `255.255.0.0`, `255.254.0.0`, `255.252.0.0`, `255.240.0.0`, `255.224.0.0`, `255.192.0.0`, `255.128.0.0`, `255.0.0.0`, `254.0.0.0`, `252.0.0.0`, `248.0.0.0`, `240.0.0.0`, `224.0.0.0`, `192.0.0.0`, `128.0.0.0`, `0.0.0.0`
        """
        return pulumi.get(self, "subnet_mask")

    @_builtins.property
    @pulumi.getter(name="subnetMaskVariable")
    def subnet_mask_variable(self) -> Optional[_builtins.str]:
        """
        Variable name
        """
        return pulumi.get(self, "subnet_mask_variable")


@pulumi.output_type
class ServiceRoutingBgpFeatureIpv4Redistribute(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "protocolVariable":
            suggest = "protocol_variable"
        elif key == "routePolicyId":
            suggest = "route_policy_id"
        elif key == "translateRibMetric":
            suggest = "translate_rib_metric"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ServiceRoutingBgpFeatureIpv4Redistribute. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ServiceRoutingBgpFeatureIpv4Redistribute.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ServiceRoutingBgpFeatureIpv4Redistribute.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 protocol: Optional[_builtins.str] = None,
                 protocol_variable: Optional[_builtins.str] = None,
                 route_policy_id: Optional[_builtins.str] = None,
                 translate_rib_metric: Optional[_builtins.bool] = None):
        """
        :param _builtins.str protocol: Set the protocol to redistribute routes from
                 - Choices: `static`, `connected`, `omp`, `nat`, `ospf`, `ospfv3`, `eigrp`
        :param _builtins.str protocol_variable: Variable name
        :param _builtins.bool translate_rib_metric: Translate Rib Metric, Attribute conditional on `protocol` being equal to `omp`
                 - Default value: `false`
        """
        if protocol is not None:
            pulumi.set(__self__, "protocol", protocol)
        if protocol_variable is not None:
            pulumi.set(__self__, "protocol_variable", protocol_variable)
        if route_policy_id is not None:
            pulumi.set(__self__, "route_policy_id", route_policy_id)
        if translate_rib_metric is not None:
            pulumi.set(__self__, "translate_rib_metric", translate_rib_metric)

    @_builtins.property
    @pulumi.getter
    def protocol(self) -> Optional[_builtins.str]:
        """
        Set the protocol to redistribute routes from
          - Choices: `static`, `connected`, `omp`, `nat`, `ospf`, `ospfv3`, `eigrp`
        """
        return pulumi.get(self, "protocol")

    @_builtins.property
    @pulumi.getter(name="protocolVariable")
    def protocol_variable(self) -> Optional[_builtins.str]:
        """
        Variable name
        """
        return pulumi.get(self, "protocol_variable")

    @_builtins.property
    @pulumi.getter(name="routePolicyId")
    def route_policy_id(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "route_policy_id")

    @_builtins.property
    @pulumi.getter(name="translateRibMetric")
    def translate_rib_metric(self) -> Optional[_builtins.bool]:
        """
        Translate Rib Metric, Attribute conditional on `protocol` being equal to `omp`
          - Default value: `false`
        """
        return pulumi.get(self, "translate_rib_metric")


@pulumi.output_type
class ServiceRoutingBgpFeatureIpv6AggregateAddress(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "aggregatePrefix":
            suggest = "aggregate_prefix"
        elif key == "aggregatePrefixVariable":
            suggest = "aggregate_prefix_variable"
        elif key == "asSetPath":
            suggest = "as_set_path"
        elif key == "asSetPathVariable":
            suggest = "as_set_path_variable"
        elif key == "summaryOnly":
            suggest = "summary_only"
        elif key == "summaryOnlyVariable":
            suggest = "summary_only_variable"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ServiceRoutingBgpFeatureIpv6AggregateAddress. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ServiceRoutingBgpFeatureIpv6AggregateAddress.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ServiceRoutingBgpFeatureIpv6AggregateAddress.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 aggregate_prefix: Optional[_builtins.str] = None,
                 aggregate_prefix_variable: Optional[_builtins.str] = None,
                 as_set_path: Optional[_builtins.bool] = None,
                 as_set_path_variable: Optional[_builtins.str] = None,
                 summary_only: Optional[_builtins.bool] = None,
                 summary_only_variable: Optional[_builtins.str] = None):
        """
        :param _builtins.str aggregate_prefix: Configure the IPv6 prefixes to aggregate
        :param _builtins.str aggregate_prefix_variable: Variable name
        :param _builtins.bool as_set_path: Set AS set path information
                 - Default value: `false`
        :param _builtins.str as_set_path_variable: Variable name
        :param _builtins.bool summary_only: Filter out more specific routes from updates
                 - Default value: `false`
        :param _builtins.str summary_only_variable: Variable name
        """
        if aggregate_prefix is not None:
            pulumi.set(__self__, "aggregate_prefix", aggregate_prefix)
        if aggregate_prefix_variable is not None:
            pulumi.set(__self__, "aggregate_prefix_variable", aggregate_prefix_variable)
        if as_set_path is not None:
            pulumi.set(__self__, "as_set_path", as_set_path)
        if as_set_path_variable is not None:
            pulumi.set(__self__, "as_set_path_variable", as_set_path_variable)
        if summary_only is not None:
            pulumi.set(__self__, "summary_only", summary_only)
        if summary_only_variable is not None:
            pulumi.set(__self__, "summary_only_variable", summary_only_variable)

    @_builtins.property
    @pulumi.getter(name="aggregatePrefix")
    def aggregate_prefix(self) -> Optional[_builtins.str]:
        """
        Configure the IPv6 prefixes to aggregate
        """
        return pulumi.get(self, "aggregate_prefix")

    @_builtins.property
    @pulumi.getter(name="aggregatePrefixVariable")
    def aggregate_prefix_variable(self) -> Optional[_builtins.str]:
        """
        Variable name
        """
        return pulumi.get(self, "aggregate_prefix_variable")

    @_builtins.property
    @pulumi.getter(name="asSetPath")
    def as_set_path(self) -> Optional[_builtins.bool]:
        """
        Set AS set path information
          - Default value: `false`
        """
        return pulumi.get(self, "as_set_path")

    @_builtins.property
    @pulumi.getter(name="asSetPathVariable")
    def as_set_path_variable(self) -> Optional[_builtins.str]:
        """
        Variable name
        """
        return pulumi.get(self, "as_set_path_variable")

    @_builtins.property
    @pulumi.getter(name="summaryOnly")
    def summary_only(self) -> Optional[_builtins.bool]:
        """
        Filter out more specific routes from updates
          - Default value: `false`
        """
        return pulumi.get(self, "summary_only")

    @_builtins.property
    @pulumi.getter(name="summaryOnlyVariable")
    def summary_only_variable(self) -> Optional[_builtins.str]:
        """
        Variable name
        """
        return pulumi.get(self, "summary_only_variable")


@pulumi.output_type
class ServiceRoutingBgpFeatureIpv6Neighbor(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "addressFamilies":
            suggest = "address_families"
        elif key == "addressVariable":
            suggest = "address_variable"
        elif key == "allowasInNumber":
            suggest = "allowas_in_number"
        elif key == "allowasInNumberVariable":
            suggest = "allowas_in_number_variable"
        elif key == "asOverride":
            suggest = "as_override"
        elif key == "asOverrideVariable":
            suggest = "as_override_variable"
        elif key == "descriptionVariable":
            suggest = "description_variable"
        elif key == "ebgpMultihop":
            suggest = "ebgp_multihop"
        elif key == "ebgpMultihopVariable":
            suggest = "ebgp_multihop_variable"
        elif key == "holdTime":
            suggest = "hold_time"
        elif key == "holdTimeVariable":
            suggest = "hold_time_variable"
        elif key == "keepaliveTime":
            suggest = "keepalive_time"
        elif key == "keepaliveTimeVariable":
            suggest = "keepalive_time_variable"
        elif key == "localAs":
            suggest = "local_as"
        elif key == "localAsVariable":
            suggest = "local_as_variable"
        elif key == "nextHopSelf":
            suggest = "next_hop_self"
        elif key == "nextHopSelfVariable":
            suggest = "next_hop_self_variable"
        elif key == "passwordVariable":
            suggest = "password_variable"
        elif key == "remoteAs":
            suggest = "remote_as"
        elif key == "remoteAsVariable":
            suggest = "remote_as_variable"
        elif key == "sendCommunity":
            suggest = "send_community"
        elif key == "sendCommunityVariable":
            suggest = "send_community_variable"
        elif key == "sendExtendedCommunity":
            suggest = "send_extended_community"
        elif key == "sendExtendedCommunityVariable":
            suggest = "send_extended_community_variable"
        elif key == "shutdownVariable":
            suggest = "shutdown_variable"
        elif key == "updateSourceInterface":
            suggest = "update_source_interface"
        elif key == "updateSourceInterfaceVariable":
            suggest = "update_source_interface_variable"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ServiceRoutingBgpFeatureIpv6Neighbor. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ServiceRoutingBgpFeatureIpv6Neighbor.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ServiceRoutingBgpFeatureIpv6Neighbor.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 address: Optional[_builtins.str] = None,
                 address_families: Optional[Sequence['outputs.ServiceRoutingBgpFeatureIpv6NeighborAddressFamily']] = None,
                 address_variable: Optional[_builtins.str] = None,
                 allowas_in_number: Optional[_builtins.int] = None,
                 allowas_in_number_variable: Optional[_builtins.str] = None,
                 as_override: Optional[_builtins.bool] = None,
                 as_override_variable: Optional[_builtins.str] = None,
                 description: Optional[_builtins.str] = None,
                 description_variable: Optional[_builtins.str] = None,
                 ebgp_multihop: Optional[_builtins.int] = None,
                 ebgp_multihop_variable: Optional[_builtins.str] = None,
                 hold_time: Optional[_builtins.int] = None,
                 hold_time_variable: Optional[_builtins.str] = None,
                 keepalive_time: Optional[_builtins.int] = None,
                 keepalive_time_variable: Optional[_builtins.str] = None,
                 local_as: Optional[_builtins.int] = None,
                 local_as_variable: Optional[_builtins.str] = None,
                 next_hop_self: Optional[_builtins.bool] = None,
                 next_hop_self_variable: Optional[_builtins.str] = None,
                 password: Optional[_builtins.str] = None,
                 password_variable: Optional[_builtins.str] = None,
                 remote_as: Optional[_builtins.int] = None,
                 remote_as_variable: Optional[_builtins.str] = None,
                 send_community: Optional[_builtins.bool] = None,
                 send_community_variable: Optional[_builtins.str] = None,
                 send_extended_community: Optional[_builtins.bool] = None,
                 send_extended_community_variable: Optional[_builtins.str] = None,
                 shutdown: Optional[_builtins.bool] = None,
                 shutdown_variable: Optional[_builtins.str] = None,
                 update_source_interface: Optional[_builtins.str] = None,
                 update_source_interface_variable: Optional[_builtins.str] = None):
        """
        :param _builtins.str address: Set IPv6 neighbor address
        :param Sequence['ServiceRoutingBgpFeatureIpv6NeighborAddressFamilyArgs'] address_families: Set IPv6 BGP address family
        :param _builtins.str address_variable: Variable name
        :param _builtins.int allowas_in_number: The number of accept as-path with my AS present in it
                 - Range: `1`-`10`
        :param _builtins.str allowas_in_number_variable: Variable name
        :param _builtins.bool as_override: Override matching AS-number while sending update
                 - Default value: `false`
        :param _builtins.str as_override_variable: Variable name
        :param _builtins.str description: Set description
        :param _builtins.str description_variable: Variable name
        :param _builtins.int ebgp_multihop: Set TTL value for peers that are not directly connected
                 - Range: `1`-`255`
                 - Default value: `1`
        :param _builtins.str ebgp_multihop_variable: Variable name
        :param _builtins.int hold_time: Set how long to wait since receiving a keepalive message to consider BGP peer unavailable
                 - Range: `0`-`65535`
                 - Default value: `180`
        :param _builtins.str hold_time_variable: Variable name
        :param _builtins.int keepalive_time: Set how often to advertise keepalive messages to BGP peer
                 - Range: `0`-`65535`
                 - Default value: `60`
        :param _builtins.str keepalive_time_variable: Variable name
        :param _builtins.int local_as: Set local autonomous number,Local-AS cannot have the local BGP protocol AS number or the AS number of the remote peer.The local-as is valid only if the peer is a true eBGP peer. It does not work for two peers in different sub-ASs in a confederation.
        :param _builtins.str local_as_variable: Variable name
        :param _builtins.bool next_hop_self: Set router to be next hop for routes advertised to neighbor
                 - Default value: `false`
        :param _builtins.str next_hop_self_variable: Variable name
        :param _builtins.str password: Set MD5 password on TCP connection with BGP peer
        :param _builtins.str password_variable: Variable name
        :param _builtins.int remote_as: Set remote autonomous system number
        :param _builtins.str remote_as_variable: Variable name
        :param _builtins.bool send_community: Send community attribute
                 - Default value: `true`
        :param _builtins.str send_community_variable: Variable name
        :param _builtins.bool send_extended_community: Send extended community attribute
                 - Default value: `true`
        :param _builtins.str send_extended_community_variable: Variable name
        :param _builtins.bool shutdown: Enable or disable a BGP neighbor
                 - Default value: `false`
        :param _builtins.str shutdown_variable: Variable name
        :param _builtins.str update_source_interface: Source interface name for BGP neighbor
        :param _builtins.str update_source_interface_variable: Variable name
        """
        if address is not None:
            pulumi.set(__self__, "address", address)
        if address_families is not None:
            pulumi.set(__self__, "address_families", address_families)
        if address_variable is not None:
            pulumi.set(__self__, "address_variable", address_variable)
        if allowas_in_number is not None:
            pulumi.set(__self__, "allowas_in_number", allowas_in_number)
        if allowas_in_number_variable is not None:
            pulumi.set(__self__, "allowas_in_number_variable", allowas_in_number_variable)
        if as_override is not None:
            pulumi.set(__self__, "as_override", as_override)
        if as_override_variable is not None:
            pulumi.set(__self__, "as_override_variable", as_override_variable)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if description_variable is not None:
            pulumi.set(__self__, "description_variable", description_variable)
        if ebgp_multihop is not None:
            pulumi.set(__self__, "ebgp_multihop", ebgp_multihop)
        if ebgp_multihop_variable is not None:
            pulumi.set(__self__, "ebgp_multihop_variable", ebgp_multihop_variable)
        if hold_time is not None:
            pulumi.set(__self__, "hold_time", hold_time)
        if hold_time_variable is not None:
            pulumi.set(__self__, "hold_time_variable", hold_time_variable)
        if keepalive_time is not None:
            pulumi.set(__self__, "keepalive_time", keepalive_time)
        if keepalive_time_variable is not None:
            pulumi.set(__self__, "keepalive_time_variable", keepalive_time_variable)
        if local_as is not None:
            pulumi.set(__self__, "local_as", local_as)
        if local_as_variable is not None:
            pulumi.set(__self__, "local_as_variable", local_as_variable)
        if next_hop_self is not None:
            pulumi.set(__self__, "next_hop_self", next_hop_self)
        if next_hop_self_variable is not None:
            pulumi.set(__self__, "next_hop_self_variable", next_hop_self_variable)
        if password is not None:
            pulumi.set(__self__, "password", password)
        if password_variable is not None:
            pulumi.set(__self__, "password_variable", password_variable)
        if remote_as is not None:
            pulumi.set(__self__, "remote_as", remote_as)
        if remote_as_variable is not None:
            pulumi.set(__self__, "remote_as_variable", remote_as_variable)
        if send_community is not None:
            pulumi.set(__self__, "send_community", send_community)
        if send_community_variable is not None:
            pulumi.set(__self__, "send_community_variable", send_community_variable)
        if send_extended_community is not None:
            pulumi.set(__self__, "send_extended_community", send_extended_community)
        if send_extended_community_variable is not None:
            pulumi.set(__self__, "send_extended_community_variable", send_extended_community_variable)
        if shutdown is not None:
            pulumi.set(__self__, "shutdown", shutdown)
        if shutdown_variable is not None:
            pulumi.set(__self__, "shutdown_variable", shutdown_variable)
        if update_source_interface is not None:
            pulumi.set(__self__, "update_source_interface", update_source_interface)
        if update_source_interface_variable is not None:
            pulumi.set(__self__, "update_source_interface_variable", update_source_interface_variable)

    @_builtins.property
    @pulumi.getter
    def address(self) -> Optional[_builtins.str]:
        """
        Set IPv6 neighbor address
        """
        return pulumi.get(self, "address")

    @_builtins.property
    @pulumi.getter(name="addressFamilies")
    def address_families(self) -> Optional[Sequence['outputs.ServiceRoutingBgpFeatureIpv6NeighborAddressFamily']]:
        """
        Set IPv6 BGP address family
        """
        return pulumi.get(self, "address_families")

    @_builtins.property
    @pulumi.getter(name="addressVariable")
    def address_variable(self) -> Optional[_builtins.str]:
        """
        Variable name
        """
        return pulumi.get(self, "address_variable")

    @_builtins.property
    @pulumi.getter(name="allowasInNumber")
    def allowas_in_number(self) -> Optional[_builtins.int]:
        """
        The number of accept as-path with my AS present in it
          - Range: `1`-`10`
        """
        return pulumi.get(self, "allowas_in_number")

    @_builtins.property
    @pulumi.getter(name="allowasInNumberVariable")
    def allowas_in_number_variable(self) -> Optional[_builtins.str]:
        """
        Variable name
        """
        return pulumi.get(self, "allowas_in_number_variable")

    @_builtins.property
    @pulumi.getter(name="asOverride")
    def as_override(self) -> Optional[_builtins.bool]:
        """
        Override matching AS-number while sending update
          - Default value: `false`
        """
        return pulumi.get(self, "as_override")

    @_builtins.property
    @pulumi.getter(name="asOverrideVariable")
    def as_override_variable(self) -> Optional[_builtins.str]:
        """
        Variable name
        """
        return pulumi.get(self, "as_override_variable")

    @_builtins.property
    @pulumi.getter
    def description(self) -> Optional[_builtins.str]:
        """
        Set description
        """
        return pulumi.get(self, "description")

    @_builtins.property
    @pulumi.getter(name="descriptionVariable")
    def description_variable(self) -> Optional[_builtins.str]:
        """
        Variable name
        """
        return pulumi.get(self, "description_variable")

    @_builtins.property
    @pulumi.getter(name="ebgpMultihop")
    def ebgp_multihop(self) -> Optional[_builtins.int]:
        """
        Set TTL value for peers that are not directly connected
          - Range: `1`-`255`
          - Default value: `1`
        """
        return pulumi.get(self, "ebgp_multihop")

    @_builtins.property
    @pulumi.getter(name="ebgpMultihopVariable")
    def ebgp_multihop_variable(self) -> Optional[_builtins.str]:
        """
        Variable name
        """
        return pulumi.get(self, "ebgp_multihop_variable")

    @_builtins.property
    @pulumi.getter(name="holdTime")
    def hold_time(self) -> Optional[_builtins.int]:
        """
        Set how long to wait since receiving a keepalive message to consider BGP peer unavailable
          - Range: `0`-`65535`
          - Default value: `180`
        """
        return pulumi.get(self, "hold_time")

    @_builtins.property
    @pulumi.getter(name="holdTimeVariable")
    def hold_time_variable(self) -> Optional[_builtins.str]:
        """
        Variable name
        """
        return pulumi.get(self, "hold_time_variable")

    @_builtins.property
    @pulumi.getter(name="keepaliveTime")
    def keepalive_time(self) -> Optional[_builtins.int]:
        """
        Set how often to advertise keepalive messages to BGP peer
          - Range: `0`-`65535`
          - Default value: `60`
        """
        return pulumi.get(self, "keepalive_time")

    @_builtins.property
    @pulumi.getter(name="keepaliveTimeVariable")
    def keepalive_time_variable(self) -> Optional[_builtins.str]:
        """
        Variable name
        """
        return pulumi.get(self, "keepalive_time_variable")

    @_builtins.property
    @pulumi.getter(name="localAs")
    def local_as(self) -> Optional[_builtins.int]:
        """
        Set local autonomous number,Local-AS cannot have the local BGP protocol AS number or the AS number of the remote peer.The local-as is valid only if the peer is a true eBGP peer. It does not work for two peers in different sub-ASs in a confederation.
        """
        return pulumi.get(self, "local_as")

    @_builtins.property
    @pulumi.getter(name="localAsVariable")
    def local_as_variable(self) -> Optional[_builtins.str]:
        """
        Variable name
        """
        return pulumi.get(self, "local_as_variable")

    @_builtins.property
    @pulumi.getter(name="nextHopSelf")
    def next_hop_self(self) -> Optional[_builtins.bool]:
        """
        Set router to be next hop for routes advertised to neighbor
          - Default value: `false`
        """
        return pulumi.get(self, "next_hop_self")

    @_builtins.property
    @pulumi.getter(name="nextHopSelfVariable")
    def next_hop_self_variable(self) -> Optional[_builtins.str]:
        """
        Variable name
        """
        return pulumi.get(self, "next_hop_self_variable")

    @_builtins.property
    @pulumi.getter
    def password(self) -> Optional[_builtins.str]:
        """
        Set MD5 password on TCP connection with BGP peer
        """
        return pulumi.get(self, "password")

    @_builtins.property
    @pulumi.getter(name="passwordVariable")
    def password_variable(self) -> Optional[_builtins.str]:
        """
        Variable name
        """
        return pulumi.get(self, "password_variable")

    @_builtins.property
    @pulumi.getter(name="remoteAs")
    def remote_as(self) -> Optional[_builtins.int]:
        """
        Set remote autonomous system number
        """
        return pulumi.get(self, "remote_as")

    @_builtins.property
    @pulumi.getter(name="remoteAsVariable")
    def remote_as_variable(self) -> Optional[_builtins.str]:
        """
        Variable name
        """
        return pulumi.get(self, "remote_as_variable")

    @_builtins.property
    @pulumi.getter(name="sendCommunity")
    def send_community(self) -> Optional[_builtins.bool]:
        """
        Send community attribute
          - Default value: `true`
        """
        return pulumi.get(self, "send_community")

    @_builtins.property
    @pulumi.getter(name="sendCommunityVariable")
    def send_community_variable(self) -> Optional[_builtins.str]:
        """
        Variable name
        """
        return pulumi.get(self, "send_community_variable")

    @_builtins.property
    @pulumi.getter(name="sendExtendedCommunity")
    def send_extended_community(self) -> Optional[_builtins.bool]:
        """
        Send extended community attribute
          - Default value: `true`
        """
        return pulumi.get(self, "send_extended_community")

    @_builtins.property
    @pulumi.getter(name="sendExtendedCommunityVariable")
    def send_extended_community_variable(self) -> Optional[_builtins.str]:
        """
        Variable name
        """
        return pulumi.get(self, "send_extended_community_variable")

    @_builtins.property
    @pulumi.getter
    def shutdown(self) -> Optional[_builtins.bool]:
        """
        Enable or disable a BGP neighbor
          - Default value: `false`
        """
        return pulumi.get(self, "shutdown")

    @_builtins.property
    @pulumi.getter(name="shutdownVariable")
    def shutdown_variable(self) -> Optional[_builtins.str]:
        """
        Variable name
        """
        return pulumi.get(self, "shutdown_variable")

    @_builtins.property
    @pulumi.getter(name="updateSourceInterface")
    def update_source_interface(self) -> Optional[_builtins.str]:
        """
        Source interface name for BGP neighbor
        """
        return pulumi.get(self, "update_source_interface")

    @_builtins.property
    @pulumi.getter(name="updateSourceInterfaceVariable")
    def update_source_interface_variable(self) -> Optional[_builtins.str]:
        """
        Variable name
        """
        return pulumi.get(self, "update_source_interface_variable")


@pulumi.output_type
class ServiceRoutingBgpFeatureIpv6NeighborAddressFamily(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "familyType":
            suggest = "family_type"
        elif key == "inRoutePolicyId":
            suggest = "in_route_policy_id"
        elif key == "maxNumberOfPrefixes":
            suggest = "max_number_of_prefixes"
        elif key == "maxNumberOfPrefixesVariable":
            suggest = "max_number_of_prefixes_variable"
        elif key == "outRoutePolicyId":
            suggest = "out_route_policy_id"
        elif key == "policyType":
            suggest = "policy_type"
        elif key == "restartInterval":
            suggest = "restart_interval"
        elif key == "restartIntervalVariable":
            suggest = "restart_interval_variable"
        elif key == "thresholdVariable":
            suggest = "threshold_variable"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ServiceRoutingBgpFeatureIpv6NeighborAddressFamily. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ServiceRoutingBgpFeatureIpv6NeighborAddressFamily.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ServiceRoutingBgpFeatureIpv6NeighborAddressFamily.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 family_type: Optional[_builtins.str] = None,
                 in_route_policy_id: Optional[_builtins.str] = None,
                 max_number_of_prefixes: Optional[_builtins.int] = None,
                 max_number_of_prefixes_variable: Optional[_builtins.str] = None,
                 out_route_policy_id: Optional[_builtins.str] = None,
                 policy_type: Optional[_builtins.str] = None,
                 restart_interval: Optional[_builtins.int] = None,
                 restart_interval_variable: Optional[_builtins.str] = None,
                 threshold: Optional[_builtins.int] = None,
                 threshold_variable: Optional[_builtins.str] = None):
        """
        :param _builtins.str family_type: Set IPv6 unicast address family
        :param _builtins.int max_number_of_prefixes: Set maximum number of prefixes accepted from BGP peer
                 - Range: `1`-`4294967295`
        :param _builtins.str max_number_of_prefixes_variable: Variable name
        :param _builtins.str policy_type: Neighbor received maximum prefix policy is disabled.
        :param _builtins.int restart_interval: Set the restart interval(minutes) when to restart BGP connection if threshold is exceeded
                 - Range: `1`-`65535`
        :param _builtins.str restart_interval_variable: Variable name
        :param _builtins.int threshold: Set threshold(1 to 100) at which to generate a warning message
                 - Range: `1`-`100`
                 - Default value: `75`
        :param _builtins.str threshold_variable: Variable name
        """
        if family_type is not None:
            pulumi.set(__self__, "family_type", family_type)
        if in_route_policy_id is not None:
            pulumi.set(__self__, "in_route_policy_id", in_route_policy_id)
        if max_number_of_prefixes is not None:
            pulumi.set(__self__, "max_number_of_prefixes", max_number_of_prefixes)
        if max_number_of_prefixes_variable is not None:
            pulumi.set(__self__, "max_number_of_prefixes_variable", max_number_of_prefixes_variable)
        if out_route_policy_id is not None:
            pulumi.set(__self__, "out_route_policy_id", out_route_policy_id)
        if policy_type is not None:
            pulumi.set(__self__, "policy_type", policy_type)
        if restart_interval is not None:
            pulumi.set(__self__, "restart_interval", restart_interval)
        if restart_interval_variable is not None:
            pulumi.set(__self__, "restart_interval_variable", restart_interval_variable)
        if threshold is not None:
            pulumi.set(__self__, "threshold", threshold)
        if threshold_variable is not None:
            pulumi.set(__self__, "threshold_variable", threshold_variable)

    @_builtins.property
    @pulumi.getter(name="familyType")
    def family_type(self) -> Optional[_builtins.str]:
        """
        Set IPv6 unicast address family
        """
        return pulumi.get(self, "family_type")

    @_builtins.property
    @pulumi.getter(name="inRoutePolicyId")
    def in_route_policy_id(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "in_route_policy_id")

    @_builtins.property
    @pulumi.getter(name="maxNumberOfPrefixes")
    def max_number_of_prefixes(self) -> Optional[_builtins.int]:
        """
        Set maximum number of prefixes accepted from BGP peer
          - Range: `1`-`4294967295`
        """
        return pulumi.get(self, "max_number_of_prefixes")

    @_builtins.property
    @pulumi.getter(name="maxNumberOfPrefixesVariable")
    def max_number_of_prefixes_variable(self) -> Optional[_builtins.str]:
        """
        Variable name
        """
        return pulumi.get(self, "max_number_of_prefixes_variable")

    @_builtins.property
    @pulumi.getter(name="outRoutePolicyId")
    def out_route_policy_id(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "out_route_policy_id")

    @_builtins.property
    @pulumi.getter(name="policyType")
    def policy_type(self) -> Optional[_builtins.str]:
        """
        Neighbor received maximum prefix policy is disabled.
        """
        return pulumi.get(self, "policy_type")

    @_builtins.property
    @pulumi.getter(name="restartInterval")
    def restart_interval(self) -> Optional[_builtins.int]:
        """
        Set the restart interval(minutes) when to restart BGP connection if threshold is exceeded
          - Range: `1`-`65535`
        """
        return pulumi.get(self, "restart_interval")

    @_builtins.property
    @pulumi.getter(name="restartIntervalVariable")
    def restart_interval_variable(self) -> Optional[_builtins.str]:
        """
        Variable name
        """
        return pulumi.get(self, "restart_interval_variable")

    @_builtins.property
    @pulumi.getter
    def threshold(self) -> Optional[_builtins.int]:
        """
        Set threshold(1 to 100) at which to generate a warning message
          - Range: `1`-`100`
          - Default value: `75`
        """
        return pulumi.get(self, "threshold")

    @_builtins.property
    @pulumi.getter(name="thresholdVariable")
    def threshold_variable(self) -> Optional[_builtins.str]:
        """
        Variable name
        """
        return pulumi.get(self, "threshold_variable")


@pulumi.output_type
class ServiceRoutingBgpFeatureIpv6Network(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "networkPrefix":
            suggest = "network_prefix"
        elif key == "networkPrefixVariable":
            suggest = "network_prefix_variable"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ServiceRoutingBgpFeatureIpv6Network. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ServiceRoutingBgpFeatureIpv6Network.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ServiceRoutingBgpFeatureIpv6Network.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 network_prefix: Optional[_builtins.str] = None,
                 network_prefix_variable: Optional[_builtins.str] = None):
        """
        :param _builtins.str network_prefix: Configure the prefixes for BGP to announce
        :param _builtins.str network_prefix_variable: Variable name
        """
        if network_prefix is not None:
            pulumi.set(__self__, "network_prefix", network_prefix)
        if network_prefix_variable is not None:
            pulumi.set(__self__, "network_prefix_variable", network_prefix_variable)

    @_builtins.property
    @pulumi.getter(name="networkPrefix")
    def network_prefix(self) -> Optional[_builtins.str]:
        """
        Configure the prefixes for BGP to announce
        """
        return pulumi.get(self, "network_prefix")

    @_builtins.property
    @pulumi.getter(name="networkPrefixVariable")
    def network_prefix_variable(self) -> Optional[_builtins.str]:
        """
        Variable name
        """
        return pulumi.get(self, "network_prefix_variable")


@pulumi.output_type
class ServiceRoutingBgpFeatureIpv6Redistribute(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "protocolVariable":
            suggest = "protocol_variable"
        elif key == "routePolicyId":
            suggest = "route_policy_id"
        elif key == "translateRibMetric":
            suggest = "translate_rib_metric"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ServiceRoutingBgpFeatureIpv6Redistribute. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ServiceRoutingBgpFeatureIpv6Redistribute.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ServiceRoutingBgpFeatureIpv6Redistribute.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 protocol: Optional[_builtins.str] = None,
                 protocol_variable: Optional[_builtins.str] = None,
                 route_policy_id: Optional[_builtins.str] = None,
                 translate_rib_metric: Optional[_builtins.bool] = None):
        """
        :param _builtins.str protocol: Set the protocol to redistribute routes from
                 - Choices: `static`, `connected`, `ospf`, `omp`
        :param _builtins.str protocol_variable: Variable name
        :param _builtins.bool translate_rib_metric: Translate Rib Metric, Attribute conditional on `protocol` being equal to `omp`
                 - Default value: `false`
        """
        if protocol is not None:
            pulumi.set(__self__, "protocol", protocol)
        if protocol_variable is not None:
            pulumi.set(__self__, "protocol_variable", protocol_variable)
        if route_policy_id is not None:
            pulumi.set(__self__, "route_policy_id", route_policy_id)
        if translate_rib_metric is not None:
            pulumi.set(__self__, "translate_rib_metric", translate_rib_metric)

    @_builtins.property
    @pulumi.getter
    def protocol(self) -> Optional[_builtins.str]:
        """
        Set the protocol to redistribute routes from
          - Choices: `static`, `connected`, `ospf`, `omp`
        """
        return pulumi.get(self, "protocol")

    @_builtins.property
    @pulumi.getter(name="protocolVariable")
    def protocol_variable(self) -> Optional[_builtins.str]:
        """
        Variable name
        """
        return pulumi.get(self, "protocol_variable")

    @_builtins.property
    @pulumi.getter(name="routePolicyId")
    def route_policy_id(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "route_policy_id")

    @_builtins.property
    @pulumi.getter(name="translateRibMetric")
    def translate_rib_metric(self) -> Optional[_builtins.bool]:
        """
        Translate Rib Metric, Attribute conditional on `protocol` being equal to `omp`
          - Default value: `false`
        """
        return pulumi.get(self, "translate_rib_metric")


@pulumi.output_type
class ServiceRoutingEigrpFeatureInterface(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "nameVariable":
            suggest = "name_variable"
        elif key == "shutdownVariable":
            suggest = "shutdown_variable"
        elif key == "summaryAddresses":
            suggest = "summary_addresses"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ServiceRoutingEigrpFeatureInterface. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ServiceRoutingEigrpFeatureInterface.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ServiceRoutingEigrpFeatureInterface.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 name: Optional[_builtins.str] = None,
                 name_variable: Optional[_builtins.str] = None,
                 shutdown: Optional[_builtins.bool] = None,
                 shutdown_variable: Optional[_builtins.str] = None,
                 summary_addresses: Optional[Sequence['outputs.ServiceRoutingEigrpFeatureInterfaceSummaryAddress']] = None):
        """
        :param _builtins.str name: Set interface name
        :param _builtins.str name_variable: Variable name
        :param _builtins.bool shutdown: Enable/disable EIGRP
                 - Default value: `false`
        :param _builtins.str shutdown_variable: Variable name
        :param Sequence['ServiceRoutingEigrpFeatureInterfaceSummaryAddressArgs'] summary_addresses: Set summary addresses
        """
        if name is not None:
            pulumi.set(__self__, "name", name)
        if name_variable is not None:
            pulumi.set(__self__, "name_variable", name_variable)
        if shutdown is not None:
            pulumi.set(__self__, "shutdown", shutdown)
        if shutdown_variable is not None:
            pulumi.set(__self__, "shutdown_variable", shutdown_variable)
        if summary_addresses is not None:
            pulumi.set(__self__, "summary_addresses", summary_addresses)

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[_builtins.str]:
        """
        Set interface name
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter(name="nameVariable")
    def name_variable(self) -> Optional[_builtins.str]:
        """
        Variable name
        """
        return pulumi.get(self, "name_variable")

    @_builtins.property
    @pulumi.getter
    def shutdown(self) -> Optional[_builtins.bool]:
        """
        Enable/disable EIGRP
          - Default value: `false`
        """
        return pulumi.get(self, "shutdown")

    @_builtins.property
    @pulumi.getter(name="shutdownVariable")
    def shutdown_variable(self) -> Optional[_builtins.str]:
        """
        Variable name
        """
        return pulumi.get(self, "shutdown_variable")

    @_builtins.property
    @pulumi.getter(name="summaryAddresses")
    def summary_addresses(self) -> Optional[Sequence['outputs.ServiceRoutingEigrpFeatureInterfaceSummaryAddress']]:
        """
        Set summary addresses
        """
        return pulumi.get(self, "summary_addresses")


@pulumi.output_type
class ServiceRoutingEigrpFeatureInterfaceSummaryAddress(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "addressVariable":
            suggest = "address_variable"
        elif key == "maskVariable":
            suggest = "mask_variable"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ServiceRoutingEigrpFeatureInterfaceSummaryAddress. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ServiceRoutingEigrpFeatureInterfaceSummaryAddress.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ServiceRoutingEigrpFeatureInterfaceSummaryAddress.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 address: Optional[_builtins.str] = None,
                 address_variable: Optional[_builtins.str] = None,
                 mask: Optional[_builtins.str] = None,
                 mask_variable: Optional[_builtins.str] = None):
        """
        :param _builtins.str address_variable: Variable name
        :param _builtins.str mask: - Choices: `255.255.255.255`, `255.255.255.254`, `255.255.255.252`, `255.255.255.248`, `255.255.255.240`, `255.255.255.224`, `255.255.255.192`, `255.255.255.128`, `255.255.255.0`, `255.255.254.0`, `255.255.252.0`, `255.255.248.0`, `255.255.240.0`, `255.255.224.0`, `255.255.192.0`, `255.255.128.0`, `255.255.0.0`, `255.254.0.0`, `255.252.0.0`, `255.240.0.0`, `255.224.0.0`, `255.192.0.0`, `255.128.0.0`, `255.0.0.0`, `254.0.0.0`, `252.0.0.0`, `248.0.0.0`, `240.0.0.0`, `224.0.0.0`, `192.0.0.0`, `128.0.0.0`, `0.0.0.0`
        :param _builtins.str mask_variable: Variable name
        """
        if address is not None:
            pulumi.set(__self__, "address", address)
        if address_variable is not None:
            pulumi.set(__self__, "address_variable", address_variable)
        if mask is not None:
            pulumi.set(__self__, "mask", mask)
        if mask_variable is not None:
            pulumi.set(__self__, "mask_variable", mask_variable)

    @_builtins.property
    @pulumi.getter
    def address(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "address")

    @_builtins.property
    @pulumi.getter(name="addressVariable")
    def address_variable(self) -> Optional[_builtins.str]:
        """
        Variable name
        """
        return pulumi.get(self, "address_variable")

    @_builtins.property
    @pulumi.getter
    def mask(self) -> Optional[_builtins.str]:
        """
        - Choices: `255.255.255.255`, `255.255.255.254`, `255.255.255.252`, `255.255.255.248`, `255.255.255.240`, `255.255.255.224`, `255.255.255.192`, `255.255.255.128`, `255.255.255.0`, `255.255.254.0`, `255.255.252.0`, `255.255.248.0`, `255.255.240.0`, `255.255.224.0`, `255.255.192.0`, `255.255.128.0`, `255.255.0.0`, `255.254.0.0`, `255.252.0.0`, `255.240.0.0`, `255.224.0.0`, `255.192.0.0`, `255.128.0.0`, `255.0.0.0`, `254.0.0.0`, `252.0.0.0`, `248.0.0.0`, `240.0.0.0`, `224.0.0.0`, `192.0.0.0`, `128.0.0.0`, `0.0.0.0`
        """
        return pulumi.get(self, "mask")

    @_builtins.property
    @pulumi.getter(name="maskVariable")
    def mask_variable(self) -> Optional[_builtins.str]:
        """
        Variable name
        """
        return pulumi.get(self, "mask_variable")


@pulumi.output_type
class ServiceRoutingEigrpFeatureMd5Key(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "keyId":
            suggest = "key_id"
        elif key == "keyIdVariable":
            suggest = "key_id_variable"
        elif key == "keyString":
            suggest = "key_string"
        elif key == "keyStringVariable":
            suggest = "key_string_variable"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ServiceRoutingEigrpFeatureMd5Key. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ServiceRoutingEigrpFeatureMd5Key.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ServiceRoutingEigrpFeatureMd5Key.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 key_id: Optional[_builtins.int] = None,
                 key_id_variable: Optional[_builtins.str] = None,
                 key_string: Optional[_builtins.str] = None,
                 key_string_variable: Optional[_builtins.str] = None):
        """
        :param _builtins.int key_id: Set MD5 key ID
                 - Range: `1`-`255`
        :param _builtins.str key_id_variable: Variable name
        :param _builtins.str key_string: Set MD5 key
        :param _builtins.str key_string_variable: Variable name
        """
        if key_id is not None:
            pulumi.set(__self__, "key_id", key_id)
        if key_id_variable is not None:
            pulumi.set(__self__, "key_id_variable", key_id_variable)
        if key_string is not None:
            pulumi.set(__self__, "key_string", key_string)
        if key_string_variable is not None:
            pulumi.set(__self__, "key_string_variable", key_string_variable)

    @_builtins.property
    @pulumi.getter(name="keyId")
    def key_id(self) -> Optional[_builtins.int]:
        """
        Set MD5 key ID
          - Range: `1`-`255`
        """
        return pulumi.get(self, "key_id")

    @_builtins.property
    @pulumi.getter(name="keyIdVariable")
    def key_id_variable(self) -> Optional[_builtins.str]:
        """
        Variable name
        """
        return pulumi.get(self, "key_id_variable")

    @_builtins.property
    @pulumi.getter(name="keyString")
    def key_string(self) -> Optional[_builtins.str]:
        """
        Set MD5 key
        """
        return pulumi.get(self, "key_string")

    @_builtins.property
    @pulumi.getter(name="keyStringVariable")
    def key_string_variable(self) -> Optional[_builtins.str]:
        """
        Variable name
        """
        return pulumi.get(self, "key_string_variable")


@pulumi.output_type
class ServiceRoutingEigrpFeatureNetwork(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "ipAddress":
            suggest = "ip_address"
        elif key == "ipAddressVariable":
            suggest = "ip_address_variable"
        elif key == "maskVariable":
            suggest = "mask_variable"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ServiceRoutingEigrpFeatureNetwork. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ServiceRoutingEigrpFeatureNetwork.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ServiceRoutingEigrpFeatureNetwork.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 ip_address: Optional[_builtins.str] = None,
                 ip_address_variable: Optional[_builtins.str] = None,
                 mask: Optional[_builtins.str] = None,
                 mask_variable: Optional[_builtins.str] = None):
        """
        :param _builtins.str ip_address_variable: Variable name
        :param _builtins.str mask: - Choices: `255.255.255.255`, `255.255.255.254`, `255.255.255.252`, `255.255.255.248`, `255.255.255.240`, `255.255.255.224`, `255.255.255.192`, `255.255.255.128`, `255.255.255.0`, `255.255.254.0`, `255.255.252.0`, `255.255.248.0`, `255.255.240.0`, `255.255.224.0`, `255.255.192.0`, `255.255.128.0`, `255.255.0.0`, `255.254.0.0`, `255.252.0.0`, `255.240.0.0`, `255.224.0.0`, `255.192.0.0`, `255.128.0.0`, `255.0.0.0`, `254.0.0.0`, `252.0.0.0`, `248.0.0.0`, `240.0.0.0`, `224.0.0.0`, `192.0.0.0`, `128.0.0.0`, `0.0.0.0`
        :param _builtins.str mask_variable: Variable name
        """
        if ip_address is not None:
            pulumi.set(__self__, "ip_address", ip_address)
        if ip_address_variable is not None:
            pulumi.set(__self__, "ip_address_variable", ip_address_variable)
        if mask is not None:
            pulumi.set(__self__, "mask", mask)
        if mask_variable is not None:
            pulumi.set(__self__, "mask_variable", mask_variable)

    @_builtins.property
    @pulumi.getter(name="ipAddress")
    def ip_address(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "ip_address")

    @_builtins.property
    @pulumi.getter(name="ipAddressVariable")
    def ip_address_variable(self) -> Optional[_builtins.str]:
        """
        Variable name
        """
        return pulumi.get(self, "ip_address_variable")

    @_builtins.property
    @pulumi.getter
    def mask(self) -> Optional[_builtins.str]:
        """
        - Choices: `255.255.255.255`, `255.255.255.254`, `255.255.255.252`, `255.255.255.248`, `255.255.255.240`, `255.255.255.224`, `255.255.255.192`, `255.255.255.128`, `255.255.255.0`, `255.255.254.0`, `255.255.252.0`, `255.255.248.0`, `255.255.240.0`, `255.255.224.0`, `255.255.192.0`, `255.255.128.0`, `255.255.0.0`, `255.254.0.0`, `255.252.0.0`, `255.240.0.0`, `255.224.0.0`, `255.192.0.0`, `255.128.0.0`, `255.0.0.0`, `254.0.0.0`, `252.0.0.0`, `248.0.0.0`, `240.0.0.0`, `224.0.0.0`, `192.0.0.0`, `128.0.0.0`, `0.0.0.0`
        """
        return pulumi.get(self, "mask")

    @_builtins.property
    @pulumi.getter(name="maskVariable")
    def mask_variable(self) -> Optional[_builtins.str]:
        """
        Variable name
        """
        return pulumi.get(self, "mask_variable")


@pulumi.output_type
class ServiceRoutingEigrpFeatureRedistribute(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "protocolVariable":
            suggest = "protocol_variable"
        elif key == "routePolicyId":
            suggest = "route_policy_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ServiceRoutingEigrpFeatureRedistribute. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ServiceRoutingEigrpFeatureRedistribute.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ServiceRoutingEigrpFeatureRedistribute.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 protocol: Optional[_builtins.str] = None,
                 protocol_variable: Optional[_builtins.str] = None,
                 route_policy_id: Optional[_builtins.str] = None):
        """
        :param _builtins.str protocol: Set the protocol to redistribute routes from
                 - Choices: `bgp`, `connected`, `nat-route`, `omp`, `ospf`, `ospfv3`, `static`
        :param _builtins.str protocol_variable: Variable name
        """
        if protocol is not None:
            pulumi.set(__self__, "protocol", protocol)
        if protocol_variable is not None:
            pulumi.set(__self__, "protocol_variable", protocol_variable)
        if route_policy_id is not None:
            pulumi.set(__self__, "route_policy_id", route_policy_id)

    @_builtins.property
    @pulumi.getter
    def protocol(self) -> Optional[_builtins.str]:
        """
        Set the protocol to redistribute routes from
          - Choices: `bgp`, `connected`, `nat-route`, `omp`, `ospf`, `ospfv3`, `static`
        """
        return pulumi.get(self, "protocol")

    @_builtins.property
    @pulumi.getter(name="protocolVariable")
    def protocol_variable(self) -> Optional[_builtins.str]:
        """
        Variable name
        """
        return pulumi.get(self, "protocol_variable")

    @_builtins.property
    @pulumi.getter(name="routePolicyId")
    def route_policy_id(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "route_policy_id")


@pulumi.output_type
class ServiceRoutingOspfFeatureArea(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "areaNumber":
            suggest = "area_number"
        elif key == "areaNumberVariable":
            suggest = "area_number_variable"
        elif key == "areaType":
            suggest = "area_type"
        elif key == "noSummary":
            suggest = "no_summary"
        elif key == "noSummaryVariable":
            suggest = "no_summary_variable"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ServiceRoutingOspfFeatureArea. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ServiceRoutingOspfFeatureArea.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ServiceRoutingOspfFeatureArea.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 area_number: Optional[_builtins.int] = None,
                 area_number_variable: Optional[_builtins.str] = None,
                 area_type: Optional[_builtins.str] = None,
                 interfaces: Optional[Sequence['outputs.ServiceRoutingOspfFeatureAreaInterface']] = None,
                 no_summary: Optional[_builtins.bool] = None,
                 no_summary_variable: Optional[_builtins.str] = None,
                 ranges: Optional[Sequence['outputs.ServiceRoutingOspfFeatureAreaRange']] = None):
        """
        :param _builtins.int area_number: Set OSPF area number
                 - Range: `0`-`4294967295`
        :param _builtins.str area_number_variable: Variable name
        :param _builtins.str area_type: set the area type
                 - Choices: `stub`, `nssa`
        :param Sequence['ServiceRoutingOspfFeatureAreaInterfaceArgs'] interfaces: Set OSPF interface parameters
        :param _builtins.bool no_summary: Do not inject interarea routes into STUB or NSSA
                 - Default value: `false`
        :param _builtins.str no_summary_variable: Variable name
        :param Sequence['ServiceRoutingOspfFeatureAreaRangeArgs'] ranges: Summarize OSPF routes at an area boundary
        """
        if area_number is not None:
            pulumi.set(__self__, "area_number", area_number)
        if area_number_variable is not None:
            pulumi.set(__self__, "area_number_variable", area_number_variable)
        if area_type is not None:
            pulumi.set(__self__, "area_type", area_type)
        if interfaces is not None:
            pulumi.set(__self__, "interfaces", interfaces)
        if no_summary is not None:
            pulumi.set(__self__, "no_summary", no_summary)
        if no_summary_variable is not None:
            pulumi.set(__self__, "no_summary_variable", no_summary_variable)
        if ranges is not None:
            pulumi.set(__self__, "ranges", ranges)

    @_builtins.property
    @pulumi.getter(name="areaNumber")
    def area_number(self) -> Optional[_builtins.int]:
        """
        Set OSPF area number
          - Range: `0`-`4294967295`
        """
        return pulumi.get(self, "area_number")

    @_builtins.property
    @pulumi.getter(name="areaNumberVariable")
    def area_number_variable(self) -> Optional[_builtins.str]:
        """
        Variable name
        """
        return pulumi.get(self, "area_number_variable")

    @_builtins.property
    @pulumi.getter(name="areaType")
    def area_type(self) -> Optional[_builtins.str]:
        """
        set the area type
          - Choices: `stub`, `nssa`
        """
        return pulumi.get(self, "area_type")

    @_builtins.property
    @pulumi.getter
    def interfaces(self) -> Optional[Sequence['outputs.ServiceRoutingOspfFeatureAreaInterface']]:
        """
        Set OSPF interface parameters
        """
        return pulumi.get(self, "interfaces")

    @_builtins.property
    @pulumi.getter(name="noSummary")
    def no_summary(self) -> Optional[_builtins.bool]:
        """
        Do not inject interarea routes into STUB or NSSA
          - Default value: `false`
        """
        return pulumi.get(self, "no_summary")

    @_builtins.property
    @pulumi.getter(name="noSummaryVariable")
    def no_summary_variable(self) -> Optional[_builtins.str]:
        """
        Variable name
        """
        return pulumi.get(self, "no_summary_variable")

    @_builtins.property
    @pulumi.getter
    def ranges(self) -> Optional[Sequence['outputs.ServiceRoutingOspfFeatureAreaRange']]:
        """
        Summarize OSPF routes at an area boundary
        """
        return pulumi.get(self, "ranges")


@pulumi.output_type
class ServiceRoutingOspfFeatureAreaInterface(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "authenticationType":
            suggest = "authentication_type"
        elif key == "authenticationTypeVariable":
            suggest = "authentication_type_variable"
        elif key == "costVariable":
            suggest = "cost_variable"
        elif key == "deadInterval":
            suggest = "dead_interval"
        elif key == "deadIntervalVariable":
            suggest = "dead_interval_variable"
        elif key == "designatedRouterPriority":
            suggest = "designated_router_priority"
        elif key == "designatedRouterPriorityVariable":
            suggest = "designated_router_priority_variable"
        elif key == "helloInterval":
            suggest = "hello_interval"
        elif key == "helloIntervalVariable":
            suggest = "hello_interval_variable"
        elif key == "lsaRetransmitInterval":
            suggest = "lsa_retransmit_interval"
        elif key == "lsaRetransmitIntervalVariable":
            suggest = "lsa_retransmit_interval_variable"
        elif key == "messageDigestKey":
            suggest = "message_digest_key"
        elif key == "messageDigestKeyId":
            suggest = "message_digest_key_id"
        elif key == "messageDigestKeyIdVariable":
            suggest = "message_digest_key_id_variable"
        elif key == "messageDigestKeyVariable":
            suggest = "message_digest_key_variable"
        elif key == "nameVariable":
            suggest = "name_variable"
        elif key == "networkType":
            suggest = "network_type"
        elif key == "networkTypeVariable":
            suggest = "network_type_variable"
        elif key == "passiveInterface":
            suggest = "passive_interface"
        elif key == "passiveInterfaceVariable":
            suggest = "passive_interface_variable"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ServiceRoutingOspfFeatureAreaInterface. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ServiceRoutingOspfFeatureAreaInterface.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ServiceRoutingOspfFeatureAreaInterface.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 authentication_type: Optional[_builtins.str] = None,
                 authentication_type_variable: Optional[_builtins.str] = None,
                 cost: Optional[_builtins.int] = None,
                 cost_variable: Optional[_builtins.str] = None,
                 dead_interval: Optional[_builtins.int] = None,
                 dead_interval_variable: Optional[_builtins.str] = None,
                 designated_router_priority: Optional[_builtins.int] = None,
                 designated_router_priority_variable: Optional[_builtins.str] = None,
                 hello_interval: Optional[_builtins.int] = None,
                 hello_interval_variable: Optional[_builtins.str] = None,
                 lsa_retransmit_interval: Optional[_builtins.int] = None,
                 lsa_retransmit_interval_variable: Optional[_builtins.str] = None,
                 message_digest_key: Optional[_builtins.str] = None,
                 message_digest_key_id: Optional[_builtins.int] = None,
                 message_digest_key_id_variable: Optional[_builtins.str] = None,
                 message_digest_key_variable: Optional[_builtins.str] = None,
                 name: Optional[_builtins.str] = None,
                 name_variable: Optional[_builtins.str] = None,
                 network_type: Optional[_builtins.str] = None,
                 network_type_variable: Optional[_builtins.str] = None,
                 passive_interface: Optional[_builtins.bool] = None,
                 passive_interface_variable: Optional[_builtins.str] = None):
        """
        :param _builtins.str authentication_type: Set OSPF interface authentication type
                 - Choices: `message-digest`
        :param _builtins.str authentication_type_variable: Variable name
        :param _builtins.int cost: Set cost of OSPF interface
                 - Range: `1`-`65535`
        :param _builtins.str cost_variable: Variable name
        :param _builtins.int dead_interval: Set interval after which neighbor is declared to be down
                 - Range: `1`-`65535`
                 - Default value: `40`
        :param _builtins.str dead_interval_variable: Variable name
        :param _builtins.int designated_router_priority: Set router’s priority to be elected as designated router
                 - Range: `0`-`255`
                 - Default value: `1`
        :param _builtins.str designated_router_priority_variable: Variable name
        :param _builtins.int hello_interval: Set interval between OSPF hello packets
                 - Range: `1`-`65535`
                 - Default value: `10`
        :param _builtins.str hello_interval_variable: Variable name
        :param _builtins.int lsa_retransmit_interval: Set time between retransmitting LSAs
                 - Range: `1`-`65535`
                 - Default value: `5`
        :param _builtins.str lsa_retransmit_interval_variable: Variable name
        :param _builtins.str message_digest_key: Set MD5 authentication key
        :param _builtins.int message_digest_key_id: Set MD5 message digest key
                 - Range: `1`-`255`
        :param _builtins.str message_digest_key_id_variable: Variable name
        :param _builtins.str message_digest_key_variable: Variable name
        :param _builtins.str name: Set interface name
        :param _builtins.str name_variable: Variable name
        :param _builtins.str network_type: Set the OSPF network type
                 - Choices: `broadcast`, `point-to-point`, `non-broadcast`, `point-to-multipoint`
                 - Default value: `broadcast`
        :param _builtins.str network_type_variable: Variable name
        :param _builtins.bool passive_interface: Set the interface to advertise its address, but not to actively run OSPF
                 - Default value: `false`
        :param _builtins.str passive_interface_variable: Variable name
        """
        if authentication_type is not None:
            pulumi.set(__self__, "authentication_type", authentication_type)
        if authentication_type_variable is not None:
            pulumi.set(__self__, "authentication_type_variable", authentication_type_variable)
        if cost is not None:
            pulumi.set(__self__, "cost", cost)
        if cost_variable is not None:
            pulumi.set(__self__, "cost_variable", cost_variable)
        if dead_interval is not None:
            pulumi.set(__self__, "dead_interval", dead_interval)
        if dead_interval_variable is not None:
            pulumi.set(__self__, "dead_interval_variable", dead_interval_variable)
        if designated_router_priority is not None:
            pulumi.set(__self__, "designated_router_priority", designated_router_priority)
        if designated_router_priority_variable is not None:
            pulumi.set(__self__, "designated_router_priority_variable", designated_router_priority_variable)
        if hello_interval is not None:
            pulumi.set(__self__, "hello_interval", hello_interval)
        if hello_interval_variable is not None:
            pulumi.set(__self__, "hello_interval_variable", hello_interval_variable)
        if lsa_retransmit_interval is not None:
            pulumi.set(__self__, "lsa_retransmit_interval", lsa_retransmit_interval)
        if lsa_retransmit_interval_variable is not None:
            pulumi.set(__self__, "lsa_retransmit_interval_variable", lsa_retransmit_interval_variable)
        if message_digest_key is not None:
            pulumi.set(__self__, "message_digest_key", message_digest_key)
        if message_digest_key_id is not None:
            pulumi.set(__self__, "message_digest_key_id", message_digest_key_id)
        if message_digest_key_id_variable is not None:
            pulumi.set(__self__, "message_digest_key_id_variable", message_digest_key_id_variable)
        if message_digest_key_variable is not None:
            pulumi.set(__self__, "message_digest_key_variable", message_digest_key_variable)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if name_variable is not None:
            pulumi.set(__self__, "name_variable", name_variable)
        if network_type is not None:
            pulumi.set(__self__, "network_type", network_type)
        if network_type_variable is not None:
            pulumi.set(__self__, "network_type_variable", network_type_variable)
        if passive_interface is not None:
            pulumi.set(__self__, "passive_interface", passive_interface)
        if passive_interface_variable is not None:
            pulumi.set(__self__, "passive_interface_variable", passive_interface_variable)

    @_builtins.property
    @pulumi.getter(name="authenticationType")
    def authentication_type(self) -> Optional[_builtins.str]:
        """
        Set OSPF interface authentication type
          - Choices: `message-digest`
        """
        return pulumi.get(self, "authentication_type")

    @_builtins.property
    @pulumi.getter(name="authenticationTypeVariable")
    def authentication_type_variable(self) -> Optional[_builtins.str]:
        """
        Variable name
        """
        return pulumi.get(self, "authentication_type_variable")

    @_builtins.property
    @pulumi.getter
    def cost(self) -> Optional[_builtins.int]:
        """
        Set cost of OSPF interface
          - Range: `1`-`65535`
        """
        return pulumi.get(self, "cost")

    @_builtins.property
    @pulumi.getter(name="costVariable")
    def cost_variable(self) -> Optional[_builtins.str]:
        """
        Variable name
        """
        return pulumi.get(self, "cost_variable")

    @_builtins.property
    @pulumi.getter(name="deadInterval")
    def dead_interval(self) -> Optional[_builtins.int]:
        """
        Set interval after which neighbor is declared to be down
          - Range: `1`-`65535`
          - Default value: `40`
        """
        return pulumi.get(self, "dead_interval")

    @_builtins.property
    @pulumi.getter(name="deadIntervalVariable")
    def dead_interval_variable(self) -> Optional[_builtins.str]:
        """
        Variable name
        """
        return pulumi.get(self, "dead_interval_variable")

    @_builtins.property
    @pulumi.getter(name="designatedRouterPriority")
    def designated_router_priority(self) -> Optional[_builtins.int]:
        """
        Set router’s priority to be elected as designated router
          - Range: `0`-`255`
          - Default value: `1`
        """
        return pulumi.get(self, "designated_router_priority")

    @_builtins.property
    @pulumi.getter(name="designatedRouterPriorityVariable")
    def designated_router_priority_variable(self) -> Optional[_builtins.str]:
        """
        Variable name
        """
        return pulumi.get(self, "designated_router_priority_variable")

    @_builtins.property
    @pulumi.getter(name="helloInterval")
    def hello_interval(self) -> Optional[_builtins.int]:
        """
        Set interval between OSPF hello packets
          - Range: `1`-`65535`
          - Default value: `10`
        """
        return pulumi.get(self, "hello_interval")

    @_builtins.property
    @pulumi.getter(name="helloIntervalVariable")
    def hello_interval_variable(self) -> Optional[_builtins.str]:
        """
        Variable name
        """
        return pulumi.get(self, "hello_interval_variable")

    @_builtins.property
    @pulumi.getter(name="lsaRetransmitInterval")
    def lsa_retransmit_interval(self) -> Optional[_builtins.int]:
        """
        Set time between retransmitting LSAs
          - Range: `1`-`65535`
          - Default value: `5`
        """
        return pulumi.get(self, "lsa_retransmit_interval")

    @_builtins.property
    @pulumi.getter(name="lsaRetransmitIntervalVariable")
    def lsa_retransmit_interval_variable(self) -> Optional[_builtins.str]:
        """
        Variable name
        """
        return pulumi.get(self, "lsa_retransmit_interval_variable")

    @_builtins.property
    @pulumi.getter(name="messageDigestKey")
    def message_digest_key(self) -> Optional[_builtins.str]:
        """
        Set MD5 authentication key
        """
        return pulumi.get(self, "message_digest_key")

    @_builtins.property
    @pulumi.getter(name="messageDigestKeyId")
    def message_digest_key_id(self) -> Optional[_builtins.int]:
        """
        Set MD5 message digest key
          - Range: `1`-`255`
        """
        return pulumi.get(self, "message_digest_key_id")

    @_builtins.property
    @pulumi.getter(name="messageDigestKeyIdVariable")
    def message_digest_key_id_variable(self) -> Optional[_builtins.str]:
        """
        Variable name
        """
        return pulumi.get(self, "message_digest_key_id_variable")

    @_builtins.property
    @pulumi.getter(name="messageDigestKeyVariable")
    def message_digest_key_variable(self) -> Optional[_builtins.str]:
        """
        Variable name
        """
        return pulumi.get(self, "message_digest_key_variable")

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[_builtins.str]:
        """
        Set interface name
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter(name="nameVariable")
    def name_variable(self) -> Optional[_builtins.str]:
        """
        Variable name
        """
        return pulumi.get(self, "name_variable")

    @_builtins.property
    @pulumi.getter(name="networkType")
    def network_type(self) -> Optional[_builtins.str]:
        """
        Set the OSPF network type
          - Choices: `broadcast`, `point-to-point`, `non-broadcast`, `point-to-multipoint`
          - Default value: `broadcast`
        """
        return pulumi.get(self, "network_type")

    @_builtins.property
    @pulumi.getter(name="networkTypeVariable")
    def network_type_variable(self) -> Optional[_builtins.str]:
        """
        Variable name
        """
        return pulumi.get(self, "network_type_variable")

    @_builtins.property
    @pulumi.getter(name="passiveInterface")
    def passive_interface(self) -> Optional[_builtins.bool]:
        """
        Set the interface to advertise its address, but not to actively run OSPF
          - Default value: `false`
        """
        return pulumi.get(self, "passive_interface")

    @_builtins.property
    @pulumi.getter(name="passiveInterfaceVariable")
    def passive_interface_variable(self) -> Optional[_builtins.str]:
        """
        Variable name
        """
        return pulumi.get(self, "passive_interface_variable")


@pulumi.output_type
class ServiceRoutingOspfFeatureAreaRange(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "costVariable":
            suggest = "cost_variable"
        elif key == "ipAddress":
            suggest = "ip_address"
        elif key == "ipAddressVariable":
            suggest = "ip_address_variable"
        elif key == "noAdvertise":
            suggest = "no_advertise"
        elif key == "noAdvertiseVariable":
            suggest = "no_advertise_variable"
        elif key == "subnetMask":
            suggest = "subnet_mask"
        elif key == "subnetMaskVariable":
            suggest = "subnet_mask_variable"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ServiceRoutingOspfFeatureAreaRange. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ServiceRoutingOspfFeatureAreaRange.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ServiceRoutingOspfFeatureAreaRange.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 cost: Optional[_builtins.int] = None,
                 cost_variable: Optional[_builtins.str] = None,
                 ip_address: Optional[_builtins.str] = None,
                 ip_address_variable: Optional[_builtins.str] = None,
                 no_advertise: Optional[_builtins.bool] = None,
                 no_advertise_variable: Optional[_builtins.str] = None,
                 subnet_mask: Optional[_builtins.str] = None,
                 subnet_mask_variable: Optional[_builtins.str] = None):
        """
        :param _builtins.int cost: Set cost for this range
                 - Range: `0`-`16777214`
        :param _builtins.str cost_variable: Variable name
        :param _builtins.str ip_address: IP Address
        :param _builtins.str ip_address_variable: Variable name
        :param _builtins.bool no_advertise: Do not advertise this range
                 - Default value: `false`
        :param _builtins.str no_advertise_variable: Variable name
        :param _builtins.str subnet_mask: Subnet Mask
                 - Choices: `255.255.255.255`, `255.255.255.254`, `255.255.255.252`, `255.255.255.248`, `255.255.255.240`, `255.255.255.224`, `255.255.255.192`, `255.255.255.128`, `255.255.255.0`, `255.255.254.0`, `255.255.252.0`, `255.255.248.0`, `255.255.240.0`, `255.255.224.0`, `255.255.192.0`, `255.255.128.0`, `255.255.0.0`, `255.254.0.0`, `255.252.0.0`, `255.240.0.0`, `255.224.0.0`, `255.192.0.0`, `255.128.0.0`, `255.0.0.0`, `254.0.0.0`, `252.0.0.0`, `248.0.0.0`, `240.0.0.0`, `224.0.0.0`, `192.0.0.0`, `128.0.0.0`, `0.0.0.0`
        :param _builtins.str subnet_mask_variable: Variable name
        """
        if cost is not None:
            pulumi.set(__self__, "cost", cost)
        if cost_variable is not None:
            pulumi.set(__self__, "cost_variable", cost_variable)
        if ip_address is not None:
            pulumi.set(__self__, "ip_address", ip_address)
        if ip_address_variable is not None:
            pulumi.set(__self__, "ip_address_variable", ip_address_variable)
        if no_advertise is not None:
            pulumi.set(__self__, "no_advertise", no_advertise)
        if no_advertise_variable is not None:
            pulumi.set(__self__, "no_advertise_variable", no_advertise_variable)
        if subnet_mask is not None:
            pulumi.set(__self__, "subnet_mask", subnet_mask)
        if subnet_mask_variable is not None:
            pulumi.set(__self__, "subnet_mask_variable", subnet_mask_variable)

    @_builtins.property
    @pulumi.getter
    def cost(self) -> Optional[_builtins.int]:
        """
        Set cost for this range
          - Range: `0`-`16777214`
        """
        return pulumi.get(self, "cost")

    @_builtins.property
    @pulumi.getter(name="costVariable")
    def cost_variable(self) -> Optional[_builtins.str]:
        """
        Variable name
        """
        return pulumi.get(self, "cost_variable")

    @_builtins.property
    @pulumi.getter(name="ipAddress")
    def ip_address(self) -> Optional[_builtins.str]:
        """
        IP Address
        """
        return pulumi.get(self, "ip_address")

    @_builtins.property
    @pulumi.getter(name="ipAddressVariable")
    def ip_address_variable(self) -> Optional[_builtins.str]:
        """
        Variable name
        """
        return pulumi.get(self, "ip_address_variable")

    @_builtins.property
    @pulumi.getter(name="noAdvertise")
    def no_advertise(self) -> Optional[_builtins.bool]:
        """
        Do not advertise this range
          - Default value: `false`
        """
        return pulumi.get(self, "no_advertise")

    @_builtins.property
    @pulumi.getter(name="noAdvertiseVariable")
    def no_advertise_variable(self) -> Optional[_builtins.str]:
        """
        Variable name
        """
        return pulumi.get(self, "no_advertise_variable")

    @_builtins.property
    @pulumi.getter(name="subnetMask")
    def subnet_mask(self) -> Optional[_builtins.str]:
        """
        Subnet Mask
          - Choices: `255.255.255.255`, `255.255.255.254`, `255.255.255.252`, `255.255.255.248`, `255.255.255.240`, `255.255.255.224`, `255.255.255.192`, `255.255.255.128`, `255.255.255.0`, `255.255.254.0`, `255.255.252.0`, `255.255.248.0`, `255.255.240.0`, `255.255.224.0`, `255.255.192.0`, `255.255.128.0`, `255.255.0.0`, `255.254.0.0`, `255.252.0.0`, `255.240.0.0`, `255.224.0.0`, `255.192.0.0`, `255.128.0.0`, `255.0.0.0`, `254.0.0.0`, `252.0.0.0`, `248.0.0.0`, `240.0.0.0`, `224.0.0.0`, `192.0.0.0`, `128.0.0.0`, `0.0.0.0`
        """
        return pulumi.get(self, "subnet_mask")

    @_builtins.property
    @pulumi.getter(name="subnetMaskVariable")
    def subnet_mask_variable(self) -> Optional[_builtins.str]:
        """
        Variable name
        """
        return pulumi.get(self, "subnet_mask_variable")


@pulumi.output_type
class ServiceRoutingOspfFeatureRedistribute(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "natDia":
            suggest = "nat_dia"
        elif key == "natDiaVariable":
            suggest = "nat_dia_variable"
        elif key == "protocolVariable":
            suggest = "protocol_variable"
        elif key == "routePolicyId":
            suggest = "route_policy_id"
        elif key == "translateRibMetric":
            suggest = "translate_rib_metric"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ServiceRoutingOspfFeatureRedistribute. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ServiceRoutingOspfFeatureRedistribute.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ServiceRoutingOspfFeatureRedistribute.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 nat_dia: Optional[_builtins.bool] = None,
                 nat_dia_variable: Optional[_builtins.str] = None,
                 protocol: Optional[_builtins.str] = None,
                 protocol_variable: Optional[_builtins.str] = None,
                 route_policy_id: Optional[_builtins.str] = None,
                 translate_rib_metric: Optional[_builtins.bool] = None):
        """
        :param _builtins.bool nat_dia: Enable NAT DIA for redistributed routes
                 - Default value: `true`
        :param _builtins.str nat_dia_variable: Variable name
        :param _builtins.str protocol: Set the protocol
                 - Choices: `static`, `connected`, `bgp`, `omp`, `nat`, `eigrp`
        :param _builtins.str protocol_variable: Variable name
        :param _builtins.bool translate_rib_metric: Translate Rib Metric, Attribute conditional on `protocol` being equal to `omp`
                 - Default value: `false`
        """
        if nat_dia is not None:
            pulumi.set(__self__, "nat_dia", nat_dia)
        if nat_dia_variable is not None:
            pulumi.set(__self__, "nat_dia_variable", nat_dia_variable)
        if protocol is not None:
            pulumi.set(__self__, "protocol", protocol)
        if protocol_variable is not None:
            pulumi.set(__self__, "protocol_variable", protocol_variable)
        if route_policy_id is not None:
            pulumi.set(__self__, "route_policy_id", route_policy_id)
        if translate_rib_metric is not None:
            pulumi.set(__self__, "translate_rib_metric", translate_rib_metric)

    @_builtins.property
    @pulumi.getter(name="natDia")
    def nat_dia(self) -> Optional[_builtins.bool]:
        """
        Enable NAT DIA for redistributed routes
          - Default value: `true`
        """
        return pulumi.get(self, "nat_dia")

    @_builtins.property
    @pulumi.getter(name="natDiaVariable")
    def nat_dia_variable(self) -> Optional[_builtins.str]:
        """
        Variable name
        """
        return pulumi.get(self, "nat_dia_variable")

    @_builtins.property
    @pulumi.getter
    def protocol(self) -> Optional[_builtins.str]:
        """
        Set the protocol
          - Choices: `static`, `connected`, `bgp`, `omp`, `nat`, `eigrp`
        """
        return pulumi.get(self, "protocol")

    @_builtins.property
    @pulumi.getter(name="protocolVariable")
    def protocol_variable(self) -> Optional[_builtins.str]:
        """
        Variable name
        """
        return pulumi.get(self, "protocol_variable")

    @_builtins.property
    @pulumi.getter(name="routePolicyId")
    def route_policy_id(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "route_policy_id")

    @_builtins.property
    @pulumi.getter(name="translateRibMetric")
    def translate_rib_metric(self) -> Optional[_builtins.bool]:
        """
        Translate Rib Metric, Attribute conditional on `protocol` being equal to `omp`
          - Default value: `false`
        """
        return pulumi.get(self, "translate_rib_metric")


@pulumi.output_type
class ServiceRoutingOspfFeatureRouterLsa(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "timeVariable":
            suggest = "time_variable"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ServiceRoutingOspfFeatureRouterLsa. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ServiceRoutingOspfFeatureRouterLsa.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ServiceRoutingOspfFeatureRouterLsa.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 time: Optional[_builtins.int] = None,
                 time_variable: Optional[_builtins.str] = None,
                 type: Optional[_builtins.str] = None):
        """
        :param _builtins.int time: Set how long to advertise maximum metric after router starts up
                 - Range: `5`-`86400`
        :param _builtins.str time_variable: Variable name
        :param _builtins.str type: Set the router LSA advertisement type
                 - Choices: `administrative`, `on-startup`
        """
        if time is not None:
            pulumi.set(__self__, "time", time)
        if time_variable is not None:
            pulumi.set(__self__, "time_variable", time_variable)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @_builtins.property
    @pulumi.getter
    def time(self) -> Optional[_builtins.int]:
        """
        Set how long to advertise maximum metric after router starts up
          - Range: `5`-`86400`
        """
        return pulumi.get(self, "time")

    @_builtins.property
    @pulumi.getter(name="timeVariable")
    def time_variable(self) -> Optional[_builtins.str]:
        """
        Variable name
        """
        return pulumi.get(self, "time_variable")

    @_builtins.property
    @pulumi.getter
    def type(self) -> Optional[_builtins.str]:
        """
        Set the router LSA advertisement type
          - Choices: `administrative`, `on-startup`
        """
        return pulumi.get(self, "type")


@pulumi.output_type
class ServiceRoutingOspfv3Ipv4FeatureArea(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "alwaysTranslate":
            suggest = "always_translate"
        elif key == "alwaysTranslateVariable":
            suggest = "always_translate_variable"
        elif key == "areaNumber":
            suggest = "area_number"
        elif key == "areaNumberVariable":
            suggest = "area_number_variable"
        elif key == "areaType":
            suggest = "area_type"
        elif key == "noSummary":
            suggest = "no_summary"
        elif key == "noSummaryVariable":
            suggest = "no_summary_variable"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ServiceRoutingOspfv3Ipv4FeatureArea. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ServiceRoutingOspfv3Ipv4FeatureArea.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ServiceRoutingOspfv3Ipv4FeatureArea.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 always_translate: Optional[_builtins.bool] = None,
                 always_translate_variable: Optional[_builtins.str] = None,
                 area_number: Optional[_builtins.int] = None,
                 area_number_variable: Optional[_builtins.str] = None,
                 area_type: Optional[_builtins.str] = None,
                 interfaces: Optional[Sequence['outputs.ServiceRoutingOspfv3Ipv4FeatureAreaInterface']] = None,
                 no_summary: Optional[_builtins.bool] = None,
                 no_summary_variable: Optional[_builtins.str] = None,
                 ranges: Optional[Sequence['outputs.ServiceRoutingOspfv3Ipv4FeatureAreaRange']] = None):
        """
        :param _builtins.bool always_translate: Always translate type7 LSAs
        :param _builtins.str always_translate_variable: Variable name
        :param _builtins.int area_number: Set OSPF area number
                 - Range: `0`-`4294967295`
        :param _builtins.str area_number_variable: Variable name
        :param _builtins.str area_type: stub area type
                 - Choices: `stub`
        :param Sequence['ServiceRoutingOspfv3Ipv4FeatureAreaInterfaceArgs'] interfaces: Set OSPF interface parameters
        :param _builtins.bool no_summary: Do not inject inter-area routes
        :param _builtins.str no_summary_variable: Variable name
        :param Sequence['ServiceRoutingOspfv3Ipv4FeatureAreaRangeArgs'] ranges: Summarize OSPF routes at an area boundary
        """
        if always_translate is not None:
            pulumi.set(__self__, "always_translate", always_translate)
        if always_translate_variable is not None:
            pulumi.set(__self__, "always_translate_variable", always_translate_variable)
        if area_number is not None:
            pulumi.set(__self__, "area_number", area_number)
        if area_number_variable is not None:
            pulumi.set(__self__, "area_number_variable", area_number_variable)
        if area_type is not None:
            pulumi.set(__self__, "area_type", area_type)
        if interfaces is not None:
            pulumi.set(__self__, "interfaces", interfaces)
        if no_summary is not None:
            pulumi.set(__self__, "no_summary", no_summary)
        if no_summary_variable is not None:
            pulumi.set(__self__, "no_summary_variable", no_summary_variable)
        if ranges is not None:
            pulumi.set(__self__, "ranges", ranges)

    @_builtins.property
    @pulumi.getter(name="alwaysTranslate")
    def always_translate(self) -> Optional[_builtins.bool]:
        """
        Always translate type7 LSAs
        """
        return pulumi.get(self, "always_translate")

    @_builtins.property
    @pulumi.getter(name="alwaysTranslateVariable")
    def always_translate_variable(self) -> Optional[_builtins.str]:
        """
        Variable name
        """
        return pulumi.get(self, "always_translate_variable")

    @_builtins.property
    @pulumi.getter(name="areaNumber")
    def area_number(self) -> Optional[_builtins.int]:
        """
        Set OSPF area number
          - Range: `0`-`4294967295`
        """
        return pulumi.get(self, "area_number")

    @_builtins.property
    @pulumi.getter(name="areaNumberVariable")
    def area_number_variable(self) -> Optional[_builtins.str]:
        """
        Variable name
        """
        return pulumi.get(self, "area_number_variable")

    @_builtins.property
    @pulumi.getter(name="areaType")
    def area_type(self) -> Optional[_builtins.str]:
        """
        stub area type
          - Choices: `stub`
        """
        return pulumi.get(self, "area_type")

    @_builtins.property
    @pulumi.getter
    def interfaces(self) -> Optional[Sequence['outputs.ServiceRoutingOspfv3Ipv4FeatureAreaInterface']]:
        """
        Set OSPF interface parameters
        """
        return pulumi.get(self, "interfaces")

    @_builtins.property
    @pulumi.getter(name="noSummary")
    def no_summary(self) -> Optional[_builtins.bool]:
        """
        Do not inject inter-area routes
        """
        return pulumi.get(self, "no_summary")

    @_builtins.property
    @pulumi.getter(name="noSummaryVariable")
    def no_summary_variable(self) -> Optional[_builtins.str]:
        """
        Variable name
        """
        return pulumi.get(self, "no_summary_variable")

    @_builtins.property
    @pulumi.getter
    def ranges(self) -> Optional[Sequence['outputs.ServiceRoutingOspfv3Ipv4FeatureAreaRange']]:
        """
        Summarize OSPF routes at an area boundary
        """
        return pulumi.get(self, "ranges")


@pulumi.output_type
class ServiceRoutingOspfv3Ipv4FeatureAreaInterface(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "authenticationKey":
            suggest = "authentication_key"
        elif key == "authenticationKeyVariable":
            suggest = "authentication_key_variable"
        elif key == "authenticationSpi":
            suggest = "authentication_spi"
        elif key == "authenticationSpiVariable":
            suggest = "authentication_spi_variable"
        elif key == "authenticationType":
            suggest = "authentication_type"
        elif key == "costVariable":
            suggest = "cost_variable"
        elif key == "deadInterval":
            suggest = "dead_interval"
        elif key == "deadIntervalVariable":
            suggest = "dead_interval_variable"
        elif key == "helloInterval":
            suggest = "hello_interval"
        elif key == "helloIntervalVariable":
            suggest = "hello_interval_variable"
        elif key == "lsaRetransmitInterval":
            suggest = "lsa_retransmit_interval"
        elif key == "lsaRetransmitIntervalVariable":
            suggest = "lsa_retransmit_interval_variable"
        elif key == "nameVariable":
            suggest = "name_variable"
        elif key == "networkType":
            suggest = "network_type"
        elif key == "networkTypeVariable":
            suggest = "network_type_variable"
        elif key == "passiveInterface":
            suggest = "passive_interface"
        elif key == "passiveInterfaceVariable":
            suggest = "passive_interface_variable"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ServiceRoutingOspfv3Ipv4FeatureAreaInterface. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ServiceRoutingOspfv3Ipv4FeatureAreaInterface.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ServiceRoutingOspfv3Ipv4FeatureAreaInterface.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 authentication_key: Optional[_builtins.str] = None,
                 authentication_key_variable: Optional[_builtins.str] = None,
                 authentication_spi: Optional[_builtins.int] = None,
                 authentication_spi_variable: Optional[_builtins.str] = None,
                 authentication_type: Optional[_builtins.str] = None,
                 cost: Optional[_builtins.int] = None,
                 cost_variable: Optional[_builtins.str] = None,
                 dead_interval: Optional[_builtins.int] = None,
                 dead_interval_variable: Optional[_builtins.str] = None,
                 hello_interval: Optional[_builtins.int] = None,
                 hello_interval_variable: Optional[_builtins.str] = None,
                 lsa_retransmit_interval: Optional[_builtins.int] = None,
                 lsa_retransmit_interval_variable: Optional[_builtins.str] = None,
                 name: Optional[_builtins.str] = None,
                 name_variable: Optional[_builtins.str] = None,
                 network_type: Optional[_builtins.str] = None,
                 network_type_variable: Optional[_builtins.str] = None,
                 passive_interface: Optional[_builtins.bool] = None,
                 passive_interface_variable: Optional[_builtins.str] = None):
        """
        :param _builtins.str authentication_key: Set OSPF interface authentication IPSEC key
        :param _builtins.str authentication_key_variable: Variable name
        :param _builtins.int authentication_spi: Set OSPF interface authentication IPSec SPI, range 256..4294967295
                 - Range: `256`-`4294967295`
        :param _builtins.str authentication_spi_variable: Variable name
        :param _builtins.str authentication_type: No Authentication by default
                 - Choices: `no-auth`
        :param _builtins.int cost: Set cost of OSPF interface
                 - Range: `1`-`65535`
        :param _builtins.str cost_variable: Variable name
        :param _builtins.int dead_interval: Set interval after which neighbor is declared to be down
                 - Range: `1`-`65535`
                 - Default value: `40`
        :param _builtins.str dead_interval_variable: Variable name
        :param _builtins.int hello_interval: Set interval between OSPF hello packets
                 - Range: `1`-`65535`
                 - Default value: `10`
        :param _builtins.str hello_interval_variable: Variable name
        :param _builtins.int lsa_retransmit_interval: Set time between retransmitting LSAs
                 - Range: `1`-`65535`
                 - Default value: `5`
        :param _builtins.str lsa_retransmit_interval_variable: Variable name
        :param _builtins.str name: Set interface name
        :param _builtins.str name_variable: Variable name
        :param _builtins.str network_type: Set the OSPF network type
                 - Choices: `broadcast`, `point-to-point`, `non-broadcast`, `point-to-multipoint`
        :param _builtins.str network_type_variable: Variable name
        :param _builtins.bool passive_interface: Set the interface to advertise its address, but not to actively run OSPF
                 - Default value: `false`
        :param _builtins.str passive_interface_variable: Variable name
        """
        if authentication_key is not None:
            pulumi.set(__self__, "authentication_key", authentication_key)
        if authentication_key_variable is not None:
            pulumi.set(__self__, "authentication_key_variable", authentication_key_variable)
        if authentication_spi is not None:
            pulumi.set(__self__, "authentication_spi", authentication_spi)
        if authentication_spi_variable is not None:
            pulumi.set(__self__, "authentication_spi_variable", authentication_spi_variable)
        if authentication_type is not None:
            pulumi.set(__self__, "authentication_type", authentication_type)
        if cost is not None:
            pulumi.set(__self__, "cost", cost)
        if cost_variable is not None:
            pulumi.set(__self__, "cost_variable", cost_variable)
        if dead_interval is not None:
            pulumi.set(__self__, "dead_interval", dead_interval)
        if dead_interval_variable is not None:
            pulumi.set(__self__, "dead_interval_variable", dead_interval_variable)
        if hello_interval is not None:
            pulumi.set(__self__, "hello_interval", hello_interval)
        if hello_interval_variable is not None:
            pulumi.set(__self__, "hello_interval_variable", hello_interval_variable)
        if lsa_retransmit_interval is not None:
            pulumi.set(__self__, "lsa_retransmit_interval", lsa_retransmit_interval)
        if lsa_retransmit_interval_variable is not None:
            pulumi.set(__self__, "lsa_retransmit_interval_variable", lsa_retransmit_interval_variable)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if name_variable is not None:
            pulumi.set(__self__, "name_variable", name_variable)
        if network_type is not None:
            pulumi.set(__self__, "network_type", network_type)
        if network_type_variable is not None:
            pulumi.set(__self__, "network_type_variable", network_type_variable)
        if passive_interface is not None:
            pulumi.set(__self__, "passive_interface", passive_interface)
        if passive_interface_variable is not None:
            pulumi.set(__self__, "passive_interface_variable", passive_interface_variable)

    @_builtins.property
    @pulumi.getter(name="authenticationKey")
    def authentication_key(self) -> Optional[_builtins.str]:
        """
        Set OSPF interface authentication IPSEC key
        """
        return pulumi.get(self, "authentication_key")

    @_builtins.property
    @pulumi.getter(name="authenticationKeyVariable")
    def authentication_key_variable(self) -> Optional[_builtins.str]:
        """
        Variable name
        """
        return pulumi.get(self, "authentication_key_variable")

    @_builtins.property
    @pulumi.getter(name="authenticationSpi")
    def authentication_spi(self) -> Optional[_builtins.int]:
        """
        Set OSPF interface authentication IPSec SPI, range 256..4294967295
          - Range: `256`-`4294967295`
        """
        return pulumi.get(self, "authentication_spi")

    @_builtins.property
    @pulumi.getter(name="authenticationSpiVariable")
    def authentication_spi_variable(self) -> Optional[_builtins.str]:
        """
        Variable name
        """
        return pulumi.get(self, "authentication_spi_variable")

    @_builtins.property
    @pulumi.getter(name="authenticationType")
    def authentication_type(self) -> Optional[_builtins.str]:
        """
        No Authentication by default
          - Choices: `no-auth`
        """
        return pulumi.get(self, "authentication_type")

    @_builtins.property
    @pulumi.getter
    def cost(self) -> Optional[_builtins.int]:
        """
        Set cost of OSPF interface
          - Range: `1`-`65535`
        """
        return pulumi.get(self, "cost")

    @_builtins.property
    @pulumi.getter(name="costVariable")
    def cost_variable(self) -> Optional[_builtins.str]:
        """
        Variable name
        """
        return pulumi.get(self, "cost_variable")

    @_builtins.property
    @pulumi.getter(name="deadInterval")
    def dead_interval(self) -> Optional[_builtins.int]:
        """
        Set interval after which neighbor is declared to be down
          - Range: `1`-`65535`
          - Default value: `40`
        """
        return pulumi.get(self, "dead_interval")

    @_builtins.property
    @pulumi.getter(name="deadIntervalVariable")
    def dead_interval_variable(self) -> Optional[_builtins.str]:
        """
        Variable name
        """
        return pulumi.get(self, "dead_interval_variable")

    @_builtins.property
    @pulumi.getter(name="helloInterval")
    def hello_interval(self) -> Optional[_builtins.int]:
        """
        Set interval between OSPF hello packets
          - Range: `1`-`65535`
          - Default value: `10`
        """
        return pulumi.get(self, "hello_interval")

    @_builtins.property
    @pulumi.getter(name="helloIntervalVariable")
    def hello_interval_variable(self) -> Optional[_builtins.str]:
        """
        Variable name
        """
        return pulumi.get(self, "hello_interval_variable")

    @_builtins.property
    @pulumi.getter(name="lsaRetransmitInterval")
    def lsa_retransmit_interval(self) -> Optional[_builtins.int]:
        """
        Set time between retransmitting LSAs
          - Range: `1`-`65535`
          - Default value: `5`
        """
        return pulumi.get(self, "lsa_retransmit_interval")

    @_builtins.property
    @pulumi.getter(name="lsaRetransmitIntervalVariable")
    def lsa_retransmit_interval_variable(self) -> Optional[_builtins.str]:
        """
        Variable name
        """
        return pulumi.get(self, "lsa_retransmit_interval_variable")

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[_builtins.str]:
        """
        Set interface name
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter(name="nameVariable")
    def name_variable(self) -> Optional[_builtins.str]:
        """
        Variable name
        """
        return pulumi.get(self, "name_variable")

    @_builtins.property
    @pulumi.getter(name="networkType")
    def network_type(self) -> Optional[_builtins.str]:
        """
        Set the OSPF network type
          - Choices: `broadcast`, `point-to-point`, `non-broadcast`, `point-to-multipoint`
        """
        return pulumi.get(self, "network_type")

    @_builtins.property
    @pulumi.getter(name="networkTypeVariable")
    def network_type_variable(self) -> Optional[_builtins.str]:
        """
        Variable name
        """
        return pulumi.get(self, "network_type_variable")

    @_builtins.property
    @pulumi.getter(name="passiveInterface")
    def passive_interface(self) -> Optional[_builtins.bool]:
        """
        Set the interface to advertise its address, but not to actively run OSPF
          - Default value: `false`
        """
        return pulumi.get(self, "passive_interface")

    @_builtins.property
    @pulumi.getter(name="passiveInterfaceVariable")
    def passive_interface_variable(self) -> Optional[_builtins.str]:
        """
        Variable name
        """
        return pulumi.get(self, "passive_interface_variable")


@pulumi.output_type
class ServiceRoutingOspfv3Ipv4FeatureAreaRange(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "costVariable":
            suggest = "cost_variable"
        elif key == "ipAddress":
            suggest = "ip_address"
        elif key == "ipAddressVariable":
            suggest = "ip_address_variable"
        elif key == "noAdvertise":
            suggest = "no_advertise"
        elif key == "noAdvertiseVariable":
            suggest = "no_advertise_variable"
        elif key == "subnetMask":
            suggest = "subnet_mask"
        elif key == "subnetMaskVariable":
            suggest = "subnet_mask_variable"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ServiceRoutingOspfv3Ipv4FeatureAreaRange. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ServiceRoutingOspfv3Ipv4FeatureAreaRange.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ServiceRoutingOspfv3Ipv4FeatureAreaRange.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 cost: Optional[_builtins.int] = None,
                 cost_variable: Optional[_builtins.str] = None,
                 ip_address: Optional[_builtins.str] = None,
                 ip_address_variable: Optional[_builtins.str] = None,
                 no_advertise: Optional[_builtins.bool] = None,
                 no_advertise_variable: Optional[_builtins.str] = None,
                 subnet_mask: Optional[_builtins.str] = None,
                 subnet_mask_variable: Optional[_builtins.str] = None):
        """
        :param _builtins.int cost: Set cost for this range
                 - Range: `0`-`16777214`
        :param _builtins.str cost_variable: Variable name
        :param _builtins.str ip_address_variable: Variable name
        :param _builtins.bool no_advertise: Do not advertise this range
                 - Default value: `false`
        :param _builtins.str no_advertise_variable: Variable name
        :param _builtins.str subnet_mask: - Choices: `255.255.255.255`, `255.255.255.254`, `255.255.255.252`, `255.255.255.248`, `255.255.255.240`, `255.255.255.224`, `255.255.255.192`, `255.255.255.128`, `255.255.255.0`, `255.255.254.0`, `255.255.252.0`, `255.255.248.0`, `255.255.240.0`, `255.255.224.0`, `255.255.192.0`, `255.255.128.0`, `255.255.0.0`, `255.254.0.0`, `255.252.0.0`, `255.240.0.0`, `255.224.0.0`, `255.192.0.0`, `255.128.0.0`, `255.0.0.0`, `254.0.0.0`, `252.0.0.0`, `248.0.0.0`, `240.0.0.0`, `224.0.0.0`, `192.0.0.0`, `128.0.0.0`, `0.0.0.0`
        :param _builtins.str subnet_mask_variable: Variable name
        """
        if cost is not None:
            pulumi.set(__self__, "cost", cost)
        if cost_variable is not None:
            pulumi.set(__self__, "cost_variable", cost_variable)
        if ip_address is not None:
            pulumi.set(__self__, "ip_address", ip_address)
        if ip_address_variable is not None:
            pulumi.set(__self__, "ip_address_variable", ip_address_variable)
        if no_advertise is not None:
            pulumi.set(__self__, "no_advertise", no_advertise)
        if no_advertise_variable is not None:
            pulumi.set(__self__, "no_advertise_variable", no_advertise_variable)
        if subnet_mask is not None:
            pulumi.set(__self__, "subnet_mask", subnet_mask)
        if subnet_mask_variable is not None:
            pulumi.set(__self__, "subnet_mask_variable", subnet_mask_variable)

    @_builtins.property
    @pulumi.getter
    def cost(self) -> Optional[_builtins.int]:
        """
        Set cost for this range
          - Range: `0`-`16777214`
        """
        return pulumi.get(self, "cost")

    @_builtins.property
    @pulumi.getter(name="costVariable")
    def cost_variable(self) -> Optional[_builtins.str]:
        """
        Variable name
        """
        return pulumi.get(self, "cost_variable")

    @_builtins.property
    @pulumi.getter(name="ipAddress")
    def ip_address(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "ip_address")

    @_builtins.property
    @pulumi.getter(name="ipAddressVariable")
    def ip_address_variable(self) -> Optional[_builtins.str]:
        """
        Variable name
        """
        return pulumi.get(self, "ip_address_variable")

    @_builtins.property
    @pulumi.getter(name="noAdvertise")
    def no_advertise(self) -> Optional[_builtins.bool]:
        """
        Do not advertise this range
          - Default value: `false`
        """
        return pulumi.get(self, "no_advertise")

    @_builtins.property
    @pulumi.getter(name="noAdvertiseVariable")
    def no_advertise_variable(self) -> Optional[_builtins.str]:
        """
        Variable name
        """
        return pulumi.get(self, "no_advertise_variable")

    @_builtins.property
    @pulumi.getter(name="subnetMask")
    def subnet_mask(self) -> Optional[_builtins.str]:
        """
        - Choices: `255.255.255.255`, `255.255.255.254`, `255.255.255.252`, `255.255.255.248`, `255.255.255.240`, `255.255.255.224`, `255.255.255.192`, `255.255.255.128`, `255.255.255.0`, `255.255.254.0`, `255.255.252.0`, `255.255.248.0`, `255.255.240.0`, `255.255.224.0`, `255.255.192.0`, `255.255.128.0`, `255.255.0.0`, `255.254.0.0`, `255.252.0.0`, `255.240.0.0`, `255.224.0.0`, `255.192.0.0`, `255.128.0.0`, `255.0.0.0`, `254.0.0.0`, `252.0.0.0`, `248.0.0.0`, `240.0.0.0`, `224.0.0.0`, `192.0.0.0`, `128.0.0.0`, `0.0.0.0`
        """
        return pulumi.get(self, "subnet_mask")

    @_builtins.property
    @pulumi.getter(name="subnetMaskVariable")
    def subnet_mask_variable(self) -> Optional[_builtins.str]:
        """
        Variable name
        """
        return pulumi.get(self, "subnet_mask_variable")


@pulumi.output_type
class ServiceRoutingOspfv3Ipv4FeatureRedistribute(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "natDia":
            suggest = "nat_dia"
        elif key == "natDiaVariable":
            suggest = "nat_dia_variable"
        elif key == "protocolVariable":
            suggest = "protocol_variable"
        elif key == "routePolicyId":
            suggest = "route_policy_id"
        elif key == "translateRibMetric":
            suggest = "translate_rib_metric"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ServiceRoutingOspfv3Ipv4FeatureRedistribute. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ServiceRoutingOspfv3Ipv4FeatureRedistribute.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ServiceRoutingOspfv3Ipv4FeatureRedistribute.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 nat_dia: Optional[_builtins.bool] = None,
                 nat_dia_variable: Optional[_builtins.str] = None,
                 protocol: Optional[_builtins.str] = None,
                 protocol_variable: Optional[_builtins.str] = None,
                 route_policy_id: Optional[_builtins.str] = None,
                 translate_rib_metric: Optional[_builtins.bool] = None):
        """
        :param _builtins.bool nat_dia: Enable NAT DIA for redistributed routes
                 - Default value: `true`
        :param _builtins.str nat_dia_variable: Variable name
        :param _builtins.str protocol: Set the protocol
                 - Choices: `connected`, `static`, `omp`, `nat-route`, `bgp`, `eigrp`
        :param _builtins.str protocol_variable: Variable name
        :param _builtins.bool translate_rib_metric: Translate Rib Metric, Attribute conditional on `protocol` being equal to `omp`
                 - Default value: `false`
        """
        if nat_dia is not None:
            pulumi.set(__self__, "nat_dia", nat_dia)
        if nat_dia_variable is not None:
            pulumi.set(__self__, "nat_dia_variable", nat_dia_variable)
        if protocol is not None:
            pulumi.set(__self__, "protocol", protocol)
        if protocol_variable is not None:
            pulumi.set(__self__, "protocol_variable", protocol_variable)
        if route_policy_id is not None:
            pulumi.set(__self__, "route_policy_id", route_policy_id)
        if translate_rib_metric is not None:
            pulumi.set(__self__, "translate_rib_metric", translate_rib_metric)

    @_builtins.property
    @pulumi.getter(name="natDia")
    def nat_dia(self) -> Optional[_builtins.bool]:
        """
        Enable NAT DIA for redistributed routes
          - Default value: `true`
        """
        return pulumi.get(self, "nat_dia")

    @_builtins.property
    @pulumi.getter(name="natDiaVariable")
    def nat_dia_variable(self) -> Optional[_builtins.str]:
        """
        Variable name
        """
        return pulumi.get(self, "nat_dia_variable")

    @_builtins.property
    @pulumi.getter
    def protocol(self) -> Optional[_builtins.str]:
        """
        Set the protocol
          - Choices: `connected`, `static`, `omp`, `nat-route`, `bgp`, `eigrp`
        """
        return pulumi.get(self, "protocol")

    @_builtins.property
    @pulumi.getter(name="protocolVariable")
    def protocol_variable(self) -> Optional[_builtins.str]:
        """
        Variable name
        """
        return pulumi.get(self, "protocol_variable")

    @_builtins.property
    @pulumi.getter(name="routePolicyId")
    def route_policy_id(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "route_policy_id")

    @_builtins.property
    @pulumi.getter(name="translateRibMetric")
    def translate_rib_metric(self) -> Optional[_builtins.bool]:
        """
        Translate Rib Metric, Attribute conditional on `protocol` being equal to `omp`
          - Default value: `false`
        """
        return pulumi.get(self, "translate_rib_metric")


@pulumi.output_type
class ServiceRoutingOspfv3Ipv6FeatureArea(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "alwaysTranslate":
            suggest = "always_translate"
        elif key == "alwaysTranslateVariable":
            suggest = "always_translate_variable"
        elif key == "areaNumber":
            suggest = "area_number"
        elif key == "areaNumberVariable":
            suggest = "area_number_variable"
        elif key == "areaType":
            suggest = "area_type"
        elif key == "noSummary":
            suggest = "no_summary"
        elif key == "noSummaryVariable":
            suggest = "no_summary_variable"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ServiceRoutingOspfv3Ipv6FeatureArea. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ServiceRoutingOspfv3Ipv6FeatureArea.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ServiceRoutingOspfv3Ipv6FeatureArea.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 always_translate: Optional[_builtins.bool] = None,
                 always_translate_variable: Optional[_builtins.str] = None,
                 area_number: Optional[_builtins.int] = None,
                 area_number_variable: Optional[_builtins.str] = None,
                 area_type: Optional[_builtins.str] = None,
                 interfaces: Optional[Sequence['outputs.ServiceRoutingOspfv3Ipv6FeatureAreaInterface']] = None,
                 no_summary: Optional[_builtins.bool] = None,
                 no_summary_variable: Optional[_builtins.str] = None,
                 ranges: Optional[Sequence['outputs.ServiceRoutingOspfv3Ipv6FeatureAreaRange']] = None):
        """
        :param _builtins.bool always_translate: Always translate type7 LSAs
        :param _builtins.str always_translate_variable: Variable name
        :param _builtins.int area_number: Set OSPF area number
                 - Range: `0`-`4294967295`
        :param _builtins.str area_number_variable: Variable name
        :param _builtins.str area_type: stub area type
                 - Choices: `stub`
        :param Sequence['ServiceRoutingOspfv3Ipv6FeatureAreaInterfaceArgs'] interfaces: Set OSPF interface parameters
        :param _builtins.bool no_summary: Do not inject inter-area routes
        :param _builtins.str no_summary_variable: Variable name
        :param Sequence['ServiceRoutingOspfv3Ipv6FeatureAreaRangeArgs'] ranges: Summarize OSPF routes at an area boundary
        """
        if always_translate is not None:
            pulumi.set(__self__, "always_translate", always_translate)
        if always_translate_variable is not None:
            pulumi.set(__self__, "always_translate_variable", always_translate_variable)
        if area_number is not None:
            pulumi.set(__self__, "area_number", area_number)
        if area_number_variable is not None:
            pulumi.set(__self__, "area_number_variable", area_number_variable)
        if area_type is not None:
            pulumi.set(__self__, "area_type", area_type)
        if interfaces is not None:
            pulumi.set(__self__, "interfaces", interfaces)
        if no_summary is not None:
            pulumi.set(__self__, "no_summary", no_summary)
        if no_summary_variable is not None:
            pulumi.set(__self__, "no_summary_variable", no_summary_variable)
        if ranges is not None:
            pulumi.set(__self__, "ranges", ranges)

    @_builtins.property
    @pulumi.getter(name="alwaysTranslate")
    def always_translate(self) -> Optional[_builtins.bool]:
        """
        Always translate type7 LSAs
        """
        return pulumi.get(self, "always_translate")

    @_builtins.property
    @pulumi.getter(name="alwaysTranslateVariable")
    def always_translate_variable(self) -> Optional[_builtins.str]:
        """
        Variable name
        """
        return pulumi.get(self, "always_translate_variable")

    @_builtins.property
    @pulumi.getter(name="areaNumber")
    def area_number(self) -> Optional[_builtins.int]:
        """
        Set OSPF area number
          - Range: `0`-`4294967295`
        """
        return pulumi.get(self, "area_number")

    @_builtins.property
    @pulumi.getter(name="areaNumberVariable")
    def area_number_variable(self) -> Optional[_builtins.str]:
        """
        Variable name
        """
        return pulumi.get(self, "area_number_variable")

    @_builtins.property
    @pulumi.getter(name="areaType")
    def area_type(self) -> Optional[_builtins.str]:
        """
        stub area type
          - Choices: `stub`
        """
        return pulumi.get(self, "area_type")

    @_builtins.property
    @pulumi.getter
    def interfaces(self) -> Optional[Sequence['outputs.ServiceRoutingOspfv3Ipv6FeatureAreaInterface']]:
        """
        Set OSPF interface parameters
        """
        return pulumi.get(self, "interfaces")

    @_builtins.property
    @pulumi.getter(name="noSummary")
    def no_summary(self) -> Optional[_builtins.bool]:
        """
        Do not inject inter-area routes
        """
        return pulumi.get(self, "no_summary")

    @_builtins.property
    @pulumi.getter(name="noSummaryVariable")
    def no_summary_variable(self) -> Optional[_builtins.str]:
        """
        Variable name
        """
        return pulumi.get(self, "no_summary_variable")

    @_builtins.property
    @pulumi.getter
    def ranges(self) -> Optional[Sequence['outputs.ServiceRoutingOspfv3Ipv6FeatureAreaRange']]:
        """
        Summarize OSPF routes at an area boundary
        """
        return pulumi.get(self, "ranges")


@pulumi.output_type
class ServiceRoutingOspfv3Ipv6FeatureAreaInterface(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "authenticationKey":
            suggest = "authentication_key"
        elif key == "authenticationKeyVariable":
            suggest = "authentication_key_variable"
        elif key == "authenticationSpi":
            suggest = "authentication_spi"
        elif key == "authenticationSpiVariable":
            suggest = "authentication_spi_variable"
        elif key == "authenticationType":
            suggest = "authentication_type"
        elif key == "costVariable":
            suggest = "cost_variable"
        elif key == "deadInterval":
            suggest = "dead_interval"
        elif key == "deadIntervalVariable":
            suggest = "dead_interval_variable"
        elif key == "helloInterval":
            suggest = "hello_interval"
        elif key == "helloIntervalVariable":
            suggest = "hello_interval_variable"
        elif key == "lsaRetransmitInterval":
            suggest = "lsa_retransmit_interval"
        elif key == "lsaRetransmitIntervalVariable":
            suggest = "lsa_retransmit_interval_variable"
        elif key == "nameVariable":
            suggest = "name_variable"
        elif key == "networkType":
            suggest = "network_type"
        elif key == "networkTypeVariable":
            suggest = "network_type_variable"
        elif key == "passiveInterface":
            suggest = "passive_interface"
        elif key == "passiveInterfaceVariable":
            suggest = "passive_interface_variable"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ServiceRoutingOspfv3Ipv6FeatureAreaInterface. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ServiceRoutingOspfv3Ipv6FeatureAreaInterface.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ServiceRoutingOspfv3Ipv6FeatureAreaInterface.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 authentication_key: Optional[_builtins.str] = None,
                 authentication_key_variable: Optional[_builtins.str] = None,
                 authentication_spi: Optional[_builtins.int] = None,
                 authentication_spi_variable: Optional[_builtins.str] = None,
                 authentication_type: Optional[_builtins.str] = None,
                 cost: Optional[_builtins.int] = None,
                 cost_variable: Optional[_builtins.str] = None,
                 dead_interval: Optional[_builtins.int] = None,
                 dead_interval_variable: Optional[_builtins.str] = None,
                 hello_interval: Optional[_builtins.int] = None,
                 hello_interval_variable: Optional[_builtins.str] = None,
                 lsa_retransmit_interval: Optional[_builtins.int] = None,
                 lsa_retransmit_interval_variable: Optional[_builtins.str] = None,
                 name: Optional[_builtins.str] = None,
                 name_variable: Optional[_builtins.str] = None,
                 network_type: Optional[_builtins.str] = None,
                 network_type_variable: Optional[_builtins.str] = None,
                 passive_interface: Optional[_builtins.bool] = None,
                 passive_interface_variable: Optional[_builtins.str] = None):
        """
        :param _builtins.str authentication_key: Set OSPF interface authentication IPSEC key
        :param _builtins.str authentication_key_variable: Variable name
        :param _builtins.int authentication_spi: Set OSPF interface authentication IPSec SPI, range 256..4294967295
                 - Range: `256`-`4294967295`
        :param _builtins.str authentication_spi_variable: Variable name
        :param _builtins.str authentication_type: No Authentication by default
                 - Choices: `no-auth`
        :param _builtins.int cost: Set cost of OSPF interface
                 - Range: `1`-`65535`
        :param _builtins.str cost_variable: Variable name
        :param _builtins.int dead_interval: Set interval after which neighbor is declared to be down
                 - Range: `1`-`65535`
                 - Default value: `40`
        :param _builtins.str dead_interval_variable: Variable name
        :param _builtins.int hello_interval: Set interval between OSPF hello packets
                 - Range: `1`-`65535`
                 - Default value: `10`
        :param _builtins.str hello_interval_variable: Variable name
        :param _builtins.int lsa_retransmit_interval: Set time between retransmitting LSAs
                 - Range: `1`-`65535`
                 - Default value: `5`
        :param _builtins.str lsa_retransmit_interval_variable: Variable name
        :param _builtins.str name: Set interface name
        :param _builtins.str name_variable: Variable name
        :param _builtins.str network_type: Set the OSPF network type
                 - Choices: `broadcast`, `point-to-point`, `non-broadcast`, `point-to-multipoint`
        :param _builtins.str network_type_variable: Variable name
        :param _builtins.bool passive_interface: Set the interface to advertise its address, but not to actively run OSPF
                 - Default value: `false`
        :param _builtins.str passive_interface_variable: Variable name
        """
        if authentication_key is not None:
            pulumi.set(__self__, "authentication_key", authentication_key)
        if authentication_key_variable is not None:
            pulumi.set(__self__, "authentication_key_variable", authentication_key_variable)
        if authentication_spi is not None:
            pulumi.set(__self__, "authentication_spi", authentication_spi)
        if authentication_spi_variable is not None:
            pulumi.set(__self__, "authentication_spi_variable", authentication_spi_variable)
        if authentication_type is not None:
            pulumi.set(__self__, "authentication_type", authentication_type)
        if cost is not None:
            pulumi.set(__self__, "cost", cost)
        if cost_variable is not None:
            pulumi.set(__self__, "cost_variable", cost_variable)
        if dead_interval is not None:
            pulumi.set(__self__, "dead_interval", dead_interval)
        if dead_interval_variable is not None:
            pulumi.set(__self__, "dead_interval_variable", dead_interval_variable)
        if hello_interval is not None:
            pulumi.set(__self__, "hello_interval", hello_interval)
        if hello_interval_variable is not None:
            pulumi.set(__self__, "hello_interval_variable", hello_interval_variable)
        if lsa_retransmit_interval is not None:
            pulumi.set(__self__, "lsa_retransmit_interval", lsa_retransmit_interval)
        if lsa_retransmit_interval_variable is not None:
            pulumi.set(__self__, "lsa_retransmit_interval_variable", lsa_retransmit_interval_variable)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if name_variable is not None:
            pulumi.set(__self__, "name_variable", name_variable)
        if network_type is not None:
            pulumi.set(__self__, "network_type", network_type)
        if network_type_variable is not None:
            pulumi.set(__self__, "network_type_variable", network_type_variable)
        if passive_interface is not None:
            pulumi.set(__self__, "passive_interface", passive_interface)
        if passive_interface_variable is not None:
            pulumi.set(__self__, "passive_interface_variable", passive_interface_variable)

    @_builtins.property
    @pulumi.getter(name="authenticationKey")
    def authentication_key(self) -> Optional[_builtins.str]:
        """
        Set OSPF interface authentication IPSEC key
        """
        return pulumi.get(self, "authentication_key")

    @_builtins.property
    @pulumi.getter(name="authenticationKeyVariable")
    def authentication_key_variable(self) -> Optional[_builtins.str]:
        """
        Variable name
        """
        return pulumi.get(self, "authentication_key_variable")

    @_builtins.property
    @pulumi.getter(name="authenticationSpi")
    def authentication_spi(self) -> Optional[_builtins.int]:
        """
        Set OSPF interface authentication IPSec SPI, range 256..4294967295
          - Range: `256`-`4294967295`
        """
        return pulumi.get(self, "authentication_spi")

    @_builtins.property
    @pulumi.getter(name="authenticationSpiVariable")
    def authentication_spi_variable(self) -> Optional[_builtins.str]:
        """
        Variable name
        """
        return pulumi.get(self, "authentication_spi_variable")

    @_builtins.property
    @pulumi.getter(name="authenticationType")
    def authentication_type(self) -> Optional[_builtins.str]:
        """
        No Authentication by default
          - Choices: `no-auth`
        """
        return pulumi.get(self, "authentication_type")

    @_builtins.property
    @pulumi.getter
    def cost(self) -> Optional[_builtins.int]:
        """
        Set cost of OSPF interface
          - Range: `1`-`65535`
        """
        return pulumi.get(self, "cost")

    @_builtins.property
    @pulumi.getter(name="costVariable")
    def cost_variable(self) -> Optional[_builtins.str]:
        """
        Variable name
        """
        return pulumi.get(self, "cost_variable")

    @_builtins.property
    @pulumi.getter(name="deadInterval")
    def dead_interval(self) -> Optional[_builtins.int]:
        """
        Set interval after which neighbor is declared to be down
          - Range: `1`-`65535`
          - Default value: `40`
        """
        return pulumi.get(self, "dead_interval")

    @_builtins.property
    @pulumi.getter(name="deadIntervalVariable")
    def dead_interval_variable(self) -> Optional[_builtins.str]:
        """
        Variable name
        """
        return pulumi.get(self, "dead_interval_variable")

    @_builtins.property
    @pulumi.getter(name="helloInterval")
    def hello_interval(self) -> Optional[_builtins.int]:
        """
        Set interval between OSPF hello packets
          - Range: `1`-`65535`
          - Default value: `10`
        """
        return pulumi.get(self, "hello_interval")

    @_builtins.property
    @pulumi.getter(name="helloIntervalVariable")
    def hello_interval_variable(self) -> Optional[_builtins.str]:
        """
        Variable name
        """
        return pulumi.get(self, "hello_interval_variable")

    @_builtins.property
    @pulumi.getter(name="lsaRetransmitInterval")
    def lsa_retransmit_interval(self) -> Optional[_builtins.int]:
        """
        Set time between retransmitting LSAs
          - Range: `1`-`65535`
          - Default value: `5`
        """
        return pulumi.get(self, "lsa_retransmit_interval")

    @_builtins.property
    @pulumi.getter(name="lsaRetransmitIntervalVariable")
    def lsa_retransmit_interval_variable(self) -> Optional[_builtins.str]:
        """
        Variable name
        """
        return pulumi.get(self, "lsa_retransmit_interval_variable")

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[_builtins.str]:
        """
        Set interface name
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter(name="nameVariable")
    def name_variable(self) -> Optional[_builtins.str]:
        """
        Variable name
        """
        return pulumi.get(self, "name_variable")

    @_builtins.property
    @pulumi.getter(name="networkType")
    def network_type(self) -> Optional[_builtins.str]:
        """
        Set the OSPF network type
          - Choices: `broadcast`, `point-to-point`, `non-broadcast`, `point-to-multipoint`
        """
        return pulumi.get(self, "network_type")

    @_builtins.property
    @pulumi.getter(name="networkTypeVariable")
    def network_type_variable(self) -> Optional[_builtins.str]:
        """
        Variable name
        """
        return pulumi.get(self, "network_type_variable")

    @_builtins.property
    @pulumi.getter(name="passiveInterface")
    def passive_interface(self) -> Optional[_builtins.bool]:
        """
        Set the interface to advertise its address, but not to actively run OSPF
          - Default value: `false`
        """
        return pulumi.get(self, "passive_interface")

    @_builtins.property
    @pulumi.getter(name="passiveInterfaceVariable")
    def passive_interface_variable(self) -> Optional[_builtins.str]:
        """
        Variable name
        """
        return pulumi.get(self, "passive_interface_variable")


@pulumi.output_type
class ServiceRoutingOspfv3Ipv6FeatureAreaRange(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "costVariable":
            suggest = "cost_variable"
        elif key == "noAdvertise":
            suggest = "no_advertise"
        elif key == "noAdvertiseVariable":
            suggest = "no_advertise_variable"
        elif key == "prefixVariable":
            suggest = "prefix_variable"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ServiceRoutingOspfv3Ipv6FeatureAreaRange. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ServiceRoutingOspfv3Ipv6FeatureAreaRange.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ServiceRoutingOspfv3Ipv6FeatureAreaRange.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 cost: Optional[_builtins.int] = None,
                 cost_variable: Optional[_builtins.str] = None,
                 no_advertise: Optional[_builtins.bool] = None,
                 no_advertise_variable: Optional[_builtins.str] = None,
                 prefix: Optional[_builtins.str] = None,
                 prefix_variable: Optional[_builtins.str] = None):
        """
        :param _builtins.int cost: Set cost for this range
                 - Range: `0`-`16777214`
        :param _builtins.str cost_variable: Variable name
        :param _builtins.bool no_advertise: Do not advertise this range
                 - Default value: `false`
        :param _builtins.str no_advertise_variable: Variable name
        :param _builtins.str prefix: IPv6 prefix,for example 2001::/64
        :param _builtins.str prefix_variable: Variable name
        """
        if cost is not None:
            pulumi.set(__self__, "cost", cost)
        if cost_variable is not None:
            pulumi.set(__self__, "cost_variable", cost_variable)
        if no_advertise is not None:
            pulumi.set(__self__, "no_advertise", no_advertise)
        if no_advertise_variable is not None:
            pulumi.set(__self__, "no_advertise_variable", no_advertise_variable)
        if prefix is not None:
            pulumi.set(__self__, "prefix", prefix)
        if prefix_variable is not None:
            pulumi.set(__self__, "prefix_variable", prefix_variable)

    @_builtins.property
    @pulumi.getter
    def cost(self) -> Optional[_builtins.int]:
        """
        Set cost for this range
          - Range: `0`-`16777214`
        """
        return pulumi.get(self, "cost")

    @_builtins.property
    @pulumi.getter(name="costVariable")
    def cost_variable(self) -> Optional[_builtins.str]:
        """
        Variable name
        """
        return pulumi.get(self, "cost_variable")

    @_builtins.property
    @pulumi.getter(name="noAdvertise")
    def no_advertise(self) -> Optional[_builtins.bool]:
        """
        Do not advertise this range
          - Default value: `false`
        """
        return pulumi.get(self, "no_advertise")

    @_builtins.property
    @pulumi.getter(name="noAdvertiseVariable")
    def no_advertise_variable(self) -> Optional[_builtins.str]:
        """
        Variable name
        """
        return pulumi.get(self, "no_advertise_variable")

    @_builtins.property
    @pulumi.getter
    def prefix(self) -> Optional[_builtins.str]:
        """
        IPv6 prefix,for example 2001::/64
        """
        return pulumi.get(self, "prefix")

    @_builtins.property
    @pulumi.getter(name="prefixVariable")
    def prefix_variable(self) -> Optional[_builtins.str]:
        """
        Variable name
        """
        return pulumi.get(self, "prefix_variable")


@pulumi.output_type
class ServiceRoutingOspfv3Ipv6FeatureRedistribute(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "protocolVariable":
            suggest = "protocol_variable"
        elif key == "routePolicyId":
            suggest = "route_policy_id"
        elif key == "translateRibMetric":
            suggest = "translate_rib_metric"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ServiceRoutingOspfv3Ipv6FeatureRedistribute. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ServiceRoutingOspfv3Ipv6FeatureRedistribute.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ServiceRoutingOspfv3Ipv6FeatureRedistribute.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 protocol: Optional[_builtins.str] = None,
                 protocol_variable: Optional[_builtins.str] = None,
                 route_policy_id: Optional[_builtins.str] = None,
                 translate_rib_metric: Optional[_builtins.bool] = None):
        """
        :param _builtins.str protocol: Set the protocol
                 - Choices: `connected`, `static`, `omp`, `bgp`, `eigrp`
        :param _builtins.str protocol_variable: Variable name
        :param _builtins.bool translate_rib_metric: Translate Rib Metric, Attribute conditional on `protocol` being equal to `omp`
                 - Default value: `false`
        """
        if protocol is not None:
            pulumi.set(__self__, "protocol", protocol)
        if protocol_variable is not None:
            pulumi.set(__self__, "protocol_variable", protocol_variable)
        if route_policy_id is not None:
            pulumi.set(__self__, "route_policy_id", route_policy_id)
        if translate_rib_metric is not None:
            pulumi.set(__self__, "translate_rib_metric", translate_rib_metric)

    @_builtins.property
    @pulumi.getter
    def protocol(self) -> Optional[_builtins.str]:
        """
        Set the protocol
          - Choices: `connected`, `static`, `omp`, `bgp`, `eigrp`
        """
        return pulumi.get(self, "protocol")

    @_builtins.property
    @pulumi.getter(name="protocolVariable")
    def protocol_variable(self) -> Optional[_builtins.str]:
        """
        Variable name
        """
        return pulumi.get(self, "protocol_variable")

    @_builtins.property
    @pulumi.getter(name="routePolicyId")
    def route_policy_id(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "route_policy_id")

    @_builtins.property
    @pulumi.getter(name="translateRibMetric")
    def translate_rib_metric(self) -> Optional[_builtins.bool]:
        """
        Translate Rib Metric, Attribute conditional on `protocol` being equal to `omp`
          - Default value: `false`
        """
        return pulumi.get(self, "translate_rib_metric")


@pulumi.output_type
class ServiceSwitchportFeatureInterface(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "controlDirection":
            suggest = "control_direction"
        elif key == "controlDirectionVariable":
            suggest = "control_direction_variable"
        elif key == "criticalVlan":
            suggest = "critical_vlan"
        elif key == "criticalVlanVariable":
            suggest = "critical_vlan_variable"
        elif key == "duplexVariable":
            suggest = "duplex_variable"
        elif key == "enablePeriodicReauth":
            suggest = "enable_periodic_reauth"
        elif key == "enablePeriodicReauthVariable":
            suggest = "enable_periodic_reauth_variable"
        elif key == "enableVoice":
            suggest = "enable_voice"
        elif key == "enableVoiceVariable":
            suggest = "enable_voice_variable"
        elif key == "guestVlan":
            suggest = "guest_vlan"
        elif key == "guestVlanVariable":
            suggest = "guest_vlan_variable"
        elif key == "hostMode":
            suggest = "host_mode"
        elif key == "hostModeVariable":
            suggest = "host_mode_variable"
        elif key == "inactivityVariable":
            suggest = "inactivity_variable"
        elif key == "interfaceName":
            suggest = "interface_name"
        elif key == "interfaceNameVariable":
            suggest = "interface_name_variable"
        elif key == "macAuthenticationBypass":
            suggest = "mac_authentication_bypass"
        elif key == "macAuthenticationBypassVariable":
            suggest = "mac_authentication_bypass_variable"
        elif key == "paeEnable":
            suggest = "pae_enable"
        elif key == "paeEnableVariable":
            suggest = "pae_enable_variable"
        elif key == "portControl":
            suggest = "port_control"
        elif key == "portControlVariable":
            suggest = "port_control_variable"
        elif key == "reauthenticationVariable":
            suggest = "reauthentication_variable"
        elif key == "restrictedVlan":
            suggest = "restricted_vlan"
        elif key == "restrictedVlanVariable":
            suggest = "restricted_vlan_variable"
        elif key == "shutdownVariable":
            suggest = "shutdown_variable"
        elif key == "speedVariable":
            suggest = "speed_variable"
        elif key == "switchportAccessVlan":
            suggest = "switchport_access_vlan"
        elif key == "switchportAccessVlanVariable":
            suggest = "switchport_access_vlan_variable"
        elif key == "switchportTrunkAllowedVlans":
            suggest = "switchport_trunk_allowed_vlans"
        elif key == "switchportTrunkAllowedVlansVariable":
            suggest = "switchport_trunk_allowed_vlans_variable"
        elif key == "switchportTrunkNativeVlan":
            suggest = "switchport_trunk_native_vlan"
        elif key == "switchportTrunkNativeVlanVariable":
            suggest = "switchport_trunk_native_vlan_variable"
        elif key == "voiceVlan":
            suggest = "voice_vlan"
        elif key == "voiceVlanVariable":
            suggest = "voice_vlan_variable"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ServiceSwitchportFeatureInterface. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ServiceSwitchportFeatureInterface.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ServiceSwitchportFeatureInterface.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 control_direction: Optional[_builtins.str] = None,
                 control_direction_variable: Optional[_builtins.str] = None,
                 critical_vlan: Optional[_builtins.int] = None,
                 critical_vlan_variable: Optional[_builtins.str] = None,
                 duplex: Optional[_builtins.str] = None,
                 duplex_variable: Optional[_builtins.str] = None,
                 enable_periodic_reauth: Optional[_builtins.bool] = None,
                 enable_periodic_reauth_variable: Optional[_builtins.str] = None,
                 enable_voice: Optional[_builtins.bool] = None,
                 enable_voice_variable: Optional[_builtins.str] = None,
                 guest_vlan: Optional[_builtins.int] = None,
                 guest_vlan_variable: Optional[_builtins.str] = None,
                 host_mode: Optional[_builtins.str] = None,
                 host_mode_variable: Optional[_builtins.str] = None,
                 inactivity: Optional[_builtins.int] = None,
                 inactivity_variable: Optional[_builtins.str] = None,
                 interface_name: Optional[_builtins.str] = None,
                 interface_name_variable: Optional[_builtins.str] = None,
                 mac_authentication_bypass: Optional[_builtins.bool] = None,
                 mac_authentication_bypass_variable: Optional[_builtins.str] = None,
                 mode: Optional[_builtins.str] = None,
                 pae_enable: Optional[_builtins.bool] = None,
                 pae_enable_variable: Optional[_builtins.str] = None,
                 port_control: Optional[_builtins.str] = None,
                 port_control_variable: Optional[_builtins.str] = None,
                 reauthentication: Optional[_builtins.int] = None,
                 reauthentication_variable: Optional[_builtins.str] = None,
                 restricted_vlan: Optional[_builtins.int] = None,
                 restricted_vlan_variable: Optional[_builtins.str] = None,
                 shutdown: Optional[_builtins.bool] = None,
                 shutdown_variable: Optional[_builtins.str] = None,
                 speed: Optional[_builtins.str] = None,
                 speed_variable: Optional[_builtins.str] = None,
                 switchport_access_vlan: Optional[_builtins.int] = None,
                 switchport_access_vlan_variable: Optional[_builtins.str] = None,
                 switchport_trunk_allowed_vlans: Optional[_builtins.str] = None,
                 switchport_trunk_allowed_vlans_variable: Optional[_builtins.str] = None,
                 switchport_trunk_native_vlan: Optional[_builtins.int] = None,
                 switchport_trunk_native_vlan_variable: Optional[_builtins.str] = None,
                 voice_vlan: Optional[_builtins.int] = None,
                 voice_vlan_variable: Optional[_builtins.str] = None):
        """
        :param _builtins.str control_direction: Set uni or bi directional authorization mode
                 - Choices: `both`, `in`
        :param _builtins.str control_direction_variable: Variable name
        :param _builtins.int critical_vlan: Set Critical VLAN
                 - Range: `1`-`4094`
        :param _builtins.str critical_vlan_variable: Variable name
        :param _builtins.str duplex: Duplex mode
                 - Choices: `full`, `half`
        :param _builtins.str duplex_variable: Variable name
        :param _builtins.bool enable_periodic_reauth: Enable Periodic Reauthentication
        :param _builtins.str enable_periodic_reauth_variable: Variable name
        :param _builtins.bool enable_voice: Enable Critical Voice VLAN
        :param _builtins.str enable_voice_variable: Variable name
        :param _builtins.int guest_vlan: Set vlan to drop non-802.1x enabled clients into if client is not in MAB list
                 - Range: `1`-`4094`
        :param _builtins.str guest_vlan_variable: Variable name
        :param _builtins.str host_mode: Set host mode
                 - Choices: `single-host`, `multi-auth`, `multi-host`, `multi-domain`
        :param _builtins.str host_mode_variable: Variable name
        :param _builtins.int inactivity: Periodic Reauthentication Inactivity Timeout (in seconds)
                 - Range: `1`-`65535`
        :param _builtins.str inactivity_variable: Variable name
        :param _builtins.str interface_name: Set Interface name
        :param _builtins.str interface_name_variable: Variable name
        :param _builtins.bool mac_authentication_bypass: MAC Authentication Bypass
        :param _builtins.str mac_authentication_bypass_variable: Variable name
        :param _builtins.str mode: Set type of switch port: access/trunk
                 - Choices: `access`, `trunk`
        :param _builtins.bool pae_enable: Set 802.1x Interface Pae Type
        :param _builtins.str pae_enable_variable: Variable name
        :param _builtins.str port_control: Set Port-Control Mode
                 - Choices: `auto`, `force-unauthorized`, `force-authorized`
        :param _builtins.str port_control_variable: Variable name
        :param _builtins.int reauthentication: Periodic Reauthentication Interval (in seconds)
                 - Range: `1`-`1073741823`
                 - Default value: `3600`
        :param _builtins.str reauthentication_variable: Variable name
        :param _builtins.int restricted_vlan: Set Restricted VLAN ID
                 - Range: `1`-`4094`
        :param _builtins.str restricted_vlan_variable: Variable name
        :param _builtins.bool shutdown: Administrative state
                 - Default value: `true`
        :param _builtins.str shutdown_variable: Variable name
        :param _builtins.str speed: Set interface speed
                 - Choices: `10`, `100`, `1000`, `2500`, `10000`
        :param _builtins.str speed_variable: Variable name
        :param _builtins.int switchport_access_vlan: Set VLAN identifier associated with bridging domain
                 - Range: `1`-`4094`
        :param _builtins.str switchport_access_vlan_variable: Variable name
        :param _builtins.str switchport_trunk_allowed_vlans: Configure VLAN IDs used with the trunk
        :param _builtins.str switchport_trunk_allowed_vlans_variable: Variable name
        :param _builtins.int switchport_trunk_native_vlan: Configure VLAN ID used for native VLAN
                 - Range: `1`-`4094`
        :param _builtins.str switchport_trunk_native_vlan_variable: Variable name
        :param _builtins.int voice_vlan: Configure Voice Vlan
                 - Range: `1`-`4094`
        :param _builtins.str voice_vlan_variable: Variable name
        """
        if control_direction is not None:
            pulumi.set(__self__, "control_direction", control_direction)
        if control_direction_variable is not None:
            pulumi.set(__self__, "control_direction_variable", control_direction_variable)
        if critical_vlan is not None:
            pulumi.set(__self__, "critical_vlan", critical_vlan)
        if critical_vlan_variable is not None:
            pulumi.set(__self__, "critical_vlan_variable", critical_vlan_variable)
        if duplex is not None:
            pulumi.set(__self__, "duplex", duplex)
        if duplex_variable is not None:
            pulumi.set(__self__, "duplex_variable", duplex_variable)
        if enable_periodic_reauth is not None:
            pulumi.set(__self__, "enable_periodic_reauth", enable_periodic_reauth)
        if enable_periodic_reauth_variable is not None:
            pulumi.set(__self__, "enable_periodic_reauth_variable", enable_periodic_reauth_variable)
        if enable_voice is not None:
            pulumi.set(__self__, "enable_voice", enable_voice)
        if enable_voice_variable is not None:
            pulumi.set(__self__, "enable_voice_variable", enable_voice_variable)
        if guest_vlan is not None:
            pulumi.set(__self__, "guest_vlan", guest_vlan)
        if guest_vlan_variable is not None:
            pulumi.set(__self__, "guest_vlan_variable", guest_vlan_variable)
        if host_mode is not None:
            pulumi.set(__self__, "host_mode", host_mode)
        if host_mode_variable is not None:
            pulumi.set(__self__, "host_mode_variable", host_mode_variable)
        if inactivity is not None:
            pulumi.set(__self__, "inactivity", inactivity)
        if inactivity_variable is not None:
            pulumi.set(__self__, "inactivity_variable", inactivity_variable)
        if interface_name is not None:
            pulumi.set(__self__, "interface_name", interface_name)
        if interface_name_variable is not None:
            pulumi.set(__self__, "interface_name_variable", interface_name_variable)
        if mac_authentication_bypass is not None:
            pulumi.set(__self__, "mac_authentication_bypass", mac_authentication_bypass)
        if mac_authentication_bypass_variable is not None:
            pulumi.set(__self__, "mac_authentication_bypass_variable", mac_authentication_bypass_variable)
        if mode is not None:
            pulumi.set(__self__, "mode", mode)
        if pae_enable is not None:
            pulumi.set(__self__, "pae_enable", pae_enable)
        if pae_enable_variable is not None:
            pulumi.set(__self__, "pae_enable_variable", pae_enable_variable)
        if port_control is not None:
            pulumi.set(__self__, "port_control", port_control)
        if port_control_variable is not None:
            pulumi.set(__self__, "port_control_variable", port_control_variable)
        if reauthentication is not None:
            pulumi.set(__self__, "reauthentication", reauthentication)
        if reauthentication_variable is not None:
            pulumi.set(__self__, "reauthentication_variable", reauthentication_variable)
        if restricted_vlan is not None:
            pulumi.set(__self__, "restricted_vlan", restricted_vlan)
        if restricted_vlan_variable is not None:
            pulumi.set(__self__, "restricted_vlan_variable", restricted_vlan_variable)
        if shutdown is not None:
            pulumi.set(__self__, "shutdown", shutdown)
        if shutdown_variable is not None:
            pulumi.set(__self__, "shutdown_variable", shutdown_variable)
        if speed is not None:
            pulumi.set(__self__, "speed", speed)
        if speed_variable is not None:
            pulumi.set(__self__, "speed_variable", speed_variable)
        if switchport_access_vlan is not None:
            pulumi.set(__self__, "switchport_access_vlan", switchport_access_vlan)
        if switchport_access_vlan_variable is not None:
            pulumi.set(__self__, "switchport_access_vlan_variable", switchport_access_vlan_variable)
        if switchport_trunk_allowed_vlans is not None:
            pulumi.set(__self__, "switchport_trunk_allowed_vlans", switchport_trunk_allowed_vlans)
        if switchport_trunk_allowed_vlans_variable is not None:
            pulumi.set(__self__, "switchport_trunk_allowed_vlans_variable", switchport_trunk_allowed_vlans_variable)
        if switchport_trunk_native_vlan is not None:
            pulumi.set(__self__, "switchport_trunk_native_vlan", switchport_trunk_native_vlan)
        if switchport_trunk_native_vlan_variable is not None:
            pulumi.set(__self__, "switchport_trunk_native_vlan_variable", switchport_trunk_native_vlan_variable)
        if voice_vlan is not None:
            pulumi.set(__self__, "voice_vlan", voice_vlan)
        if voice_vlan_variable is not None:
            pulumi.set(__self__, "voice_vlan_variable", voice_vlan_variable)

    @_builtins.property
    @pulumi.getter(name="controlDirection")
    def control_direction(self) -> Optional[_builtins.str]:
        """
        Set uni or bi directional authorization mode
          - Choices: `both`, `in`
        """
        return pulumi.get(self, "control_direction")

    @_builtins.property
    @pulumi.getter(name="controlDirectionVariable")
    def control_direction_variable(self) -> Optional[_builtins.str]:
        """
        Variable name
        """
        return pulumi.get(self, "control_direction_variable")

    @_builtins.property
    @pulumi.getter(name="criticalVlan")
    def critical_vlan(self) -> Optional[_builtins.int]:
        """
        Set Critical VLAN
          - Range: `1`-`4094`
        """
        return pulumi.get(self, "critical_vlan")

    @_builtins.property
    @pulumi.getter(name="criticalVlanVariable")
    def critical_vlan_variable(self) -> Optional[_builtins.str]:
        """
        Variable name
        """
        return pulumi.get(self, "critical_vlan_variable")

    @_builtins.property
    @pulumi.getter
    def duplex(self) -> Optional[_builtins.str]:
        """
        Duplex mode
          - Choices: `full`, `half`
        """
        return pulumi.get(self, "duplex")

    @_builtins.property
    @pulumi.getter(name="duplexVariable")
    def duplex_variable(self) -> Optional[_builtins.str]:
        """
        Variable name
        """
        return pulumi.get(self, "duplex_variable")

    @_builtins.property
    @pulumi.getter(name="enablePeriodicReauth")
    def enable_periodic_reauth(self) -> Optional[_builtins.bool]:
        """
        Enable Periodic Reauthentication
        """
        return pulumi.get(self, "enable_periodic_reauth")

    @_builtins.property
    @pulumi.getter(name="enablePeriodicReauthVariable")
    def enable_periodic_reauth_variable(self) -> Optional[_builtins.str]:
        """
        Variable name
        """
        return pulumi.get(self, "enable_periodic_reauth_variable")

    @_builtins.property
    @pulumi.getter(name="enableVoice")
    def enable_voice(self) -> Optional[_builtins.bool]:
        """
        Enable Critical Voice VLAN
        """
        return pulumi.get(self, "enable_voice")

    @_builtins.property
    @pulumi.getter(name="enableVoiceVariable")
    def enable_voice_variable(self) -> Optional[_builtins.str]:
        """
        Variable name
        """
        return pulumi.get(self, "enable_voice_variable")

    @_builtins.property
    @pulumi.getter(name="guestVlan")
    def guest_vlan(self) -> Optional[_builtins.int]:
        """
        Set vlan to drop non-802.1x enabled clients into if client is not in MAB list
          - Range: `1`-`4094`
        """
        return pulumi.get(self, "guest_vlan")

    @_builtins.property
    @pulumi.getter(name="guestVlanVariable")
    def guest_vlan_variable(self) -> Optional[_builtins.str]:
        """
        Variable name
        """
        return pulumi.get(self, "guest_vlan_variable")

    @_builtins.property
    @pulumi.getter(name="hostMode")
    def host_mode(self) -> Optional[_builtins.str]:
        """
        Set host mode
          - Choices: `single-host`, `multi-auth`, `multi-host`, `multi-domain`
        """
        return pulumi.get(self, "host_mode")

    @_builtins.property
    @pulumi.getter(name="hostModeVariable")
    def host_mode_variable(self) -> Optional[_builtins.str]:
        """
        Variable name
        """
        return pulumi.get(self, "host_mode_variable")

    @_builtins.property
    @pulumi.getter
    def inactivity(self) -> Optional[_builtins.int]:
        """
        Periodic Reauthentication Inactivity Timeout (in seconds)
          - Range: `1`-`65535`
        """
        return pulumi.get(self, "inactivity")

    @_builtins.property
    @pulumi.getter(name="inactivityVariable")
    def inactivity_variable(self) -> Optional[_builtins.str]:
        """
        Variable name
        """
        return pulumi.get(self, "inactivity_variable")

    @_builtins.property
    @pulumi.getter(name="interfaceName")
    def interface_name(self) -> Optional[_builtins.str]:
        """
        Set Interface name
        """
        return pulumi.get(self, "interface_name")

    @_builtins.property
    @pulumi.getter(name="interfaceNameVariable")
    def interface_name_variable(self) -> Optional[_builtins.str]:
        """
        Variable name
        """
        return pulumi.get(self, "interface_name_variable")

    @_builtins.property
    @pulumi.getter(name="macAuthenticationBypass")
    def mac_authentication_bypass(self) -> Optional[_builtins.bool]:
        """
        MAC Authentication Bypass
        """
        return pulumi.get(self, "mac_authentication_bypass")

    @_builtins.property
    @pulumi.getter(name="macAuthenticationBypassVariable")
    def mac_authentication_bypass_variable(self) -> Optional[_builtins.str]:
        """
        Variable name
        """
        return pulumi.get(self, "mac_authentication_bypass_variable")

    @_builtins.property
    @pulumi.getter
    def mode(self) -> Optional[_builtins.str]:
        """
        Set type of switch port: access/trunk
          - Choices: `access`, `trunk`
        """
        return pulumi.get(self, "mode")

    @_builtins.property
    @pulumi.getter(name="paeEnable")
    def pae_enable(self) -> Optional[_builtins.bool]:
        """
        Set 802.1x Interface Pae Type
        """
        return pulumi.get(self, "pae_enable")

    @_builtins.property
    @pulumi.getter(name="paeEnableVariable")
    def pae_enable_variable(self) -> Optional[_builtins.str]:
        """
        Variable name
        """
        return pulumi.get(self, "pae_enable_variable")

    @_builtins.property
    @pulumi.getter(name="portControl")
    def port_control(self) -> Optional[_builtins.str]:
        """
        Set Port-Control Mode
          - Choices: `auto`, `force-unauthorized`, `force-authorized`
        """
        return pulumi.get(self, "port_control")

    @_builtins.property
    @pulumi.getter(name="portControlVariable")
    def port_control_variable(self) -> Optional[_builtins.str]:
        """
        Variable name
        """
        return pulumi.get(self, "port_control_variable")

    @_builtins.property
    @pulumi.getter
    def reauthentication(self) -> Optional[_builtins.int]:
        """
        Periodic Reauthentication Interval (in seconds)
          - Range: `1`-`1073741823`
          - Default value: `3600`
        """
        return pulumi.get(self, "reauthentication")

    @_builtins.property
    @pulumi.getter(name="reauthenticationVariable")
    def reauthentication_variable(self) -> Optional[_builtins.str]:
        """
        Variable name
        """
        return pulumi.get(self, "reauthentication_variable")

    @_builtins.property
    @pulumi.getter(name="restrictedVlan")
    def restricted_vlan(self) -> Optional[_builtins.int]:
        """
        Set Restricted VLAN ID
          - Range: `1`-`4094`
        """
        return pulumi.get(self, "restricted_vlan")

    @_builtins.property
    @pulumi.getter(name="restrictedVlanVariable")
    def restricted_vlan_variable(self) -> Optional[_builtins.str]:
        """
        Variable name
        """
        return pulumi.get(self, "restricted_vlan_variable")

    @_builtins.property
    @pulumi.getter
    def shutdown(self) -> Optional[_builtins.bool]:
        """
        Administrative state
          - Default value: `true`
        """
        return pulumi.get(self, "shutdown")

    @_builtins.property
    @pulumi.getter(name="shutdownVariable")
    def shutdown_variable(self) -> Optional[_builtins.str]:
        """
        Variable name
        """
        return pulumi.get(self, "shutdown_variable")

    @_builtins.property
    @pulumi.getter
    def speed(self) -> Optional[_builtins.str]:
        """
        Set interface speed
          - Choices: `10`, `100`, `1000`, `2500`, `10000`
        """
        return pulumi.get(self, "speed")

    @_builtins.property
    @pulumi.getter(name="speedVariable")
    def speed_variable(self) -> Optional[_builtins.str]:
        """
        Variable name
        """
        return pulumi.get(self, "speed_variable")

    @_builtins.property
    @pulumi.getter(name="switchportAccessVlan")
    def switchport_access_vlan(self) -> Optional[_builtins.int]:
        """
        Set VLAN identifier associated with bridging domain
          - Range: `1`-`4094`
        """
        return pulumi.get(self, "switchport_access_vlan")

    @_builtins.property
    @pulumi.getter(name="switchportAccessVlanVariable")
    def switchport_access_vlan_variable(self) -> Optional[_builtins.str]:
        """
        Variable name
        """
        return pulumi.get(self, "switchport_access_vlan_variable")

    @_builtins.property
    @pulumi.getter(name="switchportTrunkAllowedVlans")
    def switchport_trunk_allowed_vlans(self) -> Optional[_builtins.str]:
        """
        Configure VLAN IDs used with the trunk
        """
        return pulumi.get(self, "switchport_trunk_allowed_vlans")

    @_builtins.property
    @pulumi.getter(name="switchportTrunkAllowedVlansVariable")
    def switchport_trunk_allowed_vlans_variable(self) -> Optional[_builtins.str]:
        """
        Variable name
        """
        return pulumi.get(self, "switchport_trunk_allowed_vlans_variable")

    @_builtins.property
    @pulumi.getter(name="switchportTrunkNativeVlan")
    def switchport_trunk_native_vlan(self) -> Optional[_builtins.int]:
        """
        Configure VLAN ID used for native VLAN
          - Range: `1`-`4094`
        """
        return pulumi.get(self, "switchport_trunk_native_vlan")

    @_builtins.property
    @pulumi.getter(name="switchportTrunkNativeVlanVariable")
    def switchport_trunk_native_vlan_variable(self) -> Optional[_builtins.str]:
        """
        Variable name
        """
        return pulumi.get(self, "switchport_trunk_native_vlan_variable")

    @_builtins.property
    @pulumi.getter(name="voiceVlan")
    def voice_vlan(self) -> Optional[_builtins.int]:
        """
        Configure Voice Vlan
          - Range: `1`-`4094`
        """
        return pulumi.get(self, "voice_vlan")

    @_builtins.property
    @pulumi.getter(name="voiceVlanVariable")
    def voice_vlan_variable(self) -> Optional[_builtins.str]:
        """
        Variable name
        """
        return pulumi.get(self, "voice_vlan_variable")


@pulumi.output_type
class ServiceSwitchportFeatureStaticMacAddress(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "interfaceName":
            suggest = "interface_name"
        elif key == "interfaceNameVariable":
            suggest = "interface_name_variable"
        elif key == "macAddress":
            suggest = "mac_address"
        elif key == "macAddressVariable":
            suggest = "mac_address_variable"
        elif key == "vlanId":
            suggest = "vlan_id"
        elif key == "vlanIdVariable":
            suggest = "vlan_id_variable"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ServiceSwitchportFeatureStaticMacAddress. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ServiceSwitchportFeatureStaticMacAddress.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ServiceSwitchportFeatureStaticMacAddress.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 interface_name: Optional[_builtins.str] = None,
                 interface_name_variable: Optional[_builtins.str] = None,
                 mac_address: Optional[_builtins.str] = None,
                 mac_address_variable: Optional[_builtins.str] = None,
                 vlan_id: Optional[_builtins.int] = None,
                 vlan_id_variable: Optional[_builtins.str] = None):
        """
        :param _builtins.str interface_name: Interface name: GigabitEthernet0/<>/<>
        :param _builtins.str interface_name_variable: Variable name
        :param _builtins.str mac_address: Set MAC address in xxxx.xxxx.xxxx format
        :param _builtins.str mac_address_variable: Variable name
        :param _builtins.int vlan_id: Configure VLAN ID used with the mac and interface
                 - Range: `1`-`4094`
        :param _builtins.str vlan_id_variable: Variable name
        """
        if interface_name is not None:
            pulumi.set(__self__, "interface_name", interface_name)
        if interface_name_variable is not None:
            pulumi.set(__self__, "interface_name_variable", interface_name_variable)
        if mac_address is not None:
            pulumi.set(__self__, "mac_address", mac_address)
        if mac_address_variable is not None:
            pulumi.set(__self__, "mac_address_variable", mac_address_variable)
        if vlan_id is not None:
            pulumi.set(__self__, "vlan_id", vlan_id)
        if vlan_id_variable is not None:
            pulumi.set(__self__, "vlan_id_variable", vlan_id_variable)

    @_builtins.property
    @pulumi.getter(name="interfaceName")
    def interface_name(self) -> Optional[_builtins.str]:
        """
        Interface name: GigabitEthernet0/<>/<>
        """
        return pulumi.get(self, "interface_name")

    @_builtins.property
    @pulumi.getter(name="interfaceNameVariable")
    def interface_name_variable(self) -> Optional[_builtins.str]:
        """
        Variable name
        """
        return pulumi.get(self, "interface_name_variable")

    @_builtins.property
    @pulumi.getter(name="macAddress")
    def mac_address(self) -> Optional[_builtins.str]:
        """
        Set MAC address in xxxx.xxxx.xxxx format
        """
        return pulumi.get(self, "mac_address")

    @_builtins.property
    @pulumi.getter(name="macAddressVariable")
    def mac_address_variable(self) -> Optional[_builtins.str]:
        """
        Variable name
        """
        return pulumi.get(self, "mac_address_variable")

    @_builtins.property
    @pulumi.getter(name="vlanId")
    def vlan_id(self) -> Optional[_builtins.int]:
        """
        Configure VLAN ID used with the mac and interface
          - Range: `1`-`4094`
        """
        return pulumi.get(self, "vlan_id")

    @_builtins.property
    @pulumi.getter(name="vlanIdVariable")
    def vlan_id_variable(self) -> Optional[_builtins.str]:
        """
        Variable name
        """
        return pulumi.get(self, "vlan_id_variable")


@pulumi.output_type
class ServiceTrackerGroupFeatureTrackerElement(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "trackerId":
            suggest = "tracker_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ServiceTrackerGroupFeatureTrackerElement. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ServiceTrackerGroupFeatureTrackerElement.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ServiceTrackerGroupFeatureTrackerElement.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 tracker_id: Optional[_builtins.str] = None):
        if tracker_id is not None:
            pulumi.set(__self__, "tracker_id", tracker_id)

    @_builtins.property
    @pulumi.getter(name="trackerId")
    def tracker_id(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "tracker_id")


@pulumi.output_type
class ServiceWirelessLanFeatureSsid(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "adminState":
            suggest = "admin_state"
        elif key == "adminStateVariable":
            suggest = "admin_state_variable"
        elif key == "broadcastSsid":
            suggest = "broadcast_ssid"
        elif key == "broadcastSsidVariable":
            suggest = "broadcast_ssid_variable"
        elif key == "passphraseVariable":
            suggest = "passphrase_variable"
        elif key == "qosProfile":
            suggest = "qos_profile"
        elif key == "qosProfileVariable":
            suggest = "qos_profile_variable"
        elif key == "radioType":
            suggest = "radio_type"
        elif key == "radioTypeVariable":
            suggest = "radio_type_variable"
        elif key == "radiusServerIp":
            suggest = "radius_server_ip"
        elif key == "radiusServerIpVariable":
            suggest = "radius_server_ip_variable"
        elif key == "radiusServerPort":
            suggest = "radius_server_port"
        elif key == "radiusServerPortVariable":
            suggest = "radius_server_port_variable"
        elif key == "radiusServerSecret":
            suggest = "radius_server_secret"
        elif key == "radiusServerSecretVariable":
            suggest = "radius_server_secret_variable"
        elif key == "securityType":
            suggest = "security_type"
        elif key == "ssidName":
            suggest = "ssid_name"
        elif key == "vlanId":
            suggest = "vlan_id"
        elif key == "vlanIdVariable":
            suggest = "vlan_id_variable"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ServiceWirelessLanFeatureSsid. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ServiceWirelessLanFeatureSsid.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ServiceWirelessLanFeatureSsid.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 admin_state: Optional[_builtins.bool] = None,
                 admin_state_variable: Optional[_builtins.str] = None,
                 broadcast_ssid: Optional[_builtins.bool] = None,
                 broadcast_ssid_variable: Optional[_builtins.str] = None,
                 passphrase: Optional[_builtins.str] = None,
                 passphrase_variable: Optional[_builtins.str] = None,
                 qos_profile: Optional[_builtins.str] = None,
                 qos_profile_variable: Optional[_builtins.str] = None,
                 radio_type: Optional[_builtins.str] = None,
                 radio_type_variable: Optional[_builtins.str] = None,
                 radius_server_ip: Optional[_builtins.str] = None,
                 radius_server_ip_variable: Optional[_builtins.str] = None,
                 radius_server_port: Optional[_builtins.int] = None,
                 radius_server_port_variable: Optional[_builtins.str] = None,
                 radius_server_secret: Optional[_builtins.str] = None,
                 radius_server_secret_variable: Optional[_builtins.str] = None,
                 security_type: Optional[_builtins.str] = None,
                 ssid_name: Optional[_builtins.str] = None,
                 vlan_id: Optional[_builtins.int] = None,
                 vlan_id_variable: Optional[_builtins.str] = None):
        """
        :param _builtins.bool admin_state: Set admin state
                 - Default value: `true`
        :param _builtins.str admin_state_variable: Variable name
        :param _builtins.bool broadcast_ssid: Enable broadcast SSID
                 - Default value: `true`
        :param _builtins.str broadcast_ssid_variable: Variable name
        :param _builtins.str passphrase: Set passphrase, Attribute conditional on `security_type` being equal to `personal`
        :param _builtins.str passphrase_variable: Variable name, Attribute conditional on `security_type` being equal to `personal`
        :param _builtins.str qos_profile: Select QoS profile
                 - Choices: `platinum`, `gold`, `silver`, `bronze`
                 - Default value: `silver`
        :param _builtins.str qos_profile_variable: Variable name
        :param _builtins.str radio_type: Select radio type
                 - Choices: `24ghz`, `5ghz`, `all`
                 - Default value: `all`
        :param _builtins.str radio_type_variable: Variable name
        :param _builtins.str radius_server_ip: Set RADIUS server IP, Attribute conditional on `security_type` being equal to `enterprise`
        :param _builtins.str radius_server_ip_variable: Variable name, Attribute conditional on `security_type` being equal to `enterprise`
        :param _builtins.int radius_server_port: Set RADIUS server authentication port, Attribute conditional on `security_type` being equal to `enterprise`
                 - Range: `1`-`65535`
                 - Default value: `1812`
        :param _builtins.str radius_server_port_variable: Variable name, Attribute conditional on `security_type` being equal to `enterprise`
        :param _builtins.str radius_server_secret: Set RADIUS server shared secret, Attribute conditional on `security_type` being equal to `enterprise`
        :param _builtins.str radius_server_secret_variable: Variable name, Attribute conditional on `security_type` being equal to `enterprise`
        :param _builtins.str security_type: Select security type
                 - Choices: `enterprise`, `personal`, `open`
        :param _builtins.str ssid_name: Configure wlan SSID
        :param _builtins.int vlan_id: Set VLAN ID
                 - Range: `1`-`4094`
        :param _builtins.str vlan_id_variable: Variable name
        """
        if admin_state is not None:
            pulumi.set(__self__, "admin_state", admin_state)
        if admin_state_variable is not None:
            pulumi.set(__self__, "admin_state_variable", admin_state_variable)
        if broadcast_ssid is not None:
            pulumi.set(__self__, "broadcast_ssid", broadcast_ssid)
        if broadcast_ssid_variable is not None:
            pulumi.set(__self__, "broadcast_ssid_variable", broadcast_ssid_variable)
        if passphrase is not None:
            pulumi.set(__self__, "passphrase", passphrase)
        if passphrase_variable is not None:
            pulumi.set(__self__, "passphrase_variable", passphrase_variable)
        if qos_profile is not None:
            pulumi.set(__self__, "qos_profile", qos_profile)
        if qos_profile_variable is not None:
            pulumi.set(__self__, "qos_profile_variable", qos_profile_variable)
        if radio_type is not None:
            pulumi.set(__self__, "radio_type", radio_type)
        if radio_type_variable is not None:
            pulumi.set(__self__, "radio_type_variable", radio_type_variable)
        if radius_server_ip is not None:
            pulumi.set(__self__, "radius_server_ip", radius_server_ip)
        if radius_server_ip_variable is not None:
            pulumi.set(__self__, "radius_server_ip_variable", radius_server_ip_variable)
        if radius_server_port is not None:
            pulumi.set(__self__, "radius_server_port", radius_server_port)
        if radius_server_port_variable is not None:
            pulumi.set(__self__, "radius_server_port_variable", radius_server_port_variable)
        if radius_server_secret is not None:
            pulumi.set(__self__, "radius_server_secret", radius_server_secret)
        if radius_server_secret_variable is not None:
            pulumi.set(__self__, "radius_server_secret_variable", radius_server_secret_variable)
        if security_type is not None:
            pulumi.set(__self__, "security_type", security_type)
        if ssid_name is not None:
            pulumi.set(__self__, "ssid_name", ssid_name)
        if vlan_id is not None:
            pulumi.set(__self__, "vlan_id", vlan_id)
        if vlan_id_variable is not None:
            pulumi.set(__self__, "vlan_id_variable", vlan_id_variable)

    @_builtins.property
    @pulumi.getter(name="adminState")
    def admin_state(self) -> Optional[_builtins.bool]:
        """
        Set admin state
          - Default value: `true`
        """
        return pulumi.get(self, "admin_state")

    @_builtins.property
    @pulumi.getter(name="adminStateVariable")
    def admin_state_variable(self) -> Optional[_builtins.str]:
        """
        Variable name
        """
        return pulumi.get(self, "admin_state_variable")

    @_builtins.property
    @pulumi.getter(name="broadcastSsid")
    def broadcast_ssid(self) -> Optional[_builtins.bool]:
        """
        Enable broadcast SSID
          - Default value: `true`
        """
        return pulumi.get(self, "broadcast_ssid")

    @_builtins.property
    @pulumi.getter(name="broadcastSsidVariable")
    def broadcast_ssid_variable(self) -> Optional[_builtins.str]:
        """
        Variable name
        """
        return pulumi.get(self, "broadcast_ssid_variable")

    @_builtins.property
    @pulumi.getter
    def passphrase(self) -> Optional[_builtins.str]:
        """
        Set passphrase, Attribute conditional on `security_type` being equal to `personal`
        """
        return pulumi.get(self, "passphrase")

    @_builtins.property
    @pulumi.getter(name="passphraseVariable")
    def passphrase_variable(self) -> Optional[_builtins.str]:
        """
        Variable name, Attribute conditional on `security_type` being equal to `personal`
        """
        return pulumi.get(self, "passphrase_variable")

    @_builtins.property
    @pulumi.getter(name="qosProfile")
    def qos_profile(self) -> Optional[_builtins.str]:
        """
        Select QoS profile
          - Choices: `platinum`, `gold`, `silver`, `bronze`
          - Default value: `silver`
        """
        return pulumi.get(self, "qos_profile")

    @_builtins.property
    @pulumi.getter(name="qosProfileVariable")
    def qos_profile_variable(self) -> Optional[_builtins.str]:
        """
        Variable name
        """
        return pulumi.get(self, "qos_profile_variable")

    @_builtins.property
    @pulumi.getter(name="radioType")
    def radio_type(self) -> Optional[_builtins.str]:
        """
        Select radio type
          - Choices: `24ghz`, `5ghz`, `all`
          - Default value: `all`
        """
        return pulumi.get(self, "radio_type")

    @_builtins.property
    @pulumi.getter(name="radioTypeVariable")
    def radio_type_variable(self) -> Optional[_builtins.str]:
        """
        Variable name
        """
        return pulumi.get(self, "radio_type_variable")

    @_builtins.property
    @pulumi.getter(name="radiusServerIp")
    def radius_server_ip(self) -> Optional[_builtins.str]:
        """
        Set RADIUS server IP, Attribute conditional on `security_type` being equal to `enterprise`
        """
        return pulumi.get(self, "radius_server_ip")

    @_builtins.property
    @pulumi.getter(name="radiusServerIpVariable")
    def radius_server_ip_variable(self) -> Optional[_builtins.str]:
        """
        Variable name, Attribute conditional on `security_type` being equal to `enterprise`
        """
        return pulumi.get(self, "radius_server_ip_variable")

    @_builtins.property
    @pulumi.getter(name="radiusServerPort")
    def radius_server_port(self) -> Optional[_builtins.int]:
        """
        Set RADIUS server authentication port, Attribute conditional on `security_type` being equal to `enterprise`
          - Range: `1`-`65535`
          - Default value: `1812`
        """
        return pulumi.get(self, "radius_server_port")

    @_builtins.property
    @pulumi.getter(name="radiusServerPortVariable")
    def radius_server_port_variable(self) -> Optional[_builtins.str]:
        """
        Variable name, Attribute conditional on `security_type` being equal to `enterprise`
        """
        return pulumi.get(self, "radius_server_port_variable")

    @_builtins.property
    @pulumi.getter(name="radiusServerSecret")
    def radius_server_secret(self) -> Optional[_builtins.str]:
        """
        Set RADIUS server shared secret, Attribute conditional on `security_type` being equal to `enterprise`
        """
        return pulumi.get(self, "radius_server_secret")

    @_builtins.property
    @pulumi.getter(name="radiusServerSecretVariable")
    def radius_server_secret_variable(self) -> Optional[_builtins.str]:
        """
        Variable name, Attribute conditional on `security_type` being equal to `enterprise`
        """
        return pulumi.get(self, "radius_server_secret_variable")

    @_builtins.property
    @pulumi.getter(name="securityType")
    def security_type(self) -> Optional[_builtins.str]:
        """
        Select security type
          - Choices: `enterprise`, `personal`, `open`
        """
        return pulumi.get(self, "security_type")

    @_builtins.property
    @pulumi.getter(name="ssidName")
    def ssid_name(self) -> Optional[_builtins.str]:
        """
        Configure wlan SSID
        """
        return pulumi.get(self, "ssid_name")

    @_builtins.property
    @pulumi.getter(name="vlanId")
    def vlan_id(self) -> Optional[_builtins.int]:
        """
        Set VLAN ID
          - Range: `1`-`4094`
        """
        return pulumi.get(self, "vlan_id")

    @_builtins.property
    @pulumi.getter(name="vlanIdVariable")
    def vlan_id_variable(self) -> Optional[_builtins.str]:
        """
        Variable name
        """
        return pulumi.get(self, "vlan_id_variable")


@pulumi.output_type
class SiteListPolicyObjectEntry(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "siteId":
            suggest = "site_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SiteListPolicyObjectEntry. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SiteListPolicyObjectEntry.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SiteListPolicyObjectEntry.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 site_id: _builtins.str):
        """
        :param _builtins.str site_id: Site ID or range of Site IDs e.g., `100` or `200-300`
        """
        pulumi.set(__self__, "site_id", site_id)

    @_builtins.property
    @pulumi.getter(name="siteId")
    def site_id(self) -> _builtins.str:
        """
        Site ID or range of Site IDs e.g., `100` or `200-300`
        """
        return pulumi.get(self, "site_id")


@pulumi.output_type
class StandardCommunityListPolicyObjectEntry(dict):
    def __init__(__self__, *,
                 community: _builtins.str):
        """
        :param _builtins.str community: Standard community value, e.g. `100:1000`, `internet`, `local-AS`, `no-advertise` or `no-export`
        """
        pulumi.set(__self__, "community", community)

    @_builtins.property
    @pulumi.getter
    def community(self) -> _builtins.str:
        """
        Standard community value, e.g. `100:1000`, `internet`, `local-AS`, `no-advertise` or `no-export`
        """
        return pulumi.get(self, "community")


@pulumi.output_type
class SwitchportFeatureTemplateInterface(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "dot1xAuthenticationOrderVariable":
            suggest = "dot1x_authentication_order_variable"
        elif key == "dot1xAuthenticationOrders":
            suggest = "dot1x_authentication_orders"
        elif key == "dot1xControlDirection":
            suggest = "dot1x_control_direction"
        elif key == "dot1xControlDirectionVariable":
            suggest = "dot1x_control_direction_variable"
        elif key == "dot1xCriticalVlan":
            suggest = "dot1x_critical_vlan"
        elif key == "dot1xCriticalVlanVariable":
            suggest = "dot1x_critical_vlan_variable"
        elif key == "dot1xEnable":
            suggest = "dot1x_enable"
        elif key == "dot1xEnableCriticialVoiceVlan":
            suggest = "dot1x_enable_criticial_voice_vlan"
        elif key == "dot1xEnableCriticialVoiceVlanVariable":
            suggest = "dot1x_enable_criticial_voice_vlan_variable"
        elif key == "dot1xEnablePeriodicReauth":
            suggest = "dot1x_enable_periodic_reauth"
        elif key == "dot1xEnablePeriodicReauthVariable":
            suggest = "dot1x_enable_periodic_reauth_variable"
        elif key == "dot1xEnableVariable":
            suggest = "dot1x_enable_variable"
        elif key == "dot1xGuestVlan":
            suggest = "dot1x_guest_vlan"
        elif key == "dot1xGuestVlanVariable":
            suggest = "dot1x_guest_vlan_variable"
        elif key == "dot1xHostMode":
            suggest = "dot1x_host_mode"
        elif key == "dot1xHostModeVariable":
            suggest = "dot1x_host_mode_variable"
        elif key == "dot1xMacAuthenticationBypass":
            suggest = "dot1x_mac_authentication_bypass"
        elif key == "dot1xMacAuthenticationBypassVariable":
            suggest = "dot1x_mac_authentication_bypass_variable"
        elif key == "dot1xPaeEnable":
            suggest = "dot1x_pae_enable"
        elif key == "dot1xPaeEnableVariable":
            suggest = "dot1x_pae_enable_variable"
        elif key == "dot1xPeriodicReauthInactivityTimeout":
            suggest = "dot1x_periodic_reauth_inactivity_timeout"
        elif key == "dot1xPeriodicReauthInactivityTimeoutVariable":
            suggest = "dot1x_periodic_reauth_inactivity_timeout_variable"
        elif key == "dot1xPeriodicReauthInterval":
            suggest = "dot1x_periodic_reauth_interval"
        elif key == "dot1xPeriodicReauthIntervalVariable":
            suggest = "dot1x_periodic_reauth_interval_variable"
        elif key == "dot1xPortControl":
            suggest = "dot1x_port_control"
        elif key == "dot1xPortControlVariable":
            suggest = "dot1x_port_control_variable"
        elif key == "dot1xRestrictedVlan":
            suggest = "dot1x_restricted_vlan"
        elif key == "dot1xRestrictedVlanVariable":
            suggest = "dot1x_restricted_vlan_variable"
        elif key == "duplexVariable":
            suggest = "duplex_variable"
        elif key == "nameVariable":
            suggest = "name_variable"
        elif key == "shutdownVariable":
            suggest = "shutdown_variable"
        elif key == "speedVariable":
            suggest = "speed_variable"
        elif key == "switchportAccessVlan":
            suggest = "switchport_access_vlan"
        elif key == "switchportAccessVlanVariable":
            suggest = "switchport_access_vlan_variable"
        elif key == "switchportMode":
            suggest = "switchport_mode"
        elif key == "switchportTrunkAllowedVlans":
            suggest = "switchport_trunk_allowed_vlans"
        elif key == "switchportTrunkAllowedVlansVariable":
            suggest = "switchport_trunk_allowed_vlans_variable"
        elif key == "switchportTrunkNativeVlan":
            suggest = "switchport_trunk_native_vlan"
        elif key == "switchportTrunkNativeVlanVariable":
            suggest = "switchport_trunk_native_vlan_variable"
        elif key == "voiceVlan":
            suggest = "voice_vlan"
        elif key == "voiceVlanVariable":
            suggest = "voice_vlan_variable"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SwitchportFeatureTemplateInterface. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SwitchportFeatureTemplateInterface.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SwitchportFeatureTemplateInterface.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 dot1x_authentication_order_variable: Optional[_builtins.str] = None,
                 dot1x_authentication_orders: Optional[Sequence[_builtins.str]] = None,
                 dot1x_control_direction: Optional[_builtins.str] = None,
                 dot1x_control_direction_variable: Optional[_builtins.str] = None,
                 dot1x_critical_vlan: Optional[_builtins.int] = None,
                 dot1x_critical_vlan_variable: Optional[_builtins.str] = None,
                 dot1x_enable: Optional[_builtins.bool] = None,
                 dot1x_enable_criticial_voice_vlan: Optional[_builtins.bool] = None,
                 dot1x_enable_criticial_voice_vlan_variable: Optional[_builtins.str] = None,
                 dot1x_enable_periodic_reauth: Optional[_builtins.bool] = None,
                 dot1x_enable_periodic_reauth_variable: Optional[_builtins.str] = None,
                 dot1x_enable_variable: Optional[_builtins.str] = None,
                 dot1x_guest_vlan: Optional[_builtins.int] = None,
                 dot1x_guest_vlan_variable: Optional[_builtins.str] = None,
                 dot1x_host_mode: Optional[_builtins.str] = None,
                 dot1x_host_mode_variable: Optional[_builtins.str] = None,
                 dot1x_mac_authentication_bypass: Optional[_builtins.bool] = None,
                 dot1x_mac_authentication_bypass_variable: Optional[_builtins.str] = None,
                 dot1x_pae_enable: Optional[_builtins.bool] = None,
                 dot1x_pae_enable_variable: Optional[_builtins.str] = None,
                 dot1x_periodic_reauth_inactivity_timeout: Optional[_builtins.int] = None,
                 dot1x_periodic_reauth_inactivity_timeout_variable: Optional[_builtins.str] = None,
                 dot1x_periodic_reauth_interval: Optional[_builtins.int] = None,
                 dot1x_periodic_reauth_interval_variable: Optional[_builtins.str] = None,
                 dot1x_port_control: Optional[_builtins.str] = None,
                 dot1x_port_control_variable: Optional[_builtins.str] = None,
                 dot1x_restricted_vlan: Optional[_builtins.int] = None,
                 dot1x_restricted_vlan_variable: Optional[_builtins.str] = None,
                 duplex: Optional[_builtins.str] = None,
                 duplex_variable: Optional[_builtins.str] = None,
                 name: Optional[_builtins.str] = None,
                 name_variable: Optional[_builtins.str] = None,
                 optional: Optional[_builtins.bool] = None,
                 shutdown: Optional[_builtins.bool] = None,
                 shutdown_variable: Optional[_builtins.str] = None,
                 speed: Optional[_builtins.str] = None,
                 speed_variable: Optional[_builtins.str] = None,
                 switchport_access_vlan: Optional[_builtins.int] = None,
                 switchport_access_vlan_variable: Optional[_builtins.str] = None,
                 switchport_mode: Optional[_builtins.str] = None,
                 switchport_trunk_allowed_vlans: Optional[_builtins.str] = None,
                 switchport_trunk_allowed_vlans_variable: Optional[_builtins.str] = None,
                 switchport_trunk_native_vlan: Optional[_builtins.int] = None,
                 switchport_trunk_native_vlan_variable: Optional[_builtins.str] = None,
                 voice_vlan: Optional[_builtins.int] = None,
                 voice_vlan_variable: Optional[_builtins.str] = None):
        """
        :param _builtins.str dot1x_authentication_order_variable: Variable name
        :param Sequence[_builtins.str] dot1x_authentication_orders: Specify authentication methods in the order of preference
        :param _builtins.str dot1x_control_direction: Set uni or bi directional authorization mode
                 - Choices: `both`, `in`
                 - Default value: `both`
        :param _builtins.str dot1x_control_direction_variable: Variable name
        :param _builtins.int dot1x_critical_vlan: Set Critical VLAN
                 - Range: `1`-`4094`
        :param _builtins.str dot1x_critical_vlan_variable: Variable name
        :param _builtins.bool dot1x_enable: Set 802.1x on off
                 - Default value: `true`
        :param _builtins.bool dot1x_enable_criticial_voice_vlan: Enable Critical Voice VLAN
                 - Default value: `false`
        :param _builtins.str dot1x_enable_criticial_voice_vlan_variable: Variable name
        :param _builtins.bool dot1x_enable_periodic_reauth: Enable Periodic Reauthentication
                 - Default value: `false`
        :param _builtins.str dot1x_enable_periodic_reauth_variable: Variable name
        :param _builtins.str dot1x_enable_variable: Variable name
        :param _builtins.int dot1x_guest_vlan: Set vlan to drop non-802.1x enabled clients into if client is not in MAB list
                 - Range: `1`-`4094`
        :param _builtins.str dot1x_guest_vlan_variable: Variable name
        :param _builtins.str dot1x_host_mode: Set host mode
                 - Choices: `single-host`, `multi-auth`, `multi-host`, `multi-domain`
                 - Default value: `single-host`
        :param _builtins.str dot1x_host_mode_variable: Variable name
        :param _builtins.bool dot1x_mac_authentication_bypass: MAC Authentication Bypass
                 - Default value: `false`
        :param _builtins.str dot1x_mac_authentication_bypass_variable: Variable name
        :param _builtins.bool dot1x_pae_enable: Set 802.1x Interface Pae Type
                 - Default value: `true`
        :param _builtins.str dot1x_pae_enable_variable: Variable name
        :param _builtins.int dot1x_periodic_reauth_inactivity_timeout: Periodic Reauthentication Inactivity Timeout (in seconds)
                 - Range: `1`-`1440`
                 - Default value: `60`
        :param _builtins.str dot1x_periodic_reauth_inactivity_timeout_variable: Variable name
        :param _builtins.int dot1x_periodic_reauth_interval: Periodic Reauthentication Interval (in seconds)
                 - Range: `0`-`1440`
                 - Default value: `0`
        :param _builtins.str dot1x_periodic_reauth_interval_variable: Variable name
        :param _builtins.str dot1x_port_control: Set Port-Control Mode
                 - Choices: `auto`, `force-unauthorized`, `force-authorized`
                 - Default value: `auto`
        :param _builtins.str dot1x_port_control_variable: Variable name
        :param _builtins.int dot1x_restricted_vlan: Set Restricted VLAN ID
                 - Range: `1`-`4094`
        :param _builtins.str dot1x_restricted_vlan_variable: Variable name
        :param _builtins.str duplex: Duplex mode
                 - Choices: `full`, `half`
        :param _builtins.str duplex_variable: Variable name
        :param _builtins.str name: Set Interface name
        :param _builtins.str name_variable: Variable name
        :param _builtins.bool optional: Indicates if list item is considered optional.
        :param _builtins.bool shutdown: Administrative state
                 - Default value: `true`
        :param _builtins.str shutdown_variable: Variable name
        :param _builtins.str speed: Set interface speed
                 - Choices: `10`, `100`, `1000`, `2500`, `10000`
        :param _builtins.str speed_variable: Variable name
        :param _builtins.int switchport_access_vlan: Set VLAN identifier associated with bridging domain
                 - Range: `1`-`4094`
        :param _builtins.str switchport_access_vlan_variable: Variable name
        :param _builtins.str switchport_mode: Set type of switch port: access/trunk
                 - Choices: `access`, `trunk`
        :param _builtins.str switchport_trunk_allowed_vlans: Configure VLAN IDs used with the trunk
        :param _builtins.str switchport_trunk_allowed_vlans_variable: Variable name
        :param _builtins.int switchport_trunk_native_vlan: Configure VLAN ID used for native VLAN
                 - Range: `1`-`4094`
        :param _builtins.str switchport_trunk_native_vlan_variable: Variable name
        :param _builtins.int voice_vlan: Configure Voice Vlan
                 - Range: `1`-`4094`
        :param _builtins.str voice_vlan_variable: Variable name
        """
        if dot1x_authentication_order_variable is not None:
            pulumi.set(__self__, "dot1x_authentication_order_variable", dot1x_authentication_order_variable)
        if dot1x_authentication_orders is not None:
            pulumi.set(__self__, "dot1x_authentication_orders", dot1x_authentication_orders)
        if dot1x_control_direction is not None:
            pulumi.set(__self__, "dot1x_control_direction", dot1x_control_direction)
        if dot1x_control_direction_variable is not None:
            pulumi.set(__self__, "dot1x_control_direction_variable", dot1x_control_direction_variable)
        if dot1x_critical_vlan is not None:
            pulumi.set(__self__, "dot1x_critical_vlan", dot1x_critical_vlan)
        if dot1x_critical_vlan_variable is not None:
            pulumi.set(__self__, "dot1x_critical_vlan_variable", dot1x_critical_vlan_variable)
        if dot1x_enable is not None:
            pulumi.set(__self__, "dot1x_enable", dot1x_enable)
        if dot1x_enable_criticial_voice_vlan is not None:
            pulumi.set(__self__, "dot1x_enable_criticial_voice_vlan", dot1x_enable_criticial_voice_vlan)
        if dot1x_enable_criticial_voice_vlan_variable is not None:
            pulumi.set(__self__, "dot1x_enable_criticial_voice_vlan_variable", dot1x_enable_criticial_voice_vlan_variable)
        if dot1x_enable_periodic_reauth is not None:
            pulumi.set(__self__, "dot1x_enable_periodic_reauth", dot1x_enable_periodic_reauth)
        if dot1x_enable_periodic_reauth_variable is not None:
            pulumi.set(__self__, "dot1x_enable_periodic_reauth_variable", dot1x_enable_periodic_reauth_variable)
        if dot1x_enable_variable is not None:
            pulumi.set(__self__, "dot1x_enable_variable", dot1x_enable_variable)
        if dot1x_guest_vlan is not None:
            pulumi.set(__self__, "dot1x_guest_vlan", dot1x_guest_vlan)
        if dot1x_guest_vlan_variable is not None:
            pulumi.set(__self__, "dot1x_guest_vlan_variable", dot1x_guest_vlan_variable)
        if dot1x_host_mode is not None:
            pulumi.set(__self__, "dot1x_host_mode", dot1x_host_mode)
        if dot1x_host_mode_variable is not None:
            pulumi.set(__self__, "dot1x_host_mode_variable", dot1x_host_mode_variable)
        if dot1x_mac_authentication_bypass is not None:
            pulumi.set(__self__, "dot1x_mac_authentication_bypass", dot1x_mac_authentication_bypass)
        if dot1x_mac_authentication_bypass_variable is not None:
            pulumi.set(__self__, "dot1x_mac_authentication_bypass_variable", dot1x_mac_authentication_bypass_variable)
        if dot1x_pae_enable is not None:
            pulumi.set(__self__, "dot1x_pae_enable", dot1x_pae_enable)
        if dot1x_pae_enable_variable is not None:
            pulumi.set(__self__, "dot1x_pae_enable_variable", dot1x_pae_enable_variable)
        if dot1x_periodic_reauth_inactivity_timeout is not None:
            pulumi.set(__self__, "dot1x_periodic_reauth_inactivity_timeout", dot1x_periodic_reauth_inactivity_timeout)
        if dot1x_periodic_reauth_inactivity_timeout_variable is not None:
            pulumi.set(__self__, "dot1x_periodic_reauth_inactivity_timeout_variable", dot1x_periodic_reauth_inactivity_timeout_variable)
        if dot1x_periodic_reauth_interval is not None:
            pulumi.set(__self__, "dot1x_periodic_reauth_interval", dot1x_periodic_reauth_interval)
        if dot1x_periodic_reauth_interval_variable is not None:
            pulumi.set(__self__, "dot1x_periodic_reauth_interval_variable", dot1x_periodic_reauth_interval_variable)
        if dot1x_port_control is not None:
            pulumi.set(__self__, "dot1x_port_control", dot1x_port_control)
        if dot1x_port_control_variable is not None:
            pulumi.set(__self__, "dot1x_port_control_variable", dot1x_port_control_variable)
        if dot1x_restricted_vlan is not None:
            pulumi.set(__self__, "dot1x_restricted_vlan", dot1x_restricted_vlan)
        if dot1x_restricted_vlan_variable is not None:
            pulumi.set(__self__, "dot1x_restricted_vlan_variable", dot1x_restricted_vlan_variable)
        if duplex is not None:
            pulumi.set(__self__, "duplex", duplex)
        if duplex_variable is not None:
            pulumi.set(__self__, "duplex_variable", duplex_variable)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if name_variable is not None:
            pulumi.set(__self__, "name_variable", name_variable)
        if optional is not None:
            pulumi.set(__self__, "optional", optional)
        if shutdown is not None:
            pulumi.set(__self__, "shutdown", shutdown)
        if shutdown_variable is not None:
            pulumi.set(__self__, "shutdown_variable", shutdown_variable)
        if speed is not None:
            pulumi.set(__self__, "speed", speed)
        if speed_variable is not None:
            pulumi.set(__self__, "speed_variable", speed_variable)
        if switchport_access_vlan is not None:
            pulumi.set(__self__, "switchport_access_vlan", switchport_access_vlan)
        if switchport_access_vlan_variable is not None:
            pulumi.set(__self__, "switchport_access_vlan_variable", switchport_access_vlan_variable)
        if switchport_mode is not None:
            pulumi.set(__self__, "switchport_mode", switchport_mode)
        if switchport_trunk_allowed_vlans is not None:
            pulumi.set(__self__, "switchport_trunk_allowed_vlans", switchport_trunk_allowed_vlans)
        if switchport_trunk_allowed_vlans_variable is not None:
            pulumi.set(__self__, "switchport_trunk_allowed_vlans_variable", switchport_trunk_allowed_vlans_variable)
        if switchport_trunk_native_vlan is not None:
            pulumi.set(__self__, "switchport_trunk_native_vlan", switchport_trunk_native_vlan)
        if switchport_trunk_native_vlan_variable is not None:
            pulumi.set(__self__, "switchport_trunk_native_vlan_variable", switchport_trunk_native_vlan_variable)
        if voice_vlan is not None:
            pulumi.set(__self__, "voice_vlan", voice_vlan)
        if voice_vlan_variable is not None:
            pulumi.set(__self__, "voice_vlan_variable", voice_vlan_variable)

    @_builtins.property
    @pulumi.getter(name="dot1xAuthenticationOrderVariable")
    def dot1x_authentication_order_variable(self) -> Optional[_builtins.str]:
        """
        Variable name
        """
        return pulumi.get(self, "dot1x_authentication_order_variable")

    @_builtins.property
    @pulumi.getter(name="dot1xAuthenticationOrders")
    def dot1x_authentication_orders(self) -> Optional[Sequence[_builtins.str]]:
        """
        Specify authentication methods in the order of preference
        """
        return pulumi.get(self, "dot1x_authentication_orders")

    @_builtins.property
    @pulumi.getter(name="dot1xControlDirection")
    def dot1x_control_direction(self) -> Optional[_builtins.str]:
        """
        Set uni or bi directional authorization mode
          - Choices: `both`, `in`
          - Default value: `both`
        """
        return pulumi.get(self, "dot1x_control_direction")

    @_builtins.property
    @pulumi.getter(name="dot1xControlDirectionVariable")
    def dot1x_control_direction_variable(self) -> Optional[_builtins.str]:
        """
        Variable name
        """
        return pulumi.get(self, "dot1x_control_direction_variable")

    @_builtins.property
    @pulumi.getter(name="dot1xCriticalVlan")
    def dot1x_critical_vlan(self) -> Optional[_builtins.int]:
        """
        Set Critical VLAN
          - Range: `1`-`4094`
        """
        return pulumi.get(self, "dot1x_critical_vlan")

    @_builtins.property
    @pulumi.getter(name="dot1xCriticalVlanVariable")
    def dot1x_critical_vlan_variable(self) -> Optional[_builtins.str]:
        """
        Variable name
        """
        return pulumi.get(self, "dot1x_critical_vlan_variable")

    @_builtins.property
    @pulumi.getter(name="dot1xEnable")
    def dot1x_enable(self) -> Optional[_builtins.bool]:
        """
        Set 802.1x on off
          - Default value: `true`
        """
        return pulumi.get(self, "dot1x_enable")

    @_builtins.property
    @pulumi.getter(name="dot1xEnableCriticialVoiceVlan")
    def dot1x_enable_criticial_voice_vlan(self) -> Optional[_builtins.bool]:
        """
        Enable Critical Voice VLAN
          - Default value: `false`
        """
        return pulumi.get(self, "dot1x_enable_criticial_voice_vlan")

    @_builtins.property
    @pulumi.getter(name="dot1xEnableCriticialVoiceVlanVariable")
    def dot1x_enable_criticial_voice_vlan_variable(self) -> Optional[_builtins.str]:
        """
        Variable name
        """
        return pulumi.get(self, "dot1x_enable_criticial_voice_vlan_variable")

    @_builtins.property
    @pulumi.getter(name="dot1xEnablePeriodicReauth")
    def dot1x_enable_periodic_reauth(self) -> Optional[_builtins.bool]:
        """
        Enable Periodic Reauthentication
          - Default value: `false`
        """
        return pulumi.get(self, "dot1x_enable_periodic_reauth")

    @_builtins.property
    @pulumi.getter(name="dot1xEnablePeriodicReauthVariable")
    def dot1x_enable_periodic_reauth_variable(self) -> Optional[_builtins.str]:
        """
        Variable name
        """
        return pulumi.get(self, "dot1x_enable_periodic_reauth_variable")

    @_builtins.property
    @pulumi.getter(name="dot1xEnableVariable")
    def dot1x_enable_variable(self) -> Optional[_builtins.str]:
        """
        Variable name
        """
        return pulumi.get(self, "dot1x_enable_variable")

    @_builtins.property
    @pulumi.getter(name="dot1xGuestVlan")
    def dot1x_guest_vlan(self) -> Optional[_builtins.int]:
        """
        Set vlan to drop non-802.1x enabled clients into if client is not in MAB list
          - Range: `1`-`4094`
        """
        return pulumi.get(self, "dot1x_guest_vlan")

    @_builtins.property
    @pulumi.getter(name="dot1xGuestVlanVariable")
    def dot1x_guest_vlan_variable(self) -> Optional[_builtins.str]:
        """
        Variable name
        """
        return pulumi.get(self, "dot1x_guest_vlan_variable")

    @_builtins.property
    @pulumi.getter(name="dot1xHostMode")
    def dot1x_host_mode(self) -> Optional[_builtins.str]:
        """
        Set host mode
          - Choices: `single-host`, `multi-auth`, `multi-host`, `multi-domain`
          - Default value: `single-host`
        """
        return pulumi.get(self, "dot1x_host_mode")

    @_builtins.property
    @pulumi.getter(name="dot1xHostModeVariable")
    def dot1x_host_mode_variable(self) -> Optional[_builtins.str]:
        """
        Variable name
        """
        return pulumi.get(self, "dot1x_host_mode_variable")

    @_builtins.property
    @pulumi.getter(name="dot1xMacAuthenticationBypass")
    def dot1x_mac_authentication_bypass(self) -> Optional[_builtins.bool]:
        """
        MAC Authentication Bypass
          - Default value: `false`
        """
        return pulumi.get(self, "dot1x_mac_authentication_bypass")

    @_builtins.property
    @pulumi.getter(name="dot1xMacAuthenticationBypassVariable")
    def dot1x_mac_authentication_bypass_variable(self) -> Optional[_builtins.str]:
        """
        Variable name
        """
        return pulumi.get(self, "dot1x_mac_authentication_bypass_variable")

    @_builtins.property
    @pulumi.getter(name="dot1xPaeEnable")
    def dot1x_pae_enable(self) -> Optional[_builtins.bool]:
        """
        Set 802.1x Interface Pae Type
          - Default value: `true`
        """
        return pulumi.get(self, "dot1x_pae_enable")

    @_builtins.property
    @pulumi.getter(name="dot1xPaeEnableVariable")
    def dot1x_pae_enable_variable(self) -> Optional[_builtins.str]:
        """
        Variable name
        """
        return pulumi.get(self, "dot1x_pae_enable_variable")

    @_builtins.property
    @pulumi.getter(name="dot1xPeriodicReauthInactivityTimeout")
    def dot1x_periodic_reauth_inactivity_timeout(self) -> Optional[_builtins.int]:
        """
        Periodic Reauthentication Inactivity Timeout (in seconds)
          - Range: `1`-`1440`
          - Default value: `60`
        """
        return pulumi.get(self, "dot1x_periodic_reauth_inactivity_timeout")

    @_builtins.property
    @pulumi.getter(name="dot1xPeriodicReauthInactivityTimeoutVariable")
    def dot1x_periodic_reauth_inactivity_timeout_variable(self) -> Optional[_builtins.str]:
        """
        Variable name
        """
        return pulumi.get(self, "dot1x_periodic_reauth_inactivity_timeout_variable")

    @_builtins.property
    @pulumi.getter(name="dot1xPeriodicReauthInterval")
    def dot1x_periodic_reauth_interval(self) -> Optional[_builtins.int]:
        """
        Periodic Reauthentication Interval (in seconds)
          - Range: `0`-`1440`
          - Default value: `0`
        """
        return pulumi.get(self, "dot1x_periodic_reauth_interval")

    @_builtins.property
    @pulumi.getter(name="dot1xPeriodicReauthIntervalVariable")
    def dot1x_periodic_reauth_interval_variable(self) -> Optional[_builtins.str]:
        """
        Variable name
        """
        return pulumi.get(self, "dot1x_periodic_reauth_interval_variable")

    @_builtins.property
    @pulumi.getter(name="dot1xPortControl")
    def dot1x_port_control(self) -> Optional[_builtins.str]:
        """
        Set Port-Control Mode
          - Choices: `auto`, `force-unauthorized`, `force-authorized`
          - Default value: `auto`
        """
        return pulumi.get(self, "dot1x_port_control")

    @_builtins.property
    @pulumi.getter(name="dot1xPortControlVariable")
    def dot1x_port_control_variable(self) -> Optional[_builtins.str]:
        """
        Variable name
        """
        return pulumi.get(self, "dot1x_port_control_variable")

    @_builtins.property
    @pulumi.getter(name="dot1xRestrictedVlan")
    def dot1x_restricted_vlan(self) -> Optional[_builtins.int]:
        """
        Set Restricted VLAN ID
          - Range: `1`-`4094`
        """
        return pulumi.get(self, "dot1x_restricted_vlan")

    @_builtins.property
    @pulumi.getter(name="dot1xRestrictedVlanVariable")
    def dot1x_restricted_vlan_variable(self) -> Optional[_builtins.str]:
        """
        Variable name
        """
        return pulumi.get(self, "dot1x_restricted_vlan_variable")

    @_builtins.property
    @pulumi.getter
    def duplex(self) -> Optional[_builtins.str]:
        """
        Duplex mode
          - Choices: `full`, `half`
        """
        return pulumi.get(self, "duplex")

    @_builtins.property
    @pulumi.getter(name="duplexVariable")
    def duplex_variable(self) -> Optional[_builtins.str]:
        """
        Variable name
        """
        return pulumi.get(self, "duplex_variable")

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[_builtins.str]:
        """
        Set Interface name
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter(name="nameVariable")
    def name_variable(self) -> Optional[_builtins.str]:
        """
        Variable name
        """
        return pulumi.get(self, "name_variable")

    @_builtins.property
    @pulumi.getter
    def optional(self) -> Optional[_builtins.bool]:
        """
        Indicates if list item is considered optional.
        """
        return pulumi.get(self, "optional")

    @_builtins.property
    @pulumi.getter
    def shutdown(self) -> Optional[_builtins.bool]:
        """
        Administrative state
          - Default value: `true`
        """
        return pulumi.get(self, "shutdown")

    @_builtins.property
    @pulumi.getter(name="shutdownVariable")
    def shutdown_variable(self) -> Optional[_builtins.str]:
        """
        Variable name
        """
        return pulumi.get(self, "shutdown_variable")

    @_builtins.property
    @pulumi.getter
    def speed(self) -> Optional[_builtins.str]:
        """
        Set interface speed
          - Choices: `10`, `100`, `1000`, `2500`, `10000`
        """
        return pulumi.get(self, "speed")

    @_builtins.property
    @pulumi.getter(name="speedVariable")
    def speed_variable(self) -> Optional[_builtins.str]:
        """
        Variable name
        """
        return pulumi.get(self, "speed_variable")

    @_builtins.property
    @pulumi.getter(name="switchportAccessVlan")
    def switchport_access_vlan(self) -> Optional[_builtins.int]:
        """
        Set VLAN identifier associated with bridging domain
          - Range: `1`-`4094`
        """
        return pulumi.get(self, "switchport_access_vlan")

    @_builtins.property
    @pulumi.getter(name="switchportAccessVlanVariable")
    def switchport_access_vlan_variable(self) -> Optional[_builtins.str]:
        """
        Variable name
        """
        return pulumi.get(self, "switchport_access_vlan_variable")

    @_builtins.property
    @pulumi.getter(name="switchportMode")
    def switchport_mode(self) -> Optional[_builtins.str]:
        """
        Set type of switch port: access/trunk
          - Choices: `access`, `trunk`
        """
        return pulumi.get(self, "switchport_mode")

    @_builtins.property
    @pulumi.getter(name="switchportTrunkAllowedVlans")
    def switchport_trunk_allowed_vlans(self) -> Optional[_builtins.str]:
        """
        Configure VLAN IDs used with the trunk
        """
        return pulumi.get(self, "switchport_trunk_allowed_vlans")

    @_builtins.property
    @pulumi.getter(name="switchportTrunkAllowedVlansVariable")
    def switchport_trunk_allowed_vlans_variable(self) -> Optional[_builtins.str]:
        """
        Variable name
        """
        return pulumi.get(self, "switchport_trunk_allowed_vlans_variable")

    @_builtins.property
    @pulumi.getter(name="switchportTrunkNativeVlan")
    def switchport_trunk_native_vlan(self) -> Optional[_builtins.int]:
        """
        Configure VLAN ID used for native VLAN
          - Range: `1`-`4094`
        """
        return pulumi.get(self, "switchport_trunk_native_vlan")

    @_builtins.property
    @pulumi.getter(name="switchportTrunkNativeVlanVariable")
    def switchport_trunk_native_vlan_variable(self) -> Optional[_builtins.str]:
        """
        Variable name
        """
        return pulumi.get(self, "switchport_trunk_native_vlan_variable")

    @_builtins.property
    @pulumi.getter(name="voiceVlan")
    def voice_vlan(self) -> Optional[_builtins.int]:
        """
        Configure Voice Vlan
          - Range: `1`-`4094`
        """
        return pulumi.get(self, "voice_vlan")

    @_builtins.property
    @pulumi.getter(name="voiceVlanVariable")
    def voice_vlan_variable(self) -> Optional[_builtins.str]:
        """
        Variable name
        """
        return pulumi.get(self, "voice_vlan_variable")


@pulumi.output_type
class SwitchportFeatureTemplateStaticMacAddress(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "ifName":
            suggest = "if_name"
        elif key == "ifNameVariable":
            suggest = "if_name_variable"
        elif key == "macAddress":
            suggest = "mac_address"
        elif key == "macAddressVariable":
            suggest = "mac_address_variable"
        elif key == "vlanVariable":
            suggest = "vlan_variable"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SwitchportFeatureTemplateStaticMacAddress. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SwitchportFeatureTemplateStaticMacAddress.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SwitchportFeatureTemplateStaticMacAddress.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 if_name: Optional[_builtins.str] = None,
                 if_name_variable: Optional[_builtins.str] = None,
                 mac_address: Optional[_builtins.str] = None,
                 mac_address_variable: Optional[_builtins.str] = None,
                 optional: Optional[_builtins.bool] = None,
                 vlan: Optional[_builtins.int] = None,
                 vlan_variable: Optional[_builtins.str] = None):
        """
        :param _builtins.str if_name: Interface name: GigabitEthernet0/<>/<>
        :param _builtins.str if_name_variable: Variable name
        :param _builtins.str mac_address: Set MAC address in xxxx.xxxx.xxxx format
        :param _builtins.str mac_address_variable: Variable name
        :param _builtins.bool optional: Indicates if list item is considered optional.
        :param _builtins.int vlan: Configure VLAN ID used with the mac and interface
                 - Range: `1`-`4094`
        :param _builtins.str vlan_variable: Variable name
        """
        if if_name is not None:
            pulumi.set(__self__, "if_name", if_name)
        if if_name_variable is not None:
            pulumi.set(__self__, "if_name_variable", if_name_variable)
        if mac_address is not None:
            pulumi.set(__self__, "mac_address", mac_address)
        if mac_address_variable is not None:
            pulumi.set(__self__, "mac_address_variable", mac_address_variable)
        if optional is not None:
            pulumi.set(__self__, "optional", optional)
        if vlan is not None:
            pulumi.set(__self__, "vlan", vlan)
        if vlan_variable is not None:
            pulumi.set(__self__, "vlan_variable", vlan_variable)

    @_builtins.property
    @pulumi.getter(name="ifName")
    def if_name(self) -> Optional[_builtins.str]:
        """
        Interface name: GigabitEthernet0/<>/<>
        """
        return pulumi.get(self, "if_name")

    @_builtins.property
    @pulumi.getter(name="ifNameVariable")
    def if_name_variable(self) -> Optional[_builtins.str]:
        """
        Variable name
        """
        return pulumi.get(self, "if_name_variable")

    @_builtins.property
    @pulumi.getter(name="macAddress")
    def mac_address(self) -> Optional[_builtins.str]:
        """
        Set MAC address in xxxx.xxxx.xxxx format
        """
        return pulumi.get(self, "mac_address")

    @_builtins.property
    @pulumi.getter(name="macAddressVariable")
    def mac_address_variable(self) -> Optional[_builtins.str]:
        """
        Variable name
        """
        return pulumi.get(self, "mac_address_variable")

    @_builtins.property
    @pulumi.getter
    def optional(self) -> Optional[_builtins.bool]:
        """
        Indicates if list item is considered optional.
        """
        return pulumi.get(self, "optional")

    @_builtins.property
    @pulumi.getter
    def vlan(self) -> Optional[_builtins.int]:
        """
        Configure VLAN ID used with the mac and interface
          - Range: `1`-`4094`
        """
        return pulumi.get(self, "vlan")

    @_builtins.property
    @pulumi.getter(name="vlanVariable")
    def vlan_variable(self) -> Optional[_builtins.str]:
        """
        Variable name
        """
        return pulumi.get(self, "vlan_variable")


@pulumi.output_type
class SystemAaaFeatureAccountingRule(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "ruleId":
            suggest = "rule_id"
        elif key == "startStop":
            suggest = "start_stop"
        elif key == "startStopVariable":
            suggest = "start_stop_variable"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SystemAaaFeatureAccountingRule. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SystemAaaFeatureAccountingRule.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SystemAaaFeatureAccountingRule.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 groups: Optional[Sequence[_builtins.str]] = None,
                 level: Optional[_builtins.str] = None,
                 method: Optional[_builtins.str] = None,
                 rule_id: Optional[_builtins.str] = None,
                 start_stop: Optional[_builtins.bool] = None,
                 start_stop_variable: Optional[_builtins.str] = None):
        """
        :param Sequence[_builtins.str] groups: Use Server-group
        :param _builtins.str level: Privilege level when method is commands
                 - Choices: `1`, `15`
        :param _builtins.str method: Configure Accounting Method
                 - Choices: `commands`, `exec`, `network`, `system`
        :param _builtins.str rule_id: Configure Accounting Rule ID
        :param _builtins.bool start_stop: Record start and stop without waiting
                 - Default value: `true`
        :param _builtins.str start_stop_variable: Variable name
        """
        if groups is not None:
            pulumi.set(__self__, "groups", groups)
        if level is not None:
            pulumi.set(__self__, "level", level)
        if method is not None:
            pulumi.set(__self__, "method", method)
        if rule_id is not None:
            pulumi.set(__self__, "rule_id", rule_id)
        if start_stop is not None:
            pulumi.set(__self__, "start_stop", start_stop)
        if start_stop_variable is not None:
            pulumi.set(__self__, "start_stop_variable", start_stop_variable)

    @_builtins.property
    @pulumi.getter
    def groups(self) -> Optional[Sequence[_builtins.str]]:
        """
        Use Server-group
        """
        return pulumi.get(self, "groups")

    @_builtins.property
    @pulumi.getter
    def level(self) -> Optional[_builtins.str]:
        """
        Privilege level when method is commands
          - Choices: `1`, `15`
        """
        return pulumi.get(self, "level")

    @_builtins.property
    @pulumi.getter
    def method(self) -> Optional[_builtins.str]:
        """
        Configure Accounting Method
          - Choices: `commands`, `exec`, `network`, `system`
        """
        return pulumi.get(self, "method")

    @_builtins.property
    @pulumi.getter(name="ruleId")
    def rule_id(self) -> Optional[_builtins.str]:
        """
        Configure Accounting Rule ID
        """
        return pulumi.get(self, "rule_id")

    @_builtins.property
    @pulumi.getter(name="startStop")
    def start_stop(self) -> Optional[_builtins.bool]:
        """
        Record start and stop without waiting
          - Default value: `true`
        """
        return pulumi.get(self, "start_stop")

    @_builtins.property
    @pulumi.getter(name="startStopVariable")
    def start_stop_variable(self) -> Optional[_builtins.str]:
        """
        Variable name
        """
        return pulumi.get(self, "start_stop_variable")


@pulumi.output_type
class SystemAaaFeatureAuthorizationRule(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "ifAuthenticated":
            suggest = "if_authenticated"
        elif key == "ruleId":
            suggest = "rule_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SystemAaaFeatureAuthorizationRule. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SystemAaaFeatureAuthorizationRule.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SystemAaaFeatureAuthorizationRule.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 groups: Optional[Sequence[_builtins.str]] = None,
                 if_authenticated: Optional[_builtins.bool] = None,
                 level: Optional[_builtins.str] = None,
                 method: Optional[_builtins.str] = None,
                 rule_id: Optional[_builtins.str] = None):
        """
        :param Sequence[_builtins.str] groups: Use Server-group
        :param _builtins.bool if_authenticated: Succeed if user has authenticated
                 - Default value: `false`
        :param _builtins.str level: Privilege level when method is commands
                 - Choices: `1`, `15`
        :param _builtins.str method: Method
                 - Choices: `commands`
        :param _builtins.str rule_id: Configure Authorization Rule ID
        """
        if groups is not None:
            pulumi.set(__self__, "groups", groups)
        if if_authenticated is not None:
            pulumi.set(__self__, "if_authenticated", if_authenticated)
        if level is not None:
            pulumi.set(__self__, "level", level)
        if method is not None:
            pulumi.set(__self__, "method", method)
        if rule_id is not None:
            pulumi.set(__self__, "rule_id", rule_id)

    @_builtins.property
    @pulumi.getter
    def groups(self) -> Optional[Sequence[_builtins.str]]:
        """
        Use Server-group
        """
        return pulumi.get(self, "groups")

    @_builtins.property
    @pulumi.getter(name="ifAuthenticated")
    def if_authenticated(self) -> Optional[_builtins.bool]:
        """
        Succeed if user has authenticated
          - Default value: `false`
        """
        return pulumi.get(self, "if_authenticated")

    @_builtins.property
    @pulumi.getter
    def level(self) -> Optional[_builtins.str]:
        """
        Privilege level when method is commands
          - Choices: `1`, `15`
        """
        return pulumi.get(self, "level")

    @_builtins.property
    @pulumi.getter
    def method(self) -> Optional[_builtins.str]:
        """
        Method
          - Choices: `commands`
        """
        return pulumi.get(self, "method")

    @_builtins.property
    @pulumi.getter(name="ruleId")
    def rule_id(self) -> Optional[_builtins.str]:
        """
        Configure Authorization Rule ID
        """
        return pulumi.get(self, "rule_id")


@pulumi.output_type
class SystemAaaFeatureRadiusGroup(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "groupName":
            suggest = "group_name"
        elif key == "sourceInterface":
            suggest = "source_interface"
        elif key == "sourceInterfaceVariable":
            suggest = "source_interface_variable"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SystemAaaFeatureRadiusGroup. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SystemAaaFeatureRadiusGroup.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SystemAaaFeatureRadiusGroup.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 group_name: Optional[_builtins.str] = None,
                 servers: Optional[Sequence['outputs.SystemAaaFeatureRadiusGroupServer']] = None,
                 source_interface: Optional[_builtins.str] = None,
                 source_interface_variable: Optional[_builtins.str] = None,
                 vpn: Optional[_builtins.int] = None):
        """
        :param _builtins.str group_name: Set Radius server Group Name
        :param Sequence['SystemAaaFeatureRadiusGroupServerArgs'] servers: Configure the Radius server
        :param _builtins.str source_interface: Set interface to use to reach Radius server
        :param _builtins.str source_interface_variable: Variable name
        :param _builtins.int vpn: Set VPN in which Radius server is located
                 - Range: `0`-`65530`
                 - Default value: `0`
        """
        if group_name is not None:
            pulumi.set(__self__, "group_name", group_name)
        if servers is not None:
            pulumi.set(__self__, "servers", servers)
        if source_interface is not None:
            pulumi.set(__self__, "source_interface", source_interface)
        if source_interface_variable is not None:
            pulumi.set(__self__, "source_interface_variable", source_interface_variable)
        if vpn is not None:
            pulumi.set(__self__, "vpn", vpn)

    @_builtins.property
    @pulumi.getter(name="groupName")
    def group_name(self) -> Optional[_builtins.str]:
        """
        Set Radius server Group Name
        """
        return pulumi.get(self, "group_name")

    @_builtins.property
    @pulumi.getter
    def servers(self) -> Optional[Sequence['outputs.SystemAaaFeatureRadiusGroupServer']]:
        """
        Configure the Radius server
        """
        return pulumi.get(self, "servers")

    @_builtins.property
    @pulumi.getter(name="sourceInterface")
    def source_interface(self) -> Optional[_builtins.str]:
        """
        Set interface to use to reach Radius server
        """
        return pulumi.get(self, "source_interface")

    @_builtins.property
    @pulumi.getter(name="sourceInterfaceVariable")
    def source_interface_variable(self) -> Optional[_builtins.str]:
        """
        Variable name
        """
        return pulumi.get(self, "source_interface_variable")

    @_builtins.property
    @pulumi.getter
    def vpn(self) -> Optional[_builtins.int]:
        """
        Set VPN in which Radius server is located
          - Range: `0`-`65530`
          - Default value: `0`
        """
        return pulumi.get(self, "vpn")


@pulumi.output_type
class SystemAaaFeatureRadiusGroupServer(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "acctPort":
            suggest = "acct_port"
        elif key == "acctPortVariable":
            suggest = "acct_port_variable"
        elif key == "authPort":
            suggest = "auth_port"
        elif key == "authPortVariable":
            suggest = "auth_port_variable"
        elif key == "keyEnum":
            suggest = "key_enum"
        elif key == "keyType":
            suggest = "key_type"
        elif key == "keyTypeVariable":
            suggest = "key_type_variable"
        elif key == "retransmitVariable":
            suggest = "retransmit_variable"
        elif key == "secretKey":
            suggest = "secret_key"
        elif key == "secretKeyVariable":
            suggest = "secret_key_variable"
        elif key == "timeoutVariable":
            suggest = "timeout_variable"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SystemAaaFeatureRadiusGroupServer. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SystemAaaFeatureRadiusGroupServer.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SystemAaaFeatureRadiusGroupServer.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 acct_port: Optional[_builtins.int] = None,
                 acct_port_variable: Optional[_builtins.str] = None,
                 address: Optional[_builtins.str] = None,
                 auth_port: Optional[_builtins.int] = None,
                 auth_port_variable: Optional[_builtins.str] = None,
                 key: Optional[_builtins.str] = None,
                 key_enum: Optional[_builtins.str] = None,
                 key_type: Optional[_builtins.str] = None,
                 key_type_variable: Optional[_builtins.str] = None,
                 retransmit: Optional[_builtins.int] = None,
                 retransmit_variable: Optional[_builtins.str] = None,
                 secret_key: Optional[_builtins.str] = None,
                 secret_key_variable: Optional[_builtins.str] = None,
                 timeout: Optional[_builtins.int] = None,
                 timeout_variable: Optional[_builtins.str] = None):
        """
        :param _builtins.int acct_port: Set Accounting port to use to connect to Radius server
                 - Range: `1`-`65534`
                 - Default value: `1813`
        :param _builtins.str acct_port_variable: Variable name
        :param _builtins.str address: Set IP address of Radius server
        :param _builtins.int auth_port: Set Authentication port to use to connect to Radius server
                 - Range: `1`-`65534`
                 - Default value: `1812`
        :param _builtins.str auth_port_variable: Variable name
        :param _builtins.str key: Set the Radius server shared key
        :param _builtins.str key_enum: Type of encyption. To be used for type 6
                 - Choices: `6`, `7`
        :param _builtins.str key_type: key type
                 - Choices: `key`, `pac`
                 - Default value: `key`
        :param _builtins.str key_type_variable: Variable name
        :param _builtins.int retransmit: Configure how many times to contact this Radius server
                 - Range: `1`-`100`
                 - Default value: `3`
        :param _builtins.str retransmit_variable: Variable name
        :param _builtins.str secret_key: Set the Radius server shared type 7 encrypted key
        :param _builtins.str secret_key_variable: Variable name
        :param _builtins.int timeout: Configure how long to wait for replies from the Radius server
                 - Range: `1`-`1000`
                 - Default value: `5`
        :param _builtins.str timeout_variable: Variable name
        """
        if acct_port is not None:
            pulumi.set(__self__, "acct_port", acct_port)
        if acct_port_variable is not None:
            pulumi.set(__self__, "acct_port_variable", acct_port_variable)
        if address is not None:
            pulumi.set(__self__, "address", address)
        if auth_port is not None:
            pulumi.set(__self__, "auth_port", auth_port)
        if auth_port_variable is not None:
            pulumi.set(__self__, "auth_port_variable", auth_port_variable)
        if key is not None:
            pulumi.set(__self__, "key", key)
        if key_enum is not None:
            pulumi.set(__self__, "key_enum", key_enum)
        if key_type is not None:
            pulumi.set(__self__, "key_type", key_type)
        if key_type_variable is not None:
            pulumi.set(__self__, "key_type_variable", key_type_variable)
        if retransmit is not None:
            pulumi.set(__self__, "retransmit", retransmit)
        if retransmit_variable is not None:
            pulumi.set(__self__, "retransmit_variable", retransmit_variable)
        if secret_key is not None:
            pulumi.set(__self__, "secret_key", secret_key)
        if secret_key_variable is not None:
            pulumi.set(__self__, "secret_key_variable", secret_key_variable)
        if timeout is not None:
            pulumi.set(__self__, "timeout", timeout)
        if timeout_variable is not None:
            pulumi.set(__self__, "timeout_variable", timeout_variable)

    @_builtins.property
    @pulumi.getter(name="acctPort")
    def acct_port(self) -> Optional[_builtins.int]:
        """
        Set Accounting port to use to connect to Radius server
          - Range: `1`-`65534`
          - Default value: `1813`
        """
        return pulumi.get(self, "acct_port")

    @_builtins.property
    @pulumi.getter(name="acctPortVariable")
    def acct_port_variable(self) -> Optional[_builtins.str]:
        """
        Variable name
        """
        return pulumi.get(self, "acct_port_variable")

    @_builtins.property
    @pulumi.getter
    def address(self) -> Optional[_builtins.str]:
        """
        Set IP address of Radius server
        """
        return pulumi.get(self, "address")

    @_builtins.property
    @pulumi.getter(name="authPort")
    def auth_port(self) -> Optional[_builtins.int]:
        """
        Set Authentication port to use to connect to Radius server
          - Range: `1`-`65534`
          - Default value: `1812`
        """
        return pulumi.get(self, "auth_port")

    @_builtins.property
    @pulumi.getter(name="authPortVariable")
    def auth_port_variable(self) -> Optional[_builtins.str]:
        """
        Variable name
        """
        return pulumi.get(self, "auth_port_variable")

    @_builtins.property
    @pulumi.getter
    def key(self) -> Optional[_builtins.str]:
        """
        Set the Radius server shared key
        """
        return pulumi.get(self, "key")

    @_builtins.property
    @pulumi.getter(name="keyEnum")
    def key_enum(self) -> Optional[_builtins.str]:
        """
        Type of encyption. To be used for type 6
          - Choices: `6`, `7`
        """
        return pulumi.get(self, "key_enum")

    @_builtins.property
    @pulumi.getter(name="keyType")
    def key_type(self) -> Optional[_builtins.str]:
        """
        key type
          - Choices: `key`, `pac`
          - Default value: `key`
        """
        return pulumi.get(self, "key_type")

    @_builtins.property
    @pulumi.getter(name="keyTypeVariable")
    def key_type_variable(self) -> Optional[_builtins.str]:
        """
        Variable name
        """
        return pulumi.get(self, "key_type_variable")

    @_builtins.property
    @pulumi.getter
    def retransmit(self) -> Optional[_builtins.int]:
        """
        Configure how many times to contact this Radius server
          - Range: `1`-`100`
          - Default value: `3`
        """
        return pulumi.get(self, "retransmit")

    @_builtins.property
    @pulumi.getter(name="retransmitVariable")
    def retransmit_variable(self) -> Optional[_builtins.str]:
        """
        Variable name
        """
        return pulumi.get(self, "retransmit_variable")

    @_builtins.property
    @pulumi.getter(name="secretKey")
    def secret_key(self) -> Optional[_builtins.str]:
        """
        Set the Radius server shared type 7 encrypted key
        """
        return pulumi.get(self, "secret_key")

    @_builtins.property
    @pulumi.getter(name="secretKeyVariable")
    def secret_key_variable(self) -> Optional[_builtins.str]:
        """
        Variable name
        """
        return pulumi.get(self, "secret_key_variable")

    @_builtins.property
    @pulumi.getter
    def timeout(self) -> Optional[_builtins.int]:
        """
        Configure how long to wait for replies from the Radius server
          - Range: `1`-`1000`
          - Default value: `5`
        """
        return pulumi.get(self, "timeout")

    @_builtins.property
    @pulumi.getter(name="timeoutVariable")
    def timeout_variable(self) -> Optional[_builtins.str]:
        """
        Variable name
        """
        return pulumi.get(self, "timeout_variable")


@pulumi.output_type
class SystemAaaFeatureTacacsGroup(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "groupName":
            suggest = "group_name"
        elif key == "sourceInterface":
            suggest = "source_interface"
        elif key == "sourceInterfaceVariable":
            suggest = "source_interface_variable"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SystemAaaFeatureTacacsGroup. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SystemAaaFeatureTacacsGroup.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SystemAaaFeatureTacacsGroup.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 group_name: Optional[_builtins.str] = None,
                 servers: Optional[Sequence['outputs.SystemAaaFeatureTacacsGroupServer']] = None,
                 source_interface: Optional[_builtins.str] = None,
                 source_interface_variable: Optional[_builtins.str] = None,
                 vpn: Optional[_builtins.int] = None):
        """
        :param _builtins.str group_name: Set TACACS server Group Name
        :param Sequence['SystemAaaFeatureTacacsGroupServerArgs'] servers: Configure the TACACS server
        :param _builtins.str source_interface: Set interface to use to reach TACACS server
        :param _builtins.str source_interface_variable: Variable name
        :param _builtins.int vpn: Set VPN in which TACACS server is located
                 - Range: `0`-`65530`
                 - Default value: `0`
        """
        if group_name is not None:
            pulumi.set(__self__, "group_name", group_name)
        if servers is not None:
            pulumi.set(__self__, "servers", servers)
        if source_interface is not None:
            pulumi.set(__self__, "source_interface", source_interface)
        if source_interface_variable is not None:
            pulumi.set(__self__, "source_interface_variable", source_interface_variable)
        if vpn is not None:
            pulumi.set(__self__, "vpn", vpn)

    @_builtins.property
    @pulumi.getter(name="groupName")
    def group_name(self) -> Optional[_builtins.str]:
        """
        Set TACACS server Group Name
        """
        return pulumi.get(self, "group_name")

    @_builtins.property
    @pulumi.getter
    def servers(self) -> Optional[Sequence['outputs.SystemAaaFeatureTacacsGroupServer']]:
        """
        Configure the TACACS server
        """
        return pulumi.get(self, "servers")

    @_builtins.property
    @pulumi.getter(name="sourceInterface")
    def source_interface(self) -> Optional[_builtins.str]:
        """
        Set interface to use to reach TACACS server
        """
        return pulumi.get(self, "source_interface")

    @_builtins.property
    @pulumi.getter(name="sourceInterfaceVariable")
    def source_interface_variable(self) -> Optional[_builtins.str]:
        """
        Variable name
        """
        return pulumi.get(self, "source_interface_variable")

    @_builtins.property
    @pulumi.getter
    def vpn(self) -> Optional[_builtins.int]:
        """
        Set VPN in which TACACS server is located
          - Range: `0`-`65530`
          - Default value: `0`
        """
        return pulumi.get(self, "vpn")


@pulumi.output_type
class SystemAaaFeatureTacacsGroupServer(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "keyEnum":
            suggest = "key_enum"
        elif key == "portVariable":
            suggest = "port_variable"
        elif key == "secretKey":
            suggest = "secret_key"
        elif key == "secretKeyVariable":
            suggest = "secret_key_variable"
        elif key == "timeoutVariable":
            suggest = "timeout_variable"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SystemAaaFeatureTacacsGroupServer. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SystemAaaFeatureTacacsGroupServer.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SystemAaaFeatureTacacsGroupServer.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 address: Optional[_builtins.str] = None,
                 key: Optional[_builtins.str] = None,
                 key_enum: Optional[_builtins.str] = None,
                 port: Optional[_builtins.int] = None,
                 port_variable: Optional[_builtins.str] = None,
                 secret_key: Optional[_builtins.str] = None,
                 secret_key_variable: Optional[_builtins.str] = None,
                 timeout: Optional[_builtins.int] = None,
                 timeout_variable: Optional[_builtins.str] = None):
        """
        :param _builtins.str address: Set IP address of TACACS server
        :param _builtins.str key: Set the TACACS server shared key
        :param _builtins.str key_enum: Type of encyption. To be used for type 6
                 - Choices: `6`, `7`
        :param _builtins.int port: TACACS Port
                 - Range: `1`-`65535`
                 - Default value: `49`
        :param _builtins.str port_variable: Variable name
        :param _builtins.str secret_key: Set the TACACS server shared type 7 encrypted key
        :param _builtins.str secret_key_variable: Variable name
        :param _builtins.int timeout: Configure how long to wait for replies from the TACACS server
                 - Range: `1`-`1000`
                 - Default value: `5`
        :param _builtins.str timeout_variable: Variable name
        """
        if address is not None:
            pulumi.set(__self__, "address", address)
        if key is not None:
            pulumi.set(__self__, "key", key)
        if key_enum is not None:
            pulumi.set(__self__, "key_enum", key_enum)
        if port is not None:
            pulumi.set(__self__, "port", port)
        if port_variable is not None:
            pulumi.set(__self__, "port_variable", port_variable)
        if secret_key is not None:
            pulumi.set(__self__, "secret_key", secret_key)
        if secret_key_variable is not None:
            pulumi.set(__self__, "secret_key_variable", secret_key_variable)
        if timeout is not None:
            pulumi.set(__self__, "timeout", timeout)
        if timeout_variable is not None:
            pulumi.set(__self__, "timeout_variable", timeout_variable)

    @_builtins.property
    @pulumi.getter
    def address(self) -> Optional[_builtins.str]:
        """
        Set IP address of TACACS server
        """
        return pulumi.get(self, "address")

    @_builtins.property
    @pulumi.getter
    def key(self) -> Optional[_builtins.str]:
        """
        Set the TACACS server shared key
        """
        return pulumi.get(self, "key")

    @_builtins.property
    @pulumi.getter(name="keyEnum")
    def key_enum(self) -> Optional[_builtins.str]:
        """
        Type of encyption. To be used for type 6
          - Choices: `6`, `7`
        """
        return pulumi.get(self, "key_enum")

    @_builtins.property
    @pulumi.getter
    def port(self) -> Optional[_builtins.int]:
        """
        TACACS Port
          - Range: `1`-`65535`
          - Default value: `49`
        """
        return pulumi.get(self, "port")

    @_builtins.property
    @pulumi.getter(name="portVariable")
    def port_variable(self) -> Optional[_builtins.str]:
        """
        Variable name
        """
        return pulumi.get(self, "port_variable")

    @_builtins.property
    @pulumi.getter(name="secretKey")
    def secret_key(self) -> Optional[_builtins.str]:
        """
        Set the TACACS server shared type 7 encrypted key
        """
        return pulumi.get(self, "secret_key")

    @_builtins.property
    @pulumi.getter(name="secretKeyVariable")
    def secret_key_variable(self) -> Optional[_builtins.str]:
        """
        Variable name
        """
        return pulumi.get(self, "secret_key_variable")

    @_builtins.property
    @pulumi.getter
    def timeout(self) -> Optional[_builtins.int]:
        """
        Configure how long to wait for replies from the TACACS server
          - Range: `1`-`1000`
          - Default value: `5`
        """
        return pulumi.get(self, "timeout")

    @_builtins.property
    @pulumi.getter(name="timeoutVariable")
    def timeout_variable(self) -> Optional[_builtins.str]:
        """
        Variable name
        """
        return pulumi.get(self, "timeout_variable")


@pulumi.output_type
class SystemAaaFeatureUser(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "nameVariable":
            suggest = "name_variable"
        elif key == "passwordVariable":
            suggest = "password_variable"
        elif key == "privilegeVariable":
            suggest = "privilege_variable"
        elif key == "publicKeys":
            suggest = "public_keys"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SystemAaaFeatureUser. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SystemAaaFeatureUser.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SystemAaaFeatureUser.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 name: Optional[_builtins.str] = None,
                 name_variable: Optional[_builtins.str] = None,
                 password: Optional[_builtins.str] = None,
                 password_variable: Optional[_builtins.str] = None,
                 privilege: Optional[_builtins.str] = None,
                 privilege_variable: Optional[_builtins.str] = None,
                 public_keys: Optional[Sequence['outputs.SystemAaaFeatureUserPublicKey']] = None):
        """
        :param _builtins.str name: Set the username
        :param _builtins.str name_variable: Variable name
        :param _builtins.str password: Set the user password
        :param _builtins.str password_variable: Variable name
        :param _builtins.str privilege: Set Privilege Level for this user
                 - Choices: `1`, `15`
                 - Default value: `15`
        :param _builtins.str privilege_variable: Variable name
        :param Sequence['SystemAaaFeatureUserPublicKeyArgs'] public_keys: List of RSA public-keys per user
        """
        if name is not None:
            pulumi.set(__self__, "name", name)
        if name_variable is not None:
            pulumi.set(__self__, "name_variable", name_variable)
        if password is not None:
            pulumi.set(__self__, "password", password)
        if password_variable is not None:
            pulumi.set(__self__, "password_variable", password_variable)
        if privilege is not None:
            pulumi.set(__self__, "privilege", privilege)
        if privilege_variable is not None:
            pulumi.set(__self__, "privilege_variable", privilege_variable)
        if public_keys is not None:
            pulumi.set(__self__, "public_keys", public_keys)

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[_builtins.str]:
        """
        Set the username
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter(name="nameVariable")
    def name_variable(self) -> Optional[_builtins.str]:
        """
        Variable name
        """
        return pulumi.get(self, "name_variable")

    @_builtins.property
    @pulumi.getter
    def password(self) -> Optional[_builtins.str]:
        """
        Set the user password
        """
        return pulumi.get(self, "password")

    @_builtins.property
    @pulumi.getter(name="passwordVariable")
    def password_variable(self) -> Optional[_builtins.str]:
        """
        Variable name
        """
        return pulumi.get(self, "password_variable")

    @_builtins.property
    @pulumi.getter
    def privilege(self) -> Optional[_builtins.str]:
        """
        Set Privilege Level for this user
          - Choices: `1`, `15`
          - Default value: `15`
        """
        return pulumi.get(self, "privilege")

    @_builtins.property
    @pulumi.getter(name="privilegeVariable")
    def privilege_variable(self) -> Optional[_builtins.str]:
        """
        Variable name
        """
        return pulumi.get(self, "privilege_variable")

    @_builtins.property
    @pulumi.getter(name="publicKeys")
    def public_keys(self) -> Optional[Sequence['outputs.SystemAaaFeatureUserPublicKey']]:
        """
        List of RSA public-keys per user
        """
        return pulumi.get(self, "public_keys")


@pulumi.output_type
class SystemAaaFeatureUserPublicKey(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "keyString":
            suggest = "key_string"
        elif key == "keyType":
            suggest = "key_type"
        elif key == "keyTypeVariable":
            suggest = "key_type_variable"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SystemAaaFeatureUserPublicKey. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SystemAaaFeatureUserPublicKey.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SystemAaaFeatureUserPublicKey.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 key_string: Optional[_builtins.str] = None,
                 key_type: Optional[_builtins.str] = None,
                 key_type_variable: Optional[_builtins.str] = None):
        """
        :param _builtins.str key_string: Set the RSA key string
        :param _builtins.str key_type: Only RSA is supported
        :param _builtins.str key_type_variable: Variable name
        """
        if key_string is not None:
            pulumi.set(__self__, "key_string", key_string)
        if key_type is not None:
            pulumi.set(__self__, "key_type", key_type)
        if key_type_variable is not None:
            pulumi.set(__self__, "key_type_variable", key_type_variable)

    @_builtins.property
    @pulumi.getter(name="keyString")
    def key_string(self) -> Optional[_builtins.str]:
        """
        Set the RSA key string
        """
        return pulumi.get(self, "key_string")

    @_builtins.property
    @pulumi.getter(name="keyType")
    def key_type(self) -> Optional[_builtins.str]:
        """
        Only RSA is supported
        """
        return pulumi.get(self, "key_type")

    @_builtins.property
    @pulumi.getter(name="keyTypeVariable")
    def key_type_variable(self) -> Optional[_builtins.str]:
        """
        Variable name
        """
        return pulumi.get(self, "key_type_variable")


@pulumi.output_type
class SystemBasicFeatureAffinityPerVrf(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "affinityGroupNumber":
            suggest = "affinity_group_number"
        elif key == "affinityGroupNumberVariable":
            suggest = "affinity_group_number_variable"
        elif key == "vrfRange":
            suggest = "vrf_range"
        elif key == "vrfRangeVariable":
            suggest = "vrf_range_variable"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SystemBasicFeatureAffinityPerVrf. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SystemBasicFeatureAffinityPerVrf.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SystemBasicFeatureAffinityPerVrf.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 affinity_group_number: Optional[_builtins.int] = None,
                 affinity_group_number_variable: Optional[_builtins.str] = None,
                 vrf_range: Optional[_builtins.str] = None,
                 vrf_range_variable: Optional[_builtins.str] = None):
        """
        :param _builtins.int affinity_group_number: Affinity Group Number
                 - Range: `1`-`63`
        :param _builtins.str affinity_group_number_variable: Variable name
        :param _builtins.str vrf_range: Range of VRFs
        :param _builtins.str vrf_range_variable: Variable name
        """
        if affinity_group_number is not None:
            pulumi.set(__self__, "affinity_group_number", affinity_group_number)
        if affinity_group_number_variable is not None:
            pulumi.set(__self__, "affinity_group_number_variable", affinity_group_number_variable)
        if vrf_range is not None:
            pulumi.set(__self__, "vrf_range", vrf_range)
        if vrf_range_variable is not None:
            pulumi.set(__self__, "vrf_range_variable", vrf_range_variable)

    @_builtins.property
    @pulumi.getter(name="affinityGroupNumber")
    def affinity_group_number(self) -> Optional[_builtins.int]:
        """
        Affinity Group Number
          - Range: `1`-`63`
        """
        return pulumi.get(self, "affinity_group_number")

    @_builtins.property
    @pulumi.getter(name="affinityGroupNumberVariable")
    def affinity_group_number_variable(self) -> Optional[_builtins.str]:
        """
        Variable name
        """
        return pulumi.get(self, "affinity_group_number_variable")

    @_builtins.property
    @pulumi.getter(name="vrfRange")
    def vrf_range(self) -> Optional[_builtins.str]:
        """
        Range of VRFs
        """
        return pulumi.get(self, "vrf_range")

    @_builtins.property
    @pulumi.getter(name="vrfRangeVariable")
    def vrf_range_variable(self) -> Optional[_builtins.str]:
        """
        Variable name
        """
        return pulumi.get(self, "vrf_range_variable")


@pulumi.output_type
class SystemBasicFeatureGpsSmsMobileNumber(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "numberVariable":
            suggest = "number_variable"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SystemBasicFeatureGpsSmsMobileNumber. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SystemBasicFeatureGpsSmsMobileNumber.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SystemBasicFeatureGpsSmsMobileNumber.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 number: Optional[_builtins.str] = None,
                 number_variable: Optional[_builtins.str] = None):
        """
        :param _builtins.str number: Mobile number, ex: 1231234414
        :param _builtins.str number_variable: Variable name
        """
        if number is not None:
            pulumi.set(__self__, "number", number)
        if number_variable is not None:
            pulumi.set(__self__, "number_variable", number_variable)

    @_builtins.property
    @pulumi.getter
    def number(self) -> Optional[_builtins.str]:
        """
        Mobile number, ex: 1231234414
        """
        return pulumi.get(self, "number")

    @_builtins.property
    @pulumi.getter(name="numberVariable")
    def number_variable(self) -> Optional[_builtins.str]:
        """
        Variable name
        """
        return pulumi.get(self, "number_variable")


@pulumi.output_type
class SystemBfdFeatureColor(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "colorVariable":
            suggest = "color_variable"
        elif key == "dscpVariable":
            suggest = "dscp_variable"
        elif key == "helloInterval":
            suggest = "hello_interval"
        elif key == "helloIntervalVariable":
            suggest = "hello_interval_variable"
        elif key == "multiplierVariable":
            suggest = "multiplier_variable"
        elif key == "pmtuDiscovery":
            suggest = "pmtu_discovery"
        elif key == "pmtuDiscoveryVariable":
            suggest = "pmtu_discovery_variable"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SystemBfdFeatureColor. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SystemBfdFeatureColor.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SystemBfdFeatureColor.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 color: Optional[_builtins.str] = None,
                 color_variable: Optional[_builtins.str] = None,
                 dscp: Optional[_builtins.int] = None,
                 dscp_variable: Optional[_builtins.str] = None,
                 hello_interval: Optional[_builtins.int] = None,
                 hello_interval_variable: Optional[_builtins.str] = None,
                 multiplier: Optional[_builtins.int] = None,
                 multiplier_variable: Optional[_builtins.str] = None,
                 pmtu_discovery: Optional[_builtins.bool] = None,
                 pmtu_discovery_variable: Optional[_builtins.str] = None):
        """
        :param _builtins.str color: Color that identifies the WAN transport tunnel
                 - Choices: `default`, `mpls`, `metro-ethernet`, `biz-internet`, `public-internet`, `lte`, `3g`, `red`, `green`, `blue`, `gold`, `silver`, `bronze`, `custom1`, `custom2`, `custom3`, `private1`, `private2`, `private3`, `private4`, `private5`, `private6`
        :param _builtins.str color_variable: Variable name
        :param _builtins.int dscp: BFD Default DSCP value for tloc color
                 - Range: `0`-`63`
                 - Default value: `48`
        :param _builtins.str dscp_variable: Variable name
        :param _builtins.int hello_interval: Hello Interval (milliseconds)
                 - Range: `100`-`300000`
                 - Default value: `1000`
        :param _builtins.str hello_interval_variable: Variable name
        :param _builtins.int multiplier: Multiplier
                 - Range: `1`-`60`
                 - Default value: `7`
        :param _builtins.str multiplier_variable: Variable name
        :param _builtins.bool pmtu_discovery: Path MTU Discovery
                 - Default value: `true`
        :param _builtins.str pmtu_discovery_variable: Variable name
        """
        if color is not None:
            pulumi.set(__self__, "color", color)
        if color_variable is not None:
            pulumi.set(__self__, "color_variable", color_variable)
        if dscp is not None:
            pulumi.set(__self__, "dscp", dscp)
        if dscp_variable is not None:
            pulumi.set(__self__, "dscp_variable", dscp_variable)
        if hello_interval is not None:
            pulumi.set(__self__, "hello_interval", hello_interval)
        if hello_interval_variable is not None:
            pulumi.set(__self__, "hello_interval_variable", hello_interval_variable)
        if multiplier is not None:
            pulumi.set(__self__, "multiplier", multiplier)
        if multiplier_variable is not None:
            pulumi.set(__self__, "multiplier_variable", multiplier_variable)
        if pmtu_discovery is not None:
            pulumi.set(__self__, "pmtu_discovery", pmtu_discovery)
        if pmtu_discovery_variable is not None:
            pulumi.set(__self__, "pmtu_discovery_variable", pmtu_discovery_variable)

    @_builtins.property
    @pulumi.getter
    def color(self) -> Optional[_builtins.str]:
        """
        Color that identifies the WAN transport tunnel
          - Choices: `default`, `mpls`, `metro-ethernet`, `biz-internet`, `public-internet`, `lte`, `3g`, `red`, `green`, `blue`, `gold`, `silver`, `bronze`, `custom1`, `custom2`, `custom3`, `private1`, `private2`, `private3`, `private4`, `private5`, `private6`
        """
        return pulumi.get(self, "color")

    @_builtins.property
    @pulumi.getter(name="colorVariable")
    def color_variable(self) -> Optional[_builtins.str]:
        """
        Variable name
        """
        return pulumi.get(self, "color_variable")

    @_builtins.property
    @pulumi.getter
    def dscp(self) -> Optional[_builtins.int]:
        """
        BFD Default DSCP value for tloc color
          - Range: `0`-`63`
          - Default value: `48`
        """
        return pulumi.get(self, "dscp")

    @_builtins.property
    @pulumi.getter(name="dscpVariable")
    def dscp_variable(self) -> Optional[_builtins.str]:
        """
        Variable name
        """
        return pulumi.get(self, "dscp_variable")

    @_builtins.property
    @pulumi.getter(name="helloInterval")
    def hello_interval(self) -> Optional[_builtins.int]:
        """
        Hello Interval (milliseconds)
          - Range: `100`-`300000`
          - Default value: `1000`
        """
        return pulumi.get(self, "hello_interval")

    @_builtins.property
    @pulumi.getter(name="helloIntervalVariable")
    def hello_interval_variable(self) -> Optional[_builtins.str]:
        """
        Variable name
        """
        return pulumi.get(self, "hello_interval_variable")

    @_builtins.property
    @pulumi.getter
    def multiplier(self) -> Optional[_builtins.int]:
        """
        Multiplier
          - Range: `1`-`60`
          - Default value: `7`
        """
        return pulumi.get(self, "multiplier")

    @_builtins.property
    @pulumi.getter(name="multiplierVariable")
    def multiplier_variable(self) -> Optional[_builtins.str]:
        """
        Variable name
        """
        return pulumi.get(self, "multiplier_variable")

    @_builtins.property
    @pulumi.getter(name="pmtuDiscovery")
    def pmtu_discovery(self) -> Optional[_builtins.bool]:
        """
        Path MTU Discovery
          - Default value: `true`
        """
        return pulumi.get(self, "pmtu_discovery")

    @_builtins.property
    @pulumi.getter(name="pmtuDiscoveryVariable")
    def pmtu_discovery_variable(self) -> Optional[_builtins.str]:
        """
        Variable name
        """
        return pulumi.get(self, "pmtu_discovery_variable")


@pulumi.output_type
class SystemIpv4DeviceAccessFeatureSequence(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "baseAction":
            suggest = "base_action"
        elif key == "destinationDataPrefixListId":
            suggest = "destination_data_prefix_list_id"
        elif key == "destinationIpPrefixListVariable":
            suggest = "destination_ip_prefix_list_variable"
        elif key == "destinationIpPrefixLists":
            suggest = "destination_ip_prefix_lists"
        elif key == "deviceAccessPort":
            suggest = "device_access_port"
        elif key == "sourceDataPrefixListId":
            suggest = "source_data_prefix_list_id"
        elif key == "sourceIpPrefixListVariable":
            suggest = "source_ip_prefix_list_variable"
        elif key == "sourceIpPrefixLists":
            suggest = "source_ip_prefix_lists"
        elif key == "sourcePorts":
            suggest = "source_ports"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SystemIpv4DeviceAccessFeatureSequence. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SystemIpv4DeviceAccessFeatureSequence.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SystemIpv4DeviceAccessFeatureSequence.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 base_action: Optional[_builtins.str] = None,
                 destination_data_prefix_list_id: Optional[_builtins.str] = None,
                 destination_ip_prefix_list_variable: Optional[_builtins.str] = None,
                 destination_ip_prefix_lists: Optional[Sequence[_builtins.str]] = None,
                 device_access_port: Optional[_builtins.int] = None,
                 id: Optional[_builtins.int] = None,
                 name: Optional[_builtins.str] = None,
                 source_data_prefix_list_id: Optional[_builtins.str] = None,
                 source_ip_prefix_list_variable: Optional[_builtins.str] = None,
                 source_ip_prefix_lists: Optional[Sequence[_builtins.str]] = None,
                 source_ports: Optional[Sequence[_builtins.int]] = None):
        """
        :param _builtins.str base_action: Base Action
                 - Choices: `drop`, `accept`
        :param _builtins.str destination_ip_prefix_list_variable: Variable name
        :param Sequence[_builtins.str] destination_ip_prefix_lists: Destination Data IP Prefix List
        :param _builtins.int device_access_port: device access protocol
        :param _builtins.int id: Sequence Id
                 - Range: `1`-`65536`
        :param _builtins.str name: Sequence Name
        :param _builtins.str source_ip_prefix_list_variable: Variable name
        :param Sequence[_builtins.str] source_ip_prefix_lists: Source Data IP Prefix List
        :param Sequence[_builtins.int] source_ports: Source Port List
        """
        if base_action is not None:
            pulumi.set(__self__, "base_action", base_action)
        if destination_data_prefix_list_id is not None:
            pulumi.set(__self__, "destination_data_prefix_list_id", destination_data_prefix_list_id)
        if destination_ip_prefix_list_variable is not None:
            pulumi.set(__self__, "destination_ip_prefix_list_variable", destination_ip_prefix_list_variable)
        if destination_ip_prefix_lists is not None:
            pulumi.set(__self__, "destination_ip_prefix_lists", destination_ip_prefix_lists)
        if device_access_port is not None:
            pulumi.set(__self__, "device_access_port", device_access_port)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if source_data_prefix_list_id is not None:
            pulumi.set(__self__, "source_data_prefix_list_id", source_data_prefix_list_id)
        if source_ip_prefix_list_variable is not None:
            pulumi.set(__self__, "source_ip_prefix_list_variable", source_ip_prefix_list_variable)
        if source_ip_prefix_lists is not None:
            pulumi.set(__self__, "source_ip_prefix_lists", source_ip_prefix_lists)
        if source_ports is not None:
            pulumi.set(__self__, "source_ports", source_ports)

    @_builtins.property
    @pulumi.getter(name="baseAction")
    def base_action(self) -> Optional[_builtins.str]:
        """
        Base Action
          - Choices: `drop`, `accept`
        """
        return pulumi.get(self, "base_action")

    @_builtins.property
    @pulumi.getter(name="destinationDataPrefixListId")
    def destination_data_prefix_list_id(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "destination_data_prefix_list_id")

    @_builtins.property
    @pulumi.getter(name="destinationIpPrefixListVariable")
    def destination_ip_prefix_list_variable(self) -> Optional[_builtins.str]:
        """
        Variable name
        """
        return pulumi.get(self, "destination_ip_prefix_list_variable")

    @_builtins.property
    @pulumi.getter(name="destinationIpPrefixLists")
    def destination_ip_prefix_lists(self) -> Optional[Sequence[_builtins.str]]:
        """
        Destination Data IP Prefix List
        """
        return pulumi.get(self, "destination_ip_prefix_lists")

    @_builtins.property
    @pulumi.getter(name="deviceAccessPort")
    def device_access_port(self) -> Optional[_builtins.int]:
        """
        device access protocol
        """
        return pulumi.get(self, "device_access_port")

    @_builtins.property
    @pulumi.getter
    def id(self) -> Optional[_builtins.int]:
        """
        Sequence Id
          - Range: `1`-`65536`
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[_builtins.str]:
        """
        Sequence Name
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter(name="sourceDataPrefixListId")
    def source_data_prefix_list_id(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "source_data_prefix_list_id")

    @_builtins.property
    @pulumi.getter(name="sourceIpPrefixListVariable")
    def source_ip_prefix_list_variable(self) -> Optional[_builtins.str]:
        """
        Variable name
        """
        return pulumi.get(self, "source_ip_prefix_list_variable")

    @_builtins.property
    @pulumi.getter(name="sourceIpPrefixLists")
    def source_ip_prefix_lists(self) -> Optional[Sequence[_builtins.str]]:
        """
        Source Data IP Prefix List
        """
        return pulumi.get(self, "source_ip_prefix_lists")

    @_builtins.property
    @pulumi.getter(name="sourcePorts")
    def source_ports(self) -> Optional[Sequence[_builtins.int]]:
        """
        Source Port List
        """
        return pulumi.get(self, "source_ports")


@pulumi.output_type
class SystemIpv6DeviceAccessFeatureSequence(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "baseAction":
            suggest = "base_action"
        elif key == "destinationDataPrefixListId":
            suggest = "destination_data_prefix_list_id"
        elif key == "destinationIpPrefixListVariable":
            suggest = "destination_ip_prefix_list_variable"
        elif key == "destinationIpPrefixLists":
            suggest = "destination_ip_prefix_lists"
        elif key == "deviceAccessPort":
            suggest = "device_access_port"
        elif key == "sourceDataPrefixListId":
            suggest = "source_data_prefix_list_id"
        elif key == "sourceIpPrefixListVariable":
            suggest = "source_ip_prefix_list_variable"
        elif key == "sourceIpPrefixLists":
            suggest = "source_ip_prefix_lists"
        elif key == "sourcePorts":
            suggest = "source_ports"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SystemIpv6DeviceAccessFeatureSequence. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SystemIpv6DeviceAccessFeatureSequence.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SystemIpv6DeviceAccessFeatureSequence.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 base_action: Optional[_builtins.str] = None,
                 destination_data_prefix_list_id: Optional[_builtins.str] = None,
                 destination_ip_prefix_list_variable: Optional[_builtins.str] = None,
                 destination_ip_prefix_lists: Optional[Sequence[_builtins.str]] = None,
                 device_access_port: Optional[_builtins.int] = None,
                 id: Optional[_builtins.int] = None,
                 name: Optional[_builtins.str] = None,
                 source_data_prefix_list_id: Optional[_builtins.str] = None,
                 source_ip_prefix_list_variable: Optional[_builtins.str] = None,
                 source_ip_prefix_lists: Optional[Sequence[_builtins.str]] = None,
                 source_ports: Optional[Sequence[_builtins.int]] = None):
        """
        :param _builtins.str base_action: Base Action
                 - Choices: `drop`, `accept`
                 - Default value: `accept`
        :param _builtins.str destination_ip_prefix_list_variable: Variable name
        :param Sequence[_builtins.str] destination_ip_prefix_lists: Destination Data IP Prefix List
        :param _builtins.int device_access_port: device access protocol
        :param _builtins.int id: Sequence Id
                 - Range: `1`-`65536`
        :param _builtins.str name: Sequence Name
        :param _builtins.str source_ip_prefix_list_variable: Variable name
        :param Sequence[_builtins.str] source_ip_prefix_lists: Source Data IP Prefix List
        :param Sequence[_builtins.int] source_ports: Source Port List
        """
        if base_action is not None:
            pulumi.set(__self__, "base_action", base_action)
        if destination_data_prefix_list_id is not None:
            pulumi.set(__self__, "destination_data_prefix_list_id", destination_data_prefix_list_id)
        if destination_ip_prefix_list_variable is not None:
            pulumi.set(__self__, "destination_ip_prefix_list_variable", destination_ip_prefix_list_variable)
        if destination_ip_prefix_lists is not None:
            pulumi.set(__self__, "destination_ip_prefix_lists", destination_ip_prefix_lists)
        if device_access_port is not None:
            pulumi.set(__self__, "device_access_port", device_access_port)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if source_data_prefix_list_id is not None:
            pulumi.set(__self__, "source_data_prefix_list_id", source_data_prefix_list_id)
        if source_ip_prefix_list_variable is not None:
            pulumi.set(__self__, "source_ip_prefix_list_variable", source_ip_prefix_list_variable)
        if source_ip_prefix_lists is not None:
            pulumi.set(__self__, "source_ip_prefix_lists", source_ip_prefix_lists)
        if source_ports is not None:
            pulumi.set(__self__, "source_ports", source_ports)

    @_builtins.property
    @pulumi.getter(name="baseAction")
    def base_action(self) -> Optional[_builtins.str]:
        """
        Base Action
          - Choices: `drop`, `accept`
          - Default value: `accept`
        """
        return pulumi.get(self, "base_action")

    @_builtins.property
    @pulumi.getter(name="destinationDataPrefixListId")
    def destination_data_prefix_list_id(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "destination_data_prefix_list_id")

    @_builtins.property
    @pulumi.getter(name="destinationIpPrefixListVariable")
    def destination_ip_prefix_list_variable(self) -> Optional[_builtins.str]:
        """
        Variable name
        """
        return pulumi.get(self, "destination_ip_prefix_list_variable")

    @_builtins.property
    @pulumi.getter(name="destinationIpPrefixLists")
    def destination_ip_prefix_lists(self) -> Optional[Sequence[_builtins.str]]:
        """
        Destination Data IP Prefix List
        """
        return pulumi.get(self, "destination_ip_prefix_lists")

    @_builtins.property
    @pulumi.getter(name="deviceAccessPort")
    def device_access_port(self) -> Optional[_builtins.int]:
        """
        device access protocol
        """
        return pulumi.get(self, "device_access_port")

    @_builtins.property
    @pulumi.getter
    def id(self) -> Optional[_builtins.int]:
        """
        Sequence Id
          - Range: `1`-`65536`
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[_builtins.str]:
        """
        Sequence Name
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter(name="sourceDataPrefixListId")
    def source_data_prefix_list_id(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "source_data_prefix_list_id")

    @_builtins.property
    @pulumi.getter(name="sourceIpPrefixListVariable")
    def source_ip_prefix_list_variable(self) -> Optional[_builtins.str]:
        """
        Variable name
        """
        return pulumi.get(self, "source_ip_prefix_list_variable")

    @_builtins.property
    @pulumi.getter(name="sourceIpPrefixLists")
    def source_ip_prefix_lists(self) -> Optional[Sequence[_builtins.str]]:
        """
        Source Data IP Prefix List
        """
        return pulumi.get(self, "source_ip_prefix_lists")

    @_builtins.property
    @pulumi.getter(name="sourcePorts")
    def source_ports(self) -> Optional[Sequence[_builtins.int]]:
        """
        Source Port List
        """
        return pulumi.get(self, "source_ports")


@pulumi.output_type
class SystemLoggingFeatureIpv4Server(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "hostnameIp":
            suggest = "hostname_ip"
        elif key == "hostnameIpVariable":
            suggest = "hostname_ip_variable"
        elif key == "priorityVariable":
            suggest = "priority_variable"
        elif key == "sourceInterface":
            suggest = "source_interface"
        elif key == "sourceInterfaceVariable":
            suggest = "source_interface_variable"
        elif key == "tlsEnable":
            suggest = "tls_enable"
        elif key == "tlsEnableVariable":
            suggest = "tls_enable_variable"
        elif key == "tlsPropertiesCustomProfile":
            suggest = "tls_properties_custom_profile"
        elif key == "tlsPropertiesCustomProfileVariable":
            suggest = "tls_properties_custom_profile_variable"
        elif key == "tlsPropertiesProfile":
            suggest = "tls_properties_profile"
        elif key == "tlsPropertiesProfileVariable":
            suggest = "tls_properties_profile_variable"
        elif key == "vpnVariable":
            suggest = "vpn_variable"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SystemLoggingFeatureIpv4Server. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SystemLoggingFeatureIpv4Server.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SystemLoggingFeatureIpv4Server.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 hostname_ip: Optional[_builtins.str] = None,
                 hostname_ip_variable: Optional[_builtins.str] = None,
                 priority: Optional[_builtins.str] = None,
                 priority_variable: Optional[_builtins.str] = None,
                 source_interface: Optional[_builtins.str] = None,
                 source_interface_variable: Optional[_builtins.str] = None,
                 tls_enable: Optional[_builtins.bool] = None,
                 tls_enable_variable: Optional[_builtins.str] = None,
                 tls_properties_custom_profile: Optional[_builtins.bool] = None,
                 tls_properties_custom_profile_variable: Optional[_builtins.str] = None,
                 tls_properties_profile: Optional[_builtins.str] = None,
                 tls_properties_profile_variable: Optional[_builtins.str] = None,
                 vpn: Optional[_builtins.int] = None,
                 vpn_variable: Optional[_builtins.str] = None):
        """
        :param _builtins.str hostname_ip: Set hostname or IPv4 address of server
        :param _builtins.str hostname_ip_variable: Variable name
        :param _builtins.str priority: Set logging level for messages logged to server
                 - Choices: `informational`, `debugging`, `notice`, `warn`, `error`, `critical`, `alert`, `emergency`
                 - Default value: `informational`
        :param _builtins.str priority_variable: Variable name
        :param _builtins.str source_interface: Set interface to use to reach syslog server
        :param _builtins.str source_interface_variable: Variable name
        :param _builtins.bool tls_enable: Enable TLS Profile
                 - Default value: `false`
        :param _builtins.str tls_enable_variable: Variable name
        :param _builtins.bool tls_properties_custom_profile: Define custom profile
                 - Default value: `false`
        :param _builtins.str tls_properties_custom_profile_variable: Variable name
        :param _builtins.str tls_properties_profile: Configure a TLS profile
        :param _builtins.str tls_properties_profile_variable: Variable name
        :param _builtins.int vpn: Set hostname or IPv4 address of server
                 - Range: `0`-`65530`
                 - Default value: `0`
        :param _builtins.str vpn_variable: Variable name
        """
        if hostname_ip is not None:
            pulumi.set(__self__, "hostname_ip", hostname_ip)
        if hostname_ip_variable is not None:
            pulumi.set(__self__, "hostname_ip_variable", hostname_ip_variable)
        if priority is not None:
            pulumi.set(__self__, "priority", priority)
        if priority_variable is not None:
            pulumi.set(__self__, "priority_variable", priority_variable)
        if source_interface is not None:
            pulumi.set(__self__, "source_interface", source_interface)
        if source_interface_variable is not None:
            pulumi.set(__self__, "source_interface_variable", source_interface_variable)
        if tls_enable is not None:
            pulumi.set(__self__, "tls_enable", tls_enable)
        if tls_enable_variable is not None:
            pulumi.set(__self__, "tls_enable_variable", tls_enable_variable)
        if tls_properties_custom_profile is not None:
            pulumi.set(__self__, "tls_properties_custom_profile", tls_properties_custom_profile)
        if tls_properties_custom_profile_variable is not None:
            pulumi.set(__self__, "tls_properties_custom_profile_variable", tls_properties_custom_profile_variable)
        if tls_properties_profile is not None:
            pulumi.set(__self__, "tls_properties_profile", tls_properties_profile)
        if tls_properties_profile_variable is not None:
            pulumi.set(__self__, "tls_properties_profile_variable", tls_properties_profile_variable)
        if vpn is not None:
            pulumi.set(__self__, "vpn", vpn)
        if vpn_variable is not None:
            pulumi.set(__self__, "vpn_variable", vpn_variable)

    @_builtins.property
    @pulumi.getter(name="hostnameIp")
    def hostname_ip(self) -> Optional[_builtins.str]:
        """
        Set hostname or IPv4 address of server
        """
        return pulumi.get(self, "hostname_ip")

    @_builtins.property
    @pulumi.getter(name="hostnameIpVariable")
    def hostname_ip_variable(self) -> Optional[_builtins.str]:
        """
        Variable name
        """
        return pulumi.get(self, "hostname_ip_variable")

    @_builtins.property
    @pulumi.getter
    def priority(self) -> Optional[_builtins.str]:
        """
        Set logging level for messages logged to server
          - Choices: `informational`, `debugging`, `notice`, `warn`, `error`, `critical`, `alert`, `emergency`
          - Default value: `informational`
        """
        return pulumi.get(self, "priority")

    @_builtins.property
    @pulumi.getter(name="priorityVariable")
    def priority_variable(self) -> Optional[_builtins.str]:
        """
        Variable name
        """
        return pulumi.get(self, "priority_variable")

    @_builtins.property
    @pulumi.getter(name="sourceInterface")
    def source_interface(self) -> Optional[_builtins.str]:
        """
        Set interface to use to reach syslog server
        """
        return pulumi.get(self, "source_interface")

    @_builtins.property
    @pulumi.getter(name="sourceInterfaceVariable")
    def source_interface_variable(self) -> Optional[_builtins.str]:
        """
        Variable name
        """
        return pulumi.get(self, "source_interface_variable")

    @_builtins.property
    @pulumi.getter(name="tlsEnable")
    def tls_enable(self) -> Optional[_builtins.bool]:
        """
        Enable TLS Profile
          - Default value: `false`
        """
        return pulumi.get(self, "tls_enable")

    @_builtins.property
    @pulumi.getter(name="tlsEnableVariable")
    def tls_enable_variable(self) -> Optional[_builtins.str]:
        """
        Variable name
        """
        return pulumi.get(self, "tls_enable_variable")

    @_builtins.property
    @pulumi.getter(name="tlsPropertiesCustomProfile")
    def tls_properties_custom_profile(self) -> Optional[_builtins.bool]:
        """
        Define custom profile
          - Default value: `false`
        """
        return pulumi.get(self, "tls_properties_custom_profile")

    @_builtins.property
    @pulumi.getter(name="tlsPropertiesCustomProfileVariable")
    def tls_properties_custom_profile_variable(self) -> Optional[_builtins.str]:
        """
        Variable name
        """
        return pulumi.get(self, "tls_properties_custom_profile_variable")

    @_builtins.property
    @pulumi.getter(name="tlsPropertiesProfile")
    def tls_properties_profile(self) -> Optional[_builtins.str]:
        """
        Configure a TLS profile
        """
        return pulumi.get(self, "tls_properties_profile")

    @_builtins.property
    @pulumi.getter(name="tlsPropertiesProfileVariable")
    def tls_properties_profile_variable(self) -> Optional[_builtins.str]:
        """
        Variable name
        """
        return pulumi.get(self, "tls_properties_profile_variable")

    @_builtins.property
    @pulumi.getter
    def vpn(self) -> Optional[_builtins.int]:
        """
        Set hostname or IPv4 address of server
          - Range: `0`-`65530`
          - Default value: `0`
        """
        return pulumi.get(self, "vpn")

    @_builtins.property
    @pulumi.getter(name="vpnVariable")
    def vpn_variable(self) -> Optional[_builtins.str]:
        """
        Variable name
        """
        return pulumi.get(self, "vpn_variable")


@pulumi.output_type
class SystemLoggingFeatureIpv6Server(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "hostnameIp":
            suggest = "hostname_ip"
        elif key == "hostnameIpVariable":
            suggest = "hostname_ip_variable"
        elif key == "priorityVariable":
            suggest = "priority_variable"
        elif key == "sourceInterface":
            suggest = "source_interface"
        elif key == "sourceInterfaceVariable":
            suggest = "source_interface_variable"
        elif key == "tlsEnable":
            suggest = "tls_enable"
        elif key == "tlsEnableVariable":
            suggest = "tls_enable_variable"
        elif key == "tlsPropertiesCustomProfile":
            suggest = "tls_properties_custom_profile"
        elif key == "tlsPropertiesCustomProfileVariable":
            suggest = "tls_properties_custom_profile_variable"
        elif key == "tlsPropertiesProfile":
            suggest = "tls_properties_profile"
        elif key == "tlsPropertiesProfileVariable":
            suggest = "tls_properties_profile_variable"
        elif key == "vpnVariable":
            suggest = "vpn_variable"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SystemLoggingFeatureIpv6Server. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SystemLoggingFeatureIpv6Server.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SystemLoggingFeatureIpv6Server.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 hostname_ip: Optional[_builtins.str] = None,
                 hostname_ip_variable: Optional[_builtins.str] = None,
                 priority: Optional[_builtins.str] = None,
                 priority_variable: Optional[_builtins.str] = None,
                 source_interface: Optional[_builtins.str] = None,
                 source_interface_variable: Optional[_builtins.str] = None,
                 tls_enable: Optional[_builtins.bool] = None,
                 tls_enable_variable: Optional[_builtins.str] = None,
                 tls_properties_custom_profile: Optional[_builtins.bool] = None,
                 tls_properties_custom_profile_variable: Optional[_builtins.str] = None,
                 tls_properties_profile: Optional[_builtins.str] = None,
                 tls_properties_profile_variable: Optional[_builtins.str] = None,
                 vpn: Optional[_builtins.int] = None,
                 vpn_variable: Optional[_builtins.str] = None):
        """
        :param _builtins.str hostname_ip: Set IPv6 hostname or IPv6 address of server
        :param _builtins.str hostname_ip_variable: Variable name
        :param _builtins.str priority: Set logging level for messages logged to server
                 - Choices: `informational`, `debugging`, `notice`, `warn`, `error`, `critical`, `alert`, `emergency`
                 - Default value: `informational`
        :param _builtins.str priority_variable: Variable name
        :param _builtins.str source_interface: Set interface to use to reach syslog server
        :param _builtins.str source_interface_variable: Variable name
        :param _builtins.bool tls_enable: Enable TLS Profile
                 - Default value: `false`
        :param _builtins.str tls_enable_variable: Variable name
        :param _builtins.bool tls_properties_custom_profile: Define custom profile
                 - Default value: `false`
        :param _builtins.str tls_properties_custom_profile_variable: Variable name
        :param _builtins.str tls_properties_profile: Configure a TLS profile
        :param _builtins.str tls_properties_profile_variable: Variable name
        :param _builtins.int vpn: Set hostname or IPv4 address of server
                 - Range: `0`-`65530`
                 - Default value: `0`
        :param _builtins.str vpn_variable: Variable name
        """
        if hostname_ip is not None:
            pulumi.set(__self__, "hostname_ip", hostname_ip)
        if hostname_ip_variable is not None:
            pulumi.set(__self__, "hostname_ip_variable", hostname_ip_variable)
        if priority is not None:
            pulumi.set(__self__, "priority", priority)
        if priority_variable is not None:
            pulumi.set(__self__, "priority_variable", priority_variable)
        if source_interface is not None:
            pulumi.set(__self__, "source_interface", source_interface)
        if source_interface_variable is not None:
            pulumi.set(__self__, "source_interface_variable", source_interface_variable)
        if tls_enable is not None:
            pulumi.set(__self__, "tls_enable", tls_enable)
        if tls_enable_variable is not None:
            pulumi.set(__self__, "tls_enable_variable", tls_enable_variable)
        if tls_properties_custom_profile is not None:
            pulumi.set(__self__, "tls_properties_custom_profile", tls_properties_custom_profile)
        if tls_properties_custom_profile_variable is not None:
            pulumi.set(__self__, "tls_properties_custom_profile_variable", tls_properties_custom_profile_variable)
        if tls_properties_profile is not None:
            pulumi.set(__self__, "tls_properties_profile", tls_properties_profile)
        if tls_properties_profile_variable is not None:
            pulumi.set(__self__, "tls_properties_profile_variable", tls_properties_profile_variable)
        if vpn is not None:
            pulumi.set(__self__, "vpn", vpn)
        if vpn_variable is not None:
            pulumi.set(__self__, "vpn_variable", vpn_variable)

    @_builtins.property
    @pulumi.getter(name="hostnameIp")
    def hostname_ip(self) -> Optional[_builtins.str]:
        """
        Set IPv6 hostname or IPv6 address of server
        """
        return pulumi.get(self, "hostname_ip")

    @_builtins.property
    @pulumi.getter(name="hostnameIpVariable")
    def hostname_ip_variable(self) -> Optional[_builtins.str]:
        """
        Variable name
        """
        return pulumi.get(self, "hostname_ip_variable")

    @_builtins.property
    @pulumi.getter
    def priority(self) -> Optional[_builtins.str]:
        """
        Set logging level for messages logged to server
          - Choices: `informational`, `debugging`, `notice`, `warn`, `error`, `critical`, `alert`, `emergency`
          - Default value: `informational`
        """
        return pulumi.get(self, "priority")

    @_builtins.property
    @pulumi.getter(name="priorityVariable")
    def priority_variable(self) -> Optional[_builtins.str]:
        """
        Variable name
        """
        return pulumi.get(self, "priority_variable")

    @_builtins.property
    @pulumi.getter(name="sourceInterface")
    def source_interface(self) -> Optional[_builtins.str]:
        """
        Set interface to use to reach syslog server
        """
        return pulumi.get(self, "source_interface")

    @_builtins.property
    @pulumi.getter(name="sourceInterfaceVariable")
    def source_interface_variable(self) -> Optional[_builtins.str]:
        """
        Variable name
        """
        return pulumi.get(self, "source_interface_variable")

    @_builtins.property
    @pulumi.getter(name="tlsEnable")
    def tls_enable(self) -> Optional[_builtins.bool]:
        """
        Enable TLS Profile
          - Default value: `false`
        """
        return pulumi.get(self, "tls_enable")

    @_builtins.property
    @pulumi.getter(name="tlsEnableVariable")
    def tls_enable_variable(self) -> Optional[_builtins.str]:
        """
        Variable name
        """
        return pulumi.get(self, "tls_enable_variable")

    @_builtins.property
    @pulumi.getter(name="tlsPropertiesCustomProfile")
    def tls_properties_custom_profile(self) -> Optional[_builtins.bool]:
        """
        Define custom profile
          - Default value: `false`
        """
        return pulumi.get(self, "tls_properties_custom_profile")

    @_builtins.property
    @pulumi.getter(name="tlsPropertiesCustomProfileVariable")
    def tls_properties_custom_profile_variable(self) -> Optional[_builtins.str]:
        """
        Variable name
        """
        return pulumi.get(self, "tls_properties_custom_profile_variable")

    @_builtins.property
    @pulumi.getter(name="tlsPropertiesProfile")
    def tls_properties_profile(self) -> Optional[_builtins.str]:
        """
        Configure a TLS profile
        """
        return pulumi.get(self, "tls_properties_profile")

    @_builtins.property
    @pulumi.getter(name="tlsPropertiesProfileVariable")
    def tls_properties_profile_variable(self) -> Optional[_builtins.str]:
        """
        Variable name
        """
        return pulumi.get(self, "tls_properties_profile_variable")

    @_builtins.property
    @pulumi.getter
    def vpn(self) -> Optional[_builtins.int]:
        """
        Set hostname or IPv4 address of server
          - Range: `0`-`65530`
          - Default value: `0`
        """
        return pulumi.get(self, "vpn")

    @_builtins.property
    @pulumi.getter(name="vpnVariable")
    def vpn_variable(self) -> Optional[_builtins.str]:
        """
        Variable name
        """
        return pulumi.get(self, "vpn_variable")


@pulumi.output_type
class SystemLoggingFeatureTlsProfile(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "cipherSuites":
            suggest = "cipher_suites"
        elif key == "cipherSuitesVariable":
            suggest = "cipher_suites_variable"
        elif key == "profileVariable":
            suggest = "profile_variable"
        elif key == "tlsVersion":
            suggest = "tls_version"
        elif key == "tlsVersionVariable":
            suggest = "tls_version_variable"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SystemLoggingFeatureTlsProfile. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SystemLoggingFeatureTlsProfile.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SystemLoggingFeatureTlsProfile.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 cipher_suites: Optional[Sequence[_builtins.str]] = None,
                 cipher_suites_variable: Optional[_builtins.str] = None,
                 profile: Optional[_builtins.str] = None,
                 profile_variable: Optional[_builtins.str] = None,
                 tls_version: Optional[_builtins.str] = None,
                 tls_version_variable: Optional[_builtins.str] = None):
        """
        :param Sequence[_builtins.str] cipher_suites: Syslog secure server ciphersuites
        :param _builtins.str cipher_suites_variable: Variable name
        :param _builtins.str profile: Specify the name of the TLS profile
        :param _builtins.str profile_variable: Variable name
        :param _builtins.str tls_version: TLS Version
                 - Choices: `TLSv1.1`, `TLSv1.2`
                 - Default value: `TLSv1.1`
        :param _builtins.str tls_version_variable: Variable name
        """
        if cipher_suites is not None:
            pulumi.set(__self__, "cipher_suites", cipher_suites)
        if cipher_suites_variable is not None:
            pulumi.set(__self__, "cipher_suites_variable", cipher_suites_variable)
        if profile is not None:
            pulumi.set(__self__, "profile", profile)
        if profile_variable is not None:
            pulumi.set(__self__, "profile_variable", profile_variable)
        if tls_version is not None:
            pulumi.set(__self__, "tls_version", tls_version)
        if tls_version_variable is not None:
            pulumi.set(__self__, "tls_version_variable", tls_version_variable)

    @_builtins.property
    @pulumi.getter(name="cipherSuites")
    def cipher_suites(self) -> Optional[Sequence[_builtins.str]]:
        """
        Syslog secure server ciphersuites
        """
        return pulumi.get(self, "cipher_suites")

    @_builtins.property
    @pulumi.getter(name="cipherSuitesVariable")
    def cipher_suites_variable(self) -> Optional[_builtins.str]:
        """
        Variable name
        """
        return pulumi.get(self, "cipher_suites_variable")

    @_builtins.property
    @pulumi.getter
    def profile(self) -> Optional[_builtins.str]:
        """
        Specify the name of the TLS profile
        """
        return pulumi.get(self, "profile")

    @_builtins.property
    @pulumi.getter(name="profileVariable")
    def profile_variable(self) -> Optional[_builtins.str]:
        """
        Variable name
        """
        return pulumi.get(self, "profile_variable")

    @_builtins.property
    @pulumi.getter(name="tlsVersion")
    def tls_version(self) -> Optional[_builtins.str]:
        """
        TLS Version
          - Choices: `TLSv1.1`, `TLSv1.2`
          - Default value: `TLSv1.1`
        """
        return pulumi.get(self, "tls_version")

    @_builtins.property
    @pulumi.getter(name="tlsVersionVariable")
    def tls_version_variable(self) -> Optional[_builtins.str]:
        """
        Variable name
        """
        return pulumi.get(self, "tls_version_variable")


@pulumi.output_type
class SystemNtpFeatureAuthenticationKey(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "keyId":
            suggest = "key_id"
        elif key == "keyIdVariable":
            suggest = "key_id_variable"
        elif key == "md5Value":
            suggest = "md5_value"
        elif key == "md5ValueVariable":
            suggest = "md5_value_variable"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SystemNtpFeatureAuthenticationKey. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SystemNtpFeatureAuthenticationKey.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SystemNtpFeatureAuthenticationKey.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 key_id: Optional[_builtins.int] = None,
                 key_id_variable: Optional[_builtins.str] = None,
                 md5_value: Optional[_builtins.str] = None,
                 md5_value_variable: Optional[_builtins.str] = None):
        """
        :param _builtins.int key_id: MD5 authentication key ID
                 - Range: `1`-`65535`
        :param _builtins.str key_id_variable: Variable name
        :param _builtins.str md5_value: Enter cleartext or AES-encrypted MD5 authentication key
        :param _builtins.str md5_value_variable: Variable name
        """
        if key_id is not None:
            pulumi.set(__self__, "key_id", key_id)
        if key_id_variable is not None:
            pulumi.set(__self__, "key_id_variable", key_id_variable)
        if md5_value is not None:
            pulumi.set(__self__, "md5_value", md5_value)
        if md5_value_variable is not None:
            pulumi.set(__self__, "md5_value_variable", md5_value_variable)

    @_builtins.property
    @pulumi.getter(name="keyId")
    def key_id(self) -> Optional[_builtins.int]:
        """
        MD5 authentication key ID
          - Range: `1`-`65535`
        """
        return pulumi.get(self, "key_id")

    @_builtins.property
    @pulumi.getter(name="keyIdVariable")
    def key_id_variable(self) -> Optional[_builtins.str]:
        """
        Variable name
        """
        return pulumi.get(self, "key_id_variable")

    @_builtins.property
    @pulumi.getter(name="md5Value")
    def md5_value(self) -> Optional[_builtins.str]:
        """
        Enter cleartext or AES-encrypted MD5 authentication key
        """
        return pulumi.get(self, "md5_value")

    @_builtins.property
    @pulumi.getter(name="md5ValueVariable")
    def md5_value_variable(self) -> Optional[_builtins.str]:
        """
        Variable name
        """
        return pulumi.get(self, "md5_value_variable")


@pulumi.output_type
class SystemNtpFeatureServer(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "authenticationKey":
            suggest = "authentication_key"
        elif key == "authenticationKeyVariable":
            suggest = "authentication_key_variable"
        elif key == "hostnameIpAddress":
            suggest = "hostname_ip_address"
        elif key == "hostnameIpAddressVariable":
            suggest = "hostname_ip_address_variable"
        elif key == "ntpVersion":
            suggest = "ntp_version"
        elif key == "ntpVersionVariable":
            suggest = "ntp_version_variable"
        elif key == "preferThisNtpServer":
            suggest = "prefer_this_ntp_server"
        elif key == "preferThisNtpServerVariable":
            suggest = "prefer_this_ntp_server_variable"
        elif key == "sourceInterface":
            suggest = "source_interface"
        elif key == "sourceInterfaceVariable":
            suggest = "source_interface_variable"
        elif key == "vpnVariable":
            suggest = "vpn_variable"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SystemNtpFeatureServer. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SystemNtpFeatureServer.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SystemNtpFeatureServer.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 authentication_key: Optional[_builtins.int] = None,
                 authentication_key_variable: Optional[_builtins.str] = None,
                 hostname_ip_address: Optional[_builtins.str] = None,
                 hostname_ip_address_variable: Optional[_builtins.str] = None,
                 ntp_version: Optional[_builtins.int] = None,
                 ntp_version_variable: Optional[_builtins.str] = None,
                 prefer_this_ntp_server: Optional[_builtins.bool] = None,
                 prefer_this_ntp_server_variable: Optional[_builtins.str] = None,
                 source_interface: Optional[_builtins.str] = None,
                 source_interface_variable: Optional[_builtins.str] = None,
                 vpn: Optional[_builtins.int] = None,
                 vpn_variable: Optional[_builtins.str] = None):
        """
        :param _builtins.int authentication_key: Set authentication key for the server
                 - Range: `1`-`65535`
        :param _builtins.str authentication_key_variable: Variable name
        :param _builtins.str hostname_ip_address: Set hostname or IP address of server
        :param _builtins.str hostname_ip_address_variable: Variable name
        :param _builtins.int ntp_version: Set NTP version
                 - Range: `1`-`4`
                 - Default value: `4`
        :param _builtins.str ntp_version_variable: Variable name
        :param _builtins.bool prefer_this_ntp_server: Prefer this NTP server
                 - Default value: `false`
        :param _builtins.str prefer_this_ntp_server_variable: Variable name
        :param _builtins.str source_interface: Set interface to use to reach NTP server
        :param _builtins.str source_interface_variable: Variable name
        :param _builtins.int vpn: Set VPN in which NTP server is located
                 - Range: `0`-`65530`
                 - Default value: `0`
        :param _builtins.str vpn_variable: Variable name
        """
        if authentication_key is not None:
            pulumi.set(__self__, "authentication_key", authentication_key)
        if authentication_key_variable is not None:
            pulumi.set(__self__, "authentication_key_variable", authentication_key_variable)
        if hostname_ip_address is not None:
            pulumi.set(__self__, "hostname_ip_address", hostname_ip_address)
        if hostname_ip_address_variable is not None:
            pulumi.set(__self__, "hostname_ip_address_variable", hostname_ip_address_variable)
        if ntp_version is not None:
            pulumi.set(__self__, "ntp_version", ntp_version)
        if ntp_version_variable is not None:
            pulumi.set(__self__, "ntp_version_variable", ntp_version_variable)
        if prefer_this_ntp_server is not None:
            pulumi.set(__self__, "prefer_this_ntp_server", prefer_this_ntp_server)
        if prefer_this_ntp_server_variable is not None:
            pulumi.set(__self__, "prefer_this_ntp_server_variable", prefer_this_ntp_server_variable)
        if source_interface is not None:
            pulumi.set(__self__, "source_interface", source_interface)
        if source_interface_variable is not None:
            pulumi.set(__self__, "source_interface_variable", source_interface_variable)
        if vpn is not None:
            pulumi.set(__self__, "vpn", vpn)
        if vpn_variable is not None:
            pulumi.set(__self__, "vpn_variable", vpn_variable)

    @_builtins.property
    @pulumi.getter(name="authenticationKey")
    def authentication_key(self) -> Optional[_builtins.int]:
        """
        Set authentication key for the server
          - Range: `1`-`65535`
        """
        return pulumi.get(self, "authentication_key")

    @_builtins.property
    @pulumi.getter(name="authenticationKeyVariable")
    def authentication_key_variable(self) -> Optional[_builtins.str]:
        """
        Variable name
        """
        return pulumi.get(self, "authentication_key_variable")

    @_builtins.property
    @pulumi.getter(name="hostnameIpAddress")
    def hostname_ip_address(self) -> Optional[_builtins.str]:
        """
        Set hostname or IP address of server
        """
        return pulumi.get(self, "hostname_ip_address")

    @_builtins.property
    @pulumi.getter(name="hostnameIpAddressVariable")
    def hostname_ip_address_variable(self) -> Optional[_builtins.str]:
        """
        Variable name
        """
        return pulumi.get(self, "hostname_ip_address_variable")

    @_builtins.property
    @pulumi.getter(name="ntpVersion")
    def ntp_version(self) -> Optional[_builtins.int]:
        """
        Set NTP version
          - Range: `1`-`4`
          - Default value: `4`
        """
        return pulumi.get(self, "ntp_version")

    @_builtins.property
    @pulumi.getter(name="ntpVersionVariable")
    def ntp_version_variable(self) -> Optional[_builtins.str]:
        """
        Variable name
        """
        return pulumi.get(self, "ntp_version_variable")

    @_builtins.property
    @pulumi.getter(name="preferThisNtpServer")
    def prefer_this_ntp_server(self) -> Optional[_builtins.bool]:
        """
        Prefer this NTP server
          - Default value: `false`
        """
        return pulumi.get(self, "prefer_this_ntp_server")

    @_builtins.property
    @pulumi.getter(name="preferThisNtpServerVariable")
    def prefer_this_ntp_server_variable(self) -> Optional[_builtins.str]:
        """
        Variable name
        """
        return pulumi.get(self, "prefer_this_ntp_server_variable")

    @_builtins.property
    @pulumi.getter(name="sourceInterface")
    def source_interface(self) -> Optional[_builtins.str]:
        """
        Set interface to use to reach NTP server
        """
        return pulumi.get(self, "source_interface")

    @_builtins.property
    @pulumi.getter(name="sourceInterfaceVariable")
    def source_interface_variable(self) -> Optional[_builtins.str]:
        """
        Variable name
        """
        return pulumi.get(self, "source_interface_variable")

    @_builtins.property
    @pulumi.getter
    def vpn(self) -> Optional[_builtins.int]:
        """
        Set VPN in which NTP server is located
          - Range: `0`-`65530`
          - Default value: `0`
        """
        return pulumi.get(self, "vpn")

    @_builtins.property
    @pulumi.getter(name="vpnVariable")
    def vpn_variable(self) -> Optional[_builtins.str]:
        """
        Variable name
        """
        return pulumi.get(self, "vpn_variable")


@pulumi.output_type
class SystemSecurityFeatureKey(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "acceptAoMismatch":
            suggest = "accept_ao_mismatch"
        elif key == "acceptAoMismatchVariable":
            suggest = "accept_ao_mismatch_variable"
        elif key == "acceptLifeTimeDuration":
            suggest = "accept_life_time_duration"
        elif key == "acceptLifeTimeDurationVariable":
            suggest = "accept_life_time_duration_variable"
        elif key == "acceptLifeTimeExact":
            suggest = "accept_life_time_exact"
        elif key == "acceptLifeTimeInfinite":
            suggest = "accept_life_time_infinite"
        elif key == "acceptLifeTimeInfiniteVariable":
            suggest = "accept_life_time_infinite_variable"
        elif key == "acceptLifeTimeLocal":
            suggest = "accept_life_time_local"
        elif key == "acceptLifeTimeLocalVariable":
            suggest = "accept_life_time_local_variable"
        elif key == "acceptLifeTimeStartEpoch":
            suggest = "accept_life_time_start_epoch"
        elif key == "cryptoAlgorithm":
            suggest = "crypto_algorithm"
        elif key == "includeTcpOptions":
            suggest = "include_tcp_options"
        elif key == "includeTcpOptionsVariable":
            suggest = "include_tcp_options_variable"
        elif key == "keyString":
            suggest = "key_string"
        elif key == "keyStringVariable":
            suggest = "key_string_variable"
        elif key == "receiverId":
            suggest = "receiver_id"
        elif key == "receiverIdVariable":
            suggest = "receiver_id_variable"
        elif key == "sendId":
            suggest = "send_id"
        elif key == "sendIdVariable":
            suggest = "send_id_variable"
        elif key == "sendLifeTimeDuration":
            suggest = "send_life_time_duration"
        elif key == "sendLifeTimeDurationVariable":
            suggest = "send_life_time_duration_variable"
        elif key == "sendLifeTimeExact":
            suggest = "send_life_time_exact"
        elif key == "sendLifeTimeInfinite":
            suggest = "send_life_time_infinite"
        elif key == "sendLifeTimeInfiniteVariable":
            suggest = "send_life_time_infinite_variable"
        elif key == "sendLifeTimeLocal":
            suggest = "send_life_time_local"
        elif key == "sendLifeTimeLocalVariable":
            suggest = "send_life_time_local_variable"
        elif key == "sendLifeTimeStartEpoch":
            suggest = "send_life_time_start_epoch"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SystemSecurityFeatureKey. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SystemSecurityFeatureKey.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SystemSecurityFeatureKey.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 accept_ao_mismatch: Optional[_builtins.bool] = None,
                 accept_ao_mismatch_variable: Optional[_builtins.str] = None,
                 accept_life_time_duration: Optional[_builtins.int] = None,
                 accept_life_time_duration_variable: Optional[_builtins.str] = None,
                 accept_life_time_exact: Optional[_builtins.int] = None,
                 accept_life_time_infinite: Optional[_builtins.bool] = None,
                 accept_life_time_infinite_variable: Optional[_builtins.str] = None,
                 accept_life_time_local: Optional[_builtins.bool] = None,
                 accept_life_time_local_variable: Optional[_builtins.str] = None,
                 accept_life_time_start_epoch: Optional[_builtins.int] = None,
                 crypto_algorithm: Optional[_builtins.str] = None,
                 id: Optional[_builtins.int] = None,
                 include_tcp_options: Optional[_builtins.bool] = None,
                 include_tcp_options_variable: Optional[_builtins.str] = None,
                 key_string: Optional[_builtins.str] = None,
                 key_string_variable: Optional[_builtins.str] = None,
                 name: Optional[_builtins.str] = None,
                 receiver_id: Optional[_builtins.int] = None,
                 receiver_id_variable: Optional[_builtins.str] = None,
                 send_id: Optional[_builtins.int] = None,
                 send_id_variable: Optional[_builtins.str] = None,
                 send_life_time_duration: Optional[_builtins.int] = None,
                 send_life_time_duration_variable: Optional[_builtins.str] = None,
                 send_life_time_exact: Optional[_builtins.int] = None,
                 send_life_time_infinite: Optional[_builtins.bool] = None,
                 send_life_time_infinite_variable: Optional[_builtins.str] = None,
                 send_life_time_local: Optional[_builtins.bool] = None,
                 send_life_time_local_variable: Optional[_builtins.str] = None,
                 send_life_time_start_epoch: Optional[_builtins.int] = None):
        """
        :param _builtins.bool accept_ao_mismatch: Configure Accept AO Mismatch
                 - Default value: `false`
        :param _builtins.str accept_ao_mismatch_variable: Variable name
        :param _builtins.int accept_life_time_duration: Send lifetime Duration (seconds)
                 - Range: `1`-`2147483646`
        :param _builtins.str accept_life_time_duration_variable: Variable name
        :param _builtins.int accept_life_time_exact: Configure Key lifetime end time
        :param _builtins.bool accept_life_time_infinite: Infinite lifetime
        :param _builtins.str accept_life_time_infinite_variable: Variable name
        :param _builtins.bool accept_life_time_local: Configure Send lifetime Local
                 - Default value: `false`
        :param _builtins.str accept_life_time_local_variable: Variable name
        :param _builtins.int accept_life_time_start_epoch: Configure Key lifetime start time
        :param _builtins.str crypto_algorithm: Crypto Algorithm
                 - Choices: `aes-128-cmac`, `hmac-sha-1`, `hmac-sha-256`
        :param _builtins.int id: Select the Key ID
        :param _builtins.bool include_tcp_options: Configure Include TCP Options
                 - Default value: `false`
        :param _builtins.str include_tcp_options_variable: Variable name
        :param _builtins.str key_string: Specify the Key String
        :param _builtins.str key_string_variable: Variable name
        :param _builtins.str name: Select the chain name
        :param _builtins.int receiver_id: Specify the Receiver ID
                 - Range: `0`-`255`
        :param _builtins.str receiver_id_variable: Variable name
        :param _builtins.int send_id: Specify the Send ID
                 - Range: `0`-`255`
        :param _builtins.str send_id_variable: Variable name
        :param _builtins.int send_life_time_duration: Send lifetime Duration (seconds)
                 - Range: `1`-`2147483646`
        :param _builtins.str send_life_time_duration_variable: Variable name
        :param _builtins.int send_life_time_exact: Configure Key lifetime end time
        :param _builtins.bool send_life_time_infinite: Infinite lifetime
        :param _builtins.str send_life_time_infinite_variable: Variable name
        :param _builtins.bool send_life_time_local: Configure Send lifetime Local
                 - Default value: `false`
        :param _builtins.str send_life_time_local_variable: Variable name
        :param _builtins.int send_life_time_start_epoch: Configure Key lifetime start time
        """
        if accept_ao_mismatch is not None:
            pulumi.set(__self__, "accept_ao_mismatch", accept_ao_mismatch)
        if accept_ao_mismatch_variable is not None:
            pulumi.set(__self__, "accept_ao_mismatch_variable", accept_ao_mismatch_variable)
        if accept_life_time_duration is not None:
            pulumi.set(__self__, "accept_life_time_duration", accept_life_time_duration)
        if accept_life_time_duration_variable is not None:
            pulumi.set(__self__, "accept_life_time_duration_variable", accept_life_time_duration_variable)
        if accept_life_time_exact is not None:
            pulumi.set(__self__, "accept_life_time_exact", accept_life_time_exact)
        if accept_life_time_infinite is not None:
            pulumi.set(__self__, "accept_life_time_infinite", accept_life_time_infinite)
        if accept_life_time_infinite_variable is not None:
            pulumi.set(__self__, "accept_life_time_infinite_variable", accept_life_time_infinite_variable)
        if accept_life_time_local is not None:
            pulumi.set(__self__, "accept_life_time_local", accept_life_time_local)
        if accept_life_time_local_variable is not None:
            pulumi.set(__self__, "accept_life_time_local_variable", accept_life_time_local_variable)
        if accept_life_time_start_epoch is not None:
            pulumi.set(__self__, "accept_life_time_start_epoch", accept_life_time_start_epoch)
        if crypto_algorithm is not None:
            pulumi.set(__self__, "crypto_algorithm", crypto_algorithm)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if include_tcp_options is not None:
            pulumi.set(__self__, "include_tcp_options", include_tcp_options)
        if include_tcp_options_variable is not None:
            pulumi.set(__self__, "include_tcp_options_variable", include_tcp_options_variable)
        if key_string is not None:
            pulumi.set(__self__, "key_string", key_string)
        if key_string_variable is not None:
            pulumi.set(__self__, "key_string_variable", key_string_variable)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if receiver_id is not None:
            pulumi.set(__self__, "receiver_id", receiver_id)
        if receiver_id_variable is not None:
            pulumi.set(__self__, "receiver_id_variable", receiver_id_variable)
        if send_id is not None:
            pulumi.set(__self__, "send_id", send_id)
        if send_id_variable is not None:
            pulumi.set(__self__, "send_id_variable", send_id_variable)
        if send_life_time_duration is not None:
            pulumi.set(__self__, "send_life_time_duration", send_life_time_duration)
        if send_life_time_duration_variable is not None:
            pulumi.set(__self__, "send_life_time_duration_variable", send_life_time_duration_variable)
        if send_life_time_exact is not None:
            pulumi.set(__self__, "send_life_time_exact", send_life_time_exact)
        if send_life_time_infinite is not None:
            pulumi.set(__self__, "send_life_time_infinite", send_life_time_infinite)
        if send_life_time_infinite_variable is not None:
            pulumi.set(__self__, "send_life_time_infinite_variable", send_life_time_infinite_variable)
        if send_life_time_local is not None:
            pulumi.set(__self__, "send_life_time_local", send_life_time_local)
        if send_life_time_local_variable is not None:
            pulumi.set(__self__, "send_life_time_local_variable", send_life_time_local_variable)
        if send_life_time_start_epoch is not None:
            pulumi.set(__self__, "send_life_time_start_epoch", send_life_time_start_epoch)

    @_builtins.property
    @pulumi.getter(name="acceptAoMismatch")
    def accept_ao_mismatch(self) -> Optional[_builtins.bool]:
        """
        Configure Accept AO Mismatch
          - Default value: `false`
        """
        return pulumi.get(self, "accept_ao_mismatch")

    @_builtins.property
    @pulumi.getter(name="acceptAoMismatchVariable")
    def accept_ao_mismatch_variable(self) -> Optional[_builtins.str]:
        """
        Variable name
        """
        return pulumi.get(self, "accept_ao_mismatch_variable")

    @_builtins.property
    @pulumi.getter(name="acceptLifeTimeDuration")
    def accept_life_time_duration(self) -> Optional[_builtins.int]:
        """
        Send lifetime Duration (seconds)
          - Range: `1`-`2147483646`
        """
        return pulumi.get(self, "accept_life_time_duration")

    @_builtins.property
    @pulumi.getter(name="acceptLifeTimeDurationVariable")
    def accept_life_time_duration_variable(self) -> Optional[_builtins.str]:
        """
        Variable name
        """
        return pulumi.get(self, "accept_life_time_duration_variable")

    @_builtins.property
    @pulumi.getter(name="acceptLifeTimeExact")
    def accept_life_time_exact(self) -> Optional[_builtins.int]:
        """
        Configure Key lifetime end time
        """
        return pulumi.get(self, "accept_life_time_exact")

    @_builtins.property
    @pulumi.getter(name="acceptLifeTimeInfinite")
    def accept_life_time_infinite(self) -> Optional[_builtins.bool]:
        """
        Infinite lifetime
        """
        return pulumi.get(self, "accept_life_time_infinite")

    @_builtins.property
    @pulumi.getter(name="acceptLifeTimeInfiniteVariable")
    def accept_life_time_infinite_variable(self) -> Optional[_builtins.str]:
        """
        Variable name
        """
        return pulumi.get(self, "accept_life_time_infinite_variable")

    @_builtins.property
    @pulumi.getter(name="acceptLifeTimeLocal")
    def accept_life_time_local(self) -> Optional[_builtins.bool]:
        """
        Configure Send lifetime Local
          - Default value: `false`
        """
        return pulumi.get(self, "accept_life_time_local")

    @_builtins.property
    @pulumi.getter(name="acceptLifeTimeLocalVariable")
    def accept_life_time_local_variable(self) -> Optional[_builtins.str]:
        """
        Variable name
        """
        return pulumi.get(self, "accept_life_time_local_variable")

    @_builtins.property
    @pulumi.getter(name="acceptLifeTimeStartEpoch")
    def accept_life_time_start_epoch(self) -> Optional[_builtins.int]:
        """
        Configure Key lifetime start time
        """
        return pulumi.get(self, "accept_life_time_start_epoch")

    @_builtins.property
    @pulumi.getter(name="cryptoAlgorithm")
    def crypto_algorithm(self) -> Optional[_builtins.str]:
        """
        Crypto Algorithm
          - Choices: `aes-128-cmac`, `hmac-sha-1`, `hmac-sha-256`
        """
        return pulumi.get(self, "crypto_algorithm")

    @_builtins.property
    @pulumi.getter
    def id(self) -> Optional[_builtins.int]:
        """
        Select the Key ID
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter(name="includeTcpOptions")
    def include_tcp_options(self) -> Optional[_builtins.bool]:
        """
        Configure Include TCP Options
          - Default value: `false`
        """
        return pulumi.get(self, "include_tcp_options")

    @_builtins.property
    @pulumi.getter(name="includeTcpOptionsVariable")
    def include_tcp_options_variable(self) -> Optional[_builtins.str]:
        """
        Variable name
        """
        return pulumi.get(self, "include_tcp_options_variable")

    @_builtins.property
    @pulumi.getter(name="keyString")
    def key_string(self) -> Optional[_builtins.str]:
        """
        Specify the Key String
        """
        return pulumi.get(self, "key_string")

    @_builtins.property
    @pulumi.getter(name="keyStringVariable")
    def key_string_variable(self) -> Optional[_builtins.str]:
        """
        Variable name
        """
        return pulumi.get(self, "key_string_variable")

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[_builtins.str]:
        """
        Select the chain name
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter(name="receiverId")
    def receiver_id(self) -> Optional[_builtins.int]:
        """
        Specify the Receiver ID
          - Range: `0`-`255`
        """
        return pulumi.get(self, "receiver_id")

    @_builtins.property
    @pulumi.getter(name="receiverIdVariable")
    def receiver_id_variable(self) -> Optional[_builtins.str]:
        """
        Variable name
        """
        return pulumi.get(self, "receiver_id_variable")

    @_builtins.property
    @pulumi.getter(name="sendId")
    def send_id(self) -> Optional[_builtins.int]:
        """
        Specify the Send ID
          - Range: `0`-`255`
        """
        return pulumi.get(self, "send_id")

    @_builtins.property
    @pulumi.getter(name="sendIdVariable")
    def send_id_variable(self) -> Optional[_builtins.str]:
        """
        Variable name
        """
        return pulumi.get(self, "send_id_variable")

    @_builtins.property
    @pulumi.getter(name="sendLifeTimeDuration")
    def send_life_time_duration(self) -> Optional[_builtins.int]:
        """
        Send lifetime Duration (seconds)
          - Range: `1`-`2147483646`
        """
        return pulumi.get(self, "send_life_time_duration")

    @_builtins.property
    @pulumi.getter(name="sendLifeTimeDurationVariable")
    def send_life_time_duration_variable(self) -> Optional[_builtins.str]:
        """
        Variable name
        """
        return pulumi.get(self, "send_life_time_duration_variable")

    @_builtins.property
    @pulumi.getter(name="sendLifeTimeExact")
    def send_life_time_exact(self) -> Optional[_builtins.int]:
        """
        Configure Key lifetime end time
        """
        return pulumi.get(self, "send_life_time_exact")

    @_builtins.property
    @pulumi.getter(name="sendLifeTimeInfinite")
    def send_life_time_infinite(self) -> Optional[_builtins.bool]:
        """
        Infinite lifetime
        """
        return pulumi.get(self, "send_life_time_infinite")

    @_builtins.property
    @pulumi.getter(name="sendLifeTimeInfiniteVariable")
    def send_life_time_infinite_variable(self) -> Optional[_builtins.str]:
        """
        Variable name
        """
        return pulumi.get(self, "send_life_time_infinite_variable")

    @_builtins.property
    @pulumi.getter(name="sendLifeTimeLocal")
    def send_life_time_local(self) -> Optional[_builtins.bool]:
        """
        Configure Send lifetime Local
          - Default value: `false`
        """
        return pulumi.get(self, "send_life_time_local")

    @_builtins.property
    @pulumi.getter(name="sendLifeTimeLocalVariable")
    def send_life_time_local_variable(self) -> Optional[_builtins.str]:
        """
        Variable name
        """
        return pulumi.get(self, "send_life_time_local_variable")

    @_builtins.property
    @pulumi.getter(name="sendLifeTimeStartEpoch")
    def send_life_time_start_epoch(self) -> Optional[_builtins.int]:
        """
        Configure Key lifetime start time
        """
        return pulumi.get(self, "send_life_time_start_epoch")


@pulumi.output_type
class SystemSecurityFeatureKeychain(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "keyChainName":
            suggest = "key_chain_name"
        elif key == "keyId":
            suggest = "key_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SystemSecurityFeatureKeychain. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SystemSecurityFeatureKeychain.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SystemSecurityFeatureKeychain.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 key_chain_name: Optional[_builtins.str] = None,
                 key_id: Optional[_builtins.int] = None):
        """
        :param _builtins.str key_chain_name: Specify the name of the Keychain
        :param _builtins.int key_id: Specify the Key ID
                 - Range: `0`-`2147483647`
        """
        if key_chain_name is not None:
            pulumi.set(__self__, "key_chain_name", key_chain_name)
        if key_id is not None:
            pulumi.set(__self__, "key_id", key_id)

    @_builtins.property
    @pulumi.getter(name="keyChainName")
    def key_chain_name(self) -> Optional[_builtins.str]:
        """
        Specify the name of the Keychain
        """
        return pulumi.get(self, "key_chain_name")

    @_builtins.property
    @pulumi.getter(name="keyId")
    def key_id(self) -> Optional[_builtins.int]:
        """
        Specify the Key ID
          - Range: `0`-`2147483647`
        """
        return pulumi.get(self, "key_id")


@pulumi.output_type
class SystemSnmpFeatureCommunity(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "authorizationVariable":
            suggest = "authorization_variable"
        elif key == "userLabel":
            suggest = "user_label"
        elif key == "viewVariable":
            suggest = "view_variable"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SystemSnmpFeatureCommunity. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SystemSnmpFeatureCommunity.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SystemSnmpFeatureCommunity.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 authorization: Optional[_builtins.str] = None,
                 authorization_variable: Optional[_builtins.str] = None,
                 name: Optional[_builtins.str] = None,
                 user_label: Optional[_builtins.str] = None,
                 view: Optional[_builtins.str] = None,
                 view_variable: Optional[_builtins.str] = None):
        """
        :param _builtins.str authorization: Configure access permissions
                 - Choices: `read-only`, `read-write`
        :param _builtins.str authorization_variable: Variable name
        :param _builtins.str name: Set name of the SNMP community
        :param _builtins.str user_label: Set user label of the SNMP community
        :param _builtins.str view: Set name of the SNMP view
        :param _builtins.str view_variable: Variable name
        """
        if authorization is not None:
            pulumi.set(__self__, "authorization", authorization)
        if authorization_variable is not None:
            pulumi.set(__self__, "authorization_variable", authorization_variable)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if user_label is not None:
            pulumi.set(__self__, "user_label", user_label)
        if view is not None:
            pulumi.set(__self__, "view", view)
        if view_variable is not None:
            pulumi.set(__self__, "view_variable", view_variable)

    @_builtins.property
    @pulumi.getter
    def authorization(self) -> Optional[_builtins.str]:
        """
        Configure access permissions
          - Choices: `read-only`, `read-write`
        """
        return pulumi.get(self, "authorization")

    @_builtins.property
    @pulumi.getter(name="authorizationVariable")
    def authorization_variable(self) -> Optional[_builtins.str]:
        """
        Variable name
        """
        return pulumi.get(self, "authorization_variable")

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[_builtins.str]:
        """
        Set name of the SNMP community
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter(name="userLabel")
    def user_label(self) -> Optional[_builtins.str]:
        """
        Set user label of the SNMP community
        """
        return pulumi.get(self, "user_label")

    @_builtins.property
    @pulumi.getter
    def view(self) -> Optional[_builtins.str]:
        """
        Set name of the SNMP view
        """
        return pulumi.get(self, "view")

    @_builtins.property
    @pulumi.getter(name="viewVariable")
    def view_variable(self) -> Optional[_builtins.str]:
        """
        Variable name
        """
        return pulumi.get(self, "view_variable")


@pulumi.output_type
class SystemSnmpFeatureGroup(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "securityLevel":
            suggest = "security_level"
        elif key == "viewVariable":
            suggest = "view_variable"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SystemSnmpFeatureGroup. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SystemSnmpFeatureGroup.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SystemSnmpFeatureGroup.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 name: Optional[_builtins.str] = None,
                 security_level: Optional[_builtins.str] = None,
                 view: Optional[_builtins.str] = None,
                 view_variable: Optional[_builtins.str] = None):
        """
        :param _builtins.str name: Name of the SNMP group
        :param _builtins.str security_level: Configure security level
                 - Choices: `no-auth-no-priv`, `auth-no-priv`, `auth-priv`
        :param _builtins.str view: Name of the SNMP view
        :param _builtins.str view_variable: Variable name
        """
        if name is not None:
            pulumi.set(__self__, "name", name)
        if security_level is not None:
            pulumi.set(__self__, "security_level", security_level)
        if view is not None:
            pulumi.set(__self__, "view", view)
        if view_variable is not None:
            pulumi.set(__self__, "view_variable", view_variable)

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[_builtins.str]:
        """
        Name of the SNMP group
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter(name="securityLevel")
    def security_level(self) -> Optional[_builtins.str]:
        """
        Configure security level
          - Choices: `no-auth-no-priv`, `auth-no-priv`, `auth-priv`
        """
        return pulumi.get(self, "security_level")

    @_builtins.property
    @pulumi.getter
    def view(self) -> Optional[_builtins.str]:
        """
        Name of the SNMP view
        """
        return pulumi.get(self, "view")

    @_builtins.property
    @pulumi.getter(name="viewVariable")
    def view_variable(self) -> Optional[_builtins.str]:
        """
        Variable name
        """
        return pulumi.get(self, "view_variable")


@pulumi.output_type
class SystemSnmpFeatureTrapTargetServer(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "ipVariable":
            suggest = "ip_variable"
        elif key == "portVariable":
            suggest = "port_variable"
        elif key == "sourceInterface":
            suggest = "source_interface"
        elif key == "sourceInterfaceVariable":
            suggest = "source_interface_variable"
        elif key == "userLabel":
            suggest = "user_label"
        elif key == "userVariable":
            suggest = "user_variable"
        elif key == "vpnId":
            suggest = "vpn_id"
        elif key == "vpnIdVariable":
            suggest = "vpn_id_variable"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SystemSnmpFeatureTrapTargetServer. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SystemSnmpFeatureTrapTargetServer.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SystemSnmpFeatureTrapTargetServer.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 ip: Optional[_builtins.str] = None,
                 ip_variable: Optional[_builtins.str] = None,
                 port: Optional[_builtins.int] = None,
                 port_variable: Optional[_builtins.str] = None,
                 source_interface: Optional[_builtins.str] = None,
                 source_interface_variable: Optional[_builtins.str] = None,
                 user: Optional[_builtins.str] = None,
                 user_label: Optional[_builtins.str] = None,
                 user_variable: Optional[_builtins.str] = None,
                 vpn_id: Optional[_builtins.int] = None,
                 vpn_id_variable: Optional[_builtins.str] = None):
        """
        :param _builtins.str ip: Set IPv4/IPv6 address of SNMP server
        :param _builtins.str ip_variable: Variable name
        :param _builtins.int port: Set UDP port number to connect to SNMP server
                 - Range: `1`-`65535`
        :param _builtins.str port_variable: Variable name
        :param _builtins.str source_interface: Source interface for outgoing SNMP traps
        :param _builtins.str source_interface_variable: Variable name
        :param _builtins.str user: Set name of the SNMP user
        :param _builtins.str user_label: Set user label of the SNMP community
        :param _builtins.str user_variable: Variable name
        :param _builtins.int vpn_id: Set VPN in which SNMP server is located
                 - Range: `0`-`65530`
        :param _builtins.str vpn_id_variable: Variable name
        """
        if ip is not None:
            pulumi.set(__self__, "ip", ip)
        if ip_variable is not None:
            pulumi.set(__self__, "ip_variable", ip_variable)
        if port is not None:
            pulumi.set(__self__, "port", port)
        if port_variable is not None:
            pulumi.set(__self__, "port_variable", port_variable)
        if source_interface is not None:
            pulumi.set(__self__, "source_interface", source_interface)
        if source_interface_variable is not None:
            pulumi.set(__self__, "source_interface_variable", source_interface_variable)
        if user is not None:
            pulumi.set(__self__, "user", user)
        if user_label is not None:
            pulumi.set(__self__, "user_label", user_label)
        if user_variable is not None:
            pulumi.set(__self__, "user_variable", user_variable)
        if vpn_id is not None:
            pulumi.set(__self__, "vpn_id", vpn_id)
        if vpn_id_variable is not None:
            pulumi.set(__self__, "vpn_id_variable", vpn_id_variable)

    @_builtins.property
    @pulumi.getter
    def ip(self) -> Optional[_builtins.str]:
        """
        Set IPv4/IPv6 address of SNMP server
        """
        return pulumi.get(self, "ip")

    @_builtins.property
    @pulumi.getter(name="ipVariable")
    def ip_variable(self) -> Optional[_builtins.str]:
        """
        Variable name
        """
        return pulumi.get(self, "ip_variable")

    @_builtins.property
    @pulumi.getter
    def port(self) -> Optional[_builtins.int]:
        """
        Set UDP port number to connect to SNMP server
          - Range: `1`-`65535`
        """
        return pulumi.get(self, "port")

    @_builtins.property
    @pulumi.getter(name="portVariable")
    def port_variable(self) -> Optional[_builtins.str]:
        """
        Variable name
        """
        return pulumi.get(self, "port_variable")

    @_builtins.property
    @pulumi.getter(name="sourceInterface")
    def source_interface(self) -> Optional[_builtins.str]:
        """
        Source interface for outgoing SNMP traps
        """
        return pulumi.get(self, "source_interface")

    @_builtins.property
    @pulumi.getter(name="sourceInterfaceVariable")
    def source_interface_variable(self) -> Optional[_builtins.str]:
        """
        Variable name
        """
        return pulumi.get(self, "source_interface_variable")

    @_builtins.property
    @pulumi.getter
    def user(self) -> Optional[_builtins.str]:
        """
        Set name of the SNMP user
        """
        return pulumi.get(self, "user")

    @_builtins.property
    @pulumi.getter(name="userLabel")
    def user_label(self) -> Optional[_builtins.str]:
        """
        Set user label of the SNMP community
        """
        return pulumi.get(self, "user_label")

    @_builtins.property
    @pulumi.getter(name="userVariable")
    def user_variable(self) -> Optional[_builtins.str]:
        """
        Variable name
        """
        return pulumi.get(self, "user_variable")

    @_builtins.property
    @pulumi.getter(name="vpnId")
    def vpn_id(self) -> Optional[_builtins.int]:
        """
        Set VPN in which SNMP server is located
          - Range: `0`-`65530`
        """
        return pulumi.get(self, "vpn_id")

    @_builtins.property
    @pulumi.getter(name="vpnIdVariable")
    def vpn_id_variable(self) -> Optional[_builtins.str]:
        """
        Variable name
        """
        return pulumi.get(self, "vpn_id_variable")


@pulumi.output_type
class SystemSnmpFeatureUser(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "authenticationPassword":
            suggest = "authentication_password"
        elif key == "authenticationPasswordVariable":
            suggest = "authentication_password_variable"
        elif key == "authenticationProtocol":
            suggest = "authentication_protocol"
        elif key == "authenticationProtocolVariable":
            suggest = "authentication_protocol_variable"
        elif key == "groupVariable":
            suggest = "group_variable"
        elif key == "privacyPassword":
            suggest = "privacy_password"
        elif key == "privacyPasswordVariable":
            suggest = "privacy_password_variable"
        elif key == "privacyProtocol":
            suggest = "privacy_protocol"
        elif key == "privacyProtocolVariable":
            suggest = "privacy_protocol_variable"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SystemSnmpFeatureUser. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SystemSnmpFeatureUser.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SystemSnmpFeatureUser.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 authentication_password: Optional[_builtins.str] = None,
                 authentication_password_variable: Optional[_builtins.str] = None,
                 authentication_protocol: Optional[_builtins.str] = None,
                 authentication_protocol_variable: Optional[_builtins.str] = None,
                 group: Optional[_builtins.str] = None,
                 group_variable: Optional[_builtins.str] = None,
                 name: Optional[_builtins.str] = None,
                 privacy_password: Optional[_builtins.str] = None,
                 privacy_password_variable: Optional[_builtins.str] = None,
                 privacy_protocol: Optional[_builtins.str] = None,
                 privacy_protocol_variable: Optional[_builtins.str] = None):
        """
        :param _builtins.str authentication_password: Specify authentication protocol password
        :param _builtins.str authentication_password_variable: Variable name
        :param _builtins.str authentication_protocol: Configure authentication protocol
                 - Choices: `sha`
        :param _builtins.str authentication_protocol_variable: Variable name
        :param _builtins.str group: Name of the SNMP group
        :param _builtins.str group_variable: Variable name
        :param _builtins.str name: Name of the SNMP user
        :param _builtins.str privacy_password: Specify privacy protocol password
        :param _builtins.str privacy_password_variable: Variable name
        :param _builtins.str privacy_protocol: Configure privacy protocol
                 - Choices: `aes-cfb-128`, `aes-256-cfb-128`
        :param _builtins.str privacy_protocol_variable: Variable name
        """
        if authentication_password is not None:
            pulumi.set(__self__, "authentication_password", authentication_password)
        if authentication_password_variable is not None:
            pulumi.set(__self__, "authentication_password_variable", authentication_password_variable)
        if authentication_protocol is not None:
            pulumi.set(__self__, "authentication_protocol", authentication_protocol)
        if authentication_protocol_variable is not None:
            pulumi.set(__self__, "authentication_protocol_variable", authentication_protocol_variable)
        if group is not None:
            pulumi.set(__self__, "group", group)
        if group_variable is not None:
            pulumi.set(__self__, "group_variable", group_variable)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if privacy_password is not None:
            pulumi.set(__self__, "privacy_password", privacy_password)
        if privacy_password_variable is not None:
            pulumi.set(__self__, "privacy_password_variable", privacy_password_variable)
        if privacy_protocol is not None:
            pulumi.set(__self__, "privacy_protocol", privacy_protocol)
        if privacy_protocol_variable is not None:
            pulumi.set(__self__, "privacy_protocol_variable", privacy_protocol_variable)

    @_builtins.property
    @pulumi.getter(name="authenticationPassword")
    def authentication_password(self) -> Optional[_builtins.str]:
        """
        Specify authentication protocol password
        """
        return pulumi.get(self, "authentication_password")

    @_builtins.property
    @pulumi.getter(name="authenticationPasswordVariable")
    def authentication_password_variable(self) -> Optional[_builtins.str]:
        """
        Variable name
        """
        return pulumi.get(self, "authentication_password_variable")

    @_builtins.property
    @pulumi.getter(name="authenticationProtocol")
    def authentication_protocol(self) -> Optional[_builtins.str]:
        """
        Configure authentication protocol
          - Choices: `sha`
        """
        return pulumi.get(self, "authentication_protocol")

    @_builtins.property
    @pulumi.getter(name="authenticationProtocolVariable")
    def authentication_protocol_variable(self) -> Optional[_builtins.str]:
        """
        Variable name
        """
        return pulumi.get(self, "authentication_protocol_variable")

    @_builtins.property
    @pulumi.getter
    def group(self) -> Optional[_builtins.str]:
        """
        Name of the SNMP group
        """
        return pulumi.get(self, "group")

    @_builtins.property
    @pulumi.getter(name="groupVariable")
    def group_variable(self) -> Optional[_builtins.str]:
        """
        Variable name
        """
        return pulumi.get(self, "group_variable")

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[_builtins.str]:
        """
        Name of the SNMP user
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter(name="privacyPassword")
    def privacy_password(self) -> Optional[_builtins.str]:
        """
        Specify privacy protocol password
        """
        return pulumi.get(self, "privacy_password")

    @_builtins.property
    @pulumi.getter(name="privacyPasswordVariable")
    def privacy_password_variable(self) -> Optional[_builtins.str]:
        """
        Variable name
        """
        return pulumi.get(self, "privacy_password_variable")

    @_builtins.property
    @pulumi.getter(name="privacyProtocol")
    def privacy_protocol(self) -> Optional[_builtins.str]:
        """
        Configure privacy protocol
          - Choices: `aes-cfb-128`, `aes-256-cfb-128`
        """
        return pulumi.get(self, "privacy_protocol")

    @_builtins.property
    @pulumi.getter(name="privacyProtocolVariable")
    def privacy_protocol_variable(self) -> Optional[_builtins.str]:
        """
        Variable name
        """
        return pulumi.get(self, "privacy_protocol_variable")


@pulumi.output_type
class SystemSnmpFeatureView(dict):
    def __init__(__self__, *,
                 name: Optional[_builtins.str] = None,
                 oids: Optional[Sequence['outputs.SystemSnmpFeatureViewOid']] = None):
        """
        :param _builtins.str name: Set the name of the SNMP view
        :param Sequence['SystemSnmpFeatureViewOidArgs'] oids: Configure SNMP object identifier
        """
        if name is not None:
            pulumi.set(__self__, "name", name)
        if oids is not None:
            pulumi.set(__self__, "oids", oids)

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[_builtins.str]:
        """
        Set the name of the SNMP view
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def oids(self) -> Optional[Sequence['outputs.SystemSnmpFeatureViewOid']]:
        """
        Configure SNMP object identifier
        """
        return pulumi.get(self, "oids")


@pulumi.output_type
class SystemSnmpFeatureViewOid(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "excludeVariable":
            suggest = "exclude_variable"
        elif key == "idVariable":
            suggest = "id_variable"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SystemSnmpFeatureViewOid. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SystemSnmpFeatureViewOid.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SystemSnmpFeatureViewOid.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 exclude: Optional[_builtins.bool] = None,
                 exclude_variable: Optional[_builtins.str] = None,
                 id: Optional[_builtins.str] = None,
                 id_variable: Optional[_builtins.str] = None):
        """
        :param _builtins.bool exclude: Exclude the OID
                 - Default value: `false`
        :param _builtins.str exclude_variable: Variable name
        :param _builtins.str id: Configure identifier of subtree of MIB objects
        :param _builtins.str id_variable: Variable name
        """
        if exclude is not None:
            pulumi.set(__self__, "exclude", exclude)
        if exclude_variable is not None:
            pulumi.set(__self__, "exclude_variable", exclude_variable)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if id_variable is not None:
            pulumi.set(__self__, "id_variable", id_variable)

    @_builtins.property
    @pulumi.getter
    def exclude(self) -> Optional[_builtins.bool]:
        """
        Exclude the OID
          - Default value: `false`
        """
        return pulumi.get(self, "exclude")

    @_builtins.property
    @pulumi.getter(name="excludeVariable")
    def exclude_variable(self) -> Optional[_builtins.str]:
        """
        Variable name
        """
        return pulumi.get(self, "exclude_variable")

    @_builtins.property
    @pulumi.getter
    def id(self) -> Optional[_builtins.str]:
        """
        Configure identifier of subtree of MIB objects
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter(name="idVariable")
    def id_variable(self) -> Optional[_builtins.str]:
        """
        Variable name
        """
        return pulumi.get(self, "id_variable")


@pulumi.output_type
class TlocListPolicyObjectEntry(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "tlocIp":
            suggest = "tloc_ip"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in TlocListPolicyObjectEntry. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        TlocListPolicyObjectEntry.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        TlocListPolicyObjectEntry.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 color: _builtins.str,
                 encapsulation: _builtins.str,
                 tloc_ip: _builtins.str,
                 preference: Optional[_builtins.int] = None):
        """
        :param _builtins.str color: Color
                 - Choices: `default`, `3g`, `biz-internet`, `blue`, `bronze`, `custom1`, `custom2`, `custom3`, `gold`, `green`, `lte`, `metro-ethernet`, `mpls`, `private1`, `private2`, `private3`, `private4`, `private5`, `private6`, `public-internet`, `red`, `silver`
        :param _builtins.str encapsulation: Encapsulation
                 - Choices: `ipsec`, `gre`
        :param _builtins.str tloc_ip: TLOC IP
        :param _builtins.int preference: Preference
                 - Range: `0`-`4294967295`
        """
        pulumi.set(__self__, "color", color)
        pulumi.set(__self__, "encapsulation", encapsulation)
        pulumi.set(__self__, "tloc_ip", tloc_ip)
        if preference is not None:
            pulumi.set(__self__, "preference", preference)

    @_builtins.property
    @pulumi.getter
    def color(self) -> _builtins.str:
        """
        Color
          - Choices: `default`, `3g`, `biz-internet`, `blue`, `bronze`, `custom1`, `custom2`, `custom3`, `gold`, `green`, `lte`, `metro-ethernet`, `mpls`, `private1`, `private2`, `private3`, `private4`, `private5`, `private6`, `public-internet`, `red`, `silver`
        """
        return pulumi.get(self, "color")

    @_builtins.property
    @pulumi.getter
    def encapsulation(self) -> _builtins.str:
        """
        Encapsulation
          - Choices: `ipsec`, `gre`
        """
        return pulumi.get(self, "encapsulation")

    @_builtins.property
    @pulumi.getter(name="tlocIp")
    def tloc_ip(self) -> _builtins.str:
        """
        TLOC IP
        """
        return pulumi.get(self, "tloc_ip")

    @_builtins.property
    @pulumi.getter
    def preference(self) -> Optional[_builtins.int]:
        """
        Preference
          - Range: `0`-`4294967295`
        """
        return pulumi.get(self, "preference")


@pulumi.output_type
class TlsSslDecryptionPolicyDefinitionNetworkRule(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "baseAction":
            suggest = "base_action"
        elif key == "ruleId":
            suggest = "rule_id"
        elif key == "ruleName":
            suggest = "rule_name"
        elif key == "ruleType":
            suggest = "rule_type"
        elif key == "sourceAndDestinationConfigurations":
            suggest = "source_and_destination_configurations"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in TlsSslDecryptionPolicyDefinitionNetworkRule. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        TlsSslDecryptionPolicyDefinitionNetworkRule.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        TlsSslDecryptionPolicyDefinitionNetworkRule.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 base_action: Optional[_builtins.str] = None,
                 rule_id: Optional[_builtins.int] = None,
                 rule_name: Optional[_builtins.str] = None,
                 rule_type: Optional[_builtins.str] = None,
                 source_and_destination_configurations: Optional[Sequence['outputs.TlsSslDecryptionPolicyDefinitionNetworkRuleSourceAndDestinationConfiguration']] = None):
        """
        :param _builtins.str base_action: Rule base action
                 - Choices: `noIntent`, `doNotDecrypt`, `decrypt`
        :param _builtins.int rule_id: Rule ID
        :param _builtins.str rule_name: Rule name
        :param _builtins.str rule_type: Rule type
        :param Sequence['TlsSslDecryptionPolicyDefinitionNetworkRuleSourceAndDestinationConfigurationArgs'] source_and_destination_configurations: List of network source / destination configuration
        """
        if base_action is not None:
            pulumi.set(__self__, "base_action", base_action)
        if rule_id is not None:
            pulumi.set(__self__, "rule_id", rule_id)
        if rule_name is not None:
            pulumi.set(__self__, "rule_name", rule_name)
        if rule_type is not None:
            pulumi.set(__self__, "rule_type", rule_type)
        if source_and_destination_configurations is not None:
            pulumi.set(__self__, "source_and_destination_configurations", source_and_destination_configurations)

    @_builtins.property
    @pulumi.getter(name="baseAction")
    def base_action(self) -> Optional[_builtins.str]:
        """
        Rule base action
          - Choices: `noIntent`, `doNotDecrypt`, `decrypt`
        """
        return pulumi.get(self, "base_action")

    @_builtins.property
    @pulumi.getter(name="ruleId")
    def rule_id(self) -> Optional[_builtins.int]:
        """
        Rule ID
        """
        return pulumi.get(self, "rule_id")

    @_builtins.property
    @pulumi.getter(name="ruleName")
    def rule_name(self) -> Optional[_builtins.str]:
        """
        Rule name
        """
        return pulumi.get(self, "rule_name")

    @_builtins.property
    @pulumi.getter(name="ruleType")
    def rule_type(self) -> Optional[_builtins.str]:
        """
        Rule type
        """
        return pulumi.get(self, "rule_type")

    @_builtins.property
    @pulumi.getter(name="sourceAndDestinationConfigurations")
    def source_and_destination_configurations(self) -> Optional[Sequence['outputs.TlsSslDecryptionPolicyDefinitionNetworkRuleSourceAndDestinationConfiguration']]:
        """
        List of network source / destination configuration
        """
        return pulumi.get(self, "source_and_destination_configurations")


@pulumi.output_type
class TlsSslDecryptionPolicyDefinitionNetworkRuleSourceAndDestinationConfiguration(dict):
    def __init__(__self__, *,
                 option: Optional[_builtins.str] = None,
                 value: Optional[_builtins.str] = None):
        """
        :param _builtins.str option: source / destination option
                 - Choices: `sourceIp`, `sourcePort`, `destinationVpn`, `destinationIp`, `destinationPort`
        :param _builtins.str value: source / destination option target
        """
        if option is not None:
            pulumi.set(__self__, "option", option)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @_builtins.property
    @pulumi.getter
    def option(self) -> Optional[_builtins.str]:
        """
        source / destination option
          - Choices: `sourceIp`, `sourcePort`, `destinationVpn`, `destinationIp`, `destinationPort`
        """
        return pulumi.get(self, "option")

    @_builtins.property
    @pulumi.getter
    def value(self) -> Optional[_builtins.str]:
        """
        source / destination option target
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class TlsSslDecryptionPolicyDefinitionUrlRule(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "ruleName":
            suggest = "rule_name"
        elif key == "targetVpns":
            suggest = "target_vpns"
        elif key == "tlsSslProfilePolicyId":
            suggest = "tls_ssl_profile_policy_id"
        elif key == "tlsSslProfilePolicyVersion":
            suggest = "tls_ssl_profile_policy_version"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in TlsSslDecryptionPolicyDefinitionUrlRule. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        TlsSslDecryptionPolicyDefinitionUrlRule.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        TlsSslDecryptionPolicyDefinitionUrlRule.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 rule_name: Optional[_builtins.str] = None,
                 target_vpns: Optional[Sequence[_builtins.str]] = None,
                 tls_ssl_profile_policy_id: Optional[_builtins.str] = None,
                 tls_ssl_profile_policy_version: Optional[_builtins.int] = None):
        """
        :param _builtins.str rule_name: Country
        :param Sequence[_builtins.str] target_vpns: List of VPN IDs
        :param _builtins.str tls_ssl_profile_policy_id: TLS SSL Profile Policy ID
        :param _builtins.int tls_ssl_profile_policy_version: TLS SSL Profile Policy version
        """
        if rule_name is not None:
            pulumi.set(__self__, "rule_name", rule_name)
        if target_vpns is not None:
            pulumi.set(__self__, "target_vpns", target_vpns)
        if tls_ssl_profile_policy_id is not None:
            pulumi.set(__self__, "tls_ssl_profile_policy_id", tls_ssl_profile_policy_id)
        if tls_ssl_profile_policy_version is not None:
            pulumi.set(__self__, "tls_ssl_profile_policy_version", tls_ssl_profile_policy_version)

    @_builtins.property
    @pulumi.getter(name="ruleName")
    def rule_name(self) -> Optional[_builtins.str]:
        """
        Country
        """
        return pulumi.get(self, "rule_name")

    @_builtins.property
    @pulumi.getter(name="targetVpns")
    def target_vpns(self) -> Optional[Sequence[_builtins.str]]:
        """
        List of VPN IDs
        """
        return pulumi.get(self, "target_vpns")

    @_builtins.property
    @pulumi.getter(name="tlsSslProfilePolicyId")
    def tls_ssl_profile_policy_id(self) -> Optional[_builtins.str]:
        """
        TLS SSL Profile Policy ID
        """
        return pulumi.get(self, "tls_ssl_profile_policy_id")

    @_builtins.property
    @pulumi.getter(name="tlsSslProfilePolicyVersion")
    def tls_ssl_profile_policy_version(self) -> Optional[_builtins.int]:
        """
        TLS SSL Profile Policy version
        """
        return pulumi.get(self, "tls_ssl_profile_policy_version")


@pulumi.output_type
class TrafficDataPolicyDefinitionSequence(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "actionEntries":
            suggest = "action_entries"
        elif key == "baseAction":
            suggest = "base_action"
        elif key == "ipType":
            suggest = "ip_type"
        elif key == "matchEntries":
            suggest = "match_entries"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in TrafficDataPolicyDefinitionSequence. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        TrafficDataPolicyDefinitionSequence.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        TrafficDataPolicyDefinitionSequence.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 id: _builtins.int,
                 name: _builtins.str,
                 type: _builtins.str,
                 action_entries: Optional[Sequence['outputs.TrafficDataPolicyDefinitionSequenceActionEntry']] = None,
                 base_action: Optional[_builtins.str] = None,
                 ip_type: Optional[_builtins.str] = None,
                 match_entries: Optional[Sequence['outputs.TrafficDataPolicyDefinitionSequenceMatchEntry']] = None):
        """
        :param _builtins.int id: Sequence ID
        :param _builtins.str name: Sequence name
        :param _builtins.str type: Sequence type
                 - Choices: `applicationFirewall`, `qos`, `serviceChaining`, `trafficEngineering`, `data`
        :param Sequence['TrafficDataPolicyDefinitionSequenceActionEntryArgs'] action_entries: List of action entries
        :param _builtins.str base_action: Base action, either `accept` or `drop`
                 - Choices: `accept`, `drop`
        :param _builtins.str ip_type: Sequence IP type, either `ipv4`, `ipv6` or `all`
                 - Choices: `ipv4`, `ipv6`, `all`
        :param Sequence['TrafficDataPolicyDefinitionSequenceMatchEntryArgs'] match_entries: List of match entries
        """
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "type", type)
        if action_entries is not None:
            pulumi.set(__self__, "action_entries", action_entries)
        if base_action is not None:
            pulumi.set(__self__, "base_action", base_action)
        if ip_type is not None:
            pulumi.set(__self__, "ip_type", ip_type)
        if match_entries is not None:
            pulumi.set(__self__, "match_entries", match_entries)

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.int:
        """
        Sequence ID
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        """
        Sequence name
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def type(self) -> _builtins.str:
        """
        Sequence type
          - Choices: `applicationFirewall`, `qos`, `serviceChaining`, `trafficEngineering`, `data`
        """
        return pulumi.get(self, "type")

    @_builtins.property
    @pulumi.getter(name="actionEntries")
    def action_entries(self) -> Optional[Sequence['outputs.TrafficDataPolicyDefinitionSequenceActionEntry']]:
        """
        List of action entries
        """
        return pulumi.get(self, "action_entries")

    @_builtins.property
    @pulumi.getter(name="baseAction")
    def base_action(self) -> Optional[_builtins.str]:
        """
        Base action, either `accept` or `drop`
          - Choices: `accept`, `drop`
        """
        return pulumi.get(self, "base_action")

    @_builtins.property
    @pulumi.getter(name="ipType")
    def ip_type(self) -> Optional[_builtins.str]:
        """
        Sequence IP type, either `ipv4`, `ipv6` or `all`
          - Choices: `ipv4`, `ipv6`, `all`
        """
        return pulumi.get(self, "ip_type")

    @_builtins.property
    @pulumi.getter(name="matchEntries")
    def match_entries(self) -> Optional[Sequence['outputs.TrafficDataPolicyDefinitionSequenceMatchEntry']]:
        """
        List of match entries
        """
        return pulumi.get(self, "match_entries")


@pulumi.output_type
class TrafficDataPolicyDefinitionSequenceActionEntry(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "dreOptimization":
            suggest = "dre_optimization"
        elif key == "fallbackToRouting":
            suggest = "fallback_to_routing"
        elif key == "lossCorrection":
            suggest = "loss_correction"
        elif key == "lossCorrectionFec":
            suggest = "loss_correction_fec"
        elif key == "lossCorrectionFecThreshold":
            suggest = "loss_correction_fec_threshold"
        elif key == "lossCorrectionPacketDuplication":
            suggest = "loss_correction_packet_duplication"
        elif key == "natParameters":
            suggest = "nat_parameters"
        elif key == "natPool":
            suggest = "nat_pool"
        elif key == "natPoolId":
            suggest = "nat_pool_id"
        elif key == "redirectDns":
            suggest = "redirect_dns"
        elif key == "redirectDnsAddress":
            suggest = "redirect_dns_address"
        elif key == "redirectDnsType":
            suggest = "redirect_dns_type"
        elif key == "secureInternetGateway":
            suggest = "secure_internet_gateway"
        elif key == "serviceNodeGroup":
            suggest = "service_node_group"
        elif key == "setParameters":
            suggest = "set_parameters"
        elif key == "tcpOptimization":
            suggest = "tcp_optimization"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in TrafficDataPolicyDefinitionSequenceActionEntry. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        TrafficDataPolicyDefinitionSequenceActionEntry.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        TrafficDataPolicyDefinitionSequenceActionEntry.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 type: _builtins.str,
                 cflowd: Optional[_builtins.bool] = None,
                 counter: Optional[_builtins.str] = None,
                 dre_optimization: Optional[_builtins.bool] = None,
                 fallback_to_routing: Optional[_builtins.bool] = None,
                 log: Optional[_builtins.bool] = None,
                 loss_correction: Optional[_builtins.str] = None,
                 loss_correction_fec: Optional[_builtins.str] = None,
                 loss_correction_fec_threshold: Optional[_builtins.str] = None,
                 loss_correction_packet_duplication: Optional[_builtins.str] = None,
                 nat_parameters: Optional[Sequence['outputs.TrafficDataPolicyDefinitionSequenceActionEntryNatParameter']] = None,
                 nat_pool: Optional[_builtins.str] = None,
                 nat_pool_id: Optional[_builtins.int] = None,
                 redirect_dns: Optional[_builtins.str] = None,
                 redirect_dns_address: Optional[_builtins.str] = None,
                 redirect_dns_type: Optional[_builtins.str] = None,
                 secure_internet_gateway: Optional[_builtins.bool] = None,
                 service_node_group: Optional[_builtins.str] = None,
                 set_parameters: Optional[Sequence['outputs.TrafficDataPolicyDefinitionSequenceActionEntrySetParameter']] = None,
                 tcp_optimization: Optional[_builtins.bool] = None):
        """
        :param _builtins.str type: Type of action entry
                 - Choices: `cflowd`, `count`, `dreOptimization`, `fallbackToRouting`, `log`, `lossProtect`, `lossProtectPktDup`, `lossProtectFec`, `nat`, `redirectDns`, `serviceNodeGroup`, `set`, `sig`, `tcpOptimization`
        :param _builtins.bool cflowd: Enable cflowd, Attribute conditional on `type` being equal to `cflowd`
        :param _builtins.str counter: Counter name, Attribute conditional on `type` being equal to `count`
        :param _builtins.bool dre_optimization: Enable DRE optimization, Attribute conditional on `type` being equal to `dreOptimization`
        :param _builtins.bool fallback_to_routing: Enable fallback to routing, Attribute conditional on `type` being equal to `fallbackToRouting`
        :param _builtins.bool log: Enable logging, Attribute conditional on `type` being equal to `log`
        :param _builtins.str loss_correction: Loss correction, Attribute conditional on `type` being equal to `lossProtect`
                 - Choices: `fecAdaptive`, `fecAlways`, `packetDuplication`
        :param _builtins.str loss_correction_fec: Loss correction FEC, Attribute conditional on `type` being equal to `lossProtectFec`
                 - Choices: `fecAdaptive`, `fecAlways`, `packetDuplication`
        :param _builtins.str loss_correction_fec_threshold: Loss correction FEC threshold, Attribute conditional on `type` being equal to `lossProtectFec`
        :param _builtins.str loss_correction_packet_duplication: Loss correction packet duplication, Attribute conditional on `type` being equal to `lossProtectPktDup`
                 - Choices: `fecAdaptive`, `fecAlways`, `packetDuplication`
        :param Sequence['TrafficDataPolicyDefinitionSequenceActionEntryNatParameterArgs'] nat_parameters: List of NAT parameters, Attribute conditional on `type` being equal to `nat`
        :param _builtins.str nat_pool: NAT pool, Attribute conditional on `type` being equal to `nat`
                 - Choices: `pool`
        :param _builtins.int nat_pool_id: NAT pool ID, Attribute conditional on `type` being equal to `nat`
                 - Range: `1`-`31`
        :param _builtins.str redirect_dns: Redirect DNS, Attribute conditional on `type` being equal to `redirectDns`
                 - Choices: `dnsType`, `ipAddress`
        :param _builtins.str redirect_dns_address: Redirect DNS IP address, Attribute conditional on `redirect_dns` being equal to `ipAddress`
        :param _builtins.str redirect_dns_type: Redirect DNS type, Attribute conditional on `redirect_dns` being equal to `dnsType`
                 - Choices: `host`, `umbrella`
        :param _builtins.bool secure_internet_gateway: Enable secure internet gateway, Attribute conditional on `type` being equal to `sig`
        :param _builtins.str service_node_group: Service node group, Attribute conditional on `type` being equal to `serviceNodeGroup`
        :param Sequence['TrafficDataPolicyDefinitionSequenceActionEntrySetParameterArgs'] set_parameters: List of set parameters, Attribute conditional on `type` being equal to `set`
        :param _builtins.bool tcp_optimization: Enable TCP optimization, Attribute conditional on `type` being equal to `tcpOptimization`
        """
        pulumi.set(__self__, "type", type)
        if cflowd is not None:
            pulumi.set(__self__, "cflowd", cflowd)
        if counter is not None:
            pulumi.set(__self__, "counter", counter)
        if dre_optimization is not None:
            pulumi.set(__self__, "dre_optimization", dre_optimization)
        if fallback_to_routing is not None:
            pulumi.set(__self__, "fallback_to_routing", fallback_to_routing)
        if log is not None:
            pulumi.set(__self__, "log", log)
        if loss_correction is not None:
            pulumi.set(__self__, "loss_correction", loss_correction)
        if loss_correction_fec is not None:
            pulumi.set(__self__, "loss_correction_fec", loss_correction_fec)
        if loss_correction_fec_threshold is not None:
            pulumi.set(__self__, "loss_correction_fec_threshold", loss_correction_fec_threshold)
        if loss_correction_packet_duplication is not None:
            pulumi.set(__self__, "loss_correction_packet_duplication", loss_correction_packet_duplication)
        if nat_parameters is not None:
            pulumi.set(__self__, "nat_parameters", nat_parameters)
        if nat_pool is not None:
            pulumi.set(__self__, "nat_pool", nat_pool)
        if nat_pool_id is not None:
            pulumi.set(__self__, "nat_pool_id", nat_pool_id)
        if redirect_dns is not None:
            pulumi.set(__self__, "redirect_dns", redirect_dns)
        if redirect_dns_address is not None:
            pulumi.set(__self__, "redirect_dns_address", redirect_dns_address)
        if redirect_dns_type is not None:
            pulumi.set(__self__, "redirect_dns_type", redirect_dns_type)
        if secure_internet_gateway is not None:
            pulumi.set(__self__, "secure_internet_gateway", secure_internet_gateway)
        if service_node_group is not None:
            pulumi.set(__self__, "service_node_group", service_node_group)
        if set_parameters is not None:
            pulumi.set(__self__, "set_parameters", set_parameters)
        if tcp_optimization is not None:
            pulumi.set(__self__, "tcp_optimization", tcp_optimization)

    @_builtins.property
    @pulumi.getter
    def type(self) -> _builtins.str:
        """
        Type of action entry
          - Choices: `cflowd`, `count`, `dreOptimization`, `fallbackToRouting`, `log`, `lossProtect`, `lossProtectPktDup`, `lossProtectFec`, `nat`, `redirectDns`, `serviceNodeGroup`, `set`, `sig`, `tcpOptimization`
        """
        return pulumi.get(self, "type")

    @_builtins.property
    @pulumi.getter
    def cflowd(self) -> Optional[_builtins.bool]:
        """
        Enable cflowd, Attribute conditional on `type` being equal to `cflowd`
        """
        return pulumi.get(self, "cflowd")

    @_builtins.property
    @pulumi.getter
    def counter(self) -> Optional[_builtins.str]:
        """
        Counter name, Attribute conditional on `type` being equal to `count`
        """
        return pulumi.get(self, "counter")

    @_builtins.property
    @pulumi.getter(name="dreOptimization")
    def dre_optimization(self) -> Optional[_builtins.bool]:
        """
        Enable DRE optimization, Attribute conditional on `type` being equal to `dreOptimization`
        """
        return pulumi.get(self, "dre_optimization")

    @_builtins.property
    @pulumi.getter(name="fallbackToRouting")
    def fallback_to_routing(self) -> Optional[_builtins.bool]:
        """
        Enable fallback to routing, Attribute conditional on `type` being equal to `fallbackToRouting`
        """
        return pulumi.get(self, "fallback_to_routing")

    @_builtins.property
    @pulumi.getter
    def log(self) -> Optional[_builtins.bool]:
        """
        Enable logging, Attribute conditional on `type` being equal to `log`
        """
        return pulumi.get(self, "log")

    @_builtins.property
    @pulumi.getter(name="lossCorrection")
    def loss_correction(self) -> Optional[_builtins.str]:
        """
        Loss correction, Attribute conditional on `type` being equal to `lossProtect`
          - Choices: `fecAdaptive`, `fecAlways`, `packetDuplication`
        """
        return pulumi.get(self, "loss_correction")

    @_builtins.property
    @pulumi.getter(name="lossCorrectionFec")
    def loss_correction_fec(self) -> Optional[_builtins.str]:
        """
        Loss correction FEC, Attribute conditional on `type` being equal to `lossProtectFec`
          - Choices: `fecAdaptive`, `fecAlways`, `packetDuplication`
        """
        return pulumi.get(self, "loss_correction_fec")

    @_builtins.property
    @pulumi.getter(name="lossCorrectionFecThreshold")
    def loss_correction_fec_threshold(self) -> Optional[_builtins.str]:
        """
        Loss correction FEC threshold, Attribute conditional on `type` being equal to `lossProtectFec`
        """
        return pulumi.get(self, "loss_correction_fec_threshold")

    @_builtins.property
    @pulumi.getter(name="lossCorrectionPacketDuplication")
    def loss_correction_packet_duplication(self) -> Optional[_builtins.str]:
        """
        Loss correction packet duplication, Attribute conditional on `type` being equal to `lossProtectPktDup`
          - Choices: `fecAdaptive`, `fecAlways`, `packetDuplication`
        """
        return pulumi.get(self, "loss_correction_packet_duplication")

    @_builtins.property
    @pulumi.getter(name="natParameters")
    def nat_parameters(self) -> Optional[Sequence['outputs.TrafficDataPolicyDefinitionSequenceActionEntryNatParameter']]:
        """
        List of NAT parameters, Attribute conditional on `type` being equal to `nat`
        """
        return pulumi.get(self, "nat_parameters")

    @_builtins.property
    @pulumi.getter(name="natPool")
    def nat_pool(self) -> Optional[_builtins.str]:
        """
        NAT pool, Attribute conditional on `type` being equal to `nat`
          - Choices: `pool`
        """
        return pulumi.get(self, "nat_pool")

    @_builtins.property
    @pulumi.getter(name="natPoolId")
    def nat_pool_id(self) -> Optional[_builtins.int]:
        """
        NAT pool ID, Attribute conditional on `type` being equal to `nat`
          - Range: `1`-`31`
        """
        return pulumi.get(self, "nat_pool_id")

    @_builtins.property
    @pulumi.getter(name="redirectDns")
    def redirect_dns(self) -> Optional[_builtins.str]:
        """
        Redirect DNS, Attribute conditional on `type` being equal to `redirectDns`
          - Choices: `dnsType`, `ipAddress`
        """
        return pulumi.get(self, "redirect_dns")

    @_builtins.property
    @pulumi.getter(name="redirectDnsAddress")
    def redirect_dns_address(self) -> Optional[_builtins.str]:
        """
        Redirect DNS IP address, Attribute conditional on `redirect_dns` being equal to `ipAddress`
        """
        return pulumi.get(self, "redirect_dns_address")

    @_builtins.property
    @pulumi.getter(name="redirectDnsType")
    def redirect_dns_type(self) -> Optional[_builtins.str]:
        """
        Redirect DNS type, Attribute conditional on `redirect_dns` being equal to `dnsType`
          - Choices: `host`, `umbrella`
        """
        return pulumi.get(self, "redirect_dns_type")

    @_builtins.property
    @pulumi.getter(name="secureInternetGateway")
    def secure_internet_gateway(self) -> Optional[_builtins.bool]:
        """
        Enable secure internet gateway, Attribute conditional on `type` being equal to `sig`
        """
        return pulumi.get(self, "secure_internet_gateway")

    @_builtins.property
    @pulumi.getter(name="serviceNodeGroup")
    def service_node_group(self) -> Optional[_builtins.str]:
        """
        Service node group, Attribute conditional on `type` being equal to `serviceNodeGroup`
        """
        return pulumi.get(self, "service_node_group")

    @_builtins.property
    @pulumi.getter(name="setParameters")
    def set_parameters(self) -> Optional[Sequence['outputs.TrafficDataPolicyDefinitionSequenceActionEntrySetParameter']]:
        """
        List of set parameters, Attribute conditional on `type` being equal to `set`
        """
        return pulumi.get(self, "set_parameters")

    @_builtins.property
    @pulumi.getter(name="tcpOptimization")
    def tcp_optimization(self) -> Optional[_builtins.bool]:
        """
        Enable TCP optimization, Attribute conditional on `type` being equal to `tcpOptimization`
        """
        return pulumi.get(self, "tcp_optimization")


@pulumi.output_type
class TrafficDataPolicyDefinitionSequenceActionEntryNatParameter(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "vpnId":
            suggest = "vpn_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in TrafficDataPolicyDefinitionSequenceActionEntryNatParameter. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        TrafficDataPolicyDefinitionSequenceActionEntryNatParameter.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        TrafficDataPolicyDefinitionSequenceActionEntryNatParameter.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 type: _builtins.str,
                 fallback: Optional[_builtins.bool] = None,
                 vpn_id: Optional[_builtins.int] = None):
        """
        :param _builtins.str type: Type of NAT parameter
                 - Choices: `useVpn`, `fallback`
        :param _builtins.bool fallback: Fallback, Attribute conditional on `type` being equal to `fallback`
        :param _builtins.int vpn_id: DSCP, Attribute conditional on `type` being equal to `useVpn`
        """
        pulumi.set(__self__, "type", type)
        if fallback is not None:
            pulumi.set(__self__, "fallback", fallback)
        if vpn_id is not None:
            pulumi.set(__self__, "vpn_id", vpn_id)

    @_builtins.property
    @pulumi.getter
    def type(self) -> _builtins.str:
        """
        Type of NAT parameter
          - Choices: `useVpn`, `fallback`
        """
        return pulumi.get(self, "type")

    @_builtins.property
    @pulumi.getter
    def fallback(self) -> Optional[_builtins.bool]:
        """
        Fallback, Attribute conditional on `type` being equal to `fallback`
        """
        return pulumi.get(self, "fallback")

    @_builtins.property
    @pulumi.getter(name="vpnId")
    def vpn_id(self) -> Optional[_builtins.int]:
        """
        DSCP, Attribute conditional on `type` being equal to `useVpn`
        """
        return pulumi.get(self, "vpn_id")


@pulumi.output_type
class TrafficDataPolicyDefinitionSequenceActionEntrySetParameter(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "forwardingClass":
            suggest = "forwarding_class"
        elif key == "localTlocListColor":
            suggest = "local_tloc_list_color"
        elif key == "localTlocListEncap":
            suggest = "local_tloc_list_encap"
        elif key == "localTlocListRestrict":
            suggest = "local_tloc_list_restrict"
        elif key == "nextHop":
            suggest = "next_hop"
        elif key == "nextHopLoose":
            suggest = "next_hop_loose"
        elif key == "policerListId":
            suggest = "policer_list_id"
        elif key == "policerListVersion":
            suggest = "policer_list_version"
        elif key == "preferredColorGroupListId":
            suggest = "preferred_color_group_list_id"
        elif key == "preferredColorGroupListVersion":
            suggest = "preferred_color_group_list_version"
        elif key == "serviceTlocColor":
            suggest = "service_tloc_color"
        elif key == "serviceTlocEncapsulation":
            suggest = "service_tloc_encapsulation"
        elif key == "serviceTlocIp":
            suggest = "service_tloc_ip"
        elif key == "serviceTlocListId":
            suggest = "service_tloc_list_id"
        elif key == "serviceTlocListVersion":
            suggest = "service_tloc_list_version"
        elif key == "serviceTlocLocal":
            suggest = "service_tloc_local"
        elif key == "serviceTlocRestrict":
            suggest = "service_tloc_restrict"
        elif key == "serviceType":
            suggest = "service_type"
        elif key == "serviceVpnId":
            suggest = "service_vpn_id"
        elif key == "tlocColor":
            suggest = "tloc_color"
        elif key == "tlocEncapsulation":
            suggest = "tloc_encapsulation"
        elif key == "tlocIp":
            suggest = "tloc_ip"
        elif key == "tlocListId":
            suggest = "tloc_list_id"
        elif key == "tlocListVersion":
            suggest = "tloc_list_version"
        elif key == "vpnId":
            suggest = "vpn_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in TrafficDataPolicyDefinitionSequenceActionEntrySetParameter. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        TrafficDataPolicyDefinitionSequenceActionEntrySetParameter.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        TrafficDataPolicyDefinitionSequenceActionEntrySetParameter.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 type: _builtins.str,
                 dscp: Optional[_builtins.int] = None,
                 forwarding_class: Optional[_builtins.str] = None,
                 local_tloc_list_color: Optional[_builtins.str] = None,
                 local_tloc_list_encap: Optional[_builtins.str] = None,
                 local_tloc_list_restrict: Optional[_builtins.bool] = None,
                 next_hop: Optional[_builtins.str] = None,
                 next_hop_loose: Optional[_builtins.bool] = None,
                 policer_list_id: Optional[_builtins.str] = None,
                 policer_list_version: Optional[_builtins.int] = None,
                 preferred_color_group_list_id: Optional[_builtins.str] = None,
                 preferred_color_group_list_version: Optional[_builtins.int] = None,
                 service_tloc_color: Optional[_builtins.str] = None,
                 service_tloc_encapsulation: Optional[_builtins.str] = None,
                 service_tloc_ip: Optional[_builtins.str] = None,
                 service_tloc_list_id: Optional[_builtins.str] = None,
                 service_tloc_list_version: Optional[_builtins.int] = None,
                 service_tloc_local: Optional[_builtins.bool] = None,
                 service_tloc_restrict: Optional[_builtins.bool] = None,
                 service_type: Optional[_builtins.str] = None,
                 service_vpn_id: Optional[_builtins.int] = None,
                 tloc_color: Optional[_builtins.str] = None,
                 tloc_encapsulation: Optional[_builtins.str] = None,
                 tloc_ip: Optional[_builtins.str] = None,
                 tloc_list_id: Optional[_builtins.str] = None,
                 tloc_list_version: Optional[_builtins.int] = None,
                 vpn_id: Optional[_builtins.int] = None):
        """
        :param _builtins.str type: Type of set parameter
                 - Choices: `dscp`, `forwardingClass`, `localTlocList`, `nextHop`, `nextHopLoose`, `policer`, `preferredColorGroup`, `tlocList`, `tloc`, `service`, `vpn`
        :param _builtins.int dscp: DSCP, Attribute conditional on `type` being equal to `dscp`
                 - Range: `0`-`63`
        :param _builtins.str forwarding_class: Forwarding class, Attribute conditional on `type` being equal to `forwardingClass`
        :param _builtins.str local_tloc_list_color: Local TLOC list color. Space separated list of colors., Attribute conditional on `type` being equal to `localTlocList`
        :param _builtins.str local_tloc_list_encap: Local TLOC list encapsulation., Attribute conditional on `type` being equal to `localTlocList`
                 - Choices: `ipsec`, `gre`, `ipsec gre`
        :param _builtins.bool local_tloc_list_restrict: Local TLOC list restrict, Attribute conditional on `type` being equal to `localTlocList`
        :param _builtins.str next_hop: Next hop IP, Attribute conditional on `type` being equal to `nextHop`
        :param _builtins.bool next_hop_loose: Use routing table entry to forward the packet in case Next-hop is not available, Attribute conditional on `type` being equal to `nextHopLoose`
        :param _builtins.str policer_list_id: Policer list ID, Attribute conditional on `type` being equal to `policer`
        :param _builtins.int policer_list_version: Policer list version
        :param _builtins.str preferred_color_group_list_id: Preferred color group list ID, Attribute conditional on `type` being equal to `preferredColorGroup`
        :param _builtins.int preferred_color_group_list_version: Preferred color group list version
        :param _builtins.str service_tloc_color: Service TLOC color, Attribute conditional on `type` being equal to `service`
        :param _builtins.str service_tloc_encapsulation: Service TLOC encapsulation, Attribute conditional on `type` being equal to `service`
                 - Choices: `ipsec`, `gre`, `ipsec gre`
        :param _builtins.str service_tloc_ip: Service TLOC IP address, Attribute conditional on `type` being equal to `service`
        :param _builtins.str service_tloc_list_id: Service TLOC list ID, Attribute conditional on `type` being equal to `service`
        :param _builtins.int service_tloc_list_version: Service TLOC list version
        :param _builtins.bool service_tloc_local: Service TLOC Local, Attribute conditional on `type` being equal to `service`
        :param _builtins.bool service_tloc_restrict: Service TLOC Restrict, Attribute conditional on `type` being equal to `service`
        :param _builtins.str service_type: Service type, Attribute conditional on `type` being equal to `service`
                 - Choices: `FW`, `IDP`, `IDS`, `netsvc1`, `netsvc2`, `netsvc3`, `netsvc4`, `netsvc5`
        :param _builtins.int service_vpn_id: Service VPN ID, Attribute conditional on `type` being equal to `service`
                 - Range: `0`-`65536`
        :param _builtins.str tloc_color: TLOC color, Attribute conditional on `type` being equal to `tloc`
        :param _builtins.str tloc_encapsulation: TLOC encapsulation, Attribute conditional on `type` being equal to `tloc`
                 - Choices: `ipsec`, `gre`, `ipsec gre`
        :param _builtins.str tloc_ip: TLOC IP address, Attribute conditional on `type` being equal to `tloc`
        :param _builtins.str tloc_list_id: TLOC list ID, Attribute conditional on `type` being equal to `tlocList`
        :param _builtins.int tloc_list_version: TLOC list version
        :param _builtins.int vpn_id: DSCP, Attribute conditional on `type` being equal to `vpn`
                 - Range: `0`-`65530`
        """
        pulumi.set(__self__, "type", type)
        if dscp is not None:
            pulumi.set(__self__, "dscp", dscp)
        if forwarding_class is not None:
            pulumi.set(__self__, "forwarding_class", forwarding_class)
        if local_tloc_list_color is not None:
            pulumi.set(__self__, "local_tloc_list_color", local_tloc_list_color)
        if local_tloc_list_encap is not None:
            pulumi.set(__self__, "local_tloc_list_encap", local_tloc_list_encap)
        if local_tloc_list_restrict is not None:
            pulumi.set(__self__, "local_tloc_list_restrict", local_tloc_list_restrict)
        if next_hop is not None:
            pulumi.set(__self__, "next_hop", next_hop)
        if next_hop_loose is not None:
            pulumi.set(__self__, "next_hop_loose", next_hop_loose)
        if policer_list_id is not None:
            pulumi.set(__self__, "policer_list_id", policer_list_id)
        if policer_list_version is not None:
            pulumi.set(__self__, "policer_list_version", policer_list_version)
        if preferred_color_group_list_id is not None:
            pulumi.set(__self__, "preferred_color_group_list_id", preferred_color_group_list_id)
        if preferred_color_group_list_version is not None:
            pulumi.set(__self__, "preferred_color_group_list_version", preferred_color_group_list_version)
        if service_tloc_color is not None:
            pulumi.set(__self__, "service_tloc_color", service_tloc_color)
        if service_tloc_encapsulation is not None:
            pulumi.set(__self__, "service_tloc_encapsulation", service_tloc_encapsulation)
        if service_tloc_ip is not None:
            pulumi.set(__self__, "service_tloc_ip", service_tloc_ip)
        if service_tloc_list_id is not None:
            pulumi.set(__self__, "service_tloc_list_id", service_tloc_list_id)
        if service_tloc_list_version is not None:
            pulumi.set(__self__, "service_tloc_list_version", service_tloc_list_version)
        if service_tloc_local is not None:
            pulumi.set(__self__, "service_tloc_local", service_tloc_local)
        if service_tloc_restrict is not None:
            pulumi.set(__self__, "service_tloc_restrict", service_tloc_restrict)
        if service_type is not None:
            pulumi.set(__self__, "service_type", service_type)
        if service_vpn_id is not None:
            pulumi.set(__self__, "service_vpn_id", service_vpn_id)
        if tloc_color is not None:
            pulumi.set(__self__, "tloc_color", tloc_color)
        if tloc_encapsulation is not None:
            pulumi.set(__self__, "tloc_encapsulation", tloc_encapsulation)
        if tloc_ip is not None:
            pulumi.set(__self__, "tloc_ip", tloc_ip)
        if tloc_list_id is not None:
            pulumi.set(__self__, "tloc_list_id", tloc_list_id)
        if tloc_list_version is not None:
            pulumi.set(__self__, "tloc_list_version", tloc_list_version)
        if vpn_id is not None:
            pulumi.set(__self__, "vpn_id", vpn_id)

    @_builtins.property
    @pulumi.getter
    def type(self) -> _builtins.str:
        """
        Type of set parameter
          - Choices: `dscp`, `forwardingClass`, `localTlocList`, `nextHop`, `nextHopLoose`, `policer`, `preferredColorGroup`, `tlocList`, `tloc`, `service`, `vpn`
        """
        return pulumi.get(self, "type")

    @_builtins.property
    @pulumi.getter
    def dscp(self) -> Optional[_builtins.int]:
        """
        DSCP, Attribute conditional on `type` being equal to `dscp`
          - Range: `0`-`63`
        """
        return pulumi.get(self, "dscp")

    @_builtins.property
    @pulumi.getter(name="forwardingClass")
    def forwarding_class(self) -> Optional[_builtins.str]:
        """
        Forwarding class, Attribute conditional on `type` being equal to `forwardingClass`
        """
        return pulumi.get(self, "forwarding_class")

    @_builtins.property
    @pulumi.getter(name="localTlocListColor")
    def local_tloc_list_color(self) -> Optional[_builtins.str]:
        """
        Local TLOC list color. Space separated list of colors., Attribute conditional on `type` being equal to `localTlocList`
        """
        return pulumi.get(self, "local_tloc_list_color")

    @_builtins.property
    @pulumi.getter(name="localTlocListEncap")
    def local_tloc_list_encap(self) -> Optional[_builtins.str]:
        """
        Local TLOC list encapsulation., Attribute conditional on `type` being equal to `localTlocList`
          - Choices: `ipsec`, `gre`, `ipsec gre`
        """
        return pulumi.get(self, "local_tloc_list_encap")

    @_builtins.property
    @pulumi.getter(name="localTlocListRestrict")
    def local_tloc_list_restrict(self) -> Optional[_builtins.bool]:
        """
        Local TLOC list restrict, Attribute conditional on `type` being equal to `localTlocList`
        """
        return pulumi.get(self, "local_tloc_list_restrict")

    @_builtins.property
    @pulumi.getter(name="nextHop")
    def next_hop(self) -> Optional[_builtins.str]:
        """
        Next hop IP, Attribute conditional on `type` being equal to `nextHop`
        """
        return pulumi.get(self, "next_hop")

    @_builtins.property
    @pulumi.getter(name="nextHopLoose")
    def next_hop_loose(self) -> Optional[_builtins.bool]:
        """
        Use routing table entry to forward the packet in case Next-hop is not available, Attribute conditional on `type` being equal to `nextHopLoose`
        """
        return pulumi.get(self, "next_hop_loose")

    @_builtins.property
    @pulumi.getter(name="policerListId")
    def policer_list_id(self) -> Optional[_builtins.str]:
        """
        Policer list ID, Attribute conditional on `type` being equal to `policer`
        """
        return pulumi.get(self, "policer_list_id")

    @_builtins.property
    @pulumi.getter(name="policerListVersion")
    def policer_list_version(self) -> Optional[_builtins.int]:
        """
        Policer list version
        """
        return pulumi.get(self, "policer_list_version")

    @_builtins.property
    @pulumi.getter(name="preferredColorGroupListId")
    def preferred_color_group_list_id(self) -> Optional[_builtins.str]:
        """
        Preferred color group list ID, Attribute conditional on `type` being equal to `preferredColorGroup`
        """
        return pulumi.get(self, "preferred_color_group_list_id")

    @_builtins.property
    @pulumi.getter(name="preferredColorGroupListVersion")
    def preferred_color_group_list_version(self) -> Optional[_builtins.int]:
        """
        Preferred color group list version
        """
        return pulumi.get(self, "preferred_color_group_list_version")

    @_builtins.property
    @pulumi.getter(name="serviceTlocColor")
    def service_tloc_color(self) -> Optional[_builtins.str]:
        """
        Service TLOC color, Attribute conditional on `type` being equal to `service`
        """
        return pulumi.get(self, "service_tloc_color")

    @_builtins.property
    @pulumi.getter(name="serviceTlocEncapsulation")
    def service_tloc_encapsulation(self) -> Optional[_builtins.str]:
        """
        Service TLOC encapsulation, Attribute conditional on `type` being equal to `service`
          - Choices: `ipsec`, `gre`, `ipsec gre`
        """
        return pulumi.get(self, "service_tloc_encapsulation")

    @_builtins.property
    @pulumi.getter(name="serviceTlocIp")
    def service_tloc_ip(self) -> Optional[_builtins.str]:
        """
        Service TLOC IP address, Attribute conditional on `type` being equal to `service`
        """
        return pulumi.get(self, "service_tloc_ip")

    @_builtins.property
    @pulumi.getter(name="serviceTlocListId")
    def service_tloc_list_id(self) -> Optional[_builtins.str]:
        """
        Service TLOC list ID, Attribute conditional on `type` being equal to `service`
        """
        return pulumi.get(self, "service_tloc_list_id")

    @_builtins.property
    @pulumi.getter(name="serviceTlocListVersion")
    def service_tloc_list_version(self) -> Optional[_builtins.int]:
        """
        Service TLOC list version
        """
        return pulumi.get(self, "service_tloc_list_version")

    @_builtins.property
    @pulumi.getter(name="serviceTlocLocal")
    def service_tloc_local(self) -> Optional[_builtins.bool]:
        """
        Service TLOC Local, Attribute conditional on `type` being equal to `service`
        """
        return pulumi.get(self, "service_tloc_local")

    @_builtins.property
    @pulumi.getter(name="serviceTlocRestrict")
    def service_tloc_restrict(self) -> Optional[_builtins.bool]:
        """
        Service TLOC Restrict, Attribute conditional on `type` being equal to `service`
        """
        return pulumi.get(self, "service_tloc_restrict")

    @_builtins.property
    @pulumi.getter(name="serviceType")
    def service_type(self) -> Optional[_builtins.str]:
        """
        Service type, Attribute conditional on `type` being equal to `service`
          - Choices: `FW`, `IDP`, `IDS`, `netsvc1`, `netsvc2`, `netsvc3`, `netsvc4`, `netsvc5`
        """
        return pulumi.get(self, "service_type")

    @_builtins.property
    @pulumi.getter(name="serviceVpnId")
    def service_vpn_id(self) -> Optional[_builtins.int]:
        """
        Service VPN ID, Attribute conditional on `type` being equal to `service`
          - Range: `0`-`65536`
        """
        return pulumi.get(self, "service_vpn_id")

    @_builtins.property
    @pulumi.getter(name="tlocColor")
    def tloc_color(self) -> Optional[_builtins.str]:
        """
        TLOC color, Attribute conditional on `type` being equal to `tloc`
        """
        return pulumi.get(self, "tloc_color")

    @_builtins.property
    @pulumi.getter(name="tlocEncapsulation")
    def tloc_encapsulation(self) -> Optional[_builtins.str]:
        """
        TLOC encapsulation, Attribute conditional on `type` being equal to `tloc`
          - Choices: `ipsec`, `gre`, `ipsec gre`
        """
        return pulumi.get(self, "tloc_encapsulation")

    @_builtins.property
    @pulumi.getter(name="tlocIp")
    def tloc_ip(self) -> Optional[_builtins.str]:
        """
        TLOC IP address, Attribute conditional on `type` being equal to `tloc`
        """
        return pulumi.get(self, "tloc_ip")

    @_builtins.property
    @pulumi.getter(name="tlocListId")
    def tloc_list_id(self) -> Optional[_builtins.str]:
        """
        TLOC list ID, Attribute conditional on `type` being equal to `tlocList`
        """
        return pulumi.get(self, "tloc_list_id")

    @_builtins.property
    @pulumi.getter(name="tlocListVersion")
    def tloc_list_version(self) -> Optional[_builtins.int]:
        """
        TLOC list version
        """
        return pulumi.get(self, "tloc_list_version")

    @_builtins.property
    @pulumi.getter(name="vpnId")
    def vpn_id(self) -> Optional[_builtins.int]:
        """
        DSCP, Attribute conditional on `type` being equal to `vpn`
          - Range: `0`-`65530`
        """
        return pulumi.get(self, "vpn_id")


@pulumi.output_type
class TrafficDataPolicyDefinitionSequenceMatchEntry(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "applicationListId":
            suggest = "application_list_id"
        elif key == "applicationListVersion":
            suggest = "application_list_version"
        elif key == "destinationDataPrefixListId":
            suggest = "destination_data_prefix_list_id"
        elif key == "destinationDataPrefixListVersion":
            suggest = "destination_data_prefix_list_version"
        elif key == "destinationIp":
            suggest = "destination_ip"
        elif key == "destinationPort":
            suggest = "destination_port"
        elif key == "destinationRegion":
            suggest = "destination_region"
        elif key == "dnsApplicationListId":
            suggest = "dns_application_list_id"
        elif key == "dnsApplicationListVersion":
            suggest = "dns_application_list_version"
        elif key == "icmpMessage":
            suggest = "icmp_message"
        elif key == "packetLength":
            suggest = "packet_length"
        elif key == "sourceDataPrefixListId":
            suggest = "source_data_prefix_list_id"
        elif key == "sourceDataPrefixListVersion":
            suggest = "source_data_prefix_list_version"
        elif key == "sourceIp":
            suggest = "source_ip"
        elif key == "sourcePort":
            suggest = "source_port"
        elif key == "trafficTo":
            suggest = "traffic_to"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in TrafficDataPolicyDefinitionSequenceMatchEntry. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        TrafficDataPolicyDefinitionSequenceMatchEntry.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        TrafficDataPolicyDefinitionSequenceMatchEntry.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 type: _builtins.str,
                 application_list_id: Optional[_builtins.str] = None,
                 application_list_version: Optional[_builtins.int] = None,
                 destination_data_prefix_list_id: Optional[_builtins.str] = None,
                 destination_data_prefix_list_version: Optional[_builtins.int] = None,
                 destination_ip: Optional[_builtins.str] = None,
                 destination_port: Optional[_builtins.str] = None,
                 destination_region: Optional[_builtins.str] = None,
                 dns: Optional[_builtins.str] = None,
                 dns_application_list_id: Optional[_builtins.str] = None,
                 dns_application_list_version: Optional[_builtins.int] = None,
                 dscp: Optional[_builtins.str] = None,
                 icmp_message: Optional[_builtins.str] = None,
                 packet_length: Optional[_builtins.int] = None,
                 plp: Optional[_builtins.str] = None,
                 protocol: Optional[_builtins.str] = None,
                 source_data_prefix_list_id: Optional[_builtins.str] = None,
                 source_data_prefix_list_version: Optional[_builtins.int] = None,
                 source_ip: Optional[_builtins.str] = None,
                 source_port: Optional[_builtins.str] = None,
                 tcp: Optional[_builtins.str] = None,
                 traffic_to: Optional[_builtins.str] = None):
        """
        :param _builtins.str type: Type of match entry
                 - Choices: `appList`, `dnsAppList`, `dns`, `dscp`, `packetLength`, `plp`, `protocol`, `sourceDataPrefixList`, `sourceIp`, `sourcePort`, `destinationDataPrefixList`, `destinationIp`, `destinationRegion`, `destinationPort`, `tcp`, `trafficTo`, `icmpMessage`
        :param _builtins.str application_list_id: Application list ID, Attribute conditional on `type` being equal to `appList`
        :param _builtins.int application_list_version: Application list version
        :param _builtins.str destination_data_prefix_list_id: Destination Data Prefix list ID, Attribute conditional on `type` being equal to `destinationDataPrefixList`
        :param _builtins.int destination_data_prefix_list_version: Destination Data Prefix list version
        :param _builtins.str destination_ip: Destination IP, Attribute conditional on `type` being equal to `destinationIp`
        :param _builtins.str destination_port: Destination port, 0-65535 (Single value, range or multiple values separated by spaces), Attribute conditional on `type` being equal to `destinationPort`
        :param _builtins.str destination_region: Destination region, Attribute conditional on `type` being equal to `destinationRegion`
                 - Choices: `primary-region`, `secondary-region`, `other-region`
        :param _builtins.str dns: DNS request or response, Attribute conditional on `type` being equal to `dns`
                 - Choices: `request`, `response`
        :param _builtins.str dns_application_list_id: DNS Application list ID, Attribute conditional on `type` being equal to `dnsAppList`
        :param _builtins.int dns_application_list_version: DNS Application list version
        :param _builtins.str dscp: DSCP value, Attribute conditional on `type` being equal to `dscp`
        :param _builtins.str icmp_message: ICMP Message, Attribute conditional on `type` being equal to `icmpMessage`
        :param _builtins.int packet_length: Packet length, Attribute conditional on `type` being equal to `packetLength`
                 - Range: `0`-`65535`
        :param _builtins.str plp: PLP, Attribute conditional on `type` being equal to `plp`
                 - Choices: `low`, `high`
        :param _builtins.str protocol: IP Protocol, 0-255 (Single value or multiple values separated by spaces), Attribute conditional on `type` being equal to `protocol`
        :param _builtins.str source_data_prefix_list_id: Source Data Prefix list ID, Attribute conditional on `type` being equal to `sourceDataPrefixList`
        :param _builtins.int source_data_prefix_list_version: Source Data Prefix list version
        :param _builtins.str source_ip: Source IP, Attribute conditional on `type` being equal to `sourceIp`
        :param _builtins.str source_port: Source port, 0-65535 (Single value, range or multiple values separated by spaces), Attribute conditional on `type` being equal to `sourcePort`
        :param _builtins.str tcp: TCP flags, Attribute conditional on `type` being equal to `tcp`
                 - Choices: `syn`
        :param _builtins.str traffic_to: Traffic to, Attribute conditional on `type` being equal to `trafficTo`
                 - Choices: `access`, `core`, `service`
        """
        pulumi.set(__self__, "type", type)
        if application_list_id is not None:
            pulumi.set(__self__, "application_list_id", application_list_id)
        if application_list_version is not None:
            pulumi.set(__self__, "application_list_version", application_list_version)
        if destination_data_prefix_list_id is not None:
            pulumi.set(__self__, "destination_data_prefix_list_id", destination_data_prefix_list_id)
        if destination_data_prefix_list_version is not None:
            pulumi.set(__self__, "destination_data_prefix_list_version", destination_data_prefix_list_version)
        if destination_ip is not None:
            pulumi.set(__self__, "destination_ip", destination_ip)
        if destination_port is not None:
            pulumi.set(__self__, "destination_port", destination_port)
        if destination_region is not None:
            pulumi.set(__self__, "destination_region", destination_region)
        if dns is not None:
            pulumi.set(__self__, "dns", dns)
        if dns_application_list_id is not None:
            pulumi.set(__self__, "dns_application_list_id", dns_application_list_id)
        if dns_application_list_version is not None:
            pulumi.set(__self__, "dns_application_list_version", dns_application_list_version)
        if dscp is not None:
            pulumi.set(__self__, "dscp", dscp)
        if icmp_message is not None:
            pulumi.set(__self__, "icmp_message", icmp_message)
        if packet_length is not None:
            pulumi.set(__self__, "packet_length", packet_length)
        if plp is not None:
            pulumi.set(__self__, "plp", plp)
        if protocol is not None:
            pulumi.set(__self__, "protocol", protocol)
        if source_data_prefix_list_id is not None:
            pulumi.set(__self__, "source_data_prefix_list_id", source_data_prefix_list_id)
        if source_data_prefix_list_version is not None:
            pulumi.set(__self__, "source_data_prefix_list_version", source_data_prefix_list_version)
        if source_ip is not None:
            pulumi.set(__self__, "source_ip", source_ip)
        if source_port is not None:
            pulumi.set(__self__, "source_port", source_port)
        if tcp is not None:
            pulumi.set(__self__, "tcp", tcp)
        if traffic_to is not None:
            pulumi.set(__self__, "traffic_to", traffic_to)

    @_builtins.property
    @pulumi.getter
    def type(self) -> _builtins.str:
        """
        Type of match entry
          - Choices: `appList`, `dnsAppList`, `dns`, `dscp`, `packetLength`, `plp`, `protocol`, `sourceDataPrefixList`, `sourceIp`, `sourcePort`, `destinationDataPrefixList`, `destinationIp`, `destinationRegion`, `destinationPort`, `tcp`, `trafficTo`, `icmpMessage`
        """
        return pulumi.get(self, "type")

    @_builtins.property
    @pulumi.getter(name="applicationListId")
    def application_list_id(self) -> Optional[_builtins.str]:
        """
        Application list ID, Attribute conditional on `type` being equal to `appList`
        """
        return pulumi.get(self, "application_list_id")

    @_builtins.property
    @pulumi.getter(name="applicationListVersion")
    def application_list_version(self) -> Optional[_builtins.int]:
        """
        Application list version
        """
        return pulumi.get(self, "application_list_version")

    @_builtins.property
    @pulumi.getter(name="destinationDataPrefixListId")
    def destination_data_prefix_list_id(self) -> Optional[_builtins.str]:
        """
        Destination Data Prefix list ID, Attribute conditional on `type` being equal to `destinationDataPrefixList`
        """
        return pulumi.get(self, "destination_data_prefix_list_id")

    @_builtins.property
    @pulumi.getter(name="destinationDataPrefixListVersion")
    def destination_data_prefix_list_version(self) -> Optional[_builtins.int]:
        """
        Destination Data Prefix list version
        """
        return pulumi.get(self, "destination_data_prefix_list_version")

    @_builtins.property
    @pulumi.getter(name="destinationIp")
    def destination_ip(self) -> Optional[_builtins.str]:
        """
        Destination IP, Attribute conditional on `type` being equal to `destinationIp`
        """
        return pulumi.get(self, "destination_ip")

    @_builtins.property
    @pulumi.getter(name="destinationPort")
    def destination_port(self) -> Optional[_builtins.str]:
        """
        Destination port, 0-65535 (Single value, range or multiple values separated by spaces), Attribute conditional on `type` being equal to `destinationPort`
        """
        return pulumi.get(self, "destination_port")

    @_builtins.property
    @pulumi.getter(name="destinationRegion")
    def destination_region(self) -> Optional[_builtins.str]:
        """
        Destination region, Attribute conditional on `type` being equal to `destinationRegion`
          - Choices: `primary-region`, `secondary-region`, `other-region`
        """
        return pulumi.get(self, "destination_region")

    @_builtins.property
    @pulumi.getter
    def dns(self) -> Optional[_builtins.str]:
        """
        DNS request or response, Attribute conditional on `type` being equal to `dns`
          - Choices: `request`, `response`
        """
        return pulumi.get(self, "dns")

    @_builtins.property
    @pulumi.getter(name="dnsApplicationListId")
    def dns_application_list_id(self) -> Optional[_builtins.str]:
        """
        DNS Application list ID, Attribute conditional on `type` being equal to `dnsAppList`
        """
        return pulumi.get(self, "dns_application_list_id")

    @_builtins.property
    @pulumi.getter(name="dnsApplicationListVersion")
    def dns_application_list_version(self) -> Optional[_builtins.int]:
        """
        DNS Application list version
        """
        return pulumi.get(self, "dns_application_list_version")

    @_builtins.property
    @pulumi.getter
    def dscp(self) -> Optional[_builtins.str]:
        """
        DSCP value, Attribute conditional on `type` being equal to `dscp`
        """
        return pulumi.get(self, "dscp")

    @_builtins.property
    @pulumi.getter(name="icmpMessage")
    def icmp_message(self) -> Optional[_builtins.str]:
        """
        ICMP Message, Attribute conditional on `type` being equal to `icmpMessage`
        """
        return pulumi.get(self, "icmp_message")

    @_builtins.property
    @pulumi.getter(name="packetLength")
    def packet_length(self) -> Optional[_builtins.int]:
        """
        Packet length, Attribute conditional on `type` being equal to `packetLength`
          - Range: `0`-`65535`
        """
        return pulumi.get(self, "packet_length")

    @_builtins.property
    @pulumi.getter
    def plp(self) -> Optional[_builtins.str]:
        """
        PLP, Attribute conditional on `type` being equal to `plp`
          - Choices: `low`, `high`
        """
        return pulumi.get(self, "plp")

    @_builtins.property
    @pulumi.getter
    def protocol(self) -> Optional[_builtins.str]:
        """
        IP Protocol, 0-255 (Single value or multiple values separated by spaces), Attribute conditional on `type` being equal to `protocol`
        """
        return pulumi.get(self, "protocol")

    @_builtins.property
    @pulumi.getter(name="sourceDataPrefixListId")
    def source_data_prefix_list_id(self) -> Optional[_builtins.str]:
        """
        Source Data Prefix list ID, Attribute conditional on `type` being equal to `sourceDataPrefixList`
        """
        return pulumi.get(self, "source_data_prefix_list_id")

    @_builtins.property
    @pulumi.getter(name="sourceDataPrefixListVersion")
    def source_data_prefix_list_version(self) -> Optional[_builtins.int]:
        """
        Source Data Prefix list version
        """
        return pulumi.get(self, "source_data_prefix_list_version")

    @_builtins.property
    @pulumi.getter(name="sourceIp")
    def source_ip(self) -> Optional[_builtins.str]:
        """
        Source IP, Attribute conditional on `type` being equal to `sourceIp`
        """
        return pulumi.get(self, "source_ip")

    @_builtins.property
    @pulumi.getter(name="sourcePort")
    def source_port(self) -> Optional[_builtins.str]:
        """
        Source port, 0-65535 (Single value, range or multiple values separated by spaces), Attribute conditional on `type` being equal to `sourcePort`
        """
        return pulumi.get(self, "source_port")

    @_builtins.property
    @pulumi.getter
    def tcp(self) -> Optional[_builtins.str]:
        """
        TCP flags, Attribute conditional on `type` being equal to `tcp`
          - Choices: `syn`
        """
        return pulumi.get(self, "tcp")

    @_builtins.property
    @pulumi.getter(name="trafficTo")
    def traffic_to(self) -> Optional[_builtins.str]:
        """
        Traffic to, Attribute conditional on `type` being equal to `trafficTo`
          - Choices: `access`, `core`, `service`
        """
        return pulumi.get(self, "traffic_to")


@pulumi.output_type
class TransportIpv4AclFeatureSequence(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "baseAction":
            suggest = "base_action"
        elif key == "matchEntries":
            suggest = "match_entries"
        elif key == "sequenceId":
            suggest = "sequence_id"
        elif key == "sequenceName":
            suggest = "sequence_name"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in TransportIpv4AclFeatureSequence. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        TransportIpv4AclFeatureSequence.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        TransportIpv4AclFeatureSequence.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 actions: Optional[Sequence['outputs.TransportIpv4AclFeatureSequenceAction']] = None,
                 base_action: Optional[_builtins.str] = None,
                 match_entries: Optional[Sequence['outputs.TransportIpv4AclFeatureSequenceMatchEntry']] = None,
                 sequence_id: Optional[_builtins.int] = None,
                 sequence_name: Optional[_builtins.str] = None):
        """
        :param Sequence['TransportIpv4AclFeatureSequenceActionArgs'] actions: Define list of actions
        :param _builtins.str base_action: Base Action
                 - Choices: `drop`, `accept`
                 - Default value: `accept`
        :param Sequence['TransportIpv4AclFeatureSequenceMatchEntryArgs'] match_entries: Define match conditions
        :param _builtins.int sequence_id: Sequence Id
                 - Range: `1`-`65536`
        :param _builtins.str sequence_name: Sequence Name
        """
        if actions is not None:
            pulumi.set(__self__, "actions", actions)
        if base_action is not None:
            pulumi.set(__self__, "base_action", base_action)
        if match_entries is not None:
            pulumi.set(__self__, "match_entries", match_entries)
        if sequence_id is not None:
            pulumi.set(__self__, "sequence_id", sequence_id)
        if sequence_name is not None:
            pulumi.set(__self__, "sequence_name", sequence_name)

    @_builtins.property
    @pulumi.getter
    def actions(self) -> Optional[Sequence['outputs.TransportIpv4AclFeatureSequenceAction']]:
        """
        Define list of actions
        """
        return pulumi.get(self, "actions")

    @_builtins.property
    @pulumi.getter(name="baseAction")
    def base_action(self) -> Optional[_builtins.str]:
        """
        Base Action
          - Choices: `drop`, `accept`
          - Default value: `accept`
        """
        return pulumi.get(self, "base_action")

    @_builtins.property
    @pulumi.getter(name="matchEntries")
    def match_entries(self) -> Optional[Sequence['outputs.TransportIpv4AclFeatureSequenceMatchEntry']]:
        """
        Define match conditions
        """
        return pulumi.get(self, "match_entries")

    @_builtins.property
    @pulumi.getter(name="sequenceId")
    def sequence_id(self) -> Optional[_builtins.int]:
        """
        Sequence Id
          - Range: `1`-`65536`
        """
        return pulumi.get(self, "sequence_id")

    @_builtins.property
    @pulumi.getter(name="sequenceName")
    def sequence_name(self) -> Optional[_builtins.str]:
        """
        Sequence Name
        """
        return pulumi.get(self, "sequence_name")


@pulumi.output_type
class TransportIpv4AclFeatureSequenceAction(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "acceptCounterName":
            suggest = "accept_counter_name"
        elif key == "acceptLog":
            suggest = "accept_log"
        elif key == "acceptMirrorListId":
            suggest = "accept_mirror_list_id"
        elif key == "acceptPolicerId":
            suggest = "accept_policer_id"
        elif key == "acceptSetDscp":
            suggest = "accept_set_dscp"
        elif key == "acceptSetNextHop":
            suggest = "accept_set_next_hop"
        elif key == "dropCounterName":
            suggest = "drop_counter_name"
        elif key == "dropLog":
            suggest = "drop_log"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in TransportIpv4AclFeatureSequenceAction. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        TransportIpv4AclFeatureSequenceAction.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        TransportIpv4AclFeatureSequenceAction.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 accept_counter_name: Optional[_builtins.str] = None,
                 accept_log: Optional[_builtins.bool] = None,
                 accept_mirror_list_id: Optional[_builtins.str] = None,
                 accept_policer_id: Optional[_builtins.str] = None,
                 accept_set_dscp: Optional[_builtins.int] = None,
                 accept_set_next_hop: Optional[_builtins.str] = None,
                 drop_counter_name: Optional[_builtins.str] = None,
                 drop_log: Optional[_builtins.bool] = None):
        """
        :param _builtins.str accept_counter_name: Counter Name
        :param _builtins.bool accept_log: Enable Log
                 - Default value: `false`
        :param _builtins.int accept_set_dscp: DSCP number
                 - Range: `0`-`63`
        :param _builtins.str accept_set_next_hop: Set Next Hop (IPV4 address)
        :param _builtins.str drop_counter_name: Counter Name
        :param _builtins.bool drop_log: Enable Log
                 - Default value: `false`
        """
        if accept_counter_name is not None:
            pulumi.set(__self__, "accept_counter_name", accept_counter_name)
        if accept_log is not None:
            pulumi.set(__self__, "accept_log", accept_log)
        if accept_mirror_list_id is not None:
            pulumi.set(__self__, "accept_mirror_list_id", accept_mirror_list_id)
        if accept_policer_id is not None:
            pulumi.set(__self__, "accept_policer_id", accept_policer_id)
        if accept_set_dscp is not None:
            pulumi.set(__self__, "accept_set_dscp", accept_set_dscp)
        if accept_set_next_hop is not None:
            pulumi.set(__self__, "accept_set_next_hop", accept_set_next_hop)
        if drop_counter_name is not None:
            pulumi.set(__self__, "drop_counter_name", drop_counter_name)
        if drop_log is not None:
            pulumi.set(__self__, "drop_log", drop_log)

    @_builtins.property
    @pulumi.getter(name="acceptCounterName")
    def accept_counter_name(self) -> Optional[_builtins.str]:
        """
        Counter Name
        """
        return pulumi.get(self, "accept_counter_name")

    @_builtins.property
    @pulumi.getter(name="acceptLog")
    def accept_log(self) -> Optional[_builtins.bool]:
        """
        Enable Log
          - Default value: `false`
        """
        return pulumi.get(self, "accept_log")

    @_builtins.property
    @pulumi.getter(name="acceptMirrorListId")
    def accept_mirror_list_id(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "accept_mirror_list_id")

    @_builtins.property
    @pulumi.getter(name="acceptPolicerId")
    def accept_policer_id(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "accept_policer_id")

    @_builtins.property
    @pulumi.getter(name="acceptSetDscp")
    def accept_set_dscp(self) -> Optional[_builtins.int]:
        """
        DSCP number
          - Range: `0`-`63`
        """
        return pulumi.get(self, "accept_set_dscp")

    @_builtins.property
    @pulumi.getter(name="acceptSetNextHop")
    def accept_set_next_hop(self) -> Optional[_builtins.str]:
        """
        Set Next Hop (IPV4 address)
        """
        return pulumi.get(self, "accept_set_next_hop")

    @_builtins.property
    @pulumi.getter(name="dropCounterName")
    def drop_counter_name(self) -> Optional[_builtins.str]:
        """
        Counter Name
        """
        return pulumi.get(self, "drop_counter_name")

    @_builtins.property
    @pulumi.getter(name="dropLog")
    def drop_log(self) -> Optional[_builtins.bool]:
        """
        Enable Log
          - Default value: `false`
        """
        return pulumi.get(self, "drop_log")


@pulumi.output_type
class TransportIpv4AclFeatureSequenceMatchEntry(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "destinationDataPrefix":
            suggest = "destination_data_prefix"
        elif key == "destinationDataPrefixListId":
            suggest = "destination_data_prefix_list_id"
        elif key == "destinationDataPrefixVariable":
            suggest = "destination_data_prefix_variable"
        elif key == "destinationPorts":
            suggest = "destination_ports"
        elif key == "icmpMessages":
            suggest = "icmp_messages"
        elif key == "packetLength":
            suggest = "packet_length"
        elif key == "sourceDataPrefix":
            suggest = "source_data_prefix"
        elif key == "sourceDataPrefixListId":
            suggest = "source_data_prefix_list_id"
        elif key == "sourceDataPrefixVariable":
            suggest = "source_data_prefix_variable"
        elif key == "sourcePorts":
            suggest = "source_ports"
        elif key == "tcpState":
            suggest = "tcp_state"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in TransportIpv4AclFeatureSequenceMatchEntry. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        TransportIpv4AclFeatureSequenceMatchEntry.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        TransportIpv4AclFeatureSequenceMatchEntry.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 destination_data_prefix: Optional[_builtins.str] = None,
                 destination_data_prefix_list_id: Optional[_builtins.str] = None,
                 destination_data_prefix_variable: Optional[_builtins.str] = None,
                 destination_ports: Optional[Sequence['outputs.TransportIpv4AclFeatureSequenceMatchEntryDestinationPort']] = None,
                 dscps: Optional[Sequence[_builtins.int]] = None,
                 icmp_messages: Optional[Sequence[_builtins.str]] = None,
                 packet_length: Optional[_builtins.str] = None,
                 protocols: Optional[Sequence[_builtins.int]] = None,
                 source_data_prefix: Optional[_builtins.str] = None,
                 source_data_prefix_list_id: Optional[_builtins.str] = None,
                 source_data_prefix_variable: Optional[_builtins.str] = None,
                 source_ports: Optional[Sequence['outputs.TransportIpv4AclFeatureSequenceMatchEntrySourcePort']] = None,
                 tcp_state: Optional[_builtins.str] = None):
        """
        :param _builtins.str destination_data_prefix: Destination Data IP Prefix
        :param _builtins.str destination_data_prefix_variable: Variable name
        :param Sequence['TransportIpv4AclFeatureSequenceMatchEntryDestinationPortArgs'] destination_ports: Destination Port List
        :param Sequence[_builtins.int] dscps: DSCP number
        :param Sequence[_builtins.str] icmp_messages: ICMP Message
        :param _builtins.str packet_length: Packet Length
        :param Sequence[_builtins.int] protocols: protocol number list with at least one item
        :param _builtins.str source_data_prefix: Source Data IP Prefix
        :param _builtins.str source_data_prefix_variable: Variable name
        :param Sequence['TransportIpv4AclFeatureSequenceMatchEntrySourcePortArgs'] source_ports: Source Port List
        :param _builtins.str tcp_state: TCP States
                 - Choices: `syn`
        """
        if destination_data_prefix is not None:
            pulumi.set(__self__, "destination_data_prefix", destination_data_prefix)
        if destination_data_prefix_list_id is not None:
            pulumi.set(__self__, "destination_data_prefix_list_id", destination_data_prefix_list_id)
        if destination_data_prefix_variable is not None:
            pulumi.set(__self__, "destination_data_prefix_variable", destination_data_prefix_variable)
        if destination_ports is not None:
            pulumi.set(__self__, "destination_ports", destination_ports)
        if dscps is not None:
            pulumi.set(__self__, "dscps", dscps)
        if icmp_messages is not None:
            pulumi.set(__self__, "icmp_messages", icmp_messages)
        if packet_length is not None:
            pulumi.set(__self__, "packet_length", packet_length)
        if protocols is not None:
            pulumi.set(__self__, "protocols", protocols)
        if source_data_prefix is not None:
            pulumi.set(__self__, "source_data_prefix", source_data_prefix)
        if source_data_prefix_list_id is not None:
            pulumi.set(__self__, "source_data_prefix_list_id", source_data_prefix_list_id)
        if source_data_prefix_variable is not None:
            pulumi.set(__self__, "source_data_prefix_variable", source_data_prefix_variable)
        if source_ports is not None:
            pulumi.set(__self__, "source_ports", source_ports)
        if tcp_state is not None:
            pulumi.set(__self__, "tcp_state", tcp_state)

    @_builtins.property
    @pulumi.getter(name="destinationDataPrefix")
    def destination_data_prefix(self) -> Optional[_builtins.str]:
        """
        Destination Data IP Prefix
        """
        return pulumi.get(self, "destination_data_prefix")

    @_builtins.property
    @pulumi.getter(name="destinationDataPrefixListId")
    def destination_data_prefix_list_id(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "destination_data_prefix_list_id")

    @_builtins.property
    @pulumi.getter(name="destinationDataPrefixVariable")
    def destination_data_prefix_variable(self) -> Optional[_builtins.str]:
        """
        Variable name
        """
        return pulumi.get(self, "destination_data_prefix_variable")

    @_builtins.property
    @pulumi.getter(name="destinationPorts")
    def destination_ports(self) -> Optional[Sequence['outputs.TransportIpv4AclFeatureSequenceMatchEntryDestinationPort']]:
        """
        Destination Port List
        """
        return pulumi.get(self, "destination_ports")

    @_builtins.property
    @pulumi.getter
    def dscps(self) -> Optional[Sequence[_builtins.int]]:
        """
        DSCP number
        """
        return pulumi.get(self, "dscps")

    @_builtins.property
    @pulumi.getter(name="icmpMessages")
    def icmp_messages(self) -> Optional[Sequence[_builtins.str]]:
        """
        ICMP Message
        """
        return pulumi.get(self, "icmp_messages")

    @_builtins.property
    @pulumi.getter(name="packetLength")
    def packet_length(self) -> Optional[_builtins.str]:
        """
        Packet Length
        """
        return pulumi.get(self, "packet_length")

    @_builtins.property
    @pulumi.getter
    def protocols(self) -> Optional[Sequence[_builtins.int]]:
        """
        protocol number list with at least one item
        """
        return pulumi.get(self, "protocols")

    @_builtins.property
    @pulumi.getter(name="sourceDataPrefix")
    def source_data_prefix(self) -> Optional[_builtins.str]:
        """
        Source Data IP Prefix
        """
        return pulumi.get(self, "source_data_prefix")

    @_builtins.property
    @pulumi.getter(name="sourceDataPrefixListId")
    def source_data_prefix_list_id(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "source_data_prefix_list_id")

    @_builtins.property
    @pulumi.getter(name="sourceDataPrefixVariable")
    def source_data_prefix_variable(self) -> Optional[_builtins.str]:
        """
        Variable name
        """
        return pulumi.get(self, "source_data_prefix_variable")

    @_builtins.property
    @pulumi.getter(name="sourcePorts")
    def source_ports(self) -> Optional[Sequence['outputs.TransportIpv4AclFeatureSequenceMatchEntrySourcePort']]:
        """
        Source Port List
        """
        return pulumi.get(self, "source_ports")

    @_builtins.property
    @pulumi.getter(name="tcpState")
    def tcp_state(self) -> Optional[_builtins.str]:
        """
        TCP States
          - Choices: `syn`
        """
        return pulumi.get(self, "tcp_state")


@pulumi.output_type
class TransportIpv4AclFeatureSequenceMatchEntryDestinationPort(dict):
    def __init__(__self__, *,
                 port: Optional[_builtins.str] = None):
        """
        :param _builtins.str port: destination port range or individual port number
        """
        if port is not None:
            pulumi.set(__self__, "port", port)

    @_builtins.property
    @pulumi.getter
    def port(self) -> Optional[_builtins.str]:
        """
        destination port range or individual port number
        """
        return pulumi.get(self, "port")


@pulumi.output_type
class TransportIpv4AclFeatureSequenceMatchEntrySourcePort(dict):
    def __init__(__self__, *,
                 port: Optional[_builtins.str] = None):
        """
        :param _builtins.str port: source port range or individual port number
        """
        if port is not None:
            pulumi.set(__self__, "port", port)

    @_builtins.property
    @pulumi.getter
    def port(self) -> Optional[_builtins.str]:
        """
        source port range or individual port number
        """
        return pulumi.get(self, "port")


@pulumi.output_type
class TransportIpv6AclFeatureSequence(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "baseAction":
            suggest = "base_action"
        elif key == "matchEntries":
            suggest = "match_entries"
        elif key == "sequenceId":
            suggest = "sequence_id"
        elif key == "sequenceName":
            suggest = "sequence_name"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in TransportIpv6AclFeatureSequence. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        TransportIpv6AclFeatureSequence.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        TransportIpv6AclFeatureSequence.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 actions: Optional[Sequence['outputs.TransportIpv6AclFeatureSequenceAction']] = None,
                 base_action: Optional[_builtins.str] = None,
                 match_entries: Optional[Sequence['outputs.TransportIpv6AclFeatureSequenceMatchEntry']] = None,
                 sequence_id: Optional[_builtins.int] = None,
                 sequence_name: Optional[_builtins.str] = None):
        """
        :param Sequence['TransportIpv6AclFeatureSequenceActionArgs'] actions: Define list of actions
        :param _builtins.str base_action: Base Action
                 - Choices: `drop`, `accept`
                 - Default value: `accept`
        :param Sequence['TransportIpv6AclFeatureSequenceMatchEntryArgs'] match_entries: Define match conditions
        :param _builtins.int sequence_id: Sequence Id
                 - Range: `1`-`65536`
        :param _builtins.str sequence_name: Sequence Name
        """
        if actions is not None:
            pulumi.set(__self__, "actions", actions)
        if base_action is not None:
            pulumi.set(__self__, "base_action", base_action)
        if match_entries is not None:
            pulumi.set(__self__, "match_entries", match_entries)
        if sequence_id is not None:
            pulumi.set(__self__, "sequence_id", sequence_id)
        if sequence_name is not None:
            pulumi.set(__self__, "sequence_name", sequence_name)

    @_builtins.property
    @pulumi.getter
    def actions(self) -> Optional[Sequence['outputs.TransportIpv6AclFeatureSequenceAction']]:
        """
        Define list of actions
        """
        return pulumi.get(self, "actions")

    @_builtins.property
    @pulumi.getter(name="baseAction")
    def base_action(self) -> Optional[_builtins.str]:
        """
        Base Action
          - Choices: `drop`, `accept`
          - Default value: `accept`
        """
        return pulumi.get(self, "base_action")

    @_builtins.property
    @pulumi.getter(name="matchEntries")
    def match_entries(self) -> Optional[Sequence['outputs.TransportIpv6AclFeatureSequenceMatchEntry']]:
        """
        Define match conditions
        """
        return pulumi.get(self, "match_entries")

    @_builtins.property
    @pulumi.getter(name="sequenceId")
    def sequence_id(self) -> Optional[_builtins.int]:
        """
        Sequence Id
          - Range: `1`-`65536`
        """
        return pulumi.get(self, "sequence_id")

    @_builtins.property
    @pulumi.getter(name="sequenceName")
    def sequence_name(self) -> Optional[_builtins.str]:
        """
        Sequence Name
        """
        return pulumi.get(self, "sequence_name")


@pulumi.output_type
class TransportIpv6AclFeatureSequenceAction(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "acceptCounterName":
            suggest = "accept_counter_name"
        elif key == "acceptLog":
            suggest = "accept_log"
        elif key == "acceptMirrorListId":
            suggest = "accept_mirror_list_id"
        elif key == "acceptPolicerId":
            suggest = "accept_policer_id"
        elif key == "acceptSetNextHop":
            suggest = "accept_set_next_hop"
        elif key == "acceptTrafficClass":
            suggest = "accept_traffic_class"
        elif key == "dropCounterName":
            suggest = "drop_counter_name"
        elif key == "dropLog":
            suggest = "drop_log"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in TransportIpv6AclFeatureSequenceAction. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        TransportIpv6AclFeatureSequenceAction.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        TransportIpv6AclFeatureSequenceAction.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 accept_counter_name: Optional[_builtins.str] = None,
                 accept_log: Optional[_builtins.bool] = None,
                 accept_mirror_list_id: Optional[_builtins.str] = None,
                 accept_policer_id: Optional[_builtins.str] = None,
                 accept_set_next_hop: Optional[_builtins.str] = None,
                 accept_traffic_class: Optional[_builtins.int] = None,
                 drop_counter_name: Optional[_builtins.str] = None,
                 drop_log: Optional[_builtins.bool] = None):
        """
        :param _builtins.str accept_counter_name: Counter Name
        :param _builtins.bool accept_log: Enable Log
                 - Default value: `false`
        :param _builtins.str accept_set_next_hop: Set Next Hop (IPV6 address)
        :param _builtins.int accept_traffic_class: set traffic class number
                 - Range: `0`-`63`
        :param _builtins.str drop_counter_name: Counter Name
        :param _builtins.bool drop_log: Enable Log
                 - Default value: `false`
        """
        if accept_counter_name is not None:
            pulumi.set(__self__, "accept_counter_name", accept_counter_name)
        if accept_log is not None:
            pulumi.set(__self__, "accept_log", accept_log)
        if accept_mirror_list_id is not None:
            pulumi.set(__self__, "accept_mirror_list_id", accept_mirror_list_id)
        if accept_policer_id is not None:
            pulumi.set(__self__, "accept_policer_id", accept_policer_id)
        if accept_set_next_hop is not None:
            pulumi.set(__self__, "accept_set_next_hop", accept_set_next_hop)
        if accept_traffic_class is not None:
            pulumi.set(__self__, "accept_traffic_class", accept_traffic_class)
        if drop_counter_name is not None:
            pulumi.set(__self__, "drop_counter_name", drop_counter_name)
        if drop_log is not None:
            pulumi.set(__self__, "drop_log", drop_log)

    @_builtins.property
    @pulumi.getter(name="acceptCounterName")
    def accept_counter_name(self) -> Optional[_builtins.str]:
        """
        Counter Name
        """
        return pulumi.get(self, "accept_counter_name")

    @_builtins.property
    @pulumi.getter(name="acceptLog")
    def accept_log(self) -> Optional[_builtins.bool]:
        """
        Enable Log
          - Default value: `false`
        """
        return pulumi.get(self, "accept_log")

    @_builtins.property
    @pulumi.getter(name="acceptMirrorListId")
    def accept_mirror_list_id(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "accept_mirror_list_id")

    @_builtins.property
    @pulumi.getter(name="acceptPolicerId")
    def accept_policer_id(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "accept_policer_id")

    @_builtins.property
    @pulumi.getter(name="acceptSetNextHop")
    def accept_set_next_hop(self) -> Optional[_builtins.str]:
        """
        Set Next Hop (IPV6 address)
        """
        return pulumi.get(self, "accept_set_next_hop")

    @_builtins.property
    @pulumi.getter(name="acceptTrafficClass")
    def accept_traffic_class(self) -> Optional[_builtins.int]:
        """
        set traffic class number
          - Range: `0`-`63`
        """
        return pulumi.get(self, "accept_traffic_class")

    @_builtins.property
    @pulumi.getter(name="dropCounterName")
    def drop_counter_name(self) -> Optional[_builtins.str]:
        """
        Counter Name
        """
        return pulumi.get(self, "drop_counter_name")

    @_builtins.property
    @pulumi.getter(name="dropLog")
    def drop_log(self) -> Optional[_builtins.bool]:
        """
        Enable Log
          - Default value: `false`
        """
        return pulumi.get(self, "drop_log")


@pulumi.output_type
class TransportIpv6AclFeatureSequenceMatchEntry(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "destinationDataPrefix":
            suggest = "destination_data_prefix"
        elif key == "destinationDataPrefixListId":
            suggest = "destination_data_prefix_list_id"
        elif key == "destinationPorts":
            suggest = "destination_ports"
        elif key == "icmpMessages":
            suggest = "icmp_messages"
        elif key == "nextHeader":
            suggest = "next_header"
        elif key == "packetLength":
            suggest = "packet_length"
        elif key == "sourceDataPrefix":
            suggest = "source_data_prefix"
        elif key == "sourceDataPrefixListId":
            suggest = "source_data_prefix_list_id"
        elif key == "sourcePorts":
            suggest = "source_ports"
        elif key == "tcpState":
            suggest = "tcp_state"
        elif key == "trafficClasses":
            suggest = "traffic_classes"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in TransportIpv6AclFeatureSequenceMatchEntry. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        TransportIpv6AclFeatureSequenceMatchEntry.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        TransportIpv6AclFeatureSequenceMatchEntry.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 destination_data_prefix: Optional[_builtins.str] = None,
                 destination_data_prefix_list_id: Optional[_builtins.str] = None,
                 destination_ports: Optional[Sequence['outputs.TransportIpv6AclFeatureSequenceMatchEntryDestinationPort']] = None,
                 icmp_messages: Optional[Sequence[_builtins.str]] = None,
                 next_header: Optional[_builtins.int] = None,
                 packet_length: Optional[_builtins.str] = None,
                 source_data_prefix: Optional[_builtins.str] = None,
                 source_data_prefix_list_id: Optional[_builtins.str] = None,
                 source_ports: Optional[Sequence['outputs.TransportIpv6AclFeatureSequenceMatchEntrySourcePort']] = None,
                 tcp_state: Optional[_builtins.str] = None,
                 traffic_classes: Optional[Sequence[_builtins.int]] = None):
        """
        :param _builtins.str destination_data_prefix: Destination Data IP Prefix
        :param Sequence['TransportIpv6AclFeatureSequenceMatchEntryDestinationPortArgs'] destination_ports: Destination Port List
        :param Sequence[_builtins.str] icmp_messages: ICMP6 Message
        :param _builtins.int next_header: next header number
                 - Range: `0`-`255`
        :param _builtins.str packet_length: Packet Length
        :param _builtins.str source_data_prefix: Source Data IP Prefix
        :param Sequence['TransportIpv6AclFeatureSequenceMatchEntrySourcePortArgs'] source_ports: Source Port List
        :param _builtins.str tcp_state: TCP States
                 - Choices: `syn`
        :param Sequence[_builtins.int] traffic_classes: Select Traffic Class
        """
        if destination_data_prefix is not None:
            pulumi.set(__self__, "destination_data_prefix", destination_data_prefix)
        if destination_data_prefix_list_id is not None:
            pulumi.set(__self__, "destination_data_prefix_list_id", destination_data_prefix_list_id)
        if destination_ports is not None:
            pulumi.set(__self__, "destination_ports", destination_ports)
        if icmp_messages is not None:
            pulumi.set(__self__, "icmp_messages", icmp_messages)
        if next_header is not None:
            pulumi.set(__self__, "next_header", next_header)
        if packet_length is not None:
            pulumi.set(__self__, "packet_length", packet_length)
        if source_data_prefix is not None:
            pulumi.set(__self__, "source_data_prefix", source_data_prefix)
        if source_data_prefix_list_id is not None:
            pulumi.set(__self__, "source_data_prefix_list_id", source_data_prefix_list_id)
        if source_ports is not None:
            pulumi.set(__self__, "source_ports", source_ports)
        if tcp_state is not None:
            pulumi.set(__self__, "tcp_state", tcp_state)
        if traffic_classes is not None:
            pulumi.set(__self__, "traffic_classes", traffic_classes)

    @_builtins.property
    @pulumi.getter(name="destinationDataPrefix")
    def destination_data_prefix(self) -> Optional[_builtins.str]:
        """
        Destination Data IP Prefix
        """
        return pulumi.get(self, "destination_data_prefix")

    @_builtins.property
    @pulumi.getter(name="destinationDataPrefixListId")
    def destination_data_prefix_list_id(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "destination_data_prefix_list_id")

    @_builtins.property
    @pulumi.getter(name="destinationPorts")
    def destination_ports(self) -> Optional[Sequence['outputs.TransportIpv6AclFeatureSequenceMatchEntryDestinationPort']]:
        """
        Destination Port List
        """
        return pulumi.get(self, "destination_ports")

    @_builtins.property
    @pulumi.getter(name="icmpMessages")
    def icmp_messages(self) -> Optional[Sequence[_builtins.str]]:
        """
        ICMP6 Message
        """
        return pulumi.get(self, "icmp_messages")

    @_builtins.property
    @pulumi.getter(name="nextHeader")
    def next_header(self) -> Optional[_builtins.int]:
        """
        next header number
          - Range: `0`-`255`
        """
        return pulumi.get(self, "next_header")

    @_builtins.property
    @pulumi.getter(name="packetLength")
    def packet_length(self) -> Optional[_builtins.str]:
        """
        Packet Length
        """
        return pulumi.get(self, "packet_length")

    @_builtins.property
    @pulumi.getter(name="sourceDataPrefix")
    def source_data_prefix(self) -> Optional[_builtins.str]:
        """
        Source Data IP Prefix
        """
        return pulumi.get(self, "source_data_prefix")

    @_builtins.property
    @pulumi.getter(name="sourceDataPrefixListId")
    def source_data_prefix_list_id(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "source_data_prefix_list_id")

    @_builtins.property
    @pulumi.getter(name="sourcePorts")
    def source_ports(self) -> Optional[Sequence['outputs.TransportIpv6AclFeatureSequenceMatchEntrySourcePort']]:
        """
        Source Port List
        """
        return pulumi.get(self, "source_ports")

    @_builtins.property
    @pulumi.getter(name="tcpState")
    def tcp_state(self) -> Optional[_builtins.str]:
        """
        TCP States
          - Choices: `syn`
        """
        return pulumi.get(self, "tcp_state")

    @_builtins.property
    @pulumi.getter(name="trafficClasses")
    def traffic_classes(self) -> Optional[Sequence[_builtins.int]]:
        """
        Select Traffic Class
        """
        return pulumi.get(self, "traffic_classes")


@pulumi.output_type
class TransportIpv6AclFeatureSequenceMatchEntryDestinationPort(dict):
    def __init__(__self__, *,
                 port: Optional[_builtins.str] = None):
        """
        :param _builtins.str port: destination port range or individual port number
        """
        if port is not None:
            pulumi.set(__self__, "port", port)

    @_builtins.property
    @pulumi.getter
    def port(self) -> Optional[_builtins.str]:
        """
        destination port range or individual port number
        """
        return pulumi.get(self, "port")


@pulumi.output_type
class TransportIpv6AclFeatureSequenceMatchEntrySourcePort(dict):
    def __init__(__self__, *,
                 port: Optional[_builtins.str] = None):
        """
        :param _builtins.str port: source port range or individual port number
        """
        if port is not None:
            pulumi.set(__self__, "port", port)

    @_builtins.property
    @pulumi.getter
    def port(self) -> Optional[_builtins.str]:
        """
        source port range or individual port number
        """
        return pulumi.get(self, "port")


@pulumi.output_type
class TransportIpv6TrackerGroupFeatureTrackerElement(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "trackerId":
            suggest = "tracker_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in TransportIpv6TrackerGroupFeatureTrackerElement. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        TransportIpv6TrackerGroupFeatureTrackerElement.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        TransportIpv6TrackerGroupFeatureTrackerElement.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 tracker_id: Optional[_builtins.str] = None):
        if tracker_id is not None:
            pulumi.set(__self__, "tracker_id", tracker_id)

    @_builtins.property
    @pulumi.getter(name="trackerId")
    def tracker_id(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "tracker_id")


@pulumi.output_type
class TransportManagementVpnFeatureIpv4StaticRoute(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "administrativeDistance":
            suggest = "administrative_distance"
        elif key == "administrativeDistanceVariable":
            suggest = "administrative_distance_variable"
        elif key == "networkAddress":
            suggest = "network_address"
        elif key == "networkAddressVariable":
            suggest = "network_address_variable"
        elif key == "nextHops":
            suggest = "next_hops"
        elif key == "subnetMask":
            suggest = "subnet_mask"
        elif key == "subnetMaskVariable":
            suggest = "subnet_mask_variable"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in TransportManagementVpnFeatureIpv4StaticRoute. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        TransportManagementVpnFeatureIpv4StaticRoute.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        TransportManagementVpnFeatureIpv4StaticRoute.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 administrative_distance: Optional[_builtins.int] = None,
                 administrative_distance_variable: Optional[_builtins.str] = None,
                 gateway: Optional[_builtins.str] = None,
                 network_address: Optional[_builtins.str] = None,
                 network_address_variable: Optional[_builtins.str] = None,
                 next_hops: Optional[Sequence['outputs.TransportManagementVpnFeatureIpv4StaticRouteNextHop']] = None,
                 subnet_mask: Optional[_builtins.str] = None,
                 subnet_mask_variable: Optional[_builtins.str] = None):
        """
        :param _builtins.int administrative_distance: Administrative distance, Attribute conditional on `gateway` being equal to `null0`
                 - Range: `1`-`255`
                 - Default value: `1`
        :param _builtins.str administrative_distance_variable: Variable name, Attribute conditional on `gateway` being equal to `null0`
        :param _builtins.str gateway: Gateway
                 - Choices: `nextHop`, `dhcp`, `null0`
                 - Default value: `nextHop`
        :param _builtins.str network_address: IP Address
        :param _builtins.str network_address_variable: Variable name
        :param Sequence['TransportManagementVpnFeatureIpv4StaticRouteNextHopArgs'] next_hops: IPv4 Route Gateway Next Hop, Attribute conditional on `gateway` being equal to `nextHop`
        :param _builtins.str subnet_mask: Subnet Mask
                 - Choices: `255.255.255.255`, `255.255.255.254`, `255.255.255.252`, `255.255.255.248`, `255.255.255.240`, `255.255.255.224`, `255.255.255.192`, `255.255.255.128`, `255.255.255.0`, `255.255.254.0`, `255.255.252.0`, `255.255.248.0`, `255.255.240.0`, `255.255.224.0`, `255.255.192.0`, `255.255.128.0`, `255.255.0.0`, `255.254.0.0`, `255.252.0.0`, `255.240.0.0`, `255.224.0.0`, `255.192.0.0`, `255.128.0.0`, `255.0.0.0`, `254.0.0.0`, `252.0.0.0`, `248.0.0.0`, `240.0.0.0`, `224.0.0.0`, `192.0.0.0`, `128.0.0.0`, `0.0.0.0`
        :param _builtins.str subnet_mask_variable: Variable name
        """
        if administrative_distance is not None:
            pulumi.set(__self__, "administrative_distance", administrative_distance)
        if administrative_distance_variable is not None:
            pulumi.set(__self__, "administrative_distance_variable", administrative_distance_variable)
        if gateway is not None:
            pulumi.set(__self__, "gateway", gateway)
        if network_address is not None:
            pulumi.set(__self__, "network_address", network_address)
        if network_address_variable is not None:
            pulumi.set(__self__, "network_address_variable", network_address_variable)
        if next_hops is not None:
            pulumi.set(__self__, "next_hops", next_hops)
        if subnet_mask is not None:
            pulumi.set(__self__, "subnet_mask", subnet_mask)
        if subnet_mask_variable is not None:
            pulumi.set(__self__, "subnet_mask_variable", subnet_mask_variable)

    @_builtins.property
    @pulumi.getter(name="administrativeDistance")
    def administrative_distance(self) -> Optional[_builtins.int]:
        """
        Administrative distance, Attribute conditional on `gateway` being equal to `null0`
          - Range: `1`-`255`
          - Default value: `1`
        """
        return pulumi.get(self, "administrative_distance")

    @_builtins.property
    @pulumi.getter(name="administrativeDistanceVariable")
    def administrative_distance_variable(self) -> Optional[_builtins.str]:
        """
        Variable name, Attribute conditional on `gateway` being equal to `null0`
        """
        return pulumi.get(self, "administrative_distance_variable")

    @_builtins.property
    @pulumi.getter
    def gateway(self) -> Optional[_builtins.str]:
        """
        Gateway
          - Choices: `nextHop`, `dhcp`, `null0`
          - Default value: `nextHop`
        """
        return pulumi.get(self, "gateway")

    @_builtins.property
    @pulumi.getter(name="networkAddress")
    def network_address(self) -> Optional[_builtins.str]:
        """
        IP Address
        """
        return pulumi.get(self, "network_address")

    @_builtins.property
    @pulumi.getter(name="networkAddressVariable")
    def network_address_variable(self) -> Optional[_builtins.str]:
        """
        Variable name
        """
        return pulumi.get(self, "network_address_variable")

    @_builtins.property
    @pulumi.getter(name="nextHops")
    def next_hops(self) -> Optional[Sequence['outputs.TransportManagementVpnFeatureIpv4StaticRouteNextHop']]:
        """
        IPv4 Route Gateway Next Hop, Attribute conditional on `gateway` being equal to `nextHop`
        """
        return pulumi.get(self, "next_hops")

    @_builtins.property
    @pulumi.getter(name="subnetMask")
    def subnet_mask(self) -> Optional[_builtins.str]:
        """
        Subnet Mask
          - Choices: `255.255.255.255`, `255.255.255.254`, `255.255.255.252`, `255.255.255.248`, `255.255.255.240`, `255.255.255.224`, `255.255.255.192`, `255.255.255.128`, `255.255.255.0`, `255.255.254.0`, `255.255.252.0`, `255.255.248.0`, `255.255.240.0`, `255.255.224.0`, `255.255.192.0`, `255.255.128.0`, `255.255.0.0`, `255.254.0.0`, `255.252.0.0`, `255.240.0.0`, `255.224.0.0`, `255.192.0.0`, `255.128.0.0`, `255.0.0.0`, `254.0.0.0`, `252.0.0.0`, `248.0.0.0`, `240.0.0.0`, `224.0.0.0`, `192.0.0.0`, `128.0.0.0`, `0.0.0.0`
        """
        return pulumi.get(self, "subnet_mask")

    @_builtins.property
    @pulumi.getter(name="subnetMaskVariable")
    def subnet_mask_variable(self) -> Optional[_builtins.str]:
        """
        Variable name
        """
        return pulumi.get(self, "subnet_mask_variable")


@pulumi.output_type
class TransportManagementVpnFeatureIpv4StaticRouteNextHop(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "addressVariable":
            suggest = "address_variable"
        elif key == "administrativeDistance":
            suggest = "administrative_distance"
        elif key == "administrativeDistanceVariable":
            suggest = "administrative_distance_variable"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in TransportManagementVpnFeatureIpv4StaticRouteNextHop. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        TransportManagementVpnFeatureIpv4StaticRouteNextHop.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        TransportManagementVpnFeatureIpv4StaticRouteNextHop.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 address: Optional[_builtins.str] = None,
                 address_variable: Optional[_builtins.str] = None,
                 administrative_distance: Optional[_builtins.int] = None,
                 administrative_distance_variable: Optional[_builtins.str] = None):
        """
        :param _builtins.str address: Address
        :param _builtins.str address_variable: Variable name
        :param _builtins.int administrative_distance: Administrative distance
                 - Range: `1`-`255`
                 - Default value: `1`
        :param _builtins.str administrative_distance_variable: Variable name
        """
        if address is not None:
            pulumi.set(__self__, "address", address)
        if address_variable is not None:
            pulumi.set(__self__, "address_variable", address_variable)
        if administrative_distance is not None:
            pulumi.set(__self__, "administrative_distance", administrative_distance)
        if administrative_distance_variable is not None:
            pulumi.set(__self__, "administrative_distance_variable", administrative_distance_variable)

    @_builtins.property
    @pulumi.getter
    def address(self) -> Optional[_builtins.str]:
        """
        Address
        """
        return pulumi.get(self, "address")

    @_builtins.property
    @pulumi.getter(name="addressVariable")
    def address_variable(self) -> Optional[_builtins.str]:
        """
        Variable name
        """
        return pulumi.get(self, "address_variable")

    @_builtins.property
    @pulumi.getter(name="administrativeDistance")
    def administrative_distance(self) -> Optional[_builtins.int]:
        """
        Administrative distance
          - Range: `1`-`255`
          - Default value: `1`
        """
        return pulumi.get(self, "administrative_distance")

    @_builtins.property
    @pulumi.getter(name="administrativeDistanceVariable")
    def administrative_distance_variable(self) -> Optional[_builtins.str]:
        """
        Variable name
        """
        return pulumi.get(self, "administrative_distance_variable")


@pulumi.output_type
class TransportManagementVpnFeatureIpv6StaticRoute(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "natVariable":
            suggest = "nat_variable"
        elif key == "nextHops":
            suggest = "next_hops"
        elif key == "prefixVariable":
            suggest = "prefix_variable"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in TransportManagementVpnFeatureIpv6StaticRoute. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        TransportManagementVpnFeatureIpv6StaticRoute.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        TransportManagementVpnFeatureIpv6StaticRoute.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 gateway: Optional[_builtins.str] = None,
                 nat: Optional[_builtins.str] = None,
                 nat_variable: Optional[_builtins.str] = None,
                 next_hops: Optional[Sequence['outputs.TransportManagementVpnFeatureIpv6StaticRouteNextHop']] = None,
                 null0: Optional[_builtins.bool] = None,
                 prefix: Optional[_builtins.str] = None,
                 prefix_variable: Optional[_builtins.str] = None):
        """
        :param _builtins.str gateway: Gateway
                 - Choices: `nextHop`, `null0`, `nat`
        :param _builtins.str nat: IPv6 Nat, Attribute conditional on `gateway` being equal to `nat`
                 - Choices: `NAT64`, `NAT66`
        :param _builtins.str nat_variable: Variable name, Attribute conditional on `gateway` being equal to `nat`
        :param Sequence['TransportManagementVpnFeatureIpv6StaticRouteNextHopArgs'] next_hops: IPv6 Route Gateway Next Hop, Attribute conditional on `gateway` being equal to `nextHop`
        :param _builtins.bool null0: IPv6 Route Gateway Next Hop, Attribute conditional on `gateway` being equal to `null0`
        :param _builtins.str prefix: Prefix
        :param _builtins.str prefix_variable: Variable name
        """
        if gateway is not None:
            pulumi.set(__self__, "gateway", gateway)
        if nat is not None:
            pulumi.set(__self__, "nat", nat)
        if nat_variable is not None:
            pulumi.set(__self__, "nat_variable", nat_variable)
        if next_hops is not None:
            pulumi.set(__self__, "next_hops", next_hops)
        if null0 is not None:
            pulumi.set(__self__, "null0", null0)
        if prefix is not None:
            pulumi.set(__self__, "prefix", prefix)
        if prefix_variable is not None:
            pulumi.set(__self__, "prefix_variable", prefix_variable)

    @_builtins.property
    @pulumi.getter
    def gateway(self) -> Optional[_builtins.str]:
        """
        Gateway
          - Choices: `nextHop`, `null0`, `nat`
        """
        return pulumi.get(self, "gateway")

    @_builtins.property
    @pulumi.getter
    def nat(self) -> Optional[_builtins.str]:
        """
        IPv6 Nat, Attribute conditional on `gateway` being equal to `nat`
          - Choices: `NAT64`, `NAT66`
        """
        return pulumi.get(self, "nat")

    @_builtins.property
    @pulumi.getter(name="natVariable")
    def nat_variable(self) -> Optional[_builtins.str]:
        """
        Variable name, Attribute conditional on `gateway` being equal to `nat`
        """
        return pulumi.get(self, "nat_variable")

    @_builtins.property
    @pulumi.getter(name="nextHops")
    def next_hops(self) -> Optional[Sequence['outputs.TransportManagementVpnFeatureIpv6StaticRouteNextHop']]:
        """
        IPv6 Route Gateway Next Hop, Attribute conditional on `gateway` being equal to `nextHop`
        """
        return pulumi.get(self, "next_hops")

    @_builtins.property
    @pulumi.getter
    def null0(self) -> Optional[_builtins.bool]:
        """
        IPv6 Route Gateway Next Hop, Attribute conditional on `gateway` being equal to `null0`
        """
        return pulumi.get(self, "null0")

    @_builtins.property
    @pulumi.getter
    def prefix(self) -> Optional[_builtins.str]:
        """
        Prefix
        """
        return pulumi.get(self, "prefix")

    @_builtins.property
    @pulumi.getter(name="prefixVariable")
    def prefix_variable(self) -> Optional[_builtins.str]:
        """
        Variable name
        """
        return pulumi.get(self, "prefix_variable")


@pulumi.output_type
class TransportManagementVpnFeatureIpv6StaticRouteNextHop(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "addressVariable":
            suggest = "address_variable"
        elif key == "administrativeDistance":
            suggest = "administrative_distance"
        elif key == "administrativeDistanceVariable":
            suggest = "administrative_distance_variable"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in TransportManagementVpnFeatureIpv6StaticRouteNextHop. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        TransportManagementVpnFeatureIpv6StaticRouteNextHop.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        TransportManagementVpnFeatureIpv6StaticRouteNextHop.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 address: Optional[_builtins.str] = None,
                 address_variable: Optional[_builtins.str] = None,
                 administrative_distance: Optional[_builtins.int] = None,
                 administrative_distance_variable: Optional[_builtins.str] = None):
        """
        :param _builtins.str address: Address
        :param _builtins.str address_variable: Variable name
        :param _builtins.int administrative_distance: Administrative distance
                 - Range: `1`-`254`
                 - Default value: `1`
        :param _builtins.str administrative_distance_variable: Variable name
        """
        if address is not None:
            pulumi.set(__self__, "address", address)
        if address_variable is not None:
            pulumi.set(__self__, "address_variable", address_variable)
        if administrative_distance is not None:
            pulumi.set(__self__, "administrative_distance", administrative_distance)
        if administrative_distance_variable is not None:
            pulumi.set(__self__, "administrative_distance_variable", administrative_distance_variable)

    @_builtins.property
    @pulumi.getter
    def address(self) -> Optional[_builtins.str]:
        """
        Address
        """
        return pulumi.get(self, "address")

    @_builtins.property
    @pulumi.getter(name="addressVariable")
    def address_variable(self) -> Optional[_builtins.str]:
        """
        Variable name
        """
        return pulumi.get(self, "address_variable")

    @_builtins.property
    @pulumi.getter(name="administrativeDistance")
    def administrative_distance(self) -> Optional[_builtins.int]:
        """
        Administrative distance
          - Range: `1`-`254`
          - Default value: `1`
        """
        return pulumi.get(self, "administrative_distance")

    @_builtins.property
    @pulumi.getter(name="administrativeDistanceVariable")
    def administrative_distance_variable(self) -> Optional[_builtins.str]:
        """
        Variable name
        """
        return pulumi.get(self, "administrative_distance_variable")


@pulumi.output_type
class TransportManagementVpnFeatureNewHostMapping(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "hostName":
            suggest = "host_name"
        elif key == "hostNameVariable":
            suggest = "host_name_variable"
        elif key == "listOfIpAddresses":
            suggest = "list_of_ip_addresses"
        elif key == "listOfIpAddressesVariable":
            suggest = "list_of_ip_addresses_variable"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in TransportManagementVpnFeatureNewHostMapping. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        TransportManagementVpnFeatureNewHostMapping.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        TransportManagementVpnFeatureNewHostMapping.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 host_name: Optional[_builtins.str] = None,
                 host_name_variable: Optional[_builtins.str] = None,
                 list_of_ip_addresses: Optional[Sequence[_builtins.str]] = None,
                 list_of_ip_addresses_variable: Optional[_builtins.str] = None):
        """
        :param _builtins.str host_name: Hostname
        :param _builtins.str host_name_variable: Variable name
        :param Sequence[_builtins.str] list_of_ip_addresses: List of IP
        :param _builtins.str list_of_ip_addresses_variable: Variable name
        """
        if host_name is not None:
            pulumi.set(__self__, "host_name", host_name)
        if host_name_variable is not None:
            pulumi.set(__self__, "host_name_variable", host_name_variable)
        if list_of_ip_addresses is not None:
            pulumi.set(__self__, "list_of_ip_addresses", list_of_ip_addresses)
        if list_of_ip_addresses_variable is not None:
            pulumi.set(__self__, "list_of_ip_addresses_variable", list_of_ip_addresses_variable)

    @_builtins.property
    @pulumi.getter(name="hostName")
    def host_name(self) -> Optional[_builtins.str]:
        """
        Hostname
        """
        return pulumi.get(self, "host_name")

    @_builtins.property
    @pulumi.getter(name="hostNameVariable")
    def host_name_variable(self) -> Optional[_builtins.str]:
        """
        Variable name
        """
        return pulumi.get(self, "host_name_variable")

    @_builtins.property
    @pulumi.getter(name="listOfIpAddresses")
    def list_of_ip_addresses(self) -> Optional[Sequence[_builtins.str]]:
        """
        List of IP
        """
        return pulumi.get(self, "list_of_ip_addresses")

    @_builtins.property
    @pulumi.getter(name="listOfIpAddressesVariable")
    def list_of_ip_addresses_variable(self) -> Optional[_builtins.str]:
        """
        Variable name
        """
        return pulumi.get(self, "list_of_ip_addresses_variable")


@pulumi.output_type
class TransportManagementVpnInterfaceEthernetFeatureArpEntry(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "ipAddress":
            suggest = "ip_address"
        elif key == "ipAddressVariable":
            suggest = "ip_address_variable"
        elif key == "macAddress":
            suggest = "mac_address"
        elif key == "macAddressVariable":
            suggest = "mac_address_variable"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in TransportManagementVpnInterfaceEthernetFeatureArpEntry. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        TransportManagementVpnInterfaceEthernetFeatureArpEntry.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        TransportManagementVpnInterfaceEthernetFeatureArpEntry.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 ip_address: Optional[_builtins.str] = None,
                 ip_address_variable: Optional[_builtins.str] = None,
                 mac_address: Optional[_builtins.str] = None,
                 mac_address_variable: Optional[_builtins.str] = None):
        """
        :param _builtins.str ip_address: IPV4 Address
        :param _builtins.str ip_address_variable: Variable name
        :param _builtins.str mac_address: MAC Address
        :param _builtins.str mac_address_variable: Variable name
        """
        if ip_address is not None:
            pulumi.set(__self__, "ip_address", ip_address)
        if ip_address_variable is not None:
            pulumi.set(__self__, "ip_address_variable", ip_address_variable)
        if mac_address is not None:
            pulumi.set(__self__, "mac_address", mac_address)
        if mac_address_variable is not None:
            pulumi.set(__self__, "mac_address_variable", mac_address_variable)

    @_builtins.property
    @pulumi.getter(name="ipAddress")
    def ip_address(self) -> Optional[_builtins.str]:
        """
        IPV4 Address
        """
        return pulumi.get(self, "ip_address")

    @_builtins.property
    @pulumi.getter(name="ipAddressVariable")
    def ip_address_variable(self) -> Optional[_builtins.str]:
        """
        Variable name
        """
        return pulumi.get(self, "ip_address_variable")

    @_builtins.property
    @pulumi.getter(name="macAddress")
    def mac_address(self) -> Optional[_builtins.str]:
        """
        MAC Address
        """
        return pulumi.get(self, "mac_address")

    @_builtins.property
    @pulumi.getter(name="macAddressVariable")
    def mac_address_variable(self) -> Optional[_builtins.str]:
        """
        Variable name
        """
        return pulumi.get(self, "mac_address_variable")


@pulumi.output_type
class TransportManagementVpnInterfaceEthernetFeatureIpv4SecondaryAddress(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "addressVariable":
            suggest = "address_variable"
        elif key == "subnetMask":
            suggest = "subnet_mask"
        elif key == "subnetMaskVariable":
            suggest = "subnet_mask_variable"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in TransportManagementVpnInterfaceEthernetFeatureIpv4SecondaryAddress. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        TransportManagementVpnInterfaceEthernetFeatureIpv4SecondaryAddress.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        TransportManagementVpnInterfaceEthernetFeatureIpv4SecondaryAddress.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 address: Optional[_builtins.str] = None,
                 address_variable: Optional[_builtins.str] = None,
                 subnet_mask: Optional[_builtins.str] = None,
                 subnet_mask_variable: Optional[_builtins.str] = None):
        """
        :param _builtins.str address: IpV4 Address
        :param _builtins.str address_variable: Variable name
        :param _builtins.str subnet_mask: Subnet Mask
                 - Choices: `255.255.255.255`, `255.255.255.254`, `255.255.255.252`, `255.255.255.248`, `255.255.255.240`, `255.255.255.224`, `255.255.255.192`, `255.255.255.128`, `255.255.255.0`, `255.255.254.0`, `255.255.252.0`, `255.255.248.0`, `255.255.240.0`, `255.255.224.0`, `255.255.192.0`, `255.255.128.0`, `255.255.0.0`, `255.254.0.0`, `255.252.0.0`, `255.240.0.0`, `255.224.0.0`, `255.192.0.0`, `255.128.0.0`, `255.0.0.0`, `254.0.0.0`, `252.0.0.0`, `248.0.0.0`, `240.0.0.0`, `224.0.0.0`, `192.0.0.0`, `128.0.0.0`, `0.0.0.0`
        :param _builtins.str subnet_mask_variable: Variable name
        """
        if address is not None:
            pulumi.set(__self__, "address", address)
        if address_variable is not None:
            pulumi.set(__self__, "address_variable", address_variable)
        if subnet_mask is not None:
            pulumi.set(__self__, "subnet_mask", subnet_mask)
        if subnet_mask_variable is not None:
            pulumi.set(__self__, "subnet_mask_variable", subnet_mask_variable)

    @_builtins.property
    @pulumi.getter
    def address(self) -> Optional[_builtins.str]:
        """
        IpV4 Address
        """
        return pulumi.get(self, "address")

    @_builtins.property
    @pulumi.getter(name="addressVariable")
    def address_variable(self) -> Optional[_builtins.str]:
        """
        Variable name
        """
        return pulumi.get(self, "address_variable")

    @_builtins.property
    @pulumi.getter(name="subnetMask")
    def subnet_mask(self) -> Optional[_builtins.str]:
        """
        Subnet Mask
          - Choices: `255.255.255.255`, `255.255.255.254`, `255.255.255.252`, `255.255.255.248`, `255.255.255.240`, `255.255.255.224`, `255.255.255.192`, `255.255.255.128`, `255.255.255.0`, `255.255.254.0`, `255.255.252.0`, `255.255.248.0`, `255.255.240.0`, `255.255.224.0`, `255.255.192.0`, `255.255.128.0`, `255.255.0.0`, `255.254.0.0`, `255.252.0.0`, `255.240.0.0`, `255.224.0.0`, `255.192.0.0`, `255.128.0.0`, `255.0.0.0`, `254.0.0.0`, `252.0.0.0`, `248.0.0.0`, `240.0.0.0`, `224.0.0.0`, `192.0.0.0`, `128.0.0.0`, `0.0.0.0`
        """
        return pulumi.get(self, "subnet_mask")

    @_builtins.property
    @pulumi.getter(name="subnetMaskVariable")
    def subnet_mask_variable(self) -> Optional[_builtins.str]:
        """
        Variable name
        """
        return pulumi.get(self, "subnet_mask_variable")


@pulumi.output_type
class TransportRoutePolicyFeatureSequence(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "baseAction":
            suggest = "base_action"
        elif key == "matchEntries":
            suggest = "match_entries"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in TransportRoutePolicyFeatureSequence. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        TransportRoutePolicyFeatureSequence.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        TransportRoutePolicyFeatureSequence.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 actions: Optional[Sequence['outputs.TransportRoutePolicyFeatureSequenceAction']] = None,
                 base_action: Optional[_builtins.str] = None,
                 id: Optional[_builtins.int] = None,
                 match_entries: Optional[Sequence['outputs.TransportRoutePolicyFeatureSequenceMatchEntry']] = None,
                 name: Optional[_builtins.str] = None,
                 protocol: Optional[_builtins.str] = None):
        """
        :param Sequence['TransportRoutePolicyFeatureSequenceActionArgs'] actions: Define list of actions
        :param _builtins.str base_action: Base Action
                 - Choices: `reject`, `accept`
                 - Default value: `reject`
        :param _builtins.int id: Sequence Id
                 - Range: `1`-`65536`
        :param Sequence['TransportRoutePolicyFeatureSequenceMatchEntryArgs'] match_entries: Define match conditions
        :param _builtins.str name: Sequence Name
        :param _builtins.str protocol: protocol such as IPV4, IPV6, or BOTH
                 - Choices: `IPV4`, `IPV6`, `BOTH`
                 - Default value: `IPV4`
        """
        if actions is not None:
            pulumi.set(__self__, "actions", actions)
        if base_action is not None:
            pulumi.set(__self__, "base_action", base_action)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if match_entries is not None:
            pulumi.set(__self__, "match_entries", match_entries)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if protocol is not None:
            pulumi.set(__self__, "protocol", protocol)

    @_builtins.property
    @pulumi.getter
    def actions(self) -> Optional[Sequence['outputs.TransportRoutePolicyFeatureSequenceAction']]:
        """
        Define list of actions
        """
        return pulumi.get(self, "actions")

    @_builtins.property
    @pulumi.getter(name="baseAction")
    def base_action(self) -> Optional[_builtins.str]:
        """
        Base Action
          - Choices: `reject`, `accept`
          - Default value: `reject`
        """
        return pulumi.get(self, "base_action")

    @_builtins.property
    @pulumi.getter
    def id(self) -> Optional[_builtins.int]:
        """
        Sequence Id
          - Range: `1`-`65536`
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter(name="matchEntries")
    def match_entries(self) -> Optional[Sequence['outputs.TransportRoutePolicyFeatureSequenceMatchEntry']]:
        """
        Define match conditions
        """
        return pulumi.get(self, "match_entries")

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[_builtins.str]:
        """
        Sequence Name
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def protocol(self) -> Optional[_builtins.str]:
        """
        protocol such as IPV4, IPV6, or BOTH
          - Choices: `IPV4`, `IPV6`, `BOTH`
          - Default value: `IPV4`
        """
        return pulumi.get(self, "protocol")


@pulumi.output_type
class TransportRoutePolicyFeatureSequenceAction(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "asPathPrepends":
            suggest = "as_path_prepends"
        elif key == "communityAdditive":
            suggest = "community_additive"
        elif key == "communityVariable":
            suggest = "community_variable"
        elif key == "ipv4NextHop":
            suggest = "ipv4_next_hop"
        elif key == "ipv6NextHop":
            suggest = "ipv6_next_hop"
        elif key == "localPreference":
            suggest = "local_preference"
        elif key == "metricType":
            suggest = "metric_type"
        elif key == "ompTag":
            suggest = "omp_tag"
        elif key == "ospfTag":
            suggest = "ospf_tag"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in TransportRoutePolicyFeatureSequenceAction. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        TransportRoutePolicyFeatureSequenceAction.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        TransportRoutePolicyFeatureSequenceAction.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 as_path_prepends: Optional[Sequence[_builtins.int]] = None,
                 communities: Optional[Sequence[_builtins.str]] = None,
                 community_additive: Optional[_builtins.bool] = None,
                 community_variable: Optional[_builtins.str] = None,
                 ipv4_next_hop: Optional[_builtins.str] = None,
                 ipv6_next_hop: Optional[_builtins.str] = None,
                 local_preference: Optional[_builtins.int] = None,
                 metric: Optional[_builtins.int] = None,
                 metric_type: Optional[_builtins.str] = None,
                 omp_tag: Optional[_builtins.int] = None,
                 origin: Optional[_builtins.str] = None,
                 ospf_tag: Optional[_builtins.int] = None,
                 weight: Optional[_builtins.int] = None):
        """
        :param _builtins.bool community_additive: - Default value: `false`
        :param _builtins.str community_variable: Variable name
        :param _builtins.str ipv4_next_hop: Set Ipv4 Next Hop
        :param _builtins.str ipv6_next_hop: Set Ipv6 Next Hop
        :param _builtins.int local_preference: Set Local Preference
                 - Range: `0`-`4294967295`
        :param _builtins.int metric: Set Metric
                 - Range: `0`-`4294967295`
        :param _builtins.str metric_type: Set Metric Type
                 - Choices: `type1`, `type2`
        :param _builtins.int omp_tag: Set OMP Tag
                 - Range: `0`-`4294967295`
        :param _builtins.str origin: Set Origin
                 - Choices: `EGP`, `IGP`, `Incomplete`
        :param _builtins.int ospf_tag: Set OSPF Tag
                 - Range: `0`-`4294967295`
        :param _builtins.int weight: Set Weight
                 - Range: `0`-`65535`
        """
        if as_path_prepends is not None:
            pulumi.set(__self__, "as_path_prepends", as_path_prepends)
        if communities is not None:
            pulumi.set(__self__, "communities", communities)
        if community_additive is not None:
            pulumi.set(__self__, "community_additive", community_additive)
        if community_variable is not None:
            pulumi.set(__self__, "community_variable", community_variable)
        if ipv4_next_hop is not None:
            pulumi.set(__self__, "ipv4_next_hop", ipv4_next_hop)
        if ipv6_next_hop is not None:
            pulumi.set(__self__, "ipv6_next_hop", ipv6_next_hop)
        if local_preference is not None:
            pulumi.set(__self__, "local_preference", local_preference)
        if metric is not None:
            pulumi.set(__self__, "metric", metric)
        if metric_type is not None:
            pulumi.set(__self__, "metric_type", metric_type)
        if omp_tag is not None:
            pulumi.set(__self__, "omp_tag", omp_tag)
        if origin is not None:
            pulumi.set(__self__, "origin", origin)
        if ospf_tag is not None:
            pulumi.set(__self__, "ospf_tag", ospf_tag)
        if weight is not None:
            pulumi.set(__self__, "weight", weight)

    @_builtins.property
    @pulumi.getter(name="asPathPrepends")
    def as_path_prepends(self) -> Optional[Sequence[_builtins.int]]:
        return pulumi.get(self, "as_path_prepends")

    @_builtins.property
    @pulumi.getter
    def communities(self) -> Optional[Sequence[_builtins.str]]:
        return pulumi.get(self, "communities")

    @_builtins.property
    @pulumi.getter(name="communityAdditive")
    def community_additive(self) -> Optional[_builtins.bool]:
        """
        - Default value: `false`
        """
        return pulumi.get(self, "community_additive")

    @_builtins.property
    @pulumi.getter(name="communityVariable")
    def community_variable(self) -> Optional[_builtins.str]:
        """
        Variable name
        """
        return pulumi.get(self, "community_variable")

    @_builtins.property
    @pulumi.getter(name="ipv4NextHop")
    def ipv4_next_hop(self) -> Optional[_builtins.str]:
        """
        Set Ipv4 Next Hop
        """
        return pulumi.get(self, "ipv4_next_hop")

    @_builtins.property
    @pulumi.getter(name="ipv6NextHop")
    def ipv6_next_hop(self) -> Optional[_builtins.str]:
        """
        Set Ipv6 Next Hop
        """
        return pulumi.get(self, "ipv6_next_hop")

    @_builtins.property
    @pulumi.getter(name="localPreference")
    def local_preference(self) -> Optional[_builtins.int]:
        """
        Set Local Preference
          - Range: `0`-`4294967295`
        """
        return pulumi.get(self, "local_preference")

    @_builtins.property
    @pulumi.getter
    def metric(self) -> Optional[_builtins.int]:
        """
        Set Metric
          - Range: `0`-`4294967295`
        """
        return pulumi.get(self, "metric")

    @_builtins.property
    @pulumi.getter(name="metricType")
    def metric_type(self) -> Optional[_builtins.str]:
        """
        Set Metric Type
          - Choices: `type1`, `type2`
        """
        return pulumi.get(self, "metric_type")

    @_builtins.property
    @pulumi.getter(name="ompTag")
    def omp_tag(self) -> Optional[_builtins.int]:
        """
        Set OMP Tag
          - Range: `0`-`4294967295`
        """
        return pulumi.get(self, "omp_tag")

    @_builtins.property
    @pulumi.getter
    def origin(self) -> Optional[_builtins.str]:
        """
        Set Origin
          - Choices: `EGP`, `IGP`, `Incomplete`
        """
        return pulumi.get(self, "origin")

    @_builtins.property
    @pulumi.getter(name="ospfTag")
    def ospf_tag(self) -> Optional[_builtins.int]:
        """
        Set OSPF Tag
          - Range: `0`-`4294967295`
        """
        return pulumi.get(self, "ospf_tag")

    @_builtins.property
    @pulumi.getter
    def weight(self) -> Optional[_builtins.int]:
        """
        Set Weight
          - Range: `0`-`65535`
        """
        return pulumi.get(self, "weight")


@pulumi.output_type
class TransportRoutePolicyFeatureSequenceMatchEntry(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "asPathListId":
            suggest = "as_path_list_id"
        elif key == "bgpLocalPreference":
            suggest = "bgp_local_preference"
        elif key == "expandedCommunityListId":
            suggest = "expanded_community_list_id"
        elif key == "extendedCommunityListId":
            suggest = "extended_community_list_id"
        elif key == "ipv4AddressPrefixListId":
            suggest = "ipv4_address_prefix_list_id"
        elif key == "ipv4NextHopPrefixListId":
            suggest = "ipv4_next_hop_prefix_list_id"
        elif key == "ipv6AddressPrefixListId":
            suggest = "ipv6_address_prefix_list_id"
        elif key == "ipv6NextHopPrefixListId":
            suggest = "ipv6_next_hop_prefix_list_id"
        elif key == "ompTag":
            suggest = "omp_tag"
        elif key == "ospfTag":
            suggest = "ospf_tag"
        elif key == "standardCommunityListCriteria":
            suggest = "standard_community_list_criteria"
        elif key == "standardCommunityLists":
            suggest = "standard_community_lists"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in TransportRoutePolicyFeatureSequenceMatchEntry. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        TransportRoutePolicyFeatureSequenceMatchEntry.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        TransportRoutePolicyFeatureSequenceMatchEntry.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 as_path_list_id: Optional[_builtins.str] = None,
                 bgp_local_preference: Optional[_builtins.int] = None,
                 expanded_community_list_id: Optional[_builtins.str] = None,
                 extended_community_list_id: Optional[_builtins.str] = None,
                 ipv4_address_prefix_list_id: Optional[_builtins.str] = None,
                 ipv4_next_hop_prefix_list_id: Optional[_builtins.str] = None,
                 ipv6_address_prefix_list_id: Optional[_builtins.str] = None,
                 ipv6_next_hop_prefix_list_id: Optional[_builtins.str] = None,
                 metric: Optional[_builtins.int] = None,
                 omp_tag: Optional[_builtins.int] = None,
                 ospf_tag: Optional[_builtins.int] = None,
                 standard_community_list_criteria: Optional[_builtins.str] = None,
                 standard_community_lists: Optional[Sequence['outputs.TransportRoutePolicyFeatureSequenceMatchEntryStandardCommunityList']] = None):
        """
        :param _builtins.int bgp_local_preference: BGP Local Preference
                 - Range: `0`-`4294967295`
        :param _builtins.int metric: Select Metric
                 - Range: `0`-`4294967295`
        :param _builtins.int omp_tag: Select OMP Tag
                 - Range: `0`-`4294967295`
        :param _builtins.int ospf_tag: Select OSPF Tag
                 - Range: `0`-`4294967295`
        :param _builtins.str standard_community_list_criteria: Select a condition such as OR, AND or EXACT
                 - Choices: `OR`, `AND`, `EXACT`
        :param Sequence['TransportRoutePolicyFeatureSequenceMatchEntryStandardCommunityListArgs'] standard_community_lists: Select a standard community list
        """
        if as_path_list_id is not None:
            pulumi.set(__self__, "as_path_list_id", as_path_list_id)
        if bgp_local_preference is not None:
            pulumi.set(__self__, "bgp_local_preference", bgp_local_preference)
        if expanded_community_list_id is not None:
            pulumi.set(__self__, "expanded_community_list_id", expanded_community_list_id)
        if extended_community_list_id is not None:
            pulumi.set(__self__, "extended_community_list_id", extended_community_list_id)
        if ipv4_address_prefix_list_id is not None:
            pulumi.set(__self__, "ipv4_address_prefix_list_id", ipv4_address_prefix_list_id)
        if ipv4_next_hop_prefix_list_id is not None:
            pulumi.set(__self__, "ipv4_next_hop_prefix_list_id", ipv4_next_hop_prefix_list_id)
        if ipv6_address_prefix_list_id is not None:
            pulumi.set(__self__, "ipv6_address_prefix_list_id", ipv6_address_prefix_list_id)
        if ipv6_next_hop_prefix_list_id is not None:
            pulumi.set(__self__, "ipv6_next_hop_prefix_list_id", ipv6_next_hop_prefix_list_id)
        if metric is not None:
            pulumi.set(__self__, "metric", metric)
        if omp_tag is not None:
            pulumi.set(__self__, "omp_tag", omp_tag)
        if ospf_tag is not None:
            pulumi.set(__self__, "ospf_tag", ospf_tag)
        if standard_community_list_criteria is not None:
            pulumi.set(__self__, "standard_community_list_criteria", standard_community_list_criteria)
        if standard_community_lists is not None:
            pulumi.set(__self__, "standard_community_lists", standard_community_lists)

    @_builtins.property
    @pulumi.getter(name="asPathListId")
    def as_path_list_id(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "as_path_list_id")

    @_builtins.property
    @pulumi.getter(name="bgpLocalPreference")
    def bgp_local_preference(self) -> Optional[_builtins.int]:
        """
        BGP Local Preference
          - Range: `0`-`4294967295`
        """
        return pulumi.get(self, "bgp_local_preference")

    @_builtins.property
    @pulumi.getter(name="expandedCommunityListId")
    def expanded_community_list_id(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "expanded_community_list_id")

    @_builtins.property
    @pulumi.getter(name="extendedCommunityListId")
    def extended_community_list_id(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "extended_community_list_id")

    @_builtins.property
    @pulumi.getter(name="ipv4AddressPrefixListId")
    def ipv4_address_prefix_list_id(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "ipv4_address_prefix_list_id")

    @_builtins.property
    @pulumi.getter(name="ipv4NextHopPrefixListId")
    def ipv4_next_hop_prefix_list_id(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "ipv4_next_hop_prefix_list_id")

    @_builtins.property
    @pulumi.getter(name="ipv6AddressPrefixListId")
    def ipv6_address_prefix_list_id(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "ipv6_address_prefix_list_id")

    @_builtins.property
    @pulumi.getter(name="ipv6NextHopPrefixListId")
    def ipv6_next_hop_prefix_list_id(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "ipv6_next_hop_prefix_list_id")

    @_builtins.property
    @pulumi.getter
    def metric(self) -> Optional[_builtins.int]:
        """
        Select Metric
          - Range: `0`-`4294967295`
        """
        return pulumi.get(self, "metric")

    @_builtins.property
    @pulumi.getter(name="ompTag")
    def omp_tag(self) -> Optional[_builtins.int]:
        """
        Select OMP Tag
          - Range: `0`-`4294967295`
        """
        return pulumi.get(self, "omp_tag")

    @_builtins.property
    @pulumi.getter(name="ospfTag")
    def ospf_tag(self) -> Optional[_builtins.int]:
        """
        Select OSPF Tag
          - Range: `0`-`4294967295`
        """
        return pulumi.get(self, "ospf_tag")

    @_builtins.property
    @pulumi.getter(name="standardCommunityListCriteria")
    def standard_community_list_criteria(self) -> Optional[_builtins.str]:
        """
        Select a condition such as OR, AND or EXACT
          - Choices: `OR`, `AND`, `EXACT`
        """
        return pulumi.get(self, "standard_community_list_criteria")

    @_builtins.property
    @pulumi.getter(name="standardCommunityLists")
    def standard_community_lists(self) -> Optional[Sequence['outputs.TransportRoutePolicyFeatureSequenceMatchEntryStandardCommunityList']]:
        """
        Select a standard community list
        """
        return pulumi.get(self, "standard_community_lists")


@pulumi.output_type
class TransportRoutePolicyFeatureSequenceMatchEntryStandardCommunityList(dict):
    def __init__(__self__, *,
                 id: Optional[_builtins.str] = None):
        if id is not None:
            pulumi.set(__self__, "id", id)

    @_builtins.property
    @pulumi.getter
    def id(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "id")


@pulumi.output_type
class TransportRoutingBgpFeatureIpv4AggregateAddress(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "asSetPath":
            suggest = "as_set_path"
        elif key == "asSetPathVariable":
            suggest = "as_set_path_variable"
        elif key == "networkAddress":
            suggest = "network_address"
        elif key == "networkAddressVariable":
            suggest = "network_address_variable"
        elif key == "subnetMask":
            suggest = "subnet_mask"
        elif key == "subnetMaskVariable":
            suggest = "subnet_mask_variable"
        elif key == "summaryOnly":
            suggest = "summary_only"
        elif key == "summaryOnlyVariable":
            suggest = "summary_only_variable"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in TransportRoutingBgpFeatureIpv4AggregateAddress. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        TransportRoutingBgpFeatureIpv4AggregateAddress.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        TransportRoutingBgpFeatureIpv4AggregateAddress.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 as_set_path: Optional[_builtins.bool] = None,
                 as_set_path_variable: Optional[_builtins.str] = None,
                 network_address: Optional[_builtins.str] = None,
                 network_address_variable: Optional[_builtins.str] = None,
                 subnet_mask: Optional[_builtins.str] = None,
                 subnet_mask_variable: Optional[_builtins.str] = None,
                 summary_only: Optional[_builtins.bool] = None,
                 summary_only_variable: Optional[_builtins.str] = None):
        """
        :param _builtins.bool as_set_path: Set AS set path information
                 - Default value: `false`
        :param _builtins.str as_set_path_variable: Variable name
        :param _builtins.str network_address_variable: Variable name
        :param _builtins.str subnet_mask: - Choices: `255.255.255.255`, `255.255.255.254`, `255.255.255.252`, `255.255.255.248`, `255.255.255.240`, `255.255.255.224`, `255.255.255.192`, `255.255.255.128`, `255.255.255.0`, `255.255.254.0`, `255.255.252.0`, `255.255.248.0`, `255.255.240.0`, `255.255.224.0`, `255.255.192.0`, `255.255.128.0`, `255.255.0.0`, `255.254.0.0`, `255.252.0.0`, `255.240.0.0`, `255.224.0.0`, `255.192.0.0`, `255.128.0.0`, `255.0.0.0`, `254.0.0.0`, `252.0.0.0`, `248.0.0.0`, `240.0.0.0`, `224.0.0.0`, `192.0.0.0`, `128.0.0.0`, `0.0.0.0`
        :param _builtins.str subnet_mask_variable: Variable name
        :param _builtins.bool summary_only: Filter out more specific routes from updates
                 - Default value: `false`
        :param _builtins.str summary_only_variable: Variable name
        """
        if as_set_path is not None:
            pulumi.set(__self__, "as_set_path", as_set_path)
        if as_set_path_variable is not None:
            pulumi.set(__self__, "as_set_path_variable", as_set_path_variable)
        if network_address is not None:
            pulumi.set(__self__, "network_address", network_address)
        if network_address_variable is not None:
            pulumi.set(__self__, "network_address_variable", network_address_variable)
        if subnet_mask is not None:
            pulumi.set(__self__, "subnet_mask", subnet_mask)
        if subnet_mask_variable is not None:
            pulumi.set(__self__, "subnet_mask_variable", subnet_mask_variable)
        if summary_only is not None:
            pulumi.set(__self__, "summary_only", summary_only)
        if summary_only_variable is not None:
            pulumi.set(__self__, "summary_only_variable", summary_only_variable)

    @_builtins.property
    @pulumi.getter(name="asSetPath")
    def as_set_path(self) -> Optional[_builtins.bool]:
        """
        Set AS set path information
          - Default value: `false`
        """
        return pulumi.get(self, "as_set_path")

    @_builtins.property
    @pulumi.getter(name="asSetPathVariable")
    def as_set_path_variable(self) -> Optional[_builtins.str]:
        """
        Variable name
        """
        return pulumi.get(self, "as_set_path_variable")

    @_builtins.property
    @pulumi.getter(name="networkAddress")
    def network_address(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "network_address")

    @_builtins.property
    @pulumi.getter(name="networkAddressVariable")
    def network_address_variable(self) -> Optional[_builtins.str]:
        """
        Variable name
        """
        return pulumi.get(self, "network_address_variable")

    @_builtins.property
    @pulumi.getter(name="subnetMask")
    def subnet_mask(self) -> Optional[_builtins.str]:
        """
        - Choices: `255.255.255.255`, `255.255.255.254`, `255.255.255.252`, `255.255.255.248`, `255.255.255.240`, `255.255.255.224`, `255.255.255.192`, `255.255.255.128`, `255.255.255.0`, `255.255.254.0`, `255.255.252.0`, `255.255.248.0`, `255.255.240.0`, `255.255.224.0`, `255.255.192.0`, `255.255.128.0`, `255.255.0.0`, `255.254.0.0`, `255.252.0.0`, `255.240.0.0`, `255.224.0.0`, `255.192.0.0`, `255.128.0.0`, `255.0.0.0`, `254.0.0.0`, `252.0.0.0`, `248.0.0.0`, `240.0.0.0`, `224.0.0.0`, `192.0.0.0`, `128.0.0.0`, `0.0.0.0`
        """
        return pulumi.get(self, "subnet_mask")

    @_builtins.property
    @pulumi.getter(name="subnetMaskVariable")
    def subnet_mask_variable(self) -> Optional[_builtins.str]:
        """
        Variable name
        """
        return pulumi.get(self, "subnet_mask_variable")

    @_builtins.property
    @pulumi.getter(name="summaryOnly")
    def summary_only(self) -> Optional[_builtins.bool]:
        """
        Filter out more specific routes from updates
          - Default value: `false`
        """
        return pulumi.get(self, "summary_only")

    @_builtins.property
    @pulumi.getter(name="summaryOnlyVariable")
    def summary_only_variable(self) -> Optional[_builtins.str]:
        """
        Variable name
        """
        return pulumi.get(self, "summary_only_variable")


@pulumi.output_type
class TransportRoutingBgpFeatureIpv4Neighbor(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "addressFamilies":
            suggest = "address_families"
        elif key == "addressVariable":
            suggest = "address_variable"
        elif key == "allowasInNumber":
            suggest = "allowas_in_number"
        elif key == "allowasInNumberVariable":
            suggest = "allowas_in_number_variable"
        elif key == "asOverride":
            suggest = "as_override"
        elif key == "asOverrideVariable":
            suggest = "as_override_variable"
        elif key == "descriptionVariable":
            suggest = "description_variable"
        elif key == "ebgpMultihop":
            suggest = "ebgp_multihop"
        elif key == "ebgpMultihopVariable":
            suggest = "ebgp_multihop_variable"
        elif key == "explicitNull":
            suggest = "explicit_null"
        elif key == "explicitNullVariable":
            suggest = "explicit_null_variable"
        elif key == "holdTime":
            suggest = "hold_time"
        elif key == "holdTimeVariable":
            suggest = "hold_time_variable"
        elif key == "keepaliveTime":
            suggest = "keepalive_time"
        elif key == "keepaliveTimeVariable":
            suggest = "keepalive_time_variable"
        elif key == "localAs":
            suggest = "local_as"
        elif key == "localAsVariable":
            suggest = "local_as_variable"
        elif key == "nextHopSelf":
            suggest = "next_hop_self"
        elif key == "nextHopSelfVariable":
            suggest = "next_hop_self_variable"
        elif key == "passwordVariable":
            suggest = "password_variable"
        elif key == "remoteAs":
            suggest = "remote_as"
        elif key == "remoteAsVariable":
            suggest = "remote_as_variable"
        elif key == "sendCommunity":
            suggest = "send_community"
        elif key == "sendCommunityVariable":
            suggest = "send_community_variable"
        elif key == "sendExtendedCommunity":
            suggest = "send_extended_community"
        elif key == "sendExtendedCommunityVariable":
            suggest = "send_extended_community_variable"
        elif key == "sendLabel":
            suggest = "send_label"
        elif key == "shutdownVariable":
            suggest = "shutdown_variable"
        elif key == "updateSourceInterface":
            suggest = "update_source_interface"
        elif key == "updateSourceInterfaceVariable":
            suggest = "update_source_interface_variable"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in TransportRoutingBgpFeatureIpv4Neighbor. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        TransportRoutingBgpFeatureIpv4Neighbor.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        TransportRoutingBgpFeatureIpv4Neighbor.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 address: Optional[_builtins.str] = None,
                 address_families: Optional[Sequence['outputs.TransportRoutingBgpFeatureIpv4NeighborAddressFamily']] = None,
                 address_variable: Optional[_builtins.str] = None,
                 allowas_in_number: Optional[_builtins.int] = None,
                 allowas_in_number_variable: Optional[_builtins.str] = None,
                 as_override: Optional[_builtins.bool] = None,
                 as_override_variable: Optional[_builtins.str] = None,
                 description: Optional[_builtins.str] = None,
                 description_variable: Optional[_builtins.str] = None,
                 ebgp_multihop: Optional[_builtins.int] = None,
                 ebgp_multihop_variable: Optional[_builtins.str] = None,
                 explicit_null: Optional[_builtins.bool] = None,
                 explicit_null_variable: Optional[_builtins.str] = None,
                 hold_time: Optional[_builtins.int] = None,
                 hold_time_variable: Optional[_builtins.str] = None,
                 keepalive_time: Optional[_builtins.int] = None,
                 keepalive_time_variable: Optional[_builtins.str] = None,
                 local_as: Optional[_builtins.int] = None,
                 local_as_variable: Optional[_builtins.str] = None,
                 next_hop_self: Optional[_builtins.bool] = None,
                 next_hop_self_variable: Optional[_builtins.str] = None,
                 password: Optional[_builtins.str] = None,
                 password_variable: Optional[_builtins.str] = None,
                 remote_as: Optional[_builtins.int] = None,
                 remote_as_variable: Optional[_builtins.str] = None,
                 send_community: Optional[_builtins.bool] = None,
                 send_community_variable: Optional[_builtins.str] = None,
                 send_extended_community: Optional[_builtins.bool] = None,
                 send_extended_community_variable: Optional[_builtins.str] = None,
                 send_label: Optional[_builtins.bool] = None,
                 shutdown: Optional[_builtins.bool] = None,
                 shutdown_variable: Optional[_builtins.str] = None,
                 update_source_interface: Optional[_builtins.str] = None,
                 update_source_interface_variable: Optional[_builtins.str] = None):
        """
        :param _builtins.str address: Set neighbor address
        :param Sequence['TransportRoutingBgpFeatureIpv4NeighborAddressFamilyArgs'] address_families: Set BGP address family
        :param _builtins.str address_variable: Variable name
        :param _builtins.int allowas_in_number: The number of accept as-path with my AS present in it
                 - Range: `1`-`10`
        :param _builtins.str allowas_in_number_variable: Variable name
        :param _builtins.bool as_override: Override matching AS-number while sending update
                 - Default value: `false`
        :param _builtins.str as_override_variable: Variable name
        :param _builtins.str description: Set description
        :param _builtins.str description_variable: Variable name
        :param _builtins.int ebgp_multihop: Set TTL value for peers that are not directly connected
                 - Range: `1`-`255`
                 - Default value: `1`
        :param _builtins.str ebgp_multihop_variable: Variable name
        :param _builtins.bool explicit_null: Send explicit null label
                 - Default value: `false`
        :param _builtins.str explicit_null_variable: Variable name
        :param _builtins.int hold_time: Set how long to wait since receiving a keepalive message to consider BGP peer unavailable
                 - Range: `0`-`65535`
                 - Default value: `180`
        :param _builtins.str hold_time_variable: Variable name
        :param _builtins.int keepalive_time: Set how often to advertise keepalive messages to BGP peer
                 - Range: `0`-`65535`
                 - Default value: `60`
        :param _builtins.str keepalive_time_variable: Variable name
        :param _builtins.int local_as: Set local autonomous number,Local-AS cannot have the local BGP protocol AS number or the AS number of the remote peer.The local-as is valid only if the peer is a true eBGP peer. It does not work for two peers in different sub-ASs in a confederation.
        :param _builtins.str local_as_variable: Variable name
        :param _builtins.bool next_hop_self: Set router to be next hop for routes advertised to neighbor
                 - Default value: `false`
        :param _builtins.str next_hop_self_variable: Variable name
        :param _builtins.str password: Set MD5 password on TCP connection with BGP peer
        :param _builtins.str password_variable: Variable name
        :param _builtins.int remote_as: Set remote autonomous system number
        :param _builtins.str remote_as_variable: Variable name
        :param _builtins.bool send_community: Send community attribute
                 - Default value: `true`
        :param _builtins.str send_community_variable: Variable name
        :param _builtins.bool send_extended_community: Send extended community attribute
                 - Default value: `true`
        :param _builtins.str send_extended_community_variable: Variable name
        :param _builtins.bool send_label: Send label
                 - Default value: `false`
        :param _builtins.bool shutdown: Enable or disable a BGP neighbor
                 - Default value: `false`
        :param _builtins.str shutdown_variable: Variable name
        :param _builtins.str update_source_interface: Source interface name for BGP neighbor
        :param _builtins.str update_source_interface_variable: Variable name
        """
        if address is not None:
            pulumi.set(__self__, "address", address)
        if address_families is not None:
            pulumi.set(__self__, "address_families", address_families)
        if address_variable is not None:
            pulumi.set(__self__, "address_variable", address_variable)
        if allowas_in_number is not None:
            pulumi.set(__self__, "allowas_in_number", allowas_in_number)
        if allowas_in_number_variable is not None:
            pulumi.set(__self__, "allowas_in_number_variable", allowas_in_number_variable)
        if as_override is not None:
            pulumi.set(__self__, "as_override", as_override)
        if as_override_variable is not None:
            pulumi.set(__self__, "as_override_variable", as_override_variable)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if description_variable is not None:
            pulumi.set(__self__, "description_variable", description_variable)
        if ebgp_multihop is not None:
            pulumi.set(__self__, "ebgp_multihop", ebgp_multihop)
        if ebgp_multihop_variable is not None:
            pulumi.set(__self__, "ebgp_multihop_variable", ebgp_multihop_variable)
        if explicit_null is not None:
            pulumi.set(__self__, "explicit_null", explicit_null)
        if explicit_null_variable is not None:
            pulumi.set(__self__, "explicit_null_variable", explicit_null_variable)
        if hold_time is not None:
            pulumi.set(__self__, "hold_time", hold_time)
        if hold_time_variable is not None:
            pulumi.set(__self__, "hold_time_variable", hold_time_variable)
        if keepalive_time is not None:
            pulumi.set(__self__, "keepalive_time", keepalive_time)
        if keepalive_time_variable is not None:
            pulumi.set(__self__, "keepalive_time_variable", keepalive_time_variable)
        if local_as is not None:
            pulumi.set(__self__, "local_as", local_as)
        if local_as_variable is not None:
            pulumi.set(__self__, "local_as_variable", local_as_variable)
        if next_hop_self is not None:
            pulumi.set(__self__, "next_hop_self", next_hop_self)
        if next_hop_self_variable is not None:
            pulumi.set(__self__, "next_hop_self_variable", next_hop_self_variable)
        if password is not None:
            pulumi.set(__self__, "password", password)
        if password_variable is not None:
            pulumi.set(__self__, "password_variable", password_variable)
        if remote_as is not None:
            pulumi.set(__self__, "remote_as", remote_as)
        if remote_as_variable is not None:
            pulumi.set(__self__, "remote_as_variable", remote_as_variable)
        if send_community is not None:
            pulumi.set(__self__, "send_community", send_community)
        if send_community_variable is not None:
            pulumi.set(__self__, "send_community_variable", send_community_variable)
        if send_extended_community is not None:
            pulumi.set(__self__, "send_extended_community", send_extended_community)
        if send_extended_community_variable is not None:
            pulumi.set(__self__, "send_extended_community_variable", send_extended_community_variable)
        if send_label is not None:
            pulumi.set(__self__, "send_label", send_label)
        if shutdown is not None:
            pulumi.set(__self__, "shutdown", shutdown)
        if shutdown_variable is not None:
            pulumi.set(__self__, "shutdown_variable", shutdown_variable)
        if update_source_interface is not None:
            pulumi.set(__self__, "update_source_interface", update_source_interface)
        if update_source_interface_variable is not None:
            pulumi.set(__self__, "update_source_interface_variable", update_source_interface_variable)

    @_builtins.property
    @pulumi.getter
    def address(self) -> Optional[_builtins.str]:
        """
        Set neighbor address
        """
        return pulumi.get(self, "address")

    @_builtins.property
    @pulumi.getter(name="addressFamilies")
    def address_families(self) -> Optional[Sequence['outputs.TransportRoutingBgpFeatureIpv4NeighborAddressFamily']]:
        """
        Set BGP address family
        """
        return pulumi.get(self, "address_families")

    @_builtins.property
    @pulumi.getter(name="addressVariable")
    def address_variable(self) -> Optional[_builtins.str]:
        """
        Variable name
        """
        return pulumi.get(self, "address_variable")

    @_builtins.property
    @pulumi.getter(name="allowasInNumber")
    def allowas_in_number(self) -> Optional[_builtins.int]:
        """
        The number of accept as-path with my AS present in it
          - Range: `1`-`10`
        """
        return pulumi.get(self, "allowas_in_number")

    @_builtins.property
    @pulumi.getter(name="allowasInNumberVariable")
    def allowas_in_number_variable(self) -> Optional[_builtins.str]:
        """
        Variable name
        """
        return pulumi.get(self, "allowas_in_number_variable")

    @_builtins.property
    @pulumi.getter(name="asOverride")
    def as_override(self) -> Optional[_builtins.bool]:
        """
        Override matching AS-number while sending update
          - Default value: `false`
        """
        return pulumi.get(self, "as_override")

    @_builtins.property
    @pulumi.getter(name="asOverrideVariable")
    def as_override_variable(self) -> Optional[_builtins.str]:
        """
        Variable name
        """
        return pulumi.get(self, "as_override_variable")

    @_builtins.property
    @pulumi.getter
    def description(self) -> Optional[_builtins.str]:
        """
        Set description
        """
        return pulumi.get(self, "description")

    @_builtins.property
    @pulumi.getter(name="descriptionVariable")
    def description_variable(self) -> Optional[_builtins.str]:
        """
        Variable name
        """
        return pulumi.get(self, "description_variable")

    @_builtins.property
    @pulumi.getter(name="ebgpMultihop")
    def ebgp_multihop(self) -> Optional[_builtins.int]:
        """
        Set TTL value for peers that are not directly connected
          - Range: `1`-`255`
          - Default value: `1`
        """
        return pulumi.get(self, "ebgp_multihop")

    @_builtins.property
    @pulumi.getter(name="ebgpMultihopVariable")
    def ebgp_multihop_variable(self) -> Optional[_builtins.str]:
        """
        Variable name
        """
        return pulumi.get(self, "ebgp_multihop_variable")

    @_builtins.property
    @pulumi.getter(name="explicitNull")
    def explicit_null(self) -> Optional[_builtins.bool]:
        """
        Send explicit null label
          - Default value: `false`
        """
        return pulumi.get(self, "explicit_null")

    @_builtins.property
    @pulumi.getter(name="explicitNullVariable")
    def explicit_null_variable(self) -> Optional[_builtins.str]:
        """
        Variable name
        """
        return pulumi.get(self, "explicit_null_variable")

    @_builtins.property
    @pulumi.getter(name="holdTime")
    def hold_time(self) -> Optional[_builtins.int]:
        """
        Set how long to wait since receiving a keepalive message to consider BGP peer unavailable
          - Range: `0`-`65535`
          - Default value: `180`
        """
        return pulumi.get(self, "hold_time")

    @_builtins.property
    @pulumi.getter(name="holdTimeVariable")
    def hold_time_variable(self) -> Optional[_builtins.str]:
        """
        Variable name
        """
        return pulumi.get(self, "hold_time_variable")

    @_builtins.property
    @pulumi.getter(name="keepaliveTime")
    def keepalive_time(self) -> Optional[_builtins.int]:
        """
        Set how often to advertise keepalive messages to BGP peer
          - Range: `0`-`65535`
          - Default value: `60`
        """
        return pulumi.get(self, "keepalive_time")

    @_builtins.property
    @pulumi.getter(name="keepaliveTimeVariable")
    def keepalive_time_variable(self) -> Optional[_builtins.str]:
        """
        Variable name
        """
        return pulumi.get(self, "keepalive_time_variable")

    @_builtins.property
    @pulumi.getter(name="localAs")
    def local_as(self) -> Optional[_builtins.int]:
        """
        Set local autonomous number,Local-AS cannot have the local BGP protocol AS number or the AS number of the remote peer.The local-as is valid only if the peer is a true eBGP peer. It does not work for two peers in different sub-ASs in a confederation.
        """
        return pulumi.get(self, "local_as")

    @_builtins.property
    @pulumi.getter(name="localAsVariable")
    def local_as_variable(self) -> Optional[_builtins.str]:
        """
        Variable name
        """
        return pulumi.get(self, "local_as_variable")

    @_builtins.property
    @pulumi.getter(name="nextHopSelf")
    def next_hop_self(self) -> Optional[_builtins.bool]:
        """
        Set router to be next hop for routes advertised to neighbor
          - Default value: `false`
        """
        return pulumi.get(self, "next_hop_self")

    @_builtins.property
    @pulumi.getter(name="nextHopSelfVariable")
    def next_hop_self_variable(self) -> Optional[_builtins.str]:
        """
        Variable name
        """
        return pulumi.get(self, "next_hop_self_variable")

    @_builtins.property
    @pulumi.getter
    def password(self) -> Optional[_builtins.str]:
        """
        Set MD5 password on TCP connection with BGP peer
        """
        return pulumi.get(self, "password")

    @_builtins.property
    @pulumi.getter(name="passwordVariable")
    def password_variable(self) -> Optional[_builtins.str]:
        """
        Variable name
        """
        return pulumi.get(self, "password_variable")

    @_builtins.property
    @pulumi.getter(name="remoteAs")
    def remote_as(self) -> Optional[_builtins.int]:
        """
        Set remote autonomous system number
        """
        return pulumi.get(self, "remote_as")

    @_builtins.property
    @pulumi.getter(name="remoteAsVariable")
    def remote_as_variable(self) -> Optional[_builtins.str]:
        """
        Variable name
        """
        return pulumi.get(self, "remote_as_variable")

    @_builtins.property
    @pulumi.getter(name="sendCommunity")
    def send_community(self) -> Optional[_builtins.bool]:
        """
        Send community attribute
          - Default value: `true`
        """
        return pulumi.get(self, "send_community")

    @_builtins.property
    @pulumi.getter(name="sendCommunityVariable")
    def send_community_variable(self) -> Optional[_builtins.str]:
        """
        Variable name
        """
        return pulumi.get(self, "send_community_variable")

    @_builtins.property
    @pulumi.getter(name="sendExtendedCommunity")
    def send_extended_community(self) -> Optional[_builtins.bool]:
        """
        Send extended community attribute
          - Default value: `true`
        """
        return pulumi.get(self, "send_extended_community")

    @_builtins.property
    @pulumi.getter(name="sendExtendedCommunityVariable")
    def send_extended_community_variable(self) -> Optional[_builtins.str]:
        """
        Variable name
        """
        return pulumi.get(self, "send_extended_community_variable")

    @_builtins.property
    @pulumi.getter(name="sendLabel")
    def send_label(self) -> Optional[_builtins.bool]:
        """
        Send label
          - Default value: `false`
        """
        return pulumi.get(self, "send_label")

    @_builtins.property
    @pulumi.getter
    def shutdown(self) -> Optional[_builtins.bool]:
        """
        Enable or disable a BGP neighbor
          - Default value: `false`
        """
        return pulumi.get(self, "shutdown")

    @_builtins.property
    @pulumi.getter(name="shutdownVariable")
    def shutdown_variable(self) -> Optional[_builtins.str]:
        """
        Variable name
        """
        return pulumi.get(self, "shutdown_variable")

    @_builtins.property
    @pulumi.getter(name="updateSourceInterface")
    def update_source_interface(self) -> Optional[_builtins.str]:
        """
        Source interface name for BGP neighbor
        """
        return pulumi.get(self, "update_source_interface")

    @_builtins.property
    @pulumi.getter(name="updateSourceInterfaceVariable")
    def update_source_interface_variable(self) -> Optional[_builtins.str]:
        """
        Variable name
        """
        return pulumi.get(self, "update_source_interface_variable")


@pulumi.output_type
class TransportRoutingBgpFeatureIpv4NeighborAddressFamily(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "disablePeerMaxNumberOfPrefixes":
            suggest = "disable_peer_max_number_of_prefixes"
        elif key == "disablePeerMaxNumberOfPrefixesVariable":
            suggest = "disable_peer_max_number_of_prefixes_variable"
        elif key == "disablePeerThreshold":
            suggest = "disable_peer_threshold"
        elif key == "disablePeerThresholdVariable":
            suggest = "disable_peer_threshold_variable"
        elif key == "familyType":
            suggest = "family_type"
        elif key == "inRoutePolicyId":
            suggest = "in_route_policy_id"
        elif key == "outRoutePolicyId":
            suggest = "out_route_policy_id"
        elif key == "policyType":
            suggest = "policy_type"
        elif key == "restartInterval":
            suggest = "restart_interval"
        elif key == "restartIntervalVariable":
            suggest = "restart_interval_variable"
        elif key == "restartMaxNumberOfPrefixes":
            suggest = "restart_max_number_of_prefixes"
        elif key == "restartMaxNumberOfPrefixesVariable":
            suggest = "restart_max_number_of_prefixes_variable"
        elif key == "restartThreshold":
            suggest = "restart_threshold"
        elif key == "restartThresholdVariable":
            suggest = "restart_threshold_variable"
        elif key == "warningMessageMaxNumberOfPrefixes":
            suggest = "warning_message_max_number_of_prefixes"
        elif key == "warningMessageMaxNumberOfPrefixesVariable":
            suggest = "warning_message_max_number_of_prefixes_variable"
        elif key == "warningMessageThreshold":
            suggest = "warning_message_threshold"
        elif key == "warningMessageThresholdVariable":
            suggest = "warning_message_threshold_variable"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in TransportRoutingBgpFeatureIpv4NeighborAddressFamily. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        TransportRoutingBgpFeatureIpv4NeighborAddressFamily.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        TransportRoutingBgpFeatureIpv4NeighborAddressFamily.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 disable_peer_max_number_of_prefixes: Optional[_builtins.int] = None,
                 disable_peer_max_number_of_prefixes_variable: Optional[_builtins.str] = None,
                 disable_peer_threshold: Optional[_builtins.int] = None,
                 disable_peer_threshold_variable: Optional[_builtins.str] = None,
                 family_type: Optional[_builtins.str] = None,
                 in_route_policy_id: Optional[_builtins.str] = None,
                 out_route_policy_id: Optional[_builtins.str] = None,
                 policy_type: Optional[_builtins.str] = None,
                 restart_interval: Optional[_builtins.int] = None,
                 restart_interval_variable: Optional[_builtins.str] = None,
                 restart_max_number_of_prefixes: Optional[_builtins.int] = None,
                 restart_max_number_of_prefixes_variable: Optional[_builtins.str] = None,
                 restart_threshold: Optional[_builtins.int] = None,
                 restart_threshold_variable: Optional[_builtins.str] = None,
                 warning_message_max_number_of_prefixes: Optional[_builtins.int] = None,
                 warning_message_max_number_of_prefixes_variable: Optional[_builtins.str] = None,
                 warning_message_threshold: Optional[_builtins.int] = None,
                 warning_message_threshold_variable: Optional[_builtins.str] = None):
        """
        :param _builtins.int disable_peer_max_number_of_prefixes: Set maximum number of prefixes accepted from BGP peer, Attribute conditional on `policy_type` being equal to `disable-peer`
                 - Range: `1`-`4294967295`
        :param _builtins.str disable_peer_max_number_of_prefixes_variable: Variable name, Attribute conditional on `policy_type` being equal to `disable-peer`
        :param _builtins.int disable_peer_threshold: Set threshold(1 to 100) at which to generate a warning message, Attribute conditional on `policy_type` being equal to `disable-peer`
                 - Range: `1`-`100`
                 - Default value: `75`
        :param _builtins.str disable_peer_threshold_variable: Variable name, Attribute conditional on `policy_type` being equal to `disable-peer`
        :param _builtins.str family_type: Set IPv4 unicast address family
                 - Choices: `ipv4-unicast`, `vpnv4-unicast`, `vpnv6-unicast`
        :param _builtins.str policy_type: Neighbor received maximum prefix policy is disabled.
                 - Choices: `restart`, `off`, `warning-only`, `disable-peer`
        :param _builtins.int restart_interval: Set the restart interval(minutes) when to restart BGP connection if threshold is exceeded, Attribute conditional on `policy_type` being equal to `restart`
                 - Range: `1`-`65535`
        :param _builtins.str restart_interval_variable: Variable name, Attribute conditional on `policy_type` being equal to `restart`
        :param _builtins.int restart_max_number_of_prefixes: Set maximum number of prefixes accepted from BGP peer, Attribute conditional on `policy_type` being equal to `restart`
                 - Range: `1`-`4294967295`
        :param _builtins.str restart_max_number_of_prefixes_variable: Variable name, Attribute conditional on `policy_type` being equal to `restart`
        :param _builtins.int restart_threshold: Set threshold(1 to 100) at which to generate a warning message, Attribute conditional on `policy_type` being equal to `restart`
                 - Range: `1`-`100`
                 - Default value: `75`
        :param _builtins.str restart_threshold_variable: Variable name, Attribute conditional on `policy_type` being equal to `restart`
        :param _builtins.int warning_message_max_number_of_prefixes: Set maximum number of prefixes accepted from BGP peer, Attribute conditional on `policy_type` being equal to `warning-only`
                 - Range: `1`-`4294967295`
        :param _builtins.str warning_message_max_number_of_prefixes_variable: Variable name, Attribute conditional on `policy_type` being equal to `warning-only`
        :param _builtins.int warning_message_threshold: Set threshold(1 to 100) at which to generate a warning message, Attribute conditional on `policy_type` being equal to `warning-only`
                 - Range: `1`-`100`
                 - Default value: `75`
        :param _builtins.str warning_message_threshold_variable: Variable name, Attribute conditional on `policy_type` being equal to `warning-only`
        """
        if disable_peer_max_number_of_prefixes is not None:
            pulumi.set(__self__, "disable_peer_max_number_of_prefixes", disable_peer_max_number_of_prefixes)
        if disable_peer_max_number_of_prefixes_variable is not None:
            pulumi.set(__self__, "disable_peer_max_number_of_prefixes_variable", disable_peer_max_number_of_prefixes_variable)
        if disable_peer_threshold is not None:
            pulumi.set(__self__, "disable_peer_threshold", disable_peer_threshold)
        if disable_peer_threshold_variable is not None:
            pulumi.set(__self__, "disable_peer_threshold_variable", disable_peer_threshold_variable)
        if family_type is not None:
            pulumi.set(__self__, "family_type", family_type)
        if in_route_policy_id is not None:
            pulumi.set(__self__, "in_route_policy_id", in_route_policy_id)
        if out_route_policy_id is not None:
            pulumi.set(__self__, "out_route_policy_id", out_route_policy_id)
        if policy_type is not None:
            pulumi.set(__self__, "policy_type", policy_type)
        if restart_interval is not None:
            pulumi.set(__self__, "restart_interval", restart_interval)
        if restart_interval_variable is not None:
            pulumi.set(__self__, "restart_interval_variable", restart_interval_variable)
        if restart_max_number_of_prefixes is not None:
            pulumi.set(__self__, "restart_max_number_of_prefixes", restart_max_number_of_prefixes)
        if restart_max_number_of_prefixes_variable is not None:
            pulumi.set(__self__, "restart_max_number_of_prefixes_variable", restart_max_number_of_prefixes_variable)
        if restart_threshold is not None:
            pulumi.set(__self__, "restart_threshold", restart_threshold)
        if restart_threshold_variable is not None:
            pulumi.set(__self__, "restart_threshold_variable", restart_threshold_variable)
        if warning_message_max_number_of_prefixes is not None:
            pulumi.set(__self__, "warning_message_max_number_of_prefixes", warning_message_max_number_of_prefixes)
        if warning_message_max_number_of_prefixes_variable is not None:
            pulumi.set(__self__, "warning_message_max_number_of_prefixes_variable", warning_message_max_number_of_prefixes_variable)
        if warning_message_threshold is not None:
            pulumi.set(__self__, "warning_message_threshold", warning_message_threshold)
        if warning_message_threshold_variable is not None:
            pulumi.set(__self__, "warning_message_threshold_variable", warning_message_threshold_variable)

    @_builtins.property
    @pulumi.getter(name="disablePeerMaxNumberOfPrefixes")
    def disable_peer_max_number_of_prefixes(self) -> Optional[_builtins.int]:
        """
        Set maximum number of prefixes accepted from BGP peer, Attribute conditional on `policy_type` being equal to `disable-peer`
          - Range: `1`-`4294967295`
        """
        return pulumi.get(self, "disable_peer_max_number_of_prefixes")

    @_builtins.property
    @pulumi.getter(name="disablePeerMaxNumberOfPrefixesVariable")
    def disable_peer_max_number_of_prefixes_variable(self) -> Optional[_builtins.str]:
        """
        Variable name, Attribute conditional on `policy_type` being equal to `disable-peer`
        """
        return pulumi.get(self, "disable_peer_max_number_of_prefixes_variable")

    @_builtins.property
    @pulumi.getter(name="disablePeerThreshold")
    def disable_peer_threshold(self) -> Optional[_builtins.int]:
        """
        Set threshold(1 to 100) at which to generate a warning message, Attribute conditional on `policy_type` being equal to `disable-peer`
          - Range: `1`-`100`
          - Default value: `75`
        """
        return pulumi.get(self, "disable_peer_threshold")

    @_builtins.property
    @pulumi.getter(name="disablePeerThresholdVariable")
    def disable_peer_threshold_variable(self) -> Optional[_builtins.str]:
        """
        Variable name, Attribute conditional on `policy_type` being equal to `disable-peer`
        """
        return pulumi.get(self, "disable_peer_threshold_variable")

    @_builtins.property
    @pulumi.getter(name="familyType")
    def family_type(self) -> Optional[_builtins.str]:
        """
        Set IPv4 unicast address family
          - Choices: `ipv4-unicast`, `vpnv4-unicast`, `vpnv6-unicast`
        """
        return pulumi.get(self, "family_type")

    @_builtins.property
    @pulumi.getter(name="inRoutePolicyId")
    def in_route_policy_id(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "in_route_policy_id")

    @_builtins.property
    @pulumi.getter(name="outRoutePolicyId")
    def out_route_policy_id(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "out_route_policy_id")

    @_builtins.property
    @pulumi.getter(name="policyType")
    def policy_type(self) -> Optional[_builtins.str]:
        """
        Neighbor received maximum prefix policy is disabled.
          - Choices: `restart`, `off`, `warning-only`, `disable-peer`
        """
        return pulumi.get(self, "policy_type")

    @_builtins.property
    @pulumi.getter(name="restartInterval")
    def restart_interval(self) -> Optional[_builtins.int]:
        """
        Set the restart interval(minutes) when to restart BGP connection if threshold is exceeded, Attribute conditional on `policy_type` being equal to `restart`
          - Range: `1`-`65535`
        """
        return pulumi.get(self, "restart_interval")

    @_builtins.property
    @pulumi.getter(name="restartIntervalVariable")
    def restart_interval_variable(self) -> Optional[_builtins.str]:
        """
        Variable name, Attribute conditional on `policy_type` being equal to `restart`
        """
        return pulumi.get(self, "restart_interval_variable")

    @_builtins.property
    @pulumi.getter(name="restartMaxNumberOfPrefixes")
    def restart_max_number_of_prefixes(self) -> Optional[_builtins.int]:
        """
        Set maximum number of prefixes accepted from BGP peer, Attribute conditional on `policy_type` being equal to `restart`
          - Range: `1`-`4294967295`
        """
        return pulumi.get(self, "restart_max_number_of_prefixes")

    @_builtins.property
    @pulumi.getter(name="restartMaxNumberOfPrefixesVariable")
    def restart_max_number_of_prefixes_variable(self) -> Optional[_builtins.str]:
        """
        Variable name, Attribute conditional on `policy_type` being equal to `restart`
        """
        return pulumi.get(self, "restart_max_number_of_prefixes_variable")

    @_builtins.property
    @pulumi.getter(name="restartThreshold")
    def restart_threshold(self) -> Optional[_builtins.int]:
        """
        Set threshold(1 to 100) at which to generate a warning message, Attribute conditional on `policy_type` being equal to `restart`
          - Range: `1`-`100`
          - Default value: `75`
        """
        return pulumi.get(self, "restart_threshold")

    @_builtins.property
    @pulumi.getter(name="restartThresholdVariable")
    def restart_threshold_variable(self) -> Optional[_builtins.str]:
        """
        Variable name, Attribute conditional on `policy_type` being equal to `restart`
        """
        return pulumi.get(self, "restart_threshold_variable")

    @_builtins.property
    @pulumi.getter(name="warningMessageMaxNumberOfPrefixes")
    def warning_message_max_number_of_prefixes(self) -> Optional[_builtins.int]:
        """
        Set maximum number of prefixes accepted from BGP peer, Attribute conditional on `policy_type` being equal to `warning-only`
          - Range: `1`-`4294967295`
        """
        return pulumi.get(self, "warning_message_max_number_of_prefixes")

    @_builtins.property
    @pulumi.getter(name="warningMessageMaxNumberOfPrefixesVariable")
    def warning_message_max_number_of_prefixes_variable(self) -> Optional[_builtins.str]:
        """
        Variable name, Attribute conditional on `policy_type` being equal to `warning-only`
        """
        return pulumi.get(self, "warning_message_max_number_of_prefixes_variable")

    @_builtins.property
    @pulumi.getter(name="warningMessageThreshold")
    def warning_message_threshold(self) -> Optional[_builtins.int]:
        """
        Set threshold(1 to 100) at which to generate a warning message, Attribute conditional on `policy_type` being equal to `warning-only`
          - Range: `1`-`100`
          - Default value: `75`
        """
        return pulumi.get(self, "warning_message_threshold")

    @_builtins.property
    @pulumi.getter(name="warningMessageThresholdVariable")
    def warning_message_threshold_variable(self) -> Optional[_builtins.str]:
        """
        Variable name, Attribute conditional on `policy_type` being equal to `warning-only`
        """
        return pulumi.get(self, "warning_message_threshold_variable")


@pulumi.output_type
class TransportRoutingBgpFeatureIpv4Network(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "networkAddress":
            suggest = "network_address"
        elif key == "networkAddressVariable":
            suggest = "network_address_variable"
        elif key == "subnetMask":
            suggest = "subnet_mask"
        elif key == "subnetMaskVariable":
            suggest = "subnet_mask_variable"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in TransportRoutingBgpFeatureIpv4Network. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        TransportRoutingBgpFeatureIpv4Network.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        TransportRoutingBgpFeatureIpv4Network.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 network_address: Optional[_builtins.str] = None,
                 network_address_variable: Optional[_builtins.str] = None,
                 subnet_mask: Optional[_builtins.str] = None,
                 subnet_mask_variable: Optional[_builtins.str] = None):
        """
        :param _builtins.str network_address_variable: Variable name
        :param _builtins.str subnet_mask: - Choices: `255.255.255.255`, `255.255.255.254`, `255.255.255.252`, `255.255.255.248`, `255.255.255.240`, `255.255.255.224`, `255.255.255.192`, `255.255.255.128`, `255.255.255.0`, `255.255.254.0`, `255.255.252.0`, `255.255.248.0`, `255.255.240.0`, `255.255.224.0`, `255.255.192.0`, `255.255.128.0`, `255.255.0.0`, `255.254.0.0`, `255.252.0.0`, `255.240.0.0`, `255.224.0.0`, `255.192.0.0`, `255.128.0.0`, `255.0.0.0`, `254.0.0.0`, `252.0.0.0`, `248.0.0.0`, `240.0.0.0`, `224.0.0.0`, `192.0.0.0`, `128.0.0.0`, `0.0.0.0`
        :param _builtins.str subnet_mask_variable: Variable name
        """
        if network_address is not None:
            pulumi.set(__self__, "network_address", network_address)
        if network_address_variable is not None:
            pulumi.set(__self__, "network_address_variable", network_address_variable)
        if subnet_mask is not None:
            pulumi.set(__self__, "subnet_mask", subnet_mask)
        if subnet_mask_variable is not None:
            pulumi.set(__self__, "subnet_mask_variable", subnet_mask_variable)

    @_builtins.property
    @pulumi.getter(name="networkAddress")
    def network_address(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "network_address")

    @_builtins.property
    @pulumi.getter(name="networkAddressVariable")
    def network_address_variable(self) -> Optional[_builtins.str]:
        """
        Variable name
        """
        return pulumi.get(self, "network_address_variable")

    @_builtins.property
    @pulumi.getter(name="subnetMask")
    def subnet_mask(self) -> Optional[_builtins.str]:
        """
        - Choices: `255.255.255.255`, `255.255.255.254`, `255.255.255.252`, `255.255.255.248`, `255.255.255.240`, `255.255.255.224`, `255.255.255.192`, `255.255.255.128`, `255.255.255.0`, `255.255.254.0`, `255.255.252.0`, `255.255.248.0`, `255.255.240.0`, `255.255.224.0`, `255.255.192.0`, `255.255.128.0`, `255.255.0.0`, `255.254.0.0`, `255.252.0.0`, `255.240.0.0`, `255.224.0.0`, `255.192.0.0`, `255.128.0.0`, `255.0.0.0`, `254.0.0.0`, `252.0.0.0`, `248.0.0.0`, `240.0.0.0`, `224.0.0.0`, `192.0.0.0`, `128.0.0.0`, `0.0.0.0`
        """
        return pulumi.get(self, "subnet_mask")

    @_builtins.property
    @pulumi.getter(name="subnetMaskVariable")
    def subnet_mask_variable(self) -> Optional[_builtins.str]:
        """
        Variable name
        """
        return pulumi.get(self, "subnet_mask_variable")


@pulumi.output_type
class TransportRoutingBgpFeatureIpv4Redistribute(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "protocolVariable":
            suggest = "protocol_variable"
        elif key == "routePolicyId":
            suggest = "route_policy_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in TransportRoutingBgpFeatureIpv4Redistribute. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        TransportRoutingBgpFeatureIpv4Redistribute.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        TransportRoutingBgpFeatureIpv4Redistribute.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 protocol: Optional[_builtins.str] = None,
                 protocol_variable: Optional[_builtins.str] = None,
                 route_policy_id: Optional[_builtins.str] = None):
        """
        :param _builtins.str protocol: Set the protocol to redistribute routes from
                 - Choices: `static`, `connected`, `ospf`, `ospfv3`, `nat`
        :param _builtins.str protocol_variable: Variable name
        """
        if protocol is not None:
            pulumi.set(__self__, "protocol", protocol)
        if protocol_variable is not None:
            pulumi.set(__self__, "protocol_variable", protocol_variable)
        if route_policy_id is not None:
            pulumi.set(__self__, "route_policy_id", route_policy_id)

    @_builtins.property
    @pulumi.getter
    def protocol(self) -> Optional[_builtins.str]:
        """
        Set the protocol to redistribute routes from
          - Choices: `static`, `connected`, `ospf`, `ospfv3`, `nat`
        """
        return pulumi.get(self, "protocol")

    @_builtins.property
    @pulumi.getter(name="protocolVariable")
    def protocol_variable(self) -> Optional[_builtins.str]:
        """
        Variable name
        """
        return pulumi.get(self, "protocol_variable")

    @_builtins.property
    @pulumi.getter(name="routePolicyId")
    def route_policy_id(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "route_policy_id")


@pulumi.output_type
class TransportRoutingBgpFeatureIpv6AggregateAddress(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "aggregatePrefix":
            suggest = "aggregate_prefix"
        elif key == "aggregatePrefixVariable":
            suggest = "aggregate_prefix_variable"
        elif key == "asSetPath":
            suggest = "as_set_path"
        elif key == "asSetPathVariable":
            suggest = "as_set_path_variable"
        elif key == "summaryOnly":
            suggest = "summary_only"
        elif key == "summaryOnlyVariable":
            suggest = "summary_only_variable"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in TransportRoutingBgpFeatureIpv6AggregateAddress. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        TransportRoutingBgpFeatureIpv6AggregateAddress.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        TransportRoutingBgpFeatureIpv6AggregateAddress.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 aggregate_prefix: Optional[_builtins.str] = None,
                 aggregate_prefix_variable: Optional[_builtins.str] = None,
                 as_set_path: Optional[_builtins.bool] = None,
                 as_set_path_variable: Optional[_builtins.str] = None,
                 summary_only: Optional[_builtins.bool] = None,
                 summary_only_variable: Optional[_builtins.str] = None):
        """
        :param _builtins.str aggregate_prefix: Configure the IPv6 prefixes to aggregate
        :param _builtins.str aggregate_prefix_variable: Variable name
        :param _builtins.bool as_set_path: Set AS set path information
                 - Default value: `false`
        :param _builtins.str as_set_path_variable: Variable name
        :param _builtins.bool summary_only: Filter out more specific routes from updates
                 - Default value: `false`
        :param _builtins.str summary_only_variable: Variable name
        """
        if aggregate_prefix is not None:
            pulumi.set(__self__, "aggregate_prefix", aggregate_prefix)
        if aggregate_prefix_variable is not None:
            pulumi.set(__self__, "aggregate_prefix_variable", aggregate_prefix_variable)
        if as_set_path is not None:
            pulumi.set(__self__, "as_set_path", as_set_path)
        if as_set_path_variable is not None:
            pulumi.set(__self__, "as_set_path_variable", as_set_path_variable)
        if summary_only is not None:
            pulumi.set(__self__, "summary_only", summary_only)
        if summary_only_variable is not None:
            pulumi.set(__self__, "summary_only_variable", summary_only_variable)

    @_builtins.property
    @pulumi.getter(name="aggregatePrefix")
    def aggregate_prefix(self) -> Optional[_builtins.str]:
        """
        Configure the IPv6 prefixes to aggregate
        """
        return pulumi.get(self, "aggregate_prefix")

    @_builtins.property
    @pulumi.getter(name="aggregatePrefixVariable")
    def aggregate_prefix_variable(self) -> Optional[_builtins.str]:
        """
        Variable name
        """
        return pulumi.get(self, "aggregate_prefix_variable")

    @_builtins.property
    @pulumi.getter(name="asSetPath")
    def as_set_path(self) -> Optional[_builtins.bool]:
        """
        Set AS set path information
          - Default value: `false`
        """
        return pulumi.get(self, "as_set_path")

    @_builtins.property
    @pulumi.getter(name="asSetPathVariable")
    def as_set_path_variable(self) -> Optional[_builtins.str]:
        """
        Variable name
        """
        return pulumi.get(self, "as_set_path_variable")

    @_builtins.property
    @pulumi.getter(name="summaryOnly")
    def summary_only(self) -> Optional[_builtins.bool]:
        """
        Filter out more specific routes from updates
          - Default value: `false`
        """
        return pulumi.get(self, "summary_only")

    @_builtins.property
    @pulumi.getter(name="summaryOnlyVariable")
    def summary_only_variable(self) -> Optional[_builtins.str]:
        """
        Variable name
        """
        return pulumi.get(self, "summary_only_variable")


@pulumi.output_type
class TransportRoutingBgpFeatureIpv6Neighbor(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "addressFamilies":
            suggest = "address_families"
        elif key == "addressVariable":
            suggest = "address_variable"
        elif key == "allowasInNumber":
            suggest = "allowas_in_number"
        elif key == "allowasInNumberVariable":
            suggest = "allowas_in_number_variable"
        elif key == "asOverride":
            suggest = "as_override"
        elif key == "asOverrideVariable":
            suggest = "as_override_variable"
        elif key == "descriptionVariable":
            suggest = "description_variable"
        elif key == "ebgpMultihop":
            suggest = "ebgp_multihop"
        elif key == "ebgpMultihopVariable":
            suggest = "ebgp_multihop_variable"
        elif key == "holdTime":
            suggest = "hold_time"
        elif key == "holdTimeVariable":
            suggest = "hold_time_variable"
        elif key == "keepaliveTime":
            suggest = "keepalive_time"
        elif key == "keepaliveTimeVariable":
            suggest = "keepalive_time_variable"
        elif key == "localAs":
            suggest = "local_as"
        elif key == "localAsVariable":
            suggest = "local_as_variable"
        elif key == "nextHopSelf":
            suggest = "next_hop_self"
        elif key == "nextHopSelfVariable":
            suggest = "next_hop_self_variable"
        elif key == "passwordVariable":
            suggest = "password_variable"
        elif key == "remoteAs":
            suggest = "remote_as"
        elif key == "remoteAsVariable":
            suggest = "remote_as_variable"
        elif key == "sendCommunity":
            suggest = "send_community"
        elif key == "sendCommunityVariable":
            suggest = "send_community_variable"
        elif key == "sendExtendedCommunity":
            suggest = "send_extended_community"
        elif key == "sendExtendedCommunityVariable":
            suggest = "send_extended_community_variable"
        elif key == "shutdownVariable":
            suggest = "shutdown_variable"
        elif key == "updateSourceInterface":
            suggest = "update_source_interface"
        elif key == "updateSourceInterfaceVariable":
            suggest = "update_source_interface_variable"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in TransportRoutingBgpFeatureIpv6Neighbor. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        TransportRoutingBgpFeatureIpv6Neighbor.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        TransportRoutingBgpFeatureIpv6Neighbor.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 address: Optional[_builtins.str] = None,
                 address_families: Optional[Sequence['outputs.TransportRoutingBgpFeatureIpv6NeighborAddressFamily']] = None,
                 address_variable: Optional[_builtins.str] = None,
                 allowas_in_number: Optional[_builtins.int] = None,
                 allowas_in_number_variable: Optional[_builtins.str] = None,
                 as_override: Optional[_builtins.bool] = None,
                 as_override_variable: Optional[_builtins.str] = None,
                 description: Optional[_builtins.str] = None,
                 description_variable: Optional[_builtins.str] = None,
                 ebgp_multihop: Optional[_builtins.int] = None,
                 ebgp_multihop_variable: Optional[_builtins.str] = None,
                 hold_time: Optional[_builtins.int] = None,
                 hold_time_variable: Optional[_builtins.str] = None,
                 keepalive_time: Optional[_builtins.int] = None,
                 keepalive_time_variable: Optional[_builtins.str] = None,
                 local_as: Optional[_builtins.int] = None,
                 local_as_variable: Optional[_builtins.str] = None,
                 next_hop_self: Optional[_builtins.bool] = None,
                 next_hop_self_variable: Optional[_builtins.str] = None,
                 password: Optional[_builtins.str] = None,
                 password_variable: Optional[_builtins.str] = None,
                 remote_as: Optional[_builtins.int] = None,
                 remote_as_variable: Optional[_builtins.str] = None,
                 send_community: Optional[_builtins.bool] = None,
                 send_community_variable: Optional[_builtins.str] = None,
                 send_extended_community: Optional[_builtins.bool] = None,
                 send_extended_community_variable: Optional[_builtins.str] = None,
                 shutdown: Optional[_builtins.bool] = None,
                 shutdown_variable: Optional[_builtins.str] = None,
                 update_source_interface: Optional[_builtins.str] = None,
                 update_source_interface_variable: Optional[_builtins.str] = None):
        """
        :param _builtins.str address: Set IPv6 neighbor address
        :param Sequence['TransportRoutingBgpFeatureIpv6NeighborAddressFamilyArgs'] address_families: Set IPv6 BGP address family
        :param _builtins.str address_variable: Variable name
        :param _builtins.int allowas_in_number: The number of accept as-path with my AS present in it
                 - Range: `1`-`10`
        :param _builtins.str allowas_in_number_variable: Variable name
        :param _builtins.bool as_override: Override matching AS-number while sending update
                 - Default value: `false`
        :param _builtins.str as_override_variable: Variable name
        :param _builtins.str description: Set description
        :param _builtins.str description_variable: Variable name
        :param _builtins.int ebgp_multihop: Set TTL value for peers that are not directly connected
                 - Range: `1`-`255`
                 - Default value: `1`
        :param _builtins.str ebgp_multihop_variable: Variable name
        :param _builtins.int hold_time: Interval (seconds) not receiving a keepalive message declares a BGP peer down
                 - Range: `0`-`65535`
                 - Default value: `180`
        :param _builtins.str hold_time_variable: Variable name
        :param _builtins.int keepalive_time: Interval (seconds) of keepalive messages sent to its BGP peer
                 - Range: `0`-`65535`
                 - Default value: `60`
        :param _builtins.str keepalive_time_variable: Variable name
        :param _builtins.int local_as: Set local autonomous system number,Local-AS cannot have the local BGP protocol AS number or the AS number of the remote peer.The local-as is valid only if the peer is a true eBGP peer. It does not work for two peers in different sub-ASs in a confederation.
        :param _builtins.str local_as_variable: Variable name
        :param _builtins.bool next_hop_self: Set router to be next hop for routes advertised to neighbor
                 - Default value: `false`
        :param _builtins.str next_hop_self_variable: Variable name
        :param _builtins.str password: Set MD5 password on TCP connection with BGP peer
        :param _builtins.str password_variable: Variable name
        :param _builtins.int remote_as: Set remote autonomous system number
        :param _builtins.str remote_as_variable: Variable name
        :param _builtins.bool send_community: Send community attribute
                 - Default value: `true`
        :param _builtins.str send_community_variable: Variable name
        :param _builtins.bool send_extended_community: Send extended community attribute
                 - Default value: `true`
        :param _builtins.str send_extended_community_variable: Variable name
        :param _builtins.bool shutdown: Enable or disable a BGP neighbor
                 - Default value: `false`
        :param _builtins.str shutdown_variable: Variable name
        :param _builtins.str update_source_interface: Source interface name for BGP neighbor
        :param _builtins.str update_source_interface_variable: Variable name
        """
        if address is not None:
            pulumi.set(__self__, "address", address)
        if address_families is not None:
            pulumi.set(__self__, "address_families", address_families)
        if address_variable is not None:
            pulumi.set(__self__, "address_variable", address_variable)
        if allowas_in_number is not None:
            pulumi.set(__self__, "allowas_in_number", allowas_in_number)
        if allowas_in_number_variable is not None:
            pulumi.set(__self__, "allowas_in_number_variable", allowas_in_number_variable)
        if as_override is not None:
            pulumi.set(__self__, "as_override", as_override)
        if as_override_variable is not None:
            pulumi.set(__self__, "as_override_variable", as_override_variable)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if description_variable is not None:
            pulumi.set(__self__, "description_variable", description_variable)
        if ebgp_multihop is not None:
            pulumi.set(__self__, "ebgp_multihop", ebgp_multihop)
        if ebgp_multihop_variable is not None:
            pulumi.set(__self__, "ebgp_multihop_variable", ebgp_multihop_variable)
        if hold_time is not None:
            pulumi.set(__self__, "hold_time", hold_time)
        if hold_time_variable is not None:
            pulumi.set(__self__, "hold_time_variable", hold_time_variable)
        if keepalive_time is not None:
            pulumi.set(__self__, "keepalive_time", keepalive_time)
        if keepalive_time_variable is not None:
            pulumi.set(__self__, "keepalive_time_variable", keepalive_time_variable)
        if local_as is not None:
            pulumi.set(__self__, "local_as", local_as)
        if local_as_variable is not None:
            pulumi.set(__self__, "local_as_variable", local_as_variable)
        if next_hop_self is not None:
            pulumi.set(__self__, "next_hop_self", next_hop_self)
        if next_hop_self_variable is not None:
            pulumi.set(__self__, "next_hop_self_variable", next_hop_self_variable)
        if password is not None:
            pulumi.set(__self__, "password", password)
        if password_variable is not None:
            pulumi.set(__self__, "password_variable", password_variable)
        if remote_as is not None:
            pulumi.set(__self__, "remote_as", remote_as)
        if remote_as_variable is not None:
            pulumi.set(__self__, "remote_as_variable", remote_as_variable)
        if send_community is not None:
            pulumi.set(__self__, "send_community", send_community)
        if send_community_variable is not None:
            pulumi.set(__self__, "send_community_variable", send_community_variable)
        if send_extended_community is not None:
            pulumi.set(__self__, "send_extended_community", send_extended_community)
        if send_extended_community_variable is not None:
            pulumi.set(__self__, "send_extended_community_variable", send_extended_community_variable)
        if shutdown is not None:
            pulumi.set(__self__, "shutdown", shutdown)
        if shutdown_variable is not None:
            pulumi.set(__self__, "shutdown_variable", shutdown_variable)
        if update_source_interface is not None:
            pulumi.set(__self__, "update_source_interface", update_source_interface)
        if update_source_interface_variable is not None:
            pulumi.set(__self__, "update_source_interface_variable", update_source_interface_variable)

    @_builtins.property
    @pulumi.getter
    def address(self) -> Optional[_builtins.str]:
        """
        Set IPv6 neighbor address
        """
        return pulumi.get(self, "address")

    @_builtins.property
    @pulumi.getter(name="addressFamilies")
    def address_families(self) -> Optional[Sequence['outputs.TransportRoutingBgpFeatureIpv6NeighborAddressFamily']]:
        """
        Set IPv6 BGP address family
        """
        return pulumi.get(self, "address_families")

    @_builtins.property
    @pulumi.getter(name="addressVariable")
    def address_variable(self) -> Optional[_builtins.str]:
        """
        Variable name
        """
        return pulumi.get(self, "address_variable")

    @_builtins.property
    @pulumi.getter(name="allowasInNumber")
    def allowas_in_number(self) -> Optional[_builtins.int]:
        """
        The number of accept as-path with my AS present in it
          - Range: `1`-`10`
        """
        return pulumi.get(self, "allowas_in_number")

    @_builtins.property
    @pulumi.getter(name="allowasInNumberVariable")
    def allowas_in_number_variable(self) -> Optional[_builtins.str]:
        """
        Variable name
        """
        return pulumi.get(self, "allowas_in_number_variable")

    @_builtins.property
    @pulumi.getter(name="asOverride")
    def as_override(self) -> Optional[_builtins.bool]:
        """
        Override matching AS-number while sending update
          - Default value: `false`
        """
        return pulumi.get(self, "as_override")

    @_builtins.property
    @pulumi.getter(name="asOverrideVariable")
    def as_override_variable(self) -> Optional[_builtins.str]:
        """
        Variable name
        """
        return pulumi.get(self, "as_override_variable")

    @_builtins.property
    @pulumi.getter
    def description(self) -> Optional[_builtins.str]:
        """
        Set description
        """
        return pulumi.get(self, "description")

    @_builtins.property
    @pulumi.getter(name="descriptionVariable")
    def description_variable(self) -> Optional[_builtins.str]:
        """
        Variable name
        """
        return pulumi.get(self, "description_variable")

    @_builtins.property
    @pulumi.getter(name="ebgpMultihop")
    def ebgp_multihop(self) -> Optional[_builtins.int]:
        """
        Set TTL value for peers that are not directly connected
          - Range: `1`-`255`
          - Default value: `1`
        """
        return pulumi.get(self, "ebgp_multihop")

    @_builtins.property
    @pulumi.getter(name="ebgpMultihopVariable")
    def ebgp_multihop_variable(self) -> Optional[_builtins.str]:
        """
        Variable name
        """
        return pulumi.get(self, "ebgp_multihop_variable")

    @_builtins.property
    @pulumi.getter(name="holdTime")
    def hold_time(self) -> Optional[_builtins.int]:
        """
        Interval (seconds) not receiving a keepalive message declares a BGP peer down
          - Range: `0`-`65535`
          - Default value: `180`
        """
        return pulumi.get(self, "hold_time")

    @_builtins.property
    @pulumi.getter(name="holdTimeVariable")
    def hold_time_variable(self) -> Optional[_builtins.str]:
        """
        Variable name
        """
        return pulumi.get(self, "hold_time_variable")

    @_builtins.property
    @pulumi.getter(name="keepaliveTime")
    def keepalive_time(self) -> Optional[_builtins.int]:
        """
        Interval (seconds) of keepalive messages sent to its BGP peer
          - Range: `0`-`65535`
          - Default value: `60`
        """
        return pulumi.get(self, "keepalive_time")

    @_builtins.property
    @pulumi.getter(name="keepaliveTimeVariable")
    def keepalive_time_variable(self) -> Optional[_builtins.str]:
        """
        Variable name
        """
        return pulumi.get(self, "keepalive_time_variable")

    @_builtins.property
    @pulumi.getter(name="localAs")
    def local_as(self) -> Optional[_builtins.int]:
        """
        Set local autonomous system number,Local-AS cannot have the local BGP protocol AS number or the AS number of the remote peer.The local-as is valid only if the peer is a true eBGP peer. It does not work for two peers in different sub-ASs in a confederation.
        """
        return pulumi.get(self, "local_as")

    @_builtins.property
    @pulumi.getter(name="localAsVariable")
    def local_as_variable(self) -> Optional[_builtins.str]:
        """
        Variable name
        """
        return pulumi.get(self, "local_as_variable")

    @_builtins.property
    @pulumi.getter(name="nextHopSelf")
    def next_hop_self(self) -> Optional[_builtins.bool]:
        """
        Set router to be next hop for routes advertised to neighbor
          - Default value: `false`
        """
        return pulumi.get(self, "next_hop_self")

    @_builtins.property
    @pulumi.getter(name="nextHopSelfVariable")
    def next_hop_self_variable(self) -> Optional[_builtins.str]:
        """
        Variable name
        """
        return pulumi.get(self, "next_hop_self_variable")

    @_builtins.property
    @pulumi.getter
    def password(self) -> Optional[_builtins.str]:
        """
        Set MD5 password on TCP connection with BGP peer
        """
        return pulumi.get(self, "password")

    @_builtins.property
    @pulumi.getter(name="passwordVariable")
    def password_variable(self) -> Optional[_builtins.str]:
        """
        Variable name
        """
        return pulumi.get(self, "password_variable")

    @_builtins.property
    @pulumi.getter(name="remoteAs")
    def remote_as(self) -> Optional[_builtins.int]:
        """
        Set remote autonomous system number
        """
        return pulumi.get(self, "remote_as")

    @_builtins.property
    @pulumi.getter(name="remoteAsVariable")
    def remote_as_variable(self) -> Optional[_builtins.str]:
        """
        Variable name
        """
        return pulumi.get(self, "remote_as_variable")

    @_builtins.property
    @pulumi.getter(name="sendCommunity")
    def send_community(self) -> Optional[_builtins.bool]:
        """
        Send community attribute
          - Default value: `true`
        """
        return pulumi.get(self, "send_community")

    @_builtins.property
    @pulumi.getter(name="sendCommunityVariable")
    def send_community_variable(self) -> Optional[_builtins.str]:
        """
        Variable name
        """
        return pulumi.get(self, "send_community_variable")

    @_builtins.property
    @pulumi.getter(name="sendExtendedCommunity")
    def send_extended_community(self) -> Optional[_builtins.bool]:
        """
        Send extended community attribute
          - Default value: `true`
        """
        return pulumi.get(self, "send_extended_community")

    @_builtins.property
    @pulumi.getter(name="sendExtendedCommunityVariable")
    def send_extended_community_variable(self) -> Optional[_builtins.str]:
        """
        Variable name
        """
        return pulumi.get(self, "send_extended_community_variable")

    @_builtins.property
    @pulumi.getter
    def shutdown(self) -> Optional[_builtins.bool]:
        """
        Enable or disable a BGP neighbor
          - Default value: `false`
        """
        return pulumi.get(self, "shutdown")

    @_builtins.property
    @pulumi.getter(name="shutdownVariable")
    def shutdown_variable(self) -> Optional[_builtins.str]:
        """
        Variable name
        """
        return pulumi.get(self, "shutdown_variable")

    @_builtins.property
    @pulumi.getter(name="updateSourceInterface")
    def update_source_interface(self) -> Optional[_builtins.str]:
        """
        Source interface name for BGP neighbor
        """
        return pulumi.get(self, "update_source_interface")

    @_builtins.property
    @pulumi.getter(name="updateSourceInterfaceVariable")
    def update_source_interface_variable(self) -> Optional[_builtins.str]:
        """
        Variable name
        """
        return pulumi.get(self, "update_source_interface_variable")


@pulumi.output_type
class TransportRoutingBgpFeatureIpv6NeighborAddressFamily(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "familyType":
            suggest = "family_type"
        elif key == "inRoutePolicyId":
            suggest = "in_route_policy_id"
        elif key == "maxNumberOfPrefixes":
            suggest = "max_number_of_prefixes"
        elif key == "maxNumberOfPrefixesVariable":
            suggest = "max_number_of_prefixes_variable"
        elif key == "outRoutePolicyId":
            suggest = "out_route_policy_id"
        elif key == "policyType":
            suggest = "policy_type"
        elif key == "restartInterval":
            suggest = "restart_interval"
        elif key == "restartIntervalVariable":
            suggest = "restart_interval_variable"
        elif key == "thresholdVariable":
            suggest = "threshold_variable"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in TransportRoutingBgpFeatureIpv6NeighborAddressFamily. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        TransportRoutingBgpFeatureIpv6NeighborAddressFamily.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        TransportRoutingBgpFeatureIpv6NeighborAddressFamily.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 family_type: Optional[_builtins.str] = None,
                 in_route_policy_id: Optional[_builtins.str] = None,
                 max_number_of_prefixes: Optional[_builtins.int] = None,
                 max_number_of_prefixes_variable: Optional[_builtins.str] = None,
                 out_route_policy_id: Optional[_builtins.str] = None,
                 policy_type: Optional[_builtins.str] = None,
                 restart_interval: Optional[_builtins.int] = None,
                 restart_interval_variable: Optional[_builtins.str] = None,
                 threshold: Optional[_builtins.int] = None,
                 threshold_variable: Optional[_builtins.str] = None):
        """
        :param _builtins.str family_type: Set IPv6 unicast address family
                 - Choices: `ipv6-unicast`, `vpnv6-unicast`
        :param _builtins.int max_number_of_prefixes: Set maximum number of prefixes accepted from BGP peer
                 - Range: `1`-`4294967295`
        :param _builtins.str max_number_of_prefixes_variable: Variable name
        :param _builtins.str policy_type: Neighbor received maximum prefix policy is disabled.
        :param _builtins.int restart_interval: Set the restart interval(minutes) when to restart BGP connection if threshold is exceeded
                 - Range: `1`-`65535`
        :param _builtins.str restart_interval_variable: Variable name
        :param _builtins.int threshold: Set threshold(1 to 100) at which to generate a warning message
                 - Range: `1`-`100`
                 - Default value: `75`
        :param _builtins.str threshold_variable: Variable name
        """
        if family_type is not None:
            pulumi.set(__self__, "family_type", family_type)
        if in_route_policy_id is not None:
            pulumi.set(__self__, "in_route_policy_id", in_route_policy_id)
        if max_number_of_prefixes is not None:
            pulumi.set(__self__, "max_number_of_prefixes", max_number_of_prefixes)
        if max_number_of_prefixes_variable is not None:
            pulumi.set(__self__, "max_number_of_prefixes_variable", max_number_of_prefixes_variable)
        if out_route_policy_id is not None:
            pulumi.set(__self__, "out_route_policy_id", out_route_policy_id)
        if policy_type is not None:
            pulumi.set(__self__, "policy_type", policy_type)
        if restart_interval is not None:
            pulumi.set(__self__, "restart_interval", restart_interval)
        if restart_interval_variable is not None:
            pulumi.set(__self__, "restart_interval_variable", restart_interval_variable)
        if threshold is not None:
            pulumi.set(__self__, "threshold", threshold)
        if threshold_variable is not None:
            pulumi.set(__self__, "threshold_variable", threshold_variable)

    @_builtins.property
    @pulumi.getter(name="familyType")
    def family_type(self) -> Optional[_builtins.str]:
        """
        Set IPv6 unicast address family
          - Choices: `ipv6-unicast`, `vpnv6-unicast`
        """
        return pulumi.get(self, "family_type")

    @_builtins.property
    @pulumi.getter(name="inRoutePolicyId")
    def in_route_policy_id(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "in_route_policy_id")

    @_builtins.property
    @pulumi.getter(name="maxNumberOfPrefixes")
    def max_number_of_prefixes(self) -> Optional[_builtins.int]:
        """
        Set maximum number of prefixes accepted from BGP peer
          - Range: `1`-`4294967295`
        """
        return pulumi.get(self, "max_number_of_prefixes")

    @_builtins.property
    @pulumi.getter(name="maxNumberOfPrefixesVariable")
    def max_number_of_prefixes_variable(self) -> Optional[_builtins.str]:
        """
        Variable name
        """
        return pulumi.get(self, "max_number_of_prefixes_variable")

    @_builtins.property
    @pulumi.getter(name="outRoutePolicyId")
    def out_route_policy_id(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "out_route_policy_id")

    @_builtins.property
    @pulumi.getter(name="policyType")
    def policy_type(self) -> Optional[_builtins.str]:
        """
        Neighbor received maximum prefix policy is disabled.
        """
        return pulumi.get(self, "policy_type")

    @_builtins.property
    @pulumi.getter(name="restartInterval")
    def restart_interval(self) -> Optional[_builtins.int]:
        """
        Set the restart interval(minutes) when to restart BGP connection if threshold is exceeded
          - Range: `1`-`65535`
        """
        return pulumi.get(self, "restart_interval")

    @_builtins.property
    @pulumi.getter(name="restartIntervalVariable")
    def restart_interval_variable(self) -> Optional[_builtins.str]:
        """
        Variable name
        """
        return pulumi.get(self, "restart_interval_variable")

    @_builtins.property
    @pulumi.getter
    def threshold(self) -> Optional[_builtins.int]:
        """
        Set threshold(1 to 100) at which to generate a warning message
          - Range: `1`-`100`
          - Default value: `75`
        """
        return pulumi.get(self, "threshold")

    @_builtins.property
    @pulumi.getter(name="thresholdVariable")
    def threshold_variable(self) -> Optional[_builtins.str]:
        """
        Variable name
        """
        return pulumi.get(self, "threshold_variable")


@pulumi.output_type
class TransportRoutingBgpFeatureIpv6Network(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "networkPrefix":
            suggest = "network_prefix"
        elif key == "networkPrefixVariable":
            suggest = "network_prefix_variable"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in TransportRoutingBgpFeatureIpv6Network. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        TransportRoutingBgpFeatureIpv6Network.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        TransportRoutingBgpFeatureIpv6Network.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 network_prefix: Optional[_builtins.str] = None,
                 network_prefix_variable: Optional[_builtins.str] = None):
        """
        :param _builtins.str network_prefix: Configure the prefixes for BGP to announce
        :param _builtins.str network_prefix_variable: Variable name
        """
        if network_prefix is not None:
            pulumi.set(__self__, "network_prefix", network_prefix)
        if network_prefix_variable is not None:
            pulumi.set(__self__, "network_prefix_variable", network_prefix_variable)

    @_builtins.property
    @pulumi.getter(name="networkPrefix")
    def network_prefix(self) -> Optional[_builtins.str]:
        """
        Configure the prefixes for BGP to announce
        """
        return pulumi.get(self, "network_prefix")

    @_builtins.property
    @pulumi.getter(name="networkPrefixVariable")
    def network_prefix_variable(self) -> Optional[_builtins.str]:
        """
        Variable name
        """
        return pulumi.get(self, "network_prefix_variable")


@pulumi.output_type
class TransportRoutingBgpFeatureIpv6Redistribute(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "protocolVariable":
            suggest = "protocol_variable"
        elif key == "routePolicyId":
            suggest = "route_policy_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in TransportRoutingBgpFeatureIpv6Redistribute. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        TransportRoutingBgpFeatureIpv6Redistribute.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        TransportRoutingBgpFeatureIpv6Redistribute.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 protocol: Optional[_builtins.str] = None,
                 protocol_variable: Optional[_builtins.str] = None,
                 route_policy_id: Optional[_builtins.str] = None):
        """
        :param _builtins.str protocol: Set the protocol to redistribute routes from
                 - Choices: `static`, `connected`, `ospf`
        :param _builtins.str protocol_variable: Variable name
        """
        if protocol is not None:
            pulumi.set(__self__, "protocol", protocol)
        if protocol_variable is not None:
            pulumi.set(__self__, "protocol_variable", protocol_variable)
        if route_policy_id is not None:
            pulumi.set(__self__, "route_policy_id", route_policy_id)

    @_builtins.property
    @pulumi.getter
    def protocol(self) -> Optional[_builtins.str]:
        """
        Set the protocol to redistribute routes from
          - Choices: `static`, `connected`, `ospf`
        """
        return pulumi.get(self, "protocol")

    @_builtins.property
    @pulumi.getter(name="protocolVariable")
    def protocol_variable(self) -> Optional[_builtins.str]:
        """
        Variable name
        """
        return pulumi.get(self, "protocol_variable")

    @_builtins.property
    @pulumi.getter(name="routePolicyId")
    def route_policy_id(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "route_policy_id")


@pulumi.output_type
class TransportRoutingBgpFeatureMplsInterface(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "interfaceName":
            suggest = "interface_name"
        elif key == "interfaceNameVariable":
            suggest = "interface_name_variable"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in TransportRoutingBgpFeatureMplsInterface. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        TransportRoutingBgpFeatureMplsInterface.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        TransportRoutingBgpFeatureMplsInterface.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 interface_name: Optional[_builtins.str] = None,
                 interface_name_variable: Optional[_builtins.str] = None):
        """
        :param _builtins.str interface_name: Interface Name
        :param _builtins.str interface_name_variable: Variable name
        """
        if interface_name is not None:
            pulumi.set(__self__, "interface_name", interface_name)
        if interface_name_variable is not None:
            pulumi.set(__self__, "interface_name_variable", interface_name_variable)

    @_builtins.property
    @pulumi.getter(name="interfaceName")
    def interface_name(self) -> Optional[_builtins.str]:
        """
        Interface Name
        """
        return pulumi.get(self, "interface_name")

    @_builtins.property
    @pulumi.getter(name="interfaceNameVariable")
    def interface_name_variable(self) -> Optional[_builtins.str]:
        """
        Variable name
        """
        return pulumi.get(self, "interface_name_variable")


@pulumi.output_type
class TransportRoutingOspfFeatureArea(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "areaNumber":
            suggest = "area_number"
        elif key == "areaNumberVariable":
            suggest = "area_number_variable"
        elif key == "areaType":
            suggest = "area_type"
        elif key == "noSummary":
            suggest = "no_summary"
        elif key == "noSummaryVariable":
            suggest = "no_summary_variable"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in TransportRoutingOspfFeatureArea. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        TransportRoutingOspfFeatureArea.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        TransportRoutingOspfFeatureArea.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 area_number: Optional[_builtins.int] = None,
                 area_number_variable: Optional[_builtins.str] = None,
                 area_type: Optional[_builtins.str] = None,
                 interfaces: Optional[Sequence['outputs.TransportRoutingOspfFeatureAreaInterface']] = None,
                 no_summary: Optional[_builtins.bool] = None,
                 no_summary_variable: Optional[_builtins.str] = None,
                 ranges: Optional[Sequence['outputs.TransportRoutingOspfFeatureAreaRange']] = None):
        """
        :param _builtins.int area_number: Set OSPF area number
                 - Range: `0`-`4294967295`
        :param _builtins.str area_number_variable: Variable name
        :param _builtins.str area_type: set the area type
                 - Choices: `stub`, `nssa`
        :param Sequence['TransportRoutingOspfFeatureAreaInterfaceArgs'] interfaces: Set OSPF interface parameters
        :param _builtins.bool no_summary: Do not inject interarea routes into STUB or NSSA
                 - Default value: `false`
        :param _builtins.str no_summary_variable: Variable name
        :param Sequence['TransportRoutingOspfFeatureAreaRangeArgs'] ranges: Summarize OSPF routes at an area boundary
        """
        if area_number is not None:
            pulumi.set(__self__, "area_number", area_number)
        if area_number_variable is not None:
            pulumi.set(__self__, "area_number_variable", area_number_variable)
        if area_type is not None:
            pulumi.set(__self__, "area_type", area_type)
        if interfaces is not None:
            pulumi.set(__self__, "interfaces", interfaces)
        if no_summary is not None:
            pulumi.set(__self__, "no_summary", no_summary)
        if no_summary_variable is not None:
            pulumi.set(__self__, "no_summary_variable", no_summary_variable)
        if ranges is not None:
            pulumi.set(__self__, "ranges", ranges)

    @_builtins.property
    @pulumi.getter(name="areaNumber")
    def area_number(self) -> Optional[_builtins.int]:
        """
        Set OSPF area number
          - Range: `0`-`4294967295`
        """
        return pulumi.get(self, "area_number")

    @_builtins.property
    @pulumi.getter(name="areaNumberVariable")
    def area_number_variable(self) -> Optional[_builtins.str]:
        """
        Variable name
        """
        return pulumi.get(self, "area_number_variable")

    @_builtins.property
    @pulumi.getter(name="areaType")
    def area_type(self) -> Optional[_builtins.str]:
        """
        set the area type
          - Choices: `stub`, `nssa`
        """
        return pulumi.get(self, "area_type")

    @_builtins.property
    @pulumi.getter
    def interfaces(self) -> Optional[Sequence['outputs.TransportRoutingOspfFeatureAreaInterface']]:
        """
        Set OSPF interface parameters
        """
        return pulumi.get(self, "interfaces")

    @_builtins.property
    @pulumi.getter(name="noSummary")
    def no_summary(self) -> Optional[_builtins.bool]:
        """
        Do not inject interarea routes into STUB or NSSA
          - Default value: `false`
        """
        return pulumi.get(self, "no_summary")

    @_builtins.property
    @pulumi.getter(name="noSummaryVariable")
    def no_summary_variable(self) -> Optional[_builtins.str]:
        """
        Variable name
        """
        return pulumi.get(self, "no_summary_variable")

    @_builtins.property
    @pulumi.getter
    def ranges(self) -> Optional[Sequence['outputs.TransportRoutingOspfFeatureAreaRange']]:
        """
        Summarize OSPF routes at an area boundary
        """
        return pulumi.get(self, "ranges")


@pulumi.output_type
class TransportRoutingOspfFeatureAreaInterface(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "authenticationType":
            suggest = "authentication_type"
        elif key == "authenticationTypeVariable":
            suggest = "authentication_type_variable"
        elif key == "costVariable":
            suggest = "cost_variable"
        elif key == "deadInterval":
            suggest = "dead_interval"
        elif key == "deadIntervalVariable":
            suggest = "dead_interval_variable"
        elif key == "designatedRouterPriority":
            suggest = "designated_router_priority"
        elif key == "designatedRouterPriorityVariable":
            suggest = "designated_router_priority_variable"
        elif key == "helloInterval":
            suggest = "hello_interval"
        elif key == "helloIntervalVariable":
            suggest = "hello_interval_variable"
        elif key == "lsaRetransmitInterval":
            suggest = "lsa_retransmit_interval"
        elif key == "lsaRetransmitIntervalVariable":
            suggest = "lsa_retransmit_interval_variable"
        elif key == "messageDigestKey":
            suggest = "message_digest_key"
        elif key == "messageDigestKeyId":
            suggest = "message_digest_key_id"
        elif key == "messageDigestKeyIdVariable":
            suggest = "message_digest_key_id_variable"
        elif key == "messageDigestKeyVariable":
            suggest = "message_digest_key_variable"
        elif key == "nameVariable":
            suggest = "name_variable"
        elif key == "networkType":
            suggest = "network_type"
        elif key == "networkTypeVariable":
            suggest = "network_type_variable"
        elif key == "passiveInterface":
            suggest = "passive_interface"
        elif key == "passiveInterfaceVariable":
            suggest = "passive_interface_variable"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in TransportRoutingOspfFeatureAreaInterface. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        TransportRoutingOspfFeatureAreaInterface.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        TransportRoutingOspfFeatureAreaInterface.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 authentication_type: Optional[_builtins.str] = None,
                 authentication_type_variable: Optional[_builtins.str] = None,
                 cost: Optional[_builtins.int] = None,
                 cost_variable: Optional[_builtins.str] = None,
                 dead_interval: Optional[_builtins.int] = None,
                 dead_interval_variable: Optional[_builtins.str] = None,
                 designated_router_priority: Optional[_builtins.int] = None,
                 designated_router_priority_variable: Optional[_builtins.str] = None,
                 hello_interval: Optional[_builtins.int] = None,
                 hello_interval_variable: Optional[_builtins.str] = None,
                 lsa_retransmit_interval: Optional[_builtins.int] = None,
                 lsa_retransmit_interval_variable: Optional[_builtins.str] = None,
                 message_digest_key: Optional[_builtins.str] = None,
                 message_digest_key_id: Optional[_builtins.int] = None,
                 message_digest_key_id_variable: Optional[_builtins.str] = None,
                 message_digest_key_variable: Optional[_builtins.str] = None,
                 name: Optional[_builtins.str] = None,
                 name_variable: Optional[_builtins.str] = None,
                 network_type: Optional[_builtins.str] = None,
                 network_type_variable: Optional[_builtins.str] = None,
                 passive_interface: Optional[_builtins.bool] = None,
                 passive_interface_variable: Optional[_builtins.str] = None):
        """
        :param _builtins.str authentication_type: Set OSPF interface authentication type
                 - Choices: `message-digest`
        :param _builtins.str authentication_type_variable: Variable name
        :param _builtins.int cost: Set cost of OSPF interface
                 - Range: `1`-`65535`
        :param _builtins.str cost_variable: Variable name
        :param _builtins.int dead_interval: Set interval after which neighbor is declared to be down
                 - Range: `1`-`65535`
                 - Default value: `40`
        :param _builtins.str dead_interval_variable: Variable name
        :param _builtins.int designated_router_priority: Set router’s priority to be elected as designated router
                 - Range: `0`-`255`
                 - Default value: `1`
        :param _builtins.str designated_router_priority_variable: Variable name
        :param _builtins.int hello_interval: Set interval between OSPF hello packets
                 - Range: `1`-`65535`
                 - Default value: `10`
        :param _builtins.str hello_interval_variable: Variable name
        :param _builtins.int lsa_retransmit_interval: Set time between retransmitting LSAs
                 - Range: `1`-`65535`
                 - Default value: `5`
        :param _builtins.str lsa_retransmit_interval_variable: Variable name
        :param _builtins.str message_digest_key: Set MD5 authentication key
        :param _builtins.int message_digest_key_id: Set MD5 message digest key
                 - Range: `1`-`255`
        :param _builtins.str message_digest_key_id_variable: Variable name
        :param _builtins.str message_digest_key_variable: Variable name
        :param _builtins.str name: Set interface name
        :param _builtins.str name_variable: Variable name
        :param _builtins.str network_type: Set the OSPF network type
                 - Choices: `broadcast`, `point-to-point`, `non-broadcast`, `point-to-multipoint`
                 - Default value: `broadcast`
        :param _builtins.str network_type_variable: Variable name
        :param _builtins.bool passive_interface: Set the interface to advertise its address, but not to actively run OSPF
                 - Default value: `false`
        :param _builtins.str passive_interface_variable: Variable name
        """
        if authentication_type is not None:
            pulumi.set(__self__, "authentication_type", authentication_type)
        if authentication_type_variable is not None:
            pulumi.set(__self__, "authentication_type_variable", authentication_type_variable)
        if cost is not None:
            pulumi.set(__self__, "cost", cost)
        if cost_variable is not None:
            pulumi.set(__self__, "cost_variable", cost_variable)
        if dead_interval is not None:
            pulumi.set(__self__, "dead_interval", dead_interval)
        if dead_interval_variable is not None:
            pulumi.set(__self__, "dead_interval_variable", dead_interval_variable)
        if designated_router_priority is not None:
            pulumi.set(__self__, "designated_router_priority", designated_router_priority)
        if designated_router_priority_variable is not None:
            pulumi.set(__self__, "designated_router_priority_variable", designated_router_priority_variable)
        if hello_interval is not None:
            pulumi.set(__self__, "hello_interval", hello_interval)
        if hello_interval_variable is not None:
            pulumi.set(__self__, "hello_interval_variable", hello_interval_variable)
        if lsa_retransmit_interval is not None:
            pulumi.set(__self__, "lsa_retransmit_interval", lsa_retransmit_interval)
        if lsa_retransmit_interval_variable is not None:
            pulumi.set(__self__, "lsa_retransmit_interval_variable", lsa_retransmit_interval_variable)
        if message_digest_key is not None:
            pulumi.set(__self__, "message_digest_key", message_digest_key)
        if message_digest_key_id is not None:
            pulumi.set(__self__, "message_digest_key_id", message_digest_key_id)
        if message_digest_key_id_variable is not None:
            pulumi.set(__self__, "message_digest_key_id_variable", message_digest_key_id_variable)
        if message_digest_key_variable is not None:
            pulumi.set(__self__, "message_digest_key_variable", message_digest_key_variable)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if name_variable is not None:
            pulumi.set(__self__, "name_variable", name_variable)
        if network_type is not None:
            pulumi.set(__self__, "network_type", network_type)
        if network_type_variable is not None:
            pulumi.set(__self__, "network_type_variable", network_type_variable)
        if passive_interface is not None:
            pulumi.set(__self__, "passive_interface", passive_interface)
        if passive_interface_variable is not None:
            pulumi.set(__self__, "passive_interface_variable", passive_interface_variable)

    @_builtins.property
    @pulumi.getter(name="authenticationType")
    def authentication_type(self) -> Optional[_builtins.str]:
        """
        Set OSPF interface authentication type
          - Choices: `message-digest`
        """
        return pulumi.get(self, "authentication_type")

    @_builtins.property
    @pulumi.getter(name="authenticationTypeVariable")
    def authentication_type_variable(self) -> Optional[_builtins.str]:
        """
        Variable name
        """
        return pulumi.get(self, "authentication_type_variable")

    @_builtins.property
    @pulumi.getter
    def cost(self) -> Optional[_builtins.int]:
        """
        Set cost of OSPF interface
          - Range: `1`-`65535`
        """
        return pulumi.get(self, "cost")

    @_builtins.property
    @pulumi.getter(name="costVariable")
    def cost_variable(self) -> Optional[_builtins.str]:
        """
        Variable name
        """
        return pulumi.get(self, "cost_variable")

    @_builtins.property
    @pulumi.getter(name="deadInterval")
    def dead_interval(self) -> Optional[_builtins.int]:
        """
        Set interval after which neighbor is declared to be down
          - Range: `1`-`65535`
          - Default value: `40`
        """
        return pulumi.get(self, "dead_interval")

    @_builtins.property
    @pulumi.getter(name="deadIntervalVariable")
    def dead_interval_variable(self) -> Optional[_builtins.str]:
        """
        Variable name
        """
        return pulumi.get(self, "dead_interval_variable")

    @_builtins.property
    @pulumi.getter(name="designatedRouterPriority")
    def designated_router_priority(self) -> Optional[_builtins.int]:
        """
        Set router’s priority to be elected as designated router
          - Range: `0`-`255`
          - Default value: `1`
        """
        return pulumi.get(self, "designated_router_priority")

    @_builtins.property
    @pulumi.getter(name="designatedRouterPriorityVariable")
    def designated_router_priority_variable(self) -> Optional[_builtins.str]:
        """
        Variable name
        """
        return pulumi.get(self, "designated_router_priority_variable")

    @_builtins.property
    @pulumi.getter(name="helloInterval")
    def hello_interval(self) -> Optional[_builtins.int]:
        """
        Set interval between OSPF hello packets
          - Range: `1`-`65535`
          - Default value: `10`
        """
        return pulumi.get(self, "hello_interval")

    @_builtins.property
    @pulumi.getter(name="helloIntervalVariable")
    def hello_interval_variable(self) -> Optional[_builtins.str]:
        """
        Variable name
        """
        return pulumi.get(self, "hello_interval_variable")

    @_builtins.property
    @pulumi.getter(name="lsaRetransmitInterval")
    def lsa_retransmit_interval(self) -> Optional[_builtins.int]:
        """
        Set time between retransmitting LSAs
          - Range: `1`-`65535`
          - Default value: `5`
        """
        return pulumi.get(self, "lsa_retransmit_interval")

    @_builtins.property
    @pulumi.getter(name="lsaRetransmitIntervalVariable")
    def lsa_retransmit_interval_variable(self) -> Optional[_builtins.str]:
        """
        Variable name
        """
        return pulumi.get(self, "lsa_retransmit_interval_variable")

    @_builtins.property
    @pulumi.getter(name="messageDigestKey")
    def message_digest_key(self) -> Optional[_builtins.str]:
        """
        Set MD5 authentication key
        """
        return pulumi.get(self, "message_digest_key")

    @_builtins.property
    @pulumi.getter(name="messageDigestKeyId")
    def message_digest_key_id(self) -> Optional[_builtins.int]:
        """
        Set MD5 message digest key
          - Range: `1`-`255`
        """
        return pulumi.get(self, "message_digest_key_id")

    @_builtins.property
    @pulumi.getter(name="messageDigestKeyIdVariable")
    def message_digest_key_id_variable(self) -> Optional[_builtins.str]:
        """
        Variable name
        """
        return pulumi.get(self, "message_digest_key_id_variable")

    @_builtins.property
    @pulumi.getter(name="messageDigestKeyVariable")
    def message_digest_key_variable(self) -> Optional[_builtins.str]:
        """
        Variable name
        """
        return pulumi.get(self, "message_digest_key_variable")

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[_builtins.str]:
        """
        Set interface name
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter(name="nameVariable")
    def name_variable(self) -> Optional[_builtins.str]:
        """
        Variable name
        """
        return pulumi.get(self, "name_variable")

    @_builtins.property
    @pulumi.getter(name="networkType")
    def network_type(self) -> Optional[_builtins.str]:
        """
        Set the OSPF network type
          - Choices: `broadcast`, `point-to-point`, `non-broadcast`, `point-to-multipoint`
          - Default value: `broadcast`
        """
        return pulumi.get(self, "network_type")

    @_builtins.property
    @pulumi.getter(name="networkTypeVariable")
    def network_type_variable(self) -> Optional[_builtins.str]:
        """
        Variable name
        """
        return pulumi.get(self, "network_type_variable")

    @_builtins.property
    @pulumi.getter(name="passiveInterface")
    def passive_interface(self) -> Optional[_builtins.bool]:
        """
        Set the interface to advertise its address, but not to actively run OSPF
          - Default value: `false`
        """
        return pulumi.get(self, "passive_interface")

    @_builtins.property
    @pulumi.getter(name="passiveInterfaceVariable")
    def passive_interface_variable(self) -> Optional[_builtins.str]:
        """
        Variable name
        """
        return pulumi.get(self, "passive_interface_variable")


@pulumi.output_type
class TransportRoutingOspfFeatureAreaRange(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "costVariable":
            suggest = "cost_variable"
        elif key == "ipAddress":
            suggest = "ip_address"
        elif key == "ipAddressVariable":
            suggest = "ip_address_variable"
        elif key == "noAdvertise":
            suggest = "no_advertise"
        elif key == "noAdvertiseVariable":
            suggest = "no_advertise_variable"
        elif key == "subnetMask":
            suggest = "subnet_mask"
        elif key == "subnetMaskVariable":
            suggest = "subnet_mask_variable"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in TransportRoutingOspfFeatureAreaRange. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        TransportRoutingOspfFeatureAreaRange.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        TransportRoutingOspfFeatureAreaRange.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 cost: Optional[_builtins.int] = None,
                 cost_variable: Optional[_builtins.str] = None,
                 ip_address: Optional[_builtins.str] = None,
                 ip_address_variable: Optional[_builtins.str] = None,
                 no_advertise: Optional[_builtins.bool] = None,
                 no_advertise_variable: Optional[_builtins.str] = None,
                 subnet_mask: Optional[_builtins.str] = None,
                 subnet_mask_variable: Optional[_builtins.str] = None):
        """
        :param _builtins.int cost: Set cost for this range
                 - Range: `0`-`16777214`
        :param _builtins.str cost_variable: Variable name
        :param _builtins.str ip_address: IP Address
        :param _builtins.str ip_address_variable: Variable name
        :param _builtins.bool no_advertise: Do not advertise this range
                 - Default value: `false`
        :param _builtins.str no_advertise_variable: Variable name
        :param _builtins.str subnet_mask: Subnet Mask
                 - Choices: `255.255.255.255`, `255.255.255.254`, `255.255.255.252`, `255.255.255.248`, `255.255.255.240`, `255.255.255.224`, `255.255.255.192`, `255.255.255.128`, `255.255.255.0`, `255.255.254.0`, `255.255.252.0`, `255.255.248.0`, `255.255.240.0`, `255.255.224.0`, `255.255.192.0`, `255.255.128.0`, `255.255.0.0`, `255.254.0.0`, `255.252.0.0`, `255.240.0.0`, `255.224.0.0`, `255.192.0.0`, `255.128.0.0`, `255.0.0.0`, `254.0.0.0`, `252.0.0.0`, `248.0.0.0`, `240.0.0.0`, `224.0.0.0`, `192.0.0.0`, `128.0.0.0`, `0.0.0.0`
        :param _builtins.str subnet_mask_variable: Variable name
        """
        if cost is not None:
            pulumi.set(__self__, "cost", cost)
        if cost_variable is not None:
            pulumi.set(__self__, "cost_variable", cost_variable)
        if ip_address is not None:
            pulumi.set(__self__, "ip_address", ip_address)
        if ip_address_variable is not None:
            pulumi.set(__self__, "ip_address_variable", ip_address_variable)
        if no_advertise is not None:
            pulumi.set(__self__, "no_advertise", no_advertise)
        if no_advertise_variable is not None:
            pulumi.set(__self__, "no_advertise_variable", no_advertise_variable)
        if subnet_mask is not None:
            pulumi.set(__self__, "subnet_mask", subnet_mask)
        if subnet_mask_variable is not None:
            pulumi.set(__self__, "subnet_mask_variable", subnet_mask_variable)

    @_builtins.property
    @pulumi.getter
    def cost(self) -> Optional[_builtins.int]:
        """
        Set cost for this range
          - Range: `0`-`16777214`
        """
        return pulumi.get(self, "cost")

    @_builtins.property
    @pulumi.getter(name="costVariable")
    def cost_variable(self) -> Optional[_builtins.str]:
        """
        Variable name
        """
        return pulumi.get(self, "cost_variable")

    @_builtins.property
    @pulumi.getter(name="ipAddress")
    def ip_address(self) -> Optional[_builtins.str]:
        """
        IP Address
        """
        return pulumi.get(self, "ip_address")

    @_builtins.property
    @pulumi.getter(name="ipAddressVariable")
    def ip_address_variable(self) -> Optional[_builtins.str]:
        """
        Variable name
        """
        return pulumi.get(self, "ip_address_variable")

    @_builtins.property
    @pulumi.getter(name="noAdvertise")
    def no_advertise(self) -> Optional[_builtins.bool]:
        """
        Do not advertise this range
          - Default value: `false`
        """
        return pulumi.get(self, "no_advertise")

    @_builtins.property
    @pulumi.getter(name="noAdvertiseVariable")
    def no_advertise_variable(self) -> Optional[_builtins.str]:
        """
        Variable name
        """
        return pulumi.get(self, "no_advertise_variable")

    @_builtins.property
    @pulumi.getter(name="subnetMask")
    def subnet_mask(self) -> Optional[_builtins.str]:
        """
        Subnet Mask
          - Choices: `255.255.255.255`, `255.255.255.254`, `255.255.255.252`, `255.255.255.248`, `255.255.255.240`, `255.255.255.224`, `255.255.255.192`, `255.255.255.128`, `255.255.255.0`, `255.255.254.0`, `255.255.252.0`, `255.255.248.0`, `255.255.240.0`, `255.255.224.0`, `255.255.192.0`, `255.255.128.0`, `255.255.0.0`, `255.254.0.0`, `255.252.0.0`, `255.240.0.0`, `255.224.0.0`, `255.192.0.0`, `255.128.0.0`, `255.0.0.0`, `254.0.0.0`, `252.0.0.0`, `248.0.0.0`, `240.0.0.0`, `224.0.0.0`, `192.0.0.0`, `128.0.0.0`, `0.0.0.0`
        """
        return pulumi.get(self, "subnet_mask")

    @_builtins.property
    @pulumi.getter(name="subnetMaskVariable")
    def subnet_mask_variable(self) -> Optional[_builtins.str]:
        """
        Variable name
        """
        return pulumi.get(self, "subnet_mask_variable")


@pulumi.output_type
class TransportRoutingOspfFeatureRedistribute(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "natDia":
            suggest = "nat_dia"
        elif key == "natDiaVariable":
            suggest = "nat_dia_variable"
        elif key == "protocolVariable":
            suggest = "protocol_variable"
        elif key == "routePolicyId":
            suggest = "route_policy_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in TransportRoutingOspfFeatureRedistribute. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        TransportRoutingOspfFeatureRedistribute.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        TransportRoutingOspfFeatureRedistribute.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 nat_dia: Optional[_builtins.bool] = None,
                 nat_dia_variable: Optional[_builtins.str] = None,
                 protocol: Optional[_builtins.str] = None,
                 protocol_variable: Optional[_builtins.str] = None,
                 route_policy_id: Optional[_builtins.str] = None):
        """
        :param _builtins.bool nat_dia: Enable NAT DIA for redistributed routes
                 - Default value: `true`
        :param _builtins.str nat_dia_variable: Variable name
        :param _builtins.str protocol: Set the protocol
                 - Choices: `static`, `connected`, `bgp`, `omp`, `nat`, `eigrp`
        :param _builtins.str protocol_variable: Variable name
        """
        if nat_dia is not None:
            pulumi.set(__self__, "nat_dia", nat_dia)
        if nat_dia_variable is not None:
            pulumi.set(__self__, "nat_dia_variable", nat_dia_variable)
        if protocol is not None:
            pulumi.set(__self__, "protocol", protocol)
        if protocol_variable is not None:
            pulumi.set(__self__, "protocol_variable", protocol_variable)
        if route_policy_id is not None:
            pulumi.set(__self__, "route_policy_id", route_policy_id)

    @_builtins.property
    @pulumi.getter(name="natDia")
    def nat_dia(self) -> Optional[_builtins.bool]:
        """
        Enable NAT DIA for redistributed routes
          - Default value: `true`
        """
        return pulumi.get(self, "nat_dia")

    @_builtins.property
    @pulumi.getter(name="natDiaVariable")
    def nat_dia_variable(self) -> Optional[_builtins.str]:
        """
        Variable name
        """
        return pulumi.get(self, "nat_dia_variable")

    @_builtins.property
    @pulumi.getter
    def protocol(self) -> Optional[_builtins.str]:
        """
        Set the protocol
          - Choices: `static`, `connected`, `bgp`, `omp`, `nat`, `eigrp`
        """
        return pulumi.get(self, "protocol")

    @_builtins.property
    @pulumi.getter(name="protocolVariable")
    def protocol_variable(self) -> Optional[_builtins.str]:
        """
        Variable name
        """
        return pulumi.get(self, "protocol_variable")

    @_builtins.property
    @pulumi.getter(name="routePolicyId")
    def route_policy_id(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "route_policy_id")


@pulumi.output_type
class TransportRoutingOspfFeatureRouterLsa(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "timeVariable":
            suggest = "time_variable"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in TransportRoutingOspfFeatureRouterLsa. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        TransportRoutingOspfFeatureRouterLsa.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        TransportRoutingOspfFeatureRouterLsa.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 time: Optional[_builtins.int] = None,
                 time_variable: Optional[_builtins.str] = None,
                 type: Optional[_builtins.str] = None):
        """
        :param _builtins.int time: Set how long to advertise maximum metric after router starts up
                 - Range: `5`-`86400`
        :param _builtins.str time_variable: Variable name
        :param _builtins.str type: Set the router LSA advertisement type
                 - Choices: `administrative`, `on-startup`
        """
        if time is not None:
            pulumi.set(__self__, "time", time)
        if time_variable is not None:
            pulumi.set(__self__, "time_variable", time_variable)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @_builtins.property
    @pulumi.getter
    def time(self) -> Optional[_builtins.int]:
        """
        Set how long to advertise maximum metric after router starts up
          - Range: `5`-`86400`
        """
        return pulumi.get(self, "time")

    @_builtins.property
    @pulumi.getter(name="timeVariable")
    def time_variable(self) -> Optional[_builtins.str]:
        """
        Variable name
        """
        return pulumi.get(self, "time_variable")

    @_builtins.property
    @pulumi.getter
    def type(self) -> Optional[_builtins.str]:
        """
        Set the router LSA advertisement type
          - Choices: `administrative`, `on-startup`
        """
        return pulumi.get(self, "type")


@pulumi.output_type
class TransportRoutingOspfv3Ipv4FeatureArea(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "alwaysTranslate":
            suggest = "always_translate"
        elif key == "alwaysTranslateVariable":
            suggest = "always_translate_variable"
        elif key == "areaNumber":
            suggest = "area_number"
        elif key == "areaNumberVariable":
            suggest = "area_number_variable"
        elif key == "areaType":
            suggest = "area_type"
        elif key == "noSummary":
            suggest = "no_summary"
        elif key == "noSummaryVariable":
            suggest = "no_summary_variable"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in TransportRoutingOspfv3Ipv4FeatureArea. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        TransportRoutingOspfv3Ipv4FeatureArea.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        TransportRoutingOspfv3Ipv4FeatureArea.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 always_translate: Optional[_builtins.bool] = None,
                 always_translate_variable: Optional[_builtins.str] = None,
                 area_number: Optional[_builtins.int] = None,
                 area_number_variable: Optional[_builtins.str] = None,
                 area_type: Optional[_builtins.str] = None,
                 interfaces: Optional[Sequence['outputs.TransportRoutingOspfv3Ipv4FeatureAreaInterface']] = None,
                 no_summary: Optional[_builtins.bool] = None,
                 no_summary_variable: Optional[_builtins.str] = None,
                 ranges: Optional[Sequence['outputs.TransportRoutingOspfv3Ipv4FeatureAreaRange']] = None):
        """
        :param _builtins.bool always_translate: Always translate type7 LSAs
        :param _builtins.str always_translate_variable: Variable name
        :param _builtins.int area_number: Set OSPF area number
                 - Range: `0`-`4294967295`
        :param _builtins.str area_number_variable: Variable name
        :param _builtins.str area_type: stub area type
                 - Choices: `stub`
        :param Sequence['TransportRoutingOspfv3Ipv4FeatureAreaInterfaceArgs'] interfaces: Set OSPF interface parameters
        :param _builtins.bool no_summary: Do not inject inter-area routes
        :param _builtins.str no_summary_variable: Variable name
        :param Sequence['TransportRoutingOspfv3Ipv4FeatureAreaRangeArgs'] ranges: Summarize OSPF routes at an area boundary
        """
        if always_translate is not None:
            pulumi.set(__self__, "always_translate", always_translate)
        if always_translate_variable is not None:
            pulumi.set(__self__, "always_translate_variable", always_translate_variable)
        if area_number is not None:
            pulumi.set(__self__, "area_number", area_number)
        if area_number_variable is not None:
            pulumi.set(__self__, "area_number_variable", area_number_variable)
        if area_type is not None:
            pulumi.set(__self__, "area_type", area_type)
        if interfaces is not None:
            pulumi.set(__self__, "interfaces", interfaces)
        if no_summary is not None:
            pulumi.set(__self__, "no_summary", no_summary)
        if no_summary_variable is not None:
            pulumi.set(__self__, "no_summary_variable", no_summary_variable)
        if ranges is not None:
            pulumi.set(__self__, "ranges", ranges)

    @_builtins.property
    @pulumi.getter(name="alwaysTranslate")
    def always_translate(self) -> Optional[_builtins.bool]:
        """
        Always translate type7 LSAs
        """
        return pulumi.get(self, "always_translate")

    @_builtins.property
    @pulumi.getter(name="alwaysTranslateVariable")
    def always_translate_variable(self) -> Optional[_builtins.str]:
        """
        Variable name
        """
        return pulumi.get(self, "always_translate_variable")

    @_builtins.property
    @pulumi.getter(name="areaNumber")
    def area_number(self) -> Optional[_builtins.int]:
        """
        Set OSPF area number
          - Range: `0`-`4294967295`
        """
        return pulumi.get(self, "area_number")

    @_builtins.property
    @pulumi.getter(name="areaNumberVariable")
    def area_number_variable(self) -> Optional[_builtins.str]:
        """
        Variable name
        """
        return pulumi.get(self, "area_number_variable")

    @_builtins.property
    @pulumi.getter(name="areaType")
    def area_type(self) -> Optional[_builtins.str]:
        """
        stub area type
          - Choices: `stub`
        """
        return pulumi.get(self, "area_type")

    @_builtins.property
    @pulumi.getter
    def interfaces(self) -> Optional[Sequence['outputs.TransportRoutingOspfv3Ipv4FeatureAreaInterface']]:
        """
        Set OSPF interface parameters
        """
        return pulumi.get(self, "interfaces")

    @_builtins.property
    @pulumi.getter(name="noSummary")
    def no_summary(self) -> Optional[_builtins.bool]:
        """
        Do not inject inter-area routes
        """
        return pulumi.get(self, "no_summary")

    @_builtins.property
    @pulumi.getter(name="noSummaryVariable")
    def no_summary_variable(self) -> Optional[_builtins.str]:
        """
        Variable name
        """
        return pulumi.get(self, "no_summary_variable")

    @_builtins.property
    @pulumi.getter
    def ranges(self) -> Optional[Sequence['outputs.TransportRoutingOspfv3Ipv4FeatureAreaRange']]:
        """
        Summarize OSPF routes at an area boundary
        """
        return pulumi.get(self, "ranges")


@pulumi.output_type
class TransportRoutingOspfv3Ipv4FeatureAreaInterface(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "authenticationKey":
            suggest = "authentication_key"
        elif key == "authenticationKeyVariable":
            suggest = "authentication_key_variable"
        elif key == "authenticationSpi":
            suggest = "authentication_spi"
        elif key == "authenticationSpiVariable":
            suggest = "authentication_spi_variable"
        elif key == "authenticationType":
            suggest = "authentication_type"
        elif key == "costVariable":
            suggest = "cost_variable"
        elif key == "deadInterval":
            suggest = "dead_interval"
        elif key == "deadIntervalVariable":
            suggest = "dead_interval_variable"
        elif key == "helloInterval":
            suggest = "hello_interval"
        elif key == "helloIntervalVariable":
            suggest = "hello_interval_variable"
        elif key == "lsaRetransmitInterval":
            suggest = "lsa_retransmit_interval"
        elif key == "lsaRetransmitIntervalVariable":
            suggest = "lsa_retransmit_interval_variable"
        elif key == "nameVariable":
            suggest = "name_variable"
        elif key == "networkType":
            suggest = "network_type"
        elif key == "networkTypeVariable":
            suggest = "network_type_variable"
        elif key == "passiveInterface":
            suggest = "passive_interface"
        elif key == "passiveInterfaceVariable":
            suggest = "passive_interface_variable"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in TransportRoutingOspfv3Ipv4FeatureAreaInterface. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        TransportRoutingOspfv3Ipv4FeatureAreaInterface.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        TransportRoutingOspfv3Ipv4FeatureAreaInterface.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 authentication_key: Optional[_builtins.str] = None,
                 authentication_key_variable: Optional[_builtins.str] = None,
                 authentication_spi: Optional[_builtins.int] = None,
                 authentication_spi_variable: Optional[_builtins.str] = None,
                 authentication_type: Optional[_builtins.str] = None,
                 cost: Optional[_builtins.int] = None,
                 cost_variable: Optional[_builtins.str] = None,
                 dead_interval: Optional[_builtins.int] = None,
                 dead_interval_variable: Optional[_builtins.str] = None,
                 hello_interval: Optional[_builtins.int] = None,
                 hello_interval_variable: Optional[_builtins.str] = None,
                 lsa_retransmit_interval: Optional[_builtins.int] = None,
                 lsa_retransmit_interval_variable: Optional[_builtins.str] = None,
                 name: Optional[_builtins.str] = None,
                 name_variable: Optional[_builtins.str] = None,
                 network_type: Optional[_builtins.str] = None,
                 network_type_variable: Optional[_builtins.str] = None,
                 passive_interface: Optional[_builtins.bool] = None,
                 passive_interface_variable: Optional[_builtins.str] = None):
        """
        :param _builtins.str authentication_key: Set OSPF interface authentication IPSEC key
        :param _builtins.str authentication_key_variable: Variable name
        :param _builtins.int authentication_spi: Set OSPF interface authentication IPSec SPI, range 256..4294967295
                 - Range: `256`-`4294967295`
        :param _builtins.str authentication_spi_variable: Variable name
        :param _builtins.str authentication_type: No Authentication by default
                 - Choices: `no-auth`
        :param _builtins.int cost: Set cost of OSPF interface
                 - Range: `1`-`65535`
        :param _builtins.str cost_variable: Variable name
        :param _builtins.int dead_interval: Set interval after which neighbor is declared to be down
                 - Range: `1`-`65535`
                 - Default value: `40`
        :param _builtins.str dead_interval_variable: Variable name
        :param _builtins.int hello_interval: Set interval between OSPF hello packets
                 - Range: `1`-`65535`
                 - Default value: `10`
        :param _builtins.str hello_interval_variable: Variable name
        :param _builtins.int lsa_retransmit_interval: Set time between retransmitting LSAs
                 - Range: `1`-`65535`
                 - Default value: `5`
        :param _builtins.str lsa_retransmit_interval_variable: Variable name
        :param _builtins.str name: Set interface name
        :param _builtins.str name_variable: Variable name
        :param _builtins.str network_type: Set the OSPF network type
                 - Choices: `broadcast`, `point-to-point`, `non-broadcast`, `point-to-multipoint`
        :param _builtins.str network_type_variable: Variable name
        :param _builtins.bool passive_interface: Set the interface to advertise its address, but not to actively run OSPF
                 - Default value: `false`
        :param _builtins.str passive_interface_variable: Variable name
        """
        if authentication_key is not None:
            pulumi.set(__self__, "authentication_key", authentication_key)
        if authentication_key_variable is not None:
            pulumi.set(__self__, "authentication_key_variable", authentication_key_variable)
        if authentication_spi is not None:
            pulumi.set(__self__, "authentication_spi", authentication_spi)
        if authentication_spi_variable is not None:
            pulumi.set(__self__, "authentication_spi_variable", authentication_spi_variable)
        if authentication_type is not None:
            pulumi.set(__self__, "authentication_type", authentication_type)
        if cost is not None:
            pulumi.set(__self__, "cost", cost)
        if cost_variable is not None:
            pulumi.set(__self__, "cost_variable", cost_variable)
        if dead_interval is not None:
            pulumi.set(__self__, "dead_interval", dead_interval)
        if dead_interval_variable is not None:
            pulumi.set(__self__, "dead_interval_variable", dead_interval_variable)
        if hello_interval is not None:
            pulumi.set(__self__, "hello_interval", hello_interval)
        if hello_interval_variable is not None:
            pulumi.set(__self__, "hello_interval_variable", hello_interval_variable)
        if lsa_retransmit_interval is not None:
            pulumi.set(__self__, "lsa_retransmit_interval", lsa_retransmit_interval)
        if lsa_retransmit_interval_variable is not None:
            pulumi.set(__self__, "lsa_retransmit_interval_variable", lsa_retransmit_interval_variable)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if name_variable is not None:
            pulumi.set(__self__, "name_variable", name_variable)
        if network_type is not None:
            pulumi.set(__self__, "network_type", network_type)
        if network_type_variable is not None:
            pulumi.set(__self__, "network_type_variable", network_type_variable)
        if passive_interface is not None:
            pulumi.set(__self__, "passive_interface", passive_interface)
        if passive_interface_variable is not None:
            pulumi.set(__self__, "passive_interface_variable", passive_interface_variable)

    @_builtins.property
    @pulumi.getter(name="authenticationKey")
    def authentication_key(self) -> Optional[_builtins.str]:
        """
        Set OSPF interface authentication IPSEC key
        """
        return pulumi.get(self, "authentication_key")

    @_builtins.property
    @pulumi.getter(name="authenticationKeyVariable")
    def authentication_key_variable(self) -> Optional[_builtins.str]:
        """
        Variable name
        """
        return pulumi.get(self, "authentication_key_variable")

    @_builtins.property
    @pulumi.getter(name="authenticationSpi")
    def authentication_spi(self) -> Optional[_builtins.int]:
        """
        Set OSPF interface authentication IPSec SPI, range 256..4294967295
          - Range: `256`-`4294967295`
        """
        return pulumi.get(self, "authentication_spi")

    @_builtins.property
    @pulumi.getter(name="authenticationSpiVariable")
    def authentication_spi_variable(self) -> Optional[_builtins.str]:
        """
        Variable name
        """
        return pulumi.get(self, "authentication_spi_variable")

    @_builtins.property
    @pulumi.getter(name="authenticationType")
    def authentication_type(self) -> Optional[_builtins.str]:
        """
        No Authentication by default
          - Choices: `no-auth`
        """
        return pulumi.get(self, "authentication_type")

    @_builtins.property
    @pulumi.getter
    def cost(self) -> Optional[_builtins.int]:
        """
        Set cost of OSPF interface
          - Range: `1`-`65535`
        """
        return pulumi.get(self, "cost")

    @_builtins.property
    @pulumi.getter(name="costVariable")
    def cost_variable(self) -> Optional[_builtins.str]:
        """
        Variable name
        """
        return pulumi.get(self, "cost_variable")

    @_builtins.property
    @pulumi.getter(name="deadInterval")
    def dead_interval(self) -> Optional[_builtins.int]:
        """
        Set interval after which neighbor is declared to be down
          - Range: `1`-`65535`
          - Default value: `40`
        """
        return pulumi.get(self, "dead_interval")

    @_builtins.property
    @pulumi.getter(name="deadIntervalVariable")
    def dead_interval_variable(self) -> Optional[_builtins.str]:
        """
        Variable name
        """
        return pulumi.get(self, "dead_interval_variable")

    @_builtins.property
    @pulumi.getter(name="helloInterval")
    def hello_interval(self) -> Optional[_builtins.int]:
        """
        Set interval between OSPF hello packets
          - Range: `1`-`65535`
          - Default value: `10`
        """
        return pulumi.get(self, "hello_interval")

    @_builtins.property
    @pulumi.getter(name="helloIntervalVariable")
    def hello_interval_variable(self) -> Optional[_builtins.str]:
        """
        Variable name
        """
        return pulumi.get(self, "hello_interval_variable")

    @_builtins.property
    @pulumi.getter(name="lsaRetransmitInterval")
    def lsa_retransmit_interval(self) -> Optional[_builtins.int]:
        """
        Set time between retransmitting LSAs
          - Range: `1`-`65535`
          - Default value: `5`
        """
        return pulumi.get(self, "lsa_retransmit_interval")

    @_builtins.property
    @pulumi.getter(name="lsaRetransmitIntervalVariable")
    def lsa_retransmit_interval_variable(self) -> Optional[_builtins.str]:
        """
        Variable name
        """
        return pulumi.get(self, "lsa_retransmit_interval_variable")

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[_builtins.str]:
        """
        Set interface name
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter(name="nameVariable")
    def name_variable(self) -> Optional[_builtins.str]:
        """
        Variable name
        """
        return pulumi.get(self, "name_variable")

    @_builtins.property
    @pulumi.getter(name="networkType")
    def network_type(self) -> Optional[_builtins.str]:
        """
        Set the OSPF network type
          - Choices: `broadcast`, `point-to-point`, `non-broadcast`, `point-to-multipoint`
        """
        return pulumi.get(self, "network_type")

    @_builtins.property
    @pulumi.getter(name="networkTypeVariable")
    def network_type_variable(self) -> Optional[_builtins.str]:
        """
        Variable name
        """
        return pulumi.get(self, "network_type_variable")

    @_builtins.property
    @pulumi.getter(name="passiveInterface")
    def passive_interface(self) -> Optional[_builtins.bool]:
        """
        Set the interface to advertise its address, but not to actively run OSPF
          - Default value: `false`
        """
        return pulumi.get(self, "passive_interface")

    @_builtins.property
    @pulumi.getter(name="passiveInterfaceVariable")
    def passive_interface_variable(self) -> Optional[_builtins.str]:
        """
        Variable name
        """
        return pulumi.get(self, "passive_interface_variable")


@pulumi.output_type
class TransportRoutingOspfv3Ipv4FeatureAreaRange(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "costVariable":
            suggest = "cost_variable"
        elif key == "ipAddress":
            suggest = "ip_address"
        elif key == "ipAddressVariable":
            suggest = "ip_address_variable"
        elif key == "noAdvertise":
            suggest = "no_advertise"
        elif key == "noAdvertiseVariable":
            suggest = "no_advertise_variable"
        elif key == "subnetMask":
            suggest = "subnet_mask"
        elif key == "subnetMaskVariable":
            suggest = "subnet_mask_variable"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in TransportRoutingOspfv3Ipv4FeatureAreaRange. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        TransportRoutingOspfv3Ipv4FeatureAreaRange.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        TransportRoutingOspfv3Ipv4FeatureAreaRange.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 cost: Optional[_builtins.int] = None,
                 cost_variable: Optional[_builtins.str] = None,
                 ip_address: Optional[_builtins.str] = None,
                 ip_address_variable: Optional[_builtins.str] = None,
                 no_advertise: Optional[_builtins.bool] = None,
                 no_advertise_variable: Optional[_builtins.str] = None,
                 subnet_mask: Optional[_builtins.str] = None,
                 subnet_mask_variable: Optional[_builtins.str] = None):
        """
        :param _builtins.int cost: Set cost for this range
                 - Range: `0`-`16777214`
        :param _builtins.str cost_variable: Variable name
        :param _builtins.str ip_address_variable: Variable name
        :param _builtins.bool no_advertise: Do not advertise this range
                 - Default value: `false`
        :param _builtins.str no_advertise_variable: Variable name
        :param _builtins.str subnet_mask: - Choices: `255.255.255.255`, `255.255.255.254`, `255.255.255.252`, `255.255.255.248`, `255.255.255.240`, `255.255.255.224`, `255.255.255.192`, `255.255.255.128`, `255.255.255.0`, `255.255.254.0`, `255.255.252.0`, `255.255.248.0`, `255.255.240.0`, `255.255.224.0`, `255.255.192.0`, `255.255.128.0`, `255.255.0.0`, `255.254.0.0`, `255.252.0.0`, `255.240.0.0`, `255.224.0.0`, `255.192.0.0`, `255.128.0.0`, `255.0.0.0`, `254.0.0.0`, `252.0.0.0`, `248.0.0.0`, `240.0.0.0`, `224.0.0.0`, `192.0.0.0`, `128.0.0.0`, `0.0.0.0`
        :param _builtins.str subnet_mask_variable: Variable name
        """
        if cost is not None:
            pulumi.set(__self__, "cost", cost)
        if cost_variable is not None:
            pulumi.set(__self__, "cost_variable", cost_variable)
        if ip_address is not None:
            pulumi.set(__self__, "ip_address", ip_address)
        if ip_address_variable is not None:
            pulumi.set(__self__, "ip_address_variable", ip_address_variable)
        if no_advertise is not None:
            pulumi.set(__self__, "no_advertise", no_advertise)
        if no_advertise_variable is not None:
            pulumi.set(__self__, "no_advertise_variable", no_advertise_variable)
        if subnet_mask is not None:
            pulumi.set(__self__, "subnet_mask", subnet_mask)
        if subnet_mask_variable is not None:
            pulumi.set(__self__, "subnet_mask_variable", subnet_mask_variable)

    @_builtins.property
    @pulumi.getter
    def cost(self) -> Optional[_builtins.int]:
        """
        Set cost for this range
          - Range: `0`-`16777214`
        """
        return pulumi.get(self, "cost")

    @_builtins.property
    @pulumi.getter(name="costVariable")
    def cost_variable(self) -> Optional[_builtins.str]:
        """
        Variable name
        """
        return pulumi.get(self, "cost_variable")

    @_builtins.property
    @pulumi.getter(name="ipAddress")
    def ip_address(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "ip_address")

    @_builtins.property
    @pulumi.getter(name="ipAddressVariable")
    def ip_address_variable(self) -> Optional[_builtins.str]:
        """
        Variable name
        """
        return pulumi.get(self, "ip_address_variable")

    @_builtins.property
    @pulumi.getter(name="noAdvertise")
    def no_advertise(self) -> Optional[_builtins.bool]:
        """
        Do not advertise this range
          - Default value: `false`
        """
        return pulumi.get(self, "no_advertise")

    @_builtins.property
    @pulumi.getter(name="noAdvertiseVariable")
    def no_advertise_variable(self) -> Optional[_builtins.str]:
        """
        Variable name
        """
        return pulumi.get(self, "no_advertise_variable")

    @_builtins.property
    @pulumi.getter(name="subnetMask")
    def subnet_mask(self) -> Optional[_builtins.str]:
        """
        - Choices: `255.255.255.255`, `255.255.255.254`, `255.255.255.252`, `255.255.255.248`, `255.255.255.240`, `255.255.255.224`, `255.255.255.192`, `255.255.255.128`, `255.255.255.0`, `255.255.254.0`, `255.255.252.0`, `255.255.248.0`, `255.255.240.0`, `255.255.224.0`, `255.255.192.0`, `255.255.128.0`, `255.255.0.0`, `255.254.0.0`, `255.252.0.0`, `255.240.0.0`, `255.224.0.0`, `255.192.0.0`, `255.128.0.0`, `255.0.0.0`, `254.0.0.0`, `252.0.0.0`, `248.0.0.0`, `240.0.0.0`, `224.0.0.0`, `192.0.0.0`, `128.0.0.0`, `0.0.0.0`
        """
        return pulumi.get(self, "subnet_mask")

    @_builtins.property
    @pulumi.getter(name="subnetMaskVariable")
    def subnet_mask_variable(self) -> Optional[_builtins.str]:
        """
        Variable name
        """
        return pulumi.get(self, "subnet_mask_variable")


@pulumi.output_type
class TransportRoutingOspfv3Ipv4FeatureRedistribute(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "natDia":
            suggest = "nat_dia"
        elif key == "natDiaVariable":
            suggest = "nat_dia_variable"
        elif key == "protocolVariable":
            suggest = "protocol_variable"
        elif key == "routePolicyId":
            suggest = "route_policy_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in TransportRoutingOspfv3Ipv4FeatureRedistribute. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        TransportRoutingOspfv3Ipv4FeatureRedistribute.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        TransportRoutingOspfv3Ipv4FeatureRedistribute.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 nat_dia: Optional[_builtins.bool] = None,
                 nat_dia_variable: Optional[_builtins.str] = None,
                 protocol: Optional[_builtins.str] = None,
                 protocol_variable: Optional[_builtins.str] = None,
                 route_policy_id: Optional[_builtins.str] = None):
        """
        :param _builtins.bool nat_dia: Enable NAT DIA for redistributed routes
                 - Default value: `true`
        :param _builtins.str nat_dia_variable: Variable name
        :param _builtins.str protocol: Set the protocol
                 - Choices: `connected`, `static`, `omp`, `nat-route`, `bgp`, `eigrp`
        :param _builtins.str protocol_variable: Variable name
        """
        if nat_dia is not None:
            pulumi.set(__self__, "nat_dia", nat_dia)
        if nat_dia_variable is not None:
            pulumi.set(__self__, "nat_dia_variable", nat_dia_variable)
        if protocol is not None:
            pulumi.set(__self__, "protocol", protocol)
        if protocol_variable is not None:
            pulumi.set(__self__, "protocol_variable", protocol_variable)
        if route_policy_id is not None:
            pulumi.set(__self__, "route_policy_id", route_policy_id)

    @_builtins.property
    @pulumi.getter(name="natDia")
    def nat_dia(self) -> Optional[_builtins.bool]:
        """
        Enable NAT DIA for redistributed routes
          - Default value: `true`
        """
        return pulumi.get(self, "nat_dia")

    @_builtins.property
    @pulumi.getter(name="natDiaVariable")
    def nat_dia_variable(self) -> Optional[_builtins.str]:
        """
        Variable name
        """
        return pulumi.get(self, "nat_dia_variable")

    @_builtins.property
    @pulumi.getter
    def protocol(self) -> Optional[_builtins.str]:
        """
        Set the protocol
          - Choices: `connected`, `static`, `omp`, `nat-route`, `bgp`, `eigrp`
        """
        return pulumi.get(self, "protocol")

    @_builtins.property
    @pulumi.getter(name="protocolVariable")
    def protocol_variable(self) -> Optional[_builtins.str]:
        """
        Variable name
        """
        return pulumi.get(self, "protocol_variable")

    @_builtins.property
    @pulumi.getter(name="routePolicyId")
    def route_policy_id(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "route_policy_id")


@pulumi.output_type
class TransportRoutingOspfv3Ipv6FeatureArea(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "alwaysTranslate":
            suggest = "always_translate"
        elif key == "alwaysTranslateVariable":
            suggest = "always_translate_variable"
        elif key == "areaNumber":
            suggest = "area_number"
        elif key == "areaNumberVariable":
            suggest = "area_number_variable"
        elif key == "areaType":
            suggest = "area_type"
        elif key == "noSummary":
            suggest = "no_summary"
        elif key == "noSummaryVariable":
            suggest = "no_summary_variable"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in TransportRoutingOspfv3Ipv6FeatureArea. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        TransportRoutingOspfv3Ipv6FeatureArea.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        TransportRoutingOspfv3Ipv6FeatureArea.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 always_translate: Optional[_builtins.bool] = None,
                 always_translate_variable: Optional[_builtins.str] = None,
                 area_number: Optional[_builtins.int] = None,
                 area_number_variable: Optional[_builtins.str] = None,
                 area_type: Optional[_builtins.str] = None,
                 interfaces: Optional[Sequence['outputs.TransportRoutingOspfv3Ipv6FeatureAreaInterface']] = None,
                 no_summary: Optional[_builtins.bool] = None,
                 no_summary_variable: Optional[_builtins.str] = None,
                 ranges: Optional[Sequence['outputs.TransportRoutingOspfv3Ipv6FeatureAreaRange']] = None):
        """
        :param _builtins.bool always_translate: Always translate type7 LSAs
        :param _builtins.str always_translate_variable: Variable name
        :param _builtins.int area_number: Set OSPF area number
                 - Range: `0`-`4294967295`
        :param _builtins.str area_number_variable: Variable name
        :param _builtins.str area_type: stub area type
                 - Choices: `stub`
        :param Sequence['TransportRoutingOspfv3Ipv6FeatureAreaInterfaceArgs'] interfaces: Set OSPF interface parameters
        :param _builtins.bool no_summary: Do not inject inter-area routes
        :param _builtins.str no_summary_variable: Variable name
        :param Sequence['TransportRoutingOspfv3Ipv6FeatureAreaRangeArgs'] ranges: Summarize OSPF routes at an area boundary
        """
        if always_translate is not None:
            pulumi.set(__self__, "always_translate", always_translate)
        if always_translate_variable is not None:
            pulumi.set(__self__, "always_translate_variable", always_translate_variable)
        if area_number is not None:
            pulumi.set(__self__, "area_number", area_number)
        if area_number_variable is not None:
            pulumi.set(__self__, "area_number_variable", area_number_variable)
        if area_type is not None:
            pulumi.set(__self__, "area_type", area_type)
        if interfaces is not None:
            pulumi.set(__self__, "interfaces", interfaces)
        if no_summary is not None:
            pulumi.set(__self__, "no_summary", no_summary)
        if no_summary_variable is not None:
            pulumi.set(__self__, "no_summary_variable", no_summary_variable)
        if ranges is not None:
            pulumi.set(__self__, "ranges", ranges)

    @_builtins.property
    @pulumi.getter(name="alwaysTranslate")
    def always_translate(self) -> Optional[_builtins.bool]:
        """
        Always translate type7 LSAs
        """
        return pulumi.get(self, "always_translate")

    @_builtins.property
    @pulumi.getter(name="alwaysTranslateVariable")
    def always_translate_variable(self) -> Optional[_builtins.str]:
        """
        Variable name
        """
        return pulumi.get(self, "always_translate_variable")

    @_builtins.property
    @pulumi.getter(name="areaNumber")
    def area_number(self) -> Optional[_builtins.int]:
        """
        Set OSPF area number
          - Range: `0`-`4294967295`
        """
        return pulumi.get(self, "area_number")

    @_builtins.property
    @pulumi.getter(name="areaNumberVariable")
    def area_number_variable(self) -> Optional[_builtins.str]:
        """
        Variable name
        """
        return pulumi.get(self, "area_number_variable")

    @_builtins.property
    @pulumi.getter(name="areaType")
    def area_type(self) -> Optional[_builtins.str]:
        """
        stub area type
          - Choices: `stub`
        """
        return pulumi.get(self, "area_type")

    @_builtins.property
    @pulumi.getter
    def interfaces(self) -> Optional[Sequence['outputs.TransportRoutingOspfv3Ipv6FeatureAreaInterface']]:
        """
        Set OSPF interface parameters
        """
        return pulumi.get(self, "interfaces")

    @_builtins.property
    @pulumi.getter(name="noSummary")
    def no_summary(self) -> Optional[_builtins.bool]:
        """
        Do not inject inter-area routes
        """
        return pulumi.get(self, "no_summary")

    @_builtins.property
    @pulumi.getter(name="noSummaryVariable")
    def no_summary_variable(self) -> Optional[_builtins.str]:
        """
        Variable name
        """
        return pulumi.get(self, "no_summary_variable")

    @_builtins.property
    @pulumi.getter
    def ranges(self) -> Optional[Sequence['outputs.TransportRoutingOspfv3Ipv6FeatureAreaRange']]:
        """
        Summarize OSPF routes at an area boundary
        """
        return pulumi.get(self, "ranges")


@pulumi.output_type
class TransportRoutingOspfv3Ipv6FeatureAreaInterface(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "authenticationKey":
            suggest = "authentication_key"
        elif key == "authenticationKeyVariable":
            suggest = "authentication_key_variable"
        elif key == "authenticationSpi":
            suggest = "authentication_spi"
        elif key == "authenticationSpiVariable":
            suggest = "authentication_spi_variable"
        elif key == "authenticationType":
            suggest = "authentication_type"
        elif key == "costVariable":
            suggest = "cost_variable"
        elif key == "deadInterval":
            suggest = "dead_interval"
        elif key == "deadIntervalVariable":
            suggest = "dead_interval_variable"
        elif key == "helloInterval":
            suggest = "hello_interval"
        elif key == "helloIntervalVariable":
            suggest = "hello_interval_variable"
        elif key == "lsaRetransmitInterval":
            suggest = "lsa_retransmit_interval"
        elif key == "lsaRetransmitIntervalVariable":
            suggest = "lsa_retransmit_interval_variable"
        elif key == "nameVariable":
            suggest = "name_variable"
        elif key == "networkType":
            suggest = "network_type"
        elif key == "networkTypeVariable":
            suggest = "network_type_variable"
        elif key == "passiveInterface":
            suggest = "passive_interface"
        elif key == "passiveInterfaceVariable":
            suggest = "passive_interface_variable"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in TransportRoutingOspfv3Ipv6FeatureAreaInterface. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        TransportRoutingOspfv3Ipv6FeatureAreaInterface.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        TransportRoutingOspfv3Ipv6FeatureAreaInterface.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 authentication_key: Optional[_builtins.str] = None,
                 authentication_key_variable: Optional[_builtins.str] = None,
                 authentication_spi: Optional[_builtins.int] = None,
                 authentication_spi_variable: Optional[_builtins.str] = None,
                 authentication_type: Optional[_builtins.str] = None,
                 cost: Optional[_builtins.int] = None,
                 cost_variable: Optional[_builtins.str] = None,
                 dead_interval: Optional[_builtins.int] = None,
                 dead_interval_variable: Optional[_builtins.str] = None,
                 hello_interval: Optional[_builtins.int] = None,
                 hello_interval_variable: Optional[_builtins.str] = None,
                 lsa_retransmit_interval: Optional[_builtins.int] = None,
                 lsa_retransmit_interval_variable: Optional[_builtins.str] = None,
                 name: Optional[_builtins.str] = None,
                 name_variable: Optional[_builtins.str] = None,
                 network_type: Optional[_builtins.str] = None,
                 network_type_variable: Optional[_builtins.str] = None,
                 passive_interface: Optional[_builtins.bool] = None,
                 passive_interface_variable: Optional[_builtins.str] = None):
        """
        :param _builtins.str authentication_key: Set OSPF interface authentication IPSEC key
        :param _builtins.str authentication_key_variable: Variable name
        :param _builtins.int authentication_spi: Set OSPF interface authentication IPSec SPI, range 256..4294967295
                 - Range: `256`-`4294967295`
        :param _builtins.str authentication_spi_variable: Variable name
        :param _builtins.str authentication_type: No Authentication by default
                 - Choices: `no-auth`
        :param _builtins.int cost: Set cost of OSPF interface
                 - Range: `1`-`65535`
        :param _builtins.str cost_variable: Variable name
        :param _builtins.int dead_interval: Set interval after which neighbor is declared to be down
                 - Range: `1`-`65535`
                 - Default value: `40`
        :param _builtins.str dead_interval_variable: Variable name
        :param _builtins.int hello_interval: Set interval between OSPF hello packets
                 - Range: `1`-`65535`
                 - Default value: `10`
        :param _builtins.str hello_interval_variable: Variable name
        :param _builtins.int lsa_retransmit_interval: Set time between retransmitting LSAs
                 - Range: `1`-`65535`
                 - Default value: `5`
        :param _builtins.str lsa_retransmit_interval_variable: Variable name
        :param _builtins.str name: Set interface name
        :param _builtins.str name_variable: Variable name
        :param _builtins.str network_type: Set the OSPF network type
                 - Choices: `broadcast`, `point-to-point`, `non-broadcast`, `point-to-multipoint`
        :param _builtins.str network_type_variable: Variable name
        :param _builtins.bool passive_interface: Set the interface to advertise its address, but not to actively run OSPF
                 - Default value: `false`
        :param _builtins.str passive_interface_variable: Variable name
        """
        if authentication_key is not None:
            pulumi.set(__self__, "authentication_key", authentication_key)
        if authentication_key_variable is not None:
            pulumi.set(__self__, "authentication_key_variable", authentication_key_variable)
        if authentication_spi is not None:
            pulumi.set(__self__, "authentication_spi", authentication_spi)
        if authentication_spi_variable is not None:
            pulumi.set(__self__, "authentication_spi_variable", authentication_spi_variable)
        if authentication_type is not None:
            pulumi.set(__self__, "authentication_type", authentication_type)
        if cost is not None:
            pulumi.set(__self__, "cost", cost)
        if cost_variable is not None:
            pulumi.set(__self__, "cost_variable", cost_variable)
        if dead_interval is not None:
            pulumi.set(__self__, "dead_interval", dead_interval)
        if dead_interval_variable is not None:
            pulumi.set(__self__, "dead_interval_variable", dead_interval_variable)
        if hello_interval is not None:
            pulumi.set(__self__, "hello_interval", hello_interval)
        if hello_interval_variable is not None:
            pulumi.set(__self__, "hello_interval_variable", hello_interval_variable)
        if lsa_retransmit_interval is not None:
            pulumi.set(__self__, "lsa_retransmit_interval", lsa_retransmit_interval)
        if lsa_retransmit_interval_variable is not None:
            pulumi.set(__self__, "lsa_retransmit_interval_variable", lsa_retransmit_interval_variable)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if name_variable is not None:
            pulumi.set(__self__, "name_variable", name_variable)
        if network_type is not None:
            pulumi.set(__self__, "network_type", network_type)
        if network_type_variable is not None:
            pulumi.set(__self__, "network_type_variable", network_type_variable)
        if passive_interface is not None:
            pulumi.set(__self__, "passive_interface", passive_interface)
        if passive_interface_variable is not None:
            pulumi.set(__self__, "passive_interface_variable", passive_interface_variable)

    @_builtins.property
    @pulumi.getter(name="authenticationKey")
    def authentication_key(self) -> Optional[_builtins.str]:
        """
        Set OSPF interface authentication IPSEC key
        """
        return pulumi.get(self, "authentication_key")

    @_builtins.property
    @pulumi.getter(name="authenticationKeyVariable")
    def authentication_key_variable(self) -> Optional[_builtins.str]:
        """
        Variable name
        """
        return pulumi.get(self, "authentication_key_variable")

    @_builtins.property
    @pulumi.getter(name="authenticationSpi")
    def authentication_spi(self) -> Optional[_builtins.int]:
        """
        Set OSPF interface authentication IPSec SPI, range 256..4294967295
          - Range: `256`-`4294967295`
        """
        return pulumi.get(self, "authentication_spi")

    @_builtins.property
    @pulumi.getter(name="authenticationSpiVariable")
    def authentication_spi_variable(self) -> Optional[_builtins.str]:
        """
        Variable name
        """
        return pulumi.get(self, "authentication_spi_variable")

    @_builtins.property
    @pulumi.getter(name="authenticationType")
    def authentication_type(self) -> Optional[_builtins.str]:
        """
        No Authentication by default
          - Choices: `no-auth`
        """
        return pulumi.get(self, "authentication_type")

    @_builtins.property
    @pulumi.getter
    def cost(self) -> Optional[_builtins.int]:
        """
        Set cost of OSPF interface
          - Range: `1`-`65535`
        """
        return pulumi.get(self, "cost")

    @_builtins.property
    @pulumi.getter(name="costVariable")
    def cost_variable(self) -> Optional[_builtins.str]:
        """
        Variable name
        """
        return pulumi.get(self, "cost_variable")

    @_builtins.property
    @pulumi.getter(name="deadInterval")
    def dead_interval(self) -> Optional[_builtins.int]:
        """
        Set interval after which neighbor is declared to be down
          - Range: `1`-`65535`
          - Default value: `40`
        """
        return pulumi.get(self, "dead_interval")

    @_builtins.property
    @pulumi.getter(name="deadIntervalVariable")
    def dead_interval_variable(self) -> Optional[_builtins.str]:
        """
        Variable name
        """
        return pulumi.get(self, "dead_interval_variable")

    @_builtins.property
    @pulumi.getter(name="helloInterval")
    def hello_interval(self) -> Optional[_builtins.int]:
        """
        Set interval between OSPF hello packets
          - Range: `1`-`65535`
          - Default value: `10`
        """
        return pulumi.get(self, "hello_interval")

    @_builtins.property
    @pulumi.getter(name="helloIntervalVariable")
    def hello_interval_variable(self) -> Optional[_builtins.str]:
        """
        Variable name
        """
        return pulumi.get(self, "hello_interval_variable")

    @_builtins.property
    @pulumi.getter(name="lsaRetransmitInterval")
    def lsa_retransmit_interval(self) -> Optional[_builtins.int]:
        """
        Set time between retransmitting LSAs
          - Range: `1`-`65535`
          - Default value: `5`
        """
        return pulumi.get(self, "lsa_retransmit_interval")

    @_builtins.property
    @pulumi.getter(name="lsaRetransmitIntervalVariable")
    def lsa_retransmit_interval_variable(self) -> Optional[_builtins.str]:
        """
        Variable name
        """
        return pulumi.get(self, "lsa_retransmit_interval_variable")

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[_builtins.str]:
        """
        Set interface name
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter(name="nameVariable")
    def name_variable(self) -> Optional[_builtins.str]:
        """
        Variable name
        """
        return pulumi.get(self, "name_variable")

    @_builtins.property
    @pulumi.getter(name="networkType")
    def network_type(self) -> Optional[_builtins.str]:
        """
        Set the OSPF network type
          - Choices: `broadcast`, `point-to-point`, `non-broadcast`, `point-to-multipoint`
        """
        return pulumi.get(self, "network_type")

    @_builtins.property
    @pulumi.getter(name="networkTypeVariable")
    def network_type_variable(self) -> Optional[_builtins.str]:
        """
        Variable name
        """
        return pulumi.get(self, "network_type_variable")

    @_builtins.property
    @pulumi.getter(name="passiveInterface")
    def passive_interface(self) -> Optional[_builtins.bool]:
        """
        Set the interface to advertise its address, but not to actively run OSPF
          - Default value: `false`
        """
        return pulumi.get(self, "passive_interface")

    @_builtins.property
    @pulumi.getter(name="passiveInterfaceVariable")
    def passive_interface_variable(self) -> Optional[_builtins.str]:
        """
        Variable name
        """
        return pulumi.get(self, "passive_interface_variable")


@pulumi.output_type
class TransportRoutingOspfv3Ipv6FeatureAreaRange(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "costVariable":
            suggest = "cost_variable"
        elif key == "noAdvertise":
            suggest = "no_advertise"
        elif key == "noAdvertiseVariable":
            suggest = "no_advertise_variable"
        elif key == "prefixVariable":
            suggest = "prefix_variable"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in TransportRoutingOspfv3Ipv6FeatureAreaRange. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        TransportRoutingOspfv3Ipv6FeatureAreaRange.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        TransportRoutingOspfv3Ipv6FeatureAreaRange.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 cost: Optional[_builtins.int] = None,
                 cost_variable: Optional[_builtins.str] = None,
                 no_advertise: Optional[_builtins.bool] = None,
                 no_advertise_variable: Optional[_builtins.str] = None,
                 prefix: Optional[_builtins.str] = None,
                 prefix_variable: Optional[_builtins.str] = None):
        """
        :param _builtins.int cost: Set cost for this range
                 - Range: `0`-`16777214`
        :param _builtins.str cost_variable: Variable name
        :param _builtins.bool no_advertise: Do not advertise this range
                 - Default value: `false`
        :param _builtins.str no_advertise_variable: Variable name
        :param _builtins.str prefix: IPv6 prefix,for example 2001::/64
        :param _builtins.str prefix_variable: Variable name
        """
        if cost is not None:
            pulumi.set(__self__, "cost", cost)
        if cost_variable is not None:
            pulumi.set(__self__, "cost_variable", cost_variable)
        if no_advertise is not None:
            pulumi.set(__self__, "no_advertise", no_advertise)
        if no_advertise_variable is not None:
            pulumi.set(__self__, "no_advertise_variable", no_advertise_variable)
        if prefix is not None:
            pulumi.set(__self__, "prefix", prefix)
        if prefix_variable is not None:
            pulumi.set(__self__, "prefix_variable", prefix_variable)

    @_builtins.property
    @pulumi.getter
    def cost(self) -> Optional[_builtins.int]:
        """
        Set cost for this range
          - Range: `0`-`16777214`
        """
        return pulumi.get(self, "cost")

    @_builtins.property
    @pulumi.getter(name="costVariable")
    def cost_variable(self) -> Optional[_builtins.str]:
        """
        Variable name
        """
        return pulumi.get(self, "cost_variable")

    @_builtins.property
    @pulumi.getter(name="noAdvertise")
    def no_advertise(self) -> Optional[_builtins.bool]:
        """
        Do not advertise this range
          - Default value: `false`
        """
        return pulumi.get(self, "no_advertise")

    @_builtins.property
    @pulumi.getter(name="noAdvertiseVariable")
    def no_advertise_variable(self) -> Optional[_builtins.str]:
        """
        Variable name
        """
        return pulumi.get(self, "no_advertise_variable")

    @_builtins.property
    @pulumi.getter
    def prefix(self) -> Optional[_builtins.str]:
        """
        IPv6 prefix,for example 2001::/64
        """
        return pulumi.get(self, "prefix")

    @_builtins.property
    @pulumi.getter(name="prefixVariable")
    def prefix_variable(self) -> Optional[_builtins.str]:
        """
        Variable name
        """
        return pulumi.get(self, "prefix_variable")


@pulumi.output_type
class TransportRoutingOspfv3Ipv6FeatureRedistribute(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "protocolVariable":
            suggest = "protocol_variable"
        elif key == "routePolicyId":
            suggest = "route_policy_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in TransportRoutingOspfv3Ipv6FeatureRedistribute. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        TransportRoutingOspfv3Ipv6FeatureRedistribute.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        TransportRoutingOspfv3Ipv6FeatureRedistribute.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 protocol: Optional[_builtins.str] = None,
                 protocol_variable: Optional[_builtins.str] = None,
                 route_policy_id: Optional[_builtins.str] = None):
        """
        :param _builtins.str protocol: Set the protocol
                 - Choices: `connected`, `static`, `omp`, `bgp`, `eigrp`
        :param _builtins.str protocol_variable: Variable name
        """
        if protocol is not None:
            pulumi.set(__self__, "protocol", protocol)
        if protocol_variable is not None:
            pulumi.set(__self__, "protocol_variable", protocol_variable)
        if route_policy_id is not None:
            pulumi.set(__self__, "route_policy_id", route_policy_id)

    @_builtins.property
    @pulumi.getter
    def protocol(self) -> Optional[_builtins.str]:
        """
        Set the protocol
          - Choices: `connected`, `static`, `omp`, `bgp`, `eigrp`
        """
        return pulumi.get(self, "protocol")

    @_builtins.property
    @pulumi.getter(name="protocolVariable")
    def protocol_variable(self) -> Optional[_builtins.str]:
        """
        Variable name
        """
        return pulumi.get(self, "protocol_variable")

    @_builtins.property
    @pulumi.getter(name="routePolicyId")
    def route_policy_id(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "route_policy_id")


@pulumi.output_type
class TransportT1E1ControllerFeatureEntry(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "cableLength":
            suggest = "cable_length"
        elif key == "channelGroups":
            suggest = "channel_groups"
        elif key == "clockSource":
            suggest = "clock_source"
        elif key == "descriptionVariable":
            suggest = "description_variable"
        elif key == "e1Description":
            suggest = "e1_description"
        elif key == "e1Framing":
            suggest = "e1_framing"
        elif key == "e1FramingVariable":
            suggest = "e1_framing_variable"
        elif key == "e1Linecode":
            suggest = "e1_linecode"
        elif key == "e1LinecodeVariable":
            suggest = "e1_linecode_variable"
        elif key == "lengthLong":
            suggest = "length_long"
        elif key == "lengthLongVariable":
            suggest = "length_long_variable"
        elif key == "lengthShort":
            suggest = "length_short"
        elif key == "lengthShortVariable":
            suggest = "length_short_variable"
        elif key == "lineMode":
            suggest = "line_mode"
        elif key == "lineModeVariable":
            suggest = "line_mode_variable"
        elif key == "t1Description":
            suggest = "t1_description"
        elif key == "t1Framing":
            suggest = "t1_framing"
        elif key == "t1FramingVariable":
            suggest = "t1_framing_variable"
        elif key == "t1Linecode":
            suggest = "t1_linecode"
        elif key == "t1LinecodeVariable":
            suggest = "t1_linecode_variable"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in TransportT1E1ControllerFeatureEntry. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        TransportT1E1ControllerFeatureEntry.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        TransportT1E1ControllerFeatureEntry.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 cable_length: Optional[_builtins.str] = None,
                 channel_groups: Optional[Sequence['outputs.TransportT1E1ControllerFeatureEntryChannelGroup']] = None,
                 clock_source: Optional[_builtins.str] = None,
                 description: Optional[_builtins.str] = None,
                 description_variable: Optional[_builtins.str] = None,
                 e1_description: Optional[_builtins.str] = None,
                 e1_framing: Optional[_builtins.str] = None,
                 e1_framing_variable: Optional[_builtins.str] = None,
                 e1_linecode: Optional[_builtins.str] = None,
                 e1_linecode_variable: Optional[_builtins.str] = None,
                 length_long: Optional[_builtins.str] = None,
                 length_long_variable: Optional[_builtins.str] = None,
                 length_short: Optional[_builtins.str] = None,
                 length_short_variable: Optional[_builtins.str] = None,
                 line_mode: Optional[_builtins.str] = None,
                 line_mode_variable: Optional[_builtins.str] = None,
                 t1_description: Optional[_builtins.str] = None,
                 t1_framing: Optional[_builtins.str] = None,
                 t1_framing_variable: Optional[_builtins.str] = None,
                 t1_linecode: Optional[_builtins.str] = None,
                 t1_linecode_variable: Optional[_builtins.str] = None):
        """
        :param _builtins.str cable_length: Cable Config
                 - Choices: `short`, `long`
        :param Sequence['TransportT1E1ControllerFeatureEntryChannelGroupArgs'] channel_groups: Channel Group List
        :param _builtins.str clock_source: Clock Source
                 - Choices: `line`, `internal`, `loop-timed`, `network`
        :param _builtins.str description: Description
        :param _builtins.str description_variable: Variable name
        :param _builtins.str e1_description: Card Type
                 - Choices: `E1`
        :param _builtins.str e1_framing: Framing
                 - Choices: `crc4`, `no-crc4`
        :param _builtins.str e1_framing_variable: Variable name
        :param _builtins.str e1_linecode: LineCode
                 - Choices: `ami`, `hdb3`
        :param _builtins.str e1_linecode_variable: Variable name
        :param _builtins.str length_long: length, Attribute conditional on `cable_length` being equal to `long`
                 - Choices: `-15db`, `-22.5db`, `-7.5db`, `0db`
        :param _builtins.str length_long_variable: Variable name, Attribute conditional on `cable_length` being equal to `long`
        :param _builtins.str length_short: length, Attribute conditional on `cable_length` being equal to `short`
                 - Choices: `110ft`, `220ft`, `330ft`, `440ft`, `550ft`, `660ft`
        :param _builtins.str length_short_variable: Variable name, Attribute conditional on `cable_length` being equal to `short`
        :param _builtins.str line_mode: Line Mode
                 - Choices: `secondary`, `primary`
        :param _builtins.str line_mode_variable: Variable name
        :param _builtins.str t1_description: Card Type
                 - Choices: `T1`
        :param _builtins.str t1_framing: Framing
                 - Choices: `esf`, `sf`
        :param _builtins.str t1_framing_variable: Variable name
        :param _builtins.str t1_linecode: LineCode
                 - Choices: `ami`, `b8zs`
        :param _builtins.str t1_linecode_variable: Variable name
        """
        if cable_length is not None:
            pulumi.set(__self__, "cable_length", cable_length)
        if channel_groups is not None:
            pulumi.set(__self__, "channel_groups", channel_groups)
        if clock_source is not None:
            pulumi.set(__self__, "clock_source", clock_source)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if description_variable is not None:
            pulumi.set(__self__, "description_variable", description_variable)
        if e1_description is not None:
            pulumi.set(__self__, "e1_description", e1_description)
        if e1_framing is not None:
            pulumi.set(__self__, "e1_framing", e1_framing)
        if e1_framing_variable is not None:
            pulumi.set(__self__, "e1_framing_variable", e1_framing_variable)
        if e1_linecode is not None:
            pulumi.set(__self__, "e1_linecode", e1_linecode)
        if e1_linecode_variable is not None:
            pulumi.set(__self__, "e1_linecode_variable", e1_linecode_variable)
        if length_long is not None:
            pulumi.set(__self__, "length_long", length_long)
        if length_long_variable is not None:
            pulumi.set(__self__, "length_long_variable", length_long_variable)
        if length_short is not None:
            pulumi.set(__self__, "length_short", length_short)
        if length_short_variable is not None:
            pulumi.set(__self__, "length_short_variable", length_short_variable)
        if line_mode is not None:
            pulumi.set(__self__, "line_mode", line_mode)
        if line_mode_variable is not None:
            pulumi.set(__self__, "line_mode_variable", line_mode_variable)
        if t1_description is not None:
            pulumi.set(__self__, "t1_description", t1_description)
        if t1_framing is not None:
            pulumi.set(__self__, "t1_framing", t1_framing)
        if t1_framing_variable is not None:
            pulumi.set(__self__, "t1_framing_variable", t1_framing_variable)
        if t1_linecode is not None:
            pulumi.set(__self__, "t1_linecode", t1_linecode)
        if t1_linecode_variable is not None:
            pulumi.set(__self__, "t1_linecode_variable", t1_linecode_variable)

    @_builtins.property
    @pulumi.getter(name="cableLength")
    def cable_length(self) -> Optional[_builtins.str]:
        """
        Cable Config
          - Choices: `short`, `long`
        """
        return pulumi.get(self, "cable_length")

    @_builtins.property
    @pulumi.getter(name="channelGroups")
    def channel_groups(self) -> Optional[Sequence['outputs.TransportT1E1ControllerFeatureEntryChannelGroup']]:
        """
        Channel Group List
        """
        return pulumi.get(self, "channel_groups")

    @_builtins.property
    @pulumi.getter(name="clockSource")
    def clock_source(self) -> Optional[_builtins.str]:
        """
        Clock Source
          - Choices: `line`, `internal`, `loop-timed`, `network`
        """
        return pulumi.get(self, "clock_source")

    @_builtins.property
    @pulumi.getter
    def description(self) -> Optional[_builtins.str]:
        """
        Description
        """
        return pulumi.get(self, "description")

    @_builtins.property
    @pulumi.getter(name="descriptionVariable")
    def description_variable(self) -> Optional[_builtins.str]:
        """
        Variable name
        """
        return pulumi.get(self, "description_variable")

    @_builtins.property
    @pulumi.getter(name="e1Description")
    def e1_description(self) -> Optional[_builtins.str]:
        """
        Card Type
          - Choices: `E1`
        """
        return pulumi.get(self, "e1_description")

    @_builtins.property
    @pulumi.getter(name="e1Framing")
    def e1_framing(self) -> Optional[_builtins.str]:
        """
        Framing
          - Choices: `crc4`, `no-crc4`
        """
        return pulumi.get(self, "e1_framing")

    @_builtins.property
    @pulumi.getter(name="e1FramingVariable")
    def e1_framing_variable(self) -> Optional[_builtins.str]:
        """
        Variable name
        """
        return pulumi.get(self, "e1_framing_variable")

    @_builtins.property
    @pulumi.getter(name="e1Linecode")
    def e1_linecode(self) -> Optional[_builtins.str]:
        """
        LineCode
          - Choices: `ami`, `hdb3`
        """
        return pulumi.get(self, "e1_linecode")

    @_builtins.property
    @pulumi.getter(name="e1LinecodeVariable")
    def e1_linecode_variable(self) -> Optional[_builtins.str]:
        """
        Variable name
        """
        return pulumi.get(self, "e1_linecode_variable")

    @_builtins.property
    @pulumi.getter(name="lengthLong")
    def length_long(self) -> Optional[_builtins.str]:
        """
        length, Attribute conditional on `cable_length` being equal to `long`
          - Choices: `-15db`, `-22.5db`, `-7.5db`, `0db`
        """
        return pulumi.get(self, "length_long")

    @_builtins.property
    @pulumi.getter(name="lengthLongVariable")
    def length_long_variable(self) -> Optional[_builtins.str]:
        """
        Variable name, Attribute conditional on `cable_length` being equal to `long`
        """
        return pulumi.get(self, "length_long_variable")

    @_builtins.property
    @pulumi.getter(name="lengthShort")
    def length_short(self) -> Optional[_builtins.str]:
        """
        length, Attribute conditional on `cable_length` being equal to `short`
          - Choices: `110ft`, `220ft`, `330ft`, `440ft`, `550ft`, `660ft`
        """
        return pulumi.get(self, "length_short")

    @_builtins.property
    @pulumi.getter(name="lengthShortVariable")
    def length_short_variable(self) -> Optional[_builtins.str]:
        """
        Variable name, Attribute conditional on `cable_length` being equal to `short`
        """
        return pulumi.get(self, "length_short_variable")

    @_builtins.property
    @pulumi.getter(name="lineMode")
    def line_mode(self) -> Optional[_builtins.str]:
        """
        Line Mode
          - Choices: `secondary`, `primary`
        """
        return pulumi.get(self, "line_mode")

    @_builtins.property
    @pulumi.getter(name="lineModeVariable")
    def line_mode_variable(self) -> Optional[_builtins.str]:
        """
        Variable name
        """
        return pulumi.get(self, "line_mode_variable")

    @_builtins.property
    @pulumi.getter(name="t1Description")
    def t1_description(self) -> Optional[_builtins.str]:
        """
        Card Type
          - Choices: `T1`
        """
        return pulumi.get(self, "t1_description")

    @_builtins.property
    @pulumi.getter(name="t1Framing")
    def t1_framing(self) -> Optional[_builtins.str]:
        """
        Framing
          - Choices: `esf`, `sf`
        """
        return pulumi.get(self, "t1_framing")

    @_builtins.property
    @pulumi.getter(name="t1FramingVariable")
    def t1_framing_variable(self) -> Optional[_builtins.str]:
        """
        Variable name
        """
        return pulumi.get(self, "t1_framing_variable")

    @_builtins.property
    @pulumi.getter(name="t1Linecode")
    def t1_linecode(self) -> Optional[_builtins.str]:
        """
        LineCode
          - Choices: `ami`, `b8zs`
        """
        return pulumi.get(self, "t1_linecode")

    @_builtins.property
    @pulumi.getter(name="t1LinecodeVariable")
    def t1_linecode_variable(self) -> Optional[_builtins.str]:
        """
        Variable name
        """
        return pulumi.get(self, "t1_linecode_variable")


@pulumi.output_type
class TransportT1E1ControllerFeatureEntryChannelGroup(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "channelGroup":
            suggest = "channel_group"
        elif key == "channelGroupVariable":
            suggest = "channel_group_variable"
        elif key == "timeSlot":
            suggest = "time_slot"
        elif key == "timeSlotVariable":
            suggest = "time_slot_variable"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in TransportT1E1ControllerFeatureEntryChannelGroup. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        TransportT1E1ControllerFeatureEntryChannelGroup.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        TransportT1E1ControllerFeatureEntryChannelGroup.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 channel_group: Optional[_builtins.int] = None,
                 channel_group_variable: Optional[_builtins.str] = None,
                 time_slot: Optional[_builtins.str] = None,
                 time_slot_variable: Optional[_builtins.str] = None):
        """
        :param _builtins.int channel_group: Number
                 - Range: `0`-`23`
        :param _builtins.str channel_group_variable: Variable name
        :param _builtins.str time_slot: Time slots
        :param _builtins.str time_slot_variable: Variable name
        """
        if channel_group is not None:
            pulumi.set(__self__, "channel_group", channel_group)
        if channel_group_variable is not None:
            pulumi.set(__self__, "channel_group_variable", channel_group_variable)
        if time_slot is not None:
            pulumi.set(__self__, "time_slot", time_slot)
        if time_slot_variable is not None:
            pulumi.set(__self__, "time_slot_variable", time_slot_variable)

    @_builtins.property
    @pulumi.getter(name="channelGroup")
    def channel_group(self) -> Optional[_builtins.int]:
        """
        Number
          - Range: `0`-`23`
        """
        return pulumi.get(self, "channel_group")

    @_builtins.property
    @pulumi.getter(name="channelGroupVariable")
    def channel_group_variable(self) -> Optional[_builtins.str]:
        """
        Variable name
        """
        return pulumi.get(self, "channel_group_variable")

    @_builtins.property
    @pulumi.getter(name="timeSlot")
    def time_slot(self) -> Optional[_builtins.str]:
        """
        Time slots
        """
        return pulumi.get(self, "time_slot")

    @_builtins.property
    @pulumi.getter(name="timeSlotVariable")
    def time_slot_variable(self) -> Optional[_builtins.str]:
        """
        Variable name
        """
        return pulumi.get(self, "time_slot_variable")


@pulumi.output_type
class TransportTrackerGroupFeatureTrackerElement(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "trackerId":
            suggest = "tracker_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in TransportTrackerGroupFeatureTrackerElement. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        TransportTrackerGroupFeatureTrackerElement.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        TransportTrackerGroupFeatureTrackerElement.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 tracker_id: Optional[_builtins.str] = None):
        if tracker_id is not None:
            pulumi.set(__self__, "tracker_id", tracker_id)

    @_builtins.property
    @pulumi.getter(name="trackerId")
    def tracker_id(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "tracker_id")


@pulumi.output_type
class TransportWanVpnFeatureIpv4StaticRoute(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "administrativeDistance":
            suggest = "administrative_distance"
        elif key == "administrativeDistanceVariable":
            suggest = "administrative_distance_variable"
        elif key == "networkAddress":
            suggest = "network_address"
        elif key == "networkAddressVariable":
            suggest = "network_address_variable"
        elif key == "nextHops":
            suggest = "next_hops"
        elif key == "subnetMask":
            suggest = "subnet_mask"
        elif key == "subnetMaskVariable":
            suggest = "subnet_mask_variable"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in TransportWanVpnFeatureIpv4StaticRoute. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        TransportWanVpnFeatureIpv4StaticRoute.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        TransportWanVpnFeatureIpv4StaticRoute.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 administrative_distance: Optional[_builtins.int] = None,
                 administrative_distance_variable: Optional[_builtins.str] = None,
                 gateway: Optional[_builtins.str] = None,
                 network_address: Optional[_builtins.str] = None,
                 network_address_variable: Optional[_builtins.str] = None,
                 next_hops: Optional[Sequence['outputs.TransportWanVpnFeatureIpv4StaticRouteNextHop']] = None,
                 subnet_mask: Optional[_builtins.str] = None,
                 subnet_mask_variable: Optional[_builtins.str] = None):
        """
        :param _builtins.int administrative_distance: Administrative distance, Attribute conditional on `gateway` being equal to `null0`
                 - Range: `1`-`255`
                 - Default value: `1`
        :param _builtins.str administrative_distance_variable: Variable name, Attribute conditional on `gateway` being equal to `null0`
        :param _builtins.str gateway: Gateway
                 - Choices: `nextHop`, `dhcp`, `null0`
                 - Default value: `nextHop`
        :param _builtins.str network_address: IP Address
        :param _builtins.str network_address_variable: Variable name
        :param Sequence['TransportWanVpnFeatureIpv4StaticRouteNextHopArgs'] next_hops: IPv4 Route Gateway Next Hop, Attribute conditional on `gateway` being equal to `nextHop`
        :param _builtins.str subnet_mask: Subnet Mask
                 - Choices: `255.255.255.255`, `255.255.255.254`, `255.255.255.252`, `255.255.255.248`, `255.255.255.240`, `255.255.255.224`, `255.255.255.192`, `255.255.255.128`, `255.255.255.0`, `255.255.254.0`, `255.255.252.0`, `255.255.248.0`, `255.255.240.0`, `255.255.224.0`, `255.255.192.0`, `255.255.128.0`, `255.255.0.0`, `255.254.0.0`, `255.252.0.0`, `255.240.0.0`, `255.224.0.0`, `255.192.0.0`, `255.128.0.0`, `255.0.0.0`, `254.0.0.0`, `252.0.0.0`, `248.0.0.0`, `240.0.0.0`, `224.0.0.0`, `192.0.0.0`, `128.0.0.0`, `0.0.0.0`
        :param _builtins.str subnet_mask_variable: Variable name
        """
        if administrative_distance is not None:
            pulumi.set(__self__, "administrative_distance", administrative_distance)
        if administrative_distance_variable is not None:
            pulumi.set(__self__, "administrative_distance_variable", administrative_distance_variable)
        if gateway is not None:
            pulumi.set(__self__, "gateway", gateway)
        if network_address is not None:
            pulumi.set(__self__, "network_address", network_address)
        if network_address_variable is not None:
            pulumi.set(__self__, "network_address_variable", network_address_variable)
        if next_hops is not None:
            pulumi.set(__self__, "next_hops", next_hops)
        if subnet_mask is not None:
            pulumi.set(__self__, "subnet_mask", subnet_mask)
        if subnet_mask_variable is not None:
            pulumi.set(__self__, "subnet_mask_variable", subnet_mask_variable)

    @_builtins.property
    @pulumi.getter(name="administrativeDistance")
    def administrative_distance(self) -> Optional[_builtins.int]:
        """
        Administrative distance, Attribute conditional on `gateway` being equal to `null0`
          - Range: `1`-`255`
          - Default value: `1`
        """
        return pulumi.get(self, "administrative_distance")

    @_builtins.property
    @pulumi.getter(name="administrativeDistanceVariable")
    def administrative_distance_variable(self) -> Optional[_builtins.str]:
        """
        Variable name, Attribute conditional on `gateway` being equal to `null0`
        """
        return pulumi.get(self, "administrative_distance_variable")

    @_builtins.property
    @pulumi.getter
    def gateway(self) -> Optional[_builtins.str]:
        """
        Gateway
          - Choices: `nextHop`, `dhcp`, `null0`
          - Default value: `nextHop`
        """
        return pulumi.get(self, "gateway")

    @_builtins.property
    @pulumi.getter(name="networkAddress")
    def network_address(self) -> Optional[_builtins.str]:
        """
        IP Address
        """
        return pulumi.get(self, "network_address")

    @_builtins.property
    @pulumi.getter(name="networkAddressVariable")
    def network_address_variable(self) -> Optional[_builtins.str]:
        """
        Variable name
        """
        return pulumi.get(self, "network_address_variable")

    @_builtins.property
    @pulumi.getter(name="nextHops")
    def next_hops(self) -> Optional[Sequence['outputs.TransportWanVpnFeatureIpv4StaticRouteNextHop']]:
        """
        IPv4 Route Gateway Next Hop, Attribute conditional on `gateway` being equal to `nextHop`
        """
        return pulumi.get(self, "next_hops")

    @_builtins.property
    @pulumi.getter(name="subnetMask")
    def subnet_mask(self) -> Optional[_builtins.str]:
        """
        Subnet Mask
          - Choices: `255.255.255.255`, `255.255.255.254`, `255.255.255.252`, `255.255.255.248`, `255.255.255.240`, `255.255.255.224`, `255.255.255.192`, `255.255.255.128`, `255.255.255.0`, `255.255.254.0`, `255.255.252.0`, `255.255.248.0`, `255.255.240.0`, `255.255.224.0`, `255.255.192.0`, `255.255.128.0`, `255.255.0.0`, `255.254.0.0`, `255.252.0.0`, `255.240.0.0`, `255.224.0.0`, `255.192.0.0`, `255.128.0.0`, `255.0.0.0`, `254.0.0.0`, `252.0.0.0`, `248.0.0.0`, `240.0.0.0`, `224.0.0.0`, `192.0.0.0`, `128.0.0.0`, `0.0.0.0`
        """
        return pulumi.get(self, "subnet_mask")

    @_builtins.property
    @pulumi.getter(name="subnetMaskVariable")
    def subnet_mask_variable(self) -> Optional[_builtins.str]:
        """
        Variable name
        """
        return pulumi.get(self, "subnet_mask_variable")


@pulumi.output_type
class TransportWanVpnFeatureIpv4StaticRouteNextHop(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "addressVariable":
            suggest = "address_variable"
        elif key == "administrativeDistance":
            suggest = "administrative_distance"
        elif key == "administrativeDistanceVariable":
            suggest = "administrative_distance_variable"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in TransportWanVpnFeatureIpv4StaticRouteNextHop. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        TransportWanVpnFeatureIpv4StaticRouteNextHop.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        TransportWanVpnFeatureIpv4StaticRouteNextHop.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 address: Optional[_builtins.str] = None,
                 address_variable: Optional[_builtins.str] = None,
                 administrative_distance: Optional[_builtins.int] = None,
                 administrative_distance_variable: Optional[_builtins.str] = None):
        """
        :param _builtins.str address: Address
        :param _builtins.str address_variable: Variable name
        :param _builtins.int administrative_distance: Administrative distance
                 - Range: `1`-`255`
                 - Default value: `1`
        :param _builtins.str administrative_distance_variable: Variable name
        """
        if address is not None:
            pulumi.set(__self__, "address", address)
        if address_variable is not None:
            pulumi.set(__self__, "address_variable", address_variable)
        if administrative_distance is not None:
            pulumi.set(__self__, "administrative_distance", administrative_distance)
        if administrative_distance_variable is not None:
            pulumi.set(__self__, "administrative_distance_variable", administrative_distance_variable)

    @_builtins.property
    @pulumi.getter
    def address(self) -> Optional[_builtins.str]:
        """
        Address
        """
        return pulumi.get(self, "address")

    @_builtins.property
    @pulumi.getter(name="addressVariable")
    def address_variable(self) -> Optional[_builtins.str]:
        """
        Variable name
        """
        return pulumi.get(self, "address_variable")

    @_builtins.property
    @pulumi.getter(name="administrativeDistance")
    def administrative_distance(self) -> Optional[_builtins.int]:
        """
        Administrative distance
          - Range: `1`-`255`
          - Default value: `1`
        """
        return pulumi.get(self, "administrative_distance")

    @_builtins.property
    @pulumi.getter(name="administrativeDistanceVariable")
    def administrative_distance_variable(self) -> Optional[_builtins.str]:
        """
        Variable name
        """
        return pulumi.get(self, "administrative_distance_variable")


@pulumi.output_type
class TransportWanVpnFeatureIpv6StaticRoute(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "natVariable":
            suggest = "nat_variable"
        elif key == "nextHops":
            suggest = "next_hops"
        elif key == "prefixVariable":
            suggest = "prefix_variable"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in TransportWanVpnFeatureIpv6StaticRoute. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        TransportWanVpnFeatureIpv6StaticRoute.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        TransportWanVpnFeatureIpv6StaticRoute.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 gateway: Optional[_builtins.str] = None,
                 nat: Optional[_builtins.str] = None,
                 nat_variable: Optional[_builtins.str] = None,
                 next_hops: Optional[Sequence['outputs.TransportWanVpnFeatureIpv6StaticRouteNextHop']] = None,
                 null0: Optional[_builtins.bool] = None,
                 prefix: Optional[_builtins.str] = None,
                 prefix_variable: Optional[_builtins.str] = None):
        """
        :param _builtins.str gateway: Gateway
                 - Choices: `nextHop`, `null0`, `nat`
        :param _builtins.str nat: IPv6 Nat, Attribute conditional on `gateway` being equal to `nat`
                 - Choices: `NAT64`, `NAT66`
        :param _builtins.str nat_variable: Variable name, Attribute conditional on `gateway` being equal to `nat`
        :param Sequence['TransportWanVpnFeatureIpv6StaticRouteNextHopArgs'] next_hops: IPv6 Route Gateway Next Hop, Attribute conditional on `gateway` being equal to `nextHop`
        :param _builtins.bool null0: IPv6 Route Gateway Next Hop, Attribute conditional on `gateway` being equal to `null0`
        :param _builtins.str prefix: Prefix
        :param _builtins.str prefix_variable: Variable name
        """
        if gateway is not None:
            pulumi.set(__self__, "gateway", gateway)
        if nat is not None:
            pulumi.set(__self__, "nat", nat)
        if nat_variable is not None:
            pulumi.set(__self__, "nat_variable", nat_variable)
        if next_hops is not None:
            pulumi.set(__self__, "next_hops", next_hops)
        if null0 is not None:
            pulumi.set(__self__, "null0", null0)
        if prefix is not None:
            pulumi.set(__self__, "prefix", prefix)
        if prefix_variable is not None:
            pulumi.set(__self__, "prefix_variable", prefix_variable)

    @_builtins.property
    @pulumi.getter
    def gateway(self) -> Optional[_builtins.str]:
        """
        Gateway
          - Choices: `nextHop`, `null0`, `nat`
        """
        return pulumi.get(self, "gateway")

    @_builtins.property
    @pulumi.getter
    def nat(self) -> Optional[_builtins.str]:
        """
        IPv6 Nat, Attribute conditional on `gateway` being equal to `nat`
          - Choices: `NAT64`, `NAT66`
        """
        return pulumi.get(self, "nat")

    @_builtins.property
    @pulumi.getter(name="natVariable")
    def nat_variable(self) -> Optional[_builtins.str]:
        """
        Variable name, Attribute conditional on `gateway` being equal to `nat`
        """
        return pulumi.get(self, "nat_variable")

    @_builtins.property
    @pulumi.getter(name="nextHops")
    def next_hops(self) -> Optional[Sequence['outputs.TransportWanVpnFeatureIpv6StaticRouteNextHop']]:
        """
        IPv6 Route Gateway Next Hop, Attribute conditional on `gateway` being equal to `nextHop`
        """
        return pulumi.get(self, "next_hops")

    @_builtins.property
    @pulumi.getter
    def null0(self) -> Optional[_builtins.bool]:
        """
        IPv6 Route Gateway Next Hop, Attribute conditional on `gateway` being equal to `null0`
        """
        return pulumi.get(self, "null0")

    @_builtins.property
    @pulumi.getter
    def prefix(self) -> Optional[_builtins.str]:
        """
        Prefix
        """
        return pulumi.get(self, "prefix")

    @_builtins.property
    @pulumi.getter(name="prefixVariable")
    def prefix_variable(self) -> Optional[_builtins.str]:
        """
        Variable name
        """
        return pulumi.get(self, "prefix_variable")


@pulumi.output_type
class TransportWanVpnFeatureIpv6StaticRouteNextHop(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "addressVariable":
            suggest = "address_variable"
        elif key == "administrativeDistance":
            suggest = "administrative_distance"
        elif key == "administrativeDistanceVariable":
            suggest = "administrative_distance_variable"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in TransportWanVpnFeatureIpv6StaticRouteNextHop. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        TransportWanVpnFeatureIpv6StaticRouteNextHop.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        TransportWanVpnFeatureIpv6StaticRouteNextHop.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 address: Optional[_builtins.str] = None,
                 address_variable: Optional[_builtins.str] = None,
                 administrative_distance: Optional[_builtins.int] = None,
                 administrative_distance_variable: Optional[_builtins.str] = None):
        """
        :param _builtins.str address: Address
        :param _builtins.str address_variable: Variable name
        :param _builtins.int administrative_distance: Administrative distance
                 - Range: `1`-`254`
        :param _builtins.str administrative_distance_variable: Variable name
        """
        if address is not None:
            pulumi.set(__self__, "address", address)
        if address_variable is not None:
            pulumi.set(__self__, "address_variable", address_variable)
        if administrative_distance is not None:
            pulumi.set(__self__, "administrative_distance", administrative_distance)
        if administrative_distance_variable is not None:
            pulumi.set(__self__, "administrative_distance_variable", administrative_distance_variable)

    @_builtins.property
    @pulumi.getter
    def address(self) -> Optional[_builtins.str]:
        """
        Address
        """
        return pulumi.get(self, "address")

    @_builtins.property
    @pulumi.getter(name="addressVariable")
    def address_variable(self) -> Optional[_builtins.str]:
        """
        Variable name
        """
        return pulumi.get(self, "address_variable")

    @_builtins.property
    @pulumi.getter(name="administrativeDistance")
    def administrative_distance(self) -> Optional[_builtins.int]:
        """
        Administrative distance
          - Range: `1`-`254`
        """
        return pulumi.get(self, "administrative_distance")

    @_builtins.property
    @pulumi.getter(name="administrativeDistanceVariable")
    def administrative_distance_variable(self) -> Optional[_builtins.str]:
        """
        Variable name
        """
        return pulumi.get(self, "administrative_distance_variable")


@pulumi.output_type
class TransportWanVpnFeatureNat64V4Pool(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "nat64V4PoolName":
            suggest = "nat64_v4_pool_name"
        elif key == "nat64V4PoolNameVariable":
            suggest = "nat64_v4_pool_name_variable"
        elif key == "nat64V4PoolOverload":
            suggest = "nat64_v4_pool_overload"
        elif key == "nat64V4PoolOverloadVariable":
            suggest = "nat64_v4_pool_overload_variable"
        elif key == "nat64V4PoolRangeEnd":
            suggest = "nat64_v4_pool_range_end"
        elif key == "nat64V4PoolRangeEndVariable":
            suggest = "nat64_v4_pool_range_end_variable"
        elif key == "nat64V4PoolRangeStart":
            suggest = "nat64_v4_pool_range_start"
        elif key == "nat64V4PoolRangeStartVariable":
            suggest = "nat64_v4_pool_range_start_variable"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in TransportWanVpnFeatureNat64V4Pool. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        TransportWanVpnFeatureNat64V4Pool.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        TransportWanVpnFeatureNat64V4Pool.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 nat64_v4_pool_name: Optional[_builtins.str] = None,
                 nat64_v4_pool_name_variable: Optional[_builtins.str] = None,
                 nat64_v4_pool_overload: Optional[_builtins.bool] = None,
                 nat64_v4_pool_overload_variable: Optional[_builtins.str] = None,
                 nat64_v4_pool_range_end: Optional[_builtins.str] = None,
                 nat64_v4_pool_range_end_variable: Optional[_builtins.str] = None,
                 nat64_v4_pool_range_start: Optional[_builtins.str] = None,
                 nat64_v4_pool_range_start_variable: Optional[_builtins.str] = None):
        """
        :param _builtins.str nat64_v4_pool_name: NAT64 v4 Pool Name
        :param _builtins.str nat64_v4_pool_name_variable: Variable name
        :param _builtins.bool nat64_v4_pool_overload: NAT64 Overload
                 - Default value: `false`
        :param _builtins.str nat64_v4_pool_overload_variable: Variable name
        :param _builtins.str nat64_v4_pool_range_end: NAT64 Pool Range End
        :param _builtins.str nat64_v4_pool_range_end_variable: Variable name
        :param _builtins.str nat64_v4_pool_range_start: NAT64 Pool Range Start
        :param _builtins.str nat64_v4_pool_range_start_variable: Variable name
        """
        if nat64_v4_pool_name is not None:
            pulumi.set(__self__, "nat64_v4_pool_name", nat64_v4_pool_name)
        if nat64_v4_pool_name_variable is not None:
            pulumi.set(__self__, "nat64_v4_pool_name_variable", nat64_v4_pool_name_variable)
        if nat64_v4_pool_overload is not None:
            pulumi.set(__self__, "nat64_v4_pool_overload", nat64_v4_pool_overload)
        if nat64_v4_pool_overload_variable is not None:
            pulumi.set(__self__, "nat64_v4_pool_overload_variable", nat64_v4_pool_overload_variable)
        if nat64_v4_pool_range_end is not None:
            pulumi.set(__self__, "nat64_v4_pool_range_end", nat64_v4_pool_range_end)
        if nat64_v4_pool_range_end_variable is not None:
            pulumi.set(__self__, "nat64_v4_pool_range_end_variable", nat64_v4_pool_range_end_variable)
        if nat64_v4_pool_range_start is not None:
            pulumi.set(__self__, "nat64_v4_pool_range_start", nat64_v4_pool_range_start)
        if nat64_v4_pool_range_start_variable is not None:
            pulumi.set(__self__, "nat64_v4_pool_range_start_variable", nat64_v4_pool_range_start_variable)

    @_builtins.property
    @pulumi.getter(name="nat64V4PoolName")
    def nat64_v4_pool_name(self) -> Optional[_builtins.str]:
        """
        NAT64 v4 Pool Name
        """
        return pulumi.get(self, "nat64_v4_pool_name")

    @_builtins.property
    @pulumi.getter(name="nat64V4PoolNameVariable")
    def nat64_v4_pool_name_variable(self) -> Optional[_builtins.str]:
        """
        Variable name
        """
        return pulumi.get(self, "nat64_v4_pool_name_variable")

    @_builtins.property
    @pulumi.getter(name="nat64V4PoolOverload")
    def nat64_v4_pool_overload(self) -> Optional[_builtins.bool]:
        """
        NAT64 Overload
          - Default value: `false`
        """
        return pulumi.get(self, "nat64_v4_pool_overload")

    @_builtins.property
    @pulumi.getter(name="nat64V4PoolOverloadVariable")
    def nat64_v4_pool_overload_variable(self) -> Optional[_builtins.str]:
        """
        Variable name
        """
        return pulumi.get(self, "nat64_v4_pool_overload_variable")

    @_builtins.property
    @pulumi.getter(name="nat64V4PoolRangeEnd")
    def nat64_v4_pool_range_end(self) -> Optional[_builtins.str]:
        """
        NAT64 Pool Range End
        """
        return pulumi.get(self, "nat64_v4_pool_range_end")

    @_builtins.property
    @pulumi.getter(name="nat64V4PoolRangeEndVariable")
    def nat64_v4_pool_range_end_variable(self) -> Optional[_builtins.str]:
        """
        Variable name
        """
        return pulumi.get(self, "nat64_v4_pool_range_end_variable")

    @_builtins.property
    @pulumi.getter(name="nat64V4PoolRangeStart")
    def nat64_v4_pool_range_start(self) -> Optional[_builtins.str]:
        """
        NAT64 Pool Range Start
        """
        return pulumi.get(self, "nat64_v4_pool_range_start")

    @_builtins.property
    @pulumi.getter(name="nat64V4PoolRangeStartVariable")
    def nat64_v4_pool_range_start_variable(self) -> Optional[_builtins.str]:
        """
        Variable name
        """
        return pulumi.get(self, "nat64_v4_pool_range_start_variable")


@pulumi.output_type
class TransportWanVpnFeatureNewHostMapping(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "hostName":
            suggest = "host_name"
        elif key == "hostNameVariable":
            suggest = "host_name_variable"
        elif key == "listOfIpAddresses":
            suggest = "list_of_ip_addresses"
        elif key == "listOfIpAddressesVariable":
            suggest = "list_of_ip_addresses_variable"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in TransportWanVpnFeatureNewHostMapping. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        TransportWanVpnFeatureNewHostMapping.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        TransportWanVpnFeatureNewHostMapping.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 host_name: Optional[_builtins.str] = None,
                 host_name_variable: Optional[_builtins.str] = None,
                 list_of_ip_addresses: Optional[Sequence[_builtins.str]] = None,
                 list_of_ip_addresses_variable: Optional[_builtins.str] = None):
        """
        :param _builtins.str host_name: Hostname
        :param _builtins.str host_name_variable: Variable name
        :param Sequence[_builtins.str] list_of_ip_addresses: List of IP
        :param _builtins.str list_of_ip_addresses_variable: Variable name
        """
        if host_name is not None:
            pulumi.set(__self__, "host_name", host_name)
        if host_name_variable is not None:
            pulumi.set(__self__, "host_name_variable", host_name_variable)
        if list_of_ip_addresses is not None:
            pulumi.set(__self__, "list_of_ip_addresses", list_of_ip_addresses)
        if list_of_ip_addresses_variable is not None:
            pulumi.set(__self__, "list_of_ip_addresses_variable", list_of_ip_addresses_variable)

    @_builtins.property
    @pulumi.getter(name="hostName")
    def host_name(self) -> Optional[_builtins.str]:
        """
        Hostname
        """
        return pulumi.get(self, "host_name")

    @_builtins.property
    @pulumi.getter(name="hostNameVariable")
    def host_name_variable(self) -> Optional[_builtins.str]:
        """
        Variable name
        """
        return pulumi.get(self, "host_name_variable")

    @_builtins.property
    @pulumi.getter(name="listOfIpAddresses")
    def list_of_ip_addresses(self) -> Optional[Sequence[_builtins.str]]:
        """
        List of IP
        """
        return pulumi.get(self, "list_of_ip_addresses")

    @_builtins.property
    @pulumi.getter(name="listOfIpAddressesVariable")
    def list_of_ip_addresses_variable(self) -> Optional[_builtins.str]:
        """
        Variable name
        """
        return pulumi.get(self, "list_of_ip_addresses_variable")


@pulumi.output_type
class TransportWanVpnFeatureService(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "serviceType":
            suggest = "service_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in TransportWanVpnFeatureService. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        TransportWanVpnFeatureService.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        TransportWanVpnFeatureService.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 service_type: Optional[_builtins.str] = None):
        """
        :param _builtins.str service_type: Service Type
                 - Choices: `TE`
        """
        if service_type is not None:
            pulumi.set(__self__, "service_type", service_type)

    @_builtins.property
    @pulumi.getter(name="serviceType")
    def service_type(self) -> Optional[_builtins.str]:
        """
        Service Type
          - Choices: `TE`
        """
        return pulumi.get(self, "service_type")


@pulumi.output_type
class TransportWanVpnInterfaceCellularFeatureArp(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "ipAddress":
            suggest = "ip_address"
        elif key == "ipAddressVariable":
            suggest = "ip_address_variable"
        elif key == "macAddress":
            suggest = "mac_address"
        elif key == "macAddressVariable":
            suggest = "mac_address_variable"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in TransportWanVpnInterfaceCellularFeatureArp. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        TransportWanVpnInterfaceCellularFeatureArp.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        TransportWanVpnInterfaceCellularFeatureArp.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 ip_address: Optional[_builtins.str] = None,
                 ip_address_variable: Optional[_builtins.str] = None,
                 mac_address: Optional[_builtins.str] = None,
                 mac_address_variable: Optional[_builtins.str] = None):
        """
        :param _builtins.str ip_address: IP V4 Address
        :param _builtins.str ip_address_variable: Variable name
        :param _builtins.str mac_address: MAC Address
        :param _builtins.str mac_address_variable: Variable name
        """
        if ip_address is not None:
            pulumi.set(__self__, "ip_address", ip_address)
        if ip_address_variable is not None:
            pulumi.set(__self__, "ip_address_variable", ip_address_variable)
        if mac_address is not None:
            pulumi.set(__self__, "mac_address", mac_address)
        if mac_address_variable is not None:
            pulumi.set(__self__, "mac_address_variable", mac_address_variable)

    @_builtins.property
    @pulumi.getter(name="ipAddress")
    def ip_address(self) -> Optional[_builtins.str]:
        """
        IP V4 Address
        """
        return pulumi.get(self, "ip_address")

    @_builtins.property
    @pulumi.getter(name="ipAddressVariable")
    def ip_address_variable(self) -> Optional[_builtins.str]:
        """
        Variable name
        """
        return pulumi.get(self, "ip_address_variable")

    @_builtins.property
    @pulumi.getter(name="macAddress")
    def mac_address(self) -> Optional[_builtins.str]:
        """
        MAC Address
        """
        return pulumi.get(self, "mac_address")

    @_builtins.property
    @pulumi.getter(name="macAddressVariable")
    def mac_address_variable(self) -> Optional[_builtins.str]:
        """
        Variable name
        """
        return pulumi.get(self, "mac_address_variable")


@pulumi.output_type
class TransportWanVpnInterfaceCellularFeatureTunnelInterfaceEncapsulation(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "preferenceVariable":
            suggest = "preference_variable"
        elif key == "weightVariable":
            suggest = "weight_variable"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in TransportWanVpnInterfaceCellularFeatureTunnelInterfaceEncapsulation. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        TransportWanVpnInterfaceCellularFeatureTunnelInterfaceEncapsulation.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        TransportWanVpnInterfaceCellularFeatureTunnelInterfaceEncapsulation.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 encapsulation: Optional[_builtins.str] = None,
                 preference: Optional[_builtins.int] = None,
                 preference_variable: Optional[_builtins.str] = None,
                 weight: Optional[_builtins.int] = None,
                 weight_variable: Optional[_builtins.str] = None):
        """
        :param _builtins.str encapsulation: Encapsulation
                 - Choices: `gre`, `ipsec`
        :param _builtins.int preference: Set preference for TLOC
                 - Range: `0`-`4294967295`
        :param _builtins.str preference_variable: Variable name
        :param _builtins.int weight: Set weight for TLOC
                 - Range: `1`-`255`
                 - Default value: `1`
        :param _builtins.str weight_variable: Variable name
        """
        if encapsulation is not None:
            pulumi.set(__self__, "encapsulation", encapsulation)
        if preference is not None:
            pulumi.set(__self__, "preference", preference)
        if preference_variable is not None:
            pulumi.set(__self__, "preference_variable", preference_variable)
        if weight is not None:
            pulumi.set(__self__, "weight", weight)
        if weight_variable is not None:
            pulumi.set(__self__, "weight_variable", weight_variable)

    @_builtins.property
    @pulumi.getter
    def encapsulation(self) -> Optional[_builtins.str]:
        """
        Encapsulation
          - Choices: `gre`, `ipsec`
        """
        return pulumi.get(self, "encapsulation")

    @_builtins.property
    @pulumi.getter
    def preference(self) -> Optional[_builtins.int]:
        """
        Set preference for TLOC
          - Range: `0`-`4294967295`
        """
        return pulumi.get(self, "preference")

    @_builtins.property
    @pulumi.getter(name="preferenceVariable")
    def preference_variable(self) -> Optional[_builtins.str]:
        """
        Variable name
        """
        return pulumi.get(self, "preference_variable")

    @_builtins.property
    @pulumi.getter
    def weight(self) -> Optional[_builtins.int]:
        """
        Set weight for TLOC
          - Range: `1`-`255`
          - Default value: `1`
        """
        return pulumi.get(self, "weight")

    @_builtins.property
    @pulumi.getter(name="weightVariable")
    def weight_variable(self) -> Optional[_builtins.str]:
        """
        Variable name
        """
        return pulumi.get(self, "weight_variable")


@pulumi.output_type
class TransportWanVpnInterfaceEthernetFeatureArp(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "ipAddress":
            suggest = "ip_address"
        elif key == "ipAddressVariable":
            suggest = "ip_address_variable"
        elif key == "macAddress":
            suggest = "mac_address"
        elif key == "macAddressVariable":
            suggest = "mac_address_variable"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in TransportWanVpnInterfaceEthernetFeatureArp. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        TransportWanVpnInterfaceEthernetFeatureArp.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        TransportWanVpnInterfaceEthernetFeatureArp.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 ip_address: Optional[_builtins.str] = None,
                 ip_address_variable: Optional[_builtins.str] = None,
                 mac_address: Optional[_builtins.str] = None,
                 mac_address_variable: Optional[_builtins.str] = None):
        """
        :param _builtins.str ip_address: IP V4 Address
        :param _builtins.str ip_address_variable: Variable name
        :param _builtins.str mac_address: MAC Address
        :param _builtins.str mac_address_variable: Variable name
        """
        if ip_address is not None:
            pulumi.set(__self__, "ip_address", ip_address)
        if ip_address_variable is not None:
            pulumi.set(__self__, "ip_address_variable", ip_address_variable)
        if mac_address is not None:
            pulumi.set(__self__, "mac_address", mac_address)
        if mac_address_variable is not None:
            pulumi.set(__self__, "mac_address_variable", mac_address_variable)

    @_builtins.property
    @pulumi.getter(name="ipAddress")
    def ip_address(self) -> Optional[_builtins.str]:
        """
        IP V4 Address
        """
        return pulumi.get(self, "ip_address")

    @_builtins.property
    @pulumi.getter(name="ipAddressVariable")
    def ip_address_variable(self) -> Optional[_builtins.str]:
        """
        Variable name
        """
        return pulumi.get(self, "ip_address_variable")

    @_builtins.property
    @pulumi.getter(name="macAddress")
    def mac_address(self) -> Optional[_builtins.str]:
        """
        MAC Address
        """
        return pulumi.get(self, "mac_address")

    @_builtins.property
    @pulumi.getter(name="macAddressVariable")
    def mac_address_variable(self) -> Optional[_builtins.str]:
        """
        Variable name
        """
        return pulumi.get(self, "mac_address_variable")


@pulumi.output_type
class TransportWanVpnInterfaceEthernetFeatureIpv4SecondaryAddress(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "addressVariable":
            suggest = "address_variable"
        elif key == "subnetMask":
            suggest = "subnet_mask"
        elif key == "subnetMaskVariable":
            suggest = "subnet_mask_variable"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in TransportWanVpnInterfaceEthernetFeatureIpv4SecondaryAddress. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        TransportWanVpnInterfaceEthernetFeatureIpv4SecondaryAddress.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        TransportWanVpnInterfaceEthernetFeatureIpv4SecondaryAddress.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 address: Optional[_builtins.str] = None,
                 address_variable: Optional[_builtins.str] = None,
                 subnet_mask: Optional[_builtins.str] = None,
                 subnet_mask_variable: Optional[_builtins.str] = None):
        """
        :param _builtins.str address: IpV4 Address
        :param _builtins.str address_variable: Variable name
        :param _builtins.str subnet_mask: Subnet Mask
                 - Choices: `255.255.255.255`, `255.255.255.254`, `255.255.255.252`, `255.255.255.248`, `255.255.255.240`, `255.255.255.224`, `255.255.255.192`, `255.255.255.128`, `255.255.255.0`, `255.255.254.0`, `255.255.252.0`, `255.255.248.0`, `255.255.240.0`, `255.255.224.0`, `255.255.192.0`, `255.255.128.0`, `255.255.0.0`, `255.254.0.0`, `255.252.0.0`, `255.240.0.0`, `255.224.0.0`, `255.192.0.0`, `255.128.0.0`, `255.0.0.0`, `254.0.0.0`, `252.0.0.0`, `248.0.0.0`, `240.0.0.0`, `224.0.0.0`, `192.0.0.0`, `128.0.0.0`, `0.0.0.0`
        :param _builtins.str subnet_mask_variable: Variable name
        """
        if address is not None:
            pulumi.set(__self__, "address", address)
        if address_variable is not None:
            pulumi.set(__self__, "address_variable", address_variable)
        if subnet_mask is not None:
            pulumi.set(__self__, "subnet_mask", subnet_mask)
        if subnet_mask_variable is not None:
            pulumi.set(__self__, "subnet_mask_variable", subnet_mask_variable)

    @_builtins.property
    @pulumi.getter
    def address(self) -> Optional[_builtins.str]:
        """
        IpV4 Address
        """
        return pulumi.get(self, "address")

    @_builtins.property
    @pulumi.getter(name="addressVariable")
    def address_variable(self) -> Optional[_builtins.str]:
        """
        Variable name
        """
        return pulumi.get(self, "address_variable")

    @_builtins.property
    @pulumi.getter(name="subnetMask")
    def subnet_mask(self) -> Optional[_builtins.str]:
        """
        Subnet Mask
          - Choices: `255.255.255.255`, `255.255.255.254`, `255.255.255.252`, `255.255.255.248`, `255.255.255.240`, `255.255.255.224`, `255.255.255.192`, `255.255.255.128`, `255.255.255.0`, `255.255.254.0`, `255.255.252.0`, `255.255.248.0`, `255.255.240.0`, `255.255.224.0`, `255.255.192.0`, `255.255.128.0`, `255.255.0.0`, `255.254.0.0`, `255.252.0.0`, `255.240.0.0`, `255.224.0.0`, `255.192.0.0`, `255.128.0.0`, `255.0.0.0`, `254.0.0.0`, `252.0.0.0`, `248.0.0.0`, `240.0.0.0`, `224.0.0.0`, `192.0.0.0`, `128.0.0.0`, `0.0.0.0`
        """
        return pulumi.get(self, "subnet_mask")

    @_builtins.property
    @pulumi.getter(name="subnetMaskVariable")
    def subnet_mask_variable(self) -> Optional[_builtins.str]:
        """
        Variable name
        """
        return pulumi.get(self, "subnet_mask_variable")


@pulumi.output_type
class TransportWanVpnInterfaceEthernetFeatureIpv6DhcpSecondaryAddress(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "addressVariable":
            suggest = "address_variable"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in TransportWanVpnInterfaceEthernetFeatureIpv6DhcpSecondaryAddress. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        TransportWanVpnInterfaceEthernetFeatureIpv6DhcpSecondaryAddress.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        TransportWanVpnInterfaceEthernetFeatureIpv6DhcpSecondaryAddress.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 address: Optional[_builtins.str] = None,
                 address_variable: Optional[_builtins.str] = None):
        """
        :param _builtins.str address: IPv6 Address Secondary
        :param _builtins.str address_variable: Variable name
        """
        if address is not None:
            pulumi.set(__self__, "address", address)
        if address_variable is not None:
            pulumi.set(__self__, "address_variable", address_variable)

    @_builtins.property
    @pulumi.getter
    def address(self) -> Optional[_builtins.str]:
        """
        IPv6 Address Secondary
        """
        return pulumi.get(self, "address")

    @_builtins.property
    @pulumi.getter(name="addressVariable")
    def address_variable(self) -> Optional[_builtins.str]:
        """
        Variable name
        """
        return pulumi.get(self, "address_variable")


@pulumi.output_type
class TransportWanVpnInterfaceEthernetFeatureIpv6SecondaryAddress(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "addressVariable":
            suggest = "address_variable"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in TransportWanVpnInterfaceEthernetFeatureIpv6SecondaryAddress. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        TransportWanVpnInterfaceEthernetFeatureIpv6SecondaryAddress.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        TransportWanVpnInterfaceEthernetFeatureIpv6SecondaryAddress.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 address: Optional[_builtins.str] = None,
                 address_variable: Optional[_builtins.str] = None):
        """
        :param _builtins.str address: IPv6 Address Secondary
        :param _builtins.str address_variable: Variable name
        """
        if address is not None:
            pulumi.set(__self__, "address", address)
        if address_variable is not None:
            pulumi.set(__self__, "address_variable", address_variable)

    @_builtins.property
    @pulumi.getter
    def address(self) -> Optional[_builtins.str]:
        """
        IPv6 Address Secondary
        """
        return pulumi.get(self, "address")

    @_builtins.property
    @pulumi.getter(name="addressVariable")
    def address_variable(self) -> Optional[_builtins.str]:
        """
        Variable name
        """
        return pulumi.get(self, "address_variable")


@pulumi.output_type
class TransportWanVpnInterfaceEthernetFeatureNewStaticNat(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "sourceIp":
            suggest = "source_ip"
        elif key == "sourceIpVariable":
            suggest = "source_ip_variable"
        elif key == "sourceVpn":
            suggest = "source_vpn"
        elif key == "sourceVpnVariable":
            suggest = "source_vpn_variable"
        elif key == "translatedIp":
            suggest = "translated_ip"
        elif key == "translatedIpVariable":
            suggest = "translated_ip_variable"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in TransportWanVpnInterfaceEthernetFeatureNewStaticNat. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        TransportWanVpnInterfaceEthernetFeatureNewStaticNat.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        TransportWanVpnInterfaceEthernetFeatureNewStaticNat.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 direction: Optional[_builtins.str] = None,
                 source_ip: Optional[_builtins.str] = None,
                 source_ip_variable: Optional[_builtins.str] = None,
                 source_vpn: Optional[_builtins.int] = None,
                 source_vpn_variable: Optional[_builtins.str] = None,
                 translated_ip: Optional[_builtins.str] = None,
                 translated_ip_variable: Optional[_builtins.str] = None):
        """
        :param _builtins.str direction: Direction of static NAT translation
                 - Choices: `inside`, `outside`
                 - Default value: `inside`
        :param _builtins.str source_ip: Source IP address to be translated
        :param _builtins.str source_ip_variable: Variable name
        :param _builtins.int source_vpn: Source VPN ID
                 - Range: `0`-`65530`
                 - Default value: `0`
        :param _builtins.str source_vpn_variable: Variable name
        :param _builtins.str translated_ip: Statically translated source IP address
        :param _builtins.str translated_ip_variable: Variable name
        """
        if direction is not None:
            pulumi.set(__self__, "direction", direction)
        if source_ip is not None:
            pulumi.set(__self__, "source_ip", source_ip)
        if source_ip_variable is not None:
            pulumi.set(__self__, "source_ip_variable", source_ip_variable)
        if source_vpn is not None:
            pulumi.set(__self__, "source_vpn", source_vpn)
        if source_vpn_variable is not None:
            pulumi.set(__self__, "source_vpn_variable", source_vpn_variable)
        if translated_ip is not None:
            pulumi.set(__self__, "translated_ip", translated_ip)
        if translated_ip_variable is not None:
            pulumi.set(__self__, "translated_ip_variable", translated_ip_variable)

    @_builtins.property
    @pulumi.getter
    def direction(self) -> Optional[_builtins.str]:
        """
        Direction of static NAT translation
          - Choices: `inside`, `outside`
          - Default value: `inside`
        """
        return pulumi.get(self, "direction")

    @_builtins.property
    @pulumi.getter(name="sourceIp")
    def source_ip(self) -> Optional[_builtins.str]:
        """
        Source IP address to be translated
        """
        return pulumi.get(self, "source_ip")

    @_builtins.property
    @pulumi.getter(name="sourceIpVariable")
    def source_ip_variable(self) -> Optional[_builtins.str]:
        """
        Variable name
        """
        return pulumi.get(self, "source_ip_variable")

    @_builtins.property
    @pulumi.getter(name="sourceVpn")
    def source_vpn(self) -> Optional[_builtins.int]:
        """
        Source VPN ID
          - Range: `0`-`65530`
          - Default value: `0`
        """
        return pulumi.get(self, "source_vpn")

    @_builtins.property
    @pulumi.getter(name="sourceVpnVariable")
    def source_vpn_variable(self) -> Optional[_builtins.str]:
        """
        Variable name
        """
        return pulumi.get(self, "source_vpn_variable")

    @_builtins.property
    @pulumi.getter(name="translatedIp")
    def translated_ip(self) -> Optional[_builtins.str]:
        """
        Statically translated source IP address
        """
        return pulumi.get(self, "translated_ip")

    @_builtins.property
    @pulumi.getter(name="translatedIpVariable")
    def translated_ip_variable(self) -> Optional[_builtins.str]:
        """
        Variable name
        """
        return pulumi.get(self, "translated_ip_variable")


@pulumi.output_type
class TransportWanVpnInterfaceEthernetFeatureStaticNat66(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "sourcePrefix":
            suggest = "source_prefix"
        elif key == "sourcePrefixVariable":
            suggest = "source_prefix_variable"
        elif key == "sourceVpnId":
            suggest = "source_vpn_id"
        elif key == "sourceVpnIdVariable":
            suggest = "source_vpn_id_variable"
        elif key == "translatedSourcePrefix":
            suggest = "translated_source_prefix"
        elif key == "translatedSourcePrefixVariable":
            suggest = "translated_source_prefix_variable"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in TransportWanVpnInterfaceEthernetFeatureStaticNat66. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        TransportWanVpnInterfaceEthernetFeatureStaticNat66.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        TransportWanVpnInterfaceEthernetFeatureStaticNat66.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 source_prefix: Optional[_builtins.str] = None,
                 source_prefix_variable: Optional[_builtins.str] = None,
                 source_vpn_id: Optional[_builtins.int] = None,
                 source_vpn_id_variable: Optional[_builtins.str] = None,
                 translated_source_prefix: Optional[_builtins.str] = None,
                 translated_source_prefix_variable: Optional[_builtins.str] = None):
        """
        :param _builtins.str source_prefix: Source Prefix
        :param _builtins.str source_prefix_variable: Variable name
        :param _builtins.int source_vpn_id: Source VPN ID
                 - Range: `0`-`65530`
        :param _builtins.str source_vpn_id_variable: Variable name
        :param _builtins.str translated_source_prefix: Translated Source Prefix
        :param _builtins.str translated_source_prefix_variable: Variable name
        """
        if source_prefix is not None:
            pulumi.set(__self__, "source_prefix", source_prefix)
        if source_prefix_variable is not None:
            pulumi.set(__self__, "source_prefix_variable", source_prefix_variable)
        if source_vpn_id is not None:
            pulumi.set(__self__, "source_vpn_id", source_vpn_id)
        if source_vpn_id_variable is not None:
            pulumi.set(__self__, "source_vpn_id_variable", source_vpn_id_variable)
        if translated_source_prefix is not None:
            pulumi.set(__self__, "translated_source_prefix", translated_source_prefix)
        if translated_source_prefix_variable is not None:
            pulumi.set(__self__, "translated_source_prefix_variable", translated_source_prefix_variable)

    @_builtins.property
    @pulumi.getter(name="sourcePrefix")
    def source_prefix(self) -> Optional[_builtins.str]:
        """
        Source Prefix
        """
        return pulumi.get(self, "source_prefix")

    @_builtins.property
    @pulumi.getter(name="sourcePrefixVariable")
    def source_prefix_variable(self) -> Optional[_builtins.str]:
        """
        Variable name
        """
        return pulumi.get(self, "source_prefix_variable")

    @_builtins.property
    @pulumi.getter(name="sourceVpnId")
    def source_vpn_id(self) -> Optional[_builtins.int]:
        """
        Source VPN ID
          - Range: `0`-`65530`
        """
        return pulumi.get(self, "source_vpn_id")

    @_builtins.property
    @pulumi.getter(name="sourceVpnIdVariable")
    def source_vpn_id_variable(self) -> Optional[_builtins.str]:
        """
        Variable name
        """
        return pulumi.get(self, "source_vpn_id_variable")

    @_builtins.property
    @pulumi.getter(name="translatedSourcePrefix")
    def translated_source_prefix(self) -> Optional[_builtins.str]:
        """
        Translated Source Prefix
        """
        return pulumi.get(self, "translated_source_prefix")

    @_builtins.property
    @pulumi.getter(name="translatedSourcePrefixVariable")
    def translated_source_prefix_variable(self) -> Optional[_builtins.str]:
        """
        Variable name
        """
        return pulumi.get(self, "translated_source_prefix_variable")


@pulumi.output_type
class TransportWanVpnInterfaceEthernetFeatureTunnelInterfaceEncapsulation(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "preferenceVariable":
            suggest = "preference_variable"
        elif key == "weightVariable":
            suggest = "weight_variable"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in TransportWanVpnInterfaceEthernetFeatureTunnelInterfaceEncapsulation. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        TransportWanVpnInterfaceEthernetFeatureTunnelInterfaceEncapsulation.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        TransportWanVpnInterfaceEthernetFeatureTunnelInterfaceEncapsulation.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 encapsulation: Optional[_builtins.str] = None,
                 preference: Optional[_builtins.int] = None,
                 preference_variable: Optional[_builtins.str] = None,
                 weight: Optional[_builtins.int] = None,
                 weight_variable: Optional[_builtins.str] = None):
        """
        :param _builtins.str encapsulation: Encapsulation
                 - Choices: `gre`, `ipsec`
        :param _builtins.int preference: Set preference for TLOC
                 - Range: `0`-`4294967295`
        :param _builtins.str preference_variable: Variable name
        :param _builtins.int weight: Set weight for TLOC
                 - Range: `1`-`255`
                 - Default value: `1`
        :param _builtins.str weight_variable: Variable name
        """
        if encapsulation is not None:
            pulumi.set(__self__, "encapsulation", encapsulation)
        if preference is not None:
            pulumi.set(__self__, "preference", preference)
        if preference_variable is not None:
            pulumi.set(__self__, "preference_variable", preference_variable)
        if weight is not None:
            pulumi.set(__self__, "weight", weight)
        if weight_variable is not None:
            pulumi.set(__self__, "weight_variable", weight_variable)

    @_builtins.property
    @pulumi.getter
    def encapsulation(self) -> Optional[_builtins.str]:
        """
        Encapsulation
          - Choices: `gre`, `ipsec`
        """
        return pulumi.get(self, "encapsulation")

    @_builtins.property
    @pulumi.getter
    def preference(self) -> Optional[_builtins.int]:
        """
        Set preference for TLOC
          - Range: `0`-`4294967295`
        """
        return pulumi.get(self, "preference")

    @_builtins.property
    @pulumi.getter(name="preferenceVariable")
    def preference_variable(self) -> Optional[_builtins.str]:
        """
        Variable name
        """
        return pulumi.get(self, "preference_variable")

    @_builtins.property
    @pulumi.getter
    def weight(self) -> Optional[_builtins.int]:
        """
        Set weight for TLOC
          - Range: `1`-`255`
          - Default value: `1`
        """
        return pulumi.get(self, "weight")

    @_builtins.property
    @pulumi.getter(name="weightVariable")
    def weight_variable(self) -> Optional[_builtins.str]:
        """
        Variable name
        """
        return pulumi.get(self, "weight_variable")


@pulumi.output_type
class TransportWanVpnInterfaceT1E1SerialFeatureTunnelInterfaceEncapsulation(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "preferenceVariable":
            suggest = "preference_variable"
        elif key == "weightVariable":
            suggest = "weight_variable"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in TransportWanVpnInterfaceT1E1SerialFeatureTunnelInterfaceEncapsulation. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        TransportWanVpnInterfaceT1E1SerialFeatureTunnelInterfaceEncapsulation.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        TransportWanVpnInterfaceT1E1SerialFeatureTunnelInterfaceEncapsulation.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 encapsulation: Optional[_builtins.str] = None,
                 preference: Optional[_builtins.int] = None,
                 preference_variable: Optional[_builtins.str] = None,
                 weight: Optional[_builtins.int] = None,
                 weight_variable: Optional[_builtins.str] = None):
        """
        :param _builtins.str encapsulation: Encapsulation
                 - Choices: `gre`, `ipsec`
        :param _builtins.int preference: Set preference for TLOC
                 - Range: `0`-`4294967295`
        :param _builtins.str preference_variable: Variable name
        :param _builtins.int weight: Set weight for TLOC
                 - Range: `1`-`255`
                 - Default value: `1`
        :param _builtins.str weight_variable: Variable name
        """
        if encapsulation is not None:
            pulumi.set(__self__, "encapsulation", encapsulation)
        if preference is not None:
            pulumi.set(__self__, "preference", preference)
        if preference_variable is not None:
            pulumi.set(__self__, "preference_variable", preference_variable)
        if weight is not None:
            pulumi.set(__self__, "weight", weight)
        if weight_variable is not None:
            pulumi.set(__self__, "weight_variable", weight_variable)

    @_builtins.property
    @pulumi.getter
    def encapsulation(self) -> Optional[_builtins.str]:
        """
        Encapsulation
          - Choices: `gre`, `ipsec`
        """
        return pulumi.get(self, "encapsulation")

    @_builtins.property
    @pulumi.getter
    def preference(self) -> Optional[_builtins.int]:
        """
        Set preference for TLOC
          - Range: `0`-`4294967295`
        """
        return pulumi.get(self, "preference")

    @_builtins.property
    @pulumi.getter(name="preferenceVariable")
    def preference_variable(self) -> Optional[_builtins.str]:
        """
        Variable name
        """
        return pulumi.get(self, "preference_variable")

    @_builtins.property
    @pulumi.getter
    def weight(self) -> Optional[_builtins.int]:
        """
        Set weight for TLOC
          - Range: `1`-`255`
          - Default value: `1`
        """
        return pulumi.get(self, "weight")

    @_builtins.property
    @pulumi.getter(name="weightVariable")
    def weight_variable(self) -> Optional[_builtins.str]:
        """
        Variable name
        """
        return pulumi.get(self, "weight_variable")


@pulumi.output_type
class UrlFilteringPolicyDefinitionLogging(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "externalSyslogServerIp":
            suggest = "external_syslog_server_ip"
        elif key == "externalSyslogServerVpn":
            suggest = "external_syslog_server_vpn"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in UrlFilteringPolicyDefinitionLogging. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        UrlFilteringPolicyDefinitionLogging.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        UrlFilteringPolicyDefinitionLogging.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 external_syslog_server_ip: Optional[_builtins.str] = None,
                 external_syslog_server_vpn: Optional[_builtins.str] = None):
        """
        :param _builtins.str external_syslog_server_ip: External Syslog Server IP
        :param _builtins.str external_syslog_server_vpn: External Syslog Server VPN
        """
        if external_syslog_server_ip is not None:
            pulumi.set(__self__, "external_syslog_server_ip", external_syslog_server_ip)
        if external_syslog_server_vpn is not None:
            pulumi.set(__self__, "external_syslog_server_vpn", external_syslog_server_vpn)

    @_builtins.property
    @pulumi.getter(name="externalSyslogServerIp")
    def external_syslog_server_ip(self) -> Optional[_builtins.str]:
        """
        External Syslog Server IP
        """
        return pulumi.get(self, "external_syslog_server_ip")

    @_builtins.property
    @pulumi.getter(name="externalSyslogServerVpn")
    def external_syslog_server_vpn(self) -> Optional[_builtins.str]:
        """
        External Syslog Server VPN
        """
        return pulumi.get(self, "external_syslog_server_vpn")


@pulumi.output_type
class VpnInterfaceCellularFeatureTemplateIpv4AccessList(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "aclName":
            suggest = "acl_name"
        elif key == "aclNameVariable":
            suggest = "acl_name_variable"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in VpnInterfaceCellularFeatureTemplateIpv4AccessList. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        VpnInterfaceCellularFeatureTemplateIpv4AccessList.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        VpnInterfaceCellularFeatureTemplateIpv4AccessList.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 acl_name: Optional[_builtins.str] = None,
                 acl_name_variable: Optional[_builtins.str] = None,
                 direction: Optional[_builtins.str] = None,
                 optional: Optional[_builtins.bool] = None):
        """
        :param _builtins.str acl_name: Name of access list
        :param _builtins.str acl_name_variable: Variable name
        :param _builtins.str direction: Direction
                 - Choices: `in`, `out`
        :param _builtins.bool optional: Indicates if list item is considered optional.
        """
        if acl_name is not None:
            pulumi.set(__self__, "acl_name", acl_name)
        if acl_name_variable is not None:
            pulumi.set(__self__, "acl_name_variable", acl_name_variable)
        if direction is not None:
            pulumi.set(__self__, "direction", direction)
        if optional is not None:
            pulumi.set(__self__, "optional", optional)

    @_builtins.property
    @pulumi.getter(name="aclName")
    def acl_name(self) -> Optional[_builtins.str]:
        """
        Name of access list
        """
        return pulumi.get(self, "acl_name")

    @_builtins.property
    @pulumi.getter(name="aclNameVariable")
    def acl_name_variable(self) -> Optional[_builtins.str]:
        """
        Variable name
        """
        return pulumi.get(self, "acl_name_variable")

    @_builtins.property
    @pulumi.getter
    def direction(self) -> Optional[_builtins.str]:
        """
        Direction
          - Choices: `in`, `out`
        """
        return pulumi.get(self, "direction")

    @_builtins.property
    @pulumi.getter
    def optional(self) -> Optional[_builtins.bool]:
        """
        Indicates if list item is considered optional.
        """
        return pulumi.get(self, "optional")


@pulumi.output_type
class VpnInterfaceCellularFeatureTemplateIpv6AccessList(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "aclName":
            suggest = "acl_name"
        elif key == "aclNameVariable":
            suggest = "acl_name_variable"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in VpnInterfaceCellularFeatureTemplateIpv6AccessList. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        VpnInterfaceCellularFeatureTemplateIpv6AccessList.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        VpnInterfaceCellularFeatureTemplateIpv6AccessList.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 acl_name: Optional[_builtins.str] = None,
                 acl_name_variable: Optional[_builtins.str] = None,
                 direction: Optional[_builtins.str] = None,
                 optional: Optional[_builtins.bool] = None):
        """
        :param _builtins.str acl_name: Name of access list
        :param _builtins.str acl_name_variable: Variable name
        :param _builtins.str direction: Direction
                 - Choices: `in`, `out`
        :param _builtins.bool optional: Indicates if list item is considered optional.
        """
        if acl_name is not None:
            pulumi.set(__self__, "acl_name", acl_name)
        if acl_name_variable is not None:
            pulumi.set(__self__, "acl_name_variable", acl_name_variable)
        if direction is not None:
            pulumi.set(__self__, "direction", direction)
        if optional is not None:
            pulumi.set(__self__, "optional", optional)

    @_builtins.property
    @pulumi.getter(name="aclName")
    def acl_name(self) -> Optional[_builtins.str]:
        """
        Name of access list
        """
        return pulumi.get(self, "acl_name")

    @_builtins.property
    @pulumi.getter(name="aclNameVariable")
    def acl_name_variable(self) -> Optional[_builtins.str]:
        """
        Variable name
        """
        return pulumi.get(self, "acl_name_variable")

    @_builtins.property
    @pulumi.getter
    def direction(self) -> Optional[_builtins.str]:
        """
        Direction
          - Choices: `in`, `out`
        """
        return pulumi.get(self, "direction")

    @_builtins.property
    @pulumi.getter
    def optional(self) -> Optional[_builtins.bool]:
        """
        Indicates if list item is considered optional.
        """
        return pulumi.get(self, "optional")


@pulumi.output_type
class VpnInterfaceCellularFeatureTemplateNatPortForward(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "portEndRange":
            suggest = "port_end_range"
        elif key == "portStartRange":
            suggest = "port_start_range"
        elif key == "privateIpAddress":
            suggest = "private_ip_address"
        elif key == "privateIpAddressVariable":
            suggest = "private_ip_address_variable"
        elif key == "privateVpn":
            suggest = "private_vpn"
        elif key == "privateVpnVariable":
            suggest = "private_vpn_variable"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in VpnInterfaceCellularFeatureTemplateNatPortForward. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        VpnInterfaceCellularFeatureTemplateNatPortForward.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        VpnInterfaceCellularFeatureTemplateNatPortForward.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 optional: Optional[_builtins.bool] = None,
                 port_end_range: Optional[_builtins.int] = None,
                 port_start_range: Optional[_builtins.int] = None,
                 private_ip_address: Optional[_builtins.str] = None,
                 private_ip_address_variable: Optional[_builtins.str] = None,
                 private_vpn: Optional[_builtins.int] = None,
                 private_vpn_variable: Optional[_builtins.str] = None,
                 protocol: Optional[_builtins.str] = None):
        """
        :param _builtins.bool optional: Indicates if list item is considered optional.
        :param _builtins.int port_end_range: Ending port of port range
                 - Range: `0`-`65535`
        :param _builtins.int port_start_range: Starting port of port range
                 - Range: `0`-`65535`
        :param _builtins.str private_ip_address: Private IP Address to translate to
        :param _builtins.str private_ip_address_variable: Variable name
        :param _builtins.int private_vpn: VPN in which private IP Address resides
                 - Range: `0`-`65535`
        :param _builtins.str private_vpn_variable: Variable name
        :param _builtins.str protocol: Layer 4 protocol to apply port forwarding to
                 - Choices: `tcp`, `udp`
        """
        if optional is not None:
            pulumi.set(__self__, "optional", optional)
        if port_end_range is not None:
            pulumi.set(__self__, "port_end_range", port_end_range)
        if port_start_range is not None:
            pulumi.set(__self__, "port_start_range", port_start_range)
        if private_ip_address is not None:
            pulumi.set(__self__, "private_ip_address", private_ip_address)
        if private_ip_address_variable is not None:
            pulumi.set(__self__, "private_ip_address_variable", private_ip_address_variable)
        if private_vpn is not None:
            pulumi.set(__self__, "private_vpn", private_vpn)
        if private_vpn_variable is not None:
            pulumi.set(__self__, "private_vpn_variable", private_vpn_variable)
        if protocol is not None:
            pulumi.set(__self__, "protocol", protocol)

    @_builtins.property
    @pulumi.getter
    def optional(self) -> Optional[_builtins.bool]:
        """
        Indicates if list item is considered optional.
        """
        return pulumi.get(self, "optional")

    @_builtins.property
    @pulumi.getter(name="portEndRange")
    def port_end_range(self) -> Optional[_builtins.int]:
        """
        Ending port of port range
          - Range: `0`-`65535`
        """
        return pulumi.get(self, "port_end_range")

    @_builtins.property
    @pulumi.getter(name="portStartRange")
    def port_start_range(self) -> Optional[_builtins.int]:
        """
        Starting port of port range
          - Range: `0`-`65535`
        """
        return pulumi.get(self, "port_start_range")

    @_builtins.property
    @pulumi.getter(name="privateIpAddress")
    def private_ip_address(self) -> Optional[_builtins.str]:
        """
        Private IP Address to translate to
        """
        return pulumi.get(self, "private_ip_address")

    @_builtins.property
    @pulumi.getter(name="privateIpAddressVariable")
    def private_ip_address_variable(self) -> Optional[_builtins.str]:
        """
        Variable name
        """
        return pulumi.get(self, "private_ip_address_variable")

    @_builtins.property
    @pulumi.getter(name="privateVpn")
    def private_vpn(self) -> Optional[_builtins.int]:
        """
        VPN in which private IP Address resides
          - Range: `0`-`65535`
        """
        return pulumi.get(self, "private_vpn")

    @_builtins.property
    @pulumi.getter(name="privateVpnVariable")
    def private_vpn_variable(self) -> Optional[_builtins.str]:
        """
        Variable name
        """
        return pulumi.get(self, "private_vpn_variable")

    @_builtins.property
    @pulumi.getter
    def protocol(self) -> Optional[_builtins.str]:
        """
        Layer 4 protocol to apply port forwarding to
          - Choices: `tcp`, `udp`
        """
        return pulumi.get(self, "protocol")


@pulumi.output_type
class VpnInterfaceCellularFeatureTemplatePolicer(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "policerName":
            suggest = "policer_name"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in VpnInterfaceCellularFeatureTemplatePolicer. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        VpnInterfaceCellularFeatureTemplatePolicer.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        VpnInterfaceCellularFeatureTemplatePolicer.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 direction: Optional[_builtins.str] = None,
                 optional: Optional[_builtins.bool] = None,
                 policer_name: Optional[_builtins.str] = None):
        """
        :param _builtins.str direction: Direction
                 - Choices: `in`, `out`
        :param _builtins.bool optional: Indicates if list item is considered optional.
        :param _builtins.str policer_name: Name of policer
        """
        if direction is not None:
            pulumi.set(__self__, "direction", direction)
        if optional is not None:
            pulumi.set(__self__, "optional", optional)
        if policer_name is not None:
            pulumi.set(__self__, "policer_name", policer_name)

    @_builtins.property
    @pulumi.getter
    def direction(self) -> Optional[_builtins.str]:
        """
        Direction
          - Choices: `in`, `out`
        """
        return pulumi.get(self, "direction")

    @_builtins.property
    @pulumi.getter
    def optional(self) -> Optional[_builtins.bool]:
        """
        Indicates if list item is considered optional.
        """
        return pulumi.get(self, "optional")

    @_builtins.property
    @pulumi.getter(name="policerName")
    def policer_name(self) -> Optional[_builtins.str]:
        """
        Name of policer
        """
        return pulumi.get(self, "policer_name")


@pulumi.output_type
class VpnInterfaceCellularFeatureTemplateStaticArp(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "ipAddress":
            suggest = "ip_address"
        elif key == "ipAddressVariable":
            suggest = "ip_address_variable"
        elif key == "macVariable":
            suggest = "mac_variable"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in VpnInterfaceCellularFeatureTemplateStaticArp. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        VpnInterfaceCellularFeatureTemplateStaticArp.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        VpnInterfaceCellularFeatureTemplateStaticArp.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 ip_address: Optional[_builtins.str] = None,
                 ip_address_variable: Optional[_builtins.str] = None,
                 mac: Optional[_builtins.str] = None,
                 mac_variable: Optional[_builtins.str] = None,
                 optional: Optional[_builtins.bool] = None):
        """
        :param _builtins.str ip_address: IP Address
        :param _builtins.str ip_address_variable: Variable name
        :param _builtins.str mac: MAC address
        :param _builtins.str mac_variable: Variable name
        :param _builtins.bool optional: Indicates if list item is considered optional.
        """
        if ip_address is not None:
            pulumi.set(__self__, "ip_address", ip_address)
        if ip_address_variable is not None:
            pulumi.set(__self__, "ip_address_variable", ip_address_variable)
        if mac is not None:
            pulumi.set(__self__, "mac", mac)
        if mac_variable is not None:
            pulumi.set(__self__, "mac_variable", mac_variable)
        if optional is not None:
            pulumi.set(__self__, "optional", optional)

    @_builtins.property
    @pulumi.getter(name="ipAddress")
    def ip_address(self) -> Optional[_builtins.str]:
        """
        IP Address
        """
        return pulumi.get(self, "ip_address")

    @_builtins.property
    @pulumi.getter(name="ipAddressVariable")
    def ip_address_variable(self) -> Optional[_builtins.str]:
        """
        Variable name
        """
        return pulumi.get(self, "ip_address_variable")

    @_builtins.property
    @pulumi.getter
    def mac(self) -> Optional[_builtins.str]:
        """
        MAC address
        """
        return pulumi.get(self, "mac")

    @_builtins.property
    @pulumi.getter(name="macVariable")
    def mac_variable(self) -> Optional[_builtins.str]:
        """
        Variable name
        """
        return pulumi.get(self, "mac_variable")

    @_builtins.property
    @pulumi.getter
    def optional(self) -> Optional[_builtins.bool]:
        """
        Indicates if list item is considered optional.
        """
        return pulumi.get(self, "optional")


@pulumi.output_type
class VpnInterfaceCellularFeatureTemplateTunnelInterfaceEncapsulation(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "preferenceVariable":
            suggest = "preference_variable"
        elif key == "weightVariable":
            suggest = "weight_variable"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in VpnInterfaceCellularFeatureTemplateTunnelInterfaceEncapsulation. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        VpnInterfaceCellularFeatureTemplateTunnelInterfaceEncapsulation.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        VpnInterfaceCellularFeatureTemplateTunnelInterfaceEncapsulation.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 encapsulation: Optional[_builtins.str] = None,
                 optional: Optional[_builtins.bool] = None,
                 preference: Optional[_builtins.int] = None,
                 preference_variable: Optional[_builtins.str] = None,
                 weight: Optional[_builtins.int] = None,
                 weight_variable: Optional[_builtins.str] = None):
        """
        :param _builtins.str encapsulation: Encapsulation
                 - Choices: `gre`, `ipsec`
        :param _builtins.bool optional: Indicates if list item is considered optional.
        :param _builtins.int preference: Set preference for TLOC
                 - Range: `0`-`4294967295`
        :param _builtins.str preference_variable: Variable name
        :param _builtins.int weight: Set weight for TLOC
                 - Range: `1`-`255`
                 - Default value: `1`
        :param _builtins.str weight_variable: Variable name
        """
        if encapsulation is not None:
            pulumi.set(__self__, "encapsulation", encapsulation)
        if optional is not None:
            pulumi.set(__self__, "optional", optional)
        if preference is not None:
            pulumi.set(__self__, "preference", preference)
        if preference_variable is not None:
            pulumi.set(__self__, "preference_variable", preference_variable)
        if weight is not None:
            pulumi.set(__self__, "weight", weight)
        if weight_variable is not None:
            pulumi.set(__self__, "weight_variable", weight_variable)

    @_builtins.property
    @pulumi.getter
    def encapsulation(self) -> Optional[_builtins.str]:
        """
        Encapsulation
          - Choices: `gre`, `ipsec`
        """
        return pulumi.get(self, "encapsulation")

    @_builtins.property
    @pulumi.getter
    def optional(self) -> Optional[_builtins.bool]:
        """
        Indicates if list item is considered optional.
        """
        return pulumi.get(self, "optional")

    @_builtins.property
    @pulumi.getter
    def preference(self) -> Optional[_builtins.int]:
        """
        Set preference for TLOC
          - Range: `0`-`4294967295`
        """
        return pulumi.get(self, "preference")

    @_builtins.property
    @pulumi.getter(name="preferenceVariable")
    def preference_variable(self) -> Optional[_builtins.str]:
        """
        Variable name
        """
        return pulumi.get(self, "preference_variable")

    @_builtins.property
    @pulumi.getter
    def weight(self) -> Optional[_builtins.int]:
        """
        Set weight for TLOC
          - Range: `1`-`255`
          - Default value: `1`
        """
        return pulumi.get(self, "weight")

    @_builtins.property
    @pulumi.getter(name="weightVariable")
    def weight_variable(self) -> Optional[_builtins.str]:
        """
        Variable name
        """
        return pulumi.get(self, "weight_variable")


@pulumi.output_type
class VpnInterfaceDslIpoeFeatureTemplateAccessList(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "aclName":
            suggest = "acl_name"
        elif key == "aclNameVariable":
            suggest = "acl_name_variable"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in VpnInterfaceDslIpoeFeatureTemplateAccessList. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        VpnInterfaceDslIpoeFeatureTemplateAccessList.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        VpnInterfaceDslIpoeFeatureTemplateAccessList.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 acl_name: Optional[_builtins.str] = None,
                 acl_name_variable: Optional[_builtins.str] = None,
                 direction: Optional[_builtins.str] = None,
                 optional: Optional[_builtins.bool] = None):
        """
        :param _builtins.str acl_name: Name of access list
        :param _builtins.str acl_name_variable: Variable name
        :param _builtins.str direction: Direction
                 - Choices: `in`, `out`
        :param _builtins.bool optional: Indicates if list item is considered optional.
        """
        if acl_name is not None:
            pulumi.set(__self__, "acl_name", acl_name)
        if acl_name_variable is not None:
            pulumi.set(__self__, "acl_name_variable", acl_name_variable)
        if direction is not None:
            pulumi.set(__self__, "direction", direction)
        if optional is not None:
            pulumi.set(__self__, "optional", optional)

    @_builtins.property
    @pulumi.getter(name="aclName")
    def acl_name(self) -> Optional[_builtins.str]:
        """
        Name of access list
        """
        return pulumi.get(self, "acl_name")

    @_builtins.property
    @pulumi.getter(name="aclNameVariable")
    def acl_name_variable(self) -> Optional[_builtins.str]:
        """
        Variable name
        """
        return pulumi.get(self, "acl_name_variable")

    @_builtins.property
    @pulumi.getter
    def direction(self) -> Optional[_builtins.str]:
        """
        Direction
          - Choices: `in`, `out`
        """
        return pulumi.get(self, "direction")

    @_builtins.property
    @pulumi.getter
    def optional(self) -> Optional[_builtins.bool]:
        """
        Indicates if list item is considered optional.
        """
        return pulumi.get(self, "optional")


@pulumi.output_type
class VpnInterfaceDslIpoeFeatureTemplateNatPortForward(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "portEndRange":
            suggest = "port_end_range"
        elif key == "portStartRange":
            suggest = "port_start_range"
        elif key == "privateIpAddress":
            suggest = "private_ip_address"
        elif key == "privateIpAddressVariable":
            suggest = "private_ip_address_variable"
        elif key == "privateVpn":
            suggest = "private_vpn"
        elif key == "privateVpnVariable":
            suggest = "private_vpn_variable"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in VpnInterfaceDslIpoeFeatureTemplateNatPortForward. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        VpnInterfaceDslIpoeFeatureTemplateNatPortForward.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        VpnInterfaceDslIpoeFeatureTemplateNatPortForward.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 optional: Optional[_builtins.bool] = None,
                 port_end_range: Optional[_builtins.int] = None,
                 port_start_range: Optional[_builtins.int] = None,
                 private_ip_address: Optional[_builtins.str] = None,
                 private_ip_address_variable: Optional[_builtins.str] = None,
                 private_vpn: Optional[_builtins.int] = None,
                 private_vpn_variable: Optional[_builtins.str] = None,
                 protocol: Optional[_builtins.str] = None):
        """
        :param _builtins.bool optional: Indicates if list item is considered optional.
        :param _builtins.int port_end_range: Ending port of port range
                 - Range: `0`-`65535`
        :param _builtins.int port_start_range: Starting port of port range
                 - Range: `0`-`65535`
        :param _builtins.str private_ip_address: Private IP Address to translate to
        :param _builtins.str private_ip_address_variable: Variable name
        :param _builtins.int private_vpn: VPN in which private IP Address resides
                 - Range: `0`-`65535`
        :param _builtins.str private_vpn_variable: Variable name
        :param _builtins.str protocol: Layer 4 protocol to apply port forwarding to
                 - Choices: `tcp`, `udp`
        """
        if optional is not None:
            pulumi.set(__self__, "optional", optional)
        if port_end_range is not None:
            pulumi.set(__self__, "port_end_range", port_end_range)
        if port_start_range is not None:
            pulumi.set(__self__, "port_start_range", port_start_range)
        if private_ip_address is not None:
            pulumi.set(__self__, "private_ip_address", private_ip_address)
        if private_ip_address_variable is not None:
            pulumi.set(__self__, "private_ip_address_variable", private_ip_address_variable)
        if private_vpn is not None:
            pulumi.set(__self__, "private_vpn", private_vpn)
        if private_vpn_variable is not None:
            pulumi.set(__self__, "private_vpn_variable", private_vpn_variable)
        if protocol is not None:
            pulumi.set(__self__, "protocol", protocol)

    @_builtins.property
    @pulumi.getter
    def optional(self) -> Optional[_builtins.bool]:
        """
        Indicates if list item is considered optional.
        """
        return pulumi.get(self, "optional")

    @_builtins.property
    @pulumi.getter(name="portEndRange")
    def port_end_range(self) -> Optional[_builtins.int]:
        """
        Ending port of port range
          - Range: `0`-`65535`
        """
        return pulumi.get(self, "port_end_range")

    @_builtins.property
    @pulumi.getter(name="portStartRange")
    def port_start_range(self) -> Optional[_builtins.int]:
        """
        Starting port of port range
          - Range: `0`-`65535`
        """
        return pulumi.get(self, "port_start_range")

    @_builtins.property
    @pulumi.getter(name="privateIpAddress")
    def private_ip_address(self) -> Optional[_builtins.str]:
        """
        Private IP Address to translate to
        """
        return pulumi.get(self, "private_ip_address")

    @_builtins.property
    @pulumi.getter(name="privateIpAddressVariable")
    def private_ip_address_variable(self) -> Optional[_builtins.str]:
        """
        Variable name
        """
        return pulumi.get(self, "private_ip_address_variable")

    @_builtins.property
    @pulumi.getter(name="privateVpn")
    def private_vpn(self) -> Optional[_builtins.int]:
        """
        VPN in which private IP Address resides
          - Range: `0`-`65535`
        """
        return pulumi.get(self, "private_vpn")

    @_builtins.property
    @pulumi.getter(name="privateVpnVariable")
    def private_vpn_variable(self) -> Optional[_builtins.str]:
        """
        Variable name
        """
        return pulumi.get(self, "private_vpn_variable")

    @_builtins.property
    @pulumi.getter
    def protocol(self) -> Optional[_builtins.str]:
        """
        Layer 4 protocol to apply port forwarding to
          - Choices: `tcp`, `udp`
        """
        return pulumi.get(self, "protocol")


@pulumi.output_type
class VpnInterfaceDslIpoeFeatureTemplatePolicer(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "policerName":
            suggest = "policer_name"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in VpnInterfaceDslIpoeFeatureTemplatePolicer. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        VpnInterfaceDslIpoeFeatureTemplatePolicer.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        VpnInterfaceDslIpoeFeatureTemplatePolicer.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 direction: Optional[_builtins.str] = None,
                 optional: Optional[_builtins.bool] = None,
                 policer_name: Optional[_builtins.str] = None):
        """
        :param _builtins.str direction: Direction
                 - Choices: `in`, `out`
        :param _builtins.bool optional: Indicates if list item is considered optional.
        :param _builtins.str policer_name: Name of policer
        """
        if direction is not None:
            pulumi.set(__self__, "direction", direction)
        if optional is not None:
            pulumi.set(__self__, "optional", optional)
        if policer_name is not None:
            pulumi.set(__self__, "policer_name", policer_name)

    @_builtins.property
    @pulumi.getter
    def direction(self) -> Optional[_builtins.str]:
        """
        Direction
          - Choices: `in`, `out`
        """
        return pulumi.get(self, "direction")

    @_builtins.property
    @pulumi.getter
    def optional(self) -> Optional[_builtins.bool]:
        """
        Indicates if list item is considered optional.
        """
        return pulumi.get(self, "optional")

    @_builtins.property
    @pulumi.getter(name="policerName")
    def policer_name(self) -> Optional[_builtins.str]:
        """
        Name of policer
        """
        return pulumi.get(self, "policer_name")


@pulumi.output_type
class VpnInterfaceDslIpoeFeatureTemplateTunnelInterfaceEncapsulation(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "preferenceVariable":
            suggest = "preference_variable"
        elif key == "weightVariable":
            suggest = "weight_variable"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in VpnInterfaceDslIpoeFeatureTemplateTunnelInterfaceEncapsulation. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        VpnInterfaceDslIpoeFeatureTemplateTunnelInterfaceEncapsulation.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        VpnInterfaceDslIpoeFeatureTemplateTunnelInterfaceEncapsulation.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 encapsulation: Optional[_builtins.str] = None,
                 optional: Optional[_builtins.bool] = None,
                 preference: Optional[_builtins.int] = None,
                 preference_variable: Optional[_builtins.str] = None,
                 weight: Optional[_builtins.int] = None,
                 weight_variable: Optional[_builtins.str] = None):
        """
        :param _builtins.str encapsulation: Encapsulation
                 - Choices: `gre`, `ipsec`
        :param _builtins.bool optional: Indicates if list item is considered optional.
        :param _builtins.int preference: Set preference for TLOC
                 - Range: `0`-`4294967295`
        :param _builtins.str preference_variable: Variable name
        :param _builtins.int weight: Set weight for TLOC
                 - Range: `1`-`255`
                 - Default value: `1`
        :param _builtins.str weight_variable: Variable name
        """
        if encapsulation is not None:
            pulumi.set(__self__, "encapsulation", encapsulation)
        if optional is not None:
            pulumi.set(__self__, "optional", optional)
        if preference is not None:
            pulumi.set(__self__, "preference", preference)
        if preference_variable is not None:
            pulumi.set(__self__, "preference_variable", preference_variable)
        if weight is not None:
            pulumi.set(__self__, "weight", weight)
        if weight_variable is not None:
            pulumi.set(__self__, "weight_variable", weight_variable)

    @_builtins.property
    @pulumi.getter
    def encapsulation(self) -> Optional[_builtins.str]:
        """
        Encapsulation
          - Choices: `gre`, `ipsec`
        """
        return pulumi.get(self, "encapsulation")

    @_builtins.property
    @pulumi.getter
    def optional(self) -> Optional[_builtins.bool]:
        """
        Indicates if list item is considered optional.
        """
        return pulumi.get(self, "optional")

    @_builtins.property
    @pulumi.getter
    def preference(self) -> Optional[_builtins.int]:
        """
        Set preference for TLOC
          - Range: `0`-`4294967295`
        """
        return pulumi.get(self, "preference")

    @_builtins.property
    @pulumi.getter(name="preferenceVariable")
    def preference_variable(self) -> Optional[_builtins.str]:
        """
        Variable name
        """
        return pulumi.get(self, "preference_variable")

    @_builtins.property
    @pulumi.getter
    def weight(self) -> Optional[_builtins.int]:
        """
        Set weight for TLOC
          - Range: `1`-`255`
          - Default value: `1`
        """
        return pulumi.get(self, "weight")

    @_builtins.property
    @pulumi.getter(name="weightVariable")
    def weight_variable(self) -> Optional[_builtins.str]:
        """
        Variable name
        """
        return pulumi.get(self, "weight_variable")


@pulumi.output_type
class VpnInterfaceDslIpoeFeatureTemplateVdslConfiguration(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "controllerVdslSlot":
            suggest = "controller_vdsl_slot"
        elif key == "controllerVdslSlotVariable":
            suggest = "controller_vdsl_slot_variable"
        elif key == "modeAdsl1":
            suggest = "mode_adsl1"
        elif key == "modeAdsl2":
            suggest = "mode_adsl2"
        elif key == "modeAdsl2plus":
            suggest = "mode_adsl2plus"
        elif key == "modeAnsi":
            suggest = "mode_ansi"
        elif key == "modeVdsl2":
            suggest = "mode_vdsl2"
        elif key == "vdslModemConfiguration":
            suggest = "vdsl_modem_configuration"
        elif key == "vdslModemConfigurationVariable":
            suggest = "vdsl_modem_configuration_variable"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in VpnInterfaceDslIpoeFeatureTemplateVdslConfiguration. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        VpnInterfaceDslIpoeFeatureTemplateVdslConfiguration.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        VpnInterfaceDslIpoeFeatureTemplateVdslConfiguration.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 controller_vdsl_slot: Optional[_builtins.str] = None,
                 controller_vdsl_slot_variable: Optional[_builtins.str] = None,
                 mode_adsl1: Optional[_builtins.bool] = None,
                 mode_adsl2: Optional[_builtins.bool] = None,
                 mode_adsl2plus: Optional[_builtins.bool] = None,
                 mode_ansi: Optional[_builtins.bool] = None,
                 mode_vdsl2: Optional[_builtins.bool] = None,
                 optional: Optional[_builtins.bool] = None,
                 sra: Optional[_builtins.bool] = None,
                 vdsl_modem_configuration: Optional[_builtins.str] = None,
                 vdsl_modem_configuration_variable: Optional[_builtins.str] = None):
        """
        :param _builtins.str controller_vdsl_slot: Set module slot/subslot/port number
        :param _builtins.str controller_vdsl_slot_variable: Variable name
        :param _builtins.bool mode_adsl1: Set VDSL operating mode to adsl1
                 - Default value: `false`
        :param _builtins.bool mode_adsl2: Set VDSL operating mode to adsl2
                 - Default value: `false`
        :param _builtins.bool mode_adsl2plus: Set VDSL operating mode to adsl2plus
                 - Default value: `false`
        :param _builtins.bool mode_ansi: Set VDSL operating mode to ansi
                 - Default value: `false`
        :param _builtins.bool mode_vdsl2: Set VDSL operating mode to vdsl2
                 - Default value: `false`
        :param _builtins.bool optional: Indicates if list item is considered optional.
        :param _builtins.bool sra: Seamless rate adaption
                 - Default value: `true`
        :param _builtins.str vdsl_modem_configuration: Set module slot/subslot/port number
        :param _builtins.str vdsl_modem_configuration_variable: Variable name
        """
        if controller_vdsl_slot is not None:
            pulumi.set(__self__, "controller_vdsl_slot", controller_vdsl_slot)
        if controller_vdsl_slot_variable is not None:
            pulumi.set(__self__, "controller_vdsl_slot_variable", controller_vdsl_slot_variable)
        if mode_adsl1 is not None:
            pulumi.set(__self__, "mode_adsl1", mode_adsl1)
        if mode_adsl2 is not None:
            pulumi.set(__self__, "mode_adsl2", mode_adsl2)
        if mode_adsl2plus is not None:
            pulumi.set(__self__, "mode_adsl2plus", mode_adsl2plus)
        if mode_ansi is not None:
            pulumi.set(__self__, "mode_ansi", mode_ansi)
        if mode_vdsl2 is not None:
            pulumi.set(__self__, "mode_vdsl2", mode_vdsl2)
        if optional is not None:
            pulumi.set(__self__, "optional", optional)
        if sra is not None:
            pulumi.set(__self__, "sra", sra)
        if vdsl_modem_configuration is not None:
            pulumi.set(__self__, "vdsl_modem_configuration", vdsl_modem_configuration)
        if vdsl_modem_configuration_variable is not None:
            pulumi.set(__self__, "vdsl_modem_configuration_variable", vdsl_modem_configuration_variable)

    @_builtins.property
    @pulumi.getter(name="controllerVdslSlot")
    def controller_vdsl_slot(self) -> Optional[_builtins.str]:
        """
        Set module slot/subslot/port number
        """
        return pulumi.get(self, "controller_vdsl_slot")

    @_builtins.property
    @pulumi.getter(name="controllerVdslSlotVariable")
    def controller_vdsl_slot_variable(self) -> Optional[_builtins.str]:
        """
        Variable name
        """
        return pulumi.get(self, "controller_vdsl_slot_variable")

    @_builtins.property
    @pulumi.getter(name="modeAdsl1")
    def mode_adsl1(self) -> Optional[_builtins.bool]:
        """
        Set VDSL operating mode to adsl1
          - Default value: `false`
        """
        return pulumi.get(self, "mode_adsl1")

    @_builtins.property
    @pulumi.getter(name="modeAdsl2")
    def mode_adsl2(self) -> Optional[_builtins.bool]:
        """
        Set VDSL operating mode to adsl2
          - Default value: `false`
        """
        return pulumi.get(self, "mode_adsl2")

    @_builtins.property
    @pulumi.getter(name="modeAdsl2plus")
    def mode_adsl2plus(self) -> Optional[_builtins.bool]:
        """
        Set VDSL operating mode to adsl2plus
          - Default value: `false`
        """
        return pulumi.get(self, "mode_adsl2plus")

    @_builtins.property
    @pulumi.getter(name="modeAnsi")
    def mode_ansi(self) -> Optional[_builtins.bool]:
        """
        Set VDSL operating mode to ansi
          - Default value: `false`
        """
        return pulumi.get(self, "mode_ansi")

    @_builtins.property
    @pulumi.getter(name="modeVdsl2")
    def mode_vdsl2(self) -> Optional[_builtins.bool]:
        """
        Set VDSL operating mode to vdsl2
          - Default value: `false`
        """
        return pulumi.get(self, "mode_vdsl2")

    @_builtins.property
    @pulumi.getter
    def optional(self) -> Optional[_builtins.bool]:
        """
        Indicates if list item is considered optional.
        """
        return pulumi.get(self, "optional")

    @_builtins.property
    @pulumi.getter
    def sra(self) -> Optional[_builtins.bool]:
        """
        Seamless rate adaption
          - Default value: `true`
        """
        return pulumi.get(self, "sra")

    @_builtins.property
    @pulumi.getter(name="vdslModemConfiguration")
    def vdsl_modem_configuration(self) -> Optional[_builtins.str]:
        """
        Set module slot/subslot/port number
        """
        return pulumi.get(self, "vdsl_modem_configuration")

    @_builtins.property
    @pulumi.getter(name="vdslModemConfigurationVariable")
    def vdsl_modem_configuration_variable(self) -> Optional[_builtins.str]:
        """
        Variable name
        """
        return pulumi.get(self, "vdsl_modem_configuration_variable")


@pulumi.output_type
class VpnInterfaceDslPppoaFeatureTemplateAccessList(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "aclName":
            suggest = "acl_name"
        elif key == "aclNameVariable":
            suggest = "acl_name_variable"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in VpnInterfaceDslPppoaFeatureTemplateAccessList. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        VpnInterfaceDslPppoaFeatureTemplateAccessList.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        VpnInterfaceDslPppoaFeatureTemplateAccessList.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 acl_name: Optional[_builtins.str] = None,
                 acl_name_variable: Optional[_builtins.str] = None,
                 direction: Optional[_builtins.str] = None,
                 optional: Optional[_builtins.bool] = None):
        """
        :param _builtins.str acl_name: Name of access list
        :param _builtins.str acl_name_variable: Variable name
        :param _builtins.str direction: Direction
                 - Choices: `in`, `out`
        :param _builtins.bool optional: Indicates if list item is considered optional.
        """
        if acl_name is not None:
            pulumi.set(__self__, "acl_name", acl_name)
        if acl_name_variable is not None:
            pulumi.set(__self__, "acl_name_variable", acl_name_variable)
        if direction is not None:
            pulumi.set(__self__, "direction", direction)
        if optional is not None:
            pulumi.set(__self__, "optional", optional)

    @_builtins.property
    @pulumi.getter(name="aclName")
    def acl_name(self) -> Optional[_builtins.str]:
        """
        Name of access list
        """
        return pulumi.get(self, "acl_name")

    @_builtins.property
    @pulumi.getter(name="aclNameVariable")
    def acl_name_variable(self) -> Optional[_builtins.str]:
        """
        Variable name
        """
        return pulumi.get(self, "acl_name_variable")

    @_builtins.property
    @pulumi.getter
    def direction(self) -> Optional[_builtins.str]:
        """
        Direction
          - Choices: `in`, `out`
        """
        return pulumi.get(self, "direction")

    @_builtins.property
    @pulumi.getter
    def optional(self) -> Optional[_builtins.bool]:
        """
        Indicates if list item is considered optional.
        """
        return pulumi.get(self, "optional")


@pulumi.output_type
class VpnInterfaceDslPppoaFeatureTemplateNatPortForward(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "portEndRange":
            suggest = "port_end_range"
        elif key == "portStartRange":
            suggest = "port_start_range"
        elif key == "privateIpAddress":
            suggest = "private_ip_address"
        elif key == "privateIpAddressVariable":
            suggest = "private_ip_address_variable"
        elif key == "privateVpn":
            suggest = "private_vpn"
        elif key == "privateVpnVariable":
            suggest = "private_vpn_variable"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in VpnInterfaceDslPppoaFeatureTemplateNatPortForward. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        VpnInterfaceDslPppoaFeatureTemplateNatPortForward.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        VpnInterfaceDslPppoaFeatureTemplateNatPortForward.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 optional: Optional[_builtins.bool] = None,
                 port_end_range: Optional[_builtins.int] = None,
                 port_start_range: Optional[_builtins.int] = None,
                 private_ip_address: Optional[_builtins.str] = None,
                 private_ip_address_variable: Optional[_builtins.str] = None,
                 private_vpn: Optional[_builtins.int] = None,
                 private_vpn_variable: Optional[_builtins.str] = None,
                 protocol: Optional[_builtins.str] = None):
        """
        :param _builtins.bool optional: Indicates if list item is considered optional.
        :param _builtins.int port_end_range: Ending port of port range
                 - Range: `0`-`65535`
        :param _builtins.int port_start_range: Starting port of port range
                 - Range: `0`-`65535`
        :param _builtins.str private_ip_address: Private IP Address to translate to
        :param _builtins.str private_ip_address_variable: Variable name
        :param _builtins.int private_vpn: VPN in which private IP Address resides
                 - Range: `0`-`65535`
        :param _builtins.str private_vpn_variable: Variable name
        :param _builtins.str protocol: Layer 4 protocol to apply port forwarding to
                 - Choices: `tcp`, `udp`
        """
        if optional is not None:
            pulumi.set(__self__, "optional", optional)
        if port_end_range is not None:
            pulumi.set(__self__, "port_end_range", port_end_range)
        if port_start_range is not None:
            pulumi.set(__self__, "port_start_range", port_start_range)
        if private_ip_address is not None:
            pulumi.set(__self__, "private_ip_address", private_ip_address)
        if private_ip_address_variable is not None:
            pulumi.set(__self__, "private_ip_address_variable", private_ip_address_variable)
        if private_vpn is not None:
            pulumi.set(__self__, "private_vpn", private_vpn)
        if private_vpn_variable is not None:
            pulumi.set(__self__, "private_vpn_variable", private_vpn_variable)
        if protocol is not None:
            pulumi.set(__self__, "protocol", protocol)

    @_builtins.property
    @pulumi.getter
    def optional(self) -> Optional[_builtins.bool]:
        """
        Indicates if list item is considered optional.
        """
        return pulumi.get(self, "optional")

    @_builtins.property
    @pulumi.getter(name="portEndRange")
    def port_end_range(self) -> Optional[_builtins.int]:
        """
        Ending port of port range
          - Range: `0`-`65535`
        """
        return pulumi.get(self, "port_end_range")

    @_builtins.property
    @pulumi.getter(name="portStartRange")
    def port_start_range(self) -> Optional[_builtins.int]:
        """
        Starting port of port range
          - Range: `0`-`65535`
        """
        return pulumi.get(self, "port_start_range")

    @_builtins.property
    @pulumi.getter(name="privateIpAddress")
    def private_ip_address(self) -> Optional[_builtins.str]:
        """
        Private IP Address to translate to
        """
        return pulumi.get(self, "private_ip_address")

    @_builtins.property
    @pulumi.getter(name="privateIpAddressVariable")
    def private_ip_address_variable(self) -> Optional[_builtins.str]:
        """
        Variable name
        """
        return pulumi.get(self, "private_ip_address_variable")

    @_builtins.property
    @pulumi.getter(name="privateVpn")
    def private_vpn(self) -> Optional[_builtins.int]:
        """
        VPN in which private IP Address resides
          - Range: `0`-`65535`
        """
        return pulumi.get(self, "private_vpn")

    @_builtins.property
    @pulumi.getter(name="privateVpnVariable")
    def private_vpn_variable(self) -> Optional[_builtins.str]:
        """
        Variable name
        """
        return pulumi.get(self, "private_vpn_variable")

    @_builtins.property
    @pulumi.getter
    def protocol(self) -> Optional[_builtins.str]:
        """
        Layer 4 protocol to apply port forwarding to
          - Choices: `tcp`, `udp`
        """
        return pulumi.get(self, "protocol")


@pulumi.output_type
class VpnInterfaceDslPppoaFeatureTemplatePolicer(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "policerName":
            suggest = "policer_name"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in VpnInterfaceDslPppoaFeatureTemplatePolicer. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        VpnInterfaceDslPppoaFeatureTemplatePolicer.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        VpnInterfaceDslPppoaFeatureTemplatePolicer.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 direction: Optional[_builtins.str] = None,
                 optional: Optional[_builtins.bool] = None,
                 policer_name: Optional[_builtins.str] = None):
        """
        :param _builtins.str direction: Direction
                 - Choices: `in`, `out`
        :param _builtins.bool optional: Indicates if list item is considered optional.
        :param _builtins.str policer_name: Name of policer
        """
        if direction is not None:
            pulumi.set(__self__, "direction", direction)
        if optional is not None:
            pulumi.set(__self__, "optional", optional)
        if policer_name is not None:
            pulumi.set(__self__, "policer_name", policer_name)

    @_builtins.property
    @pulumi.getter
    def direction(self) -> Optional[_builtins.str]:
        """
        Direction
          - Choices: `in`, `out`
        """
        return pulumi.get(self, "direction")

    @_builtins.property
    @pulumi.getter
    def optional(self) -> Optional[_builtins.bool]:
        """
        Indicates if list item is considered optional.
        """
        return pulumi.get(self, "optional")

    @_builtins.property
    @pulumi.getter(name="policerName")
    def policer_name(self) -> Optional[_builtins.str]:
        """
        Name of policer
        """
        return pulumi.get(self, "policer_name")


@pulumi.output_type
class VpnInterfaceDslPppoaFeatureTemplatePvc(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "atmDialerPoolMember":
            suggest = "atm_dialer_pool_member"
        elif key == "atmDialerPoolMemberVariable":
            suggest = "atm_dialer_pool_member_variable"
        elif key == "atmEncapsulationAal5mux":
            suggest = "atm_encapsulation_aal5mux"
        elif key == "atmEncapsulationAal5nlpid":
            suggest = "atm_encapsulation_aal5nlpid"
        elif key == "atmEncapsulationAal5snap":
            suggest = "atm_encapsulation_aal5snap"
        elif key == "atmVbrNrtMaximumBurstSize":
            suggest = "atm_vbr_nrt_maximum_burst_size"
        elif key == "atmVbrNrtMaximumBurstSizeVariable":
            suggest = "atm_vbr_nrt_maximum_burst_size_variable"
        elif key == "atmVbrNrtPeakCellRate":
            suggest = "atm_vbr_nrt_peak_cell_rate"
        elif key == "atmVbrNrtPeakCellRateVariable":
            suggest = "atm_vbr_nrt_peak_cell_rate_variable"
        elif key == "atmVbrNrtSustainableCellRate":
            suggest = "atm_vbr_nrt_sustainable_cell_rate"
        elif key == "atmVbrNrtSustainableCellRateVariable":
            suggest = "atm_vbr_nrt_sustainable_cell_rate_variable"
        elif key == "atmVbrRtAverageCellRate":
            suggest = "atm_vbr_rt_average_cell_rate"
        elif key == "atmVbrRtAverageCellRateVariable":
            suggest = "atm_vbr_rt_average_cell_rate_variable"
        elif key == "atmVbrRtMaximumBurstSize":
            suggest = "atm_vbr_rt_maximum_burst_size"
        elif key == "atmVbrRtMaximumBurstSizeVariable":
            suggest = "atm_vbr_rt_maximum_burst_size_variable"
        elif key == "atmVbrRtPeakCellRate":
            suggest = "atm_vbr_rt_peak_cell_rate"
        elif key == "atmVbrRtPeakCellRateVariable":
            suggest = "atm_vbr_rt_peak_cell_rate_variable"
        elif key == "atmVpiAndVci":
            suggest = "atm_vpi_and_vci"
        elif key == "atmVpiAndVciVariable":
            suggest = "atm_vpi_and_vci_variable"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in VpnInterfaceDslPppoaFeatureTemplatePvc. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        VpnInterfaceDslPppoaFeatureTemplatePvc.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        VpnInterfaceDslPppoaFeatureTemplatePvc.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 atm_dialer_pool_member: Optional[_builtins.int] = None,
                 atm_dialer_pool_member_variable: Optional[_builtins.str] = None,
                 atm_encapsulation_aal5mux: Optional[_builtins.bool] = None,
                 atm_encapsulation_aal5nlpid: Optional[_builtins.bool] = None,
                 atm_encapsulation_aal5snap: Optional[_builtins.bool] = None,
                 atm_vbr_nrt_maximum_burst_size: Optional[_builtins.int] = None,
                 atm_vbr_nrt_maximum_burst_size_variable: Optional[_builtins.str] = None,
                 atm_vbr_nrt_peak_cell_rate: Optional[_builtins.int] = None,
                 atm_vbr_nrt_peak_cell_rate_variable: Optional[_builtins.str] = None,
                 atm_vbr_nrt_sustainable_cell_rate: Optional[_builtins.int] = None,
                 atm_vbr_nrt_sustainable_cell_rate_variable: Optional[_builtins.str] = None,
                 atm_vbr_rt_average_cell_rate: Optional[_builtins.int] = None,
                 atm_vbr_rt_average_cell_rate_variable: Optional[_builtins.str] = None,
                 atm_vbr_rt_maximum_burst_size: Optional[_builtins.int] = None,
                 atm_vbr_rt_maximum_burst_size_variable: Optional[_builtins.str] = None,
                 atm_vbr_rt_peak_cell_rate: Optional[_builtins.int] = None,
                 atm_vbr_rt_peak_cell_rate_variable: Optional[_builtins.str] = None,
                 atm_vpi_and_vci: Optional[_builtins.str] = None,
                 atm_vpi_and_vci_variable: Optional[_builtins.str] = None,
                 optional: Optional[_builtins.bool] = None):
        """
        :param _builtins.int atm_dialer_pool_member: Dialer Pool corresponding to this pvc
                 - Range: `1`-`255`
        :param _builtins.str atm_dialer_pool_member_variable: Variable name
        :param _builtins.bool atm_encapsulation_aal5mux: dialer
        :param _builtins.bool atm_encapsulation_aal5nlpid: aal5nlpid
        :param _builtins.bool atm_encapsulation_aal5snap: aal5snap
        :param _builtins.int atm_vbr_nrt_maximum_burst_size: Maximum Burst Size in Cells
                 - Range: `1`-`65535`
        :param _builtins.str atm_vbr_nrt_maximum_burst_size_variable: Variable name
        :param _builtins.int atm_vbr_nrt_peak_cell_rate: Peak Cell Rate in Kbps
                 - Range: `48`-`1015`
        :param _builtins.str atm_vbr_nrt_peak_cell_rate_variable: Variable name
        :param _builtins.int atm_vbr_nrt_sustainable_cell_rate: Peak Cell Rate in Kbps
        :param _builtins.str atm_vbr_nrt_sustainable_cell_rate_variable: Variable name
        :param _builtins.int atm_vbr_rt_average_cell_rate: Average Cell Rate in Kbps
        :param _builtins.str atm_vbr_rt_average_cell_rate_variable: Variable name
        :param _builtins.int atm_vbr_rt_maximum_burst_size: Maximum Burst Size in number of Cells
                 - Range: `1`-`65535`
        :param _builtins.str atm_vbr_rt_maximum_burst_size_variable: Variable name
        :param _builtins.int atm_vbr_rt_peak_cell_rate: Peak Cell Rate in Kbps
                 - Range: `48`-`25000`
        :param _builtins.str atm_vbr_rt_peak_cell_rate_variable: Variable name
        :param _builtins.str atm_vpi_and_vci: VPI/VCI
        :param _builtins.str atm_vpi_and_vci_variable: Variable name
        :param _builtins.bool optional: Indicates if list item is considered optional.
        """
        if atm_dialer_pool_member is not None:
            pulumi.set(__self__, "atm_dialer_pool_member", atm_dialer_pool_member)
        if atm_dialer_pool_member_variable is not None:
            pulumi.set(__self__, "atm_dialer_pool_member_variable", atm_dialer_pool_member_variable)
        if atm_encapsulation_aal5mux is not None:
            pulumi.set(__self__, "atm_encapsulation_aal5mux", atm_encapsulation_aal5mux)
        if atm_encapsulation_aal5nlpid is not None:
            pulumi.set(__self__, "atm_encapsulation_aal5nlpid", atm_encapsulation_aal5nlpid)
        if atm_encapsulation_aal5snap is not None:
            pulumi.set(__self__, "atm_encapsulation_aal5snap", atm_encapsulation_aal5snap)
        if atm_vbr_nrt_maximum_burst_size is not None:
            pulumi.set(__self__, "atm_vbr_nrt_maximum_burst_size", atm_vbr_nrt_maximum_burst_size)
        if atm_vbr_nrt_maximum_burst_size_variable is not None:
            pulumi.set(__self__, "atm_vbr_nrt_maximum_burst_size_variable", atm_vbr_nrt_maximum_burst_size_variable)
        if atm_vbr_nrt_peak_cell_rate is not None:
            pulumi.set(__self__, "atm_vbr_nrt_peak_cell_rate", atm_vbr_nrt_peak_cell_rate)
        if atm_vbr_nrt_peak_cell_rate_variable is not None:
            pulumi.set(__self__, "atm_vbr_nrt_peak_cell_rate_variable", atm_vbr_nrt_peak_cell_rate_variable)
        if atm_vbr_nrt_sustainable_cell_rate is not None:
            pulumi.set(__self__, "atm_vbr_nrt_sustainable_cell_rate", atm_vbr_nrt_sustainable_cell_rate)
        if atm_vbr_nrt_sustainable_cell_rate_variable is not None:
            pulumi.set(__self__, "atm_vbr_nrt_sustainable_cell_rate_variable", atm_vbr_nrt_sustainable_cell_rate_variable)
        if atm_vbr_rt_average_cell_rate is not None:
            pulumi.set(__self__, "atm_vbr_rt_average_cell_rate", atm_vbr_rt_average_cell_rate)
        if atm_vbr_rt_average_cell_rate_variable is not None:
            pulumi.set(__self__, "atm_vbr_rt_average_cell_rate_variable", atm_vbr_rt_average_cell_rate_variable)
        if atm_vbr_rt_maximum_burst_size is not None:
            pulumi.set(__self__, "atm_vbr_rt_maximum_burst_size", atm_vbr_rt_maximum_burst_size)
        if atm_vbr_rt_maximum_burst_size_variable is not None:
            pulumi.set(__self__, "atm_vbr_rt_maximum_burst_size_variable", atm_vbr_rt_maximum_burst_size_variable)
        if atm_vbr_rt_peak_cell_rate is not None:
            pulumi.set(__self__, "atm_vbr_rt_peak_cell_rate", atm_vbr_rt_peak_cell_rate)
        if atm_vbr_rt_peak_cell_rate_variable is not None:
            pulumi.set(__self__, "atm_vbr_rt_peak_cell_rate_variable", atm_vbr_rt_peak_cell_rate_variable)
        if atm_vpi_and_vci is not None:
            pulumi.set(__self__, "atm_vpi_and_vci", atm_vpi_and_vci)
        if atm_vpi_and_vci_variable is not None:
            pulumi.set(__self__, "atm_vpi_and_vci_variable", atm_vpi_and_vci_variable)
        if optional is not None:
            pulumi.set(__self__, "optional", optional)

    @_builtins.property
    @pulumi.getter(name="atmDialerPoolMember")
    def atm_dialer_pool_member(self) -> Optional[_builtins.int]:
        """
        Dialer Pool corresponding to this pvc
          - Range: `1`-`255`
        """
        return pulumi.get(self, "atm_dialer_pool_member")

    @_builtins.property
    @pulumi.getter(name="atmDialerPoolMemberVariable")
    def atm_dialer_pool_member_variable(self) -> Optional[_builtins.str]:
        """
        Variable name
        """
        return pulumi.get(self, "atm_dialer_pool_member_variable")

    @_builtins.property
    @pulumi.getter(name="atmEncapsulationAal5mux")
    def atm_encapsulation_aal5mux(self) -> Optional[_builtins.bool]:
        """
        dialer
        """
        return pulumi.get(self, "atm_encapsulation_aal5mux")

    @_builtins.property
    @pulumi.getter(name="atmEncapsulationAal5nlpid")
    def atm_encapsulation_aal5nlpid(self) -> Optional[_builtins.bool]:
        """
        aal5nlpid
        """
        return pulumi.get(self, "atm_encapsulation_aal5nlpid")

    @_builtins.property
    @pulumi.getter(name="atmEncapsulationAal5snap")
    def atm_encapsulation_aal5snap(self) -> Optional[_builtins.bool]:
        """
        aal5snap
        """
        return pulumi.get(self, "atm_encapsulation_aal5snap")

    @_builtins.property
    @pulumi.getter(name="atmVbrNrtMaximumBurstSize")
    def atm_vbr_nrt_maximum_burst_size(self) -> Optional[_builtins.int]:
        """
        Maximum Burst Size in Cells
          - Range: `1`-`65535`
        """
        return pulumi.get(self, "atm_vbr_nrt_maximum_burst_size")

    @_builtins.property
    @pulumi.getter(name="atmVbrNrtMaximumBurstSizeVariable")
    def atm_vbr_nrt_maximum_burst_size_variable(self) -> Optional[_builtins.str]:
        """
        Variable name
        """
        return pulumi.get(self, "atm_vbr_nrt_maximum_burst_size_variable")

    @_builtins.property
    @pulumi.getter(name="atmVbrNrtPeakCellRate")
    def atm_vbr_nrt_peak_cell_rate(self) -> Optional[_builtins.int]:
        """
        Peak Cell Rate in Kbps
          - Range: `48`-`1015`
        """
        return pulumi.get(self, "atm_vbr_nrt_peak_cell_rate")

    @_builtins.property
    @pulumi.getter(name="atmVbrNrtPeakCellRateVariable")
    def atm_vbr_nrt_peak_cell_rate_variable(self) -> Optional[_builtins.str]:
        """
        Variable name
        """
        return pulumi.get(self, "atm_vbr_nrt_peak_cell_rate_variable")

    @_builtins.property
    @pulumi.getter(name="atmVbrNrtSustainableCellRate")
    def atm_vbr_nrt_sustainable_cell_rate(self) -> Optional[_builtins.int]:
        """
        Peak Cell Rate in Kbps
        """
        return pulumi.get(self, "atm_vbr_nrt_sustainable_cell_rate")

    @_builtins.property
    @pulumi.getter(name="atmVbrNrtSustainableCellRateVariable")
    def atm_vbr_nrt_sustainable_cell_rate_variable(self) -> Optional[_builtins.str]:
        """
        Variable name
        """
        return pulumi.get(self, "atm_vbr_nrt_sustainable_cell_rate_variable")

    @_builtins.property
    @pulumi.getter(name="atmVbrRtAverageCellRate")
    def atm_vbr_rt_average_cell_rate(self) -> Optional[_builtins.int]:
        """
        Average Cell Rate in Kbps
        """
        return pulumi.get(self, "atm_vbr_rt_average_cell_rate")

    @_builtins.property
    @pulumi.getter(name="atmVbrRtAverageCellRateVariable")
    def atm_vbr_rt_average_cell_rate_variable(self) -> Optional[_builtins.str]:
        """
        Variable name
        """
        return pulumi.get(self, "atm_vbr_rt_average_cell_rate_variable")

    @_builtins.property
    @pulumi.getter(name="atmVbrRtMaximumBurstSize")
    def atm_vbr_rt_maximum_burst_size(self) -> Optional[_builtins.int]:
        """
        Maximum Burst Size in number of Cells
          - Range: `1`-`65535`
        """
        return pulumi.get(self, "atm_vbr_rt_maximum_burst_size")

    @_builtins.property
    @pulumi.getter(name="atmVbrRtMaximumBurstSizeVariable")
    def atm_vbr_rt_maximum_burst_size_variable(self) -> Optional[_builtins.str]:
        """
        Variable name
        """
        return pulumi.get(self, "atm_vbr_rt_maximum_burst_size_variable")

    @_builtins.property
    @pulumi.getter(name="atmVbrRtPeakCellRate")
    def atm_vbr_rt_peak_cell_rate(self) -> Optional[_builtins.int]:
        """
        Peak Cell Rate in Kbps
          - Range: `48`-`25000`
        """
        return pulumi.get(self, "atm_vbr_rt_peak_cell_rate")

    @_builtins.property
    @pulumi.getter(name="atmVbrRtPeakCellRateVariable")
    def atm_vbr_rt_peak_cell_rate_variable(self) -> Optional[_builtins.str]:
        """
        Variable name
        """
        return pulumi.get(self, "atm_vbr_rt_peak_cell_rate_variable")

    @_builtins.property
    @pulumi.getter(name="atmVpiAndVci")
    def atm_vpi_and_vci(self) -> Optional[_builtins.str]:
        """
        VPI/VCI
        """
        return pulumi.get(self, "atm_vpi_and_vci")

    @_builtins.property
    @pulumi.getter(name="atmVpiAndVciVariable")
    def atm_vpi_and_vci_variable(self) -> Optional[_builtins.str]:
        """
        Variable name
        """
        return pulumi.get(self, "atm_vpi_and_vci_variable")

    @_builtins.property
    @pulumi.getter
    def optional(self) -> Optional[_builtins.bool]:
        """
        Indicates if list item is considered optional.
        """
        return pulumi.get(self, "optional")


@pulumi.output_type
class VpnInterfaceDslPppoaFeatureTemplateTunnelInterfaceEncapsulation(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "preferenceVariable":
            suggest = "preference_variable"
        elif key == "weightVariable":
            suggest = "weight_variable"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in VpnInterfaceDslPppoaFeatureTemplateTunnelInterfaceEncapsulation. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        VpnInterfaceDslPppoaFeatureTemplateTunnelInterfaceEncapsulation.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        VpnInterfaceDslPppoaFeatureTemplateTunnelInterfaceEncapsulation.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 encapsulation: Optional[_builtins.str] = None,
                 optional: Optional[_builtins.bool] = None,
                 preference: Optional[_builtins.int] = None,
                 preference_variable: Optional[_builtins.str] = None,
                 weight: Optional[_builtins.int] = None,
                 weight_variable: Optional[_builtins.str] = None):
        """
        :param _builtins.str encapsulation: Encapsulation
                 - Choices: `gre`, `ipsec`
        :param _builtins.bool optional: Indicates if list item is considered optional.
        :param _builtins.int preference: Set preference for TLOC
                 - Range: `0`-`4294967295`
        :param _builtins.str preference_variable: Variable name
        :param _builtins.int weight: Set weight for TLOC
                 - Range: `1`-`255`
                 - Default value: `1`
        :param _builtins.str weight_variable: Variable name
        """
        if encapsulation is not None:
            pulumi.set(__self__, "encapsulation", encapsulation)
        if optional is not None:
            pulumi.set(__self__, "optional", optional)
        if preference is not None:
            pulumi.set(__self__, "preference", preference)
        if preference_variable is not None:
            pulumi.set(__self__, "preference_variable", preference_variable)
        if weight is not None:
            pulumi.set(__self__, "weight", weight)
        if weight_variable is not None:
            pulumi.set(__self__, "weight_variable", weight_variable)

    @_builtins.property
    @pulumi.getter
    def encapsulation(self) -> Optional[_builtins.str]:
        """
        Encapsulation
          - Choices: `gre`, `ipsec`
        """
        return pulumi.get(self, "encapsulation")

    @_builtins.property
    @pulumi.getter
    def optional(self) -> Optional[_builtins.bool]:
        """
        Indicates if list item is considered optional.
        """
        return pulumi.get(self, "optional")

    @_builtins.property
    @pulumi.getter
    def preference(self) -> Optional[_builtins.int]:
        """
        Set preference for TLOC
          - Range: `0`-`4294967295`
        """
        return pulumi.get(self, "preference")

    @_builtins.property
    @pulumi.getter(name="preferenceVariable")
    def preference_variable(self) -> Optional[_builtins.str]:
        """
        Variable name
        """
        return pulumi.get(self, "preference_variable")

    @_builtins.property
    @pulumi.getter
    def weight(self) -> Optional[_builtins.int]:
        """
        Set weight for TLOC
          - Range: `1`-`255`
          - Default value: `1`
        """
        return pulumi.get(self, "weight")

    @_builtins.property
    @pulumi.getter(name="weightVariable")
    def weight_variable(self) -> Optional[_builtins.str]:
        """
        Variable name
        """
        return pulumi.get(self, "weight_variable")


@pulumi.output_type
class VpnInterfaceDslPppoaFeatureTemplateVdslConfiguration(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "controllerVdslSlot":
            suggest = "controller_vdsl_slot"
        elif key == "controllerVdslSlotVariable":
            suggest = "controller_vdsl_slot_variable"
        elif key == "modeAdsl1":
            suggest = "mode_adsl1"
        elif key == "modeAdsl2":
            suggest = "mode_adsl2"
        elif key == "modeAdsl2plus":
            suggest = "mode_adsl2plus"
        elif key == "modeAnsi":
            suggest = "mode_ansi"
        elif key == "modeVdsl2":
            suggest = "mode_vdsl2"
        elif key == "vdslModemConfiguration":
            suggest = "vdsl_modem_configuration"
        elif key == "vdslModemConfigurationVariable":
            suggest = "vdsl_modem_configuration_variable"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in VpnInterfaceDslPppoaFeatureTemplateVdslConfiguration. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        VpnInterfaceDslPppoaFeatureTemplateVdslConfiguration.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        VpnInterfaceDslPppoaFeatureTemplateVdslConfiguration.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 controller_vdsl_slot: Optional[_builtins.str] = None,
                 controller_vdsl_slot_variable: Optional[_builtins.str] = None,
                 mode_adsl1: Optional[_builtins.bool] = None,
                 mode_adsl2: Optional[_builtins.bool] = None,
                 mode_adsl2plus: Optional[_builtins.bool] = None,
                 mode_ansi: Optional[_builtins.bool] = None,
                 mode_vdsl2: Optional[_builtins.bool] = None,
                 optional: Optional[_builtins.bool] = None,
                 sra: Optional[_builtins.bool] = None,
                 vdsl_modem_configuration: Optional[_builtins.str] = None,
                 vdsl_modem_configuration_variable: Optional[_builtins.str] = None):
        """
        :param _builtins.str controller_vdsl_slot: Set module slot/subslot/port number
        :param _builtins.str controller_vdsl_slot_variable: Variable name
        :param _builtins.bool mode_adsl1: Set VDSL operating mode to adsl1
                 - Default value: `false`
        :param _builtins.bool mode_adsl2: Set VDSL operating mode to adsl2
                 - Default value: `false`
        :param _builtins.bool mode_adsl2plus: Set VDSL operating mode to adsl2plus
                 - Default value: `false`
        :param _builtins.bool mode_ansi: Set VDSL operating mode to ansi
                 - Default value: `false`
        :param _builtins.bool mode_vdsl2: Set VDSL operating mode to vdsl2
                 - Default value: `false`
        :param _builtins.bool optional: Indicates if list item is considered optional.
        :param _builtins.bool sra: Seamless rate adaption
                 - Default value: `true`
        :param _builtins.str vdsl_modem_configuration: Set module slot/subslot/port number
        :param _builtins.str vdsl_modem_configuration_variable: Variable name
        """
        if controller_vdsl_slot is not None:
            pulumi.set(__self__, "controller_vdsl_slot", controller_vdsl_slot)
        if controller_vdsl_slot_variable is not None:
            pulumi.set(__self__, "controller_vdsl_slot_variable", controller_vdsl_slot_variable)
        if mode_adsl1 is not None:
            pulumi.set(__self__, "mode_adsl1", mode_adsl1)
        if mode_adsl2 is not None:
            pulumi.set(__self__, "mode_adsl2", mode_adsl2)
        if mode_adsl2plus is not None:
            pulumi.set(__self__, "mode_adsl2plus", mode_adsl2plus)
        if mode_ansi is not None:
            pulumi.set(__self__, "mode_ansi", mode_ansi)
        if mode_vdsl2 is not None:
            pulumi.set(__self__, "mode_vdsl2", mode_vdsl2)
        if optional is not None:
            pulumi.set(__self__, "optional", optional)
        if sra is not None:
            pulumi.set(__self__, "sra", sra)
        if vdsl_modem_configuration is not None:
            pulumi.set(__self__, "vdsl_modem_configuration", vdsl_modem_configuration)
        if vdsl_modem_configuration_variable is not None:
            pulumi.set(__self__, "vdsl_modem_configuration_variable", vdsl_modem_configuration_variable)

    @_builtins.property
    @pulumi.getter(name="controllerVdslSlot")
    def controller_vdsl_slot(self) -> Optional[_builtins.str]:
        """
        Set module slot/subslot/port number
        """
        return pulumi.get(self, "controller_vdsl_slot")

    @_builtins.property
    @pulumi.getter(name="controllerVdslSlotVariable")
    def controller_vdsl_slot_variable(self) -> Optional[_builtins.str]:
        """
        Variable name
        """
        return pulumi.get(self, "controller_vdsl_slot_variable")

    @_builtins.property
    @pulumi.getter(name="modeAdsl1")
    def mode_adsl1(self) -> Optional[_builtins.bool]:
        """
        Set VDSL operating mode to adsl1
          - Default value: `false`
        """
        return pulumi.get(self, "mode_adsl1")

    @_builtins.property
    @pulumi.getter(name="modeAdsl2")
    def mode_adsl2(self) -> Optional[_builtins.bool]:
        """
        Set VDSL operating mode to adsl2
          - Default value: `false`
        """
        return pulumi.get(self, "mode_adsl2")

    @_builtins.property
    @pulumi.getter(name="modeAdsl2plus")
    def mode_adsl2plus(self) -> Optional[_builtins.bool]:
        """
        Set VDSL operating mode to adsl2plus
          - Default value: `false`
        """
        return pulumi.get(self, "mode_adsl2plus")

    @_builtins.property
    @pulumi.getter(name="modeAnsi")
    def mode_ansi(self) -> Optional[_builtins.bool]:
        """
        Set VDSL operating mode to ansi
          - Default value: `false`
        """
        return pulumi.get(self, "mode_ansi")

    @_builtins.property
    @pulumi.getter(name="modeVdsl2")
    def mode_vdsl2(self) -> Optional[_builtins.bool]:
        """
        Set VDSL operating mode to vdsl2
          - Default value: `false`
        """
        return pulumi.get(self, "mode_vdsl2")

    @_builtins.property
    @pulumi.getter
    def optional(self) -> Optional[_builtins.bool]:
        """
        Indicates if list item is considered optional.
        """
        return pulumi.get(self, "optional")

    @_builtins.property
    @pulumi.getter
    def sra(self) -> Optional[_builtins.bool]:
        """
        Seamless rate adaption
          - Default value: `true`
        """
        return pulumi.get(self, "sra")

    @_builtins.property
    @pulumi.getter(name="vdslModemConfiguration")
    def vdsl_modem_configuration(self) -> Optional[_builtins.str]:
        """
        Set module slot/subslot/port number
        """
        return pulumi.get(self, "vdsl_modem_configuration")

    @_builtins.property
    @pulumi.getter(name="vdslModemConfigurationVariable")
    def vdsl_modem_configuration_variable(self) -> Optional[_builtins.str]:
        """
        Variable name
        """
        return pulumi.get(self, "vdsl_modem_configuration_variable")


@pulumi.output_type
class VpnInterfaceDslPppoeFeatureTemplateAccessList(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "aclName":
            suggest = "acl_name"
        elif key == "aclNameVariable":
            suggest = "acl_name_variable"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in VpnInterfaceDslPppoeFeatureTemplateAccessList. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        VpnInterfaceDslPppoeFeatureTemplateAccessList.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        VpnInterfaceDslPppoeFeatureTemplateAccessList.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 acl_name: Optional[_builtins.str] = None,
                 acl_name_variable: Optional[_builtins.str] = None,
                 direction: Optional[_builtins.str] = None,
                 optional: Optional[_builtins.bool] = None):
        """
        :param _builtins.str acl_name: Name of access list
        :param _builtins.str acl_name_variable: Variable name
        :param _builtins.str direction: Direction
                 - Choices: `in`, `out`
        :param _builtins.bool optional: Indicates if list item is considered optional.
        """
        if acl_name is not None:
            pulumi.set(__self__, "acl_name", acl_name)
        if acl_name_variable is not None:
            pulumi.set(__self__, "acl_name_variable", acl_name_variable)
        if direction is not None:
            pulumi.set(__self__, "direction", direction)
        if optional is not None:
            pulumi.set(__self__, "optional", optional)

    @_builtins.property
    @pulumi.getter(name="aclName")
    def acl_name(self) -> Optional[_builtins.str]:
        """
        Name of access list
        """
        return pulumi.get(self, "acl_name")

    @_builtins.property
    @pulumi.getter(name="aclNameVariable")
    def acl_name_variable(self) -> Optional[_builtins.str]:
        """
        Variable name
        """
        return pulumi.get(self, "acl_name_variable")

    @_builtins.property
    @pulumi.getter
    def direction(self) -> Optional[_builtins.str]:
        """
        Direction
          - Choices: `in`, `out`
        """
        return pulumi.get(self, "direction")

    @_builtins.property
    @pulumi.getter
    def optional(self) -> Optional[_builtins.bool]:
        """
        Indicates if list item is considered optional.
        """
        return pulumi.get(self, "optional")


@pulumi.output_type
class VpnInterfaceDslPppoeFeatureTemplateNatPortForward(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "portEndRange":
            suggest = "port_end_range"
        elif key == "portStartRange":
            suggest = "port_start_range"
        elif key == "privateIpAddress":
            suggest = "private_ip_address"
        elif key == "privateIpAddressVariable":
            suggest = "private_ip_address_variable"
        elif key == "privateVpn":
            suggest = "private_vpn"
        elif key == "privateVpnVariable":
            suggest = "private_vpn_variable"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in VpnInterfaceDslPppoeFeatureTemplateNatPortForward. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        VpnInterfaceDslPppoeFeatureTemplateNatPortForward.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        VpnInterfaceDslPppoeFeatureTemplateNatPortForward.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 optional: Optional[_builtins.bool] = None,
                 port_end_range: Optional[_builtins.int] = None,
                 port_start_range: Optional[_builtins.int] = None,
                 private_ip_address: Optional[_builtins.str] = None,
                 private_ip_address_variable: Optional[_builtins.str] = None,
                 private_vpn: Optional[_builtins.int] = None,
                 private_vpn_variable: Optional[_builtins.str] = None,
                 protocol: Optional[_builtins.str] = None):
        """
        :param _builtins.bool optional: Indicates if list item is considered optional.
        :param _builtins.int port_end_range: Ending port of port range
                 - Range: `0`-`65535`
        :param _builtins.int port_start_range: Starting port of port range
                 - Range: `0`-`65535`
        :param _builtins.str private_ip_address: Private IP Address to translate to
        :param _builtins.str private_ip_address_variable: Variable name
        :param _builtins.int private_vpn: VPN in which private IP Address resides
                 - Range: `0`-`65535`
        :param _builtins.str private_vpn_variable: Variable name
        :param _builtins.str protocol: Layer 4 protocol to apply port forwarding to
                 - Choices: `tcp`, `udp`
        """
        if optional is not None:
            pulumi.set(__self__, "optional", optional)
        if port_end_range is not None:
            pulumi.set(__self__, "port_end_range", port_end_range)
        if port_start_range is not None:
            pulumi.set(__self__, "port_start_range", port_start_range)
        if private_ip_address is not None:
            pulumi.set(__self__, "private_ip_address", private_ip_address)
        if private_ip_address_variable is not None:
            pulumi.set(__self__, "private_ip_address_variable", private_ip_address_variable)
        if private_vpn is not None:
            pulumi.set(__self__, "private_vpn", private_vpn)
        if private_vpn_variable is not None:
            pulumi.set(__self__, "private_vpn_variable", private_vpn_variable)
        if protocol is not None:
            pulumi.set(__self__, "protocol", protocol)

    @_builtins.property
    @pulumi.getter
    def optional(self) -> Optional[_builtins.bool]:
        """
        Indicates if list item is considered optional.
        """
        return pulumi.get(self, "optional")

    @_builtins.property
    @pulumi.getter(name="portEndRange")
    def port_end_range(self) -> Optional[_builtins.int]:
        """
        Ending port of port range
          - Range: `0`-`65535`
        """
        return pulumi.get(self, "port_end_range")

    @_builtins.property
    @pulumi.getter(name="portStartRange")
    def port_start_range(self) -> Optional[_builtins.int]:
        """
        Starting port of port range
          - Range: `0`-`65535`
        """
        return pulumi.get(self, "port_start_range")

    @_builtins.property
    @pulumi.getter(name="privateIpAddress")
    def private_ip_address(self) -> Optional[_builtins.str]:
        """
        Private IP Address to translate to
        """
        return pulumi.get(self, "private_ip_address")

    @_builtins.property
    @pulumi.getter(name="privateIpAddressVariable")
    def private_ip_address_variable(self) -> Optional[_builtins.str]:
        """
        Variable name
        """
        return pulumi.get(self, "private_ip_address_variable")

    @_builtins.property
    @pulumi.getter(name="privateVpn")
    def private_vpn(self) -> Optional[_builtins.int]:
        """
        VPN in which private IP Address resides
          - Range: `0`-`65535`
        """
        return pulumi.get(self, "private_vpn")

    @_builtins.property
    @pulumi.getter(name="privateVpnVariable")
    def private_vpn_variable(self) -> Optional[_builtins.str]:
        """
        Variable name
        """
        return pulumi.get(self, "private_vpn_variable")

    @_builtins.property
    @pulumi.getter
    def protocol(self) -> Optional[_builtins.str]:
        """
        Layer 4 protocol to apply port forwarding to
          - Choices: `tcp`, `udp`
        """
        return pulumi.get(self, "protocol")


@pulumi.output_type
class VpnInterfaceDslPppoeFeatureTemplatePolicer(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "policerName":
            suggest = "policer_name"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in VpnInterfaceDslPppoeFeatureTemplatePolicer. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        VpnInterfaceDslPppoeFeatureTemplatePolicer.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        VpnInterfaceDslPppoeFeatureTemplatePolicer.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 direction: Optional[_builtins.str] = None,
                 optional: Optional[_builtins.bool] = None,
                 policer_name: Optional[_builtins.str] = None):
        """
        :param _builtins.str direction: Direction
                 - Choices: `in`, `out`
        :param _builtins.bool optional: Indicates if list item is considered optional.
        :param _builtins.str policer_name: Name of policer
        """
        if direction is not None:
            pulumi.set(__self__, "direction", direction)
        if optional is not None:
            pulumi.set(__self__, "optional", optional)
        if policer_name is not None:
            pulumi.set(__self__, "policer_name", policer_name)

    @_builtins.property
    @pulumi.getter
    def direction(self) -> Optional[_builtins.str]:
        """
        Direction
          - Choices: `in`, `out`
        """
        return pulumi.get(self, "direction")

    @_builtins.property
    @pulumi.getter
    def optional(self) -> Optional[_builtins.bool]:
        """
        Indicates if list item is considered optional.
        """
        return pulumi.get(self, "optional")

    @_builtins.property
    @pulumi.getter(name="policerName")
    def policer_name(self) -> Optional[_builtins.str]:
        """
        Name of policer
        """
        return pulumi.get(self, "policer_name")


@pulumi.output_type
class VpnInterfaceDslPppoeFeatureTemplateTunnelInterfaceEncapsulation(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "preferenceVariable":
            suggest = "preference_variable"
        elif key == "weightVariable":
            suggest = "weight_variable"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in VpnInterfaceDslPppoeFeatureTemplateTunnelInterfaceEncapsulation. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        VpnInterfaceDslPppoeFeatureTemplateTunnelInterfaceEncapsulation.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        VpnInterfaceDslPppoeFeatureTemplateTunnelInterfaceEncapsulation.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 encapsulation: Optional[_builtins.str] = None,
                 optional: Optional[_builtins.bool] = None,
                 preference: Optional[_builtins.int] = None,
                 preference_variable: Optional[_builtins.str] = None,
                 weight: Optional[_builtins.int] = None,
                 weight_variable: Optional[_builtins.str] = None):
        """
        :param _builtins.str encapsulation: Encapsulation
                 - Choices: `gre`, `ipsec`
        :param _builtins.bool optional: Indicates if list item is considered optional.
        :param _builtins.int preference: Set preference for TLOC
                 - Range: `0`-`4294967295`
        :param _builtins.str preference_variable: Variable name
        :param _builtins.int weight: Set weight for TLOC
                 - Range: `1`-`255`
                 - Default value: `1`
        :param _builtins.str weight_variable: Variable name
        """
        if encapsulation is not None:
            pulumi.set(__self__, "encapsulation", encapsulation)
        if optional is not None:
            pulumi.set(__self__, "optional", optional)
        if preference is not None:
            pulumi.set(__self__, "preference", preference)
        if preference_variable is not None:
            pulumi.set(__self__, "preference_variable", preference_variable)
        if weight is not None:
            pulumi.set(__self__, "weight", weight)
        if weight_variable is not None:
            pulumi.set(__self__, "weight_variable", weight_variable)

    @_builtins.property
    @pulumi.getter
    def encapsulation(self) -> Optional[_builtins.str]:
        """
        Encapsulation
          - Choices: `gre`, `ipsec`
        """
        return pulumi.get(self, "encapsulation")

    @_builtins.property
    @pulumi.getter
    def optional(self) -> Optional[_builtins.bool]:
        """
        Indicates if list item is considered optional.
        """
        return pulumi.get(self, "optional")

    @_builtins.property
    @pulumi.getter
    def preference(self) -> Optional[_builtins.int]:
        """
        Set preference for TLOC
          - Range: `0`-`4294967295`
        """
        return pulumi.get(self, "preference")

    @_builtins.property
    @pulumi.getter(name="preferenceVariable")
    def preference_variable(self) -> Optional[_builtins.str]:
        """
        Variable name
        """
        return pulumi.get(self, "preference_variable")

    @_builtins.property
    @pulumi.getter
    def weight(self) -> Optional[_builtins.int]:
        """
        Set weight for TLOC
          - Range: `1`-`255`
          - Default value: `1`
        """
        return pulumi.get(self, "weight")

    @_builtins.property
    @pulumi.getter(name="weightVariable")
    def weight_variable(self) -> Optional[_builtins.str]:
        """
        Variable name
        """
        return pulumi.get(self, "weight_variable")


@pulumi.output_type
class VpnInterfaceDslPppoeFeatureTemplateVdslConfiguration(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "controllerVdslSlot":
            suggest = "controller_vdsl_slot"
        elif key == "controllerVdslSlotVariable":
            suggest = "controller_vdsl_slot_variable"
        elif key == "modeAdsl1":
            suggest = "mode_adsl1"
        elif key == "modeAdsl2":
            suggest = "mode_adsl2"
        elif key == "modeAdsl2plus":
            suggest = "mode_adsl2plus"
        elif key == "modeAnsi":
            suggest = "mode_ansi"
        elif key == "modeVdsl2":
            suggest = "mode_vdsl2"
        elif key == "vdslModemConfiguration":
            suggest = "vdsl_modem_configuration"
        elif key == "vdslModemConfigurationVariable":
            suggest = "vdsl_modem_configuration_variable"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in VpnInterfaceDslPppoeFeatureTemplateVdslConfiguration. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        VpnInterfaceDslPppoeFeatureTemplateVdslConfiguration.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        VpnInterfaceDslPppoeFeatureTemplateVdslConfiguration.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 controller_vdsl_slot: Optional[_builtins.str] = None,
                 controller_vdsl_slot_variable: Optional[_builtins.str] = None,
                 mode_adsl1: Optional[_builtins.bool] = None,
                 mode_adsl2: Optional[_builtins.bool] = None,
                 mode_adsl2plus: Optional[_builtins.bool] = None,
                 mode_ansi: Optional[_builtins.bool] = None,
                 mode_vdsl2: Optional[_builtins.bool] = None,
                 optional: Optional[_builtins.bool] = None,
                 sra: Optional[_builtins.bool] = None,
                 vdsl_modem_configuration: Optional[_builtins.str] = None,
                 vdsl_modem_configuration_variable: Optional[_builtins.str] = None):
        """
        :param _builtins.str controller_vdsl_slot: Set module slot/subslot/port number
        :param _builtins.str controller_vdsl_slot_variable: Variable name
        :param _builtins.bool mode_adsl1: Set VDSL operating mode to adsl1
                 - Default value: `false`
        :param _builtins.bool mode_adsl2: Set VDSL operating mode to adsl2
                 - Default value: `false`
        :param _builtins.bool mode_adsl2plus: Set VDSL operating mode to adsl2plus
                 - Default value: `false`
        :param _builtins.bool mode_ansi: Set VDSL operating mode to ansi
                 - Default value: `false`
        :param _builtins.bool mode_vdsl2: Set VDSL operating mode to vdsl2
                 - Default value: `false`
        :param _builtins.bool optional: Indicates if list item is considered optional.
        :param _builtins.bool sra: Seamless rate adaption
                 - Default value: `true`
        :param _builtins.str vdsl_modem_configuration: Set module slot/subslot/port number
        :param _builtins.str vdsl_modem_configuration_variable: Variable name
        """
        if controller_vdsl_slot is not None:
            pulumi.set(__self__, "controller_vdsl_slot", controller_vdsl_slot)
        if controller_vdsl_slot_variable is not None:
            pulumi.set(__self__, "controller_vdsl_slot_variable", controller_vdsl_slot_variable)
        if mode_adsl1 is not None:
            pulumi.set(__self__, "mode_adsl1", mode_adsl1)
        if mode_adsl2 is not None:
            pulumi.set(__self__, "mode_adsl2", mode_adsl2)
        if mode_adsl2plus is not None:
            pulumi.set(__self__, "mode_adsl2plus", mode_adsl2plus)
        if mode_ansi is not None:
            pulumi.set(__self__, "mode_ansi", mode_ansi)
        if mode_vdsl2 is not None:
            pulumi.set(__self__, "mode_vdsl2", mode_vdsl2)
        if optional is not None:
            pulumi.set(__self__, "optional", optional)
        if sra is not None:
            pulumi.set(__self__, "sra", sra)
        if vdsl_modem_configuration is not None:
            pulumi.set(__self__, "vdsl_modem_configuration", vdsl_modem_configuration)
        if vdsl_modem_configuration_variable is not None:
            pulumi.set(__self__, "vdsl_modem_configuration_variable", vdsl_modem_configuration_variable)

    @_builtins.property
    @pulumi.getter(name="controllerVdslSlot")
    def controller_vdsl_slot(self) -> Optional[_builtins.str]:
        """
        Set module slot/subslot/port number
        """
        return pulumi.get(self, "controller_vdsl_slot")

    @_builtins.property
    @pulumi.getter(name="controllerVdslSlotVariable")
    def controller_vdsl_slot_variable(self) -> Optional[_builtins.str]:
        """
        Variable name
        """
        return pulumi.get(self, "controller_vdsl_slot_variable")

    @_builtins.property
    @pulumi.getter(name="modeAdsl1")
    def mode_adsl1(self) -> Optional[_builtins.bool]:
        """
        Set VDSL operating mode to adsl1
          - Default value: `false`
        """
        return pulumi.get(self, "mode_adsl1")

    @_builtins.property
    @pulumi.getter(name="modeAdsl2")
    def mode_adsl2(self) -> Optional[_builtins.bool]:
        """
        Set VDSL operating mode to adsl2
          - Default value: `false`
        """
        return pulumi.get(self, "mode_adsl2")

    @_builtins.property
    @pulumi.getter(name="modeAdsl2plus")
    def mode_adsl2plus(self) -> Optional[_builtins.bool]:
        """
        Set VDSL operating mode to adsl2plus
          - Default value: `false`
        """
        return pulumi.get(self, "mode_adsl2plus")

    @_builtins.property
    @pulumi.getter(name="modeAnsi")
    def mode_ansi(self) -> Optional[_builtins.bool]:
        """
        Set VDSL operating mode to ansi
          - Default value: `false`
        """
        return pulumi.get(self, "mode_ansi")

    @_builtins.property
    @pulumi.getter(name="modeVdsl2")
    def mode_vdsl2(self) -> Optional[_builtins.bool]:
        """
        Set VDSL operating mode to vdsl2
          - Default value: `false`
        """
        return pulumi.get(self, "mode_vdsl2")

    @_builtins.property
    @pulumi.getter
    def optional(self) -> Optional[_builtins.bool]:
        """
        Indicates if list item is considered optional.
        """
        return pulumi.get(self, "optional")

    @_builtins.property
    @pulumi.getter
    def sra(self) -> Optional[_builtins.bool]:
        """
        Seamless rate adaption
          - Default value: `true`
        """
        return pulumi.get(self, "sra")

    @_builtins.property
    @pulumi.getter(name="vdslModemConfiguration")
    def vdsl_modem_configuration(self) -> Optional[_builtins.str]:
        """
        Set module slot/subslot/port number
        """
        return pulumi.get(self, "vdsl_modem_configuration")

    @_builtins.property
    @pulumi.getter(name="vdslModemConfigurationVariable")
    def vdsl_modem_configuration_variable(self) -> Optional[_builtins.str]:
        """
        Variable name
        """
        return pulumi.get(self, "vdsl_modem_configuration_variable")


@pulumi.output_type
class VpnInterfaceEthernetPppoeFeatureTemplateAccessList(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "aclName":
            suggest = "acl_name"
        elif key == "aclNameVariable":
            suggest = "acl_name_variable"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in VpnInterfaceEthernetPppoeFeatureTemplateAccessList. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        VpnInterfaceEthernetPppoeFeatureTemplateAccessList.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        VpnInterfaceEthernetPppoeFeatureTemplateAccessList.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 acl_name: Optional[_builtins.str] = None,
                 acl_name_variable: Optional[_builtins.str] = None,
                 direction: Optional[_builtins.str] = None,
                 optional: Optional[_builtins.bool] = None):
        """
        :param _builtins.str acl_name: Name of access list
        :param _builtins.str acl_name_variable: Variable name
        :param _builtins.str direction: Direction
                 - Choices: `in`, `out`
        :param _builtins.bool optional: Indicates if list item is considered optional.
        """
        if acl_name is not None:
            pulumi.set(__self__, "acl_name", acl_name)
        if acl_name_variable is not None:
            pulumi.set(__self__, "acl_name_variable", acl_name_variable)
        if direction is not None:
            pulumi.set(__self__, "direction", direction)
        if optional is not None:
            pulumi.set(__self__, "optional", optional)

    @_builtins.property
    @pulumi.getter(name="aclName")
    def acl_name(self) -> Optional[_builtins.str]:
        """
        Name of access list
        """
        return pulumi.get(self, "acl_name")

    @_builtins.property
    @pulumi.getter(name="aclNameVariable")
    def acl_name_variable(self) -> Optional[_builtins.str]:
        """
        Variable name
        """
        return pulumi.get(self, "acl_name_variable")

    @_builtins.property
    @pulumi.getter
    def direction(self) -> Optional[_builtins.str]:
        """
        Direction
          - Choices: `in`, `out`
        """
        return pulumi.get(self, "direction")

    @_builtins.property
    @pulumi.getter
    def optional(self) -> Optional[_builtins.bool]:
        """
        Indicates if list item is considered optional.
        """
        return pulumi.get(self, "optional")


@pulumi.output_type
class VpnInterfaceEthernetPppoeFeatureTemplateNatPortForward(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "portEndRange":
            suggest = "port_end_range"
        elif key == "portStartRange":
            suggest = "port_start_range"
        elif key == "privateIpAddress":
            suggest = "private_ip_address"
        elif key == "privateIpAddressVariable":
            suggest = "private_ip_address_variable"
        elif key == "privateVpn":
            suggest = "private_vpn"
        elif key == "privateVpnVariable":
            suggest = "private_vpn_variable"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in VpnInterfaceEthernetPppoeFeatureTemplateNatPortForward. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        VpnInterfaceEthernetPppoeFeatureTemplateNatPortForward.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        VpnInterfaceEthernetPppoeFeatureTemplateNatPortForward.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 optional: Optional[_builtins.bool] = None,
                 port_end_range: Optional[_builtins.int] = None,
                 port_start_range: Optional[_builtins.int] = None,
                 private_ip_address: Optional[_builtins.str] = None,
                 private_ip_address_variable: Optional[_builtins.str] = None,
                 private_vpn: Optional[_builtins.int] = None,
                 private_vpn_variable: Optional[_builtins.str] = None,
                 protocol: Optional[_builtins.str] = None):
        """
        :param _builtins.bool optional: Indicates if list item is considered optional.
        :param _builtins.int port_end_range: Ending port of port range
                 - Range: `0`-`65535`
        :param _builtins.int port_start_range: Starting port of port range
                 - Range: `0`-`65535`
        :param _builtins.str private_ip_address: Private IP Address to translate to
        :param _builtins.str private_ip_address_variable: Variable name
        :param _builtins.int private_vpn: VPN in which private IP Address resides
                 - Range: `0`-`65535`
        :param _builtins.str private_vpn_variable: Variable name
        :param _builtins.str protocol: Layer 4 protocol to apply port forwarding to
                 - Choices: `tcp`, `udp`
        """
        if optional is not None:
            pulumi.set(__self__, "optional", optional)
        if port_end_range is not None:
            pulumi.set(__self__, "port_end_range", port_end_range)
        if port_start_range is not None:
            pulumi.set(__self__, "port_start_range", port_start_range)
        if private_ip_address is not None:
            pulumi.set(__self__, "private_ip_address", private_ip_address)
        if private_ip_address_variable is not None:
            pulumi.set(__self__, "private_ip_address_variable", private_ip_address_variable)
        if private_vpn is not None:
            pulumi.set(__self__, "private_vpn", private_vpn)
        if private_vpn_variable is not None:
            pulumi.set(__self__, "private_vpn_variable", private_vpn_variable)
        if protocol is not None:
            pulumi.set(__self__, "protocol", protocol)

    @_builtins.property
    @pulumi.getter
    def optional(self) -> Optional[_builtins.bool]:
        """
        Indicates if list item is considered optional.
        """
        return pulumi.get(self, "optional")

    @_builtins.property
    @pulumi.getter(name="portEndRange")
    def port_end_range(self) -> Optional[_builtins.int]:
        """
        Ending port of port range
          - Range: `0`-`65535`
        """
        return pulumi.get(self, "port_end_range")

    @_builtins.property
    @pulumi.getter(name="portStartRange")
    def port_start_range(self) -> Optional[_builtins.int]:
        """
        Starting port of port range
          - Range: `0`-`65535`
        """
        return pulumi.get(self, "port_start_range")

    @_builtins.property
    @pulumi.getter(name="privateIpAddress")
    def private_ip_address(self) -> Optional[_builtins.str]:
        """
        Private IP Address to translate to
        """
        return pulumi.get(self, "private_ip_address")

    @_builtins.property
    @pulumi.getter(name="privateIpAddressVariable")
    def private_ip_address_variable(self) -> Optional[_builtins.str]:
        """
        Variable name
        """
        return pulumi.get(self, "private_ip_address_variable")

    @_builtins.property
    @pulumi.getter(name="privateVpn")
    def private_vpn(self) -> Optional[_builtins.int]:
        """
        VPN in which private IP Address resides
          - Range: `0`-`65535`
        """
        return pulumi.get(self, "private_vpn")

    @_builtins.property
    @pulumi.getter(name="privateVpnVariable")
    def private_vpn_variable(self) -> Optional[_builtins.str]:
        """
        Variable name
        """
        return pulumi.get(self, "private_vpn_variable")

    @_builtins.property
    @pulumi.getter
    def protocol(self) -> Optional[_builtins.str]:
        """
        Layer 4 protocol to apply port forwarding to
          - Choices: `tcp`, `udp`
        """
        return pulumi.get(self, "protocol")


@pulumi.output_type
class VpnInterfaceEthernetPppoeFeatureTemplatePolicer(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "policerName":
            suggest = "policer_name"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in VpnInterfaceEthernetPppoeFeatureTemplatePolicer. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        VpnInterfaceEthernetPppoeFeatureTemplatePolicer.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        VpnInterfaceEthernetPppoeFeatureTemplatePolicer.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 direction: Optional[_builtins.str] = None,
                 optional: Optional[_builtins.bool] = None,
                 policer_name: Optional[_builtins.str] = None):
        """
        :param _builtins.str direction: Direction
                 - Choices: `in`, `out`
        :param _builtins.bool optional: Indicates if list item is considered optional.
        :param _builtins.str policer_name: Name of policer
        """
        if direction is not None:
            pulumi.set(__self__, "direction", direction)
        if optional is not None:
            pulumi.set(__self__, "optional", optional)
        if policer_name is not None:
            pulumi.set(__self__, "policer_name", policer_name)

    @_builtins.property
    @pulumi.getter
    def direction(self) -> Optional[_builtins.str]:
        """
        Direction
          - Choices: `in`, `out`
        """
        return pulumi.get(self, "direction")

    @_builtins.property
    @pulumi.getter
    def optional(self) -> Optional[_builtins.bool]:
        """
        Indicates if list item is considered optional.
        """
        return pulumi.get(self, "optional")

    @_builtins.property
    @pulumi.getter(name="policerName")
    def policer_name(self) -> Optional[_builtins.str]:
        """
        Name of policer
        """
        return pulumi.get(self, "policer_name")


@pulumi.output_type
class VpnInterfaceEthernetPppoeFeatureTemplateTunnelInterfaceEncapsulation(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "preferenceVariable":
            suggest = "preference_variable"
        elif key == "weightVariable":
            suggest = "weight_variable"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in VpnInterfaceEthernetPppoeFeatureTemplateTunnelInterfaceEncapsulation. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        VpnInterfaceEthernetPppoeFeatureTemplateTunnelInterfaceEncapsulation.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        VpnInterfaceEthernetPppoeFeatureTemplateTunnelInterfaceEncapsulation.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 encapsulation: Optional[_builtins.str] = None,
                 optional: Optional[_builtins.bool] = None,
                 preference: Optional[_builtins.int] = None,
                 preference_variable: Optional[_builtins.str] = None,
                 weight: Optional[_builtins.int] = None,
                 weight_variable: Optional[_builtins.str] = None):
        """
        :param _builtins.str encapsulation: Encapsulation
                 - Choices: `gre`, `ipsec`
        :param _builtins.bool optional: Indicates if list item is considered optional.
        :param _builtins.int preference: Set preference for TLOC
                 - Range: `0`-`4294967295`
        :param _builtins.str preference_variable: Variable name
        :param _builtins.int weight: Set weight for TLOC
                 - Range: `1`-`255`
                 - Default value: `1`
        :param _builtins.str weight_variable: Variable name
        """
        if encapsulation is not None:
            pulumi.set(__self__, "encapsulation", encapsulation)
        if optional is not None:
            pulumi.set(__self__, "optional", optional)
        if preference is not None:
            pulumi.set(__self__, "preference", preference)
        if preference_variable is not None:
            pulumi.set(__self__, "preference_variable", preference_variable)
        if weight is not None:
            pulumi.set(__self__, "weight", weight)
        if weight_variable is not None:
            pulumi.set(__self__, "weight_variable", weight_variable)

    @_builtins.property
    @pulumi.getter
    def encapsulation(self) -> Optional[_builtins.str]:
        """
        Encapsulation
          - Choices: `gre`, `ipsec`
        """
        return pulumi.get(self, "encapsulation")

    @_builtins.property
    @pulumi.getter
    def optional(self) -> Optional[_builtins.bool]:
        """
        Indicates if list item is considered optional.
        """
        return pulumi.get(self, "optional")

    @_builtins.property
    @pulumi.getter
    def preference(self) -> Optional[_builtins.int]:
        """
        Set preference for TLOC
          - Range: `0`-`4294967295`
        """
        return pulumi.get(self, "preference")

    @_builtins.property
    @pulumi.getter(name="preferenceVariable")
    def preference_variable(self) -> Optional[_builtins.str]:
        """
        Variable name
        """
        return pulumi.get(self, "preference_variable")

    @_builtins.property
    @pulumi.getter
    def weight(self) -> Optional[_builtins.int]:
        """
        Set weight for TLOC
          - Range: `1`-`255`
          - Default value: `1`
        """
        return pulumi.get(self, "weight")

    @_builtins.property
    @pulumi.getter(name="weightVariable")
    def weight_variable(self) -> Optional[_builtins.str]:
        """
        Variable name
        """
        return pulumi.get(self, "weight_variable")


@pulumi.output_type
class VpnInterfaceMultilinkFeatureTemplateAccessList(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "aclName":
            suggest = "acl_name"
        elif key == "aclNameVariable":
            suggest = "acl_name_variable"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in VpnInterfaceMultilinkFeatureTemplateAccessList. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        VpnInterfaceMultilinkFeatureTemplateAccessList.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        VpnInterfaceMultilinkFeatureTemplateAccessList.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 acl_name: Optional[_builtins.str] = None,
                 acl_name_variable: Optional[_builtins.str] = None,
                 direction: Optional[_builtins.str] = None,
                 optional: Optional[_builtins.bool] = None):
        """
        :param _builtins.str acl_name: Name of access list
        :param _builtins.str acl_name_variable: Variable name
        :param _builtins.str direction: Direction
                 - Choices: `in`, `out`
        :param _builtins.bool optional: Indicates if list item is considered optional.
        """
        if acl_name is not None:
            pulumi.set(__self__, "acl_name", acl_name)
        if acl_name_variable is not None:
            pulumi.set(__self__, "acl_name_variable", acl_name_variable)
        if direction is not None:
            pulumi.set(__self__, "direction", direction)
        if optional is not None:
            pulumi.set(__self__, "optional", optional)

    @_builtins.property
    @pulumi.getter(name="aclName")
    def acl_name(self) -> Optional[_builtins.str]:
        """
        Name of access list
        """
        return pulumi.get(self, "acl_name")

    @_builtins.property
    @pulumi.getter(name="aclNameVariable")
    def acl_name_variable(self) -> Optional[_builtins.str]:
        """
        Variable name
        """
        return pulumi.get(self, "acl_name_variable")

    @_builtins.property
    @pulumi.getter
    def direction(self) -> Optional[_builtins.str]:
        """
        Direction
          - Choices: `in`, `out`
        """
        return pulumi.get(self, "direction")

    @_builtins.property
    @pulumi.getter
    def optional(self) -> Optional[_builtins.bool]:
        """
        Indicates if list item is considered optional.
        """
        return pulumi.get(self, "optional")


@pulumi.output_type
class VpnInterfaceMultilinkFeatureTemplateIpv6AccessList(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "aclName":
            suggest = "acl_name"
        elif key == "aclNameVariable":
            suggest = "acl_name_variable"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in VpnInterfaceMultilinkFeatureTemplateIpv6AccessList. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        VpnInterfaceMultilinkFeatureTemplateIpv6AccessList.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        VpnInterfaceMultilinkFeatureTemplateIpv6AccessList.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 acl_name: Optional[_builtins.str] = None,
                 acl_name_variable: Optional[_builtins.str] = None,
                 direction: Optional[_builtins.str] = None,
                 optional: Optional[_builtins.bool] = None):
        """
        :param _builtins.str acl_name: Name of access list
        :param _builtins.str acl_name_variable: Variable name
        :param _builtins.str direction: Direction
                 - Choices: `in`, `out`
        :param _builtins.bool optional: Indicates if list item is considered optional.
        """
        if acl_name is not None:
            pulumi.set(__self__, "acl_name", acl_name)
        if acl_name_variable is not None:
            pulumi.set(__self__, "acl_name_variable", acl_name_variable)
        if direction is not None:
            pulumi.set(__self__, "direction", direction)
        if optional is not None:
            pulumi.set(__self__, "optional", optional)

    @_builtins.property
    @pulumi.getter(name="aclName")
    def acl_name(self) -> Optional[_builtins.str]:
        """
        Name of access list
        """
        return pulumi.get(self, "acl_name")

    @_builtins.property
    @pulumi.getter(name="aclNameVariable")
    def acl_name_variable(self) -> Optional[_builtins.str]:
        """
        Variable name
        """
        return pulumi.get(self, "acl_name_variable")

    @_builtins.property
    @pulumi.getter
    def direction(self) -> Optional[_builtins.str]:
        """
        Direction
          - Choices: `in`, `out`
        """
        return pulumi.get(self, "direction")

    @_builtins.property
    @pulumi.getter
    def optional(self) -> Optional[_builtins.bool]:
        """
        Indicates if list item is considered optional.
        """
        return pulumi.get(self, "optional")


@pulumi.output_type
class VpnInterfaceMultilinkFeatureTemplateMultilinkInterface(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "channelGroupLists":
            suggest = "channel_group_lists"
        elif key == "descriptionVariable":
            suggest = "description_variable"
        elif key == "framingVariable":
            suggest = "framing_variable"
        elif key == "interfaceType":
            suggest = "interface_type"
        elif key == "lineMode":
            suggest = "line_mode"
        elif key == "lineModeVariable":
            suggest = "line_mode_variable"
        elif key == "linecodeVariable":
            suggest = "linecode_variable"
        elif key == "setLengthForLong":
            suggest = "set_length_for_long"
        elif key == "setLengthForShort":
            suggest = "set_length_for_short"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in VpnInterfaceMultilinkFeatureTemplateMultilinkInterface. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        VpnInterfaceMultilinkFeatureTemplateMultilinkInterface.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        VpnInterfaceMultilinkFeatureTemplateMultilinkInterface.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 channel_group_lists: Optional[Sequence['outputs.VpnInterfaceMultilinkFeatureTemplateMultilinkInterfaceChannelGroupList']] = None,
                 description: Optional[_builtins.str] = None,
                 description_variable: Optional[_builtins.str] = None,
                 framing: Optional[_builtins.str] = None,
                 framing_variable: Optional[_builtins.str] = None,
                 interface_type: Optional[_builtins.str] = None,
                 internal: Optional[_builtins.bool] = None,
                 line_mode: Optional[_builtins.str] = None,
                 line_mode_variable: Optional[_builtins.str] = None,
                 linecode: Optional[_builtins.str] = None,
                 linecode_variable: Optional[_builtins.str] = None,
                 optional: Optional[_builtins.bool] = None,
                 set_length_for_long: Optional[_builtins.str] = None,
                 set_length_for_short: Optional[_builtins.str] = None,
                 slot: Optional[_builtins.str] = None):
        """
        :param Sequence['VpnInterfaceMultilinkFeatureTemplateMultilinkInterfaceChannelGroupListArgs'] channel_group_lists: Channel Group List
        :param _builtins.str description: Description
        :param _builtins.str description_variable: Variable name
        :param _builtins.str framing: Framing
        :param _builtins.str framing_variable: Variable name
        :param _builtins.str interface_type: Card Type
                 - Choices: `E1`, `T1`, `NIM-2T`, `NIM-4T`
        :param _builtins.bool internal: Internal
                 - Default value: `false`
        :param _builtins.str line_mode: Line Mode
                 - Choices: `secondary`, `primary`
        :param _builtins.str line_mode_variable: Variable name
        :param _builtins.str linecode: LineCode
                 - Choices: `ami`, `b8zs`, `hdb3`
        :param _builtins.str linecode_variable: Variable name
        :param _builtins.bool optional: Indicates if list item is considered optional.
        :param _builtins.str set_length_for_long: Set length for long
        :param _builtins.str set_length_for_short: Set Length for short
        :param _builtins.str slot: Slot number
        """
        if channel_group_lists is not None:
            pulumi.set(__self__, "channel_group_lists", channel_group_lists)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if description_variable is not None:
            pulumi.set(__self__, "description_variable", description_variable)
        if framing is not None:
            pulumi.set(__self__, "framing", framing)
        if framing_variable is not None:
            pulumi.set(__self__, "framing_variable", framing_variable)
        if interface_type is not None:
            pulumi.set(__self__, "interface_type", interface_type)
        if internal is not None:
            pulumi.set(__self__, "internal", internal)
        if line_mode is not None:
            pulumi.set(__self__, "line_mode", line_mode)
        if line_mode_variable is not None:
            pulumi.set(__self__, "line_mode_variable", line_mode_variable)
        if linecode is not None:
            pulumi.set(__self__, "linecode", linecode)
        if linecode_variable is not None:
            pulumi.set(__self__, "linecode_variable", linecode_variable)
        if optional is not None:
            pulumi.set(__self__, "optional", optional)
        if set_length_for_long is not None:
            pulumi.set(__self__, "set_length_for_long", set_length_for_long)
        if set_length_for_short is not None:
            pulumi.set(__self__, "set_length_for_short", set_length_for_short)
        if slot is not None:
            pulumi.set(__self__, "slot", slot)

    @_builtins.property
    @pulumi.getter(name="channelGroupLists")
    def channel_group_lists(self) -> Optional[Sequence['outputs.VpnInterfaceMultilinkFeatureTemplateMultilinkInterfaceChannelGroupList']]:
        """
        Channel Group List
        """
        return pulumi.get(self, "channel_group_lists")

    @_builtins.property
    @pulumi.getter
    def description(self) -> Optional[_builtins.str]:
        """
        Description
        """
        return pulumi.get(self, "description")

    @_builtins.property
    @pulumi.getter(name="descriptionVariable")
    def description_variable(self) -> Optional[_builtins.str]:
        """
        Variable name
        """
        return pulumi.get(self, "description_variable")

    @_builtins.property
    @pulumi.getter
    def framing(self) -> Optional[_builtins.str]:
        """
        Framing
        """
        return pulumi.get(self, "framing")

    @_builtins.property
    @pulumi.getter(name="framingVariable")
    def framing_variable(self) -> Optional[_builtins.str]:
        """
        Variable name
        """
        return pulumi.get(self, "framing_variable")

    @_builtins.property
    @pulumi.getter(name="interfaceType")
    def interface_type(self) -> Optional[_builtins.str]:
        """
        Card Type
          - Choices: `E1`, `T1`, `NIM-2T`, `NIM-4T`
        """
        return pulumi.get(self, "interface_type")

    @_builtins.property
    @pulumi.getter
    def internal(self) -> Optional[_builtins.bool]:
        """
        Internal
          - Default value: `false`
        """
        return pulumi.get(self, "internal")

    @_builtins.property
    @pulumi.getter(name="lineMode")
    def line_mode(self) -> Optional[_builtins.str]:
        """
        Line Mode
          - Choices: `secondary`, `primary`
        """
        return pulumi.get(self, "line_mode")

    @_builtins.property
    @pulumi.getter(name="lineModeVariable")
    def line_mode_variable(self) -> Optional[_builtins.str]:
        """
        Variable name
        """
        return pulumi.get(self, "line_mode_variable")

    @_builtins.property
    @pulumi.getter
    def linecode(self) -> Optional[_builtins.str]:
        """
        LineCode
          - Choices: `ami`, `b8zs`, `hdb3`
        """
        return pulumi.get(self, "linecode")

    @_builtins.property
    @pulumi.getter(name="linecodeVariable")
    def linecode_variable(self) -> Optional[_builtins.str]:
        """
        Variable name
        """
        return pulumi.get(self, "linecode_variable")

    @_builtins.property
    @pulumi.getter
    def optional(self) -> Optional[_builtins.bool]:
        """
        Indicates if list item is considered optional.
        """
        return pulumi.get(self, "optional")

    @_builtins.property
    @pulumi.getter(name="setLengthForLong")
    def set_length_for_long(self) -> Optional[_builtins.str]:
        """
        Set length for long
        """
        return pulumi.get(self, "set_length_for_long")

    @_builtins.property
    @pulumi.getter(name="setLengthForShort")
    def set_length_for_short(self) -> Optional[_builtins.str]:
        """
        Set Length for short
        """
        return pulumi.get(self, "set_length_for_short")

    @_builtins.property
    @pulumi.getter
    def slot(self) -> Optional[_builtins.str]:
        """
        Slot number
        """
        return pulumi.get(self, "slot")


@pulumi.output_type
class VpnInterfaceMultilinkFeatureTemplateMultilinkInterfaceChannelGroupList(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "channelGroup":
            suggest = "channel_group"
        elif key == "channelGroupVariable":
            suggest = "channel_group_variable"
        elif key == "timeSlotVariable":
            suggest = "time_slot_variable"
        elif key == "timeSlots":
            suggest = "time_slots"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in VpnInterfaceMultilinkFeatureTemplateMultilinkInterfaceChannelGroupList. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        VpnInterfaceMultilinkFeatureTemplateMultilinkInterfaceChannelGroupList.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        VpnInterfaceMultilinkFeatureTemplateMultilinkInterfaceChannelGroupList.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 channel_group: Optional[_builtins.int] = None,
                 channel_group_variable: Optional[_builtins.str] = None,
                 optional: Optional[_builtins.bool] = None,
                 time_slot_variable: Optional[_builtins.str] = None,
                 time_slots: Optional[Sequence[_builtins.str]] = None):
        """
        :param _builtins.int channel_group: Number
                 - Range: `0`-`30`
        :param _builtins.str channel_group_variable: Variable name
        :param _builtins.bool optional: Indicates if list item is considered optional.
        :param _builtins.str time_slot_variable: Variable name
        :param Sequence[_builtins.str] time_slots: Time slots
        """
        if channel_group is not None:
            pulumi.set(__self__, "channel_group", channel_group)
        if channel_group_variable is not None:
            pulumi.set(__self__, "channel_group_variable", channel_group_variable)
        if optional is not None:
            pulumi.set(__self__, "optional", optional)
        if time_slot_variable is not None:
            pulumi.set(__self__, "time_slot_variable", time_slot_variable)
        if time_slots is not None:
            pulumi.set(__self__, "time_slots", time_slots)

    @_builtins.property
    @pulumi.getter(name="channelGroup")
    def channel_group(self) -> Optional[_builtins.int]:
        """
        Number
          - Range: `0`-`30`
        """
        return pulumi.get(self, "channel_group")

    @_builtins.property
    @pulumi.getter(name="channelGroupVariable")
    def channel_group_variable(self) -> Optional[_builtins.str]:
        """
        Variable name
        """
        return pulumi.get(self, "channel_group_variable")

    @_builtins.property
    @pulumi.getter
    def optional(self) -> Optional[_builtins.bool]:
        """
        Indicates if list item is considered optional.
        """
        return pulumi.get(self, "optional")

    @_builtins.property
    @pulumi.getter(name="timeSlotVariable")
    def time_slot_variable(self) -> Optional[_builtins.str]:
        """
        Variable name
        """
        return pulumi.get(self, "time_slot_variable")

    @_builtins.property
    @pulumi.getter(name="timeSlots")
    def time_slots(self) -> Optional[Sequence[_builtins.str]]:
        """
        Time slots
        """
        return pulumi.get(self, "time_slots")


@pulumi.output_type
class VpnInterfaceMultilinkFeatureTemplateNimInterfaceList(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "bandwidthVariable":
            suggest = "bandwidth_variable"
        elif key == "clockRate":
            suggest = "clock_rate"
        elif key == "clockRateVariable":
            suggest = "clock_rate_variable"
        elif key == "encapsulationSerial":
            suggest = "encapsulation_serial"
        elif key == "encapsulationSerialVariable":
            suggest = "encapsulation_serial_variable"
        elif key == "interfaceDescription":
            suggest = "interface_description"
        elif key == "interfaceDescriptionVariable":
            suggest = "interface_description_variable"
        elif key == "interfaceName":
            suggest = "interface_name"
        elif key == "interfaceNameVariable":
            suggest = "interface_name_variable"
        elif key == "nimSerialInterfaceType":
            suggest = "nim_serial_interface_type"
        elif key == "nimSerialInterfaceTypeVariable":
            suggest = "nim_serial_interface_type_variable"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in VpnInterfaceMultilinkFeatureTemplateNimInterfaceList. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        VpnInterfaceMultilinkFeatureTemplateNimInterfaceList.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        VpnInterfaceMultilinkFeatureTemplateNimInterfaceList.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 bandwidth: Optional[_builtins.int] = None,
                 bandwidth_variable: Optional[_builtins.str] = None,
                 clock_rate: Optional[_builtins.int] = None,
                 clock_rate_variable: Optional[_builtins.str] = None,
                 encapsulation_serial: Optional[_builtins.str] = None,
                 encapsulation_serial_variable: Optional[_builtins.str] = None,
                 interface_description: Optional[_builtins.str] = None,
                 interface_description_variable: Optional[_builtins.str] = None,
                 interface_name: Optional[_builtins.str] = None,
                 interface_name_variable: Optional[_builtins.str] = None,
                 nim_serial_interface_type: Optional[_builtins.str] = None,
                 nim_serial_interface_type_variable: Optional[_builtins.str] = None,
                 optional: Optional[_builtins.bool] = None):
        """
        :param _builtins.int bandwidth: Interface bandwidth capacity, in kbps
                 - Range: `1`-`2147483647`
        :param _builtins.str bandwidth_variable: Variable name
        :param _builtins.int clock_rate: Set preference for interface Clock speed
                 - Range: `1200`-`8000000`
        :param _builtins.str clock_rate_variable: Variable name
        :param _builtins.str encapsulation_serial: Configure Encapsulation for interface
                 - Choices: `hdlc`, `ppp`
        :param _builtins.str encapsulation_serial_variable: Variable name
        :param _builtins.str interface_description: Interface description
        :param _builtins.str interface_description_variable: Variable name
        :param _builtins.str interface_name: Interface Name
        :param _builtins.str interface_name_variable: Variable name
        :param _builtins.str nim_serial_interface_type: NIM Serial interface type
                 - Choices: `2t`, `4t`, `2T`, `4T`
        :param _builtins.str nim_serial_interface_type_variable: Variable name
        :param _builtins.bool optional: Indicates if list item is considered optional.
        """
        if bandwidth is not None:
            pulumi.set(__self__, "bandwidth", bandwidth)
        if bandwidth_variable is not None:
            pulumi.set(__self__, "bandwidth_variable", bandwidth_variable)
        if clock_rate is not None:
            pulumi.set(__self__, "clock_rate", clock_rate)
        if clock_rate_variable is not None:
            pulumi.set(__self__, "clock_rate_variable", clock_rate_variable)
        if encapsulation_serial is not None:
            pulumi.set(__self__, "encapsulation_serial", encapsulation_serial)
        if encapsulation_serial_variable is not None:
            pulumi.set(__self__, "encapsulation_serial_variable", encapsulation_serial_variable)
        if interface_description is not None:
            pulumi.set(__self__, "interface_description", interface_description)
        if interface_description_variable is not None:
            pulumi.set(__self__, "interface_description_variable", interface_description_variable)
        if interface_name is not None:
            pulumi.set(__self__, "interface_name", interface_name)
        if interface_name_variable is not None:
            pulumi.set(__self__, "interface_name_variable", interface_name_variable)
        if nim_serial_interface_type is not None:
            pulumi.set(__self__, "nim_serial_interface_type", nim_serial_interface_type)
        if nim_serial_interface_type_variable is not None:
            pulumi.set(__self__, "nim_serial_interface_type_variable", nim_serial_interface_type_variable)
        if optional is not None:
            pulumi.set(__self__, "optional", optional)

    @_builtins.property
    @pulumi.getter
    def bandwidth(self) -> Optional[_builtins.int]:
        """
        Interface bandwidth capacity, in kbps
          - Range: `1`-`2147483647`
        """
        return pulumi.get(self, "bandwidth")

    @_builtins.property
    @pulumi.getter(name="bandwidthVariable")
    def bandwidth_variable(self) -> Optional[_builtins.str]:
        """
        Variable name
        """
        return pulumi.get(self, "bandwidth_variable")

    @_builtins.property
    @pulumi.getter(name="clockRate")
    def clock_rate(self) -> Optional[_builtins.int]:
        """
        Set preference for interface Clock speed
          - Range: `1200`-`8000000`
        """
        return pulumi.get(self, "clock_rate")

    @_builtins.property
    @pulumi.getter(name="clockRateVariable")
    def clock_rate_variable(self) -> Optional[_builtins.str]:
        """
        Variable name
        """
        return pulumi.get(self, "clock_rate_variable")

    @_builtins.property
    @pulumi.getter(name="encapsulationSerial")
    def encapsulation_serial(self) -> Optional[_builtins.str]:
        """
        Configure Encapsulation for interface
          - Choices: `hdlc`, `ppp`
        """
        return pulumi.get(self, "encapsulation_serial")

    @_builtins.property
    @pulumi.getter(name="encapsulationSerialVariable")
    def encapsulation_serial_variable(self) -> Optional[_builtins.str]:
        """
        Variable name
        """
        return pulumi.get(self, "encapsulation_serial_variable")

    @_builtins.property
    @pulumi.getter(name="interfaceDescription")
    def interface_description(self) -> Optional[_builtins.str]:
        """
        Interface description
        """
        return pulumi.get(self, "interface_description")

    @_builtins.property
    @pulumi.getter(name="interfaceDescriptionVariable")
    def interface_description_variable(self) -> Optional[_builtins.str]:
        """
        Variable name
        """
        return pulumi.get(self, "interface_description_variable")

    @_builtins.property
    @pulumi.getter(name="interfaceName")
    def interface_name(self) -> Optional[_builtins.str]:
        """
        Interface Name
        """
        return pulumi.get(self, "interface_name")

    @_builtins.property
    @pulumi.getter(name="interfaceNameVariable")
    def interface_name_variable(self) -> Optional[_builtins.str]:
        """
        Variable name
        """
        return pulumi.get(self, "interface_name_variable")

    @_builtins.property
    @pulumi.getter(name="nimSerialInterfaceType")
    def nim_serial_interface_type(self) -> Optional[_builtins.str]:
        """
        NIM Serial interface type
          - Choices: `2t`, `4t`, `2T`, `4T`
        """
        return pulumi.get(self, "nim_serial_interface_type")

    @_builtins.property
    @pulumi.getter(name="nimSerialInterfaceTypeVariable")
    def nim_serial_interface_type_variable(self) -> Optional[_builtins.str]:
        """
        Variable name
        """
        return pulumi.get(self, "nim_serial_interface_type_variable")

    @_builtins.property
    @pulumi.getter
    def optional(self) -> Optional[_builtins.bool]:
        """
        Indicates if list item is considered optional.
        """
        return pulumi.get(self, "optional")


@pulumi.output_type
class VpnInterfaceMultilinkFeatureTemplateTunnelInterfaceEncapsulation(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "preferenceVariable":
            suggest = "preference_variable"
        elif key == "weightVariable":
            suggest = "weight_variable"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in VpnInterfaceMultilinkFeatureTemplateTunnelInterfaceEncapsulation. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        VpnInterfaceMultilinkFeatureTemplateTunnelInterfaceEncapsulation.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        VpnInterfaceMultilinkFeatureTemplateTunnelInterfaceEncapsulation.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 encapsulation: Optional[_builtins.str] = None,
                 optional: Optional[_builtins.bool] = None,
                 preference: Optional[_builtins.int] = None,
                 preference_variable: Optional[_builtins.str] = None,
                 weight: Optional[_builtins.int] = None,
                 weight_variable: Optional[_builtins.str] = None):
        """
        :param _builtins.str encapsulation: Encapsulation
                 - Choices: `gre`, `ipsec`
        :param _builtins.bool optional: Indicates if list item is considered optional.
        :param _builtins.int preference: Set preference for TLOC
                 - Range: `0`-`4294967295`
        :param _builtins.str preference_variable: Variable name
        :param _builtins.int weight: Set weight for TLOC
                 - Range: `1`-`255`
                 - Default value: `1`
        :param _builtins.str weight_variable: Variable name
        """
        if encapsulation is not None:
            pulumi.set(__self__, "encapsulation", encapsulation)
        if optional is not None:
            pulumi.set(__self__, "optional", optional)
        if preference is not None:
            pulumi.set(__self__, "preference", preference)
        if preference_variable is not None:
            pulumi.set(__self__, "preference_variable", preference_variable)
        if weight is not None:
            pulumi.set(__self__, "weight", weight)
        if weight_variable is not None:
            pulumi.set(__self__, "weight_variable", weight_variable)

    @_builtins.property
    @pulumi.getter
    def encapsulation(self) -> Optional[_builtins.str]:
        """
        Encapsulation
          - Choices: `gre`, `ipsec`
        """
        return pulumi.get(self, "encapsulation")

    @_builtins.property
    @pulumi.getter
    def optional(self) -> Optional[_builtins.bool]:
        """
        Indicates if list item is considered optional.
        """
        return pulumi.get(self, "optional")

    @_builtins.property
    @pulumi.getter
    def preference(self) -> Optional[_builtins.int]:
        """
        Set preference for TLOC
          - Range: `0`-`4294967295`
        """
        return pulumi.get(self, "preference")

    @_builtins.property
    @pulumi.getter(name="preferenceVariable")
    def preference_variable(self) -> Optional[_builtins.str]:
        """
        Variable name
        """
        return pulumi.get(self, "preference_variable")

    @_builtins.property
    @pulumi.getter
    def weight(self) -> Optional[_builtins.int]:
        """
        Set weight for TLOC
          - Range: `1`-`255`
          - Default value: `1`
        """
        return pulumi.get(self, "weight")

    @_builtins.property
    @pulumi.getter(name="weightVariable")
    def weight_variable(self) -> Optional[_builtins.str]:
        """
        Variable name
        """
        return pulumi.get(self, "weight_variable")


@pulumi.output_type
class VpnInterfaceSviFeatureTemplateIpv4AccessList(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "aclName":
            suggest = "acl_name"
        elif key == "aclNameVariable":
            suggest = "acl_name_variable"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in VpnInterfaceSviFeatureTemplateIpv4AccessList. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        VpnInterfaceSviFeatureTemplateIpv4AccessList.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        VpnInterfaceSviFeatureTemplateIpv4AccessList.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 acl_name: Optional[_builtins.str] = None,
                 acl_name_variable: Optional[_builtins.str] = None,
                 direction: Optional[_builtins.str] = None,
                 optional: Optional[_builtins.bool] = None):
        """
        :param _builtins.str acl_name: Name of access list
        :param _builtins.str acl_name_variable: Variable name
        :param _builtins.str direction: Direction
                 - Choices: `in`, `out`
        :param _builtins.bool optional: Indicates if list item is considered optional.
        """
        if acl_name is not None:
            pulumi.set(__self__, "acl_name", acl_name)
        if acl_name_variable is not None:
            pulumi.set(__self__, "acl_name_variable", acl_name_variable)
        if direction is not None:
            pulumi.set(__self__, "direction", direction)
        if optional is not None:
            pulumi.set(__self__, "optional", optional)

    @_builtins.property
    @pulumi.getter(name="aclName")
    def acl_name(self) -> Optional[_builtins.str]:
        """
        Name of access list
        """
        return pulumi.get(self, "acl_name")

    @_builtins.property
    @pulumi.getter(name="aclNameVariable")
    def acl_name_variable(self) -> Optional[_builtins.str]:
        """
        Variable name
        """
        return pulumi.get(self, "acl_name_variable")

    @_builtins.property
    @pulumi.getter
    def direction(self) -> Optional[_builtins.str]:
        """
        Direction
          - Choices: `in`, `out`
        """
        return pulumi.get(self, "direction")

    @_builtins.property
    @pulumi.getter
    def optional(self) -> Optional[_builtins.bool]:
        """
        Indicates if list item is considered optional.
        """
        return pulumi.get(self, "optional")


@pulumi.output_type
class VpnInterfaceSviFeatureTemplateIpv4SecondaryAddress(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "ipv4Address":
            suggest = "ipv4_address"
        elif key == "ipv4AddressVariable":
            suggest = "ipv4_address_variable"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in VpnInterfaceSviFeatureTemplateIpv4SecondaryAddress. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        VpnInterfaceSviFeatureTemplateIpv4SecondaryAddress.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        VpnInterfaceSviFeatureTemplateIpv4SecondaryAddress.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 ipv4_address: Optional[_builtins.str] = None,
                 ipv4_address_variable: Optional[_builtins.str] = None,
                 optional: Optional[_builtins.bool] = None):
        """
        :param _builtins.str ipv4_address: IP Address
        :param _builtins.str ipv4_address_variable: Variable name
        :param _builtins.bool optional: Indicates if list item is considered optional.
        """
        if ipv4_address is not None:
            pulumi.set(__self__, "ipv4_address", ipv4_address)
        if ipv4_address_variable is not None:
            pulumi.set(__self__, "ipv4_address_variable", ipv4_address_variable)
        if optional is not None:
            pulumi.set(__self__, "optional", optional)

    @_builtins.property
    @pulumi.getter(name="ipv4Address")
    def ipv4_address(self) -> Optional[_builtins.str]:
        """
        IP Address
        """
        return pulumi.get(self, "ipv4_address")

    @_builtins.property
    @pulumi.getter(name="ipv4AddressVariable")
    def ipv4_address_variable(self) -> Optional[_builtins.str]:
        """
        Variable name
        """
        return pulumi.get(self, "ipv4_address_variable")

    @_builtins.property
    @pulumi.getter
    def optional(self) -> Optional[_builtins.bool]:
        """
        Indicates if list item is considered optional.
        """
        return pulumi.get(self, "optional")


@pulumi.output_type
class VpnInterfaceSviFeatureTemplateIpv4Vrrp(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "groupId":
            suggest = "group_id"
        elif key == "groupIdVariable":
            suggest = "group_id_variable"
        elif key == "ipv4Address":
            suggest = "ipv4_address"
        elif key == "ipv4AddressVariable":
            suggest = "ipv4_address_variable"
        elif key == "ipv4SecondaryAddresses":
            suggest = "ipv4_secondary_addresses"
        elif key == "priorityVariable":
            suggest = "priority_variable"
        elif key == "timerVariable":
            suggest = "timer_variable"
        elif key == "tlocPreferenceChange":
            suggest = "tloc_preference_change"
        elif key == "tlocPreferenceChangeValue":
            suggest = "tloc_preference_change_value"
        elif key == "tlocPreferenceChangeValueVariable":
            suggest = "tloc_preference_change_value_variable"
        elif key == "trackOmp":
            suggest = "track_omp"
        elif key == "trackOmpVariable":
            suggest = "track_omp_variable"
        elif key == "trackPrefixList":
            suggest = "track_prefix_list"
        elif key == "trackPrefixListVariable":
            suggest = "track_prefix_list_variable"
        elif key == "trackingObjects":
            suggest = "tracking_objects"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in VpnInterfaceSviFeatureTemplateIpv4Vrrp. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        VpnInterfaceSviFeatureTemplateIpv4Vrrp.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        VpnInterfaceSviFeatureTemplateIpv4Vrrp.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 group_id: Optional[_builtins.int] = None,
                 group_id_variable: Optional[_builtins.str] = None,
                 ipv4_address: Optional[_builtins.str] = None,
                 ipv4_address_variable: Optional[_builtins.str] = None,
                 ipv4_secondary_addresses: Optional[Sequence['outputs.VpnInterfaceSviFeatureTemplateIpv4VrrpIpv4SecondaryAddress']] = None,
                 optional: Optional[_builtins.bool] = None,
                 priority: Optional[_builtins.int] = None,
                 priority_variable: Optional[_builtins.str] = None,
                 timer: Optional[_builtins.int] = None,
                 timer_variable: Optional[_builtins.str] = None,
                 tloc_preference_change: Optional[_builtins.bool] = None,
                 tloc_preference_change_value: Optional[_builtins.int] = None,
                 tloc_preference_change_value_variable: Optional[_builtins.str] = None,
                 track_omp: Optional[_builtins.bool] = None,
                 track_omp_variable: Optional[_builtins.str] = None,
                 track_prefix_list: Optional[_builtins.str] = None,
                 track_prefix_list_variable: Optional[_builtins.str] = None,
                 tracking_objects: Optional[Sequence['outputs.VpnInterfaceSviFeatureTemplateIpv4VrrpTrackingObject']] = None):
        """
        :param _builtins.int group_id: Group ID
                 - Range: `1`-`255`
        :param _builtins.str group_id_variable: Variable name
        :param _builtins.str ipv4_address: Assign IP Address
        :param _builtins.str ipv4_address_variable: Variable name
        :param Sequence['VpnInterfaceSviFeatureTemplateIpv4VrrpIpv4SecondaryAddressArgs'] ipv4_secondary_addresses: VRRP Secondary IP address
        :param _builtins.bool optional: Indicates if list item is considered optional.
        :param _builtins.int priority: Set priority
                 - Range: `1`-`254`
                 - Default value: `100`
        :param _builtins.str priority_variable: Variable name
        :param _builtins.int timer: Timer interval for successive advertisements, in milliseconds
                 - Range: `100`-`40950`
                 - Default value: `100`
        :param _builtins.str timer_variable: Variable name
        :param _builtins.bool tloc_preference_change: change TLOC preference
                 - Default value: `false`
        :param _builtins.int tloc_preference_change_value: Set tloc preference change value
                 - Range: `1`-`4294967295`
        :param _builtins.str tloc_preference_change_value_variable: Variable name
        :param _builtins.bool track_omp: Track OMP status
                 - Default value: `false`
        :param _builtins.str track_omp_variable: Variable name
        :param _builtins.str track_prefix_list: Track Prefix List
        :param _builtins.str track_prefix_list_variable: Variable name
        :param Sequence['VpnInterfaceSviFeatureTemplateIpv4VrrpTrackingObjectArgs'] tracking_objects: tracking object for VRRP configuration
        """
        if group_id is not None:
            pulumi.set(__self__, "group_id", group_id)
        if group_id_variable is not None:
            pulumi.set(__self__, "group_id_variable", group_id_variable)
        if ipv4_address is not None:
            pulumi.set(__self__, "ipv4_address", ipv4_address)
        if ipv4_address_variable is not None:
            pulumi.set(__self__, "ipv4_address_variable", ipv4_address_variable)
        if ipv4_secondary_addresses is not None:
            pulumi.set(__self__, "ipv4_secondary_addresses", ipv4_secondary_addresses)
        if optional is not None:
            pulumi.set(__self__, "optional", optional)
        if priority is not None:
            pulumi.set(__self__, "priority", priority)
        if priority_variable is not None:
            pulumi.set(__self__, "priority_variable", priority_variable)
        if timer is not None:
            pulumi.set(__self__, "timer", timer)
        if timer_variable is not None:
            pulumi.set(__self__, "timer_variable", timer_variable)
        if tloc_preference_change is not None:
            pulumi.set(__self__, "tloc_preference_change", tloc_preference_change)
        if tloc_preference_change_value is not None:
            pulumi.set(__self__, "tloc_preference_change_value", tloc_preference_change_value)
        if tloc_preference_change_value_variable is not None:
            pulumi.set(__self__, "tloc_preference_change_value_variable", tloc_preference_change_value_variable)
        if track_omp is not None:
            pulumi.set(__self__, "track_omp", track_omp)
        if track_omp_variable is not None:
            pulumi.set(__self__, "track_omp_variable", track_omp_variable)
        if track_prefix_list is not None:
            pulumi.set(__self__, "track_prefix_list", track_prefix_list)
        if track_prefix_list_variable is not None:
            pulumi.set(__self__, "track_prefix_list_variable", track_prefix_list_variable)
        if tracking_objects is not None:
            pulumi.set(__self__, "tracking_objects", tracking_objects)

    @_builtins.property
    @pulumi.getter(name="groupId")
    def group_id(self) -> Optional[_builtins.int]:
        """
        Group ID
          - Range: `1`-`255`
        """
        return pulumi.get(self, "group_id")

    @_builtins.property
    @pulumi.getter(name="groupIdVariable")
    def group_id_variable(self) -> Optional[_builtins.str]:
        """
        Variable name
        """
        return pulumi.get(self, "group_id_variable")

    @_builtins.property
    @pulumi.getter(name="ipv4Address")
    def ipv4_address(self) -> Optional[_builtins.str]:
        """
        Assign IP Address
        """
        return pulumi.get(self, "ipv4_address")

    @_builtins.property
    @pulumi.getter(name="ipv4AddressVariable")
    def ipv4_address_variable(self) -> Optional[_builtins.str]:
        """
        Variable name
        """
        return pulumi.get(self, "ipv4_address_variable")

    @_builtins.property
    @pulumi.getter(name="ipv4SecondaryAddresses")
    def ipv4_secondary_addresses(self) -> Optional[Sequence['outputs.VpnInterfaceSviFeatureTemplateIpv4VrrpIpv4SecondaryAddress']]:
        """
        VRRP Secondary IP address
        """
        return pulumi.get(self, "ipv4_secondary_addresses")

    @_builtins.property
    @pulumi.getter
    def optional(self) -> Optional[_builtins.bool]:
        """
        Indicates if list item is considered optional.
        """
        return pulumi.get(self, "optional")

    @_builtins.property
    @pulumi.getter
    def priority(self) -> Optional[_builtins.int]:
        """
        Set priority
          - Range: `1`-`254`
          - Default value: `100`
        """
        return pulumi.get(self, "priority")

    @_builtins.property
    @pulumi.getter(name="priorityVariable")
    def priority_variable(self) -> Optional[_builtins.str]:
        """
        Variable name
        """
        return pulumi.get(self, "priority_variable")

    @_builtins.property
    @pulumi.getter
    def timer(self) -> Optional[_builtins.int]:
        """
        Timer interval for successive advertisements, in milliseconds
          - Range: `100`-`40950`
          - Default value: `100`
        """
        return pulumi.get(self, "timer")

    @_builtins.property
    @pulumi.getter(name="timerVariable")
    def timer_variable(self) -> Optional[_builtins.str]:
        """
        Variable name
        """
        return pulumi.get(self, "timer_variable")

    @_builtins.property
    @pulumi.getter(name="tlocPreferenceChange")
    def tloc_preference_change(self) -> Optional[_builtins.bool]:
        """
        change TLOC preference
          - Default value: `false`
        """
        return pulumi.get(self, "tloc_preference_change")

    @_builtins.property
    @pulumi.getter(name="tlocPreferenceChangeValue")
    def tloc_preference_change_value(self) -> Optional[_builtins.int]:
        """
        Set tloc preference change value
          - Range: `1`-`4294967295`
        """
        return pulumi.get(self, "tloc_preference_change_value")

    @_builtins.property
    @pulumi.getter(name="tlocPreferenceChangeValueVariable")
    def tloc_preference_change_value_variable(self) -> Optional[_builtins.str]:
        """
        Variable name
        """
        return pulumi.get(self, "tloc_preference_change_value_variable")

    @_builtins.property
    @pulumi.getter(name="trackOmp")
    def track_omp(self) -> Optional[_builtins.bool]:
        """
        Track OMP status
          - Default value: `false`
        """
        return pulumi.get(self, "track_omp")

    @_builtins.property
    @pulumi.getter(name="trackOmpVariable")
    def track_omp_variable(self) -> Optional[_builtins.str]:
        """
        Variable name
        """
        return pulumi.get(self, "track_omp_variable")

    @_builtins.property
    @pulumi.getter(name="trackPrefixList")
    def track_prefix_list(self) -> Optional[_builtins.str]:
        """
        Track Prefix List
        """
        return pulumi.get(self, "track_prefix_list")

    @_builtins.property
    @pulumi.getter(name="trackPrefixListVariable")
    def track_prefix_list_variable(self) -> Optional[_builtins.str]:
        """
        Variable name
        """
        return pulumi.get(self, "track_prefix_list_variable")

    @_builtins.property
    @pulumi.getter(name="trackingObjects")
    def tracking_objects(self) -> Optional[Sequence['outputs.VpnInterfaceSviFeatureTemplateIpv4VrrpTrackingObject']]:
        """
        tracking object for VRRP configuration
        """
        return pulumi.get(self, "tracking_objects")


@pulumi.output_type
class VpnInterfaceSviFeatureTemplateIpv4VrrpIpv4SecondaryAddress(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "ipv4Address":
            suggest = "ipv4_address"
        elif key == "ipv4AddressVariable":
            suggest = "ipv4_address_variable"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in VpnInterfaceSviFeatureTemplateIpv4VrrpIpv4SecondaryAddress. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        VpnInterfaceSviFeatureTemplateIpv4VrrpIpv4SecondaryAddress.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        VpnInterfaceSviFeatureTemplateIpv4VrrpIpv4SecondaryAddress.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 ipv4_address: Optional[_builtins.str] = None,
                 ipv4_address_variable: Optional[_builtins.str] = None,
                 optional: Optional[_builtins.bool] = None):
        """
        :param _builtins.str ipv4_address: VRRP Secondary IP address
        :param _builtins.str ipv4_address_variable: Variable name
        :param _builtins.bool optional: Indicates if list item is considered optional.
        """
        if ipv4_address is not None:
            pulumi.set(__self__, "ipv4_address", ipv4_address)
        if ipv4_address_variable is not None:
            pulumi.set(__self__, "ipv4_address_variable", ipv4_address_variable)
        if optional is not None:
            pulumi.set(__self__, "optional", optional)

    @_builtins.property
    @pulumi.getter(name="ipv4Address")
    def ipv4_address(self) -> Optional[_builtins.str]:
        """
        VRRP Secondary IP address
        """
        return pulumi.get(self, "ipv4_address")

    @_builtins.property
    @pulumi.getter(name="ipv4AddressVariable")
    def ipv4_address_variable(self) -> Optional[_builtins.str]:
        """
        Variable name
        """
        return pulumi.get(self, "ipv4_address_variable")

    @_builtins.property
    @pulumi.getter
    def optional(self) -> Optional[_builtins.bool]:
        """
        Indicates if list item is considered optional.
        """
        return pulumi.get(self, "optional")


@pulumi.output_type
class VpnInterfaceSviFeatureTemplateIpv4VrrpTrackingObject(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "decrementValue":
            suggest = "decrement_value"
        elif key == "decrementValueVariable":
            suggest = "decrement_value_variable"
        elif key == "nameVariable":
            suggest = "name_variable"
        elif key == "trackAction":
            suggest = "track_action"
        elif key == "trackActionVariable":
            suggest = "track_action_variable"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in VpnInterfaceSviFeatureTemplateIpv4VrrpTrackingObject. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        VpnInterfaceSviFeatureTemplateIpv4VrrpTrackingObject.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        VpnInterfaceSviFeatureTemplateIpv4VrrpTrackingObject.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 decrement_value: Optional[_builtins.int] = None,
                 decrement_value_variable: Optional[_builtins.str] = None,
                 name: Optional[_builtins.int] = None,
                 name_variable: Optional[_builtins.str] = None,
                 optional: Optional[_builtins.bool] = None,
                 track_action: Optional[_builtins.str] = None,
                 track_action_variable: Optional[_builtins.str] = None):
        """
        :param _builtins.int decrement_value: Decrement Value for VRRP priority
                 - Range: `1`-`255`
        :param _builtins.str decrement_value_variable: Variable name
        :param _builtins.int name: Tracker ID
                 - Range: `1`-`1000`
        :param _builtins.str name_variable: Variable name
        :param _builtins.bool optional: Indicates if list item is considered optional.
        :param _builtins.str track_action: Track Action
                 - Choices: `decrement`, `shutdown`
                 - Default value: `decrement`
        :param _builtins.str track_action_variable: Variable name
        """
        if decrement_value is not None:
            pulumi.set(__self__, "decrement_value", decrement_value)
        if decrement_value_variable is not None:
            pulumi.set(__self__, "decrement_value_variable", decrement_value_variable)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if name_variable is not None:
            pulumi.set(__self__, "name_variable", name_variable)
        if optional is not None:
            pulumi.set(__self__, "optional", optional)
        if track_action is not None:
            pulumi.set(__self__, "track_action", track_action)
        if track_action_variable is not None:
            pulumi.set(__self__, "track_action_variable", track_action_variable)

    @_builtins.property
    @pulumi.getter(name="decrementValue")
    def decrement_value(self) -> Optional[_builtins.int]:
        """
        Decrement Value for VRRP priority
          - Range: `1`-`255`
        """
        return pulumi.get(self, "decrement_value")

    @_builtins.property
    @pulumi.getter(name="decrementValueVariable")
    def decrement_value_variable(self) -> Optional[_builtins.str]:
        """
        Variable name
        """
        return pulumi.get(self, "decrement_value_variable")

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[_builtins.int]:
        """
        Tracker ID
          - Range: `1`-`1000`
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter(name="nameVariable")
    def name_variable(self) -> Optional[_builtins.str]:
        """
        Variable name
        """
        return pulumi.get(self, "name_variable")

    @_builtins.property
    @pulumi.getter
    def optional(self) -> Optional[_builtins.bool]:
        """
        Indicates if list item is considered optional.
        """
        return pulumi.get(self, "optional")

    @_builtins.property
    @pulumi.getter(name="trackAction")
    def track_action(self) -> Optional[_builtins.str]:
        """
        Track Action
          - Choices: `decrement`, `shutdown`
          - Default value: `decrement`
        """
        return pulumi.get(self, "track_action")

    @_builtins.property
    @pulumi.getter(name="trackActionVariable")
    def track_action_variable(self) -> Optional[_builtins.str]:
        """
        Variable name
        """
        return pulumi.get(self, "track_action_variable")


@pulumi.output_type
class VpnInterfaceSviFeatureTemplateIpv6AccessList(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "aclName":
            suggest = "acl_name"
        elif key == "aclNameVariable":
            suggest = "acl_name_variable"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in VpnInterfaceSviFeatureTemplateIpv6AccessList. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        VpnInterfaceSviFeatureTemplateIpv6AccessList.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        VpnInterfaceSviFeatureTemplateIpv6AccessList.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 acl_name: Optional[_builtins.str] = None,
                 acl_name_variable: Optional[_builtins.str] = None,
                 direction: Optional[_builtins.str] = None,
                 optional: Optional[_builtins.bool] = None):
        """
        :param _builtins.str acl_name: Name of access list
        :param _builtins.str acl_name_variable: Variable name
        :param _builtins.str direction: Direction
                 - Choices: `in`, `out`
        :param _builtins.bool optional: Indicates if list item is considered optional.
        """
        if acl_name is not None:
            pulumi.set(__self__, "acl_name", acl_name)
        if acl_name_variable is not None:
            pulumi.set(__self__, "acl_name_variable", acl_name_variable)
        if direction is not None:
            pulumi.set(__self__, "direction", direction)
        if optional is not None:
            pulumi.set(__self__, "optional", optional)

    @_builtins.property
    @pulumi.getter(name="aclName")
    def acl_name(self) -> Optional[_builtins.str]:
        """
        Name of access list
        """
        return pulumi.get(self, "acl_name")

    @_builtins.property
    @pulumi.getter(name="aclNameVariable")
    def acl_name_variable(self) -> Optional[_builtins.str]:
        """
        Variable name
        """
        return pulumi.get(self, "acl_name_variable")

    @_builtins.property
    @pulumi.getter
    def direction(self) -> Optional[_builtins.str]:
        """
        Direction
          - Choices: `in`, `out`
        """
        return pulumi.get(self, "direction")

    @_builtins.property
    @pulumi.getter
    def optional(self) -> Optional[_builtins.bool]:
        """
        Indicates if list item is considered optional.
        """
        return pulumi.get(self, "optional")


@pulumi.output_type
class VpnInterfaceSviFeatureTemplateIpv6DhcpHelper(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "addressVariable":
            suggest = "address_variable"
        elif key == "vpnId":
            suggest = "vpn_id"
        elif key == "vpnIdVariable":
            suggest = "vpn_id_variable"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in VpnInterfaceSviFeatureTemplateIpv6DhcpHelper. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        VpnInterfaceSviFeatureTemplateIpv6DhcpHelper.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        VpnInterfaceSviFeatureTemplateIpv6DhcpHelper.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 address: Optional[_builtins.str] = None,
                 address_variable: Optional[_builtins.str] = None,
                 optional: Optional[_builtins.bool] = None,
                 vpn_id: Optional[_builtins.int] = None,
                 vpn_id_variable: Optional[_builtins.str] = None):
        """
        :param _builtins.str address: DHCPv6 Helper address
        :param _builtins.str address_variable: Variable name
        :param _builtins.bool optional: Indicates if list item is considered optional.
        :param _builtins.int vpn_id: DHCPv6 Helper VPN
                 - Range: `1`-`65536`
        :param _builtins.str vpn_id_variable: Variable name
        """
        if address is not None:
            pulumi.set(__self__, "address", address)
        if address_variable is not None:
            pulumi.set(__self__, "address_variable", address_variable)
        if optional is not None:
            pulumi.set(__self__, "optional", optional)
        if vpn_id is not None:
            pulumi.set(__self__, "vpn_id", vpn_id)
        if vpn_id_variable is not None:
            pulumi.set(__self__, "vpn_id_variable", vpn_id_variable)

    @_builtins.property
    @pulumi.getter
    def address(self) -> Optional[_builtins.str]:
        """
        DHCPv6 Helper address
        """
        return pulumi.get(self, "address")

    @_builtins.property
    @pulumi.getter(name="addressVariable")
    def address_variable(self) -> Optional[_builtins.str]:
        """
        Variable name
        """
        return pulumi.get(self, "address_variable")

    @_builtins.property
    @pulumi.getter
    def optional(self) -> Optional[_builtins.bool]:
        """
        Indicates if list item is considered optional.
        """
        return pulumi.get(self, "optional")

    @_builtins.property
    @pulumi.getter(name="vpnId")
    def vpn_id(self) -> Optional[_builtins.int]:
        """
        DHCPv6 Helper VPN
          - Range: `1`-`65536`
        """
        return pulumi.get(self, "vpn_id")

    @_builtins.property
    @pulumi.getter(name="vpnIdVariable")
    def vpn_id_variable(self) -> Optional[_builtins.str]:
        """
        Variable name
        """
        return pulumi.get(self, "vpn_id_variable")


@pulumi.output_type
class VpnInterfaceSviFeatureTemplateIpv6SecondaryAddress(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "ipv6Address":
            suggest = "ipv6_address"
        elif key == "ipv6AddressVariable":
            suggest = "ipv6_address_variable"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in VpnInterfaceSviFeatureTemplateIpv6SecondaryAddress. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        VpnInterfaceSviFeatureTemplateIpv6SecondaryAddress.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        VpnInterfaceSviFeatureTemplateIpv6SecondaryAddress.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 ipv6_address: Optional[_builtins.str] = None,
                 ipv6_address_variable: Optional[_builtins.str] = None,
                 optional: Optional[_builtins.bool] = None):
        """
        :param _builtins.str ipv6_address: IPv6 Address
        :param _builtins.str ipv6_address_variable: Variable name
        :param _builtins.bool optional: Indicates if list item is considered optional.
        """
        if ipv6_address is not None:
            pulumi.set(__self__, "ipv6_address", ipv6_address)
        if ipv6_address_variable is not None:
            pulumi.set(__self__, "ipv6_address_variable", ipv6_address_variable)
        if optional is not None:
            pulumi.set(__self__, "optional", optional)

    @_builtins.property
    @pulumi.getter(name="ipv6Address")
    def ipv6_address(self) -> Optional[_builtins.str]:
        """
        IPv6 Address
        """
        return pulumi.get(self, "ipv6_address")

    @_builtins.property
    @pulumi.getter(name="ipv6AddressVariable")
    def ipv6_address_variable(self) -> Optional[_builtins.str]:
        """
        Variable name
        """
        return pulumi.get(self, "ipv6_address_variable")

    @_builtins.property
    @pulumi.getter
    def optional(self) -> Optional[_builtins.bool]:
        """
        Indicates if list item is considered optional.
        """
        return pulumi.get(self, "optional")


@pulumi.output_type
class VpnInterfaceSviFeatureTemplateIpv6Vrrp(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "groupId":
            suggest = "group_id"
        elif key == "groupIdVariable":
            suggest = "group_id_variable"
        elif key == "ipv6Addresses":
            suggest = "ipv6_addresses"
        elif key == "ipv6SecondaryAddresses":
            suggest = "ipv6_secondary_addresses"
        elif key == "priorityVariable":
            suggest = "priority_variable"
        elif key == "timerVariable":
            suggest = "timer_variable"
        elif key == "trackOmp":
            suggest = "track_omp"
        elif key == "trackOmpVariable":
            suggest = "track_omp_variable"
        elif key == "trackPrefixList":
            suggest = "track_prefix_list"
        elif key == "trackPrefixListVariable":
            suggest = "track_prefix_list_variable"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in VpnInterfaceSviFeatureTemplateIpv6Vrrp. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        VpnInterfaceSviFeatureTemplateIpv6Vrrp.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        VpnInterfaceSviFeatureTemplateIpv6Vrrp.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 group_id: Optional[_builtins.int] = None,
                 group_id_variable: Optional[_builtins.str] = None,
                 ipv6_addresses: Optional[Sequence['outputs.VpnInterfaceSviFeatureTemplateIpv6VrrpIpv6Address']] = None,
                 ipv6_secondary_addresses: Optional[Sequence['outputs.VpnInterfaceSviFeatureTemplateIpv6VrrpIpv6SecondaryAddress']] = None,
                 optional: Optional[_builtins.bool] = None,
                 priority: Optional[_builtins.int] = None,
                 priority_variable: Optional[_builtins.str] = None,
                 timer: Optional[_builtins.int] = None,
                 timer_variable: Optional[_builtins.str] = None,
                 track_omp: Optional[_builtins.bool] = None,
                 track_omp_variable: Optional[_builtins.str] = None,
                 track_prefix_list: Optional[_builtins.str] = None,
                 track_prefix_list_variable: Optional[_builtins.str] = None):
        """
        :param _builtins.int group_id: Group ID
                 - Range: `1`-`255`
        :param _builtins.str group_id_variable: Variable name
        :param Sequence['VpnInterfaceSviFeatureTemplateIpv6VrrpIpv6AddressArgs'] ipv6_addresses: IPv6 VRRP
        :param Sequence['VpnInterfaceSviFeatureTemplateIpv6VrrpIpv6SecondaryAddressArgs'] ipv6_secondary_addresses: IPv6 Secondary IP address
        :param _builtins.bool optional: Indicates if list item is considered optional.
        :param _builtins.int priority: Set priority
                 - Range: `1`-`254`
                 - Default value: `100`
        :param _builtins.str priority_variable: Variable name
        :param _builtins.int timer: Timer interval for successive advertisements, in milliseconds
                 - Range: `100`-`40950`
                 - Default value: `100`
        :param _builtins.str timer_variable: Variable name
        :param _builtins.bool track_omp: Track OMP status
                 - Default value: `false`
        :param _builtins.str track_omp_variable: Variable name
        :param _builtins.str track_prefix_list: Track Prefix List
        :param _builtins.str track_prefix_list_variable: Variable name
        """
        if group_id is not None:
            pulumi.set(__self__, "group_id", group_id)
        if group_id_variable is not None:
            pulumi.set(__self__, "group_id_variable", group_id_variable)
        if ipv6_addresses is not None:
            pulumi.set(__self__, "ipv6_addresses", ipv6_addresses)
        if ipv6_secondary_addresses is not None:
            pulumi.set(__self__, "ipv6_secondary_addresses", ipv6_secondary_addresses)
        if optional is not None:
            pulumi.set(__self__, "optional", optional)
        if priority is not None:
            pulumi.set(__self__, "priority", priority)
        if priority_variable is not None:
            pulumi.set(__self__, "priority_variable", priority_variable)
        if timer is not None:
            pulumi.set(__self__, "timer", timer)
        if timer_variable is not None:
            pulumi.set(__self__, "timer_variable", timer_variable)
        if track_omp is not None:
            pulumi.set(__self__, "track_omp", track_omp)
        if track_omp_variable is not None:
            pulumi.set(__self__, "track_omp_variable", track_omp_variable)
        if track_prefix_list is not None:
            pulumi.set(__self__, "track_prefix_list", track_prefix_list)
        if track_prefix_list_variable is not None:
            pulumi.set(__self__, "track_prefix_list_variable", track_prefix_list_variable)

    @_builtins.property
    @pulumi.getter(name="groupId")
    def group_id(self) -> Optional[_builtins.int]:
        """
        Group ID
          - Range: `1`-`255`
        """
        return pulumi.get(self, "group_id")

    @_builtins.property
    @pulumi.getter(name="groupIdVariable")
    def group_id_variable(self) -> Optional[_builtins.str]:
        """
        Variable name
        """
        return pulumi.get(self, "group_id_variable")

    @_builtins.property
    @pulumi.getter(name="ipv6Addresses")
    def ipv6_addresses(self) -> Optional[Sequence['outputs.VpnInterfaceSviFeatureTemplateIpv6VrrpIpv6Address']]:
        """
        IPv6 VRRP
        """
        return pulumi.get(self, "ipv6_addresses")

    @_builtins.property
    @pulumi.getter(name="ipv6SecondaryAddresses")
    def ipv6_secondary_addresses(self) -> Optional[Sequence['outputs.VpnInterfaceSviFeatureTemplateIpv6VrrpIpv6SecondaryAddress']]:
        """
        IPv6 Secondary IP address
        """
        return pulumi.get(self, "ipv6_secondary_addresses")

    @_builtins.property
    @pulumi.getter
    def optional(self) -> Optional[_builtins.bool]:
        """
        Indicates if list item is considered optional.
        """
        return pulumi.get(self, "optional")

    @_builtins.property
    @pulumi.getter
    def priority(self) -> Optional[_builtins.int]:
        """
        Set priority
          - Range: `1`-`254`
          - Default value: `100`
        """
        return pulumi.get(self, "priority")

    @_builtins.property
    @pulumi.getter(name="priorityVariable")
    def priority_variable(self) -> Optional[_builtins.str]:
        """
        Variable name
        """
        return pulumi.get(self, "priority_variable")

    @_builtins.property
    @pulumi.getter
    def timer(self) -> Optional[_builtins.int]:
        """
        Timer interval for successive advertisements, in milliseconds
          - Range: `100`-`40950`
          - Default value: `100`
        """
        return pulumi.get(self, "timer")

    @_builtins.property
    @pulumi.getter(name="timerVariable")
    def timer_variable(self) -> Optional[_builtins.str]:
        """
        Variable name
        """
        return pulumi.get(self, "timer_variable")

    @_builtins.property
    @pulumi.getter(name="trackOmp")
    def track_omp(self) -> Optional[_builtins.bool]:
        """
        Track OMP status
          - Default value: `false`
        """
        return pulumi.get(self, "track_omp")

    @_builtins.property
    @pulumi.getter(name="trackOmpVariable")
    def track_omp_variable(self) -> Optional[_builtins.str]:
        """
        Variable name
        """
        return pulumi.get(self, "track_omp_variable")

    @_builtins.property
    @pulumi.getter(name="trackPrefixList")
    def track_prefix_list(self) -> Optional[_builtins.str]:
        """
        Track Prefix List
        """
        return pulumi.get(self, "track_prefix_list")

    @_builtins.property
    @pulumi.getter(name="trackPrefixListVariable")
    def track_prefix_list_variable(self) -> Optional[_builtins.str]:
        """
        Variable name
        """
        return pulumi.get(self, "track_prefix_list_variable")


@pulumi.output_type
class VpnInterfaceSviFeatureTemplateIpv6VrrpIpv6Address(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "linkLocalAddress":
            suggest = "link_local_address"
        elif key == "linkLocalAddressVariable":
            suggest = "link_local_address_variable"
        elif key == "prefixVariable":
            suggest = "prefix_variable"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in VpnInterfaceSviFeatureTemplateIpv6VrrpIpv6Address. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        VpnInterfaceSviFeatureTemplateIpv6VrrpIpv6Address.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        VpnInterfaceSviFeatureTemplateIpv6VrrpIpv6Address.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 link_local_address: Optional[_builtins.str] = None,
                 link_local_address_variable: Optional[_builtins.str] = None,
                 optional: Optional[_builtins.bool] = None,
                 prefix: Optional[_builtins.str] = None,
                 prefix_variable: Optional[_builtins.str] = None):
        """
        :param _builtins.str link_local_address: Use link-local IPv6 Address
        :param _builtins.str link_local_address_variable: Variable name
        :param _builtins.bool optional: Indicates if list item is considered optional.
        :param _builtins.str prefix: Assign Global IPv6 Prefix
        :param _builtins.str prefix_variable: Variable name
        """
        if link_local_address is not None:
            pulumi.set(__self__, "link_local_address", link_local_address)
        if link_local_address_variable is not None:
            pulumi.set(__self__, "link_local_address_variable", link_local_address_variable)
        if optional is not None:
            pulumi.set(__self__, "optional", optional)
        if prefix is not None:
            pulumi.set(__self__, "prefix", prefix)
        if prefix_variable is not None:
            pulumi.set(__self__, "prefix_variable", prefix_variable)

    @_builtins.property
    @pulumi.getter(name="linkLocalAddress")
    def link_local_address(self) -> Optional[_builtins.str]:
        """
        Use link-local IPv6 Address
        """
        return pulumi.get(self, "link_local_address")

    @_builtins.property
    @pulumi.getter(name="linkLocalAddressVariable")
    def link_local_address_variable(self) -> Optional[_builtins.str]:
        """
        Variable name
        """
        return pulumi.get(self, "link_local_address_variable")

    @_builtins.property
    @pulumi.getter
    def optional(self) -> Optional[_builtins.bool]:
        """
        Indicates if list item is considered optional.
        """
        return pulumi.get(self, "optional")

    @_builtins.property
    @pulumi.getter
    def prefix(self) -> Optional[_builtins.str]:
        """
        Assign Global IPv6 Prefix
        """
        return pulumi.get(self, "prefix")

    @_builtins.property
    @pulumi.getter(name="prefixVariable")
    def prefix_variable(self) -> Optional[_builtins.str]:
        """
        Variable name
        """
        return pulumi.get(self, "prefix_variable")


@pulumi.output_type
class VpnInterfaceSviFeatureTemplateIpv6VrrpIpv6SecondaryAddress(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "prefixVariable":
            suggest = "prefix_variable"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in VpnInterfaceSviFeatureTemplateIpv6VrrpIpv6SecondaryAddress. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        VpnInterfaceSviFeatureTemplateIpv6VrrpIpv6SecondaryAddress.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        VpnInterfaceSviFeatureTemplateIpv6VrrpIpv6SecondaryAddress.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 optional: Optional[_builtins.bool] = None,
                 prefix: Optional[_builtins.str] = None,
                 prefix_variable: Optional[_builtins.str] = None):
        """
        :param _builtins.bool optional: Indicates if list item is considered optional.
        :param _builtins.str prefix: IPv6 Secondary IP address
        :param _builtins.str prefix_variable: Variable name
        """
        if optional is not None:
            pulumi.set(__self__, "optional", optional)
        if prefix is not None:
            pulumi.set(__self__, "prefix", prefix)
        if prefix_variable is not None:
            pulumi.set(__self__, "prefix_variable", prefix_variable)

    @_builtins.property
    @pulumi.getter
    def optional(self) -> Optional[_builtins.bool]:
        """
        Indicates if list item is considered optional.
        """
        return pulumi.get(self, "optional")

    @_builtins.property
    @pulumi.getter
    def prefix(self) -> Optional[_builtins.str]:
        """
        IPv6 Secondary IP address
        """
        return pulumi.get(self, "prefix")

    @_builtins.property
    @pulumi.getter(name="prefixVariable")
    def prefix_variable(self) -> Optional[_builtins.str]:
        """
        Variable name
        """
        return pulumi.get(self, "prefix_variable")


@pulumi.output_type
class VpnInterfaceSviFeatureTemplatePolicer(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "policerName":
            suggest = "policer_name"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in VpnInterfaceSviFeatureTemplatePolicer. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        VpnInterfaceSviFeatureTemplatePolicer.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        VpnInterfaceSviFeatureTemplatePolicer.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 direction: Optional[_builtins.str] = None,
                 optional: Optional[_builtins.bool] = None,
                 policer_name: Optional[_builtins.str] = None):
        """
        :param _builtins.str direction: Direction
                 - Choices: `in`, `out`
        :param _builtins.bool optional: Indicates if list item is considered optional.
        :param _builtins.str policer_name: Name of policer
        """
        if direction is not None:
            pulumi.set(__self__, "direction", direction)
        if optional is not None:
            pulumi.set(__self__, "optional", optional)
        if policer_name is not None:
            pulumi.set(__self__, "policer_name", policer_name)

    @_builtins.property
    @pulumi.getter
    def direction(self) -> Optional[_builtins.str]:
        """
        Direction
          - Choices: `in`, `out`
        """
        return pulumi.get(self, "direction")

    @_builtins.property
    @pulumi.getter
    def optional(self) -> Optional[_builtins.bool]:
        """
        Indicates if list item is considered optional.
        """
        return pulumi.get(self, "optional")

    @_builtins.property
    @pulumi.getter(name="policerName")
    def policer_name(self) -> Optional[_builtins.str]:
        """
        Name of policer
        """
        return pulumi.get(self, "policer_name")


@pulumi.output_type
class VpnInterfaceSviFeatureTemplateStaticArpEntry(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "ipv4Address":
            suggest = "ipv4_address"
        elif key == "ipv4AddressVariable":
            suggest = "ipv4_address_variable"
        elif key == "macAddress":
            suggest = "mac_address"
        elif key == "macAddressVariable":
            suggest = "mac_address_variable"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in VpnInterfaceSviFeatureTemplateStaticArpEntry. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        VpnInterfaceSviFeatureTemplateStaticArpEntry.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        VpnInterfaceSviFeatureTemplateStaticArpEntry.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 ipv4_address: Optional[_builtins.str] = None,
                 ipv4_address_variable: Optional[_builtins.str] = None,
                 mac_address: Optional[_builtins.str] = None,
                 mac_address_variable: Optional[_builtins.str] = None,
                 optional: Optional[_builtins.bool] = None):
        """
        :param _builtins.str ipv4_address: IP Address
        :param _builtins.str ipv4_address_variable: Variable name
        :param _builtins.str mac_address: MAC address
        :param _builtins.str mac_address_variable: Variable name
        :param _builtins.bool optional: Indicates if list item is considered optional.
        """
        if ipv4_address is not None:
            pulumi.set(__self__, "ipv4_address", ipv4_address)
        if ipv4_address_variable is not None:
            pulumi.set(__self__, "ipv4_address_variable", ipv4_address_variable)
        if mac_address is not None:
            pulumi.set(__self__, "mac_address", mac_address)
        if mac_address_variable is not None:
            pulumi.set(__self__, "mac_address_variable", mac_address_variable)
        if optional is not None:
            pulumi.set(__self__, "optional", optional)

    @_builtins.property
    @pulumi.getter(name="ipv4Address")
    def ipv4_address(self) -> Optional[_builtins.str]:
        """
        IP Address
        """
        return pulumi.get(self, "ipv4_address")

    @_builtins.property
    @pulumi.getter(name="ipv4AddressVariable")
    def ipv4_address_variable(self) -> Optional[_builtins.str]:
        """
        Variable name
        """
        return pulumi.get(self, "ipv4_address_variable")

    @_builtins.property
    @pulumi.getter(name="macAddress")
    def mac_address(self) -> Optional[_builtins.str]:
        """
        MAC address
        """
        return pulumi.get(self, "mac_address")

    @_builtins.property
    @pulumi.getter(name="macAddressVariable")
    def mac_address_variable(self) -> Optional[_builtins.str]:
        """
        Variable name
        """
        return pulumi.get(self, "mac_address_variable")

    @_builtins.property
    @pulumi.getter
    def optional(self) -> Optional[_builtins.bool]:
        """
        Indicates if list item is considered optional.
        """
        return pulumi.get(self, "optional")


@pulumi.output_type
class VpnInterfaceT1E1SerialFeatureTemplateIpv4AccessList(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "aclName":
            suggest = "acl_name"
        elif key == "aclNameVariable":
            suggest = "acl_name_variable"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in VpnInterfaceT1E1SerialFeatureTemplateIpv4AccessList. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        VpnInterfaceT1E1SerialFeatureTemplateIpv4AccessList.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        VpnInterfaceT1E1SerialFeatureTemplateIpv4AccessList.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 acl_name: Optional[_builtins.str] = None,
                 acl_name_variable: Optional[_builtins.str] = None,
                 direction: Optional[_builtins.str] = None,
                 optional: Optional[_builtins.bool] = None):
        """
        :param _builtins.str acl_name: Name of access list
        :param _builtins.str acl_name_variable: Variable name
        :param _builtins.str direction: Direction
                 - Choices: `in`, `out`
        :param _builtins.bool optional: Indicates if list item is considered optional.
        """
        if acl_name is not None:
            pulumi.set(__self__, "acl_name", acl_name)
        if acl_name_variable is not None:
            pulumi.set(__self__, "acl_name_variable", acl_name_variable)
        if direction is not None:
            pulumi.set(__self__, "direction", direction)
        if optional is not None:
            pulumi.set(__self__, "optional", optional)

    @_builtins.property
    @pulumi.getter(name="aclName")
    def acl_name(self) -> Optional[_builtins.str]:
        """
        Name of access list
        """
        return pulumi.get(self, "acl_name")

    @_builtins.property
    @pulumi.getter(name="aclNameVariable")
    def acl_name_variable(self) -> Optional[_builtins.str]:
        """
        Variable name
        """
        return pulumi.get(self, "acl_name_variable")

    @_builtins.property
    @pulumi.getter
    def direction(self) -> Optional[_builtins.str]:
        """
        Direction
          - Choices: `in`, `out`
        """
        return pulumi.get(self, "direction")

    @_builtins.property
    @pulumi.getter
    def optional(self) -> Optional[_builtins.bool]:
        """
        Indicates if list item is considered optional.
        """
        return pulumi.get(self, "optional")


@pulumi.output_type
class VpnInterfaceT1E1SerialFeatureTemplateIpv6AccessList(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "aclName":
            suggest = "acl_name"
        elif key == "aclNameVariable":
            suggest = "acl_name_variable"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in VpnInterfaceT1E1SerialFeatureTemplateIpv6AccessList. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        VpnInterfaceT1E1SerialFeatureTemplateIpv6AccessList.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        VpnInterfaceT1E1SerialFeatureTemplateIpv6AccessList.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 acl_name: Optional[_builtins.str] = None,
                 acl_name_variable: Optional[_builtins.str] = None,
                 direction: Optional[_builtins.str] = None,
                 optional: Optional[_builtins.bool] = None):
        """
        :param _builtins.str acl_name: Name of access list
        :param _builtins.str acl_name_variable: Variable name
        :param _builtins.str direction: Direction
                 - Choices: `in`, `out`
        :param _builtins.bool optional: Indicates if list item is considered optional.
        """
        if acl_name is not None:
            pulumi.set(__self__, "acl_name", acl_name)
        if acl_name_variable is not None:
            pulumi.set(__self__, "acl_name_variable", acl_name_variable)
        if direction is not None:
            pulumi.set(__self__, "direction", direction)
        if optional is not None:
            pulumi.set(__self__, "optional", optional)

    @_builtins.property
    @pulumi.getter(name="aclName")
    def acl_name(self) -> Optional[_builtins.str]:
        """
        Name of access list
        """
        return pulumi.get(self, "acl_name")

    @_builtins.property
    @pulumi.getter(name="aclNameVariable")
    def acl_name_variable(self) -> Optional[_builtins.str]:
        """
        Variable name
        """
        return pulumi.get(self, "acl_name_variable")

    @_builtins.property
    @pulumi.getter
    def direction(self) -> Optional[_builtins.str]:
        """
        Direction
          - Choices: `in`, `out`
        """
        return pulumi.get(self, "direction")

    @_builtins.property
    @pulumi.getter
    def optional(self) -> Optional[_builtins.bool]:
        """
        Indicates if list item is considered optional.
        """
        return pulumi.get(self, "optional")


@pulumi.output_type
class VpnInterfaceT1E1SerialFeatureTemplateTunnelInterfaceEncapsulation(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "preferenceVariable":
            suggest = "preference_variable"
        elif key == "weightVariable":
            suggest = "weight_variable"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in VpnInterfaceT1E1SerialFeatureTemplateTunnelInterfaceEncapsulation. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        VpnInterfaceT1E1SerialFeatureTemplateTunnelInterfaceEncapsulation.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        VpnInterfaceT1E1SerialFeatureTemplateTunnelInterfaceEncapsulation.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 encapsulation: Optional[_builtins.str] = None,
                 optional: Optional[_builtins.bool] = None,
                 preference: Optional[_builtins.int] = None,
                 preference_variable: Optional[_builtins.str] = None,
                 weight: Optional[_builtins.int] = None,
                 weight_variable: Optional[_builtins.str] = None):
        """
        :param _builtins.str encapsulation: Encapsulation
                 - Choices: `gre`, `ipsec`
        :param _builtins.bool optional: Indicates if list item is considered optional.
        :param _builtins.int preference: Set preference for TLOC
                 - Range: `0`-`4294967295`
        :param _builtins.str preference_variable: Variable name
        :param _builtins.int weight: Set weight for TLOC
                 - Range: `1`-`255`
                 - Default value: `1`
        :param _builtins.str weight_variable: Variable name
        """
        if encapsulation is not None:
            pulumi.set(__self__, "encapsulation", encapsulation)
        if optional is not None:
            pulumi.set(__self__, "optional", optional)
        if preference is not None:
            pulumi.set(__self__, "preference", preference)
        if preference_variable is not None:
            pulumi.set(__self__, "preference_variable", preference_variable)
        if weight is not None:
            pulumi.set(__self__, "weight", weight)
        if weight_variable is not None:
            pulumi.set(__self__, "weight_variable", weight_variable)

    @_builtins.property
    @pulumi.getter
    def encapsulation(self) -> Optional[_builtins.str]:
        """
        Encapsulation
          - Choices: `gre`, `ipsec`
        """
        return pulumi.get(self, "encapsulation")

    @_builtins.property
    @pulumi.getter
    def optional(self) -> Optional[_builtins.bool]:
        """
        Indicates if list item is considered optional.
        """
        return pulumi.get(self, "optional")

    @_builtins.property
    @pulumi.getter
    def preference(self) -> Optional[_builtins.int]:
        """
        Set preference for TLOC
          - Range: `0`-`4294967295`
        """
        return pulumi.get(self, "preference")

    @_builtins.property
    @pulumi.getter(name="preferenceVariable")
    def preference_variable(self) -> Optional[_builtins.str]:
        """
        Variable name
        """
        return pulumi.get(self, "preference_variable")

    @_builtins.property
    @pulumi.getter
    def weight(self) -> Optional[_builtins.int]:
        """
        Set weight for TLOC
          - Range: `1`-`255`
          - Default value: `1`
        """
        return pulumi.get(self, "weight")

    @_builtins.property
    @pulumi.getter(name="weightVariable")
    def weight_variable(self) -> Optional[_builtins.str]:
        """
        Variable name
        """
        return pulumi.get(self, "weight_variable")


@pulumi.output_type
class VpnListPolicyObjectEntry(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "vpnId":
            suggest = "vpn_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in VpnListPolicyObjectEntry. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        VpnListPolicyObjectEntry.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        VpnListPolicyObjectEntry.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 vpn_id: _builtins.str):
        """
        :param _builtins.str vpn_id: VPN ID or range of VPN IDs e.g., `100` or `200-300`
        """
        pulumi.set(__self__, "vpn_id", vpn_id)

    @_builtins.property
    @pulumi.getter(name="vpnId")
    def vpn_id(self) -> _builtins.str:
        """
        VPN ID or range of VPN IDs e.g., `100` or `200-300`
        """
        return pulumi.get(self, "vpn_id")


@pulumi.output_type
class VpnMembershipPolicyDefinitionSite(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "siteListId":
            suggest = "site_list_id"
        elif key == "siteListVersion":
            suggest = "site_list_version"
        elif key == "vpnListIds":
            suggest = "vpn_list_ids"
        elif key == "vpnListVersions":
            suggest = "vpn_list_versions"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in VpnMembershipPolicyDefinitionSite. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        VpnMembershipPolicyDefinitionSite.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        VpnMembershipPolicyDefinitionSite.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 site_list_id: Optional[_builtins.str] = None,
                 site_list_version: Optional[_builtins.int] = None,
                 vpn_list_ids: Optional[Sequence[_builtins.str]] = None,
                 vpn_list_versions: Optional[Sequence[_builtins.str]] = None):
        """
        :param _builtins.str site_list_id: Site list ID
        :param _builtins.int site_list_version: Site list version
        :param Sequence[_builtins.str] vpn_list_ids: VPN list IDs
        :param Sequence[_builtins.str] vpn_list_versions: VPN list versions
        """
        if site_list_id is not None:
            pulumi.set(__self__, "site_list_id", site_list_id)
        if site_list_version is not None:
            pulumi.set(__self__, "site_list_version", site_list_version)
        if vpn_list_ids is not None:
            pulumi.set(__self__, "vpn_list_ids", vpn_list_ids)
        if vpn_list_versions is not None:
            pulumi.set(__self__, "vpn_list_versions", vpn_list_versions)

    @_builtins.property
    @pulumi.getter(name="siteListId")
    def site_list_id(self) -> Optional[_builtins.str]:
        """
        Site list ID
        """
        return pulumi.get(self, "site_list_id")

    @_builtins.property
    @pulumi.getter(name="siteListVersion")
    def site_list_version(self) -> Optional[_builtins.int]:
        """
        Site list version
        """
        return pulumi.get(self, "site_list_version")

    @_builtins.property
    @pulumi.getter(name="vpnListIds")
    def vpn_list_ids(self) -> Optional[Sequence[_builtins.str]]:
        """
        VPN list IDs
        """
        return pulumi.get(self, "vpn_list_ids")

    @_builtins.property
    @pulumi.getter(name="vpnListVersions")
    def vpn_list_versions(self) -> Optional[Sequence[_builtins.str]]:
        """
        VPN list versions
        """
        return pulumi.get(self, "vpn_list_versions")


@pulumi.output_type
class ZoneBasedFirewallPolicyDefinitionApplyZonePair(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "destinationZone":
            suggest = "destination_zone"
        elif key == "sourceZone":
            suggest = "source_zone"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ZoneBasedFirewallPolicyDefinitionApplyZonePair. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ZoneBasedFirewallPolicyDefinitionApplyZonePair.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ZoneBasedFirewallPolicyDefinitionApplyZonePair.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 destination_zone: Optional[_builtins.str] = None,
                 source_zone: Optional[_builtins.str] = None):
        """
        :param _builtins.str destination_zone: Destination Zone
        :param _builtins.str source_zone: Source Zone
        """
        if destination_zone is not None:
            pulumi.set(__self__, "destination_zone", destination_zone)
        if source_zone is not None:
            pulumi.set(__self__, "source_zone", source_zone)

    @_builtins.property
    @pulumi.getter(name="destinationZone")
    def destination_zone(self) -> Optional[_builtins.str]:
        """
        Destination Zone
        """
        return pulumi.get(self, "destination_zone")

    @_builtins.property
    @pulumi.getter(name="sourceZone")
    def source_zone(self) -> Optional[_builtins.str]:
        """
        Source Zone
        """
        return pulumi.get(self, "source_zone")


@pulumi.output_type
class ZoneBasedFirewallPolicyDefinitionRule(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "baseAction":
            suggest = "base_action"
        elif key == "ruleName":
            suggest = "rule_name"
        elif key == "ruleOrder":
            suggest = "rule_order"
        elif key == "actionEntries":
            suggest = "action_entries"
        elif key == "matchEntries":
            suggest = "match_entries"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ZoneBasedFirewallPolicyDefinitionRule. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ZoneBasedFirewallPolicyDefinitionRule.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ZoneBasedFirewallPolicyDefinitionRule.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 base_action: _builtins.str,
                 rule_name: _builtins.str,
                 rule_order: _builtins.int,
                 action_entries: Optional[Sequence['outputs.ZoneBasedFirewallPolicyDefinitionRuleActionEntry']] = None,
                 match_entries: Optional[Sequence['outputs.ZoneBasedFirewallPolicyDefinitionRuleMatchEntry']] = None):
        """
        :param _builtins.str base_action: Base action
                 - Choices: `pass`, `drop`, `inspect`
        :param _builtins.str rule_name: Rule name
        :param _builtins.int rule_order: Rule
        :param Sequence['ZoneBasedFirewallPolicyDefinitionRuleActionEntryArgs'] action_entries: List of actions entries
        :param Sequence['ZoneBasedFirewallPolicyDefinitionRuleMatchEntryArgs'] match_entries: List of match entries
        """
        pulumi.set(__self__, "base_action", base_action)
        pulumi.set(__self__, "rule_name", rule_name)
        pulumi.set(__self__, "rule_order", rule_order)
        if action_entries is not None:
            pulumi.set(__self__, "action_entries", action_entries)
        if match_entries is not None:
            pulumi.set(__self__, "match_entries", match_entries)

    @_builtins.property
    @pulumi.getter(name="baseAction")
    def base_action(self) -> _builtins.str:
        """
        Base action
          - Choices: `pass`, `drop`, `inspect`
        """
        return pulumi.get(self, "base_action")

    @_builtins.property
    @pulumi.getter(name="ruleName")
    def rule_name(self) -> _builtins.str:
        """
        Rule name
        """
        return pulumi.get(self, "rule_name")

    @_builtins.property
    @pulumi.getter(name="ruleOrder")
    def rule_order(self) -> _builtins.int:
        """
        Rule
        """
        return pulumi.get(self, "rule_order")

    @_builtins.property
    @pulumi.getter(name="actionEntries")
    def action_entries(self) -> Optional[Sequence['outputs.ZoneBasedFirewallPolicyDefinitionRuleActionEntry']]:
        """
        List of actions entries
        """
        return pulumi.get(self, "action_entries")

    @_builtins.property
    @pulumi.getter(name="matchEntries")
    def match_entries(self) -> Optional[Sequence['outputs.ZoneBasedFirewallPolicyDefinitionRuleMatchEntry']]:
        """
        List of match entries
        """
        return pulumi.get(self, "match_entries")


@pulumi.output_type
class ZoneBasedFirewallPolicyDefinitionRuleActionEntry(dict):
    def __init__(__self__, *,
                 type: Optional[_builtins.str] = None):
        """
        :param _builtins.str type: Type of action entry
                 - Choices: `log`, `connectionEvents`, `advancedInspectionProfile`
        """
        if type is not None:
            pulumi.set(__self__, "type", type)

    @_builtins.property
    @pulumi.getter
    def type(self) -> Optional[_builtins.str]:
        """
        Type of action entry
          - Choices: `log`, `connectionEvents`, `advancedInspectionProfile`
        """
        return pulumi.get(self, "type")


@pulumi.output_type
class ZoneBasedFirewallPolicyDefinitionRuleMatchEntry(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "policyId":
            suggest = "policy_id"
        elif key == "protocolType":
            suggest = "protocol_type"
        elif key == "valueVariable":
            suggest = "value_variable"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ZoneBasedFirewallPolicyDefinitionRuleMatchEntry. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ZoneBasedFirewallPolicyDefinitionRuleMatchEntry.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ZoneBasedFirewallPolicyDefinitionRuleMatchEntry.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 type: _builtins.str,
                 policy_id: Optional[_builtins.str] = None,
                 protocol_type: Optional[_builtins.str] = None,
                 value: Optional[_builtins.str] = None,
                 value_variable: Optional[_builtins.str] = None):
        """
        :param _builtins.str type: Type of match entry
                 - Choices: `sourceFqdnList`, `sourceDataPrefixList`, `sourceGeoLocationList`, `sourcePortList`, `destinationFqdnList`, `destinationDataPrefixList`, `destinationGeoLocationList`, `destinationPortList`, `appList`, `appListFlat`, `protocolNameList`, `sourceIp`, `sourcePort`, `sourceFqdn`, `destinationIp`, `destinationFqdn`, `destinationPort`, `sourceGeoLocation`, `destinationGeoLocation`, `protocolName`, `protocol`, `app`, `ruleSetList`
        :param _builtins.str policy_id: policy id for selected match entry
        :param _builtins.str protocol_type: Should be included with additionally entries for `destinationPort` and `protocol` whenever the type `protocolName` is used.
        :param _builtins.str value: value for selected match entry
        :param _builtins.str value_variable: variable value for selected match entry if it has variable option (sourceIp & destinationIp)
        """
        pulumi.set(__self__, "type", type)
        if policy_id is not None:
            pulumi.set(__self__, "policy_id", policy_id)
        if protocol_type is not None:
            pulumi.set(__self__, "protocol_type", protocol_type)
        if value is not None:
            pulumi.set(__self__, "value", value)
        if value_variable is not None:
            pulumi.set(__self__, "value_variable", value_variable)

    @_builtins.property
    @pulumi.getter
    def type(self) -> _builtins.str:
        """
        Type of match entry
          - Choices: `sourceFqdnList`, `sourceDataPrefixList`, `sourceGeoLocationList`, `sourcePortList`, `destinationFqdnList`, `destinationDataPrefixList`, `destinationGeoLocationList`, `destinationPortList`, `appList`, `appListFlat`, `protocolNameList`, `sourceIp`, `sourcePort`, `sourceFqdn`, `destinationIp`, `destinationFqdn`, `destinationPort`, `sourceGeoLocation`, `destinationGeoLocation`, `protocolName`, `protocol`, `app`, `ruleSetList`
        """
        return pulumi.get(self, "type")

    @_builtins.property
    @pulumi.getter(name="policyId")
    def policy_id(self) -> Optional[_builtins.str]:
        """
        policy id for selected match entry
        """
        return pulumi.get(self, "policy_id")

    @_builtins.property
    @pulumi.getter(name="protocolType")
    def protocol_type(self) -> Optional[_builtins.str]:
        """
        Should be included with additionally entries for `destinationPort` and `protocol` whenever the type `protocolName` is used.
        """
        return pulumi.get(self, "protocol_type")

    @_builtins.property
    @pulumi.getter
    def value(self) -> Optional[_builtins.str]:
        """
        value for selected match entry
        """
        return pulumi.get(self, "value")

    @_builtins.property
    @pulumi.getter(name="valueVariable")
    def value_variable(self) -> Optional[_builtins.str]:
        """
        variable value for selected match entry if it has variable option (sourceIp & destinationIp)
        """
        return pulumi.get(self, "value_variable")


@pulumi.output_type
class ZoneListPolicyObjectEntry(dict):
    def __init__(__self__, *,
                 interface: Optional[_builtins.str] = None,
                 vpn: Optional[_builtins.str] = None):
        """
        :param _builtins.str interface: Interface name
        :param _builtins.str vpn: VPN ID
        """
        if interface is not None:
            pulumi.set(__self__, "interface", interface)
        if vpn is not None:
            pulumi.set(__self__, "vpn", vpn)

    @_builtins.property
    @pulumi.getter
    def interface(self) -> Optional[_builtins.str]:
        """
        Interface name
        """
        return pulumi.get(self, "interface")

    @_builtins.property
    @pulumi.getter
    def vpn(self) -> Optional[_builtins.str]:
        """
        VPN ID
        """
        return pulumi.get(self, "vpn")


@pulumi.output_type
class GetAllowUrlListPolicyObjectEntryResult(dict):
    def __init__(__self__, *,
                 url: _builtins.str):
        """
        :param _builtins.str url: URL
        """
        pulumi.set(__self__, "url", url)

    @_builtins.property
    @pulumi.getter
    def url(self) -> _builtins.str:
        """
        URL
        """
        return pulumi.get(self, "url")


@pulumi.output_type
class GetAppProbeClassPolicyObjectMappingResult(dict):
    def __init__(__self__, *,
                 color: _builtins.str,
                 dscp: _builtins.int):
        """
        :param _builtins.str color: Color
        :param _builtins.int dscp: DSCP
        """
        pulumi.set(__self__, "color", color)
        pulumi.set(__self__, "dscp", dscp)

    @_builtins.property
    @pulumi.getter
    def color(self) -> _builtins.str:
        """
        Color
        """
        return pulumi.get(self, "color")

    @_builtins.property
    @pulumi.getter
    def dscp(self) -> _builtins.int:
        """
        DSCP
        """
        return pulumi.get(self, "dscp")


@pulumi.output_type
class GetApplicationAwareRoutingPolicyDefinitionSequenceResult(dict):
    def __init__(__self__, *,
                 action_entries: Sequence['outputs.GetApplicationAwareRoutingPolicyDefinitionSequenceActionEntryResult'],
                 id: _builtins.int,
                 ip_type: _builtins.str,
                 match_entries: Sequence['outputs.GetApplicationAwareRoutingPolicyDefinitionSequenceMatchEntryResult'],
                 name: _builtins.str):
        """
        :param Sequence['GetApplicationAwareRoutingPolicyDefinitionSequenceActionEntryArgs'] action_entries: List of action entries
        :param _builtins.int id: Sequence ID
        :param _builtins.str ip_type: Sequence IP type, either `ipv4`, `ipv6` or `all`
        :param Sequence['GetApplicationAwareRoutingPolicyDefinitionSequenceMatchEntryArgs'] match_entries: List of match entries
        :param _builtins.str name: Sequence name
        """
        pulumi.set(__self__, "action_entries", action_entries)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "ip_type", ip_type)
        pulumi.set(__self__, "match_entries", match_entries)
        pulumi.set(__self__, "name", name)

    @_builtins.property
    @pulumi.getter(name="actionEntries")
    def action_entries(self) -> Sequence['outputs.GetApplicationAwareRoutingPolicyDefinitionSequenceActionEntryResult']:
        """
        List of action entries
        """
        return pulumi.get(self, "action_entries")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.int:
        """
        Sequence ID
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter(name="ipType")
    def ip_type(self) -> _builtins.str:
        """
        Sequence IP type, either `ipv4`, `ipv6` or `all`
        """
        return pulumi.get(self, "ip_type")

    @_builtins.property
    @pulumi.getter(name="matchEntries")
    def match_entries(self) -> Sequence['outputs.GetApplicationAwareRoutingPolicyDefinitionSequenceMatchEntryResult']:
        """
        List of match entries
        """
        return pulumi.get(self, "match_entries")

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        """
        Sequence name
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class GetApplicationAwareRoutingPolicyDefinitionSequenceActionEntryResult(dict):
    def __init__(__self__, *,
                 backup_sla_preferred_color: _builtins.str,
                 cloud_sla: _builtins.bool,
                 counter: _builtins.str,
                 log: _builtins.bool,
                 sla_class_parameters: Sequence['outputs.GetApplicationAwareRoutingPolicyDefinitionSequenceActionEntrySlaClassParameterResult'],
                 type: _builtins.str):
        """
        :param _builtins.str backup_sla_preferred_color: Backup SLA preferred color (Single value or multiple values separated by spaces)
        :param _builtins.bool cloud_sla: Cloud SLA
        :param _builtins.str counter: Counter name
        :param _builtins.bool log: Enable logging
        :param Sequence['GetApplicationAwareRoutingPolicyDefinitionSequenceActionEntrySlaClassParameterArgs'] sla_class_parameters: List of SLA class parameters
        :param _builtins.str type: Type of action entry
        """
        pulumi.set(__self__, "backup_sla_preferred_color", backup_sla_preferred_color)
        pulumi.set(__self__, "cloud_sla", cloud_sla)
        pulumi.set(__self__, "counter", counter)
        pulumi.set(__self__, "log", log)
        pulumi.set(__self__, "sla_class_parameters", sla_class_parameters)
        pulumi.set(__self__, "type", type)

    @_builtins.property
    @pulumi.getter(name="backupSlaPreferredColor")
    def backup_sla_preferred_color(self) -> _builtins.str:
        """
        Backup SLA preferred color (Single value or multiple values separated by spaces)
        """
        return pulumi.get(self, "backup_sla_preferred_color")

    @_builtins.property
    @pulumi.getter(name="cloudSla")
    def cloud_sla(self) -> _builtins.bool:
        """
        Cloud SLA
        """
        return pulumi.get(self, "cloud_sla")

    @_builtins.property
    @pulumi.getter
    def counter(self) -> _builtins.str:
        """
        Counter name
        """
        return pulumi.get(self, "counter")

    @_builtins.property
    @pulumi.getter
    def log(self) -> _builtins.bool:
        """
        Enable logging
        """
        return pulumi.get(self, "log")

    @_builtins.property
    @pulumi.getter(name="slaClassParameters")
    def sla_class_parameters(self) -> Sequence['outputs.GetApplicationAwareRoutingPolicyDefinitionSequenceActionEntrySlaClassParameterResult']:
        """
        List of SLA class parameters
        """
        return pulumi.get(self, "sla_class_parameters")

    @_builtins.property
    @pulumi.getter
    def type(self) -> _builtins.str:
        """
        Type of action entry
        """
        return pulumi.get(self, "type")


@pulumi.output_type
class GetApplicationAwareRoutingPolicyDefinitionSequenceActionEntrySlaClassParameterResult(dict):
    def __init__(__self__, *,
                 preferred_color: _builtins.str,
                 preferred_color_group_list_id: _builtins.str,
                 preferred_color_group_list_version: _builtins.int,
                 sla_class_list_id: _builtins.str,
                 sla_class_list_version: _builtins.int,
                 type: _builtins.str):
        """
        :param _builtins.str preferred_color: preferred color (Single value or multiple values separated by spaces)
        :param _builtins.str preferred_color_group_list_id: Preferred color group list ID
        :param _builtins.int preferred_color_group_list_version: Preferred color group list version
        :param _builtins.str sla_class_list_id: SLA class list ID
        :param _builtins.int sla_class_list_version: SLA class list version
        :param _builtins.str type: Type of SLA class parameter
        """
        pulumi.set(__self__, "preferred_color", preferred_color)
        pulumi.set(__self__, "preferred_color_group_list_id", preferred_color_group_list_id)
        pulumi.set(__self__, "preferred_color_group_list_version", preferred_color_group_list_version)
        pulumi.set(__self__, "sla_class_list_id", sla_class_list_id)
        pulumi.set(__self__, "sla_class_list_version", sla_class_list_version)
        pulumi.set(__self__, "type", type)

    @_builtins.property
    @pulumi.getter(name="preferredColor")
    def preferred_color(self) -> _builtins.str:
        """
        preferred color (Single value or multiple values separated by spaces)
        """
        return pulumi.get(self, "preferred_color")

    @_builtins.property
    @pulumi.getter(name="preferredColorGroupListId")
    def preferred_color_group_list_id(self) -> _builtins.str:
        """
        Preferred color group list ID
        """
        return pulumi.get(self, "preferred_color_group_list_id")

    @_builtins.property
    @pulumi.getter(name="preferredColorGroupListVersion")
    def preferred_color_group_list_version(self) -> _builtins.int:
        """
        Preferred color group list version
        """
        return pulumi.get(self, "preferred_color_group_list_version")

    @_builtins.property
    @pulumi.getter(name="slaClassListId")
    def sla_class_list_id(self) -> _builtins.str:
        """
        SLA class list ID
        """
        return pulumi.get(self, "sla_class_list_id")

    @_builtins.property
    @pulumi.getter(name="slaClassListVersion")
    def sla_class_list_version(self) -> _builtins.int:
        """
        SLA class list version
        """
        return pulumi.get(self, "sla_class_list_version")

    @_builtins.property
    @pulumi.getter
    def type(self) -> _builtins.str:
        """
        Type of SLA class parameter
        """
        return pulumi.get(self, "type")


@pulumi.output_type
class GetApplicationAwareRoutingPolicyDefinitionSequenceMatchEntryResult(dict):
    def __init__(__self__, *,
                 application_list_id: _builtins.str,
                 application_list_version: _builtins.int,
                 destination_data_prefix_list_id: _builtins.str,
                 destination_data_prefix_list_version: _builtins.int,
                 destination_ip: _builtins.str,
                 destination_port: _builtins.str,
                 destination_region: _builtins.str,
                 dns: _builtins.str,
                 dns_application_list_id: _builtins.str,
                 dns_application_list_version: _builtins.int,
                 dscp: _builtins.str,
                 icmp_message: _builtins.str,
                 plp: _builtins.str,
                 protocol: _builtins.str,
                 source_data_prefix_list_id: _builtins.str,
                 source_data_prefix_list_version: _builtins.int,
                 source_ip: _builtins.str,
                 source_port: _builtins.str,
                 traffic_to: _builtins.str,
                 type: _builtins.str):
        """
        :param _builtins.str application_list_id: Application list ID
        :param _builtins.int application_list_version: Application list version
        :param _builtins.str destination_data_prefix_list_id: Destination Data Prefix list ID
        :param _builtins.int destination_data_prefix_list_version: Destination Data Prefix list version
        :param _builtins.str destination_ip: Destination IP
        :param _builtins.str destination_port: Destination port, 0-65535 (Single value, range or multiple values separated by spaces)
        :param _builtins.str destination_region: Destination region
        :param _builtins.str dns: DNS request or response
        :param _builtins.str dns_application_list_id: DNS Application list ID
        :param _builtins.int dns_application_list_version: DNS Application list version
        :param _builtins.str dscp: DSCP value
        :param _builtins.str icmp_message: ICMP Message
        :param _builtins.str plp: PLP
        :param _builtins.str protocol: IP Protocol, 0-255 (Single value or multiple values separated by spaces)
        :param _builtins.str source_data_prefix_list_id: Source Data Prefix list ID
        :param _builtins.int source_data_prefix_list_version: Source Data Prefix list version
        :param _builtins.str source_ip: Source IP
        :param _builtins.str source_port: Source port, 0-65535 (Single value, range or multiple values separated by spaces)
        :param _builtins.str traffic_to: Traffic to
        :param _builtins.str type: Type of match entry
        """
        pulumi.set(__self__, "application_list_id", application_list_id)
        pulumi.set(__self__, "application_list_version", application_list_version)
        pulumi.set(__self__, "destination_data_prefix_list_id", destination_data_prefix_list_id)
        pulumi.set(__self__, "destination_data_prefix_list_version", destination_data_prefix_list_version)
        pulumi.set(__self__, "destination_ip", destination_ip)
        pulumi.set(__self__, "destination_port", destination_port)
        pulumi.set(__self__, "destination_region", destination_region)
        pulumi.set(__self__, "dns", dns)
        pulumi.set(__self__, "dns_application_list_id", dns_application_list_id)
        pulumi.set(__self__, "dns_application_list_version", dns_application_list_version)
        pulumi.set(__self__, "dscp", dscp)
        pulumi.set(__self__, "icmp_message", icmp_message)
        pulumi.set(__self__, "plp", plp)
        pulumi.set(__self__, "protocol", protocol)
        pulumi.set(__self__, "source_data_prefix_list_id", source_data_prefix_list_id)
        pulumi.set(__self__, "source_data_prefix_list_version", source_data_prefix_list_version)
        pulumi.set(__self__, "source_ip", source_ip)
        pulumi.set(__self__, "source_port", source_port)
        pulumi.set(__self__, "traffic_to", traffic_to)
        pulumi.set(__self__, "type", type)

    @_builtins.property
    @pulumi.getter(name="applicationListId")
    def application_list_id(self) -> _builtins.str:
        """
        Application list ID
        """
        return pulumi.get(self, "application_list_id")

    @_builtins.property
    @pulumi.getter(name="applicationListVersion")
    def application_list_version(self) -> _builtins.int:
        """
        Application list version
        """
        return pulumi.get(self, "application_list_version")

    @_builtins.property
    @pulumi.getter(name="destinationDataPrefixListId")
    def destination_data_prefix_list_id(self) -> _builtins.str:
        """
        Destination Data Prefix list ID
        """
        return pulumi.get(self, "destination_data_prefix_list_id")

    @_builtins.property
    @pulumi.getter(name="destinationDataPrefixListVersion")
    def destination_data_prefix_list_version(self) -> _builtins.int:
        """
        Destination Data Prefix list version
        """
        return pulumi.get(self, "destination_data_prefix_list_version")

    @_builtins.property
    @pulumi.getter(name="destinationIp")
    def destination_ip(self) -> _builtins.str:
        """
        Destination IP
        """
        return pulumi.get(self, "destination_ip")

    @_builtins.property
    @pulumi.getter(name="destinationPort")
    def destination_port(self) -> _builtins.str:
        """
        Destination port, 0-65535 (Single value, range or multiple values separated by spaces)
        """
        return pulumi.get(self, "destination_port")

    @_builtins.property
    @pulumi.getter(name="destinationRegion")
    def destination_region(self) -> _builtins.str:
        """
        Destination region
        """
        return pulumi.get(self, "destination_region")

    @_builtins.property
    @pulumi.getter
    def dns(self) -> _builtins.str:
        """
        DNS request or response
        """
        return pulumi.get(self, "dns")

    @_builtins.property
    @pulumi.getter(name="dnsApplicationListId")
    def dns_application_list_id(self) -> _builtins.str:
        """
        DNS Application list ID
        """
        return pulumi.get(self, "dns_application_list_id")

    @_builtins.property
    @pulumi.getter(name="dnsApplicationListVersion")
    def dns_application_list_version(self) -> _builtins.int:
        """
        DNS Application list version
        """
        return pulumi.get(self, "dns_application_list_version")

    @_builtins.property
    @pulumi.getter
    def dscp(self) -> _builtins.str:
        """
        DSCP value
        """
        return pulumi.get(self, "dscp")

    @_builtins.property
    @pulumi.getter(name="icmpMessage")
    def icmp_message(self) -> _builtins.str:
        """
        ICMP Message
        """
        return pulumi.get(self, "icmp_message")

    @_builtins.property
    @pulumi.getter
    def plp(self) -> _builtins.str:
        """
        PLP
        """
        return pulumi.get(self, "plp")

    @_builtins.property
    @pulumi.getter
    def protocol(self) -> _builtins.str:
        """
        IP Protocol, 0-255 (Single value or multiple values separated by spaces)
        """
        return pulumi.get(self, "protocol")

    @_builtins.property
    @pulumi.getter(name="sourceDataPrefixListId")
    def source_data_prefix_list_id(self) -> _builtins.str:
        """
        Source Data Prefix list ID
        """
        return pulumi.get(self, "source_data_prefix_list_id")

    @_builtins.property
    @pulumi.getter(name="sourceDataPrefixListVersion")
    def source_data_prefix_list_version(self) -> _builtins.int:
        """
        Source Data Prefix list version
        """
        return pulumi.get(self, "source_data_prefix_list_version")

    @_builtins.property
    @pulumi.getter(name="sourceIp")
    def source_ip(self) -> _builtins.str:
        """
        Source IP
        """
        return pulumi.get(self, "source_ip")

    @_builtins.property
    @pulumi.getter(name="sourcePort")
    def source_port(self) -> _builtins.str:
        """
        Source port, 0-65535 (Single value, range or multiple values separated by spaces)
        """
        return pulumi.get(self, "source_port")

    @_builtins.property
    @pulumi.getter(name="trafficTo")
    def traffic_to(self) -> _builtins.str:
        """
        Traffic to
        """
        return pulumi.get(self, "traffic_to")

    @_builtins.property
    @pulumi.getter
    def type(self) -> _builtins.str:
        """
        Type of match entry
        """
        return pulumi.get(self, "type")


@pulumi.output_type
class GetApplicationListPolicyObjectEntryResult(dict):
    def __init__(__self__, *,
                 application: _builtins.str,
                 application_family: _builtins.str):
        """
        :param _builtins.str application: Application name
        :param _builtins.str application_family: Application family name
        """
        pulumi.set(__self__, "application", application)
        pulumi.set(__self__, "application_family", application_family)

    @_builtins.property
    @pulumi.getter
    def application(self) -> _builtins.str:
        """
        Application name
        """
        return pulumi.get(self, "application")

    @_builtins.property
    @pulumi.getter(name="applicationFamily")
    def application_family(self) -> _builtins.str:
        """
        Application family name
        """
        return pulumi.get(self, "application_family")


@pulumi.output_type
class GetApplicationPriorityQosPolicyQosSchedulerResult(dict):
    def __init__(__self__, *,
                 bandwidth: _builtins.str,
                 drops: _builtins.str,
                 forwarding_class_id: _builtins.str,
                 queue: _builtins.str,
                 scheduling_type: _builtins.str):
        """
        :param _builtins.str bandwidth: bandwidthPercent
        :param _builtins.str drops: drops
        :param _builtins.str queue: queue
        :param _builtins.str scheduling_type: scheduling
        """
        pulumi.set(__self__, "bandwidth", bandwidth)
        pulumi.set(__self__, "drops", drops)
        pulumi.set(__self__, "forwarding_class_id", forwarding_class_id)
        pulumi.set(__self__, "queue", queue)
        pulumi.set(__self__, "scheduling_type", scheduling_type)

    @_builtins.property
    @pulumi.getter
    def bandwidth(self) -> _builtins.str:
        """
        bandwidthPercent
        """
        return pulumi.get(self, "bandwidth")

    @_builtins.property
    @pulumi.getter
    def drops(self) -> _builtins.str:
        """
        drops
        """
        return pulumi.get(self, "drops")

    @_builtins.property
    @pulumi.getter(name="forwardingClassId")
    def forwarding_class_id(self) -> _builtins.str:
        return pulumi.get(self, "forwarding_class_id")

    @_builtins.property
    @pulumi.getter
    def queue(self) -> _builtins.str:
        """
        queue
        """
        return pulumi.get(self, "queue")

    @_builtins.property
    @pulumi.getter(name="schedulingType")
    def scheduling_type(self) -> _builtins.str:
        """
        scheduling
        """
        return pulumi.get(self, "scheduling_type")


@pulumi.output_type
class GetApplicationPriorityTrafficPolicyPolicySequenceResult(dict):
    def __init__(__self__, *,
                 actions: Sequence['outputs.GetApplicationPriorityTrafficPolicyPolicySequenceActionResult'],
                 base_action: _builtins.str,
                 match_entries: Sequence['outputs.GetApplicationPriorityTrafficPolicyPolicySequenceMatchEntryResult'],
                 protocol: _builtins.str,
                 sequence_id: _builtins.int,
                 sequence_name: _builtins.str):
        """
        :param _builtins.str base_action: Base Action
        :param _builtins.str protocol: Sequence IP Type
        :param _builtins.int sequence_id: Sequence Id
        :param _builtins.str sequence_name: Sequence Name
        """
        pulumi.set(__self__, "actions", actions)
        pulumi.set(__self__, "base_action", base_action)
        pulumi.set(__self__, "match_entries", match_entries)
        pulumi.set(__self__, "protocol", protocol)
        pulumi.set(__self__, "sequence_id", sequence_id)
        pulumi.set(__self__, "sequence_name", sequence_name)

    @_builtins.property
    @pulumi.getter
    def actions(self) -> Sequence['outputs.GetApplicationPriorityTrafficPolicyPolicySequenceActionResult']:
        return pulumi.get(self, "actions")

    @_builtins.property
    @pulumi.getter(name="baseAction")
    def base_action(self) -> _builtins.str:
        """
        Base Action
        """
        return pulumi.get(self, "base_action")

    @_builtins.property
    @pulumi.getter(name="matchEntries")
    def match_entries(self) -> Sequence['outputs.GetApplicationPriorityTrafficPolicyPolicySequenceMatchEntryResult']:
        return pulumi.get(self, "match_entries")

    @_builtins.property
    @pulumi.getter
    def protocol(self) -> _builtins.str:
        """
        Sequence IP Type
        """
        return pulumi.get(self, "protocol")

    @_builtins.property
    @pulumi.getter(name="sequenceId")
    def sequence_id(self) -> _builtins.int:
        """
        Sequence Id
        """
        return pulumi.get(self, "sequence_id")

    @_builtins.property
    @pulumi.getter(name="sequenceName")
    def sequence_name(self) -> _builtins.str:
        """
        Sequence Name
        """
        return pulumi.get(self, "sequence_name")


@pulumi.output_type
class GetApplicationPriorityTrafficPolicyPolicySequenceActionResult(dict):
    def __init__(__self__, *,
                 backup_sla_preferred_colors: Sequence[_builtins.str],
                 cloud_probe: _builtins.bool,
                 cloud_saas: _builtins.bool,
                 count: _builtins.str,
                 fallback_to_routing: _builtins.bool,
                 log: _builtins.bool,
                 loss_correct_fec_threshold: _builtins.int,
                 loss_correct_type: _builtins.str,
                 nat_bypass: _builtins.bool,
                 nat_dia_interfaces: Sequence[_builtins.str],
                 nat_dia_pools: Sequence[_builtins.int],
                 nat_fallback: _builtins.bool,
                 nat_pool: _builtins.int,
                 nat_vpn: _builtins.bool,
                 redirect_dns_field: _builtins.str,
                 redirect_dns_value: _builtins.str,
                 secure_internet_gateway: _builtins.bool,
                 set_parameters: Sequence['outputs.GetApplicationPriorityTrafficPolicyPolicySequenceActionSetParameterResult'],
                 sla_classes: Sequence['outputs.GetApplicationPriorityTrafficPolicyPolicySequenceActionSlaClassResult']):
        """
        :param Sequence[_builtins.str] backup_sla_preferred_colors: Backup SLA perferred color
        :param Sequence['GetApplicationPriorityTrafficPolicyPolicySequenceActionSlaClassArgs'] sla_classes: slaClass
        """
        pulumi.set(__self__, "backup_sla_preferred_colors", backup_sla_preferred_colors)
        pulumi.set(__self__, "cloud_probe", cloud_probe)
        pulumi.set(__self__, "cloud_saas", cloud_saas)
        pulumi.set(__self__, "count", count)
        pulumi.set(__self__, "fallback_to_routing", fallback_to_routing)
        pulumi.set(__self__, "log", log)
        pulumi.set(__self__, "loss_correct_fec_threshold", loss_correct_fec_threshold)
        pulumi.set(__self__, "loss_correct_type", loss_correct_type)
        pulumi.set(__self__, "nat_bypass", nat_bypass)
        pulumi.set(__self__, "nat_dia_interfaces", nat_dia_interfaces)
        pulumi.set(__self__, "nat_dia_pools", nat_dia_pools)
        pulumi.set(__self__, "nat_fallback", nat_fallback)
        pulumi.set(__self__, "nat_pool", nat_pool)
        pulumi.set(__self__, "nat_vpn", nat_vpn)
        pulumi.set(__self__, "redirect_dns_field", redirect_dns_field)
        pulumi.set(__self__, "redirect_dns_value", redirect_dns_value)
        pulumi.set(__self__, "secure_internet_gateway", secure_internet_gateway)
        pulumi.set(__self__, "set_parameters", set_parameters)
        pulumi.set(__self__, "sla_classes", sla_classes)

    @_builtins.property
    @pulumi.getter(name="backupSlaPreferredColors")
    def backup_sla_preferred_colors(self) -> Sequence[_builtins.str]:
        """
        Backup SLA perferred color
        """
        return pulumi.get(self, "backup_sla_preferred_colors")

    @_builtins.property
    @pulumi.getter(name="cloudProbe")
    def cloud_probe(self) -> _builtins.bool:
        return pulumi.get(self, "cloud_probe")

    @_builtins.property
    @pulumi.getter(name="cloudSaas")
    def cloud_saas(self) -> _builtins.bool:
        return pulumi.get(self, "cloud_saas")

    @_builtins.property
    @pulumi.getter
    def count(self) -> _builtins.str:
        return pulumi.get(self, "count")

    @_builtins.property
    @pulumi.getter(name="fallbackToRouting")
    def fallback_to_routing(self) -> _builtins.bool:
        return pulumi.get(self, "fallback_to_routing")

    @_builtins.property
    @pulumi.getter
    def log(self) -> _builtins.bool:
        return pulumi.get(self, "log")

    @_builtins.property
    @pulumi.getter(name="lossCorrectFecThreshold")
    def loss_correct_fec_threshold(self) -> _builtins.int:
        return pulumi.get(self, "loss_correct_fec_threshold")

    @_builtins.property
    @pulumi.getter(name="lossCorrectType")
    def loss_correct_type(self) -> _builtins.str:
        return pulumi.get(self, "loss_correct_type")

    @_builtins.property
    @pulumi.getter(name="natBypass")
    def nat_bypass(self) -> _builtins.bool:
        return pulumi.get(self, "nat_bypass")

    @_builtins.property
    @pulumi.getter(name="natDiaInterfaces")
    def nat_dia_interfaces(self) -> Sequence[_builtins.str]:
        return pulumi.get(self, "nat_dia_interfaces")

    @_builtins.property
    @pulumi.getter(name="natDiaPools")
    def nat_dia_pools(self) -> Sequence[_builtins.int]:
        return pulumi.get(self, "nat_dia_pools")

    @_builtins.property
    @pulumi.getter(name="natFallback")
    def nat_fallback(self) -> _builtins.bool:
        return pulumi.get(self, "nat_fallback")

    @_builtins.property
    @pulumi.getter(name="natPool")
    def nat_pool(self) -> _builtins.int:
        return pulumi.get(self, "nat_pool")

    @_builtins.property
    @pulumi.getter(name="natVpn")
    def nat_vpn(self) -> _builtins.bool:
        return pulumi.get(self, "nat_vpn")

    @_builtins.property
    @pulumi.getter(name="redirectDnsField")
    def redirect_dns_field(self) -> _builtins.str:
        return pulumi.get(self, "redirect_dns_field")

    @_builtins.property
    @pulumi.getter(name="redirectDnsValue")
    def redirect_dns_value(self) -> _builtins.str:
        return pulumi.get(self, "redirect_dns_value")

    @_builtins.property
    @pulumi.getter(name="secureInternetGateway")
    def secure_internet_gateway(self) -> _builtins.bool:
        return pulumi.get(self, "secure_internet_gateway")

    @_builtins.property
    @pulumi.getter(name="setParameters")
    def set_parameters(self) -> Sequence['outputs.GetApplicationPriorityTrafficPolicyPolicySequenceActionSetParameterResult']:
        return pulumi.get(self, "set_parameters")

    @_builtins.property
    @pulumi.getter(name="slaClasses")
    def sla_classes(self) -> Sequence['outputs.GetApplicationPriorityTrafficPolicyPolicySequenceActionSlaClassResult']:
        """
        slaClass
        """
        return pulumi.get(self, "sla_classes")


@pulumi.output_type
class GetApplicationPriorityTrafficPolicyPolicySequenceActionSetParameterResult(dict):
    def __init__(__self__, *,
                 dscp: _builtins.int,
                 forwarding_class_list_id: _builtins.str,
                 local_tloc_list_colors: Sequence[_builtins.str],
                 local_tloc_list_encapsulation: _builtins.str,
                 local_tloc_list_restrict: _builtins.str,
                 next_hop_ipv4: _builtins.str,
                 next_hop_ipv6: _builtins.str,
                 next_hop_loose: _builtins.bool,
                 policer_id: _builtins.str,
                 preferred_color_group_id: _builtins.str,
                 preferred_remote_color_ids: Sequence[_builtins.str],
                 preferred_remote_color_restrict: _builtins.str,
                 service_chain_fallback_to_routing: _builtins.bool,
                 service_chain_local: _builtins.bool,
                 service_chain_tloc_colors: Sequence[_builtins.str],
                 service_chain_tloc_encapsulation: _builtins.str,
                 service_chain_tloc_ip: _builtins.str,
                 service_chain_tloc_list_id: _builtins.str,
                 service_chain_type: _builtins.str,
                 service_chain_vpn: _builtins.int,
                 service_tloc_colors: Sequence[_builtins.str],
                 service_tloc_encapsulation: _builtins.str,
                 service_tloc_ip: _builtins.str,
                 service_tloc_list_id: _builtins.str,
                 service_type: _builtins.str,
                 service_vpn: _builtins.str,
                 tloc_colors: Sequence[_builtins.str],
                 tloc_encapsulation: _builtins.str,
                 tloc_ip: _builtins.str,
                 tloc_list_id: _builtins.str,
                 vpn: _builtins.str):
        pulumi.set(__self__, "dscp", dscp)
        pulumi.set(__self__, "forwarding_class_list_id", forwarding_class_list_id)
        pulumi.set(__self__, "local_tloc_list_colors", local_tloc_list_colors)
        pulumi.set(__self__, "local_tloc_list_encapsulation", local_tloc_list_encapsulation)
        pulumi.set(__self__, "local_tloc_list_restrict", local_tloc_list_restrict)
        pulumi.set(__self__, "next_hop_ipv4", next_hop_ipv4)
        pulumi.set(__self__, "next_hop_ipv6", next_hop_ipv6)
        pulumi.set(__self__, "next_hop_loose", next_hop_loose)
        pulumi.set(__self__, "policer_id", policer_id)
        pulumi.set(__self__, "preferred_color_group_id", preferred_color_group_id)
        pulumi.set(__self__, "preferred_remote_color_ids", preferred_remote_color_ids)
        pulumi.set(__self__, "preferred_remote_color_restrict", preferred_remote_color_restrict)
        pulumi.set(__self__, "service_chain_fallback_to_routing", service_chain_fallback_to_routing)
        pulumi.set(__self__, "service_chain_local", service_chain_local)
        pulumi.set(__self__, "service_chain_tloc_colors", service_chain_tloc_colors)
        pulumi.set(__self__, "service_chain_tloc_encapsulation", service_chain_tloc_encapsulation)
        pulumi.set(__self__, "service_chain_tloc_ip", service_chain_tloc_ip)
        pulumi.set(__self__, "service_chain_tloc_list_id", service_chain_tloc_list_id)
        pulumi.set(__self__, "service_chain_type", service_chain_type)
        pulumi.set(__self__, "service_chain_vpn", service_chain_vpn)
        pulumi.set(__self__, "service_tloc_colors", service_tloc_colors)
        pulumi.set(__self__, "service_tloc_encapsulation", service_tloc_encapsulation)
        pulumi.set(__self__, "service_tloc_ip", service_tloc_ip)
        pulumi.set(__self__, "service_tloc_list_id", service_tloc_list_id)
        pulumi.set(__self__, "service_type", service_type)
        pulumi.set(__self__, "service_vpn", service_vpn)
        pulumi.set(__self__, "tloc_colors", tloc_colors)
        pulumi.set(__self__, "tloc_encapsulation", tloc_encapsulation)
        pulumi.set(__self__, "tloc_ip", tloc_ip)
        pulumi.set(__self__, "tloc_list_id", tloc_list_id)
        pulumi.set(__self__, "vpn", vpn)

    @_builtins.property
    @pulumi.getter
    def dscp(self) -> _builtins.int:
        return pulumi.get(self, "dscp")

    @_builtins.property
    @pulumi.getter(name="forwardingClassListId")
    def forwarding_class_list_id(self) -> _builtins.str:
        return pulumi.get(self, "forwarding_class_list_id")

    @_builtins.property
    @pulumi.getter(name="localTlocListColors")
    def local_tloc_list_colors(self) -> Sequence[_builtins.str]:
        return pulumi.get(self, "local_tloc_list_colors")

    @_builtins.property
    @pulumi.getter(name="localTlocListEncapsulation")
    def local_tloc_list_encapsulation(self) -> _builtins.str:
        return pulumi.get(self, "local_tloc_list_encapsulation")

    @_builtins.property
    @pulumi.getter(name="localTlocListRestrict")
    def local_tloc_list_restrict(self) -> _builtins.str:
        return pulumi.get(self, "local_tloc_list_restrict")

    @_builtins.property
    @pulumi.getter(name="nextHopIpv4")
    def next_hop_ipv4(self) -> _builtins.str:
        return pulumi.get(self, "next_hop_ipv4")

    @_builtins.property
    @pulumi.getter(name="nextHopIpv6")
    def next_hop_ipv6(self) -> _builtins.str:
        return pulumi.get(self, "next_hop_ipv6")

    @_builtins.property
    @pulumi.getter(name="nextHopLoose")
    def next_hop_loose(self) -> _builtins.bool:
        return pulumi.get(self, "next_hop_loose")

    @_builtins.property
    @pulumi.getter(name="policerId")
    def policer_id(self) -> _builtins.str:
        return pulumi.get(self, "policer_id")

    @_builtins.property
    @pulumi.getter(name="preferredColorGroupId")
    def preferred_color_group_id(self) -> _builtins.str:
        return pulumi.get(self, "preferred_color_group_id")

    @_builtins.property
    @pulumi.getter(name="preferredRemoteColorIds")
    def preferred_remote_color_ids(self) -> Sequence[_builtins.str]:
        return pulumi.get(self, "preferred_remote_color_ids")

    @_builtins.property
    @pulumi.getter(name="preferredRemoteColorRestrict")
    def preferred_remote_color_restrict(self) -> _builtins.str:
        return pulumi.get(self, "preferred_remote_color_restrict")

    @_builtins.property
    @pulumi.getter(name="serviceChainFallbackToRouting")
    def service_chain_fallback_to_routing(self) -> _builtins.bool:
        return pulumi.get(self, "service_chain_fallback_to_routing")

    @_builtins.property
    @pulumi.getter(name="serviceChainLocal")
    def service_chain_local(self) -> _builtins.bool:
        return pulumi.get(self, "service_chain_local")

    @_builtins.property
    @pulumi.getter(name="serviceChainTlocColors")
    def service_chain_tloc_colors(self) -> Sequence[_builtins.str]:
        return pulumi.get(self, "service_chain_tloc_colors")

    @_builtins.property
    @pulumi.getter(name="serviceChainTlocEncapsulation")
    def service_chain_tloc_encapsulation(self) -> _builtins.str:
        return pulumi.get(self, "service_chain_tloc_encapsulation")

    @_builtins.property
    @pulumi.getter(name="serviceChainTlocIp")
    def service_chain_tloc_ip(self) -> _builtins.str:
        return pulumi.get(self, "service_chain_tloc_ip")

    @_builtins.property
    @pulumi.getter(name="serviceChainTlocListId")
    def service_chain_tloc_list_id(self) -> _builtins.str:
        return pulumi.get(self, "service_chain_tloc_list_id")

    @_builtins.property
    @pulumi.getter(name="serviceChainType")
    def service_chain_type(self) -> _builtins.str:
        return pulumi.get(self, "service_chain_type")

    @_builtins.property
    @pulumi.getter(name="serviceChainVpn")
    def service_chain_vpn(self) -> _builtins.int:
        return pulumi.get(self, "service_chain_vpn")

    @_builtins.property
    @pulumi.getter(name="serviceTlocColors")
    def service_tloc_colors(self) -> Sequence[_builtins.str]:
        return pulumi.get(self, "service_tloc_colors")

    @_builtins.property
    @pulumi.getter(name="serviceTlocEncapsulation")
    def service_tloc_encapsulation(self) -> _builtins.str:
        return pulumi.get(self, "service_tloc_encapsulation")

    @_builtins.property
    @pulumi.getter(name="serviceTlocIp")
    def service_tloc_ip(self) -> _builtins.str:
        return pulumi.get(self, "service_tloc_ip")

    @_builtins.property
    @pulumi.getter(name="serviceTlocListId")
    def service_tloc_list_id(self) -> _builtins.str:
        return pulumi.get(self, "service_tloc_list_id")

    @_builtins.property
    @pulumi.getter(name="serviceType")
    def service_type(self) -> _builtins.str:
        return pulumi.get(self, "service_type")

    @_builtins.property
    @pulumi.getter(name="serviceVpn")
    def service_vpn(self) -> _builtins.str:
        return pulumi.get(self, "service_vpn")

    @_builtins.property
    @pulumi.getter(name="tlocColors")
    def tloc_colors(self) -> Sequence[_builtins.str]:
        return pulumi.get(self, "tloc_colors")

    @_builtins.property
    @pulumi.getter(name="tlocEncapsulation")
    def tloc_encapsulation(self) -> _builtins.str:
        return pulumi.get(self, "tloc_encapsulation")

    @_builtins.property
    @pulumi.getter(name="tlocIp")
    def tloc_ip(self) -> _builtins.str:
        return pulumi.get(self, "tloc_ip")

    @_builtins.property
    @pulumi.getter(name="tlocListId")
    def tloc_list_id(self) -> _builtins.str:
        return pulumi.get(self, "tloc_list_id")

    @_builtins.property
    @pulumi.getter
    def vpn(self) -> _builtins.str:
        return pulumi.get(self, "vpn")


@pulumi.output_type
class GetApplicationPriorityTrafficPolicyPolicySequenceActionSlaClassResult(dict):
    def __init__(__self__, *,
                 fallback_to_best_path: _builtins.bool,
                 preferred_color_group_list_id: _builtins.str,
                 preferred_colors: Sequence[_builtins.str],
                 preferred_remote_colors: Sequence[_builtins.str],
                 remote_color_restrict: _builtins.bool,
                 sla_class_list_id: _builtins.str,
                 strict: _builtins.bool):
        pulumi.set(__self__, "fallback_to_best_path", fallback_to_best_path)
        pulumi.set(__self__, "preferred_color_group_list_id", preferred_color_group_list_id)
        pulumi.set(__self__, "preferred_colors", preferred_colors)
        pulumi.set(__self__, "preferred_remote_colors", preferred_remote_colors)
        pulumi.set(__self__, "remote_color_restrict", remote_color_restrict)
        pulumi.set(__self__, "sla_class_list_id", sla_class_list_id)
        pulumi.set(__self__, "strict", strict)

    @_builtins.property
    @pulumi.getter(name="fallbackToBestPath")
    def fallback_to_best_path(self) -> _builtins.bool:
        return pulumi.get(self, "fallback_to_best_path")

    @_builtins.property
    @pulumi.getter(name="preferredColorGroupListId")
    def preferred_color_group_list_id(self) -> _builtins.str:
        return pulumi.get(self, "preferred_color_group_list_id")

    @_builtins.property
    @pulumi.getter(name="preferredColors")
    def preferred_colors(self) -> Sequence[_builtins.str]:
        return pulumi.get(self, "preferred_colors")

    @_builtins.property
    @pulumi.getter(name="preferredRemoteColors")
    def preferred_remote_colors(self) -> Sequence[_builtins.str]:
        return pulumi.get(self, "preferred_remote_colors")

    @_builtins.property
    @pulumi.getter(name="remoteColorRestrict")
    def remote_color_restrict(self) -> _builtins.bool:
        return pulumi.get(self, "remote_color_restrict")

    @_builtins.property
    @pulumi.getter(name="slaClassListId")
    def sla_class_list_id(self) -> _builtins.str:
        return pulumi.get(self, "sla_class_list_id")

    @_builtins.property
    @pulumi.getter
    def strict(self) -> _builtins.bool:
        return pulumi.get(self, "strict")


@pulumi.output_type
class GetApplicationPriorityTrafficPolicyPolicySequenceMatchEntryResult(dict):
    def __init__(__self__, *,
                 application_list_id: _builtins.str,
                 destination_data_ipv4_prefix_list_id: _builtins.str,
                 destination_data_ipv6_prefix_list_id: _builtins.str,
                 destination_ipv4_prefix: _builtins.str,
                 destination_ipv6_prefix: _builtins.str,
                 destination_ports: Sequence[_builtins.str],
                 destination_region: _builtins.str,
                 dns: _builtins.str,
                 dns_application_list_id: _builtins.str,
                 dscp: _builtins.int,
                 icmp6_messages: Sequence[_builtins.str],
                 icmp_messages: Sequence[_builtins.str],
                 packet_length: _builtins.str,
                 protocols: Sequence[_builtins.str],
                 saas_application_list_id: _builtins.str,
                 service_areas: Sequence[_builtins.str],
                 source_data_ipv4_prefx_list_id: _builtins.str,
                 source_data_ipv6_prefx_list_id: _builtins.str,
                 source_ipv4_prefix: _builtins.str,
                 source_ipv6_prefix: _builtins.str,
                 source_ports: Sequence[_builtins.str],
                 tcp: _builtins.str,
                 traffic_category: _builtins.str,
                 traffic_class: _builtins.str,
                 traffic_to: _builtins.str):
        """
        :param _builtins.str destination_ipv4_prefix: Destination Data IP Prefix
        :param _builtins.str destination_ipv6_prefix: Destination Data IP Prefix
        :param Sequence[_builtins.str] destination_ports: Destination Port (0-65535) range or individual number separated by space
        :param _builtins.str destination_region: Destination Region
        :param _builtins.str dns: Dns
        :param _builtins.int dscp: DSCP number
        :param Sequence[_builtins.str] icmp6_messages: ICMP6 Message
        :param Sequence[_builtins.str] icmp_messages: ICMP Message
        :param _builtins.str packet_length: Packet Length
        :param Sequence[_builtins.str] protocols: protocol (0-255) range or individual number separated by space
        :param Sequence[_builtins.str] service_areas: M365 Service Area
        :param _builtins.str source_ipv4_prefix: Source Data IP Prefix
        :param _builtins.str source_ipv6_prefix: Source Data IP Prefix
        :param Sequence[_builtins.str] source_ports: Source Port (0-65535) range or individual number separated by space
        :param _builtins.str tcp: TCP States
        :param _builtins.str traffic_category: M365 Traffic Category
        :param _builtins.str traffic_class: Traffic Class
        :param _builtins.str traffic_to: Traffic to
        """
        pulumi.set(__self__, "application_list_id", application_list_id)
        pulumi.set(__self__, "destination_data_ipv4_prefix_list_id", destination_data_ipv4_prefix_list_id)
        pulumi.set(__self__, "destination_data_ipv6_prefix_list_id", destination_data_ipv6_prefix_list_id)
        pulumi.set(__self__, "destination_ipv4_prefix", destination_ipv4_prefix)
        pulumi.set(__self__, "destination_ipv6_prefix", destination_ipv6_prefix)
        pulumi.set(__self__, "destination_ports", destination_ports)
        pulumi.set(__self__, "destination_region", destination_region)
        pulumi.set(__self__, "dns", dns)
        pulumi.set(__self__, "dns_application_list_id", dns_application_list_id)
        pulumi.set(__self__, "dscp", dscp)
        pulumi.set(__self__, "icmp6_messages", icmp6_messages)
        pulumi.set(__self__, "icmp_messages", icmp_messages)
        pulumi.set(__self__, "packet_length", packet_length)
        pulumi.set(__self__, "protocols", protocols)
        pulumi.set(__self__, "saas_application_list_id", saas_application_list_id)
        pulumi.set(__self__, "service_areas", service_areas)
        pulumi.set(__self__, "source_data_ipv4_prefx_list_id", source_data_ipv4_prefx_list_id)
        pulumi.set(__self__, "source_data_ipv6_prefx_list_id", source_data_ipv6_prefx_list_id)
        pulumi.set(__self__, "source_ipv4_prefix", source_ipv4_prefix)
        pulumi.set(__self__, "source_ipv6_prefix", source_ipv6_prefix)
        pulumi.set(__self__, "source_ports", source_ports)
        pulumi.set(__self__, "tcp", tcp)
        pulumi.set(__self__, "traffic_category", traffic_category)
        pulumi.set(__self__, "traffic_class", traffic_class)
        pulumi.set(__self__, "traffic_to", traffic_to)

    @_builtins.property
    @pulumi.getter(name="applicationListId")
    def application_list_id(self) -> _builtins.str:
        return pulumi.get(self, "application_list_id")

    @_builtins.property
    @pulumi.getter(name="destinationDataIpv4PrefixListId")
    def destination_data_ipv4_prefix_list_id(self) -> _builtins.str:
        return pulumi.get(self, "destination_data_ipv4_prefix_list_id")

    @_builtins.property
    @pulumi.getter(name="destinationDataIpv6PrefixListId")
    def destination_data_ipv6_prefix_list_id(self) -> _builtins.str:
        return pulumi.get(self, "destination_data_ipv6_prefix_list_id")

    @_builtins.property
    @pulumi.getter(name="destinationIpv4Prefix")
    def destination_ipv4_prefix(self) -> _builtins.str:
        """
        Destination Data IP Prefix
        """
        return pulumi.get(self, "destination_ipv4_prefix")

    @_builtins.property
    @pulumi.getter(name="destinationIpv6Prefix")
    def destination_ipv6_prefix(self) -> _builtins.str:
        """
        Destination Data IP Prefix
        """
        return pulumi.get(self, "destination_ipv6_prefix")

    @_builtins.property
    @pulumi.getter(name="destinationPorts")
    def destination_ports(self) -> Sequence[_builtins.str]:
        """
        Destination Port (0-65535) range or individual number separated by space
        """
        return pulumi.get(self, "destination_ports")

    @_builtins.property
    @pulumi.getter(name="destinationRegion")
    def destination_region(self) -> _builtins.str:
        """
        Destination Region
        """
        return pulumi.get(self, "destination_region")

    @_builtins.property
    @pulumi.getter
    def dns(self) -> _builtins.str:
        """
        Dns
        """
        return pulumi.get(self, "dns")

    @_builtins.property
    @pulumi.getter(name="dnsApplicationListId")
    def dns_application_list_id(self) -> _builtins.str:
        return pulumi.get(self, "dns_application_list_id")

    @_builtins.property
    @pulumi.getter
    def dscp(self) -> _builtins.int:
        """
        DSCP number
        """
        return pulumi.get(self, "dscp")

    @_builtins.property
    @pulumi.getter(name="icmp6Messages")
    def icmp6_messages(self) -> Sequence[_builtins.str]:
        """
        ICMP6 Message
        """
        return pulumi.get(self, "icmp6_messages")

    @_builtins.property
    @pulumi.getter(name="icmpMessages")
    def icmp_messages(self) -> Sequence[_builtins.str]:
        """
        ICMP Message
        """
        return pulumi.get(self, "icmp_messages")

    @_builtins.property
    @pulumi.getter(name="packetLength")
    def packet_length(self) -> _builtins.str:
        """
        Packet Length
        """
        return pulumi.get(self, "packet_length")

    @_builtins.property
    @pulumi.getter
    def protocols(self) -> Sequence[_builtins.str]:
        """
        protocol (0-255) range or individual number separated by space
        """
        return pulumi.get(self, "protocols")

    @_builtins.property
    @pulumi.getter(name="saasApplicationListId")
    def saas_application_list_id(self) -> _builtins.str:
        return pulumi.get(self, "saas_application_list_id")

    @_builtins.property
    @pulumi.getter(name="serviceAreas")
    def service_areas(self) -> Sequence[_builtins.str]:
        """
        M365 Service Area
        """
        return pulumi.get(self, "service_areas")

    @_builtins.property
    @pulumi.getter(name="sourceDataIpv4PrefxListId")
    def source_data_ipv4_prefx_list_id(self) -> _builtins.str:
        return pulumi.get(self, "source_data_ipv4_prefx_list_id")

    @_builtins.property
    @pulumi.getter(name="sourceDataIpv6PrefxListId")
    def source_data_ipv6_prefx_list_id(self) -> _builtins.str:
        return pulumi.get(self, "source_data_ipv6_prefx_list_id")

    @_builtins.property
    @pulumi.getter(name="sourceIpv4Prefix")
    def source_ipv4_prefix(self) -> _builtins.str:
        """
        Source Data IP Prefix
        """
        return pulumi.get(self, "source_ipv4_prefix")

    @_builtins.property
    @pulumi.getter(name="sourceIpv6Prefix")
    def source_ipv6_prefix(self) -> _builtins.str:
        """
        Source Data IP Prefix
        """
        return pulumi.get(self, "source_ipv6_prefix")

    @_builtins.property
    @pulumi.getter(name="sourcePorts")
    def source_ports(self) -> Sequence[_builtins.str]:
        """
        Source Port (0-65535) range or individual number separated by space
        """
        return pulumi.get(self, "source_ports")

    @_builtins.property
    @pulumi.getter
    def tcp(self) -> _builtins.str:
        """
        TCP States
        """
        return pulumi.get(self, "tcp")

    @_builtins.property
    @pulumi.getter(name="trafficCategory")
    def traffic_category(self) -> _builtins.str:
        """
        M365 Traffic Category
        """
        return pulumi.get(self, "traffic_category")

    @_builtins.property
    @pulumi.getter(name="trafficClass")
    def traffic_class(self) -> _builtins.str:
        """
        Traffic Class
        """
        return pulumi.get(self, "traffic_class")

    @_builtins.property
    @pulumi.getter(name="trafficTo")
    def traffic_to(self) -> _builtins.str:
        """
        Traffic to
        """
        return pulumi.get(self, "traffic_to")


@pulumi.output_type
class GetAsPathListPolicyObjectEntryResult(dict):
    def __init__(__self__, *,
                 as_path: _builtins.str):
        """
        :param _builtins.str as_path: Regular expression to match the BGP AS paths e.g., `^1239_[0-9]*$`
        """
        pulumi.set(__self__, "as_path", as_path)

    @_builtins.property
    @pulumi.getter(name="asPath")
    def as_path(self) -> _builtins.str:
        """
        Regular expression to match the BGP AS paths e.g., `^1239_[0-9]*$`
        """
        return pulumi.get(self, "as_path")


@pulumi.output_type
class GetBlockUrlListPolicyObjectEntryResult(dict):
    def __init__(__self__, *,
                 url: _builtins.str):
        """
        :param _builtins.str url: URL
        """
        pulumi.set(__self__, "url", url)

    @_builtins.property
    @pulumi.getter
    def url(self) -> _builtins.str:
        """
        URL
        """
        return pulumi.get(self, "url")


@pulumi.output_type
class GetCedgeAaaFeatureTemplateAccountingRuleResult(dict):
    def __init__(__self__, *,
                 groups: _builtins.str,
                 method: _builtins.str,
                 name: _builtins.str,
                 optional: _builtins.bool,
                 privilege_level: _builtins.str,
                 start_stop: _builtins.bool,
                 start_stop_variable: _builtins.str):
        """
        :param _builtins.str groups: Comma separated list of groups
        :param _builtins.str method: Configure Accounting Method
        :param _builtins.str name: Configure Accounting Rule ID
        :param _builtins.bool optional: Indicates if list item is considered optional.
        :param _builtins.str privilege_level: Privilege level when method is commands
        :param _builtins.bool start_stop: Record start and stop without waiting
        :param _builtins.str start_stop_variable: Variable name
        """
        pulumi.set(__self__, "groups", groups)
        pulumi.set(__self__, "method", method)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "optional", optional)
        pulumi.set(__self__, "privilege_level", privilege_level)
        pulumi.set(__self__, "start_stop", start_stop)
        pulumi.set(__self__, "start_stop_variable", start_stop_variable)

    @_builtins.property
    @pulumi.getter
    def groups(self) -> _builtins.str:
        """
        Comma separated list of groups
        """
        return pulumi.get(self, "groups")

    @_builtins.property
    @pulumi.getter
    def method(self) -> _builtins.str:
        """
        Configure Accounting Method
        """
        return pulumi.get(self, "method")

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        """
        Configure Accounting Rule ID
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def optional(self) -> _builtins.bool:
        """
        Indicates if list item is considered optional.
        """
        return pulumi.get(self, "optional")

    @_builtins.property
    @pulumi.getter(name="privilegeLevel")
    def privilege_level(self) -> _builtins.str:
        """
        Privilege level when method is commands
        """
        return pulumi.get(self, "privilege_level")

    @_builtins.property
    @pulumi.getter(name="startStop")
    def start_stop(self) -> _builtins.bool:
        """
        Record start and stop without waiting
        """
        return pulumi.get(self, "start_stop")

    @_builtins.property
    @pulumi.getter(name="startStopVariable")
    def start_stop_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "start_stop_variable")


@pulumi.output_type
class GetCedgeAaaFeatureTemplateAuthorizationRuleResult(dict):
    def __init__(__self__, *,
                 authenticated: _builtins.bool,
                 groups: _builtins.str,
                 method: _builtins.str,
                 name: _builtins.str,
                 optional: _builtins.bool,
                 privilege_level: _builtins.str):
        """
        :param _builtins.bool authenticated: Succeed if user has authenticated
        :param _builtins.str groups: Comma separated list of groups
        :param _builtins.str method: Method
        :param _builtins.str name: Configure Authorization Rule ID
        :param _builtins.bool optional: Indicates if list item is considered optional.
        :param _builtins.str privilege_level: Privilege level when method is commands
        """
        pulumi.set(__self__, "authenticated", authenticated)
        pulumi.set(__self__, "groups", groups)
        pulumi.set(__self__, "method", method)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "optional", optional)
        pulumi.set(__self__, "privilege_level", privilege_level)

    @_builtins.property
    @pulumi.getter
    def authenticated(self) -> _builtins.bool:
        """
        Succeed if user has authenticated
        """
        return pulumi.get(self, "authenticated")

    @_builtins.property
    @pulumi.getter
    def groups(self) -> _builtins.str:
        """
        Comma separated list of groups
        """
        return pulumi.get(self, "groups")

    @_builtins.property
    @pulumi.getter
    def method(self) -> _builtins.str:
        """
        Method
        """
        return pulumi.get(self, "method")

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        """
        Configure Authorization Rule ID
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def optional(self) -> _builtins.bool:
        """
        Indicates if list item is considered optional.
        """
        return pulumi.get(self, "optional")

    @_builtins.property
    @pulumi.getter(name="privilegeLevel")
    def privilege_level(self) -> _builtins.str:
        """
        Privilege level when method is commands
        """
        return pulumi.get(self, "privilege_level")


@pulumi.output_type
class GetCedgeAaaFeatureTemplateRadiusClientResult(dict):
    def __init__(__self__, *,
                 client_ip: _builtins.str,
                 client_ip_variable: _builtins.str,
                 optional: _builtins.bool,
                 vpn_configurations: Sequence['outputs.GetCedgeAaaFeatureTemplateRadiusClientVpnConfigurationResult']):
        """
        :param _builtins.str client_ip: Client IP
        :param _builtins.str client_ip_variable: Variable name
        :param _builtins.bool optional: Indicates if list item is considered optional.
        :param Sequence['GetCedgeAaaFeatureTemplateRadiusClientVpnConfigurationArgs'] vpn_configurations: VPN configuration
        """
        pulumi.set(__self__, "client_ip", client_ip)
        pulumi.set(__self__, "client_ip_variable", client_ip_variable)
        pulumi.set(__self__, "optional", optional)
        pulumi.set(__self__, "vpn_configurations", vpn_configurations)

    @_builtins.property
    @pulumi.getter(name="clientIp")
    def client_ip(self) -> _builtins.str:
        """
        Client IP
        """
        return pulumi.get(self, "client_ip")

    @_builtins.property
    @pulumi.getter(name="clientIpVariable")
    def client_ip_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "client_ip_variable")

    @_builtins.property
    @pulumi.getter
    def optional(self) -> _builtins.bool:
        """
        Indicates if list item is considered optional.
        """
        return pulumi.get(self, "optional")

    @_builtins.property
    @pulumi.getter(name="vpnConfigurations")
    def vpn_configurations(self) -> Sequence['outputs.GetCedgeAaaFeatureTemplateRadiusClientVpnConfigurationResult']:
        """
        VPN configuration
        """
        return pulumi.get(self, "vpn_configurations")


@pulumi.output_type
class GetCedgeAaaFeatureTemplateRadiusClientVpnConfigurationResult(dict):
    def __init__(__self__, *,
                 optional: _builtins.bool,
                 server_key: _builtins.str,
                 server_key_variable: _builtins.str,
                 vpn_id: _builtins.int,
                 vpn_id_variable: _builtins.str):
        """
        :param _builtins.bool optional: Indicates if list item is considered optional.
        :param _builtins.str server_key: Specify a RADIUS client server-key
        :param _builtins.str server_key_variable: Variable name
        :param _builtins.int vpn_id: VPN ID
        :param _builtins.str vpn_id_variable: Variable name
        """
        pulumi.set(__self__, "optional", optional)
        pulumi.set(__self__, "server_key", server_key)
        pulumi.set(__self__, "server_key_variable", server_key_variable)
        pulumi.set(__self__, "vpn_id", vpn_id)
        pulumi.set(__self__, "vpn_id_variable", vpn_id_variable)

    @_builtins.property
    @pulumi.getter
    def optional(self) -> _builtins.bool:
        """
        Indicates if list item is considered optional.
        """
        return pulumi.get(self, "optional")

    @_builtins.property
    @pulumi.getter(name="serverKey")
    def server_key(self) -> _builtins.str:
        """
        Specify a RADIUS client server-key
        """
        return pulumi.get(self, "server_key")

    @_builtins.property
    @pulumi.getter(name="serverKeyVariable")
    def server_key_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "server_key_variable")

    @_builtins.property
    @pulumi.getter(name="vpnId")
    def vpn_id(self) -> _builtins.int:
        """
        VPN ID
        """
        return pulumi.get(self, "vpn_id")

    @_builtins.property
    @pulumi.getter(name="vpnIdVariable")
    def vpn_id_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "vpn_id_variable")


@pulumi.output_type
class GetCedgeAaaFeatureTemplateRadiusServerGroupResult(dict):
    def __init__(__self__, *,
                 group_name: _builtins.str,
                 optional: _builtins.bool,
                 servers: Sequence['outputs.GetCedgeAaaFeatureTemplateRadiusServerGroupServerResult'],
                 source_interface: _builtins.str,
                 source_interface_variable: _builtins.str,
                 vpn_id: _builtins.int):
        """
        :param _builtins.str group_name: Set Radius server Group Name
        :param _builtins.bool optional: Indicates if list item is considered optional.
        :param Sequence['GetCedgeAaaFeatureTemplateRadiusServerGroupServerArgs'] servers: Configure the Radius server
        :param _builtins.str source_interface: Set interface to use to reach Radius server
        :param _builtins.str source_interface_variable: Variable name
        :param _builtins.int vpn_id: Set VPN in which Radius server is located
        """
        pulumi.set(__self__, "group_name", group_name)
        pulumi.set(__self__, "optional", optional)
        pulumi.set(__self__, "servers", servers)
        pulumi.set(__self__, "source_interface", source_interface)
        pulumi.set(__self__, "source_interface_variable", source_interface_variable)
        pulumi.set(__self__, "vpn_id", vpn_id)

    @_builtins.property
    @pulumi.getter(name="groupName")
    def group_name(self) -> _builtins.str:
        """
        Set Radius server Group Name
        """
        return pulumi.get(self, "group_name")

    @_builtins.property
    @pulumi.getter
    def optional(self) -> _builtins.bool:
        """
        Indicates if list item is considered optional.
        """
        return pulumi.get(self, "optional")

    @_builtins.property
    @pulumi.getter
    def servers(self) -> Sequence['outputs.GetCedgeAaaFeatureTemplateRadiusServerGroupServerResult']:
        """
        Configure the Radius server
        """
        return pulumi.get(self, "servers")

    @_builtins.property
    @pulumi.getter(name="sourceInterface")
    def source_interface(self) -> _builtins.str:
        """
        Set interface to use to reach Radius server
        """
        return pulumi.get(self, "source_interface")

    @_builtins.property
    @pulumi.getter(name="sourceInterfaceVariable")
    def source_interface_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "source_interface_variable")

    @_builtins.property
    @pulumi.getter(name="vpnId")
    def vpn_id(self) -> _builtins.int:
        """
        Set VPN in which Radius server is located
        """
        return pulumi.get(self, "vpn_id")


@pulumi.output_type
class GetCedgeAaaFeatureTemplateRadiusServerGroupServerResult(dict):
    def __init__(__self__, *,
                 accounting_port: _builtins.int,
                 accounting_port_variable: _builtins.str,
                 address: _builtins.str,
                 authentication_port: _builtins.int,
                 authentication_port_variable: _builtins.str,
                 encryption_type: _builtins.str,
                 key: _builtins.str,
                 key_type: _builtins.str,
                 key_type_variable: _builtins.str,
                 optional: _builtins.bool,
                 retransmit: _builtins.int,
                 retransmit_variable: _builtins.str,
                 secret_key: _builtins.str,
                 secret_key_variable: _builtins.str,
                 timeout: _builtins.int,
                 timeout_variable: _builtins.str):
        """
        :param _builtins.int accounting_port: Set Accounting port to use to connect to Radius server
        :param _builtins.str accounting_port_variable: Variable name
        :param _builtins.str address: Set IP address of Radius server
        :param _builtins.int authentication_port: Set Authentication port to use to connect to Radius server
        :param _builtins.str authentication_port_variable: Variable name
        :param _builtins.str encryption_type: Type of encyption. To be used for type 6
        :param _builtins.str key: Set the Radius server shared key
        :param _builtins.str key_type: key type
        :param _builtins.str key_type_variable: Variable name
        :param _builtins.bool optional: Indicates if list item is considered optional.
        :param _builtins.int retransmit: Configure how many times to contact this Radius server
        :param _builtins.str retransmit_variable: Variable name
        :param _builtins.str secret_key: Set the Radius server shared type 7 encrypted key
        :param _builtins.str secret_key_variable: Variable name
        :param _builtins.int timeout: Configure how long to wait for replies from the Radius server
        :param _builtins.str timeout_variable: Variable name
        """
        pulumi.set(__self__, "accounting_port", accounting_port)
        pulumi.set(__self__, "accounting_port_variable", accounting_port_variable)
        pulumi.set(__self__, "address", address)
        pulumi.set(__self__, "authentication_port", authentication_port)
        pulumi.set(__self__, "authentication_port_variable", authentication_port_variable)
        pulumi.set(__self__, "encryption_type", encryption_type)
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "key_type", key_type)
        pulumi.set(__self__, "key_type_variable", key_type_variable)
        pulumi.set(__self__, "optional", optional)
        pulumi.set(__self__, "retransmit", retransmit)
        pulumi.set(__self__, "retransmit_variable", retransmit_variable)
        pulumi.set(__self__, "secret_key", secret_key)
        pulumi.set(__self__, "secret_key_variable", secret_key_variable)
        pulumi.set(__self__, "timeout", timeout)
        pulumi.set(__self__, "timeout_variable", timeout_variable)

    @_builtins.property
    @pulumi.getter(name="accountingPort")
    def accounting_port(self) -> _builtins.int:
        """
        Set Accounting port to use to connect to Radius server
        """
        return pulumi.get(self, "accounting_port")

    @_builtins.property
    @pulumi.getter(name="accountingPortVariable")
    def accounting_port_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "accounting_port_variable")

    @_builtins.property
    @pulumi.getter
    def address(self) -> _builtins.str:
        """
        Set IP address of Radius server
        """
        return pulumi.get(self, "address")

    @_builtins.property
    @pulumi.getter(name="authenticationPort")
    def authentication_port(self) -> _builtins.int:
        """
        Set Authentication port to use to connect to Radius server
        """
        return pulumi.get(self, "authentication_port")

    @_builtins.property
    @pulumi.getter(name="authenticationPortVariable")
    def authentication_port_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "authentication_port_variable")

    @_builtins.property
    @pulumi.getter(name="encryptionType")
    def encryption_type(self) -> _builtins.str:
        """
        Type of encyption. To be used for type 6
        """
        return pulumi.get(self, "encryption_type")

    @_builtins.property
    @pulumi.getter
    def key(self) -> _builtins.str:
        """
        Set the Radius server shared key
        """
        return pulumi.get(self, "key")

    @_builtins.property
    @pulumi.getter(name="keyType")
    def key_type(self) -> _builtins.str:
        """
        key type
        """
        return pulumi.get(self, "key_type")

    @_builtins.property
    @pulumi.getter(name="keyTypeVariable")
    def key_type_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "key_type_variable")

    @_builtins.property
    @pulumi.getter
    def optional(self) -> _builtins.bool:
        """
        Indicates if list item is considered optional.
        """
        return pulumi.get(self, "optional")

    @_builtins.property
    @pulumi.getter
    def retransmit(self) -> _builtins.int:
        """
        Configure how many times to contact this Radius server
        """
        return pulumi.get(self, "retransmit")

    @_builtins.property
    @pulumi.getter(name="retransmitVariable")
    def retransmit_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "retransmit_variable")

    @_builtins.property
    @pulumi.getter(name="secretKey")
    def secret_key(self) -> _builtins.str:
        """
        Set the Radius server shared type 7 encrypted key
        """
        return pulumi.get(self, "secret_key")

    @_builtins.property
    @pulumi.getter(name="secretKeyVariable")
    def secret_key_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "secret_key_variable")

    @_builtins.property
    @pulumi.getter
    def timeout(self) -> _builtins.int:
        """
        Configure how long to wait for replies from the Radius server
        """
        return pulumi.get(self, "timeout")

    @_builtins.property
    @pulumi.getter(name="timeoutVariable")
    def timeout_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "timeout_variable")


@pulumi.output_type
class GetCedgeAaaFeatureTemplateTacacsServerGroupResult(dict):
    def __init__(__self__, *,
                 group_name: _builtins.str,
                 optional: _builtins.bool,
                 servers: Sequence['outputs.GetCedgeAaaFeatureTemplateTacacsServerGroupServerResult'],
                 source_interface: _builtins.str,
                 source_interface_variable: _builtins.str,
                 vpn_id: _builtins.int):
        """
        :param _builtins.str group_name: Set TACACS server Group Name
        :param _builtins.bool optional: Indicates if list item is considered optional.
        :param Sequence['GetCedgeAaaFeatureTemplateTacacsServerGroupServerArgs'] servers: Configure the TACACS server
        :param _builtins.str source_interface: Set interface to use to reach TACACS server
        :param _builtins.str source_interface_variable: Variable name
        :param _builtins.int vpn_id: Set VPN in which TACACS server is located
        """
        pulumi.set(__self__, "group_name", group_name)
        pulumi.set(__self__, "optional", optional)
        pulumi.set(__self__, "servers", servers)
        pulumi.set(__self__, "source_interface", source_interface)
        pulumi.set(__self__, "source_interface_variable", source_interface_variable)
        pulumi.set(__self__, "vpn_id", vpn_id)

    @_builtins.property
    @pulumi.getter(name="groupName")
    def group_name(self) -> _builtins.str:
        """
        Set TACACS server Group Name
        """
        return pulumi.get(self, "group_name")

    @_builtins.property
    @pulumi.getter
    def optional(self) -> _builtins.bool:
        """
        Indicates if list item is considered optional.
        """
        return pulumi.get(self, "optional")

    @_builtins.property
    @pulumi.getter
    def servers(self) -> Sequence['outputs.GetCedgeAaaFeatureTemplateTacacsServerGroupServerResult']:
        """
        Configure the TACACS server
        """
        return pulumi.get(self, "servers")

    @_builtins.property
    @pulumi.getter(name="sourceInterface")
    def source_interface(self) -> _builtins.str:
        """
        Set interface to use to reach TACACS server
        """
        return pulumi.get(self, "source_interface")

    @_builtins.property
    @pulumi.getter(name="sourceInterfaceVariable")
    def source_interface_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "source_interface_variable")

    @_builtins.property
    @pulumi.getter(name="vpnId")
    def vpn_id(self) -> _builtins.int:
        """
        Set VPN in which TACACS server is located
        """
        return pulumi.get(self, "vpn_id")


@pulumi.output_type
class GetCedgeAaaFeatureTemplateTacacsServerGroupServerResult(dict):
    def __init__(__self__, *,
                 address: _builtins.str,
                 encryption_type: _builtins.str,
                 key: _builtins.str,
                 optional: _builtins.bool,
                 port: _builtins.int,
                 port_variable: _builtins.str,
                 secret_key: _builtins.str,
                 secret_key_variable: _builtins.str,
                 timeout: _builtins.int,
                 timeout_variable: _builtins.str):
        """
        :param _builtins.str address: Set IP address of TACACS server
        :param _builtins.str encryption_type: Type of encyption. To be used for type 6
        :param _builtins.str key: Set the TACACS server shared key
        :param _builtins.bool optional: Indicates if list item is considered optional.
        :param _builtins.int port: TACACS Port
        :param _builtins.str port_variable: Variable name
        :param _builtins.str secret_key: Set the TACACS server shared type 7 encrypted key
        :param _builtins.str secret_key_variable: Variable name
        :param _builtins.int timeout: Configure how long to wait for replies from the TACACS server
        :param _builtins.str timeout_variable: Variable name
        """
        pulumi.set(__self__, "address", address)
        pulumi.set(__self__, "encryption_type", encryption_type)
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "optional", optional)
        pulumi.set(__self__, "port", port)
        pulumi.set(__self__, "port_variable", port_variable)
        pulumi.set(__self__, "secret_key", secret_key)
        pulumi.set(__self__, "secret_key_variable", secret_key_variable)
        pulumi.set(__self__, "timeout", timeout)
        pulumi.set(__self__, "timeout_variable", timeout_variable)

    @_builtins.property
    @pulumi.getter
    def address(self) -> _builtins.str:
        """
        Set IP address of TACACS server
        """
        return pulumi.get(self, "address")

    @_builtins.property
    @pulumi.getter(name="encryptionType")
    def encryption_type(self) -> _builtins.str:
        """
        Type of encyption. To be used for type 6
        """
        return pulumi.get(self, "encryption_type")

    @_builtins.property
    @pulumi.getter
    def key(self) -> _builtins.str:
        """
        Set the TACACS server shared key
        """
        return pulumi.get(self, "key")

    @_builtins.property
    @pulumi.getter
    def optional(self) -> _builtins.bool:
        """
        Indicates if list item is considered optional.
        """
        return pulumi.get(self, "optional")

    @_builtins.property
    @pulumi.getter
    def port(self) -> _builtins.int:
        """
        TACACS Port
        """
        return pulumi.get(self, "port")

    @_builtins.property
    @pulumi.getter(name="portVariable")
    def port_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "port_variable")

    @_builtins.property
    @pulumi.getter(name="secretKey")
    def secret_key(self) -> _builtins.str:
        """
        Set the TACACS server shared type 7 encrypted key
        """
        return pulumi.get(self, "secret_key")

    @_builtins.property
    @pulumi.getter(name="secretKeyVariable")
    def secret_key_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "secret_key_variable")

    @_builtins.property
    @pulumi.getter
    def timeout(self) -> _builtins.int:
        """
        Configure how long to wait for replies from the TACACS server
        """
        return pulumi.get(self, "timeout")

    @_builtins.property
    @pulumi.getter(name="timeoutVariable")
    def timeout_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "timeout_variable")


@pulumi.output_type
class GetCedgeAaaFeatureTemplateUserResult(dict):
    def __init__(__self__, *,
                 name: _builtins.str,
                 name_variable: _builtins.str,
                 optional: _builtins.bool,
                 password: _builtins.str,
                 privilege_level: _builtins.str,
                 privilege_level_variable: _builtins.str,
                 secret: _builtins.str,
                 ssh_pubkeys: Sequence['outputs.GetCedgeAaaFeatureTemplateUserSshPubkeyResult']):
        """
        :param _builtins.str name: Set the username
        :param _builtins.str name_variable: Variable name
        :param _builtins.bool optional: Indicates if list item is considered optional.
        :param _builtins.str password: Set the user password
        :param _builtins.str privilege_level: Set Privilege Level for this user
        :param _builtins.str privilege_level_variable: Variable name
        :param _builtins.str secret: Set the user scrypt password/hash
        :param Sequence['GetCedgeAaaFeatureTemplateUserSshPubkeyArgs'] ssh_pubkeys: List of RSA public-keys per user
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "name_variable", name_variable)
        pulumi.set(__self__, "optional", optional)
        pulumi.set(__self__, "password", password)
        pulumi.set(__self__, "privilege_level", privilege_level)
        pulumi.set(__self__, "privilege_level_variable", privilege_level_variable)
        pulumi.set(__self__, "secret", secret)
        pulumi.set(__self__, "ssh_pubkeys", ssh_pubkeys)

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        """
        Set the username
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter(name="nameVariable")
    def name_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "name_variable")

    @_builtins.property
    @pulumi.getter
    def optional(self) -> _builtins.bool:
        """
        Indicates if list item is considered optional.
        """
        return pulumi.get(self, "optional")

    @_builtins.property
    @pulumi.getter
    def password(self) -> _builtins.str:
        """
        Set the user password
        """
        return pulumi.get(self, "password")

    @_builtins.property
    @pulumi.getter(name="privilegeLevel")
    def privilege_level(self) -> _builtins.str:
        """
        Set Privilege Level for this user
        """
        return pulumi.get(self, "privilege_level")

    @_builtins.property
    @pulumi.getter(name="privilegeLevelVariable")
    def privilege_level_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "privilege_level_variable")

    @_builtins.property
    @pulumi.getter
    def secret(self) -> _builtins.str:
        """
        Set the user scrypt password/hash
        """
        return pulumi.get(self, "secret")

    @_builtins.property
    @pulumi.getter(name="sshPubkeys")
    def ssh_pubkeys(self) -> Sequence['outputs.GetCedgeAaaFeatureTemplateUserSshPubkeyResult']:
        """
        List of RSA public-keys per user
        """
        return pulumi.get(self, "ssh_pubkeys")


@pulumi.output_type
class GetCedgeAaaFeatureTemplateUserSshPubkeyResult(dict):
    def __init__(__self__, *,
                 key_string: _builtins.str,
                 key_type: _builtins.str,
                 key_type_variable: _builtins.str,
                 optional: _builtins.bool):
        """
        :param _builtins.str key_string: Set the RSA key string
        :param _builtins.str key_type: Only RSA is supported
        :param _builtins.str key_type_variable: Variable name
        :param _builtins.bool optional: Indicates if list item is considered optional.
        """
        pulumi.set(__self__, "key_string", key_string)
        pulumi.set(__self__, "key_type", key_type)
        pulumi.set(__self__, "key_type_variable", key_type_variable)
        pulumi.set(__self__, "optional", optional)

    @_builtins.property
    @pulumi.getter(name="keyString")
    def key_string(self) -> _builtins.str:
        """
        Set the RSA key string
        """
        return pulumi.get(self, "key_string")

    @_builtins.property
    @pulumi.getter(name="keyType")
    def key_type(self) -> _builtins.str:
        """
        Only RSA is supported
        """
        return pulumi.get(self, "key_type")

    @_builtins.property
    @pulumi.getter(name="keyTypeVariable")
    def key_type_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "key_type_variable")

    @_builtins.property
    @pulumi.getter
    def optional(self) -> _builtins.bool:
        """
        Indicates if list item is considered optional.
        """
        return pulumi.get(self, "optional")


@pulumi.output_type
class GetCedgeIgmpFeatureTemplateInterfaceResult(dict):
    def __init__(__self__, *,
                 join_groups: Sequence['outputs.GetCedgeIgmpFeatureTemplateInterfaceJoinGroupResult'],
                 name: _builtins.str,
                 name_variable: _builtins.str,
                 optional: _builtins.bool):
        """
        :param Sequence['GetCedgeIgmpFeatureTemplateInterfaceJoinGroupArgs'] join_groups: Configure static joins
        :param _builtins.str name: Set interface name
        :param _builtins.str name_variable: Variable name
        :param _builtins.bool optional: Indicates if list item is considered optional.
        """
        pulumi.set(__self__, "join_groups", join_groups)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "name_variable", name_variable)
        pulumi.set(__self__, "optional", optional)

    @_builtins.property
    @pulumi.getter(name="joinGroups")
    def join_groups(self) -> Sequence['outputs.GetCedgeIgmpFeatureTemplateInterfaceJoinGroupResult']:
        """
        Configure static joins
        """
        return pulumi.get(self, "join_groups")

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        """
        Set interface name
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter(name="nameVariable")
    def name_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "name_variable")

    @_builtins.property
    @pulumi.getter
    def optional(self) -> _builtins.bool:
        """
        Indicates if list item is considered optional.
        """
        return pulumi.get(self, "optional")


@pulumi.output_type
class GetCedgeIgmpFeatureTemplateInterfaceJoinGroupResult(dict):
    def __init__(__self__, *,
                 group_address: _builtins.str,
                 group_address_variable: _builtins.str,
                 optional: _builtins.bool,
                 source: _builtins.str,
                 source_variable: _builtins.str):
        """
        :param _builtins.str group_address: Set group address
        :param _builtins.str group_address_variable: Variable name
        :param _builtins.bool optional: Indicates if list item is considered optional.
        :param _builtins.str source: Set source address
        :param _builtins.str source_variable: Variable name
        """
        pulumi.set(__self__, "group_address", group_address)
        pulumi.set(__self__, "group_address_variable", group_address_variable)
        pulumi.set(__self__, "optional", optional)
        pulumi.set(__self__, "source", source)
        pulumi.set(__self__, "source_variable", source_variable)

    @_builtins.property
    @pulumi.getter(name="groupAddress")
    def group_address(self) -> _builtins.str:
        """
        Set group address
        """
        return pulumi.get(self, "group_address")

    @_builtins.property
    @pulumi.getter(name="groupAddressVariable")
    def group_address_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "group_address_variable")

    @_builtins.property
    @pulumi.getter
    def optional(self) -> _builtins.bool:
        """
        Indicates if list item is considered optional.
        """
        return pulumi.get(self, "optional")

    @_builtins.property
    @pulumi.getter
    def source(self) -> _builtins.str:
        """
        Set source address
        """
        return pulumi.get(self, "source")

    @_builtins.property
    @pulumi.getter(name="sourceVariable")
    def source_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "source_variable")


@pulumi.output_type
class GetCedgePimFeatureTemplateInterfaceResult(dict):
    def __init__(__self__, *,
                 interface_name: _builtins.str,
                 interface_name_variable: _builtins.str,
                 join_prune_interval: _builtins.int,
                 join_prune_interval_variable: _builtins.str,
                 optional: _builtins.bool,
                 query_interval: _builtins.int,
                 query_interval_variable: _builtins.str):
        """
        :param _builtins.str interface_name: Set interface name
        :param _builtins.str interface_name_variable: Variable name
        :param _builtins.int join_prune_interval: Set interval at which PIM multicast traffic can join or be removed from RPT or SPT
        :param _builtins.str join_prune_interval_variable: Variable name
        :param _builtins.bool optional: Indicates if list item is considered optional.
        :param _builtins.int query_interval: Set PIM query interval
        :param _builtins.str query_interval_variable: Variable name
        """
        pulumi.set(__self__, "interface_name", interface_name)
        pulumi.set(__self__, "interface_name_variable", interface_name_variable)
        pulumi.set(__self__, "join_prune_interval", join_prune_interval)
        pulumi.set(__self__, "join_prune_interval_variable", join_prune_interval_variable)
        pulumi.set(__self__, "optional", optional)
        pulumi.set(__self__, "query_interval", query_interval)
        pulumi.set(__self__, "query_interval_variable", query_interval_variable)

    @_builtins.property
    @pulumi.getter(name="interfaceName")
    def interface_name(self) -> _builtins.str:
        """
        Set interface name
        """
        return pulumi.get(self, "interface_name")

    @_builtins.property
    @pulumi.getter(name="interfaceNameVariable")
    def interface_name_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "interface_name_variable")

    @_builtins.property
    @pulumi.getter(name="joinPruneInterval")
    def join_prune_interval(self) -> _builtins.int:
        """
        Set interval at which PIM multicast traffic can join or be removed from RPT or SPT
        """
        return pulumi.get(self, "join_prune_interval")

    @_builtins.property
    @pulumi.getter(name="joinPruneIntervalVariable")
    def join_prune_interval_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "join_prune_interval_variable")

    @_builtins.property
    @pulumi.getter
    def optional(self) -> _builtins.bool:
        """
        Indicates if list item is considered optional.
        """
        return pulumi.get(self, "optional")

    @_builtins.property
    @pulumi.getter(name="queryInterval")
    def query_interval(self) -> _builtins.int:
        """
        Set PIM query interval
        """
        return pulumi.get(self, "query_interval")

    @_builtins.property
    @pulumi.getter(name="queryIntervalVariable")
    def query_interval_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "query_interval_variable")


@pulumi.output_type
class GetCedgePimFeatureTemplateRpAddressResult(dict):
    def __init__(__self__, *,
                 access_list: _builtins.str,
                 access_list_variable: _builtins.str,
                 ip_address: _builtins.str,
                 ip_address_variable: _builtins.str,
                 optional: _builtins.bool,
                 override: _builtins.bool,
                 override_variable: _builtins.str):
        """
        :param _builtins.str access_list: Set Static RP Access List
        :param _builtins.str access_list_variable: Variable name
        :param _builtins.str ip_address: Set Static RP IP Address
        :param _builtins.str ip_address_variable: Variable name
        :param _builtins.bool optional: Indicates if list item is considered optional.
        :param _builtins.bool override: Set override flag
        :param _builtins.str override_variable: Variable name
        """
        pulumi.set(__self__, "access_list", access_list)
        pulumi.set(__self__, "access_list_variable", access_list_variable)
        pulumi.set(__self__, "ip_address", ip_address)
        pulumi.set(__self__, "ip_address_variable", ip_address_variable)
        pulumi.set(__self__, "optional", optional)
        pulumi.set(__self__, "override", override)
        pulumi.set(__self__, "override_variable", override_variable)

    @_builtins.property
    @pulumi.getter(name="accessList")
    def access_list(self) -> _builtins.str:
        """
        Set Static RP Access List
        """
        return pulumi.get(self, "access_list")

    @_builtins.property
    @pulumi.getter(name="accessListVariable")
    def access_list_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "access_list_variable")

    @_builtins.property
    @pulumi.getter(name="ipAddress")
    def ip_address(self) -> _builtins.str:
        """
        Set Static RP IP Address
        """
        return pulumi.get(self, "ip_address")

    @_builtins.property
    @pulumi.getter(name="ipAddressVariable")
    def ip_address_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "ip_address_variable")

    @_builtins.property
    @pulumi.getter
    def optional(self) -> _builtins.bool:
        """
        Indicates if list item is considered optional.
        """
        return pulumi.get(self, "optional")

    @_builtins.property
    @pulumi.getter
    def override(self) -> _builtins.bool:
        """
        Set override flag
        """
        return pulumi.get(self, "override")

    @_builtins.property
    @pulumi.getter(name="overrideVariable")
    def override_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "override_variable")


@pulumi.output_type
class GetCedgePimFeatureTemplateRpAnnounceFieldResult(dict):
    def __init__(__self__, *,
                 interface_name: _builtins.str,
                 interface_name_variable: _builtins.str,
                 optional: _builtins.bool,
                 scope: _builtins.int,
                 scope_variable: _builtins.str):
        """
        :param _builtins.str interface_name: Set RP Announce Interface Name
        :param _builtins.str interface_name_variable: Variable name
        :param _builtins.bool optional: Indicates if list item is considered optional.
        :param _builtins.int scope: Set RP Announce Scope
        :param _builtins.str scope_variable: Variable name
        """
        pulumi.set(__self__, "interface_name", interface_name)
        pulumi.set(__self__, "interface_name_variable", interface_name_variable)
        pulumi.set(__self__, "optional", optional)
        pulumi.set(__self__, "scope", scope)
        pulumi.set(__self__, "scope_variable", scope_variable)

    @_builtins.property
    @pulumi.getter(name="interfaceName")
    def interface_name(self) -> _builtins.str:
        """
        Set RP Announce Interface Name
        """
        return pulumi.get(self, "interface_name")

    @_builtins.property
    @pulumi.getter(name="interfaceNameVariable")
    def interface_name_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "interface_name_variable")

    @_builtins.property
    @pulumi.getter
    def optional(self) -> _builtins.bool:
        """
        Indicates if list item is considered optional.
        """
        return pulumi.get(self, "optional")

    @_builtins.property
    @pulumi.getter
    def scope(self) -> _builtins.int:
        """
        Set RP Announce Scope
        """
        return pulumi.get(self, "scope")

    @_builtins.property
    @pulumi.getter(name="scopeVariable")
    def scope_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "scope_variable")


@pulumi.output_type
class GetCedgePimFeatureTemplateRpCandidateResult(dict):
    def __init__(__self__, *,
                 access_list: _builtins.str,
                 access_list_variable: _builtins.str,
                 interface: _builtins.str,
                 interface_variable: _builtins.str,
                 interval: _builtins.int,
                 interval_variable: _builtins.str,
                 optional: _builtins.bool,
                 priority: _builtins.int,
                 priority_variable: _builtins.str):
        """
        :param _builtins.str access_list: Set IP Access List for PIM RP Candidate
        :param _builtins.str access_list_variable: Variable name
        :param _builtins.str interface: Set Autonomic-Networking virtual interface
        :param _builtins.str interface_variable: Variable name
        :param _builtins.int interval: Set RP candidate advertisement interval
        :param _builtins.str interval_variable: Variable name
        :param _builtins.bool optional: Indicates if list item is considered optional.
        :param _builtins.int priority: Set RP candidate priority
        :param _builtins.str priority_variable: Variable name
        """
        pulumi.set(__self__, "access_list", access_list)
        pulumi.set(__self__, "access_list_variable", access_list_variable)
        pulumi.set(__self__, "interface", interface)
        pulumi.set(__self__, "interface_variable", interface_variable)
        pulumi.set(__self__, "interval", interval)
        pulumi.set(__self__, "interval_variable", interval_variable)
        pulumi.set(__self__, "optional", optional)
        pulumi.set(__self__, "priority", priority)
        pulumi.set(__self__, "priority_variable", priority_variable)

    @_builtins.property
    @pulumi.getter(name="accessList")
    def access_list(self) -> _builtins.str:
        """
        Set IP Access List for PIM RP Candidate
        """
        return pulumi.get(self, "access_list")

    @_builtins.property
    @pulumi.getter(name="accessListVariable")
    def access_list_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "access_list_variable")

    @_builtins.property
    @pulumi.getter
    def interface(self) -> _builtins.str:
        """
        Set Autonomic-Networking virtual interface
        """
        return pulumi.get(self, "interface")

    @_builtins.property
    @pulumi.getter(name="interfaceVariable")
    def interface_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "interface_variable")

    @_builtins.property
    @pulumi.getter
    def interval(self) -> _builtins.int:
        """
        Set RP candidate advertisement interval
        """
        return pulumi.get(self, "interval")

    @_builtins.property
    @pulumi.getter(name="intervalVariable")
    def interval_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "interval_variable")

    @_builtins.property
    @pulumi.getter
    def optional(self) -> _builtins.bool:
        """
        Indicates if list item is considered optional.
        """
        return pulumi.get(self, "optional")

    @_builtins.property
    @pulumi.getter
    def priority(self) -> _builtins.int:
        """
        Set RP candidate priority
        """
        return pulumi.get(self, "priority")

    @_builtins.property
    @pulumi.getter(name="priorityVariable")
    def priority_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "priority_variable")


@pulumi.output_type
class GetCellularControllerFeatureTemplateDataProfileResult(dict):
    def __init__(__self__, *,
                 attach_profile: _builtins.int,
                 attach_profile_variable: _builtins.str,
                 data_profile: _builtins.int,
                 data_profile_variable: _builtins.str,
                 optional: _builtins.bool,
                 slot_number: _builtins.int,
                 slot_number_variable: _builtins.str):
        """
        :param _builtins.int attach_profile: Set attach profile
        :param _builtins.str attach_profile_variable: Variable name
        :param _builtins.int data_profile: Set data profile
        :param _builtins.str data_profile_variable: Variable name
        :param _builtins.bool optional: Indicates if list item is considered optional.
        :param _builtins.int slot_number: Set slot number
        :param _builtins.str slot_number_variable: Variable name
        """
        pulumi.set(__self__, "attach_profile", attach_profile)
        pulumi.set(__self__, "attach_profile_variable", attach_profile_variable)
        pulumi.set(__self__, "data_profile", data_profile)
        pulumi.set(__self__, "data_profile_variable", data_profile_variable)
        pulumi.set(__self__, "optional", optional)
        pulumi.set(__self__, "slot_number", slot_number)
        pulumi.set(__self__, "slot_number_variable", slot_number_variable)

    @_builtins.property
    @pulumi.getter(name="attachProfile")
    def attach_profile(self) -> _builtins.int:
        """
        Set attach profile
        """
        return pulumi.get(self, "attach_profile")

    @_builtins.property
    @pulumi.getter(name="attachProfileVariable")
    def attach_profile_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "attach_profile_variable")

    @_builtins.property
    @pulumi.getter(name="dataProfile")
    def data_profile(self) -> _builtins.int:
        """
        Set data profile
        """
        return pulumi.get(self, "data_profile")

    @_builtins.property
    @pulumi.getter(name="dataProfileVariable")
    def data_profile_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "data_profile_variable")

    @_builtins.property
    @pulumi.getter
    def optional(self) -> _builtins.bool:
        """
        Indicates if list item is considered optional.
        """
        return pulumi.get(self, "optional")

    @_builtins.property
    @pulumi.getter(name="slotNumber")
    def slot_number(self) -> _builtins.int:
        """
        Set slot number
        """
        return pulumi.get(self, "slot_number")

    @_builtins.property
    @pulumi.getter(name="slotNumberVariable")
    def slot_number_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "slot_number_variable")


@pulumi.output_type
class GetCentralizedPolicyDefinitionResult(dict):
    def __init__(__self__, *,
                 entries: Sequence['outputs.GetCentralizedPolicyDefinitionEntryResult'],
                 id: _builtins.str,
                 type: _builtins.str,
                 version: _builtins.int):
        """
        :param Sequence['GetCentralizedPolicyDefinitionEntryArgs'] entries: List of entries
        :param _builtins.str id: Policy definition ID
        :param _builtins.str type: Policy definition type
        :param _builtins.int version: Policy definition version
        """
        pulumi.set(__self__, "entries", entries)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "type", type)
        pulumi.set(__self__, "version", version)

    @_builtins.property
    @pulumi.getter
    def entries(self) -> Sequence['outputs.GetCentralizedPolicyDefinitionEntryResult']:
        """
        List of entries
        """
        return pulumi.get(self, "entries")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        Policy definition ID
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter
    def type(self) -> _builtins.str:
        """
        Policy definition type
        """
        return pulumi.get(self, "type")

    @_builtins.property
    @pulumi.getter
    def version(self) -> _builtins.int:
        """
        Policy definition version
        """
        return pulumi.get(self, "version")


@pulumi.output_type
class GetCentralizedPolicyDefinitionEntryResult(dict):
    def __init__(__self__, *,
                 direction: _builtins.str,
                 region_ids: Sequence[_builtins.str],
                 region_list_ids: Sequence[_builtins.str],
                 region_list_versions: Sequence[_builtins.str],
                 site_list_ids: Sequence[_builtins.str],
                 site_list_versions: Sequence[_builtins.str],
                 vpn_list_ids: Sequence[_builtins.str],
                 vpn_list_versions: Sequence[_builtins.str]):
        """
        :param _builtins.str direction: Direction
        :param Sequence[_builtins.str] region_ids: List of region IDs
        :param Sequence[_builtins.str] region_list_ids: List of region list IDs
        :param Sequence[_builtins.str] region_list_versions: List of region list versions
        :param Sequence[_builtins.str] site_list_ids: List of site list IDs
        :param Sequence[_builtins.str] site_list_versions: List of site list versions
        :param Sequence[_builtins.str] vpn_list_ids: List of VPN list IDs
        :param Sequence[_builtins.str] vpn_list_versions: List of VPN list versions
        """
        pulumi.set(__self__, "direction", direction)
        pulumi.set(__self__, "region_ids", region_ids)
        pulumi.set(__self__, "region_list_ids", region_list_ids)
        pulumi.set(__self__, "region_list_versions", region_list_versions)
        pulumi.set(__self__, "site_list_ids", site_list_ids)
        pulumi.set(__self__, "site_list_versions", site_list_versions)
        pulumi.set(__self__, "vpn_list_ids", vpn_list_ids)
        pulumi.set(__self__, "vpn_list_versions", vpn_list_versions)

    @_builtins.property
    @pulumi.getter
    def direction(self) -> _builtins.str:
        """
        Direction
        """
        return pulumi.get(self, "direction")

    @_builtins.property
    @pulumi.getter(name="regionIds")
    def region_ids(self) -> Sequence[_builtins.str]:
        """
        List of region IDs
        """
        return pulumi.get(self, "region_ids")

    @_builtins.property
    @pulumi.getter(name="regionListIds")
    def region_list_ids(self) -> Sequence[_builtins.str]:
        """
        List of region list IDs
        """
        return pulumi.get(self, "region_list_ids")

    @_builtins.property
    @pulumi.getter(name="regionListVersions")
    def region_list_versions(self) -> Sequence[_builtins.str]:
        """
        List of region list versions
        """
        return pulumi.get(self, "region_list_versions")

    @_builtins.property
    @pulumi.getter(name="siteListIds")
    def site_list_ids(self) -> Sequence[_builtins.str]:
        """
        List of site list IDs
        """
        return pulumi.get(self, "site_list_ids")

    @_builtins.property
    @pulumi.getter(name="siteListVersions")
    def site_list_versions(self) -> Sequence[_builtins.str]:
        """
        List of site list versions
        """
        return pulumi.get(self, "site_list_versions")

    @_builtins.property
    @pulumi.getter(name="vpnListIds")
    def vpn_list_ids(self) -> Sequence[_builtins.str]:
        """
        List of VPN list IDs
        """
        return pulumi.get(self, "vpn_list_ids")

    @_builtins.property
    @pulumi.getter(name="vpnListVersions")
    def vpn_list_versions(self) -> Sequence[_builtins.str]:
        """
        List of VPN list versions
        """
        return pulumi.get(self, "vpn_list_versions")


@pulumi.output_type
class GetCflowdPolicyDefinitionCollectorResult(dict):
    def __init__(__self__, *,
                 bfd_metrics_exporting: _builtins.bool,
                 export_spreading: _builtins.str,
                 exporting_interval: _builtins.int,
                 ip_address: _builtins.str,
                 port: _builtins.int,
                 source_interface: _builtins.str,
                 transport: _builtins.str,
                 vpn_id: _builtins.int):
        """
        :param _builtins.bool bfd_metrics_exporting: BFD metrics exporting
        :param _builtins.str export_spreading: Export spreading
        :param _builtins.int exporting_interval: Exporting interval
        :param _builtins.str ip_address: IP address
        :param _builtins.int port: Port
        :param _builtins.str source_interface: Source interface
        :param _builtins.str transport: Transport protocol
        :param _builtins.int vpn_id: VPN ID
        """
        pulumi.set(__self__, "bfd_metrics_exporting", bfd_metrics_exporting)
        pulumi.set(__self__, "export_spreading", export_spreading)
        pulumi.set(__self__, "exporting_interval", exporting_interval)
        pulumi.set(__self__, "ip_address", ip_address)
        pulumi.set(__self__, "port", port)
        pulumi.set(__self__, "source_interface", source_interface)
        pulumi.set(__self__, "transport", transport)
        pulumi.set(__self__, "vpn_id", vpn_id)

    @_builtins.property
    @pulumi.getter(name="bfdMetricsExporting")
    def bfd_metrics_exporting(self) -> _builtins.bool:
        """
        BFD metrics exporting
        """
        return pulumi.get(self, "bfd_metrics_exporting")

    @_builtins.property
    @pulumi.getter(name="exportSpreading")
    def export_spreading(self) -> _builtins.str:
        """
        Export spreading
        """
        return pulumi.get(self, "export_spreading")

    @_builtins.property
    @pulumi.getter(name="exportingInterval")
    def exporting_interval(self) -> _builtins.int:
        """
        Exporting interval
        """
        return pulumi.get(self, "exporting_interval")

    @_builtins.property
    @pulumi.getter(name="ipAddress")
    def ip_address(self) -> _builtins.str:
        """
        IP address
        """
        return pulumi.get(self, "ip_address")

    @_builtins.property
    @pulumi.getter
    def port(self) -> _builtins.int:
        """
        Port
        """
        return pulumi.get(self, "port")

    @_builtins.property
    @pulumi.getter(name="sourceInterface")
    def source_interface(self) -> _builtins.str:
        """
        Source interface
        """
        return pulumi.get(self, "source_interface")

    @_builtins.property
    @pulumi.getter
    def transport(self) -> _builtins.str:
        """
        Transport protocol
        """
        return pulumi.get(self, "transport")

    @_builtins.property
    @pulumi.getter(name="vpnId")
    def vpn_id(self) -> _builtins.int:
        """
        VPN ID
        """
        return pulumi.get(self, "vpn_id")


@pulumi.output_type
class GetCiscoBfdFeatureTemplateColorResult(dict):
    def __init__(__self__, *,
                 color: _builtins.str,
                 color_variable: _builtins.str,
                 dscp: _builtins.int,
                 dscp_variable: _builtins.str,
                 hello_interval: _builtins.int,
                 hello_interval_variable: _builtins.str,
                 multiplier: _builtins.int,
                 multiplier_variable: _builtins.str,
                 optional: _builtins.bool,
                 pmtu_discovery: _builtins.bool,
                 pmtu_discovery_variable: _builtins.str):
        """
        :param _builtins.str color: Set color that identifies the WAN transport tunnel
        :param _builtins.str color_variable: Variable name
        :param _builtins.int dscp: Set BFD Default DSCP value for tloc color
        :param _builtins.str dscp_variable: Variable name
        :param _builtins.int hello_interval: Set how often BFD sends Hello packets
        :param _builtins.str hello_interval_variable: Variable name
        :param _builtins.int multiplier: Set how many Hello packet intervals to wait before declaring that a tunnel has failed
        :param _builtins.str multiplier_variable: Variable name
        :param _builtins.bool optional: Indicates if list item is considered optional.
        :param _builtins.bool pmtu_discovery: Control automatic path MTU discovery
        :param _builtins.str pmtu_discovery_variable: Variable name
        """
        pulumi.set(__self__, "color", color)
        pulumi.set(__self__, "color_variable", color_variable)
        pulumi.set(__self__, "dscp", dscp)
        pulumi.set(__self__, "dscp_variable", dscp_variable)
        pulumi.set(__self__, "hello_interval", hello_interval)
        pulumi.set(__self__, "hello_interval_variable", hello_interval_variable)
        pulumi.set(__self__, "multiplier", multiplier)
        pulumi.set(__self__, "multiplier_variable", multiplier_variable)
        pulumi.set(__self__, "optional", optional)
        pulumi.set(__self__, "pmtu_discovery", pmtu_discovery)
        pulumi.set(__self__, "pmtu_discovery_variable", pmtu_discovery_variable)

    @_builtins.property
    @pulumi.getter
    def color(self) -> _builtins.str:
        """
        Set color that identifies the WAN transport tunnel
        """
        return pulumi.get(self, "color")

    @_builtins.property
    @pulumi.getter(name="colorVariable")
    def color_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "color_variable")

    @_builtins.property
    @pulumi.getter
    def dscp(self) -> _builtins.int:
        """
        Set BFD Default DSCP value for tloc color
        """
        return pulumi.get(self, "dscp")

    @_builtins.property
    @pulumi.getter(name="dscpVariable")
    def dscp_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "dscp_variable")

    @_builtins.property
    @pulumi.getter(name="helloInterval")
    def hello_interval(self) -> _builtins.int:
        """
        Set how often BFD sends Hello packets
        """
        return pulumi.get(self, "hello_interval")

    @_builtins.property
    @pulumi.getter(name="helloIntervalVariable")
    def hello_interval_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "hello_interval_variable")

    @_builtins.property
    @pulumi.getter
    def multiplier(self) -> _builtins.int:
        """
        Set how many Hello packet intervals to wait before declaring that a tunnel has failed
        """
        return pulumi.get(self, "multiplier")

    @_builtins.property
    @pulumi.getter(name="multiplierVariable")
    def multiplier_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "multiplier_variable")

    @_builtins.property
    @pulumi.getter
    def optional(self) -> _builtins.bool:
        """
        Indicates if list item is considered optional.
        """
        return pulumi.get(self, "optional")

    @_builtins.property
    @pulumi.getter(name="pmtuDiscovery")
    def pmtu_discovery(self) -> _builtins.bool:
        """
        Control automatic path MTU discovery
        """
        return pulumi.get(self, "pmtu_discovery")

    @_builtins.property
    @pulumi.getter(name="pmtuDiscoveryVariable")
    def pmtu_discovery_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "pmtu_discovery_variable")


@pulumi.output_type
class GetCiscoBgpFeatureTemplateAddressFamilyResult(dict):
    def __init__(__self__, *,
                 default_information_originate: _builtins.bool,
                 default_information_originate_variable: _builtins.str,
                 family_type: _builtins.str,
                 ipv4_aggregate_addresses: Sequence['outputs.GetCiscoBgpFeatureTemplateAddressFamilyIpv4AggregateAddressResult'],
                 ipv4_networks: Sequence['outputs.GetCiscoBgpFeatureTemplateAddressFamilyIpv4NetworkResult'],
                 ipv6_aggregate_addresses: Sequence['outputs.GetCiscoBgpFeatureTemplateAddressFamilyIpv6AggregateAddressResult'],
                 ipv6_networks: Sequence['outputs.GetCiscoBgpFeatureTemplateAddressFamilyIpv6NetworkResult'],
                 maximum_paths: _builtins.int,
                 maximum_paths_variable: _builtins.str,
                 optional: _builtins.bool,
                 redistribute_routes: Sequence['outputs.GetCiscoBgpFeatureTemplateAddressFamilyRedistributeRouteResult'],
                 table_map_filter: _builtins.bool,
                 table_map_filter_variable: _builtins.str,
                 table_map_policy: _builtins.str,
                 table_map_policy_variable: _builtins.str):
        """
        :param _builtins.bool default_information_originate: BGP Default Information Originate
        :param _builtins.str default_information_originate_variable: Variable name
        :param _builtins.str family_type: Set BGP address family
        :param Sequence['GetCiscoBgpFeatureTemplateAddressFamilyIpv4AggregateAddressArgs'] ipv4_aggregate_addresses: Aggregate prefixes in specific range
        :param Sequence['GetCiscoBgpFeatureTemplateAddressFamilyIpv4NetworkArgs'] ipv4_networks: Configure the networks for BGP to advertise
        :param Sequence['GetCiscoBgpFeatureTemplateAddressFamilyIpv6AggregateAddressArgs'] ipv6_aggregate_addresses: IPv6 Aggregate prefixes in specific range
        :param Sequence['GetCiscoBgpFeatureTemplateAddressFamilyIpv6NetworkArgs'] ipv6_networks: Configure the networks for BGP to advertise
        :param _builtins.int maximum_paths: Set maximum number of parallel IBGP paths for multipath load sharing
        :param _builtins.str maximum_paths_variable: Variable name
        :param _builtins.bool optional: Indicates if list item is considered optional.
        :param Sequence['GetCiscoBgpFeatureTemplateAddressFamilyRedistributeRouteArgs'] redistribute_routes: Redistribute routes into BGP
        :param _builtins.bool table_map_filter: Filter
        :param _builtins.str table_map_filter_variable: Variable name
        :param _builtins.str table_map_policy: Map external entry attributes into routing table
        :param _builtins.str table_map_policy_variable: Variable name
        """
        pulumi.set(__self__, "default_information_originate", default_information_originate)
        pulumi.set(__self__, "default_information_originate_variable", default_information_originate_variable)
        pulumi.set(__self__, "family_type", family_type)
        pulumi.set(__self__, "ipv4_aggregate_addresses", ipv4_aggregate_addresses)
        pulumi.set(__self__, "ipv4_networks", ipv4_networks)
        pulumi.set(__self__, "ipv6_aggregate_addresses", ipv6_aggregate_addresses)
        pulumi.set(__self__, "ipv6_networks", ipv6_networks)
        pulumi.set(__self__, "maximum_paths", maximum_paths)
        pulumi.set(__self__, "maximum_paths_variable", maximum_paths_variable)
        pulumi.set(__self__, "optional", optional)
        pulumi.set(__self__, "redistribute_routes", redistribute_routes)
        pulumi.set(__self__, "table_map_filter", table_map_filter)
        pulumi.set(__self__, "table_map_filter_variable", table_map_filter_variable)
        pulumi.set(__self__, "table_map_policy", table_map_policy)
        pulumi.set(__self__, "table_map_policy_variable", table_map_policy_variable)

    @_builtins.property
    @pulumi.getter(name="defaultInformationOriginate")
    def default_information_originate(self) -> _builtins.bool:
        """
        BGP Default Information Originate
        """
        return pulumi.get(self, "default_information_originate")

    @_builtins.property
    @pulumi.getter(name="defaultInformationOriginateVariable")
    def default_information_originate_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "default_information_originate_variable")

    @_builtins.property
    @pulumi.getter(name="familyType")
    def family_type(self) -> _builtins.str:
        """
        Set BGP address family
        """
        return pulumi.get(self, "family_type")

    @_builtins.property
    @pulumi.getter(name="ipv4AggregateAddresses")
    def ipv4_aggregate_addresses(self) -> Sequence['outputs.GetCiscoBgpFeatureTemplateAddressFamilyIpv4AggregateAddressResult']:
        """
        Aggregate prefixes in specific range
        """
        return pulumi.get(self, "ipv4_aggregate_addresses")

    @_builtins.property
    @pulumi.getter(name="ipv4Networks")
    def ipv4_networks(self) -> Sequence['outputs.GetCiscoBgpFeatureTemplateAddressFamilyIpv4NetworkResult']:
        """
        Configure the networks for BGP to advertise
        """
        return pulumi.get(self, "ipv4_networks")

    @_builtins.property
    @pulumi.getter(name="ipv6AggregateAddresses")
    def ipv6_aggregate_addresses(self) -> Sequence['outputs.GetCiscoBgpFeatureTemplateAddressFamilyIpv6AggregateAddressResult']:
        """
        IPv6 Aggregate prefixes in specific range
        """
        return pulumi.get(self, "ipv6_aggregate_addresses")

    @_builtins.property
    @pulumi.getter(name="ipv6Networks")
    def ipv6_networks(self) -> Sequence['outputs.GetCiscoBgpFeatureTemplateAddressFamilyIpv6NetworkResult']:
        """
        Configure the networks for BGP to advertise
        """
        return pulumi.get(self, "ipv6_networks")

    @_builtins.property
    @pulumi.getter(name="maximumPaths")
    def maximum_paths(self) -> _builtins.int:
        """
        Set maximum number of parallel IBGP paths for multipath load sharing
        """
        return pulumi.get(self, "maximum_paths")

    @_builtins.property
    @pulumi.getter(name="maximumPathsVariable")
    def maximum_paths_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "maximum_paths_variable")

    @_builtins.property
    @pulumi.getter
    def optional(self) -> _builtins.bool:
        """
        Indicates if list item is considered optional.
        """
        return pulumi.get(self, "optional")

    @_builtins.property
    @pulumi.getter(name="redistributeRoutes")
    def redistribute_routes(self) -> Sequence['outputs.GetCiscoBgpFeatureTemplateAddressFamilyRedistributeRouteResult']:
        """
        Redistribute routes into BGP
        """
        return pulumi.get(self, "redistribute_routes")

    @_builtins.property
    @pulumi.getter(name="tableMapFilter")
    def table_map_filter(self) -> _builtins.bool:
        """
        Filter
        """
        return pulumi.get(self, "table_map_filter")

    @_builtins.property
    @pulumi.getter(name="tableMapFilterVariable")
    def table_map_filter_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "table_map_filter_variable")

    @_builtins.property
    @pulumi.getter(name="tableMapPolicy")
    def table_map_policy(self) -> _builtins.str:
        """
        Map external entry attributes into routing table
        """
        return pulumi.get(self, "table_map_policy")

    @_builtins.property
    @pulumi.getter(name="tableMapPolicyVariable")
    def table_map_policy_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "table_map_policy_variable")


@pulumi.output_type
class GetCiscoBgpFeatureTemplateAddressFamilyIpv4AggregateAddressResult(dict):
    def __init__(__self__, *,
                 as_set_path: _builtins.bool,
                 as_set_path_variable: _builtins.str,
                 optional: _builtins.bool,
                 prefix: _builtins.str,
                 prefix_variable: _builtins.str,
                 summary_only: _builtins.bool,
                 summary_only_variable: _builtins.str):
        """
        :param _builtins.bool as_set_path: Set AS set path information
        :param _builtins.str as_set_path_variable: Variable name
        :param _builtins.bool optional: Indicates if list item is considered optional.
        :param _builtins.str prefix: Configure the prefixes to aggregate
        :param _builtins.str prefix_variable: Variable name
        :param _builtins.bool summary_only: Filter out more specific routes from updates
        :param _builtins.str summary_only_variable: Variable name
        """
        pulumi.set(__self__, "as_set_path", as_set_path)
        pulumi.set(__self__, "as_set_path_variable", as_set_path_variable)
        pulumi.set(__self__, "optional", optional)
        pulumi.set(__self__, "prefix", prefix)
        pulumi.set(__self__, "prefix_variable", prefix_variable)
        pulumi.set(__self__, "summary_only", summary_only)
        pulumi.set(__self__, "summary_only_variable", summary_only_variable)

    @_builtins.property
    @pulumi.getter(name="asSetPath")
    def as_set_path(self) -> _builtins.bool:
        """
        Set AS set path information
        """
        return pulumi.get(self, "as_set_path")

    @_builtins.property
    @pulumi.getter(name="asSetPathVariable")
    def as_set_path_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "as_set_path_variable")

    @_builtins.property
    @pulumi.getter
    def optional(self) -> _builtins.bool:
        """
        Indicates if list item is considered optional.
        """
        return pulumi.get(self, "optional")

    @_builtins.property
    @pulumi.getter
    def prefix(self) -> _builtins.str:
        """
        Configure the prefixes to aggregate
        """
        return pulumi.get(self, "prefix")

    @_builtins.property
    @pulumi.getter(name="prefixVariable")
    def prefix_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "prefix_variable")

    @_builtins.property
    @pulumi.getter(name="summaryOnly")
    def summary_only(self) -> _builtins.bool:
        """
        Filter out more specific routes from updates
        """
        return pulumi.get(self, "summary_only")

    @_builtins.property
    @pulumi.getter(name="summaryOnlyVariable")
    def summary_only_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "summary_only_variable")


@pulumi.output_type
class GetCiscoBgpFeatureTemplateAddressFamilyIpv4NetworkResult(dict):
    def __init__(__self__, *,
                 optional: _builtins.bool,
                 prefix: _builtins.str,
                 prefix_variable: _builtins.str):
        """
        :param _builtins.bool optional: Indicates if list item is considered optional.
        :param _builtins.str prefix: Configure the prefixes for BGP to announce
        :param _builtins.str prefix_variable: Variable name
        """
        pulumi.set(__self__, "optional", optional)
        pulumi.set(__self__, "prefix", prefix)
        pulumi.set(__self__, "prefix_variable", prefix_variable)

    @_builtins.property
    @pulumi.getter
    def optional(self) -> _builtins.bool:
        """
        Indicates if list item is considered optional.
        """
        return pulumi.get(self, "optional")

    @_builtins.property
    @pulumi.getter
    def prefix(self) -> _builtins.str:
        """
        Configure the prefixes for BGP to announce
        """
        return pulumi.get(self, "prefix")

    @_builtins.property
    @pulumi.getter(name="prefixVariable")
    def prefix_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "prefix_variable")


@pulumi.output_type
class GetCiscoBgpFeatureTemplateAddressFamilyIpv6AggregateAddressResult(dict):
    def __init__(__self__, *,
                 as_set_path: _builtins.bool,
                 as_set_path_variable: _builtins.str,
                 optional: _builtins.bool,
                 prefix: _builtins.str,
                 prefix_variable: _builtins.str,
                 summary_only: _builtins.bool,
                 summary_only_variable: _builtins.str):
        """
        :param _builtins.bool as_set_path: Set AS set path information
        :param _builtins.str as_set_path_variable: Variable name
        :param _builtins.bool optional: Indicates if list item is considered optional.
        :param _builtins.str prefix: Configure the IPv6 prefixes to aggregate
        :param _builtins.str prefix_variable: Variable name
        :param _builtins.bool summary_only: Filter out more specific routes from updates
        :param _builtins.str summary_only_variable: Variable name
        """
        pulumi.set(__self__, "as_set_path", as_set_path)
        pulumi.set(__self__, "as_set_path_variable", as_set_path_variable)
        pulumi.set(__self__, "optional", optional)
        pulumi.set(__self__, "prefix", prefix)
        pulumi.set(__self__, "prefix_variable", prefix_variable)
        pulumi.set(__self__, "summary_only", summary_only)
        pulumi.set(__self__, "summary_only_variable", summary_only_variable)

    @_builtins.property
    @pulumi.getter(name="asSetPath")
    def as_set_path(self) -> _builtins.bool:
        """
        Set AS set path information
        """
        return pulumi.get(self, "as_set_path")

    @_builtins.property
    @pulumi.getter(name="asSetPathVariable")
    def as_set_path_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "as_set_path_variable")

    @_builtins.property
    @pulumi.getter
    def optional(self) -> _builtins.bool:
        """
        Indicates if list item is considered optional.
        """
        return pulumi.get(self, "optional")

    @_builtins.property
    @pulumi.getter
    def prefix(self) -> _builtins.str:
        """
        Configure the IPv6 prefixes to aggregate
        """
        return pulumi.get(self, "prefix")

    @_builtins.property
    @pulumi.getter(name="prefixVariable")
    def prefix_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "prefix_variable")

    @_builtins.property
    @pulumi.getter(name="summaryOnly")
    def summary_only(self) -> _builtins.bool:
        """
        Filter out more specific routes from updates
        """
        return pulumi.get(self, "summary_only")

    @_builtins.property
    @pulumi.getter(name="summaryOnlyVariable")
    def summary_only_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "summary_only_variable")


@pulumi.output_type
class GetCiscoBgpFeatureTemplateAddressFamilyIpv6NetworkResult(dict):
    def __init__(__self__, *,
                 optional: _builtins.bool,
                 prefix: _builtins.str,
                 prefix_variable: _builtins.str):
        """
        :param _builtins.bool optional: Indicates if list item is considered optional.
        :param _builtins.str prefix: Configure the prefixes for BGP to announce
        :param _builtins.str prefix_variable: Variable name
        """
        pulumi.set(__self__, "optional", optional)
        pulumi.set(__self__, "prefix", prefix)
        pulumi.set(__self__, "prefix_variable", prefix_variable)

    @_builtins.property
    @pulumi.getter
    def optional(self) -> _builtins.bool:
        """
        Indicates if list item is considered optional.
        """
        return pulumi.get(self, "optional")

    @_builtins.property
    @pulumi.getter
    def prefix(self) -> _builtins.str:
        """
        Configure the prefixes for BGP to announce
        """
        return pulumi.get(self, "prefix")

    @_builtins.property
    @pulumi.getter(name="prefixVariable")
    def prefix_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "prefix_variable")


@pulumi.output_type
class GetCiscoBgpFeatureTemplateAddressFamilyRedistributeRouteResult(dict):
    def __init__(__self__, *,
                 optional: _builtins.bool,
                 protocol: _builtins.str,
                 protocol_variable: _builtins.str,
                 route_policy: _builtins.str,
                 route_policy_variable: _builtins.str):
        """
        :param _builtins.bool optional: Indicates if list item is considered optional.
        :param _builtins.str protocol: Set the protocol to redistribute routes from
        :param _builtins.str protocol_variable: Variable name
        :param _builtins.str route_policy: Configure policy to apply to prefixes received from BGP neighbor
        :param _builtins.str route_policy_variable: Variable name
        """
        pulumi.set(__self__, "optional", optional)
        pulumi.set(__self__, "protocol", protocol)
        pulumi.set(__self__, "protocol_variable", protocol_variable)
        pulumi.set(__self__, "route_policy", route_policy)
        pulumi.set(__self__, "route_policy_variable", route_policy_variable)

    @_builtins.property
    @pulumi.getter
    def optional(self) -> _builtins.bool:
        """
        Indicates if list item is considered optional.
        """
        return pulumi.get(self, "optional")

    @_builtins.property
    @pulumi.getter
    def protocol(self) -> _builtins.str:
        """
        Set the protocol to redistribute routes from
        """
        return pulumi.get(self, "protocol")

    @_builtins.property
    @pulumi.getter(name="protocolVariable")
    def protocol_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "protocol_variable")

    @_builtins.property
    @pulumi.getter(name="routePolicy")
    def route_policy(self) -> _builtins.str:
        """
        Configure policy to apply to prefixes received from BGP neighbor
        """
        return pulumi.get(self, "route_policy")

    @_builtins.property
    @pulumi.getter(name="routePolicyVariable")
    def route_policy_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "route_policy_variable")


@pulumi.output_type
class GetCiscoBgpFeatureTemplateIpv4NeighborResult(dict):
    def __init__(__self__, *,
                 address: _builtins.str,
                 address_families: Sequence['outputs.GetCiscoBgpFeatureTemplateIpv4NeighborAddressFamilyResult'],
                 address_variable: _builtins.str,
                 allow_as_in: _builtins.int,
                 allow_as_in_variable: _builtins.str,
                 as_override: _builtins.bool,
                 as_override_variable: _builtins.str,
                 description: _builtins.str,
                 description_variable: _builtins.str,
                 ebgp_multihop: _builtins.int,
                 ebgp_multihop_variable: _builtins.str,
                 holdtime: _builtins.int,
                 holdtime_variable: _builtins.str,
                 keepalive: _builtins.int,
                 keepalive_variable: _builtins.str,
                 next_hop_self: _builtins.bool,
                 next_hop_self_variable: _builtins.str,
                 optional: _builtins.bool,
                 password: _builtins.str,
                 password_variable: _builtins.str,
                 remote_as: _builtins.str,
                 remote_as_variable: _builtins.str,
                 send_community: _builtins.bool,
                 send_community_variable: _builtins.str,
                 send_ext_community: _builtins.bool,
                 send_ext_community_variable: _builtins.str,
                 send_label: _builtins.bool,
                 send_label_explicit: _builtins.bool,
                 send_label_explicit_variable: _builtins.str,
                 send_label_variable: _builtins.str,
                 shutdown: _builtins.bool,
                 shutdown_variable: _builtins.str,
                 source_interface: _builtins.str,
                 source_interface_variable: _builtins.str):
        """
        :param _builtins.str address: Set neighbor address
        :param Sequence['GetCiscoBgpFeatureTemplateIpv4NeighborAddressFamilyArgs'] address_families: Set BGP address family
        :param _builtins.str address_variable: Variable name
        :param _builtins.int allow_as_in: As Number
        :param _builtins.str allow_as_in_variable: Variable name
        :param _builtins.bool as_override: As Override
        :param _builtins.str as_override_variable: Variable name
        :param _builtins.str description: Set description
        :param _builtins.str description_variable: Variable name
        :param _builtins.int ebgp_multihop: Set TTL value for peers that are not directly connected
        :param _builtins.str ebgp_multihop_variable: Variable name
        :param _builtins.int holdtime: Set how long to wait since receiving a keepalive message to consider BGP peer unavailable
        :param _builtins.str holdtime_variable: Variable name
        :param _builtins.int keepalive: Set how often to advertise keepalive messages to BGP peer
        :param _builtins.str keepalive_variable: Variable name
        :param _builtins.bool next_hop_self: Set router to be next hop for routes advertised to neighbor
        :param _builtins.str next_hop_self_variable: Variable name
        :param _builtins.bool optional: Indicates if list item is considered optional.
        :param _builtins.str password: Set MD5 password on TCP connection with BGP peer
        :param _builtins.str password_variable: Variable name
        :param _builtins.str remote_as: Set remote autonomous system number
        :param _builtins.str remote_as_variable: Variable name
        :param _builtins.bool send_community: Send community attribute
        :param _builtins.str send_community_variable: Variable name
        :param _builtins.bool send_ext_community: Send extended community attribute
        :param _builtins.str send_ext_community_variable: Variable name
        :param _builtins.bool send_label: Send label
        :param _builtins.bool send_label_explicit: Send label
        :param _builtins.str send_label_explicit_variable: Variable name
        :param _builtins.str send_label_variable: Variable name
        :param _builtins.bool shutdown: Enable or disable a BGP neighbor
        :param _builtins.str shutdown_variable: Variable name
        :param _builtins.str source_interface: Set IP address of interface for TCP connection to BGP neighbor
        :param _builtins.str source_interface_variable: Variable name
        """
        pulumi.set(__self__, "address", address)
        pulumi.set(__self__, "address_families", address_families)
        pulumi.set(__self__, "address_variable", address_variable)
        pulumi.set(__self__, "allow_as_in", allow_as_in)
        pulumi.set(__self__, "allow_as_in_variable", allow_as_in_variable)
        pulumi.set(__self__, "as_override", as_override)
        pulumi.set(__self__, "as_override_variable", as_override_variable)
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "description_variable", description_variable)
        pulumi.set(__self__, "ebgp_multihop", ebgp_multihop)
        pulumi.set(__self__, "ebgp_multihop_variable", ebgp_multihop_variable)
        pulumi.set(__self__, "holdtime", holdtime)
        pulumi.set(__self__, "holdtime_variable", holdtime_variable)
        pulumi.set(__self__, "keepalive", keepalive)
        pulumi.set(__self__, "keepalive_variable", keepalive_variable)
        pulumi.set(__self__, "next_hop_self", next_hop_self)
        pulumi.set(__self__, "next_hop_self_variable", next_hop_self_variable)
        pulumi.set(__self__, "optional", optional)
        pulumi.set(__self__, "password", password)
        pulumi.set(__self__, "password_variable", password_variable)
        pulumi.set(__self__, "remote_as", remote_as)
        pulumi.set(__self__, "remote_as_variable", remote_as_variable)
        pulumi.set(__self__, "send_community", send_community)
        pulumi.set(__self__, "send_community_variable", send_community_variable)
        pulumi.set(__self__, "send_ext_community", send_ext_community)
        pulumi.set(__self__, "send_ext_community_variable", send_ext_community_variable)
        pulumi.set(__self__, "send_label", send_label)
        pulumi.set(__self__, "send_label_explicit", send_label_explicit)
        pulumi.set(__self__, "send_label_explicit_variable", send_label_explicit_variable)
        pulumi.set(__self__, "send_label_variable", send_label_variable)
        pulumi.set(__self__, "shutdown", shutdown)
        pulumi.set(__self__, "shutdown_variable", shutdown_variable)
        pulumi.set(__self__, "source_interface", source_interface)
        pulumi.set(__self__, "source_interface_variable", source_interface_variable)

    @_builtins.property
    @pulumi.getter
    def address(self) -> _builtins.str:
        """
        Set neighbor address
        """
        return pulumi.get(self, "address")

    @_builtins.property
    @pulumi.getter(name="addressFamilies")
    def address_families(self) -> Sequence['outputs.GetCiscoBgpFeatureTemplateIpv4NeighborAddressFamilyResult']:
        """
        Set BGP address family
        """
        return pulumi.get(self, "address_families")

    @_builtins.property
    @pulumi.getter(name="addressVariable")
    def address_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "address_variable")

    @_builtins.property
    @pulumi.getter(name="allowAsIn")
    def allow_as_in(self) -> _builtins.int:
        """
        As Number
        """
        return pulumi.get(self, "allow_as_in")

    @_builtins.property
    @pulumi.getter(name="allowAsInVariable")
    def allow_as_in_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "allow_as_in_variable")

    @_builtins.property
    @pulumi.getter(name="asOverride")
    def as_override(self) -> _builtins.bool:
        """
        As Override
        """
        return pulumi.get(self, "as_override")

    @_builtins.property
    @pulumi.getter(name="asOverrideVariable")
    def as_override_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "as_override_variable")

    @_builtins.property
    @pulumi.getter
    def description(self) -> _builtins.str:
        """
        Set description
        """
        return pulumi.get(self, "description")

    @_builtins.property
    @pulumi.getter(name="descriptionVariable")
    def description_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "description_variable")

    @_builtins.property
    @pulumi.getter(name="ebgpMultihop")
    def ebgp_multihop(self) -> _builtins.int:
        """
        Set TTL value for peers that are not directly connected
        """
        return pulumi.get(self, "ebgp_multihop")

    @_builtins.property
    @pulumi.getter(name="ebgpMultihopVariable")
    def ebgp_multihop_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "ebgp_multihop_variable")

    @_builtins.property
    @pulumi.getter
    def holdtime(self) -> _builtins.int:
        """
        Set how long to wait since receiving a keepalive message to consider BGP peer unavailable
        """
        return pulumi.get(self, "holdtime")

    @_builtins.property
    @pulumi.getter(name="holdtimeVariable")
    def holdtime_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "holdtime_variable")

    @_builtins.property
    @pulumi.getter
    def keepalive(self) -> _builtins.int:
        """
        Set how often to advertise keepalive messages to BGP peer
        """
        return pulumi.get(self, "keepalive")

    @_builtins.property
    @pulumi.getter(name="keepaliveVariable")
    def keepalive_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "keepalive_variable")

    @_builtins.property
    @pulumi.getter(name="nextHopSelf")
    def next_hop_self(self) -> _builtins.bool:
        """
        Set router to be next hop for routes advertised to neighbor
        """
        return pulumi.get(self, "next_hop_self")

    @_builtins.property
    @pulumi.getter(name="nextHopSelfVariable")
    def next_hop_self_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "next_hop_self_variable")

    @_builtins.property
    @pulumi.getter
    def optional(self) -> _builtins.bool:
        """
        Indicates if list item is considered optional.
        """
        return pulumi.get(self, "optional")

    @_builtins.property
    @pulumi.getter
    def password(self) -> _builtins.str:
        """
        Set MD5 password on TCP connection with BGP peer
        """
        return pulumi.get(self, "password")

    @_builtins.property
    @pulumi.getter(name="passwordVariable")
    def password_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "password_variable")

    @_builtins.property
    @pulumi.getter(name="remoteAs")
    def remote_as(self) -> _builtins.str:
        """
        Set remote autonomous system number
        """
        return pulumi.get(self, "remote_as")

    @_builtins.property
    @pulumi.getter(name="remoteAsVariable")
    def remote_as_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "remote_as_variable")

    @_builtins.property
    @pulumi.getter(name="sendCommunity")
    def send_community(self) -> _builtins.bool:
        """
        Send community attribute
        """
        return pulumi.get(self, "send_community")

    @_builtins.property
    @pulumi.getter(name="sendCommunityVariable")
    def send_community_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "send_community_variable")

    @_builtins.property
    @pulumi.getter(name="sendExtCommunity")
    def send_ext_community(self) -> _builtins.bool:
        """
        Send extended community attribute
        """
        return pulumi.get(self, "send_ext_community")

    @_builtins.property
    @pulumi.getter(name="sendExtCommunityVariable")
    def send_ext_community_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "send_ext_community_variable")

    @_builtins.property
    @pulumi.getter(name="sendLabel")
    def send_label(self) -> _builtins.bool:
        """
        Send label
        """
        return pulumi.get(self, "send_label")

    @_builtins.property
    @pulumi.getter(name="sendLabelExplicit")
    def send_label_explicit(self) -> _builtins.bool:
        """
        Send label
        """
        return pulumi.get(self, "send_label_explicit")

    @_builtins.property
    @pulumi.getter(name="sendLabelExplicitVariable")
    def send_label_explicit_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "send_label_explicit_variable")

    @_builtins.property
    @pulumi.getter(name="sendLabelVariable")
    def send_label_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "send_label_variable")

    @_builtins.property
    @pulumi.getter
    def shutdown(self) -> _builtins.bool:
        """
        Enable or disable a BGP neighbor
        """
        return pulumi.get(self, "shutdown")

    @_builtins.property
    @pulumi.getter(name="shutdownVariable")
    def shutdown_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "shutdown_variable")

    @_builtins.property
    @pulumi.getter(name="sourceInterface")
    def source_interface(self) -> _builtins.str:
        """
        Set IP address of interface for TCP connection to BGP neighbor
        """
        return pulumi.get(self, "source_interface")

    @_builtins.property
    @pulumi.getter(name="sourceInterfaceVariable")
    def source_interface_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "source_interface_variable")


@pulumi.output_type
class GetCiscoBgpFeatureTemplateIpv4NeighborAddressFamilyResult(dict):
    def __init__(__self__, *,
                 family_type: _builtins.str,
                 maximum_prefixes: _builtins.int,
                 maximum_prefixes_restart: _builtins.int,
                 maximum_prefixes_restart_variable: _builtins.str,
                 maximum_prefixes_threshold: _builtins.int,
                 maximum_prefixes_threshold_variable: _builtins.str,
                 maximum_prefixes_variable: _builtins.str,
                 maximum_prefixes_warning_only: _builtins.bool,
                 maximum_prefixes_warning_only_variable: _builtins.str,
                 optional: _builtins.bool,
                 route_policies: Sequence['outputs.GetCiscoBgpFeatureTemplateIpv4NeighborAddressFamilyRoutePolicyResult']):
        """
        :param _builtins.str family_type: Set BGP address family
        :param _builtins.int maximum_prefixes: Set maximum number of prefixes accepted from BGP peer
        :param _builtins.int maximum_prefixes_restart: Set when to restart BGP connection if threshold is exceeded
        :param _builtins.str maximum_prefixes_restart_variable: Variable name
        :param _builtins.int maximum_prefixes_threshold: Set threshold at which to generate a warning message
        :param _builtins.str maximum_prefixes_threshold_variable: Variable name
        :param _builtins.str maximum_prefixes_variable: Variable name
        :param _builtins.bool maximum_prefixes_warning_only: Display only a warning message when threshold is exceeded
        :param _builtins.str maximum_prefixes_warning_only_variable: Variable name
        :param _builtins.bool optional: Indicates if list item is considered optional.
        :param Sequence['GetCiscoBgpFeatureTemplateIpv4NeighborAddressFamilyRoutePolicyArgs'] route_policies: Select route policy to apply to prefixes received from BGP neighbor
        """
        pulumi.set(__self__, "family_type", family_type)
        pulumi.set(__self__, "maximum_prefixes", maximum_prefixes)
        pulumi.set(__self__, "maximum_prefixes_restart", maximum_prefixes_restart)
        pulumi.set(__self__, "maximum_prefixes_restart_variable", maximum_prefixes_restart_variable)
        pulumi.set(__self__, "maximum_prefixes_threshold", maximum_prefixes_threshold)
        pulumi.set(__self__, "maximum_prefixes_threshold_variable", maximum_prefixes_threshold_variable)
        pulumi.set(__self__, "maximum_prefixes_variable", maximum_prefixes_variable)
        pulumi.set(__self__, "maximum_prefixes_warning_only", maximum_prefixes_warning_only)
        pulumi.set(__self__, "maximum_prefixes_warning_only_variable", maximum_prefixes_warning_only_variable)
        pulumi.set(__self__, "optional", optional)
        pulumi.set(__self__, "route_policies", route_policies)

    @_builtins.property
    @pulumi.getter(name="familyType")
    def family_type(self) -> _builtins.str:
        """
        Set BGP address family
        """
        return pulumi.get(self, "family_type")

    @_builtins.property
    @pulumi.getter(name="maximumPrefixes")
    def maximum_prefixes(self) -> _builtins.int:
        """
        Set maximum number of prefixes accepted from BGP peer
        """
        return pulumi.get(self, "maximum_prefixes")

    @_builtins.property
    @pulumi.getter(name="maximumPrefixesRestart")
    def maximum_prefixes_restart(self) -> _builtins.int:
        """
        Set when to restart BGP connection if threshold is exceeded
        """
        return pulumi.get(self, "maximum_prefixes_restart")

    @_builtins.property
    @pulumi.getter(name="maximumPrefixesRestartVariable")
    def maximum_prefixes_restart_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "maximum_prefixes_restart_variable")

    @_builtins.property
    @pulumi.getter(name="maximumPrefixesThreshold")
    def maximum_prefixes_threshold(self) -> _builtins.int:
        """
        Set threshold at which to generate a warning message
        """
        return pulumi.get(self, "maximum_prefixes_threshold")

    @_builtins.property
    @pulumi.getter(name="maximumPrefixesThresholdVariable")
    def maximum_prefixes_threshold_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "maximum_prefixes_threshold_variable")

    @_builtins.property
    @pulumi.getter(name="maximumPrefixesVariable")
    def maximum_prefixes_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "maximum_prefixes_variable")

    @_builtins.property
    @pulumi.getter(name="maximumPrefixesWarningOnly")
    def maximum_prefixes_warning_only(self) -> _builtins.bool:
        """
        Display only a warning message when threshold is exceeded
        """
        return pulumi.get(self, "maximum_prefixes_warning_only")

    @_builtins.property
    @pulumi.getter(name="maximumPrefixesWarningOnlyVariable")
    def maximum_prefixes_warning_only_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "maximum_prefixes_warning_only_variable")

    @_builtins.property
    @pulumi.getter
    def optional(self) -> _builtins.bool:
        """
        Indicates if list item is considered optional.
        """
        return pulumi.get(self, "optional")

    @_builtins.property
    @pulumi.getter(name="routePolicies")
    def route_policies(self) -> Sequence['outputs.GetCiscoBgpFeatureTemplateIpv4NeighborAddressFamilyRoutePolicyResult']:
        """
        Select route policy to apply to prefixes received from BGP neighbor
        """
        return pulumi.get(self, "route_policies")


@pulumi.output_type
class GetCiscoBgpFeatureTemplateIpv4NeighborAddressFamilyRoutePolicyResult(dict):
    def __init__(__self__, *,
                 direction: _builtins.str,
                 optional: _builtins.bool,
                 policy_name: _builtins.str,
                 policy_name_variable: _builtins.str):
        """
        :param _builtins.str direction: Set direction for applying route policy
        :param _builtins.bool optional: Indicates if list item is considered optional.
        :param _builtins.str policy_name: Configure name of route policy
        :param _builtins.str policy_name_variable: Variable name
        """
        pulumi.set(__self__, "direction", direction)
        pulumi.set(__self__, "optional", optional)
        pulumi.set(__self__, "policy_name", policy_name)
        pulumi.set(__self__, "policy_name_variable", policy_name_variable)

    @_builtins.property
    @pulumi.getter
    def direction(self) -> _builtins.str:
        """
        Set direction for applying route policy
        """
        return pulumi.get(self, "direction")

    @_builtins.property
    @pulumi.getter
    def optional(self) -> _builtins.bool:
        """
        Indicates if list item is considered optional.
        """
        return pulumi.get(self, "optional")

    @_builtins.property
    @pulumi.getter(name="policyName")
    def policy_name(self) -> _builtins.str:
        """
        Configure name of route policy
        """
        return pulumi.get(self, "policy_name")

    @_builtins.property
    @pulumi.getter(name="policyNameVariable")
    def policy_name_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "policy_name_variable")


@pulumi.output_type
class GetCiscoBgpFeatureTemplateIpv4RouteTargetResult(dict):
    def __init__(__self__, *,
                 exports: Sequence['outputs.GetCiscoBgpFeatureTemplateIpv4RouteTargetExportResult'],
                 imports: Sequence['outputs.GetCiscoBgpFeatureTemplateIpv4RouteTargetImportResult'],
                 optional: _builtins.bool,
                 vpn_id: _builtins.int,
                 vpn_id_variable: _builtins.str):
        """
        :param Sequence['GetCiscoBgpFeatureTemplateIpv4RouteTargetExportArgs'] exports: Export Target-VPN community for IPV4
        :param Sequence['GetCiscoBgpFeatureTemplateIpv4RouteTargetImportArgs'] imports: Import Target-VPN community for IPV4
        :param _builtins.bool optional: Indicates if list item is considered optional.
        :param _builtins.int vpn_id: VPN ID for IPv4
        :param _builtins.str vpn_id_variable: Variable name
        """
        pulumi.set(__self__, "exports", exports)
        pulumi.set(__self__, "imports", imports)
        pulumi.set(__self__, "optional", optional)
        pulumi.set(__self__, "vpn_id", vpn_id)
        pulumi.set(__self__, "vpn_id_variable", vpn_id_variable)

    @_builtins.property
    @pulumi.getter
    def exports(self) -> Sequence['outputs.GetCiscoBgpFeatureTemplateIpv4RouteTargetExportResult']:
        """
        Export Target-VPN community for IPV4
        """
        return pulumi.get(self, "exports")

    @_builtins.property
    @pulumi.getter
    def imports(self) -> Sequence['outputs.GetCiscoBgpFeatureTemplateIpv4RouteTargetImportResult']:
        """
        Import Target-VPN community for IPV4
        """
        return pulumi.get(self, "imports")

    @_builtins.property
    @pulumi.getter
    def optional(self) -> _builtins.bool:
        """
        Indicates if list item is considered optional.
        """
        return pulumi.get(self, "optional")

    @_builtins.property
    @pulumi.getter(name="vpnId")
    def vpn_id(self) -> _builtins.int:
        """
        VPN ID for IPv4
        """
        return pulumi.get(self, "vpn_id")

    @_builtins.property
    @pulumi.getter(name="vpnIdVariable")
    def vpn_id_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "vpn_id_variable")


@pulumi.output_type
class GetCiscoBgpFeatureTemplateIpv4RouteTargetExportResult(dict):
    def __init__(__self__, *,
                 asn_ip: _builtins.str,
                 asn_ip_variable: _builtins.str,
                 optional: _builtins.bool):
        """
        :param _builtins.str asn_ip: asn-ip
        :param _builtins.str asn_ip_variable: Variable name
        :param _builtins.bool optional: Indicates if list item is considered optional.
        """
        pulumi.set(__self__, "asn_ip", asn_ip)
        pulumi.set(__self__, "asn_ip_variable", asn_ip_variable)
        pulumi.set(__self__, "optional", optional)

    @_builtins.property
    @pulumi.getter(name="asnIp")
    def asn_ip(self) -> _builtins.str:
        """
        asn-ip
        """
        return pulumi.get(self, "asn_ip")

    @_builtins.property
    @pulumi.getter(name="asnIpVariable")
    def asn_ip_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "asn_ip_variable")

    @_builtins.property
    @pulumi.getter
    def optional(self) -> _builtins.bool:
        """
        Indicates if list item is considered optional.
        """
        return pulumi.get(self, "optional")


@pulumi.output_type
class GetCiscoBgpFeatureTemplateIpv4RouteTargetImportResult(dict):
    def __init__(__self__, *,
                 asn_ip: _builtins.str,
                 asn_ip_variable: _builtins.str,
                 optional: _builtins.bool):
        """
        :param _builtins.str asn_ip: asn-ip
        :param _builtins.str asn_ip_variable: Variable name
        :param _builtins.bool optional: Indicates if list item is considered optional.
        """
        pulumi.set(__self__, "asn_ip", asn_ip)
        pulumi.set(__self__, "asn_ip_variable", asn_ip_variable)
        pulumi.set(__self__, "optional", optional)

    @_builtins.property
    @pulumi.getter(name="asnIp")
    def asn_ip(self) -> _builtins.str:
        """
        asn-ip
        """
        return pulumi.get(self, "asn_ip")

    @_builtins.property
    @pulumi.getter(name="asnIpVariable")
    def asn_ip_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "asn_ip_variable")

    @_builtins.property
    @pulumi.getter
    def optional(self) -> _builtins.bool:
        """
        Indicates if list item is considered optional.
        """
        return pulumi.get(self, "optional")


@pulumi.output_type
class GetCiscoBgpFeatureTemplateIpv6NeighborResult(dict):
    def __init__(__self__, *,
                 address: _builtins.str,
                 address_families: Sequence['outputs.GetCiscoBgpFeatureTemplateIpv6NeighborAddressFamilyResult'],
                 address_variable: _builtins.str,
                 allow_as_in: _builtins.int,
                 allow_as_in_variable: _builtins.str,
                 as_override: _builtins.bool,
                 as_override_variable: _builtins.str,
                 description: _builtins.str,
                 description_variable: _builtins.str,
                 ebgp_multihop: _builtins.int,
                 ebgp_multihop_variable: _builtins.str,
                 holdtime: _builtins.int,
                 holdtime_variable: _builtins.str,
                 keepalive: _builtins.int,
                 keepalive_variable: _builtins.str,
                 next_hop_self: _builtins.bool,
                 next_hop_self_variable: _builtins.str,
                 optional: _builtins.bool,
                 password: _builtins.str,
                 password_variable: _builtins.str,
                 remote_as: _builtins.str,
                 remote_as_variable: _builtins.str,
                 send_community: _builtins.bool,
                 send_community_variable: _builtins.str,
                 send_ext_community: _builtins.bool,
                 send_ext_community_variable: _builtins.str,
                 send_label: _builtins.bool,
                 send_label_explicit: _builtins.bool,
                 send_label_explicit_variable: _builtins.str,
                 send_label_variable: _builtins.str,
                 shutdown: _builtins.bool,
                 shutdown_variable: _builtins.str,
                 source_interface: _builtins.str,
                 source_interface_variable: _builtins.str):
        """
        :param _builtins.str address: Set neighbor address
        :param Sequence['GetCiscoBgpFeatureTemplateIpv6NeighborAddressFamilyArgs'] address_families: Set BGP address family
        :param _builtins.str address_variable: Variable name
        :param _builtins.int allow_as_in: As Number
        :param _builtins.str allow_as_in_variable: Variable name
        :param _builtins.bool as_override: As Override
        :param _builtins.str as_override_variable: Variable name
        :param _builtins.str description: Set description
        :param _builtins.str description_variable: Variable name
        :param _builtins.int ebgp_multihop: Set TTL value for peers that are not directly connected
        :param _builtins.str ebgp_multihop_variable: Variable name
        :param _builtins.int holdtime: Set how long to wait since receiving a keepalive message to consider BGP peer unavailable
        :param _builtins.str holdtime_variable: Variable name
        :param _builtins.int keepalive: Set how often to advertise keepalive messages to BGP peer
        :param _builtins.str keepalive_variable: Variable name
        :param _builtins.bool next_hop_self: Set router to be next hop for routes advertised to neighbor
        :param _builtins.str next_hop_self_variable: Variable name
        :param _builtins.bool optional: Indicates if list item is considered optional.
        :param _builtins.str password: Set MD5 password on TCP connection with BGP peer
        :param _builtins.str password_variable: Variable name
        :param _builtins.str remote_as: Set remote autonomous system number
        :param _builtins.str remote_as_variable: Variable name
        :param _builtins.bool send_community: Send community attribute
        :param _builtins.str send_community_variable: Variable name
        :param _builtins.bool send_ext_community: Send extended community attribute
        :param _builtins.str send_ext_community_variable: Variable name
        :param _builtins.bool send_label: Send label
        :param _builtins.bool send_label_explicit: Send label Explicit
        :param _builtins.str send_label_explicit_variable: Variable name
        :param _builtins.str send_label_variable: Variable name
        :param _builtins.bool shutdown: Enable or disable a BGP neighbor
        :param _builtins.str shutdown_variable: Variable name
        :param _builtins.str source_interface: Set IP address of interface for TCP connection to BGP neighbor
        :param _builtins.str source_interface_variable: Variable name
        """
        pulumi.set(__self__, "address", address)
        pulumi.set(__self__, "address_families", address_families)
        pulumi.set(__self__, "address_variable", address_variable)
        pulumi.set(__self__, "allow_as_in", allow_as_in)
        pulumi.set(__self__, "allow_as_in_variable", allow_as_in_variable)
        pulumi.set(__self__, "as_override", as_override)
        pulumi.set(__self__, "as_override_variable", as_override_variable)
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "description_variable", description_variable)
        pulumi.set(__self__, "ebgp_multihop", ebgp_multihop)
        pulumi.set(__self__, "ebgp_multihop_variable", ebgp_multihop_variable)
        pulumi.set(__self__, "holdtime", holdtime)
        pulumi.set(__self__, "holdtime_variable", holdtime_variable)
        pulumi.set(__self__, "keepalive", keepalive)
        pulumi.set(__self__, "keepalive_variable", keepalive_variable)
        pulumi.set(__self__, "next_hop_self", next_hop_self)
        pulumi.set(__self__, "next_hop_self_variable", next_hop_self_variable)
        pulumi.set(__self__, "optional", optional)
        pulumi.set(__self__, "password", password)
        pulumi.set(__self__, "password_variable", password_variable)
        pulumi.set(__self__, "remote_as", remote_as)
        pulumi.set(__self__, "remote_as_variable", remote_as_variable)
        pulumi.set(__self__, "send_community", send_community)
        pulumi.set(__self__, "send_community_variable", send_community_variable)
        pulumi.set(__self__, "send_ext_community", send_ext_community)
        pulumi.set(__self__, "send_ext_community_variable", send_ext_community_variable)
        pulumi.set(__self__, "send_label", send_label)
        pulumi.set(__self__, "send_label_explicit", send_label_explicit)
        pulumi.set(__self__, "send_label_explicit_variable", send_label_explicit_variable)
        pulumi.set(__self__, "send_label_variable", send_label_variable)
        pulumi.set(__self__, "shutdown", shutdown)
        pulumi.set(__self__, "shutdown_variable", shutdown_variable)
        pulumi.set(__self__, "source_interface", source_interface)
        pulumi.set(__self__, "source_interface_variable", source_interface_variable)

    @_builtins.property
    @pulumi.getter
    def address(self) -> _builtins.str:
        """
        Set neighbor address
        """
        return pulumi.get(self, "address")

    @_builtins.property
    @pulumi.getter(name="addressFamilies")
    def address_families(self) -> Sequence['outputs.GetCiscoBgpFeatureTemplateIpv6NeighborAddressFamilyResult']:
        """
        Set BGP address family
        """
        return pulumi.get(self, "address_families")

    @_builtins.property
    @pulumi.getter(name="addressVariable")
    def address_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "address_variable")

    @_builtins.property
    @pulumi.getter(name="allowAsIn")
    def allow_as_in(self) -> _builtins.int:
        """
        As Number
        """
        return pulumi.get(self, "allow_as_in")

    @_builtins.property
    @pulumi.getter(name="allowAsInVariable")
    def allow_as_in_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "allow_as_in_variable")

    @_builtins.property
    @pulumi.getter(name="asOverride")
    def as_override(self) -> _builtins.bool:
        """
        As Override
        """
        return pulumi.get(self, "as_override")

    @_builtins.property
    @pulumi.getter(name="asOverrideVariable")
    def as_override_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "as_override_variable")

    @_builtins.property
    @pulumi.getter
    def description(self) -> _builtins.str:
        """
        Set description
        """
        return pulumi.get(self, "description")

    @_builtins.property
    @pulumi.getter(name="descriptionVariable")
    def description_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "description_variable")

    @_builtins.property
    @pulumi.getter(name="ebgpMultihop")
    def ebgp_multihop(self) -> _builtins.int:
        """
        Set TTL value for peers that are not directly connected
        """
        return pulumi.get(self, "ebgp_multihop")

    @_builtins.property
    @pulumi.getter(name="ebgpMultihopVariable")
    def ebgp_multihop_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "ebgp_multihop_variable")

    @_builtins.property
    @pulumi.getter
    def holdtime(self) -> _builtins.int:
        """
        Set how long to wait since receiving a keepalive message to consider BGP peer unavailable
        """
        return pulumi.get(self, "holdtime")

    @_builtins.property
    @pulumi.getter(name="holdtimeVariable")
    def holdtime_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "holdtime_variable")

    @_builtins.property
    @pulumi.getter
    def keepalive(self) -> _builtins.int:
        """
        Set how often to advertise keepalive messages to BGP peer
        """
        return pulumi.get(self, "keepalive")

    @_builtins.property
    @pulumi.getter(name="keepaliveVariable")
    def keepalive_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "keepalive_variable")

    @_builtins.property
    @pulumi.getter(name="nextHopSelf")
    def next_hop_self(self) -> _builtins.bool:
        """
        Set router to be next hop for routes advertised to neighbor
        """
        return pulumi.get(self, "next_hop_self")

    @_builtins.property
    @pulumi.getter(name="nextHopSelfVariable")
    def next_hop_self_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "next_hop_self_variable")

    @_builtins.property
    @pulumi.getter
    def optional(self) -> _builtins.bool:
        """
        Indicates if list item is considered optional.
        """
        return pulumi.get(self, "optional")

    @_builtins.property
    @pulumi.getter
    def password(self) -> _builtins.str:
        """
        Set MD5 password on TCP connection with BGP peer
        """
        return pulumi.get(self, "password")

    @_builtins.property
    @pulumi.getter(name="passwordVariable")
    def password_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "password_variable")

    @_builtins.property
    @pulumi.getter(name="remoteAs")
    def remote_as(self) -> _builtins.str:
        """
        Set remote autonomous system number
        """
        return pulumi.get(self, "remote_as")

    @_builtins.property
    @pulumi.getter(name="remoteAsVariable")
    def remote_as_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "remote_as_variable")

    @_builtins.property
    @pulumi.getter(name="sendCommunity")
    def send_community(self) -> _builtins.bool:
        """
        Send community attribute
        """
        return pulumi.get(self, "send_community")

    @_builtins.property
    @pulumi.getter(name="sendCommunityVariable")
    def send_community_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "send_community_variable")

    @_builtins.property
    @pulumi.getter(name="sendExtCommunity")
    def send_ext_community(self) -> _builtins.bool:
        """
        Send extended community attribute
        """
        return pulumi.get(self, "send_ext_community")

    @_builtins.property
    @pulumi.getter(name="sendExtCommunityVariable")
    def send_ext_community_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "send_ext_community_variable")

    @_builtins.property
    @pulumi.getter(name="sendLabel")
    def send_label(self) -> _builtins.bool:
        """
        Send label
        """
        return pulumi.get(self, "send_label")

    @_builtins.property
    @pulumi.getter(name="sendLabelExplicit")
    def send_label_explicit(self) -> _builtins.bool:
        """
        Send label Explicit
        """
        return pulumi.get(self, "send_label_explicit")

    @_builtins.property
    @pulumi.getter(name="sendLabelExplicitVariable")
    def send_label_explicit_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "send_label_explicit_variable")

    @_builtins.property
    @pulumi.getter(name="sendLabelVariable")
    def send_label_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "send_label_variable")

    @_builtins.property
    @pulumi.getter
    def shutdown(self) -> _builtins.bool:
        """
        Enable or disable a BGP neighbor
        """
        return pulumi.get(self, "shutdown")

    @_builtins.property
    @pulumi.getter(name="shutdownVariable")
    def shutdown_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "shutdown_variable")

    @_builtins.property
    @pulumi.getter(name="sourceInterface")
    def source_interface(self) -> _builtins.str:
        """
        Set IP address of interface for TCP connection to BGP neighbor
        """
        return pulumi.get(self, "source_interface")

    @_builtins.property
    @pulumi.getter(name="sourceInterfaceVariable")
    def source_interface_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "source_interface_variable")


@pulumi.output_type
class GetCiscoBgpFeatureTemplateIpv6NeighborAddressFamilyResult(dict):
    def __init__(__self__, *,
                 family_type: _builtins.str,
                 maximum_prefixes: _builtins.int,
                 maximum_prefixes_restart: _builtins.int,
                 maximum_prefixes_restart_variable: _builtins.str,
                 maximum_prefixes_threshold: _builtins.int,
                 maximum_prefixes_threshold_variable: _builtins.str,
                 maximum_prefixes_variable: _builtins.str,
                 maximum_prefixes_warning_only: _builtins.bool,
                 maximum_prefixes_warning_only_variable: _builtins.str,
                 optional: _builtins.bool,
                 route_policies: Sequence['outputs.GetCiscoBgpFeatureTemplateIpv6NeighborAddressFamilyRoutePolicyResult']):
        """
        :param _builtins.str family_type: Set BGP address family
        :param _builtins.int maximum_prefixes: Set maximum number of prefixes accepted from BGP peer
        :param _builtins.int maximum_prefixes_restart: Set when to restart BGP connection if threshold is exceeded
        :param _builtins.str maximum_prefixes_restart_variable: Variable name
        :param _builtins.int maximum_prefixes_threshold: Set threshold at which to generate a warning message
        :param _builtins.str maximum_prefixes_threshold_variable: Variable name
        :param _builtins.str maximum_prefixes_variable: Variable name
        :param _builtins.bool maximum_prefixes_warning_only: Display only a warning message when threshold is exceeded
        :param _builtins.str maximum_prefixes_warning_only_variable: Variable name
        :param _builtins.bool optional: Indicates if list item is considered optional.
        :param Sequence['GetCiscoBgpFeatureTemplateIpv6NeighborAddressFamilyRoutePolicyArgs'] route_policies: Select route policy to apply to prefixes received from BGP neighbor
        """
        pulumi.set(__self__, "family_type", family_type)
        pulumi.set(__self__, "maximum_prefixes", maximum_prefixes)
        pulumi.set(__self__, "maximum_prefixes_restart", maximum_prefixes_restart)
        pulumi.set(__self__, "maximum_prefixes_restart_variable", maximum_prefixes_restart_variable)
        pulumi.set(__self__, "maximum_prefixes_threshold", maximum_prefixes_threshold)
        pulumi.set(__self__, "maximum_prefixes_threshold_variable", maximum_prefixes_threshold_variable)
        pulumi.set(__self__, "maximum_prefixes_variable", maximum_prefixes_variable)
        pulumi.set(__self__, "maximum_prefixes_warning_only", maximum_prefixes_warning_only)
        pulumi.set(__self__, "maximum_prefixes_warning_only_variable", maximum_prefixes_warning_only_variable)
        pulumi.set(__self__, "optional", optional)
        pulumi.set(__self__, "route_policies", route_policies)

    @_builtins.property
    @pulumi.getter(name="familyType")
    def family_type(self) -> _builtins.str:
        """
        Set BGP address family
        """
        return pulumi.get(self, "family_type")

    @_builtins.property
    @pulumi.getter(name="maximumPrefixes")
    def maximum_prefixes(self) -> _builtins.int:
        """
        Set maximum number of prefixes accepted from BGP peer
        """
        return pulumi.get(self, "maximum_prefixes")

    @_builtins.property
    @pulumi.getter(name="maximumPrefixesRestart")
    def maximum_prefixes_restart(self) -> _builtins.int:
        """
        Set when to restart BGP connection if threshold is exceeded
        """
        return pulumi.get(self, "maximum_prefixes_restart")

    @_builtins.property
    @pulumi.getter(name="maximumPrefixesRestartVariable")
    def maximum_prefixes_restart_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "maximum_prefixes_restart_variable")

    @_builtins.property
    @pulumi.getter(name="maximumPrefixesThreshold")
    def maximum_prefixes_threshold(self) -> _builtins.int:
        """
        Set threshold at which to generate a warning message
        """
        return pulumi.get(self, "maximum_prefixes_threshold")

    @_builtins.property
    @pulumi.getter(name="maximumPrefixesThresholdVariable")
    def maximum_prefixes_threshold_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "maximum_prefixes_threshold_variable")

    @_builtins.property
    @pulumi.getter(name="maximumPrefixesVariable")
    def maximum_prefixes_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "maximum_prefixes_variable")

    @_builtins.property
    @pulumi.getter(name="maximumPrefixesWarningOnly")
    def maximum_prefixes_warning_only(self) -> _builtins.bool:
        """
        Display only a warning message when threshold is exceeded
        """
        return pulumi.get(self, "maximum_prefixes_warning_only")

    @_builtins.property
    @pulumi.getter(name="maximumPrefixesWarningOnlyVariable")
    def maximum_prefixes_warning_only_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "maximum_prefixes_warning_only_variable")

    @_builtins.property
    @pulumi.getter
    def optional(self) -> _builtins.bool:
        """
        Indicates if list item is considered optional.
        """
        return pulumi.get(self, "optional")

    @_builtins.property
    @pulumi.getter(name="routePolicies")
    def route_policies(self) -> Sequence['outputs.GetCiscoBgpFeatureTemplateIpv6NeighborAddressFamilyRoutePolicyResult']:
        """
        Select route policy to apply to prefixes received from BGP neighbor
        """
        return pulumi.get(self, "route_policies")


@pulumi.output_type
class GetCiscoBgpFeatureTemplateIpv6NeighborAddressFamilyRoutePolicyResult(dict):
    def __init__(__self__, *,
                 direction: _builtins.str,
                 optional: _builtins.bool,
                 policy_name: _builtins.str,
                 policy_name_variable: _builtins.str):
        """
        :param _builtins.str direction: Set direction for applying route policy
        :param _builtins.bool optional: Indicates if list item is considered optional.
        :param _builtins.str policy_name: Configure name of route policy
        :param _builtins.str policy_name_variable: Variable name
        """
        pulumi.set(__self__, "direction", direction)
        pulumi.set(__self__, "optional", optional)
        pulumi.set(__self__, "policy_name", policy_name)
        pulumi.set(__self__, "policy_name_variable", policy_name_variable)

    @_builtins.property
    @pulumi.getter
    def direction(self) -> _builtins.str:
        """
        Set direction for applying route policy
        """
        return pulumi.get(self, "direction")

    @_builtins.property
    @pulumi.getter
    def optional(self) -> _builtins.bool:
        """
        Indicates if list item is considered optional.
        """
        return pulumi.get(self, "optional")

    @_builtins.property
    @pulumi.getter(name="policyName")
    def policy_name(self) -> _builtins.str:
        """
        Configure name of route policy
        """
        return pulumi.get(self, "policy_name")

    @_builtins.property
    @pulumi.getter(name="policyNameVariable")
    def policy_name_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "policy_name_variable")


@pulumi.output_type
class GetCiscoBgpFeatureTemplateIpv6RouteTargetResult(dict):
    def __init__(__self__, *,
                 exports: Sequence['outputs.GetCiscoBgpFeatureTemplateIpv6RouteTargetExportResult'],
                 imports: Sequence['outputs.GetCiscoBgpFeatureTemplateIpv6RouteTargetImportResult'],
                 optional: _builtins.bool,
                 vpn_id: _builtins.int,
                 vpn_id_variable: _builtins.str):
        """
        :param Sequence['GetCiscoBgpFeatureTemplateIpv6RouteTargetExportArgs'] exports: Export Target-VPN community for IPV6
        :param Sequence['GetCiscoBgpFeatureTemplateIpv6RouteTargetImportArgs'] imports: Import Target-VPN community for IPV6
        :param _builtins.bool optional: Indicates if list item is considered optional.
        :param _builtins.int vpn_id: VPN ID for IPv6
        :param _builtins.str vpn_id_variable: Variable name
        """
        pulumi.set(__self__, "exports", exports)
        pulumi.set(__self__, "imports", imports)
        pulumi.set(__self__, "optional", optional)
        pulumi.set(__self__, "vpn_id", vpn_id)
        pulumi.set(__self__, "vpn_id_variable", vpn_id_variable)

    @_builtins.property
    @pulumi.getter
    def exports(self) -> Sequence['outputs.GetCiscoBgpFeatureTemplateIpv6RouteTargetExportResult']:
        """
        Export Target-VPN community for IPV6
        """
        return pulumi.get(self, "exports")

    @_builtins.property
    @pulumi.getter
    def imports(self) -> Sequence['outputs.GetCiscoBgpFeatureTemplateIpv6RouteTargetImportResult']:
        """
        Import Target-VPN community for IPV6
        """
        return pulumi.get(self, "imports")

    @_builtins.property
    @pulumi.getter
    def optional(self) -> _builtins.bool:
        """
        Indicates if list item is considered optional.
        """
        return pulumi.get(self, "optional")

    @_builtins.property
    @pulumi.getter(name="vpnId")
    def vpn_id(self) -> _builtins.int:
        """
        VPN ID for IPv6
        """
        return pulumi.get(self, "vpn_id")

    @_builtins.property
    @pulumi.getter(name="vpnIdVariable")
    def vpn_id_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "vpn_id_variable")


@pulumi.output_type
class GetCiscoBgpFeatureTemplateIpv6RouteTargetExportResult(dict):
    def __init__(__self__, *,
                 asn_ip: _builtins.str,
                 asn_ip_variable: _builtins.str,
                 optional: _builtins.bool):
        """
        :param _builtins.str asn_ip: asn-ip
        :param _builtins.str asn_ip_variable: Variable name
        :param _builtins.bool optional: Indicates if list item is considered optional.
        """
        pulumi.set(__self__, "asn_ip", asn_ip)
        pulumi.set(__self__, "asn_ip_variable", asn_ip_variable)
        pulumi.set(__self__, "optional", optional)

    @_builtins.property
    @pulumi.getter(name="asnIp")
    def asn_ip(self) -> _builtins.str:
        """
        asn-ip
        """
        return pulumi.get(self, "asn_ip")

    @_builtins.property
    @pulumi.getter(name="asnIpVariable")
    def asn_ip_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "asn_ip_variable")

    @_builtins.property
    @pulumi.getter
    def optional(self) -> _builtins.bool:
        """
        Indicates if list item is considered optional.
        """
        return pulumi.get(self, "optional")


@pulumi.output_type
class GetCiscoBgpFeatureTemplateIpv6RouteTargetImportResult(dict):
    def __init__(__self__, *,
                 asn_ip: _builtins.str,
                 asn_ip_variable: _builtins.str,
                 optional: _builtins.bool):
        """
        :param _builtins.str asn_ip: asn-ip
        :param _builtins.str asn_ip_variable: Variable name
        :param _builtins.bool optional: Indicates if list item is considered optional.
        """
        pulumi.set(__self__, "asn_ip", asn_ip)
        pulumi.set(__self__, "asn_ip_variable", asn_ip_variable)
        pulumi.set(__self__, "optional", optional)

    @_builtins.property
    @pulumi.getter(name="asnIp")
    def asn_ip(self) -> _builtins.str:
        """
        asn-ip
        """
        return pulumi.get(self, "asn_ip")

    @_builtins.property
    @pulumi.getter(name="asnIpVariable")
    def asn_ip_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "asn_ip_variable")

    @_builtins.property
    @pulumi.getter
    def optional(self) -> _builtins.bool:
        """
        Indicates if list item is considered optional.
        """
        return pulumi.get(self, "optional")


@pulumi.output_type
class GetCiscoBgpFeatureTemplateMplsInterfaceResult(dict):
    def __init__(__self__, *,
                 interface_name: _builtins.str,
                 interface_name_variable: _builtins.str,
                 optional: _builtins.bool):
        """
        :param _builtins.str interface_name: Interface Name
        :param _builtins.str interface_name_variable: Variable name
        :param _builtins.bool optional: Indicates if list item is considered optional.
        """
        pulumi.set(__self__, "interface_name", interface_name)
        pulumi.set(__self__, "interface_name_variable", interface_name_variable)
        pulumi.set(__self__, "optional", optional)

    @_builtins.property
    @pulumi.getter(name="interfaceName")
    def interface_name(self) -> _builtins.str:
        """
        Interface Name
        """
        return pulumi.get(self, "interface_name")

    @_builtins.property
    @pulumi.getter(name="interfaceNameVariable")
    def interface_name_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "interface_name_variable")

    @_builtins.property
    @pulumi.getter
    def optional(self) -> _builtins.bool:
        """
        Indicates if list item is considered optional.
        """
        return pulumi.get(self, "optional")


@pulumi.output_type
class GetCiscoDhcpServerFeatureTemplateOptionResult(dict):
    def __init__(__self__, *,
                 ascii: _builtins.str,
                 ascii_variable: _builtins.str,
                 hex: _builtins.str,
                 hex_variable: _builtins.str,
                 ip_address_variable: _builtins.str,
                 ip_addresses: Sequence[_builtins.str],
                 option_code: _builtins.int,
                 option_code_variable: _builtins.str,
                 optional: _builtins.bool):
        """
        :param _builtins.str ascii: Set ASCII value
        :param _builtins.str ascii_variable: Variable name
        :param _builtins.str hex: Set HEX value
        :param _builtins.str hex_variable: Variable name
        :param _builtins.str ip_address_variable: Variable name
        :param Sequence[_builtins.str] ip_addresses: Set ip address
        :param _builtins.int option_code: Set Option Code
        :param _builtins.str option_code_variable: Variable name
        :param _builtins.bool optional: Indicates if list item is considered optional.
        """
        pulumi.set(__self__, "ascii", ascii)
        pulumi.set(__self__, "ascii_variable", ascii_variable)
        pulumi.set(__self__, "hex", hex)
        pulumi.set(__self__, "hex_variable", hex_variable)
        pulumi.set(__self__, "ip_address_variable", ip_address_variable)
        pulumi.set(__self__, "ip_addresses", ip_addresses)
        pulumi.set(__self__, "option_code", option_code)
        pulumi.set(__self__, "option_code_variable", option_code_variable)
        pulumi.set(__self__, "optional", optional)

    @_builtins.property
    @pulumi.getter
    def ascii(self) -> _builtins.str:
        """
        Set ASCII value
        """
        return pulumi.get(self, "ascii")

    @_builtins.property
    @pulumi.getter(name="asciiVariable")
    def ascii_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "ascii_variable")

    @_builtins.property
    @pulumi.getter
    def hex(self) -> _builtins.str:
        """
        Set HEX value
        """
        return pulumi.get(self, "hex")

    @_builtins.property
    @pulumi.getter(name="hexVariable")
    def hex_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "hex_variable")

    @_builtins.property
    @pulumi.getter(name="ipAddressVariable")
    def ip_address_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "ip_address_variable")

    @_builtins.property
    @pulumi.getter(name="ipAddresses")
    def ip_addresses(self) -> Sequence[_builtins.str]:
        """
        Set ip address
        """
        return pulumi.get(self, "ip_addresses")

    @_builtins.property
    @pulumi.getter(name="optionCode")
    def option_code(self) -> _builtins.int:
        """
        Set Option Code
        """
        return pulumi.get(self, "option_code")

    @_builtins.property
    @pulumi.getter(name="optionCodeVariable")
    def option_code_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "option_code_variable")

    @_builtins.property
    @pulumi.getter
    def optional(self) -> _builtins.bool:
        """
        Indicates if list item is considered optional.
        """
        return pulumi.get(self, "optional")


@pulumi.output_type
class GetCiscoDhcpServerFeatureTemplateStaticLeaseResult(dict):
    def __init__(__self__, *,
                 hostname: _builtins.str,
                 hostname_variable: _builtins.str,
                 ip_address: _builtins.str,
                 ip_address_variable: _builtins.str,
                 mac_address: _builtins.str,
                 mac_address_variable: _builtins.str,
                 optional: _builtins.bool):
        """
        :param _builtins.str hostname: Set client’s hostname
        :param _builtins.str hostname_variable: Variable name
        :param _builtins.str ip_address: Set client’s static IP address
        :param _builtins.str ip_address_variable: Variable name
        :param _builtins.str mac_address: Set MAC address of client
        :param _builtins.str mac_address_variable: Variable name
        :param _builtins.bool optional: Indicates if list item is considered optional.
        """
        pulumi.set(__self__, "hostname", hostname)
        pulumi.set(__self__, "hostname_variable", hostname_variable)
        pulumi.set(__self__, "ip_address", ip_address)
        pulumi.set(__self__, "ip_address_variable", ip_address_variable)
        pulumi.set(__self__, "mac_address", mac_address)
        pulumi.set(__self__, "mac_address_variable", mac_address_variable)
        pulumi.set(__self__, "optional", optional)

    @_builtins.property
    @pulumi.getter
    def hostname(self) -> _builtins.str:
        """
        Set client’s hostname
        """
        return pulumi.get(self, "hostname")

    @_builtins.property
    @pulumi.getter(name="hostnameVariable")
    def hostname_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "hostname_variable")

    @_builtins.property
    @pulumi.getter(name="ipAddress")
    def ip_address(self) -> _builtins.str:
        """
        Set client’s static IP address
        """
        return pulumi.get(self, "ip_address")

    @_builtins.property
    @pulumi.getter(name="ipAddressVariable")
    def ip_address_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "ip_address_variable")

    @_builtins.property
    @pulumi.getter(name="macAddress")
    def mac_address(self) -> _builtins.str:
        """
        Set MAC address of client
        """
        return pulumi.get(self, "mac_address")

    @_builtins.property
    @pulumi.getter(name="macAddressVariable")
    def mac_address_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "mac_address_variable")

    @_builtins.property
    @pulumi.getter
    def optional(self) -> _builtins.bool:
        """
        Indicates if list item is considered optional.
        """
        return pulumi.get(self, "optional")


@pulumi.output_type
class GetCiscoLoggingFeatureTemplateIpv4ServerResult(dict):
    def __init__(__self__, *,
                 custom_profile: _builtins.bool,
                 custom_profile_variable: _builtins.str,
                 enable_tls: _builtins.bool,
                 enable_tls_variable: _builtins.str,
                 hostname_ip: _builtins.str,
                 hostname_ip_variable: _builtins.str,
                 logging_level: _builtins.str,
                 logging_level_variable: _builtins.str,
                 optional: _builtins.bool,
                 profile: _builtins.str,
                 profile_variable: _builtins.str,
                 source_interface: _builtins.str,
                 source_interface_variable: _builtins.str,
                 vpn_id: _builtins.int,
                 vpn_id_variable: _builtins.str):
        """
        :param _builtins.bool custom_profile: Define custom profile
        :param _builtins.str custom_profile_variable: Variable name
        :param _builtins.bool enable_tls: Enable TLS
        :param _builtins.str enable_tls_variable: Variable name
        :param _builtins.str hostname_ip: Set hostname or IPv4 address of server
        :param _builtins.str hostname_ip_variable: Variable name
        :param _builtins.str logging_level: Set logging level for messages logged to server
        :param _builtins.str logging_level_variable: Variable name
        :param _builtins.bool optional: Indicates if list item is considered optional.
        :param _builtins.str profile: Configure a TLS profile
        :param _builtins.str profile_variable: Variable name
        :param _builtins.str source_interface: Set interface to use to reach syslog server
        :param _builtins.str source_interface_variable: Variable name
        :param _builtins.int vpn_id: Set VPN in which syslog server is located
        :param _builtins.str vpn_id_variable: Variable name
        """
        pulumi.set(__self__, "custom_profile", custom_profile)
        pulumi.set(__self__, "custom_profile_variable", custom_profile_variable)
        pulumi.set(__self__, "enable_tls", enable_tls)
        pulumi.set(__self__, "enable_tls_variable", enable_tls_variable)
        pulumi.set(__self__, "hostname_ip", hostname_ip)
        pulumi.set(__self__, "hostname_ip_variable", hostname_ip_variable)
        pulumi.set(__self__, "logging_level", logging_level)
        pulumi.set(__self__, "logging_level_variable", logging_level_variable)
        pulumi.set(__self__, "optional", optional)
        pulumi.set(__self__, "profile", profile)
        pulumi.set(__self__, "profile_variable", profile_variable)
        pulumi.set(__self__, "source_interface", source_interface)
        pulumi.set(__self__, "source_interface_variable", source_interface_variable)
        pulumi.set(__self__, "vpn_id", vpn_id)
        pulumi.set(__self__, "vpn_id_variable", vpn_id_variable)

    @_builtins.property
    @pulumi.getter(name="customProfile")
    def custom_profile(self) -> _builtins.bool:
        """
        Define custom profile
        """
        return pulumi.get(self, "custom_profile")

    @_builtins.property
    @pulumi.getter(name="customProfileVariable")
    def custom_profile_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "custom_profile_variable")

    @_builtins.property
    @pulumi.getter(name="enableTls")
    def enable_tls(self) -> _builtins.bool:
        """
        Enable TLS
        """
        return pulumi.get(self, "enable_tls")

    @_builtins.property
    @pulumi.getter(name="enableTlsVariable")
    def enable_tls_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "enable_tls_variable")

    @_builtins.property
    @pulumi.getter(name="hostnameIp")
    def hostname_ip(self) -> _builtins.str:
        """
        Set hostname or IPv4 address of server
        """
        return pulumi.get(self, "hostname_ip")

    @_builtins.property
    @pulumi.getter(name="hostnameIpVariable")
    def hostname_ip_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "hostname_ip_variable")

    @_builtins.property
    @pulumi.getter(name="loggingLevel")
    def logging_level(self) -> _builtins.str:
        """
        Set logging level for messages logged to server
        """
        return pulumi.get(self, "logging_level")

    @_builtins.property
    @pulumi.getter(name="loggingLevelVariable")
    def logging_level_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "logging_level_variable")

    @_builtins.property
    @pulumi.getter
    def optional(self) -> _builtins.bool:
        """
        Indicates if list item is considered optional.
        """
        return pulumi.get(self, "optional")

    @_builtins.property
    @pulumi.getter
    def profile(self) -> _builtins.str:
        """
        Configure a TLS profile
        """
        return pulumi.get(self, "profile")

    @_builtins.property
    @pulumi.getter(name="profileVariable")
    def profile_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "profile_variable")

    @_builtins.property
    @pulumi.getter(name="sourceInterface")
    def source_interface(self) -> _builtins.str:
        """
        Set interface to use to reach syslog server
        """
        return pulumi.get(self, "source_interface")

    @_builtins.property
    @pulumi.getter(name="sourceInterfaceVariable")
    def source_interface_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "source_interface_variable")

    @_builtins.property
    @pulumi.getter(name="vpnId")
    def vpn_id(self) -> _builtins.int:
        """
        Set VPN in which syslog server is located
        """
        return pulumi.get(self, "vpn_id")

    @_builtins.property
    @pulumi.getter(name="vpnIdVariable")
    def vpn_id_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "vpn_id_variable")


@pulumi.output_type
class GetCiscoLoggingFeatureTemplateIpv6ServerResult(dict):
    def __init__(__self__, *,
                 custom_profile: _builtins.bool,
                 custom_profile_variable: _builtins.str,
                 enable_tls: _builtins.bool,
                 enable_tls_variable: _builtins.str,
                 hostname_ip: _builtins.str,
                 hostname_ip_variable: _builtins.str,
                 logging_level: _builtins.str,
                 logging_level_variable: _builtins.str,
                 optional: _builtins.bool,
                 profile: _builtins.str,
                 profile_variable: _builtins.str,
                 source_interface: _builtins.str,
                 source_interface_variable: _builtins.str,
                 vpn_id: _builtins.int,
                 vpn_id_variable: _builtins.str):
        """
        :param _builtins.bool custom_profile: Define custom profile
        :param _builtins.str custom_profile_variable: Variable name
        :param _builtins.bool enable_tls: Enable TLS
        :param _builtins.str enable_tls_variable: Variable name
        :param _builtins.str hostname_ip: Set IPv6 hostname or IPv6 address of server
        :param _builtins.str hostname_ip_variable: Variable name
        :param _builtins.str logging_level: Set logging level for messages logged to server
        :param _builtins.str logging_level_variable: Variable name
        :param _builtins.bool optional: Indicates if list item is considered optional.
        :param _builtins.str profile: Configure a TLS profile
        :param _builtins.str profile_variable: Variable name
        :param _builtins.str source_interface: Set interface to use to reach syslog server
        :param _builtins.str source_interface_variable: Variable name
        :param _builtins.int vpn_id: Set VPN in which syslog server is located
        :param _builtins.str vpn_id_variable: Variable name
        """
        pulumi.set(__self__, "custom_profile", custom_profile)
        pulumi.set(__self__, "custom_profile_variable", custom_profile_variable)
        pulumi.set(__self__, "enable_tls", enable_tls)
        pulumi.set(__self__, "enable_tls_variable", enable_tls_variable)
        pulumi.set(__self__, "hostname_ip", hostname_ip)
        pulumi.set(__self__, "hostname_ip_variable", hostname_ip_variable)
        pulumi.set(__self__, "logging_level", logging_level)
        pulumi.set(__self__, "logging_level_variable", logging_level_variable)
        pulumi.set(__self__, "optional", optional)
        pulumi.set(__self__, "profile", profile)
        pulumi.set(__self__, "profile_variable", profile_variable)
        pulumi.set(__self__, "source_interface", source_interface)
        pulumi.set(__self__, "source_interface_variable", source_interface_variable)
        pulumi.set(__self__, "vpn_id", vpn_id)
        pulumi.set(__self__, "vpn_id_variable", vpn_id_variable)

    @_builtins.property
    @pulumi.getter(name="customProfile")
    def custom_profile(self) -> _builtins.bool:
        """
        Define custom profile
        """
        return pulumi.get(self, "custom_profile")

    @_builtins.property
    @pulumi.getter(name="customProfileVariable")
    def custom_profile_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "custom_profile_variable")

    @_builtins.property
    @pulumi.getter(name="enableTls")
    def enable_tls(self) -> _builtins.bool:
        """
        Enable TLS
        """
        return pulumi.get(self, "enable_tls")

    @_builtins.property
    @pulumi.getter(name="enableTlsVariable")
    def enable_tls_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "enable_tls_variable")

    @_builtins.property
    @pulumi.getter(name="hostnameIp")
    def hostname_ip(self) -> _builtins.str:
        """
        Set IPv6 hostname or IPv6 address of server
        """
        return pulumi.get(self, "hostname_ip")

    @_builtins.property
    @pulumi.getter(name="hostnameIpVariable")
    def hostname_ip_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "hostname_ip_variable")

    @_builtins.property
    @pulumi.getter(name="loggingLevel")
    def logging_level(self) -> _builtins.str:
        """
        Set logging level for messages logged to server
        """
        return pulumi.get(self, "logging_level")

    @_builtins.property
    @pulumi.getter(name="loggingLevelVariable")
    def logging_level_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "logging_level_variable")

    @_builtins.property
    @pulumi.getter
    def optional(self) -> _builtins.bool:
        """
        Indicates if list item is considered optional.
        """
        return pulumi.get(self, "optional")

    @_builtins.property
    @pulumi.getter
    def profile(self) -> _builtins.str:
        """
        Configure a TLS profile
        """
        return pulumi.get(self, "profile")

    @_builtins.property
    @pulumi.getter(name="profileVariable")
    def profile_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "profile_variable")

    @_builtins.property
    @pulumi.getter(name="sourceInterface")
    def source_interface(self) -> _builtins.str:
        """
        Set interface to use to reach syslog server
        """
        return pulumi.get(self, "source_interface")

    @_builtins.property
    @pulumi.getter(name="sourceInterfaceVariable")
    def source_interface_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "source_interface_variable")

    @_builtins.property
    @pulumi.getter(name="vpnId")
    def vpn_id(self) -> _builtins.int:
        """
        Set VPN in which syslog server is located
        """
        return pulumi.get(self, "vpn_id")

    @_builtins.property
    @pulumi.getter(name="vpnIdVariable")
    def vpn_id_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "vpn_id_variable")


@pulumi.output_type
class GetCiscoLoggingFeatureTemplateTlsProfileResult(dict):
    def __init__(__self__, *,
                 authentication_type: _builtins.str,
                 ciphersuite_list_variable: _builtins.str,
                 ciphersuite_lists: Sequence[_builtins.str],
                 name: _builtins.str,
                 name_variable: _builtins.str,
                 optional: _builtins.bool,
                 version: _builtins.str,
                 version_variable: _builtins.str):
        """
        :param _builtins.str authentication_type: Authentication Type
        :param _builtins.str ciphersuite_list_variable: Variable name
        :param Sequence[_builtins.str] ciphersuite_lists: Syslog secure server ciphersuites. Possible values: `aes-128-cbc-sha`, `aes-256-cbc-sha`, `dhe-aes-cbc-sha2`, `dhe-aes-gcm-sha2`, `ecdhe-ecdsa-aes-gcm-sha2`, `ecdhe-rsa-aes-cbc-sha2`, `ecdhe-rsa-aes-gcm-sha2`, `rsa-aes-cbc-sha2`, `rsa-aes-gcm-sha2`
        :param _builtins.str name: Specify the name of the TLS profile
        :param _builtins.str name_variable: Variable name
        :param _builtins.bool optional: Indicates if list item is considered optional.
        :param _builtins.str version: TLS Version
        :param _builtins.str version_variable: Variable name
        """
        pulumi.set(__self__, "authentication_type", authentication_type)
        pulumi.set(__self__, "ciphersuite_list_variable", ciphersuite_list_variable)
        pulumi.set(__self__, "ciphersuite_lists", ciphersuite_lists)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "name_variable", name_variable)
        pulumi.set(__self__, "optional", optional)
        pulumi.set(__self__, "version", version)
        pulumi.set(__self__, "version_variable", version_variable)

    @_builtins.property
    @pulumi.getter(name="authenticationType")
    def authentication_type(self) -> _builtins.str:
        """
        Authentication Type
        """
        return pulumi.get(self, "authentication_type")

    @_builtins.property
    @pulumi.getter(name="ciphersuiteListVariable")
    def ciphersuite_list_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "ciphersuite_list_variable")

    @_builtins.property
    @pulumi.getter(name="ciphersuiteLists")
    def ciphersuite_lists(self) -> Sequence[_builtins.str]:
        """
        Syslog secure server ciphersuites. Possible values: `aes-128-cbc-sha`, `aes-256-cbc-sha`, `dhe-aes-cbc-sha2`, `dhe-aes-gcm-sha2`, `ecdhe-ecdsa-aes-gcm-sha2`, `ecdhe-rsa-aes-cbc-sha2`, `ecdhe-rsa-aes-gcm-sha2`, `rsa-aes-cbc-sha2`, `rsa-aes-gcm-sha2`
        """
        return pulumi.get(self, "ciphersuite_lists")

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        """
        Specify the name of the TLS profile
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter(name="nameVariable")
    def name_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "name_variable")

    @_builtins.property
    @pulumi.getter
    def optional(self) -> _builtins.bool:
        """
        Indicates if list item is considered optional.
        """
        return pulumi.get(self, "optional")

    @_builtins.property
    @pulumi.getter
    def version(self) -> _builtins.str:
        """
        TLS Version
        """
        return pulumi.get(self, "version")

    @_builtins.property
    @pulumi.getter(name="versionVariable")
    def version_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "version_variable")


@pulumi.output_type
class GetCiscoNtpFeatureTemplateAuthenticationKeyResult(dict):
    def __init__(__self__, *,
                 id: _builtins.int,
                 id_variable: _builtins.str,
                 optional: _builtins.bool,
                 value: _builtins.str,
                 value_variable: _builtins.str):
        """
        :param _builtins.int id: MD5 authentication key ID
        :param _builtins.str id_variable: Variable name
        :param _builtins.bool optional: Indicates if list item is considered optional.
        :param _builtins.str value: Enter cleartext or AES-encrypted MD5 authentication key
        :param _builtins.str value_variable: Variable name
        """
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "id_variable", id_variable)
        pulumi.set(__self__, "optional", optional)
        pulumi.set(__self__, "value", value)
        pulumi.set(__self__, "value_variable", value_variable)

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.int:
        """
        MD5 authentication key ID
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter(name="idVariable")
    def id_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "id_variable")

    @_builtins.property
    @pulumi.getter
    def optional(self) -> _builtins.bool:
        """
        Indicates if list item is considered optional.
        """
        return pulumi.get(self, "optional")

    @_builtins.property
    @pulumi.getter
    def value(self) -> _builtins.str:
        """
        Enter cleartext or AES-encrypted MD5 authentication key
        """
        return pulumi.get(self, "value")

    @_builtins.property
    @pulumi.getter(name="valueVariable")
    def value_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "value_variable")


@pulumi.output_type
class GetCiscoNtpFeatureTemplateServerResult(dict):
    def __init__(__self__, *,
                 authentication_key_id: _builtins.int,
                 authentication_key_id_variable: _builtins.str,
                 hostname_ip: _builtins.str,
                 hostname_ip_variable: _builtins.str,
                 optional: _builtins.bool,
                 prefer: _builtins.bool,
                 prefer_variable: _builtins.str,
                 source_interface: _builtins.str,
                 source_interface_variable: _builtins.str,
                 version: _builtins.int,
                 version_variable: _builtins.str,
                 vpn_id: _builtins.int,
                 vpn_id_variable: _builtins.str):
        """
        :param _builtins.int authentication_key_id: Set authentication key for the server
        :param _builtins.str authentication_key_id_variable: Variable name
        :param _builtins.str hostname_ip: Set hostname or IP address of server
        :param _builtins.str hostname_ip_variable: Variable name
        :param _builtins.bool optional: Indicates if list item is considered optional.
        :param _builtins.bool prefer: Prefer this NTP server
        :param _builtins.str prefer_variable: Variable name
        :param _builtins.str source_interface: Set interface to use to reach NTP server
        :param _builtins.str source_interface_variable: Variable name
        :param _builtins.int version: Set NTP version
        :param _builtins.str version_variable: Variable name
        :param _builtins.int vpn_id: Set VPN in which NTP server is located
        :param _builtins.str vpn_id_variable: Variable name
        """
        pulumi.set(__self__, "authentication_key_id", authentication_key_id)
        pulumi.set(__self__, "authentication_key_id_variable", authentication_key_id_variable)
        pulumi.set(__self__, "hostname_ip", hostname_ip)
        pulumi.set(__self__, "hostname_ip_variable", hostname_ip_variable)
        pulumi.set(__self__, "optional", optional)
        pulumi.set(__self__, "prefer", prefer)
        pulumi.set(__self__, "prefer_variable", prefer_variable)
        pulumi.set(__self__, "source_interface", source_interface)
        pulumi.set(__self__, "source_interface_variable", source_interface_variable)
        pulumi.set(__self__, "version", version)
        pulumi.set(__self__, "version_variable", version_variable)
        pulumi.set(__self__, "vpn_id", vpn_id)
        pulumi.set(__self__, "vpn_id_variable", vpn_id_variable)

    @_builtins.property
    @pulumi.getter(name="authenticationKeyId")
    def authentication_key_id(self) -> _builtins.int:
        """
        Set authentication key for the server
        """
        return pulumi.get(self, "authentication_key_id")

    @_builtins.property
    @pulumi.getter(name="authenticationKeyIdVariable")
    def authentication_key_id_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "authentication_key_id_variable")

    @_builtins.property
    @pulumi.getter(name="hostnameIp")
    def hostname_ip(self) -> _builtins.str:
        """
        Set hostname or IP address of server
        """
        return pulumi.get(self, "hostname_ip")

    @_builtins.property
    @pulumi.getter(name="hostnameIpVariable")
    def hostname_ip_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "hostname_ip_variable")

    @_builtins.property
    @pulumi.getter
    def optional(self) -> _builtins.bool:
        """
        Indicates if list item is considered optional.
        """
        return pulumi.get(self, "optional")

    @_builtins.property
    @pulumi.getter
    def prefer(self) -> _builtins.bool:
        """
        Prefer this NTP server
        """
        return pulumi.get(self, "prefer")

    @_builtins.property
    @pulumi.getter(name="preferVariable")
    def prefer_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "prefer_variable")

    @_builtins.property
    @pulumi.getter(name="sourceInterface")
    def source_interface(self) -> _builtins.str:
        """
        Set interface to use to reach NTP server
        """
        return pulumi.get(self, "source_interface")

    @_builtins.property
    @pulumi.getter(name="sourceInterfaceVariable")
    def source_interface_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "source_interface_variable")

    @_builtins.property
    @pulumi.getter
    def version(self) -> _builtins.int:
        """
        Set NTP version
        """
        return pulumi.get(self, "version")

    @_builtins.property
    @pulumi.getter(name="versionVariable")
    def version_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "version_variable")

    @_builtins.property
    @pulumi.getter(name="vpnId")
    def vpn_id(self) -> _builtins.int:
        """
        Set VPN in which NTP server is located
        """
        return pulumi.get(self, "vpn_id")

    @_builtins.property
    @pulumi.getter(name="vpnIdVariable")
    def vpn_id_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "vpn_id_variable")


@pulumi.output_type
class GetCiscoOmpFeatureTemplateAdvertiseIpv4RouteResult(dict):
    def __init__(__self__, *,
                 advertise_external_ospf: _builtins.str,
                 advertise_external_ospf_variable: _builtins.str,
                 optional: _builtins.bool,
                 protocol: _builtins.str):
        """
        :param _builtins.str advertise_external_ospf: Advertise OSPF external routes
        :param _builtins.str advertise_external_ospf_variable: Variable name
        :param _builtins.bool optional: Indicates if list item is considered optional.
        :param _builtins.str protocol: Set routes to advertise
        """
        pulumi.set(__self__, "advertise_external_ospf", advertise_external_ospf)
        pulumi.set(__self__, "advertise_external_ospf_variable", advertise_external_ospf_variable)
        pulumi.set(__self__, "optional", optional)
        pulumi.set(__self__, "protocol", protocol)

    @_builtins.property
    @pulumi.getter(name="advertiseExternalOspf")
    def advertise_external_ospf(self) -> _builtins.str:
        """
        Advertise OSPF external routes
        """
        return pulumi.get(self, "advertise_external_ospf")

    @_builtins.property
    @pulumi.getter(name="advertiseExternalOspfVariable")
    def advertise_external_ospf_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "advertise_external_ospf_variable")

    @_builtins.property
    @pulumi.getter
    def optional(self) -> _builtins.bool:
        """
        Indicates if list item is considered optional.
        """
        return pulumi.get(self, "optional")

    @_builtins.property
    @pulumi.getter
    def protocol(self) -> _builtins.str:
        """
        Set routes to advertise
        """
        return pulumi.get(self, "protocol")


@pulumi.output_type
class GetCiscoOmpFeatureTemplateAdvertiseIpv6RouteResult(dict):
    def __init__(__self__, *,
                 optional: _builtins.bool,
                 protocol: _builtins.str):
        """
        :param _builtins.bool optional: Indicates if list item is considered optional.
        :param _builtins.str protocol: Set routes to advertise
        """
        pulumi.set(__self__, "optional", optional)
        pulumi.set(__self__, "protocol", protocol)

    @_builtins.property
    @pulumi.getter
    def optional(self) -> _builtins.bool:
        """
        Indicates if list item is considered optional.
        """
        return pulumi.get(self, "optional")

    @_builtins.property
    @pulumi.getter
    def protocol(self) -> _builtins.str:
        """
        Set routes to advertise
        """
        return pulumi.get(self, "protocol")


@pulumi.output_type
class GetCiscoOspfFeatureTemplateAreaResult(dict):
    def __init__(__self__, *,
                 area_number: _builtins.int,
                 area_number_variable: _builtins.str,
                 interfaces: Sequence['outputs.GetCiscoOspfFeatureTemplateAreaInterfaceResult'],
                 nssa: _builtins.bool,
                 nssa_no_summary: _builtins.bool,
                 nssa_no_summary_variable: _builtins.str,
                 optional: _builtins.bool,
                 ranges: Sequence['outputs.GetCiscoOspfFeatureTemplateAreaRangeResult'],
                 stub: _builtins.bool,
                 stub_no_summary: _builtins.bool,
                 stub_no_summary_variable: _builtins.str):
        """
        :param _builtins.int area_number: Set OSPF area number
        :param _builtins.str area_number_variable: Variable name
        :param Sequence['GetCiscoOspfFeatureTemplateAreaInterfaceArgs'] interfaces: Set OSPF interface parameters
        :param _builtins.bool nssa: NSSA area
        :param _builtins.bool nssa_no_summary: Do not inject interarea routes into NSSA
        :param _builtins.str nssa_no_summary_variable: Variable name
        :param _builtins.bool optional: Indicates if list item is considered optional.
        :param Sequence['GetCiscoOspfFeatureTemplateAreaRangeArgs'] ranges: Summarize OSPF routes at an area boundary
        :param _builtins.bool stub: Stub area
        :param _builtins.bool stub_no_summary: Do not inject interarea routes into stub
        :param _builtins.str stub_no_summary_variable: Variable name
        """
        pulumi.set(__self__, "area_number", area_number)
        pulumi.set(__self__, "area_number_variable", area_number_variable)
        pulumi.set(__self__, "interfaces", interfaces)
        pulumi.set(__self__, "nssa", nssa)
        pulumi.set(__self__, "nssa_no_summary", nssa_no_summary)
        pulumi.set(__self__, "nssa_no_summary_variable", nssa_no_summary_variable)
        pulumi.set(__self__, "optional", optional)
        pulumi.set(__self__, "ranges", ranges)
        pulumi.set(__self__, "stub", stub)
        pulumi.set(__self__, "stub_no_summary", stub_no_summary)
        pulumi.set(__self__, "stub_no_summary_variable", stub_no_summary_variable)

    @_builtins.property
    @pulumi.getter(name="areaNumber")
    def area_number(self) -> _builtins.int:
        """
        Set OSPF area number
        """
        return pulumi.get(self, "area_number")

    @_builtins.property
    @pulumi.getter(name="areaNumberVariable")
    def area_number_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "area_number_variable")

    @_builtins.property
    @pulumi.getter
    def interfaces(self) -> Sequence['outputs.GetCiscoOspfFeatureTemplateAreaInterfaceResult']:
        """
        Set OSPF interface parameters
        """
        return pulumi.get(self, "interfaces")

    @_builtins.property
    @pulumi.getter
    def nssa(self) -> _builtins.bool:
        """
        NSSA area
        """
        return pulumi.get(self, "nssa")

    @_builtins.property
    @pulumi.getter(name="nssaNoSummary")
    def nssa_no_summary(self) -> _builtins.bool:
        """
        Do not inject interarea routes into NSSA
        """
        return pulumi.get(self, "nssa_no_summary")

    @_builtins.property
    @pulumi.getter(name="nssaNoSummaryVariable")
    def nssa_no_summary_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "nssa_no_summary_variable")

    @_builtins.property
    @pulumi.getter
    def optional(self) -> _builtins.bool:
        """
        Indicates if list item is considered optional.
        """
        return pulumi.get(self, "optional")

    @_builtins.property
    @pulumi.getter
    def ranges(self) -> Sequence['outputs.GetCiscoOspfFeatureTemplateAreaRangeResult']:
        """
        Summarize OSPF routes at an area boundary
        """
        return pulumi.get(self, "ranges")

    @_builtins.property
    @pulumi.getter
    def stub(self) -> _builtins.bool:
        """
        Stub area
        """
        return pulumi.get(self, "stub")

    @_builtins.property
    @pulumi.getter(name="stubNoSummary")
    def stub_no_summary(self) -> _builtins.bool:
        """
        Do not inject interarea routes into stub
        """
        return pulumi.get(self, "stub_no_summary")

    @_builtins.property
    @pulumi.getter(name="stubNoSummaryVariable")
    def stub_no_summary_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "stub_no_summary_variable")


@pulumi.output_type
class GetCiscoOspfFeatureTemplateAreaInterfaceResult(dict):
    def __init__(__self__, *,
                 authentication_message_digest_key: _builtins.str,
                 authentication_message_digest_key_id: _builtins.int,
                 authentication_message_digest_key_id_variable: _builtins.str,
                 authentication_message_digest_key_variable: _builtins.str,
                 authentication_type: _builtins.str,
                 authentication_type_variable: _builtins.str,
                 cost: _builtins.int,
                 cost_variable: _builtins.str,
                 dead_interval: _builtins.int,
                 dead_interval_variable: _builtins.str,
                 hello_interval: _builtins.int,
                 hello_interval_variable: _builtins.str,
                 name: _builtins.str,
                 name_variable: _builtins.str,
                 network: _builtins.str,
                 network_variable: _builtins.str,
                 optional: _builtins.bool,
                 passive_interface: _builtins.bool,
                 passive_interface_variable: _builtins.str,
                 priority: _builtins.int,
                 priority_variable: _builtins.str,
                 retransmit_interval: _builtins.int,
                 retransmit_interval_variable: _builtins.str):
        """
        :param _builtins.str authentication_message_digest_key: Set MD5 authentication key
        :param _builtins.int authentication_message_digest_key_id: Set MD5 message digest key
        :param _builtins.str authentication_message_digest_key_id_variable: Variable name
        :param _builtins.str authentication_message_digest_key_variable: Variable name
        :param _builtins.str authentication_type: Set OSPF interface authentication type
        :param _builtins.str authentication_type_variable: Variable name
        :param _builtins.int cost: Set cost of OSPF interface
        :param _builtins.str cost_variable: Variable name
        :param _builtins.int dead_interval: Set interval after which neighbor is declared to be down
        :param _builtins.str dead_interval_variable: Variable name
        :param _builtins.int hello_interval: Set interval between OSPF hello packets
        :param _builtins.str hello_interval_variable: Variable name
        :param _builtins.str name: Set interface name
        :param _builtins.str name_variable: Variable name
        :param _builtins.str network: Set the OSPF network type
        :param _builtins.str network_variable: Variable name
        :param _builtins.bool optional: Indicates if list item is considered optional.
        :param _builtins.bool passive_interface: Set the interface to advertise its address, but not to actively run OSPF
        :param _builtins.str passive_interface_variable: Variable name
        :param _builtins.int priority: Set router’s priority to be elected as designated router
        :param _builtins.str priority_variable: Variable name
        :param _builtins.int retransmit_interval: Set time between retransmitting LSAs
        :param _builtins.str retransmit_interval_variable: Variable name
        """
        pulumi.set(__self__, "authentication_message_digest_key", authentication_message_digest_key)
        pulumi.set(__self__, "authentication_message_digest_key_id", authentication_message_digest_key_id)
        pulumi.set(__self__, "authentication_message_digest_key_id_variable", authentication_message_digest_key_id_variable)
        pulumi.set(__self__, "authentication_message_digest_key_variable", authentication_message_digest_key_variable)
        pulumi.set(__self__, "authentication_type", authentication_type)
        pulumi.set(__self__, "authentication_type_variable", authentication_type_variable)
        pulumi.set(__self__, "cost", cost)
        pulumi.set(__self__, "cost_variable", cost_variable)
        pulumi.set(__self__, "dead_interval", dead_interval)
        pulumi.set(__self__, "dead_interval_variable", dead_interval_variable)
        pulumi.set(__self__, "hello_interval", hello_interval)
        pulumi.set(__self__, "hello_interval_variable", hello_interval_variable)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "name_variable", name_variable)
        pulumi.set(__self__, "network", network)
        pulumi.set(__self__, "network_variable", network_variable)
        pulumi.set(__self__, "optional", optional)
        pulumi.set(__self__, "passive_interface", passive_interface)
        pulumi.set(__self__, "passive_interface_variable", passive_interface_variable)
        pulumi.set(__self__, "priority", priority)
        pulumi.set(__self__, "priority_variable", priority_variable)
        pulumi.set(__self__, "retransmit_interval", retransmit_interval)
        pulumi.set(__self__, "retransmit_interval_variable", retransmit_interval_variable)

    @_builtins.property
    @pulumi.getter(name="authenticationMessageDigestKey")
    def authentication_message_digest_key(self) -> _builtins.str:
        """
        Set MD5 authentication key
        """
        return pulumi.get(self, "authentication_message_digest_key")

    @_builtins.property
    @pulumi.getter(name="authenticationMessageDigestKeyId")
    def authentication_message_digest_key_id(self) -> _builtins.int:
        """
        Set MD5 message digest key
        """
        return pulumi.get(self, "authentication_message_digest_key_id")

    @_builtins.property
    @pulumi.getter(name="authenticationMessageDigestKeyIdVariable")
    def authentication_message_digest_key_id_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "authentication_message_digest_key_id_variable")

    @_builtins.property
    @pulumi.getter(name="authenticationMessageDigestKeyVariable")
    def authentication_message_digest_key_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "authentication_message_digest_key_variable")

    @_builtins.property
    @pulumi.getter(name="authenticationType")
    def authentication_type(self) -> _builtins.str:
        """
        Set OSPF interface authentication type
        """
        return pulumi.get(self, "authentication_type")

    @_builtins.property
    @pulumi.getter(name="authenticationTypeVariable")
    def authentication_type_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "authentication_type_variable")

    @_builtins.property
    @pulumi.getter
    def cost(self) -> _builtins.int:
        """
        Set cost of OSPF interface
        """
        return pulumi.get(self, "cost")

    @_builtins.property
    @pulumi.getter(name="costVariable")
    def cost_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "cost_variable")

    @_builtins.property
    @pulumi.getter(name="deadInterval")
    def dead_interval(self) -> _builtins.int:
        """
        Set interval after which neighbor is declared to be down
        """
        return pulumi.get(self, "dead_interval")

    @_builtins.property
    @pulumi.getter(name="deadIntervalVariable")
    def dead_interval_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "dead_interval_variable")

    @_builtins.property
    @pulumi.getter(name="helloInterval")
    def hello_interval(self) -> _builtins.int:
        """
        Set interval between OSPF hello packets
        """
        return pulumi.get(self, "hello_interval")

    @_builtins.property
    @pulumi.getter(name="helloIntervalVariable")
    def hello_interval_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "hello_interval_variable")

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        """
        Set interface name
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter(name="nameVariable")
    def name_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "name_variable")

    @_builtins.property
    @pulumi.getter
    def network(self) -> _builtins.str:
        """
        Set the OSPF network type
        """
        return pulumi.get(self, "network")

    @_builtins.property
    @pulumi.getter(name="networkVariable")
    def network_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "network_variable")

    @_builtins.property
    @pulumi.getter
    def optional(self) -> _builtins.bool:
        """
        Indicates if list item is considered optional.
        """
        return pulumi.get(self, "optional")

    @_builtins.property
    @pulumi.getter(name="passiveInterface")
    def passive_interface(self) -> _builtins.bool:
        """
        Set the interface to advertise its address, but not to actively run OSPF
        """
        return pulumi.get(self, "passive_interface")

    @_builtins.property
    @pulumi.getter(name="passiveInterfaceVariable")
    def passive_interface_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "passive_interface_variable")

    @_builtins.property
    @pulumi.getter
    def priority(self) -> _builtins.int:
        """
        Set router’s priority to be elected as designated router
        """
        return pulumi.get(self, "priority")

    @_builtins.property
    @pulumi.getter(name="priorityVariable")
    def priority_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "priority_variable")

    @_builtins.property
    @pulumi.getter(name="retransmitInterval")
    def retransmit_interval(self) -> _builtins.int:
        """
        Set time between retransmitting LSAs
        """
        return pulumi.get(self, "retransmit_interval")

    @_builtins.property
    @pulumi.getter(name="retransmitIntervalVariable")
    def retransmit_interval_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "retransmit_interval_variable")


@pulumi.output_type
class GetCiscoOspfFeatureTemplateAreaRangeResult(dict):
    def __init__(__self__, *,
                 address: _builtins.str,
                 address_variable: _builtins.str,
                 cost: _builtins.int,
                 cost_variable: _builtins.str,
                 no_advertise: _builtins.bool,
                 no_advertise_variable: _builtins.str,
                 optional: _builtins.bool):
        """
        :param _builtins.str address: Set matching prefix
        :param _builtins.str address_variable: Variable name
        :param _builtins.int cost: Set cost for this range
        :param _builtins.str cost_variable: Variable name
        :param _builtins.bool no_advertise: Do not advertise this range
        :param _builtins.str no_advertise_variable: Variable name
        :param _builtins.bool optional: Indicates if list item is considered optional.
        """
        pulumi.set(__self__, "address", address)
        pulumi.set(__self__, "address_variable", address_variable)
        pulumi.set(__self__, "cost", cost)
        pulumi.set(__self__, "cost_variable", cost_variable)
        pulumi.set(__self__, "no_advertise", no_advertise)
        pulumi.set(__self__, "no_advertise_variable", no_advertise_variable)
        pulumi.set(__self__, "optional", optional)

    @_builtins.property
    @pulumi.getter
    def address(self) -> _builtins.str:
        """
        Set matching prefix
        """
        return pulumi.get(self, "address")

    @_builtins.property
    @pulumi.getter(name="addressVariable")
    def address_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "address_variable")

    @_builtins.property
    @pulumi.getter
    def cost(self) -> _builtins.int:
        """
        Set cost for this range
        """
        return pulumi.get(self, "cost")

    @_builtins.property
    @pulumi.getter(name="costVariable")
    def cost_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "cost_variable")

    @_builtins.property
    @pulumi.getter(name="noAdvertise")
    def no_advertise(self) -> _builtins.bool:
        """
        Do not advertise this range
        """
        return pulumi.get(self, "no_advertise")

    @_builtins.property
    @pulumi.getter(name="noAdvertiseVariable")
    def no_advertise_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "no_advertise_variable")

    @_builtins.property
    @pulumi.getter
    def optional(self) -> _builtins.bool:
        """
        Indicates if list item is considered optional.
        """
        return pulumi.get(self, "optional")


@pulumi.output_type
class GetCiscoOspfFeatureTemplateMaxMetricRouterLsaResult(dict):
    def __init__(__self__, *,
                 ad_type: _builtins.str,
                 optional: _builtins.bool,
                 time: _builtins.int,
                 time_variable: _builtins.str):
        """
        :param _builtins.str ad_type: Set the router LSA advertisement type
        :param _builtins.bool optional: Indicates if list item is considered optional.
        :param _builtins.int time: Set how long to advertise maximum metric after router starts up
        :param _builtins.str time_variable: Variable name
        """
        pulumi.set(__self__, "ad_type", ad_type)
        pulumi.set(__self__, "optional", optional)
        pulumi.set(__self__, "time", time)
        pulumi.set(__self__, "time_variable", time_variable)

    @_builtins.property
    @pulumi.getter(name="adType")
    def ad_type(self) -> _builtins.str:
        """
        Set the router LSA advertisement type
        """
        return pulumi.get(self, "ad_type")

    @_builtins.property
    @pulumi.getter
    def optional(self) -> _builtins.bool:
        """
        Indicates if list item is considered optional.
        """
        return pulumi.get(self, "optional")

    @_builtins.property
    @pulumi.getter
    def time(self) -> _builtins.int:
        """
        Set how long to advertise maximum metric after router starts up
        """
        return pulumi.get(self, "time")

    @_builtins.property
    @pulumi.getter(name="timeVariable")
    def time_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "time_variable")


@pulumi.output_type
class GetCiscoOspfFeatureTemplateRedistributeResult(dict):
    def __init__(__self__, *,
                 nat_dia: _builtins.bool,
                 nat_dia_variable: _builtins.str,
                 optional: _builtins.bool,
                 protocol: _builtins.str,
                 protocol_variable: _builtins.str,
                 route_policy: _builtins.str,
                 route_policy_variable: _builtins.str):
        """
        :param _builtins.bool nat_dia: Enable NAT DIA for redistributed routes
        :param _builtins.str nat_dia_variable: Variable name
        :param _builtins.bool optional: Indicates if list item is considered optional.
        :param _builtins.str protocol: Set the protocol
        :param _builtins.str protocol_variable: Variable name
        :param _builtins.str route_policy: Set route policy to apply to redistributed routes
        :param _builtins.str route_policy_variable: Variable name
        """
        pulumi.set(__self__, "nat_dia", nat_dia)
        pulumi.set(__self__, "nat_dia_variable", nat_dia_variable)
        pulumi.set(__self__, "optional", optional)
        pulumi.set(__self__, "protocol", protocol)
        pulumi.set(__self__, "protocol_variable", protocol_variable)
        pulumi.set(__self__, "route_policy", route_policy)
        pulumi.set(__self__, "route_policy_variable", route_policy_variable)

    @_builtins.property
    @pulumi.getter(name="natDia")
    def nat_dia(self) -> _builtins.bool:
        """
        Enable NAT DIA for redistributed routes
        """
        return pulumi.get(self, "nat_dia")

    @_builtins.property
    @pulumi.getter(name="natDiaVariable")
    def nat_dia_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "nat_dia_variable")

    @_builtins.property
    @pulumi.getter
    def optional(self) -> _builtins.bool:
        """
        Indicates if list item is considered optional.
        """
        return pulumi.get(self, "optional")

    @_builtins.property
    @pulumi.getter
    def protocol(self) -> _builtins.str:
        """
        Set the protocol
        """
        return pulumi.get(self, "protocol")

    @_builtins.property
    @pulumi.getter(name="protocolVariable")
    def protocol_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "protocol_variable")

    @_builtins.property
    @pulumi.getter(name="routePolicy")
    def route_policy(self) -> _builtins.str:
        """
        Set route policy to apply to redistributed routes
        """
        return pulumi.get(self, "route_policy")

    @_builtins.property
    @pulumi.getter(name="routePolicyVariable")
    def route_policy_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "route_policy_variable")


@pulumi.output_type
class GetCiscoOspfFeatureTemplateRoutePolicyResult(dict):
    def __init__(__self__, *,
                 direction: _builtins.str,
                 direction_variable: _builtins.str,
                 optional: _builtins.bool,
                 policy_name: _builtins.str,
                 policy_name_variable: _builtins.str):
        """
        :param _builtins.str direction: Set direction to apply policy
        :param _builtins.str direction_variable: Variable name
        :param _builtins.bool optional: Indicates if list item is considered optional.
        :param _builtins.str policy_name: Name of route policy
        :param _builtins.str policy_name_variable: Variable name
        """
        pulumi.set(__self__, "direction", direction)
        pulumi.set(__self__, "direction_variable", direction_variable)
        pulumi.set(__self__, "optional", optional)
        pulumi.set(__self__, "policy_name", policy_name)
        pulumi.set(__self__, "policy_name_variable", policy_name_variable)

    @_builtins.property
    @pulumi.getter
    def direction(self) -> _builtins.str:
        """
        Set direction to apply policy
        """
        return pulumi.get(self, "direction")

    @_builtins.property
    @pulumi.getter(name="directionVariable")
    def direction_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "direction_variable")

    @_builtins.property
    @pulumi.getter
    def optional(self) -> _builtins.bool:
        """
        Indicates if list item is considered optional.
        """
        return pulumi.get(self, "optional")

    @_builtins.property
    @pulumi.getter(name="policyName")
    def policy_name(self) -> _builtins.str:
        """
        Name of route policy
        """
        return pulumi.get(self, "policy_name")

    @_builtins.property
    @pulumi.getter(name="policyNameVariable")
    def policy_name_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "policy_name_variable")


@pulumi.output_type
class GetCiscoOspfv3FeatureTemplateIpv4AreaResult(dict):
    def __init__(__self__, *,
                 area_number: _builtins.int,
                 area_number_variable: _builtins.str,
                 interfaces: Sequence['outputs.GetCiscoOspfv3FeatureTemplateIpv4AreaInterfaceResult'],
                 normal: _builtins.bool,
                 normal_variable: _builtins.str,
                 nssa: _builtins.bool,
                 nssa_no_summary: _builtins.bool,
                 nssa_no_summary_variable: _builtins.str,
                 optional: _builtins.bool,
                 ranges: Sequence['outputs.GetCiscoOspfv3FeatureTemplateIpv4AreaRangeResult'],
                 stub: _builtins.bool,
                 stub_no_summary: _builtins.bool,
                 stub_no_summary_variable: _builtins.str,
                 translate: _builtins.str,
                 translate_variable: _builtins.str):
        """
        :param _builtins.int area_number: Set OSPF area number
        :param _builtins.str area_number_variable: Variable name
        :param Sequence['GetCiscoOspfv3FeatureTemplateIpv4AreaInterfaceArgs'] interfaces: Set OSPF interface parameters
        :param _builtins.bool normal: Area Type Normal
        :param _builtins.str normal_variable: Variable name
        :param _builtins.bool nssa: NSSA area
        :param _builtins.bool nssa_no_summary: Do not inject interarea routes into NSSA
        :param _builtins.str nssa_no_summary_variable: Variable name
        :param _builtins.bool optional: Indicates if list item is considered optional.
        :param Sequence['GetCiscoOspfv3FeatureTemplateIpv4AreaRangeArgs'] ranges: Summarize OSPF routes at an area boundary
        :param _builtins.bool stub: Stub area
        :param _builtins.bool stub_no_summary: Do not inject interarea routes into stub
        :param _builtins.str stub_no_summary_variable: Variable name
        :param _builtins.str translate: Always Translate LSAs on this ABR
        :param _builtins.str translate_variable: Variable name
        """
        pulumi.set(__self__, "area_number", area_number)
        pulumi.set(__self__, "area_number_variable", area_number_variable)
        pulumi.set(__self__, "interfaces", interfaces)
        pulumi.set(__self__, "normal", normal)
        pulumi.set(__self__, "normal_variable", normal_variable)
        pulumi.set(__self__, "nssa", nssa)
        pulumi.set(__self__, "nssa_no_summary", nssa_no_summary)
        pulumi.set(__self__, "nssa_no_summary_variable", nssa_no_summary_variable)
        pulumi.set(__self__, "optional", optional)
        pulumi.set(__self__, "ranges", ranges)
        pulumi.set(__self__, "stub", stub)
        pulumi.set(__self__, "stub_no_summary", stub_no_summary)
        pulumi.set(__self__, "stub_no_summary_variable", stub_no_summary_variable)
        pulumi.set(__self__, "translate", translate)
        pulumi.set(__self__, "translate_variable", translate_variable)

    @_builtins.property
    @pulumi.getter(name="areaNumber")
    def area_number(self) -> _builtins.int:
        """
        Set OSPF area number
        """
        return pulumi.get(self, "area_number")

    @_builtins.property
    @pulumi.getter(name="areaNumberVariable")
    def area_number_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "area_number_variable")

    @_builtins.property
    @pulumi.getter
    def interfaces(self) -> Sequence['outputs.GetCiscoOspfv3FeatureTemplateIpv4AreaInterfaceResult']:
        """
        Set OSPF interface parameters
        """
        return pulumi.get(self, "interfaces")

    @_builtins.property
    @pulumi.getter
    def normal(self) -> _builtins.bool:
        """
        Area Type Normal
        """
        return pulumi.get(self, "normal")

    @_builtins.property
    @pulumi.getter(name="normalVariable")
    def normal_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "normal_variable")

    @_builtins.property
    @pulumi.getter
    def nssa(self) -> _builtins.bool:
        """
        NSSA area
        """
        return pulumi.get(self, "nssa")

    @_builtins.property
    @pulumi.getter(name="nssaNoSummary")
    def nssa_no_summary(self) -> _builtins.bool:
        """
        Do not inject interarea routes into NSSA
        """
        return pulumi.get(self, "nssa_no_summary")

    @_builtins.property
    @pulumi.getter(name="nssaNoSummaryVariable")
    def nssa_no_summary_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "nssa_no_summary_variable")

    @_builtins.property
    @pulumi.getter
    def optional(self) -> _builtins.bool:
        """
        Indicates if list item is considered optional.
        """
        return pulumi.get(self, "optional")

    @_builtins.property
    @pulumi.getter
    def ranges(self) -> Sequence['outputs.GetCiscoOspfv3FeatureTemplateIpv4AreaRangeResult']:
        """
        Summarize OSPF routes at an area boundary
        """
        return pulumi.get(self, "ranges")

    @_builtins.property
    @pulumi.getter
    def stub(self) -> _builtins.bool:
        """
        Stub area
        """
        return pulumi.get(self, "stub")

    @_builtins.property
    @pulumi.getter(name="stubNoSummary")
    def stub_no_summary(self) -> _builtins.bool:
        """
        Do not inject interarea routes into stub
        """
        return pulumi.get(self, "stub_no_summary")

    @_builtins.property
    @pulumi.getter(name="stubNoSummaryVariable")
    def stub_no_summary_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "stub_no_summary_variable")

    @_builtins.property
    @pulumi.getter
    def translate(self) -> _builtins.str:
        """
        Always Translate LSAs on this ABR
        """
        return pulumi.get(self, "translate")

    @_builtins.property
    @pulumi.getter(name="translateVariable")
    def translate_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "translate_variable")


@pulumi.output_type
class GetCiscoOspfv3FeatureTemplateIpv4AreaInterfaceResult(dict):
    def __init__(__self__, *,
                 authentication_key: _builtins.str,
                 authentication_key_variable: _builtins.str,
                 authentication_type: _builtins.str,
                 authentication_type_variable: _builtins.str,
                 cost: _builtins.int,
                 cost_variable: _builtins.str,
                 dead_interval: _builtins.int,
                 dead_interval_variable: _builtins.str,
                 hello_interval: _builtins.int,
                 hello_interval_variable: _builtins.str,
                 ipsec_spi: _builtins.int,
                 ipsec_spi_variable: _builtins.str,
                 name: _builtins.str,
                 name_variable: _builtins.str,
                 network: _builtins.str,
                 network_variable: _builtins.str,
                 optional: _builtins.bool,
                 passive_interface: _builtins.bool,
                 passive_interface_variable: _builtins.str,
                 retransmit_interval: _builtins.int,
                 retransmit_interval_variable: _builtins.str):
        """
        :param _builtins.str authentication_key: Set OSPF interface authentication key
        :param _builtins.str authentication_key_variable: Variable name
        :param _builtins.str authentication_type: Set OSPF interface authentication type
        :param _builtins.str authentication_type_variable: Variable name
        :param _builtins.int cost: Set cost of OSPF interface
        :param _builtins.str cost_variable: Variable name
        :param _builtins.int dead_interval: Set interval after which neighbor is declared to be down
        :param _builtins.str dead_interval_variable: Variable name
        :param _builtins.int hello_interval: Set interval between OSPF hello packets
        :param _builtins.str hello_interval_variable: Variable name
        :param _builtins.int ipsec_spi: Set OSPF interface authentication IPSec SPI, range 256..4294967295
        :param _builtins.str ipsec_spi_variable: Variable name
        :param _builtins.str name: Set interface name
        :param _builtins.str name_variable: Variable name
        :param _builtins.str network: Set the OSPF network type
        :param _builtins.str network_variable: Variable name
        :param _builtins.bool optional: Indicates if list item is considered optional.
        :param _builtins.bool passive_interface: Set the interface to advertise its address, but not to actively run OSPF
        :param _builtins.str passive_interface_variable: Variable name
        :param _builtins.int retransmit_interval: Set time between retransmitting LSAs
        :param _builtins.str retransmit_interval_variable: Variable name
        """
        pulumi.set(__self__, "authentication_key", authentication_key)
        pulumi.set(__self__, "authentication_key_variable", authentication_key_variable)
        pulumi.set(__self__, "authentication_type", authentication_type)
        pulumi.set(__self__, "authentication_type_variable", authentication_type_variable)
        pulumi.set(__self__, "cost", cost)
        pulumi.set(__self__, "cost_variable", cost_variable)
        pulumi.set(__self__, "dead_interval", dead_interval)
        pulumi.set(__self__, "dead_interval_variable", dead_interval_variable)
        pulumi.set(__self__, "hello_interval", hello_interval)
        pulumi.set(__self__, "hello_interval_variable", hello_interval_variable)
        pulumi.set(__self__, "ipsec_spi", ipsec_spi)
        pulumi.set(__self__, "ipsec_spi_variable", ipsec_spi_variable)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "name_variable", name_variable)
        pulumi.set(__self__, "network", network)
        pulumi.set(__self__, "network_variable", network_variable)
        pulumi.set(__self__, "optional", optional)
        pulumi.set(__self__, "passive_interface", passive_interface)
        pulumi.set(__self__, "passive_interface_variable", passive_interface_variable)
        pulumi.set(__self__, "retransmit_interval", retransmit_interval)
        pulumi.set(__self__, "retransmit_interval_variable", retransmit_interval_variable)

    @_builtins.property
    @pulumi.getter(name="authenticationKey")
    def authentication_key(self) -> _builtins.str:
        """
        Set OSPF interface authentication key
        """
        return pulumi.get(self, "authentication_key")

    @_builtins.property
    @pulumi.getter(name="authenticationKeyVariable")
    def authentication_key_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "authentication_key_variable")

    @_builtins.property
    @pulumi.getter(name="authenticationType")
    def authentication_type(self) -> _builtins.str:
        """
        Set OSPF interface authentication type
        """
        return pulumi.get(self, "authentication_type")

    @_builtins.property
    @pulumi.getter(name="authenticationTypeVariable")
    def authentication_type_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "authentication_type_variable")

    @_builtins.property
    @pulumi.getter
    def cost(self) -> _builtins.int:
        """
        Set cost of OSPF interface
        """
        return pulumi.get(self, "cost")

    @_builtins.property
    @pulumi.getter(name="costVariable")
    def cost_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "cost_variable")

    @_builtins.property
    @pulumi.getter(name="deadInterval")
    def dead_interval(self) -> _builtins.int:
        """
        Set interval after which neighbor is declared to be down
        """
        return pulumi.get(self, "dead_interval")

    @_builtins.property
    @pulumi.getter(name="deadIntervalVariable")
    def dead_interval_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "dead_interval_variable")

    @_builtins.property
    @pulumi.getter(name="helloInterval")
    def hello_interval(self) -> _builtins.int:
        """
        Set interval between OSPF hello packets
        """
        return pulumi.get(self, "hello_interval")

    @_builtins.property
    @pulumi.getter(name="helloIntervalVariable")
    def hello_interval_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "hello_interval_variable")

    @_builtins.property
    @pulumi.getter(name="ipsecSpi")
    def ipsec_spi(self) -> _builtins.int:
        """
        Set OSPF interface authentication IPSec SPI, range 256..4294967295
        """
        return pulumi.get(self, "ipsec_spi")

    @_builtins.property
    @pulumi.getter(name="ipsecSpiVariable")
    def ipsec_spi_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "ipsec_spi_variable")

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        """
        Set interface name
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter(name="nameVariable")
    def name_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "name_variable")

    @_builtins.property
    @pulumi.getter
    def network(self) -> _builtins.str:
        """
        Set the OSPF network type
        """
        return pulumi.get(self, "network")

    @_builtins.property
    @pulumi.getter(name="networkVariable")
    def network_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "network_variable")

    @_builtins.property
    @pulumi.getter
    def optional(self) -> _builtins.bool:
        """
        Indicates if list item is considered optional.
        """
        return pulumi.get(self, "optional")

    @_builtins.property
    @pulumi.getter(name="passiveInterface")
    def passive_interface(self) -> _builtins.bool:
        """
        Set the interface to advertise its address, but not to actively run OSPF
        """
        return pulumi.get(self, "passive_interface")

    @_builtins.property
    @pulumi.getter(name="passiveInterfaceVariable")
    def passive_interface_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "passive_interface_variable")

    @_builtins.property
    @pulumi.getter(name="retransmitInterval")
    def retransmit_interval(self) -> _builtins.int:
        """
        Set time between retransmitting LSAs
        """
        return pulumi.get(self, "retransmit_interval")

    @_builtins.property
    @pulumi.getter(name="retransmitIntervalVariable")
    def retransmit_interval_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "retransmit_interval_variable")


@pulumi.output_type
class GetCiscoOspfv3FeatureTemplateIpv4AreaRangeResult(dict):
    def __init__(__self__, *,
                 address: _builtins.str,
                 address_variable: _builtins.str,
                 cost: _builtins.int,
                 cost_variable: _builtins.str,
                 no_advertise: _builtins.bool,
                 no_advertise_variable: _builtins.str,
                 optional: _builtins.bool):
        """
        :param _builtins.str address: Set Matching Prefix
        :param _builtins.str address_variable: Variable name
        :param _builtins.int cost: Set cost for this range
        :param _builtins.str cost_variable: Variable name
        :param _builtins.bool no_advertise: Do not advertise this range
        :param _builtins.str no_advertise_variable: Variable name
        :param _builtins.bool optional: Indicates if list item is considered optional.
        """
        pulumi.set(__self__, "address", address)
        pulumi.set(__self__, "address_variable", address_variable)
        pulumi.set(__self__, "cost", cost)
        pulumi.set(__self__, "cost_variable", cost_variable)
        pulumi.set(__self__, "no_advertise", no_advertise)
        pulumi.set(__self__, "no_advertise_variable", no_advertise_variable)
        pulumi.set(__self__, "optional", optional)

    @_builtins.property
    @pulumi.getter
    def address(self) -> _builtins.str:
        """
        Set Matching Prefix
        """
        return pulumi.get(self, "address")

    @_builtins.property
    @pulumi.getter(name="addressVariable")
    def address_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "address_variable")

    @_builtins.property
    @pulumi.getter
    def cost(self) -> _builtins.int:
        """
        Set cost for this range
        """
        return pulumi.get(self, "cost")

    @_builtins.property
    @pulumi.getter(name="costVariable")
    def cost_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "cost_variable")

    @_builtins.property
    @pulumi.getter(name="noAdvertise")
    def no_advertise(self) -> _builtins.bool:
        """
        Do not advertise this range
        """
        return pulumi.get(self, "no_advertise")

    @_builtins.property
    @pulumi.getter(name="noAdvertiseVariable")
    def no_advertise_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "no_advertise_variable")

    @_builtins.property
    @pulumi.getter
    def optional(self) -> _builtins.bool:
        """
        Indicates if list item is considered optional.
        """
        return pulumi.get(self, "optional")


@pulumi.output_type
class GetCiscoOspfv3FeatureTemplateIpv4MaxMetricRouterLsaResult(dict):
    def __init__(__self__, *,
                 ad_type: _builtins.str,
                 optional: _builtins.bool,
                 time: _builtins.int,
                 time_variable: _builtins.str):
        """
        :param _builtins.str ad_type: Set the router LSA advertisement type
        :param _builtins.bool optional: Indicates if list item is considered optional.
        :param _builtins.int time: Set how long to advertise maximum metric after router starts up
        :param _builtins.str time_variable: Variable name
        """
        pulumi.set(__self__, "ad_type", ad_type)
        pulumi.set(__self__, "optional", optional)
        pulumi.set(__self__, "time", time)
        pulumi.set(__self__, "time_variable", time_variable)

    @_builtins.property
    @pulumi.getter(name="adType")
    def ad_type(self) -> _builtins.str:
        """
        Set the router LSA advertisement type
        """
        return pulumi.get(self, "ad_type")

    @_builtins.property
    @pulumi.getter
    def optional(self) -> _builtins.bool:
        """
        Indicates if list item is considered optional.
        """
        return pulumi.get(self, "optional")

    @_builtins.property
    @pulumi.getter
    def time(self) -> _builtins.int:
        """
        Set how long to advertise maximum metric after router starts up
        """
        return pulumi.get(self, "time")

    @_builtins.property
    @pulumi.getter(name="timeVariable")
    def time_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "time_variable")


@pulumi.output_type
class GetCiscoOspfv3FeatureTemplateIpv4RedistributeResult(dict):
    def __init__(__self__, *,
                 nat_dia: _builtins.bool,
                 nat_dia_variable: _builtins.str,
                 optional: _builtins.bool,
                 protocol: _builtins.str,
                 protocol_variable: _builtins.str,
                 route_policy: _builtins.str,
                 route_policy_variable: _builtins.str):
        """
        :param _builtins.bool nat_dia: Enable NAT DIA for redistributed routes
        :param _builtins.str nat_dia_variable: Variable name
        :param _builtins.bool optional: Indicates if list item is considered optional.
        :param _builtins.str protocol: Set the protocol
        :param _builtins.str protocol_variable: Variable name
        :param _builtins.str route_policy: Set route policy to apply to redistributed routes
        :param _builtins.str route_policy_variable: Variable name
        """
        pulumi.set(__self__, "nat_dia", nat_dia)
        pulumi.set(__self__, "nat_dia_variable", nat_dia_variable)
        pulumi.set(__self__, "optional", optional)
        pulumi.set(__self__, "protocol", protocol)
        pulumi.set(__self__, "protocol_variable", protocol_variable)
        pulumi.set(__self__, "route_policy", route_policy)
        pulumi.set(__self__, "route_policy_variable", route_policy_variable)

    @_builtins.property
    @pulumi.getter(name="natDia")
    def nat_dia(self) -> _builtins.bool:
        """
        Enable NAT DIA for redistributed routes
        """
        return pulumi.get(self, "nat_dia")

    @_builtins.property
    @pulumi.getter(name="natDiaVariable")
    def nat_dia_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "nat_dia_variable")

    @_builtins.property
    @pulumi.getter
    def optional(self) -> _builtins.bool:
        """
        Indicates if list item is considered optional.
        """
        return pulumi.get(self, "optional")

    @_builtins.property
    @pulumi.getter
    def protocol(self) -> _builtins.str:
        """
        Set the protocol
        """
        return pulumi.get(self, "protocol")

    @_builtins.property
    @pulumi.getter(name="protocolVariable")
    def protocol_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "protocol_variable")

    @_builtins.property
    @pulumi.getter(name="routePolicy")
    def route_policy(self) -> _builtins.str:
        """
        Set route policy to apply to redistributed routes
        """
        return pulumi.get(self, "route_policy")

    @_builtins.property
    @pulumi.getter(name="routePolicyVariable")
    def route_policy_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "route_policy_variable")


@pulumi.output_type
class GetCiscoOspfv3FeatureTemplateIpv6AreaResult(dict):
    def __init__(__self__, *,
                 area_number: _builtins.int,
                 area_number_variable: _builtins.str,
                 interfaces: Sequence['outputs.GetCiscoOspfv3FeatureTemplateIpv6AreaInterfaceResult'],
                 normal: _builtins.bool,
                 normal_variable: _builtins.str,
                 nssa: _builtins.bool,
                 nssa_no_summary: _builtins.bool,
                 nssa_no_summary_variable: _builtins.str,
                 optional: _builtins.bool,
                 ranges: Sequence['outputs.GetCiscoOspfv3FeatureTemplateIpv6AreaRangeResult'],
                 stub: _builtins.bool,
                 stub_no_summary: _builtins.bool,
                 stub_no_summary_variable: _builtins.str,
                 translate: _builtins.str,
                 translate_variable: _builtins.str):
        """
        :param _builtins.int area_number: Set OSPF area number
        :param _builtins.str area_number_variable: Variable name
        :param Sequence['GetCiscoOspfv3FeatureTemplateIpv6AreaInterfaceArgs'] interfaces: Set OSPF interface parameters
        :param _builtins.bool normal: Area Type Normal
        :param _builtins.str normal_variable: Variable name
        :param _builtins.bool nssa: NSSA area
        :param _builtins.bool nssa_no_summary: Do not inject interarea routes into NSSA
        :param _builtins.str nssa_no_summary_variable: Variable name
        :param _builtins.bool optional: Indicates if list item is considered optional.
        :param Sequence['GetCiscoOspfv3FeatureTemplateIpv6AreaRangeArgs'] ranges: Summarize OSPF routes at an area boundary
        :param _builtins.bool stub: Stub area
        :param _builtins.bool stub_no_summary: Do not inject interarea routes into stub
        :param _builtins.str stub_no_summary_variable: Variable name
        :param _builtins.str translate: Always translate LSAs on this ABR
        :param _builtins.str translate_variable: Variable name
        """
        pulumi.set(__self__, "area_number", area_number)
        pulumi.set(__self__, "area_number_variable", area_number_variable)
        pulumi.set(__self__, "interfaces", interfaces)
        pulumi.set(__self__, "normal", normal)
        pulumi.set(__self__, "normal_variable", normal_variable)
        pulumi.set(__self__, "nssa", nssa)
        pulumi.set(__self__, "nssa_no_summary", nssa_no_summary)
        pulumi.set(__self__, "nssa_no_summary_variable", nssa_no_summary_variable)
        pulumi.set(__self__, "optional", optional)
        pulumi.set(__self__, "ranges", ranges)
        pulumi.set(__self__, "stub", stub)
        pulumi.set(__self__, "stub_no_summary", stub_no_summary)
        pulumi.set(__self__, "stub_no_summary_variable", stub_no_summary_variable)
        pulumi.set(__self__, "translate", translate)
        pulumi.set(__self__, "translate_variable", translate_variable)

    @_builtins.property
    @pulumi.getter(name="areaNumber")
    def area_number(self) -> _builtins.int:
        """
        Set OSPF area number
        """
        return pulumi.get(self, "area_number")

    @_builtins.property
    @pulumi.getter(name="areaNumberVariable")
    def area_number_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "area_number_variable")

    @_builtins.property
    @pulumi.getter
    def interfaces(self) -> Sequence['outputs.GetCiscoOspfv3FeatureTemplateIpv6AreaInterfaceResult']:
        """
        Set OSPF interface parameters
        """
        return pulumi.get(self, "interfaces")

    @_builtins.property
    @pulumi.getter
    def normal(self) -> _builtins.bool:
        """
        Area Type Normal
        """
        return pulumi.get(self, "normal")

    @_builtins.property
    @pulumi.getter(name="normalVariable")
    def normal_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "normal_variable")

    @_builtins.property
    @pulumi.getter
    def nssa(self) -> _builtins.bool:
        """
        NSSA area
        """
        return pulumi.get(self, "nssa")

    @_builtins.property
    @pulumi.getter(name="nssaNoSummary")
    def nssa_no_summary(self) -> _builtins.bool:
        """
        Do not inject interarea routes into NSSA
        """
        return pulumi.get(self, "nssa_no_summary")

    @_builtins.property
    @pulumi.getter(name="nssaNoSummaryVariable")
    def nssa_no_summary_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "nssa_no_summary_variable")

    @_builtins.property
    @pulumi.getter
    def optional(self) -> _builtins.bool:
        """
        Indicates if list item is considered optional.
        """
        return pulumi.get(self, "optional")

    @_builtins.property
    @pulumi.getter
    def ranges(self) -> Sequence['outputs.GetCiscoOspfv3FeatureTemplateIpv6AreaRangeResult']:
        """
        Summarize OSPF routes at an area boundary
        """
        return pulumi.get(self, "ranges")

    @_builtins.property
    @pulumi.getter
    def stub(self) -> _builtins.bool:
        """
        Stub area
        """
        return pulumi.get(self, "stub")

    @_builtins.property
    @pulumi.getter(name="stubNoSummary")
    def stub_no_summary(self) -> _builtins.bool:
        """
        Do not inject interarea routes into stub
        """
        return pulumi.get(self, "stub_no_summary")

    @_builtins.property
    @pulumi.getter(name="stubNoSummaryVariable")
    def stub_no_summary_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "stub_no_summary_variable")

    @_builtins.property
    @pulumi.getter
    def translate(self) -> _builtins.str:
        """
        Always translate LSAs on this ABR
        """
        return pulumi.get(self, "translate")

    @_builtins.property
    @pulumi.getter(name="translateVariable")
    def translate_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "translate_variable")


@pulumi.output_type
class GetCiscoOspfv3FeatureTemplateIpv6AreaInterfaceResult(dict):
    def __init__(__self__, *,
                 authentication_key: _builtins.str,
                 authentication_key_variable: _builtins.str,
                 authentication_type: _builtins.str,
                 authentication_type_variable: _builtins.str,
                 cost: _builtins.int,
                 cost_variable: _builtins.str,
                 dead_interval: _builtins.int,
                 dead_interval_variable: _builtins.str,
                 hello_interval: _builtins.int,
                 hello_interval_variable: _builtins.str,
                 ipsec_spi: _builtins.int,
                 ipsec_spi_variable: _builtins.str,
                 name: _builtins.str,
                 name_variable: _builtins.str,
                 network: _builtins.str,
                 network_variable: _builtins.str,
                 optional: _builtins.bool,
                 passive_interface: _builtins.bool,
                 passive_interface_variable: _builtins.str,
                 retransmit_interval: _builtins.int,
                 retransmit_interval_variable: _builtins.str):
        """
        :param _builtins.str authentication_key: Set OSPF interface authentication key
        :param _builtins.str authentication_key_variable: Variable name
        :param _builtins.str authentication_type: Set OSPF interface authentication type
        :param _builtins.str authentication_type_variable: Variable name
        :param _builtins.int cost: Set cost of OSPF interface
        :param _builtins.str cost_variable: Variable name
        :param _builtins.int dead_interval: Set interval after which neighbor is declared to be down
        :param _builtins.str dead_interval_variable: Variable name
        :param _builtins.int hello_interval: Set interval between OSPF hello packets
        :param _builtins.str hello_interval_variable: Variable name
        :param _builtins.int ipsec_spi: Set OSPF interface authentication IPSec SPI, range 256..4294967295
        :param _builtins.str ipsec_spi_variable: Variable name
        :param _builtins.str name: Set interface name
        :param _builtins.str name_variable: Variable name
        :param _builtins.str network: Set the OSPF network type
        :param _builtins.str network_variable: Variable name
        :param _builtins.bool optional: Indicates if list item is considered optional.
        :param _builtins.bool passive_interface: Set the interface to advertise its address, but not to actively run OSPF
        :param _builtins.str passive_interface_variable: Variable name
        :param _builtins.int retransmit_interval: Set time between retransmitting LSAs
        :param _builtins.str retransmit_interval_variable: Variable name
        """
        pulumi.set(__self__, "authentication_key", authentication_key)
        pulumi.set(__self__, "authentication_key_variable", authentication_key_variable)
        pulumi.set(__self__, "authentication_type", authentication_type)
        pulumi.set(__self__, "authentication_type_variable", authentication_type_variable)
        pulumi.set(__self__, "cost", cost)
        pulumi.set(__self__, "cost_variable", cost_variable)
        pulumi.set(__self__, "dead_interval", dead_interval)
        pulumi.set(__self__, "dead_interval_variable", dead_interval_variable)
        pulumi.set(__self__, "hello_interval", hello_interval)
        pulumi.set(__self__, "hello_interval_variable", hello_interval_variable)
        pulumi.set(__self__, "ipsec_spi", ipsec_spi)
        pulumi.set(__self__, "ipsec_spi_variable", ipsec_spi_variable)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "name_variable", name_variable)
        pulumi.set(__self__, "network", network)
        pulumi.set(__self__, "network_variable", network_variable)
        pulumi.set(__self__, "optional", optional)
        pulumi.set(__self__, "passive_interface", passive_interface)
        pulumi.set(__self__, "passive_interface_variable", passive_interface_variable)
        pulumi.set(__self__, "retransmit_interval", retransmit_interval)
        pulumi.set(__self__, "retransmit_interval_variable", retransmit_interval_variable)

    @_builtins.property
    @pulumi.getter(name="authenticationKey")
    def authentication_key(self) -> _builtins.str:
        """
        Set OSPF interface authentication key
        """
        return pulumi.get(self, "authentication_key")

    @_builtins.property
    @pulumi.getter(name="authenticationKeyVariable")
    def authentication_key_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "authentication_key_variable")

    @_builtins.property
    @pulumi.getter(name="authenticationType")
    def authentication_type(self) -> _builtins.str:
        """
        Set OSPF interface authentication type
        """
        return pulumi.get(self, "authentication_type")

    @_builtins.property
    @pulumi.getter(name="authenticationTypeVariable")
    def authentication_type_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "authentication_type_variable")

    @_builtins.property
    @pulumi.getter
    def cost(self) -> _builtins.int:
        """
        Set cost of OSPF interface
        """
        return pulumi.get(self, "cost")

    @_builtins.property
    @pulumi.getter(name="costVariable")
    def cost_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "cost_variable")

    @_builtins.property
    @pulumi.getter(name="deadInterval")
    def dead_interval(self) -> _builtins.int:
        """
        Set interval after which neighbor is declared to be down
        """
        return pulumi.get(self, "dead_interval")

    @_builtins.property
    @pulumi.getter(name="deadIntervalVariable")
    def dead_interval_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "dead_interval_variable")

    @_builtins.property
    @pulumi.getter(name="helloInterval")
    def hello_interval(self) -> _builtins.int:
        """
        Set interval between OSPF hello packets
        """
        return pulumi.get(self, "hello_interval")

    @_builtins.property
    @pulumi.getter(name="helloIntervalVariable")
    def hello_interval_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "hello_interval_variable")

    @_builtins.property
    @pulumi.getter(name="ipsecSpi")
    def ipsec_spi(self) -> _builtins.int:
        """
        Set OSPF interface authentication IPSec SPI, range 256..4294967295
        """
        return pulumi.get(self, "ipsec_spi")

    @_builtins.property
    @pulumi.getter(name="ipsecSpiVariable")
    def ipsec_spi_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "ipsec_spi_variable")

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        """
        Set interface name
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter(name="nameVariable")
    def name_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "name_variable")

    @_builtins.property
    @pulumi.getter
    def network(self) -> _builtins.str:
        """
        Set the OSPF network type
        """
        return pulumi.get(self, "network")

    @_builtins.property
    @pulumi.getter(name="networkVariable")
    def network_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "network_variable")

    @_builtins.property
    @pulumi.getter
    def optional(self) -> _builtins.bool:
        """
        Indicates if list item is considered optional.
        """
        return pulumi.get(self, "optional")

    @_builtins.property
    @pulumi.getter(name="passiveInterface")
    def passive_interface(self) -> _builtins.bool:
        """
        Set the interface to advertise its address, but not to actively run OSPF
        """
        return pulumi.get(self, "passive_interface")

    @_builtins.property
    @pulumi.getter(name="passiveInterfaceVariable")
    def passive_interface_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "passive_interface_variable")

    @_builtins.property
    @pulumi.getter(name="retransmitInterval")
    def retransmit_interval(self) -> _builtins.int:
        """
        Set time between retransmitting LSAs
        """
        return pulumi.get(self, "retransmit_interval")

    @_builtins.property
    @pulumi.getter(name="retransmitIntervalVariable")
    def retransmit_interval_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "retransmit_interval_variable")


@pulumi.output_type
class GetCiscoOspfv3FeatureTemplateIpv6AreaRangeResult(dict):
    def __init__(__self__, *,
                 address: _builtins.str,
                 address_variable: _builtins.str,
                 cost: _builtins.int,
                 cost_variable: _builtins.str,
                 no_advertise: _builtins.bool,
                 no_advertise_variable: _builtins.str,
                 optional: _builtins.bool):
        """
        :param _builtins.str address: Set Matching Prefix
        :param _builtins.str address_variable: Variable name
        :param _builtins.int cost: Set cost for this range
        :param _builtins.str cost_variable: Variable name
        :param _builtins.bool no_advertise: Do not advertise this range
        :param _builtins.str no_advertise_variable: Variable name
        :param _builtins.bool optional: Indicates if list item is considered optional.
        """
        pulumi.set(__self__, "address", address)
        pulumi.set(__self__, "address_variable", address_variable)
        pulumi.set(__self__, "cost", cost)
        pulumi.set(__self__, "cost_variable", cost_variable)
        pulumi.set(__self__, "no_advertise", no_advertise)
        pulumi.set(__self__, "no_advertise_variable", no_advertise_variable)
        pulumi.set(__self__, "optional", optional)

    @_builtins.property
    @pulumi.getter
    def address(self) -> _builtins.str:
        """
        Set Matching Prefix
        """
        return pulumi.get(self, "address")

    @_builtins.property
    @pulumi.getter(name="addressVariable")
    def address_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "address_variable")

    @_builtins.property
    @pulumi.getter
    def cost(self) -> _builtins.int:
        """
        Set cost for this range
        """
        return pulumi.get(self, "cost")

    @_builtins.property
    @pulumi.getter(name="costVariable")
    def cost_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "cost_variable")

    @_builtins.property
    @pulumi.getter(name="noAdvertise")
    def no_advertise(self) -> _builtins.bool:
        """
        Do not advertise this range
        """
        return pulumi.get(self, "no_advertise")

    @_builtins.property
    @pulumi.getter(name="noAdvertiseVariable")
    def no_advertise_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "no_advertise_variable")

    @_builtins.property
    @pulumi.getter
    def optional(self) -> _builtins.bool:
        """
        Indicates if list item is considered optional.
        """
        return pulumi.get(self, "optional")


@pulumi.output_type
class GetCiscoOspfv3FeatureTemplateIpv6MaxMetricRouterLsaResult(dict):
    def __init__(__self__, *,
                 ad_type: _builtins.str,
                 optional: _builtins.bool,
                 time: _builtins.int,
                 time_variable: _builtins.str):
        """
        :param _builtins.str ad_type: Set the router LSA advertisement type
        :param _builtins.bool optional: Indicates if list item is considered optional.
        :param _builtins.int time: Set how long to advertise maximum metric after router starts up
        :param _builtins.str time_variable: Variable name
        """
        pulumi.set(__self__, "ad_type", ad_type)
        pulumi.set(__self__, "optional", optional)
        pulumi.set(__self__, "time", time)
        pulumi.set(__self__, "time_variable", time_variable)

    @_builtins.property
    @pulumi.getter(name="adType")
    def ad_type(self) -> _builtins.str:
        """
        Set the router LSA advertisement type
        """
        return pulumi.get(self, "ad_type")

    @_builtins.property
    @pulumi.getter
    def optional(self) -> _builtins.bool:
        """
        Indicates if list item is considered optional.
        """
        return pulumi.get(self, "optional")

    @_builtins.property
    @pulumi.getter
    def time(self) -> _builtins.int:
        """
        Set how long to advertise maximum metric after router starts up
        """
        return pulumi.get(self, "time")

    @_builtins.property
    @pulumi.getter(name="timeVariable")
    def time_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "time_variable")


@pulumi.output_type
class GetCiscoOspfv3FeatureTemplateIpv6RedistributeResult(dict):
    def __init__(__self__, *,
                 optional: _builtins.bool,
                 protocol: _builtins.str,
                 protocol_variable: _builtins.str,
                 route_policy: _builtins.str,
                 route_policy_variable: _builtins.str):
        """
        :param _builtins.bool optional: Indicates if list item is considered optional.
        :param _builtins.str protocol: Set the protocol
        :param _builtins.str protocol_variable: Variable name
        :param _builtins.str route_policy: Set route policy to apply to redistributed routes
        :param _builtins.str route_policy_variable: Variable name
        """
        pulumi.set(__self__, "optional", optional)
        pulumi.set(__self__, "protocol", protocol)
        pulumi.set(__self__, "protocol_variable", protocol_variable)
        pulumi.set(__self__, "route_policy", route_policy)
        pulumi.set(__self__, "route_policy_variable", route_policy_variable)

    @_builtins.property
    @pulumi.getter
    def optional(self) -> _builtins.bool:
        """
        Indicates if list item is considered optional.
        """
        return pulumi.get(self, "optional")

    @_builtins.property
    @pulumi.getter
    def protocol(self) -> _builtins.str:
        """
        Set the protocol
        """
        return pulumi.get(self, "protocol")

    @_builtins.property
    @pulumi.getter(name="protocolVariable")
    def protocol_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "protocol_variable")

    @_builtins.property
    @pulumi.getter(name="routePolicy")
    def route_policy(self) -> _builtins.str:
        """
        Set route policy to apply to redistributed routes
        """
        return pulumi.get(self, "route_policy")

    @_builtins.property
    @pulumi.getter(name="routePolicyVariable")
    def route_policy_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "route_policy_variable")


@pulumi.output_type
class GetCiscoSecureInternetGatewayFeatureTemplateInterfaceResult(dict):
    def __init__(__self__, *,
                 application: _builtins.str,
                 auto_tunnel_mode: _builtins.bool,
                 dead_peer_detection_interval: _builtins.int,
                 dead_peer_detection_interval_variable: _builtins.str,
                 dead_peer_detection_retries: _builtins.int,
                 dead_peer_detection_retries_variable: _builtins.str,
                 description: _builtins.str,
                 description_variable: _builtins.str,
                 ike_ciphersuite: _builtins.str,
                 ike_ciphersuite_variable: _builtins.str,
                 ike_group: _builtins.str,
                 ike_group_variable: _builtins.str,
                 ike_pre_shared_key: _builtins.str,
                 ike_pre_shared_key_dynamic: _builtins.bool,
                 ike_pre_shared_key_local_id: _builtins.str,
                 ike_pre_shared_key_local_id_variable: _builtins.str,
                 ike_pre_shared_key_remote_id: _builtins.str,
                 ike_pre_shared_key_remote_id_variable: _builtins.str,
                 ike_pre_shared_key_variable: _builtins.str,
                 ike_rekey_interval: _builtins.int,
                 ike_rekey_interval_variable: _builtins.str,
                 ike_version: _builtins.int,
                 ike_version_variable: _builtins.str,
                 ip_unnumbered: _builtins.bool,
                 ipsec_ciphersuite: _builtins.str,
                 ipsec_ciphersuite_variable: _builtins.str,
                 ipsec_perfect_forward_secrecy: _builtins.str,
                 ipsec_perfect_forward_secrecy_variable: _builtins.str,
                 ipsec_rekey_interval: _builtins.int,
                 ipsec_rekey_interval_variable: _builtins.str,
                 ipsec_replay_window: _builtins.int,
                 ipsec_replay_window_variable: _builtins.str,
                 ipv4_address: _builtins.str,
                 ipv4_address_variable: _builtins.str,
                 mtu: _builtins.int,
                 mtu_variable: _builtins.str,
                 name: _builtins.str,
                 name_variable: _builtins.str,
                 optional: _builtins.bool,
                 shutdown: _builtins.bool,
                 sig_provider: _builtins.str,
                 tcp_mss: _builtins.int,
                 tcp_mss_variable: _builtins.str,
                 track_enable: _builtins.bool,
                 tracker: _builtins.str,
                 tunnel_dc_preference: _builtins.str,
                 tunnel_destination: _builtins.str,
                 tunnel_destination_variable: _builtins.str,
                 tunnel_public_ip: _builtins.str,
                 tunnel_public_ip_variable: _builtins.str,
                 tunnel_route_via: _builtins.str,
                 tunnel_route_via_variable: _builtins.str,
                 tunnel_source: _builtins.str,
                 tunnel_source_interface: _builtins.str,
                 tunnel_source_interface_variable: _builtins.str,
                 tunnel_source_variable: _builtins.str):
        """
        :param _builtins.str application: Enable Application Tunnel Type
        :param _builtins.bool auto_tunnel_mode: Auto Tunnel Mode
        :param _builtins.int dead_peer_detection_interval: IKE keepalive interval (seconds)
        :param _builtins.str dead_peer_detection_interval_variable: Variable name
        :param _builtins.int dead_peer_detection_retries: IKE keepalive retries
        :param _builtins.str dead_peer_detection_retries_variable: Variable name
        :param _builtins.str description: Interface description
        :param _builtins.str description_variable: Variable name
        :param _builtins.str ike_ciphersuite: IKE identity the IKE preshared secret belongs to
        :param _builtins.str ike_ciphersuite_variable: Variable name
        :param _builtins.str ike_group: IKE Diffie Hellman Groups
        :param _builtins.str ike_group_variable: Variable name
        :param _builtins.str ike_pre_shared_key: Use preshared key to authenticate IKE peer
        :param _builtins.bool ike_pre_shared_key_dynamic: Use preshared key to authenticate IKE peer
        :param _builtins.str ike_pre_shared_key_local_id: IKE ID for the local endpoint. Input IPv4 address, domain name, or email address
        :param _builtins.str ike_pre_shared_key_local_id_variable: Variable name
        :param _builtins.str ike_pre_shared_key_remote_id: IKE ID for the remote endpoint. Input IPv4 address, domain name, or email address
        :param _builtins.str ike_pre_shared_key_remote_id_variable: Variable name
        :param _builtins.str ike_pre_shared_key_variable: Variable name
        :param _builtins.int ike_rekey_interval: IKE rekey interval \\n\\n seconds
        :param _builtins.str ike_rekey_interval_variable: Variable name
        :param _builtins.int ike_version: IKE Version \\n\\n
        :param _builtins.str ike_version_variable: Variable name
        :param _builtins.bool ip_unnumbered: Unnumbered interface
        :param _builtins.str ipsec_ciphersuite: IPsec(ESP) encryption and integrity protocol
        :param _builtins.str ipsec_ciphersuite_variable: Variable name
        :param _builtins.str ipsec_perfect_forward_secrecy: IPsec perfect forward secrecy settings
        :param _builtins.str ipsec_perfect_forward_secrecy_variable: Variable name
        :param _builtins.int ipsec_rekey_interval: IPsec rekey interval \\n\\n seconds
        :param _builtins.str ipsec_rekey_interval_variable: Variable name
        :param _builtins.int ipsec_replay_window: Replay window size 32..8192 (must be a power of 2)
        :param _builtins.str ipsec_replay_window_variable: Variable name
        :param _builtins.str ipv4_address: Assign IPv4 address
        :param _builtins.str ipv4_address_variable: Variable name
        :param _builtins.int mtu: Interface MTU \\n\\n, in bytes
        :param _builtins.str mtu_variable: Variable name
        :param _builtins.str name: Interface name: IPsec when present
        :param _builtins.str name_variable: Variable name
        :param _builtins.bool optional: Indicates if list item is considered optional.
        :param _builtins.bool shutdown: Administrative state
        :param _builtins.str sig_provider: SIG Tunnel Provider
        :param _builtins.int tcp_mss: TCP MSS on SYN packets, in bytes
        :param _builtins.str tcp_mss_variable: Variable name
        :param _builtins.bool track_enable: Enable/disable SIG tracking
        :param _builtins.str tracker: Enable tracker for this interface
        :param _builtins.str tunnel_dc_preference: SIG Tunnel Data Center
        :param _builtins.str tunnel_destination: Tunnel destination IP address
        :param _builtins.str tunnel_destination_variable: Variable name
        :param _builtins.str tunnel_public_ip: Public IP required to setup GRE tunnel to Zscaler
        :param _builtins.str tunnel_public_ip_variable: Variable name
        :param _builtins.str tunnel_route_via: \\n\\n Interface name: ge0/\\n\\n or ge0/\\n\\n.vlanid
        :param _builtins.str tunnel_route_via_variable: Variable name
        :param _builtins.str tunnel_source: Tunnel source IP Address
        :param _builtins.str tunnel_source_interface: \\n\\n Interface name: ge0/\\n\\n or ge0/\\n\\n.vlanid
        :param _builtins.str tunnel_source_interface_variable: Variable name
        :param _builtins.str tunnel_source_variable: Variable name
        """
        pulumi.set(__self__, "application", application)
        pulumi.set(__self__, "auto_tunnel_mode", auto_tunnel_mode)
        pulumi.set(__self__, "dead_peer_detection_interval", dead_peer_detection_interval)
        pulumi.set(__self__, "dead_peer_detection_interval_variable", dead_peer_detection_interval_variable)
        pulumi.set(__self__, "dead_peer_detection_retries", dead_peer_detection_retries)
        pulumi.set(__self__, "dead_peer_detection_retries_variable", dead_peer_detection_retries_variable)
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "description_variable", description_variable)
        pulumi.set(__self__, "ike_ciphersuite", ike_ciphersuite)
        pulumi.set(__self__, "ike_ciphersuite_variable", ike_ciphersuite_variable)
        pulumi.set(__self__, "ike_group", ike_group)
        pulumi.set(__self__, "ike_group_variable", ike_group_variable)
        pulumi.set(__self__, "ike_pre_shared_key", ike_pre_shared_key)
        pulumi.set(__self__, "ike_pre_shared_key_dynamic", ike_pre_shared_key_dynamic)
        pulumi.set(__self__, "ike_pre_shared_key_local_id", ike_pre_shared_key_local_id)
        pulumi.set(__self__, "ike_pre_shared_key_local_id_variable", ike_pre_shared_key_local_id_variable)
        pulumi.set(__self__, "ike_pre_shared_key_remote_id", ike_pre_shared_key_remote_id)
        pulumi.set(__self__, "ike_pre_shared_key_remote_id_variable", ike_pre_shared_key_remote_id_variable)
        pulumi.set(__self__, "ike_pre_shared_key_variable", ike_pre_shared_key_variable)
        pulumi.set(__self__, "ike_rekey_interval", ike_rekey_interval)
        pulumi.set(__self__, "ike_rekey_interval_variable", ike_rekey_interval_variable)
        pulumi.set(__self__, "ike_version", ike_version)
        pulumi.set(__self__, "ike_version_variable", ike_version_variable)
        pulumi.set(__self__, "ip_unnumbered", ip_unnumbered)
        pulumi.set(__self__, "ipsec_ciphersuite", ipsec_ciphersuite)
        pulumi.set(__self__, "ipsec_ciphersuite_variable", ipsec_ciphersuite_variable)
        pulumi.set(__self__, "ipsec_perfect_forward_secrecy", ipsec_perfect_forward_secrecy)
        pulumi.set(__self__, "ipsec_perfect_forward_secrecy_variable", ipsec_perfect_forward_secrecy_variable)
        pulumi.set(__self__, "ipsec_rekey_interval", ipsec_rekey_interval)
        pulumi.set(__self__, "ipsec_rekey_interval_variable", ipsec_rekey_interval_variable)
        pulumi.set(__self__, "ipsec_replay_window", ipsec_replay_window)
        pulumi.set(__self__, "ipsec_replay_window_variable", ipsec_replay_window_variable)
        pulumi.set(__self__, "ipv4_address", ipv4_address)
        pulumi.set(__self__, "ipv4_address_variable", ipv4_address_variable)
        pulumi.set(__self__, "mtu", mtu)
        pulumi.set(__self__, "mtu_variable", mtu_variable)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "name_variable", name_variable)
        pulumi.set(__self__, "optional", optional)
        pulumi.set(__self__, "shutdown", shutdown)
        pulumi.set(__self__, "sig_provider", sig_provider)
        pulumi.set(__self__, "tcp_mss", tcp_mss)
        pulumi.set(__self__, "tcp_mss_variable", tcp_mss_variable)
        pulumi.set(__self__, "track_enable", track_enable)
        pulumi.set(__self__, "tracker", tracker)
        pulumi.set(__self__, "tunnel_dc_preference", tunnel_dc_preference)
        pulumi.set(__self__, "tunnel_destination", tunnel_destination)
        pulumi.set(__self__, "tunnel_destination_variable", tunnel_destination_variable)
        pulumi.set(__self__, "tunnel_public_ip", tunnel_public_ip)
        pulumi.set(__self__, "tunnel_public_ip_variable", tunnel_public_ip_variable)
        pulumi.set(__self__, "tunnel_route_via", tunnel_route_via)
        pulumi.set(__self__, "tunnel_route_via_variable", tunnel_route_via_variable)
        pulumi.set(__self__, "tunnel_source", tunnel_source)
        pulumi.set(__self__, "tunnel_source_interface", tunnel_source_interface)
        pulumi.set(__self__, "tunnel_source_interface_variable", tunnel_source_interface_variable)
        pulumi.set(__self__, "tunnel_source_variable", tunnel_source_variable)

    @_builtins.property
    @pulumi.getter
    def application(self) -> _builtins.str:
        """
        Enable Application Tunnel Type
        """
        return pulumi.get(self, "application")

    @_builtins.property
    @pulumi.getter(name="autoTunnelMode")
    def auto_tunnel_mode(self) -> _builtins.bool:
        """
        Auto Tunnel Mode
        """
        return pulumi.get(self, "auto_tunnel_mode")

    @_builtins.property
    @pulumi.getter(name="deadPeerDetectionInterval")
    def dead_peer_detection_interval(self) -> _builtins.int:
        """
        IKE keepalive interval (seconds)
        """
        return pulumi.get(self, "dead_peer_detection_interval")

    @_builtins.property
    @pulumi.getter(name="deadPeerDetectionIntervalVariable")
    def dead_peer_detection_interval_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "dead_peer_detection_interval_variable")

    @_builtins.property
    @pulumi.getter(name="deadPeerDetectionRetries")
    def dead_peer_detection_retries(self) -> _builtins.int:
        """
        IKE keepalive retries
        """
        return pulumi.get(self, "dead_peer_detection_retries")

    @_builtins.property
    @pulumi.getter(name="deadPeerDetectionRetriesVariable")
    def dead_peer_detection_retries_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "dead_peer_detection_retries_variable")

    @_builtins.property
    @pulumi.getter
    def description(self) -> _builtins.str:
        """
        Interface description
        """
        return pulumi.get(self, "description")

    @_builtins.property
    @pulumi.getter(name="descriptionVariable")
    def description_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "description_variable")

    @_builtins.property
    @pulumi.getter(name="ikeCiphersuite")
    def ike_ciphersuite(self) -> _builtins.str:
        """
        IKE identity the IKE preshared secret belongs to
        """
        return pulumi.get(self, "ike_ciphersuite")

    @_builtins.property
    @pulumi.getter(name="ikeCiphersuiteVariable")
    def ike_ciphersuite_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "ike_ciphersuite_variable")

    @_builtins.property
    @pulumi.getter(name="ikeGroup")
    def ike_group(self) -> _builtins.str:
        """
        IKE Diffie Hellman Groups
        """
        return pulumi.get(self, "ike_group")

    @_builtins.property
    @pulumi.getter(name="ikeGroupVariable")
    def ike_group_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "ike_group_variable")

    @_builtins.property
    @pulumi.getter(name="ikePreSharedKey")
    def ike_pre_shared_key(self) -> _builtins.str:
        """
        Use preshared key to authenticate IKE peer
        """
        return pulumi.get(self, "ike_pre_shared_key")

    @_builtins.property
    @pulumi.getter(name="ikePreSharedKeyDynamic")
    def ike_pre_shared_key_dynamic(self) -> _builtins.bool:
        """
        Use preshared key to authenticate IKE peer
        """
        return pulumi.get(self, "ike_pre_shared_key_dynamic")

    @_builtins.property
    @pulumi.getter(name="ikePreSharedKeyLocalId")
    def ike_pre_shared_key_local_id(self) -> _builtins.str:
        """
        IKE ID for the local endpoint. Input IPv4 address, domain name, or email address
        """
        return pulumi.get(self, "ike_pre_shared_key_local_id")

    @_builtins.property
    @pulumi.getter(name="ikePreSharedKeyLocalIdVariable")
    def ike_pre_shared_key_local_id_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "ike_pre_shared_key_local_id_variable")

    @_builtins.property
    @pulumi.getter(name="ikePreSharedKeyRemoteId")
    def ike_pre_shared_key_remote_id(self) -> _builtins.str:
        """
        IKE ID for the remote endpoint. Input IPv4 address, domain name, or email address
        """
        return pulumi.get(self, "ike_pre_shared_key_remote_id")

    @_builtins.property
    @pulumi.getter(name="ikePreSharedKeyRemoteIdVariable")
    def ike_pre_shared_key_remote_id_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "ike_pre_shared_key_remote_id_variable")

    @_builtins.property
    @pulumi.getter(name="ikePreSharedKeyVariable")
    def ike_pre_shared_key_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "ike_pre_shared_key_variable")

    @_builtins.property
    @pulumi.getter(name="ikeRekeyInterval")
    def ike_rekey_interval(self) -> _builtins.int:
        """
        IKE rekey interval \\n\\n seconds
        """
        return pulumi.get(self, "ike_rekey_interval")

    @_builtins.property
    @pulumi.getter(name="ikeRekeyIntervalVariable")
    def ike_rekey_interval_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "ike_rekey_interval_variable")

    @_builtins.property
    @pulumi.getter(name="ikeVersion")
    def ike_version(self) -> _builtins.int:
        """
        IKE Version \\n\\n
        """
        return pulumi.get(self, "ike_version")

    @_builtins.property
    @pulumi.getter(name="ikeVersionVariable")
    def ike_version_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "ike_version_variable")

    @_builtins.property
    @pulumi.getter(name="ipUnnumbered")
    def ip_unnumbered(self) -> _builtins.bool:
        """
        Unnumbered interface
        """
        return pulumi.get(self, "ip_unnumbered")

    @_builtins.property
    @pulumi.getter(name="ipsecCiphersuite")
    def ipsec_ciphersuite(self) -> _builtins.str:
        """
        IPsec(ESP) encryption and integrity protocol
        """
        return pulumi.get(self, "ipsec_ciphersuite")

    @_builtins.property
    @pulumi.getter(name="ipsecCiphersuiteVariable")
    def ipsec_ciphersuite_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "ipsec_ciphersuite_variable")

    @_builtins.property
    @pulumi.getter(name="ipsecPerfectForwardSecrecy")
    def ipsec_perfect_forward_secrecy(self) -> _builtins.str:
        """
        IPsec perfect forward secrecy settings
        """
        return pulumi.get(self, "ipsec_perfect_forward_secrecy")

    @_builtins.property
    @pulumi.getter(name="ipsecPerfectForwardSecrecyVariable")
    def ipsec_perfect_forward_secrecy_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "ipsec_perfect_forward_secrecy_variable")

    @_builtins.property
    @pulumi.getter(name="ipsecRekeyInterval")
    def ipsec_rekey_interval(self) -> _builtins.int:
        """
        IPsec rekey interval \\n\\n seconds
        """
        return pulumi.get(self, "ipsec_rekey_interval")

    @_builtins.property
    @pulumi.getter(name="ipsecRekeyIntervalVariable")
    def ipsec_rekey_interval_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "ipsec_rekey_interval_variable")

    @_builtins.property
    @pulumi.getter(name="ipsecReplayWindow")
    def ipsec_replay_window(self) -> _builtins.int:
        """
        Replay window size 32..8192 (must be a power of 2)
        """
        return pulumi.get(self, "ipsec_replay_window")

    @_builtins.property
    @pulumi.getter(name="ipsecReplayWindowVariable")
    def ipsec_replay_window_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "ipsec_replay_window_variable")

    @_builtins.property
    @pulumi.getter(name="ipv4Address")
    def ipv4_address(self) -> _builtins.str:
        """
        Assign IPv4 address
        """
        return pulumi.get(self, "ipv4_address")

    @_builtins.property
    @pulumi.getter(name="ipv4AddressVariable")
    def ipv4_address_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "ipv4_address_variable")

    @_builtins.property
    @pulumi.getter
    def mtu(self) -> _builtins.int:
        """
        Interface MTU \\n\\n, in bytes
        """
        return pulumi.get(self, "mtu")

    @_builtins.property
    @pulumi.getter(name="mtuVariable")
    def mtu_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "mtu_variable")

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        """
        Interface name: IPsec when present
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter(name="nameVariable")
    def name_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "name_variable")

    @_builtins.property
    @pulumi.getter
    def optional(self) -> _builtins.bool:
        """
        Indicates if list item is considered optional.
        """
        return pulumi.get(self, "optional")

    @_builtins.property
    @pulumi.getter
    def shutdown(self) -> _builtins.bool:
        """
        Administrative state
        """
        return pulumi.get(self, "shutdown")

    @_builtins.property
    @pulumi.getter(name="sigProvider")
    def sig_provider(self) -> _builtins.str:
        """
        SIG Tunnel Provider
        """
        return pulumi.get(self, "sig_provider")

    @_builtins.property
    @pulumi.getter(name="tcpMss")
    def tcp_mss(self) -> _builtins.int:
        """
        TCP MSS on SYN packets, in bytes
        """
        return pulumi.get(self, "tcp_mss")

    @_builtins.property
    @pulumi.getter(name="tcpMssVariable")
    def tcp_mss_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "tcp_mss_variable")

    @_builtins.property
    @pulumi.getter(name="trackEnable")
    def track_enable(self) -> _builtins.bool:
        """
        Enable/disable SIG tracking
        """
        return pulumi.get(self, "track_enable")

    @_builtins.property
    @pulumi.getter
    def tracker(self) -> _builtins.str:
        """
        Enable tracker for this interface
        """
        return pulumi.get(self, "tracker")

    @_builtins.property
    @pulumi.getter(name="tunnelDcPreference")
    def tunnel_dc_preference(self) -> _builtins.str:
        """
        SIG Tunnel Data Center
        """
        return pulumi.get(self, "tunnel_dc_preference")

    @_builtins.property
    @pulumi.getter(name="tunnelDestination")
    def tunnel_destination(self) -> _builtins.str:
        """
        Tunnel destination IP address
        """
        return pulumi.get(self, "tunnel_destination")

    @_builtins.property
    @pulumi.getter(name="tunnelDestinationVariable")
    def tunnel_destination_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "tunnel_destination_variable")

    @_builtins.property
    @pulumi.getter(name="tunnelPublicIp")
    def tunnel_public_ip(self) -> _builtins.str:
        """
        Public IP required to setup GRE tunnel to Zscaler
        """
        return pulumi.get(self, "tunnel_public_ip")

    @_builtins.property
    @pulumi.getter(name="tunnelPublicIpVariable")
    def tunnel_public_ip_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "tunnel_public_ip_variable")

    @_builtins.property
    @pulumi.getter(name="tunnelRouteVia")
    def tunnel_route_via(self) -> _builtins.str:
        """
        \\n\\n Interface name: ge0/\\n\\n or ge0/\\n\\n.vlanid
        """
        return pulumi.get(self, "tunnel_route_via")

    @_builtins.property
    @pulumi.getter(name="tunnelRouteViaVariable")
    def tunnel_route_via_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "tunnel_route_via_variable")

    @_builtins.property
    @pulumi.getter(name="tunnelSource")
    def tunnel_source(self) -> _builtins.str:
        """
        Tunnel source IP Address
        """
        return pulumi.get(self, "tunnel_source")

    @_builtins.property
    @pulumi.getter(name="tunnelSourceInterface")
    def tunnel_source_interface(self) -> _builtins.str:
        """
        \\n\\n Interface name: ge0/\\n\\n or ge0/\\n\\n.vlanid
        """
        return pulumi.get(self, "tunnel_source_interface")

    @_builtins.property
    @pulumi.getter(name="tunnelSourceInterfaceVariable")
    def tunnel_source_interface_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "tunnel_source_interface_variable")

    @_builtins.property
    @pulumi.getter(name="tunnelSourceVariable")
    def tunnel_source_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "tunnel_source_variable")


@pulumi.output_type
class GetCiscoSecureInternetGatewayFeatureTemplateServiceResult(dict):
    def __init__(__self__, *,
                 interface_pairs: Sequence['outputs.GetCiscoSecureInternetGatewayFeatureTemplateServiceInterfacePairResult'],
                 optional: _builtins.bool,
                 service_type: _builtins.str,
                 umbrella_primary_data_center: _builtins.str,
                 umbrella_primary_data_center_variable: _builtins.str,
                 umbrella_secondary_data_center: _builtins.str,
                 umbrella_secondary_data_center_variable: _builtins.str,
                 zscaler_aup_block_internet_until_accepted: _builtins.bool,
                 zscaler_aup_enabled: _builtins.bool,
                 zscaler_aup_force_ssl_inspection: _builtins.bool,
                 zscaler_aup_timeout: _builtins.int,
                 zscaler_authentication_required: _builtins.bool,
                 zscaler_caution_enabled: _builtins.bool,
                 zscaler_firewall_enabled: _builtins.bool,
                 zscaler_ips_control_enabled: _builtins.bool,
                 zscaler_location_name: _builtins.str,
                 zscaler_location_name_variable: _builtins.str,
                 zscaler_primary_data_center: _builtins.str,
                 zscaler_primary_data_center_variable: _builtins.str,
                 zscaler_secondary_data_center: _builtins.str,
                 zscaler_secondary_data_center_variable: _builtins.str,
                 zscaler_surrogate_display_time_unit: _builtins.str,
                 zscaler_surrogate_idle_time: _builtins.int,
                 zscaler_surrogate_ip: _builtins.bool,
                 zscaler_surrogate_ip_enforce_for_known_browsers: _builtins.bool,
                 zscaler_surrogate_refresh_time: _builtins.int,
                 zscaler_surrogate_refresh_time_unit: _builtins.str,
                 zscaler_xff_forward: _builtins.bool):
        """
        :param Sequence['GetCiscoSecureInternetGatewayFeatureTemplateServiceInterfacePairArgs'] interface_pairs: Interface Pair for active and backup
        :param _builtins.bool optional: Indicates if list item is considered optional.
        :param _builtins.str service_type: Service Type
        :param _builtins.str umbrella_primary_data_center: Umbrella Primary Datacenter
        :param _builtins.str umbrella_primary_data_center_variable: Variable name
        :param _builtins.str umbrella_secondary_data_center: Umbrella Secondary Datacenter
        :param _builtins.str umbrella_secondary_data_center_variable: Variable name
        :param _builtins.bool zscaler_aup_block_internet_until_accepted: For first-time Acceptable User Policy behavior, block Internet access
        :param _builtins.bool zscaler_aup_enabled: Enable Acceptable User Policy
        :param _builtins.bool zscaler_aup_force_ssl_inspection: For first-time Acceptable User Policy behavior, force SSL inspection
        :param _builtins.int zscaler_aup_timeout: Custom Acceptable User Policy frequency in days
        :param _builtins.bool zscaler_authentication_required: Enforce Authentication
        :param _builtins.bool zscaler_caution_enabled: Enable Caution
        :param _builtins.bool zscaler_firewall_enabled: Firewall enabled
        :param _builtins.bool zscaler_ips_control_enabled: Enable IPS Control
        :param _builtins.str zscaler_location_name: Zscaler location name (optional)
        :param _builtins.str zscaler_location_name_variable: Variable name
        :param _builtins.str zscaler_primary_data_center: Custom Primary Datacenter
        :param _builtins.str zscaler_primary_data_center_variable: Variable name
        :param _builtins.str zscaler_secondary_data_center: Custom Secondary Datacenter
        :param _builtins.str zscaler_secondary_data_center_variable: Variable name
        :param _builtins.str zscaler_surrogate_display_time_unit: Display time unit
        :param _builtins.int zscaler_surrogate_idle_time: Idle time to disassociation
        :param _builtins.bool zscaler_surrogate_ip: Enable Surrogate IP
        :param _builtins.bool zscaler_surrogate_ip_enforce_for_known_browsers: Enforce Surrogate IP for known browsers
        :param _builtins.int zscaler_surrogate_refresh_time: Refresh time for re-validation of surrogacy in minutes
        :param _builtins.str zscaler_surrogate_refresh_time_unit: Refresh Time unit
        :param _builtins.bool zscaler_xff_forward: XFF forwarding enabled
        """
        pulumi.set(__self__, "interface_pairs", interface_pairs)
        pulumi.set(__self__, "optional", optional)
        pulumi.set(__self__, "service_type", service_type)
        pulumi.set(__self__, "umbrella_primary_data_center", umbrella_primary_data_center)
        pulumi.set(__self__, "umbrella_primary_data_center_variable", umbrella_primary_data_center_variable)
        pulumi.set(__self__, "umbrella_secondary_data_center", umbrella_secondary_data_center)
        pulumi.set(__self__, "umbrella_secondary_data_center_variable", umbrella_secondary_data_center_variable)
        pulumi.set(__self__, "zscaler_aup_block_internet_until_accepted", zscaler_aup_block_internet_until_accepted)
        pulumi.set(__self__, "zscaler_aup_enabled", zscaler_aup_enabled)
        pulumi.set(__self__, "zscaler_aup_force_ssl_inspection", zscaler_aup_force_ssl_inspection)
        pulumi.set(__self__, "zscaler_aup_timeout", zscaler_aup_timeout)
        pulumi.set(__self__, "zscaler_authentication_required", zscaler_authentication_required)
        pulumi.set(__self__, "zscaler_caution_enabled", zscaler_caution_enabled)
        pulumi.set(__self__, "zscaler_firewall_enabled", zscaler_firewall_enabled)
        pulumi.set(__self__, "zscaler_ips_control_enabled", zscaler_ips_control_enabled)
        pulumi.set(__self__, "zscaler_location_name", zscaler_location_name)
        pulumi.set(__self__, "zscaler_location_name_variable", zscaler_location_name_variable)
        pulumi.set(__self__, "zscaler_primary_data_center", zscaler_primary_data_center)
        pulumi.set(__self__, "zscaler_primary_data_center_variable", zscaler_primary_data_center_variable)
        pulumi.set(__self__, "zscaler_secondary_data_center", zscaler_secondary_data_center)
        pulumi.set(__self__, "zscaler_secondary_data_center_variable", zscaler_secondary_data_center_variable)
        pulumi.set(__self__, "zscaler_surrogate_display_time_unit", zscaler_surrogate_display_time_unit)
        pulumi.set(__self__, "zscaler_surrogate_idle_time", zscaler_surrogate_idle_time)
        pulumi.set(__self__, "zscaler_surrogate_ip", zscaler_surrogate_ip)
        pulumi.set(__self__, "zscaler_surrogate_ip_enforce_for_known_browsers", zscaler_surrogate_ip_enforce_for_known_browsers)
        pulumi.set(__self__, "zscaler_surrogate_refresh_time", zscaler_surrogate_refresh_time)
        pulumi.set(__self__, "zscaler_surrogate_refresh_time_unit", zscaler_surrogate_refresh_time_unit)
        pulumi.set(__self__, "zscaler_xff_forward", zscaler_xff_forward)

    @_builtins.property
    @pulumi.getter(name="interfacePairs")
    def interface_pairs(self) -> Sequence['outputs.GetCiscoSecureInternetGatewayFeatureTemplateServiceInterfacePairResult']:
        """
        Interface Pair for active and backup
        """
        return pulumi.get(self, "interface_pairs")

    @_builtins.property
    @pulumi.getter
    def optional(self) -> _builtins.bool:
        """
        Indicates if list item is considered optional.
        """
        return pulumi.get(self, "optional")

    @_builtins.property
    @pulumi.getter(name="serviceType")
    def service_type(self) -> _builtins.str:
        """
        Service Type
        """
        return pulumi.get(self, "service_type")

    @_builtins.property
    @pulumi.getter(name="umbrellaPrimaryDataCenter")
    def umbrella_primary_data_center(self) -> _builtins.str:
        """
        Umbrella Primary Datacenter
        """
        return pulumi.get(self, "umbrella_primary_data_center")

    @_builtins.property
    @pulumi.getter(name="umbrellaPrimaryDataCenterVariable")
    def umbrella_primary_data_center_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "umbrella_primary_data_center_variable")

    @_builtins.property
    @pulumi.getter(name="umbrellaSecondaryDataCenter")
    def umbrella_secondary_data_center(self) -> _builtins.str:
        """
        Umbrella Secondary Datacenter
        """
        return pulumi.get(self, "umbrella_secondary_data_center")

    @_builtins.property
    @pulumi.getter(name="umbrellaSecondaryDataCenterVariable")
    def umbrella_secondary_data_center_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "umbrella_secondary_data_center_variable")

    @_builtins.property
    @pulumi.getter(name="zscalerAupBlockInternetUntilAccepted")
    def zscaler_aup_block_internet_until_accepted(self) -> _builtins.bool:
        """
        For first-time Acceptable User Policy behavior, block Internet access
        """
        return pulumi.get(self, "zscaler_aup_block_internet_until_accepted")

    @_builtins.property
    @pulumi.getter(name="zscalerAupEnabled")
    def zscaler_aup_enabled(self) -> _builtins.bool:
        """
        Enable Acceptable User Policy
        """
        return pulumi.get(self, "zscaler_aup_enabled")

    @_builtins.property
    @pulumi.getter(name="zscalerAupForceSslInspection")
    def zscaler_aup_force_ssl_inspection(self) -> _builtins.bool:
        """
        For first-time Acceptable User Policy behavior, force SSL inspection
        """
        return pulumi.get(self, "zscaler_aup_force_ssl_inspection")

    @_builtins.property
    @pulumi.getter(name="zscalerAupTimeout")
    def zscaler_aup_timeout(self) -> _builtins.int:
        """
        Custom Acceptable User Policy frequency in days
        """
        return pulumi.get(self, "zscaler_aup_timeout")

    @_builtins.property
    @pulumi.getter(name="zscalerAuthenticationRequired")
    def zscaler_authentication_required(self) -> _builtins.bool:
        """
        Enforce Authentication
        """
        return pulumi.get(self, "zscaler_authentication_required")

    @_builtins.property
    @pulumi.getter(name="zscalerCautionEnabled")
    def zscaler_caution_enabled(self) -> _builtins.bool:
        """
        Enable Caution
        """
        return pulumi.get(self, "zscaler_caution_enabled")

    @_builtins.property
    @pulumi.getter(name="zscalerFirewallEnabled")
    def zscaler_firewall_enabled(self) -> _builtins.bool:
        """
        Firewall enabled
        """
        return pulumi.get(self, "zscaler_firewall_enabled")

    @_builtins.property
    @pulumi.getter(name="zscalerIpsControlEnabled")
    def zscaler_ips_control_enabled(self) -> _builtins.bool:
        """
        Enable IPS Control
        """
        return pulumi.get(self, "zscaler_ips_control_enabled")

    @_builtins.property
    @pulumi.getter(name="zscalerLocationName")
    def zscaler_location_name(self) -> _builtins.str:
        """
        Zscaler location name (optional)
        """
        return pulumi.get(self, "zscaler_location_name")

    @_builtins.property
    @pulumi.getter(name="zscalerLocationNameVariable")
    def zscaler_location_name_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "zscaler_location_name_variable")

    @_builtins.property
    @pulumi.getter(name="zscalerPrimaryDataCenter")
    def zscaler_primary_data_center(self) -> _builtins.str:
        """
        Custom Primary Datacenter
        """
        return pulumi.get(self, "zscaler_primary_data_center")

    @_builtins.property
    @pulumi.getter(name="zscalerPrimaryDataCenterVariable")
    def zscaler_primary_data_center_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "zscaler_primary_data_center_variable")

    @_builtins.property
    @pulumi.getter(name="zscalerSecondaryDataCenter")
    def zscaler_secondary_data_center(self) -> _builtins.str:
        """
        Custom Secondary Datacenter
        """
        return pulumi.get(self, "zscaler_secondary_data_center")

    @_builtins.property
    @pulumi.getter(name="zscalerSecondaryDataCenterVariable")
    def zscaler_secondary_data_center_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "zscaler_secondary_data_center_variable")

    @_builtins.property
    @pulumi.getter(name="zscalerSurrogateDisplayTimeUnit")
    def zscaler_surrogate_display_time_unit(self) -> _builtins.str:
        """
        Display time unit
        """
        return pulumi.get(self, "zscaler_surrogate_display_time_unit")

    @_builtins.property
    @pulumi.getter(name="zscalerSurrogateIdleTime")
    def zscaler_surrogate_idle_time(self) -> _builtins.int:
        """
        Idle time to disassociation
        """
        return pulumi.get(self, "zscaler_surrogate_idle_time")

    @_builtins.property
    @pulumi.getter(name="zscalerSurrogateIp")
    def zscaler_surrogate_ip(self) -> _builtins.bool:
        """
        Enable Surrogate IP
        """
        return pulumi.get(self, "zscaler_surrogate_ip")

    @_builtins.property
    @pulumi.getter(name="zscalerSurrogateIpEnforceForKnownBrowsers")
    def zscaler_surrogate_ip_enforce_for_known_browsers(self) -> _builtins.bool:
        """
        Enforce Surrogate IP for known browsers
        """
        return pulumi.get(self, "zscaler_surrogate_ip_enforce_for_known_browsers")

    @_builtins.property
    @pulumi.getter(name="zscalerSurrogateRefreshTime")
    def zscaler_surrogate_refresh_time(self) -> _builtins.int:
        """
        Refresh time for re-validation of surrogacy in minutes
        """
        return pulumi.get(self, "zscaler_surrogate_refresh_time")

    @_builtins.property
    @pulumi.getter(name="zscalerSurrogateRefreshTimeUnit")
    def zscaler_surrogate_refresh_time_unit(self) -> _builtins.str:
        """
        Refresh Time unit
        """
        return pulumi.get(self, "zscaler_surrogate_refresh_time_unit")

    @_builtins.property
    @pulumi.getter(name="zscalerXffForward")
    def zscaler_xff_forward(self) -> _builtins.bool:
        """
        XFF forwarding enabled
        """
        return pulumi.get(self, "zscaler_xff_forward")


@pulumi.output_type
class GetCiscoSecureInternetGatewayFeatureTemplateServiceInterfacePairResult(dict):
    def __init__(__self__, *,
                 active_interface: _builtins.str,
                 active_interface_weight: _builtins.int,
                 backup_interface: _builtins.str,
                 backup_interface_weight: _builtins.int,
                 optional: _builtins.bool):
        """
        :param _builtins.str active_interface: Active Tunnel Interface for SIG
        :param _builtins.int active_interface_weight: Active Tunnel Interface Weight
        :param _builtins.str backup_interface: Backup Tunnel Interface for SIG
        :param _builtins.int backup_interface_weight: Backup Tunnel Interface Weight
        :param _builtins.bool optional: Indicates if list item is considered optional.
        """
        pulumi.set(__self__, "active_interface", active_interface)
        pulumi.set(__self__, "active_interface_weight", active_interface_weight)
        pulumi.set(__self__, "backup_interface", backup_interface)
        pulumi.set(__self__, "backup_interface_weight", backup_interface_weight)
        pulumi.set(__self__, "optional", optional)

    @_builtins.property
    @pulumi.getter(name="activeInterface")
    def active_interface(self) -> _builtins.str:
        """
        Active Tunnel Interface for SIG
        """
        return pulumi.get(self, "active_interface")

    @_builtins.property
    @pulumi.getter(name="activeInterfaceWeight")
    def active_interface_weight(self) -> _builtins.int:
        """
        Active Tunnel Interface Weight
        """
        return pulumi.get(self, "active_interface_weight")

    @_builtins.property
    @pulumi.getter(name="backupInterface")
    def backup_interface(self) -> _builtins.str:
        """
        Backup Tunnel Interface for SIG
        """
        return pulumi.get(self, "backup_interface")

    @_builtins.property
    @pulumi.getter(name="backupInterfaceWeight")
    def backup_interface_weight(self) -> _builtins.int:
        """
        Backup Tunnel Interface Weight
        """
        return pulumi.get(self, "backup_interface_weight")

    @_builtins.property
    @pulumi.getter
    def optional(self) -> _builtins.bool:
        """
        Indicates if list item is considered optional.
        """
        return pulumi.get(self, "optional")


@pulumi.output_type
class GetCiscoSecureInternetGatewayFeatureTemplateTrackerResult(dict):
    def __init__(__self__, *,
                 endpoint_api_url: _builtins.str,
                 endpoint_api_url_variable: _builtins.str,
                 interval: _builtins.int,
                 interval_variable: _builtins.str,
                 multiplier: _builtins.int,
                 multiplier_variable: _builtins.str,
                 name: _builtins.str,
                 name_variable: _builtins.str,
                 optional: _builtins.bool,
                 threshold: _builtins.int,
                 threshold_variable: _builtins.str,
                 tracker_type: _builtins.str):
        """
        :param _builtins.str endpoint_api_url: API url of endpoint
        :param _builtins.str endpoint_api_url_variable: Variable name
        :param _builtins.int interval: Probe interval \\n\\n seconds
        :param _builtins.str interval_variable: Variable name
        :param _builtins.int multiplier: Probe failure multiplier \\n\\n failed attempts
        :param _builtins.str multiplier_variable: Variable name
        :param _builtins.str name: Tracker name
        :param _builtins.str name_variable: Variable name
        :param _builtins.bool optional: Indicates if list item is considered optional.
        :param _builtins.int threshold: Probe Timeout threshold \\n\\n milliseconds
        :param _builtins.str threshold_variable: Variable name
        """
        pulumi.set(__self__, "endpoint_api_url", endpoint_api_url)
        pulumi.set(__self__, "endpoint_api_url_variable", endpoint_api_url_variable)
        pulumi.set(__self__, "interval", interval)
        pulumi.set(__self__, "interval_variable", interval_variable)
        pulumi.set(__self__, "multiplier", multiplier)
        pulumi.set(__self__, "multiplier_variable", multiplier_variable)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "name_variable", name_variable)
        pulumi.set(__self__, "optional", optional)
        pulumi.set(__self__, "threshold", threshold)
        pulumi.set(__self__, "threshold_variable", threshold_variable)
        pulumi.set(__self__, "tracker_type", tracker_type)

    @_builtins.property
    @pulumi.getter(name="endpointApiUrl")
    def endpoint_api_url(self) -> _builtins.str:
        """
        API url of endpoint
        """
        return pulumi.get(self, "endpoint_api_url")

    @_builtins.property
    @pulumi.getter(name="endpointApiUrlVariable")
    def endpoint_api_url_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "endpoint_api_url_variable")

    @_builtins.property
    @pulumi.getter
    def interval(self) -> _builtins.int:
        """
        Probe interval \\n\\n seconds
        """
        return pulumi.get(self, "interval")

    @_builtins.property
    @pulumi.getter(name="intervalVariable")
    def interval_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "interval_variable")

    @_builtins.property
    @pulumi.getter
    def multiplier(self) -> _builtins.int:
        """
        Probe failure multiplier \\n\\n failed attempts
        """
        return pulumi.get(self, "multiplier")

    @_builtins.property
    @pulumi.getter(name="multiplierVariable")
    def multiplier_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "multiplier_variable")

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        """
        Tracker name
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter(name="nameVariable")
    def name_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "name_variable")

    @_builtins.property
    @pulumi.getter
    def optional(self) -> _builtins.bool:
        """
        Indicates if list item is considered optional.
        """
        return pulumi.get(self, "optional")

    @_builtins.property
    @pulumi.getter
    def threshold(self) -> _builtins.int:
        """
        Probe Timeout threshold \\n\\n milliseconds
        """
        return pulumi.get(self, "threshold")

    @_builtins.property
    @pulumi.getter(name="thresholdVariable")
    def threshold_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "threshold_variable")

    @_builtins.property
    @pulumi.getter(name="trackerType")
    def tracker_type(self) -> _builtins.str:
        return pulumi.get(self, "tracker_type")


@pulumi.output_type
class GetCiscoSecurityFeatureTemplateKeyResult(dict):
    def __init__(__self__, *,
                 accept_ao_mismatch: _builtins.bool,
                 accept_ao_mismatch_variable: _builtins.str,
                 accept_lifetime_duration: _builtins.int,
                 accept_lifetime_duration_variable: _builtins.str,
                 accept_lifetime_end_time: _builtins.str,
                 accept_lifetime_end_time_format: _builtins.str,
                 accept_lifetime_infinite: _builtins.bool,
                 accept_lifetime_infinite_variable: _builtins.str,
                 accept_lifetime_local: _builtins.bool,
                 accept_lifetime_local_variable: _builtins.str,
                 accept_lifetime_start_time: _builtins.str,
                 chain_name: _builtins.str,
                 crypto_algorithm: _builtins.str,
                 id: _builtins.str,
                 include_tcp_options: _builtins.bool,
                 include_tcp_options_variable: _builtins.str,
                 key_string: _builtins.str,
                 key_string_variable: _builtins.str,
                 optional: _builtins.bool,
                 receive_id: _builtins.int,
                 receive_id_variable: _builtins.str,
                 send_id: _builtins.int,
                 send_id_variable: _builtins.str,
                 send_lifetime_duration: _builtins.int,
                 send_lifetime_duration_variable: _builtins.str,
                 send_lifetime_end_time: _builtins.str,
                 send_lifetime_end_time_format: _builtins.str,
                 send_lifetime_infinite: _builtins.bool,
                 send_lifetime_infinite_variable: _builtins.str,
                 send_lifetime_local: _builtins.bool,
                 send_lifetime_local_variable: _builtins.str,
                 send_lifetime_start_time: _builtins.str):
        """
        :param _builtins.bool accept_ao_mismatch: Configure Accept AO Mismatch
        :param _builtins.str accept_ao_mismatch_variable: Variable name
        :param _builtins.int accept_lifetime_duration: Configure Accept lifetime Duration
        :param _builtins.str accept_lifetime_duration_variable: Variable name
        :param _builtins.str accept_lifetime_end_time: Configure Key lifetime end time
        :param _builtins.str accept_lifetime_end_time_format: Configure Key lifetime end time
        :param _builtins.bool accept_lifetime_infinite: Configure Key lifetime end time
        :param _builtins.str accept_lifetime_infinite_variable: Variable name
        :param _builtins.bool accept_lifetime_local: Configure Accept Lifetime Local
        :param _builtins.str accept_lifetime_local_variable: Variable name
        :param _builtins.str accept_lifetime_start_time: Configure Key lifetime start time
        :param _builtins.str chain_name: Select the chain name
        :param _builtins.str crypto_algorithm: Crypto Algorithm
        :param _builtins.str id: Select the Key ID
        :param _builtins.bool include_tcp_options: Configure Include TCP Options
        :param _builtins.str include_tcp_options_variable: Variable name
        :param _builtins.str key_string: Specify the Key String
        :param _builtins.str key_string_variable: Variable name
        :param _builtins.bool optional: Indicates if list item is considered optional.
        :param _builtins.int receive_id: Specify the Receiver ID
        :param _builtins.str receive_id_variable: Variable name
        :param _builtins.int send_id: Specify the Send ID
        :param _builtins.str send_id_variable: Variable name
        :param _builtins.int send_lifetime_duration: Configure Send lifetime Duration
        :param _builtins.str send_lifetime_duration_variable: Variable name
        :param _builtins.str send_lifetime_end_time: Configure Key lifetime end time
        :param _builtins.str send_lifetime_end_time_format: Configure Key lifetime end time
        :param _builtins.bool send_lifetime_infinite: Configure Key lifetime end time
        :param _builtins.str send_lifetime_infinite_variable: Variable name
        :param _builtins.bool send_lifetime_local: Configure Send lifetime Local
        :param _builtins.str send_lifetime_local_variable: Variable name
        :param _builtins.str send_lifetime_start_time: Configure Key lifetime start time
        """
        pulumi.set(__self__, "accept_ao_mismatch", accept_ao_mismatch)
        pulumi.set(__self__, "accept_ao_mismatch_variable", accept_ao_mismatch_variable)
        pulumi.set(__self__, "accept_lifetime_duration", accept_lifetime_duration)
        pulumi.set(__self__, "accept_lifetime_duration_variable", accept_lifetime_duration_variable)
        pulumi.set(__self__, "accept_lifetime_end_time", accept_lifetime_end_time)
        pulumi.set(__self__, "accept_lifetime_end_time_format", accept_lifetime_end_time_format)
        pulumi.set(__self__, "accept_lifetime_infinite", accept_lifetime_infinite)
        pulumi.set(__self__, "accept_lifetime_infinite_variable", accept_lifetime_infinite_variable)
        pulumi.set(__self__, "accept_lifetime_local", accept_lifetime_local)
        pulumi.set(__self__, "accept_lifetime_local_variable", accept_lifetime_local_variable)
        pulumi.set(__self__, "accept_lifetime_start_time", accept_lifetime_start_time)
        pulumi.set(__self__, "chain_name", chain_name)
        pulumi.set(__self__, "crypto_algorithm", crypto_algorithm)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "include_tcp_options", include_tcp_options)
        pulumi.set(__self__, "include_tcp_options_variable", include_tcp_options_variable)
        pulumi.set(__self__, "key_string", key_string)
        pulumi.set(__self__, "key_string_variable", key_string_variable)
        pulumi.set(__self__, "optional", optional)
        pulumi.set(__self__, "receive_id", receive_id)
        pulumi.set(__self__, "receive_id_variable", receive_id_variable)
        pulumi.set(__self__, "send_id", send_id)
        pulumi.set(__self__, "send_id_variable", send_id_variable)
        pulumi.set(__self__, "send_lifetime_duration", send_lifetime_duration)
        pulumi.set(__self__, "send_lifetime_duration_variable", send_lifetime_duration_variable)
        pulumi.set(__self__, "send_lifetime_end_time", send_lifetime_end_time)
        pulumi.set(__self__, "send_lifetime_end_time_format", send_lifetime_end_time_format)
        pulumi.set(__self__, "send_lifetime_infinite", send_lifetime_infinite)
        pulumi.set(__self__, "send_lifetime_infinite_variable", send_lifetime_infinite_variable)
        pulumi.set(__self__, "send_lifetime_local", send_lifetime_local)
        pulumi.set(__self__, "send_lifetime_local_variable", send_lifetime_local_variable)
        pulumi.set(__self__, "send_lifetime_start_time", send_lifetime_start_time)

    @_builtins.property
    @pulumi.getter(name="acceptAoMismatch")
    def accept_ao_mismatch(self) -> _builtins.bool:
        """
        Configure Accept AO Mismatch
        """
        return pulumi.get(self, "accept_ao_mismatch")

    @_builtins.property
    @pulumi.getter(name="acceptAoMismatchVariable")
    def accept_ao_mismatch_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "accept_ao_mismatch_variable")

    @_builtins.property
    @pulumi.getter(name="acceptLifetimeDuration")
    def accept_lifetime_duration(self) -> _builtins.int:
        """
        Configure Accept lifetime Duration
        """
        return pulumi.get(self, "accept_lifetime_duration")

    @_builtins.property
    @pulumi.getter(name="acceptLifetimeDurationVariable")
    def accept_lifetime_duration_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "accept_lifetime_duration_variable")

    @_builtins.property
    @pulumi.getter(name="acceptLifetimeEndTime")
    def accept_lifetime_end_time(self) -> _builtins.str:
        """
        Configure Key lifetime end time
        """
        return pulumi.get(self, "accept_lifetime_end_time")

    @_builtins.property
    @pulumi.getter(name="acceptLifetimeEndTimeFormat")
    def accept_lifetime_end_time_format(self) -> _builtins.str:
        """
        Configure Key lifetime end time
        """
        return pulumi.get(self, "accept_lifetime_end_time_format")

    @_builtins.property
    @pulumi.getter(name="acceptLifetimeInfinite")
    def accept_lifetime_infinite(self) -> _builtins.bool:
        """
        Configure Key lifetime end time
        """
        return pulumi.get(self, "accept_lifetime_infinite")

    @_builtins.property
    @pulumi.getter(name="acceptLifetimeInfiniteVariable")
    def accept_lifetime_infinite_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "accept_lifetime_infinite_variable")

    @_builtins.property
    @pulumi.getter(name="acceptLifetimeLocal")
    def accept_lifetime_local(self) -> _builtins.bool:
        """
        Configure Accept Lifetime Local
        """
        return pulumi.get(self, "accept_lifetime_local")

    @_builtins.property
    @pulumi.getter(name="acceptLifetimeLocalVariable")
    def accept_lifetime_local_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "accept_lifetime_local_variable")

    @_builtins.property
    @pulumi.getter(name="acceptLifetimeStartTime")
    def accept_lifetime_start_time(self) -> _builtins.str:
        """
        Configure Key lifetime start time
        """
        return pulumi.get(self, "accept_lifetime_start_time")

    @_builtins.property
    @pulumi.getter(name="chainName")
    def chain_name(self) -> _builtins.str:
        """
        Select the chain name
        """
        return pulumi.get(self, "chain_name")

    @_builtins.property
    @pulumi.getter(name="cryptoAlgorithm")
    def crypto_algorithm(self) -> _builtins.str:
        """
        Crypto Algorithm
        """
        return pulumi.get(self, "crypto_algorithm")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        Select the Key ID
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter(name="includeTcpOptions")
    def include_tcp_options(self) -> _builtins.bool:
        """
        Configure Include TCP Options
        """
        return pulumi.get(self, "include_tcp_options")

    @_builtins.property
    @pulumi.getter(name="includeTcpOptionsVariable")
    def include_tcp_options_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "include_tcp_options_variable")

    @_builtins.property
    @pulumi.getter(name="keyString")
    def key_string(self) -> _builtins.str:
        """
        Specify the Key String
        """
        return pulumi.get(self, "key_string")

    @_builtins.property
    @pulumi.getter(name="keyStringVariable")
    def key_string_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "key_string_variable")

    @_builtins.property
    @pulumi.getter
    def optional(self) -> _builtins.bool:
        """
        Indicates if list item is considered optional.
        """
        return pulumi.get(self, "optional")

    @_builtins.property
    @pulumi.getter(name="receiveId")
    def receive_id(self) -> _builtins.int:
        """
        Specify the Receiver ID
        """
        return pulumi.get(self, "receive_id")

    @_builtins.property
    @pulumi.getter(name="receiveIdVariable")
    def receive_id_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "receive_id_variable")

    @_builtins.property
    @pulumi.getter(name="sendId")
    def send_id(self) -> _builtins.int:
        """
        Specify the Send ID
        """
        return pulumi.get(self, "send_id")

    @_builtins.property
    @pulumi.getter(name="sendIdVariable")
    def send_id_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "send_id_variable")

    @_builtins.property
    @pulumi.getter(name="sendLifetimeDuration")
    def send_lifetime_duration(self) -> _builtins.int:
        """
        Configure Send lifetime Duration
        """
        return pulumi.get(self, "send_lifetime_duration")

    @_builtins.property
    @pulumi.getter(name="sendLifetimeDurationVariable")
    def send_lifetime_duration_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "send_lifetime_duration_variable")

    @_builtins.property
    @pulumi.getter(name="sendLifetimeEndTime")
    def send_lifetime_end_time(self) -> _builtins.str:
        """
        Configure Key lifetime end time
        """
        return pulumi.get(self, "send_lifetime_end_time")

    @_builtins.property
    @pulumi.getter(name="sendLifetimeEndTimeFormat")
    def send_lifetime_end_time_format(self) -> _builtins.str:
        """
        Configure Key lifetime end time
        """
        return pulumi.get(self, "send_lifetime_end_time_format")

    @_builtins.property
    @pulumi.getter(name="sendLifetimeInfinite")
    def send_lifetime_infinite(self) -> _builtins.bool:
        """
        Configure Key lifetime end time
        """
        return pulumi.get(self, "send_lifetime_infinite")

    @_builtins.property
    @pulumi.getter(name="sendLifetimeInfiniteVariable")
    def send_lifetime_infinite_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "send_lifetime_infinite_variable")

    @_builtins.property
    @pulumi.getter(name="sendLifetimeLocal")
    def send_lifetime_local(self) -> _builtins.bool:
        """
        Configure Send lifetime Local
        """
        return pulumi.get(self, "send_lifetime_local")

    @_builtins.property
    @pulumi.getter(name="sendLifetimeLocalVariable")
    def send_lifetime_local_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "send_lifetime_local_variable")

    @_builtins.property
    @pulumi.getter(name="sendLifetimeStartTime")
    def send_lifetime_start_time(self) -> _builtins.str:
        """
        Configure Key lifetime start time
        """
        return pulumi.get(self, "send_lifetime_start_time")


@pulumi.output_type
class GetCiscoSecurityFeatureTemplateKeychainResult(dict):
    def __init__(__self__, *,
                 key_id: _builtins.int,
                 name: _builtins.str,
                 optional: _builtins.bool):
        """
        :param _builtins.int key_id: Specify the Key ID
        :param _builtins.str name: Specify the name of the Keychain
        :param _builtins.bool optional: Indicates if list item is considered optional.
        """
        pulumi.set(__self__, "key_id", key_id)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "optional", optional)

    @_builtins.property
    @pulumi.getter(name="keyId")
    def key_id(self) -> _builtins.int:
        """
        Specify the Key ID
        """
        return pulumi.get(self, "key_id")

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        """
        Specify the name of the Keychain
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def optional(self) -> _builtins.bool:
        """
        Indicates if list item is considered optional.
        """
        return pulumi.get(self, "optional")


@pulumi.output_type
class GetCiscoSnmpFeatureTemplateCommunityResult(dict):
    def __init__(__self__, *,
                 authorization: _builtins.str,
                 authorization_variable: _builtins.str,
                 name: _builtins.str,
                 optional: _builtins.bool,
                 view: _builtins.str,
                 view_variable: _builtins.str):
        """
        :param _builtins.str authorization: Configure access permissions
        :param _builtins.str authorization_variable: Variable name
        :param _builtins.str name: Set name of the SNMP community
        :param _builtins.bool optional: Indicates if list item is considered optional.
        :param _builtins.str view: Set name of the SNMP view
        :param _builtins.str view_variable: Variable name
        """
        pulumi.set(__self__, "authorization", authorization)
        pulumi.set(__self__, "authorization_variable", authorization_variable)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "optional", optional)
        pulumi.set(__self__, "view", view)
        pulumi.set(__self__, "view_variable", view_variable)

    @_builtins.property
    @pulumi.getter
    def authorization(self) -> _builtins.str:
        """
        Configure access permissions
        """
        return pulumi.get(self, "authorization")

    @_builtins.property
    @pulumi.getter(name="authorizationVariable")
    def authorization_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "authorization_variable")

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        """
        Set name of the SNMP community
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def optional(self) -> _builtins.bool:
        """
        Indicates if list item is considered optional.
        """
        return pulumi.get(self, "optional")

    @_builtins.property
    @pulumi.getter
    def view(self) -> _builtins.str:
        """
        Set name of the SNMP view
        """
        return pulumi.get(self, "view")

    @_builtins.property
    @pulumi.getter(name="viewVariable")
    def view_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "view_variable")


@pulumi.output_type
class GetCiscoSnmpFeatureTemplateGroupResult(dict):
    def __init__(__self__, *,
                 name: _builtins.str,
                 optional: _builtins.bool,
                 security_level: _builtins.str,
                 view: _builtins.str,
                 view_variable: _builtins.str):
        """
        :param _builtins.str name: Name of the SNMP group
        :param _builtins.bool optional: Indicates if list item is considered optional.
        :param _builtins.str security_level: Configure security level
        :param _builtins.str view: Name of the SNMP view
        :param _builtins.str view_variable: Variable name
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "optional", optional)
        pulumi.set(__self__, "security_level", security_level)
        pulumi.set(__self__, "view", view)
        pulumi.set(__self__, "view_variable", view_variable)

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        """
        Name of the SNMP group
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def optional(self) -> _builtins.bool:
        """
        Indicates if list item is considered optional.
        """
        return pulumi.get(self, "optional")

    @_builtins.property
    @pulumi.getter(name="securityLevel")
    def security_level(self) -> _builtins.str:
        """
        Configure security level
        """
        return pulumi.get(self, "security_level")

    @_builtins.property
    @pulumi.getter
    def view(self) -> _builtins.str:
        """
        Name of the SNMP view
        """
        return pulumi.get(self, "view")

    @_builtins.property
    @pulumi.getter(name="viewVariable")
    def view_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "view_variable")


@pulumi.output_type
class GetCiscoSnmpFeatureTemplateTrapTargetResult(dict):
    def __init__(__self__, *,
                 community_name: _builtins.str,
                 community_name_variable: _builtins.str,
                 ip: _builtins.str,
                 ip_variable: _builtins.str,
                 optional: _builtins.bool,
                 source_interface: _builtins.str,
                 source_interface_variable: _builtins.str,
                 udp_port: _builtins.int,
                 udp_port_variable: _builtins.str,
                 user: _builtins.str,
                 user_variable: _builtins.str,
                 vpn_id: _builtins.int,
                 vpn_id_variable: _builtins.str):
        """
        :param _builtins.str community_name: Set name of the SNMP community
        :param _builtins.str community_name_variable: Variable name
        :param _builtins.str ip: Set IPv4/IPv6 address of SNMP server
        :param _builtins.str ip_variable: Variable name
        :param _builtins.bool optional: Indicates if list item is considered optional.
        :param _builtins.str source_interface: Source interface for outgoing SNMP traps
        :param _builtins.str source_interface_variable: Variable name
        :param _builtins.int udp_port: Set UDP port number to connect to SNMP server
        :param _builtins.str udp_port_variable: Variable name
        :param _builtins.str user: Set name of the SNMP user
        :param _builtins.str user_variable: Variable name
        :param _builtins.int vpn_id: Set VPN in which SNMP server is located
        :param _builtins.str vpn_id_variable: Variable name
        """
        pulumi.set(__self__, "community_name", community_name)
        pulumi.set(__self__, "community_name_variable", community_name_variable)
        pulumi.set(__self__, "ip", ip)
        pulumi.set(__self__, "ip_variable", ip_variable)
        pulumi.set(__self__, "optional", optional)
        pulumi.set(__self__, "source_interface", source_interface)
        pulumi.set(__self__, "source_interface_variable", source_interface_variable)
        pulumi.set(__self__, "udp_port", udp_port)
        pulumi.set(__self__, "udp_port_variable", udp_port_variable)
        pulumi.set(__self__, "user", user)
        pulumi.set(__self__, "user_variable", user_variable)
        pulumi.set(__self__, "vpn_id", vpn_id)
        pulumi.set(__self__, "vpn_id_variable", vpn_id_variable)

    @_builtins.property
    @pulumi.getter(name="communityName")
    def community_name(self) -> _builtins.str:
        """
        Set name of the SNMP community
        """
        return pulumi.get(self, "community_name")

    @_builtins.property
    @pulumi.getter(name="communityNameVariable")
    def community_name_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "community_name_variable")

    @_builtins.property
    @pulumi.getter
    def ip(self) -> _builtins.str:
        """
        Set IPv4/IPv6 address of SNMP server
        """
        return pulumi.get(self, "ip")

    @_builtins.property
    @pulumi.getter(name="ipVariable")
    def ip_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "ip_variable")

    @_builtins.property
    @pulumi.getter
    def optional(self) -> _builtins.bool:
        """
        Indicates if list item is considered optional.
        """
        return pulumi.get(self, "optional")

    @_builtins.property
    @pulumi.getter(name="sourceInterface")
    def source_interface(self) -> _builtins.str:
        """
        Source interface for outgoing SNMP traps
        """
        return pulumi.get(self, "source_interface")

    @_builtins.property
    @pulumi.getter(name="sourceInterfaceVariable")
    def source_interface_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "source_interface_variable")

    @_builtins.property
    @pulumi.getter(name="udpPort")
    def udp_port(self) -> _builtins.int:
        """
        Set UDP port number to connect to SNMP server
        """
        return pulumi.get(self, "udp_port")

    @_builtins.property
    @pulumi.getter(name="udpPortVariable")
    def udp_port_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "udp_port_variable")

    @_builtins.property
    @pulumi.getter
    def user(self) -> _builtins.str:
        """
        Set name of the SNMP user
        """
        return pulumi.get(self, "user")

    @_builtins.property
    @pulumi.getter(name="userVariable")
    def user_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "user_variable")

    @_builtins.property
    @pulumi.getter(name="vpnId")
    def vpn_id(self) -> _builtins.int:
        """
        Set VPN in which SNMP server is located
        """
        return pulumi.get(self, "vpn_id")

    @_builtins.property
    @pulumi.getter(name="vpnIdVariable")
    def vpn_id_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "vpn_id_variable")


@pulumi.output_type
class GetCiscoSnmpFeatureTemplateUserResult(dict):
    def __init__(__self__, *,
                 authentication_password: _builtins.str,
                 authentication_password_variable: _builtins.str,
                 authentication_protocol: _builtins.str,
                 authentication_protocol_variable: _builtins.str,
                 group: _builtins.str,
                 group_variable: _builtins.str,
                 name: _builtins.str,
                 optional: _builtins.bool,
                 privacy_password: _builtins.str,
                 privacy_password_variable: _builtins.str,
                 privacy_protocol: _builtins.str,
                 privacy_protocol_variable: _builtins.str):
        """
        :param _builtins.str authentication_password: Specify authentication protocol password
        :param _builtins.str authentication_password_variable: Variable name
        :param _builtins.str authentication_protocol: Configure authentication protocol
        :param _builtins.str authentication_protocol_variable: Variable name
        :param _builtins.str group: Name of the SNMP group
        :param _builtins.str group_variable: Variable name
        :param _builtins.str name: Name of the SNMP user
        :param _builtins.bool optional: Indicates if list item is considered optional.
        :param _builtins.str privacy_password: Specify privacy protocol password
        :param _builtins.str privacy_password_variable: Variable name
        :param _builtins.str privacy_protocol: Configure privacy protocol
        :param _builtins.str privacy_protocol_variable: Variable name
        """
        pulumi.set(__self__, "authentication_password", authentication_password)
        pulumi.set(__self__, "authentication_password_variable", authentication_password_variable)
        pulumi.set(__self__, "authentication_protocol", authentication_protocol)
        pulumi.set(__self__, "authentication_protocol_variable", authentication_protocol_variable)
        pulumi.set(__self__, "group", group)
        pulumi.set(__self__, "group_variable", group_variable)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "optional", optional)
        pulumi.set(__self__, "privacy_password", privacy_password)
        pulumi.set(__self__, "privacy_password_variable", privacy_password_variable)
        pulumi.set(__self__, "privacy_protocol", privacy_protocol)
        pulumi.set(__self__, "privacy_protocol_variable", privacy_protocol_variable)

    @_builtins.property
    @pulumi.getter(name="authenticationPassword")
    def authentication_password(self) -> _builtins.str:
        """
        Specify authentication protocol password
        """
        return pulumi.get(self, "authentication_password")

    @_builtins.property
    @pulumi.getter(name="authenticationPasswordVariable")
    def authentication_password_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "authentication_password_variable")

    @_builtins.property
    @pulumi.getter(name="authenticationProtocol")
    def authentication_protocol(self) -> _builtins.str:
        """
        Configure authentication protocol
        """
        return pulumi.get(self, "authentication_protocol")

    @_builtins.property
    @pulumi.getter(name="authenticationProtocolVariable")
    def authentication_protocol_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "authentication_protocol_variable")

    @_builtins.property
    @pulumi.getter
    def group(self) -> _builtins.str:
        """
        Name of the SNMP group
        """
        return pulumi.get(self, "group")

    @_builtins.property
    @pulumi.getter(name="groupVariable")
    def group_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "group_variable")

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        """
        Name of the SNMP user
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def optional(self) -> _builtins.bool:
        """
        Indicates if list item is considered optional.
        """
        return pulumi.get(self, "optional")

    @_builtins.property
    @pulumi.getter(name="privacyPassword")
    def privacy_password(self) -> _builtins.str:
        """
        Specify privacy protocol password
        """
        return pulumi.get(self, "privacy_password")

    @_builtins.property
    @pulumi.getter(name="privacyPasswordVariable")
    def privacy_password_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "privacy_password_variable")

    @_builtins.property
    @pulumi.getter(name="privacyProtocol")
    def privacy_protocol(self) -> _builtins.str:
        """
        Configure privacy protocol
        """
        return pulumi.get(self, "privacy_protocol")

    @_builtins.property
    @pulumi.getter(name="privacyProtocolVariable")
    def privacy_protocol_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "privacy_protocol_variable")


@pulumi.output_type
class GetCiscoSnmpFeatureTemplateViewResult(dict):
    def __init__(__self__, *,
                 name: _builtins.str,
                 object_identifiers: Sequence['outputs.GetCiscoSnmpFeatureTemplateViewObjectIdentifierResult'],
                 optional: _builtins.bool):
        """
        :param _builtins.str name: Set the name of the SNMP view
        :param Sequence['GetCiscoSnmpFeatureTemplateViewObjectIdentifierArgs'] object_identifiers: Configure SNMP object identifier
        :param _builtins.bool optional: Indicates if list item is considered optional.
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "object_identifiers", object_identifiers)
        pulumi.set(__self__, "optional", optional)

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        """
        Set the name of the SNMP view
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter(name="objectIdentifiers")
    def object_identifiers(self) -> Sequence['outputs.GetCiscoSnmpFeatureTemplateViewObjectIdentifierResult']:
        """
        Configure SNMP object identifier
        """
        return pulumi.get(self, "object_identifiers")

    @_builtins.property
    @pulumi.getter
    def optional(self) -> _builtins.bool:
        """
        Indicates if list item is considered optional.
        """
        return pulumi.get(self, "optional")


@pulumi.output_type
class GetCiscoSnmpFeatureTemplateViewObjectIdentifierResult(dict):
    def __init__(__self__, *,
                 exclude: _builtins.bool,
                 exclude_variable: _builtins.str,
                 id: _builtins.str,
                 id_variable: _builtins.str,
                 optional: _builtins.bool):
        """
        :param _builtins.bool exclude: Exclude the OID
        :param _builtins.str exclude_variable: Variable name
        :param _builtins.str id: Configure identifier of subtree of MIB objects
        :param _builtins.str id_variable: Variable name
        :param _builtins.bool optional: Indicates if list item is considered optional.
        """
        pulumi.set(__self__, "exclude", exclude)
        pulumi.set(__self__, "exclude_variable", exclude_variable)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "id_variable", id_variable)
        pulumi.set(__self__, "optional", optional)

    @_builtins.property
    @pulumi.getter
    def exclude(self) -> _builtins.bool:
        """
        Exclude the OID
        """
        return pulumi.get(self, "exclude")

    @_builtins.property
    @pulumi.getter(name="excludeVariable")
    def exclude_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "exclude_variable")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        Configure identifier of subtree of MIB objects
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter(name="idVariable")
    def id_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "id_variable")

    @_builtins.property
    @pulumi.getter
    def optional(self) -> _builtins.bool:
        """
        Indicates if list item is considered optional.
        """
        return pulumi.get(self, "optional")


@pulumi.output_type
class GetCiscoSystemFeatureTemplateGeoFencingSmsPhoneNumberResult(dict):
    def __init__(__self__, *,
                 number: _builtins.str,
                 number_variable: _builtins.str,
                 optional: _builtins.bool):
        """
        :param _builtins.str number: Mobile number, ex: +1231234414
        :param _builtins.str number_variable: Variable name
        :param _builtins.bool optional: Indicates if list item is considered optional.
        """
        pulumi.set(__self__, "number", number)
        pulumi.set(__self__, "number_variable", number_variable)
        pulumi.set(__self__, "optional", optional)

    @_builtins.property
    @pulumi.getter
    def number(self) -> _builtins.str:
        """
        Mobile number, ex: +1231234414
        """
        return pulumi.get(self, "number")

    @_builtins.property
    @pulumi.getter(name="numberVariable")
    def number_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "number_variable")

    @_builtins.property
    @pulumi.getter
    def optional(self) -> _builtins.bool:
        """
        Indicates if list item is considered optional.
        """
        return pulumi.get(self, "optional")


@pulumi.output_type
class GetCiscoSystemFeatureTemplateObjectTrackerResult(dict):
    def __init__(__self__, *,
                 boolean: _builtins.str,
                 boolean_variable: _builtins.str,
                 group_tracks_ids: Sequence['outputs.GetCiscoSystemFeatureTemplateObjectTrackerGroupTracksIdResult'],
                 interface: _builtins.str,
                 interface_variable: _builtins.str,
                 ip: _builtins.str,
                 ip_variable: _builtins.str,
                 mask: _builtins.str,
                 mask_variable: _builtins.str,
                 object_number: _builtins.int,
                 object_number_variable: _builtins.str,
                 optional: _builtins.bool,
                 sig: _builtins.str,
                 sig_variable: _builtins.str,
                 vpn_id: _builtins.int):
        """
        :param _builtins.str boolean: Type of grouping to be performed for tracker group
        :param _builtins.str boolean_variable: Variable name
        :param Sequence['GetCiscoSystemFeatureTemplateObjectTrackerGroupTracksIdArgs'] group_tracks_ids: Tracks id in group configuration
        :param _builtins.str interface: interface name
        :param _builtins.str interface_variable: Variable name
        :param _builtins.str ip: IP address of route
        :param _builtins.str ip_variable: Variable name
        :param _builtins.str mask: Route Ip Mask
        :param _builtins.str mask_variable: Variable name
        :param _builtins.int object_number: Object tracker ID
        :param _builtins.str object_number_variable: Variable name
        :param _builtins.bool optional: Indicates if list item is considered optional.
        :param _builtins.str sig: service sig
        :param _builtins.str sig_variable: Variable name
        :param _builtins.int vpn_id: VPN
        """
        pulumi.set(__self__, "boolean", boolean)
        pulumi.set(__self__, "boolean_variable", boolean_variable)
        pulumi.set(__self__, "group_tracks_ids", group_tracks_ids)
        pulumi.set(__self__, "interface", interface)
        pulumi.set(__self__, "interface_variable", interface_variable)
        pulumi.set(__self__, "ip", ip)
        pulumi.set(__self__, "ip_variable", ip_variable)
        pulumi.set(__self__, "mask", mask)
        pulumi.set(__self__, "mask_variable", mask_variable)
        pulumi.set(__self__, "object_number", object_number)
        pulumi.set(__self__, "object_number_variable", object_number_variable)
        pulumi.set(__self__, "optional", optional)
        pulumi.set(__self__, "sig", sig)
        pulumi.set(__self__, "sig_variable", sig_variable)
        pulumi.set(__self__, "vpn_id", vpn_id)

    @_builtins.property
    @pulumi.getter
    def boolean(self) -> _builtins.str:
        """
        Type of grouping to be performed for tracker group
        """
        return pulumi.get(self, "boolean")

    @_builtins.property
    @pulumi.getter(name="booleanVariable")
    def boolean_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "boolean_variable")

    @_builtins.property
    @pulumi.getter(name="groupTracksIds")
    def group_tracks_ids(self) -> Sequence['outputs.GetCiscoSystemFeatureTemplateObjectTrackerGroupTracksIdResult']:
        """
        Tracks id in group configuration
        """
        return pulumi.get(self, "group_tracks_ids")

    @_builtins.property
    @pulumi.getter
    def interface(self) -> _builtins.str:
        """
        interface name
        """
        return pulumi.get(self, "interface")

    @_builtins.property
    @pulumi.getter(name="interfaceVariable")
    def interface_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "interface_variable")

    @_builtins.property
    @pulumi.getter
    def ip(self) -> _builtins.str:
        """
        IP address of route
        """
        return pulumi.get(self, "ip")

    @_builtins.property
    @pulumi.getter(name="ipVariable")
    def ip_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "ip_variable")

    @_builtins.property
    @pulumi.getter
    def mask(self) -> _builtins.str:
        """
        Route Ip Mask
        """
        return pulumi.get(self, "mask")

    @_builtins.property
    @pulumi.getter(name="maskVariable")
    def mask_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "mask_variable")

    @_builtins.property
    @pulumi.getter(name="objectNumber")
    def object_number(self) -> _builtins.int:
        """
        Object tracker ID
        """
        return pulumi.get(self, "object_number")

    @_builtins.property
    @pulumi.getter(name="objectNumberVariable")
    def object_number_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "object_number_variable")

    @_builtins.property
    @pulumi.getter
    def optional(self) -> _builtins.bool:
        """
        Indicates if list item is considered optional.
        """
        return pulumi.get(self, "optional")

    @_builtins.property
    @pulumi.getter
    def sig(self) -> _builtins.str:
        """
        service sig
        """
        return pulumi.get(self, "sig")

    @_builtins.property
    @pulumi.getter(name="sigVariable")
    def sig_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "sig_variable")

    @_builtins.property
    @pulumi.getter(name="vpnId")
    def vpn_id(self) -> _builtins.int:
        """
        VPN
        """
        return pulumi.get(self, "vpn_id")


@pulumi.output_type
class GetCiscoSystemFeatureTemplateObjectTrackerGroupTracksIdResult(dict):
    def __init__(__self__, *,
                 optional: _builtins.bool,
                 track_id: _builtins.int,
                 track_id_variable: _builtins.str):
        """
        :param _builtins.bool optional: Indicates if list item is considered optional.
        :param _builtins.int track_id: Track id
        :param _builtins.str track_id_variable: Variable name
        """
        pulumi.set(__self__, "optional", optional)
        pulumi.set(__self__, "track_id", track_id)
        pulumi.set(__self__, "track_id_variable", track_id_variable)

    @_builtins.property
    @pulumi.getter
    def optional(self) -> _builtins.bool:
        """
        Indicates if list item is considered optional.
        """
        return pulumi.get(self, "optional")

    @_builtins.property
    @pulumi.getter(name="trackId")
    def track_id(self) -> _builtins.int:
        """
        Track id
        """
        return pulumi.get(self, "track_id")

    @_builtins.property
    @pulumi.getter(name="trackIdVariable")
    def track_id_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "track_id_variable")


@pulumi.output_type
class GetCiscoSystemFeatureTemplateTrackerResult(dict):
    def __init__(__self__, *,
                 boolean: _builtins.str,
                 boolean_variable: _builtins.str,
                 elements: Sequence[_builtins.str],
                 elements_variable: _builtins.str,
                 endpoint_api_url: _builtins.str,
                 endpoint_api_url_variable: _builtins.str,
                 endpoint_dns_name: _builtins.str,
                 endpoint_dns_name_variable: _builtins.str,
                 endpoint_ip: _builtins.str,
                 endpoint_ip_variable: _builtins.str,
                 interval: _builtins.int,
                 interval_variable: _builtins.str,
                 multiplier: _builtins.int,
                 multiplier_variable: _builtins.str,
                 name: _builtins.str,
                 name_variable: _builtins.str,
                 optional: _builtins.bool,
                 threshold: _builtins.int,
                 threshold_variable: _builtins.str,
                 type: _builtins.str,
                 type_variable: _builtins.str):
        """
        :param _builtins.str boolean: Type of grouping to be performed for tracker group
        :param _builtins.str boolean_variable: Variable name
        :param Sequence[_builtins.str] elements: Tracker member names separated by space
        :param _builtins.str elements_variable: Variable name
        :param _builtins.str endpoint_api_url: API url of endpoint
        :param _builtins.str endpoint_api_url_variable: Variable name
        :param _builtins.str endpoint_dns_name: DNS name of endpoint
        :param _builtins.str endpoint_dns_name_variable: Variable name
        :param _builtins.str endpoint_ip: IP address of endpoint
        :param _builtins.str endpoint_ip_variable: Variable name
        :param _builtins.int interval: Probe interval \\n\\n seconds
        :param _builtins.str interval_variable: Variable name
        :param _builtins.int multiplier: Probe failure multiplier \\n\\n failed attempts
        :param _builtins.str multiplier_variable: Variable name
        :param _builtins.str name: Tracker name
        :param _builtins.str name_variable: Variable name
        :param _builtins.bool optional: Indicates if list item is considered optional.
        :param _builtins.int threshold: Probe Timeout threshold \\n\\n milliseconds
        :param _builtins.str threshold_variable: Variable name
        :param _builtins.str type: Default(Interface)
        :param _builtins.str type_variable: Variable name
        """
        pulumi.set(__self__, "boolean", boolean)
        pulumi.set(__self__, "boolean_variable", boolean_variable)
        pulumi.set(__self__, "elements", elements)
        pulumi.set(__self__, "elements_variable", elements_variable)
        pulumi.set(__self__, "endpoint_api_url", endpoint_api_url)
        pulumi.set(__self__, "endpoint_api_url_variable", endpoint_api_url_variable)
        pulumi.set(__self__, "endpoint_dns_name", endpoint_dns_name)
        pulumi.set(__self__, "endpoint_dns_name_variable", endpoint_dns_name_variable)
        pulumi.set(__self__, "endpoint_ip", endpoint_ip)
        pulumi.set(__self__, "endpoint_ip_variable", endpoint_ip_variable)
        pulumi.set(__self__, "interval", interval)
        pulumi.set(__self__, "interval_variable", interval_variable)
        pulumi.set(__self__, "multiplier", multiplier)
        pulumi.set(__self__, "multiplier_variable", multiplier_variable)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "name_variable", name_variable)
        pulumi.set(__self__, "optional", optional)
        pulumi.set(__self__, "threshold", threshold)
        pulumi.set(__self__, "threshold_variable", threshold_variable)
        pulumi.set(__self__, "type", type)
        pulumi.set(__self__, "type_variable", type_variable)

    @_builtins.property
    @pulumi.getter
    def boolean(self) -> _builtins.str:
        """
        Type of grouping to be performed for tracker group
        """
        return pulumi.get(self, "boolean")

    @_builtins.property
    @pulumi.getter(name="booleanVariable")
    def boolean_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "boolean_variable")

    @_builtins.property
    @pulumi.getter
    def elements(self) -> Sequence[_builtins.str]:
        """
        Tracker member names separated by space
        """
        return pulumi.get(self, "elements")

    @_builtins.property
    @pulumi.getter(name="elementsVariable")
    def elements_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "elements_variable")

    @_builtins.property
    @pulumi.getter(name="endpointApiUrl")
    def endpoint_api_url(self) -> _builtins.str:
        """
        API url of endpoint
        """
        return pulumi.get(self, "endpoint_api_url")

    @_builtins.property
    @pulumi.getter(name="endpointApiUrlVariable")
    def endpoint_api_url_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "endpoint_api_url_variable")

    @_builtins.property
    @pulumi.getter(name="endpointDnsName")
    def endpoint_dns_name(self) -> _builtins.str:
        """
        DNS name of endpoint
        """
        return pulumi.get(self, "endpoint_dns_name")

    @_builtins.property
    @pulumi.getter(name="endpointDnsNameVariable")
    def endpoint_dns_name_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "endpoint_dns_name_variable")

    @_builtins.property
    @pulumi.getter(name="endpointIp")
    def endpoint_ip(self) -> _builtins.str:
        """
        IP address of endpoint
        """
        return pulumi.get(self, "endpoint_ip")

    @_builtins.property
    @pulumi.getter(name="endpointIpVariable")
    def endpoint_ip_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "endpoint_ip_variable")

    @_builtins.property
    @pulumi.getter
    def interval(self) -> _builtins.int:
        """
        Probe interval \\n\\n seconds
        """
        return pulumi.get(self, "interval")

    @_builtins.property
    @pulumi.getter(name="intervalVariable")
    def interval_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "interval_variable")

    @_builtins.property
    @pulumi.getter
    def multiplier(self) -> _builtins.int:
        """
        Probe failure multiplier \\n\\n failed attempts
        """
        return pulumi.get(self, "multiplier")

    @_builtins.property
    @pulumi.getter(name="multiplierVariable")
    def multiplier_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "multiplier_variable")

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        """
        Tracker name
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter(name="nameVariable")
    def name_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "name_variable")

    @_builtins.property
    @pulumi.getter
    def optional(self) -> _builtins.bool:
        """
        Indicates if list item is considered optional.
        """
        return pulumi.get(self, "optional")

    @_builtins.property
    @pulumi.getter
    def threshold(self) -> _builtins.int:
        """
        Probe Timeout threshold \\n\\n milliseconds
        """
        return pulumi.get(self, "threshold")

    @_builtins.property
    @pulumi.getter(name="thresholdVariable")
    def threshold_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "threshold_variable")

    @_builtins.property
    @pulumi.getter
    def type(self) -> _builtins.str:
        """
        Default(Interface)
        """
        return pulumi.get(self, "type")

    @_builtins.property
    @pulumi.getter(name="typeVariable")
    def type_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "type_variable")


@pulumi.output_type
class GetCiscoThousandeyesFeatureTemplateVirtualApplicationResult(dict):
    def __init__(__self__, *,
                 application_type: _builtins.str,
                 instance_id: _builtins.str,
                 optional: _builtins.bool,
                 te_account_group_token: _builtins.str,
                 te_account_group_token_variable: _builtins.str,
                 te_agent_ip: _builtins.str,
                 te_agent_ip_variable: _builtins.str,
                 te_default_gateway: _builtins.str,
                 te_default_gateway_variable: _builtins.str,
                 te_hostname: _builtins.str,
                 te_hostname_variable: _builtins.str,
                 te_name_server: _builtins.str,
                 te_name_server_variable: _builtins.str,
                 te_pac_url: _builtins.str,
                 te_pac_url_variable: _builtins.str,
                 te_proxy_host: _builtins.str,
                 te_proxy_host_variable: _builtins.str,
                 te_proxy_port: _builtins.int,
                 te_proxy_port_variable: _builtins.str,
                 te_vpn: _builtins.int,
                 te_vpn_variable: _builtins.str,
                 te_web_proxy_type: _builtins.str):
        """
        :param _builtins.str application_type: List of Virtual applications
        :param _builtins.str instance_id: List of Virtual applications
        :param _builtins.bool optional: Indicates if list item is considered optional.
        :param _builtins.str te_account_group_token: Set the Account Group Token
        :param _builtins.str te_account_group_token_variable: Variable name
        :param _builtins.str te_agent_ip: Set the Agent IP Address
        :param _builtins.str te_agent_ip_variable: Variable name
        :param _builtins.str te_default_gateway: Set the Agent default gateway
        :param _builtins.str te_default_gateway_variable: Variable name
        :param _builtins.str te_hostname: Set the host name
        :param _builtins.str te_hostname_variable: Variable name
        :param _builtins.str te_name_server: Set the name server
        :param _builtins.str te_name_server_variable: Variable name
        :param _builtins.str te_pac_url: PAC URL
        :param _builtins.str te_pac_url_variable: Variable name
        :param _builtins.str te_proxy_host: Set the proxy host
        :param _builtins.str te_proxy_host_variable: Variable name
        :param _builtins.int te_proxy_port: Set the proxy port
        :param _builtins.str te_proxy_port_variable: Variable name
        :param _builtins.int te_vpn: VPN number
        :param _builtins.str te_vpn_variable: Variable name
        :param _builtins.str te_web_proxy_type: Web Proxy Type
        """
        pulumi.set(__self__, "application_type", application_type)
        pulumi.set(__self__, "instance_id", instance_id)
        pulumi.set(__self__, "optional", optional)
        pulumi.set(__self__, "te_account_group_token", te_account_group_token)
        pulumi.set(__self__, "te_account_group_token_variable", te_account_group_token_variable)
        pulumi.set(__self__, "te_agent_ip", te_agent_ip)
        pulumi.set(__self__, "te_agent_ip_variable", te_agent_ip_variable)
        pulumi.set(__self__, "te_default_gateway", te_default_gateway)
        pulumi.set(__self__, "te_default_gateway_variable", te_default_gateway_variable)
        pulumi.set(__self__, "te_hostname", te_hostname)
        pulumi.set(__self__, "te_hostname_variable", te_hostname_variable)
        pulumi.set(__self__, "te_name_server", te_name_server)
        pulumi.set(__self__, "te_name_server_variable", te_name_server_variable)
        pulumi.set(__self__, "te_pac_url", te_pac_url)
        pulumi.set(__self__, "te_pac_url_variable", te_pac_url_variable)
        pulumi.set(__self__, "te_proxy_host", te_proxy_host)
        pulumi.set(__self__, "te_proxy_host_variable", te_proxy_host_variable)
        pulumi.set(__self__, "te_proxy_port", te_proxy_port)
        pulumi.set(__self__, "te_proxy_port_variable", te_proxy_port_variable)
        pulumi.set(__self__, "te_vpn", te_vpn)
        pulumi.set(__self__, "te_vpn_variable", te_vpn_variable)
        pulumi.set(__self__, "te_web_proxy_type", te_web_proxy_type)

    @_builtins.property
    @pulumi.getter(name="applicationType")
    def application_type(self) -> _builtins.str:
        """
        List of Virtual applications
        """
        return pulumi.get(self, "application_type")

    @_builtins.property
    @pulumi.getter(name="instanceId")
    def instance_id(self) -> _builtins.str:
        """
        List of Virtual applications
        """
        return pulumi.get(self, "instance_id")

    @_builtins.property
    @pulumi.getter
    def optional(self) -> _builtins.bool:
        """
        Indicates if list item is considered optional.
        """
        return pulumi.get(self, "optional")

    @_builtins.property
    @pulumi.getter(name="teAccountGroupToken")
    def te_account_group_token(self) -> _builtins.str:
        """
        Set the Account Group Token
        """
        return pulumi.get(self, "te_account_group_token")

    @_builtins.property
    @pulumi.getter(name="teAccountGroupTokenVariable")
    def te_account_group_token_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "te_account_group_token_variable")

    @_builtins.property
    @pulumi.getter(name="teAgentIp")
    def te_agent_ip(self) -> _builtins.str:
        """
        Set the Agent IP Address
        """
        return pulumi.get(self, "te_agent_ip")

    @_builtins.property
    @pulumi.getter(name="teAgentIpVariable")
    def te_agent_ip_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "te_agent_ip_variable")

    @_builtins.property
    @pulumi.getter(name="teDefaultGateway")
    def te_default_gateway(self) -> _builtins.str:
        """
        Set the Agent default gateway
        """
        return pulumi.get(self, "te_default_gateway")

    @_builtins.property
    @pulumi.getter(name="teDefaultGatewayVariable")
    def te_default_gateway_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "te_default_gateway_variable")

    @_builtins.property
    @pulumi.getter(name="teHostname")
    def te_hostname(self) -> _builtins.str:
        """
        Set the host name
        """
        return pulumi.get(self, "te_hostname")

    @_builtins.property
    @pulumi.getter(name="teHostnameVariable")
    def te_hostname_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "te_hostname_variable")

    @_builtins.property
    @pulumi.getter(name="teNameServer")
    def te_name_server(self) -> _builtins.str:
        """
        Set the name server
        """
        return pulumi.get(self, "te_name_server")

    @_builtins.property
    @pulumi.getter(name="teNameServerVariable")
    def te_name_server_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "te_name_server_variable")

    @_builtins.property
    @pulumi.getter(name="tePacUrl")
    def te_pac_url(self) -> _builtins.str:
        """
        PAC URL
        """
        return pulumi.get(self, "te_pac_url")

    @_builtins.property
    @pulumi.getter(name="tePacUrlVariable")
    def te_pac_url_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "te_pac_url_variable")

    @_builtins.property
    @pulumi.getter(name="teProxyHost")
    def te_proxy_host(self) -> _builtins.str:
        """
        Set the proxy host
        """
        return pulumi.get(self, "te_proxy_host")

    @_builtins.property
    @pulumi.getter(name="teProxyHostVariable")
    def te_proxy_host_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "te_proxy_host_variable")

    @_builtins.property
    @pulumi.getter(name="teProxyPort")
    def te_proxy_port(self) -> _builtins.int:
        """
        Set the proxy port
        """
        return pulumi.get(self, "te_proxy_port")

    @_builtins.property
    @pulumi.getter(name="teProxyPortVariable")
    def te_proxy_port_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "te_proxy_port_variable")

    @_builtins.property
    @pulumi.getter(name="teVpn")
    def te_vpn(self) -> _builtins.int:
        """
        VPN number
        """
        return pulumi.get(self, "te_vpn")

    @_builtins.property
    @pulumi.getter(name="teVpnVariable")
    def te_vpn_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "te_vpn_variable")

    @_builtins.property
    @pulumi.getter(name="teWebProxyType")
    def te_web_proxy_type(self) -> _builtins.str:
        """
        Web Proxy Type
        """
        return pulumi.get(self, "te_web_proxy_type")


@pulumi.output_type
class GetCiscoTrustsecFeatureTemplateSxpConnectionResult(dict):
    def __init__(__self__, *,
                 maximum_hold_time: _builtins.int,
                 maximum_hold_time_variable: _builtins.str,
                 minimum_hold_time: _builtins.int,
                 minimum_hold_time_variable: _builtins.str,
                 mode: _builtins.str,
                 mode_type: _builtins.str,
                 optional: _builtins.bool,
                 peer_ip: _builtins.str,
                 preshared_key: _builtins.str,
                 source_ip: _builtins.str,
                 source_ip_variable: _builtins.str,
                 vpn_id: _builtins.int,
                 vpn_id_variable: _builtins.str):
        """
        :param _builtins.int maximum_hold_time: Configure Connection Maximum hold time \\n\\n
        :param _builtins.str maximum_hold_time_variable: Variable name
        :param _builtins.int minimum_hold_time: Configure Connection Minimum hold time \\n\\n
        :param _builtins.str minimum_hold_time_variable: Variable name
        :param _builtins.str mode: Define Mode of connection
        :param _builtins.str mode_type: Define Role of a device \\n\\n
        :param _builtins.bool optional: Indicates if list item is considered optional.
        :param _builtins.str peer_ip: Configure SXP Peer IP address (IPv4)
        :param _builtins.str preshared_key: Define Preshared Key type
        :param _builtins.str source_ip: Configure SXP Source IP address (IPv4)
        :param _builtins.str source_ip_variable: Variable name
        :param _builtins.int vpn_id: Configure Connection VPN (VRF) ID
        :param _builtins.str vpn_id_variable: Variable name
        """
        pulumi.set(__self__, "maximum_hold_time", maximum_hold_time)
        pulumi.set(__self__, "maximum_hold_time_variable", maximum_hold_time_variable)
        pulumi.set(__self__, "minimum_hold_time", minimum_hold_time)
        pulumi.set(__self__, "minimum_hold_time_variable", minimum_hold_time_variable)
        pulumi.set(__self__, "mode", mode)
        pulumi.set(__self__, "mode_type", mode_type)
        pulumi.set(__self__, "optional", optional)
        pulumi.set(__self__, "peer_ip", peer_ip)
        pulumi.set(__self__, "preshared_key", preshared_key)
        pulumi.set(__self__, "source_ip", source_ip)
        pulumi.set(__self__, "source_ip_variable", source_ip_variable)
        pulumi.set(__self__, "vpn_id", vpn_id)
        pulumi.set(__self__, "vpn_id_variable", vpn_id_variable)

    @_builtins.property
    @pulumi.getter(name="maximumHoldTime")
    def maximum_hold_time(self) -> _builtins.int:
        """
        Configure Connection Maximum hold time \\n\\n
        """
        return pulumi.get(self, "maximum_hold_time")

    @_builtins.property
    @pulumi.getter(name="maximumHoldTimeVariable")
    def maximum_hold_time_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "maximum_hold_time_variable")

    @_builtins.property
    @pulumi.getter(name="minimumHoldTime")
    def minimum_hold_time(self) -> _builtins.int:
        """
        Configure Connection Minimum hold time \\n\\n
        """
        return pulumi.get(self, "minimum_hold_time")

    @_builtins.property
    @pulumi.getter(name="minimumHoldTimeVariable")
    def minimum_hold_time_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "minimum_hold_time_variable")

    @_builtins.property
    @pulumi.getter
    def mode(self) -> _builtins.str:
        """
        Define Mode of connection
        """
        return pulumi.get(self, "mode")

    @_builtins.property
    @pulumi.getter(name="modeType")
    def mode_type(self) -> _builtins.str:
        """
        Define Role of a device \\n\\n
        """
        return pulumi.get(self, "mode_type")

    @_builtins.property
    @pulumi.getter
    def optional(self) -> _builtins.bool:
        """
        Indicates if list item is considered optional.
        """
        return pulumi.get(self, "optional")

    @_builtins.property
    @pulumi.getter(name="peerIp")
    def peer_ip(self) -> _builtins.str:
        """
        Configure SXP Peer IP address (IPv4)
        """
        return pulumi.get(self, "peer_ip")

    @_builtins.property
    @pulumi.getter(name="presharedKey")
    def preshared_key(self) -> _builtins.str:
        """
        Define Preshared Key type
        """
        return pulumi.get(self, "preshared_key")

    @_builtins.property
    @pulumi.getter(name="sourceIp")
    def source_ip(self) -> _builtins.str:
        """
        Configure SXP Source IP address (IPv4)
        """
        return pulumi.get(self, "source_ip")

    @_builtins.property
    @pulumi.getter(name="sourceIpVariable")
    def source_ip_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "source_ip_variable")

    @_builtins.property
    @pulumi.getter(name="vpnId")
    def vpn_id(self) -> _builtins.int:
        """
        Configure Connection VPN (VRF) ID
        """
        return pulumi.get(self, "vpn_id")

    @_builtins.property
    @pulumi.getter(name="vpnIdVariable")
    def vpn_id_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "vpn_id_variable")


@pulumi.output_type
class GetCiscoVpnFeatureTemplateDnsHostResult(dict):
    def __init__(__self__, *,
                 hostname: _builtins.str,
                 hostname_variable: _builtins.str,
                 ip_variable: _builtins.str,
                 ips: Sequence[_builtins.str],
                 optional: _builtins.bool):
        """
        :param _builtins.str hostname: Hostname
        :param _builtins.str hostname_variable: Variable name
        :param _builtins.str ip_variable: Variable name
        :param Sequence[_builtins.str] ips: List of IP
        :param _builtins.bool optional: Indicates if list item is considered optional.
        """
        pulumi.set(__self__, "hostname", hostname)
        pulumi.set(__self__, "hostname_variable", hostname_variable)
        pulumi.set(__self__, "ip_variable", ip_variable)
        pulumi.set(__self__, "ips", ips)
        pulumi.set(__self__, "optional", optional)

    @_builtins.property
    @pulumi.getter
    def hostname(self) -> _builtins.str:
        """
        Hostname
        """
        return pulumi.get(self, "hostname")

    @_builtins.property
    @pulumi.getter(name="hostnameVariable")
    def hostname_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "hostname_variable")

    @_builtins.property
    @pulumi.getter(name="ipVariable")
    def ip_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "ip_variable")

    @_builtins.property
    @pulumi.getter
    def ips(self) -> Sequence[_builtins.str]:
        """
        List of IP
        """
        return pulumi.get(self, "ips")

    @_builtins.property
    @pulumi.getter
    def optional(self) -> _builtins.bool:
        """
        Indicates if list item is considered optional.
        """
        return pulumi.get(self, "optional")


@pulumi.output_type
class GetCiscoVpnFeatureTemplateDnsIpv4ServerResult(dict):
    def __init__(__self__, *,
                 address: _builtins.str,
                 address_variable: _builtins.str,
                 optional: _builtins.bool,
                 role: _builtins.str,
                 role_variable: _builtins.str):
        """
        :param _builtins.str address: DNS Address
        :param _builtins.str address_variable: Variable name
        :param _builtins.bool optional: Indicates if list item is considered optional.
        :param _builtins.str role: Role
        :param _builtins.str role_variable: Variable name
        """
        pulumi.set(__self__, "address", address)
        pulumi.set(__self__, "address_variable", address_variable)
        pulumi.set(__self__, "optional", optional)
        pulumi.set(__self__, "role", role)
        pulumi.set(__self__, "role_variable", role_variable)

    @_builtins.property
    @pulumi.getter
    def address(self) -> _builtins.str:
        """
        DNS Address
        """
        return pulumi.get(self, "address")

    @_builtins.property
    @pulumi.getter(name="addressVariable")
    def address_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "address_variable")

    @_builtins.property
    @pulumi.getter
    def optional(self) -> _builtins.bool:
        """
        Indicates if list item is considered optional.
        """
        return pulumi.get(self, "optional")

    @_builtins.property
    @pulumi.getter
    def role(self) -> _builtins.str:
        """
        Role
        """
        return pulumi.get(self, "role")

    @_builtins.property
    @pulumi.getter(name="roleVariable")
    def role_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "role_variable")


@pulumi.output_type
class GetCiscoVpnFeatureTemplateDnsIpv6ServerResult(dict):
    def __init__(__self__, *,
                 address: _builtins.str,
                 optional: _builtins.bool,
                 role: _builtins.str,
                 role_variable: _builtins.str):
        """
        :param _builtins.str address: DNS Address
        :param _builtins.bool optional: Indicates if list item is considered optional.
        :param _builtins.str role: Role
        :param _builtins.str role_variable: Variable name
        """
        pulumi.set(__self__, "address", address)
        pulumi.set(__self__, "optional", optional)
        pulumi.set(__self__, "role", role)
        pulumi.set(__self__, "role_variable", role_variable)

    @_builtins.property
    @pulumi.getter
    def address(self) -> _builtins.str:
        """
        DNS Address
        """
        return pulumi.get(self, "address")

    @_builtins.property
    @pulumi.getter
    def optional(self) -> _builtins.bool:
        """
        Indicates if list item is considered optional.
        """
        return pulumi.get(self, "optional")

    @_builtins.property
    @pulumi.getter
    def role(self) -> _builtins.str:
        """
        Role
        """
        return pulumi.get(self, "role")

    @_builtins.property
    @pulumi.getter(name="roleVariable")
    def role_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "role_variable")


@pulumi.output_type
class GetCiscoVpnFeatureTemplateIpv4StaticGreRouteResult(dict):
    def __init__(__self__, *,
                 interfaces: Sequence[_builtins.str],
                 interfaces_variable: _builtins.str,
                 optional: _builtins.bool,
                 prefix: _builtins.str,
                 prefix_variable: _builtins.str,
                 vpn_id: _builtins.int):
        """
        :param Sequence[_builtins.str] interfaces: List of GRE Interfaces
        :param _builtins.str interfaces_variable: Variable name
        :param _builtins.bool optional: Indicates if list item is considered optional.
        :param _builtins.str prefix: Prefix
        :param _builtins.str prefix_variable: Variable name
        :param _builtins.int vpn_id: Destination VPN to resolve the prefix
        """
        pulumi.set(__self__, "interfaces", interfaces)
        pulumi.set(__self__, "interfaces_variable", interfaces_variable)
        pulumi.set(__self__, "optional", optional)
        pulumi.set(__self__, "prefix", prefix)
        pulumi.set(__self__, "prefix_variable", prefix_variable)
        pulumi.set(__self__, "vpn_id", vpn_id)

    @_builtins.property
    @pulumi.getter
    def interfaces(self) -> Sequence[_builtins.str]:
        """
        List of GRE Interfaces
        """
        return pulumi.get(self, "interfaces")

    @_builtins.property
    @pulumi.getter(name="interfacesVariable")
    def interfaces_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "interfaces_variable")

    @_builtins.property
    @pulumi.getter
    def optional(self) -> _builtins.bool:
        """
        Indicates if list item is considered optional.
        """
        return pulumi.get(self, "optional")

    @_builtins.property
    @pulumi.getter
    def prefix(self) -> _builtins.str:
        """
        Prefix
        """
        return pulumi.get(self, "prefix")

    @_builtins.property
    @pulumi.getter(name="prefixVariable")
    def prefix_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "prefix_variable")

    @_builtins.property
    @pulumi.getter(name="vpnId")
    def vpn_id(self) -> _builtins.int:
        """
        Destination VPN to resolve the prefix
        """
        return pulumi.get(self, "vpn_id")


@pulumi.output_type
class GetCiscoVpnFeatureTemplateIpv4StaticIpsecRouteResult(dict):
    def __init__(__self__, *,
                 interfaces: Sequence[_builtins.str],
                 interfaces_variable: _builtins.str,
                 optional: _builtins.bool,
                 prefix: _builtins.str,
                 prefix_variable: _builtins.str,
                 vpn_id: _builtins.int):
        """
        :param Sequence[_builtins.str] interfaces: List of IPSEC Interfaces (Separated by commas)
        :param _builtins.str interfaces_variable: Variable name
        :param _builtins.bool optional: Indicates if list item is considered optional.
        :param _builtins.str prefix: Prefix
        :param _builtins.str prefix_variable: Variable name
        :param _builtins.int vpn_id: Destination VPN to resolve the prefix
        """
        pulumi.set(__self__, "interfaces", interfaces)
        pulumi.set(__self__, "interfaces_variable", interfaces_variable)
        pulumi.set(__self__, "optional", optional)
        pulumi.set(__self__, "prefix", prefix)
        pulumi.set(__self__, "prefix_variable", prefix_variable)
        pulumi.set(__self__, "vpn_id", vpn_id)

    @_builtins.property
    @pulumi.getter
    def interfaces(self) -> Sequence[_builtins.str]:
        """
        List of IPSEC Interfaces (Separated by commas)
        """
        return pulumi.get(self, "interfaces")

    @_builtins.property
    @pulumi.getter(name="interfacesVariable")
    def interfaces_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "interfaces_variable")

    @_builtins.property
    @pulumi.getter
    def optional(self) -> _builtins.bool:
        """
        Indicates if list item is considered optional.
        """
        return pulumi.get(self, "optional")

    @_builtins.property
    @pulumi.getter
    def prefix(self) -> _builtins.str:
        """
        Prefix
        """
        return pulumi.get(self, "prefix")

    @_builtins.property
    @pulumi.getter(name="prefixVariable")
    def prefix_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "prefix_variable")

    @_builtins.property
    @pulumi.getter(name="vpnId")
    def vpn_id(self) -> _builtins.int:
        """
        Destination VPN to resolve the prefix
        """
        return pulumi.get(self, "vpn_id")


@pulumi.output_type
class GetCiscoVpnFeatureTemplateIpv4StaticRouteResult(dict):
    def __init__(__self__, *,
                 dhcp: _builtins.bool,
                 dhcp_variable: _builtins.str,
                 distance: _builtins.int,
                 distance_variable: _builtins.str,
                 next_hops: Sequence['outputs.GetCiscoVpnFeatureTemplateIpv4StaticRouteNextHopResult'],
                 null0: _builtins.bool,
                 null0_variable: _builtins.str,
                 optional: _builtins.bool,
                 prefix: _builtins.str,
                 prefix_variable: _builtins.str,
                 track_next_hops: Sequence['outputs.GetCiscoVpnFeatureTemplateIpv4StaticRouteTrackNextHopResult'],
                 vpn_id: _builtins.int,
                 vpn_id_variable: _builtins.str):
        """
        :param _builtins.bool dhcp: Default Gateway obtained from DHCP
        :param _builtins.str dhcp_variable: Variable name
        :param _builtins.int distance: Administrative distance
        :param _builtins.str distance_variable: Variable name
        :param Sequence['GetCiscoVpnFeatureTemplateIpv4StaticRouteNextHopArgs'] next_hops: IP gateway address
        :param _builtins.bool null0: null0
        :param _builtins.str null0_variable: Variable name
        :param _builtins.bool optional: Indicates if list item is considered optional.
        :param _builtins.str prefix: Prefix
        :param _builtins.str prefix_variable: Variable name
        :param Sequence['GetCiscoVpnFeatureTemplateIpv4StaticRouteTrackNextHopArgs'] track_next_hops: IP gateway address
        :param _builtins.int vpn_id: Destination VPN(!=0 or !=512) to resolve the prefix
        :param _builtins.str vpn_id_variable: Variable name
        """
        pulumi.set(__self__, "dhcp", dhcp)
        pulumi.set(__self__, "dhcp_variable", dhcp_variable)
        pulumi.set(__self__, "distance", distance)
        pulumi.set(__self__, "distance_variable", distance_variable)
        pulumi.set(__self__, "next_hops", next_hops)
        pulumi.set(__self__, "null0", null0)
        pulumi.set(__self__, "null0_variable", null0_variable)
        pulumi.set(__self__, "optional", optional)
        pulumi.set(__self__, "prefix", prefix)
        pulumi.set(__self__, "prefix_variable", prefix_variable)
        pulumi.set(__self__, "track_next_hops", track_next_hops)
        pulumi.set(__self__, "vpn_id", vpn_id)
        pulumi.set(__self__, "vpn_id_variable", vpn_id_variable)

    @_builtins.property
    @pulumi.getter
    def dhcp(self) -> _builtins.bool:
        """
        Default Gateway obtained from DHCP
        """
        return pulumi.get(self, "dhcp")

    @_builtins.property
    @pulumi.getter(name="dhcpVariable")
    def dhcp_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "dhcp_variable")

    @_builtins.property
    @pulumi.getter
    def distance(self) -> _builtins.int:
        """
        Administrative distance
        """
        return pulumi.get(self, "distance")

    @_builtins.property
    @pulumi.getter(name="distanceVariable")
    def distance_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "distance_variable")

    @_builtins.property
    @pulumi.getter(name="nextHops")
    def next_hops(self) -> Sequence['outputs.GetCiscoVpnFeatureTemplateIpv4StaticRouteNextHopResult']:
        """
        IP gateway address
        """
        return pulumi.get(self, "next_hops")

    @_builtins.property
    @pulumi.getter
    def null0(self) -> _builtins.bool:
        """
        null0
        """
        return pulumi.get(self, "null0")

    @_builtins.property
    @pulumi.getter(name="null0Variable")
    def null0_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "null0_variable")

    @_builtins.property
    @pulumi.getter
    def optional(self) -> _builtins.bool:
        """
        Indicates if list item is considered optional.
        """
        return pulumi.get(self, "optional")

    @_builtins.property
    @pulumi.getter
    def prefix(self) -> _builtins.str:
        """
        Prefix
        """
        return pulumi.get(self, "prefix")

    @_builtins.property
    @pulumi.getter(name="prefixVariable")
    def prefix_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "prefix_variable")

    @_builtins.property
    @pulumi.getter(name="trackNextHops")
    def track_next_hops(self) -> Sequence['outputs.GetCiscoVpnFeatureTemplateIpv4StaticRouteTrackNextHopResult']:
        """
        IP gateway address
        """
        return pulumi.get(self, "track_next_hops")

    @_builtins.property
    @pulumi.getter(name="vpnId")
    def vpn_id(self) -> _builtins.int:
        """
        Destination VPN(!=0 or !=512) to resolve the prefix
        """
        return pulumi.get(self, "vpn_id")

    @_builtins.property
    @pulumi.getter(name="vpnIdVariable")
    def vpn_id_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "vpn_id_variable")


@pulumi.output_type
class GetCiscoVpnFeatureTemplateIpv4StaticRouteNextHopResult(dict):
    def __init__(__self__, *,
                 address: _builtins.str,
                 address_variable: _builtins.str,
                 distance: _builtins.int,
                 distance_variable: _builtins.str,
                 optional: _builtins.bool):
        """
        :param _builtins.str address: IP Address
        :param _builtins.str address_variable: Variable name
        :param _builtins.int distance: Administrative distance
        :param _builtins.str distance_variable: Variable name
        :param _builtins.bool optional: Indicates if list item is considered optional.
        """
        pulumi.set(__self__, "address", address)
        pulumi.set(__self__, "address_variable", address_variable)
        pulumi.set(__self__, "distance", distance)
        pulumi.set(__self__, "distance_variable", distance_variable)
        pulumi.set(__self__, "optional", optional)

    @_builtins.property
    @pulumi.getter
    def address(self) -> _builtins.str:
        """
        IP Address
        """
        return pulumi.get(self, "address")

    @_builtins.property
    @pulumi.getter(name="addressVariable")
    def address_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "address_variable")

    @_builtins.property
    @pulumi.getter
    def distance(self) -> _builtins.int:
        """
        Administrative distance
        """
        return pulumi.get(self, "distance")

    @_builtins.property
    @pulumi.getter(name="distanceVariable")
    def distance_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "distance_variable")

    @_builtins.property
    @pulumi.getter
    def optional(self) -> _builtins.bool:
        """
        Indicates if list item is considered optional.
        """
        return pulumi.get(self, "optional")


@pulumi.output_type
class GetCiscoVpnFeatureTemplateIpv4StaticRouteTrackNextHopResult(dict):
    def __init__(__self__, *,
                 address: _builtins.str,
                 address_variable: _builtins.str,
                 distance: _builtins.int,
                 distance_variable: _builtins.str,
                 optional: _builtins.bool,
                 tracker: _builtins.str,
                 tracker_variable: _builtins.str):
        """
        :param _builtins.str address: IP Address
        :param _builtins.str address_variable: Variable name
        :param _builtins.int distance: Administrative distance
        :param _builtins.str distance_variable: Variable name
        :param _builtins.bool optional: Indicates if list item is considered optional.
        :param _builtins.str tracker: Static route tracker
        :param _builtins.str tracker_variable: Variable name
        """
        pulumi.set(__self__, "address", address)
        pulumi.set(__self__, "address_variable", address_variable)
        pulumi.set(__self__, "distance", distance)
        pulumi.set(__self__, "distance_variable", distance_variable)
        pulumi.set(__self__, "optional", optional)
        pulumi.set(__self__, "tracker", tracker)
        pulumi.set(__self__, "tracker_variable", tracker_variable)

    @_builtins.property
    @pulumi.getter
    def address(self) -> _builtins.str:
        """
        IP Address
        """
        return pulumi.get(self, "address")

    @_builtins.property
    @pulumi.getter(name="addressVariable")
    def address_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "address_variable")

    @_builtins.property
    @pulumi.getter
    def distance(self) -> _builtins.int:
        """
        Administrative distance
        """
        return pulumi.get(self, "distance")

    @_builtins.property
    @pulumi.getter(name="distanceVariable")
    def distance_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "distance_variable")

    @_builtins.property
    @pulumi.getter
    def optional(self) -> _builtins.bool:
        """
        Indicates if list item is considered optional.
        """
        return pulumi.get(self, "optional")

    @_builtins.property
    @pulumi.getter
    def tracker(self) -> _builtins.str:
        """
        Static route tracker
        """
        return pulumi.get(self, "tracker")

    @_builtins.property
    @pulumi.getter(name="trackerVariable")
    def tracker_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "tracker_variable")


@pulumi.output_type
class GetCiscoVpnFeatureTemplateIpv4StaticServiceRouteResult(dict):
    def __init__(__self__, *,
                 optional: _builtins.bool,
                 prefix: _builtins.str,
                 prefix_variable: _builtins.str,
                 service: _builtins.str,
                 vpn_id: _builtins.int):
        """
        :param _builtins.bool optional: Indicates if list item is considered optional.
        :param _builtins.str prefix: Prefix
        :param _builtins.str prefix_variable: Variable name
        :param _builtins.str service: Service
        :param _builtins.int vpn_id: Destination VPN to resolve the prefix
        """
        pulumi.set(__self__, "optional", optional)
        pulumi.set(__self__, "prefix", prefix)
        pulumi.set(__self__, "prefix_variable", prefix_variable)
        pulumi.set(__self__, "service", service)
        pulumi.set(__self__, "vpn_id", vpn_id)

    @_builtins.property
    @pulumi.getter
    def optional(self) -> _builtins.bool:
        """
        Indicates if list item is considered optional.
        """
        return pulumi.get(self, "optional")

    @_builtins.property
    @pulumi.getter
    def prefix(self) -> _builtins.str:
        """
        Prefix
        """
        return pulumi.get(self, "prefix")

    @_builtins.property
    @pulumi.getter(name="prefixVariable")
    def prefix_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "prefix_variable")

    @_builtins.property
    @pulumi.getter
    def service(self) -> _builtins.str:
        """
        Service
        """
        return pulumi.get(self, "service")

    @_builtins.property
    @pulumi.getter(name="vpnId")
    def vpn_id(self) -> _builtins.int:
        """
        Destination VPN to resolve the prefix
        """
        return pulumi.get(self, "vpn_id")


@pulumi.output_type
class GetCiscoVpnFeatureTemplateIpv6StaticRouteResult(dict):
    def __init__(__self__, *,
                 nat: _builtins.str,
                 nat_variable: _builtins.str,
                 next_hops: Sequence['outputs.GetCiscoVpnFeatureTemplateIpv6StaticRouteNextHopResult'],
                 null0: _builtins.bool,
                 null0_variable: _builtins.str,
                 optional: _builtins.bool,
                 prefix: _builtins.str,
                 prefix_variable: _builtins.str,
                 vpn_id: _builtins.int,
                 vpn_id_variable: _builtins.str):
        """
        :param _builtins.str nat: NAT
        :param _builtins.str nat_variable: Variable name
        :param Sequence['GetCiscoVpnFeatureTemplateIpv6StaticRouteNextHopArgs'] next_hops: IP gateway address
        :param _builtins.bool null0: null0
        :param _builtins.str null0_variable: Variable name
        :param _builtins.bool optional: Indicates if list item is considered optional.
        :param _builtins.str prefix: Prefix
        :param _builtins.str prefix_variable: Variable name
        :param _builtins.int vpn_id: Destination VPN(!=0 or !=512) to resolve the prefix
        :param _builtins.str vpn_id_variable: Variable name
        """
        pulumi.set(__self__, "nat", nat)
        pulumi.set(__self__, "nat_variable", nat_variable)
        pulumi.set(__self__, "next_hops", next_hops)
        pulumi.set(__self__, "null0", null0)
        pulumi.set(__self__, "null0_variable", null0_variable)
        pulumi.set(__self__, "optional", optional)
        pulumi.set(__self__, "prefix", prefix)
        pulumi.set(__self__, "prefix_variable", prefix_variable)
        pulumi.set(__self__, "vpn_id", vpn_id)
        pulumi.set(__self__, "vpn_id_variable", vpn_id_variable)

    @_builtins.property
    @pulumi.getter
    def nat(self) -> _builtins.str:
        """
        NAT
        """
        return pulumi.get(self, "nat")

    @_builtins.property
    @pulumi.getter(name="natVariable")
    def nat_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "nat_variable")

    @_builtins.property
    @pulumi.getter(name="nextHops")
    def next_hops(self) -> Sequence['outputs.GetCiscoVpnFeatureTemplateIpv6StaticRouteNextHopResult']:
        """
        IP gateway address
        """
        return pulumi.get(self, "next_hops")

    @_builtins.property
    @pulumi.getter
    def null0(self) -> _builtins.bool:
        """
        null0
        """
        return pulumi.get(self, "null0")

    @_builtins.property
    @pulumi.getter(name="null0Variable")
    def null0_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "null0_variable")

    @_builtins.property
    @pulumi.getter
    def optional(self) -> _builtins.bool:
        """
        Indicates if list item is considered optional.
        """
        return pulumi.get(self, "optional")

    @_builtins.property
    @pulumi.getter
    def prefix(self) -> _builtins.str:
        """
        Prefix
        """
        return pulumi.get(self, "prefix")

    @_builtins.property
    @pulumi.getter(name="prefixVariable")
    def prefix_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "prefix_variable")

    @_builtins.property
    @pulumi.getter(name="vpnId")
    def vpn_id(self) -> _builtins.int:
        """
        Destination VPN(!=0 or !=512) to resolve the prefix
        """
        return pulumi.get(self, "vpn_id")

    @_builtins.property
    @pulumi.getter(name="vpnIdVariable")
    def vpn_id_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "vpn_id_variable")


@pulumi.output_type
class GetCiscoVpnFeatureTemplateIpv6StaticRouteNextHopResult(dict):
    def __init__(__self__, *,
                 address: _builtins.str,
                 address_variable: _builtins.str,
                 distance: _builtins.int,
                 distance_variable: _builtins.str,
                 optional: _builtins.bool):
        """
        :param _builtins.str address: IP Address
        :param _builtins.str address_variable: Variable name
        :param _builtins.int distance: Administrative distance
        :param _builtins.str distance_variable: Variable name
        :param _builtins.bool optional: Indicates if list item is considered optional.
        """
        pulumi.set(__self__, "address", address)
        pulumi.set(__self__, "address_variable", address_variable)
        pulumi.set(__self__, "distance", distance)
        pulumi.set(__self__, "distance_variable", distance_variable)
        pulumi.set(__self__, "optional", optional)

    @_builtins.property
    @pulumi.getter
    def address(self) -> _builtins.str:
        """
        IP Address
        """
        return pulumi.get(self, "address")

    @_builtins.property
    @pulumi.getter(name="addressVariable")
    def address_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "address_variable")

    @_builtins.property
    @pulumi.getter
    def distance(self) -> _builtins.int:
        """
        Administrative distance
        """
        return pulumi.get(self, "distance")

    @_builtins.property
    @pulumi.getter(name="distanceVariable")
    def distance_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "distance_variable")

    @_builtins.property
    @pulumi.getter
    def optional(self) -> _builtins.bool:
        """
        Indicates if list item is considered optional.
        """
        return pulumi.get(self, "optional")


@pulumi.output_type
class GetCiscoVpnFeatureTemplateNat64PoolResult(dict):
    def __init__(__self__, *,
                 end_address: _builtins.str,
                 end_address_variable: _builtins.str,
                 leak_from_global: _builtins.bool,
                 leak_from_global_protocol: _builtins.str,
                 leak_to_global: _builtins.bool,
                 name: _builtins.str,
                 optional: _builtins.bool,
                 overload: _builtins.bool,
                 overload_variable: _builtins.str,
                 start_address: _builtins.str,
                 start_address_variable: _builtins.str):
        """
        :param _builtins.str end_address: Ending IP address of NAT pool range
        :param _builtins.str end_address_variable: Variable name
        :param _builtins.bool leak_from_global: Enable Route Leaking from Global VPN to this Service VPN
        :param _builtins.str leak_from_global_protocol: Select protocol for route leaking
        :param _builtins.bool leak_to_global: Enable Route Leaking from this Service VPN to Global VPN
        :param _builtins.str name: NAT64 Pool name
        :param _builtins.bool optional: Indicates if list item is considered optional.
        :param _builtins.bool overload: NAT 64 Overload Option
        :param _builtins.str overload_variable: Variable name
        :param _builtins.str start_address: Starting IP address of NAT pool range
        :param _builtins.str start_address_variable: Variable name
        """
        pulumi.set(__self__, "end_address", end_address)
        pulumi.set(__self__, "end_address_variable", end_address_variable)
        pulumi.set(__self__, "leak_from_global", leak_from_global)
        pulumi.set(__self__, "leak_from_global_protocol", leak_from_global_protocol)
        pulumi.set(__self__, "leak_to_global", leak_to_global)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "optional", optional)
        pulumi.set(__self__, "overload", overload)
        pulumi.set(__self__, "overload_variable", overload_variable)
        pulumi.set(__self__, "start_address", start_address)
        pulumi.set(__self__, "start_address_variable", start_address_variable)

    @_builtins.property
    @pulumi.getter(name="endAddress")
    def end_address(self) -> _builtins.str:
        """
        Ending IP address of NAT pool range
        """
        return pulumi.get(self, "end_address")

    @_builtins.property
    @pulumi.getter(name="endAddressVariable")
    def end_address_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "end_address_variable")

    @_builtins.property
    @pulumi.getter(name="leakFromGlobal")
    def leak_from_global(self) -> _builtins.bool:
        """
        Enable Route Leaking from Global VPN to this Service VPN
        """
        return pulumi.get(self, "leak_from_global")

    @_builtins.property
    @pulumi.getter(name="leakFromGlobalProtocol")
    def leak_from_global_protocol(self) -> _builtins.str:
        """
        Select protocol for route leaking
        """
        return pulumi.get(self, "leak_from_global_protocol")

    @_builtins.property
    @pulumi.getter(name="leakToGlobal")
    def leak_to_global(self) -> _builtins.bool:
        """
        Enable Route Leaking from this Service VPN to Global VPN
        """
        return pulumi.get(self, "leak_to_global")

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        """
        NAT64 Pool name
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def optional(self) -> _builtins.bool:
        """
        Indicates if list item is considered optional.
        """
        return pulumi.get(self, "optional")

    @_builtins.property
    @pulumi.getter
    def overload(self) -> _builtins.bool:
        """
        NAT 64 Overload Option
        """
        return pulumi.get(self, "overload")

    @_builtins.property
    @pulumi.getter(name="overloadVariable")
    def overload_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "overload_variable")

    @_builtins.property
    @pulumi.getter(name="startAddress")
    def start_address(self) -> _builtins.str:
        """
        Starting IP address of NAT pool range
        """
        return pulumi.get(self, "start_address")

    @_builtins.property
    @pulumi.getter(name="startAddressVariable")
    def start_address_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "start_address_variable")


@pulumi.output_type
class GetCiscoVpnFeatureTemplateNatPoolResult(dict):
    def __init__(__self__, *,
                 direction: _builtins.str,
                 direction_variable: _builtins.str,
                 name: _builtins.int,
                 name_variable: _builtins.str,
                 optional: _builtins.bool,
                 overload: _builtins.bool,
                 overload_variable: _builtins.str,
                 prefix_length: _builtins.int,
                 prefix_length_variable: _builtins.str,
                 range_end: _builtins.str,
                 range_end_variable: _builtins.str,
                 range_start: _builtins.str,
                 range_start_variable: _builtins.str,
                 tracker_id: _builtins.int,
                 tracker_id_variable: _builtins.str):
        """
        :param _builtins.str direction: Direction of NAT translation
        :param _builtins.str direction_variable: Variable name
        :param _builtins.int name: NAT Pool Name, natpool1..31
        :param _builtins.str name_variable: Variable name
        :param _builtins.bool optional: Indicates if list item is considered optional.
        :param _builtins.bool overload: Enable port translation(PAT)
        :param _builtins.str overload_variable: Variable name
        :param _builtins.int prefix_length: Ending IP address of NAT Pool Prefix Length
        :param _builtins.str prefix_length_variable: Variable name
        :param _builtins.str range_end: Ending IP address of NAT pool range
        :param _builtins.str range_end_variable: Variable name
        :param _builtins.str range_start: Starting IP address of NAT pool range
        :param _builtins.str range_start_variable: Variable name
        :param _builtins.int tracker_id: Add Object/Object Group Tracker
        :param _builtins.str tracker_id_variable: Variable name
        """
        pulumi.set(__self__, "direction", direction)
        pulumi.set(__self__, "direction_variable", direction_variable)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "name_variable", name_variable)
        pulumi.set(__self__, "optional", optional)
        pulumi.set(__self__, "overload", overload)
        pulumi.set(__self__, "overload_variable", overload_variable)
        pulumi.set(__self__, "prefix_length", prefix_length)
        pulumi.set(__self__, "prefix_length_variable", prefix_length_variable)
        pulumi.set(__self__, "range_end", range_end)
        pulumi.set(__self__, "range_end_variable", range_end_variable)
        pulumi.set(__self__, "range_start", range_start)
        pulumi.set(__self__, "range_start_variable", range_start_variable)
        pulumi.set(__self__, "tracker_id", tracker_id)
        pulumi.set(__self__, "tracker_id_variable", tracker_id_variable)

    @_builtins.property
    @pulumi.getter
    def direction(self) -> _builtins.str:
        """
        Direction of NAT translation
        """
        return pulumi.get(self, "direction")

    @_builtins.property
    @pulumi.getter(name="directionVariable")
    def direction_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "direction_variable")

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.int:
        """
        NAT Pool Name, natpool1..31
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter(name="nameVariable")
    def name_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "name_variable")

    @_builtins.property
    @pulumi.getter
    def optional(self) -> _builtins.bool:
        """
        Indicates if list item is considered optional.
        """
        return pulumi.get(self, "optional")

    @_builtins.property
    @pulumi.getter
    def overload(self) -> _builtins.bool:
        """
        Enable port translation(PAT)
        """
        return pulumi.get(self, "overload")

    @_builtins.property
    @pulumi.getter(name="overloadVariable")
    def overload_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "overload_variable")

    @_builtins.property
    @pulumi.getter(name="prefixLength")
    def prefix_length(self) -> _builtins.int:
        """
        Ending IP address of NAT Pool Prefix Length
        """
        return pulumi.get(self, "prefix_length")

    @_builtins.property
    @pulumi.getter(name="prefixLengthVariable")
    def prefix_length_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "prefix_length_variable")

    @_builtins.property
    @pulumi.getter(name="rangeEnd")
    def range_end(self) -> _builtins.str:
        """
        Ending IP address of NAT pool range
        """
        return pulumi.get(self, "range_end")

    @_builtins.property
    @pulumi.getter(name="rangeEndVariable")
    def range_end_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "range_end_variable")

    @_builtins.property
    @pulumi.getter(name="rangeStart")
    def range_start(self) -> _builtins.str:
        """
        Starting IP address of NAT pool range
        """
        return pulumi.get(self, "range_start")

    @_builtins.property
    @pulumi.getter(name="rangeStartVariable")
    def range_start_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "range_start_variable")

    @_builtins.property
    @pulumi.getter(name="trackerId")
    def tracker_id(self) -> _builtins.int:
        """
        Add Object/Object Group Tracker
        """
        return pulumi.get(self, "tracker_id")

    @_builtins.property
    @pulumi.getter(name="trackerIdVariable")
    def tracker_id_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "tracker_id_variable")


@pulumi.output_type
class GetCiscoVpnFeatureTemplateOmpAdvertiseIpv4RouteResult(dict):
    def __init__(__self__, *,
                 optional: _builtins.bool,
                 prefixes: Sequence['outputs.GetCiscoVpnFeatureTemplateOmpAdvertiseIpv4RoutePrefixResult'],
                 protocol: _builtins.str,
                 protocol_sub_type_variable: _builtins.str,
                 protocol_sub_types: Sequence[_builtins.str],
                 protocol_variable: _builtins.str,
                 route_policy: _builtins.str,
                 route_policy_variable: _builtins.str):
        """
        :param _builtins.bool optional: Indicates if list item is considered optional.
        :param _builtins.str protocol: Advertised routes protocol
        :param _builtins.str protocol_sub_type_variable: Variable name
        :param _builtins.str protocol_variable: Variable name
        :param _builtins.str route_policy: Set Route Policy to OMP
        :param _builtins.str route_policy_variable: Variable name
        """
        pulumi.set(__self__, "optional", optional)
        pulumi.set(__self__, "prefixes", prefixes)
        pulumi.set(__self__, "protocol", protocol)
        pulumi.set(__self__, "protocol_sub_type_variable", protocol_sub_type_variable)
        pulumi.set(__self__, "protocol_sub_types", protocol_sub_types)
        pulumi.set(__self__, "protocol_variable", protocol_variable)
        pulumi.set(__self__, "route_policy", route_policy)
        pulumi.set(__self__, "route_policy_variable", route_policy_variable)

    @_builtins.property
    @pulumi.getter
    def optional(self) -> _builtins.bool:
        """
        Indicates if list item is considered optional.
        """
        return pulumi.get(self, "optional")

    @_builtins.property
    @pulumi.getter
    def prefixes(self) -> Sequence['outputs.GetCiscoVpnFeatureTemplateOmpAdvertiseIpv4RoutePrefixResult']:
        return pulumi.get(self, "prefixes")

    @_builtins.property
    @pulumi.getter
    def protocol(self) -> _builtins.str:
        """
        Advertised routes protocol
        """
        return pulumi.get(self, "protocol")

    @_builtins.property
    @pulumi.getter(name="protocolSubTypeVariable")
    def protocol_sub_type_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "protocol_sub_type_variable")

    @_builtins.property
    @pulumi.getter(name="protocolSubTypes")
    def protocol_sub_types(self) -> Sequence[_builtins.str]:
        return pulumi.get(self, "protocol_sub_types")

    @_builtins.property
    @pulumi.getter(name="protocolVariable")
    def protocol_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "protocol_variable")

    @_builtins.property
    @pulumi.getter(name="routePolicy")
    def route_policy(self) -> _builtins.str:
        """
        Set Route Policy to OMP
        """
        return pulumi.get(self, "route_policy")

    @_builtins.property
    @pulumi.getter(name="routePolicyVariable")
    def route_policy_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "route_policy_variable")


@pulumi.output_type
class GetCiscoVpnFeatureTemplateOmpAdvertiseIpv4RoutePrefixResult(dict):
    def __init__(__self__, *,
                 aggregate_only: _builtins.bool,
                 aggregate_only_variable: _builtins.str,
                 optional: _builtins.bool,
                 prefix_entry: _builtins.str,
                 prefix_entry_variable: _builtins.str):
        """
        :param _builtins.bool aggregate_only: Aggregate Only
        :param _builtins.str aggregate_only_variable: Variable name
        :param _builtins.bool optional: Indicates if list item is considered optional.
        :param _builtins.str prefix_entry: Prefix
        :param _builtins.str prefix_entry_variable: Variable name
        """
        pulumi.set(__self__, "aggregate_only", aggregate_only)
        pulumi.set(__self__, "aggregate_only_variable", aggregate_only_variable)
        pulumi.set(__self__, "optional", optional)
        pulumi.set(__self__, "prefix_entry", prefix_entry)
        pulumi.set(__self__, "prefix_entry_variable", prefix_entry_variable)

    @_builtins.property
    @pulumi.getter(name="aggregateOnly")
    def aggregate_only(self) -> _builtins.bool:
        """
        Aggregate Only
        """
        return pulumi.get(self, "aggregate_only")

    @_builtins.property
    @pulumi.getter(name="aggregateOnlyVariable")
    def aggregate_only_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "aggregate_only_variable")

    @_builtins.property
    @pulumi.getter
    def optional(self) -> _builtins.bool:
        """
        Indicates if list item is considered optional.
        """
        return pulumi.get(self, "optional")

    @_builtins.property
    @pulumi.getter(name="prefixEntry")
    def prefix_entry(self) -> _builtins.str:
        """
        Prefix
        """
        return pulumi.get(self, "prefix_entry")

    @_builtins.property
    @pulumi.getter(name="prefixEntryVariable")
    def prefix_entry_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "prefix_entry_variable")


@pulumi.output_type
class GetCiscoVpnFeatureTemplateOmpAdvertiseIpv6RouteResult(dict):
    def __init__(__self__, *,
                 optional: _builtins.bool,
                 prefixes: Sequence['outputs.GetCiscoVpnFeatureTemplateOmpAdvertiseIpv6RoutePrefixResult'],
                 protocol: _builtins.str,
                 protocol_sub_type_variable: _builtins.str,
                 protocol_sub_types: Sequence[_builtins.str],
                 protocol_variable: _builtins.str,
                 route_policy: _builtins.str,
                 route_policy_variable: _builtins.str):
        """
        :param _builtins.bool optional: Indicates if list item is considered optional.
        :param _builtins.str protocol: Advertised routes protocol
        :param _builtins.str protocol_sub_type_variable: Variable name
        :param _builtins.str protocol_variable: Variable name
        :param _builtins.str route_policy_variable: Variable name
        """
        pulumi.set(__self__, "optional", optional)
        pulumi.set(__self__, "prefixes", prefixes)
        pulumi.set(__self__, "protocol", protocol)
        pulumi.set(__self__, "protocol_sub_type_variable", protocol_sub_type_variable)
        pulumi.set(__self__, "protocol_sub_types", protocol_sub_types)
        pulumi.set(__self__, "protocol_variable", protocol_variable)
        pulumi.set(__self__, "route_policy", route_policy)
        pulumi.set(__self__, "route_policy_variable", route_policy_variable)

    @_builtins.property
    @pulumi.getter
    def optional(self) -> _builtins.bool:
        """
        Indicates if list item is considered optional.
        """
        return pulumi.get(self, "optional")

    @_builtins.property
    @pulumi.getter
    def prefixes(self) -> Sequence['outputs.GetCiscoVpnFeatureTemplateOmpAdvertiseIpv6RoutePrefixResult']:
        return pulumi.get(self, "prefixes")

    @_builtins.property
    @pulumi.getter
    def protocol(self) -> _builtins.str:
        """
        Advertised routes protocol
        """
        return pulumi.get(self, "protocol")

    @_builtins.property
    @pulumi.getter(name="protocolSubTypeVariable")
    def protocol_sub_type_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "protocol_sub_type_variable")

    @_builtins.property
    @pulumi.getter(name="protocolSubTypes")
    def protocol_sub_types(self) -> Sequence[_builtins.str]:
        return pulumi.get(self, "protocol_sub_types")

    @_builtins.property
    @pulumi.getter(name="protocolVariable")
    def protocol_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "protocol_variable")

    @_builtins.property
    @pulumi.getter(name="routePolicy")
    def route_policy(self) -> _builtins.str:
        return pulumi.get(self, "route_policy")

    @_builtins.property
    @pulumi.getter(name="routePolicyVariable")
    def route_policy_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "route_policy_variable")


@pulumi.output_type
class GetCiscoVpnFeatureTemplateOmpAdvertiseIpv6RoutePrefixResult(dict):
    def __init__(__self__, *,
                 aggregate_only: _builtins.bool,
                 aggregate_only_variable: _builtins.str,
                 optional: _builtins.bool,
                 prefix_entry: _builtins.str,
                 prefix_entry_variable: _builtins.str):
        """
        :param _builtins.bool aggregate_only: Aggregate Only
        :param _builtins.str aggregate_only_variable: Variable name
        :param _builtins.bool optional: Indicates if list item is considered optional.
        :param _builtins.str prefix_entry: Prefix
        :param _builtins.str prefix_entry_variable: Variable name
        """
        pulumi.set(__self__, "aggregate_only", aggregate_only)
        pulumi.set(__self__, "aggregate_only_variable", aggregate_only_variable)
        pulumi.set(__self__, "optional", optional)
        pulumi.set(__self__, "prefix_entry", prefix_entry)
        pulumi.set(__self__, "prefix_entry_variable", prefix_entry_variable)

    @_builtins.property
    @pulumi.getter(name="aggregateOnly")
    def aggregate_only(self) -> _builtins.bool:
        """
        Aggregate Only
        """
        return pulumi.get(self, "aggregate_only")

    @_builtins.property
    @pulumi.getter(name="aggregateOnlyVariable")
    def aggregate_only_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "aggregate_only_variable")

    @_builtins.property
    @pulumi.getter
    def optional(self) -> _builtins.bool:
        """
        Indicates if list item is considered optional.
        """
        return pulumi.get(self, "optional")

    @_builtins.property
    @pulumi.getter(name="prefixEntry")
    def prefix_entry(self) -> _builtins.str:
        """
        Prefix
        """
        return pulumi.get(self, "prefix_entry")

    @_builtins.property
    @pulumi.getter(name="prefixEntryVariable")
    def prefix_entry_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "prefix_entry_variable")


@pulumi.output_type
class GetCiscoVpnFeatureTemplatePortForwardRuleResult(dict):
    def __init__(__self__, *,
                 optional: _builtins.bool,
                 pool_name: _builtins.int,
                 pool_name_variable: _builtins.str,
                 protocol: _builtins.str,
                 protocol_variable: _builtins.str,
                 source_ip: _builtins.str,
                 source_ip_variable: _builtins.str,
                 source_port: _builtins.int,
                 source_port_variable: _builtins.str,
                 translate_ip: _builtins.str,
                 translate_ip_variable: _builtins.str,
                 translate_port: _builtins.int,
                 translate_port_variable: _builtins.str):
        """
        :param _builtins.bool optional: Indicates if list item is considered optional.
        :param _builtins.int pool_name: NAT Pool Name, natpool1..31
        :param _builtins.str pool_name_variable: Variable name
        :param _builtins.str protocol: Protocol
        :param _builtins.str protocol_variable: Variable name
        :param _builtins.str source_ip: Source IP address to be translated
        :param _builtins.str source_ip_variable: Variable name
        :param _builtins.int source_port: Source Port
        :param _builtins.str source_port_variable: Variable name
        :param _builtins.str translate_ip: Statically translated source IP address
        :param _builtins.str translate_ip_variable: Variable name
        :param _builtins.int translate_port: Translate Port
        :param _builtins.str translate_port_variable: Variable name
        """
        pulumi.set(__self__, "optional", optional)
        pulumi.set(__self__, "pool_name", pool_name)
        pulumi.set(__self__, "pool_name_variable", pool_name_variable)
        pulumi.set(__self__, "protocol", protocol)
        pulumi.set(__self__, "protocol_variable", protocol_variable)
        pulumi.set(__self__, "source_ip", source_ip)
        pulumi.set(__self__, "source_ip_variable", source_ip_variable)
        pulumi.set(__self__, "source_port", source_port)
        pulumi.set(__self__, "source_port_variable", source_port_variable)
        pulumi.set(__self__, "translate_ip", translate_ip)
        pulumi.set(__self__, "translate_ip_variable", translate_ip_variable)
        pulumi.set(__self__, "translate_port", translate_port)
        pulumi.set(__self__, "translate_port_variable", translate_port_variable)

    @_builtins.property
    @pulumi.getter
    def optional(self) -> _builtins.bool:
        """
        Indicates if list item is considered optional.
        """
        return pulumi.get(self, "optional")

    @_builtins.property
    @pulumi.getter(name="poolName")
    def pool_name(self) -> _builtins.int:
        """
        NAT Pool Name, natpool1..31
        """
        return pulumi.get(self, "pool_name")

    @_builtins.property
    @pulumi.getter(name="poolNameVariable")
    def pool_name_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "pool_name_variable")

    @_builtins.property
    @pulumi.getter
    def protocol(self) -> _builtins.str:
        """
        Protocol
        """
        return pulumi.get(self, "protocol")

    @_builtins.property
    @pulumi.getter(name="protocolVariable")
    def protocol_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "protocol_variable")

    @_builtins.property
    @pulumi.getter(name="sourceIp")
    def source_ip(self) -> _builtins.str:
        """
        Source IP address to be translated
        """
        return pulumi.get(self, "source_ip")

    @_builtins.property
    @pulumi.getter(name="sourceIpVariable")
    def source_ip_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "source_ip_variable")

    @_builtins.property
    @pulumi.getter(name="sourcePort")
    def source_port(self) -> _builtins.int:
        """
        Source Port
        """
        return pulumi.get(self, "source_port")

    @_builtins.property
    @pulumi.getter(name="sourcePortVariable")
    def source_port_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "source_port_variable")

    @_builtins.property
    @pulumi.getter(name="translateIp")
    def translate_ip(self) -> _builtins.str:
        """
        Statically translated source IP address
        """
        return pulumi.get(self, "translate_ip")

    @_builtins.property
    @pulumi.getter(name="translateIpVariable")
    def translate_ip_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "translate_ip_variable")

    @_builtins.property
    @pulumi.getter(name="translatePort")
    def translate_port(self) -> _builtins.int:
        """
        Translate Port
        """
        return pulumi.get(self, "translate_port")

    @_builtins.property
    @pulumi.getter(name="translatePortVariable")
    def translate_port_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "translate_port_variable")


@pulumi.output_type
class GetCiscoVpnFeatureTemplateRouteGlobalExportResult(dict):
    def __init__(__self__, *,
                 optional: _builtins.bool,
                 protocol: _builtins.str,
                 protocol_sub_type_variable: _builtins.str,
                 protocol_sub_types: Sequence[_builtins.str],
                 protocol_variable: _builtins.str,
                 redistributes: Sequence['outputs.GetCiscoVpnFeatureTemplateRouteGlobalExportRedistributeResult'],
                 route_policy: _builtins.str):
        """
        :param _builtins.bool optional: Indicates if list item is considered optional.
        :param _builtins.str protocol: Select a Route Protocol to enable route leaking from this Service VPN to Global VPN
        :param _builtins.str protocol_sub_type_variable: Variable name
        :param _builtins.str protocol_variable: Variable name
        :param Sequence['GetCiscoVpnFeatureTemplateRouteGlobalExportRedistributeArgs'] redistributes: Enable redistribution of replicated route protocol
        :param _builtins.str route_policy: Select a Route Policy to enable route leaking from this Service VPN to Global VPN
        """
        pulumi.set(__self__, "optional", optional)
        pulumi.set(__self__, "protocol", protocol)
        pulumi.set(__self__, "protocol_sub_type_variable", protocol_sub_type_variable)
        pulumi.set(__self__, "protocol_sub_types", protocol_sub_types)
        pulumi.set(__self__, "protocol_variable", protocol_variable)
        pulumi.set(__self__, "redistributes", redistributes)
        pulumi.set(__self__, "route_policy", route_policy)

    @_builtins.property
    @pulumi.getter
    def optional(self) -> _builtins.bool:
        """
        Indicates if list item is considered optional.
        """
        return pulumi.get(self, "optional")

    @_builtins.property
    @pulumi.getter
    def protocol(self) -> _builtins.str:
        """
        Select a Route Protocol to enable route leaking from this Service VPN to Global VPN
        """
        return pulumi.get(self, "protocol")

    @_builtins.property
    @pulumi.getter(name="protocolSubTypeVariable")
    def protocol_sub_type_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "protocol_sub_type_variable")

    @_builtins.property
    @pulumi.getter(name="protocolSubTypes")
    def protocol_sub_types(self) -> Sequence[_builtins.str]:
        return pulumi.get(self, "protocol_sub_types")

    @_builtins.property
    @pulumi.getter(name="protocolVariable")
    def protocol_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "protocol_variable")

    @_builtins.property
    @pulumi.getter
    def redistributes(self) -> Sequence['outputs.GetCiscoVpnFeatureTemplateRouteGlobalExportRedistributeResult']:
        """
        Enable redistribution of replicated route protocol
        """
        return pulumi.get(self, "redistributes")

    @_builtins.property
    @pulumi.getter(name="routePolicy")
    def route_policy(self) -> _builtins.str:
        """
        Select a Route Policy to enable route leaking from this Service VPN to Global VPN
        """
        return pulumi.get(self, "route_policy")


@pulumi.output_type
class GetCiscoVpnFeatureTemplateRouteGlobalExportRedistributeResult(dict):
    def __init__(__self__, *,
                 optional: _builtins.bool,
                 protocol: _builtins.str,
                 protocol_variable: _builtins.str,
                 route_policy: _builtins.str):
        """
        :param _builtins.bool optional: Indicates if list item is considered optional.
        :param _builtins.str protocol: Select a Route Protocol to enable redistribution
        :param _builtins.str protocol_variable: Variable name
        :param _builtins.str route_policy: Select a Route Policy to enable redistribution
        """
        pulumi.set(__self__, "optional", optional)
        pulumi.set(__self__, "protocol", protocol)
        pulumi.set(__self__, "protocol_variable", protocol_variable)
        pulumi.set(__self__, "route_policy", route_policy)

    @_builtins.property
    @pulumi.getter
    def optional(self) -> _builtins.bool:
        """
        Indicates if list item is considered optional.
        """
        return pulumi.get(self, "optional")

    @_builtins.property
    @pulumi.getter
    def protocol(self) -> _builtins.str:
        """
        Select a Route Protocol to enable redistribution
        """
        return pulumi.get(self, "protocol")

    @_builtins.property
    @pulumi.getter(name="protocolVariable")
    def protocol_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "protocol_variable")

    @_builtins.property
    @pulumi.getter(name="routePolicy")
    def route_policy(self) -> _builtins.str:
        """
        Select a Route Policy to enable redistribution
        """
        return pulumi.get(self, "route_policy")


@pulumi.output_type
class GetCiscoVpnFeatureTemplateRouteGlobalImportResult(dict):
    def __init__(__self__, *,
                 optional: _builtins.bool,
                 protocol: _builtins.str,
                 protocol_sub_type_variable: _builtins.str,
                 protocol_sub_types: Sequence[_builtins.str],
                 protocol_variable: _builtins.str,
                 redistributes: Sequence['outputs.GetCiscoVpnFeatureTemplateRouteGlobalImportRedistributeResult'],
                 route_policy: _builtins.str):
        """
        :param _builtins.bool optional: Indicates if list item is considered optional.
        :param _builtins.str protocol: Select a Route Protocol to enable route leaking from Global VPN to this Service VPN
        :param _builtins.str protocol_sub_type_variable: Variable name
        :param _builtins.str protocol_variable: Variable name
        :param Sequence['GetCiscoVpnFeatureTemplateRouteGlobalImportRedistributeArgs'] redistributes: Enable redistribution of replicated route protocol
        :param _builtins.str route_policy: Select a Route Policy to enable route leaking from Global VPN to this Service VPN
        """
        pulumi.set(__self__, "optional", optional)
        pulumi.set(__self__, "protocol", protocol)
        pulumi.set(__self__, "protocol_sub_type_variable", protocol_sub_type_variable)
        pulumi.set(__self__, "protocol_sub_types", protocol_sub_types)
        pulumi.set(__self__, "protocol_variable", protocol_variable)
        pulumi.set(__self__, "redistributes", redistributes)
        pulumi.set(__self__, "route_policy", route_policy)

    @_builtins.property
    @pulumi.getter
    def optional(self) -> _builtins.bool:
        """
        Indicates if list item is considered optional.
        """
        return pulumi.get(self, "optional")

    @_builtins.property
    @pulumi.getter
    def protocol(self) -> _builtins.str:
        """
        Select a Route Protocol to enable route leaking from Global VPN to this Service VPN
        """
        return pulumi.get(self, "protocol")

    @_builtins.property
    @pulumi.getter(name="protocolSubTypeVariable")
    def protocol_sub_type_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "protocol_sub_type_variable")

    @_builtins.property
    @pulumi.getter(name="protocolSubTypes")
    def protocol_sub_types(self) -> Sequence[_builtins.str]:
        return pulumi.get(self, "protocol_sub_types")

    @_builtins.property
    @pulumi.getter(name="protocolVariable")
    def protocol_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "protocol_variable")

    @_builtins.property
    @pulumi.getter
    def redistributes(self) -> Sequence['outputs.GetCiscoVpnFeatureTemplateRouteGlobalImportRedistributeResult']:
        """
        Enable redistribution of replicated route protocol
        """
        return pulumi.get(self, "redistributes")

    @_builtins.property
    @pulumi.getter(name="routePolicy")
    def route_policy(self) -> _builtins.str:
        """
        Select a Route Policy to enable route leaking from Global VPN to this Service VPN
        """
        return pulumi.get(self, "route_policy")


@pulumi.output_type
class GetCiscoVpnFeatureTemplateRouteGlobalImportRedistributeResult(dict):
    def __init__(__self__, *,
                 optional: _builtins.bool,
                 protocol: _builtins.str,
                 protocol_variable: _builtins.str,
                 route_policy: _builtins.str):
        """
        :param _builtins.bool optional: Indicates if list item is considered optional.
        :param _builtins.str protocol: Select a Route Protocol to enable redistribution
        :param _builtins.str protocol_variable: Variable name
        :param _builtins.str route_policy: Select a Route Policy to enable redistribution
        """
        pulumi.set(__self__, "optional", optional)
        pulumi.set(__self__, "protocol", protocol)
        pulumi.set(__self__, "protocol_variable", protocol_variable)
        pulumi.set(__self__, "route_policy", route_policy)

    @_builtins.property
    @pulumi.getter
    def optional(self) -> _builtins.bool:
        """
        Indicates if list item is considered optional.
        """
        return pulumi.get(self, "optional")

    @_builtins.property
    @pulumi.getter
    def protocol(self) -> _builtins.str:
        """
        Select a Route Protocol to enable redistribution
        """
        return pulumi.get(self, "protocol")

    @_builtins.property
    @pulumi.getter(name="protocolVariable")
    def protocol_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "protocol_variable")

    @_builtins.property
    @pulumi.getter(name="routePolicy")
    def route_policy(self) -> _builtins.str:
        """
        Select a Route Policy to enable redistribution
        """
        return pulumi.get(self, "route_policy")


@pulumi.output_type
class GetCiscoVpnFeatureTemplateRouteVpnImportResult(dict):
    def __init__(__self__, *,
                 optional: _builtins.bool,
                 protocol: _builtins.str,
                 protocol_sub_type_variable: _builtins.str,
                 protocol_sub_types: Sequence[_builtins.str],
                 protocol_variable: _builtins.str,
                 redistributes: Sequence['outputs.GetCiscoVpnFeatureTemplateRouteVpnImportRedistributeResult'],
                 route_policy: _builtins.str,
                 route_policy_variable: _builtins.str,
                 source_vpn_id: _builtins.int,
                 source_vpn_id_variable: _builtins.str):
        """
        :param _builtins.bool optional: Indicates if list item is considered optional.
        :param _builtins.str protocol: Select a Route Protocol to enable route leaking to current VPN
        :param _builtins.str protocol_sub_type_variable: Variable name
        :param _builtins.str protocol_variable: Variable name
        :param Sequence['GetCiscoVpnFeatureTemplateRouteVpnImportRedistributeArgs'] redistributes: Enable redistribution of replicated route protocol
        :param _builtins.str route_policy: Select a Route Policy to enable route leaking to current VPN
        :param _builtins.str route_policy_variable: Variable name
        :param _builtins.int source_vpn_id: Select a Source VPN where route leaks from
        :param _builtins.str source_vpn_id_variable: Variable name
        """
        pulumi.set(__self__, "optional", optional)
        pulumi.set(__self__, "protocol", protocol)
        pulumi.set(__self__, "protocol_sub_type_variable", protocol_sub_type_variable)
        pulumi.set(__self__, "protocol_sub_types", protocol_sub_types)
        pulumi.set(__self__, "protocol_variable", protocol_variable)
        pulumi.set(__self__, "redistributes", redistributes)
        pulumi.set(__self__, "route_policy", route_policy)
        pulumi.set(__self__, "route_policy_variable", route_policy_variable)
        pulumi.set(__self__, "source_vpn_id", source_vpn_id)
        pulumi.set(__self__, "source_vpn_id_variable", source_vpn_id_variable)

    @_builtins.property
    @pulumi.getter
    def optional(self) -> _builtins.bool:
        """
        Indicates if list item is considered optional.
        """
        return pulumi.get(self, "optional")

    @_builtins.property
    @pulumi.getter
    def protocol(self) -> _builtins.str:
        """
        Select a Route Protocol to enable route leaking to current VPN
        """
        return pulumi.get(self, "protocol")

    @_builtins.property
    @pulumi.getter(name="protocolSubTypeVariable")
    def protocol_sub_type_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "protocol_sub_type_variable")

    @_builtins.property
    @pulumi.getter(name="protocolSubTypes")
    def protocol_sub_types(self) -> Sequence[_builtins.str]:
        return pulumi.get(self, "protocol_sub_types")

    @_builtins.property
    @pulumi.getter(name="protocolVariable")
    def protocol_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "protocol_variable")

    @_builtins.property
    @pulumi.getter
    def redistributes(self) -> Sequence['outputs.GetCiscoVpnFeatureTemplateRouteVpnImportRedistributeResult']:
        """
        Enable redistribution of replicated route protocol
        """
        return pulumi.get(self, "redistributes")

    @_builtins.property
    @pulumi.getter(name="routePolicy")
    def route_policy(self) -> _builtins.str:
        """
        Select a Route Policy to enable route leaking to current VPN
        """
        return pulumi.get(self, "route_policy")

    @_builtins.property
    @pulumi.getter(name="routePolicyVariable")
    def route_policy_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "route_policy_variable")

    @_builtins.property
    @pulumi.getter(name="sourceVpnId")
    def source_vpn_id(self) -> _builtins.int:
        """
        Select a Source VPN where route leaks from
        """
        return pulumi.get(self, "source_vpn_id")

    @_builtins.property
    @pulumi.getter(name="sourceVpnIdVariable")
    def source_vpn_id_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "source_vpn_id_variable")


@pulumi.output_type
class GetCiscoVpnFeatureTemplateRouteVpnImportRedistributeResult(dict):
    def __init__(__self__, *,
                 optional: _builtins.bool,
                 protocol: _builtins.str,
                 protocol_variable: _builtins.str,
                 route_policy: _builtins.str,
                 route_policy_variable: _builtins.str):
        """
        :param _builtins.bool optional: Indicates if list item is considered optional.
        :param _builtins.str protocol: Select a Route Protocol to enable redistribution
        :param _builtins.str protocol_variable: Variable name
        :param _builtins.str route_policy: Select a Route Policy to enable redistribution
        :param _builtins.str route_policy_variable: Variable name
        """
        pulumi.set(__self__, "optional", optional)
        pulumi.set(__self__, "protocol", protocol)
        pulumi.set(__self__, "protocol_variable", protocol_variable)
        pulumi.set(__self__, "route_policy", route_policy)
        pulumi.set(__self__, "route_policy_variable", route_policy_variable)

    @_builtins.property
    @pulumi.getter
    def optional(self) -> _builtins.bool:
        """
        Indicates if list item is considered optional.
        """
        return pulumi.get(self, "optional")

    @_builtins.property
    @pulumi.getter
    def protocol(self) -> _builtins.str:
        """
        Select a Route Protocol to enable redistribution
        """
        return pulumi.get(self, "protocol")

    @_builtins.property
    @pulumi.getter(name="protocolVariable")
    def protocol_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "protocol_variable")

    @_builtins.property
    @pulumi.getter(name="routePolicy")
    def route_policy(self) -> _builtins.str:
        """
        Select a Route Policy to enable redistribution
        """
        return pulumi.get(self, "route_policy")

    @_builtins.property
    @pulumi.getter(name="routePolicyVariable")
    def route_policy_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "route_policy_variable")


@pulumi.output_type
class GetCiscoVpnFeatureTemplateServiceResult(dict):
    def __init__(__self__, *,
                 address_variable: _builtins.str,
                 addresses: Sequence[_builtins.str],
                 interface: _builtins.str,
                 interface_variable: _builtins.str,
                 optional: _builtins.bool,
                 service_types: _builtins.str,
                 track_enable: _builtins.bool,
                 track_enable_variable: _builtins.str):
        """
        :param _builtins.str address_variable: Variable name
        :param Sequence[_builtins.str] addresses: List of IPv4 address
        :param _builtins.str interface: Tracking Service
        :param _builtins.str interface_variable: Variable name
        :param _builtins.bool optional: Indicates if list item is considered optional.
        :param _builtins.str service_types: Service Type
        :param _builtins.bool track_enable: Tracking Service
        :param _builtins.str track_enable_variable: Variable name
        """
        pulumi.set(__self__, "address_variable", address_variable)
        pulumi.set(__self__, "addresses", addresses)
        pulumi.set(__self__, "interface", interface)
        pulumi.set(__self__, "interface_variable", interface_variable)
        pulumi.set(__self__, "optional", optional)
        pulumi.set(__self__, "service_types", service_types)
        pulumi.set(__self__, "track_enable", track_enable)
        pulumi.set(__self__, "track_enable_variable", track_enable_variable)

    @_builtins.property
    @pulumi.getter(name="addressVariable")
    def address_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "address_variable")

    @_builtins.property
    @pulumi.getter
    def addresses(self) -> Sequence[_builtins.str]:
        """
        List of IPv4 address
        """
        return pulumi.get(self, "addresses")

    @_builtins.property
    @pulumi.getter
    def interface(self) -> _builtins.str:
        """
        Tracking Service
        """
        return pulumi.get(self, "interface")

    @_builtins.property
    @pulumi.getter(name="interfaceVariable")
    def interface_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "interface_variable")

    @_builtins.property
    @pulumi.getter
    def optional(self) -> _builtins.bool:
        """
        Indicates if list item is considered optional.
        """
        return pulumi.get(self, "optional")

    @_builtins.property
    @pulumi.getter(name="serviceTypes")
    def service_types(self) -> _builtins.str:
        """
        Service Type
        """
        return pulumi.get(self, "service_types")

    @_builtins.property
    @pulumi.getter(name="trackEnable")
    def track_enable(self) -> _builtins.bool:
        """
        Tracking Service
        """
        return pulumi.get(self, "track_enable")

    @_builtins.property
    @pulumi.getter(name="trackEnableVariable")
    def track_enable_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "track_enable_variable")


@pulumi.output_type
class GetCiscoVpnFeatureTemplateStaticNatRuleResult(dict):
    def __init__(__self__, *,
                 optional: _builtins.bool,
                 pool_name: _builtins.int,
                 pool_name_variable: _builtins.str,
                 source_ip: _builtins.str,
                 source_ip_variable: _builtins.str,
                 static_nat_direction: _builtins.str,
                 static_nat_direction_variable: _builtins.str,
                 tracker_id: _builtins.int,
                 tracker_id_variable: _builtins.str,
                 translate_ip: _builtins.str,
                 translate_ip_variable: _builtins.str):
        """
        :param _builtins.bool optional: Indicates if list item is considered optional.
        :param _builtins.int pool_name: NAT Pool Name, natpool1..31
        :param _builtins.str pool_name_variable: Variable name
        :param _builtins.str source_ip: Source IP address to be translated
        :param _builtins.str source_ip_variable: Variable name
        :param _builtins.str static_nat_direction: Direction of static NAT translation
        :param _builtins.str static_nat_direction_variable: Variable name
        :param _builtins.int tracker_id: Add Object/Object Group Tracker
        :param _builtins.str tracker_id_variable: Variable name
        :param _builtins.str translate_ip: Statically translated source IP address
        :param _builtins.str translate_ip_variable: Variable name
        """
        pulumi.set(__self__, "optional", optional)
        pulumi.set(__self__, "pool_name", pool_name)
        pulumi.set(__self__, "pool_name_variable", pool_name_variable)
        pulumi.set(__self__, "source_ip", source_ip)
        pulumi.set(__self__, "source_ip_variable", source_ip_variable)
        pulumi.set(__self__, "static_nat_direction", static_nat_direction)
        pulumi.set(__self__, "static_nat_direction_variable", static_nat_direction_variable)
        pulumi.set(__self__, "tracker_id", tracker_id)
        pulumi.set(__self__, "tracker_id_variable", tracker_id_variable)
        pulumi.set(__self__, "translate_ip", translate_ip)
        pulumi.set(__self__, "translate_ip_variable", translate_ip_variable)

    @_builtins.property
    @pulumi.getter
    def optional(self) -> _builtins.bool:
        """
        Indicates if list item is considered optional.
        """
        return pulumi.get(self, "optional")

    @_builtins.property
    @pulumi.getter(name="poolName")
    def pool_name(self) -> _builtins.int:
        """
        NAT Pool Name, natpool1..31
        """
        return pulumi.get(self, "pool_name")

    @_builtins.property
    @pulumi.getter(name="poolNameVariable")
    def pool_name_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "pool_name_variable")

    @_builtins.property
    @pulumi.getter(name="sourceIp")
    def source_ip(self) -> _builtins.str:
        """
        Source IP address to be translated
        """
        return pulumi.get(self, "source_ip")

    @_builtins.property
    @pulumi.getter(name="sourceIpVariable")
    def source_ip_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "source_ip_variable")

    @_builtins.property
    @pulumi.getter(name="staticNatDirection")
    def static_nat_direction(self) -> _builtins.str:
        """
        Direction of static NAT translation
        """
        return pulumi.get(self, "static_nat_direction")

    @_builtins.property
    @pulumi.getter(name="staticNatDirectionVariable")
    def static_nat_direction_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "static_nat_direction_variable")

    @_builtins.property
    @pulumi.getter(name="trackerId")
    def tracker_id(self) -> _builtins.int:
        """
        Add Object/Object Group Tracker
        """
        return pulumi.get(self, "tracker_id")

    @_builtins.property
    @pulumi.getter(name="trackerIdVariable")
    def tracker_id_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "tracker_id_variable")

    @_builtins.property
    @pulumi.getter(name="translateIp")
    def translate_ip(self) -> _builtins.str:
        """
        Statically translated source IP address
        """
        return pulumi.get(self, "translate_ip")

    @_builtins.property
    @pulumi.getter(name="translateIpVariable")
    def translate_ip_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "translate_ip_variable")


@pulumi.output_type
class GetCiscoVpnFeatureTemplateStaticNatSubnetRuleResult(dict):
    def __init__(__self__, *,
                 optional: _builtins.bool,
                 prefix_length: _builtins.int,
                 prefix_length_variable: _builtins.str,
                 source_ip_subnet: _builtins.str,
                 source_ip_subnet_variable: _builtins.str,
                 static_nat_direction: _builtins.str,
                 static_nat_direction_variable: _builtins.str,
                 tracker_id: _builtins.int,
                 tracker_id_variable: _builtins.str,
                 translate_ip_subnet: _builtins.str,
                 translate_ip_subnet_variable: _builtins.str):
        """
        :param _builtins.bool optional: Indicates if list item is considered optional.
        :param _builtins.int prefix_length: Network Prefix Length
        :param _builtins.str prefix_length_variable: Variable name
        :param _builtins.str source_ip_subnet: Source IP Subnet to be translated
        :param _builtins.str source_ip_subnet_variable: Variable name
        :param _builtins.str static_nat_direction: Direction of static NAT translation
        :param _builtins.str static_nat_direction_variable: Variable name
        :param _builtins.int tracker_id: Add Object/Object Group Tracker
        :param _builtins.str tracker_id_variable: Variable name
        :param _builtins.str translate_ip_subnet: Statically translated source IP Subnet
        :param _builtins.str translate_ip_subnet_variable: Variable name
        """
        pulumi.set(__self__, "optional", optional)
        pulumi.set(__self__, "prefix_length", prefix_length)
        pulumi.set(__self__, "prefix_length_variable", prefix_length_variable)
        pulumi.set(__self__, "source_ip_subnet", source_ip_subnet)
        pulumi.set(__self__, "source_ip_subnet_variable", source_ip_subnet_variable)
        pulumi.set(__self__, "static_nat_direction", static_nat_direction)
        pulumi.set(__self__, "static_nat_direction_variable", static_nat_direction_variable)
        pulumi.set(__self__, "tracker_id", tracker_id)
        pulumi.set(__self__, "tracker_id_variable", tracker_id_variable)
        pulumi.set(__self__, "translate_ip_subnet", translate_ip_subnet)
        pulumi.set(__self__, "translate_ip_subnet_variable", translate_ip_subnet_variable)

    @_builtins.property
    @pulumi.getter
    def optional(self) -> _builtins.bool:
        """
        Indicates if list item is considered optional.
        """
        return pulumi.get(self, "optional")

    @_builtins.property
    @pulumi.getter(name="prefixLength")
    def prefix_length(self) -> _builtins.int:
        """
        Network Prefix Length
        """
        return pulumi.get(self, "prefix_length")

    @_builtins.property
    @pulumi.getter(name="prefixLengthVariable")
    def prefix_length_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "prefix_length_variable")

    @_builtins.property
    @pulumi.getter(name="sourceIpSubnet")
    def source_ip_subnet(self) -> _builtins.str:
        """
        Source IP Subnet to be translated
        """
        return pulumi.get(self, "source_ip_subnet")

    @_builtins.property
    @pulumi.getter(name="sourceIpSubnetVariable")
    def source_ip_subnet_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "source_ip_subnet_variable")

    @_builtins.property
    @pulumi.getter(name="staticNatDirection")
    def static_nat_direction(self) -> _builtins.str:
        """
        Direction of static NAT translation
        """
        return pulumi.get(self, "static_nat_direction")

    @_builtins.property
    @pulumi.getter(name="staticNatDirectionVariable")
    def static_nat_direction_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "static_nat_direction_variable")

    @_builtins.property
    @pulumi.getter(name="trackerId")
    def tracker_id(self) -> _builtins.int:
        """
        Add Object/Object Group Tracker
        """
        return pulumi.get(self, "tracker_id")

    @_builtins.property
    @pulumi.getter(name="trackerIdVariable")
    def tracker_id_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "tracker_id_variable")

    @_builtins.property
    @pulumi.getter(name="translateIpSubnet")
    def translate_ip_subnet(self) -> _builtins.str:
        """
        Statically translated source IP Subnet
        """
        return pulumi.get(self, "translate_ip_subnet")

    @_builtins.property
    @pulumi.getter(name="translateIpSubnetVariable")
    def translate_ip_subnet_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "translate_ip_subnet_variable")


@pulumi.output_type
class GetCiscoVpnInterfaceFeatureTemplateAccessListResult(dict):
    def __init__(__self__, *,
                 acl_name: _builtins.str,
                 acl_name_variable: _builtins.str,
                 direction: _builtins.str,
                 optional: _builtins.bool):
        """
        :param _builtins.str acl_name: Name of access list
        :param _builtins.str acl_name_variable: Variable name
        :param _builtins.str direction: Direction
        :param _builtins.bool optional: Indicates if list item is considered optional.
        """
        pulumi.set(__self__, "acl_name", acl_name)
        pulumi.set(__self__, "acl_name_variable", acl_name_variable)
        pulumi.set(__self__, "direction", direction)
        pulumi.set(__self__, "optional", optional)

    @_builtins.property
    @pulumi.getter(name="aclName")
    def acl_name(self) -> _builtins.str:
        """
        Name of access list
        """
        return pulumi.get(self, "acl_name")

    @_builtins.property
    @pulumi.getter(name="aclNameVariable")
    def acl_name_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "acl_name_variable")

    @_builtins.property
    @pulumi.getter
    def direction(self) -> _builtins.str:
        """
        Direction
        """
        return pulumi.get(self, "direction")

    @_builtins.property
    @pulumi.getter
    def optional(self) -> _builtins.bool:
        """
        Indicates if list item is considered optional.
        """
        return pulumi.get(self, "optional")


@pulumi.output_type
class GetCiscoVpnInterfaceFeatureTemplateIpv4SecondaryAddressResult(dict):
    def __init__(__self__, *,
                 address: _builtins.str,
                 address_variable: _builtins.str,
                 optional: _builtins.bool):
        """
        :param _builtins.str address: IP Address
        :param _builtins.str address_variable: Variable name
        :param _builtins.bool optional: Indicates if list item is considered optional.
        """
        pulumi.set(__self__, "address", address)
        pulumi.set(__self__, "address_variable", address_variable)
        pulumi.set(__self__, "optional", optional)

    @_builtins.property
    @pulumi.getter
    def address(self) -> _builtins.str:
        """
        IP Address
        """
        return pulumi.get(self, "address")

    @_builtins.property
    @pulumi.getter(name="addressVariable")
    def address_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "address_variable")

    @_builtins.property
    @pulumi.getter
    def optional(self) -> _builtins.bool:
        """
        Indicates if list item is considered optional.
        """
        return pulumi.get(self, "optional")


@pulumi.output_type
class GetCiscoVpnInterfaceFeatureTemplateIpv4VrrpResult(dict):
    def __init__(__self__, *,
                 group_id: _builtins.int,
                 group_id_variable: _builtins.str,
                 ip_address: _builtins.str,
                 ip_address_variable: _builtins.str,
                 ipv4_secondary_addresses: Sequence['outputs.GetCiscoVpnInterfaceFeatureTemplateIpv4VrrpIpv4SecondaryAddressResult'],
                 optional: _builtins.bool,
                 priority: _builtins.int,
                 priority_variable: _builtins.str,
                 timer: _builtins.int,
                 timer_variable: _builtins.str,
                 tloc_preference_change: _builtins.bool,
                 tloc_preference_change_value: _builtins.int,
                 tloc_preference_change_value_variable: _builtins.str,
                 track_omp: _builtins.bool,
                 track_prefix_list: _builtins.str,
                 track_prefix_list_variable: _builtins.str,
                 tracking_objects: Sequence['outputs.GetCiscoVpnInterfaceFeatureTemplateIpv4VrrpTrackingObjectResult']):
        """
        :param _builtins.int group_id: Group ID
        :param _builtins.str group_id_variable: Variable name
        :param _builtins.str ip_address: Assign IP Address
        :param _builtins.str ip_address_variable: Variable name
        :param Sequence['GetCiscoVpnInterfaceFeatureTemplateIpv4VrrpIpv4SecondaryAddressArgs'] ipv4_secondary_addresses: VRRP Secondary IP address
        :param _builtins.bool optional: Indicates if list item is considered optional.
        :param _builtins.int priority: Set priority
        :param _builtins.str priority_variable: Variable name
        :param _builtins.int timer: Timer interval for successive advertisements, in milliseconds
        :param _builtins.str timer_variable: Variable name
        :param _builtins.bool tloc_preference_change: change TLOC preference
        :param _builtins.int tloc_preference_change_value: Set tloc preference change value
        :param _builtins.str tloc_preference_change_value_variable: Variable name
        :param _builtins.bool track_omp: Track OMP status
        :param _builtins.str track_prefix_list: Track Prefix List
        :param _builtins.str track_prefix_list_variable: Variable name
        :param Sequence['GetCiscoVpnInterfaceFeatureTemplateIpv4VrrpTrackingObjectArgs'] tracking_objects: tracking object for VRRP configuration
        """
        pulumi.set(__self__, "group_id", group_id)
        pulumi.set(__self__, "group_id_variable", group_id_variable)
        pulumi.set(__self__, "ip_address", ip_address)
        pulumi.set(__self__, "ip_address_variable", ip_address_variable)
        pulumi.set(__self__, "ipv4_secondary_addresses", ipv4_secondary_addresses)
        pulumi.set(__self__, "optional", optional)
        pulumi.set(__self__, "priority", priority)
        pulumi.set(__self__, "priority_variable", priority_variable)
        pulumi.set(__self__, "timer", timer)
        pulumi.set(__self__, "timer_variable", timer_variable)
        pulumi.set(__self__, "tloc_preference_change", tloc_preference_change)
        pulumi.set(__self__, "tloc_preference_change_value", tloc_preference_change_value)
        pulumi.set(__self__, "tloc_preference_change_value_variable", tloc_preference_change_value_variable)
        pulumi.set(__self__, "track_omp", track_omp)
        pulumi.set(__self__, "track_prefix_list", track_prefix_list)
        pulumi.set(__self__, "track_prefix_list_variable", track_prefix_list_variable)
        pulumi.set(__self__, "tracking_objects", tracking_objects)

    @_builtins.property
    @pulumi.getter(name="groupId")
    def group_id(self) -> _builtins.int:
        """
        Group ID
        """
        return pulumi.get(self, "group_id")

    @_builtins.property
    @pulumi.getter(name="groupIdVariable")
    def group_id_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "group_id_variable")

    @_builtins.property
    @pulumi.getter(name="ipAddress")
    def ip_address(self) -> _builtins.str:
        """
        Assign IP Address
        """
        return pulumi.get(self, "ip_address")

    @_builtins.property
    @pulumi.getter(name="ipAddressVariable")
    def ip_address_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "ip_address_variable")

    @_builtins.property
    @pulumi.getter(name="ipv4SecondaryAddresses")
    def ipv4_secondary_addresses(self) -> Sequence['outputs.GetCiscoVpnInterfaceFeatureTemplateIpv4VrrpIpv4SecondaryAddressResult']:
        """
        VRRP Secondary IP address
        """
        return pulumi.get(self, "ipv4_secondary_addresses")

    @_builtins.property
    @pulumi.getter
    def optional(self) -> _builtins.bool:
        """
        Indicates if list item is considered optional.
        """
        return pulumi.get(self, "optional")

    @_builtins.property
    @pulumi.getter
    def priority(self) -> _builtins.int:
        """
        Set priority
        """
        return pulumi.get(self, "priority")

    @_builtins.property
    @pulumi.getter(name="priorityVariable")
    def priority_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "priority_variable")

    @_builtins.property
    @pulumi.getter
    def timer(self) -> _builtins.int:
        """
        Timer interval for successive advertisements, in milliseconds
        """
        return pulumi.get(self, "timer")

    @_builtins.property
    @pulumi.getter(name="timerVariable")
    def timer_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "timer_variable")

    @_builtins.property
    @pulumi.getter(name="tlocPreferenceChange")
    def tloc_preference_change(self) -> _builtins.bool:
        """
        change TLOC preference
        """
        return pulumi.get(self, "tloc_preference_change")

    @_builtins.property
    @pulumi.getter(name="tlocPreferenceChangeValue")
    def tloc_preference_change_value(self) -> _builtins.int:
        """
        Set tloc preference change value
        """
        return pulumi.get(self, "tloc_preference_change_value")

    @_builtins.property
    @pulumi.getter(name="tlocPreferenceChangeValueVariable")
    def tloc_preference_change_value_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "tloc_preference_change_value_variable")

    @_builtins.property
    @pulumi.getter(name="trackOmp")
    def track_omp(self) -> _builtins.bool:
        """
        Track OMP status
        """
        return pulumi.get(self, "track_omp")

    @_builtins.property
    @pulumi.getter(name="trackPrefixList")
    def track_prefix_list(self) -> _builtins.str:
        """
        Track Prefix List
        """
        return pulumi.get(self, "track_prefix_list")

    @_builtins.property
    @pulumi.getter(name="trackPrefixListVariable")
    def track_prefix_list_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "track_prefix_list_variable")

    @_builtins.property
    @pulumi.getter(name="trackingObjects")
    def tracking_objects(self) -> Sequence['outputs.GetCiscoVpnInterfaceFeatureTemplateIpv4VrrpTrackingObjectResult']:
        """
        tracking object for VRRP configuration
        """
        return pulumi.get(self, "tracking_objects")


@pulumi.output_type
class GetCiscoVpnInterfaceFeatureTemplateIpv4VrrpIpv4SecondaryAddressResult(dict):
    def __init__(__self__, *,
                 ip_address: _builtins.str,
                 ip_address_variable: _builtins.str,
                 optional: _builtins.bool):
        """
        :param _builtins.str ip_address: VRRP Secondary IP address
        :param _builtins.str ip_address_variable: Variable name
        :param _builtins.bool optional: Indicates if list item is considered optional.
        """
        pulumi.set(__self__, "ip_address", ip_address)
        pulumi.set(__self__, "ip_address_variable", ip_address_variable)
        pulumi.set(__self__, "optional", optional)

    @_builtins.property
    @pulumi.getter(name="ipAddress")
    def ip_address(self) -> _builtins.str:
        """
        VRRP Secondary IP address
        """
        return pulumi.get(self, "ip_address")

    @_builtins.property
    @pulumi.getter(name="ipAddressVariable")
    def ip_address_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "ip_address_variable")

    @_builtins.property
    @pulumi.getter
    def optional(self) -> _builtins.bool:
        """
        Indicates if list item is considered optional.
        """
        return pulumi.get(self, "optional")


@pulumi.output_type
class GetCiscoVpnInterfaceFeatureTemplateIpv4VrrpTrackingObjectResult(dict):
    def __init__(__self__, *,
                 decrement_value: _builtins.int,
                 decrement_value_variable: _builtins.str,
                 optional: _builtins.bool,
                 track_action: _builtins.str,
                 track_action_variable: _builtins.str,
                 tracker_id: _builtins.int,
                 tracker_id_variable: _builtins.str):
        """
        :param _builtins.int decrement_value: Decrement Value for VRRP priority
        :param _builtins.str decrement_value_variable: Variable name
        :param _builtins.bool optional: Indicates if list item is considered optional.
        :param _builtins.str track_action: Track Action
        :param _builtins.str track_action_variable: Variable name
        :param _builtins.int tracker_id: Tracker ID
        :param _builtins.str tracker_id_variable: Variable name
        """
        pulumi.set(__self__, "decrement_value", decrement_value)
        pulumi.set(__self__, "decrement_value_variable", decrement_value_variable)
        pulumi.set(__self__, "optional", optional)
        pulumi.set(__self__, "track_action", track_action)
        pulumi.set(__self__, "track_action_variable", track_action_variable)
        pulumi.set(__self__, "tracker_id", tracker_id)
        pulumi.set(__self__, "tracker_id_variable", tracker_id_variable)

    @_builtins.property
    @pulumi.getter(name="decrementValue")
    def decrement_value(self) -> _builtins.int:
        """
        Decrement Value for VRRP priority
        """
        return pulumi.get(self, "decrement_value")

    @_builtins.property
    @pulumi.getter(name="decrementValueVariable")
    def decrement_value_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "decrement_value_variable")

    @_builtins.property
    @pulumi.getter
    def optional(self) -> _builtins.bool:
        """
        Indicates if list item is considered optional.
        """
        return pulumi.get(self, "optional")

    @_builtins.property
    @pulumi.getter(name="trackAction")
    def track_action(self) -> _builtins.str:
        """
        Track Action
        """
        return pulumi.get(self, "track_action")

    @_builtins.property
    @pulumi.getter(name="trackActionVariable")
    def track_action_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "track_action_variable")

    @_builtins.property
    @pulumi.getter(name="trackerId")
    def tracker_id(self) -> _builtins.int:
        """
        Tracker ID
        """
        return pulumi.get(self, "tracker_id")

    @_builtins.property
    @pulumi.getter(name="trackerIdVariable")
    def tracker_id_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "tracker_id_variable")


@pulumi.output_type
class GetCiscoVpnInterfaceFeatureTemplateIpv6AccessListResult(dict):
    def __init__(__self__, *,
                 acl_name: _builtins.str,
                 acl_name_variable: _builtins.str,
                 direction: _builtins.str,
                 optional: _builtins.bool):
        """
        :param _builtins.str acl_name: Name of access list
        :param _builtins.str acl_name_variable: Variable name
        :param _builtins.str direction: Direction
        :param _builtins.bool optional: Indicates if list item is considered optional.
        """
        pulumi.set(__self__, "acl_name", acl_name)
        pulumi.set(__self__, "acl_name_variable", acl_name_variable)
        pulumi.set(__self__, "direction", direction)
        pulumi.set(__self__, "optional", optional)

    @_builtins.property
    @pulumi.getter(name="aclName")
    def acl_name(self) -> _builtins.str:
        """
        Name of access list
        """
        return pulumi.get(self, "acl_name")

    @_builtins.property
    @pulumi.getter(name="aclNameVariable")
    def acl_name_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "acl_name_variable")

    @_builtins.property
    @pulumi.getter
    def direction(self) -> _builtins.str:
        """
        Direction
        """
        return pulumi.get(self, "direction")

    @_builtins.property
    @pulumi.getter
    def optional(self) -> _builtins.bool:
        """
        Indicates if list item is considered optional.
        """
        return pulumi.get(self, "optional")


@pulumi.output_type
class GetCiscoVpnInterfaceFeatureTemplateIpv6DhcpHelperResult(dict):
    def __init__(__self__, *,
                 address: _builtins.str,
                 address_variable: _builtins.str,
                 optional: _builtins.bool,
                 vpn_id: _builtins.int,
                 vpn_id_variable: _builtins.str):
        """
        :param _builtins.str address: DHCPv6 Helper address
        :param _builtins.str address_variable: Variable name
        :param _builtins.bool optional: Indicates if list item is considered optional.
        :param _builtins.int vpn_id: DHCPv6 Helper VPN
        :param _builtins.str vpn_id_variable: Variable name
        """
        pulumi.set(__self__, "address", address)
        pulumi.set(__self__, "address_variable", address_variable)
        pulumi.set(__self__, "optional", optional)
        pulumi.set(__self__, "vpn_id", vpn_id)
        pulumi.set(__self__, "vpn_id_variable", vpn_id_variable)

    @_builtins.property
    @pulumi.getter
    def address(self) -> _builtins.str:
        """
        DHCPv6 Helper address
        """
        return pulumi.get(self, "address")

    @_builtins.property
    @pulumi.getter(name="addressVariable")
    def address_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "address_variable")

    @_builtins.property
    @pulumi.getter
    def optional(self) -> _builtins.bool:
        """
        Indicates if list item is considered optional.
        """
        return pulumi.get(self, "optional")

    @_builtins.property
    @pulumi.getter(name="vpnId")
    def vpn_id(self) -> _builtins.int:
        """
        DHCPv6 Helper VPN
        """
        return pulumi.get(self, "vpn_id")

    @_builtins.property
    @pulumi.getter(name="vpnIdVariable")
    def vpn_id_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "vpn_id_variable")


@pulumi.output_type
class GetCiscoVpnInterfaceFeatureTemplateIpv6SecondaryAddressResult(dict):
    def __init__(__self__, *,
                 address: _builtins.str,
                 address_variable: _builtins.str,
                 optional: _builtins.bool):
        """
        :param _builtins.str address: IPv6 Address
        :param _builtins.str address_variable: Variable name
        :param _builtins.bool optional: Indicates if list item is considered optional.
        """
        pulumi.set(__self__, "address", address)
        pulumi.set(__self__, "address_variable", address_variable)
        pulumi.set(__self__, "optional", optional)

    @_builtins.property
    @pulumi.getter
    def address(self) -> _builtins.str:
        """
        IPv6 Address
        """
        return pulumi.get(self, "address")

    @_builtins.property
    @pulumi.getter(name="addressVariable")
    def address_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "address_variable")

    @_builtins.property
    @pulumi.getter
    def optional(self) -> _builtins.bool:
        """
        Indicates if list item is considered optional.
        """
        return pulumi.get(self, "optional")


@pulumi.output_type
class GetCiscoVpnInterfaceFeatureTemplateIpv6VrrpResult(dict):
    def __init__(__self__, *,
                 group_id: _builtins.int,
                 group_id_variable: _builtins.str,
                 ipv6_addresses: Sequence['outputs.GetCiscoVpnInterfaceFeatureTemplateIpv6VrrpIpv6AddressResult'],
                 optional: _builtins.bool,
                 priority: _builtins.int,
                 priority_variable: _builtins.str,
                 timer: _builtins.int,
                 timer_variable: _builtins.str,
                 track_omp: _builtins.bool,
                 track_omp_variable: _builtins.str,
                 track_prefix_list: _builtins.str,
                 track_prefix_list_variable: _builtins.str):
        """
        :param _builtins.int group_id: Group ID
        :param _builtins.str group_id_variable: Variable name
        :param Sequence['GetCiscoVpnInterfaceFeatureTemplateIpv6VrrpIpv6AddressArgs'] ipv6_addresses: IPv6 VRRP
        :param _builtins.bool optional: Indicates if list item is considered optional.
        :param _builtins.int priority: Set priority
        :param _builtins.str priority_variable: Variable name
        :param _builtins.int timer: Timer interval for successive advertisements, in milliseconds
        :param _builtins.str timer_variable: Variable name
        :param _builtins.bool track_omp: Track OMP status
        :param _builtins.str track_omp_variable: Variable name
        :param _builtins.str track_prefix_list: Track Prefix List
        :param _builtins.str track_prefix_list_variable: Variable name
        """
        pulumi.set(__self__, "group_id", group_id)
        pulumi.set(__self__, "group_id_variable", group_id_variable)
        pulumi.set(__self__, "ipv6_addresses", ipv6_addresses)
        pulumi.set(__self__, "optional", optional)
        pulumi.set(__self__, "priority", priority)
        pulumi.set(__self__, "priority_variable", priority_variable)
        pulumi.set(__self__, "timer", timer)
        pulumi.set(__self__, "timer_variable", timer_variable)
        pulumi.set(__self__, "track_omp", track_omp)
        pulumi.set(__self__, "track_omp_variable", track_omp_variable)
        pulumi.set(__self__, "track_prefix_list", track_prefix_list)
        pulumi.set(__self__, "track_prefix_list_variable", track_prefix_list_variable)

    @_builtins.property
    @pulumi.getter(name="groupId")
    def group_id(self) -> _builtins.int:
        """
        Group ID
        """
        return pulumi.get(self, "group_id")

    @_builtins.property
    @pulumi.getter(name="groupIdVariable")
    def group_id_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "group_id_variable")

    @_builtins.property
    @pulumi.getter(name="ipv6Addresses")
    def ipv6_addresses(self) -> Sequence['outputs.GetCiscoVpnInterfaceFeatureTemplateIpv6VrrpIpv6AddressResult']:
        """
        IPv6 VRRP
        """
        return pulumi.get(self, "ipv6_addresses")

    @_builtins.property
    @pulumi.getter
    def optional(self) -> _builtins.bool:
        """
        Indicates if list item is considered optional.
        """
        return pulumi.get(self, "optional")

    @_builtins.property
    @pulumi.getter
    def priority(self) -> _builtins.int:
        """
        Set priority
        """
        return pulumi.get(self, "priority")

    @_builtins.property
    @pulumi.getter(name="priorityVariable")
    def priority_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "priority_variable")

    @_builtins.property
    @pulumi.getter
    def timer(self) -> _builtins.int:
        """
        Timer interval for successive advertisements, in milliseconds
        """
        return pulumi.get(self, "timer")

    @_builtins.property
    @pulumi.getter(name="timerVariable")
    def timer_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "timer_variable")

    @_builtins.property
    @pulumi.getter(name="trackOmp")
    def track_omp(self) -> _builtins.bool:
        """
        Track OMP status
        """
        return pulumi.get(self, "track_omp")

    @_builtins.property
    @pulumi.getter(name="trackOmpVariable")
    def track_omp_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "track_omp_variable")

    @_builtins.property
    @pulumi.getter(name="trackPrefixList")
    def track_prefix_list(self) -> _builtins.str:
        """
        Track Prefix List
        """
        return pulumi.get(self, "track_prefix_list")

    @_builtins.property
    @pulumi.getter(name="trackPrefixListVariable")
    def track_prefix_list_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "track_prefix_list_variable")


@pulumi.output_type
class GetCiscoVpnInterfaceFeatureTemplateIpv6VrrpIpv6AddressResult(dict):
    def __init__(__self__, *,
                 ipv6_link_local: _builtins.str,
                 ipv6_link_local_variable: _builtins.str,
                 optional: _builtins.bool,
                 prefix: _builtins.str,
                 prefix_variable: _builtins.str):
        """
        :param _builtins.str ipv6_link_local: Use link-local IPv6 Address
        :param _builtins.str ipv6_link_local_variable: Variable name
        :param _builtins.bool optional: Indicates if list item is considered optional.
        :param _builtins.str prefix: Assign Global IPv6 Prefix
        :param _builtins.str prefix_variable: Variable name
        """
        pulumi.set(__self__, "ipv6_link_local", ipv6_link_local)
        pulumi.set(__self__, "ipv6_link_local_variable", ipv6_link_local_variable)
        pulumi.set(__self__, "optional", optional)
        pulumi.set(__self__, "prefix", prefix)
        pulumi.set(__self__, "prefix_variable", prefix_variable)

    @_builtins.property
    @pulumi.getter(name="ipv6LinkLocal")
    def ipv6_link_local(self) -> _builtins.str:
        """
        Use link-local IPv6 Address
        """
        return pulumi.get(self, "ipv6_link_local")

    @_builtins.property
    @pulumi.getter(name="ipv6LinkLocalVariable")
    def ipv6_link_local_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "ipv6_link_local_variable")

    @_builtins.property
    @pulumi.getter
    def optional(self) -> _builtins.bool:
        """
        Indicates if list item is considered optional.
        """
        return pulumi.get(self, "optional")

    @_builtins.property
    @pulumi.getter
    def prefix(self) -> _builtins.str:
        """
        Assign Global IPv6 Prefix
        """
        return pulumi.get(self, "prefix")

    @_builtins.property
    @pulumi.getter(name="prefixVariable")
    def prefix_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "prefix_variable")


@pulumi.output_type
class GetCiscoVpnInterfaceFeatureTemplateStaticArpResult(dict):
    def __init__(__self__, *,
                 ip_address: _builtins.str,
                 ip_address_variable: _builtins.str,
                 mac: _builtins.str,
                 mac_variable: _builtins.str,
                 optional: _builtins.bool):
        """
        :param _builtins.str ip_address: IP Address
        :param _builtins.str ip_address_variable: Variable name
        :param _builtins.str mac: MAC address
        :param _builtins.str mac_variable: Variable name
        :param _builtins.bool optional: Indicates if list item is considered optional.
        """
        pulumi.set(__self__, "ip_address", ip_address)
        pulumi.set(__self__, "ip_address_variable", ip_address_variable)
        pulumi.set(__self__, "mac", mac)
        pulumi.set(__self__, "mac_variable", mac_variable)
        pulumi.set(__self__, "optional", optional)

    @_builtins.property
    @pulumi.getter(name="ipAddress")
    def ip_address(self) -> _builtins.str:
        """
        IP Address
        """
        return pulumi.get(self, "ip_address")

    @_builtins.property
    @pulumi.getter(name="ipAddressVariable")
    def ip_address_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "ip_address_variable")

    @_builtins.property
    @pulumi.getter
    def mac(self) -> _builtins.str:
        """
        MAC address
        """
        return pulumi.get(self, "mac")

    @_builtins.property
    @pulumi.getter(name="macVariable")
    def mac_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "mac_variable")

    @_builtins.property
    @pulumi.getter
    def optional(self) -> _builtins.bool:
        """
        Indicates if list item is considered optional.
        """
        return pulumi.get(self, "optional")


@pulumi.output_type
class GetCiscoVpnInterfaceFeatureTemplateStaticNat66EntryResult(dict):
    def __init__(__self__, *,
                 optional: _builtins.bool,
                 source_prefix: _builtins.str,
                 source_prefix_variable: _builtins.str,
                 source_vpn_id: _builtins.int,
                 source_vpn_id_variable: _builtins.str,
                 translated_source_prefix: _builtins.str,
                 translated_source_prefix_variable: _builtins.str):
        """
        :param _builtins.bool optional: Indicates if list item is considered optional.
        :param _builtins.str source_prefix: Source Prefix
        :param _builtins.str source_prefix_variable: Variable name
        :param _builtins.int source_vpn_id: Source VPN ID
        :param _builtins.str source_vpn_id_variable: Variable name
        :param _builtins.str translated_source_prefix: Translated Source Prefix
        :param _builtins.str translated_source_prefix_variable: Variable name
        """
        pulumi.set(__self__, "optional", optional)
        pulumi.set(__self__, "source_prefix", source_prefix)
        pulumi.set(__self__, "source_prefix_variable", source_prefix_variable)
        pulumi.set(__self__, "source_vpn_id", source_vpn_id)
        pulumi.set(__self__, "source_vpn_id_variable", source_vpn_id_variable)
        pulumi.set(__self__, "translated_source_prefix", translated_source_prefix)
        pulumi.set(__self__, "translated_source_prefix_variable", translated_source_prefix_variable)

    @_builtins.property
    @pulumi.getter
    def optional(self) -> _builtins.bool:
        """
        Indicates if list item is considered optional.
        """
        return pulumi.get(self, "optional")

    @_builtins.property
    @pulumi.getter(name="sourcePrefix")
    def source_prefix(self) -> _builtins.str:
        """
        Source Prefix
        """
        return pulumi.get(self, "source_prefix")

    @_builtins.property
    @pulumi.getter(name="sourcePrefixVariable")
    def source_prefix_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "source_prefix_variable")

    @_builtins.property
    @pulumi.getter(name="sourceVpnId")
    def source_vpn_id(self) -> _builtins.int:
        """
        Source VPN ID
        """
        return pulumi.get(self, "source_vpn_id")

    @_builtins.property
    @pulumi.getter(name="sourceVpnIdVariable")
    def source_vpn_id_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "source_vpn_id_variable")

    @_builtins.property
    @pulumi.getter(name="translatedSourcePrefix")
    def translated_source_prefix(self) -> _builtins.str:
        """
        Translated Source Prefix
        """
        return pulumi.get(self, "translated_source_prefix")

    @_builtins.property
    @pulumi.getter(name="translatedSourcePrefixVariable")
    def translated_source_prefix_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "translated_source_prefix_variable")


@pulumi.output_type
class GetCiscoVpnInterfaceFeatureTemplateStaticNatEntryResult(dict):
    def __init__(__self__, *,
                 optional: _builtins.bool,
                 source_ip: _builtins.str,
                 source_ip_variable: _builtins.str,
                 source_vpn_id: _builtins.int,
                 source_vpn_id_variable: _builtins.str,
                 static_nat_direction: _builtins.str,
                 static_nat_direction_variable: _builtins.str,
                 translate_ip: _builtins.str,
                 translate_ip_variable: _builtins.str):
        """
        :param _builtins.bool optional: Indicates if list item is considered optional.
        :param _builtins.str source_ip: Source IP address to be translated
        :param _builtins.str source_ip_variable: Variable name
        :param _builtins.int source_vpn_id: Configure VPN ID
        :param _builtins.str source_vpn_id_variable: Variable name
        :param _builtins.str static_nat_direction: Direction of static NAT translation
        :param _builtins.str static_nat_direction_variable: Variable name
        :param _builtins.str translate_ip: Statically translated source IP address
        :param _builtins.str translate_ip_variable: Variable name
        """
        pulumi.set(__self__, "optional", optional)
        pulumi.set(__self__, "source_ip", source_ip)
        pulumi.set(__self__, "source_ip_variable", source_ip_variable)
        pulumi.set(__self__, "source_vpn_id", source_vpn_id)
        pulumi.set(__self__, "source_vpn_id_variable", source_vpn_id_variable)
        pulumi.set(__self__, "static_nat_direction", static_nat_direction)
        pulumi.set(__self__, "static_nat_direction_variable", static_nat_direction_variable)
        pulumi.set(__self__, "translate_ip", translate_ip)
        pulumi.set(__self__, "translate_ip_variable", translate_ip_variable)

    @_builtins.property
    @pulumi.getter
    def optional(self) -> _builtins.bool:
        """
        Indicates if list item is considered optional.
        """
        return pulumi.get(self, "optional")

    @_builtins.property
    @pulumi.getter(name="sourceIp")
    def source_ip(self) -> _builtins.str:
        """
        Source IP address to be translated
        """
        return pulumi.get(self, "source_ip")

    @_builtins.property
    @pulumi.getter(name="sourceIpVariable")
    def source_ip_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "source_ip_variable")

    @_builtins.property
    @pulumi.getter(name="sourceVpnId")
    def source_vpn_id(self) -> _builtins.int:
        """
        Configure VPN ID
        """
        return pulumi.get(self, "source_vpn_id")

    @_builtins.property
    @pulumi.getter(name="sourceVpnIdVariable")
    def source_vpn_id_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "source_vpn_id_variable")

    @_builtins.property
    @pulumi.getter(name="staticNatDirection")
    def static_nat_direction(self) -> _builtins.str:
        """
        Direction of static NAT translation
        """
        return pulumi.get(self, "static_nat_direction")

    @_builtins.property
    @pulumi.getter(name="staticNatDirectionVariable")
    def static_nat_direction_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "static_nat_direction_variable")

    @_builtins.property
    @pulumi.getter(name="translateIp")
    def translate_ip(self) -> _builtins.str:
        """
        Statically translated source IP address
        """
        return pulumi.get(self, "translate_ip")

    @_builtins.property
    @pulumi.getter(name="translateIpVariable")
    def translate_ip_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "translate_ip_variable")


@pulumi.output_type
class GetCiscoVpnInterfaceFeatureTemplateStaticPortForwardEntryResult(dict):
    def __init__(__self__, *,
                 optional: _builtins.bool,
                 protocol: _builtins.str,
                 protocol_variable: _builtins.str,
                 source_ip: _builtins.str,
                 source_ip_variable: _builtins.str,
                 source_port: _builtins.int,
                 source_port_variable: _builtins.str,
                 source_vpn_id: _builtins.int,
                 source_vpn_id_variable: _builtins.str,
                 static_nat_direction: _builtins.str,
                 static_nat_direction_variable: _builtins.str,
                 translate_ip: _builtins.str,
                 translate_ip_variable: _builtins.str,
                 translate_port: _builtins.int,
                 translate_port_variable: _builtins.str):
        """
        :param _builtins.bool optional: Indicates if list item is considered optional.
        :param _builtins.str protocol: Protocol
        :param _builtins.str protocol_variable: Variable name
        :param _builtins.str source_ip: Source IP address to be translated
        :param _builtins.str source_ip_variable: Variable name
        :param _builtins.int source_port: Source Port
        :param _builtins.str source_port_variable: Variable name
        :param _builtins.int source_vpn_id: Configure VPN ID
        :param _builtins.str source_vpn_id_variable: Variable name
        :param _builtins.str static_nat_direction: Direction of static NAT translation
        :param _builtins.str static_nat_direction_variable: Variable name
        :param _builtins.str translate_ip: Statically translated source IP address
        :param _builtins.str translate_ip_variable: Variable name
        :param _builtins.int translate_port: Translate Port
        :param _builtins.str translate_port_variable: Variable name
        """
        pulumi.set(__self__, "optional", optional)
        pulumi.set(__self__, "protocol", protocol)
        pulumi.set(__self__, "protocol_variable", protocol_variable)
        pulumi.set(__self__, "source_ip", source_ip)
        pulumi.set(__self__, "source_ip_variable", source_ip_variable)
        pulumi.set(__self__, "source_port", source_port)
        pulumi.set(__self__, "source_port_variable", source_port_variable)
        pulumi.set(__self__, "source_vpn_id", source_vpn_id)
        pulumi.set(__self__, "source_vpn_id_variable", source_vpn_id_variable)
        pulumi.set(__self__, "static_nat_direction", static_nat_direction)
        pulumi.set(__self__, "static_nat_direction_variable", static_nat_direction_variable)
        pulumi.set(__self__, "translate_ip", translate_ip)
        pulumi.set(__self__, "translate_ip_variable", translate_ip_variable)
        pulumi.set(__self__, "translate_port", translate_port)
        pulumi.set(__self__, "translate_port_variable", translate_port_variable)

    @_builtins.property
    @pulumi.getter
    def optional(self) -> _builtins.bool:
        """
        Indicates if list item is considered optional.
        """
        return pulumi.get(self, "optional")

    @_builtins.property
    @pulumi.getter
    def protocol(self) -> _builtins.str:
        """
        Protocol
        """
        return pulumi.get(self, "protocol")

    @_builtins.property
    @pulumi.getter(name="protocolVariable")
    def protocol_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "protocol_variable")

    @_builtins.property
    @pulumi.getter(name="sourceIp")
    def source_ip(self) -> _builtins.str:
        """
        Source IP address to be translated
        """
        return pulumi.get(self, "source_ip")

    @_builtins.property
    @pulumi.getter(name="sourceIpVariable")
    def source_ip_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "source_ip_variable")

    @_builtins.property
    @pulumi.getter(name="sourcePort")
    def source_port(self) -> _builtins.int:
        """
        Source Port
        """
        return pulumi.get(self, "source_port")

    @_builtins.property
    @pulumi.getter(name="sourcePortVariable")
    def source_port_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "source_port_variable")

    @_builtins.property
    @pulumi.getter(name="sourceVpnId")
    def source_vpn_id(self) -> _builtins.int:
        """
        Configure VPN ID
        """
        return pulumi.get(self, "source_vpn_id")

    @_builtins.property
    @pulumi.getter(name="sourceVpnIdVariable")
    def source_vpn_id_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "source_vpn_id_variable")

    @_builtins.property
    @pulumi.getter(name="staticNatDirection")
    def static_nat_direction(self) -> _builtins.str:
        """
        Direction of static NAT translation
        """
        return pulumi.get(self, "static_nat_direction")

    @_builtins.property
    @pulumi.getter(name="staticNatDirectionVariable")
    def static_nat_direction_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "static_nat_direction_variable")

    @_builtins.property
    @pulumi.getter(name="translateIp")
    def translate_ip(self) -> _builtins.str:
        """
        Statically translated source IP address
        """
        return pulumi.get(self, "translate_ip")

    @_builtins.property
    @pulumi.getter(name="translateIpVariable")
    def translate_ip_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "translate_ip_variable")

    @_builtins.property
    @pulumi.getter(name="translatePort")
    def translate_port(self) -> _builtins.int:
        """
        Translate Port
        """
        return pulumi.get(self, "translate_port")

    @_builtins.property
    @pulumi.getter(name="translatePortVariable")
    def translate_port_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "translate_port_variable")


@pulumi.output_type
class GetCiscoVpnInterfaceFeatureTemplateTunnelInterfaceEncapsulationResult(dict):
    def __init__(__self__, *,
                 encapsulation: _builtins.str,
                 optional: _builtins.bool,
                 preference: _builtins.int,
                 preference_variable: _builtins.str,
                 weight: _builtins.int,
                 weight_variable: _builtins.str):
        """
        :param _builtins.str encapsulation: Encapsulation
        :param _builtins.bool optional: Indicates if list item is considered optional.
        :param _builtins.int preference: Set preference for TLOC
        :param _builtins.str preference_variable: Variable name
        :param _builtins.int weight: Set weight for TLOC
        :param _builtins.str weight_variable: Variable name
        """
        pulumi.set(__self__, "encapsulation", encapsulation)
        pulumi.set(__self__, "optional", optional)
        pulumi.set(__self__, "preference", preference)
        pulumi.set(__self__, "preference_variable", preference_variable)
        pulumi.set(__self__, "weight", weight)
        pulumi.set(__self__, "weight_variable", weight_variable)

    @_builtins.property
    @pulumi.getter
    def encapsulation(self) -> _builtins.str:
        """
        Encapsulation
        """
        return pulumi.get(self, "encapsulation")

    @_builtins.property
    @pulumi.getter
    def optional(self) -> _builtins.bool:
        """
        Indicates if list item is considered optional.
        """
        return pulumi.get(self, "optional")

    @_builtins.property
    @pulumi.getter
    def preference(self) -> _builtins.int:
        """
        Set preference for TLOC
        """
        return pulumi.get(self, "preference")

    @_builtins.property
    @pulumi.getter(name="preferenceVariable")
    def preference_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "preference_variable")

    @_builtins.property
    @pulumi.getter
    def weight(self) -> _builtins.int:
        """
        Set weight for TLOC
        """
        return pulumi.get(self, "weight")

    @_builtins.property
    @pulumi.getter(name="weightVariable")
    def weight_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "weight_variable")


@pulumi.output_type
class GetCiscoVpnInterfaceGreFeatureTemplateAccessListResult(dict):
    def __init__(__self__, *,
                 acl_name: _builtins.str,
                 acl_name_variable: _builtins.str,
                 direction: _builtins.str,
                 optional: _builtins.bool):
        """
        :param _builtins.str acl_name: Name of access list
        :param _builtins.str acl_name_variable: Variable name
        :param _builtins.str direction: Direction
        :param _builtins.bool optional: Indicates if list item is considered optional.
        """
        pulumi.set(__self__, "acl_name", acl_name)
        pulumi.set(__self__, "acl_name_variable", acl_name_variable)
        pulumi.set(__self__, "direction", direction)
        pulumi.set(__self__, "optional", optional)

    @_builtins.property
    @pulumi.getter(name="aclName")
    def acl_name(self) -> _builtins.str:
        """
        Name of access list
        """
        return pulumi.get(self, "acl_name")

    @_builtins.property
    @pulumi.getter(name="aclNameVariable")
    def acl_name_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "acl_name_variable")

    @_builtins.property
    @pulumi.getter
    def direction(self) -> _builtins.str:
        """
        Direction
        """
        return pulumi.get(self, "direction")

    @_builtins.property
    @pulumi.getter
    def optional(self) -> _builtins.bool:
        """
        Indicates if list item is considered optional.
        """
        return pulumi.get(self, "optional")


@pulumi.output_type
class GetCiscoWirelessLanFeatureTemplateSsidResult(dict):
    def __init__(__self__, *,
                 admin_state: _builtins.bool,
                 admin_state_variable: _builtins.str,
                 broadcast_ssid: _builtins.bool,
                 optional: _builtins.bool,
                 passphrase: _builtins.str,
                 passphrase_variable: _builtins.str,
                 qos_profile: _builtins.str,
                 qos_profile_variable: _builtins.str,
                 radio_type: _builtins.str,
                 radio_type_variable: _builtins.str,
                 radius_server_ip: _builtins.str,
                 radius_server_ip_variable: _builtins.str,
                 radius_server_port: _builtins.int,
                 radius_server_port_variable: _builtins.str,
                 radius_server_secret: _builtins.str,
                 radius_server_secret_variable: _builtins.str,
                 security_type: _builtins.str,
                 security_type_variable: _builtins.str,
                 vlan_id: _builtins.int,
                 vlan_id_variable: _builtins.str,
                 wireless_network_name: _builtins.str):
        """
        :param _builtins.bool admin_state: Set admin state
        :param _builtins.str admin_state_variable: Variable name
        :param _builtins.bool broadcast_ssid: Enable broadcast SSID
        :param _builtins.bool optional: Indicates if list item is considered optional.
        :param _builtins.str passphrase: Set passphrase
        :param _builtins.str passphrase_variable: Variable name
        :param _builtins.str qos_profile: Select QoS profile
        :param _builtins.str qos_profile_variable: Variable name
        :param _builtins.str radio_type: Select radio type
        :param _builtins.str radio_type_variable: Variable name
        :param _builtins.str radius_server_ip: Set RADIUS server IP
        :param _builtins.str radius_server_ip_variable: Variable name
        :param _builtins.int radius_server_port: Set RADIUS server authentication port
        :param _builtins.str radius_server_port_variable: Variable name
        :param _builtins.str radius_server_secret: Set RADIUS server shared secret
        :param _builtins.str radius_server_secret_variable: Variable name
        :param _builtins.str security_type: Select security type
        :param _builtins.str security_type_variable: Variable name
        :param _builtins.int vlan_id: Set VLAN ID
        :param _builtins.str vlan_id_variable: Variable name
        :param _builtins.str wireless_network_name: Configure wlan SSID
        """
        pulumi.set(__self__, "admin_state", admin_state)
        pulumi.set(__self__, "admin_state_variable", admin_state_variable)
        pulumi.set(__self__, "broadcast_ssid", broadcast_ssid)
        pulumi.set(__self__, "optional", optional)
        pulumi.set(__self__, "passphrase", passphrase)
        pulumi.set(__self__, "passphrase_variable", passphrase_variable)
        pulumi.set(__self__, "qos_profile", qos_profile)
        pulumi.set(__self__, "qos_profile_variable", qos_profile_variable)
        pulumi.set(__self__, "radio_type", radio_type)
        pulumi.set(__self__, "radio_type_variable", radio_type_variable)
        pulumi.set(__self__, "radius_server_ip", radius_server_ip)
        pulumi.set(__self__, "radius_server_ip_variable", radius_server_ip_variable)
        pulumi.set(__self__, "radius_server_port", radius_server_port)
        pulumi.set(__self__, "radius_server_port_variable", radius_server_port_variable)
        pulumi.set(__self__, "radius_server_secret", radius_server_secret)
        pulumi.set(__self__, "radius_server_secret_variable", radius_server_secret_variable)
        pulumi.set(__self__, "security_type", security_type)
        pulumi.set(__self__, "security_type_variable", security_type_variable)
        pulumi.set(__self__, "vlan_id", vlan_id)
        pulumi.set(__self__, "vlan_id_variable", vlan_id_variable)
        pulumi.set(__self__, "wireless_network_name", wireless_network_name)

    @_builtins.property
    @pulumi.getter(name="adminState")
    def admin_state(self) -> _builtins.bool:
        """
        Set admin state
        """
        return pulumi.get(self, "admin_state")

    @_builtins.property
    @pulumi.getter(name="adminStateVariable")
    def admin_state_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "admin_state_variable")

    @_builtins.property
    @pulumi.getter(name="broadcastSsid")
    def broadcast_ssid(self) -> _builtins.bool:
        """
        Enable broadcast SSID
        """
        return pulumi.get(self, "broadcast_ssid")

    @_builtins.property
    @pulumi.getter
    def optional(self) -> _builtins.bool:
        """
        Indicates if list item is considered optional.
        """
        return pulumi.get(self, "optional")

    @_builtins.property
    @pulumi.getter
    def passphrase(self) -> _builtins.str:
        """
        Set passphrase
        """
        return pulumi.get(self, "passphrase")

    @_builtins.property
    @pulumi.getter(name="passphraseVariable")
    def passphrase_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "passphrase_variable")

    @_builtins.property
    @pulumi.getter(name="qosProfile")
    def qos_profile(self) -> _builtins.str:
        """
        Select QoS profile
        """
        return pulumi.get(self, "qos_profile")

    @_builtins.property
    @pulumi.getter(name="qosProfileVariable")
    def qos_profile_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "qos_profile_variable")

    @_builtins.property
    @pulumi.getter(name="radioType")
    def radio_type(self) -> _builtins.str:
        """
        Select radio type
        """
        return pulumi.get(self, "radio_type")

    @_builtins.property
    @pulumi.getter(name="radioTypeVariable")
    def radio_type_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "radio_type_variable")

    @_builtins.property
    @pulumi.getter(name="radiusServerIp")
    def radius_server_ip(self) -> _builtins.str:
        """
        Set RADIUS server IP
        """
        return pulumi.get(self, "radius_server_ip")

    @_builtins.property
    @pulumi.getter(name="radiusServerIpVariable")
    def radius_server_ip_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "radius_server_ip_variable")

    @_builtins.property
    @pulumi.getter(name="radiusServerPort")
    def radius_server_port(self) -> _builtins.int:
        """
        Set RADIUS server authentication port
        """
        return pulumi.get(self, "radius_server_port")

    @_builtins.property
    @pulumi.getter(name="radiusServerPortVariable")
    def radius_server_port_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "radius_server_port_variable")

    @_builtins.property
    @pulumi.getter(name="radiusServerSecret")
    def radius_server_secret(self) -> _builtins.str:
        """
        Set RADIUS server shared secret
        """
        return pulumi.get(self, "radius_server_secret")

    @_builtins.property
    @pulumi.getter(name="radiusServerSecretVariable")
    def radius_server_secret_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "radius_server_secret_variable")

    @_builtins.property
    @pulumi.getter(name="securityType")
    def security_type(self) -> _builtins.str:
        """
        Select security type
        """
        return pulumi.get(self, "security_type")

    @_builtins.property
    @pulumi.getter(name="securityTypeVariable")
    def security_type_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "security_type_variable")

    @_builtins.property
    @pulumi.getter(name="vlanId")
    def vlan_id(self) -> _builtins.int:
        """
        Set VLAN ID
        """
        return pulumi.get(self, "vlan_id")

    @_builtins.property
    @pulumi.getter(name="vlanIdVariable")
    def vlan_id_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "vlan_id_variable")

    @_builtins.property
    @pulumi.getter(name="wirelessNetworkName")
    def wireless_network_name(self) -> _builtins.str:
        """
        Configure wlan SSID
        """
        return pulumi.get(self, "wireless_network_name")


@pulumi.output_type
class GetColorListPolicyObjectEntryResult(dict):
    def __init__(__self__, *,
                 color: _builtins.str):
        """
        :param _builtins.str color: Color
        """
        pulumi.set(__self__, "color", color)

    @_builtins.property
    @pulumi.getter
    def color(self) -> _builtins.str:
        """
        Color
        """
        return pulumi.get(self, "color")


@pulumi.output_type
class GetConfigurationGroupDeviceResult(dict):
    def __init__(__self__, *,
                 deploy: _builtins.bool,
                 id: _builtins.str,
                 variables: Sequence['outputs.GetConfigurationGroupDeviceVariableResult']):
        """
        :param _builtins.bool deploy: Deploy to device if enabled.
        :param _builtins.str id: Device ID
        :param Sequence['GetConfigurationGroupDeviceVariableArgs'] variables: List of variables
        """
        pulumi.set(__self__, "deploy", deploy)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "variables", variables)

    @_builtins.property
    @pulumi.getter
    def deploy(self) -> _builtins.bool:
        """
        Deploy to device if enabled.
        """
        return pulumi.get(self, "deploy")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        Device ID
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter
    def variables(self) -> Sequence['outputs.GetConfigurationGroupDeviceVariableResult']:
        """
        List of variables
        """
        return pulumi.get(self, "variables")


@pulumi.output_type
class GetConfigurationGroupDeviceVariableResult(dict):
    def __init__(__self__, *,
                 list_values: Sequence[_builtins.str],
                 name: _builtins.str,
                 value: _builtins.str):
        """
        :param Sequence[_builtins.str] list_values: Use this instead of `value` in case value is of type `List`.
        :param _builtins.str name: Variable name
        :param _builtins.str value: Variable value
        """
        pulumi.set(__self__, "list_values", list_values)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "value", value)

    @_builtins.property
    @pulumi.getter(name="listValues")
    def list_values(self) -> Sequence[_builtins.str]:
        """
        Use this instead of `value` in case value is of type `List`.
        """
        return pulumi.get(self, "list_values")

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def value(self) -> _builtins.str:
        """
        Variable value
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class GetConfigurationGroupTopologyDeviceResult(dict):
    def __init__(__self__, *,
                 criteria_attribute: _builtins.str,
                 criteria_value: _builtins.str,
                 unsupported_features: Sequence['outputs.GetConfigurationGroupTopologyDeviceUnsupportedFeatureResult']):
        """
        :param _builtins.str criteria_attribute: Criteria attribute
        :param _builtins.str criteria_value: Criteria value
        :param Sequence['GetConfigurationGroupTopologyDeviceUnsupportedFeatureArgs'] unsupported_features: List of unsupported features
        """
        pulumi.set(__self__, "criteria_attribute", criteria_attribute)
        pulumi.set(__self__, "criteria_value", criteria_value)
        pulumi.set(__self__, "unsupported_features", unsupported_features)

    @_builtins.property
    @pulumi.getter(name="criteriaAttribute")
    def criteria_attribute(self) -> _builtins.str:
        """
        Criteria attribute
        """
        return pulumi.get(self, "criteria_attribute")

    @_builtins.property
    @pulumi.getter(name="criteriaValue")
    def criteria_value(self) -> _builtins.str:
        """
        Criteria value
        """
        return pulumi.get(self, "criteria_value")

    @_builtins.property
    @pulumi.getter(name="unsupportedFeatures")
    def unsupported_features(self) -> Sequence['outputs.GetConfigurationGroupTopologyDeviceUnsupportedFeatureResult']:
        """
        List of unsupported features
        """
        return pulumi.get(self, "unsupported_features")


@pulumi.output_type
class GetConfigurationGroupTopologyDeviceUnsupportedFeatureResult(dict):
    def __init__(__self__, *,
                 parcel_id: _builtins.str,
                 parcel_type: _builtins.str):
        """
        :param _builtins.str parcel_id: Parcel ID
        :param _builtins.str parcel_type: Parcel type
        """
        pulumi.set(__self__, "parcel_id", parcel_id)
        pulumi.set(__self__, "parcel_type", parcel_type)

    @_builtins.property
    @pulumi.getter(name="parcelId")
    def parcel_id(self) -> _builtins.str:
        """
        Parcel ID
        """
        return pulumi.get(self, "parcel_id")

    @_builtins.property
    @pulumi.getter(name="parcelType")
    def parcel_type(self) -> _builtins.str:
        """
        Parcel type
        """
        return pulumi.get(self, "parcel_type")


@pulumi.output_type
class GetCustomControlTopologyPolicyDefinitionSequenceResult(dict):
    def __init__(__self__, *,
                 action_entries: Sequence['outputs.GetCustomControlTopologyPolicyDefinitionSequenceActionEntryResult'],
                 base_action: _builtins.str,
                 id: _builtins.int,
                 ip_type: _builtins.str,
                 match_entries: Sequence['outputs.GetCustomControlTopologyPolicyDefinitionSequenceMatchEntryResult'],
                 name: _builtins.str,
                 type: _builtins.str):
        """
        :param Sequence['GetCustomControlTopologyPolicyDefinitionSequenceActionEntryArgs'] action_entries: List of action entries
        :param _builtins.str base_action: Base action, either `accept` or `reject`
        :param _builtins.int id: Sequence ID
        :param _builtins.str ip_type: Sequence IP type, either `ipv4`, `ipv6` or `all`
        :param Sequence['GetCustomControlTopologyPolicyDefinitionSequenceMatchEntryArgs'] match_entries: List of match entries
        :param _builtins.str name: Sequence name
        :param _builtins.str type: Sequence type, either `route` or `tloc`
        """
        pulumi.set(__self__, "action_entries", action_entries)
        pulumi.set(__self__, "base_action", base_action)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "ip_type", ip_type)
        pulumi.set(__self__, "match_entries", match_entries)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "type", type)

    @_builtins.property
    @pulumi.getter(name="actionEntries")
    def action_entries(self) -> Sequence['outputs.GetCustomControlTopologyPolicyDefinitionSequenceActionEntryResult']:
        """
        List of action entries
        """
        return pulumi.get(self, "action_entries")

    @_builtins.property
    @pulumi.getter(name="baseAction")
    def base_action(self) -> _builtins.str:
        """
        Base action, either `accept` or `reject`
        """
        return pulumi.get(self, "base_action")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.int:
        """
        Sequence ID
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter(name="ipType")
    def ip_type(self) -> _builtins.str:
        """
        Sequence IP type, either `ipv4`, `ipv6` or `all`
        """
        return pulumi.get(self, "ip_type")

    @_builtins.property
    @pulumi.getter(name="matchEntries")
    def match_entries(self) -> Sequence['outputs.GetCustomControlTopologyPolicyDefinitionSequenceMatchEntryResult']:
        """
        List of match entries
        """
        return pulumi.get(self, "match_entries")

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        """
        Sequence name
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def type(self) -> _builtins.str:
        """
        Sequence type, either `route` or `tloc`
        """
        return pulumi.get(self, "type")


@pulumi.output_type
class GetCustomControlTopologyPolicyDefinitionSequenceActionEntryResult(dict):
    def __init__(__self__, *,
                 export_to_vpn_list_id: _builtins.str,
                 export_to_vpn_list_version: _builtins.int,
                 set_parameters: Sequence['outputs.GetCustomControlTopologyPolicyDefinitionSequenceActionEntrySetParameterResult'],
                 type: _builtins.str):
        """
        :param _builtins.str export_to_vpn_list_id: Export to VPN list ID
        :param _builtins.int export_to_vpn_list_version: Export to VPN list version
        :param Sequence['GetCustomControlTopologyPolicyDefinitionSequenceActionEntrySetParameterArgs'] set_parameters: List of set parameters
        :param _builtins.str type: Type of action entry
        """
        pulumi.set(__self__, "export_to_vpn_list_id", export_to_vpn_list_id)
        pulumi.set(__self__, "export_to_vpn_list_version", export_to_vpn_list_version)
        pulumi.set(__self__, "set_parameters", set_parameters)
        pulumi.set(__self__, "type", type)

    @_builtins.property
    @pulumi.getter(name="exportToVpnListId")
    def export_to_vpn_list_id(self) -> _builtins.str:
        """
        Export to VPN list ID
        """
        return pulumi.get(self, "export_to_vpn_list_id")

    @_builtins.property
    @pulumi.getter(name="exportToVpnListVersion")
    def export_to_vpn_list_version(self) -> _builtins.int:
        """
        Export to VPN list version
        """
        return pulumi.get(self, "export_to_vpn_list_version")

    @_builtins.property
    @pulumi.getter(name="setParameters")
    def set_parameters(self) -> Sequence['outputs.GetCustomControlTopologyPolicyDefinitionSequenceActionEntrySetParameterResult']:
        """
        List of set parameters
        """
        return pulumi.get(self, "set_parameters")

    @_builtins.property
    @pulumi.getter
    def type(self) -> _builtins.str:
        """
        Type of action entry
        """
        return pulumi.get(self, "type")


@pulumi.output_type
class GetCustomControlTopologyPolicyDefinitionSequenceActionEntrySetParameterResult(dict):
    def __init__(__self__, *,
                 community: _builtins.str,
                 community_additive: _builtins.bool,
                 omp_tag: _builtins.int,
                 preference: _builtins.int,
                 service_tloc_color: _builtins.str,
                 service_tloc_encapsulation: _builtins.str,
                 service_tloc_ip: _builtins.str,
                 service_tloc_list_id: _builtins.str,
                 service_tloc_list_version: _builtins.int,
                 service_type: _builtins.str,
                 service_vpn_id: _builtins.int,
                 tloc_action: _builtins.str,
                 tloc_color: _builtins.str,
                 tloc_encapsulation: _builtins.str,
                 tloc_ip: _builtins.str,
                 tloc_list_id: _builtins.str,
                 tloc_list_version: _builtins.int,
                 type: _builtins.str):
        """
        :param _builtins.str community: Community value, e.g. `1000:10000` or `internet` or `local-AS`
        :param _builtins.bool community_additive: Community additive
        :param _builtins.int omp_tag: OMP tag
        :param _builtins.int preference: Preference
        :param _builtins.str service_tloc_color: Service TLOC color
        :param _builtins.str service_tloc_encapsulation: Service TLOC encapsulation
        :param _builtins.str service_tloc_ip: Service TLOC IP address
        :param _builtins.str service_tloc_list_id: Service TLOC list ID
        :param _builtins.int service_tloc_list_version: Service TLOC list version
        :param _builtins.str service_type: Service type
        :param _builtins.int service_vpn_id: Service VPN ID
        :param _builtins.str tloc_action: TLOC action
        :param _builtins.str tloc_color: TLOC color
        :param _builtins.str tloc_encapsulation: TLOC encapsulation
        :param _builtins.str tloc_ip: TLOC IP address
        :param _builtins.str tloc_list_id: TLOC list ID
        :param _builtins.int tloc_list_version: TLOC list version
        :param _builtins.str type: Type of set parameter
        """
        pulumi.set(__self__, "community", community)
        pulumi.set(__self__, "community_additive", community_additive)
        pulumi.set(__self__, "omp_tag", omp_tag)
        pulumi.set(__self__, "preference", preference)
        pulumi.set(__self__, "service_tloc_color", service_tloc_color)
        pulumi.set(__self__, "service_tloc_encapsulation", service_tloc_encapsulation)
        pulumi.set(__self__, "service_tloc_ip", service_tloc_ip)
        pulumi.set(__self__, "service_tloc_list_id", service_tloc_list_id)
        pulumi.set(__self__, "service_tloc_list_version", service_tloc_list_version)
        pulumi.set(__self__, "service_type", service_type)
        pulumi.set(__self__, "service_vpn_id", service_vpn_id)
        pulumi.set(__self__, "tloc_action", tloc_action)
        pulumi.set(__self__, "tloc_color", tloc_color)
        pulumi.set(__self__, "tloc_encapsulation", tloc_encapsulation)
        pulumi.set(__self__, "tloc_ip", tloc_ip)
        pulumi.set(__self__, "tloc_list_id", tloc_list_id)
        pulumi.set(__self__, "tloc_list_version", tloc_list_version)
        pulumi.set(__self__, "type", type)

    @_builtins.property
    @pulumi.getter
    def community(self) -> _builtins.str:
        """
        Community value, e.g. `1000:10000` or `internet` or `local-AS`
        """
        return pulumi.get(self, "community")

    @_builtins.property
    @pulumi.getter(name="communityAdditive")
    def community_additive(self) -> _builtins.bool:
        """
        Community additive
        """
        return pulumi.get(self, "community_additive")

    @_builtins.property
    @pulumi.getter(name="ompTag")
    def omp_tag(self) -> _builtins.int:
        """
        OMP tag
        """
        return pulumi.get(self, "omp_tag")

    @_builtins.property
    @pulumi.getter
    def preference(self) -> _builtins.int:
        """
        Preference
        """
        return pulumi.get(self, "preference")

    @_builtins.property
    @pulumi.getter(name="serviceTlocColor")
    def service_tloc_color(self) -> _builtins.str:
        """
        Service TLOC color
        """
        return pulumi.get(self, "service_tloc_color")

    @_builtins.property
    @pulumi.getter(name="serviceTlocEncapsulation")
    def service_tloc_encapsulation(self) -> _builtins.str:
        """
        Service TLOC encapsulation
        """
        return pulumi.get(self, "service_tloc_encapsulation")

    @_builtins.property
    @pulumi.getter(name="serviceTlocIp")
    def service_tloc_ip(self) -> _builtins.str:
        """
        Service TLOC IP address
        """
        return pulumi.get(self, "service_tloc_ip")

    @_builtins.property
    @pulumi.getter(name="serviceTlocListId")
    def service_tloc_list_id(self) -> _builtins.str:
        """
        Service TLOC list ID
        """
        return pulumi.get(self, "service_tloc_list_id")

    @_builtins.property
    @pulumi.getter(name="serviceTlocListVersion")
    def service_tloc_list_version(self) -> _builtins.int:
        """
        Service TLOC list version
        """
        return pulumi.get(self, "service_tloc_list_version")

    @_builtins.property
    @pulumi.getter(name="serviceType")
    def service_type(self) -> _builtins.str:
        """
        Service type
        """
        return pulumi.get(self, "service_type")

    @_builtins.property
    @pulumi.getter(name="serviceVpnId")
    def service_vpn_id(self) -> _builtins.int:
        """
        Service VPN ID
        """
        return pulumi.get(self, "service_vpn_id")

    @_builtins.property
    @pulumi.getter(name="tlocAction")
    def tloc_action(self) -> _builtins.str:
        """
        TLOC action
        """
        return pulumi.get(self, "tloc_action")

    @_builtins.property
    @pulumi.getter(name="tlocColor")
    def tloc_color(self) -> _builtins.str:
        """
        TLOC color
        """
        return pulumi.get(self, "tloc_color")

    @_builtins.property
    @pulumi.getter(name="tlocEncapsulation")
    def tloc_encapsulation(self) -> _builtins.str:
        """
        TLOC encapsulation
        """
        return pulumi.get(self, "tloc_encapsulation")

    @_builtins.property
    @pulumi.getter(name="tlocIp")
    def tloc_ip(self) -> _builtins.str:
        """
        TLOC IP address
        """
        return pulumi.get(self, "tloc_ip")

    @_builtins.property
    @pulumi.getter(name="tlocListId")
    def tloc_list_id(self) -> _builtins.str:
        """
        TLOC list ID
        """
        return pulumi.get(self, "tloc_list_id")

    @_builtins.property
    @pulumi.getter(name="tlocListVersion")
    def tloc_list_version(self) -> _builtins.int:
        """
        TLOC list version
        """
        return pulumi.get(self, "tloc_list_version")

    @_builtins.property
    @pulumi.getter
    def type(self) -> _builtins.str:
        """
        Type of set parameter
        """
        return pulumi.get(self, "type")


@pulumi.output_type
class GetCustomControlTopologyPolicyDefinitionSequenceMatchEntryResult(dict):
    def __init__(__self__, *,
                 carrier: _builtins.str,
                 color_list_id: _builtins.str,
                 color_list_version: _builtins.int,
                 community_list_id: _builtins.str,
                 community_list_version: _builtins.int,
                 domain_id: _builtins.int,
                 expanded_community_list_id: _builtins.str,
                 expanded_community_list_version: _builtins.int,
                 group_id: _builtins.int,
                 omp_tag: _builtins.int,
                 origin: _builtins.str,
                 originator: _builtins.str,
                 path_type: _builtins.str,
                 preference: _builtins.int,
                 prefix_list_id: _builtins.str,
                 prefix_list_version: _builtins.int,
                 site_id: _builtins.int,
                 site_list_id: _builtins.str,
                 site_list_version: _builtins.int,
                 tloc_color: _builtins.str,
                 tloc_encapsulation: _builtins.str,
                 tloc_ip: _builtins.str,
                 tloc_list_id: _builtins.str,
                 tloc_list_version: _builtins.int,
                 type: _builtins.str,
                 vpn_id: _builtins.int,
                 vpn_list_id: _builtins.str,
                 vpn_list_version: _builtins.int):
        """
        :param _builtins.str carrier: Carrier
        :param _builtins.str color_list_id: Color list ID
        :param _builtins.int color_list_version: Color list version
        :param _builtins.str community_list_id: Community list ID
        :param _builtins.int community_list_version: Community list version
        :param _builtins.int domain_id: Domain ID
        :param _builtins.str expanded_community_list_id: Expanded community list ID
        :param _builtins.int expanded_community_list_version: Expanded community list version
        :param _builtins.int group_id: Group ID
        :param _builtins.int omp_tag: OMP tag
        :param _builtins.str origin: Origin
        :param _builtins.str originator: Originator IP
        :param _builtins.str path_type: Path type
        :param _builtins.int preference: Preference
        :param _builtins.str prefix_list_id: Prefix list ID
        :param _builtins.int prefix_list_version: Prefix list version
        :param _builtins.int site_id: Site ID
        :param _builtins.str site_list_id: Site list ID
        :param _builtins.int site_list_version: Site list version
        :param _builtins.str tloc_color: TLOC color
        :param _builtins.str tloc_encapsulation: TLOC encapsulation
        :param _builtins.str tloc_ip: TLOC IP address
        :param _builtins.str tloc_list_id: TLOC list ID
        :param _builtins.int tloc_list_version: TLOC list version
        :param _builtins.str type: Type of match entry
        :param _builtins.int vpn_id: VPN ID
        :param _builtins.str vpn_list_id: VPN list ID
        :param _builtins.int vpn_list_version: VPN list version
        """
        pulumi.set(__self__, "carrier", carrier)
        pulumi.set(__self__, "color_list_id", color_list_id)
        pulumi.set(__self__, "color_list_version", color_list_version)
        pulumi.set(__self__, "community_list_id", community_list_id)
        pulumi.set(__self__, "community_list_version", community_list_version)
        pulumi.set(__self__, "domain_id", domain_id)
        pulumi.set(__self__, "expanded_community_list_id", expanded_community_list_id)
        pulumi.set(__self__, "expanded_community_list_version", expanded_community_list_version)
        pulumi.set(__self__, "group_id", group_id)
        pulumi.set(__self__, "omp_tag", omp_tag)
        pulumi.set(__self__, "origin", origin)
        pulumi.set(__self__, "originator", originator)
        pulumi.set(__self__, "path_type", path_type)
        pulumi.set(__self__, "preference", preference)
        pulumi.set(__self__, "prefix_list_id", prefix_list_id)
        pulumi.set(__self__, "prefix_list_version", prefix_list_version)
        pulumi.set(__self__, "site_id", site_id)
        pulumi.set(__self__, "site_list_id", site_list_id)
        pulumi.set(__self__, "site_list_version", site_list_version)
        pulumi.set(__self__, "tloc_color", tloc_color)
        pulumi.set(__self__, "tloc_encapsulation", tloc_encapsulation)
        pulumi.set(__self__, "tloc_ip", tloc_ip)
        pulumi.set(__self__, "tloc_list_id", tloc_list_id)
        pulumi.set(__self__, "tloc_list_version", tloc_list_version)
        pulumi.set(__self__, "type", type)
        pulumi.set(__self__, "vpn_id", vpn_id)
        pulumi.set(__self__, "vpn_list_id", vpn_list_id)
        pulumi.set(__self__, "vpn_list_version", vpn_list_version)

    @_builtins.property
    @pulumi.getter
    def carrier(self) -> _builtins.str:
        """
        Carrier
        """
        return pulumi.get(self, "carrier")

    @_builtins.property
    @pulumi.getter(name="colorListId")
    def color_list_id(self) -> _builtins.str:
        """
        Color list ID
        """
        return pulumi.get(self, "color_list_id")

    @_builtins.property
    @pulumi.getter(name="colorListVersion")
    def color_list_version(self) -> _builtins.int:
        """
        Color list version
        """
        return pulumi.get(self, "color_list_version")

    @_builtins.property
    @pulumi.getter(name="communityListId")
    def community_list_id(self) -> _builtins.str:
        """
        Community list ID
        """
        return pulumi.get(self, "community_list_id")

    @_builtins.property
    @pulumi.getter(name="communityListVersion")
    def community_list_version(self) -> _builtins.int:
        """
        Community list version
        """
        return pulumi.get(self, "community_list_version")

    @_builtins.property
    @pulumi.getter(name="domainId")
    def domain_id(self) -> _builtins.int:
        """
        Domain ID
        """
        return pulumi.get(self, "domain_id")

    @_builtins.property
    @pulumi.getter(name="expandedCommunityListId")
    def expanded_community_list_id(self) -> _builtins.str:
        """
        Expanded community list ID
        """
        return pulumi.get(self, "expanded_community_list_id")

    @_builtins.property
    @pulumi.getter(name="expandedCommunityListVersion")
    def expanded_community_list_version(self) -> _builtins.int:
        """
        Expanded community list version
        """
        return pulumi.get(self, "expanded_community_list_version")

    @_builtins.property
    @pulumi.getter(name="groupId")
    def group_id(self) -> _builtins.int:
        """
        Group ID
        """
        return pulumi.get(self, "group_id")

    @_builtins.property
    @pulumi.getter(name="ompTag")
    def omp_tag(self) -> _builtins.int:
        """
        OMP tag
        """
        return pulumi.get(self, "omp_tag")

    @_builtins.property
    @pulumi.getter
    def origin(self) -> _builtins.str:
        """
        Origin
        """
        return pulumi.get(self, "origin")

    @_builtins.property
    @pulumi.getter
    def originator(self) -> _builtins.str:
        """
        Originator IP
        """
        return pulumi.get(self, "originator")

    @_builtins.property
    @pulumi.getter(name="pathType")
    def path_type(self) -> _builtins.str:
        """
        Path type
        """
        return pulumi.get(self, "path_type")

    @_builtins.property
    @pulumi.getter
    def preference(self) -> _builtins.int:
        """
        Preference
        """
        return pulumi.get(self, "preference")

    @_builtins.property
    @pulumi.getter(name="prefixListId")
    def prefix_list_id(self) -> _builtins.str:
        """
        Prefix list ID
        """
        return pulumi.get(self, "prefix_list_id")

    @_builtins.property
    @pulumi.getter(name="prefixListVersion")
    def prefix_list_version(self) -> _builtins.int:
        """
        Prefix list version
        """
        return pulumi.get(self, "prefix_list_version")

    @_builtins.property
    @pulumi.getter(name="siteId")
    def site_id(self) -> _builtins.int:
        """
        Site ID
        """
        return pulumi.get(self, "site_id")

    @_builtins.property
    @pulumi.getter(name="siteListId")
    def site_list_id(self) -> _builtins.str:
        """
        Site list ID
        """
        return pulumi.get(self, "site_list_id")

    @_builtins.property
    @pulumi.getter(name="siteListVersion")
    def site_list_version(self) -> _builtins.int:
        """
        Site list version
        """
        return pulumi.get(self, "site_list_version")

    @_builtins.property
    @pulumi.getter(name="tlocColor")
    def tloc_color(self) -> _builtins.str:
        """
        TLOC color
        """
        return pulumi.get(self, "tloc_color")

    @_builtins.property
    @pulumi.getter(name="tlocEncapsulation")
    def tloc_encapsulation(self) -> _builtins.str:
        """
        TLOC encapsulation
        """
        return pulumi.get(self, "tloc_encapsulation")

    @_builtins.property
    @pulumi.getter(name="tlocIp")
    def tloc_ip(self) -> _builtins.str:
        """
        TLOC IP address
        """
        return pulumi.get(self, "tloc_ip")

    @_builtins.property
    @pulumi.getter(name="tlocListId")
    def tloc_list_id(self) -> _builtins.str:
        """
        TLOC list ID
        """
        return pulumi.get(self, "tloc_list_id")

    @_builtins.property
    @pulumi.getter(name="tlocListVersion")
    def tloc_list_version(self) -> _builtins.int:
        """
        TLOC list version
        """
        return pulumi.get(self, "tloc_list_version")

    @_builtins.property
    @pulumi.getter
    def type(self) -> _builtins.str:
        """
        Type of match entry
        """
        return pulumi.get(self, "type")

    @_builtins.property
    @pulumi.getter(name="vpnId")
    def vpn_id(self) -> _builtins.int:
        """
        VPN ID
        """
        return pulumi.get(self, "vpn_id")

    @_builtins.property
    @pulumi.getter(name="vpnListId")
    def vpn_list_id(self) -> _builtins.str:
        """
        VPN list ID
        """
        return pulumi.get(self, "vpn_list_id")

    @_builtins.property
    @pulumi.getter(name="vpnListVersion")
    def vpn_list_version(self) -> _builtins.int:
        """
        VPN list version
        """
        return pulumi.get(self, "vpn_list_version")


@pulumi.output_type
class GetDataFqdnPrefixListPolicyObjectEntryResult(dict):
    def __init__(__self__, *,
                 fqdn: _builtins.str):
        """
        :param _builtins.str fqdn: Fully qualified domain name
        """
        pulumi.set(__self__, "fqdn", fqdn)

    @_builtins.property
    @pulumi.getter
    def fqdn(self) -> _builtins.str:
        """
        Fully qualified domain name
        """
        return pulumi.get(self, "fqdn")


@pulumi.output_type
class GetDataIpv4PrefixListPolicyObjectEntryResult(dict):
    def __init__(__self__, *,
                 prefix: _builtins.str):
        """
        :param _builtins.str prefix: IP prefix list entry, e.g. `10.0.0.0/12`
        """
        pulumi.set(__self__, "prefix", prefix)

    @_builtins.property
    @pulumi.getter
    def prefix(self) -> _builtins.str:
        """
        IP prefix list entry, e.g. `10.0.0.0/12`
        """
        return pulumi.get(self, "prefix")


@pulumi.output_type
class GetDataIpv6PrefixListPolicyObjectEntryResult(dict):
    def __init__(__self__, *,
                 prefix: _builtins.str):
        """
        :param _builtins.str prefix: IP prefix list entry, e.g. `2001:0:0:1::/64`
        """
        pulumi.set(__self__, "prefix", prefix)

    @_builtins.property
    @pulumi.getter
    def prefix(self) -> _builtins.str:
        """
        IP prefix list entry, e.g. `2001:0:0:1::/64`
        """
        return pulumi.get(self, "prefix")


@pulumi.output_type
class GetDeviceDeviceResult(dict):
    def __init__(__self__, *,
                 device_id: _builtins.str,
                 hostname: _builtins.str,
                 reachability: _builtins.str,
                 serial_number: _builtins.str,
                 site_id: _builtins.str,
                 state: _builtins.str,
                 status: _builtins.str,
                 uuid: _builtins.str):
        """
        :param _builtins.str device_id: The device ID as defined in SD-WAN Manager
        :param _builtins.str hostname: Hostname for respective device
        :param _builtins.str reachability: Reachability of device
        :param _builtins.str serial_number: Serial number for device. Could be board or virtual identifier
        :param _builtins.str site_id: Site id for respective device
        :param _builtins.str state: State for respective device
        :param _builtins.str status: Status for respective device
        :param _builtins.str uuid: Unique identifier for device
        """
        pulumi.set(__self__, "device_id", device_id)
        pulumi.set(__self__, "hostname", hostname)
        pulumi.set(__self__, "reachability", reachability)
        pulumi.set(__self__, "serial_number", serial_number)
        pulumi.set(__self__, "site_id", site_id)
        pulumi.set(__self__, "state", state)
        pulumi.set(__self__, "status", status)
        pulumi.set(__self__, "uuid", uuid)

    @_builtins.property
    @pulumi.getter(name="deviceId")
    def device_id(self) -> _builtins.str:
        """
        The device ID as defined in SD-WAN Manager
        """
        return pulumi.get(self, "device_id")

    @_builtins.property
    @pulumi.getter
    def hostname(self) -> _builtins.str:
        """
        Hostname for respective device
        """
        return pulumi.get(self, "hostname")

    @_builtins.property
    @pulumi.getter
    def reachability(self) -> _builtins.str:
        """
        Reachability of device
        """
        return pulumi.get(self, "reachability")

    @_builtins.property
    @pulumi.getter(name="serialNumber")
    def serial_number(self) -> _builtins.str:
        """
        Serial number for device. Could be board or virtual identifier
        """
        return pulumi.get(self, "serial_number")

    @_builtins.property
    @pulumi.getter(name="siteId")
    def site_id(self) -> _builtins.str:
        """
        Site id for respective device
        """
        return pulumi.get(self, "site_id")

    @_builtins.property
    @pulumi.getter
    def state(self) -> _builtins.str:
        """
        State for respective device
        """
        return pulumi.get(self, "state")

    @_builtins.property
    @pulumi.getter
    def status(self) -> _builtins.str:
        """
        Status for respective device
        """
        return pulumi.get(self, "status")

    @_builtins.property
    @pulumi.getter
    def uuid(self) -> _builtins.str:
        """
        Unique identifier for device
        """
        return pulumi.get(self, "uuid")


@pulumi.output_type
class GetDnsSecurityPolicyDefinitionTargetVpnResult(dict):
    def __init__(__self__, *,
                 custom_dns_server_ip: _builtins.str,
                 local_domain_bypass_enabled: _builtins.bool,
                 umbrella_dns_default: _builtins.bool,
                 vpn_ids: Sequence[_builtins.str]):
        """
        :param _builtins.str custom_dns_server_ip: Only relevant when `umbrella_dns_default` is `false`
        :param _builtins.bool local_domain_bypass_enabled: Should the local domain bypass list be enabled
        :param _builtins.bool umbrella_dns_default: Should use umbrella as DNS Server
        :param Sequence[_builtins.str] vpn_ids: VPN ID's separated by Comma
        """
        pulumi.set(__self__, "custom_dns_server_ip", custom_dns_server_ip)
        pulumi.set(__self__, "local_domain_bypass_enabled", local_domain_bypass_enabled)
        pulumi.set(__self__, "umbrella_dns_default", umbrella_dns_default)
        pulumi.set(__self__, "vpn_ids", vpn_ids)

    @_builtins.property
    @pulumi.getter(name="customDnsServerIp")
    def custom_dns_server_ip(self) -> _builtins.str:
        """
        Only relevant when `umbrella_dns_default` is `false`
        """
        return pulumi.get(self, "custom_dns_server_ip")

    @_builtins.property
    @pulumi.getter(name="localDomainBypassEnabled")
    def local_domain_bypass_enabled(self) -> _builtins.bool:
        """
        Should the local domain bypass list be enabled
        """
        return pulumi.get(self, "local_domain_bypass_enabled")

    @_builtins.property
    @pulumi.getter(name="umbrellaDnsDefault")
    def umbrella_dns_default(self) -> _builtins.bool:
        """
        Should use umbrella as DNS Server
        """
        return pulumi.get(self, "umbrella_dns_default")

    @_builtins.property
    @pulumi.getter(name="vpnIds")
    def vpn_ids(self) -> Sequence[_builtins.str]:
        """
        VPN ID's separated by Comma
        """
        return pulumi.get(self, "vpn_ids")


@pulumi.output_type
class GetDnsSecurityPolicyTargetVpnResult(dict):
    def __init__(__self__, *,
                 dns_server_ip: _builtins.str,
                 local_domain_bypass_enabled: _builtins.bool,
                 uid: _builtins.str,
                 umbrella_default: _builtins.bool,
                 vpns: Sequence[_builtins.str]):
        """
        :param _builtins.str dns_server_ip: Field will only be under data field if matchAllVpn is true, otherwise field will be under targetVpns and set per entry
        :param _builtins.bool local_domain_bypass_enabled: Field will only be under data field if matchAllVpn is true, otherwise field will be under targetVpns and set per entry
        :param _builtins.str uid: non empty interger string
        :param _builtins.bool umbrella_default: Field will only be under data field if matchAllVpn is true, otherwise field will be under targetVpns and set per entry
        """
        pulumi.set(__self__, "dns_server_ip", dns_server_ip)
        pulumi.set(__self__, "local_domain_bypass_enabled", local_domain_bypass_enabled)
        pulumi.set(__self__, "uid", uid)
        pulumi.set(__self__, "umbrella_default", umbrella_default)
        pulumi.set(__self__, "vpns", vpns)

    @_builtins.property
    @pulumi.getter(name="dnsServerIp")
    def dns_server_ip(self) -> _builtins.str:
        """
        Field will only be under data field if matchAllVpn is true, otherwise field will be under targetVpns and set per entry
        """
        return pulumi.get(self, "dns_server_ip")

    @_builtins.property
    @pulumi.getter(name="localDomainBypassEnabled")
    def local_domain_bypass_enabled(self) -> _builtins.bool:
        """
        Field will only be under data field if matchAllVpn is true, otherwise field will be under targetVpns and set per entry
        """
        return pulumi.get(self, "local_domain_bypass_enabled")

    @_builtins.property
    @pulumi.getter
    def uid(self) -> _builtins.str:
        """
        non empty interger string
        """
        return pulumi.get(self, "uid")

    @_builtins.property
    @pulumi.getter(name="umbrellaDefault")
    def umbrella_default(self) -> _builtins.bool:
        """
        Field will only be under data field if matchAllVpn is true, otherwise field will be under targetVpns and set per entry
        """
        return pulumi.get(self, "umbrella_default")

    @_builtins.property
    @pulumi.getter
    def vpns(self) -> Sequence[_builtins.str]:
        return pulumi.get(self, "vpns")


@pulumi.output_type
class GetDomainListPolicyObjectEntryResult(dict):
    def __init__(__self__, *,
                 domain: _builtins.str):
        """
        :param _builtins.str domain: Domain name, must not start with `*`
        """
        pulumi.set(__self__, "domain", domain)

    @_builtins.property
    @pulumi.getter
    def domain(self) -> _builtins.str:
        """
        Domain name, must not start with `*`
        """
        return pulumi.get(self, "domain")


@pulumi.output_type
class GetEigrpFeatureTemplateAddressFamilyResult(dict):
    def __init__(__self__, *,
                 networks: Sequence['outputs.GetEigrpFeatureTemplateAddressFamilyNetworkResult'],
                 optional: _builtins.bool,
                 redistributes: Sequence['outputs.GetEigrpFeatureTemplateAddressFamilyRedistributeResult'],
                 type: _builtins.str):
        """
        :param Sequence['GetEigrpFeatureTemplateAddressFamilyNetworkArgs'] networks: Configure the networks for EIGRP to advertise
        :param _builtins.bool optional: Indicates if list item is considered optional.
        :param Sequence['GetEigrpFeatureTemplateAddressFamilyRedistributeArgs'] redistributes: Redistribute routes into EIGRP
        :param _builtins.str type: Set EIGRP address family
        """
        pulumi.set(__self__, "networks", networks)
        pulumi.set(__self__, "optional", optional)
        pulumi.set(__self__, "redistributes", redistributes)
        pulumi.set(__self__, "type", type)

    @_builtins.property
    @pulumi.getter
    def networks(self) -> Sequence['outputs.GetEigrpFeatureTemplateAddressFamilyNetworkResult']:
        """
        Configure the networks for EIGRP to advertise
        """
        return pulumi.get(self, "networks")

    @_builtins.property
    @pulumi.getter
    def optional(self) -> _builtins.bool:
        """
        Indicates if list item is considered optional.
        """
        return pulumi.get(self, "optional")

    @_builtins.property
    @pulumi.getter
    def redistributes(self) -> Sequence['outputs.GetEigrpFeatureTemplateAddressFamilyRedistributeResult']:
        """
        Redistribute routes into EIGRP
        """
        return pulumi.get(self, "redistributes")

    @_builtins.property
    @pulumi.getter
    def type(self) -> _builtins.str:
        """
        Set EIGRP address family
        """
        return pulumi.get(self, "type")


@pulumi.output_type
class GetEigrpFeatureTemplateAddressFamilyNetworkResult(dict):
    def __init__(__self__, *,
                 optional: _builtins.bool,
                 prefix: _builtins.str,
                 prefix_variable: _builtins.str):
        """
        :param _builtins.bool optional: Indicates if list item is considered optional.
        :param _builtins.str prefix: Configure the prefixes for EIGRP to announce
        :param _builtins.str prefix_variable: Variable name
        """
        pulumi.set(__self__, "optional", optional)
        pulumi.set(__self__, "prefix", prefix)
        pulumi.set(__self__, "prefix_variable", prefix_variable)

    @_builtins.property
    @pulumi.getter
    def optional(self) -> _builtins.bool:
        """
        Indicates if list item is considered optional.
        """
        return pulumi.get(self, "optional")

    @_builtins.property
    @pulumi.getter
    def prefix(self) -> _builtins.str:
        """
        Configure the prefixes for EIGRP to announce
        """
        return pulumi.get(self, "prefix")

    @_builtins.property
    @pulumi.getter(name="prefixVariable")
    def prefix_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "prefix_variable")


@pulumi.output_type
class GetEigrpFeatureTemplateAddressFamilyRedistributeResult(dict):
    def __init__(__self__, *,
                 optional: _builtins.bool,
                 protocol: _builtins.str,
                 protocol_variable: _builtins.str,
                 route_policy: _builtins.str,
                 route_policy_variable: _builtins.str):
        """
        :param _builtins.bool optional: Indicates if list item is considered optional.
        :param _builtins.str protocol: Set the protocol to redistribute routes from
        :param _builtins.str protocol_variable: Variable name
        :param _builtins.str route_policy: Configure policy to apply to prefixes received from EIGRP neighbor
        :param _builtins.str route_policy_variable: Variable name
        """
        pulumi.set(__self__, "optional", optional)
        pulumi.set(__self__, "protocol", protocol)
        pulumi.set(__self__, "protocol_variable", protocol_variable)
        pulumi.set(__self__, "route_policy", route_policy)
        pulumi.set(__self__, "route_policy_variable", route_policy_variable)

    @_builtins.property
    @pulumi.getter
    def optional(self) -> _builtins.bool:
        """
        Indicates if list item is considered optional.
        """
        return pulumi.get(self, "optional")

    @_builtins.property
    @pulumi.getter
    def protocol(self) -> _builtins.str:
        """
        Set the protocol to redistribute routes from
        """
        return pulumi.get(self, "protocol")

    @_builtins.property
    @pulumi.getter(name="protocolVariable")
    def protocol_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "protocol_variable")

    @_builtins.property
    @pulumi.getter(name="routePolicy")
    def route_policy(self) -> _builtins.str:
        """
        Configure policy to apply to prefixes received from EIGRP neighbor
        """
        return pulumi.get(self, "route_policy")

    @_builtins.property
    @pulumi.getter(name="routePolicyVariable")
    def route_policy_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "route_policy_variable")


@pulumi.output_type
class GetEigrpFeatureTemplateInterfaceResult(dict):
    def __init__(__self__, *,
                 interface_name: _builtins.str,
                 interface_name_variable: _builtins.str,
                 optional: _builtins.bool,
                 shutdown: _builtins.bool,
                 shutdown_variable: _builtins.str,
                 summary_addresses: Sequence['outputs.GetEigrpFeatureTemplateInterfaceSummaryAddressResult']):
        """
        :param _builtins.str interface_name: Set interface name
        :param _builtins.str interface_name_variable: Variable name
        :param _builtins.bool optional: Indicates if list item is considered optional.
        :param _builtins.bool shutdown: Enable/disable EIGRP
        :param _builtins.str shutdown_variable: Variable name
        :param Sequence['GetEigrpFeatureTemplateInterfaceSummaryAddressArgs'] summary_addresses: Set summary addresses
        """
        pulumi.set(__self__, "interface_name", interface_name)
        pulumi.set(__self__, "interface_name_variable", interface_name_variable)
        pulumi.set(__self__, "optional", optional)
        pulumi.set(__self__, "shutdown", shutdown)
        pulumi.set(__self__, "shutdown_variable", shutdown_variable)
        pulumi.set(__self__, "summary_addresses", summary_addresses)

    @_builtins.property
    @pulumi.getter(name="interfaceName")
    def interface_name(self) -> _builtins.str:
        """
        Set interface name
        """
        return pulumi.get(self, "interface_name")

    @_builtins.property
    @pulumi.getter(name="interfaceNameVariable")
    def interface_name_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "interface_name_variable")

    @_builtins.property
    @pulumi.getter
    def optional(self) -> _builtins.bool:
        """
        Indicates if list item is considered optional.
        """
        return pulumi.get(self, "optional")

    @_builtins.property
    @pulumi.getter
    def shutdown(self) -> _builtins.bool:
        """
        Enable/disable EIGRP
        """
        return pulumi.get(self, "shutdown")

    @_builtins.property
    @pulumi.getter(name="shutdownVariable")
    def shutdown_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "shutdown_variable")

    @_builtins.property
    @pulumi.getter(name="summaryAddresses")
    def summary_addresses(self) -> Sequence['outputs.GetEigrpFeatureTemplateInterfaceSummaryAddressResult']:
        """
        Set summary addresses
        """
        return pulumi.get(self, "summary_addresses")


@pulumi.output_type
class GetEigrpFeatureTemplateInterfaceSummaryAddressResult(dict):
    def __init__(__self__, *,
                 optional: _builtins.bool,
                 prefix: _builtins.str,
                 prefix_variable: _builtins.str):
        """
        :param _builtins.bool optional: Indicates if list item is considered optional.
        :param _builtins.str prefix: Set summary address prefix
        :param _builtins.str prefix_variable: Variable name
        """
        pulumi.set(__self__, "optional", optional)
        pulumi.set(__self__, "prefix", prefix)
        pulumi.set(__self__, "prefix_variable", prefix_variable)

    @_builtins.property
    @pulumi.getter
    def optional(self) -> _builtins.bool:
        """
        Indicates if list item is considered optional.
        """
        return pulumi.get(self, "optional")

    @_builtins.property
    @pulumi.getter
    def prefix(self) -> _builtins.str:
        """
        Set summary address prefix
        """
        return pulumi.get(self, "prefix")

    @_builtins.property
    @pulumi.getter(name="prefixVariable")
    def prefix_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "prefix_variable")


@pulumi.output_type
class GetEigrpFeatureTemplateKeyResult(dict):
    def __init__(__self__, *,
                 md5_authentication_key: _builtins.str,
                 md5_authentication_key_variable: _builtins.str,
                 md5_key_id: _builtins.int,
                 md5_key_id_variable: _builtins.str,
                 optional: _builtins.bool):
        """
        :param _builtins.str md5_authentication_key: Set MD5 key
        :param _builtins.str md5_authentication_key_variable: Variable name
        :param _builtins.int md5_key_id: Set MD5 key ID
        :param _builtins.str md5_key_id_variable: Variable name
        :param _builtins.bool optional: Indicates if list item is considered optional.
        """
        pulumi.set(__self__, "md5_authentication_key", md5_authentication_key)
        pulumi.set(__self__, "md5_authentication_key_variable", md5_authentication_key_variable)
        pulumi.set(__self__, "md5_key_id", md5_key_id)
        pulumi.set(__self__, "md5_key_id_variable", md5_key_id_variable)
        pulumi.set(__self__, "optional", optional)

    @_builtins.property
    @pulumi.getter(name="md5AuthenticationKey")
    def md5_authentication_key(self) -> _builtins.str:
        """
        Set MD5 key
        """
        return pulumi.get(self, "md5_authentication_key")

    @_builtins.property
    @pulumi.getter(name="md5AuthenticationKeyVariable")
    def md5_authentication_key_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "md5_authentication_key_variable")

    @_builtins.property
    @pulumi.getter(name="md5KeyId")
    def md5_key_id(self) -> _builtins.int:
        """
        Set MD5 key ID
        """
        return pulumi.get(self, "md5_key_id")

    @_builtins.property
    @pulumi.getter(name="md5KeyIdVariable")
    def md5_key_id_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "md5_key_id_variable")

    @_builtins.property
    @pulumi.getter
    def optional(self) -> _builtins.bool:
        """
        Indicates if list item is considered optional.
        """
        return pulumi.get(self, "optional")


@pulumi.output_type
class GetExpandedCommunityListPolicyObjectEntryResult(dict):
    def __init__(__self__, *,
                 community: _builtins.str):
        """
        :param _builtins.str community: Expanded community value, e.g. `100:1000`
        """
        pulumi.set(__self__, "community", community)

    @_builtins.property
    @pulumi.getter
    def community(self) -> _builtins.str:
        """
        Expanded community value, e.g. `100:1000`
        """
        return pulumi.get(self, "community")


@pulumi.output_type
class GetExtendedCommunityListPolicyObjectEntryResult(dict):
    def __init__(__self__, *,
                 community: _builtins.str):
        """
        :param _builtins.str community: Extended community value, e.g. `community soo 10.0.0.1:30` or `community rt 100:10`
        """
        pulumi.set(__self__, "community", community)

    @_builtins.property
    @pulumi.getter
    def community(self) -> _builtins.str:
        """
        Extended community value, e.g. `community soo 10.0.0.1:30` or `community rt 100:10`
        """
        return pulumi.get(self, "community")


@pulumi.output_type
class GetFeatureDeviceTemplateGeneralTemplateResult(dict):
    def __init__(__self__, *,
                 id: _builtins.str,
                 sub_templates: Sequence['outputs.GetFeatureDeviceTemplateGeneralTemplateSubTemplateResult'],
                 type: _builtins.str,
                 version: _builtins.int):
        """
        :param _builtins.str id: Feature template ID
        :param Sequence['GetFeatureDeviceTemplateGeneralTemplateSubTemplateArgs'] sub_templates: List of sub templates
        :param _builtins.str type: Feature template type
        :param _builtins.int version: Feature template version
        """
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "sub_templates", sub_templates)
        pulumi.set(__self__, "type", type)
        pulumi.set(__self__, "version", version)

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        Feature template ID
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter(name="subTemplates")
    def sub_templates(self) -> Sequence['outputs.GetFeatureDeviceTemplateGeneralTemplateSubTemplateResult']:
        """
        List of sub templates
        """
        return pulumi.get(self, "sub_templates")

    @_builtins.property
    @pulumi.getter
    def type(self) -> _builtins.str:
        """
        Feature template type
        """
        return pulumi.get(self, "type")

    @_builtins.property
    @pulumi.getter
    def version(self) -> _builtins.int:
        """
        Feature template version
        """
        return pulumi.get(self, "version")


@pulumi.output_type
class GetFeatureDeviceTemplateGeneralTemplateSubTemplateResult(dict):
    def __init__(__self__, *,
                 id: _builtins.str,
                 sub_templates: Sequence['outputs.GetFeatureDeviceTemplateGeneralTemplateSubTemplateSubTemplateResult'],
                 type: _builtins.str,
                 version: _builtins.int):
        """
        :param _builtins.str id: Feature template ID
        :param Sequence['GetFeatureDeviceTemplateGeneralTemplateSubTemplateSubTemplateArgs'] sub_templates: List of sub templates
        :param _builtins.str type: Feature template type
        :param _builtins.int version: Feature template version
        """
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "sub_templates", sub_templates)
        pulumi.set(__self__, "type", type)
        pulumi.set(__self__, "version", version)

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        Feature template ID
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter(name="subTemplates")
    def sub_templates(self) -> Sequence['outputs.GetFeatureDeviceTemplateGeneralTemplateSubTemplateSubTemplateResult']:
        """
        List of sub templates
        """
        return pulumi.get(self, "sub_templates")

    @_builtins.property
    @pulumi.getter
    def type(self) -> _builtins.str:
        """
        Feature template type
        """
        return pulumi.get(self, "type")

    @_builtins.property
    @pulumi.getter
    def version(self) -> _builtins.int:
        """
        Feature template version
        """
        return pulumi.get(self, "version")


@pulumi.output_type
class GetFeatureDeviceTemplateGeneralTemplateSubTemplateSubTemplateResult(dict):
    def __init__(__self__, *,
                 id: _builtins.str,
                 type: _builtins.str,
                 version: _builtins.int):
        """
        :param _builtins.str id: Feature template ID
        :param _builtins.str type: Feature template type
        :param _builtins.int version: Feature template version
        """
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "type", type)
        pulumi.set(__self__, "version", version)

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        Feature template ID
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter
    def type(self) -> _builtins.str:
        """
        Feature template type
        """
        return pulumi.get(self, "type")

    @_builtins.property
    @pulumi.getter
    def version(self) -> _builtins.int:
        """
        Feature template version
        """
        return pulumi.get(self, "version")


@pulumi.output_type
class GetGeoLocationListPolicyObjectEntryResult(dict):
    def __init__(__self__, *,
                 continent: _builtins.str,
                 country: _builtins.str):
        """
        :param _builtins.str continent: Continent
        :param _builtins.str country: Country
        """
        pulumi.set(__self__, "continent", continent)
        pulumi.set(__self__, "country", country)

    @_builtins.property
    @pulumi.getter
    def continent(self) -> _builtins.str:
        """
        Continent
        """
        return pulumi.get(self, "continent")

    @_builtins.property
    @pulumi.getter
    def country(self) -> _builtins.str:
        """
        Country
        """
        return pulumi.get(self, "country")


@pulumi.output_type
class GetHubAndSpokeTopologyPolicyDefinitionTopologyResult(dict):
    def __init__(__self__, *,
                 advertise_hub_tlocs: _builtins.bool,
                 all_hubs_are_equal: _builtins.bool,
                 name: _builtins.str,
                 spokes: Sequence['outputs.GetHubAndSpokeTopologyPolicyDefinitionTopologySpokeResult'],
                 tloc_list_id: _builtins.str):
        """
        :param _builtins.bool advertise_hub_tlocs: Advertise Hub TLOCs
        :param _builtins.bool all_hubs_are_equal: All hubs are equal (All Spokes Sites connect to all Hubs)
        :param _builtins.str name: Topology name
        :param Sequence['GetHubAndSpokeTopologyPolicyDefinitionTopologySpokeArgs'] spokes: List of spokes
        :param _builtins.str tloc_list_id: TLOC list ID (required when `advertise_hub_tlocs` is 'true')
        """
        pulumi.set(__self__, "advertise_hub_tlocs", advertise_hub_tlocs)
        pulumi.set(__self__, "all_hubs_are_equal", all_hubs_are_equal)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "spokes", spokes)
        pulumi.set(__self__, "tloc_list_id", tloc_list_id)

    @_builtins.property
    @pulumi.getter(name="advertiseHubTlocs")
    def advertise_hub_tlocs(self) -> _builtins.bool:
        """
        Advertise Hub TLOCs
        """
        return pulumi.get(self, "advertise_hub_tlocs")

    @_builtins.property
    @pulumi.getter(name="allHubsAreEqual")
    def all_hubs_are_equal(self) -> _builtins.bool:
        """
        All hubs are equal (All Spokes Sites connect to all Hubs)
        """
        return pulumi.get(self, "all_hubs_are_equal")

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        """
        Topology name
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def spokes(self) -> Sequence['outputs.GetHubAndSpokeTopologyPolicyDefinitionTopologySpokeResult']:
        """
        List of spokes
        """
        return pulumi.get(self, "spokes")

    @_builtins.property
    @pulumi.getter(name="tlocListId")
    def tloc_list_id(self) -> _builtins.str:
        """
        TLOC list ID (required when `advertise_hub_tlocs` is 'true')
        """
        return pulumi.get(self, "tloc_list_id")


@pulumi.output_type
class GetHubAndSpokeTopologyPolicyDefinitionTopologySpokeResult(dict):
    def __init__(__self__, *,
                 hubs: Sequence['outputs.GetHubAndSpokeTopologyPolicyDefinitionTopologySpokeHubResult'],
                 site_list_id: _builtins.str,
                 site_list_version: _builtins.int):
        """
        :param Sequence['GetHubAndSpokeTopologyPolicyDefinitionTopologySpokeHubArgs'] hubs: List of hubs
        :param _builtins.str site_list_id: Site list ID
        :param _builtins.int site_list_version: Site list version
        """
        pulumi.set(__self__, "hubs", hubs)
        pulumi.set(__self__, "site_list_id", site_list_id)
        pulumi.set(__self__, "site_list_version", site_list_version)

    @_builtins.property
    @pulumi.getter
    def hubs(self) -> Sequence['outputs.GetHubAndSpokeTopologyPolicyDefinitionTopologySpokeHubResult']:
        """
        List of hubs
        """
        return pulumi.get(self, "hubs")

    @_builtins.property
    @pulumi.getter(name="siteListId")
    def site_list_id(self) -> _builtins.str:
        """
        Site list ID
        """
        return pulumi.get(self, "site_list_id")

    @_builtins.property
    @pulumi.getter(name="siteListVersion")
    def site_list_version(self) -> _builtins.int:
        """
        Site list version
        """
        return pulumi.get(self, "site_list_version")


@pulumi.output_type
class GetHubAndSpokeTopologyPolicyDefinitionTopologySpokeHubResult(dict):
    def __init__(__self__, *,
                 ipv4_prefix_list_ids: Sequence[_builtins.str],
                 ipv6_prefix_list_ids: Sequence[_builtins.str],
                 preference: _builtins.str,
                 site_list_id: _builtins.str,
                 site_list_version: _builtins.int):
        """
        :param Sequence[_builtins.str] ipv4_prefix_list_ids: List of IPv4 prefix list IDs
        :param Sequence[_builtins.str] ipv6_prefix_list_ids: List of IPv6 prefix list IDs
        :param _builtins.str preference: Preference, multiple of 10 (for example 70, 80, 90, 100). The higher the value the higher the priority of the associated hub (required when `all_hubs_are_equal` is 'false')
        :param _builtins.str site_list_id: Site list ID
        :param _builtins.int site_list_version: Site list version
        """
        pulumi.set(__self__, "ipv4_prefix_list_ids", ipv4_prefix_list_ids)
        pulumi.set(__self__, "ipv6_prefix_list_ids", ipv6_prefix_list_ids)
        pulumi.set(__self__, "preference", preference)
        pulumi.set(__self__, "site_list_id", site_list_id)
        pulumi.set(__self__, "site_list_version", site_list_version)

    @_builtins.property
    @pulumi.getter(name="ipv4PrefixListIds")
    def ipv4_prefix_list_ids(self) -> Sequence[_builtins.str]:
        """
        List of IPv4 prefix list IDs
        """
        return pulumi.get(self, "ipv4_prefix_list_ids")

    @_builtins.property
    @pulumi.getter(name="ipv6PrefixListIds")
    def ipv6_prefix_list_ids(self) -> Sequence[_builtins.str]:
        """
        List of IPv6 prefix list IDs
        """
        return pulumi.get(self, "ipv6_prefix_list_ids")

    @_builtins.property
    @pulumi.getter
    def preference(self) -> _builtins.str:
        """
        Preference, multiple of 10 (for example 70, 80, 90, 100). The higher the value the higher the priority of the associated hub (required when `all_hubs_are_equal` is 'false')
        """
        return pulumi.get(self, "preference")

    @_builtins.property
    @pulumi.getter(name="siteListId")
    def site_list_id(self) -> _builtins.str:
        """
        Site list ID
        """
        return pulumi.get(self, "site_list_id")

    @_builtins.property
    @pulumi.getter(name="siteListVersion")
    def site_list_version(self) -> _builtins.int:
        """
        Site list version
        """
        return pulumi.get(self, "site_list_version")


@pulumi.output_type
class GetIntrusionPreventionPolicyDefinitionLoggingResult(dict):
    def __init__(__self__, *,
                 external_syslog_server_ip: _builtins.str,
                 external_syslog_server_vpn: _builtins.str):
        """
        :param _builtins.str external_syslog_server_ip: External Syslog Server IP
        :param _builtins.str external_syslog_server_vpn: External Syslog Server VPN
        """
        pulumi.set(__self__, "external_syslog_server_ip", external_syslog_server_ip)
        pulumi.set(__self__, "external_syslog_server_vpn", external_syslog_server_vpn)

    @_builtins.property
    @pulumi.getter(name="externalSyslogServerIp")
    def external_syslog_server_ip(self) -> _builtins.str:
        """
        External Syslog Server IP
        """
        return pulumi.get(self, "external_syslog_server_ip")

    @_builtins.property
    @pulumi.getter(name="externalSyslogServerVpn")
    def external_syslog_server_vpn(self) -> _builtins.str:
        """
        External Syslog Server VPN
        """
        return pulumi.get(self, "external_syslog_server_vpn")


@pulumi.output_type
class GetIpsSignatureListPolicyObjectEntryResult(dict):
    def __init__(__self__, *,
                 generator_id: _builtins.int,
                 signature_id: _builtins.int):
        """
        :param _builtins.int generator_id: Signature generator ID
        :param _builtins.int signature_id: Signature ID
        """
        pulumi.set(__self__, "generator_id", generator_id)
        pulumi.set(__self__, "signature_id", signature_id)

    @_builtins.property
    @pulumi.getter(name="generatorId")
    def generator_id(self) -> _builtins.int:
        """
        Signature generator ID
        """
        return pulumi.get(self, "generator_id")

    @_builtins.property
    @pulumi.getter(name="signatureId")
    def signature_id(self) -> _builtins.int:
        """
        Signature ID
        """
        return pulumi.get(self, "signature_id")


@pulumi.output_type
class GetIpv4AclPolicyDefinitionSequenceResult(dict):
    def __init__(__self__, *,
                 action_entries: Sequence['outputs.GetIpv4AclPolicyDefinitionSequenceActionEntryResult'],
                 base_action: _builtins.str,
                 id: _builtins.int,
                 match_entries: Sequence['outputs.GetIpv4AclPolicyDefinitionSequenceMatchEntryResult'],
                 name: _builtins.str):
        """
        :param Sequence['GetIpv4AclPolicyDefinitionSequenceActionEntryArgs'] action_entries: List of action entries
        :param _builtins.str base_action: Base action, either `accept` or `drop`
        :param _builtins.int id: Sequence ID
        :param Sequence['GetIpv4AclPolicyDefinitionSequenceMatchEntryArgs'] match_entries: List of match entries
        :param _builtins.str name: Sequence name
        """
        pulumi.set(__self__, "action_entries", action_entries)
        pulumi.set(__self__, "base_action", base_action)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "match_entries", match_entries)
        pulumi.set(__self__, "name", name)

    @_builtins.property
    @pulumi.getter(name="actionEntries")
    def action_entries(self) -> Sequence['outputs.GetIpv4AclPolicyDefinitionSequenceActionEntryResult']:
        """
        List of action entries
        """
        return pulumi.get(self, "action_entries")

    @_builtins.property
    @pulumi.getter(name="baseAction")
    def base_action(self) -> _builtins.str:
        """
        Base action, either `accept` or `drop`
        """
        return pulumi.get(self, "base_action")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.int:
        """
        Sequence ID
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter(name="matchEntries")
    def match_entries(self) -> Sequence['outputs.GetIpv4AclPolicyDefinitionSequenceMatchEntryResult']:
        """
        List of match entries
        """
        return pulumi.get(self, "match_entries")

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        """
        Sequence name
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class GetIpv4AclPolicyDefinitionSequenceActionEntryResult(dict):
    def __init__(__self__, *,
                 class_map_id: _builtins.str,
                 class_map_version: _builtins.int,
                 counter_name: _builtins.str,
                 log: _builtins.bool,
                 mirror_id: _builtins.str,
                 mirror_version: _builtins.int,
                 policer_id: _builtins.str,
                 policer_version: _builtins.int,
                 set_parameters: Sequence['outputs.GetIpv4AclPolicyDefinitionSequenceActionEntrySetParameterResult'],
                 type: _builtins.str):
        """
        :param _builtins.str class_map_id: Class map ID
        :param _builtins.int class_map_version: Class map version
        :param _builtins.str counter_name: Counter name
        :param _builtins.bool log: Enable logging
        :param _builtins.str mirror_id: Mirror ID
        :param _builtins.int mirror_version: Mirror version
        :param _builtins.str policer_id: Policer ID
        :param _builtins.int policer_version: Policer version
        :param Sequence['GetIpv4AclPolicyDefinitionSequenceActionEntrySetParameterArgs'] set_parameters: List of set parameters
        :param _builtins.str type: Type of action entry
        """
        pulumi.set(__self__, "class_map_id", class_map_id)
        pulumi.set(__self__, "class_map_version", class_map_version)
        pulumi.set(__self__, "counter_name", counter_name)
        pulumi.set(__self__, "log", log)
        pulumi.set(__self__, "mirror_id", mirror_id)
        pulumi.set(__self__, "mirror_version", mirror_version)
        pulumi.set(__self__, "policer_id", policer_id)
        pulumi.set(__self__, "policer_version", policer_version)
        pulumi.set(__self__, "set_parameters", set_parameters)
        pulumi.set(__self__, "type", type)

    @_builtins.property
    @pulumi.getter(name="classMapId")
    def class_map_id(self) -> _builtins.str:
        """
        Class map ID
        """
        return pulumi.get(self, "class_map_id")

    @_builtins.property
    @pulumi.getter(name="classMapVersion")
    def class_map_version(self) -> _builtins.int:
        """
        Class map version
        """
        return pulumi.get(self, "class_map_version")

    @_builtins.property
    @pulumi.getter(name="counterName")
    def counter_name(self) -> _builtins.str:
        """
        Counter name
        """
        return pulumi.get(self, "counter_name")

    @_builtins.property
    @pulumi.getter
    def log(self) -> _builtins.bool:
        """
        Enable logging
        """
        return pulumi.get(self, "log")

    @_builtins.property
    @pulumi.getter(name="mirrorId")
    def mirror_id(self) -> _builtins.str:
        """
        Mirror ID
        """
        return pulumi.get(self, "mirror_id")

    @_builtins.property
    @pulumi.getter(name="mirrorVersion")
    def mirror_version(self) -> _builtins.int:
        """
        Mirror version
        """
        return pulumi.get(self, "mirror_version")

    @_builtins.property
    @pulumi.getter(name="policerId")
    def policer_id(self) -> _builtins.str:
        """
        Policer ID
        """
        return pulumi.get(self, "policer_id")

    @_builtins.property
    @pulumi.getter(name="policerVersion")
    def policer_version(self) -> _builtins.int:
        """
        Policer version
        """
        return pulumi.get(self, "policer_version")

    @_builtins.property
    @pulumi.getter(name="setParameters")
    def set_parameters(self) -> Sequence['outputs.GetIpv4AclPolicyDefinitionSequenceActionEntrySetParameterResult']:
        """
        List of set parameters
        """
        return pulumi.get(self, "set_parameters")

    @_builtins.property
    @pulumi.getter
    def type(self) -> _builtins.str:
        """
        Type of action entry
        """
        return pulumi.get(self, "type")


@pulumi.output_type
class GetIpv4AclPolicyDefinitionSequenceActionEntrySetParameterResult(dict):
    def __init__(__self__, *,
                 dscp: _builtins.int,
                 next_hop: _builtins.str,
                 type: _builtins.str):
        """
        :param _builtins.int dscp: DSCP value
        :param _builtins.str next_hop: Next hop IP
        :param _builtins.str type: Type of set parameter
        """
        pulumi.set(__self__, "dscp", dscp)
        pulumi.set(__self__, "next_hop", next_hop)
        pulumi.set(__self__, "type", type)

    @_builtins.property
    @pulumi.getter
    def dscp(self) -> _builtins.int:
        """
        DSCP value
        """
        return pulumi.get(self, "dscp")

    @_builtins.property
    @pulumi.getter(name="nextHop")
    def next_hop(self) -> _builtins.str:
        """
        Next hop IP
        """
        return pulumi.get(self, "next_hop")

    @_builtins.property
    @pulumi.getter
    def type(self) -> _builtins.str:
        """
        Type of set parameter
        """
        return pulumi.get(self, "type")


@pulumi.output_type
class GetIpv4AclPolicyDefinitionSequenceMatchEntryResult(dict):
    def __init__(__self__, *,
                 class_map_id: _builtins.str,
                 class_map_version: _builtins.int,
                 destination_data_ipv4_prefix_list_id: _builtins.str,
                 destination_data_ipv4_prefix_list_version: _builtins.int,
                 destination_ip: _builtins.str,
                 destination_ip_variable: _builtins.str,
                 destination_ports: _builtins.str,
                 dscp: _builtins.str,
                 icmp_message: _builtins.str,
                 packet_length: _builtins.int,
                 priority: _builtins.str,
                 protocol: _builtins.str,
                 source_data_ipv4_prefix_list_id: _builtins.str,
                 source_data_ipv4_prefix_list_version: _builtins.int,
                 source_ip: _builtins.str,
                 source_ip_variable: _builtins.str,
                 source_ports: _builtins.str,
                 tcp: _builtins.str,
                 type: _builtins.str):
        """
        :param _builtins.str class_map_id: Class map ID
        :param _builtins.int class_map_version: Class map version
        :param _builtins.str destination_data_ipv4_prefix_list_id: Destination data IPv4 prefix list ID
        :param _builtins.int destination_data_ipv4_prefix_list_version: Destination data IPv4 prefix list version
        :param _builtins.str destination_ip: Destination IP prefix
        :param _builtins.str destination_ip_variable: Destination IP prefix variable
        :param _builtins.str destination_ports: Destination ports. Single value (0-65535) or ranges separated by spaces.
        :param _builtins.str dscp: DSCP value
        :param _builtins.str icmp_message: ICMP Message
        :param _builtins.int packet_length: Packet length
        :param _builtins.str priority: PLP - priority
        :param _builtins.str protocol: Single value (0-255) or multiple values separated by spaces
        :param _builtins.str source_data_ipv4_prefix_list_id: Source data IPv4 prefix list ID
        :param _builtins.int source_data_ipv4_prefix_list_version: Source data IPv4 prefix list version
        :param _builtins.str source_ip: Source IP prefix
        :param _builtins.str source_ip_variable: Source IP prefix variable
        :param _builtins.str source_ports: Source ports. Single value (0-65535) or ranges separated by spaces.
        :param _builtins.str tcp: TCP parameters
        :param _builtins.str type: Type of match entry
        """
        pulumi.set(__self__, "class_map_id", class_map_id)
        pulumi.set(__self__, "class_map_version", class_map_version)
        pulumi.set(__self__, "destination_data_ipv4_prefix_list_id", destination_data_ipv4_prefix_list_id)
        pulumi.set(__self__, "destination_data_ipv4_prefix_list_version", destination_data_ipv4_prefix_list_version)
        pulumi.set(__self__, "destination_ip", destination_ip)
        pulumi.set(__self__, "destination_ip_variable", destination_ip_variable)
        pulumi.set(__self__, "destination_ports", destination_ports)
        pulumi.set(__self__, "dscp", dscp)
        pulumi.set(__self__, "icmp_message", icmp_message)
        pulumi.set(__self__, "packet_length", packet_length)
        pulumi.set(__self__, "priority", priority)
        pulumi.set(__self__, "protocol", protocol)
        pulumi.set(__self__, "source_data_ipv4_prefix_list_id", source_data_ipv4_prefix_list_id)
        pulumi.set(__self__, "source_data_ipv4_prefix_list_version", source_data_ipv4_prefix_list_version)
        pulumi.set(__self__, "source_ip", source_ip)
        pulumi.set(__self__, "source_ip_variable", source_ip_variable)
        pulumi.set(__self__, "source_ports", source_ports)
        pulumi.set(__self__, "tcp", tcp)
        pulumi.set(__self__, "type", type)

    @_builtins.property
    @pulumi.getter(name="classMapId")
    def class_map_id(self) -> _builtins.str:
        """
        Class map ID
        """
        return pulumi.get(self, "class_map_id")

    @_builtins.property
    @pulumi.getter(name="classMapVersion")
    def class_map_version(self) -> _builtins.int:
        """
        Class map version
        """
        return pulumi.get(self, "class_map_version")

    @_builtins.property
    @pulumi.getter(name="destinationDataIpv4PrefixListId")
    def destination_data_ipv4_prefix_list_id(self) -> _builtins.str:
        """
        Destination data IPv4 prefix list ID
        """
        return pulumi.get(self, "destination_data_ipv4_prefix_list_id")

    @_builtins.property
    @pulumi.getter(name="destinationDataIpv4PrefixListVersion")
    def destination_data_ipv4_prefix_list_version(self) -> _builtins.int:
        """
        Destination data IPv4 prefix list version
        """
        return pulumi.get(self, "destination_data_ipv4_prefix_list_version")

    @_builtins.property
    @pulumi.getter(name="destinationIp")
    def destination_ip(self) -> _builtins.str:
        """
        Destination IP prefix
        """
        return pulumi.get(self, "destination_ip")

    @_builtins.property
    @pulumi.getter(name="destinationIpVariable")
    def destination_ip_variable(self) -> _builtins.str:
        """
        Destination IP prefix variable
        """
        return pulumi.get(self, "destination_ip_variable")

    @_builtins.property
    @pulumi.getter(name="destinationPorts")
    def destination_ports(self) -> _builtins.str:
        """
        Destination ports. Single value (0-65535) or ranges separated by spaces.
        """
        return pulumi.get(self, "destination_ports")

    @_builtins.property
    @pulumi.getter
    def dscp(self) -> _builtins.str:
        """
        DSCP value
        """
        return pulumi.get(self, "dscp")

    @_builtins.property
    @pulumi.getter(name="icmpMessage")
    def icmp_message(self) -> _builtins.str:
        """
        ICMP Message
        """
        return pulumi.get(self, "icmp_message")

    @_builtins.property
    @pulumi.getter(name="packetLength")
    def packet_length(self) -> _builtins.int:
        """
        Packet length
        """
        return pulumi.get(self, "packet_length")

    @_builtins.property
    @pulumi.getter
    def priority(self) -> _builtins.str:
        """
        PLP - priority
        """
        return pulumi.get(self, "priority")

    @_builtins.property
    @pulumi.getter
    def protocol(self) -> _builtins.str:
        """
        Single value (0-255) or multiple values separated by spaces
        """
        return pulumi.get(self, "protocol")

    @_builtins.property
    @pulumi.getter(name="sourceDataIpv4PrefixListId")
    def source_data_ipv4_prefix_list_id(self) -> _builtins.str:
        """
        Source data IPv4 prefix list ID
        """
        return pulumi.get(self, "source_data_ipv4_prefix_list_id")

    @_builtins.property
    @pulumi.getter(name="sourceDataIpv4PrefixListVersion")
    def source_data_ipv4_prefix_list_version(self) -> _builtins.int:
        """
        Source data IPv4 prefix list version
        """
        return pulumi.get(self, "source_data_ipv4_prefix_list_version")

    @_builtins.property
    @pulumi.getter(name="sourceIp")
    def source_ip(self) -> _builtins.str:
        """
        Source IP prefix
        """
        return pulumi.get(self, "source_ip")

    @_builtins.property
    @pulumi.getter(name="sourceIpVariable")
    def source_ip_variable(self) -> _builtins.str:
        """
        Source IP prefix variable
        """
        return pulumi.get(self, "source_ip_variable")

    @_builtins.property
    @pulumi.getter(name="sourcePorts")
    def source_ports(self) -> _builtins.str:
        """
        Source ports. Single value (0-65535) or ranges separated by spaces.
        """
        return pulumi.get(self, "source_ports")

    @_builtins.property
    @pulumi.getter
    def tcp(self) -> _builtins.str:
        """
        TCP parameters
        """
        return pulumi.get(self, "tcp")

    @_builtins.property
    @pulumi.getter
    def type(self) -> _builtins.str:
        """
        Type of match entry
        """
        return pulumi.get(self, "type")


@pulumi.output_type
class GetIpv4DeviceAclPolicyDefinitionSequenceResult(dict):
    def __init__(__self__, *,
                 action_entries: Sequence['outputs.GetIpv4DeviceAclPolicyDefinitionSequenceActionEntryResult'],
                 base_action: _builtins.str,
                 id: _builtins.int,
                 match_entries: Sequence['outputs.GetIpv4DeviceAclPolicyDefinitionSequenceMatchEntryResult'],
                 name: _builtins.str):
        """
        :param Sequence['GetIpv4DeviceAclPolicyDefinitionSequenceActionEntryArgs'] action_entries: List of action entries
        :param _builtins.str base_action: Base action, either `accept` or `drop`
        :param _builtins.int id: Sequence ID
        :param Sequence['GetIpv4DeviceAclPolicyDefinitionSequenceMatchEntryArgs'] match_entries: List of match entries
        :param _builtins.str name: Sequence name
        """
        pulumi.set(__self__, "action_entries", action_entries)
        pulumi.set(__self__, "base_action", base_action)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "match_entries", match_entries)
        pulumi.set(__self__, "name", name)

    @_builtins.property
    @pulumi.getter(name="actionEntries")
    def action_entries(self) -> Sequence['outputs.GetIpv4DeviceAclPolicyDefinitionSequenceActionEntryResult']:
        """
        List of action entries
        """
        return pulumi.get(self, "action_entries")

    @_builtins.property
    @pulumi.getter(name="baseAction")
    def base_action(self) -> _builtins.str:
        """
        Base action, either `accept` or `drop`
        """
        return pulumi.get(self, "base_action")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.int:
        """
        Sequence ID
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter(name="matchEntries")
    def match_entries(self) -> Sequence['outputs.GetIpv4DeviceAclPolicyDefinitionSequenceMatchEntryResult']:
        """
        List of match entries
        """
        return pulumi.get(self, "match_entries")

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        """
        Sequence name
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class GetIpv4DeviceAclPolicyDefinitionSequenceActionEntryResult(dict):
    def __init__(__self__, *,
                 counter_name: _builtins.str,
                 type: _builtins.str):
        """
        :param _builtins.str counter_name: Counter name
        :param _builtins.str type: Type of action entry
        """
        pulumi.set(__self__, "counter_name", counter_name)
        pulumi.set(__self__, "type", type)

    @_builtins.property
    @pulumi.getter(name="counterName")
    def counter_name(self) -> _builtins.str:
        """
        Counter name
        """
        return pulumi.get(self, "counter_name")

    @_builtins.property
    @pulumi.getter
    def type(self) -> _builtins.str:
        """
        Type of action entry
        """
        return pulumi.get(self, "type")


@pulumi.output_type
class GetIpv4DeviceAclPolicyDefinitionSequenceMatchEntryResult(dict):
    def __init__(__self__, *,
                 destination_data_ipv4_prefix_list_id: _builtins.str,
                 destination_data_ipv4_prefix_list_version: _builtins.int,
                 destination_ip: _builtins.str,
                 destination_ip_variable: _builtins.str,
                 destination_port: _builtins.int,
                 source_data_ipv4_prefix_list_id: _builtins.str,
                 source_data_ipv4_prefix_list_version: _builtins.int,
                 source_ip: _builtins.str,
                 source_ip_variable: _builtins.str,
                 source_ports: _builtins.str,
                 type: _builtins.str):
        """
        :param _builtins.str destination_data_ipv4_prefix_list_id: Destination data IPv4 prefix list ID
        :param _builtins.int destination_data_ipv4_prefix_list_version: Destination data IPv4 prefix list version
        :param _builtins.str destination_ip: Destination IP prefix
        :param _builtins.str destination_ip_variable: Destination IP prefix variable
        :param _builtins.int destination_port: Destination port, only `22` and `161` supported
        :param _builtins.str source_data_ipv4_prefix_list_id: Source data IPv4 prefix list ID
        :param _builtins.int source_data_ipv4_prefix_list_version: Source data IPv4 prefix list version
        :param _builtins.str source_ip: Source IP prefix
        :param _builtins.str source_ip_variable: Source IP prefix variable
        :param _builtins.str source_ports: Source ports. Single value (0-65535) or ranges separated by spaces.
        :param _builtins.str type: Type of match entry
        """
        pulumi.set(__self__, "destination_data_ipv4_prefix_list_id", destination_data_ipv4_prefix_list_id)
        pulumi.set(__self__, "destination_data_ipv4_prefix_list_version", destination_data_ipv4_prefix_list_version)
        pulumi.set(__self__, "destination_ip", destination_ip)
        pulumi.set(__self__, "destination_ip_variable", destination_ip_variable)
        pulumi.set(__self__, "destination_port", destination_port)
        pulumi.set(__self__, "source_data_ipv4_prefix_list_id", source_data_ipv4_prefix_list_id)
        pulumi.set(__self__, "source_data_ipv4_prefix_list_version", source_data_ipv4_prefix_list_version)
        pulumi.set(__self__, "source_ip", source_ip)
        pulumi.set(__self__, "source_ip_variable", source_ip_variable)
        pulumi.set(__self__, "source_ports", source_ports)
        pulumi.set(__self__, "type", type)

    @_builtins.property
    @pulumi.getter(name="destinationDataIpv4PrefixListId")
    def destination_data_ipv4_prefix_list_id(self) -> _builtins.str:
        """
        Destination data IPv4 prefix list ID
        """
        return pulumi.get(self, "destination_data_ipv4_prefix_list_id")

    @_builtins.property
    @pulumi.getter(name="destinationDataIpv4PrefixListVersion")
    def destination_data_ipv4_prefix_list_version(self) -> _builtins.int:
        """
        Destination data IPv4 prefix list version
        """
        return pulumi.get(self, "destination_data_ipv4_prefix_list_version")

    @_builtins.property
    @pulumi.getter(name="destinationIp")
    def destination_ip(self) -> _builtins.str:
        """
        Destination IP prefix
        """
        return pulumi.get(self, "destination_ip")

    @_builtins.property
    @pulumi.getter(name="destinationIpVariable")
    def destination_ip_variable(self) -> _builtins.str:
        """
        Destination IP prefix variable
        """
        return pulumi.get(self, "destination_ip_variable")

    @_builtins.property
    @pulumi.getter(name="destinationPort")
    def destination_port(self) -> _builtins.int:
        """
        Destination port, only `22` and `161` supported
        """
        return pulumi.get(self, "destination_port")

    @_builtins.property
    @pulumi.getter(name="sourceDataIpv4PrefixListId")
    def source_data_ipv4_prefix_list_id(self) -> _builtins.str:
        """
        Source data IPv4 prefix list ID
        """
        return pulumi.get(self, "source_data_ipv4_prefix_list_id")

    @_builtins.property
    @pulumi.getter(name="sourceDataIpv4PrefixListVersion")
    def source_data_ipv4_prefix_list_version(self) -> _builtins.int:
        """
        Source data IPv4 prefix list version
        """
        return pulumi.get(self, "source_data_ipv4_prefix_list_version")

    @_builtins.property
    @pulumi.getter(name="sourceIp")
    def source_ip(self) -> _builtins.str:
        """
        Source IP prefix
        """
        return pulumi.get(self, "source_ip")

    @_builtins.property
    @pulumi.getter(name="sourceIpVariable")
    def source_ip_variable(self) -> _builtins.str:
        """
        Source IP prefix variable
        """
        return pulumi.get(self, "source_ip_variable")

    @_builtins.property
    @pulumi.getter(name="sourcePorts")
    def source_ports(self) -> _builtins.str:
        """
        Source ports. Single value (0-65535) or ranges separated by spaces.
        """
        return pulumi.get(self, "source_ports")

    @_builtins.property
    @pulumi.getter
    def type(self) -> _builtins.str:
        """
        Type of match entry
        """
        return pulumi.get(self, "type")


@pulumi.output_type
class GetIpv4PrefixListPolicyObjectEntryResult(dict):
    def __init__(__self__, *,
                 ge: _builtins.int,
                 le: _builtins.int,
                 prefix: _builtins.str):
        """
        :param _builtins.int ge: Greater equal
        :param _builtins.int le: Lesser equal
        :param _builtins.str prefix: IP prefix list entry e.g., `10.0.0.0/12`
        """
        pulumi.set(__self__, "ge", ge)
        pulumi.set(__self__, "le", le)
        pulumi.set(__self__, "prefix", prefix)

    @_builtins.property
    @pulumi.getter
    def ge(self) -> _builtins.int:
        """
        Greater equal
        """
        return pulumi.get(self, "ge")

    @_builtins.property
    @pulumi.getter
    def le(self) -> _builtins.int:
        """
        Lesser equal
        """
        return pulumi.get(self, "le")

    @_builtins.property
    @pulumi.getter
    def prefix(self) -> _builtins.str:
        """
        IP prefix list entry e.g., `10.0.0.0/12`
        """
        return pulumi.get(self, "prefix")


@pulumi.output_type
class GetIpv6AclPolicyDefinitionSequenceResult(dict):
    def __init__(__self__, *,
                 action_entries: Sequence['outputs.GetIpv6AclPolicyDefinitionSequenceActionEntryResult'],
                 base_action: _builtins.str,
                 id: _builtins.int,
                 match_entries: Sequence['outputs.GetIpv6AclPolicyDefinitionSequenceMatchEntryResult'],
                 name: _builtins.str):
        """
        :param Sequence['GetIpv6AclPolicyDefinitionSequenceActionEntryArgs'] action_entries: List of action entries
        :param _builtins.str base_action: Base action, either `accept` or `drop`
        :param _builtins.int id: Sequence ID
        :param Sequence['GetIpv6AclPolicyDefinitionSequenceMatchEntryArgs'] match_entries: List of match entries
        :param _builtins.str name: Sequence name
        """
        pulumi.set(__self__, "action_entries", action_entries)
        pulumi.set(__self__, "base_action", base_action)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "match_entries", match_entries)
        pulumi.set(__self__, "name", name)

    @_builtins.property
    @pulumi.getter(name="actionEntries")
    def action_entries(self) -> Sequence['outputs.GetIpv6AclPolicyDefinitionSequenceActionEntryResult']:
        """
        List of action entries
        """
        return pulumi.get(self, "action_entries")

    @_builtins.property
    @pulumi.getter(name="baseAction")
    def base_action(self) -> _builtins.str:
        """
        Base action, either `accept` or `drop`
        """
        return pulumi.get(self, "base_action")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.int:
        """
        Sequence ID
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter(name="matchEntries")
    def match_entries(self) -> Sequence['outputs.GetIpv6AclPolicyDefinitionSequenceMatchEntryResult']:
        """
        List of match entries
        """
        return pulumi.get(self, "match_entries")

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        """
        Sequence name
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class GetIpv6AclPolicyDefinitionSequenceActionEntryResult(dict):
    def __init__(__self__, *,
                 class_map_id: _builtins.str,
                 class_map_version: _builtins.int,
                 counter_name: _builtins.str,
                 log: _builtins.bool,
                 mirror_id: _builtins.str,
                 mirror_version: _builtins.int,
                 policer_id: _builtins.str,
                 policer_version: _builtins.int,
                 set_parameters: Sequence['outputs.GetIpv6AclPolicyDefinitionSequenceActionEntrySetParameterResult'],
                 type: _builtins.str):
        """
        :param _builtins.str class_map_id: Class map ID
        :param _builtins.int class_map_version: Class map version
        :param _builtins.str counter_name: Counter name
        :param _builtins.bool log: Enable logging
        :param _builtins.str mirror_id: Mirror ID
        :param _builtins.int mirror_version: Mirror version
        :param _builtins.str policer_id: Policer ID
        :param _builtins.int policer_version: Policer version
        :param Sequence['GetIpv6AclPolicyDefinitionSequenceActionEntrySetParameterArgs'] set_parameters: List of set parameters
        :param _builtins.str type: Type of action entry
        """
        pulumi.set(__self__, "class_map_id", class_map_id)
        pulumi.set(__self__, "class_map_version", class_map_version)
        pulumi.set(__self__, "counter_name", counter_name)
        pulumi.set(__self__, "log", log)
        pulumi.set(__self__, "mirror_id", mirror_id)
        pulumi.set(__self__, "mirror_version", mirror_version)
        pulumi.set(__self__, "policer_id", policer_id)
        pulumi.set(__self__, "policer_version", policer_version)
        pulumi.set(__self__, "set_parameters", set_parameters)
        pulumi.set(__self__, "type", type)

    @_builtins.property
    @pulumi.getter(name="classMapId")
    def class_map_id(self) -> _builtins.str:
        """
        Class map ID
        """
        return pulumi.get(self, "class_map_id")

    @_builtins.property
    @pulumi.getter(name="classMapVersion")
    def class_map_version(self) -> _builtins.int:
        """
        Class map version
        """
        return pulumi.get(self, "class_map_version")

    @_builtins.property
    @pulumi.getter(name="counterName")
    def counter_name(self) -> _builtins.str:
        """
        Counter name
        """
        return pulumi.get(self, "counter_name")

    @_builtins.property
    @pulumi.getter
    def log(self) -> _builtins.bool:
        """
        Enable logging
        """
        return pulumi.get(self, "log")

    @_builtins.property
    @pulumi.getter(name="mirrorId")
    def mirror_id(self) -> _builtins.str:
        """
        Mirror ID
        """
        return pulumi.get(self, "mirror_id")

    @_builtins.property
    @pulumi.getter(name="mirrorVersion")
    def mirror_version(self) -> _builtins.int:
        """
        Mirror version
        """
        return pulumi.get(self, "mirror_version")

    @_builtins.property
    @pulumi.getter(name="policerId")
    def policer_id(self) -> _builtins.str:
        """
        Policer ID
        """
        return pulumi.get(self, "policer_id")

    @_builtins.property
    @pulumi.getter(name="policerVersion")
    def policer_version(self) -> _builtins.int:
        """
        Policer version
        """
        return pulumi.get(self, "policer_version")

    @_builtins.property
    @pulumi.getter(name="setParameters")
    def set_parameters(self) -> Sequence['outputs.GetIpv6AclPolicyDefinitionSequenceActionEntrySetParameterResult']:
        """
        List of set parameters
        """
        return pulumi.get(self, "set_parameters")

    @_builtins.property
    @pulumi.getter
    def type(self) -> _builtins.str:
        """
        Type of action entry
        """
        return pulumi.get(self, "type")


@pulumi.output_type
class GetIpv6AclPolicyDefinitionSequenceActionEntrySetParameterResult(dict):
    def __init__(__self__, *,
                 next_hop: _builtins.str,
                 traffic_class: _builtins.int,
                 type: _builtins.str):
        """
        :param _builtins.str next_hop: Next hop IP
        :param _builtins.int traffic_class: Traffic class
        :param _builtins.str type: Type of set parameter
        """
        pulumi.set(__self__, "next_hop", next_hop)
        pulumi.set(__self__, "traffic_class", traffic_class)
        pulumi.set(__self__, "type", type)

    @_builtins.property
    @pulumi.getter(name="nextHop")
    def next_hop(self) -> _builtins.str:
        """
        Next hop IP
        """
        return pulumi.get(self, "next_hop")

    @_builtins.property
    @pulumi.getter(name="trafficClass")
    def traffic_class(self) -> _builtins.int:
        """
        Traffic class
        """
        return pulumi.get(self, "traffic_class")

    @_builtins.property
    @pulumi.getter
    def type(self) -> _builtins.str:
        """
        Type of set parameter
        """
        return pulumi.get(self, "type")


@pulumi.output_type
class GetIpv6AclPolicyDefinitionSequenceMatchEntryResult(dict):
    def __init__(__self__, *,
                 class_map_id: _builtins.str,
                 class_map_version: _builtins.int,
                 destination_data_ipv6_prefix_list_id: _builtins.str,
                 destination_data_ipv6_prefix_list_version: _builtins.int,
                 destination_ip: _builtins.str,
                 destination_ports: _builtins.str,
                 next_header: _builtins.int,
                 packet_length: _builtins.int,
                 priority: _builtins.str,
                 source_data_ipv6_prefix_list_id: _builtins.str,
                 source_data_ipv6_prefix_list_version: _builtins.int,
                 source_ip: _builtins.str,
                 source_ports: _builtins.str,
                 tcp: _builtins.str,
                 traffic_class: _builtins.int,
                 type: _builtins.str):
        """
        :param _builtins.str class_map_id: Class map ID
        :param _builtins.int class_map_version: Class map version
        :param _builtins.str destination_data_ipv6_prefix_list_id: Destination dataIPv6 prefix list ID
        :param _builtins.int destination_data_ipv6_prefix_list_version: Destination data prefix list version
        :param _builtins.str destination_ip: Destination IPv6 prefix
        :param _builtins.str destination_ports: Destination ports. Single value (0-65535) or ranges separated by spaces.
        :param _builtins.int next_header: Next header
        :param _builtins.int packet_length: Packet length
        :param _builtins.str priority: PLP - priority
        :param _builtins.str source_data_ipv6_prefix_list_id: Source data IPv6 prefix list ID
        :param _builtins.int source_data_ipv6_prefix_list_version: Source data IPv6 prefix list version
        :param _builtins.str source_ip: Source IPv6 prefix
        :param _builtins.str source_ports: Source ports. Single value (0-65535) or ranges separated by spaces.
        :param _builtins.str tcp: TCP parameters
        :param _builtins.int traffic_class: Traffic class
        :param _builtins.str type: Type of match entry
        """
        pulumi.set(__self__, "class_map_id", class_map_id)
        pulumi.set(__self__, "class_map_version", class_map_version)
        pulumi.set(__self__, "destination_data_ipv6_prefix_list_id", destination_data_ipv6_prefix_list_id)
        pulumi.set(__self__, "destination_data_ipv6_prefix_list_version", destination_data_ipv6_prefix_list_version)
        pulumi.set(__self__, "destination_ip", destination_ip)
        pulumi.set(__self__, "destination_ports", destination_ports)
        pulumi.set(__self__, "next_header", next_header)
        pulumi.set(__self__, "packet_length", packet_length)
        pulumi.set(__self__, "priority", priority)
        pulumi.set(__self__, "source_data_ipv6_prefix_list_id", source_data_ipv6_prefix_list_id)
        pulumi.set(__self__, "source_data_ipv6_prefix_list_version", source_data_ipv6_prefix_list_version)
        pulumi.set(__self__, "source_ip", source_ip)
        pulumi.set(__self__, "source_ports", source_ports)
        pulumi.set(__self__, "tcp", tcp)
        pulumi.set(__self__, "traffic_class", traffic_class)
        pulumi.set(__self__, "type", type)

    @_builtins.property
    @pulumi.getter(name="classMapId")
    def class_map_id(self) -> _builtins.str:
        """
        Class map ID
        """
        return pulumi.get(self, "class_map_id")

    @_builtins.property
    @pulumi.getter(name="classMapVersion")
    def class_map_version(self) -> _builtins.int:
        """
        Class map version
        """
        return pulumi.get(self, "class_map_version")

    @_builtins.property
    @pulumi.getter(name="destinationDataIpv6PrefixListId")
    def destination_data_ipv6_prefix_list_id(self) -> _builtins.str:
        """
        Destination dataIPv6 prefix list ID
        """
        return pulumi.get(self, "destination_data_ipv6_prefix_list_id")

    @_builtins.property
    @pulumi.getter(name="destinationDataIpv6PrefixListVersion")
    def destination_data_ipv6_prefix_list_version(self) -> _builtins.int:
        """
        Destination data prefix list version
        """
        return pulumi.get(self, "destination_data_ipv6_prefix_list_version")

    @_builtins.property
    @pulumi.getter(name="destinationIp")
    def destination_ip(self) -> _builtins.str:
        """
        Destination IPv6 prefix
        """
        return pulumi.get(self, "destination_ip")

    @_builtins.property
    @pulumi.getter(name="destinationPorts")
    def destination_ports(self) -> _builtins.str:
        """
        Destination ports. Single value (0-65535) or ranges separated by spaces.
        """
        return pulumi.get(self, "destination_ports")

    @_builtins.property
    @pulumi.getter(name="nextHeader")
    def next_header(self) -> _builtins.int:
        """
        Next header
        """
        return pulumi.get(self, "next_header")

    @_builtins.property
    @pulumi.getter(name="packetLength")
    def packet_length(self) -> _builtins.int:
        """
        Packet length
        """
        return pulumi.get(self, "packet_length")

    @_builtins.property
    @pulumi.getter
    def priority(self) -> _builtins.str:
        """
        PLP - priority
        """
        return pulumi.get(self, "priority")

    @_builtins.property
    @pulumi.getter(name="sourceDataIpv6PrefixListId")
    def source_data_ipv6_prefix_list_id(self) -> _builtins.str:
        """
        Source data IPv6 prefix list ID
        """
        return pulumi.get(self, "source_data_ipv6_prefix_list_id")

    @_builtins.property
    @pulumi.getter(name="sourceDataIpv6PrefixListVersion")
    def source_data_ipv6_prefix_list_version(self) -> _builtins.int:
        """
        Source data IPv6 prefix list version
        """
        return pulumi.get(self, "source_data_ipv6_prefix_list_version")

    @_builtins.property
    @pulumi.getter(name="sourceIp")
    def source_ip(self) -> _builtins.str:
        """
        Source IPv6 prefix
        """
        return pulumi.get(self, "source_ip")

    @_builtins.property
    @pulumi.getter(name="sourcePorts")
    def source_ports(self) -> _builtins.str:
        """
        Source ports. Single value (0-65535) or ranges separated by spaces.
        """
        return pulumi.get(self, "source_ports")

    @_builtins.property
    @pulumi.getter
    def tcp(self) -> _builtins.str:
        """
        TCP parameters
        """
        return pulumi.get(self, "tcp")

    @_builtins.property
    @pulumi.getter(name="trafficClass")
    def traffic_class(self) -> _builtins.int:
        """
        Traffic class
        """
        return pulumi.get(self, "traffic_class")

    @_builtins.property
    @pulumi.getter
    def type(self) -> _builtins.str:
        """
        Type of match entry
        """
        return pulumi.get(self, "type")


@pulumi.output_type
class GetIpv6DeviceAclPolicyDefinitionSequenceResult(dict):
    def __init__(__self__, *,
                 action_entries: Sequence['outputs.GetIpv6DeviceAclPolicyDefinitionSequenceActionEntryResult'],
                 base_action: _builtins.str,
                 id: _builtins.int,
                 match_entries: Sequence['outputs.GetIpv6DeviceAclPolicyDefinitionSequenceMatchEntryResult'],
                 name: _builtins.str):
        """
        :param Sequence['GetIpv6DeviceAclPolicyDefinitionSequenceActionEntryArgs'] action_entries: List of action entries
        :param _builtins.str base_action: Base action, either `accept` or `drop`
        :param _builtins.int id: Sequence ID
        :param Sequence['GetIpv6DeviceAclPolicyDefinitionSequenceMatchEntryArgs'] match_entries: List of match entries
        :param _builtins.str name: Sequence name
        """
        pulumi.set(__self__, "action_entries", action_entries)
        pulumi.set(__self__, "base_action", base_action)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "match_entries", match_entries)
        pulumi.set(__self__, "name", name)

    @_builtins.property
    @pulumi.getter(name="actionEntries")
    def action_entries(self) -> Sequence['outputs.GetIpv6DeviceAclPolicyDefinitionSequenceActionEntryResult']:
        """
        List of action entries
        """
        return pulumi.get(self, "action_entries")

    @_builtins.property
    @pulumi.getter(name="baseAction")
    def base_action(self) -> _builtins.str:
        """
        Base action, either `accept` or `drop`
        """
        return pulumi.get(self, "base_action")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.int:
        """
        Sequence ID
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter(name="matchEntries")
    def match_entries(self) -> Sequence['outputs.GetIpv6DeviceAclPolicyDefinitionSequenceMatchEntryResult']:
        """
        List of match entries
        """
        return pulumi.get(self, "match_entries")

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        """
        Sequence name
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class GetIpv6DeviceAclPolicyDefinitionSequenceActionEntryResult(dict):
    def __init__(__self__, *,
                 counter_name: _builtins.str,
                 type: _builtins.str):
        """
        :param _builtins.str counter_name: Counter name
        :param _builtins.str type: Type of action entry
        """
        pulumi.set(__self__, "counter_name", counter_name)
        pulumi.set(__self__, "type", type)

    @_builtins.property
    @pulumi.getter(name="counterName")
    def counter_name(self) -> _builtins.str:
        """
        Counter name
        """
        return pulumi.get(self, "counter_name")

    @_builtins.property
    @pulumi.getter
    def type(self) -> _builtins.str:
        """
        Type of action entry
        """
        return pulumi.get(self, "type")


@pulumi.output_type
class GetIpv6DeviceAclPolicyDefinitionSequenceMatchEntryResult(dict):
    def __init__(__self__, *,
                 destination_data_ipv6_prefix_list_id: _builtins.str,
                 destination_data_ipv6_prefix_list_version: _builtins.int,
                 destination_ip: _builtins.str,
                 destination_port: _builtins.int,
                 source_data_ipv6_prefix_list_id: _builtins.str,
                 source_data_ipv6_prefix_list_version: _builtins.int,
                 source_ip: _builtins.str,
                 source_ports: _builtins.str,
                 type: _builtins.str):
        """
        :param _builtins.str destination_data_ipv6_prefix_list_id: Destination data IPv6 prefix list ID
        :param _builtins.int destination_data_ipv6_prefix_list_version: Destination data IPv6 prefix list version
        :param _builtins.str destination_ip: Destination IP prefix
        :param _builtins.int destination_port: Destination port, only `22` and `161` supported
        :param _builtins.str source_data_ipv6_prefix_list_id: Source data IPv6 prefix list ID
        :param _builtins.int source_data_ipv6_prefix_list_version: Source data IPv6 prefix list version
        :param _builtins.str source_ip: Source IP prefix
        :param _builtins.str source_ports: Source ports. Single value (0-65535) or ranges separated by spaces.
        :param _builtins.str type: Type of match entry
        """
        pulumi.set(__self__, "destination_data_ipv6_prefix_list_id", destination_data_ipv6_prefix_list_id)
        pulumi.set(__self__, "destination_data_ipv6_prefix_list_version", destination_data_ipv6_prefix_list_version)
        pulumi.set(__self__, "destination_ip", destination_ip)
        pulumi.set(__self__, "destination_port", destination_port)
        pulumi.set(__self__, "source_data_ipv6_prefix_list_id", source_data_ipv6_prefix_list_id)
        pulumi.set(__self__, "source_data_ipv6_prefix_list_version", source_data_ipv6_prefix_list_version)
        pulumi.set(__self__, "source_ip", source_ip)
        pulumi.set(__self__, "source_ports", source_ports)
        pulumi.set(__self__, "type", type)

    @_builtins.property
    @pulumi.getter(name="destinationDataIpv6PrefixListId")
    def destination_data_ipv6_prefix_list_id(self) -> _builtins.str:
        """
        Destination data IPv6 prefix list ID
        """
        return pulumi.get(self, "destination_data_ipv6_prefix_list_id")

    @_builtins.property
    @pulumi.getter(name="destinationDataIpv6PrefixListVersion")
    def destination_data_ipv6_prefix_list_version(self) -> _builtins.int:
        """
        Destination data IPv6 prefix list version
        """
        return pulumi.get(self, "destination_data_ipv6_prefix_list_version")

    @_builtins.property
    @pulumi.getter(name="destinationIp")
    def destination_ip(self) -> _builtins.str:
        """
        Destination IP prefix
        """
        return pulumi.get(self, "destination_ip")

    @_builtins.property
    @pulumi.getter(name="destinationPort")
    def destination_port(self) -> _builtins.int:
        """
        Destination port, only `22` and `161` supported
        """
        return pulumi.get(self, "destination_port")

    @_builtins.property
    @pulumi.getter(name="sourceDataIpv6PrefixListId")
    def source_data_ipv6_prefix_list_id(self) -> _builtins.str:
        """
        Source data IPv6 prefix list ID
        """
        return pulumi.get(self, "source_data_ipv6_prefix_list_id")

    @_builtins.property
    @pulumi.getter(name="sourceDataIpv6PrefixListVersion")
    def source_data_ipv6_prefix_list_version(self) -> _builtins.int:
        """
        Source data IPv6 prefix list version
        """
        return pulumi.get(self, "source_data_ipv6_prefix_list_version")

    @_builtins.property
    @pulumi.getter(name="sourceIp")
    def source_ip(self) -> _builtins.str:
        """
        Source IP prefix
        """
        return pulumi.get(self, "source_ip")

    @_builtins.property
    @pulumi.getter(name="sourcePorts")
    def source_ports(self) -> _builtins.str:
        """
        Source ports. Single value (0-65535) or ranges separated by spaces.
        """
        return pulumi.get(self, "source_ports")

    @_builtins.property
    @pulumi.getter
    def type(self) -> _builtins.str:
        """
        Type of match entry
        """
        return pulumi.get(self, "type")


@pulumi.output_type
class GetIpv6PrefixListPolicyObjectEntryResult(dict):
    def __init__(__self__, *,
                 ge: _builtins.int,
                 le: _builtins.int,
                 prefix: _builtins.str):
        """
        :param _builtins.int ge: Greater equal
        :param _builtins.int le: Lesser equal
        :param _builtins.str prefix: IP prefix list entry, e.g. `2001:1:1:2::/64`
        """
        pulumi.set(__self__, "ge", ge)
        pulumi.set(__self__, "le", le)
        pulumi.set(__self__, "prefix", prefix)

    @_builtins.property
    @pulumi.getter
    def ge(self) -> _builtins.int:
        """
        Greater equal
        """
        return pulumi.get(self, "ge")

    @_builtins.property
    @pulumi.getter
    def le(self) -> _builtins.int:
        """
        Lesser equal
        """
        return pulumi.get(self, "le")

    @_builtins.property
    @pulumi.getter
    def prefix(self) -> _builtins.str:
        """
        IP prefix list entry, e.g. `2001:1:1:2::/64`
        """
        return pulumi.get(self, "prefix")


@pulumi.output_type
class GetLocalApplicationListPolicyObjectEntryResult(dict):
    def __init__(__self__, *,
                 application: _builtins.str,
                 application_family: _builtins.str):
        """
        :param _builtins.str application: Application name
        :param _builtins.str application_family: Application family name
        """
        pulumi.set(__self__, "application", application)
        pulumi.set(__self__, "application_family", application_family)

    @_builtins.property
    @pulumi.getter
    def application(self) -> _builtins.str:
        """
        Application name
        """
        return pulumi.get(self, "application")

    @_builtins.property
    @pulumi.getter(name="applicationFamily")
    def application_family(self) -> _builtins.str:
        """
        Application family name
        """
        return pulumi.get(self, "application_family")


@pulumi.output_type
class GetLocalizedPolicyDefinitionResult(dict):
    def __init__(__self__, *,
                 id: _builtins.str,
                 type: _builtins.str,
                 version: _builtins.int):
        """
        :param _builtins.str id: Policy definition ID
        :param _builtins.str type: Policy definition type
        :param _builtins.int version: Policy definition version
        """
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "type", type)
        pulumi.set(__self__, "version", version)

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        Policy definition ID
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter
    def type(self) -> _builtins.str:
        """
        Policy definition type
        """
        return pulumi.get(self, "type")

    @_builtins.property
    @pulumi.getter
    def version(self) -> _builtins.int:
        """
        Policy definition version
        """
        return pulumi.get(self, "version")


@pulumi.output_type
class GetMeshTopologyPolicyDefinitionRegionResult(dict):
    def __init__(__self__, *,
                 name: _builtins.str,
                 site_list_ids: Sequence[_builtins.str],
                 site_list_versions: Sequence[_builtins.str]):
        """
        :param _builtins.str name: Region name
        :param Sequence[_builtins.str] site_list_ids: Site list IDs
        :param Sequence[_builtins.str] site_list_versions: Site list versions
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "site_list_ids", site_list_ids)
        pulumi.set(__self__, "site_list_versions", site_list_versions)

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        """
        Region name
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter(name="siteListIds")
    def site_list_ids(self) -> Sequence[_builtins.str]:
        """
        Site list IDs
        """
        return pulumi.get(self, "site_list_ids")

    @_builtins.property
    @pulumi.getter(name="siteListVersions")
    def site_list_versions(self) -> Sequence[_builtins.str]:
        """
        Site list versions
        """
        return pulumi.get(self, "site_list_versions")


@pulumi.output_type
class GetOtherThousandeyesFeatureVirtualApplicationResult(dict):
    def __init__(__self__, *,
                 account_group_token: _builtins.str,
                 account_group_token_variable: _builtins.str,
                 agent_default_gateway: _builtins.str,
                 agent_default_gateway_variable: _builtins.str,
                 hostname: _builtins.str,
                 hostname_variable: _builtins.str,
                 management_ip: _builtins.str,
                 management_ip_variable: _builtins.str,
                 management_subnet_mask: _builtins.str,
                 management_subnet_mask_variable: _builtins.str,
                 name_server_ip: _builtins.str,
                 name_server_ip_variable: _builtins.str,
                 pac_url: _builtins.str,
                 pac_url_variable: _builtins.str,
                 proxy_host: _builtins.str,
                 proxy_host_variable: _builtins.str,
                 proxy_port: _builtins.int,
                 proxy_port_variable: _builtins.str,
                 proxy_type: _builtins.str,
                 vpn: _builtins.int,
                 vpn_variable: _builtins.str):
        """
        :param _builtins.str account_group_token: Set the Account Group Token
        :param _builtins.str account_group_token_variable: Variable name
        :param _builtins.str agent_default_gateway: Set the Agent default gateway
        :param _builtins.str agent_default_gateway_variable: Variable name
        :param _builtins.str hostname: Set the host name
        :param _builtins.str hostname_variable: Variable name
        :param _builtins.str management_ip: Set the Agent IP Address
        :param _builtins.str management_ip_variable: Variable name
        :param _builtins.str management_subnet_mask: Set the Agent SubnetMask
        :param _builtins.str management_subnet_mask_variable: Variable name
        :param _builtins.str name_server_ip: Set the name server
        :param _builtins.str name_server_ip_variable: Variable name
        :param _builtins.str pac_url: Set the proxy PAC url
        :param _builtins.str pac_url_variable: Variable name
        :param _builtins.str proxy_host: Set the Proxy Host
        :param _builtins.str proxy_host_variable: Variable name
        :param _builtins.int proxy_port: Set the Proxy Port
        :param _builtins.str proxy_port_variable: Variable name
        :param _builtins.str proxy_type: Select Web Proxy Type
        :param _builtins.int vpn: VPN number
        :param _builtins.str vpn_variable: Variable name
        """
        pulumi.set(__self__, "account_group_token", account_group_token)
        pulumi.set(__self__, "account_group_token_variable", account_group_token_variable)
        pulumi.set(__self__, "agent_default_gateway", agent_default_gateway)
        pulumi.set(__self__, "agent_default_gateway_variable", agent_default_gateway_variable)
        pulumi.set(__self__, "hostname", hostname)
        pulumi.set(__self__, "hostname_variable", hostname_variable)
        pulumi.set(__self__, "management_ip", management_ip)
        pulumi.set(__self__, "management_ip_variable", management_ip_variable)
        pulumi.set(__self__, "management_subnet_mask", management_subnet_mask)
        pulumi.set(__self__, "management_subnet_mask_variable", management_subnet_mask_variable)
        pulumi.set(__self__, "name_server_ip", name_server_ip)
        pulumi.set(__self__, "name_server_ip_variable", name_server_ip_variable)
        pulumi.set(__self__, "pac_url", pac_url)
        pulumi.set(__self__, "pac_url_variable", pac_url_variable)
        pulumi.set(__self__, "proxy_host", proxy_host)
        pulumi.set(__self__, "proxy_host_variable", proxy_host_variable)
        pulumi.set(__self__, "proxy_port", proxy_port)
        pulumi.set(__self__, "proxy_port_variable", proxy_port_variable)
        pulumi.set(__self__, "proxy_type", proxy_type)
        pulumi.set(__self__, "vpn", vpn)
        pulumi.set(__self__, "vpn_variable", vpn_variable)

    @_builtins.property
    @pulumi.getter(name="accountGroupToken")
    def account_group_token(self) -> _builtins.str:
        """
        Set the Account Group Token
        """
        return pulumi.get(self, "account_group_token")

    @_builtins.property
    @pulumi.getter(name="accountGroupTokenVariable")
    def account_group_token_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "account_group_token_variable")

    @_builtins.property
    @pulumi.getter(name="agentDefaultGateway")
    def agent_default_gateway(self) -> _builtins.str:
        """
        Set the Agent default gateway
        """
        return pulumi.get(self, "agent_default_gateway")

    @_builtins.property
    @pulumi.getter(name="agentDefaultGatewayVariable")
    def agent_default_gateway_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "agent_default_gateway_variable")

    @_builtins.property
    @pulumi.getter
    def hostname(self) -> _builtins.str:
        """
        Set the host name
        """
        return pulumi.get(self, "hostname")

    @_builtins.property
    @pulumi.getter(name="hostnameVariable")
    def hostname_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "hostname_variable")

    @_builtins.property
    @pulumi.getter(name="managementIp")
    def management_ip(self) -> _builtins.str:
        """
        Set the Agent IP Address
        """
        return pulumi.get(self, "management_ip")

    @_builtins.property
    @pulumi.getter(name="managementIpVariable")
    def management_ip_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "management_ip_variable")

    @_builtins.property
    @pulumi.getter(name="managementSubnetMask")
    def management_subnet_mask(self) -> _builtins.str:
        """
        Set the Agent SubnetMask
        """
        return pulumi.get(self, "management_subnet_mask")

    @_builtins.property
    @pulumi.getter(name="managementSubnetMaskVariable")
    def management_subnet_mask_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "management_subnet_mask_variable")

    @_builtins.property
    @pulumi.getter(name="nameServerIp")
    def name_server_ip(self) -> _builtins.str:
        """
        Set the name server
        """
        return pulumi.get(self, "name_server_ip")

    @_builtins.property
    @pulumi.getter(name="nameServerIpVariable")
    def name_server_ip_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "name_server_ip_variable")

    @_builtins.property
    @pulumi.getter(name="pacUrl")
    def pac_url(self) -> _builtins.str:
        """
        Set the proxy PAC url
        """
        return pulumi.get(self, "pac_url")

    @_builtins.property
    @pulumi.getter(name="pacUrlVariable")
    def pac_url_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "pac_url_variable")

    @_builtins.property
    @pulumi.getter(name="proxyHost")
    def proxy_host(self) -> _builtins.str:
        """
        Set the Proxy Host
        """
        return pulumi.get(self, "proxy_host")

    @_builtins.property
    @pulumi.getter(name="proxyHostVariable")
    def proxy_host_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "proxy_host_variable")

    @_builtins.property
    @pulumi.getter(name="proxyPort")
    def proxy_port(self) -> _builtins.int:
        """
        Set the Proxy Port
        """
        return pulumi.get(self, "proxy_port")

    @_builtins.property
    @pulumi.getter(name="proxyPortVariable")
    def proxy_port_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "proxy_port_variable")

    @_builtins.property
    @pulumi.getter(name="proxyType")
    def proxy_type(self) -> _builtins.str:
        """
        Select Web Proxy Type
        """
        return pulumi.get(self, "proxy_type")

    @_builtins.property
    @pulumi.getter
    def vpn(self) -> _builtins.int:
        """
        VPN number
        """
        return pulumi.get(self, "vpn")

    @_builtins.property
    @pulumi.getter(name="vpnVariable")
    def vpn_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "vpn_variable")


@pulumi.output_type
class GetOtherUcseFeatureInterfaceResult(dict):
    def __init__(__self__, *,
                 interface_name: _builtins.str,
                 interface_name_variable: _builtins.str,
                 ipv4_address: _builtins.str,
                 ipv4_address_variable: _builtins.str,
                 ucse_interface_vpn: _builtins.int,
                 ucse_interface_vpn_variable: _builtins.str):
        """
        :param _builtins.str interface_name: Set Inteface name
        :param _builtins.str interface_name_variable: Variable name
        :param _builtins.str ipv4_address: Assign IPv4 address
        :param _builtins.str ipv4_address_variable: Variable name
        :param _builtins.int ucse_interface_vpn: UCSE Interface VPN
        :param _builtins.str ucse_interface_vpn_variable: Variable name
        """
        pulumi.set(__self__, "interface_name", interface_name)
        pulumi.set(__self__, "interface_name_variable", interface_name_variable)
        pulumi.set(__self__, "ipv4_address", ipv4_address)
        pulumi.set(__self__, "ipv4_address_variable", ipv4_address_variable)
        pulumi.set(__self__, "ucse_interface_vpn", ucse_interface_vpn)
        pulumi.set(__self__, "ucse_interface_vpn_variable", ucse_interface_vpn_variable)

    @_builtins.property
    @pulumi.getter(name="interfaceName")
    def interface_name(self) -> _builtins.str:
        """
        Set Inteface name
        """
        return pulumi.get(self, "interface_name")

    @_builtins.property
    @pulumi.getter(name="interfaceNameVariable")
    def interface_name_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "interface_name_variable")

    @_builtins.property
    @pulumi.getter(name="ipv4Address")
    def ipv4_address(self) -> _builtins.str:
        """
        Assign IPv4 address
        """
        return pulumi.get(self, "ipv4_address")

    @_builtins.property
    @pulumi.getter(name="ipv4AddressVariable")
    def ipv4_address_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "ipv4_address_variable")

    @_builtins.property
    @pulumi.getter(name="ucseInterfaceVpn")
    def ucse_interface_vpn(self) -> _builtins.int:
        """
        UCSE Interface VPN
        """
        return pulumi.get(self, "ucse_interface_vpn")

    @_builtins.property
    @pulumi.getter(name="ucseInterfaceVpnVariable")
    def ucse_interface_vpn_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "ucse_interface_vpn_variable")


@pulumi.output_type
class GetPolicyGroupDeviceResult(dict):
    def __init__(__self__, *,
                 deploy: _builtins.bool,
                 id: _builtins.str,
                 variables: Sequence['outputs.GetPolicyGroupDeviceVariableResult']):
        """
        :param _builtins.bool deploy: Deploy to device if enabled.
        :param _builtins.str id: Device ID
        :param Sequence['GetPolicyGroupDeviceVariableArgs'] variables: List of variables
        """
        pulumi.set(__self__, "deploy", deploy)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "variables", variables)

    @_builtins.property
    @pulumi.getter
    def deploy(self) -> _builtins.bool:
        """
        Deploy to device if enabled.
        """
        return pulumi.get(self, "deploy")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        Device ID
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter
    def variables(self) -> Sequence['outputs.GetPolicyGroupDeviceVariableResult']:
        """
        List of variables
        """
        return pulumi.get(self, "variables")


@pulumi.output_type
class GetPolicyGroupDeviceVariableResult(dict):
    def __init__(__self__, *,
                 list_values: Sequence[_builtins.str],
                 name: _builtins.str,
                 value: _builtins.str):
        """
        :param Sequence[_builtins.str] list_values: Use this instead of `value` in case value is of type `List`.
        :param _builtins.str name: Variable name
        :param _builtins.str value: Variable value
        """
        pulumi.set(__self__, "list_values", list_values)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "value", value)

    @_builtins.property
    @pulumi.getter(name="listValues")
    def list_values(self) -> Sequence[_builtins.str]:
        """
        Use this instead of `value` in case value is of type `List`.
        """
        return pulumi.get(self, "list_values")

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def value(self) -> _builtins.str:
        """
        Variable value
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class GetPolicyObjectAppProbeClassEntryResult(dict):
    def __init__(__self__, *,
                 forwarding_class: _builtins.str,
                 maps: Sequence['outputs.GetPolicyObjectAppProbeClassEntryMapResult']):
        """
        :param _builtins.str forwarding_class: Forwarding Class Name
        :param Sequence['GetPolicyObjectAppProbeClassEntryMapArgs'] maps: Map
        """
        pulumi.set(__self__, "forwarding_class", forwarding_class)
        pulumi.set(__self__, "maps", maps)

    @_builtins.property
    @pulumi.getter(name="forwardingClass")
    def forwarding_class(self) -> _builtins.str:
        """
        Forwarding Class Name
        """
        return pulumi.get(self, "forwarding_class")

    @_builtins.property
    @pulumi.getter
    def maps(self) -> Sequence['outputs.GetPolicyObjectAppProbeClassEntryMapResult']:
        """
        Map
        """
        return pulumi.get(self, "maps")


@pulumi.output_type
class GetPolicyObjectAppProbeClassEntryMapResult(dict):
    def __init__(__self__, *,
                 color: _builtins.str,
                 dscp: _builtins.int):
        """
        :param _builtins.str color: Color
        :param _builtins.int dscp: DSCP number
        """
        pulumi.set(__self__, "color", color)
        pulumi.set(__self__, "dscp", dscp)

    @_builtins.property
    @pulumi.getter
    def color(self) -> _builtins.str:
        """
        Color
        """
        return pulumi.get(self, "color")

    @_builtins.property
    @pulumi.getter
    def dscp(self) -> _builtins.int:
        """
        DSCP number
        """
        return pulumi.get(self, "dscp")


@pulumi.output_type
class GetPolicyObjectApplicationListEntryResult(dict):
    def __init__(__self__, *,
                 application: _builtins.str,
                 application_family: _builtins.str):
        pulumi.set(__self__, "application", application)
        pulumi.set(__self__, "application_family", application_family)

    @_builtins.property
    @pulumi.getter
    def application(self) -> _builtins.str:
        return pulumi.get(self, "application")

    @_builtins.property
    @pulumi.getter(name="applicationFamily")
    def application_family(self) -> _builtins.str:
        return pulumi.get(self, "application_family")


@pulumi.output_type
class GetPolicyObjectAsPathListEntryResult(dict):
    def __init__(__self__, *,
                 as_path_list: _builtins.str):
        pulumi.set(__self__, "as_path_list", as_path_list)

    @_builtins.property
    @pulumi.getter(name="asPathList")
    def as_path_list(self) -> _builtins.str:
        return pulumi.get(self, "as_path_list")


@pulumi.output_type
class GetPolicyObjectClassMapEntryResult(dict):
    def __init__(__self__, *,
                 queue: _builtins.str):
        """
        :param _builtins.str queue: select a queue
        """
        pulumi.set(__self__, "queue", queue)

    @_builtins.property
    @pulumi.getter
    def queue(self) -> _builtins.str:
        """
        select a queue
        """
        return pulumi.get(self, "queue")


@pulumi.output_type
class GetPolicyObjectColorListEntryResult(dict):
    def __init__(__self__, *,
                 color: _builtins.str):
        pulumi.set(__self__, "color", color)

    @_builtins.property
    @pulumi.getter
    def color(self) -> _builtins.str:
        return pulumi.get(self, "color")


@pulumi.output_type
class GetPolicyObjectDataIpv4PrefixListEntryResult(dict):
    def __init__(__self__, *,
                 ipv4_address: _builtins.str,
                 ipv4_prefix_length: _builtins.int):
        """
        :param _builtins.str ipv4_address: IPv4 address
        :param _builtins.int ipv4_prefix_length: IPv4 prefix Length
        """
        pulumi.set(__self__, "ipv4_address", ipv4_address)
        pulumi.set(__self__, "ipv4_prefix_length", ipv4_prefix_length)

    @_builtins.property
    @pulumi.getter(name="ipv4Address")
    def ipv4_address(self) -> _builtins.str:
        """
        IPv4 address
        """
        return pulumi.get(self, "ipv4_address")

    @_builtins.property
    @pulumi.getter(name="ipv4PrefixLength")
    def ipv4_prefix_length(self) -> _builtins.int:
        """
        IPv4 prefix Length
        """
        return pulumi.get(self, "ipv4_prefix_length")


@pulumi.output_type
class GetPolicyObjectDataIpv6PrefixListEntryResult(dict):
    def __init__(__self__, *,
                 ipv6_address: _builtins.str,
                 ipv6_prefix_length: _builtins.int):
        """
        :param _builtins.str ipv6_address: IPv6 address
        :param _builtins.int ipv6_prefix_length: IPv6 prefix
        """
        pulumi.set(__self__, "ipv6_address", ipv6_address)
        pulumi.set(__self__, "ipv6_prefix_length", ipv6_prefix_length)

    @_builtins.property
    @pulumi.getter(name="ipv6Address")
    def ipv6_address(self) -> _builtins.str:
        """
        IPv6 address
        """
        return pulumi.get(self, "ipv6_address")

    @_builtins.property
    @pulumi.getter(name="ipv6PrefixLength")
    def ipv6_prefix_length(self) -> _builtins.int:
        """
        IPv6 prefix
        """
        return pulumi.get(self, "ipv6_prefix_length")


@pulumi.output_type
class GetPolicyObjectExtendedCommunityListEntryResult(dict):
    def __init__(__self__, *,
                 extended_community: _builtins.str):
        """
        :param _builtins.str extended_community: can be soo 10.0.0.1:30 or rt 500:50 etc.
        """
        pulumi.set(__self__, "extended_community", extended_community)

    @_builtins.property
    @pulumi.getter(name="extendedCommunity")
    def extended_community(self) -> _builtins.str:
        """
        can be soo 10.0.0.1:30 or rt 500:50 etc.
        """
        return pulumi.get(self, "extended_community")


@pulumi.output_type
class GetPolicyObjectIpv4PrefixListEntryResult(dict):
    def __init__(__self__, *,
                 ge: _builtins.int,
                 ipv4_address: _builtins.str,
                 ipv4_prefix_length: _builtins.int,
                 le: _builtins.int):
        """
        :param _builtins.int ge: IPv4 prefix length with ge range operator
        :param _builtins.str ipv4_address: IPv4 address
        :param _builtins.int ipv4_prefix_length: IPv4 prefix length
        :param _builtins.int le: IPv4 prefix length with le range operator
        """
        pulumi.set(__self__, "ge", ge)
        pulumi.set(__self__, "ipv4_address", ipv4_address)
        pulumi.set(__self__, "ipv4_prefix_length", ipv4_prefix_length)
        pulumi.set(__self__, "le", le)

    @_builtins.property
    @pulumi.getter
    def ge(self) -> _builtins.int:
        """
        IPv4 prefix length with ge range operator
        """
        return pulumi.get(self, "ge")

    @_builtins.property
    @pulumi.getter(name="ipv4Address")
    def ipv4_address(self) -> _builtins.str:
        """
        IPv4 address
        """
        return pulumi.get(self, "ipv4_address")

    @_builtins.property
    @pulumi.getter(name="ipv4PrefixLength")
    def ipv4_prefix_length(self) -> _builtins.int:
        """
        IPv4 prefix length
        """
        return pulumi.get(self, "ipv4_prefix_length")

    @_builtins.property
    @pulumi.getter
    def le(self) -> _builtins.int:
        """
        IPv4 prefix length with le range operator
        """
        return pulumi.get(self, "le")


@pulumi.output_type
class GetPolicyObjectIpv6PrefixListEntryResult(dict):
    def __init__(__self__, *,
                 ge: _builtins.int,
                 ipv6_address: _builtins.str,
                 ipv6_prefix_length: _builtins.int,
                 le: _builtins.int):
        """
        :param _builtins.int ge: IPv6 prefix length with ge range operator
        :param _builtins.str ipv6_address: IPv6 address
        :param _builtins.int ipv6_prefix_length: IPv6 prefix length
        :param _builtins.int le: IPv6 prefix length with le range operator
        """
        pulumi.set(__self__, "ge", ge)
        pulumi.set(__self__, "ipv6_address", ipv6_address)
        pulumi.set(__self__, "ipv6_prefix_length", ipv6_prefix_length)
        pulumi.set(__self__, "le", le)

    @_builtins.property
    @pulumi.getter
    def ge(self) -> _builtins.int:
        """
        IPv6 prefix length with ge range operator
        """
        return pulumi.get(self, "ge")

    @_builtins.property
    @pulumi.getter(name="ipv6Address")
    def ipv6_address(self) -> _builtins.str:
        """
        IPv6 address
        """
        return pulumi.get(self, "ipv6_address")

    @_builtins.property
    @pulumi.getter(name="ipv6PrefixLength")
    def ipv6_prefix_length(self) -> _builtins.int:
        """
        IPv6 prefix length
        """
        return pulumi.get(self, "ipv6_prefix_length")

    @_builtins.property
    @pulumi.getter
    def le(self) -> _builtins.int:
        """
        IPv6 prefix length with le range operator
        """
        return pulumi.get(self, "le")


@pulumi.output_type
class GetPolicyObjectMirrorEntryResult(dict):
    def __init__(__self__, *,
                 remote_destination_ip: _builtins.str,
                 source_ip: _builtins.str):
        """
        :param _builtins.str remote_destination_ip: remote destination ip address
        :param _builtins.str source_ip: source ip address
        """
        pulumi.set(__self__, "remote_destination_ip", remote_destination_ip)
        pulumi.set(__self__, "source_ip", source_ip)

    @_builtins.property
    @pulumi.getter(name="remoteDestinationIp")
    def remote_destination_ip(self) -> _builtins.str:
        """
        remote destination ip address
        """
        return pulumi.get(self, "remote_destination_ip")

    @_builtins.property
    @pulumi.getter(name="sourceIp")
    def source_ip(self) -> _builtins.str:
        """
        source ip address
        """
        return pulumi.get(self, "source_ip")


@pulumi.output_type
class GetPolicyObjectPolicerEntryResult(dict):
    def __init__(__self__, *,
                 burst_bytes: _builtins.int,
                 exceed_action: _builtins.str,
                 rate_bps: _builtins.int):
        """
        :param _builtins.int burst_bytes: Burst (Bytes)
        :param _builtins.str exceed_action: Exceed options such as Drop or Remark
        :param _builtins.int rate_bps: Rate (bps)
        """
        pulumi.set(__self__, "burst_bytes", burst_bytes)
        pulumi.set(__self__, "exceed_action", exceed_action)
        pulumi.set(__self__, "rate_bps", rate_bps)

    @_builtins.property
    @pulumi.getter(name="burstBytes")
    def burst_bytes(self) -> _builtins.int:
        """
        Burst (Bytes)
        """
        return pulumi.get(self, "burst_bytes")

    @_builtins.property
    @pulumi.getter(name="exceedAction")
    def exceed_action(self) -> _builtins.str:
        """
        Exceed options such as Drop or Remark
        """
        return pulumi.get(self, "exceed_action")

    @_builtins.property
    @pulumi.getter(name="rateBps")
    def rate_bps(self) -> _builtins.int:
        """
        Rate (bps)
        """
        return pulumi.get(self, "rate_bps")


@pulumi.output_type
class GetPolicyObjectPreferredColorGroupEntryResult(dict):
    def __init__(__self__, *,
                 primary_color_preferences: Sequence[_builtins.str],
                 primary_path_preference: _builtins.str,
                 secondary_color_preferences: Sequence[_builtins.str],
                 secondary_path_preference: _builtins.str,
                 tertiary_color_preferences: Sequence[_builtins.str],
                 tertiary_path_preference: _builtins.str):
        pulumi.set(__self__, "primary_color_preferences", primary_color_preferences)
        pulumi.set(__self__, "primary_path_preference", primary_path_preference)
        pulumi.set(__self__, "secondary_color_preferences", secondary_color_preferences)
        pulumi.set(__self__, "secondary_path_preference", secondary_path_preference)
        pulumi.set(__self__, "tertiary_color_preferences", tertiary_color_preferences)
        pulumi.set(__self__, "tertiary_path_preference", tertiary_path_preference)

    @_builtins.property
    @pulumi.getter(name="primaryColorPreferences")
    def primary_color_preferences(self) -> Sequence[_builtins.str]:
        return pulumi.get(self, "primary_color_preferences")

    @_builtins.property
    @pulumi.getter(name="primaryPathPreference")
    def primary_path_preference(self) -> _builtins.str:
        return pulumi.get(self, "primary_path_preference")

    @_builtins.property
    @pulumi.getter(name="secondaryColorPreferences")
    def secondary_color_preferences(self) -> Sequence[_builtins.str]:
        return pulumi.get(self, "secondary_color_preferences")

    @_builtins.property
    @pulumi.getter(name="secondaryPathPreference")
    def secondary_path_preference(self) -> _builtins.str:
        return pulumi.get(self, "secondary_path_preference")

    @_builtins.property
    @pulumi.getter(name="tertiaryColorPreferences")
    def tertiary_color_preferences(self) -> Sequence[_builtins.str]:
        return pulumi.get(self, "tertiary_color_preferences")

    @_builtins.property
    @pulumi.getter(name="tertiaryPathPreference")
    def tertiary_path_preference(self) -> _builtins.str:
        return pulumi.get(self, "tertiary_path_preference")


@pulumi.output_type
class GetPolicyObjectSecurityDataIpv4PrefixListEntryResult(dict):
    def __init__(__self__, *,
                 ip_prefix: _builtins.str,
                 ip_prefix_variable: _builtins.str):
        """
        :param _builtins.str ip_prefix_variable: Variable name
        """
        pulumi.set(__self__, "ip_prefix", ip_prefix)
        pulumi.set(__self__, "ip_prefix_variable", ip_prefix_variable)

    @_builtins.property
    @pulumi.getter(name="ipPrefix")
    def ip_prefix(self) -> _builtins.str:
        return pulumi.get(self, "ip_prefix")

    @_builtins.property
    @pulumi.getter(name="ipPrefixVariable")
    def ip_prefix_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "ip_prefix_variable")


@pulumi.output_type
class GetPolicyObjectSecurityFqdnListEntryResult(dict):
    def __init__(__self__, *,
                 pattern: _builtins.str):
        pulumi.set(__self__, "pattern", pattern)

    @_builtins.property
    @pulumi.getter
    def pattern(self) -> _builtins.str:
        return pulumi.get(self, "pattern")


@pulumi.output_type
class GetPolicyObjectSecurityGeolocationListEntryResult(dict):
    def __init__(__self__, *,
                 continent: _builtins.str,
                 country: _builtins.str):
        """
        :param _builtins.str continent: continent name
        :param _builtins.str country: country names
        """
        pulumi.set(__self__, "continent", continent)
        pulumi.set(__self__, "country", country)

    @_builtins.property
    @pulumi.getter
    def continent(self) -> _builtins.str:
        """
        continent name
        """
        return pulumi.get(self, "continent")

    @_builtins.property
    @pulumi.getter
    def country(self) -> _builtins.str:
        """
        country names
        """
        return pulumi.get(self, "country")


@pulumi.output_type
class GetPolicyObjectSecurityIdentityListEntryResult(dict):
    def __init__(__self__, *,
                 user: _builtins.str,
                 user_group: _builtins.str):
        pulumi.set(__self__, "user", user)
        pulumi.set(__self__, "user_group", user_group)

    @_builtins.property
    @pulumi.getter
    def user(self) -> _builtins.str:
        return pulumi.get(self, "user")

    @_builtins.property
    @pulumi.getter(name="userGroup")
    def user_group(self) -> _builtins.str:
        return pulumi.get(self, "user_group")


@pulumi.output_type
class GetPolicyObjectSecurityIpsSignatureEntryResult(dict):
    def __init__(__self__, *,
                 generator_id: _builtins.str,
                 signature_id: _builtins.str):
        pulumi.set(__self__, "generator_id", generator_id)
        pulumi.set(__self__, "signature_id", signature_id)

    @_builtins.property
    @pulumi.getter(name="generatorId")
    def generator_id(self) -> _builtins.str:
        return pulumi.get(self, "generator_id")

    @_builtins.property
    @pulumi.getter(name="signatureId")
    def signature_id(self) -> _builtins.str:
        return pulumi.get(self, "signature_id")


@pulumi.output_type
class GetPolicyObjectSecurityLocalApplicationListEntryResult(dict):
    def __init__(__self__, *,
                 app: _builtins.str,
                 app_family: _builtins.str):
        pulumi.set(__self__, "app", app)
        pulumi.set(__self__, "app_family", app_family)

    @_builtins.property
    @pulumi.getter
    def app(self) -> _builtins.str:
        return pulumi.get(self, "app")

    @_builtins.property
    @pulumi.getter(name="appFamily")
    def app_family(self) -> _builtins.str:
        return pulumi.get(self, "app_family")


@pulumi.output_type
class GetPolicyObjectSecurityLocalDomainListEntryResult(dict):
    def __init__(__self__, *,
                 local_domain: _builtins.str):
        pulumi.set(__self__, "local_domain", local_domain)

    @_builtins.property
    @pulumi.getter(name="localDomain")
    def local_domain(self) -> _builtins.str:
        return pulumi.get(self, "local_domain")


@pulumi.output_type
class GetPolicyObjectSecurityPortListEntryResult(dict):
    def __init__(__self__, *,
                 port: _builtins.str):
        """
        :param _builtins.str port: can be single port or port range
        """
        pulumi.set(__self__, "port", port)

    @_builtins.property
    @pulumi.getter
    def port(self) -> _builtins.str:
        """
        can be single port or port range
        """
        return pulumi.get(self, "port")


@pulumi.output_type
class GetPolicyObjectSecurityScalableGroupTagListEntryResult(dict):
    def __init__(__self__, *,
                 sgt_name: _builtins.str,
                 tag: _builtins.str):
        pulumi.set(__self__, "sgt_name", sgt_name)
        pulumi.set(__self__, "tag", tag)

    @_builtins.property
    @pulumi.getter(name="sgtName")
    def sgt_name(self) -> _builtins.str:
        return pulumi.get(self, "sgt_name")

    @_builtins.property
    @pulumi.getter
    def tag(self) -> _builtins.str:
        return pulumi.get(self, "tag")


@pulumi.output_type
class GetPolicyObjectSecurityUrlAllowListEntryResult(dict):
    def __init__(__self__, *,
                 pattern: _builtins.str):
        """
        :param _builtins.str pattern: valid url pattern
        """
        pulumi.set(__self__, "pattern", pattern)

    @_builtins.property
    @pulumi.getter
    def pattern(self) -> _builtins.str:
        """
        valid url pattern
        """
        return pulumi.get(self, "pattern")


@pulumi.output_type
class GetPolicyObjectSecurityUrlBlockListEntryResult(dict):
    def __init__(__self__, *,
                 pattern: _builtins.str):
        """
        :param _builtins.str pattern: valid url pattern
        """
        pulumi.set(__self__, "pattern", pattern)

    @_builtins.property
    @pulumi.getter
    def pattern(self) -> _builtins.str:
        """
        valid url pattern
        """
        return pulumi.get(self, "pattern")


@pulumi.output_type
class GetPolicyObjectSlaClassListEntryResult(dict):
    def __init__(__self__, *,
                 app_probe_class_list_id: _builtins.str,
                 fallback_best_tunnel_criteria: _builtins.str,
                 fallback_best_tunnel_jitter_variance: _builtins.int,
                 fallback_best_tunnel_latency_variance: _builtins.int,
                 fallback_best_tunnel_loss_variance: _builtins.int,
                 jitter: _builtins.int,
                 latency: _builtins.int,
                 loss: _builtins.int):
        pulumi.set(__self__, "app_probe_class_list_id", app_probe_class_list_id)
        pulumi.set(__self__, "fallback_best_tunnel_criteria", fallback_best_tunnel_criteria)
        pulumi.set(__self__, "fallback_best_tunnel_jitter_variance", fallback_best_tunnel_jitter_variance)
        pulumi.set(__self__, "fallback_best_tunnel_latency_variance", fallback_best_tunnel_latency_variance)
        pulumi.set(__self__, "fallback_best_tunnel_loss_variance", fallback_best_tunnel_loss_variance)
        pulumi.set(__self__, "jitter", jitter)
        pulumi.set(__self__, "latency", latency)
        pulumi.set(__self__, "loss", loss)

    @_builtins.property
    @pulumi.getter(name="appProbeClassListId")
    def app_probe_class_list_id(self) -> _builtins.str:
        return pulumi.get(self, "app_probe_class_list_id")

    @_builtins.property
    @pulumi.getter(name="fallbackBestTunnelCriteria")
    def fallback_best_tunnel_criteria(self) -> _builtins.str:
        return pulumi.get(self, "fallback_best_tunnel_criteria")

    @_builtins.property
    @pulumi.getter(name="fallbackBestTunnelJitterVariance")
    def fallback_best_tunnel_jitter_variance(self) -> _builtins.int:
        return pulumi.get(self, "fallback_best_tunnel_jitter_variance")

    @_builtins.property
    @pulumi.getter(name="fallbackBestTunnelLatencyVariance")
    def fallback_best_tunnel_latency_variance(self) -> _builtins.int:
        return pulumi.get(self, "fallback_best_tunnel_latency_variance")

    @_builtins.property
    @pulumi.getter(name="fallbackBestTunnelLossVariance")
    def fallback_best_tunnel_loss_variance(self) -> _builtins.int:
        return pulumi.get(self, "fallback_best_tunnel_loss_variance")

    @_builtins.property
    @pulumi.getter
    def jitter(self) -> _builtins.int:
        return pulumi.get(self, "jitter")

    @_builtins.property
    @pulumi.getter
    def latency(self) -> _builtins.int:
        return pulumi.get(self, "latency")

    @_builtins.property
    @pulumi.getter
    def loss(self) -> _builtins.int:
        return pulumi.get(self, "loss")


@pulumi.output_type
class GetPolicyObjectStandardCommunityListEntryResult(dict):
    def __init__(__self__, *,
                 standard_community: _builtins.str):
        """
        :param _builtins.str standard_community: Standard Community
        """
        pulumi.set(__self__, "standard_community", standard_community)

    @_builtins.property
    @pulumi.getter(name="standardCommunity")
    def standard_community(self) -> _builtins.str:
        """
        Standard Community
        """
        return pulumi.get(self, "standard_community")


@pulumi.output_type
class GetPolicyObjectTlocListEntryResult(dict):
    def __init__(__self__, *,
                 color: _builtins.str,
                 encapsulation: _builtins.str,
                 preference: _builtins.str,
                 tloc_ip: _builtins.str):
        """
        :param _builtins.str color: color
        :param _builtins.str encapsulation: encapsulation
        :param _builtins.str preference: Preference
        :param _builtins.str tloc_ip: tloc
        """
        pulumi.set(__self__, "color", color)
        pulumi.set(__self__, "encapsulation", encapsulation)
        pulumi.set(__self__, "preference", preference)
        pulumi.set(__self__, "tloc_ip", tloc_ip)

    @_builtins.property
    @pulumi.getter
    def color(self) -> _builtins.str:
        """
        color
        """
        return pulumi.get(self, "color")

    @_builtins.property
    @pulumi.getter
    def encapsulation(self) -> _builtins.str:
        """
        encapsulation
        """
        return pulumi.get(self, "encapsulation")

    @_builtins.property
    @pulumi.getter
    def preference(self) -> _builtins.str:
        """
        Preference
        """
        return pulumi.get(self, "preference")

    @_builtins.property
    @pulumi.getter(name="tlocIp")
    def tloc_ip(self) -> _builtins.str:
        """
        tloc
        """
        return pulumi.get(self, "tloc_ip")


@pulumi.output_type
class GetPolicyObjectVpnGroupEntryResult(dict):
    def __init__(__self__, *,
                 vpn: _builtins.int):
        """
        :param _builtins.int vpn: can be single vpn id or vpn id range
        """
        pulumi.set(__self__, "vpn", vpn)

    @_builtins.property
    @pulumi.getter
    def vpn(self) -> _builtins.int:
        """
        can be single vpn id or vpn id range
        """
        return pulumi.get(self, "vpn")


@pulumi.output_type
class GetPortListPolicyObjectEntryResult(dict):
    def __init__(__self__, *,
                 port: _builtins.str):
        """
        :param _builtins.str port: Port number
        """
        pulumi.set(__self__, "port", port)

    @_builtins.property
    @pulumi.getter
    def port(self) -> _builtins.str:
        """
        Port number
        """
        return pulumi.get(self, "port")


@pulumi.output_type
class GetProtocolListPolicyObjectEntryResult(dict):
    def __init__(__self__, *,
                 protocol: _builtins.str):
        """
        :param _builtins.str protocol: Protocol name
        """
        pulumi.set(__self__, "protocol", protocol)

    @_builtins.property
    @pulumi.getter
    def protocol(self) -> _builtins.str:
        """
        Protocol name
        """
        return pulumi.get(self, "protocol")


@pulumi.output_type
class GetQosMapPolicyDefinitionQosSchedulerResult(dict):
    def __init__(__self__, *,
                 bandwidth_percent: _builtins.int,
                 buffer_percent: _builtins.int,
                 burst: _builtins.int,
                 class_map_id: _builtins.str,
                 class_map_version: _builtins.int,
                 drop_type: _builtins.str,
                 queue: _builtins.int,
                 scheduling_type: _builtins.str):
        """
        :param _builtins.int bandwidth_percent: Bandwidth percent
        :param _builtins.int buffer_percent: Buffer percent
        :param _builtins.int burst: Burst size
        :param _builtins.str class_map_id: Class map ID
        :param _builtins.int class_map_version: Class map version
        :param _builtins.str drop_type: Drop type
        :param _builtins.int queue: Queue number
        :param _builtins.str scheduling_type: Scheduling type
        """
        pulumi.set(__self__, "bandwidth_percent", bandwidth_percent)
        pulumi.set(__self__, "buffer_percent", buffer_percent)
        pulumi.set(__self__, "burst", burst)
        pulumi.set(__self__, "class_map_id", class_map_id)
        pulumi.set(__self__, "class_map_version", class_map_version)
        pulumi.set(__self__, "drop_type", drop_type)
        pulumi.set(__self__, "queue", queue)
        pulumi.set(__self__, "scheduling_type", scheduling_type)

    @_builtins.property
    @pulumi.getter(name="bandwidthPercent")
    def bandwidth_percent(self) -> _builtins.int:
        """
        Bandwidth percent
        """
        return pulumi.get(self, "bandwidth_percent")

    @_builtins.property
    @pulumi.getter(name="bufferPercent")
    def buffer_percent(self) -> _builtins.int:
        """
        Buffer percent
        """
        return pulumi.get(self, "buffer_percent")

    @_builtins.property
    @pulumi.getter
    def burst(self) -> _builtins.int:
        """
        Burst size
        """
        return pulumi.get(self, "burst")

    @_builtins.property
    @pulumi.getter(name="classMapId")
    def class_map_id(self) -> _builtins.str:
        """
        Class map ID
        """
        return pulumi.get(self, "class_map_id")

    @_builtins.property
    @pulumi.getter(name="classMapVersion")
    def class_map_version(self) -> _builtins.int:
        """
        Class map version
        """
        return pulumi.get(self, "class_map_version")

    @_builtins.property
    @pulumi.getter(name="dropType")
    def drop_type(self) -> _builtins.str:
        """
        Drop type
        """
        return pulumi.get(self, "drop_type")

    @_builtins.property
    @pulumi.getter
    def queue(self) -> _builtins.int:
        """
        Queue number
        """
        return pulumi.get(self, "queue")

    @_builtins.property
    @pulumi.getter(name="schedulingType")
    def scheduling_type(self) -> _builtins.str:
        """
        Scheduling type
        """
        return pulumi.get(self, "scheduling_type")


@pulumi.output_type
class GetRegionListPolicyObjectEntryResult(dict):
    def __init__(__self__, *,
                 region_id: _builtins.str):
        """
        :param _builtins.str region_id: Region ID or range of Region IDs e.g., `2` or `3-6`
        """
        pulumi.set(__self__, "region_id", region_id)

    @_builtins.property
    @pulumi.getter(name="regionId")
    def region_id(self) -> _builtins.str:
        """
        Region ID or range of Region IDs e.g., `2` or `3-6`
        """
        return pulumi.get(self, "region_id")


@pulumi.output_type
class GetRewriteRulePolicyDefinitionRuleResult(dict):
    def __init__(__self__, *,
                 class_map_id: _builtins.str,
                 class_map_version: _builtins.int,
                 dscp: _builtins.int,
                 layer2_cos: _builtins.int,
                 priority: _builtins.str):
        """
        :param _builtins.str class_map_id: Class map ID
        :param _builtins.int class_map_version: Class map version
        :param _builtins.int dscp: DSCP
        :param _builtins.int layer2_cos: Layer2 CoS
        :param _builtins.str priority: Priority
        """
        pulumi.set(__self__, "class_map_id", class_map_id)
        pulumi.set(__self__, "class_map_version", class_map_version)
        pulumi.set(__self__, "dscp", dscp)
        pulumi.set(__self__, "layer2_cos", layer2_cos)
        pulumi.set(__self__, "priority", priority)

    @_builtins.property
    @pulumi.getter(name="classMapId")
    def class_map_id(self) -> _builtins.str:
        """
        Class map ID
        """
        return pulumi.get(self, "class_map_id")

    @_builtins.property
    @pulumi.getter(name="classMapVersion")
    def class_map_version(self) -> _builtins.int:
        """
        Class map version
        """
        return pulumi.get(self, "class_map_version")

    @_builtins.property
    @pulumi.getter
    def dscp(self) -> _builtins.int:
        """
        DSCP
        """
        return pulumi.get(self, "dscp")

    @_builtins.property
    @pulumi.getter(name="layer2Cos")
    def layer2_cos(self) -> _builtins.int:
        """
        Layer2 CoS
        """
        return pulumi.get(self, "layer2_cos")

    @_builtins.property
    @pulumi.getter
    def priority(self) -> _builtins.str:
        """
        Priority
        """
        return pulumi.get(self, "priority")


@pulumi.output_type
class GetRoutePolicyDefinitionSequenceResult(dict):
    def __init__(__self__, *,
                 action_entries: Sequence['outputs.GetRoutePolicyDefinitionSequenceActionEntryResult'],
                 base_action: _builtins.str,
                 id: _builtins.int,
                 ip_type: _builtins.str,
                 match_entries: Sequence['outputs.GetRoutePolicyDefinitionSequenceMatchEntryResult'],
                 name: _builtins.str):
        """
        :param Sequence['GetRoutePolicyDefinitionSequenceActionEntryArgs'] action_entries: List of action entries
        :param _builtins.str base_action: Base action, either `accept` or `reject`
        :param _builtins.int id: Sequence ID
        :param _builtins.str ip_type: IP version, either `ipv4` or `ipv6`
        :param Sequence['GetRoutePolicyDefinitionSequenceMatchEntryArgs'] match_entries: List of match entries
        :param _builtins.str name: Sequence name
        """
        pulumi.set(__self__, "action_entries", action_entries)
        pulumi.set(__self__, "base_action", base_action)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "ip_type", ip_type)
        pulumi.set(__self__, "match_entries", match_entries)
        pulumi.set(__self__, "name", name)

    @_builtins.property
    @pulumi.getter(name="actionEntries")
    def action_entries(self) -> Sequence['outputs.GetRoutePolicyDefinitionSequenceActionEntryResult']:
        """
        List of action entries
        """
        return pulumi.get(self, "action_entries")

    @_builtins.property
    @pulumi.getter(name="baseAction")
    def base_action(self) -> _builtins.str:
        """
        Base action, either `accept` or `reject`
        """
        return pulumi.get(self, "base_action")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.int:
        """
        Sequence ID
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter(name="ipType")
    def ip_type(self) -> _builtins.str:
        """
        IP version, either `ipv4` or `ipv6`
        """
        return pulumi.get(self, "ip_type")

    @_builtins.property
    @pulumi.getter(name="matchEntries")
    def match_entries(self) -> Sequence['outputs.GetRoutePolicyDefinitionSequenceMatchEntryResult']:
        """
        List of match entries
        """
        return pulumi.get(self, "match_entries")

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        """
        Sequence name
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class GetRoutePolicyDefinitionSequenceActionEntryResult(dict):
    def __init__(__self__, *,
                 aggregator: _builtins.int,
                 aggregator_ip_address: _builtins.str,
                 as_path_exclude: _builtins.str,
                 as_path_prepend: _builtins.str,
                 atomic_aggregate: _builtins.bool,
                 community: _builtins.str,
                 community_additive: _builtins.bool,
                 community_variable: _builtins.str,
                 local_preference: _builtins.int,
                 metric: _builtins.int,
                 metric_type: _builtins.str,
                 next_hop: _builtins.str,
                 omp_tag: _builtins.int,
                 origin: _builtins.str,
                 originator: _builtins.str,
                 ospf_tag: _builtins.int,
                 type: _builtins.str,
                 weight: _builtins.int):
        """
        :param _builtins.int aggregator: Aggregator
        :param _builtins.str aggregator_ip_address: IP address
        :param _builtins.str as_path_exclude: Space separated list of ASN to exclude
        :param _builtins.str as_path_prepend: Space separated list of ASN to prepend
        :param _builtins.bool atomic_aggregate: Atomic aggregate
        :param _builtins.str community: Community value, e.g. `1000:10000` or `internet` or `local-AS`
        :param _builtins.bool community_additive: Community additive
        :param _builtins.str community_variable: Community variable
        :param _builtins.int local_preference: Local preference
        :param _builtins.int metric: Metric
        :param _builtins.str metric_type: Metric type
        :param _builtins.str next_hop: Next hop IP
        :param _builtins.int omp_tag: OMP tag
        :param _builtins.str origin: Origin
        :param _builtins.str originator: Originator IP
        :param _builtins.int ospf_tag: OSPF tag
        :param _builtins.str type: Type of action entry
        :param _builtins.int weight: Weight
        """
        pulumi.set(__self__, "aggregator", aggregator)
        pulumi.set(__self__, "aggregator_ip_address", aggregator_ip_address)
        pulumi.set(__self__, "as_path_exclude", as_path_exclude)
        pulumi.set(__self__, "as_path_prepend", as_path_prepend)
        pulumi.set(__self__, "atomic_aggregate", atomic_aggregate)
        pulumi.set(__self__, "community", community)
        pulumi.set(__self__, "community_additive", community_additive)
        pulumi.set(__self__, "community_variable", community_variable)
        pulumi.set(__self__, "local_preference", local_preference)
        pulumi.set(__self__, "metric", metric)
        pulumi.set(__self__, "metric_type", metric_type)
        pulumi.set(__self__, "next_hop", next_hop)
        pulumi.set(__self__, "omp_tag", omp_tag)
        pulumi.set(__self__, "origin", origin)
        pulumi.set(__self__, "originator", originator)
        pulumi.set(__self__, "ospf_tag", ospf_tag)
        pulumi.set(__self__, "type", type)
        pulumi.set(__self__, "weight", weight)

    @_builtins.property
    @pulumi.getter
    def aggregator(self) -> _builtins.int:
        """
        Aggregator
        """
        return pulumi.get(self, "aggregator")

    @_builtins.property
    @pulumi.getter(name="aggregatorIpAddress")
    def aggregator_ip_address(self) -> _builtins.str:
        """
        IP address
        """
        return pulumi.get(self, "aggregator_ip_address")

    @_builtins.property
    @pulumi.getter(name="asPathExclude")
    def as_path_exclude(self) -> _builtins.str:
        """
        Space separated list of ASN to exclude
        """
        return pulumi.get(self, "as_path_exclude")

    @_builtins.property
    @pulumi.getter(name="asPathPrepend")
    def as_path_prepend(self) -> _builtins.str:
        """
        Space separated list of ASN to prepend
        """
        return pulumi.get(self, "as_path_prepend")

    @_builtins.property
    @pulumi.getter(name="atomicAggregate")
    def atomic_aggregate(self) -> _builtins.bool:
        """
        Atomic aggregate
        """
        return pulumi.get(self, "atomic_aggregate")

    @_builtins.property
    @pulumi.getter
    def community(self) -> _builtins.str:
        """
        Community value, e.g. `1000:10000` or `internet` or `local-AS`
        """
        return pulumi.get(self, "community")

    @_builtins.property
    @pulumi.getter(name="communityAdditive")
    def community_additive(self) -> _builtins.bool:
        """
        Community additive
        """
        return pulumi.get(self, "community_additive")

    @_builtins.property
    @pulumi.getter(name="communityVariable")
    def community_variable(self) -> _builtins.str:
        """
        Community variable
        """
        return pulumi.get(self, "community_variable")

    @_builtins.property
    @pulumi.getter(name="localPreference")
    def local_preference(self) -> _builtins.int:
        """
        Local preference
        """
        return pulumi.get(self, "local_preference")

    @_builtins.property
    @pulumi.getter
    def metric(self) -> _builtins.int:
        """
        Metric
        """
        return pulumi.get(self, "metric")

    @_builtins.property
    @pulumi.getter(name="metricType")
    def metric_type(self) -> _builtins.str:
        """
        Metric type
        """
        return pulumi.get(self, "metric_type")

    @_builtins.property
    @pulumi.getter(name="nextHop")
    def next_hop(self) -> _builtins.str:
        """
        Next hop IP
        """
        return pulumi.get(self, "next_hop")

    @_builtins.property
    @pulumi.getter(name="ompTag")
    def omp_tag(self) -> _builtins.int:
        """
        OMP tag
        """
        return pulumi.get(self, "omp_tag")

    @_builtins.property
    @pulumi.getter
    def origin(self) -> _builtins.str:
        """
        Origin
        """
        return pulumi.get(self, "origin")

    @_builtins.property
    @pulumi.getter
    def originator(self) -> _builtins.str:
        """
        Originator IP
        """
        return pulumi.get(self, "originator")

    @_builtins.property
    @pulumi.getter(name="ospfTag")
    def ospf_tag(self) -> _builtins.int:
        """
        OSPF tag
        """
        return pulumi.get(self, "ospf_tag")

    @_builtins.property
    @pulumi.getter
    def type(self) -> _builtins.str:
        """
        Type of action entry
        """
        return pulumi.get(self, "type")

    @_builtins.property
    @pulumi.getter
    def weight(self) -> _builtins.int:
        """
        Weight
        """
        return pulumi.get(self, "weight")


@pulumi.output_type
class GetRoutePolicyDefinitionSequenceMatchEntryResult(dict):
    def __init__(__self__, *,
                 as_path_list_id: _builtins.str,
                 as_path_list_version: _builtins.int,
                 community_list_id: _builtins.str,
                 community_list_ids: Sequence[_builtins.str],
                 community_list_match_flag: _builtins.str,
                 community_list_version: _builtins.int,
                 community_list_versions: Sequence[_builtins.str],
                 expanded_community_list_id: _builtins.str,
                 expanded_community_list_variable: _builtins.str,
                 expanded_community_list_version: _builtins.int,
                 extended_community_list_id: _builtins.str,
                 extended_community_list_version: _builtins.int,
                 local_preference: _builtins.int,
                 metric: _builtins.int,
                 next_hop_prefix_list_id: _builtins.str,
                 next_hop_prefix_list_version: _builtins.int,
                 omp_tag: _builtins.int,
                 origin: _builtins.str,
                 ospf_tag: _builtins.int,
                 peer: _builtins.str,
                 prefix_list_id: _builtins.str,
                 prefix_list_version: _builtins.int,
                 type: _builtins.str):
        """
        :param _builtins.str as_path_list_id: AS path list ID
        :param _builtins.int as_path_list_version: AS path list version
        :param _builtins.str community_list_id: Community list ID
        :param Sequence[_builtins.str] community_list_ids: Community list IDs
        :param _builtins.str community_list_match_flag: Community list match flag
        :param _builtins.int community_list_version: Community list version
        :param Sequence[_builtins.str] community_list_versions: Community list versions
        :param _builtins.str expanded_community_list_id: Expanded community list ID
        :param _builtins.str expanded_community_list_variable: Expanded community list variable
        :param _builtins.int expanded_community_list_version: Expanded community list version
        :param _builtins.str extended_community_list_id: Extended community list ID
        :param _builtins.int extended_community_list_version: Extended community list version
        :param _builtins.int local_preference: Local preference
        :param _builtins.int metric: Metric
        :param _builtins.str next_hop_prefix_list_id: Next hop prefix list ID
        :param _builtins.int next_hop_prefix_list_version: Next hop prefix list version
        :param _builtins.int omp_tag: OMP tag
        :param _builtins.str origin: Origin
        :param _builtins.int ospf_tag: OSPF tag
        :param _builtins.str peer: Peer IP
        :param _builtins.str prefix_list_id: Prefix list ID
        :param _builtins.int prefix_list_version: Prefix list version
        :param _builtins.str type: Type of match entry
        """
        pulumi.set(__self__, "as_path_list_id", as_path_list_id)
        pulumi.set(__self__, "as_path_list_version", as_path_list_version)
        pulumi.set(__self__, "community_list_id", community_list_id)
        pulumi.set(__self__, "community_list_ids", community_list_ids)
        pulumi.set(__self__, "community_list_match_flag", community_list_match_flag)
        pulumi.set(__self__, "community_list_version", community_list_version)
        pulumi.set(__self__, "community_list_versions", community_list_versions)
        pulumi.set(__self__, "expanded_community_list_id", expanded_community_list_id)
        pulumi.set(__self__, "expanded_community_list_variable", expanded_community_list_variable)
        pulumi.set(__self__, "expanded_community_list_version", expanded_community_list_version)
        pulumi.set(__self__, "extended_community_list_id", extended_community_list_id)
        pulumi.set(__self__, "extended_community_list_version", extended_community_list_version)
        pulumi.set(__self__, "local_preference", local_preference)
        pulumi.set(__self__, "metric", metric)
        pulumi.set(__self__, "next_hop_prefix_list_id", next_hop_prefix_list_id)
        pulumi.set(__self__, "next_hop_prefix_list_version", next_hop_prefix_list_version)
        pulumi.set(__self__, "omp_tag", omp_tag)
        pulumi.set(__self__, "origin", origin)
        pulumi.set(__self__, "ospf_tag", ospf_tag)
        pulumi.set(__self__, "peer", peer)
        pulumi.set(__self__, "prefix_list_id", prefix_list_id)
        pulumi.set(__self__, "prefix_list_version", prefix_list_version)
        pulumi.set(__self__, "type", type)

    @_builtins.property
    @pulumi.getter(name="asPathListId")
    def as_path_list_id(self) -> _builtins.str:
        """
        AS path list ID
        """
        return pulumi.get(self, "as_path_list_id")

    @_builtins.property
    @pulumi.getter(name="asPathListVersion")
    def as_path_list_version(self) -> _builtins.int:
        """
        AS path list version
        """
        return pulumi.get(self, "as_path_list_version")

    @_builtins.property
    @pulumi.getter(name="communityListId")
    def community_list_id(self) -> _builtins.str:
        """
        Community list ID
        """
        return pulumi.get(self, "community_list_id")

    @_builtins.property
    @pulumi.getter(name="communityListIds")
    def community_list_ids(self) -> Sequence[_builtins.str]:
        """
        Community list IDs
        """
        return pulumi.get(self, "community_list_ids")

    @_builtins.property
    @pulumi.getter(name="communityListMatchFlag")
    def community_list_match_flag(self) -> _builtins.str:
        """
        Community list match flag
        """
        return pulumi.get(self, "community_list_match_flag")

    @_builtins.property
    @pulumi.getter(name="communityListVersion")
    def community_list_version(self) -> _builtins.int:
        """
        Community list version
        """
        return pulumi.get(self, "community_list_version")

    @_builtins.property
    @pulumi.getter(name="communityListVersions")
    def community_list_versions(self) -> Sequence[_builtins.str]:
        """
        Community list versions
        """
        return pulumi.get(self, "community_list_versions")

    @_builtins.property
    @pulumi.getter(name="expandedCommunityListId")
    def expanded_community_list_id(self) -> _builtins.str:
        """
        Expanded community list ID
        """
        return pulumi.get(self, "expanded_community_list_id")

    @_builtins.property
    @pulumi.getter(name="expandedCommunityListVariable")
    def expanded_community_list_variable(self) -> _builtins.str:
        """
        Expanded community list variable
        """
        return pulumi.get(self, "expanded_community_list_variable")

    @_builtins.property
    @pulumi.getter(name="expandedCommunityListVersion")
    def expanded_community_list_version(self) -> _builtins.int:
        """
        Expanded community list version
        """
        return pulumi.get(self, "expanded_community_list_version")

    @_builtins.property
    @pulumi.getter(name="extendedCommunityListId")
    def extended_community_list_id(self) -> _builtins.str:
        """
        Extended community list ID
        """
        return pulumi.get(self, "extended_community_list_id")

    @_builtins.property
    @pulumi.getter(name="extendedCommunityListVersion")
    def extended_community_list_version(self) -> _builtins.int:
        """
        Extended community list version
        """
        return pulumi.get(self, "extended_community_list_version")

    @_builtins.property
    @pulumi.getter(name="localPreference")
    def local_preference(self) -> _builtins.int:
        """
        Local preference
        """
        return pulumi.get(self, "local_preference")

    @_builtins.property
    @pulumi.getter
    def metric(self) -> _builtins.int:
        """
        Metric
        """
        return pulumi.get(self, "metric")

    @_builtins.property
    @pulumi.getter(name="nextHopPrefixListId")
    def next_hop_prefix_list_id(self) -> _builtins.str:
        """
        Next hop prefix list ID
        """
        return pulumi.get(self, "next_hop_prefix_list_id")

    @_builtins.property
    @pulumi.getter(name="nextHopPrefixListVersion")
    def next_hop_prefix_list_version(self) -> _builtins.int:
        """
        Next hop prefix list version
        """
        return pulumi.get(self, "next_hop_prefix_list_version")

    @_builtins.property
    @pulumi.getter(name="ompTag")
    def omp_tag(self) -> _builtins.int:
        """
        OMP tag
        """
        return pulumi.get(self, "omp_tag")

    @_builtins.property
    @pulumi.getter
    def origin(self) -> _builtins.str:
        """
        Origin
        """
        return pulumi.get(self, "origin")

    @_builtins.property
    @pulumi.getter(name="ospfTag")
    def ospf_tag(self) -> _builtins.int:
        """
        OSPF tag
        """
        return pulumi.get(self, "ospf_tag")

    @_builtins.property
    @pulumi.getter
    def peer(self) -> _builtins.str:
        """
        Peer IP
        """
        return pulumi.get(self, "peer")

    @_builtins.property
    @pulumi.getter(name="prefixListId")
    def prefix_list_id(self) -> _builtins.str:
        """
        Prefix list ID
        """
        return pulumi.get(self, "prefix_list_id")

    @_builtins.property
    @pulumi.getter(name="prefixListVersion")
    def prefix_list_version(self) -> _builtins.int:
        """
        Prefix list version
        """
        return pulumi.get(self, "prefix_list_version")

    @_builtins.property
    @pulumi.getter
    def type(self) -> _builtins.str:
        """
        Type of match entry
        """
        return pulumi.get(self, "type")


@pulumi.output_type
class GetRuleSetPolicyDefinitionRuleResult(dict):
    def __init__(__self__, *,
                 destination_data_fqdn_prefix_list_id: _builtins.str,
                 destination_data_fqdn_prefix_list_version: _builtins.int,
                 destination_data_ipv4_prefix_list_id: _builtins.str,
                 destination_data_ipv4_prefix_list_version: _builtins.int,
                 destination_fqdn: _builtins.str,
                 destination_geo_location: _builtins.str,
                 destination_geo_location_list_id: _builtins.str,
                 destination_geo_location_list_version: _builtins.int,
                 destination_ipv4_prefix: _builtins.str,
                 destination_ipv4_prefix_variable: _builtins.str,
                 destination_object_group_id: _builtins.str,
                 destination_object_group_version: _builtins.int,
                 destination_port: _builtins.str,
                 destination_port_list_id: _builtins.str,
                 destination_port_list_version: _builtins.int,
                 name: _builtins.str,
                 order: _builtins.int,
                 protocol: _builtins.str,
                 protocol_list_id: _builtins.str,
                 protocol_list_version: _builtins.int,
                 protocol_number: _builtins.int,
                 source_data_fqdn_prefix_list_id: _builtins.str,
                 source_data_fqdn_prefix_list_version: _builtins.int,
                 source_data_ipv4_prefix_list_id: _builtins.str,
                 source_data_ipv4_prefix_list_version: _builtins.int,
                 source_fqdn: _builtins.str,
                 source_geo_location: _builtins.str,
                 source_geo_location_list_id: _builtins.str,
                 source_geo_location_list_version: _builtins.int,
                 source_ipv4_prefix: _builtins.str,
                 source_ipv4_prefix_variable: _builtins.str,
                 source_object_group_id: _builtins.str,
                 source_object_group_version: _builtins.int,
                 source_port: _builtins.str,
                 source_port_list_id: _builtins.str,
                 source_port_list_version: _builtins.int):
        """
        :param _builtins.str destination_data_fqdn_prefix_list_id: Destination data FQDN prefix list ID
        :param _builtins.int destination_data_fqdn_prefix_list_version: Destination data FQDN prefix list version
        :param _builtins.str destination_data_ipv4_prefix_list_id: Destination data IPv4 prefix list ID
        :param _builtins.int destination_data_ipv4_prefix_list_version: Destination data IPv4 prefix list version
        :param _builtins.str destination_fqdn: Destination fully qualified domain name
        :param _builtins.str destination_geo_location: Destination geo location
        :param _builtins.str destination_geo_location_list_id: Destination geo location list ID
        :param _builtins.int destination_geo_location_list_version: Destination geo location list version
        :param _builtins.str destination_ipv4_prefix: Destination IPv4 prefix
        :param _builtins.str destination_ipv4_prefix_variable: Destination IPv4 prefix variable name
        :param _builtins.str destination_object_group_id: Destination object group ID
        :param _builtins.int destination_object_group_version: Destination object group version
        :param _builtins.str destination_port: Destination port or range of ports
        :param _builtins.str destination_port_list_id: Destination port list ID
        :param _builtins.int destination_port_list_version: Destination port list version
        :param _builtins.str name: The name of the rule
        :param _builtins.int order: The order of the rule
        :param _builtins.str protocol: Protocol name
        :param _builtins.str protocol_list_id: Protocol list ID
        :param _builtins.int protocol_list_version: Protocol list version
        :param _builtins.int protocol_number: Protocol number
        :param _builtins.str source_data_fqdn_prefix_list_id: Source data FQDN prefix list ID
        :param _builtins.int source_data_fqdn_prefix_list_version: Source data FQDN prefix list version
        :param _builtins.str source_data_ipv4_prefix_list_id: Source data IPv4 prefix list ID
        :param _builtins.int source_data_ipv4_prefix_list_version: Source data IPv4 prefix list version
        :param _builtins.str source_fqdn: Source fully qualified domain name
        :param _builtins.str source_geo_location: Source geo location
        :param _builtins.str source_geo_location_list_id: Source geo location list ID
        :param _builtins.int source_geo_location_list_version: Source geo location list version
        :param _builtins.str source_ipv4_prefix: Source IPv4 prefix
        :param _builtins.str source_ipv4_prefix_variable: Source IPv4 prefix variable name
        :param _builtins.str source_object_group_id: Source object group ID
        :param _builtins.int source_object_group_version: Source object group version
        :param _builtins.str source_port: Source port or range of ports
        :param _builtins.str source_port_list_id: Source port list ID
        :param _builtins.int source_port_list_version: Source port list version
        """
        pulumi.set(__self__, "destination_data_fqdn_prefix_list_id", destination_data_fqdn_prefix_list_id)
        pulumi.set(__self__, "destination_data_fqdn_prefix_list_version", destination_data_fqdn_prefix_list_version)
        pulumi.set(__self__, "destination_data_ipv4_prefix_list_id", destination_data_ipv4_prefix_list_id)
        pulumi.set(__self__, "destination_data_ipv4_prefix_list_version", destination_data_ipv4_prefix_list_version)
        pulumi.set(__self__, "destination_fqdn", destination_fqdn)
        pulumi.set(__self__, "destination_geo_location", destination_geo_location)
        pulumi.set(__self__, "destination_geo_location_list_id", destination_geo_location_list_id)
        pulumi.set(__self__, "destination_geo_location_list_version", destination_geo_location_list_version)
        pulumi.set(__self__, "destination_ipv4_prefix", destination_ipv4_prefix)
        pulumi.set(__self__, "destination_ipv4_prefix_variable", destination_ipv4_prefix_variable)
        pulumi.set(__self__, "destination_object_group_id", destination_object_group_id)
        pulumi.set(__self__, "destination_object_group_version", destination_object_group_version)
        pulumi.set(__self__, "destination_port", destination_port)
        pulumi.set(__self__, "destination_port_list_id", destination_port_list_id)
        pulumi.set(__self__, "destination_port_list_version", destination_port_list_version)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "order", order)
        pulumi.set(__self__, "protocol", protocol)
        pulumi.set(__self__, "protocol_list_id", protocol_list_id)
        pulumi.set(__self__, "protocol_list_version", protocol_list_version)
        pulumi.set(__self__, "protocol_number", protocol_number)
        pulumi.set(__self__, "source_data_fqdn_prefix_list_id", source_data_fqdn_prefix_list_id)
        pulumi.set(__self__, "source_data_fqdn_prefix_list_version", source_data_fqdn_prefix_list_version)
        pulumi.set(__self__, "source_data_ipv4_prefix_list_id", source_data_ipv4_prefix_list_id)
        pulumi.set(__self__, "source_data_ipv4_prefix_list_version", source_data_ipv4_prefix_list_version)
        pulumi.set(__self__, "source_fqdn", source_fqdn)
        pulumi.set(__self__, "source_geo_location", source_geo_location)
        pulumi.set(__self__, "source_geo_location_list_id", source_geo_location_list_id)
        pulumi.set(__self__, "source_geo_location_list_version", source_geo_location_list_version)
        pulumi.set(__self__, "source_ipv4_prefix", source_ipv4_prefix)
        pulumi.set(__self__, "source_ipv4_prefix_variable", source_ipv4_prefix_variable)
        pulumi.set(__self__, "source_object_group_id", source_object_group_id)
        pulumi.set(__self__, "source_object_group_version", source_object_group_version)
        pulumi.set(__self__, "source_port", source_port)
        pulumi.set(__self__, "source_port_list_id", source_port_list_id)
        pulumi.set(__self__, "source_port_list_version", source_port_list_version)

    @_builtins.property
    @pulumi.getter(name="destinationDataFqdnPrefixListId")
    def destination_data_fqdn_prefix_list_id(self) -> _builtins.str:
        """
        Destination data FQDN prefix list ID
        """
        return pulumi.get(self, "destination_data_fqdn_prefix_list_id")

    @_builtins.property
    @pulumi.getter(name="destinationDataFqdnPrefixListVersion")
    def destination_data_fqdn_prefix_list_version(self) -> _builtins.int:
        """
        Destination data FQDN prefix list version
        """
        return pulumi.get(self, "destination_data_fqdn_prefix_list_version")

    @_builtins.property
    @pulumi.getter(name="destinationDataIpv4PrefixListId")
    def destination_data_ipv4_prefix_list_id(self) -> _builtins.str:
        """
        Destination data IPv4 prefix list ID
        """
        return pulumi.get(self, "destination_data_ipv4_prefix_list_id")

    @_builtins.property
    @pulumi.getter(name="destinationDataIpv4PrefixListVersion")
    def destination_data_ipv4_prefix_list_version(self) -> _builtins.int:
        """
        Destination data IPv4 prefix list version
        """
        return pulumi.get(self, "destination_data_ipv4_prefix_list_version")

    @_builtins.property
    @pulumi.getter(name="destinationFqdn")
    def destination_fqdn(self) -> _builtins.str:
        """
        Destination fully qualified domain name
        """
        return pulumi.get(self, "destination_fqdn")

    @_builtins.property
    @pulumi.getter(name="destinationGeoLocation")
    def destination_geo_location(self) -> _builtins.str:
        """
        Destination geo location
        """
        return pulumi.get(self, "destination_geo_location")

    @_builtins.property
    @pulumi.getter(name="destinationGeoLocationListId")
    def destination_geo_location_list_id(self) -> _builtins.str:
        """
        Destination geo location list ID
        """
        return pulumi.get(self, "destination_geo_location_list_id")

    @_builtins.property
    @pulumi.getter(name="destinationGeoLocationListVersion")
    def destination_geo_location_list_version(self) -> _builtins.int:
        """
        Destination geo location list version
        """
        return pulumi.get(self, "destination_geo_location_list_version")

    @_builtins.property
    @pulumi.getter(name="destinationIpv4Prefix")
    def destination_ipv4_prefix(self) -> _builtins.str:
        """
        Destination IPv4 prefix
        """
        return pulumi.get(self, "destination_ipv4_prefix")

    @_builtins.property
    @pulumi.getter(name="destinationIpv4PrefixVariable")
    def destination_ipv4_prefix_variable(self) -> _builtins.str:
        """
        Destination IPv4 prefix variable name
        """
        return pulumi.get(self, "destination_ipv4_prefix_variable")

    @_builtins.property
    @pulumi.getter(name="destinationObjectGroupId")
    def destination_object_group_id(self) -> _builtins.str:
        """
        Destination object group ID
        """
        return pulumi.get(self, "destination_object_group_id")

    @_builtins.property
    @pulumi.getter(name="destinationObjectGroupVersion")
    def destination_object_group_version(self) -> _builtins.int:
        """
        Destination object group version
        """
        return pulumi.get(self, "destination_object_group_version")

    @_builtins.property
    @pulumi.getter(name="destinationPort")
    def destination_port(self) -> _builtins.str:
        """
        Destination port or range of ports
        """
        return pulumi.get(self, "destination_port")

    @_builtins.property
    @pulumi.getter(name="destinationPortListId")
    def destination_port_list_id(self) -> _builtins.str:
        """
        Destination port list ID
        """
        return pulumi.get(self, "destination_port_list_id")

    @_builtins.property
    @pulumi.getter(name="destinationPortListVersion")
    def destination_port_list_version(self) -> _builtins.int:
        """
        Destination port list version
        """
        return pulumi.get(self, "destination_port_list_version")

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        """
        The name of the rule
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def order(self) -> _builtins.int:
        """
        The order of the rule
        """
        return pulumi.get(self, "order")

    @_builtins.property
    @pulumi.getter
    def protocol(self) -> _builtins.str:
        """
        Protocol name
        """
        return pulumi.get(self, "protocol")

    @_builtins.property
    @pulumi.getter(name="protocolListId")
    def protocol_list_id(self) -> _builtins.str:
        """
        Protocol list ID
        """
        return pulumi.get(self, "protocol_list_id")

    @_builtins.property
    @pulumi.getter(name="protocolListVersion")
    def protocol_list_version(self) -> _builtins.int:
        """
        Protocol list version
        """
        return pulumi.get(self, "protocol_list_version")

    @_builtins.property
    @pulumi.getter(name="protocolNumber")
    def protocol_number(self) -> _builtins.int:
        """
        Protocol number
        """
        return pulumi.get(self, "protocol_number")

    @_builtins.property
    @pulumi.getter(name="sourceDataFqdnPrefixListId")
    def source_data_fqdn_prefix_list_id(self) -> _builtins.str:
        """
        Source data FQDN prefix list ID
        """
        return pulumi.get(self, "source_data_fqdn_prefix_list_id")

    @_builtins.property
    @pulumi.getter(name="sourceDataFqdnPrefixListVersion")
    def source_data_fqdn_prefix_list_version(self) -> _builtins.int:
        """
        Source data FQDN prefix list version
        """
        return pulumi.get(self, "source_data_fqdn_prefix_list_version")

    @_builtins.property
    @pulumi.getter(name="sourceDataIpv4PrefixListId")
    def source_data_ipv4_prefix_list_id(self) -> _builtins.str:
        """
        Source data IPv4 prefix list ID
        """
        return pulumi.get(self, "source_data_ipv4_prefix_list_id")

    @_builtins.property
    @pulumi.getter(name="sourceDataIpv4PrefixListVersion")
    def source_data_ipv4_prefix_list_version(self) -> _builtins.int:
        """
        Source data IPv4 prefix list version
        """
        return pulumi.get(self, "source_data_ipv4_prefix_list_version")

    @_builtins.property
    @pulumi.getter(name="sourceFqdn")
    def source_fqdn(self) -> _builtins.str:
        """
        Source fully qualified domain name
        """
        return pulumi.get(self, "source_fqdn")

    @_builtins.property
    @pulumi.getter(name="sourceGeoLocation")
    def source_geo_location(self) -> _builtins.str:
        """
        Source geo location
        """
        return pulumi.get(self, "source_geo_location")

    @_builtins.property
    @pulumi.getter(name="sourceGeoLocationListId")
    def source_geo_location_list_id(self) -> _builtins.str:
        """
        Source geo location list ID
        """
        return pulumi.get(self, "source_geo_location_list_id")

    @_builtins.property
    @pulumi.getter(name="sourceGeoLocationListVersion")
    def source_geo_location_list_version(self) -> _builtins.int:
        """
        Source geo location list version
        """
        return pulumi.get(self, "source_geo_location_list_version")

    @_builtins.property
    @pulumi.getter(name="sourceIpv4Prefix")
    def source_ipv4_prefix(self) -> _builtins.str:
        """
        Source IPv4 prefix
        """
        return pulumi.get(self, "source_ipv4_prefix")

    @_builtins.property
    @pulumi.getter(name="sourceIpv4PrefixVariable")
    def source_ipv4_prefix_variable(self) -> _builtins.str:
        """
        Source IPv4 prefix variable name
        """
        return pulumi.get(self, "source_ipv4_prefix_variable")

    @_builtins.property
    @pulumi.getter(name="sourceObjectGroupId")
    def source_object_group_id(self) -> _builtins.str:
        """
        Source object group ID
        """
        return pulumi.get(self, "source_object_group_id")

    @_builtins.property
    @pulumi.getter(name="sourceObjectGroupVersion")
    def source_object_group_version(self) -> _builtins.int:
        """
        Source object group version
        """
        return pulumi.get(self, "source_object_group_version")

    @_builtins.property
    @pulumi.getter(name="sourcePort")
    def source_port(self) -> _builtins.str:
        """
        Source port or range of ports
        """
        return pulumi.get(self, "source_port")

    @_builtins.property
    @pulumi.getter(name="sourcePortListId")
    def source_port_list_id(self) -> _builtins.str:
        """
        Source port list ID
        """
        return pulumi.get(self, "source_port_list_id")

    @_builtins.property
    @pulumi.getter(name="sourcePortListVersion")
    def source_port_list_version(self) -> _builtins.int:
        """
        Source port list version
        """
        return pulumi.get(self, "source_port_list_version")


@pulumi.output_type
class GetSecurityAppHostingFeatureTemplateVirtualApplicationResult(dict):
    def __init__(__self__, *,
                 application_type: _builtins.str,
                 data_gateway_ip: _builtins.str,
                 data_gateway_ip_variable: _builtins.str,
                 data_service_ip: _builtins.str,
                 data_service_ip_variable: _builtins.str,
                 database_url: _builtins.bool,
                 database_url_variable: _builtins.str,
                 instance_id: _builtins.str,
                 nat: _builtins.bool,
                 nat_variable: _builtins.str,
                 optional: _builtins.bool,
                 resource_profile: _builtins.str,
                 resource_profile_variable: _builtins.str,
                 service_gateway_ip: _builtins.str,
                 service_gateway_ip_variable: _builtins.str,
                 service_ip: _builtins.str,
                 service_ip_variable: _builtins.str):
        """
        :param _builtins.str application_type: List of Virtual applications
        :param _builtins.str data_gateway_ip: Data Gateway IP
        :param _builtins.str data_gateway_ip_variable: Variable name
        :param _builtins.str data_service_ip: Data Service IP
        :param _builtins.str data_service_ip_variable: Variable name
        :param _builtins.bool database_url: Download URL Database on Device
        :param _builtins.str database_url_variable: Variable name
        :param _builtins.str instance_id: List of Virtual applications
        :param _builtins.bool nat: Is Nat enabled
        :param _builtins.str nat_variable: Variable name
        :param _builtins.bool optional: Indicates if list item is considered optional.
        :param _builtins.str resource_profile: Resource Profile
        :param _builtins.str resource_profile_variable: Variable name
        :param _builtins.str service_gateway_ip: Service Gateway IP (Management interface)
        :param _builtins.str service_gateway_ip_variable: Variable name
        :param _builtins.str service_ip: Service IP
        :param _builtins.str service_ip_variable: Variable name
        """
        pulumi.set(__self__, "application_type", application_type)
        pulumi.set(__self__, "data_gateway_ip", data_gateway_ip)
        pulumi.set(__self__, "data_gateway_ip_variable", data_gateway_ip_variable)
        pulumi.set(__self__, "data_service_ip", data_service_ip)
        pulumi.set(__self__, "data_service_ip_variable", data_service_ip_variable)
        pulumi.set(__self__, "database_url", database_url)
        pulumi.set(__self__, "database_url_variable", database_url_variable)
        pulumi.set(__self__, "instance_id", instance_id)
        pulumi.set(__self__, "nat", nat)
        pulumi.set(__self__, "nat_variable", nat_variable)
        pulumi.set(__self__, "optional", optional)
        pulumi.set(__self__, "resource_profile", resource_profile)
        pulumi.set(__self__, "resource_profile_variable", resource_profile_variable)
        pulumi.set(__self__, "service_gateway_ip", service_gateway_ip)
        pulumi.set(__self__, "service_gateway_ip_variable", service_gateway_ip_variable)
        pulumi.set(__self__, "service_ip", service_ip)
        pulumi.set(__self__, "service_ip_variable", service_ip_variable)

    @_builtins.property
    @pulumi.getter(name="applicationType")
    def application_type(self) -> _builtins.str:
        """
        List of Virtual applications
        """
        return pulumi.get(self, "application_type")

    @_builtins.property
    @pulumi.getter(name="dataGatewayIp")
    def data_gateway_ip(self) -> _builtins.str:
        """
        Data Gateway IP
        """
        return pulumi.get(self, "data_gateway_ip")

    @_builtins.property
    @pulumi.getter(name="dataGatewayIpVariable")
    def data_gateway_ip_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "data_gateway_ip_variable")

    @_builtins.property
    @pulumi.getter(name="dataServiceIp")
    def data_service_ip(self) -> _builtins.str:
        """
        Data Service IP
        """
        return pulumi.get(self, "data_service_ip")

    @_builtins.property
    @pulumi.getter(name="dataServiceIpVariable")
    def data_service_ip_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "data_service_ip_variable")

    @_builtins.property
    @pulumi.getter(name="databaseUrl")
    def database_url(self) -> _builtins.bool:
        """
        Download URL Database on Device
        """
        return pulumi.get(self, "database_url")

    @_builtins.property
    @pulumi.getter(name="databaseUrlVariable")
    def database_url_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "database_url_variable")

    @_builtins.property
    @pulumi.getter(name="instanceId")
    def instance_id(self) -> _builtins.str:
        """
        List of Virtual applications
        """
        return pulumi.get(self, "instance_id")

    @_builtins.property
    @pulumi.getter
    def nat(self) -> _builtins.bool:
        """
        Is Nat enabled
        """
        return pulumi.get(self, "nat")

    @_builtins.property
    @pulumi.getter(name="natVariable")
    def nat_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "nat_variable")

    @_builtins.property
    @pulumi.getter
    def optional(self) -> _builtins.bool:
        """
        Indicates if list item is considered optional.
        """
        return pulumi.get(self, "optional")

    @_builtins.property
    @pulumi.getter(name="resourceProfile")
    def resource_profile(self) -> _builtins.str:
        """
        Resource Profile
        """
        return pulumi.get(self, "resource_profile")

    @_builtins.property
    @pulumi.getter(name="resourceProfileVariable")
    def resource_profile_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "resource_profile_variable")

    @_builtins.property
    @pulumi.getter(name="serviceGatewayIp")
    def service_gateway_ip(self) -> _builtins.str:
        """
        Service Gateway IP (Management interface)
        """
        return pulumi.get(self, "service_gateway_ip")

    @_builtins.property
    @pulumi.getter(name="serviceGatewayIpVariable")
    def service_gateway_ip_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "service_gateway_ip_variable")

    @_builtins.property
    @pulumi.getter(name="serviceIp")
    def service_ip(self) -> _builtins.str:
        """
        Service IP
        """
        return pulumi.get(self, "service_ip")

    @_builtins.property
    @pulumi.getter(name="serviceIpVariable")
    def service_ip_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "service_ip_variable")


@pulumi.output_type
class GetSecurityPolicyDefinitionResult(dict):
    def __init__(__self__, *,
                 entries: Sequence['outputs.GetSecurityPolicyDefinitionEntryResult'],
                 id: _builtins.str,
                 type: _builtins.str,
                 version: _builtins.int):
        """
        :param Sequence['GetSecurityPolicyDefinitionEntryArgs'] entries: List of zone pair definitions
        :param _builtins.str id: Policy definition ID
        :param _builtins.str type: Policy definition type
        :param _builtins.int version: Policy definition version
        """
        pulumi.set(__self__, "entries", entries)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "type", type)
        pulumi.set(__self__, "version", version)

    @_builtins.property
    @pulumi.getter
    def entries(self) -> Sequence['outputs.GetSecurityPolicyDefinitionEntryResult']:
        """
        List of zone pair definitions
        """
        return pulumi.get(self, "entries")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        Policy definition ID
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter
    def type(self) -> _builtins.str:
        """
        Policy definition type
        """
        return pulumi.get(self, "type")

    @_builtins.property
    @pulumi.getter
    def version(self) -> _builtins.int:
        """
        Policy definition version
        """
        return pulumi.get(self, "version")


@pulumi.output_type
class GetSecurityPolicyDefinitionEntryResult(dict):
    def __init__(__self__, *,
                 destination_zone: _builtins.str,
                 source_zone: _builtins.str):
        """
        :param _builtins.str destination_zone: Destination Zone
        :param _builtins.str source_zone: Source Zone
        """
        pulumi.set(__self__, "destination_zone", destination_zone)
        pulumi.set(__self__, "source_zone", source_zone)

    @_builtins.property
    @pulumi.getter(name="destinationZone")
    def destination_zone(self) -> _builtins.str:
        """
        Destination Zone
        """
        return pulumi.get(self, "destination_zone")

    @_builtins.property
    @pulumi.getter(name="sourceZone")
    def source_zone(self) -> _builtins.str:
        """
        Source Zone
        """
        return pulumi.get(self, "source_zone")


@pulumi.output_type
class GetSecurityPolicyLoggingResult(dict):
    def __init__(__self__, *,
                 external_syslog_server_ip: _builtins.str,
                 external_syslog_server_source_interface: _builtins.str,
                 external_syslog_server_vpn: _builtins.str):
        """
        :param _builtins.str external_syslog_server_ip: External Syslog Server IP
        :param _builtins.str external_syslog_server_source_interface: External Syslog Server Source Interface
        :param _builtins.str external_syslog_server_vpn: External Syslog Server VPN
        """
        pulumi.set(__self__, "external_syslog_server_ip", external_syslog_server_ip)
        pulumi.set(__self__, "external_syslog_server_source_interface", external_syslog_server_source_interface)
        pulumi.set(__self__, "external_syslog_server_vpn", external_syslog_server_vpn)

    @_builtins.property
    @pulumi.getter(name="externalSyslogServerIp")
    def external_syslog_server_ip(self) -> _builtins.str:
        """
        External Syslog Server IP
        """
        return pulumi.get(self, "external_syslog_server_ip")

    @_builtins.property
    @pulumi.getter(name="externalSyslogServerSourceInterface")
    def external_syslog_server_source_interface(self) -> _builtins.str:
        """
        External Syslog Server Source Interface
        """
        return pulumi.get(self, "external_syslog_server_source_interface")

    @_builtins.property
    @pulumi.getter(name="externalSyslogServerVpn")
    def external_syslog_server_vpn(self) -> _builtins.str:
        """
        External Syslog Server VPN
        """
        return pulumi.get(self, "external_syslog_server_vpn")


@pulumi.output_type
class GetServiceDhcpServerFeatureOptionCodeResult(dict):
    def __init__(__self__, *,
                 ascii: _builtins.str,
                 ascii_variable: _builtins.str,
                 code: _builtins.int,
                 code_variable: _builtins.str,
                 hex: _builtins.str,
                 hex_variable: _builtins.str,
                 ip_variable: _builtins.str,
                 ips: Sequence[_builtins.str]):
        """
        :param _builtins.str ascii: Set ASCII value
        :param _builtins.str ascii_variable: Variable name
        :param _builtins.int code: Set Option Code
        :param _builtins.str code_variable: Variable name
        :param _builtins.str hex: Set HEX value
        :param _builtins.str hex_variable: Variable name
        :param _builtins.str ip_variable: Variable name
        :param Sequence[_builtins.str] ips: Set ip address
        """
        pulumi.set(__self__, "ascii", ascii)
        pulumi.set(__self__, "ascii_variable", ascii_variable)
        pulumi.set(__self__, "code", code)
        pulumi.set(__self__, "code_variable", code_variable)
        pulumi.set(__self__, "hex", hex)
        pulumi.set(__self__, "hex_variable", hex_variable)
        pulumi.set(__self__, "ip_variable", ip_variable)
        pulumi.set(__self__, "ips", ips)

    @_builtins.property
    @pulumi.getter
    def ascii(self) -> _builtins.str:
        """
        Set ASCII value
        """
        return pulumi.get(self, "ascii")

    @_builtins.property
    @pulumi.getter(name="asciiVariable")
    def ascii_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "ascii_variable")

    @_builtins.property
    @pulumi.getter
    def code(self) -> _builtins.int:
        """
        Set Option Code
        """
        return pulumi.get(self, "code")

    @_builtins.property
    @pulumi.getter(name="codeVariable")
    def code_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "code_variable")

    @_builtins.property
    @pulumi.getter
    def hex(self) -> _builtins.str:
        """
        Set HEX value
        """
        return pulumi.get(self, "hex")

    @_builtins.property
    @pulumi.getter(name="hexVariable")
    def hex_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "hex_variable")

    @_builtins.property
    @pulumi.getter(name="ipVariable")
    def ip_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "ip_variable")

    @_builtins.property
    @pulumi.getter
    def ips(self) -> Sequence[_builtins.str]:
        """
        Set ip address
        """
        return pulumi.get(self, "ips")


@pulumi.output_type
class GetServiceDhcpServerFeatureStaticLeaseResult(dict):
    def __init__(__self__, *,
                 ip_address: _builtins.str,
                 ip_address_variable: _builtins.str,
                 mac_address: _builtins.str,
                 mac_address_variable: _builtins.str):
        """
        :param _builtins.str ip_address: Set client’s static IP address
        :param _builtins.str ip_address_variable: Variable name
        :param _builtins.str mac_address: Set MAC address of client
        :param _builtins.str mac_address_variable: Variable name
        """
        pulumi.set(__self__, "ip_address", ip_address)
        pulumi.set(__self__, "ip_address_variable", ip_address_variable)
        pulumi.set(__self__, "mac_address", mac_address)
        pulumi.set(__self__, "mac_address_variable", mac_address_variable)

    @_builtins.property
    @pulumi.getter(name="ipAddress")
    def ip_address(self) -> _builtins.str:
        """
        Set client’s static IP address
        """
        return pulumi.get(self, "ip_address")

    @_builtins.property
    @pulumi.getter(name="ipAddressVariable")
    def ip_address_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "ip_address_variable")

    @_builtins.property
    @pulumi.getter(name="macAddress")
    def mac_address(self) -> _builtins.str:
        """
        Set MAC address of client
        """
        return pulumi.get(self, "mac_address")

    @_builtins.property
    @pulumi.getter(name="macAddressVariable")
    def mac_address_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "mac_address_variable")


@pulumi.output_type
class GetServiceIpv4AclFeatureSequenceResult(dict):
    def __init__(__self__, *,
                 actions: Sequence['outputs.GetServiceIpv4AclFeatureSequenceActionResult'],
                 base_action: _builtins.str,
                 match_entries: Sequence['outputs.GetServiceIpv4AclFeatureSequenceMatchEntryResult'],
                 sequence_id: _builtins.int,
                 sequence_name: _builtins.str):
        """
        :param Sequence['GetServiceIpv4AclFeatureSequenceActionArgs'] actions: Define list of actions
        :param _builtins.str base_action: Base Action
        :param Sequence['GetServiceIpv4AclFeatureSequenceMatchEntryArgs'] match_entries: Define match conditions
        :param _builtins.int sequence_id: Sequence Id
        :param _builtins.str sequence_name: Sequence Name
        """
        pulumi.set(__self__, "actions", actions)
        pulumi.set(__self__, "base_action", base_action)
        pulumi.set(__self__, "match_entries", match_entries)
        pulumi.set(__self__, "sequence_id", sequence_id)
        pulumi.set(__self__, "sequence_name", sequence_name)

    @_builtins.property
    @pulumi.getter
    def actions(self) -> Sequence['outputs.GetServiceIpv4AclFeatureSequenceActionResult']:
        """
        Define list of actions
        """
        return pulumi.get(self, "actions")

    @_builtins.property
    @pulumi.getter(name="baseAction")
    def base_action(self) -> _builtins.str:
        """
        Base Action
        """
        return pulumi.get(self, "base_action")

    @_builtins.property
    @pulumi.getter(name="matchEntries")
    def match_entries(self) -> Sequence['outputs.GetServiceIpv4AclFeatureSequenceMatchEntryResult']:
        """
        Define match conditions
        """
        return pulumi.get(self, "match_entries")

    @_builtins.property
    @pulumi.getter(name="sequenceId")
    def sequence_id(self) -> _builtins.int:
        """
        Sequence Id
        """
        return pulumi.get(self, "sequence_id")

    @_builtins.property
    @pulumi.getter(name="sequenceName")
    def sequence_name(self) -> _builtins.str:
        """
        Sequence Name
        """
        return pulumi.get(self, "sequence_name")


@pulumi.output_type
class GetServiceIpv4AclFeatureSequenceActionResult(dict):
    def __init__(__self__, *,
                 accept_counter_name: _builtins.str,
                 accept_log: _builtins.bool,
                 accept_mirror_list_id: _builtins.str,
                 accept_policer_id: _builtins.str,
                 accept_set_dscp: _builtins.int,
                 accept_set_next_hop: _builtins.str,
                 drop_counter_name: _builtins.str,
                 drop_log: _builtins.bool):
        """
        :param _builtins.str accept_counter_name: Counter Name
        :param _builtins.bool accept_log: Enable Log
        :param _builtins.int accept_set_dscp: DSCP number
        :param _builtins.str accept_set_next_hop: Set Next Hop (IPV4 address)
        :param _builtins.str drop_counter_name: Counter Name
        :param _builtins.bool drop_log: Enable Log
        """
        pulumi.set(__self__, "accept_counter_name", accept_counter_name)
        pulumi.set(__self__, "accept_log", accept_log)
        pulumi.set(__self__, "accept_mirror_list_id", accept_mirror_list_id)
        pulumi.set(__self__, "accept_policer_id", accept_policer_id)
        pulumi.set(__self__, "accept_set_dscp", accept_set_dscp)
        pulumi.set(__self__, "accept_set_next_hop", accept_set_next_hop)
        pulumi.set(__self__, "drop_counter_name", drop_counter_name)
        pulumi.set(__self__, "drop_log", drop_log)

    @_builtins.property
    @pulumi.getter(name="acceptCounterName")
    def accept_counter_name(self) -> _builtins.str:
        """
        Counter Name
        """
        return pulumi.get(self, "accept_counter_name")

    @_builtins.property
    @pulumi.getter(name="acceptLog")
    def accept_log(self) -> _builtins.bool:
        """
        Enable Log
        """
        return pulumi.get(self, "accept_log")

    @_builtins.property
    @pulumi.getter(name="acceptMirrorListId")
    def accept_mirror_list_id(self) -> _builtins.str:
        return pulumi.get(self, "accept_mirror_list_id")

    @_builtins.property
    @pulumi.getter(name="acceptPolicerId")
    def accept_policer_id(self) -> _builtins.str:
        return pulumi.get(self, "accept_policer_id")

    @_builtins.property
    @pulumi.getter(name="acceptSetDscp")
    def accept_set_dscp(self) -> _builtins.int:
        """
        DSCP number
        """
        return pulumi.get(self, "accept_set_dscp")

    @_builtins.property
    @pulumi.getter(name="acceptSetNextHop")
    def accept_set_next_hop(self) -> _builtins.str:
        """
        Set Next Hop (IPV4 address)
        """
        return pulumi.get(self, "accept_set_next_hop")

    @_builtins.property
    @pulumi.getter(name="dropCounterName")
    def drop_counter_name(self) -> _builtins.str:
        """
        Counter Name
        """
        return pulumi.get(self, "drop_counter_name")

    @_builtins.property
    @pulumi.getter(name="dropLog")
    def drop_log(self) -> _builtins.bool:
        """
        Enable Log
        """
        return pulumi.get(self, "drop_log")


@pulumi.output_type
class GetServiceIpv4AclFeatureSequenceMatchEntryResult(dict):
    def __init__(__self__, *,
                 destination_data_prefix: _builtins.str,
                 destination_data_prefix_list_id: _builtins.str,
                 destination_data_prefix_variable: _builtins.str,
                 destination_ports: Sequence['outputs.GetServiceIpv4AclFeatureSequenceMatchEntryDestinationPortResult'],
                 dscps: Sequence[_builtins.int],
                 icmp_messages: Sequence[_builtins.str],
                 packet_length: _builtins.str,
                 protocols: Sequence[_builtins.int],
                 source_data_prefix: _builtins.str,
                 source_data_prefix_list_id: _builtins.str,
                 source_data_prefix_variable: _builtins.str,
                 source_ports: Sequence['outputs.GetServiceIpv4AclFeatureSequenceMatchEntrySourcePortResult'],
                 tcp_state: _builtins.str):
        """
        :param _builtins.str destination_data_prefix: Destination Data IP Prefix
        :param _builtins.str destination_data_prefix_variable: Variable name
        :param Sequence['GetServiceIpv4AclFeatureSequenceMatchEntryDestinationPortArgs'] destination_ports: Destination Port List
        :param Sequence[_builtins.int] dscps: DSCP number
        :param Sequence[_builtins.str] icmp_messages: ICMP Message
        :param _builtins.str packet_length: Packet Length
        :param Sequence[_builtins.int] protocols: protocol number list with at least one item
        :param _builtins.str source_data_prefix: Source Data IP Prefix
        :param _builtins.str source_data_prefix_variable: Variable name
        :param Sequence['GetServiceIpv4AclFeatureSequenceMatchEntrySourcePortArgs'] source_ports: Source Port List
        :param _builtins.str tcp_state: TCP States
        """
        pulumi.set(__self__, "destination_data_prefix", destination_data_prefix)
        pulumi.set(__self__, "destination_data_prefix_list_id", destination_data_prefix_list_id)
        pulumi.set(__self__, "destination_data_prefix_variable", destination_data_prefix_variable)
        pulumi.set(__self__, "destination_ports", destination_ports)
        pulumi.set(__self__, "dscps", dscps)
        pulumi.set(__self__, "icmp_messages", icmp_messages)
        pulumi.set(__self__, "packet_length", packet_length)
        pulumi.set(__self__, "protocols", protocols)
        pulumi.set(__self__, "source_data_prefix", source_data_prefix)
        pulumi.set(__self__, "source_data_prefix_list_id", source_data_prefix_list_id)
        pulumi.set(__self__, "source_data_prefix_variable", source_data_prefix_variable)
        pulumi.set(__self__, "source_ports", source_ports)
        pulumi.set(__self__, "tcp_state", tcp_state)

    @_builtins.property
    @pulumi.getter(name="destinationDataPrefix")
    def destination_data_prefix(self) -> _builtins.str:
        """
        Destination Data IP Prefix
        """
        return pulumi.get(self, "destination_data_prefix")

    @_builtins.property
    @pulumi.getter(name="destinationDataPrefixListId")
    def destination_data_prefix_list_id(self) -> _builtins.str:
        return pulumi.get(self, "destination_data_prefix_list_id")

    @_builtins.property
    @pulumi.getter(name="destinationDataPrefixVariable")
    def destination_data_prefix_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "destination_data_prefix_variable")

    @_builtins.property
    @pulumi.getter(name="destinationPorts")
    def destination_ports(self) -> Sequence['outputs.GetServiceIpv4AclFeatureSequenceMatchEntryDestinationPortResult']:
        """
        Destination Port List
        """
        return pulumi.get(self, "destination_ports")

    @_builtins.property
    @pulumi.getter
    def dscps(self) -> Sequence[_builtins.int]:
        """
        DSCP number
        """
        return pulumi.get(self, "dscps")

    @_builtins.property
    @pulumi.getter(name="icmpMessages")
    def icmp_messages(self) -> Sequence[_builtins.str]:
        """
        ICMP Message
        """
        return pulumi.get(self, "icmp_messages")

    @_builtins.property
    @pulumi.getter(name="packetLength")
    def packet_length(self) -> _builtins.str:
        """
        Packet Length
        """
        return pulumi.get(self, "packet_length")

    @_builtins.property
    @pulumi.getter
    def protocols(self) -> Sequence[_builtins.int]:
        """
        protocol number list with at least one item
        """
        return pulumi.get(self, "protocols")

    @_builtins.property
    @pulumi.getter(name="sourceDataPrefix")
    def source_data_prefix(self) -> _builtins.str:
        """
        Source Data IP Prefix
        """
        return pulumi.get(self, "source_data_prefix")

    @_builtins.property
    @pulumi.getter(name="sourceDataPrefixListId")
    def source_data_prefix_list_id(self) -> _builtins.str:
        return pulumi.get(self, "source_data_prefix_list_id")

    @_builtins.property
    @pulumi.getter(name="sourceDataPrefixVariable")
    def source_data_prefix_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "source_data_prefix_variable")

    @_builtins.property
    @pulumi.getter(name="sourcePorts")
    def source_ports(self) -> Sequence['outputs.GetServiceIpv4AclFeatureSequenceMatchEntrySourcePortResult']:
        """
        Source Port List
        """
        return pulumi.get(self, "source_ports")

    @_builtins.property
    @pulumi.getter(name="tcpState")
    def tcp_state(self) -> _builtins.str:
        """
        TCP States
        """
        return pulumi.get(self, "tcp_state")


@pulumi.output_type
class GetServiceIpv4AclFeatureSequenceMatchEntryDestinationPortResult(dict):
    def __init__(__self__, *,
                 port: _builtins.str):
        """
        :param _builtins.str port: destination port range or individual port number
        """
        pulumi.set(__self__, "port", port)

    @_builtins.property
    @pulumi.getter
    def port(self) -> _builtins.str:
        """
        destination port range or individual port number
        """
        return pulumi.get(self, "port")


@pulumi.output_type
class GetServiceIpv4AclFeatureSequenceMatchEntrySourcePortResult(dict):
    def __init__(__self__, *,
                 port: _builtins.str):
        """
        :param _builtins.str port: source port range or individual port number
        """
        pulumi.set(__self__, "port", port)

    @_builtins.property
    @pulumi.getter
    def port(self) -> _builtins.str:
        """
        source port range or individual port number
        """
        return pulumi.get(self, "port")


@pulumi.output_type
class GetServiceIpv6AclFeatureSequenceResult(dict):
    def __init__(__self__, *,
                 actions: Sequence['outputs.GetServiceIpv6AclFeatureSequenceActionResult'],
                 base_action: _builtins.str,
                 match_entries: Sequence['outputs.GetServiceIpv6AclFeatureSequenceMatchEntryResult'],
                 sequence_id: _builtins.int,
                 sequence_name: _builtins.str):
        """
        :param Sequence['GetServiceIpv6AclFeatureSequenceActionArgs'] actions: Define list of actions
        :param _builtins.str base_action: Base Action
        :param Sequence['GetServiceIpv6AclFeatureSequenceMatchEntryArgs'] match_entries: Define match conditions
        :param _builtins.int sequence_id: Sequence Id
        :param _builtins.str sequence_name: Sequence Name
        """
        pulumi.set(__self__, "actions", actions)
        pulumi.set(__self__, "base_action", base_action)
        pulumi.set(__self__, "match_entries", match_entries)
        pulumi.set(__self__, "sequence_id", sequence_id)
        pulumi.set(__self__, "sequence_name", sequence_name)

    @_builtins.property
    @pulumi.getter
    def actions(self) -> Sequence['outputs.GetServiceIpv6AclFeatureSequenceActionResult']:
        """
        Define list of actions
        """
        return pulumi.get(self, "actions")

    @_builtins.property
    @pulumi.getter(name="baseAction")
    def base_action(self) -> _builtins.str:
        """
        Base Action
        """
        return pulumi.get(self, "base_action")

    @_builtins.property
    @pulumi.getter(name="matchEntries")
    def match_entries(self) -> Sequence['outputs.GetServiceIpv6AclFeatureSequenceMatchEntryResult']:
        """
        Define match conditions
        """
        return pulumi.get(self, "match_entries")

    @_builtins.property
    @pulumi.getter(name="sequenceId")
    def sequence_id(self) -> _builtins.int:
        """
        Sequence Id
        """
        return pulumi.get(self, "sequence_id")

    @_builtins.property
    @pulumi.getter(name="sequenceName")
    def sequence_name(self) -> _builtins.str:
        """
        Sequence Name
        """
        return pulumi.get(self, "sequence_name")


@pulumi.output_type
class GetServiceIpv6AclFeatureSequenceActionResult(dict):
    def __init__(__self__, *,
                 accept_counter_name: _builtins.str,
                 accept_log: _builtins.bool,
                 accept_mirror_list_id: _builtins.str,
                 accept_policer_id: _builtins.str,
                 accept_set_next_hop: _builtins.str,
                 accept_traffic_class: _builtins.int,
                 drop_counter_name: _builtins.str,
                 drop_log: _builtins.bool):
        """
        :param _builtins.str accept_counter_name: Counter Name
        :param _builtins.bool accept_log: Enable Log
        :param _builtins.str accept_set_next_hop: Set Next Hop (IPV6 address)
        :param _builtins.int accept_traffic_class: set traffic class number
        :param _builtins.str drop_counter_name: Counter Name
        :param _builtins.bool drop_log: Enable Log
        """
        pulumi.set(__self__, "accept_counter_name", accept_counter_name)
        pulumi.set(__self__, "accept_log", accept_log)
        pulumi.set(__self__, "accept_mirror_list_id", accept_mirror_list_id)
        pulumi.set(__self__, "accept_policer_id", accept_policer_id)
        pulumi.set(__self__, "accept_set_next_hop", accept_set_next_hop)
        pulumi.set(__self__, "accept_traffic_class", accept_traffic_class)
        pulumi.set(__self__, "drop_counter_name", drop_counter_name)
        pulumi.set(__self__, "drop_log", drop_log)

    @_builtins.property
    @pulumi.getter(name="acceptCounterName")
    def accept_counter_name(self) -> _builtins.str:
        """
        Counter Name
        """
        return pulumi.get(self, "accept_counter_name")

    @_builtins.property
    @pulumi.getter(name="acceptLog")
    def accept_log(self) -> _builtins.bool:
        """
        Enable Log
        """
        return pulumi.get(self, "accept_log")

    @_builtins.property
    @pulumi.getter(name="acceptMirrorListId")
    def accept_mirror_list_id(self) -> _builtins.str:
        return pulumi.get(self, "accept_mirror_list_id")

    @_builtins.property
    @pulumi.getter(name="acceptPolicerId")
    def accept_policer_id(self) -> _builtins.str:
        return pulumi.get(self, "accept_policer_id")

    @_builtins.property
    @pulumi.getter(name="acceptSetNextHop")
    def accept_set_next_hop(self) -> _builtins.str:
        """
        Set Next Hop (IPV6 address)
        """
        return pulumi.get(self, "accept_set_next_hop")

    @_builtins.property
    @pulumi.getter(name="acceptTrafficClass")
    def accept_traffic_class(self) -> _builtins.int:
        """
        set traffic class number
        """
        return pulumi.get(self, "accept_traffic_class")

    @_builtins.property
    @pulumi.getter(name="dropCounterName")
    def drop_counter_name(self) -> _builtins.str:
        """
        Counter Name
        """
        return pulumi.get(self, "drop_counter_name")

    @_builtins.property
    @pulumi.getter(name="dropLog")
    def drop_log(self) -> _builtins.bool:
        """
        Enable Log
        """
        return pulumi.get(self, "drop_log")


@pulumi.output_type
class GetServiceIpv6AclFeatureSequenceMatchEntryResult(dict):
    def __init__(__self__, *,
                 destination_data_prefix: _builtins.str,
                 destination_data_prefix_list_id: _builtins.str,
                 destination_ports: Sequence['outputs.GetServiceIpv6AclFeatureSequenceMatchEntryDestinationPortResult'],
                 icmp_messages: Sequence[_builtins.str],
                 next_header: _builtins.int,
                 packet_length: _builtins.str,
                 source_data_prefix: _builtins.str,
                 source_data_prefix_list_id: _builtins.str,
                 source_ports: Sequence['outputs.GetServiceIpv6AclFeatureSequenceMatchEntrySourcePortResult'],
                 tcp_state: _builtins.str,
                 traffic_classes: Sequence[_builtins.int]):
        """
        :param _builtins.str destination_data_prefix: Destination Data IP Prefix
        :param Sequence['GetServiceIpv6AclFeatureSequenceMatchEntryDestinationPortArgs'] destination_ports: Destination Port List
        :param Sequence[_builtins.str] icmp_messages: ICMP6 Message
        :param _builtins.int next_header: next header number
        :param _builtins.str packet_length: Packet Length
        :param _builtins.str source_data_prefix: Source Data IP Prefix
        :param Sequence['GetServiceIpv6AclFeatureSequenceMatchEntrySourcePortArgs'] source_ports: Source Port List
        :param _builtins.str tcp_state: TCP States
        :param Sequence[_builtins.int] traffic_classes: Select Traffic Class
        """
        pulumi.set(__self__, "destination_data_prefix", destination_data_prefix)
        pulumi.set(__self__, "destination_data_prefix_list_id", destination_data_prefix_list_id)
        pulumi.set(__self__, "destination_ports", destination_ports)
        pulumi.set(__self__, "icmp_messages", icmp_messages)
        pulumi.set(__self__, "next_header", next_header)
        pulumi.set(__self__, "packet_length", packet_length)
        pulumi.set(__self__, "source_data_prefix", source_data_prefix)
        pulumi.set(__self__, "source_data_prefix_list_id", source_data_prefix_list_id)
        pulumi.set(__self__, "source_ports", source_ports)
        pulumi.set(__self__, "tcp_state", tcp_state)
        pulumi.set(__self__, "traffic_classes", traffic_classes)

    @_builtins.property
    @pulumi.getter(name="destinationDataPrefix")
    def destination_data_prefix(self) -> _builtins.str:
        """
        Destination Data IP Prefix
        """
        return pulumi.get(self, "destination_data_prefix")

    @_builtins.property
    @pulumi.getter(name="destinationDataPrefixListId")
    def destination_data_prefix_list_id(self) -> _builtins.str:
        return pulumi.get(self, "destination_data_prefix_list_id")

    @_builtins.property
    @pulumi.getter(name="destinationPorts")
    def destination_ports(self) -> Sequence['outputs.GetServiceIpv6AclFeatureSequenceMatchEntryDestinationPortResult']:
        """
        Destination Port List
        """
        return pulumi.get(self, "destination_ports")

    @_builtins.property
    @pulumi.getter(name="icmpMessages")
    def icmp_messages(self) -> Sequence[_builtins.str]:
        """
        ICMP6 Message
        """
        return pulumi.get(self, "icmp_messages")

    @_builtins.property
    @pulumi.getter(name="nextHeader")
    def next_header(self) -> _builtins.int:
        """
        next header number
        """
        return pulumi.get(self, "next_header")

    @_builtins.property
    @pulumi.getter(name="packetLength")
    def packet_length(self) -> _builtins.str:
        """
        Packet Length
        """
        return pulumi.get(self, "packet_length")

    @_builtins.property
    @pulumi.getter(name="sourceDataPrefix")
    def source_data_prefix(self) -> _builtins.str:
        """
        Source Data IP Prefix
        """
        return pulumi.get(self, "source_data_prefix")

    @_builtins.property
    @pulumi.getter(name="sourceDataPrefixListId")
    def source_data_prefix_list_id(self) -> _builtins.str:
        return pulumi.get(self, "source_data_prefix_list_id")

    @_builtins.property
    @pulumi.getter(name="sourcePorts")
    def source_ports(self) -> Sequence['outputs.GetServiceIpv6AclFeatureSequenceMatchEntrySourcePortResult']:
        """
        Source Port List
        """
        return pulumi.get(self, "source_ports")

    @_builtins.property
    @pulumi.getter(name="tcpState")
    def tcp_state(self) -> _builtins.str:
        """
        TCP States
        """
        return pulumi.get(self, "tcp_state")

    @_builtins.property
    @pulumi.getter(name="trafficClasses")
    def traffic_classes(self) -> Sequence[_builtins.int]:
        """
        Select Traffic Class
        """
        return pulumi.get(self, "traffic_classes")


@pulumi.output_type
class GetServiceIpv6AclFeatureSequenceMatchEntryDestinationPortResult(dict):
    def __init__(__self__, *,
                 port: _builtins.str):
        """
        :param _builtins.str port: destination port range or individual port number
        """
        pulumi.set(__self__, "port", port)

    @_builtins.property
    @pulumi.getter
    def port(self) -> _builtins.str:
        """
        destination port range or individual port number
        """
        return pulumi.get(self, "port")


@pulumi.output_type
class GetServiceIpv6AclFeatureSequenceMatchEntrySourcePortResult(dict):
    def __init__(__self__, *,
                 port: _builtins.str):
        """
        :param _builtins.str port: source port range or individual port number
        """
        pulumi.set(__self__, "port", port)

    @_builtins.property
    @pulumi.getter
    def port(self) -> _builtins.str:
        """
        source port range or individual port number
        """
        return pulumi.get(self, "port")


@pulumi.output_type
class GetServiceLanVpnFeatureAdvertiseOmpIpv4Result(dict):
    def __init__(__self__, *,
                 prefixes: Sequence['outputs.GetServiceLanVpnFeatureAdvertiseOmpIpv4PrefixResult'],
                 protocol: _builtins.str,
                 protocol_variable: _builtins.str,
                 route_policy_id: _builtins.str):
        """
        :param Sequence['GetServiceLanVpnFeatureAdvertiseOmpIpv4PrefixArgs'] prefixes: IPv4 Prefix List
        :param _builtins.str protocol: Protocol
        :param _builtins.str protocol_variable: Variable name
        """
        pulumi.set(__self__, "prefixes", prefixes)
        pulumi.set(__self__, "protocol", protocol)
        pulumi.set(__self__, "protocol_variable", protocol_variable)
        pulumi.set(__self__, "route_policy_id", route_policy_id)

    @_builtins.property
    @pulumi.getter
    def prefixes(self) -> Sequence['outputs.GetServiceLanVpnFeatureAdvertiseOmpIpv4PrefixResult']:
        """
        IPv4 Prefix List
        """
        return pulumi.get(self, "prefixes")

    @_builtins.property
    @pulumi.getter
    def protocol(self) -> _builtins.str:
        """
        Protocol
        """
        return pulumi.get(self, "protocol")

    @_builtins.property
    @pulumi.getter(name="protocolVariable")
    def protocol_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "protocol_variable")

    @_builtins.property
    @pulumi.getter(name="routePolicyId")
    def route_policy_id(self) -> _builtins.str:
        return pulumi.get(self, "route_policy_id")


@pulumi.output_type
class GetServiceLanVpnFeatureAdvertiseOmpIpv4PrefixResult(dict):
    def __init__(__self__, *,
                 aggregate_only: _builtins.bool,
                 network_address: _builtins.str,
                 network_address_variable: _builtins.str,
                 region: _builtins.str,
                 region_variable: _builtins.str,
                 subnet_mask: _builtins.str,
                 subnet_mask_variable: _builtins.str):
        """
        :param _builtins.bool aggregate_only: Aggregate Only
        :param _builtins.str network_address_variable: Variable name
        :param _builtins.str region: Applied to Region
        :param _builtins.str region_variable: Variable name
        :param _builtins.str subnet_mask_variable: Variable name
        """
        pulumi.set(__self__, "aggregate_only", aggregate_only)
        pulumi.set(__self__, "network_address", network_address)
        pulumi.set(__self__, "network_address_variable", network_address_variable)
        pulumi.set(__self__, "region", region)
        pulumi.set(__self__, "region_variable", region_variable)
        pulumi.set(__self__, "subnet_mask", subnet_mask)
        pulumi.set(__self__, "subnet_mask_variable", subnet_mask_variable)

    @_builtins.property
    @pulumi.getter(name="aggregateOnly")
    def aggregate_only(self) -> _builtins.bool:
        """
        Aggregate Only
        """
        return pulumi.get(self, "aggregate_only")

    @_builtins.property
    @pulumi.getter(name="networkAddress")
    def network_address(self) -> _builtins.str:
        return pulumi.get(self, "network_address")

    @_builtins.property
    @pulumi.getter(name="networkAddressVariable")
    def network_address_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "network_address_variable")

    @_builtins.property
    @pulumi.getter
    def region(self) -> _builtins.str:
        """
        Applied to Region
        """
        return pulumi.get(self, "region")

    @_builtins.property
    @pulumi.getter(name="regionVariable")
    def region_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "region_variable")

    @_builtins.property
    @pulumi.getter(name="subnetMask")
    def subnet_mask(self) -> _builtins.str:
        return pulumi.get(self, "subnet_mask")

    @_builtins.property
    @pulumi.getter(name="subnetMaskVariable")
    def subnet_mask_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "subnet_mask_variable")


@pulumi.output_type
class GetServiceLanVpnFeatureAdvertiseOmpIpv6Result(dict):
    def __init__(__self__, *,
                 prefixes: Sequence['outputs.GetServiceLanVpnFeatureAdvertiseOmpIpv6PrefixResult'],
                 protocol: _builtins.str,
                 protocol_sub_type: _builtins.str,
                 protocol_sub_type_variable: _builtins.str,
                 protocol_variable: _builtins.str,
                 route_policy_id: _builtins.str):
        """
        :param Sequence['GetServiceLanVpnFeatureAdvertiseOmpIpv6PrefixArgs'] prefixes: IPv6 Prefix List
        :param _builtins.str protocol: Protocol
        :param _builtins.str protocol_sub_type: Protocol Sub Type
        :param _builtins.str protocol_sub_type_variable: Variable name
        :param _builtins.str protocol_variable: Variable name
        """
        pulumi.set(__self__, "prefixes", prefixes)
        pulumi.set(__self__, "protocol", protocol)
        pulumi.set(__self__, "protocol_sub_type", protocol_sub_type)
        pulumi.set(__self__, "protocol_sub_type_variable", protocol_sub_type_variable)
        pulumi.set(__self__, "protocol_variable", protocol_variable)
        pulumi.set(__self__, "route_policy_id", route_policy_id)

    @_builtins.property
    @pulumi.getter
    def prefixes(self) -> Sequence['outputs.GetServiceLanVpnFeatureAdvertiseOmpIpv6PrefixResult']:
        """
        IPv6 Prefix List
        """
        return pulumi.get(self, "prefixes")

    @_builtins.property
    @pulumi.getter
    def protocol(self) -> _builtins.str:
        """
        Protocol
        """
        return pulumi.get(self, "protocol")

    @_builtins.property
    @pulumi.getter(name="protocolSubType")
    def protocol_sub_type(self) -> _builtins.str:
        """
        Protocol Sub Type
        """
        return pulumi.get(self, "protocol_sub_type")

    @_builtins.property
    @pulumi.getter(name="protocolSubTypeVariable")
    def protocol_sub_type_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "protocol_sub_type_variable")

    @_builtins.property
    @pulumi.getter(name="protocolVariable")
    def protocol_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "protocol_variable")

    @_builtins.property
    @pulumi.getter(name="routePolicyId")
    def route_policy_id(self) -> _builtins.str:
        return pulumi.get(self, "route_policy_id")


@pulumi.output_type
class GetServiceLanVpnFeatureAdvertiseOmpIpv6PrefixResult(dict):
    def __init__(__self__, *,
                 aggregate_only: _builtins.bool,
                 prefix: _builtins.str,
                 prefix_variable: _builtins.str):
        """
        :param _builtins.bool aggregate_only: Aggregate Only
        :param _builtins.str prefix: IPv6 Prefix
        :param _builtins.str prefix_variable: Variable name
        """
        pulumi.set(__self__, "aggregate_only", aggregate_only)
        pulumi.set(__self__, "prefix", prefix)
        pulumi.set(__self__, "prefix_variable", prefix_variable)

    @_builtins.property
    @pulumi.getter(name="aggregateOnly")
    def aggregate_only(self) -> _builtins.bool:
        """
        Aggregate Only
        """
        return pulumi.get(self, "aggregate_only")

    @_builtins.property
    @pulumi.getter
    def prefix(self) -> _builtins.str:
        """
        IPv6 Prefix
        """
        return pulumi.get(self, "prefix")

    @_builtins.property
    @pulumi.getter(name="prefixVariable")
    def prefix_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "prefix_variable")


@pulumi.output_type
class GetServiceLanVpnFeatureGreRouteResult(dict):
    def __init__(__self__, *,
                 interface_variable: _builtins.str,
                 interfaces: Sequence[_builtins.str],
                 network_address: _builtins.str,
                 network_address_variable: _builtins.str,
                 subnet_mask: _builtins.str,
                 subnet_mask_variable: _builtins.str,
                 vpn: _builtins.int):
        """
        :param _builtins.str interface_variable: Variable name
        :param Sequence[_builtins.str] interfaces: Interface
        :param _builtins.str network_address: IP Address
        :param _builtins.str network_address_variable: Variable name
        :param _builtins.str subnet_mask: Subnet Mask
        :param _builtins.str subnet_mask_variable: Variable name
        :param _builtins.int vpn: Service
        """
        pulumi.set(__self__, "interface_variable", interface_variable)
        pulumi.set(__self__, "interfaces", interfaces)
        pulumi.set(__self__, "network_address", network_address)
        pulumi.set(__self__, "network_address_variable", network_address_variable)
        pulumi.set(__self__, "subnet_mask", subnet_mask)
        pulumi.set(__self__, "subnet_mask_variable", subnet_mask_variable)
        pulumi.set(__self__, "vpn", vpn)

    @_builtins.property
    @pulumi.getter(name="interfaceVariable")
    def interface_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "interface_variable")

    @_builtins.property
    @pulumi.getter
    def interfaces(self) -> Sequence[_builtins.str]:
        """
        Interface
        """
        return pulumi.get(self, "interfaces")

    @_builtins.property
    @pulumi.getter(name="networkAddress")
    def network_address(self) -> _builtins.str:
        """
        IP Address
        """
        return pulumi.get(self, "network_address")

    @_builtins.property
    @pulumi.getter(name="networkAddressVariable")
    def network_address_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "network_address_variable")

    @_builtins.property
    @pulumi.getter(name="subnetMask")
    def subnet_mask(self) -> _builtins.str:
        """
        Subnet Mask
        """
        return pulumi.get(self, "subnet_mask")

    @_builtins.property
    @pulumi.getter(name="subnetMaskVariable")
    def subnet_mask_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "subnet_mask_variable")

    @_builtins.property
    @pulumi.getter
    def vpn(self) -> _builtins.int:
        """
        Service
        """
        return pulumi.get(self, "vpn")


@pulumi.output_type
class GetServiceLanVpnFeatureHostMappingResult(dict):
    def __init__(__self__, *,
                 host_name: _builtins.str,
                 host_name_variable: _builtins.str,
                 list_of_ips: Sequence[_builtins.str],
                 list_of_ips_variable: _builtins.str):
        """
        :param _builtins.str host_name: Hostname
        :param _builtins.str host_name_variable: Variable name
        :param Sequence[_builtins.str] list_of_ips: List of IP
        :param _builtins.str list_of_ips_variable: Variable name
        """
        pulumi.set(__self__, "host_name", host_name)
        pulumi.set(__self__, "host_name_variable", host_name_variable)
        pulumi.set(__self__, "list_of_ips", list_of_ips)
        pulumi.set(__self__, "list_of_ips_variable", list_of_ips_variable)

    @_builtins.property
    @pulumi.getter(name="hostName")
    def host_name(self) -> _builtins.str:
        """
        Hostname
        """
        return pulumi.get(self, "host_name")

    @_builtins.property
    @pulumi.getter(name="hostNameVariable")
    def host_name_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "host_name_variable")

    @_builtins.property
    @pulumi.getter(name="listOfIps")
    def list_of_ips(self) -> Sequence[_builtins.str]:
        """
        List of IP
        """
        return pulumi.get(self, "list_of_ips")

    @_builtins.property
    @pulumi.getter(name="listOfIpsVariable")
    def list_of_ips_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "list_of_ips_variable")


@pulumi.output_type
class GetServiceLanVpnFeatureIpsecRouteResult(dict):
    def __init__(__self__, *,
                 interface_variable: _builtins.str,
                 interfaces: Sequence[_builtins.str],
                 network_address: _builtins.str,
                 network_address_variable: _builtins.str,
                 subnet_mask: _builtins.str,
                 subnet_mask_variable: _builtins.str):
        """
        :param _builtins.str interface_variable: Variable name
        :param Sequence[_builtins.str] interfaces: Interface
        :param _builtins.str network_address: IP Address
        :param _builtins.str network_address_variable: Variable name
        :param _builtins.str subnet_mask: Subnet Mask
        :param _builtins.str subnet_mask_variable: Variable name
        """
        pulumi.set(__self__, "interface_variable", interface_variable)
        pulumi.set(__self__, "interfaces", interfaces)
        pulumi.set(__self__, "network_address", network_address)
        pulumi.set(__self__, "network_address_variable", network_address_variable)
        pulumi.set(__self__, "subnet_mask", subnet_mask)
        pulumi.set(__self__, "subnet_mask_variable", subnet_mask_variable)

    @_builtins.property
    @pulumi.getter(name="interfaceVariable")
    def interface_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "interface_variable")

    @_builtins.property
    @pulumi.getter
    def interfaces(self) -> Sequence[_builtins.str]:
        """
        Interface
        """
        return pulumi.get(self, "interfaces")

    @_builtins.property
    @pulumi.getter(name="networkAddress")
    def network_address(self) -> _builtins.str:
        """
        IP Address
        """
        return pulumi.get(self, "network_address")

    @_builtins.property
    @pulumi.getter(name="networkAddressVariable")
    def network_address_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "network_address_variable")

    @_builtins.property
    @pulumi.getter(name="subnetMask")
    def subnet_mask(self) -> _builtins.str:
        """
        Subnet Mask
        """
        return pulumi.get(self, "subnet_mask")

    @_builtins.property
    @pulumi.getter(name="subnetMaskVariable")
    def subnet_mask_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "subnet_mask_variable")


@pulumi.output_type
class GetServiceLanVpnFeatureIpv4ExportRouteTargetResult(dict):
    def __init__(__self__, *,
                 route_target: _builtins.str,
                 route_target_variable: _builtins.str):
        """
        :param _builtins.str route_target: Route target
        :param _builtins.str route_target_variable: Variable name
        """
        pulumi.set(__self__, "route_target", route_target)
        pulumi.set(__self__, "route_target_variable", route_target_variable)

    @_builtins.property
    @pulumi.getter(name="routeTarget")
    def route_target(self) -> _builtins.str:
        """
        Route target
        """
        return pulumi.get(self, "route_target")

    @_builtins.property
    @pulumi.getter(name="routeTargetVariable")
    def route_target_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "route_target_variable")


@pulumi.output_type
class GetServiceLanVpnFeatureIpv4ImportRouteTargetResult(dict):
    def __init__(__self__, *,
                 route_target: _builtins.str,
                 route_target_variable: _builtins.str):
        """
        :param _builtins.str route_target: Route target
        :param _builtins.str route_target_variable: Variable name
        """
        pulumi.set(__self__, "route_target", route_target)
        pulumi.set(__self__, "route_target_variable", route_target_variable)

    @_builtins.property
    @pulumi.getter(name="routeTarget")
    def route_target(self) -> _builtins.str:
        """
        Route target
        """
        return pulumi.get(self, "route_target")

    @_builtins.property
    @pulumi.getter(name="routeTargetVariable")
    def route_target_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "route_target_variable")


@pulumi.output_type
class GetServiceLanVpnFeatureIpv4StaticRouteResult(dict):
    def __init__(__self__, *,
                 dhcp: _builtins.bool,
                 gateway: _builtins.str,
                 network_address: _builtins.str,
                 network_address_variable: _builtins.str,
                 next_hop_with_trackers: Sequence['outputs.GetServiceLanVpnFeatureIpv4StaticRouteNextHopWithTrackerResult'],
                 next_hops: Sequence['outputs.GetServiceLanVpnFeatureIpv4StaticRouteNextHopResult'],
                 null0: _builtins.bool,
                 subnet_mask: _builtins.str,
                 subnet_mask_variable: _builtins.str,
                 vpn: _builtins.bool):
        """
        :param _builtins.bool dhcp: IPv4 Route Gateway DHCP
        :param _builtins.str gateway: Gateway type
        :param _builtins.str network_address: IP Address
        :param _builtins.str network_address_variable: Variable name
        :param Sequence['GetServiceLanVpnFeatureIpv4StaticRouteNextHopWithTrackerArgs'] next_hop_with_trackers: IPv4 Route Gateway Next Hop with Tracker
        :param Sequence['GetServiceLanVpnFeatureIpv4StaticRouteNextHopArgs'] next_hops: IPv4 Route Gateway Next Hop
        :param _builtins.bool null0: IPv4 Route Gateway Next Hop
        :param _builtins.str subnet_mask: Subnet Mask
        :param _builtins.str subnet_mask_variable: Variable name
        :param _builtins.bool vpn: IPv4 Route Gateway VPN
        """
        pulumi.set(__self__, "dhcp", dhcp)
        pulumi.set(__self__, "gateway", gateway)
        pulumi.set(__self__, "network_address", network_address)
        pulumi.set(__self__, "network_address_variable", network_address_variable)
        pulumi.set(__self__, "next_hop_with_trackers", next_hop_with_trackers)
        pulumi.set(__self__, "next_hops", next_hops)
        pulumi.set(__self__, "null0", null0)
        pulumi.set(__self__, "subnet_mask", subnet_mask)
        pulumi.set(__self__, "subnet_mask_variable", subnet_mask_variable)
        pulumi.set(__self__, "vpn", vpn)

    @_builtins.property
    @pulumi.getter
    def dhcp(self) -> _builtins.bool:
        """
        IPv4 Route Gateway DHCP
        """
        return pulumi.get(self, "dhcp")

    @_builtins.property
    @pulumi.getter
    def gateway(self) -> _builtins.str:
        """
        Gateway type
        """
        return pulumi.get(self, "gateway")

    @_builtins.property
    @pulumi.getter(name="networkAddress")
    def network_address(self) -> _builtins.str:
        """
        IP Address
        """
        return pulumi.get(self, "network_address")

    @_builtins.property
    @pulumi.getter(name="networkAddressVariable")
    def network_address_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "network_address_variable")

    @_builtins.property
    @pulumi.getter(name="nextHopWithTrackers")
    def next_hop_with_trackers(self) -> Sequence['outputs.GetServiceLanVpnFeatureIpv4StaticRouteNextHopWithTrackerResult']:
        """
        IPv4 Route Gateway Next Hop with Tracker
        """
        return pulumi.get(self, "next_hop_with_trackers")

    @_builtins.property
    @pulumi.getter(name="nextHops")
    def next_hops(self) -> Sequence['outputs.GetServiceLanVpnFeatureIpv4StaticRouteNextHopResult']:
        """
        IPv4 Route Gateway Next Hop
        """
        return pulumi.get(self, "next_hops")

    @_builtins.property
    @pulumi.getter
    def null0(self) -> _builtins.bool:
        """
        IPv4 Route Gateway Next Hop
        """
        return pulumi.get(self, "null0")

    @_builtins.property
    @pulumi.getter(name="subnetMask")
    def subnet_mask(self) -> _builtins.str:
        """
        Subnet Mask
        """
        return pulumi.get(self, "subnet_mask")

    @_builtins.property
    @pulumi.getter(name="subnetMaskVariable")
    def subnet_mask_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "subnet_mask_variable")

    @_builtins.property
    @pulumi.getter
    def vpn(self) -> _builtins.bool:
        """
        IPv4 Route Gateway VPN
        """
        return pulumi.get(self, "vpn")


@pulumi.output_type
class GetServiceLanVpnFeatureIpv4StaticRouteNextHopResult(dict):
    def __init__(__self__, *,
                 address: _builtins.str,
                 address_variable: _builtins.str,
                 administrative_distance: _builtins.int,
                 administrative_distance_variable: _builtins.str):
        """
        :param _builtins.str address: Address
        :param _builtins.str address_variable: Variable name
        :param _builtins.int administrative_distance: Administrative distance
        :param _builtins.str administrative_distance_variable: Variable name
        """
        pulumi.set(__self__, "address", address)
        pulumi.set(__self__, "address_variable", address_variable)
        pulumi.set(__self__, "administrative_distance", administrative_distance)
        pulumi.set(__self__, "administrative_distance_variable", administrative_distance_variable)

    @_builtins.property
    @pulumi.getter
    def address(self) -> _builtins.str:
        """
        Address
        """
        return pulumi.get(self, "address")

    @_builtins.property
    @pulumi.getter(name="addressVariable")
    def address_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "address_variable")

    @_builtins.property
    @pulumi.getter(name="administrativeDistance")
    def administrative_distance(self) -> _builtins.int:
        """
        Administrative distance
        """
        return pulumi.get(self, "administrative_distance")

    @_builtins.property
    @pulumi.getter(name="administrativeDistanceVariable")
    def administrative_distance_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "administrative_distance_variable")


@pulumi.output_type
class GetServiceLanVpnFeatureIpv4StaticRouteNextHopWithTrackerResult(dict):
    def __init__(__self__, *,
                 address: _builtins.str,
                 address_variable: _builtins.str,
                 administrative_distance: _builtins.int,
                 administrative_distance_variable: _builtins.str,
                 tracker_id: _builtins.str):
        """
        :param _builtins.str address: Address
        :param _builtins.str address_variable: Variable name
        :param _builtins.int administrative_distance: Administrative distance
        :param _builtins.str administrative_distance_variable: Variable name
        """
        pulumi.set(__self__, "address", address)
        pulumi.set(__self__, "address_variable", address_variable)
        pulumi.set(__self__, "administrative_distance", administrative_distance)
        pulumi.set(__self__, "administrative_distance_variable", administrative_distance_variable)
        pulumi.set(__self__, "tracker_id", tracker_id)

    @_builtins.property
    @pulumi.getter
    def address(self) -> _builtins.str:
        """
        Address
        """
        return pulumi.get(self, "address")

    @_builtins.property
    @pulumi.getter(name="addressVariable")
    def address_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "address_variable")

    @_builtins.property
    @pulumi.getter(name="administrativeDistance")
    def administrative_distance(self) -> _builtins.int:
        """
        Administrative distance
        """
        return pulumi.get(self, "administrative_distance")

    @_builtins.property
    @pulumi.getter(name="administrativeDistanceVariable")
    def administrative_distance_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "administrative_distance_variable")

    @_builtins.property
    @pulumi.getter(name="trackerId")
    def tracker_id(self) -> _builtins.str:
        return pulumi.get(self, "tracker_id")


@pulumi.output_type
class GetServiceLanVpnFeatureIpv6ExportRouteTargetResult(dict):
    def __init__(__self__, *,
                 route_target: _builtins.str,
                 route_target_variable: _builtins.str):
        """
        :param _builtins.str route_target: Route target
        :param _builtins.str route_target_variable: Variable name
        """
        pulumi.set(__self__, "route_target", route_target)
        pulumi.set(__self__, "route_target_variable", route_target_variable)

    @_builtins.property
    @pulumi.getter(name="routeTarget")
    def route_target(self) -> _builtins.str:
        """
        Route target
        """
        return pulumi.get(self, "route_target")

    @_builtins.property
    @pulumi.getter(name="routeTargetVariable")
    def route_target_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "route_target_variable")


@pulumi.output_type
class GetServiceLanVpnFeatureIpv6ImportRouteTargetResult(dict):
    def __init__(__self__, *,
                 route_target: _builtins.str,
                 route_target_variable: _builtins.str):
        """
        :param _builtins.str route_target: Route target
        :param _builtins.str route_target_variable: Variable name
        """
        pulumi.set(__self__, "route_target", route_target)
        pulumi.set(__self__, "route_target_variable", route_target_variable)

    @_builtins.property
    @pulumi.getter(name="routeTarget")
    def route_target(self) -> _builtins.str:
        """
        Route target
        """
        return pulumi.get(self, "route_target")

    @_builtins.property
    @pulumi.getter(name="routeTargetVariable")
    def route_target_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "route_target_variable")


@pulumi.output_type
class GetServiceLanVpnFeatureIpv6StaticRouteResult(dict):
    def __init__(__self__, *,
                 gateway: _builtins.str,
                 nat: _builtins.str,
                 nat_variable: _builtins.str,
                 next_hops: Sequence['outputs.GetServiceLanVpnFeatureIpv6StaticRouteNextHopResult'],
                 null0: _builtins.bool,
                 prefix: _builtins.str,
                 prefix_variable: _builtins.str):
        """
        :param _builtins.str gateway: Gateway type
        :param _builtins.str nat: IPv6 Nat
        :param _builtins.str nat_variable: Variable name
        :param Sequence['GetServiceLanVpnFeatureIpv6StaticRouteNextHopArgs'] next_hops: IPv6 Route Gateway Next Hop
        :param _builtins.bool null0: IPv6 Route Gateway Next Hop
        :param _builtins.str prefix: Prefix
        :param _builtins.str prefix_variable: Variable name
        """
        pulumi.set(__self__, "gateway", gateway)
        pulumi.set(__self__, "nat", nat)
        pulumi.set(__self__, "nat_variable", nat_variable)
        pulumi.set(__self__, "next_hops", next_hops)
        pulumi.set(__self__, "null0", null0)
        pulumi.set(__self__, "prefix", prefix)
        pulumi.set(__self__, "prefix_variable", prefix_variable)

    @_builtins.property
    @pulumi.getter
    def gateway(self) -> _builtins.str:
        """
        Gateway type
        """
        return pulumi.get(self, "gateway")

    @_builtins.property
    @pulumi.getter
    def nat(self) -> _builtins.str:
        """
        IPv6 Nat
        """
        return pulumi.get(self, "nat")

    @_builtins.property
    @pulumi.getter(name="natVariable")
    def nat_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "nat_variable")

    @_builtins.property
    @pulumi.getter(name="nextHops")
    def next_hops(self) -> Sequence['outputs.GetServiceLanVpnFeatureIpv6StaticRouteNextHopResult']:
        """
        IPv6 Route Gateway Next Hop
        """
        return pulumi.get(self, "next_hops")

    @_builtins.property
    @pulumi.getter
    def null0(self) -> _builtins.bool:
        """
        IPv6 Route Gateway Next Hop
        """
        return pulumi.get(self, "null0")

    @_builtins.property
    @pulumi.getter
    def prefix(self) -> _builtins.str:
        """
        Prefix
        """
        return pulumi.get(self, "prefix")

    @_builtins.property
    @pulumi.getter(name="prefixVariable")
    def prefix_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "prefix_variable")


@pulumi.output_type
class GetServiceLanVpnFeatureIpv6StaticRouteNextHopResult(dict):
    def __init__(__self__, *,
                 address: _builtins.str,
                 address_variable: _builtins.str,
                 administrative_distance: _builtins.int,
                 administrative_distance_variable: _builtins.str):
        """
        :param _builtins.str address: Address
        :param _builtins.str address_variable: Variable name
        :param _builtins.int administrative_distance: Administrative distance
        :param _builtins.str administrative_distance_variable: Variable name
        """
        pulumi.set(__self__, "address", address)
        pulumi.set(__self__, "address_variable", address_variable)
        pulumi.set(__self__, "administrative_distance", administrative_distance)
        pulumi.set(__self__, "administrative_distance_variable", administrative_distance_variable)

    @_builtins.property
    @pulumi.getter
    def address(self) -> _builtins.str:
        """
        Address
        """
        return pulumi.get(self, "address")

    @_builtins.property
    @pulumi.getter(name="addressVariable")
    def address_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "address_variable")

    @_builtins.property
    @pulumi.getter(name="administrativeDistance")
    def administrative_distance(self) -> _builtins.int:
        """
        Administrative distance
        """
        return pulumi.get(self, "administrative_distance")

    @_builtins.property
    @pulumi.getter(name="administrativeDistanceVariable")
    def administrative_distance_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "administrative_distance_variable")


@pulumi.output_type
class GetServiceLanVpnFeatureNat64V4PoolResult(dict):
    def __init__(__self__, *,
                 name: _builtins.str,
                 name_variable: _builtins.str,
                 overload: _builtins.bool,
                 overload_variable: _builtins.str,
                 range_end: _builtins.str,
                 range_end_variable: _builtins.str,
                 range_start: _builtins.str,
                 range_start_variable: _builtins.str):
        """
        :param _builtins.str name: NAT64 v4 Pool Name
        :param _builtins.str name_variable: Variable name
        :param _builtins.bool overload: NAT64 Overload
        :param _builtins.str overload_variable: Variable name
        :param _builtins.str range_end: NAT64 Pool Range End
        :param _builtins.str range_end_variable: Variable name
        :param _builtins.str range_start: NAT64 Pool Range Start
        :param _builtins.str range_start_variable: Variable name
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "name_variable", name_variable)
        pulumi.set(__self__, "overload", overload)
        pulumi.set(__self__, "overload_variable", overload_variable)
        pulumi.set(__self__, "range_end", range_end)
        pulumi.set(__self__, "range_end_variable", range_end_variable)
        pulumi.set(__self__, "range_start", range_start)
        pulumi.set(__self__, "range_start_variable", range_start_variable)

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        """
        NAT64 v4 Pool Name
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter(name="nameVariable")
    def name_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "name_variable")

    @_builtins.property
    @pulumi.getter
    def overload(self) -> _builtins.bool:
        """
        NAT64 Overload
        """
        return pulumi.get(self, "overload")

    @_builtins.property
    @pulumi.getter(name="overloadVariable")
    def overload_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "overload_variable")

    @_builtins.property
    @pulumi.getter(name="rangeEnd")
    def range_end(self) -> _builtins.str:
        """
        NAT64 Pool Range End
        """
        return pulumi.get(self, "range_end")

    @_builtins.property
    @pulumi.getter(name="rangeEndVariable")
    def range_end_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "range_end_variable")

    @_builtins.property
    @pulumi.getter(name="rangeStart")
    def range_start(self) -> _builtins.str:
        """
        NAT64 Pool Range Start
        """
        return pulumi.get(self, "range_start")

    @_builtins.property
    @pulumi.getter(name="rangeStartVariable")
    def range_start_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "range_start_variable")


@pulumi.output_type
class GetServiceLanVpnFeatureNatPoolResult(dict):
    def __init__(__self__, *,
                 direction: _builtins.str,
                 direction_variable: _builtins.str,
                 nat_pool_name: _builtins.int,
                 nat_pool_name_variable: _builtins.str,
                 overload: _builtins.bool,
                 overload_variable: _builtins.str,
                 prefix_length: _builtins.int,
                 prefix_length_variable: _builtins.str,
                 range_end: _builtins.str,
                 range_end_variable: _builtins.str,
                 range_start: _builtins.str,
                 range_start_variable: _builtins.str,
                 tracker_object_id: _builtins.str):
        """
        :param _builtins.str direction: NAT Direction
        :param _builtins.str direction_variable: Variable name
        :param _builtins.int nat_pool_name: NAT Pool Name
        :param _builtins.str nat_pool_name_variable: Variable name
        :param _builtins.bool overload: NAT Overload
        :param _builtins.str overload_variable: Variable name
        :param _builtins.int prefix_length: NAT Pool Prefix Length
        :param _builtins.str prefix_length_variable: Variable name
        :param _builtins.str range_end: NAT Pool Range End
        :param _builtins.str range_end_variable: Variable name
        :param _builtins.str range_start: NAT Pool Range Start
        :param _builtins.str range_start_variable: Variable name
        """
        pulumi.set(__self__, "direction", direction)
        pulumi.set(__self__, "direction_variable", direction_variable)
        pulumi.set(__self__, "nat_pool_name", nat_pool_name)
        pulumi.set(__self__, "nat_pool_name_variable", nat_pool_name_variable)
        pulumi.set(__self__, "overload", overload)
        pulumi.set(__self__, "overload_variable", overload_variable)
        pulumi.set(__self__, "prefix_length", prefix_length)
        pulumi.set(__self__, "prefix_length_variable", prefix_length_variable)
        pulumi.set(__self__, "range_end", range_end)
        pulumi.set(__self__, "range_end_variable", range_end_variable)
        pulumi.set(__self__, "range_start", range_start)
        pulumi.set(__self__, "range_start_variable", range_start_variable)
        pulumi.set(__self__, "tracker_object_id", tracker_object_id)

    @_builtins.property
    @pulumi.getter
    def direction(self) -> _builtins.str:
        """
        NAT Direction
        """
        return pulumi.get(self, "direction")

    @_builtins.property
    @pulumi.getter(name="directionVariable")
    def direction_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "direction_variable")

    @_builtins.property
    @pulumi.getter(name="natPoolName")
    def nat_pool_name(self) -> _builtins.int:
        """
        NAT Pool Name
        """
        return pulumi.get(self, "nat_pool_name")

    @_builtins.property
    @pulumi.getter(name="natPoolNameVariable")
    def nat_pool_name_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "nat_pool_name_variable")

    @_builtins.property
    @pulumi.getter
    def overload(self) -> _builtins.bool:
        """
        NAT Overload
        """
        return pulumi.get(self, "overload")

    @_builtins.property
    @pulumi.getter(name="overloadVariable")
    def overload_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "overload_variable")

    @_builtins.property
    @pulumi.getter(name="prefixLength")
    def prefix_length(self) -> _builtins.int:
        """
        NAT Pool Prefix Length
        """
        return pulumi.get(self, "prefix_length")

    @_builtins.property
    @pulumi.getter(name="prefixLengthVariable")
    def prefix_length_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "prefix_length_variable")

    @_builtins.property
    @pulumi.getter(name="rangeEnd")
    def range_end(self) -> _builtins.str:
        """
        NAT Pool Range End
        """
        return pulumi.get(self, "range_end")

    @_builtins.property
    @pulumi.getter(name="rangeEndVariable")
    def range_end_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "range_end_variable")

    @_builtins.property
    @pulumi.getter(name="rangeStart")
    def range_start(self) -> _builtins.str:
        """
        NAT Pool Range Start
        """
        return pulumi.get(self, "range_start")

    @_builtins.property
    @pulumi.getter(name="rangeStartVariable")
    def range_start_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "range_start_variable")

    @_builtins.property
    @pulumi.getter(name="trackerObjectId")
    def tracker_object_id(self) -> _builtins.str:
        return pulumi.get(self, "tracker_object_id")


@pulumi.output_type
class GetServiceLanVpnFeatureNatPortForwardResult(dict):
    def __init__(__self__, *,
                 nat_pool_name: _builtins.int,
                 nat_pool_name_variable: _builtins.str,
                 protocol: _builtins.str,
                 protocol_variable: _builtins.str,
                 source_ip: _builtins.str,
                 source_ip_variable: _builtins.str,
                 source_port: _builtins.int,
                 source_port_variable: _builtins.str,
                 translate_port: _builtins.int,
                 translate_port_variable: _builtins.str,
                 translated_source_ip: _builtins.str,
                 translated_source_ip_variable: _builtins.str):
        """
        :param _builtins.int nat_pool_name: NAT Pool Name
        :param _builtins.str nat_pool_name_variable: Variable name
        :param _builtins.str protocol: Protocol
        :param _builtins.str protocol_variable: Variable name
        :param _builtins.str source_ip: Source IP Address
        :param _builtins.str source_ip_variable: Variable name
        :param _builtins.int source_port: Source Port
        :param _builtins.str source_port_variable: Variable name
        :param _builtins.int translate_port: Translate Port
        :param _builtins.str translate_port_variable: Variable name
        :param _builtins.str translated_source_ip: Translated Source IP Address
        :param _builtins.str translated_source_ip_variable: Variable name
        """
        pulumi.set(__self__, "nat_pool_name", nat_pool_name)
        pulumi.set(__self__, "nat_pool_name_variable", nat_pool_name_variable)
        pulumi.set(__self__, "protocol", protocol)
        pulumi.set(__self__, "protocol_variable", protocol_variable)
        pulumi.set(__self__, "source_ip", source_ip)
        pulumi.set(__self__, "source_ip_variable", source_ip_variable)
        pulumi.set(__self__, "source_port", source_port)
        pulumi.set(__self__, "source_port_variable", source_port_variable)
        pulumi.set(__self__, "translate_port", translate_port)
        pulumi.set(__self__, "translate_port_variable", translate_port_variable)
        pulumi.set(__self__, "translated_source_ip", translated_source_ip)
        pulumi.set(__self__, "translated_source_ip_variable", translated_source_ip_variable)

    @_builtins.property
    @pulumi.getter(name="natPoolName")
    def nat_pool_name(self) -> _builtins.int:
        """
        NAT Pool Name
        """
        return pulumi.get(self, "nat_pool_name")

    @_builtins.property
    @pulumi.getter(name="natPoolNameVariable")
    def nat_pool_name_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "nat_pool_name_variable")

    @_builtins.property
    @pulumi.getter
    def protocol(self) -> _builtins.str:
        """
        Protocol
        """
        return pulumi.get(self, "protocol")

    @_builtins.property
    @pulumi.getter(name="protocolVariable")
    def protocol_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "protocol_variable")

    @_builtins.property
    @pulumi.getter(name="sourceIp")
    def source_ip(self) -> _builtins.str:
        """
        Source IP Address
        """
        return pulumi.get(self, "source_ip")

    @_builtins.property
    @pulumi.getter(name="sourceIpVariable")
    def source_ip_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "source_ip_variable")

    @_builtins.property
    @pulumi.getter(name="sourcePort")
    def source_port(self) -> _builtins.int:
        """
        Source Port
        """
        return pulumi.get(self, "source_port")

    @_builtins.property
    @pulumi.getter(name="sourcePortVariable")
    def source_port_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "source_port_variable")

    @_builtins.property
    @pulumi.getter(name="translatePort")
    def translate_port(self) -> _builtins.int:
        """
        Translate Port
        """
        return pulumi.get(self, "translate_port")

    @_builtins.property
    @pulumi.getter(name="translatePortVariable")
    def translate_port_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "translate_port_variable")

    @_builtins.property
    @pulumi.getter(name="translatedSourceIp")
    def translated_source_ip(self) -> _builtins.str:
        """
        Translated Source IP Address
        """
        return pulumi.get(self, "translated_source_ip")

    @_builtins.property
    @pulumi.getter(name="translatedSourceIpVariable")
    def translated_source_ip_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "translated_source_ip_variable")


@pulumi.output_type
class GetServiceLanVpnFeatureRouteLeakFromGlobalVpnResult(dict):
    def __init__(__self__, *,
                 redistributions: Sequence['outputs.GetServiceLanVpnFeatureRouteLeakFromGlobalVpnRedistributionResult'],
                 route_policy_id: _builtins.str,
                 route_protocol: _builtins.str,
                 route_protocol_variable: _builtins.str):
        """
        :param Sequence['GetServiceLanVpnFeatureRouteLeakFromGlobalVpnRedistributionArgs'] redistributions: Redistribute Routes to specific Protocol on Service VPN
        :param _builtins.str route_protocol: Leak Routes of particular protocol from Global to Service VPN
        :param _builtins.str route_protocol_variable: Variable name
        """
        pulumi.set(__self__, "redistributions", redistributions)
        pulumi.set(__self__, "route_policy_id", route_policy_id)
        pulumi.set(__self__, "route_protocol", route_protocol)
        pulumi.set(__self__, "route_protocol_variable", route_protocol_variable)

    @_builtins.property
    @pulumi.getter
    def redistributions(self) -> Sequence['outputs.GetServiceLanVpnFeatureRouteLeakFromGlobalVpnRedistributionResult']:
        """
        Redistribute Routes to specific Protocol on Service VPN
        """
        return pulumi.get(self, "redistributions")

    @_builtins.property
    @pulumi.getter(name="routePolicyId")
    def route_policy_id(self) -> _builtins.str:
        return pulumi.get(self, "route_policy_id")

    @_builtins.property
    @pulumi.getter(name="routeProtocol")
    def route_protocol(self) -> _builtins.str:
        """
        Leak Routes of particular protocol from Global to Service VPN
        """
        return pulumi.get(self, "route_protocol")

    @_builtins.property
    @pulumi.getter(name="routeProtocolVariable")
    def route_protocol_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "route_protocol_variable")


@pulumi.output_type
class GetServiceLanVpnFeatureRouteLeakFromGlobalVpnRedistributionResult(dict):
    def __init__(__self__, *,
                 protocol: _builtins.str,
                 protocol_variable: _builtins.str,
                 redistribution_policy_id: _builtins.str):
        """
        :param _builtins.str protocol: Protocol to restributed leaked routes
        :param _builtins.str protocol_variable: Variable name
        """
        pulumi.set(__self__, "protocol", protocol)
        pulumi.set(__self__, "protocol_variable", protocol_variable)
        pulumi.set(__self__, "redistribution_policy_id", redistribution_policy_id)

    @_builtins.property
    @pulumi.getter
    def protocol(self) -> _builtins.str:
        """
        Protocol to restributed leaked routes
        """
        return pulumi.get(self, "protocol")

    @_builtins.property
    @pulumi.getter(name="protocolVariable")
    def protocol_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "protocol_variable")

    @_builtins.property
    @pulumi.getter(name="redistributionPolicyId")
    def redistribution_policy_id(self) -> _builtins.str:
        return pulumi.get(self, "redistribution_policy_id")


@pulumi.output_type
class GetServiceLanVpnFeatureRouteLeakFromOtherServiceResult(dict):
    def __init__(__self__, *,
                 redistributions: Sequence['outputs.GetServiceLanVpnFeatureRouteLeakFromOtherServiceRedistributionResult'],
                 route_policy_id: _builtins.str,
                 route_protocol: _builtins.str,
                 route_protocol_variable: _builtins.str,
                 source_vpn: _builtins.int,
                 source_vpn_variable: _builtins.str):
        """
        :param Sequence['GetServiceLanVpnFeatureRouteLeakFromOtherServiceRedistributionArgs'] redistributions: Redistribute Route to specific Protocol on Current Service VPN
        :param _builtins.str route_protocol: Leak Route of particular protocol from Source Service VPN
        :param _builtins.str route_protocol_variable: Variable name
        :param _builtins.int source_vpn: Source Service VPN from where route are to be leaked
        :param _builtins.str source_vpn_variable: Variable name
        """
        pulumi.set(__self__, "redistributions", redistributions)
        pulumi.set(__self__, "route_policy_id", route_policy_id)
        pulumi.set(__self__, "route_protocol", route_protocol)
        pulumi.set(__self__, "route_protocol_variable", route_protocol_variable)
        pulumi.set(__self__, "source_vpn", source_vpn)
        pulumi.set(__self__, "source_vpn_variable", source_vpn_variable)

    @_builtins.property
    @pulumi.getter
    def redistributions(self) -> Sequence['outputs.GetServiceLanVpnFeatureRouteLeakFromOtherServiceRedistributionResult']:
        """
        Redistribute Route to specific Protocol on Current Service VPN
        """
        return pulumi.get(self, "redistributions")

    @_builtins.property
    @pulumi.getter(name="routePolicyId")
    def route_policy_id(self) -> _builtins.str:
        return pulumi.get(self, "route_policy_id")

    @_builtins.property
    @pulumi.getter(name="routeProtocol")
    def route_protocol(self) -> _builtins.str:
        """
        Leak Route of particular protocol from Source Service VPN
        """
        return pulumi.get(self, "route_protocol")

    @_builtins.property
    @pulumi.getter(name="routeProtocolVariable")
    def route_protocol_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "route_protocol_variable")

    @_builtins.property
    @pulumi.getter(name="sourceVpn")
    def source_vpn(self) -> _builtins.int:
        """
        Source Service VPN from where route are to be leaked
        """
        return pulumi.get(self, "source_vpn")

    @_builtins.property
    @pulumi.getter(name="sourceVpnVariable")
    def source_vpn_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "source_vpn_variable")


@pulumi.output_type
class GetServiceLanVpnFeatureRouteLeakFromOtherServiceRedistributionResult(dict):
    def __init__(__self__, *,
                 protocol: _builtins.str,
                 protocol_variable: _builtins.str,
                 redistribution_policy_id: _builtins.str):
        """
        :param _builtins.str protocol: Protocol to restributed leaked routes
        :param _builtins.str protocol_variable: Variable name
        """
        pulumi.set(__self__, "protocol", protocol)
        pulumi.set(__self__, "protocol_variable", protocol_variable)
        pulumi.set(__self__, "redistribution_policy_id", redistribution_policy_id)

    @_builtins.property
    @pulumi.getter
    def protocol(self) -> _builtins.str:
        """
        Protocol to restributed leaked routes
        """
        return pulumi.get(self, "protocol")

    @_builtins.property
    @pulumi.getter(name="protocolVariable")
    def protocol_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "protocol_variable")

    @_builtins.property
    @pulumi.getter(name="redistributionPolicyId")
    def redistribution_policy_id(self) -> _builtins.str:
        return pulumi.get(self, "redistribution_policy_id")


@pulumi.output_type
class GetServiceLanVpnFeatureRouteLeakToGlobalVpnResult(dict):
    def __init__(__self__, *,
                 redistributions: Sequence['outputs.GetServiceLanVpnFeatureRouteLeakToGlobalVpnRedistributionResult'],
                 route_policy_id: _builtins.str,
                 route_protocol: _builtins.str,
                 route_protocol_variable: _builtins.str):
        """
        :param Sequence['GetServiceLanVpnFeatureRouteLeakToGlobalVpnRedistributionArgs'] redistributions: Redistribute Routes to specific Protocol on Global VPN
        :param _builtins.str route_protocol: Leak Routes of particular protocol from Service to Global VPN
        :param _builtins.str route_protocol_variable: Variable name
        """
        pulumi.set(__self__, "redistributions", redistributions)
        pulumi.set(__self__, "route_policy_id", route_policy_id)
        pulumi.set(__self__, "route_protocol", route_protocol)
        pulumi.set(__self__, "route_protocol_variable", route_protocol_variable)

    @_builtins.property
    @pulumi.getter
    def redistributions(self) -> Sequence['outputs.GetServiceLanVpnFeatureRouteLeakToGlobalVpnRedistributionResult']:
        """
        Redistribute Routes to specific Protocol on Global VPN
        """
        return pulumi.get(self, "redistributions")

    @_builtins.property
    @pulumi.getter(name="routePolicyId")
    def route_policy_id(self) -> _builtins.str:
        return pulumi.get(self, "route_policy_id")

    @_builtins.property
    @pulumi.getter(name="routeProtocol")
    def route_protocol(self) -> _builtins.str:
        """
        Leak Routes of particular protocol from Service to Global VPN
        """
        return pulumi.get(self, "route_protocol")

    @_builtins.property
    @pulumi.getter(name="routeProtocolVariable")
    def route_protocol_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "route_protocol_variable")


@pulumi.output_type
class GetServiceLanVpnFeatureRouteLeakToGlobalVpnRedistributionResult(dict):
    def __init__(__self__, *,
                 protocol: _builtins.str,
                 protocol_variable: _builtins.str,
                 redistribution_policy_id: _builtins.str):
        """
        :param _builtins.str protocol: Protocol to restributed leaked routes
        :param _builtins.str protocol_variable: Variable name
        """
        pulumi.set(__self__, "protocol", protocol)
        pulumi.set(__self__, "protocol_variable", protocol_variable)
        pulumi.set(__self__, "redistribution_policy_id", redistribution_policy_id)

    @_builtins.property
    @pulumi.getter
    def protocol(self) -> _builtins.str:
        """
        Protocol to restributed leaked routes
        """
        return pulumi.get(self, "protocol")

    @_builtins.property
    @pulumi.getter(name="protocolVariable")
    def protocol_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "protocol_variable")

    @_builtins.property
    @pulumi.getter(name="redistributionPolicyId")
    def redistribution_policy_id(self) -> _builtins.str:
        return pulumi.get(self, "redistribution_policy_id")


@pulumi.output_type
class GetServiceLanVpnFeatureServiceResult(dict):
    def __init__(__self__, *,
                 ipv4_addresses: Sequence[_builtins.str],
                 ipv4_addresses_variable: _builtins.str,
                 service_type: _builtins.str,
                 service_type_variable: _builtins.str,
                 tracking: _builtins.bool,
                 tracking_variable: _builtins.str):
        """
        :param Sequence[_builtins.str] ipv4_addresses: IPv4 Addresses (Maximum: 4)
        :param _builtins.str ipv4_addresses_variable: Variable name
        :param _builtins.str service_type: Service Type
        :param _builtins.str service_type_variable: Variable name
        :param _builtins.bool tracking: Tracking
        :param _builtins.str tracking_variable: Variable name
        """
        pulumi.set(__self__, "ipv4_addresses", ipv4_addresses)
        pulumi.set(__self__, "ipv4_addresses_variable", ipv4_addresses_variable)
        pulumi.set(__self__, "service_type", service_type)
        pulumi.set(__self__, "service_type_variable", service_type_variable)
        pulumi.set(__self__, "tracking", tracking)
        pulumi.set(__self__, "tracking_variable", tracking_variable)

    @_builtins.property
    @pulumi.getter(name="ipv4Addresses")
    def ipv4_addresses(self) -> Sequence[_builtins.str]:
        """
        IPv4 Addresses (Maximum: 4)
        """
        return pulumi.get(self, "ipv4_addresses")

    @_builtins.property
    @pulumi.getter(name="ipv4AddressesVariable")
    def ipv4_addresses_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "ipv4_addresses_variable")

    @_builtins.property
    @pulumi.getter(name="serviceType")
    def service_type(self) -> _builtins.str:
        """
        Service Type
        """
        return pulumi.get(self, "service_type")

    @_builtins.property
    @pulumi.getter(name="serviceTypeVariable")
    def service_type_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "service_type_variable")

    @_builtins.property
    @pulumi.getter
    def tracking(self) -> _builtins.bool:
        """
        Tracking
        """
        return pulumi.get(self, "tracking")

    @_builtins.property
    @pulumi.getter(name="trackingVariable")
    def tracking_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "tracking_variable")


@pulumi.output_type
class GetServiceLanVpnFeatureServiceRouteResult(dict):
    def __init__(__self__, *,
                 network_address: _builtins.str,
                 network_address_variable: _builtins.str,
                 service: _builtins.str,
                 service_variable: _builtins.str,
                 subnet_mask: _builtins.str,
                 subnet_mask_variable: _builtins.str,
                 vpn: _builtins.int):
        """
        :param _builtins.str network_address: IP Address
        :param _builtins.str network_address_variable: Variable name
        :param _builtins.str service: Service
        :param _builtins.str service_variable: Variable name
        :param _builtins.str subnet_mask: Subnet Mask
        :param _builtins.str subnet_mask_variable: Variable name
        :param _builtins.int vpn: Service
        """
        pulumi.set(__self__, "network_address", network_address)
        pulumi.set(__self__, "network_address_variable", network_address_variable)
        pulumi.set(__self__, "service", service)
        pulumi.set(__self__, "service_variable", service_variable)
        pulumi.set(__self__, "subnet_mask", subnet_mask)
        pulumi.set(__self__, "subnet_mask_variable", subnet_mask_variable)
        pulumi.set(__self__, "vpn", vpn)

    @_builtins.property
    @pulumi.getter(name="networkAddress")
    def network_address(self) -> _builtins.str:
        """
        IP Address
        """
        return pulumi.get(self, "network_address")

    @_builtins.property
    @pulumi.getter(name="networkAddressVariable")
    def network_address_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "network_address_variable")

    @_builtins.property
    @pulumi.getter
    def service(self) -> _builtins.str:
        """
        Service
        """
        return pulumi.get(self, "service")

    @_builtins.property
    @pulumi.getter(name="serviceVariable")
    def service_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "service_variable")

    @_builtins.property
    @pulumi.getter(name="subnetMask")
    def subnet_mask(self) -> _builtins.str:
        """
        Subnet Mask
        """
        return pulumi.get(self, "subnet_mask")

    @_builtins.property
    @pulumi.getter(name="subnetMaskVariable")
    def subnet_mask_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "subnet_mask_variable")

    @_builtins.property
    @pulumi.getter
    def vpn(self) -> _builtins.int:
        """
        Service
        """
        return pulumi.get(self, "vpn")


@pulumi.output_type
class GetServiceLanVpnFeatureStaticNatResult(dict):
    def __init__(__self__, *,
                 nat_pool_name: _builtins.int,
                 nat_pool_name_variable: _builtins.str,
                 source_ip: _builtins.str,
                 source_ip_variable: _builtins.str,
                 static_nat_direction: _builtins.str,
                 static_nat_direction_variable: _builtins.str,
                 tracker_object_id: _builtins.str,
                 translated_source_ip: _builtins.str,
                 translated_source_ip_variable: _builtins.str):
        """
        :param _builtins.int nat_pool_name: NAT Pool Name
        :param _builtins.str nat_pool_name_variable: Variable name
        :param _builtins.str source_ip: Source IP Address
        :param _builtins.str source_ip_variable: Variable name
        :param _builtins.str static_nat_direction: Static NAT Direction
        :param _builtins.str static_nat_direction_variable: Variable name
        :param _builtins.str translated_source_ip: Translated Source IP Address
        :param _builtins.str translated_source_ip_variable: Variable name
        """
        pulumi.set(__self__, "nat_pool_name", nat_pool_name)
        pulumi.set(__self__, "nat_pool_name_variable", nat_pool_name_variable)
        pulumi.set(__self__, "source_ip", source_ip)
        pulumi.set(__self__, "source_ip_variable", source_ip_variable)
        pulumi.set(__self__, "static_nat_direction", static_nat_direction)
        pulumi.set(__self__, "static_nat_direction_variable", static_nat_direction_variable)
        pulumi.set(__self__, "tracker_object_id", tracker_object_id)
        pulumi.set(__self__, "translated_source_ip", translated_source_ip)
        pulumi.set(__self__, "translated_source_ip_variable", translated_source_ip_variable)

    @_builtins.property
    @pulumi.getter(name="natPoolName")
    def nat_pool_name(self) -> _builtins.int:
        """
        NAT Pool Name
        """
        return pulumi.get(self, "nat_pool_name")

    @_builtins.property
    @pulumi.getter(name="natPoolNameVariable")
    def nat_pool_name_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "nat_pool_name_variable")

    @_builtins.property
    @pulumi.getter(name="sourceIp")
    def source_ip(self) -> _builtins.str:
        """
        Source IP Address
        """
        return pulumi.get(self, "source_ip")

    @_builtins.property
    @pulumi.getter(name="sourceIpVariable")
    def source_ip_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "source_ip_variable")

    @_builtins.property
    @pulumi.getter(name="staticNatDirection")
    def static_nat_direction(self) -> _builtins.str:
        """
        Static NAT Direction
        """
        return pulumi.get(self, "static_nat_direction")

    @_builtins.property
    @pulumi.getter(name="staticNatDirectionVariable")
    def static_nat_direction_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "static_nat_direction_variable")

    @_builtins.property
    @pulumi.getter(name="trackerObjectId")
    def tracker_object_id(self) -> _builtins.str:
        return pulumi.get(self, "tracker_object_id")

    @_builtins.property
    @pulumi.getter(name="translatedSourceIp")
    def translated_source_ip(self) -> _builtins.str:
        """
        Translated Source IP Address
        """
        return pulumi.get(self, "translated_source_ip")

    @_builtins.property
    @pulumi.getter(name="translatedSourceIpVariable")
    def translated_source_ip_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "translated_source_ip_variable")


@pulumi.output_type
class GetServiceLanVpnInterfaceEthernetFeatureArpResult(dict):
    def __init__(__self__, *,
                 ip_address: _builtins.str,
                 ip_address_variable: _builtins.str,
                 mac_address: _builtins.str,
                 mac_address_variable: _builtins.str):
        """
        :param _builtins.str ip_address: IPV4 Address
        :param _builtins.str ip_address_variable: Variable name
        :param _builtins.str mac_address: MAC Address
        :param _builtins.str mac_address_variable: Variable name
        """
        pulumi.set(__self__, "ip_address", ip_address)
        pulumi.set(__self__, "ip_address_variable", ip_address_variable)
        pulumi.set(__self__, "mac_address", mac_address)
        pulumi.set(__self__, "mac_address_variable", mac_address_variable)

    @_builtins.property
    @pulumi.getter(name="ipAddress")
    def ip_address(self) -> _builtins.str:
        """
        IPV4 Address
        """
        return pulumi.get(self, "ip_address")

    @_builtins.property
    @pulumi.getter(name="ipAddressVariable")
    def ip_address_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "ip_address_variable")

    @_builtins.property
    @pulumi.getter(name="macAddress")
    def mac_address(self) -> _builtins.str:
        """
        MAC Address
        """
        return pulumi.get(self, "mac_address")

    @_builtins.property
    @pulumi.getter(name="macAddressVariable")
    def mac_address_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "mac_address_variable")


@pulumi.output_type
class GetServiceLanVpnInterfaceEthernetFeatureIpv4SecondaryAddressResult(dict):
    def __init__(__self__, *,
                 address: _builtins.str,
                 address_variable: _builtins.str,
                 subnet_mask: _builtins.str,
                 subnet_mask_variable: _builtins.str):
        """
        :param _builtins.str address: IpV4 Address
        :param _builtins.str address_variable: Variable name
        :param _builtins.str subnet_mask: Subnet Mask
        :param _builtins.str subnet_mask_variable: Variable name
        """
        pulumi.set(__self__, "address", address)
        pulumi.set(__self__, "address_variable", address_variable)
        pulumi.set(__self__, "subnet_mask", subnet_mask)
        pulumi.set(__self__, "subnet_mask_variable", subnet_mask_variable)

    @_builtins.property
    @pulumi.getter
    def address(self) -> _builtins.str:
        """
        IpV4 Address
        """
        return pulumi.get(self, "address")

    @_builtins.property
    @pulumi.getter(name="addressVariable")
    def address_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "address_variable")

    @_builtins.property
    @pulumi.getter(name="subnetMask")
    def subnet_mask(self) -> _builtins.str:
        """
        Subnet Mask
        """
        return pulumi.get(self, "subnet_mask")

    @_builtins.property
    @pulumi.getter(name="subnetMaskVariable")
    def subnet_mask_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "subnet_mask_variable")


@pulumi.output_type
class GetServiceLanVpnInterfaceEthernetFeatureIpv4VrrpResult(dict):
    def __init__(__self__, *,
                 address: _builtins.str,
                 address_variable: _builtins.str,
                 group_id: _builtins.int,
                 group_id_variable: _builtins.str,
                 priority: _builtins.int,
                 priority_variable: _builtins.str,
                 secondary_addresses: Sequence['outputs.GetServiceLanVpnInterfaceEthernetFeatureIpv4VrrpSecondaryAddressResult'],
                 timer: _builtins.int,
                 timer_variable: _builtins.str,
                 tloc_pref_change_value: _builtins.int,
                 tloc_prefix_change: _builtins.bool,
                 track_omp: _builtins.bool,
                 tracking_objects: Sequence['outputs.GetServiceLanVpnInterfaceEthernetFeatureIpv4VrrpTrackingObjectResult']):
        """
        :param _builtins.str address: VRRP Ip Address
        :param _builtins.str address_variable: Variable name
        :param _builtins.int group_id: Group ID
        :param _builtins.str group_id_variable: Variable name
        :param _builtins.int priority: Set priority
        :param _builtins.str priority_variable: Variable name
        :param Sequence['GetServiceLanVpnInterfaceEthernetFeatureIpv4VrrpSecondaryAddressArgs'] secondary_addresses: VRRP Secondary Ip Addresses
        :param _builtins.int timer: Timer interval for successive advertisements, in milliseconds
        :param _builtins.str timer_variable: Variable name
        :param _builtins.int tloc_pref_change_value: Timer interval for successive advertisements, in milliseconds
        :param _builtins.bool tloc_prefix_change: Timer interval for successive advertisements, in milliseconds
        :param _builtins.bool track_omp: Track OMP status
        :param Sequence['GetServiceLanVpnInterfaceEthernetFeatureIpv4VrrpTrackingObjectArgs'] tracking_objects: Tracking object for VRRP configuration
        """
        pulumi.set(__self__, "address", address)
        pulumi.set(__self__, "address_variable", address_variable)
        pulumi.set(__self__, "group_id", group_id)
        pulumi.set(__self__, "group_id_variable", group_id_variable)
        pulumi.set(__self__, "priority", priority)
        pulumi.set(__self__, "priority_variable", priority_variable)
        pulumi.set(__self__, "secondary_addresses", secondary_addresses)
        pulumi.set(__self__, "timer", timer)
        pulumi.set(__self__, "timer_variable", timer_variable)
        pulumi.set(__self__, "tloc_pref_change_value", tloc_pref_change_value)
        pulumi.set(__self__, "tloc_prefix_change", tloc_prefix_change)
        pulumi.set(__self__, "track_omp", track_omp)
        pulumi.set(__self__, "tracking_objects", tracking_objects)

    @_builtins.property
    @pulumi.getter
    def address(self) -> _builtins.str:
        """
        VRRP Ip Address
        """
        return pulumi.get(self, "address")

    @_builtins.property
    @pulumi.getter(name="addressVariable")
    def address_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "address_variable")

    @_builtins.property
    @pulumi.getter(name="groupId")
    def group_id(self) -> _builtins.int:
        """
        Group ID
        """
        return pulumi.get(self, "group_id")

    @_builtins.property
    @pulumi.getter(name="groupIdVariable")
    def group_id_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "group_id_variable")

    @_builtins.property
    @pulumi.getter
    def priority(self) -> _builtins.int:
        """
        Set priority
        """
        return pulumi.get(self, "priority")

    @_builtins.property
    @pulumi.getter(name="priorityVariable")
    def priority_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "priority_variable")

    @_builtins.property
    @pulumi.getter(name="secondaryAddresses")
    def secondary_addresses(self) -> Sequence['outputs.GetServiceLanVpnInterfaceEthernetFeatureIpv4VrrpSecondaryAddressResult']:
        """
        VRRP Secondary Ip Addresses
        """
        return pulumi.get(self, "secondary_addresses")

    @_builtins.property
    @pulumi.getter
    def timer(self) -> _builtins.int:
        """
        Timer interval for successive advertisements, in milliseconds
        """
        return pulumi.get(self, "timer")

    @_builtins.property
    @pulumi.getter(name="timerVariable")
    def timer_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "timer_variable")

    @_builtins.property
    @pulumi.getter(name="tlocPrefChangeValue")
    def tloc_pref_change_value(self) -> _builtins.int:
        """
        Timer interval for successive advertisements, in milliseconds
        """
        return pulumi.get(self, "tloc_pref_change_value")

    @_builtins.property
    @pulumi.getter(name="tlocPrefixChange")
    def tloc_prefix_change(self) -> _builtins.bool:
        """
        Timer interval for successive advertisements, in milliseconds
        """
        return pulumi.get(self, "tloc_prefix_change")

    @_builtins.property
    @pulumi.getter(name="trackOmp")
    def track_omp(self) -> _builtins.bool:
        """
        Track OMP status
        """
        return pulumi.get(self, "track_omp")

    @_builtins.property
    @pulumi.getter(name="trackingObjects")
    def tracking_objects(self) -> Sequence['outputs.GetServiceLanVpnInterfaceEthernetFeatureIpv4VrrpTrackingObjectResult']:
        """
        Tracking object for VRRP configuration
        """
        return pulumi.get(self, "tracking_objects")


@pulumi.output_type
class GetServiceLanVpnInterfaceEthernetFeatureIpv4VrrpSecondaryAddressResult(dict):
    def __init__(__self__, *,
                 address: _builtins.str,
                 address_variable: _builtins.str,
                 subnet_mask: _builtins.str,
                 subnet_mask_variable: _builtins.str):
        """
        :param _builtins.str address: Ip Address
        :param _builtins.str address_variable: Variable name
        :param _builtins.str subnet_mask: Subnet Mask
        :param _builtins.str subnet_mask_variable: Variable name
        """
        pulumi.set(__self__, "address", address)
        pulumi.set(__self__, "address_variable", address_variable)
        pulumi.set(__self__, "subnet_mask", subnet_mask)
        pulumi.set(__self__, "subnet_mask_variable", subnet_mask_variable)

    @_builtins.property
    @pulumi.getter
    def address(self) -> _builtins.str:
        """
        Ip Address
        """
        return pulumi.get(self, "address")

    @_builtins.property
    @pulumi.getter(name="addressVariable")
    def address_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "address_variable")

    @_builtins.property
    @pulumi.getter(name="subnetMask")
    def subnet_mask(self) -> _builtins.str:
        """
        Subnet Mask
        """
        return pulumi.get(self, "subnet_mask")

    @_builtins.property
    @pulumi.getter(name="subnetMaskVariable")
    def subnet_mask_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "subnet_mask_variable")


@pulumi.output_type
class GetServiceLanVpnInterfaceEthernetFeatureIpv4VrrpTrackingObjectResult(dict):
    def __init__(__self__, *,
                 decrement_value: _builtins.int,
                 decrement_value_variable: _builtins.str,
                 tracker_action: _builtins.str,
                 tracker_action_variable: _builtins.str,
                 tracker_id: _builtins.str):
        """
        :param _builtins.int decrement_value: Decrement Value for VRRP priority
        :param _builtins.str decrement_value_variable: Variable name
        :param _builtins.str tracker_action: Track Action
        :param _builtins.str tracker_action_variable: Variable name
        """
        pulumi.set(__self__, "decrement_value", decrement_value)
        pulumi.set(__self__, "decrement_value_variable", decrement_value_variable)
        pulumi.set(__self__, "tracker_action", tracker_action)
        pulumi.set(__self__, "tracker_action_variable", tracker_action_variable)
        pulumi.set(__self__, "tracker_id", tracker_id)

    @_builtins.property
    @pulumi.getter(name="decrementValue")
    def decrement_value(self) -> _builtins.int:
        """
        Decrement Value for VRRP priority
        """
        return pulumi.get(self, "decrement_value")

    @_builtins.property
    @pulumi.getter(name="decrementValueVariable")
    def decrement_value_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "decrement_value_variable")

    @_builtins.property
    @pulumi.getter(name="trackerAction")
    def tracker_action(self) -> _builtins.str:
        """
        Track Action
        """
        return pulumi.get(self, "tracker_action")

    @_builtins.property
    @pulumi.getter(name="trackerActionVariable")
    def tracker_action_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "tracker_action_variable")

    @_builtins.property
    @pulumi.getter(name="trackerId")
    def tracker_id(self) -> _builtins.str:
        return pulumi.get(self, "tracker_id")


@pulumi.output_type
class GetServiceLanVpnInterfaceEthernetFeatureIpv6DhcpHelperResult(dict):
    def __init__(__self__, *,
                 address: _builtins.str,
                 address_variable: _builtins.str,
                 dhcpv6_helper_vpn: _builtins.int,
                 dhcpv6_helper_vpn_variable: _builtins.str):
        """
        :param _builtins.str address: DHCPv6 Helper address
        :param _builtins.str address_variable: Variable name
        :param _builtins.int dhcpv6_helper_vpn: DHCPv6 Helper VPN
        :param _builtins.str dhcpv6_helper_vpn_variable: Variable name
        """
        pulumi.set(__self__, "address", address)
        pulumi.set(__self__, "address_variable", address_variable)
        pulumi.set(__self__, "dhcpv6_helper_vpn", dhcpv6_helper_vpn)
        pulumi.set(__self__, "dhcpv6_helper_vpn_variable", dhcpv6_helper_vpn_variable)

    @_builtins.property
    @pulumi.getter
    def address(self) -> _builtins.str:
        """
        DHCPv6 Helper address
        """
        return pulumi.get(self, "address")

    @_builtins.property
    @pulumi.getter(name="addressVariable")
    def address_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "address_variable")

    @_builtins.property
    @pulumi.getter(name="dhcpv6HelperVpn")
    def dhcpv6_helper_vpn(self) -> _builtins.int:
        """
        DHCPv6 Helper VPN
        """
        return pulumi.get(self, "dhcpv6_helper_vpn")

    @_builtins.property
    @pulumi.getter(name="dhcpv6HelperVpnVariable")
    def dhcpv6_helper_vpn_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "dhcpv6_helper_vpn_variable")


@pulumi.output_type
class GetServiceLanVpnInterfaceEthernetFeatureIpv6DhcpSecondaryAddressResult(dict):
    def __init__(__self__, *,
                 address: _builtins.str,
                 address_variable: _builtins.str):
        """
        :param _builtins.str address: IPv6 Address Secondary
        :param _builtins.str address_variable: Variable name
        """
        pulumi.set(__self__, "address", address)
        pulumi.set(__self__, "address_variable", address_variable)

    @_builtins.property
    @pulumi.getter
    def address(self) -> _builtins.str:
        """
        IPv6 Address Secondary
        """
        return pulumi.get(self, "address")

    @_builtins.property
    @pulumi.getter(name="addressVariable")
    def address_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "address_variable")


@pulumi.output_type
class GetServiceLanVpnInterfaceEthernetFeatureIpv6SecondaryAddressResult(dict):
    def __init__(__self__, *,
                 address: _builtins.str,
                 address_variable: _builtins.str):
        """
        :param _builtins.str address: IPv6 Address Secondary
        :param _builtins.str address_variable: Variable name
        """
        pulumi.set(__self__, "address", address)
        pulumi.set(__self__, "address_variable", address_variable)

    @_builtins.property
    @pulumi.getter
    def address(self) -> _builtins.str:
        """
        IPv6 Address Secondary
        """
        return pulumi.get(self, "address")

    @_builtins.property
    @pulumi.getter(name="addressVariable")
    def address_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "address_variable")


@pulumi.output_type
class GetServiceLanVpnInterfaceEthernetFeatureIpv6VrrpResult(dict):
    def __init__(__self__, *,
                 group_id: _builtins.int,
                 group_id_variable: _builtins.str,
                 ipv6_addresses: Sequence['outputs.GetServiceLanVpnInterfaceEthernetFeatureIpv6VrrpIpv6AddressResult'],
                 priority: _builtins.int,
                 priority_variable: _builtins.str,
                 timer: _builtins.int,
                 timer_variable: _builtins.str,
                 track_omp: _builtins.bool):
        """
        :param _builtins.int group_id: Group ID
        :param _builtins.str group_id_variable: Variable name
        :param Sequence['GetServiceLanVpnInterfaceEthernetFeatureIpv6VrrpIpv6AddressArgs'] ipv6_addresses: IPv6 VRRP
        :param _builtins.int priority: Set priority
        :param _builtins.str priority_variable: Variable name
        :param _builtins.int timer: Timer interval for successive advertisements, in milliseconds
        :param _builtins.str timer_variable: Variable name
        :param _builtins.bool track_omp: Track OMP status
        """
        pulumi.set(__self__, "group_id", group_id)
        pulumi.set(__self__, "group_id_variable", group_id_variable)
        pulumi.set(__self__, "ipv6_addresses", ipv6_addresses)
        pulumi.set(__self__, "priority", priority)
        pulumi.set(__self__, "priority_variable", priority_variable)
        pulumi.set(__self__, "timer", timer)
        pulumi.set(__self__, "timer_variable", timer_variable)
        pulumi.set(__self__, "track_omp", track_omp)

    @_builtins.property
    @pulumi.getter(name="groupId")
    def group_id(self) -> _builtins.int:
        """
        Group ID
        """
        return pulumi.get(self, "group_id")

    @_builtins.property
    @pulumi.getter(name="groupIdVariable")
    def group_id_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "group_id_variable")

    @_builtins.property
    @pulumi.getter(name="ipv6Addresses")
    def ipv6_addresses(self) -> Sequence['outputs.GetServiceLanVpnInterfaceEthernetFeatureIpv6VrrpIpv6AddressResult']:
        """
        IPv6 VRRP
        """
        return pulumi.get(self, "ipv6_addresses")

    @_builtins.property
    @pulumi.getter
    def priority(self) -> _builtins.int:
        """
        Set priority
        """
        return pulumi.get(self, "priority")

    @_builtins.property
    @pulumi.getter(name="priorityVariable")
    def priority_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "priority_variable")

    @_builtins.property
    @pulumi.getter
    def timer(self) -> _builtins.int:
        """
        Timer interval for successive advertisements, in milliseconds
        """
        return pulumi.get(self, "timer")

    @_builtins.property
    @pulumi.getter(name="timerVariable")
    def timer_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "timer_variable")

    @_builtins.property
    @pulumi.getter(name="trackOmp")
    def track_omp(self) -> _builtins.bool:
        """
        Track OMP status
        """
        return pulumi.get(self, "track_omp")


@pulumi.output_type
class GetServiceLanVpnInterfaceEthernetFeatureIpv6VrrpIpv6AddressResult(dict):
    def __init__(__self__, *,
                 global_address: _builtins.str,
                 global_address_variable: _builtins.str,
                 link_local_address: _builtins.str,
                 link_local_address_variable: _builtins.str):
        """
        :param _builtins.str global_address: Assign Global IPv6 Prefix
        :param _builtins.str global_address_variable: Variable name
        :param _builtins.str link_local_address: Use link-local IPv6 Address
        :param _builtins.str link_local_address_variable: Variable name
        """
        pulumi.set(__self__, "global_address", global_address)
        pulumi.set(__self__, "global_address_variable", global_address_variable)
        pulumi.set(__self__, "link_local_address", link_local_address)
        pulumi.set(__self__, "link_local_address_variable", link_local_address_variable)

    @_builtins.property
    @pulumi.getter(name="globalAddress")
    def global_address(self) -> _builtins.str:
        """
        Assign Global IPv6 Prefix
        """
        return pulumi.get(self, "global_address")

    @_builtins.property
    @pulumi.getter(name="globalAddressVariable")
    def global_address_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "global_address_variable")

    @_builtins.property
    @pulumi.getter(name="linkLocalAddress")
    def link_local_address(self) -> _builtins.str:
        """
        Use link-local IPv6 Address
        """
        return pulumi.get(self, "link_local_address")

    @_builtins.property
    @pulumi.getter(name="linkLocalAddressVariable")
    def link_local_address_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "link_local_address_variable")


@pulumi.output_type
class GetServiceLanVpnInterfaceEthernetFeatureStaticNatResult(dict):
    def __init__(__self__, *,
                 direction: _builtins.str,
                 source_ip: _builtins.str,
                 source_ip_variable: _builtins.str,
                 source_vpn: _builtins.int,
                 source_vpn_variable: _builtins.str,
                 translate_ip: _builtins.str,
                 translate_ip_variable: _builtins.str):
        """
        :param _builtins.str direction: Direction of static NAT translation
        :param _builtins.str source_ip: Source IP address to be translated
        :param _builtins.str source_ip_variable: Variable name
        :param _builtins.int source_vpn: Source VPN ID
        :param _builtins.str source_vpn_variable: Variable name
        :param _builtins.str translate_ip: Statically translated source IP address
        :param _builtins.str translate_ip_variable: Variable name
        """
        pulumi.set(__self__, "direction", direction)
        pulumi.set(__self__, "source_ip", source_ip)
        pulumi.set(__self__, "source_ip_variable", source_ip_variable)
        pulumi.set(__self__, "source_vpn", source_vpn)
        pulumi.set(__self__, "source_vpn_variable", source_vpn_variable)
        pulumi.set(__self__, "translate_ip", translate_ip)
        pulumi.set(__self__, "translate_ip_variable", translate_ip_variable)

    @_builtins.property
    @pulumi.getter
    def direction(self) -> _builtins.str:
        """
        Direction of static NAT translation
        """
        return pulumi.get(self, "direction")

    @_builtins.property
    @pulumi.getter(name="sourceIp")
    def source_ip(self) -> _builtins.str:
        """
        Source IP address to be translated
        """
        return pulumi.get(self, "source_ip")

    @_builtins.property
    @pulumi.getter(name="sourceIpVariable")
    def source_ip_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "source_ip_variable")

    @_builtins.property
    @pulumi.getter(name="sourceVpn")
    def source_vpn(self) -> _builtins.int:
        """
        Source VPN ID
        """
        return pulumi.get(self, "source_vpn")

    @_builtins.property
    @pulumi.getter(name="sourceVpnVariable")
    def source_vpn_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "source_vpn_variable")

    @_builtins.property
    @pulumi.getter(name="translateIp")
    def translate_ip(self) -> _builtins.str:
        """
        Statically translated source IP address
        """
        return pulumi.get(self, "translate_ip")

    @_builtins.property
    @pulumi.getter(name="translateIpVariable")
    def translate_ip_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "translate_ip_variable")


@pulumi.output_type
class GetServiceLanVpnInterfaceSviFeatureArpResult(dict):
    def __init__(__self__, *,
                 ip_address: _builtins.str,
                 ip_address_variable: _builtins.str,
                 mac_address: _builtins.str,
                 mac_address_variable: _builtins.str):
        """
        :param _builtins.str ip_address: IP Address
        :param _builtins.str ip_address_variable: Variable name
        :param _builtins.str mac_address: MAC address
        :param _builtins.str mac_address_variable: Variable name
        """
        pulumi.set(__self__, "ip_address", ip_address)
        pulumi.set(__self__, "ip_address_variable", ip_address_variable)
        pulumi.set(__self__, "mac_address", mac_address)
        pulumi.set(__self__, "mac_address_variable", mac_address_variable)

    @_builtins.property
    @pulumi.getter(name="ipAddress")
    def ip_address(self) -> _builtins.str:
        """
        IP Address
        """
        return pulumi.get(self, "ip_address")

    @_builtins.property
    @pulumi.getter(name="ipAddressVariable")
    def ip_address_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "ip_address_variable")

    @_builtins.property
    @pulumi.getter(name="macAddress")
    def mac_address(self) -> _builtins.str:
        """
        MAC address
        """
        return pulumi.get(self, "mac_address")

    @_builtins.property
    @pulumi.getter(name="macAddressVariable")
    def mac_address_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "mac_address_variable")


@pulumi.output_type
class GetServiceLanVpnInterfaceSviFeatureIpv4SecondaryAddressResult(dict):
    def __init__(__self__, *,
                 address: _builtins.str,
                 address_variable: _builtins.str,
                 ipv4_subnet_mask: _builtins.str,
                 ipv4_subnet_mask_variable: _builtins.str):
        """
        :param _builtins.str address: IpV4 Address
        :param _builtins.str address_variable: Variable name
        :param _builtins.str ipv4_subnet_mask: Subnet Mask
        :param _builtins.str ipv4_subnet_mask_variable: Variable name
        """
        pulumi.set(__self__, "address", address)
        pulumi.set(__self__, "address_variable", address_variable)
        pulumi.set(__self__, "ipv4_subnet_mask", ipv4_subnet_mask)
        pulumi.set(__self__, "ipv4_subnet_mask_variable", ipv4_subnet_mask_variable)

    @_builtins.property
    @pulumi.getter
    def address(self) -> _builtins.str:
        """
        IpV4 Address
        """
        return pulumi.get(self, "address")

    @_builtins.property
    @pulumi.getter(name="addressVariable")
    def address_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "address_variable")

    @_builtins.property
    @pulumi.getter(name="ipv4SubnetMask")
    def ipv4_subnet_mask(self) -> _builtins.str:
        """
        Subnet Mask
        """
        return pulumi.get(self, "ipv4_subnet_mask")

    @_builtins.property
    @pulumi.getter(name="ipv4SubnetMaskVariable")
    def ipv4_subnet_mask_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "ipv4_subnet_mask_variable")


@pulumi.output_type
class GetServiceLanVpnInterfaceSviFeatureIpv4VrrpResult(dict):
    def __init__(__self__, *,
                 address: _builtins.str,
                 address_variable: _builtins.str,
                 group_id: _builtins.int,
                 group_id_variable: _builtins.str,
                 prefix_list: _builtins.str,
                 prefix_list_variable: _builtins.str,
                 priority: _builtins.int,
                 priority_variable: _builtins.str,
                 secondary_addresses: Sequence['outputs.GetServiceLanVpnInterfaceSviFeatureIpv4VrrpSecondaryAddressResult'],
                 timer: _builtins.int,
                 timer_variable: _builtins.str,
                 tloc_prefix_change: _builtins.bool,
                 tloc_prefix_change_value: _builtins.int,
                 tloc_prefix_change_value_variable: _builtins.str,
                 track_omp: _builtins.bool,
                 track_omp_variable: _builtins.str,
                 tracking_objects: Sequence['outputs.GetServiceLanVpnInterfaceSviFeatureIpv4VrrpTrackingObjectResult']):
        """
        :param _builtins.str address: Assign IPV4 Address
        :param _builtins.str address_variable: Variable name
        :param _builtins.int group_id: Group ID
        :param _builtins.str group_id_variable: Variable name
        :param _builtins.str prefix_list: Track Prefix List
        :param _builtins.str prefix_list_variable: Variable name
        :param _builtins.int priority: Set priority
        :param _builtins.str priority_variable: Variable name
        :param Sequence['GetServiceLanVpnInterfaceSviFeatureIpv4VrrpSecondaryAddressArgs'] secondary_addresses: VRRP Secondary IPV4 address
        :param _builtins.int timer: Timer interval for successive advertisements, in milliseconds
        :param _builtins.str timer_variable: Variable name
        :param _builtins.bool tloc_prefix_change: change TLOC preference
        :param _builtins.int tloc_prefix_change_value: Set tloc preference change value
        :param _builtins.str tloc_prefix_change_value_variable: Variable name
        :param _builtins.bool track_omp: Track OMP status
        :param _builtins.str track_omp_variable: Variable name
        :param Sequence['GetServiceLanVpnInterfaceSviFeatureIpv4VrrpTrackingObjectArgs'] tracking_objects: tracking object for VRRP configuration
        """
        pulumi.set(__self__, "address", address)
        pulumi.set(__self__, "address_variable", address_variable)
        pulumi.set(__self__, "group_id", group_id)
        pulumi.set(__self__, "group_id_variable", group_id_variable)
        pulumi.set(__self__, "prefix_list", prefix_list)
        pulumi.set(__self__, "prefix_list_variable", prefix_list_variable)
        pulumi.set(__self__, "priority", priority)
        pulumi.set(__self__, "priority_variable", priority_variable)
        pulumi.set(__self__, "secondary_addresses", secondary_addresses)
        pulumi.set(__self__, "timer", timer)
        pulumi.set(__self__, "timer_variable", timer_variable)
        pulumi.set(__self__, "tloc_prefix_change", tloc_prefix_change)
        pulumi.set(__self__, "tloc_prefix_change_value", tloc_prefix_change_value)
        pulumi.set(__self__, "tloc_prefix_change_value_variable", tloc_prefix_change_value_variable)
        pulumi.set(__self__, "track_omp", track_omp)
        pulumi.set(__self__, "track_omp_variable", track_omp_variable)
        pulumi.set(__self__, "tracking_objects", tracking_objects)

    @_builtins.property
    @pulumi.getter
    def address(self) -> _builtins.str:
        """
        Assign IPV4 Address
        """
        return pulumi.get(self, "address")

    @_builtins.property
    @pulumi.getter(name="addressVariable")
    def address_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "address_variable")

    @_builtins.property
    @pulumi.getter(name="groupId")
    def group_id(self) -> _builtins.int:
        """
        Group ID
        """
        return pulumi.get(self, "group_id")

    @_builtins.property
    @pulumi.getter(name="groupIdVariable")
    def group_id_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "group_id_variable")

    @_builtins.property
    @pulumi.getter(name="prefixList")
    def prefix_list(self) -> _builtins.str:
        """
        Track Prefix List
        """
        return pulumi.get(self, "prefix_list")

    @_builtins.property
    @pulumi.getter(name="prefixListVariable")
    def prefix_list_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "prefix_list_variable")

    @_builtins.property
    @pulumi.getter
    def priority(self) -> _builtins.int:
        """
        Set priority
        """
        return pulumi.get(self, "priority")

    @_builtins.property
    @pulumi.getter(name="priorityVariable")
    def priority_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "priority_variable")

    @_builtins.property
    @pulumi.getter(name="secondaryAddresses")
    def secondary_addresses(self) -> Sequence['outputs.GetServiceLanVpnInterfaceSviFeatureIpv4VrrpSecondaryAddressResult']:
        """
        VRRP Secondary IPV4 address
        """
        return pulumi.get(self, "secondary_addresses")

    @_builtins.property
    @pulumi.getter
    def timer(self) -> _builtins.int:
        """
        Timer interval for successive advertisements, in milliseconds
        """
        return pulumi.get(self, "timer")

    @_builtins.property
    @pulumi.getter(name="timerVariable")
    def timer_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "timer_variable")

    @_builtins.property
    @pulumi.getter(name="tlocPrefixChange")
    def tloc_prefix_change(self) -> _builtins.bool:
        """
        change TLOC preference
        """
        return pulumi.get(self, "tloc_prefix_change")

    @_builtins.property
    @pulumi.getter(name="tlocPrefixChangeValue")
    def tloc_prefix_change_value(self) -> _builtins.int:
        """
        Set tloc preference change value
        """
        return pulumi.get(self, "tloc_prefix_change_value")

    @_builtins.property
    @pulumi.getter(name="tlocPrefixChangeValueVariable")
    def tloc_prefix_change_value_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "tloc_prefix_change_value_variable")

    @_builtins.property
    @pulumi.getter(name="trackOmp")
    def track_omp(self) -> _builtins.bool:
        """
        Track OMP status
        """
        return pulumi.get(self, "track_omp")

    @_builtins.property
    @pulumi.getter(name="trackOmpVariable")
    def track_omp_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "track_omp_variable")

    @_builtins.property
    @pulumi.getter(name="trackingObjects")
    def tracking_objects(self) -> Sequence['outputs.GetServiceLanVpnInterfaceSviFeatureIpv4VrrpTrackingObjectResult']:
        """
        tracking object for VRRP configuration
        """
        return pulumi.get(self, "tracking_objects")


@pulumi.output_type
class GetServiceLanVpnInterfaceSviFeatureIpv4VrrpSecondaryAddressResult(dict):
    def __init__(__self__, *,
                 address: _builtins.str,
                 address_variable: _builtins.str):
        """
        :param _builtins.str address: VRRP Secondary IPV4 address
        :param _builtins.str address_variable: Variable name
        """
        pulumi.set(__self__, "address", address)
        pulumi.set(__self__, "address_variable", address_variable)

    @_builtins.property
    @pulumi.getter
    def address(self) -> _builtins.str:
        """
        VRRP Secondary IPV4 address
        """
        return pulumi.get(self, "address")

    @_builtins.property
    @pulumi.getter(name="addressVariable")
    def address_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "address_variable")


@pulumi.output_type
class GetServiceLanVpnInterfaceSviFeatureIpv4VrrpTrackingObjectResult(dict):
    def __init__(__self__, *,
                 decrement_value: _builtins.int,
                 decrement_value_variable: _builtins.str,
                 track_action: _builtins.str,
                 track_action_variable: _builtins.str,
                 tracker_id: _builtins.str):
        """
        :param _builtins.int decrement_value: Decrement Value for VRRP priority
        :param _builtins.str decrement_value_variable: Variable name
        :param _builtins.str track_action: Track Action
        :param _builtins.str track_action_variable: Variable name
        """
        pulumi.set(__self__, "decrement_value", decrement_value)
        pulumi.set(__self__, "decrement_value_variable", decrement_value_variable)
        pulumi.set(__self__, "track_action", track_action)
        pulumi.set(__self__, "track_action_variable", track_action_variable)
        pulumi.set(__self__, "tracker_id", tracker_id)

    @_builtins.property
    @pulumi.getter(name="decrementValue")
    def decrement_value(self) -> _builtins.int:
        """
        Decrement Value for VRRP priority
        """
        return pulumi.get(self, "decrement_value")

    @_builtins.property
    @pulumi.getter(name="decrementValueVariable")
    def decrement_value_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "decrement_value_variable")

    @_builtins.property
    @pulumi.getter(name="trackAction")
    def track_action(self) -> _builtins.str:
        """
        Track Action
        """
        return pulumi.get(self, "track_action")

    @_builtins.property
    @pulumi.getter(name="trackActionVariable")
    def track_action_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "track_action_variable")

    @_builtins.property
    @pulumi.getter(name="trackerId")
    def tracker_id(self) -> _builtins.str:
        return pulumi.get(self, "tracker_id")


@pulumi.output_type
class GetServiceLanVpnInterfaceSviFeatureIpv6DhcpHelperResult(dict):
    def __init__(__self__, *,
                 address: _builtins.str,
                 address_variable: _builtins.str,
                 vpn: _builtins.int,
                 vpn_variable: _builtins.str):
        """
        :param _builtins.str address: DHCPv6 Helper address
        :param _builtins.str address_variable: Variable name
        :param _builtins.int vpn: DHCPv6 Helper VPN
        :param _builtins.str vpn_variable: Variable name
        """
        pulumi.set(__self__, "address", address)
        pulumi.set(__self__, "address_variable", address_variable)
        pulumi.set(__self__, "vpn", vpn)
        pulumi.set(__self__, "vpn_variable", vpn_variable)

    @_builtins.property
    @pulumi.getter
    def address(self) -> _builtins.str:
        """
        DHCPv6 Helper address
        """
        return pulumi.get(self, "address")

    @_builtins.property
    @pulumi.getter(name="addressVariable")
    def address_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "address_variable")

    @_builtins.property
    @pulumi.getter
    def vpn(self) -> _builtins.int:
        """
        DHCPv6 Helper VPN
        """
        return pulumi.get(self, "vpn")

    @_builtins.property
    @pulumi.getter(name="vpnVariable")
    def vpn_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "vpn_variable")


@pulumi.output_type
class GetServiceLanVpnInterfaceSviFeatureIpv6SecondaryAddressResult(dict):
    def __init__(__self__, *,
                 address: _builtins.str,
                 address_variable: _builtins.str):
        """
        :param _builtins.str address: IPv6 Address
        :param _builtins.str address_variable: Variable name
        """
        pulumi.set(__self__, "address", address)
        pulumi.set(__self__, "address_variable", address_variable)

    @_builtins.property
    @pulumi.getter
    def address(self) -> _builtins.str:
        """
        IPv6 Address
        """
        return pulumi.get(self, "address")

    @_builtins.property
    @pulumi.getter(name="addressVariable")
    def address_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "address_variable")


@pulumi.output_type
class GetServiceLanVpnInterfaceSviFeatureIpv6VrrpResult(dict):
    def __init__(__self__, *,
                 addresses: Sequence['outputs.GetServiceLanVpnInterfaceSviFeatureIpv6VrrpAddressResult'],
                 group_id: _builtins.int,
                 group_id_variable: _builtins.str,
                 priority: _builtins.int,
                 priority_variable: _builtins.str,
                 secondary_addresses: Sequence['outputs.GetServiceLanVpnInterfaceSviFeatureIpv6VrrpSecondaryAddressResult'],
                 timer: _builtins.int,
                 timer_variable: _builtins.str,
                 track_omp: _builtins.bool,
                 track_omp_variable: _builtins.str,
                 track_prefix_list: _builtins.str,
                 track_prefix_list_variable: _builtins.str):
        """
        :param Sequence['GetServiceLanVpnInterfaceSviFeatureIpv6VrrpAddressArgs'] addresses: IPv6 VRRP
        :param _builtins.int group_id: Group ID
        :param _builtins.str group_id_variable: Variable name
        :param _builtins.int priority: Set priority
        :param _builtins.str priority_variable: Variable name
        :param Sequence['GetServiceLanVpnInterfaceSviFeatureIpv6VrrpSecondaryAddressArgs'] secondary_addresses: IPv6 Secondary IP address
        :param _builtins.int timer: Timer interval for successive advertisements, in milliseconds
        :param _builtins.str timer_variable: Variable name
        :param _builtins.bool track_omp: Track OMP status
        :param _builtins.str track_omp_variable: Variable name
        :param _builtins.str track_prefix_list: Track Prefix List
        :param _builtins.str track_prefix_list_variable: Variable name
        """
        pulumi.set(__self__, "addresses", addresses)
        pulumi.set(__self__, "group_id", group_id)
        pulumi.set(__self__, "group_id_variable", group_id_variable)
        pulumi.set(__self__, "priority", priority)
        pulumi.set(__self__, "priority_variable", priority_variable)
        pulumi.set(__self__, "secondary_addresses", secondary_addresses)
        pulumi.set(__self__, "timer", timer)
        pulumi.set(__self__, "timer_variable", timer_variable)
        pulumi.set(__self__, "track_omp", track_omp)
        pulumi.set(__self__, "track_omp_variable", track_omp_variable)
        pulumi.set(__self__, "track_prefix_list", track_prefix_list)
        pulumi.set(__self__, "track_prefix_list_variable", track_prefix_list_variable)

    @_builtins.property
    @pulumi.getter
    def addresses(self) -> Sequence['outputs.GetServiceLanVpnInterfaceSviFeatureIpv6VrrpAddressResult']:
        """
        IPv6 VRRP
        """
        return pulumi.get(self, "addresses")

    @_builtins.property
    @pulumi.getter(name="groupId")
    def group_id(self) -> _builtins.int:
        """
        Group ID
        """
        return pulumi.get(self, "group_id")

    @_builtins.property
    @pulumi.getter(name="groupIdVariable")
    def group_id_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "group_id_variable")

    @_builtins.property
    @pulumi.getter
    def priority(self) -> _builtins.int:
        """
        Set priority
        """
        return pulumi.get(self, "priority")

    @_builtins.property
    @pulumi.getter(name="priorityVariable")
    def priority_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "priority_variable")

    @_builtins.property
    @pulumi.getter(name="secondaryAddresses")
    def secondary_addresses(self) -> Sequence['outputs.GetServiceLanVpnInterfaceSviFeatureIpv6VrrpSecondaryAddressResult']:
        """
        IPv6 Secondary IP address
        """
        return pulumi.get(self, "secondary_addresses")

    @_builtins.property
    @pulumi.getter
    def timer(self) -> _builtins.int:
        """
        Timer interval for successive advertisements, in milliseconds
        """
        return pulumi.get(self, "timer")

    @_builtins.property
    @pulumi.getter(name="timerVariable")
    def timer_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "timer_variable")

    @_builtins.property
    @pulumi.getter(name="trackOmp")
    def track_omp(self) -> _builtins.bool:
        """
        Track OMP status
        """
        return pulumi.get(self, "track_omp")

    @_builtins.property
    @pulumi.getter(name="trackOmpVariable")
    def track_omp_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "track_omp_variable")

    @_builtins.property
    @pulumi.getter(name="trackPrefixList")
    def track_prefix_list(self) -> _builtins.str:
        """
        Track Prefix List
        """
        return pulumi.get(self, "track_prefix_list")

    @_builtins.property
    @pulumi.getter(name="trackPrefixListVariable")
    def track_prefix_list_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "track_prefix_list_variable")


@pulumi.output_type
class GetServiceLanVpnInterfaceSviFeatureIpv6VrrpAddressResult(dict):
    def __init__(__self__, *,
                 global_address: _builtins.str,
                 global_address_variable: _builtins.str,
                 link_local_address: _builtins.str,
                 link_local_address_variable: _builtins.str):
        """
        :param _builtins.str global_address: Assign Global IPv6 Prefix
        :param _builtins.str global_address_variable: Variable name
        :param _builtins.str link_local_address: Use link-local IPv6 Address
        :param _builtins.str link_local_address_variable: Variable name
        """
        pulumi.set(__self__, "global_address", global_address)
        pulumi.set(__self__, "global_address_variable", global_address_variable)
        pulumi.set(__self__, "link_local_address", link_local_address)
        pulumi.set(__self__, "link_local_address_variable", link_local_address_variable)

    @_builtins.property
    @pulumi.getter(name="globalAddress")
    def global_address(self) -> _builtins.str:
        """
        Assign Global IPv6 Prefix
        """
        return pulumi.get(self, "global_address")

    @_builtins.property
    @pulumi.getter(name="globalAddressVariable")
    def global_address_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "global_address_variable")

    @_builtins.property
    @pulumi.getter(name="linkLocalAddress")
    def link_local_address(self) -> _builtins.str:
        """
        Use link-local IPv6 Address
        """
        return pulumi.get(self, "link_local_address")

    @_builtins.property
    @pulumi.getter(name="linkLocalAddressVariable")
    def link_local_address_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "link_local_address_variable")


@pulumi.output_type
class GetServiceLanVpnInterfaceSviFeatureIpv6VrrpSecondaryAddressResult(dict):
    def __init__(__self__, *,
                 prefix: _builtins.str,
                 prefix_variable: _builtins.str):
        """
        :param _builtins.str prefix: IPv6 Secondary IP address
        :param _builtins.str prefix_variable: Variable name
        """
        pulumi.set(__self__, "prefix", prefix)
        pulumi.set(__self__, "prefix_variable", prefix_variable)

    @_builtins.property
    @pulumi.getter
    def prefix(self) -> _builtins.str:
        """
        IPv6 Secondary IP address
        """
        return pulumi.get(self, "prefix")

    @_builtins.property
    @pulumi.getter(name="prefixVariable")
    def prefix_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "prefix_variable")


@pulumi.output_type
class GetServiceMulticastFeatureAutoRpAnnounceResult(dict):
    def __init__(__self__, *,
                 interface_name: _builtins.str,
                 interface_name_variable: _builtins.str,
                 scope: _builtins.int,
                 scope_variable: _builtins.str):
        """
        :param _builtins.str interface_name: Set RP Announce Interface Name
        :param _builtins.str interface_name_variable: Variable name
        :param _builtins.int scope: Set RP Announce Scope
        :param _builtins.str scope_variable: Variable name
        """
        pulumi.set(__self__, "interface_name", interface_name)
        pulumi.set(__self__, "interface_name_variable", interface_name_variable)
        pulumi.set(__self__, "scope", scope)
        pulumi.set(__self__, "scope_variable", scope_variable)

    @_builtins.property
    @pulumi.getter(name="interfaceName")
    def interface_name(self) -> _builtins.str:
        """
        Set RP Announce Interface Name
        """
        return pulumi.get(self, "interface_name")

    @_builtins.property
    @pulumi.getter(name="interfaceNameVariable")
    def interface_name_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "interface_name_variable")

    @_builtins.property
    @pulumi.getter
    def scope(self) -> _builtins.int:
        """
        Set RP Announce Scope
        """
        return pulumi.get(self, "scope")

    @_builtins.property
    @pulumi.getter(name="scopeVariable")
    def scope_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "scope_variable")


@pulumi.output_type
class GetServiceMulticastFeatureAutoRpDiscoveryResult(dict):
    def __init__(__self__, *,
                 interface_name: _builtins.str,
                 interface_name_variable: _builtins.str,
                 scope: _builtins.int,
                 scope_variable: _builtins.str):
        """
        :param _builtins.str interface_name: Set RP Discovery Interface Name
        :param _builtins.str interface_name_variable: Variable name
        :param _builtins.int scope: Set RP Discovery Scope
        :param _builtins.str scope_variable: Variable name
        """
        pulumi.set(__self__, "interface_name", interface_name)
        pulumi.set(__self__, "interface_name_variable", interface_name_variable)
        pulumi.set(__self__, "scope", scope)
        pulumi.set(__self__, "scope_variable", scope_variable)

    @_builtins.property
    @pulumi.getter(name="interfaceName")
    def interface_name(self) -> _builtins.str:
        """
        Set RP Discovery Interface Name
        """
        return pulumi.get(self, "interface_name")

    @_builtins.property
    @pulumi.getter(name="interfaceNameVariable")
    def interface_name_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "interface_name_variable")

    @_builtins.property
    @pulumi.getter
    def scope(self) -> _builtins.int:
        """
        Set RP Discovery Scope
        """
        return pulumi.get(self, "scope")

    @_builtins.property
    @pulumi.getter(name="scopeVariable")
    def scope_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "scope_variable")


@pulumi.output_type
class GetServiceMulticastFeatureIgmpInterfaceResult(dict):
    def __init__(__self__, *,
                 interface_name: _builtins.str,
                 interface_name_variable: _builtins.str,
                 join_groups: Sequence['outputs.GetServiceMulticastFeatureIgmpInterfaceJoinGroupResult'],
                 version: _builtins.int):
        """
        :param _builtins.str interface_name: Set interface name
        :param _builtins.str interface_name_variable: Variable name
        :param Sequence['GetServiceMulticastFeatureIgmpInterfaceJoinGroupArgs'] join_groups: Configure static joins
        :param _builtins.int version: igmp Version \\n\\n
        """
        pulumi.set(__self__, "interface_name", interface_name)
        pulumi.set(__self__, "interface_name_variable", interface_name_variable)
        pulumi.set(__self__, "join_groups", join_groups)
        pulumi.set(__self__, "version", version)

    @_builtins.property
    @pulumi.getter(name="interfaceName")
    def interface_name(self) -> _builtins.str:
        """
        Set interface name
        """
        return pulumi.get(self, "interface_name")

    @_builtins.property
    @pulumi.getter(name="interfaceNameVariable")
    def interface_name_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "interface_name_variable")

    @_builtins.property
    @pulumi.getter(name="joinGroups")
    def join_groups(self) -> Sequence['outputs.GetServiceMulticastFeatureIgmpInterfaceJoinGroupResult']:
        """
        Configure static joins
        """
        return pulumi.get(self, "join_groups")

    @_builtins.property
    @pulumi.getter
    def version(self) -> _builtins.int:
        """
        igmp Version \\n\\n
        """
        return pulumi.get(self, "version")


@pulumi.output_type
class GetServiceMulticastFeatureIgmpInterfaceJoinGroupResult(dict):
    def __init__(__self__, *,
                 group_address: _builtins.str,
                 group_address_variable: _builtins.str,
                 source_address: _builtins.str,
                 source_address_variable: _builtins.str):
        """
        :param _builtins.str group_address: Set group address
        :param _builtins.str group_address_variable: Variable name
        :param _builtins.str source_address: Set source address
        :param _builtins.str source_address_variable: Variable name
        """
        pulumi.set(__self__, "group_address", group_address)
        pulumi.set(__self__, "group_address_variable", group_address_variable)
        pulumi.set(__self__, "source_address", source_address)
        pulumi.set(__self__, "source_address_variable", source_address_variable)

    @_builtins.property
    @pulumi.getter(name="groupAddress")
    def group_address(self) -> _builtins.str:
        """
        Set group address
        """
        return pulumi.get(self, "group_address")

    @_builtins.property
    @pulumi.getter(name="groupAddressVariable")
    def group_address_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "group_address_variable")

    @_builtins.property
    @pulumi.getter(name="sourceAddress")
    def source_address(self) -> _builtins.str:
        """
        Set source address
        """
        return pulumi.get(self, "source_address")

    @_builtins.property
    @pulumi.getter(name="sourceAddressVariable")
    def source_address_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "source_address_variable")


@pulumi.output_type
class GetServiceMulticastFeatureMsdpGroupResult(dict):
    def __init__(__self__, *,
                 mesh_group_name: _builtins.str,
                 mesh_group_name_variable: _builtins.str,
                 peers: Sequence['outputs.GetServiceMulticastFeatureMsdpGroupPeerResult']):
        """
        :param _builtins.str mesh_group_name: Set MSDP mesh group
        :param _builtins.str mesh_group_name_variable: Variable name
        :param Sequence['GetServiceMulticastFeatureMsdpGroupPeerArgs'] peers: Configure peer
        """
        pulumi.set(__self__, "mesh_group_name", mesh_group_name)
        pulumi.set(__self__, "mesh_group_name_variable", mesh_group_name_variable)
        pulumi.set(__self__, "peers", peers)

    @_builtins.property
    @pulumi.getter(name="meshGroupName")
    def mesh_group_name(self) -> _builtins.str:
        """
        Set MSDP mesh group
        """
        return pulumi.get(self, "mesh_group_name")

    @_builtins.property
    @pulumi.getter(name="meshGroupNameVariable")
    def mesh_group_name_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "mesh_group_name_variable")

    @_builtins.property
    @pulumi.getter
    def peers(self) -> Sequence['outputs.GetServiceMulticastFeatureMsdpGroupPeerResult']:
        """
        Configure peer
        """
        return pulumi.get(self, "peers")


@pulumi.output_type
class GetServiceMulticastFeatureMsdpGroupPeerResult(dict):
    def __init__(__self__, *,
                 connection_source_interface: _builtins.str,
                 connection_source_interface_variable: _builtins.str,
                 default_peer: _builtins.bool,
                 keepalive_hold_time: _builtins.int,
                 keepalive_hold_time_variable: _builtins.str,
                 keepalive_interval: _builtins.int,
                 keepalive_interval_variable: _builtins.str,
                 peer_authentication_password: _builtins.str,
                 peer_authentication_password_variable: _builtins.str,
                 peer_ip: _builtins.str,
                 peer_ip_variable: _builtins.str,
                 prefix_list_id: _builtins.str,
                 remote_as: _builtins.int,
                 remote_as_variable: _builtins.str,
                 sa_limit: _builtins.int,
                 sa_limit_variable: _builtins.str):
        """
        :param _builtins.str connection_source_interface: Set MSDP peer ip connect-source interface
        :param _builtins.str connection_source_interface_variable: Variable name
        :param _builtins.bool default_peer: Set MSDP default peer
        :param _builtins.int keepalive_hold_time: Set MSDP peer ip keepalive hold time
        :param _builtins.str keepalive_hold_time_variable: Variable name
        :param _builtins.int keepalive_interval: Set MSDP peer ip keepalive interval
        :param _builtins.str keepalive_interval_variable: Variable name
        :param _builtins.str peer_authentication_password: Set MSDP peer ip password
        :param _builtins.str peer_authentication_password_variable: Variable name
        :param _builtins.str peer_ip: Set MSDP peer ip
        :param _builtins.str peer_ip_variable: Variable name
        :param _builtins.int remote_as: Set MSDP peer ip remote autonomous system number
        :param _builtins.str remote_as_variable: Variable name
        :param _builtins.int sa_limit: Set MSDP peer ip SA limit message number
        :param _builtins.str sa_limit_variable: Variable name
        """
        pulumi.set(__self__, "connection_source_interface", connection_source_interface)
        pulumi.set(__self__, "connection_source_interface_variable", connection_source_interface_variable)
        pulumi.set(__self__, "default_peer", default_peer)
        pulumi.set(__self__, "keepalive_hold_time", keepalive_hold_time)
        pulumi.set(__self__, "keepalive_hold_time_variable", keepalive_hold_time_variable)
        pulumi.set(__self__, "keepalive_interval", keepalive_interval)
        pulumi.set(__self__, "keepalive_interval_variable", keepalive_interval_variable)
        pulumi.set(__self__, "peer_authentication_password", peer_authentication_password)
        pulumi.set(__self__, "peer_authentication_password_variable", peer_authentication_password_variable)
        pulumi.set(__self__, "peer_ip", peer_ip)
        pulumi.set(__self__, "peer_ip_variable", peer_ip_variable)
        pulumi.set(__self__, "prefix_list_id", prefix_list_id)
        pulumi.set(__self__, "remote_as", remote_as)
        pulumi.set(__self__, "remote_as_variable", remote_as_variable)
        pulumi.set(__self__, "sa_limit", sa_limit)
        pulumi.set(__self__, "sa_limit_variable", sa_limit_variable)

    @_builtins.property
    @pulumi.getter(name="connectionSourceInterface")
    def connection_source_interface(self) -> _builtins.str:
        """
        Set MSDP peer ip connect-source interface
        """
        return pulumi.get(self, "connection_source_interface")

    @_builtins.property
    @pulumi.getter(name="connectionSourceInterfaceVariable")
    def connection_source_interface_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "connection_source_interface_variable")

    @_builtins.property
    @pulumi.getter(name="defaultPeer")
    def default_peer(self) -> _builtins.bool:
        """
        Set MSDP default peer
        """
        return pulumi.get(self, "default_peer")

    @_builtins.property
    @pulumi.getter(name="keepaliveHoldTime")
    def keepalive_hold_time(self) -> _builtins.int:
        """
        Set MSDP peer ip keepalive hold time
        """
        return pulumi.get(self, "keepalive_hold_time")

    @_builtins.property
    @pulumi.getter(name="keepaliveHoldTimeVariable")
    def keepalive_hold_time_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "keepalive_hold_time_variable")

    @_builtins.property
    @pulumi.getter(name="keepaliveInterval")
    def keepalive_interval(self) -> _builtins.int:
        """
        Set MSDP peer ip keepalive interval
        """
        return pulumi.get(self, "keepalive_interval")

    @_builtins.property
    @pulumi.getter(name="keepaliveIntervalVariable")
    def keepalive_interval_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "keepalive_interval_variable")

    @_builtins.property
    @pulumi.getter(name="peerAuthenticationPassword")
    def peer_authentication_password(self) -> _builtins.str:
        """
        Set MSDP peer ip password
        """
        return pulumi.get(self, "peer_authentication_password")

    @_builtins.property
    @pulumi.getter(name="peerAuthenticationPasswordVariable")
    def peer_authentication_password_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "peer_authentication_password_variable")

    @_builtins.property
    @pulumi.getter(name="peerIp")
    def peer_ip(self) -> _builtins.str:
        """
        Set MSDP peer ip
        """
        return pulumi.get(self, "peer_ip")

    @_builtins.property
    @pulumi.getter(name="peerIpVariable")
    def peer_ip_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "peer_ip_variable")

    @_builtins.property
    @pulumi.getter(name="prefixListId")
    def prefix_list_id(self) -> _builtins.str:
        return pulumi.get(self, "prefix_list_id")

    @_builtins.property
    @pulumi.getter(name="remoteAs")
    def remote_as(self) -> _builtins.int:
        """
        Set MSDP peer ip remote autonomous system number
        """
        return pulumi.get(self, "remote_as")

    @_builtins.property
    @pulumi.getter(name="remoteAsVariable")
    def remote_as_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "remote_as_variable")

    @_builtins.property
    @pulumi.getter(name="saLimit")
    def sa_limit(self) -> _builtins.int:
        """
        Set MSDP peer ip SA limit message number
        """
        return pulumi.get(self, "sa_limit")

    @_builtins.property
    @pulumi.getter(name="saLimitVariable")
    def sa_limit_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "sa_limit_variable")


@pulumi.output_type
class GetServiceMulticastFeaturePimBsrCandidateResult(dict):
    def __init__(__self__, *,
                 accept_candidate_access_list: _builtins.str,
                 accept_candidate_access_list_variable: _builtins.str,
                 hash_mask_length: _builtins.int,
                 hash_mask_length_variable: _builtins.str,
                 interface_name: _builtins.str,
                 interface_name_variable: _builtins.str,
                 priority: _builtins.int,
                 priority_variable: _builtins.str):
        """
        :param _builtins.str accept_candidate_access_list: Set BSR RP candidate filter
        :param _builtins.str accept_candidate_access_list_variable: Variable name
        :param _builtins.int hash_mask_length: Hash Mask length for RP selection
        :param _builtins.str hash_mask_length_variable: Variable name
        :param _builtins.str interface_name: Set Autonomic-Networking virtual interface
        :param _builtins.str interface_name_variable: Variable name
        :param _builtins.int priority: Set RP candidate priority
        :param _builtins.str priority_variable: Variable name
        """
        pulumi.set(__self__, "accept_candidate_access_list", accept_candidate_access_list)
        pulumi.set(__self__, "accept_candidate_access_list_variable", accept_candidate_access_list_variable)
        pulumi.set(__self__, "hash_mask_length", hash_mask_length)
        pulumi.set(__self__, "hash_mask_length_variable", hash_mask_length_variable)
        pulumi.set(__self__, "interface_name", interface_name)
        pulumi.set(__self__, "interface_name_variable", interface_name_variable)
        pulumi.set(__self__, "priority", priority)
        pulumi.set(__self__, "priority_variable", priority_variable)

    @_builtins.property
    @pulumi.getter(name="acceptCandidateAccessList")
    def accept_candidate_access_list(self) -> _builtins.str:
        """
        Set BSR RP candidate filter
        """
        return pulumi.get(self, "accept_candidate_access_list")

    @_builtins.property
    @pulumi.getter(name="acceptCandidateAccessListVariable")
    def accept_candidate_access_list_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "accept_candidate_access_list_variable")

    @_builtins.property
    @pulumi.getter(name="hashMaskLength")
    def hash_mask_length(self) -> _builtins.int:
        """
        Hash Mask length for RP selection
        """
        return pulumi.get(self, "hash_mask_length")

    @_builtins.property
    @pulumi.getter(name="hashMaskLengthVariable")
    def hash_mask_length_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "hash_mask_length_variable")

    @_builtins.property
    @pulumi.getter(name="interfaceName")
    def interface_name(self) -> _builtins.str:
        """
        Set Autonomic-Networking virtual interface
        """
        return pulumi.get(self, "interface_name")

    @_builtins.property
    @pulumi.getter(name="interfaceNameVariable")
    def interface_name_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "interface_name_variable")

    @_builtins.property
    @pulumi.getter
    def priority(self) -> _builtins.int:
        """
        Set RP candidate priority
        """
        return pulumi.get(self, "priority")

    @_builtins.property
    @pulumi.getter(name="priorityVariable")
    def priority_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "priority_variable")


@pulumi.output_type
class GetServiceMulticastFeaturePimBsrRpCandidateResult(dict):
    def __init__(__self__, *,
                 access_list_id: _builtins.str,
                 access_list_id_variable: _builtins.str,
                 interface_name: _builtins.str,
                 interface_name_variable: _builtins.str,
                 interval: _builtins.int,
                 interval_variable: _builtins.str,
                 priority: _builtins.int,
                 priority_variable: _builtins.str):
        """
        :param _builtins.str access_list_id: Set IP Access List for PIM RP Candidate
        :param _builtins.str access_list_id_variable: Variable name
        :param _builtins.str interface_name: Set Autonomic-Networking virtual interface
        :param _builtins.str interface_name_variable: Variable name
        :param _builtins.int interval: Set RP candidate advertisement interval
        :param _builtins.str interval_variable: Variable name
        :param _builtins.int priority: Set RP candidate priority
        :param _builtins.str priority_variable: Variable name
        """
        pulumi.set(__self__, "access_list_id", access_list_id)
        pulumi.set(__self__, "access_list_id_variable", access_list_id_variable)
        pulumi.set(__self__, "interface_name", interface_name)
        pulumi.set(__self__, "interface_name_variable", interface_name_variable)
        pulumi.set(__self__, "interval", interval)
        pulumi.set(__self__, "interval_variable", interval_variable)
        pulumi.set(__self__, "priority", priority)
        pulumi.set(__self__, "priority_variable", priority_variable)

    @_builtins.property
    @pulumi.getter(name="accessListId")
    def access_list_id(self) -> _builtins.str:
        """
        Set IP Access List for PIM RP Candidate
        """
        return pulumi.get(self, "access_list_id")

    @_builtins.property
    @pulumi.getter(name="accessListIdVariable")
    def access_list_id_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "access_list_id_variable")

    @_builtins.property
    @pulumi.getter(name="interfaceName")
    def interface_name(self) -> _builtins.str:
        """
        Set Autonomic-Networking virtual interface
        """
        return pulumi.get(self, "interface_name")

    @_builtins.property
    @pulumi.getter(name="interfaceNameVariable")
    def interface_name_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "interface_name_variable")

    @_builtins.property
    @pulumi.getter
    def interval(self) -> _builtins.int:
        """
        Set RP candidate advertisement interval
        """
        return pulumi.get(self, "interval")

    @_builtins.property
    @pulumi.getter(name="intervalVariable")
    def interval_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "interval_variable")

    @_builtins.property
    @pulumi.getter
    def priority(self) -> _builtins.int:
        """
        Set RP candidate priority
        """
        return pulumi.get(self, "priority")

    @_builtins.property
    @pulumi.getter(name="priorityVariable")
    def priority_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "priority_variable")


@pulumi.output_type
class GetServiceMulticastFeaturePimInterfaceResult(dict):
    def __init__(__self__, *,
                 interface_name: _builtins.str,
                 interface_name_variable: _builtins.str,
                 join_prune_interval: _builtins.int,
                 join_prune_interval_variable: _builtins.str,
                 query_interval: _builtins.int,
                 query_interval_variable: _builtins.str):
        """
        :param _builtins.str interface_name: Set interface name
        :param _builtins.str interface_name_variable: Variable name
        :param _builtins.int join_prune_interval: Set interval at which PIM multicast traffic can join or be removed from RPT or SPT
        :param _builtins.str join_prune_interval_variable: Variable name
        :param _builtins.int query_interval: Set PIM query interval
        :param _builtins.str query_interval_variable: Variable name
        """
        pulumi.set(__self__, "interface_name", interface_name)
        pulumi.set(__self__, "interface_name_variable", interface_name_variable)
        pulumi.set(__self__, "join_prune_interval", join_prune_interval)
        pulumi.set(__self__, "join_prune_interval_variable", join_prune_interval_variable)
        pulumi.set(__self__, "query_interval", query_interval)
        pulumi.set(__self__, "query_interval_variable", query_interval_variable)

    @_builtins.property
    @pulumi.getter(name="interfaceName")
    def interface_name(self) -> _builtins.str:
        """
        Set interface name
        """
        return pulumi.get(self, "interface_name")

    @_builtins.property
    @pulumi.getter(name="interfaceNameVariable")
    def interface_name_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "interface_name_variable")

    @_builtins.property
    @pulumi.getter(name="joinPruneInterval")
    def join_prune_interval(self) -> _builtins.int:
        """
        Set interval at which PIM multicast traffic can join or be removed from RPT or SPT
        """
        return pulumi.get(self, "join_prune_interval")

    @_builtins.property
    @pulumi.getter(name="joinPruneIntervalVariable")
    def join_prune_interval_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "join_prune_interval_variable")

    @_builtins.property
    @pulumi.getter(name="queryInterval")
    def query_interval(self) -> _builtins.int:
        """
        Set PIM query interval
        """
        return pulumi.get(self, "query_interval")

    @_builtins.property
    @pulumi.getter(name="queryIntervalVariable")
    def query_interval_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "query_interval_variable")


@pulumi.output_type
class GetServiceMulticastFeatureStaticRpAddressResult(dict):
    def __init__(__self__, *,
                 access_list: _builtins.str,
                 access_list_variable: _builtins.str,
                 ip_address: _builtins.str,
                 ip_address_variable: _builtins.str,
                 override: _builtins.bool,
                 override_variable: _builtins.str):
        """
        :param _builtins.str access_list: Set Static RP Access List
        :param _builtins.str access_list_variable: Variable name
        :param _builtins.str ip_address: Set Static RP IP Address
        :param _builtins.str ip_address_variable: Variable name
        :param _builtins.bool override: Set override flag
        :param _builtins.str override_variable: Variable name
        """
        pulumi.set(__self__, "access_list", access_list)
        pulumi.set(__self__, "access_list_variable", access_list_variable)
        pulumi.set(__self__, "ip_address", ip_address)
        pulumi.set(__self__, "ip_address_variable", ip_address_variable)
        pulumi.set(__self__, "override", override)
        pulumi.set(__self__, "override_variable", override_variable)

    @_builtins.property
    @pulumi.getter(name="accessList")
    def access_list(self) -> _builtins.str:
        """
        Set Static RP Access List
        """
        return pulumi.get(self, "access_list")

    @_builtins.property
    @pulumi.getter(name="accessListVariable")
    def access_list_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "access_list_variable")

    @_builtins.property
    @pulumi.getter(name="ipAddress")
    def ip_address(self) -> _builtins.str:
        """
        Set Static RP IP Address
        """
        return pulumi.get(self, "ip_address")

    @_builtins.property
    @pulumi.getter(name="ipAddressVariable")
    def ip_address_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "ip_address_variable")

    @_builtins.property
    @pulumi.getter
    def override(self) -> _builtins.bool:
        """
        Set override flag
        """
        return pulumi.get(self, "override")

    @_builtins.property
    @pulumi.getter(name="overrideVariable")
    def override_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "override_variable")


@pulumi.output_type
class GetServiceObjectTrackerGroupFeatureTrackerElementResult(dict):
    def __init__(__self__, *,
                 object_tracker_id: _builtins.str):
        pulumi.set(__self__, "object_tracker_id", object_tracker_id)

    @_builtins.property
    @pulumi.getter(name="objectTrackerId")
    def object_tracker_id(self) -> _builtins.str:
        return pulumi.get(self, "object_tracker_id")


@pulumi.output_type
class GetServiceRoutePolicyFeatureSequenceResult(dict):
    def __init__(__self__, *,
                 actions: Sequence['outputs.GetServiceRoutePolicyFeatureSequenceActionResult'],
                 base_action: _builtins.str,
                 id: _builtins.int,
                 match_entries: Sequence['outputs.GetServiceRoutePolicyFeatureSequenceMatchEntryResult'],
                 name: _builtins.str,
                 protocol: _builtins.str):
        """
        :param Sequence['GetServiceRoutePolicyFeatureSequenceActionArgs'] actions: Define list of actions
        :param _builtins.str base_action: Base Action
        :param _builtins.int id: Sequence Id
        :param Sequence['GetServiceRoutePolicyFeatureSequenceMatchEntryArgs'] match_entries: Define match conditions
        :param _builtins.str name: Sequence Name
        :param _builtins.str protocol: protocol such as IPV4, IPV6, or BOTH
        """
        pulumi.set(__self__, "actions", actions)
        pulumi.set(__self__, "base_action", base_action)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "match_entries", match_entries)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "protocol", protocol)

    @_builtins.property
    @pulumi.getter
    def actions(self) -> Sequence['outputs.GetServiceRoutePolicyFeatureSequenceActionResult']:
        """
        Define list of actions
        """
        return pulumi.get(self, "actions")

    @_builtins.property
    @pulumi.getter(name="baseAction")
    def base_action(self) -> _builtins.str:
        """
        Base Action
        """
        return pulumi.get(self, "base_action")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.int:
        """
        Sequence Id
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter(name="matchEntries")
    def match_entries(self) -> Sequence['outputs.GetServiceRoutePolicyFeatureSequenceMatchEntryResult']:
        """
        Define match conditions
        """
        return pulumi.get(self, "match_entries")

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        """
        Sequence Name
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def protocol(self) -> _builtins.str:
        """
        protocol such as IPV4, IPV6, or BOTH
        """
        return pulumi.get(self, "protocol")


@pulumi.output_type
class GetServiceRoutePolicyFeatureSequenceActionResult(dict):
    def __init__(__self__, *,
                 as_path_prepends: Sequence[_builtins.int],
                 communities: Sequence[_builtins.str],
                 community_additive: _builtins.bool,
                 community_variable: _builtins.str,
                 ipv4_next_hop: _builtins.str,
                 ipv6_next_hop: _builtins.str,
                 local_preference: _builtins.int,
                 metric: _builtins.int,
                 metric_type: _builtins.str,
                 omp_tag: _builtins.int,
                 origin: _builtins.str,
                 ospf_tag: _builtins.int,
                 weight: _builtins.int):
        """
        :param _builtins.str community_variable: Variable name
        :param _builtins.str ipv4_next_hop: Set Ipv4 Next Hop
        :param _builtins.str ipv6_next_hop: Set Ipv6 Next Hop
        :param _builtins.int local_preference: Set Local Preference
        :param _builtins.int metric: Set Metric
        :param _builtins.str metric_type: Set Metric Type
        :param _builtins.int omp_tag: Set OMP Tag
        :param _builtins.str origin: Set Origin
        :param _builtins.int ospf_tag: Set OSPF Tag
        :param _builtins.int weight: Set Weight
        """
        pulumi.set(__self__, "as_path_prepends", as_path_prepends)
        pulumi.set(__self__, "communities", communities)
        pulumi.set(__self__, "community_additive", community_additive)
        pulumi.set(__self__, "community_variable", community_variable)
        pulumi.set(__self__, "ipv4_next_hop", ipv4_next_hop)
        pulumi.set(__self__, "ipv6_next_hop", ipv6_next_hop)
        pulumi.set(__self__, "local_preference", local_preference)
        pulumi.set(__self__, "metric", metric)
        pulumi.set(__self__, "metric_type", metric_type)
        pulumi.set(__self__, "omp_tag", omp_tag)
        pulumi.set(__self__, "origin", origin)
        pulumi.set(__self__, "ospf_tag", ospf_tag)
        pulumi.set(__self__, "weight", weight)

    @_builtins.property
    @pulumi.getter(name="asPathPrepends")
    def as_path_prepends(self) -> Sequence[_builtins.int]:
        return pulumi.get(self, "as_path_prepends")

    @_builtins.property
    @pulumi.getter
    def communities(self) -> Sequence[_builtins.str]:
        return pulumi.get(self, "communities")

    @_builtins.property
    @pulumi.getter(name="communityAdditive")
    def community_additive(self) -> _builtins.bool:
        return pulumi.get(self, "community_additive")

    @_builtins.property
    @pulumi.getter(name="communityVariable")
    def community_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "community_variable")

    @_builtins.property
    @pulumi.getter(name="ipv4NextHop")
    def ipv4_next_hop(self) -> _builtins.str:
        """
        Set Ipv4 Next Hop
        """
        return pulumi.get(self, "ipv4_next_hop")

    @_builtins.property
    @pulumi.getter(name="ipv6NextHop")
    def ipv6_next_hop(self) -> _builtins.str:
        """
        Set Ipv6 Next Hop
        """
        return pulumi.get(self, "ipv6_next_hop")

    @_builtins.property
    @pulumi.getter(name="localPreference")
    def local_preference(self) -> _builtins.int:
        """
        Set Local Preference
        """
        return pulumi.get(self, "local_preference")

    @_builtins.property
    @pulumi.getter
    def metric(self) -> _builtins.int:
        """
        Set Metric
        """
        return pulumi.get(self, "metric")

    @_builtins.property
    @pulumi.getter(name="metricType")
    def metric_type(self) -> _builtins.str:
        """
        Set Metric Type
        """
        return pulumi.get(self, "metric_type")

    @_builtins.property
    @pulumi.getter(name="ompTag")
    def omp_tag(self) -> _builtins.int:
        """
        Set OMP Tag
        """
        return pulumi.get(self, "omp_tag")

    @_builtins.property
    @pulumi.getter
    def origin(self) -> _builtins.str:
        """
        Set Origin
        """
        return pulumi.get(self, "origin")

    @_builtins.property
    @pulumi.getter(name="ospfTag")
    def ospf_tag(self) -> _builtins.int:
        """
        Set OSPF Tag
        """
        return pulumi.get(self, "ospf_tag")

    @_builtins.property
    @pulumi.getter
    def weight(self) -> _builtins.int:
        """
        Set Weight
        """
        return pulumi.get(self, "weight")


@pulumi.output_type
class GetServiceRoutePolicyFeatureSequenceMatchEntryResult(dict):
    def __init__(__self__, *,
                 as_path_list_id: _builtins.str,
                 bgp_local_preference: _builtins.int,
                 expanded_community_list_id: _builtins.str,
                 extended_community_list_id: _builtins.str,
                 ipv4_address_prefix_list_id: _builtins.str,
                 ipv4_next_hop_prefix_list_id: _builtins.str,
                 ipv6_address_prefix_list_id: _builtins.str,
                 ipv6_next_hop_prefix_list_id: _builtins.str,
                 metric: _builtins.int,
                 omp_tag: _builtins.int,
                 ospf_tag: _builtins.int,
                 standard_community_list_criteria: _builtins.str,
                 standard_community_lists: Sequence['outputs.GetServiceRoutePolicyFeatureSequenceMatchEntryStandardCommunityListResult']):
        """
        :param _builtins.int bgp_local_preference: BGP Local Preference
        :param _builtins.int metric: Select Metric
        :param _builtins.int omp_tag: Select OMP Tag
        :param _builtins.int ospf_tag: Select OSPF Tag
        :param _builtins.str standard_community_list_criteria: Select a condition such as OR, AND or EXACT
        :param Sequence['GetServiceRoutePolicyFeatureSequenceMatchEntryStandardCommunityListArgs'] standard_community_lists: Select a standard community list
        """
        pulumi.set(__self__, "as_path_list_id", as_path_list_id)
        pulumi.set(__self__, "bgp_local_preference", bgp_local_preference)
        pulumi.set(__self__, "expanded_community_list_id", expanded_community_list_id)
        pulumi.set(__self__, "extended_community_list_id", extended_community_list_id)
        pulumi.set(__self__, "ipv4_address_prefix_list_id", ipv4_address_prefix_list_id)
        pulumi.set(__self__, "ipv4_next_hop_prefix_list_id", ipv4_next_hop_prefix_list_id)
        pulumi.set(__self__, "ipv6_address_prefix_list_id", ipv6_address_prefix_list_id)
        pulumi.set(__self__, "ipv6_next_hop_prefix_list_id", ipv6_next_hop_prefix_list_id)
        pulumi.set(__self__, "metric", metric)
        pulumi.set(__self__, "omp_tag", omp_tag)
        pulumi.set(__self__, "ospf_tag", ospf_tag)
        pulumi.set(__self__, "standard_community_list_criteria", standard_community_list_criteria)
        pulumi.set(__self__, "standard_community_lists", standard_community_lists)

    @_builtins.property
    @pulumi.getter(name="asPathListId")
    def as_path_list_id(self) -> _builtins.str:
        return pulumi.get(self, "as_path_list_id")

    @_builtins.property
    @pulumi.getter(name="bgpLocalPreference")
    def bgp_local_preference(self) -> _builtins.int:
        """
        BGP Local Preference
        """
        return pulumi.get(self, "bgp_local_preference")

    @_builtins.property
    @pulumi.getter(name="expandedCommunityListId")
    def expanded_community_list_id(self) -> _builtins.str:
        return pulumi.get(self, "expanded_community_list_id")

    @_builtins.property
    @pulumi.getter(name="extendedCommunityListId")
    def extended_community_list_id(self) -> _builtins.str:
        return pulumi.get(self, "extended_community_list_id")

    @_builtins.property
    @pulumi.getter(name="ipv4AddressPrefixListId")
    def ipv4_address_prefix_list_id(self) -> _builtins.str:
        return pulumi.get(self, "ipv4_address_prefix_list_id")

    @_builtins.property
    @pulumi.getter(name="ipv4NextHopPrefixListId")
    def ipv4_next_hop_prefix_list_id(self) -> _builtins.str:
        return pulumi.get(self, "ipv4_next_hop_prefix_list_id")

    @_builtins.property
    @pulumi.getter(name="ipv6AddressPrefixListId")
    def ipv6_address_prefix_list_id(self) -> _builtins.str:
        return pulumi.get(self, "ipv6_address_prefix_list_id")

    @_builtins.property
    @pulumi.getter(name="ipv6NextHopPrefixListId")
    def ipv6_next_hop_prefix_list_id(self) -> _builtins.str:
        return pulumi.get(self, "ipv6_next_hop_prefix_list_id")

    @_builtins.property
    @pulumi.getter
    def metric(self) -> _builtins.int:
        """
        Select Metric
        """
        return pulumi.get(self, "metric")

    @_builtins.property
    @pulumi.getter(name="ompTag")
    def omp_tag(self) -> _builtins.int:
        """
        Select OMP Tag
        """
        return pulumi.get(self, "omp_tag")

    @_builtins.property
    @pulumi.getter(name="ospfTag")
    def ospf_tag(self) -> _builtins.int:
        """
        Select OSPF Tag
        """
        return pulumi.get(self, "ospf_tag")

    @_builtins.property
    @pulumi.getter(name="standardCommunityListCriteria")
    def standard_community_list_criteria(self) -> _builtins.str:
        """
        Select a condition such as OR, AND or EXACT
        """
        return pulumi.get(self, "standard_community_list_criteria")

    @_builtins.property
    @pulumi.getter(name="standardCommunityLists")
    def standard_community_lists(self) -> Sequence['outputs.GetServiceRoutePolicyFeatureSequenceMatchEntryStandardCommunityListResult']:
        """
        Select a standard community list
        """
        return pulumi.get(self, "standard_community_lists")


@pulumi.output_type
class GetServiceRoutePolicyFeatureSequenceMatchEntryStandardCommunityListResult(dict):
    def __init__(__self__, *,
                 id: _builtins.str):
        pulumi.set(__self__, "id", id)

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        return pulumi.get(self, "id")


@pulumi.output_type
class GetServiceRoutingBgpFeatureIpv4AggregateAddressResult(dict):
    def __init__(__self__, *,
                 as_set_path: _builtins.bool,
                 as_set_path_variable: _builtins.str,
                 network_address: _builtins.str,
                 network_address_variable: _builtins.str,
                 subnet_mask: _builtins.str,
                 subnet_mask_variable: _builtins.str,
                 summary_only: _builtins.bool,
                 summary_only_variable: _builtins.str):
        """
        :param _builtins.bool as_set_path: Set AS set path information
        :param _builtins.str as_set_path_variable: Variable name
        :param _builtins.str network_address_variable: Variable name
        :param _builtins.str subnet_mask_variable: Variable name
        :param _builtins.bool summary_only: Filter out more specific routes from updates
        :param _builtins.str summary_only_variable: Variable name
        """
        pulumi.set(__self__, "as_set_path", as_set_path)
        pulumi.set(__self__, "as_set_path_variable", as_set_path_variable)
        pulumi.set(__self__, "network_address", network_address)
        pulumi.set(__self__, "network_address_variable", network_address_variable)
        pulumi.set(__self__, "subnet_mask", subnet_mask)
        pulumi.set(__self__, "subnet_mask_variable", subnet_mask_variable)
        pulumi.set(__self__, "summary_only", summary_only)
        pulumi.set(__self__, "summary_only_variable", summary_only_variable)

    @_builtins.property
    @pulumi.getter(name="asSetPath")
    def as_set_path(self) -> _builtins.bool:
        """
        Set AS set path information
        """
        return pulumi.get(self, "as_set_path")

    @_builtins.property
    @pulumi.getter(name="asSetPathVariable")
    def as_set_path_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "as_set_path_variable")

    @_builtins.property
    @pulumi.getter(name="networkAddress")
    def network_address(self) -> _builtins.str:
        return pulumi.get(self, "network_address")

    @_builtins.property
    @pulumi.getter(name="networkAddressVariable")
    def network_address_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "network_address_variable")

    @_builtins.property
    @pulumi.getter(name="subnetMask")
    def subnet_mask(self) -> _builtins.str:
        return pulumi.get(self, "subnet_mask")

    @_builtins.property
    @pulumi.getter(name="subnetMaskVariable")
    def subnet_mask_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "subnet_mask_variable")

    @_builtins.property
    @pulumi.getter(name="summaryOnly")
    def summary_only(self) -> _builtins.bool:
        """
        Filter out more specific routes from updates
        """
        return pulumi.get(self, "summary_only")

    @_builtins.property
    @pulumi.getter(name="summaryOnlyVariable")
    def summary_only_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "summary_only_variable")


@pulumi.output_type
class GetServiceRoutingBgpFeatureIpv4NeighborResult(dict):
    def __init__(__self__, *,
                 address: _builtins.str,
                 address_families: Sequence['outputs.GetServiceRoutingBgpFeatureIpv4NeighborAddressFamilyResult'],
                 address_variable: _builtins.str,
                 allowas_in_number: _builtins.int,
                 allowas_in_number_variable: _builtins.str,
                 as_override: _builtins.bool,
                 as_override_variable: _builtins.str,
                 description: _builtins.str,
                 description_variable: _builtins.str,
                 ebgp_multihop: _builtins.int,
                 ebgp_multihop_variable: _builtins.str,
                 hold_time: _builtins.int,
                 hold_time_variable: _builtins.str,
                 keepalive_time: _builtins.int,
                 keepalive_time_variable: _builtins.str,
                 local_as: _builtins.int,
                 local_as_variable: _builtins.str,
                 next_hop_self: _builtins.bool,
                 next_hop_self_variable: _builtins.str,
                 password: _builtins.str,
                 password_variable: _builtins.str,
                 remote_as: _builtins.int,
                 remote_as_variable: _builtins.str,
                 send_community: _builtins.bool,
                 send_community_variable: _builtins.str,
                 send_extended_community: _builtins.bool,
                 send_extended_community_variable: _builtins.str,
                 send_label: _builtins.bool,
                 send_label_variable: _builtins.str,
                 shutdown: _builtins.bool,
                 shutdown_variable: _builtins.str,
                 update_source_interface: _builtins.str,
                 update_source_interface_variable: _builtins.str):
        """
        :param _builtins.str address: Set neighbor address
        :param Sequence['GetServiceRoutingBgpFeatureIpv4NeighborAddressFamilyArgs'] address_families: Set BGP address family
        :param _builtins.str address_variable: Variable name
        :param _builtins.int allowas_in_number: The number of accept as-path with my AS present in it
        :param _builtins.str allowas_in_number_variable: Variable name
        :param _builtins.bool as_override: Override matching AS-number while sending update
        :param _builtins.str as_override_variable: Variable name
        :param _builtins.str description: Set description
        :param _builtins.str description_variable: Variable name
        :param _builtins.int ebgp_multihop: Set TTL value for peers that are not directly connected
        :param _builtins.str ebgp_multihop_variable: Variable name
        :param _builtins.int hold_time: Interval (seconds) not receiving a keepalive message declares a BGP peer down
        :param _builtins.str hold_time_variable: Variable name
        :param _builtins.int keepalive_time: Interval (seconds) of keepalive messages sent to its BGP peer
        :param _builtins.str keepalive_time_variable: Variable name
        :param _builtins.int local_as: Set local autonomous number,Local-AS cannot have the local BGP protocol AS number or the AS number of the remote peer.The local-as is valid only if the peer is a true eBGP peer. It does not work for two peers in different sub-ASs in a confederation.
        :param _builtins.str local_as_variable: Variable name
        :param _builtins.bool next_hop_self: Set router to be next hop for routes advertised to neighbor
        :param _builtins.str next_hop_self_variable: Variable name
        :param _builtins.str password: Set MD5 password on TCP connection with BGP peer
        :param _builtins.str password_variable: Variable name
        :param _builtins.int remote_as: Set remote autonomous system number
        :param _builtins.str remote_as_variable: Variable name
        :param _builtins.bool send_community: Send community attribute
        :param _builtins.str send_community_variable: Variable name
        :param _builtins.bool send_extended_community: Send extended community attribute
        :param _builtins.str send_extended_community_variable: Variable name
        :param _builtins.bool send_label: Send label
        :param _builtins.str send_label_variable: Variable name
        :param _builtins.bool shutdown: Enable or disable a BGP neighbor
        :param _builtins.str shutdown_variable: Variable name
        :param _builtins.str update_source_interface: Source interface name for BGP neighbor
        :param _builtins.str update_source_interface_variable: Variable name
        """
        pulumi.set(__self__, "address", address)
        pulumi.set(__self__, "address_families", address_families)
        pulumi.set(__self__, "address_variable", address_variable)
        pulumi.set(__self__, "allowas_in_number", allowas_in_number)
        pulumi.set(__self__, "allowas_in_number_variable", allowas_in_number_variable)
        pulumi.set(__self__, "as_override", as_override)
        pulumi.set(__self__, "as_override_variable", as_override_variable)
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "description_variable", description_variable)
        pulumi.set(__self__, "ebgp_multihop", ebgp_multihop)
        pulumi.set(__self__, "ebgp_multihop_variable", ebgp_multihop_variable)
        pulumi.set(__self__, "hold_time", hold_time)
        pulumi.set(__self__, "hold_time_variable", hold_time_variable)
        pulumi.set(__self__, "keepalive_time", keepalive_time)
        pulumi.set(__self__, "keepalive_time_variable", keepalive_time_variable)
        pulumi.set(__self__, "local_as", local_as)
        pulumi.set(__self__, "local_as_variable", local_as_variable)
        pulumi.set(__self__, "next_hop_self", next_hop_self)
        pulumi.set(__self__, "next_hop_self_variable", next_hop_self_variable)
        pulumi.set(__self__, "password", password)
        pulumi.set(__self__, "password_variable", password_variable)
        pulumi.set(__self__, "remote_as", remote_as)
        pulumi.set(__self__, "remote_as_variable", remote_as_variable)
        pulumi.set(__self__, "send_community", send_community)
        pulumi.set(__self__, "send_community_variable", send_community_variable)
        pulumi.set(__self__, "send_extended_community", send_extended_community)
        pulumi.set(__self__, "send_extended_community_variable", send_extended_community_variable)
        pulumi.set(__self__, "send_label", send_label)
        pulumi.set(__self__, "send_label_variable", send_label_variable)
        pulumi.set(__self__, "shutdown", shutdown)
        pulumi.set(__self__, "shutdown_variable", shutdown_variable)
        pulumi.set(__self__, "update_source_interface", update_source_interface)
        pulumi.set(__self__, "update_source_interface_variable", update_source_interface_variable)

    @_builtins.property
    @pulumi.getter
    def address(self) -> _builtins.str:
        """
        Set neighbor address
        """
        return pulumi.get(self, "address")

    @_builtins.property
    @pulumi.getter(name="addressFamilies")
    def address_families(self) -> Sequence['outputs.GetServiceRoutingBgpFeatureIpv4NeighborAddressFamilyResult']:
        """
        Set BGP address family
        """
        return pulumi.get(self, "address_families")

    @_builtins.property
    @pulumi.getter(name="addressVariable")
    def address_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "address_variable")

    @_builtins.property
    @pulumi.getter(name="allowasInNumber")
    def allowas_in_number(self) -> _builtins.int:
        """
        The number of accept as-path with my AS present in it
        """
        return pulumi.get(self, "allowas_in_number")

    @_builtins.property
    @pulumi.getter(name="allowasInNumberVariable")
    def allowas_in_number_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "allowas_in_number_variable")

    @_builtins.property
    @pulumi.getter(name="asOverride")
    def as_override(self) -> _builtins.bool:
        """
        Override matching AS-number while sending update
        """
        return pulumi.get(self, "as_override")

    @_builtins.property
    @pulumi.getter(name="asOverrideVariable")
    def as_override_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "as_override_variable")

    @_builtins.property
    @pulumi.getter
    def description(self) -> _builtins.str:
        """
        Set description
        """
        return pulumi.get(self, "description")

    @_builtins.property
    @pulumi.getter(name="descriptionVariable")
    def description_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "description_variable")

    @_builtins.property
    @pulumi.getter(name="ebgpMultihop")
    def ebgp_multihop(self) -> _builtins.int:
        """
        Set TTL value for peers that are not directly connected
        """
        return pulumi.get(self, "ebgp_multihop")

    @_builtins.property
    @pulumi.getter(name="ebgpMultihopVariable")
    def ebgp_multihop_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "ebgp_multihop_variable")

    @_builtins.property
    @pulumi.getter(name="holdTime")
    def hold_time(self) -> _builtins.int:
        """
        Interval (seconds) not receiving a keepalive message declares a BGP peer down
        """
        return pulumi.get(self, "hold_time")

    @_builtins.property
    @pulumi.getter(name="holdTimeVariable")
    def hold_time_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "hold_time_variable")

    @_builtins.property
    @pulumi.getter(name="keepaliveTime")
    def keepalive_time(self) -> _builtins.int:
        """
        Interval (seconds) of keepalive messages sent to its BGP peer
        """
        return pulumi.get(self, "keepalive_time")

    @_builtins.property
    @pulumi.getter(name="keepaliveTimeVariable")
    def keepalive_time_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "keepalive_time_variable")

    @_builtins.property
    @pulumi.getter(name="localAs")
    def local_as(self) -> _builtins.int:
        """
        Set local autonomous number,Local-AS cannot have the local BGP protocol AS number or the AS number of the remote peer.The local-as is valid only if the peer is a true eBGP peer. It does not work for two peers in different sub-ASs in a confederation.
        """
        return pulumi.get(self, "local_as")

    @_builtins.property
    @pulumi.getter(name="localAsVariable")
    def local_as_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "local_as_variable")

    @_builtins.property
    @pulumi.getter(name="nextHopSelf")
    def next_hop_self(self) -> _builtins.bool:
        """
        Set router to be next hop for routes advertised to neighbor
        """
        return pulumi.get(self, "next_hop_self")

    @_builtins.property
    @pulumi.getter(name="nextHopSelfVariable")
    def next_hop_self_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "next_hop_self_variable")

    @_builtins.property
    @pulumi.getter
    def password(self) -> _builtins.str:
        """
        Set MD5 password on TCP connection with BGP peer
        """
        return pulumi.get(self, "password")

    @_builtins.property
    @pulumi.getter(name="passwordVariable")
    def password_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "password_variable")

    @_builtins.property
    @pulumi.getter(name="remoteAs")
    def remote_as(self) -> _builtins.int:
        """
        Set remote autonomous system number
        """
        return pulumi.get(self, "remote_as")

    @_builtins.property
    @pulumi.getter(name="remoteAsVariable")
    def remote_as_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "remote_as_variable")

    @_builtins.property
    @pulumi.getter(name="sendCommunity")
    def send_community(self) -> _builtins.bool:
        """
        Send community attribute
        """
        return pulumi.get(self, "send_community")

    @_builtins.property
    @pulumi.getter(name="sendCommunityVariable")
    def send_community_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "send_community_variable")

    @_builtins.property
    @pulumi.getter(name="sendExtendedCommunity")
    def send_extended_community(self) -> _builtins.bool:
        """
        Send extended community attribute
        """
        return pulumi.get(self, "send_extended_community")

    @_builtins.property
    @pulumi.getter(name="sendExtendedCommunityVariable")
    def send_extended_community_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "send_extended_community_variable")

    @_builtins.property
    @pulumi.getter(name="sendLabel")
    def send_label(self) -> _builtins.bool:
        """
        Send label
        """
        return pulumi.get(self, "send_label")

    @_builtins.property
    @pulumi.getter(name="sendLabelVariable")
    def send_label_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "send_label_variable")

    @_builtins.property
    @pulumi.getter
    def shutdown(self) -> _builtins.bool:
        """
        Enable or disable a BGP neighbor
        """
        return pulumi.get(self, "shutdown")

    @_builtins.property
    @pulumi.getter(name="shutdownVariable")
    def shutdown_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "shutdown_variable")

    @_builtins.property
    @pulumi.getter(name="updateSourceInterface")
    def update_source_interface(self) -> _builtins.str:
        """
        Source interface name for BGP neighbor
        """
        return pulumi.get(self, "update_source_interface")

    @_builtins.property
    @pulumi.getter(name="updateSourceInterfaceVariable")
    def update_source_interface_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "update_source_interface_variable")


@pulumi.output_type
class GetServiceRoutingBgpFeatureIpv4NeighborAddressFamilyResult(dict):
    def __init__(__self__, *,
                 disable_peer_max_number_of_prefixes: _builtins.int,
                 disable_peer_max_number_of_prefixes_variable: _builtins.str,
                 disable_peer_threshold: _builtins.int,
                 disable_peer_threshold_variable: _builtins.str,
                 family_type: _builtins.str,
                 in_route_policy_id: _builtins.str,
                 out_route_policy_id: _builtins.str,
                 policy_type: _builtins.str,
                 restart_interval: _builtins.int,
                 restart_interval_variable: _builtins.str,
                 restart_max_number_of_prefixes: _builtins.int,
                 restart_max_number_of_prefixes_variable: _builtins.str,
                 restart_threshold: _builtins.int,
                 restart_threshold_variable: _builtins.str,
                 warning_message_max_number_of_prefixes: _builtins.int,
                 warning_message_max_number_of_prefixes_variable: _builtins.str,
                 warning_message_threshold: _builtins.int,
                 warning_message_threshold_variable: _builtins.str):
        """
        :param _builtins.int disable_peer_max_number_of_prefixes: Set maximum number of prefixes accepted from BGP peer
        :param _builtins.str disable_peer_max_number_of_prefixes_variable: Variable name
        :param _builtins.int disable_peer_threshold: Set threshold(1 to 100) at which to generate a warning message
        :param _builtins.str disable_peer_threshold_variable: Variable name
        :param _builtins.str family_type: Set IPv4 unicast address family
        :param _builtins.str policy_type: Neighbor received maximum prefix policy is disabled.
        :param _builtins.int restart_interval: Set the restart interval(minutes) when to restart BGP connection if threshold is exceeded
        :param _builtins.str restart_interval_variable: Variable name
        :param _builtins.int restart_max_number_of_prefixes: Set maximum number of prefixes accepted from BGP peer
        :param _builtins.str restart_max_number_of_prefixes_variable: Variable name
        :param _builtins.int restart_threshold: Set threshold(1 to 100) at which to generate a warning message
        :param _builtins.str restart_threshold_variable: Variable name
        :param _builtins.int warning_message_max_number_of_prefixes: Set maximum number of prefixes accepted from BGP peer
        :param _builtins.str warning_message_max_number_of_prefixes_variable: Variable name
        :param _builtins.int warning_message_threshold: Set threshold(1 to 100) at which to generate a warning message
        :param _builtins.str warning_message_threshold_variable: Variable name
        """
        pulumi.set(__self__, "disable_peer_max_number_of_prefixes", disable_peer_max_number_of_prefixes)
        pulumi.set(__self__, "disable_peer_max_number_of_prefixes_variable", disable_peer_max_number_of_prefixes_variable)
        pulumi.set(__self__, "disable_peer_threshold", disable_peer_threshold)
        pulumi.set(__self__, "disable_peer_threshold_variable", disable_peer_threshold_variable)
        pulumi.set(__self__, "family_type", family_type)
        pulumi.set(__self__, "in_route_policy_id", in_route_policy_id)
        pulumi.set(__self__, "out_route_policy_id", out_route_policy_id)
        pulumi.set(__self__, "policy_type", policy_type)
        pulumi.set(__self__, "restart_interval", restart_interval)
        pulumi.set(__self__, "restart_interval_variable", restart_interval_variable)
        pulumi.set(__self__, "restart_max_number_of_prefixes", restart_max_number_of_prefixes)
        pulumi.set(__self__, "restart_max_number_of_prefixes_variable", restart_max_number_of_prefixes_variable)
        pulumi.set(__self__, "restart_threshold", restart_threshold)
        pulumi.set(__self__, "restart_threshold_variable", restart_threshold_variable)
        pulumi.set(__self__, "warning_message_max_number_of_prefixes", warning_message_max_number_of_prefixes)
        pulumi.set(__self__, "warning_message_max_number_of_prefixes_variable", warning_message_max_number_of_prefixes_variable)
        pulumi.set(__self__, "warning_message_threshold", warning_message_threshold)
        pulumi.set(__self__, "warning_message_threshold_variable", warning_message_threshold_variable)

    @_builtins.property
    @pulumi.getter(name="disablePeerMaxNumberOfPrefixes")
    def disable_peer_max_number_of_prefixes(self) -> _builtins.int:
        """
        Set maximum number of prefixes accepted from BGP peer
        """
        return pulumi.get(self, "disable_peer_max_number_of_prefixes")

    @_builtins.property
    @pulumi.getter(name="disablePeerMaxNumberOfPrefixesVariable")
    def disable_peer_max_number_of_prefixes_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "disable_peer_max_number_of_prefixes_variable")

    @_builtins.property
    @pulumi.getter(name="disablePeerThreshold")
    def disable_peer_threshold(self) -> _builtins.int:
        """
        Set threshold(1 to 100) at which to generate a warning message
        """
        return pulumi.get(self, "disable_peer_threshold")

    @_builtins.property
    @pulumi.getter(name="disablePeerThresholdVariable")
    def disable_peer_threshold_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "disable_peer_threshold_variable")

    @_builtins.property
    @pulumi.getter(name="familyType")
    def family_type(self) -> _builtins.str:
        """
        Set IPv4 unicast address family
        """
        return pulumi.get(self, "family_type")

    @_builtins.property
    @pulumi.getter(name="inRoutePolicyId")
    def in_route_policy_id(self) -> _builtins.str:
        return pulumi.get(self, "in_route_policy_id")

    @_builtins.property
    @pulumi.getter(name="outRoutePolicyId")
    def out_route_policy_id(self) -> _builtins.str:
        return pulumi.get(self, "out_route_policy_id")

    @_builtins.property
    @pulumi.getter(name="policyType")
    def policy_type(self) -> _builtins.str:
        """
        Neighbor received maximum prefix policy is disabled.
        """
        return pulumi.get(self, "policy_type")

    @_builtins.property
    @pulumi.getter(name="restartInterval")
    def restart_interval(self) -> _builtins.int:
        """
        Set the restart interval(minutes) when to restart BGP connection if threshold is exceeded
        """
        return pulumi.get(self, "restart_interval")

    @_builtins.property
    @pulumi.getter(name="restartIntervalVariable")
    def restart_interval_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "restart_interval_variable")

    @_builtins.property
    @pulumi.getter(name="restartMaxNumberOfPrefixes")
    def restart_max_number_of_prefixes(self) -> _builtins.int:
        """
        Set maximum number of prefixes accepted from BGP peer
        """
        return pulumi.get(self, "restart_max_number_of_prefixes")

    @_builtins.property
    @pulumi.getter(name="restartMaxNumberOfPrefixesVariable")
    def restart_max_number_of_prefixes_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "restart_max_number_of_prefixes_variable")

    @_builtins.property
    @pulumi.getter(name="restartThreshold")
    def restart_threshold(self) -> _builtins.int:
        """
        Set threshold(1 to 100) at which to generate a warning message
        """
        return pulumi.get(self, "restart_threshold")

    @_builtins.property
    @pulumi.getter(name="restartThresholdVariable")
    def restart_threshold_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "restart_threshold_variable")

    @_builtins.property
    @pulumi.getter(name="warningMessageMaxNumberOfPrefixes")
    def warning_message_max_number_of_prefixes(self) -> _builtins.int:
        """
        Set maximum number of prefixes accepted from BGP peer
        """
        return pulumi.get(self, "warning_message_max_number_of_prefixes")

    @_builtins.property
    @pulumi.getter(name="warningMessageMaxNumberOfPrefixesVariable")
    def warning_message_max_number_of_prefixes_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "warning_message_max_number_of_prefixes_variable")

    @_builtins.property
    @pulumi.getter(name="warningMessageThreshold")
    def warning_message_threshold(self) -> _builtins.int:
        """
        Set threshold(1 to 100) at which to generate a warning message
        """
        return pulumi.get(self, "warning_message_threshold")

    @_builtins.property
    @pulumi.getter(name="warningMessageThresholdVariable")
    def warning_message_threshold_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "warning_message_threshold_variable")


@pulumi.output_type
class GetServiceRoutingBgpFeatureIpv4NetworkResult(dict):
    def __init__(__self__, *,
                 network_address: _builtins.str,
                 network_address_variable: _builtins.str,
                 subnet_mask: _builtins.str,
                 subnet_mask_variable: _builtins.str):
        """
        :param _builtins.str network_address_variable: Variable name
        :param _builtins.str subnet_mask_variable: Variable name
        """
        pulumi.set(__self__, "network_address", network_address)
        pulumi.set(__self__, "network_address_variable", network_address_variable)
        pulumi.set(__self__, "subnet_mask", subnet_mask)
        pulumi.set(__self__, "subnet_mask_variable", subnet_mask_variable)

    @_builtins.property
    @pulumi.getter(name="networkAddress")
    def network_address(self) -> _builtins.str:
        return pulumi.get(self, "network_address")

    @_builtins.property
    @pulumi.getter(name="networkAddressVariable")
    def network_address_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "network_address_variable")

    @_builtins.property
    @pulumi.getter(name="subnetMask")
    def subnet_mask(self) -> _builtins.str:
        return pulumi.get(self, "subnet_mask")

    @_builtins.property
    @pulumi.getter(name="subnetMaskVariable")
    def subnet_mask_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "subnet_mask_variable")


@pulumi.output_type
class GetServiceRoutingBgpFeatureIpv4RedistributeResult(dict):
    def __init__(__self__, *,
                 protocol: _builtins.str,
                 protocol_variable: _builtins.str,
                 route_policy_id: _builtins.str,
                 translate_rib_metric: _builtins.bool):
        """
        :param _builtins.str protocol: Set the protocol to redistribute routes from
        :param _builtins.str protocol_variable: Variable name
        :param _builtins.bool translate_rib_metric: Translate Rib Metric
        """
        pulumi.set(__self__, "protocol", protocol)
        pulumi.set(__self__, "protocol_variable", protocol_variable)
        pulumi.set(__self__, "route_policy_id", route_policy_id)
        pulumi.set(__self__, "translate_rib_metric", translate_rib_metric)

    @_builtins.property
    @pulumi.getter
    def protocol(self) -> _builtins.str:
        """
        Set the protocol to redistribute routes from
        """
        return pulumi.get(self, "protocol")

    @_builtins.property
    @pulumi.getter(name="protocolVariable")
    def protocol_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "protocol_variable")

    @_builtins.property
    @pulumi.getter(name="routePolicyId")
    def route_policy_id(self) -> _builtins.str:
        return pulumi.get(self, "route_policy_id")

    @_builtins.property
    @pulumi.getter(name="translateRibMetric")
    def translate_rib_metric(self) -> _builtins.bool:
        """
        Translate Rib Metric
        """
        return pulumi.get(self, "translate_rib_metric")


@pulumi.output_type
class GetServiceRoutingBgpFeatureIpv6AggregateAddressResult(dict):
    def __init__(__self__, *,
                 aggregate_prefix: _builtins.str,
                 aggregate_prefix_variable: _builtins.str,
                 as_set_path: _builtins.bool,
                 as_set_path_variable: _builtins.str,
                 summary_only: _builtins.bool,
                 summary_only_variable: _builtins.str):
        """
        :param _builtins.str aggregate_prefix: Configure the IPv6 prefixes to aggregate
        :param _builtins.str aggregate_prefix_variable: Variable name
        :param _builtins.bool as_set_path: Set AS set path information
        :param _builtins.str as_set_path_variable: Variable name
        :param _builtins.bool summary_only: Filter out more specific routes from updates
        :param _builtins.str summary_only_variable: Variable name
        """
        pulumi.set(__self__, "aggregate_prefix", aggregate_prefix)
        pulumi.set(__self__, "aggregate_prefix_variable", aggregate_prefix_variable)
        pulumi.set(__self__, "as_set_path", as_set_path)
        pulumi.set(__self__, "as_set_path_variable", as_set_path_variable)
        pulumi.set(__self__, "summary_only", summary_only)
        pulumi.set(__self__, "summary_only_variable", summary_only_variable)

    @_builtins.property
    @pulumi.getter(name="aggregatePrefix")
    def aggregate_prefix(self) -> _builtins.str:
        """
        Configure the IPv6 prefixes to aggregate
        """
        return pulumi.get(self, "aggregate_prefix")

    @_builtins.property
    @pulumi.getter(name="aggregatePrefixVariable")
    def aggregate_prefix_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "aggregate_prefix_variable")

    @_builtins.property
    @pulumi.getter(name="asSetPath")
    def as_set_path(self) -> _builtins.bool:
        """
        Set AS set path information
        """
        return pulumi.get(self, "as_set_path")

    @_builtins.property
    @pulumi.getter(name="asSetPathVariable")
    def as_set_path_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "as_set_path_variable")

    @_builtins.property
    @pulumi.getter(name="summaryOnly")
    def summary_only(self) -> _builtins.bool:
        """
        Filter out more specific routes from updates
        """
        return pulumi.get(self, "summary_only")

    @_builtins.property
    @pulumi.getter(name="summaryOnlyVariable")
    def summary_only_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "summary_only_variable")


@pulumi.output_type
class GetServiceRoutingBgpFeatureIpv6NeighborResult(dict):
    def __init__(__self__, *,
                 address: _builtins.str,
                 address_families: Sequence['outputs.GetServiceRoutingBgpFeatureIpv6NeighborAddressFamilyResult'],
                 address_variable: _builtins.str,
                 allowas_in_number: _builtins.int,
                 allowas_in_number_variable: _builtins.str,
                 as_override: _builtins.bool,
                 as_override_variable: _builtins.str,
                 description: _builtins.str,
                 description_variable: _builtins.str,
                 ebgp_multihop: _builtins.int,
                 ebgp_multihop_variable: _builtins.str,
                 hold_time: _builtins.int,
                 hold_time_variable: _builtins.str,
                 keepalive_time: _builtins.int,
                 keepalive_time_variable: _builtins.str,
                 local_as: _builtins.int,
                 local_as_variable: _builtins.str,
                 next_hop_self: _builtins.bool,
                 next_hop_self_variable: _builtins.str,
                 password: _builtins.str,
                 password_variable: _builtins.str,
                 remote_as: _builtins.int,
                 remote_as_variable: _builtins.str,
                 send_community: _builtins.bool,
                 send_community_variable: _builtins.str,
                 send_extended_community: _builtins.bool,
                 send_extended_community_variable: _builtins.str,
                 shutdown: _builtins.bool,
                 shutdown_variable: _builtins.str,
                 update_source_interface: _builtins.str,
                 update_source_interface_variable: _builtins.str):
        """
        :param _builtins.str address: Set IPv6 neighbor address
        :param Sequence['GetServiceRoutingBgpFeatureIpv6NeighborAddressFamilyArgs'] address_families: Set IPv6 BGP address family
        :param _builtins.str address_variable: Variable name
        :param _builtins.int allowas_in_number: The number of accept as-path with my AS present in it
        :param _builtins.str allowas_in_number_variable: Variable name
        :param _builtins.bool as_override: Override matching AS-number while sending update
        :param _builtins.str as_override_variable: Variable name
        :param _builtins.str description: Set description
        :param _builtins.str description_variable: Variable name
        :param _builtins.int ebgp_multihop: Set TTL value for peers that are not directly connected
        :param _builtins.str ebgp_multihop_variable: Variable name
        :param _builtins.int hold_time: Set how long to wait since receiving a keepalive message to consider BGP peer unavailable
        :param _builtins.str hold_time_variable: Variable name
        :param _builtins.int keepalive_time: Set how often to advertise keepalive messages to BGP peer
        :param _builtins.str keepalive_time_variable: Variable name
        :param _builtins.int local_as: Set local autonomous number,Local-AS cannot have the local BGP protocol AS number or the AS number of the remote peer.The local-as is valid only if the peer is a true eBGP peer. It does not work for two peers in different sub-ASs in a confederation.
        :param _builtins.str local_as_variable: Variable name
        :param _builtins.bool next_hop_self: Set router to be next hop for routes advertised to neighbor
        :param _builtins.str next_hop_self_variable: Variable name
        :param _builtins.str password: Set MD5 password on TCP connection with BGP peer
        :param _builtins.str password_variable: Variable name
        :param _builtins.int remote_as: Set remote autonomous system number
        :param _builtins.str remote_as_variable: Variable name
        :param _builtins.bool send_community: Send community attribute
        :param _builtins.str send_community_variable: Variable name
        :param _builtins.bool send_extended_community: Send extended community attribute
        :param _builtins.str send_extended_community_variable: Variable name
        :param _builtins.bool shutdown: Enable or disable a BGP neighbor
        :param _builtins.str shutdown_variable: Variable name
        :param _builtins.str update_source_interface: Source interface name for BGP neighbor
        :param _builtins.str update_source_interface_variable: Variable name
        """
        pulumi.set(__self__, "address", address)
        pulumi.set(__self__, "address_families", address_families)
        pulumi.set(__self__, "address_variable", address_variable)
        pulumi.set(__self__, "allowas_in_number", allowas_in_number)
        pulumi.set(__self__, "allowas_in_number_variable", allowas_in_number_variable)
        pulumi.set(__self__, "as_override", as_override)
        pulumi.set(__self__, "as_override_variable", as_override_variable)
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "description_variable", description_variable)
        pulumi.set(__self__, "ebgp_multihop", ebgp_multihop)
        pulumi.set(__self__, "ebgp_multihop_variable", ebgp_multihop_variable)
        pulumi.set(__self__, "hold_time", hold_time)
        pulumi.set(__self__, "hold_time_variable", hold_time_variable)
        pulumi.set(__self__, "keepalive_time", keepalive_time)
        pulumi.set(__self__, "keepalive_time_variable", keepalive_time_variable)
        pulumi.set(__self__, "local_as", local_as)
        pulumi.set(__self__, "local_as_variable", local_as_variable)
        pulumi.set(__self__, "next_hop_self", next_hop_self)
        pulumi.set(__self__, "next_hop_self_variable", next_hop_self_variable)
        pulumi.set(__self__, "password", password)
        pulumi.set(__self__, "password_variable", password_variable)
        pulumi.set(__self__, "remote_as", remote_as)
        pulumi.set(__self__, "remote_as_variable", remote_as_variable)
        pulumi.set(__self__, "send_community", send_community)
        pulumi.set(__self__, "send_community_variable", send_community_variable)
        pulumi.set(__self__, "send_extended_community", send_extended_community)
        pulumi.set(__self__, "send_extended_community_variable", send_extended_community_variable)
        pulumi.set(__self__, "shutdown", shutdown)
        pulumi.set(__self__, "shutdown_variable", shutdown_variable)
        pulumi.set(__self__, "update_source_interface", update_source_interface)
        pulumi.set(__self__, "update_source_interface_variable", update_source_interface_variable)

    @_builtins.property
    @pulumi.getter
    def address(self) -> _builtins.str:
        """
        Set IPv6 neighbor address
        """
        return pulumi.get(self, "address")

    @_builtins.property
    @pulumi.getter(name="addressFamilies")
    def address_families(self) -> Sequence['outputs.GetServiceRoutingBgpFeatureIpv6NeighborAddressFamilyResult']:
        """
        Set IPv6 BGP address family
        """
        return pulumi.get(self, "address_families")

    @_builtins.property
    @pulumi.getter(name="addressVariable")
    def address_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "address_variable")

    @_builtins.property
    @pulumi.getter(name="allowasInNumber")
    def allowas_in_number(self) -> _builtins.int:
        """
        The number of accept as-path with my AS present in it
        """
        return pulumi.get(self, "allowas_in_number")

    @_builtins.property
    @pulumi.getter(name="allowasInNumberVariable")
    def allowas_in_number_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "allowas_in_number_variable")

    @_builtins.property
    @pulumi.getter(name="asOverride")
    def as_override(self) -> _builtins.bool:
        """
        Override matching AS-number while sending update
        """
        return pulumi.get(self, "as_override")

    @_builtins.property
    @pulumi.getter(name="asOverrideVariable")
    def as_override_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "as_override_variable")

    @_builtins.property
    @pulumi.getter
    def description(self) -> _builtins.str:
        """
        Set description
        """
        return pulumi.get(self, "description")

    @_builtins.property
    @pulumi.getter(name="descriptionVariable")
    def description_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "description_variable")

    @_builtins.property
    @pulumi.getter(name="ebgpMultihop")
    def ebgp_multihop(self) -> _builtins.int:
        """
        Set TTL value for peers that are not directly connected
        """
        return pulumi.get(self, "ebgp_multihop")

    @_builtins.property
    @pulumi.getter(name="ebgpMultihopVariable")
    def ebgp_multihop_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "ebgp_multihop_variable")

    @_builtins.property
    @pulumi.getter(name="holdTime")
    def hold_time(self) -> _builtins.int:
        """
        Set how long to wait since receiving a keepalive message to consider BGP peer unavailable
        """
        return pulumi.get(self, "hold_time")

    @_builtins.property
    @pulumi.getter(name="holdTimeVariable")
    def hold_time_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "hold_time_variable")

    @_builtins.property
    @pulumi.getter(name="keepaliveTime")
    def keepalive_time(self) -> _builtins.int:
        """
        Set how often to advertise keepalive messages to BGP peer
        """
        return pulumi.get(self, "keepalive_time")

    @_builtins.property
    @pulumi.getter(name="keepaliveTimeVariable")
    def keepalive_time_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "keepalive_time_variable")

    @_builtins.property
    @pulumi.getter(name="localAs")
    def local_as(self) -> _builtins.int:
        """
        Set local autonomous number,Local-AS cannot have the local BGP protocol AS number or the AS number of the remote peer.The local-as is valid only if the peer is a true eBGP peer. It does not work for two peers in different sub-ASs in a confederation.
        """
        return pulumi.get(self, "local_as")

    @_builtins.property
    @pulumi.getter(name="localAsVariable")
    def local_as_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "local_as_variable")

    @_builtins.property
    @pulumi.getter(name="nextHopSelf")
    def next_hop_self(self) -> _builtins.bool:
        """
        Set router to be next hop for routes advertised to neighbor
        """
        return pulumi.get(self, "next_hop_self")

    @_builtins.property
    @pulumi.getter(name="nextHopSelfVariable")
    def next_hop_self_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "next_hop_self_variable")

    @_builtins.property
    @pulumi.getter
    def password(self) -> _builtins.str:
        """
        Set MD5 password on TCP connection with BGP peer
        """
        return pulumi.get(self, "password")

    @_builtins.property
    @pulumi.getter(name="passwordVariable")
    def password_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "password_variable")

    @_builtins.property
    @pulumi.getter(name="remoteAs")
    def remote_as(self) -> _builtins.int:
        """
        Set remote autonomous system number
        """
        return pulumi.get(self, "remote_as")

    @_builtins.property
    @pulumi.getter(name="remoteAsVariable")
    def remote_as_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "remote_as_variable")

    @_builtins.property
    @pulumi.getter(name="sendCommunity")
    def send_community(self) -> _builtins.bool:
        """
        Send community attribute
        """
        return pulumi.get(self, "send_community")

    @_builtins.property
    @pulumi.getter(name="sendCommunityVariable")
    def send_community_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "send_community_variable")

    @_builtins.property
    @pulumi.getter(name="sendExtendedCommunity")
    def send_extended_community(self) -> _builtins.bool:
        """
        Send extended community attribute
        """
        return pulumi.get(self, "send_extended_community")

    @_builtins.property
    @pulumi.getter(name="sendExtendedCommunityVariable")
    def send_extended_community_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "send_extended_community_variable")

    @_builtins.property
    @pulumi.getter
    def shutdown(self) -> _builtins.bool:
        """
        Enable or disable a BGP neighbor
        """
        return pulumi.get(self, "shutdown")

    @_builtins.property
    @pulumi.getter(name="shutdownVariable")
    def shutdown_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "shutdown_variable")

    @_builtins.property
    @pulumi.getter(name="updateSourceInterface")
    def update_source_interface(self) -> _builtins.str:
        """
        Source interface name for BGP neighbor
        """
        return pulumi.get(self, "update_source_interface")

    @_builtins.property
    @pulumi.getter(name="updateSourceInterfaceVariable")
    def update_source_interface_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "update_source_interface_variable")


@pulumi.output_type
class GetServiceRoutingBgpFeatureIpv6NeighborAddressFamilyResult(dict):
    def __init__(__self__, *,
                 family_type: _builtins.str,
                 in_route_policy_id: _builtins.str,
                 max_number_of_prefixes: _builtins.int,
                 max_number_of_prefixes_variable: _builtins.str,
                 out_route_policy_id: _builtins.str,
                 policy_type: _builtins.str,
                 restart_interval: _builtins.int,
                 restart_interval_variable: _builtins.str,
                 threshold: _builtins.int,
                 threshold_variable: _builtins.str):
        """
        :param _builtins.str family_type: Set IPv6 unicast address family
        :param _builtins.int max_number_of_prefixes: Set maximum number of prefixes accepted from BGP peer
        :param _builtins.str max_number_of_prefixes_variable: Variable name
        :param _builtins.str policy_type: Neighbor received maximum prefix policy is disabled.
        :param _builtins.int restart_interval: Set the restart interval(minutes) when to restart BGP connection if threshold is exceeded
        :param _builtins.str restart_interval_variable: Variable name
        :param _builtins.int threshold: Set threshold(1 to 100) at which to generate a warning message
        :param _builtins.str threshold_variable: Variable name
        """
        pulumi.set(__self__, "family_type", family_type)
        pulumi.set(__self__, "in_route_policy_id", in_route_policy_id)
        pulumi.set(__self__, "max_number_of_prefixes", max_number_of_prefixes)
        pulumi.set(__self__, "max_number_of_prefixes_variable", max_number_of_prefixes_variable)
        pulumi.set(__self__, "out_route_policy_id", out_route_policy_id)
        pulumi.set(__self__, "policy_type", policy_type)
        pulumi.set(__self__, "restart_interval", restart_interval)
        pulumi.set(__self__, "restart_interval_variable", restart_interval_variable)
        pulumi.set(__self__, "threshold", threshold)
        pulumi.set(__self__, "threshold_variable", threshold_variable)

    @_builtins.property
    @pulumi.getter(name="familyType")
    def family_type(self) -> _builtins.str:
        """
        Set IPv6 unicast address family
        """
        return pulumi.get(self, "family_type")

    @_builtins.property
    @pulumi.getter(name="inRoutePolicyId")
    def in_route_policy_id(self) -> _builtins.str:
        return pulumi.get(self, "in_route_policy_id")

    @_builtins.property
    @pulumi.getter(name="maxNumberOfPrefixes")
    def max_number_of_prefixes(self) -> _builtins.int:
        """
        Set maximum number of prefixes accepted from BGP peer
        """
        return pulumi.get(self, "max_number_of_prefixes")

    @_builtins.property
    @pulumi.getter(name="maxNumberOfPrefixesVariable")
    def max_number_of_prefixes_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "max_number_of_prefixes_variable")

    @_builtins.property
    @pulumi.getter(name="outRoutePolicyId")
    def out_route_policy_id(self) -> _builtins.str:
        return pulumi.get(self, "out_route_policy_id")

    @_builtins.property
    @pulumi.getter(name="policyType")
    def policy_type(self) -> _builtins.str:
        """
        Neighbor received maximum prefix policy is disabled.
        """
        return pulumi.get(self, "policy_type")

    @_builtins.property
    @pulumi.getter(name="restartInterval")
    def restart_interval(self) -> _builtins.int:
        """
        Set the restart interval(minutes) when to restart BGP connection if threshold is exceeded
        """
        return pulumi.get(self, "restart_interval")

    @_builtins.property
    @pulumi.getter(name="restartIntervalVariable")
    def restart_interval_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "restart_interval_variable")

    @_builtins.property
    @pulumi.getter
    def threshold(self) -> _builtins.int:
        """
        Set threshold(1 to 100) at which to generate a warning message
        """
        return pulumi.get(self, "threshold")

    @_builtins.property
    @pulumi.getter(name="thresholdVariable")
    def threshold_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "threshold_variable")


@pulumi.output_type
class GetServiceRoutingBgpFeatureIpv6NetworkResult(dict):
    def __init__(__self__, *,
                 network_prefix: _builtins.str,
                 network_prefix_variable: _builtins.str):
        """
        :param _builtins.str network_prefix: Configure the prefixes for BGP to announce
        :param _builtins.str network_prefix_variable: Variable name
        """
        pulumi.set(__self__, "network_prefix", network_prefix)
        pulumi.set(__self__, "network_prefix_variable", network_prefix_variable)

    @_builtins.property
    @pulumi.getter(name="networkPrefix")
    def network_prefix(self) -> _builtins.str:
        """
        Configure the prefixes for BGP to announce
        """
        return pulumi.get(self, "network_prefix")

    @_builtins.property
    @pulumi.getter(name="networkPrefixVariable")
    def network_prefix_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "network_prefix_variable")


@pulumi.output_type
class GetServiceRoutingBgpFeatureIpv6RedistributeResult(dict):
    def __init__(__self__, *,
                 protocol: _builtins.str,
                 protocol_variable: _builtins.str,
                 route_policy_id: _builtins.str,
                 translate_rib_metric: _builtins.bool):
        """
        :param _builtins.str protocol: Set the protocol to redistribute routes from
        :param _builtins.str protocol_variable: Variable name
        :param _builtins.bool translate_rib_metric: Translate Rib Metric
        """
        pulumi.set(__self__, "protocol", protocol)
        pulumi.set(__self__, "protocol_variable", protocol_variable)
        pulumi.set(__self__, "route_policy_id", route_policy_id)
        pulumi.set(__self__, "translate_rib_metric", translate_rib_metric)

    @_builtins.property
    @pulumi.getter
    def protocol(self) -> _builtins.str:
        """
        Set the protocol to redistribute routes from
        """
        return pulumi.get(self, "protocol")

    @_builtins.property
    @pulumi.getter(name="protocolVariable")
    def protocol_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "protocol_variable")

    @_builtins.property
    @pulumi.getter(name="routePolicyId")
    def route_policy_id(self) -> _builtins.str:
        return pulumi.get(self, "route_policy_id")

    @_builtins.property
    @pulumi.getter(name="translateRibMetric")
    def translate_rib_metric(self) -> _builtins.bool:
        """
        Translate Rib Metric
        """
        return pulumi.get(self, "translate_rib_metric")


@pulumi.output_type
class GetServiceRoutingEigrpFeatureInterfaceResult(dict):
    def __init__(__self__, *,
                 name: _builtins.str,
                 name_variable: _builtins.str,
                 shutdown: _builtins.bool,
                 shutdown_variable: _builtins.str,
                 summary_addresses: Sequence['outputs.GetServiceRoutingEigrpFeatureInterfaceSummaryAddressResult']):
        """
        :param _builtins.str name: Set interface name
        :param _builtins.str name_variable: Variable name
        :param _builtins.bool shutdown: Enable/disable EIGRP
        :param _builtins.str shutdown_variable: Variable name
        :param Sequence['GetServiceRoutingEigrpFeatureInterfaceSummaryAddressArgs'] summary_addresses: Set summary addresses
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "name_variable", name_variable)
        pulumi.set(__self__, "shutdown", shutdown)
        pulumi.set(__self__, "shutdown_variable", shutdown_variable)
        pulumi.set(__self__, "summary_addresses", summary_addresses)

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        """
        Set interface name
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter(name="nameVariable")
    def name_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "name_variable")

    @_builtins.property
    @pulumi.getter
    def shutdown(self) -> _builtins.bool:
        """
        Enable/disable EIGRP
        """
        return pulumi.get(self, "shutdown")

    @_builtins.property
    @pulumi.getter(name="shutdownVariable")
    def shutdown_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "shutdown_variable")

    @_builtins.property
    @pulumi.getter(name="summaryAddresses")
    def summary_addresses(self) -> Sequence['outputs.GetServiceRoutingEigrpFeatureInterfaceSummaryAddressResult']:
        """
        Set summary addresses
        """
        return pulumi.get(self, "summary_addresses")


@pulumi.output_type
class GetServiceRoutingEigrpFeatureInterfaceSummaryAddressResult(dict):
    def __init__(__self__, *,
                 address: _builtins.str,
                 address_variable: _builtins.str,
                 mask: _builtins.str,
                 mask_variable: _builtins.str):
        """
        :param _builtins.str address_variable: Variable name
        :param _builtins.str mask_variable: Variable name
        """
        pulumi.set(__self__, "address", address)
        pulumi.set(__self__, "address_variable", address_variable)
        pulumi.set(__self__, "mask", mask)
        pulumi.set(__self__, "mask_variable", mask_variable)

    @_builtins.property
    @pulumi.getter
    def address(self) -> _builtins.str:
        return pulumi.get(self, "address")

    @_builtins.property
    @pulumi.getter(name="addressVariable")
    def address_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "address_variable")

    @_builtins.property
    @pulumi.getter
    def mask(self) -> _builtins.str:
        return pulumi.get(self, "mask")

    @_builtins.property
    @pulumi.getter(name="maskVariable")
    def mask_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "mask_variable")


@pulumi.output_type
class GetServiceRoutingEigrpFeatureMd5KeyResult(dict):
    def __init__(__self__, *,
                 key_id: _builtins.int,
                 key_id_variable: _builtins.str,
                 key_string: _builtins.str,
                 key_string_variable: _builtins.str):
        """
        :param _builtins.int key_id: Set MD5 key ID
        :param _builtins.str key_id_variable: Variable name
        :param _builtins.str key_string: Set MD5 key
        :param _builtins.str key_string_variable: Variable name
        """
        pulumi.set(__self__, "key_id", key_id)
        pulumi.set(__self__, "key_id_variable", key_id_variable)
        pulumi.set(__self__, "key_string", key_string)
        pulumi.set(__self__, "key_string_variable", key_string_variable)

    @_builtins.property
    @pulumi.getter(name="keyId")
    def key_id(self) -> _builtins.int:
        """
        Set MD5 key ID
        """
        return pulumi.get(self, "key_id")

    @_builtins.property
    @pulumi.getter(name="keyIdVariable")
    def key_id_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "key_id_variable")

    @_builtins.property
    @pulumi.getter(name="keyString")
    def key_string(self) -> _builtins.str:
        """
        Set MD5 key
        """
        return pulumi.get(self, "key_string")

    @_builtins.property
    @pulumi.getter(name="keyStringVariable")
    def key_string_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "key_string_variable")


@pulumi.output_type
class GetServiceRoutingEigrpFeatureNetworkResult(dict):
    def __init__(__self__, *,
                 ip_address: _builtins.str,
                 ip_address_variable: _builtins.str,
                 mask: _builtins.str,
                 mask_variable: _builtins.str):
        """
        :param _builtins.str ip_address_variable: Variable name
        :param _builtins.str mask_variable: Variable name
        """
        pulumi.set(__self__, "ip_address", ip_address)
        pulumi.set(__self__, "ip_address_variable", ip_address_variable)
        pulumi.set(__self__, "mask", mask)
        pulumi.set(__self__, "mask_variable", mask_variable)

    @_builtins.property
    @pulumi.getter(name="ipAddress")
    def ip_address(self) -> _builtins.str:
        return pulumi.get(self, "ip_address")

    @_builtins.property
    @pulumi.getter(name="ipAddressVariable")
    def ip_address_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "ip_address_variable")

    @_builtins.property
    @pulumi.getter
    def mask(self) -> _builtins.str:
        return pulumi.get(self, "mask")

    @_builtins.property
    @pulumi.getter(name="maskVariable")
    def mask_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "mask_variable")


@pulumi.output_type
class GetServiceRoutingEigrpFeatureRedistributeResult(dict):
    def __init__(__self__, *,
                 protocol: _builtins.str,
                 protocol_variable: _builtins.str,
                 route_policy_id: _builtins.str):
        """
        :param _builtins.str protocol: Set the protocol to redistribute routes from
        :param _builtins.str protocol_variable: Variable name
        """
        pulumi.set(__self__, "protocol", protocol)
        pulumi.set(__self__, "protocol_variable", protocol_variable)
        pulumi.set(__self__, "route_policy_id", route_policy_id)

    @_builtins.property
    @pulumi.getter
    def protocol(self) -> _builtins.str:
        """
        Set the protocol to redistribute routes from
        """
        return pulumi.get(self, "protocol")

    @_builtins.property
    @pulumi.getter(name="protocolVariable")
    def protocol_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "protocol_variable")

    @_builtins.property
    @pulumi.getter(name="routePolicyId")
    def route_policy_id(self) -> _builtins.str:
        return pulumi.get(self, "route_policy_id")


@pulumi.output_type
class GetServiceRoutingOspfFeatureAreaResult(dict):
    def __init__(__self__, *,
                 area_number: _builtins.int,
                 area_number_variable: _builtins.str,
                 area_type: _builtins.str,
                 interfaces: Sequence['outputs.GetServiceRoutingOspfFeatureAreaInterfaceResult'],
                 no_summary: _builtins.bool,
                 no_summary_variable: _builtins.str,
                 ranges: Sequence['outputs.GetServiceRoutingOspfFeatureAreaRangeResult']):
        """
        :param _builtins.int area_number: Set OSPF area number
        :param _builtins.str area_number_variable: Variable name
        :param _builtins.str area_type: set the area type
        :param Sequence['GetServiceRoutingOspfFeatureAreaInterfaceArgs'] interfaces: Set OSPF interface parameters
        :param _builtins.bool no_summary: Do not inject interarea routes into STUB or NSSA
        :param _builtins.str no_summary_variable: Variable name
        :param Sequence['GetServiceRoutingOspfFeatureAreaRangeArgs'] ranges: Summarize OSPF routes at an area boundary
        """
        pulumi.set(__self__, "area_number", area_number)
        pulumi.set(__self__, "area_number_variable", area_number_variable)
        pulumi.set(__self__, "area_type", area_type)
        pulumi.set(__self__, "interfaces", interfaces)
        pulumi.set(__self__, "no_summary", no_summary)
        pulumi.set(__self__, "no_summary_variable", no_summary_variable)
        pulumi.set(__self__, "ranges", ranges)

    @_builtins.property
    @pulumi.getter(name="areaNumber")
    def area_number(self) -> _builtins.int:
        """
        Set OSPF area number
        """
        return pulumi.get(self, "area_number")

    @_builtins.property
    @pulumi.getter(name="areaNumberVariable")
    def area_number_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "area_number_variable")

    @_builtins.property
    @pulumi.getter(name="areaType")
    def area_type(self) -> _builtins.str:
        """
        set the area type
        """
        return pulumi.get(self, "area_type")

    @_builtins.property
    @pulumi.getter
    def interfaces(self) -> Sequence['outputs.GetServiceRoutingOspfFeatureAreaInterfaceResult']:
        """
        Set OSPF interface parameters
        """
        return pulumi.get(self, "interfaces")

    @_builtins.property
    @pulumi.getter(name="noSummary")
    def no_summary(self) -> _builtins.bool:
        """
        Do not inject interarea routes into STUB or NSSA
        """
        return pulumi.get(self, "no_summary")

    @_builtins.property
    @pulumi.getter(name="noSummaryVariable")
    def no_summary_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "no_summary_variable")

    @_builtins.property
    @pulumi.getter
    def ranges(self) -> Sequence['outputs.GetServiceRoutingOspfFeatureAreaRangeResult']:
        """
        Summarize OSPF routes at an area boundary
        """
        return pulumi.get(self, "ranges")


@pulumi.output_type
class GetServiceRoutingOspfFeatureAreaInterfaceResult(dict):
    def __init__(__self__, *,
                 authentication_type: _builtins.str,
                 authentication_type_variable: _builtins.str,
                 cost: _builtins.int,
                 cost_variable: _builtins.str,
                 dead_interval: _builtins.int,
                 dead_interval_variable: _builtins.str,
                 designated_router_priority: _builtins.int,
                 designated_router_priority_variable: _builtins.str,
                 hello_interval: _builtins.int,
                 hello_interval_variable: _builtins.str,
                 lsa_retransmit_interval: _builtins.int,
                 lsa_retransmit_interval_variable: _builtins.str,
                 message_digest_key: _builtins.str,
                 message_digest_key_id: _builtins.int,
                 message_digest_key_id_variable: _builtins.str,
                 message_digest_key_variable: _builtins.str,
                 name: _builtins.str,
                 name_variable: _builtins.str,
                 network_type: _builtins.str,
                 network_type_variable: _builtins.str,
                 passive_interface: _builtins.bool,
                 passive_interface_variable: _builtins.str):
        """
        :param _builtins.str authentication_type: Set OSPF interface authentication type
        :param _builtins.str authentication_type_variable: Variable name
        :param _builtins.int cost: Set cost of OSPF interface
        :param _builtins.str cost_variable: Variable name
        :param _builtins.int dead_interval: Set interval after which neighbor is declared to be down
        :param _builtins.str dead_interval_variable: Variable name
        :param _builtins.int designated_router_priority: Set router’s priority to be elected as designated router
        :param _builtins.str designated_router_priority_variable: Variable name
        :param _builtins.int hello_interval: Set interval between OSPF hello packets
        :param _builtins.str hello_interval_variable: Variable name
        :param _builtins.int lsa_retransmit_interval: Set time between retransmitting LSAs
        :param _builtins.str lsa_retransmit_interval_variable: Variable name
        :param _builtins.str message_digest_key: Set MD5 authentication key
        :param _builtins.int message_digest_key_id: Set MD5 message digest key
        :param _builtins.str message_digest_key_id_variable: Variable name
        :param _builtins.str message_digest_key_variable: Variable name
        :param _builtins.str name: Set interface name
        :param _builtins.str name_variable: Variable name
        :param _builtins.str network_type: Set the OSPF network type
        :param _builtins.str network_type_variable: Variable name
        :param _builtins.bool passive_interface: Set the interface to advertise its address, but not to actively run OSPF
        :param _builtins.str passive_interface_variable: Variable name
        """
        pulumi.set(__self__, "authentication_type", authentication_type)
        pulumi.set(__self__, "authentication_type_variable", authentication_type_variable)
        pulumi.set(__self__, "cost", cost)
        pulumi.set(__self__, "cost_variable", cost_variable)
        pulumi.set(__self__, "dead_interval", dead_interval)
        pulumi.set(__self__, "dead_interval_variable", dead_interval_variable)
        pulumi.set(__self__, "designated_router_priority", designated_router_priority)
        pulumi.set(__self__, "designated_router_priority_variable", designated_router_priority_variable)
        pulumi.set(__self__, "hello_interval", hello_interval)
        pulumi.set(__self__, "hello_interval_variable", hello_interval_variable)
        pulumi.set(__self__, "lsa_retransmit_interval", lsa_retransmit_interval)
        pulumi.set(__self__, "lsa_retransmit_interval_variable", lsa_retransmit_interval_variable)
        pulumi.set(__self__, "message_digest_key", message_digest_key)
        pulumi.set(__self__, "message_digest_key_id", message_digest_key_id)
        pulumi.set(__self__, "message_digest_key_id_variable", message_digest_key_id_variable)
        pulumi.set(__self__, "message_digest_key_variable", message_digest_key_variable)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "name_variable", name_variable)
        pulumi.set(__self__, "network_type", network_type)
        pulumi.set(__self__, "network_type_variable", network_type_variable)
        pulumi.set(__self__, "passive_interface", passive_interface)
        pulumi.set(__self__, "passive_interface_variable", passive_interface_variable)

    @_builtins.property
    @pulumi.getter(name="authenticationType")
    def authentication_type(self) -> _builtins.str:
        """
        Set OSPF interface authentication type
        """
        return pulumi.get(self, "authentication_type")

    @_builtins.property
    @pulumi.getter(name="authenticationTypeVariable")
    def authentication_type_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "authentication_type_variable")

    @_builtins.property
    @pulumi.getter
    def cost(self) -> _builtins.int:
        """
        Set cost of OSPF interface
        """
        return pulumi.get(self, "cost")

    @_builtins.property
    @pulumi.getter(name="costVariable")
    def cost_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "cost_variable")

    @_builtins.property
    @pulumi.getter(name="deadInterval")
    def dead_interval(self) -> _builtins.int:
        """
        Set interval after which neighbor is declared to be down
        """
        return pulumi.get(self, "dead_interval")

    @_builtins.property
    @pulumi.getter(name="deadIntervalVariable")
    def dead_interval_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "dead_interval_variable")

    @_builtins.property
    @pulumi.getter(name="designatedRouterPriority")
    def designated_router_priority(self) -> _builtins.int:
        """
        Set router’s priority to be elected as designated router
        """
        return pulumi.get(self, "designated_router_priority")

    @_builtins.property
    @pulumi.getter(name="designatedRouterPriorityVariable")
    def designated_router_priority_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "designated_router_priority_variable")

    @_builtins.property
    @pulumi.getter(name="helloInterval")
    def hello_interval(self) -> _builtins.int:
        """
        Set interval between OSPF hello packets
        """
        return pulumi.get(self, "hello_interval")

    @_builtins.property
    @pulumi.getter(name="helloIntervalVariable")
    def hello_interval_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "hello_interval_variable")

    @_builtins.property
    @pulumi.getter(name="lsaRetransmitInterval")
    def lsa_retransmit_interval(self) -> _builtins.int:
        """
        Set time between retransmitting LSAs
        """
        return pulumi.get(self, "lsa_retransmit_interval")

    @_builtins.property
    @pulumi.getter(name="lsaRetransmitIntervalVariable")
    def lsa_retransmit_interval_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "lsa_retransmit_interval_variable")

    @_builtins.property
    @pulumi.getter(name="messageDigestKey")
    def message_digest_key(self) -> _builtins.str:
        """
        Set MD5 authentication key
        """
        return pulumi.get(self, "message_digest_key")

    @_builtins.property
    @pulumi.getter(name="messageDigestKeyId")
    def message_digest_key_id(self) -> _builtins.int:
        """
        Set MD5 message digest key
        """
        return pulumi.get(self, "message_digest_key_id")

    @_builtins.property
    @pulumi.getter(name="messageDigestKeyIdVariable")
    def message_digest_key_id_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "message_digest_key_id_variable")

    @_builtins.property
    @pulumi.getter(name="messageDigestKeyVariable")
    def message_digest_key_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "message_digest_key_variable")

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        """
        Set interface name
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter(name="nameVariable")
    def name_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "name_variable")

    @_builtins.property
    @pulumi.getter(name="networkType")
    def network_type(self) -> _builtins.str:
        """
        Set the OSPF network type
        """
        return pulumi.get(self, "network_type")

    @_builtins.property
    @pulumi.getter(name="networkTypeVariable")
    def network_type_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "network_type_variable")

    @_builtins.property
    @pulumi.getter(name="passiveInterface")
    def passive_interface(self) -> _builtins.bool:
        """
        Set the interface to advertise its address, but not to actively run OSPF
        """
        return pulumi.get(self, "passive_interface")

    @_builtins.property
    @pulumi.getter(name="passiveInterfaceVariable")
    def passive_interface_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "passive_interface_variable")


@pulumi.output_type
class GetServiceRoutingOspfFeatureAreaRangeResult(dict):
    def __init__(__self__, *,
                 cost: _builtins.int,
                 cost_variable: _builtins.str,
                 ip_address: _builtins.str,
                 ip_address_variable: _builtins.str,
                 no_advertise: _builtins.bool,
                 no_advertise_variable: _builtins.str,
                 subnet_mask: _builtins.str,
                 subnet_mask_variable: _builtins.str):
        """
        :param _builtins.int cost: Set cost for this range
        :param _builtins.str cost_variable: Variable name
        :param _builtins.str ip_address: IP Address
        :param _builtins.str ip_address_variable: Variable name
        :param _builtins.bool no_advertise: Do not advertise this range
        :param _builtins.str no_advertise_variable: Variable name
        :param _builtins.str subnet_mask: Subnet Mask
        :param _builtins.str subnet_mask_variable: Variable name
        """
        pulumi.set(__self__, "cost", cost)
        pulumi.set(__self__, "cost_variable", cost_variable)
        pulumi.set(__self__, "ip_address", ip_address)
        pulumi.set(__self__, "ip_address_variable", ip_address_variable)
        pulumi.set(__self__, "no_advertise", no_advertise)
        pulumi.set(__self__, "no_advertise_variable", no_advertise_variable)
        pulumi.set(__self__, "subnet_mask", subnet_mask)
        pulumi.set(__self__, "subnet_mask_variable", subnet_mask_variable)

    @_builtins.property
    @pulumi.getter
    def cost(self) -> _builtins.int:
        """
        Set cost for this range
        """
        return pulumi.get(self, "cost")

    @_builtins.property
    @pulumi.getter(name="costVariable")
    def cost_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "cost_variable")

    @_builtins.property
    @pulumi.getter(name="ipAddress")
    def ip_address(self) -> _builtins.str:
        """
        IP Address
        """
        return pulumi.get(self, "ip_address")

    @_builtins.property
    @pulumi.getter(name="ipAddressVariable")
    def ip_address_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "ip_address_variable")

    @_builtins.property
    @pulumi.getter(name="noAdvertise")
    def no_advertise(self) -> _builtins.bool:
        """
        Do not advertise this range
        """
        return pulumi.get(self, "no_advertise")

    @_builtins.property
    @pulumi.getter(name="noAdvertiseVariable")
    def no_advertise_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "no_advertise_variable")

    @_builtins.property
    @pulumi.getter(name="subnetMask")
    def subnet_mask(self) -> _builtins.str:
        """
        Subnet Mask
        """
        return pulumi.get(self, "subnet_mask")

    @_builtins.property
    @pulumi.getter(name="subnetMaskVariable")
    def subnet_mask_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "subnet_mask_variable")


@pulumi.output_type
class GetServiceRoutingOspfFeatureRedistributeResult(dict):
    def __init__(__self__, *,
                 nat_dia: _builtins.bool,
                 nat_dia_variable: _builtins.str,
                 protocol: _builtins.str,
                 protocol_variable: _builtins.str,
                 route_policy_id: _builtins.str,
                 translate_rib_metric: _builtins.bool):
        """
        :param _builtins.bool nat_dia: Enable NAT DIA for redistributed routes
        :param _builtins.str nat_dia_variable: Variable name
        :param _builtins.str protocol: Set the protocol
        :param _builtins.str protocol_variable: Variable name
        :param _builtins.bool translate_rib_metric: Translate Rib Metric
        """
        pulumi.set(__self__, "nat_dia", nat_dia)
        pulumi.set(__self__, "nat_dia_variable", nat_dia_variable)
        pulumi.set(__self__, "protocol", protocol)
        pulumi.set(__self__, "protocol_variable", protocol_variable)
        pulumi.set(__self__, "route_policy_id", route_policy_id)
        pulumi.set(__self__, "translate_rib_metric", translate_rib_metric)

    @_builtins.property
    @pulumi.getter(name="natDia")
    def nat_dia(self) -> _builtins.bool:
        """
        Enable NAT DIA for redistributed routes
        """
        return pulumi.get(self, "nat_dia")

    @_builtins.property
    @pulumi.getter(name="natDiaVariable")
    def nat_dia_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "nat_dia_variable")

    @_builtins.property
    @pulumi.getter
    def protocol(self) -> _builtins.str:
        """
        Set the protocol
        """
        return pulumi.get(self, "protocol")

    @_builtins.property
    @pulumi.getter(name="protocolVariable")
    def protocol_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "protocol_variable")

    @_builtins.property
    @pulumi.getter(name="routePolicyId")
    def route_policy_id(self) -> _builtins.str:
        return pulumi.get(self, "route_policy_id")

    @_builtins.property
    @pulumi.getter(name="translateRibMetric")
    def translate_rib_metric(self) -> _builtins.bool:
        """
        Translate Rib Metric
        """
        return pulumi.get(self, "translate_rib_metric")


@pulumi.output_type
class GetServiceRoutingOspfFeatureRouterLsaResult(dict):
    def __init__(__self__, *,
                 time: _builtins.int,
                 time_variable: _builtins.str,
                 type: _builtins.str):
        """
        :param _builtins.int time: Set how long to advertise maximum metric after router starts up
        :param _builtins.str time_variable: Variable name
        :param _builtins.str type: Set the router LSA advertisement type
        """
        pulumi.set(__self__, "time", time)
        pulumi.set(__self__, "time_variable", time_variable)
        pulumi.set(__self__, "type", type)

    @_builtins.property
    @pulumi.getter
    def time(self) -> _builtins.int:
        """
        Set how long to advertise maximum metric after router starts up
        """
        return pulumi.get(self, "time")

    @_builtins.property
    @pulumi.getter(name="timeVariable")
    def time_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "time_variable")

    @_builtins.property
    @pulumi.getter
    def type(self) -> _builtins.str:
        """
        Set the router LSA advertisement type
        """
        return pulumi.get(self, "type")


@pulumi.output_type
class GetServiceRoutingOspfv3Ipv4FeatureAreaResult(dict):
    def __init__(__self__, *,
                 always_translate: _builtins.bool,
                 always_translate_variable: _builtins.str,
                 area_number: _builtins.int,
                 area_number_variable: _builtins.str,
                 area_type: _builtins.str,
                 interfaces: Sequence['outputs.GetServiceRoutingOspfv3Ipv4FeatureAreaInterfaceResult'],
                 no_summary: _builtins.bool,
                 no_summary_variable: _builtins.str,
                 ranges: Sequence['outputs.GetServiceRoutingOspfv3Ipv4FeatureAreaRangeResult']):
        """
        :param _builtins.bool always_translate: Always translate type7 LSAs
        :param _builtins.str always_translate_variable: Variable name
        :param _builtins.int area_number: Set OSPF area number
        :param _builtins.str area_number_variable: Variable name
        :param _builtins.str area_type: stub area type
        :param Sequence['GetServiceRoutingOspfv3Ipv4FeatureAreaInterfaceArgs'] interfaces: Set OSPF interface parameters
        :param _builtins.bool no_summary: Do not inject inter-area routes
        :param _builtins.str no_summary_variable: Variable name
        :param Sequence['GetServiceRoutingOspfv3Ipv4FeatureAreaRangeArgs'] ranges: Summarize OSPF routes at an area boundary
        """
        pulumi.set(__self__, "always_translate", always_translate)
        pulumi.set(__self__, "always_translate_variable", always_translate_variable)
        pulumi.set(__self__, "area_number", area_number)
        pulumi.set(__self__, "area_number_variable", area_number_variable)
        pulumi.set(__self__, "area_type", area_type)
        pulumi.set(__self__, "interfaces", interfaces)
        pulumi.set(__self__, "no_summary", no_summary)
        pulumi.set(__self__, "no_summary_variable", no_summary_variable)
        pulumi.set(__self__, "ranges", ranges)

    @_builtins.property
    @pulumi.getter(name="alwaysTranslate")
    def always_translate(self) -> _builtins.bool:
        """
        Always translate type7 LSAs
        """
        return pulumi.get(self, "always_translate")

    @_builtins.property
    @pulumi.getter(name="alwaysTranslateVariable")
    def always_translate_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "always_translate_variable")

    @_builtins.property
    @pulumi.getter(name="areaNumber")
    def area_number(self) -> _builtins.int:
        """
        Set OSPF area number
        """
        return pulumi.get(self, "area_number")

    @_builtins.property
    @pulumi.getter(name="areaNumberVariable")
    def area_number_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "area_number_variable")

    @_builtins.property
    @pulumi.getter(name="areaType")
    def area_type(self) -> _builtins.str:
        """
        stub area type
        """
        return pulumi.get(self, "area_type")

    @_builtins.property
    @pulumi.getter
    def interfaces(self) -> Sequence['outputs.GetServiceRoutingOspfv3Ipv4FeatureAreaInterfaceResult']:
        """
        Set OSPF interface parameters
        """
        return pulumi.get(self, "interfaces")

    @_builtins.property
    @pulumi.getter(name="noSummary")
    def no_summary(self) -> _builtins.bool:
        """
        Do not inject inter-area routes
        """
        return pulumi.get(self, "no_summary")

    @_builtins.property
    @pulumi.getter(name="noSummaryVariable")
    def no_summary_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "no_summary_variable")

    @_builtins.property
    @pulumi.getter
    def ranges(self) -> Sequence['outputs.GetServiceRoutingOspfv3Ipv4FeatureAreaRangeResult']:
        """
        Summarize OSPF routes at an area boundary
        """
        return pulumi.get(self, "ranges")


@pulumi.output_type
class GetServiceRoutingOspfv3Ipv4FeatureAreaInterfaceResult(dict):
    def __init__(__self__, *,
                 authentication_key: _builtins.str,
                 authentication_key_variable: _builtins.str,
                 authentication_spi: _builtins.int,
                 authentication_spi_variable: _builtins.str,
                 authentication_type: _builtins.str,
                 cost: _builtins.int,
                 cost_variable: _builtins.str,
                 dead_interval: _builtins.int,
                 dead_interval_variable: _builtins.str,
                 hello_interval: _builtins.int,
                 hello_interval_variable: _builtins.str,
                 lsa_retransmit_interval: _builtins.int,
                 lsa_retransmit_interval_variable: _builtins.str,
                 name: _builtins.str,
                 name_variable: _builtins.str,
                 network_type: _builtins.str,
                 network_type_variable: _builtins.str,
                 passive_interface: _builtins.bool,
                 passive_interface_variable: _builtins.str):
        """
        :param _builtins.str authentication_key: Set OSPF interface authentication IPSEC key
        :param _builtins.str authentication_key_variable: Variable name
        :param _builtins.int authentication_spi: Set OSPF interface authentication IPSec SPI, range 256..4294967295
        :param _builtins.str authentication_spi_variable: Variable name
        :param _builtins.str authentication_type: No Authentication by default
        :param _builtins.int cost: Set cost of OSPF interface
        :param _builtins.str cost_variable: Variable name
        :param _builtins.int dead_interval: Set interval after which neighbor is declared to be down
        :param _builtins.str dead_interval_variable: Variable name
        :param _builtins.int hello_interval: Set interval between OSPF hello packets
        :param _builtins.str hello_interval_variable: Variable name
        :param _builtins.int lsa_retransmit_interval: Set time between retransmitting LSAs
        :param _builtins.str lsa_retransmit_interval_variable: Variable name
        :param _builtins.str name: Set interface name
        :param _builtins.str name_variable: Variable name
        :param _builtins.str network_type: Set the OSPF network type
        :param _builtins.str network_type_variable: Variable name
        :param _builtins.bool passive_interface: Set the interface to advertise its address, but not to actively run OSPF
        :param _builtins.str passive_interface_variable: Variable name
        """
        pulumi.set(__self__, "authentication_key", authentication_key)
        pulumi.set(__self__, "authentication_key_variable", authentication_key_variable)
        pulumi.set(__self__, "authentication_spi", authentication_spi)
        pulumi.set(__self__, "authentication_spi_variable", authentication_spi_variable)
        pulumi.set(__self__, "authentication_type", authentication_type)
        pulumi.set(__self__, "cost", cost)
        pulumi.set(__self__, "cost_variable", cost_variable)
        pulumi.set(__self__, "dead_interval", dead_interval)
        pulumi.set(__self__, "dead_interval_variable", dead_interval_variable)
        pulumi.set(__self__, "hello_interval", hello_interval)
        pulumi.set(__self__, "hello_interval_variable", hello_interval_variable)
        pulumi.set(__self__, "lsa_retransmit_interval", lsa_retransmit_interval)
        pulumi.set(__self__, "lsa_retransmit_interval_variable", lsa_retransmit_interval_variable)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "name_variable", name_variable)
        pulumi.set(__self__, "network_type", network_type)
        pulumi.set(__self__, "network_type_variable", network_type_variable)
        pulumi.set(__self__, "passive_interface", passive_interface)
        pulumi.set(__self__, "passive_interface_variable", passive_interface_variable)

    @_builtins.property
    @pulumi.getter(name="authenticationKey")
    def authentication_key(self) -> _builtins.str:
        """
        Set OSPF interface authentication IPSEC key
        """
        return pulumi.get(self, "authentication_key")

    @_builtins.property
    @pulumi.getter(name="authenticationKeyVariable")
    def authentication_key_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "authentication_key_variable")

    @_builtins.property
    @pulumi.getter(name="authenticationSpi")
    def authentication_spi(self) -> _builtins.int:
        """
        Set OSPF interface authentication IPSec SPI, range 256..4294967295
        """
        return pulumi.get(self, "authentication_spi")

    @_builtins.property
    @pulumi.getter(name="authenticationSpiVariable")
    def authentication_spi_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "authentication_spi_variable")

    @_builtins.property
    @pulumi.getter(name="authenticationType")
    def authentication_type(self) -> _builtins.str:
        """
        No Authentication by default
        """
        return pulumi.get(self, "authentication_type")

    @_builtins.property
    @pulumi.getter
    def cost(self) -> _builtins.int:
        """
        Set cost of OSPF interface
        """
        return pulumi.get(self, "cost")

    @_builtins.property
    @pulumi.getter(name="costVariable")
    def cost_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "cost_variable")

    @_builtins.property
    @pulumi.getter(name="deadInterval")
    def dead_interval(self) -> _builtins.int:
        """
        Set interval after which neighbor is declared to be down
        """
        return pulumi.get(self, "dead_interval")

    @_builtins.property
    @pulumi.getter(name="deadIntervalVariable")
    def dead_interval_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "dead_interval_variable")

    @_builtins.property
    @pulumi.getter(name="helloInterval")
    def hello_interval(self) -> _builtins.int:
        """
        Set interval between OSPF hello packets
        """
        return pulumi.get(self, "hello_interval")

    @_builtins.property
    @pulumi.getter(name="helloIntervalVariable")
    def hello_interval_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "hello_interval_variable")

    @_builtins.property
    @pulumi.getter(name="lsaRetransmitInterval")
    def lsa_retransmit_interval(self) -> _builtins.int:
        """
        Set time between retransmitting LSAs
        """
        return pulumi.get(self, "lsa_retransmit_interval")

    @_builtins.property
    @pulumi.getter(name="lsaRetransmitIntervalVariable")
    def lsa_retransmit_interval_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "lsa_retransmit_interval_variable")

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        """
        Set interface name
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter(name="nameVariable")
    def name_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "name_variable")

    @_builtins.property
    @pulumi.getter(name="networkType")
    def network_type(self) -> _builtins.str:
        """
        Set the OSPF network type
        """
        return pulumi.get(self, "network_type")

    @_builtins.property
    @pulumi.getter(name="networkTypeVariable")
    def network_type_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "network_type_variable")

    @_builtins.property
    @pulumi.getter(name="passiveInterface")
    def passive_interface(self) -> _builtins.bool:
        """
        Set the interface to advertise its address, but not to actively run OSPF
        """
        return pulumi.get(self, "passive_interface")

    @_builtins.property
    @pulumi.getter(name="passiveInterfaceVariable")
    def passive_interface_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "passive_interface_variable")


@pulumi.output_type
class GetServiceRoutingOspfv3Ipv4FeatureAreaRangeResult(dict):
    def __init__(__self__, *,
                 cost: _builtins.int,
                 cost_variable: _builtins.str,
                 ip_address: _builtins.str,
                 ip_address_variable: _builtins.str,
                 no_advertise: _builtins.bool,
                 no_advertise_variable: _builtins.str,
                 subnet_mask: _builtins.str,
                 subnet_mask_variable: _builtins.str):
        """
        :param _builtins.int cost: Set cost for this range
        :param _builtins.str cost_variable: Variable name
        :param _builtins.str ip_address_variable: Variable name
        :param _builtins.bool no_advertise: Do not advertise this range
        :param _builtins.str no_advertise_variable: Variable name
        :param _builtins.str subnet_mask_variable: Variable name
        """
        pulumi.set(__self__, "cost", cost)
        pulumi.set(__self__, "cost_variable", cost_variable)
        pulumi.set(__self__, "ip_address", ip_address)
        pulumi.set(__self__, "ip_address_variable", ip_address_variable)
        pulumi.set(__self__, "no_advertise", no_advertise)
        pulumi.set(__self__, "no_advertise_variable", no_advertise_variable)
        pulumi.set(__self__, "subnet_mask", subnet_mask)
        pulumi.set(__self__, "subnet_mask_variable", subnet_mask_variable)

    @_builtins.property
    @pulumi.getter
    def cost(self) -> _builtins.int:
        """
        Set cost for this range
        """
        return pulumi.get(self, "cost")

    @_builtins.property
    @pulumi.getter(name="costVariable")
    def cost_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "cost_variable")

    @_builtins.property
    @pulumi.getter(name="ipAddress")
    def ip_address(self) -> _builtins.str:
        return pulumi.get(self, "ip_address")

    @_builtins.property
    @pulumi.getter(name="ipAddressVariable")
    def ip_address_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "ip_address_variable")

    @_builtins.property
    @pulumi.getter(name="noAdvertise")
    def no_advertise(self) -> _builtins.bool:
        """
        Do not advertise this range
        """
        return pulumi.get(self, "no_advertise")

    @_builtins.property
    @pulumi.getter(name="noAdvertiseVariable")
    def no_advertise_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "no_advertise_variable")

    @_builtins.property
    @pulumi.getter(name="subnetMask")
    def subnet_mask(self) -> _builtins.str:
        return pulumi.get(self, "subnet_mask")

    @_builtins.property
    @pulumi.getter(name="subnetMaskVariable")
    def subnet_mask_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "subnet_mask_variable")


@pulumi.output_type
class GetServiceRoutingOspfv3Ipv4FeatureRedistributeResult(dict):
    def __init__(__self__, *,
                 nat_dia: _builtins.bool,
                 nat_dia_variable: _builtins.str,
                 protocol: _builtins.str,
                 protocol_variable: _builtins.str,
                 route_policy_id: _builtins.str,
                 translate_rib_metric: _builtins.bool):
        """
        :param _builtins.bool nat_dia: Enable NAT DIA for redistributed routes
        :param _builtins.str nat_dia_variable: Variable name
        :param _builtins.str protocol: Set the protocol
        :param _builtins.str protocol_variable: Variable name
        :param _builtins.bool translate_rib_metric: Translate Rib Metric
        """
        pulumi.set(__self__, "nat_dia", nat_dia)
        pulumi.set(__self__, "nat_dia_variable", nat_dia_variable)
        pulumi.set(__self__, "protocol", protocol)
        pulumi.set(__self__, "protocol_variable", protocol_variable)
        pulumi.set(__self__, "route_policy_id", route_policy_id)
        pulumi.set(__self__, "translate_rib_metric", translate_rib_metric)

    @_builtins.property
    @pulumi.getter(name="natDia")
    def nat_dia(self) -> _builtins.bool:
        """
        Enable NAT DIA for redistributed routes
        """
        return pulumi.get(self, "nat_dia")

    @_builtins.property
    @pulumi.getter(name="natDiaVariable")
    def nat_dia_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "nat_dia_variable")

    @_builtins.property
    @pulumi.getter
    def protocol(self) -> _builtins.str:
        """
        Set the protocol
        """
        return pulumi.get(self, "protocol")

    @_builtins.property
    @pulumi.getter(name="protocolVariable")
    def protocol_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "protocol_variable")

    @_builtins.property
    @pulumi.getter(name="routePolicyId")
    def route_policy_id(self) -> _builtins.str:
        return pulumi.get(self, "route_policy_id")

    @_builtins.property
    @pulumi.getter(name="translateRibMetric")
    def translate_rib_metric(self) -> _builtins.bool:
        """
        Translate Rib Metric
        """
        return pulumi.get(self, "translate_rib_metric")


@pulumi.output_type
class GetServiceRoutingOspfv3Ipv6FeatureAreaResult(dict):
    def __init__(__self__, *,
                 always_translate: _builtins.bool,
                 always_translate_variable: _builtins.str,
                 area_number: _builtins.int,
                 area_number_variable: _builtins.str,
                 area_type: _builtins.str,
                 interfaces: Sequence['outputs.GetServiceRoutingOspfv3Ipv6FeatureAreaInterfaceResult'],
                 no_summary: _builtins.bool,
                 no_summary_variable: _builtins.str,
                 ranges: Sequence['outputs.GetServiceRoutingOspfv3Ipv6FeatureAreaRangeResult']):
        """
        :param _builtins.bool always_translate: Always translate type7 LSAs
        :param _builtins.str always_translate_variable: Variable name
        :param _builtins.int area_number: Set OSPF area number
        :param _builtins.str area_number_variable: Variable name
        :param _builtins.str area_type: stub area type
        :param Sequence['GetServiceRoutingOspfv3Ipv6FeatureAreaInterfaceArgs'] interfaces: Set OSPF interface parameters
        :param _builtins.bool no_summary: Do not inject inter-area routes
        :param _builtins.str no_summary_variable: Variable name
        :param Sequence['GetServiceRoutingOspfv3Ipv6FeatureAreaRangeArgs'] ranges: Summarize OSPF routes at an area boundary
        """
        pulumi.set(__self__, "always_translate", always_translate)
        pulumi.set(__self__, "always_translate_variable", always_translate_variable)
        pulumi.set(__self__, "area_number", area_number)
        pulumi.set(__self__, "area_number_variable", area_number_variable)
        pulumi.set(__self__, "area_type", area_type)
        pulumi.set(__self__, "interfaces", interfaces)
        pulumi.set(__self__, "no_summary", no_summary)
        pulumi.set(__self__, "no_summary_variable", no_summary_variable)
        pulumi.set(__self__, "ranges", ranges)

    @_builtins.property
    @pulumi.getter(name="alwaysTranslate")
    def always_translate(self) -> _builtins.bool:
        """
        Always translate type7 LSAs
        """
        return pulumi.get(self, "always_translate")

    @_builtins.property
    @pulumi.getter(name="alwaysTranslateVariable")
    def always_translate_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "always_translate_variable")

    @_builtins.property
    @pulumi.getter(name="areaNumber")
    def area_number(self) -> _builtins.int:
        """
        Set OSPF area number
        """
        return pulumi.get(self, "area_number")

    @_builtins.property
    @pulumi.getter(name="areaNumberVariable")
    def area_number_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "area_number_variable")

    @_builtins.property
    @pulumi.getter(name="areaType")
    def area_type(self) -> _builtins.str:
        """
        stub area type
        """
        return pulumi.get(self, "area_type")

    @_builtins.property
    @pulumi.getter
    def interfaces(self) -> Sequence['outputs.GetServiceRoutingOspfv3Ipv6FeatureAreaInterfaceResult']:
        """
        Set OSPF interface parameters
        """
        return pulumi.get(self, "interfaces")

    @_builtins.property
    @pulumi.getter(name="noSummary")
    def no_summary(self) -> _builtins.bool:
        """
        Do not inject inter-area routes
        """
        return pulumi.get(self, "no_summary")

    @_builtins.property
    @pulumi.getter(name="noSummaryVariable")
    def no_summary_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "no_summary_variable")

    @_builtins.property
    @pulumi.getter
    def ranges(self) -> Sequence['outputs.GetServiceRoutingOspfv3Ipv6FeatureAreaRangeResult']:
        """
        Summarize OSPF routes at an area boundary
        """
        return pulumi.get(self, "ranges")


@pulumi.output_type
class GetServiceRoutingOspfv3Ipv6FeatureAreaInterfaceResult(dict):
    def __init__(__self__, *,
                 authentication_key: _builtins.str,
                 authentication_key_variable: _builtins.str,
                 authentication_spi: _builtins.int,
                 authentication_spi_variable: _builtins.str,
                 authentication_type: _builtins.str,
                 cost: _builtins.int,
                 cost_variable: _builtins.str,
                 dead_interval: _builtins.int,
                 dead_interval_variable: _builtins.str,
                 hello_interval: _builtins.int,
                 hello_interval_variable: _builtins.str,
                 lsa_retransmit_interval: _builtins.int,
                 lsa_retransmit_interval_variable: _builtins.str,
                 name: _builtins.str,
                 name_variable: _builtins.str,
                 network_type: _builtins.str,
                 network_type_variable: _builtins.str,
                 passive_interface: _builtins.bool,
                 passive_interface_variable: _builtins.str):
        """
        :param _builtins.str authentication_key: Set OSPF interface authentication IPSEC key
        :param _builtins.str authentication_key_variable: Variable name
        :param _builtins.int authentication_spi: Set OSPF interface authentication IPSec SPI, range 256..4294967295
        :param _builtins.str authentication_spi_variable: Variable name
        :param _builtins.str authentication_type: No Authentication by default
        :param _builtins.int cost: Set cost of OSPF interface
        :param _builtins.str cost_variable: Variable name
        :param _builtins.int dead_interval: Set interval after which neighbor is declared to be down
        :param _builtins.str dead_interval_variable: Variable name
        :param _builtins.int hello_interval: Set interval between OSPF hello packets
        :param _builtins.str hello_interval_variable: Variable name
        :param _builtins.int lsa_retransmit_interval: Set time between retransmitting LSAs
        :param _builtins.str lsa_retransmit_interval_variable: Variable name
        :param _builtins.str name: Set interface name
        :param _builtins.str name_variable: Variable name
        :param _builtins.str network_type: Set the OSPF network type
        :param _builtins.str network_type_variable: Variable name
        :param _builtins.bool passive_interface: Set the interface to advertise its address, but not to actively run OSPF
        :param _builtins.str passive_interface_variable: Variable name
        """
        pulumi.set(__self__, "authentication_key", authentication_key)
        pulumi.set(__self__, "authentication_key_variable", authentication_key_variable)
        pulumi.set(__self__, "authentication_spi", authentication_spi)
        pulumi.set(__self__, "authentication_spi_variable", authentication_spi_variable)
        pulumi.set(__self__, "authentication_type", authentication_type)
        pulumi.set(__self__, "cost", cost)
        pulumi.set(__self__, "cost_variable", cost_variable)
        pulumi.set(__self__, "dead_interval", dead_interval)
        pulumi.set(__self__, "dead_interval_variable", dead_interval_variable)
        pulumi.set(__self__, "hello_interval", hello_interval)
        pulumi.set(__self__, "hello_interval_variable", hello_interval_variable)
        pulumi.set(__self__, "lsa_retransmit_interval", lsa_retransmit_interval)
        pulumi.set(__self__, "lsa_retransmit_interval_variable", lsa_retransmit_interval_variable)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "name_variable", name_variable)
        pulumi.set(__self__, "network_type", network_type)
        pulumi.set(__self__, "network_type_variable", network_type_variable)
        pulumi.set(__self__, "passive_interface", passive_interface)
        pulumi.set(__self__, "passive_interface_variable", passive_interface_variable)

    @_builtins.property
    @pulumi.getter(name="authenticationKey")
    def authentication_key(self) -> _builtins.str:
        """
        Set OSPF interface authentication IPSEC key
        """
        return pulumi.get(self, "authentication_key")

    @_builtins.property
    @pulumi.getter(name="authenticationKeyVariable")
    def authentication_key_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "authentication_key_variable")

    @_builtins.property
    @pulumi.getter(name="authenticationSpi")
    def authentication_spi(self) -> _builtins.int:
        """
        Set OSPF interface authentication IPSec SPI, range 256..4294967295
        """
        return pulumi.get(self, "authentication_spi")

    @_builtins.property
    @pulumi.getter(name="authenticationSpiVariable")
    def authentication_spi_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "authentication_spi_variable")

    @_builtins.property
    @pulumi.getter(name="authenticationType")
    def authentication_type(self) -> _builtins.str:
        """
        No Authentication by default
        """
        return pulumi.get(self, "authentication_type")

    @_builtins.property
    @pulumi.getter
    def cost(self) -> _builtins.int:
        """
        Set cost of OSPF interface
        """
        return pulumi.get(self, "cost")

    @_builtins.property
    @pulumi.getter(name="costVariable")
    def cost_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "cost_variable")

    @_builtins.property
    @pulumi.getter(name="deadInterval")
    def dead_interval(self) -> _builtins.int:
        """
        Set interval after which neighbor is declared to be down
        """
        return pulumi.get(self, "dead_interval")

    @_builtins.property
    @pulumi.getter(name="deadIntervalVariable")
    def dead_interval_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "dead_interval_variable")

    @_builtins.property
    @pulumi.getter(name="helloInterval")
    def hello_interval(self) -> _builtins.int:
        """
        Set interval between OSPF hello packets
        """
        return pulumi.get(self, "hello_interval")

    @_builtins.property
    @pulumi.getter(name="helloIntervalVariable")
    def hello_interval_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "hello_interval_variable")

    @_builtins.property
    @pulumi.getter(name="lsaRetransmitInterval")
    def lsa_retransmit_interval(self) -> _builtins.int:
        """
        Set time between retransmitting LSAs
        """
        return pulumi.get(self, "lsa_retransmit_interval")

    @_builtins.property
    @pulumi.getter(name="lsaRetransmitIntervalVariable")
    def lsa_retransmit_interval_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "lsa_retransmit_interval_variable")

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        """
        Set interface name
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter(name="nameVariable")
    def name_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "name_variable")

    @_builtins.property
    @pulumi.getter(name="networkType")
    def network_type(self) -> _builtins.str:
        """
        Set the OSPF network type
        """
        return pulumi.get(self, "network_type")

    @_builtins.property
    @pulumi.getter(name="networkTypeVariable")
    def network_type_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "network_type_variable")

    @_builtins.property
    @pulumi.getter(name="passiveInterface")
    def passive_interface(self) -> _builtins.bool:
        """
        Set the interface to advertise its address, but not to actively run OSPF
        """
        return pulumi.get(self, "passive_interface")

    @_builtins.property
    @pulumi.getter(name="passiveInterfaceVariable")
    def passive_interface_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "passive_interface_variable")


@pulumi.output_type
class GetServiceRoutingOspfv3Ipv6FeatureAreaRangeResult(dict):
    def __init__(__self__, *,
                 cost: _builtins.int,
                 cost_variable: _builtins.str,
                 no_advertise: _builtins.bool,
                 no_advertise_variable: _builtins.str,
                 prefix: _builtins.str,
                 prefix_variable: _builtins.str):
        """
        :param _builtins.int cost: Set cost for this range
        :param _builtins.str cost_variable: Variable name
        :param _builtins.bool no_advertise: Do not advertise this range
        :param _builtins.str no_advertise_variable: Variable name
        :param _builtins.str prefix: IPv6 prefix,for example 2001::/64
        :param _builtins.str prefix_variable: Variable name
        """
        pulumi.set(__self__, "cost", cost)
        pulumi.set(__self__, "cost_variable", cost_variable)
        pulumi.set(__self__, "no_advertise", no_advertise)
        pulumi.set(__self__, "no_advertise_variable", no_advertise_variable)
        pulumi.set(__self__, "prefix", prefix)
        pulumi.set(__self__, "prefix_variable", prefix_variable)

    @_builtins.property
    @pulumi.getter
    def cost(self) -> _builtins.int:
        """
        Set cost for this range
        """
        return pulumi.get(self, "cost")

    @_builtins.property
    @pulumi.getter(name="costVariable")
    def cost_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "cost_variable")

    @_builtins.property
    @pulumi.getter(name="noAdvertise")
    def no_advertise(self) -> _builtins.bool:
        """
        Do not advertise this range
        """
        return pulumi.get(self, "no_advertise")

    @_builtins.property
    @pulumi.getter(name="noAdvertiseVariable")
    def no_advertise_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "no_advertise_variable")

    @_builtins.property
    @pulumi.getter
    def prefix(self) -> _builtins.str:
        """
        IPv6 prefix,for example 2001::/64
        """
        return pulumi.get(self, "prefix")

    @_builtins.property
    @pulumi.getter(name="prefixVariable")
    def prefix_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "prefix_variable")


@pulumi.output_type
class GetServiceRoutingOspfv3Ipv6FeatureRedistributeResult(dict):
    def __init__(__self__, *,
                 protocol: _builtins.str,
                 protocol_variable: _builtins.str,
                 route_policy_id: _builtins.str,
                 translate_rib_metric: _builtins.bool):
        """
        :param _builtins.str protocol: Set the protocol
        :param _builtins.str protocol_variable: Variable name
        :param _builtins.bool translate_rib_metric: Translate Rib Metric
        """
        pulumi.set(__self__, "protocol", protocol)
        pulumi.set(__self__, "protocol_variable", protocol_variable)
        pulumi.set(__self__, "route_policy_id", route_policy_id)
        pulumi.set(__self__, "translate_rib_metric", translate_rib_metric)

    @_builtins.property
    @pulumi.getter
    def protocol(self) -> _builtins.str:
        """
        Set the protocol
        """
        return pulumi.get(self, "protocol")

    @_builtins.property
    @pulumi.getter(name="protocolVariable")
    def protocol_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "protocol_variable")

    @_builtins.property
    @pulumi.getter(name="routePolicyId")
    def route_policy_id(self) -> _builtins.str:
        return pulumi.get(self, "route_policy_id")

    @_builtins.property
    @pulumi.getter(name="translateRibMetric")
    def translate_rib_metric(self) -> _builtins.bool:
        """
        Translate Rib Metric
        """
        return pulumi.get(self, "translate_rib_metric")


@pulumi.output_type
class GetServiceSwitchportFeatureInterfaceResult(dict):
    def __init__(__self__, *,
                 control_direction: _builtins.str,
                 control_direction_variable: _builtins.str,
                 critical_vlan: _builtins.int,
                 critical_vlan_variable: _builtins.str,
                 duplex: _builtins.str,
                 duplex_variable: _builtins.str,
                 enable_periodic_reauth: _builtins.bool,
                 enable_periodic_reauth_variable: _builtins.str,
                 enable_voice: _builtins.bool,
                 enable_voice_variable: _builtins.str,
                 guest_vlan: _builtins.int,
                 guest_vlan_variable: _builtins.str,
                 host_mode: _builtins.str,
                 host_mode_variable: _builtins.str,
                 inactivity: _builtins.int,
                 inactivity_variable: _builtins.str,
                 interface_name: _builtins.str,
                 interface_name_variable: _builtins.str,
                 mac_authentication_bypass: _builtins.bool,
                 mac_authentication_bypass_variable: _builtins.str,
                 mode: _builtins.str,
                 pae_enable: _builtins.bool,
                 pae_enable_variable: _builtins.str,
                 port_control: _builtins.str,
                 port_control_variable: _builtins.str,
                 reauthentication: _builtins.int,
                 reauthentication_variable: _builtins.str,
                 restricted_vlan: _builtins.int,
                 restricted_vlan_variable: _builtins.str,
                 shutdown: _builtins.bool,
                 shutdown_variable: _builtins.str,
                 speed: _builtins.str,
                 speed_variable: _builtins.str,
                 switchport_access_vlan: _builtins.int,
                 switchport_access_vlan_variable: _builtins.str,
                 switchport_trunk_allowed_vlans: _builtins.str,
                 switchport_trunk_allowed_vlans_variable: _builtins.str,
                 switchport_trunk_native_vlan: _builtins.int,
                 switchport_trunk_native_vlan_variable: _builtins.str,
                 voice_vlan: _builtins.int,
                 voice_vlan_variable: _builtins.str):
        """
        :param _builtins.str control_direction: Set uni or bi directional authorization mode
        :param _builtins.str control_direction_variable: Variable name
        :param _builtins.int critical_vlan: Set Critical VLAN
        :param _builtins.str critical_vlan_variable: Variable name
        :param _builtins.str duplex: Duplex mode
        :param _builtins.str duplex_variable: Variable name
        :param _builtins.bool enable_periodic_reauth: Enable Periodic Reauthentication
        :param _builtins.str enable_periodic_reauth_variable: Variable name
        :param _builtins.bool enable_voice: Enable Critical Voice VLAN
        :param _builtins.str enable_voice_variable: Variable name
        :param _builtins.int guest_vlan: Set vlan to drop non-802.1x enabled clients into if client is not in MAB list
        :param _builtins.str guest_vlan_variable: Variable name
        :param _builtins.str host_mode: Set host mode
        :param _builtins.str host_mode_variable: Variable name
        :param _builtins.int inactivity: Periodic Reauthentication Inactivity Timeout (in seconds)
        :param _builtins.str inactivity_variable: Variable name
        :param _builtins.str interface_name: Set Interface name
        :param _builtins.str interface_name_variable: Variable name
        :param _builtins.bool mac_authentication_bypass: MAC Authentication Bypass
        :param _builtins.str mac_authentication_bypass_variable: Variable name
        :param _builtins.str mode: Set type of switch port: access/trunk
        :param _builtins.bool pae_enable: Set 802.1x Interface Pae Type
        :param _builtins.str pae_enable_variable: Variable name
        :param _builtins.str port_control: Set Port-Control Mode
        :param _builtins.str port_control_variable: Variable name
        :param _builtins.int reauthentication: Periodic Reauthentication Interval (in seconds)
        :param _builtins.str reauthentication_variable: Variable name
        :param _builtins.int restricted_vlan: Set Restricted VLAN ID
        :param _builtins.str restricted_vlan_variable: Variable name
        :param _builtins.bool shutdown: Administrative state
        :param _builtins.str shutdown_variable: Variable name
        :param _builtins.str speed: Set interface speed
        :param _builtins.str speed_variable: Variable name
        :param _builtins.int switchport_access_vlan: Set VLAN identifier associated with bridging domain
        :param _builtins.str switchport_access_vlan_variable: Variable name
        :param _builtins.str switchport_trunk_allowed_vlans: Configure VLAN IDs used with the trunk
        :param _builtins.str switchport_trunk_allowed_vlans_variable: Variable name
        :param _builtins.int switchport_trunk_native_vlan: Configure VLAN ID used for native VLAN
        :param _builtins.str switchport_trunk_native_vlan_variable: Variable name
        :param _builtins.int voice_vlan: Configure Voice Vlan
        :param _builtins.str voice_vlan_variable: Variable name
        """
        pulumi.set(__self__, "control_direction", control_direction)
        pulumi.set(__self__, "control_direction_variable", control_direction_variable)
        pulumi.set(__self__, "critical_vlan", critical_vlan)
        pulumi.set(__self__, "critical_vlan_variable", critical_vlan_variable)
        pulumi.set(__self__, "duplex", duplex)
        pulumi.set(__self__, "duplex_variable", duplex_variable)
        pulumi.set(__self__, "enable_periodic_reauth", enable_periodic_reauth)
        pulumi.set(__self__, "enable_periodic_reauth_variable", enable_periodic_reauth_variable)
        pulumi.set(__self__, "enable_voice", enable_voice)
        pulumi.set(__self__, "enable_voice_variable", enable_voice_variable)
        pulumi.set(__self__, "guest_vlan", guest_vlan)
        pulumi.set(__self__, "guest_vlan_variable", guest_vlan_variable)
        pulumi.set(__self__, "host_mode", host_mode)
        pulumi.set(__self__, "host_mode_variable", host_mode_variable)
        pulumi.set(__self__, "inactivity", inactivity)
        pulumi.set(__self__, "inactivity_variable", inactivity_variable)
        pulumi.set(__self__, "interface_name", interface_name)
        pulumi.set(__self__, "interface_name_variable", interface_name_variable)
        pulumi.set(__self__, "mac_authentication_bypass", mac_authentication_bypass)
        pulumi.set(__self__, "mac_authentication_bypass_variable", mac_authentication_bypass_variable)
        pulumi.set(__self__, "mode", mode)
        pulumi.set(__self__, "pae_enable", pae_enable)
        pulumi.set(__self__, "pae_enable_variable", pae_enable_variable)
        pulumi.set(__self__, "port_control", port_control)
        pulumi.set(__self__, "port_control_variable", port_control_variable)
        pulumi.set(__self__, "reauthentication", reauthentication)
        pulumi.set(__self__, "reauthentication_variable", reauthentication_variable)
        pulumi.set(__self__, "restricted_vlan", restricted_vlan)
        pulumi.set(__self__, "restricted_vlan_variable", restricted_vlan_variable)
        pulumi.set(__self__, "shutdown", shutdown)
        pulumi.set(__self__, "shutdown_variable", shutdown_variable)
        pulumi.set(__self__, "speed", speed)
        pulumi.set(__self__, "speed_variable", speed_variable)
        pulumi.set(__self__, "switchport_access_vlan", switchport_access_vlan)
        pulumi.set(__self__, "switchport_access_vlan_variable", switchport_access_vlan_variable)
        pulumi.set(__self__, "switchport_trunk_allowed_vlans", switchport_trunk_allowed_vlans)
        pulumi.set(__self__, "switchport_trunk_allowed_vlans_variable", switchport_trunk_allowed_vlans_variable)
        pulumi.set(__self__, "switchport_trunk_native_vlan", switchport_trunk_native_vlan)
        pulumi.set(__self__, "switchport_trunk_native_vlan_variable", switchport_trunk_native_vlan_variable)
        pulumi.set(__self__, "voice_vlan", voice_vlan)
        pulumi.set(__self__, "voice_vlan_variable", voice_vlan_variable)

    @_builtins.property
    @pulumi.getter(name="controlDirection")
    def control_direction(self) -> _builtins.str:
        """
        Set uni or bi directional authorization mode
        """
        return pulumi.get(self, "control_direction")

    @_builtins.property
    @pulumi.getter(name="controlDirectionVariable")
    def control_direction_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "control_direction_variable")

    @_builtins.property
    @pulumi.getter(name="criticalVlan")
    def critical_vlan(self) -> _builtins.int:
        """
        Set Critical VLAN
        """
        return pulumi.get(self, "critical_vlan")

    @_builtins.property
    @pulumi.getter(name="criticalVlanVariable")
    def critical_vlan_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "critical_vlan_variable")

    @_builtins.property
    @pulumi.getter
    def duplex(self) -> _builtins.str:
        """
        Duplex mode
        """
        return pulumi.get(self, "duplex")

    @_builtins.property
    @pulumi.getter(name="duplexVariable")
    def duplex_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "duplex_variable")

    @_builtins.property
    @pulumi.getter(name="enablePeriodicReauth")
    def enable_periodic_reauth(self) -> _builtins.bool:
        """
        Enable Periodic Reauthentication
        """
        return pulumi.get(self, "enable_periodic_reauth")

    @_builtins.property
    @pulumi.getter(name="enablePeriodicReauthVariable")
    def enable_periodic_reauth_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "enable_periodic_reauth_variable")

    @_builtins.property
    @pulumi.getter(name="enableVoice")
    def enable_voice(self) -> _builtins.bool:
        """
        Enable Critical Voice VLAN
        """
        return pulumi.get(self, "enable_voice")

    @_builtins.property
    @pulumi.getter(name="enableVoiceVariable")
    def enable_voice_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "enable_voice_variable")

    @_builtins.property
    @pulumi.getter(name="guestVlan")
    def guest_vlan(self) -> _builtins.int:
        """
        Set vlan to drop non-802.1x enabled clients into if client is not in MAB list
        """
        return pulumi.get(self, "guest_vlan")

    @_builtins.property
    @pulumi.getter(name="guestVlanVariable")
    def guest_vlan_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "guest_vlan_variable")

    @_builtins.property
    @pulumi.getter(name="hostMode")
    def host_mode(self) -> _builtins.str:
        """
        Set host mode
        """
        return pulumi.get(self, "host_mode")

    @_builtins.property
    @pulumi.getter(name="hostModeVariable")
    def host_mode_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "host_mode_variable")

    @_builtins.property
    @pulumi.getter
    def inactivity(self) -> _builtins.int:
        """
        Periodic Reauthentication Inactivity Timeout (in seconds)
        """
        return pulumi.get(self, "inactivity")

    @_builtins.property
    @pulumi.getter(name="inactivityVariable")
    def inactivity_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "inactivity_variable")

    @_builtins.property
    @pulumi.getter(name="interfaceName")
    def interface_name(self) -> _builtins.str:
        """
        Set Interface name
        """
        return pulumi.get(self, "interface_name")

    @_builtins.property
    @pulumi.getter(name="interfaceNameVariable")
    def interface_name_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "interface_name_variable")

    @_builtins.property
    @pulumi.getter(name="macAuthenticationBypass")
    def mac_authentication_bypass(self) -> _builtins.bool:
        """
        MAC Authentication Bypass
        """
        return pulumi.get(self, "mac_authentication_bypass")

    @_builtins.property
    @pulumi.getter(name="macAuthenticationBypassVariable")
    def mac_authentication_bypass_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "mac_authentication_bypass_variable")

    @_builtins.property
    @pulumi.getter
    def mode(self) -> _builtins.str:
        """
        Set type of switch port: access/trunk
        """
        return pulumi.get(self, "mode")

    @_builtins.property
    @pulumi.getter(name="paeEnable")
    def pae_enable(self) -> _builtins.bool:
        """
        Set 802.1x Interface Pae Type
        """
        return pulumi.get(self, "pae_enable")

    @_builtins.property
    @pulumi.getter(name="paeEnableVariable")
    def pae_enable_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "pae_enable_variable")

    @_builtins.property
    @pulumi.getter(name="portControl")
    def port_control(self) -> _builtins.str:
        """
        Set Port-Control Mode
        """
        return pulumi.get(self, "port_control")

    @_builtins.property
    @pulumi.getter(name="portControlVariable")
    def port_control_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "port_control_variable")

    @_builtins.property
    @pulumi.getter
    def reauthentication(self) -> _builtins.int:
        """
        Periodic Reauthentication Interval (in seconds)
        """
        return pulumi.get(self, "reauthentication")

    @_builtins.property
    @pulumi.getter(name="reauthenticationVariable")
    def reauthentication_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "reauthentication_variable")

    @_builtins.property
    @pulumi.getter(name="restrictedVlan")
    def restricted_vlan(self) -> _builtins.int:
        """
        Set Restricted VLAN ID
        """
        return pulumi.get(self, "restricted_vlan")

    @_builtins.property
    @pulumi.getter(name="restrictedVlanVariable")
    def restricted_vlan_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "restricted_vlan_variable")

    @_builtins.property
    @pulumi.getter
    def shutdown(self) -> _builtins.bool:
        """
        Administrative state
        """
        return pulumi.get(self, "shutdown")

    @_builtins.property
    @pulumi.getter(name="shutdownVariable")
    def shutdown_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "shutdown_variable")

    @_builtins.property
    @pulumi.getter
    def speed(self) -> _builtins.str:
        """
        Set interface speed
        """
        return pulumi.get(self, "speed")

    @_builtins.property
    @pulumi.getter(name="speedVariable")
    def speed_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "speed_variable")

    @_builtins.property
    @pulumi.getter(name="switchportAccessVlan")
    def switchport_access_vlan(self) -> _builtins.int:
        """
        Set VLAN identifier associated with bridging domain
        """
        return pulumi.get(self, "switchport_access_vlan")

    @_builtins.property
    @pulumi.getter(name="switchportAccessVlanVariable")
    def switchport_access_vlan_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "switchport_access_vlan_variable")

    @_builtins.property
    @pulumi.getter(name="switchportTrunkAllowedVlans")
    def switchport_trunk_allowed_vlans(self) -> _builtins.str:
        """
        Configure VLAN IDs used with the trunk
        """
        return pulumi.get(self, "switchport_trunk_allowed_vlans")

    @_builtins.property
    @pulumi.getter(name="switchportTrunkAllowedVlansVariable")
    def switchport_trunk_allowed_vlans_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "switchport_trunk_allowed_vlans_variable")

    @_builtins.property
    @pulumi.getter(name="switchportTrunkNativeVlan")
    def switchport_trunk_native_vlan(self) -> _builtins.int:
        """
        Configure VLAN ID used for native VLAN
        """
        return pulumi.get(self, "switchport_trunk_native_vlan")

    @_builtins.property
    @pulumi.getter(name="switchportTrunkNativeVlanVariable")
    def switchport_trunk_native_vlan_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "switchport_trunk_native_vlan_variable")

    @_builtins.property
    @pulumi.getter(name="voiceVlan")
    def voice_vlan(self) -> _builtins.int:
        """
        Configure Voice Vlan
        """
        return pulumi.get(self, "voice_vlan")

    @_builtins.property
    @pulumi.getter(name="voiceVlanVariable")
    def voice_vlan_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "voice_vlan_variable")


@pulumi.output_type
class GetServiceSwitchportFeatureStaticMacAddressResult(dict):
    def __init__(__self__, *,
                 interface_name: _builtins.str,
                 interface_name_variable: _builtins.str,
                 mac_address: _builtins.str,
                 mac_address_variable: _builtins.str,
                 vlan_id: _builtins.int,
                 vlan_id_variable: _builtins.str):
        """
        :param _builtins.str interface_name: Interface name: GigabitEthernet0/<>/<>
        :param _builtins.str interface_name_variable: Variable name
        :param _builtins.str mac_address: Set MAC address in xxxx.xxxx.xxxx format
        :param _builtins.str mac_address_variable: Variable name
        :param _builtins.int vlan_id: Configure VLAN ID used with the mac and interface
        :param _builtins.str vlan_id_variable: Variable name
        """
        pulumi.set(__self__, "interface_name", interface_name)
        pulumi.set(__self__, "interface_name_variable", interface_name_variable)
        pulumi.set(__self__, "mac_address", mac_address)
        pulumi.set(__self__, "mac_address_variable", mac_address_variable)
        pulumi.set(__self__, "vlan_id", vlan_id)
        pulumi.set(__self__, "vlan_id_variable", vlan_id_variable)

    @_builtins.property
    @pulumi.getter(name="interfaceName")
    def interface_name(self) -> _builtins.str:
        """
        Interface name: GigabitEthernet0/<>/<>
        """
        return pulumi.get(self, "interface_name")

    @_builtins.property
    @pulumi.getter(name="interfaceNameVariable")
    def interface_name_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "interface_name_variable")

    @_builtins.property
    @pulumi.getter(name="macAddress")
    def mac_address(self) -> _builtins.str:
        """
        Set MAC address in xxxx.xxxx.xxxx format
        """
        return pulumi.get(self, "mac_address")

    @_builtins.property
    @pulumi.getter(name="macAddressVariable")
    def mac_address_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "mac_address_variable")

    @_builtins.property
    @pulumi.getter(name="vlanId")
    def vlan_id(self) -> _builtins.int:
        """
        Configure VLAN ID used with the mac and interface
        """
        return pulumi.get(self, "vlan_id")

    @_builtins.property
    @pulumi.getter(name="vlanIdVariable")
    def vlan_id_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "vlan_id_variable")


@pulumi.output_type
class GetServiceTrackerGroupFeatureTrackerElementResult(dict):
    def __init__(__self__, *,
                 tracker_id: _builtins.str):
        pulumi.set(__self__, "tracker_id", tracker_id)

    @_builtins.property
    @pulumi.getter(name="trackerId")
    def tracker_id(self) -> _builtins.str:
        return pulumi.get(self, "tracker_id")


@pulumi.output_type
class GetServiceWirelessLanFeatureSsidResult(dict):
    def __init__(__self__, *,
                 admin_state: _builtins.bool,
                 admin_state_variable: _builtins.str,
                 broadcast_ssid: _builtins.bool,
                 broadcast_ssid_variable: _builtins.str,
                 passphrase: _builtins.str,
                 passphrase_variable: _builtins.str,
                 qos_profile: _builtins.str,
                 qos_profile_variable: _builtins.str,
                 radio_type: _builtins.str,
                 radio_type_variable: _builtins.str,
                 radius_server_ip: _builtins.str,
                 radius_server_ip_variable: _builtins.str,
                 radius_server_port: _builtins.int,
                 radius_server_port_variable: _builtins.str,
                 radius_server_secret: _builtins.str,
                 radius_server_secret_variable: _builtins.str,
                 security_type: _builtins.str,
                 ssid_name: _builtins.str,
                 vlan_id: _builtins.int,
                 vlan_id_variable: _builtins.str):
        """
        :param _builtins.bool admin_state: Set admin state
        :param _builtins.str admin_state_variable: Variable name
        :param _builtins.bool broadcast_ssid: Enable broadcast SSID
        :param _builtins.str broadcast_ssid_variable: Variable name
        :param _builtins.str passphrase: Set passphrase
        :param _builtins.str passphrase_variable: Variable name
        :param _builtins.str qos_profile: Select QoS profile
        :param _builtins.str qos_profile_variable: Variable name
        :param _builtins.str radio_type: Select radio type
        :param _builtins.str radio_type_variable: Variable name
        :param _builtins.str radius_server_ip: Set RADIUS server IP
        :param _builtins.str radius_server_ip_variable: Variable name
        :param _builtins.int radius_server_port: Set RADIUS server authentication port
        :param _builtins.str radius_server_port_variable: Variable name
        :param _builtins.str radius_server_secret: Set RADIUS server shared secret
        :param _builtins.str radius_server_secret_variable: Variable name
        :param _builtins.str security_type: Select security type
        :param _builtins.str ssid_name: Configure wlan SSID
        :param _builtins.int vlan_id: Set VLAN ID
        :param _builtins.str vlan_id_variable: Variable name
        """
        pulumi.set(__self__, "admin_state", admin_state)
        pulumi.set(__self__, "admin_state_variable", admin_state_variable)
        pulumi.set(__self__, "broadcast_ssid", broadcast_ssid)
        pulumi.set(__self__, "broadcast_ssid_variable", broadcast_ssid_variable)
        pulumi.set(__self__, "passphrase", passphrase)
        pulumi.set(__self__, "passphrase_variable", passphrase_variable)
        pulumi.set(__self__, "qos_profile", qos_profile)
        pulumi.set(__self__, "qos_profile_variable", qos_profile_variable)
        pulumi.set(__self__, "radio_type", radio_type)
        pulumi.set(__self__, "radio_type_variable", radio_type_variable)
        pulumi.set(__self__, "radius_server_ip", radius_server_ip)
        pulumi.set(__self__, "radius_server_ip_variable", radius_server_ip_variable)
        pulumi.set(__self__, "radius_server_port", radius_server_port)
        pulumi.set(__self__, "radius_server_port_variable", radius_server_port_variable)
        pulumi.set(__self__, "radius_server_secret", radius_server_secret)
        pulumi.set(__self__, "radius_server_secret_variable", radius_server_secret_variable)
        pulumi.set(__self__, "security_type", security_type)
        pulumi.set(__self__, "ssid_name", ssid_name)
        pulumi.set(__self__, "vlan_id", vlan_id)
        pulumi.set(__self__, "vlan_id_variable", vlan_id_variable)

    @_builtins.property
    @pulumi.getter(name="adminState")
    def admin_state(self) -> _builtins.bool:
        """
        Set admin state
        """
        return pulumi.get(self, "admin_state")

    @_builtins.property
    @pulumi.getter(name="adminStateVariable")
    def admin_state_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "admin_state_variable")

    @_builtins.property
    @pulumi.getter(name="broadcastSsid")
    def broadcast_ssid(self) -> _builtins.bool:
        """
        Enable broadcast SSID
        """
        return pulumi.get(self, "broadcast_ssid")

    @_builtins.property
    @pulumi.getter(name="broadcastSsidVariable")
    def broadcast_ssid_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "broadcast_ssid_variable")

    @_builtins.property
    @pulumi.getter
    def passphrase(self) -> _builtins.str:
        """
        Set passphrase
        """
        return pulumi.get(self, "passphrase")

    @_builtins.property
    @pulumi.getter(name="passphraseVariable")
    def passphrase_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "passphrase_variable")

    @_builtins.property
    @pulumi.getter(name="qosProfile")
    def qos_profile(self) -> _builtins.str:
        """
        Select QoS profile
        """
        return pulumi.get(self, "qos_profile")

    @_builtins.property
    @pulumi.getter(name="qosProfileVariable")
    def qos_profile_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "qos_profile_variable")

    @_builtins.property
    @pulumi.getter(name="radioType")
    def radio_type(self) -> _builtins.str:
        """
        Select radio type
        """
        return pulumi.get(self, "radio_type")

    @_builtins.property
    @pulumi.getter(name="radioTypeVariable")
    def radio_type_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "radio_type_variable")

    @_builtins.property
    @pulumi.getter(name="radiusServerIp")
    def radius_server_ip(self) -> _builtins.str:
        """
        Set RADIUS server IP
        """
        return pulumi.get(self, "radius_server_ip")

    @_builtins.property
    @pulumi.getter(name="radiusServerIpVariable")
    def radius_server_ip_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "radius_server_ip_variable")

    @_builtins.property
    @pulumi.getter(name="radiusServerPort")
    def radius_server_port(self) -> _builtins.int:
        """
        Set RADIUS server authentication port
        """
        return pulumi.get(self, "radius_server_port")

    @_builtins.property
    @pulumi.getter(name="radiusServerPortVariable")
    def radius_server_port_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "radius_server_port_variable")

    @_builtins.property
    @pulumi.getter(name="radiusServerSecret")
    def radius_server_secret(self) -> _builtins.str:
        """
        Set RADIUS server shared secret
        """
        return pulumi.get(self, "radius_server_secret")

    @_builtins.property
    @pulumi.getter(name="radiusServerSecretVariable")
    def radius_server_secret_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "radius_server_secret_variable")

    @_builtins.property
    @pulumi.getter(name="securityType")
    def security_type(self) -> _builtins.str:
        """
        Select security type
        """
        return pulumi.get(self, "security_type")

    @_builtins.property
    @pulumi.getter(name="ssidName")
    def ssid_name(self) -> _builtins.str:
        """
        Configure wlan SSID
        """
        return pulumi.get(self, "ssid_name")

    @_builtins.property
    @pulumi.getter(name="vlanId")
    def vlan_id(self) -> _builtins.int:
        """
        Set VLAN ID
        """
        return pulumi.get(self, "vlan_id")

    @_builtins.property
    @pulumi.getter(name="vlanIdVariable")
    def vlan_id_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "vlan_id_variable")


@pulumi.output_type
class GetSiteListPolicyObjectEntryResult(dict):
    def __init__(__self__, *,
                 site_id: _builtins.str):
        """
        :param _builtins.str site_id: Site ID or range of Site IDs e.g., `100` or `200-300`
        """
        pulumi.set(__self__, "site_id", site_id)

    @_builtins.property
    @pulumi.getter(name="siteId")
    def site_id(self) -> _builtins.str:
        """
        Site ID or range of Site IDs e.g., `100` or `200-300`
        """
        return pulumi.get(self, "site_id")


@pulumi.output_type
class GetStandardCommunityListPolicyObjectEntryResult(dict):
    def __init__(__self__, *,
                 community: _builtins.str):
        """
        :param _builtins.str community: Standard community value, e.g. `100:1000`, `internet`, `local-AS`, `no-advertise` or `no-export`
        """
        pulumi.set(__self__, "community", community)

    @_builtins.property
    @pulumi.getter
    def community(self) -> _builtins.str:
        """
        Standard community value, e.g. `100:1000`, `internet`, `local-AS`, `no-advertise` or `no-export`
        """
        return pulumi.get(self, "community")


@pulumi.output_type
class GetSwitchportFeatureTemplateInterfaceResult(dict):
    def __init__(__self__, *,
                 dot1x_authentication_order_variable: _builtins.str,
                 dot1x_authentication_orders: Sequence[_builtins.str],
                 dot1x_control_direction: _builtins.str,
                 dot1x_control_direction_variable: _builtins.str,
                 dot1x_critical_vlan: _builtins.int,
                 dot1x_critical_vlan_variable: _builtins.str,
                 dot1x_enable: _builtins.bool,
                 dot1x_enable_criticial_voice_vlan: _builtins.bool,
                 dot1x_enable_criticial_voice_vlan_variable: _builtins.str,
                 dot1x_enable_periodic_reauth: _builtins.bool,
                 dot1x_enable_periodic_reauth_variable: _builtins.str,
                 dot1x_enable_variable: _builtins.str,
                 dot1x_guest_vlan: _builtins.int,
                 dot1x_guest_vlan_variable: _builtins.str,
                 dot1x_host_mode: _builtins.str,
                 dot1x_host_mode_variable: _builtins.str,
                 dot1x_mac_authentication_bypass: _builtins.bool,
                 dot1x_mac_authentication_bypass_variable: _builtins.str,
                 dot1x_pae_enable: _builtins.bool,
                 dot1x_pae_enable_variable: _builtins.str,
                 dot1x_periodic_reauth_inactivity_timeout: _builtins.int,
                 dot1x_periodic_reauth_inactivity_timeout_variable: _builtins.str,
                 dot1x_periodic_reauth_interval: _builtins.int,
                 dot1x_periodic_reauth_interval_variable: _builtins.str,
                 dot1x_port_control: _builtins.str,
                 dot1x_port_control_variable: _builtins.str,
                 dot1x_restricted_vlan: _builtins.int,
                 dot1x_restricted_vlan_variable: _builtins.str,
                 duplex: _builtins.str,
                 duplex_variable: _builtins.str,
                 name: _builtins.str,
                 name_variable: _builtins.str,
                 optional: _builtins.bool,
                 shutdown: _builtins.bool,
                 shutdown_variable: _builtins.str,
                 speed: _builtins.str,
                 speed_variable: _builtins.str,
                 switchport_access_vlan: _builtins.int,
                 switchport_access_vlan_variable: _builtins.str,
                 switchport_mode: _builtins.str,
                 switchport_trunk_allowed_vlans: _builtins.str,
                 switchport_trunk_allowed_vlans_variable: _builtins.str,
                 switchport_trunk_native_vlan: _builtins.int,
                 switchport_trunk_native_vlan_variable: _builtins.str,
                 voice_vlan: _builtins.int,
                 voice_vlan_variable: _builtins.str):
        """
        :param _builtins.str dot1x_authentication_order_variable: Variable name
        :param Sequence[_builtins.str] dot1x_authentication_orders: Specify authentication methods in the order of preference
        :param _builtins.str dot1x_control_direction: Set uni or bi directional authorization mode
        :param _builtins.str dot1x_control_direction_variable: Variable name
        :param _builtins.int dot1x_critical_vlan: Set Critical VLAN
        :param _builtins.str dot1x_critical_vlan_variable: Variable name
        :param _builtins.bool dot1x_enable: Set 802.1x on off
        :param _builtins.bool dot1x_enable_criticial_voice_vlan: Enable Critical Voice VLAN
        :param _builtins.str dot1x_enable_criticial_voice_vlan_variable: Variable name
        :param _builtins.bool dot1x_enable_periodic_reauth: Enable Periodic Reauthentication
        :param _builtins.str dot1x_enable_periodic_reauth_variable: Variable name
        :param _builtins.str dot1x_enable_variable: Variable name
        :param _builtins.int dot1x_guest_vlan: Set vlan to drop non-802.1x enabled clients into if client is not in MAB list
        :param _builtins.str dot1x_guest_vlan_variable: Variable name
        :param _builtins.str dot1x_host_mode: Set host mode
        :param _builtins.str dot1x_host_mode_variable: Variable name
        :param _builtins.bool dot1x_mac_authentication_bypass: MAC Authentication Bypass
        :param _builtins.str dot1x_mac_authentication_bypass_variable: Variable name
        :param _builtins.bool dot1x_pae_enable: Set 802.1x Interface Pae Type
        :param _builtins.str dot1x_pae_enable_variable: Variable name
        :param _builtins.int dot1x_periodic_reauth_inactivity_timeout: Periodic Reauthentication Inactivity Timeout (in seconds)
        :param _builtins.str dot1x_periodic_reauth_inactivity_timeout_variable: Variable name
        :param _builtins.int dot1x_periodic_reauth_interval: Periodic Reauthentication Interval (in seconds)
        :param _builtins.str dot1x_periodic_reauth_interval_variable: Variable name
        :param _builtins.str dot1x_port_control: Set Port-Control Mode
        :param _builtins.str dot1x_port_control_variable: Variable name
        :param _builtins.int dot1x_restricted_vlan: Set Restricted VLAN ID
        :param _builtins.str dot1x_restricted_vlan_variable: Variable name
        :param _builtins.str duplex: Duplex mode
        :param _builtins.str duplex_variable: Variable name
        :param _builtins.str name: Set Interface name
        :param _builtins.str name_variable: Variable name
        :param _builtins.bool optional: Indicates if list item is considered optional.
        :param _builtins.bool shutdown: Administrative state
        :param _builtins.str shutdown_variable: Variable name
        :param _builtins.str speed: Set interface speed
        :param _builtins.str speed_variable: Variable name
        :param _builtins.int switchport_access_vlan: Set VLAN identifier associated with bridging domain
        :param _builtins.str switchport_access_vlan_variable: Variable name
        :param _builtins.str switchport_mode: Set type of switch port: access/trunk
        :param _builtins.str switchport_trunk_allowed_vlans: Configure VLAN IDs used with the trunk
        :param _builtins.str switchport_trunk_allowed_vlans_variable: Variable name
        :param _builtins.int switchport_trunk_native_vlan: Configure VLAN ID used for native VLAN
        :param _builtins.str switchport_trunk_native_vlan_variable: Variable name
        :param _builtins.int voice_vlan: Configure Voice Vlan
        :param _builtins.str voice_vlan_variable: Variable name
        """
        pulumi.set(__self__, "dot1x_authentication_order_variable", dot1x_authentication_order_variable)
        pulumi.set(__self__, "dot1x_authentication_orders", dot1x_authentication_orders)
        pulumi.set(__self__, "dot1x_control_direction", dot1x_control_direction)
        pulumi.set(__self__, "dot1x_control_direction_variable", dot1x_control_direction_variable)
        pulumi.set(__self__, "dot1x_critical_vlan", dot1x_critical_vlan)
        pulumi.set(__self__, "dot1x_critical_vlan_variable", dot1x_critical_vlan_variable)
        pulumi.set(__self__, "dot1x_enable", dot1x_enable)
        pulumi.set(__self__, "dot1x_enable_criticial_voice_vlan", dot1x_enable_criticial_voice_vlan)
        pulumi.set(__self__, "dot1x_enable_criticial_voice_vlan_variable", dot1x_enable_criticial_voice_vlan_variable)
        pulumi.set(__self__, "dot1x_enable_periodic_reauth", dot1x_enable_periodic_reauth)
        pulumi.set(__self__, "dot1x_enable_periodic_reauth_variable", dot1x_enable_periodic_reauth_variable)
        pulumi.set(__self__, "dot1x_enable_variable", dot1x_enable_variable)
        pulumi.set(__self__, "dot1x_guest_vlan", dot1x_guest_vlan)
        pulumi.set(__self__, "dot1x_guest_vlan_variable", dot1x_guest_vlan_variable)
        pulumi.set(__self__, "dot1x_host_mode", dot1x_host_mode)
        pulumi.set(__self__, "dot1x_host_mode_variable", dot1x_host_mode_variable)
        pulumi.set(__self__, "dot1x_mac_authentication_bypass", dot1x_mac_authentication_bypass)
        pulumi.set(__self__, "dot1x_mac_authentication_bypass_variable", dot1x_mac_authentication_bypass_variable)
        pulumi.set(__self__, "dot1x_pae_enable", dot1x_pae_enable)
        pulumi.set(__self__, "dot1x_pae_enable_variable", dot1x_pae_enable_variable)
        pulumi.set(__self__, "dot1x_periodic_reauth_inactivity_timeout", dot1x_periodic_reauth_inactivity_timeout)
        pulumi.set(__self__, "dot1x_periodic_reauth_inactivity_timeout_variable", dot1x_periodic_reauth_inactivity_timeout_variable)
        pulumi.set(__self__, "dot1x_periodic_reauth_interval", dot1x_periodic_reauth_interval)
        pulumi.set(__self__, "dot1x_periodic_reauth_interval_variable", dot1x_periodic_reauth_interval_variable)
        pulumi.set(__self__, "dot1x_port_control", dot1x_port_control)
        pulumi.set(__self__, "dot1x_port_control_variable", dot1x_port_control_variable)
        pulumi.set(__self__, "dot1x_restricted_vlan", dot1x_restricted_vlan)
        pulumi.set(__self__, "dot1x_restricted_vlan_variable", dot1x_restricted_vlan_variable)
        pulumi.set(__self__, "duplex", duplex)
        pulumi.set(__self__, "duplex_variable", duplex_variable)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "name_variable", name_variable)
        pulumi.set(__self__, "optional", optional)
        pulumi.set(__self__, "shutdown", shutdown)
        pulumi.set(__self__, "shutdown_variable", shutdown_variable)
        pulumi.set(__self__, "speed", speed)
        pulumi.set(__self__, "speed_variable", speed_variable)
        pulumi.set(__self__, "switchport_access_vlan", switchport_access_vlan)
        pulumi.set(__self__, "switchport_access_vlan_variable", switchport_access_vlan_variable)
        pulumi.set(__self__, "switchport_mode", switchport_mode)
        pulumi.set(__self__, "switchport_trunk_allowed_vlans", switchport_trunk_allowed_vlans)
        pulumi.set(__self__, "switchport_trunk_allowed_vlans_variable", switchport_trunk_allowed_vlans_variable)
        pulumi.set(__self__, "switchport_trunk_native_vlan", switchport_trunk_native_vlan)
        pulumi.set(__self__, "switchport_trunk_native_vlan_variable", switchport_trunk_native_vlan_variable)
        pulumi.set(__self__, "voice_vlan", voice_vlan)
        pulumi.set(__self__, "voice_vlan_variable", voice_vlan_variable)

    @_builtins.property
    @pulumi.getter(name="dot1xAuthenticationOrderVariable")
    def dot1x_authentication_order_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "dot1x_authentication_order_variable")

    @_builtins.property
    @pulumi.getter(name="dot1xAuthenticationOrders")
    def dot1x_authentication_orders(self) -> Sequence[_builtins.str]:
        """
        Specify authentication methods in the order of preference
        """
        return pulumi.get(self, "dot1x_authentication_orders")

    @_builtins.property
    @pulumi.getter(name="dot1xControlDirection")
    def dot1x_control_direction(self) -> _builtins.str:
        """
        Set uni or bi directional authorization mode
        """
        return pulumi.get(self, "dot1x_control_direction")

    @_builtins.property
    @pulumi.getter(name="dot1xControlDirectionVariable")
    def dot1x_control_direction_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "dot1x_control_direction_variable")

    @_builtins.property
    @pulumi.getter(name="dot1xCriticalVlan")
    def dot1x_critical_vlan(self) -> _builtins.int:
        """
        Set Critical VLAN
        """
        return pulumi.get(self, "dot1x_critical_vlan")

    @_builtins.property
    @pulumi.getter(name="dot1xCriticalVlanVariable")
    def dot1x_critical_vlan_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "dot1x_critical_vlan_variable")

    @_builtins.property
    @pulumi.getter(name="dot1xEnable")
    def dot1x_enable(self) -> _builtins.bool:
        """
        Set 802.1x on off
        """
        return pulumi.get(self, "dot1x_enable")

    @_builtins.property
    @pulumi.getter(name="dot1xEnableCriticialVoiceVlan")
    def dot1x_enable_criticial_voice_vlan(self) -> _builtins.bool:
        """
        Enable Critical Voice VLAN
        """
        return pulumi.get(self, "dot1x_enable_criticial_voice_vlan")

    @_builtins.property
    @pulumi.getter(name="dot1xEnableCriticialVoiceVlanVariable")
    def dot1x_enable_criticial_voice_vlan_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "dot1x_enable_criticial_voice_vlan_variable")

    @_builtins.property
    @pulumi.getter(name="dot1xEnablePeriodicReauth")
    def dot1x_enable_periodic_reauth(self) -> _builtins.bool:
        """
        Enable Periodic Reauthentication
        """
        return pulumi.get(self, "dot1x_enable_periodic_reauth")

    @_builtins.property
    @pulumi.getter(name="dot1xEnablePeriodicReauthVariable")
    def dot1x_enable_periodic_reauth_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "dot1x_enable_periodic_reauth_variable")

    @_builtins.property
    @pulumi.getter(name="dot1xEnableVariable")
    def dot1x_enable_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "dot1x_enable_variable")

    @_builtins.property
    @pulumi.getter(name="dot1xGuestVlan")
    def dot1x_guest_vlan(self) -> _builtins.int:
        """
        Set vlan to drop non-802.1x enabled clients into if client is not in MAB list
        """
        return pulumi.get(self, "dot1x_guest_vlan")

    @_builtins.property
    @pulumi.getter(name="dot1xGuestVlanVariable")
    def dot1x_guest_vlan_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "dot1x_guest_vlan_variable")

    @_builtins.property
    @pulumi.getter(name="dot1xHostMode")
    def dot1x_host_mode(self) -> _builtins.str:
        """
        Set host mode
        """
        return pulumi.get(self, "dot1x_host_mode")

    @_builtins.property
    @pulumi.getter(name="dot1xHostModeVariable")
    def dot1x_host_mode_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "dot1x_host_mode_variable")

    @_builtins.property
    @pulumi.getter(name="dot1xMacAuthenticationBypass")
    def dot1x_mac_authentication_bypass(self) -> _builtins.bool:
        """
        MAC Authentication Bypass
        """
        return pulumi.get(self, "dot1x_mac_authentication_bypass")

    @_builtins.property
    @pulumi.getter(name="dot1xMacAuthenticationBypassVariable")
    def dot1x_mac_authentication_bypass_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "dot1x_mac_authentication_bypass_variable")

    @_builtins.property
    @pulumi.getter(name="dot1xPaeEnable")
    def dot1x_pae_enable(self) -> _builtins.bool:
        """
        Set 802.1x Interface Pae Type
        """
        return pulumi.get(self, "dot1x_pae_enable")

    @_builtins.property
    @pulumi.getter(name="dot1xPaeEnableVariable")
    def dot1x_pae_enable_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "dot1x_pae_enable_variable")

    @_builtins.property
    @pulumi.getter(name="dot1xPeriodicReauthInactivityTimeout")
    def dot1x_periodic_reauth_inactivity_timeout(self) -> _builtins.int:
        """
        Periodic Reauthentication Inactivity Timeout (in seconds)
        """
        return pulumi.get(self, "dot1x_periodic_reauth_inactivity_timeout")

    @_builtins.property
    @pulumi.getter(name="dot1xPeriodicReauthInactivityTimeoutVariable")
    def dot1x_periodic_reauth_inactivity_timeout_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "dot1x_periodic_reauth_inactivity_timeout_variable")

    @_builtins.property
    @pulumi.getter(name="dot1xPeriodicReauthInterval")
    def dot1x_periodic_reauth_interval(self) -> _builtins.int:
        """
        Periodic Reauthentication Interval (in seconds)
        """
        return pulumi.get(self, "dot1x_periodic_reauth_interval")

    @_builtins.property
    @pulumi.getter(name="dot1xPeriodicReauthIntervalVariable")
    def dot1x_periodic_reauth_interval_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "dot1x_periodic_reauth_interval_variable")

    @_builtins.property
    @pulumi.getter(name="dot1xPortControl")
    def dot1x_port_control(self) -> _builtins.str:
        """
        Set Port-Control Mode
        """
        return pulumi.get(self, "dot1x_port_control")

    @_builtins.property
    @pulumi.getter(name="dot1xPortControlVariable")
    def dot1x_port_control_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "dot1x_port_control_variable")

    @_builtins.property
    @pulumi.getter(name="dot1xRestrictedVlan")
    def dot1x_restricted_vlan(self) -> _builtins.int:
        """
        Set Restricted VLAN ID
        """
        return pulumi.get(self, "dot1x_restricted_vlan")

    @_builtins.property
    @pulumi.getter(name="dot1xRestrictedVlanVariable")
    def dot1x_restricted_vlan_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "dot1x_restricted_vlan_variable")

    @_builtins.property
    @pulumi.getter
    def duplex(self) -> _builtins.str:
        """
        Duplex mode
        """
        return pulumi.get(self, "duplex")

    @_builtins.property
    @pulumi.getter(name="duplexVariable")
    def duplex_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "duplex_variable")

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        """
        Set Interface name
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter(name="nameVariable")
    def name_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "name_variable")

    @_builtins.property
    @pulumi.getter
    def optional(self) -> _builtins.bool:
        """
        Indicates if list item is considered optional.
        """
        return pulumi.get(self, "optional")

    @_builtins.property
    @pulumi.getter
    def shutdown(self) -> _builtins.bool:
        """
        Administrative state
        """
        return pulumi.get(self, "shutdown")

    @_builtins.property
    @pulumi.getter(name="shutdownVariable")
    def shutdown_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "shutdown_variable")

    @_builtins.property
    @pulumi.getter
    def speed(self) -> _builtins.str:
        """
        Set interface speed
        """
        return pulumi.get(self, "speed")

    @_builtins.property
    @pulumi.getter(name="speedVariable")
    def speed_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "speed_variable")

    @_builtins.property
    @pulumi.getter(name="switchportAccessVlan")
    def switchport_access_vlan(self) -> _builtins.int:
        """
        Set VLAN identifier associated with bridging domain
        """
        return pulumi.get(self, "switchport_access_vlan")

    @_builtins.property
    @pulumi.getter(name="switchportAccessVlanVariable")
    def switchport_access_vlan_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "switchport_access_vlan_variable")

    @_builtins.property
    @pulumi.getter(name="switchportMode")
    def switchport_mode(self) -> _builtins.str:
        """
        Set type of switch port: access/trunk
        """
        return pulumi.get(self, "switchport_mode")

    @_builtins.property
    @pulumi.getter(name="switchportTrunkAllowedVlans")
    def switchport_trunk_allowed_vlans(self) -> _builtins.str:
        """
        Configure VLAN IDs used with the trunk
        """
        return pulumi.get(self, "switchport_trunk_allowed_vlans")

    @_builtins.property
    @pulumi.getter(name="switchportTrunkAllowedVlansVariable")
    def switchport_trunk_allowed_vlans_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "switchport_trunk_allowed_vlans_variable")

    @_builtins.property
    @pulumi.getter(name="switchportTrunkNativeVlan")
    def switchport_trunk_native_vlan(self) -> _builtins.int:
        """
        Configure VLAN ID used for native VLAN
        """
        return pulumi.get(self, "switchport_trunk_native_vlan")

    @_builtins.property
    @pulumi.getter(name="switchportTrunkNativeVlanVariable")
    def switchport_trunk_native_vlan_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "switchport_trunk_native_vlan_variable")

    @_builtins.property
    @pulumi.getter(name="voiceVlan")
    def voice_vlan(self) -> _builtins.int:
        """
        Configure Voice Vlan
        """
        return pulumi.get(self, "voice_vlan")

    @_builtins.property
    @pulumi.getter(name="voiceVlanVariable")
    def voice_vlan_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "voice_vlan_variable")


@pulumi.output_type
class GetSwitchportFeatureTemplateStaticMacAddressResult(dict):
    def __init__(__self__, *,
                 if_name: _builtins.str,
                 if_name_variable: _builtins.str,
                 mac_address: _builtins.str,
                 mac_address_variable: _builtins.str,
                 optional: _builtins.bool,
                 vlan: _builtins.int,
                 vlan_variable: _builtins.str):
        """
        :param _builtins.str if_name: Interface name: GigabitEthernet0/<>/<>
        :param _builtins.str if_name_variable: Variable name
        :param _builtins.str mac_address: Set MAC address in xxxx.xxxx.xxxx format
        :param _builtins.str mac_address_variable: Variable name
        :param _builtins.bool optional: Indicates if list item is considered optional.
        :param _builtins.int vlan: Configure VLAN ID used with the mac and interface
        :param _builtins.str vlan_variable: Variable name
        """
        pulumi.set(__self__, "if_name", if_name)
        pulumi.set(__self__, "if_name_variable", if_name_variable)
        pulumi.set(__self__, "mac_address", mac_address)
        pulumi.set(__self__, "mac_address_variable", mac_address_variable)
        pulumi.set(__self__, "optional", optional)
        pulumi.set(__self__, "vlan", vlan)
        pulumi.set(__self__, "vlan_variable", vlan_variable)

    @_builtins.property
    @pulumi.getter(name="ifName")
    def if_name(self) -> _builtins.str:
        """
        Interface name: GigabitEthernet0/<>/<>
        """
        return pulumi.get(self, "if_name")

    @_builtins.property
    @pulumi.getter(name="ifNameVariable")
    def if_name_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "if_name_variable")

    @_builtins.property
    @pulumi.getter(name="macAddress")
    def mac_address(self) -> _builtins.str:
        """
        Set MAC address in xxxx.xxxx.xxxx format
        """
        return pulumi.get(self, "mac_address")

    @_builtins.property
    @pulumi.getter(name="macAddressVariable")
    def mac_address_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "mac_address_variable")

    @_builtins.property
    @pulumi.getter
    def optional(self) -> _builtins.bool:
        """
        Indicates if list item is considered optional.
        """
        return pulumi.get(self, "optional")

    @_builtins.property
    @pulumi.getter
    def vlan(self) -> _builtins.int:
        """
        Configure VLAN ID used with the mac and interface
        """
        return pulumi.get(self, "vlan")

    @_builtins.property
    @pulumi.getter(name="vlanVariable")
    def vlan_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "vlan_variable")


@pulumi.output_type
class GetSystemAaaFeatureAccountingRuleResult(dict):
    def __init__(__self__, *,
                 groups: Sequence[_builtins.str],
                 level: _builtins.str,
                 method: _builtins.str,
                 rule_id: _builtins.str,
                 start_stop: _builtins.bool,
                 start_stop_variable: _builtins.str):
        """
        :param Sequence[_builtins.str] groups: Use Server-group
        :param _builtins.str level: Privilege level when method is commands
        :param _builtins.str method: Configure Accounting Method
        :param _builtins.str rule_id: Configure Accounting Rule ID
        :param _builtins.bool start_stop: Record start and stop without waiting
        :param _builtins.str start_stop_variable: Variable name
        """
        pulumi.set(__self__, "groups", groups)
        pulumi.set(__self__, "level", level)
        pulumi.set(__self__, "method", method)
        pulumi.set(__self__, "rule_id", rule_id)
        pulumi.set(__self__, "start_stop", start_stop)
        pulumi.set(__self__, "start_stop_variable", start_stop_variable)

    @_builtins.property
    @pulumi.getter
    def groups(self) -> Sequence[_builtins.str]:
        """
        Use Server-group
        """
        return pulumi.get(self, "groups")

    @_builtins.property
    @pulumi.getter
    def level(self) -> _builtins.str:
        """
        Privilege level when method is commands
        """
        return pulumi.get(self, "level")

    @_builtins.property
    @pulumi.getter
    def method(self) -> _builtins.str:
        """
        Configure Accounting Method
        """
        return pulumi.get(self, "method")

    @_builtins.property
    @pulumi.getter(name="ruleId")
    def rule_id(self) -> _builtins.str:
        """
        Configure Accounting Rule ID
        """
        return pulumi.get(self, "rule_id")

    @_builtins.property
    @pulumi.getter(name="startStop")
    def start_stop(self) -> _builtins.bool:
        """
        Record start and stop without waiting
        """
        return pulumi.get(self, "start_stop")

    @_builtins.property
    @pulumi.getter(name="startStopVariable")
    def start_stop_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "start_stop_variable")


@pulumi.output_type
class GetSystemAaaFeatureAuthorizationRuleResult(dict):
    def __init__(__self__, *,
                 groups: Sequence[_builtins.str],
                 if_authenticated: _builtins.bool,
                 level: _builtins.str,
                 method: _builtins.str,
                 rule_id: _builtins.str):
        """
        :param Sequence[_builtins.str] groups: Use Server-group
        :param _builtins.bool if_authenticated: Succeed if user has authenticated
        :param _builtins.str level: Privilege level when method is commands
        :param _builtins.str method: Method
        :param _builtins.str rule_id: Configure Authorization Rule ID
        """
        pulumi.set(__self__, "groups", groups)
        pulumi.set(__self__, "if_authenticated", if_authenticated)
        pulumi.set(__self__, "level", level)
        pulumi.set(__self__, "method", method)
        pulumi.set(__self__, "rule_id", rule_id)

    @_builtins.property
    @pulumi.getter
    def groups(self) -> Sequence[_builtins.str]:
        """
        Use Server-group
        """
        return pulumi.get(self, "groups")

    @_builtins.property
    @pulumi.getter(name="ifAuthenticated")
    def if_authenticated(self) -> _builtins.bool:
        """
        Succeed if user has authenticated
        """
        return pulumi.get(self, "if_authenticated")

    @_builtins.property
    @pulumi.getter
    def level(self) -> _builtins.str:
        """
        Privilege level when method is commands
        """
        return pulumi.get(self, "level")

    @_builtins.property
    @pulumi.getter
    def method(self) -> _builtins.str:
        """
        Method
        """
        return pulumi.get(self, "method")

    @_builtins.property
    @pulumi.getter(name="ruleId")
    def rule_id(self) -> _builtins.str:
        """
        Configure Authorization Rule ID
        """
        return pulumi.get(self, "rule_id")


@pulumi.output_type
class GetSystemAaaFeatureRadiusGroupResult(dict):
    def __init__(__self__, *,
                 group_name: _builtins.str,
                 servers: Sequence['outputs.GetSystemAaaFeatureRadiusGroupServerResult'],
                 source_interface: _builtins.str,
                 source_interface_variable: _builtins.str,
                 vpn: _builtins.int):
        """
        :param _builtins.str group_name: Set Radius server Group Name
        :param Sequence['GetSystemAaaFeatureRadiusGroupServerArgs'] servers: Configure the Radius server
        :param _builtins.str source_interface: Set interface to use to reach Radius server
        :param _builtins.str source_interface_variable: Variable name
        :param _builtins.int vpn: Set VPN in which Radius server is located
        """
        pulumi.set(__self__, "group_name", group_name)
        pulumi.set(__self__, "servers", servers)
        pulumi.set(__self__, "source_interface", source_interface)
        pulumi.set(__self__, "source_interface_variable", source_interface_variable)
        pulumi.set(__self__, "vpn", vpn)

    @_builtins.property
    @pulumi.getter(name="groupName")
    def group_name(self) -> _builtins.str:
        """
        Set Radius server Group Name
        """
        return pulumi.get(self, "group_name")

    @_builtins.property
    @pulumi.getter
    def servers(self) -> Sequence['outputs.GetSystemAaaFeatureRadiusGroupServerResult']:
        """
        Configure the Radius server
        """
        return pulumi.get(self, "servers")

    @_builtins.property
    @pulumi.getter(name="sourceInterface")
    def source_interface(self) -> _builtins.str:
        """
        Set interface to use to reach Radius server
        """
        return pulumi.get(self, "source_interface")

    @_builtins.property
    @pulumi.getter(name="sourceInterfaceVariable")
    def source_interface_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "source_interface_variable")

    @_builtins.property
    @pulumi.getter
    def vpn(self) -> _builtins.int:
        """
        Set VPN in which Radius server is located
        """
        return pulumi.get(self, "vpn")


@pulumi.output_type
class GetSystemAaaFeatureRadiusGroupServerResult(dict):
    def __init__(__self__, *,
                 acct_port: _builtins.int,
                 acct_port_variable: _builtins.str,
                 address: _builtins.str,
                 auth_port: _builtins.int,
                 auth_port_variable: _builtins.str,
                 key: _builtins.str,
                 key_enum: _builtins.str,
                 key_type: _builtins.str,
                 key_type_variable: _builtins.str,
                 retransmit: _builtins.int,
                 retransmit_variable: _builtins.str,
                 secret_key: _builtins.str,
                 secret_key_variable: _builtins.str,
                 timeout: _builtins.int,
                 timeout_variable: _builtins.str):
        """
        :param _builtins.int acct_port: Set Accounting port to use to connect to Radius server
        :param _builtins.str acct_port_variable: Variable name
        :param _builtins.str address: Set IP address of Radius server
        :param _builtins.int auth_port: Set Authentication port to use to connect to Radius server
        :param _builtins.str auth_port_variable: Variable name
        :param _builtins.str key: Set the Radius server shared key
        :param _builtins.str key_enum: Type of encyption. To be used for type 6
        :param _builtins.str key_type: key type
        :param _builtins.str key_type_variable: Variable name
        :param _builtins.int retransmit: Configure how many times to contact this Radius server
        :param _builtins.str retransmit_variable: Variable name
        :param _builtins.str secret_key: Set the Radius server shared type 7 encrypted key
        :param _builtins.str secret_key_variable: Variable name
        :param _builtins.int timeout: Configure how long to wait for replies from the Radius server
        :param _builtins.str timeout_variable: Variable name
        """
        pulumi.set(__self__, "acct_port", acct_port)
        pulumi.set(__self__, "acct_port_variable", acct_port_variable)
        pulumi.set(__self__, "address", address)
        pulumi.set(__self__, "auth_port", auth_port)
        pulumi.set(__self__, "auth_port_variable", auth_port_variable)
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "key_enum", key_enum)
        pulumi.set(__self__, "key_type", key_type)
        pulumi.set(__self__, "key_type_variable", key_type_variable)
        pulumi.set(__self__, "retransmit", retransmit)
        pulumi.set(__self__, "retransmit_variable", retransmit_variable)
        pulumi.set(__self__, "secret_key", secret_key)
        pulumi.set(__self__, "secret_key_variable", secret_key_variable)
        pulumi.set(__self__, "timeout", timeout)
        pulumi.set(__self__, "timeout_variable", timeout_variable)

    @_builtins.property
    @pulumi.getter(name="acctPort")
    def acct_port(self) -> _builtins.int:
        """
        Set Accounting port to use to connect to Radius server
        """
        return pulumi.get(self, "acct_port")

    @_builtins.property
    @pulumi.getter(name="acctPortVariable")
    def acct_port_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "acct_port_variable")

    @_builtins.property
    @pulumi.getter
    def address(self) -> _builtins.str:
        """
        Set IP address of Radius server
        """
        return pulumi.get(self, "address")

    @_builtins.property
    @pulumi.getter(name="authPort")
    def auth_port(self) -> _builtins.int:
        """
        Set Authentication port to use to connect to Radius server
        """
        return pulumi.get(self, "auth_port")

    @_builtins.property
    @pulumi.getter(name="authPortVariable")
    def auth_port_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "auth_port_variable")

    @_builtins.property
    @pulumi.getter
    def key(self) -> _builtins.str:
        """
        Set the Radius server shared key
        """
        return pulumi.get(self, "key")

    @_builtins.property
    @pulumi.getter(name="keyEnum")
    def key_enum(self) -> _builtins.str:
        """
        Type of encyption. To be used for type 6
        """
        return pulumi.get(self, "key_enum")

    @_builtins.property
    @pulumi.getter(name="keyType")
    def key_type(self) -> _builtins.str:
        """
        key type
        """
        return pulumi.get(self, "key_type")

    @_builtins.property
    @pulumi.getter(name="keyTypeVariable")
    def key_type_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "key_type_variable")

    @_builtins.property
    @pulumi.getter
    def retransmit(self) -> _builtins.int:
        """
        Configure how many times to contact this Radius server
        """
        return pulumi.get(self, "retransmit")

    @_builtins.property
    @pulumi.getter(name="retransmitVariable")
    def retransmit_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "retransmit_variable")

    @_builtins.property
    @pulumi.getter(name="secretKey")
    def secret_key(self) -> _builtins.str:
        """
        Set the Radius server shared type 7 encrypted key
        """
        return pulumi.get(self, "secret_key")

    @_builtins.property
    @pulumi.getter(name="secretKeyVariable")
    def secret_key_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "secret_key_variable")

    @_builtins.property
    @pulumi.getter
    def timeout(self) -> _builtins.int:
        """
        Configure how long to wait for replies from the Radius server
        """
        return pulumi.get(self, "timeout")

    @_builtins.property
    @pulumi.getter(name="timeoutVariable")
    def timeout_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "timeout_variable")


@pulumi.output_type
class GetSystemAaaFeatureTacacsGroupResult(dict):
    def __init__(__self__, *,
                 group_name: _builtins.str,
                 servers: Sequence['outputs.GetSystemAaaFeatureTacacsGroupServerResult'],
                 source_interface: _builtins.str,
                 source_interface_variable: _builtins.str,
                 vpn: _builtins.int):
        """
        :param _builtins.str group_name: Set TACACS server Group Name
        :param Sequence['GetSystemAaaFeatureTacacsGroupServerArgs'] servers: Configure the TACACS server
        :param _builtins.str source_interface: Set interface to use to reach TACACS server
        :param _builtins.str source_interface_variable: Variable name
        :param _builtins.int vpn: Set VPN in which TACACS server is located
        """
        pulumi.set(__self__, "group_name", group_name)
        pulumi.set(__self__, "servers", servers)
        pulumi.set(__self__, "source_interface", source_interface)
        pulumi.set(__self__, "source_interface_variable", source_interface_variable)
        pulumi.set(__self__, "vpn", vpn)

    @_builtins.property
    @pulumi.getter(name="groupName")
    def group_name(self) -> _builtins.str:
        """
        Set TACACS server Group Name
        """
        return pulumi.get(self, "group_name")

    @_builtins.property
    @pulumi.getter
    def servers(self) -> Sequence['outputs.GetSystemAaaFeatureTacacsGroupServerResult']:
        """
        Configure the TACACS server
        """
        return pulumi.get(self, "servers")

    @_builtins.property
    @pulumi.getter(name="sourceInterface")
    def source_interface(self) -> _builtins.str:
        """
        Set interface to use to reach TACACS server
        """
        return pulumi.get(self, "source_interface")

    @_builtins.property
    @pulumi.getter(name="sourceInterfaceVariable")
    def source_interface_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "source_interface_variable")

    @_builtins.property
    @pulumi.getter
    def vpn(self) -> _builtins.int:
        """
        Set VPN in which TACACS server is located
        """
        return pulumi.get(self, "vpn")


@pulumi.output_type
class GetSystemAaaFeatureTacacsGroupServerResult(dict):
    def __init__(__self__, *,
                 address: _builtins.str,
                 key: _builtins.str,
                 key_enum: _builtins.str,
                 port: _builtins.int,
                 port_variable: _builtins.str,
                 secret_key: _builtins.str,
                 secret_key_variable: _builtins.str,
                 timeout: _builtins.int,
                 timeout_variable: _builtins.str):
        """
        :param _builtins.str address: Set IP address of TACACS server
        :param _builtins.str key: Set the TACACS server shared key
        :param _builtins.str key_enum: Type of encyption. To be used for type 6
        :param _builtins.int port: TACACS Port
        :param _builtins.str port_variable: Variable name
        :param _builtins.str secret_key: Set the TACACS server shared type 7 encrypted key
        :param _builtins.str secret_key_variable: Variable name
        :param _builtins.int timeout: Configure how long to wait for replies from the TACACS server
        :param _builtins.str timeout_variable: Variable name
        """
        pulumi.set(__self__, "address", address)
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "key_enum", key_enum)
        pulumi.set(__self__, "port", port)
        pulumi.set(__self__, "port_variable", port_variable)
        pulumi.set(__self__, "secret_key", secret_key)
        pulumi.set(__self__, "secret_key_variable", secret_key_variable)
        pulumi.set(__self__, "timeout", timeout)
        pulumi.set(__self__, "timeout_variable", timeout_variable)

    @_builtins.property
    @pulumi.getter
    def address(self) -> _builtins.str:
        """
        Set IP address of TACACS server
        """
        return pulumi.get(self, "address")

    @_builtins.property
    @pulumi.getter
    def key(self) -> _builtins.str:
        """
        Set the TACACS server shared key
        """
        return pulumi.get(self, "key")

    @_builtins.property
    @pulumi.getter(name="keyEnum")
    def key_enum(self) -> _builtins.str:
        """
        Type of encyption. To be used for type 6
        """
        return pulumi.get(self, "key_enum")

    @_builtins.property
    @pulumi.getter
    def port(self) -> _builtins.int:
        """
        TACACS Port
        """
        return pulumi.get(self, "port")

    @_builtins.property
    @pulumi.getter(name="portVariable")
    def port_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "port_variable")

    @_builtins.property
    @pulumi.getter(name="secretKey")
    def secret_key(self) -> _builtins.str:
        """
        Set the TACACS server shared type 7 encrypted key
        """
        return pulumi.get(self, "secret_key")

    @_builtins.property
    @pulumi.getter(name="secretKeyVariable")
    def secret_key_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "secret_key_variable")

    @_builtins.property
    @pulumi.getter
    def timeout(self) -> _builtins.int:
        """
        Configure how long to wait for replies from the TACACS server
        """
        return pulumi.get(self, "timeout")

    @_builtins.property
    @pulumi.getter(name="timeoutVariable")
    def timeout_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "timeout_variable")


@pulumi.output_type
class GetSystemAaaFeatureUserResult(dict):
    def __init__(__self__, *,
                 name: _builtins.str,
                 name_variable: _builtins.str,
                 password: _builtins.str,
                 password_variable: _builtins.str,
                 privilege: _builtins.str,
                 privilege_variable: _builtins.str,
                 public_keys: Sequence['outputs.GetSystemAaaFeatureUserPublicKeyResult']):
        """
        :param _builtins.str name: Set the username
        :param _builtins.str name_variable: Variable name
        :param _builtins.str password: Set the user password
        :param _builtins.str password_variable: Variable name
        :param _builtins.str privilege: Set Privilege Level for this user
        :param _builtins.str privilege_variable: Variable name
        :param Sequence['GetSystemAaaFeatureUserPublicKeyArgs'] public_keys: List of RSA public-keys per user
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "name_variable", name_variable)
        pulumi.set(__self__, "password", password)
        pulumi.set(__self__, "password_variable", password_variable)
        pulumi.set(__self__, "privilege", privilege)
        pulumi.set(__self__, "privilege_variable", privilege_variable)
        pulumi.set(__self__, "public_keys", public_keys)

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        """
        Set the username
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter(name="nameVariable")
    def name_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "name_variable")

    @_builtins.property
    @pulumi.getter
    def password(self) -> _builtins.str:
        """
        Set the user password
        """
        return pulumi.get(self, "password")

    @_builtins.property
    @pulumi.getter(name="passwordVariable")
    def password_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "password_variable")

    @_builtins.property
    @pulumi.getter
    def privilege(self) -> _builtins.str:
        """
        Set Privilege Level for this user
        """
        return pulumi.get(self, "privilege")

    @_builtins.property
    @pulumi.getter(name="privilegeVariable")
    def privilege_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "privilege_variable")

    @_builtins.property
    @pulumi.getter(name="publicKeys")
    def public_keys(self) -> Sequence['outputs.GetSystemAaaFeatureUserPublicKeyResult']:
        """
        List of RSA public-keys per user
        """
        return pulumi.get(self, "public_keys")


@pulumi.output_type
class GetSystemAaaFeatureUserPublicKeyResult(dict):
    def __init__(__self__, *,
                 key_string: _builtins.str,
                 key_type: _builtins.str,
                 key_type_variable: _builtins.str):
        """
        :param _builtins.str key_string: Set the RSA key string
        :param _builtins.str key_type: Only RSA is supported
        :param _builtins.str key_type_variable: Variable name
        """
        pulumi.set(__self__, "key_string", key_string)
        pulumi.set(__self__, "key_type", key_type)
        pulumi.set(__self__, "key_type_variable", key_type_variable)

    @_builtins.property
    @pulumi.getter(name="keyString")
    def key_string(self) -> _builtins.str:
        """
        Set the RSA key string
        """
        return pulumi.get(self, "key_string")

    @_builtins.property
    @pulumi.getter(name="keyType")
    def key_type(self) -> _builtins.str:
        """
        Only RSA is supported
        """
        return pulumi.get(self, "key_type")

    @_builtins.property
    @pulumi.getter(name="keyTypeVariable")
    def key_type_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "key_type_variable")


@pulumi.output_type
class GetSystemBasicFeatureAffinityPerVrfResult(dict):
    def __init__(__self__, *,
                 affinity_group_number: _builtins.int,
                 affinity_group_number_variable: _builtins.str,
                 vrf_range: _builtins.str,
                 vrf_range_variable: _builtins.str):
        """
        :param _builtins.int affinity_group_number: Affinity Group Number
        :param _builtins.str affinity_group_number_variable: Variable name
        :param _builtins.str vrf_range: Range of VRFs
        :param _builtins.str vrf_range_variable: Variable name
        """
        pulumi.set(__self__, "affinity_group_number", affinity_group_number)
        pulumi.set(__self__, "affinity_group_number_variable", affinity_group_number_variable)
        pulumi.set(__self__, "vrf_range", vrf_range)
        pulumi.set(__self__, "vrf_range_variable", vrf_range_variable)

    @_builtins.property
    @pulumi.getter(name="affinityGroupNumber")
    def affinity_group_number(self) -> _builtins.int:
        """
        Affinity Group Number
        """
        return pulumi.get(self, "affinity_group_number")

    @_builtins.property
    @pulumi.getter(name="affinityGroupNumberVariable")
    def affinity_group_number_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "affinity_group_number_variable")

    @_builtins.property
    @pulumi.getter(name="vrfRange")
    def vrf_range(self) -> _builtins.str:
        """
        Range of VRFs
        """
        return pulumi.get(self, "vrf_range")

    @_builtins.property
    @pulumi.getter(name="vrfRangeVariable")
    def vrf_range_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "vrf_range_variable")


@pulumi.output_type
class GetSystemBasicFeatureGpsSmsMobileNumberResult(dict):
    def __init__(__self__, *,
                 number: _builtins.str,
                 number_variable: _builtins.str):
        """
        :param _builtins.str number: Mobile number, ex: 1231234414
        :param _builtins.str number_variable: Variable name
        """
        pulumi.set(__self__, "number", number)
        pulumi.set(__self__, "number_variable", number_variable)

    @_builtins.property
    @pulumi.getter
    def number(self) -> _builtins.str:
        """
        Mobile number, ex: 1231234414
        """
        return pulumi.get(self, "number")

    @_builtins.property
    @pulumi.getter(name="numberVariable")
    def number_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "number_variable")


@pulumi.output_type
class GetSystemBfdFeatureColorResult(dict):
    def __init__(__self__, *,
                 color: _builtins.str,
                 color_variable: _builtins.str,
                 dscp: _builtins.int,
                 dscp_variable: _builtins.str,
                 hello_interval: _builtins.int,
                 hello_interval_variable: _builtins.str,
                 multiplier: _builtins.int,
                 multiplier_variable: _builtins.str,
                 pmtu_discovery: _builtins.bool,
                 pmtu_discovery_variable: _builtins.str):
        """
        :param _builtins.str color: Color that identifies the WAN transport tunnel
        :param _builtins.str color_variable: Variable name
        :param _builtins.int dscp: BFD Default DSCP value for tloc color
        :param _builtins.str dscp_variable: Variable name
        :param _builtins.int hello_interval: Hello Interval (milliseconds)
        :param _builtins.str hello_interval_variable: Variable name
        :param _builtins.int multiplier: Multiplier
        :param _builtins.str multiplier_variable: Variable name
        :param _builtins.bool pmtu_discovery: Path MTU Discovery
        :param _builtins.str pmtu_discovery_variable: Variable name
        """
        pulumi.set(__self__, "color", color)
        pulumi.set(__self__, "color_variable", color_variable)
        pulumi.set(__self__, "dscp", dscp)
        pulumi.set(__self__, "dscp_variable", dscp_variable)
        pulumi.set(__self__, "hello_interval", hello_interval)
        pulumi.set(__self__, "hello_interval_variable", hello_interval_variable)
        pulumi.set(__self__, "multiplier", multiplier)
        pulumi.set(__self__, "multiplier_variable", multiplier_variable)
        pulumi.set(__self__, "pmtu_discovery", pmtu_discovery)
        pulumi.set(__self__, "pmtu_discovery_variable", pmtu_discovery_variable)

    @_builtins.property
    @pulumi.getter
    def color(self) -> _builtins.str:
        """
        Color that identifies the WAN transport tunnel
        """
        return pulumi.get(self, "color")

    @_builtins.property
    @pulumi.getter(name="colorVariable")
    def color_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "color_variable")

    @_builtins.property
    @pulumi.getter
    def dscp(self) -> _builtins.int:
        """
        BFD Default DSCP value for tloc color
        """
        return pulumi.get(self, "dscp")

    @_builtins.property
    @pulumi.getter(name="dscpVariable")
    def dscp_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "dscp_variable")

    @_builtins.property
    @pulumi.getter(name="helloInterval")
    def hello_interval(self) -> _builtins.int:
        """
        Hello Interval (milliseconds)
        """
        return pulumi.get(self, "hello_interval")

    @_builtins.property
    @pulumi.getter(name="helloIntervalVariable")
    def hello_interval_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "hello_interval_variable")

    @_builtins.property
    @pulumi.getter
    def multiplier(self) -> _builtins.int:
        """
        Multiplier
        """
        return pulumi.get(self, "multiplier")

    @_builtins.property
    @pulumi.getter(name="multiplierVariable")
    def multiplier_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "multiplier_variable")

    @_builtins.property
    @pulumi.getter(name="pmtuDiscovery")
    def pmtu_discovery(self) -> _builtins.bool:
        """
        Path MTU Discovery
        """
        return pulumi.get(self, "pmtu_discovery")

    @_builtins.property
    @pulumi.getter(name="pmtuDiscoveryVariable")
    def pmtu_discovery_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "pmtu_discovery_variable")


@pulumi.output_type
class GetSystemIpv4DeviceAccessFeatureSequenceResult(dict):
    def __init__(__self__, *,
                 base_action: _builtins.str,
                 destination_data_prefix_list_id: _builtins.str,
                 destination_ip_prefix_list_variable: _builtins.str,
                 destination_ip_prefix_lists: Sequence[_builtins.str],
                 device_access_port: _builtins.int,
                 id: _builtins.int,
                 name: _builtins.str,
                 source_data_prefix_list_id: _builtins.str,
                 source_ip_prefix_list_variable: _builtins.str,
                 source_ip_prefix_lists: Sequence[_builtins.str],
                 source_ports: Sequence[_builtins.int]):
        """
        :param _builtins.str base_action: Base Action
        :param _builtins.str destination_ip_prefix_list_variable: Variable name
        :param Sequence[_builtins.str] destination_ip_prefix_lists: Destination Data IP Prefix List
        :param _builtins.int device_access_port: device access protocol
        :param _builtins.int id: Sequence Id
        :param _builtins.str name: Sequence Name
        :param _builtins.str source_ip_prefix_list_variable: Variable name
        :param Sequence[_builtins.str] source_ip_prefix_lists: Source Data IP Prefix List
        :param Sequence[_builtins.int] source_ports: Source Port List
        """
        pulumi.set(__self__, "base_action", base_action)
        pulumi.set(__self__, "destination_data_prefix_list_id", destination_data_prefix_list_id)
        pulumi.set(__self__, "destination_ip_prefix_list_variable", destination_ip_prefix_list_variable)
        pulumi.set(__self__, "destination_ip_prefix_lists", destination_ip_prefix_lists)
        pulumi.set(__self__, "device_access_port", device_access_port)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "source_data_prefix_list_id", source_data_prefix_list_id)
        pulumi.set(__self__, "source_ip_prefix_list_variable", source_ip_prefix_list_variable)
        pulumi.set(__self__, "source_ip_prefix_lists", source_ip_prefix_lists)
        pulumi.set(__self__, "source_ports", source_ports)

    @_builtins.property
    @pulumi.getter(name="baseAction")
    def base_action(self) -> _builtins.str:
        """
        Base Action
        """
        return pulumi.get(self, "base_action")

    @_builtins.property
    @pulumi.getter(name="destinationDataPrefixListId")
    def destination_data_prefix_list_id(self) -> _builtins.str:
        return pulumi.get(self, "destination_data_prefix_list_id")

    @_builtins.property
    @pulumi.getter(name="destinationIpPrefixListVariable")
    def destination_ip_prefix_list_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "destination_ip_prefix_list_variable")

    @_builtins.property
    @pulumi.getter(name="destinationIpPrefixLists")
    def destination_ip_prefix_lists(self) -> Sequence[_builtins.str]:
        """
        Destination Data IP Prefix List
        """
        return pulumi.get(self, "destination_ip_prefix_lists")

    @_builtins.property
    @pulumi.getter(name="deviceAccessPort")
    def device_access_port(self) -> _builtins.int:
        """
        device access protocol
        """
        return pulumi.get(self, "device_access_port")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.int:
        """
        Sequence Id
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        """
        Sequence Name
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter(name="sourceDataPrefixListId")
    def source_data_prefix_list_id(self) -> _builtins.str:
        return pulumi.get(self, "source_data_prefix_list_id")

    @_builtins.property
    @pulumi.getter(name="sourceIpPrefixListVariable")
    def source_ip_prefix_list_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "source_ip_prefix_list_variable")

    @_builtins.property
    @pulumi.getter(name="sourceIpPrefixLists")
    def source_ip_prefix_lists(self) -> Sequence[_builtins.str]:
        """
        Source Data IP Prefix List
        """
        return pulumi.get(self, "source_ip_prefix_lists")

    @_builtins.property
    @pulumi.getter(name="sourcePorts")
    def source_ports(self) -> Sequence[_builtins.int]:
        """
        Source Port List
        """
        return pulumi.get(self, "source_ports")


@pulumi.output_type
class GetSystemIpv6DeviceAccessFeatureSequenceResult(dict):
    def __init__(__self__, *,
                 base_action: _builtins.str,
                 destination_data_prefix_list_id: _builtins.str,
                 destination_ip_prefix_list_variable: _builtins.str,
                 destination_ip_prefix_lists: Sequence[_builtins.str],
                 device_access_port: _builtins.int,
                 id: _builtins.int,
                 name: _builtins.str,
                 source_data_prefix_list_id: _builtins.str,
                 source_ip_prefix_list_variable: _builtins.str,
                 source_ip_prefix_lists: Sequence[_builtins.str],
                 source_ports: Sequence[_builtins.int]):
        """
        :param _builtins.str base_action: Base Action
        :param _builtins.str destination_ip_prefix_list_variable: Variable name
        :param Sequence[_builtins.str] destination_ip_prefix_lists: Destination Data IP Prefix List
        :param _builtins.int device_access_port: device access protocol
        :param _builtins.int id: Sequence Id
        :param _builtins.str name: Sequence Name
        :param _builtins.str source_ip_prefix_list_variable: Variable name
        :param Sequence[_builtins.str] source_ip_prefix_lists: Source Data IP Prefix List
        :param Sequence[_builtins.int] source_ports: Source Port List
        """
        pulumi.set(__self__, "base_action", base_action)
        pulumi.set(__self__, "destination_data_prefix_list_id", destination_data_prefix_list_id)
        pulumi.set(__self__, "destination_ip_prefix_list_variable", destination_ip_prefix_list_variable)
        pulumi.set(__self__, "destination_ip_prefix_lists", destination_ip_prefix_lists)
        pulumi.set(__self__, "device_access_port", device_access_port)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "source_data_prefix_list_id", source_data_prefix_list_id)
        pulumi.set(__self__, "source_ip_prefix_list_variable", source_ip_prefix_list_variable)
        pulumi.set(__self__, "source_ip_prefix_lists", source_ip_prefix_lists)
        pulumi.set(__self__, "source_ports", source_ports)

    @_builtins.property
    @pulumi.getter(name="baseAction")
    def base_action(self) -> _builtins.str:
        """
        Base Action
        """
        return pulumi.get(self, "base_action")

    @_builtins.property
    @pulumi.getter(name="destinationDataPrefixListId")
    def destination_data_prefix_list_id(self) -> _builtins.str:
        return pulumi.get(self, "destination_data_prefix_list_id")

    @_builtins.property
    @pulumi.getter(name="destinationIpPrefixListVariable")
    def destination_ip_prefix_list_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "destination_ip_prefix_list_variable")

    @_builtins.property
    @pulumi.getter(name="destinationIpPrefixLists")
    def destination_ip_prefix_lists(self) -> Sequence[_builtins.str]:
        """
        Destination Data IP Prefix List
        """
        return pulumi.get(self, "destination_ip_prefix_lists")

    @_builtins.property
    @pulumi.getter(name="deviceAccessPort")
    def device_access_port(self) -> _builtins.int:
        """
        device access protocol
        """
        return pulumi.get(self, "device_access_port")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.int:
        """
        Sequence Id
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        """
        Sequence Name
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter(name="sourceDataPrefixListId")
    def source_data_prefix_list_id(self) -> _builtins.str:
        return pulumi.get(self, "source_data_prefix_list_id")

    @_builtins.property
    @pulumi.getter(name="sourceIpPrefixListVariable")
    def source_ip_prefix_list_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "source_ip_prefix_list_variable")

    @_builtins.property
    @pulumi.getter(name="sourceIpPrefixLists")
    def source_ip_prefix_lists(self) -> Sequence[_builtins.str]:
        """
        Source Data IP Prefix List
        """
        return pulumi.get(self, "source_ip_prefix_lists")

    @_builtins.property
    @pulumi.getter(name="sourcePorts")
    def source_ports(self) -> Sequence[_builtins.int]:
        """
        Source Port List
        """
        return pulumi.get(self, "source_ports")


@pulumi.output_type
class GetSystemLoggingFeatureIpv4ServerResult(dict):
    def __init__(__self__, *,
                 hostname_ip: _builtins.str,
                 hostname_ip_variable: _builtins.str,
                 priority: _builtins.str,
                 priority_variable: _builtins.str,
                 source_interface: _builtins.str,
                 source_interface_variable: _builtins.str,
                 tls_enable: _builtins.bool,
                 tls_enable_variable: _builtins.str,
                 tls_properties_custom_profile: _builtins.bool,
                 tls_properties_custom_profile_variable: _builtins.str,
                 tls_properties_profile: _builtins.str,
                 tls_properties_profile_variable: _builtins.str,
                 vpn: _builtins.int,
                 vpn_variable: _builtins.str):
        """
        :param _builtins.str hostname_ip: Set hostname or IPv4 address of server
        :param _builtins.str hostname_ip_variable: Variable name
        :param _builtins.str priority: Set logging level for messages logged to server
        :param _builtins.str priority_variable: Variable name
        :param _builtins.str source_interface: Set interface to use to reach syslog server
        :param _builtins.str source_interface_variable: Variable name
        :param _builtins.bool tls_enable: Enable TLS Profile
        :param _builtins.str tls_enable_variable: Variable name
        :param _builtins.bool tls_properties_custom_profile: Define custom profile
        :param _builtins.str tls_properties_custom_profile_variable: Variable name
        :param _builtins.str tls_properties_profile: Configure a TLS profile
        :param _builtins.str tls_properties_profile_variable: Variable name
        :param _builtins.int vpn: Set hostname or IPv4 address of server
        :param _builtins.str vpn_variable: Variable name
        """
        pulumi.set(__self__, "hostname_ip", hostname_ip)
        pulumi.set(__self__, "hostname_ip_variable", hostname_ip_variable)
        pulumi.set(__self__, "priority", priority)
        pulumi.set(__self__, "priority_variable", priority_variable)
        pulumi.set(__self__, "source_interface", source_interface)
        pulumi.set(__self__, "source_interface_variable", source_interface_variable)
        pulumi.set(__self__, "tls_enable", tls_enable)
        pulumi.set(__self__, "tls_enable_variable", tls_enable_variable)
        pulumi.set(__self__, "tls_properties_custom_profile", tls_properties_custom_profile)
        pulumi.set(__self__, "tls_properties_custom_profile_variable", tls_properties_custom_profile_variable)
        pulumi.set(__self__, "tls_properties_profile", tls_properties_profile)
        pulumi.set(__self__, "tls_properties_profile_variable", tls_properties_profile_variable)
        pulumi.set(__self__, "vpn", vpn)
        pulumi.set(__self__, "vpn_variable", vpn_variable)

    @_builtins.property
    @pulumi.getter(name="hostnameIp")
    def hostname_ip(self) -> _builtins.str:
        """
        Set hostname or IPv4 address of server
        """
        return pulumi.get(self, "hostname_ip")

    @_builtins.property
    @pulumi.getter(name="hostnameIpVariable")
    def hostname_ip_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "hostname_ip_variable")

    @_builtins.property
    @pulumi.getter
    def priority(self) -> _builtins.str:
        """
        Set logging level for messages logged to server
        """
        return pulumi.get(self, "priority")

    @_builtins.property
    @pulumi.getter(name="priorityVariable")
    def priority_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "priority_variable")

    @_builtins.property
    @pulumi.getter(name="sourceInterface")
    def source_interface(self) -> _builtins.str:
        """
        Set interface to use to reach syslog server
        """
        return pulumi.get(self, "source_interface")

    @_builtins.property
    @pulumi.getter(name="sourceInterfaceVariable")
    def source_interface_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "source_interface_variable")

    @_builtins.property
    @pulumi.getter(name="tlsEnable")
    def tls_enable(self) -> _builtins.bool:
        """
        Enable TLS Profile
        """
        return pulumi.get(self, "tls_enable")

    @_builtins.property
    @pulumi.getter(name="tlsEnableVariable")
    def tls_enable_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "tls_enable_variable")

    @_builtins.property
    @pulumi.getter(name="tlsPropertiesCustomProfile")
    def tls_properties_custom_profile(self) -> _builtins.bool:
        """
        Define custom profile
        """
        return pulumi.get(self, "tls_properties_custom_profile")

    @_builtins.property
    @pulumi.getter(name="tlsPropertiesCustomProfileVariable")
    def tls_properties_custom_profile_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "tls_properties_custom_profile_variable")

    @_builtins.property
    @pulumi.getter(name="tlsPropertiesProfile")
    def tls_properties_profile(self) -> _builtins.str:
        """
        Configure a TLS profile
        """
        return pulumi.get(self, "tls_properties_profile")

    @_builtins.property
    @pulumi.getter(name="tlsPropertiesProfileVariable")
    def tls_properties_profile_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "tls_properties_profile_variable")

    @_builtins.property
    @pulumi.getter
    def vpn(self) -> _builtins.int:
        """
        Set hostname or IPv4 address of server
        """
        return pulumi.get(self, "vpn")

    @_builtins.property
    @pulumi.getter(name="vpnVariable")
    def vpn_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "vpn_variable")


@pulumi.output_type
class GetSystemLoggingFeatureIpv6ServerResult(dict):
    def __init__(__self__, *,
                 hostname_ip: _builtins.str,
                 hostname_ip_variable: _builtins.str,
                 priority: _builtins.str,
                 priority_variable: _builtins.str,
                 source_interface: _builtins.str,
                 source_interface_variable: _builtins.str,
                 tls_enable: _builtins.bool,
                 tls_enable_variable: _builtins.str,
                 tls_properties_custom_profile: _builtins.bool,
                 tls_properties_custom_profile_variable: _builtins.str,
                 tls_properties_profile: _builtins.str,
                 tls_properties_profile_variable: _builtins.str,
                 vpn: _builtins.int,
                 vpn_variable: _builtins.str):
        """
        :param _builtins.str hostname_ip: Set IPv6 hostname or IPv6 address of server
        :param _builtins.str hostname_ip_variable: Variable name
        :param _builtins.str priority: Set logging level for messages logged to server
        :param _builtins.str priority_variable: Variable name
        :param _builtins.str source_interface: Set interface to use to reach syslog server
        :param _builtins.str source_interface_variable: Variable name
        :param _builtins.bool tls_enable: Enable TLS Profile
        :param _builtins.str tls_enable_variable: Variable name
        :param _builtins.bool tls_properties_custom_profile: Define custom profile
        :param _builtins.str tls_properties_custom_profile_variable: Variable name
        :param _builtins.str tls_properties_profile: Configure a TLS profile
        :param _builtins.str tls_properties_profile_variable: Variable name
        :param _builtins.int vpn: Set hostname or IPv4 address of server
        :param _builtins.str vpn_variable: Variable name
        """
        pulumi.set(__self__, "hostname_ip", hostname_ip)
        pulumi.set(__self__, "hostname_ip_variable", hostname_ip_variable)
        pulumi.set(__self__, "priority", priority)
        pulumi.set(__self__, "priority_variable", priority_variable)
        pulumi.set(__self__, "source_interface", source_interface)
        pulumi.set(__self__, "source_interface_variable", source_interface_variable)
        pulumi.set(__self__, "tls_enable", tls_enable)
        pulumi.set(__self__, "tls_enable_variable", tls_enable_variable)
        pulumi.set(__self__, "tls_properties_custom_profile", tls_properties_custom_profile)
        pulumi.set(__self__, "tls_properties_custom_profile_variable", tls_properties_custom_profile_variable)
        pulumi.set(__self__, "tls_properties_profile", tls_properties_profile)
        pulumi.set(__self__, "tls_properties_profile_variable", tls_properties_profile_variable)
        pulumi.set(__self__, "vpn", vpn)
        pulumi.set(__self__, "vpn_variable", vpn_variable)

    @_builtins.property
    @pulumi.getter(name="hostnameIp")
    def hostname_ip(self) -> _builtins.str:
        """
        Set IPv6 hostname or IPv6 address of server
        """
        return pulumi.get(self, "hostname_ip")

    @_builtins.property
    @pulumi.getter(name="hostnameIpVariable")
    def hostname_ip_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "hostname_ip_variable")

    @_builtins.property
    @pulumi.getter
    def priority(self) -> _builtins.str:
        """
        Set logging level for messages logged to server
        """
        return pulumi.get(self, "priority")

    @_builtins.property
    @pulumi.getter(name="priorityVariable")
    def priority_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "priority_variable")

    @_builtins.property
    @pulumi.getter(name="sourceInterface")
    def source_interface(self) -> _builtins.str:
        """
        Set interface to use to reach syslog server
        """
        return pulumi.get(self, "source_interface")

    @_builtins.property
    @pulumi.getter(name="sourceInterfaceVariable")
    def source_interface_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "source_interface_variable")

    @_builtins.property
    @pulumi.getter(name="tlsEnable")
    def tls_enable(self) -> _builtins.bool:
        """
        Enable TLS Profile
        """
        return pulumi.get(self, "tls_enable")

    @_builtins.property
    @pulumi.getter(name="tlsEnableVariable")
    def tls_enable_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "tls_enable_variable")

    @_builtins.property
    @pulumi.getter(name="tlsPropertiesCustomProfile")
    def tls_properties_custom_profile(self) -> _builtins.bool:
        """
        Define custom profile
        """
        return pulumi.get(self, "tls_properties_custom_profile")

    @_builtins.property
    @pulumi.getter(name="tlsPropertiesCustomProfileVariable")
    def tls_properties_custom_profile_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "tls_properties_custom_profile_variable")

    @_builtins.property
    @pulumi.getter(name="tlsPropertiesProfile")
    def tls_properties_profile(self) -> _builtins.str:
        """
        Configure a TLS profile
        """
        return pulumi.get(self, "tls_properties_profile")

    @_builtins.property
    @pulumi.getter(name="tlsPropertiesProfileVariable")
    def tls_properties_profile_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "tls_properties_profile_variable")

    @_builtins.property
    @pulumi.getter
    def vpn(self) -> _builtins.int:
        """
        Set hostname or IPv4 address of server
        """
        return pulumi.get(self, "vpn")

    @_builtins.property
    @pulumi.getter(name="vpnVariable")
    def vpn_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "vpn_variable")


@pulumi.output_type
class GetSystemLoggingFeatureTlsProfileResult(dict):
    def __init__(__self__, *,
                 cipher_suites: Sequence[_builtins.str],
                 cipher_suites_variable: _builtins.str,
                 profile: _builtins.str,
                 profile_variable: _builtins.str,
                 tls_version: _builtins.str,
                 tls_version_variable: _builtins.str):
        """
        :param Sequence[_builtins.str] cipher_suites: Syslog secure server ciphersuites
        :param _builtins.str cipher_suites_variable: Variable name
        :param _builtins.str profile: Specify the name of the TLS profile
        :param _builtins.str profile_variable: Variable name
        :param _builtins.str tls_version: TLS Version
        :param _builtins.str tls_version_variable: Variable name
        """
        pulumi.set(__self__, "cipher_suites", cipher_suites)
        pulumi.set(__self__, "cipher_suites_variable", cipher_suites_variable)
        pulumi.set(__self__, "profile", profile)
        pulumi.set(__self__, "profile_variable", profile_variable)
        pulumi.set(__self__, "tls_version", tls_version)
        pulumi.set(__self__, "tls_version_variable", tls_version_variable)

    @_builtins.property
    @pulumi.getter(name="cipherSuites")
    def cipher_suites(self) -> Sequence[_builtins.str]:
        """
        Syslog secure server ciphersuites
        """
        return pulumi.get(self, "cipher_suites")

    @_builtins.property
    @pulumi.getter(name="cipherSuitesVariable")
    def cipher_suites_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "cipher_suites_variable")

    @_builtins.property
    @pulumi.getter
    def profile(self) -> _builtins.str:
        """
        Specify the name of the TLS profile
        """
        return pulumi.get(self, "profile")

    @_builtins.property
    @pulumi.getter(name="profileVariable")
    def profile_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "profile_variable")

    @_builtins.property
    @pulumi.getter(name="tlsVersion")
    def tls_version(self) -> _builtins.str:
        """
        TLS Version
        """
        return pulumi.get(self, "tls_version")

    @_builtins.property
    @pulumi.getter(name="tlsVersionVariable")
    def tls_version_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "tls_version_variable")


@pulumi.output_type
class GetSystemNtpFeatureAuthenticationKeyResult(dict):
    def __init__(__self__, *,
                 key_id: _builtins.int,
                 key_id_variable: _builtins.str,
                 md5_value: _builtins.str,
                 md5_value_variable: _builtins.str):
        """
        :param _builtins.int key_id: MD5 authentication key ID
        :param _builtins.str key_id_variable: Variable name
        :param _builtins.str md5_value: Enter cleartext or AES-encrypted MD5 authentication key
        :param _builtins.str md5_value_variable: Variable name
        """
        pulumi.set(__self__, "key_id", key_id)
        pulumi.set(__self__, "key_id_variable", key_id_variable)
        pulumi.set(__self__, "md5_value", md5_value)
        pulumi.set(__self__, "md5_value_variable", md5_value_variable)

    @_builtins.property
    @pulumi.getter(name="keyId")
    def key_id(self) -> _builtins.int:
        """
        MD5 authentication key ID
        """
        return pulumi.get(self, "key_id")

    @_builtins.property
    @pulumi.getter(name="keyIdVariable")
    def key_id_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "key_id_variable")

    @_builtins.property
    @pulumi.getter(name="md5Value")
    def md5_value(self) -> _builtins.str:
        """
        Enter cleartext or AES-encrypted MD5 authentication key
        """
        return pulumi.get(self, "md5_value")

    @_builtins.property
    @pulumi.getter(name="md5ValueVariable")
    def md5_value_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "md5_value_variable")


@pulumi.output_type
class GetSystemNtpFeatureServerResult(dict):
    def __init__(__self__, *,
                 authentication_key: _builtins.int,
                 authentication_key_variable: _builtins.str,
                 hostname_ip_address: _builtins.str,
                 hostname_ip_address_variable: _builtins.str,
                 ntp_version: _builtins.int,
                 ntp_version_variable: _builtins.str,
                 prefer_this_ntp_server: _builtins.bool,
                 prefer_this_ntp_server_variable: _builtins.str,
                 source_interface: _builtins.str,
                 source_interface_variable: _builtins.str,
                 vpn: _builtins.int,
                 vpn_variable: _builtins.str):
        """
        :param _builtins.int authentication_key: Set authentication key for the server
        :param _builtins.str authentication_key_variable: Variable name
        :param _builtins.str hostname_ip_address: Set hostname or IP address of server
        :param _builtins.str hostname_ip_address_variable: Variable name
        :param _builtins.int ntp_version: Set NTP version
        :param _builtins.str ntp_version_variable: Variable name
        :param _builtins.bool prefer_this_ntp_server: Prefer this NTP server
        :param _builtins.str prefer_this_ntp_server_variable: Variable name
        :param _builtins.str source_interface: Set interface to use to reach NTP server
        :param _builtins.str source_interface_variable: Variable name
        :param _builtins.int vpn: Set VPN in which NTP server is located
        :param _builtins.str vpn_variable: Variable name
        """
        pulumi.set(__self__, "authentication_key", authentication_key)
        pulumi.set(__self__, "authentication_key_variable", authentication_key_variable)
        pulumi.set(__self__, "hostname_ip_address", hostname_ip_address)
        pulumi.set(__self__, "hostname_ip_address_variable", hostname_ip_address_variable)
        pulumi.set(__self__, "ntp_version", ntp_version)
        pulumi.set(__self__, "ntp_version_variable", ntp_version_variable)
        pulumi.set(__self__, "prefer_this_ntp_server", prefer_this_ntp_server)
        pulumi.set(__self__, "prefer_this_ntp_server_variable", prefer_this_ntp_server_variable)
        pulumi.set(__self__, "source_interface", source_interface)
        pulumi.set(__self__, "source_interface_variable", source_interface_variable)
        pulumi.set(__self__, "vpn", vpn)
        pulumi.set(__self__, "vpn_variable", vpn_variable)

    @_builtins.property
    @pulumi.getter(name="authenticationKey")
    def authentication_key(self) -> _builtins.int:
        """
        Set authentication key for the server
        """
        return pulumi.get(self, "authentication_key")

    @_builtins.property
    @pulumi.getter(name="authenticationKeyVariable")
    def authentication_key_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "authentication_key_variable")

    @_builtins.property
    @pulumi.getter(name="hostnameIpAddress")
    def hostname_ip_address(self) -> _builtins.str:
        """
        Set hostname or IP address of server
        """
        return pulumi.get(self, "hostname_ip_address")

    @_builtins.property
    @pulumi.getter(name="hostnameIpAddressVariable")
    def hostname_ip_address_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "hostname_ip_address_variable")

    @_builtins.property
    @pulumi.getter(name="ntpVersion")
    def ntp_version(self) -> _builtins.int:
        """
        Set NTP version
        """
        return pulumi.get(self, "ntp_version")

    @_builtins.property
    @pulumi.getter(name="ntpVersionVariable")
    def ntp_version_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "ntp_version_variable")

    @_builtins.property
    @pulumi.getter(name="preferThisNtpServer")
    def prefer_this_ntp_server(self) -> _builtins.bool:
        """
        Prefer this NTP server
        """
        return pulumi.get(self, "prefer_this_ntp_server")

    @_builtins.property
    @pulumi.getter(name="preferThisNtpServerVariable")
    def prefer_this_ntp_server_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "prefer_this_ntp_server_variable")

    @_builtins.property
    @pulumi.getter(name="sourceInterface")
    def source_interface(self) -> _builtins.str:
        """
        Set interface to use to reach NTP server
        """
        return pulumi.get(self, "source_interface")

    @_builtins.property
    @pulumi.getter(name="sourceInterfaceVariable")
    def source_interface_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "source_interface_variable")

    @_builtins.property
    @pulumi.getter
    def vpn(self) -> _builtins.int:
        """
        Set VPN in which NTP server is located
        """
        return pulumi.get(self, "vpn")

    @_builtins.property
    @pulumi.getter(name="vpnVariable")
    def vpn_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "vpn_variable")


@pulumi.output_type
class GetSystemSecurityFeatureKeyResult(dict):
    def __init__(__self__, *,
                 accept_ao_mismatch: _builtins.bool,
                 accept_ao_mismatch_variable: _builtins.str,
                 accept_life_time_duration: _builtins.int,
                 accept_life_time_duration_variable: _builtins.str,
                 accept_life_time_exact: _builtins.int,
                 accept_life_time_infinite: _builtins.bool,
                 accept_life_time_infinite_variable: _builtins.str,
                 accept_life_time_local: _builtins.bool,
                 accept_life_time_local_variable: _builtins.str,
                 accept_life_time_start_epoch: _builtins.int,
                 crypto_algorithm: _builtins.str,
                 id: _builtins.int,
                 include_tcp_options: _builtins.bool,
                 include_tcp_options_variable: _builtins.str,
                 key_string: _builtins.str,
                 key_string_variable: _builtins.str,
                 name: _builtins.str,
                 receiver_id: _builtins.int,
                 receiver_id_variable: _builtins.str,
                 send_id: _builtins.int,
                 send_id_variable: _builtins.str,
                 send_life_time_duration: _builtins.int,
                 send_life_time_duration_variable: _builtins.str,
                 send_life_time_exact: _builtins.int,
                 send_life_time_infinite: _builtins.bool,
                 send_life_time_infinite_variable: _builtins.str,
                 send_life_time_local: _builtins.bool,
                 send_life_time_local_variable: _builtins.str,
                 send_life_time_start_epoch: _builtins.int):
        """
        :param _builtins.bool accept_ao_mismatch: Configure Accept AO Mismatch
        :param _builtins.str accept_ao_mismatch_variable: Variable name
        :param _builtins.int accept_life_time_duration: Send lifetime Duration (seconds)
        :param _builtins.str accept_life_time_duration_variable: Variable name
        :param _builtins.int accept_life_time_exact: Configure Key lifetime end time
        :param _builtins.bool accept_life_time_infinite: Infinite lifetime
        :param _builtins.str accept_life_time_infinite_variable: Variable name
        :param _builtins.bool accept_life_time_local: Configure Send lifetime Local
        :param _builtins.str accept_life_time_local_variable: Variable name
        :param _builtins.int accept_life_time_start_epoch: Configure Key lifetime start time
        :param _builtins.str crypto_algorithm: Crypto Algorithm
        :param _builtins.int id: Select the Key ID
        :param _builtins.bool include_tcp_options: Configure Include TCP Options
        :param _builtins.str include_tcp_options_variable: Variable name
        :param _builtins.str key_string: Specify the Key String
        :param _builtins.str key_string_variable: Variable name
        :param _builtins.str name: Select the chain name
        :param _builtins.int receiver_id: Specify the Receiver ID
        :param _builtins.str receiver_id_variable: Variable name
        :param _builtins.int send_id: Specify the Send ID
        :param _builtins.str send_id_variable: Variable name
        :param _builtins.int send_life_time_duration: Send lifetime Duration (seconds)
        :param _builtins.str send_life_time_duration_variable: Variable name
        :param _builtins.int send_life_time_exact: Configure Key lifetime end time
        :param _builtins.bool send_life_time_infinite: Infinite lifetime
        :param _builtins.str send_life_time_infinite_variable: Variable name
        :param _builtins.bool send_life_time_local: Configure Send lifetime Local
        :param _builtins.str send_life_time_local_variable: Variable name
        :param _builtins.int send_life_time_start_epoch: Configure Key lifetime start time
        """
        pulumi.set(__self__, "accept_ao_mismatch", accept_ao_mismatch)
        pulumi.set(__self__, "accept_ao_mismatch_variable", accept_ao_mismatch_variable)
        pulumi.set(__self__, "accept_life_time_duration", accept_life_time_duration)
        pulumi.set(__self__, "accept_life_time_duration_variable", accept_life_time_duration_variable)
        pulumi.set(__self__, "accept_life_time_exact", accept_life_time_exact)
        pulumi.set(__self__, "accept_life_time_infinite", accept_life_time_infinite)
        pulumi.set(__self__, "accept_life_time_infinite_variable", accept_life_time_infinite_variable)
        pulumi.set(__self__, "accept_life_time_local", accept_life_time_local)
        pulumi.set(__self__, "accept_life_time_local_variable", accept_life_time_local_variable)
        pulumi.set(__self__, "accept_life_time_start_epoch", accept_life_time_start_epoch)
        pulumi.set(__self__, "crypto_algorithm", crypto_algorithm)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "include_tcp_options", include_tcp_options)
        pulumi.set(__self__, "include_tcp_options_variable", include_tcp_options_variable)
        pulumi.set(__self__, "key_string", key_string)
        pulumi.set(__self__, "key_string_variable", key_string_variable)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "receiver_id", receiver_id)
        pulumi.set(__self__, "receiver_id_variable", receiver_id_variable)
        pulumi.set(__self__, "send_id", send_id)
        pulumi.set(__self__, "send_id_variable", send_id_variable)
        pulumi.set(__self__, "send_life_time_duration", send_life_time_duration)
        pulumi.set(__self__, "send_life_time_duration_variable", send_life_time_duration_variable)
        pulumi.set(__self__, "send_life_time_exact", send_life_time_exact)
        pulumi.set(__self__, "send_life_time_infinite", send_life_time_infinite)
        pulumi.set(__self__, "send_life_time_infinite_variable", send_life_time_infinite_variable)
        pulumi.set(__self__, "send_life_time_local", send_life_time_local)
        pulumi.set(__self__, "send_life_time_local_variable", send_life_time_local_variable)
        pulumi.set(__self__, "send_life_time_start_epoch", send_life_time_start_epoch)

    @_builtins.property
    @pulumi.getter(name="acceptAoMismatch")
    def accept_ao_mismatch(self) -> _builtins.bool:
        """
        Configure Accept AO Mismatch
        """
        return pulumi.get(self, "accept_ao_mismatch")

    @_builtins.property
    @pulumi.getter(name="acceptAoMismatchVariable")
    def accept_ao_mismatch_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "accept_ao_mismatch_variable")

    @_builtins.property
    @pulumi.getter(name="acceptLifeTimeDuration")
    def accept_life_time_duration(self) -> _builtins.int:
        """
        Send lifetime Duration (seconds)
        """
        return pulumi.get(self, "accept_life_time_duration")

    @_builtins.property
    @pulumi.getter(name="acceptLifeTimeDurationVariable")
    def accept_life_time_duration_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "accept_life_time_duration_variable")

    @_builtins.property
    @pulumi.getter(name="acceptLifeTimeExact")
    def accept_life_time_exact(self) -> _builtins.int:
        """
        Configure Key lifetime end time
        """
        return pulumi.get(self, "accept_life_time_exact")

    @_builtins.property
    @pulumi.getter(name="acceptLifeTimeInfinite")
    def accept_life_time_infinite(self) -> _builtins.bool:
        """
        Infinite lifetime
        """
        return pulumi.get(self, "accept_life_time_infinite")

    @_builtins.property
    @pulumi.getter(name="acceptLifeTimeInfiniteVariable")
    def accept_life_time_infinite_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "accept_life_time_infinite_variable")

    @_builtins.property
    @pulumi.getter(name="acceptLifeTimeLocal")
    def accept_life_time_local(self) -> _builtins.bool:
        """
        Configure Send lifetime Local
        """
        return pulumi.get(self, "accept_life_time_local")

    @_builtins.property
    @pulumi.getter(name="acceptLifeTimeLocalVariable")
    def accept_life_time_local_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "accept_life_time_local_variable")

    @_builtins.property
    @pulumi.getter(name="acceptLifeTimeStartEpoch")
    def accept_life_time_start_epoch(self) -> _builtins.int:
        """
        Configure Key lifetime start time
        """
        return pulumi.get(self, "accept_life_time_start_epoch")

    @_builtins.property
    @pulumi.getter(name="cryptoAlgorithm")
    def crypto_algorithm(self) -> _builtins.str:
        """
        Crypto Algorithm
        """
        return pulumi.get(self, "crypto_algorithm")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.int:
        """
        Select the Key ID
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter(name="includeTcpOptions")
    def include_tcp_options(self) -> _builtins.bool:
        """
        Configure Include TCP Options
        """
        return pulumi.get(self, "include_tcp_options")

    @_builtins.property
    @pulumi.getter(name="includeTcpOptionsVariable")
    def include_tcp_options_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "include_tcp_options_variable")

    @_builtins.property
    @pulumi.getter(name="keyString")
    def key_string(self) -> _builtins.str:
        """
        Specify the Key String
        """
        return pulumi.get(self, "key_string")

    @_builtins.property
    @pulumi.getter(name="keyStringVariable")
    def key_string_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "key_string_variable")

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        """
        Select the chain name
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter(name="receiverId")
    def receiver_id(self) -> _builtins.int:
        """
        Specify the Receiver ID
        """
        return pulumi.get(self, "receiver_id")

    @_builtins.property
    @pulumi.getter(name="receiverIdVariable")
    def receiver_id_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "receiver_id_variable")

    @_builtins.property
    @pulumi.getter(name="sendId")
    def send_id(self) -> _builtins.int:
        """
        Specify the Send ID
        """
        return pulumi.get(self, "send_id")

    @_builtins.property
    @pulumi.getter(name="sendIdVariable")
    def send_id_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "send_id_variable")

    @_builtins.property
    @pulumi.getter(name="sendLifeTimeDuration")
    def send_life_time_duration(self) -> _builtins.int:
        """
        Send lifetime Duration (seconds)
        """
        return pulumi.get(self, "send_life_time_duration")

    @_builtins.property
    @pulumi.getter(name="sendLifeTimeDurationVariable")
    def send_life_time_duration_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "send_life_time_duration_variable")

    @_builtins.property
    @pulumi.getter(name="sendLifeTimeExact")
    def send_life_time_exact(self) -> _builtins.int:
        """
        Configure Key lifetime end time
        """
        return pulumi.get(self, "send_life_time_exact")

    @_builtins.property
    @pulumi.getter(name="sendLifeTimeInfinite")
    def send_life_time_infinite(self) -> _builtins.bool:
        """
        Infinite lifetime
        """
        return pulumi.get(self, "send_life_time_infinite")

    @_builtins.property
    @pulumi.getter(name="sendLifeTimeInfiniteVariable")
    def send_life_time_infinite_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "send_life_time_infinite_variable")

    @_builtins.property
    @pulumi.getter(name="sendLifeTimeLocal")
    def send_life_time_local(self) -> _builtins.bool:
        """
        Configure Send lifetime Local
        """
        return pulumi.get(self, "send_life_time_local")

    @_builtins.property
    @pulumi.getter(name="sendLifeTimeLocalVariable")
    def send_life_time_local_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "send_life_time_local_variable")

    @_builtins.property
    @pulumi.getter(name="sendLifeTimeStartEpoch")
    def send_life_time_start_epoch(self) -> _builtins.int:
        """
        Configure Key lifetime start time
        """
        return pulumi.get(self, "send_life_time_start_epoch")


@pulumi.output_type
class GetSystemSecurityFeatureKeychainResult(dict):
    def __init__(__self__, *,
                 key_chain_name: _builtins.str,
                 key_id: _builtins.int):
        """
        :param _builtins.str key_chain_name: Specify the name of the Keychain
        :param _builtins.int key_id: Specify the Key ID
        """
        pulumi.set(__self__, "key_chain_name", key_chain_name)
        pulumi.set(__self__, "key_id", key_id)

    @_builtins.property
    @pulumi.getter(name="keyChainName")
    def key_chain_name(self) -> _builtins.str:
        """
        Specify the name of the Keychain
        """
        return pulumi.get(self, "key_chain_name")

    @_builtins.property
    @pulumi.getter(name="keyId")
    def key_id(self) -> _builtins.int:
        """
        Specify the Key ID
        """
        return pulumi.get(self, "key_id")


@pulumi.output_type
class GetSystemSnmpFeatureCommunityResult(dict):
    def __init__(__self__, *,
                 authorization: _builtins.str,
                 authorization_variable: _builtins.str,
                 name: _builtins.str,
                 user_label: _builtins.str,
                 view: _builtins.str,
                 view_variable: _builtins.str):
        """
        :param _builtins.str authorization: Configure access permissions
        :param _builtins.str authorization_variable: Variable name
        :param _builtins.str name: Set name of the SNMP community
        :param _builtins.str user_label: Set user label of the SNMP community
        :param _builtins.str view: Set name of the SNMP view
        :param _builtins.str view_variable: Variable name
        """
        pulumi.set(__self__, "authorization", authorization)
        pulumi.set(__self__, "authorization_variable", authorization_variable)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "user_label", user_label)
        pulumi.set(__self__, "view", view)
        pulumi.set(__self__, "view_variable", view_variable)

    @_builtins.property
    @pulumi.getter
    def authorization(self) -> _builtins.str:
        """
        Configure access permissions
        """
        return pulumi.get(self, "authorization")

    @_builtins.property
    @pulumi.getter(name="authorizationVariable")
    def authorization_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "authorization_variable")

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        """
        Set name of the SNMP community
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter(name="userLabel")
    def user_label(self) -> _builtins.str:
        """
        Set user label of the SNMP community
        """
        return pulumi.get(self, "user_label")

    @_builtins.property
    @pulumi.getter
    def view(self) -> _builtins.str:
        """
        Set name of the SNMP view
        """
        return pulumi.get(self, "view")

    @_builtins.property
    @pulumi.getter(name="viewVariable")
    def view_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "view_variable")


@pulumi.output_type
class GetSystemSnmpFeatureGroupResult(dict):
    def __init__(__self__, *,
                 name: _builtins.str,
                 security_level: _builtins.str,
                 view: _builtins.str,
                 view_variable: _builtins.str):
        """
        :param _builtins.str name: Name of the SNMP group
        :param _builtins.str security_level: Configure security level
        :param _builtins.str view: Name of the SNMP view
        :param _builtins.str view_variable: Variable name
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "security_level", security_level)
        pulumi.set(__self__, "view", view)
        pulumi.set(__self__, "view_variable", view_variable)

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        """
        Name of the SNMP group
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter(name="securityLevel")
    def security_level(self) -> _builtins.str:
        """
        Configure security level
        """
        return pulumi.get(self, "security_level")

    @_builtins.property
    @pulumi.getter
    def view(self) -> _builtins.str:
        """
        Name of the SNMP view
        """
        return pulumi.get(self, "view")

    @_builtins.property
    @pulumi.getter(name="viewVariable")
    def view_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "view_variable")


@pulumi.output_type
class GetSystemSnmpFeatureTrapTargetServerResult(dict):
    def __init__(__self__, *,
                 ip: _builtins.str,
                 ip_variable: _builtins.str,
                 port: _builtins.int,
                 port_variable: _builtins.str,
                 source_interface: _builtins.str,
                 source_interface_variable: _builtins.str,
                 user: _builtins.str,
                 user_label: _builtins.str,
                 user_variable: _builtins.str,
                 vpn_id: _builtins.int,
                 vpn_id_variable: _builtins.str):
        """
        :param _builtins.str ip: Set IPv4/IPv6 address of SNMP server
        :param _builtins.str ip_variable: Variable name
        :param _builtins.int port: Set UDP port number to connect to SNMP server
        :param _builtins.str port_variable: Variable name
        :param _builtins.str source_interface: Source interface for outgoing SNMP traps
        :param _builtins.str source_interface_variable: Variable name
        :param _builtins.str user: Set name of the SNMP user
        :param _builtins.str user_label: Set user label of the SNMP community
        :param _builtins.str user_variable: Variable name
        :param _builtins.int vpn_id: Set VPN in which SNMP server is located
        :param _builtins.str vpn_id_variable: Variable name
        """
        pulumi.set(__self__, "ip", ip)
        pulumi.set(__self__, "ip_variable", ip_variable)
        pulumi.set(__self__, "port", port)
        pulumi.set(__self__, "port_variable", port_variable)
        pulumi.set(__self__, "source_interface", source_interface)
        pulumi.set(__self__, "source_interface_variable", source_interface_variable)
        pulumi.set(__self__, "user", user)
        pulumi.set(__self__, "user_label", user_label)
        pulumi.set(__self__, "user_variable", user_variable)
        pulumi.set(__self__, "vpn_id", vpn_id)
        pulumi.set(__self__, "vpn_id_variable", vpn_id_variable)

    @_builtins.property
    @pulumi.getter
    def ip(self) -> _builtins.str:
        """
        Set IPv4/IPv6 address of SNMP server
        """
        return pulumi.get(self, "ip")

    @_builtins.property
    @pulumi.getter(name="ipVariable")
    def ip_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "ip_variable")

    @_builtins.property
    @pulumi.getter
    def port(self) -> _builtins.int:
        """
        Set UDP port number to connect to SNMP server
        """
        return pulumi.get(self, "port")

    @_builtins.property
    @pulumi.getter(name="portVariable")
    def port_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "port_variable")

    @_builtins.property
    @pulumi.getter(name="sourceInterface")
    def source_interface(self) -> _builtins.str:
        """
        Source interface for outgoing SNMP traps
        """
        return pulumi.get(self, "source_interface")

    @_builtins.property
    @pulumi.getter(name="sourceInterfaceVariable")
    def source_interface_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "source_interface_variable")

    @_builtins.property
    @pulumi.getter
    def user(self) -> _builtins.str:
        """
        Set name of the SNMP user
        """
        return pulumi.get(self, "user")

    @_builtins.property
    @pulumi.getter(name="userLabel")
    def user_label(self) -> _builtins.str:
        """
        Set user label of the SNMP community
        """
        return pulumi.get(self, "user_label")

    @_builtins.property
    @pulumi.getter(name="userVariable")
    def user_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "user_variable")

    @_builtins.property
    @pulumi.getter(name="vpnId")
    def vpn_id(self) -> _builtins.int:
        """
        Set VPN in which SNMP server is located
        """
        return pulumi.get(self, "vpn_id")

    @_builtins.property
    @pulumi.getter(name="vpnIdVariable")
    def vpn_id_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "vpn_id_variable")


@pulumi.output_type
class GetSystemSnmpFeatureUserResult(dict):
    def __init__(__self__, *,
                 authentication_password: _builtins.str,
                 authentication_password_variable: _builtins.str,
                 authentication_protocol: _builtins.str,
                 authentication_protocol_variable: _builtins.str,
                 group: _builtins.str,
                 group_variable: _builtins.str,
                 name: _builtins.str,
                 privacy_password: _builtins.str,
                 privacy_password_variable: _builtins.str,
                 privacy_protocol: _builtins.str,
                 privacy_protocol_variable: _builtins.str):
        """
        :param _builtins.str authentication_password: Specify authentication protocol password
        :param _builtins.str authentication_password_variable: Variable name
        :param _builtins.str authentication_protocol: Configure authentication protocol
        :param _builtins.str authentication_protocol_variable: Variable name
        :param _builtins.str group: Name of the SNMP group
        :param _builtins.str group_variable: Variable name
        :param _builtins.str name: Name of the SNMP user
        :param _builtins.str privacy_password: Specify privacy protocol password
        :param _builtins.str privacy_password_variable: Variable name
        :param _builtins.str privacy_protocol: Configure privacy protocol
        :param _builtins.str privacy_protocol_variable: Variable name
        """
        pulumi.set(__self__, "authentication_password", authentication_password)
        pulumi.set(__self__, "authentication_password_variable", authentication_password_variable)
        pulumi.set(__self__, "authentication_protocol", authentication_protocol)
        pulumi.set(__self__, "authentication_protocol_variable", authentication_protocol_variable)
        pulumi.set(__self__, "group", group)
        pulumi.set(__self__, "group_variable", group_variable)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "privacy_password", privacy_password)
        pulumi.set(__self__, "privacy_password_variable", privacy_password_variable)
        pulumi.set(__self__, "privacy_protocol", privacy_protocol)
        pulumi.set(__self__, "privacy_protocol_variable", privacy_protocol_variable)

    @_builtins.property
    @pulumi.getter(name="authenticationPassword")
    def authentication_password(self) -> _builtins.str:
        """
        Specify authentication protocol password
        """
        return pulumi.get(self, "authentication_password")

    @_builtins.property
    @pulumi.getter(name="authenticationPasswordVariable")
    def authentication_password_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "authentication_password_variable")

    @_builtins.property
    @pulumi.getter(name="authenticationProtocol")
    def authentication_protocol(self) -> _builtins.str:
        """
        Configure authentication protocol
        """
        return pulumi.get(self, "authentication_protocol")

    @_builtins.property
    @pulumi.getter(name="authenticationProtocolVariable")
    def authentication_protocol_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "authentication_protocol_variable")

    @_builtins.property
    @pulumi.getter
    def group(self) -> _builtins.str:
        """
        Name of the SNMP group
        """
        return pulumi.get(self, "group")

    @_builtins.property
    @pulumi.getter(name="groupVariable")
    def group_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "group_variable")

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        """
        Name of the SNMP user
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter(name="privacyPassword")
    def privacy_password(self) -> _builtins.str:
        """
        Specify privacy protocol password
        """
        return pulumi.get(self, "privacy_password")

    @_builtins.property
    @pulumi.getter(name="privacyPasswordVariable")
    def privacy_password_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "privacy_password_variable")

    @_builtins.property
    @pulumi.getter(name="privacyProtocol")
    def privacy_protocol(self) -> _builtins.str:
        """
        Configure privacy protocol
        """
        return pulumi.get(self, "privacy_protocol")

    @_builtins.property
    @pulumi.getter(name="privacyProtocolVariable")
    def privacy_protocol_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "privacy_protocol_variable")


@pulumi.output_type
class GetSystemSnmpFeatureViewResult(dict):
    def __init__(__self__, *,
                 name: _builtins.str,
                 oids: Sequence['outputs.GetSystemSnmpFeatureViewOidResult']):
        """
        :param _builtins.str name: Set the name of the SNMP view
        :param Sequence['GetSystemSnmpFeatureViewOidArgs'] oids: Configure SNMP object identifier
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "oids", oids)

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        """
        Set the name of the SNMP view
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def oids(self) -> Sequence['outputs.GetSystemSnmpFeatureViewOidResult']:
        """
        Configure SNMP object identifier
        """
        return pulumi.get(self, "oids")


@pulumi.output_type
class GetSystemSnmpFeatureViewOidResult(dict):
    def __init__(__self__, *,
                 exclude: _builtins.bool,
                 exclude_variable: _builtins.str,
                 id: _builtins.str,
                 id_variable: _builtins.str):
        """
        :param _builtins.bool exclude: Exclude the OID
        :param _builtins.str exclude_variable: Variable name
        :param _builtins.str id: Configure identifier of subtree of MIB objects
        :param _builtins.str id_variable: Variable name
        """
        pulumi.set(__self__, "exclude", exclude)
        pulumi.set(__self__, "exclude_variable", exclude_variable)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "id_variable", id_variable)

    @_builtins.property
    @pulumi.getter
    def exclude(self) -> _builtins.bool:
        """
        Exclude the OID
        """
        return pulumi.get(self, "exclude")

    @_builtins.property
    @pulumi.getter(name="excludeVariable")
    def exclude_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "exclude_variable")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        Configure identifier of subtree of MIB objects
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter(name="idVariable")
    def id_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "id_variable")


@pulumi.output_type
class GetTlocListPolicyObjectEntryResult(dict):
    def __init__(__self__, *,
                 color: _builtins.str,
                 encapsulation: _builtins.str,
                 preference: _builtins.int,
                 tloc_ip: _builtins.str):
        """
        :param _builtins.str color: Color
        :param _builtins.str encapsulation: Encapsulation
        :param _builtins.int preference: Preference
        :param _builtins.str tloc_ip: TLOC IP
        """
        pulumi.set(__self__, "color", color)
        pulumi.set(__self__, "encapsulation", encapsulation)
        pulumi.set(__self__, "preference", preference)
        pulumi.set(__self__, "tloc_ip", tloc_ip)

    @_builtins.property
    @pulumi.getter
    def color(self) -> _builtins.str:
        """
        Color
        """
        return pulumi.get(self, "color")

    @_builtins.property
    @pulumi.getter
    def encapsulation(self) -> _builtins.str:
        """
        Encapsulation
        """
        return pulumi.get(self, "encapsulation")

    @_builtins.property
    @pulumi.getter
    def preference(self) -> _builtins.int:
        """
        Preference
        """
        return pulumi.get(self, "preference")

    @_builtins.property
    @pulumi.getter(name="tlocIp")
    def tloc_ip(self) -> _builtins.str:
        """
        TLOC IP
        """
        return pulumi.get(self, "tloc_ip")


@pulumi.output_type
class GetTlsSslDecryptionPolicyDefinitionNetworkRuleResult(dict):
    def __init__(__self__, *,
                 base_action: _builtins.str,
                 rule_id: _builtins.int,
                 rule_name: _builtins.str,
                 rule_type: _builtins.str,
                 source_and_destination_configurations: Sequence['outputs.GetTlsSslDecryptionPolicyDefinitionNetworkRuleSourceAndDestinationConfigurationResult']):
        """
        :param _builtins.str base_action: Rule base action
        :param _builtins.int rule_id: Rule ID
        :param _builtins.str rule_name: Rule name
        :param _builtins.str rule_type: Rule type
        :param Sequence['GetTlsSslDecryptionPolicyDefinitionNetworkRuleSourceAndDestinationConfigurationArgs'] source_and_destination_configurations: List of network source / destination configuration
        """
        pulumi.set(__self__, "base_action", base_action)
        pulumi.set(__self__, "rule_id", rule_id)
        pulumi.set(__self__, "rule_name", rule_name)
        pulumi.set(__self__, "rule_type", rule_type)
        pulumi.set(__self__, "source_and_destination_configurations", source_and_destination_configurations)

    @_builtins.property
    @pulumi.getter(name="baseAction")
    def base_action(self) -> _builtins.str:
        """
        Rule base action
        """
        return pulumi.get(self, "base_action")

    @_builtins.property
    @pulumi.getter(name="ruleId")
    def rule_id(self) -> _builtins.int:
        """
        Rule ID
        """
        return pulumi.get(self, "rule_id")

    @_builtins.property
    @pulumi.getter(name="ruleName")
    def rule_name(self) -> _builtins.str:
        """
        Rule name
        """
        return pulumi.get(self, "rule_name")

    @_builtins.property
    @pulumi.getter(name="ruleType")
    def rule_type(self) -> _builtins.str:
        """
        Rule type
        """
        return pulumi.get(self, "rule_type")

    @_builtins.property
    @pulumi.getter(name="sourceAndDestinationConfigurations")
    def source_and_destination_configurations(self) -> Sequence['outputs.GetTlsSslDecryptionPolicyDefinitionNetworkRuleSourceAndDestinationConfigurationResult']:
        """
        List of network source / destination configuration
        """
        return pulumi.get(self, "source_and_destination_configurations")


@pulumi.output_type
class GetTlsSslDecryptionPolicyDefinitionNetworkRuleSourceAndDestinationConfigurationResult(dict):
    def __init__(__self__, *,
                 option: _builtins.str,
                 value: _builtins.str):
        """
        :param _builtins.str option: source / destination option
        :param _builtins.str value: source / destination option target
        """
        pulumi.set(__self__, "option", option)
        pulumi.set(__self__, "value", value)

    @_builtins.property
    @pulumi.getter
    def option(self) -> _builtins.str:
        """
        source / destination option
        """
        return pulumi.get(self, "option")

    @_builtins.property
    @pulumi.getter
    def value(self) -> _builtins.str:
        """
        source / destination option target
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class GetTlsSslDecryptionPolicyDefinitionUrlRuleResult(dict):
    def __init__(__self__, *,
                 rule_name: _builtins.str,
                 target_vpns: Sequence[_builtins.str],
                 tls_ssl_profile_policy_id: _builtins.str,
                 tls_ssl_profile_policy_version: _builtins.int):
        """
        :param _builtins.str rule_name: Country
        :param Sequence[_builtins.str] target_vpns: List of VPN IDs
        :param _builtins.str tls_ssl_profile_policy_id: TLS SSL Profile Policy ID
        :param _builtins.int tls_ssl_profile_policy_version: TLS SSL Profile Policy version
        """
        pulumi.set(__self__, "rule_name", rule_name)
        pulumi.set(__self__, "target_vpns", target_vpns)
        pulumi.set(__self__, "tls_ssl_profile_policy_id", tls_ssl_profile_policy_id)
        pulumi.set(__self__, "tls_ssl_profile_policy_version", tls_ssl_profile_policy_version)

    @_builtins.property
    @pulumi.getter(name="ruleName")
    def rule_name(self) -> _builtins.str:
        """
        Country
        """
        return pulumi.get(self, "rule_name")

    @_builtins.property
    @pulumi.getter(name="targetVpns")
    def target_vpns(self) -> Sequence[_builtins.str]:
        """
        List of VPN IDs
        """
        return pulumi.get(self, "target_vpns")

    @_builtins.property
    @pulumi.getter(name="tlsSslProfilePolicyId")
    def tls_ssl_profile_policy_id(self) -> _builtins.str:
        """
        TLS SSL Profile Policy ID
        """
        return pulumi.get(self, "tls_ssl_profile_policy_id")

    @_builtins.property
    @pulumi.getter(name="tlsSslProfilePolicyVersion")
    def tls_ssl_profile_policy_version(self) -> _builtins.int:
        """
        TLS SSL Profile Policy version
        """
        return pulumi.get(self, "tls_ssl_profile_policy_version")


@pulumi.output_type
class GetTrafficDataPolicyDefinitionSequenceResult(dict):
    def __init__(__self__, *,
                 action_entries: Sequence['outputs.GetTrafficDataPolicyDefinitionSequenceActionEntryResult'],
                 base_action: _builtins.str,
                 id: _builtins.int,
                 ip_type: _builtins.str,
                 match_entries: Sequence['outputs.GetTrafficDataPolicyDefinitionSequenceMatchEntryResult'],
                 name: _builtins.str,
                 type: _builtins.str):
        """
        :param Sequence['GetTrafficDataPolicyDefinitionSequenceActionEntryArgs'] action_entries: List of action entries
        :param _builtins.str base_action: Base action, either `accept` or `drop`
        :param _builtins.int id: Sequence ID
        :param _builtins.str ip_type: Sequence IP type, either `ipv4`, `ipv6` or `all`
        :param Sequence['GetTrafficDataPolicyDefinitionSequenceMatchEntryArgs'] match_entries: List of match entries
        :param _builtins.str name: Sequence name
        :param _builtins.str type: Sequence type
        """
        pulumi.set(__self__, "action_entries", action_entries)
        pulumi.set(__self__, "base_action", base_action)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "ip_type", ip_type)
        pulumi.set(__self__, "match_entries", match_entries)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "type", type)

    @_builtins.property
    @pulumi.getter(name="actionEntries")
    def action_entries(self) -> Sequence['outputs.GetTrafficDataPolicyDefinitionSequenceActionEntryResult']:
        """
        List of action entries
        """
        return pulumi.get(self, "action_entries")

    @_builtins.property
    @pulumi.getter(name="baseAction")
    def base_action(self) -> _builtins.str:
        """
        Base action, either `accept` or `drop`
        """
        return pulumi.get(self, "base_action")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.int:
        """
        Sequence ID
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter(name="ipType")
    def ip_type(self) -> _builtins.str:
        """
        Sequence IP type, either `ipv4`, `ipv6` or `all`
        """
        return pulumi.get(self, "ip_type")

    @_builtins.property
    @pulumi.getter(name="matchEntries")
    def match_entries(self) -> Sequence['outputs.GetTrafficDataPolicyDefinitionSequenceMatchEntryResult']:
        """
        List of match entries
        """
        return pulumi.get(self, "match_entries")

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        """
        Sequence name
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def type(self) -> _builtins.str:
        """
        Sequence type
        """
        return pulumi.get(self, "type")


@pulumi.output_type
class GetTrafficDataPolicyDefinitionSequenceActionEntryResult(dict):
    def __init__(__self__, *,
                 cflowd: _builtins.bool,
                 counter: _builtins.str,
                 dre_optimization: _builtins.bool,
                 fallback_to_routing: _builtins.bool,
                 log: _builtins.bool,
                 loss_correction: _builtins.str,
                 loss_correction_fec: _builtins.str,
                 loss_correction_fec_threshold: _builtins.str,
                 loss_correction_packet_duplication: _builtins.str,
                 nat_parameters: Sequence['outputs.GetTrafficDataPolicyDefinitionSequenceActionEntryNatParameterResult'],
                 nat_pool: _builtins.str,
                 nat_pool_id: _builtins.int,
                 redirect_dns: _builtins.str,
                 redirect_dns_address: _builtins.str,
                 redirect_dns_type: _builtins.str,
                 secure_internet_gateway: _builtins.bool,
                 service_node_group: _builtins.str,
                 set_parameters: Sequence['outputs.GetTrafficDataPolicyDefinitionSequenceActionEntrySetParameterResult'],
                 tcp_optimization: _builtins.bool,
                 type: _builtins.str):
        """
        :param _builtins.bool cflowd: Enable cflowd
        :param _builtins.str counter: Counter name
        :param _builtins.bool dre_optimization: Enable DRE optimization
        :param _builtins.bool fallback_to_routing: Enable fallback to routing
        :param _builtins.bool log: Enable logging
        :param _builtins.str loss_correction: Loss correction
        :param _builtins.str loss_correction_fec: Loss correction FEC
        :param _builtins.str loss_correction_fec_threshold: Loss correction FEC threshold
        :param _builtins.str loss_correction_packet_duplication: Loss correction packet duplication
        :param Sequence['GetTrafficDataPolicyDefinitionSequenceActionEntryNatParameterArgs'] nat_parameters: List of NAT parameters
        :param _builtins.str nat_pool: NAT pool
        :param _builtins.int nat_pool_id: NAT pool ID
        :param _builtins.str redirect_dns: Redirect DNS
        :param _builtins.str redirect_dns_address: Redirect DNS IP address
        :param _builtins.str redirect_dns_type: Redirect DNS type
        :param _builtins.bool secure_internet_gateway: Enable secure internet gateway
        :param _builtins.str service_node_group: Service node group
        :param Sequence['GetTrafficDataPolicyDefinitionSequenceActionEntrySetParameterArgs'] set_parameters: List of set parameters
        :param _builtins.bool tcp_optimization: Enable TCP optimization
        :param _builtins.str type: Type of action entry
        """
        pulumi.set(__self__, "cflowd", cflowd)
        pulumi.set(__self__, "counter", counter)
        pulumi.set(__self__, "dre_optimization", dre_optimization)
        pulumi.set(__self__, "fallback_to_routing", fallback_to_routing)
        pulumi.set(__self__, "log", log)
        pulumi.set(__self__, "loss_correction", loss_correction)
        pulumi.set(__self__, "loss_correction_fec", loss_correction_fec)
        pulumi.set(__self__, "loss_correction_fec_threshold", loss_correction_fec_threshold)
        pulumi.set(__self__, "loss_correction_packet_duplication", loss_correction_packet_duplication)
        pulumi.set(__self__, "nat_parameters", nat_parameters)
        pulumi.set(__self__, "nat_pool", nat_pool)
        pulumi.set(__self__, "nat_pool_id", nat_pool_id)
        pulumi.set(__self__, "redirect_dns", redirect_dns)
        pulumi.set(__self__, "redirect_dns_address", redirect_dns_address)
        pulumi.set(__self__, "redirect_dns_type", redirect_dns_type)
        pulumi.set(__self__, "secure_internet_gateway", secure_internet_gateway)
        pulumi.set(__self__, "service_node_group", service_node_group)
        pulumi.set(__self__, "set_parameters", set_parameters)
        pulumi.set(__self__, "tcp_optimization", tcp_optimization)
        pulumi.set(__self__, "type", type)

    @_builtins.property
    @pulumi.getter
    def cflowd(self) -> _builtins.bool:
        """
        Enable cflowd
        """
        return pulumi.get(self, "cflowd")

    @_builtins.property
    @pulumi.getter
    def counter(self) -> _builtins.str:
        """
        Counter name
        """
        return pulumi.get(self, "counter")

    @_builtins.property
    @pulumi.getter(name="dreOptimization")
    def dre_optimization(self) -> _builtins.bool:
        """
        Enable DRE optimization
        """
        return pulumi.get(self, "dre_optimization")

    @_builtins.property
    @pulumi.getter(name="fallbackToRouting")
    def fallback_to_routing(self) -> _builtins.bool:
        """
        Enable fallback to routing
        """
        return pulumi.get(self, "fallback_to_routing")

    @_builtins.property
    @pulumi.getter
    def log(self) -> _builtins.bool:
        """
        Enable logging
        """
        return pulumi.get(self, "log")

    @_builtins.property
    @pulumi.getter(name="lossCorrection")
    def loss_correction(self) -> _builtins.str:
        """
        Loss correction
        """
        return pulumi.get(self, "loss_correction")

    @_builtins.property
    @pulumi.getter(name="lossCorrectionFec")
    def loss_correction_fec(self) -> _builtins.str:
        """
        Loss correction FEC
        """
        return pulumi.get(self, "loss_correction_fec")

    @_builtins.property
    @pulumi.getter(name="lossCorrectionFecThreshold")
    def loss_correction_fec_threshold(self) -> _builtins.str:
        """
        Loss correction FEC threshold
        """
        return pulumi.get(self, "loss_correction_fec_threshold")

    @_builtins.property
    @pulumi.getter(name="lossCorrectionPacketDuplication")
    def loss_correction_packet_duplication(self) -> _builtins.str:
        """
        Loss correction packet duplication
        """
        return pulumi.get(self, "loss_correction_packet_duplication")

    @_builtins.property
    @pulumi.getter(name="natParameters")
    def nat_parameters(self) -> Sequence['outputs.GetTrafficDataPolicyDefinitionSequenceActionEntryNatParameterResult']:
        """
        List of NAT parameters
        """
        return pulumi.get(self, "nat_parameters")

    @_builtins.property
    @pulumi.getter(name="natPool")
    def nat_pool(self) -> _builtins.str:
        """
        NAT pool
        """
        return pulumi.get(self, "nat_pool")

    @_builtins.property
    @pulumi.getter(name="natPoolId")
    def nat_pool_id(self) -> _builtins.int:
        """
        NAT pool ID
        """
        return pulumi.get(self, "nat_pool_id")

    @_builtins.property
    @pulumi.getter(name="redirectDns")
    def redirect_dns(self) -> _builtins.str:
        """
        Redirect DNS
        """
        return pulumi.get(self, "redirect_dns")

    @_builtins.property
    @pulumi.getter(name="redirectDnsAddress")
    def redirect_dns_address(self) -> _builtins.str:
        """
        Redirect DNS IP address
        """
        return pulumi.get(self, "redirect_dns_address")

    @_builtins.property
    @pulumi.getter(name="redirectDnsType")
    def redirect_dns_type(self) -> _builtins.str:
        """
        Redirect DNS type
        """
        return pulumi.get(self, "redirect_dns_type")

    @_builtins.property
    @pulumi.getter(name="secureInternetGateway")
    def secure_internet_gateway(self) -> _builtins.bool:
        """
        Enable secure internet gateway
        """
        return pulumi.get(self, "secure_internet_gateway")

    @_builtins.property
    @pulumi.getter(name="serviceNodeGroup")
    def service_node_group(self) -> _builtins.str:
        """
        Service node group
        """
        return pulumi.get(self, "service_node_group")

    @_builtins.property
    @pulumi.getter(name="setParameters")
    def set_parameters(self) -> Sequence['outputs.GetTrafficDataPolicyDefinitionSequenceActionEntrySetParameterResult']:
        """
        List of set parameters
        """
        return pulumi.get(self, "set_parameters")

    @_builtins.property
    @pulumi.getter(name="tcpOptimization")
    def tcp_optimization(self) -> _builtins.bool:
        """
        Enable TCP optimization
        """
        return pulumi.get(self, "tcp_optimization")

    @_builtins.property
    @pulumi.getter
    def type(self) -> _builtins.str:
        """
        Type of action entry
        """
        return pulumi.get(self, "type")


@pulumi.output_type
class GetTrafficDataPolicyDefinitionSequenceActionEntryNatParameterResult(dict):
    def __init__(__self__, *,
                 fallback: _builtins.bool,
                 type: _builtins.str,
                 vpn_id: _builtins.int):
        """
        :param _builtins.bool fallback: Fallback
        :param _builtins.str type: Type of NAT parameter
        :param _builtins.int vpn_id: DSCP
        """
        pulumi.set(__self__, "fallback", fallback)
        pulumi.set(__self__, "type", type)
        pulumi.set(__self__, "vpn_id", vpn_id)

    @_builtins.property
    @pulumi.getter
    def fallback(self) -> _builtins.bool:
        """
        Fallback
        """
        return pulumi.get(self, "fallback")

    @_builtins.property
    @pulumi.getter
    def type(self) -> _builtins.str:
        """
        Type of NAT parameter
        """
        return pulumi.get(self, "type")

    @_builtins.property
    @pulumi.getter(name="vpnId")
    def vpn_id(self) -> _builtins.int:
        """
        DSCP
        """
        return pulumi.get(self, "vpn_id")


@pulumi.output_type
class GetTrafficDataPolicyDefinitionSequenceActionEntrySetParameterResult(dict):
    def __init__(__self__, *,
                 dscp: _builtins.int,
                 forwarding_class: _builtins.str,
                 local_tloc_list_color: _builtins.str,
                 local_tloc_list_encap: _builtins.str,
                 local_tloc_list_restrict: _builtins.bool,
                 next_hop: _builtins.str,
                 next_hop_loose: _builtins.bool,
                 policer_list_id: _builtins.str,
                 policer_list_version: _builtins.int,
                 preferred_color_group_list_id: _builtins.str,
                 preferred_color_group_list_version: _builtins.int,
                 service_tloc_color: _builtins.str,
                 service_tloc_encapsulation: _builtins.str,
                 service_tloc_ip: _builtins.str,
                 service_tloc_list_id: _builtins.str,
                 service_tloc_list_version: _builtins.int,
                 service_tloc_local: _builtins.bool,
                 service_tloc_restrict: _builtins.bool,
                 service_type: _builtins.str,
                 service_vpn_id: _builtins.int,
                 tloc_color: _builtins.str,
                 tloc_encapsulation: _builtins.str,
                 tloc_ip: _builtins.str,
                 tloc_list_id: _builtins.str,
                 tloc_list_version: _builtins.int,
                 type: _builtins.str,
                 vpn_id: _builtins.int):
        """
        :param _builtins.int dscp: DSCP
        :param _builtins.str forwarding_class: Forwarding class
        :param _builtins.str local_tloc_list_color: Local TLOC list color. Space separated list of colors.
        :param _builtins.str local_tloc_list_encap: Local TLOC list encapsulation.
        :param _builtins.bool local_tloc_list_restrict: Local TLOC list restrict
        :param _builtins.str next_hop: Next hop IP
        :param _builtins.bool next_hop_loose: Use routing table entry to forward the packet in case Next-hop is not available
        :param _builtins.str policer_list_id: Policer list ID
        :param _builtins.int policer_list_version: Policer list version
        :param _builtins.str preferred_color_group_list_id: Preferred color group list ID
        :param _builtins.int preferred_color_group_list_version: Preferred color group list version
        :param _builtins.str service_tloc_color: Service TLOC color
        :param _builtins.str service_tloc_encapsulation: Service TLOC encapsulation
        :param _builtins.str service_tloc_ip: Service TLOC IP address
        :param _builtins.str service_tloc_list_id: Service TLOC list ID
        :param _builtins.int service_tloc_list_version: Service TLOC list version
        :param _builtins.bool service_tloc_local: Service TLOC Local
        :param _builtins.bool service_tloc_restrict: Service TLOC Restrict
        :param _builtins.str service_type: Service type
        :param _builtins.int service_vpn_id: Service VPN ID
        :param _builtins.str tloc_color: TLOC color
        :param _builtins.str tloc_encapsulation: TLOC encapsulation
        :param _builtins.str tloc_ip: TLOC IP address
        :param _builtins.str tloc_list_id: TLOC list ID
        :param _builtins.int tloc_list_version: TLOC list version
        :param _builtins.str type: Type of set parameter
        :param _builtins.int vpn_id: DSCP
        """
        pulumi.set(__self__, "dscp", dscp)
        pulumi.set(__self__, "forwarding_class", forwarding_class)
        pulumi.set(__self__, "local_tloc_list_color", local_tloc_list_color)
        pulumi.set(__self__, "local_tloc_list_encap", local_tloc_list_encap)
        pulumi.set(__self__, "local_tloc_list_restrict", local_tloc_list_restrict)
        pulumi.set(__self__, "next_hop", next_hop)
        pulumi.set(__self__, "next_hop_loose", next_hop_loose)
        pulumi.set(__self__, "policer_list_id", policer_list_id)
        pulumi.set(__self__, "policer_list_version", policer_list_version)
        pulumi.set(__self__, "preferred_color_group_list_id", preferred_color_group_list_id)
        pulumi.set(__self__, "preferred_color_group_list_version", preferred_color_group_list_version)
        pulumi.set(__self__, "service_tloc_color", service_tloc_color)
        pulumi.set(__self__, "service_tloc_encapsulation", service_tloc_encapsulation)
        pulumi.set(__self__, "service_tloc_ip", service_tloc_ip)
        pulumi.set(__self__, "service_tloc_list_id", service_tloc_list_id)
        pulumi.set(__self__, "service_tloc_list_version", service_tloc_list_version)
        pulumi.set(__self__, "service_tloc_local", service_tloc_local)
        pulumi.set(__self__, "service_tloc_restrict", service_tloc_restrict)
        pulumi.set(__self__, "service_type", service_type)
        pulumi.set(__self__, "service_vpn_id", service_vpn_id)
        pulumi.set(__self__, "tloc_color", tloc_color)
        pulumi.set(__self__, "tloc_encapsulation", tloc_encapsulation)
        pulumi.set(__self__, "tloc_ip", tloc_ip)
        pulumi.set(__self__, "tloc_list_id", tloc_list_id)
        pulumi.set(__self__, "tloc_list_version", tloc_list_version)
        pulumi.set(__self__, "type", type)
        pulumi.set(__self__, "vpn_id", vpn_id)

    @_builtins.property
    @pulumi.getter
    def dscp(self) -> _builtins.int:
        """
        DSCP
        """
        return pulumi.get(self, "dscp")

    @_builtins.property
    @pulumi.getter(name="forwardingClass")
    def forwarding_class(self) -> _builtins.str:
        """
        Forwarding class
        """
        return pulumi.get(self, "forwarding_class")

    @_builtins.property
    @pulumi.getter(name="localTlocListColor")
    def local_tloc_list_color(self) -> _builtins.str:
        """
        Local TLOC list color. Space separated list of colors.
        """
        return pulumi.get(self, "local_tloc_list_color")

    @_builtins.property
    @pulumi.getter(name="localTlocListEncap")
    def local_tloc_list_encap(self) -> _builtins.str:
        """
        Local TLOC list encapsulation.
        """
        return pulumi.get(self, "local_tloc_list_encap")

    @_builtins.property
    @pulumi.getter(name="localTlocListRestrict")
    def local_tloc_list_restrict(self) -> _builtins.bool:
        """
        Local TLOC list restrict
        """
        return pulumi.get(self, "local_tloc_list_restrict")

    @_builtins.property
    @pulumi.getter(name="nextHop")
    def next_hop(self) -> _builtins.str:
        """
        Next hop IP
        """
        return pulumi.get(self, "next_hop")

    @_builtins.property
    @pulumi.getter(name="nextHopLoose")
    def next_hop_loose(self) -> _builtins.bool:
        """
        Use routing table entry to forward the packet in case Next-hop is not available
        """
        return pulumi.get(self, "next_hop_loose")

    @_builtins.property
    @pulumi.getter(name="policerListId")
    def policer_list_id(self) -> _builtins.str:
        """
        Policer list ID
        """
        return pulumi.get(self, "policer_list_id")

    @_builtins.property
    @pulumi.getter(name="policerListVersion")
    def policer_list_version(self) -> _builtins.int:
        """
        Policer list version
        """
        return pulumi.get(self, "policer_list_version")

    @_builtins.property
    @pulumi.getter(name="preferredColorGroupListId")
    def preferred_color_group_list_id(self) -> _builtins.str:
        """
        Preferred color group list ID
        """
        return pulumi.get(self, "preferred_color_group_list_id")

    @_builtins.property
    @pulumi.getter(name="preferredColorGroupListVersion")
    def preferred_color_group_list_version(self) -> _builtins.int:
        """
        Preferred color group list version
        """
        return pulumi.get(self, "preferred_color_group_list_version")

    @_builtins.property
    @pulumi.getter(name="serviceTlocColor")
    def service_tloc_color(self) -> _builtins.str:
        """
        Service TLOC color
        """
        return pulumi.get(self, "service_tloc_color")

    @_builtins.property
    @pulumi.getter(name="serviceTlocEncapsulation")
    def service_tloc_encapsulation(self) -> _builtins.str:
        """
        Service TLOC encapsulation
        """
        return pulumi.get(self, "service_tloc_encapsulation")

    @_builtins.property
    @pulumi.getter(name="serviceTlocIp")
    def service_tloc_ip(self) -> _builtins.str:
        """
        Service TLOC IP address
        """
        return pulumi.get(self, "service_tloc_ip")

    @_builtins.property
    @pulumi.getter(name="serviceTlocListId")
    def service_tloc_list_id(self) -> _builtins.str:
        """
        Service TLOC list ID
        """
        return pulumi.get(self, "service_tloc_list_id")

    @_builtins.property
    @pulumi.getter(name="serviceTlocListVersion")
    def service_tloc_list_version(self) -> _builtins.int:
        """
        Service TLOC list version
        """
        return pulumi.get(self, "service_tloc_list_version")

    @_builtins.property
    @pulumi.getter(name="serviceTlocLocal")
    def service_tloc_local(self) -> _builtins.bool:
        """
        Service TLOC Local
        """
        return pulumi.get(self, "service_tloc_local")

    @_builtins.property
    @pulumi.getter(name="serviceTlocRestrict")
    def service_tloc_restrict(self) -> _builtins.bool:
        """
        Service TLOC Restrict
        """
        return pulumi.get(self, "service_tloc_restrict")

    @_builtins.property
    @pulumi.getter(name="serviceType")
    def service_type(self) -> _builtins.str:
        """
        Service type
        """
        return pulumi.get(self, "service_type")

    @_builtins.property
    @pulumi.getter(name="serviceVpnId")
    def service_vpn_id(self) -> _builtins.int:
        """
        Service VPN ID
        """
        return pulumi.get(self, "service_vpn_id")

    @_builtins.property
    @pulumi.getter(name="tlocColor")
    def tloc_color(self) -> _builtins.str:
        """
        TLOC color
        """
        return pulumi.get(self, "tloc_color")

    @_builtins.property
    @pulumi.getter(name="tlocEncapsulation")
    def tloc_encapsulation(self) -> _builtins.str:
        """
        TLOC encapsulation
        """
        return pulumi.get(self, "tloc_encapsulation")

    @_builtins.property
    @pulumi.getter(name="tlocIp")
    def tloc_ip(self) -> _builtins.str:
        """
        TLOC IP address
        """
        return pulumi.get(self, "tloc_ip")

    @_builtins.property
    @pulumi.getter(name="tlocListId")
    def tloc_list_id(self) -> _builtins.str:
        """
        TLOC list ID
        """
        return pulumi.get(self, "tloc_list_id")

    @_builtins.property
    @pulumi.getter(name="tlocListVersion")
    def tloc_list_version(self) -> _builtins.int:
        """
        TLOC list version
        """
        return pulumi.get(self, "tloc_list_version")

    @_builtins.property
    @pulumi.getter
    def type(self) -> _builtins.str:
        """
        Type of set parameter
        """
        return pulumi.get(self, "type")

    @_builtins.property
    @pulumi.getter(name="vpnId")
    def vpn_id(self) -> _builtins.int:
        """
        DSCP
        """
        return pulumi.get(self, "vpn_id")


@pulumi.output_type
class GetTrafficDataPolicyDefinitionSequenceMatchEntryResult(dict):
    def __init__(__self__, *,
                 application_list_id: _builtins.str,
                 application_list_version: _builtins.int,
                 destination_data_prefix_list_id: _builtins.str,
                 destination_data_prefix_list_version: _builtins.int,
                 destination_ip: _builtins.str,
                 destination_port: _builtins.str,
                 destination_region: _builtins.str,
                 dns: _builtins.str,
                 dns_application_list_id: _builtins.str,
                 dns_application_list_version: _builtins.int,
                 dscp: _builtins.str,
                 icmp_message: _builtins.str,
                 packet_length: _builtins.int,
                 plp: _builtins.str,
                 protocol: _builtins.str,
                 source_data_prefix_list_id: _builtins.str,
                 source_data_prefix_list_version: _builtins.int,
                 source_ip: _builtins.str,
                 source_port: _builtins.str,
                 tcp: _builtins.str,
                 traffic_to: _builtins.str,
                 type: _builtins.str):
        """
        :param _builtins.str application_list_id: Application list ID
        :param _builtins.int application_list_version: Application list version
        :param _builtins.str destination_data_prefix_list_id: Destination Data Prefix list ID
        :param _builtins.int destination_data_prefix_list_version: Destination Data Prefix list version
        :param _builtins.str destination_ip: Destination IP
        :param _builtins.str destination_port: Destination port, 0-65535 (Single value, range or multiple values separated by spaces)
        :param _builtins.str destination_region: Destination region
        :param _builtins.str dns: DNS request or response
        :param _builtins.str dns_application_list_id: DNS Application list ID
        :param _builtins.int dns_application_list_version: DNS Application list version
        :param _builtins.str dscp: DSCP value
        :param _builtins.str icmp_message: ICMP Message
        :param _builtins.int packet_length: Packet length
        :param _builtins.str plp: PLP
        :param _builtins.str protocol: IP Protocol, 0-255 (Single value or multiple values separated by spaces)
        :param _builtins.str source_data_prefix_list_id: Source Data Prefix list ID
        :param _builtins.int source_data_prefix_list_version: Source Data Prefix list version
        :param _builtins.str source_ip: Source IP
        :param _builtins.str source_port: Source port, 0-65535 (Single value, range or multiple values separated by spaces)
        :param _builtins.str tcp: TCP flags
        :param _builtins.str traffic_to: Traffic to
        :param _builtins.str type: Type of match entry
        """
        pulumi.set(__self__, "application_list_id", application_list_id)
        pulumi.set(__self__, "application_list_version", application_list_version)
        pulumi.set(__self__, "destination_data_prefix_list_id", destination_data_prefix_list_id)
        pulumi.set(__self__, "destination_data_prefix_list_version", destination_data_prefix_list_version)
        pulumi.set(__self__, "destination_ip", destination_ip)
        pulumi.set(__self__, "destination_port", destination_port)
        pulumi.set(__self__, "destination_region", destination_region)
        pulumi.set(__self__, "dns", dns)
        pulumi.set(__self__, "dns_application_list_id", dns_application_list_id)
        pulumi.set(__self__, "dns_application_list_version", dns_application_list_version)
        pulumi.set(__self__, "dscp", dscp)
        pulumi.set(__self__, "icmp_message", icmp_message)
        pulumi.set(__self__, "packet_length", packet_length)
        pulumi.set(__self__, "plp", plp)
        pulumi.set(__self__, "protocol", protocol)
        pulumi.set(__self__, "source_data_prefix_list_id", source_data_prefix_list_id)
        pulumi.set(__self__, "source_data_prefix_list_version", source_data_prefix_list_version)
        pulumi.set(__self__, "source_ip", source_ip)
        pulumi.set(__self__, "source_port", source_port)
        pulumi.set(__self__, "tcp", tcp)
        pulumi.set(__self__, "traffic_to", traffic_to)
        pulumi.set(__self__, "type", type)

    @_builtins.property
    @pulumi.getter(name="applicationListId")
    def application_list_id(self) -> _builtins.str:
        """
        Application list ID
        """
        return pulumi.get(self, "application_list_id")

    @_builtins.property
    @pulumi.getter(name="applicationListVersion")
    def application_list_version(self) -> _builtins.int:
        """
        Application list version
        """
        return pulumi.get(self, "application_list_version")

    @_builtins.property
    @pulumi.getter(name="destinationDataPrefixListId")
    def destination_data_prefix_list_id(self) -> _builtins.str:
        """
        Destination Data Prefix list ID
        """
        return pulumi.get(self, "destination_data_prefix_list_id")

    @_builtins.property
    @pulumi.getter(name="destinationDataPrefixListVersion")
    def destination_data_prefix_list_version(self) -> _builtins.int:
        """
        Destination Data Prefix list version
        """
        return pulumi.get(self, "destination_data_prefix_list_version")

    @_builtins.property
    @pulumi.getter(name="destinationIp")
    def destination_ip(self) -> _builtins.str:
        """
        Destination IP
        """
        return pulumi.get(self, "destination_ip")

    @_builtins.property
    @pulumi.getter(name="destinationPort")
    def destination_port(self) -> _builtins.str:
        """
        Destination port, 0-65535 (Single value, range or multiple values separated by spaces)
        """
        return pulumi.get(self, "destination_port")

    @_builtins.property
    @pulumi.getter(name="destinationRegion")
    def destination_region(self) -> _builtins.str:
        """
        Destination region
        """
        return pulumi.get(self, "destination_region")

    @_builtins.property
    @pulumi.getter
    def dns(self) -> _builtins.str:
        """
        DNS request or response
        """
        return pulumi.get(self, "dns")

    @_builtins.property
    @pulumi.getter(name="dnsApplicationListId")
    def dns_application_list_id(self) -> _builtins.str:
        """
        DNS Application list ID
        """
        return pulumi.get(self, "dns_application_list_id")

    @_builtins.property
    @pulumi.getter(name="dnsApplicationListVersion")
    def dns_application_list_version(self) -> _builtins.int:
        """
        DNS Application list version
        """
        return pulumi.get(self, "dns_application_list_version")

    @_builtins.property
    @pulumi.getter
    def dscp(self) -> _builtins.str:
        """
        DSCP value
        """
        return pulumi.get(self, "dscp")

    @_builtins.property
    @pulumi.getter(name="icmpMessage")
    def icmp_message(self) -> _builtins.str:
        """
        ICMP Message
        """
        return pulumi.get(self, "icmp_message")

    @_builtins.property
    @pulumi.getter(name="packetLength")
    def packet_length(self) -> _builtins.int:
        """
        Packet length
        """
        return pulumi.get(self, "packet_length")

    @_builtins.property
    @pulumi.getter
    def plp(self) -> _builtins.str:
        """
        PLP
        """
        return pulumi.get(self, "plp")

    @_builtins.property
    @pulumi.getter
    def protocol(self) -> _builtins.str:
        """
        IP Protocol, 0-255 (Single value or multiple values separated by spaces)
        """
        return pulumi.get(self, "protocol")

    @_builtins.property
    @pulumi.getter(name="sourceDataPrefixListId")
    def source_data_prefix_list_id(self) -> _builtins.str:
        """
        Source Data Prefix list ID
        """
        return pulumi.get(self, "source_data_prefix_list_id")

    @_builtins.property
    @pulumi.getter(name="sourceDataPrefixListVersion")
    def source_data_prefix_list_version(self) -> _builtins.int:
        """
        Source Data Prefix list version
        """
        return pulumi.get(self, "source_data_prefix_list_version")

    @_builtins.property
    @pulumi.getter(name="sourceIp")
    def source_ip(self) -> _builtins.str:
        """
        Source IP
        """
        return pulumi.get(self, "source_ip")

    @_builtins.property
    @pulumi.getter(name="sourcePort")
    def source_port(self) -> _builtins.str:
        """
        Source port, 0-65535 (Single value, range or multiple values separated by spaces)
        """
        return pulumi.get(self, "source_port")

    @_builtins.property
    @pulumi.getter
    def tcp(self) -> _builtins.str:
        """
        TCP flags
        """
        return pulumi.get(self, "tcp")

    @_builtins.property
    @pulumi.getter(name="trafficTo")
    def traffic_to(self) -> _builtins.str:
        """
        Traffic to
        """
        return pulumi.get(self, "traffic_to")

    @_builtins.property
    @pulumi.getter
    def type(self) -> _builtins.str:
        """
        Type of match entry
        """
        return pulumi.get(self, "type")


@pulumi.output_type
class GetTransportIpv4AclFeatureSequenceResult(dict):
    def __init__(__self__, *,
                 actions: Sequence['outputs.GetTransportIpv4AclFeatureSequenceActionResult'],
                 base_action: _builtins.str,
                 match_entries: Sequence['outputs.GetTransportIpv4AclFeatureSequenceMatchEntryResult'],
                 sequence_id: _builtins.int,
                 sequence_name: _builtins.str):
        """
        :param Sequence['GetTransportIpv4AclFeatureSequenceActionArgs'] actions: Define list of actions
        :param _builtins.str base_action: Base Action
        :param Sequence['GetTransportIpv4AclFeatureSequenceMatchEntryArgs'] match_entries: Define match conditions
        :param _builtins.int sequence_id: Sequence Id
        :param _builtins.str sequence_name: Sequence Name
        """
        pulumi.set(__self__, "actions", actions)
        pulumi.set(__self__, "base_action", base_action)
        pulumi.set(__self__, "match_entries", match_entries)
        pulumi.set(__self__, "sequence_id", sequence_id)
        pulumi.set(__self__, "sequence_name", sequence_name)

    @_builtins.property
    @pulumi.getter
    def actions(self) -> Sequence['outputs.GetTransportIpv4AclFeatureSequenceActionResult']:
        """
        Define list of actions
        """
        return pulumi.get(self, "actions")

    @_builtins.property
    @pulumi.getter(name="baseAction")
    def base_action(self) -> _builtins.str:
        """
        Base Action
        """
        return pulumi.get(self, "base_action")

    @_builtins.property
    @pulumi.getter(name="matchEntries")
    def match_entries(self) -> Sequence['outputs.GetTransportIpv4AclFeatureSequenceMatchEntryResult']:
        """
        Define match conditions
        """
        return pulumi.get(self, "match_entries")

    @_builtins.property
    @pulumi.getter(name="sequenceId")
    def sequence_id(self) -> _builtins.int:
        """
        Sequence Id
        """
        return pulumi.get(self, "sequence_id")

    @_builtins.property
    @pulumi.getter(name="sequenceName")
    def sequence_name(self) -> _builtins.str:
        """
        Sequence Name
        """
        return pulumi.get(self, "sequence_name")


@pulumi.output_type
class GetTransportIpv4AclFeatureSequenceActionResult(dict):
    def __init__(__self__, *,
                 accept_counter_name: _builtins.str,
                 accept_log: _builtins.bool,
                 accept_mirror_list_id: _builtins.str,
                 accept_policer_id: _builtins.str,
                 accept_set_dscp: _builtins.int,
                 accept_set_next_hop: _builtins.str,
                 drop_counter_name: _builtins.str,
                 drop_log: _builtins.bool):
        """
        :param _builtins.str accept_counter_name: Counter Name
        :param _builtins.bool accept_log: Enable Log
        :param _builtins.int accept_set_dscp: DSCP number
        :param _builtins.str accept_set_next_hop: Set Next Hop (IPV4 address)
        :param _builtins.str drop_counter_name: Counter Name
        :param _builtins.bool drop_log: Enable Log
        """
        pulumi.set(__self__, "accept_counter_name", accept_counter_name)
        pulumi.set(__self__, "accept_log", accept_log)
        pulumi.set(__self__, "accept_mirror_list_id", accept_mirror_list_id)
        pulumi.set(__self__, "accept_policer_id", accept_policer_id)
        pulumi.set(__self__, "accept_set_dscp", accept_set_dscp)
        pulumi.set(__self__, "accept_set_next_hop", accept_set_next_hop)
        pulumi.set(__self__, "drop_counter_name", drop_counter_name)
        pulumi.set(__self__, "drop_log", drop_log)

    @_builtins.property
    @pulumi.getter(name="acceptCounterName")
    def accept_counter_name(self) -> _builtins.str:
        """
        Counter Name
        """
        return pulumi.get(self, "accept_counter_name")

    @_builtins.property
    @pulumi.getter(name="acceptLog")
    def accept_log(self) -> _builtins.bool:
        """
        Enable Log
        """
        return pulumi.get(self, "accept_log")

    @_builtins.property
    @pulumi.getter(name="acceptMirrorListId")
    def accept_mirror_list_id(self) -> _builtins.str:
        return pulumi.get(self, "accept_mirror_list_id")

    @_builtins.property
    @pulumi.getter(name="acceptPolicerId")
    def accept_policer_id(self) -> _builtins.str:
        return pulumi.get(self, "accept_policer_id")

    @_builtins.property
    @pulumi.getter(name="acceptSetDscp")
    def accept_set_dscp(self) -> _builtins.int:
        """
        DSCP number
        """
        return pulumi.get(self, "accept_set_dscp")

    @_builtins.property
    @pulumi.getter(name="acceptSetNextHop")
    def accept_set_next_hop(self) -> _builtins.str:
        """
        Set Next Hop (IPV4 address)
        """
        return pulumi.get(self, "accept_set_next_hop")

    @_builtins.property
    @pulumi.getter(name="dropCounterName")
    def drop_counter_name(self) -> _builtins.str:
        """
        Counter Name
        """
        return pulumi.get(self, "drop_counter_name")

    @_builtins.property
    @pulumi.getter(name="dropLog")
    def drop_log(self) -> _builtins.bool:
        """
        Enable Log
        """
        return pulumi.get(self, "drop_log")


@pulumi.output_type
class GetTransportIpv4AclFeatureSequenceMatchEntryResult(dict):
    def __init__(__self__, *,
                 destination_data_prefix: _builtins.str,
                 destination_data_prefix_list_id: _builtins.str,
                 destination_data_prefix_variable: _builtins.str,
                 destination_ports: Sequence['outputs.GetTransportIpv4AclFeatureSequenceMatchEntryDestinationPortResult'],
                 dscps: Sequence[_builtins.int],
                 icmp_messages: Sequence[_builtins.str],
                 packet_length: _builtins.str,
                 protocols: Sequence[_builtins.int],
                 source_data_prefix: _builtins.str,
                 source_data_prefix_list_id: _builtins.str,
                 source_data_prefix_variable: _builtins.str,
                 source_ports: Sequence['outputs.GetTransportIpv4AclFeatureSequenceMatchEntrySourcePortResult'],
                 tcp_state: _builtins.str):
        """
        :param _builtins.str destination_data_prefix: Destination Data IP Prefix
        :param _builtins.str destination_data_prefix_variable: Variable name
        :param Sequence['GetTransportIpv4AclFeatureSequenceMatchEntryDestinationPortArgs'] destination_ports: Destination Port List
        :param Sequence[_builtins.int] dscps: DSCP number
        :param Sequence[_builtins.str] icmp_messages: ICMP Message
        :param _builtins.str packet_length: Packet Length
        :param Sequence[_builtins.int] protocols: protocol number list with at least one item
        :param _builtins.str source_data_prefix: Source Data IP Prefix
        :param _builtins.str source_data_prefix_variable: Variable name
        :param Sequence['GetTransportIpv4AclFeatureSequenceMatchEntrySourcePortArgs'] source_ports: Source Port List
        :param _builtins.str tcp_state: TCP States
        """
        pulumi.set(__self__, "destination_data_prefix", destination_data_prefix)
        pulumi.set(__self__, "destination_data_prefix_list_id", destination_data_prefix_list_id)
        pulumi.set(__self__, "destination_data_prefix_variable", destination_data_prefix_variable)
        pulumi.set(__self__, "destination_ports", destination_ports)
        pulumi.set(__self__, "dscps", dscps)
        pulumi.set(__self__, "icmp_messages", icmp_messages)
        pulumi.set(__self__, "packet_length", packet_length)
        pulumi.set(__self__, "protocols", protocols)
        pulumi.set(__self__, "source_data_prefix", source_data_prefix)
        pulumi.set(__self__, "source_data_prefix_list_id", source_data_prefix_list_id)
        pulumi.set(__self__, "source_data_prefix_variable", source_data_prefix_variable)
        pulumi.set(__self__, "source_ports", source_ports)
        pulumi.set(__self__, "tcp_state", tcp_state)

    @_builtins.property
    @pulumi.getter(name="destinationDataPrefix")
    def destination_data_prefix(self) -> _builtins.str:
        """
        Destination Data IP Prefix
        """
        return pulumi.get(self, "destination_data_prefix")

    @_builtins.property
    @pulumi.getter(name="destinationDataPrefixListId")
    def destination_data_prefix_list_id(self) -> _builtins.str:
        return pulumi.get(self, "destination_data_prefix_list_id")

    @_builtins.property
    @pulumi.getter(name="destinationDataPrefixVariable")
    def destination_data_prefix_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "destination_data_prefix_variable")

    @_builtins.property
    @pulumi.getter(name="destinationPorts")
    def destination_ports(self) -> Sequence['outputs.GetTransportIpv4AclFeatureSequenceMatchEntryDestinationPortResult']:
        """
        Destination Port List
        """
        return pulumi.get(self, "destination_ports")

    @_builtins.property
    @pulumi.getter
    def dscps(self) -> Sequence[_builtins.int]:
        """
        DSCP number
        """
        return pulumi.get(self, "dscps")

    @_builtins.property
    @pulumi.getter(name="icmpMessages")
    def icmp_messages(self) -> Sequence[_builtins.str]:
        """
        ICMP Message
        """
        return pulumi.get(self, "icmp_messages")

    @_builtins.property
    @pulumi.getter(name="packetLength")
    def packet_length(self) -> _builtins.str:
        """
        Packet Length
        """
        return pulumi.get(self, "packet_length")

    @_builtins.property
    @pulumi.getter
    def protocols(self) -> Sequence[_builtins.int]:
        """
        protocol number list with at least one item
        """
        return pulumi.get(self, "protocols")

    @_builtins.property
    @pulumi.getter(name="sourceDataPrefix")
    def source_data_prefix(self) -> _builtins.str:
        """
        Source Data IP Prefix
        """
        return pulumi.get(self, "source_data_prefix")

    @_builtins.property
    @pulumi.getter(name="sourceDataPrefixListId")
    def source_data_prefix_list_id(self) -> _builtins.str:
        return pulumi.get(self, "source_data_prefix_list_id")

    @_builtins.property
    @pulumi.getter(name="sourceDataPrefixVariable")
    def source_data_prefix_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "source_data_prefix_variable")

    @_builtins.property
    @pulumi.getter(name="sourcePorts")
    def source_ports(self) -> Sequence['outputs.GetTransportIpv4AclFeatureSequenceMatchEntrySourcePortResult']:
        """
        Source Port List
        """
        return pulumi.get(self, "source_ports")

    @_builtins.property
    @pulumi.getter(name="tcpState")
    def tcp_state(self) -> _builtins.str:
        """
        TCP States
        """
        return pulumi.get(self, "tcp_state")


@pulumi.output_type
class GetTransportIpv4AclFeatureSequenceMatchEntryDestinationPortResult(dict):
    def __init__(__self__, *,
                 port: _builtins.str):
        """
        :param _builtins.str port: destination port range or individual port number
        """
        pulumi.set(__self__, "port", port)

    @_builtins.property
    @pulumi.getter
    def port(self) -> _builtins.str:
        """
        destination port range or individual port number
        """
        return pulumi.get(self, "port")


@pulumi.output_type
class GetTransportIpv4AclFeatureSequenceMatchEntrySourcePortResult(dict):
    def __init__(__self__, *,
                 port: _builtins.str):
        """
        :param _builtins.str port: source port range or individual port number
        """
        pulumi.set(__self__, "port", port)

    @_builtins.property
    @pulumi.getter
    def port(self) -> _builtins.str:
        """
        source port range or individual port number
        """
        return pulumi.get(self, "port")


@pulumi.output_type
class GetTransportIpv6AclFeatureSequenceResult(dict):
    def __init__(__self__, *,
                 actions: Sequence['outputs.GetTransportIpv6AclFeatureSequenceActionResult'],
                 base_action: _builtins.str,
                 match_entries: Sequence['outputs.GetTransportIpv6AclFeatureSequenceMatchEntryResult'],
                 sequence_id: _builtins.int,
                 sequence_name: _builtins.str):
        """
        :param Sequence['GetTransportIpv6AclFeatureSequenceActionArgs'] actions: Define list of actions
        :param _builtins.str base_action: Base Action
        :param Sequence['GetTransportIpv6AclFeatureSequenceMatchEntryArgs'] match_entries: Define match conditions
        :param _builtins.int sequence_id: Sequence Id
        :param _builtins.str sequence_name: Sequence Name
        """
        pulumi.set(__self__, "actions", actions)
        pulumi.set(__self__, "base_action", base_action)
        pulumi.set(__self__, "match_entries", match_entries)
        pulumi.set(__self__, "sequence_id", sequence_id)
        pulumi.set(__self__, "sequence_name", sequence_name)

    @_builtins.property
    @pulumi.getter
    def actions(self) -> Sequence['outputs.GetTransportIpv6AclFeatureSequenceActionResult']:
        """
        Define list of actions
        """
        return pulumi.get(self, "actions")

    @_builtins.property
    @pulumi.getter(name="baseAction")
    def base_action(self) -> _builtins.str:
        """
        Base Action
        """
        return pulumi.get(self, "base_action")

    @_builtins.property
    @pulumi.getter(name="matchEntries")
    def match_entries(self) -> Sequence['outputs.GetTransportIpv6AclFeatureSequenceMatchEntryResult']:
        """
        Define match conditions
        """
        return pulumi.get(self, "match_entries")

    @_builtins.property
    @pulumi.getter(name="sequenceId")
    def sequence_id(self) -> _builtins.int:
        """
        Sequence Id
        """
        return pulumi.get(self, "sequence_id")

    @_builtins.property
    @pulumi.getter(name="sequenceName")
    def sequence_name(self) -> _builtins.str:
        """
        Sequence Name
        """
        return pulumi.get(self, "sequence_name")


@pulumi.output_type
class GetTransportIpv6AclFeatureSequenceActionResult(dict):
    def __init__(__self__, *,
                 accept_counter_name: _builtins.str,
                 accept_log: _builtins.bool,
                 accept_mirror_list_id: _builtins.str,
                 accept_policer_id: _builtins.str,
                 accept_set_next_hop: _builtins.str,
                 accept_traffic_class: _builtins.int,
                 drop_counter_name: _builtins.str,
                 drop_log: _builtins.bool):
        """
        :param _builtins.str accept_counter_name: Counter Name
        :param _builtins.bool accept_log: Enable Log
        :param _builtins.str accept_set_next_hop: Set Next Hop (IPV6 address)
        :param _builtins.int accept_traffic_class: set traffic class number
        :param _builtins.str drop_counter_name: Counter Name
        :param _builtins.bool drop_log: Enable Log
        """
        pulumi.set(__self__, "accept_counter_name", accept_counter_name)
        pulumi.set(__self__, "accept_log", accept_log)
        pulumi.set(__self__, "accept_mirror_list_id", accept_mirror_list_id)
        pulumi.set(__self__, "accept_policer_id", accept_policer_id)
        pulumi.set(__self__, "accept_set_next_hop", accept_set_next_hop)
        pulumi.set(__self__, "accept_traffic_class", accept_traffic_class)
        pulumi.set(__self__, "drop_counter_name", drop_counter_name)
        pulumi.set(__self__, "drop_log", drop_log)

    @_builtins.property
    @pulumi.getter(name="acceptCounterName")
    def accept_counter_name(self) -> _builtins.str:
        """
        Counter Name
        """
        return pulumi.get(self, "accept_counter_name")

    @_builtins.property
    @pulumi.getter(name="acceptLog")
    def accept_log(self) -> _builtins.bool:
        """
        Enable Log
        """
        return pulumi.get(self, "accept_log")

    @_builtins.property
    @pulumi.getter(name="acceptMirrorListId")
    def accept_mirror_list_id(self) -> _builtins.str:
        return pulumi.get(self, "accept_mirror_list_id")

    @_builtins.property
    @pulumi.getter(name="acceptPolicerId")
    def accept_policer_id(self) -> _builtins.str:
        return pulumi.get(self, "accept_policer_id")

    @_builtins.property
    @pulumi.getter(name="acceptSetNextHop")
    def accept_set_next_hop(self) -> _builtins.str:
        """
        Set Next Hop (IPV6 address)
        """
        return pulumi.get(self, "accept_set_next_hop")

    @_builtins.property
    @pulumi.getter(name="acceptTrafficClass")
    def accept_traffic_class(self) -> _builtins.int:
        """
        set traffic class number
        """
        return pulumi.get(self, "accept_traffic_class")

    @_builtins.property
    @pulumi.getter(name="dropCounterName")
    def drop_counter_name(self) -> _builtins.str:
        """
        Counter Name
        """
        return pulumi.get(self, "drop_counter_name")

    @_builtins.property
    @pulumi.getter(name="dropLog")
    def drop_log(self) -> _builtins.bool:
        """
        Enable Log
        """
        return pulumi.get(self, "drop_log")


@pulumi.output_type
class GetTransportIpv6AclFeatureSequenceMatchEntryResult(dict):
    def __init__(__self__, *,
                 destination_data_prefix: _builtins.str,
                 destination_data_prefix_list_id: _builtins.str,
                 destination_ports: Sequence['outputs.GetTransportIpv6AclFeatureSequenceMatchEntryDestinationPortResult'],
                 icmp_messages: Sequence[_builtins.str],
                 next_header: _builtins.int,
                 packet_length: _builtins.str,
                 source_data_prefix: _builtins.str,
                 source_data_prefix_list_id: _builtins.str,
                 source_ports: Sequence['outputs.GetTransportIpv6AclFeatureSequenceMatchEntrySourcePortResult'],
                 tcp_state: _builtins.str,
                 traffic_classes: Sequence[_builtins.int]):
        """
        :param _builtins.str destination_data_prefix: Destination Data IP Prefix
        :param Sequence['GetTransportIpv6AclFeatureSequenceMatchEntryDestinationPortArgs'] destination_ports: Destination Port List
        :param Sequence[_builtins.str] icmp_messages: ICMP6 Message
        :param _builtins.int next_header: next header number
        :param _builtins.str packet_length: Packet Length
        :param _builtins.str source_data_prefix: Source Data IP Prefix
        :param Sequence['GetTransportIpv6AclFeatureSequenceMatchEntrySourcePortArgs'] source_ports: Source Port List
        :param _builtins.str tcp_state: TCP States
        :param Sequence[_builtins.int] traffic_classes: Select Traffic Class
        """
        pulumi.set(__self__, "destination_data_prefix", destination_data_prefix)
        pulumi.set(__self__, "destination_data_prefix_list_id", destination_data_prefix_list_id)
        pulumi.set(__self__, "destination_ports", destination_ports)
        pulumi.set(__self__, "icmp_messages", icmp_messages)
        pulumi.set(__self__, "next_header", next_header)
        pulumi.set(__self__, "packet_length", packet_length)
        pulumi.set(__self__, "source_data_prefix", source_data_prefix)
        pulumi.set(__self__, "source_data_prefix_list_id", source_data_prefix_list_id)
        pulumi.set(__self__, "source_ports", source_ports)
        pulumi.set(__self__, "tcp_state", tcp_state)
        pulumi.set(__self__, "traffic_classes", traffic_classes)

    @_builtins.property
    @pulumi.getter(name="destinationDataPrefix")
    def destination_data_prefix(self) -> _builtins.str:
        """
        Destination Data IP Prefix
        """
        return pulumi.get(self, "destination_data_prefix")

    @_builtins.property
    @pulumi.getter(name="destinationDataPrefixListId")
    def destination_data_prefix_list_id(self) -> _builtins.str:
        return pulumi.get(self, "destination_data_prefix_list_id")

    @_builtins.property
    @pulumi.getter(name="destinationPorts")
    def destination_ports(self) -> Sequence['outputs.GetTransportIpv6AclFeatureSequenceMatchEntryDestinationPortResult']:
        """
        Destination Port List
        """
        return pulumi.get(self, "destination_ports")

    @_builtins.property
    @pulumi.getter(name="icmpMessages")
    def icmp_messages(self) -> Sequence[_builtins.str]:
        """
        ICMP6 Message
        """
        return pulumi.get(self, "icmp_messages")

    @_builtins.property
    @pulumi.getter(name="nextHeader")
    def next_header(self) -> _builtins.int:
        """
        next header number
        """
        return pulumi.get(self, "next_header")

    @_builtins.property
    @pulumi.getter(name="packetLength")
    def packet_length(self) -> _builtins.str:
        """
        Packet Length
        """
        return pulumi.get(self, "packet_length")

    @_builtins.property
    @pulumi.getter(name="sourceDataPrefix")
    def source_data_prefix(self) -> _builtins.str:
        """
        Source Data IP Prefix
        """
        return pulumi.get(self, "source_data_prefix")

    @_builtins.property
    @pulumi.getter(name="sourceDataPrefixListId")
    def source_data_prefix_list_id(self) -> _builtins.str:
        return pulumi.get(self, "source_data_prefix_list_id")

    @_builtins.property
    @pulumi.getter(name="sourcePorts")
    def source_ports(self) -> Sequence['outputs.GetTransportIpv6AclFeatureSequenceMatchEntrySourcePortResult']:
        """
        Source Port List
        """
        return pulumi.get(self, "source_ports")

    @_builtins.property
    @pulumi.getter(name="tcpState")
    def tcp_state(self) -> _builtins.str:
        """
        TCP States
        """
        return pulumi.get(self, "tcp_state")

    @_builtins.property
    @pulumi.getter(name="trafficClasses")
    def traffic_classes(self) -> Sequence[_builtins.int]:
        """
        Select Traffic Class
        """
        return pulumi.get(self, "traffic_classes")


@pulumi.output_type
class GetTransportIpv6AclFeatureSequenceMatchEntryDestinationPortResult(dict):
    def __init__(__self__, *,
                 port: _builtins.str):
        """
        :param _builtins.str port: destination port range or individual port number
        """
        pulumi.set(__self__, "port", port)

    @_builtins.property
    @pulumi.getter
    def port(self) -> _builtins.str:
        """
        destination port range or individual port number
        """
        return pulumi.get(self, "port")


@pulumi.output_type
class GetTransportIpv6AclFeatureSequenceMatchEntrySourcePortResult(dict):
    def __init__(__self__, *,
                 port: _builtins.str):
        """
        :param _builtins.str port: source port range or individual port number
        """
        pulumi.set(__self__, "port", port)

    @_builtins.property
    @pulumi.getter
    def port(self) -> _builtins.str:
        """
        source port range or individual port number
        """
        return pulumi.get(self, "port")


@pulumi.output_type
class GetTransportIpv6TrackerGroupFeatureTrackerElementResult(dict):
    def __init__(__self__, *,
                 tracker_id: _builtins.str):
        pulumi.set(__self__, "tracker_id", tracker_id)

    @_builtins.property
    @pulumi.getter(name="trackerId")
    def tracker_id(self) -> _builtins.str:
        return pulumi.get(self, "tracker_id")


@pulumi.output_type
class GetTransportManagementVpnFeatureIpv4StaticRouteResult(dict):
    def __init__(__self__, *,
                 administrative_distance: _builtins.int,
                 administrative_distance_variable: _builtins.str,
                 gateway: _builtins.str,
                 network_address: _builtins.str,
                 network_address_variable: _builtins.str,
                 next_hops: Sequence['outputs.GetTransportManagementVpnFeatureIpv4StaticRouteNextHopResult'],
                 subnet_mask: _builtins.str,
                 subnet_mask_variable: _builtins.str):
        """
        :param _builtins.int administrative_distance: Administrative distance
        :param _builtins.str administrative_distance_variable: Variable name
        :param _builtins.str gateway: Gateway
        :param _builtins.str network_address: IP Address
        :param _builtins.str network_address_variable: Variable name
        :param Sequence['GetTransportManagementVpnFeatureIpv4StaticRouteNextHopArgs'] next_hops: IPv4 Route Gateway Next Hop
        :param _builtins.str subnet_mask: Subnet Mask
        :param _builtins.str subnet_mask_variable: Variable name
        """
        pulumi.set(__self__, "administrative_distance", administrative_distance)
        pulumi.set(__self__, "administrative_distance_variable", administrative_distance_variable)
        pulumi.set(__self__, "gateway", gateway)
        pulumi.set(__self__, "network_address", network_address)
        pulumi.set(__self__, "network_address_variable", network_address_variable)
        pulumi.set(__self__, "next_hops", next_hops)
        pulumi.set(__self__, "subnet_mask", subnet_mask)
        pulumi.set(__self__, "subnet_mask_variable", subnet_mask_variable)

    @_builtins.property
    @pulumi.getter(name="administrativeDistance")
    def administrative_distance(self) -> _builtins.int:
        """
        Administrative distance
        """
        return pulumi.get(self, "administrative_distance")

    @_builtins.property
    @pulumi.getter(name="administrativeDistanceVariable")
    def administrative_distance_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "administrative_distance_variable")

    @_builtins.property
    @pulumi.getter
    def gateway(self) -> _builtins.str:
        """
        Gateway
        """
        return pulumi.get(self, "gateway")

    @_builtins.property
    @pulumi.getter(name="networkAddress")
    def network_address(self) -> _builtins.str:
        """
        IP Address
        """
        return pulumi.get(self, "network_address")

    @_builtins.property
    @pulumi.getter(name="networkAddressVariable")
    def network_address_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "network_address_variable")

    @_builtins.property
    @pulumi.getter(name="nextHops")
    def next_hops(self) -> Sequence['outputs.GetTransportManagementVpnFeatureIpv4StaticRouteNextHopResult']:
        """
        IPv4 Route Gateway Next Hop
        """
        return pulumi.get(self, "next_hops")

    @_builtins.property
    @pulumi.getter(name="subnetMask")
    def subnet_mask(self) -> _builtins.str:
        """
        Subnet Mask
        """
        return pulumi.get(self, "subnet_mask")

    @_builtins.property
    @pulumi.getter(name="subnetMaskVariable")
    def subnet_mask_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "subnet_mask_variable")


@pulumi.output_type
class GetTransportManagementVpnFeatureIpv4StaticRouteNextHopResult(dict):
    def __init__(__self__, *,
                 address: _builtins.str,
                 address_variable: _builtins.str,
                 administrative_distance: _builtins.int,
                 administrative_distance_variable: _builtins.str):
        """
        :param _builtins.str address: Address
        :param _builtins.str address_variable: Variable name
        :param _builtins.int administrative_distance: Administrative distance
        :param _builtins.str administrative_distance_variable: Variable name
        """
        pulumi.set(__self__, "address", address)
        pulumi.set(__self__, "address_variable", address_variable)
        pulumi.set(__self__, "administrative_distance", administrative_distance)
        pulumi.set(__self__, "administrative_distance_variable", administrative_distance_variable)

    @_builtins.property
    @pulumi.getter
    def address(self) -> _builtins.str:
        """
        Address
        """
        return pulumi.get(self, "address")

    @_builtins.property
    @pulumi.getter(name="addressVariable")
    def address_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "address_variable")

    @_builtins.property
    @pulumi.getter(name="administrativeDistance")
    def administrative_distance(self) -> _builtins.int:
        """
        Administrative distance
        """
        return pulumi.get(self, "administrative_distance")

    @_builtins.property
    @pulumi.getter(name="administrativeDistanceVariable")
    def administrative_distance_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "administrative_distance_variable")


@pulumi.output_type
class GetTransportManagementVpnFeatureIpv6StaticRouteResult(dict):
    def __init__(__self__, *,
                 gateway: _builtins.str,
                 nat: _builtins.str,
                 nat_variable: _builtins.str,
                 next_hops: Sequence['outputs.GetTransportManagementVpnFeatureIpv6StaticRouteNextHopResult'],
                 null0: _builtins.bool,
                 prefix: _builtins.str,
                 prefix_variable: _builtins.str):
        """
        :param _builtins.str gateway: Gateway
        :param _builtins.str nat: IPv6 Nat
        :param _builtins.str nat_variable: Variable name
        :param Sequence['GetTransportManagementVpnFeatureIpv6StaticRouteNextHopArgs'] next_hops: IPv6 Route Gateway Next Hop
        :param _builtins.bool null0: IPv6 Route Gateway Next Hop
        :param _builtins.str prefix: Prefix
        :param _builtins.str prefix_variable: Variable name
        """
        pulumi.set(__self__, "gateway", gateway)
        pulumi.set(__self__, "nat", nat)
        pulumi.set(__self__, "nat_variable", nat_variable)
        pulumi.set(__self__, "next_hops", next_hops)
        pulumi.set(__self__, "null0", null0)
        pulumi.set(__self__, "prefix", prefix)
        pulumi.set(__self__, "prefix_variable", prefix_variable)

    @_builtins.property
    @pulumi.getter
    def gateway(self) -> _builtins.str:
        """
        Gateway
        """
        return pulumi.get(self, "gateway")

    @_builtins.property
    @pulumi.getter
    def nat(self) -> _builtins.str:
        """
        IPv6 Nat
        """
        return pulumi.get(self, "nat")

    @_builtins.property
    @pulumi.getter(name="natVariable")
    def nat_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "nat_variable")

    @_builtins.property
    @pulumi.getter(name="nextHops")
    def next_hops(self) -> Sequence['outputs.GetTransportManagementVpnFeatureIpv6StaticRouteNextHopResult']:
        """
        IPv6 Route Gateway Next Hop
        """
        return pulumi.get(self, "next_hops")

    @_builtins.property
    @pulumi.getter
    def null0(self) -> _builtins.bool:
        """
        IPv6 Route Gateway Next Hop
        """
        return pulumi.get(self, "null0")

    @_builtins.property
    @pulumi.getter
    def prefix(self) -> _builtins.str:
        """
        Prefix
        """
        return pulumi.get(self, "prefix")

    @_builtins.property
    @pulumi.getter(name="prefixVariable")
    def prefix_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "prefix_variable")


@pulumi.output_type
class GetTransportManagementVpnFeatureIpv6StaticRouteNextHopResult(dict):
    def __init__(__self__, *,
                 address: _builtins.str,
                 address_variable: _builtins.str,
                 administrative_distance: _builtins.int,
                 administrative_distance_variable: _builtins.str):
        """
        :param _builtins.str address: Address
        :param _builtins.str address_variable: Variable name
        :param _builtins.int administrative_distance: Administrative distance
        :param _builtins.str administrative_distance_variable: Variable name
        """
        pulumi.set(__self__, "address", address)
        pulumi.set(__self__, "address_variable", address_variable)
        pulumi.set(__self__, "administrative_distance", administrative_distance)
        pulumi.set(__self__, "administrative_distance_variable", administrative_distance_variable)

    @_builtins.property
    @pulumi.getter
    def address(self) -> _builtins.str:
        """
        Address
        """
        return pulumi.get(self, "address")

    @_builtins.property
    @pulumi.getter(name="addressVariable")
    def address_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "address_variable")

    @_builtins.property
    @pulumi.getter(name="administrativeDistance")
    def administrative_distance(self) -> _builtins.int:
        """
        Administrative distance
        """
        return pulumi.get(self, "administrative_distance")

    @_builtins.property
    @pulumi.getter(name="administrativeDistanceVariable")
    def administrative_distance_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "administrative_distance_variable")


@pulumi.output_type
class GetTransportManagementVpnFeatureNewHostMappingResult(dict):
    def __init__(__self__, *,
                 host_name: _builtins.str,
                 host_name_variable: _builtins.str,
                 list_of_ip_addresses: Sequence[_builtins.str],
                 list_of_ip_addresses_variable: _builtins.str):
        """
        :param _builtins.str host_name: Hostname
        :param _builtins.str host_name_variable: Variable name
        :param Sequence[_builtins.str] list_of_ip_addresses: List of IP
        :param _builtins.str list_of_ip_addresses_variable: Variable name
        """
        pulumi.set(__self__, "host_name", host_name)
        pulumi.set(__self__, "host_name_variable", host_name_variable)
        pulumi.set(__self__, "list_of_ip_addresses", list_of_ip_addresses)
        pulumi.set(__self__, "list_of_ip_addresses_variable", list_of_ip_addresses_variable)

    @_builtins.property
    @pulumi.getter(name="hostName")
    def host_name(self) -> _builtins.str:
        """
        Hostname
        """
        return pulumi.get(self, "host_name")

    @_builtins.property
    @pulumi.getter(name="hostNameVariable")
    def host_name_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "host_name_variable")

    @_builtins.property
    @pulumi.getter(name="listOfIpAddresses")
    def list_of_ip_addresses(self) -> Sequence[_builtins.str]:
        """
        List of IP
        """
        return pulumi.get(self, "list_of_ip_addresses")

    @_builtins.property
    @pulumi.getter(name="listOfIpAddressesVariable")
    def list_of_ip_addresses_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "list_of_ip_addresses_variable")


@pulumi.output_type
class GetTransportManagementVpnInterfaceEthernetFeatureArpEntryResult(dict):
    def __init__(__self__, *,
                 ip_address: _builtins.str,
                 ip_address_variable: _builtins.str,
                 mac_address: _builtins.str,
                 mac_address_variable: _builtins.str):
        """
        :param _builtins.str ip_address: IPV4 Address
        :param _builtins.str ip_address_variable: Variable name
        :param _builtins.str mac_address: MAC Address
        :param _builtins.str mac_address_variable: Variable name
        """
        pulumi.set(__self__, "ip_address", ip_address)
        pulumi.set(__self__, "ip_address_variable", ip_address_variable)
        pulumi.set(__self__, "mac_address", mac_address)
        pulumi.set(__self__, "mac_address_variable", mac_address_variable)

    @_builtins.property
    @pulumi.getter(name="ipAddress")
    def ip_address(self) -> _builtins.str:
        """
        IPV4 Address
        """
        return pulumi.get(self, "ip_address")

    @_builtins.property
    @pulumi.getter(name="ipAddressVariable")
    def ip_address_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "ip_address_variable")

    @_builtins.property
    @pulumi.getter(name="macAddress")
    def mac_address(self) -> _builtins.str:
        """
        MAC Address
        """
        return pulumi.get(self, "mac_address")

    @_builtins.property
    @pulumi.getter(name="macAddressVariable")
    def mac_address_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "mac_address_variable")


@pulumi.output_type
class GetTransportManagementVpnInterfaceEthernetFeatureIpv4SecondaryAddressResult(dict):
    def __init__(__self__, *,
                 address: _builtins.str,
                 address_variable: _builtins.str,
                 subnet_mask: _builtins.str,
                 subnet_mask_variable: _builtins.str):
        """
        :param _builtins.str address: IpV4 Address
        :param _builtins.str address_variable: Variable name
        :param _builtins.str subnet_mask: Subnet Mask
        :param _builtins.str subnet_mask_variable: Variable name
        """
        pulumi.set(__self__, "address", address)
        pulumi.set(__self__, "address_variable", address_variable)
        pulumi.set(__self__, "subnet_mask", subnet_mask)
        pulumi.set(__self__, "subnet_mask_variable", subnet_mask_variable)

    @_builtins.property
    @pulumi.getter
    def address(self) -> _builtins.str:
        """
        IpV4 Address
        """
        return pulumi.get(self, "address")

    @_builtins.property
    @pulumi.getter(name="addressVariable")
    def address_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "address_variable")

    @_builtins.property
    @pulumi.getter(name="subnetMask")
    def subnet_mask(self) -> _builtins.str:
        """
        Subnet Mask
        """
        return pulumi.get(self, "subnet_mask")

    @_builtins.property
    @pulumi.getter(name="subnetMaskVariable")
    def subnet_mask_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "subnet_mask_variable")


@pulumi.output_type
class GetTransportRoutePolicyFeatureSequenceResult(dict):
    def __init__(__self__, *,
                 actions: Sequence['outputs.GetTransportRoutePolicyFeatureSequenceActionResult'],
                 base_action: _builtins.str,
                 id: _builtins.int,
                 match_entries: Sequence['outputs.GetTransportRoutePolicyFeatureSequenceMatchEntryResult'],
                 name: _builtins.str,
                 protocol: _builtins.str):
        """
        :param Sequence['GetTransportRoutePolicyFeatureSequenceActionArgs'] actions: Define list of actions
        :param _builtins.str base_action: Base Action
        :param _builtins.int id: Sequence Id
        :param Sequence['GetTransportRoutePolicyFeatureSequenceMatchEntryArgs'] match_entries: Define match conditions
        :param _builtins.str name: Sequence Name
        :param _builtins.str protocol: protocol such as IPV4, IPV6, or BOTH
        """
        pulumi.set(__self__, "actions", actions)
        pulumi.set(__self__, "base_action", base_action)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "match_entries", match_entries)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "protocol", protocol)

    @_builtins.property
    @pulumi.getter
    def actions(self) -> Sequence['outputs.GetTransportRoutePolicyFeatureSequenceActionResult']:
        """
        Define list of actions
        """
        return pulumi.get(self, "actions")

    @_builtins.property
    @pulumi.getter(name="baseAction")
    def base_action(self) -> _builtins.str:
        """
        Base Action
        """
        return pulumi.get(self, "base_action")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.int:
        """
        Sequence Id
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter(name="matchEntries")
    def match_entries(self) -> Sequence['outputs.GetTransportRoutePolicyFeatureSequenceMatchEntryResult']:
        """
        Define match conditions
        """
        return pulumi.get(self, "match_entries")

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        """
        Sequence Name
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def protocol(self) -> _builtins.str:
        """
        protocol such as IPV4, IPV6, or BOTH
        """
        return pulumi.get(self, "protocol")


@pulumi.output_type
class GetTransportRoutePolicyFeatureSequenceActionResult(dict):
    def __init__(__self__, *,
                 as_path_prepends: Sequence[_builtins.int],
                 communities: Sequence[_builtins.str],
                 community_additive: _builtins.bool,
                 community_variable: _builtins.str,
                 ipv4_next_hop: _builtins.str,
                 ipv6_next_hop: _builtins.str,
                 local_preference: _builtins.int,
                 metric: _builtins.int,
                 metric_type: _builtins.str,
                 omp_tag: _builtins.int,
                 origin: _builtins.str,
                 ospf_tag: _builtins.int,
                 weight: _builtins.int):
        """
        :param _builtins.str community_variable: Variable name
        :param _builtins.str ipv4_next_hop: Set Ipv4 Next Hop
        :param _builtins.str ipv6_next_hop: Set Ipv6 Next Hop
        :param _builtins.int local_preference: Set Local Preference
        :param _builtins.int metric: Set Metric
        :param _builtins.str metric_type: Set Metric Type
        :param _builtins.int omp_tag: Set OMP Tag
        :param _builtins.str origin: Set Origin
        :param _builtins.int ospf_tag: Set OSPF Tag
        :param _builtins.int weight: Set Weight
        """
        pulumi.set(__self__, "as_path_prepends", as_path_prepends)
        pulumi.set(__self__, "communities", communities)
        pulumi.set(__self__, "community_additive", community_additive)
        pulumi.set(__self__, "community_variable", community_variable)
        pulumi.set(__self__, "ipv4_next_hop", ipv4_next_hop)
        pulumi.set(__self__, "ipv6_next_hop", ipv6_next_hop)
        pulumi.set(__self__, "local_preference", local_preference)
        pulumi.set(__self__, "metric", metric)
        pulumi.set(__self__, "metric_type", metric_type)
        pulumi.set(__self__, "omp_tag", omp_tag)
        pulumi.set(__self__, "origin", origin)
        pulumi.set(__self__, "ospf_tag", ospf_tag)
        pulumi.set(__self__, "weight", weight)

    @_builtins.property
    @pulumi.getter(name="asPathPrepends")
    def as_path_prepends(self) -> Sequence[_builtins.int]:
        return pulumi.get(self, "as_path_prepends")

    @_builtins.property
    @pulumi.getter
    def communities(self) -> Sequence[_builtins.str]:
        return pulumi.get(self, "communities")

    @_builtins.property
    @pulumi.getter(name="communityAdditive")
    def community_additive(self) -> _builtins.bool:
        return pulumi.get(self, "community_additive")

    @_builtins.property
    @pulumi.getter(name="communityVariable")
    def community_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "community_variable")

    @_builtins.property
    @pulumi.getter(name="ipv4NextHop")
    def ipv4_next_hop(self) -> _builtins.str:
        """
        Set Ipv4 Next Hop
        """
        return pulumi.get(self, "ipv4_next_hop")

    @_builtins.property
    @pulumi.getter(name="ipv6NextHop")
    def ipv6_next_hop(self) -> _builtins.str:
        """
        Set Ipv6 Next Hop
        """
        return pulumi.get(self, "ipv6_next_hop")

    @_builtins.property
    @pulumi.getter(name="localPreference")
    def local_preference(self) -> _builtins.int:
        """
        Set Local Preference
        """
        return pulumi.get(self, "local_preference")

    @_builtins.property
    @pulumi.getter
    def metric(self) -> _builtins.int:
        """
        Set Metric
        """
        return pulumi.get(self, "metric")

    @_builtins.property
    @pulumi.getter(name="metricType")
    def metric_type(self) -> _builtins.str:
        """
        Set Metric Type
        """
        return pulumi.get(self, "metric_type")

    @_builtins.property
    @pulumi.getter(name="ompTag")
    def omp_tag(self) -> _builtins.int:
        """
        Set OMP Tag
        """
        return pulumi.get(self, "omp_tag")

    @_builtins.property
    @pulumi.getter
    def origin(self) -> _builtins.str:
        """
        Set Origin
        """
        return pulumi.get(self, "origin")

    @_builtins.property
    @pulumi.getter(name="ospfTag")
    def ospf_tag(self) -> _builtins.int:
        """
        Set OSPF Tag
        """
        return pulumi.get(self, "ospf_tag")

    @_builtins.property
    @pulumi.getter
    def weight(self) -> _builtins.int:
        """
        Set Weight
        """
        return pulumi.get(self, "weight")


@pulumi.output_type
class GetTransportRoutePolicyFeatureSequenceMatchEntryResult(dict):
    def __init__(__self__, *,
                 as_path_list_id: _builtins.str,
                 bgp_local_preference: _builtins.int,
                 expanded_community_list_id: _builtins.str,
                 extended_community_list_id: _builtins.str,
                 ipv4_address_prefix_list_id: _builtins.str,
                 ipv4_next_hop_prefix_list_id: _builtins.str,
                 ipv6_address_prefix_list_id: _builtins.str,
                 ipv6_next_hop_prefix_list_id: _builtins.str,
                 metric: _builtins.int,
                 omp_tag: _builtins.int,
                 ospf_tag: _builtins.int,
                 standard_community_list_criteria: _builtins.str,
                 standard_community_lists: Sequence['outputs.GetTransportRoutePolicyFeatureSequenceMatchEntryStandardCommunityListResult']):
        """
        :param _builtins.int bgp_local_preference: BGP Local Preference
        :param _builtins.int metric: Select Metric
        :param _builtins.int omp_tag: Select OMP Tag
        :param _builtins.int ospf_tag: Select OSPF Tag
        :param _builtins.str standard_community_list_criteria: Select a condition such as OR, AND or EXACT
        :param Sequence['GetTransportRoutePolicyFeatureSequenceMatchEntryStandardCommunityListArgs'] standard_community_lists: Select a standard community list
        """
        pulumi.set(__self__, "as_path_list_id", as_path_list_id)
        pulumi.set(__self__, "bgp_local_preference", bgp_local_preference)
        pulumi.set(__self__, "expanded_community_list_id", expanded_community_list_id)
        pulumi.set(__self__, "extended_community_list_id", extended_community_list_id)
        pulumi.set(__self__, "ipv4_address_prefix_list_id", ipv4_address_prefix_list_id)
        pulumi.set(__self__, "ipv4_next_hop_prefix_list_id", ipv4_next_hop_prefix_list_id)
        pulumi.set(__self__, "ipv6_address_prefix_list_id", ipv6_address_prefix_list_id)
        pulumi.set(__self__, "ipv6_next_hop_prefix_list_id", ipv6_next_hop_prefix_list_id)
        pulumi.set(__self__, "metric", metric)
        pulumi.set(__self__, "omp_tag", omp_tag)
        pulumi.set(__self__, "ospf_tag", ospf_tag)
        pulumi.set(__self__, "standard_community_list_criteria", standard_community_list_criteria)
        pulumi.set(__self__, "standard_community_lists", standard_community_lists)

    @_builtins.property
    @pulumi.getter(name="asPathListId")
    def as_path_list_id(self) -> _builtins.str:
        return pulumi.get(self, "as_path_list_id")

    @_builtins.property
    @pulumi.getter(name="bgpLocalPreference")
    def bgp_local_preference(self) -> _builtins.int:
        """
        BGP Local Preference
        """
        return pulumi.get(self, "bgp_local_preference")

    @_builtins.property
    @pulumi.getter(name="expandedCommunityListId")
    def expanded_community_list_id(self) -> _builtins.str:
        return pulumi.get(self, "expanded_community_list_id")

    @_builtins.property
    @pulumi.getter(name="extendedCommunityListId")
    def extended_community_list_id(self) -> _builtins.str:
        return pulumi.get(self, "extended_community_list_id")

    @_builtins.property
    @pulumi.getter(name="ipv4AddressPrefixListId")
    def ipv4_address_prefix_list_id(self) -> _builtins.str:
        return pulumi.get(self, "ipv4_address_prefix_list_id")

    @_builtins.property
    @pulumi.getter(name="ipv4NextHopPrefixListId")
    def ipv4_next_hop_prefix_list_id(self) -> _builtins.str:
        return pulumi.get(self, "ipv4_next_hop_prefix_list_id")

    @_builtins.property
    @pulumi.getter(name="ipv6AddressPrefixListId")
    def ipv6_address_prefix_list_id(self) -> _builtins.str:
        return pulumi.get(self, "ipv6_address_prefix_list_id")

    @_builtins.property
    @pulumi.getter(name="ipv6NextHopPrefixListId")
    def ipv6_next_hop_prefix_list_id(self) -> _builtins.str:
        return pulumi.get(self, "ipv6_next_hop_prefix_list_id")

    @_builtins.property
    @pulumi.getter
    def metric(self) -> _builtins.int:
        """
        Select Metric
        """
        return pulumi.get(self, "metric")

    @_builtins.property
    @pulumi.getter(name="ompTag")
    def omp_tag(self) -> _builtins.int:
        """
        Select OMP Tag
        """
        return pulumi.get(self, "omp_tag")

    @_builtins.property
    @pulumi.getter(name="ospfTag")
    def ospf_tag(self) -> _builtins.int:
        """
        Select OSPF Tag
        """
        return pulumi.get(self, "ospf_tag")

    @_builtins.property
    @pulumi.getter(name="standardCommunityListCriteria")
    def standard_community_list_criteria(self) -> _builtins.str:
        """
        Select a condition such as OR, AND or EXACT
        """
        return pulumi.get(self, "standard_community_list_criteria")

    @_builtins.property
    @pulumi.getter(name="standardCommunityLists")
    def standard_community_lists(self) -> Sequence['outputs.GetTransportRoutePolicyFeatureSequenceMatchEntryStandardCommunityListResult']:
        """
        Select a standard community list
        """
        return pulumi.get(self, "standard_community_lists")


@pulumi.output_type
class GetTransportRoutePolicyFeatureSequenceMatchEntryStandardCommunityListResult(dict):
    def __init__(__self__, *,
                 id: _builtins.str):
        pulumi.set(__self__, "id", id)

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        return pulumi.get(self, "id")


@pulumi.output_type
class GetTransportRoutingBgpFeatureIpv4AggregateAddressResult(dict):
    def __init__(__self__, *,
                 as_set_path: _builtins.bool,
                 as_set_path_variable: _builtins.str,
                 network_address: _builtins.str,
                 network_address_variable: _builtins.str,
                 subnet_mask: _builtins.str,
                 subnet_mask_variable: _builtins.str,
                 summary_only: _builtins.bool,
                 summary_only_variable: _builtins.str):
        """
        :param _builtins.bool as_set_path: Set AS set path information
        :param _builtins.str as_set_path_variable: Variable name
        :param _builtins.str network_address_variable: Variable name
        :param _builtins.str subnet_mask_variable: Variable name
        :param _builtins.bool summary_only: Filter out more specific routes from updates
        :param _builtins.str summary_only_variable: Variable name
        """
        pulumi.set(__self__, "as_set_path", as_set_path)
        pulumi.set(__self__, "as_set_path_variable", as_set_path_variable)
        pulumi.set(__self__, "network_address", network_address)
        pulumi.set(__self__, "network_address_variable", network_address_variable)
        pulumi.set(__self__, "subnet_mask", subnet_mask)
        pulumi.set(__self__, "subnet_mask_variable", subnet_mask_variable)
        pulumi.set(__self__, "summary_only", summary_only)
        pulumi.set(__self__, "summary_only_variable", summary_only_variable)

    @_builtins.property
    @pulumi.getter(name="asSetPath")
    def as_set_path(self) -> _builtins.bool:
        """
        Set AS set path information
        """
        return pulumi.get(self, "as_set_path")

    @_builtins.property
    @pulumi.getter(name="asSetPathVariable")
    def as_set_path_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "as_set_path_variable")

    @_builtins.property
    @pulumi.getter(name="networkAddress")
    def network_address(self) -> _builtins.str:
        return pulumi.get(self, "network_address")

    @_builtins.property
    @pulumi.getter(name="networkAddressVariable")
    def network_address_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "network_address_variable")

    @_builtins.property
    @pulumi.getter(name="subnetMask")
    def subnet_mask(self) -> _builtins.str:
        return pulumi.get(self, "subnet_mask")

    @_builtins.property
    @pulumi.getter(name="subnetMaskVariable")
    def subnet_mask_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "subnet_mask_variable")

    @_builtins.property
    @pulumi.getter(name="summaryOnly")
    def summary_only(self) -> _builtins.bool:
        """
        Filter out more specific routes from updates
        """
        return pulumi.get(self, "summary_only")

    @_builtins.property
    @pulumi.getter(name="summaryOnlyVariable")
    def summary_only_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "summary_only_variable")


@pulumi.output_type
class GetTransportRoutingBgpFeatureIpv4NeighborResult(dict):
    def __init__(__self__, *,
                 address: _builtins.str,
                 address_families: Sequence['outputs.GetTransportRoutingBgpFeatureIpv4NeighborAddressFamilyResult'],
                 address_variable: _builtins.str,
                 allowas_in_number: _builtins.int,
                 allowas_in_number_variable: _builtins.str,
                 as_override: _builtins.bool,
                 as_override_variable: _builtins.str,
                 description: _builtins.str,
                 description_variable: _builtins.str,
                 ebgp_multihop: _builtins.int,
                 ebgp_multihop_variable: _builtins.str,
                 explicit_null: _builtins.bool,
                 explicit_null_variable: _builtins.str,
                 hold_time: _builtins.int,
                 hold_time_variable: _builtins.str,
                 keepalive_time: _builtins.int,
                 keepalive_time_variable: _builtins.str,
                 local_as: _builtins.int,
                 local_as_variable: _builtins.str,
                 next_hop_self: _builtins.bool,
                 next_hop_self_variable: _builtins.str,
                 password: _builtins.str,
                 password_variable: _builtins.str,
                 remote_as: _builtins.int,
                 remote_as_variable: _builtins.str,
                 send_community: _builtins.bool,
                 send_community_variable: _builtins.str,
                 send_extended_community: _builtins.bool,
                 send_extended_community_variable: _builtins.str,
                 send_label: _builtins.bool,
                 shutdown: _builtins.bool,
                 shutdown_variable: _builtins.str,
                 update_source_interface: _builtins.str,
                 update_source_interface_variable: _builtins.str):
        """
        :param _builtins.str address: Set neighbor address
        :param Sequence['GetTransportRoutingBgpFeatureIpv4NeighborAddressFamilyArgs'] address_families: Set BGP address family
        :param _builtins.str address_variable: Variable name
        :param _builtins.int allowas_in_number: The number of accept as-path with my AS present in it
        :param _builtins.str allowas_in_number_variable: Variable name
        :param _builtins.bool as_override: Override matching AS-number while sending update
        :param _builtins.str as_override_variable: Variable name
        :param _builtins.str description: Set description
        :param _builtins.str description_variable: Variable name
        :param _builtins.int ebgp_multihop: Set TTL value for peers that are not directly connected
        :param _builtins.str ebgp_multihop_variable: Variable name
        :param _builtins.bool explicit_null: Send explicit null label
        :param _builtins.str explicit_null_variable: Variable name
        :param _builtins.int hold_time: Set how long to wait since receiving a keepalive message to consider BGP peer unavailable
        :param _builtins.str hold_time_variable: Variable name
        :param _builtins.int keepalive_time: Set how often to advertise keepalive messages to BGP peer
        :param _builtins.str keepalive_time_variable: Variable name
        :param _builtins.int local_as: Set local autonomous number,Local-AS cannot have the local BGP protocol AS number or the AS number of the remote peer.The local-as is valid only if the peer is a true eBGP peer. It does not work for two peers in different sub-ASs in a confederation.
        :param _builtins.str local_as_variable: Variable name
        :param _builtins.bool next_hop_self: Set router to be next hop for routes advertised to neighbor
        :param _builtins.str next_hop_self_variable: Variable name
        :param _builtins.str password: Set MD5 password on TCP connection with BGP peer
        :param _builtins.str password_variable: Variable name
        :param _builtins.int remote_as: Set remote autonomous system number
        :param _builtins.str remote_as_variable: Variable name
        :param _builtins.bool send_community: Send community attribute
        :param _builtins.str send_community_variable: Variable name
        :param _builtins.bool send_extended_community: Send extended community attribute
        :param _builtins.str send_extended_community_variable: Variable name
        :param _builtins.bool send_label: Send label
        :param _builtins.bool shutdown: Enable or disable a BGP neighbor
        :param _builtins.str shutdown_variable: Variable name
        :param _builtins.str update_source_interface: Source interface name for BGP neighbor
        :param _builtins.str update_source_interface_variable: Variable name
        """
        pulumi.set(__self__, "address", address)
        pulumi.set(__self__, "address_families", address_families)
        pulumi.set(__self__, "address_variable", address_variable)
        pulumi.set(__self__, "allowas_in_number", allowas_in_number)
        pulumi.set(__self__, "allowas_in_number_variable", allowas_in_number_variable)
        pulumi.set(__self__, "as_override", as_override)
        pulumi.set(__self__, "as_override_variable", as_override_variable)
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "description_variable", description_variable)
        pulumi.set(__self__, "ebgp_multihop", ebgp_multihop)
        pulumi.set(__self__, "ebgp_multihop_variable", ebgp_multihop_variable)
        pulumi.set(__self__, "explicit_null", explicit_null)
        pulumi.set(__self__, "explicit_null_variable", explicit_null_variable)
        pulumi.set(__self__, "hold_time", hold_time)
        pulumi.set(__self__, "hold_time_variable", hold_time_variable)
        pulumi.set(__self__, "keepalive_time", keepalive_time)
        pulumi.set(__self__, "keepalive_time_variable", keepalive_time_variable)
        pulumi.set(__self__, "local_as", local_as)
        pulumi.set(__self__, "local_as_variable", local_as_variable)
        pulumi.set(__self__, "next_hop_self", next_hop_self)
        pulumi.set(__self__, "next_hop_self_variable", next_hop_self_variable)
        pulumi.set(__self__, "password", password)
        pulumi.set(__self__, "password_variable", password_variable)
        pulumi.set(__self__, "remote_as", remote_as)
        pulumi.set(__self__, "remote_as_variable", remote_as_variable)
        pulumi.set(__self__, "send_community", send_community)
        pulumi.set(__self__, "send_community_variable", send_community_variable)
        pulumi.set(__self__, "send_extended_community", send_extended_community)
        pulumi.set(__self__, "send_extended_community_variable", send_extended_community_variable)
        pulumi.set(__self__, "send_label", send_label)
        pulumi.set(__self__, "shutdown", shutdown)
        pulumi.set(__self__, "shutdown_variable", shutdown_variable)
        pulumi.set(__self__, "update_source_interface", update_source_interface)
        pulumi.set(__self__, "update_source_interface_variable", update_source_interface_variable)

    @_builtins.property
    @pulumi.getter
    def address(self) -> _builtins.str:
        """
        Set neighbor address
        """
        return pulumi.get(self, "address")

    @_builtins.property
    @pulumi.getter(name="addressFamilies")
    def address_families(self) -> Sequence['outputs.GetTransportRoutingBgpFeatureIpv4NeighborAddressFamilyResult']:
        """
        Set BGP address family
        """
        return pulumi.get(self, "address_families")

    @_builtins.property
    @pulumi.getter(name="addressVariable")
    def address_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "address_variable")

    @_builtins.property
    @pulumi.getter(name="allowasInNumber")
    def allowas_in_number(self) -> _builtins.int:
        """
        The number of accept as-path with my AS present in it
        """
        return pulumi.get(self, "allowas_in_number")

    @_builtins.property
    @pulumi.getter(name="allowasInNumberVariable")
    def allowas_in_number_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "allowas_in_number_variable")

    @_builtins.property
    @pulumi.getter(name="asOverride")
    def as_override(self) -> _builtins.bool:
        """
        Override matching AS-number while sending update
        """
        return pulumi.get(self, "as_override")

    @_builtins.property
    @pulumi.getter(name="asOverrideVariable")
    def as_override_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "as_override_variable")

    @_builtins.property
    @pulumi.getter
    def description(self) -> _builtins.str:
        """
        Set description
        """
        return pulumi.get(self, "description")

    @_builtins.property
    @pulumi.getter(name="descriptionVariable")
    def description_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "description_variable")

    @_builtins.property
    @pulumi.getter(name="ebgpMultihop")
    def ebgp_multihop(self) -> _builtins.int:
        """
        Set TTL value for peers that are not directly connected
        """
        return pulumi.get(self, "ebgp_multihop")

    @_builtins.property
    @pulumi.getter(name="ebgpMultihopVariable")
    def ebgp_multihop_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "ebgp_multihop_variable")

    @_builtins.property
    @pulumi.getter(name="explicitNull")
    def explicit_null(self) -> _builtins.bool:
        """
        Send explicit null label
        """
        return pulumi.get(self, "explicit_null")

    @_builtins.property
    @pulumi.getter(name="explicitNullVariable")
    def explicit_null_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "explicit_null_variable")

    @_builtins.property
    @pulumi.getter(name="holdTime")
    def hold_time(self) -> _builtins.int:
        """
        Set how long to wait since receiving a keepalive message to consider BGP peer unavailable
        """
        return pulumi.get(self, "hold_time")

    @_builtins.property
    @pulumi.getter(name="holdTimeVariable")
    def hold_time_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "hold_time_variable")

    @_builtins.property
    @pulumi.getter(name="keepaliveTime")
    def keepalive_time(self) -> _builtins.int:
        """
        Set how often to advertise keepalive messages to BGP peer
        """
        return pulumi.get(self, "keepalive_time")

    @_builtins.property
    @pulumi.getter(name="keepaliveTimeVariable")
    def keepalive_time_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "keepalive_time_variable")

    @_builtins.property
    @pulumi.getter(name="localAs")
    def local_as(self) -> _builtins.int:
        """
        Set local autonomous number,Local-AS cannot have the local BGP protocol AS number or the AS number of the remote peer.The local-as is valid only if the peer is a true eBGP peer. It does not work for two peers in different sub-ASs in a confederation.
        """
        return pulumi.get(self, "local_as")

    @_builtins.property
    @pulumi.getter(name="localAsVariable")
    def local_as_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "local_as_variable")

    @_builtins.property
    @pulumi.getter(name="nextHopSelf")
    def next_hop_self(self) -> _builtins.bool:
        """
        Set router to be next hop for routes advertised to neighbor
        """
        return pulumi.get(self, "next_hop_self")

    @_builtins.property
    @pulumi.getter(name="nextHopSelfVariable")
    def next_hop_self_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "next_hop_self_variable")

    @_builtins.property
    @pulumi.getter
    def password(self) -> _builtins.str:
        """
        Set MD5 password on TCP connection with BGP peer
        """
        return pulumi.get(self, "password")

    @_builtins.property
    @pulumi.getter(name="passwordVariable")
    def password_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "password_variable")

    @_builtins.property
    @pulumi.getter(name="remoteAs")
    def remote_as(self) -> _builtins.int:
        """
        Set remote autonomous system number
        """
        return pulumi.get(self, "remote_as")

    @_builtins.property
    @pulumi.getter(name="remoteAsVariable")
    def remote_as_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "remote_as_variable")

    @_builtins.property
    @pulumi.getter(name="sendCommunity")
    def send_community(self) -> _builtins.bool:
        """
        Send community attribute
        """
        return pulumi.get(self, "send_community")

    @_builtins.property
    @pulumi.getter(name="sendCommunityVariable")
    def send_community_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "send_community_variable")

    @_builtins.property
    @pulumi.getter(name="sendExtendedCommunity")
    def send_extended_community(self) -> _builtins.bool:
        """
        Send extended community attribute
        """
        return pulumi.get(self, "send_extended_community")

    @_builtins.property
    @pulumi.getter(name="sendExtendedCommunityVariable")
    def send_extended_community_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "send_extended_community_variable")

    @_builtins.property
    @pulumi.getter(name="sendLabel")
    def send_label(self) -> _builtins.bool:
        """
        Send label
        """
        return pulumi.get(self, "send_label")

    @_builtins.property
    @pulumi.getter
    def shutdown(self) -> _builtins.bool:
        """
        Enable or disable a BGP neighbor
        """
        return pulumi.get(self, "shutdown")

    @_builtins.property
    @pulumi.getter(name="shutdownVariable")
    def shutdown_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "shutdown_variable")

    @_builtins.property
    @pulumi.getter(name="updateSourceInterface")
    def update_source_interface(self) -> _builtins.str:
        """
        Source interface name for BGP neighbor
        """
        return pulumi.get(self, "update_source_interface")

    @_builtins.property
    @pulumi.getter(name="updateSourceInterfaceVariable")
    def update_source_interface_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "update_source_interface_variable")


@pulumi.output_type
class GetTransportRoutingBgpFeatureIpv4NeighborAddressFamilyResult(dict):
    def __init__(__self__, *,
                 disable_peer_max_number_of_prefixes: _builtins.int,
                 disable_peer_max_number_of_prefixes_variable: _builtins.str,
                 disable_peer_threshold: _builtins.int,
                 disable_peer_threshold_variable: _builtins.str,
                 family_type: _builtins.str,
                 in_route_policy_id: _builtins.str,
                 out_route_policy_id: _builtins.str,
                 policy_type: _builtins.str,
                 restart_interval: _builtins.int,
                 restart_interval_variable: _builtins.str,
                 restart_max_number_of_prefixes: _builtins.int,
                 restart_max_number_of_prefixes_variable: _builtins.str,
                 restart_threshold: _builtins.int,
                 restart_threshold_variable: _builtins.str,
                 warning_message_max_number_of_prefixes: _builtins.int,
                 warning_message_max_number_of_prefixes_variable: _builtins.str,
                 warning_message_threshold: _builtins.int,
                 warning_message_threshold_variable: _builtins.str):
        """
        :param _builtins.int disable_peer_max_number_of_prefixes: Set maximum number of prefixes accepted from BGP peer
        :param _builtins.str disable_peer_max_number_of_prefixes_variable: Variable name
        :param _builtins.int disable_peer_threshold: Set threshold(1 to 100) at which to generate a warning message
        :param _builtins.str disable_peer_threshold_variable: Variable name
        :param _builtins.str family_type: Set IPv4 unicast address family
        :param _builtins.str policy_type: Neighbor received maximum prefix policy is disabled.
        :param _builtins.int restart_interval: Set the restart interval(minutes) when to restart BGP connection if threshold is exceeded
        :param _builtins.str restart_interval_variable: Variable name
        :param _builtins.int restart_max_number_of_prefixes: Set maximum number of prefixes accepted from BGP peer
        :param _builtins.str restart_max_number_of_prefixes_variable: Variable name
        :param _builtins.int restart_threshold: Set threshold(1 to 100) at which to generate a warning message
        :param _builtins.str restart_threshold_variable: Variable name
        :param _builtins.int warning_message_max_number_of_prefixes: Set maximum number of prefixes accepted from BGP peer
        :param _builtins.str warning_message_max_number_of_prefixes_variable: Variable name
        :param _builtins.int warning_message_threshold: Set threshold(1 to 100) at which to generate a warning message
        :param _builtins.str warning_message_threshold_variable: Variable name
        """
        pulumi.set(__self__, "disable_peer_max_number_of_prefixes", disable_peer_max_number_of_prefixes)
        pulumi.set(__self__, "disable_peer_max_number_of_prefixes_variable", disable_peer_max_number_of_prefixes_variable)
        pulumi.set(__self__, "disable_peer_threshold", disable_peer_threshold)
        pulumi.set(__self__, "disable_peer_threshold_variable", disable_peer_threshold_variable)
        pulumi.set(__self__, "family_type", family_type)
        pulumi.set(__self__, "in_route_policy_id", in_route_policy_id)
        pulumi.set(__self__, "out_route_policy_id", out_route_policy_id)
        pulumi.set(__self__, "policy_type", policy_type)
        pulumi.set(__self__, "restart_interval", restart_interval)
        pulumi.set(__self__, "restart_interval_variable", restart_interval_variable)
        pulumi.set(__self__, "restart_max_number_of_prefixes", restart_max_number_of_prefixes)
        pulumi.set(__self__, "restart_max_number_of_prefixes_variable", restart_max_number_of_prefixes_variable)
        pulumi.set(__self__, "restart_threshold", restart_threshold)
        pulumi.set(__self__, "restart_threshold_variable", restart_threshold_variable)
        pulumi.set(__self__, "warning_message_max_number_of_prefixes", warning_message_max_number_of_prefixes)
        pulumi.set(__self__, "warning_message_max_number_of_prefixes_variable", warning_message_max_number_of_prefixes_variable)
        pulumi.set(__self__, "warning_message_threshold", warning_message_threshold)
        pulumi.set(__self__, "warning_message_threshold_variable", warning_message_threshold_variable)

    @_builtins.property
    @pulumi.getter(name="disablePeerMaxNumberOfPrefixes")
    def disable_peer_max_number_of_prefixes(self) -> _builtins.int:
        """
        Set maximum number of prefixes accepted from BGP peer
        """
        return pulumi.get(self, "disable_peer_max_number_of_prefixes")

    @_builtins.property
    @pulumi.getter(name="disablePeerMaxNumberOfPrefixesVariable")
    def disable_peer_max_number_of_prefixes_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "disable_peer_max_number_of_prefixes_variable")

    @_builtins.property
    @pulumi.getter(name="disablePeerThreshold")
    def disable_peer_threshold(self) -> _builtins.int:
        """
        Set threshold(1 to 100) at which to generate a warning message
        """
        return pulumi.get(self, "disable_peer_threshold")

    @_builtins.property
    @pulumi.getter(name="disablePeerThresholdVariable")
    def disable_peer_threshold_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "disable_peer_threshold_variable")

    @_builtins.property
    @pulumi.getter(name="familyType")
    def family_type(self) -> _builtins.str:
        """
        Set IPv4 unicast address family
        """
        return pulumi.get(self, "family_type")

    @_builtins.property
    @pulumi.getter(name="inRoutePolicyId")
    def in_route_policy_id(self) -> _builtins.str:
        return pulumi.get(self, "in_route_policy_id")

    @_builtins.property
    @pulumi.getter(name="outRoutePolicyId")
    def out_route_policy_id(self) -> _builtins.str:
        return pulumi.get(self, "out_route_policy_id")

    @_builtins.property
    @pulumi.getter(name="policyType")
    def policy_type(self) -> _builtins.str:
        """
        Neighbor received maximum prefix policy is disabled.
        """
        return pulumi.get(self, "policy_type")

    @_builtins.property
    @pulumi.getter(name="restartInterval")
    def restart_interval(self) -> _builtins.int:
        """
        Set the restart interval(minutes) when to restart BGP connection if threshold is exceeded
        """
        return pulumi.get(self, "restart_interval")

    @_builtins.property
    @pulumi.getter(name="restartIntervalVariable")
    def restart_interval_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "restart_interval_variable")

    @_builtins.property
    @pulumi.getter(name="restartMaxNumberOfPrefixes")
    def restart_max_number_of_prefixes(self) -> _builtins.int:
        """
        Set maximum number of prefixes accepted from BGP peer
        """
        return pulumi.get(self, "restart_max_number_of_prefixes")

    @_builtins.property
    @pulumi.getter(name="restartMaxNumberOfPrefixesVariable")
    def restart_max_number_of_prefixes_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "restart_max_number_of_prefixes_variable")

    @_builtins.property
    @pulumi.getter(name="restartThreshold")
    def restart_threshold(self) -> _builtins.int:
        """
        Set threshold(1 to 100) at which to generate a warning message
        """
        return pulumi.get(self, "restart_threshold")

    @_builtins.property
    @pulumi.getter(name="restartThresholdVariable")
    def restart_threshold_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "restart_threshold_variable")

    @_builtins.property
    @pulumi.getter(name="warningMessageMaxNumberOfPrefixes")
    def warning_message_max_number_of_prefixes(self) -> _builtins.int:
        """
        Set maximum number of prefixes accepted from BGP peer
        """
        return pulumi.get(self, "warning_message_max_number_of_prefixes")

    @_builtins.property
    @pulumi.getter(name="warningMessageMaxNumberOfPrefixesVariable")
    def warning_message_max_number_of_prefixes_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "warning_message_max_number_of_prefixes_variable")

    @_builtins.property
    @pulumi.getter(name="warningMessageThreshold")
    def warning_message_threshold(self) -> _builtins.int:
        """
        Set threshold(1 to 100) at which to generate a warning message
        """
        return pulumi.get(self, "warning_message_threshold")

    @_builtins.property
    @pulumi.getter(name="warningMessageThresholdVariable")
    def warning_message_threshold_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "warning_message_threshold_variable")


@pulumi.output_type
class GetTransportRoutingBgpFeatureIpv4NetworkResult(dict):
    def __init__(__self__, *,
                 network_address: _builtins.str,
                 network_address_variable: _builtins.str,
                 subnet_mask: _builtins.str,
                 subnet_mask_variable: _builtins.str):
        """
        :param _builtins.str network_address_variable: Variable name
        :param _builtins.str subnet_mask_variable: Variable name
        """
        pulumi.set(__self__, "network_address", network_address)
        pulumi.set(__self__, "network_address_variable", network_address_variable)
        pulumi.set(__self__, "subnet_mask", subnet_mask)
        pulumi.set(__self__, "subnet_mask_variable", subnet_mask_variable)

    @_builtins.property
    @pulumi.getter(name="networkAddress")
    def network_address(self) -> _builtins.str:
        return pulumi.get(self, "network_address")

    @_builtins.property
    @pulumi.getter(name="networkAddressVariable")
    def network_address_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "network_address_variable")

    @_builtins.property
    @pulumi.getter(name="subnetMask")
    def subnet_mask(self) -> _builtins.str:
        return pulumi.get(self, "subnet_mask")

    @_builtins.property
    @pulumi.getter(name="subnetMaskVariable")
    def subnet_mask_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "subnet_mask_variable")


@pulumi.output_type
class GetTransportRoutingBgpFeatureIpv4RedistributeResult(dict):
    def __init__(__self__, *,
                 protocol: _builtins.str,
                 protocol_variable: _builtins.str,
                 route_policy_id: _builtins.str):
        """
        :param _builtins.str protocol: Set the protocol to redistribute routes from
        :param _builtins.str protocol_variable: Variable name
        """
        pulumi.set(__self__, "protocol", protocol)
        pulumi.set(__self__, "protocol_variable", protocol_variable)
        pulumi.set(__self__, "route_policy_id", route_policy_id)

    @_builtins.property
    @pulumi.getter
    def protocol(self) -> _builtins.str:
        """
        Set the protocol to redistribute routes from
        """
        return pulumi.get(self, "protocol")

    @_builtins.property
    @pulumi.getter(name="protocolVariable")
    def protocol_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "protocol_variable")

    @_builtins.property
    @pulumi.getter(name="routePolicyId")
    def route_policy_id(self) -> _builtins.str:
        return pulumi.get(self, "route_policy_id")


@pulumi.output_type
class GetTransportRoutingBgpFeatureIpv6AggregateAddressResult(dict):
    def __init__(__self__, *,
                 aggregate_prefix: _builtins.str,
                 aggregate_prefix_variable: _builtins.str,
                 as_set_path: _builtins.bool,
                 as_set_path_variable: _builtins.str,
                 summary_only: _builtins.bool,
                 summary_only_variable: _builtins.str):
        """
        :param _builtins.str aggregate_prefix: Configure the IPv6 prefixes to aggregate
        :param _builtins.str aggregate_prefix_variable: Variable name
        :param _builtins.bool as_set_path: Set AS set path information
        :param _builtins.str as_set_path_variable: Variable name
        :param _builtins.bool summary_only: Filter out more specific routes from updates
        :param _builtins.str summary_only_variable: Variable name
        """
        pulumi.set(__self__, "aggregate_prefix", aggregate_prefix)
        pulumi.set(__self__, "aggregate_prefix_variable", aggregate_prefix_variable)
        pulumi.set(__self__, "as_set_path", as_set_path)
        pulumi.set(__self__, "as_set_path_variable", as_set_path_variable)
        pulumi.set(__self__, "summary_only", summary_only)
        pulumi.set(__self__, "summary_only_variable", summary_only_variable)

    @_builtins.property
    @pulumi.getter(name="aggregatePrefix")
    def aggregate_prefix(self) -> _builtins.str:
        """
        Configure the IPv6 prefixes to aggregate
        """
        return pulumi.get(self, "aggregate_prefix")

    @_builtins.property
    @pulumi.getter(name="aggregatePrefixVariable")
    def aggregate_prefix_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "aggregate_prefix_variable")

    @_builtins.property
    @pulumi.getter(name="asSetPath")
    def as_set_path(self) -> _builtins.bool:
        """
        Set AS set path information
        """
        return pulumi.get(self, "as_set_path")

    @_builtins.property
    @pulumi.getter(name="asSetPathVariable")
    def as_set_path_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "as_set_path_variable")

    @_builtins.property
    @pulumi.getter(name="summaryOnly")
    def summary_only(self) -> _builtins.bool:
        """
        Filter out more specific routes from updates
        """
        return pulumi.get(self, "summary_only")

    @_builtins.property
    @pulumi.getter(name="summaryOnlyVariable")
    def summary_only_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "summary_only_variable")


@pulumi.output_type
class GetTransportRoutingBgpFeatureIpv6NeighborResult(dict):
    def __init__(__self__, *,
                 address: _builtins.str,
                 address_families: Sequence['outputs.GetTransportRoutingBgpFeatureIpv6NeighborAddressFamilyResult'],
                 address_variable: _builtins.str,
                 allowas_in_number: _builtins.int,
                 allowas_in_number_variable: _builtins.str,
                 as_override: _builtins.bool,
                 as_override_variable: _builtins.str,
                 description: _builtins.str,
                 description_variable: _builtins.str,
                 ebgp_multihop: _builtins.int,
                 ebgp_multihop_variable: _builtins.str,
                 hold_time: _builtins.int,
                 hold_time_variable: _builtins.str,
                 keepalive_time: _builtins.int,
                 keepalive_time_variable: _builtins.str,
                 local_as: _builtins.int,
                 local_as_variable: _builtins.str,
                 next_hop_self: _builtins.bool,
                 next_hop_self_variable: _builtins.str,
                 password: _builtins.str,
                 password_variable: _builtins.str,
                 remote_as: _builtins.int,
                 remote_as_variable: _builtins.str,
                 send_community: _builtins.bool,
                 send_community_variable: _builtins.str,
                 send_extended_community: _builtins.bool,
                 send_extended_community_variable: _builtins.str,
                 shutdown: _builtins.bool,
                 shutdown_variable: _builtins.str,
                 update_source_interface: _builtins.str,
                 update_source_interface_variable: _builtins.str):
        """
        :param _builtins.str address: Set IPv6 neighbor address
        :param Sequence['GetTransportRoutingBgpFeatureIpv6NeighborAddressFamilyArgs'] address_families: Set IPv6 BGP address family
        :param _builtins.str address_variable: Variable name
        :param _builtins.int allowas_in_number: The number of accept as-path with my AS present in it
        :param _builtins.str allowas_in_number_variable: Variable name
        :param _builtins.bool as_override: Override matching AS-number while sending update
        :param _builtins.str as_override_variable: Variable name
        :param _builtins.str description: Set description
        :param _builtins.str description_variable: Variable name
        :param _builtins.int ebgp_multihop: Set TTL value for peers that are not directly connected
        :param _builtins.str ebgp_multihop_variable: Variable name
        :param _builtins.int hold_time: Interval (seconds) not receiving a keepalive message declares a BGP peer down
        :param _builtins.str hold_time_variable: Variable name
        :param _builtins.int keepalive_time: Interval (seconds) of keepalive messages sent to its BGP peer
        :param _builtins.str keepalive_time_variable: Variable name
        :param _builtins.int local_as: Set local autonomous system number,Local-AS cannot have the local BGP protocol AS number or the AS number of the remote peer.The local-as is valid only if the peer is a true eBGP peer. It does not work for two peers in different sub-ASs in a confederation.
        :param _builtins.str local_as_variable: Variable name
        :param _builtins.bool next_hop_self: Set router to be next hop for routes advertised to neighbor
        :param _builtins.str next_hop_self_variable: Variable name
        :param _builtins.str password: Set MD5 password on TCP connection with BGP peer
        :param _builtins.str password_variable: Variable name
        :param _builtins.int remote_as: Set remote autonomous system number
        :param _builtins.str remote_as_variable: Variable name
        :param _builtins.bool send_community: Send community attribute
        :param _builtins.str send_community_variable: Variable name
        :param _builtins.bool send_extended_community: Send extended community attribute
        :param _builtins.str send_extended_community_variable: Variable name
        :param _builtins.bool shutdown: Enable or disable a BGP neighbor
        :param _builtins.str shutdown_variable: Variable name
        :param _builtins.str update_source_interface: Source interface name for BGP neighbor
        :param _builtins.str update_source_interface_variable: Variable name
        """
        pulumi.set(__self__, "address", address)
        pulumi.set(__self__, "address_families", address_families)
        pulumi.set(__self__, "address_variable", address_variable)
        pulumi.set(__self__, "allowas_in_number", allowas_in_number)
        pulumi.set(__self__, "allowas_in_number_variable", allowas_in_number_variable)
        pulumi.set(__self__, "as_override", as_override)
        pulumi.set(__self__, "as_override_variable", as_override_variable)
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "description_variable", description_variable)
        pulumi.set(__self__, "ebgp_multihop", ebgp_multihop)
        pulumi.set(__self__, "ebgp_multihop_variable", ebgp_multihop_variable)
        pulumi.set(__self__, "hold_time", hold_time)
        pulumi.set(__self__, "hold_time_variable", hold_time_variable)
        pulumi.set(__self__, "keepalive_time", keepalive_time)
        pulumi.set(__self__, "keepalive_time_variable", keepalive_time_variable)
        pulumi.set(__self__, "local_as", local_as)
        pulumi.set(__self__, "local_as_variable", local_as_variable)
        pulumi.set(__self__, "next_hop_self", next_hop_self)
        pulumi.set(__self__, "next_hop_self_variable", next_hop_self_variable)
        pulumi.set(__self__, "password", password)
        pulumi.set(__self__, "password_variable", password_variable)
        pulumi.set(__self__, "remote_as", remote_as)
        pulumi.set(__self__, "remote_as_variable", remote_as_variable)
        pulumi.set(__self__, "send_community", send_community)
        pulumi.set(__self__, "send_community_variable", send_community_variable)
        pulumi.set(__self__, "send_extended_community", send_extended_community)
        pulumi.set(__self__, "send_extended_community_variable", send_extended_community_variable)
        pulumi.set(__self__, "shutdown", shutdown)
        pulumi.set(__self__, "shutdown_variable", shutdown_variable)
        pulumi.set(__self__, "update_source_interface", update_source_interface)
        pulumi.set(__self__, "update_source_interface_variable", update_source_interface_variable)

    @_builtins.property
    @pulumi.getter
    def address(self) -> _builtins.str:
        """
        Set IPv6 neighbor address
        """
        return pulumi.get(self, "address")

    @_builtins.property
    @pulumi.getter(name="addressFamilies")
    def address_families(self) -> Sequence['outputs.GetTransportRoutingBgpFeatureIpv6NeighborAddressFamilyResult']:
        """
        Set IPv6 BGP address family
        """
        return pulumi.get(self, "address_families")

    @_builtins.property
    @pulumi.getter(name="addressVariable")
    def address_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "address_variable")

    @_builtins.property
    @pulumi.getter(name="allowasInNumber")
    def allowas_in_number(self) -> _builtins.int:
        """
        The number of accept as-path with my AS present in it
        """
        return pulumi.get(self, "allowas_in_number")

    @_builtins.property
    @pulumi.getter(name="allowasInNumberVariable")
    def allowas_in_number_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "allowas_in_number_variable")

    @_builtins.property
    @pulumi.getter(name="asOverride")
    def as_override(self) -> _builtins.bool:
        """
        Override matching AS-number while sending update
        """
        return pulumi.get(self, "as_override")

    @_builtins.property
    @pulumi.getter(name="asOverrideVariable")
    def as_override_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "as_override_variable")

    @_builtins.property
    @pulumi.getter
    def description(self) -> _builtins.str:
        """
        Set description
        """
        return pulumi.get(self, "description")

    @_builtins.property
    @pulumi.getter(name="descriptionVariable")
    def description_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "description_variable")

    @_builtins.property
    @pulumi.getter(name="ebgpMultihop")
    def ebgp_multihop(self) -> _builtins.int:
        """
        Set TTL value for peers that are not directly connected
        """
        return pulumi.get(self, "ebgp_multihop")

    @_builtins.property
    @pulumi.getter(name="ebgpMultihopVariable")
    def ebgp_multihop_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "ebgp_multihop_variable")

    @_builtins.property
    @pulumi.getter(name="holdTime")
    def hold_time(self) -> _builtins.int:
        """
        Interval (seconds) not receiving a keepalive message declares a BGP peer down
        """
        return pulumi.get(self, "hold_time")

    @_builtins.property
    @pulumi.getter(name="holdTimeVariable")
    def hold_time_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "hold_time_variable")

    @_builtins.property
    @pulumi.getter(name="keepaliveTime")
    def keepalive_time(self) -> _builtins.int:
        """
        Interval (seconds) of keepalive messages sent to its BGP peer
        """
        return pulumi.get(self, "keepalive_time")

    @_builtins.property
    @pulumi.getter(name="keepaliveTimeVariable")
    def keepalive_time_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "keepalive_time_variable")

    @_builtins.property
    @pulumi.getter(name="localAs")
    def local_as(self) -> _builtins.int:
        """
        Set local autonomous system number,Local-AS cannot have the local BGP protocol AS number or the AS number of the remote peer.The local-as is valid only if the peer is a true eBGP peer. It does not work for two peers in different sub-ASs in a confederation.
        """
        return pulumi.get(self, "local_as")

    @_builtins.property
    @pulumi.getter(name="localAsVariable")
    def local_as_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "local_as_variable")

    @_builtins.property
    @pulumi.getter(name="nextHopSelf")
    def next_hop_self(self) -> _builtins.bool:
        """
        Set router to be next hop for routes advertised to neighbor
        """
        return pulumi.get(self, "next_hop_self")

    @_builtins.property
    @pulumi.getter(name="nextHopSelfVariable")
    def next_hop_self_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "next_hop_self_variable")

    @_builtins.property
    @pulumi.getter
    def password(self) -> _builtins.str:
        """
        Set MD5 password on TCP connection with BGP peer
        """
        return pulumi.get(self, "password")

    @_builtins.property
    @pulumi.getter(name="passwordVariable")
    def password_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "password_variable")

    @_builtins.property
    @pulumi.getter(name="remoteAs")
    def remote_as(self) -> _builtins.int:
        """
        Set remote autonomous system number
        """
        return pulumi.get(self, "remote_as")

    @_builtins.property
    @pulumi.getter(name="remoteAsVariable")
    def remote_as_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "remote_as_variable")

    @_builtins.property
    @pulumi.getter(name="sendCommunity")
    def send_community(self) -> _builtins.bool:
        """
        Send community attribute
        """
        return pulumi.get(self, "send_community")

    @_builtins.property
    @pulumi.getter(name="sendCommunityVariable")
    def send_community_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "send_community_variable")

    @_builtins.property
    @pulumi.getter(name="sendExtendedCommunity")
    def send_extended_community(self) -> _builtins.bool:
        """
        Send extended community attribute
        """
        return pulumi.get(self, "send_extended_community")

    @_builtins.property
    @pulumi.getter(name="sendExtendedCommunityVariable")
    def send_extended_community_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "send_extended_community_variable")

    @_builtins.property
    @pulumi.getter
    def shutdown(self) -> _builtins.bool:
        """
        Enable or disable a BGP neighbor
        """
        return pulumi.get(self, "shutdown")

    @_builtins.property
    @pulumi.getter(name="shutdownVariable")
    def shutdown_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "shutdown_variable")

    @_builtins.property
    @pulumi.getter(name="updateSourceInterface")
    def update_source_interface(self) -> _builtins.str:
        """
        Source interface name for BGP neighbor
        """
        return pulumi.get(self, "update_source_interface")

    @_builtins.property
    @pulumi.getter(name="updateSourceInterfaceVariable")
    def update_source_interface_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "update_source_interface_variable")


@pulumi.output_type
class GetTransportRoutingBgpFeatureIpv6NeighborAddressFamilyResult(dict):
    def __init__(__self__, *,
                 family_type: _builtins.str,
                 in_route_policy_id: _builtins.str,
                 max_number_of_prefixes: _builtins.int,
                 max_number_of_prefixes_variable: _builtins.str,
                 out_route_policy_id: _builtins.str,
                 policy_type: _builtins.str,
                 restart_interval: _builtins.int,
                 restart_interval_variable: _builtins.str,
                 threshold: _builtins.int,
                 threshold_variable: _builtins.str):
        """
        :param _builtins.str family_type: Set IPv6 unicast address family
        :param _builtins.int max_number_of_prefixes: Set maximum number of prefixes accepted from BGP peer
        :param _builtins.str max_number_of_prefixes_variable: Variable name
        :param _builtins.str policy_type: Neighbor received maximum prefix policy is disabled.
        :param _builtins.int restart_interval: Set the restart interval(minutes) when to restart BGP connection if threshold is exceeded
        :param _builtins.str restart_interval_variable: Variable name
        :param _builtins.int threshold: Set threshold(1 to 100) at which to generate a warning message
        :param _builtins.str threshold_variable: Variable name
        """
        pulumi.set(__self__, "family_type", family_type)
        pulumi.set(__self__, "in_route_policy_id", in_route_policy_id)
        pulumi.set(__self__, "max_number_of_prefixes", max_number_of_prefixes)
        pulumi.set(__self__, "max_number_of_prefixes_variable", max_number_of_prefixes_variable)
        pulumi.set(__self__, "out_route_policy_id", out_route_policy_id)
        pulumi.set(__self__, "policy_type", policy_type)
        pulumi.set(__self__, "restart_interval", restart_interval)
        pulumi.set(__self__, "restart_interval_variable", restart_interval_variable)
        pulumi.set(__self__, "threshold", threshold)
        pulumi.set(__self__, "threshold_variable", threshold_variable)

    @_builtins.property
    @pulumi.getter(name="familyType")
    def family_type(self) -> _builtins.str:
        """
        Set IPv6 unicast address family
        """
        return pulumi.get(self, "family_type")

    @_builtins.property
    @pulumi.getter(name="inRoutePolicyId")
    def in_route_policy_id(self) -> _builtins.str:
        return pulumi.get(self, "in_route_policy_id")

    @_builtins.property
    @pulumi.getter(name="maxNumberOfPrefixes")
    def max_number_of_prefixes(self) -> _builtins.int:
        """
        Set maximum number of prefixes accepted from BGP peer
        """
        return pulumi.get(self, "max_number_of_prefixes")

    @_builtins.property
    @pulumi.getter(name="maxNumberOfPrefixesVariable")
    def max_number_of_prefixes_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "max_number_of_prefixes_variable")

    @_builtins.property
    @pulumi.getter(name="outRoutePolicyId")
    def out_route_policy_id(self) -> _builtins.str:
        return pulumi.get(self, "out_route_policy_id")

    @_builtins.property
    @pulumi.getter(name="policyType")
    def policy_type(self) -> _builtins.str:
        """
        Neighbor received maximum prefix policy is disabled.
        """
        return pulumi.get(self, "policy_type")

    @_builtins.property
    @pulumi.getter(name="restartInterval")
    def restart_interval(self) -> _builtins.int:
        """
        Set the restart interval(minutes) when to restart BGP connection if threshold is exceeded
        """
        return pulumi.get(self, "restart_interval")

    @_builtins.property
    @pulumi.getter(name="restartIntervalVariable")
    def restart_interval_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "restart_interval_variable")

    @_builtins.property
    @pulumi.getter
    def threshold(self) -> _builtins.int:
        """
        Set threshold(1 to 100) at which to generate a warning message
        """
        return pulumi.get(self, "threshold")

    @_builtins.property
    @pulumi.getter(name="thresholdVariable")
    def threshold_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "threshold_variable")


@pulumi.output_type
class GetTransportRoutingBgpFeatureIpv6NetworkResult(dict):
    def __init__(__self__, *,
                 network_prefix: _builtins.str,
                 network_prefix_variable: _builtins.str):
        """
        :param _builtins.str network_prefix: Configure the prefixes for BGP to announce
        :param _builtins.str network_prefix_variable: Variable name
        """
        pulumi.set(__self__, "network_prefix", network_prefix)
        pulumi.set(__self__, "network_prefix_variable", network_prefix_variable)

    @_builtins.property
    @pulumi.getter(name="networkPrefix")
    def network_prefix(self) -> _builtins.str:
        """
        Configure the prefixes for BGP to announce
        """
        return pulumi.get(self, "network_prefix")

    @_builtins.property
    @pulumi.getter(name="networkPrefixVariable")
    def network_prefix_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "network_prefix_variable")


@pulumi.output_type
class GetTransportRoutingBgpFeatureIpv6RedistributeResult(dict):
    def __init__(__self__, *,
                 protocol: _builtins.str,
                 protocol_variable: _builtins.str,
                 route_policy_id: _builtins.str):
        """
        :param _builtins.str protocol: Set the protocol to redistribute routes from
        :param _builtins.str protocol_variable: Variable name
        """
        pulumi.set(__self__, "protocol", protocol)
        pulumi.set(__self__, "protocol_variable", protocol_variable)
        pulumi.set(__self__, "route_policy_id", route_policy_id)

    @_builtins.property
    @pulumi.getter
    def protocol(self) -> _builtins.str:
        """
        Set the protocol to redistribute routes from
        """
        return pulumi.get(self, "protocol")

    @_builtins.property
    @pulumi.getter(name="protocolVariable")
    def protocol_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "protocol_variable")

    @_builtins.property
    @pulumi.getter(name="routePolicyId")
    def route_policy_id(self) -> _builtins.str:
        return pulumi.get(self, "route_policy_id")


@pulumi.output_type
class GetTransportRoutingBgpFeatureMplsInterfaceResult(dict):
    def __init__(__self__, *,
                 interface_name: _builtins.str,
                 interface_name_variable: _builtins.str):
        """
        :param _builtins.str interface_name: Interface Name
        :param _builtins.str interface_name_variable: Variable name
        """
        pulumi.set(__self__, "interface_name", interface_name)
        pulumi.set(__self__, "interface_name_variable", interface_name_variable)

    @_builtins.property
    @pulumi.getter(name="interfaceName")
    def interface_name(self) -> _builtins.str:
        """
        Interface Name
        """
        return pulumi.get(self, "interface_name")

    @_builtins.property
    @pulumi.getter(name="interfaceNameVariable")
    def interface_name_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "interface_name_variable")


@pulumi.output_type
class GetTransportRoutingOspfFeatureAreaResult(dict):
    def __init__(__self__, *,
                 area_number: _builtins.int,
                 area_number_variable: _builtins.str,
                 area_type: _builtins.str,
                 interfaces: Sequence['outputs.GetTransportRoutingOspfFeatureAreaInterfaceResult'],
                 no_summary: _builtins.bool,
                 no_summary_variable: _builtins.str,
                 ranges: Sequence['outputs.GetTransportRoutingOspfFeatureAreaRangeResult']):
        """
        :param _builtins.int area_number: Set OSPF area number
        :param _builtins.str area_number_variable: Variable name
        :param _builtins.str area_type: set the area type
        :param Sequence['GetTransportRoutingOspfFeatureAreaInterfaceArgs'] interfaces: Set OSPF interface parameters
        :param _builtins.bool no_summary: Do not inject interarea routes into STUB or NSSA
        :param _builtins.str no_summary_variable: Variable name
        :param Sequence['GetTransportRoutingOspfFeatureAreaRangeArgs'] ranges: Summarize OSPF routes at an area boundary
        """
        pulumi.set(__self__, "area_number", area_number)
        pulumi.set(__self__, "area_number_variable", area_number_variable)
        pulumi.set(__self__, "area_type", area_type)
        pulumi.set(__self__, "interfaces", interfaces)
        pulumi.set(__self__, "no_summary", no_summary)
        pulumi.set(__self__, "no_summary_variable", no_summary_variable)
        pulumi.set(__self__, "ranges", ranges)

    @_builtins.property
    @pulumi.getter(name="areaNumber")
    def area_number(self) -> _builtins.int:
        """
        Set OSPF area number
        """
        return pulumi.get(self, "area_number")

    @_builtins.property
    @pulumi.getter(name="areaNumberVariable")
    def area_number_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "area_number_variable")

    @_builtins.property
    @pulumi.getter(name="areaType")
    def area_type(self) -> _builtins.str:
        """
        set the area type
        """
        return pulumi.get(self, "area_type")

    @_builtins.property
    @pulumi.getter
    def interfaces(self) -> Sequence['outputs.GetTransportRoutingOspfFeatureAreaInterfaceResult']:
        """
        Set OSPF interface parameters
        """
        return pulumi.get(self, "interfaces")

    @_builtins.property
    @pulumi.getter(name="noSummary")
    def no_summary(self) -> _builtins.bool:
        """
        Do not inject interarea routes into STUB or NSSA
        """
        return pulumi.get(self, "no_summary")

    @_builtins.property
    @pulumi.getter(name="noSummaryVariable")
    def no_summary_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "no_summary_variable")

    @_builtins.property
    @pulumi.getter
    def ranges(self) -> Sequence['outputs.GetTransportRoutingOspfFeatureAreaRangeResult']:
        """
        Summarize OSPF routes at an area boundary
        """
        return pulumi.get(self, "ranges")


@pulumi.output_type
class GetTransportRoutingOspfFeatureAreaInterfaceResult(dict):
    def __init__(__self__, *,
                 authentication_type: _builtins.str,
                 authentication_type_variable: _builtins.str,
                 cost: _builtins.int,
                 cost_variable: _builtins.str,
                 dead_interval: _builtins.int,
                 dead_interval_variable: _builtins.str,
                 designated_router_priority: _builtins.int,
                 designated_router_priority_variable: _builtins.str,
                 hello_interval: _builtins.int,
                 hello_interval_variable: _builtins.str,
                 lsa_retransmit_interval: _builtins.int,
                 lsa_retransmit_interval_variable: _builtins.str,
                 message_digest_key: _builtins.str,
                 message_digest_key_id: _builtins.int,
                 message_digest_key_id_variable: _builtins.str,
                 message_digest_key_variable: _builtins.str,
                 name: _builtins.str,
                 name_variable: _builtins.str,
                 network_type: _builtins.str,
                 network_type_variable: _builtins.str,
                 passive_interface: _builtins.bool,
                 passive_interface_variable: _builtins.str):
        """
        :param _builtins.str authentication_type: Set OSPF interface authentication type
        :param _builtins.str authentication_type_variable: Variable name
        :param _builtins.int cost: Set cost of OSPF interface
        :param _builtins.str cost_variable: Variable name
        :param _builtins.int dead_interval: Set interval after which neighbor is declared to be down
        :param _builtins.str dead_interval_variable: Variable name
        :param _builtins.int designated_router_priority: Set router’s priority to be elected as designated router
        :param _builtins.str designated_router_priority_variable: Variable name
        :param _builtins.int hello_interval: Set interval between OSPF hello packets
        :param _builtins.str hello_interval_variable: Variable name
        :param _builtins.int lsa_retransmit_interval: Set time between retransmitting LSAs
        :param _builtins.str lsa_retransmit_interval_variable: Variable name
        :param _builtins.str message_digest_key: Set MD5 authentication key
        :param _builtins.int message_digest_key_id: Set MD5 message digest key
        :param _builtins.str message_digest_key_id_variable: Variable name
        :param _builtins.str message_digest_key_variable: Variable name
        :param _builtins.str name: Set interface name
        :param _builtins.str name_variable: Variable name
        :param _builtins.str network_type: Set the OSPF network type
        :param _builtins.str network_type_variable: Variable name
        :param _builtins.bool passive_interface: Set the interface to advertise its address, but not to actively run OSPF
        :param _builtins.str passive_interface_variable: Variable name
        """
        pulumi.set(__self__, "authentication_type", authentication_type)
        pulumi.set(__self__, "authentication_type_variable", authentication_type_variable)
        pulumi.set(__self__, "cost", cost)
        pulumi.set(__self__, "cost_variable", cost_variable)
        pulumi.set(__self__, "dead_interval", dead_interval)
        pulumi.set(__self__, "dead_interval_variable", dead_interval_variable)
        pulumi.set(__self__, "designated_router_priority", designated_router_priority)
        pulumi.set(__self__, "designated_router_priority_variable", designated_router_priority_variable)
        pulumi.set(__self__, "hello_interval", hello_interval)
        pulumi.set(__self__, "hello_interval_variable", hello_interval_variable)
        pulumi.set(__self__, "lsa_retransmit_interval", lsa_retransmit_interval)
        pulumi.set(__self__, "lsa_retransmit_interval_variable", lsa_retransmit_interval_variable)
        pulumi.set(__self__, "message_digest_key", message_digest_key)
        pulumi.set(__self__, "message_digest_key_id", message_digest_key_id)
        pulumi.set(__self__, "message_digest_key_id_variable", message_digest_key_id_variable)
        pulumi.set(__self__, "message_digest_key_variable", message_digest_key_variable)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "name_variable", name_variable)
        pulumi.set(__self__, "network_type", network_type)
        pulumi.set(__self__, "network_type_variable", network_type_variable)
        pulumi.set(__self__, "passive_interface", passive_interface)
        pulumi.set(__self__, "passive_interface_variable", passive_interface_variable)

    @_builtins.property
    @pulumi.getter(name="authenticationType")
    def authentication_type(self) -> _builtins.str:
        """
        Set OSPF interface authentication type
        """
        return pulumi.get(self, "authentication_type")

    @_builtins.property
    @pulumi.getter(name="authenticationTypeVariable")
    def authentication_type_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "authentication_type_variable")

    @_builtins.property
    @pulumi.getter
    def cost(self) -> _builtins.int:
        """
        Set cost of OSPF interface
        """
        return pulumi.get(self, "cost")

    @_builtins.property
    @pulumi.getter(name="costVariable")
    def cost_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "cost_variable")

    @_builtins.property
    @pulumi.getter(name="deadInterval")
    def dead_interval(self) -> _builtins.int:
        """
        Set interval after which neighbor is declared to be down
        """
        return pulumi.get(self, "dead_interval")

    @_builtins.property
    @pulumi.getter(name="deadIntervalVariable")
    def dead_interval_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "dead_interval_variable")

    @_builtins.property
    @pulumi.getter(name="designatedRouterPriority")
    def designated_router_priority(self) -> _builtins.int:
        """
        Set router’s priority to be elected as designated router
        """
        return pulumi.get(self, "designated_router_priority")

    @_builtins.property
    @pulumi.getter(name="designatedRouterPriorityVariable")
    def designated_router_priority_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "designated_router_priority_variable")

    @_builtins.property
    @pulumi.getter(name="helloInterval")
    def hello_interval(self) -> _builtins.int:
        """
        Set interval between OSPF hello packets
        """
        return pulumi.get(self, "hello_interval")

    @_builtins.property
    @pulumi.getter(name="helloIntervalVariable")
    def hello_interval_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "hello_interval_variable")

    @_builtins.property
    @pulumi.getter(name="lsaRetransmitInterval")
    def lsa_retransmit_interval(self) -> _builtins.int:
        """
        Set time between retransmitting LSAs
        """
        return pulumi.get(self, "lsa_retransmit_interval")

    @_builtins.property
    @pulumi.getter(name="lsaRetransmitIntervalVariable")
    def lsa_retransmit_interval_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "lsa_retransmit_interval_variable")

    @_builtins.property
    @pulumi.getter(name="messageDigestKey")
    def message_digest_key(self) -> _builtins.str:
        """
        Set MD5 authentication key
        """
        return pulumi.get(self, "message_digest_key")

    @_builtins.property
    @pulumi.getter(name="messageDigestKeyId")
    def message_digest_key_id(self) -> _builtins.int:
        """
        Set MD5 message digest key
        """
        return pulumi.get(self, "message_digest_key_id")

    @_builtins.property
    @pulumi.getter(name="messageDigestKeyIdVariable")
    def message_digest_key_id_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "message_digest_key_id_variable")

    @_builtins.property
    @pulumi.getter(name="messageDigestKeyVariable")
    def message_digest_key_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "message_digest_key_variable")

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        """
        Set interface name
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter(name="nameVariable")
    def name_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "name_variable")

    @_builtins.property
    @pulumi.getter(name="networkType")
    def network_type(self) -> _builtins.str:
        """
        Set the OSPF network type
        """
        return pulumi.get(self, "network_type")

    @_builtins.property
    @pulumi.getter(name="networkTypeVariable")
    def network_type_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "network_type_variable")

    @_builtins.property
    @pulumi.getter(name="passiveInterface")
    def passive_interface(self) -> _builtins.bool:
        """
        Set the interface to advertise its address, but not to actively run OSPF
        """
        return pulumi.get(self, "passive_interface")

    @_builtins.property
    @pulumi.getter(name="passiveInterfaceVariable")
    def passive_interface_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "passive_interface_variable")


@pulumi.output_type
class GetTransportRoutingOspfFeatureAreaRangeResult(dict):
    def __init__(__self__, *,
                 cost: _builtins.int,
                 cost_variable: _builtins.str,
                 ip_address: _builtins.str,
                 ip_address_variable: _builtins.str,
                 no_advertise: _builtins.bool,
                 no_advertise_variable: _builtins.str,
                 subnet_mask: _builtins.str,
                 subnet_mask_variable: _builtins.str):
        """
        :param _builtins.int cost: Set cost for this range
        :param _builtins.str cost_variable: Variable name
        :param _builtins.str ip_address: IP Address
        :param _builtins.str ip_address_variable: Variable name
        :param _builtins.bool no_advertise: Do not advertise this range
        :param _builtins.str no_advertise_variable: Variable name
        :param _builtins.str subnet_mask: Subnet Mask
        :param _builtins.str subnet_mask_variable: Variable name
        """
        pulumi.set(__self__, "cost", cost)
        pulumi.set(__self__, "cost_variable", cost_variable)
        pulumi.set(__self__, "ip_address", ip_address)
        pulumi.set(__self__, "ip_address_variable", ip_address_variable)
        pulumi.set(__self__, "no_advertise", no_advertise)
        pulumi.set(__self__, "no_advertise_variable", no_advertise_variable)
        pulumi.set(__self__, "subnet_mask", subnet_mask)
        pulumi.set(__self__, "subnet_mask_variable", subnet_mask_variable)

    @_builtins.property
    @pulumi.getter
    def cost(self) -> _builtins.int:
        """
        Set cost for this range
        """
        return pulumi.get(self, "cost")

    @_builtins.property
    @pulumi.getter(name="costVariable")
    def cost_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "cost_variable")

    @_builtins.property
    @pulumi.getter(name="ipAddress")
    def ip_address(self) -> _builtins.str:
        """
        IP Address
        """
        return pulumi.get(self, "ip_address")

    @_builtins.property
    @pulumi.getter(name="ipAddressVariable")
    def ip_address_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "ip_address_variable")

    @_builtins.property
    @pulumi.getter(name="noAdvertise")
    def no_advertise(self) -> _builtins.bool:
        """
        Do not advertise this range
        """
        return pulumi.get(self, "no_advertise")

    @_builtins.property
    @pulumi.getter(name="noAdvertiseVariable")
    def no_advertise_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "no_advertise_variable")

    @_builtins.property
    @pulumi.getter(name="subnetMask")
    def subnet_mask(self) -> _builtins.str:
        """
        Subnet Mask
        """
        return pulumi.get(self, "subnet_mask")

    @_builtins.property
    @pulumi.getter(name="subnetMaskVariable")
    def subnet_mask_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "subnet_mask_variable")


@pulumi.output_type
class GetTransportRoutingOspfFeatureRedistributeResult(dict):
    def __init__(__self__, *,
                 nat_dia: _builtins.bool,
                 nat_dia_variable: _builtins.str,
                 protocol: _builtins.str,
                 protocol_variable: _builtins.str,
                 route_policy_id: _builtins.str):
        """
        :param _builtins.bool nat_dia: Enable NAT DIA for redistributed routes
        :param _builtins.str nat_dia_variable: Variable name
        :param _builtins.str protocol: Set the protocol
        :param _builtins.str protocol_variable: Variable name
        """
        pulumi.set(__self__, "nat_dia", nat_dia)
        pulumi.set(__self__, "nat_dia_variable", nat_dia_variable)
        pulumi.set(__self__, "protocol", protocol)
        pulumi.set(__self__, "protocol_variable", protocol_variable)
        pulumi.set(__self__, "route_policy_id", route_policy_id)

    @_builtins.property
    @pulumi.getter(name="natDia")
    def nat_dia(self) -> _builtins.bool:
        """
        Enable NAT DIA for redistributed routes
        """
        return pulumi.get(self, "nat_dia")

    @_builtins.property
    @pulumi.getter(name="natDiaVariable")
    def nat_dia_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "nat_dia_variable")

    @_builtins.property
    @pulumi.getter
    def protocol(self) -> _builtins.str:
        """
        Set the protocol
        """
        return pulumi.get(self, "protocol")

    @_builtins.property
    @pulumi.getter(name="protocolVariable")
    def protocol_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "protocol_variable")

    @_builtins.property
    @pulumi.getter(name="routePolicyId")
    def route_policy_id(self) -> _builtins.str:
        return pulumi.get(self, "route_policy_id")


@pulumi.output_type
class GetTransportRoutingOspfFeatureRouterLsaResult(dict):
    def __init__(__self__, *,
                 time: _builtins.int,
                 time_variable: _builtins.str,
                 type: _builtins.str):
        """
        :param _builtins.int time: Set how long to advertise maximum metric after router starts up
        :param _builtins.str time_variable: Variable name
        :param _builtins.str type: Set the router LSA advertisement type
        """
        pulumi.set(__self__, "time", time)
        pulumi.set(__self__, "time_variable", time_variable)
        pulumi.set(__self__, "type", type)

    @_builtins.property
    @pulumi.getter
    def time(self) -> _builtins.int:
        """
        Set how long to advertise maximum metric after router starts up
        """
        return pulumi.get(self, "time")

    @_builtins.property
    @pulumi.getter(name="timeVariable")
    def time_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "time_variable")

    @_builtins.property
    @pulumi.getter
    def type(self) -> _builtins.str:
        """
        Set the router LSA advertisement type
        """
        return pulumi.get(self, "type")


@pulumi.output_type
class GetTransportRoutingOspfv3Ipv4FeatureAreaResult(dict):
    def __init__(__self__, *,
                 always_translate: _builtins.bool,
                 always_translate_variable: _builtins.str,
                 area_number: _builtins.int,
                 area_number_variable: _builtins.str,
                 area_type: _builtins.str,
                 interfaces: Sequence['outputs.GetTransportRoutingOspfv3Ipv4FeatureAreaInterfaceResult'],
                 no_summary: _builtins.bool,
                 no_summary_variable: _builtins.str,
                 ranges: Sequence['outputs.GetTransportRoutingOspfv3Ipv4FeatureAreaRangeResult']):
        """
        :param _builtins.bool always_translate: Always translate type7 LSAs
        :param _builtins.str always_translate_variable: Variable name
        :param _builtins.int area_number: Set OSPF area number
        :param _builtins.str area_number_variable: Variable name
        :param _builtins.str area_type: stub area type
        :param Sequence['GetTransportRoutingOspfv3Ipv4FeatureAreaInterfaceArgs'] interfaces: Set OSPF interface parameters
        :param _builtins.bool no_summary: Do not inject inter-area routes
        :param _builtins.str no_summary_variable: Variable name
        :param Sequence['GetTransportRoutingOspfv3Ipv4FeatureAreaRangeArgs'] ranges: Summarize OSPF routes at an area boundary
        """
        pulumi.set(__self__, "always_translate", always_translate)
        pulumi.set(__self__, "always_translate_variable", always_translate_variable)
        pulumi.set(__self__, "area_number", area_number)
        pulumi.set(__self__, "area_number_variable", area_number_variable)
        pulumi.set(__self__, "area_type", area_type)
        pulumi.set(__self__, "interfaces", interfaces)
        pulumi.set(__self__, "no_summary", no_summary)
        pulumi.set(__self__, "no_summary_variable", no_summary_variable)
        pulumi.set(__self__, "ranges", ranges)

    @_builtins.property
    @pulumi.getter(name="alwaysTranslate")
    def always_translate(self) -> _builtins.bool:
        """
        Always translate type7 LSAs
        """
        return pulumi.get(self, "always_translate")

    @_builtins.property
    @pulumi.getter(name="alwaysTranslateVariable")
    def always_translate_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "always_translate_variable")

    @_builtins.property
    @pulumi.getter(name="areaNumber")
    def area_number(self) -> _builtins.int:
        """
        Set OSPF area number
        """
        return pulumi.get(self, "area_number")

    @_builtins.property
    @pulumi.getter(name="areaNumberVariable")
    def area_number_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "area_number_variable")

    @_builtins.property
    @pulumi.getter(name="areaType")
    def area_type(self) -> _builtins.str:
        """
        stub area type
        """
        return pulumi.get(self, "area_type")

    @_builtins.property
    @pulumi.getter
    def interfaces(self) -> Sequence['outputs.GetTransportRoutingOspfv3Ipv4FeatureAreaInterfaceResult']:
        """
        Set OSPF interface parameters
        """
        return pulumi.get(self, "interfaces")

    @_builtins.property
    @pulumi.getter(name="noSummary")
    def no_summary(self) -> _builtins.bool:
        """
        Do not inject inter-area routes
        """
        return pulumi.get(self, "no_summary")

    @_builtins.property
    @pulumi.getter(name="noSummaryVariable")
    def no_summary_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "no_summary_variable")

    @_builtins.property
    @pulumi.getter
    def ranges(self) -> Sequence['outputs.GetTransportRoutingOspfv3Ipv4FeatureAreaRangeResult']:
        """
        Summarize OSPF routes at an area boundary
        """
        return pulumi.get(self, "ranges")


@pulumi.output_type
class GetTransportRoutingOspfv3Ipv4FeatureAreaInterfaceResult(dict):
    def __init__(__self__, *,
                 authentication_key: _builtins.str,
                 authentication_key_variable: _builtins.str,
                 authentication_spi: _builtins.int,
                 authentication_spi_variable: _builtins.str,
                 authentication_type: _builtins.str,
                 cost: _builtins.int,
                 cost_variable: _builtins.str,
                 dead_interval: _builtins.int,
                 dead_interval_variable: _builtins.str,
                 hello_interval: _builtins.int,
                 hello_interval_variable: _builtins.str,
                 lsa_retransmit_interval: _builtins.int,
                 lsa_retransmit_interval_variable: _builtins.str,
                 name: _builtins.str,
                 name_variable: _builtins.str,
                 network_type: _builtins.str,
                 network_type_variable: _builtins.str,
                 passive_interface: _builtins.bool,
                 passive_interface_variable: _builtins.str):
        """
        :param _builtins.str authentication_key: Set OSPF interface authentication IPSEC key
        :param _builtins.str authentication_key_variable: Variable name
        :param _builtins.int authentication_spi: Set OSPF interface authentication IPSec SPI, range 256..4294967295
        :param _builtins.str authentication_spi_variable: Variable name
        :param _builtins.str authentication_type: No Authentication by default
        :param _builtins.int cost: Set cost of OSPF interface
        :param _builtins.str cost_variable: Variable name
        :param _builtins.int dead_interval: Set interval after which neighbor is declared to be down
        :param _builtins.str dead_interval_variable: Variable name
        :param _builtins.int hello_interval: Set interval between OSPF hello packets
        :param _builtins.str hello_interval_variable: Variable name
        :param _builtins.int lsa_retransmit_interval: Set time between retransmitting LSAs
        :param _builtins.str lsa_retransmit_interval_variable: Variable name
        :param _builtins.str name: Set interface name
        :param _builtins.str name_variable: Variable name
        :param _builtins.str network_type: Set the OSPF network type
        :param _builtins.str network_type_variable: Variable name
        :param _builtins.bool passive_interface: Set the interface to advertise its address, but not to actively run OSPF
        :param _builtins.str passive_interface_variable: Variable name
        """
        pulumi.set(__self__, "authentication_key", authentication_key)
        pulumi.set(__self__, "authentication_key_variable", authentication_key_variable)
        pulumi.set(__self__, "authentication_spi", authentication_spi)
        pulumi.set(__self__, "authentication_spi_variable", authentication_spi_variable)
        pulumi.set(__self__, "authentication_type", authentication_type)
        pulumi.set(__self__, "cost", cost)
        pulumi.set(__self__, "cost_variable", cost_variable)
        pulumi.set(__self__, "dead_interval", dead_interval)
        pulumi.set(__self__, "dead_interval_variable", dead_interval_variable)
        pulumi.set(__self__, "hello_interval", hello_interval)
        pulumi.set(__self__, "hello_interval_variable", hello_interval_variable)
        pulumi.set(__self__, "lsa_retransmit_interval", lsa_retransmit_interval)
        pulumi.set(__self__, "lsa_retransmit_interval_variable", lsa_retransmit_interval_variable)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "name_variable", name_variable)
        pulumi.set(__self__, "network_type", network_type)
        pulumi.set(__self__, "network_type_variable", network_type_variable)
        pulumi.set(__self__, "passive_interface", passive_interface)
        pulumi.set(__self__, "passive_interface_variable", passive_interface_variable)

    @_builtins.property
    @pulumi.getter(name="authenticationKey")
    def authentication_key(self) -> _builtins.str:
        """
        Set OSPF interface authentication IPSEC key
        """
        return pulumi.get(self, "authentication_key")

    @_builtins.property
    @pulumi.getter(name="authenticationKeyVariable")
    def authentication_key_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "authentication_key_variable")

    @_builtins.property
    @pulumi.getter(name="authenticationSpi")
    def authentication_spi(self) -> _builtins.int:
        """
        Set OSPF interface authentication IPSec SPI, range 256..4294967295
        """
        return pulumi.get(self, "authentication_spi")

    @_builtins.property
    @pulumi.getter(name="authenticationSpiVariable")
    def authentication_spi_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "authentication_spi_variable")

    @_builtins.property
    @pulumi.getter(name="authenticationType")
    def authentication_type(self) -> _builtins.str:
        """
        No Authentication by default
        """
        return pulumi.get(self, "authentication_type")

    @_builtins.property
    @pulumi.getter
    def cost(self) -> _builtins.int:
        """
        Set cost of OSPF interface
        """
        return pulumi.get(self, "cost")

    @_builtins.property
    @pulumi.getter(name="costVariable")
    def cost_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "cost_variable")

    @_builtins.property
    @pulumi.getter(name="deadInterval")
    def dead_interval(self) -> _builtins.int:
        """
        Set interval after which neighbor is declared to be down
        """
        return pulumi.get(self, "dead_interval")

    @_builtins.property
    @pulumi.getter(name="deadIntervalVariable")
    def dead_interval_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "dead_interval_variable")

    @_builtins.property
    @pulumi.getter(name="helloInterval")
    def hello_interval(self) -> _builtins.int:
        """
        Set interval between OSPF hello packets
        """
        return pulumi.get(self, "hello_interval")

    @_builtins.property
    @pulumi.getter(name="helloIntervalVariable")
    def hello_interval_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "hello_interval_variable")

    @_builtins.property
    @pulumi.getter(name="lsaRetransmitInterval")
    def lsa_retransmit_interval(self) -> _builtins.int:
        """
        Set time between retransmitting LSAs
        """
        return pulumi.get(self, "lsa_retransmit_interval")

    @_builtins.property
    @pulumi.getter(name="lsaRetransmitIntervalVariable")
    def lsa_retransmit_interval_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "lsa_retransmit_interval_variable")

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        """
        Set interface name
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter(name="nameVariable")
    def name_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "name_variable")

    @_builtins.property
    @pulumi.getter(name="networkType")
    def network_type(self) -> _builtins.str:
        """
        Set the OSPF network type
        """
        return pulumi.get(self, "network_type")

    @_builtins.property
    @pulumi.getter(name="networkTypeVariable")
    def network_type_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "network_type_variable")

    @_builtins.property
    @pulumi.getter(name="passiveInterface")
    def passive_interface(self) -> _builtins.bool:
        """
        Set the interface to advertise its address, but not to actively run OSPF
        """
        return pulumi.get(self, "passive_interface")

    @_builtins.property
    @pulumi.getter(name="passiveInterfaceVariable")
    def passive_interface_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "passive_interface_variable")


@pulumi.output_type
class GetTransportRoutingOspfv3Ipv4FeatureAreaRangeResult(dict):
    def __init__(__self__, *,
                 cost: _builtins.int,
                 cost_variable: _builtins.str,
                 ip_address: _builtins.str,
                 ip_address_variable: _builtins.str,
                 no_advertise: _builtins.bool,
                 no_advertise_variable: _builtins.str,
                 subnet_mask: _builtins.str,
                 subnet_mask_variable: _builtins.str):
        """
        :param _builtins.int cost: Set cost for this range
        :param _builtins.str cost_variable: Variable name
        :param _builtins.str ip_address_variable: Variable name
        :param _builtins.bool no_advertise: Do not advertise this range
        :param _builtins.str no_advertise_variable: Variable name
        :param _builtins.str subnet_mask_variable: Variable name
        """
        pulumi.set(__self__, "cost", cost)
        pulumi.set(__self__, "cost_variable", cost_variable)
        pulumi.set(__self__, "ip_address", ip_address)
        pulumi.set(__self__, "ip_address_variable", ip_address_variable)
        pulumi.set(__self__, "no_advertise", no_advertise)
        pulumi.set(__self__, "no_advertise_variable", no_advertise_variable)
        pulumi.set(__self__, "subnet_mask", subnet_mask)
        pulumi.set(__self__, "subnet_mask_variable", subnet_mask_variable)

    @_builtins.property
    @pulumi.getter
    def cost(self) -> _builtins.int:
        """
        Set cost for this range
        """
        return pulumi.get(self, "cost")

    @_builtins.property
    @pulumi.getter(name="costVariable")
    def cost_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "cost_variable")

    @_builtins.property
    @pulumi.getter(name="ipAddress")
    def ip_address(self) -> _builtins.str:
        return pulumi.get(self, "ip_address")

    @_builtins.property
    @pulumi.getter(name="ipAddressVariable")
    def ip_address_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "ip_address_variable")

    @_builtins.property
    @pulumi.getter(name="noAdvertise")
    def no_advertise(self) -> _builtins.bool:
        """
        Do not advertise this range
        """
        return pulumi.get(self, "no_advertise")

    @_builtins.property
    @pulumi.getter(name="noAdvertiseVariable")
    def no_advertise_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "no_advertise_variable")

    @_builtins.property
    @pulumi.getter(name="subnetMask")
    def subnet_mask(self) -> _builtins.str:
        return pulumi.get(self, "subnet_mask")

    @_builtins.property
    @pulumi.getter(name="subnetMaskVariable")
    def subnet_mask_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "subnet_mask_variable")


@pulumi.output_type
class GetTransportRoutingOspfv3Ipv4FeatureRedistributeResult(dict):
    def __init__(__self__, *,
                 nat_dia: _builtins.bool,
                 nat_dia_variable: _builtins.str,
                 protocol: _builtins.str,
                 protocol_variable: _builtins.str,
                 route_policy_id: _builtins.str):
        """
        :param _builtins.bool nat_dia: Enable NAT DIA for redistributed routes
        :param _builtins.str nat_dia_variable: Variable name
        :param _builtins.str protocol: Set the protocol
        :param _builtins.str protocol_variable: Variable name
        """
        pulumi.set(__self__, "nat_dia", nat_dia)
        pulumi.set(__self__, "nat_dia_variable", nat_dia_variable)
        pulumi.set(__self__, "protocol", protocol)
        pulumi.set(__self__, "protocol_variable", protocol_variable)
        pulumi.set(__self__, "route_policy_id", route_policy_id)

    @_builtins.property
    @pulumi.getter(name="natDia")
    def nat_dia(self) -> _builtins.bool:
        """
        Enable NAT DIA for redistributed routes
        """
        return pulumi.get(self, "nat_dia")

    @_builtins.property
    @pulumi.getter(name="natDiaVariable")
    def nat_dia_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "nat_dia_variable")

    @_builtins.property
    @pulumi.getter
    def protocol(self) -> _builtins.str:
        """
        Set the protocol
        """
        return pulumi.get(self, "protocol")

    @_builtins.property
    @pulumi.getter(name="protocolVariable")
    def protocol_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "protocol_variable")

    @_builtins.property
    @pulumi.getter(name="routePolicyId")
    def route_policy_id(self) -> _builtins.str:
        return pulumi.get(self, "route_policy_id")


@pulumi.output_type
class GetTransportRoutingOspfv3Ipv6FeatureAreaResult(dict):
    def __init__(__self__, *,
                 always_translate: _builtins.bool,
                 always_translate_variable: _builtins.str,
                 area_number: _builtins.int,
                 area_number_variable: _builtins.str,
                 area_type: _builtins.str,
                 interfaces: Sequence['outputs.GetTransportRoutingOspfv3Ipv6FeatureAreaInterfaceResult'],
                 no_summary: _builtins.bool,
                 no_summary_variable: _builtins.str,
                 ranges: Sequence['outputs.GetTransportRoutingOspfv3Ipv6FeatureAreaRangeResult']):
        """
        :param _builtins.bool always_translate: Always translate type7 LSAs
        :param _builtins.str always_translate_variable: Variable name
        :param _builtins.int area_number: Set OSPF area number
        :param _builtins.str area_number_variable: Variable name
        :param _builtins.str area_type: stub area type
        :param Sequence['GetTransportRoutingOspfv3Ipv6FeatureAreaInterfaceArgs'] interfaces: Set OSPF interface parameters
        :param _builtins.bool no_summary: Do not inject inter-area routes
        :param _builtins.str no_summary_variable: Variable name
        :param Sequence['GetTransportRoutingOspfv3Ipv6FeatureAreaRangeArgs'] ranges: Summarize OSPF routes at an area boundary
        """
        pulumi.set(__self__, "always_translate", always_translate)
        pulumi.set(__self__, "always_translate_variable", always_translate_variable)
        pulumi.set(__self__, "area_number", area_number)
        pulumi.set(__self__, "area_number_variable", area_number_variable)
        pulumi.set(__self__, "area_type", area_type)
        pulumi.set(__self__, "interfaces", interfaces)
        pulumi.set(__self__, "no_summary", no_summary)
        pulumi.set(__self__, "no_summary_variable", no_summary_variable)
        pulumi.set(__self__, "ranges", ranges)

    @_builtins.property
    @pulumi.getter(name="alwaysTranslate")
    def always_translate(self) -> _builtins.bool:
        """
        Always translate type7 LSAs
        """
        return pulumi.get(self, "always_translate")

    @_builtins.property
    @pulumi.getter(name="alwaysTranslateVariable")
    def always_translate_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "always_translate_variable")

    @_builtins.property
    @pulumi.getter(name="areaNumber")
    def area_number(self) -> _builtins.int:
        """
        Set OSPF area number
        """
        return pulumi.get(self, "area_number")

    @_builtins.property
    @pulumi.getter(name="areaNumberVariable")
    def area_number_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "area_number_variable")

    @_builtins.property
    @pulumi.getter(name="areaType")
    def area_type(self) -> _builtins.str:
        """
        stub area type
        """
        return pulumi.get(self, "area_type")

    @_builtins.property
    @pulumi.getter
    def interfaces(self) -> Sequence['outputs.GetTransportRoutingOspfv3Ipv6FeatureAreaInterfaceResult']:
        """
        Set OSPF interface parameters
        """
        return pulumi.get(self, "interfaces")

    @_builtins.property
    @pulumi.getter(name="noSummary")
    def no_summary(self) -> _builtins.bool:
        """
        Do not inject inter-area routes
        """
        return pulumi.get(self, "no_summary")

    @_builtins.property
    @pulumi.getter(name="noSummaryVariable")
    def no_summary_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "no_summary_variable")

    @_builtins.property
    @pulumi.getter
    def ranges(self) -> Sequence['outputs.GetTransportRoutingOspfv3Ipv6FeatureAreaRangeResult']:
        """
        Summarize OSPF routes at an area boundary
        """
        return pulumi.get(self, "ranges")


@pulumi.output_type
class GetTransportRoutingOspfv3Ipv6FeatureAreaInterfaceResult(dict):
    def __init__(__self__, *,
                 authentication_key: _builtins.str,
                 authentication_key_variable: _builtins.str,
                 authentication_spi: _builtins.int,
                 authentication_spi_variable: _builtins.str,
                 authentication_type: _builtins.str,
                 cost: _builtins.int,
                 cost_variable: _builtins.str,
                 dead_interval: _builtins.int,
                 dead_interval_variable: _builtins.str,
                 hello_interval: _builtins.int,
                 hello_interval_variable: _builtins.str,
                 lsa_retransmit_interval: _builtins.int,
                 lsa_retransmit_interval_variable: _builtins.str,
                 name: _builtins.str,
                 name_variable: _builtins.str,
                 network_type: _builtins.str,
                 network_type_variable: _builtins.str,
                 passive_interface: _builtins.bool,
                 passive_interface_variable: _builtins.str):
        """
        :param _builtins.str authentication_key: Set OSPF interface authentication IPSEC key
        :param _builtins.str authentication_key_variable: Variable name
        :param _builtins.int authentication_spi: Set OSPF interface authentication IPSec SPI, range 256..4294967295
        :param _builtins.str authentication_spi_variable: Variable name
        :param _builtins.str authentication_type: No Authentication by default
        :param _builtins.int cost: Set cost of OSPF interface
        :param _builtins.str cost_variable: Variable name
        :param _builtins.int dead_interval: Set interval after which neighbor is declared to be down
        :param _builtins.str dead_interval_variable: Variable name
        :param _builtins.int hello_interval: Set interval between OSPF hello packets
        :param _builtins.str hello_interval_variable: Variable name
        :param _builtins.int lsa_retransmit_interval: Set time between retransmitting LSAs
        :param _builtins.str lsa_retransmit_interval_variable: Variable name
        :param _builtins.str name: Set interface name
        :param _builtins.str name_variable: Variable name
        :param _builtins.str network_type: Set the OSPF network type
        :param _builtins.str network_type_variable: Variable name
        :param _builtins.bool passive_interface: Set the interface to advertise its address, but not to actively run OSPF
        :param _builtins.str passive_interface_variable: Variable name
        """
        pulumi.set(__self__, "authentication_key", authentication_key)
        pulumi.set(__self__, "authentication_key_variable", authentication_key_variable)
        pulumi.set(__self__, "authentication_spi", authentication_spi)
        pulumi.set(__self__, "authentication_spi_variable", authentication_spi_variable)
        pulumi.set(__self__, "authentication_type", authentication_type)
        pulumi.set(__self__, "cost", cost)
        pulumi.set(__self__, "cost_variable", cost_variable)
        pulumi.set(__self__, "dead_interval", dead_interval)
        pulumi.set(__self__, "dead_interval_variable", dead_interval_variable)
        pulumi.set(__self__, "hello_interval", hello_interval)
        pulumi.set(__self__, "hello_interval_variable", hello_interval_variable)
        pulumi.set(__self__, "lsa_retransmit_interval", lsa_retransmit_interval)
        pulumi.set(__self__, "lsa_retransmit_interval_variable", lsa_retransmit_interval_variable)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "name_variable", name_variable)
        pulumi.set(__self__, "network_type", network_type)
        pulumi.set(__self__, "network_type_variable", network_type_variable)
        pulumi.set(__self__, "passive_interface", passive_interface)
        pulumi.set(__self__, "passive_interface_variable", passive_interface_variable)

    @_builtins.property
    @pulumi.getter(name="authenticationKey")
    def authentication_key(self) -> _builtins.str:
        """
        Set OSPF interface authentication IPSEC key
        """
        return pulumi.get(self, "authentication_key")

    @_builtins.property
    @pulumi.getter(name="authenticationKeyVariable")
    def authentication_key_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "authentication_key_variable")

    @_builtins.property
    @pulumi.getter(name="authenticationSpi")
    def authentication_spi(self) -> _builtins.int:
        """
        Set OSPF interface authentication IPSec SPI, range 256..4294967295
        """
        return pulumi.get(self, "authentication_spi")

    @_builtins.property
    @pulumi.getter(name="authenticationSpiVariable")
    def authentication_spi_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "authentication_spi_variable")

    @_builtins.property
    @pulumi.getter(name="authenticationType")
    def authentication_type(self) -> _builtins.str:
        """
        No Authentication by default
        """
        return pulumi.get(self, "authentication_type")

    @_builtins.property
    @pulumi.getter
    def cost(self) -> _builtins.int:
        """
        Set cost of OSPF interface
        """
        return pulumi.get(self, "cost")

    @_builtins.property
    @pulumi.getter(name="costVariable")
    def cost_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "cost_variable")

    @_builtins.property
    @pulumi.getter(name="deadInterval")
    def dead_interval(self) -> _builtins.int:
        """
        Set interval after which neighbor is declared to be down
        """
        return pulumi.get(self, "dead_interval")

    @_builtins.property
    @pulumi.getter(name="deadIntervalVariable")
    def dead_interval_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "dead_interval_variable")

    @_builtins.property
    @pulumi.getter(name="helloInterval")
    def hello_interval(self) -> _builtins.int:
        """
        Set interval between OSPF hello packets
        """
        return pulumi.get(self, "hello_interval")

    @_builtins.property
    @pulumi.getter(name="helloIntervalVariable")
    def hello_interval_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "hello_interval_variable")

    @_builtins.property
    @pulumi.getter(name="lsaRetransmitInterval")
    def lsa_retransmit_interval(self) -> _builtins.int:
        """
        Set time between retransmitting LSAs
        """
        return pulumi.get(self, "lsa_retransmit_interval")

    @_builtins.property
    @pulumi.getter(name="lsaRetransmitIntervalVariable")
    def lsa_retransmit_interval_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "lsa_retransmit_interval_variable")

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        """
        Set interface name
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter(name="nameVariable")
    def name_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "name_variable")

    @_builtins.property
    @pulumi.getter(name="networkType")
    def network_type(self) -> _builtins.str:
        """
        Set the OSPF network type
        """
        return pulumi.get(self, "network_type")

    @_builtins.property
    @pulumi.getter(name="networkTypeVariable")
    def network_type_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "network_type_variable")

    @_builtins.property
    @pulumi.getter(name="passiveInterface")
    def passive_interface(self) -> _builtins.bool:
        """
        Set the interface to advertise its address, but not to actively run OSPF
        """
        return pulumi.get(self, "passive_interface")

    @_builtins.property
    @pulumi.getter(name="passiveInterfaceVariable")
    def passive_interface_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "passive_interface_variable")


@pulumi.output_type
class GetTransportRoutingOspfv3Ipv6FeatureAreaRangeResult(dict):
    def __init__(__self__, *,
                 cost: _builtins.int,
                 cost_variable: _builtins.str,
                 no_advertise: _builtins.bool,
                 no_advertise_variable: _builtins.str,
                 prefix: _builtins.str,
                 prefix_variable: _builtins.str):
        """
        :param _builtins.int cost: Set cost for this range
        :param _builtins.str cost_variable: Variable name
        :param _builtins.bool no_advertise: Do not advertise this range
        :param _builtins.str no_advertise_variable: Variable name
        :param _builtins.str prefix: IPv6 prefix,for example 2001::/64
        :param _builtins.str prefix_variable: Variable name
        """
        pulumi.set(__self__, "cost", cost)
        pulumi.set(__self__, "cost_variable", cost_variable)
        pulumi.set(__self__, "no_advertise", no_advertise)
        pulumi.set(__self__, "no_advertise_variable", no_advertise_variable)
        pulumi.set(__self__, "prefix", prefix)
        pulumi.set(__self__, "prefix_variable", prefix_variable)

    @_builtins.property
    @pulumi.getter
    def cost(self) -> _builtins.int:
        """
        Set cost for this range
        """
        return pulumi.get(self, "cost")

    @_builtins.property
    @pulumi.getter(name="costVariable")
    def cost_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "cost_variable")

    @_builtins.property
    @pulumi.getter(name="noAdvertise")
    def no_advertise(self) -> _builtins.bool:
        """
        Do not advertise this range
        """
        return pulumi.get(self, "no_advertise")

    @_builtins.property
    @pulumi.getter(name="noAdvertiseVariable")
    def no_advertise_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "no_advertise_variable")

    @_builtins.property
    @pulumi.getter
    def prefix(self) -> _builtins.str:
        """
        IPv6 prefix,for example 2001::/64
        """
        return pulumi.get(self, "prefix")

    @_builtins.property
    @pulumi.getter(name="prefixVariable")
    def prefix_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "prefix_variable")


@pulumi.output_type
class GetTransportRoutingOspfv3Ipv6FeatureRedistributeResult(dict):
    def __init__(__self__, *,
                 protocol: _builtins.str,
                 protocol_variable: _builtins.str,
                 route_policy_id: _builtins.str):
        """
        :param _builtins.str protocol: Set the protocol
        :param _builtins.str protocol_variable: Variable name
        """
        pulumi.set(__self__, "protocol", protocol)
        pulumi.set(__self__, "protocol_variable", protocol_variable)
        pulumi.set(__self__, "route_policy_id", route_policy_id)

    @_builtins.property
    @pulumi.getter
    def protocol(self) -> _builtins.str:
        """
        Set the protocol
        """
        return pulumi.get(self, "protocol")

    @_builtins.property
    @pulumi.getter(name="protocolVariable")
    def protocol_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "protocol_variable")

    @_builtins.property
    @pulumi.getter(name="routePolicyId")
    def route_policy_id(self) -> _builtins.str:
        return pulumi.get(self, "route_policy_id")


@pulumi.output_type
class GetTransportT1E1ControllerFeatureEntryResult(dict):
    def __init__(__self__, *,
                 cable_length: _builtins.str,
                 channel_groups: Sequence['outputs.GetTransportT1E1ControllerFeatureEntryChannelGroupResult'],
                 clock_source: _builtins.str,
                 description: _builtins.str,
                 description_variable: _builtins.str,
                 e1_description: _builtins.str,
                 e1_framing: _builtins.str,
                 e1_framing_variable: _builtins.str,
                 e1_linecode: _builtins.str,
                 e1_linecode_variable: _builtins.str,
                 length_long: _builtins.str,
                 length_long_variable: _builtins.str,
                 length_short: _builtins.str,
                 length_short_variable: _builtins.str,
                 line_mode: _builtins.str,
                 line_mode_variable: _builtins.str,
                 t1_description: _builtins.str,
                 t1_framing: _builtins.str,
                 t1_framing_variable: _builtins.str,
                 t1_linecode: _builtins.str,
                 t1_linecode_variable: _builtins.str):
        """
        :param _builtins.str cable_length: Cable Config
        :param Sequence['GetTransportT1E1ControllerFeatureEntryChannelGroupArgs'] channel_groups: Channel Group List
        :param _builtins.str clock_source: Clock Source
        :param _builtins.str description: Description
        :param _builtins.str description_variable: Variable name
        :param _builtins.str e1_description: Card Type
        :param _builtins.str e1_framing: Framing
        :param _builtins.str e1_framing_variable: Variable name
        :param _builtins.str e1_linecode: LineCode
        :param _builtins.str e1_linecode_variable: Variable name
        :param _builtins.str length_long: length
        :param _builtins.str length_long_variable: Variable name
        :param _builtins.str length_short: length
        :param _builtins.str length_short_variable: Variable name
        :param _builtins.str line_mode: Line Mode
        :param _builtins.str line_mode_variable: Variable name
        :param _builtins.str t1_description: Card Type
        :param _builtins.str t1_framing: Framing
        :param _builtins.str t1_framing_variable: Variable name
        :param _builtins.str t1_linecode: LineCode
        :param _builtins.str t1_linecode_variable: Variable name
        """
        pulumi.set(__self__, "cable_length", cable_length)
        pulumi.set(__self__, "channel_groups", channel_groups)
        pulumi.set(__self__, "clock_source", clock_source)
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "description_variable", description_variable)
        pulumi.set(__self__, "e1_description", e1_description)
        pulumi.set(__self__, "e1_framing", e1_framing)
        pulumi.set(__self__, "e1_framing_variable", e1_framing_variable)
        pulumi.set(__self__, "e1_linecode", e1_linecode)
        pulumi.set(__self__, "e1_linecode_variable", e1_linecode_variable)
        pulumi.set(__self__, "length_long", length_long)
        pulumi.set(__self__, "length_long_variable", length_long_variable)
        pulumi.set(__self__, "length_short", length_short)
        pulumi.set(__self__, "length_short_variable", length_short_variable)
        pulumi.set(__self__, "line_mode", line_mode)
        pulumi.set(__self__, "line_mode_variable", line_mode_variable)
        pulumi.set(__self__, "t1_description", t1_description)
        pulumi.set(__self__, "t1_framing", t1_framing)
        pulumi.set(__self__, "t1_framing_variable", t1_framing_variable)
        pulumi.set(__self__, "t1_linecode", t1_linecode)
        pulumi.set(__self__, "t1_linecode_variable", t1_linecode_variable)

    @_builtins.property
    @pulumi.getter(name="cableLength")
    def cable_length(self) -> _builtins.str:
        """
        Cable Config
        """
        return pulumi.get(self, "cable_length")

    @_builtins.property
    @pulumi.getter(name="channelGroups")
    def channel_groups(self) -> Sequence['outputs.GetTransportT1E1ControllerFeatureEntryChannelGroupResult']:
        """
        Channel Group List
        """
        return pulumi.get(self, "channel_groups")

    @_builtins.property
    @pulumi.getter(name="clockSource")
    def clock_source(self) -> _builtins.str:
        """
        Clock Source
        """
        return pulumi.get(self, "clock_source")

    @_builtins.property
    @pulumi.getter
    def description(self) -> _builtins.str:
        """
        Description
        """
        return pulumi.get(self, "description")

    @_builtins.property
    @pulumi.getter(name="descriptionVariable")
    def description_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "description_variable")

    @_builtins.property
    @pulumi.getter(name="e1Description")
    def e1_description(self) -> _builtins.str:
        """
        Card Type
        """
        return pulumi.get(self, "e1_description")

    @_builtins.property
    @pulumi.getter(name="e1Framing")
    def e1_framing(self) -> _builtins.str:
        """
        Framing
        """
        return pulumi.get(self, "e1_framing")

    @_builtins.property
    @pulumi.getter(name="e1FramingVariable")
    def e1_framing_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "e1_framing_variable")

    @_builtins.property
    @pulumi.getter(name="e1Linecode")
    def e1_linecode(self) -> _builtins.str:
        """
        LineCode
        """
        return pulumi.get(self, "e1_linecode")

    @_builtins.property
    @pulumi.getter(name="e1LinecodeVariable")
    def e1_linecode_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "e1_linecode_variable")

    @_builtins.property
    @pulumi.getter(name="lengthLong")
    def length_long(self) -> _builtins.str:
        """
        length
        """
        return pulumi.get(self, "length_long")

    @_builtins.property
    @pulumi.getter(name="lengthLongVariable")
    def length_long_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "length_long_variable")

    @_builtins.property
    @pulumi.getter(name="lengthShort")
    def length_short(self) -> _builtins.str:
        """
        length
        """
        return pulumi.get(self, "length_short")

    @_builtins.property
    @pulumi.getter(name="lengthShortVariable")
    def length_short_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "length_short_variable")

    @_builtins.property
    @pulumi.getter(name="lineMode")
    def line_mode(self) -> _builtins.str:
        """
        Line Mode
        """
        return pulumi.get(self, "line_mode")

    @_builtins.property
    @pulumi.getter(name="lineModeVariable")
    def line_mode_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "line_mode_variable")

    @_builtins.property
    @pulumi.getter(name="t1Description")
    def t1_description(self) -> _builtins.str:
        """
        Card Type
        """
        return pulumi.get(self, "t1_description")

    @_builtins.property
    @pulumi.getter(name="t1Framing")
    def t1_framing(self) -> _builtins.str:
        """
        Framing
        """
        return pulumi.get(self, "t1_framing")

    @_builtins.property
    @pulumi.getter(name="t1FramingVariable")
    def t1_framing_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "t1_framing_variable")

    @_builtins.property
    @pulumi.getter(name="t1Linecode")
    def t1_linecode(self) -> _builtins.str:
        """
        LineCode
        """
        return pulumi.get(self, "t1_linecode")

    @_builtins.property
    @pulumi.getter(name="t1LinecodeVariable")
    def t1_linecode_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "t1_linecode_variable")


@pulumi.output_type
class GetTransportT1E1ControllerFeatureEntryChannelGroupResult(dict):
    def __init__(__self__, *,
                 channel_group: _builtins.int,
                 channel_group_variable: _builtins.str,
                 time_slot: _builtins.str,
                 time_slot_variable: _builtins.str):
        """
        :param _builtins.int channel_group: Number
        :param _builtins.str channel_group_variable: Variable name
        :param _builtins.str time_slot: Time slots
        :param _builtins.str time_slot_variable: Variable name
        """
        pulumi.set(__self__, "channel_group", channel_group)
        pulumi.set(__self__, "channel_group_variable", channel_group_variable)
        pulumi.set(__self__, "time_slot", time_slot)
        pulumi.set(__self__, "time_slot_variable", time_slot_variable)

    @_builtins.property
    @pulumi.getter(name="channelGroup")
    def channel_group(self) -> _builtins.int:
        """
        Number
        """
        return pulumi.get(self, "channel_group")

    @_builtins.property
    @pulumi.getter(name="channelGroupVariable")
    def channel_group_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "channel_group_variable")

    @_builtins.property
    @pulumi.getter(name="timeSlot")
    def time_slot(self) -> _builtins.str:
        """
        Time slots
        """
        return pulumi.get(self, "time_slot")

    @_builtins.property
    @pulumi.getter(name="timeSlotVariable")
    def time_slot_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "time_slot_variable")


@pulumi.output_type
class GetTransportTrackerGroupFeatureTrackerElementResult(dict):
    def __init__(__self__, *,
                 tracker_id: _builtins.str):
        pulumi.set(__self__, "tracker_id", tracker_id)

    @_builtins.property
    @pulumi.getter(name="trackerId")
    def tracker_id(self) -> _builtins.str:
        return pulumi.get(self, "tracker_id")


@pulumi.output_type
class GetTransportWanVpnFeatureIpv4StaticRouteResult(dict):
    def __init__(__self__, *,
                 administrative_distance: _builtins.int,
                 administrative_distance_variable: _builtins.str,
                 gateway: _builtins.str,
                 network_address: _builtins.str,
                 network_address_variable: _builtins.str,
                 next_hops: Sequence['outputs.GetTransportWanVpnFeatureIpv4StaticRouteNextHopResult'],
                 subnet_mask: _builtins.str,
                 subnet_mask_variable: _builtins.str):
        """
        :param _builtins.int administrative_distance: Administrative distance
        :param _builtins.str administrative_distance_variable: Variable name
        :param _builtins.str gateway: Gateway
        :param _builtins.str network_address: IP Address
        :param _builtins.str network_address_variable: Variable name
        :param Sequence['GetTransportWanVpnFeatureIpv4StaticRouteNextHopArgs'] next_hops: IPv4 Route Gateway Next Hop
        :param _builtins.str subnet_mask: Subnet Mask
        :param _builtins.str subnet_mask_variable: Variable name
        """
        pulumi.set(__self__, "administrative_distance", administrative_distance)
        pulumi.set(__self__, "administrative_distance_variable", administrative_distance_variable)
        pulumi.set(__self__, "gateway", gateway)
        pulumi.set(__self__, "network_address", network_address)
        pulumi.set(__self__, "network_address_variable", network_address_variable)
        pulumi.set(__self__, "next_hops", next_hops)
        pulumi.set(__self__, "subnet_mask", subnet_mask)
        pulumi.set(__self__, "subnet_mask_variable", subnet_mask_variable)

    @_builtins.property
    @pulumi.getter(name="administrativeDistance")
    def administrative_distance(self) -> _builtins.int:
        """
        Administrative distance
        """
        return pulumi.get(self, "administrative_distance")

    @_builtins.property
    @pulumi.getter(name="administrativeDistanceVariable")
    def administrative_distance_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "administrative_distance_variable")

    @_builtins.property
    @pulumi.getter
    def gateway(self) -> _builtins.str:
        """
        Gateway
        """
        return pulumi.get(self, "gateway")

    @_builtins.property
    @pulumi.getter(name="networkAddress")
    def network_address(self) -> _builtins.str:
        """
        IP Address
        """
        return pulumi.get(self, "network_address")

    @_builtins.property
    @pulumi.getter(name="networkAddressVariable")
    def network_address_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "network_address_variable")

    @_builtins.property
    @pulumi.getter(name="nextHops")
    def next_hops(self) -> Sequence['outputs.GetTransportWanVpnFeatureIpv4StaticRouteNextHopResult']:
        """
        IPv4 Route Gateway Next Hop
        """
        return pulumi.get(self, "next_hops")

    @_builtins.property
    @pulumi.getter(name="subnetMask")
    def subnet_mask(self) -> _builtins.str:
        """
        Subnet Mask
        """
        return pulumi.get(self, "subnet_mask")

    @_builtins.property
    @pulumi.getter(name="subnetMaskVariable")
    def subnet_mask_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "subnet_mask_variable")


@pulumi.output_type
class GetTransportWanVpnFeatureIpv4StaticRouteNextHopResult(dict):
    def __init__(__self__, *,
                 address: _builtins.str,
                 address_variable: _builtins.str,
                 administrative_distance: _builtins.int,
                 administrative_distance_variable: _builtins.str):
        """
        :param _builtins.str address: Address
        :param _builtins.str address_variable: Variable name
        :param _builtins.int administrative_distance: Administrative distance
        :param _builtins.str administrative_distance_variable: Variable name
        """
        pulumi.set(__self__, "address", address)
        pulumi.set(__self__, "address_variable", address_variable)
        pulumi.set(__self__, "administrative_distance", administrative_distance)
        pulumi.set(__self__, "administrative_distance_variable", administrative_distance_variable)

    @_builtins.property
    @pulumi.getter
    def address(self) -> _builtins.str:
        """
        Address
        """
        return pulumi.get(self, "address")

    @_builtins.property
    @pulumi.getter(name="addressVariable")
    def address_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "address_variable")

    @_builtins.property
    @pulumi.getter(name="administrativeDistance")
    def administrative_distance(self) -> _builtins.int:
        """
        Administrative distance
        """
        return pulumi.get(self, "administrative_distance")

    @_builtins.property
    @pulumi.getter(name="administrativeDistanceVariable")
    def administrative_distance_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "administrative_distance_variable")


@pulumi.output_type
class GetTransportWanVpnFeatureIpv6StaticRouteResult(dict):
    def __init__(__self__, *,
                 gateway: _builtins.str,
                 nat: _builtins.str,
                 nat_variable: _builtins.str,
                 next_hops: Sequence['outputs.GetTransportWanVpnFeatureIpv6StaticRouteNextHopResult'],
                 null0: _builtins.bool,
                 prefix: _builtins.str,
                 prefix_variable: _builtins.str):
        """
        :param _builtins.str gateway: Gateway
        :param _builtins.str nat: IPv6 Nat
        :param _builtins.str nat_variable: Variable name
        :param Sequence['GetTransportWanVpnFeatureIpv6StaticRouteNextHopArgs'] next_hops: IPv6 Route Gateway Next Hop
        :param _builtins.bool null0: IPv6 Route Gateway Next Hop
        :param _builtins.str prefix: Prefix
        :param _builtins.str prefix_variable: Variable name
        """
        pulumi.set(__self__, "gateway", gateway)
        pulumi.set(__self__, "nat", nat)
        pulumi.set(__self__, "nat_variable", nat_variable)
        pulumi.set(__self__, "next_hops", next_hops)
        pulumi.set(__self__, "null0", null0)
        pulumi.set(__self__, "prefix", prefix)
        pulumi.set(__self__, "prefix_variable", prefix_variable)

    @_builtins.property
    @pulumi.getter
    def gateway(self) -> _builtins.str:
        """
        Gateway
        """
        return pulumi.get(self, "gateway")

    @_builtins.property
    @pulumi.getter
    def nat(self) -> _builtins.str:
        """
        IPv6 Nat
        """
        return pulumi.get(self, "nat")

    @_builtins.property
    @pulumi.getter(name="natVariable")
    def nat_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "nat_variable")

    @_builtins.property
    @pulumi.getter(name="nextHops")
    def next_hops(self) -> Sequence['outputs.GetTransportWanVpnFeatureIpv6StaticRouteNextHopResult']:
        """
        IPv6 Route Gateway Next Hop
        """
        return pulumi.get(self, "next_hops")

    @_builtins.property
    @pulumi.getter
    def null0(self) -> _builtins.bool:
        """
        IPv6 Route Gateway Next Hop
        """
        return pulumi.get(self, "null0")

    @_builtins.property
    @pulumi.getter
    def prefix(self) -> _builtins.str:
        """
        Prefix
        """
        return pulumi.get(self, "prefix")

    @_builtins.property
    @pulumi.getter(name="prefixVariable")
    def prefix_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "prefix_variable")


@pulumi.output_type
class GetTransportWanVpnFeatureIpv6StaticRouteNextHopResult(dict):
    def __init__(__self__, *,
                 address: _builtins.str,
                 address_variable: _builtins.str,
                 administrative_distance: _builtins.int,
                 administrative_distance_variable: _builtins.str):
        """
        :param _builtins.str address: Address
        :param _builtins.str address_variable: Variable name
        :param _builtins.int administrative_distance: Administrative distance
        :param _builtins.str administrative_distance_variable: Variable name
        """
        pulumi.set(__self__, "address", address)
        pulumi.set(__self__, "address_variable", address_variable)
        pulumi.set(__self__, "administrative_distance", administrative_distance)
        pulumi.set(__self__, "administrative_distance_variable", administrative_distance_variable)

    @_builtins.property
    @pulumi.getter
    def address(self) -> _builtins.str:
        """
        Address
        """
        return pulumi.get(self, "address")

    @_builtins.property
    @pulumi.getter(name="addressVariable")
    def address_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "address_variable")

    @_builtins.property
    @pulumi.getter(name="administrativeDistance")
    def administrative_distance(self) -> _builtins.int:
        """
        Administrative distance
        """
        return pulumi.get(self, "administrative_distance")

    @_builtins.property
    @pulumi.getter(name="administrativeDistanceVariable")
    def administrative_distance_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "administrative_distance_variable")


@pulumi.output_type
class GetTransportWanVpnFeatureNat64V4PoolResult(dict):
    def __init__(__self__, *,
                 nat64_v4_pool_name: _builtins.str,
                 nat64_v4_pool_name_variable: _builtins.str,
                 nat64_v4_pool_overload: _builtins.bool,
                 nat64_v4_pool_overload_variable: _builtins.str,
                 nat64_v4_pool_range_end: _builtins.str,
                 nat64_v4_pool_range_end_variable: _builtins.str,
                 nat64_v4_pool_range_start: _builtins.str,
                 nat64_v4_pool_range_start_variable: _builtins.str):
        """
        :param _builtins.str nat64_v4_pool_name: NAT64 v4 Pool Name
        :param _builtins.str nat64_v4_pool_name_variable: Variable name
        :param _builtins.bool nat64_v4_pool_overload: NAT64 Overload
        :param _builtins.str nat64_v4_pool_overload_variable: Variable name
        :param _builtins.str nat64_v4_pool_range_end: NAT64 Pool Range End
        :param _builtins.str nat64_v4_pool_range_end_variable: Variable name
        :param _builtins.str nat64_v4_pool_range_start: NAT64 Pool Range Start
        :param _builtins.str nat64_v4_pool_range_start_variable: Variable name
        """
        pulumi.set(__self__, "nat64_v4_pool_name", nat64_v4_pool_name)
        pulumi.set(__self__, "nat64_v4_pool_name_variable", nat64_v4_pool_name_variable)
        pulumi.set(__self__, "nat64_v4_pool_overload", nat64_v4_pool_overload)
        pulumi.set(__self__, "nat64_v4_pool_overload_variable", nat64_v4_pool_overload_variable)
        pulumi.set(__self__, "nat64_v4_pool_range_end", nat64_v4_pool_range_end)
        pulumi.set(__self__, "nat64_v4_pool_range_end_variable", nat64_v4_pool_range_end_variable)
        pulumi.set(__self__, "nat64_v4_pool_range_start", nat64_v4_pool_range_start)
        pulumi.set(__self__, "nat64_v4_pool_range_start_variable", nat64_v4_pool_range_start_variable)

    @_builtins.property
    @pulumi.getter(name="nat64V4PoolName")
    def nat64_v4_pool_name(self) -> _builtins.str:
        """
        NAT64 v4 Pool Name
        """
        return pulumi.get(self, "nat64_v4_pool_name")

    @_builtins.property
    @pulumi.getter(name="nat64V4PoolNameVariable")
    def nat64_v4_pool_name_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "nat64_v4_pool_name_variable")

    @_builtins.property
    @pulumi.getter(name="nat64V4PoolOverload")
    def nat64_v4_pool_overload(self) -> _builtins.bool:
        """
        NAT64 Overload
        """
        return pulumi.get(self, "nat64_v4_pool_overload")

    @_builtins.property
    @pulumi.getter(name="nat64V4PoolOverloadVariable")
    def nat64_v4_pool_overload_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "nat64_v4_pool_overload_variable")

    @_builtins.property
    @pulumi.getter(name="nat64V4PoolRangeEnd")
    def nat64_v4_pool_range_end(self) -> _builtins.str:
        """
        NAT64 Pool Range End
        """
        return pulumi.get(self, "nat64_v4_pool_range_end")

    @_builtins.property
    @pulumi.getter(name="nat64V4PoolRangeEndVariable")
    def nat64_v4_pool_range_end_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "nat64_v4_pool_range_end_variable")

    @_builtins.property
    @pulumi.getter(name="nat64V4PoolRangeStart")
    def nat64_v4_pool_range_start(self) -> _builtins.str:
        """
        NAT64 Pool Range Start
        """
        return pulumi.get(self, "nat64_v4_pool_range_start")

    @_builtins.property
    @pulumi.getter(name="nat64V4PoolRangeStartVariable")
    def nat64_v4_pool_range_start_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "nat64_v4_pool_range_start_variable")


@pulumi.output_type
class GetTransportWanVpnFeatureNewHostMappingResult(dict):
    def __init__(__self__, *,
                 host_name: _builtins.str,
                 host_name_variable: _builtins.str,
                 list_of_ip_addresses: Sequence[_builtins.str],
                 list_of_ip_addresses_variable: _builtins.str):
        """
        :param _builtins.str host_name: Hostname
        :param _builtins.str host_name_variable: Variable name
        :param Sequence[_builtins.str] list_of_ip_addresses: List of IP
        :param _builtins.str list_of_ip_addresses_variable: Variable name
        """
        pulumi.set(__self__, "host_name", host_name)
        pulumi.set(__self__, "host_name_variable", host_name_variable)
        pulumi.set(__self__, "list_of_ip_addresses", list_of_ip_addresses)
        pulumi.set(__self__, "list_of_ip_addresses_variable", list_of_ip_addresses_variable)

    @_builtins.property
    @pulumi.getter(name="hostName")
    def host_name(self) -> _builtins.str:
        """
        Hostname
        """
        return pulumi.get(self, "host_name")

    @_builtins.property
    @pulumi.getter(name="hostNameVariable")
    def host_name_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "host_name_variable")

    @_builtins.property
    @pulumi.getter(name="listOfIpAddresses")
    def list_of_ip_addresses(self) -> Sequence[_builtins.str]:
        """
        List of IP
        """
        return pulumi.get(self, "list_of_ip_addresses")

    @_builtins.property
    @pulumi.getter(name="listOfIpAddressesVariable")
    def list_of_ip_addresses_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "list_of_ip_addresses_variable")


@pulumi.output_type
class GetTransportWanVpnFeatureServiceResult(dict):
    def __init__(__self__, *,
                 service_type: _builtins.str):
        """
        :param _builtins.str service_type: Service Type
        """
        pulumi.set(__self__, "service_type", service_type)

    @_builtins.property
    @pulumi.getter(name="serviceType")
    def service_type(self) -> _builtins.str:
        """
        Service Type
        """
        return pulumi.get(self, "service_type")


@pulumi.output_type
class GetTransportWanVpnInterfaceCellularFeatureArpResult(dict):
    def __init__(__self__, *,
                 ip_address: _builtins.str,
                 ip_address_variable: _builtins.str,
                 mac_address: _builtins.str,
                 mac_address_variable: _builtins.str):
        """
        :param _builtins.str ip_address: IP V4 Address
        :param _builtins.str ip_address_variable: Variable name
        :param _builtins.str mac_address: MAC Address
        :param _builtins.str mac_address_variable: Variable name
        """
        pulumi.set(__self__, "ip_address", ip_address)
        pulumi.set(__self__, "ip_address_variable", ip_address_variable)
        pulumi.set(__self__, "mac_address", mac_address)
        pulumi.set(__self__, "mac_address_variable", mac_address_variable)

    @_builtins.property
    @pulumi.getter(name="ipAddress")
    def ip_address(self) -> _builtins.str:
        """
        IP V4 Address
        """
        return pulumi.get(self, "ip_address")

    @_builtins.property
    @pulumi.getter(name="ipAddressVariable")
    def ip_address_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "ip_address_variable")

    @_builtins.property
    @pulumi.getter(name="macAddress")
    def mac_address(self) -> _builtins.str:
        """
        MAC Address
        """
        return pulumi.get(self, "mac_address")

    @_builtins.property
    @pulumi.getter(name="macAddressVariable")
    def mac_address_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "mac_address_variable")


@pulumi.output_type
class GetTransportWanVpnInterfaceCellularFeatureTunnelInterfaceEncapsulationResult(dict):
    def __init__(__self__, *,
                 encapsulation: _builtins.str,
                 preference: _builtins.int,
                 preference_variable: _builtins.str,
                 weight: _builtins.int,
                 weight_variable: _builtins.str):
        """
        :param _builtins.str encapsulation: Encapsulation
        :param _builtins.int preference: Set preference for TLOC
        :param _builtins.str preference_variable: Variable name
        :param _builtins.int weight: Set weight for TLOC
        :param _builtins.str weight_variable: Variable name
        """
        pulumi.set(__self__, "encapsulation", encapsulation)
        pulumi.set(__self__, "preference", preference)
        pulumi.set(__self__, "preference_variable", preference_variable)
        pulumi.set(__self__, "weight", weight)
        pulumi.set(__self__, "weight_variable", weight_variable)

    @_builtins.property
    @pulumi.getter
    def encapsulation(self) -> _builtins.str:
        """
        Encapsulation
        """
        return pulumi.get(self, "encapsulation")

    @_builtins.property
    @pulumi.getter
    def preference(self) -> _builtins.int:
        """
        Set preference for TLOC
        """
        return pulumi.get(self, "preference")

    @_builtins.property
    @pulumi.getter(name="preferenceVariable")
    def preference_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "preference_variable")

    @_builtins.property
    @pulumi.getter
    def weight(self) -> _builtins.int:
        """
        Set weight for TLOC
        """
        return pulumi.get(self, "weight")

    @_builtins.property
    @pulumi.getter(name="weightVariable")
    def weight_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "weight_variable")


@pulumi.output_type
class GetTransportWanVpnInterfaceEthernetFeatureArpResult(dict):
    def __init__(__self__, *,
                 ip_address: _builtins.str,
                 ip_address_variable: _builtins.str,
                 mac_address: _builtins.str,
                 mac_address_variable: _builtins.str):
        """
        :param _builtins.str ip_address: IP V4 Address
        :param _builtins.str ip_address_variable: Variable name
        :param _builtins.str mac_address: MAC Address
        :param _builtins.str mac_address_variable: Variable name
        """
        pulumi.set(__self__, "ip_address", ip_address)
        pulumi.set(__self__, "ip_address_variable", ip_address_variable)
        pulumi.set(__self__, "mac_address", mac_address)
        pulumi.set(__self__, "mac_address_variable", mac_address_variable)

    @_builtins.property
    @pulumi.getter(name="ipAddress")
    def ip_address(self) -> _builtins.str:
        """
        IP V4 Address
        """
        return pulumi.get(self, "ip_address")

    @_builtins.property
    @pulumi.getter(name="ipAddressVariable")
    def ip_address_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "ip_address_variable")

    @_builtins.property
    @pulumi.getter(name="macAddress")
    def mac_address(self) -> _builtins.str:
        """
        MAC Address
        """
        return pulumi.get(self, "mac_address")

    @_builtins.property
    @pulumi.getter(name="macAddressVariable")
    def mac_address_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "mac_address_variable")


@pulumi.output_type
class GetTransportWanVpnInterfaceEthernetFeatureIpv4SecondaryAddressResult(dict):
    def __init__(__self__, *,
                 address: _builtins.str,
                 address_variable: _builtins.str,
                 subnet_mask: _builtins.str,
                 subnet_mask_variable: _builtins.str):
        """
        :param _builtins.str address: IpV4 Address
        :param _builtins.str address_variable: Variable name
        :param _builtins.str subnet_mask: Subnet Mask
        :param _builtins.str subnet_mask_variable: Variable name
        """
        pulumi.set(__self__, "address", address)
        pulumi.set(__self__, "address_variable", address_variable)
        pulumi.set(__self__, "subnet_mask", subnet_mask)
        pulumi.set(__self__, "subnet_mask_variable", subnet_mask_variable)

    @_builtins.property
    @pulumi.getter
    def address(self) -> _builtins.str:
        """
        IpV4 Address
        """
        return pulumi.get(self, "address")

    @_builtins.property
    @pulumi.getter(name="addressVariable")
    def address_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "address_variable")

    @_builtins.property
    @pulumi.getter(name="subnetMask")
    def subnet_mask(self) -> _builtins.str:
        """
        Subnet Mask
        """
        return pulumi.get(self, "subnet_mask")

    @_builtins.property
    @pulumi.getter(name="subnetMaskVariable")
    def subnet_mask_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "subnet_mask_variable")


@pulumi.output_type
class GetTransportWanVpnInterfaceEthernetFeatureIpv6DhcpSecondaryAddressResult(dict):
    def __init__(__self__, *,
                 address: _builtins.str,
                 address_variable: _builtins.str):
        """
        :param _builtins.str address: IPv6 Address Secondary
        :param _builtins.str address_variable: Variable name
        """
        pulumi.set(__self__, "address", address)
        pulumi.set(__self__, "address_variable", address_variable)

    @_builtins.property
    @pulumi.getter
    def address(self) -> _builtins.str:
        """
        IPv6 Address Secondary
        """
        return pulumi.get(self, "address")

    @_builtins.property
    @pulumi.getter(name="addressVariable")
    def address_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "address_variable")


@pulumi.output_type
class GetTransportWanVpnInterfaceEthernetFeatureIpv6SecondaryAddressResult(dict):
    def __init__(__self__, *,
                 address: _builtins.str,
                 address_variable: _builtins.str):
        """
        :param _builtins.str address: IPv6 Address Secondary
        :param _builtins.str address_variable: Variable name
        """
        pulumi.set(__self__, "address", address)
        pulumi.set(__self__, "address_variable", address_variable)

    @_builtins.property
    @pulumi.getter
    def address(self) -> _builtins.str:
        """
        IPv6 Address Secondary
        """
        return pulumi.get(self, "address")

    @_builtins.property
    @pulumi.getter(name="addressVariable")
    def address_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "address_variable")


@pulumi.output_type
class GetTransportWanVpnInterfaceEthernetFeatureNewStaticNatResult(dict):
    def __init__(__self__, *,
                 direction: _builtins.str,
                 source_ip: _builtins.str,
                 source_ip_variable: _builtins.str,
                 source_vpn: _builtins.int,
                 source_vpn_variable: _builtins.str,
                 translated_ip: _builtins.str,
                 translated_ip_variable: _builtins.str):
        """
        :param _builtins.str direction: Direction of static NAT translation
        :param _builtins.str source_ip: Source IP address to be translated
        :param _builtins.str source_ip_variable: Variable name
        :param _builtins.int source_vpn: Source VPN ID
        :param _builtins.str source_vpn_variable: Variable name
        :param _builtins.str translated_ip: Statically translated source IP address
        :param _builtins.str translated_ip_variable: Variable name
        """
        pulumi.set(__self__, "direction", direction)
        pulumi.set(__self__, "source_ip", source_ip)
        pulumi.set(__self__, "source_ip_variable", source_ip_variable)
        pulumi.set(__self__, "source_vpn", source_vpn)
        pulumi.set(__self__, "source_vpn_variable", source_vpn_variable)
        pulumi.set(__self__, "translated_ip", translated_ip)
        pulumi.set(__self__, "translated_ip_variable", translated_ip_variable)

    @_builtins.property
    @pulumi.getter
    def direction(self) -> _builtins.str:
        """
        Direction of static NAT translation
        """
        return pulumi.get(self, "direction")

    @_builtins.property
    @pulumi.getter(name="sourceIp")
    def source_ip(self) -> _builtins.str:
        """
        Source IP address to be translated
        """
        return pulumi.get(self, "source_ip")

    @_builtins.property
    @pulumi.getter(name="sourceIpVariable")
    def source_ip_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "source_ip_variable")

    @_builtins.property
    @pulumi.getter(name="sourceVpn")
    def source_vpn(self) -> _builtins.int:
        """
        Source VPN ID
        """
        return pulumi.get(self, "source_vpn")

    @_builtins.property
    @pulumi.getter(name="sourceVpnVariable")
    def source_vpn_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "source_vpn_variable")

    @_builtins.property
    @pulumi.getter(name="translatedIp")
    def translated_ip(self) -> _builtins.str:
        """
        Statically translated source IP address
        """
        return pulumi.get(self, "translated_ip")

    @_builtins.property
    @pulumi.getter(name="translatedIpVariable")
    def translated_ip_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "translated_ip_variable")


@pulumi.output_type
class GetTransportWanVpnInterfaceEthernetFeatureStaticNat66Result(dict):
    def __init__(__self__, *,
                 source_prefix: _builtins.str,
                 source_prefix_variable: _builtins.str,
                 source_vpn_id: _builtins.int,
                 source_vpn_id_variable: _builtins.str,
                 translated_source_prefix: _builtins.str,
                 translated_source_prefix_variable: _builtins.str):
        """
        :param _builtins.str source_prefix: Source Prefix
        :param _builtins.str source_prefix_variable: Variable name
        :param _builtins.int source_vpn_id: Source VPN ID
        :param _builtins.str source_vpn_id_variable: Variable name
        :param _builtins.str translated_source_prefix: Translated Source Prefix
        :param _builtins.str translated_source_prefix_variable: Variable name
        """
        pulumi.set(__self__, "source_prefix", source_prefix)
        pulumi.set(__self__, "source_prefix_variable", source_prefix_variable)
        pulumi.set(__self__, "source_vpn_id", source_vpn_id)
        pulumi.set(__self__, "source_vpn_id_variable", source_vpn_id_variable)
        pulumi.set(__self__, "translated_source_prefix", translated_source_prefix)
        pulumi.set(__self__, "translated_source_prefix_variable", translated_source_prefix_variable)

    @_builtins.property
    @pulumi.getter(name="sourcePrefix")
    def source_prefix(self) -> _builtins.str:
        """
        Source Prefix
        """
        return pulumi.get(self, "source_prefix")

    @_builtins.property
    @pulumi.getter(name="sourcePrefixVariable")
    def source_prefix_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "source_prefix_variable")

    @_builtins.property
    @pulumi.getter(name="sourceVpnId")
    def source_vpn_id(self) -> _builtins.int:
        """
        Source VPN ID
        """
        return pulumi.get(self, "source_vpn_id")

    @_builtins.property
    @pulumi.getter(name="sourceVpnIdVariable")
    def source_vpn_id_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "source_vpn_id_variable")

    @_builtins.property
    @pulumi.getter(name="translatedSourcePrefix")
    def translated_source_prefix(self) -> _builtins.str:
        """
        Translated Source Prefix
        """
        return pulumi.get(self, "translated_source_prefix")

    @_builtins.property
    @pulumi.getter(name="translatedSourcePrefixVariable")
    def translated_source_prefix_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "translated_source_prefix_variable")


@pulumi.output_type
class GetTransportWanVpnInterfaceEthernetFeatureTunnelInterfaceEncapsulationResult(dict):
    def __init__(__self__, *,
                 encapsulation: _builtins.str,
                 preference: _builtins.int,
                 preference_variable: _builtins.str,
                 weight: _builtins.int,
                 weight_variable: _builtins.str):
        """
        :param _builtins.str encapsulation: Encapsulation
        :param _builtins.int preference: Set preference for TLOC
        :param _builtins.str preference_variable: Variable name
        :param _builtins.int weight: Set weight for TLOC
        :param _builtins.str weight_variable: Variable name
        """
        pulumi.set(__self__, "encapsulation", encapsulation)
        pulumi.set(__self__, "preference", preference)
        pulumi.set(__self__, "preference_variable", preference_variable)
        pulumi.set(__self__, "weight", weight)
        pulumi.set(__self__, "weight_variable", weight_variable)

    @_builtins.property
    @pulumi.getter
    def encapsulation(self) -> _builtins.str:
        """
        Encapsulation
        """
        return pulumi.get(self, "encapsulation")

    @_builtins.property
    @pulumi.getter
    def preference(self) -> _builtins.int:
        """
        Set preference for TLOC
        """
        return pulumi.get(self, "preference")

    @_builtins.property
    @pulumi.getter(name="preferenceVariable")
    def preference_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "preference_variable")

    @_builtins.property
    @pulumi.getter
    def weight(self) -> _builtins.int:
        """
        Set weight for TLOC
        """
        return pulumi.get(self, "weight")

    @_builtins.property
    @pulumi.getter(name="weightVariable")
    def weight_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "weight_variable")


@pulumi.output_type
class GetTransportWanVpnInterfaceT1E1SerialFeatureTunnelInterfaceEncapsulationResult(dict):
    def __init__(__self__, *,
                 encapsulation: _builtins.str,
                 preference: _builtins.int,
                 preference_variable: _builtins.str,
                 weight: _builtins.int,
                 weight_variable: _builtins.str):
        """
        :param _builtins.str encapsulation: Encapsulation
        :param _builtins.int preference: Set preference for TLOC
        :param _builtins.str preference_variable: Variable name
        :param _builtins.int weight: Set weight for TLOC
        :param _builtins.str weight_variable: Variable name
        """
        pulumi.set(__self__, "encapsulation", encapsulation)
        pulumi.set(__self__, "preference", preference)
        pulumi.set(__self__, "preference_variable", preference_variable)
        pulumi.set(__self__, "weight", weight)
        pulumi.set(__self__, "weight_variable", weight_variable)

    @_builtins.property
    @pulumi.getter
    def encapsulation(self) -> _builtins.str:
        """
        Encapsulation
        """
        return pulumi.get(self, "encapsulation")

    @_builtins.property
    @pulumi.getter
    def preference(self) -> _builtins.int:
        """
        Set preference for TLOC
        """
        return pulumi.get(self, "preference")

    @_builtins.property
    @pulumi.getter(name="preferenceVariable")
    def preference_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "preference_variable")

    @_builtins.property
    @pulumi.getter
    def weight(self) -> _builtins.int:
        """
        Set weight for TLOC
        """
        return pulumi.get(self, "weight")

    @_builtins.property
    @pulumi.getter(name="weightVariable")
    def weight_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "weight_variable")


@pulumi.output_type
class GetUrlFilteringPolicyDefinitionLoggingResult(dict):
    def __init__(__self__, *,
                 external_syslog_server_ip: _builtins.str,
                 external_syslog_server_vpn: _builtins.str):
        """
        :param _builtins.str external_syslog_server_ip: External Syslog Server IP
        :param _builtins.str external_syslog_server_vpn: External Syslog Server VPN
        """
        pulumi.set(__self__, "external_syslog_server_ip", external_syslog_server_ip)
        pulumi.set(__self__, "external_syslog_server_vpn", external_syslog_server_vpn)

    @_builtins.property
    @pulumi.getter(name="externalSyslogServerIp")
    def external_syslog_server_ip(self) -> _builtins.str:
        """
        External Syslog Server IP
        """
        return pulumi.get(self, "external_syslog_server_ip")

    @_builtins.property
    @pulumi.getter(name="externalSyslogServerVpn")
    def external_syslog_server_vpn(self) -> _builtins.str:
        """
        External Syslog Server VPN
        """
        return pulumi.get(self, "external_syslog_server_vpn")


@pulumi.output_type
class GetVedgeInventoryDeviceResult(dict):
    def __init__(__self__, *,
                 chassis_number: _builtins.str,
                 device_type: _builtins.str,
                 hostname: _builtins.str,
                 serial_number: _builtins.str,
                 site_id: _builtins.str,
                 validity: _builtins.str):
        """
        :param _builtins.str chassis_number: Chassis Number
        :param _builtins.str device_type: Type of device
        :param _builtins.str hostname: Hostname for respective device
        :param _builtins.str serial_number: Serial number for device. Could be board or virtual identifier
        :param _builtins.str site_id: Site id for respective device
        :param _builtins.str validity: Validity of device
        """
        pulumi.set(__self__, "chassis_number", chassis_number)
        pulumi.set(__self__, "device_type", device_type)
        pulumi.set(__self__, "hostname", hostname)
        pulumi.set(__self__, "serial_number", serial_number)
        pulumi.set(__self__, "site_id", site_id)
        pulumi.set(__self__, "validity", validity)

    @_builtins.property
    @pulumi.getter(name="chassisNumber")
    def chassis_number(self) -> _builtins.str:
        """
        Chassis Number
        """
        return pulumi.get(self, "chassis_number")

    @_builtins.property
    @pulumi.getter(name="deviceType")
    def device_type(self) -> _builtins.str:
        """
        Type of device
        """
        return pulumi.get(self, "device_type")

    @_builtins.property
    @pulumi.getter
    def hostname(self) -> _builtins.str:
        """
        Hostname for respective device
        """
        return pulumi.get(self, "hostname")

    @_builtins.property
    @pulumi.getter(name="serialNumber")
    def serial_number(self) -> _builtins.str:
        """
        Serial number for device. Could be board or virtual identifier
        """
        return pulumi.get(self, "serial_number")

    @_builtins.property
    @pulumi.getter(name="siteId")
    def site_id(self) -> _builtins.str:
        """
        Site id for respective device
        """
        return pulumi.get(self, "site_id")

    @_builtins.property
    @pulumi.getter
    def validity(self) -> _builtins.str:
        """
        Validity of device
        """
        return pulumi.get(self, "validity")


@pulumi.output_type
class GetVpnInterfaceCellularFeatureTemplateIpv4AccessListResult(dict):
    def __init__(__self__, *,
                 acl_name: _builtins.str,
                 acl_name_variable: _builtins.str,
                 direction: _builtins.str,
                 optional: _builtins.bool):
        """
        :param _builtins.str acl_name: Name of access list
        :param _builtins.str acl_name_variable: Variable name
        :param _builtins.str direction: Direction
        :param _builtins.bool optional: Indicates if list item is considered optional.
        """
        pulumi.set(__self__, "acl_name", acl_name)
        pulumi.set(__self__, "acl_name_variable", acl_name_variable)
        pulumi.set(__self__, "direction", direction)
        pulumi.set(__self__, "optional", optional)

    @_builtins.property
    @pulumi.getter(name="aclName")
    def acl_name(self) -> _builtins.str:
        """
        Name of access list
        """
        return pulumi.get(self, "acl_name")

    @_builtins.property
    @pulumi.getter(name="aclNameVariable")
    def acl_name_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "acl_name_variable")

    @_builtins.property
    @pulumi.getter
    def direction(self) -> _builtins.str:
        """
        Direction
        """
        return pulumi.get(self, "direction")

    @_builtins.property
    @pulumi.getter
    def optional(self) -> _builtins.bool:
        """
        Indicates if list item is considered optional.
        """
        return pulumi.get(self, "optional")


@pulumi.output_type
class GetVpnInterfaceCellularFeatureTemplateIpv6AccessListResult(dict):
    def __init__(__self__, *,
                 acl_name: _builtins.str,
                 acl_name_variable: _builtins.str,
                 direction: _builtins.str,
                 optional: _builtins.bool):
        """
        :param _builtins.str acl_name: Name of access list
        :param _builtins.str acl_name_variable: Variable name
        :param _builtins.str direction: Direction
        :param _builtins.bool optional: Indicates if list item is considered optional.
        """
        pulumi.set(__self__, "acl_name", acl_name)
        pulumi.set(__self__, "acl_name_variable", acl_name_variable)
        pulumi.set(__self__, "direction", direction)
        pulumi.set(__self__, "optional", optional)

    @_builtins.property
    @pulumi.getter(name="aclName")
    def acl_name(self) -> _builtins.str:
        """
        Name of access list
        """
        return pulumi.get(self, "acl_name")

    @_builtins.property
    @pulumi.getter(name="aclNameVariable")
    def acl_name_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "acl_name_variable")

    @_builtins.property
    @pulumi.getter
    def direction(self) -> _builtins.str:
        """
        Direction
        """
        return pulumi.get(self, "direction")

    @_builtins.property
    @pulumi.getter
    def optional(self) -> _builtins.bool:
        """
        Indicates if list item is considered optional.
        """
        return pulumi.get(self, "optional")


@pulumi.output_type
class GetVpnInterfaceCellularFeatureTemplateNatPortForwardResult(dict):
    def __init__(__self__, *,
                 optional: _builtins.bool,
                 port_end_range: _builtins.int,
                 port_start_range: _builtins.int,
                 private_ip_address: _builtins.str,
                 private_ip_address_variable: _builtins.str,
                 private_vpn: _builtins.int,
                 private_vpn_variable: _builtins.str,
                 protocol: _builtins.str):
        """
        :param _builtins.bool optional: Indicates if list item is considered optional.
        :param _builtins.int port_end_range: Ending port of port range
        :param _builtins.int port_start_range: Starting port of port range
        :param _builtins.str private_ip_address: Private IP Address to translate to
        :param _builtins.str private_ip_address_variable: Variable name
        :param _builtins.int private_vpn: VPN in which private IP Address resides
        :param _builtins.str private_vpn_variable: Variable name
        :param _builtins.str protocol: Layer 4 protocol to apply port forwarding to
        """
        pulumi.set(__self__, "optional", optional)
        pulumi.set(__self__, "port_end_range", port_end_range)
        pulumi.set(__self__, "port_start_range", port_start_range)
        pulumi.set(__self__, "private_ip_address", private_ip_address)
        pulumi.set(__self__, "private_ip_address_variable", private_ip_address_variable)
        pulumi.set(__self__, "private_vpn", private_vpn)
        pulumi.set(__self__, "private_vpn_variable", private_vpn_variable)
        pulumi.set(__self__, "protocol", protocol)

    @_builtins.property
    @pulumi.getter
    def optional(self) -> _builtins.bool:
        """
        Indicates if list item is considered optional.
        """
        return pulumi.get(self, "optional")

    @_builtins.property
    @pulumi.getter(name="portEndRange")
    def port_end_range(self) -> _builtins.int:
        """
        Ending port of port range
        """
        return pulumi.get(self, "port_end_range")

    @_builtins.property
    @pulumi.getter(name="portStartRange")
    def port_start_range(self) -> _builtins.int:
        """
        Starting port of port range
        """
        return pulumi.get(self, "port_start_range")

    @_builtins.property
    @pulumi.getter(name="privateIpAddress")
    def private_ip_address(self) -> _builtins.str:
        """
        Private IP Address to translate to
        """
        return pulumi.get(self, "private_ip_address")

    @_builtins.property
    @pulumi.getter(name="privateIpAddressVariable")
    def private_ip_address_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "private_ip_address_variable")

    @_builtins.property
    @pulumi.getter(name="privateVpn")
    def private_vpn(self) -> _builtins.int:
        """
        VPN in which private IP Address resides
        """
        return pulumi.get(self, "private_vpn")

    @_builtins.property
    @pulumi.getter(name="privateVpnVariable")
    def private_vpn_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "private_vpn_variable")

    @_builtins.property
    @pulumi.getter
    def protocol(self) -> _builtins.str:
        """
        Layer 4 protocol to apply port forwarding to
        """
        return pulumi.get(self, "protocol")


@pulumi.output_type
class GetVpnInterfaceCellularFeatureTemplatePolicerResult(dict):
    def __init__(__self__, *,
                 direction: _builtins.str,
                 optional: _builtins.bool,
                 policer_name: _builtins.str):
        """
        :param _builtins.str direction: Direction
        :param _builtins.bool optional: Indicates if list item is considered optional.
        :param _builtins.str policer_name: Name of policer
        """
        pulumi.set(__self__, "direction", direction)
        pulumi.set(__self__, "optional", optional)
        pulumi.set(__self__, "policer_name", policer_name)

    @_builtins.property
    @pulumi.getter
    def direction(self) -> _builtins.str:
        """
        Direction
        """
        return pulumi.get(self, "direction")

    @_builtins.property
    @pulumi.getter
    def optional(self) -> _builtins.bool:
        """
        Indicates if list item is considered optional.
        """
        return pulumi.get(self, "optional")

    @_builtins.property
    @pulumi.getter(name="policerName")
    def policer_name(self) -> _builtins.str:
        """
        Name of policer
        """
        return pulumi.get(self, "policer_name")


@pulumi.output_type
class GetVpnInterfaceCellularFeatureTemplateStaticArpResult(dict):
    def __init__(__self__, *,
                 ip_address: _builtins.str,
                 ip_address_variable: _builtins.str,
                 mac: _builtins.str,
                 mac_variable: _builtins.str,
                 optional: _builtins.bool):
        """
        :param _builtins.str ip_address: IP Address
        :param _builtins.str ip_address_variable: Variable name
        :param _builtins.str mac: MAC address
        :param _builtins.str mac_variable: Variable name
        :param _builtins.bool optional: Indicates if list item is considered optional.
        """
        pulumi.set(__self__, "ip_address", ip_address)
        pulumi.set(__self__, "ip_address_variable", ip_address_variable)
        pulumi.set(__self__, "mac", mac)
        pulumi.set(__self__, "mac_variable", mac_variable)
        pulumi.set(__self__, "optional", optional)

    @_builtins.property
    @pulumi.getter(name="ipAddress")
    def ip_address(self) -> _builtins.str:
        """
        IP Address
        """
        return pulumi.get(self, "ip_address")

    @_builtins.property
    @pulumi.getter(name="ipAddressVariable")
    def ip_address_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "ip_address_variable")

    @_builtins.property
    @pulumi.getter
    def mac(self) -> _builtins.str:
        """
        MAC address
        """
        return pulumi.get(self, "mac")

    @_builtins.property
    @pulumi.getter(name="macVariable")
    def mac_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "mac_variable")

    @_builtins.property
    @pulumi.getter
    def optional(self) -> _builtins.bool:
        """
        Indicates if list item is considered optional.
        """
        return pulumi.get(self, "optional")


@pulumi.output_type
class GetVpnInterfaceCellularFeatureTemplateTunnelInterfaceEncapsulationResult(dict):
    def __init__(__self__, *,
                 encapsulation: _builtins.str,
                 optional: _builtins.bool,
                 preference: _builtins.int,
                 preference_variable: _builtins.str,
                 weight: _builtins.int,
                 weight_variable: _builtins.str):
        """
        :param _builtins.str encapsulation: Encapsulation
        :param _builtins.bool optional: Indicates if list item is considered optional.
        :param _builtins.int preference: Set preference for TLOC
        :param _builtins.str preference_variable: Variable name
        :param _builtins.int weight: Set weight for TLOC
        :param _builtins.str weight_variable: Variable name
        """
        pulumi.set(__self__, "encapsulation", encapsulation)
        pulumi.set(__self__, "optional", optional)
        pulumi.set(__self__, "preference", preference)
        pulumi.set(__self__, "preference_variable", preference_variable)
        pulumi.set(__self__, "weight", weight)
        pulumi.set(__self__, "weight_variable", weight_variable)

    @_builtins.property
    @pulumi.getter
    def encapsulation(self) -> _builtins.str:
        """
        Encapsulation
        """
        return pulumi.get(self, "encapsulation")

    @_builtins.property
    @pulumi.getter
    def optional(self) -> _builtins.bool:
        """
        Indicates if list item is considered optional.
        """
        return pulumi.get(self, "optional")

    @_builtins.property
    @pulumi.getter
    def preference(self) -> _builtins.int:
        """
        Set preference for TLOC
        """
        return pulumi.get(self, "preference")

    @_builtins.property
    @pulumi.getter(name="preferenceVariable")
    def preference_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "preference_variable")

    @_builtins.property
    @pulumi.getter
    def weight(self) -> _builtins.int:
        """
        Set weight for TLOC
        """
        return pulumi.get(self, "weight")

    @_builtins.property
    @pulumi.getter(name="weightVariable")
    def weight_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "weight_variable")


@pulumi.output_type
class GetVpnInterfaceDslIpoeFeatureTemplateAccessListResult(dict):
    def __init__(__self__, *,
                 acl_name: _builtins.str,
                 acl_name_variable: _builtins.str,
                 direction: _builtins.str,
                 optional: _builtins.bool):
        """
        :param _builtins.str acl_name: Name of access list
        :param _builtins.str acl_name_variable: Variable name
        :param _builtins.str direction: Direction
        :param _builtins.bool optional: Indicates if list item is considered optional.
        """
        pulumi.set(__self__, "acl_name", acl_name)
        pulumi.set(__self__, "acl_name_variable", acl_name_variable)
        pulumi.set(__self__, "direction", direction)
        pulumi.set(__self__, "optional", optional)

    @_builtins.property
    @pulumi.getter(name="aclName")
    def acl_name(self) -> _builtins.str:
        """
        Name of access list
        """
        return pulumi.get(self, "acl_name")

    @_builtins.property
    @pulumi.getter(name="aclNameVariable")
    def acl_name_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "acl_name_variable")

    @_builtins.property
    @pulumi.getter
    def direction(self) -> _builtins.str:
        """
        Direction
        """
        return pulumi.get(self, "direction")

    @_builtins.property
    @pulumi.getter
    def optional(self) -> _builtins.bool:
        """
        Indicates if list item is considered optional.
        """
        return pulumi.get(self, "optional")


@pulumi.output_type
class GetVpnInterfaceDslIpoeFeatureTemplateNatPortForwardResult(dict):
    def __init__(__self__, *,
                 optional: _builtins.bool,
                 port_end_range: _builtins.int,
                 port_start_range: _builtins.int,
                 private_ip_address: _builtins.str,
                 private_ip_address_variable: _builtins.str,
                 private_vpn: _builtins.int,
                 private_vpn_variable: _builtins.str,
                 protocol: _builtins.str):
        """
        :param _builtins.bool optional: Indicates if list item is considered optional.
        :param _builtins.int port_end_range: Ending port of port range
        :param _builtins.int port_start_range: Starting port of port range
        :param _builtins.str private_ip_address: Private IP Address to translate to
        :param _builtins.str private_ip_address_variable: Variable name
        :param _builtins.int private_vpn: VPN in which private IP Address resides
        :param _builtins.str private_vpn_variable: Variable name
        :param _builtins.str protocol: Layer 4 protocol to apply port forwarding to
        """
        pulumi.set(__self__, "optional", optional)
        pulumi.set(__self__, "port_end_range", port_end_range)
        pulumi.set(__self__, "port_start_range", port_start_range)
        pulumi.set(__self__, "private_ip_address", private_ip_address)
        pulumi.set(__self__, "private_ip_address_variable", private_ip_address_variable)
        pulumi.set(__self__, "private_vpn", private_vpn)
        pulumi.set(__self__, "private_vpn_variable", private_vpn_variable)
        pulumi.set(__self__, "protocol", protocol)

    @_builtins.property
    @pulumi.getter
    def optional(self) -> _builtins.bool:
        """
        Indicates if list item is considered optional.
        """
        return pulumi.get(self, "optional")

    @_builtins.property
    @pulumi.getter(name="portEndRange")
    def port_end_range(self) -> _builtins.int:
        """
        Ending port of port range
        """
        return pulumi.get(self, "port_end_range")

    @_builtins.property
    @pulumi.getter(name="portStartRange")
    def port_start_range(self) -> _builtins.int:
        """
        Starting port of port range
        """
        return pulumi.get(self, "port_start_range")

    @_builtins.property
    @pulumi.getter(name="privateIpAddress")
    def private_ip_address(self) -> _builtins.str:
        """
        Private IP Address to translate to
        """
        return pulumi.get(self, "private_ip_address")

    @_builtins.property
    @pulumi.getter(name="privateIpAddressVariable")
    def private_ip_address_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "private_ip_address_variable")

    @_builtins.property
    @pulumi.getter(name="privateVpn")
    def private_vpn(self) -> _builtins.int:
        """
        VPN in which private IP Address resides
        """
        return pulumi.get(self, "private_vpn")

    @_builtins.property
    @pulumi.getter(name="privateVpnVariable")
    def private_vpn_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "private_vpn_variable")

    @_builtins.property
    @pulumi.getter
    def protocol(self) -> _builtins.str:
        """
        Layer 4 protocol to apply port forwarding to
        """
        return pulumi.get(self, "protocol")


@pulumi.output_type
class GetVpnInterfaceDslIpoeFeatureTemplatePolicerResult(dict):
    def __init__(__self__, *,
                 direction: _builtins.str,
                 optional: _builtins.bool,
                 policer_name: _builtins.str):
        """
        :param _builtins.str direction: Direction
        :param _builtins.bool optional: Indicates if list item is considered optional.
        :param _builtins.str policer_name: Name of policer
        """
        pulumi.set(__self__, "direction", direction)
        pulumi.set(__self__, "optional", optional)
        pulumi.set(__self__, "policer_name", policer_name)

    @_builtins.property
    @pulumi.getter
    def direction(self) -> _builtins.str:
        """
        Direction
        """
        return pulumi.get(self, "direction")

    @_builtins.property
    @pulumi.getter
    def optional(self) -> _builtins.bool:
        """
        Indicates if list item is considered optional.
        """
        return pulumi.get(self, "optional")

    @_builtins.property
    @pulumi.getter(name="policerName")
    def policer_name(self) -> _builtins.str:
        """
        Name of policer
        """
        return pulumi.get(self, "policer_name")


@pulumi.output_type
class GetVpnInterfaceDslIpoeFeatureTemplateTunnelInterfaceEncapsulationResult(dict):
    def __init__(__self__, *,
                 encapsulation: _builtins.str,
                 optional: _builtins.bool,
                 preference: _builtins.int,
                 preference_variable: _builtins.str,
                 weight: _builtins.int,
                 weight_variable: _builtins.str):
        """
        :param _builtins.str encapsulation: Encapsulation
        :param _builtins.bool optional: Indicates if list item is considered optional.
        :param _builtins.int preference: Set preference for TLOC
        :param _builtins.str preference_variable: Variable name
        :param _builtins.int weight: Set weight for TLOC
        :param _builtins.str weight_variable: Variable name
        """
        pulumi.set(__self__, "encapsulation", encapsulation)
        pulumi.set(__self__, "optional", optional)
        pulumi.set(__self__, "preference", preference)
        pulumi.set(__self__, "preference_variable", preference_variable)
        pulumi.set(__self__, "weight", weight)
        pulumi.set(__self__, "weight_variable", weight_variable)

    @_builtins.property
    @pulumi.getter
    def encapsulation(self) -> _builtins.str:
        """
        Encapsulation
        """
        return pulumi.get(self, "encapsulation")

    @_builtins.property
    @pulumi.getter
    def optional(self) -> _builtins.bool:
        """
        Indicates if list item is considered optional.
        """
        return pulumi.get(self, "optional")

    @_builtins.property
    @pulumi.getter
    def preference(self) -> _builtins.int:
        """
        Set preference for TLOC
        """
        return pulumi.get(self, "preference")

    @_builtins.property
    @pulumi.getter(name="preferenceVariable")
    def preference_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "preference_variable")

    @_builtins.property
    @pulumi.getter
    def weight(self) -> _builtins.int:
        """
        Set weight for TLOC
        """
        return pulumi.get(self, "weight")

    @_builtins.property
    @pulumi.getter(name="weightVariable")
    def weight_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "weight_variable")


@pulumi.output_type
class GetVpnInterfaceDslIpoeFeatureTemplateVdslConfigurationResult(dict):
    def __init__(__self__, *,
                 controller_vdsl_slot: _builtins.str,
                 controller_vdsl_slot_variable: _builtins.str,
                 mode_adsl1: _builtins.bool,
                 mode_adsl2: _builtins.bool,
                 mode_adsl2plus: _builtins.bool,
                 mode_ansi: _builtins.bool,
                 mode_vdsl2: _builtins.bool,
                 optional: _builtins.bool,
                 sra: _builtins.bool,
                 vdsl_modem_configuration: _builtins.str,
                 vdsl_modem_configuration_variable: _builtins.str):
        """
        :param _builtins.str controller_vdsl_slot: Set module slot/subslot/port number
        :param _builtins.str controller_vdsl_slot_variable: Variable name
        :param _builtins.bool mode_adsl1: Set VDSL operating mode to adsl1
        :param _builtins.bool mode_adsl2: Set VDSL operating mode to adsl2
        :param _builtins.bool mode_adsl2plus: Set VDSL operating mode to adsl2plus
        :param _builtins.bool mode_ansi: Set VDSL operating mode to ansi
        :param _builtins.bool mode_vdsl2: Set VDSL operating mode to vdsl2
        :param _builtins.bool optional: Indicates if list item is considered optional.
        :param _builtins.bool sra: Seamless rate adaption
        :param _builtins.str vdsl_modem_configuration: Set module slot/subslot/port number
        :param _builtins.str vdsl_modem_configuration_variable: Variable name
        """
        pulumi.set(__self__, "controller_vdsl_slot", controller_vdsl_slot)
        pulumi.set(__self__, "controller_vdsl_slot_variable", controller_vdsl_slot_variable)
        pulumi.set(__self__, "mode_adsl1", mode_adsl1)
        pulumi.set(__self__, "mode_adsl2", mode_adsl2)
        pulumi.set(__self__, "mode_adsl2plus", mode_adsl2plus)
        pulumi.set(__self__, "mode_ansi", mode_ansi)
        pulumi.set(__self__, "mode_vdsl2", mode_vdsl2)
        pulumi.set(__self__, "optional", optional)
        pulumi.set(__self__, "sra", sra)
        pulumi.set(__self__, "vdsl_modem_configuration", vdsl_modem_configuration)
        pulumi.set(__self__, "vdsl_modem_configuration_variable", vdsl_modem_configuration_variable)

    @_builtins.property
    @pulumi.getter(name="controllerVdslSlot")
    def controller_vdsl_slot(self) -> _builtins.str:
        """
        Set module slot/subslot/port number
        """
        return pulumi.get(self, "controller_vdsl_slot")

    @_builtins.property
    @pulumi.getter(name="controllerVdslSlotVariable")
    def controller_vdsl_slot_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "controller_vdsl_slot_variable")

    @_builtins.property
    @pulumi.getter(name="modeAdsl1")
    def mode_adsl1(self) -> _builtins.bool:
        """
        Set VDSL operating mode to adsl1
        """
        return pulumi.get(self, "mode_adsl1")

    @_builtins.property
    @pulumi.getter(name="modeAdsl2")
    def mode_adsl2(self) -> _builtins.bool:
        """
        Set VDSL operating mode to adsl2
        """
        return pulumi.get(self, "mode_adsl2")

    @_builtins.property
    @pulumi.getter(name="modeAdsl2plus")
    def mode_adsl2plus(self) -> _builtins.bool:
        """
        Set VDSL operating mode to adsl2plus
        """
        return pulumi.get(self, "mode_adsl2plus")

    @_builtins.property
    @pulumi.getter(name="modeAnsi")
    def mode_ansi(self) -> _builtins.bool:
        """
        Set VDSL operating mode to ansi
        """
        return pulumi.get(self, "mode_ansi")

    @_builtins.property
    @pulumi.getter(name="modeVdsl2")
    def mode_vdsl2(self) -> _builtins.bool:
        """
        Set VDSL operating mode to vdsl2
        """
        return pulumi.get(self, "mode_vdsl2")

    @_builtins.property
    @pulumi.getter
    def optional(self) -> _builtins.bool:
        """
        Indicates if list item is considered optional.
        """
        return pulumi.get(self, "optional")

    @_builtins.property
    @pulumi.getter
    def sra(self) -> _builtins.bool:
        """
        Seamless rate adaption
        """
        return pulumi.get(self, "sra")

    @_builtins.property
    @pulumi.getter(name="vdslModemConfiguration")
    def vdsl_modem_configuration(self) -> _builtins.str:
        """
        Set module slot/subslot/port number
        """
        return pulumi.get(self, "vdsl_modem_configuration")

    @_builtins.property
    @pulumi.getter(name="vdslModemConfigurationVariable")
    def vdsl_modem_configuration_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "vdsl_modem_configuration_variable")


@pulumi.output_type
class GetVpnInterfaceDslPppoaFeatureTemplateAccessListResult(dict):
    def __init__(__self__, *,
                 acl_name: _builtins.str,
                 acl_name_variable: _builtins.str,
                 direction: _builtins.str,
                 optional: _builtins.bool):
        """
        :param _builtins.str acl_name: Name of access list
        :param _builtins.str acl_name_variable: Variable name
        :param _builtins.str direction: Direction
        :param _builtins.bool optional: Indicates if list item is considered optional.
        """
        pulumi.set(__self__, "acl_name", acl_name)
        pulumi.set(__self__, "acl_name_variable", acl_name_variable)
        pulumi.set(__self__, "direction", direction)
        pulumi.set(__self__, "optional", optional)

    @_builtins.property
    @pulumi.getter(name="aclName")
    def acl_name(self) -> _builtins.str:
        """
        Name of access list
        """
        return pulumi.get(self, "acl_name")

    @_builtins.property
    @pulumi.getter(name="aclNameVariable")
    def acl_name_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "acl_name_variable")

    @_builtins.property
    @pulumi.getter
    def direction(self) -> _builtins.str:
        """
        Direction
        """
        return pulumi.get(self, "direction")

    @_builtins.property
    @pulumi.getter
    def optional(self) -> _builtins.bool:
        """
        Indicates if list item is considered optional.
        """
        return pulumi.get(self, "optional")


@pulumi.output_type
class GetVpnInterfaceDslPppoaFeatureTemplateNatPortForwardResult(dict):
    def __init__(__self__, *,
                 optional: _builtins.bool,
                 port_end_range: _builtins.int,
                 port_start_range: _builtins.int,
                 private_ip_address: _builtins.str,
                 private_ip_address_variable: _builtins.str,
                 private_vpn: _builtins.int,
                 private_vpn_variable: _builtins.str,
                 protocol: _builtins.str):
        """
        :param _builtins.bool optional: Indicates if list item is considered optional.
        :param _builtins.int port_end_range: Ending port of port range
        :param _builtins.int port_start_range: Starting port of port range
        :param _builtins.str private_ip_address: Private IP Address to translate to
        :param _builtins.str private_ip_address_variable: Variable name
        :param _builtins.int private_vpn: VPN in which private IP Address resides
        :param _builtins.str private_vpn_variable: Variable name
        :param _builtins.str protocol: Layer 4 protocol to apply port forwarding to
        """
        pulumi.set(__self__, "optional", optional)
        pulumi.set(__self__, "port_end_range", port_end_range)
        pulumi.set(__self__, "port_start_range", port_start_range)
        pulumi.set(__self__, "private_ip_address", private_ip_address)
        pulumi.set(__self__, "private_ip_address_variable", private_ip_address_variable)
        pulumi.set(__self__, "private_vpn", private_vpn)
        pulumi.set(__self__, "private_vpn_variable", private_vpn_variable)
        pulumi.set(__self__, "protocol", protocol)

    @_builtins.property
    @pulumi.getter
    def optional(self) -> _builtins.bool:
        """
        Indicates if list item is considered optional.
        """
        return pulumi.get(self, "optional")

    @_builtins.property
    @pulumi.getter(name="portEndRange")
    def port_end_range(self) -> _builtins.int:
        """
        Ending port of port range
        """
        return pulumi.get(self, "port_end_range")

    @_builtins.property
    @pulumi.getter(name="portStartRange")
    def port_start_range(self) -> _builtins.int:
        """
        Starting port of port range
        """
        return pulumi.get(self, "port_start_range")

    @_builtins.property
    @pulumi.getter(name="privateIpAddress")
    def private_ip_address(self) -> _builtins.str:
        """
        Private IP Address to translate to
        """
        return pulumi.get(self, "private_ip_address")

    @_builtins.property
    @pulumi.getter(name="privateIpAddressVariable")
    def private_ip_address_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "private_ip_address_variable")

    @_builtins.property
    @pulumi.getter(name="privateVpn")
    def private_vpn(self) -> _builtins.int:
        """
        VPN in which private IP Address resides
        """
        return pulumi.get(self, "private_vpn")

    @_builtins.property
    @pulumi.getter(name="privateVpnVariable")
    def private_vpn_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "private_vpn_variable")

    @_builtins.property
    @pulumi.getter
    def protocol(self) -> _builtins.str:
        """
        Layer 4 protocol to apply port forwarding to
        """
        return pulumi.get(self, "protocol")


@pulumi.output_type
class GetVpnInterfaceDslPppoaFeatureTemplatePolicerResult(dict):
    def __init__(__self__, *,
                 direction: _builtins.str,
                 optional: _builtins.bool,
                 policer_name: _builtins.str):
        """
        :param _builtins.str direction: Direction
        :param _builtins.bool optional: Indicates if list item is considered optional.
        :param _builtins.str policer_name: Name of policer
        """
        pulumi.set(__self__, "direction", direction)
        pulumi.set(__self__, "optional", optional)
        pulumi.set(__self__, "policer_name", policer_name)

    @_builtins.property
    @pulumi.getter
    def direction(self) -> _builtins.str:
        """
        Direction
        """
        return pulumi.get(self, "direction")

    @_builtins.property
    @pulumi.getter
    def optional(self) -> _builtins.bool:
        """
        Indicates if list item is considered optional.
        """
        return pulumi.get(self, "optional")

    @_builtins.property
    @pulumi.getter(name="policerName")
    def policer_name(self) -> _builtins.str:
        """
        Name of policer
        """
        return pulumi.get(self, "policer_name")


@pulumi.output_type
class GetVpnInterfaceDslPppoaFeatureTemplatePvcResult(dict):
    def __init__(__self__, *,
                 atm_dialer_pool_member: _builtins.int,
                 atm_dialer_pool_member_variable: _builtins.str,
                 atm_encapsulation_aal5mux: _builtins.bool,
                 atm_encapsulation_aal5nlpid: _builtins.bool,
                 atm_encapsulation_aal5snap: _builtins.bool,
                 atm_vbr_nrt_maximum_burst_size: _builtins.int,
                 atm_vbr_nrt_maximum_burst_size_variable: _builtins.str,
                 atm_vbr_nrt_peak_cell_rate: _builtins.int,
                 atm_vbr_nrt_peak_cell_rate_variable: _builtins.str,
                 atm_vbr_nrt_sustainable_cell_rate: _builtins.int,
                 atm_vbr_nrt_sustainable_cell_rate_variable: _builtins.str,
                 atm_vbr_rt_average_cell_rate: _builtins.int,
                 atm_vbr_rt_average_cell_rate_variable: _builtins.str,
                 atm_vbr_rt_maximum_burst_size: _builtins.int,
                 atm_vbr_rt_maximum_burst_size_variable: _builtins.str,
                 atm_vbr_rt_peak_cell_rate: _builtins.int,
                 atm_vbr_rt_peak_cell_rate_variable: _builtins.str,
                 atm_vpi_and_vci: _builtins.str,
                 atm_vpi_and_vci_variable: _builtins.str,
                 optional: _builtins.bool):
        """
        :param _builtins.int atm_dialer_pool_member: Dialer Pool corresponding to this pvc
        :param _builtins.str atm_dialer_pool_member_variable: Variable name
        :param _builtins.bool atm_encapsulation_aal5mux: dialer
        :param _builtins.bool atm_encapsulation_aal5nlpid: aal5nlpid
        :param _builtins.bool atm_encapsulation_aal5snap: aal5snap
        :param _builtins.int atm_vbr_nrt_maximum_burst_size: Maximum Burst Size in Cells
        :param _builtins.str atm_vbr_nrt_maximum_burst_size_variable: Variable name
        :param _builtins.int atm_vbr_nrt_peak_cell_rate: Peak Cell Rate in Kbps
        :param _builtins.str atm_vbr_nrt_peak_cell_rate_variable: Variable name
        :param _builtins.int atm_vbr_nrt_sustainable_cell_rate: Peak Cell Rate in Kbps
        :param _builtins.str atm_vbr_nrt_sustainable_cell_rate_variable: Variable name
        :param _builtins.int atm_vbr_rt_average_cell_rate: Average Cell Rate in Kbps
        :param _builtins.str atm_vbr_rt_average_cell_rate_variable: Variable name
        :param _builtins.int atm_vbr_rt_maximum_burst_size: Maximum Burst Size in number of Cells
        :param _builtins.str atm_vbr_rt_maximum_burst_size_variable: Variable name
        :param _builtins.int atm_vbr_rt_peak_cell_rate: Peak Cell Rate in Kbps
        :param _builtins.str atm_vbr_rt_peak_cell_rate_variable: Variable name
        :param _builtins.str atm_vpi_and_vci: VPI/VCI
        :param _builtins.str atm_vpi_and_vci_variable: Variable name
        :param _builtins.bool optional: Indicates if list item is considered optional.
        """
        pulumi.set(__self__, "atm_dialer_pool_member", atm_dialer_pool_member)
        pulumi.set(__self__, "atm_dialer_pool_member_variable", atm_dialer_pool_member_variable)
        pulumi.set(__self__, "atm_encapsulation_aal5mux", atm_encapsulation_aal5mux)
        pulumi.set(__self__, "atm_encapsulation_aal5nlpid", atm_encapsulation_aal5nlpid)
        pulumi.set(__self__, "atm_encapsulation_aal5snap", atm_encapsulation_aal5snap)
        pulumi.set(__self__, "atm_vbr_nrt_maximum_burst_size", atm_vbr_nrt_maximum_burst_size)
        pulumi.set(__self__, "atm_vbr_nrt_maximum_burst_size_variable", atm_vbr_nrt_maximum_burst_size_variable)
        pulumi.set(__self__, "atm_vbr_nrt_peak_cell_rate", atm_vbr_nrt_peak_cell_rate)
        pulumi.set(__self__, "atm_vbr_nrt_peak_cell_rate_variable", atm_vbr_nrt_peak_cell_rate_variable)
        pulumi.set(__self__, "atm_vbr_nrt_sustainable_cell_rate", atm_vbr_nrt_sustainable_cell_rate)
        pulumi.set(__self__, "atm_vbr_nrt_sustainable_cell_rate_variable", atm_vbr_nrt_sustainable_cell_rate_variable)
        pulumi.set(__self__, "atm_vbr_rt_average_cell_rate", atm_vbr_rt_average_cell_rate)
        pulumi.set(__self__, "atm_vbr_rt_average_cell_rate_variable", atm_vbr_rt_average_cell_rate_variable)
        pulumi.set(__self__, "atm_vbr_rt_maximum_burst_size", atm_vbr_rt_maximum_burst_size)
        pulumi.set(__self__, "atm_vbr_rt_maximum_burst_size_variable", atm_vbr_rt_maximum_burst_size_variable)
        pulumi.set(__self__, "atm_vbr_rt_peak_cell_rate", atm_vbr_rt_peak_cell_rate)
        pulumi.set(__self__, "atm_vbr_rt_peak_cell_rate_variable", atm_vbr_rt_peak_cell_rate_variable)
        pulumi.set(__self__, "atm_vpi_and_vci", atm_vpi_and_vci)
        pulumi.set(__self__, "atm_vpi_and_vci_variable", atm_vpi_and_vci_variable)
        pulumi.set(__self__, "optional", optional)

    @_builtins.property
    @pulumi.getter(name="atmDialerPoolMember")
    def atm_dialer_pool_member(self) -> _builtins.int:
        """
        Dialer Pool corresponding to this pvc
        """
        return pulumi.get(self, "atm_dialer_pool_member")

    @_builtins.property
    @pulumi.getter(name="atmDialerPoolMemberVariable")
    def atm_dialer_pool_member_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "atm_dialer_pool_member_variable")

    @_builtins.property
    @pulumi.getter(name="atmEncapsulationAal5mux")
    def atm_encapsulation_aal5mux(self) -> _builtins.bool:
        """
        dialer
        """
        return pulumi.get(self, "atm_encapsulation_aal5mux")

    @_builtins.property
    @pulumi.getter(name="atmEncapsulationAal5nlpid")
    def atm_encapsulation_aal5nlpid(self) -> _builtins.bool:
        """
        aal5nlpid
        """
        return pulumi.get(self, "atm_encapsulation_aal5nlpid")

    @_builtins.property
    @pulumi.getter(name="atmEncapsulationAal5snap")
    def atm_encapsulation_aal5snap(self) -> _builtins.bool:
        """
        aal5snap
        """
        return pulumi.get(self, "atm_encapsulation_aal5snap")

    @_builtins.property
    @pulumi.getter(name="atmVbrNrtMaximumBurstSize")
    def atm_vbr_nrt_maximum_burst_size(self) -> _builtins.int:
        """
        Maximum Burst Size in Cells
        """
        return pulumi.get(self, "atm_vbr_nrt_maximum_burst_size")

    @_builtins.property
    @pulumi.getter(name="atmVbrNrtMaximumBurstSizeVariable")
    def atm_vbr_nrt_maximum_burst_size_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "atm_vbr_nrt_maximum_burst_size_variable")

    @_builtins.property
    @pulumi.getter(name="atmVbrNrtPeakCellRate")
    def atm_vbr_nrt_peak_cell_rate(self) -> _builtins.int:
        """
        Peak Cell Rate in Kbps
        """
        return pulumi.get(self, "atm_vbr_nrt_peak_cell_rate")

    @_builtins.property
    @pulumi.getter(name="atmVbrNrtPeakCellRateVariable")
    def atm_vbr_nrt_peak_cell_rate_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "atm_vbr_nrt_peak_cell_rate_variable")

    @_builtins.property
    @pulumi.getter(name="atmVbrNrtSustainableCellRate")
    def atm_vbr_nrt_sustainable_cell_rate(self) -> _builtins.int:
        """
        Peak Cell Rate in Kbps
        """
        return pulumi.get(self, "atm_vbr_nrt_sustainable_cell_rate")

    @_builtins.property
    @pulumi.getter(name="atmVbrNrtSustainableCellRateVariable")
    def atm_vbr_nrt_sustainable_cell_rate_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "atm_vbr_nrt_sustainable_cell_rate_variable")

    @_builtins.property
    @pulumi.getter(name="atmVbrRtAverageCellRate")
    def atm_vbr_rt_average_cell_rate(self) -> _builtins.int:
        """
        Average Cell Rate in Kbps
        """
        return pulumi.get(self, "atm_vbr_rt_average_cell_rate")

    @_builtins.property
    @pulumi.getter(name="atmVbrRtAverageCellRateVariable")
    def atm_vbr_rt_average_cell_rate_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "atm_vbr_rt_average_cell_rate_variable")

    @_builtins.property
    @pulumi.getter(name="atmVbrRtMaximumBurstSize")
    def atm_vbr_rt_maximum_burst_size(self) -> _builtins.int:
        """
        Maximum Burst Size in number of Cells
        """
        return pulumi.get(self, "atm_vbr_rt_maximum_burst_size")

    @_builtins.property
    @pulumi.getter(name="atmVbrRtMaximumBurstSizeVariable")
    def atm_vbr_rt_maximum_burst_size_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "atm_vbr_rt_maximum_burst_size_variable")

    @_builtins.property
    @pulumi.getter(name="atmVbrRtPeakCellRate")
    def atm_vbr_rt_peak_cell_rate(self) -> _builtins.int:
        """
        Peak Cell Rate in Kbps
        """
        return pulumi.get(self, "atm_vbr_rt_peak_cell_rate")

    @_builtins.property
    @pulumi.getter(name="atmVbrRtPeakCellRateVariable")
    def atm_vbr_rt_peak_cell_rate_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "atm_vbr_rt_peak_cell_rate_variable")

    @_builtins.property
    @pulumi.getter(name="atmVpiAndVci")
    def atm_vpi_and_vci(self) -> _builtins.str:
        """
        VPI/VCI
        """
        return pulumi.get(self, "atm_vpi_and_vci")

    @_builtins.property
    @pulumi.getter(name="atmVpiAndVciVariable")
    def atm_vpi_and_vci_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "atm_vpi_and_vci_variable")

    @_builtins.property
    @pulumi.getter
    def optional(self) -> _builtins.bool:
        """
        Indicates if list item is considered optional.
        """
        return pulumi.get(self, "optional")


@pulumi.output_type
class GetVpnInterfaceDslPppoaFeatureTemplateTunnelInterfaceEncapsulationResult(dict):
    def __init__(__self__, *,
                 encapsulation: _builtins.str,
                 optional: _builtins.bool,
                 preference: _builtins.int,
                 preference_variable: _builtins.str,
                 weight: _builtins.int,
                 weight_variable: _builtins.str):
        """
        :param _builtins.str encapsulation: Encapsulation
        :param _builtins.bool optional: Indicates if list item is considered optional.
        :param _builtins.int preference: Set preference for TLOC
        :param _builtins.str preference_variable: Variable name
        :param _builtins.int weight: Set weight for TLOC
        :param _builtins.str weight_variable: Variable name
        """
        pulumi.set(__self__, "encapsulation", encapsulation)
        pulumi.set(__self__, "optional", optional)
        pulumi.set(__self__, "preference", preference)
        pulumi.set(__self__, "preference_variable", preference_variable)
        pulumi.set(__self__, "weight", weight)
        pulumi.set(__self__, "weight_variable", weight_variable)

    @_builtins.property
    @pulumi.getter
    def encapsulation(self) -> _builtins.str:
        """
        Encapsulation
        """
        return pulumi.get(self, "encapsulation")

    @_builtins.property
    @pulumi.getter
    def optional(self) -> _builtins.bool:
        """
        Indicates if list item is considered optional.
        """
        return pulumi.get(self, "optional")

    @_builtins.property
    @pulumi.getter
    def preference(self) -> _builtins.int:
        """
        Set preference for TLOC
        """
        return pulumi.get(self, "preference")

    @_builtins.property
    @pulumi.getter(name="preferenceVariable")
    def preference_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "preference_variable")

    @_builtins.property
    @pulumi.getter
    def weight(self) -> _builtins.int:
        """
        Set weight for TLOC
        """
        return pulumi.get(self, "weight")

    @_builtins.property
    @pulumi.getter(name="weightVariable")
    def weight_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "weight_variable")


@pulumi.output_type
class GetVpnInterfaceDslPppoaFeatureTemplateVdslConfigurationResult(dict):
    def __init__(__self__, *,
                 controller_vdsl_slot: _builtins.str,
                 controller_vdsl_slot_variable: _builtins.str,
                 mode_adsl1: _builtins.bool,
                 mode_adsl2: _builtins.bool,
                 mode_adsl2plus: _builtins.bool,
                 mode_ansi: _builtins.bool,
                 mode_vdsl2: _builtins.bool,
                 optional: _builtins.bool,
                 sra: _builtins.bool,
                 vdsl_modem_configuration: _builtins.str,
                 vdsl_modem_configuration_variable: _builtins.str):
        """
        :param _builtins.str controller_vdsl_slot: Set module slot/subslot/port number
        :param _builtins.str controller_vdsl_slot_variable: Variable name
        :param _builtins.bool mode_adsl1: Set VDSL operating mode to adsl1
        :param _builtins.bool mode_adsl2: Set VDSL operating mode to adsl2
        :param _builtins.bool mode_adsl2plus: Set VDSL operating mode to adsl2plus
        :param _builtins.bool mode_ansi: Set VDSL operating mode to ansi
        :param _builtins.bool mode_vdsl2: Set VDSL operating mode to vdsl2
        :param _builtins.bool optional: Indicates if list item is considered optional.
        :param _builtins.bool sra: Seamless rate adaption
        :param _builtins.str vdsl_modem_configuration: Set module slot/subslot/port number
        :param _builtins.str vdsl_modem_configuration_variable: Variable name
        """
        pulumi.set(__self__, "controller_vdsl_slot", controller_vdsl_slot)
        pulumi.set(__self__, "controller_vdsl_slot_variable", controller_vdsl_slot_variable)
        pulumi.set(__self__, "mode_adsl1", mode_adsl1)
        pulumi.set(__self__, "mode_adsl2", mode_adsl2)
        pulumi.set(__self__, "mode_adsl2plus", mode_adsl2plus)
        pulumi.set(__self__, "mode_ansi", mode_ansi)
        pulumi.set(__self__, "mode_vdsl2", mode_vdsl2)
        pulumi.set(__self__, "optional", optional)
        pulumi.set(__self__, "sra", sra)
        pulumi.set(__self__, "vdsl_modem_configuration", vdsl_modem_configuration)
        pulumi.set(__self__, "vdsl_modem_configuration_variable", vdsl_modem_configuration_variable)

    @_builtins.property
    @pulumi.getter(name="controllerVdslSlot")
    def controller_vdsl_slot(self) -> _builtins.str:
        """
        Set module slot/subslot/port number
        """
        return pulumi.get(self, "controller_vdsl_slot")

    @_builtins.property
    @pulumi.getter(name="controllerVdslSlotVariable")
    def controller_vdsl_slot_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "controller_vdsl_slot_variable")

    @_builtins.property
    @pulumi.getter(name="modeAdsl1")
    def mode_adsl1(self) -> _builtins.bool:
        """
        Set VDSL operating mode to adsl1
        """
        return pulumi.get(self, "mode_adsl1")

    @_builtins.property
    @pulumi.getter(name="modeAdsl2")
    def mode_adsl2(self) -> _builtins.bool:
        """
        Set VDSL operating mode to adsl2
        """
        return pulumi.get(self, "mode_adsl2")

    @_builtins.property
    @pulumi.getter(name="modeAdsl2plus")
    def mode_adsl2plus(self) -> _builtins.bool:
        """
        Set VDSL operating mode to adsl2plus
        """
        return pulumi.get(self, "mode_adsl2plus")

    @_builtins.property
    @pulumi.getter(name="modeAnsi")
    def mode_ansi(self) -> _builtins.bool:
        """
        Set VDSL operating mode to ansi
        """
        return pulumi.get(self, "mode_ansi")

    @_builtins.property
    @pulumi.getter(name="modeVdsl2")
    def mode_vdsl2(self) -> _builtins.bool:
        """
        Set VDSL operating mode to vdsl2
        """
        return pulumi.get(self, "mode_vdsl2")

    @_builtins.property
    @pulumi.getter
    def optional(self) -> _builtins.bool:
        """
        Indicates if list item is considered optional.
        """
        return pulumi.get(self, "optional")

    @_builtins.property
    @pulumi.getter
    def sra(self) -> _builtins.bool:
        """
        Seamless rate adaption
        """
        return pulumi.get(self, "sra")

    @_builtins.property
    @pulumi.getter(name="vdslModemConfiguration")
    def vdsl_modem_configuration(self) -> _builtins.str:
        """
        Set module slot/subslot/port number
        """
        return pulumi.get(self, "vdsl_modem_configuration")

    @_builtins.property
    @pulumi.getter(name="vdslModemConfigurationVariable")
    def vdsl_modem_configuration_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "vdsl_modem_configuration_variable")


@pulumi.output_type
class GetVpnInterfaceDslPppoeFeatureTemplateAccessListResult(dict):
    def __init__(__self__, *,
                 acl_name: _builtins.str,
                 acl_name_variable: _builtins.str,
                 direction: _builtins.str,
                 optional: _builtins.bool):
        """
        :param _builtins.str acl_name: Name of access list
        :param _builtins.str acl_name_variable: Variable name
        :param _builtins.str direction: Direction
        :param _builtins.bool optional: Indicates if list item is considered optional.
        """
        pulumi.set(__self__, "acl_name", acl_name)
        pulumi.set(__self__, "acl_name_variable", acl_name_variable)
        pulumi.set(__self__, "direction", direction)
        pulumi.set(__self__, "optional", optional)

    @_builtins.property
    @pulumi.getter(name="aclName")
    def acl_name(self) -> _builtins.str:
        """
        Name of access list
        """
        return pulumi.get(self, "acl_name")

    @_builtins.property
    @pulumi.getter(name="aclNameVariable")
    def acl_name_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "acl_name_variable")

    @_builtins.property
    @pulumi.getter
    def direction(self) -> _builtins.str:
        """
        Direction
        """
        return pulumi.get(self, "direction")

    @_builtins.property
    @pulumi.getter
    def optional(self) -> _builtins.bool:
        """
        Indicates if list item is considered optional.
        """
        return pulumi.get(self, "optional")


@pulumi.output_type
class GetVpnInterfaceDslPppoeFeatureTemplateNatPortForwardResult(dict):
    def __init__(__self__, *,
                 optional: _builtins.bool,
                 port_end_range: _builtins.int,
                 port_start_range: _builtins.int,
                 private_ip_address: _builtins.str,
                 private_ip_address_variable: _builtins.str,
                 private_vpn: _builtins.int,
                 private_vpn_variable: _builtins.str,
                 protocol: _builtins.str):
        """
        :param _builtins.bool optional: Indicates if list item is considered optional.
        :param _builtins.int port_end_range: Ending port of port range
        :param _builtins.int port_start_range: Starting port of port range
        :param _builtins.str private_ip_address: Private IP Address to translate to
        :param _builtins.str private_ip_address_variable: Variable name
        :param _builtins.int private_vpn: VPN in which private IP Address resides
        :param _builtins.str private_vpn_variable: Variable name
        :param _builtins.str protocol: Layer 4 protocol to apply port forwarding to
        """
        pulumi.set(__self__, "optional", optional)
        pulumi.set(__self__, "port_end_range", port_end_range)
        pulumi.set(__self__, "port_start_range", port_start_range)
        pulumi.set(__self__, "private_ip_address", private_ip_address)
        pulumi.set(__self__, "private_ip_address_variable", private_ip_address_variable)
        pulumi.set(__self__, "private_vpn", private_vpn)
        pulumi.set(__self__, "private_vpn_variable", private_vpn_variable)
        pulumi.set(__self__, "protocol", protocol)

    @_builtins.property
    @pulumi.getter
    def optional(self) -> _builtins.bool:
        """
        Indicates if list item is considered optional.
        """
        return pulumi.get(self, "optional")

    @_builtins.property
    @pulumi.getter(name="portEndRange")
    def port_end_range(self) -> _builtins.int:
        """
        Ending port of port range
        """
        return pulumi.get(self, "port_end_range")

    @_builtins.property
    @pulumi.getter(name="portStartRange")
    def port_start_range(self) -> _builtins.int:
        """
        Starting port of port range
        """
        return pulumi.get(self, "port_start_range")

    @_builtins.property
    @pulumi.getter(name="privateIpAddress")
    def private_ip_address(self) -> _builtins.str:
        """
        Private IP Address to translate to
        """
        return pulumi.get(self, "private_ip_address")

    @_builtins.property
    @pulumi.getter(name="privateIpAddressVariable")
    def private_ip_address_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "private_ip_address_variable")

    @_builtins.property
    @pulumi.getter(name="privateVpn")
    def private_vpn(self) -> _builtins.int:
        """
        VPN in which private IP Address resides
        """
        return pulumi.get(self, "private_vpn")

    @_builtins.property
    @pulumi.getter(name="privateVpnVariable")
    def private_vpn_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "private_vpn_variable")

    @_builtins.property
    @pulumi.getter
    def protocol(self) -> _builtins.str:
        """
        Layer 4 protocol to apply port forwarding to
        """
        return pulumi.get(self, "protocol")


@pulumi.output_type
class GetVpnInterfaceDslPppoeFeatureTemplatePolicerResult(dict):
    def __init__(__self__, *,
                 direction: _builtins.str,
                 optional: _builtins.bool,
                 policer_name: _builtins.str):
        """
        :param _builtins.str direction: Direction
        :param _builtins.bool optional: Indicates if list item is considered optional.
        :param _builtins.str policer_name: Name of policer
        """
        pulumi.set(__self__, "direction", direction)
        pulumi.set(__self__, "optional", optional)
        pulumi.set(__self__, "policer_name", policer_name)

    @_builtins.property
    @pulumi.getter
    def direction(self) -> _builtins.str:
        """
        Direction
        """
        return pulumi.get(self, "direction")

    @_builtins.property
    @pulumi.getter
    def optional(self) -> _builtins.bool:
        """
        Indicates if list item is considered optional.
        """
        return pulumi.get(self, "optional")

    @_builtins.property
    @pulumi.getter(name="policerName")
    def policer_name(self) -> _builtins.str:
        """
        Name of policer
        """
        return pulumi.get(self, "policer_name")


@pulumi.output_type
class GetVpnInterfaceDslPppoeFeatureTemplateTunnelInterfaceEncapsulationResult(dict):
    def __init__(__self__, *,
                 encapsulation: _builtins.str,
                 optional: _builtins.bool,
                 preference: _builtins.int,
                 preference_variable: _builtins.str,
                 weight: _builtins.int,
                 weight_variable: _builtins.str):
        """
        :param _builtins.str encapsulation: Encapsulation
        :param _builtins.bool optional: Indicates if list item is considered optional.
        :param _builtins.int preference: Set preference for TLOC
        :param _builtins.str preference_variable: Variable name
        :param _builtins.int weight: Set weight for TLOC
        :param _builtins.str weight_variable: Variable name
        """
        pulumi.set(__self__, "encapsulation", encapsulation)
        pulumi.set(__self__, "optional", optional)
        pulumi.set(__self__, "preference", preference)
        pulumi.set(__self__, "preference_variable", preference_variable)
        pulumi.set(__self__, "weight", weight)
        pulumi.set(__self__, "weight_variable", weight_variable)

    @_builtins.property
    @pulumi.getter
    def encapsulation(self) -> _builtins.str:
        """
        Encapsulation
        """
        return pulumi.get(self, "encapsulation")

    @_builtins.property
    @pulumi.getter
    def optional(self) -> _builtins.bool:
        """
        Indicates if list item is considered optional.
        """
        return pulumi.get(self, "optional")

    @_builtins.property
    @pulumi.getter
    def preference(self) -> _builtins.int:
        """
        Set preference for TLOC
        """
        return pulumi.get(self, "preference")

    @_builtins.property
    @pulumi.getter(name="preferenceVariable")
    def preference_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "preference_variable")

    @_builtins.property
    @pulumi.getter
    def weight(self) -> _builtins.int:
        """
        Set weight for TLOC
        """
        return pulumi.get(self, "weight")

    @_builtins.property
    @pulumi.getter(name="weightVariable")
    def weight_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "weight_variable")


@pulumi.output_type
class GetVpnInterfaceDslPppoeFeatureTemplateVdslConfigurationResult(dict):
    def __init__(__self__, *,
                 controller_vdsl_slot: _builtins.str,
                 controller_vdsl_slot_variable: _builtins.str,
                 mode_adsl1: _builtins.bool,
                 mode_adsl2: _builtins.bool,
                 mode_adsl2plus: _builtins.bool,
                 mode_ansi: _builtins.bool,
                 mode_vdsl2: _builtins.bool,
                 optional: _builtins.bool,
                 sra: _builtins.bool,
                 vdsl_modem_configuration: _builtins.str,
                 vdsl_modem_configuration_variable: _builtins.str):
        """
        :param _builtins.str controller_vdsl_slot: Set module slot/subslot/port number
        :param _builtins.str controller_vdsl_slot_variable: Variable name
        :param _builtins.bool mode_adsl1: Set VDSL operating mode to adsl1
        :param _builtins.bool mode_adsl2: Set VDSL operating mode to adsl2
        :param _builtins.bool mode_adsl2plus: Set VDSL operating mode to adsl2plus
        :param _builtins.bool mode_ansi: Set VDSL operating mode to ansi
        :param _builtins.bool mode_vdsl2: Set VDSL operating mode to vdsl2
        :param _builtins.bool optional: Indicates if list item is considered optional.
        :param _builtins.bool sra: Seamless rate adaption
        :param _builtins.str vdsl_modem_configuration: Set module slot/subslot/port number
        :param _builtins.str vdsl_modem_configuration_variable: Variable name
        """
        pulumi.set(__self__, "controller_vdsl_slot", controller_vdsl_slot)
        pulumi.set(__self__, "controller_vdsl_slot_variable", controller_vdsl_slot_variable)
        pulumi.set(__self__, "mode_adsl1", mode_adsl1)
        pulumi.set(__self__, "mode_adsl2", mode_adsl2)
        pulumi.set(__self__, "mode_adsl2plus", mode_adsl2plus)
        pulumi.set(__self__, "mode_ansi", mode_ansi)
        pulumi.set(__self__, "mode_vdsl2", mode_vdsl2)
        pulumi.set(__self__, "optional", optional)
        pulumi.set(__self__, "sra", sra)
        pulumi.set(__self__, "vdsl_modem_configuration", vdsl_modem_configuration)
        pulumi.set(__self__, "vdsl_modem_configuration_variable", vdsl_modem_configuration_variable)

    @_builtins.property
    @pulumi.getter(name="controllerVdslSlot")
    def controller_vdsl_slot(self) -> _builtins.str:
        """
        Set module slot/subslot/port number
        """
        return pulumi.get(self, "controller_vdsl_slot")

    @_builtins.property
    @pulumi.getter(name="controllerVdslSlotVariable")
    def controller_vdsl_slot_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "controller_vdsl_slot_variable")

    @_builtins.property
    @pulumi.getter(name="modeAdsl1")
    def mode_adsl1(self) -> _builtins.bool:
        """
        Set VDSL operating mode to adsl1
        """
        return pulumi.get(self, "mode_adsl1")

    @_builtins.property
    @pulumi.getter(name="modeAdsl2")
    def mode_adsl2(self) -> _builtins.bool:
        """
        Set VDSL operating mode to adsl2
        """
        return pulumi.get(self, "mode_adsl2")

    @_builtins.property
    @pulumi.getter(name="modeAdsl2plus")
    def mode_adsl2plus(self) -> _builtins.bool:
        """
        Set VDSL operating mode to adsl2plus
        """
        return pulumi.get(self, "mode_adsl2plus")

    @_builtins.property
    @pulumi.getter(name="modeAnsi")
    def mode_ansi(self) -> _builtins.bool:
        """
        Set VDSL operating mode to ansi
        """
        return pulumi.get(self, "mode_ansi")

    @_builtins.property
    @pulumi.getter(name="modeVdsl2")
    def mode_vdsl2(self) -> _builtins.bool:
        """
        Set VDSL operating mode to vdsl2
        """
        return pulumi.get(self, "mode_vdsl2")

    @_builtins.property
    @pulumi.getter
    def optional(self) -> _builtins.bool:
        """
        Indicates if list item is considered optional.
        """
        return pulumi.get(self, "optional")

    @_builtins.property
    @pulumi.getter
    def sra(self) -> _builtins.bool:
        """
        Seamless rate adaption
        """
        return pulumi.get(self, "sra")

    @_builtins.property
    @pulumi.getter(name="vdslModemConfiguration")
    def vdsl_modem_configuration(self) -> _builtins.str:
        """
        Set module slot/subslot/port number
        """
        return pulumi.get(self, "vdsl_modem_configuration")

    @_builtins.property
    @pulumi.getter(name="vdslModemConfigurationVariable")
    def vdsl_modem_configuration_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "vdsl_modem_configuration_variable")


@pulumi.output_type
class GetVpnInterfaceEthernetPppoeFeatureTemplateAccessListResult(dict):
    def __init__(__self__, *,
                 acl_name: _builtins.str,
                 acl_name_variable: _builtins.str,
                 direction: _builtins.str,
                 optional: _builtins.bool):
        """
        :param _builtins.str acl_name: Name of access list
        :param _builtins.str acl_name_variable: Variable name
        :param _builtins.str direction: Direction
        :param _builtins.bool optional: Indicates if list item is considered optional.
        """
        pulumi.set(__self__, "acl_name", acl_name)
        pulumi.set(__self__, "acl_name_variable", acl_name_variable)
        pulumi.set(__self__, "direction", direction)
        pulumi.set(__self__, "optional", optional)

    @_builtins.property
    @pulumi.getter(name="aclName")
    def acl_name(self) -> _builtins.str:
        """
        Name of access list
        """
        return pulumi.get(self, "acl_name")

    @_builtins.property
    @pulumi.getter(name="aclNameVariable")
    def acl_name_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "acl_name_variable")

    @_builtins.property
    @pulumi.getter
    def direction(self) -> _builtins.str:
        """
        Direction
        """
        return pulumi.get(self, "direction")

    @_builtins.property
    @pulumi.getter
    def optional(self) -> _builtins.bool:
        """
        Indicates if list item is considered optional.
        """
        return pulumi.get(self, "optional")


@pulumi.output_type
class GetVpnInterfaceEthernetPppoeFeatureTemplateNatPortForwardResult(dict):
    def __init__(__self__, *,
                 optional: _builtins.bool,
                 port_end_range: _builtins.int,
                 port_start_range: _builtins.int,
                 private_ip_address: _builtins.str,
                 private_ip_address_variable: _builtins.str,
                 private_vpn: _builtins.int,
                 private_vpn_variable: _builtins.str,
                 protocol: _builtins.str):
        """
        :param _builtins.bool optional: Indicates if list item is considered optional.
        :param _builtins.int port_end_range: Ending port of port range
        :param _builtins.int port_start_range: Starting port of port range
        :param _builtins.str private_ip_address: Private IP Address to translate to
        :param _builtins.str private_ip_address_variable: Variable name
        :param _builtins.int private_vpn: VPN in which private IP Address resides
        :param _builtins.str private_vpn_variable: Variable name
        :param _builtins.str protocol: Layer 4 protocol to apply port forwarding to
        """
        pulumi.set(__self__, "optional", optional)
        pulumi.set(__self__, "port_end_range", port_end_range)
        pulumi.set(__self__, "port_start_range", port_start_range)
        pulumi.set(__self__, "private_ip_address", private_ip_address)
        pulumi.set(__self__, "private_ip_address_variable", private_ip_address_variable)
        pulumi.set(__self__, "private_vpn", private_vpn)
        pulumi.set(__self__, "private_vpn_variable", private_vpn_variable)
        pulumi.set(__self__, "protocol", protocol)

    @_builtins.property
    @pulumi.getter
    def optional(self) -> _builtins.bool:
        """
        Indicates if list item is considered optional.
        """
        return pulumi.get(self, "optional")

    @_builtins.property
    @pulumi.getter(name="portEndRange")
    def port_end_range(self) -> _builtins.int:
        """
        Ending port of port range
        """
        return pulumi.get(self, "port_end_range")

    @_builtins.property
    @pulumi.getter(name="portStartRange")
    def port_start_range(self) -> _builtins.int:
        """
        Starting port of port range
        """
        return pulumi.get(self, "port_start_range")

    @_builtins.property
    @pulumi.getter(name="privateIpAddress")
    def private_ip_address(self) -> _builtins.str:
        """
        Private IP Address to translate to
        """
        return pulumi.get(self, "private_ip_address")

    @_builtins.property
    @pulumi.getter(name="privateIpAddressVariable")
    def private_ip_address_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "private_ip_address_variable")

    @_builtins.property
    @pulumi.getter(name="privateVpn")
    def private_vpn(self) -> _builtins.int:
        """
        VPN in which private IP Address resides
        """
        return pulumi.get(self, "private_vpn")

    @_builtins.property
    @pulumi.getter(name="privateVpnVariable")
    def private_vpn_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "private_vpn_variable")

    @_builtins.property
    @pulumi.getter
    def protocol(self) -> _builtins.str:
        """
        Layer 4 protocol to apply port forwarding to
        """
        return pulumi.get(self, "protocol")


@pulumi.output_type
class GetVpnInterfaceEthernetPppoeFeatureTemplatePolicerResult(dict):
    def __init__(__self__, *,
                 direction: _builtins.str,
                 optional: _builtins.bool,
                 policer_name: _builtins.str):
        """
        :param _builtins.str direction: Direction
        :param _builtins.bool optional: Indicates if list item is considered optional.
        :param _builtins.str policer_name: Name of policer
        """
        pulumi.set(__self__, "direction", direction)
        pulumi.set(__self__, "optional", optional)
        pulumi.set(__self__, "policer_name", policer_name)

    @_builtins.property
    @pulumi.getter
    def direction(self) -> _builtins.str:
        """
        Direction
        """
        return pulumi.get(self, "direction")

    @_builtins.property
    @pulumi.getter
    def optional(self) -> _builtins.bool:
        """
        Indicates if list item is considered optional.
        """
        return pulumi.get(self, "optional")

    @_builtins.property
    @pulumi.getter(name="policerName")
    def policer_name(self) -> _builtins.str:
        """
        Name of policer
        """
        return pulumi.get(self, "policer_name")


@pulumi.output_type
class GetVpnInterfaceEthernetPppoeFeatureTemplateTunnelInterfaceEncapsulationResult(dict):
    def __init__(__self__, *,
                 encapsulation: _builtins.str,
                 optional: _builtins.bool,
                 preference: _builtins.int,
                 preference_variable: _builtins.str,
                 weight: _builtins.int,
                 weight_variable: _builtins.str):
        """
        :param _builtins.str encapsulation: Encapsulation
        :param _builtins.bool optional: Indicates if list item is considered optional.
        :param _builtins.int preference: Set preference for TLOC
        :param _builtins.str preference_variable: Variable name
        :param _builtins.int weight: Set weight for TLOC
        :param _builtins.str weight_variable: Variable name
        """
        pulumi.set(__self__, "encapsulation", encapsulation)
        pulumi.set(__self__, "optional", optional)
        pulumi.set(__self__, "preference", preference)
        pulumi.set(__self__, "preference_variable", preference_variable)
        pulumi.set(__self__, "weight", weight)
        pulumi.set(__self__, "weight_variable", weight_variable)

    @_builtins.property
    @pulumi.getter
    def encapsulation(self) -> _builtins.str:
        """
        Encapsulation
        """
        return pulumi.get(self, "encapsulation")

    @_builtins.property
    @pulumi.getter
    def optional(self) -> _builtins.bool:
        """
        Indicates if list item is considered optional.
        """
        return pulumi.get(self, "optional")

    @_builtins.property
    @pulumi.getter
    def preference(self) -> _builtins.int:
        """
        Set preference for TLOC
        """
        return pulumi.get(self, "preference")

    @_builtins.property
    @pulumi.getter(name="preferenceVariable")
    def preference_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "preference_variable")

    @_builtins.property
    @pulumi.getter
    def weight(self) -> _builtins.int:
        """
        Set weight for TLOC
        """
        return pulumi.get(self, "weight")

    @_builtins.property
    @pulumi.getter(name="weightVariable")
    def weight_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "weight_variable")


@pulumi.output_type
class GetVpnInterfaceMultilinkFeatureTemplateAccessListResult(dict):
    def __init__(__self__, *,
                 acl_name: _builtins.str,
                 acl_name_variable: _builtins.str,
                 direction: _builtins.str,
                 optional: _builtins.bool):
        """
        :param _builtins.str acl_name: Name of access list
        :param _builtins.str acl_name_variable: Variable name
        :param _builtins.str direction: Direction
        :param _builtins.bool optional: Indicates if list item is considered optional.
        """
        pulumi.set(__self__, "acl_name", acl_name)
        pulumi.set(__self__, "acl_name_variable", acl_name_variable)
        pulumi.set(__self__, "direction", direction)
        pulumi.set(__self__, "optional", optional)

    @_builtins.property
    @pulumi.getter(name="aclName")
    def acl_name(self) -> _builtins.str:
        """
        Name of access list
        """
        return pulumi.get(self, "acl_name")

    @_builtins.property
    @pulumi.getter(name="aclNameVariable")
    def acl_name_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "acl_name_variable")

    @_builtins.property
    @pulumi.getter
    def direction(self) -> _builtins.str:
        """
        Direction
        """
        return pulumi.get(self, "direction")

    @_builtins.property
    @pulumi.getter
    def optional(self) -> _builtins.bool:
        """
        Indicates if list item is considered optional.
        """
        return pulumi.get(self, "optional")


@pulumi.output_type
class GetVpnInterfaceMultilinkFeatureTemplateIpv6AccessListResult(dict):
    def __init__(__self__, *,
                 acl_name: _builtins.str,
                 acl_name_variable: _builtins.str,
                 direction: _builtins.str,
                 optional: _builtins.bool):
        """
        :param _builtins.str acl_name: Name of access list
        :param _builtins.str acl_name_variable: Variable name
        :param _builtins.str direction: Direction
        :param _builtins.bool optional: Indicates if list item is considered optional.
        """
        pulumi.set(__self__, "acl_name", acl_name)
        pulumi.set(__self__, "acl_name_variable", acl_name_variable)
        pulumi.set(__self__, "direction", direction)
        pulumi.set(__self__, "optional", optional)

    @_builtins.property
    @pulumi.getter(name="aclName")
    def acl_name(self) -> _builtins.str:
        """
        Name of access list
        """
        return pulumi.get(self, "acl_name")

    @_builtins.property
    @pulumi.getter(name="aclNameVariable")
    def acl_name_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "acl_name_variable")

    @_builtins.property
    @pulumi.getter
    def direction(self) -> _builtins.str:
        """
        Direction
        """
        return pulumi.get(self, "direction")

    @_builtins.property
    @pulumi.getter
    def optional(self) -> _builtins.bool:
        """
        Indicates if list item is considered optional.
        """
        return pulumi.get(self, "optional")


@pulumi.output_type
class GetVpnInterfaceMultilinkFeatureTemplateMultilinkInterfaceResult(dict):
    def __init__(__self__, *,
                 channel_group_lists: Sequence['outputs.GetVpnInterfaceMultilinkFeatureTemplateMultilinkInterfaceChannelGroupListResult'],
                 description: _builtins.str,
                 description_variable: _builtins.str,
                 framing: _builtins.str,
                 framing_variable: _builtins.str,
                 interface_type: _builtins.str,
                 internal: _builtins.bool,
                 line_mode: _builtins.str,
                 line_mode_variable: _builtins.str,
                 linecode: _builtins.str,
                 linecode_variable: _builtins.str,
                 optional: _builtins.bool,
                 set_length_for_long: _builtins.str,
                 set_length_for_short: _builtins.str,
                 slot: _builtins.str):
        """
        :param Sequence['GetVpnInterfaceMultilinkFeatureTemplateMultilinkInterfaceChannelGroupListArgs'] channel_group_lists: Channel Group List
        :param _builtins.str description: Description
        :param _builtins.str description_variable: Variable name
        :param _builtins.str framing: Framing
        :param _builtins.str framing_variable: Variable name
        :param _builtins.str interface_type: Card Type
        :param _builtins.bool internal: Internal
        :param _builtins.str line_mode: Line Mode
        :param _builtins.str line_mode_variable: Variable name
        :param _builtins.str linecode: LineCode
        :param _builtins.str linecode_variable: Variable name
        :param _builtins.bool optional: Indicates if list item is considered optional.
        :param _builtins.str set_length_for_long: Set length for long
        :param _builtins.str set_length_for_short: Set Length for short
        :param _builtins.str slot: Slot number
        """
        pulumi.set(__self__, "channel_group_lists", channel_group_lists)
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "description_variable", description_variable)
        pulumi.set(__self__, "framing", framing)
        pulumi.set(__self__, "framing_variable", framing_variable)
        pulumi.set(__self__, "interface_type", interface_type)
        pulumi.set(__self__, "internal", internal)
        pulumi.set(__self__, "line_mode", line_mode)
        pulumi.set(__self__, "line_mode_variable", line_mode_variable)
        pulumi.set(__self__, "linecode", linecode)
        pulumi.set(__self__, "linecode_variable", linecode_variable)
        pulumi.set(__self__, "optional", optional)
        pulumi.set(__self__, "set_length_for_long", set_length_for_long)
        pulumi.set(__self__, "set_length_for_short", set_length_for_short)
        pulumi.set(__self__, "slot", slot)

    @_builtins.property
    @pulumi.getter(name="channelGroupLists")
    def channel_group_lists(self) -> Sequence['outputs.GetVpnInterfaceMultilinkFeatureTemplateMultilinkInterfaceChannelGroupListResult']:
        """
        Channel Group List
        """
        return pulumi.get(self, "channel_group_lists")

    @_builtins.property
    @pulumi.getter
    def description(self) -> _builtins.str:
        """
        Description
        """
        return pulumi.get(self, "description")

    @_builtins.property
    @pulumi.getter(name="descriptionVariable")
    def description_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "description_variable")

    @_builtins.property
    @pulumi.getter
    def framing(self) -> _builtins.str:
        """
        Framing
        """
        return pulumi.get(self, "framing")

    @_builtins.property
    @pulumi.getter(name="framingVariable")
    def framing_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "framing_variable")

    @_builtins.property
    @pulumi.getter(name="interfaceType")
    def interface_type(self) -> _builtins.str:
        """
        Card Type
        """
        return pulumi.get(self, "interface_type")

    @_builtins.property
    @pulumi.getter
    def internal(self) -> _builtins.bool:
        """
        Internal
        """
        return pulumi.get(self, "internal")

    @_builtins.property
    @pulumi.getter(name="lineMode")
    def line_mode(self) -> _builtins.str:
        """
        Line Mode
        """
        return pulumi.get(self, "line_mode")

    @_builtins.property
    @pulumi.getter(name="lineModeVariable")
    def line_mode_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "line_mode_variable")

    @_builtins.property
    @pulumi.getter
    def linecode(self) -> _builtins.str:
        """
        LineCode
        """
        return pulumi.get(self, "linecode")

    @_builtins.property
    @pulumi.getter(name="linecodeVariable")
    def linecode_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "linecode_variable")

    @_builtins.property
    @pulumi.getter
    def optional(self) -> _builtins.bool:
        """
        Indicates if list item is considered optional.
        """
        return pulumi.get(self, "optional")

    @_builtins.property
    @pulumi.getter(name="setLengthForLong")
    def set_length_for_long(self) -> _builtins.str:
        """
        Set length for long
        """
        return pulumi.get(self, "set_length_for_long")

    @_builtins.property
    @pulumi.getter(name="setLengthForShort")
    def set_length_for_short(self) -> _builtins.str:
        """
        Set Length for short
        """
        return pulumi.get(self, "set_length_for_short")

    @_builtins.property
    @pulumi.getter
    def slot(self) -> _builtins.str:
        """
        Slot number
        """
        return pulumi.get(self, "slot")


@pulumi.output_type
class GetVpnInterfaceMultilinkFeatureTemplateMultilinkInterfaceChannelGroupListResult(dict):
    def __init__(__self__, *,
                 channel_group: _builtins.int,
                 channel_group_variable: _builtins.str,
                 optional: _builtins.bool,
                 time_slot_variable: _builtins.str,
                 time_slots: Sequence[_builtins.str]):
        """
        :param _builtins.int channel_group: Number
        :param _builtins.str channel_group_variable: Variable name
        :param _builtins.bool optional: Indicates if list item is considered optional.
        :param _builtins.str time_slot_variable: Variable name
        :param Sequence[_builtins.str] time_slots: Time slots
        """
        pulumi.set(__self__, "channel_group", channel_group)
        pulumi.set(__self__, "channel_group_variable", channel_group_variable)
        pulumi.set(__self__, "optional", optional)
        pulumi.set(__self__, "time_slot_variable", time_slot_variable)
        pulumi.set(__self__, "time_slots", time_slots)

    @_builtins.property
    @pulumi.getter(name="channelGroup")
    def channel_group(self) -> _builtins.int:
        """
        Number
        """
        return pulumi.get(self, "channel_group")

    @_builtins.property
    @pulumi.getter(name="channelGroupVariable")
    def channel_group_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "channel_group_variable")

    @_builtins.property
    @pulumi.getter
    def optional(self) -> _builtins.bool:
        """
        Indicates if list item is considered optional.
        """
        return pulumi.get(self, "optional")

    @_builtins.property
    @pulumi.getter(name="timeSlotVariable")
    def time_slot_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "time_slot_variable")

    @_builtins.property
    @pulumi.getter(name="timeSlots")
    def time_slots(self) -> Sequence[_builtins.str]:
        """
        Time slots
        """
        return pulumi.get(self, "time_slots")


@pulumi.output_type
class GetVpnInterfaceMultilinkFeatureTemplateNimInterfaceListResult(dict):
    def __init__(__self__, *,
                 bandwidth: _builtins.int,
                 bandwidth_variable: _builtins.str,
                 clock_rate: _builtins.int,
                 clock_rate_variable: _builtins.str,
                 encapsulation_serial: _builtins.str,
                 encapsulation_serial_variable: _builtins.str,
                 interface_description: _builtins.str,
                 interface_description_variable: _builtins.str,
                 interface_name: _builtins.str,
                 interface_name_variable: _builtins.str,
                 nim_serial_interface_type: _builtins.str,
                 nim_serial_interface_type_variable: _builtins.str,
                 optional: _builtins.bool):
        """
        :param _builtins.int bandwidth: Interface bandwidth capacity, in kbps
        :param _builtins.str bandwidth_variable: Variable name
        :param _builtins.int clock_rate: Set preference for interface Clock speed
        :param _builtins.str clock_rate_variable: Variable name
        :param _builtins.str encapsulation_serial: Configure Encapsulation for interface
        :param _builtins.str encapsulation_serial_variable: Variable name
        :param _builtins.str interface_description: Interface description
        :param _builtins.str interface_description_variable: Variable name
        :param _builtins.str interface_name: Interface Name
        :param _builtins.str interface_name_variable: Variable name
        :param _builtins.str nim_serial_interface_type: NIM Serial interface type
        :param _builtins.str nim_serial_interface_type_variable: Variable name
        :param _builtins.bool optional: Indicates if list item is considered optional.
        """
        pulumi.set(__self__, "bandwidth", bandwidth)
        pulumi.set(__self__, "bandwidth_variable", bandwidth_variable)
        pulumi.set(__self__, "clock_rate", clock_rate)
        pulumi.set(__self__, "clock_rate_variable", clock_rate_variable)
        pulumi.set(__self__, "encapsulation_serial", encapsulation_serial)
        pulumi.set(__self__, "encapsulation_serial_variable", encapsulation_serial_variable)
        pulumi.set(__self__, "interface_description", interface_description)
        pulumi.set(__self__, "interface_description_variable", interface_description_variable)
        pulumi.set(__self__, "interface_name", interface_name)
        pulumi.set(__self__, "interface_name_variable", interface_name_variable)
        pulumi.set(__self__, "nim_serial_interface_type", nim_serial_interface_type)
        pulumi.set(__self__, "nim_serial_interface_type_variable", nim_serial_interface_type_variable)
        pulumi.set(__self__, "optional", optional)

    @_builtins.property
    @pulumi.getter
    def bandwidth(self) -> _builtins.int:
        """
        Interface bandwidth capacity, in kbps
        """
        return pulumi.get(self, "bandwidth")

    @_builtins.property
    @pulumi.getter(name="bandwidthVariable")
    def bandwidth_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "bandwidth_variable")

    @_builtins.property
    @pulumi.getter(name="clockRate")
    def clock_rate(self) -> _builtins.int:
        """
        Set preference for interface Clock speed
        """
        return pulumi.get(self, "clock_rate")

    @_builtins.property
    @pulumi.getter(name="clockRateVariable")
    def clock_rate_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "clock_rate_variable")

    @_builtins.property
    @pulumi.getter(name="encapsulationSerial")
    def encapsulation_serial(self) -> _builtins.str:
        """
        Configure Encapsulation for interface
        """
        return pulumi.get(self, "encapsulation_serial")

    @_builtins.property
    @pulumi.getter(name="encapsulationSerialVariable")
    def encapsulation_serial_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "encapsulation_serial_variable")

    @_builtins.property
    @pulumi.getter(name="interfaceDescription")
    def interface_description(self) -> _builtins.str:
        """
        Interface description
        """
        return pulumi.get(self, "interface_description")

    @_builtins.property
    @pulumi.getter(name="interfaceDescriptionVariable")
    def interface_description_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "interface_description_variable")

    @_builtins.property
    @pulumi.getter(name="interfaceName")
    def interface_name(self) -> _builtins.str:
        """
        Interface Name
        """
        return pulumi.get(self, "interface_name")

    @_builtins.property
    @pulumi.getter(name="interfaceNameVariable")
    def interface_name_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "interface_name_variable")

    @_builtins.property
    @pulumi.getter(name="nimSerialInterfaceType")
    def nim_serial_interface_type(self) -> _builtins.str:
        """
        NIM Serial interface type
        """
        return pulumi.get(self, "nim_serial_interface_type")

    @_builtins.property
    @pulumi.getter(name="nimSerialInterfaceTypeVariable")
    def nim_serial_interface_type_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "nim_serial_interface_type_variable")

    @_builtins.property
    @pulumi.getter
    def optional(self) -> _builtins.bool:
        """
        Indicates if list item is considered optional.
        """
        return pulumi.get(self, "optional")


@pulumi.output_type
class GetVpnInterfaceMultilinkFeatureTemplateTunnelInterfaceEncapsulationResult(dict):
    def __init__(__self__, *,
                 encapsulation: _builtins.str,
                 optional: _builtins.bool,
                 preference: _builtins.int,
                 preference_variable: _builtins.str,
                 weight: _builtins.int,
                 weight_variable: _builtins.str):
        """
        :param _builtins.str encapsulation: Encapsulation
        :param _builtins.bool optional: Indicates if list item is considered optional.
        :param _builtins.int preference: Set preference for TLOC
        :param _builtins.str preference_variable: Variable name
        :param _builtins.int weight: Set weight for TLOC
        :param _builtins.str weight_variable: Variable name
        """
        pulumi.set(__self__, "encapsulation", encapsulation)
        pulumi.set(__self__, "optional", optional)
        pulumi.set(__self__, "preference", preference)
        pulumi.set(__self__, "preference_variable", preference_variable)
        pulumi.set(__self__, "weight", weight)
        pulumi.set(__self__, "weight_variable", weight_variable)

    @_builtins.property
    @pulumi.getter
    def encapsulation(self) -> _builtins.str:
        """
        Encapsulation
        """
        return pulumi.get(self, "encapsulation")

    @_builtins.property
    @pulumi.getter
    def optional(self) -> _builtins.bool:
        """
        Indicates if list item is considered optional.
        """
        return pulumi.get(self, "optional")

    @_builtins.property
    @pulumi.getter
    def preference(self) -> _builtins.int:
        """
        Set preference for TLOC
        """
        return pulumi.get(self, "preference")

    @_builtins.property
    @pulumi.getter(name="preferenceVariable")
    def preference_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "preference_variable")

    @_builtins.property
    @pulumi.getter
    def weight(self) -> _builtins.int:
        """
        Set weight for TLOC
        """
        return pulumi.get(self, "weight")

    @_builtins.property
    @pulumi.getter(name="weightVariable")
    def weight_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "weight_variable")


@pulumi.output_type
class GetVpnInterfaceSviFeatureTemplateIpv4AccessListResult(dict):
    def __init__(__self__, *,
                 acl_name: _builtins.str,
                 acl_name_variable: _builtins.str,
                 direction: _builtins.str,
                 optional: _builtins.bool):
        """
        :param _builtins.str acl_name: Name of access list
        :param _builtins.str acl_name_variable: Variable name
        :param _builtins.str direction: Direction
        :param _builtins.bool optional: Indicates if list item is considered optional.
        """
        pulumi.set(__self__, "acl_name", acl_name)
        pulumi.set(__self__, "acl_name_variable", acl_name_variable)
        pulumi.set(__self__, "direction", direction)
        pulumi.set(__self__, "optional", optional)

    @_builtins.property
    @pulumi.getter(name="aclName")
    def acl_name(self) -> _builtins.str:
        """
        Name of access list
        """
        return pulumi.get(self, "acl_name")

    @_builtins.property
    @pulumi.getter(name="aclNameVariable")
    def acl_name_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "acl_name_variable")

    @_builtins.property
    @pulumi.getter
    def direction(self) -> _builtins.str:
        """
        Direction
        """
        return pulumi.get(self, "direction")

    @_builtins.property
    @pulumi.getter
    def optional(self) -> _builtins.bool:
        """
        Indicates if list item is considered optional.
        """
        return pulumi.get(self, "optional")


@pulumi.output_type
class GetVpnInterfaceSviFeatureTemplateIpv4SecondaryAddressResult(dict):
    def __init__(__self__, *,
                 ipv4_address: _builtins.str,
                 ipv4_address_variable: _builtins.str,
                 optional: _builtins.bool):
        """
        :param _builtins.str ipv4_address: IP Address
        :param _builtins.str ipv4_address_variable: Variable name
        :param _builtins.bool optional: Indicates if list item is considered optional.
        """
        pulumi.set(__self__, "ipv4_address", ipv4_address)
        pulumi.set(__self__, "ipv4_address_variable", ipv4_address_variable)
        pulumi.set(__self__, "optional", optional)

    @_builtins.property
    @pulumi.getter(name="ipv4Address")
    def ipv4_address(self) -> _builtins.str:
        """
        IP Address
        """
        return pulumi.get(self, "ipv4_address")

    @_builtins.property
    @pulumi.getter(name="ipv4AddressVariable")
    def ipv4_address_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "ipv4_address_variable")

    @_builtins.property
    @pulumi.getter
    def optional(self) -> _builtins.bool:
        """
        Indicates if list item is considered optional.
        """
        return pulumi.get(self, "optional")


@pulumi.output_type
class GetVpnInterfaceSviFeatureTemplateIpv4VrrpResult(dict):
    def __init__(__self__, *,
                 group_id: _builtins.int,
                 group_id_variable: _builtins.str,
                 ipv4_address: _builtins.str,
                 ipv4_address_variable: _builtins.str,
                 ipv4_secondary_addresses: Sequence['outputs.GetVpnInterfaceSviFeatureTemplateIpv4VrrpIpv4SecondaryAddressResult'],
                 optional: _builtins.bool,
                 priority: _builtins.int,
                 priority_variable: _builtins.str,
                 timer: _builtins.int,
                 timer_variable: _builtins.str,
                 tloc_preference_change: _builtins.bool,
                 tloc_preference_change_value: _builtins.int,
                 tloc_preference_change_value_variable: _builtins.str,
                 track_omp: _builtins.bool,
                 track_omp_variable: _builtins.str,
                 track_prefix_list: _builtins.str,
                 track_prefix_list_variable: _builtins.str,
                 tracking_objects: Sequence['outputs.GetVpnInterfaceSviFeatureTemplateIpv4VrrpTrackingObjectResult']):
        """
        :param _builtins.int group_id: Group ID
        :param _builtins.str group_id_variable: Variable name
        :param _builtins.str ipv4_address: Assign IP Address
        :param _builtins.str ipv4_address_variable: Variable name
        :param Sequence['GetVpnInterfaceSviFeatureTemplateIpv4VrrpIpv4SecondaryAddressArgs'] ipv4_secondary_addresses: VRRP Secondary IP address
        :param _builtins.bool optional: Indicates if list item is considered optional.
        :param _builtins.int priority: Set priority
        :param _builtins.str priority_variable: Variable name
        :param _builtins.int timer: Timer interval for successive advertisements, in milliseconds
        :param _builtins.str timer_variable: Variable name
        :param _builtins.bool tloc_preference_change: change TLOC preference
        :param _builtins.int tloc_preference_change_value: Set tloc preference change value
        :param _builtins.str tloc_preference_change_value_variable: Variable name
        :param _builtins.bool track_omp: Track OMP status
        :param _builtins.str track_omp_variable: Variable name
        :param _builtins.str track_prefix_list: Track Prefix List
        :param _builtins.str track_prefix_list_variable: Variable name
        :param Sequence['GetVpnInterfaceSviFeatureTemplateIpv4VrrpTrackingObjectArgs'] tracking_objects: tracking object for VRRP configuration
        """
        pulumi.set(__self__, "group_id", group_id)
        pulumi.set(__self__, "group_id_variable", group_id_variable)
        pulumi.set(__self__, "ipv4_address", ipv4_address)
        pulumi.set(__self__, "ipv4_address_variable", ipv4_address_variable)
        pulumi.set(__self__, "ipv4_secondary_addresses", ipv4_secondary_addresses)
        pulumi.set(__self__, "optional", optional)
        pulumi.set(__self__, "priority", priority)
        pulumi.set(__self__, "priority_variable", priority_variable)
        pulumi.set(__self__, "timer", timer)
        pulumi.set(__self__, "timer_variable", timer_variable)
        pulumi.set(__self__, "tloc_preference_change", tloc_preference_change)
        pulumi.set(__self__, "tloc_preference_change_value", tloc_preference_change_value)
        pulumi.set(__self__, "tloc_preference_change_value_variable", tloc_preference_change_value_variable)
        pulumi.set(__self__, "track_omp", track_omp)
        pulumi.set(__self__, "track_omp_variable", track_omp_variable)
        pulumi.set(__self__, "track_prefix_list", track_prefix_list)
        pulumi.set(__self__, "track_prefix_list_variable", track_prefix_list_variable)
        pulumi.set(__self__, "tracking_objects", tracking_objects)

    @_builtins.property
    @pulumi.getter(name="groupId")
    def group_id(self) -> _builtins.int:
        """
        Group ID
        """
        return pulumi.get(self, "group_id")

    @_builtins.property
    @pulumi.getter(name="groupIdVariable")
    def group_id_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "group_id_variable")

    @_builtins.property
    @pulumi.getter(name="ipv4Address")
    def ipv4_address(self) -> _builtins.str:
        """
        Assign IP Address
        """
        return pulumi.get(self, "ipv4_address")

    @_builtins.property
    @pulumi.getter(name="ipv4AddressVariable")
    def ipv4_address_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "ipv4_address_variable")

    @_builtins.property
    @pulumi.getter(name="ipv4SecondaryAddresses")
    def ipv4_secondary_addresses(self) -> Sequence['outputs.GetVpnInterfaceSviFeatureTemplateIpv4VrrpIpv4SecondaryAddressResult']:
        """
        VRRP Secondary IP address
        """
        return pulumi.get(self, "ipv4_secondary_addresses")

    @_builtins.property
    @pulumi.getter
    def optional(self) -> _builtins.bool:
        """
        Indicates if list item is considered optional.
        """
        return pulumi.get(self, "optional")

    @_builtins.property
    @pulumi.getter
    def priority(self) -> _builtins.int:
        """
        Set priority
        """
        return pulumi.get(self, "priority")

    @_builtins.property
    @pulumi.getter(name="priorityVariable")
    def priority_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "priority_variable")

    @_builtins.property
    @pulumi.getter
    def timer(self) -> _builtins.int:
        """
        Timer interval for successive advertisements, in milliseconds
        """
        return pulumi.get(self, "timer")

    @_builtins.property
    @pulumi.getter(name="timerVariable")
    def timer_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "timer_variable")

    @_builtins.property
    @pulumi.getter(name="tlocPreferenceChange")
    def tloc_preference_change(self) -> _builtins.bool:
        """
        change TLOC preference
        """
        return pulumi.get(self, "tloc_preference_change")

    @_builtins.property
    @pulumi.getter(name="tlocPreferenceChangeValue")
    def tloc_preference_change_value(self) -> _builtins.int:
        """
        Set tloc preference change value
        """
        return pulumi.get(self, "tloc_preference_change_value")

    @_builtins.property
    @pulumi.getter(name="tlocPreferenceChangeValueVariable")
    def tloc_preference_change_value_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "tloc_preference_change_value_variable")

    @_builtins.property
    @pulumi.getter(name="trackOmp")
    def track_omp(self) -> _builtins.bool:
        """
        Track OMP status
        """
        return pulumi.get(self, "track_omp")

    @_builtins.property
    @pulumi.getter(name="trackOmpVariable")
    def track_omp_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "track_omp_variable")

    @_builtins.property
    @pulumi.getter(name="trackPrefixList")
    def track_prefix_list(self) -> _builtins.str:
        """
        Track Prefix List
        """
        return pulumi.get(self, "track_prefix_list")

    @_builtins.property
    @pulumi.getter(name="trackPrefixListVariable")
    def track_prefix_list_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "track_prefix_list_variable")

    @_builtins.property
    @pulumi.getter(name="trackingObjects")
    def tracking_objects(self) -> Sequence['outputs.GetVpnInterfaceSviFeatureTemplateIpv4VrrpTrackingObjectResult']:
        """
        tracking object for VRRP configuration
        """
        return pulumi.get(self, "tracking_objects")


@pulumi.output_type
class GetVpnInterfaceSviFeatureTemplateIpv4VrrpIpv4SecondaryAddressResult(dict):
    def __init__(__self__, *,
                 ipv4_address: _builtins.str,
                 ipv4_address_variable: _builtins.str,
                 optional: _builtins.bool):
        """
        :param _builtins.str ipv4_address: VRRP Secondary IP address
        :param _builtins.str ipv4_address_variable: Variable name
        :param _builtins.bool optional: Indicates if list item is considered optional.
        """
        pulumi.set(__self__, "ipv4_address", ipv4_address)
        pulumi.set(__self__, "ipv4_address_variable", ipv4_address_variable)
        pulumi.set(__self__, "optional", optional)

    @_builtins.property
    @pulumi.getter(name="ipv4Address")
    def ipv4_address(self) -> _builtins.str:
        """
        VRRP Secondary IP address
        """
        return pulumi.get(self, "ipv4_address")

    @_builtins.property
    @pulumi.getter(name="ipv4AddressVariable")
    def ipv4_address_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "ipv4_address_variable")

    @_builtins.property
    @pulumi.getter
    def optional(self) -> _builtins.bool:
        """
        Indicates if list item is considered optional.
        """
        return pulumi.get(self, "optional")


@pulumi.output_type
class GetVpnInterfaceSviFeatureTemplateIpv4VrrpTrackingObjectResult(dict):
    def __init__(__self__, *,
                 decrement_value: _builtins.int,
                 decrement_value_variable: _builtins.str,
                 name: _builtins.int,
                 name_variable: _builtins.str,
                 optional: _builtins.bool,
                 track_action: _builtins.str,
                 track_action_variable: _builtins.str):
        """
        :param _builtins.int decrement_value: Decrement Value for VRRP priority
        :param _builtins.str decrement_value_variable: Variable name
        :param _builtins.int name: Tracker ID
        :param _builtins.str name_variable: Variable name
        :param _builtins.bool optional: Indicates if list item is considered optional.
        :param _builtins.str track_action: Track Action
        :param _builtins.str track_action_variable: Variable name
        """
        pulumi.set(__self__, "decrement_value", decrement_value)
        pulumi.set(__self__, "decrement_value_variable", decrement_value_variable)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "name_variable", name_variable)
        pulumi.set(__self__, "optional", optional)
        pulumi.set(__self__, "track_action", track_action)
        pulumi.set(__self__, "track_action_variable", track_action_variable)

    @_builtins.property
    @pulumi.getter(name="decrementValue")
    def decrement_value(self) -> _builtins.int:
        """
        Decrement Value for VRRP priority
        """
        return pulumi.get(self, "decrement_value")

    @_builtins.property
    @pulumi.getter(name="decrementValueVariable")
    def decrement_value_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "decrement_value_variable")

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.int:
        """
        Tracker ID
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter(name="nameVariable")
    def name_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "name_variable")

    @_builtins.property
    @pulumi.getter
    def optional(self) -> _builtins.bool:
        """
        Indicates if list item is considered optional.
        """
        return pulumi.get(self, "optional")

    @_builtins.property
    @pulumi.getter(name="trackAction")
    def track_action(self) -> _builtins.str:
        """
        Track Action
        """
        return pulumi.get(self, "track_action")

    @_builtins.property
    @pulumi.getter(name="trackActionVariable")
    def track_action_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "track_action_variable")


@pulumi.output_type
class GetVpnInterfaceSviFeatureTemplateIpv6AccessListResult(dict):
    def __init__(__self__, *,
                 acl_name: _builtins.str,
                 acl_name_variable: _builtins.str,
                 direction: _builtins.str,
                 optional: _builtins.bool):
        """
        :param _builtins.str acl_name: Name of access list
        :param _builtins.str acl_name_variable: Variable name
        :param _builtins.str direction: Direction
        :param _builtins.bool optional: Indicates if list item is considered optional.
        """
        pulumi.set(__self__, "acl_name", acl_name)
        pulumi.set(__self__, "acl_name_variable", acl_name_variable)
        pulumi.set(__self__, "direction", direction)
        pulumi.set(__self__, "optional", optional)

    @_builtins.property
    @pulumi.getter(name="aclName")
    def acl_name(self) -> _builtins.str:
        """
        Name of access list
        """
        return pulumi.get(self, "acl_name")

    @_builtins.property
    @pulumi.getter(name="aclNameVariable")
    def acl_name_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "acl_name_variable")

    @_builtins.property
    @pulumi.getter
    def direction(self) -> _builtins.str:
        """
        Direction
        """
        return pulumi.get(self, "direction")

    @_builtins.property
    @pulumi.getter
    def optional(self) -> _builtins.bool:
        """
        Indicates if list item is considered optional.
        """
        return pulumi.get(self, "optional")


@pulumi.output_type
class GetVpnInterfaceSviFeatureTemplateIpv6DhcpHelperResult(dict):
    def __init__(__self__, *,
                 address: _builtins.str,
                 address_variable: _builtins.str,
                 optional: _builtins.bool,
                 vpn_id: _builtins.int,
                 vpn_id_variable: _builtins.str):
        """
        :param _builtins.str address: DHCPv6 Helper address
        :param _builtins.str address_variable: Variable name
        :param _builtins.bool optional: Indicates if list item is considered optional.
        :param _builtins.int vpn_id: DHCPv6 Helper VPN
        :param _builtins.str vpn_id_variable: Variable name
        """
        pulumi.set(__self__, "address", address)
        pulumi.set(__self__, "address_variable", address_variable)
        pulumi.set(__self__, "optional", optional)
        pulumi.set(__self__, "vpn_id", vpn_id)
        pulumi.set(__self__, "vpn_id_variable", vpn_id_variable)

    @_builtins.property
    @pulumi.getter
    def address(self) -> _builtins.str:
        """
        DHCPv6 Helper address
        """
        return pulumi.get(self, "address")

    @_builtins.property
    @pulumi.getter(name="addressVariable")
    def address_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "address_variable")

    @_builtins.property
    @pulumi.getter
    def optional(self) -> _builtins.bool:
        """
        Indicates if list item is considered optional.
        """
        return pulumi.get(self, "optional")

    @_builtins.property
    @pulumi.getter(name="vpnId")
    def vpn_id(self) -> _builtins.int:
        """
        DHCPv6 Helper VPN
        """
        return pulumi.get(self, "vpn_id")

    @_builtins.property
    @pulumi.getter(name="vpnIdVariable")
    def vpn_id_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "vpn_id_variable")


@pulumi.output_type
class GetVpnInterfaceSviFeatureTemplateIpv6SecondaryAddressResult(dict):
    def __init__(__self__, *,
                 ipv6_address: _builtins.str,
                 ipv6_address_variable: _builtins.str,
                 optional: _builtins.bool):
        """
        :param _builtins.str ipv6_address: IPv6 Address
        :param _builtins.str ipv6_address_variable: Variable name
        :param _builtins.bool optional: Indicates if list item is considered optional.
        """
        pulumi.set(__self__, "ipv6_address", ipv6_address)
        pulumi.set(__self__, "ipv6_address_variable", ipv6_address_variable)
        pulumi.set(__self__, "optional", optional)

    @_builtins.property
    @pulumi.getter(name="ipv6Address")
    def ipv6_address(self) -> _builtins.str:
        """
        IPv6 Address
        """
        return pulumi.get(self, "ipv6_address")

    @_builtins.property
    @pulumi.getter(name="ipv6AddressVariable")
    def ipv6_address_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "ipv6_address_variable")

    @_builtins.property
    @pulumi.getter
    def optional(self) -> _builtins.bool:
        """
        Indicates if list item is considered optional.
        """
        return pulumi.get(self, "optional")


@pulumi.output_type
class GetVpnInterfaceSviFeatureTemplateIpv6VrrpResult(dict):
    def __init__(__self__, *,
                 group_id: _builtins.int,
                 group_id_variable: _builtins.str,
                 ipv6_addresses: Sequence['outputs.GetVpnInterfaceSviFeatureTemplateIpv6VrrpIpv6AddressResult'],
                 ipv6_secondary_addresses: Sequence['outputs.GetVpnInterfaceSviFeatureTemplateIpv6VrrpIpv6SecondaryAddressResult'],
                 optional: _builtins.bool,
                 priority: _builtins.int,
                 priority_variable: _builtins.str,
                 timer: _builtins.int,
                 timer_variable: _builtins.str,
                 track_omp: _builtins.bool,
                 track_omp_variable: _builtins.str,
                 track_prefix_list: _builtins.str,
                 track_prefix_list_variable: _builtins.str):
        """
        :param _builtins.int group_id: Group ID
        :param _builtins.str group_id_variable: Variable name
        :param Sequence['GetVpnInterfaceSviFeatureTemplateIpv6VrrpIpv6AddressArgs'] ipv6_addresses: IPv6 VRRP
        :param Sequence['GetVpnInterfaceSviFeatureTemplateIpv6VrrpIpv6SecondaryAddressArgs'] ipv6_secondary_addresses: IPv6 Secondary IP address
        :param _builtins.bool optional: Indicates if list item is considered optional.
        :param _builtins.int priority: Set priority
        :param _builtins.str priority_variable: Variable name
        :param _builtins.int timer: Timer interval for successive advertisements, in milliseconds
        :param _builtins.str timer_variable: Variable name
        :param _builtins.bool track_omp: Track OMP status
        :param _builtins.str track_omp_variable: Variable name
        :param _builtins.str track_prefix_list: Track Prefix List
        :param _builtins.str track_prefix_list_variable: Variable name
        """
        pulumi.set(__self__, "group_id", group_id)
        pulumi.set(__self__, "group_id_variable", group_id_variable)
        pulumi.set(__self__, "ipv6_addresses", ipv6_addresses)
        pulumi.set(__self__, "ipv6_secondary_addresses", ipv6_secondary_addresses)
        pulumi.set(__self__, "optional", optional)
        pulumi.set(__self__, "priority", priority)
        pulumi.set(__self__, "priority_variable", priority_variable)
        pulumi.set(__self__, "timer", timer)
        pulumi.set(__self__, "timer_variable", timer_variable)
        pulumi.set(__self__, "track_omp", track_omp)
        pulumi.set(__self__, "track_omp_variable", track_omp_variable)
        pulumi.set(__self__, "track_prefix_list", track_prefix_list)
        pulumi.set(__self__, "track_prefix_list_variable", track_prefix_list_variable)

    @_builtins.property
    @pulumi.getter(name="groupId")
    def group_id(self) -> _builtins.int:
        """
        Group ID
        """
        return pulumi.get(self, "group_id")

    @_builtins.property
    @pulumi.getter(name="groupIdVariable")
    def group_id_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "group_id_variable")

    @_builtins.property
    @pulumi.getter(name="ipv6Addresses")
    def ipv6_addresses(self) -> Sequence['outputs.GetVpnInterfaceSviFeatureTemplateIpv6VrrpIpv6AddressResult']:
        """
        IPv6 VRRP
        """
        return pulumi.get(self, "ipv6_addresses")

    @_builtins.property
    @pulumi.getter(name="ipv6SecondaryAddresses")
    def ipv6_secondary_addresses(self) -> Sequence['outputs.GetVpnInterfaceSviFeatureTemplateIpv6VrrpIpv6SecondaryAddressResult']:
        """
        IPv6 Secondary IP address
        """
        return pulumi.get(self, "ipv6_secondary_addresses")

    @_builtins.property
    @pulumi.getter
    def optional(self) -> _builtins.bool:
        """
        Indicates if list item is considered optional.
        """
        return pulumi.get(self, "optional")

    @_builtins.property
    @pulumi.getter
    def priority(self) -> _builtins.int:
        """
        Set priority
        """
        return pulumi.get(self, "priority")

    @_builtins.property
    @pulumi.getter(name="priorityVariable")
    def priority_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "priority_variable")

    @_builtins.property
    @pulumi.getter
    def timer(self) -> _builtins.int:
        """
        Timer interval for successive advertisements, in milliseconds
        """
        return pulumi.get(self, "timer")

    @_builtins.property
    @pulumi.getter(name="timerVariable")
    def timer_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "timer_variable")

    @_builtins.property
    @pulumi.getter(name="trackOmp")
    def track_omp(self) -> _builtins.bool:
        """
        Track OMP status
        """
        return pulumi.get(self, "track_omp")

    @_builtins.property
    @pulumi.getter(name="trackOmpVariable")
    def track_omp_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "track_omp_variable")

    @_builtins.property
    @pulumi.getter(name="trackPrefixList")
    def track_prefix_list(self) -> _builtins.str:
        """
        Track Prefix List
        """
        return pulumi.get(self, "track_prefix_list")

    @_builtins.property
    @pulumi.getter(name="trackPrefixListVariable")
    def track_prefix_list_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "track_prefix_list_variable")


@pulumi.output_type
class GetVpnInterfaceSviFeatureTemplateIpv6VrrpIpv6AddressResult(dict):
    def __init__(__self__, *,
                 link_local_address: _builtins.str,
                 link_local_address_variable: _builtins.str,
                 optional: _builtins.bool,
                 prefix: _builtins.str,
                 prefix_variable: _builtins.str):
        """
        :param _builtins.str link_local_address: Use link-local IPv6 Address
        :param _builtins.str link_local_address_variable: Variable name
        :param _builtins.bool optional: Indicates if list item is considered optional.
        :param _builtins.str prefix: Assign Global IPv6 Prefix
        :param _builtins.str prefix_variable: Variable name
        """
        pulumi.set(__self__, "link_local_address", link_local_address)
        pulumi.set(__self__, "link_local_address_variable", link_local_address_variable)
        pulumi.set(__self__, "optional", optional)
        pulumi.set(__self__, "prefix", prefix)
        pulumi.set(__self__, "prefix_variable", prefix_variable)

    @_builtins.property
    @pulumi.getter(name="linkLocalAddress")
    def link_local_address(self) -> _builtins.str:
        """
        Use link-local IPv6 Address
        """
        return pulumi.get(self, "link_local_address")

    @_builtins.property
    @pulumi.getter(name="linkLocalAddressVariable")
    def link_local_address_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "link_local_address_variable")

    @_builtins.property
    @pulumi.getter
    def optional(self) -> _builtins.bool:
        """
        Indicates if list item is considered optional.
        """
        return pulumi.get(self, "optional")

    @_builtins.property
    @pulumi.getter
    def prefix(self) -> _builtins.str:
        """
        Assign Global IPv6 Prefix
        """
        return pulumi.get(self, "prefix")

    @_builtins.property
    @pulumi.getter(name="prefixVariable")
    def prefix_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "prefix_variable")


@pulumi.output_type
class GetVpnInterfaceSviFeatureTemplateIpv6VrrpIpv6SecondaryAddressResult(dict):
    def __init__(__self__, *,
                 optional: _builtins.bool,
                 prefix: _builtins.str,
                 prefix_variable: _builtins.str):
        """
        :param _builtins.bool optional: Indicates if list item is considered optional.
        :param _builtins.str prefix: IPv6 Secondary IP address
        :param _builtins.str prefix_variable: Variable name
        """
        pulumi.set(__self__, "optional", optional)
        pulumi.set(__self__, "prefix", prefix)
        pulumi.set(__self__, "prefix_variable", prefix_variable)

    @_builtins.property
    @pulumi.getter
    def optional(self) -> _builtins.bool:
        """
        Indicates if list item is considered optional.
        """
        return pulumi.get(self, "optional")

    @_builtins.property
    @pulumi.getter
    def prefix(self) -> _builtins.str:
        """
        IPv6 Secondary IP address
        """
        return pulumi.get(self, "prefix")

    @_builtins.property
    @pulumi.getter(name="prefixVariable")
    def prefix_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "prefix_variable")


@pulumi.output_type
class GetVpnInterfaceSviFeatureTemplatePolicerResult(dict):
    def __init__(__self__, *,
                 direction: _builtins.str,
                 optional: _builtins.bool,
                 policer_name: _builtins.str):
        """
        :param _builtins.str direction: Direction
        :param _builtins.bool optional: Indicates if list item is considered optional.
        :param _builtins.str policer_name: Name of policer
        """
        pulumi.set(__self__, "direction", direction)
        pulumi.set(__self__, "optional", optional)
        pulumi.set(__self__, "policer_name", policer_name)

    @_builtins.property
    @pulumi.getter
    def direction(self) -> _builtins.str:
        """
        Direction
        """
        return pulumi.get(self, "direction")

    @_builtins.property
    @pulumi.getter
    def optional(self) -> _builtins.bool:
        """
        Indicates if list item is considered optional.
        """
        return pulumi.get(self, "optional")

    @_builtins.property
    @pulumi.getter(name="policerName")
    def policer_name(self) -> _builtins.str:
        """
        Name of policer
        """
        return pulumi.get(self, "policer_name")


@pulumi.output_type
class GetVpnInterfaceSviFeatureTemplateStaticArpEntryResult(dict):
    def __init__(__self__, *,
                 ipv4_address: _builtins.str,
                 ipv4_address_variable: _builtins.str,
                 mac_address: _builtins.str,
                 mac_address_variable: _builtins.str,
                 optional: _builtins.bool):
        """
        :param _builtins.str ipv4_address: IP Address
        :param _builtins.str ipv4_address_variable: Variable name
        :param _builtins.str mac_address: MAC address
        :param _builtins.str mac_address_variable: Variable name
        :param _builtins.bool optional: Indicates if list item is considered optional.
        """
        pulumi.set(__self__, "ipv4_address", ipv4_address)
        pulumi.set(__self__, "ipv4_address_variable", ipv4_address_variable)
        pulumi.set(__self__, "mac_address", mac_address)
        pulumi.set(__self__, "mac_address_variable", mac_address_variable)
        pulumi.set(__self__, "optional", optional)

    @_builtins.property
    @pulumi.getter(name="ipv4Address")
    def ipv4_address(self) -> _builtins.str:
        """
        IP Address
        """
        return pulumi.get(self, "ipv4_address")

    @_builtins.property
    @pulumi.getter(name="ipv4AddressVariable")
    def ipv4_address_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "ipv4_address_variable")

    @_builtins.property
    @pulumi.getter(name="macAddress")
    def mac_address(self) -> _builtins.str:
        """
        MAC address
        """
        return pulumi.get(self, "mac_address")

    @_builtins.property
    @pulumi.getter(name="macAddressVariable")
    def mac_address_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "mac_address_variable")

    @_builtins.property
    @pulumi.getter
    def optional(self) -> _builtins.bool:
        """
        Indicates if list item is considered optional.
        """
        return pulumi.get(self, "optional")


@pulumi.output_type
class GetVpnInterfaceT1E1SerialFeatureTemplateIpv4AccessListResult(dict):
    def __init__(__self__, *,
                 acl_name: _builtins.str,
                 acl_name_variable: _builtins.str,
                 direction: _builtins.str,
                 optional: _builtins.bool):
        """
        :param _builtins.str acl_name: Name of access list
        :param _builtins.str acl_name_variable: Variable name
        :param _builtins.str direction: Direction
        :param _builtins.bool optional: Indicates if list item is considered optional.
        """
        pulumi.set(__self__, "acl_name", acl_name)
        pulumi.set(__self__, "acl_name_variable", acl_name_variable)
        pulumi.set(__self__, "direction", direction)
        pulumi.set(__self__, "optional", optional)

    @_builtins.property
    @pulumi.getter(name="aclName")
    def acl_name(self) -> _builtins.str:
        """
        Name of access list
        """
        return pulumi.get(self, "acl_name")

    @_builtins.property
    @pulumi.getter(name="aclNameVariable")
    def acl_name_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "acl_name_variable")

    @_builtins.property
    @pulumi.getter
    def direction(self) -> _builtins.str:
        """
        Direction
        """
        return pulumi.get(self, "direction")

    @_builtins.property
    @pulumi.getter
    def optional(self) -> _builtins.bool:
        """
        Indicates if list item is considered optional.
        """
        return pulumi.get(self, "optional")


@pulumi.output_type
class GetVpnInterfaceT1E1SerialFeatureTemplateIpv6AccessListResult(dict):
    def __init__(__self__, *,
                 acl_name: _builtins.str,
                 acl_name_variable: _builtins.str,
                 direction: _builtins.str,
                 optional: _builtins.bool):
        """
        :param _builtins.str acl_name: Name of access list
        :param _builtins.str acl_name_variable: Variable name
        :param _builtins.str direction: Direction
        :param _builtins.bool optional: Indicates if list item is considered optional.
        """
        pulumi.set(__self__, "acl_name", acl_name)
        pulumi.set(__self__, "acl_name_variable", acl_name_variable)
        pulumi.set(__self__, "direction", direction)
        pulumi.set(__self__, "optional", optional)

    @_builtins.property
    @pulumi.getter(name="aclName")
    def acl_name(self) -> _builtins.str:
        """
        Name of access list
        """
        return pulumi.get(self, "acl_name")

    @_builtins.property
    @pulumi.getter(name="aclNameVariable")
    def acl_name_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "acl_name_variable")

    @_builtins.property
    @pulumi.getter
    def direction(self) -> _builtins.str:
        """
        Direction
        """
        return pulumi.get(self, "direction")

    @_builtins.property
    @pulumi.getter
    def optional(self) -> _builtins.bool:
        """
        Indicates if list item is considered optional.
        """
        return pulumi.get(self, "optional")


@pulumi.output_type
class GetVpnInterfaceT1E1SerialFeatureTemplateTunnelInterfaceEncapsulationResult(dict):
    def __init__(__self__, *,
                 encapsulation: _builtins.str,
                 optional: _builtins.bool,
                 preference: _builtins.int,
                 preference_variable: _builtins.str,
                 weight: _builtins.int,
                 weight_variable: _builtins.str):
        """
        :param _builtins.str encapsulation: Encapsulation
        :param _builtins.bool optional: Indicates if list item is considered optional.
        :param _builtins.int preference: Set preference for TLOC
        :param _builtins.str preference_variable: Variable name
        :param _builtins.int weight: Set weight for TLOC
        :param _builtins.str weight_variable: Variable name
        """
        pulumi.set(__self__, "encapsulation", encapsulation)
        pulumi.set(__self__, "optional", optional)
        pulumi.set(__self__, "preference", preference)
        pulumi.set(__self__, "preference_variable", preference_variable)
        pulumi.set(__self__, "weight", weight)
        pulumi.set(__self__, "weight_variable", weight_variable)

    @_builtins.property
    @pulumi.getter
    def encapsulation(self) -> _builtins.str:
        """
        Encapsulation
        """
        return pulumi.get(self, "encapsulation")

    @_builtins.property
    @pulumi.getter
    def optional(self) -> _builtins.bool:
        """
        Indicates if list item is considered optional.
        """
        return pulumi.get(self, "optional")

    @_builtins.property
    @pulumi.getter
    def preference(self) -> _builtins.int:
        """
        Set preference for TLOC
        """
        return pulumi.get(self, "preference")

    @_builtins.property
    @pulumi.getter(name="preferenceVariable")
    def preference_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "preference_variable")

    @_builtins.property
    @pulumi.getter
    def weight(self) -> _builtins.int:
        """
        Set weight for TLOC
        """
        return pulumi.get(self, "weight")

    @_builtins.property
    @pulumi.getter(name="weightVariable")
    def weight_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "weight_variable")


@pulumi.output_type
class GetVpnListPolicyObjectEntryResult(dict):
    def __init__(__self__, *,
                 vpn_id: _builtins.str):
        """
        :param _builtins.str vpn_id: VPN ID or range of VPN IDs e.g., `100` or `200-300`
        """
        pulumi.set(__self__, "vpn_id", vpn_id)

    @_builtins.property
    @pulumi.getter(name="vpnId")
    def vpn_id(self) -> _builtins.str:
        """
        VPN ID or range of VPN IDs e.g., `100` or `200-300`
        """
        return pulumi.get(self, "vpn_id")


@pulumi.output_type
class GetVpnMembershipPolicyDefinitionSiteResult(dict):
    def __init__(__self__, *,
                 site_list_id: _builtins.str,
                 site_list_version: _builtins.int,
                 vpn_list_ids: Sequence[_builtins.str],
                 vpn_list_versions: Sequence[_builtins.str]):
        """
        :param _builtins.str site_list_id: Site list ID
        :param _builtins.int site_list_version: Site list version
        :param Sequence[_builtins.str] vpn_list_ids: VPN list IDs
        :param Sequence[_builtins.str] vpn_list_versions: VPN list versions
        """
        pulumi.set(__self__, "site_list_id", site_list_id)
        pulumi.set(__self__, "site_list_version", site_list_version)
        pulumi.set(__self__, "vpn_list_ids", vpn_list_ids)
        pulumi.set(__self__, "vpn_list_versions", vpn_list_versions)

    @_builtins.property
    @pulumi.getter(name="siteListId")
    def site_list_id(self) -> _builtins.str:
        """
        Site list ID
        """
        return pulumi.get(self, "site_list_id")

    @_builtins.property
    @pulumi.getter(name="siteListVersion")
    def site_list_version(self) -> _builtins.int:
        """
        Site list version
        """
        return pulumi.get(self, "site_list_version")

    @_builtins.property
    @pulumi.getter(name="vpnListIds")
    def vpn_list_ids(self) -> Sequence[_builtins.str]:
        """
        VPN list IDs
        """
        return pulumi.get(self, "vpn_list_ids")

    @_builtins.property
    @pulumi.getter(name="vpnListVersions")
    def vpn_list_versions(self) -> Sequence[_builtins.str]:
        """
        VPN list versions
        """
        return pulumi.get(self, "vpn_list_versions")


@pulumi.output_type
class GetZoneBasedFirewallPolicyDefinitionApplyZonePairResult(dict):
    def __init__(__self__, *,
                 destination_zone: _builtins.str,
                 source_zone: _builtins.str):
        """
        :param _builtins.str destination_zone: Destination Zone
        :param _builtins.str source_zone: Source Zone
        """
        pulumi.set(__self__, "destination_zone", destination_zone)
        pulumi.set(__self__, "source_zone", source_zone)

    @_builtins.property
    @pulumi.getter(name="destinationZone")
    def destination_zone(self) -> _builtins.str:
        """
        Destination Zone
        """
        return pulumi.get(self, "destination_zone")

    @_builtins.property
    @pulumi.getter(name="sourceZone")
    def source_zone(self) -> _builtins.str:
        """
        Source Zone
        """
        return pulumi.get(self, "source_zone")


@pulumi.output_type
class GetZoneBasedFirewallPolicyDefinitionRuleResult(dict):
    def __init__(__self__, *,
                 action_entries: Sequence['outputs.GetZoneBasedFirewallPolicyDefinitionRuleActionEntryResult'],
                 base_action: _builtins.str,
                 match_entries: Sequence['outputs.GetZoneBasedFirewallPolicyDefinitionRuleMatchEntryResult'],
                 rule_name: _builtins.str,
                 rule_order: _builtins.int):
        """
        :param Sequence['GetZoneBasedFirewallPolicyDefinitionRuleActionEntryArgs'] action_entries: List of actions entries
        :param _builtins.str base_action: Base action
        :param Sequence['GetZoneBasedFirewallPolicyDefinitionRuleMatchEntryArgs'] match_entries: List of match entries
        :param _builtins.str rule_name: Rule name
        :param _builtins.int rule_order: Rule
        """
        pulumi.set(__self__, "action_entries", action_entries)
        pulumi.set(__self__, "base_action", base_action)
        pulumi.set(__self__, "match_entries", match_entries)
        pulumi.set(__self__, "rule_name", rule_name)
        pulumi.set(__self__, "rule_order", rule_order)

    @_builtins.property
    @pulumi.getter(name="actionEntries")
    def action_entries(self) -> Sequence['outputs.GetZoneBasedFirewallPolicyDefinitionRuleActionEntryResult']:
        """
        List of actions entries
        """
        return pulumi.get(self, "action_entries")

    @_builtins.property
    @pulumi.getter(name="baseAction")
    def base_action(self) -> _builtins.str:
        """
        Base action
        """
        return pulumi.get(self, "base_action")

    @_builtins.property
    @pulumi.getter(name="matchEntries")
    def match_entries(self) -> Sequence['outputs.GetZoneBasedFirewallPolicyDefinitionRuleMatchEntryResult']:
        """
        List of match entries
        """
        return pulumi.get(self, "match_entries")

    @_builtins.property
    @pulumi.getter(name="ruleName")
    def rule_name(self) -> _builtins.str:
        """
        Rule name
        """
        return pulumi.get(self, "rule_name")

    @_builtins.property
    @pulumi.getter(name="ruleOrder")
    def rule_order(self) -> _builtins.int:
        """
        Rule
        """
        return pulumi.get(self, "rule_order")


@pulumi.output_type
class GetZoneBasedFirewallPolicyDefinitionRuleActionEntryResult(dict):
    def __init__(__self__, *,
                 type: _builtins.str):
        """
        :param _builtins.str type: Type of action entry
        """
        pulumi.set(__self__, "type", type)

    @_builtins.property
    @pulumi.getter
    def type(self) -> _builtins.str:
        """
        Type of action entry
        """
        return pulumi.get(self, "type")


@pulumi.output_type
class GetZoneBasedFirewallPolicyDefinitionRuleMatchEntryResult(dict):
    def __init__(__self__, *,
                 policy_id: _builtins.str,
                 protocol_type: _builtins.str,
                 type: _builtins.str,
                 value: _builtins.str,
                 value_variable: _builtins.str):
        """
        :param _builtins.str policy_id: policy id for selected match entry
        :param _builtins.str protocol_type: Should be included with additionally entries for `destinationPort` and `protocol` whenever the type `protocolName` is used.
        :param _builtins.str type: Type of match entry
        :param _builtins.str value: value for selected match entry
        :param _builtins.str value_variable: variable value for selected match entry if it has variable option (sourceIp & destinationIp)
        """
        pulumi.set(__self__, "policy_id", policy_id)
        pulumi.set(__self__, "protocol_type", protocol_type)
        pulumi.set(__self__, "type", type)
        pulumi.set(__self__, "value", value)
        pulumi.set(__self__, "value_variable", value_variable)

    @_builtins.property
    @pulumi.getter(name="policyId")
    def policy_id(self) -> _builtins.str:
        """
        policy id for selected match entry
        """
        return pulumi.get(self, "policy_id")

    @_builtins.property
    @pulumi.getter(name="protocolType")
    def protocol_type(self) -> _builtins.str:
        """
        Should be included with additionally entries for `destinationPort` and `protocol` whenever the type `protocolName` is used.
        """
        return pulumi.get(self, "protocol_type")

    @_builtins.property
    @pulumi.getter
    def type(self) -> _builtins.str:
        """
        Type of match entry
        """
        return pulumi.get(self, "type")

    @_builtins.property
    @pulumi.getter
    def value(self) -> _builtins.str:
        """
        value for selected match entry
        """
        return pulumi.get(self, "value")

    @_builtins.property
    @pulumi.getter(name="valueVariable")
    def value_variable(self) -> _builtins.str:
        """
        variable value for selected match entry if it has variable option (sourceIp & destinationIp)
        """
        return pulumi.get(self, "value_variable")


@pulumi.output_type
class GetZoneListPolicyObjectEntryResult(dict):
    def __init__(__self__, *,
                 interface: _builtins.str,
                 vpn: _builtins.str):
        """
        :param _builtins.str interface: Interface name
        :param _builtins.str vpn: VPN ID
        """
        pulumi.set(__self__, "interface", interface)
        pulumi.set(__self__, "vpn", vpn)

    @_builtins.property
    @pulumi.getter
    def interface(self) -> _builtins.str:
        """
        Interface name
        """
        return pulumi.get(self, "interface")

    @_builtins.property
    @pulumi.getter
    def vpn(self) -> _builtins.str:
        """
        VPN ID
        """
        return pulumi.get(self, "vpn")


