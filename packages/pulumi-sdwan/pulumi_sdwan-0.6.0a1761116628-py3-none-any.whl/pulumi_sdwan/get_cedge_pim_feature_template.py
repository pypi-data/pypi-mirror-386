# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities
from . import outputs

__all__ = [
    'GetCedgePimFeatureTemplateResult',
    'AwaitableGetCedgePimFeatureTemplateResult',
    'get_cedge_pim_feature_template',
    'get_cedge_pim_feature_template_output',
]

@pulumi.output_type
class GetCedgePimFeatureTemplateResult:
    """
    A collection of values returned by getCedgePimFeatureTemplate.
    """
    def __init__(__self__, auto_rp=None, auto_rp_variable=None, bsr_candidate=None, bsr_candidate_variable=None, default=None, default_variable=None, description=None, device_types=None, hash_mask_length=None, hash_mask_length_variable=None, id=None, interface_name=None, interface_name_variable=None, interfaces=None, name=None, priority=None, priority_variable=None, range=None, range_variable=None, rp_addresses=None, rp_announce_fields=None, rp_candidate_access_list=None, rp_candidate_access_list_variable=None, rp_candidates=None, scope=None, scope_variable=None, spt_threshold=None, spt_threshold_variable=None, template_type=None, version=None):
        if auto_rp and not isinstance(auto_rp, bool):
            raise TypeError("Expected argument 'auto_rp' to be a bool")
        pulumi.set(__self__, "auto_rp", auto_rp)
        if auto_rp_variable and not isinstance(auto_rp_variable, str):
            raise TypeError("Expected argument 'auto_rp_variable' to be a str")
        pulumi.set(__self__, "auto_rp_variable", auto_rp_variable)
        if bsr_candidate and not isinstance(bsr_candidate, str):
            raise TypeError("Expected argument 'bsr_candidate' to be a str")
        pulumi.set(__self__, "bsr_candidate", bsr_candidate)
        if bsr_candidate_variable and not isinstance(bsr_candidate_variable, str):
            raise TypeError("Expected argument 'bsr_candidate_variable' to be a str")
        pulumi.set(__self__, "bsr_candidate_variable", bsr_candidate_variable)
        if default and not isinstance(default, bool):
            raise TypeError("Expected argument 'default' to be a bool")
        pulumi.set(__self__, "default", default)
        if default_variable and not isinstance(default_variable, str):
            raise TypeError("Expected argument 'default_variable' to be a str")
        pulumi.set(__self__, "default_variable", default_variable)
        if description and not isinstance(description, str):
            raise TypeError("Expected argument 'description' to be a str")
        pulumi.set(__self__, "description", description)
        if device_types and not isinstance(device_types, list):
            raise TypeError("Expected argument 'device_types' to be a list")
        pulumi.set(__self__, "device_types", device_types)
        if hash_mask_length and not isinstance(hash_mask_length, str):
            raise TypeError("Expected argument 'hash_mask_length' to be a str")
        pulumi.set(__self__, "hash_mask_length", hash_mask_length)
        if hash_mask_length_variable and not isinstance(hash_mask_length_variable, str):
            raise TypeError("Expected argument 'hash_mask_length_variable' to be a str")
        pulumi.set(__self__, "hash_mask_length_variable", hash_mask_length_variable)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if interface_name and not isinstance(interface_name, str):
            raise TypeError("Expected argument 'interface_name' to be a str")
        pulumi.set(__self__, "interface_name", interface_name)
        if interface_name_variable and not isinstance(interface_name_variable, str):
            raise TypeError("Expected argument 'interface_name_variable' to be a str")
        pulumi.set(__self__, "interface_name_variable", interface_name_variable)
        if interfaces and not isinstance(interfaces, list):
            raise TypeError("Expected argument 'interfaces' to be a list")
        pulumi.set(__self__, "interfaces", interfaces)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)
        if priority and not isinstance(priority, int):
            raise TypeError("Expected argument 'priority' to be a int")
        pulumi.set(__self__, "priority", priority)
        if priority_variable and not isinstance(priority_variable, str):
            raise TypeError("Expected argument 'priority_variable' to be a str")
        pulumi.set(__self__, "priority_variable", priority_variable)
        if range and not isinstance(range, str):
            raise TypeError("Expected argument 'range' to be a str")
        pulumi.set(__self__, "range", range)
        if range_variable and not isinstance(range_variable, str):
            raise TypeError("Expected argument 'range_variable' to be a str")
        pulumi.set(__self__, "range_variable", range_variable)
        if rp_addresses and not isinstance(rp_addresses, list):
            raise TypeError("Expected argument 'rp_addresses' to be a list")
        pulumi.set(__self__, "rp_addresses", rp_addresses)
        if rp_announce_fields and not isinstance(rp_announce_fields, list):
            raise TypeError("Expected argument 'rp_announce_fields' to be a list")
        pulumi.set(__self__, "rp_announce_fields", rp_announce_fields)
        if rp_candidate_access_list and not isinstance(rp_candidate_access_list, str):
            raise TypeError("Expected argument 'rp_candidate_access_list' to be a str")
        pulumi.set(__self__, "rp_candidate_access_list", rp_candidate_access_list)
        if rp_candidate_access_list_variable and not isinstance(rp_candidate_access_list_variable, str):
            raise TypeError("Expected argument 'rp_candidate_access_list_variable' to be a str")
        pulumi.set(__self__, "rp_candidate_access_list_variable", rp_candidate_access_list_variable)
        if rp_candidates and not isinstance(rp_candidates, list):
            raise TypeError("Expected argument 'rp_candidates' to be a list")
        pulumi.set(__self__, "rp_candidates", rp_candidates)
        if scope and not isinstance(scope, int):
            raise TypeError("Expected argument 'scope' to be a int")
        pulumi.set(__self__, "scope", scope)
        if scope_variable and not isinstance(scope_variable, str):
            raise TypeError("Expected argument 'scope_variable' to be a str")
        pulumi.set(__self__, "scope_variable", scope_variable)
        if spt_threshold and not isinstance(spt_threshold, str):
            raise TypeError("Expected argument 'spt_threshold' to be a str")
        pulumi.set(__self__, "spt_threshold", spt_threshold)
        if spt_threshold_variable and not isinstance(spt_threshold_variable, str):
            raise TypeError("Expected argument 'spt_threshold_variable' to be a str")
        pulumi.set(__self__, "spt_threshold_variable", spt_threshold_variable)
        if template_type and not isinstance(template_type, str):
            raise TypeError("Expected argument 'template_type' to be a str")
        pulumi.set(__self__, "template_type", template_type)
        if version and not isinstance(version, int):
            raise TypeError("Expected argument 'version' to be a int")
        pulumi.set(__self__, "version", version)

    @_builtins.property
    @pulumi.getter(name="autoRp")
    def auto_rp(self) -> _builtins.bool:
        """
        Enable or disable auto-RP
        """
        return pulumi.get(self, "auto_rp")

    @_builtins.property
    @pulumi.getter(name="autoRpVariable")
    def auto_rp_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "auto_rp_variable")

    @_builtins.property
    @pulumi.getter(name="bsrCandidate")
    def bsr_candidate(self) -> _builtins.str:
        """
        Set Autonomic-Networking virtual interface
        """
        return pulumi.get(self, "bsr_candidate")

    @_builtins.property
    @pulumi.getter(name="bsrCandidateVariable")
    def bsr_candidate_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "bsr_candidate_variable")

    @_builtins.property
    @pulumi.getter
    def default(self) -> _builtins.bool:
        """
        Turn SSM On / Off
        """
        return pulumi.get(self, "default")

    @_builtins.property
    @pulumi.getter(name="defaultVariable")
    def default_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "default_variable")

    @_builtins.property
    @pulumi.getter
    def description(self) -> _builtins.str:
        """
        The description of the feature template
        """
        return pulumi.get(self, "description")

    @_builtins.property
    @pulumi.getter(name="deviceTypes")
    def device_types(self) -> Sequence[_builtins.str]:
        """
        List of supported device types
        """
        return pulumi.get(self, "device_types")

    @_builtins.property
    @pulumi.getter(name="hashMaskLength")
    def hash_mask_length(self) -> _builtins.str:
        """
        Hash Mask length for RP selection
        """
        return pulumi.get(self, "hash_mask_length")

    @_builtins.property
    @pulumi.getter(name="hashMaskLengthVariable")
    def hash_mask_length_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "hash_mask_length_variable")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        The id of the feature template
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter(name="interfaceName")
    def interface_name(self) -> _builtins.str:
        """
        Set RP Discovery Interface Name
        """
        return pulumi.get(self, "interface_name")

    @_builtins.property
    @pulumi.getter(name="interfaceNameVariable")
    def interface_name_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "interface_name_variable")

    @_builtins.property
    @pulumi.getter
    def interfaces(self) -> Sequence['outputs.GetCedgePimFeatureTemplateInterfaceResult']:
        """
        Set PIM interface parameters
        """
        return pulumi.get(self, "interfaces")

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        """
        The name of the feature template
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def priority(self) -> _builtins.int:
        """
        Set RP candidate priority
        """
        return pulumi.get(self, "priority")

    @_builtins.property
    @pulumi.getter(name="priorityVariable")
    def priority_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "priority_variable")

    @_builtins.property
    @pulumi.getter
    def range(self) -> _builtins.str:
        """
        Set Access List for PIM SSM
        """
        return pulumi.get(self, "range")

    @_builtins.property
    @pulumi.getter(name="rangeVariable")
    def range_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "range_variable")

    @_builtins.property
    @pulumi.getter(name="rpAddresses")
    def rp_addresses(self) -> Sequence['outputs.GetCedgePimFeatureTemplateRpAddressResult']:
        """
        Set Static RP Address(es)
        """
        return pulumi.get(self, "rp_addresses")

    @_builtins.property
    @pulumi.getter(name="rpAnnounceFields")
    def rp_announce_fields(self) -> Sequence['outputs.GetCedgePimFeatureTemplateRpAnnounceFieldResult']:
        """
        Enable or disable RP Announce
        """
        return pulumi.get(self, "rp_announce_fields")

    @_builtins.property
    @pulumi.getter(name="rpCandidateAccessList")
    def rp_candidate_access_list(self) -> _builtins.str:
        """
        Set BSR RP candidate filter
        """
        return pulumi.get(self, "rp_candidate_access_list")

    @_builtins.property
    @pulumi.getter(name="rpCandidateAccessListVariable")
    def rp_candidate_access_list_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "rp_candidate_access_list_variable")

    @_builtins.property
    @pulumi.getter(name="rpCandidates")
    def rp_candidates(self) -> Sequence['outputs.GetCedgePimFeatureTemplateRpCandidateResult']:
        """
        Set RP Discovery Scope
        """
        return pulumi.get(self, "rp_candidates")

    @_builtins.property
    @pulumi.getter
    def scope(self) -> _builtins.int:
        """
        Set RP Discovery Scope
        """
        return pulumi.get(self, "scope")

    @_builtins.property
    @pulumi.getter(name="scopeVariable")
    def scope_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "scope_variable")

    @_builtins.property
    @pulumi.getter(name="sptThreshold")
    def spt_threshold(self) -> _builtins.str:
        """
        Set when PIM router joins the SPT (kbps)
        """
        return pulumi.get(self, "spt_threshold")

    @_builtins.property
    @pulumi.getter(name="sptThresholdVariable")
    def spt_threshold_variable(self) -> _builtins.str:
        """
        Variable name
        """
        return pulumi.get(self, "spt_threshold_variable")

    @_builtins.property
    @pulumi.getter(name="templateType")
    def template_type(self) -> _builtins.str:
        """
        The template type
        """
        return pulumi.get(self, "template_type")

    @_builtins.property
    @pulumi.getter
    def version(self) -> _builtins.int:
        """
        The version of the feature template
        """
        return pulumi.get(self, "version")


class AwaitableGetCedgePimFeatureTemplateResult(GetCedgePimFeatureTemplateResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetCedgePimFeatureTemplateResult(
            auto_rp=self.auto_rp,
            auto_rp_variable=self.auto_rp_variable,
            bsr_candidate=self.bsr_candidate,
            bsr_candidate_variable=self.bsr_candidate_variable,
            default=self.default,
            default_variable=self.default_variable,
            description=self.description,
            device_types=self.device_types,
            hash_mask_length=self.hash_mask_length,
            hash_mask_length_variable=self.hash_mask_length_variable,
            id=self.id,
            interface_name=self.interface_name,
            interface_name_variable=self.interface_name_variable,
            interfaces=self.interfaces,
            name=self.name,
            priority=self.priority,
            priority_variable=self.priority_variable,
            range=self.range,
            range_variable=self.range_variable,
            rp_addresses=self.rp_addresses,
            rp_announce_fields=self.rp_announce_fields,
            rp_candidate_access_list=self.rp_candidate_access_list,
            rp_candidate_access_list_variable=self.rp_candidate_access_list_variable,
            rp_candidates=self.rp_candidates,
            scope=self.scope,
            scope_variable=self.scope_variable,
            spt_threshold=self.spt_threshold,
            spt_threshold_variable=self.spt_threshold_variable,
            template_type=self.template_type,
            version=self.version)


def get_cedge_pim_feature_template(id: Optional[_builtins.str] = None,
                                   name: Optional[_builtins.str] = None,
                                   opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetCedgePimFeatureTemplateResult:
    """
    This data source can read the cEdge PIM feature template.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_sdwan as sdwan

    example = sdwan.get_cedge_pim_feature_template(id="f6b2c44c-693c-4763-b010-895aa3d236bd")
    ```


    :param _builtins.str id: The id of the feature template
    :param _builtins.str name: The name of the feature template
    """
    __args__ = dict()
    __args__['id'] = id
    __args__['name'] = name
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('sdwan:index/getCedgePimFeatureTemplate:getCedgePimFeatureTemplate', __args__, opts=opts, typ=GetCedgePimFeatureTemplateResult).value

    return AwaitableGetCedgePimFeatureTemplateResult(
        auto_rp=pulumi.get(__ret__, 'auto_rp'),
        auto_rp_variable=pulumi.get(__ret__, 'auto_rp_variable'),
        bsr_candidate=pulumi.get(__ret__, 'bsr_candidate'),
        bsr_candidate_variable=pulumi.get(__ret__, 'bsr_candidate_variable'),
        default=pulumi.get(__ret__, 'default'),
        default_variable=pulumi.get(__ret__, 'default_variable'),
        description=pulumi.get(__ret__, 'description'),
        device_types=pulumi.get(__ret__, 'device_types'),
        hash_mask_length=pulumi.get(__ret__, 'hash_mask_length'),
        hash_mask_length_variable=pulumi.get(__ret__, 'hash_mask_length_variable'),
        id=pulumi.get(__ret__, 'id'),
        interface_name=pulumi.get(__ret__, 'interface_name'),
        interface_name_variable=pulumi.get(__ret__, 'interface_name_variable'),
        interfaces=pulumi.get(__ret__, 'interfaces'),
        name=pulumi.get(__ret__, 'name'),
        priority=pulumi.get(__ret__, 'priority'),
        priority_variable=pulumi.get(__ret__, 'priority_variable'),
        range=pulumi.get(__ret__, 'range'),
        range_variable=pulumi.get(__ret__, 'range_variable'),
        rp_addresses=pulumi.get(__ret__, 'rp_addresses'),
        rp_announce_fields=pulumi.get(__ret__, 'rp_announce_fields'),
        rp_candidate_access_list=pulumi.get(__ret__, 'rp_candidate_access_list'),
        rp_candidate_access_list_variable=pulumi.get(__ret__, 'rp_candidate_access_list_variable'),
        rp_candidates=pulumi.get(__ret__, 'rp_candidates'),
        scope=pulumi.get(__ret__, 'scope'),
        scope_variable=pulumi.get(__ret__, 'scope_variable'),
        spt_threshold=pulumi.get(__ret__, 'spt_threshold'),
        spt_threshold_variable=pulumi.get(__ret__, 'spt_threshold_variable'),
        template_type=pulumi.get(__ret__, 'template_type'),
        version=pulumi.get(__ret__, 'version'))
def get_cedge_pim_feature_template_output(id: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                          name: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                          opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetCedgePimFeatureTemplateResult]:
    """
    This data source can read the cEdge PIM feature template.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_sdwan as sdwan

    example = sdwan.get_cedge_pim_feature_template(id="f6b2c44c-693c-4763-b010-895aa3d236bd")
    ```


    :param _builtins.str id: The id of the feature template
    :param _builtins.str name: The name of the feature template
    """
    __args__ = dict()
    __args__['id'] = id
    __args__['name'] = name
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('sdwan:index/getCedgePimFeatureTemplate:getCedgePimFeatureTemplate', __args__, opts=opts, typ=GetCedgePimFeatureTemplateResult)
    return __ret__.apply(lambda __response__: GetCedgePimFeatureTemplateResult(
        auto_rp=pulumi.get(__response__, 'auto_rp'),
        auto_rp_variable=pulumi.get(__response__, 'auto_rp_variable'),
        bsr_candidate=pulumi.get(__response__, 'bsr_candidate'),
        bsr_candidate_variable=pulumi.get(__response__, 'bsr_candidate_variable'),
        default=pulumi.get(__response__, 'default'),
        default_variable=pulumi.get(__response__, 'default_variable'),
        description=pulumi.get(__response__, 'description'),
        device_types=pulumi.get(__response__, 'device_types'),
        hash_mask_length=pulumi.get(__response__, 'hash_mask_length'),
        hash_mask_length_variable=pulumi.get(__response__, 'hash_mask_length_variable'),
        id=pulumi.get(__response__, 'id'),
        interface_name=pulumi.get(__response__, 'interface_name'),
        interface_name_variable=pulumi.get(__response__, 'interface_name_variable'),
        interfaces=pulumi.get(__response__, 'interfaces'),
        name=pulumi.get(__response__, 'name'),
        priority=pulumi.get(__response__, 'priority'),
        priority_variable=pulumi.get(__response__, 'priority_variable'),
        range=pulumi.get(__response__, 'range'),
        range_variable=pulumi.get(__response__, 'range_variable'),
        rp_addresses=pulumi.get(__response__, 'rp_addresses'),
        rp_announce_fields=pulumi.get(__response__, 'rp_announce_fields'),
        rp_candidate_access_list=pulumi.get(__response__, 'rp_candidate_access_list'),
        rp_candidate_access_list_variable=pulumi.get(__response__, 'rp_candidate_access_list_variable'),
        rp_candidates=pulumi.get(__response__, 'rp_candidates'),
        scope=pulumi.get(__response__, 'scope'),
        scope_variable=pulumi.get(__response__, 'scope_variable'),
        spt_threshold=pulumi.get(__response__, 'spt_threshold'),
        spt_threshold_variable=pulumi.get(__response__, 'spt_threshold_variable'),
        template_type=pulumi.get(__response__, 'template_type'),
        version=pulumi.get(__response__, 'version')))
